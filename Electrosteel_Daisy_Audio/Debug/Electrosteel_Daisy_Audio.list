
Electrosteel_Daisy_Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  24000000  24000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00033658  24000298  24000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab    00000000  240338f0  240338f0  0006b2b8  2**0
                  CONTENTS
  3 .exidx        00000000  240338f0  240338f0  0006b2b8  2**0
                  CONTENTS
  4 .ARM.attributes 0000002e  240338f0  240338f0  0006b2b8  2**0
                  CONTENTS, READONLY
  5 .init_array   00000004  240338f0  240338f0  000438f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  240338f4  240338f4  000438f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .sram1_bss    00040000  24040000  24040000  00070000  2**5
                  ALLOC
  8 .sram2_dma_bss 00000880  30000000  30000000  00070000  2**5
                  ALLOC
  9 .sram2_bss    00043180  30002000  30002000  00072000  2**5
                  ALLOC
 10 .sram3_bss    00000080  38000000  38000000  00070000  2**5
                  ALLOC
 11 .userflash    00000020  38800000  38800000  00070000  2**5
                  ALLOC
 12 .data         000007bc  20000000  240338f8  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          0001d6a4  200007c0  240340b4  000707c0  2**3
                  ALLOC
 14 .itcmram      0000aeb8  00000400  240340b4  00060400  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .sdram_bss    03e00000  c0000000  c0000000  00070000  2**5
                  ALLOC
 16 .qspiflash_text 00000000  90040000  90040000  0006b2e6  2**0
                  CONTENTS
 17 .qspiflash_data 00000000  90040000  90040000  0006b2e6  2**0
                  CONTENTS
 18 .qspiflash_bss 00000000  90040000  90040000  0006b2e6  2**0
                  CONTENTS
 19 .heap         00000000  2001de64  2001de64  0006b2e6  2**0
                  CONTENTS
 20 .reserved_for_stack 00000000  2001de64  2001de64  0006b2e6  2**0
                  CONTENTS
 21 .comment      000000b8  00000000  00000000  0006b2e6  2**0
                  CONTENTS, READONLY
 22 .debug_info   00091d67  00000000  00000000  0006b39e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_abbrev 0000b171  00000000  00000000  000fd105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loclists 000585bb  00000000  00000000  00108276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_aranges 00003fe0  00000000  00000000  00160831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_rnglists 0000996d  00000000  00000000  00164811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_macro  0004327b  00000000  00000000  0016e17e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_line   0007c36a  00000000  00000000  001b13f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_str    00175016  00000000  00000000  0022d763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_frame  0000e380  00000000  00000000  003a277c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 31 .debug_loc    00001c3a  00000000  00000000  003b0afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 32 .debug_ranges 00000050  00000000  00000000  003b2736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

24000298 <__do_global_dtors_aux>:
24000298:	b510      	push	{r4, lr}
2400029a:	4c05      	ldr	r4, [pc, #20]	; (240002b0 <__do_global_dtors_aux+0x18>)
2400029c:	7823      	ldrb	r3, [r4, #0]
2400029e:	b933      	cbnz	r3, 240002ae <__do_global_dtors_aux+0x16>
240002a0:	4b04      	ldr	r3, [pc, #16]	; (240002b4 <__do_global_dtors_aux+0x1c>)
240002a2:	b113      	cbz	r3, 240002aa <__do_global_dtors_aux+0x12>
240002a4:	4804      	ldr	r0, [pc, #16]	; (240002b8 <__do_global_dtors_aux+0x20>)
240002a6:	f3af 8000 	nop.w
240002aa:	2301      	movs	r3, #1
240002ac:	7023      	strb	r3, [r4, #0]
240002ae:	bd10      	pop	{r4, pc}
240002b0:	200007c0 	.word	0x200007c0
240002b4:	00000000 	.word	0x00000000
240002b8:	0000b2b8 	.word	0x0000b2b8

240002bc <frame_dummy>:
240002bc:	b508      	push	{r3, lr}
240002be:	4b03      	ldr	r3, [pc, #12]	; (240002cc <frame_dummy+0x10>)
240002c0:	b11b      	cbz	r3, 240002ca <frame_dummy+0xe>
240002c2:	4903      	ldr	r1, [pc, #12]	; (240002d0 <frame_dummy+0x14>)
240002c4:	4803      	ldr	r0, [pc, #12]	; (240002d4 <frame_dummy+0x18>)
240002c6:	f3af 8000 	nop.w
240002ca:	bd08      	pop	{r3, pc}
240002cc:	00000000 	.word	0x00000000
240002d0:	200007c4 	.word	0x200007c4
240002d4:	0000b2b8 	.word	0x0000b2b8

240002d8 <strlen>:
240002d8:	4603      	mov	r3, r0
240002da:	f813 2b01 	ldrb.w	r2, [r3], #1
240002de:	2a00      	cmp	r2, #0
240002e0:	d1fb      	bne.n	240002da <strlen+0x2>
240002e2:	1a18      	subs	r0, r3, r0
240002e4:	3801      	subs	r0, #1
240002e6:	4770      	bx	lr

240002e8 <__aeabi_drsub>:
240002e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
240002ec:	e002      	b.n	240002f4 <__adddf3>
240002ee:	bf00      	nop

240002f0 <__aeabi_dsub>:
240002f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

240002f4 <__adddf3>:
240002f4:	b530      	push	{r4, r5, lr}
240002f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
240002fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
240002fe:	ea94 0f05 	teq	r4, r5
24000302:	bf08      	it	eq
24000304:	ea90 0f02 	teqeq	r0, r2
24000308:	bf1f      	itttt	ne
2400030a:	ea54 0c00 	orrsne.w	ip, r4, r0
2400030e:	ea55 0c02 	orrsne.w	ip, r5, r2
24000312:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
24000316:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
2400031a:	f000 80e2 	beq.w	240004e2 <__adddf3+0x1ee>
2400031e:	ea4f 5454 	mov.w	r4, r4, lsr #21
24000322:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
24000326:	bfb8      	it	lt
24000328:	426d      	neglt	r5, r5
2400032a:	dd0c      	ble.n	24000346 <__adddf3+0x52>
2400032c:	442c      	add	r4, r5
2400032e:	ea80 0202 	eor.w	r2, r0, r2
24000332:	ea81 0303 	eor.w	r3, r1, r3
24000336:	ea82 0000 	eor.w	r0, r2, r0
2400033a:	ea83 0101 	eor.w	r1, r3, r1
2400033e:	ea80 0202 	eor.w	r2, r0, r2
24000342:	ea81 0303 	eor.w	r3, r1, r3
24000346:	2d36      	cmp	r5, #54	; 0x36
24000348:	bf88      	it	hi
2400034a:	bd30      	pophi	{r4, r5, pc}
2400034c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
24000350:	ea4f 3101 	mov.w	r1, r1, lsl #12
24000354:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
24000358:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
2400035c:	d002      	beq.n	24000364 <__adddf3+0x70>
2400035e:	4240      	negs	r0, r0
24000360:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
24000364:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
24000368:	ea4f 3303 	mov.w	r3, r3, lsl #12
2400036c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
24000370:	d002      	beq.n	24000378 <__adddf3+0x84>
24000372:	4252      	negs	r2, r2
24000374:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
24000378:	ea94 0f05 	teq	r4, r5
2400037c:	f000 80a7 	beq.w	240004ce <__adddf3+0x1da>
24000380:	f1a4 0401 	sub.w	r4, r4, #1
24000384:	f1d5 0e20 	rsbs	lr, r5, #32
24000388:	db0d      	blt.n	240003a6 <__adddf3+0xb2>
2400038a:	fa02 fc0e 	lsl.w	ip, r2, lr
2400038e:	fa22 f205 	lsr.w	r2, r2, r5
24000392:	1880      	adds	r0, r0, r2
24000394:	f141 0100 	adc.w	r1, r1, #0
24000398:	fa03 f20e 	lsl.w	r2, r3, lr
2400039c:	1880      	adds	r0, r0, r2
2400039e:	fa43 f305 	asr.w	r3, r3, r5
240003a2:	4159      	adcs	r1, r3
240003a4:	e00e      	b.n	240003c4 <__adddf3+0xd0>
240003a6:	f1a5 0520 	sub.w	r5, r5, #32
240003aa:	f10e 0e20 	add.w	lr, lr, #32
240003ae:	2a01      	cmp	r2, #1
240003b0:	fa03 fc0e 	lsl.w	ip, r3, lr
240003b4:	bf28      	it	cs
240003b6:	f04c 0c02 	orrcs.w	ip, ip, #2
240003ba:	fa43 f305 	asr.w	r3, r3, r5
240003be:	18c0      	adds	r0, r0, r3
240003c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
240003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
240003c8:	d507      	bpl.n	240003da <__adddf3+0xe6>
240003ca:	f04f 0e00 	mov.w	lr, #0
240003ce:	f1dc 0c00 	rsbs	ip, ip, #0
240003d2:	eb7e 0000 	sbcs.w	r0, lr, r0
240003d6:	eb6e 0101 	sbc.w	r1, lr, r1
240003da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
240003de:	d31b      	bcc.n	24000418 <__adddf3+0x124>
240003e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
240003e4:	d30c      	bcc.n	24000400 <__adddf3+0x10c>
240003e6:	0849      	lsrs	r1, r1, #1
240003e8:	ea5f 0030 	movs.w	r0, r0, rrx
240003ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
240003f0:	f104 0401 	add.w	r4, r4, #1
240003f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
240003f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
240003fc:	f080 809a 	bcs.w	24000534 <__adddf3+0x240>
24000400:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
24000404:	bf08      	it	eq
24000406:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
2400040a:	f150 0000 	adcs.w	r0, r0, #0
2400040e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
24000412:	ea41 0105 	orr.w	r1, r1, r5
24000416:	bd30      	pop	{r4, r5, pc}
24000418:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
2400041c:	4140      	adcs	r0, r0
2400041e:	eb41 0101 	adc.w	r1, r1, r1
24000422:	3c01      	subs	r4, #1
24000424:	bf28      	it	cs
24000426:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
2400042a:	d2e9      	bcs.n	24000400 <__adddf3+0x10c>
2400042c:	f091 0f00 	teq	r1, #0
24000430:	bf04      	itt	eq
24000432:	4601      	moveq	r1, r0
24000434:	2000      	moveq	r0, #0
24000436:	fab1 f381 	clz	r3, r1
2400043a:	bf08      	it	eq
2400043c:	3320      	addeq	r3, #32
2400043e:	f1a3 030b 	sub.w	r3, r3, #11
24000442:	f1b3 0220 	subs.w	r2, r3, #32
24000446:	da0c      	bge.n	24000462 <__adddf3+0x16e>
24000448:	320c      	adds	r2, #12
2400044a:	dd08      	ble.n	2400045e <__adddf3+0x16a>
2400044c:	f102 0c14 	add.w	ip, r2, #20
24000450:	f1c2 020c 	rsb	r2, r2, #12
24000454:	fa01 f00c 	lsl.w	r0, r1, ip
24000458:	fa21 f102 	lsr.w	r1, r1, r2
2400045c:	e00c      	b.n	24000478 <__adddf3+0x184>
2400045e:	f102 0214 	add.w	r2, r2, #20
24000462:	bfd8      	it	le
24000464:	f1c2 0c20 	rsble	ip, r2, #32
24000468:	fa01 f102 	lsl.w	r1, r1, r2
2400046c:	fa20 fc0c 	lsr.w	ip, r0, ip
24000470:	bfdc      	itt	le
24000472:	ea41 010c 	orrle.w	r1, r1, ip
24000476:	4090      	lslle	r0, r2
24000478:	1ae4      	subs	r4, r4, r3
2400047a:	bfa2      	ittt	ge
2400047c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
24000480:	4329      	orrge	r1, r5
24000482:	bd30      	popge	{r4, r5, pc}
24000484:	ea6f 0404 	mvn.w	r4, r4
24000488:	3c1f      	subs	r4, #31
2400048a:	da1c      	bge.n	240004c6 <__adddf3+0x1d2>
2400048c:	340c      	adds	r4, #12
2400048e:	dc0e      	bgt.n	240004ae <__adddf3+0x1ba>
24000490:	f104 0414 	add.w	r4, r4, #20
24000494:	f1c4 0220 	rsb	r2, r4, #32
24000498:	fa20 f004 	lsr.w	r0, r0, r4
2400049c:	fa01 f302 	lsl.w	r3, r1, r2
240004a0:	ea40 0003 	orr.w	r0, r0, r3
240004a4:	fa21 f304 	lsr.w	r3, r1, r4
240004a8:	ea45 0103 	orr.w	r1, r5, r3
240004ac:	bd30      	pop	{r4, r5, pc}
240004ae:	f1c4 040c 	rsb	r4, r4, #12
240004b2:	f1c4 0220 	rsb	r2, r4, #32
240004b6:	fa20 f002 	lsr.w	r0, r0, r2
240004ba:	fa01 f304 	lsl.w	r3, r1, r4
240004be:	ea40 0003 	orr.w	r0, r0, r3
240004c2:	4629      	mov	r1, r5
240004c4:	bd30      	pop	{r4, r5, pc}
240004c6:	fa21 f004 	lsr.w	r0, r1, r4
240004ca:	4629      	mov	r1, r5
240004cc:	bd30      	pop	{r4, r5, pc}
240004ce:	f094 0f00 	teq	r4, #0
240004d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
240004d6:	bf06      	itte	eq
240004d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
240004dc:	3401      	addeq	r4, #1
240004de:	3d01      	subne	r5, #1
240004e0:	e74e      	b.n	24000380 <__adddf3+0x8c>
240004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
240004e6:	bf18      	it	ne
240004e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
240004ec:	d029      	beq.n	24000542 <__adddf3+0x24e>
240004ee:	ea94 0f05 	teq	r4, r5
240004f2:	bf08      	it	eq
240004f4:	ea90 0f02 	teqeq	r0, r2
240004f8:	d005      	beq.n	24000506 <__adddf3+0x212>
240004fa:	ea54 0c00 	orrs.w	ip, r4, r0
240004fe:	bf04      	itt	eq
24000500:	4619      	moveq	r1, r3
24000502:	4610      	moveq	r0, r2
24000504:	bd30      	pop	{r4, r5, pc}
24000506:	ea91 0f03 	teq	r1, r3
2400050a:	bf1e      	ittt	ne
2400050c:	2100      	movne	r1, #0
2400050e:	2000      	movne	r0, #0
24000510:	bd30      	popne	{r4, r5, pc}
24000512:	ea5f 5c54 	movs.w	ip, r4, lsr #21
24000516:	d105      	bne.n	24000524 <__adddf3+0x230>
24000518:	0040      	lsls	r0, r0, #1
2400051a:	4149      	adcs	r1, r1
2400051c:	bf28      	it	cs
2400051e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
24000522:	bd30      	pop	{r4, r5, pc}
24000524:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
24000528:	bf3c      	itt	cc
2400052a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
2400052e:	bd30      	popcc	{r4, r5, pc}
24000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
24000534:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
24000538:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
2400053c:	f04f 0000 	mov.w	r0, #0
24000540:	bd30      	pop	{r4, r5, pc}
24000542:	ea7f 5c64 	mvns.w	ip, r4, asr #21
24000546:	bf1a      	itte	ne
24000548:	4619      	movne	r1, r3
2400054a:	4610      	movne	r0, r2
2400054c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
24000550:	bf1c      	itt	ne
24000552:	460b      	movne	r3, r1
24000554:	4602      	movne	r2, r0
24000556:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
2400055a:	bf06      	itte	eq
2400055c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
24000560:	ea91 0f03 	teqeq	r1, r3
24000564:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
24000568:	bd30      	pop	{r4, r5, pc}
2400056a:	bf00      	nop

2400056c <__aeabi_ui2d>:
2400056c:	f090 0f00 	teq	r0, #0
24000570:	bf04      	itt	eq
24000572:	2100      	moveq	r1, #0
24000574:	4770      	bxeq	lr
24000576:	b530      	push	{r4, r5, lr}
24000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
2400057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
24000580:	f04f 0500 	mov.w	r5, #0
24000584:	f04f 0100 	mov.w	r1, #0
24000588:	e750      	b.n	2400042c <__adddf3+0x138>
2400058a:	bf00      	nop

2400058c <__aeabi_i2d>:
2400058c:	f090 0f00 	teq	r0, #0
24000590:	bf04      	itt	eq
24000592:	2100      	moveq	r1, #0
24000594:	4770      	bxeq	lr
24000596:	b530      	push	{r4, r5, lr}
24000598:	f44f 6480 	mov.w	r4, #1024	; 0x400
2400059c:	f104 0432 	add.w	r4, r4, #50	; 0x32
240005a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
240005a4:	bf48      	it	mi
240005a6:	4240      	negmi	r0, r0
240005a8:	f04f 0100 	mov.w	r1, #0
240005ac:	e73e      	b.n	2400042c <__adddf3+0x138>
240005ae:	bf00      	nop

240005b0 <__aeabi_f2d>:
240005b0:	0042      	lsls	r2, r0, #1
240005b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
240005b6:	ea4f 0131 	mov.w	r1, r1, rrx
240005ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
240005be:	bf1f      	itttt	ne
240005c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
240005c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
240005c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
240005cc:	4770      	bxne	lr
240005ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
240005d2:	bf08      	it	eq
240005d4:	4770      	bxeq	lr
240005d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
240005da:	bf04      	itt	eq
240005dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
240005e0:	4770      	bxeq	lr
240005e2:	b530      	push	{r4, r5, lr}
240005e4:	f44f 7460 	mov.w	r4, #896	; 0x380
240005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
240005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
240005f0:	e71c      	b.n	2400042c <__adddf3+0x138>
240005f2:	bf00      	nop

240005f4 <__aeabi_ul2d>:
240005f4:	ea50 0201 	orrs.w	r2, r0, r1
240005f8:	bf08      	it	eq
240005fa:	4770      	bxeq	lr
240005fc:	b530      	push	{r4, r5, lr}
240005fe:	f04f 0500 	mov.w	r5, #0
24000602:	e00a      	b.n	2400061a <__aeabi_l2d+0x16>

24000604 <__aeabi_l2d>:
24000604:	ea50 0201 	orrs.w	r2, r0, r1
24000608:	bf08      	it	eq
2400060a:	4770      	bxeq	lr
2400060c:	b530      	push	{r4, r5, lr}
2400060e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
24000612:	d502      	bpl.n	2400061a <__aeabi_l2d+0x16>
24000614:	4240      	negs	r0, r0
24000616:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
2400061a:	f44f 6480 	mov.w	r4, #1024	; 0x400
2400061e:	f104 0432 	add.w	r4, r4, #50	; 0x32
24000622:	ea5f 5c91 	movs.w	ip, r1, lsr #22
24000626:	f43f aed8 	beq.w	240003da <__adddf3+0xe6>
2400062a:	f04f 0203 	mov.w	r2, #3
2400062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
24000632:	bf18      	it	ne
24000634:	3203      	addne	r2, #3
24000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
2400063a:	bf18      	it	ne
2400063c:	3203      	addne	r2, #3
2400063e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
24000642:	f1c2 0320 	rsb	r3, r2, #32
24000646:	fa00 fc03 	lsl.w	ip, r0, r3
2400064a:	fa20 f002 	lsr.w	r0, r0, r2
2400064e:	fa01 fe03 	lsl.w	lr, r1, r3
24000652:	ea40 000e 	orr.w	r0, r0, lr
24000656:	fa21 f102 	lsr.w	r1, r1, r2
2400065a:	4414      	add	r4, r2
2400065c:	e6bd      	b.n	240003da <__adddf3+0xe6>
2400065e:	bf00      	nop

24000660 <changeOversampling>:
    return dbtoATable[inDBIndex];
}

void changeOversampling(uint32_t newOS)
{
	if (newOS != prevOversample)
24000660:	4b8f      	ldr	r3, [pc, #572]	; (240008a0 <changeOversampling+0x240>)
{
24000662:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24000666:	ed2d 8b02 	vpush	{d8}
	if (newOS != prevOversample)
2400066a:	681b      	ldr	r3, [r3, #0]
{
2400066c:	b089      	sub	sp, #36	; 0x24
	if (newOS != prevOversample)
2400066e:	4283      	cmp	r3, r0
{
24000670:	9007      	str	r0, [sp, #28]
	if (newOS != prevOversample)
24000672:	f000 810c 	beq.w	2400088e <changeOversampling+0x22e>
	{
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
		for (int v = 0; v < numStringsThisBoard; v++)
24000676:	4b8b      	ldr	r3, [pc, #556]	; (240008a4 <changeOversampling+0x244>)
24000678:	781b      	ldrb	r3, [r3, #0]
2400067a:	2b00      	cmp	r3, #0
2400067c:	f000 8107 	beq.w	2400088e <changeOversampling+0x22e>
24000680:	4603      	mov	r3, r0
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
24000682:	eddf 7a89 	vldr	s15, [pc, #548]	; 240008a8 <changeOversampling+0x248>
		{
			for (int i = 0; i < NUM_EFFECT; i++)
			{
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
24000686:	2200      	movs	r2, #0
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
24000688:	3301      	adds	r3, #1
		for (int v = 0; v < numStringsThisBoard; v++)
2400068a:	9205      	str	r2, [sp, #20]
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
2400068c:	ee07 3a10 	vmov	s14, r3
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
24000690:	2320      	movs	r3, #32
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
24000692:	eeb8 8a47 	vcvt.f32.u32	s16, s14
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
24000696:	9304      	str	r3, [sp, #16]
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
24000698:	ee28 8a27 	vmul.f32	s16, s16, s15
2400069c:	eebc 8ac8 	vcvt.u32.f32	s16, s16
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
240006a0:	eeb8 8a48 	vcvt.f32.u32	s16, s16
240006a4:	4b81      	ldr	r3, [pc, #516]	; (240008ac <changeOversampling+0x24c>)
		for (int v = 0; v < numStringsThisBoard; v++)
240006a6:	4614      	mov	r4, r2
240006a8:	9904      	ldr	r1, [sp, #16]
240006aa:	9206      	str	r2, [sp, #24]
240006ac:	eb03 0a01 	add.w	sl, r3, r1
240006b0:	4b7f      	ldr	r3, [pc, #508]	; (240008b0 <changeOversampling+0x250>)
240006b2:	eb03 0902 	add.w	r9, r3, r2
240006b6:	4b7f      	ldr	r3, [pc, #508]	; (240008b4 <changeOversampling+0x254>)
240006b8:	eb03 0802 	add.w	r8, r3, r2
240006bc:	4b7e      	ldr	r3, [pc, #504]	; (240008b8 <changeOversampling+0x258>)
240006be:	189f      	adds	r7, r3, r2
240006c0:	4b7e      	ldr	r3, [pc, #504]	; (240008bc <changeOversampling+0x25c>)
240006c2:	189e      	adds	r6, r3, r2
240006c4:	4b7e      	ldr	r3, [pc, #504]	; (240008c0 <changeOversampling+0x260>)
240006c6:	189d      	adds	r5, r3, r2
240006c8:	4b7e      	ldr	r3, [pc, #504]	; (240008c4 <changeOversampling+0x264>)
240006ca:	4413      	add	r3, r2
240006cc:	469b      	mov	fp, r3
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
240006ce:	4b7e      	ldr	r3, [pc, #504]	; (240008c8 <changeOversampling+0x268>)
240006d0:	eeb0 0a48 	vmov.f32	s0, s16
240006d4:	1918      	adds	r0, r3, r4
240006d6:	f011 f881 	bl	240117dc <tHighpass_setSampleRate>
				tHighpass_setSampleRate(&dcBlock2[i][v], osMult);
240006da:	4b7c      	ldr	r3, [pc, #496]	; (240008cc <changeOversampling+0x26c>)
240006dc:	eeb0 0a48 	vmov.f32	s0, s16
240006e0:	1918      	adds	r0, r3, r4
240006e2:	f011 f87b 	bl	240117dc <tHighpass_setSampleRate>
				tVZFilterLS_setSampleRate(&shelf1[i][v], osMult);
240006e6:	4650      	mov	r0, sl
240006e8:	eeb0 0a48 	vmov.f32	s0, s16
240006ec:	f011 fd18 	bl	24012120 <tVZFilterLS_setSampleRate>
				tVZFilterLS_setFreqFast(&shelf1[i][v], shelf1[i][v]->cutoffMIDI);
240006f0:	f8da 3000 	ldr.w	r3, [sl]
240006f4:	4650      	mov	r0, sl
			for (int i = 0; i < NUM_EFFECT; i++)
240006f6:	f10a 0a08 	add.w	sl, sl, #8
				tVZFilterLS_setFreqFast(&shelf1[i][v], shelf1[i][v]->cutoffMIDI);
240006fa:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
240006fe:	f011 fd5d 	bl	240121bc <tVZFilterLS_setFreqFast>
				tVZFilterHS_setSampleRate(&shelf2[i][v], osMult);
24000702:	4648      	mov	r0, r9
24000704:	eeb0 0a48 	vmov.f32	s0, s16
24000708:	f011 fe7e 	bl	24012408 <tVZFilterHS_setSampleRate>
				tVZFilterHS_setFreqFast(&shelf2[i][v], shelf2[i][v]->cutoffMIDI);
2400070c:	f8d9 3000 	ldr.w	r3, [r9]
24000710:	4648      	mov	r0, r9
			for (int i = 0; i < NUM_EFFECT; i++)
24000712:	f109 0908 	add.w	r9, r9, #8
				tVZFilterHS_setFreqFast(&shelf2[i][v], shelf2[i][v]->cutoffMIDI);
24000716:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
2400071a:	f011 fec3 	bl	240124a4 <tVZFilterHS_setFreqFast>
				tVZFilterBell_setSampleRate(&bell1[i][v], osMult);
2400071e:	4640      	mov	r0, r8
24000720:	eeb0 0a48 	vmov.f32	s0, s16
24000724:	f012 f806 	bl	24012734 <tVZFilterBell_setSampleRate>
				tVZFilterBell_setFreqFast(&bell1[i][v], bell1[i][v]->cutoffMIDI);
24000728:	f8d8 3000 	ldr.w	r3, [r8]
2400072c:	4640      	mov	r0, r8
			for (int i = 0; i < NUM_EFFECT; i++)
2400072e:	f108 0808 	add.w	r8, r8, #8
				tVZFilterBell_setFreqFast(&bell1[i][v], bell1[i][v]->cutoffMIDI);
24000732:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
24000736:	f012 f8ef 	bl	24012918 <tVZFilterBell_setFreqFast>
				tCompressor_setSampleRate(&comp[i][v], osMult);
2400073a:	4b65      	ldr	r3, [pc, #404]	; (240008d0 <changeOversampling+0x270>)
2400073c:	eeb0 0a48 	vmov.f32	s0, s16
24000740:	1918      	adds	r0, r3, r4
24000742:	f010 fc55 	bl	24010ff0 <tCompressor_setSampleRate>
				tCycle_setSampleRate(&mod1[i][v], osMult);
24000746:	4b63      	ldr	r3, [pc, #396]	; (240008d4 <changeOversampling+0x274>)
24000748:	eeb0 0a48 	vmov.f32	s0, s16
2400074c:	1918      	adds	r0, r3, r4
2400074e:	f013 fd89 	bl	24014264 <tCycle_setSampleRate>
				tCycle_setSampleRate(&mod2[i][v], osMult);
24000752:	4b61      	ldr	r3, [pc, #388]	; (240008d8 <changeOversampling+0x278>)
24000754:	eeb0 0a48 	vmov.f32	s0, s16
24000758:	1918      	adds	r0, r3, r4
2400075a:	f013 fd83 	bl	24014264 <tCycle_setSampleRate>
				tSVF_setSampleRate(&FXlowpass[i][v],osMult);
2400075e:	4638      	mov	r0, r7
24000760:	eeb0 0a48 	vmov.f32	s0, s16
24000764:	f010 ffd0 	bl	24011708 <tSVF_setSampleRate>
				tSVF_setFreqFast(&FXlowpass[i][v], FXlowpass[i][v]->cutoffMIDI);
24000768:	683b      	ldr	r3, [r7, #0]
2400076a:	4638      	mov	r0, r7
			for (int i = 0; i < NUM_EFFECT; i++)
2400076c:	3708      	adds	r7, #8
				tSVF_setFreqFast(&FXlowpass[i][v], FXlowpass[i][v]->cutoffMIDI);
2400076e:	ed93 0a04 	vldr	s0, [r3, #16]
24000772:	f010 ff69 	bl	24011648 <tSVF_setFreqFast>
				tSVF_setSampleRate(&FXhighpass[i][v],osMult);
24000776:	4630      	mov	r0, r6
24000778:	eeb0 0a48 	vmov.f32	s0, s16
2400077c:	f010 ffc4 	bl	24011708 <tSVF_setSampleRate>
				tSVF_setFreqFast(&FXhighpass[i][v], FXhighpass[i][v]->cutoffMIDI);
24000780:	6833      	ldr	r3, [r6, #0]
24000782:	4630      	mov	r0, r6
			for (int i = 0; i < NUM_EFFECT; i++)
24000784:	3608      	adds	r6, #8
				tSVF_setFreqFast(&FXhighpass[i][v], FXhighpass[i][v]->cutoffMIDI);
24000786:	ed93 0a04 	vldr	s0, [r3, #16]
2400078a:	f010 ff5d 	bl	24011648 <tSVF_setFreqFast>
				tSVF_setSampleRate(&FXbandpass[i][v],osMult);
2400078e:	4628      	mov	r0, r5
24000790:	eeb0 0a48 	vmov.f32	s0, s16
24000794:	f010 ffb8 	bl	24011708 <tSVF_setSampleRate>
				tSVF_setFreqFast(&FXbandpass[i][v], FXbandpass[i][v]->cutoffMIDI);
24000798:	682b      	ldr	r3, [r5, #0]
2400079a:	4628      	mov	r0, r5
			for (int i = 0; i < NUM_EFFECT; i++)
2400079c:	3508      	adds	r5, #8
				tSVF_setFreqFast(&FXbandpass[i][v], FXbandpass[i][v]->cutoffMIDI);
2400079e:	ed93 0a04 	vldr	s0, [r3, #16]
240007a2:	f010 ff51 	bl	24011648 <tSVF_setFreqFast>
				tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], osMult);
240007a6:	4658      	mov	r0, fp
240007a8:	eeb0 0a48 	vmov.f32	s0, s16
240007ac:	f012 fdca 	bl	24013344 <tDiodeFilter_setSampleRate>
				tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], FXdiodeFilters[i][v]->cutoffMIDI);
240007b0:	f8db 3000 	ldr.w	r3, [fp]
240007b4:	4658      	mov	r0, fp
			for (int i = 0; i < NUM_EFFECT; i++)
240007b6:	f10b 0b08 	add.w	fp, fp, #8
				tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], FXdiodeFilters[i][v]->cutoffMIDI);
240007ba:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
240007be:	4b47      	ldr	r3, [pc, #284]	; (240008dc <changeOversampling+0x27c>)
240007c0:	4423      	add	r3, r4
240007c2:	9300      	str	r3, [sp, #0]
240007c4:	f012 fdbe 	bl	24013344 <tDiodeFilter_setSampleRate>
				tVZFilterBell_setSampleRate(&FXVZfilterPeak[i][v], osMult);
240007c8:	9b00      	ldr	r3, [sp, #0]
240007ca:	eeb0 0a48 	vmov.f32	s0, s16
240007ce:	4618      	mov	r0, r3
240007d0:	f011 ffb0 	bl	24012734 <tVZFilterBell_setSampleRate>
				tVZFilterBell_setFreqFast(&FXVZfilterPeak[i][v], FXVZfilterPeak[i][v]->cutoffMIDI);
240007d4:	9b00      	ldr	r3, [sp, #0]
240007d6:	4618      	mov	r0, r3
240007d8:	4b40      	ldr	r3, [pc, #256]	; (240008dc <changeOversampling+0x27c>)
240007da:	591b      	ldr	r3, [r3, r4]
240007dc:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
240007e0:	f012 f89a 	bl	24012918 <tVZFilterBell_setFreqFast>
				tVZFilterLS_setSampleRate(&FXVZfilterLS[i][v], osMult);
240007e4:	4a3e      	ldr	r2, [pc, #248]	; (240008e0 <changeOversampling+0x280>)
240007e6:	4b3f      	ldr	r3, [pc, #252]	; (240008e4 <changeOversampling+0x284>)
240007e8:	eeb0 0a48 	vmov.f32	s0, s16
240007ec:	1911      	adds	r1, r2, r4
240007ee:	1918      	adds	r0, r3, r4
240007f0:	4b3d      	ldr	r3, [pc, #244]	; (240008e8 <changeOversampling+0x288>)
240007f2:	9103      	str	r1, [sp, #12]
240007f4:	493d      	ldr	r1, [pc, #244]	; (240008ec <changeOversampling+0x28c>)
240007f6:	4423      	add	r3, r4
240007f8:	190a      	adds	r2, r1, r4
240007fa:	e9cd 0300 	strd	r0, r3, [sp]
240007fe:	9202      	str	r2, [sp, #8]
24000800:	f011 fc8e 	bl	24012120 <tVZFilterLS_setSampleRate>
				tVZFilterLS_setFreqFast(&FXVZfilterLS[i][v], FXVZfilterLS[i][v]->cutoffMIDI);
24000804:	4b37      	ldr	r3, [pc, #220]	; (240008e4 <changeOversampling+0x284>)
24000806:	9800      	ldr	r0, [sp, #0]
24000808:	591b      	ldr	r3, [r3, r4]
2400080a:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
2400080e:	f011 fcd5 	bl	240121bc <tVZFilterLS_setFreqFast>
				tVZFilterHS_setSampleRate(&FXVZfilterHS[i][v], osMult);
24000812:	9903      	ldr	r1, [sp, #12]
24000814:	eeb0 0a48 	vmov.f32	s0, s16
24000818:	4608      	mov	r0, r1
2400081a:	9100      	str	r1, [sp, #0]
2400081c:	f011 fdf4 	bl	24012408 <tVZFilterHS_setSampleRate>
				tVZFilterHS_setFreqFast(&FXVZfilterHS[i][v], FXVZfilterHS[i][v]->cutoffMIDI);
24000820:	9900      	ldr	r1, [sp, #0]
24000822:	4a2f      	ldr	r2, [pc, #188]	; (240008e0 <changeOversampling+0x280>)
24000824:	4608      	mov	r0, r1
24000826:	5911      	ldr	r1, [r2, r4]
24000828:	ed91 0a11 	vldr	s0, [r1, #68]	; 0x44
2400082c:	f011 fe3a 	bl	240124a4 <tVZFilterHS_setFreqFast>
				tVZFilter_setSampleRate(&FXVZfilterBR[i][v], osMult);
24000830:	9a02      	ldr	r2, [sp, #8]
24000832:	eeb0 0a48 	vmov.f32	s0, s16
24000836:	4610      	mov	r0, r2
24000838:	9200      	str	r2, [sp, #0]
2400083a:	f011 fbbb 	bl	24011fb4 <tVZFilter_setSampleRate>
				tVZFilter_setFreq(&FXVZfilterBR[i][v], FXVZfilterBR[i][v]->fc);
2400083e:	492b      	ldr	r1, [pc, #172]	; (240008ec <changeOversampling+0x28c>)
24000840:	9a00      	ldr	r2, [sp, #0]
24000842:	4610      	mov	r0, r2
24000844:	590a      	ldr	r2, [r1, r4]
24000846:	ed92 0a0a 	vldr	s0, [r2, #40]	; 0x28
2400084a:	f011 f9f9 	bl	24011c40 <tVZFilter_setFreq>
				tLadderFilter_setSampleRate(&FXLadderfilter[i][v], osMult);
2400084e:	9b01      	ldr	r3, [sp, #4]
24000850:	eeb0 0a48 	vmov.f32	s0, s16
24000854:	4618      	mov	r0, r3
24000856:	9300      	str	r3, [sp, #0]
24000858:	f012 ff56 	bl	24013708 <tLadderFilter_setSampleRate>
				tLadderFilter_setFreqFast(&FXLadderfilter[i][v], FXLadderfilter[i][v]->cutoffMIDI);
2400085c:	9b00      	ldr	r3, [sp, #0]
2400085e:	4618      	mov	r0, r3
24000860:	4b21      	ldr	r3, [pc, #132]	; (240008e8 <changeOversampling+0x288>)
24000862:	591b      	ldr	r3, [r3, r4]
			for (int i = 0; i < NUM_EFFECT; i++)
24000864:	3408      	adds	r4, #8
				tLadderFilter_setFreqFast(&FXLadderfilter[i][v], FXLadderfilter[i][v]->cutoffMIDI);
24000866:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
2400086a:	f012 ff0b 	bl	24013684 <tLadderFilter_setFreqFast>
			for (int i = 0; i < NUM_EFFECT; i++)
2400086e:	9b04      	ldr	r3, [sp, #16]
24000870:	429c      	cmp	r4, r3
24000872:	f47f af2c 	bne.w	240006ce <changeOversampling+0x6e>
		for (int v = 0; v < numStringsThisBoard; v++)
24000876:	3304      	adds	r3, #4
24000878:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
2400087c:	9304      	str	r3, [sp, #16]
2400087e:	4b09      	ldr	r3, [pc, #36]	; (240008a4 <changeOversampling+0x244>)
24000880:	3101      	adds	r1, #1
24000882:	3204      	adds	r2, #4
24000884:	781b      	ldrb	r3, [r3, #0]
24000886:	9105      	str	r1, [sp, #20]
24000888:	428b      	cmp	r3, r1
2400088a:	f73f af0b 	bgt.w	240006a4 <changeOversampling+0x44>
			}
		}
	}
	prevOversample = newOS;
2400088e:	4b04      	ldr	r3, [pc, #16]	; (240008a0 <changeOversampling+0x240>)
24000890:	9a07      	ldr	r2, [sp, #28]
24000892:	601a      	str	r2, [r3, #0]
}
24000894:	b009      	add	sp, #36	; 0x24
24000896:	ecbd 8b02 	vpop	{d8}
2400089a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2400089e:	bf00      	nop
240008a0:	20005890 	.word	0x20005890
240008a4:	20000015 	.word	0x20000015
240008a8:	473b8000 	.word	0x473b8000
240008ac:	20005d28 	.word	0x20005d28
240008b0:	20005d68 	.word	0x20005d68
240008b4:	20000ad0 	.word	0x20000ad0
240008b8:	200008dc 	.word	0x200008dc
240008bc:	200008bc 	.word	0x200008bc
240008c0:	2000087c 	.word	0x2000087c
240008c4:	2000089c 	.word	0x2000089c
240008c8:	20000e78 	.word	0x20000e78
240008cc:	20000e98 	.word	0x20000e98
240008d0:	20000af0 	.word	0x20000af0
240008d4:	2000566c 	.word	0x2000566c
240008d8:	2000568c 	.word	0x2000568c
240008dc:	2000085c 	.word	0x2000085c
240008e0:	2000081c 	.word	0x2000081c
240008e4:	2000083c 	.word	0x2000083c
240008e8:	200007dc 	.word	0x200007dc
240008ec:	200007fc 	.word	0x200007fc

240008f0 <audioInit>:
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
}


void audioInit()
{
240008f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
240008f4:	4cec      	ldr	r4, [pc, #944]	; (24000ca8 <audioInit+0x3b8>)
240008f6:	f64e 2260 	movw	r2, #60000	; 0xea60
240008fa:	ed9f 0aec 	vldr	s0, [pc, #944]	; 24000cac <audioInit+0x3bc>
240008fe:	4620      	mov	r0, r4
24000900:	49eb      	ldr	r1, [pc, #940]	; (24000cb0 <audioInit+0x3c0>)
24000902:	4bec      	ldr	r3, [pc, #944]	; (24000cb4 <audioInit+0x3c4>)
	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);

	leaf.clearOnAllocation = 1;
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
24000904:	4dec      	ldr	r5, [pc, #944]	; (24000cb8 <audioInit+0x3c8>)
{
24000906:	ed2d 8b10 	vpush	{d8-d15}
2400090a:	b087      	sub	sp, #28
	}
	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
2400090c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
24000910:	f016 fbac 	bl	2401706c <LEAF_init>
	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
24000914:	4623      	mov	r3, r4
24000916:	f44f 2280 	mov.w	r2, #262144	; 0x40000
2400091a:	49e8      	ldr	r1, [pc, #928]	; (24000cbc <audioInit+0x3cc>)
2400091c:	48e8      	ldr	r0, [pc, #928]	; (24000cc0 <audioInit+0x3d0>)
2400091e:	f013 fc21 	bl	24014164 <tMempool_init>
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);
24000922:	4623      	mov	r3, r4
24000924:	f04f 7270 	mov.w	r2, #62914560	; 0x3c00000
24000928:	49e6      	ldr	r1, [pc, #920]	; (24000cc4 <audioInit+0x3d4>)
2400092a:	48e7      	ldr	r0, [pc, #924]	; (24000cc8 <audioInit+0x3d8>)
2400092c:	f013 fc1a 	bl	24014164 <tMempool_init>
	leaf.clearOnAllocation = 1;
24000930:	2301      	movs	r3, #1
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
24000932:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24000936:	eddf 1ae5 	vldr	s3, [pc, #916]	; 24000ccc <audioInit+0x3dc>
2400093a:	eddf 0ae5 	vldr	s1, [pc, #916]	; 24000cd0 <audioInit+0x3e0>
2400093e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24000942:	ed9f 0ae4 	vldr	s0, [pc, #912]	; 24000cd4 <audioInit+0x3e4>
24000946:	48e4      	ldr	r0, [pc, #912]	; (24000cd8 <audioInit+0x3e8>)
	leaf.clearOnAllocation = 1;
24000948:	6163      	str	r3, [r4, #20]
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
2400094a:	f013 f86f 	bl	24013a2c <LEAF_generate_exp>
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
2400094e:	48e3      	ldr	r0, [pc, #908]	; (24000cdc <audioInit+0x3ec>)
		previousStringInputs[i]	= 0;
24000950:	2200      	movs	r2, #0
24000952:	4be3      	ldr	r3, [pc, #908]	; (24000ce0 <audioInit+0x3f0>)
	tCycle_init(&testSine, &leaf);
24000954:	4621      	mov	r1, r4
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
24000956:	6005      	str	r5, [r0, #0]
	invNumOvertones = 1.0f / NUM_OVERTONES;
24000958:	4ce2      	ldr	r4, [pc, #904]	; (24000ce4 <audioInit+0x3f4>)
2400095a:	48e3      	ldr	r0, [pc, #908]	; (24000ce8 <audioInit+0x3f8>)
		previousStringInputs[i]	= 0;
2400095c:	801a      	strh	r2, [r3, #0]
	invNumOvertones = 1.0f / NUM_OVERTONES;
2400095e:	6004      	str	r4, [r0, #0]
		previousStringInputs[i]	= 0;
24000960:	805a      	strh	r2, [r3, #2]
	tCycle_init(&testSine, &leaf);
24000962:	48e2      	ldr	r0, [pc, #904]	; (24000cec <audioInit+0x3fc>)
		previousStringInputs[i]	= 0;
24000964:	809a      	strh	r2, [r3, #4]
24000966:	80da      	strh	r2, [r3, #6]
24000968:	811a      	strh	r2, [r3, #8]
2400096a:	815a      	strh	r2, [r3, #10]
2400096c:	819a      	strh	r2, [r3, #12]
2400096e:	81da      	strh	r2, [r3, #14]
24000970:	821a      	strh	r2, [r3, #16]
24000972:	825a      	strh	r2, [r3, #18]
24000974:	829a      	strh	r2, [r3, #20]
24000976:	82da      	strh	r2, [r3, #22]
	tCycle_init(&testSine, &leaf);
24000978:	f013 fc14 	bl	240141a4 <tCycle_init>
	tCycle_setFreq(&testSine, 440.0f);
2400097c:	ed9f 0adc 	vldr	s0, [pc, #880]	; 24000cf0 <audioInit+0x400>
24000980:	48da      	ldr	r0, [pc, #872]	; (24000cec <audioInit+0x3fc>)
24000982:	f013 fc51 	bl	24014228 <tCycle_setFreq>
		totalGain[0] += partials[i];
24000986:	4cdb      	ldr	r4, [pc, #876]	; (24000cf4 <audioInit+0x404>)
24000988:	4adb      	ldr	r2, [pc, #876]	; (24000cf8 <audioInit+0x408>)
		totalGain[1] += partialsHigh[i];
2400098a:	49dc      	ldr	r1, [pc, #880]	; (24000cfc <audioInit+0x40c>)
		totalGain[0] += partials[i];
2400098c:	ed92 0a00 	vldr	s0, [r2]
24000990:	edd4 6a00 	vldr	s13, [r4]
		totalGain[1] += partialsHigh[i];
24000994:	ed94 7a01 	vldr	s14, [r4, #4]
24000998:	ed91 1a00 	vldr	s2, [r1]
		totalGain[0] += partials[i];
2400099c:	ee76 6a80 	vadd.f32	s13, s13, s0
240009a0:	ed92 2a01 	vldr	s4, [r2, #4]
		totalGain[1] += partialsHigh[i];
240009a4:	ee37 7a01 	vadd.f32	s14, s14, s2
240009a8:	edd1 2a01 	vldr	s5, [r1, #4]
		totalGain[0] += partials[i];
240009ac:	ee76 6a82 	vadd.f32	s13, s13, s4
240009b0:	ed92 4a02 	vldr	s8, [r2, #8]
		totalGain[1] += partialsHigh[i];
240009b4:	ed91 1a02 	vldr	s2, [r1, #8]
240009b8:	ee37 7a22 	vadd.f32	s14, s14, s5
		totalGain[0] += partials[i];
240009bc:	edd2 3a03 	vldr	s7, [r2, #12]
240009c0:	ee76 6a84 	vadd.f32	s13, s13, s8
		totalGain[1] += partialsHigh[i];
240009c4:	ed91 0a03 	vldr	s0, [r1, #12]
		totalGain[0] += partials[i];
240009c8:	ed92 3a04 	vldr	s6, [r2, #16]
		totalGain[1] += partialsHigh[i];
240009cc:	ee37 7a01 	vadd.f32	s14, s14, s2
240009d0:	ed91 4a04 	vldr	s8, [r1, #16]
		totalGain[0] += partials[i];
240009d4:	ee76 6aa3 	vadd.f32	s13, s13, s7
240009d8:	edd2 1a05 	vldr	s3, [r2, #20]
		totalGain[1] += partialsHigh[i];
240009dc:	edd1 2a05 	vldr	s5, [r1, #20]
240009e0:	ee37 7a00 	vadd.f32	s14, s14, s0
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240009e4:	4bc6      	ldr	r3, [pc, #792]	; (24000d00 <audioInit+0x410>)
		totalGain[0] += partials[i];
240009e6:	ee76 6a83 	vadd.f32	s13, s13, s6
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240009ea:	48c6      	ldr	r0, [pc, #792]	; (24000d04 <audioInit+0x414>)
		totalGain[0] += partials[i];
240009ec:	ed92 5a06 	vldr	s10, [r2, #24]
		totalGain[1] += partialsHigh[i];
240009f0:	ee37 7a04 	vadd.f32	s14, s14, s8
240009f4:	ed91 2a06 	vldr	s4, [r1, #24]
		totalGain[0] += partials[i];
240009f8:	ee76 6aa1 	vadd.f32	s13, s13, s3
240009fc:	edd2 0a07 	vldr	s1, [r2, #28]
		totalGain[1] += partialsHigh[i];
24000a00:	ed91 1a07 	vldr	s2, [r1, #28]
24000a04:	ee37 7a22 	vadd.f32	s14, s14, s5
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000a08:	edd0 2a00 	vldr	s5, [r0]
		totalGain[0] += partials[i];
24000a0c:	ee76 6a85 	vadd.f32	s13, s13, s10
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000a10:	ed93 5a00 	vldr	s10, [r3]
24000a14:	edd3 1a01 	vldr	s3, [r3, #4]
		totalGain[1] += partialsHigh[i];
24000a18:	ee37 7a02 	vadd.f32	s14, s14, s4
		totalGain[0] += partials[i];
24000a1c:	edd2 4a08 	vldr	s9, [r2, #32]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000a20:	ee72 2a85 	vadd.f32	s5, s5, s10
		totalGain[1] += partialsHigh[i];
24000a24:	edd1 3a08 	vldr	s7, [r1, #32]
		totalGain[0] += partials[i];
24000a28:	ee76 6aa0 	vadd.f32	s13, s13, s1
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000a2c:	ed93 5a02 	vldr	s10, [r3, #8]
		totalGain[1] += partialsHigh[i];
24000a30:	ee37 7a01 	vadd.f32	s14, s14, s2
		totalGain[0] += partials[i];
24000a34:	ed92 6a09 	vldr	s12, [r2, #36]	; 0x24
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000a38:	ee72 2aa1 	vadd.f32	s5, s5, s3
		totalGain[1] += partialsHigh[i];
24000a3c:	ed91 0a09 	vldr	s0, [r1, #36]	; 0x24
		totalGain[0] += partials[i];
24000a40:	ee76 6aa4 	vadd.f32	s13, s13, s9
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000a44:	ed93 2a03 	vldr	s4, [r3, #12]
		totalGain[1] += partialsHigh[i];
24000a48:	ee37 7a23 	vadd.f32	s14, s14, s7
		totalGain[0] += partials[i];
24000a4c:	edd2 5a0a 	vldr	s11, [r2, #40]	; 0x28
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000a50:	ee72 2a85 	vadd.f32	s5, s5, s10
		totalGain[1] += partialsHigh[i];
24000a54:	ed91 3a0a 	vldr	s6, [r1, #40]	; 0x28
		totalGain[0] += partials[i];
24000a58:	ee76 6a86 	vadd.f32	s13, s13, s12
24000a5c:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
		totalGain[1] += partialsHigh[i];
24000a60:	ee37 7a00 	vadd.f32	s14, s14, s0
24000a64:	ed91 4a0b 	vldr	s8, [r1, #44]	; 0x2c
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000a68:	ee72 2a82 	vadd.f32	s5, s5, s4
24000a6c:	edd3 0a04 	vldr	s1, [r3, #16]
		totalGain[0] += partials[i];
24000a70:	ee76 6aa5 	vadd.f32	s13, s13, s11
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000a74:	ed93 1a05 	vldr	s2, [r3, #20]
		totalGain[1] += partialsHigh[i];
24000a78:	ee37 7a03 	vadd.f32	s14, s14, s6
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000a7c:	edd3 5a0c 	vldr	s11, [r3, #48]	; 0x30
24000a80:	ed90 3a01 	vldr	s6, [r0, #4]
24000a84:	ee72 2aa0 	vadd.f32	s5, s5, s1
24000a88:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
		totalGain[0] += partials[i];
24000a8c:	ee76 6aa7 	vadd.f32	s13, s13, s15
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000a90:	ee33 3a25 	vadd.f32	s6, s6, s11
24000a94:	ed93 8a06 	vldr	s16, [r3, #24]
24000a98:	ee72 2a81 	vadd.f32	s5, s5, s2
24000a9c:	edd3 5a0e 	vldr	s11, [r3, #56]	; 0x38
24000aa0:	edd3 1a07 	vldr	s3, [r3, #28]
		totalGain[1] += partialsHigh[i];
24000aa4:	ee37 7a04 	vadd.f32	s14, s14, s8
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000aa8:	ee33 3a02 	vadd.f32	s6, s6, s4
24000aac:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
24000ab0:	ee72 2a88 	vadd.f32	s5, s5, s16
24000ab4:	edd3 3a08 	vldr	s7, [r3, #32]
24000ab8:	edd3 0a10 	vldr	s1, [r3, #64]	; 0x40
24000abc:	ee33 3a25 	vadd.f32	s6, s6, s11
24000ac0:	edd3 4a09 	vldr	s9, [r3, #36]	; 0x24
24000ac4:	ee72 2aa1 	vadd.f32	s5, s5, s3
24000ac8:	ed93 1a11 	vldr	s2, [r3, #68]	; 0x44
24000acc:	ed93 0a12 	vldr	s0, [r3, #72]	; 0x48
24000ad0:	ee33 3a27 	vadd.f32	s6, s6, s15
24000ad4:	ed93 5a0a 	vldr	s10, [r3, #40]	; 0x28
24000ad8:	ee72 2aa3 	vadd.f32	s5, s5, s7
24000adc:	edd0 3a02 	vldr	s7, [r0, #8]
24000ae0:	ed93 2a13 	vldr	s4, [r3, #76]	; 0x4c
24000ae4:	ee33 3a20 	vadd.f32	s6, s6, s1
24000ae8:	edd3 0a18 	vldr	s1, [r3, #96]	; 0x60
24000aec:	ee72 2aa4 	vadd.f32	s5, s5, s9
24000af0:	edd3 4a19 	vldr	s9, [r3, #100]	; 0x64
24000af4:	ee73 3aa0 	vadd.f32	s7, s7, s1
24000af8:	edd3 0a1c 	vldr	s1, [r3, #112]	; 0x70
24000afc:	ee33 3a01 	vadd.f32	s6, s6, s2
24000b00:	ed93 1a1a 	vldr	s2, [r3, #104]	; 0x68
24000b04:	ee72 2a85 	vadd.f32	s5, s5, s10
24000b08:	ed93 5a1d 	vldr	s10, [r3, #116]	; 0x74
24000b0c:	ee73 3aa4 	vadd.f32	s7, s7, s9
24000b10:	edd3 4a1b 	vldr	s9, [r3, #108]	; 0x6c
24000b14:	ee33 3a00 	vadd.f32	s6, s6, s0
24000b18:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
24000b1c:	ed93 4a14 	vldr	s8, [r3, #80]	; 0x50
24000b20:	ee73 3a81 	vadd.f32	s7, s7, s2
24000b24:	edd3 5a15 	vldr	s11, [r3, #84]	; 0x54
24000b28:	ee33 3a02 	vadd.f32	s6, s6, s4
24000b2c:	edd3 1a16 	vldr	s3, [r3, #88]	; 0x58
24000b30:	ee72 2a86 	vadd.f32	s5, s5, s12
24000b34:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
24000b38:	ee73 3aa4 	vadd.f32	s7, s7, s9
24000b3c:	ed93 1a1e 	vldr	s2, [r3, #120]	; 0x78
24000b40:	ed93 0a1f 	vldr	s0, [r3, #124]	; 0x7c
24000b44:	ee33 3a04 	vadd.f32	s6, s6, s8
24000b48:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000b4c:	ee8a aaa2 	vdiv.f32	s20, s21, s5
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000b50:	ed93 2a21 	vldr	s4, [r3, #132]	; 0x84
24000b54:	edd3 4a22 	vldr	s9, [r3, #136]	; 0x88
24000b58:	ee73 3aa0 	vadd.f32	s7, s7, s1
24000b5c:	edd3 0a23 	vldr	s1, [r3, #140]	; 0x8c
24000b60:	ed90 4a03 	vldr	s8, [r0, #12]
24000b64:	ee33 3a25 	vadd.f32	s6, s6, s11
24000b68:	edd3 5a25 	vldr	s11, [r3, #148]	; 0x94
24000b6c:	ee73 3a85 	vadd.f32	s7, s7, s10
24000b70:	ed93 5a24 	vldr	s10, [r3, #144]	; 0x90
24000b74:	ee33 3a21 	vadd.f32	s6, s6, s3
24000b78:	edd3 1a27 	vldr	s3, [r3, #156]	; 0x9c
24000b7c:	ee34 4a05 	vadd.f32	s8, s8, s10
24000b80:	ed93 5a26 	vldr	s10, [r3, #152]	; 0x98
24000b84:	ee73 3a81 	vadd.f32	s7, s7, s2
24000b88:	ed93 1a28 	vldr	s2, [r3, #160]	; 0xa0
24000b8c:	ee33 3a27 	vadd.f32	s6, s6, s15
24000b90:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
24000b94:	ee34 4a25 	vadd.f32	s8, s8, s11
24000b98:	edd3 5a29 	vldr	s11, [r3, #164]	; 0xa4
24000b9c:	ee73 3a80 	vadd.f32	s7, s7, s0
24000ba0:	ed93 0a2d 	vldr	s0, [r3, #180]	; 0xb4
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000ba4:	eeca 9a83 	vdiv.f32	s19, s21, s6
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000ba8:	ee34 4a05 	vadd.f32	s8, s8, s10
24000bac:	ed93 5a2c 	vldr	s10, [r3, #176]	; 0xb0
24000bb0:	ee73 3a86 	vadd.f32	s7, s7, s12
24000bb4:	ed93 6a2a 	vldr	s12, [r3, #168]	; 0xa8
24000bb8:	ee34 4a21 	vadd.f32	s8, s8, s3
24000bbc:	edd3 1a2e 	vldr	s3, [r3, #184]	; 0xb8
24000bc0:	ee73 3a82 	vadd.f32	s7, s7, s4
24000bc4:	ed93 2a2f 	vldr	s4, [r3, #188]	; 0xbc
24000bc8:	ee34 4a01 	vadd.f32	s8, s8, s2
24000bcc:	ed93 1a30 	vldr	s2, [r3, #192]	; 0xc0
24000bd0:	ee73 3aa4 	vadd.f32	s7, s7, s9
24000bd4:	edd0 4a04 	vldr	s9, [r0, #16]
24000bd8:	ee74 4a81 	vadd.f32	s9, s9, s2
24000bdc:	ed93 1a32 	vldr	s2, [r3, #200]	; 0xc8
24000be0:	ee34 4a25 	vadd.f32	s8, s8, s11
24000be4:	edd3 5a31 	vldr	s11, [r3, #196]	; 0xc4
24000be8:	ee73 3aa0 	vadd.f32	s7, s7, s1
24000bec:	edd3 0a34 	vldr	s1, [r3, #208]	; 0xd0
24000bf0:	ee74 4aa5 	vadd.f32	s9, s9, s11
24000bf4:	edd3 5a35 	vldr	s11, [r3, #212]	; 0xd4
24000bf8:	ee34 4a06 	vadd.f32	s8, s8, s12
24000bfc:	ed93 6a33 	vldr	s12, [r3, #204]	; 0xcc
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000c00:	ee8a 9aa3 	vdiv.f32	s18, s21, s7
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000c04:	ee74 4a81 	vadd.f32	s9, s9, s2
24000c08:	ed93 1a38 	vldr	s2, [r3, #224]	; 0xe0
24000c0c:	ee34 4a27 	vadd.f32	s8, s8, s15
24000c10:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
24000c14:	ee74 4a86 	vadd.f32	s9, s9, s12
24000c18:	ed93 6a39 	vldr	s12, [r3, #228]	; 0xe4
24000c1c:	ee34 4a05 	vadd.f32	s8, s8, s10
24000c20:	ed93 5a37 	vldr	s10, [r3, #220]	; 0xdc
24000c24:	ee74 4aa0 	vadd.f32	s9, s9, s1
24000c28:	edd3 0a3c 	vldr	s1, [r3, #240]	; 0xf0
24000c2c:	ee34 4a00 	vadd.f32	s8, s8, s0
24000c30:	ed93 0a3a 	vldr	s0, [r3, #232]	; 0xe8
24000c34:	ee74 4aa5 	vadd.f32	s9, s9, s11
24000c38:	edd0 5a05 	vldr	s11, [r0, #20]
24000c3c:	ee34 4a21 	vadd.f32	s8, s8, s3
24000c40:	edd3 1a3b 	vldr	s3, [r3, #236]	; 0xec
24000c44:	ee75 5aa0 	vadd.f32	s11, s11, s1
24000c48:	ee74 4aa7 	vadd.f32	s9, s9, s15
24000c4c:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
24000c50:	ee34 4a02 	vadd.f32	s8, s8, s4
24000c54:	ed93 2a3e 	vldr	s4, [r3, #248]	; 0xf8
24000c58:	ee75 5aa7 	vadd.f32	s11, s11, s15
24000c5c:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
24000c60:	ee74 4a85 	vadd.f32	s9, s9, s10
24000c64:	edd3 0a40 	vldr	s1, [r3, #256]	; 0x100
24000c68:	ed93 5a41 	vldr	s10, [r3, #260]	; 0x104
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000c6c:	eeca 8a84 	vdiv.f32	s17, s21, s8
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000c70:	ee74 4a81 	vadd.f32	s9, s9, s2
24000c74:	ed93 1a44 	vldr	s2, [r3, #272]	; 0x110
24000c78:	ee75 5a82 	vadd.f32	s11, s11, s4
24000c7c:	ed93 2a43 	vldr	s4, [r3, #268]	; 0x10c
24000c80:	ee74 4a86 	vadd.f32	s9, s9, s12
24000c84:	ed93 6a45 	vldr	s12, [r3, #276]	; 0x114
24000c88:	ee75 5aa7 	vadd.f32	s11, s11, s15
24000c8c:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
24000c90:	ee74 4a80 	vadd.f32	s9, s9, s0
24000c94:	ed93 0a46 	vldr	s0, [r3, #280]	; 0x118
24000c98:	ee75 5aa0 	vadd.f32	s11, s11, s1
24000c9c:	edd3 0a47 	vldr	s1, [r3, #284]	; 0x11c
24000ca0:	ee74 4aa1 	vadd.f32	s9, s9, s3
24000ca4:	e030      	b.n	24000d08 <audioInit+0x418>
24000ca6:	bf00      	nop
24000ca8:	20005410 	.word	0x20005410
24000cac:	473b8000 	.word	0x473b8000
24000cb0:	20005db8 	.word	0x20005db8
24000cb4:	00006121 	.word	0x00006121
24000cb8:	457ff000 	.word	0x457ff000
24000cbc:	24040000 	.word	0x24040000
24000cc0:	20005650 	.word	0x20005650
24000cc4:	c0000000 	.word	0xc0000000
24000cc8:	2000540c 	.word	0x2000540c
24000ccc:	ba51b717 	.word	0xba51b717
24000cd0:	00000000 	.word	0x00000000
24000cd4:	3a83126f 	.word	0x3a83126f
24000cd8:	20001098 	.word	0x20001098
24000cdc:	20005098 	.word	0x20005098
24000ce0:	20005894 	.word	0x20005894
24000ce4:	3daaaaab 	.word	0x3daaaaab
24000ce8:	2000539c 	.word	0x2000539c
24000cec:	200149dc 	.word	0x200149dc
24000cf0:	43dc0000 	.word	0x43dc0000
24000cf4:	20014a10 	.word	0x20014a10
24000cf8:	200000c4 	.word	0x200000c4
24000cfc:	2000010c 	.word	0x2000010c
24000d00:	20000390 	.word	0x20000390
24000d04:	20014a18 	.word	0x20014a18
24000d08:	edd3 1a48 	vldr	s3, [r3, #288]	; 0x120
24000d0c:	ee75 5a85 	vadd.f32	s11, s11, s10
24000d10:	ed90 5a06 	vldr	s10, [r0, #24]
24000d14:	ee35 5a21 	vadd.f32	s10, s10, s3
24000d18:	edd3 1a4a 	vldr	s3, [r3, #296]	; 0x128
24000d1c:	ee75 5aa7 	vadd.f32	s11, s11, s15
24000d20:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000d24:	ee8a 8aa4 	vdiv.f32	s16, s21, s9
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000d28:	ee35 5a27 	vadd.f32	s10, s10, s15
24000d2c:	edd3 7a4b 	vldr	s15, [r3, #300]	; 0x12c
24000d30:	ee75 5a82 	vadd.f32	s11, s11, s4
24000d34:	ed93 2a4c 	vldr	s4, [r3, #304]	; 0x130
24000d38:	ee35 5a21 	vadd.f32	s10, s10, s3
24000d3c:	edd3 1a50 	vldr	s3, [r3, #320]	; 0x140
24000d40:	ee75 5a81 	vadd.f32	s11, s11, s2
24000d44:	ed93 1a4f 	vldr	s2, [r3, #316]	; 0x13c
24000d48:	ee35 5a27 	vadd.f32	s10, s10, s15
24000d4c:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
24000d50:	ee75 5a86 	vadd.f32	s11, s11, s12
24000d54:	ed93 6a4d 	vldr	s12, [r3, #308]	; 0x134
24000d58:	ee35 5a02 	vadd.f32	s10, s10, s4
24000d5c:	ed93 2a52 	vldr	s4, [r3, #328]	; 0x148
24000d60:	ee75 5a80 	vadd.f32	s11, s11, s0
24000d64:	ed93 0a51 	vldr	s0, [r3, #324]	; 0x144
24000d68:	ee35 5a06 	vadd.f32	s10, s10, s12
24000d6c:	ed90 6a07 	vldr	s12, [r0, #28]
24000d70:	ee75 5aa0 	vadd.f32	s11, s11, s1
24000d74:	edd3 0a53 	vldr	s1, [r3, #332]	; 0x14c
24000d78:	ee35 5a27 	vadd.f32	s10, s10, s15
24000d7c:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
24000d80:	ee36 6a27 	vadd.f32	s12, s12, s15
24000d84:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
24000d88:	ee35 5a01 	vadd.f32	s10, s10, s2
24000d8c:	ed93 1a57 	vldr	s2, [r3, #348]	; 0x15c
24000d90:	ee36 6a27 	vadd.f32	s12, s12, s15
24000d94:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
24000d98:	ee35 5a21 	vadd.f32	s10, s10, s3
24000d9c:	edd3 1a59 	vldr	s3, [r3, #356]	; 0x164
24000da0:	ee36 6a27 	vadd.f32	s12, s12, s15
24000da4:	edd3 7a58 	vldr	s15, [r3, #352]	; 0x160
24000da8:	ee35 5a00 	vadd.f32	s10, s10, s0
24000dac:	ed93 0a5d 	vldr	s0, [r3, #372]	; 0x174
24000db0:	ee36 6a01 	vadd.f32	s12, s12, s2
24000db4:	ed93 1a5c 	vldr	s2, [r3, #368]	; 0x170
24000db8:	ee35 5a02 	vadd.f32	s10, s10, s4
24000dbc:	ed93 2a5a 	vldr	s4, [r3, #360]	; 0x168
24000dc0:	ee36 6a27 	vadd.f32	s12, s12, s15
24000dc4:	edd3 7a5b 	vldr	s15, [r3, #364]	; 0x16c
24000dc8:	ee35 5a20 	vadd.f32	s10, s10, s1
24000dcc:	edd3 0a5e 	vldr	s1, [r3, #376]	; 0x178
24000dd0:	ed93 ba6b 	vldr	s22, [r3, #428]	; 0x1ac
24000dd4:	ee36 6a21 	vadd.f32	s12, s12, s3
24000dd8:	edd3 1a5f 	vldr	s3, [r3, #380]	; 0x17c
24000ddc:	edc0 2a00 	vstr	s5, [r0]
24000de0:	edc4 6a00 	vstr	s13, [r4]
24000de4:	ee36 6a02 	vadd.f32	s12, s12, s4
24000de8:	ed93 2a60 	vldr	s4, [r3, #384]	; 0x180
24000dec:	ed84 7a01 	vstr	s14, [r4, #4]
24000df0:	ed80 3a01 	vstr	s6, [r0, #4]
24000df4:	ee36 6a27 	vadd.f32	s12, s12, s15
24000df8:	edd0 7a08 	vldr	s15, [r0, #32]
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000dfc:	4ce7      	ldr	r4, [pc, #924]	; (2400119c <audioInit+0x8ac>)
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000dfe:	ee77 7a82 	vadd.f32	s15, s15, s4
24000e02:	ed93 2a61 	vldr	s4, [r3, #388]	; 0x184
24000e06:	ee36 6a01 	vadd.f32	s12, s12, s2
24000e0a:	ed93 1a63 	vldr	s2, [r3, #396]	; 0x18c
24000e0e:	edc0 3a02 	vstr	s7, [r0, #8]
24000e12:	ee77 7a82 	vadd.f32	s15, s15, s4
24000e16:	ed93 2a62 	vldr	s4, [r3, #392]	; 0x188
24000e1a:	ee36 6a00 	vadd.f32	s12, s12, s0
24000e1e:	ed93 0a65 	vldr	s0, [r3, #404]	; 0x194
24000e22:	ed80 4a03 	vstr	s8, [r0, #12]
24000e26:	ee77 7a82 	vadd.f32	s15, s15, s4
24000e2a:	ed93 2a64 	vldr	s4, [r3, #400]	; 0x190
24000e2e:	ee36 6a20 	vadd.f32	s12, s12, s1
24000e32:	edd3 0a67 	vldr	s1, [r3, #412]	; 0x19c
24000e36:	edc0 4a04 	vstr	s9, [r0, #16]
24000e3a:	ee77 7a81 	vadd.f32	s15, s15, s2
24000e3e:	ed93 1a68 	vldr	s2, [r3, #416]	; 0x1a0
24000e42:	ee36 6a21 	vadd.f32	s12, s12, s3
24000e46:	edd3 1a69 	vldr	s3, [r3, #420]	; 0x1a4
24000e4a:	edc0 5a05 	vstr	s11, [r0, #20]
24000e4e:	ee77 7a82 	vadd.f32	s15, s15, s4
24000e52:	ed93 2a66 	vldr	s4, [r3, #408]	; 0x198
24000e56:	ed80 5a06 	vstr	s10, [r0, #24]
24000e5a:	ed80 6a07 	vstr	s12, [r0, #28]
24000e5e:	ee77 7a80 	vadd.f32	s15, s15, s0
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000e62:	ed84 aa00 	vstr	s20, [r4]
24000e66:	ee8a 0aa5 	vdiv.f32	s0, s21, s11
24000e6a:	edc4 9a01 	vstr	s19, [r4, #4]
24000e6e:	ed84 9a02 	vstr	s18, [r4, #8]
24000e72:	edc4 8a03 	vstr	s17, [r4, #12]
24000e76:	ed84 8a04 	vstr	s16, [r4, #16]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000e7a:	ee77 7a82 	vadd.f32	s15, s15, s4
24000e7e:	ed93 2a6a 	vldr	s4, [r3, #424]	; 0x1a8
24000e82:	ee77 7aa0 	vadd.f32	s15, s15, s1
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000e86:	eeca 0a85 	vdiv.f32	s1, s21, s10
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000e8a:	ee77 7a81 	vadd.f32	s15, s15, s2
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000e8e:	ee8a 1a86 	vdiv.f32	s2, s21, s12
24000e92:	ed84 0a05 	vstr	s0, [r4, #20]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000e96:	ee77 7aa1 	vadd.f32	s15, s15, s3
		}
	}
	gainNormalizers[0] = 1.0f / totalGain[0];
24000e9a:	eeca 1aa6 	vdiv.f32	s3, s21, s13
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000e9e:	ee77 7a82 	vadd.f32	s15, s15, s4
	gainNormalizers[1] = 1.0f / totalGain[1];
24000ea2:	ee8a 2a87 	vdiv.f32	s4, s21, s14
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000ea6:	ee77 7a8b 	vadd.f32	s15, s15, s22
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000eaa:	eeca 2aa7 	vdiv.f32	s5, s21, s15
24000eae:	edc0 7a08 	vstr	s15, [r0, #32]
	gainNormalizers[0] = 1.0f / totalGain[0];
24000eb2:	48bb      	ldr	r0, [pc, #748]	; (240011a0 <audioInit+0x8b0>)
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000eb4:	edc4 0a06 	vstr	s1, [r4, #24]
	gainNormalizers[0] = 1.0f / totalGain[0];
24000eb8:	edc0 1a00 	vstr	s3, [r0]
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000ebc:	ed84 1a07 	vstr	s2, [r4, #28]
	gainNormalizers[1] = 1.0f / totalGain[1];
24000ec0:	ed80 2a01 	vstr	s4, [r0, #4]
24000ec4:	f102 0030 	add.w	r0, r2, #48	; 0x30
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000ec8:	edc4 2a08 	vstr	s5, [r4, #32]
		for (int j = 0; j < 3; j++)

		{
			for (int k = 0; k < 3; k++)
			{
				stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
24000ecc:	edd3 7a00 	vldr	s15, [r3]
		partials[i] = partials[i] * gainNormalizers[0];
24000ed0:	ed92 3a00 	vldr	s6, [r2]
				stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
24000ed4:	ee6a 7a27 	vmul.f32	s15, s20, s15
		partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
24000ed8:	edd1 3a00 	vldr	s7, [r1]
		partials[i] = partials[i] * gainNormalizers[0];
24000edc:	ee21 3a83 	vmul.f32	s6, s3, s6
		partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
24000ee0:	ee62 3a23 	vmul.f32	s7, s4, s7
				stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
24000ee4:	ece3 7a01 	vstmia	r3!, {s15}
24000ee8:	ed93 4a0b 	vldr	s8, [r3, #44]	; 0x2c
24000eec:	edd3 4a17 	vldr	s9, [r3, #92]	; 0x5c
24000ef0:	ed93 5a23 	vldr	s10, [r3, #140]	; 0x8c
24000ef4:	ee24 4a29 	vmul.f32	s8, s8, s19
24000ef8:	edd3 5a2f 	vldr	s11, [r3, #188]	; 0xbc
24000efc:	ee64 4a89 	vmul.f32	s9, s9, s18
24000f00:	ed93 6a3b 	vldr	s12, [r3, #236]	; 0xec
24000f04:	ee25 5a28 	vmul.f32	s10, s10, s17
24000f08:	edd3 6a47 	vldr	s13, [r3, #284]	; 0x11c
24000f0c:	ee65 5a88 	vmul.f32	s11, s11, s16
24000f10:	ed93 7a53 	vldr	s14, [r3, #332]	; 0x14c
24000f14:	ee26 6a00 	vmul.f32	s12, s12, s0
24000f18:	edd3 7a5f 	vldr	s15, [r3, #380]	; 0x17c
24000f1c:	ee66 6aa0 	vmul.f32	s13, s13, s1
24000f20:	ee27 7a01 	vmul.f32	s14, s14, s2
		partials[i] = partials[i] * gainNormalizers[0];
24000f24:	eca2 3a01 	vstmia	r2!, {s6}
				stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
24000f28:	ee67 7aa2 	vmul.f32	s15, s15, s5
	for (int i = 0; i < NUM_OVERTONES; i++)
24000f2c:	4282      	cmp	r2, r0
		partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
24000f2e:	ece1 3a01 	vstmia	r1!, {s7}
				stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
24000f32:	ed83 4a0b 	vstr	s8, [r3, #44]	; 0x2c
24000f36:	edc3 4a17 	vstr	s9, [r3, #92]	; 0x5c
24000f3a:	ed83 5a23 	vstr	s10, [r3, #140]	; 0x8c
24000f3e:	edc3 5a2f 	vstr	s11, [r3, #188]	; 0xbc
24000f42:	ed83 6a3b 	vstr	s12, [r3, #236]	; 0xec
24000f46:	edc3 6a47 	vstr	s13, [r3, #284]	; 0x11c
24000f4a:	ed83 7a53 	vstr	s14, [r3, #332]	; 0x14c
24000f4e:	edc3 7a5f 	vstr	s15, [r3, #380]	; 0x17c
	for (int i = 0; i < NUM_OVERTONES; i++)
24000f52:	d1bb      	bne.n	24000ecc <audioInit+0x5dc>
		  for (int j = 0; j < 3; j++)
		  {

			  for (int k = 0; k < 2; k++)
			  {
				  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
24000f54:	4b93      	ldr	r3, [pc, #588]	; (240011a4 <audioInit+0x8b4>)
24000f56:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24000f5a:	4c93      	ldr	r4, [pc, #588]	; (240011a8 <audioInit+0x8b8>)
24000f5c:	ed93 8a01 	vldr	s16, [r3, #4]
24000f60:	ed93 0a04 	vldr	s0, [r3, #16]
24000f64:	f104 0830 	add.w	r8, r4, #48	; 0x30
24000f68:	edd3 0a07 	vldr	s1, [r3, #28]
24000f6c:	edd3 9a00 	vldr	s19, [r3]
24000f70:	ed93 6a02 	vldr	s12, [r3, #8]
24000f74:	ed93 9a03 	vldr	s18, [r3, #12]
24000f78:	ee78 4a69 	vsub.f32	s9, s16, s19
24000f7c:	edd3 6a05 	vldr	s13, [r3, #20]
24000f80:	ee36 6a48 	vsub.f32	s12, s12, s16
24000f84:	edd3 8a06 	vldr	s17, [r3, #24]
24000f88:	ee30 5a49 	vsub.f32	s10, s0, s18
24000f8c:	ed93 7a08 	vldr	s14, [r3, #32]
24000f90:	ee76 6ac0 	vsub.f32	s13, s13, s0
24000f94:	ee70 5ae8 	vsub.f32	s11, s1, s17
24000f98:	f8df c294 	ldr.w	ip, [pc, #660]	; 24001230 <audioInit+0x940>
24000f9c:	ee37 7a60 	vsub.f32	s14, s14, s1
24000fa0:	4f82      	ldr	r7, [pc, #520]	; (240011ac <audioInit+0x8bc>)
24000fa2:	eec7 daa4 	vdiv.f32	s27, s15, s9
24000fa6:	4e82      	ldr	r6, [pc, #520]	; (240011b0 <audioInit+0x8c0>)
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000fa8:	eddf aa82 	vldr	s21, [pc, #520]	; 240011b4 <audioInit+0x8c4>
		  decayAf1[i] = decayAfParts[i] * 123.0f;
24000fac:	ed9f aa82 	vldr	s20, [pc, #520]	; 240011b8 <audioInit+0x8c8>
24000fb0:	4b82      	ldr	r3, [pc, #520]	; (240011bc <audioInit+0x8cc>)
24000fb2:	4883      	ldr	r0, [pc, #524]	; (240011c0 <audioInit+0x8d0>)
24000fb4:	ee87 da86 	vdiv.f32	s26, s15, s12
24000fb8:	4982      	ldr	r1, [pc, #520]	; (240011c4 <audioInit+0x8d4>)
24000fba:	4a83      	ldr	r2, [pc, #524]	; (240011c8 <audioInit+0x8d8>)
				  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
24000fbc:	4d83      	ldr	r5, [pc, #524]	; (240011cc <audioInit+0x8dc>)
24000fbe:	eec7 ca85 	vdiv.f32	s25, s15, s10
24000fc2:	ee87 caa6 	vdiv.f32	s24, s15, s13
24000fc6:	eec7 baa5 	vdiv.f32	s23, s15, s11
24000fca:	ee87 ba87 	vdiv.f32	s22, s15, s14
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000fce:	edd3 4a0c 	vldr	s9, [r3, #48]	; 0x30
24000fd2:	3304      	adds	r3, #4
24000fd4:	ed53 2a01 	vldr	s5, [r3, #-4]
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000fd8:	ecb5 2a01 	vldmia	r5!, {s4}
24000fdc:	ecb4 6a01 	vldmia	r4!, {s12}
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000fe0:	ee87 4aa4 	vdiv.f32	s8, s15, s9
24000fe4:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
24000fe8:	ed93 5a2f 	vldr	s10, [r3, #188]	; 0xbc
	for (int i = 0; i < NUM_OVERTONES; i++)
24000fec:	4544      	cmp	r4, r8
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000fee:	edd3 3a23 	vldr	s7, [r3, #140]	; 0x8c
24000ff2:	ed93 7a3b 	vldr	s14, [r3, #236]	; 0xec
24000ff6:	edd3 1a53 	vldr	s3, [r3, #332]	; 0x14c
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000ffa:	eec7 ea82 	vdiv.f32	s29, s15, s4
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000ffe:	edd3 5a47 	vldr	s11, [r3, #284]	; 0x11c
24001002:	ed93 3a5f 	vldr	s6, [r3, #380]	; 0x17c
24001006:	ee87 2aa2 	vdiv.f32	s4, s15, s5
2400100a:	eec7 4a85 	vdiv.f32	s9, s15, s10
2400100e:	eec7 faa3 	vdiv.f32	s31, s15, s7
24001012:	ee87 5aa1 	vdiv.f32	s10, s15, s3
24001016:	eec7 3aa5 	vdiv.f32	s7, s15, s11
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
2400101a:	eec7 5a86 	vdiv.f32	s11, s15, s12
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
2400101e:	ee87 6aa6 	vdiv.f32	s12, s15, s13
24001022:	eec7 6a87 	vdiv.f32	s13, s15, s14
24001026:	ee87 7a83 	vdiv.f32	s14, s15, s6
2400102a:	ee74 1a42 	vsub.f32	s3, s8, s4
2400102e:	ee35 3a63 	vsub.f32	s6, s10, s7
24001032:	ee74 2aef 	vsub.f32	s5, s9, s31
24001036:	ee61 1aad 	vmul.f32	s3, s3, s27
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
2400103a:	ee75 5aee 	vsub.f32	s11, s11, s29
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
2400103e:	ee36 6a44 	vsub.f32	s12, s12, s8

				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24001042:	ee29 1aa1 	vmul.f32	s2, s19, s3
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24001046:	ece0 1a01 	vstmia	r0!, {s3}
2400104a:	ee76 6ae4 	vsub.f32	s13, s13, s9
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
2400104e:	ee65 5aaa 	vmul.f32	s11, s11, s21
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24001052:	ee26 6a0d 	vmul.f32	s12, s12, s26
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24001056:	eca1 1a01 	vstmia	r1!, {s2}

				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
2400105a:	ee32 2a41 	vsub.f32	s4, s4, s2
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
2400105e:	ee37 7a45 	vsub.f32	s14, s14, s10
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24001062:	ecec 5a01 	vstmia	ip!, {s11}
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24001066:	ee62 2aac 	vmul.f32	s5, s5, s25
2400106a:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
2400106e:	ee66 6a8c 	vmul.f32	s13, s13, s24
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
24001072:	eca2 2a01 	vstmia	r2!, {s4}
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24001076:	ee27 7a0b 	vmul.f32	s14, s14, s22
2400107a:	ee23 3a2b 	vmul.f32	s6, s6, s23
2400107e:	edc0 2a17 	vstr	s5, [r0, #92]	; 0x5c
		  decayAf1[i] = decayAfParts[i] * 123.0f;
24001082:	ee25 fa8a 	vmul.f32	s30, s11, s20
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24001086:	edc0 6a23 	vstr	s13, [r0, #140]	; 0x8c
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
2400108a:	ee28 ea06 	vmul.f32	s28, s16, s12
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
2400108e:	ed80 7a3b 	vstr	s14, [r0, #236]	; 0xec
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24001092:	ee29 1a22 	vmul.f32	s2, s18, s5
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24001096:	ed80 3a2f 	vstr	s6, [r0, #188]	; 0xbc
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
2400109a:	ee60 1a26 	vmul.f32	s3, s0, s13
		  decayAf1[i] = decayAfParts[i] * 123.0f;
2400109e:	eca7 fa01 	vstmia	r7!, {s30}
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
240010a2:	ee28 2a83 	vmul.f32	s4, s17, s6
240010a6:	ed81 ea0b 	vstr	s28, [r1, #44]	; 0x2c
240010aa:	ee20 6a87 	vmul.f32	s12, s1, s14
240010ae:	ed81 1a17 	vstr	s2, [r1, #92]	; 0x5c
		  decayBs[i] = (1.0f/partialDecays[i]) - decayAf1[i];
240010b2:	ee7e eacf 	vsub.f32	s29, s29, s30
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
240010b6:	edc1 1a23 	vstr	s3, [r1, #140]	; 0x8c
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
240010ba:	ee34 4a4e 	vsub.f32	s8, s8, s28
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
240010be:	ed81 2a2f 	vstr	s4, [r1, #188]	; 0xbc
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
240010c2:	ee7f 5ac1 	vsub.f32	s11, s31, s2
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
240010c6:	ed81 6a3b 	vstr	s12, [r1, #236]	; 0xec
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
240010ca:	ee74 4ae1 	vsub.f32	s9, s9, s3
		  decayBs[i] = (1.0f/partialDecays[i]) - decayAf1[i];
240010ce:	ece6 ea01 	vstmia	r6!, {s29}
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
240010d2:	ee73 3ac2 	vsub.f32	s7, s7, s4
240010d6:	ed82 4a0b 	vstr	s8, [r2, #44]	; 0x2c
240010da:	ee35 5a46 	vsub.f32	s10, s10, s12
240010de:	edc2 5a17 	vstr	s11, [r2, #92]	; 0x5c
240010e2:	edc2 4a23 	vstr	s9, [r2, #140]	; 0x8c
240010e6:	edc2 3a2f 	vstr	s7, [r2, #188]	; 0xbc
240010ea:	ed82 5a3b 	vstr	s10, [r2, #236]	; 0xec
	for (int i = 0; i < NUM_OVERTONES; i++)
240010ee:	f47f af6e 	bne.w	24000fce <audioInit+0x6de>
240010f2:	4c37      	ldr	r4, [pc, #220]	; (240011d0 <audioInit+0x8e0>)

	}

	for (int i = 0; i < 256; i++)
	{
		randomFactors[i] = (randomNumber() * 0.4f) + 0.8f;
240010f4:	eddf 8a37 	vldr	s17, [pc, #220]	; 240011d4 <audioInit+0x8e4>
240010f8:	ed9f 8a37 	vldr	s16, [pc, #220]	; 240011d8 <audioInit+0x8e8>
240010fc:	f504 6580 	add.w	r5, r4, #1024	; 0x400
24001100:	f032 fbc2 	bl	24033888 <__randomNumber_veneer>
24001104:	eef0 7a48 	vmov.f32	s15, s16
24001108:	eee0 7a28 	vfma.f32	s15, s0, s17
2400110c:	ece4 7a01 	vstmia	r4!, {s15}
	for (int i = 0; i < 256; i++)
24001110:	42ac      	cmp	r4, r5
24001112:	d1f5      	bne.n	24001100 <audioInit+0x810>
	}
	LEAF_generate_atodb(atoDbTable, ATODB_TABLE_SIZE, 0.00001f, 1.0f);
24001114:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24001118:	ed9f 0a30 	vldr	s0, [pc, #192]	; 240011dc <audioInit+0x8ec>
2400111c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
24001120:	482f      	ldr	r0, [pc, #188]	; (240011e0 <audioInit+0x8f0>)
24001122:	f012 fced 	bl	24013b00 <LEAF_generate_atodb>
	LEAF_generate_dbtoa(dbtoATable, DBTOA_TABLE_SIZE, -90.0f, 50.0f);
24001126:	eddf 0a2f 	vldr	s1, [pc, #188]	; 240011e4 <audioInit+0x8f4>
2400112a:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 240011e8 <audioInit+0x8f8>
2400112e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
24001132:	482e      	ldr	r0, [pc, #184]	; (240011ec <audioInit+0x8fc>)
24001134:	f012 fd08 	bl	24013b48 <LEAF_generate_dbtoa>

	atodbTableScalar = ATODB_TABLE_SIZE_MINUS_ONE/(1.0f-0.00001f);
24001138:	4b2d      	ldr	r3, [pc, #180]	; (240011f0 <audioInit+0x900>)
2400113a:	4a2e      	ldr	r2, [pc, #184]	; (240011f4 <audioInit+0x904>)
	atodbTableOffset = 0.00001f * atodbTableScalar;
2400113c:	492e      	ldr	r1, [pc, #184]	; (240011f8 <audioInit+0x908>)
	atodbTableScalar = ATODB_TABLE_SIZE_MINUS_ONE/(1.0f-0.00001f);
2400113e:	601a      	str	r2, [r3, #0]
	dbtoaTableScalar = DBTOA_TABLE_SIZE_MINUS_ONE/(50.0f+90.0f);
24001140:	4b2e      	ldr	r3, [pc, #184]	; (240011fc <audioInit+0x90c>)
24001142:	4a2f      	ldr	r2, [pc, #188]	; (24001200 <audioInit+0x910>)
	atodbTableOffset = 0.00001f * atodbTableScalar;
24001144:	482f      	ldr	r0, [pc, #188]	; (24001204 <audioInit+0x914>)
	dbtoaTableScalar = DBTOA_TABLE_SIZE_MINUS_ONE/(50.0f+90.0f);
24001146:	601a      	str	r2, [r3, #0]
	dbtoaTableOffset = -90.0f * dbtoaTableScalar;
24001148:	4b2f      	ldr	r3, [pc, #188]	; (24001208 <audioInit+0x918>)
2400114a:	4a30      	ldr	r2, [pc, #192]	; (2400120c <audioInit+0x91c>)
	atodbTableOffset = 0.00001f * atodbTableScalar;
2400114c:	6008      	str	r0, [r1, #0]

	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
2400114e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
24001152:	eddf 0a2f 	vldr	s1, [pc, #188]	; 24001210 <audioInit+0x920>
24001156:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 24001214 <audioInit+0x924>
2400115a:	482f      	ldr	r0, [pc, #188]	; (24001218 <audioInit+0x928>)
	dbtoaTableOffset = -90.0f * dbtoaTableScalar;
2400115c:	601a      	str	r2, [r3, #0]
	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
2400115e:	f012 fd1d 	bl	24013b9c <LEAF_generate_mtof>





	if (numStrings == 6)
24001162:	4b2e      	ldr	r3, [pc, #184]	; (2400121c <audioInit+0x92c>)
24001164:	781b      	ldrb	r3, [r3, #0]
24001166:	2b06      	cmp	r3, #6
24001168:	f000 8545 	beq.w	24001bf6 <audioInit+0x1306>
	{
		firstString = boardNumber;
		numStringsThisBoard = 1;
	}

	else if (numStrings == 10)
2400116c:	2b0a      	cmp	r3, #10
2400116e:	f000 8525 	beq.w	24001bbc <audioInit+0x12cc>
	}

	else //otherwise 12-string version
	{

		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
24001172:	4a2b      	ldr	r2, [pc, #172]	; (24001220 <audioInit+0x930>)
24001174:	2302      	movs	r3, #2
24001176:	492b      	ldr	r1, [pc, #172]	; (24001224 <audioInit+0x934>)
24001178:	7812      	ldrb	r2, [r2, #0]
2400117a:	0052      	lsls	r2, r2, #1
2400117c:	600a      	str	r2, [r1, #0]
			numStringsThisBoard = 1;
2400117e:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 24001234 <audioInit+0x944>
24001182:	f04f 0a00 	mov.w	sl, #0
24001186:	4a28      	ldr	r2, [pc, #160]	; (24001228 <audioInit+0x938>)
24001188:	f889 3000 	strb.w	r3, [r9]
2400118c:	4b0f      	ldr	r3, [pc, #60]	; (240011cc <audioInit+0x8dc>)
2400118e:	9202      	str	r2, [sp, #8]
	{

		for (int j = 0; j < NUM_OVERTONES; j++)
		{
			tCycle_init(&additive[i][j], &leaf);
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24001190:	ed9f 9a26 	vldr	s18, [pc, #152]	; 2400122c <audioInit+0x93c>
24001194:	f103 0830 	add.w	r8, r3, #48	; 0x30
24001198:	e04e      	b.n	24001238 <audioInit+0x948>
2400119a:	bf00      	nop
2400119c:	200052c4 	.word	0x200052c4
240011a0:	200052bc 	.word	0x200052bc
240011a4:	2000036c 	.word	0x2000036c
240011a8:	2000007c 	.word	0x2000007c
240011ac:	20000fc0 	.word	0x20000fc0
240011b0:	20001050 	.word	0x20001050
240011b4:	3b84a9fa 	.word	0x3b84a9fa
240011b8:	42f60000 	.word	0x42f60000
240011bc:	200001bc 	.word	0x200001bc
240011c0:	20000c30 	.word	0x20000c30
240011c4:	20000b10 	.word	0x20000b10
240011c8:	20000d50 	.word	0x20000d50
240011cc:	20000034 	.word	0x20000034
240011d0:	200058c4 	.word	0x200058c4
240011d4:	3ecccccd 	.word	0x3ecccccd
240011d8:	3f4ccccd 	.word	0x3f4ccccd
240011dc:	3727c5ac 	.word	0x3727c5ac
240011e0:	30012000 	.word	0x30012000
240011e4:	42480000 	.word	0x42480000
240011e8:	c2b40000 	.word	0xc2b40000
240011ec:	30002000 	.word	0x30002000
240011f0:	20000a78 	.word	0x20000a78
240011f4:	467ffca8 	.word	0x467ffca8
240011f8:	20000a74 	.word	0x20000a74
240011fc:	20000e74 	.word	0x20000e74
24001200:	42ea0af9 	.word	0x42ea0af9
24001204:	3e27c37b 	.word	0x3e27c37b
24001208:	20000e70 	.word	0x20000e70
2400120c:	c6248fb7 	.word	0xc6248fb7
24001210:	4323d666 	.word	0x4323d666
24001214:	c323d666 	.word	0xc323d666
24001218:	30022000 	.word	0x30022000
2400121c:	20000014 	.word	0x20000014
24001220:	20014c6d 	.word	0x20014c6d
24001224:	20005258 	.word	0x20005258
24001228:	2000094c 	.word	0x2000094c
2400122c:	447a0000 	.word	0x447a0000
24001230:	20001008 	.word	0x20001008
24001234:	20000015 	.word	0x20000015
24001238:	4adb      	ldr	r2, [pc, #876]	; (240015a8 <audioInit+0xcb8>)
2400123a:	eddf 8adc 	vldr	s17, [pc, #880]	; 240015ac <audioInit+0xcbc>
2400123e:	ed9f 8adc 	vldr	s16, [pc, #880]	; 240015b0 <audioInit+0xcc0>
24001242:	9203      	str	r2, [sp, #12]
				  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
24001244:	9e03      	ldr	r6, [sp, #12]
24001246:	4ddb      	ldr	r5, [pc, #876]	; (240015b4 <audioInit+0xcc4>)
24001248:	9c02      	ldr	r4, [sp, #8]
			tCycle_init(&additive[i][j], &leaf);
2400124a:	f8df b370 	ldr.w	fp, [pc, #880]	; 240015bc <audioInit+0xccc>
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
2400124e:	4fda      	ldr	r7, [pc, #872]	; (240015b8 <audioInit+0xcc8>)
			tCycle_init(&additive[i][j], &leaf);
24001250:	4620      	mov	r0, r4
24001252:	4659      	mov	r1, fp
24001254:	f012 ffa6 	bl	240141a4 <tCycle_init>
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24001258:	ecf5 0a01 	vldmia	r5!, {s1}
2400125c:	4630      	mov	r0, r6
2400125e:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
24001262:	eef0 1a68 	vmov.f32	s3, s17
24001266:	465b      	mov	r3, fp
24001268:	ee60 0a89 	vmul.f32	s1, s1, s18
2400126c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24001270:	eeb0 1a48 	vmov.f32	s2, s16
24001274:	4639      	mov	r1, r7
24001276:	f00f ff4f 	bl	24011118 <tADSRT_init>
		for (int j = 0; j < NUM_OVERTONES; j++)
2400127a:	4545      	cmp	r5, r8
2400127c:	f104 0404 	add.w	r4, r4, #4
24001280:	f106 0604 	add.w	r6, r6, #4
24001284:	d1e4      	bne.n	24001250 <audioInit+0x960>
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
24001286:	9b02      	ldr	r3, [sp, #8]
24001288:	f10a 0a12 	add.w	sl, sl, #18
2400128c:	3348      	adds	r3, #72	; 0x48
2400128e:	f1ba 0f24 	cmp.w	sl, #36	; 0x24
24001292:	9302      	str	r3, [sp, #8]
24001294:	9b03      	ldr	r3, [sp, #12]
24001296:	f103 0348 	add.w	r3, r3, #72	; 0x48
2400129a:	9303      	str	r3, [sp, #12]
2400129c:	d1d2      	bne.n	24001244 <audioInit+0x954>


	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
	for (int i = 0; i < 12; i++)
	{
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
2400129e:	4ec7      	ldr	r6, [pc, #796]	; (240015bc <audioInit+0xccc>)
240012a0:	eddf 8ac7 	vldr	s17, [pc, #796]	; 240015c0 <audioInit+0xcd0>
240012a4:	ed9f 8ac2 	vldr	s16, [pc, #776]	; 240015b0 <audioInit+0xcc0>
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
240012a8:	4631      	mov	r1, r6
240012aa:	4cc6      	ldr	r4, [pc, #792]	; (240015c4 <audioInit+0xcd4>)
240012ac:	eef0 0a68 	vmov.f32	s1, s17
240012b0:	eeb0 0a48 	vmov.f32	s0, s16
240012b4:	48c4      	ldr	r0, [pc, #784]	; (240015c8 <audioInit+0xcd8>)
240012b6:	f104 0530 	add.w	r5, r4, #48	; 0x30
240012ba:	f00f ff91 	bl	240111e0 <tExpSmooth_init>
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
240012be:	4620      	mov	r0, r4
	for (int i = 0; i < 12; i++)
240012c0:	3404      	adds	r4, #4
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
240012c2:	eef0 0a68 	vmov.f32	s1, s17
240012c6:	4631      	mov	r1, r6
240012c8:	eeb0 0a48 	vmov.f32	s0, s16
240012cc:	f00f ff88 	bl	240111e0 <tExpSmooth_init>
	for (int i = 0; i < 12; i++)
240012d0:	42a5      	cmp	r5, r4
240012d2:	d1f4      	bne.n	240012be <audioInit+0x9ce>
240012d4:	4cbd      	ldr	r4, [pc, #756]	; (240015cc <audioInit+0xcdc>)
	}
	for (int i = 0; i < 10; i++)
	{
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
240012d6:	4eb9      	ldr	r6, [pc, #740]	; (240015bc <audioInit+0xccc>)
240012d8:	eddf 8ab9 	vldr	s17, [pc, #740]	; 240015c0 <audioInit+0xcd0>
240012dc:	f104 0528 	add.w	r5, r4, #40	; 0x28
240012e0:	ed9f 8ab3 	vldr	s16, [pc, #716]	; 240015b0 <audioInit+0xcc0>
240012e4:	4620      	mov	r0, r4
	for (int i = 0; i < 10; i++)
240012e6:	3404      	adds	r4, #4
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
240012e8:	eef0 0a68 	vmov.f32	s1, s17
240012ec:	4631      	mov	r1, r6
240012ee:	eeb0 0a48 	vmov.f32	s0, s16
240012f2:	f00f ff75 	bl	240111e0 <tExpSmooth_init>
	for (int i = 0; i < 10; i++)
240012f6:	42a5      	cmp	r5, r4
240012f8:	d1f4      	bne.n	240012e4 <audioInit+0x9f4>
	}

	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
	{
		tExpSmooth_init(&barSlideSmoother[i],0.000f, 0.01f, &leaf);
240012fa:	49b0      	ldr	r1, [pc, #704]	; (240015bc <audioInit+0xccc>)
240012fc:	eddf 0ab4 	vldr	s1, [pc, #720]	; 240015d0 <audioInit+0xce0>
24001300:	ed9f 0aab 	vldr	s0, [pc, #684]	; 240015b0 <audioInit+0xcc0>
24001304:	48b3      	ldr	r0, [pc, #716]	; (240015d4 <audioInit+0xce4>)
24001306:	f00f ff6b 	bl	240111e0 <tExpSmooth_init>
		tEnvelopeFollower_init(&barNoiseSmoother[i],0.0001f, 0.9993f, &leaf);
2400130a:	49ac      	ldr	r1, [pc, #688]	; (240015bc <audioInit+0xccc>)
2400130c:	eddf 0ab2 	vldr	s1, [pc, #712]	; 240015d8 <audioInit+0xce8>
24001310:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 240015dc <audioInit+0xcec>
24001314:	48b2      	ldr	r0, [pc, #712]	; (240015e0 <audioInit+0xcf0>)
24001316:	f00f f99d 	bl	24010654 <tEnvelopeFollower_init>
		tExpSmooth_init(&barSlideSmoother[i],0.000f, 0.01f, &leaf);
2400131a:	49a8      	ldr	r1, [pc, #672]	; (240015bc <audioInit+0xccc>)
2400131c:	eddf 0aac 	vldr	s1, [pc, #688]	; 240015d0 <audioInit+0xce0>
24001320:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 240015b0 <audioInit+0xcc0>
24001324:	48af      	ldr	r0, [pc, #700]	; (240015e4 <audioInit+0xcf4>)
24001326:	f00f ff5b 	bl	240111e0 <tExpSmooth_init>
		tEnvelopeFollower_init(&barNoiseSmoother[i],0.0001f, 0.9993f, &leaf);
2400132a:	49a4      	ldr	r1, [pc, #656]	; (240015bc <audioInit+0xccc>)
2400132c:	eddf 0aaa 	vldr	s1, [pc, #680]	; 240015d8 <audioInit+0xce8>
24001330:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 240015dc <audioInit+0xcec>
24001334:	48ac      	ldr	r0, [pc, #688]	; (240015e8 <audioInit+0xcf8>)
24001336:	f00f f98d 	bl	24010654 <tEnvelopeFollower_init>
	}
	for (int v = 0; v < numStringsThisBoard; v++)
2400133a:	f899 3000 	ldrb.w	r3, [r9]
2400133e:	b3db      	cbz	r3, 240013b8 <audioInit+0xac8>
24001340:	4caa      	ldr	r4, [pc, #680]	; (240015ec <audioInit+0xcfc>)
24001342:	2500      	movs	r5, #0
24001344:	4eaa      	ldr	r6, [pc, #680]	; (240015f0 <audioInit+0xd00>)
	{

		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
24001346:	eddf aaa2 	vldr	s21, [pc, #648]	; 240015d0 <audioInit+0xce0>
2400134a:	ed9f 8a99 	vldr	s16, [pc, #612]	; 240015b0 <audioInit+0xcc0>
2400134e:	ed9f aaa9 	vldr	s20, [pc, #676]	; 240015f4 <audioInit+0xd04>
24001352:	eddf 9aa9 	vldr	s19, [pc, #676]	; 240015f8 <audioInit+0xd08>
24001356:	ed9f 9aa9 	vldr	s18, [pc, #676]	; 240015fc <audioInit+0xd0c>
						                                 0.99999f, 0.0f, 0.01f,
						                                 0.01f, 0, &mediumPool);

		tSimpleLivingString3_setTargetLev(&livStr[v], 0.047059f);
2400135a:	eddf 8aa9 	vldr	s17, [pc, #676]	; 24001600 <audioInit+0xd10>
		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
2400135e:	4ba9      	ldr	r3, [pc, #676]	; (24001604 <audioInit+0xd14>)
24001360:	2200      	movs	r2, #0
24001362:	eef0 2a6a 	vmov.f32	s5, s21
24001366:	ed9f 2a9a 	vldr	s4, [pc, #616]	; 240015d0 <audioInit+0xce0>
2400136a:	eef0 1a48 	vmov.f32	s3, s16
2400136e:	2104      	movs	r1, #4
24001370:	eeb0 1a4a 	vmov.f32	s2, s20
24001374:	4620      	mov	r0, r4
24001376:	eef0 0a69 	vmov.f32	s1, s19
	for (int v = 0; v < numStringsThisBoard; v++)
2400137a:	3501      	adds	r5, #1
		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
2400137c:	eeb0 0a49 	vmov.f32	s0, s18
24001380:	f013 fc56 	bl	24014c30 <tSimpleLivingString3_initToPool>
		tSimpleLivingString3_setTargetLev(&livStr[v], 0.047059f);
24001384:	4620      	mov	r0, r4
24001386:	eeb0 0a68 	vmov.f32	s0, s17
2400138a:	f013 fe2b 	bl	24014fe4 <tSimpleLivingString3_setTargetLev>
		tSimpleLivingString3_setLevSmoothFactor(&livStr[v], 0.0301913f);
2400138e:	4620      	mov	r0, r4
24001390:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 24001608 <audioInit+0xd18>
24001394:	f013 fe2a 	bl	24014fec <tSimpleLivingString3_setLevSmoothFactor>
		tSimpleLivingString3_setLevStrength(&livStr[v], 0.0f);
24001398:	4620      	mov	r0, r4
2400139a:	eeb0 0a48 	vmov.f32	s0, s16
2400139e:	f013 fe29 	bl	24014ff4 <tSimpleLivingString3_setLevStrength>
		tSimpleLivingString3_setLevMode(&livStr[v], 1);
240013a2:	4620      	mov	r0, r4
240013a4:	2101      	movs	r1, #1
	for (int v = 0; v < numStringsThisBoard; v++)
240013a6:	3404      	adds	r4, #4
		tSimpleLivingString3_setLevMode(&livStr[v], 1);
240013a8:	f013 fe28 	bl	24014ffc <tSimpleLivingString3_setLevMode>
	for (int v = 0; v < numStringsThisBoard; v++)
240013ac:	f899 3000 	ldrb.w	r3, [r9]

		whichStringModelLoaded = String1Loaded;
240013b0:	2200      	movs	r2, #0
	for (int v = 0; v < numStringsThisBoard; v++)
240013b2:	42ab      	cmp	r3, r5
		whichStringModelLoaded = String1Loaded;
240013b4:	7032      	strb	r2, [r6, #0]
	for (int v = 0; v < numStringsThisBoard; v++)
240013b6:	dcd2      	bgt.n	2400135e <audioInit+0xa6e>
240013b8:	2600      	movs	r6, #0
240013ba:	4b94      	ldr	r3, [pc, #592]	; (2400160c <audioInit+0xd1c>)
240013bc:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 240016a8 <audioInit+0xdb8>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
	{

		for(int i = 0; i < NUM_OSC; i++)
		{
			tPBSaw_init(&saw[i][v], &leaf);
240013c0:	4c7e      	ldr	r4, [pc, #504]	; (240015bc <audioInit+0xccc>)

			tPBSawSquare_init(&sawPaired[i][v], &leaf);

			tPBSineTriangle_init(&sinePaired[i][v],&leaf);

			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.005f, &leaf);
240013c2:	eddf 9a93 	vldr	s19, [pc, #588]	; 24001610 <audioInit+0xd20>

			freqMult[i][v] = 1.0f;
			midiAdd[i][v] = 0.0f;
240013c6:	ed9f 9a7a 	vldr	s18, [pc, #488]	; 240015b0 <audioInit+0xcc0>
		{
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
			tSVF_init(&highpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
			tSVF_init(&bandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
			tDiodeFilter_init(&diodeFilters[i][v], 2000.f, 0.5f, &leaf);
			tVZFilterBell_init(&VZfilterPeak[i][v], 2000.f, 1.9f, 1.0f, &leaf);
240013ca:	eddf ba92 	vldr	s23, [pc, #584]	; 24001614 <audioInit+0xd24>
			tVZFilterLS_init(&VZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
240013ce:	eddf aa92 	vldr	s21, [pc, #584]	; 24001618 <audioInit+0xd28>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
		}
		//noise
		tVZFilterLS_init(&noiseShelf1[v], 80.0f, 0.5f, 1.0f, &leaf);
		tVZFilterHS_init(&noiseShelf2[v], 12000.0f, 0.5f, 1.0f, &leaf);
		tVZFilterBell_init(&noiseBell1[v],1000.0f, 1.9f, 1.09f, &leaf);
240013d2:	ed9f ba92 	vldr	s22, [pc, #584]	; 2400161c <audioInit+0xd2c>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
240013d6:	e9cd 3602 	strd	r3, r6, [sp, #8]
		for(int i = 0; i < NUM_OSC; i++)
240013da:	4b91      	ldr	r3, [pc, #580]	; (24001620 <audioInit+0xd30>)
			freqMult[i][v] = 1.0f;
240013dc:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
	for (int v = 0; v < numStringsThisBoard; v++)
240013e0:	4635      	mov	r5, r6
240013e2:	f106 0818 	add.w	r8, r6, #24
240013e6:	eb03 0906 	add.w	r9, r3, r6
240013ea:	4b8e      	ldr	r3, [pc, #568]	; (24001624 <audioInit+0xd34>)
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.005f, &leaf);
240013ec:	ed9f 8a8e 	vldr	s16, [pc, #568]	; 24001628 <audioInit+0xd38>
240013f0:	199f      	adds	r7, r3, r6
			tPBSaw_init(&saw[i][v], &leaf);
240013f2:	4648      	mov	r0, r9
240013f4:	4621      	mov	r1, r4
240013f6:	f013 f805 	bl	24014404 <tPBSaw_init>
			tPBPulse_init(&pulse[i][v], &leaf);
240013fa:	4638      	mov	r0, r7
240013fc:	4621      	mov	r1, r4
		for(int i = 0; i < NUM_OSC; i++)
240013fe:	f109 0908 	add.w	r9, r9, #8
			tPBPulse_init(&pulse[i][v], &leaf);
24001402:	f012 ffbd 	bl	24014380 <tPBPulse_init>
			tCycle_init(&sine[i][v],  &leaf);
24001406:	4b89      	ldr	r3, [pc, #548]	; (2400162c <audioInit+0xd3c>)
24001408:	4621      	mov	r1, r4
		for(int i = 0; i < NUM_OSC; i++)
2400140a:	3708      	adds	r7, #8
			tCycle_init(&sine[i][v],  &leaf);
2400140c:	1958      	adds	r0, r3, r5
2400140e:	f012 fec9 	bl	240141a4 <tCycle_init>
			tPBTriangle_init(&tri[i][v],  &leaf);
24001412:	4b87      	ldr	r3, [pc, #540]	; (24001630 <audioInit+0xd40>)
24001414:	4621      	mov	r1, r4
24001416:	1958      	adds	r0, r3, r5
24001418:	f012 ff3c 	bl	24014294 <tPBTriangle_init>
			tPBSawSquare_init(&sawPaired[i][v], &leaf);
2400141c:	4b85      	ldr	r3, [pc, #532]	; (24001634 <audioInit+0xd44>)
2400141e:	4621      	mov	r1, r4
24001420:	1958      	adds	r0, r3, r5
24001422:	f013 f80b 	bl	2401443c <tPBSawSquare_init>
			tPBSineTriangle_init(&sinePaired[i][v],&leaf);
24001426:	4b84      	ldr	r3, [pc, #528]	; (24001638 <audioInit+0xd48>)
24001428:	4621      	mov	r1, r4
2400142a:	1958      	adds	r0, r3, r5
2400142c:	f012 ff68 	bl	24014300 <tPBSineTriangle_init>
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.005f, &leaf);
24001430:	4b82      	ldr	r3, [pc, #520]	; (2400163c <audioInit+0xd4c>)
24001432:	eef0 0a69 	vmov.f32	s1, s19
24001436:	4621      	mov	r1, r4
24001438:	1958      	adds	r0, r3, r5
2400143a:	eeb0 0a48 	vmov.f32	s0, s16
2400143e:	f00f fecf 	bl	240111e0 <tExpSmooth_init>
			freqMult[i][v] = 1.0f;
24001442:	4b7f      	ldr	r3, [pc, #508]	; (24001640 <audioInit+0xd50>)
24001444:	442b      	add	r3, r5
24001446:	f8c3 a000 	str.w	sl, [r3]
			midiAdd[i][v] = 0.0f;
2400144a:	4b7e      	ldr	r3, [pc, #504]	; (24001644 <audioInit+0xd54>)
2400144c:	442b      	add	r3, r5
		for(int i = 0; i < NUM_OSC; i++)
2400144e:	3508      	adds	r5, #8
24001450:	45a8      	cmp	r8, r5
			midiAdd[i][v] = 0.0f;
24001452:	ed83 9a00 	vstr	s18, [r3]
		for(int i = 0; i < NUM_OSC; i++)
24001456:	d1cc      	bne.n	240013f2 <audioInit+0xb02>
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24001458:	4a7b      	ldr	r2, [pc, #492]	; (24001648 <audioInit+0xd58>)
2400145a:	eeb0 1a49 	vmov.f32	s2, s18
2400145e:	eddf 1a7b 	vldr	s3, [pc, #492]	; 2400164c <audioInit+0xd5c>
24001462:	4623      	mov	r3, r4
24001464:	1990      	adds	r0, r2, r6
24001466:	eddf 0a7a 	vldr	s1, [pc, #488]	; 24001650 <audioInit+0xd60>
2400146a:	ed9f 0a51 	vldr	s0, [pc, #324]	; 240015b0 <audioInit+0xcc0>
2400146e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24001472:	4951      	ldr	r1, [pc, #324]	; (240015b8 <audioInit+0xcc8>)
		tNoise_init(&myNoise, WhiteNoise, &leaf);
24001474:	4635      	mov	r5, r6
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24001476:	f00f fe4f 	bl	24011118 <tADSRT_init>
		tVZFilter_init(&noiseFilt, BandpassPeak, 1500.0f, 1.5f, &leaf);
2400147a:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
2400147e:	4622      	mov	r2, r4
24001480:	ed9f 0a74 	vldr	s0, [pc, #464]	; 24001654 <audioInit+0xd64>
24001484:	2103      	movs	r1, #3
24001486:	4874      	ldr	r0, [pc, #464]	; (24001658 <audioInit+0xd68>)
24001488:	f010 fbd6 	bl	24011c38 <tVZFilter_init>
		tVZFilter_init(&noiseFilt2, Lowpass, 800.0f, 0.9f, &leaf);
2400148c:	4622      	mov	r2, r4
2400148e:	2101      	movs	r1, #1
24001490:	eddf 0a72 	vldr	s1, [pc, #456]	; 2400165c <audioInit+0xd6c>
24001494:	ed9f 0a72 	vldr	s0, [pc, #456]	; 24001660 <audioInit+0xd70>
24001498:	f106 0710 	add.w	r7, r6, #16
2400149c:	4871      	ldr	r0, [pc, #452]	; (24001664 <audioInit+0xd74>)
2400149e:	f010 fbcb 	bl	24011c38 <tVZFilter_init>
		tVZFilter_setFreq(&noiseFilt2, 3332.0f); //based on testing with knob values
240014a2:	4870      	ldr	r0, [pc, #448]	; (24001664 <audioInit+0xd74>)
240014a4:	ed9f 0a70 	vldr	s0, [pc, #448]	; 24001668 <audioInit+0xd78>
240014a8:	f010 fbca 	bl	24011c40 <tVZFilter_setFreq>
		tVZFilter_setFreq(&noiseFilt, faster_mtof(0.9f * 128.0f));
240014ac:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 2400166c <audioInit+0xd7c>
240014b0:	f012 fc8e 	bl	24013dd0 <faster_mtof>
240014b4:	4868      	ldr	r0, [pc, #416]	; (24001658 <audioInit+0xd68>)
240014b6:	f010 fbc3 	bl	24011c40 <tVZFilter_setFreq>
		tVZFilter_setFreq(&noiseFilt2,faster_mtof(0.8f * 128.0f));
240014ba:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 24001670 <audioInit+0xd80>
240014be:	f012 fc87 	bl	24013dd0 <faster_mtof>
240014c2:	4868      	ldr	r0, [pc, #416]	; (24001664 <audioInit+0xd74>)
240014c4:	f010 fbbc 	bl	24011c40 <tVZFilter_setFreq>
		tNoise_init(&myNoise, WhiteNoise, &leaf);
240014c8:	4622      	mov	r2, r4
240014ca:	2100      	movs	r1, #0
240014cc:	4869      	ldr	r0, [pc, #420]	; (24001674 <audioInit+0xd84>)
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
240014ce:	eddf 8a6a 	vldr	s17, [pc, #424]	; 24001678 <audioInit+0xd88>
240014d2:	ed9f 8a6a 	vldr	s16, [pc, #424]	; 2400167c <audioInit+0xd8c>
		tNoise_init(&myNoise, WhiteNoise, &leaf);
240014d6:	f012 ffd7 	bl	24014488 <tNoise_init>
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
240014da:	4b69      	ldr	r3, [pc, #420]	; (24001680 <audioInit+0xd90>)
240014dc:	eef0 0a68 	vmov.f32	s1, s17
240014e0:	eeb0 0a48 	vmov.f32	s0, s16
240014e4:	2101      	movs	r1, #1
240014e6:	1958      	adds	r0, r3, r5
240014e8:	4622      	mov	r2, r4
240014ea:	f00f ff67 	bl	240113bc <tSVF_init>
			tSVF_init(&highpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
240014ee:	4b65      	ldr	r3, [pc, #404]	; (24001684 <audioInit+0xd94>)
240014f0:	eef0 0a68 	vmov.f32	s1, s17
240014f4:	4622      	mov	r2, r4
240014f6:	1958      	adds	r0, r3, r5
240014f8:	eeb0 0a48 	vmov.f32	s0, s16
240014fc:	2100      	movs	r1, #0
240014fe:	f00f ff5d 	bl	240113bc <tSVF_init>
			tSVF_init(&bandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
24001502:	4b61      	ldr	r3, [pc, #388]	; (24001688 <audioInit+0xd98>)
24001504:	4622      	mov	r2, r4
24001506:	eef0 0a68 	vmov.f32	s1, s17
2400150a:	1958      	adds	r0, r3, r5
2400150c:	eeb0 0a48 	vmov.f32	s0, s16
24001510:	2102      	movs	r1, #2
24001512:	f00f ff53 	bl	240113bc <tSVF_init>
			tDiodeFilter_init(&diodeFilters[i][v], 2000.f, 0.5f, &leaf);
24001516:	4b5d      	ldr	r3, [pc, #372]	; (2400168c <audioInit+0xd9c>)
24001518:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
2400151c:	4621      	mov	r1, r4
2400151e:	1958      	adds	r0, r3, r5
24001520:	eeb0 0a48 	vmov.f32	s0, s16
24001524:	f011 fac0 	bl	24012aa8 <tDiodeFilter_init>
			tVZFilterBell_init(&VZfilterPeak[i][v], 2000.f, 1.9f, 1.0f, &leaf);
24001528:	4b59      	ldr	r3, [pc, #356]	; (24001690 <audioInit+0xda0>)
2400152a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
2400152e:	4621      	mov	r1, r4
24001530:	1958      	adds	r0, r3, r5
24001532:	eef0 0a6b 	vmov.f32	s1, s23
24001536:	eeb0 0a48 	vmov.f32	s0, s16
2400153a:	f011 f8f7 	bl	2401272c <tVZFilterBell_init>
			tVZFilterLS_init(&VZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
2400153e:	4b55      	ldr	r3, [pc, #340]	; (24001694 <audioInit+0xda4>)
24001540:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24001544:	4621      	mov	r1, r4
24001546:	1958      	adds	r0, r3, r5
24001548:	eef0 0a6a 	vmov.f32	s1, s21
2400154c:	eeb0 0a48 	vmov.f32	s0, s16
24001550:	f010 fde2 	bl	24012118 <tVZFilterLS_init>
			tVZFilterHS_init(&VZfilterHS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
24001554:	4b50      	ldr	r3, [pc, #320]	; (24001698 <audioInit+0xda8>)
24001556:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
2400155a:	4621      	mov	r1, r4
2400155c:	1958      	adds	r0, r3, r5
2400155e:	eef0 0a6a 	vmov.f32	s1, s21
24001562:	eeb0 0a48 	vmov.f32	s0, s16
24001566:	f010 ff4b 	bl	24012400 <tVZFilterHS_init>
			tVZFilter_init(&VZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
2400156a:	4b4c      	ldr	r3, [pc, #304]	; (2400169c <audioInit+0xdac>)
2400156c:	4622      	mov	r2, r4
2400156e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24001572:	1958      	adds	r0, r3, r5
24001574:	eeb0 0a48 	vmov.f32	s0, s16
24001578:	2104      	movs	r1, #4
2400157a:	f010 fb5d 	bl	24011c38 <tVZFilter_init>
			tLadderFilter_init(&Ladderfilter[i][v], 2000.f, 1.0f, &leaf);
2400157e:	4b48      	ldr	r3, [pc, #288]	; (240016a0 <audioInit+0xdb0>)
24001580:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24001584:	4621      	mov	r1, r4
24001586:	1958      	adds	r0, r3, r5
24001588:	eeb0 0a48 	vmov.f32	s0, s16
2400158c:	f011 fef4 	bl	24013378 <tLadderFilter_init>
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
24001590:	4b44      	ldr	r3, [pc, #272]	; (240016a4 <audioInit+0xdb4>)
24001592:	4621      	mov	r1, r4
24001594:	eddf 0a0e 	vldr	s1, [pc, #56]	; 240015d0 <audioInit+0xce0>
24001598:	1958      	adds	r0, r3, r5
		for (int i = 0; i < NUM_FILT; i++)
2400159a:	3508      	adds	r5, #8
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
2400159c:	ed9f 0a22 	vldr	s0, [pc, #136]	; 24001628 <audioInit+0xd38>
240015a0:	f00f fe1e 	bl	240111e0 <tExpSmooth_init>
240015a4:	e082      	b.n	240016ac <audioInit+0xdbc>
240015a6:	bf00      	nop
240015a8:	200009dc 	.word	0x200009dc
240015ac:	43160000 	.word	0x43160000
240015b0:	00000000 	.word	0x00000000
240015b4:	20000034 	.word	0x20000034
240015b8:	20001098 	.word	0x20001098
240015bc:	20005410 	.word	0x20005410
240015c0:	3a03126f 	.word	0x3a03126f
240015c4:	200053dc 	.word	0x200053dc
240015c8:	20014a74 	.word	0x20014a74
240015cc:	20005824 	.word	0x20005824
240015d0:	3c23d70a 	.word	0x3c23d70a
240015d4:	20000aa8 	.word	0x20000aa8
240015d8:	3f7fd220 	.word	0x3f7fd220
240015dc:	38d1b717 	.word	0x38d1b717
240015e0:	20000aa0 	.word	0x20000aa0
240015e4:	20000aac 	.word	0x20000aac
240015e8:	20000aa4 	.word	0x20000aa4
240015ec:	20005534 	.word	0x20005534
240015f0:	20014a99 	.word	0x20014a99
240015f4:	3f7fff58 	.word	0x3f7fff58
240015f8:	4684d000 	.word	0x4684d000
240015fc:	435c0000 	.word	0x435c0000
24001600:	3d40c0f0 	.word	0x3d40c0f0
24001604:	20005650 	.word	0x20005650
24001608:	3cf753bf 	.word	0x3cf753bf
2400160c:	200051f8 	.word	0x200051f8
24001610:	3ba3d70a 	.word	0x3ba3d70a
24001614:	3ff33333 	.word	0x3ff33333
24001618:	3f19999a 	.word	0x3f19999a
2400161c:	447a0000 	.word	0x447a0000
24001620:	20005ccc 	.word	0x20005ccc
24001624:	200058ac 	.word	0x200058ac
24001628:	42800000 	.word	0x42800000
2400162c:	20005d88 	.word	0x20005d88
24001630:	20014a44 	.word	0x20014a44
24001634:	20005ce4 	.word	0x20005ce4
24001638:	20005da0 	.word	0x20005da0
2400163c:	2000584c 	.word	0x2000584c
24001640:	20005264 	.word	0x20005264
24001644:	20005654 	.word	0x20005654
24001648:	20005218 	.word	0x20005218
2400164c:	43480000 	.word	0x43480000
24001650:	42480000 	.word	0x42480000
24001654:	44bb8000 	.word	0x44bb8000
24001658:	200056bc 	.word	0x200056bc
2400165c:	3f666666 	.word	0x3f666666
24001660:	44480000 	.word	0x44480000
24001664:	200056c0 	.word	0x200056c0
24001668:	45504000 	.word	0x45504000
2400166c:	42e66666 	.word	0x42e66666
24001670:	42cccccd 	.word	0x42cccccd
24001674:	200056ac 	.word	0x200056ac
24001678:	3f333333 	.word	0x3f333333
2400167c:	44fa0000 	.word	0x44fa0000
24001680:	2000553c 	.word	0x2000553c
24001684:	200052e8 	.word	0x200052e8
24001688:	20000a88 	.word	0x20000a88
2400168c:	200051ac 	.word	0x200051ac
24001690:	2000093c 	.word	0x2000093c
24001694:	2000092c 	.word	0x2000092c
24001698:	2000091c 	.word	0x2000091c
2400169c:	2000090c 	.word	0x2000090c
240016a0:	200008fc 	.word	0x200008fc
240016a4:	20005220 	.word	0x20005220
240016a8:	20005650 	.word	0x20005650
		for (int i = 0; i < NUM_FILT; i++)
240016ac:	42bd      	cmp	r5, r7
240016ae:	f47f af14 	bne.w	240014da <audioInit+0xbea>
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
240016b2:	4bea      	ldr	r3, [pc, #936]	; (24001a5c <audioInit+0x116c>)
240016b4:	2500      	movs	r5, #0
240016b6:	eb03 0806 	add.w	r8, r3, r6
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
240016ba:	4be9      	ldr	r3, [pc, #932]	; (24001a60 <audioInit+0x1170>)
240016bc:	199f      	adds	r7, r3, r6
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
240016be:	eb08 0005 	add.w	r0, r8, r5
240016c2:	4621      	mov	r1, r4
240016c4:	f012 ff52 	bl	2401456c <tIntPhasor_init>
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
240016c8:	1978      	adds	r0, r7, r5
240016ca:	4621      	mov	r1, r4
240016cc:	f012 ff94 	bl	240145f8 <tSquareLFO_init>
			tCycle_init(&lfoSine[i][v], &leaf);
240016d0:	4be4      	ldr	r3, [pc, #912]	; (24001a64 <audioInit+0x1174>)
240016d2:	4621      	mov	r1, r4
240016d4:	1998      	adds	r0, r3, r6
240016d6:	4428      	add	r0, r5
240016d8:	f012 fd64 	bl	240141a4 <tCycle_init>
			tTriLFO_init(&lfoTri[i][v], &leaf);
240016dc:	4be2      	ldr	r3, [pc, #904]	; (24001a68 <audioInit+0x1178>)
240016de:	4621      	mov	r1, r4
240016e0:	1998      	adds	r0, r3, r6
240016e2:	4428      	add	r0, r5
240016e4:	f013 f97a 	bl	240149dc <tTriLFO_init>
			tSineTriLFO_init(&lfoSineTri[i][v], &leaf);
240016e8:	4be0      	ldr	r3, [pc, #896]	; (24001a6c <audioInit+0x117c>)
240016ea:	4621      	mov	r1, r4
240016ec:	1998      	adds	r0, r3, r6
240016ee:	4428      	add	r0, r5
240016f0:	f013 f9d0 	bl	24014a94 <tSineTriLFO_init>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
240016f4:	4bde      	ldr	r3, [pc, #888]	; (24001a70 <audioInit+0x1180>)
240016f6:	4621      	mov	r1, r4
240016f8:	1998      	adds	r0, r3, r6
240016fa:	4428      	add	r0, r5
		for (int i = 0; i < NUM_LFOS; i++)
240016fc:	3508      	adds	r5, #8
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
240016fe:	f013 f8a9 	bl	24014854 <tSawSquareLFO_init>
		for (int i = 0; i < NUM_LFOS; i++)
24001702:	2d20      	cmp	r5, #32
24001704:	d1db      	bne.n	240016be <audioInit+0xdce>
		tVZFilterLS_init(&noiseShelf1[v], 80.0f, 0.5f, 1.0f, &leaf);
24001706:	4bdb      	ldr	r3, [pc, #876]	; (24001a74 <audioInit+0x1184>)
24001708:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
2400170c:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
24001710:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 24001a78 <audioInit+0x1188>
24001714:	1998      	adds	r0, r3, r6
24001716:	4621      	mov	r1, r4
24001718:	f010 fcfe 	bl	24012118 <tVZFilterLS_init>
		tVZFilterHS_init(&noiseShelf2[v], 12000.0f, 0.5f, 1.0f, &leaf);
2400171c:	4bd7      	ldr	r3, [pc, #860]	; (24001a7c <audioInit+0x118c>)
2400171e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24001722:	4621      	mov	r1, r4
24001724:	1998      	adds	r0, r3, r6
24001726:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
2400172a:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 24001a80 <audioInit+0x1190>
2400172e:	f010 fe67 	bl	24012400 <tVZFilterHS_init>
		tVZFilterBell_init(&noiseBell1[v],1000.0f, 1.9f, 1.09f, &leaf);
24001732:	4bd4      	ldr	r3, [pc, #848]	; (24001a84 <audioInit+0x1194>)
24001734:	9f02      	ldr	r7, [sp, #8]
24001736:	eef0 0a6b 	vmov.f32	s1, s23
2400173a:	eeb0 0a4b 	vmov.f32	s0, s22
2400173e:	4621      	mov	r1, r4
24001740:	ed9f 1ad1 	vldr	s2, [pc, #836]	; 24001a88 <audioInit+0x1198>
24001744:	1998      	adds	r0, r3, r6
24001746:	f1a7 0520 	sub.w	r5, r7, #32


		for (int i = 0; i < NUM_ENV; i++)
		{
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
2400174a:	eddf 8ad0 	vldr	s17, [pc, #832]	; 24001a8c <audioInit+0x119c>
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
2400174e:	ed9f 8ad0 	vldr	s16, [pc, #832]	; 24001a90 <audioInit+0x11a0>
		tVZFilterBell_init(&noiseBell1[v],1000.0f, 1.9f, 1.09f, &leaf);
24001752:	f010 ffeb 	bl	2401272c <tVZFilterBell_init>
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24001756:	4628      	mov	r0, r5
24001758:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
2400175c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
24001760:	4623      	mov	r3, r4
24001762:	eef0 0a4b 	vmov.f32	s1, s22
24001766:	f44f 5280 	mov.w	r2, #4096	; 0x1000
2400176a:	eeb0 0a68 	vmov.f32	s0, s17
2400176e:	49c9      	ldr	r1, [pc, #804]	; (24001a94 <audioInit+0x11a4>)
24001770:	f00f fcd2 	bl	24011118 <tADSRT_init>
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
24001774:	4628      	mov	r0, r5
		for (int i = 0; i < NUM_ENV; i++)
24001776:	3508      	adds	r5, #8
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
24001778:	eeb0 0a48 	vmov.f32	s0, s16
2400177c:	f032 f89c 	bl	240338b8 <__tADSRT_setLeakFactor_veneer>
		for (int i = 0; i < NUM_ENV; i++)
24001780:	42bd      	cmp	r5, r7
24001782:	d1e8      	bne.n	24001756 <audioInit+0xe66>
24001784:	4ac4      	ldr	r2, [pc, #784]	; (24001a98 <audioInit+0x11a8>)
24001786:	4635      	mov	r5, r6
24001788:	4bc4      	ldr	r3, [pc, #784]	; (24001a9c <audioInit+0x11ac>)
2400178a:	1997      	adds	r7, r2, r6
2400178c:	f106 0220 	add.w	r2, r6, #32
24001790:	4433      	add	r3, r6

		for (int i = 0; i < NUM_EFFECT; i++)
		{
			tCrusher_init(&bc[i][v],&leaf);
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
			tHighpass_setSampleRate(&dcBlock1[i][v], SAMPLE_RATE * OVERSAMPLE);
24001792:	ed9f 8ac3 	vldr	s16, [pc, #780]	; 24001aa0 <audioInit+0x11b0>
			tVZFilterBell_init(&bell1[i][v], 1000.0f, 1.9f, 1.0f, &leaf);
			tVZFilterBell_setSampleRate(&bell1[i][v], SAMPLE_RATE * OVERSAMPLE);
			tCompressor_init(&comp[i][v], &leaf);
			tCompressor_setTables(&comp[i][v], atoDbTable, dbtoATable, 0.00001f, 4.0f, -90.0f, 30.0f, ATODB_TABLE_SIZE, DBTOA_TABLE_SIZE);
			tCompressor_setSampleRate(&comp[i][v], SAMPLE_RATE * OVERSAMPLE);
			tLinearDelay_initToPool(&delay1[i][v], 4000.0f, 4096, &largePool);
24001796:	f8df 9390 	ldr.w	r9, [pc, #912]	; 24001b28 <audioInit+0x1238>

	        tTapeDelay_initToPool(&tapeDelay[i][v], 15000.0f, 30000, &largePool);
	        tFeedbackLeveler_init(&feedbackControl[i][v], .99f, 0.01f, 0.125f, 0, &leaf);

			//filters
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
2400179a:	ed9f aac2 	vldr	s20, [pc, #776]	; 24001aa4 <audioInit+0x11b4>
2400179e:	469a      	mov	sl, r3
240017a0:	eddf 8ac1 	vldr	s17, [pc, #772]	; 24001aa8 <audioInit+0x11b8>
240017a4:	e9cd b604 	strd	fp, r6, [sp, #16]
240017a8:	4616      	mov	r6, r2
			tCrusher_init(&bc[i][v],&leaf);
240017aa:	4650      	mov	r0, sl
240017ac:	4621      	mov	r1, r4
240017ae:	f00f fa95 	bl	24010cdc <tCrusher_init>
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
240017b2:	4bbe      	ldr	r3, [pc, #760]	; (24001aac <audioInit+0x11bc>)
240017b4:	4621      	mov	r1, r4
240017b6:	4638      	mov	r0, r7
240017b8:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
240017bc:	eb03 0805 	add.w	r8, r3, r5
240017c0:	f00f ffac 	bl	2401171c <tHighpass_init>
			tHighpass_setSampleRate(&dcBlock1[i][v], SAMPLE_RATE * OVERSAMPLE);
240017c4:	4638      	mov	r0, r7
240017c6:	eeb0 0a48 	vmov.f32	s0, s16
		for (int i = 0; i < NUM_EFFECT; i++)
240017ca:	f10a 0a08 	add.w	sl, sl, #8
			tHighpass_setSampleRate(&dcBlock1[i][v], SAMPLE_RATE * OVERSAMPLE);
240017ce:	f010 f805 	bl	240117dc <tHighpass_setSampleRate>
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
240017d2:	4bb7      	ldr	r3, [pc, #732]	; (24001ab0 <audioInit+0x11c0>)
240017d4:	4621      	mov	r1, r4
240017d6:	4640      	mov	r0, r8
240017d8:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
240017dc:	eb03 0b05 	add.w	fp, r3, r5
240017e0:	f00f ff9c 	bl	2401171c <tHighpass_init>
			tHighpass_setSampleRate(&dcBlock2[i][v], SAMPLE_RATE * OVERSAMPLE);
240017e4:	4640      	mov	r0, r8
240017e6:	eeb0 0a48 	vmov.f32	s0, s16
		for (int i = 0; i < NUM_EFFECT; i++)
240017ea:	3708      	adds	r7, #8
			tHighpass_setSampleRate(&dcBlock2[i][v], SAMPLE_RATE * OVERSAMPLE);
240017ec:	f00f fff6 	bl	240117dc <tHighpass_setSampleRate>
			tVZFilterLS_init(&shelf1[i][v], 80.0f, 0.5f, 1.0f,&leaf);
240017f0:	4bb0      	ldr	r3, [pc, #704]	; (24001ab4 <audioInit+0x11c4>)
240017f2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240017f6:	4621      	mov	r1, r4
240017f8:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
240017fc:	4658      	mov	r0, fp
240017fe:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 24001a78 <audioInit+0x1188>
24001802:	eb03 0805 	add.w	r8, r3, r5
24001806:	f010 fc87 	bl	24012118 <tVZFilterLS_init>
			tVZFilterLS_setSampleRate(&shelf1[i][v], SAMPLE_RATE * OVERSAMPLE);
2400180a:	4658      	mov	r0, fp
2400180c:	eeb0 0a48 	vmov.f32	s0, s16
24001810:	f010 fc86 	bl	24012120 <tVZFilterLS_setSampleRate>
			tVZFilterHS_init(&shelf2[i][v], 12000.0f, 0.5f, 1.0f, &leaf);
24001814:	4ba8      	ldr	r3, [pc, #672]	; (24001ab8 <audioInit+0x11c8>)
24001816:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
2400181a:	4621      	mov	r1, r4
2400181c:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
24001820:	4640      	mov	r0, r8
24001822:	ed9f 0a97 	vldr	s0, [pc, #604]	; 24001a80 <audioInit+0x1190>
24001826:	eb03 0b05 	add.w	fp, r3, r5
2400182a:	f010 fde9 	bl	24012400 <tVZFilterHS_init>
			tVZFilterHS_setSampleRate(&shelf2[i][v], SAMPLE_RATE * OVERSAMPLE);
2400182e:	4640      	mov	r0, r8
24001830:	eeb0 0a48 	vmov.f32	s0, s16
24001834:	f010 fde8 	bl	24012408 <tVZFilterHS_setSampleRate>
			tVZFilterBell_init(&bell1[i][v], 1000.0f, 1.9f, 1.0f, &leaf);
24001838:	4ba0      	ldr	r3, [pc, #640]	; (24001abc <audioInit+0x11cc>)
2400183a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
2400183e:	4621      	mov	r1, r4
24001840:	eb03 0805 	add.w	r8, r3, r5
24001844:	eef0 0a6b 	vmov.f32	s1, s23
24001848:	4658      	mov	r0, fp
2400184a:	eeb0 0a4b 	vmov.f32	s0, s22
2400184e:	f010 ff6d 	bl	2401272c <tVZFilterBell_init>
			tVZFilterBell_setSampleRate(&bell1[i][v], SAMPLE_RATE * OVERSAMPLE);
24001852:	eeb0 0a48 	vmov.f32	s0, s16
24001856:	4658      	mov	r0, fp
24001858:	f010 ff6c 	bl	24012734 <tVZFilterBell_setSampleRate>
			tCompressor_init(&comp[i][v], &leaf);
2400185c:	4640      	mov	r0, r8
2400185e:	4621      	mov	r1, r4
24001860:	f00f faf8 	bl	24010e54 <tCompressor_init>
			tCompressor_setTables(&comp[i][v], atoDbTable, dbtoATable, 0.00001f, 4.0f, -90.0f, 30.0f, ATODB_TABLE_SIZE, DBTOA_TABLE_SIZE);
24001864:	f44f 4380 	mov.w	r3, #16384	; 0x4000
24001868:	eef3 1a0e 	vmov.f32	s3, #62	; 0x41f00000  30.0
2400186c:	ed9f 1a94 	vldr	s2, [pc, #592]	; 24001ac0 <audioInit+0x11d0>
24001870:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
24001874:	4993      	ldr	r1, [pc, #588]	; (24001ac4 <audioInit+0x11d4>)
24001876:	4a94      	ldr	r2, [pc, #592]	; (24001ac8 <audioInit+0x11d8>)
24001878:	4640      	mov	r0, r8
2400187a:	9300      	str	r3, [sp, #0]
2400187c:	ed9f 0a93 	vldr	s0, [pc, #588]	; 24001acc <audioInit+0x11dc>
24001880:	f00f fb90 	bl	24010fa4 <tCompressor_setTables>
			tCompressor_setSampleRate(&comp[i][v], SAMPLE_RATE * OVERSAMPLE);
24001884:	4640      	mov	r0, r8
24001886:	eeb0 0a48 	vmov.f32	s0, s16
2400188a:	f00f fbb1 	bl	24010ff0 <tCompressor_setSampleRate>
			tLinearDelay_initToPool(&delay1[i][v], 4000.0f, 4096, &largePool);
2400188e:	4b90      	ldr	r3, [pc, #576]	; (24001ad0 <audioInit+0x11e0>)
24001890:	464a      	mov	r2, r9
24001892:	ed9f 0a90 	vldr	s0, [pc, #576]	; 24001ad4 <audioInit+0x11e4>
24001896:	eb03 0805 	add.w	r8, r3, r5
2400189a:	4b8f      	ldr	r3, [pc, #572]	; (24001ad8 <audioInit+0x11e8>)
2400189c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240018a0:	1958      	adds	r0, r3, r5
240018a2:	f00e ff61 	bl	24010768 <tLinearDelay_initToPool>
			tLinearDelay_initToPool(&delay2[i][v], 4000.0f, 4096, &largePool);
240018a6:	4b8d      	ldr	r3, [pc, #564]	; (24001adc <audioInit+0x11ec>)
240018a8:	464a      	mov	r2, r9
240018aa:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 24001ad4 <audioInit+0x11e4>
240018ae:	1958      	adds	r0, r3, r5
240018b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240018b4:	f00e ff58 	bl	24010768 <tLinearDelay_initToPool>
			tCycle_init(&mod1[i][v], &leaf);
240018b8:	4b89      	ldr	r3, [pc, #548]	; (24001ae0 <audioInit+0x11f0>)
240018ba:	4621      	mov	r1, r4
240018bc:	4640      	mov	r0, r8
240018be:	eb03 0b05 	add.w	fp, r3, r5
240018c2:	f012 fc6f 	bl	240141a4 <tCycle_init>
			tCycle_setSampleRate(&mod1[i][v], SAMPLE_RATE * OVERSAMPLE);
240018c6:	eeb0 0a48 	vmov.f32	s0, s16
240018ca:	4640      	mov	r0, r8
240018cc:	f012 fcca 	bl	24014264 <tCycle_setSampleRate>
			tCycle_init(&mod2[i][v], &leaf);
240018d0:	4621      	mov	r1, r4
240018d2:	4658      	mov	r0, fp
240018d4:	f012 fc66 	bl	240141a4 <tCycle_init>
			tCycle_setSampleRate(&mod2[i][v], SAMPLE_RATE * OVERSAMPLE);
240018d8:	4658      	mov	r0, fp
240018da:	eeb0 0a48 	vmov.f32	s0, s16
240018de:	f012 fcc1 	bl	24014264 <tCycle_setSampleRate>
			tCycle_setFreq(&mod1[i][v], 0.2f);
240018e2:	4640      	mov	r0, r8
240018e4:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 24001ae4 <audioInit+0x11f4>
240018e8:	f012 fc9e 	bl	24014228 <tCycle_setFreq>
			tCycle_setFreq(&mod2[i][v], 0.22222222222f);
240018ec:	4658      	mov	r0, fp
240018ee:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 24001ae8 <audioInit+0x11f8>
240018f2:	f012 fc99 	bl	24014228 <tCycle_setFreq>
	        tTapeDelay_initToPool(&tapeDelay[i][v], 15000.0f, 30000, &largePool);
240018f6:	4b7d      	ldr	r3, [pc, #500]	; (24001aec <audioInit+0x11fc>)
240018f8:	464a      	mov	r2, r9
240018fa:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 24001af0 <audioInit+0x1200>
240018fe:	1958      	adds	r0, r3, r5
24001900:	4b7c      	ldr	r3, [pc, #496]	; (24001af4 <audioInit+0x1204>)
24001902:	f247 5130 	movw	r1, #30000	; 0x7530
24001906:	eb03 0805 	add.w	r8, r3, r5
2400190a:	f00f f88f 	bl	24010a2c <tTapeDelay_initToPool>
	        tFeedbackLeveler_init(&feedbackControl[i][v], .99f, 0.01f, 0.125f, 0, &leaf);
2400190e:	4b7a      	ldr	r3, [pc, #488]	; (24001af8 <audioInit+0x1208>)
24001910:	eeb4 1a00 	vmov.f32	s2, #64	; 0x3e000000  0.125
24001914:	4622      	mov	r2, r4
24001916:	eddf 0a79 	vldr	s1, [pc, #484]	; 24001afc <audioInit+0x120c>
2400191a:	1958      	adds	r0, r3, r5
2400191c:	ed9f 0a78 	vldr	s0, [pc, #480]	; 24001b00 <audioInit+0x1210>
24001920:	2100      	movs	r1, #0
24001922:	f00f fb69 	bl	24010ff8 <tFeedbackLeveler_init>
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
24001926:	4b77      	ldr	r3, [pc, #476]	; (24001b04 <audioInit+0x1214>)
24001928:	eef0 0a4a 	vmov.f32	s1, s20
2400192c:	4622      	mov	r2, r4
2400192e:	2101      	movs	r1, #1
24001930:	4640      	mov	r0, r8
24001932:	eeb0 0a68 	vmov.f32	s0, s17
24001936:	eb03 0b05 	add.w	fp, r3, r5
2400193a:	f00f fd3f 	bl	240113bc <tSVF_init>
			tSVF_setSampleRate(&FXlowpass[i][v],SAMPLE_RATE * OVERSAMPLE);
2400193e:	4640      	mov	r0, r8
24001940:	eeb0 0a48 	vmov.f32	s0, s16
24001944:	f00f fee0 	bl	24011708 <tSVF_setSampleRate>
			tSVF_init(&FXhighpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
24001948:	4b6f      	ldr	r3, [pc, #444]	; (24001b08 <audioInit+0x1218>)
2400194a:	eef0 0a4a 	vmov.f32	s1, s20
2400194e:	4622      	mov	r2, r4
24001950:	2100      	movs	r1, #0
24001952:	4658      	mov	r0, fp
24001954:	eeb0 0a68 	vmov.f32	s0, s17
24001958:	eb03 0805 	add.w	r8, r3, r5
2400195c:	f00f fd2e 	bl	240113bc <tSVF_init>
			tSVF_setSampleRate(&FXhighpass[i][v],SAMPLE_RATE * OVERSAMPLE);
24001960:	4658      	mov	r0, fp
24001962:	eeb0 0a48 	vmov.f32	s0, s16
24001966:	f00f fecf 	bl	24011708 <tSVF_setSampleRate>
			tSVF_init(&FXbandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
2400196a:	4b68      	ldr	r3, [pc, #416]	; (24001b0c <audioInit+0x121c>)
2400196c:	4622      	mov	r2, r4
2400196e:	eef0 0a4a 	vmov.f32	s1, s20
24001972:	2102      	movs	r1, #2
24001974:	4640      	mov	r0, r8
24001976:	eeb0 0a68 	vmov.f32	s0, s17
2400197a:	eb03 0b05 	add.w	fp, r3, r5
2400197e:	f00f fd1d 	bl	240113bc <tSVF_init>
			tSVF_setSampleRate(&FXbandpass[i][v],SAMPLE_RATE * OVERSAMPLE);
24001982:	4640      	mov	r0, r8
24001984:	eeb0 0a48 	vmov.f32	s0, s16
24001988:	f00f febe 	bl	24011708 <tSVF_setSampleRate>
			tDiodeFilter_init(&FXdiodeFilters[i][v], 2000.f, 1.0f, &leaf);
2400198c:	4b60      	ldr	r3, [pc, #384]	; (24001b10 <audioInit+0x1220>)
2400198e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24001992:	4621      	mov	r1, r4
24001994:	4658      	mov	r0, fp
24001996:	eeb0 0a68 	vmov.f32	s0, s17
2400199a:	eb03 0805 	add.w	r8, r3, r5
2400199e:	f011 f883 	bl	24012aa8 <tDiodeFilter_init>
			tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], SAMPLE_RATE * OVERSAMPLE);
240019a2:	4658      	mov	r0, fp
240019a4:	eeb0 0a48 	vmov.f32	s0, s16
240019a8:	f011 fccc 	bl	24013344 <tDiodeFilter_setSampleRate>
			tVZFilterBell_init(&FXVZfilterPeak[i][v], 2000.f, 1.6f, 1.0f, &leaf);
240019ac:	4b59      	ldr	r3, [pc, #356]	; (24001b14 <audioInit+0x1224>)
240019ae:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240019b2:	eddf 0a59 	vldr	s1, [pc, #356]	; 24001b18 <audioInit+0x1228>
240019b6:	4621      	mov	r1, r4
240019b8:	4640      	mov	r0, r8
240019ba:	eeb0 0a68 	vmov.f32	s0, s17
240019be:	eb03 0b05 	add.w	fp, r3, r5
240019c2:	f010 feb3 	bl	2401272c <tVZFilterBell_init>
			tVZFilterBell_setSampleRate(&FXVZfilterPeak[i][v], SAMPLE_RATE * OVERSAMPLE);
240019c6:	4640      	mov	r0, r8
240019c8:	eeb0 0a48 	vmov.f32	s0, s16
240019cc:	f010 feb2 	bl	24012734 <tVZFilterBell_setSampleRate>
			tVZFilterLS_init(&FXVZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
240019d0:	4b52      	ldr	r3, [pc, #328]	; (24001b1c <audioInit+0x122c>)
240019d2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240019d6:	4621      	mov	r1, r4
240019d8:	eef0 0a6a 	vmov.f32	s1, s21
240019dc:	4658      	mov	r0, fp
240019de:	eeb0 0a68 	vmov.f32	s0, s17
240019e2:	eb03 0805 	add.w	r8, r3, r5
240019e6:	f010 fb97 	bl	24012118 <tVZFilterLS_init>
			tVZFilterLS_setSampleRate(&FXVZfilterLS[i][v], SAMPLE_RATE * OVERSAMPLE);
240019ea:	4658      	mov	r0, fp
240019ec:	eeb0 0a48 	vmov.f32	s0, s16
240019f0:	f010 fb96 	bl	24012120 <tVZFilterLS_setSampleRate>
			tVZFilterHS_init(&FXVZfilterHS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
240019f4:	4b4a      	ldr	r3, [pc, #296]	; (24001b20 <audioInit+0x1230>)
240019f6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240019fa:	4621      	mov	r1, r4
240019fc:	eef0 0a6a 	vmov.f32	s1, s21
24001a00:	4640      	mov	r0, r8
24001a02:	eeb0 0a68 	vmov.f32	s0, s17
24001a06:	eb03 0b05 	add.w	fp, r3, r5
24001a0a:	f010 fcf9 	bl	24012400 <tVZFilterHS_init>
			tVZFilterHS_setSampleRate(&FXVZfilterHS[i][v], SAMPLE_RATE * OVERSAMPLE);
24001a0e:	4640      	mov	r0, r8
24001a10:	eeb0 0a48 	vmov.f32	s0, s16
24001a14:	f010 fcf8 	bl	24012408 <tVZFilterHS_setSampleRate>
			tVZFilter_init(&FXVZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
24001a18:	4b42      	ldr	r3, [pc, #264]	; (24001b24 <audioInit+0x1234>)
24001a1a:	4622      	mov	r2, r4
24001a1c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24001a20:	eb03 0805 	add.w	r8, r3, r5
24001a24:	2104      	movs	r1, #4
24001a26:	eeb0 0a68 	vmov.f32	s0, s17
24001a2a:	4658      	mov	r0, fp
24001a2c:	f010 f904 	bl	24011c38 <tVZFilter_init>
			tVZFilter_setSampleRate(&FXVZfilterBR[i][v], SAMPLE_RATE * OVERSAMPLE);
24001a30:	eeb0 0a48 	vmov.f32	s0, s16
24001a34:	4658      	mov	r0, fp
		for (int i = 0; i < NUM_EFFECT; i++)
24001a36:	3508      	adds	r5, #8
			tVZFilter_setSampleRate(&FXVZfilterBR[i][v], SAMPLE_RATE * OVERSAMPLE);
24001a38:	f010 fabc 	bl	24011fb4 <tVZFilter_setSampleRate>
			tLadderFilter_init(&FXLadderfilter[i][v], 2000.f, 1.0f, &leaf);
24001a3c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24001a40:	eeb0 0a68 	vmov.f32	s0, s17
24001a44:	4621      	mov	r1, r4
24001a46:	4640      	mov	r0, r8
24001a48:	f011 fc96 	bl	24013378 <tLadderFilter_init>
			tLadderFilter_setSampleRate(&FXLadderfilter[i][v], SAMPLE_RATE * OVERSAMPLE);
24001a4c:	eeb0 0a48 	vmov.f32	s0, s16
24001a50:	4640      	mov	r0, r8
24001a52:	f011 fe59 	bl	24013708 <tLadderFilter_setSampleRate>
		for (int i = 0; i < NUM_EFFECT; i++)
24001a56:	42b5      	cmp	r5, r6
24001a58:	e068      	b.n	24001b2c <audioInit+0x123c>
24001a5a:	bf00      	nop
24001a5c:	20005484 	.word	0x20005484
24001a60:	20005464 	.word	0x20005464
24001a64:	200054d4 	.word	0x200054d4
24001a68:	20005514 	.word	0x20005514
24001a6c:	200054f4 	.word	0x200054f4
24001a70:	200054a4 	.word	0x200054a4
24001a74:	200056d8 	.word	0x200056d8
24001a78:	42a00000 	.word	0x42a00000
24001a7c:	200056e0 	.word	0x200056e0
24001a80:	463b8000 	.word	0x463b8000
24001a84:	200056b4 	.word	0x200056b4
24001a88:	3f8b851f 	.word	0x3f8b851f
24001a8c:	3dcccccd 	.word	0x3dcccccd
24001a90:	3f7fffac 	.word	0x3f7fffac
24001a94:	20001098 	.word	0x20001098
24001a98:	20000e78 	.word	0x20000e78
24001a9c:	20000ab0 	.word	0x20000ab0
24001aa0:	47bb8000 	.word	0x47bb8000
24001aa4:	3f333333 	.word	0x3f333333
24001aa8:	44fa0000 	.word	0x44fa0000
24001aac:	20000e98 	.word	0x20000e98
24001ab0:	20005d48 	.word	0x20005d48
24001ab4:	20005d68 	.word	0x20005d68
24001ab8:	20000ad0 	.word	0x20000ad0
24001abc:	20000af0 	.word	0x20000af0
24001ac0:	c2b40000 	.word	0xc2b40000
24001ac4:	30012000 	.word	0x30012000
24001ac8:	30002000 	.word	0x30002000
24001acc:	3727c5ac 	.word	0x3727c5ac
24001ad0:	2000566c 	.word	0x2000566c
24001ad4:	457a0000 	.word	0x457a0000
24001ad8:	2000509c 	.word	0x2000509c
24001adc:	200050bc 	.word	0x200050bc
24001ae0:	2000568c 	.word	0x2000568c
24001ae4:	3e4ccccd 	.word	0x3e4ccccd
24001ae8:	3e638e39 	.word	0x3e638e39
24001aec:	200149bc 	.word	0x200149bc
24001af0:	466a6000 	.word	0x466a6000
24001af4:	200008dc 	.word	0x200008dc
24001af8:	200051f8 	.word	0x200051f8
24001afc:	3c23d70a 	.word	0x3c23d70a
24001b00:	3f7d70a4 	.word	0x3f7d70a4
24001b04:	200008bc 	.word	0x200008bc
24001b08:	2000087c 	.word	0x2000087c
24001b0c:	2000089c 	.word	0x2000089c
24001b10:	2000085c 	.word	0x2000085c
24001b14:	2000083c 	.word	0x2000083c
24001b18:	3fcccccd 	.word	0x3fcccccd
24001b1c:	2000081c 	.word	0x2000081c
24001b20:	200007fc 	.word	0x200007fc
24001b24:	200007dc 	.word	0x200007dc
24001b28:	2000540c 	.word	0x2000540c
24001b2c:	f47f ae3d 	bne.w	240017aa <audioInit+0xeba>
24001b30:	e9dd b604 	ldrd	fp, r6, [sp, #16]
24001b34:	f5ab 7580 	sub.w	r5, fp, #256	; 0x100
		}

		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
		{
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.005f, &leaf);
24001b38:	4628      	mov	r0, r5
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
24001b3a:	3508      	adds	r5, #8
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.005f, &leaf);
24001b3c:	eef0 0a69 	vmov.f32	s1, s19
24001b40:	4621      	mov	r1, r4
24001b42:	eeb0 0a49 	vmov.f32	s0, s18
24001b46:	f00f fb4b 	bl	240111e0 <tExpSmooth_init>
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
24001b4a:	455d      	cmp	r5, fp
24001b4c:	d1f4      	bne.n	24001b38 <audioInit+0x1248>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24001b4e:	9b02      	ldr	r3, [sp, #8]
		}

		tVoc_init(&vocal[v], 22, &leaf);
24001b50:	4622      	mov	r2, r4
24001b52:	2116      	movs	r1, #22
24001b54:	eb06 0746 	add.w	r7, r6, r6, lsl #1
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24001b58:	3304      	adds	r3, #4
		arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
24001b5a:	2501      	movs	r5, #1
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24001b5c:	f10b 0b04 	add.w	fp, fp, #4
24001b60:	9302      	str	r3, [sp, #8]
		tVoc_init(&vocal[v], 22, &leaf);
24001b62:	4b2d      	ldr	r3, [pc, #180]	; (24001c18 <audioInit+0x1328>)
24001b64:	1998      	adds	r0, r3, r6
24001b66:	f015 f84b 	bl	24016c00 <tVoc_init>
		arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
24001b6a:	4a2c      	ldr	r2, [pc, #176]	; (24001c1c <audioInit+0x132c>)
24001b6c:	9b03      	ldr	r3, [sp, #12]
24001b6e:	2102      	movs	r1, #2
24001b70:	482b      	ldr	r0, [pc, #172]	; (24001c20 <audioInit+0x1330>)
24001b72:	eb02 1383 	add.w	r3, r2, r3, lsl #6
24001b76:	9501      	str	r5, [sp, #4]
24001b78:	2220      	movs	r2, #32
24001b7a:	4438      	add	r0, r7
24001b7c:	9300      	str	r3, [sp, #0]
24001b7e:	4b29      	ldr	r3, [pc, #164]	; (24001c24 <audioInit+0x1334>)
24001b80:	f015 faa8 	bl	240170d4 <arm_fir_interpolate_init_f32>
		arm_fir_decimate_init_f32(&osD[v],32, 2,__leaf_table_fir2XLow, decState[v],2);
24001b84:	4a28      	ldr	r2, [pc, #160]	; (24001c28 <audioInit+0x1338>)
24001b86:	eb06 1346 	add.w	r3, r6, r6, lsl #5
24001b8a:	2120      	movs	r1, #32
24001b8c:	19d0      	adds	r0, r2, r7
24001b8e:	4a27      	ldr	r2, [pc, #156]	; (24001c2c <audioInit+0x133c>)
24001b90:	4413      	add	r3, r2
24001b92:	2202      	movs	r2, #2
24001b94:	9300      	str	r3, [sp, #0]
24001b96:	9201      	str	r2, [sp, #4]
24001b98:	4b22      	ldr	r3, [pc, #136]	; (24001c24 <audioInit+0x1334>)
24001b9a:	f015 fcd7 	bl	2401754c <arm_fir_decimate_init_f32>

		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
24001b9e:	4924      	ldr	r1, [pc, #144]	; (24001c30 <audioInit+0x1340>)
24001ba0:	4622      	mov	r2, r4
24001ba2:	eddf 0a24 	vldr	s1, [pc, #144]	; 24001c34 <audioInit+0x1344>
24001ba6:	1988      	adds	r0, r1, r6
24001ba8:	ed9f 0a23 	vldr	s0, [pc, #140]	; 24001c38 <audioInit+0x1348>
24001bac:	4629      	mov	r1, r5
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24001bae:	3604      	adds	r6, #4
		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
24001bb0:	f00f fc04 	bl	240113bc <tSVF_init>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24001bb4:	9b03      	ldr	r3, [sp, #12]
24001bb6:	b96b      	cbnz	r3, 24001bd4 <audioInit+0x12e4>
24001bb8:	9503      	str	r5, [sp, #12]
24001bba:	e40e      	b.n	240013da <audioInit+0xaea>
		if (boardNumber == 0)
24001bbc:	4b1f      	ldr	r3, [pc, #124]	; (24001c3c <audioInit+0x134c>)
24001bbe:	781b      	ldrb	r3, [r3, #0]
24001bc0:	b303      	cbz	r3, 24001c04 <audioInit+0x1314>
		else if (boardNumber == 1)
24001bc2:	2b01      	cmp	r3, #1
24001bc4:	d023      	beq.n	24001c0e <audioInit+0x131e>
			firstString = (boardNumber - 1) * NUM_STRINGS_PER_BOARD;
24001bc6:	1e5a      	subs	r2, r3, #1
24001bc8:	491d      	ldr	r1, [pc, #116]	; (24001c40 <audioInit+0x1350>)
24001bca:	2302      	movs	r3, #2
24001bcc:	0052      	lsls	r2, r2, #1
24001bce:	600a      	str	r2, [r1, #0]
			numStringsThisBoard = 2;
24001bd0:	f7ff bad5 	b.w	2400117e <audioInit+0x88e>
	}

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
	{

			audioOutBuffer[ i] = (int32_t)(0.0f * TWO_TO_23);
24001bd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
24001bd8:	2100      	movs	r1, #0
24001bda:	481a      	ldr	r0, [pc, #104]	; (24001c44 <audioInit+0x1354>)
24001bdc:	f015 ff30 	bl	24017a40 <memset>
	}

	audioFrameFunction = audioFrameSynth;
24001be0:	4b19      	ldr	r3, [pc, #100]	; (24001c48 <audioInit+0x1358>)
24001be2:	4a1a      	ldr	r2, [pc, #104]	; (24001c4c <audioInit+0x135c>)
	HAL_Delay(1);
24001be4:	9803      	ldr	r0, [sp, #12]
	audioFrameFunction = audioFrameSynth;
24001be6:	601a      	str	r2, [r3, #0]

}
24001be8:	b007      	add	sp, #28
24001bea:	ecbd 8b10 	vpop	{d8-d15}
24001bee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_Delay(1);
24001bf2:	f003 b8db 	b.w	24004dac <HAL_Delay>
		firstString = boardNumber;
24001bf6:	4911      	ldr	r1, [pc, #68]	; (24001c3c <audioInit+0x134c>)
24001bf8:	2301      	movs	r3, #1
24001bfa:	4a11      	ldr	r2, [pc, #68]	; (24001c40 <audioInit+0x1350>)
24001bfc:	7809      	ldrb	r1, [r1, #0]
24001bfe:	6011      	str	r1, [r2, #0]
		numStringsThisBoard = 1;
24001c00:	f7ff babd 	b.w	2400117e <audioInit+0x88e>
			firstString = 0;
24001c04:	4a0e      	ldr	r2, [pc, #56]	; (24001c40 <audioInit+0x1350>)
24001c06:	6013      	str	r3, [r2, #0]
			numStringsThisBoard = 1;
24001c08:	2301      	movs	r3, #1
24001c0a:	f7ff bab8 	b.w	2400117e <audioInit+0x88e>
			firstString = 1;
24001c0e:	4a0c      	ldr	r2, [pc, #48]	; (24001c40 <audioInit+0x1350>)
24001c10:	6013      	str	r3, [r2, #0]
			numStringsThisBoard = 1;
24001c12:	f7ff bab4 	b.w	2400117e <audioInit+0x88e>
24001c16:	bf00      	nop
24001c18:	20014a5c 	.word	0x20014a5c
24001c1c:	200052f8 	.word	0x200052f8
24001c20:	20005708 	.word	0x20005708
24001c24:	240225c8 	.word	0x240225c8
24001c28:	200056f0 	.word	0x200056f0
24001c2c:	20000eb8 	.word	0x20000eb8
24001c30:	20005248 	.word	0x20005248
24001c34:	3e99999a 	.word	0x3e99999a
24001c38:	46947000 	.word	0x46947000
24001c3c:	20014c6d 	.word	0x20014c6d
24001c40:	20005258 	.word	0x20005258
24001c44:	30000000 	.word	0x30000000
24001c48:	20000a7c 	.word	0x20000a7c
24001c4c:	00005821 	.word	0x00005821

24001c50 <audioStart>:

void audioStart(SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
24001c50:	b570      	push	{r4, r5, r6, lr}
24001c52:	4605      	mov	r5, r0
	HAL_Delay(1);
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
24001c54:	4e0b      	ldr	r6, [pc, #44]	; (24001c84 <audioStart+0x34>)
	HAL_Delay(1);
24001c56:	2001      	movs	r0, #1
{
24001c58:	460c      	mov	r4, r1
	HAL_Delay(1);
24001c5a:	f003 f8a7 	bl	24004dac <HAL_Delay>
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
24001c5e:	f44f 7280 	mov.w	r2, #256	; 0x100
24001c62:	4631      	mov	r1, r6
24001c64:	4628      	mov	r0, r5
24001c66:	f008 fb9d 	bl	2400a3a4 <HAL_SAI_Transmit_DMA>
24001c6a:	4b07      	ldr	r3, [pc, #28]	; (24001c88 <audioStart+0x38>)
24001c6c:	4605      	mov	r5, r0
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
24001c6e:	f44f 7280 	mov.w	r2, #256	; 0x100
24001c72:	f506 6180 	add.w	r1, r6, #1024	; 0x400
24001c76:	4620      	mov	r0, r4
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
24001c78:	701d      	strb	r5, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
24001c7a:	f008 fc2f 	bl	2400a4dc <HAL_SAI_Receive_DMA>
24001c7e:	4b03      	ldr	r3, [pc, #12]	; (24001c8c <audioStart+0x3c>)
24001c80:	7018      	strb	r0, [r3, #0]
}
24001c82:	bd70      	pop	{r4, r5, r6, pc}
24001c84:	30000000 	.word	0x30000000
24001c88:	20014a3c 	.word	0x20014a3c
24001c8c:	20005cc5 	.word	0x20005cc5

24001c90 <delayTick>:
{
	param5[v][string] = (value * 1.5f) + 1.0f;
}

float delayTick(float sample, int v, int string)
{
24001c90:	b538      	push	{r3, r4, r5, lr}
    sample *= param5[v][string];
24001c92:	eb01 0140 	add.w	r1, r1, r0, lsl #1

    sample = sample + (delayFB[v][string] * param2[v][string]);
24001c96:	4d18      	ldr	r5, [pc, #96]	; (24001cf8 <delayTick+0x68>)
24001c98:	4a18      	ldr	r2, [pc, #96]	; (24001cfc <delayTick+0x6c>)
24001c9a:	eb05 0581 	add.w	r5, r5, r1, lsl #2
    sample *= param5[v][string];
24001c9e:	4b18      	ldr	r3, [pc, #96]	; (24001d00 <delayTick+0x70>)
    sample = sample + (delayFB[v][string] * param2[v][string]);
24001ca0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24001ca4:	edd5 7a00 	vldr	s15, [r5]
    sample *= param5[v][string];
24001ca8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    sample = sample + (delayFB[v][string] * param2[v][string]);
24001cac:	ed92 7a00 	vldr	s14, [r2]
    sample *= param5[v][string];
24001cb0:	008c      	lsls	r4, r1, #2
    sample = sample + (delayFB[v][string] * param2[v][string]);
24001cb2:	ee67 7a87 	vmul.f32	s15, s15, s14
24001cb6:	ed93 7a00 	vldr	s14, [r3]

    sample = fast_tanh5(sample);
24001cba:	eee7 7a00 	vfma.f32	s15, s14, s0
24001cbe:	eeb0 0a67 	vmov.f32	s0, s15
24001cc2:	f011 fe7f 	bl	240139c4 <fast_tanh5>

    sample = tFeedbackLeveler_tick(&feedbackControl[v][string], sample);
24001cc6:	480f      	ldr	r0, [pc, #60]	; (24001d04 <delayTick+0x74>)
24001cc8:	4420      	add	r0, r4
24001cca:	f00f f9fd 	bl	240110c8 <tFeedbackLeveler_tick>

    delayFB[v][string] = tTapeDelay_tick(&tapeDelay[v][string], sample);
24001cce:	480e      	ldr	r0, [pc, #56]	; (24001d08 <delayTick+0x78>)
24001cd0:	4420      	add	r0, r4
24001cd2:	f00e fed9 	bl	24010a88 <tTapeDelay_tick>
    delayFB[v][string] = tSVF_tick(&FXlowpass[v][string], delayFB[v][string]);
24001cd6:	480d      	ldr	r0, [pc, #52]	; (24001d0c <delayTick+0x7c>)
    delayFB[v][string] = tTapeDelay_tick(&tapeDelay[v][string], sample);
24001cd8:	ed85 0a00 	vstr	s0, [r5]
    delayFB[v][string] = tSVF_tick(&FXlowpass[v][string], delayFB[v][string]);
24001cdc:	4420      	add	r0, r4
24001cde:	f00f fc7d 	bl	240115dc <tSVF_tick>
    sample = tSVF_tick(&FXhighpass[v][string], delayFB[v][string]);
24001ce2:	480b      	ldr	r0, [pc, #44]	; (24001d10 <delayTick+0x80>)
    delayFB[v][string] = tSVF_tick(&FXlowpass[v][string], delayFB[v][string]);
24001ce4:	ed85 0a00 	vstr	s0, [r5]
    sample = tSVF_tick(&FXhighpass[v][string], delayFB[v][string]);
24001ce8:	4420      	add	r0, r4
24001cea:	f00f fc77 	bl	240115dc <tSVF_tick>
    sample = fast_tanh5(sample);
24001cee:	f011 fe69 	bl	240139c4 <fast_tanh5>
    delayFB[v][string] = sample;
24001cf2:	ed85 0a00 	vstr	s0, [r5]
    return sample;
}
24001cf6:	bd38      	pop	{r3, r4, r5, pc}
24001cf8:	200050dc 	.word	0x200050dc
24001cfc:	2000577c 	.word	0x2000577c
24001d00:	200057dc 	.word	0x200057dc
24001d04:	200051f8 	.word	0x200051f8
24001d08:	200149bc 	.word	0x200149bc
24001d0c:	200008dc 	.word	0x200008dc
24001d10:	200008bc 	.word	0x200008bc

24001d14 <MX_BDMA_Init>:
  */
void MX_BDMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
24001d14:	4b10      	ldr	r3, [pc, #64]	; (24001d58 <MX_BDMA_Init+0x44>)

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 9, 0);
24001d16:	2200      	movs	r2, #0
24001d18:	2109      	movs	r1, #9
24001d1a:	2081      	movs	r0, #129	; 0x81
{
24001d1c:	b510      	push	{r4, lr}
  __HAL_RCC_BDMA_CLK_ENABLE();
24001d1e:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
{
24001d22:	b082      	sub	sp, #8
  __HAL_RCC_BDMA_CLK_ENABLE();
24001d24:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
24001d28:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
24001d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24001d30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
24001d34:	9301      	str	r3, [sp, #4]
24001d36:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 9, 0);
24001d38:	f003 f862 	bl	24004e00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
24001d3c:	2081      	movs	r0, #129	; 0x81
24001d3e:	f003 f89d 	bl	24004e7c <HAL_NVIC_EnableIRQ>
  /* BDMA_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel1_IRQn, 10, 0);
24001d42:	2082      	movs	r0, #130	; 0x82
24001d44:	2200      	movs	r2, #0
24001d46:	210a      	movs	r1, #10
24001d48:	f003 f85a 	bl	24004e00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
24001d4c:	2082      	movs	r0, #130	; 0x82

}
24001d4e:	b002      	add	sp, #8
24001d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
24001d54:	f003 b892 	b.w	24004e7c <HAL_NVIC_EnableIRQ>
24001d58:	58024400 	.word	0x58024400

24001d5c <codec_init>:
    CODEC_RATE_44K_44K = 0x08 << 2,
};


void codec_init(I2C_HandleTypeDef* i2c)
{
24001d5c:	b570      	push	{r4, r5, r6, lr}

int WriteControlRegister(I2C_HandleTypeDef* i2c, uint8_t address, uint16_t data)
{
    uint8_t byte_1  = ((address << 1) & 0xfe) | ((data >> 8) & 0x01);
    uint8_t byte_2  = data & 0xff;
    uint8_t buff[2] = {byte_1, byte_2};
24001d5e:	231e      	movs	r3, #30
{
24001d60:	b084      	sub	sp, #16
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001d62:	25fa      	movs	r5, #250	; 0xfa
24001d64:	2134      	movs	r1, #52	; 0x34
24001d66:	aa03      	add	r2, sp, #12
    uint8_t buff[2] = {byte_1, byte_2};
24001d68:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001d6c:	9500      	str	r5, [sp, #0]
24001d6e:	2302      	movs	r3, #2
{
24001d70:	4604      	mov	r4, r0
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001d72:	f005 f96b 	bl	2400704c <HAL_I2C_Master_Transmit>
                                              2, 250);

    HAL_Delay(10);
24001d76:	200a      	movs	r0, #10
    uint8_t buff[2] = {byte_1, byte_2};
24001d78:	260a      	movs	r6, #10
    HAL_Delay(10);
24001d7a:	f003 f817 	bl	24004dac <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24001d7e:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001d82:	2302      	movs	r3, #2
24001d84:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24001d86:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001d8a:	4620      	mov	r0, r4
24001d8c:	aa03      	add	r2, sp, #12
24001d8e:	9500      	str	r5, [sp, #0]
24001d90:	f005 f95c 	bl	2400704c <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24001d94:	200a      	movs	r0, #10
24001d96:	f003 f809 	bl	24004dac <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24001d9a:	f241 7202 	movw	r2, #5890	; 0x1702
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001d9e:	2302      	movs	r3, #2
24001da0:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24001da2:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001da6:	4620      	mov	r0, r4
24001da8:	aa03      	add	r2, sp, #12
24001daa:	9500      	str	r5, [sp, #0]
24001dac:	f005 f94e 	bl	2400704c <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24001db0:	200a      	movs	r0, #10
24001db2:	f002 fffb 	bl	24004dac <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24001db6:	2204      	movs	r2, #4
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001db8:	2302      	movs	r3, #2
24001dba:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24001dbc:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001dc0:	4620      	mov	r0, r4
24001dc2:	aa03      	add	r2, sp, #12
24001dc4:	9500      	str	r5, [sp, #0]
24001dc6:	f005 f941 	bl	2400704c <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24001dca:	200a      	movs	r0, #10
24001dcc:	f002 ffee 	bl	24004dac <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24001dd0:	2206      	movs	r2, #6
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001dd2:	2302      	movs	r3, #2
24001dd4:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24001dd6:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001dda:	4620      	mov	r0, r4
24001ddc:	aa03      	add	r2, sp, #12
24001dde:	9500      	str	r5, [sp, #0]
24001de0:	f005 f934 	bl	2400704c <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24001de4:	200a      	movs	r0, #10
24001de6:	f002 ffe1 	bl	24004dac <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24001dea:	f241 2208 	movw	r2, #4616	; 0x1208
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001dee:	2302      	movs	r3, #2
24001df0:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24001df2:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001df6:	4620      	mov	r0, r4
24001df8:	aa03      	add	r2, sp, #12
24001dfa:	9500      	str	r5, [sp, #0]
24001dfc:	f005 f926 	bl	2400704c <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24001e00:	4630      	mov	r0, r6
24001e02:	f002 ffd3 	bl	24004dac <HAL_Delay>
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001e06:	aa03      	add	r2, sp, #12
24001e08:	2302      	movs	r3, #2
24001e0a:	2134      	movs	r1, #52	; 0x34
24001e0c:	4620      	mov	r0, r4
24001e0e:	9500      	str	r5, [sp, #0]
    uint8_t buff[2] = {byte_1, byte_2};
24001e10:	f8ad 600c 	strh.w	r6, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001e14:	f005 f91a 	bl	2400704c <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24001e18:	4630      	mov	r0, r6
24001e1a:	f002 ffc7 	bl	24004dac <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24001e1e:	f246 230c 	movw	r3, #25100	; 0x620c
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001e22:	aa03      	add	r2, sp, #12
24001e24:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24001e26:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001e2a:	4620      	mov	r0, r4
24001e2c:	2302      	movs	r3, #2
24001e2e:	9500      	str	r5, [sp, #0]
24001e30:	f005 f90c 	bl	2400704c <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24001e34:	4630      	mov	r0, r6
24001e36:	f002 ffb9 	bl	24004dac <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24001e3a:	f640 130e 	movw	r3, #2318	; 0x90e
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001e3e:	aa03      	add	r2, sp, #12
24001e40:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24001e42:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001e46:	4620      	mov	r0, r4
24001e48:	2302      	movs	r3, #2
24001e4a:	9500      	str	r5, [sp, #0]
24001e4c:	f005 f8fe 	bl	2400704c <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24001e50:	4630      	mov	r0, r6
24001e52:	f002 ffab 	bl	24004dac <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24001e56:	2310      	movs	r3, #16
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001e58:	aa03      	add	r2, sp, #12
24001e5a:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24001e5c:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001e60:	4620      	mov	r0, r4
24001e62:	2302      	movs	r3, #2
24001e64:	9500      	str	r5, [sp, #0]
24001e66:	f005 f8f1 	bl	2400704c <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24001e6a:	4630      	mov	r0, r6
24001e6c:	f002 ff9e 	bl	24004dac <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24001e70:	2312      	movs	r3, #18
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001e72:	aa03      	add	r2, sp, #12
24001e74:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24001e76:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001e7a:	4620      	mov	r0, r4
24001e7c:	2302      	movs	r3, #2
24001e7e:	9500      	str	r5, [sp, #0]
24001e80:	f005 f8e4 	bl	2400704c <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24001e84:	4630      	mov	r0, r6
24001e86:	f002 ff91 	bl	24004dac <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24001e8a:	f44f 7189 	mov.w	r1, #274	; 0x112
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001e8e:	aa03      	add	r2, sp, #12
24001e90:	2302      	movs	r3, #2
    uint8_t buff[2] = {byte_1, byte_2};
24001e92:	f8ad 100c 	strh.w	r1, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001e96:	4620      	mov	r0, r4
24001e98:	2134      	movs	r1, #52	; 0x34
24001e9a:	9500      	str	r5, [sp, #0]
24001e9c:	f005 f8d6 	bl	2400704c <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24001ea0:	4630      	mov	r0, r6
24001ea2:	f002 ff83 	bl	24004dac <HAL_Delay>
}
24001ea6:	b004      	add	sp, #16
24001ea8:	bd70      	pop	{r4, r5, r6, pc}
24001eaa:	bf00      	nop

24001eac <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
24001eac:	4b24      	ldr	r3, [pc, #144]	; (24001f40 <MX_DMA_Init+0x94>)

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 2, 0);
24001eae:	2200      	movs	r2, #0
24001eb0:	2102      	movs	r1, #2
24001eb2:	200b      	movs	r0, #11
{
24001eb4:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
24001eb6:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
24001eba:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
24001ebc:	f044 0401 	orr.w	r4, r4, #1
24001ec0:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
24001ec4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
24001ec8:	f003 0301 	and.w	r3, r3, #1
24001ecc:	9301      	str	r3, [sp, #4]
24001ece:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 2, 0);
24001ed0:	f002 ff96 	bl	24004e00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
24001ed4:	200b      	movs	r0, #11
24001ed6:	f002 ffd1 	bl	24004e7c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
24001eda:	2200      	movs	r2, #0
24001edc:	2105      	movs	r1, #5
24001ede:	200c      	movs	r0, #12
24001ee0:	f002 ff8e 	bl	24004e00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
24001ee4:	200c      	movs	r0, #12
24001ee6:	f002 ffc9 	bl	24004e7c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 6, 0);
24001eea:	2200      	movs	r2, #0
24001eec:	2106      	movs	r1, #6
24001eee:	200d      	movs	r0, #13
24001ef0:	f002 ff86 	bl	24004e00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
24001ef4:	200d      	movs	r0, #13
24001ef6:	f002 ffc1 	bl	24004e7c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 4, 0);
24001efa:	2200      	movs	r2, #0
24001efc:	2104      	movs	r1, #4
24001efe:	200e      	movs	r0, #14
24001f00:	f002 ff7e 	bl	24004e00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
24001f04:	200e      	movs	r0, #14
24001f06:	f002 ffb9 	bl	24004e7c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 3, 0);
24001f0a:	2200      	movs	r2, #0
24001f0c:	2103      	movs	r1, #3
24001f0e:	200f      	movs	r0, #15
24001f10:	f002 ff76 	bl	24004e00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
24001f14:	200f      	movs	r0, #15
24001f16:	f002 ffb1 	bl	24004e7c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 1, 0);
24001f1a:	2200      	movs	r2, #0
24001f1c:	2101      	movs	r1, #1
24001f1e:	2011      	movs	r0, #17
24001f20:	f002 ff6e 	bl	24004e00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
24001f24:	2011      	movs	r0, #17
24001f26:	f002 ffa9 	bl	24004e7c <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 8, 0);
24001f2a:	2066      	movs	r0, #102	; 0x66
24001f2c:	2200      	movs	r2, #0
24001f2e:	2108      	movs	r1, #8
24001f30:	f002 ff66 	bl	24004e00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
24001f34:	2066      	movs	r0, #102	; 0x66

}
24001f36:	b002      	add	sp, #8
24001f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
24001f3c:	f002 bf9e 	b.w	24004e7c <HAL_NVIC_EnableIRQ>
24001f40:	58024400 	.word	0x58024400

24001f44 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
24001f44:	b530      	push	{r4, r5, lr}

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
24001f46:	4818      	ldr	r0, [pc, #96]	; (24001fa8 <MX_FMC_Init+0x64>)
{
24001f48:	b089      	sub	sp, #36	; 0x24
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
24001f4a:	2308      	movs	r3, #8
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
24001f4c:	2202      	movs	r2, #2
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
24001f4e:	2100      	movs	r1, #0
  hsdram1.Instance = FMC_SDRAM_DEVICE;
24001f50:	4d16      	ldr	r5, [pc, #88]	; (24001fac <MX_FMC_Init+0x68>)
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
24001f52:	60c3      	str	r3, [r0, #12]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
24001f54:	f44f 6400 	mov.w	r4, #2048	; 0x800
  SdramTiming.LoadToActiveDelay = 2;
24001f58:	9200      	str	r2, [sp, #0]
  SdramTiming.ExitSelfRefreshDelay = 8;
  SdramTiming.SelfRefreshTime = 5;
  SdramTiming.RowCycleDelay = 6;
  SdramTiming.WriteRecoveryTime = 3;
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;
24001f5a:	9206      	str	r2, [sp, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
24001f5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  SdramTiming.ExitSelfRefreshDelay = 8;
24001f60:	9301      	str	r3, [sp, #4]
  SdramTiming.SelfRefreshTime = 5;
24001f62:	2305      	movs	r3, #5
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
24001f64:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
24001f66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  SdramTiming.SelfRefreshTime = 5;
24001f6a:	9302      	str	r3, [sp, #8]
  SdramTiming.RowCycleDelay = 6;
24001f6c:	2306      	movs	r3, #6
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
24001f6e:	6282      	str	r2, [r0, #40]	; 0x28
  SdramTiming.WriteRecoveryTime = 3;
24001f70:	2203      	movs	r2, #3
  SdramTiming.RowCycleDelay = 6;
24001f72:	9303      	str	r3, [sp, #12]
  SdramTiming.WriteRecoveryTime = 3;
24001f74:	2302      	movs	r3, #2
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
24001f76:	6041      	str	r1, [r0, #4]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
24001f78:	61c1      	str	r1, [r0, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
24001f7a:	4669      	mov	r1, sp
  hsdram1.Instance = FMC_SDRAM_DEVICE;
24001f7c:	6005      	str	r5, [r0, #0]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
24001f7e:	6204      	str	r4, [r0, #32]
  SdramTiming.WriteRecoveryTime = 3;
24001f80:	e9cd 2304 	strd	r2, r3, [sp, #16]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
24001f84:	2201      	movs	r2, #1
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
24001f86:	2320      	movs	r3, #32
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
24001f88:	6082      	str	r2, [r0, #8]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
24001f8a:	2240      	movs	r2, #64	; 0x40
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
24001f8c:	6103      	str	r3, [r0, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
24001f8e:	f44f 7380 	mov.w	r3, #256	; 0x100
24001f92:	e9c0 2305 	strd	r2, r3, [r0, #20]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
24001f96:	f009 fa55 	bl	2400b444 <HAL_SDRAM_Init>
24001f9a:	b908      	cbnz	r0, 24001fa0 <MX_FMC_Init+0x5c>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
24001f9c:	b009      	add	sp, #36	; 0x24
24001f9e:	bd30      	pop	{r4, r5, pc}
    Error_Handler( );
24001fa0:	f002 f9ec 	bl	2400437c <Error_Handler>
}
24001fa4:	b009      	add	sp, #36	; 0x24
24001fa6:	bd30      	pop	{r4, r5, pc}
24001fa8:	20014aa0 	.word	0x20014aa0
24001fac:	52004140 	.word	0x52004140

24001fb0 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
24001fb0:	4b2e      	ldr	r3, [pc, #184]	; (2400206c <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001fb2:	2200      	movs	r2, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
24001fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
24001fb6:	b089      	sub	sp, #36	; 0x24
  if (FMC_Initialized) {
24001fb8:	681c      	ldr	r4, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001fba:	9204      	str	r2, [sp, #16]
  if (FMC_Initialized) {
24001fbc:	2c00      	cmp	r4, #0
24001fbe:	d153      	bne.n	24002068 <HAL_SDRAM_MspInit+0xb8>
  __HAL_RCC_FMC_CLK_ENABLE();
24001fc0:	4a2b      	ldr	r2, [pc, #172]	; (24002070 <HAL_SDRAM_MspInit+0xc0>)
  FMC_Initialized = 1;
24001fc2:	2101      	movs	r1, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24001fc4:	2603      	movs	r6, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24001fc6:	250c      	movs	r5, #12
  FMC_Initialized = 1;
24001fc8:	6019      	str	r1, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24001fca:	2702      	movs	r7, #2
  __HAL_RCC_FMC_CLK_ENABLE();
24001fcc:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24001fd0:	4828      	ldr	r0, [pc, #160]	; (24002074 <HAL_SDRAM_MspInit+0xc4>)
  __HAL_RCC_FMC_CLK_ENABLE();
24001fd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
24001fd6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
24001fda:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
24001fde:	f64f 7283 	movw	r2, #65411	; 0xff83
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24001fe2:	9605      	str	r6, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
24001fe4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24001fe8:	9506      	str	r5, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
24001fea:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
24001fec:	2302      	movs	r3, #2
  __HAL_RCC_FMC_CLK_ENABLE();
24001fee:	9901      	ldr	r1, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24001ff0:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
24001ff2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24001ff6:	f004 fdab 	bl	24006b50 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
24001ffa:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24001ffe:	a902      	add	r1, sp, #8
24002000:	481d      	ldr	r0, [pc, #116]	; (24002078 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
24002002:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24002004:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24002006:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24002008:	e9cd 4604 	strd	r4, r6, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
2400200c:	f004 fda0 	bl	24006b50 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
24002010:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24002014:	a902      	add	r1, sp, #8
24002016:	4819      	ldr	r0, [pc, #100]	; (2400207c <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
24002018:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2400201a:	e9cd 7403 	strd	r7, r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
2400201e:	e9cd 6505 	strd	r6, r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24002022:	f004 fd95 	bl	24006b50 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
24002026:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
2400202a:	a902      	add	r1, sp, #8
2400202c:	4814      	ldr	r0, [pc, #80]	; (24002080 <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
2400202e:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24002030:	e9cd 7403 	strd	r7, r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24002034:	e9cd 6505 	strd	r6, r5, [sp, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
24002038:	f004 fd8a 	bl	24006b50 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
2400203c:	f64f 732c 	movw	r3, #65324	; 0xff2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24002040:	a902      	add	r1, sp, #8
24002042:	4810      	ldr	r0, [pc, #64]	; (24002084 <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
24002044:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24002046:	e9cd 7403 	strd	r7, r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
2400204a:	e9cd 6505 	strd	r6, r5, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
2400204e:	f004 fd7f 	bl	24006b50 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
24002052:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24002056:	a902      	add	r1, sp, #8
24002058:	480b      	ldr	r0, [pc, #44]	; (24002088 <HAL_SDRAM_MspInit+0xd8>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2400205a:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
2400205c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
2400205e:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24002060:	e9cd 4604 	strd	r4, r6, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24002064:	f004 fd74 	bl	24006b50 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
24002068:	b009      	add	sp, #36	; 0x24
2400206a:	bdf0      	pop	{r4, r5, r6, r7, pc}
2400206c:	20014a9c 	.word	0x20014a9c
24002070:	58024400 	.word	0x58024400
24002074:	58021000 	.word	0x58021000
24002078:	58021800 	.word	0x58021800
2400207c:	58020c00 	.word	0x58020c00
24002080:	58022000 	.word	0x58022000
24002084:	58021c00 	.word	0x58021c00
24002088:	58021400 	.word	0x58021400

2400208c <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
2400208c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
24002090:	4bad      	ldr	r3, [pc, #692]	; (24002348 <MX_GPIO_Init+0x2bc>)
{
24002092:	b090      	sub	sp, #64	; 0x40
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24002094:	2400      	movs	r4, #0
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
24002096:	4ead      	ldr	r6, [pc, #692]	; (2400234c <MX_GPIO_Init+0x2c0>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
24002098:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 24002360 <MX_GPIO_Init+0x2d4>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
2400209c:	2182      	movs	r1, #130	; 0x82
  GPIO_InitTypeDef GPIO_InitStruct = {0};
2400209e:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
240020a0:	4630      	mov	r0, r6

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
240020a2:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 24002364 <MX_GPIO_Init+0x2d8>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB7 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
240020a6:	2501      	movs	r5, #1
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_3, GPIO_PIN_RESET);
240020a8:	4fa9      	ldr	r7, [pc, #676]	; (24002350 <MX_GPIO_Init+0x2c4>)
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
240020aa:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 24002368 <MX_GPIO_Init+0x2dc>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
240020ae:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
240020b2:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
240020b6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240020ba:	f042 0210 	orr.w	r2, r2, #16
240020be:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
240020c2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240020c6:	f002 0210 	and.w	r2, r2, #16
240020ca:	9201      	str	r2, [sp, #4]
240020cc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
240020ce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240020d2:	f042 0202 	orr.w	r2, r2, #2
240020d6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
240020da:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240020de:	f002 0202 	and.w	r2, r2, #2
240020e2:	9202      	str	r2, [sp, #8]
240020e4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
240020e6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240020ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
240020ee:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
240020f2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240020f6:	f002 0240 	and.w	r2, r2, #64	; 0x40
240020fa:	9203      	str	r2, [sp, #12]
240020fc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
240020fe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24002102:	f042 0208 	orr.w	r2, r2, #8
24002106:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
2400210a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
2400210e:	f002 0208 	and.w	r2, r2, #8
24002112:	9204      	str	r2, [sp, #16]
24002114:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
24002116:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
2400211a:	f042 0204 	orr.w	r2, r2, #4
2400211e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24002122:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24002126:	f002 0204 	and.w	r2, r2, #4
2400212a:	9205      	str	r2, [sp, #20]
2400212c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
2400212e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24002132:	f042 0201 	orr.w	r2, r2, #1
24002136:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
2400213a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
2400213e:	f002 0201 	and.w	r2, r2, #1
24002142:	9206      	str	r2, [sp, #24]
24002144:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
24002146:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
2400214a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
2400214e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24002152:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24002156:	f402 7280 	and.w	r2, r2, #256	; 0x100
2400215a:	9207      	str	r2, [sp, #28]
2400215c:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
2400215e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24002162:	f042 0280 	orr.w	r2, r2, #128	; 0x80
24002166:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
2400216a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
2400216e:	f002 0280 	and.w	r2, r2, #128	; 0x80
24002172:	9208      	str	r2, [sp, #32]
24002174:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
24002176:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
2400217a:	f042 0220 	orr.w	r2, r2, #32
2400217e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
24002182:	4622      	mov	r2, r4
  __HAL_RCC_GPIOF_CLK_ENABLE();
24002184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24002188:	f003 0320 	and.w	r3, r3, #32
2400218c:	9309      	str	r3, [sp, #36]	; 0x24
2400218e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
24002190:	f004 fe2e 	bl	24006df0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
24002194:	4622      	mov	r2, r4
24002196:	4640      	mov	r0, r8
24002198:	f44f 7100 	mov.w	r1, #512	; 0x200
2400219c:	f004 fe28 	bl	24006df0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
240021a0:	4622      	mov	r2, r4
240021a2:	4650      	mov	r0, sl
240021a4:	2193      	movs	r1, #147	; 0x93
240021a6:	f004 fe23 	bl	24006df0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_3, GPIO_PIN_RESET);
240021aa:	4622      	mov	r2, r4
240021ac:	4638      	mov	r0, r7
240021ae:	2109      	movs	r1, #9
240021b0:	f004 fe1e 	bl	24006df0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
240021b4:	4622      	mov	r2, r4
240021b6:	4648      	mov	r0, r9
240021b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
240021bc:	f004 fe18 	bl	24006df0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_7
240021c0:	f247 02c0 	movw	r2, #28864	; 0x70c0
240021c4:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
240021c6:	a90a      	add	r1, sp, #40	; 0x28
240021c8:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
240021ca:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_7
240021cc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
240021d0:	f004 fcbe 	bl	24006b50 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
240021d4:	f243 02f8 	movw	r2, #12536	; 0x30f8
240021d8:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
240021da:	a90a      	add	r1, sp, #40	; 0x28
240021dc:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = GPIO_NOPULL;
240021de:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
240021e0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
240021e4:	f004 fcb4 	bl	24006b50 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
240021e8:	f44f 421f 	mov.w	r2, #40704	; 0x9f00
240021ec:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
240021ee:	a90a      	add	r1, sp, #40	; 0x28
240021f0:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
240021f2:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
240021f4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
240021f8:	f004 fcaa 	bl	24006b50 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1;
240021fc:	2382      	movs	r3, #130	; 0x82
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240021fe:	a90a      	add	r1, sp, #40	; 0x28
24002200:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1;
24002202:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24002204:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24002206:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2400220a:	f004 fca1 	bl	24006b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
2400220e:	2240      	movs	r2, #64	; 0x40
24002210:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24002214:	a90a      	add	r1, sp, #40	; 0x28
24002216:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24002218:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_6;
2400221a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2400221e:	f004 fc97 	bl	24006b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
24002222:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24002226:	a90a      	add	r1, sp, #40	; 0x28
24002228:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_9;
2400222a:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
2400222c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2400222e:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24002232:	f004 fc8d 	bl	24006b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC6
                           PC2 PC3 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
24002236:	f24e 026c 	movw	r2, #57452	; 0xe06c
2400223a:	2303      	movs	r3, #3
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
2400223c:	a90a      	add	r1, sp, #40	; 0x28
2400223e:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24002240:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
24002242:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24002246:	f004 fc83 	bl	24006b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
2400224a:	f44f 6210 	mov.w	r2, #2304	; 0x900
2400224e:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
24002250:	a90a      	add	r1, sp, #40	; 0x28
24002252:	4840      	ldr	r0, [pc, #256]	; (24002354 <MX_GPIO_Init+0x2c8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24002254:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
24002256:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
2400225a:	f004 fc79 	bl	24006b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC0 PC1 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
2400225e:	2393      	movs	r3, #147	; 0x93
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24002260:	4650      	mov	r0, sl
24002262:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
24002264:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24002266:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24002268:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
2400226c:	f004 fc70 	bl	24006b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF6 PF10 PF9
                           PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
24002270:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
24002274:	2303      	movs	r3, #3
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24002276:	a90a      	add	r1, sp, #40	; 0x28
24002278:	4837      	ldr	r0, [pc, #220]	; (24002358 <MX_GPIO_Init+0x2cc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2400227a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
2400227c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24002280:	f004 fc66 	bl	24006b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
24002284:	2208      	movs	r2, #8
24002286:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
2400228a:	4640      	mov	r0, r8
2400228c:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2400228e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_3;
24002290:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24002294:	f004 fc5c 	bl	24006b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB0 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_10;
24002298:	f242 4205 	movw	r2, #9221	; 0x2405
2400229c:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2400229e:	a90a      	add	r1, sp, #40	; 0x28
240022a0:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
240022a2:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_10;
240022a4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240022a8:	f004 fc52 	bl	24006b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH6 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
240022ac:	22c0      	movs	r2, #192	; 0xc0
240022ae:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
240022b0:	a90a      	add	r1, sp, #40	; 0x28
240022b2:	482a      	ldr	r0, [pc, #168]	; (2400235c <MX_GPIO_Init+0x2d0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
240022b4:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
240022b6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
240022ba:	f004 fc49 	bl	24006b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
240022be:	2202      	movs	r2, #2
240022c0:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
240022c2:	a90a      	add	r1, sp, #40	; 0x28
240022c4:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
240022c6:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_1;
240022c8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
240022cc:	f004 fc40 	bl	24006b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
240022d0:	2309      	movs	r3, #9
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
240022d2:	a90a      	add	r1, sp, #40	; 0x28
240022d4:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
240022d6:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
240022d8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
240022da:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
240022de:	f004 fc37 	bl	24006b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
240022e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
240022e6:	4648      	mov	r0, r9
240022e8:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_11;
240022ea:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
240022ec:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
240022ee:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
240022f2:	f004 fc2d 	bl	24006b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
240022f6:	2204      	movs	r2, #4
240022f8:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
240022fa:	4638      	mov	r0, r7
240022fc:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
240022fe:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_2;
24002300:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24002304:	f004 fc24 	bl	24006b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
24002308:	f44f 5280 	mov.w	r2, #4096	; 0x1000
2400230c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24002310:	a90a      	add	r1, sp, #40	; 0x28
24002312:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24002314:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_12;
24002316:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2400231a:	f004 fc19 	bl	24006b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
2400231e:	2300      	movs	r3, #0
24002320:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24002324:	4630      	mov	r0, r6
24002326:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24002328:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
2400232a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2400232e:	f004 fc0f 	bl	24006b50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
24002332:	4622      	mov	r2, r4
24002334:	4621      	mov	r1, r4
24002336:	2017      	movs	r0, #23
24002338:	f002 fd62 	bl	24004e00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
2400233c:	2017      	movs	r0, #23
2400233e:	f002 fd9d 	bl	24004e7c <HAL_NVIC_EnableIRQ>

}
24002342:	b010      	add	sp, #64	; 0x40
24002344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
24002348:	58024400 	.word	0x58024400
2400234c:	58020400 	.word	0x58020400
24002350:	58020000 	.word	0x58020000
24002354:	58022000 	.word	0x58022000
24002358:	58021400 	.word	0x58021400
2400235c:	58021c00 	.word	0x58021c00
24002360:	58021800 	.word	0x58021800
24002364:	58020800 	.word	0x58020800
24002368:	58020c00 	.word	0x58020c00

2400236c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
2400236c:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
2400236e:	481c      	ldr	r0, [pc, #112]	; (240023e0 <MX_I2C1_Init+0x74>)
  hi2c1.Init.Timing = 0x0050174F;
  hi2c1.Init.OwnAddress1 = 68;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
24002370:	2300      	movs	r3, #0
  hi2c1.Init.Timing = 0x0050174F;
24002372:	4a1c      	ldr	r2, [pc, #112]	; (240023e4 <MX_I2C1_Init+0x78>)
  hi2c1.Init.OwnAddress1 = 68;
24002374:	2144      	movs	r1, #68	; 0x44
  hi2c1.Instance = I2C1;
24002376:	4c1c      	ldr	r4, [pc, #112]	; (240023e8 <MX_I2C1_Init+0x7c>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
24002378:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress1 = 68;
2400237a:	6081      	str	r1, [r0, #8]
  hi2c1.Init.OwnAddress2 = 0;
2400237c:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
2400237e:	6203      	str	r3, [r0, #32]
  hi2c1.Init.Timing = 0x0050174F;
24002380:	e9c0 4200 	strd	r4, r2, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
24002384:	2201      	movs	r2, #1
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
24002386:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
2400238a:	60c2      	str	r2, [r0, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
2400238c:	f004 fe00 	bl	24006f90 <HAL_I2C_Init>
24002390:	b970      	cbnz	r0, 240023b0 <MX_I2C1_Init+0x44>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
24002392:	2100      	movs	r1, #0
24002394:	4812      	ldr	r0, [pc, #72]	; (240023e0 <MX_I2C1_Init+0x74>)
24002396:	f005 fba1 	bl	24007adc <HAL_I2CEx_ConfigAnalogFilter>
2400239a:	b988      	cbnz	r0, 240023c0 <MX_I2C1_Init+0x54>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
2400239c:	2100      	movs	r1, #0
2400239e:	4810      	ldr	r0, [pc, #64]	; (240023e0 <MX_I2C1_Init+0x74>)
240023a0:	f005 fbd0 	bl	24007b44 <HAL_I2CEx_ConfigDigitalFilter>
240023a4:	b9a0      	cbnz	r0, 240023d0 <MX_I2C1_Init+0x64>
    Error_Handler();
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
240023a6:	2001      	movs	r0, #1
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
240023a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
240023ac:	f005 bbf6 	b.w	24007b9c <HAL_I2CEx_EnableFastModePlus>
    Error_Handler();
240023b0:	f001 ffe4 	bl	2400437c <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
240023b4:	2100      	movs	r1, #0
240023b6:	480a      	ldr	r0, [pc, #40]	; (240023e0 <MX_I2C1_Init+0x74>)
240023b8:	f005 fb90 	bl	24007adc <HAL_I2CEx_ConfigAnalogFilter>
240023bc:	2800      	cmp	r0, #0
240023be:	d0ed      	beq.n	2400239c <MX_I2C1_Init+0x30>
    Error_Handler();
240023c0:	f001 ffdc 	bl	2400437c <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
240023c4:	2100      	movs	r1, #0
240023c6:	4806      	ldr	r0, [pc, #24]	; (240023e0 <MX_I2C1_Init+0x74>)
240023c8:	f005 fbbc 	bl	24007b44 <HAL_I2CEx_ConfigDigitalFilter>
240023cc:	2800      	cmp	r0, #0
240023ce:	d0ea      	beq.n	240023a6 <MX_I2C1_Init+0x3a>
    Error_Handler();
240023d0:	f001 ffd4 	bl	2400437c <Error_Handler>
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
240023d4:	2001      	movs	r0, #1
}
240023d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
240023da:	f005 bbdf 	b.w	24007b9c <HAL_I2CEx_EnableFastModePlus>
240023de:	bf00      	nop
240023e0:	20014bc4 	.word	0x20014bc4
240023e4:	0050174f 	.word	0x0050174f
240023e8:	40005400 	.word	0x40005400

240023ec <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
240023ec:	b510      	push	{r4, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
240023ee:	4817      	ldr	r0, [pc, #92]	; (2400244c <MX_I2C2_Init+0x60>)
  hi2c2.Init.Timing = 0x00B03FDB;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
240023f0:	2300      	movs	r3, #0
240023f2:	4917      	ldr	r1, [pc, #92]	; (24002450 <MX_I2C2_Init+0x64>)
240023f4:	2401      	movs	r4, #1
240023f6:	4a17      	ldr	r2, [pc, #92]	; (24002454 <MX_I2C2_Init+0x68>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
240023f8:	6203      	str	r3, [r0, #32]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
240023fa:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
  hi2c2.Init.OwnAddress2 = 0;
240023fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
24002402:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
24002406:	f004 fdc3 	bl	24006f90 <HAL_I2C_Init>
2400240a:	b950      	cbnz	r0, 24002422 <MX_I2C2_Init+0x36>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
2400240c:	2100      	movs	r1, #0
2400240e:	480f      	ldr	r0, [pc, #60]	; (2400244c <MX_I2C2_Init+0x60>)
24002410:	f005 fb64 	bl	24007adc <HAL_I2CEx_ConfigAnalogFilter>
24002414:	b968      	cbnz	r0, 24002432 <MX_I2C2_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
24002416:	2100      	movs	r1, #0
24002418:	480c      	ldr	r0, [pc, #48]	; (2400244c <MX_I2C2_Init+0x60>)
2400241a:	f005 fb93 	bl	24007b44 <HAL_I2CEx_ConfigDigitalFilter>
2400241e:	b980      	cbnz	r0, 24002442 <MX_I2C2_Init+0x56>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
24002420:	bd10      	pop	{r4, pc}
    Error_Handler();
24002422:	f001 ffab 	bl	2400437c <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
24002426:	2100      	movs	r1, #0
24002428:	4808      	ldr	r0, [pc, #32]	; (2400244c <MX_I2C2_Init+0x60>)
2400242a:	f005 fb57 	bl	24007adc <HAL_I2CEx_ConfigAnalogFilter>
2400242e:	2800      	cmp	r0, #0
24002430:	d0f1      	beq.n	24002416 <MX_I2C2_Init+0x2a>
    Error_Handler();
24002432:	f001 ffa3 	bl	2400437c <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
24002436:	2100      	movs	r1, #0
24002438:	4804      	ldr	r0, [pc, #16]	; (2400244c <MX_I2C2_Init+0x60>)
2400243a:	f005 fb83 	bl	24007b44 <HAL_I2CEx_ConfigDigitalFilter>
2400243e:	2800      	cmp	r0, #0
24002440:	d0ee      	beq.n	24002420 <MX_I2C2_Init+0x34>
}
24002442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
24002446:	f001 bf99 	b.w	2400437c <Error_Handler>
2400244a:	bf00      	nop
2400244c:	20014c18 	.word	0x20014c18
24002450:	40005800 	.word	0x40005800
24002454:	00b03fdb 	.word	0x00b03fdb

24002458 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
24002458:	b5f0      	push	{r4, r5, r6, r7, lr}
2400245a:	b0bd      	sub	sp, #244	; 0xf4

  GPIO_InitTypeDef GPIO_InitStruct = {0};
2400245c:	2100      	movs	r1, #0
{
2400245e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24002460:	22c0      	movs	r2, #192	; 0xc0
24002462:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24002464:	910a      	str	r1, [sp, #40]	; 0x28
24002466:	e9cd 1106 	strd	r1, r1, [sp, #24]
2400246a:	e9cd 1108 	strd	r1, r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
2400246e:	f015 fae7 	bl	24017a40 <memset>
  if(i2cHandle->Instance==I2C1)
24002472:	6823      	ldr	r3, [r4, #0]
24002474:	4a79      	ldr	r2, [pc, #484]	; (2400265c <HAL_I2C_MspInit+0x204>)
24002476:	4293      	cmp	r3, r2
24002478:	d005      	beq.n	24002486 <HAL_I2C_MspInit+0x2e>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
2400247a:	4a79      	ldr	r2, [pc, #484]	; (24002660 <HAL_I2C_MspInit+0x208>)
2400247c:	4293      	cmp	r3, r2
2400247e:	f000 8087 	beq.w	24002590 <HAL_I2C_MspInit+0x138>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
24002482:	b03d      	add	sp, #244	; 0xf4
24002484:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
24002486:	2208      	movs	r2, #8
24002488:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400248a:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
2400248c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24002490:	f006 fa8a 	bl	240089a8 <HAL_RCCEx_PeriphCLKConfig>
24002494:	2800      	cmp	r0, #0
24002496:	f040 80db 	bne.w	24002650 <HAL_I2C_MspInit+0x1f8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
2400249a:	4d72      	ldr	r5, [pc, #456]	; (24002664 <HAL_I2C_MspInit+0x20c>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
2400249c:	f44f 7240 	mov.w	r2, #768	; 0x300
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
240024a0:	2704      	movs	r7, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240024a2:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOB_CLK_ENABLE();
240024a4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    hdma_i2c1_rx.Instance = DMA1_Stream3;
240024a8:	4e6f      	ldr	r6, [pc, #444]	; (24002668 <HAL_I2C_MspInit+0x210>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
240024aa:	f043 0302 	orr.w	r3, r3, #2
240024ae:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
240024b2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
240024b6:	970a      	str	r7, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
240024b8:	f003 0302 	and.w	r3, r3, #2
240024bc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
240024be:	2312      	movs	r3, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
240024c0:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240024c2:	486a      	ldr	r0, [pc, #424]	; (2400266c <HAL_I2C_MspInit+0x214>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
240024c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
240024c8:	2200      	movs	r2, #0
240024ca:	2302      	movs	r3, #2
240024cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240024d0:	f004 fb3e 	bl	24006b50 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
240024d4:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
240024d8:	2201      	movs	r2, #1
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
240024da:	6277      	str	r7, [r6, #36]	; 0x24
    __HAL_RCC_I2C1_CLK_ENABLE();
240024dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
240024e0:	4630      	mov	r0, r6
    __HAL_RCC_I2C1_CLK_ENABLE();
240024e2:	f8c5 30e8 	str.w	r3, [r5, #232]	; 0xe8
240024e6:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
240024ea:	62b2      	str	r2, [r6, #40]	; 0x28
    hdma_i2c1_rx.Instance = DMA1_Stream3;
240024ec:	4a60      	ldr	r2, [pc, #384]	; (24002670 <HAL_I2C_MspInit+0x218>)
    __HAL_RCC_I2C1_CLK_ENABLE();
240024ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    hdma_i2c1_rx.Instance = DMA1_Stream3;
240024f2:	6032      	str	r2, [r6, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
240024f4:	2221      	movs	r2, #33	; 0x21
    __HAL_RCC_I2C1_CLK_ENABLE();
240024f6:	9302      	str	r3, [sp, #8]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
240024f8:	2300      	movs	r3, #0
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
240024fa:	6072      	str	r2, [r6, #4]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
240024fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_I2C1_CLK_ENABLE();
24002500:	9902      	ldr	r1, [sp, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
24002502:	6132      	str	r2, [r6, #16]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24002504:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
24002508:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
2400250c:	e9c6 3305 	strd	r3, r3, [r6, #20]
    hdma_i2c1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
24002510:	e9c6 330b 	strd	r3, r3, [r6, #44]	; 0x2c
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24002514:	f44f 3340 	mov.w	r3, #196608	; 0x30000
24002518:	e9c6 2307 	strd	r2, r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
2400251c:	f002 fe02 	bl	24005124 <HAL_DMA_Init>
24002520:	2800      	cmp	r0, #0
24002522:	f040 8092 	bne.w	2400264a <HAL_I2C_MspInit+0x1f2>
    hdma_i2c1_tx.Instance = DMA1_Stream4;
24002526:	4d53      	ldr	r5, [pc, #332]	; (24002674 <HAL_I2C_MspInit+0x21c>)
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
24002528:	2222      	movs	r2, #34	; 0x22
    hdma_i2c1_tx.Instance = DMA1_Stream4;
2400252a:	4953      	ldr	r1, [pc, #332]	; (24002678 <HAL_I2C_MspInit+0x220>)
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
2400252c:	2300      	movs	r3, #0
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
2400252e:	606a      	str	r2, [r5, #4]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
24002530:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_tx.Instance = DMA1_Stream4;
24002534:	6029      	str	r1, [r5, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
24002536:	2140      	movs	r1, #64	; 0x40
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
24002538:	612a      	str	r2, [r5, #16]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
2400253a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
2400253e:	60eb      	str	r3, [r5, #12]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
24002540:	4628      	mov	r0, r5
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
24002542:	616b      	str	r3, [r5, #20]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
24002544:	60a9      	str	r1, [r5, #8]
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
24002546:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
2400254a:	61ab      	str	r3, [r5, #24]
    hdma_i2c1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
2400254c:	62eb      	str	r3, [r5, #44]	; 0x2c
    hdma_i2c1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
2400254e:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24002550:	2301      	movs	r3, #1
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24002552:	622a      	str	r2, [r5, #32]
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24002554:	2204      	movs	r2, #4
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
24002556:	63e6      	str	r6, [r4, #60]	; 0x3c
24002558:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
2400255a:	61e9      	str	r1, [r5, #28]
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
2400255c:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
24002560:	f002 fde0 	bl	24005124 <HAL_DMA_Init>
24002564:	2800      	cmp	r0, #0
24002566:	d16d      	bne.n	24002644 <HAL_I2C_MspInit+0x1ec>
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
24002568:	2200      	movs	r2, #0
2400256a:	2101      	movs	r1, #1
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
2400256c:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
2400256e:	201f      	movs	r0, #31
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
24002570:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
24002572:	f002 fc45 	bl	24004e00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
24002576:	201f      	movs	r0, #31
24002578:	f002 fc80 	bl	24004e7c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 1, 0);
2400257c:	2200      	movs	r2, #0
2400257e:	2101      	movs	r1, #1
24002580:	2020      	movs	r0, #32
24002582:	f002 fc3d 	bl	24004e00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
24002586:	2020      	movs	r0, #32
24002588:	f002 fc78 	bl	24004e7c <HAL_NVIC_EnableIRQ>
}
2400258c:	b03d      	add	sp, #244	; 0xf4
2400258e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
24002590:	2208      	movs	r2, #8
24002592:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24002594:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
24002596:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400259a:	f006 fa05 	bl	240089a8 <HAL_RCCEx_PeriphCLKConfig>
2400259e:	2800      	cmp	r0, #0
240025a0:	d159      	bne.n	24002656 <HAL_I2C_MspInit+0x1fe>
    __HAL_RCC_GPIOH_CLK_ENABLE();
240025a2:	4c30      	ldr	r4, [pc, #192]	; (24002664 <HAL_I2C_MspInit+0x20c>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
240025a4:	2010      	movs	r0, #16
240025a6:	2112      	movs	r1, #18
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
240025a8:	2504      	movs	r5, #4
    __HAL_RCC_GPIOH_CLK_ENABLE();
240025aa:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
240025ae:	2600      	movs	r6, #0
240025b0:	2703      	movs	r7, #3
    __HAL_RCC_GPIOH_CLK_ENABLE();
240025b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
240025b6:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
240025ba:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
240025be:	f003 0380 	and.w	r3, r3, #128	; 0x80
240025c2:	9303      	str	r3, [sp, #12]
240025c4:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
240025c6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
240025ca:	f043 0302 	orr.w	r3, r3, #2
240025ce:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
240025d2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
240025d6:	950a      	str	r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
240025d8:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_4;
240025dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
240025e0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
240025e2:	a906      	add	r1, sp, #24
240025e4:	4825      	ldr	r0, [pc, #148]	; (2400267c <HAL_I2C_MspInit+0x224>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
240025e6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
240025e8:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
240025ec:	f004 fab0 	bl	24006b50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
240025f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
240025f4:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240025f6:	a906      	add	r1, sp, #24
240025f8:	481c      	ldr	r0, [pc, #112]	; (2400266c <HAL_I2C_MspInit+0x214>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
240025fa:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_11;
240025fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
24002600:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24002604:	f004 faa4 	bl	24006b50 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
24002608:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
2400260c:	2200      	movs	r2, #0
2400260e:	2101      	movs	r1, #1
    __HAL_RCC_I2C2_CLK_ENABLE();
24002610:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
24002614:	2021      	movs	r0, #33	; 0x21
    __HAL_RCC_I2C2_CLK_ENABLE();
24002616:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
2400261a:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
2400261e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
24002622:	9305      	str	r3, [sp, #20]
24002624:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
24002626:	f002 fbeb 	bl	24004e00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
2400262a:	2021      	movs	r0, #33	; 0x21
2400262c:	f002 fc26 	bl	24004e7c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 1, 0);
24002630:	2200      	movs	r2, #0
24002632:	2101      	movs	r1, #1
24002634:	2022      	movs	r0, #34	; 0x22
24002636:	f002 fbe3 	bl	24004e00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
2400263a:	2022      	movs	r0, #34	; 0x22
2400263c:	f002 fc1e 	bl	24004e7c <HAL_NVIC_EnableIRQ>
}
24002640:	b03d      	add	sp, #244	; 0xf4
24002642:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
24002644:	f001 fe9a 	bl	2400437c <Error_Handler>
24002648:	e78e      	b.n	24002568 <HAL_I2C_MspInit+0x110>
      Error_Handler();
2400264a:	f001 fe97 	bl	2400437c <Error_Handler>
2400264e:	e76a      	b.n	24002526 <HAL_I2C_MspInit+0xce>
      Error_Handler();
24002650:	f001 fe94 	bl	2400437c <Error_Handler>
24002654:	e721      	b.n	2400249a <HAL_I2C_MspInit+0x42>
      Error_Handler();
24002656:	f001 fe91 	bl	2400437c <Error_Handler>
2400265a:	e7a2      	b.n	240025a2 <HAL_I2C_MspInit+0x14a>
2400265c:	40005400 	.word	0x40005400
24002660:	40005800 	.word	0x40005800
24002664:	58024400 	.word	0x58024400
24002668:	20014ad4 	.word	0x20014ad4
2400266c:	58020400 	.word	0x58020400
24002670:	40020058 	.word	0x40020058
24002674:	20014b4c 	.word	0x20014b4c
24002678:	40020070 	.word	0x40020070
2400267c:	58021c00 	.word	0x58021c00

24002680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
24002680:	b530      	push	{r4, r5, lr}
24002682:	b0a1      	sub	sp, #132	; 0x84
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
24002684:	224c      	movs	r2, #76	; 0x4c
24002686:	2100      	movs	r1, #0
24002688:	a80c      	add	r0, sp, #48	; 0x30
2400268a:	f015 f9d9 	bl	24017a40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
2400268e:	2220      	movs	r2, #32
24002690:	2100      	movs	r1, #0
24002692:	a804      	add	r0, sp, #16
24002694:	f015 f9d4 	bl	24017a40 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
24002698:	2002      	movs	r0, #2
2400269a:	f005 fa97 	bl	24007bcc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
2400269e:	4b35      	ldr	r3, [pc, #212]	; (24002774 <SystemClock_Config+0xf4>)
240026a0:	2100      	movs	r1, #0
240026a2:	4a35      	ldr	r2, [pc, #212]	; (24002778 <SystemClock_Config+0xf8>)
240026a4:	9101      	str	r1, [sp, #4]
240026a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
240026a8:	f021 0101 	bic.w	r1, r1, #1
240026ac:	62d9      	str	r1, [r3, #44]	; 0x2c
240026ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240026b0:	f003 0301 	and.w	r3, r3, #1
240026b4:	9301      	str	r3, [sp, #4]
240026b6:	6993      	ldr	r3, [r2, #24]
240026b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
240026bc:	6193      	str	r3, [r2, #24]
240026be:	6993      	ldr	r3, [r2, #24]
240026c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
240026c4:	9301      	str	r3, [sp, #4]
240026c6:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
240026c8:	6993      	ldr	r3, [r2, #24]
240026ca:	0499      	lsls	r1, r3, #18
240026cc:	d5fc      	bpl.n	240026c8 <SystemClock_Config+0x48>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
240026ce:	4b2b      	ldr	r3, [pc, #172]	; (2400277c <SystemClock_Config+0xfc>)
240026d0:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
240026d4:	f041 0102 	orr.w	r1, r1, #2
240026d8:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
240026dc:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
240026de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
240026e2:	f003 0302 	and.w	r3, r3, #2
240026e6:	9302      	str	r3, [sp, #8]
240026e8:	9b02      	ldr	r3, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
240026ea:	9103      	str	r1, [sp, #12]
240026ec:	6991      	ldr	r1, [r2, #24]
240026ee:	4b21      	ldr	r3, [pc, #132]	; (24002774 <SystemClock_Config+0xf4>)
240026f0:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
240026f4:	6191      	str	r1, [r2, #24]
240026f6:	6992      	ldr	r2, [r2, #24]
240026f8:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
240026fc:	9203      	str	r2, [sp, #12]
240026fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
24002700:	4a1d      	ldr	r2, [pc, #116]	; (24002778 <SystemClock_Config+0xf8>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
24002702:	f041 0101 	orr.w	r1, r1, #1
24002706:	62d9      	str	r1, [r3, #44]	; 0x2c
24002708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400270a:	f003 0301 	and.w	r3, r3, #1
2400270e:	9303      	str	r3, [sp, #12]
24002710:	9b03      	ldr	r3, [sp, #12]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
24002712:	6993      	ldr	r3, [r2, #24]
24002714:	049b      	lsls	r3, r3, #18
24002716:	d5fc      	bpl.n	24002712 <SystemClock_Config+0x92>
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
24002718:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
2400271a:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 60;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 6;
  RCC_OscInitStruct.PLL.PLLR = 8;
2400271c:	2508      	movs	r5, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
2400271e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLP = 2;
24002722:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
24002724:	2021      	movs	r0, #33	; 0x21
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
24002726:	2400      	movs	r4, #0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
24002728:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
2400272a:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 60;
2400272c:	223c      	movs	r2, #60	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
2400272e:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 6;
24002732:	2306      	movs	r3, #6
  RCC_OscInitStruct.PLL.PLLN = 60;
24002734:	9218      	str	r2, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 6;
24002736:	e9cd 351a 	strd	r3, r5, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
2400273a:	230c      	movs	r3, #12
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
2400273c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
24002740:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
24002742:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
24002744:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
24002748:	f005 faea 	bl	24007d20 <HAL_RCC_OscConfig>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
2400274c:	213f      	movs	r1, #63	; 0x3f
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
2400274e:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
24002750:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
24002754:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
24002756:	2103      	movs	r1, #3
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
24002758:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
2400275a:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
2400275c:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
2400275e:	2104      	movs	r1, #4
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
24002760:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
24002762:	e9cd 5307 	strd	r5, r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
24002766:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
2400276a:	f005 fe6d 	bl	24008448 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
2400276e:	b021      	add	sp, #132	; 0x84
24002770:	bd30      	pop	{r4, r5, pc}
24002772:	bf00      	nop
24002774:	58000400 	.word	0x58000400
24002778:	58024800 	.word	0x58024800
2400277c:	58024400 	.word	0x58024400

24002780 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
24002780:	b510      	push	{r4, lr}
24002782:	b0b0      	sub	sp, #192	; 0xc0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24002784:	22a0      	movs	r2, #160	; 0xa0
24002786:	2100      	movs	r1, #0
  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_SAI1;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
  PeriphClkInitStruct.PLL2.PLL2N = 37;
24002788:	2425      	movs	r4, #37	; 0x25
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
2400278a:	a808      	add	r0, sp, #32
2400278c:	f015 f958 	bl	24017a40 <memset>
  PeriphClkInitStruct.PLL2.PLL2M = 1;
24002790:	2101      	movs	r1, #1
  PeriphClkInitStruct.PLL2.PLL2P = 8;
24002792:	2208      	movs	r2, #8
  PeriphClkInitStruct.PLL2.PLL2R = 3;
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
  PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
  PeriphClkInitStruct.PLL3.PLL3N = 12;
24002794:	200c      	movs	r0, #12
  PeriphClkInitStruct.PLL2.PLL2M = 1;
24002796:	9102      	str	r1, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
24002798:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL3.PLL3M = 1;
2400279a:	910a      	str	r1, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3P = 4;
2400279c:	2104      	movs	r1, #4
  PeriphClkInitStruct.PLL2.PLL2N = 37;
2400279e:	9403      	str	r4, [sp, #12]
  PeriphClkInitStruct.PLL3.PLL3Q = 8;
  PeriphClkInitStruct.PLL3.PLL3R = 16;
240027a0:	2410      	movs	r4, #16
  PeriphClkInitStruct.PLL3.PLL3N = 12;
240027a2:	900b      	str	r0, [sp, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
240027a4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
240027a8:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
240027aa:	9204      	str	r2, [sp, #16]
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2360;
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
240027ac:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
240027ae:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 240027e8 <PeriphCommonClock_Config+0x68>
  PeriphClkInitStruct.PLL3.PLL3Q = 8;
240027b2:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2360;
240027b6:	f640 1138 	movw	r1, #2360	; 0x938
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
240027ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
240027be:	ed8d 7b00 	vstr	d7, [sp]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
240027c2:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 240027f0 <PeriphCommonClock_Config+0x70>
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
240027c6:	e9cd 1311 	strd	r1, r3, [sp, #68]	; 0x44
  PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
240027ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
240027ce:	9214      	str	r2, [sp, #80]	; 0x50
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
240027d0:	e9cd 400e 	strd	r4, r0, [sp, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240027d4:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
240027d6:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLL2.PLL2R = 3;
240027d8:	ed8d 7b06 	vstr	d7, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240027dc:	f006 f8e4 	bl	240089a8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
240027e0:	b030      	add	sp, #192	; 0xc0
240027e2:	bd10      	pop	{r4, pc}
240027e4:	f3af 8000 	nop.w
240027e8:	01010100 	.word	0x01010100
240027ec:	00000000 	.word	0x00000000
240027f0:	00000003 	.word	0x00000003
240027f4:	000000c0 	.word	0x000000c0

240027f8 <BSP_SD_IsDetected>:
}



uint8_t BSP_SD_IsDetected(void)
{
240027f8:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
240027fa:	2301      	movs	r3, #1
240027fc:	f88d 3007 	strb.w	r3, [sp, #7]
  //if (BSP_PlatformIsDetected() == 0x0)
  //{
  //  status = SD_NOT_PRESENT;
  //}

  return status;
24002800:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
24002804:	b002      	add	sp, #8
24002806:	4770      	bx	lr

24002808 <getPresetNamesFromSDCard>:

void getPresetNamesFromSDCard(void)
{
24002808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint8_t status = SD_PRESENT;
2400280c:	2301      	movs	r3, #1
{
2400280e:	b089      	sub	sp, #36	; 0x24
  __IO uint8_t status = SD_PRESENT;
24002810:	f88d 3003 	strb.w	r3, [sp, #3]
  return status;
24002814:	f89d 3003 	ldrb.w	r3, [sp, #3]
	if(BSP_SD_IsDetected())
24002818:	b93b      	cbnz	r3, 2400282a <getPresetNamesFromSDCard+0x22>
2400281a:	f8df a078 	ldr.w	sl, [pc, #120]	; 24002894 <getPresetNamesFromSDCard+0x8c>
			}

		}

	}
	diskBusy = 0;
2400281e:	2300      	movs	r3, #0
24002820:	f88a 3000 	strb.w	r3, [sl]
	return;
}
24002824:	b009      	add	sp, #36	; 0x24
24002826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2400282a:	4b14      	ldr	r3, [pc, #80]	; (2400287c <getPresetNamesFromSDCard+0x74>)
2400282c:	075a      	lsls	r2, r3, #29
2400282e:	f040 82ed 	bne.w	24002e0c <getPresetNamesFromSDCard+0x604>
			audioOutBuffer[i] = 0;
24002832:	2000      	movs	r0, #0
24002834:	2100      	movs	r1, #0
24002836:	f503 6280 	add.w	r2, r3, #1024	; 0x400
2400283a:	e8e3 0102 	strd	r0, r1, [r3], #8
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
2400283e:	429a      	cmp	r2, r3
24002840:	d1fb      	bne.n	2400283a <getPresetNamesFromSDCard+0x32>
		loadFailed = 0;
24002842:	2400      	movs	r4, #0
24002844:	4b0e      	ldr	r3, [pc, #56]	; (24002880 <getPresetNamesFromSDCard+0x78>)
		diskBusy = 1;
24002846:	2501      	movs	r5, #1
24002848:	f8df a048 	ldr.w	sl, [pc, #72]	; 24002894 <getPresetNamesFromSDCard+0x8c>
		disk_initialize(0);
2400284c:	4620      	mov	r0, r4
		loadFailed = 0;
2400284e:	701c      	strb	r4, [r3, #0]
		diskBusy = 1;
24002850:	f88a 5000 	strb.w	r5, [sl]
		disk_initialize(0);
24002854:	f00a ff38 	bl	2400d6c8 <disk_initialize>
	    disk_status(0);
24002858:	4620      	mov	r0, r4
2400285a:	f00a ff2b 	bl	2400d6b4 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
2400285e:	462a      	mov	r2, r5
24002860:	4908      	ldr	r1, [pc, #32]	; (24002884 <getPresetNamesFromSDCard+0x7c>)
24002862:	4809      	ldr	r0, [pc, #36]	; (24002888 <getPresetNamesFromSDCard+0x80>)
24002864:	f00d f904 	bl	2400fa70 <f_mount>
24002868:	2800      	cmp	r0, #0
2400286a:	d1d8      	bne.n	2400281e <getPresetNamesFromSDCard+0x16>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
2400286c:	4605      	mov	r5, r0
2400286e:	4e07      	ldr	r6, [pc, #28]	; (2400288c <getPresetNamesFromSDCard+0x84>)
				res = f_findfirst(&dir, &fno, SDPath, finalString);
24002870:	f8df 9010 	ldr.w	r9, [pc, #16]	; 24002884 <getPresetNamesFromSDCard+0x7c>
24002874:	f8df 8020 	ldr.w	r8, [pc, #32]	; 24002898 <getPresetNamesFromSDCard+0x90>
24002878:	4f05      	ldr	r7, [pc, #20]	; (24002890 <getPresetNamesFromSDCard+0x88>)
2400287a:	e027      	b.n	240028cc <getPresetNamesFromSDCard+0xc4>
2400287c:	30000000 	.word	0x30000000
24002880:	20018e74 	.word	0x20018e74
24002884:	2001daf0 	.word	0x2001daf0
24002888:	2001d690 	.word	0x2001d690
2400288c:	24019fc4 	.word	0x24019fc4
24002890:	20014c88 	.word	0x20014c88
24002894:	20014cc0 	.word	0x20014cc0
24002898:	20016d28 	.word	0x20016d28
					strcat(charBuf, "*.ebp");
2400289c:	aa02      	add	r2, sp, #8
2400289e:	6830      	ldr	r0, [r6, #0]
240028a0:	88b1      	ldrh	r1, [r6, #4]
240028a2:	f10d 0c08 	add.w	ip, sp, #8
240028a6:	18d4      	adds	r4, r2, r3
					strcpy(finalString, charBuf);
240028a8:	1d9a      	adds	r2, r3, #6
					strcat(charBuf, "*.ebp");
240028aa:	f84c 0003 	str.w	r0, [ip, r3]
					strcpy(finalString, charBuf);
240028ae:	a805      	add	r0, sp, #20
					strcat(charBuf, "*.ebp");
240028b0:	80a1      	strh	r1, [r4, #4]
					strcpy(finalString, charBuf);
240028b2:	4661      	mov	r1, ip
240028b4:	f015 f8f6 	bl	24017aa4 <memcpy>
				res = f_findfirst(&dir, &fno, SDPath, finalString);
240028b8:	ab05      	add	r3, sp, #20
240028ba:	464a      	mov	r2, r9
240028bc:	4641      	mov	r1, r8
240028be:	4638      	mov	r0, r7
240028c0:	f00d fdee 	bl	240104a0 <f_findfirst>
				if(res == FR_OK)
240028c4:	b358      	cbz	r0, 2400291e <getPresetNamesFromSDCard+0x116>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
240028c6:	3501      	adds	r5, #1
240028c8:	2d40      	cmp	r5, #64	; 0x40
240028ca:	d0a8      	beq.n	2400281e <getPresetNamesFromSDCard+0x16>
				itoa(i, charBuf, 10);
240028cc:	220a      	movs	r2, #10
240028ce:	a902      	add	r1, sp, #8
240028d0:	4628      	mov	r0, r5
240028d2:	f015 f871 	bl	240179b8 <itoa>
				int len = ((strlen(charBuf)));
240028d6:	a802      	add	r0, sp, #8
240028d8:	f7fd fcfe 	bl	240002d8 <strlen>
				if (len == 1)
240028dc:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
240028de:	4603      	mov	r3, r0
				if (len == 1)
240028e0:	d1dc      	bne.n	2400289c <getPresetNamesFromSDCard+0x94>
					finalString[2] = charBuf[1];
240028e2:	f89d 1009 	ldrb.w	r1, [sp, #9]
					finalString[0] = '0';
240028e6:	2330      	movs	r3, #48	; 0x30
					finalString[1] = charBuf[0];
240028e8:	f89d 2008 	ldrb.w	r2, [sp, #8]
					strcat(finalString, "*.ebp");
240028ec:	a805      	add	r0, sp, #20
					finalString[2] = charBuf[1];
240028ee:	f88d 1016 	strb.w	r1, [sp, #22]
					strcat(finalString, "*.ebp");
240028f2:	ac05      	add	r4, sp, #20
					finalString[1] = charBuf[0];
240028f4:	f88d 2015 	strb.w	r2, [sp, #21]
					finalString[0] = '0';
240028f8:	f88d 3014 	strb.w	r3, [sp, #20]
					strcat(finalString, "*.ebp");
240028fc:	f7fd fcec 	bl	240002d8 <strlen>
24002900:	a905      	add	r1, sp, #20
24002902:	4603      	mov	r3, r0
24002904:	88b2      	ldrh	r2, [r6, #4]
24002906:	4419      	add	r1, r3
24002908:	6830      	ldr	r0, [r6, #0]
2400290a:	50e0      	str	r0, [r4, r3]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
2400290c:	ab05      	add	r3, sp, #20
					strcat(finalString, "*.ebp");
2400290e:	808a      	strh	r2, [r1, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
24002910:	4638      	mov	r0, r7
24002912:	464a      	mov	r2, r9
24002914:	4641      	mov	r1, r8
24002916:	f00d fdc3 	bl	240104a0 <f_findfirst>
				if(res == FR_OK)
2400291a:	2800      	cmp	r0, #0
2400291c:	d1d3      	bne.n	240028c6 <getPresetNamesFromSDCard+0xbe>
					if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
2400291e:	f8df b354 	ldr.w	fp, [pc, #852]	; 24002c74 <getPresetNamesFromSDCard+0x46c>
24002922:	2211      	movs	r2, #17
24002924:	49d0      	ldr	r1, [pc, #832]	; (24002c68 <getPresetNamesFromSDCard+0x460>)
24002926:	4658      	mov	r0, fp
24002928:	f00d f8ee 	bl	2400fb08 <f_open>
2400292c:	2800      	cmp	r0, #0
2400292e:	d1ca      	bne.n	240028c6 <getPresetNamesFromSDCard+0xbe>
						f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
24002930:	4cce      	ldr	r4, [pc, #824]	; (24002c6c <getPresetNamesFromSDCard+0x464>)
24002932:	ab01      	add	r3, sp, #4
24002934:	f8db 200c 	ldr.w	r2, [fp, #12]
24002938:	4658      	mov	r0, fp
2400293a:	4621      	mov	r1, r4
2400293c:	f00d fa46 	bl	2400fdcc <f_read>
						f_close(&SDFile);
24002940:	4658      	mov	r0, fp
24002942:	f00d fcad 	bl	240102a0 <f_close>
						if (buffer[bufferIndex] == 17)
24002946:	7820      	ldrb	r0, [r4, #0]
							presetNamesArray[i][j] = buffer[bufferIndex];
24002948:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
2400294c:	49c8      	ldr	r1, [pc, #800]	; (24002c70 <getPresetNamesFromSDCard+0x468>)
						if (buffer[bufferIndex] == 17)
2400294e:	f1a0 0011 	sub.w	r0, r0, #17
								macroNamesArray[i][j][k] = buffer[bufferIndex];
24002952:	f8df c324 	ldr.w	ip, [pc, #804]	; 24002c78 <getPresetNamesFromSDCard+0x470>
						if (buffer[bufferIndex] == 17)
24002956:	fab0 f080 	clz	r0, r0
2400295a:	0940      	lsrs	r0, r0, #5
2400295c:	0083      	lsls	r3, r0, #2
							presetNamesArray[i][j] = buffer[bufferIndex];
2400295e:	f814 0020 	ldrb.w	r0, [r4, r0, lsl #2]
24002962:	f801 0012 	strb.w	r0, [r1, r2, lsl #1]
24002966:	1c58      	adds	r0, r3, #1
24002968:	eb01 0142 	add.w	r1, r1, r2, lsl #1
2400296c:	5c20      	ldrb	r0, [r4, r0]
								macroNamesArray[i][j][k] = buffer[bufferIndex];
2400296e:	ebc5 1205 	rsb	r2, r5, r5, lsl #4
							presetNamesArray[i][j] = buffer[bufferIndex];
24002972:	7048      	strb	r0, [r1, #1]
24002974:	1c98      	adds	r0, r3, #2
24002976:	5c20      	ldrb	r0, [r4, r0]
24002978:	7088      	strb	r0, [r1, #2]
2400297a:	1cd8      	adds	r0, r3, #3
2400297c:	5c20      	ldrb	r0, [r4, r0]
2400297e:	70c8      	strb	r0, [r1, #3]
24002980:	1d18      	adds	r0, r3, #4
24002982:	5c20      	ldrb	r0, [r4, r0]
24002984:	7108      	strb	r0, [r1, #4]
24002986:	1d58      	adds	r0, r3, #5
24002988:	5c20      	ldrb	r0, [r4, r0]
2400298a:	7148      	strb	r0, [r1, #5]
2400298c:	1d98      	adds	r0, r3, #6
2400298e:	5c20      	ldrb	r0, [r4, r0]
24002990:	7188      	strb	r0, [r1, #6]
24002992:	1dd8      	adds	r0, r3, #7
24002994:	5c20      	ldrb	r0, [r4, r0]
24002996:	71c8      	strb	r0, [r1, #7]
24002998:	f103 0008 	add.w	r0, r3, #8
2400299c:	5c20      	ldrb	r0, [r4, r0]
2400299e:	7208      	strb	r0, [r1, #8]
240029a0:	f103 0009 	add.w	r0, r3, #9
240029a4:	5c20      	ldrb	r0, [r4, r0]
240029a6:	7248      	strb	r0, [r1, #9]
240029a8:	f103 000a 	add.w	r0, r3, #10
240029ac:	5c20      	ldrb	r0, [r4, r0]
240029ae:	7288      	strb	r0, [r1, #10]
240029b0:	f103 000b 	add.w	r0, r3, #11
240029b4:	5c20      	ldrb	r0, [r4, r0]
240029b6:	72c8      	strb	r0, [r1, #11]
240029b8:	f103 000c 	add.w	r0, r3, #12
240029bc:	5c20      	ldrb	r0, [r4, r0]
240029be:	7308      	strb	r0, [r1, #12]
240029c0:	f103 000d 	add.w	r0, r3, #13
240029c4:	5c20      	ldrb	r0, [r4, r0]
240029c6:	7348      	strb	r0, [r1, #13]
								macroNamesArray[i][j][k] = buffer[bufferIndex];
240029c8:	f103 010e 	add.w	r1, r3, #14
240029cc:	5c61      	ldrb	r1, [r4, r1]
240029ce:	f80c 1032 	strb.w	r1, [ip, r2, lsl #3]
240029d2:	f103 010f 	add.w	r1, r3, #15
240029d6:	eb0c 02c2 	add.w	r2, ip, r2, lsl #3
240029da:	5c61      	ldrb	r1, [r4, r1]
240029dc:	7051      	strb	r1, [r2, #1]
240029de:	f103 0110 	add.w	r1, r3, #16
240029e2:	5c61      	ldrb	r1, [r4, r1]
240029e4:	7091      	strb	r1, [r2, #2]
240029e6:	f103 0111 	add.w	r1, r3, #17
240029ea:	5c61      	ldrb	r1, [r4, r1]
240029ec:	70d1      	strb	r1, [r2, #3]
240029ee:	f103 0112 	add.w	r1, r3, #18
240029f2:	5c61      	ldrb	r1, [r4, r1]
240029f4:	7111      	strb	r1, [r2, #4]
240029f6:	f103 0113 	add.w	r1, r3, #19
240029fa:	5c61      	ldrb	r1, [r4, r1]
240029fc:	7151      	strb	r1, [r2, #5]
240029fe:	f103 0114 	add.w	r1, r3, #20
24002a02:	5c61      	ldrb	r1, [r4, r1]
24002a04:	7191      	strb	r1, [r2, #6]
24002a06:	f103 0115 	add.w	r1, r3, #21
24002a0a:	5c61      	ldrb	r1, [r4, r1]
24002a0c:	71d1      	strb	r1, [r2, #7]
24002a0e:	f103 0116 	add.w	r1, r3, #22
24002a12:	5c61      	ldrb	r1, [r4, r1]
24002a14:	7211      	strb	r1, [r2, #8]
24002a16:	f103 0117 	add.w	r1, r3, #23
24002a1a:	5c61      	ldrb	r1, [r4, r1]
24002a1c:	7291      	strb	r1, [r2, #10]
24002a1e:	f103 0118 	add.w	r1, r3, #24
24002a22:	5c61      	ldrb	r1, [r4, r1]
24002a24:	72d1      	strb	r1, [r2, #11]
24002a26:	f103 0119 	add.w	r1, r3, #25
24002a2a:	5c61      	ldrb	r1, [r4, r1]
24002a2c:	7311      	strb	r1, [r2, #12]
24002a2e:	f103 011a 	add.w	r1, r3, #26
24002a32:	5c61      	ldrb	r1, [r4, r1]
24002a34:	7351      	strb	r1, [r2, #13]
24002a36:	f103 011b 	add.w	r1, r3, #27
24002a3a:	5c61      	ldrb	r1, [r4, r1]
24002a3c:	7391      	strb	r1, [r2, #14]
24002a3e:	f103 011c 	add.w	r1, r3, #28
24002a42:	5c61      	ldrb	r1, [r4, r1]
24002a44:	73d1      	strb	r1, [r2, #15]
24002a46:	f103 011d 	add.w	r1, r3, #29
24002a4a:	5c61      	ldrb	r1, [r4, r1]
24002a4c:	7411      	strb	r1, [r2, #16]
24002a4e:	f103 011e 	add.w	r1, r3, #30
24002a52:	5c61      	ldrb	r1, [r4, r1]
24002a54:	7451      	strb	r1, [r2, #17]
24002a56:	f103 011f 	add.w	r1, r3, #31
24002a5a:	5c61      	ldrb	r1, [r4, r1]
24002a5c:	7491      	strb	r1, [r2, #18]
24002a5e:	f103 0120 	add.w	r1, r3, #32
24002a62:	5c61      	ldrb	r1, [r4, r1]
24002a64:	7511      	strb	r1, [r2, #20]
24002a66:	f103 0121 	add.w	r1, r3, #33	; 0x21
24002a6a:	5c61      	ldrb	r1, [r4, r1]
24002a6c:	7551      	strb	r1, [r2, #21]
24002a6e:	f103 0122 	add.w	r1, r3, #34	; 0x22
24002a72:	5c61      	ldrb	r1, [r4, r1]
24002a74:	7591      	strb	r1, [r2, #22]
24002a76:	f103 0123 	add.w	r1, r3, #35	; 0x23
24002a7a:	5c61      	ldrb	r1, [r4, r1]
24002a7c:	75d1      	strb	r1, [r2, #23]
24002a7e:	f103 0124 	add.w	r1, r3, #36	; 0x24
24002a82:	5c61      	ldrb	r1, [r4, r1]
24002a84:	7611      	strb	r1, [r2, #24]
24002a86:	f103 0125 	add.w	r1, r3, #37	; 0x25
24002a8a:	5c61      	ldrb	r1, [r4, r1]
24002a8c:	7651      	strb	r1, [r2, #25]
24002a8e:	f103 0126 	add.w	r1, r3, #38	; 0x26
24002a92:	5c61      	ldrb	r1, [r4, r1]
24002a94:	7691      	strb	r1, [r2, #26]
24002a96:	f103 0127 	add.w	r1, r3, #39	; 0x27
24002a9a:	5c61      	ldrb	r1, [r4, r1]
24002a9c:	76d1      	strb	r1, [r2, #27]
24002a9e:	f103 0128 	add.w	r1, r3, #40	; 0x28
24002aa2:	5c61      	ldrb	r1, [r4, r1]
24002aa4:	7711      	strb	r1, [r2, #28]
24002aa6:	f103 0129 	add.w	r1, r3, #41	; 0x29
24002aaa:	5c61      	ldrb	r1, [r4, r1]
24002aac:	7791      	strb	r1, [r2, #30]
24002aae:	f103 012a 	add.w	r1, r3, #42	; 0x2a
24002ab2:	5c61      	ldrb	r1, [r4, r1]
24002ab4:	77d1      	strb	r1, [r2, #31]
24002ab6:	f103 012b 	add.w	r1, r3, #43	; 0x2b
24002aba:	5c61      	ldrb	r1, [r4, r1]
24002abc:	f882 1020 	strb.w	r1, [r2, #32]
24002ac0:	f103 012c 	add.w	r1, r3, #44	; 0x2c
24002ac4:	5c61      	ldrb	r1, [r4, r1]
24002ac6:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
24002aca:	f103 012d 	add.w	r1, r3, #45	; 0x2d
24002ace:	5c61      	ldrb	r1, [r4, r1]
24002ad0:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
24002ad4:	f103 012e 	add.w	r1, r3, #46	; 0x2e
24002ad8:	5c61      	ldrb	r1, [r4, r1]
24002ada:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
24002ade:	f103 012f 	add.w	r1, r3, #47	; 0x2f
24002ae2:	5c61      	ldrb	r1, [r4, r1]
24002ae4:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
24002ae8:	f103 0130 	add.w	r1, r3, #48	; 0x30
24002aec:	5c61      	ldrb	r1, [r4, r1]
24002aee:	f882 1025 	strb.w	r1, [r2, #37]	; 0x25
24002af2:	f103 0131 	add.w	r1, r3, #49	; 0x31
24002af6:	5c61      	ldrb	r1, [r4, r1]
24002af8:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
24002afc:	f103 0132 	add.w	r1, r3, #50	; 0x32
24002b00:	5c61      	ldrb	r1, [r4, r1]
24002b02:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
24002b06:	f103 0133 	add.w	r1, r3, #51	; 0x33
24002b0a:	5c61      	ldrb	r1, [r4, r1]
24002b0c:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
24002b10:	f103 0134 	add.w	r1, r3, #52	; 0x34
24002b14:	5c61      	ldrb	r1, [r4, r1]
24002b16:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
24002b1a:	f103 0135 	add.w	r1, r3, #53	; 0x35
24002b1e:	5c61      	ldrb	r1, [r4, r1]
24002b20:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
24002b24:	f103 0136 	add.w	r1, r3, #54	; 0x36
24002b28:	5c61      	ldrb	r1, [r4, r1]
24002b2a:	f882 102c 	strb.w	r1, [r2, #44]	; 0x2c
24002b2e:	f103 0137 	add.w	r1, r3, #55	; 0x37
24002b32:	5c61      	ldrb	r1, [r4, r1]
24002b34:	f882 102d 	strb.w	r1, [r2, #45]	; 0x2d
24002b38:	f103 0138 	add.w	r1, r3, #56	; 0x38
24002b3c:	5c61      	ldrb	r1, [r4, r1]
24002b3e:	f882 102e 	strb.w	r1, [r2, #46]	; 0x2e
24002b42:	f103 0139 	add.w	r1, r3, #57	; 0x39
24002b46:	5c61      	ldrb	r1, [r4, r1]
24002b48:	f882 102f 	strb.w	r1, [r2, #47]	; 0x2f
24002b4c:	f103 013a 	add.w	r1, r3, #58	; 0x3a
24002b50:	5c61      	ldrb	r1, [r4, r1]
24002b52:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
24002b56:	f103 013b 	add.w	r1, r3, #59	; 0x3b
24002b5a:	5c61      	ldrb	r1, [r4, r1]
24002b5c:	f882 1032 	strb.w	r1, [r2, #50]	; 0x32
24002b60:	f103 013c 	add.w	r1, r3, #60	; 0x3c
24002b64:	5c61      	ldrb	r1, [r4, r1]
24002b66:	f882 1033 	strb.w	r1, [r2, #51]	; 0x33
24002b6a:	f103 013d 	add.w	r1, r3, #61	; 0x3d
24002b6e:	5c61      	ldrb	r1, [r4, r1]
24002b70:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
24002b74:	f103 013e 	add.w	r1, r3, #62	; 0x3e
24002b78:	5c61      	ldrb	r1, [r4, r1]
24002b7a:	f882 1035 	strb.w	r1, [r2, #53]	; 0x35
24002b7e:	f103 013f 	add.w	r1, r3, #63	; 0x3f
24002b82:	5c61      	ldrb	r1, [r4, r1]
24002b84:	f882 1036 	strb.w	r1, [r2, #54]	; 0x36
24002b88:	f103 0140 	add.w	r1, r3, #64	; 0x40
24002b8c:	5c61      	ldrb	r1, [r4, r1]
24002b8e:	f882 1037 	strb.w	r1, [r2, #55]	; 0x37
24002b92:	f103 0141 	add.w	r1, r3, #65	; 0x41
24002b96:	5c61      	ldrb	r1, [r4, r1]
24002b98:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
24002b9c:	f103 0142 	add.w	r1, r3, #66	; 0x42
24002ba0:	5c61      	ldrb	r1, [r4, r1]
24002ba2:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39
24002ba6:	f103 0143 	add.w	r1, r3, #67	; 0x43
24002baa:	5c61      	ldrb	r1, [r4, r1]
24002bac:	f882 103a 	strb.w	r1, [r2, #58]	; 0x3a
24002bb0:	f103 0144 	add.w	r1, r3, #68	; 0x44
24002bb4:	5c61      	ldrb	r1, [r4, r1]
24002bb6:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
24002bba:	f103 0145 	add.w	r1, r3, #69	; 0x45
24002bbe:	5c61      	ldrb	r1, [r4, r1]
24002bc0:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
24002bc4:	f103 0146 	add.w	r1, r3, #70	; 0x46
24002bc8:	5c61      	ldrb	r1, [r4, r1]
24002bca:	f882 103e 	strb.w	r1, [r2, #62]	; 0x3e
24002bce:	f103 0147 	add.w	r1, r3, #71	; 0x47
24002bd2:	5c61      	ldrb	r1, [r4, r1]
24002bd4:	f882 103f 	strb.w	r1, [r2, #63]	; 0x3f
24002bd8:	f103 0148 	add.w	r1, r3, #72	; 0x48
24002bdc:	5c61      	ldrb	r1, [r4, r1]
24002bde:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
24002be2:	f103 0149 	add.w	r1, r3, #73	; 0x49
24002be6:	5c61      	ldrb	r1, [r4, r1]
24002be8:	f882 1041 	strb.w	r1, [r2, #65]	; 0x41
24002bec:	f103 014a 	add.w	r1, r3, #74	; 0x4a
24002bf0:	5c61      	ldrb	r1, [r4, r1]
24002bf2:	f882 1042 	strb.w	r1, [r2, #66]	; 0x42
24002bf6:	f103 014b 	add.w	r1, r3, #75	; 0x4b
24002bfa:	5c61      	ldrb	r1, [r4, r1]
24002bfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
24002c00:	f103 014c 	add.w	r1, r3, #76	; 0x4c
24002c04:	5c61      	ldrb	r1, [r4, r1]
24002c06:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
24002c0a:	f103 014d 	add.w	r1, r3, #77	; 0x4d
24002c0e:	5c61      	ldrb	r1, [r4, r1]
24002c10:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
24002c14:	f103 014e 	add.w	r1, r3, #78	; 0x4e
24002c18:	5c61      	ldrb	r1, [r4, r1]
24002c1a:	f882 1047 	strb.w	r1, [r2, #71]	; 0x47
24002c1e:	f103 014f 	add.w	r1, r3, #79	; 0x4f
24002c22:	5c61      	ldrb	r1, [r4, r1]
24002c24:	f882 1048 	strb.w	r1, [r2, #72]	; 0x48
24002c28:	f103 0150 	add.w	r1, r3, #80	; 0x50
24002c2c:	5c61      	ldrb	r1, [r4, r1]
24002c2e:	f882 1049 	strb.w	r1, [r2, #73]	; 0x49
24002c32:	f103 0151 	add.w	r1, r3, #81	; 0x51
24002c36:	5c61      	ldrb	r1, [r4, r1]
24002c38:	f882 104a 	strb.w	r1, [r2, #74]	; 0x4a
24002c3c:	f103 0152 	add.w	r1, r3, #82	; 0x52
24002c40:	5c61      	ldrb	r1, [r4, r1]
24002c42:	f882 104b 	strb.w	r1, [r2, #75]	; 0x4b
24002c46:	f103 0153 	add.w	r1, r3, #83	; 0x53
24002c4a:	5c61      	ldrb	r1, [r4, r1]
24002c4c:	f882 104c 	strb.w	r1, [r2, #76]	; 0x4c
24002c50:	f103 0154 	add.w	r1, r3, #84	; 0x54
24002c54:	5c61      	ldrb	r1, [r4, r1]
24002c56:	f882 104d 	strb.w	r1, [r2, #77]	; 0x4d
24002c5a:	f103 0155 	add.w	r1, r3, #85	; 0x55
24002c5e:	5c61      	ldrb	r1, [r4, r1]
24002c60:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
24002c64:	e00a      	b.n	24002c7c <getPresetNamesFromSDCard+0x474>
24002c66:	bf00      	nop
24002c68:	20016d3e 	.word	0x20016d3e
24002c6c:	30042380 	.word	0x30042380
24002c70:	30042000 	.word	0x30042000
24002c74:	2001d8c4 	.word	0x2001d8c4
24002c78:	30043380 	.word	0x30043380
								macroNamesArray[i][j+8][k] = buffer[bufferIndex];
24002c7c:	f103 0156 	add.w	r1, r3, #86	; 0x56
24002c80:	5c61      	ldrb	r1, [r4, r1]
24002c82:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50
24002c86:	f103 0157 	add.w	r1, r3, #87	; 0x57
24002c8a:	5c61      	ldrb	r1, [r4, r1]
24002c8c:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
24002c90:	f103 0158 	add.w	r1, r3, #88	; 0x58
24002c94:	5c61      	ldrb	r1, [r4, r1]
24002c96:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
24002c9a:	f103 0159 	add.w	r1, r3, #89	; 0x59
24002c9e:	5c61      	ldrb	r1, [r4, r1]
24002ca0:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
24002ca4:	f103 015a 	add.w	r1, r3, #90	; 0x5a
24002ca8:	5c61      	ldrb	r1, [r4, r1]
24002caa:	f882 1054 	strb.w	r1, [r2, #84]	; 0x54
24002cae:	f103 015b 	add.w	r1, r3, #91	; 0x5b
24002cb2:	5c61      	ldrb	r1, [r4, r1]
24002cb4:	f882 1055 	strb.w	r1, [r2, #85]	; 0x55
24002cb8:	f103 015c 	add.w	r1, r3, #92	; 0x5c
24002cbc:	5c61      	ldrb	r1, [r4, r1]
24002cbe:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
24002cc2:	f103 015d 	add.w	r1, r3, #93	; 0x5d
24002cc6:	5c61      	ldrb	r1, [r4, r1]
24002cc8:	f882 1057 	strb.w	r1, [r2, #87]	; 0x57
24002ccc:	f103 015e 	add.w	r1, r3, #94	; 0x5e
24002cd0:	5c61      	ldrb	r1, [r4, r1]
24002cd2:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
24002cd6:	f103 015f 	add.w	r1, r3, #95	; 0x5f
24002cda:	5c61      	ldrb	r1, [r4, r1]
24002cdc:	f882 1059 	strb.w	r1, [r2, #89]	; 0x59
24002ce0:	f103 0160 	add.w	r1, r3, #96	; 0x60
24002ce4:	5c61      	ldrb	r1, [r4, r1]
24002ce6:	f882 105a 	strb.w	r1, [r2, #90]	; 0x5a
24002cea:	f103 0161 	add.w	r1, r3, #97	; 0x61
24002cee:	5c61      	ldrb	r1, [r4, r1]
24002cf0:	f882 105b 	strb.w	r1, [r2, #91]	; 0x5b
24002cf4:	f103 0162 	add.w	r1, r3, #98	; 0x62
24002cf8:	5c61      	ldrb	r1, [r4, r1]
24002cfa:	f882 105c 	strb.w	r1, [r2, #92]	; 0x5c
24002cfe:	f103 0163 	add.w	r1, r3, #99	; 0x63
24002d02:	5c61      	ldrb	r1, [r4, r1]
24002d04:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
24002d08:	f103 0164 	add.w	r1, r3, #100	; 0x64
24002d0c:	5c61      	ldrb	r1, [r4, r1]
24002d0e:	f882 105e 	strb.w	r1, [r2, #94]	; 0x5e
24002d12:	f103 0165 	add.w	r1, r3, #101	; 0x65
24002d16:	5c61      	ldrb	r1, [r4, r1]
24002d18:	f882 105f 	strb.w	r1, [r2, #95]	; 0x5f
24002d1c:	f103 0166 	add.w	r1, r3, #102	; 0x66
24002d20:	5c61      	ldrb	r1, [r4, r1]
24002d22:	f882 1060 	strb.w	r1, [r2, #96]	; 0x60
24002d26:	f103 0167 	add.w	r1, r3, #103	; 0x67
24002d2a:	5c61      	ldrb	r1, [r4, r1]
24002d2c:	f882 1061 	strb.w	r1, [r2, #97]	; 0x61
24002d30:	f103 0168 	add.w	r1, r3, #104	; 0x68
24002d34:	5c61      	ldrb	r1, [r4, r1]
24002d36:	f882 1062 	strb.w	r1, [r2, #98]	; 0x62
24002d3a:	f103 0169 	add.w	r1, r3, #105	; 0x69
24002d3e:	5c61      	ldrb	r1, [r4, r1]
24002d40:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
24002d44:	f103 016a 	add.w	r1, r3, #106	; 0x6a
24002d48:	5c61      	ldrb	r1, [r4, r1]
24002d4a:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
24002d4e:	f103 016b 	add.w	r1, r3, #107	; 0x6b
24002d52:	5c61      	ldrb	r1, [r4, r1]
24002d54:	f882 1065 	strb.w	r1, [r2, #101]	; 0x65
24002d58:	f103 016c 	add.w	r1, r3, #108	; 0x6c
24002d5c:	5c61      	ldrb	r1, [r4, r1]
24002d5e:	f882 1066 	strb.w	r1, [r2, #102]	; 0x66
24002d62:	f103 016d 	add.w	r1, r3, #109	; 0x6d
24002d66:	5c61      	ldrb	r1, [r4, r1]
24002d68:	f882 1067 	strb.w	r1, [r2, #103]	; 0x67
24002d6c:	f103 016e 	add.w	r1, r3, #110	; 0x6e
24002d70:	5c61      	ldrb	r1, [r4, r1]
24002d72:	f882 1068 	strb.w	r1, [r2, #104]	; 0x68
24002d76:	f103 016f 	add.w	r1, r3, #111	; 0x6f
24002d7a:	5c61      	ldrb	r1, [r4, r1]
24002d7c:	f882 1069 	strb.w	r1, [r2, #105]	; 0x69
24002d80:	f103 0170 	add.w	r1, r3, #112	; 0x70
24002d84:	5c61      	ldrb	r1, [r4, r1]
24002d86:	f882 106a 	strb.w	r1, [r2, #106]	; 0x6a
24002d8a:	f103 0171 	add.w	r1, r3, #113	; 0x71
24002d8e:	5c61      	ldrb	r1, [r4, r1]
24002d90:	f882 106b 	strb.w	r1, [r2, #107]	; 0x6b
24002d94:	f103 0172 	add.w	r1, r3, #114	; 0x72
24002d98:	5c61      	ldrb	r1, [r4, r1]
24002d9a:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
24002d9e:	f103 0173 	add.w	r1, r3, #115	; 0x73
24002da2:	5c61      	ldrb	r1, [r4, r1]
24002da4:	f882 106d 	strb.w	r1, [r2, #109]	; 0x6d
24002da8:	f103 0174 	add.w	r1, r3, #116	; 0x74
24002dac:	5c61      	ldrb	r1, [r4, r1]
24002dae:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
24002db2:	f103 0175 	add.w	r1, r3, #117	; 0x75
24002db6:	5c61      	ldrb	r1, [r4, r1]
24002db8:	f882 106f 	strb.w	r1, [r2, #111]	; 0x6f
24002dbc:	f103 0176 	add.w	r1, r3, #118	; 0x76
24002dc0:	5c61      	ldrb	r1, [r4, r1]
24002dc2:	f882 1070 	strb.w	r1, [r2, #112]	; 0x70
24002dc6:	f103 0177 	add.w	r1, r3, #119	; 0x77
24002dca:	5c61      	ldrb	r1, [r4, r1]
24002dcc:	f882 1071 	strb.w	r1, [r2, #113]	; 0x71
24002dd0:	f103 0178 	add.w	r1, r3, #120	; 0x78
24002dd4:	5c61      	ldrb	r1, [r4, r1]
24002dd6:	f882 1072 	strb.w	r1, [r2, #114]	; 0x72
24002dda:	f103 0179 	add.w	r1, r3, #121	; 0x79
24002dde:	5c61      	ldrb	r1, [r4, r1]
24002de0:	f882 1073 	strb.w	r1, [r2, #115]	; 0x73
24002de4:	f103 017a 	add.w	r1, r3, #122	; 0x7a
24002de8:	5c61      	ldrb	r1, [r4, r1]
24002dea:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
24002dee:	f103 017b 	add.w	r1, r3, #123	; 0x7b
24002df2:	5c61      	ldrb	r1, [r4, r1]
24002df4:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
24002df8:	f103 017c 	add.w	r1, r3, #124	; 0x7c
24002dfc:	337d      	adds	r3, #125	; 0x7d
24002dfe:	5c61      	ldrb	r1, [r4, r1]
24002e00:	5ce3      	ldrb	r3, [r4, r3]
24002e02:	f882 1076 	strb.w	r1, [r2, #118]	; 0x76
24002e06:	f882 3077 	strb.w	r3, [r2, #119]	; 0x77
						for (int j = 0; j < 4; j++)
24002e0a:	e55c      	b.n	240028c6 <getPresetNamesFromSDCard+0xbe>
			audioOutBuffer[i] = 0;
24002e0c:	2200      	movs	r2, #0
24002e0e:	f503 6180 	add.w	r1, r3, #1024	; 0x400
			audioOutBuffer[i + 1] = 0;
24002e12:	e9c3 2200 	strd	r2, r2, [r3]
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
24002e16:	3308      	adds	r3, #8
24002e18:	4299      	cmp	r1, r3
24002e1a:	d1fa      	bne.n	24002e12 <getPresetNamesFromSDCard+0x60a>
24002e1c:	e511      	b.n	24002842 <getPresetNamesFromSDCard+0x3a>
24002e1e:	bf00      	nop

24002e20 <SDRAM_init>:
#define SDRAM_MODEREG_WRITEBURST_MODE_PROG_BURST ((0 << 9))

#define SDRAM_MODEREG_OPERATING_MODE_STANDARD ((0 << 13)|(0 << 14))

void SDRAM_init()
{
24002e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 1;
	        Command.ModeRegisterDefinition = 0;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002e24:	4c21      	ldr	r4, [pc, #132]	; (24002eac <SDRAM_init+0x8c>)
{
24002e26:	b086      	sub	sp, #24
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
24002e28:	2501      	movs	r5, #1
	        __IO uint32_t tmpmrd = 0;
24002e2a:	2600      	movs	r6, #0
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
24002e2c:	2710      	movs	r7, #16
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002e2e:	a902      	add	r1, sp, #8
24002e30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24002e34:	4620      	mov	r0, r4
	        /* Step 4: Insert 100 us delay */
	        HAL_Delay(1);


	        /* Step 5: Configure a PALL (precharge all) command */
	        Command.CommandMode            = FMC_SDRAM_CMD_PALL;
24002e36:	f04f 0802 	mov.w	r8, #2
	        __IO uint32_t tmpmrd = 0;
24002e3a:	9601      	str	r6, [sp, #4]
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
24002e3c:	e9cd 5702 	strd	r5, r7, [sp, #8]
	        Command.ModeRegisterDefinition = 0;
24002e40:	e9cd 5604 	strd	r5, r6, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002e44:	f008 fb28 	bl	2400b498 <HAL_SDRAM_SendCommand>
	        HAL_Delay(1);
24002e48:	4628      	mov	r0, r5
24002e4a:	f001 ffaf 	bl	24004dac <HAL_Delay>
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 1;
	        Command.ModeRegisterDefinition = 0;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002e4e:	a902      	add	r1, sp, #8
24002e50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24002e54:	4620      	mov	r0, r4
	        Command.ModeRegisterDefinition = 0;
24002e56:	9605      	str	r6, [sp, #20]
	        Command.CommandMode            = FMC_SDRAM_CMD_PALL;
24002e58:	f8cd 8008 	str.w	r8, [sp, #8]
	        Command.AutoRefreshNumber      = 1;
24002e5c:	e9cd 7503 	strd	r7, r5, [sp, #12]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002e60:	f008 fb1a 	bl	2400b498 <HAL_SDRAM_SendCommand>

	        /* Step 6 : Configure a Auto-Refresh command */
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
24002e64:	2303      	movs	r3, #3
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 2;
	        Command.ModeRegisterDefinition = 0;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002e66:	a902      	add	r1, sp, #8
24002e68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24002e6c:	4620      	mov	r0, r4
	        Command.ModeRegisterDefinition = 0;
24002e6e:	9605      	str	r6, [sp, #20]
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
24002e70:	9302      	str	r3, [sp, #8]
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
	                 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL | SDRAM_MODEREG_CAS_LATENCY_2
	                 | SDRAM_MODEREG_WRITEBURST_MODE_SINGLE | SDRAM_MODEREG_OPERATING_MODE_STANDARD;
	        // // Used in example, but can't find reference except for "Test Mode"

	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
24002e72:	2604      	movs	r6, #4
	        Command.AutoRefreshNumber      = 2;
24002e74:	e9cd 7803 	strd	r7, r8, [sp, #12]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002e78:	f008 fb0e 	bl	2400b498 <HAL_SDRAM_SendCommand>
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
24002e7c:	f240 2322 	movw	r3, #546	; 0x222
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
24002e80:	2710      	movs	r7, #16
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 1;
	        Command.ModeRegisterDefinition = tmpmrd;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002e82:	a902      	add	r1, sp, #8
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
24002e84:	9301      	str	r3, [sp, #4]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002e86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.ModeRegisterDefinition = tmpmrd;
24002e8a:	9b01      	ldr	r3, [sp, #4]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002e8c:	4620      	mov	r0, r4
	        Command.AutoRefreshNumber      = 1;
24002e8e:	9504      	str	r5, [sp, #16]
	        Command.ModeRegisterDefinition = tmpmrd;
24002e90:	9305      	str	r3, [sp, #20]
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
24002e92:	e9cd 6702 	strd	r6, r7, [sp, #8]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002e96:	f008 faff 	bl	2400b498 <HAL_SDRAM_SendCommand>

	        //HAL_SDRAM_ProgramRefreshRate(hsdram, 0x56A - 20);
	        HAL_SDRAM_ProgramRefreshRate(&hsdram1, 762); // ((64ms / 8192) * 100MHz) - 20
24002e9a:	f240 21fa 	movw	r1, #762	; 0x2fa
24002e9e:	4620      	mov	r0, r4
24002ea0:	f008 fb1a 	bl	2400b4d8 <HAL_SDRAM_ProgramRefreshRate>
	        //8192 is 2^numberofrows (which is 13 in the case of the sdram)

}
24002ea4:	b006      	add	sp, #24
24002ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
24002eaa:	bf00      	nop
24002eac:	20014aa0 	.word	0x20014aa0

24002eb0 <setEffectsFunctions>:
	;
}

void setEffectsFunctions(FXType effectType, int i)
{
	effectsActive[i] = 1;
24002eb0:	4ba1      	ldr	r3, [pc, #644]	; (24003138 <setEffectsFunctions+0x288>)
24002eb2:	2201      	movs	r2, #1
{
24002eb4:	b410      	push	{r4}
	effectsActive[i] = 1;
24002eb6:	545a      	strb	r2, [r3, r1]
	switch (effectType)
24002eb8:	2815      	cmp	r0, #21
24002eba:	d82b      	bhi.n	24002f14 <setEffectsFunctions+0x64>
24002ebc:	e8df f010 	tbh	[pc, r0, lsl #1]
24002ec0:	0217022b 	.word	0x0217022b
24002ec4:	01ef0203 	.word	0x01ef0203
24002ec8:	01d601e9 	.word	0x01d601e9
24002ecc:	012601c2 	.word	0x012601c2
24002ed0:	01010111 	.word	0x01010111
24002ed4:	001600f1 	.word	0x001600f1
24002ed8:	00c900dc 	.word	0x00c900dc
24002edc:	00a300b6 	.word	0x00a300b6
24002ee0:	007c0090 	.word	0x007c0090
24002ee4:	00540068 	.word	0x00540068
24002ee8:	002d0040 	.word	0x002d0040
			  effectSetters[i].setParam3 = &tiltParam3;
			  effectSetters[i].setParam4 = &tiltParam4;
			  effectSetters[i].setParam5 = &param5Linear;
			  break;
		  case Wavefolder:
			  effectTick[i] = &wavefolderTick;
24002eec:	4b93      	ldr	r3, [pc, #588]	; (2400313c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &wavefolderParam1;
24002eee:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &wavefolderTick;
24002ef2:	4c93      	ldr	r4, [pc, #588]	; (24003140 <setEffectsFunctions+0x290>)
			  effectSetters[i].setParam1 = &wavefolderParam1;
24002ef4:	4a93      	ldr	r2, [pc, #588]	; (24003144 <setEffectsFunctions+0x294>)
			  effectTick[i] = &wavefolderTick;
24002ef6:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &wavefolderParam1;
24002efa:	4993      	ldr	r1, [pc, #588]	; (24003148 <setEffectsFunctions+0x298>)
24002efc:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &offsetParam2;
24002f00:	4c92      	ldr	r4, [pc, #584]	; (2400314c <setEffectsFunctions+0x29c>)
			  effectSetters[i].setParam1 = &wavefolderParam1;
24002f02:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &wavefolderParam3;
24002f06:	4892      	ldr	r0, [pc, #584]	; (24003150 <setEffectsFunctions+0x2a0>)
			  effectSetters[i].setParam4 = &param4Linear;
24002f08:	4992      	ldr	r1, [pc, #584]	; (24003154 <setEffectsFunctions+0x2a4>)
			  effectSetters[i].setParam5 = &param5Linear;
24002f0a:	4a93      	ldr	r2, [pc, #588]	; (24003158 <setEffectsFunctions+0x2a8>)
			  effectSetters[i].setParam3 = &tiltParam3;
24002f0c:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &param5Linear;
24002f10:	e9c3 1203 	strd	r1, r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
			  break;
		  default:
			  break;
	}
}
24002f14:	f85d 4b04 	ldr.w	r4, [sp], #4
24002f18:	4770      	bx	lr
			  effectTick[i] = &FXLadderLowpassTick;
24002f1a:	4b88      	ldr	r3, [pc, #544]	; (2400313c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXLadderParam1;;
24002f1c:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXLadderLowpassTick;
24002f20:	4a8e      	ldr	r2, [pc, #568]	; (2400315c <setEffectsFunctions+0x2ac>)
			  effectSetters[i].setParam1 = &FXLadderParam1;;
24002f22:	4888      	ldr	r0, [pc, #544]	; (24003144 <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXLadderLowpassTick;
24002f24:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLadderParam1;;
24002f28:	498d      	ldr	r1, [pc, #564]	; (24003160 <setEffectsFunctions+0x2b0>)
24002f2a:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;;
24002f2e:	4a8d      	ldr	r2, [pc, #564]	; (24003164 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXLadderParam1;;
24002f30:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXLadderParam3;;
24002f34:	498c      	ldr	r1, [pc, #560]	; (24003168 <setEffectsFunctions+0x2b8>)
			  effectSetters[i].setParam2 = &blankFunction;;
24002f36:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXLadderParam3;;
24002f38:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;;
24002f3a:	e9c3 2203 	strd	r2, r2, [r3, #12]
}
24002f3e:	e7e9      	b.n	24002f14 <setEffectsFunctions+0x64>
			  effectTick[i] = FXVZbandrejectTick;
24002f40:	4b7e      	ldr	r3, [pc, #504]	; (2400313c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXNotchParam1;;
24002f42:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = FXVZbandrejectTick;
24002f46:	4a89      	ldr	r2, [pc, #548]	; (2400316c <setEffectsFunctions+0x2bc>)
			  effectSetters[i].setParam1 = &FXNotchParam1;;
24002f48:	487e      	ldr	r0, [pc, #504]	; (24003144 <setEffectsFunctions+0x294>)
			  effectTick[i] = FXVZbandrejectTick;
24002f4a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXNotchParam1;;
24002f4e:	4988      	ldr	r1, [pc, #544]	; (24003170 <setEffectsFunctions+0x2c0>)
24002f50:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;;
24002f54:	4a83      	ldr	r2, [pc, #524]	; (24003164 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXNotchParam1;;
24002f56:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &FXNotchParam2;;
24002f5a:	4886      	ldr	r0, [pc, #536]	; (24003174 <setEffectsFunctions+0x2c4>)
			  effectSetters[i].setParam3 = &FXNotchParam3;;
24002f5c:	4986      	ldr	r1, [pc, #536]	; (24003178 <setEffectsFunctions+0x2c8>)
			  effectSetters[i].setParam4 = &blankFunction;;
24002f5e:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
24002f60:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXNotchParam3;;
24002f62:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
24002f66:	e7d5      	b.n	24002f14 <setEffectsFunctions+0x64>
			  effectTick[i] = FXVZhighshelfTick;
24002f68:	4b74      	ldr	r3, [pc, #464]	; (2400313c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
24002f6a:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = FXVZhighshelfTick;
24002f6e:	4a83      	ldr	r2, [pc, #524]	; (2400317c <setEffectsFunctions+0x2cc>)
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
24002f70:	4874      	ldr	r0, [pc, #464]	; (24003144 <setEffectsFunctions+0x294>)
			  effectTick[i] = FXVZhighshelfTick;
24002f72:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
24002f76:	4982      	ldr	r1, [pc, #520]	; (24003180 <setEffectsFunctions+0x2d0>)
24002f78:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;;
24002f7c:	4a79      	ldr	r2, [pc, #484]	; (24003164 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
24002f7e:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &FXHighShelfParam2;;
24002f82:	4880      	ldr	r0, [pc, #512]	; (24003184 <setEffectsFunctions+0x2d4>)
			  effectSetters[i].setParam3 = &FXHighShelfParam3;;
24002f84:	4980      	ldr	r1, [pc, #512]	; (24003188 <setEffectsFunctions+0x2d8>)
			  effectSetters[i].setParam4 = &blankFunction;;
24002f86:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
24002f88:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXHighShelfParam3;;
24002f8a:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
24002f8e:	e7c1      	b.n	24002f14 <setEffectsFunctions+0x64>
			  effectTick[i] = &FXVZlowshelfTick;
24002f90:	4b6a      	ldr	r3, [pc, #424]	; (2400313c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
24002f92:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXVZlowshelfTick;
24002f96:	4a7d      	ldr	r2, [pc, #500]	; (2400318c <setEffectsFunctions+0x2dc>)
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
24002f98:	486a      	ldr	r0, [pc, #424]	; (24003144 <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXVZlowshelfTick;
24002f9a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
24002f9e:	497c      	ldr	r1, [pc, #496]	; (24003190 <setEffectsFunctions+0x2e0>)
24002fa0:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
24002fa4:	4a6f      	ldr	r2, [pc, #444]	; (24003164 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
24002fa6:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &FXLowShelfParam2;
24002faa:	487a      	ldr	r0, [pc, #488]	; (24003194 <setEffectsFunctions+0x2e4>)
			  effectSetters[i].setParam3 = &FXLowShelfParam3;
24002fac:	497a      	ldr	r1, [pc, #488]	; (24003198 <setEffectsFunctions+0x2e8>)
			  effectSetters[i].setParam4 = &blankFunction;
24002fae:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
24002fb0:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXLowShelfParam3;
24002fb2:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
24002fb6:	e7ad      	b.n	24002f14 <setEffectsFunctions+0x64>
			  effectTick[i] = &FXVZpeakTick;
24002fb8:	4b60      	ldr	r3, [pc, #384]	; (2400313c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXPeakParam1;
24002fba:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXVZpeakTick;
24002fbe:	4a77      	ldr	r2, [pc, #476]	; (2400319c <setEffectsFunctions+0x2ec>)
			  effectSetters[i].setParam1 = &FXPeakParam1;
24002fc0:	4860      	ldr	r0, [pc, #384]	; (24003144 <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXVZpeakTick;
24002fc2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXPeakParam1;
24002fc6:	4976      	ldr	r1, [pc, #472]	; (240031a0 <setEffectsFunctions+0x2f0>)
24002fc8:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
24002fcc:	4a65      	ldr	r2, [pc, #404]	; (24003164 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXPeakParam1;
24002fce:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &FXPeakParam2;
24002fd2:	4874      	ldr	r0, [pc, #464]	; (240031a4 <setEffectsFunctions+0x2f4>)
			  effectSetters[i].setParam3 = &FXPeakParam3;
24002fd4:	4974      	ldr	r1, [pc, #464]	; (240031a8 <setEffectsFunctions+0x2f8>)
			  effectSetters[i].setParam4 = &blankFunction;
24002fd6:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
24002fd8:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXPeakParam3;
24002fda:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
24002fde:	e799      	b.n	24002f14 <setEffectsFunctions+0x64>
			  effectTick[i] = &FXdiodeLowpassTick;
24002fe0:	4b56      	ldr	r3, [pc, #344]	; (2400313c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXDiodeParam1;
24002fe2:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXdiodeLowpassTick;
24002fe6:	4a71      	ldr	r2, [pc, #452]	; (240031ac <setEffectsFunctions+0x2fc>)
			  effectSetters[i].setParam1 = &FXDiodeParam1;
24002fe8:	4856      	ldr	r0, [pc, #344]	; (24003144 <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXdiodeLowpassTick;
24002fea:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXDiodeParam1;
24002fee:	4970      	ldr	r1, [pc, #448]	; (240031b0 <setEffectsFunctions+0x300>)
24002ff0:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
24002ff4:	4a5b      	ldr	r2, [pc, #364]	; (24003164 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXDiodeParam1;
24002ff6:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXDiodeParam3;
24002ffa:	496e      	ldr	r1, [pc, #440]	; (240031b4 <setEffectsFunctions+0x304>)
			  effectSetters[i].setParam2 = &blankFunction;
24002ffc:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXDiodeParam3;
24002ffe:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;
24003000:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
24003004:	e786      	b.n	24002f14 <setEffectsFunctions+0x64>
			  effectTick[i] = &FXbandpassTick;
24003006:	4b4d      	ldr	r3, [pc, #308]	; (2400313c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXBandpassParam1;
24003008:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXbandpassTick;
2400300c:	4a6a      	ldr	r2, [pc, #424]	; (240031b8 <setEffectsFunctions+0x308>)
			  effectSetters[i].setParam1 = &FXBandpassParam1;
2400300e:	484d      	ldr	r0, [pc, #308]	; (24003144 <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXbandpassTick;
24003010:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXBandpassParam1;
24003014:	4969      	ldr	r1, [pc, #420]	; (240031bc <setEffectsFunctions+0x30c>)
24003016:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
2400301a:	4a52      	ldr	r2, [pc, #328]	; (24003164 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXBandpassParam1;
2400301c:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXBandpassParam3;
24003020:	4967      	ldr	r1, [pc, #412]	; (240031c0 <setEffectsFunctions+0x310>)
			  effectSetters[i].setParam2 = &blankFunction;
24003022:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXBandpassParam3;
24003024:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;
24003026:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
2400302a:	e773      	b.n	24002f14 <setEffectsFunctions+0x64>
			  effectTick[i] = &FXhighpassTick;
2400302c:	4b43      	ldr	r3, [pc, #268]	; (2400313c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXHighpassParam1;
2400302e:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXhighpassTick;
24003032:	4a64      	ldr	r2, [pc, #400]	; (240031c4 <setEffectsFunctions+0x314>)
			  effectSetters[i].setParam1 = &FXHighpassParam1;
24003034:	4843      	ldr	r0, [pc, #268]	; (24003144 <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXhighpassTick;
24003036:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXHighpassParam1;
2400303a:	4963      	ldr	r1, [pc, #396]	; (240031c8 <setEffectsFunctions+0x318>)
2400303c:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
24003040:	4a48      	ldr	r2, [pc, #288]	; (24003164 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXHighpassParam1;
24003042:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXHighpassParam3;
24003046:	4961      	ldr	r1, [pc, #388]	; (240031cc <setEffectsFunctions+0x31c>)
			  effectSetters[i].setParam2 = &blankFunction;
24003048:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXHighpassParam3;
2400304a:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;
2400304c:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
24003050:	e760      	b.n	24002f14 <setEffectsFunctions+0x64>
			  effectTick[i] = &FXlowpassTick;
24003052:	4b3a      	ldr	r3, [pc, #232]	; (2400313c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXLowpassParam1;
24003054:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXlowpassTick;
24003058:	4a5d      	ldr	r2, [pc, #372]	; (240031d0 <setEffectsFunctions+0x320>)
			  effectSetters[i].setParam1 = &FXLowpassParam1;
2400305a:	483a      	ldr	r0, [pc, #232]	; (24003144 <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXlowpassTick;
2400305c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLowpassParam1;
24003060:	495c      	ldr	r1, [pc, #368]	; (240031d4 <setEffectsFunctions+0x324>)
24003062:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
24003066:	4a3f      	ldr	r2, [pc, #252]	; (24003164 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXLowpassParam1;
24003068:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXLowpassParam3;
2400306c:	495a      	ldr	r1, [pc, #360]	; (240031d8 <setEffectsFunctions+0x328>)
			  effectSetters[i].setParam2 = &blankFunction;
2400306e:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXLowpassParam3;
24003070:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;;
24003072:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
24003076:	e74d      	b.n	24002f14 <setEffectsFunctions+0x64>
			  effectTick[i] = &delayTick;
24003078:	4b30      	ldr	r3, [pc, #192]	; (2400313c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &delayParam1;
2400307a:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &delayTick;
2400307e:	4c57      	ldr	r4, [pc, #348]	; (240031dc <setEffectsFunctions+0x32c>)
			  effectSetters[i].setParam1 = &delayParam1;
24003080:	4a30      	ldr	r2, [pc, #192]	; (24003144 <setEffectsFunctions+0x294>)
			  effectTick[i] = &delayTick;
24003082:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &delayParam1;
24003086:	4956      	ldr	r1, [pc, #344]	; (240031e0 <setEffectsFunctions+0x330>)
24003088:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &delayParam2;
2400308c:	4c55      	ldr	r4, [pc, #340]	; (240031e4 <setEffectsFunctions+0x334>)
			  effectSetters[i].setParam1 = &delayParam1;
2400308e:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &delayParam3;
24003092:	4855      	ldr	r0, [pc, #340]	; (240031e8 <setEffectsFunctions+0x338>)
			  effectSetters[i].setParam4 = &delayParam4;
24003094:	4955      	ldr	r1, [pc, #340]	; (240031ec <setEffectsFunctions+0x33c>)
			  effectSetters[i].setParam5 = &delayParam5;
24003096:	4a56      	ldr	r2, [pc, #344]	; (240031f0 <setEffectsFunctions+0x340>)
			  effectSetters[i].setParam3 = &delayParam3;
24003098:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &delayParam5;
2400309c:	e9c3 1203 	strd	r1, r2, [r3, #12]
			  break;
240030a0:	e738      	b.n	24002f14 <setEffectsFunctions+0x64>
			  effectTick[i] = &tiltFilterTick;
240030a2:	4b26      	ldr	r3, [pc, #152]	; (2400313c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &tiltParam1;
240030a4:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &tiltFilterTick;
240030a8:	4c52      	ldr	r4, [pc, #328]	; (240031f4 <setEffectsFunctions+0x344>)
			  effectSetters[i].setParam1 = &tiltParam1;
240030aa:	4a26      	ldr	r2, [pc, #152]	; (24003144 <setEffectsFunctions+0x294>)
			  effectTick[i] = &tiltFilterTick;
240030ac:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &tiltParam1;
240030b0:	4951      	ldr	r1, [pc, #324]	; (240031f8 <setEffectsFunctions+0x348>)
240030b2:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &tiltParam2;
240030b6:	4c51      	ldr	r4, [pc, #324]	; (240031fc <setEffectsFunctions+0x34c>)
			  effectSetters[i].setParam1 = &tiltParam1;
240030b8:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &tiltParam3;
240030bc:	4850      	ldr	r0, [pc, #320]	; (24003200 <setEffectsFunctions+0x350>)
			  effectSetters[i].setParam4 = &tiltParam4;
240030be:	4951      	ldr	r1, [pc, #324]	; (24003204 <setEffectsFunctions+0x354>)
240030c0:	e723      	b.n	24002f0a <setEffectsFunctions+0x5a>
			  effectTick[i] = &bcTick;
240030c2:	4b1e      	ldr	r3, [pc, #120]	; (2400313c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
240030c4:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &bcTick;
240030c8:	4c4f      	ldr	r4, [pc, #316]	; (24003208 <setEffectsFunctions+0x358>)
			  effectSetters[i].setParam1 = &clipperGainSet;
240030ca:	4a1e      	ldr	r2, [pc, #120]	; (24003144 <setEffectsFunctions+0x294>)
			  effectTick[i] = &bcTick;
240030cc:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
240030d0:	494e      	ldr	r1, [pc, #312]	; (2400320c <setEffectsFunctions+0x35c>)
240030d2:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &param2Linear;
240030d6:	4c4e      	ldr	r4, [pc, #312]	; (24003210 <setEffectsFunctions+0x360>)
			  effectSetters[i].setParam1 = &clipperGainSet;
240030d8:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &param3BC;
240030dc:	484d      	ldr	r0, [pc, #308]	; (24003214 <setEffectsFunctions+0x364>)
			  effectSetters[i].setParam4 = &param4Linear;
240030de:	491d      	ldr	r1, [pc, #116]	; (24003154 <setEffectsFunctions+0x2a4>)
240030e0:	e713      	b.n	24002f0a <setEffectsFunctions+0x5a>
			  effectTick[i] = &chorusTick;
240030e2:	4b16      	ldr	r3, [pc, #88]	; (2400313c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &chorusParam1;
240030e4:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &chorusTick;
240030e8:	4c4b      	ldr	r4, [pc, #300]	; (24003218 <setEffectsFunctions+0x368>)
			  effectSetters[i].setParam1 = &chorusParam1;
240030ea:	4a16      	ldr	r2, [pc, #88]	; (24003144 <setEffectsFunctions+0x294>)
			  effectTick[i] = &chorusTick;
240030ec:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &chorusParam1;
240030f0:	494a      	ldr	r1, [pc, #296]	; (2400321c <setEffectsFunctions+0x36c>)
240030f2:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &chorusParam2;
240030f6:	4c4a      	ldr	r4, [pc, #296]	; (24003220 <setEffectsFunctions+0x370>)
			  effectSetters[i].setParam1 = &chorusParam1;
240030f8:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &chorusParam3;
240030fc:	4849      	ldr	r0, [pc, #292]	; (24003224 <setEffectsFunctions+0x374>)
			  effectSetters[i].setParam4 = &chorusParam4;
240030fe:	494a      	ldr	r1, [pc, #296]	; (24003228 <setEffectsFunctions+0x378>)
			  effectSetters[i].setParam5 = &blankFunction;
24003100:	4a18      	ldr	r2, [pc, #96]	; (24003164 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam3 = &chorusParam3;
24003102:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &blankFunction;
24003106:	e9c3 1203 	strd	r1, r2, [r3, #12]
			  break;
2400310a:	e703      	b.n	24002f14 <setEffectsFunctions+0x64>
			  effectTick[i] = &compressorTick;
2400310c:	4b0b      	ldr	r3, [pc, #44]	; (2400313c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &compressorParam1;
2400310e:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &compressorTick;
24003112:	4c46      	ldr	r4, [pc, #280]	; (2400322c <setEffectsFunctions+0x37c>)
			  effectSetters[i].setParam1 = &compressorParam1;
24003114:	4a0b      	ldr	r2, [pc, #44]	; (24003144 <setEffectsFunctions+0x294>)
			  effectTick[i] = &compressorTick;
24003116:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &compressorParam1;
2400311a:	4945      	ldr	r1, [pc, #276]	; (24003230 <setEffectsFunctions+0x380>)
2400311c:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &compressorParam2;
24003120:	4c44      	ldr	r4, [pc, #272]	; (24003234 <setEffectsFunctions+0x384>)
			  effectSetters[i].setParam1 = &compressorParam1;
24003122:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &compressorParam3;
24003126:	4844      	ldr	r0, [pc, #272]	; (24003238 <setEffectsFunctions+0x388>)
			  effectSetters[i].setParam4 = &compressorParam4;
24003128:	4944      	ldr	r1, [pc, #272]	; (2400323c <setEffectsFunctions+0x38c>)
			  effectSetters[i].setParam5 = &compressorParam5;
2400312a:	4a45      	ldr	r2, [pc, #276]	; (24003240 <setEffectsFunctions+0x390>)
			  effectSetters[i].setParam3 = &compressorParam3;
2400312c:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &compressorParam5;
24003130:	e9c3 1203 	strd	r1, r2, [r3, #12]
			  break;
24003134:	e6ee      	b.n	24002f14 <setEffectsFunctions+0x64>
24003136:	bf00      	nop
24003138:	20014d14 	.word	0x20014d14
2400313c:	200051c4 	.word	0x200051c4
24003140:	000040a1 	.word	0x000040a1
24003144:	20014cc4 	.word	0x20014cc4
24003148:	00003901 	.word	0x00003901
2400314c:	00003d41 	.word	0x00003d41
24003150:	000039a1 	.word	0x000039a1
24003154:	00003f01 	.word	0x00003f01
24003158:	00003f21 	.word	0x00003f21
2400315c:	00004901 	.word	0x00004901
24003160:	00004b21 	.word	0x00004b21
24003164:	00005ee1 	.word	0x00005ee1
24003168:	00004ee1 	.word	0x00004ee1
2400316c:	000048e1 	.word	0x000048e1
24003170:	00004ae1 	.word	0x00004ae1
24003174:	00004d41 	.word	0x00004d41
24003178:	00004ec1 	.word	0x00004ec1
2400317c:	000048c1 	.word	0x000048c1
24003180:	00004aa1 	.word	0x00004aa1
24003184:	00004ca1 	.word	0x00004ca1
24003188:	00004ea1 	.word	0x00004ea1
2400318c:	000048a1 	.word	0x000048a1
24003190:	00004a61 	.word	0x00004a61
24003194:	00004c01 	.word	0x00004c01
24003198:	00004e81 	.word	0x00004e81
2400319c:	00004881 	.word	0x00004881
240031a0:	00004a21 	.word	0x00004a21
240031a4:	00004b61 	.word	0x00004b61
240031a8:	00004e61 	.word	0x00004e61
240031ac:	00004861 	.word	0x00004861
240031b0:	000049e1 	.word	0x000049e1
240031b4:	00004e41 	.word	0x00004e41
240031b8:	00004841 	.word	0x00004841
240031bc:	000049a1 	.word	0x000049a1
240031c0:	00004e21 	.word	0x00004e21
240031c4:	00004821 	.word	0x00004821
240031c8:	00004961 	.word	0x00004961
240031cc:	00004e01 	.word	0x00004e01
240031d0:	00004801 	.word	0x00004801
240031d4:	00004921 	.word	0x00004921
240031d8:	00004de1 	.word	0x00004de1
240031dc:	24001c91 	.word	0x24001c91
240031e0:	000042a1 	.word	0x000042a1
240031e4:	000042e1 	.word	0x000042e1
240031e8:	00004321 	.word	0x00004321
240031ec:	00004341 	.word	0x00004341
240031f0:	00004361 	.word	0x00004361
240031f4:	000044e1 	.word	0x000044e1
240031f8:	000039e1 	.word	0x000039e1
240031fc:	00003b01 	.word	0x00003b01
24003200:	00003b61 	.word	0x00003b61
24003204:	00003ba1 	.word	0x00003ba1
24003208:	000047a1 	.word	0x000047a1
2400320c:	00003861 	.word	0x00003861
24003210:	00003d61 	.word	0x00003d61
24003214:	00003f61 	.word	0x00003f61
24003218:	00004381 	.word	0x00004381
2400321c:	000041c1 	.word	0x000041c1
24003220:	00004201 	.word	0x00004201
24003224:	00004221 	.word	0x00004221
24003228:	00004261 	.word	0x00004261
2400322c:	000047e1 	.word	0x000047e1
24003230:	00003c41 	.word	0x00003c41
24003234:	00003c61 	.word	0x00003c61
24003238:	00003ca1 	.word	0x00003ca1
2400323c:	00003cc1 	.word	0x00003cc1
24003240:	00003d01 	.word	0x00003d01
			  effectTick[i] = &shaperTick;
24003244:	4b3d      	ldr	r3, [pc, #244]	; (2400333c <setEffectsFunctions+0x48c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24003246:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &shaperTick;
2400324a:	4a3d      	ldr	r2, [pc, #244]	; (24003340 <setEffectsFunctions+0x490>)
			  effectSetters[i].setParam1 = &clipperGainSet;
2400324c:	483d      	ldr	r0, [pc, #244]	; (24003344 <setEffectsFunctions+0x494>)
			  effectTick[i] = &shaperTick;
2400324e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
24003252:	493d      	ldr	r1, [pc, #244]	; (24003348 <setEffectsFunctions+0x498>)
24003254:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
24003258:	4a3c      	ldr	r2, [pc, #240]	; (2400334c <setEffectsFunctions+0x49c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
2400325a:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
2400325e:	483c      	ldr	r0, [pc, #240]	; (24003350 <setEffectsFunctions+0x4a0>)
			  effectSetters[i].setParam3 = &param3Linear;
24003260:	493c      	ldr	r1, [pc, #240]	; (24003354 <setEffectsFunctions+0x4a4>)
			  effectSetters[i].setParam4 = &blankFunction;
24003262:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
24003264:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &param3Linear;
24003266:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
2400326a:	e653      	b.n	24002f14 <setEffectsFunctions+0x64>
			  effectSetters[i].setParam1 = &clipperGainSet;
2400326c:	4835      	ldr	r0, [pc, #212]	; (24003344 <setEffectsFunctions+0x494>)
2400326e:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &tanhTick;
24003272:	4b32      	ldr	r3, [pc, #200]	; (2400333c <setEffectsFunctions+0x48c>)
24003274:	4a38      	ldr	r2, [pc, #224]	; (24003358 <setEffectsFunctions+0x4a8>)
24003276:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
2400327a:	eb00 038c 	add.w	r3, r0, ip, lsl #2
2400327e:	4932      	ldr	r1, [pc, #200]	; (24003348 <setEffectsFunctions+0x498>)
			  effectSetters[i].setParam3 = &blankFunction;
24003280:	4a32      	ldr	r2, [pc, #200]	; (2400334c <setEffectsFunctions+0x49c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24003282:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
24003286:	4932      	ldr	r1, [pc, #200]	; (24003350 <setEffectsFunctions+0x4a0>)
			  effectSetters[i].setParam3 = &blankFunction;
24003288:	609a      	str	r2, [r3, #8]
			  effectSetters[i].setParam2 = &offsetParam2;
2400328a:	6059      	str	r1, [r3, #4]
			  effectSetters[i].setParam5 = &blankFunction;
2400328c:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
24003290:	e640      	b.n	24002f14 <setEffectsFunctions+0x64>
			  effectSetters[i].setParam1 = &clipperGainSet;
24003292:	482c      	ldr	r0, [pc, #176]	; (24003344 <setEffectsFunctions+0x494>)
24003294:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &satTick;
24003298:	4b28      	ldr	r3, [pc, #160]	; (2400333c <setEffectsFunctions+0x48c>)
2400329a:	4a30      	ldr	r2, [pc, #192]	; (2400335c <setEffectsFunctions+0x4ac>)
2400329c:	e7eb      	b.n	24003276 <setEffectsFunctions+0x3c6>
			  effectTick[i] = &polynomialShaperTick;
2400329e:	4b27      	ldr	r3, [pc, #156]	; (2400333c <setEffectsFunctions+0x48c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
240032a0:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &polynomialShaperTick;
240032a4:	4a2e      	ldr	r2, [pc, #184]	; (24003360 <setEffectsFunctions+0x4b0>)
			  effectSetters[i].setParam1 = &clipperGainSet;
240032a6:	4827      	ldr	r0, [pc, #156]	; (24003344 <setEffectsFunctions+0x494>)
			  effectTick[i] = &polynomialShaperTick;
240032a8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
240032ac:	4926      	ldr	r1, [pc, #152]	; (24003348 <setEffectsFunctions+0x498>)
240032ae:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
240032b2:	4a26      	ldr	r2, [pc, #152]	; (2400334c <setEffectsFunctions+0x49c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
240032b4:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
240032b8:	4825      	ldr	r0, [pc, #148]	; (24003350 <setEffectsFunctions+0x4a0>)
			  effectSetters[i].setParam3 = &param3Poly;
240032ba:	492a      	ldr	r1, [pc, #168]	; (24003364 <setEffectsFunctions+0x4b4>)
			  effectSetters[i].setParam4 = &blankFunction;
240032bc:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
240032be:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &param3Poly;
240032c0:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
240032c4:	e626      	b.n	24002f14 <setEffectsFunctions+0x64>
			  effectTick[i] = &hardClipTick;
240032c6:	4b1d      	ldr	r3, [pc, #116]	; (2400333c <setEffectsFunctions+0x48c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
240032c8:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &hardClipTick;
240032cc:	4a26      	ldr	r2, [pc, #152]	; (24003368 <setEffectsFunctions+0x4b8>)
			  effectSetters[i].setParam1 = &clipperGainSet;
240032ce:	481d      	ldr	r0, [pc, #116]	; (24003344 <setEffectsFunctions+0x494>)
			  effectTick[i] = &hardClipTick;
240032d0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
240032d4:	491c      	ldr	r1, [pc, #112]	; (24003348 <setEffectsFunctions+0x498>)
240032d6:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
240032da:	4a1c      	ldr	r2, [pc, #112]	; (2400334c <setEffectsFunctions+0x49c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
240032dc:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
240032e0:	481b      	ldr	r0, [pc, #108]	; (24003350 <setEffectsFunctions+0x4a0>)
			  effectSetters[i].setParam3 = &param3Hard;
240032e2:	4922      	ldr	r1, [pc, #136]	; (2400336c <setEffectsFunctions+0x4bc>)
			  effectSetters[i].setParam4 = &blankFunction;
240032e4:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
240032e6:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &param3Hard;
240032e8:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
240032ec:	e612      	b.n	24002f14 <setEffectsFunctions+0x64>
			  effectTick[i] = &softClipTick;
240032ee:	4b13      	ldr	r3, [pc, #76]	; (2400333c <setEffectsFunctions+0x48c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
240032f0:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &softClipTick;
240032f4:	4a1e      	ldr	r2, [pc, #120]	; (24003370 <setEffectsFunctions+0x4c0>)
			  effectSetters[i].setParam1 = &clipperGainSet;
240032f6:	4813      	ldr	r0, [pc, #76]	; (24003344 <setEffectsFunctions+0x494>)
			  effectTick[i] = &softClipTick;
240032f8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
240032fc:	4912      	ldr	r1, [pc, #72]	; (24003348 <setEffectsFunctions+0x498>)
240032fe:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
24003302:	4a12      	ldr	r2, [pc, #72]	; (2400334c <setEffectsFunctions+0x49c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24003304:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
24003308:	4811      	ldr	r0, [pc, #68]	; (24003350 <setEffectsFunctions+0x4a0>)
			  effectSetters[i].setParam3 = &param3Soft;
2400330a:	491a      	ldr	r1, [pc, #104]	; (24003374 <setEffectsFunctions+0x4c4>)
			  effectSetters[i].setParam4 = &blankFunction;
2400330c:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
2400330e:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &param3Soft;
24003310:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
24003314:	e5fe      	b.n	24002f14 <setEffectsFunctions+0x64>
			  effectSetters[i].setParam1 = &blankFunction;
24003316:	480d      	ldr	r0, [pc, #52]	; (2400334c <setEffectsFunctions+0x49c>)
24003318:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
2400331c:	4a09      	ldr	r2, [pc, #36]	; (24003344 <setEffectsFunctions+0x494>)
			  effectTick[i] = &blankTick;
2400331e:	4c07      	ldr	r4, [pc, #28]	; (2400333c <setEffectsFunctions+0x48c>)
			  effectSetters[i].setParam1 = &blankFunction;
24003320:	f842 002c 	str.w	r0, [r2, ip, lsl #2]
24003324:	eb02 028c 	add.w	r2, r2, ip, lsl #2
			  effectSetters[i].setParam3 = &blankFunction;
24003328:	e9c2 0001 	strd	r0, r0, [r2, #4]
			  effectSetters[i].setParam5 = &blankFunction;
2400332c:	e9c2 0003 	strd	r0, r0, [r2, #12]
			  effectsActive[i] = 0;
24003330:	2200      	movs	r2, #0
24003332:	545a      	strb	r2, [r3, r1]
			  effectTick[i] = &blankTick;
24003334:	4b10      	ldr	r3, [pc, #64]	; (24003378 <setEffectsFunctions+0x4c8>)
24003336:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
			  break;
2400333a:	e5eb      	b.n	24002f14 <setEffectsFunctions+0x64>
2400333c:	200051c4 	.word	0x200051c4
24003340:	00004461 	.word	0x00004461
24003344:	20014cc4 	.word	0x20014cc4
24003348:	00003861 	.word	0x00003861
2400334c:	00005ee1 	.word	0x00005ee1
24003350:	00003d41 	.word	0x00003d41
24003354:	00003d81 	.word	0x00003d81
24003358:	00004521 	.word	0x00004521
2400335c:	00004721 	.word	0x00004721
24003360:	00004681 	.word	0x00004681
24003364:	00003e81 	.word	0x00003e81
24003368:	000045e1 	.word	0x000045e1
2400336c:	00003e01 	.word	0x00003e01
24003370:	00004581 	.word	0x00004581
24003374:	00003da1 	.word	0x00003da1
24003378:	000044c1 	.word	0x000044c1

2400337c <setFilterTypes>:
		  default:
			  break;
	}
}
void setFilterTypes(int filterType, int i)
{
2400337c:	b410      	push	{r4}
	switch (filterType)
2400337e:	2808      	cmp	r0, #8
24003380:	d812      	bhi.n	240033a8 <setFilterTypes+0x2c>
24003382:	e8df f000 	tbb	[pc, r0]
24003386:	3223      	.short	0x3223
24003388:	6e5f5041 	.word	0x6e5f5041
2400338c:	057d      	.short	0x057d
2400338e:	14          	.byte	0x14
2400338f:	00          	.byte	0x00
				  filterSetters[i].setQ = &VZhighshelfSetQ;
				  filterSetters[i].setGain = &VZhighshelfSetGain;
				  break;
			  case 7:
				  filterTick[i] = &VZbandrejectTick;
				  filterSetters[i].setQ = &VZbandrejectSetQ;
24003390:	4b43      	ldr	r3, [pc, #268]	; (240034a0 <setFilterTypes+0x124>)
				  filterTick[i] = &VZbandrejectTick;
24003392:	4a44      	ldr	r2, [pc, #272]	; (240034a4 <setFilterTypes+0x128>)
24003394:	4844      	ldr	r0, [pc, #272]	; (240034a8 <setFilterTypes+0x12c>)
				  filterSetters[i].setQ = &VZbandrejectSetQ;
24003396:	4c45      	ldr	r4, [pc, #276]	; (240034ac <setFilterTypes+0x130>)
				  filterTick[i] = &VZbandrejectTick;
24003398:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
2400339c:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
240033a0:	4843      	ldr	r0, [pc, #268]	; (240034b0 <setFilterTypes+0x134>)
				  filterSetters[i].setQ = &VZbandrejectSetQ;
240033a2:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
240033a6:	6050      	str	r0, [r2, #4]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
				  break;
			  default:
				  break;
		}
}
240033a8:	f85d 4b04 	ldr.w	r4, [sp], #4
240033ac:	4770      	bx	lr
				  filterSetters[i].setQ = &LadderLowpassSetQ;
240033ae:	4b3c      	ldr	r3, [pc, #240]	; (240034a0 <setFilterTypes+0x124>)
				  filterTick[i] = &LadderLowpassTick;
240033b0:	4a3c      	ldr	r2, [pc, #240]	; (240034a4 <setFilterTypes+0x128>)
240033b2:	4840      	ldr	r0, [pc, #256]	; (240034b4 <setFilterTypes+0x138>)
				  filterSetters[i].setQ = &LadderLowpassSetQ;
240033b4:	4c40      	ldr	r4, [pc, #256]	; (240034b8 <setFilterTypes+0x13c>)
				  filterTick[i] = &LadderLowpassTick;
240033b6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
240033ba:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
240033be:	483f      	ldr	r0, [pc, #252]	; (240034bc <setFilterTypes+0x140>)
				  filterSetters[i].setQ = &LadderLowpassSetQ;
240033c0:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
240033c4:	6050      	str	r0, [r2, #4]
}
240033c6:	f85d 4b04 	ldr.w	r4, [sp], #4
240033ca:	4770      	bx	lr
				  filterSetters[i].setQ = &lowpassSetQ;
240033cc:	4b34      	ldr	r3, [pc, #208]	; (240034a0 <setFilterTypes+0x124>)
				  filterTick[i] = &lowpassTick;
240033ce:	4a35      	ldr	r2, [pc, #212]	; (240034a4 <setFilterTypes+0x128>)
240033d0:	483b      	ldr	r0, [pc, #236]	; (240034c0 <setFilterTypes+0x144>)
				  filterSetters[i].setQ = &lowpassSetQ;
240033d2:	4c3c      	ldr	r4, [pc, #240]	; (240034c4 <setFilterTypes+0x148>)
				  filterTick[i] = &lowpassTick;
240033d4:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &lowpassSetGain;
240033d8:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
240033dc:	483a      	ldr	r0, [pc, #232]	; (240034c8 <setFilterTypes+0x14c>)
				  filterSetters[i].setQ = &lowpassSetQ;
240033de:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &lowpassSetGain;
240033e2:	6050      	str	r0, [r2, #4]
}
240033e4:	f85d 4b04 	ldr.w	r4, [sp], #4
240033e8:	4770      	bx	lr
				  filterSetters[i].setQ = &highpassSetQ;
240033ea:	4b2d      	ldr	r3, [pc, #180]	; (240034a0 <setFilterTypes+0x124>)
				  filterTick[i] = &highpassTick;
240033ec:	4a2d      	ldr	r2, [pc, #180]	; (240034a4 <setFilterTypes+0x128>)
240033ee:	4837      	ldr	r0, [pc, #220]	; (240034cc <setFilterTypes+0x150>)
				  filterSetters[i].setQ = &highpassSetQ;
240033f0:	4c37      	ldr	r4, [pc, #220]	; (240034d0 <setFilterTypes+0x154>)
				  filterTick[i] = &highpassTick;
240033f2:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &highpassSetGain;
240033f6:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
240033fa:	4836      	ldr	r0, [pc, #216]	; (240034d4 <setFilterTypes+0x158>)
				  filterSetters[i].setQ = &highpassSetQ;
240033fc:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &highpassSetGain;
24003400:	6050      	str	r0, [r2, #4]
}
24003402:	f85d 4b04 	ldr.w	r4, [sp], #4
24003406:	4770      	bx	lr
				  filterSetters[i].setQ = &bandpassSetQ;
24003408:	4b25      	ldr	r3, [pc, #148]	; (240034a0 <setFilterTypes+0x124>)
				  filterTick[i] = &bandpassTick;
2400340a:	4a26      	ldr	r2, [pc, #152]	; (240034a4 <setFilterTypes+0x128>)
2400340c:	4832      	ldr	r0, [pc, #200]	; (240034d8 <setFilterTypes+0x15c>)
				  filterSetters[i].setQ = &bandpassSetQ;
2400340e:	4c33      	ldr	r4, [pc, #204]	; (240034dc <setFilterTypes+0x160>)
				  filterTick[i] = &bandpassTick;
24003410:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &bandpassSetGain;
24003414:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24003418:	4831      	ldr	r0, [pc, #196]	; (240034e0 <setFilterTypes+0x164>)
				  filterSetters[i].setQ = &bandpassSetQ;
2400341a:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &bandpassSetGain;
2400341e:	6050      	str	r0, [r2, #4]
}
24003420:	f85d 4b04 	ldr.w	r4, [sp], #4
24003424:	4770      	bx	lr
				  filterSetters[i].setQ = &diodeLowpassSetQ;
24003426:	4b1e      	ldr	r3, [pc, #120]	; (240034a0 <setFilterTypes+0x124>)
				  filterTick[i] = &diodeLowpassTick;
24003428:	4a1e      	ldr	r2, [pc, #120]	; (240034a4 <setFilterTypes+0x128>)
2400342a:	482e      	ldr	r0, [pc, #184]	; (240034e4 <setFilterTypes+0x168>)
				  filterSetters[i].setQ = &diodeLowpassSetQ;
2400342c:	4c2e      	ldr	r4, [pc, #184]	; (240034e8 <setFilterTypes+0x16c>)
				  filterTick[i] = &diodeLowpassTick;
2400342e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
24003432:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24003436:	482d      	ldr	r0, [pc, #180]	; (240034ec <setFilterTypes+0x170>)
				  filterSetters[i].setQ = &diodeLowpassSetQ;
24003438:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
2400343c:	6050      	str	r0, [r2, #4]
}
2400343e:	f85d 4b04 	ldr.w	r4, [sp], #4
24003442:	4770      	bx	lr
				  filterSetters[i].setQ = &VZpeakSetQ;
24003444:	4b16      	ldr	r3, [pc, #88]	; (240034a0 <setFilterTypes+0x124>)
				  filterTick[i] = &VZpeakTick;
24003446:	4a17      	ldr	r2, [pc, #92]	; (240034a4 <setFilterTypes+0x128>)
24003448:	4829      	ldr	r0, [pc, #164]	; (240034f0 <setFilterTypes+0x174>)
				  filterSetters[i].setQ = &VZpeakSetQ;
2400344a:	4c2a      	ldr	r4, [pc, #168]	; (240034f4 <setFilterTypes+0x178>)
				  filterTick[i] = &VZpeakTick;
2400344c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZpeakSetGain;
24003450:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24003454:	4828      	ldr	r0, [pc, #160]	; (240034f8 <setFilterTypes+0x17c>)
				  filterSetters[i].setQ = &VZpeakSetQ;
24003456:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZpeakSetGain;
2400345a:	6050      	str	r0, [r2, #4]
}
2400345c:	f85d 4b04 	ldr.w	r4, [sp], #4
24003460:	4770      	bx	lr
				  filterSetters[i].setQ = &VZlowshelfSetQ;
24003462:	4b0f      	ldr	r3, [pc, #60]	; (240034a0 <setFilterTypes+0x124>)
				  filterTick[i] = &VZlowshelfTick;
24003464:	4a0f      	ldr	r2, [pc, #60]	; (240034a4 <setFilterTypes+0x128>)
24003466:	4825      	ldr	r0, [pc, #148]	; (240034fc <setFilterTypes+0x180>)
				  filterSetters[i].setQ = &VZlowshelfSetQ;
24003468:	4c25      	ldr	r4, [pc, #148]	; (24003500 <setFilterTypes+0x184>)
				  filterTick[i] = &VZlowshelfTick;
2400346a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
2400346e:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24003472:	4824      	ldr	r0, [pc, #144]	; (24003504 <setFilterTypes+0x188>)
				  filterSetters[i].setQ = &VZlowshelfSetQ;
24003474:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
24003478:	6050      	str	r0, [r2, #4]
}
2400347a:	f85d 4b04 	ldr.w	r4, [sp], #4
2400347e:	4770      	bx	lr
				  filterSetters[i].setQ = &VZhighshelfSetQ;
24003480:	4b07      	ldr	r3, [pc, #28]	; (240034a0 <setFilterTypes+0x124>)
				  filterTick[i] = &VZhighshelfTick;
24003482:	4a08      	ldr	r2, [pc, #32]	; (240034a4 <setFilterTypes+0x128>)
24003484:	4820      	ldr	r0, [pc, #128]	; (24003508 <setFilterTypes+0x18c>)
				  filterSetters[i].setQ = &VZhighshelfSetQ;
24003486:	4c21      	ldr	r4, [pc, #132]	; (2400350c <setFilterTypes+0x190>)
				  filterTick[i] = &VZhighshelfTick;
24003488:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
2400348c:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24003490:	481f      	ldr	r0, [pc, #124]	; (24003510 <setFilterTypes+0x194>)
				  filterSetters[i].setQ = &VZhighshelfSetQ;
24003492:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
24003496:	6050      	str	r0, [r2, #4]
}
24003498:	f85d 4b04 	ldr.w	r4, [sp], #4
2400349c:	4770      	bx	lr
2400349e:	bf00      	nop
240034a0:	20016d18 	.word	0x20016d18
240034a4:	20005240 	.word	0x20005240
240034a8:	00002901 	.word	0x00002901
240034ac:	00002b81 	.word	0x00002b81
240034b0:	00003021 	.word	0x00003021
240034b4:	00002961 	.word	0x00002961
240034b8:	00002ba1 	.word	0x00002ba1
240034bc:	000030c1 	.word	0x000030c1
240034c0:	000026c1 	.word	0x000026c1
240034c4:	00002aa1 	.word	0x00002aa1
240034c8:	00002bc1 	.word	0x00002bc1
240034cc:	00002721 	.word	0x00002721
240034d0:	00002ac1 	.word	0x00002ac1
240034d4:	00002c61 	.word	0x00002c61
240034d8:	00002781 	.word	0x00002781
240034dc:	00002ae1 	.word	0x00002ae1
240034e0:	00002d01 	.word	0x00002d01
240034e4:	000027e1 	.word	0x000027e1
240034e8:	00002b01 	.word	0x00002b01
240034ec:	00002da1 	.word	0x00002da1
240034f0:	00002841 	.word	0x00002841
240034f4:	00002b21 	.word	0x00002b21
240034f8:	00002e41 	.word	0x00002e41
240034fc:	00002881 	.word	0x00002881
24003500:	00002b41 	.word	0x00002b41
24003504:	00002ee1 	.word	0x00002ee1
24003508:	000028c1 	.word	0x000028c1
2400350c:	00002b61 	.word	0x00002b61
24003510:	00002f81 	.word	0x00002f81

24003514 <setLFOShapes>:

void setLFOShapes(int LFOShape, int i)
{
24003514:	b410      	push	{r4}
	switch(LFOShape)
24003516:	2805      	cmp	r0, #5
24003518:	d814      	bhi.n	24003544 <setLFOShapes+0x30>
2400351a:	e8df f000 	tbb	[pc, r0]
2400351e:	3c29      	.short	0x3c29
24003520:	1603624f 	.word	0x1603624f
			lfoSetters[i].setRate = &lfoTriSetRate;
			lfoSetters[i].setShape = &lfoTriSetShape;
			lfoSetters[i].setPhase = &lfoTriSetPhase;
			break;
		case SawLFOShapeSet:
			lfoShapeTick[i] = &lfoSawTick;
24003524:	4b38      	ldr	r3, [pc, #224]	; (24003608 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSawSetRate;
24003526:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSawTick;
2400352a:	4c38      	ldr	r4, [pc, #224]	; (2400360c <setLFOShapes+0xf8>)
			lfoSetters[i].setRate = &lfoSawSetRate;
2400352c:	4a38      	ldr	r2, [pc, #224]	; (24003610 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSawTick;
2400352e:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSawSetRate;
24003532:	4c38      	ldr	r4, [pc, #224]	; (24003614 <setLFOShapes+0x100>)
24003534:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSawSetShape;
24003538:	4937      	ldr	r1, [pc, #220]	; (24003618 <setLFOShapes+0x104>)
			lfoSetters[i].setRate = &lfoSawSetRate;
2400353a:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSawSetPhase;
2400353e:	4a37      	ldr	r2, [pc, #220]	; (2400361c <setLFOShapes+0x108>)
24003540:	e9c3 1201 	strd	r1, r2, [r3, #4]
			lfoSetters[i].setRate = &lfoPulseSetRate;
			lfoSetters[i].setShape = &lfoPulseSetShape;
			lfoSetters[i].setPhase = &lfoPulseSetPhase;
			break;
	}
}
24003544:	f85d 4b04 	ldr.w	r4, [sp], #4
24003548:	4770      	bx	lr
			lfoShapeTick[i] = &lfoPulseTick;
2400354a:	4b2f      	ldr	r3, [pc, #188]	; (24003608 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoPulseSetRate;
2400354c:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoPulseTick;
24003550:	4c33      	ldr	r4, [pc, #204]	; (24003620 <setLFOShapes+0x10c>)
			lfoSetters[i].setRate = &lfoPulseSetRate;
24003552:	4a2f      	ldr	r2, [pc, #188]	; (24003610 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoPulseTick;
24003554:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoPulseSetRate;
24003558:	4c32      	ldr	r4, [pc, #200]	; (24003624 <setLFOShapes+0x110>)
2400355a:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoPulseSetShape;
2400355e:	4932      	ldr	r1, [pc, #200]	; (24003628 <setLFOShapes+0x114>)
			lfoSetters[i].setRate = &lfoPulseSetRate;
24003560:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoPulseSetPhase;
24003564:	4a31      	ldr	r2, [pc, #196]	; (2400362c <setLFOShapes+0x118>)
24003566:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
2400356a:	f85d 4b04 	ldr.w	r4, [sp], #4
2400356e:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSineTriTick;
24003570:	4b25      	ldr	r3, [pc, #148]	; (24003608 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSineTriSetRate;
24003572:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSineTriTick;
24003576:	4c2e      	ldr	r4, [pc, #184]	; (24003630 <setLFOShapes+0x11c>)
			lfoSetters[i].setRate = &lfoSineTriSetRate;
24003578:	4a25      	ldr	r2, [pc, #148]	; (24003610 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSineTriTick;
2400357a:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSineTriSetRate;
2400357e:	4c2d      	ldr	r4, [pc, #180]	; (24003634 <setLFOShapes+0x120>)
24003580:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSineTriSetShape;
24003584:	492c      	ldr	r1, [pc, #176]	; (24003638 <setLFOShapes+0x124>)
			lfoSetters[i].setRate = &lfoSineTriSetRate;
24003586:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSineTriSetPhase;
2400358a:	4a2c      	ldr	r2, [pc, #176]	; (2400363c <setLFOShapes+0x128>)
2400358c:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
24003590:	f85d 4b04 	ldr.w	r4, [sp], #4
24003594:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSawSquareTick;
24003596:	4b1c      	ldr	r3, [pc, #112]	; (24003608 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
24003598:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSawSquareTick;
2400359c:	4c28      	ldr	r4, [pc, #160]	; (24003640 <setLFOShapes+0x12c>)
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
2400359e:	4a1c      	ldr	r2, [pc, #112]	; (24003610 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSawSquareTick;
240035a0:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
240035a4:	4c27      	ldr	r4, [pc, #156]	; (24003644 <setLFOShapes+0x130>)
240035a6:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSawSquareSetShape;
240035aa:	4927      	ldr	r1, [pc, #156]	; (24003648 <setLFOShapes+0x134>)
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
240035ac:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
240035b0:	4a26      	ldr	r2, [pc, #152]	; (2400364c <setLFOShapes+0x138>)
240035b2:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
240035b6:	f85d 4b04 	ldr.w	r4, [sp], #4
240035ba:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSineTick;
240035bc:	4b12      	ldr	r3, [pc, #72]	; (24003608 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSineSetRate;
240035be:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSineTick;
240035c2:	4c23      	ldr	r4, [pc, #140]	; (24003650 <setLFOShapes+0x13c>)
			lfoSetters[i].setRate = &lfoSineSetRate;
240035c4:	4a12      	ldr	r2, [pc, #72]	; (24003610 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSineTick;
240035c6:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSineSetRate;
240035ca:	4c22      	ldr	r4, [pc, #136]	; (24003654 <setLFOShapes+0x140>)
240035cc:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSineSetShape;
240035d0:	4921      	ldr	r1, [pc, #132]	; (24003658 <setLFOShapes+0x144>)
			lfoSetters[i].setRate = &lfoSineSetRate;
240035d2:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSineSetPhase;
240035d6:	4a21      	ldr	r2, [pc, #132]	; (2400365c <setLFOShapes+0x148>)
240035d8:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
240035dc:	f85d 4b04 	ldr.w	r4, [sp], #4
240035e0:	4770      	bx	lr
			lfoShapeTick[i] = &lfoTriTick;
240035e2:	4b09      	ldr	r3, [pc, #36]	; (24003608 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoTriSetRate;
240035e4:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoTriTick;
240035e8:	4c1d      	ldr	r4, [pc, #116]	; (24003660 <setLFOShapes+0x14c>)
			lfoSetters[i].setRate = &lfoTriSetRate;
240035ea:	4a09      	ldr	r2, [pc, #36]	; (24003610 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoTriTick;
240035ec:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoTriSetRate;
240035f0:	4c1c      	ldr	r4, [pc, #112]	; (24003664 <setLFOShapes+0x150>)
240035f2:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoTriSetShape;
240035f6:	491c      	ldr	r1, [pc, #112]	; (24003668 <setLFOShapes+0x154>)
			lfoSetters[i].setRate = &lfoTriSetRate;
240035f8:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoTriSetPhase;
240035fc:	4a1b      	ldr	r2, [pc, #108]	; (2400366c <setLFOShapes+0x158>)
240035fe:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
24003602:	f85d 4b04 	ldr.w	r4, [sp], #4
24003606:	4770      	bx	lr
24003608:	200054c4 	.word	0x200054c4
2400360c:	000035c1 	.word	0x000035c1
24003610:	20018e44 	.word	0x20018e44
24003614:	000036a1 	.word	0x000036a1
24003618:	00003821 	.word	0x00003821
2400361c:	00003761 	.word	0x00003761
24003620:	00003601 	.word	0x00003601
24003624:	000036c1 	.word	0x000036c1
24003628:	00003841 	.word	0x00003841
2400362c:	00003781 	.word	0x00003781
24003630:	00003561 	.word	0x00003561
24003634:	00003641 	.word	0x00003641
24003638:	000037c1 	.word	0x000037c1
2400363c:	00003701 	.word	0x00003701
24003640:	00003541 	.word	0x00003541
24003644:	00003621 	.word	0x00003621
24003648:	000037a1 	.word	0x000037a1
2400364c:	000036e1 	.word	0x000036e1
24003650:	00003581 	.word	0x00003581
24003654:	00003661 	.word	0x00003661
24003658:	000037e1 	.word	0x000037e1
2400365c:	00003721 	.word	0x00003721
24003660:	000035a1 	.word	0x000035a1
24003664:	00003681 	.word	0x00003681
24003668:	00003801 	.word	0x00003801
2400366c:	00003741 	.word	0x00003741

24003670 <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
24003670:	4bcf      	ldr	r3, [pc, #828]	; (240039b0 <main+0x340>)
{
24003672:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24003676:	ed2d 8b02 	vpush	{d8}
2400367a:	695a      	ldr	r2, [r3, #20]
2400367c:	b091      	sub	sp, #68	; 0x44
2400367e:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
24003682:	d111      	bne.n	240036a8 <main+0x38>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
24003684:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24003688:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
2400368c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
24003690:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24003694:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
24003698:	695a      	ldr	r2, [r3, #20]
2400369a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
2400369e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
240036a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
240036a4:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
240036a8:	48c1      	ldr	r0, [pc, #772]	; (240039b0 <main+0x340>)
240036aa:	6943      	ldr	r3, [r0, #20]
240036ac:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
240036b0:	d124      	bne.n	240036fc <main+0x8c>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
240036b2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
240036b6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
240036ba:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
240036be:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
240036c2:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
240036c6:	f3c5 05c9 	ubfx	r5, r5, #3, #10
240036ca:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
240036cc:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
240036d0:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
240036d2:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
240036d6:	3b01      	subs	r3, #1
240036d8:	1c5f      	adds	r7, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
240036da:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
240036de:	d1f8      	bne.n	240036d2 <main+0x62>
    } while(sets-- != 0U);
240036e0:	3c20      	subs	r4, #32
240036e2:	f114 0f20 	cmn.w	r4, #32
240036e6:	d1f1      	bne.n	240036cc <main+0x5c>
240036e8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
240036ec:	6943      	ldr	r3, [r0, #20]
240036ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
240036f2:	6143      	str	r3, [r0, #20]
240036f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
240036f8:	f3bf 8f6f 	isb	sy

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
240036fc:	2400      	movs	r4, #0
  HAL_Init();
240036fe:	f001 fb13 	bl	24004d28 <HAL_Init>
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
24003702:	2501      	movs	r5, #1

  HAL_MPU_ConfigRegion(&MPU_InitStruct);

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
24003704:	2704      	movs	r7, #4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
24003706:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
2400370a:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_MPU_Disable();
2400370e:	f001 fbd9 	bl	24004ec4 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
24003712:	f248 721f 	movw	r2, #34591	; 0x871f
24003716:	f240 1301 	movw	r3, #257	; 0x101
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
2400371a:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
2400371c:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
24003720:	930e      	str	r3, [sp, #56]	; 0x38
24003722:	e9cd 420c 	strd	r4, r2, [sp, #48]	; 0x30
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003726:	f001 fbeb 	bl	24004f00 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x024000000;
2400372a:	f04f 5210 	mov.w	r2, #603979776	; 0x24000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
2400372e:	4ba1      	ldr	r3, [pc, #644]	; (240039b4 <main+0x344>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003730:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
24003732:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
24003736:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
2400373a:	4b9f      	ldr	r3, [pc, #636]	; (240039b8 <main+0x348>)
2400373c:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
2400373e:	f001 fbdf 	bl	24004f00 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
24003742:	2202      	movs	r2, #2
  MPU_InitStruct.BaseAddress = 0x24040000;
24003744:	4b9d      	ldr	r3, [pc, #628]	; (240039bc <main+0x34c>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003746:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
24003748:	f88d 5038 	strb.w	r5, [sp, #56]	; 0x38
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
2400374c:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
  MPU_InitStruct.BaseAddress = 0x24040000;
24003750:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003752:	f001 fbd5 	bl	24004f00 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
24003756:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003758:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
2400375a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
  MPU_InitStruct.BaseAddress = 0x30000000;
2400375e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
24003762:	930c      	str	r3, [sp, #48]	; 0x30
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
24003764:	2312      	movs	r3, #18
24003766:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
2400376a:	f001 fbc9 	bl	24004f00 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
2400376e:	230c      	movs	r3, #12
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003770:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
24003772:	f88d 702d 	strb.w	r7, [sp, #45]	; 0x2d
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
24003776:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
2400377a:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
2400377e:	f8ad 5039 	strh.w	r5, [sp, #57]	; 0x39
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
24003782:	f88d 403b 	strb.w	r4, [sp, #59]	; 0x3b
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003786:	f001 fbbb 	bl	24004f00 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
  MPU_InitStruct.BaseAddress = 0x38000000;
2400378a:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
2400378e:	2205      	movs	r2, #5
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003790:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.BaseAddress = 0x38000000;
24003792:	930c      	str	r3, [sp, #48]	; 0x30
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
24003794:	230f      	movs	r3, #15
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
24003796:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
2400379a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
2400379e:	f001 fbaf 	bl	24004f00 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER6;
  MPU_InitStruct.BaseAddress = 0x38800000;
240037a2:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
  MPU_InitStruct.Number = MPU_REGION_NUMBER6;
240037a6:	2206      	movs	r2, #6
  MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240037a8:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.BaseAddress = 0x38800000;
240037aa:	930c      	str	r3, [sp, #48]	; 0x30
  MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
240037ac:	230b      	movs	r3, #11
  MPU_InitStruct.Number = MPU_REGION_NUMBER6;
240037ae:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
  MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
240037b2:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240037b6:	f001 fba3 	bl	24004f00 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER7;
  MPU_InitStruct.BaseAddress = 0xc0000000;
240037ba:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER7;
240037be:	2207      	movs	r2, #7
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240037c0:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.BaseAddress = 0xc0000000;
240037c2:	930c      	str	r3, [sp, #48]	; 0x30
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
240037c4:	2319      	movs	r3, #25
  MPU_InitStruct.Number = MPU_REGION_NUMBER7;
240037c6:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
240037ca:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240037ce:	f001 fb97 	bl	24004f00 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER8;
240037d2:	2208      	movs	r2, #8
  MPU_InitStruct.BaseAddress = 0x90040000;
240037d4:	4b7a      	ldr	r3, [pc, #488]	; (240039c0 <main+0x350>)

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240037d6:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.Number = MPU_REGION_NUMBER8;
240037d8:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
  MPU_InitStruct.BaseAddress = 0x90040000;
240037dc:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240037de:	f001 fb8f 	bl	24004f00 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
240037e2:	4638      	mov	r0, r7
240037e4:	f001 fb7c 	bl	24004ee0 <HAL_MPU_Enable>
  __ASM volatile ("cpsie i" : : : "memory");
240037e8:	b662      	cpsie	i
  SystemClock_Config();
240037ea:	f7fe ff49 	bl	24002680 <SystemClock_Config>
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
240037ee:	f8df 8244 	ldr.w	r8, [pc, #580]	; 24003a34 <main+0x3c4>
  PeriphCommonClock_Config();
240037f2:	f7fe ffc5 	bl	24002780 <PeriphCommonClock_Config>
  MX_GPIO_Init();
240037f6:	f7fe fc49 	bl	2400208c <MX_GPIO_Init>
  MX_DMA_Init();
240037fa:	f7fe fb57 	bl	24001eac <MX_DMA_Init>
  MX_BDMA_Init();
240037fe:	f7fe fa89 	bl	24001d14 <MX_BDMA_Init>
  MX_I2C2_Init();
24003802:	f7fe fdf3 	bl	240023ec <MX_I2C2_Init>
  MX_SAI1_Init();
24003806:	f000 fdfb 	bl	24004400 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
2400380a:	f000 fefb 	bl	24004604 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
2400380e:	f000 ff63 	bl	240046d8 <MX_SPI1_Init>
  MX_I2C1_Init();
24003812:	f7fe fdab 	bl	2400236c <MX_I2C1_Init>
  MX_FMC_Init();
24003816:	f7fe fb95 	bl	24001f44 <MX_FMC_Init>
  MX_FATFS_Init();
2400381a:	f009 fe6b 	bl	2400d4f4 <MX_FATFS_Init>
  MX_SPI6_Init();
2400381e:	f000 ff87 	bl	24004730 <MX_SPI6_Init>
  MX_RNG_Init();
24003822:	f000 fdad 	bl	24004380 <MX_RNG_Init>
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
24003826:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400382a:	4866      	ldr	r0, [pc, #408]	; (240039c4 <main+0x354>)
2400382c:	f003 fada 	bl	24006de4 <HAL_GPIO_ReadPin>
	int bit1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
24003830:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
24003834:	4606      	mov	r6, r0
	int bit1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
24003836:	4863      	ldr	r0, [pc, #396]	; (240039c4 <main+0x354>)
24003838:	f003 fad4 	bl	24006de4 <HAL_GPIO_ReadPin>
2400383c:	4604      	mov	r4, r0
	int bit2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
2400383e:	4639      	mov	r1, r7
24003840:	4861      	ldr	r0, [pc, #388]	; (240039c8 <main+0x358>)
24003842:	f003 facf 	bl	24006de4 <HAL_GPIO_ReadPin>
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
24003846:	00a3      	lsls	r3, r4, #2
24003848:	eb03 0346 	add.w	r3, r3, r6, lsl #1
2400384c:	4418      	add	r0, r3
2400384e:	b2c4      	uxtb	r4, r0
24003850:	f888 4000 	strb.w	r4, [r8]
	if (boardNumber == 0)
24003854:	2c00      	cmp	r4, #0
24003856:	f000 854d 	beq.w	240042f4 <main+0xc84>
	HAL_Delay(500);
2400385a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
2400385e:	f001 faa5 	bl	24004dac <HAL_Delay>
    if (boardNumber !=0)
24003862:	f898 3000 	ldrb.w	r3, [r8]
24003866:	2b00      	cmp	r3, #0
24003868:	f040 853c 	bne.w	240042e4 <main+0xc74>
   PWR->CR1 |= PWR_CR1_DBP;
2400386c:	4a57      	ldr	r2, [pc, #348]	; (240039cc <main+0x35c>)
2400386e:	6813      	ldr	r3, [r2, #0]
24003870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24003874:	6013      	str	r3, [r2, #0]
   while((PWR->CR1 & PWR_CR1_DBP) == RESET)
24003876:	6813      	ldr	r3, [r2, #0]
24003878:	05d9      	lsls	r1, r3, #23
2400387a:	d5fc      	bpl.n	24003876 <main+0x206>
   __HAL_RCC_BKPRAM_CLK_ENABLE();
2400387c:	4b54      	ldr	r3, [pc, #336]	; (240039d0 <main+0x360>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
2400387e:	2200      	movs	r2, #0
24003880:	2180      	movs	r1, #128	; 0x80
   __HAL_RCC_BKPRAM_CLK_ENABLE();
24003882:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
24003886:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
2400388a:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
2400388e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
24003892:	4850      	ldr	r0, [pc, #320]	; (240039d4 <main+0x364>)
   __HAL_RCC_BKPRAM_CLK_ENABLE();
24003894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
24003898:	9306      	str	r3, [sp, #24]
2400389a:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
2400389c:	f003 faa8 	bl	24006df0 <HAL_GPIO_WritePin>
  return __builtin_arm_get_fpscr();
240038a0:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register  // this makes checking for denormals not necessary as they are automatically set to zero by the hardware
240038a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __builtin_arm_set_fpscr(fpscr);
240038a8:	eee1 3a10 	vmsr	fpscr, r3
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
240038ac:	4940      	ldr	r1, [pc, #256]	; (240039b0 <main+0x340>)
  if ((*(uint32_t*)0xE0001FB4) & 1)
240038ae:	4a4a      	ldr	r2, [pc, #296]	; (240039d8 <main+0x368>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
240038b0:	f8d1 30fc 	ldr.w	r3, [r1, #252]	; 0xfc
240038b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
240038b8:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
240038bc:	f8d2 3fb4 	ldr.w	r3, [r2, #4020]	; 0xfb4
240038c0:	07db      	lsls	r3, r3, #31
240038c2:	d502      	bpl.n	240038ca <main+0x25a>
    *(uint32_t*)0xE0001FB0 = 0xC5ACCE55;
240038c4:	4b45      	ldr	r3, [pc, #276]	; (240039dc <main+0x36c>)
240038c6:	f8c2 3fb0 	str.w	r3, [r2, #4016]	; 0xfb0
  DWT->CYCCNT = 0;
240038ca:	4b43      	ldr	r3, [pc, #268]	; (240039d8 <main+0x368>)
240038cc:	2100      	movs	r1, #0
  DWT->CTRL = 0x40000001;
240038ce:	4a44      	ldr	r2, [pc, #272]	; (240039e0 <main+0x370>)
	  buffer[i] = 0;
240038d0:	4c44      	ldr	r4, [pc, #272]	; (240039e4 <main+0x374>)
  DWT->CYCCNT = 0;
240038d2:	6059      	str	r1, [r3, #4]
	  SPI_PLUCK_TX[i] = 0;
240038d4:	4844      	ldr	r0, [pc, #272]	; (240039e8 <main+0x378>)
  DWT->CTRL = 0x40000001;
240038d6:	601a      	str	r2, [r3, #0]
	  SPI_PLUCK_TX[i] = 0;
240038d8:	2240      	movs	r2, #64	; 0x40
240038da:	f014 f8b1 	bl	24017a40 <memset>
	  buffer[i] = 0;
240038de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
240038e2:	2100      	movs	r1, #0
240038e4:	4620      	mov	r0, r4
240038e6:	f014 f8ab 	bl	24017a40 <memset>
  buffer[15+112] = NUM_PARAMS;
240038ea:	239c      	movs	r3, #156	; 0x9c
  buffer[NUM_PARAMS*2+16+112] = 0xef;
240038ec:	f64e 72ef 	movw	r2, #61423	; 0xefef
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
240038f0:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
  buffer[15+112] = NUM_PARAMS;
240038f4:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
  buffer[NUM_PARAMS*2+19+112] = 1;
240038f8:	2301      	movs	r3, #1
  buffer[NUM_PARAMS*2+16+112] = 0xef;
240038fa:	f8a4 21b8 	strh.w	r2, [r4, #440]	; 0x1b8
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
240038fe:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
  buffer[NUM_PARAMS*2+19+112] = 1;
24003902:	f884 31bb 	strb.w	r3, [r4, #443]	; 0x1bb
  buffer[NUM_PARAMS*2+25+112] = 0xfe;
24003906:	f64f 63fe 	movw	r3, #65278	; 0xfefe
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
2400390a:	ed9f 0a38 	vldr	s0, [pc, #224]	; 240039ec <main+0x37c>
2400390e:	f44f 6100 	mov.w	r1, #2048	; 0x800
  buffer[NUM_PARAMS*2+25+112] = 0xfe;
24003912:	f8a4 31c1 	strh.w	r3, [r4, #449]	; 0x1c1
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
24003916:	2403      	movs	r4, #3
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
24003918:	4835      	ldr	r0, [pc, #212]	; (240039f0 <main+0x380>)
2400391a:	f010 f8af 	bl	24013a7c <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(envTimeTable, 0.0f, 20000.0f, 4000.0f, SCALE_TABLE_SIZE);
2400391e:	f44f 6100 	mov.w	r1, #2048	; 0x800
24003922:	ed9f 1a34 	vldr	s2, [pc, #208]	; 240039f4 <main+0x384>
24003926:	eddf 0a34 	vldr	s1, [pc, #208]	; 240039f8 <main+0x388>
2400392a:	ed9f 0a34 	vldr	s0, [pc, #208]	; 240039fc <main+0x38c>
2400392e:	4834      	ldr	r0, [pc, #208]	; (24003a00 <main+0x390>)
24003930:	f010 f8a4 	bl	24013a7c <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
24003934:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
24003938:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
2400393c:	f44f 6100 	mov.w	r1, #2048	; 0x800
24003940:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 240039fc <main+0x38c>
24003944:	482f      	ldr	r0, [pc, #188]	; (24003a04 <main+0x394>)
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
24003946:	4d20      	ldr	r5, [pc, #128]	; (240039c8 <main+0x358>)
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
24003948:	f010 f898 	bl	24013a7c <LEAF_generate_table_skew_non_sym>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
2400394c:	2201      	movs	r2, #1
2400394e:	4628      	mov	r0, r5
24003950:	4611      	mov	r1, r2
24003952:	f003 fa4d 	bl	24006df0 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
24003956:	200a      	movs	r0, #10
24003958:	f001 fa28 	bl	24004dac <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
2400395c:	4628      	mov	r0, r5
2400395e:	2200      	movs	r2, #0
24003960:	2101      	movs	r1, #1
24003962:	f003 fa45 	bl	24006df0 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
24003966:	200a      	movs	r0, #10
24003968:	f001 fa20 	bl	24004dac <HAL_Delay>
  for (int i = 0; i < 3; i++)
2400396c:	3c01      	subs	r4, #1
2400396e:	d1ed      	bne.n	2400394c <main+0x2dc>
  if (boardNumber == 0)
24003970:	f898 3000 	ldrb.w	r3, [r8]
24003974:	2b00      	cmp	r3, #0
24003976:	f000 84b1 	beq.w	240042dc <main+0xc6c>
	  diskBusy = 1;
2400397a:	2301      	movs	r3, #1
2400397c:	4a22      	ldr	r2, [pc, #136]	; (24003a08 <main+0x398>)
  specialModeNames[0] = "PHYS STR1     ";
2400397e:	4d23      	ldr	r5, [pc, #140]	; (24003a0c <main+0x39c>)
  specialModeMacroNames[2][11] = "         ";
24003980:	243f      	movs	r4, #63	; 0x3f
	  diskBusy = 1;
24003982:	7013      	strb	r3, [r2, #0]
  SDRAM_init();
24003984:	f7ff fa4c 	bl	24002e20 <SDRAM_init>
  codec_init(&hi2c2);
24003988:	4821      	ldr	r0, [pc, #132]	; (24003a10 <main+0x3a0>)
2400398a:	f7fe f9e7 	bl	24001d5c <codec_init>
  audioInit();
2400398e:	4f21      	ldr	r7, [pc, #132]	; (24003a14 <main+0x3a4>)
24003990:	f7fc ffae 	bl	240008f0 <audioInit>
  specialModeNames[0] = "PHYS STR1     ";
24003994:	4b20      	ldr	r3, [pc, #128]	; (24003a18 <main+0x3a8>)
  specialModeMacroNames[1][3] = "Decay     ";
24003996:	4821      	ldr	r0, [pc, #132]	; (24003a1c <main+0x3ac>)
  specialModeNames[0] = "PHYS STR1     ";
24003998:	602b      	str	r3, [r5, #0]
  specialModeMacroNames[0][0] = "Feedback  ";
2400399a:	4b21      	ldr	r3, [pc, #132]	; (24003a20 <main+0x3b0>)
  specialModeMacroNames[0][5] = "          ";
2400399c:	4a21      	ldr	r2, [pc, #132]	; (24003a24 <main+0x3b4>)
  specialModeMacroNames[1][3] = "Decay     ";
2400399e:	63d8      	str	r0, [r3, #60]	; 0x3c
  specialModeMacroNames[2][3] = "Decay     ";
240039a0:	66d8      	str	r0, [r3, #108]	; 0x6c
  specialModeMacroNames[0][0] = "Feedback  ";
240039a2:	4821      	ldr	r0, [pc, #132]	; (24003a28 <main+0x3b8>)
  specialModeMacroNames[0][10] = "         ";
240039a4:	4921      	ldr	r1, [pc, #132]	; (24003a2c <main+0x3bc>)
  specialModeMacroNames[0][0] = "Feedback  ";
240039a6:	6018      	str	r0, [r3, #0]
  specialModeMacroNames[0][1] = "SlideNois ";
240039a8:	4821      	ldr	r0, [pc, #132]	; (24003a30 <main+0x3c0>)
  specialModeMacroNames[0][9] = "          ";
240039aa:	625a      	str	r2, [r3, #36]	; 0x24
  specialModeMacroNames[0][1] = "SlideNois ";
240039ac:	6058      	str	r0, [r3, #4]
240039ae:	e043      	b.n	24003a38 <main+0x3c8>
240039b0:	e000ed00 	.word	0xe000ed00
240039b4:	03010011 	.word	0x03010011
240039b8:	01010000 	.word	0x01010000
240039bc:	24040000 	.word	0x24040000
240039c0:	90040000 	.word	0x90040000
240039c4:	58020400 	.word	0x58020400
240039c8:	58020000 	.word	0x58020000
240039cc:	58024800 	.word	0x58024800
240039d0:	58024400 	.word	0x58024400
240039d4:	58020800 	.word	0x58020800
240039d8:	e0001000 	.word	0xe0001000
240039dc:	c5acce55 	.word	0xc5acce55
240039e0:	40000001 	.word	0x40000001
240039e4:	30042380 	.word	0x30042380
240039e8:	38000000 	.word	0x38000000
240039ec:	3c23d70a 	.word	0x3c23d70a
240039f0:	2001b018 	.word	0x2001b018
240039f4:	457a0000 	.word	0x457a0000
240039f8:	469c4000 	.word	0x469c4000
240039fc:	00000000 	.word	0x00000000
24003a00:	20014d18 	.word	0x20014d18
24003a04:	20016e44 	.word	0x20016e44
24003a08:	20014cc0 	.word	0x20014cc0
24003a0c:	2001d0a8 	.word	0x2001d0a8
24003a10:	20014c18 	.word	0x20014c18
24003a14:	30042000 	.word	0x30042000
24003a18:	24019fcc 	.word	0x24019fcc
24003a1c:	2401a064 	.word	0x2401a064
24003a20:	2001d018 	.word	0x2001d018
24003a24:	2401a018 	.word	0x2401a018
24003a28:	24019fdc 	.word	0x24019fdc
24003a2c:	2401a024 	.word	0x2401a024
24003a30:	24019fe8 	.word	0x24019fe8
24003a34:	20014c6d 	.word	0x20014c6d
  specialModeMacroNames[0][2] = "PluckWidt ";
24003a38:	481d      	ldr	r0, [pc, #116]	; (24003ab0 <main+0x440>)
24003a3a:	4e1e      	ldr	r6, [pc, #120]	; (24003ab4 <main+0x444>)
24003a3c:	6098      	str	r0, [r3, #8]
  specialModeMacroNames[0][3] = "PickNoise ";
24003a3e:	481e      	ldr	r0, [pc, #120]	; (24003ab8 <main+0x448>)
24003a40:	60d8      	str	r0, [r3, #12]
  specialModeMacroNames[0][4] = "PickupSim";
24003a42:	481e      	ldr	r0, [pc, #120]	; (24003abc <main+0x44c>)
24003a44:	6118      	str	r0, [r3, #16]
  specialModeNames[1] = "PHYS STR2     ";
24003a46:	481e      	ldr	r0, [pc, #120]	; (24003ac0 <main+0x450>)
24003a48:	6068      	str	r0, [r5, #4]
  specialModeMacroNames[1][0] = "PrepIndex ";
24003a4a:	481e      	ldr	r0, [pc, #120]	; (24003ac4 <main+0x454>)
24003a4c:	6318      	str	r0, [r3, #48]	; 0x30
  specialModeMacroNames[1][1] = "SlideNoise";
24003a4e:	481e      	ldr	r0, [pc, #120]	; (24003ac8 <main+0x458>)
24003a50:	6358      	str	r0, [r3, #52]	; 0x34
  specialModeMacroNames[1][2] = "PluckPos  ";
24003a52:	481e      	ldr	r0, [pc, #120]	; (24003acc <main+0x45c>)
24003a54:	6398      	str	r0, [r3, #56]	; 0x38
  specialModeMacroNames[1][4] = "Touch     ";
24003a56:	481e      	ldr	r0, [pc, #120]	; (24003ad0 <main+0x460>)
24003a58:	6418      	str	r0, [r3, #64]	; 0x40
  specialModeMacroNames[1][5] = "PickupPos ";
24003a5a:	481e      	ldr	r0, [pc, #120]	; (24003ad4 <main+0x464>)
24003a5c:	6458      	str	r0, [r3, #68]	; 0x44
  specialModeMacroNames[1][6] = "DampFreq  ";
24003a5e:	481e      	ldr	r0, [pc, #120]	; (24003ad8 <main+0x468>)
24003a60:	6498      	str	r0, [r3, #72]	; 0x48
  specialModeMacroNames[1][7] = "FFAmount  ";
24003a62:	481e      	ldr	r0, [pc, #120]	; (24003adc <main+0x46c>)
24003a64:	64d8      	str	r0, [r3, #76]	; 0x4c
  specialModeMacroNames[1][8] = "FBAmount  ";
24003a66:	481e      	ldr	r0, [pc, #120]	; (24003ae0 <main+0x470>)
24003a68:	6518      	str	r0, [r3, #80]	; 0x50
  specialModeMacroNames[1][9] = "foldDepth ";
24003a6a:	481e      	ldr	r0, [pc, #120]	; (24003ae4 <main+0x474>)
24003a6c:	6558      	str	r0, [r3, #84]	; 0x54
  specialModeMacroNames[1][10] = "prepPosX ";
24003a6e:	481e      	ldr	r0, [pc, #120]	; (24003ae8 <main+0x478>)
24003a70:	6598      	str	r0, [r3, #88]	; 0x58
  specialModeMacroNames[1][11] = "prepPosY ";
24003a72:	481e      	ldr	r0, [pc, #120]	; (24003aec <main+0x47c>)
24003a74:	65d8      	str	r0, [r3, #92]	; 0x5c
  specialModeNames[2] = "ADDITIVE      ";
24003a76:	481e      	ldr	r0, [pc, #120]	; (24003af0 <main+0x480>)
24003a78:	60a8      	str	r0, [r5, #8]
  specialModeMacroNames[2][0] = "Noise1    ";
24003a7a:	481e      	ldr	r0, [pc, #120]	; (24003af4 <main+0x484>)
24003a7c:	6618      	str	r0, [r3, #96]	; 0x60
  specialModeMacroNames[2][1] = "Noise2    ";
24003a7e:	481e      	ldr	r0, [pc, #120]	; (24003af8 <main+0x488>)
24003a80:	6658      	str	r0, [r3, #100]	; 0x64
  specialModeMacroNames[2][2] = "Tone      ";
24003a82:	481e      	ldr	r0, [pc, #120]	; (24003afc <main+0x48c>)
24003a84:	6698      	str	r0, [r3, #104]	; 0x68
  specialModeMacroNames[2][4] = "Stretch   ";
24003a86:	481e      	ldr	r0, [pc, #120]	; (24003b00 <main+0x490>)
24003a88:	6718      	str	r0, [r3, #112]	; 0x70
  specialModeMacroNames[2][5] = "RandDecy  ";
24003a8a:	481e      	ldr	r0, [pc, #120]	; (24003b04 <main+0x494>)
  specialModeMacroNames[0][6] = "          ";
24003a8c:	e9c3 2205 	strd	r2, r2, [r3, #20]
  specialModeMacroNames[0][8] = "          ";
24003a90:	e9c3 2207 	strd	r2, r2, [r3, #28]
  specialModeMacroNames[0][11] = "         ";
24003a94:	e9c3 110a 	strd	r1, r1, [r3, #40]	; 0x28
  specialModeMacroNames[2][5] = "RandDecy  ";
24003a98:	6758      	str	r0, [r3, #116]	; 0x74
  specialModeMacroNames[2][11] = "         ";
24003a9a:	2050      	movs	r0, #80	; 0x50
  specialModeMacroNames[2][9] = "          ";
24003a9c:	e9c3 2220 	strd	r2, r2, [r3, #128]	; 0x80
  specialModeMacroNames[2][6] = "RandGain  ";
24003aa0:	4a19      	ldr	r2, [pc, #100]	; (24003b08 <main+0x498>)
24003aa2:	679a      	str	r2, [r3, #120]	; 0x78
  specialModeMacroNames[2][7] = "NoiseVol  ";
24003aa4:	4a19      	ldr	r2, [pc, #100]	; (24003b0c <main+0x49c>)
24003aa6:	67da      	str	r2, [r3, #124]	; 0x7c
  for (int i = 0; i < 3; i++)
24003aa8:	461a      	mov	r2, r3
  specialModeMacroNames[2][11] = "         ";
24003aaa:	e9c3 1122 	strd	r1, r1, [r3, #136]	; 0x88
24003aae:	e02f      	b.n	24003b10 <main+0x4a0>
24003ab0:	24019ff4 	.word	0x24019ff4
24003ab4:	30043380 	.word	0x30043380
24003ab8:	2401a000 	.word	0x2401a000
24003abc:	2401a00c 	.word	0x2401a00c
24003ac0:	2401a030 	.word	0x2401a030
24003ac4:	2401a040 	.word	0x2401a040
24003ac8:	2401a04c 	.word	0x2401a04c
24003acc:	2401a058 	.word	0x2401a058
24003ad0:	2401a070 	.word	0x2401a070
24003ad4:	2401a07c 	.word	0x2401a07c
24003ad8:	2401a088 	.word	0x2401a088
24003adc:	2401a094 	.word	0x2401a094
24003ae0:	2401a0a0 	.word	0x2401a0a0
24003ae4:	2401a0ac 	.word	0x2401a0ac
24003ae8:	2401a0b8 	.word	0x2401a0b8
24003aec:	2401a0c4 	.word	0x2401a0c4
24003af0:	2401a0d0 	.word	0x2401a0d0
24003af4:	2401a0e0 	.word	0x2401a0e0
24003af8:	2401a0ec 	.word	0x2401a0ec
24003afc:	2401a0f8 	.word	0x2401a0f8
24003b00:	2401a104 	.word	0x2401a104
24003b04:	2401a110 	.word	0x2401a110
24003b08:	2401a11c 	.word	0x2401a11c
24003b0c:	2401a128 	.word	0x2401a128
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
24003b10:	f855 1b04 	ldr.w	r1, [r5], #4
24003b14:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
24003b18:	f8d2 c000 	ldr.w	ip, [r2]
  for (int i = 0; i < 3; i++)
24003b1c:	3230      	adds	r2, #48	; 0x30
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
24003b1e:	f807 0013 	strb.w	r0, [r7, r3, lsl #1]
24003b22:	eb07 0343 	add.w	r3, r7, r3, lsl #1
24003b26:	7848      	ldrb	r0, [r1, #1]
24003b28:	7058      	strb	r0, [r3, #1]
24003b2a:	7888      	ldrb	r0, [r1, #2]
24003b2c:	7098      	strb	r0, [r3, #2]
24003b2e:	78c8      	ldrb	r0, [r1, #3]
24003b30:	70d8      	strb	r0, [r3, #3]
24003b32:	7908      	ldrb	r0, [r1, #4]
24003b34:	7118      	strb	r0, [r3, #4]
24003b36:	7948      	ldrb	r0, [r1, #5]
24003b38:	7158      	strb	r0, [r3, #5]
24003b3a:	7988      	ldrb	r0, [r1, #6]
24003b3c:	7198      	strb	r0, [r3, #6]
24003b3e:	79c8      	ldrb	r0, [r1, #7]
24003b40:	71d8      	strb	r0, [r3, #7]
24003b42:	7a08      	ldrb	r0, [r1, #8]
24003b44:	7218      	strb	r0, [r3, #8]
24003b46:	7a48      	ldrb	r0, [r1, #9]
24003b48:	7258      	strb	r0, [r3, #9]
24003b4a:	7a88      	ldrb	r0, [r1, #10]
24003b4c:	7298      	strb	r0, [r3, #10]
24003b4e:	7ac8      	ldrb	r0, [r1, #11]
24003b50:	72d8      	strb	r0, [r3, #11]
24003b52:	7b08      	ldrb	r0, [r1, #12]
24003b54:	7318      	strb	r0, [r3, #12]
24003b56:	7b49      	ldrb	r1, [r1, #13]
24003b58:	7359      	strb	r1, [r3, #13]
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
24003b5a:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
24003b5e:	f89c 1000 	ldrb.w	r1, [ip]
  for (int i = 0; i < 3; i++)
24003b62:	3c01      	subs	r4, #1
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
24003b64:	f806 1033 	strb.w	r1, [r6, r3, lsl #3]
24003b68:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
24003b6c:	f89c 1001 	ldrb.w	r1, [ip, #1]
  for (int i = 0; i < 3; i++)
24003b70:	2c3c      	cmp	r4, #60	; 0x3c
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
24003b72:	7059      	strb	r1, [r3, #1]
24003b74:	f89c 1002 	ldrb.w	r1, [ip, #2]
24003b78:	f852 0c2c 	ldr.w	r0, [r2, #-44]
24003b7c:	7099      	strb	r1, [r3, #2]
24003b7e:	f89c 1003 	ldrb.w	r1, [ip, #3]
24003b82:	70d9      	strb	r1, [r3, #3]
24003b84:	f89c 1004 	ldrb.w	r1, [ip, #4]
24003b88:	7119      	strb	r1, [r3, #4]
24003b8a:	f89c 1005 	ldrb.w	r1, [ip, #5]
24003b8e:	7159      	strb	r1, [r3, #5]
24003b90:	f89c 1006 	ldrb.w	r1, [ip, #6]
24003b94:	7199      	strb	r1, [r3, #6]
24003b96:	f89c 1007 	ldrb.w	r1, [ip, #7]
24003b9a:	71d9      	strb	r1, [r3, #7]
24003b9c:	f89c 1008 	ldrb.w	r1, [ip, #8]
24003ba0:	7219      	strb	r1, [r3, #8]
24003ba2:	f89c 1009 	ldrb.w	r1, [ip, #9]
24003ba6:	7259      	strb	r1, [r3, #9]
24003ba8:	7801      	ldrb	r1, [r0, #0]
24003baa:	7299      	strb	r1, [r3, #10]
24003bac:	7841      	ldrb	r1, [r0, #1]
24003bae:	72d9      	strb	r1, [r3, #11]
24003bb0:	7881      	ldrb	r1, [r0, #2]
24003bb2:	7319      	strb	r1, [r3, #12]
24003bb4:	78c1      	ldrb	r1, [r0, #3]
24003bb6:	7359      	strb	r1, [r3, #13]
24003bb8:	7901      	ldrb	r1, [r0, #4]
24003bba:	7399      	strb	r1, [r3, #14]
24003bbc:	7941      	ldrb	r1, [r0, #5]
24003bbe:	73d9      	strb	r1, [r3, #15]
24003bc0:	7981      	ldrb	r1, [r0, #6]
24003bc2:	7419      	strb	r1, [r3, #16]
24003bc4:	79c1      	ldrb	r1, [r0, #7]
24003bc6:	7459      	strb	r1, [r3, #17]
24003bc8:	7a01      	ldrb	r1, [r0, #8]
24003bca:	7499      	strb	r1, [r3, #18]
24003bcc:	f852 1c28 	ldr.w	r1, [r2, #-40]
24003bd0:	7a40      	ldrb	r0, [r0, #9]
24003bd2:	74d8      	strb	r0, [r3, #19]
24003bd4:	7808      	ldrb	r0, [r1, #0]
24003bd6:	7518      	strb	r0, [r3, #20]
24003bd8:	7848      	ldrb	r0, [r1, #1]
24003bda:	7558      	strb	r0, [r3, #21]
24003bdc:	7888      	ldrb	r0, [r1, #2]
24003bde:	7598      	strb	r0, [r3, #22]
24003be0:	78c8      	ldrb	r0, [r1, #3]
24003be2:	75d8      	strb	r0, [r3, #23]
24003be4:	7908      	ldrb	r0, [r1, #4]
24003be6:	7618      	strb	r0, [r3, #24]
24003be8:	7948      	ldrb	r0, [r1, #5]
24003bea:	7658      	strb	r0, [r3, #25]
24003bec:	7988      	ldrb	r0, [r1, #6]
24003bee:	7698      	strb	r0, [r3, #26]
24003bf0:	79c8      	ldrb	r0, [r1, #7]
24003bf2:	76d8      	strb	r0, [r3, #27]
24003bf4:	7a08      	ldrb	r0, [r1, #8]
24003bf6:	7718      	strb	r0, [r3, #28]
24003bf8:	f852 0c24 	ldr.w	r0, [r2, #-36]
24003bfc:	7a49      	ldrb	r1, [r1, #9]
24003bfe:	7759      	strb	r1, [r3, #29]
24003c00:	7801      	ldrb	r1, [r0, #0]
24003c02:	7799      	strb	r1, [r3, #30]
24003c04:	7841      	ldrb	r1, [r0, #1]
24003c06:	77d9      	strb	r1, [r3, #31]
24003c08:	7881      	ldrb	r1, [r0, #2]
24003c0a:	f883 1020 	strb.w	r1, [r3, #32]
24003c0e:	78c1      	ldrb	r1, [r0, #3]
24003c10:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
24003c14:	7901      	ldrb	r1, [r0, #4]
24003c16:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
24003c1a:	7941      	ldrb	r1, [r0, #5]
24003c1c:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
24003c20:	7981      	ldrb	r1, [r0, #6]
24003c22:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
24003c26:	79c1      	ldrb	r1, [r0, #7]
24003c28:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
24003c2c:	7a01      	ldrb	r1, [r0, #8]
24003c2e:	f883 1026 	strb.w	r1, [r3, #38]	; 0x26
24003c32:	f852 1c20 	ldr.w	r1, [r2, #-32]
24003c36:	7a40      	ldrb	r0, [r0, #9]
24003c38:	f883 0027 	strb.w	r0, [r3, #39]	; 0x27
24003c3c:	7808      	ldrb	r0, [r1, #0]
24003c3e:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
24003c42:	7848      	ldrb	r0, [r1, #1]
24003c44:	f883 0029 	strb.w	r0, [r3, #41]	; 0x29
24003c48:	7888      	ldrb	r0, [r1, #2]
24003c4a:	f883 002a 	strb.w	r0, [r3, #42]	; 0x2a
24003c4e:	78c8      	ldrb	r0, [r1, #3]
24003c50:	f883 002b 	strb.w	r0, [r3, #43]	; 0x2b
24003c54:	7908      	ldrb	r0, [r1, #4]
24003c56:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
24003c5a:	7948      	ldrb	r0, [r1, #5]
24003c5c:	f883 002d 	strb.w	r0, [r3, #45]	; 0x2d
24003c60:	7988      	ldrb	r0, [r1, #6]
24003c62:	f883 002e 	strb.w	r0, [r3, #46]	; 0x2e
24003c66:	79c8      	ldrb	r0, [r1, #7]
24003c68:	f883 002f 	strb.w	r0, [r3, #47]	; 0x2f
24003c6c:	7a08      	ldrb	r0, [r1, #8]
24003c6e:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
24003c72:	7a48      	ldrb	r0, [r1, #9]
24003c74:	f852 1c1c 	ldr.w	r1, [r2, #-28]
24003c78:	f883 0031 	strb.w	r0, [r3, #49]	; 0x31
24003c7c:	f891 c000 	ldrb.w	ip, [r1]
24003c80:	f852 0c18 	ldr.w	r0, [r2, #-24]
24003c84:	f883 c032 	strb.w	ip, [r3, #50]	; 0x32
24003c88:	f891 c001 	ldrb.w	ip, [r1, #1]
24003c8c:	f883 c033 	strb.w	ip, [r3, #51]	; 0x33
24003c90:	f891 c002 	ldrb.w	ip, [r1, #2]
24003c94:	f883 c034 	strb.w	ip, [r3, #52]	; 0x34
24003c98:	f891 c003 	ldrb.w	ip, [r1, #3]
24003c9c:	f883 c035 	strb.w	ip, [r3, #53]	; 0x35
24003ca0:	f891 c004 	ldrb.w	ip, [r1, #4]
24003ca4:	f883 c036 	strb.w	ip, [r3, #54]	; 0x36
24003ca8:	f891 c005 	ldrb.w	ip, [r1, #5]
24003cac:	f883 c037 	strb.w	ip, [r3, #55]	; 0x37
24003cb0:	f891 c006 	ldrb.w	ip, [r1, #6]
24003cb4:	f883 c038 	strb.w	ip, [r3, #56]	; 0x38
24003cb8:	f891 c007 	ldrb.w	ip, [r1, #7]
24003cbc:	f883 c039 	strb.w	ip, [r3, #57]	; 0x39
24003cc0:	f891 c008 	ldrb.w	ip, [r1, #8]
24003cc4:	f883 c03a 	strb.w	ip, [r3, #58]	; 0x3a
24003cc8:	7a49      	ldrb	r1, [r1, #9]
24003cca:	f883 103b 	strb.w	r1, [r3, #59]	; 0x3b
24003cce:	7801      	ldrb	r1, [r0, #0]
24003cd0:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
24003cd4:	7841      	ldrb	r1, [r0, #1]
24003cd6:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
24003cda:	7881      	ldrb	r1, [r0, #2]
24003cdc:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
24003ce0:	78c1      	ldrb	r1, [r0, #3]
24003ce2:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
24003ce6:	7901      	ldrb	r1, [r0, #4]
24003ce8:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
24003cec:	7941      	ldrb	r1, [r0, #5]
24003cee:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
24003cf2:	7981      	ldrb	r1, [r0, #6]
24003cf4:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
24003cf8:	79c1      	ldrb	r1, [r0, #7]
24003cfa:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
24003cfe:	7a01      	ldrb	r1, [r0, #8]
24003d00:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
24003d04:	f852 1c14 	ldr.w	r1, [r2, #-20]
24003d08:	7a40      	ldrb	r0, [r0, #9]
24003d0a:	f883 0045 	strb.w	r0, [r3, #69]	; 0x45
24003d0e:	7808      	ldrb	r0, [r1, #0]
24003d10:	f883 0046 	strb.w	r0, [r3, #70]	; 0x46
24003d14:	7848      	ldrb	r0, [r1, #1]
24003d16:	f883 0047 	strb.w	r0, [r3, #71]	; 0x47
24003d1a:	7888      	ldrb	r0, [r1, #2]
24003d1c:	f883 0048 	strb.w	r0, [r3, #72]	; 0x48
24003d20:	78c8      	ldrb	r0, [r1, #3]
24003d22:	f883 0049 	strb.w	r0, [r3, #73]	; 0x49
24003d26:	7908      	ldrb	r0, [r1, #4]
24003d28:	f883 004a 	strb.w	r0, [r3, #74]	; 0x4a
24003d2c:	7948      	ldrb	r0, [r1, #5]
24003d2e:	f883 004b 	strb.w	r0, [r3, #75]	; 0x4b
24003d32:	7988      	ldrb	r0, [r1, #6]
24003d34:	f883 004c 	strb.w	r0, [r3, #76]	; 0x4c
24003d38:	79c8      	ldrb	r0, [r1, #7]
24003d3a:	f883 004d 	strb.w	r0, [r3, #77]	; 0x4d
24003d3e:	7a08      	ldrb	r0, [r1, #8]
24003d40:	f883 004e 	strb.w	r0, [r3, #78]	; 0x4e
24003d44:	7a49      	ldrb	r1, [r1, #9]
24003d46:	f883 104f 	strb.w	r1, [r3, #79]	; 0x4f
24003d4a:	f852 0c10 	ldr.w	r0, [r2, #-16]
24003d4e:	7801      	ldrb	r1, [r0, #0]
24003d50:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
24003d54:	7841      	ldrb	r1, [r0, #1]
24003d56:	f883 1051 	strb.w	r1, [r3, #81]	; 0x51
24003d5a:	7881      	ldrb	r1, [r0, #2]
24003d5c:	f883 1052 	strb.w	r1, [r3, #82]	; 0x52
24003d60:	78c1      	ldrb	r1, [r0, #3]
24003d62:	f883 1053 	strb.w	r1, [r3, #83]	; 0x53
24003d66:	7901      	ldrb	r1, [r0, #4]
24003d68:	f883 1054 	strb.w	r1, [r3, #84]	; 0x54
24003d6c:	7941      	ldrb	r1, [r0, #5]
24003d6e:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
24003d72:	7981      	ldrb	r1, [r0, #6]
24003d74:	f883 1056 	strb.w	r1, [r3, #86]	; 0x56
24003d78:	79c1      	ldrb	r1, [r0, #7]
24003d7a:	f883 1057 	strb.w	r1, [r3, #87]	; 0x57
24003d7e:	7a01      	ldrb	r1, [r0, #8]
24003d80:	f883 1058 	strb.w	r1, [r3, #88]	; 0x58
24003d84:	f852 1c0c 	ldr.w	r1, [r2, #-12]
24003d88:	7a40      	ldrb	r0, [r0, #9]
24003d8a:	f883 0059 	strb.w	r0, [r3, #89]	; 0x59
24003d8e:	7808      	ldrb	r0, [r1, #0]
24003d90:	f883 005a 	strb.w	r0, [r3, #90]	; 0x5a
24003d94:	7848      	ldrb	r0, [r1, #1]
24003d96:	f883 005b 	strb.w	r0, [r3, #91]	; 0x5b
24003d9a:	7888      	ldrb	r0, [r1, #2]
24003d9c:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
24003da0:	78c8      	ldrb	r0, [r1, #3]
24003da2:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
24003da6:	7908      	ldrb	r0, [r1, #4]
24003da8:	f883 005e 	strb.w	r0, [r3, #94]	; 0x5e
24003dac:	7948      	ldrb	r0, [r1, #5]
24003dae:	f883 005f 	strb.w	r0, [r3, #95]	; 0x5f
24003db2:	7988      	ldrb	r0, [r1, #6]
24003db4:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
24003db8:	79c8      	ldrb	r0, [r1, #7]
24003dba:	f883 0061 	strb.w	r0, [r3, #97]	; 0x61
24003dbe:	7a08      	ldrb	r0, [r1, #8]
24003dc0:	f883 0062 	strb.w	r0, [r3, #98]	; 0x62
24003dc4:	f852 0c08 	ldr.w	r0, [r2, #-8]
24003dc8:	7a49      	ldrb	r1, [r1, #9]
24003dca:	f883 1063 	strb.w	r1, [r3, #99]	; 0x63
24003dce:	7801      	ldrb	r1, [r0, #0]
24003dd0:	f883 1064 	strb.w	r1, [r3, #100]	; 0x64
24003dd4:	7841      	ldrb	r1, [r0, #1]
24003dd6:	f883 1065 	strb.w	r1, [r3, #101]	; 0x65
24003dda:	7881      	ldrb	r1, [r0, #2]
24003ddc:	f883 1066 	strb.w	r1, [r3, #102]	; 0x66
24003de0:	78c1      	ldrb	r1, [r0, #3]
24003de2:	f883 1067 	strb.w	r1, [r3, #103]	; 0x67
24003de6:	7901      	ldrb	r1, [r0, #4]
24003de8:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
24003dec:	7941      	ldrb	r1, [r0, #5]
24003dee:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
24003df2:	7981      	ldrb	r1, [r0, #6]
24003df4:	f883 106a 	strb.w	r1, [r3, #106]	; 0x6a
24003df8:	79c1      	ldrb	r1, [r0, #7]
24003dfa:	f883 106b 	strb.w	r1, [r3, #107]	; 0x6b
24003dfe:	7a01      	ldrb	r1, [r0, #8]
24003e00:	f883 106c 	strb.w	r1, [r3, #108]	; 0x6c
24003e04:	f852 1c04 	ldr.w	r1, [r2, #-4]
24003e08:	7a40      	ldrb	r0, [r0, #9]
24003e0a:	f883 006d 	strb.w	r0, [r3, #109]	; 0x6d
24003e0e:	7808      	ldrb	r0, [r1, #0]
24003e10:	f883 006e 	strb.w	r0, [r3, #110]	; 0x6e
24003e14:	7848      	ldrb	r0, [r1, #1]
24003e16:	f883 006f 	strb.w	r0, [r3, #111]	; 0x6f
24003e1a:	7888      	ldrb	r0, [r1, #2]
24003e1c:	f883 0070 	strb.w	r0, [r3, #112]	; 0x70
24003e20:	78c8      	ldrb	r0, [r1, #3]
24003e22:	f883 0071 	strb.w	r0, [r3, #113]	; 0x71
24003e26:	7908      	ldrb	r0, [r1, #4]
24003e28:	f883 0072 	strb.w	r0, [r3, #114]	; 0x72
24003e2c:	7948      	ldrb	r0, [r1, #5]
24003e2e:	f883 0073 	strb.w	r0, [r3, #115]	; 0x73
24003e32:	7988      	ldrb	r0, [r1, #6]
24003e34:	f883 0074 	strb.w	r0, [r3, #116]	; 0x74
24003e38:	79c8      	ldrb	r0, [r1, #7]
24003e3a:	f883 0075 	strb.w	r0, [r3, #117]	; 0x75
24003e3e:	7a08      	ldrb	r0, [r1, #8]
24003e40:	f883 0076 	strb.w	r0, [r3, #118]	; 0x76
24003e44:	7a49      	ldrb	r1, [r1, #9]
24003e46:	f883 1077 	strb.w	r1, [r3, #119]	; 0x77
  for (int i = 0; i < 3; i++)
24003e4a:	d002      	beq.n	24003e52 <main+0x7e2>
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
24003e4c:	682b      	ldr	r3, [r5, #0]
24003e4e:	7818      	ldrb	r0, [r3, #0]
24003e50:	e65e      	b.n	24003b10 <main+0x4a0>
  HAL_SPI_TransmitReceive_DMA(&hspi6, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
24003e52:	4a9e      	ldr	r2, [pc, #632]	; (240040cc <main+0xa5c>)
24003e54:	2340      	movs	r3, #64	; 0x40
24003e56:	489e      	ldr	r0, [pc, #632]	; (240040d0 <main+0xa60>)
24003e58:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
	  if (rand > TWO_TO_31)
24003e5c:	eddf 8a9d 	vldr	s17, [pc, #628]	; 240040d4 <main+0xa64>
  HAL_SPI_TransmitReceive_DMA(&hspi6, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
24003e60:	f007 fcbc 	bl	2400b7dc <HAL_SPI_TransmitReceive_DMA>
  HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
24003e64:	4a9c      	ldr	r2, [pc, #624]	; (240040d8 <main+0xa68>)
24003e66:	2340      	movs	r3, #64	; 0x40
24003e68:	489c      	ldr	r0, [pc, #624]	; (240040dc <main+0xa6c>)
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
24003e6a:	ed9f 8a9d 	vldr	s16, [pc, #628]	; 240040e0 <main+0xa70>
  HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
24003e6e:	18d1      	adds	r1, r2, r3
24003e70:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 2400413c <main+0xacc>
24003e74:	f007 fcb2 	bl	2400b7dc <HAL_SPI_TransmitReceive_DMA>
    audioStart(&hsai_BlockB1, &hsai_BlockA1);
24003e78:	4b9a      	ldr	r3, [pc, #616]	; (240040e4 <main+0xa74>)
24003e7a:	499b      	ldr	r1, [pc, #620]	; (240040e8 <main+0xa78>)
24003e7c:	f003 0207 	and.w	r2, r3, #7
24003e80:	489a      	ldr	r0, [pc, #616]	; (240040ec <main+0xa7c>)
24003e82:	f503 6480 	add.w	r4, r3, #1024	; 0x400
24003e86:	4f9a      	ldr	r7, [pc, #616]	; (240040f0 <main+0xa80>)
24003e88:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 24004140 <main+0xad0>
24003e8c:	4d99      	ldr	r5, [pc, #612]	; (240040f4 <main+0xa84>)
24003e8e:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 24004144 <main+0xad4>
24003e92:	9202      	str	r2, [sp, #8]
24003e94:	f7fd fedc 	bl	24001c50 <audioStart>
24003e98:	e02a      	b.n	24003ef0 <main+0x880>
	  if ((stringInputs[0] == 0) && (stringInputs[1] == 0))
24003e9a:	883b      	ldrh	r3, [r7, #0]
24003e9c:	b29b      	uxth	r3, r3
24003e9e:	b913      	cbnz	r3, 24003ea6 <main+0x836>
24003ea0:	887a      	ldrh	r2, [r7, #2]
24003ea2:	b292      	uxth	r2, r2
24003ea4:	b102      	cbz	r2, 24003ea8 <main+0x838>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
24003ea6:	2201      	movs	r2, #1
24003ea8:	2180      	movs	r1, #128	; 0x80
24003eaa:	4893      	ldr	r0, [pc, #588]	; (240040f8 <main+0xa88>)
24003eac:	f002 ffa0 	bl	24006df0 <HAL_GPIO_WritePin>
	  if (brainFirmwareUpdateRequested)
24003eb0:	f8da 3000 	ldr.w	r3, [sl]
24003eb4:	2b00      	cmp	r3, #0
24003eb6:	d13e      	bne.n	24003f36 <main+0x8c6>
	  HAL_RNG_GenerateRandomNumber(&hrng, &rand);
24003eb8:	a90b      	add	r1, sp, #44	; 0x2c
24003eba:	4890      	ldr	r0, [pc, #576]	; (240040fc <main+0xa8c>)
24003ebc:	f005 ffaa 	bl	24009e14 <HAL_RNG_GenerateRandomNumber>
	  if (rand > TWO_TO_31)
24003ec0:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
24003ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
24003ec8:	eef4 7ae8 	vcmpe.f32	s15, s17
24003ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24003ed0:	dd03      	ble.n	24003eda <main+0x86a>
		  myTestInt++;
24003ed2:	4a8b      	ldr	r2, [pc, #556]	; (24004100 <main+0xa90>)
24003ed4:	6813      	ldr	r3, [r2, #0]
24003ed6:	3301      	adds	r3, #1
24003ed8:	6013      	str	r3, [r2, #0]
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
24003eda:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
24003ede:	782b      	ldrb	r3, [r5, #0]
24003ee0:	1c5a      	adds	r2, r3, #1
24003ee2:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
24003ee6:	eea7 7a88 	vfma.f32	s14, s15, s16
24003eea:	702a      	strb	r2, [r5, #0]
24003eec:	ed83 7a00 	vstr	s14, [r3]
	  if (boardNumber == 0)
24003ef0:	f898 3000 	ldrb.w	r3, [r8]
24003ef4:	b953      	cbnz	r3, 24003f0c <main+0x89c>
		  if (presetWaitingToLoad > 0)
24003ef6:	4b83      	ldr	r3, [pc, #524]	; (24004104 <main+0xa94>)
24003ef8:	681e      	ldr	r6, [r3, #0]
24003efa:	2e00      	cmp	r6, #0
24003efc:	d053      	beq.n	24003fa6 <main+0x936>
			  if (!i2cSending)
24003efe:	4b82      	ldr	r3, [pc, #520]	; (24004108 <main+0xa98>)
24003f00:	781b      	ldrb	r3, [r3, #0]
24003f02:	f003 06ff 	and.w	r6, r3, #255	; 0xff
24003f06:	2b00      	cmp	r3, #0
24003f08:	f000 809e 	beq.w	24004048 <main+0x9d8>
	  if (presetWaitingToParse > 0)
24003f0c:	f8d9 3000 	ldr.w	r3, [r9]
24003f10:	2b00      	cmp	r3, #0
24003f12:	d0c2      	beq.n	24003e9a <main+0x82a>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
24003f14:	2201      	movs	r2, #1
24003f16:	2180      	movs	r1, #128	; 0x80
24003f18:	487c      	ldr	r0, [pc, #496]	; (2400410c <main+0xa9c>)
24003f1a:	f002 ff69 	bl	24006df0 <HAL_GPIO_WritePin>
		  parsePreset(presetWaitingToParse, presetNumberToLoad);
24003f1e:	4b7c      	ldr	r3, [pc, #496]	; (24004110 <main+0xaa0>)
24003f20:	f8d9 0000 	ldr.w	r0, [r9]
24003f24:	7819      	ldrb	r1, [r3, #0]
24003f26:	f02f fcc3 	bl	240338b0 <__parsePreset_veneer>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
24003f2a:	2200      	movs	r2, #0
24003f2c:	2180      	movs	r1, #128	; 0x80
24003f2e:	4877      	ldr	r0, [pc, #476]	; (2400410c <main+0xa9c>)
24003f30:	f002 ff5e 	bl	24006df0 <HAL_GPIO_WritePin>
24003f34:	e7b1      	b.n	24003e9a <main+0x82a>
	if (boardNumber == 0)
24003f36:	f898 6000 	ldrb.w	r6, [r8]
24003f3a:	2e00      	cmp	r6, #0
24003f3c:	d1bc      	bne.n	24003eb8 <main+0x848>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
24003f3e:	2201      	movs	r2, #1
24003f40:	486d      	ldr	r0, [pc, #436]	; (240040f8 <main+0xa88>)
24003f42:	4611      	mov	r1, r2
24003f44:	f002 ff54 	bl	24006df0 <HAL_GPIO_WritePin>
  __IO uint8_t status = SD_PRESENT;
24003f48:	2301      	movs	r3, #1
24003f4a:	f88d 3017 	strb.w	r3, [sp, #23]
  return status;
24003f4e:	f89d 3017 	ldrb.w	r3, [sp, #23]
		if(BSP_SD_IsDetected())
24003f52:	b1f3      	cbz	r3, 24003f92 <main+0x922>
24003f54:	9b02      	ldr	r3, [sp, #8]
24003f56:	2b00      	cmp	r3, #0
24003f58:	f040 8194 	bne.w	24004284 <main+0xc14>
24003f5c:	4b61      	ldr	r3, [pc, #388]	; (240040e4 <main+0xa74>)
				audioOutBuffer[i] = 0;
24003f5e:	2000      	movs	r0, #0
24003f60:	2100      	movs	r1, #0
24003f62:	e8e3 0102 	strd	r0, r1, [r3], #8
			for (uint_fast16_t i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
24003f66:	429c      	cmp	r4, r3
24003f68:	d1fb      	bne.n	24003f62 <main+0x8f2>
			loadFailed = 0;
24003f6a:	2600      	movs	r6, #0
24003f6c:	4b69      	ldr	r3, [pc, #420]	; (24004114 <main+0xaa4>)
			diskBusy = 1;
24003f6e:	2201      	movs	r2, #1
			loadFailed = 0;
24003f70:	701e      	strb	r6, [r3, #0]
			disk_initialize(0);
24003f72:	4630      	mov	r0, r6
			diskBusy = 1;
24003f74:	4b68      	ldr	r3, [pc, #416]	; (24004118 <main+0xaa8>)
24003f76:	701a      	strb	r2, [r3, #0]
			disk_initialize(0);
24003f78:	f009 fba6 	bl	2400d6c8 <disk_initialize>
			disk_status(0);
24003f7c:	4630      	mov	r0, r6
24003f7e:	f009 fb99 	bl	2400d6b4 <disk_status>
			if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
24003f82:	2201      	movs	r2, #1
24003f84:	4965      	ldr	r1, [pc, #404]	; (2400411c <main+0xaac>)
24003f86:	4866      	ldr	r0, [pc, #408]	; (24004120 <main+0xab0>)
24003f88:	f00b fd72 	bl	2400fa70 <f_mount>
24003f8c:	2800      	cmp	r0, #0
24003f8e:	f000 80db 	beq.w	24004148 <main+0xad8>
		brainFirmwareUpdateRequested = 0;
24003f92:	2200      	movs	r2, #0
		diskBusy = 0;
24003f94:	4b60      	ldr	r3, [pc, #384]	; (24004118 <main+0xaa8>)
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
24003f96:	2101      	movs	r1, #1
24003f98:	4857      	ldr	r0, [pc, #348]	; (240040f8 <main+0xa88>)
		brainFirmwareUpdateRequested = 0;
24003f9a:	f8ca 2000 	str.w	r2, [sl]
		diskBusy = 0;
24003f9e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
24003fa0:	f002 ff26 	bl	24006df0 <HAL_GPIO_WritePin>
24003fa4:	e788      	b.n	24003eb8 <main+0x848>
		  else if (presetWaitingToWrite > 0)
24003fa6:	4b5f      	ldr	r3, [pc, #380]	; (24004124 <main+0xab4>)
24003fa8:	681b      	ldr	r3, [r3, #0]
24003faa:	2b00      	cmp	r3, #0
24003fac:	d0ae      	beq.n	24003f0c <main+0x89c>
				  writePresetToSDCard(presetWaitingToWrite);
24003fae:	4b5d      	ldr	r3, [pc, #372]	; (24004124 <main+0xab4>)
24003fb0:	681b      	ldr	r3, [r3, #0]
24003fb2:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
24003fb4:	b672      	cpsid	i
		 audioOutBuffer[i] = 0;
24003fb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
24003fba:	4631      	mov	r1, r6
24003fbc:	4849      	ldr	r0, [pc, #292]	; (240040e4 <main+0xa74>)
24003fbe:	f013 fd3f 	bl	24017a40 <memset>
  __IO uint8_t status = SD_PRESENT;
24003fc2:	2301      	movs	r3, #1
24003fc4:	f88d 3016 	strb.w	r3, [sp, #22]
  return status;
24003fc8:	f89d 3016 	ldrb.w	r3, [sp, #22]
	if(BSP_SD_IsDetected())
24003fcc:	2b00      	cmp	r3, #0
24003fce:	d034      	beq.n	2400403a <main+0x9ca>
24003fd0:	9b02      	ldr	r3, [sp, #8]
24003fd2:	2b00      	cmp	r3, #0
24003fd4:	f040 815d 	bne.w	24004292 <main+0xc22>
24003fd8:	4b42      	ldr	r3, [pc, #264]	; (240040e4 <main+0xa74>)
					audioOutBuffer[i] = 0;
24003fda:	2000      	movs	r0, #0
24003fdc:	2100      	movs	r1, #0
24003fde:	e8e3 0102 	strd	r0, r1, [r3], #8
				for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
24003fe2:	42a3      	cmp	r3, r4
24003fe4:	d1fb      	bne.n	24003fde <main+0x96e>
				diskBusy = 1;
24003fe6:	2301      	movs	r3, #1
24003fe8:	4a4b      	ldr	r2, [pc, #300]	; (24004118 <main+0xaa8>)
24003fea:	7013      	strb	r3, [r2, #0]
			    if (presetNumberToSave > 99)
24003fec:	4a4e      	ldr	r2, [pc, #312]	; (24004128 <main+0xab8>)
24003fee:	7813      	ldrb	r3, [r2, #0]
24003ff0:	2b63      	cmp	r3, #99	; 0x63
24003ff2:	d901      	bls.n	24003ff8 <main+0x988>
			        presetNumberToSave = 99;
24003ff4:	2363      	movs	r3, #99	; 0x63
24003ff6:	7013      	strb	r3, [r2, #0]
				itoa(presetNumberToSave, charBuf, 10);
24003ff8:	4b4b      	ldr	r3, [pc, #300]	; (24004128 <main+0xab8>)
24003ffa:	220a      	movs	r2, #10
24003ffc:	a908      	add	r1, sp, #32
24003ffe:	7818      	ldrb	r0, [r3, #0]
24004000:	f013 fcda 	bl	240179b8 <itoa>
				int len = ((strlen(charBuf)));
24004004:	a808      	add	r0, sp, #32
24004006:	f7fc f967 	bl	240002d8 <strlen>
				if (len == 1)
2400400a:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
2400400c:	4602      	mov	r2, r0
				if (len == 1)
2400400e:	f000 80d0 	beq.w	240041b2 <main+0xb42>
					strcat(charBuf, ".ebp");
24004012:	4946      	ldr	r1, [pc, #280]	; (2400412c <main+0xabc>)
24004014:	ab08      	add	r3, sp, #32
24004016:	6808      	ldr	r0, [r1, #0]
24004018:	7909      	ldrb	r1, [r1, #4]
2400401a:	5098      	str	r0, [r3, r2]
2400401c:	4413      	add	r3, r2
					strcpy(finalString, charBuf);
2400401e:	a80b      	add	r0, sp, #44	; 0x2c
24004020:	3205      	adds	r2, #5
					strcat(charBuf, ".ebp");
24004022:	7119      	strb	r1, [r3, #4]
					strcpy(finalString, charBuf);
24004024:	a908      	add	r1, sp, #32
24004026:	f013 fd3d 	bl	24017aa4 <memcpy>
				if(f_open(&SDFile, finalString, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
2400402a:	220a      	movs	r2, #10
2400402c:	a90b      	add	r1, sp, #44	; 0x2c
2400402e:	4840      	ldr	r0, [pc, #256]	; (24004130 <main+0xac0>)
24004030:	f00b fd6a 	bl	2400fb08 <f_open>
24004034:	2800      	cmp	r0, #0
24004036:	f000 80d3 	beq.w	240041e0 <main+0xb70>
	presetWaitingToWrite = 0;
2400403a:	2300      	movs	r3, #0
2400403c:	4a39      	ldr	r2, [pc, #228]	; (24004124 <main+0xab4>)
2400403e:	6013      	str	r3, [r2, #0]
	diskBusy = 0;
24004040:	4a35      	ldr	r2, [pc, #212]	; (24004118 <main+0xaa8>)
24004042:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
24004044:	b662      	cpsie	i
}
24004046:	e761      	b.n	24003f0c <main+0x89c>
				  checkForSDCardPreset(presetNumberToLoad);
24004048:	4b31      	ldr	r3, [pc, #196]	; (24004110 <main+0xaa0>)
	prevVoice = numberToLoad;
2400404a:	4a3a      	ldr	r2, [pc, #232]	; (24004134 <main+0xac4>)
				  checkForSDCardPreset(presetNumberToLoad);
2400404c:	781b      	ldrb	r3, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
2400404e:	482a      	ldr	r0, [pc, #168]	; (240040f8 <main+0xa88>)
				  checkForSDCardPreset(presetNumberToLoad);
24004050:	b2db      	uxtb	r3, r3
	prevVoice = numberToLoad;
24004052:	6013      	str	r3, [r2, #0]
	voice = numberToLoad;
24004054:	4a38      	ldr	r2, [pc, #224]	; (24004138 <main+0xac8>)
24004056:	9303      	str	r3, [sp, #12]
24004058:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
2400405a:	2201      	movs	r2, #1
2400405c:	4611      	mov	r1, r2
2400405e:	f002 fec7 	bl	24006df0 <HAL_GPIO_WritePin>
  __IO uint8_t status = SD_PRESENT;
24004062:	2201      	movs	r2, #1
24004064:	f88d 2015 	strb.w	r2, [sp, #21]
  return status;
24004068:	f89d 2015 	ldrb.w	r2, [sp, #21]
	if(BSP_SD_IsDetected())
2400406c:	b31a      	cbz	r2, 240040b6 <main+0xa46>
2400406e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
24004072:	2a00      	cmp	r2, #0
24004074:	f040 8114 	bne.w	240042a0 <main+0xc30>
24004078:	4a1a      	ldr	r2, [pc, #104]	; (240040e4 <main+0xa74>)
			audioOutBuffer[i] = 0;
2400407a:	2000      	movs	r0, #0
2400407c:	2100      	movs	r1, #0
2400407e:	e8e2 0102 	strd	r0, r1, [r2], #8
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
24004082:	42a2      	cmp	r2, r4
24004084:	d1fb      	bne.n	2400407e <main+0xa0e>
		loadFailed = 0;
24004086:	2600      	movs	r6, #0
24004088:	9303      	str	r3, [sp, #12]
2400408a:	4b22      	ldr	r3, [pc, #136]	; (24004114 <main+0xaa4>)
		diskBusy = 1;
2400408c:	2201      	movs	r2, #1
		disk_initialize(0);
2400408e:	4630      	mov	r0, r6
		loadFailed = 0;
24004090:	701e      	strb	r6, [r3, #0]
		presetWaitingToLoad = 0;
24004092:	4b1c      	ldr	r3, [pc, #112]	; (24004104 <main+0xa94>)
24004094:	601e      	str	r6, [r3, #0]
		diskBusy = 1;
24004096:	4b20      	ldr	r3, [pc, #128]	; (24004118 <main+0xaa8>)
24004098:	701a      	strb	r2, [r3, #0]
		disk_initialize(0);
2400409a:	f009 fb15 	bl	2400d6c8 <disk_initialize>
	    disk_status(0);
2400409e:	4630      	mov	r0, r6
240040a0:	f009 fb08 	bl	2400d6b4 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
240040a4:	2201      	movs	r2, #1
240040a6:	491d      	ldr	r1, [pc, #116]	; (2400411c <main+0xaac>)
240040a8:	481d      	ldr	r0, [pc, #116]	; (24004120 <main+0xab0>)
240040aa:	f00b fce1 	bl	2400fa70 <f_mount>
240040ae:	9b03      	ldr	r3, [sp, #12]
240040b0:	2800      	cmp	r0, #0
240040b2:	f000 809f 	beq.w	240041f4 <main+0xb84>
		loadFailed = 1;
240040b6:	2301      	movs	r3, #1
240040b8:	4a16      	ldr	r2, [pc, #88]	; (24004114 <main+0xaa4>)
240040ba:	7013      	strb	r3, [r2, #0]
	diskBusy = 0;
240040bc:	2200      	movs	r2, #0
240040be:	4b16      	ldr	r3, [pc, #88]	; (24004118 <main+0xaa8>)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
240040c0:	2101      	movs	r1, #1
240040c2:	480d      	ldr	r0, [pc, #52]	; (240040f8 <main+0xa88>)
	diskBusy = 0;
240040c4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
240040c6:	f002 fe93 	bl	24006df0 <HAL_GPIO_WritePin>
	return found;
240040ca:	e71f      	b.n	24003f0c <main+0x89c>
240040cc:	38000040 	.word	0x38000040
240040d0:	2001d5f0 	.word	0x2001d5f0
240040d4:	4f000000 	.word	0x4f000000
240040d8:	30000800 	.word	0x30000800
240040dc:	2001d550 	.word	0x2001d550
240040e0:	3000000d 	.word	0x3000000d
240040e4:	30000000 	.word	0x30000000
240040e8:	2001d1c0 	.word	0x2001d1c0
240040ec:	2001d258 	.word	0x2001d258
240040f0:	20014978 	.word	0x20014978
240040f4:	20014c86 	.word	0x20014c86
240040f8:	58020800 	.word	0x58020800
240040fc:	2001d0b8 	.word	0x2001d0b8
24004100:	20019abc 	.word	0x20019abc
24004104:	2001abfc 	.word	0x2001abfc
24004108:	20016e42 	.word	0x20016e42
2400410c:	58020400 	.word	0x58020400
24004110:	2001abfa 	.word	0x2001abfa
24004114:	20018e74 	.word	0x20018e74
24004118:	20014cc0 	.word	0x20014cc0
2400411c:	2001daf0 	.word	0x2001daf0
24004120:	2001d690 	.word	0x2001d690
24004124:	2001ac04 	.word	0x2001ac04
24004128:	2001abfb 	.word	0x2001abfb
2400412c:	2401a134 	.word	0x2401a134
24004130:	2001d8c4 	.word	0x2001d8c4
24004134:	20000158 	.word	0x20000158
24004138:	20014a64 	.word	0x20014a64
2400413c:	2001ac00 	.word	0x2001ac00
24004140:	20014c80 	.word	0x20014c80
24004144:	2001ac14 	.word	0x2001ac14
				char finalString[10] = "brain.bin";
24004148:	4a73      	ldr	r2, [pc, #460]	; (24004318 <main+0xca8>)
2400414a:	ae0b      	add	r6, sp, #44	; 0x2c
2400414c:	ca07      	ldmia	r2, {r0, r1, r2}
				res = f_findfirst(&dir, &fno, SDPath, finalString);
2400414e:	4633      	mov	r3, r6
				char finalString[10] = "brain.bin";
24004150:	c603      	stmia	r6!, {r0, r1}
				res = f_findfirst(&dir, &fno, SDPath, finalString);
24004152:	4972      	ldr	r1, [pc, #456]	; (2400431c <main+0xcac>)
				char finalString[10] = "brain.bin";
24004154:	8032      	strh	r2, [r6, #0]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
24004156:	4872      	ldr	r0, [pc, #456]	; (24004320 <main+0xcb0>)
24004158:	4a72      	ldr	r2, [pc, #456]	; (24004324 <main+0xcb4>)
2400415a:	f00c f9a1 	bl	240104a0 <f_findfirst>
				if(res == FR_OK)
2400415e:	2800      	cmp	r0, #0
24004160:	f47f af17 	bne.w	24003f92 <main+0x922>
					if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
24004164:	2211      	movs	r2, #17
24004166:	4970      	ldr	r1, [pc, #448]	; (24004328 <main+0xcb8>)
24004168:	4870      	ldr	r0, [pc, #448]	; (2400432c <main+0xcbc>)
2400416a:	f00b fccd 	bl	2400fb08 <f_open>
2400416e:	2800      	cmp	r0, #0
24004170:	f47f af0f 	bne.w	24003f92 <main+0x922>
						brainFirmwareSize = f_size(&SDFile);
24004174:	4b6d      	ldr	r3, [pc, #436]	; (2400432c <main+0xcbc>)
						f_read(&SDFile, &brainFirmwareBuffer, brainFirmwareSize, &bytesRead);
24004176:	496e      	ldr	r1, [pc, #440]	; (24004330 <main+0xcc0>)
						brainFirmwareSize = f_size(&SDFile);
24004178:	68da      	ldr	r2, [r3, #12]
2400417a:	4b6e      	ldr	r3, [pc, #440]	; (24004334 <main+0xcc4>)
						f_read(&SDFile, &brainFirmwareBuffer, brainFirmwareSize, &bytesRead);
2400417c:	486b      	ldr	r0, [pc, #428]	; (2400432c <main+0xcbc>)
						brainFirmwareSize = f_size(&SDFile);
2400417e:	601a      	str	r2, [r3, #0]
						f_read(&SDFile, &brainFirmwareBuffer, brainFirmwareSize, &bytesRead);
24004180:	ab08      	add	r3, sp, #32
24004182:	f00b fe23 	bl	2400fdcc <f_read>
						f_close(&SDFile);
24004186:	4869      	ldr	r0, [pc, #420]	; (2400432c <main+0xcbc>)
24004188:	f00c f88a 	bl	240102a0 <f_close>
						for (uint_fast16_t i = 0; i< 700; i++)
2400418c:	4b6a      	ldr	r3, [pc, #424]	; (24004338 <main+0xcc8>)
2400418e:	1c5a      	adds	r2, r3, #1
24004190:	f1c2 0001 	rsb	r0, r2, #1
24004194:	18c2      	adds	r2, r0, r3
							memoryTest[i] = brainFirmwareBuffer[i];
24004196:	4e69      	ldr	r6, [pc, #420]	; (2400433c <main+0xccc>)
24004198:	f813 1f01 	ldrb.w	r1, [r3, #1]!
2400419c:	54b1      	strb	r1, [r6, r2]
						for (uint_fast16_t i = 0; i< 700; i++)
2400419e:	4a68      	ldr	r2, [pc, #416]	; (24004340 <main+0xcd0>)
240041a0:	4293      	cmp	r3, r2
240041a2:	d1f7      	bne.n	24004194 <main+0xb24>
						foundBrainFirmware = 1;
240041a4:	2301      	movs	r3, #1
240041a6:	4a67      	ldr	r2, [pc, #412]	; (24004344 <main+0xcd4>)
240041a8:	7013      	strb	r3, [r2, #0]
						brainFirmwareBufferIndex = 0;
240041aa:	2300      	movs	r3, #0
240041ac:	4a66      	ldr	r2, [pc, #408]	; (24004348 <main+0xcd8>)
240041ae:	6013      	str	r3, [r2, #0]
240041b0:	e6ef      	b.n	24003f92 <main+0x922>
					finalString[2] = charBuf[1];
240041b2:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
					strcat(finalString, ".ebp");
240041b6:	a80b      	add	r0, sp, #44	; 0x2c
					finalString[2] = charBuf[1];
240041b8:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
					finalString[1] = charBuf[0];
240041bc:	f89d 3020 	ldrb.w	r3, [sp, #32]
240041c0:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
					finalString[0] = '0';
240041c4:	2330      	movs	r3, #48	; 0x30
240041c6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
					strcat(finalString, ".ebp");
240041ca:	f7fc f885 	bl	240002d8 <strlen>
240041ce:	4a5f      	ldr	r2, [pc, #380]	; (2400434c <main+0xcdc>)
240041d0:	4603      	mov	r3, r0
240041d2:	a90b      	add	r1, sp, #44	; 0x2c
240041d4:	6810      	ldr	r0, [r2, #0]
240041d6:	7912      	ldrb	r2, [r2, #4]
240041d8:	50c8      	str	r0, [r1, r3]
240041da:	440b      	add	r3, r1
240041dc:	711a      	strb	r2, [r3, #4]
240041de:	e724      	b.n	2400402a <main+0x9ba>
					f_write(&SDFile, &buffer, fileSize, &bytesRead);
240041e0:	9a03      	ldr	r2, [sp, #12]
240041e2:	ab07      	add	r3, sp, #28
240041e4:	495a      	ldr	r1, [pc, #360]	; (24004350 <main+0xce0>)
240041e6:	4851      	ldr	r0, [pc, #324]	; (2400432c <main+0xcbc>)
240041e8:	f00b ff16 	bl	24010018 <f_write>
					f_close(&SDFile);
240041ec:	484f      	ldr	r0, [pc, #316]	; (2400432c <main+0xcbc>)
240041ee:	f00c f857 	bl	240102a0 <f_close>
240041f2:	e722      	b.n	2400403a <main+0x9ca>
			itoa(numberToLoad, charBuf, 10);
240041f4:	220a      	movs	r2, #10
240041f6:	4618      	mov	r0, r3
240041f8:	a908      	add	r1, sp, #32
240041fa:	f013 fbdd 	bl	240179b8 <itoa>
			int len = ((strlen(charBuf)));
240041fe:	a808      	add	r0, sp, #32
24004200:	f7fc f86a 	bl	240002d8 <strlen>
			if (len == 1)
24004204:	2801      	cmp	r0, #1
			int len = ((strlen(charBuf)));
24004206:	4602      	mov	r2, r0
			if (len == 1)
24004208:	d051      	beq.n	240042ae <main+0xc3e>
				strcat(charBuf, "*.ebp");
2400420a:	4952      	ldr	r1, [pc, #328]	; (24004354 <main+0xce4>)
2400420c:	ab08      	add	r3, sp, #32
2400420e:	6808      	ldr	r0, [r1, #0]
24004210:	8889      	ldrh	r1, [r1, #4]
24004212:	5098      	str	r0, [r3, r2]
24004214:	4413      	add	r3, r2
				strcpy(finalString, charBuf);
24004216:	a80b      	add	r0, sp, #44	; 0x2c
24004218:	3206      	adds	r2, #6
				strcat(charBuf, "*.ebp");
2400421a:	8099      	strh	r1, [r3, #4]
				strcpy(finalString, charBuf);
2400421c:	a908      	add	r1, sp, #32
2400421e:	f013 fc41 	bl	24017aa4 <memcpy>
			res = f_findfirst(&dir, &fno, SDPath, finalString);
24004222:	ab0b      	add	r3, sp, #44	; 0x2c
24004224:	4a3f      	ldr	r2, [pc, #252]	; (24004324 <main+0xcb4>)
24004226:	493d      	ldr	r1, [pc, #244]	; (2400431c <main+0xcac>)
24004228:	483d      	ldr	r0, [pc, #244]	; (24004320 <main+0xcb0>)
2400422a:	f00c f939 	bl	240104a0 <f_findfirst>
			if(res == FR_OK)
2400422e:	2800      	cmp	r0, #0
24004230:	f47f af41 	bne.w	240040b6 <main+0xa46>
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
24004234:	2211      	movs	r2, #17
24004236:	493c      	ldr	r1, [pc, #240]	; (24004328 <main+0xcb8>)
24004238:	483c      	ldr	r0, [pc, #240]	; (2400432c <main+0xcbc>)
2400423a:	f00b fc65 	bl	2400fb08 <f_open>
2400423e:	4606      	mov	r6, r0
24004240:	2800      	cmp	r0, #0
24004242:	f47f af38 	bne.w	240040b6 <main+0xa46>
					f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
24004246:	4a39      	ldr	r2, [pc, #228]	; (2400432c <main+0xcbc>)
24004248:	ab07      	add	r3, sp, #28
2400424a:	4941      	ldr	r1, [pc, #260]	; (24004350 <main+0xce0>)
2400424c:	68d2      	ldr	r2, [r2, #12]
2400424e:	4837      	ldr	r0, [pc, #220]	; (2400432c <main+0xcbc>)
24004250:	f00b fdbc 	bl	2400fdcc <f_read>
					presetWaitingToParse = bytesRead;
24004254:	9b07      	ldr	r3, [sp, #28]
					f_close(&SDFile);
24004256:	4835      	ldr	r0, [pc, #212]	; (2400432c <main+0xcbc>)
					presetWaitingToParse = bytesRead;
24004258:	f8c9 3000 	str.w	r3, [r9]
					f_close(&SDFile);
2400425c:	f00c f820 	bl	240102a0 <f_close>
	  	  i2cSending = 1;
24004260:	2301      	movs	r3, #1
24004262:	4a3d      	ldr	r2, [pc, #244]	; (24004358 <main+0xce8>)
24004264:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
24004266:	b672      	cpsid	i
	  	  HAL_I2C_Master_Transmit(&hi2c1, 34<<1, buffer, 4096, 10000);
24004268:	f242 7310 	movw	r3, #10000	; 0x2710
2400426c:	4a38      	ldr	r2, [pc, #224]	; (24004350 <main+0xce0>)
2400426e:	2144      	movs	r1, #68	; 0x44
24004270:	483a      	ldr	r0, [pc, #232]	; (2400435c <main+0xcec>)
24004272:	9300      	str	r3, [sp, #0]
24004274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
24004278:	f002 fee8 	bl	2400704c <HAL_I2C_Master_Transmit>
  __ASM volatile ("cpsie i" : : : "memory");
2400427c:	b662      	cpsie	i
	  	i2cSending = 0;
2400427e:	4a36      	ldr	r2, [pc, #216]	; (24004358 <main+0xce8>)
24004280:	7016      	strb	r6, [r2, #0]
24004282:	e71b      	b.n	240040bc <main+0xa4c>
24004284:	4b36      	ldr	r3, [pc, #216]	; (24004360 <main+0xcf0>)
				audioOutBuffer[i + 1] = 0;
24004286:	e9c3 6600 	strd	r6, r6, [r3]
			for (uint_fast16_t i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
2400428a:	3308      	adds	r3, #8
2400428c:	429c      	cmp	r4, r3
2400428e:	d1fa      	bne.n	24004286 <main+0xc16>
24004290:	e66b      	b.n	24003f6a <main+0x8fa>
24004292:	4b33      	ldr	r3, [pc, #204]	; (24004360 <main+0xcf0>)
					audioOutBuffer[i + 1] = 0;
24004294:	e9c3 6600 	strd	r6, r6, [r3]
				for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
24004298:	3308      	adds	r3, #8
2400429a:	42a3      	cmp	r3, r4
2400429c:	d1fa      	bne.n	24004294 <main+0xc24>
2400429e:	e6a2      	b.n	24003fe6 <main+0x976>
240042a0:	4a2f      	ldr	r2, [pc, #188]	; (24004360 <main+0xcf0>)
			audioOutBuffer[i + 1] = 0;
240042a2:	e9c2 6600 	strd	r6, r6, [r2]
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
240042a6:	3208      	adds	r2, #8
240042a8:	42a2      	cmp	r2, r4
240042aa:	d1fa      	bne.n	240042a2 <main+0xc32>
240042ac:	e6eb      	b.n	24004086 <main+0xa16>
				finalString[2] = charBuf[1];
240042ae:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
				strcat(finalString, "*.ebp");
240042b2:	a80b      	add	r0, sp, #44	; 0x2c
				finalString[2] = charBuf[1];
240042b4:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
				finalString[1] = charBuf[0];
240042b8:	f89d 3020 	ldrb.w	r3, [sp, #32]
240042bc:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
				finalString[0] = '0';
240042c0:	2330      	movs	r3, #48	; 0x30
240042c2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
				strcat(finalString, "*.ebp");
240042c6:	f7fc f807 	bl	240002d8 <strlen>
240042ca:	4a22      	ldr	r2, [pc, #136]	; (24004354 <main+0xce4>)
240042cc:	4603      	mov	r3, r0
240042ce:	a90b      	add	r1, sp, #44	; 0x2c
240042d0:	6810      	ldr	r0, [r2, #0]
240042d2:	8892      	ldrh	r2, [r2, #4]
240042d4:	50c8      	str	r0, [r1, r3]
240042d6:	440b      	add	r3, r1
240042d8:	809a      	strh	r2, [r3, #4]
240042da:	e7a2      	b.n	24004222 <main+0xbb2>
	  getPresetNamesFromSDCard();
240042dc:	f7fe fa94 	bl	24002808 <getPresetNamesFromSDCard>
	  diskBusy = 1;
240042e0:	f7ff bb4b 	b.w	2400397a <main+0x30a>
    	HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 4096);
240042e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
240042e8:	4919      	ldr	r1, [pc, #100]	; (24004350 <main+0xce0>)
240042ea:	481c      	ldr	r0, [pc, #112]	; (2400435c <main+0xcec>)
240042ec:	f003 f87a 	bl	240073e4 <HAL_I2C_Slave_Receive_IT>
240042f0:	f7ff babc 	b.w	2400386c <main+0x1fc>
	  	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
240042f4:	950c      	str	r5, [sp, #48]	; 0x30
	  	  GPIO_InitStruct.Pin = GPIO_PIN_12;
240042f6:	f44f 5580 	mov.w	r5, #4096	; 0x1000
	  	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240042fa:	a90b      	add	r1, sp, #44	; 0x2c
240042fc:	4819      	ldr	r0, [pc, #100]	; (24004364 <main+0xcf4>)
		GPIO_InitTypeDef GPIO_InitStruct = {0};
240042fe:	940f      	str	r4, [sp, #60]	; 0x3c
	  	  GPIO_InitStruct.Pin = GPIO_PIN_12;
24004300:	950b      	str	r5, [sp, #44]	; 0x2c
		GPIO_InitTypeDef GPIO_InitStruct = {0};
24004302:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
	  	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24004306:	f002 fc23 	bl	24006b50 <HAL_GPIO_Init>
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
2400430a:	4622      	mov	r2, r4
2400430c:	4629      	mov	r1, r5
2400430e:	4815      	ldr	r0, [pc, #84]	; (24004364 <main+0xcf4>)
24004310:	f002 fd6e 	bl	24006df0 <HAL_GPIO_WritePin>
24004314:	f7ff baa1 	b.w	2400385a <main+0x1ea>
24004318:	2401a13c 	.word	0x2401a13c
2400431c:	20016d28 	.word	0x20016d28
24004320:	20014c88 	.word	0x20014c88
24004324:	2001daf0 	.word	0x2001daf0
24004328:	20016d3e 	.word	0x20016d3e
2400432c:	2001d8c4 	.word	0x2001d8c4
24004330:	c3c00000 	.word	0xc3c00000
24004334:	20014c7c 	.word	0x20014c7c
24004338:	c3bfffff 	.word	0xc3bfffff
2400433c:	200197f8 	.word	0x200197f8
24004340:	c3c002bb 	.word	0xc3c002bb
24004344:	20016e40 	.word	0x20016e40
24004348:	20014c70 	.word	0x20014c70
2400434c:	2401a134 	.word	0x2401a134
24004350:	30042380 	.word	0x30042380
24004354:	24019fc4 	.word	0x24019fc4
24004358:	20016e42 	.word	0x20016e42
2400435c:	20014bc4 	.word	0x20014bc4
24004360:	30000000 	.word	0x30000000
24004364:	58020400 	.word	0x58020400

24004368 <HAL_GPIO_EXTI_Callback>:
  if(GPIO_Pin == GPIO_PIN_6) {
24004368:	2840      	cmp	r0, #64	; 0x40
2400436a:	d000      	beq.n	2400436e <HAL_GPIO_EXTI_Callback+0x6>
}
2400436c:	4770      	bx	lr
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0)
2400436e:	4601      	mov	r1, r0
24004370:	4801      	ldr	r0, [pc, #4]	; (24004378 <HAL_GPIO_EXTI_Callback+0x10>)
24004372:	f002 bd37 	b.w	24006de4 <HAL_GPIO_ReadPin>
24004376:	bf00      	nop
24004378:	58020400 	.word	0x58020400

2400437c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
2400437c:	4770      	bx	lr
2400437e:	bf00      	nop

24004380 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
24004380:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
24004382:	4806      	ldr	r0, [pc, #24]	; (2400439c <MX_RNG_Init+0x1c>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
24004384:	2300      	movs	r3, #0
24004386:	4a06      	ldr	r2, [pc, #24]	; (240043a0 <MX_RNG_Init+0x20>)
24004388:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
2400438c:	f005 fd00 	bl	24009d90 <HAL_RNG_Init>
24004390:	b900      	cbnz	r0, 24004394 <MX_RNG_Init+0x14>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
24004392:	bd08      	pop	{r3, pc}
24004394:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
24004398:	f7ff bff0 	b.w	2400437c <Error_Handler>
2400439c:	2001d0b8 	.word	0x2001d0b8
240043a0:	48021800 	.word	0x48021800

240043a4 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
240043a4:	b510      	push	{r4, lr}
240043a6:	b0b2      	sub	sp, #200	; 0xc8
240043a8:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
240043aa:	22c0      	movs	r2, #192	; 0xc0
240043ac:	2100      	movs	r1, #0
240043ae:	a802      	add	r0, sp, #8
240043b0:	f013 fb46 	bl	24017a40 <memset>
  if(rngHandle->Instance==RNG)
240043b4:	4b10      	ldr	r3, [pc, #64]	; (240043f8 <HAL_RNG_MspInit+0x54>)
240043b6:	6822      	ldr	r2, [r4, #0]
240043b8:	429a      	cmp	r2, r3
240043ba:	d001      	beq.n	240043c0 <HAL_RNG_MspInit+0x1c>
    __HAL_RCC_RNG_CLK_ENABLE();
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
240043bc:	b032      	add	sp, #200	; 0xc8
240043be:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
240043c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
240043c4:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240043c6:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
240043c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240043cc:	f004 faec 	bl	240089a8 <HAL_RCCEx_PeriphCLKConfig>
240043d0:	b970      	cbnz	r0, 240043f0 <HAL_RNG_MspInit+0x4c>
    __HAL_RCC_RNG_CLK_ENABLE();
240043d2:	4b0a      	ldr	r3, [pc, #40]	; (240043fc <HAL_RNG_MspInit+0x58>)
240043d4:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
240043d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
240043dc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
240043e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
240043e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
240043e8:	9301      	str	r3, [sp, #4]
240043ea:	9b01      	ldr	r3, [sp, #4]
}
240043ec:	b032      	add	sp, #200	; 0xc8
240043ee:	bd10      	pop	{r4, pc}
      Error_Handler();
240043f0:	f7ff ffc4 	bl	2400437c <Error_Handler>
240043f4:	e7ed      	b.n	240043d2 <HAL_RNG_MspInit+0x2e>
240043f6:	bf00      	nop
240043f8:	48021800 	.word	0x48021800
240043fc:	58024400 	.word	0x58024400

24004400 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
24004400:	b510      	push	{r4, lr}

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
24004402:	4817      	ldr	r0, [pc, #92]	; (24004460 <MX_SAI1_Init+0x60>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
24004404:	2200      	movs	r2, #0
  hsai_BlockA1.Instance = SAI1_Block_A;
24004406:	4c17      	ldr	r4, [pc, #92]	; (24004464 <MX_SAI1_Init+0x64>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
24004408:	2101      	movs	r1, #1
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
2400440a:	2302      	movs	r3, #2
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
2400440c:	61c2      	str	r2, [r0, #28]
  hsai_BlockA1.Instance = SAI1_Block_A;
2400440e:	6004      	str	r4, [r0, #0]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
24004410:	f64b 3480 	movw	r4, #48000	; 0xbb80
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
24004414:	60c2      	str	r2, [r0, #12]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
24004416:	6204      	str	r4, [r0, #32]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
24004418:	e9c0 1201 	strd	r1, r2, [r0, #4]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
2400441c:	e9c0 2205 	strd	r2, r2, [r0, #20]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
24004420:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
24004424:	461a      	mov	r2, r3
24004426:	f005 ff03 	bl	2400a230 <HAL_SAI_InitProtocol>
2400442a:	b990      	cbnz	r0, 24004452 <MX_SAI1_Init+0x52>
  {
    Error_Handler();
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
2400442c:	480e      	ldr	r0, [pc, #56]	; (24004468 <MX_SAI1_Init+0x68>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
2400442e:	2200      	movs	r2, #0
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
24004430:	2302      	movs	r3, #2
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
24004432:	2101      	movs	r1, #1
  hsai_BlockB1.Instance = SAI1_Block_B;
24004434:	4c0d      	ldr	r4, [pc, #52]	; (2400446c <MX_SAI1_Init+0x6c>)
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
24004436:	6142      	str	r2, [r0, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
24004438:	61c2      	str	r2, [r0, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
2400443a:	60c2      	str	r2, [r0, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
2400443c:	6342      	str	r2, [r0, #52]	; 0x34
  hsai_BlockB1.Instance = SAI1_Block_B;
2400443e:	6004      	str	r4, [r0, #0]
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
24004440:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
24004444:	461a      	mov	r2, r3
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
24004446:	e9c0 3101 	strd	r3, r1, [r0, #4]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
2400444a:	f005 fef1 	bl	2400a230 <HAL_SAI_InitProtocol>
2400444e:	b918      	cbnz	r0, 24004458 <MX_SAI1_Init+0x58>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
24004450:	bd10      	pop	{r4, pc}
    Error_Handler();
24004452:	f7ff ff93 	bl	2400437c <Error_Handler>
24004456:	e7e9      	b.n	2400442c <MX_SAI1_Init+0x2c>
}
24004458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
2400445c:	f7ff bf8e 	b.w	2400437c <Error_Handler>
24004460:	2001d1c0 	.word	0x2001d1c0
24004464:	40015804 	.word	0x40015804
24004468:	2001d258 	.word	0x2001d258
2400446c:	40015824 	.word	0x40015824

24004470 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
24004470:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
24004472:	4a5b      	ldr	r2, [pc, #364]	; (240045e0 <HAL_SAI_MspInit+0x170>)
{
24004474:	b08c      	sub	sp, #48	; 0x30
    if(saiHandle->Instance==SAI1_Block_A)
24004476:	6803      	ldr	r3, [r0, #0]
{
24004478:	4604      	mov	r4, r0
    if(saiHandle->Instance==SAI1_Block_A)
2400447a:	4293      	cmp	r3, r2
2400447c:	d004      	beq.n	24004488 <HAL_SAI_MspInit+0x18>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
    }
    if(saiHandle->Instance==SAI1_Block_B)
2400447e:	4a59      	ldr	r2, [pc, #356]	; (240045e4 <HAL_SAI_MspInit+0x174>)
24004480:	4293      	cmp	r3, r2
24004482:	d04d      	beq.n	24004520 <HAL_SAI_MspInit+0xb0>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
    }
}
24004484:	b00c      	add	sp, #48	; 0x30
24004486:	bd70      	pop	{r4, r5, r6, pc}
    if (SAI1_client == 0)
24004488:	4b57      	ldr	r3, [pc, #348]	; (240045e8 <HAL_SAI_MspInit+0x178>)
2400448a:	681a      	ldr	r2, [r3, #0]
2400448c:	2a00      	cmp	r2, #0
2400448e:	f000 808f 	beq.w	240045b0 <HAL_SAI_MspInit+0x140>
    SAI1_client ++;
24004492:	3201      	adds	r2, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24004494:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24004496:	2102      	movs	r1, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
24004498:	2074      	movs	r0, #116	; 0x74
    SAI1_client ++;
2400449a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
2400449c:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
2400449e:	9007      	str	r0, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
240044a0:	910a      	str	r1, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
240044a2:	4852      	ldr	r0, [pc, #328]	; (240045ec <HAL_SAI_MspInit+0x17c>)
    hdma_sai1_a.Instance = DMA1_Stream1;
240044a4:	4d52      	ldr	r5, [pc, #328]	; (240045f0 <HAL_SAI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
240044a6:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240044a8:	e9cd 1608 	strd	r1, r6, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
240044ac:	a907      	add	r1, sp, #28
240044ae:	f002 fb4f 	bl	24006b50 <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
240044b2:	4a50      	ldr	r2, [pc, #320]	; (240045f4 <HAL_SAI_MspInit+0x184>)
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
240044b4:	2357      	movs	r3, #87	; 0x57
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
240044b6:	4628      	mov	r0, r5
    hdma_sai1_a.Instance = DMA1_Stream1;
240044b8:	602a      	str	r2, [r5, #0]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
240044ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
240044be:	606b      	str	r3, [r5, #4]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
240044c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
240044c4:	612a      	str	r2, [r5, #16]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
240044c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
240044ca:	616b      	str	r3, [r5, #20]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
240044cc:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
240044d0:	60ae      	str	r6, [r5, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
240044d2:	60ee      	str	r6, [r5, #12]
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
240044d4:	62ae      	str	r6, [r5, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
240044d6:	62ee      	str	r6, [r5, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
240044d8:	632e      	str	r6, [r5, #48]	; 0x30
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
240044da:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
240044de:	f44f 3240 	mov.w	r2, #196608	; 0x30000
240044e2:	2304      	movs	r3, #4
240044e4:	e9c5 2308 	strd	r2, r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
240044e8:	f000 fe1c 	bl	24005124 <HAL_DMA_Init>
240044ec:	2800      	cmp	r0, #0
240044ee:	d173      	bne.n	240045d8 <HAL_SAI_MspInit+0x168>
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
240044f0:	2106      	movs	r1, #6
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
240044f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    pSyncConfig.SyncEnable = DISABLE;
240044f6:	f44f 7280 	mov.w	r2, #256	; 0x100
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_a, &pSyncConfig) != HAL_OK)
240044fa:	483d      	ldr	r0, [pc, #244]	; (240045f0 <HAL_SAI_MspInit+0x180>)
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
240044fc:	e9cd 1303 	strd	r1, r3, [sp, #12]
    pSyncConfig.RequestNumber = 1;
24004500:	2301      	movs	r3, #1
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_a, &pSyncConfig) != HAL_OK)
24004502:	a903      	add	r1, sp, #12
    pSyncConfig.SyncEnable = DISABLE;
24004504:	f8ad 2014 	strh.w	r2, [sp, #20]
    pSyncConfig.RequestNumber = 1;
24004508:	9306      	str	r3, [sp, #24]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_a, &pSyncConfig) != HAL_OK)
2400450a:	f002 fab7 	bl	24006a7c <HAL_DMAEx_ConfigMuxSync>
2400450e:	2800      	cmp	r0, #0
24004510:	d15f      	bne.n	240045d2 <HAL_SAI_MspInit+0x162>
    if(saiHandle->Instance==SAI1_Block_B)
24004512:	4a34      	ldr	r2, [pc, #208]	; (240045e4 <HAL_SAI_MspInit+0x174>)
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
24004514:	63ac      	str	r4, [r5, #56]	; 0x38
    if(saiHandle->Instance==SAI1_Block_B)
24004516:	6823      	ldr	r3, [r4, #0]
24004518:	4293      	cmp	r3, r2
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
2400451a:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
    if(saiHandle->Instance==SAI1_Block_B)
2400451e:	d1b1      	bne.n	24004484 <HAL_SAI_MspInit+0x14>
      if (SAI1_client == 0)
24004520:	4b31      	ldr	r3, [pc, #196]	; (240045e8 <HAL_SAI_MspInit+0x178>)
24004522:	681a      	ldr	r2, [r3, #0]
24004524:	2a00      	cmp	r2, #0
24004526:	d035      	beq.n	24004594 <HAL_SAI_MspInit+0x124>
    SAI1_client ++;
24004528:	3201      	adds	r2, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2400452a:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2400452c:	2102      	movs	r1, #2
    GPIO_InitStruct.Pin = GPIO_PIN_3;
2400452e:	2008      	movs	r0, #8
    SAI1_client ++;
24004530:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
24004532:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_3;
24004534:	9007      	str	r0, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
24004536:	910a      	str	r1, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24004538:	482c      	ldr	r0, [pc, #176]	; (240045ec <HAL_SAI_MspInit+0x17c>)
    hdma_sai1_b.Instance = DMA1_Stream2;
2400453a:	4d2f      	ldr	r5, [pc, #188]	; (240045f8 <HAL_SAI_MspInit+0x188>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
2400453c:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2400453e:	e9cd 1608 	strd	r1, r6, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24004542:	a907      	add	r1, sp, #28
24004544:	f002 fb04 	bl	24006b50 <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
24004548:	4a2c      	ldr	r2, [pc, #176]	; (240045fc <HAL_SAI_MspInit+0x18c>)
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
2400454a:	2358      	movs	r3, #88	; 0x58
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
2400454c:	4628      	mov	r0, r5
    hdma_sai1_b.Instance = DMA1_Stream2;
2400454e:	602a      	str	r2, [r5, #0]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
24004550:	2240      	movs	r2, #64	; 0x40
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
24004552:	606b      	str	r3, [r5, #4]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
24004554:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
24004558:	60aa      	str	r2, [r5, #8]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
2400455a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
2400455e:	612b      	str	r3, [r5, #16]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
24004560:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
24004564:	60ee      	str	r6, [r5, #12]
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
24004566:	62ae      	str	r6, [r5, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
24004568:	62ee      	str	r6, [r5, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
2400456a:	632e      	str	r6, [r5, #48]	; 0x30
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
2400456c:	e9c5 2305 	strd	r2, r3, [r5, #20]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24004570:	f44f 3340 	mov.w	r3, #196608	; 0x30000
24004574:	f44f 7280 	mov.w	r2, #256	; 0x100
24004578:	e9c5 2307 	strd	r2, r3, [r5, #28]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
2400457c:	2304      	movs	r3, #4
2400457e:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
24004580:	f000 fdd0 	bl	24005124 <HAL_DMA_Init>
24004584:	bb10      	cbnz	r0, 240045cc <HAL_SAI_MspInit+0x15c>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
24004586:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
2400458a:	63ac      	str	r4, [r5, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
2400458c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
24004590:	b00c      	add	sp, #48	; 0x30
24004592:	bd70      	pop	{r4, r5, r6, pc}
       __HAL_RCC_SAI1_CLK_ENABLE();
24004594:	491a      	ldr	r1, [pc, #104]	; (24004600 <HAL_SAI_MspInit+0x190>)
24004596:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
2400459a:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
2400459e:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
240045a2:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
240045a6:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
240045aa:	9102      	str	r1, [sp, #8]
240045ac:	9902      	ldr	r1, [sp, #8]
240045ae:	e7bb      	b.n	24004528 <HAL_SAI_MspInit+0xb8>
       __HAL_RCC_SAI1_CLK_ENABLE();
240045b0:	4913      	ldr	r1, [pc, #76]	; (24004600 <HAL_SAI_MspInit+0x190>)
240045b2:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
240045b6:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
240045ba:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
240045be:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
240045c2:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
240045c6:	9101      	str	r1, [sp, #4]
240045c8:	9901      	ldr	r1, [sp, #4]
240045ca:	e762      	b.n	24004492 <HAL_SAI_MspInit+0x22>
      Error_Handler();
240045cc:	f7ff fed6 	bl	2400437c <Error_Handler>
240045d0:	e7d9      	b.n	24004586 <HAL_SAI_MspInit+0x116>
      Error_Handler();
240045d2:	f7ff fed3 	bl	2400437c <Error_Handler>
240045d6:	e79c      	b.n	24004512 <HAL_SAI_MspInit+0xa2>
      Error_Handler();
240045d8:	f7ff fed0 	bl	2400437c <Error_Handler>
240045dc:	e788      	b.n	240044f0 <HAL_SAI_MspInit+0x80>
240045de:	bf00      	nop
240045e0:	40015804 	.word	0x40015804
240045e4:	40015824 	.word	0x40015824
240045e8:	2001d0cc 	.word	0x2001d0cc
240045ec:	58021000 	.word	0x58021000
240045f0:	2001d0d0 	.word	0x2001d0d0
240045f4:	40020028 	.word	0x40020028
240045f8:	2001d148 	.word	0x2001d148
240045fc:	40020040 	.word	0x40020040
24004600:	58024400 	.word	0x58024400

24004604 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
24004604:	b410      	push	{r4}
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
24004606:	4b07      	ldr	r3, [pc, #28]	; (24004624 <MX_SDMMC1_SD_Init+0x20>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
24004608:	2200      	movs	r2, #0
  hsd1.Instance = SDMMC1;
2400460a:	4c07      	ldr	r4, [pc, #28]	; (24004628 <MX_SDMMC1_SD_Init+0x24>)
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
2400460c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 25;
24004610:	2119      	movs	r1, #25
  hsd1.Instance = SDMMC1;
24004612:	e9c3 4200 	strd	r4, r2, [r3]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
24004616:	e9c3 2002 	strd	r2, r0, [r3, #8]
  hsd1.Init.ClockDiv = 25;
2400461a:	e9c3 2104 	strd	r2, r1, [r3, #16]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
2400461e:	f85d 4b04 	ldr.w	r4, [sp], #4
24004622:	4770      	bx	lr
24004624:	2001d2f0 	.word	0x2001d2f0
24004628:	52007000 	.word	0x52007000

2400462c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
2400462c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
2400462e:	4b25      	ldr	r3, [pc, #148]	; (240046c4 <HAL_SD_MspInit+0x98>)
{
24004630:	b08a      	sub	sp, #40	; 0x28
  if(sdHandle->Instance==SDMMC1)
24004632:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24004634:	2400      	movs	r4, #0
  if(sdHandle->Instance==SDMMC1)
24004636:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24004638:	9408      	str	r4, [sp, #32]
2400463a:	e9cd 4404 	strd	r4, r4, [sp, #16]
2400463e:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(sdHandle->Instance==SDMMC1)
24004642:	d001      	beq.n	24004648 <HAL_SD_MspInit+0x1c>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
24004644:	b00a      	add	sp, #40	; 0x28
24004646:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
24004648:	4b1f      	ldr	r3, [pc, #124]	; (240046c8 <HAL_SD_MspInit+0x9c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
2400464a:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
2400464c:	260c      	movs	r6, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
2400464e:	a904      	add	r1, sp, #16
    __HAL_RCC_SDMMC1_CLK_ENABLE();
24004650:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24004654:	481d      	ldr	r0, [pc, #116]	; (240046cc <HAL_SD_MspInit+0xa0>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
24004656:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
2400465a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
2400465e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
24004662:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
24004666:	9201      	str	r2, [sp, #4]
24004668:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
2400466a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
2400466e:	f042 0204 	orr.w	r2, r2, #4
24004672:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24004676:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
2400467a:	f002 0204 	and.w	r2, r2, #4
2400467e:	9202      	str	r2, [sp, #8]
24004680:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
24004682:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24004686:	f042 0208 	orr.w	r2, r2, #8
2400468a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
2400468e:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
    __HAL_RCC_GPIOD_CLK_ENABLE();
24004692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24004696:	f003 0308 	and.w	r3, r3, #8
2400469a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
2400469c:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
2400469e:	e9cd 5607 	strd	r5, r6, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
240046a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
240046a6:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
240046a8:	f002 fa52 	bl	24006b50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
240046ac:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
240046ae:	a904      	add	r1, sp, #16
240046b0:	4807      	ldr	r0, [pc, #28]	; (240046d0 <HAL_SD_MspInit+0xa4>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
240046b2:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
240046b4:	e9cd 3504 	strd	r3, r5, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
240046b8:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
240046bc:	f002 fa48 	bl	24006b50 <HAL_GPIO_Init>
}
240046c0:	b00a      	add	sp, #40	; 0x28
240046c2:	bd70      	pop	{r4, r5, r6, pc}
240046c4:	52007000 	.word	0x52007000
240046c8:	58024400 	.word	0x58024400
240046cc:	58020800 	.word	0x58020800
240046d0:	58020c00 	.word	0x58020c00
240046d4:	00000000 	.word	0x00000000

240046d8 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
240046d8:	4813      	ldr	r0, [pc, #76]	; (24004728 <MX_SPI1_Init+0x50>)
240046da:	4a14      	ldr	r2, [pc, #80]	; (2400472c <MX_SPI1_Init+0x54>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
240046dc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 24004720 <MX_SPI1_Init+0x48>
{
240046e0:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_SLAVE;
240046e2:	2300      	movs	r3, #0
  hspi1.Instance = SPI1;
240046e4:	6002      	str	r2, [r0, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
240046e6:	2207      	movs	r2, #7
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
240046e8:	6183      	str	r3, [r0, #24]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
240046ea:	60c2      	str	r2, [r0, #12]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
240046ec:	ed80 7b08 	vstr	d7, [r0, #32]
240046f0:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
240046f4:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
240046f8:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
240046fc:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
24004700:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
24004704:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
24004708:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
2400470c:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
24004710:	f006 ff98 	bl	2400b644 <HAL_SPI_Init>
24004714:	b900      	cbnz	r0, 24004718 <MX_SPI1_Init+0x40>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
24004716:	bd08      	pop	{r3, pc}
24004718:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
2400471c:	f7ff be2e 	b.w	2400437c <Error_Handler>
	...
24004728:	2001d550 	.word	0x2001d550
2400472c:	40013000 	.word	0x40013000

24004730 <MX_SPI6_Init>:
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
24004730:	4813      	ldr	r0, [pc, #76]	; (24004780 <MX_SPI6_Init+0x50>)
24004732:	4a14      	ldr	r2, [pc, #80]	; (24004784 <MX_SPI6_Init+0x54>)
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi6.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
24004734:	ed9f 7b10 	vldr	d7, [pc, #64]	; 24004778 <MX_SPI6_Init+0x48>
{
24004738:	b508      	push	{r3, lr}
  hspi6.Init.Mode = SPI_MODE_SLAVE;
2400473a:	2300      	movs	r3, #0
  hspi6.Instance = SPI6;
2400473c:	6002      	str	r2, [r0, #0]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
2400473e:	2207      	movs	r2, #7
  hspi6.Init.NSS = SPI_NSS_HARD_INPUT;
24004740:	6183      	str	r3, [r0, #24]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
24004742:	60c2      	str	r2, [r0, #12]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
24004744:	ed80 7b08 	vstr	d7, [r0, #32]
24004748:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
2400474c:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
24004750:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi6.Init.CRCPolynomial = 0x0;
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
24004754:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
24004758:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
2400475c:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
24004760:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
24004764:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
24004768:	f006 ff6c 	bl	2400b644 <HAL_SPI_Init>
2400476c:	b900      	cbnz	r0, 24004770 <MX_SPI6_Init+0x40>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
2400476e:	bd08      	pop	{r3, pc}
24004770:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
24004774:	f7ff be02 	b.w	2400437c <Error_Handler>
	...
24004780:	2001d5f0 	.word	0x2001d5f0
24004784:	58001400 	.word	0x58001400

24004788 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
24004788:	b5f0      	push	{r4, r5, r6, r7, lr}
2400478a:	b0bd      	sub	sp, #244	; 0xf4

  GPIO_InitTypeDef GPIO_InitStruct = {0};
2400478c:	2100      	movs	r1, #0
{
2400478e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24004790:	22c0      	movs	r2, #192	; 0xc0
24004792:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24004794:	910a      	str	r1, [sp, #40]	; 0x28
24004796:	e9cd 1106 	strd	r1, r1, [sp, #24]
2400479a:	e9cd 1108 	strd	r1, r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
2400479e:	f013 f94f 	bl	24017a40 <memset>
  if(spiHandle->Instance==SPI1)
240047a2:	6823      	ldr	r3, [r4, #0]
240047a4:	4a8f      	ldr	r2, [pc, #572]	; (240049e4 <HAL_SPI_MspInit+0x25c>)
240047a6:	4293      	cmp	r3, r2
240047a8:	d005      	beq.n	240047b6 <HAL_SPI_MspInit+0x2e>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI6)
240047aa:	4a8f      	ldr	r2, [pc, #572]	; (240049e8 <HAL_SPI_MspInit+0x260>)
240047ac:	4293      	cmp	r3, r2
240047ae:	f000 8097 	beq.w	240048e0 <HAL_SPI_MspInit+0x158>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
240047b2:	b03d      	add	sp, #244	; 0xf4
240047b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
240047b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
240047ba:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240047bc:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
240047be:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240047c2:	f004 f8f1 	bl	240089a8 <HAL_RCCEx_PeriphCLKConfig>
240047c6:	2800      	cmp	r0, #0
240047c8:	f040 80ff 	bne.w	240049ca <HAL_SPI_MspInit+0x242>
    __HAL_RCC_SPI1_CLK_ENABLE();
240047cc:	4b87      	ldr	r3, [pc, #540]	; (240049ec <HAL_SPI_MspInit+0x264>)
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
240047ce:	2600      	movs	r6, #0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
240047d0:	2505      	movs	r5, #5
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
240047d2:	2703      	movs	r7, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
240047d4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240047d8:	4885      	ldr	r0, [pc, #532]	; (240049f0 <HAL_SPI_MspInit+0x268>)
    __HAL_RCC_SPI1_CLK_ENABLE();
240047da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
240047de:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
240047e2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
240047e6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
240047ea:	9201      	str	r2, [sp, #4]
240047ec:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
240047ee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240047f2:	f042 0202 	orr.w	r2, r2, #2
240047f6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
240047fa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240047fe:	f002 0202 	and.w	r2, r2, #2
24004802:	9202      	str	r2, [sp, #8]
24004804:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
24004806:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
2400480a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2400480e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
24004812:	2230      	movs	r2, #48	; 0x30
    __HAL_RCC_GPIOG_CLK_ENABLE();
24004814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
24004818:	950a      	str	r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
2400481a:	f003 0340 	and.w	r3, r3, #64	; 0x40
2400481e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
24004820:	2302      	movs	r3, #2
    __HAL_RCC_GPIOG_CLK_ENABLE();
24004822:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24004824:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
24004826:	e9cd 2306 	strd	r2, r3, [sp, #24]
2400482a:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2400482e:	f002 f98f 	bl	24006b50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
24004832:	f44f 6240 	mov.w	r2, #3072	; 0xc00
24004836:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24004838:	a906      	add	r1, sp, #24
2400483a:	486e      	ldr	r0, [pc, #440]	; (240049f4 <HAL_SPI_MspInit+0x26c>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
2400483c:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
2400483e:	e9cd 2306 	strd	r2, r3, [sp, #24]
24004842:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24004846:	f002 f983 	bl	24006b50 <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Stream6;
2400484a:	4e6b      	ldr	r6, [pc, #428]	; (240049f8 <HAL_SPI_MspInit+0x270>)
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
2400484c:	2300      	movs	r3, #0
    hdma_spi1_rx.Instance = DMA1_Stream6;
2400484e:	496b      	ldr	r1, [pc, #428]	; (240049fc <HAL_SPI_MspInit+0x274>)
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
24004850:	2225      	movs	r2, #37	; 0x25
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
24004852:	4630      	mov	r0, r6
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
24004854:	e886 000e 	stmia.w	r6, {r1, r2, r3}
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
24004858:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
2400485c:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
24004860:	e9c6 3103 	strd	r3, r1, [r6, #12]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
24004864:	e9c6 3305 	strd	r3, r3, [r6, #20]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24004868:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
2400486c:	61f2      	str	r2, [r6, #28]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
2400486e:	2204      	movs	r2, #4
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
24004870:	e9c6 330b 	strd	r3, r3, [r6, #44]	; 0x2c
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24004874:	2301      	movs	r3, #1
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
24004876:	e9c6 1208 	strd	r1, r2, [r6, #32]
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
2400487a:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
2400487c:	f000 fc52 	bl	24005124 <HAL_DMA_Init>
24004880:	2800      	cmp	r0, #0
24004882:	f040 809f 	bne.w	240049c4 <HAL_SPI_MspInit+0x23c>
    hdma_spi1_tx.Instance = DMA1_Stream0;
24004886:	4d5e      	ldr	r5, [pc, #376]	; (24004a00 <HAL_SPI_MspInit+0x278>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
24004888:	2226      	movs	r2, #38	; 0x26
    hdma_spi1_tx.Instance = DMA1_Stream0;
2400488a:	495e      	ldr	r1, [pc, #376]	; (24004a04 <HAL_SPI_MspInit+0x27c>)
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
2400488c:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
2400488e:	606a      	str	r2, [r5, #4]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
24004890:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Instance = DMA1_Stream0;
24004894:	6029      	str	r1, [r5, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
24004896:	2140      	movs	r1, #64	; 0x40
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
24004898:	612a      	str	r2, [r5, #16]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
2400489a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
2400489e:	60eb      	str	r3, [r5, #12]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
240048a0:	4628      	mov	r0, r5
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
240048a2:	616b      	str	r3, [r5, #20]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
240048a4:	60a9      	str	r1, [r5, #8]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
240048a6:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
240048aa:	61ab      	str	r3, [r5, #24]
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
240048ac:	62eb      	str	r3, [r5, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
240048ae:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
240048b0:	2301      	movs	r3, #1
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
240048b2:	622a      	str	r2, [r5, #32]
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
240048b4:	2204      	movs	r2, #4
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
240048b6:	67e6      	str	r6, [r4, #124]	; 0x7c
240048b8:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
240048ba:	61e9      	str	r1, [r5, #28]
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
240048bc:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
240048c0:	f000 fc30 	bl	24005124 <HAL_DMA_Init>
240048c4:	2800      	cmp	r0, #0
240048c6:	d17a      	bne.n	240049be <HAL_SPI_MspInit+0x236>
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
240048c8:	2200      	movs	r2, #0
240048ca:	2101      	movs	r1, #1
240048cc:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
240048ce:	67a5      	str	r5, [r4, #120]	; 0x78
240048d0:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
240048d2:	f000 fa95 	bl	24004e00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
240048d6:	2023      	movs	r0, #35	; 0x23
240048d8:	f000 fad0 	bl	24004e7c <HAL_NVIC_EnableIRQ>
}
240048dc:	b03d      	add	sp, #244	; 0xf4
240048de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
240048e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
240048e4:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240048e6:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
240048e8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240048ec:	f004 f85c 	bl	240089a8 <HAL_RCCEx_PeriphCLKConfig>
240048f0:	2800      	cmp	r0, #0
240048f2:	d16d      	bne.n	240049d0 <HAL_SPI_MspInit+0x248>
    __HAL_RCC_SPI6_CLK_ENABLE();
240048f4:	4b3d      	ldr	r3, [pc, #244]	; (240049ec <HAL_SPI_MspInit+0x264>)
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
240048f6:	2008      	movs	r0, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
240048f8:	a906      	add	r1, sp, #24
    hdma_spi6_rx.Instance = BDMA_Channel0;
240048fa:	4e43      	ldr	r6, [pc, #268]	; (24004a08 <HAL_SPI_MspInit+0x280>)
    __HAL_RCC_SPI6_CLK_ENABLE();
240048fc:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
24004900:	f042 0220 	orr.w	r2, r2, #32
24004904:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
24004908:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
2400490c:	f002 0220 	and.w	r2, r2, #32
24004910:	9204      	str	r2, [sp, #16]
24004912:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
24004914:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24004918:	f042 0201 	orr.w	r2, r2, #1
2400491c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
24004920:	22f0      	movs	r2, #240	; 0xf0
    __HAL_RCC_GPIOA_CLK_ENABLE();
24004922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
24004926:	900a      	str	r0, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
24004928:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
2400492c:	4837      	ldr	r0, [pc, #220]	; (24004a0c <HAL_SPI_MspInit+0x284>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
2400492e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
24004930:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
24004932:	9d05      	ldr	r5, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
24004934:	e9cd 2306 	strd	r2, r3, [sp, #24]
24004938:	2200      	movs	r2, #0
2400493a:	2302      	movs	r3, #2
2400493c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24004940:	f002 f906 	bl	24006b50 <HAL_GPIO_Init>
    hdma_spi6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
24004944:	2300      	movs	r3, #0
    hdma_spi6_rx.Instance = BDMA_Channel0;
24004946:	4932      	ldr	r1, [pc, #200]	; (24004a10 <HAL_SPI_MspInit+0x288>)
    hdma_spi6_rx.Init.Request = BDMA_REQUEST_SPI6_RX;
24004948:	220b      	movs	r2, #11
    if (HAL_DMA_Init(&hdma_spi6_rx) != HAL_OK)
2400494a:	4630      	mov	r0, r6
    hdma_spi6_rx.Init.Request = BDMA_REQUEST_SPI6_RX;
2400494c:	e9c6 1200 	strd	r1, r2, [r6]
    hdma_spi6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
24004950:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
24004954:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi6_rx.Init.Mode = DMA_CIRCULAR;
24004958:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_spi6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
2400495c:	e9c6 3305 	strd	r3, r3, [r6, #20]
    hdma_spi6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24004960:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
24004964:	6131      	str	r1, [r6, #16]
    hdma_spi6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24004966:	e9c6 2307 	strd	r2, r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_spi6_rx) != HAL_OK)
2400496a:	f000 fbdb 	bl	24005124 <HAL_DMA_Init>
2400496e:	2800      	cmp	r0, #0
24004970:	d134      	bne.n	240049dc <HAL_SPI_MspInit+0x254>
    hdma_spi6_tx.Instance = BDMA_Channel1;
24004972:	4d28      	ldr	r5, [pc, #160]	; (24004a14 <HAL_SPI_MspInit+0x28c>)
    hdma_spi6_tx.Init.Request = BDMA_REQUEST_SPI6_TX;
24004974:	220c      	movs	r2, #12
    hdma_spi6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
24004976:	2300      	movs	r3, #0
    hdma_spi6_tx.Instance = BDMA_Channel1;
24004978:	4927      	ldr	r1, [pc, #156]	; (24004a18 <HAL_SPI_MspInit+0x290>)
    hdma_spi6_tx.Init.Request = BDMA_REQUEST_SPI6_TX;
2400497a:	606a      	str	r2, [r5, #4]
    hdma_spi6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
2400497c:	2240      	movs	r2, #64	; 0x40
    hdma_spi6_tx.Instance = BDMA_Channel1;
2400497e:	6029      	str	r1, [r5, #0]
    hdma_spi6_tx.Init.MemInc = DMA_MINC_ENABLE;
24004980:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
24004984:	60eb      	str	r3, [r5, #12]
    if (HAL_DMA_Init(&hdma_spi6_tx) != HAL_OK)
24004986:	4628      	mov	r0, r5
    hdma_spi6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
24004988:	616b      	str	r3, [r5, #20]
    hdma_spi6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
2400498a:	60aa      	str	r2, [r5, #8]
    hdma_spi6_tx.Init.Mode = DMA_CIRCULAR;
2400498c:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_spi6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
24004990:	61ab      	str	r3, [r5, #24]
    hdma_spi6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24004992:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi6_rx);
24004996:	67e6      	str	r6, [r4, #124]	; 0x7c
24004998:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_spi6_tx.Init.MemInc = DMA_MINC_ENABLE;
2400499a:	6129      	str	r1, [r5, #16]
    hdma_spi6_tx.Init.Mode = DMA_CIRCULAR;
2400499c:	61ea      	str	r2, [r5, #28]
    hdma_spi6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
2400499e:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_spi6_tx) != HAL_OK)
240049a0:	f000 fbc0 	bl	24005124 <HAL_DMA_Init>
240049a4:	b9b8      	cbnz	r0, 240049d6 <HAL_SPI_MspInit+0x24e>
    HAL_NVIC_SetPriority(SPI6_IRQn, 7, 0);
240049a6:	2200      	movs	r2, #0
240049a8:	2107      	movs	r1, #7
240049aa:	2056      	movs	r0, #86	; 0x56
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi6_tx);
240049ac:	67a5      	str	r5, [r4, #120]	; 0x78
240049ae:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI6_IRQn, 7, 0);
240049b0:	f000 fa26 	bl	24004e00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
240049b4:	2056      	movs	r0, #86	; 0x56
240049b6:	f000 fa61 	bl	24004e7c <HAL_NVIC_EnableIRQ>
}
240049ba:	b03d      	add	sp, #244	; 0xf4
240049bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
240049be:	f7ff fcdd 	bl	2400437c <Error_Handler>
240049c2:	e781      	b.n	240048c8 <HAL_SPI_MspInit+0x140>
      Error_Handler();
240049c4:	f7ff fcda 	bl	2400437c <Error_Handler>
240049c8:	e75d      	b.n	24004886 <HAL_SPI_MspInit+0xfe>
      Error_Handler();
240049ca:	f7ff fcd7 	bl	2400437c <Error_Handler>
240049ce:	e6fd      	b.n	240047cc <HAL_SPI_MspInit+0x44>
      Error_Handler();
240049d0:	f7ff fcd4 	bl	2400437c <Error_Handler>
240049d4:	e78e      	b.n	240048f4 <HAL_SPI_MspInit+0x16c>
      Error_Handler();
240049d6:	f7ff fcd1 	bl	2400437c <Error_Handler>
240049da:	e7e4      	b.n	240049a6 <HAL_SPI_MspInit+0x21e>
      Error_Handler();
240049dc:	f7ff fcce 	bl	2400437c <Error_Handler>
240049e0:	e7c7      	b.n	24004972 <HAL_SPI_MspInit+0x1ea>
240049e2:	bf00      	nop
240049e4:	40013000 	.word	0x40013000
240049e8:	58001400 	.word	0x58001400
240049ec:	58024400 	.word	0x58024400
240049f0:	58020400 	.word	0x58020400
240049f4:	58021800 	.word	0x58021800
240049f8:	2001d36c 	.word	0x2001d36c
240049fc:	400200a0 	.word	0x400200a0
24004a00:	2001d3e4 	.word	0x2001d3e4
24004a04:	40020010 	.word	0x40020010
24004a08:	2001d45c 	.word	0x2001d45c
24004a0c:	58020000 	.word	0x58020000
24004a10:	58025408 	.word	0x58025408
24004a14:	2001d4d4 	.word	0x2001d4d4
24004a18:	5802541c 	.word	0x5802541c

24004a1c <Default_Handler>:
void __attribute__((naked, noreturn)) Default_Handler()
{
	//If you get stuck here, your code is missing a handler for some interrupt.
	//Define a 'DEBUG_DEFAULT_INTERRUPT_HANDLERS' macro via VisualGDB Project Properties and rebuild your project.
	//This will pinpoint a specific missing vector.
	for (;;) ;
24004a1c:	e7fe      	b.n	24004a1c <Default_Handler>
24004a1e:	bf00      	nop

24004a20 <Reset_Handler>:
	asm ("ldr sp, =_estack");
24004a20:	f8df d0c0 	ldr.w	sp, [pc, #192]	; 24004ae4 <Reset_Handler+0xc4>
	for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
24004a24:	481f      	ldr	r0, [pc, #124]	; (24004aa4 <Reset_Handler+0x84>)
24004a26:	4a20      	ldr	r2, [pc, #128]	; (24004aa8 <Reset_Handler+0x88>)
24004a28:	4290      	cmp	r0, r2
24004a2a:	d003      	beq.n	24004a34 <Reset_Handler+0x14>
		*pDest = *pSource;
24004a2c:	1a12      	subs	r2, r2, r0
24004a2e:	491f      	ldr	r1, [pc, #124]	; (24004aac <Reset_Handler+0x8c>)
24004a30:	f013 f838 	bl	24017aa4 <memcpy>
	for (pDest = &_sbss; pDest != &_ebss; pDest++)
24004a34:	481e      	ldr	r0, [pc, #120]	; (24004ab0 <Reset_Handler+0x90>)
24004a36:	4a1f      	ldr	r2, [pc, #124]	; (24004ab4 <Reset_Handler+0x94>)
24004a38:	4290      	cmp	r0, r2
24004a3a:	d003      	beq.n	24004a44 <Reset_Handler+0x24>
		*pDest = 0;
24004a3c:	1a12      	subs	r2, r2, r0
24004a3e:	2100      	movs	r1, #0
24004a40:	f012 fffe 	bl	24017a40 <memset>
	for (pDest = &_ssram1_bss; pDest != &_esram1_bss; pDest++)
24004a44:	481c      	ldr	r0, [pc, #112]	; (24004ab8 <Reset_Handler+0x98>)
24004a46:	4a1d      	ldr	r2, [pc, #116]	; (24004abc <Reset_Handler+0x9c>)
24004a48:	4290      	cmp	r0, r2
24004a4a:	d003      	beq.n	24004a54 <Reset_Handler+0x34>
		*pDest = 0;
24004a4c:	1a12      	subs	r2, r2, r0
24004a4e:	2100      	movs	r1, #0
24004a50:	f012 fff6 	bl	24017a40 <memset>
	for (pDest = &_ssram2_dma_bss; pDest != &_esram2_dma_bss; pDest++)
24004a54:	481a      	ldr	r0, [pc, #104]	; (24004ac0 <Reset_Handler+0xa0>)
24004a56:	4a1b      	ldr	r2, [pc, #108]	; (24004ac4 <Reset_Handler+0xa4>)
24004a58:	4290      	cmp	r0, r2
24004a5a:	d003      	beq.n	24004a64 <Reset_Handler+0x44>
		*pDest = 0;
24004a5c:	1a12      	subs	r2, r2, r0
24004a5e:	2100      	movs	r1, #0
24004a60:	f012 ffee 	bl	24017a40 <memset>
	for (pDest = &_ssram2_bss; pDest != &_esram2_bss; pDest++)
24004a64:	4818      	ldr	r0, [pc, #96]	; (24004ac8 <Reset_Handler+0xa8>)
24004a66:	4a19      	ldr	r2, [pc, #100]	; (24004acc <Reset_Handler+0xac>)
24004a68:	4290      	cmp	r0, r2
24004a6a:	d003      	beq.n	24004a74 <Reset_Handler+0x54>
		*pDest = 0;
24004a6c:	1a12      	subs	r2, r2, r0
24004a6e:	2100      	movs	r1, #0
24004a70:	f012 ffe6 	bl	24017a40 <memset>
	for (pDest = &_ssram3_bss; pDest != &_esram3_bss; pDest++)
24004a74:	4816      	ldr	r0, [pc, #88]	; (24004ad0 <Reset_Handler+0xb0>)
24004a76:	4a17      	ldr	r2, [pc, #92]	; (24004ad4 <Reset_Handler+0xb4>)
24004a78:	4290      	cmp	r0, r2
24004a7a:	d003      	beq.n	24004a84 <Reset_Handler+0x64>
		*pDest = 0;
24004a7c:	1a12      	subs	r2, r2, r0
24004a7e:	2100      	movs	r1, #0
24004a80:	f012 ffde 	bl	24017a40 <memset>
	for (pSource = &_siitcmram, pDest = &_sitcmram; pDest != &_eitcmram; pSource++, pDest++)
24004a84:	4814      	ldr	r0, [pc, #80]	; (24004ad8 <Reset_Handler+0xb8>)
24004a86:	4a15      	ldr	r2, [pc, #84]	; (24004adc <Reset_Handler+0xbc>)
24004a88:	4290      	cmp	r0, r2
24004a8a:	d003      	beq.n	24004a94 <Reset_Handler+0x74>
		*pDest = *pSource;
24004a8c:	1a12      	subs	r2, r2, r0
24004a8e:	4914      	ldr	r1, [pc, #80]	; (24004ae0 <Reset_Handler+0xc0>)
24004a90:	f013 f808 	bl	24017aa4 <memcpy>
	SystemInit();
24004a94:	f000 f8aa 	bl	24004bec <SystemInit>
	__libc_init_array();
24004a98:	f012 ffe0 	bl	24017a5c <__libc_init_array>
	(void)main();
24004a9c:	f7fe fde8 	bl	24003670 <main>
	for (;;) ;
24004aa0:	e7fe      	b.n	24004aa0 <Reset_Handler+0x80>
24004aa2:	bf00      	nop
24004aa4:	20000000 	.word	0x20000000
24004aa8:	200007bc 	.word	0x200007bc
24004aac:	240338f8 	.word	0x240338f8
24004ab0:	200007c0 	.word	0x200007c0
24004ab4:	2001de64 	.word	0x2001de64
24004ab8:	24040000 	.word	0x24040000
24004abc:	24080000 	.word	0x24080000
24004ac0:	30000000 	.word	0x30000000
24004ac4:	30000880 	.word	0x30000880
24004ac8:	30002000 	.word	0x30002000
24004acc:	30045180 	.word	0x30045180
24004ad0:	38000000 	.word	0x38000000
24004ad4:	38000080 	.word	0x38000080
24004ad8:	00000400 	.word	0x00000400
24004adc:	0000b2b8 	.word	0x0000b2b8
24004ae0:	240340b4 	.word	0x240340b4
24004ae4:	20020000 	.word	0x20020000

24004ae8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
24004ae8:	4b07      	ldr	r3, [pc, #28]	; (24004b08 <HAL_MspInit+0x20>)
{
24004aea:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
24004aec:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
24004af0:	f042 0202 	orr.w	r2, r2, #2
24004af4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
24004af8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
24004afc:	f003 0302 	and.w	r3, r3, #2
24004b00:	9301      	str	r3, [sp, #4]
24004b02:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
24004b04:	b002      	add	sp, #8
24004b06:	4770      	bx	lr
24004b08:	58024400 	.word	0x58024400

24004b0c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
24004b0c:	e7fe      	b.n	24004b0c <NMI_Handler>
24004b0e:	bf00      	nop

24004b10 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
24004b10:	e7fe      	b.n	24004b10 <HardFault_Handler>
24004b12:	bf00      	nop

24004b14 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
24004b14:	e7fe      	b.n	24004b14 <MemManage_Handler>
24004b16:	bf00      	nop

24004b18 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
24004b18:	e7fe      	b.n	24004b18 <BusFault_Handler>
24004b1a:	bf00      	nop

24004b1c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
24004b1c:	e7fe      	b.n	24004b1c <UsageFault_Handler>
24004b1e:	bf00      	nop

24004b20 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
24004b20:	4770      	bx	lr
24004b22:	bf00      	nop

24004b24 <DebugMon_Handler>:
24004b24:	4770      	bx	lr
24004b26:	bf00      	nop

24004b28 <PendSV_Handler>:
24004b28:	4770      	bx	lr
24004b2a:	bf00      	nop

24004b2c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
24004b2c:	f000 b92c 	b.w	24004d88 <HAL_IncTick>

24004b30 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
24004b30:	4801      	ldr	r0, [pc, #4]	; (24004b38 <DMA1_Stream0_IRQHandler+0x8>)
24004b32:	f001 bb63 	b.w	240061fc <HAL_DMA_IRQHandler>
24004b36:	bf00      	nop
24004b38:	2001d3e4 	.word	0x2001d3e4

24004b3c <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
24004b3c:	4801      	ldr	r0, [pc, #4]	; (24004b44 <DMA1_Stream1_IRQHandler+0x8>)
24004b3e:	f001 bb5d 	b.w	240061fc <HAL_DMA_IRQHandler>
24004b42:	bf00      	nop
24004b44:	2001d0d0 	.word	0x2001d0d0

24004b48 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
24004b48:	4801      	ldr	r0, [pc, #4]	; (24004b50 <DMA1_Stream2_IRQHandler+0x8>)
24004b4a:	f001 bb57 	b.w	240061fc <HAL_DMA_IRQHandler>
24004b4e:	bf00      	nop
24004b50:	2001d148 	.word	0x2001d148

24004b54 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
24004b54:	4801      	ldr	r0, [pc, #4]	; (24004b5c <DMA1_Stream3_IRQHandler+0x8>)
24004b56:	f001 bb51 	b.w	240061fc <HAL_DMA_IRQHandler>
24004b5a:	bf00      	nop
24004b5c:	20014ad4 	.word	0x20014ad4

24004b60 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
24004b60:	4801      	ldr	r0, [pc, #4]	; (24004b68 <DMA1_Stream4_IRQHandler+0x8>)
24004b62:	f001 bb4b 	b.w	240061fc <HAL_DMA_IRQHandler>
24004b66:	bf00      	nop
24004b68:	20014b4c 	.word	0x20014b4c

24004b6c <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
24004b6c:	4801      	ldr	r0, [pc, #4]	; (24004b74 <DMA1_Stream6_IRQHandler+0x8>)
24004b6e:	f001 bb45 	b.w	240061fc <HAL_DMA_IRQHandler>
24004b72:	bf00      	nop
24004b74:	2001d36c 	.word	0x2001d36c

24004b78 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
24004b78:	2040      	movs	r0, #64	; 0x40
24004b7a:	f002 b93d 	b.w	24006df8 <HAL_GPIO_EXTI_IRQHandler>
24004b7e:	bf00      	nop

24004b80 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
24004b80:	4801      	ldr	r0, [pc, #4]	; (24004b88 <I2C1_EV_IRQHandler+0x8>)
24004b82:	f002 bc63 	b.w	2400744c <HAL_I2C_EV_IRQHandler>
24004b86:	bf00      	nop
24004b88:	20014bc4 	.word	0x20014bc4

24004b8c <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
24004b8c:	4801      	ldr	r0, [pc, #4]	; (24004b94 <I2C1_ER_IRQHandler+0x8>)
24004b8e:	f002 bdd5 	b.w	2400773c <HAL_I2C_ER_IRQHandler>
24004b92:	bf00      	nop
24004b94:	20014bc4 	.word	0x20014bc4

24004b98 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
24004b98:	4801      	ldr	r0, [pc, #4]	; (24004ba0 <I2C2_EV_IRQHandler+0x8>)
24004b9a:	f002 bc57 	b.w	2400744c <HAL_I2C_EV_IRQHandler>
24004b9e:	bf00      	nop
24004ba0:	20014c18 	.word	0x20014c18

24004ba4 <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
24004ba4:	4801      	ldr	r0, [pc, #4]	; (24004bac <I2C2_ER_IRQHandler+0x8>)
24004ba6:	f002 bdc9 	b.w	2400773c <HAL_I2C_ER_IRQHandler>
24004baa:	bf00      	nop
24004bac:	20014c18 	.word	0x20014c18

24004bb0 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
24004bb0:	4801      	ldr	r0, [pc, #4]	; (24004bb8 <SPI1_IRQHandler+0x8>)
24004bb2:	f007 b875 	b.w	2400bca0 <HAL_SPI_IRQHandler>
24004bb6:	bf00      	nop
24004bb8:	2001d550 	.word	0x2001d550

24004bbc <SPI6_IRQHandler>:
void SPI6_IRQHandler(void)
{
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
24004bbc:	4801      	ldr	r0, [pc, #4]	; (24004bc4 <SPI6_IRQHandler+0x8>)
24004bbe:	f007 b86f 	b.w	2400bca0 <HAL_SPI_IRQHandler>
24004bc2:	bf00      	nop
24004bc4:	2001d5f0 	.word	0x2001d5f0

24004bc8 <DMAMUX1_OVR_IRQHandler>:
{
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_a);
24004bc8:	4801      	ldr	r0, [pc, #4]	; (24004bd0 <DMAMUX1_OVR_IRQHandler+0x8>)
24004bca:	f001 bf91 	b.w	24006af0 <HAL_DMAEx_MUX_IRQHandler>
24004bce:	bf00      	nop
24004bd0:	2001d0d0 	.word	0x2001d0d0

24004bd4 <BDMA_Channel0_IRQHandler>:
void BDMA_Channel0_IRQHandler(void)
{
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi6_rx);
24004bd4:	4801      	ldr	r0, [pc, #4]	; (24004bdc <BDMA_Channel0_IRQHandler+0x8>)
24004bd6:	f001 bb11 	b.w	240061fc <HAL_DMA_IRQHandler>
24004bda:	bf00      	nop
24004bdc:	2001d45c 	.word	0x2001d45c

24004be0 <BDMA_Channel1_IRQHandler>:
void BDMA_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN BDMA_Channel1_IRQn 0 */

  /* USER CODE END BDMA_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi6_tx);
24004be0:	4801      	ldr	r0, [pc, #4]	; (24004be8 <BDMA_Channel1_IRQHandler+0x8>)
24004be2:	f001 bb0b 	b.w	240061fc <HAL_DMA_IRQHandler>
24004be6:	bf00      	nop
24004be8:	2001d4d4 	.word	0x2001d4d4

24004bec <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
24004bec:	4930      	ldr	r1, [pc, #192]	; (24004cb0 <SystemInit+0xc4>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24004bee:	4a31      	ldr	r2, [pc, #196]	; (24004cb4 <SystemInit+0xc8>)
{
24004bf0:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
24004bf2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
{
24004bf6:	b083      	sub	sp, #12
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
24004bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
24004bfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24004c00:	6813      	ldr	r3, [r2, #0]
24004c02:	f003 030f 	and.w	r3, r3, #15
24004c06:	2b06      	cmp	r3, #6
24004c08:	d805      	bhi.n	24004c16 <SystemInit+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
24004c0a:	6813      	ldr	r3, [r2, #0]
24004c0c:	f023 030f 	bic.w	r3, r3, #15
24004c10:	f043 0307 	orr.w	r3, r3, #7
24004c14:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
24004c16:	4b28      	ldr	r3, [pc, #160]	; (24004cb8 <SystemInit+0xcc>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
24004c18:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
24004c1a:	4a28      	ldr	r2, [pc, #160]	; (24004cbc <SystemInit+0xd0>)
  RCC->CR |= RCC_CR_HSION;
24004c1c:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24004c1e:	4825      	ldr	r0, [pc, #148]	; (24004cb4 <SystemInit+0xc8>)
  RCC->CR |= RCC_CR_HSION;
24004c20:	f041 0101 	orr.w	r1, r1, #1
24004c24:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
24004c26:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
24004c28:	6819      	ldr	r1, [r3, #0]
24004c2a:	400a      	ands	r2, r1
24004c2c:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24004c2e:	6803      	ldr	r3, [r0, #0]
24004c30:	071b      	lsls	r3, r3, #28
24004c32:	d505      	bpl.n	24004c40 <SystemInit+0x54>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
24004c34:	6803      	ldr	r3, [r0, #0]
24004c36:	f023 030f 	bic.w	r3, r3, #15
24004c3a:	f043 0307 	orr.w	r3, r3, #7
24004c3e:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
24004c40:	4b1d      	ldr	r3, [pc, #116]	; (24004cb8 <SystemInit+0xcc>)
24004c42:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
24004c44:	491e      	ldr	r1, [pc, #120]	; (24004cc0 <SystemInit+0xd4>)
  RCC->PLLCKSELR = 0x02020200;
24004c46:	4c1f      	ldr	r4, [pc, #124]	; (24004cc4 <SystemInit+0xd8>)
  RCC->PLLCFGR = 0x01FF0000;
24004c48:	481f      	ldr	r0, [pc, #124]	; (24004cc8 <SystemInit+0xdc>)
  RCC->D1CFGR = 0x00000000;
24004c4a:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
24004c4c:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
24004c4e:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
24004c50:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
24004c52:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
24004c54:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
24004c56:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
24004c58:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
24004c5a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
24004c5c:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
24004c5e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
24004c60:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
24004c62:	4c1a      	ldr	r4, [pc, #104]	; (24004ccc <SystemInit+0xe0>)
  RCC->CR &= 0xFFFBFFFFU;
24004c64:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
24004c68:	4919      	ldr	r1, [pc, #100]	; (24004cd0 <SystemInit+0xe4>)
  RCC->CR &= 0xFFFBFFFFU;
24004c6a:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
24004c6c:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
24004c6e:	6823      	ldr	r3, [r4, #0]
24004c70:	4019      	ands	r1, r3
24004c72:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
24004c76:	d203      	bcs.n	24004c80 <SystemInit+0x94>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
24004c78:	4b16      	ldr	r3, [pc, #88]	; (24004cd4 <SystemInit+0xe8>)
24004c7a:	2201      	movs	r2, #1
24004c7c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
24004c80:	4b0d      	ldr	r3, [pc, #52]	; (24004cb8 <SystemInit+0xcc>)
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
24004c82:	f243 04d2 	movw	r4, #12498	; 0x30d2
24004c86:	4814      	ldr	r0, [pc, #80]	; (24004cd8 <SystemInit+0xec>)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
24004c88:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
24004c8c:	4908      	ldr	r1, [pc, #32]	; (24004cb0 <SystemInit+0xc4>)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
24004c8e:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
24004c92:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  tmpreg = RCC->AHB2ENR;
24004c96:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
24004c9a:	9301      	str	r3, [sp, #4]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
24004c9c:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
  (void) tmpreg;
24004ca0:	9a01      	ldr	r2, [sp, #4]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
24004ca2:	6004      	str	r4, [r0, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
24004ca4:	608b      	str	r3, [r1, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
24004ca6:	b003      	add	sp, #12
24004ca8:	f85d 4b04 	ldr.w	r4, [sp], #4
24004cac:	4770      	bx	lr
24004cae:	bf00      	nop
24004cb0:	e000ed00 	.word	0xe000ed00
24004cb4:	52002000 	.word	0x52002000
24004cb8:	58024400 	.word	0x58024400
24004cbc:	eaf6ed7f 	.word	0xeaf6ed7f
24004cc0:	01010280 	.word	0x01010280
24004cc4:	02020200 	.word	0x02020200
24004cc8:	01ff0000 	.word	0x01ff0000
24004ccc:	5c001000 	.word	0x5c001000
24004cd0:	ffff0000 	.word	0xffff0000
24004cd4:	51008000 	.word	0x51008000
24004cd8:	52004000 	.word	0x52004000

24004cdc <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
24004cdc:	4b0f      	ldr	r3, [pc, #60]	; (24004d1c <HAL_InitTick+0x40>)
24004cde:	781b      	ldrb	r3, [r3, #0]
24004ce0:	b90b      	cbnz	r3, 24004ce6 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
24004ce2:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
24004ce4:	4770      	bx	lr
{
24004ce6:	b510      	push	{r4, lr}
24004ce8:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
24004cea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
24004cee:	4a0c      	ldr	r2, [pc, #48]	; (24004d20 <HAL_InitTick+0x44>)
24004cf0:	fbb0 f3f3 	udiv	r3, r0, r3
24004cf4:	6810      	ldr	r0, [r2, #0]
24004cf6:	fbb0 f0f3 	udiv	r0, r0, r3
24004cfa:	f000 f8cd 	bl	24004e98 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
24004cfe:	2c0f      	cmp	r4, #15
24004d00:	d800      	bhi.n	24004d04 <HAL_InitTick+0x28>
24004d02:	b108      	cbz	r0, 24004d08 <HAL_InitTick+0x2c>
    return HAL_ERROR;
24004d04:	2001      	movs	r0, #1
}
24004d06:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
24004d08:	2200      	movs	r2, #0
24004d0a:	4621      	mov	r1, r4
24004d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
24004d10:	f000 f876 	bl	24004e00 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
24004d14:	4b03      	ldr	r3, [pc, #12]	; (24004d24 <HAL_InitTick+0x48>)
24004d16:	2000      	movs	r0, #0
24004d18:	601c      	str	r4, [r3, #0]
}
24004d1a:	bd10      	pop	{r4, pc}
24004d1c:	20000754 	.word	0x20000754
24004d20:	2000074c 	.word	0x2000074c
24004d24:	20000758 	.word	0x20000758

24004d28 <HAL_Init>:
{
24004d28:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
24004d2a:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24004d2c:	4c12      	ldr	r4, [pc, #72]	; (24004d78 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
24004d2e:	f000 f855 	bl	24004ddc <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24004d32:	f003 fae7 	bl	24008304 <HAL_RCC_GetSysClockFreq>
24004d36:	4b11      	ldr	r3, [pc, #68]	; (24004d7c <HAL_Init+0x54>)
24004d38:	4911      	ldr	r1, [pc, #68]	; (24004d80 <HAL_Init+0x58>)
24004d3a:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24004d3c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24004d3e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24004d42:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24004d46:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24004d48:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24004d4a:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
24004d4e:	490d      	ldr	r1, [pc, #52]	; (24004d84 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24004d50:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24004d54:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24004d56:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
24004d5a:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
24004d5c:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24004d5e:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
24004d60:	f7ff ffbc 	bl	24004cdc <HAL_InitTick>
24004d64:	b110      	cbz	r0, 24004d6c <HAL_Init+0x44>
    return HAL_ERROR;
24004d66:	2401      	movs	r4, #1
}
24004d68:	4620      	mov	r0, r4
24004d6a:	bd10      	pop	{r4, pc}
24004d6c:	4604      	mov	r4, r0
  HAL_MspInit();
24004d6e:	f7ff febb 	bl	24004ae8 <HAL_MspInit>
}
24004d72:	4620      	mov	r0, r4
24004d74:	bd10      	pop	{r4, pc}
24004d76:	bf00      	nop
24004d78:	20000750 	.word	0x20000750
24004d7c:	58024400 	.word	0x58024400
24004d80:	2401a148 	.word	0x2401a148
24004d84:	2000074c 	.word	0x2000074c

24004d88 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
24004d88:	4a03      	ldr	r2, [pc, #12]	; (24004d98 <HAL_IncTick+0x10>)
24004d8a:	4b04      	ldr	r3, [pc, #16]	; (24004d9c <HAL_IncTick+0x14>)
24004d8c:	6811      	ldr	r1, [r2, #0]
24004d8e:	781b      	ldrb	r3, [r3, #0]
24004d90:	440b      	add	r3, r1
24004d92:	6013      	str	r3, [r2, #0]
}
24004d94:	4770      	bx	lr
24004d96:	bf00      	nop
24004d98:	2001d68c 	.word	0x2001d68c
24004d9c:	20000754 	.word	0x20000754

24004da0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
24004da0:	4b01      	ldr	r3, [pc, #4]	; (24004da8 <HAL_GetTick+0x8>)
24004da2:	6818      	ldr	r0, [r3, #0]
}
24004da4:	4770      	bx	lr
24004da6:	bf00      	nop
24004da8:	2001d68c 	.word	0x2001d68c

24004dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
24004dac:	b538      	push	{r3, r4, r5, lr}
24004dae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
24004db0:	f7ff fff6 	bl	24004da0 <HAL_GetTick>
24004db4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
24004db6:	1c63      	adds	r3, r4, #1
24004db8:	d002      	beq.n	24004dc0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
24004dba:	4b04      	ldr	r3, [pc, #16]	; (24004dcc <HAL_Delay+0x20>)
24004dbc:	781b      	ldrb	r3, [r3, #0]
24004dbe:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
24004dc0:	f7ff ffee 	bl	24004da0 <HAL_GetTick>
24004dc4:	1b43      	subs	r3, r0, r5
24004dc6:	42a3      	cmp	r3, r4
24004dc8:	d3fa      	bcc.n	24004dc0 <HAL_Delay+0x14>
  {
  }
}
24004dca:	bd38      	pop	{r3, r4, r5, pc}
24004dcc:	20000754 	.word	0x20000754

24004dd0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
24004dd0:	4b01      	ldr	r3, [pc, #4]	; (24004dd8 <HAL_GetREVID+0x8>)
24004dd2:	6818      	ldr	r0, [r3, #0]
}
24004dd4:	0c00      	lsrs	r0, r0, #16
24004dd6:	4770      	bx	lr
24004dd8:	5c001000 	.word	0x5c001000

24004ddc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
24004ddc:	4906      	ldr	r1, [pc, #24]	; (24004df8 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
24004dde:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
24004de2:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
24004de4:	4b05      	ldr	r3, [pc, #20]	; (24004dfc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
24004de6:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
24004de8:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
24004dec:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
24004df0:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
24004df2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
24004df4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
24004df6:	4770      	bx	lr
24004df8:	e000ed00 	.word	0xe000ed00
24004dfc:	05fa0000 	.word	0x05fa0000

24004e00 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
24004e00:	4b1b      	ldr	r3, [pc, #108]	; (24004e70 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
24004e02:	b500      	push	{lr}
24004e04:	68db      	ldr	r3, [r3, #12]
24004e06:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
24004e0a:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24004e0e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
24004e12:	f1be 0f04 	cmp.w	lr, #4
24004e16:	bf28      	it	cs
24004e18:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24004e1c:	f1bc 0f06 	cmp.w	ip, #6
24004e20:	d91a      	bls.n	24004e58 <HAL_NVIC_SetPriority+0x58>
24004e22:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
24004e24:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
24004e28:	fa0c fc03 	lsl.w	ip, ip, r3
24004e2c:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24004e30:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
24004e34:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24004e36:	fa0c fc0e 	lsl.w	ip, ip, lr
24004e3a:	ea21 010c 	bic.w	r1, r1, ip
24004e3e:	fa01 f103 	lsl.w	r1, r1, r3
24004e42:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
24004e46:	db0a      	blt.n	24004e5e <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24004e48:	0109      	lsls	r1, r1, #4
24004e4a:	4b0a      	ldr	r3, [pc, #40]	; (24004e74 <HAL_NVIC_SetPriority+0x74>)
24004e4c:	b2c9      	uxtb	r1, r1
24004e4e:	4403      	add	r3, r0
24004e50:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
24004e54:	f85d fb04 	ldr.w	pc, [sp], #4
24004e58:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24004e5a:	4613      	mov	r3, r2
24004e5c:	e7e8      	b.n	24004e30 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24004e5e:	f000 000f 	and.w	r0, r0, #15
24004e62:	0109      	lsls	r1, r1, #4
24004e64:	4b04      	ldr	r3, [pc, #16]	; (24004e78 <HAL_NVIC_SetPriority+0x78>)
24004e66:	b2c9      	uxtb	r1, r1
24004e68:	4403      	add	r3, r0
24004e6a:	7619      	strb	r1, [r3, #24]
24004e6c:	f85d fb04 	ldr.w	pc, [sp], #4
24004e70:	e000ed00 	.word	0xe000ed00
24004e74:	e000e100 	.word	0xe000e100
24004e78:	e000ecfc 	.word	0xe000ecfc

24004e7c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
24004e7c:	2800      	cmp	r0, #0
24004e7e:	db07      	blt.n	24004e90 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
24004e80:	2301      	movs	r3, #1
24004e82:	f000 011f 	and.w	r1, r0, #31
24004e86:	4a03      	ldr	r2, [pc, #12]	; (24004e94 <HAL_NVIC_EnableIRQ+0x18>)
24004e88:	0940      	lsrs	r0, r0, #5
24004e8a:	408b      	lsls	r3, r1
24004e8c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
24004e90:	4770      	bx	lr
24004e92:	bf00      	nop
24004e94:	e000e100 	.word	0xe000e100

24004e98 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
24004e98:	1e43      	subs	r3, r0, #1
24004e9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
24004e9e:	d20c      	bcs.n	24004eba <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
24004ea0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
24004ea4:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24004ea6:	4906      	ldr	r1, [pc, #24]	; (24004ec0 <HAL_SYSTICK_Config+0x28>)
24004ea8:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
24004eac:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
24004eae:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24004eb0:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
24004eb4:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
24004eb6:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
24004eb8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
24004eba:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
24004ebc:	4770      	bx	lr
24004ebe:	bf00      	nop
24004ec0:	e000ed00 	.word	0xe000ed00

24004ec4 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
24004ec4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
24004ec8:	4b04      	ldr	r3, [pc, #16]	; (24004edc <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
24004eca:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
24004ecc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
24004ece:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
24004ed2:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
24004ed4:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
24004ed8:	4770      	bx	lr
24004eda:	bf00      	nop
24004edc:	e000ed00 	.word	0xe000ed00

24004ee0 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
24004ee0:	4b06      	ldr	r3, [pc, #24]	; (24004efc <HAL_MPU_Enable+0x1c>)
24004ee2:	f040 0001 	orr.w	r0, r0, #1
24004ee6:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
24004eea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
24004eec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24004ef0:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
24004ef2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24004ef6:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
24004efa:	4770      	bx	lr
24004efc:	e000ed00 	.word	0xe000ed00

24004f00 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
24004f00:	7843      	ldrb	r3, [r0, #1]
24004f02:	4a16      	ldr	r2, [pc, #88]	; (24004f5c <HAL_MPU_ConfigRegion+0x5c>)
24004f04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
24004f08:	7803      	ldrb	r3, [r0, #0]
24004f0a:	b313      	cbz	r3, 24004f52 <HAL_MPU_ConfigRegion+0x52>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
24004f0c:	6843      	ldr	r3, [r0, #4]
24004f0e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
24004f12:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24004f14:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
24004f18:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
24004f1a:	7801      	ldrb	r1, [r0, #0]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24004f1c:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
24004f20:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24004f24:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
24004f26:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24004f28:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
24004f2c:	f890 c00e 	ldrb.w	ip, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24004f30:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
24004f34:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24004f36:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
24004f3a:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24004f3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
24004f42:	7a01      	ldrb	r1, [r0, #8]
24004f44:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
24004f48:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24004f4c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
24004f50:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
24004f52:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
24004f56:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  }
}
24004f5a:	4770      	bx	lr
24004f5c:	e000ed00 	.word	0xe000ed00

24004f60 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24004f60:	4b33      	ldr	r3, [pc, #204]	; (24005030 <DMA_CalcBaseAndBitshift+0xd0>)
{
24004f62:	4601      	mov	r1, r0
24004f64:	b470      	push	{r4, r5, r6}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24004f66:	4e33      	ldr	r6, [pc, #204]	; (24005034 <DMA_CalcBaseAndBitshift+0xd4>)
24004f68:	6802      	ldr	r2, [r0, #0]
24004f6a:	4d33      	ldr	r5, [pc, #204]	; (24005038 <DMA_CalcBaseAndBitshift+0xd8>)
24004f6c:	42b2      	cmp	r2, r6
24004f6e:	bf18      	it	ne
24004f70:	429a      	cmpne	r2, r3
24004f72:	4c32      	ldr	r4, [pc, #200]	; (2400503c <DMA_CalcBaseAndBitshift+0xdc>)
24004f74:	4832      	ldr	r0, [pc, #200]	; (24005040 <DMA_CalcBaseAndBitshift+0xe0>)
24004f76:	bf0c      	ite	eq
24004f78:	2301      	moveq	r3, #1
24004f7a:	2300      	movne	r3, #0
24004f7c:	42aa      	cmp	r2, r5
24004f7e:	bf08      	it	eq
24004f80:	f043 0301 	orreq.w	r3, r3, #1
24004f84:	42a2      	cmp	r2, r4
24004f86:	bf08      	it	eq
24004f88:	f043 0301 	orreq.w	r3, r3, #1
24004f8c:	3430      	adds	r4, #48	; 0x30
24004f8e:	4282      	cmp	r2, r0
24004f90:	bf08      	it	eq
24004f92:	f043 0301 	orreq.w	r3, r3, #1
24004f96:	3030      	adds	r0, #48	; 0x30
24004f98:	42a2      	cmp	r2, r4
24004f9a:	bf08      	it	eq
24004f9c:	f043 0301 	orreq.w	r3, r3, #1
24004fa0:	3430      	adds	r4, #48	; 0x30
24004fa2:	4282      	cmp	r2, r0
24004fa4:	bf08      	it	eq
24004fa6:	f043 0301 	orreq.w	r3, r3, #1
24004faa:	f500 705c 	add.w	r0, r0, #880	; 0x370
24004fae:	42a2      	cmp	r2, r4
24004fb0:	bf08      	it	eq
24004fb2:	f043 0301 	orreq.w	r3, r3, #1
24004fb6:	f504 745c 	add.w	r4, r4, #880	; 0x370
24004fba:	4282      	cmp	r2, r0
24004fbc:	bf08      	it	eq
24004fbe:	f043 0301 	orreq.w	r3, r3, #1
24004fc2:	3030      	adds	r0, #48	; 0x30
24004fc4:	42a2      	cmp	r2, r4
24004fc6:	bf08      	it	eq
24004fc8:	f043 0301 	orreq.w	r3, r3, #1
24004fcc:	3430      	adds	r4, #48	; 0x30
24004fce:	4282      	cmp	r2, r0
24004fd0:	bf08      	it	eq
24004fd2:	f043 0301 	orreq.w	r3, r3, #1
24004fd6:	3030      	adds	r0, #48	; 0x30
24004fd8:	42a2      	cmp	r2, r4
24004fda:	bf08      	it	eq
24004fdc:	f043 0301 	orreq.w	r3, r3, #1
24004fe0:	3430      	adds	r4, #48	; 0x30
24004fe2:	4282      	cmp	r2, r0
24004fe4:	bf08      	it	eq
24004fe6:	f043 0301 	orreq.w	r3, r3, #1
24004fea:	3030      	adds	r0, #48	; 0x30
24004fec:	42a2      	cmp	r2, r4
24004fee:	bf08      	it	eq
24004ff0:	f043 0301 	orreq.w	r3, r3, #1
24004ff4:	4282      	cmp	r2, r0
24004ff6:	bf08      	it	eq
24004ff8:	f043 0301 	orreq.w	r3, r3, #1
24004ffc:	b913      	cbnz	r3, 24005004 <DMA_CalcBaseAndBitshift+0xa4>
24004ffe:	4b11      	ldr	r3, [pc, #68]	; (24005044 <DMA_CalcBaseAndBitshift+0xe4>)
24005000:	429a      	cmp	r2, r3
24005002:	d112      	bne.n	2400502a <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24005004:	b2d3      	uxtb	r3, r2
24005006:	4810      	ldr	r0, [pc, #64]	; (24005048 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
24005008:	4c10      	ldr	r4, [pc, #64]	; (2400504c <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
2400500a:	3b10      	subs	r3, #16
2400500c:	fba0 5003 	umull	r5, r0, r0, r3

    if (stream_number > 3U)
24005010:	2b5f      	cmp	r3, #95	; 0x5f
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24005012:	ea4f 1010 	mov.w	r0, r0, lsr #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
24005016:	5c20      	ldrb	r0, [r4, r0]
24005018:	65c8      	str	r0, [r1, #92]	; 0x5c
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
2400501a:	480d      	ldr	r0, [pc, #52]	; (24005050 <DMA_CalcBaseAndBitshift+0xf0>)
2400501c:	ea00 0002 	and.w	r0, r0, r2
24005020:	bf88      	it	hi
24005022:	3004      	addhi	r0, #4
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
24005024:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
24005026:	bc70      	pop	{r4, r5, r6}
24005028:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
2400502a:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
2400502e:	e7f9      	b.n	24005024 <DMA_CalcBaseAndBitshift+0xc4>
24005030:	40020010 	.word	0x40020010
24005034:	40020028 	.word	0x40020028
24005038:	40020040 	.word	0x40020040
2400503c:	40020058 	.word	0x40020058
24005040:	40020070 	.word	0x40020070
24005044:	400204b8 	.word	0x400204b8
24005048:	aaaaaaab 	.word	0xaaaaaaab
2400504c:	2401a158 	.word	0x2401a158
24005050:	fffffc00 	.word	0xfffffc00

24005054 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
24005054:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24005056:	4a27      	ldr	r2, [pc, #156]	; (240050f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
24005058:	4927      	ldr	r1, [pc, #156]	; (240050f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
{
2400505a:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
2400505c:	4d27      	ldr	r5, [pc, #156]	; (240050fc <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
2400505e:	4c28      	ldr	r4, [pc, #160]	; (24005100 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
24005060:	42ab      	cmp	r3, r5
24005062:	bf18      	it	ne
24005064:	4293      	cmpne	r3, r2
24005066:	bf0c      	ite	eq
24005068:	2201      	moveq	r2, #1
2400506a:	2200      	movne	r2, #0
2400506c:	428b      	cmp	r3, r1
2400506e:	bf08      	it	eq
24005070:	f042 0201 	orreq.w	r2, r2, #1
24005074:	3128      	adds	r1, #40	; 0x28
24005076:	42a3      	cmp	r3, r4
24005078:	bf08      	it	eq
2400507a:	f042 0201 	orreq.w	r2, r2, #1
2400507e:	3428      	adds	r4, #40	; 0x28
24005080:	428b      	cmp	r3, r1
24005082:	bf08      	it	eq
24005084:	f042 0201 	orreq.w	r2, r2, #1
24005088:	3128      	adds	r1, #40	; 0x28
2400508a:	42a3      	cmp	r3, r4
2400508c:	bf08      	it	eq
2400508e:	f042 0201 	orreq.w	r2, r2, #1
24005092:	428b      	cmp	r3, r1
24005094:	bf08      	it	eq
24005096:	f042 0201 	orreq.w	r2, r2, #1
2400509a:	b912      	cbnz	r2, 240050a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
2400509c:	4a19      	ldr	r2, [pc, #100]	; (24005104 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
2400509e:	4293      	cmp	r3, r2
240050a0:	d113      	bne.n	240050ca <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
240050a2:	b2db      	uxtb	r3, r3
240050a4:	4918      	ldr	r1, [pc, #96]	; (24005108 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
240050a6:	4a19      	ldr	r2, [pc, #100]	; (2400510c <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
240050a8:	3b08      	subs	r3, #8
240050aa:	4c19      	ldr	r4, [pc, #100]	; (24005110 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
240050ac:	fba1 1303 	umull	r1, r3, r1, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
240050b0:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
240050b2:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
240050b6:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
240050ba:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
240050bc:	fa01 f303 	lsl.w	r3, r1, r3
240050c0:	6683      	str	r3, [r0, #104]	; 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
240050c2:	e9c0 2418 	strd	r2, r4, [r0, #96]	; 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
240050c6:	bc30      	pop	{r4, r5}
240050c8:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
240050ca:	b2d9      	uxtb	r1, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
240050cc:	4a11      	ldr	r2, [pc, #68]	; (24005114 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
240050ce:	4c12      	ldr	r4, [pc, #72]	; (24005118 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
240050d0:	3910      	subs	r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
240050d2:	441a      	add	r2, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
240050d4:	fba4 4101 	umull	r4, r1, r4, r1
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
240050d8:	2aa8      	cmp	r2, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
240050da:	ea4f 1111 	mov.w	r1, r1, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
240050de:	d800      	bhi.n	240050e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
240050e0:	3108      	adds	r1, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
240050e2:	4a0e      	ldr	r2, [pc, #56]	; (2400511c <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
240050e4:	f001 041f 	and.w	r4, r1, #31
240050e8:	2301      	movs	r3, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
240050ea:	440a      	add	r2, r1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
240050ec:	40a3      	lsls	r3, r4
240050ee:	4c0c      	ldr	r4, [pc, #48]	; (24005120 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
240050f0:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
240050f2:	e7e5      	b.n	240050c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>
240050f4:	58025408 	.word	0x58025408
240050f8:	58025430 	.word	0x58025430
240050fc:	5802541c 	.word	0x5802541c
24005100:	58025444 	.word	0x58025444
24005104:	58025494 	.word	0x58025494
24005108:	cccccccd 	.word	0xcccccccd
2400510c:	16009600 	.word	0x16009600
24005110:	58025880 	.word	0x58025880
24005114:	bffdfbf0 	.word	0xbffdfbf0
24005118:	aaaaaaab 	.word	0xaaaaaaab
2400511c:	10008200 	.word	0x10008200
24005120:	40020880 	.word	0x40020880

24005124 <HAL_DMA_Init>:
{
24005124:	b538      	push	{r3, r4, r5, lr}
24005126:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
24005128:	f7ff fe3a 	bl	24004da0 <HAL_GetTick>
  if(hdma == NULL)
2400512c:	2c00      	cmp	r4, #0
2400512e:	f000 816a 	beq.w	24005406 <HAL_DMA_Init+0x2e2>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24005132:	6822      	ldr	r2, [r4, #0]
24005134:	4605      	mov	r5, r0
24005136:	4ba3      	ldr	r3, [pc, #652]	; (240053c4 <HAL_DMA_Init+0x2a0>)
24005138:	429a      	cmp	r2, r3
2400513a:	d048      	beq.n	240051ce <HAL_DMA_Init+0xaa>
2400513c:	3318      	adds	r3, #24
2400513e:	429a      	cmp	r2, r3
24005140:	d045      	beq.n	240051ce <HAL_DMA_Init+0xaa>
24005142:	3330      	adds	r3, #48	; 0x30
24005144:	49a0      	ldr	r1, [pc, #640]	; (240053c8 <HAL_DMA_Init+0x2a4>)
24005146:	428a      	cmp	r2, r1
24005148:	bf18      	it	ne
2400514a:	429a      	cmpne	r2, r3
2400514c:	f101 0130 	add.w	r1, r1, #48	; 0x30
24005150:	bf0c      	ite	eq
24005152:	2301      	moveq	r3, #1
24005154:	2300      	movne	r3, #0
24005156:	428a      	cmp	r2, r1
24005158:	bf08      	it	eq
2400515a:	f043 0301 	orreq.w	r3, r3, #1
2400515e:	3118      	adds	r1, #24
24005160:	428a      	cmp	r2, r1
24005162:	bf08      	it	eq
24005164:	f043 0301 	orreq.w	r3, r3, #1
24005168:	3118      	adds	r1, #24
2400516a:	428a      	cmp	r2, r1
2400516c:	bf08      	it	eq
2400516e:	f043 0301 	orreq.w	r3, r3, #1
24005172:	3118      	adds	r1, #24
24005174:	428a      	cmp	r2, r1
24005176:	bf08      	it	eq
24005178:	f043 0301 	orreq.w	r3, r3, #1
2400517c:	f501 7156 	add.w	r1, r1, #856	; 0x358
24005180:	428a      	cmp	r2, r1
24005182:	bf08      	it	eq
24005184:	f043 0301 	orreq.w	r3, r3, #1
24005188:	3118      	adds	r1, #24
2400518a:	428a      	cmp	r2, r1
2400518c:	bf08      	it	eq
2400518e:	f043 0301 	orreq.w	r3, r3, #1
24005192:	3118      	adds	r1, #24
24005194:	428a      	cmp	r2, r1
24005196:	bf08      	it	eq
24005198:	f043 0301 	orreq.w	r3, r3, #1
2400519c:	3118      	adds	r1, #24
2400519e:	428a      	cmp	r2, r1
240051a0:	bf08      	it	eq
240051a2:	f043 0301 	orreq.w	r3, r3, #1
240051a6:	3118      	adds	r1, #24
240051a8:	428a      	cmp	r2, r1
240051aa:	bf08      	it	eq
240051ac:	f043 0301 	orreq.w	r3, r3, #1
240051b0:	3118      	adds	r1, #24
240051b2:	428a      	cmp	r2, r1
240051b4:	bf08      	it	eq
240051b6:	f043 0301 	orreq.w	r3, r3, #1
240051ba:	3118      	adds	r1, #24
240051bc:	428a      	cmp	r2, r1
240051be:	bf08      	it	eq
240051c0:	f043 0301 	orreq.w	r3, r3, #1
240051c4:	b91b      	cbnz	r3, 240051ce <HAL_DMA_Init+0xaa>
240051c6:	4b81      	ldr	r3, [pc, #516]	; (240053cc <HAL_DMA_Init+0x2a8>)
240051c8:	429a      	cmp	r2, r3
240051ca:	f040 8184 	bne.w	240054d6 <HAL_DMA_Init+0x3b2>
    hdma->State = HAL_DMA_STATE_BUSY;
240051ce:	2302      	movs	r3, #2
240051d0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
240051d4:	2300      	movs	r3, #0
240051d6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
240051da:	6813      	ldr	r3, [r2, #0]
240051dc:	f023 0301 	bic.w	r3, r3, #1
240051e0:	6013      	str	r3, [r2, #0]
240051e2:	e005      	b.n	240051f0 <HAL_DMA_Init+0xcc>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
240051e4:	f7ff fddc 	bl	24004da0 <HAL_GetTick>
240051e8:	1b43      	subs	r3, r0, r5
240051ea:	2b05      	cmp	r3, #5
240051ec:	f200 80fe 	bhi.w	240053ec <HAL_DMA_Init+0x2c8>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
240051f0:	6823      	ldr	r3, [r4, #0]
240051f2:	681a      	ldr	r2, [r3, #0]
240051f4:	07d0      	lsls	r0, r2, #31
240051f6:	d4f5      	bmi.n	240051e4 <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
240051f8:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
240051fc:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
240051fe:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
24005200:	681d      	ldr	r5, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24005202:	6a60      	ldr	r0, [r4, #36]	; 0x24
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24005204:	430a      	orrs	r2, r1
24005206:	6961      	ldr	r1, [r4, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24005208:	2804      	cmp	r0, #4
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
2400520a:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
2400520e:	69a1      	ldr	r1, [r4, #24]
24005210:	ea42 0201 	orr.w	r2, r2, r1
24005214:	69e1      	ldr	r1, [r4, #28]
24005216:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
2400521a:	6a21      	ldr	r1, [r4, #32]
2400521c:	ea42 0201 	orr.w	r2, r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
24005220:	496b      	ldr	r1, [pc, #428]	; (240053d0 <HAL_DMA_Init+0x2ac>)
24005222:	ea01 0105 	and.w	r1, r1, r5
    registerValue |=  hdma->Init.Direction           |
24005226:	ea42 0201 	orr.w	r2, r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
2400522a:	d103      	bne.n	24005234 <HAL_DMA_Init+0x110>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
2400522c:	e9d4 100b 	ldrd	r1, r0, [r4, #44]	; 0x2c
24005230:	4301      	orrs	r1, r0
24005232:	430a      	orrs	r2, r1
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
24005234:	4867      	ldr	r0, [pc, #412]	; (240053d4 <HAL_DMA_Init+0x2b0>)
24005236:	4968      	ldr	r1, [pc, #416]	; (240053d8 <HAL_DMA_Init+0x2b4>)
24005238:	6800      	ldr	r0, [r0, #0]
2400523a:	4001      	ands	r1, r0
2400523c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
24005240:	d30a      	bcc.n	24005258 <HAL_DMA_Init+0x134>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
24005242:	6861      	ldr	r1, [r4, #4]
24005244:	f1a1 0029 	sub.w	r0, r1, #41	; 0x29
24005248:	281f      	cmp	r0, #31
2400524a:	f240 80d6 	bls.w	240053fa <HAL_DMA_Init+0x2d6>
2400524e:	394f      	subs	r1, #79	; 0x4f
24005250:	2903      	cmp	r1, #3
24005252:	d801      	bhi.n	24005258 <HAL_DMA_Init+0x134>
        registerValue |= DMA_SxCR_TRBUFF;
24005254:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
24005258:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
2400525a:	6821      	ldr	r1, [r4, #0]
    registerValue |= hdma->Init.FIFOMode;
2400525c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
2400525e:	694b      	ldr	r3, [r1, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24005260:	2a04      	cmp	r2, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
24005262:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
24005266:	ea43 0302 	orr.w	r3, r3, r2
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
2400526a:	d10e      	bne.n	2400528a <HAL_DMA_Init+0x166>
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
2400526c:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
      registerValue |= hdma->Init.FIFOThreshold;
24005270:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
24005272:	b150      	cbz	r0, 2400528a <HAL_DMA_Init+0x166>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
24005274:	69a5      	ldr	r5, [r4, #24]
24005276:	2d00      	cmp	r5, #0
24005278:	f040 8107 	bne.w	2400548a <HAL_DMA_Init+0x366>
    switch (hdma->Init.FIFOThreshold)
2400527c:	2a01      	cmp	r2, #1
2400527e:	f000 8125 	beq.w	240054cc <HAL_DMA_Init+0x3a8>
24005282:	f032 0202 	bics.w	r2, r2, #2
24005286:	f000 8108 	beq.w	2400549a <HAL_DMA_Init+0x376>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
2400528a:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
2400528c:	4620      	mov	r0, r4
2400528e:	f7ff fe67 	bl	24004f60 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24005292:	6de2      	ldr	r2, [r4, #92]	; 0x5c
24005294:	233f      	movs	r3, #63	; 0x3f
24005296:	f002 021f 	and.w	r2, r2, #31
2400529a:	4093      	lsls	r3, r2
2400529c:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2400529e:	6822      	ldr	r2, [r4, #0]
240052a0:	4b48      	ldr	r3, [pc, #288]	; (240053c4 <HAL_DMA_Init+0x2a0>)
240052a2:	484e      	ldr	r0, [pc, #312]	; (240053dc <HAL_DMA_Init+0x2b8>)
240052a4:	4948      	ldr	r1, [pc, #288]	; (240053c8 <HAL_DMA_Init+0x2a4>)
240052a6:	4282      	cmp	r2, r0
240052a8:	bf18      	it	ne
240052aa:	429a      	cmpne	r2, r3
240052ac:	f100 0030 	add.w	r0, r0, #48	; 0x30
240052b0:	bf0c      	ite	eq
240052b2:	2301      	moveq	r3, #1
240052b4:	2300      	movne	r3, #0
240052b6:	428a      	cmp	r2, r1
240052b8:	bf08      	it	eq
240052ba:	f043 0301 	orreq.w	r3, r3, #1
240052be:	3130      	adds	r1, #48	; 0x30
240052c0:	4282      	cmp	r2, r0
240052c2:	bf08      	it	eq
240052c4:	f043 0301 	orreq.w	r3, r3, #1
240052c8:	3030      	adds	r0, #48	; 0x30
240052ca:	428a      	cmp	r2, r1
240052cc:	bf08      	it	eq
240052ce:	f043 0301 	orreq.w	r3, r3, #1
240052d2:	3130      	adds	r1, #48	; 0x30
240052d4:	4282      	cmp	r2, r0
240052d6:	bf08      	it	eq
240052d8:	f043 0301 	orreq.w	r3, r3, #1
240052dc:	3030      	adds	r0, #48	; 0x30
240052de:	428a      	cmp	r2, r1
240052e0:	bf08      	it	eq
240052e2:	f043 0301 	orreq.w	r3, r3, #1
240052e6:	f501 715c 	add.w	r1, r1, #880	; 0x370
240052ea:	4282      	cmp	r2, r0
240052ec:	bf08      	it	eq
240052ee:	f043 0301 	orreq.w	r3, r3, #1
240052f2:	f500 705c 	add.w	r0, r0, #880	; 0x370
240052f6:	428a      	cmp	r2, r1
240052f8:	bf08      	it	eq
240052fa:	f043 0301 	orreq.w	r3, r3, #1
240052fe:	3130      	adds	r1, #48	; 0x30
24005300:	4282      	cmp	r2, r0
24005302:	bf08      	it	eq
24005304:	f043 0301 	orreq.w	r3, r3, #1
24005308:	3030      	adds	r0, #48	; 0x30
2400530a:	428a      	cmp	r2, r1
2400530c:	bf08      	it	eq
2400530e:	f043 0301 	orreq.w	r3, r3, #1
24005312:	3130      	adds	r1, #48	; 0x30
24005314:	4282      	cmp	r2, r0
24005316:	bf08      	it	eq
24005318:	f043 0301 	orreq.w	r3, r3, #1
2400531c:	3030      	adds	r0, #48	; 0x30
2400531e:	428a      	cmp	r2, r1
24005320:	bf08      	it	eq
24005322:	f043 0301 	orreq.w	r3, r3, #1
24005326:	3130      	adds	r1, #48	; 0x30
24005328:	4282      	cmp	r2, r0
2400532a:	bf08      	it	eq
2400532c:	f043 0301 	orreq.w	r3, r3, #1
24005330:	3030      	adds	r0, #48	; 0x30
24005332:	428a      	cmp	r2, r1
24005334:	bf08      	it	eq
24005336:	f043 0301 	orreq.w	r3, r3, #1
2400533a:	4929      	ldr	r1, [pc, #164]	; (240053e0 <HAL_DMA_Init+0x2bc>)
2400533c:	4282      	cmp	r2, r0
2400533e:	bf08      	it	eq
24005340:	f043 0301 	orreq.w	r3, r3, #1
24005344:	4827      	ldr	r0, [pc, #156]	; (240053e4 <HAL_DMA_Init+0x2c0>)
24005346:	428a      	cmp	r2, r1
24005348:	bf08      	it	eq
2400534a:	f043 0301 	orreq.w	r3, r3, #1
2400534e:	3128      	adds	r1, #40	; 0x28
24005350:	4282      	cmp	r2, r0
24005352:	bf08      	it	eq
24005354:	f043 0301 	orreq.w	r3, r3, #1
24005358:	3028      	adds	r0, #40	; 0x28
2400535a:	428a      	cmp	r2, r1
2400535c:	bf08      	it	eq
2400535e:	f043 0301 	orreq.w	r3, r3, #1
24005362:	3128      	adds	r1, #40	; 0x28
24005364:	4282      	cmp	r2, r0
24005366:	bf08      	it	eq
24005368:	f043 0301 	orreq.w	r3, r3, #1
2400536c:	3028      	adds	r0, #40	; 0x28
2400536e:	428a      	cmp	r2, r1
24005370:	bf08      	it	eq
24005372:	f043 0301 	orreq.w	r3, r3, #1
24005376:	3128      	adds	r1, #40	; 0x28
24005378:	4282      	cmp	r2, r0
2400537a:	bf08      	it	eq
2400537c:	f043 0301 	orreq.w	r3, r3, #1
24005380:	428a      	cmp	r2, r1
24005382:	bf08      	it	eq
24005384:	f043 0301 	orreq.w	r3, r3, #1
24005388:	b913      	cbnz	r3, 24005390 <HAL_DMA_Init+0x26c>
2400538a:	4b17      	ldr	r3, [pc, #92]	; (240053e8 <HAL_DMA_Init+0x2c4>)
2400538c:	429a      	cmp	r2, r3
2400538e:	d113      	bne.n	240053b8 <HAL_DMA_Init+0x294>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
24005390:	4620      	mov	r0, r4
24005392:	f7ff fe5f 	bl	24005054 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
24005396:	68a3      	ldr	r3, [r4, #8]
24005398:	2b80      	cmp	r3, #128	; 0x80
2400539a:	d036      	beq.n	2400540a <HAL_DMA_Init+0x2e6>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
2400539c:	7922      	ldrb	r2, [r4, #4]
2400539e:	6e23      	ldr	r3, [r4, #96]	; 0x60
240053a0:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240053a2:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	; 0x64
240053a6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
240053a8:	6861      	ldr	r1, [r4, #4]
240053aa:	1e4b      	subs	r3, r1, #1
240053ac:	2b07      	cmp	r3, #7
240053ae:	d930      	bls.n	24005412 <HAL_DMA_Init+0x2ee>
      hdma->DMAmuxRequestGen = 0U;
240053b0:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
240053b2:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
240053b6:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
240053b8:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
240053ba:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
240053bc:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
240053be:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
240053c2:	bd38      	pop	{r3, r4, r5, pc}
240053c4:	40020010 	.word	0x40020010
240053c8:	40020040 	.word	0x40020040
240053cc:	400204b8 	.word	0x400204b8
240053d0:	fe10803f 	.word	0xfe10803f
240053d4:	5c001000 	.word	0x5c001000
240053d8:	ffff0000 	.word	0xffff0000
240053dc:	40020028 	.word	0x40020028
240053e0:	58025408 	.word	0x58025408
240053e4:	5802541c 	.word	0x5802541c
240053e8:	58025494 	.word	0x58025494
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
240053ec:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
240053ee:	2303      	movs	r3, #3
        return HAL_ERROR;
240053f0:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
240053f2:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
240053f4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
240053f8:	bd38      	pop	{r3, r4, r5, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
240053fa:	496b      	ldr	r1, [pc, #428]	; (240055a8 <HAL_DMA_Init+0x484>)
240053fc:	40c1      	lsrs	r1, r0
240053fe:	07c9      	lsls	r1, r1, #31
24005400:	f57f af2a 	bpl.w	24005258 <HAL_DMA_Init+0x134>
24005404:	e726      	b.n	24005254 <HAL_DMA_Init+0x130>
    return HAL_ERROR;
24005406:	2001      	movs	r0, #1
}
24005408:	bd38      	pop	{r3, r4, r5, pc}
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
2400540a:	2300      	movs	r3, #0
2400540c:	461a      	mov	r2, r3
2400540e:	6063      	str	r3, [r4, #4]
24005410:	e7c5      	b.n	2400539e <HAL_DMA_Init+0x27a>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24005412:	6820      	ldr	r0, [r4, #0]
24005414:	4a65      	ldr	r2, [pc, #404]	; (240055ac <HAL_DMA_Init+0x488>)
24005416:	4d66      	ldr	r5, [pc, #408]	; (240055b0 <HAL_DMA_Init+0x48c>)
24005418:	42a8      	cmp	r0, r5
2400541a:	bf18      	it	ne
2400541c:	4290      	cmpne	r0, r2
2400541e:	f105 0514 	add.w	r5, r5, #20
24005422:	bf0c      	ite	eq
24005424:	2201      	moveq	r2, #1
24005426:	2200      	movne	r2, #0
24005428:	42a8      	cmp	r0, r5
2400542a:	bf08      	it	eq
2400542c:	f042 0201 	orreq.w	r2, r2, #1
24005430:	3514      	adds	r5, #20
24005432:	42a8      	cmp	r0, r5
24005434:	bf08      	it	eq
24005436:	f042 0201 	orreq.w	r2, r2, #1
2400543a:	3514      	adds	r5, #20
2400543c:	42a8      	cmp	r0, r5
2400543e:	bf08      	it	eq
24005440:	f042 0201 	orreq.w	r2, r2, #1
24005444:	3514      	adds	r5, #20
24005446:	42a8      	cmp	r0, r5
24005448:	bf08      	it	eq
2400544a:	f042 0201 	orreq.w	r2, r2, #1
2400544e:	3514      	adds	r5, #20
24005450:	42a8      	cmp	r0, r5
24005452:	bf08      	it	eq
24005454:	f042 0201 	orreq.w	r2, r2, #1
24005458:	b93a      	cbnz	r2, 2400546a <HAL_DMA_Init+0x346>
2400545a:	4a56      	ldr	r2, [pc, #344]	; (240055b4 <HAL_DMA_Init+0x490>)
2400545c:	4290      	cmp	r0, r2
2400545e:	d004      	beq.n	2400546a <HAL_DMA_Init+0x346>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
24005460:	4a55      	ldr	r2, [pc, #340]	; (240055b8 <HAL_DMA_Init+0x494>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
24005462:	4856      	ldr	r0, [pc, #344]	; (240055bc <HAL_DMA_Init+0x498>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
24005464:	440a      	add	r2, r1
24005466:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
24005468:	e003      	b.n	24005472 <HAL_DMA_Init+0x34e>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
2400546a:	4a55      	ldr	r2, [pc, #340]	; (240055c0 <HAL_DMA_Init+0x49c>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
2400546c:	4855      	ldr	r0, [pc, #340]	; (240055c4 <HAL_DMA_Init+0x4a0>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
2400546e:	440a      	add	r2, r1
24005470:	0092      	lsls	r2, r2, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
24005472:	2101      	movs	r1, #1
24005474:	fa01 f303 	lsl.w	r3, r1, r3
      hdma->DMAmuxRequestGen->RGCR = 0U;
24005478:	2100      	movs	r1, #0
2400547a:	e9c4 201b 	strd	r2, r0, [r4, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
2400547e:	6763      	str	r3, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
24005480:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24005482:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
24005486:	605a      	str	r2, [r3, #4]
24005488:	e796      	b.n	240053b8 <HAL_DMA_Init+0x294>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
2400548a:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
2400548e:	d00e      	beq.n	240054ae <HAL_DMA_Init+0x38a>
    switch (hdma->Init.FIFOThreshold)
24005490:	2a02      	cmp	r2, #2
24005492:	d905      	bls.n	240054a0 <HAL_DMA_Init+0x37c>
24005494:	2a03      	cmp	r2, #3
24005496:	f47f aef8 	bne.w	2400528a <HAL_DMA_Init+0x166>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
2400549a:	01c2      	lsls	r2, r0, #7
2400549c:	f57f aef5 	bpl.w	2400528a <HAL_DMA_Init+0x166>
          hdma->State = HAL_DMA_STATE_READY;
240054a0:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
240054a2:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
240054a4:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
240054a6:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
240054a8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
240054ac:	bd38      	pop	{r3, r4, r5, pc}
    switch (hdma->Init.FIFOThreshold)
240054ae:	2a03      	cmp	r2, #3
240054b0:	f63f aeeb 	bhi.w	2400528a <HAL_DMA_Init+0x166>
240054b4:	a501      	add	r5, pc, #4	; (adr r5, 240054bc <HAL_DMA_Init+0x398>)
240054b6:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
240054ba:	bf00      	nop
240054bc:	240054a1 	.word	0x240054a1
240054c0:	2400549b 	.word	0x2400549b
240054c4:	240054a1 	.word	0x240054a1
240054c8:	240054cd 	.word	0x240054cd
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
240054cc:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
240054d0:	f47f aedb 	bne.w	2400528a <HAL_DMA_Init+0x166>
240054d4:	e7e4      	b.n	240054a0 <HAL_DMA_Init+0x37c>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
240054d6:	4b35      	ldr	r3, [pc, #212]	; (240055ac <HAL_DMA_Init+0x488>)
240054d8:	4835      	ldr	r0, [pc, #212]	; (240055b0 <HAL_DMA_Init+0x48c>)
240054da:	493b      	ldr	r1, [pc, #236]	; (240055c8 <HAL_DMA_Init+0x4a4>)
240054dc:	4282      	cmp	r2, r0
240054de:	bf18      	it	ne
240054e0:	429a      	cmpne	r2, r3
240054e2:	f100 0028 	add.w	r0, r0, #40	; 0x28
240054e6:	bf0c      	ite	eq
240054e8:	2301      	moveq	r3, #1
240054ea:	2300      	movne	r3, #0
240054ec:	428a      	cmp	r2, r1
240054ee:	bf08      	it	eq
240054f0:	f043 0301 	orreq.w	r3, r3, #1
240054f4:	3128      	adds	r1, #40	; 0x28
240054f6:	4282      	cmp	r2, r0
240054f8:	bf08      	it	eq
240054fa:	f043 0301 	orreq.w	r3, r3, #1
240054fe:	3028      	adds	r0, #40	; 0x28
24005500:	428a      	cmp	r2, r1
24005502:	bf08      	it	eq
24005504:	f043 0301 	orreq.w	r3, r3, #1
24005508:	3128      	adds	r1, #40	; 0x28
2400550a:	4282      	cmp	r2, r0
2400550c:	bf08      	it	eq
2400550e:	f043 0301 	orreq.w	r3, r3, #1
24005512:	428a      	cmp	r2, r1
24005514:	bf08      	it	eq
24005516:	f043 0301 	orreq.w	r3, r3, #1
2400551a:	b913      	cbnz	r3, 24005522 <HAL_DMA_Init+0x3fe>
2400551c:	4b25      	ldr	r3, [pc, #148]	; (240055b4 <HAL_DMA_Init+0x490>)
2400551e:	429a      	cmp	r2, r3
24005520:	d13a      	bne.n	24005598 <HAL_DMA_Init+0x474>
    __HAL_UNLOCK(hdma);
24005522:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
24005524:	2002      	movs	r0, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
24005526:	4929      	ldr	r1, [pc, #164]	; (240055cc <HAL_DMA_Init+0x4a8>)
    hdma->State = HAL_DMA_STATE_BUSY;
24005528:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
2400552c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
24005530:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
24005532:	4019      	ands	r1, r3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
24005534:	68a3      	ldr	r3, [r4, #8]
24005536:	2b40      	cmp	r3, #64	; 0x40
24005538:	d02c      	beq.n	24005594 <HAL_DMA_Init+0x470>
2400553a:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
2400553e:	fab3 f383 	clz	r3, r3
24005542:	095b      	lsrs	r3, r3, #5
24005544:	0398      	lsls	r0, r3, #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
24005546:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
2400554a:	08db      	lsrs	r3, r3, #3
2400554c:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
24005550:	6965      	ldr	r5, [r4, #20]
24005552:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
24005556:	69a5      	ldr	r5, [r4, #24]
24005558:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
2400555c:	69e5      	ldr	r5, [r4, #28]
2400555e:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
24005562:	6a25      	ldr	r5, [r4, #32]
24005564:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
24005568:	430b      	orrs	r3, r1
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
2400556a:	4919      	ldr	r1, [pc, #100]	; (240055d0 <HAL_DMA_Init+0x4ac>)
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
2400556c:	4318      	orrs	r0, r3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
2400556e:	4b19      	ldr	r3, [pc, #100]	; (240055d4 <HAL_DMA_Init+0x4b0>)
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
24005570:	6010      	str	r0, [r2, #0]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24005572:	4620      	mov	r0, r4
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
24005574:	6822      	ldr	r2, [r4, #0]
24005576:	4411      	add	r1, r2
24005578:	fba3 2301 	umull	r2, r3, r3, r1
2400557c:	091b      	lsrs	r3, r3, #4
2400557e:	009b      	lsls	r3, r3, #2
24005580:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24005582:	f7ff fced 	bl	24004f60 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24005586:	6de2      	ldr	r2, [r4, #92]	; 0x5c
24005588:	2301      	movs	r3, #1
2400558a:	f002 021f 	and.w	r2, r2, #31
2400558e:	4093      	lsls	r3, r2
24005590:	6043      	str	r3, [r0, #4]
24005592:	e684      	b.n	2400529e <HAL_DMA_Init+0x17a>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
24005594:	2010      	movs	r0, #16
24005596:	e7d6      	b.n	24005546 <HAL_DMA_Init+0x422>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24005598:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
2400559a:	2303      	movs	r3, #3
    return HAL_ERROR;
2400559c:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
2400559e:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
240055a0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
240055a4:	bd38      	pop	{r3, r4, r5, pc}
240055a6:	bf00      	nop
240055a8:	c3c0003f 	.word	0xc3c0003f
240055ac:	58025408 	.word	0x58025408
240055b0:	5802541c 	.word	0x5802541c
240055b4:	58025494 	.word	0x58025494
240055b8:	1000823f 	.word	0x1000823f
240055bc:	40020940 	.word	0x40020940
240055c0:	1600963f 	.word	0x1600963f
240055c4:	58025940 	.word	0x58025940
240055c8:	58025430 	.word	0x58025430
240055cc:	fffe000f 	.word	0xfffe000f
240055d0:	a7fdabf8 	.word	0xa7fdabf8
240055d4:	cccccccd 	.word	0xcccccccd

240055d8 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
240055d8:	2800      	cmp	r0, #0
240055da:	f000 8270 	beq.w	24005abe <HAL_DMA_Start_IT+0x4e6>
240055de:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
240055e0:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
240055e4:	2801      	cmp	r0, #1
240055e6:	f000 826c 	beq.w	24005ac2 <HAL_DMA_Start_IT+0x4ea>
240055ea:	2001      	movs	r0, #1
{
240055ec:	b470      	push	{r4, r5, r6}
  if(HAL_DMA_STATE_READY == hdma->State)
240055ee:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
240055f2:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
240055f6:	4284      	cmp	r4, r0
240055f8:	d008      	beq.n	2400560c <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
240055fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
240055fe:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24005600:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
24005604:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
24005608:	bc70      	pop	{r4, r5, r6}
2400560a:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
2400560c:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
2400560e:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24005612:	4ea2      	ldr	r6, [pc, #648]	; (2400589c <HAL_DMA_Start_IT+0x2c4>)
    hdma->State = HAL_DMA_STATE_BUSY;
24005614:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24005618:	2000      	movs	r0, #0
2400561a:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
2400561e:	6820      	ldr	r0, [r4, #0]
24005620:	f020 0001 	bic.w	r0, r0, #1
24005624:	6020      	str	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24005626:	489e      	ldr	r0, [pc, #632]	; (240058a0 <HAL_DMA_Start_IT+0x2c8>)
24005628:	f8dc 4000 	ldr.w	r4, [ip]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
2400562c:	f8dc 5058 	ldr.w	r5, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24005630:	42b4      	cmp	r4, r6
24005632:	bf18      	it	ne
24005634:	4284      	cmpne	r4, r0
24005636:	f106 0618 	add.w	r6, r6, #24
2400563a:	bf0c      	ite	eq
2400563c:	2001      	moveq	r0, #1
2400563e:	2000      	movne	r0, #0
24005640:	42b4      	cmp	r4, r6
24005642:	bf08      	it	eq
24005644:	f040 0001 	orreq.w	r0, r0, #1
24005648:	3618      	adds	r6, #24
2400564a:	42b4      	cmp	r4, r6
2400564c:	bf08      	it	eq
2400564e:	f040 0001 	orreq.w	r0, r0, #1
24005652:	3618      	adds	r6, #24
24005654:	42b4      	cmp	r4, r6
24005656:	bf08      	it	eq
24005658:	f040 0001 	orreq.w	r0, r0, #1
2400565c:	3618      	adds	r6, #24
2400565e:	42b4      	cmp	r4, r6
24005660:	bf08      	it	eq
24005662:	f040 0001 	orreq.w	r0, r0, #1
24005666:	3618      	adds	r6, #24
24005668:	42b4      	cmp	r4, r6
2400566a:	bf08      	it	eq
2400566c:	f040 0001 	orreq.w	r0, r0, #1
24005670:	3618      	adds	r6, #24
24005672:	42b4      	cmp	r4, r6
24005674:	bf08      	it	eq
24005676:	f040 0001 	orreq.w	r0, r0, #1
2400567a:	f506 7656 	add.w	r6, r6, #856	; 0x358
2400567e:	42b4      	cmp	r4, r6
24005680:	bf08      	it	eq
24005682:	f040 0001 	orreq.w	r0, r0, #1
24005686:	3618      	adds	r6, #24
24005688:	42b4      	cmp	r4, r6
2400568a:	bf08      	it	eq
2400568c:	f040 0001 	orreq.w	r0, r0, #1
24005690:	3618      	adds	r6, #24
24005692:	42b4      	cmp	r4, r6
24005694:	bf08      	it	eq
24005696:	f040 0001 	orreq.w	r0, r0, #1
2400569a:	3618      	adds	r6, #24
2400569c:	42b4      	cmp	r4, r6
2400569e:	bf08      	it	eq
240056a0:	f040 0001 	orreq.w	r0, r0, #1
240056a4:	3618      	adds	r6, #24
240056a6:	42b4      	cmp	r4, r6
240056a8:	bf08      	it	eq
240056aa:	f040 0001 	orreq.w	r0, r0, #1
240056ae:	3618      	adds	r6, #24
240056b0:	42b4      	cmp	r4, r6
240056b2:	bf08      	it	eq
240056b4:	f040 0001 	orreq.w	r0, r0, #1
240056b8:	3618      	adds	r6, #24
240056ba:	42b4      	cmp	r4, r6
240056bc:	bf08      	it	eq
240056be:	f040 0001 	orreq.w	r0, r0, #1
240056c2:	3618      	adds	r6, #24
240056c4:	42b4      	cmp	r4, r6
240056c6:	bf08      	it	eq
240056c8:	f040 0001 	orreq.w	r0, r0, #1
240056cc:	4e75      	ldr	r6, [pc, #468]	; (240058a4 <HAL_DMA_Start_IT+0x2cc>)
240056ce:	42b4      	cmp	r4, r6
240056d0:	bf08      	it	eq
240056d2:	f040 0001 	orreq.w	r0, r0, #1
240056d6:	3614      	adds	r6, #20
240056d8:	42b4      	cmp	r4, r6
240056da:	bf08      	it	eq
240056dc:	f040 0001 	orreq.w	r0, r0, #1
240056e0:	3614      	adds	r6, #20
240056e2:	42b4      	cmp	r4, r6
240056e4:	bf08      	it	eq
240056e6:	f040 0001 	orreq.w	r0, r0, #1
240056ea:	3614      	adds	r6, #20
240056ec:	42b4      	cmp	r4, r6
240056ee:	bf08      	it	eq
240056f0:	f040 0001 	orreq.w	r0, r0, #1
240056f4:	3614      	adds	r6, #20
240056f6:	42b4      	cmp	r4, r6
240056f8:	bf08      	it	eq
240056fa:	f040 0001 	orreq.w	r0, r0, #1
240056fe:	3614      	adds	r6, #20
24005700:	42b4      	cmp	r4, r6
24005702:	bf08      	it	eq
24005704:	f040 0001 	orreq.w	r0, r0, #1
24005708:	3614      	adds	r6, #20
2400570a:	42b4      	cmp	r4, r6
2400570c:	bf08      	it	eq
2400570e:	f040 0001 	orreq.w	r0, r0, #1
24005712:	b910      	cbnz	r0, 2400571a <HAL_DMA_Start_IT+0x142>
24005714:	4864      	ldr	r0, [pc, #400]	; (240058a8 <HAL_DMA_Start_IT+0x2d0>)
24005716:	4284      	cmp	r4, r0
24005718:	d10a      	bne.n	24005730 <HAL_DMA_Start_IT+0x158>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
2400571a:	e9dc 0419 	ldrd	r0, r4, [ip, #100]	; 0x64
2400571e:	6044      	str	r4, [r0, #4]
    if(hdma->DMAmuxRequestGen != 0U)
24005720:	f8dc 006c 	ldr.w	r0, [ip, #108]	; 0x6c
24005724:	b110      	cbz	r0, 2400572c <HAL_DMA_Start_IT+0x154>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24005726:	e9dc 041c 	ldrd	r0, r4, [ip, #112]	; 0x70
2400572a:	6044      	str	r4, [r0, #4]
2400572c:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24005730:	485b      	ldr	r0, [pc, #364]	; (240058a0 <HAL_DMA_Start_IT+0x2c8>)
24005732:	4e5a      	ldr	r6, [pc, #360]	; (2400589c <HAL_DMA_Start_IT+0x2c4>)
24005734:	42b4      	cmp	r4, r6
24005736:	bf18      	it	ne
24005738:	4284      	cmpne	r4, r0
2400573a:	f106 0618 	add.w	r6, r6, #24
2400573e:	bf0c      	ite	eq
24005740:	2001      	moveq	r0, #1
24005742:	2000      	movne	r0, #0
24005744:	42b4      	cmp	r4, r6
24005746:	bf08      	it	eq
24005748:	f040 0001 	orreq.w	r0, r0, #1
2400574c:	3618      	adds	r6, #24
2400574e:	42b4      	cmp	r4, r6
24005750:	bf08      	it	eq
24005752:	f040 0001 	orreq.w	r0, r0, #1
24005756:	3618      	adds	r6, #24
24005758:	42b4      	cmp	r4, r6
2400575a:	bf08      	it	eq
2400575c:	f040 0001 	orreq.w	r0, r0, #1
24005760:	3618      	adds	r6, #24
24005762:	42b4      	cmp	r4, r6
24005764:	bf08      	it	eq
24005766:	f040 0001 	orreq.w	r0, r0, #1
2400576a:	3618      	adds	r6, #24
2400576c:	42b4      	cmp	r4, r6
2400576e:	bf08      	it	eq
24005770:	f040 0001 	orreq.w	r0, r0, #1
24005774:	3618      	adds	r6, #24
24005776:	42b4      	cmp	r4, r6
24005778:	bf08      	it	eq
2400577a:	f040 0001 	orreq.w	r0, r0, #1
2400577e:	f506 7656 	add.w	r6, r6, #856	; 0x358
24005782:	42b4      	cmp	r4, r6
24005784:	bf08      	it	eq
24005786:	f040 0001 	orreq.w	r0, r0, #1
2400578a:	3618      	adds	r6, #24
2400578c:	42b4      	cmp	r4, r6
2400578e:	bf08      	it	eq
24005790:	f040 0001 	orreq.w	r0, r0, #1
24005794:	3618      	adds	r6, #24
24005796:	42b4      	cmp	r4, r6
24005798:	bf08      	it	eq
2400579a:	f040 0001 	orreq.w	r0, r0, #1
2400579e:	3618      	adds	r6, #24
240057a0:	42b4      	cmp	r4, r6
240057a2:	bf08      	it	eq
240057a4:	f040 0001 	orreq.w	r0, r0, #1
240057a8:	3618      	adds	r6, #24
240057aa:	42b4      	cmp	r4, r6
240057ac:	bf08      	it	eq
240057ae:	f040 0001 	orreq.w	r0, r0, #1
240057b2:	3618      	adds	r6, #24
240057b4:	42b4      	cmp	r4, r6
240057b6:	bf08      	it	eq
240057b8:	f040 0001 	orreq.w	r0, r0, #1
240057bc:	3618      	adds	r6, #24
240057be:	42b4      	cmp	r4, r6
240057c0:	bf08      	it	eq
240057c2:	f040 0001 	orreq.w	r0, r0, #1
240057c6:	b918      	cbnz	r0, 240057d0 <HAL_DMA_Start_IT+0x1f8>
240057c8:	4838      	ldr	r0, [pc, #224]	; (240058ac <HAL_DMA_Start_IT+0x2d4>)
240057ca:	4284      	cmp	r4, r0
240057cc:	f040 817b 	bne.w	24005ac6 <HAL_DMA_Start_IT+0x4ee>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
240057d0:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
240057d4:	f000 041f 	and.w	r4, r0, #31
240057d8:	203f      	movs	r0, #63	; 0x3f
240057da:	40a0      	lsls	r0, r4
240057dc:	60a8      	str	r0, [r5, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
240057de:	f8dc 4000 	ldr.w	r4, [ip]
240057e2:	6820      	ldr	r0, [r4, #0]
240057e4:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
240057e8:	6020      	str	r0, [r4, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
240057ea:	f8dc 0000 	ldr.w	r0, [ip]
240057ee:	6043      	str	r3, [r0, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
240057f0:	f8dc 3008 	ldr.w	r3, [ip, #8]
240057f4:	2b40      	cmp	r3, #64	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
240057f6:	f8dc 3000 	ldr.w	r3, [ip]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
240057fa:	f000 815b 	beq.w	24005ab4 <HAL_DMA_Start_IT+0x4dc>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
240057fe:	6099      	str	r1, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
24005800:	f8dc 3000 	ldr.w	r3, [ip]
24005804:	60da      	str	r2, [r3, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24005806:	f8dc 4000 	ldr.w	r4, [ip]
2400580a:	4b25      	ldr	r3, [pc, #148]	; (240058a0 <HAL_DMA_Start_IT+0x2c8>)
2400580c:	4923      	ldr	r1, [pc, #140]	; (2400589c <HAL_DMA_Start_IT+0x2c4>)
2400580e:	4a28      	ldr	r2, [pc, #160]	; (240058b0 <HAL_DMA_Start_IT+0x2d8>)
24005810:	428c      	cmp	r4, r1
24005812:	bf18      	it	ne
24005814:	429c      	cmpne	r4, r3
24005816:	f101 0130 	add.w	r1, r1, #48	; 0x30
2400581a:	bf0c      	ite	eq
2400581c:	2301      	moveq	r3, #1
2400581e:	2300      	movne	r3, #0
24005820:	4294      	cmp	r4, r2
24005822:	bf08      	it	eq
24005824:	f043 0301 	orreq.w	r3, r3, #1
24005828:	3230      	adds	r2, #48	; 0x30
2400582a:	428c      	cmp	r4, r1
2400582c:	bf08      	it	eq
2400582e:	f043 0301 	orreq.w	r3, r3, #1
24005832:	3130      	adds	r1, #48	; 0x30
24005834:	4294      	cmp	r4, r2
24005836:	bf08      	it	eq
24005838:	f043 0301 	orreq.w	r3, r3, #1
2400583c:	3230      	adds	r2, #48	; 0x30
2400583e:	428c      	cmp	r4, r1
24005840:	bf08      	it	eq
24005842:	f043 0301 	orreq.w	r3, r3, #1
24005846:	3130      	adds	r1, #48	; 0x30
24005848:	4294      	cmp	r4, r2
2400584a:	bf08      	it	eq
2400584c:	f043 0301 	orreq.w	r3, r3, #1
24005850:	f502 725c 	add.w	r2, r2, #880	; 0x370
24005854:	428c      	cmp	r4, r1
24005856:	bf08      	it	eq
24005858:	f043 0301 	orreq.w	r3, r3, #1
2400585c:	f501 715c 	add.w	r1, r1, #880	; 0x370
24005860:	4294      	cmp	r4, r2
24005862:	bf08      	it	eq
24005864:	f043 0301 	orreq.w	r3, r3, #1
24005868:	3230      	adds	r2, #48	; 0x30
2400586a:	428c      	cmp	r4, r1
2400586c:	bf08      	it	eq
2400586e:	f043 0301 	orreq.w	r3, r3, #1
24005872:	3130      	adds	r1, #48	; 0x30
24005874:	4294      	cmp	r4, r2
24005876:	bf08      	it	eq
24005878:	f043 0301 	orreq.w	r3, r3, #1
2400587c:	3230      	adds	r2, #48	; 0x30
2400587e:	428c      	cmp	r4, r1
24005880:	bf08      	it	eq
24005882:	f043 0301 	orreq.w	r3, r3, #1
24005886:	3130      	adds	r1, #48	; 0x30
24005888:	4294      	cmp	r4, r2
2400588a:	bf08      	it	eq
2400588c:	f043 0301 	orreq.w	r3, r3, #1
24005890:	3230      	adds	r2, #48	; 0x30
24005892:	428c      	cmp	r4, r1
24005894:	bf08      	it	eq
24005896:	f043 0301 	orreq.w	r3, r3, #1
2400589a:	e00b      	b.n	240058b4 <HAL_DMA_Start_IT+0x2dc>
2400589c:	40020028 	.word	0x40020028
240058a0:	40020010 	.word	0x40020010
240058a4:	58025408 	.word	0x58025408
240058a8:	58025494 	.word	0x58025494
240058ac:	400204b8 	.word	0x400204b8
240058b0:	40020040 	.word	0x40020040
240058b4:	4294      	cmp	r4, r2
240058b6:	bf08      	it	eq
240058b8:	f043 0301 	orreq.w	r3, r3, #1
240058bc:	b91b      	cbnz	r3, 240058c6 <HAL_DMA_Start_IT+0x2ee>
240058be:	4b9b      	ldr	r3, [pc, #620]	; (24005b2c <HAL_DMA_Start_IT+0x554>)
240058c0:	429c      	cmp	r4, r3
240058c2:	f040 8143 	bne.w	24005b4c <HAL_DMA_Start_IT+0x574>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
240058c6:	6823      	ldr	r3, [r4, #0]
240058c8:	f023 031e 	bic.w	r3, r3, #30
240058cc:	f043 0316 	orr.w	r3, r3, #22
240058d0:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
240058d2:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
240058d6:	b12b      	cbz	r3, 240058e4 <HAL_DMA_Start_IT+0x30c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
240058d8:	f8dc 2000 	ldr.w	r2, [ip]
240058dc:	6813      	ldr	r3, [r2, #0]
240058de:	f043 0308 	orr.w	r3, r3, #8
240058e2:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240058e4:	f8dc 4000 	ldr.w	r4, [ip]
240058e8:	4b91      	ldr	r3, [pc, #580]	; (24005b30 <HAL_DMA_Start_IT+0x558>)
240058ea:	4992      	ldr	r1, [pc, #584]	; (24005b34 <HAL_DMA_Start_IT+0x55c>)
240058ec:	4a92      	ldr	r2, [pc, #584]	; (24005b38 <HAL_DMA_Start_IT+0x560>)
240058ee:	428c      	cmp	r4, r1
240058f0:	bf18      	it	ne
240058f2:	429c      	cmpne	r4, r3
240058f4:	f101 0130 	add.w	r1, r1, #48	; 0x30
240058f8:	bf0c      	ite	eq
240058fa:	2301      	moveq	r3, #1
240058fc:	2300      	movne	r3, #0
240058fe:	4294      	cmp	r4, r2
24005900:	bf08      	it	eq
24005902:	f043 0301 	orreq.w	r3, r3, #1
24005906:	3230      	adds	r2, #48	; 0x30
24005908:	428c      	cmp	r4, r1
2400590a:	bf08      	it	eq
2400590c:	f043 0301 	orreq.w	r3, r3, #1
24005910:	3130      	adds	r1, #48	; 0x30
24005912:	4294      	cmp	r4, r2
24005914:	bf08      	it	eq
24005916:	f043 0301 	orreq.w	r3, r3, #1
2400591a:	3230      	adds	r2, #48	; 0x30
2400591c:	428c      	cmp	r4, r1
2400591e:	bf08      	it	eq
24005920:	f043 0301 	orreq.w	r3, r3, #1
24005924:	3130      	adds	r1, #48	; 0x30
24005926:	4294      	cmp	r4, r2
24005928:	bf08      	it	eq
2400592a:	f043 0301 	orreq.w	r3, r3, #1
2400592e:	f502 725c 	add.w	r2, r2, #880	; 0x370
24005932:	428c      	cmp	r4, r1
24005934:	bf08      	it	eq
24005936:	f043 0301 	orreq.w	r3, r3, #1
2400593a:	f501 715c 	add.w	r1, r1, #880	; 0x370
2400593e:	4294      	cmp	r4, r2
24005940:	bf08      	it	eq
24005942:	f043 0301 	orreq.w	r3, r3, #1
24005946:	3230      	adds	r2, #48	; 0x30
24005948:	428c      	cmp	r4, r1
2400594a:	bf08      	it	eq
2400594c:	f043 0301 	orreq.w	r3, r3, #1
24005950:	3130      	adds	r1, #48	; 0x30
24005952:	4294      	cmp	r4, r2
24005954:	bf08      	it	eq
24005956:	f043 0301 	orreq.w	r3, r3, #1
2400595a:	3230      	adds	r2, #48	; 0x30
2400595c:	428c      	cmp	r4, r1
2400595e:	bf08      	it	eq
24005960:	f043 0301 	orreq.w	r3, r3, #1
24005964:	3130      	adds	r1, #48	; 0x30
24005966:	4294      	cmp	r4, r2
24005968:	bf08      	it	eq
2400596a:	f043 0301 	orreq.w	r3, r3, #1
2400596e:	3230      	adds	r2, #48	; 0x30
24005970:	428c      	cmp	r4, r1
24005972:	bf08      	it	eq
24005974:	f043 0301 	orreq.w	r3, r3, #1
24005978:	3130      	adds	r1, #48	; 0x30
2400597a:	4294      	cmp	r4, r2
2400597c:	bf08      	it	eq
2400597e:	f043 0301 	orreq.w	r3, r3, #1
24005982:	4a6e      	ldr	r2, [pc, #440]	; (24005b3c <HAL_DMA_Start_IT+0x564>)
24005984:	428c      	cmp	r4, r1
24005986:	bf08      	it	eq
24005988:	f043 0301 	orreq.w	r3, r3, #1
2400598c:	496c      	ldr	r1, [pc, #432]	; (24005b40 <HAL_DMA_Start_IT+0x568>)
2400598e:	4294      	cmp	r4, r2
24005990:	bf08      	it	eq
24005992:	f043 0301 	orreq.w	r3, r3, #1
24005996:	3228      	adds	r2, #40	; 0x28
24005998:	428c      	cmp	r4, r1
2400599a:	bf08      	it	eq
2400599c:	f043 0301 	orreq.w	r3, r3, #1
240059a0:	3128      	adds	r1, #40	; 0x28
240059a2:	4294      	cmp	r4, r2
240059a4:	bf08      	it	eq
240059a6:	f043 0301 	orreq.w	r3, r3, #1
240059aa:	3228      	adds	r2, #40	; 0x28
240059ac:	428c      	cmp	r4, r1
240059ae:	bf08      	it	eq
240059b0:	f043 0301 	orreq.w	r3, r3, #1
240059b4:	3128      	adds	r1, #40	; 0x28
240059b6:	4294      	cmp	r4, r2
240059b8:	bf08      	it	eq
240059ba:	f043 0301 	orreq.w	r3, r3, #1
240059be:	3228      	adds	r2, #40	; 0x28
240059c0:	428c      	cmp	r4, r1
240059c2:	bf08      	it	eq
240059c4:	f043 0301 	orreq.w	r3, r3, #1
240059c8:	4294      	cmp	r4, r2
240059ca:	bf08      	it	eq
240059cc:	f043 0301 	orreq.w	r3, r3, #1
240059d0:	b913      	cbnz	r3, 240059d8 <HAL_DMA_Start_IT+0x400>
240059d2:	4b5c      	ldr	r3, [pc, #368]	; (24005b44 <HAL_DMA_Start_IT+0x56c>)
240059d4:	429c      	cmp	r4, r3
240059d6:	d111      	bne.n	240059fc <HAL_DMA_Start_IT+0x424>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
240059d8:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
240059dc:	681a      	ldr	r2, [r3, #0]
240059de:	03d2      	lsls	r2, r2, #15
240059e0:	d503      	bpl.n	240059ea <HAL_DMA_Start_IT+0x412>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
240059e2:	681a      	ldr	r2, [r3, #0]
240059e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
240059e8:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
240059ea:	f8dc 306c 	ldr.w	r3, [ip, #108]	; 0x6c
240059ee:	b11b      	cbz	r3, 240059f8 <HAL_DMA_Start_IT+0x420>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
240059f0:	681a      	ldr	r2, [r3, #0]
240059f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
240059f6:	601a      	str	r2, [r3, #0]
240059f8:	f8dc 4000 	ldr.w	r4, [ip]
    __HAL_DMA_ENABLE(hdma);
240059fc:	4b4c      	ldr	r3, [pc, #304]	; (24005b30 <HAL_DMA_Start_IT+0x558>)
240059fe:	494d      	ldr	r1, [pc, #308]	; (24005b34 <HAL_DMA_Start_IT+0x55c>)
24005a00:	4a4d      	ldr	r2, [pc, #308]	; (24005b38 <HAL_DMA_Start_IT+0x560>)
24005a02:	428c      	cmp	r4, r1
24005a04:	bf18      	it	ne
24005a06:	429c      	cmpne	r4, r3
24005a08:	484f      	ldr	r0, [pc, #316]	; (24005b48 <HAL_DMA_Start_IT+0x570>)
24005a0a:	f101 0160 	add.w	r1, r1, #96	; 0x60
24005a0e:	bf0c      	ite	eq
24005a10:	2301      	moveq	r3, #1
24005a12:	2300      	movne	r3, #0
24005a14:	4294      	cmp	r4, r2
24005a16:	bf08      	it	eq
24005a18:	f043 0301 	orreq.w	r3, r3, #1
24005a1c:	3230      	adds	r2, #48	; 0x30
24005a1e:	4284      	cmp	r4, r0
24005a20:	bf08      	it	eq
24005a22:	f043 0301 	orreq.w	r3, r3, #1
24005a26:	3060      	adds	r0, #96	; 0x60
24005a28:	4294      	cmp	r4, r2
24005a2a:	bf08      	it	eq
24005a2c:	f043 0301 	orreq.w	r3, r3, #1
24005a30:	3230      	adds	r2, #48	; 0x30
24005a32:	428c      	cmp	r4, r1
24005a34:	bf08      	it	eq
24005a36:	f043 0301 	orreq.w	r3, r3, #1
24005a3a:	f501 7168 	add.w	r1, r1, #928	; 0x3a0
24005a3e:	4294      	cmp	r4, r2
24005a40:	bf08      	it	eq
24005a42:	f043 0301 	orreq.w	r3, r3, #1
24005a46:	f502 725c 	add.w	r2, r2, #880	; 0x370
24005a4a:	4284      	cmp	r4, r0
24005a4c:	bf08      	it	eq
24005a4e:	f043 0301 	orreq.w	r3, r3, #1
24005a52:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
24005a56:	4294      	cmp	r4, r2
24005a58:	bf08      	it	eq
24005a5a:	f043 0301 	orreq.w	r3, r3, #1
24005a5e:	3230      	adds	r2, #48	; 0x30
24005a60:	428c      	cmp	r4, r1
24005a62:	bf08      	it	eq
24005a64:	f043 0301 	orreq.w	r3, r3, #1
24005a68:	3160      	adds	r1, #96	; 0x60
24005a6a:	4294      	cmp	r4, r2
24005a6c:	bf08      	it	eq
24005a6e:	f043 0301 	orreq.w	r3, r3, #1
24005a72:	3230      	adds	r2, #48	; 0x30
24005a74:	4284      	cmp	r4, r0
24005a76:	bf08      	it	eq
24005a78:	f043 0301 	orreq.w	r3, r3, #1
24005a7c:	4294      	cmp	r4, r2
24005a7e:	bf08      	it	eq
24005a80:	f043 0301 	orreq.w	r3, r3, #1
24005a84:	3230      	adds	r2, #48	; 0x30
24005a86:	428c      	cmp	r4, r1
24005a88:	bf08      	it	eq
24005a8a:	f043 0301 	orreq.w	r3, r3, #1
24005a8e:	4294      	cmp	r4, r2
24005a90:	bf08      	it	eq
24005a92:	f043 0301 	orreq.w	r3, r3, #1
24005a96:	b933      	cbnz	r3, 24005aa6 <HAL_DMA_Start_IT+0x4ce>
24005a98:	3060      	adds	r0, #96	; 0x60
24005a9a:	1a20      	subs	r0, r4, r0
24005a9c:	fab0 f080 	clz	r0, r0
24005aa0:	0940      	lsrs	r0, r0, #5
24005aa2:	2800      	cmp	r0, #0
24005aa4:	d03d      	beq.n	24005b22 <HAL_DMA_Start_IT+0x54a>
24005aa6:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
24005aa8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
24005aaa:	f043 0301 	orr.w	r3, r3, #1
24005aae:	6023      	str	r3, [r4, #0]
}
24005ab0:	bc70      	pop	{r4, r5, r6}
24005ab2:	4770      	bx	lr
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
24005ab4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
24005ab6:	f8dc 3000 	ldr.w	r3, [ip]
24005aba:	60d9      	str	r1, [r3, #12]
24005abc:	e6a3      	b.n	24005806 <HAL_DMA_Start_IT+0x22e>
    return HAL_ERROR;
24005abe:	2001      	movs	r0, #1
24005ac0:	4770      	bx	lr
  __HAL_LOCK(hdma);
24005ac2:	2002      	movs	r0, #2
}
24005ac4:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
24005ac6:	481d      	ldr	r0, [pc, #116]	; (24005b3c <HAL_DMA_Start_IT+0x564>)
24005ac8:	4e1d      	ldr	r6, [pc, #116]	; (24005b40 <HAL_DMA_Start_IT+0x568>)
24005aca:	42b4      	cmp	r4, r6
24005acc:	bf18      	it	ne
24005ace:	4284      	cmpne	r4, r0
24005ad0:	f106 0614 	add.w	r6, r6, #20
24005ad4:	bf0c      	ite	eq
24005ad6:	2001      	moveq	r0, #1
24005ad8:	2000      	movne	r0, #0
24005ada:	42b4      	cmp	r4, r6
24005adc:	bf08      	it	eq
24005ade:	f040 0001 	orreq.w	r0, r0, #1
24005ae2:	3614      	adds	r6, #20
24005ae4:	42b4      	cmp	r4, r6
24005ae6:	bf08      	it	eq
24005ae8:	f040 0001 	orreq.w	r0, r0, #1
24005aec:	3614      	adds	r6, #20
24005aee:	42b4      	cmp	r4, r6
24005af0:	bf08      	it	eq
24005af2:	f040 0001 	orreq.w	r0, r0, #1
24005af6:	3614      	adds	r6, #20
24005af8:	42b4      	cmp	r4, r6
24005afa:	bf08      	it	eq
24005afc:	f040 0001 	orreq.w	r0, r0, #1
24005b00:	3614      	adds	r6, #20
24005b02:	42b4      	cmp	r4, r6
24005b04:	bf08      	it	eq
24005b06:	f040 0001 	orreq.w	r0, r0, #1
24005b0a:	b910      	cbnz	r0, 24005b12 <HAL_DMA_Start_IT+0x53a>
24005b0c:	480d      	ldr	r0, [pc, #52]	; (24005b44 <HAL_DMA_Start_IT+0x56c>)
24005b0e:	4284      	cmp	r4, r0
24005b10:	d11c      	bne.n	24005b4c <HAL_DMA_Start_IT+0x574>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24005b12:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
24005b16:	f000 041f 	and.w	r4, r0, #31
24005b1a:	2001      	movs	r0, #1
24005b1c:	40a0      	lsls	r0, r4
24005b1e:	6068      	str	r0, [r5, #4]
24005b20:	e663      	b.n	240057ea <HAL_DMA_Start_IT+0x212>
    __HAL_DMA_ENABLE(hdma);
24005b22:	6823      	ldr	r3, [r4, #0]
24005b24:	f043 0301 	orr.w	r3, r3, #1
24005b28:	6023      	str	r3, [r4, #0]
24005b2a:	e56d      	b.n	24005608 <HAL_DMA_Start_IT+0x30>
24005b2c:	400204b8 	.word	0x400204b8
24005b30:	40020010 	.word	0x40020010
24005b34:	40020028 	.word	0x40020028
24005b38:	40020040 	.word	0x40020040
24005b3c:	58025408 	.word	0x58025408
24005b40:	5802541c 	.word	0x5802541c
24005b44:	58025494 	.word	0x58025494
24005b48:	40020058 	.word	0x40020058
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
24005b4c:	6823      	ldr	r3, [r4, #0]
24005b4e:	f023 030e 	bic.w	r3, r3, #14
24005b52:	f043 030a 	orr.w	r3, r3, #10
24005b56:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
24005b58:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
24005b5c:	2b00      	cmp	r3, #0
24005b5e:	f43f aec1 	beq.w	240058e4 <HAL_DMA_Start_IT+0x30c>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
24005b62:	f8dc 2000 	ldr.w	r2, [ip]
24005b66:	6813      	ldr	r3, [r2, #0]
24005b68:	f043 0304 	orr.w	r3, r3, #4
24005b6c:	6013      	str	r3, [r2, #0]
24005b6e:	e6b9      	b.n	240058e4 <HAL_DMA_Start_IT+0x30c>

24005b70 <HAL_DMA_Abort>:
{
24005b70:	b570      	push	{r4, r5, r6, lr}
24005b72:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
24005b74:	f7ff f914 	bl	24004da0 <HAL_GetTick>
  if(hdma == NULL)
24005b78:	2e00      	cmp	r6, #0
24005b7a:	f000 81ef 	beq.w	24005f5c <HAL_DMA_Abort+0x3ec>
  if(hdma->State != HAL_DMA_STATE_BUSY)
24005b7e:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
24005b82:	2b02      	cmp	r3, #2
24005b84:	f040 81d9 	bne.w	24005f3a <HAL_DMA_Abort+0x3ca>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24005b88:	6832      	ldr	r2, [r6, #0]
24005b8a:	4604      	mov	r4, r0
24005b8c:	4b6e      	ldr	r3, [pc, #440]	; (24005d48 <HAL_DMA_Abort+0x1d8>)
24005b8e:	496f      	ldr	r1, [pc, #444]	; (24005d4c <HAL_DMA_Abort+0x1dc>)
24005b90:	428a      	cmp	r2, r1
24005b92:	bf18      	it	ne
24005b94:	429a      	cmpne	r2, r3
24005b96:	f101 0118 	add.w	r1, r1, #24
24005b9a:	bf0c      	ite	eq
24005b9c:	2301      	moveq	r3, #1
24005b9e:	2300      	movne	r3, #0
24005ba0:	428a      	cmp	r2, r1
24005ba2:	bf08      	it	eq
24005ba4:	f043 0301 	orreq.w	r3, r3, #1
24005ba8:	3118      	adds	r1, #24
24005baa:	428a      	cmp	r2, r1
24005bac:	bf08      	it	eq
24005bae:	f043 0301 	orreq.w	r3, r3, #1
24005bb2:	3118      	adds	r1, #24
24005bb4:	428a      	cmp	r2, r1
24005bb6:	bf08      	it	eq
24005bb8:	f043 0301 	orreq.w	r3, r3, #1
24005bbc:	3118      	adds	r1, #24
24005bbe:	428a      	cmp	r2, r1
24005bc0:	bf08      	it	eq
24005bc2:	f043 0301 	orreq.w	r3, r3, #1
24005bc6:	3118      	adds	r1, #24
24005bc8:	428a      	cmp	r2, r1
24005bca:	bf08      	it	eq
24005bcc:	f043 0301 	orreq.w	r3, r3, #1
24005bd0:	3118      	adds	r1, #24
24005bd2:	428a      	cmp	r2, r1
24005bd4:	bf08      	it	eq
24005bd6:	f043 0301 	orreq.w	r3, r3, #1
24005bda:	f501 7156 	add.w	r1, r1, #856	; 0x358
24005bde:	428a      	cmp	r2, r1
24005be0:	bf08      	it	eq
24005be2:	f043 0301 	orreq.w	r3, r3, #1
24005be6:	3118      	adds	r1, #24
24005be8:	428a      	cmp	r2, r1
24005bea:	bf08      	it	eq
24005bec:	f043 0301 	orreq.w	r3, r3, #1
24005bf0:	3118      	adds	r1, #24
24005bf2:	428a      	cmp	r2, r1
24005bf4:	bf08      	it	eq
24005bf6:	f043 0301 	orreq.w	r3, r3, #1
24005bfa:	3118      	adds	r1, #24
24005bfc:	428a      	cmp	r2, r1
24005bfe:	bf08      	it	eq
24005c00:	f043 0301 	orreq.w	r3, r3, #1
24005c04:	3118      	adds	r1, #24
24005c06:	428a      	cmp	r2, r1
24005c08:	bf08      	it	eq
24005c0a:	f043 0301 	orreq.w	r3, r3, #1
24005c0e:	3118      	adds	r1, #24
24005c10:	428a      	cmp	r2, r1
24005c12:	bf08      	it	eq
24005c14:	f043 0301 	orreq.w	r3, r3, #1
24005c18:	3118      	adds	r1, #24
24005c1a:	428a      	cmp	r2, r1
24005c1c:	bf08      	it	eq
24005c1e:	f043 0301 	orreq.w	r3, r3, #1
24005c22:	b91b      	cbnz	r3, 24005c2c <HAL_DMA_Abort+0xbc>
24005c24:	4b4a      	ldr	r3, [pc, #296]	; (24005d50 <HAL_DMA_Abort+0x1e0>)
24005c26:	429a      	cmp	r2, r3
24005c28:	f040 81a2 	bne.w	24005f70 <HAL_DMA_Abort+0x400>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
24005c2c:	6813      	ldr	r3, [r2, #0]
24005c2e:	f023 031e 	bic.w	r3, r3, #30
24005c32:	6013      	str	r3, [r2, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
24005c34:	6832      	ldr	r2, [r6, #0]
24005c36:	6953      	ldr	r3, [r2, #20]
24005c38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
24005c3c:	6153      	str	r3, [r2, #20]
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
24005c3e:	6832      	ldr	r2, [r6, #0]
24005c40:	4615      	mov	r5, r2
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24005c42:	4b41      	ldr	r3, [pc, #260]	; (24005d48 <HAL_DMA_Abort+0x1d8>)
24005c44:	4941      	ldr	r1, [pc, #260]	; (24005d4c <HAL_DMA_Abort+0x1dc>)
24005c46:	428a      	cmp	r2, r1
24005c48:	bf18      	it	ne
24005c4a:	429a      	cmpne	r2, r3
24005c4c:	f101 0118 	add.w	r1, r1, #24
24005c50:	bf0c      	ite	eq
24005c52:	2301      	moveq	r3, #1
24005c54:	2300      	movne	r3, #0
24005c56:	428a      	cmp	r2, r1
24005c58:	bf08      	it	eq
24005c5a:	f043 0301 	orreq.w	r3, r3, #1
24005c5e:	3118      	adds	r1, #24
24005c60:	428a      	cmp	r2, r1
24005c62:	bf08      	it	eq
24005c64:	f043 0301 	orreq.w	r3, r3, #1
24005c68:	3118      	adds	r1, #24
24005c6a:	428a      	cmp	r2, r1
24005c6c:	bf08      	it	eq
24005c6e:	f043 0301 	orreq.w	r3, r3, #1
24005c72:	3118      	adds	r1, #24
24005c74:	428a      	cmp	r2, r1
24005c76:	bf08      	it	eq
24005c78:	f043 0301 	orreq.w	r3, r3, #1
24005c7c:	3118      	adds	r1, #24
24005c7e:	428a      	cmp	r2, r1
24005c80:	bf08      	it	eq
24005c82:	f043 0301 	orreq.w	r3, r3, #1
24005c86:	3118      	adds	r1, #24
24005c88:	428a      	cmp	r2, r1
24005c8a:	bf08      	it	eq
24005c8c:	f043 0301 	orreq.w	r3, r3, #1
24005c90:	f501 7156 	add.w	r1, r1, #856	; 0x358
24005c94:	428a      	cmp	r2, r1
24005c96:	bf08      	it	eq
24005c98:	f043 0301 	orreq.w	r3, r3, #1
24005c9c:	3118      	adds	r1, #24
24005c9e:	428a      	cmp	r2, r1
24005ca0:	bf08      	it	eq
24005ca2:	f043 0301 	orreq.w	r3, r3, #1
24005ca6:	3118      	adds	r1, #24
24005ca8:	428a      	cmp	r2, r1
24005caa:	bf08      	it	eq
24005cac:	f043 0301 	orreq.w	r3, r3, #1
24005cb0:	3118      	adds	r1, #24
24005cb2:	428a      	cmp	r2, r1
24005cb4:	bf08      	it	eq
24005cb6:	f043 0301 	orreq.w	r3, r3, #1
24005cba:	3118      	adds	r1, #24
24005cbc:	428a      	cmp	r2, r1
24005cbe:	bf08      	it	eq
24005cc0:	f043 0301 	orreq.w	r3, r3, #1
24005cc4:	3118      	adds	r1, #24
24005cc6:	428a      	cmp	r2, r1
24005cc8:	bf08      	it	eq
24005cca:	f043 0301 	orreq.w	r3, r3, #1
24005cce:	3118      	adds	r1, #24
24005cd0:	428a      	cmp	r2, r1
24005cd2:	bf08      	it	eq
24005cd4:	f043 0301 	orreq.w	r3, r3, #1
24005cd8:	3118      	adds	r1, #24
24005cda:	428a      	cmp	r2, r1
24005cdc:	bf08      	it	eq
24005cde:	f043 0301 	orreq.w	r3, r3, #1
24005ce2:	491c      	ldr	r1, [pc, #112]	; (24005d54 <HAL_DMA_Abort+0x1e4>)
24005ce4:	428a      	cmp	r2, r1
24005ce6:	bf08      	it	eq
24005ce8:	f043 0301 	orreq.w	r3, r3, #1
24005cec:	3114      	adds	r1, #20
24005cee:	428a      	cmp	r2, r1
24005cf0:	bf08      	it	eq
24005cf2:	f043 0301 	orreq.w	r3, r3, #1
24005cf6:	3114      	adds	r1, #20
24005cf8:	428a      	cmp	r2, r1
24005cfa:	bf08      	it	eq
24005cfc:	f043 0301 	orreq.w	r3, r3, #1
24005d00:	3114      	adds	r1, #20
24005d02:	428a      	cmp	r2, r1
24005d04:	bf08      	it	eq
24005d06:	f043 0301 	orreq.w	r3, r3, #1
24005d0a:	3114      	adds	r1, #20
24005d0c:	428a      	cmp	r2, r1
24005d0e:	bf08      	it	eq
24005d10:	f043 0301 	orreq.w	r3, r3, #1
24005d14:	3114      	adds	r1, #20
24005d16:	428a      	cmp	r2, r1
24005d18:	bf08      	it	eq
24005d1a:	f043 0301 	orreq.w	r3, r3, #1
24005d1e:	3114      	adds	r1, #20
24005d20:	428a      	cmp	r2, r1
24005d22:	bf08      	it	eq
24005d24:	f043 0301 	orreq.w	r3, r3, #1
24005d28:	b913      	cbnz	r3, 24005d30 <HAL_DMA_Abort+0x1c0>
24005d2a:	4b0b      	ldr	r3, [pc, #44]	; (24005d58 <HAL_DMA_Abort+0x1e8>)
24005d2c:	429a      	cmp	r2, r3
24005d2e:	d105      	bne.n	24005d3c <HAL_DMA_Abort+0x1cc>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24005d30:	6e32      	ldr	r2, [r6, #96]	; 0x60
24005d32:	6813      	ldr	r3, [r2, #0]
24005d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
24005d38:	6013      	str	r3, [r2, #0]
24005d3a:	6832      	ldr	r2, [r6, #0]
    __HAL_DMA_DISABLE(hdma);
24005d3c:	6813      	ldr	r3, [r2, #0]
24005d3e:	f023 0301 	bic.w	r3, r3, #1
24005d42:	6013      	str	r3, [r2, #0]
24005d44:	e010      	b.n	24005d68 <HAL_DMA_Abort+0x1f8>
24005d46:	bf00      	nop
24005d48:	40020010 	.word	0x40020010
24005d4c:	40020028 	.word	0x40020028
24005d50:	400204b8 	.word	0x400204b8
24005d54:	58025408 	.word	0x58025408
24005d58:	58025494 	.word	0x58025494
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
24005d5c:	f7ff f820 	bl	24004da0 <HAL_GetTick>
24005d60:	1b00      	subs	r0, r0, r4
24005d62:	2805      	cmp	r0, #5
24005d64:	f200 80f0 	bhi.w	24005f48 <HAL_DMA_Abort+0x3d8>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
24005d68:	682b      	ldr	r3, [r5, #0]
24005d6a:	07db      	lsls	r3, r3, #31
24005d6c:	d4f6      	bmi.n	24005d5c <HAL_DMA_Abort+0x1ec>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24005d6e:	6832      	ldr	r2, [r6, #0]
24005d70:	4b83      	ldr	r3, [pc, #524]	; (24005f80 <HAL_DMA_Abort+0x410>)
24005d72:	4884      	ldr	r0, [pc, #528]	; (24005f84 <HAL_DMA_Abort+0x414>)
24005d74:	4984      	ldr	r1, [pc, #528]	; (24005f88 <HAL_DMA_Abort+0x418>)
24005d76:	4282      	cmp	r2, r0
24005d78:	bf18      	it	ne
24005d7a:	429a      	cmpne	r2, r3
24005d7c:	f100 0030 	add.w	r0, r0, #48	; 0x30
24005d80:	bf0c      	ite	eq
24005d82:	2301      	moveq	r3, #1
24005d84:	2300      	movne	r3, #0
24005d86:	428a      	cmp	r2, r1
24005d88:	bf08      	it	eq
24005d8a:	f043 0301 	orreq.w	r3, r3, #1
24005d8e:	3130      	adds	r1, #48	; 0x30
24005d90:	4282      	cmp	r2, r0
24005d92:	bf08      	it	eq
24005d94:	f043 0301 	orreq.w	r3, r3, #1
24005d98:	3030      	adds	r0, #48	; 0x30
24005d9a:	428a      	cmp	r2, r1
24005d9c:	bf08      	it	eq
24005d9e:	f043 0301 	orreq.w	r3, r3, #1
24005da2:	3130      	adds	r1, #48	; 0x30
24005da4:	4282      	cmp	r2, r0
24005da6:	bf08      	it	eq
24005da8:	f043 0301 	orreq.w	r3, r3, #1
24005dac:	3030      	adds	r0, #48	; 0x30
24005dae:	428a      	cmp	r2, r1
24005db0:	bf08      	it	eq
24005db2:	f043 0301 	orreq.w	r3, r3, #1
24005db6:	f501 715c 	add.w	r1, r1, #880	; 0x370
24005dba:	4282      	cmp	r2, r0
24005dbc:	bf08      	it	eq
24005dbe:	f043 0301 	orreq.w	r3, r3, #1
24005dc2:	f500 705c 	add.w	r0, r0, #880	; 0x370
24005dc6:	428a      	cmp	r2, r1
24005dc8:	bf08      	it	eq
24005dca:	f043 0301 	orreq.w	r3, r3, #1
24005dce:	3130      	adds	r1, #48	; 0x30
24005dd0:	4282      	cmp	r2, r0
24005dd2:	bf08      	it	eq
24005dd4:	f043 0301 	orreq.w	r3, r3, #1
24005dd8:	3030      	adds	r0, #48	; 0x30
24005dda:	428a      	cmp	r2, r1
24005ddc:	bf08      	it	eq
24005dde:	f043 0301 	orreq.w	r3, r3, #1
24005de2:	3130      	adds	r1, #48	; 0x30
24005de4:	4282      	cmp	r2, r0
24005de6:	bf08      	it	eq
24005de8:	f043 0301 	orreq.w	r3, r3, #1
24005dec:	3030      	adds	r0, #48	; 0x30
24005dee:	428a      	cmp	r2, r1
24005df0:	bf08      	it	eq
24005df2:	f043 0301 	orreq.w	r3, r3, #1
24005df6:	3130      	adds	r1, #48	; 0x30
24005df8:	4282      	cmp	r2, r0
24005dfa:	bf08      	it	eq
24005dfc:	f043 0301 	orreq.w	r3, r3, #1
24005e00:	428a      	cmp	r2, r1
24005e02:	bf08      	it	eq
24005e04:	f043 0301 	orreq.w	r3, r3, #1
24005e08:	b91b      	cbnz	r3, 24005e12 <HAL_DMA_Abort+0x2a2>
24005e0a:	4b60      	ldr	r3, [pc, #384]	; (24005f8c <HAL_DMA_Abort+0x41c>)
24005e0c:	429a      	cmp	r2, r3
24005e0e:	f040 80a7 	bne.w	24005f60 <HAL_DMA_Abort+0x3f0>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24005e12:	6df2      	ldr	r2, [r6, #92]	; 0x5c
24005e14:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
24005e16:	6db1      	ldr	r1, [r6, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24005e18:	f002 021f 	and.w	r2, r2, #31
24005e1c:	4093      	lsls	r3, r2
24005e1e:	608b      	str	r3, [r1, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24005e20:	6832      	ldr	r2, [r6, #0]
24005e22:	4b57      	ldr	r3, [pc, #348]	; (24005f80 <HAL_DMA_Abort+0x410>)
24005e24:	4857      	ldr	r0, [pc, #348]	; (24005f84 <HAL_DMA_Abort+0x414>)
24005e26:	4958      	ldr	r1, [pc, #352]	; (24005f88 <HAL_DMA_Abort+0x418>)
24005e28:	4282      	cmp	r2, r0
24005e2a:	bf18      	it	ne
24005e2c:	429a      	cmpne	r2, r3
24005e2e:	f100 0030 	add.w	r0, r0, #48	; 0x30
24005e32:	bf0c      	ite	eq
24005e34:	2301      	moveq	r3, #1
24005e36:	2300      	movne	r3, #0
24005e38:	428a      	cmp	r2, r1
24005e3a:	bf08      	it	eq
24005e3c:	f043 0301 	orreq.w	r3, r3, #1
24005e40:	3130      	adds	r1, #48	; 0x30
24005e42:	4282      	cmp	r2, r0
24005e44:	bf08      	it	eq
24005e46:	f043 0301 	orreq.w	r3, r3, #1
24005e4a:	3030      	adds	r0, #48	; 0x30
24005e4c:	428a      	cmp	r2, r1
24005e4e:	bf08      	it	eq
24005e50:	f043 0301 	orreq.w	r3, r3, #1
24005e54:	3130      	adds	r1, #48	; 0x30
24005e56:	4282      	cmp	r2, r0
24005e58:	bf08      	it	eq
24005e5a:	f043 0301 	orreq.w	r3, r3, #1
24005e5e:	3030      	adds	r0, #48	; 0x30
24005e60:	428a      	cmp	r2, r1
24005e62:	bf08      	it	eq
24005e64:	f043 0301 	orreq.w	r3, r3, #1
24005e68:	f501 715c 	add.w	r1, r1, #880	; 0x370
24005e6c:	4282      	cmp	r2, r0
24005e6e:	bf08      	it	eq
24005e70:	f043 0301 	orreq.w	r3, r3, #1
24005e74:	f500 705c 	add.w	r0, r0, #880	; 0x370
24005e78:	428a      	cmp	r2, r1
24005e7a:	bf08      	it	eq
24005e7c:	f043 0301 	orreq.w	r3, r3, #1
24005e80:	3130      	adds	r1, #48	; 0x30
24005e82:	4282      	cmp	r2, r0
24005e84:	bf08      	it	eq
24005e86:	f043 0301 	orreq.w	r3, r3, #1
24005e8a:	3030      	adds	r0, #48	; 0x30
24005e8c:	428a      	cmp	r2, r1
24005e8e:	bf08      	it	eq
24005e90:	f043 0301 	orreq.w	r3, r3, #1
24005e94:	3130      	adds	r1, #48	; 0x30
24005e96:	4282      	cmp	r2, r0
24005e98:	bf08      	it	eq
24005e9a:	f043 0301 	orreq.w	r3, r3, #1
24005e9e:	3030      	adds	r0, #48	; 0x30
24005ea0:	428a      	cmp	r2, r1
24005ea2:	bf08      	it	eq
24005ea4:	f043 0301 	orreq.w	r3, r3, #1
24005ea8:	3130      	adds	r1, #48	; 0x30
24005eaa:	4282      	cmp	r2, r0
24005eac:	bf08      	it	eq
24005eae:	f043 0301 	orreq.w	r3, r3, #1
24005eb2:	3030      	adds	r0, #48	; 0x30
24005eb4:	428a      	cmp	r2, r1
24005eb6:	bf08      	it	eq
24005eb8:	f043 0301 	orreq.w	r3, r3, #1
24005ebc:	4934      	ldr	r1, [pc, #208]	; (24005f90 <HAL_DMA_Abort+0x420>)
24005ebe:	4282      	cmp	r2, r0
24005ec0:	bf08      	it	eq
24005ec2:	f043 0301 	orreq.w	r3, r3, #1
24005ec6:	4833      	ldr	r0, [pc, #204]	; (24005f94 <HAL_DMA_Abort+0x424>)
24005ec8:	428a      	cmp	r2, r1
24005eca:	bf08      	it	eq
24005ecc:	f043 0301 	orreq.w	r3, r3, #1
24005ed0:	3128      	adds	r1, #40	; 0x28
24005ed2:	4282      	cmp	r2, r0
24005ed4:	bf08      	it	eq
24005ed6:	f043 0301 	orreq.w	r3, r3, #1
24005eda:	3028      	adds	r0, #40	; 0x28
24005edc:	428a      	cmp	r2, r1
24005ede:	bf08      	it	eq
24005ee0:	f043 0301 	orreq.w	r3, r3, #1
24005ee4:	3128      	adds	r1, #40	; 0x28
24005ee6:	4282      	cmp	r2, r0
24005ee8:	bf08      	it	eq
24005eea:	f043 0301 	orreq.w	r3, r3, #1
24005eee:	3028      	adds	r0, #40	; 0x28
24005ef0:	428a      	cmp	r2, r1
24005ef2:	bf08      	it	eq
24005ef4:	f043 0301 	orreq.w	r3, r3, #1
24005ef8:	3128      	adds	r1, #40	; 0x28
24005efa:	4282      	cmp	r2, r0
24005efc:	bf08      	it	eq
24005efe:	f043 0301 	orreq.w	r3, r3, #1
24005f02:	428a      	cmp	r2, r1
24005f04:	bf08      	it	eq
24005f06:	f043 0301 	orreq.w	r3, r3, #1
24005f0a:	b913      	cbnz	r3, 24005f12 <HAL_DMA_Abort+0x3a2>
24005f0c:	4b22      	ldr	r3, [pc, #136]	; (24005f98 <HAL_DMA_Abort+0x428>)
24005f0e:	429a      	cmp	r2, r3
24005f10:	d10b      	bne.n	24005f2a <HAL_DMA_Abort+0x3ba>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24005f12:	e9d6 3219 	ldrd	r3, r2, [r6, #100]	; 0x64
24005f16:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
24005f18:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
24005f1a:	b133      	cbz	r3, 24005f2a <HAL_DMA_Abort+0x3ba>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
24005f1c:	681a      	ldr	r2, [r3, #0]
24005f1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24005f22:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24005f24:	e9d6 321c 	ldrd	r3, r2, [r6, #112]	; 0x70
24005f28:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
24005f2a:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
24005f2c:	2201      	movs	r2, #1
  return HAL_OK;
24005f2e:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
24005f30:	f886 2035 	strb.w	r2, [r6, #53]	; 0x35
    __HAL_UNLOCK(hdma);
24005f34:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
}
24005f38:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
24005f3a:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
24005f3c:	2300      	movs	r3, #0
    return HAL_ERROR;
24005f3e:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
24005f40:	6572      	str	r2, [r6, #84]	; 0x54
    __HAL_UNLOCK(hdma);
24005f42:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
}
24005f46:	bd70      	pop	{r4, r5, r6, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24005f48:	2120      	movs	r1, #32
        hdma->State = HAL_DMA_STATE_ERROR;
24005f4a:	2203      	movs	r2, #3
        __HAL_UNLOCK(hdma);
24005f4c:	2300      	movs	r3, #0
        return HAL_ERROR;
24005f4e:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24005f50:	6571      	str	r1, [r6, #84]	; 0x54
        __HAL_UNLOCK(hdma);
24005f52:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
24005f56:	f886 2035 	strb.w	r2, [r6, #53]	; 0x35
}
24005f5a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
24005f5c:	2001      	movs	r0, #1
}
24005f5e:	bd70      	pop	{r4, r5, r6, pc}
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24005f60:	6df2      	ldr	r2, [r6, #92]	; 0x5c
24005f62:	2301      	movs	r3, #1
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
24005f64:	6db1      	ldr	r1, [r6, #88]	; 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24005f66:	f002 021f 	and.w	r2, r2, #31
24005f6a:	4093      	lsls	r3, r2
24005f6c:	604b      	str	r3, [r1, #4]
24005f6e:	e757      	b.n	24005e20 <HAL_DMA_Abort+0x2b0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
24005f70:	6813      	ldr	r3, [r2, #0]
24005f72:	f023 030e 	bic.w	r3, r3, #14
24005f76:	6013      	str	r3, [r2, #0]
      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
24005f78:	6832      	ldr	r2, [r6, #0]
24005f7a:	4615      	mov	r5, r2
24005f7c:	e661      	b.n	24005c42 <HAL_DMA_Abort+0xd2>
24005f7e:	bf00      	nop
24005f80:	40020010 	.word	0x40020010
24005f84:	40020028 	.word	0x40020028
24005f88:	40020040 	.word	0x40020040
24005f8c:	400204b8 	.word	0x400204b8
24005f90:	58025408 	.word	0x58025408
24005f94:	5802541c 	.word	0x5802541c
24005f98:	58025494 	.word	0x58025494

24005f9c <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
24005f9c:	2800      	cmp	r0, #0
24005f9e:	d065      	beq.n	2400606c <HAL_DMA_Abort_IT+0xd0>
{
24005fa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
24005fa4:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
24005fa8:	4603      	mov	r3, r0
24005faa:	2a02      	cmp	r2, #2
24005fac:	d159      	bne.n	24006062 <HAL_DMA_Abort_IT+0xc6>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24005fae:	6801      	ldr	r1, [r0, #0]
24005fb0:	4883      	ldr	r0, [pc, #524]	; (240061c0 <HAL_DMA_Abort_IT+0x224>)
24005fb2:	4281      	cmp	r1, r0
24005fb4:	d04b      	beq.n	2400604e <HAL_DMA_Abort_IT+0xb2>
24005fb6:	4c83      	ldr	r4, [pc, #524]	; (240061c4 <HAL_DMA_Abort_IT+0x228>)
24005fb8:	42a1      	cmp	r1, r4
24005fba:	d048      	beq.n	2400604e <HAL_DMA_Abort_IT+0xb2>
24005fbc:	f8df a228 	ldr.w	sl, [pc, #552]	; 240061e8 <HAL_DMA_Abort_IT+0x24c>
24005fc0:	f8df b214 	ldr.w	fp, [pc, #532]	; 240061d8 <HAL_DMA_Abort_IT+0x23c>
24005fc4:	f8df 9224 	ldr.w	r9, [pc, #548]	; 240061ec <HAL_DMA_Abort_IT+0x250>
24005fc8:	4559      	cmp	r1, fp
24005fca:	bf18      	it	ne
24005fcc:	4551      	cmpne	r1, sl
24005fce:	f8df 8220 	ldr.w	r8, [pc, #544]	; 240061f0 <HAL_DMA_Abort_IT+0x254>
24005fd2:	f8df e220 	ldr.w	lr, [pc, #544]	; 240061f4 <HAL_DMA_Abort_IT+0x258>
24005fd6:	bf0c      	ite	eq
24005fd8:	2201      	moveq	r2, #1
24005fda:	2200      	movne	r2, #0
24005fdc:	f8df c218 	ldr.w	ip, [pc, #536]	; 240061f8 <HAL_DMA_Abort_IT+0x25c>
24005fe0:	4549      	cmp	r1, r9
24005fe2:	bf08      	it	eq
24005fe4:	f042 0201 	orreq.w	r2, r2, #1
24005fe8:	4d77      	ldr	r5, [pc, #476]	; (240061c8 <HAL_DMA_Abort_IT+0x22c>)
24005fea:	4f78      	ldr	r7, [pc, #480]	; (240061cc <HAL_DMA_Abort_IT+0x230>)
24005fec:	4541      	cmp	r1, r8
24005fee:	bf08      	it	eq
24005ff0:	f042 0201 	orreq.w	r2, r2, #1
24005ff4:	4e76      	ldr	r6, [pc, #472]	; (240061d0 <HAL_DMA_Abort_IT+0x234>)
24005ff6:	4571      	cmp	r1, lr
24005ff8:	bf08      	it	eq
24005ffa:	f042 0201 	orreq.w	r2, r2, #1
24005ffe:	4561      	cmp	r1, ip
24006000:	bf08      	it	eq
24006002:	f042 0201 	orreq.w	r2, r2, #1
24006006:	42a9      	cmp	r1, r5
24006008:	bf08      	it	eq
2400600a:	f042 0201 	orreq.w	r2, r2, #1
2400600e:	3518      	adds	r5, #24
24006010:	42a9      	cmp	r1, r5
24006012:	bf08      	it	eq
24006014:	f042 0201 	orreq.w	r2, r2, #1
24006018:	3518      	adds	r5, #24
2400601a:	42a9      	cmp	r1, r5
2400601c:	bf08      	it	eq
2400601e:	f042 0201 	orreq.w	r2, r2, #1
24006022:	3518      	adds	r5, #24
24006024:	42a9      	cmp	r1, r5
24006026:	bf08      	it	eq
24006028:	f042 0201 	orreq.w	r2, r2, #1
2400602c:	3548      	adds	r5, #72	; 0x48
2400602e:	42b9      	cmp	r1, r7
24006030:	bf08      	it	eq
24006032:	f042 0201 	orreq.w	r2, r2, #1
24006036:	42b1      	cmp	r1, r6
24006038:	bf08      	it	eq
2400603a:	f042 0201 	orreq.w	r2, r2, #1
2400603e:	42a9      	cmp	r1, r5
24006040:	bf08      	it	eq
24006042:	f042 0201 	orreq.w	r2, r2, #1
24006046:	b912      	cbnz	r2, 2400604e <HAL_DMA_Abort_IT+0xb2>
24006048:	4a62      	ldr	r2, [pc, #392]	; (240061d4 <HAL_DMA_Abort_IT+0x238>)
2400604a:	4291      	cmp	r1, r2
2400604c:	d110      	bne.n	24006070 <HAL_DMA_Abort_IT+0xd4>
      hdma->State = HAL_DMA_STATE_ABORT;
2400604e:	2204      	movs	r2, #4
  return HAL_OK;
24006050:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
24006052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
24006056:	680b      	ldr	r3, [r1, #0]
24006058:	f023 0301 	bic.w	r3, r3, #1
2400605c:	600b      	str	r3, [r1, #0]
}
2400605e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
24006062:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
24006064:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
24006066:	655a      	str	r2, [r3, #84]	; 0x54
}
24006068:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
2400606c:	2001      	movs	r0, #1
}
2400606e:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
24006070:	680a      	ldr	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24006072:	4c54      	ldr	r4, [pc, #336]	; (240061c4 <HAL_DMA_Abort_IT+0x228>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
24006074:	f022 020e 	bic.w	r2, r2, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24006078:	4857      	ldr	r0, [pc, #348]	; (240061d8 <HAL_DMA_Abort_IT+0x23c>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
2400607a:	600a      	str	r2, [r1, #0]
      __HAL_DMA_DISABLE(hdma);
2400607c:	6819      	ldr	r1, [r3, #0]
2400607e:	680a      	ldr	r2, [r1, #0]
24006080:	f022 0201 	bic.w	r2, r2, #1
24006084:	600a      	str	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24006086:	4a4e      	ldr	r2, [pc, #312]	; (240061c0 <HAL_DMA_Abort_IT+0x224>)
24006088:	6819      	ldr	r1, [r3, #0]
2400608a:	42a1      	cmp	r1, r4
2400608c:	bf18      	it	ne
2400608e:	4291      	cmpne	r1, r2
24006090:	f104 0430 	add.w	r4, r4, #48	; 0x30
24006094:	bf0c      	ite	eq
24006096:	2201      	moveq	r2, #1
24006098:	2200      	movne	r2, #0
2400609a:	4281      	cmp	r1, r0
2400609c:	bf08      	it	eq
2400609e:	f042 0201 	orreq.w	r2, r2, #1
240060a2:	3030      	adds	r0, #48	; 0x30
240060a4:	42a1      	cmp	r1, r4
240060a6:	bf08      	it	eq
240060a8:	f042 0201 	orreq.w	r2, r2, #1
240060ac:	3430      	adds	r4, #48	; 0x30
240060ae:	4281      	cmp	r1, r0
240060b0:	bf08      	it	eq
240060b2:	f042 0201 	orreq.w	r2, r2, #1
240060b6:	3030      	adds	r0, #48	; 0x30
240060b8:	42a1      	cmp	r1, r4
240060ba:	bf08      	it	eq
240060bc:	f042 0201 	orreq.w	r2, r2, #1
240060c0:	3430      	adds	r4, #48	; 0x30
240060c2:	4281      	cmp	r1, r0
240060c4:	bf08      	it	eq
240060c6:	f042 0201 	orreq.w	r2, r2, #1
240060ca:	f500 705c 	add.w	r0, r0, #880	; 0x370
240060ce:	42a1      	cmp	r1, r4
240060d0:	bf08      	it	eq
240060d2:	f042 0201 	orreq.w	r2, r2, #1
240060d6:	f504 745c 	add.w	r4, r4, #880	; 0x370
240060da:	4281      	cmp	r1, r0
240060dc:	bf08      	it	eq
240060de:	f042 0201 	orreq.w	r2, r2, #1
240060e2:	3030      	adds	r0, #48	; 0x30
240060e4:	42a1      	cmp	r1, r4
240060e6:	bf08      	it	eq
240060e8:	f042 0201 	orreq.w	r2, r2, #1
240060ec:	3430      	adds	r4, #48	; 0x30
240060ee:	4281      	cmp	r1, r0
240060f0:	bf08      	it	eq
240060f2:	f042 0201 	orreq.w	r2, r2, #1
240060f6:	3030      	adds	r0, #48	; 0x30
240060f8:	42a1      	cmp	r1, r4
240060fa:	bf08      	it	eq
240060fc:	f042 0201 	orreq.w	r2, r2, #1
24006100:	3430      	adds	r4, #48	; 0x30
24006102:	4281      	cmp	r1, r0
24006104:	bf08      	it	eq
24006106:	f042 0201 	orreq.w	r2, r2, #1
2400610a:	3030      	adds	r0, #48	; 0x30
2400610c:	42a1      	cmp	r1, r4
2400610e:	bf08      	it	eq
24006110:	f042 0201 	orreq.w	r2, r2, #1
24006114:	3430      	adds	r4, #48	; 0x30
24006116:	4281      	cmp	r1, r0
24006118:	bf08      	it	eq
2400611a:	f042 0201 	orreq.w	r2, r2, #1
2400611e:	482f      	ldr	r0, [pc, #188]	; (240061dc <HAL_DMA_Abort_IT+0x240>)
24006120:	42a1      	cmp	r1, r4
24006122:	bf08      	it	eq
24006124:	f042 0201 	orreq.w	r2, r2, #1
24006128:	4c2d      	ldr	r4, [pc, #180]	; (240061e0 <HAL_DMA_Abort_IT+0x244>)
2400612a:	4281      	cmp	r1, r0
2400612c:	bf08      	it	eq
2400612e:	f042 0201 	orreq.w	r2, r2, #1
24006132:	3028      	adds	r0, #40	; 0x28
24006134:	42a1      	cmp	r1, r4
24006136:	bf08      	it	eq
24006138:	f042 0201 	orreq.w	r2, r2, #1
2400613c:	3428      	adds	r4, #40	; 0x28
2400613e:	4281      	cmp	r1, r0
24006140:	bf08      	it	eq
24006142:	f042 0201 	orreq.w	r2, r2, #1
24006146:	3028      	adds	r0, #40	; 0x28
24006148:	42a1      	cmp	r1, r4
2400614a:	bf08      	it	eq
2400614c:	f042 0201 	orreq.w	r2, r2, #1
24006150:	3428      	adds	r4, #40	; 0x28
24006152:	4281      	cmp	r1, r0
24006154:	bf08      	it	eq
24006156:	f042 0201 	orreq.w	r2, r2, #1
2400615a:	3028      	adds	r0, #40	; 0x28
2400615c:	42a1      	cmp	r1, r4
2400615e:	bf08      	it	eq
24006160:	f042 0201 	orreq.w	r2, r2, #1
24006164:	4281      	cmp	r1, r0
24006166:	bf08      	it	eq
24006168:	f042 0201 	orreq.w	r2, r2, #1
2400616c:	b912      	cbnz	r2, 24006174 <HAL_DMA_Abort_IT+0x1d8>
2400616e:	4a1d      	ldr	r2, [pc, #116]	; (240061e4 <HAL_DMA_Abort_IT+0x248>)
24006170:	4291      	cmp	r1, r2
24006172:	d117      	bne.n	240061a4 <HAL_DMA_Abort_IT+0x208>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24006174:	6e18      	ldr	r0, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24006176:	2201      	movs	r2, #1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24006178:	6801      	ldr	r1, [r0, #0]
2400617a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
2400617e:	6001      	str	r1, [r0, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
24006180:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24006184:	f001 011f 	and.w	r1, r1, #31
24006188:	408a      	lsls	r2, r1
2400618a:	6042      	str	r2, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
2400618c:	e9d3 2119 	ldrd	r2, r1, [r3, #100]	; 0x64
24006190:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
24006192:	6eda      	ldr	r2, [r3, #108]	; 0x6c
24006194:	b132      	cbz	r2, 240061a4 <HAL_DMA_Abort_IT+0x208>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
24006196:	6811      	ldr	r1, [r2, #0]
24006198:	f421 7180 	bic.w	r1, r1, #256	; 0x100
2400619c:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
2400619e:	e9d3 211c 	ldrd	r2, r1, [r3, #112]	; 0x70
240061a2:	6051      	str	r1, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY;
240061a4:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
240061a6:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
240061a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
240061aa:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
240061ae:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
240061b2:	b11a      	cbz	r2, 240061bc <HAL_DMA_Abort_IT+0x220>
        hdma->XferAbortCallback(hdma);
240061b4:	4618      	mov	r0, r3
240061b6:	4790      	blx	r2
  return HAL_OK;
240061b8:	4620      	mov	r0, r4
240061ba:	e755      	b.n	24006068 <HAL_DMA_Abort_IT+0xcc>
240061bc:	4610      	mov	r0, r2
240061be:	e753      	b.n	24006068 <HAL_DMA_Abort_IT+0xcc>
240061c0:	40020010 	.word	0x40020010
240061c4:	40020028 	.word	0x40020028
240061c8:	40020410 	.word	0x40020410
240061cc:	40020470 	.word	0x40020470
240061d0:	40020488 	.word	0x40020488
240061d4:	400204b8 	.word	0x400204b8
240061d8:	40020040 	.word	0x40020040
240061dc:	58025408 	.word	0x58025408
240061e0:	5802541c 	.word	0x5802541c
240061e4:	58025494 	.word	0x58025494
240061e8:	40020058 	.word	0x40020058
240061ec:	40020070 	.word	0x40020070
240061f0:	40020088 	.word	0x40020088
240061f4:	400200a0 	.word	0x400200a0
240061f8:	400200b8 	.word	0x400200b8

240061fc <HAL_DMA_IRQHandler>:
{
240061fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
240061fe:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
24006200:	4b9a      	ldr	r3, [pc, #616]	; (2400646c <HAL_DMA_IRQHandler+0x270>)
{
24006202:	b083      	sub	sp, #12
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
24006204:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
24006206:	681f      	ldr	r7, [r3, #0]
{
24006208:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
2400620a:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
2400620c:	6803      	ldr	r3, [r0, #0]
2400620e:	4a98      	ldr	r2, [pc, #608]	; (24006470 <HAL_DMA_IRQHandler+0x274>)
  tmpisr_dma  = regs_dma->ISR;
24006210:	6835      	ldr	r5, [r6, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
24006212:	4293      	cmp	r3, r2
  tmpisr_bdma = regs_bdma->ISR;
24006214:	6831      	ldr	r1, [r6, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
24006216:	d048      	beq.n	240062aa <HAL_DMA_IRQHandler+0xae>
24006218:	3218      	adds	r2, #24
2400621a:	4293      	cmp	r3, r2
2400621c:	d045      	beq.n	240062aa <HAL_DMA_IRQHandler+0xae>
2400621e:	3218      	adds	r2, #24
24006220:	4894      	ldr	r0, [pc, #592]	; (24006474 <HAL_DMA_IRQHandler+0x278>)
24006222:	4283      	cmp	r3, r0
24006224:	bf18      	it	ne
24006226:	4293      	cmpne	r3, r2
24006228:	f100 0018 	add.w	r0, r0, #24
2400622c:	bf0c      	ite	eq
2400622e:	2201      	moveq	r2, #1
24006230:	2200      	movne	r2, #0
24006232:	4283      	cmp	r3, r0
24006234:	bf08      	it	eq
24006236:	f042 0201 	orreq.w	r2, r2, #1
2400623a:	3018      	adds	r0, #24
2400623c:	4283      	cmp	r3, r0
2400623e:	bf08      	it	eq
24006240:	f042 0201 	orreq.w	r2, r2, #1
24006244:	3018      	adds	r0, #24
24006246:	4283      	cmp	r3, r0
24006248:	bf08      	it	eq
2400624a:	f042 0201 	orreq.w	r2, r2, #1
2400624e:	3018      	adds	r0, #24
24006250:	4283      	cmp	r3, r0
24006252:	bf08      	it	eq
24006254:	f042 0201 	orreq.w	r2, r2, #1
24006258:	f500 7056 	add.w	r0, r0, #856	; 0x358
2400625c:	4283      	cmp	r3, r0
2400625e:	bf08      	it	eq
24006260:	f042 0201 	orreq.w	r2, r2, #1
24006264:	3018      	adds	r0, #24
24006266:	4283      	cmp	r3, r0
24006268:	bf08      	it	eq
2400626a:	f042 0201 	orreq.w	r2, r2, #1
2400626e:	3018      	adds	r0, #24
24006270:	4283      	cmp	r3, r0
24006272:	bf08      	it	eq
24006274:	f042 0201 	orreq.w	r2, r2, #1
24006278:	3018      	adds	r0, #24
2400627a:	4283      	cmp	r3, r0
2400627c:	bf08      	it	eq
2400627e:	f042 0201 	orreq.w	r2, r2, #1
24006282:	3018      	adds	r0, #24
24006284:	4283      	cmp	r3, r0
24006286:	bf08      	it	eq
24006288:	f042 0201 	orreq.w	r2, r2, #1
2400628c:	3018      	adds	r0, #24
2400628e:	4283      	cmp	r3, r0
24006290:	bf08      	it	eq
24006292:	f042 0201 	orreq.w	r2, r2, #1
24006296:	3018      	adds	r0, #24
24006298:	4283      	cmp	r3, r0
2400629a:	bf08      	it	eq
2400629c:	f042 0201 	orreq.w	r2, r2, #1
240062a0:	b91a      	cbnz	r2, 240062aa <HAL_DMA_IRQHandler+0xae>
240062a2:	4a75      	ldr	r2, [pc, #468]	; (24006478 <HAL_DMA_IRQHandler+0x27c>)
240062a4:	4293      	cmp	r3, r2
240062a6:	f040 8294 	bne.w	240067d2 <HAL_DMA_IRQHandler+0x5d6>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240062aa:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
240062ae:	2208      	movs	r2, #8
240062b0:	f00e 011f 	and.w	r1, lr, #31
240062b4:	408a      	lsls	r2, r1
240062b6:	422a      	tst	r2, r5
240062b8:	f040 8193 	bne.w	240065e2 <HAL_DMA_IRQHandler+0x3e6>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240062bc:	fa25 f201 	lsr.w	r2, r5, r1
240062c0:	07d2      	lsls	r2, r2, #31
240062c2:	d50e      	bpl.n	240062e2 <HAL_DMA_IRQHandler+0xe6>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
240062c4:	695a      	ldr	r2, [r3, #20]
240062c6:	0612      	lsls	r2, r2, #24
240062c8:	f140 824d 	bpl.w	24006766 <HAL_DMA_IRQHandler+0x56a>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
240062cc:	2301      	movs	r3, #1
240062ce:	408b      	lsls	r3, r1
240062d0:	60b3      	str	r3, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
240062d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240062d4:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
240062d8:	f043 0302 	orr.w	r3, r3, #2
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240062dc:	f00e 011f 	and.w	r1, lr, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
240062e0:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240062e2:	f04f 0c04 	mov.w	ip, #4
240062e6:	fa0c fc01 	lsl.w	ip, ip, r1
240062ea:	ea1c 0f05 	tst.w	ip, r5
240062ee:	d05f      	beq.n	240063b0 <HAL_DMA_IRQHandler+0x1b4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
240062f0:	6822      	ldr	r2, [r4, #0]
240062f2:	485f      	ldr	r0, [pc, #380]	; (24006470 <HAL_DMA_IRQHandler+0x274>)
240062f4:	4b61      	ldr	r3, [pc, #388]	; (2400647c <HAL_DMA_IRQHandler+0x280>)
240062f6:	429a      	cmp	r2, r3
240062f8:	bf18      	it	ne
240062fa:	4282      	cmpne	r2, r0
240062fc:	f103 0318 	add.w	r3, r3, #24
24006300:	bf0c      	ite	eq
24006302:	2001      	moveq	r0, #1
24006304:	2000      	movne	r0, #0
24006306:	429a      	cmp	r2, r3
24006308:	bf08      	it	eq
2400630a:	f040 0001 	orreq.w	r0, r0, #1
2400630e:	3318      	adds	r3, #24
24006310:	429a      	cmp	r2, r3
24006312:	bf08      	it	eq
24006314:	f040 0001 	orreq.w	r0, r0, #1
24006318:	3318      	adds	r3, #24
2400631a:	429a      	cmp	r2, r3
2400631c:	bf08      	it	eq
2400631e:	f040 0001 	orreq.w	r0, r0, #1
24006322:	3318      	adds	r3, #24
24006324:	429a      	cmp	r2, r3
24006326:	bf08      	it	eq
24006328:	f040 0001 	orreq.w	r0, r0, #1
2400632c:	3318      	adds	r3, #24
2400632e:	429a      	cmp	r2, r3
24006330:	bf08      	it	eq
24006332:	f040 0001 	orreq.w	r0, r0, #1
24006336:	3318      	adds	r3, #24
24006338:	429a      	cmp	r2, r3
2400633a:	bf08      	it	eq
2400633c:	f040 0001 	orreq.w	r0, r0, #1
24006340:	f503 7356 	add.w	r3, r3, #856	; 0x358
24006344:	429a      	cmp	r2, r3
24006346:	bf08      	it	eq
24006348:	f040 0001 	orreq.w	r0, r0, #1
2400634c:	3318      	adds	r3, #24
2400634e:	429a      	cmp	r2, r3
24006350:	bf08      	it	eq
24006352:	f040 0001 	orreq.w	r0, r0, #1
24006356:	3318      	adds	r3, #24
24006358:	429a      	cmp	r2, r3
2400635a:	bf08      	it	eq
2400635c:	f040 0001 	orreq.w	r0, r0, #1
24006360:	3318      	adds	r3, #24
24006362:	429a      	cmp	r2, r3
24006364:	bf08      	it	eq
24006366:	f040 0001 	orreq.w	r0, r0, #1
2400636a:	3318      	adds	r3, #24
2400636c:	429a      	cmp	r2, r3
2400636e:	bf08      	it	eq
24006370:	f040 0001 	orreq.w	r0, r0, #1
24006374:	3318      	adds	r3, #24
24006376:	429a      	cmp	r2, r3
24006378:	bf08      	it	eq
2400637a:	f040 0001 	orreq.w	r0, r0, #1
2400637e:	3318      	adds	r3, #24
24006380:	429a      	cmp	r2, r3
24006382:	bf08      	it	eq
24006384:	f040 0001 	orreq.w	r0, r0, #1
24006388:	4613      	mov	r3, r2
2400638a:	b918      	cbnz	r0, 24006394 <HAL_DMA_IRQHandler+0x198>
2400638c:	483a      	ldr	r0, [pc, #232]	; (24006478 <HAL_DMA_IRQHandler+0x27c>)
2400638e:	4282      	cmp	r2, r0
24006390:	f040 825a 	bne.w	24006848 <HAL_DMA_IRQHandler+0x64c>
24006394:	681a      	ldr	r2, [r3, #0]
24006396:	0790      	lsls	r0, r2, #30
24006398:	f140 81f1 	bpl.w	2400677e <HAL_DMA_IRQHandler+0x582>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
2400639c:	f8c6 c008 	str.w	ip, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
240063a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240063a2:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
240063a6:	f043 0304 	orr.w	r3, r3, #4
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240063aa:	f00e 011f 	and.w	r1, lr, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
240063ae:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240063b0:	f04f 0c10 	mov.w	ip, #16
240063b4:	fa0c fc01 	lsl.w	ip, ip, r1
240063b8:	ea1c 0f05 	tst.w	ip, r5
240063bc:	d075      	beq.n	240064aa <HAL_DMA_IRQHandler+0x2ae>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
240063be:	6822      	ldr	r2, [r4, #0]
240063c0:	482b      	ldr	r0, [pc, #172]	; (24006470 <HAL_DMA_IRQHandler+0x274>)
240063c2:	4b2e      	ldr	r3, [pc, #184]	; (2400647c <HAL_DMA_IRQHandler+0x280>)
240063c4:	429a      	cmp	r2, r3
240063c6:	bf18      	it	ne
240063c8:	4282      	cmpne	r2, r0
240063ca:	f103 0318 	add.w	r3, r3, #24
240063ce:	bf0c      	ite	eq
240063d0:	2001      	moveq	r0, #1
240063d2:	2000      	movne	r0, #0
240063d4:	429a      	cmp	r2, r3
240063d6:	bf08      	it	eq
240063d8:	f040 0001 	orreq.w	r0, r0, #1
240063dc:	3318      	adds	r3, #24
240063de:	429a      	cmp	r2, r3
240063e0:	bf08      	it	eq
240063e2:	f040 0001 	orreq.w	r0, r0, #1
240063e6:	3318      	adds	r3, #24
240063e8:	429a      	cmp	r2, r3
240063ea:	bf08      	it	eq
240063ec:	f040 0001 	orreq.w	r0, r0, #1
240063f0:	3318      	adds	r3, #24
240063f2:	429a      	cmp	r2, r3
240063f4:	bf08      	it	eq
240063f6:	f040 0001 	orreq.w	r0, r0, #1
240063fa:	3318      	adds	r3, #24
240063fc:	429a      	cmp	r2, r3
240063fe:	bf08      	it	eq
24006400:	f040 0001 	orreq.w	r0, r0, #1
24006404:	3318      	adds	r3, #24
24006406:	429a      	cmp	r2, r3
24006408:	bf08      	it	eq
2400640a:	f040 0001 	orreq.w	r0, r0, #1
2400640e:	f503 7356 	add.w	r3, r3, #856	; 0x358
24006412:	429a      	cmp	r2, r3
24006414:	bf08      	it	eq
24006416:	f040 0001 	orreq.w	r0, r0, #1
2400641a:	3318      	adds	r3, #24
2400641c:	429a      	cmp	r2, r3
2400641e:	bf08      	it	eq
24006420:	f040 0001 	orreq.w	r0, r0, #1
24006424:	3318      	adds	r3, #24
24006426:	429a      	cmp	r2, r3
24006428:	bf08      	it	eq
2400642a:	f040 0001 	orreq.w	r0, r0, #1
2400642e:	3318      	adds	r3, #24
24006430:	429a      	cmp	r2, r3
24006432:	bf08      	it	eq
24006434:	f040 0001 	orreq.w	r0, r0, #1
24006438:	3318      	adds	r3, #24
2400643a:	429a      	cmp	r2, r3
2400643c:	bf08      	it	eq
2400643e:	f040 0001 	orreq.w	r0, r0, #1
24006442:	3318      	adds	r3, #24
24006444:	429a      	cmp	r2, r3
24006446:	bf08      	it	eq
24006448:	f040 0001 	orreq.w	r0, r0, #1
2400644c:	3318      	adds	r3, #24
2400644e:	429a      	cmp	r2, r3
24006450:	bf08      	it	eq
24006452:	f040 0001 	orreq.w	r0, r0, #1
24006456:	4613      	mov	r3, r2
24006458:	b918      	cbnz	r0, 24006462 <HAL_DMA_IRQHandler+0x266>
2400645a:	4807      	ldr	r0, [pc, #28]	; (24006478 <HAL_DMA_IRQHandler+0x27c>)
2400645c:	4282      	cmp	r2, r0
2400645e:	f040 813c 	bne.w	240066da <HAL_DMA_IRQHandler+0x4de>
24006462:	681a      	ldr	r2, [r3, #0]
24006464:	0712      	lsls	r2, r2, #28
24006466:	f140 8177 	bpl.w	24006758 <HAL_DMA_IRQHandler+0x55c>
2400646a:	e009      	b.n	24006480 <HAL_DMA_IRQHandler+0x284>
2400646c:	2000074c 	.word	0x2000074c
24006470:	40020010 	.word	0x40020010
24006474:	40020058 	.word	0x40020058
24006478:	400204b8 	.word	0x400204b8
2400647c:	40020028 	.word	0x40020028
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
24006480:	f8c6 c008 	str.w	ip, [r6, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
24006484:	6823      	ldr	r3, [r4, #0]
24006486:	681a      	ldr	r2, [r3, #0]
24006488:	0350      	lsls	r0, r2, #13
2400648a:	f100 8181 	bmi.w	24006790 <HAL_DMA_IRQHandler+0x594>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
2400648e:	681a      	ldr	r2, [r3, #0]
24006490:	05d2      	lsls	r2, r2, #23
24006492:	d403      	bmi.n	2400649c <HAL_DMA_IRQHandler+0x2a0>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
24006494:	681a      	ldr	r2, [r3, #0]
24006496:	f022 0208 	bic.w	r2, r2, #8
2400649a:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
2400649c:	6c23      	ldr	r3, [r4, #64]	; 0x40
2400649e:	b10b      	cbz	r3, 240064a4 <HAL_DMA_IRQHandler+0x2a8>
            hdma->XferHalfCpltCallback(hdma);
240064a0:	4620      	mov	r0, r4
240064a2:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240064a4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
240064a6:	f001 011f 	and.w	r1, r1, #31
240064aa:	2320      	movs	r3, #32
240064ac:	fa03 f101 	lsl.w	r1, r3, r1
240064b0:	4229      	tst	r1, r5
240064b2:	d066      	beq.n	24006582 <HAL_DMA_IRQHandler+0x386>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
240064b4:	6823      	ldr	r3, [r4, #0]
240064b6:	4a92      	ldr	r2, [pc, #584]	; (24006700 <HAL_DMA_IRQHandler+0x504>)
240064b8:	4892      	ldr	r0, [pc, #584]	; (24006704 <HAL_DMA_IRQHandler+0x508>)
240064ba:	4283      	cmp	r3, r0
240064bc:	bf18      	it	ne
240064be:	4293      	cmpne	r3, r2
240064c0:	f100 0018 	add.w	r0, r0, #24
240064c4:	bf0c      	ite	eq
240064c6:	2201      	moveq	r2, #1
240064c8:	2200      	movne	r2, #0
240064ca:	4283      	cmp	r3, r0
240064cc:	bf08      	it	eq
240064ce:	f042 0201 	orreq.w	r2, r2, #1
240064d2:	3018      	adds	r0, #24
240064d4:	4283      	cmp	r3, r0
240064d6:	bf08      	it	eq
240064d8:	f042 0201 	orreq.w	r2, r2, #1
240064dc:	3018      	adds	r0, #24
240064de:	4283      	cmp	r3, r0
240064e0:	bf08      	it	eq
240064e2:	f042 0201 	orreq.w	r2, r2, #1
240064e6:	3018      	adds	r0, #24
240064e8:	4283      	cmp	r3, r0
240064ea:	bf08      	it	eq
240064ec:	f042 0201 	orreq.w	r2, r2, #1
240064f0:	3018      	adds	r0, #24
240064f2:	4283      	cmp	r3, r0
240064f4:	bf08      	it	eq
240064f6:	f042 0201 	orreq.w	r2, r2, #1
240064fa:	3018      	adds	r0, #24
240064fc:	4283      	cmp	r3, r0
240064fe:	bf08      	it	eq
24006500:	f042 0201 	orreq.w	r2, r2, #1
24006504:	f500 7056 	add.w	r0, r0, #856	; 0x358
24006508:	4283      	cmp	r3, r0
2400650a:	bf08      	it	eq
2400650c:	f042 0201 	orreq.w	r2, r2, #1
24006510:	3018      	adds	r0, #24
24006512:	4283      	cmp	r3, r0
24006514:	bf08      	it	eq
24006516:	f042 0201 	orreq.w	r2, r2, #1
2400651a:	3018      	adds	r0, #24
2400651c:	4283      	cmp	r3, r0
2400651e:	bf08      	it	eq
24006520:	f042 0201 	orreq.w	r2, r2, #1
24006524:	3018      	adds	r0, #24
24006526:	4283      	cmp	r3, r0
24006528:	bf08      	it	eq
2400652a:	f042 0201 	orreq.w	r2, r2, #1
2400652e:	3018      	adds	r0, #24
24006530:	4283      	cmp	r3, r0
24006532:	bf08      	it	eq
24006534:	f042 0201 	orreq.w	r2, r2, #1
24006538:	3018      	adds	r0, #24
2400653a:	4283      	cmp	r3, r0
2400653c:	bf08      	it	eq
2400653e:	f042 0201 	orreq.w	r2, r2, #1
24006542:	3018      	adds	r0, #24
24006544:	4283      	cmp	r3, r0
24006546:	bf08      	it	eq
24006548:	f042 0201 	orreq.w	r2, r2, #1
2400654c:	b91a      	cbnz	r2, 24006556 <HAL_DMA_IRQHandler+0x35a>
2400654e:	4a6e      	ldr	r2, [pc, #440]	; (24006708 <HAL_DMA_IRQHandler+0x50c>)
24006550:	4293      	cmp	r3, r2
24006552:	f040 80cf 	bne.w	240066f4 <HAL_DMA_IRQHandler+0x4f8>
24006556:	681b      	ldr	r3, [r3, #0]
24006558:	06dd      	lsls	r5, r3, #27
2400655a:	d512      	bpl.n	24006582 <HAL_DMA_IRQHandler+0x386>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
2400655c:	60b1      	str	r1, [r6, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
2400655e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
24006562:	2b04      	cmp	r3, #4
24006564:	f000 80d4 	beq.w	24006710 <HAL_DMA_IRQHandler+0x514>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
24006568:	6823      	ldr	r3, [r4, #0]
2400656a:	681a      	ldr	r2, [r3, #0]
2400656c:	0352      	lsls	r2, r2, #13
2400656e:	f140 8118 	bpl.w	240067a2 <HAL_DMA_IRQHandler+0x5a6>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
24006572:	681b      	ldr	r3, [r3, #0]
24006574:	031e      	lsls	r6, r3, #12
24006576:	f140 8123 	bpl.w	240067c0 <HAL_DMA_IRQHandler+0x5c4>
          if(hdma->XferCpltCallback != NULL)
2400657a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
2400657c:	b10b      	cbz	r3, 24006582 <HAL_DMA_IRQHandler+0x386>
            hdma->XferCpltCallback(hdma);
2400657e:	4620      	mov	r0, r4
24006580:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
24006582:	6d63      	ldr	r3, [r4, #84]	; 0x54
24006584:	2b00      	cmp	r3, #0
24006586:	f000 80e5 	beq.w	24006754 <HAL_DMA_IRQHandler+0x558>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
2400658a:	6d63      	ldr	r3, [r4, #84]	; 0x54
2400658c:	07dd      	lsls	r5, r3, #31
2400658e:	d51f      	bpl.n	240065d0 <HAL_DMA_IRQHandler+0x3d4>
        __HAL_DMA_DISABLE(hdma);
24006590:	6822      	ldr	r2, [r4, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
24006592:	2104      	movs	r1, #4
24006594:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
24006598:	6813      	ldr	r3, [r2, #0]
2400659a:	f023 0301 	bic.w	r3, r3, #1
2400659e:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
240065a0:	4a5a      	ldr	r2, [pc, #360]	; (2400670c <HAL_DMA_IRQHandler+0x510>)
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
240065a2:	6821      	ldr	r1, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
240065a4:	fba2 7207 	umull	r7, r2, r2, r7
240065a8:	0a92      	lsrs	r2, r2, #10
240065aa:	e002      	b.n	240065b2 <HAL_DMA_IRQHandler+0x3b6>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
240065ac:	680b      	ldr	r3, [r1, #0]
240065ae:	07d8      	lsls	r0, r3, #31
240065b0:	d504      	bpl.n	240065bc <HAL_DMA_IRQHandler+0x3c0>
          if (++count > timeout)
240065b2:	9b01      	ldr	r3, [sp, #4]
240065b4:	3301      	adds	r3, #1
240065b6:	4293      	cmp	r3, r2
240065b8:	9301      	str	r3, [sp, #4]
240065ba:	d9f7      	bls.n	240065ac <HAL_DMA_IRQHandler+0x3b0>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
240065bc:	680b      	ldr	r3, [r1, #0]
240065be:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
240065c0:	bf4c      	ite	mi
240065c2:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
240065c4:	2301      	movpl	r3, #1
240065c6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
240065ca:	2300      	movs	r3, #0
240065cc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
240065d0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
240065d2:	2b00      	cmp	r3, #0
240065d4:	f000 80be 	beq.w	24006754 <HAL_DMA_IRQHandler+0x558>
        hdma->XferErrorCallback(hdma);
240065d8:	4620      	mov	r0, r4
}
240065da:	b003      	add	sp, #12
240065dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        hdma->XferErrorCallback(hdma);
240065e0:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
240065e2:	681a      	ldr	r2, [r3, #0]
240065e4:	0752      	lsls	r2, r2, #29
240065e6:	d511      	bpl.n	2400660c <HAL_DMA_IRQHandler+0x410>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
240065e8:	681a      	ldr	r2, [r3, #0]
240065ea:	f022 0204 	bic.w	r2, r2, #4
240065ee:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
240065f0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
240065f2:	f003 021f 	and.w	r2, r3, #31
240065f6:	2308      	movs	r3, #8
240065f8:	4093      	lsls	r3, r2
240065fa:	60b3      	str	r3, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
240065fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240065fe:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
24006602:	f043 0301 	orr.w	r3, r3, #1
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006606:	f00e 011f 	and.w	r1, lr, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
2400660a:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
2400660c:	fa25 f301 	lsr.w	r3, r5, r1
24006610:	07d8      	lsls	r0, r3, #31
24006612:	f57f ae66 	bpl.w	240062e2 <HAL_DMA_IRQHandler+0xe6>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
24006616:	6822      	ldr	r2, [r4, #0]
24006618:	4839      	ldr	r0, [pc, #228]	; (24006700 <HAL_DMA_IRQHandler+0x504>)
2400661a:	4b3a      	ldr	r3, [pc, #232]	; (24006704 <HAL_DMA_IRQHandler+0x508>)
2400661c:	429a      	cmp	r2, r3
2400661e:	bf18      	it	ne
24006620:	4282      	cmpne	r2, r0
24006622:	f103 0318 	add.w	r3, r3, #24
24006626:	bf0c      	ite	eq
24006628:	2001      	moveq	r0, #1
2400662a:	2000      	movne	r0, #0
2400662c:	429a      	cmp	r2, r3
2400662e:	bf08      	it	eq
24006630:	f040 0001 	orreq.w	r0, r0, #1
24006634:	3318      	adds	r3, #24
24006636:	429a      	cmp	r2, r3
24006638:	bf08      	it	eq
2400663a:	f040 0001 	orreq.w	r0, r0, #1
2400663e:	3318      	adds	r3, #24
24006640:	429a      	cmp	r2, r3
24006642:	bf08      	it	eq
24006644:	f040 0001 	orreq.w	r0, r0, #1
24006648:	3318      	adds	r3, #24
2400664a:	429a      	cmp	r2, r3
2400664c:	bf08      	it	eq
2400664e:	f040 0001 	orreq.w	r0, r0, #1
24006652:	3318      	adds	r3, #24
24006654:	429a      	cmp	r2, r3
24006656:	bf08      	it	eq
24006658:	f040 0001 	orreq.w	r0, r0, #1
2400665c:	3318      	adds	r3, #24
2400665e:	429a      	cmp	r2, r3
24006660:	bf08      	it	eq
24006662:	f040 0001 	orreq.w	r0, r0, #1
24006666:	f503 7356 	add.w	r3, r3, #856	; 0x358
2400666a:	429a      	cmp	r2, r3
2400666c:	bf08      	it	eq
2400666e:	f040 0001 	orreq.w	r0, r0, #1
24006672:	3318      	adds	r3, #24
24006674:	429a      	cmp	r2, r3
24006676:	bf08      	it	eq
24006678:	f040 0001 	orreq.w	r0, r0, #1
2400667c:	3318      	adds	r3, #24
2400667e:	429a      	cmp	r2, r3
24006680:	bf08      	it	eq
24006682:	f040 0001 	orreq.w	r0, r0, #1
24006686:	3318      	adds	r3, #24
24006688:	429a      	cmp	r2, r3
2400668a:	bf08      	it	eq
2400668c:	f040 0001 	orreq.w	r0, r0, #1
24006690:	3318      	adds	r3, #24
24006692:	429a      	cmp	r2, r3
24006694:	bf08      	it	eq
24006696:	f040 0001 	orreq.w	r0, r0, #1
2400669a:	3318      	adds	r3, #24
2400669c:	429a      	cmp	r2, r3
2400669e:	bf08      	it	eq
240066a0:	f040 0001 	orreq.w	r0, r0, #1
240066a4:	3318      	adds	r3, #24
240066a6:	429a      	cmp	r2, r3
240066a8:	bf08      	it	eq
240066aa:	f040 0001 	orreq.w	r0, r0, #1
240066ae:	4613      	mov	r3, r2
240066b0:	2800      	cmp	r0, #0
240066b2:	f47f ae07 	bne.w	240062c4 <HAL_DMA_IRQHandler+0xc8>
240066b6:	4814      	ldr	r0, [pc, #80]	; (24006708 <HAL_DMA_IRQHandler+0x50c>)
240066b8:	4282      	cmp	r2, r0
240066ba:	f43f ae03 	beq.w	240062c4 <HAL_DMA_IRQHandler+0xc8>
240066be:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240066c0:	2304      	movs	r3, #4
240066c2:	408b      	lsls	r3, r1
240066c4:	422b      	tst	r3, r5
240066c6:	f040 80bf 	bne.w	24006848 <HAL_DMA_IRQHandler+0x64c>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240066ca:	f04f 0c10 	mov.w	ip, #16
240066ce:	fa0c fc01 	lsl.w	ip, ip, r1
240066d2:	ea15 0f0c 	tst.w	r5, ip
240066d6:	f43f aee8 	beq.w	240064aa <HAL_DMA_IRQHandler+0x2ae>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
240066da:	6813      	ldr	r3, [r2, #0]
240066dc:	075b      	lsls	r3, r3, #29
240066de:	f53f aecf 	bmi.w	24006480 <HAL_DMA_IRQHandler+0x284>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240066e2:	f00e 0e1f 	and.w	lr, lr, #31
240066e6:	2120      	movs	r1, #32
240066e8:	fa01 f10e 	lsl.w	r1, r1, lr
240066ec:	420d      	tst	r5, r1
240066ee:	f43f af48 	beq.w	24006582 <HAL_DMA_IRQHandler+0x386>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
240066f2:	4613      	mov	r3, r2
240066f4:	681b      	ldr	r3, [r3, #0]
240066f6:	0798      	lsls	r0, r3, #30
240066f8:	f57f af43 	bpl.w	24006582 <HAL_DMA_IRQHandler+0x386>
240066fc:	e72e      	b.n	2400655c <HAL_DMA_IRQHandler+0x360>
240066fe:	bf00      	nop
24006700:	40020010 	.word	0x40020010
24006704:	40020028 	.word	0x40020028
24006708:	400204b8 	.word	0x400204b8
2400670c:	1b4e81b5 	.word	0x1b4e81b5
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
24006710:	6822      	ldr	r2, [r4, #0]
24006712:	6813      	ldr	r3, [r2, #0]
24006714:	f023 0316 	bic.w	r3, r3, #22
24006718:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
2400671a:	6822      	ldr	r2, [r4, #0]
2400671c:	6953      	ldr	r3, [r2, #20]
2400671e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
24006722:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
24006724:	6c23      	ldr	r3, [r4, #64]	; 0x40
24006726:	2b00      	cmp	r3, #0
24006728:	d04f      	beq.n	240067ca <HAL_DMA_IRQHandler+0x5ce>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
2400672a:	6822      	ldr	r2, [r4, #0]
2400672c:	6813      	ldr	r3, [r2, #0]
2400672e:	f023 0308 	bic.w	r3, r3, #8
24006732:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24006734:	6de2      	ldr	r2, [r4, #92]	; 0x5c
24006736:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
24006738:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
2400673a:	f002 021f 	and.w	r2, r2, #31
2400673e:	4093      	lsls	r3, r2
          __HAL_UNLOCK(hdma);
24006740:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24006742:	60b3      	str	r3, [r6, #8]
          if(hdma->XferAbortCallback != NULL)
24006744:	6d23      	ldr	r3, [r4, #80]	; 0x50
          hdma->State = HAL_DMA_STATE_READY;
24006746:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
2400674a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
2400674e:	2b00      	cmp	r3, #0
24006750:	f47f af42 	bne.w	240065d8 <HAL_DMA_IRQHandler+0x3dc>
}
24006754:	b003      	add	sp, #12
24006756:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006758:	2220      	movs	r2, #32
2400675a:	fa02 f101 	lsl.w	r1, r2, r1
2400675e:	420d      	tst	r5, r1
24006760:	f47f aef9 	bne.w	24006556 <HAL_DMA_IRQHandler+0x35a>
24006764:	e70d      	b.n	24006582 <HAL_DMA_IRQHandler+0x386>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006766:	f04f 0c04 	mov.w	ip, #4
2400676a:	fa0c fc01 	lsl.w	ip, ip, r1
2400676e:	ea15 0f0c 	tst.w	r5, ip
24006772:	f43f ae1d 	beq.w	240063b0 <HAL_DMA_IRQHandler+0x1b4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
24006776:	681a      	ldr	r2, [r3, #0]
24006778:	0790      	lsls	r0, r2, #30
2400677a:	f53f ae0f 	bmi.w	2400639c <HAL_DMA_IRQHandler+0x1a0>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
2400677e:	f04f 0c10 	mov.w	ip, #16
24006782:	fa0c fc01 	lsl.w	ip, ip, r1
24006786:	ea15 0f0c 	tst.w	r5, ip
2400678a:	f47f ae6a 	bne.w	24006462 <HAL_DMA_IRQHandler+0x266>
2400678e:	e68c      	b.n	240064aa <HAL_DMA_IRQHandler+0x2ae>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
24006790:	681b      	ldr	r3, [r3, #0]
24006792:	0319      	lsls	r1, r3, #12
24006794:	f57f ae82 	bpl.w	2400649c <HAL_DMA_IRQHandler+0x2a0>
            if(hdma->XferM1HalfCpltCallback != NULL)
24006798:	6ca3      	ldr	r3, [r4, #72]	; 0x48
2400679a:	2b00      	cmp	r3, #0
2400679c:	f47f ae80 	bne.w	240064a0 <HAL_DMA_IRQHandler+0x2a4>
240067a0:	e680      	b.n	240064a4 <HAL_DMA_IRQHandler+0x2a8>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
240067a2:	681a      	ldr	r2, [r3, #0]
240067a4:	f412 7280 	ands.w	r2, r2, #256	; 0x100
240067a8:	f47f aee7 	bne.w	2400657a <HAL_DMA_IRQHandler+0x37e>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
240067ac:	6819      	ldr	r1, [r3, #0]
240067ae:	f021 0110 	bic.w	r1, r1, #16
240067b2:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
240067b4:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
240067b6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
240067ba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
            __HAL_UNLOCK(hdma);
240067be:	e6dc      	b.n	2400657a <HAL_DMA_IRQHandler+0x37e>
            if(hdma->XferM1CpltCallback != NULL)
240067c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
240067c2:	2b00      	cmp	r3, #0
240067c4:	f47f aedb 	bne.w	2400657e <HAL_DMA_IRQHandler+0x382>
240067c8:	e6db      	b.n	24006582 <HAL_DMA_IRQHandler+0x386>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
240067ca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
240067cc:	2b00      	cmp	r3, #0
240067ce:	d1ac      	bne.n	2400672a <HAL_DMA_IRQHandler+0x52e>
240067d0:	e7b0      	b.n	24006734 <HAL_DMA_IRQHandler+0x538>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
240067d2:	4a9b      	ldr	r2, [pc, #620]	; (24006a40 <HAL_DMA_IRQHandler+0x844>)
240067d4:	489b      	ldr	r0, [pc, #620]	; (24006a44 <HAL_DMA_IRQHandler+0x848>)
240067d6:	4283      	cmp	r3, r0
240067d8:	bf18      	it	ne
240067da:	4293      	cmpne	r3, r2
240067dc:	f100 0014 	add.w	r0, r0, #20
240067e0:	bf0c      	ite	eq
240067e2:	2201      	moveq	r2, #1
240067e4:	2200      	movne	r2, #0
240067e6:	4283      	cmp	r3, r0
240067e8:	bf08      	it	eq
240067ea:	f042 0201 	orreq.w	r2, r2, #1
240067ee:	3014      	adds	r0, #20
240067f0:	4283      	cmp	r3, r0
240067f2:	bf08      	it	eq
240067f4:	f042 0201 	orreq.w	r2, r2, #1
240067f8:	3014      	adds	r0, #20
240067fa:	4283      	cmp	r3, r0
240067fc:	bf08      	it	eq
240067fe:	f042 0201 	orreq.w	r2, r2, #1
24006802:	3014      	adds	r0, #20
24006804:	4283      	cmp	r3, r0
24006806:	bf08      	it	eq
24006808:	f042 0201 	orreq.w	r2, r2, #1
2400680c:	3014      	adds	r0, #20
2400680e:	4283      	cmp	r3, r0
24006810:	bf08      	it	eq
24006812:	f042 0201 	orreq.w	r2, r2, #1
24006816:	b912      	cbnz	r2, 2400681e <HAL_DMA_IRQHandler+0x622>
24006818:	4a8b      	ldr	r2, [pc, #556]	; (24006a48 <HAL_DMA_IRQHandler+0x84c>)
2400681a:	4293      	cmp	r3, r2
2400681c:	d19a      	bne.n	24006754 <HAL_DMA_IRQHandler+0x558>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
2400681e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
24006820:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
24006822:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
24006824:	f000 001f 	and.w	r0, r0, #31
24006828:	4085      	lsls	r5, r0
2400682a:	420d      	tst	r5, r1
2400682c:	d018      	beq.n	24006860 <HAL_DMA_IRQHandler+0x664>
2400682e:	0757      	lsls	r7, r2, #29
24006830:	d516      	bpl.n	24006860 <HAL_DMA_IRQHandler+0x664>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24006832:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
24006834:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24006836:	d544      	bpl.n	240068c2 <HAL_DMA_IRQHandler+0x6c6>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
24006838:	03d2      	lsls	r2, r2, #15
2400683a:	f100 8099 	bmi.w	24006970 <HAL_DMA_IRQHandler+0x774>
          if(hdma->XferM1HalfCpltCallback != NULL)
2400683e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
24006840:	2b00      	cmp	r3, #0
24006842:	f47f aec9 	bne.w	240065d8 <HAL_DMA_IRQHandler+0x3dc>
24006846:	e785      	b.n	24006754 <HAL_DMA_IRQHandler+0x558>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006848:	f00e 011f 	and.w	r1, lr, #31
2400684c:	f04f 0c10 	mov.w	ip, #16
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
24006850:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006852:	fa0c fc01 	lsl.w	ip, ip, r1
24006856:	ea15 0f0c 	tst.w	r5, ip
2400685a:	f47f af3e 	bne.w	240066da <HAL_DMA_IRQHandler+0x4de>
2400685e:	e624      	b.n	240064aa <HAL_DMA_IRQHandler+0x2ae>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
24006860:	2502      	movs	r5, #2
24006862:	4085      	lsls	r5, r0
24006864:	420d      	tst	r5, r1
24006866:	d00d      	beq.n	24006884 <HAL_DMA_IRQHandler+0x688>
24006868:	0797      	lsls	r7, r2, #30
2400686a:	d50b      	bpl.n	24006884 <HAL_DMA_IRQHandler+0x688>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
2400686c:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
2400686e:	0416      	lsls	r6, r2, #16
24006870:	f140 8083 	bpl.w	2400697a <HAL_DMA_IRQHandler+0x77e>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
24006874:	03d5      	lsls	r5, r2, #15
24006876:	f100 80dd 	bmi.w	24006a34 <HAL_DMA_IRQHandler+0x838>
          if(hdma->XferM1CpltCallback != NULL)
2400687a:	6c63      	ldr	r3, [r4, #68]	; 0x44
2400687c:	2b00      	cmp	r3, #0
2400687e:	f47f aeab 	bne.w	240065d8 <HAL_DMA_IRQHandler+0x3dc>
24006882:	e767      	b.n	24006754 <HAL_DMA_IRQHandler+0x558>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
24006884:	2508      	movs	r5, #8
24006886:	fa05 f000 	lsl.w	r0, r5, r0
2400688a:	4208      	tst	r0, r1
2400688c:	f43f af62 	beq.w	24006754 <HAL_DMA_IRQHandler+0x558>
24006890:	0711      	lsls	r1, r2, #28
24006892:	f57f af5f 	bpl.w	24006754 <HAL_DMA_IRQHandler+0x558>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
24006896:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24006898:	2201      	movs	r2, #1
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
2400689a:	f021 010e 	bic.w	r1, r1, #14
2400689e:	6019      	str	r1, [r3, #0]
      __HAL_UNLOCK(hdma);
240068a0:	2100      	movs	r1, #0
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
240068a2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
240068a4:	f003 031f 	and.w	r3, r3, #31
240068a8:	fa02 f303 	lsl.w	r3, r2, r3
240068ac:	6073      	str	r3, [r6, #4]
      if (hdma->XferErrorCallback != NULL)
240068ae:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
240068b0:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hdma);
240068b2:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
240068b6:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
240068ba:	2b00      	cmp	r3, #0
240068bc:	f47f ae8c 	bne.w	240065d8 <HAL_DMA_IRQHandler+0x3dc>
240068c0:	e748      	b.n	24006754 <HAL_DMA_IRQHandler+0x558>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
240068c2:	0693      	lsls	r3, r2, #26
240068c4:	d454      	bmi.n	24006970 <HAL_DMA_IRQHandler+0x774>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
240068c6:	6822      	ldr	r2, [r4, #0]
240068c8:	4b60      	ldr	r3, [pc, #384]	; (24006a4c <HAL_DMA_IRQHandler+0x850>)
240068ca:	4861      	ldr	r0, [pc, #388]	; (24006a50 <HAL_DMA_IRQHandler+0x854>)
240068cc:	4961      	ldr	r1, [pc, #388]	; (24006a54 <HAL_DMA_IRQHandler+0x858>)
240068ce:	4282      	cmp	r2, r0
240068d0:	bf18      	it	ne
240068d2:	429a      	cmpne	r2, r3
240068d4:	f100 0030 	add.w	r0, r0, #48	; 0x30
240068d8:	bf0c      	ite	eq
240068da:	2301      	moveq	r3, #1
240068dc:	2300      	movne	r3, #0
240068de:	428a      	cmp	r2, r1
240068e0:	bf08      	it	eq
240068e2:	f043 0301 	orreq.w	r3, r3, #1
240068e6:	3130      	adds	r1, #48	; 0x30
240068e8:	4282      	cmp	r2, r0
240068ea:	bf08      	it	eq
240068ec:	f043 0301 	orreq.w	r3, r3, #1
240068f0:	3030      	adds	r0, #48	; 0x30
240068f2:	428a      	cmp	r2, r1
240068f4:	bf08      	it	eq
240068f6:	f043 0301 	orreq.w	r3, r3, #1
240068fa:	3130      	adds	r1, #48	; 0x30
240068fc:	4282      	cmp	r2, r0
240068fe:	bf08      	it	eq
24006900:	f043 0301 	orreq.w	r3, r3, #1
24006904:	3030      	adds	r0, #48	; 0x30
24006906:	428a      	cmp	r2, r1
24006908:	bf08      	it	eq
2400690a:	f043 0301 	orreq.w	r3, r3, #1
2400690e:	f501 715c 	add.w	r1, r1, #880	; 0x370
24006912:	4282      	cmp	r2, r0
24006914:	bf08      	it	eq
24006916:	f043 0301 	orreq.w	r3, r3, #1
2400691a:	f500 705c 	add.w	r0, r0, #880	; 0x370
2400691e:	428a      	cmp	r2, r1
24006920:	bf08      	it	eq
24006922:	f043 0301 	orreq.w	r3, r3, #1
24006926:	3130      	adds	r1, #48	; 0x30
24006928:	4282      	cmp	r2, r0
2400692a:	bf08      	it	eq
2400692c:	f043 0301 	orreq.w	r3, r3, #1
24006930:	3030      	adds	r0, #48	; 0x30
24006932:	428a      	cmp	r2, r1
24006934:	bf08      	it	eq
24006936:	f043 0301 	orreq.w	r3, r3, #1
2400693a:	3130      	adds	r1, #48	; 0x30
2400693c:	4282      	cmp	r2, r0
2400693e:	bf08      	it	eq
24006940:	f043 0301 	orreq.w	r3, r3, #1
24006944:	3030      	adds	r0, #48	; 0x30
24006946:	428a      	cmp	r2, r1
24006948:	bf08      	it	eq
2400694a:	f043 0301 	orreq.w	r3, r3, #1
2400694e:	3130      	adds	r1, #48	; 0x30
24006950:	4282      	cmp	r2, r0
24006952:	bf08      	it	eq
24006954:	f043 0301 	orreq.w	r3, r3, #1
24006958:	428a      	cmp	r2, r1
2400695a:	bf08      	it	eq
2400695c:	f043 0301 	orreq.w	r3, r3, #1
24006960:	b913      	cbnz	r3, 24006968 <HAL_DMA_IRQHandler+0x76c>
24006962:	4b3d      	ldr	r3, [pc, #244]	; (24006a58 <HAL_DMA_IRQHandler+0x85c>)
24006964:	429a      	cmp	r2, r3
24006966:	d179      	bne.n	24006a5c <HAL_DMA_IRQHandler+0x860>
24006968:	6813      	ldr	r3, [r2, #0]
2400696a:	f023 0308 	bic.w	r3, r3, #8
2400696e:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
24006970:	6c23      	ldr	r3, [r4, #64]	; 0x40
24006972:	2b00      	cmp	r3, #0
24006974:	f47f ae30 	bne.w	240065d8 <HAL_DMA_IRQHandler+0x3dc>
24006978:	e6ec      	b.n	24006754 <HAL_DMA_IRQHandler+0x558>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
2400697a:	0690      	lsls	r0, r2, #26
2400697c:	d45a      	bmi.n	24006a34 <HAL_DMA_IRQHandler+0x838>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
2400697e:	6822      	ldr	r2, [r4, #0]
24006980:	4b32      	ldr	r3, [pc, #200]	; (24006a4c <HAL_DMA_IRQHandler+0x850>)
24006982:	4833      	ldr	r0, [pc, #204]	; (24006a50 <HAL_DMA_IRQHandler+0x854>)
24006984:	4933      	ldr	r1, [pc, #204]	; (24006a54 <HAL_DMA_IRQHandler+0x858>)
24006986:	4282      	cmp	r2, r0
24006988:	bf18      	it	ne
2400698a:	429a      	cmpne	r2, r3
2400698c:	f100 0030 	add.w	r0, r0, #48	; 0x30
24006990:	bf0c      	ite	eq
24006992:	2301      	moveq	r3, #1
24006994:	2300      	movne	r3, #0
24006996:	428a      	cmp	r2, r1
24006998:	bf08      	it	eq
2400699a:	f043 0301 	orreq.w	r3, r3, #1
2400699e:	3130      	adds	r1, #48	; 0x30
240069a0:	4282      	cmp	r2, r0
240069a2:	bf08      	it	eq
240069a4:	f043 0301 	orreq.w	r3, r3, #1
240069a8:	3030      	adds	r0, #48	; 0x30
240069aa:	428a      	cmp	r2, r1
240069ac:	bf08      	it	eq
240069ae:	f043 0301 	orreq.w	r3, r3, #1
240069b2:	3130      	adds	r1, #48	; 0x30
240069b4:	4282      	cmp	r2, r0
240069b6:	bf08      	it	eq
240069b8:	f043 0301 	orreq.w	r3, r3, #1
240069bc:	3030      	adds	r0, #48	; 0x30
240069be:	428a      	cmp	r2, r1
240069c0:	bf08      	it	eq
240069c2:	f043 0301 	orreq.w	r3, r3, #1
240069c6:	f501 715c 	add.w	r1, r1, #880	; 0x370
240069ca:	4282      	cmp	r2, r0
240069cc:	bf08      	it	eq
240069ce:	f043 0301 	orreq.w	r3, r3, #1
240069d2:	f500 705c 	add.w	r0, r0, #880	; 0x370
240069d6:	428a      	cmp	r2, r1
240069d8:	bf08      	it	eq
240069da:	f043 0301 	orreq.w	r3, r3, #1
240069de:	3130      	adds	r1, #48	; 0x30
240069e0:	4282      	cmp	r2, r0
240069e2:	bf08      	it	eq
240069e4:	f043 0301 	orreq.w	r3, r3, #1
240069e8:	3030      	adds	r0, #48	; 0x30
240069ea:	428a      	cmp	r2, r1
240069ec:	bf08      	it	eq
240069ee:	f043 0301 	orreq.w	r3, r3, #1
240069f2:	3130      	adds	r1, #48	; 0x30
240069f4:	4282      	cmp	r2, r0
240069f6:	bf08      	it	eq
240069f8:	f043 0301 	orreq.w	r3, r3, #1
240069fc:	3030      	adds	r0, #48	; 0x30
240069fe:	428a      	cmp	r2, r1
24006a00:	bf08      	it	eq
24006a02:	f043 0301 	orreq.w	r3, r3, #1
24006a06:	3130      	adds	r1, #48	; 0x30
24006a08:	4282      	cmp	r2, r0
24006a0a:	bf08      	it	eq
24006a0c:	f043 0301 	orreq.w	r3, r3, #1
24006a10:	428a      	cmp	r2, r1
24006a12:	bf08      	it	eq
24006a14:	f043 0301 	orreq.w	r3, r3, #1
24006a18:	b913      	cbnz	r3, 24006a20 <HAL_DMA_IRQHandler+0x824>
24006a1a:	4b0f      	ldr	r3, [pc, #60]	; (24006a58 <HAL_DMA_IRQHandler+0x85c>)
24006a1c:	429a      	cmp	r2, r3
24006a1e:	d122      	bne.n	24006a66 <HAL_DMA_IRQHandler+0x86a>
24006a20:	6813      	ldr	r3, [r2, #0]
24006a22:	f023 0314 	bic.w	r3, r3, #20
24006a26:	6013      	str	r3, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
24006a28:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
24006a2a:	2300      	movs	r3, #0
          hdma->State = HAL_DMA_STATE_READY;
24006a2c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
24006a30:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
24006a34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
24006a36:	2b00      	cmp	r3, #0
24006a38:	f47f adce 	bne.w	240065d8 <HAL_DMA_IRQHandler+0x3dc>
24006a3c:	e68a      	b.n	24006754 <HAL_DMA_IRQHandler+0x558>
24006a3e:	bf00      	nop
24006a40:	58025408 	.word	0x58025408
24006a44:	5802541c 	.word	0x5802541c
24006a48:	58025494 	.word	0x58025494
24006a4c:	40020010 	.word	0x40020010
24006a50:	40020028 	.word	0x40020028
24006a54:	40020040 	.word	0x40020040
24006a58:	400204b8 	.word	0x400204b8
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
24006a5c:	6813      	ldr	r3, [r2, #0]
24006a5e:	f023 0304 	bic.w	r3, r3, #4
24006a62:	6013      	str	r3, [r2, #0]
24006a64:	e784      	b.n	24006970 <HAL_DMA_IRQHandler+0x774>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
24006a66:	6813      	ldr	r3, [r2, #0]
24006a68:	f023 030a 	bic.w	r3, r3, #10
24006a6c:	6013      	str	r3, [r2, #0]
24006a6e:	e7db      	b.n	24006a28 <HAL_DMA_IRQHandler+0x82c>

24006a70 <HAL_DMA_GetState>:
  return hdma->State;
24006a70:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
24006a74:	4770      	bx	lr
24006a76:	bf00      	nop

24006a78 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
24006a78:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
24006a7a:	4770      	bx	lr

24006a7c <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
24006a7c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
24006a7e:	7a0a      	ldrb	r2, [r1, #8]
{
24006a80:	4603      	mov	r3, r0
  if(pSyncConfig->SyncEnable == ENABLE)
24006a82:	2a01      	cmp	r2, #1
24006a84:	d02e      	beq.n	24006ae4 <HAL_DMAEx_ConfigMuxSync+0x68>
  uint32_t syncPolarity = 0;
24006a86:	2400      	movs	r4, #0
  uint32_t syncSignalID = 0;
24006a88:	4625      	mov	r5, r4
    syncSignalID = pSyncConfig->SyncSignalID;
    syncPolarity = pSyncConfig->SyncPolarity;
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
24006a8a:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
24006a8e:	2a01      	cmp	r2, #1
24006a90:	b2d0      	uxtb	r0, r2
24006a92:	d122      	bne.n	24006ada <HAL_DMAEx_ConfigMuxSync+0x5e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
24006a94:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
24006a98:	2a01      	cmp	r2, #1
24006a9a:	d026      	beq.n	24006aea <HAL_DMAEx_ConfigMuxSync+0x6e>
24006a9c:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
24006aa0:	f04f 0c00 	mov.w	ip, #0
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
24006aa4:	6e18      	ldr	r0, [r3, #96]	; 0x60
24006aa6:	6802      	ldr	r2, [r0, #0]
24006aa8:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
24006aac:	6002      	str	r2, [r0, #0]
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
24006aae:	68ca      	ldr	r2, [r1, #12]
24006ab0:	6e1e      	ldr	r6, [r3, #96]	; 0x60
24006ab2:	1e50      	subs	r0, r2, #1
24006ab4:	7a0a      	ldrb	r2, [r1, #8]
24006ab6:	f891 e009 	ldrb.w	lr, [r1, #9]
24006aba:	0412      	lsls	r2, r2, #16
24006abc:	6831      	ldr	r1, [r6, #0]
24006abe:	ea42 42c0 	orr.w	r2, r2, r0, lsl #19

    return HAL_OK;
24006ac2:	4660      	mov	r0, ip
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
24006ac4:	b2c9      	uxtb	r1, r1
24006ac6:	430a      	orrs	r2, r1
24006ac8:	ea42 224e 	orr.w	r2, r2, lr, lsl #9
24006acc:	4322      	orrs	r2, r4
24006ace:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
24006ad2:	6032      	str	r2, [r6, #0]
    __HAL_UNLOCK(hdma);
24006ad4:	f883 c034 	strb.w	ip, [r3, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;

    /* Return error status */
    return HAL_ERROR;
  }
}
24006ad8:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24006ada:	f44f 6200 	mov.w	r2, #2048	; 0x800
    return HAL_ERROR;
24006ade:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24006ae0:	655a      	str	r2, [r3, #84]	; 0x54
}
24006ae2:	bd70      	pop	{r4, r5, r6, pc}
    syncPolarity = pSyncConfig->SyncPolarity;
24006ae4:	e9d1 5400 	ldrd	r5, r4, [r1]
24006ae8:	e7cf      	b.n	24006a8a <HAL_DMAEx_ConfigMuxSync+0xe>
    __HAL_LOCK(hdma);
24006aea:	2002      	movs	r0, #2
}
24006aec:	bd70      	pop	{r4, r5, r6, pc}
24006aee:	bf00      	nop

24006af0 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
24006af0:	b510      	push	{r4, lr}
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
24006af2:	e9d0 2319 	ldrd	r2, r3, [r0, #100]	; 0x64
{
24006af6:	4604      	mov	r4, r0
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
24006af8:	6812      	ldr	r2, [r2, #0]
24006afa:	421a      	tst	r2, r3
24006afc:	d00e      	beq.n	24006b1c <HAL_DMAEx_MUX_IRQHandler+0x2c>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24006afe:	6e02      	ldr	r2, [r0, #96]	; 0x60
24006b00:	6813      	ldr	r3, [r2, #0]
24006b02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
24006b06:	6013      	str	r3, [r2, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24006b08:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	; 0x64
24006b0c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
24006b0e:	6d43      	ldr	r3, [r0, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
24006b10:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
24006b12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
24006b16:	6543      	str	r3, [r0, #84]	; 0x54
    if(hdma->XferErrorCallback != NULL)
24006b18:	b102      	cbz	r2, 24006b1c <HAL_DMAEx_MUX_IRQHandler+0x2c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
24006b1a:	4790      	blx	r2
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
24006b1c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
24006b1e:	b1ab      	cbz	r3, 24006b4c <HAL_DMAEx_MUX_IRQHandler+0x5c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
24006b20:	e9d4 121c 	ldrd	r1, r2, [r4, #112]	; 0x70
24006b24:	6809      	ldr	r1, [r1, #0]
24006b26:	4211      	tst	r1, r2
24006b28:	d010      	beq.n	24006b4c <HAL_DMAEx_MUX_IRQHandler+0x5c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
24006b2a:	681a      	ldr	r2, [r3, #0]
24006b2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24006b30:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24006b32:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
24006b36:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
24006b38:	6d63      	ldr	r3, [r4, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
24006b3a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
24006b3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
24006b40:	6563      	str	r3, [r4, #84]	; 0x54
      if(hdma->XferErrorCallback != NULL)
24006b42:	b11a      	cbz	r2, 24006b4c <HAL_DMAEx_MUX_IRQHandler+0x5c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
24006b44:	4620      	mov	r0, r4
      }
    }
  }
}
24006b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        hdma->XferErrorCallback(hdma);
24006b4a:	4710      	bx	r2
}
24006b4c:	bd10      	pop	{r4, pc}
24006b4e:	bf00      	nop

24006b50 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
24006b50:	680b      	ldr	r3, [r1, #0]
24006b52:	2b00      	cmp	r3, #0
24006b54:	f000 8119 	beq.w	24006d8a <HAL_GPIO_Init+0x23a>
24006b58:	f04f 0c00 	mov.w	ip, #0
{
24006b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
24006b60:	4662      	mov	r2, ip
{
24006b62:	b083      	sub	sp, #12
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24006b64:	4d94      	ldr	r5, [pc, #592]	; (24006db8 <HAL_GPIO_Init+0x268>)

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
24006b66:	4f95      	ldr	r7, [pc, #596]	; (24006dbc <HAL_GPIO_Init+0x26c>)
24006b68:	f8df 8268 	ldr.w	r8, [pc, #616]	; 24006dd4 <HAL_GPIO_Init+0x284>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
24006b6c:	f04f 0901 	mov.w	r9, #1
24006b70:	fa09 f902 	lsl.w	r9, r9, r2
    if (iocurrent != 0x00U)
24006b74:	ea19 0e03 	ands.w	lr, r9, r3
24006b78:	f000 80c1 	beq.w	24006cfe <HAL_GPIO_Init+0x1ae>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
24006b7c:	684b      	ldr	r3, [r1, #4]
24006b7e:	f003 0303 	and.w	r3, r3, #3
24006b82:	1e5c      	subs	r4, r3, #1
24006b84:	2c01      	cmp	r4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24006b86:	f04f 0403 	mov.w	r4, #3
24006b8a:	fa04 f40c 	lsl.w	r4, r4, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
24006b8e:	f240 80c0 	bls.w	24006d12 <HAL_GPIO_Init+0x1c2>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24006b92:	43e4      	mvns	r4, r4
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
24006b94:	2b03      	cmp	r3, #3
24006b96:	d026      	beq.n	24006be6 <HAL_GPIO_Init+0x96>
      temp = GPIOx->PUPDR;
24006b98:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
24006b9a:	ea03 0904 	and.w	r9, r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
24006b9e:	688b      	ldr	r3, [r1, #8]
24006ba0:	fa03 f30c 	lsl.w	r3, r3, ip
24006ba4:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
24006ba8:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
24006baa:	684b      	ldr	r3, [r1, #4]
24006bac:	f003 0303 	and.w	r3, r3, #3
24006bb0:	2b02      	cmp	r3, #2
24006bb2:	d118      	bne.n	24006be6 <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3U];
24006bb4:	ea4f 09d2 	mov.w	r9, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
24006bb8:	f002 0b07 	and.w	fp, r2, #7
24006bbc:	230f      	movs	r3, #15
24006bbe:	eb00 0989 	add.w	r9, r0, r9, lsl #2
24006bc2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
24006bc6:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
24006bca:	fa03 f30b 	lsl.w	r3, r3, fp
24006bce:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
24006bd2:	690b      	ldr	r3, [r1, #16]
24006bd4:	fa03 f30b 	lsl.w	r3, r3, fp
24006bd8:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
24006bdc:	f8c9 3020 	str.w	r3, [r9, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
24006be0:	684b      	ldr	r3, [r1, #4]
24006be2:	f003 0303 	and.w	r3, r3, #3
      temp = GPIOx->MODER;
24006be6:	f8d0 9000 	ldr.w	r9, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
24006bea:	fa03 f30c 	lsl.w	r3, r3, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
24006bee:	ea09 0404 	and.w	r4, r9, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
24006bf2:	4323      	orrs	r3, r4
      GPIOx->MODER = temp;
24006bf4:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
24006bf6:	684b      	ldr	r3, [r1, #4]
24006bf8:	f413 3f40 	tst.w	r3, #196608	; 0x30000
24006bfc:	d07e      	beq.n	24006cfc <HAL_GPIO_Init+0x1ac>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24006bfe:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
24006c02:	f022 0403 	bic.w	r4, r2, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
24006c06:	f002 0903 	and.w	r9, r2, #3
24006c0a:	f04f 0a0f 	mov.w	sl, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24006c0e:	f043 0302 	orr.w	r3, r3, #2
24006c12:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
24006c16:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
24006c1a:	42b8      	cmp	r0, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24006c1c:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
24006c20:	f504 6480 	add.w	r4, r4, #1024	; 0x400
24006c24:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
24006c28:	fa0a fa09 	lsl.w	sl, sl, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24006c2c:	f003 0302 	and.w	r3, r3, #2
24006c30:	9301      	str	r3, [sp, #4]
24006c32:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
24006c34:	68a3      	ldr	r3, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
24006c36:	ea23 030a 	bic.w	r3, r3, sl
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
24006c3a:	d02b      	beq.n	24006c94 <HAL_GPIO_Init+0x144>
24006c3c:	4540      	cmp	r0, r8
24006c3e:	f000 8088 	beq.w	24006d52 <HAL_GPIO_Init+0x202>
24006c42:	4e5f      	ldr	r6, [pc, #380]	; (24006dc0 <HAL_GPIO_Init+0x270>)
24006c44:	42b0      	cmp	r0, r6
24006c46:	f000 808b 	beq.w	24006d60 <HAL_GPIO_Init+0x210>
24006c4a:	4e5e      	ldr	r6, [pc, #376]	; (24006dc4 <HAL_GPIO_Init+0x274>)
24006c4c:	42b0      	cmp	r0, r6
24006c4e:	d079      	beq.n	24006d44 <HAL_GPIO_Init+0x1f4>
24006c50:	4e5d      	ldr	r6, [pc, #372]	; (24006dc8 <HAL_GPIO_Init+0x278>)
24006c52:	42b0      	cmp	r0, r6
24006c54:	f000 8092 	beq.w	24006d7c <HAL_GPIO_Init+0x22c>
24006c58:	4e5c      	ldr	r6, [pc, #368]	; (24006dcc <HAL_GPIO_Init+0x27c>)
24006c5a:	42b0      	cmp	r0, r6
24006c5c:	f000 8096 	beq.w	24006d8c <HAL_GPIO_Init+0x23c>
24006c60:	4e5b      	ldr	r6, [pc, #364]	; (24006dd0 <HAL_GPIO_Init+0x280>)
24006c62:	42b0      	cmp	r0, r6
24006c64:	f000 8083 	beq.w	24006d6e <HAL_GPIO_Init+0x21e>
24006c68:	f8df a16c 	ldr.w	sl, [pc, #364]	; 24006dd8 <HAL_GPIO_Init+0x288>
24006c6c:	4550      	cmp	r0, sl
24006c6e:	f000 8094 	beq.w	24006d9a <HAL_GPIO_Init+0x24a>
24006c72:	f8df a168 	ldr.w	sl, [pc, #360]	; 24006ddc <HAL_GPIO_Init+0x28c>
24006c76:	4550      	cmp	r0, sl
24006c78:	f000 8096 	beq.w	24006da8 <HAL_GPIO_Init+0x258>
24006c7c:	f8df a160 	ldr.w	sl, [pc, #352]	; 24006de0 <HAL_GPIO_Init+0x290>
24006c80:	4550      	cmp	r0, sl
24006c82:	bf0c      	ite	eq
24006c84:	f04f 0a09 	moveq.w	sl, #9
24006c88:	f04f 0a0a 	movne.w	sl, #10
24006c8c:	fa0a f909 	lsl.w	r9, sl, r9
24006c90:	ea43 0309 	orr.w	r3, r3, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
24006c94:	60a3      	str	r3, [r4, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
24006c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
24006c9a:	684e      	ldr	r6, [r1, #4]
        temp &= ~(iocurrent);
24006c9c:	ea6f 040e 	mvn.w	r4, lr
        temp = EXTI->RTSR1;
24006ca0:	681b      	ldr	r3, [r3, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
24006ca2:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
24006ca6:	02f6      	lsls	r6, r6, #11
        temp &= ~(iocurrent);
24006ca8:	bf54      	ite	pl
24006caa:	4023      	andpl	r3, r4
          temp |= iocurrent;
24006cac:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->RTSR1 = temp;
24006cb0:	f8c9 3000 	str.w	r3, [r9]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
24006cb4:	684e      	ldr	r6, [r1, #4]
        temp = EXTI->FTSR1;
24006cb6:	f8d9 3004 	ldr.w	r3, [r9, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
24006cba:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
24006cbe:	02b6      	lsls	r6, r6, #10
        temp &= ~(iocurrent);
24006cc0:	bf54      	ite	pl
24006cc2:	4023      	andpl	r3, r4
          temp |= iocurrent;
24006cc4:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->FTSR1 = temp;
24006cc8:	f8c9 3004 	str.w	r3, [r9, #4]

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
24006ccc:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->EMR1;
24006cce:	f8d9 3084 	ldr.w	r3, [r9, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
24006cd2:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
24006cd6:	03b6      	lsls	r6, r6, #14
        temp &= ~(iocurrent);
24006cd8:	bf54      	ite	pl
24006cda:	4023      	andpl	r3, r4
          temp |= iocurrent;
24006cdc:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI_CurrentCPU->EMR1 = temp;
24006ce0:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
24006ce4:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->IMR1;
24006ce6:	f8d9 3080 	ldr.w	r3, [r9, #128]	; 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
24006cea:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
24006cec:	bf54      	ite	pl
24006cee:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
24006cf0:	ea4e 0303 	orrmi.w	r3, lr, r3
        }
        EXTI_CurrentCPU->IMR1 = temp;
24006cf4:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
24006cf8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  while (((GPIO_Init->Pin) >> position) != 0x00U)
24006cfc:	680b      	ldr	r3, [r1, #0]
      }
    }

    position++;
24006cfe:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
24006d00:	f10c 0c02 	add.w	ip, ip, #2
24006d04:	fa33 f402 	lsrs.w	r4, r3, r2
24006d08:	f47f af30 	bne.w	24006b6c <HAL_GPIO_Init+0x1c>
  }
}
24006d0c:	b003      	add	sp, #12
24006d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
24006d12:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24006d14:	ea23 0a04 	bic.w	sl, r3, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
24006d18:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24006d1a:	43e4      	mvns	r4, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
24006d1c:	fa03 f30c 	lsl.w	r3, r3, ip
24006d20:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
24006d24:	6083      	str	r3, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
24006d26:	684b      	ldr	r3, [r1, #4]
        temp = GPIOx->OTYPER;
24006d28:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
24006d2c:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
24006d30:	ea2a 0909 	bic.w	r9, sl, r9
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
24006d34:	4093      	lsls	r3, r2
24006d36:	ea43 0309 	orr.w	r3, r3, r9
        GPIOx->OTYPER = temp;
24006d3a:	6043      	str	r3, [r0, #4]
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
24006d3c:	684b      	ldr	r3, [r1, #4]
24006d3e:	f003 0303 	and.w	r3, r3, #3
24006d42:	e727      	b.n	24006b94 <HAL_GPIO_Init+0x44>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
24006d44:	f04f 0a03 	mov.w	sl, #3
24006d48:	fa0a f909 	lsl.w	r9, sl, r9
24006d4c:	ea43 0309 	orr.w	r3, r3, r9
24006d50:	e7a0      	b.n	24006c94 <HAL_GPIO_Init+0x144>
24006d52:	f04f 0a01 	mov.w	sl, #1
24006d56:	fa0a f909 	lsl.w	r9, sl, r9
24006d5a:	ea43 0309 	orr.w	r3, r3, r9
24006d5e:	e799      	b.n	24006c94 <HAL_GPIO_Init+0x144>
24006d60:	f04f 0a02 	mov.w	sl, #2
24006d64:	fa0a f909 	lsl.w	r9, sl, r9
24006d68:	ea43 0309 	orr.w	r3, r3, r9
24006d6c:	e792      	b.n	24006c94 <HAL_GPIO_Init+0x144>
24006d6e:	f04f 0a06 	mov.w	sl, #6
24006d72:	fa0a f909 	lsl.w	r9, sl, r9
24006d76:	ea43 0309 	orr.w	r3, r3, r9
24006d7a:	e78b      	b.n	24006c94 <HAL_GPIO_Init+0x144>
24006d7c:	f04f 0a04 	mov.w	sl, #4
24006d80:	fa0a f909 	lsl.w	r9, sl, r9
24006d84:	ea43 0309 	orr.w	r3, r3, r9
24006d88:	e784      	b.n	24006c94 <HAL_GPIO_Init+0x144>
24006d8a:	4770      	bx	lr
24006d8c:	f04f 0a05 	mov.w	sl, #5
24006d90:	fa0a f909 	lsl.w	r9, sl, r9
24006d94:	ea43 0309 	orr.w	r3, r3, r9
24006d98:	e77c      	b.n	24006c94 <HAL_GPIO_Init+0x144>
24006d9a:	f04f 0a07 	mov.w	sl, #7
24006d9e:	fa0a f909 	lsl.w	r9, sl, r9
24006da2:	ea43 0309 	orr.w	r3, r3, r9
24006da6:	e775      	b.n	24006c94 <HAL_GPIO_Init+0x144>
24006da8:	f04f 0a08 	mov.w	sl, #8
24006dac:	fa0a f909 	lsl.w	r9, sl, r9
24006db0:	ea43 0309 	orr.w	r3, r3, r9
24006db4:	e76e      	b.n	24006c94 <HAL_GPIO_Init+0x144>
24006db6:	bf00      	nop
24006db8:	58024400 	.word	0x58024400
24006dbc:	58020000 	.word	0x58020000
24006dc0:	58020800 	.word	0x58020800
24006dc4:	58020c00 	.word	0x58020c00
24006dc8:	58021000 	.word	0x58021000
24006dcc:	58021400 	.word	0x58021400
24006dd0:	58021800 	.word	0x58021800
24006dd4:	58020400 	.word	0x58020400
24006dd8:	58021c00 	.word	0x58021c00
24006ddc:	58022000 	.word	0x58022000
24006de0:	58022400 	.word	0x58022400

24006de4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
24006de4:	6903      	ldr	r3, [r0, #16]
24006de6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
24006de8:	bf14      	ite	ne
24006dea:	2001      	movne	r0, #1
24006dec:	2000      	moveq	r0, #0
24006dee:	4770      	bx	lr

24006df0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
24006df0:	b902      	cbnz	r2, 24006df4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
24006df2:	0409      	lsls	r1, r1, #16
24006df4:	6181      	str	r1, [r0, #24]
  }
}
24006df6:	4770      	bx	lr

24006df8 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
24006df8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24006dfc:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
24006e00:	4201      	tst	r1, r0
24006e02:	d100      	bne.n	24006e06 <HAL_GPIO_EXTI_IRQHandler+0xe>
24006e04:	4770      	bx	lr
{
24006e06:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
24006e08:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
24006e0c:	f7fd faac 	bl	24004368 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
24006e10:	bd08      	pop	{r3, pc}
24006e12:	bf00      	nop

24006e14 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
24006e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24006e18:	6803      	ldr	r3, [r0, #0]
{
24006e1a:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24006e1c:	699a      	ldr	r2, [r3, #24]
24006e1e:	0694      	lsls	r4, r2, #26
24006e20:	d46d      	bmi.n	24006efe <I2C_WaitOnSTOPFlagUntilTimeout+0xea>
24006e22:	4605      	mov	r5, r0
24006e24:	460f      	mov	r7, r1
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24006e26:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
24006e2a:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
24006e2c:	f014 0410 	ands.w	r4, r4, #16
24006e30:	d068      	beq.n	24006f04 <I2C_WaitOnSTOPFlagUntilTimeout+0xf0>
  uint32_t error_code = 0;
24006e32:	2600      	movs	r6, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24006e34:	f8c3 901c 	str.w	r9, [r3, #28]
  uint32_t tickstart = Tickstart;
24006e38:	4644      	mov	r4, r8

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24006e3a:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
24006e3c:	46b2      	mov	sl, r6
24006e3e:	1c79      	adds	r1, r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24006e40:	699a      	ldr	r2, [r3, #24]
24006e42:	d161      	bne.n	24006f08 <I2C_WaitOnSTOPFlagUntilTimeout+0xf4>
24006e44:	0690      	lsls	r0, r2, #26
24006e46:	f100 8085 	bmi.w	24006f54 <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
24006e4a:	f1ba 0f00 	cmp.w	sl, #0
24006e4e:	d105      	bne.n	24006e5c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
24006e50:	699c      	ldr	r4, [r3, #24]
24006e52:	06a1      	lsls	r1, r4, #26
24006e54:	d5fc      	bpl.n	24006e50 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24006e56:	2220      	movs	r2, #32
24006e58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
24006e5a:	682b      	ldr	r3, [r5, #0]
    error_code |= HAL_I2C_ERROR_AF;
24006e5c:	f046 0404 	orr.w	r4, r6, #4
    status = HAL_ERROR;
24006e60:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
24006e62:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
24006e64:	05d0      	lsls	r0, r2, #23
24006e66:	d535      	bpl.n	24006ed4 <I2C_WaitOnSTOPFlagUntilTimeout+0xc0>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24006e68:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24006e6c:	0556      	lsls	r6, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
24006e6e:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24006e72:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24006e74:	682b      	ldr	r3, [r5, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24006e76:	d505      	bpl.n	24006e84 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24006e78:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
24006e7c:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24006e80:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24006e82:	682b      	ldr	r3, [r5, #0]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
24006e84:	0597      	lsls	r7, r2, #22
24006e86:	d505      	bpl.n	24006e94 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24006e88:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
24006e8c:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24006e90:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24006e92:	682b      	ldr	r3, [r5, #0]
24006e94:	699a      	ldr	r2, [r3, #24]
24006e96:	0790      	lsls	r0, r2, #30
24006e98:	d502      	bpl.n	24006ea0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    hi2c->Instance->TXDR = 0x00U;
24006e9a:	2200      	movs	r2, #0
24006e9c:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
24006e9e:	682b      	ldr	r3, [r5, #0]
24006ea0:	699a      	ldr	r2, [r3, #24]
24006ea2:	07d1      	lsls	r1, r2, #31
24006ea4:	d404      	bmi.n	24006eb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x9c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
24006ea6:	699a      	ldr	r2, [r3, #24]
24006ea8:	f042 0201 	orr.w	r2, r2, #1
24006eac:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
24006eae:	682b      	ldr	r3, [r5, #0]
24006eb0:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
24006eb2:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
24006eb4:	4835      	ldr	r0, [pc, #212]	; (24006f8c <I2C_WaitOnSTOPFlagUntilTimeout+0x178>)
    hi2c->State = HAL_I2C_STATE_READY;
24006eb6:	2620      	movs	r6, #32
    I2C_RESET_CR2(hi2c);
24006eb8:	4002      	ands	r2, r0
      return HAL_ERROR;
24006eba:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
24006ebc:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
24006ebe:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
24006ec0:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
24006ec4:	4323      	orrs	r3, r4
24006ec6:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
24006ec8:	f885 6041 	strb.w	r6, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
24006ecc:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
24006ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24006ed4:	0550      	lsls	r0, r2, #21
24006ed6:	d4cf      	bmi.n	24006e78 <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
24006ed8:	0596      	lsls	r6, r2, #22
24006eda:	d4d5      	bmi.n	24006e88 <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
  if (status != HAL_OK)
24006edc:	2900      	cmp	r1, #0
24006ede:	d1d9      	bne.n	24006e94 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24006ee0:	f7fd ff5e 	bl	24004da0 <HAL_GetTick>
24006ee4:	eba0 0008 	sub.w	r0, r0, r8
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
24006ee8:	682b      	ldr	r3, [r5, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24006eea:	42b8      	cmp	r0, r7
24006eec:	d800      	bhi.n	24006ef0 <I2C_WaitOnSTOPFlagUntilTimeout+0xdc>
24006eee:	b91f      	cbnz	r7, 24006ef8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe4>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
24006ef0:	699a      	ldr	r2, [r3, #24]
24006ef2:	f012 0220 	ands.w	r2, r2, #32
24006ef6:	d032      	beq.n	24006f5e <I2C_WaitOnSTOPFlagUntilTimeout+0x14a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24006ef8:	699a      	ldr	r2, [r3, #24]
24006efa:	0692      	lsls	r2, r2, #26
24006efc:	d595      	bpl.n	24006e2a <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
24006efe:	2000      	movs	r0, #0
}
24006f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
24006f04:	4621      	mov	r1, r4
24006f06:	e7ac      	b.n	24006e62 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24006f08:	0692      	lsls	r2, r2, #26
24006f0a:	d423      	bmi.n	24006f54 <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
24006f0c:	f1ba 0f00 	cmp.w	sl, #0
24006f10:	d1a4      	bne.n	24006e5c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24006f12:	f7fd ff45 	bl	24004da0 <HAL_GetTick>
24006f16:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
24006f18:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24006f1a:	4287      	cmp	r7, r0
24006f1c:	d301      	bcc.n	24006f22 <I2C_WaitOnSTOPFlagUntilTimeout+0x10e>
24006f1e:	2f00      	cmp	r7, #0
24006f20:	d18d      	bne.n	24006e3e <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
24006f22:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
24006f24:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
24006f28:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
24006f2a:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
24006f2c:	0409      	lsls	r1, r1, #16
24006f2e:	d503      	bpl.n	24006f38 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
              (tmp1 != I2C_CR2_STOP) && \
24006f30:	0441      	lsls	r1, r0, #17
24006f32:	d401      	bmi.n	24006f38 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
24006f34:	2a20      	cmp	r2, #32
24006f36:	d11f      	bne.n	24006f78 <I2C_WaitOnSTOPFlagUntilTimeout+0x164>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24006f38:	699a      	ldr	r2, [r3, #24]
24006f3a:	0690      	lsls	r0, r2, #26
24006f3c:	f53f af7f 	bmi.w	24006e3e <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
24006f40:	f7fd ff2e 	bl	24004da0 <HAL_GetTick>
24006f44:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24006f46:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
24006f48:	2819      	cmp	r0, #25
24006f4a:	d9f5      	bls.n	24006f38 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
24006f4c:	2620      	movs	r6, #32
              status = HAL_ERROR;
24006f4e:	f04f 0a01 	mov.w	sl, #1
24006f52:	e774      	b.n	24006e3e <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
    if (status == HAL_OK)
24006f54:	f1ba 0f00 	cmp.w	sl, #0
24006f58:	f43f af7d 	beq.w	24006e56 <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
24006f5c:	e77e      	b.n	24006e5c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24006f5e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24006f60:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
24006f62:	2001      	movs	r0, #1
24006f64:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24006f68:	430b      	orrs	r3, r1
24006f6a:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24006f6c:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
24006f70:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
24006f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
24006f78:	685a      	ldr	r2, [r3, #4]
24006f7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
24006f7e:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
24006f80:	f7fd ff0e 	bl	24004da0 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24006f84:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
24006f86:	4604      	mov	r4, r0
24006f88:	e7d6      	b.n	24006f38 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
24006f8a:	bf00      	nop
24006f8c:	fe00e800 	.word	0xfe00e800

24006f90 <HAL_I2C_Init>:
  if (hi2c == NULL)
24006f90:	2800      	cmp	r0, #0
24006f92:	d056      	beq.n	24007042 <HAL_I2C_Init+0xb2>
{
24006f94:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
24006f96:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24006f9a:	4604      	mov	r4, r0
24006f9c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
24006fa0:	2b00      	cmp	r3, #0
24006fa2:	d049      	beq.n	24007038 <HAL_I2C_Init+0xa8>
  __HAL_I2C_DISABLE(hi2c);
24006fa4:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
24006fa6:	2324      	movs	r3, #36	; 0x24
24006fa8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
24006fac:	6813      	ldr	r3, [r2, #0]
24006fae:	f023 0301 	bic.w	r3, r3, #1
24006fb2:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
24006fb4:	e9d4 2300 	ldrd	r2, r3, [r4]
24006fb8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
24006fbc:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
24006fbe:	6822      	ldr	r2, [r4, #0]
24006fc0:	6893      	ldr	r3, [r2, #8]
24006fc2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
24006fc6:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
24006fc8:	68e3      	ldr	r3, [r4, #12]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
24006fca:	6822      	ldr	r2, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
24006fcc:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
24006fce:	68a3      	ldr	r3, [r4, #8]
24006fd0:	bf0c      	ite	eq
24006fd2:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
24006fd6:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
24006fda:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
24006fdc:	68e3      	ldr	r3, [r4, #12]
24006fde:	2b02      	cmp	r3, #2
24006fe0:	d103      	bne.n	24006fea <HAL_I2C_Init+0x5a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
24006fe2:	6823      	ldr	r3, [r4, #0]
24006fe4:	f44f 6200 	mov.w	r2, #2048	; 0x800
24006fe8:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
24006fea:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_READY;
24006fec:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
24006ff0:	4b15      	ldr	r3, [pc, #84]	; (24007048 <HAL_I2C_Init+0xb8>)
24006ff2:	6851      	ldr	r1, [r2, #4]
24006ff4:	430b      	orrs	r3, r1
24006ff6:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
24006ff8:	6822      	ldr	r2, [r4, #0]
24006ffa:	68d3      	ldr	r3, [r2, #12]
24006ffc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
24007000:	60d3      	str	r3, [r2, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
24007002:	69a0      	ldr	r0, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
24007004:	6821      	ldr	r1, [r4, #0]
24007006:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
2400700a:	4313      	orrs	r3, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400700c:	2200      	movs	r2, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
2400700e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
24007012:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
24007014:	6821      	ldr	r1, [r4, #0]
24007016:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
2400701a:	4303      	orrs	r3, r0
  return HAL_OK;
2400701c:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
2400701e:	600b      	str	r3, [r1, #0]
  __HAL_I2C_ENABLE(hi2c);
24007020:	6821      	ldr	r1, [r4, #0]
24007022:	680b      	ldr	r3, [r1, #0]
24007024:	f043 0301 	orr.w	r3, r3, #1
24007028:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400702a:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
2400702c:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
24007030:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
24007032:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
24007036:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
24007038:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
2400703c:	f7fb fa0c 	bl	24002458 <HAL_I2C_MspInit>
24007040:	e7b0      	b.n	24006fa4 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
24007042:	2001      	movs	r0, #1
}
24007044:	4770      	bx	lr
24007046:	bf00      	nop
24007048:	02008000 	.word	0x02008000

2400704c <HAL_I2C_Master_Transmit>:
{
2400704c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
24007050:	461c      	mov	r4, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
24007052:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
24007056:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
24007058:	2b20      	cmp	r3, #32
2400705a:	d12c      	bne.n	240070b6 <HAL_I2C_Master_Transmit+0x6a>
    __HAL_LOCK(hi2c);
2400705c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
24007060:	4683      	mov	fp, r0
24007062:	2b01      	cmp	r3, #1
24007064:	d027      	beq.n	240070b6 <HAL_I2C_Master_Transmit+0x6a>
24007066:	2301      	movs	r3, #1
24007068:	468a      	mov	sl, r1
2400706a:	4616      	mov	r6, r2
2400706c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
24007070:	f7fd fe96 	bl	24004da0 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
24007074:	f8db 3000 	ldr.w	r3, [fp]
    tickstart = HAL_GetTick();
24007078:	4680      	mov	r8, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
2400707a:	699a      	ldr	r2, [r3, #24]
2400707c:	0417      	lsls	r7, r2, #16
2400707e:	d51d      	bpl.n	240070bc <HAL_I2C_Master_Transmit+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24007080:	f7fd fe8e 	bl	24004da0 <HAL_GetTick>
24007084:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
24007088:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2400708c:	2819      	cmp	r0, #25
2400708e:	d9f4      	bls.n	2400707a <HAL_I2C_Master_Transmit+0x2e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
24007090:	699a      	ldr	r2, [r3, #24]
24007092:	0410      	lsls	r0, r2, #16
24007094:	d5f1      	bpl.n	2400707a <HAL_I2C_Master_Transmit+0x2e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24007096:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
2400709a:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
2400709c:	2200      	movs	r2, #0
      return HAL_ERROR;
2400709e:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
240070a0:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
240070a2:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
240070a6:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
240070aa:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
240070ae:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
}
240070b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
240070b6:	2002      	movs	r0, #2
}
240070b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
240070bc:	2121      	movs	r1, #33	; 0x21
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
240070be:	2200      	movs	r2, #0
    hi2c->pBuffPtr  = pData;
240070c0:	f8cb 6024 	str.w	r6, [fp, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
240070c4:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
240070c8:	2110      	movs	r1, #16
    hi2c->XferISR   = NULL;
240070ca:	f8cb 2034 	str.w	r2, [fp, #52]	; 0x34
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
240070ce:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
240070d2:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
    hi2c->XferCount = Size;
240070d6:	f8ab 402a 	strh.w	r4, [fp, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
240070da:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
240070de:	b292      	uxth	r2, r2
240070e0:	2aff      	cmp	r2, #255	; 0xff
240070e2:	d87e      	bhi.n	240071e2 <HAL_I2C_Master_Transmit+0x196>
      hi2c->XferSize = hi2c->XferCount;
240070e4:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
240070e8:	49ad      	ldr	r1, [pc, #692]	; (240073a0 <HAL_I2C_Master_Transmit+0x354>)
      hi2c->XferSize = hi2c->XferCount;
240070ea:	b292      	uxth	r2, r2
240070ec:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
240070f0:	b2d2      	uxtb	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
240070f2:	6858      	ldr	r0, [r3, #4]
240070f4:	4008      	ands	r0, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
240070f6:	f3ca 0109 	ubfx	r1, sl, #0, #10
240070fa:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
240070fe:	4301      	orrs	r1, r0
24007100:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
24007104:	49a7      	ldr	r1, [pc, #668]	; (240073a4 <HAL_I2C_Master_Transmit+0x358>)
24007106:	4311      	orrs	r1, r2
24007108:	6059      	str	r1, [r3, #4]
              error_code |= HAL_I2C_ERROR_TIMEOUT;
2400710a:	f04f 0920 	mov.w	r9, #32
    while (hi2c->XferCount > 0U)
2400710e:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
24007112:	b29b      	uxth	r3, r3
24007114:	2b00      	cmp	r3, #0
24007116:	f000 8107 	beq.w	24007328 <HAL_I2C_Master_Transmit+0x2dc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
2400711a:	f8db 3000 	ldr.w	r3, [fp]
2400711e:	699c      	ldr	r4, [r3, #24]
24007120:	f014 0402 	ands.w	r4, r4, #2
24007124:	f040 80c5 	bne.w	240072b2 <HAL_I2C_Master_Transmit+0x266>
  uint32_t itflag   = hi2c->Instance->ISR;
24007128:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
2400712a:	f012 0210 	ands.w	r2, r2, #16
2400712e:	f000 808d 	beq.w	2400724c <HAL_I2C_Master_Transmit+0x200>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24007132:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
24007134:	4646      	mov	r6, r8
  HAL_StatusTypeDef status = HAL_OK;
24007136:	4627      	mov	r7, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24007138:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
2400713a:	f8db 3000 	ldr.w	r3, [fp]
2400713e:	1c69      	adds	r1, r5, #1
24007140:	699a      	ldr	r2, [r3, #24]
24007142:	f040 8085 	bne.w	24007250 <HAL_I2C_Master_Transmit+0x204>
24007146:	0690      	lsls	r0, r2, #26
24007148:	f100 8106 	bmi.w	24007358 <HAL_I2C_Master_Transmit+0x30c>
2400714c:	b937      	cbnz	r7, 2400715c <HAL_I2C_Master_Transmit+0x110>
2400714e:	699a      	ldr	r2, [r3, #24]
24007150:	0691      	lsls	r1, r2, #26
24007152:	d5fc      	bpl.n	2400714e <HAL_I2C_Master_Transmit+0x102>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24007154:	f8c3 901c 	str.w	r9, [r3, #28]
  itflag = hi2c->Instance->ISR;
24007158:	f8db 3000 	ldr.w	r3, [fp]
    error_code |= HAL_I2C_ERROR_AF;
2400715c:	f044 0204 	orr.w	r2, r4, #4
    status = HAL_ERROR;
24007160:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
24007162:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
24007164:	05ce      	lsls	r6, r1, #23
24007166:	d54b      	bpl.n	24007200 <HAL_I2C_Master_Transmit+0x1b4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24007168:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
2400716c:	054d      	lsls	r5, r1, #21
    error_code |= HAL_I2C_ERROR_BERR;
2400716e:	f042 0201 	orr.w	r2, r2, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24007172:	61d8      	str	r0, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24007174:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24007178:	d506      	bpl.n	24007188 <HAL_I2C_Master_Transmit+0x13c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
2400717a:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
2400717e:	f042 0208 	orr.w	r2, r2, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24007182:	61d8      	str	r0, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24007184:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
24007188:	0589      	lsls	r1, r1, #22
2400718a:	d506      	bpl.n	2400719a <HAL_I2C_Master_Transmit+0x14e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
2400718c:	f44f 7100 	mov.w	r1, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
24007190:	f042 0202 	orr.w	r2, r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24007194:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24007196:	f8db 3000 	ldr.w	r3, [fp]
2400719a:	6999      	ldr	r1, [r3, #24]
2400719c:	078e      	lsls	r6, r1, #30
2400719e:	d503      	bpl.n	240071a8 <HAL_I2C_Master_Transmit+0x15c>
    hi2c->Instance->TXDR = 0x00U;
240071a0:	2100      	movs	r1, #0
240071a2:	6299      	str	r1, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
240071a4:	f8db 3000 	ldr.w	r3, [fp]
240071a8:	6999      	ldr	r1, [r3, #24]
240071aa:	07cd      	lsls	r5, r1, #31
240071ac:	d405      	bmi.n	240071ba <HAL_I2C_Master_Transmit+0x16e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
240071ae:	6999      	ldr	r1, [r3, #24]
240071b0:	f041 0101 	orr.w	r1, r1, #1
240071b4:	6199      	str	r1, [r3, #24]
    I2C_RESET_CR2(hi2c);
240071b6:	f8db 3000 	ldr.w	r3, [fp]
240071ba:	6859      	ldr	r1, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
240071bc:	2400      	movs	r4, #0
    I2C_RESET_CR2(hi2c);
240071be:	487a      	ldr	r0, [pc, #488]	; (240073a8 <HAL_I2C_Master_Transmit+0x35c>)
    hi2c->State = HAL_I2C_STATE_READY;
240071c0:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
240071c2:	4001      	ands	r1, r0
        return HAL_ERROR;
240071c4:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
240071c6:	6059      	str	r1, [r3, #4]
    hi2c->ErrorCode |= error_code;
240071c8:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
240071cc:	f88b 4040 	strb.w	r4, [fp, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
240071d0:	4313      	orrs	r3, r2
240071d2:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
240071d6:	f88b 5041 	strb.w	r5, [fp, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
240071da:	f88b 4042 	strb.w	r4, [fp, #66]	; 0x42
}
240071de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
240071e2:	22ff      	movs	r2, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
240071e4:	496e      	ldr	r1, [pc, #440]	; (240073a0 <HAL_I2C_Master_Transmit+0x354>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
240071e6:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
240071ea:	685a      	ldr	r2, [r3, #4]
240071ec:	400a      	ands	r2, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
240071ee:	f3ca 0109 	ubfx	r1, sl, #0, #10
240071f2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
240071f6:	4311      	orrs	r1, r2
240071f8:	4a6c      	ldr	r2, [pc, #432]	; (240073ac <HAL_I2C_Master_Transmit+0x360>)
240071fa:	430a      	orrs	r2, r1
240071fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
240071fe:	e784      	b.n	2400710a <HAL_I2C_Master_Transmit+0xbe>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24007200:	054c      	lsls	r4, r1, #21
24007202:	d4ba      	bmi.n	2400717a <HAL_I2C_Master_Transmit+0x12e>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
24007204:	058f      	lsls	r7, r1, #22
24007206:	d4c1      	bmi.n	2400718c <HAL_I2C_Master_Transmit+0x140>
  if (status != HAL_OK)
24007208:	2800      	cmp	r0, #0
2400720a:	d1c6      	bne.n	2400719a <HAL_I2C_Master_Transmit+0x14e>
    if (Timeout != HAL_MAX_DELAY)
2400720c:	1c6c      	adds	r4, r5, #1
2400720e:	d086      	beq.n	2400711e <HAL_I2C_Master_Transmit+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24007210:	f7fd fdc6 	bl	24004da0 <HAL_GetTick>
24007214:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
24007218:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2400721c:	4285      	cmp	r5, r0
2400721e:	d302      	bcc.n	24007226 <HAL_I2C_Master_Transmit+0x1da>
24007220:	2d00      	cmp	r5, #0
24007222:	f47f af7c 	bne.w	2400711e <HAL_I2C_Master_Transmit+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
24007226:	699a      	ldr	r2, [r3, #24]
24007228:	f012 0202 	ands.w	r2, r2, #2
2400722c:	f47f af77 	bne.w	2400711e <HAL_I2C_Master_Transmit+0xd2>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24007230:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24007234:	2120      	movs	r1, #32
        return HAL_ERROR;
24007236:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
24007238:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400723c:	430b      	orrs	r3, r1
2400723e:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24007242:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
24007246:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
          return HAL_ERROR;
2400724a:	e735      	b.n	240070b8 <HAL_I2C_Master_Transmit+0x6c>
  HAL_StatusTypeDef status = HAL_OK;
2400724c:	4610      	mov	r0, r2
2400724e:	e788      	b.n	24007162 <HAL_I2C_Master_Transmit+0x116>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24007250:	0692      	lsls	r2, r2, #26
24007252:	f100 8081 	bmi.w	24007358 <HAL_I2C_Master_Transmit+0x30c>
24007256:	2f00      	cmp	r7, #0
24007258:	d180      	bne.n	2400715c <HAL_I2C_Master_Transmit+0x110>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
2400725a:	f7fd fda1 	bl	24004da0 <HAL_GetTick>
2400725e:	1b80      	subs	r0, r0, r6
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
24007260:	f8db 3000 	ldr.w	r3, [fp]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24007264:	4285      	cmp	r5, r0
24007266:	d302      	bcc.n	2400726e <HAL_I2C_Master_Transmit+0x222>
24007268:	2d00      	cmp	r5, #0
2400726a:	f47f af68 	bne.w	2400713e <HAL_I2C_Master_Transmit+0xf2>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
2400726e:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
24007270:	f89b 2042 	ldrb.w	r2, [fp, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
24007274:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
24007276:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
24007278:	0409      	lsls	r1, r1, #16
2400727a:	d50c      	bpl.n	24007296 <HAL_I2C_Master_Transmit+0x24a>
              (tmp1 != I2C_CR2_STOP) && \
2400727c:	0441      	lsls	r1, r0, #17
2400727e:	d40a      	bmi.n	24007296 <HAL_I2C_Master_Transmit+0x24a>
24007280:	2a20      	cmp	r2, #32
24007282:	d008      	beq.n	24007296 <HAL_I2C_Master_Transmit+0x24a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
24007284:	685a      	ldr	r2, [r3, #4]
24007286:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400728a:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
2400728c:	f7fd fd88 	bl	24004da0 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24007290:	f8db 3000 	ldr.w	r3, [fp]
            tickstart = HAL_GetTick();
24007294:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24007296:	699a      	ldr	r2, [r3, #24]
24007298:	0690      	lsls	r0, r2, #26
2400729a:	f53f af50 	bmi.w	2400713e <HAL_I2C_Master_Transmit+0xf2>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
2400729e:	f7fd fd7f 	bl	24004da0 <HAL_GetTick>
240072a2:	1b80      	subs	r0, r0, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
240072a4:	f8db 3000 	ldr.w	r3, [fp]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
240072a8:	2819      	cmp	r0, #25
240072aa:	d9f4      	bls.n	24007296 <HAL_I2C_Master_Transmit+0x24a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
240072ac:	2420      	movs	r4, #32
              status = HAL_ERROR;
240072ae:	2701      	movs	r7, #1
240072b0:	e745      	b.n	2400713e <HAL_I2C_Master_Transmit+0xf2>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
240072b2:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
240072b6:	7812      	ldrb	r2, [r2, #0]
240072b8:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
240072ba:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
240072be:	f8bb 3028 	ldrh.w	r3, [fp, #40]	; 0x28
      hi2c->XferCount--;
240072c2:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
240072c4:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
      hi2c->XferSize--;
240072c8:	3b01      	subs	r3, #1
      hi2c->XferCount--;
240072ca:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
240072cc:	3101      	adds	r1, #1
      hi2c->XferSize--;
240072ce:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
240072d0:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
240072d4:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->pBuffPtr++;
240072d8:	f8cb 1024 	str.w	r1, [fp, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
240072dc:	b292      	uxth	r2, r2
      hi2c->XferSize--;
240072de:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
240072e2:	2b00      	cmp	r3, #0
240072e4:	f47f af13 	bne.w	2400710e <HAL_I2C_Master_Transmit+0xc2>
240072e8:	2a00      	cmp	r2, #0
240072ea:	f43f af10 	beq.w	2400710e <HAL_I2C_Master_Transmit+0xc2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
240072ee:	f8db 2000 	ldr.w	r2, [fp]
240072f2:	1c68      	adds	r0, r5, #1
240072f4:	d134      	bne.n	24007360 <HAL_I2C_Master_Transmit+0x314>
240072f6:	6993      	ldr	r3, [r2, #24]
240072f8:	0619      	lsls	r1, r3, #24
240072fa:	d5fc      	bpl.n	240072f6 <HAL_I2C_Master_Transmit+0x2aa>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
240072fc:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
24007300:	b29b      	uxth	r3, r3
24007302:	2bff      	cmp	r3, #255	; 0xff
24007304:	d958      	bls.n	240073b8 <HAL_I2C_Master_Transmit+0x36c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
24007306:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
24007308:	4929      	ldr	r1, [pc, #164]	; (240073b0 <HAL_I2C_Master_Transmit+0x364>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
2400730a:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
2400730e:	6853      	ldr	r3, [r2, #4]
24007310:	400b      	ands	r3, r1
24007312:	4928      	ldr	r1, [pc, #160]	; (240073b4 <HAL_I2C_Master_Transmit+0x368>)
24007314:	ea4a 0303 	orr.w	r3, sl, r3
24007318:	4319      	orrs	r1, r3
2400731a:	6051      	str	r1, [r2, #4]
    while (hi2c->XferCount > 0U)
2400731c:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
24007320:	b29b      	uxth	r3, r3
24007322:	2b00      	cmp	r3, #0
24007324:	f47f aef9 	bne.w	2400711a <HAL_I2C_Master_Transmit+0xce>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
24007328:	4642      	mov	r2, r8
2400732a:	4629      	mov	r1, r5
2400732c:	4658      	mov	r0, fp
2400732e:	f7ff fd71 	bl	24006e14 <I2C_WaitOnSTOPFlagUntilTimeout>
24007332:	2800      	cmp	r0, #0
24007334:	d151      	bne.n	240073da <HAL_I2C_Master_Transmit+0x38e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24007336:	f8db 3000 	ldr.w	r3, [fp]
2400733a:	2220      	movs	r2, #32
    I2C_RESET_CR2(hi2c);
2400733c:	4c1a      	ldr	r4, [pc, #104]	; (240073a8 <HAL_I2C_Master_Transmit+0x35c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400733e:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
24007340:	f8db 1000 	ldr.w	r1, [fp]
24007344:	684b      	ldr	r3, [r1, #4]
24007346:	4023      	ands	r3, r4
24007348:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
2400734a:	f88b 2041 	strb.w	r2, [fp, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
2400734e:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
24007352:	f88b 0042 	strb.w	r0, [fp, #66]	; 0x42
    return HAL_OK;
24007356:	e6af      	b.n	240070b8 <HAL_I2C_Master_Transmit+0x6c>
    if (status == HAL_OK)
24007358:	2f00      	cmp	r7, #0
2400735a:	f43f aefb 	beq.w	24007154 <HAL_I2C_Master_Transmit+0x108>
2400735e:	e6fd      	b.n	2400715c <HAL_I2C_Master_Transmit+0x110>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
24007360:	6993      	ldr	r3, [r2, #24]
24007362:	061b      	lsls	r3, r3, #24
24007364:	d4ca      	bmi.n	240072fc <HAL_I2C_Master_Transmit+0x2b0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24007366:	f7fd fd1b 	bl	24004da0 <HAL_GetTick>
2400736a:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
2400736e:	f8db 2000 	ldr.w	r2, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24007372:	4285      	cmp	r5, r0
24007374:	d301      	bcc.n	2400737a <HAL_I2C_Master_Transmit+0x32e>
24007376:	2d00      	cmp	r5, #0
24007378:	d1bb      	bne.n	240072f2 <HAL_I2C_Master_Transmit+0x2a6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
2400737a:	6993      	ldr	r3, [r2, #24]
2400737c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
24007380:	d1b7      	bne.n	240072f2 <HAL_I2C_Master_Transmit+0x2a6>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24007382:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24007386:	2120      	movs	r1, #32
          return HAL_ERROR;
24007388:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
2400738a:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400738e:	430a      	orrs	r2, r1
24007390:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24007394:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
24007398:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
          return HAL_ERROR;
2400739c:	e68c      	b.n	240070b8 <HAL_I2C_Master_Transmit+0x6c>
2400739e:	bf00      	nop
240073a0:	fc009800 	.word	0xfc009800
240073a4:	02002000 	.word	0x02002000
240073a8:	fe00e800 	.word	0xfe00e800
240073ac:	01ff2000 	.word	0x01ff2000
240073b0:	fc009c00 	.word	0xfc009c00
240073b4:	01ff0000 	.word	0x01ff0000
          hi2c->XferSize = hi2c->XferCount;
240073b8:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
240073bc:	4808      	ldr	r0, [pc, #32]	; (240073e0 <HAL_I2C_Master_Transmit+0x394>)
          hi2c->XferSize = hi2c->XferCount;
240073be:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
240073c0:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
240073c2:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
240073c6:	6853      	ldr	r3, [r2, #4]
240073c8:	4003      	ands	r3, r0
240073ca:	ea4a 0303 	orr.w	r3, sl, r3
240073ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
240073d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
240073d6:	6053      	str	r3, [r2, #4]
}
240073d8:	e699      	b.n	2400710e <HAL_I2C_Master_Transmit+0xc2>
      return HAL_ERROR;
240073da:	2001      	movs	r0, #1
240073dc:	e66c      	b.n	240070b8 <HAL_I2C_Master_Transmit+0x6c>
240073de:	bf00      	nop
240073e0:	fc009c00 	.word	0xfc009c00

240073e4 <HAL_I2C_Slave_Receive_IT>:
  if (hi2c->State == HAL_I2C_STATE_READY)
240073e4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
240073e8:	2b20      	cmp	r3, #32
240073ea:	d126      	bne.n	2400743a <HAL_I2C_Slave_Receive_IT+0x56>
{
240073ec:	b4f0      	push	{r4, r5, r6, r7}
240073ee:	b2dc      	uxtb	r4, r3
    __HAL_LOCK(hi2c);
240073f0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
240073f4:	2b01      	cmp	r3, #1
240073f6:	d022      	beq.n	2400743e <HAL_I2C_Slave_Receive_IT+0x5a>
240073f8:	2301      	movs	r3, #1
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
240073fa:	6805      	ldr	r5, [r0, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
240073fc:	4e11      	ldr	r6, [pc, #68]	; (24007444 <HAL_I2C_Slave_Receive_IT+0x60>)
    __HAL_LOCK(hi2c);
240073fe:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
24007402:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR     = I2C_Slave_ISR_IT;
24007404:	4f10      	ldr	r7, [pc, #64]	; (24007448 <HAL_I2C_Slave_Receive_IT+0x64>)
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
24007406:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400740a:	2300      	movs	r3, #0
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
2400740c:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
24007410:	6443      	str	r3, [r0, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
24007412:	686c      	ldr	r4, [r5, #4]
24007414:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
24007418:	606c      	str	r4, [r5, #4]
    hi2c->XferCount   = Size;
2400741a:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
2400741c:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
2400741e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
24007420:	6801      	ldr	r1, [r0, #0]
    hi2c->XferISR     = I2C_Slave_ISR_IT;
24007422:	6347      	str	r7, [r0, #52]	; 0x34
    hi2c->XferSize    = hi2c->XferCount;
24007424:	8502      	strh	r2, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24007426:	62c6      	str	r6, [r0, #44]	; 0x2c
    __HAL_UNLOCK(hi2c);
24007428:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
2400742c:	4618      	mov	r0, r3
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
2400742e:	680a      	ldr	r2, [r1, #0]
24007430:	f042 02fc 	orr.w	r2, r2, #252	; 0xfc
24007434:	600a      	str	r2, [r1, #0]
}
24007436:	bcf0      	pop	{r4, r5, r6, r7}
24007438:	4770      	bx	lr
    return HAL_BUSY;
2400743a:	2002      	movs	r0, #2
}
2400743c:	4770      	bx	lr
    return HAL_BUSY;
2400743e:	2002      	movs	r0, #2
}
24007440:	bcf0      	pop	{r4, r5, r6, r7}
24007442:	4770      	bx	lr
24007444:	ffff0000 	.word	0xffff0000
24007448:	24007935 	.word	0x24007935

2400744c <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
2400744c:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
2400744e:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
24007450:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
24007452:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
24007454:	b103      	cbz	r3, 24007458 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
24007456:	4718      	bx	r3
}
24007458:	4770      	bx	lr
2400745a:	bf00      	nop

2400745c <HAL_I2C_SlaveTxCpltCallback>:
2400745c:	4770      	bx	lr
2400745e:	bf00      	nop

24007460 <I2C_ITSlaveSeqCplt>:
{
24007460:	b508      	push	{r3, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
24007462:	6803      	ldr	r3, [r0, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
24007464:	2100      	movs	r1, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
24007466:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
24007468:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
2400746c:	0451      	lsls	r1, r2, #17
2400746e:	d526      	bpl.n	240074be <I2C_ITSlaveSeqCplt+0x5e>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
24007470:	681a      	ldr	r2, [r3, #0]
24007472:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
24007476:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
24007478:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
2400747c:	2b29      	cmp	r3, #41	; 0x29
2400747e:	d028      	beq.n	240074d2 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
24007480:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24007484:	2b2a      	cmp	r3, #42	; 0x2a
24007486:	d000      	beq.n	2400748a <I2C_ITSlaveSeqCplt+0x2a>
}
24007488:	bd08      	pop	{r3, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
2400748a:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
2400748c:	2322      	movs	r3, #34	; 0x22
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2400748e:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
24007490:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24007494:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
24007498:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2400749a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2400749e:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240074a0:	f002 0228 	and.w	r2, r2, #40	; 0x28
240074a4:	2a28      	cmp	r2, #40	; 0x28
240074a6:	bf0c      	ite	eq
240074a8:	f06f 0244 	mvneq.w	r2, #68	; 0x44
240074ac:	f06f 02f4 	mvnne.w	r2, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240074b0:	4013      	ands	r3, r2
240074b2:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
240074b4:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
240074b8:	f02c fa02 	bl	240338c0 <__HAL_I2C_SlaveRxCpltCallback_veneer>
}
240074bc:	bd08      	pop	{r3, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
240074be:	0412      	lsls	r2, r2, #16
240074c0:	d5da      	bpl.n	24007478 <I2C_ITSlaveSeqCplt+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
240074c2:	681a      	ldr	r2, [r3, #0]
240074c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
240074c8:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
240074ca:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
240074ce:	2b29      	cmp	r3, #41	; 0x29
240074d0:	d1d6      	bne.n	24007480 <I2C_ITSlaveSeqCplt+0x20>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
240074d2:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
240074d4:	2321      	movs	r3, #33	; 0x21
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240074d6:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
240074d8:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
240074dc:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
240074e0:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240074e2:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240074e6:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240074e8:	f002 0228 	and.w	r2, r2, #40	; 0x28
240074ec:	2a28      	cmp	r2, #40	; 0x28
240074ee:	bf0c      	ite	eq
240074f0:	f06f 0242 	mvneq.w	r2, #66	; 0x42
240074f4:	f06f 02f2 	mvnne.w	r2, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240074f8:	4013      	ands	r3, r2
240074fa:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
240074fc:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
24007500:	f7ff ffac 	bl	2400745c <HAL_I2C_SlaveTxCpltCallback>
}
24007504:	bd08      	pop	{r3, pc}
24007506:	bf00      	nop

24007508 <HAL_I2C_AddrCallback>:
}
24007508:	4770      	bx	lr
2400750a:	bf00      	nop

2400750c <I2C_ITAddrCplt.part.0>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
2400750c:	b570      	push	{r4, r5, r6, lr}
    transferdirection = I2C_GET_DIR(hi2c);
2400750e:	6804      	ldr	r4, [r0, #0]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
24007510:	4684      	mov	ip, r0
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
24007512:	68c3      	ldr	r3, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
24007514:	69a1      	ldr	r1, [r4, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
24007516:	69a2      	ldr	r2, [r4, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
24007518:	2b02      	cmp	r3, #2
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
2400751a:	68a5      	ldr	r5, [r4, #8]
    transferdirection = I2C_GET_DIR(hi2c);
2400751c:	f3c1 4100 	ubfx	r1, r1, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
24007520:	ea4f 4212 	mov.w	r2, r2, lsr #16
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
24007524:	68e6      	ldr	r6, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
24007526:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
2400752a:	d10f      	bne.n	2400754c <I2C_ITAddrCplt.part.0+0x40>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
2400752c:	ea82 13d5 	eor.w	r3, r2, r5, lsr #7
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
24007530:	f3c5 0209 	ubfx	r2, r5, #0, #10
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
24007534:	f013 0306 	ands.w	r3, r3, #6
24007538:	d106      	bne.n	24007548 <I2C_ITAddrCplt.part.0+0x3c>
        hi2c->AddrEventCount++;
2400753a:	6c85      	ldr	r5, [r0, #72]	; 0x48
2400753c:	3501      	adds	r5, #1
2400753e:	6485      	str	r5, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
24007540:	6c85      	ldr	r5, [r0, #72]	; 0x48
24007542:	2d02      	cmp	r5, #2
24007544:	d00c      	beq.n	24007560 <I2C_ITAddrCplt.part.0+0x54>
}
24007546:	bd70      	pop	{r4, r5, r6, pc}
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
24007548:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2400754c:	6823      	ldr	r3, [r4, #0]
2400754e:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
24007552:	6023      	str	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);
24007554:	2300      	movs	r3, #0
24007556:	f88c 3040 	strb.w	r3, [ip, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
2400755a:	f7ff ffd5 	bl	24007508 <HAL_I2C_AddrCallback>
}
2400755e:	bd70      	pop	{r4, r5, r6, pc}
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
24007560:	2508      	movs	r5, #8
          hi2c->AddrEventCount = 0U;
24007562:	6483      	str	r3, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
24007564:	61e5      	str	r5, [r4, #28]
          __HAL_UNLOCK(hi2c);
24007566:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
2400756a:	f7ff ffcd 	bl	24007508 <HAL_I2C_AddrCallback>
}
2400756e:	bd70      	pop	{r4, r5, r6, pc}

24007570 <HAL_I2C_ListenCpltCallback>:
24007570:	4770      	bx	lr
24007572:	bf00      	nop

24007574 <HAL_I2C_AbortCpltCallback>:
24007574:	4770      	bx	lr
24007576:	bf00      	nop

24007578 <I2C_DMAAbort>:
{
24007578:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2400757a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
2400757c:	6b83      	ldr	r3, [r0, #56]	; 0x38
2400757e:	b10b      	cbz	r3, 24007584 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
24007580:	2200      	movs	r2, #0
24007582:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
24007584:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
24007586:	b10b      	cbz	r3, 2400758c <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
24007588:	2200      	movs	r2, #0
2400758a:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
2400758c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24007590:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
24007592:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
24007596:	d005      	beq.n	240075a4 <I2C_DMAAbort+0x2c>
    hi2c->PreviousState = I2C_STATE_NONE;
24007598:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
2400759a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
2400759e:	f02c f9a3 	bl	240338e8 <__HAL_I2C_ErrorCallback_veneer>
}
240075a2:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
240075a4:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
240075a6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
240075aa:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
240075ae:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
240075b0:	f7ff ffe0 	bl	24007574 <HAL_I2C_AbortCpltCallback>
}
240075b4:	bd08      	pop	{r3, pc}
240075b6:	bf00      	nop

240075b8 <I2C_ITError>:
{
240075b8:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
240075ba:	4a5d      	ldr	r2, [pc, #372]	; (24007730 <I2C_ITError+0x178>)
  hi2c->Mode          = HAL_I2C_MODE_NONE;
240075bc:	2500      	movs	r5, #0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
240075be:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
240075c2:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
240075c4:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
240075c8:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
240075ca:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
240075cc:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
240075ce:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
240075d0:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
240075d2:	ea41 0102 	orr.w	r1, r1, r2
240075d6:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
240075d8:	d874      	bhi.n	240076c4 <I2C_ITError+0x10c>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240075da:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240075de:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240075e2:	f002 0228 	and.w	r2, r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240075e6:	6800      	ldr	r0, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240075e8:	f001 0128 	and.w	r1, r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240075ec:	2a28      	cmp	r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240075ee:	6803      	ldr	r3, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240075f0:	bf14      	ite	ne
240075f2:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
240075f6:	f06f 0246 	mvneq.w	r2, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240075fa:	2928      	cmp	r1, #40	; 0x28
    hi2c->State         = HAL_I2C_STATE_LISTEN;
240075fc:	f04f 0128 	mov.w	r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24007600:	bf18      	it	ne
24007602:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24007606:	4013      	ands	r3, r2
24007608:	4a4a      	ldr	r2, [pc, #296]	; (24007734 <I2C_ITError+0x17c>)
2400760a:	6003      	str	r3, [r0, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
2400760c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
24007610:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  tmppreviousstate = hi2c->PreviousState;
24007612:	6b23      	ldr	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
24007614:	6362      	str	r2, [r4, #52]	; 0x34
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
24007616:	b118      	cbz	r0, 24007620 <I2C_ITError+0x68>
24007618:	2b11      	cmp	r3, #17
2400761a:	d01e      	beq.n	2400765a <I2C_ITError+0xa2>
2400761c:	2b21      	cmp	r3, #33	; 0x21
2400761e:	d01c      	beq.n	2400765a <I2C_ITError+0xa2>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
24007620:	6be0      	ldr	r0, [r4, #60]	; 0x3c
24007622:	b118      	cbz	r0, 2400762c <I2C_ITError+0x74>
24007624:	2b12      	cmp	r3, #18
24007626:	d030      	beq.n	2400768a <I2C_ITError+0xd2>
24007628:	2b22      	cmp	r3, #34	; 0x22
2400762a:	d02e      	beq.n	2400768a <I2C_ITError+0xd2>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
2400762c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24007630:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
24007632:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
24007636:	d006      	beq.n	24007646 <I2C_ITError+0x8e>
    HAL_I2C_ErrorCallback(hi2c);
24007638:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
2400763a:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
2400763c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
24007640:	f02c f952 	bl	240338e8 <__HAL_I2C_ErrorCallback_veneer>
}
24007644:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
24007646:	2220      	movs	r2, #32
    HAL_I2C_AbortCpltCallback(hi2c);
24007648:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
2400764a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
2400764e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
24007652:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
24007654:	f7ff ff8e 	bl	24007574 <HAL_I2C_AbortCpltCallback>
}
24007658:	bd70      	pop	{r4, r5, r6, pc}
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
2400765a:	6823      	ldr	r3, [r4, #0]
2400765c:	681a      	ldr	r2, [r3, #0]
2400765e:	0451      	lsls	r1, r2, #17
24007660:	d45f      	bmi.n	24007722 <I2C_ITError+0x16a>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
24007662:	f7ff fa05 	bl	24006a70 <HAL_DMA_GetState>
24007666:	2801      	cmp	r0, #1
24007668:	d0e0      	beq.n	2400762c <I2C_ITError+0x74>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
2400766a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
2400766c:	2300      	movs	r3, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
2400766e:	4932      	ldr	r1, [pc, #200]	; (24007738 <I2C_ITError+0x180>)
24007670:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
24007672:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
24007676:	6ba0      	ldr	r0, [r4, #56]	; 0x38
24007678:	f7fe fc90 	bl	24005f9c <HAL_DMA_Abort_IT>
2400767c:	2800      	cmp	r0, #0
2400767e:	d0e1      	beq.n	24007644 <I2C_ITError+0x8c>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
24007680:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
24007682:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
24007686:	6d03      	ldr	r3, [r0, #80]	; 0x50
24007688:	4718      	bx	r3
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
2400768a:	6823      	ldr	r3, [r4, #0]
2400768c:	681a      	ldr	r2, [r3, #0]
2400768e:	0412      	lsls	r2, r2, #16
24007690:	d504      	bpl.n	2400769c <I2C_ITError+0xe4>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
24007692:	681a      	ldr	r2, [r3, #0]
24007694:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
24007698:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
2400769a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
2400769c:	f7ff f9e8 	bl	24006a70 <HAL_DMA_GetState>
240076a0:	2801      	cmp	r0, #1
240076a2:	d0c3      	beq.n	2400762c <I2C_ITError+0x74>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
240076a4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hi2c);
240076a6:	2300      	movs	r3, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
240076a8:	4923      	ldr	r1, [pc, #140]	; (24007738 <I2C_ITError+0x180>)
240076aa:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
240076ac:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
240076b0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
240076b2:	f7fe fc73 	bl	24005f9c <HAL_DMA_Abort_IT>
240076b6:	2800      	cmp	r0, #0
240076b8:	d0c4      	beq.n	24007644 <I2C_ITError+0x8c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
240076ba:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
240076bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
240076c0:	6d03      	ldr	r3, [r0, #80]	; 0x50
240076c2:	4718      	bx	r3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240076c4:	6802      	ldr	r2, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240076c6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240076ca:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240076ce:	6813      	ldr	r3, [r2, #0]
240076d0:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
240076d4:	6013      	str	r3, [r2, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
240076d6:	6803      	ldr	r3, [r0, #0]
240076d8:	699a      	ldr	r2, [r3, #24]
240076da:	0792      	lsls	r2, r2, #30
240076dc:	d501      	bpl.n	240076e2 <I2C_ITError+0x12a>
    hi2c->Instance->TXDR = 0x00U;
240076de:	629d      	str	r5, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
240076e0:	6803      	ldr	r3, [r0, #0]
240076e2:	699a      	ldr	r2, [r3, #24]
240076e4:	07d6      	lsls	r6, r2, #31
240076e6:	d403      	bmi.n	240076f0 <I2C_ITError+0x138>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
240076e8:	699a      	ldr	r2, [r3, #24]
240076ea:	f042 0201 	orr.w	r2, r2, #1
240076ee:	619a      	str	r2, [r3, #24]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
240076f0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
240076f4:	2b60      	cmp	r3, #96	; 0x60
240076f6:	d012      	beq.n	2400771e <I2C_ITError+0x166>
      hi2c->State         = HAL_I2C_STATE_READY;
240076f8:	2220      	movs	r2, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
240076fa:	6823      	ldr	r3, [r4, #0]
      hi2c->State         = HAL_I2C_STATE_READY;
240076fc:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
24007700:	699a      	ldr	r2, [r3, #24]
24007702:	0695      	lsls	r5, r2, #26
24007704:	d50b      	bpl.n	2400771e <I2C_ITError+0x166>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
24007706:	699a      	ldr	r2, [r3, #24]
24007708:	06d0      	lsls	r0, r2, #27
2400770a:	d506      	bpl.n	2400771a <I2C_ITError+0x162>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400770c:	2210      	movs	r2, #16
2400770e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24007710:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24007712:	6823      	ldr	r3, [r4, #0]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24007714:	f042 0204 	orr.w	r2, r2, #4
24007718:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400771a:	2220      	movs	r2, #32
2400771c:	61da      	str	r2, [r3, #28]
    hi2c->XferISR       = NULL;
2400771e:	2200      	movs	r2, #0
24007720:	e776      	b.n	24007610 <I2C_ITError+0x58>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
24007722:	681a      	ldr	r2, [r3, #0]
24007724:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
24007728:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
2400772a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
2400772c:	e799      	b.n	24007662 <I2C_ITError+0xaa>
2400772e:	bf00      	nop
24007730:	ffff0000 	.word	0xffff0000
24007734:	24007935 	.word	0x24007935
24007738:	24007579 	.word	0x24007579

2400773c <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
2400773c:	6803      	ldr	r3, [r0, #0]
{
2400773e:	b410      	push	{r4}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
24007740:	699a      	ldr	r2, [r3, #24]
24007742:	461c      	mov	r4, r3
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
24007744:	6819      	ldr	r1, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
24007746:	f412 7f80 	tst.w	r2, #256	; 0x100
2400774a:	d032      	beq.n	240077b2 <HAL_I2C_ER_IRQHandler+0x76>
2400774c:	f011 0f80 	tst.w	r1, #128	; 0x80
24007750:	d021      	beq.n	24007796 <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
24007752:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24007754:	f44f 7480 	mov.w	r4, #256	; 0x100
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
24007758:	f041 0101 	orr.w	r1, r1, #1
2400775c:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
2400775e:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
24007760:	0553      	lsls	r3, r2, #21
24007762:	d507      	bpl.n	24007774 <HAL_I2C_ER_IRQHandler+0x38>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24007764:	6803      	ldr	r3, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
24007766:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24007768:	f44f 6480 	mov.w	r4, #1024	; 0x400
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
2400776c:	f041 0108 	orr.w	r1, r1, #8
24007770:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24007772:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
24007774:	0592      	lsls	r2, r2, #22
24007776:	d507      	bpl.n	24007788 <HAL_I2C_ER_IRQHandler+0x4c>
24007778:	6804      	ldr	r4, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
2400777a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
2400777c:	f44f 7200 	mov.w	r2, #512	; 0x200
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
24007780:	f043 0302 	orr.w	r3, r3, #2
24007784:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24007786:	61e2      	str	r2, [r4, #28]
  tmperror = hi2c->ErrorCode;
24007788:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
2400778a:	f011 0f0b 	tst.w	r1, #11
2400778e:	d10c      	bne.n	240077aa <HAL_I2C_ER_IRQHandler+0x6e>
}
24007790:	f85d 4b04 	ldr.w	r4, [sp], #4
24007794:	4770      	bx	lr
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
24007796:	0553      	lsls	r3, r2, #21
24007798:	d4f6      	bmi.n	24007788 <HAL_I2C_ER_IRQHandler+0x4c>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
2400779a:	0593      	lsls	r3, r2, #22
2400779c:	d5f4      	bpl.n	24007788 <HAL_I2C_ER_IRQHandler+0x4c>
2400779e:	060a      	lsls	r2, r1, #24
240077a0:	d4eb      	bmi.n	2400777a <HAL_I2C_ER_IRQHandler+0x3e>
  tmperror = hi2c->ErrorCode;
240077a2:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
240077a4:	f011 0f0b 	tst.w	r1, #11
240077a8:	d0f2      	beq.n	24007790 <HAL_I2C_ER_IRQHandler+0x54>
}
240077aa:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
240077ae:	f7ff bf03 	b.w	240075b8 <I2C_ITError>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
240077b2:	f412 6f80 	tst.w	r2, #1024	; 0x400
240077b6:	d0f0      	beq.n	2400779a <HAL_I2C_ER_IRQHandler+0x5e>
240077b8:	0609      	lsls	r1, r1, #24
240077ba:	d5e5      	bpl.n	24007788 <HAL_I2C_ER_IRQHandler+0x4c>
240077bc:	e7d3      	b.n	24007766 <HAL_I2C_ER_IRQHandler+0x2a>
240077be:	bf00      	nop

240077c0 <I2C_ITSlaveCplt.constprop.0>:
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
240077c0:	b570      	push	{r4, r5, r6, lr}
240077c2:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
240077c4:	6802      	ldr	r2, [r0, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
240077c6:	2520      	movs	r5, #32
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
240077c8:	6810      	ldr	r0, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
240077ca:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
240077ce:	61d5      	str	r5, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
240077d0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
240077d4:	2b21      	cmp	r3, #33	; 0x21
240077d6:	d16d      	bne.n	240078b4 <I2C_ITSlaveCplt.constprop.0+0xf4>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240077d8:	6825      	ldr	r5, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240077da:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240077de:	682a      	ldr	r2, [r5, #0]
240077e0:	f022 02fa 	bic.w	r2, r2, #250	; 0xfa
240077e4:	602a      	str	r2, [r5, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
240077e6:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
240077e8:	6822      	ldr	r2, [r4, #0]
  I2C_RESET_CR2(hi2c);
240077ea:	4d50      	ldr	r5, [pc, #320]	; (2400792c <I2C_ITSlaveCplt.constprop.0+0x16c>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
240077ec:	6853      	ldr	r3, [r2, #4]
240077ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
240077f2:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
240077f4:	6822      	ldr	r2, [r4, #0]
240077f6:	6853      	ldr	r3, [r2, #4]
240077f8:	402b      	ands	r3, r5
240077fa:	6053      	str	r3, [r2, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
240077fc:	6823      	ldr	r3, [r4, #0]
240077fe:	699a      	ldr	r2, [r3, #24]
24007800:	0792      	lsls	r2, r2, #30
24007802:	d502      	bpl.n	2400780a <I2C_ITSlaveCplt.constprop.0+0x4a>
    hi2c->Instance->TXDR = 0x00U;
24007804:	2200      	movs	r2, #0
24007806:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
24007808:	6823      	ldr	r3, [r4, #0]
2400780a:	699a      	ldr	r2, [r3, #24]
2400780c:	07d6      	lsls	r6, r2, #31
2400780e:	d403      	bmi.n	24007818 <I2C_ITSlaveCplt.constprop.0+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
24007810:	699a      	ldr	r2, [r3, #24]
24007812:	f042 0201 	orr.w	r2, r2, #1
24007816:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
24007818:	0445      	lsls	r5, r0, #17
2400781a:	d556      	bpl.n	240078ca <I2C_ITSlaveCplt.constprop.0+0x10a>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400781c:	6822      	ldr	r2, [r4, #0]
2400781e:	6813      	ldr	r3, [r2, #0]
24007820:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
24007824:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
24007826:	6ba3      	ldr	r3, [r4, #56]	; 0x38
24007828:	b11b      	cbz	r3, 24007832 <I2C_ITSlaveCplt.constprop.0+0x72>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
2400782a:	681a      	ldr	r2, [r3, #0]
2400782c:	6853      	ldr	r3, [r2, #4]
2400782e:	b29b      	uxth	r3, r3
24007830:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
24007832:	074b      	lsls	r3, r1, #29
24007834:	d508      	bpl.n	24007848 <I2C_ITSlaveCplt.constprop.0+0x88>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
24007836:	6822      	ldr	r2, [r4, #0]
24007838:	6a63      	ldr	r3, [r4, #36]	; 0x24
2400783a:	6a52      	ldr	r2, [r2, #36]	; 0x24
2400783c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
2400783e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24007840:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
24007842:	3301      	adds	r3, #1
24007844:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24007846:	bb72      	cbnz	r2, 240078a6 <I2C_ITSlaveCplt.constprop.0+0xe6>
  if (hi2c->XferCount != 0U)
24007848:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
2400784a:	b29b      	uxth	r3, r3
2400784c:	b11b      	cbz	r3, 24007856 <I2C_ITSlaveCplt.constprop.0+0x96>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400784e:	6c63      	ldr	r3, [r4, #68]	; 0x44
24007850:	f043 0304 	orr.w	r3, r3, #4
24007854:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
24007856:	2600      	movs	r6, #0
24007858:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
2400785c:	6c65      	ldr	r5, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
2400785e:	6366      	str	r6, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
24007860:	2d00      	cmp	r5, #0
24007862:	d13d      	bne.n	240078e0 <I2C_ITSlaveCplt.constprop.0+0x120>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
24007864:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24007866:	4e32      	ldr	r6, [pc, #200]	; (24007930 <I2C_ITSlaveCplt.constprop.0+0x170>)
24007868:	42b3      	cmp	r3, r6
2400786a:	d10e      	bne.n	2400788a <I2C_ITSlaveCplt.constprop.0+0xca>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400786c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
24007870:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
24007872:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
24007876:	2b22      	cmp	r3, #34	; 0x22
    hi2c->State = HAL_I2C_STATE_READY;
24007878:	f04f 0320 	mov.w	r3, #32
2400787c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
24007880:	6325      	str	r5, [r4, #48]	; 0x30
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
24007882:	d050      	beq.n	24007926 <I2C_ITSlaveCplt.constprop.0+0x166>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
24007884:	f7ff fdea 	bl	2400745c <HAL_I2C_SlaveTxCpltCallback>
}
24007888:	bd70      	pop	{r4, r5, r6, pc}
    I2C_ITSlaveSeqCplt(hi2c);
2400788a:	4620      	mov	r0, r4
2400788c:	f7ff fde8 	bl	24007460 <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
24007890:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24007892:	62e6      	str	r6, [r4, #44]	; 0x2c
    HAL_I2C_ListenCpltCallback(hi2c);
24007894:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
24007896:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
2400789a:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
2400789e:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
240078a0:	f7ff fe66 	bl	24007570 <HAL_I2C_ListenCpltCallback>
}
240078a4:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->XferCount--;
240078a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
240078a8:	3a01      	subs	r2, #1
      hi2c->XferCount--;
240078aa:	3b01      	subs	r3, #1
      hi2c->XferSize--;
240078ac:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
240078ae:	b29b      	uxth	r3, r3
240078b0:	8563      	strh	r3, [r4, #42]	; 0x2a
240078b2:	e7c9      	b.n	24007848 <I2C_ITSlaveCplt.constprop.0+0x88>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
240078b4:	2b22      	cmp	r3, #34	; 0x22
240078b6:	d197      	bne.n	240077e8 <I2C_ITSlaveCplt.constprop.0+0x28>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240078b8:	6825      	ldr	r5, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240078ba:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240078be:	682a      	ldr	r2, [r5, #0]
240078c0:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
240078c4:	602a      	str	r2, [r5, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
240078c6:	6323      	str	r3, [r4, #48]	; 0x30
240078c8:	e78e      	b.n	240077e8 <I2C_ITSlaveCplt.constprop.0+0x28>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
240078ca:	0402      	lsls	r2, r0, #16
240078cc:	d5b1      	bpl.n	24007832 <I2C_ITSlaveCplt.constprop.0+0x72>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
240078ce:	6822      	ldr	r2, [r4, #0]
240078d0:	6813      	ldr	r3, [r2, #0]
240078d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
240078d6:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
240078d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
240078da:	2b00      	cmp	r3, #0
240078dc:	d1a5      	bne.n	2400782a <I2C_ITSlaveCplt.constprop.0+0x6a>
240078de:	e7a8      	b.n	24007832 <I2C_ITSlaveCplt.constprop.0+0x72>
    I2C_ITError(hi2c, hi2c->ErrorCode);
240078e0:	6c61      	ldr	r1, [r4, #68]	; 0x44
240078e2:	4620      	mov	r0, r4
240078e4:	f7ff fe68 	bl	240075b8 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
240078e8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
240078ec:	2b28      	cmp	r3, #40	; 0x28
240078ee:	d1cb      	bne.n	24007888 <I2C_ITSlaveCplt.constprop.0+0xc8>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240078f0:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_READY;
240078f2:	2320      	movs	r3, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
240078f4:	490e      	ldr	r1, [pc, #56]	; (24007930 <I2C_ITSlaveCplt.constprop.0+0x170>)
  HAL_I2C_ListenCpltCallback(hi2c);
240078f6:	4620      	mov	r0, r4
  hi2c->XferISR = NULL;
240078f8:	6366      	str	r6, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
240078fa:	62e1      	str	r1, [r4, #44]	; 0x2c
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
240078fc:	2110      	movs	r1, #16
  hi2c->PreviousState = I2C_STATE_NONE;
240078fe:	6326      	str	r6, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
24007900:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
24007904:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24007908:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2400790c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24007910:	6813      	ldr	r3, [r2, #0]
24007912:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
24007916:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24007918:	6823      	ldr	r3, [r4, #0]
2400791a:	61d9      	str	r1, [r3, #28]
  __HAL_UNLOCK(hi2c);
2400791c:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
24007920:	f7ff fe26 	bl	24007570 <HAL_I2C_ListenCpltCallback>
}
24007924:	bd70      	pop	{r4, r5, r6, pc}
    HAL_I2C_SlaveRxCpltCallback(hi2c);
24007926:	f02b ffcb 	bl	240338c0 <__HAL_I2C_SlaveRxCpltCallback_veneer>
}
2400792a:	bd70      	pop	{r4, r5, r6, pc}
2400792c:	fe00e800 	.word	0xfe00e800
24007930:	ffff0000 	.word	0xffff0000

24007934 <I2C_Slave_ISR_IT>:
{
24007934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
24007936:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
2400793a:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
2400793c:	2b01      	cmp	r3, #1
2400793e:	f000 8081 	beq.w	24007a44 <I2C_Slave_ISR_IT+0x110>
24007942:	4617      	mov	r7, r2
24007944:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
24007946:	068a      	lsls	r2, r1, #26
24007948:	4604      	mov	r4, r0
2400794a:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
2400794c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
24007950:	d501      	bpl.n	24007956 <I2C_Slave_ISR_IT+0x22>
24007952:	06bb      	lsls	r3, r7, #26
24007954:	d462      	bmi.n	24007a1c <I2C_Slave_ISR_IT+0xe8>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
24007956:	06ea      	lsls	r2, r5, #27
24007958:	d51c      	bpl.n	24007994 <I2C_Slave_ISR_IT+0x60>
2400795a:	06fb      	lsls	r3, r7, #27
2400795c:	d51a      	bpl.n	24007994 <I2C_Slave_ISR_IT+0x60>
    if (hi2c->XferCount == 0U)
2400795e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24007960:	b29b      	uxth	r3, r3
24007962:	2b00      	cmp	r3, #0
24007964:	d15f      	bne.n	24007a26 <I2C_Slave_ISR_IT+0xf2>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
24007966:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
2400796a:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
2400796e:	b2d2      	uxtb	r2, r2
24007970:	d101      	bne.n	24007976 <I2C_Slave_ISR_IT+0x42>
24007972:	2a28      	cmp	r2, #40	; 0x28
24007974:	d07f      	beq.n	24007a76 <I2C_Slave_ISR_IT+0x142>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
24007976:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400797a:	2210      	movs	r2, #16
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
2400797c:	2b29      	cmp	r3, #41	; 0x29
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400797e:	6823      	ldr	r3, [r4, #0]
24007980:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
24007982:	d102      	bne.n	2400798a <I2C_Slave_ISR_IT+0x56>
24007984:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
24007988:	d162      	bne.n	24007a50 <I2C_Slave_ISR_IT+0x11c>
  __HAL_UNLOCK(hi2c);
2400798a:	2300      	movs	r3, #0
  return HAL_OK;
2400798c:	4618      	mov	r0, r3
  __HAL_UNLOCK(hi2c);
2400798e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
24007992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
24007994:	076a      	lsls	r2, r5, #29
24007996:	d40d      	bmi.n	240079b4 <I2C_Slave_ISR_IT+0x80>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
24007998:	0728      	lsls	r0, r5, #28
2400799a:	d529      	bpl.n	240079f0 <I2C_Slave_ISR_IT+0xbc>
2400799c:	0739      	lsls	r1, r7, #28
2400799e:	d527      	bpl.n	240079f0 <I2C_Slave_ISR_IT+0xbc>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
240079a0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
240079a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
240079a8:	2b28      	cmp	r3, #40	; 0x28
240079aa:	d060      	beq.n	24007a6e <I2C_Slave_ISR_IT+0x13a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
240079ac:	6823      	ldr	r3, [r4, #0]
240079ae:	2208      	movs	r2, #8
240079b0:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
240079b2:	e7ea      	b.n	2400798a <I2C_Slave_ISR_IT+0x56>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
240079b4:	077b      	lsls	r3, r7, #29
240079b6:	d5ef      	bpl.n	24007998 <I2C_Slave_ISR_IT+0x64>
    if (hi2c->XferCount > 0U)
240079b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
240079ba:	b29b      	uxth	r3, r3
240079bc:	b16b      	cbz	r3, 240079da <I2C_Slave_ISR_IT+0xa6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
240079be:	6822      	ldr	r2, [r4, #0]
240079c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
240079c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
240079c4:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
240079c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
240079c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
240079ca:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
240079cc:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
240079ce:	3101      	adds	r1, #1
      hi2c->XferSize--;
240079d0:	3a01      	subs	r2, #1
      hi2c->XferCount--;
240079d2:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
240079d4:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
240079d6:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
240079d8:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
240079da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
240079dc:	b29b      	uxth	r3, r3
240079de:	2b00      	cmp	r3, #0
240079e0:	d1d3      	bne.n	2400798a <I2C_Slave_ISR_IT+0x56>
240079e2:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
240079e6:	d0d0      	beq.n	2400798a <I2C_Slave_ISR_IT+0x56>
        I2C_ITSlaveSeqCplt(hi2c);
240079e8:	4620      	mov	r0, r4
240079ea:	f7ff fd39 	bl	24007460 <I2C_ITSlaveSeqCplt>
240079ee:	e7cc      	b.n	2400798a <I2C_Slave_ISR_IT+0x56>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
240079f0:	07aa      	lsls	r2, r5, #30
240079f2:	d5ca      	bpl.n	2400798a <I2C_Slave_ISR_IT+0x56>
240079f4:	07bb      	lsls	r3, r7, #30
240079f6:	d5c8      	bpl.n	2400798a <I2C_Slave_ISR_IT+0x56>
    if (hi2c->XferCount > 0U)
240079f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
240079fa:	b29b      	uxth	r3, r3
240079fc:	b323      	cbz	r3, 24007a48 <I2C_Slave_ISR_IT+0x114>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
240079fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
24007a00:	6823      	ldr	r3, [r4, #0]
24007a02:	7812      	ldrb	r2, [r2, #0]
24007a04:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
24007a06:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
24007a08:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
24007a0a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24007a0c:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
24007a0e:	3101      	adds	r1, #1
      hi2c->XferSize--;
24007a10:	3a01      	subs	r2, #1
      hi2c->XferCount--;
24007a12:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
24007a14:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
24007a16:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24007a18:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
24007a1a:	e7b6      	b.n	2400798a <I2C_Slave_ISR_IT+0x56>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
24007a1c:	f7ff fed0 	bl	240077c0 <I2C_ITSlaveCplt.constprop.0>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
24007a20:	06ea      	lsls	r2, r5, #27
24007a22:	d5b7      	bpl.n	24007994 <I2C_Slave_ISR_IT+0x60>
24007a24:	e799      	b.n	2400795a <I2C_Slave_ISR_IT+0x26>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24007a26:	6823      	ldr	r3, [r4, #0]
24007a28:	2210      	movs	r2, #16
24007a2a:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24007a2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
24007a2e:	f043 0304 	orr.w	r3, r3, #4
24007a32:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
24007a34:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
24007a38:	d1a7      	bne.n	2400798a <I2C_Slave_ISR_IT+0x56>
        I2C_ITError(hi2c, hi2c->ErrorCode);
24007a3a:	6c61      	ldr	r1, [r4, #68]	; 0x44
24007a3c:	4620      	mov	r0, r4
24007a3e:	f7ff fdbb 	bl	240075b8 <I2C_ITError>
24007a42:	e7a2      	b.n	2400798a <I2C_Slave_ISR_IT+0x56>
  __HAL_LOCK(hi2c);
24007a44:	2002      	movs	r0, #2
}
24007a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
24007a48:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
24007a4c:	d19d      	bne.n	2400798a <I2C_Slave_ISR_IT+0x56>
24007a4e:	e7cb      	b.n	240079e8 <I2C_Slave_ISR_IT+0xb4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24007a50:	6823      	ldr	r3, [r4, #0]
24007a52:	699a      	ldr	r2, [r3, #24]
24007a54:	0790      	lsls	r0, r2, #30
24007a56:	d502      	bpl.n	24007a5e <I2C_Slave_ISR_IT+0x12a>
    hi2c->Instance->TXDR = 0x00U;
24007a58:	2200      	movs	r2, #0
24007a5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
24007a5c:	6823      	ldr	r3, [r4, #0]
24007a5e:	699a      	ldr	r2, [r3, #24]
24007a60:	07d1      	lsls	r1, r2, #31
24007a62:	d4c1      	bmi.n	240079e8 <I2C_Slave_ISR_IT+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
24007a64:	699a      	ldr	r2, [r3, #24]
24007a66:	f042 0201 	orr.w	r2, r2, #1
24007a6a:	619a      	str	r2, [r3, #24]
24007a6c:	e7bc      	b.n	240079e8 <I2C_Slave_ISR_IT+0xb4>
24007a6e:	4620      	mov	r0, r4
24007a70:	f7ff fd4c 	bl	2400750c <I2C_ITAddrCplt.part.0>
24007a74:	e789      	b.n	2400798a <I2C_Slave_ISR_IT+0x56>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24007a76:	4918      	ldr	r1, [pc, #96]	; (24007ad8 <I2C_Slave_ISR_IT+0x1a4>)
  hi2c->State = HAL_I2C_STATE_READY;
24007a78:	2220      	movs	r2, #32
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
24007a7a:	076d      	lsls	r5, r5, #29
  hi2c->XferISR = NULL;
24007a7c:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24007a7e:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
24007a80:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
24007a82:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
24007a86:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
24007a8a:	d512      	bpl.n	24007ab2 <I2C_Slave_ISR_IT+0x17e>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
24007a8c:	6822      	ldr	r2, [r4, #0]
24007a8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
24007a90:	6a52      	ldr	r2, [r2, #36]	; 0x24
24007a92:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
24007a94:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24007a96:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
24007a98:	3301      	adds	r3, #1
24007a9a:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24007a9c:	b14a      	cbz	r2, 24007ab2 <I2C_Slave_ISR_IT+0x17e>
      hi2c->XferCount--;
24007a9e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
24007aa0:	3a01      	subs	r2, #1
      hi2c->XferCount--;
24007aa2:	3b01      	subs	r3, #1
      hi2c->XferSize--;
24007aa4:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24007aa6:	b29b      	uxth	r3, r3
24007aa8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24007aaa:	6c63      	ldr	r3, [r4, #68]	; 0x44
24007aac:	f043 0304 	orr.w	r3, r3, #4
24007ab0:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24007ab2:	6822      	ldr	r2, [r4, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24007ab4:	2010      	movs	r0, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24007ab6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
24007aba:	2100      	movs	r1, #0
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24007abc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24007ac0:	6813      	ldr	r3, [r2, #0]
24007ac2:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
24007ac6:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24007ac8:	6823      	ldr	r3, [r4, #0]
24007aca:	61d8      	str	r0, [r3, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
24007acc:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
24007ace:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
24007ad2:	f7ff fd4d 	bl	24007570 <HAL_I2C_ListenCpltCallback>
}
24007ad6:	e758      	b.n	2400798a <I2C_Slave_ISR_IT+0x56>
24007ad8:	ffff0000 	.word	0xffff0000

24007adc <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
24007adc:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
24007ae0:	2a20      	cmp	r2, #32
24007ae2:	d129      	bne.n	24007b38 <HAL_I2CEx_ConfigAnalogFilter+0x5c>
24007ae4:	4603      	mov	r3, r0
{
24007ae6:	b500      	push	{lr}
24007ae8:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
24007aec:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
24007af0:	2a01      	cmp	r2, #1
24007af2:	d023      	beq.n	24007b3c <HAL_I2CEx_ConfigAnalogFilter+0x60>
24007af4:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
24007af6:	6800      	ldr	r0, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
24007af8:	f04f 0c00 	mov.w	ip, #0
    __HAL_LOCK(hi2c);
24007afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
24007b00:	2224      	movs	r2, #36	; 0x24
24007b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
24007b06:	6802      	ldr	r2, [r0, #0]
24007b08:	f022 0201 	bic.w	r2, r2, #1
24007b0c:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
24007b0e:	6818      	ldr	r0, [r3, #0]
24007b10:	6802      	ldr	r2, [r0, #0]
24007b12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
24007b16:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
24007b18:	6818      	ldr	r0, [r3, #0]
24007b1a:	6802      	ldr	r2, [r0, #0]
24007b1c:	4311      	orrs	r1, r2
24007b1e:	6001      	str	r1, [r0, #0]

    return HAL_OK;
24007b20:	4660      	mov	r0, ip
    __HAL_I2C_ENABLE(hi2c);
24007b22:	6819      	ldr	r1, [r3, #0]
24007b24:	680a      	ldr	r2, [r1, #0]
24007b26:	f042 0201 	orr.w	r2, r2, #1
24007b2a:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
24007b2c:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
24007b30:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
24007b34:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
24007b38:	2002      	movs	r0, #2
}
24007b3a:	4770      	bx	lr
    return HAL_BUSY;
24007b3c:	2002      	movs	r0, #2
}
24007b3e:	f85d fb04 	ldr.w	pc, [sp], #4
24007b42:	bf00      	nop

24007b44 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
24007b44:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
{
24007b48:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
24007b4a:	2a20      	cmp	r2, #32
24007b4c:	fa5f fc82 	uxtb.w	ip, r2
24007b50:	d121      	bne.n	24007b96 <HAL_I2CEx_ConfigDigitalFilter+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
24007b52:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
24007b56:	2a01      	cmp	r2, #1
24007b58:	d01d      	beq.n	24007b96 <HAL_I2CEx_ConfigDigitalFilter+0x52>
24007b5a:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
24007b5c:	6800      	ldr	r0, [r0, #0]
    __HAL_LOCK(hi2c);
24007b5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
24007b62:	2224      	movs	r2, #36	; 0x24
24007b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
24007b68:	6802      	ldr	r2, [r0, #0]
24007b6a:	f022 0201 	bic.w	r2, r2, #1
24007b6e:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
24007b70:	6818      	ldr	r0, [r3, #0]
24007b72:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
24007b74:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
24007b78:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
24007b7c:	2100      	movs	r1, #0
    hi2c->Instance->CR1 = tmpreg;
24007b7e:	6002      	str	r2, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);
24007b80:	6818      	ldr	r0, [r3, #0]
24007b82:	6802      	ldr	r2, [r0, #0]
24007b84:	f042 0201 	orr.w	r2, r2, #1
24007b88:	6002      	str	r2, [r0, #0]

    return HAL_OK;
24007b8a:	4608      	mov	r0, r1
    hi2c->State = HAL_I2C_STATE_READY;
24007b8c:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
24007b90:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    return HAL_OK;
24007b94:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
24007b96:	2002      	movs	r0, #2
  }
}
24007b98:	4770      	bx	lr
24007b9a:	bf00      	nop

24007b9c <HAL_I2CEx_EnableFastModePlus>:
{
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
24007b9c:	4b09      	ldr	r3, [pc, #36]	; (24007bc4 <HAL_I2CEx_EnableFastModePlus+0x28>)
{
24007b9e:	b082      	sub	sp, #8

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
24007ba0:	4909      	ldr	r1, [pc, #36]	; (24007bc8 <HAL_I2CEx_EnableFastModePlus+0x2c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
24007ba2:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
24007ba6:	f042 0202 	orr.w	r2, r2, #2
24007baa:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
24007bae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
24007bb2:	f003 0302 	and.w	r3, r3, #2
24007bb6:	9301      	str	r3, [sp, #4]
24007bb8:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
24007bba:	684b      	ldr	r3, [r1, #4]
24007bbc:	4318      	orrs	r0, r3
24007bbe:	6048      	str	r0, [r1, #4]
}
24007bc0:	b002      	add	sp, #8
24007bc2:	4770      	bx	lr
24007bc4:	58024400 	.word	0x58024400
24007bc8:	58000400 	.word	0x58000400

24007bcc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
24007bcc:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
24007bce:	4c10      	ldr	r4, [pc, #64]	; (24007c10 <HAL_PWREx_ConfigSupply+0x44>)
24007bd0:	68e3      	ldr	r3, [r4, #12]
24007bd2:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
24007bd6:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
24007bd8:	d105      	bne.n	24007be6 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
24007bda:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
24007bde:	1a18      	subs	r0, r3, r0
24007be0:	bf18      	it	ne
24007be2:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
24007be4:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
24007be6:	f023 0307 	bic.w	r3, r3, #7
24007bea:	4303      	orrs	r3, r0
24007bec:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
24007bee:	f7fd f8d7 	bl	24004da0 <HAL_GetTick>
24007bf2:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24007bf4:	e005      	b.n	24007c02 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
24007bf6:	f7fd f8d3 	bl	24004da0 <HAL_GetTick>
24007bfa:	1b40      	subs	r0, r0, r5
24007bfc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
24007c00:	d804      	bhi.n	24007c0c <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24007c02:	6863      	ldr	r3, [r4, #4]
24007c04:	049b      	lsls	r3, r3, #18
24007c06:	d5f6      	bpl.n	24007bf6 <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
24007c08:	2000      	movs	r0, #0
}
24007c0a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
24007c0c:	2001      	movs	r0, #1
}
24007c0e:	bd38      	pop	{r3, r4, r5, pc}
24007c10:	58024800 	.word	0x58024800

24007c14 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24007c14:	4b3c      	ldr	r3, [pc, #240]	; (24007d08 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
uint32_t HAL_RCC_GetSysClockFreq(void)
24007c16:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24007c18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
24007c1a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
24007c1c:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
24007c1e:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24007c22:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
24007c24:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
24007c28:	d038      	beq.n	24007c9c <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24007c2a:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
24007c2e:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24007c32:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24007c36:	fb05 f101 	mul.w	r1, r5, r1
24007c3a:	2a01      	cmp	r2, #1
24007c3c:	ee07 1a90 	vmov	s15, r1
24007c40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
24007c44:	d002      	beq.n	24007c4c <HAL_RCC_GetSysClockFreq.part.0+0x38>
24007c46:	2a02      	cmp	r2, #2
24007c48:	d050      	beq.n	24007cec <HAL_RCC_GetSysClockFreq.part.0+0xd8>
24007c4a:	b34a      	cbz	r2, 24007ca0 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007c4c:	ee07 0a90 	vmov	s15, r0
24007c50:	ed9f 5a2e 	vldr	s10, [pc, #184]	; 24007d0c <HAL_RCC_GetSysClockFreq.part.0+0xf8>
24007c54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24007c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24007c5a:	eec5 6a27 	vdiv.f32	s13, s10, s15
24007c5e:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 24007d10 <HAL_RCC_GetSysClockFreq.part.0+0xfc>
24007c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
24007c66:	ee07 3a90 	vmov	s15, r3
24007c6a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24007c6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24007c72:	ee77 7aa5 	vadd.f32	s15, s15, s11
24007c76:	eee7 7a06 	vfma.f32	s15, s14, s12
24007c7a:	ee66 6aa7 	vmul.f32	s13, s13, s15
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
24007c7e:	4b22      	ldr	r3, [pc, #136]	; (24007d08 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
24007c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24007c82:	f3c3 2346 	ubfx	r3, r3, #9, #7
24007c86:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
24007c88:	ee07 3a90 	vmov	s15, r3
24007c8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
24007c90:	eec6 7a87 	vdiv.f32	s15, s13, s14
24007c94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24007c98:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
24007c9c:	bc30      	pop	{r4, r5}
24007c9e:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24007ca0:	681a      	ldr	r2, [r3, #0]
24007ca2:	0692      	lsls	r2, r2, #26
24007ca4:	d529      	bpl.n	24007cfa <HAL_RCC_GetSysClockFreq.part.0+0xe6>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007ca6:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007ca8:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007cac:	4a19      	ldr	r2, [pc, #100]	; (24007d14 <HAL_RCC_GetSysClockFreq.part.0+0x100>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007cae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24007cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007cb4:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24007cbc:	ed9f 5a14 	vldr	s10, [pc, #80]	; 24007d10 <HAL_RCC_GetSysClockFreq.part.0+0xfc>
24007cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007cc4:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007cc6:	ee06 3a10 	vmov	s12, r3
24007cca:	ee05 2a90 	vmov	s11, r2
24007cce:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
24007cd2:	eef8 5ae5 	vcvt.f32.s32	s11, s11
24007cd6:	ee36 6a26 	vadd.f32	s12, s12, s13
24007cda:	eec5 6aa7 	vdiv.f32	s13, s11, s15
24007cde:	eef0 7a46 	vmov.f32	s15, s12
24007ce2:	eee7 7a05 	vfma.f32	s15, s14, s10
24007ce6:	ee66 6aa7 	vmul.f32	s13, s13, s15
24007cea:	e7c8      	b.n	24007c7e <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007cec:	ee07 0a90 	vmov	s15, r0
24007cf0:	ed9f 5a09 	vldr	s10, [pc, #36]	; 24007d18 <HAL_RCC_GetSysClockFreq.part.0+0x104>
24007cf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24007cf8:	e7ae      	b.n	24007c58 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007cfa:	ee07 0a90 	vmov	s15, r0
24007cfe:	ed9f 5a07 	vldr	s10, [pc, #28]	; 24007d1c <HAL_RCC_GetSysClockFreq.part.0+0x108>
24007d02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24007d06:	e7a7      	b.n	24007c58 <HAL_RCC_GetSysClockFreq.part.0+0x44>
24007d08:	58024400 	.word	0x58024400
24007d0c:	4a742400 	.word	0x4a742400
24007d10:	39000000 	.word	0x39000000
24007d14:	03d09000 	.word	0x03d09000
24007d18:	4b742400 	.word	0x4b742400
24007d1c:	4c742400 	.word	0x4c742400

24007d20 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
24007d20:	2800      	cmp	r0, #0
24007d22:	f000 81ef 	beq.w	24008104 <HAL_RCC_OscConfig+0x3e4>
{
24007d26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
24007d28:	6803      	ldr	r3, [r0, #0]
24007d2a:	4604      	mov	r4, r0
24007d2c:	07d9      	lsls	r1, r3, #31
24007d2e:	d52e      	bpl.n	24007d8e <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24007d30:	49a4      	ldr	r1, [pc, #656]	; (24007fc4 <HAL_RCC_OscConfig+0x2a4>)
24007d32:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24007d34:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24007d36:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
24007d3a:	2a10      	cmp	r2, #16
24007d3c:	f000 8107 	beq.w	24007f4e <HAL_RCC_OscConfig+0x22e>
24007d40:	2a18      	cmp	r2, #24
24007d42:	f000 80ff 	beq.w	24007f44 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
24007d46:	6863      	ldr	r3, [r4, #4]
24007d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24007d4c:	f000 812a 	beq.w	24007fa4 <HAL_RCC_OscConfig+0x284>
24007d50:	2b00      	cmp	r3, #0
24007d52:	f040 8188 	bne.w	24008066 <HAL_RCC_OscConfig+0x346>
24007d56:	4b9b      	ldr	r3, [pc, #620]	; (24007fc4 <HAL_RCC_OscConfig+0x2a4>)
24007d58:	681a      	ldr	r2, [r3, #0]
24007d5a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
24007d5e:	601a      	str	r2, [r3, #0]
24007d60:	681a      	ldr	r2, [r3, #0]
24007d62:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
24007d66:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
24007d68:	6863      	ldr	r3, [r4, #4]
24007d6a:	2b00      	cmp	r3, #0
24007d6c:	f000 815c 	beq.w	24008028 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
24007d70:	f7fd f816 	bl	24004da0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24007d74:	4e93      	ldr	r6, [pc, #588]	; (24007fc4 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
24007d76:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24007d78:	e005      	b.n	24007d86 <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
24007d7a:	f7fd f811 	bl	24004da0 <HAL_GetTick>
24007d7e:	1b40      	subs	r0, r0, r5
24007d80:	2864      	cmp	r0, #100	; 0x64
24007d82:	f200 814f 	bhi.w	24008024 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24007d86:	6833      	ldr	r3, [r6, #0]
24007d88:	039b      	lsls	r3, r3, #14
24007d8a:	d5f6      	bpl.n	24007d7a <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
24007d8c:	6823      	ldr	r3, [r4, #0]
24007d8e:	079d      	lsls	r5, r3, #30
24007d90:	f100 808a 	bmi.w	24007ea8 <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
24007d94:	06d9      	lsls	r1, r3, #27
24007d96:	d533      	bpl.n	24007e00 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24007d98:	4a8a      	ldr	r2, [pc, #552]	; (24007fc4 <HAL_RCC_OscConfig+0x2a4>)
24007d9a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24007d9c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24007d9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
24007da2:	2b08      	cmp	r3, #8
24007da4:	f000 80e3 	beq.w	24007f6e <HAL_RCC_OscConfig+0x24e>
24007da8:	2b18      	cmp	r3, #24
24007daa:	f000 80db 	beq.w	24007f64 <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
24007dae:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
24007db0:	4d84      	ldr	r5, [pc, #528]	; (24007fc4 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
24007db2:	2b00      	cmp	r3, #0
24007db4:	f000 8176 	beq.w	240080a4 <HAL_RCC_OscConfig+0x384>
        __HAL_RCC_CSI_ENABLE();
24007db8:	682b      	ldr	r3, [r5, #0]
24007dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
24007dbe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24007dc0:	f7fc ffee 	bl	24004da0 <HAL_GetTick>
24007dc4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
24007dc6:	e005      	b.n	24007dd4 <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
24007dc8:	f7fc ffea 	bl	24004da0 <HAL_GetTick>
24007dcc:	1b80      	subs	r0, r0, r6
24007dce:	2802      	cmp	r0, #2
24007dd0:	f200 8128 	bhi.w	24008024 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
24007dd4:	682b      	ldr	r3, [r5, #0]
24007dd6:	05db      	lsls	r3, r3, #23
24007dd8:	d5f6      	bpl.n	24007dc8 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24007dda:	f7fc fff9 	bl	24004dd0 <HAL_GetREVID>
24007dde:	f241 0303 	movw	r3, #4099	; 0x1003
24007de2:	4298      	cmp	r0, r3
24007de4:	f200 8266 	bhi.w	240082b4 <HAL_RCC_OscConfig+0x594>
24007de8:	6a22      	ldr	r2, [r4, #32]
24007dea:	686b      	ldr	r3, [r5, #4]
24007dec:	2a20      	cmp	r2, #32
24007dee:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
24007df2:	bf0c      	ite	eq
24007df4:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
24007df8:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
24007dfc:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24007dfe:	6823      	ldr	r3, [r4, #0]
24007e00:	071d      	lsls	r5, r3, #28
24007e02:	d516      	bpl.n	24007e32 <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
24007e04:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
24007e06:	4d6f      	ldr	r5, [pc, #444]	; (24007fc4 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
24007e08:	2b00      	cmp	r3, #0
24007e0a:	f000 811b 	beq.w	24008044 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_LSI_ENABLE();
24007e0e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
24007e10:	f043 0301 	orr.w	r3, r3, #1
24007e14:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
24007e16:	f7fc ffc3 	bl	24004da0 <HAL_GetTick>
24007e1a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
24007e1c:	e005      	b.n	24007e2a <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
24007e1e:	f7fc ffbf 	bl	24004da0 <HAL_GetTick>
24007e22:	1b80      	subs	r0, r0, r6
24007e24:	2802      	cmp	r0, #2
24007e26:	f200 80fd 	bhi.w	24008024 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
24007e2a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
24007e2c:	0798      	lsls	r0, r3, #30
24007e2e:	d5f6      	bpl.n	24007e1e <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
24007e30:	6823      	ldr	r3, [r4, #0]
24007e32:	069a      	lsls	r2, r3, #26
24007e34:	d516      	bpl.n	24007e64 <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
24007e36:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
24007e38:	4d62      	ldr	r5, [pc, #392]	; (24007fc4 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
24007e3a:	2b00      	cmp	r3, #0
24007e3c:	f000 8121 	beq.w	24008082 <HAL_RCC_OscConfig+0x362>
      __HAL_RCC_HSI48_ENABLE();
24007e40:	682b      	ldr	r3, [r5, #0]
24007e42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
24007e46:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
24007e48:	f7fc ffaa 	bl	24004da0 <HAL_GetTick>
24007e4c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
24007e4e:	e005      	b.n	24007e5c <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
24007e50:	f7fc ffa6 	bl	24004da0 <HAL_GetTick>
24007e54:	1b80      	subs	r0, r0, r6
24007e56:	2802      	cmp	r0, #2
24007e58:	f200 80e4 	bhi.w	24008024 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
24007e5c:	682b      	ldr	r3, [r5, #0]
24007e5e:	049f      	lsls	r7, r3, #18
24007e60:	d5f6      	bpl.n	24007e50 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
24007e62:	6823      	ldr	r3, [r4, #0]
24007e64:	0759      	lsls	r1, r3, #29
24007e66:	f100 80a3 	bmi.w	24007fb0 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
24007e6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
24007e6c:	b1d0      	cbz	r0, 24007ea4 <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
24007e6e:	4d55      	ldr	r5, [pc, #340]	; (24007fc4 <HAL_RCC_OscConfig+0x2a4>)
24007e70:	692b      	ldr	r3, [r5, #16]
24007e72:	f003 0338 	and.w	r3, r3, #56	; 0x38
24007e76:	2b18      	cmp	r3, #24
24007e78:	f000 81b6 	beq.w	240081e8 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_PLL_DISABLE();
24007e7c:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
24007e7e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
24007e80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
24007e84:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
24007e86:	f000 8149 	beq.w	2400811c <HAL_RCC_OscConfig+0x3fc>
        tickstart = HAL_GetTick();
24007e8a:	f7fc ff89 	bl	24004da0 <HAL_GetTick>
24007e8e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24007e90:	e005      	b.n	24007e9e <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24007e92:	f7fc ff85 	bl	24004da0 <HAL_GetTick>
24007e96:	1b00      	subs	r0, r0, r4
24007e98:	2802      	cmp	r0, #2
24007e9a:	f200 80c3 	bhi.w	24008024 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24007e9e:	682b      	ldr	r3, [r5, #0]
24007ea0:	019b      	lsls	r3, r3, #6
24007ea2:	d4f6      	bmi.n	24007e92 <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
24007ea4:	2000      	movs	r0, #0
}
24007ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24007ea8:	4a46      	ldr	r2, [pc, #280]	; (24007fc4 <HAL_RCC_OscConfig+0x2a4>)
24007eaa:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24007eac:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
24007eae:	f013 0338 	ands.w	r3, r3, #56	; 0x38
24007eb2:	d12d      	bne.n	24007f10 <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
24007eb4:	4b43      	ldr	r3, [pc, #268]	; (24007fc4 <HAL_RCC_OscConfig+0x2a4>)
24007eb6:	68e2      	ldr	r2, [r4, #12]
24007eb8:	681b      	ldr	r3, [r3, #0]
24007eba:	0759      	lsls	r1, r3, #29
24007ebc:	d501      	bpl.n	24007ec2 <HAL_RCC_OscConfig+0x1a2>
24007ebe:	2a00      	cmp	r2, #0
24007ec0:	d04e      	beq.n	24007f60 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24007ec2:	4d40      	ldr	r5, [pc, #256]	; (24007fc4 <HAL_RCC_OscConfig+0x2a4>)
24007ec4:	682b      	ldr	r3, [r5, #0]
24007ec6:	f023 0319 	bic.w	r3, r3, #25
24007eca:	4313      	orrs	r3, r2
24007ecc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24007ece:	f7fc ff67 	bl	24004da0 <HAL_GetTick>
24007ed2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24007ed4:	e005      	b.n	24007ee2 <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
24007ed6:	f7fc ff63 	bl	24004da0 <HAL_GetTick>
24007eda:	1b80      	subs	r0, r0, r6
24007edc:	2802      	cmp	r0, #2
24007ede:	f200 80a1 	bhi.w	24008024 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24007ee2:	682b      	ldr	r3, [r5, #0]
24007ee4:	075b      	lsls	r3, r3, #29
24007ee6:	d5f6      	bpl.n	24007ed6 <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
24007ee8:	f7fc ff72 	bl	24004dd0 <HAL_GetREVID>
24007eec:	f241 0303 	movw	r3, #4099	; 0x1003
24007ef0:	4298      	cmp	r0, r3
24007ef2:	f200 80fe 	bhi.w	240080f2 <HAL_RCC_OscConfig+0x3d2>
24007ef6:	6922      	ldr	r2, [r4, #16]
24007ef8:	686b      	ldr	r3, [r5, #4]
24007efa:	2a40      	cmp	r2, #64	; 0x40
24007efc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
24007f00:	bf0c      	ite	eq
24007f02:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
24007f06:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
24007f0a:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
24007f0c:	6823      	ldr	r3, [r4, #0]
24007f0e:	e741      	b.n	24007d94 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
24007f10:	2b18      	cmp	r3, #24
24007f12:	f000 80ea 	beq.w	240080ea <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24007f16:	4d2b      	ldr	r5, [pc, #172]	; (24007fc4 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
24007f18:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24007f1a:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
24007f1c:	2a00      	cmp	r2, #0
24007f1e:	f000 80d3 	beq.w	240080c8 <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24007f22:	f023 0319 	bic.w	r3, r3, #25
24007f26:	4313      	orrs	r3, r2
24007f28:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24007f2a:	f7fc ff39 	bl	24004da0 <HAL_GetTick>
24007f2e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24007f30:	e004      	b.n	24007f3c <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
24007f32:	f7fc ff35 	bl	24004da0 <HAL_GetTick>
24007f36:	1b80      	subs	r0, r0, r6
24007f38:	2802      	cmp	r0, #2
24007f3a:	d873      	bhi.n	24008024 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24007f3c:	682b      	ldr	r3, [r5, #0]
24007f3e:	075f      	lsls	r7, r3, #29
24007f40:	d5f7      	bpl.n	24007f32 <HAL_RCC_OscConfig+0x212>
24007f42:	e7d1      	b.n	24007ee8 <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
24007f44:	f001 0103 	and.w	r1, r1, #3
24007f48:	2902      	cmp	r1, #2
24007f4a:	f47f aefc 	bne.w	24007d46 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
24007f4e:	4a1d      	ldr	r2, [pc, #116]	; (24007fc4 <HAL_RCC_OscConfig+0x2a4>)
24007f50:	6812      	ldr	r2, [r2, #0]
24007f52:	0392      	lsls	r2, r2, #14
24007f54:	f57f af1b 	bpl.w	24007d8e <HAL_RCC_OscConfig+0x6e>
24007f58:	6862      	ldr	r2, [r4, #4]
24007f5a:	2a00      	cmp	r2, #0
24007f5c:	f47f af17 	bne.w	24007d8e <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
24007f60:	2001      	movs	r0, #1
}
24007f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
24007f64:	f002 0203 	and.w	r2, r2, #3
24007f68:	2a01      	cmp	r2, #1
24007f6a:	f47f af20 	bne.w	24007dae <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
24007f6e:	4b15      	ldr	r3, [pc, #84]	; (24007fc4 <HAL_RCC_OscConfig+0x2a4>)
24007f70:	681b      	ldr	r3, [r3, #0]
24007f72:	05da      	lsls	r2, r3, #23
24007f74:	d502      	bpl.n	24007f7c <HAL_RCC_OscConfig+0x25c>
24007f76:	69e3      	ldr	r3, [r4, #28]
24007f78:	2b80      	cmp	r3, #128	; 0x80
24007f7a:	d1f1      	bne.n	24007f60 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24007f7c:	f7fc ff28 	bl	24004dd0 <HAL_GetREVID>
24007f80:	f241 0303 	movw	r3, #4099	; 0x1003
24007f84:	4298      	cmp	r0, r3
24007f86:	f200 80bf 	bhi.w	24008108 <HAL_RCC_OscConfig+0x3e8>
24007f8a:	6a22      	ldr	r2, [r4, #32]
24007f8c:	2a20      	cmp	r2, #32
24007f8e:	f000 81ad 	beq.w	240082ec <HAL_RCC_OscConfig+0x5cc>
24007f92:	490c      	ldr	r1, [pc, #48]	; (24007fc4 <HAL_RCC_OscConfig+0x2a4>)
24007f94:	684b      	ldr	r3, [r1, #4]
24007f96:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
24007f9a:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
24007f9e:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24007fa0:	6823      	ldr	r3, [r4, #0]
24007fa2:	e72d      	b.n	24007e00 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
24007fa4:	4a07      	ldr	r2, [pc, #28]	; (24007fc4 <HAL_RCC_OscConfig+0x2a4>)
24007fa6:	6813      	ldr	r3, [r2, #0]
24007fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24007fac:	6013      	str	r3, [r2, #0]
24007fae:	e6db      	b.n	24007d68 <HAL_RCC_OscConfig+0x48>
    PWR->CR1 |= PWR_CR1_DBP;
24007fb0:	4d05      	ldr	r5, [pc, #20]	; (24007fc8 <HAL_RCC_OscConfig+0x2a8>)
24007fb2:	682b      	ldr	r3, [r5, #0]
24007fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24007fb8:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
24007fba:	f7fc fef1 	bl	24004da0 <HAL_GetTick>
24007fbe:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
24007fc0:	e009      	b.n	24007fd6 <HAL_RCC_OscConfig+0x2b6>
24007fc2:	bf00      	nop
24007fc4:	58024400 	.word	0x58024400
24007fc8:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
24007fcc:	f7fc fee8 	bl	24004da0 <HAL_GetTick>
24007fd0:	1b80      	subs	r0, r0, r6
24007fd2:	2864      	cmp	r0, #100	; 0x64
24007fd4:	d826      	bhi.n	24008024 <HAL_RCC_OscConfig+0x304>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
24007fd6:	682b      	ldr	r3, [r5, #0]
24007fd8:	05da      	lsls	r2, r3, #23
24007fda:	d5f7      	bpl.n	24007fcc <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
24007fdc:	68a3      	ldr	r3, [r4, #8]
24007fde:	2b01      	cmp	r3, #1
24007fe0:	f000 8171 	beq.w	240082c6 <HAL_RCC_OscConfig+0x5a6>
24007fe4:	2b00      	cmp	r3, #0
24007fe6:	f040 8174 	bne.w	240082d2 <HAL_RCC_OscConfig+0x5b2>
24007fea:	4baa      	ldr	r3, [pc, #680]	; (24008294 <HAL_RCC_OscConfig+0x574>)
24007fec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
24007fee:	f022 0201 	bic.w	r2, r2, #1
24007ff2:	671a      	str	r2, [r3, #112]	; 0x70
24007ff4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
24007ff6:	f022 0204 	bic.w	r2, r2, #4
24007ffa:	671a      	str	r2, [r3, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
24007ffc:	68a3      	ldr	r3, [r4, #8]
24007ffe:	2b00      	cmp	r3, #0
24008000:	f000 8140 	beq.w	24008284 <HAL_RCC_OscConfig+0x564>
      tickstart = HAL_GetTick();
24008004:	f7fc fecc 	bl	24004da0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24008008:	4ea2      	ldr	r6, [pc, #648]	; (24008294 <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2400800a:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
2400800e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24008010:	e004      	b.n	2400801c <HAL_RCC_OscConfig+0x2fc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24008012:	f7fc fec5 	bl	24004da0 <HAL_GetTick>
24008016:	1b40      	subs	r0, r0, r5
24008018:	42b8      	cmp	r0, r7
2400801a:	d803      	bhi.n	24008024 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2400801c:	6f33      	ldr	r3, [r6, #112]	; 0x70
2400801e:	079b      	lsls	r3, r3, #30
24008020:	d5f7      	bpl.n	24008012 <HAL_RCC_OscConfig+0x2f2>
24008022:	e722      	b.n	24007e6a <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
24008024:	2003      	movs	r0, #3
}
24008026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
24008028:	f7fc feba 	bl	24004da0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
2400802c:	4e99      	ldr	r6, [pc, #612]	; (24008294 <HAL_RCC_OscConfig+0x574>)
        tickstart = HAL_GetTick();
2400802e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
24008030:	e004      	b.n	2400803c <HAL_RCC_OscConfig+0x31c>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
24008032:	f7fc feb5 	bl	24004da0 <HAL_GetTick>
24008036:	1b40      	subs	r0, r0, r5
24008038:	2864      	cmp	r0, #100	; 0x64
2400803a:	d8f3      	bhi.n	24008024 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
2400803c:	6833      	ldr	r3, [r6, #0]
2400803e:	039f      	lsls	r7, r3, #14
24008040:	d4f7      	bmi.n	24008032 <HAL_RCC_OscConfig+0x312>
24008042:	e6a3      	b.n	24007d8c <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
24008044:	6f6b      	ldr	r3, [r5, #116]	; 0x74
24008046:	f023 0301 	bic.w	r3, r3, #1
2400804a:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
2400804c:	f7fc fea8 	bl	24004da0 <HAL_GetTick>
24008050:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
24008052:	e004      	b.n	2400805e <HAL_RCC_OscConfig+0x33e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
24008054:	f7fc fea4 	bl	24004da0 <HAL_GetTick>
24008058:	1b80      	subs	r0, r0, r6
2400805a:	2802      	cmp	r0, #2
2400805c:	d8e2      	bhi.n	24008024 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
2400805e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
24008060:	0799      	lsls	r1, r3, #30
24008062:	d4f7      	bmi.n	24008054 <HAL_RCC_OscConfig+0x334>
24008064:	e6e4      	b.n	24007e30 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
24008066:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
2400806a:	4b8a      	ldr	r3, [pc, #552]	; (24008294 <HAL_RCC_OscConfig+0x574>)
2400806c:	681a      	ldr	r2, [r3, #0]
2400806e:	f47f ae74 	bne.w	24007d5a <HAL_RCC_OscConfig+0x3a>
24008072:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
24008076:	601a      	str	r2, [r3, #0]
24008078:	681a      	ldr	r2, [r3, #0]
2400807a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
2400807e:	601a      	str	r2, [r3, #0]
24008080:	e672      	b.n	24007d68 <HAL_RCC_OscConfig+0x48>
      __HAL_RCC_HSI48_DISABLE();
24008082:	682b      	ldr	r3, [r5, #0]
24008084:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
24008088:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
2400808a:	f7fc fe89 	bl	24004da0 <HAL_GetTick>
2400808e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
24008090:	e004      	b.n	2400809c <HAL_RCC_OscConfig+0x37c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
24008092:	f7fc fe85 	bl	24004da0 <HAL_GetTick>
24008096:	1b80      	subs	r0, r0, r6
24008098:	2802      	cmp	r0, #2
2400809a:	d8c3      	bhi.n	24008024 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
2400809c:	682b      	ldr	r3, [r5, #0]
2400809e:	0498      	lsls	r0, r3, #18
240080a0:	d4f7      	bmi.n	24008092 <HAL_RCC_OscConfig+0x372>
240080a2:	e6de      	b.n	24007e62 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
240080a4:	682b      	ldr	r3, [r5, #0]
240080a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
240080aa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
240080ac:	f7fc fe78 	bl	24004da0 <HAL_GetTick>
240080b0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
240080b2:	e004      	b.n	240080be <HAL_RCC_OscConfig+0x39e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
240080b4:	f7fc fe74 	bl	24004da0 <HAL_GetTick>
240080b8:	1b80      	subs	r0, r0, r6
240080ba:	2802      	cmp	r0, #2
240080bc:	d8b2      	bhi.n	24008024 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
240080be:	682b      	ldr	r3, [r5, #0]
240080c0:	05df      	lsls	r7, r3, #23
240080c2:	d4f7      	bmi.n	240080b4 <HAL_RCC_OscConfig+0x394>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
240080c4:	6823      	ldr	r3, [r4, #0]
240080c6:	e69b      	b.n	24007e00 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
240080c8:	f023 0301 	bic.w	r3, r3, #1
240080cc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
240080ce:	f7fc fe67 	bl	24004da0 <HAL_GetTick>
240080d2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
240080d4:	e004      	b.n	240080e0 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
240080d6:	f7fc fe63 	bl	24004da0 <HAL_GetTick>
240080da:	1b80      	subs	r0, r0, r6
240080dc:	2802      	cmp	r0, #2
240080de:	d8a1      	bhi.n	24008024 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
240080e0:	682b      	ldr	r3, [r5, #0]
240080e2:	0758      	lsls	r0, r3, #29
240080e4:	d4f7      	bmi.n	240080d6 <HAL_RCC_OscConfig+0x3b6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
240080e6:	6823      	ldr	r3, [r4, #0]
240080e8:	e654      	b.n	24007d94 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
240080ea:	0790      	lsls	r0, r2, #30
240080ec:	f47f af13 	bne.w	24007f16 <HAL_RCC_OscConfig+0x1f6>
240080f0:	e6e0      	b.n	24007eb4 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
240080f2:	686b      	ldr	r3, [r5, #4]
240080f4:	6922      	ldr	r2, [r4, #16]
240080f6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
240080fa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
240080fe:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
24008100:	6823      	ldr	r3, [r4, #0]
24008102:	e647      	b.n	24007d94 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
24008104:	2001      	movs	r0, #1
}
24008106:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24008108:	4a62      	ldr	r2, [pc, #392]	; (24008294 <HAL_RCC_OscConfig+0x574>)
2400810a:	6a21      	ldr	r1, [r4, #32]
2400810c:	68d3      	ldr	r3, [r2, #12]
2400810e:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
24008112:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
24008116:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24008118:	6823      	ldr	r3, [r4, #0]
2400811a:	e671      	b.n	24007e00 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
2400811c:	f7fc fe40 	bl	24004da0 <HAL_GetTick>
24008120:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24008122:	e005      	b.n	24008130 <HAL_RCC_OscConfig+0x410>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24008124:	f7fc fe3c 	bl	24004da0 <HAL_GetTick>
24008128:	1b80      	subs	r0, r0, r6
2400812a:	2802      	cmp	r0, #2
2400812c:	f63f af7a 	bhi.w	24008024 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24008130:	682b      	ldr	r3, [r5, #0]
24008132:	0199      	lsls	r1, r3, #6
24008134:	d4f6      	bmi.n	24008124 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
24008136:	6aa9      	ldr	r1, [r5, #40]	; 0x28
24008138:	4b57      	ldr	r3, [pc, #348]	; (24008298 <HAL_RCC_OscConfig+0x578>)
2400813a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
2400813c:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
2400813e:	4957      	ldr	r1, [pc, #348]	; (2400829c <HAL_RCC_OscConfig+0x57c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24008140:	4e54      	ldr	r6, [pc, #336]	; (24008294 <HAL_RCC_OscConfig+0x574>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
24008142:	4313      	orrs	r3, r2
24008144:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
24008146:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
2400814a:	62ab      	str	r3, [r5, #40]	; 0x28
2400814c:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
24008150:	3b01      	subs	r3, #1
24008152:	3a01      	subs	r2, #1
24008154:	025b      	lsls	r3, r3, #9
24008156:	0412      	lsls	r2, r2, #16
24008158:	b29b      	uxth	r3, r3
2400815a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
2400815e:	4313      	orrs	r3, r2
24008160:	6b22      	ldr	r2, [r4, #48]	; 0x30
24008162:	3a01      	subs	r2, #1
24008164:	f3c2 0208 	ubfx	r2, r2, #0, #9
24008168:	4313      	orrs	r3, r2
2400816a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
2400816c:	3a01      	subs	r2, #1
2400816e:	0612      	lsls	r2, r2, #24
24008170:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
24008174:	4313      	orrs	r3, r2
24008176:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
24008178:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
2400817a:	f023 0301 	bic.w	r3, r3, #1
2400817e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
24008180:	6b6a      	ldr	r2, [r5, #52]	; 0x34
24008182:	6ca3      	ldr	r3, [r4, #72]	; 0x48
24008184:	4011      	ands	r1, r2
24008186:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
2400818a:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
2400818c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
2400818e:	6c22      	ldr	r2, [r4, #64]	; 0x40
24008190:	f023 030c 	bic.w	r3, r3, #12
24008194:	4313      	orrs	r3, r2
24008196:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
24008198:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
2400819a:	6c62      	ldr	r2, [r4, #68]	; 0x44
2400819c:	f023 0302 	bic.w	r3, r3, #2
240081a0:	4313      	orrs	r3, r2
240081a2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
240081a4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
240081a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
240081aa:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240081ac:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
240081ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240081b2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
240081b4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
240081b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
240081ba:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
240081bc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
240081be:	f043 0301 	orr.w	r3, r3, #1
240081c2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
240081c4:	682b      	ldr	r3, [r5, #0]
240081c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
240081ca:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
240081cc:	f7fc fde8 	bl	24004da0 <HAL_GetTick>
240081d0:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
240081d2:	e005      	b.n	240081e0 <HAL_RCC_OscConfig+0x4c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
240081d4:	f7fc fde4 	bl	24004da0 <HAL_GetTick>
240081d8:	1b00      	subs	r0, r0, r4
240081da:	2802      	cmp	r0, #2
240081dc:	f63f af22 	bhi.w	24008024 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
240081e0:	6833      	ldr	r3, [r6, #0]
240081e2:	019a      	lsls	r2, r3, #6
240081e4:	d5f6      	bpl.n	240081d4 <HAL_RCC_OscConfig+0x4b4>
240081e6:	e65d      	b.n	24007ea4 <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
240081e8:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
240081ea:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
240081ec:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
240081ee:	f43f ae5a 	beq.w	24007ea6 <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
240081f2:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
240081f6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
240081f8:	428b      	cmp	r3, r1
240081fa:	f47f aeb1 	bne.w	24007f60 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
240081fe:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
24008202:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24008204:	429a      	cmp	r2, r3
24008206:	f47f aeab 	bne.w	24007f60 <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
2400820a:	6b23      	ldr	r3, [r4, #48]	; 0x30
2400820c:	f3c6 0208 	ubfx	r2, r6, #0, #9
24008210:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
24008212:	429a      	cmp	r2, r3
24008214:	f47f aea4 	bne.w	24007f60 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
24008218:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400821a:	f3c6 2246 	ubfx	r2, r6, #9, #7
2400821e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
24008220:	429a      	cmp	r2, r3
24008222:	f47f ae9d 	bne.w	24007f60 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
24008226:	6ba3      	ldr	r3, [r4, #56]	; 0x38
24008228:	f3c6 4206 	ubfx	r2, r6, #16, #7
2400822c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
2400822e:	429a      	cmp	r2, r3
24008230:	f47f ae96 	bne.w	24007f60 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
24008234:	6be3      	ldr	r3, [r4, #60]	; 0x3c
24008236:	f3c6 6606 	ubfx	r6, r6, #24, #7
2400823a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
2400823c:	429e      	cmp	r6, r3
2400823e:	f47f ae8f 	bne.w	24007f60 <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
24008242:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
24008244:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
24008246:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
2400824a:	429a      	cmp	r2, r3
2400824c:	f43f ae2a 	beq.w	24007ea4 <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
24008250:	4a10      	ldr	r2, [pc, #64]	; (24008294 <HAL_RCC_OscConfig+0x574>)
24008252:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008254:	f023 0301 	bic.w	r3, r3, #1
24008258:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
2400825a:	f7fc fda1 	bl	24004da0 <HAL_GetTick>
2400825e:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
24008260:	f7fc fd9e 	bl	24004da0 <HAL_GetTick>
24008264:	42a8      	cmp	r0, r5
24008266:	d0fb      	beq.n	24008260 <HAL_RCC_OscConfig+0x540>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
24008268:	4a0a      	ldr	r2, [pc, #40]	; (24008294 <HAL_RCC_OscConfig+0x574>)
  return HAL_OK;
2400826a:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
2400826c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
2400826e:	4b0b      	ldr	r3, [pc, #44]	; (2400829c <HAL_RCC_OscConfig+0x57c>)
24008270:	6b54      	ldr	r4, [r2, #52]	; 0x34
24008272:	4023      	ands	r3, r4
24008274:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
24008278:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
2400827a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
2400827c:	f043 0301 	orr.w	r3, r3, #1
24008280:	62d3      	str	r3, [r2, #44]	; 0x2c
}
24008282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tickstart = HAL_GetTick();
24008284:	f7fc fd8c 	bl	24004da0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
24008288:	4e02      	ldr	r6, [pc, #8]	; (24008294 <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2400828a:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
2400828e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
24008290:	e00c      	b.n	240082ac <HAL_RCC_OscConfig+0x58c>
24008292:	bf00      	nop
24008294:	58024400 	.word	0x58024400
24008298:	fffffc0c 	.word	0xfffffc0c
2400829c:	ffff0007 	.word	0xffff0007
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
240082a0:	f7fc fd7e 	bl	24004da0 <HAL_GetTick>
240082a4:	1b40      	subs	r0, r0, r5
240082a6:	42b8      	cmp	r0, r7
240082a8:	f63f aebc 	bhi.w	24008024 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
240082ac:	6f33      	ldr	r3, [r6, #112]	; 0x70
240082ae:	0798      	lsls	r0, r3, #30
240082b0:	d4f6      	bmi.n	240082a0 <HAL_RCC_OscConfig+0x580>
240082b2:	e5da      	b.n	24007e6a <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
240082b4:	68eb      	ldr	r3, [r5, #12]
240082b6:	6a22      	ldr	r2, [r4, #32]
240082b8:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
240082bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
240082c0:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
240082c2:	6823      	ldr	r3, [r4, #0]
240082c4:	e59c      	b.n	24007e00 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
240082c6:	4a0e      	ldr	r2, [pc, #56]	; (24008300 <HAL_RCC_OscConfig+0x5e0>)
240082c8:	6f13      	ldr	r3, [r2, #112]	; 0x70
240082ca:	f043 0301 	orr.w	r3, r3, #1
240082ce:	6713      	str	r3, [r2, #112]	; 0x70
240082d0:	e694      	b.n	24007ffc <HAL_RCC_OscConfig+0x2dc>
240082d2:	2b05      	cmp	r3, #5
240082d4:	4b0a      	ldr	r3, [pc, #40]	; (24008300 <HAL_RCC_OscConfig+0x5e0>)
240082d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
240082d8:	f47f ae89 	bne.w	24007fee <HAL_RCC_OscConfig+0x2ce>
240082dc:	f042 0204 	orr.w	r2, r2, #4
240082e0:	671a      	str	r2, [r3, #112]	; 0x70
240082e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
240082e4:	f042 0201 	orr.w	r2, r2, #1
240082e8:	671a      	str	r2, [r3, #112]	; 0x70
240082ea:	e687      	b.n	24007ffc <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
240082ec:	4a04      	ldr	r2, [pc, #16]	; (24008300 <HAL_RCC_OscConfig+0x5e0>)
240082ee:	6853      	ldr	r3, [r2, #4]
240082f0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
240082f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
240082f8:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
240082fa:	6823      	ldr	r3, [r4, #0]
240082fc:	e580      	b.n	24007e00 <HAL_RCC_OscConfig+0xe0>
240082fe:	bf00      	nop
24008300:	58024400 	.word	0x58024400

24008304 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
24008304:	4a48      	ldr	r2, [pc, #288]	; (24008428 <HAL_RCC_GetSysClockFreq+0x124>)
24008306:	6913      	ldr	r3, [r2, #16]
24008308:	f003 0338 	and.w	r3, r3, #56	; 0x38
2400830c:	2b10      	cmp	r3, #16
2400830e:	d004      	beq.n	2400831a <HAL_RCC_GetSysClockFreq+0x16>
24008310:	2b18      	cmp	r3, #24
24008312:	d00d      	beq.n	24008330 <HAL_RCC_GetSysClockFreq+0x2c>
24008314:	b11b      	cbz	r3, 2400831e <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
24008316:	4845      	ldr	r0, [pc, #276]	; (2400842c <HAL_RCC_GetSysClockFreq+0x128>)
24008318:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
2400831a:	4845      	ldr	r0, [pc, #276]	; (24008430 <HAL_RCC_GetSysClockFreq+0x12c>)
2400831c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2400831e:	6813      	ldr	r3, [r2, #0]
24008320:	0699      	lsls	r1, r3, #26
24008322:	d54a      	bpl.n	240083ba <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008324:	6813      	ldr	r3, [r2, #0]
24008326:	4843      	ldr	r0, [pc, #268]	; (24008434 <HAL_RCC_GetSysClockFreq+0x130>)
24008328:	f3c3 03c1 	ubfx	r3, r3, #3, #2
2400832c:	40d8      	lsrs	r0, r3
2400832e:	4770      	bx	lr
{
24008330:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24008332:	6a93      	ldr	r3, [r2, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
24008334:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
24008336:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
24008338:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
2400833c:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
2400833e:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
24008342:	d038      	beq.n	240083b6 <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24008344:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
24008348:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400834c:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24008350:	fb05 f101 	mul.w	r1, r5, r1
24008354:	2b01      	cmp	r3, #1
24008356:	ee07 1a90 	vmov	s15, r1
2400835a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
2400835e:	d002      	beq.n	24008366 <HAL_RCC_GetSysClockFreq+0x62>
24008360:	2b02      	cmp	r3, #2
24008362:	d02c      	beq.n	240083be <HAL_RCC_GetSysClockFreq+0xba>
24008364:	b393      	cbz	r3, 240083cc <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008366:	ee07 0a90 	vmov	s15, r0
2400836a:	ed9f 5a33 	vldr	s10, [pc, #204]	; 24008438 <HAL_RCC_GetSysClockFreq+0x134>
2400836e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008372:	6b13      	ldr	r3, [r2, #48]	; 0x30
24008374:	eec5 6a27 	vdiv.f32	s13, s10, s15
24008378:	ed9f 6a30 	vldr	s12, [pc, #192]	; 2400843c <HAL_RCC_GetSysClockFreq+0x138>
2400837c:	f3c3 0308 	ubfx	r3, r3, #0, #9
24008380:	ee07 3a90 	vmov	s15, r3
24008384:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24008388:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400838c:	ee77 7aa5 	vadd.f32	s15, s15, s11
24008390:	eee7 7a06 	vfma.f32	s15, s14, s12
24008394:	ee66 6aa7 	vmul.f32	s13, s13, s15
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
24008398:	4b23      	ldr	r3, [pc, #140]	; (24008428 <HAL_RCC_GetSysClockFreq+0x124>)
2400839a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400839c:	f3c3 2346 	ubfx	r3, r3, #9, #7
240083a0:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
240083a2:	ee07 3a90 	vmov	s15, r3
240083a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
240083aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
240083ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240083b2:	ee17 0a90 	vmov	r0, s15
}
240083b6:	bc30      	pop	{r4, r5}
240083b8:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
240083ba:	481e      	ldr	r0, [pc, #120]	; (24008434 <HAL_RCC_GetSysClockFreq+0x130>)
}
240083bc:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240083be:	ee07 0a90 	vmov	s15, r0
240083c2:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 24008440 <HAL_RCC_GetSysClockFreq+0x13c>
240083c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240083ca:	e7d2      	b.n	24008372 <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
240083cc:	6813      	ldr	r3, [r2, #0]
240083ce:	069b      	lsls	r3, r3, #26
240083d0:	d522      	bpl.n	24008418 <HAL_RCC_GetSysClockFreq+0x114>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240083d2:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240083d4:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240083d8:	4916      	ldr	r1, [pc, #88]	; (24008434 <HAL_RCC_GetSysClockFreq+0x130>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240083da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240083de:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240083e0:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240083e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240083e8:	ed9f 5a14 	vldr	s10, [pc, #80]	; 2400843c <HAL_RCC_GetSysClockFreq+0x138>
240083ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240083f0:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240083f2:	ee06 3a10 	vmov	s12, r3
240083f6:	ee05 1a90 	vmov	s11, r1
240083fa:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
240083fe:	eef8 5ae5 	vcvt.f32.s32	s11, s11
24008402:	ee36 6a26 	vadd.f32	s12, s12, s13
24008406:	eec5 6aa7 	vdiv.f32	s13, s11, s15
2400840a:	eef0 7a46 	vmov.f32	s15, s12
2400840e:	eee7 7a05 	vfma.f32	s15, s14, s10
24008412:	ee66 6aa7 	vmul.f32	s13, s13, s15
24008416:	e7bf      	b.n	24008398 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008418:	ee07 0a90 	vmov	s15, r0
2400841c:	ed9f 5a09 	vldr	s10, [pc, #36]	; 24008444 <HAL_RCC_GetSysClockFreq+0x140>
24008420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008424:	e7a5      	b.n	24008372 <HAL_RCC_GetSysClockFreq+0x6e>
24008426:	bf00      	nop
24008428:	58024400 	.word	0x58024400
2400842c:	003d0900 	.word	0x003d0900
24008430:	00f42400 	.word	0x00f42400
24008434:	03d09000 	.word	0x03d09000
24008438:	4a742400 	.word	0x4a742400
2400843c:	39000000 	.word	0x39000000
24008440:	4b742400 	.word	0x4b742400
24008444:	4c742400 	.word	0x4c742400

24008448 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
24008448:	2800      	cmp	r0, #0
2400844a:	f000 811a 	beq.w	24008682 <HAL_RCC_ClockConfig+0x23a>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
2400844e:	4a92      	ldr	r2, [pc, #584]	; (24008698 <HAL_RCC_ClockConfig+0x250>)
{
24008450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
24008454:	6813      	ldr	r3, [r2, #0]
24008456:	4604      	mov	r4, r0
24008458:	460d      	mov	r5, r1
2400845a:	f003 030f 	and.w	r3, r3, #15
2400845e:	428b      	cmp	r3, r1
24008460:	d20c      	bcs.n	2400847c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
24008462:	6813      	ldr	r3, [r2, #0]
24008464:	f023 030f 	bic.w	r3, r3, #15
24008468:	430b      	orrs	r3, r1
2400846a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
2400846c:	6813      	ldr	r3, [r2, #0]
2400846e:	f003 030f 	and.w	r3, r3, #15
24008472:	428b      	cmp	r3, r1
24008474:	d002      	beq.n	2400847c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
24008476:	2001      	movs	r0, #1
}
24008478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
2400847c:	6823      	ldr	r3, [r4, #0]
2400847e:	075f      	lsls	r7, r3, #29
24008480:	d50c      	bpl.n	2400849c <HAL_RCC_ClockConfig+0x54>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
24008482:	4986      	ldr	r1, [pc, #536]	; (2400869c <HAL_RCC_ClockConfig+0x254>)
24008484:	6920      	ldr	r0, [r4, #16]
24008486:	698a      	ldr	r2, [r1, #24]
24008488:	f002 0270 	and.w	r2, r2, #112	; 0x70
2400848c:	4290      	cmp	r0, r2
2400848e:	d905      	bls.n	2400849c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
24008490:	698b      	ldr	r3, [r1, #24]
24008492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24008496:	4303      	orrs	r3, r0
24008498:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2400849a:	6823      	ldr	r3, [r4, #0]
2400849c:	071e      	lsls	r6, r3, #28
2400849e:	d50c      	bpl.n	240084ba <HAL_RCC_ClockConfig+0x72>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
240084a0:	497e      	ldr	r1, [pc, #504]	; (2400869c <HAL_RCC_ClockConfig+0x254>)
240084a2:	6960      	ldr	r0, [r4, #20]
240084a4:	69ca      	ldr	r2, [r1, #28]
240084a6:	f002 0270 	and.w	r2, r2, #112	; 0x70
240084aa:	4290      	cmp	r0, r2
240084ac:	d905      	bls.n	240084ba <HAL_RCC_ClockConfig+0x72>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
240084ae:	69cb      	ldr	r3, [r1, #28]
240084b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
240084b4:	4303      	orrs	r3, r0
240084b6:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
240084b8:	6823      	ldr	r3, [r4, #0]
240084ba:	06d8      	lsls	r0, r3, #27
240084bc:	d50c      	bpl.n	240084d8 <HAL_RCC_ClockConfig+0x90>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
240084be:	4977      	ldr	r1, [pc, #476]	; (2400869c <HAL_RCC_ClockConfig+0x254>)
240084c0:	69a0      	ldr	r0, [r4, #24]
240084c2:	69ca      	ldr	r2, [r1, #28]
240084c4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
240084c8:	4290      	cmp	r0, r2
240084ca:	d905      	bls.n	240084d8 <HAL_RCC_ClockConfig+0x90>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
240084cc:	69cb      	ldr	r3, [r1, #28]
240084ce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
240084d2:	4303      	orrs	r3, r0
240084d4:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
240084d6:	6823      	ldr	r3, [r4, #0]
240084d8:	0699      	lsls	r1, r3, #26
240084da:	d50c      	bpl.n	240084f6 <HAL_RCC_ClockConfig+0xae>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
240084dc:	496f      	ldr	r1, [pc, #444]	; (2400869c <HAL_RCC_ClockConfig+0x254>)
240084de:	69e0      	ldr	r0, [r4, #28]
240084e0:	6a0a      	ldr	r2, [r1, #32]
240084e2:	f002 0270 	and.w	r2, r2, #112	; 0x70
240084e6:	4290      	cmp	r0, r2
240084e8:	d905      	bls.n	240084f6 <HAL_RCC_ClockConfig+0xae>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
240084ea:	6a0b      	ldr	r3, [r1, #32]
240084ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
240084f0:	4303      	orrs	r3, r0
240084f2:	620b      	str	r3, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
240084f4:	6823      	ldr	r3, [r4, #0]
240084f6:	079a      	lsls	r2, r3, #30
240084f8:	f140 8083 	bpl.w	24008602 <HAL_RCC_ClockConfig+0x1ba>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
240084fc:	4867      	ldr	r0, [pc, #412]	; (2400869c <HAL_RCC_ClockConfig+0x254>)
240084fe:	68e1      	ldr	r1, [r4, #12]
24008500:	6982      	ldr	r2, [r0, #24]
24008502:	f002 020f 	and.w	r2, r2, #15
24008506:	4291      	cmp	r1, r2
24008508:	f240 80a9 	bls.w	2400865e <HAL_RCC_ClockConfig+0x216>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
2400850c:	6983      	ldr	r3, [r0, #24]
2400850e:	f023 030f 	bic.w	r3, r3, #15
24008512:	430b      	orrs	r3, r1
24008514:	6183      	str	r3, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
24008516:	6823      	ldr	r3, [r4, #0]
24008518:	07df      	lsls	r7, r3, #31
2400851a:	d474      	bmi.n	24008606 <HAL_RCC_ClockConfig+0x1be>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
2400851c:	079f      	lsls	r7, r3, #30
2400851e:	d507      	bpl.n	24008530 <HAL_RCC_ClockConfig+0xe8>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
24008520:	4a5e      	ldr	r2, [pc, #376]	; (2400869c <HAL_RCC_ClockConfig+0x254>)
24008522:	68e1      	ldr	r1, [r4, #12]
24008524:	6993      	ldr	r3, [r2, #24]
24008526:	f003 030f 	and.w	r3, r3, #15
2400852a:	428b      	cmp	r3, r1
2400852c:	f200 80a0 	bhi.w	24008670 <HAL_RCC_ClockConfig+0x228>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
24008530:	4a59      	ldr	r2, [pc, #356]	; (24008698 <HAL_RCC_ClockConfig+0x250>)
24008532:	6813      	ldr	r3, [r2, #0]
24008534:	f003 030f 	and.w	r3, r3, #15
24008538:	42ab      	cmp	r3, r5
2400853a:	d909      	bls.n	24008550 <HAL_RCC_ClockConfig+0x108>
    __HAL_FLASH_SET_LATENCY(FLatency);
2400853c:	6813      	ldr	r3, [r2, #0]
2400853e:	f023 030f 	bic.w	r3, r3, #15
24008542:	432b      	orrs	r3, r5
24008544:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
24008546:	6813      	ldr	r3, [r2, #0]
24008548:	f003 030f 	and.w	r3, r3, #15
2400854c:	42ab      	cmp	r3, r5
2400854e:	d192      	bne.n	24008476 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
24008550:	6823      	ldr	r3, [r4, #0]
24008552:	075e      	lsls	r6, r3, #29
24008554:	d50c      	bpl.n	24008570 <HAL_RCC_ClockConfig+0x128>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
24008556:	4951      	ldr	r1, [pc, #324]	; (2400869c <HAL_RCC_ClockConfig+0x254>)
24008558:	6920      	ldr	r0, [r4, #16]
2400855a:	698a      	ldr	r2, [r1, #24]
2400855c:	f002 0270 	and.w	r2, r2, #112	; 0x70
24008560:	4290      	cmp	r0, r2
24008562:	d205      	bcs.n	24008570 <HAL_RCC_ClockConfig+0x128>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
24008564:	698b      	ldr	r3, [r1, #24]
24008566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
2400856a:	4303      	orrs	r3, r0
2400856c:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2400856e:	6823      	ldr	r3, [r4, #0]
24008570:	071d      	lsls	r5, r3, #28
24008572:	d50c      	bpl.n	2400858e <HAL_RCC_ClockConfig+0x146>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
24008574:	4949      	ldr	r1, [pc, #292]	; (2400869c <HAL_RCC_ClockConfig+0x254>)
24008576:	6960      	ldr	r0, [r4, #20]
24008578:	69ca      	ldr	r2, [r1, #28]
2400857a:	f002 0270 	and.w	r2, r2, #112	; 0x70
2400857e:	4290      	cmp	r0, r2
24008580:	d205      	bcs.n	2400858e <HAL_RCC_ClockConfig+0x146>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
24008582:	69cb      	ldr	r3, [r1, #28]
24008584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24008588:	4303      	orrs	r3, r0
2400858a:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2400858c:	6823      	ldr	r3, [r4, #0]
2400858e:	06d8      	lsls	r0, r3, #27
24008590:	d50c      	bpl.n	240085ac <HAL_RCC_ClockConfig+0x164>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
24008592:	4942      	ldr	r1, [pc, #264]	; (2400869c <HAL_RCC_ClockConfig+0x254>)
24008594:	69a0      	ldr	r0, [r4, #24]
24008596:	69ca      	ldr	r2, [r1, #28]
24008598:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
2400859c:	4290      	cmp	r0, r2
2400859e:	d205      	bcs.n	240085ac <HAL_RCC_ClockConfig+0x164>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
240085a0:	69cb      	ldr	r3, [r1, #28]
240085a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
240085a6:	4303      	orrs	r3, r0
240085a8:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
240085aa:	6823      	ldr	r3, [r4, #0]
240085ac:	0699      	lsls	r1, r3, #26
240085ae:	d50b      	bpl.n	240085c8 <HAL_RCC_ClockConfig+0x180>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
240085b0:	4a3a      	ldr	r2, [pc, #232]	; (2400869c <HAL_RCC_ClockConfig+0x254>)
240085b2:	69e1      	ldr	r1, [r4, #28]
240085b4:	6a13      	ldr	r3, [r2, #32]
240085b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
240085ba:	4299      	cmp	r1, r3
240085bc:	d204      	bcs.n	240085c8 <HAL_RCC_ClockConfig+0x180>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
240085be:	6a13      	ldr	r3, [r2, #32]
240085c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
240085c4:	430b      	orrs	r3, r1
240085c6:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
240085c8:	f7ff fe9c 	bl	24008304 <HAL_RCC_GetSysClockFreq>
240085cc:	4a33      	ldr	r2, [pc, #204]	; (2400869c <HAL_RCC_ClockConfig+0x254>)
240085ce:	4603      	mov	r3, r0
240085d0:	4833      	ldr	r0, [pc, #204]	; (240086a0 <HAL_RCC_ClockConfig+0x258>)
240085d2:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240085d4:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
240085d6:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
240085da:	4d32      	ldr	r5, [pc, #200]	; (240086a4 <HAL_RCC_ClockConfig+0x25c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240085dc:	f002 020f 	and.w	r2, r2, #15
240085e0:	4c31      	ldr	r4, [pc, #196]	; (240086a8 <HAL_RCC_ClockConfig+0x260>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
240085e2:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240085e4:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
240085e6:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
240085ea:	4830      	ldr	r0, [pc, #192]	; (240086ac <HAL_RCC_ClockConfig+0x264>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240085ec:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
240085f0:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
240085f2:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
240085f4:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240085f6:	40d3      	lsrs	r3, r2
240085f8:	6023      	str	r3, [r4, #0]
}
240085fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
240085fe:	f7fc bb6d 	b.w	24004cdc <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
24008602:	07db      	lsls	r3, r3, #31
24008604:	d594      	bpl.n	24008530 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
24008606:	4a25      	ldr	r2, [pc, #148]	; (2400869c <HAL_RCC_ClockConfig+0x254>)
24008608:	68a1      	ldr	r1, [r4, #8]
2400860a:	6993      	ldr	r3, [r2, #24]
2400860c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
24008610:	430b      	orrs	r3, r1
24008612:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
24008614:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24008616:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
24008618:	2902      	cmp	r1, #2
2400861a:	d034      	beq.n	24008686 <HAL_RCC_ClockConfig+0x23e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
2400861c:	2903      	cmp	r1, #3
2400861e:	d02d      	beq.n	2400867c <HAL_RCC_ClockConfig+0x234>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
24008620:	2901      	cmp	r1, #1
24008622:	d035      	beq.n	24008690 <HAL_RCC_ClockConfig+0x248>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24008624:	075b      	lsls	r3, r3, #29
24008626:	f57f af26 	bpl.w	24008476 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
2400862a:	4e1c      	ldr	r6, [pc, #112]	; (2400869c <HAL_RCC_ClockConfig+0x254>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
2400862c:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
24008630:	6933      	ldr	r3, [r6, #16]
24008632:	f023 0307 	bic.w	r3, r3, #7
24008636:	430b      	orrs	r3, r1
24008638:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
2400863a:	f7fc fbb1 	bl	24004da0 <HAL_GetTick>
2400863e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
24008640:	e004      	b.n	2400864c <HAL_RCC_ClockConfig+0x204>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
24008642:	f7fc fbad 	bl	24004da0 <HAL_GetTick>
24008646:	1bc0      	subs	r0, r0, r7
24008648:	4540      	cmp	r0, r8
2400864a:	d81f      	bhi.n	2400868c <HAL_RCC_ClockConfig+0x244>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
2400864c:	6933      	ldr	r3, [r6, #16]
2400864e:	6862      	ldr	r2, [r4, #4]
24008650:	f003 0338 	and.w	r3, r3, #56	; 0x38
24008654:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
24008658:	d1f3      	bne.n	24008642 <HAL_RCC_ClockConfig+0x1fa>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
2400865a:	6823      	ldr	r3, [r4, #0]
2400865c:	e75e      	b.n	2400851c <HAL_RCC_ClockConfig+0xd4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
2400865e:	07da      	lsls	r2, r3, #31
24008660:	d4d1      	bmi.n	24008606 <HAL_RCC_ClockConfig+0x1be>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
24008662:	4a0e      	ldr	r2, [pc, #56]	; (2400869c <HAL_RCC_ClockConfig+0x254>)
24008664:	6993      	ldr	r3, [r2, #24]
24008666:	f003 030f 	and.w	r3, r3, #15
2400866a:	428b      	cmp	r3, r1
2400866c:	f67f af60 	bls.w	24008530 <HAL_RCC_ClockConfig+0xe8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
24008670:	6993      	ldr	r3, [r2, #24]
24008672:	f023 030f 	bic.w	r3, r3, #15
24008676:	430b      	orrs	r3, r1
24008678:	6193      	str	r3, [r2, #24]
2400867a:	e759      	b.n	24008530 <HAL_RCC_ClockConfig+0xe8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
2400867c:	0198      	lsls	r0, r3, #6
2400867e:	d4d4      	bmi.n	2400862a <HAL_RCC_ClockConfig+0x1e2>
24008680:	e6f9      	b.n	24008476 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
24008682:	2001      	movs	r0, #1
}
24008684:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24008686:	039e      	lsls	r6, r3, #14
24008688:	d4cf      	bmi.n	2400862a <HAL_RCC_ClockConfig+0x1e2>
2400868a:	e6f4      	b.n	24008476 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
2400868c:	2003      	movs	r0, #3
2400868e:	e6f3      	b.n	24008478 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
24008690:	05da      	lsls	r2, r3, #23
24008692:	d4ca      	bmi.n	2400862a <HAL_RCC_ClockConfig+0x1e2>
24008694:	e6ef      	b.n	24008476 <HAL_RCC_ClockConfig+0x2e>
24008696:	bf00      	nop
24008698:	52002000 	.word	0x52002000
2400869c:	58024400 	.word	0x58024400
240086a0:	2401a148 	.word	0x2401a148
240086a4:	2000074c 	.word	0x2000074c
240086a8:	20000750 	.word	0x20000750
240086ac:	20000758 	.word	0x20000758

240086b0 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
240086b0:	4a18      	ldr	r2, [pc, #96]	; (24008714 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
240086b2:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
240086b4:	6913      	ldr	r3, [r2, #16]
240086b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
240086ba:	2b10      	cmp	r3, #16
240086bc:	d01a      	beq.n	240086f4 <HAL_RCC_GetHCLKFreq+0x44>
240086be:	2b18      	cmp	r3, #24
240086c0:	d023      	beq.n	2400870a <HAL_RCC_GetHCLKFreq+0x5a>
240086c2:	b1cb      	cbz	r3, 240086f8 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
240086c4:	4814      	ldr	r0, [pc, #80]	; (24008718 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
240086c6:	4b13      	ldr	r3, [pc, #76]	; (24008714 <HAL_RCC_GetHCLKFreq+0x64>)
240086c8:	4914      	ldr	r1, [pc, #80]	; (2400871c <HAL_RCC_GetHCLKFreq+0x6c>)
240086ca:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240086cc:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
240086ce:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240086d2:	4c13      	ldr	r4, [pc, #76]	; (24008720 <HAL_RCC_GetHCLKFreq+0x70>)
240086d4:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
240086d8:	4d12      	ldr	r5, [pc, #72]	; (24008724 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
240086da:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240086dc:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
240086de:	f002 021f 	and.w	r2, r2, #31
240086e2:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240086e6:	f003 001f 	and.w	r0, r3, #31
240086ea:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
240086ee:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240086f0:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
240086f2:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
240086f4:	480c      	ldr	r0, [pc, #48]	; (24008728 <HAL_RCC_GetHCLKFreq+0x78>)
240086f6:	e7e6      	b.n	240086c6 <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
240086f8:	6813      	ldr	r3, [r2, #0]
240086fa:	069b      	lsls	r3, r3, #26
240086fc:	d508      	bpl.n	24008710 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240086fe:	6813      	ldr	r3, [r2, #0]
24008700:	480a      	ldr	r0, [pc, #40]	; (2400872c <HAL_RCC_GetHCLKFreq+0x7c>)
24008702:	f3c3 03c1 	ubfx	r3, r3, #3, #2
24008706:	40d8      	lsrs	r0, r3
24008708:	e7dd      	b.n	240086c6 <HAL_RCC_GetHCLKFreq+0x16>
2400870a:	f7ff fa83 	bl	24007c14 <HAL_RCC_GetSysClockFreq.part.0>
2400870e:	e7da      	b.n	240086c6 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
24008710:	4806      	ldr	r0, [pc, #24]	; (2400872c <HAL_RCC_GetHCLKFreq+0x7c>)
24008712:	e7d8      	b.n	240086c6 <HAL_RCC_GetHCLKFreq+0x16>
24008714:	58024400 	.word	0x58024400
24008718:	003d0900 	.word	0x003d0900
2400871c:	2401a148 	.word	0x2401a148
24008720:	20000750 	.word	0x20000750
24008724:	2000074c 	.word	0x2000074c
24008728:	00f42400 	.word	0x00f42400
2400872c:	03d09000 	.word	0x03d09000

24008730 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
24008730:	4a1c      	ldr	r2, [pc, #112]	; (240087a4 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
24008732:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
24008734:	6913      	ldr	r3, [r2, #16]
24008736:	f003 0338 	and.w	r3, r3, #56	; 0x38
2400873a:	2b10      	cmp	r3, #16
2400873c:	d021      	beq.n	24008782 <HAL_RCC_GetPCLK1Freq+0x52>
2400873e:	2b18      	cmp	r3, #24
24008740:	d02a      	beq.n	24008798 <HAL_RCC_GetPCLK1Freq+0x68>
24008742:	b303      	cbz	r3, 24008786 <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
24008744:	4818      	ldr	r0, [pc, #96]	; (240087a8 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24008746:	4a17      	ldr	r2, [pc, #92]	; (240087a4 <HAL_RCC_GetPCLK1Freq+0x74>)
24008748:	4918      	ldr	r1, [pc, #96]	; (240087ac <HAL_RCC_GetPCLK1Freq+0x7c>)
2400874a:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400874c:	4c18      	ldr	r4, [pc, #96]	; (240087b0 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
2400874e:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
24008752:	4d18      	ldr	r5, [pc, #96]	; (240087b4 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24008754:	5ccb      	ldrb	r3, [r1, r3]
24008756:	f003 031f 	and.w	r3, r3, #31
2400875a:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400875c:	6993      	ldr	r3, [r2, #24]
2400875e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
24008762:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24008764:	5ccb      	ldrb	r3, [r1, r3]
24008766:	f003 031f 	and.w	r3, r3, #31
2400876a:	fa20 f303 	lsr.w	r3, r0, r3
2400876e:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
24008770:	69d2      	ldr	r2, [r2, #28]
24008772:	f3c2 1202 	ubfx	r2, r2, #4, #3
24008776:	5c88      	ldrb	r0, [r1, r2]
24008778:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
2400877c:	fa23 f000 	lsr.w	r0, r3, r0
24008780:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
24008782:	480d      	ldr	r0, [pc, #52]	; (240087b8 <HAL_RCC_GetPCLK1Freq+0x88>)
24008784:	e7df      	b.n	24008746 <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24008786:	6813      	ldr	r3, [r2, #0]
24008788:	069b      	lsls	r3, r3, #26
2400878a:	d508      	bpl.n	2400879e <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400878c:	6813      	ldr	r3, [r2, #0]
2400878e:	480b      	ldr	r0, [pc, #44]	; (240087bc <HAL_RCC_GetPCLK1Freq+0x8c>)
24008790:	f3c3 03c1 	ubfx	r3, r3, #3, #2
24008794:	40d8      	lsrs	r0, r3
24008796:	e7d6      	b.n	24008746 <HAL_RCC_GetPCLK1Freq+0x16>
24008798:	f7ff fa3c 	bl	24007c14 <HAL_RCC_GetSysClockFreq.part.0>
2400879c:	e7d3      	b.n	24008746 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
2400879e:	4807      	ldr	r0, [pc, #28]	; (240087bc <HAL_RCC_GetPCLK1Freq+0x8c>)
240087a0:	e7d1      	b.n	24008746 <HAL_RCC_GetPCLK1Freq+0x16>
240087a2:	bf00      	nop
240087a4:	58024400 	.word	0x58024400
240087a8:	003d0900 	.word	0x003d0900
240087ac:	2401a148 	.word	0x2401a148
240087b0:	20000750 	.word	0x20000750
240087b4:	2000074c 	.word	0x2000074c
240087b8:	00f42400 	.word	0x00f42400
240087bc:	03d09000 	.word	0x03d09000

240087c0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
240087c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
240087c2:	4c3a      	ldr	r4, [pc, #232]	; (240088ac <RCCEx_PLL2_Config+0xec>)
240087c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
240087c6:	f003 0303 	and.w	r3, r3, #3
240087ca:	2b03      	cmp	r3, #3
240087cc:	d067      	beq.n	2400889e <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
240087ce:	6823      	ldr	r3, [r4, #0]
240087d0:	4606      	mov	r6, r0
240087d2:	460f      	mov	r7, r1
240087d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
240087d8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
240087da:	f7fc fae1 	bl	24004da0 <HAL_GetTick>
240087de:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
240087e0:	e004      	b.n	240087ec <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
240087e2:	f7fc fadd 	bl	24004da0 <HAL_GetTick>
240087e6:	1b43      	subs	r3, r0, r5
240087e8:	2b02      	cmp	r3, #2
240087ea:	d856      	bhi.n	2400889a <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
240087ec:	6823      	ldr	r3, [r4, #0]
240087ee:	011a      	lsls	r2, r3, #4
240087f0:	d4f7      	bmi.n	240087e2 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
240087f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
240087f4:	6832      	ldr	r2, [r6, #0]
240087f6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
240087fa:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
240087fe:	62a3      	str	r3, [r4, #40]	; 0x28
24008800:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
24008804:	3b01      	subs	r3, #1
24008806:	3a01      	subs	r2, #1
24008808:	025b      	lsls	r3, r3, #9
2400880a:	0412      	lsls	r2, r2, #16
2400880c:	b29b      	uxth	r3, r3
2400880e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
24008812:	4313      	orrs	r3, r2
24008814:	6872      	ldr	r2, [r6, #4]
24008816:	3a01      	subs	r2, #1
24008818:	f3c2 0208 	ubfx	r2, r2, #0, #9
2400881c:	4313      	orrs	r3, r2
2400881e:	6932      	ldr	r2, [r6, #16]
24008820:	3a01      	subs	r2, #1
24008822:	0612      	lsls	r2, r2, #24
24008824:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
24008828:	4313      	orrs	r3, r2
2400882a:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
2400882c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
2400882e:	6972      	ldr	r2, [r6, #20]
24008830:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
24008834:	4313      	orrs	r3, r2
24008836:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
24008838:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
2400883a:	69b3      	ldr	r3, [r6, #24]
2400883c:	f022 0220 	bic.w	r2, r2, #32
24008840:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
24008842:	4b1b      	ldr	r3, [pc, #108]	; (240088b0 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
24008844:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
24008846:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
24008848:	f022 0210 	bic.w	r2, r2, #16
2400884c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
2400884e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
24008850:	69f2      	ldr	r2, [r6, #28]
24008852:	400b      	ands	r3, r1
24008854:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
24008858:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
2400885a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
2400885c:	f043 0310 	orr.w	r3, r3, #16
24008860:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
24008862:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
24008864:	b1ef      	cbz	r7, 240088a2 <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
24008866:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
24008868:	bf0c      	ite	eq
2400886a:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
2400886e:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
24008872:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
24008874:	4c0d      	ldr	r4, [pc, #52]	; (240088ac <RCCEx_PLL2_Config+0xec>)
24008876:	6823      	ldr	r3, [r4, #0]
24008878:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
2400887c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2400887e:	f7fc fa8f 	bl	24004da0 <HAL_GetTick>
24008882:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
24008884:	e004      	b.n	24008890 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
24008886:	f7fc fa8b 	bl	24004da0 <HAL_GetTick>
2400888a:	1b40      	subs	r0, r0, r5
2400888c:	2802      	cmp	r0, #2
2400888e:	d804      	bhi.n	2400889a <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
24008890:	6823      	ldr	r3, [r4, #0]
24008892:	011b      	lsls	r3, r3, #4
24008894:	d5f7      	bpl.n	24008886 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
24008896:	2000      	movs	r0, #0
}
24008898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
2400889a:	2003      	movs	r0, #3
}
2400889c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
2400889e:	2001      	movs	r0, #1
}
240088a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
240088a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
240088a6:	62e3      	str	r3, [r4, #44]	; 0x2c
240088a8:	e7e4      	b.n	24008874 <RCCEx_PLL2_Config+0xb4>
240088aa:	bf00      	nop
240088ac:	58024400 	.word	0x58024400
240088b0:	ffff0007 	.word	0xffff0007

240088b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
240088b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
240088b6:	4c3a      	ldr	r4, [pc, #232]	; (240089a0 <RCCEx_PLL3_Config+0xec>)
240088b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
240088ba:	f003 0303 	and.w	r3, r3, #3
240088be:	2b03      	cmp	r3, #3
240088c0:	d067      	beq.n	24008992 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
240088c2:	6823      	ldr	r3, [r4, #0]
240088c4:	4606      	mov	r6, r0
240088c6:	460f      	mov	r7, r1
240088c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
240088cc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
240088ce:	f7fc fa67 	bl	24004da0 <HAL_GetTick>
240088d2:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
240088d4:	e004      	b.n	240088e0 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
240088d6:	f7fc fa63 	bl	24004da0 <HAL_GetTick>
240088da:	1b43      	subs	r3, r0, r5
240088dc:	2b02      	cmp	r3, #2
240088de:	d856      	bhi.n	2400898e <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
240088e0:	6823      	ldr	r3, [r4, #0]
240088e2:	009a      	lsls	r2, r3, #2
240088e4:	d4f7      	bmi.n	240088d6 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
240088e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
240088e8:	6832      	ldr	r2, [r6, #0]
240088ea:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
240088ee:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
240088f2:	62a3      	str	r3, [r4, #40]	; 0x28
240088f4:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
240088f8:	3b01      	subs	r3, #1
240088fa:	3a01      	subs	r2, #1
240088fc:	025b      	lsls	r3, r3, #9
240088fe:	0412      	lsls	r2, r2, #16
24008900:	b29b      	uxth	r3, r3
24008902:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
24008906:	4313      	orrs	r3, r2
24008908:	6872      	ldr	r2, [r6, #4]
2400890a:	3a01      	subs	r2, #1
2400890c:	f3c2 0208 	ubfx	r2, r2, #0, #9
24008910:	4313      	orrs	r3, r2
24008912:	6932      	ldr	r2, [r6, #16]
24008914:	3a01      	subs	r2, #1
24008916:	0612      	lsls	r2, r2, #24
24008918:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
2400891c:	4313      	orrs	r3, r2
2400891e:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
24008920:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24008922:	6972      	ldr	r2, [r6, #20]
24008924:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
24008928:	4313      	orrs	r3, r2
2400892a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
2400892c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
2400892e:	69b3      	ldr	r3, [r6, #24]
24008930:	f422 7200 	bic.w	r2, r2, #512	; 0x200
24008934:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
24008936:	4b1b      	ldr	r3, [pc, #108]	; (240089a4 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
24008938:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
2400893a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
2400893c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24008940:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
24008942:	6c61      	ldr	r1, [r4, #68]	; 0x44
24008944:	69f2      	ldr	r2, [r6, #28]
24008946:	400b      	ands	r3, r1
24008948:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
2400894c:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
2400894e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24008950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24008954:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
24008956:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
24008958:	b1ef      	cbz	r7, 24008996 <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
2400895a:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
2400895c:	bf0c      	ite	eq
2400895e:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
24008962:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
24008966:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
24008968:	4c0d      	ldr	r4, [pc, #52]	; (240089a0 <RCCEx_PLL3_Config+0xec>)
2400896a:	6823      	ldr	r3, [r4, #0]
2400896c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
24008970:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24008972:	f7fc fa15 	bl	24004da0 <HAL_GetTick>
24008976:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
24008978:	e004      	b.n	24008984 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
2400897a:	f7fc fa11 	bl	24004da0 <HAL_GetTick>
2400897e:	1b40      	subs	r0, r0, r5
24008980:	2802      	cmp	r0, #2
24008982:	d804      	bhi.n	2400898e <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
24008984:	6823      	ldr	r3, [r4, #0]
24008986:	009b      	lsls	r3, r3, #2
24008988:	d5f7      	bpl.n	2400897a <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
2400898a:	2000      	movs	r0, #0
}
2400898c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
2400898e:	2003      	movs	r0, #3
}
24008990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
24008992:	2001      	movs	r0, #1
}
24008994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
24008996:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
2400899a:	62e3      	str	r3, [r4, #44]	; 0x2c
2400899c:	e7e4      	b.n	24008968 <RCCEx_PLL3_Config+0xb4>
2400899e:	bf00      	nop
240089a0:	58024400 	.word	0x58024400
240089a4:	ffff0007 	.word	0xffff0007

240089a8 <HAL_RCCEx_PeriphCLKConfig>:
{
240089a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
240089ac:	e9d0 3200 	ldrd	r3, r2, [r0]
{
240089b0:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
240089b2:	011d      	lsls	r5, r3, #4
240089b4:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
240089b8:	d521      	bpl.n	240089fe <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch (PeriphClkInit->SpdifrxClockSelection)
240089ba:	6e81      	ldr	r1, [r0, #104]	; 0x68
240089bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
240089c0:	f000 8577 	beq.w	240094b2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
240089c4:	d80e      	bhi.n	240089e4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
240089c6:	2900      	cmp	r1, #0
240089c8:	f000 85d2 	beq.w	24009570 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
240089cc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
240089d0:	f040 85cb 	bne.w	2400956a <HAL_RCCEx_PeriphCLKConfig+0xbc2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
240089d4:	2102      	movs	r1, #2
240089d6:	3008      	adds	r0, #8
240089d8:	f7ff fef2 	bl	240087c0 <RCCEx_PLL2_Config>
240089dc:	4606      	mov	r6, r0
    if (ret == HAL_OK)
240089de:	b966      	cbnz	r6, 240089fa <HAL_RCCEx_PeriphCLKConfig+0x52>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
240089e0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
240089e2:	e003      	b.n	240089ec <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch (PeriphClkInit->SpdifrxClockSelection)
240089e4:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
240089e8:	f040 85bf 	bne.w	2400956a <HAL_RCCEx_PeriphCLKConfig+0xbc2>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
240089ec:	4aa3      	ldr	r2, [pc, #652]	; (24008c7c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
240089ee:	2600      	movs	r6, #0
240089f0:	6d13      	ldr	r3, [r2, #80]	; 0x50
240089f2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
240089f6:	430b      	orrs	r3, r1
240089f8:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
240089fa:	e9d4 3200 	ldrd	r3, r2, [r4]
240089fe:	05d8      	lsls	r0, r3, #23
24008a00:	d50a      	bpl.n	24008a18 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch (PeriphClkInit->Sai1ClockSelection)
24008a02:	6da1      	ldr	r1, [r4, #88]	; 0x58
24008a04:	2904      	cmp	r1, #4
24008a06:	d806      	bhi.n	24008a16 <HAL_RCCEx_PeriphCLKConfig+0x6e>
24008a08:	e8df f011 	tbh	[pc, r1, lsl #1]
24008a0c:	0564055d 	.word	0x0564055d
24008a10:	0310057b 	.word	0x0310057b
24008a14:	0310      	.short	0x0310
24008a16:	2601      	movs	r6, #1
24008a18:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
24008a1a:	0599      	lsls	r1, r3, #22
24008a1c:	d517      	bpl.n	24008a4e <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai23ClockSelection)
24008a1e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
24008a20:	2980      	cmp	r1, #128	; 0x80
24008a22:	f000 8575 	beq.w	24009510 <HAL_RCCEx_PeriphCLKConfig+0xb68>
24008a26:	f200 80e1 	bhi.w	24008bec <HAL_RCCEx_PeriphCLKConfig+0x244>
24008a2a:	2900      	cmp	r1, #0
24008a2c:	f000 8446 	beq.w	240092bc <HAL_RCCEx_PeriphCLKConfig+0x914>
24008a30:	2940      	cmp	r1, #64	; 0x40
24008a32:	f040 80e2 	bne.w	24008bfa <HAL_RCCEx_PeriphCLKConfig+0x252>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008a36:	2100      	movs	r1, #0
24008a38:	f104 0008 	add.w	r0, r4, #8
24008a3c:	f7ff fec0 	bl	240087c0 <RCCEx_PLL2_Config>
24008a40:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008a42:	2d00      	cmp	r5, #0
24008a44:	f000 83f6 	beq.w	24009234 <HAL_RCCEx_PeriphCLKConfig+0x88c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
24008a48:	462e      	mov	r6, r5
24008a4a:	e9d4 3200 	ldrd	r3, r2, [r4]
24008a4e:	055f      	lsls	r7, r3, #21
24008a50:	d51a      	bpl.n	24008a88 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4AClockSelection)
24008a52:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
24008a56:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
24008a5a:	f000 8522 	beq.w	240094a2 <HAL_RCCEx_PeriphCLKConfig+0xafa>
24008a5e:	f200 80cf 	bhi.w	24008c00 <HAL_RCCEx_PeriphCLKConfig+0x258>
24008a62:	2900      	cmp	r1, #0
24008a64:	f000 8431 	beq.w	240092ca <HAL_RCCEx_PeriphCLKConfig+0x922>
24008a68:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
24008a6c:	f040 80d0 	bne.w	24008c10 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008a70:	2100      	movs	r1, #0
24008a72:	f104 0008 	add.w	r0, r4, #8
24008a76:	f7ff fea3 	bl	240087c0 <RCCEx_PLL2_Config>
24008a7a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008a7c:	2d00      	cmp	r5, #0
24008a7e:	f000 83f8 	beq.w	24009272 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
24008a82:	462e      	mov	r6, r5
24008a84:	e9d4 3200 	ldrd	r3, r2, [r4]
24008a88:	0518      	lsls	r0, r3, #20
24008a8a:	d51a      	bpl.n	24008ac2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->Sai4BClockSelection)
24008a8c:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
24008a90:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
24008a94:	f000 852d 	beq.w	240094f2 <HAL_RCCEx_PeriphCLKConfig+0xb4a>
24008a98:	f200 80bd 	bhi.w	24008c16 <HAL_RCCEx_PeriphCLKConfig+0x26e>
24008a9c:	2900      	cmp	r1, #0
24008a9e:	f000 8406 	beq.w	240092ae <HAL_RCCEx_PeriphCLKConfig+0x906>
24008aa2:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
24008aa6:	f040 80be 	bne.w	24008c26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008aaa:	2100      	movs	r1, #0
24008aac:	f104 0008 	add.w	r0, r4, #8
24008ab0:	f7ff fe86 	bl	240087c0 <RCCEx_PLL2_Config>
24008ab4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008ab6:	2d00      	cmp	r5, #0
24008ab8:	f000 83b1 	beq.w	2400921e <HAL_RCCEx_PeriphCLKConfig+0x876>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
24008abc:	462e      	mov	r6, r5
24008abe:	e9d4 3200 	ldrd	r3, r2, [r4]
24008ac2:	0199      	lsls	r1, r3, #6
24008ac4:	d51a      	bpl.n	24008afc <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->QspiClockSelection)
24008ac6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
24008ac8:	2920      	cmp	r1, #32
24008aca:	f000 84b4 	beq.w	24009436 <HAL_RCCEx_PeriphCLKConfig+0xa8e>
24008ace:	f200 80ad 	bhi.w	24008c2c <HAL_RCCEx_PeriphCLKConfig+0x284>
24008ad2:	b139      	cbz	r1, 24008ae4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
24008ad4:	2910      	cmp	r1, #16
24008ad6:	f040 80ac 	bne.w	24008c32 <HAL_RCCEx_PeriphCLKConfig+0x28a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008ada:	4a68      	ldr	r2, [pc, #416]	; (24008c7c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24008adc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008ae2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
24008ae4:	2d00      	cmp	r5, #0
24008ae6:	f040 8418 	bne.w	2400931a <HAL_RCCEx_PeriphCLKConfig+0x972>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
24008aea:	4a64      	ldr	r2, [pc, #400]	; (24008c7c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24008aec:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
24008aee:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
24008af0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
24008af4:	430b      	orrs	r3, r1
24008af6:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
24008af8:	e9d4 3200 	ldrd	r3, r2, [r4]
24008afc:	04df      	lsls	r7, r3, #19
24008afe:	d519      	bpl.n	24008b34 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi123ClockSelection)
24008b00:	6e21      	ldr	r1, [r4, #96]	; 0x60
24008b02:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
24008b06:	f000 84ec 	beq.w	240094e2 <HAL_RCCEx_PeriphCLKConfig+0xb3a>
24008b0a:	f200 8095 	bhi.w	24008c38 <HAL_RCCEx_PeriphCLKConfig+0x290>
24008b0e:	2900      	cmp	r1, #0
24008b10:	f000 83c7 	beq.w	240092a2 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
24008b14:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
24008b18:	f040 8096 	bne.w	24008c48 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008b1c:	2100      	movs	r1, #0
24008b1e:	f104 0008 	add.w	r0, r4, #8
24008b22:	f7ff fe4d 	bl	240087c0 <RCCEx_PLL2_Config>
24008b26:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008b28:	2d00      	cmp	r5, #0
24008b2a:	f000 838d 	beq.w	24009248 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
24008b2e:	462e      	mov	r6, r5
24008b30:	e9d4 3200 	ldrd	r3, r2, [r4]
24008b34:	0498      	lsls	r0, r3, #18
24008b36:	d51d      	bpl.n	24008b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi45ClockSelection)
24008b38:	6e61      	ldr	r1, [r4, #100]	; 0x64
24008b3a:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
24008b3e:	f000 8466 	beq.w	2400940e <HAL_RCCEx_PeriphCLKConfig+0xa66>
24008b42:	f200 8084 	bhi.w	24008c4e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
24008b46:	b149      	cbz	r1, 24008b5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
24008b48:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
24008b4c:	f040 8088 	bne.w	24008c60 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24008b50:	2101      	movs	r1, #1
24008b52:	f104 0008 	add.w	r0, r4, #8
24008b56:	f7ff fe33 	bl	240087c0 <RCCEx_PLL2_Config>
24008b5a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008b5c:	2d00      	cmp	r5, #0
24008b5e:	f040 83eb 	bne.w	24009338 <HAL_RCCEx_PeriphCLKConfig+0x990>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
24008b62:	4a46      	ldr	r2, [pc, #280]	; (24008c7c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24008b64:	6e61      	ldr	r1, [r4, #100]	; 0x64
24008b66:	6d13      	ldr	r3, [r2, #80]	; 0x50
24008b68:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
24008b6c:	430b      	orrs	r3, r1
24008b6e:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
24008b70:	e9d4 3200 	ldrd	r3, r2, [r4]
24008b74:	0459      	lsls	r1, r3, #17
24008b76:	d51d      	bpl.n	24008bb4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch (PeriphClkInit->Spi6ClockSelection)
24008b78:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
24008b7c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
24008b80:	f000 844f 	beq.w	24009422 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
24008b84:	d86f      	bhi.n	24008c66 <HAL_RCCEx_PeriphCLKConfig+0x2be>
24008b86:	b141      	cbz	r1, 24008b9a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
24008b88:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
24008b8c:	d173      	bne.n	24008c76 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24008b8e:	2101      	movs	r1, #1
24008b90:	f104 0008 	add.w	r0, r4, #8
24008b94:	f7ff fe14 	bl	240087c0 <RCCEx_PLL2_Config>
24008b98:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008b9a:	2d00      	cmp	r5, #0
24008b9c:	f040 83d4 	bne.w	24009348 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
24008ba0:	4a36      	ldr	r2, [pc, #216]	; (24008c7c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24008ba2:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
24008ba6:	6d93      	ldr	r3, [r2, #88]	; 0x58
24008ba8:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
24008bac:	430b      	orrs	r3, r1
24008bae:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
24008bb0:	e9d4 3200 	ldrd	r3, r2, [r4]
24008bb4:	041f      	lsls	r7, r3, #16
24008bb6:	d50d      	bpl.n	24008bd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    switch (PeriphClkInit->FdcanClockSelection)
24008bb8:	6f21      	ldr	r1, [r4, #112]	; 0x70
24008bba:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
24008bbe:	f000 841d 	beq.w	240093fc <HAL_RCCEx_PeriphCLKConfig+0xa54>
24008bc2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
24008bc6:	f000 8239 	beq.w	2400903c <HAL_RCCEx_PeriphCLKConfig+0x694>
24008bca:	2900      	cmp	r1, #0
24008bcc:	f000 823c 	beq.w	24009048 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
24008bd0:	2601      	movs	r6, #1
24008bd2:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
24008bd4:	01d8      	lsls	r0, r3, #7
24008bd6:	d55e      	bpl.n	24008c96 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    switch (PeriphClkInit->FmcClockSelection)
24008bd8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
24008bda:	2903      	cmp	r1, #3
24008bdc:	f200 84f3 	bhi.w	240095c6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
24008be0:	e8df f011 	tbh	[pc, r1, lsl #1]
24008be4:	004e0053 	.word	0x004e0053
24008be8:	0053043d 	.word	0x0053043d
    switch (PeriphClkInit->Sai23ClockSelection)
24008bec:	29c0      	cmp	r1, #192	; 0xc0
24008bee:	f43f af28 	beq.w	24008a42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
24008bf2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
24008bf6:	f43f af24 	beq.w	24008a42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
24008bfa:	2601      	movs	r6, #1
24008bfc:	4635      	mov	r5, r6
24008bfe:	e726      	b.n	24008a4e <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai4AClockSelection)
24008c00:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
24008c04:	f43f af3a 	beq.w	24008a7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
24008c08:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
24008c0c:	f43f af36 	beq.w	24008a7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
24008c10:	2601      	movs	r6, #1
24008c12:	4635      	mov	r5, r6
24008c14:	e738      	b.n	24008a88 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4BClockSelection)
24008c16:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
24008c1a:	f43f af4c 	beq.w	24008ab6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
24008c1e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
24008c22:	f43f af48 	beq.w	24008ab6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
24008c26:	2601      	movs	r6, #1
24008c28:	4635      	mov	r5, r6
24008c2a:	e74a      	b.n	24008ac2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->QspiClockSelection)
24008c2c:	2930      	cmp	r1, #48	; 0x30
24008c2e:	f43f af59 	beq.w	24008ae4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
24008c32:	2601      	movs	r6, #1
24008c34:	4635      	mov	r5, r6
24008c36:	e761      	b.n	24008afc <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->Spi123ClockSelection)
24008c38:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
24008c3c:	f43f af74 	beq.w	24008b28 <HAL_RCCEx_PeriphCLKConfig+0x180>
24008c40:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
24008c44:	f43f af70 	beq.w	24008b28 <HAL_RCCEx_PeriphCLKConfig+0x180>
24008c48:	2601      	movs	r6, #1
24008c4a:	4635      	mov	r5, r6
24008c4c:	e772      	b.n	24008b34 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi45ClockSelection)
24008c4e:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
24008c52:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
24008c56:	d081      	beq.n	24008b5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
24008c58:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
24008c5c:	f43f af7e 	beq.w	24008b5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
24008c60:	2601      	movs	r6, #1
24008c62:	4635      	mov	r5, r6
24008c64:	e786      	b.n	24008b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi6ClockSelection)
24008c66:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
24008c6a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
24008c6e:	d094      	beq.n	24008b9a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
24008c70:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
24008c74:	d091      	beq.n	24008b9a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
24008c76:	2601      	movs	r6, #1
24008c78:	4635      	mov	r5, r6
24008c7a:	e79b      	b.n	24008bb4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
24008c7c:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008c80:	4a34      	ldr	r2, [pc, #208]	; (24008d54 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
24008c82:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008c88:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
24008c8a:	2d00      	cmp	r5, #0
24008c8c:	f000 834a 	beq.w	24009324 <HAL_RCCEx_PeriphCLKConfig+0x97c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
24008c90:	462e      	mov	r6, r5
24008c92:	e9d4 3200 	ldrd	r3, r2, [r4]
24008c96:	0259      	lsls	r1, r3, #9
24008c98:	f100 826f 	bmi.w	2400917a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
24008c9c:	07d8      	lsls	r0, r3, #31
24008c9e:	d52f      	bpl.n	24008d00 <HAL_RCCEx_PeriphCLKConfig+0x358>
    switch (PeriphClkInit->Usart16ClockSelection)
24008ca0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
24008ca2:	2928      	cmp	r1, #40	; 0x28
24008ca4:	d82a      	bhi.n	24008cfc <HAL_RCCEx_PeriphCLKConfig+0x354>
24008ca6:	e8df f011 	tbh	[pc, r1, lsl #1]
24008caa:	020d      	.short	0x020d
24008cac:	00290029 	.word	0x00290029
24008cb0:	00290029 	.word	0x00290029
24008cb4:	00290029 	.word	0x00290029
24008cb8:	02070029 	.word	0x02070029
24008cbc:	00290029 	.word	0x00290029
24008cc0:	00290029 	.word	0x00290029
24008cc4:	00290029 	.word	0x00290029
24008cc8:	04500029 	.word	0x04500029
24008ccc:	00290029 	.word	0x00290029
24008cd0:	00290029 	.word	0x00290029
24008cd4:	00290029 	.word	0x00290029
24008cd8:	020d0029 	.word	0x020d0029
24008cdc:	00290029 	.word	0x00290029
24008ce0:	00290029 	.word	0x00290029
24008ce4:	00290029 	.word	0x00290029
24008ce8:	020d0029 	.word	0x020d0029
24008cec:	00290029 	.word	0x00290029
24008cf0:	00290029 	.word	0x00290029
24008cf4:	00290029 	.word	0x00290029
24008cf8:	020d0029 	.word	0x020d0029
24008cfc:	2601      	movs	r6, #1
24008cfe:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
24008d00:	0799      	lsls	r1, r3, #30
24008d02:	d517      	bpl.n	24008d34 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    switch (PeriphClkInit->Usart234578ClockSelection)
24008d04:	6fa1      	ldr	r1, [r4, #120]	; 0x78
24008d06:	2905      	cmp	r1, #5
24008d08:	f200 8465 	bhi.w	240095d6 <HAL_RCCEx_PeriphCLKConfig+0xc2e>
24008d0c:	e8df f011 	tbh	[pc, r1, lsl #1]
24008d10:	0006000c 	.word	0x0006000c
24008d14:	000c0412 	.word	0x000c0412
24008d18:	000c000c 	.word	0x000c000c
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24008d1c:	2101      	movs	r1, #1
24008d1e:	f104 0008 	add.w	r0, r4, #8
24008d22:	f7ff fd4d 	bl	240087c0 <RCCEx_PLL2_Config>
24008d26:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008d28:	2d00      	cmp	r5, #0
24008d2a:	f000 82dd 	beq.w	240092e8 <HAL_RCCEx_PeriphCLKConfig+0x940>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
24008d2e:	462e      	mov	r6, r5
24008d30:	e9d4 3200 	ldrd	r3, r2, [r4]
24008d34:	075f      	lsls	r7, r3, #29
24008d36:	d51b      	bpl.n	24008d70 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
    switch (PeriphClkInit->Lpuart1ClockSelection)
24008d38:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
24008d3c:	2905      	cmp	r1, #5
24008d3e:	f200 8446 	bhi.w	240095ce <HAL_RCCEx_PeriphCLKConfig+0xc26>
24008d42:	e8df f011 	tbh	[pc, r1, lsl #1]
24008d46:	000f      	.short	0x000f
24008d48:	03ed0009 	.word	0x03ed0009
24008d4c:	000f000f 	.word	0x000f000f
24008d50:	000f      	.short	0x000f
24008d52:	bf00      	nop
24008d54:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24008d58:	2101      	movs	r1, #1
24008d5a:	f104 0008 	add.w	r0, r4, #8
24008d5e:	f7ff fd2f 	bl	240087c0 <RCCEx_PLL2_Config>
24008d62:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008d64:	2d00      	cmp	r5, #0
24008d66:	f000 82c9 	beq.w	240092fc <HAL_RCCEx_PeriphCLKConfig+0x954>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
24008d6a:	462e      	mov	r6, r5
24008d6c:	e9d4 3200 	ldrd	r3, r2, [r4]
24008d70:	0698      	lsls	r0, r3, #26
24008d72:	d51f      	bpl.n	24008db4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    switch (PeriphClkInit->Lptim1ClockSelection)
24008d74:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
24008d78:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
24008d7c:	f000 8365 	beq.w	2400944a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
24008d80:	f200 811c 	bhi.w	24008fbc <HAL_RCCEx_PeriphCLKConfig+0x614>
24008d84:	b149      	cbz	r1, 24008d9a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
24008d86:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
24008d8a:	f040 8121 	bne.w	24008fd0 <HAL_RCCEx_PeriphCLKConfig+0x628>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008d8e:	2100      	movs	r1, #0
24008d90:	f104 0008 	add.w	r0, r4, #8
24008d94:	f7ff fd14 	bl	240087c0 <RCCEx_PLL2_Config>
24008d98:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008d9a:	2d00      	cmp	r5, #0
24008d9c:	f040 82b9 	bne.w	24009312 <HAL_RCCEx_PeriphCLKConfig+0x96a>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
24008da0:	4ab0      	ldr	r2, [pc, #704]	; (24009064 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
24008da2:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
24008da6:	6d53      	ldr	r3, [r2, #84]	; 0x54
24008da8:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
24008dac:	430b      	orrs	r3, r1
24008dae:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
24008db0:	e9d4 3200 	ldrd	r3, r2, [r4]
24008db4:	0659      	lsls	r1, r3, #25
24008db6:	d51f      	bpl.n	24008df8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch (PeriphClkInit->Lptim2ClockSelection)
24008db8:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
24008dbc:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
24008dc0:	f000 8308 	beq.w	240093d4 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
24008dc4:	f200 8107 	bhi.w	24008fd6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
24008dc8:	b149      	cbz	r1, 24008dde <HAL_RCCEx_PeriphCLKConfig+0x436>
24008dca:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
24008dce:	f040 810c 	bne.w	24008fea <HAL_RCCEx_PeriphCLKConfig+0x642>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008dd2:	2100      	movs	r1, #0
24008dd4:	f104 0008 	add.w	r0, r4, #8
24008dd8:	f7ff fcf2 	bl	240087c0 <RCCEx_PLL2_Config>
24008ddc:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008dde:	2d00      	cmp	r5, #0
24008de0:	f040 82b6 	bne.w	24009350 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
24008de4:	4a9f      	ldr	r2, [pc, #636]	; (24009064 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
24008de6:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
24008dea:	6d93      	ldr	r3, [r2, #88]	; 0x58
24008dec:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
24008df0:	430b      	orrs	r3, r1
24008df2:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
24008df4:	e9d4 3200 	ldrd	r3, r2, [r4]
24008df8:	061f      	lsls	r7, r3, #24
24008dfa:	d51f      	bpl.n	24008e3c <HAL_RCCEx_PeriphCLKConfig+0x494>
    switch (PeriphClkInit->Lptim345ClockSelection)
24008dfc:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
24008e00:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
24008e04:	f000 82f0 	beq.w	240093e8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
24008e08:	f200 80f2 	bhi.w	24008ff0 <HAL_RCCEx_PeriphCLKConfig+0x648>
24008e0c:	b149      	cbz	r1, 24008e22 <HAL_RCCEx_PeriphCLKConfig+0x47a>
24008e0e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
24008e12:	f040 80f7 	bne.w	24009004 <HAL_RCCEx_PeriphCLKConfig+0x65c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008e16:	2100      	movs	r1, #0
24008e18:	f104 0008 	add.w	r0, r4, #8
24008e1c:	f7ff fcd0 	bl	240087c0 <RCCEx_PLL2_Config>
24008e20:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008e22:	2d00      	cmp	r5, #0
24008e24:	f040 828c 	bne.w	24009340 <HAL_RCCEx_PeriphCLKConfig+0x998>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
24008e28:	4a8e      	ldr	r2, [pc, #568]	; (24009064 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
24008e2a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
24008e2e:	6d93      	ldr	r3, [r2, #88]	; 0x58
24008e30:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
24008e34:	430b      	orrs	r3, r1
24008e36:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
24008e38:	e9d4 3200 	ldrd	r3, r2, [r4]
24008e3c:	0718      	lsls	r0, r3, #28
24008e3e:	d50d      	bpl.n	24008e5c <HAL_RCCEx_PeriphCLKConfig+0x4b4>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
24008e40:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
24008e44:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
24008e48:	f000 8313 	beq.w	24009472 <HAL_RCCEx_PeriphCLKConfig+0xaca>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
24008e4c:	4985      	ldr	r1, [pc, #532]	; (24009064 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
24008e4e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
24008e50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
24008e54:	4313      	orrs	r3, r2
24008e56:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
24008e58:	e9d4 3200 	ldrd	r3, r2, [r4]
24008e5c:	06d9      	lsls	r1, r3, #27
24008e5e:	d50d      	bpl.n	24008e7c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
24008e60:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
24008e64:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
24008e68:	f000 830f 	beq.w	2400948a <HAL_RCCEx_PeriphCLKConfig+0xae2>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
24008e6c:	497d      	ldr	r1, [pc, #500]	; (24009064 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
24008e6e:	6d8b      	ldr	r3, [r1, #88]	; 0x58
24008e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
24008e74:	4313      	orrs	r3, r2
24008e76:	658b      	str	r3, [r1, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
24008e78:	e9d4 3200 	ldrd	r3, r2, [r4]
24008e7c:	031f      	lsls	r7, r3, #12
24008e7e:	d50e      	bpl.n	24008e9e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
    switch (PeriphClkInit->AdcClockSelection)
24008e80:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
24008e84:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
24008e88:	f000 8102 	beq.w	24009090 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
24008e8c:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
24008e90:	f000 8104 	beq.w	2400909c <HAL_RCCEx_PeriphCLKConfig+0x6f4>
24008e94:	2900      	cmp	r1, #0
24008e96:	f000 8292 	beq.w	240093be <HAL_RCCEx_PeriphCLKConfig+0xa16>
24008e9a:	2601      	movs	r6, #1
24008e9c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
24008e9e:	0358      	lsls	r0, r3, #13
24008ea0:	d50f      	bpl.n	24008ec2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    switch (PeriphClkInit->UsbClockSelection)
24008ea2:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
24008ea6:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
24008eaa:	f000 80dd 	beq.w	24009068 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
24008eae:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
24008eb2:	f000 80df 	beq.w	24009074 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
24008eb6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
24008eba:	f000 8277 	beq.w	240093ac <HAL_RCCEx_PeriphCLKConfig+0xa04>
24008ebe:	2601      	movs	r6, #1
24008ec0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
24008ec2:	03d9      	lsls	r1, r3, #15
24008ec4:	d509      	bpl.n	24008eda <HAL_RCCEx_PeriphCLKConfig+0x532>
    switch (PeriphClkInit->SdmmcClockSelection)
24008ec6:	6d21      	ldr	r1, [r4, #80]	; 0x50
24008ec8:	2900      	cmp	r1, #0
24008eca:	f000 825a 	beq.w	24009382 <HAL_RCCEx_PeriphCLKConfig+0x9da>
24008ece:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
24008ed2:	f000 81da 	beq.w	2400928a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
24008ed6:	2601      	movs	r6, #1
24008ed8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
24008eda:	009f      	lsls	r7, r3, #2
24008edc:	f100 80ff 	bmi.w	240090de <HAL_RCCEx_PeriphCLKConfig+0x736>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
24008ee0:	0398      	lsls	r0, r3, #14
24008ee2:	d50e      	bpl.n	24008f02 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->RngClockSelection)
24008ee4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
24008ee8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
24008eec:	f000 8240 	beq.w	24009370 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
24008ef0:	f240 808b 	bls.w	2400900a <HAL_RCCEx_PeriphCLKConfig+0x662>
24008ef4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
24008ef8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
24008efc:	f000 8088 	beq.w	24009010 <HAL_RCCEx_PeriphCLKConfig+0x668>
24008f00:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
24008f02:	02d9      	lsls	r1, r3, #11
24008f04:	d508      	bpl.n	24008f18 <HAL_RCCEx_PeriphCLKConfig+0x570>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
24008f06:	4a57      	ldr	r2, [pc, #348]	; (24009064 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
24008f08:	6f61      	ldr	r1, [r4, #116]	; 0x74
24008f0a:	6d13      	ldr	r3, [r2, #80]	; 0x50
24008f0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24008f10:	430b      	orrs	r3, r1
24008f12:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
24008f14:	e9d4 3200 	ldrd	r3, r2, [r4]
24008f18:	00df      	lsls	r7, r3, #3
24008f1a:	d509      	bpl.n	24008f30 <HAL_RCCEx_PeriphCLKConfig+0x588>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
24008f1c:	4a51      	ldr	r2, [pc, #324]	; (24009064 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
24008f1e:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
24008f22:	6913      	ldr	r3, [r2, #16]
24008f24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
24008f28:	430b      	orrs	r3, r1
24008f2a:	6113      	str	r3, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
24008f2c:	e9d4 3200 	ldrd	r3, r2, [r4]
24008f30:	029d      	lsls	r5, r3, #10
24008f32:	d508      	bpl.n	24008f46 <HAL_RCCEx_PeriphCLKConfig+0x59e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
24008f34:	4a4b      	ldr	r2, [pc, #300]	; (24009064 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
24008f36:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
24008f38:	6d13      	ldr	r3, [r2, #80]	; 0x50
24008f3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
24008f3e:	430b      	orrs	r3, r1
24008f40:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
24008f42:	e9d4 3200 	ldrd	r3, r2, [r4]
24008f46:	0058      	lsls	r0, r3, #1
24008f48:	d50b      	bpl.n	24008f62 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
24008f4a:	4b46      	ldr	r3, [pc, #280]	; (24009064 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
24008f4c:	691a      	ldr	r2, [r3, #16]
24008f4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
24008f52:	611a      	str	r2, [r3, #16]
24008f54:	691a      	ldr	r2, [r3, #16]
24008f56:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
24008f5a:	430a      	orrs	r2, r1
24008f5c:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
24008f5e:	e9d4 3200 	ldrd	r3, r2, [r4]
24008f62:	2b00      	cmp	r3, #0
24008f64:	da08      	bge.n	24008f78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
24008f66:	4a3f      	ldr	r2, [pc, #252]	; (24009064 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
24008f68:	6d61      	ldr	r1, [r4, #84]	; 0x54
24008f6a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
24008f6c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
24008f70:	430b      	orrs	r3, r1
24008f72:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
24008f74:	e9d4 3200 	ldrd	r3, r2, [r4]
24008f78:	0219      	lsls	r1, r3, #8
24008f7a:	d508      	bpl.n	24008f8e <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
24008f7c:	4a39      	ldr	r2, [pc, #228]	; (24009064 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
24008f7e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
24008f82:	6d53      	ldr	r3, [r2, #84]	; 0x54
24008f84:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
24008f88:	430b      	orrs	r3, r1
24008f8a:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
24008f8c:	6862      	ldr	r2, [r4, #4]
24008f8e:	07d3      	lsls	r3, r2, #31
24008f90:	f100 80b1 	bmi.w	240090f6 <HAL_RCCEx_PeriphCLKConfig+0x74e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
24008f94:	0797      	lsls	r7, r2, #30
24008f96:	f100 80bb 	bmi.w	24009110 <HAL_RCCEx_PeriphCLKConfig+0x768>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
24008f9a:	0755      	lsls	r5, r2, #29
24008f9c:	f100 80c5 	bmi.w	2400912a <HAL_RCCEx_PeriphCLKConfig+0x782>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
24008fa0:	0710      	lsls	r0, r2, #28
24008fa2:	f100 80cf 	bmi.w	24009144 <HAL_RCCEx_PeriphCLKConfig+0x79c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
24008fa6:	06d1      	lsls	r1, r2, #27
24008fa8:	f100 80d9 	bmi.w	2400915e <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
24008fac:	0692      	lsls	r2, r2, #26
24008fae:	f100 812a 	bmi.w	24009206 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    return HAL_OK;
24008fb2:	1e30      	subs	r0, r6, #0
24008fb4:	bf18      	it	ne
24008fb6:	2001      	movne	r0, #1
}
24008fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
24008fbc:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
24008fc0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
24008fc4:	f43f aee9 	beq.w	24008d9a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
24008fc8:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
24008fcc:	f43f aee5 	beq.w	24008d9a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
24008fd0:	2601      	movs	r6, #1
24008fd2:	4635      	mov	r5, r6
24008fd4:	e6ee      	b.n	24008db4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    switch (PeriphClkInit->Lptim2ClockSelection)
24008fd6:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
24008fda:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
24008fde:	f43f aefe 	beq.w	24008dde <HAL_RCCEx_PeriphCLKConfig+0x436>
24008fe2:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
24008fe6:	f43f aefa 	beq.w	24008dde <HAL_RCCEx_PeriphCLKConfig+0x436>
24008fea:	2601      	movs	r6, #1
24008fec:	4635      	mov	r5, r6
24008fee:	e703      	b.n	24008df8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch (PeriphClkInit->Lptim345ClockSelection)
24008ff0:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
24008ff4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
24008ff8:	f43f af13 	beq.w	24008e22 <HAL_RCCEx_PeriphCLKConfig+0x47a>
24008ffc:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
24009000:	f43f af0f 	beq.w	24008e22 <HAL_RCCEx_PeriphCLKConfig+0x47a>
24009004:	2601      	movs	r6, #1
24009006:	4635      	mov	r5, r6
24009008:	e718      	b.n	24008e3c <HAL_RCCEx_PeriphCLKConfig+0x494>
    switch (PeriphClkInit->RngClockSelection)
2400900a:	2900      	cmp	r1, #0
2400900c:	f47f af78 	bne.w	24008f00 <HAL_RCCEx_PeriphCLKConfig+0x558>
    if (ret == HAL_OK)
24009010:	2d00      	cmp	r5, #0
24009012:	f040 81c7 	bne.w	240093a4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
24009016:	4a13      	ldr	r2, [pc, #76]	; (24009064 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
24009018:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
2400901c:	6d53      	ldr	r3, [r2, #84]	; 0x54
2400901e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
24009022:	430b      	orrs	r3, r1
24009024:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
24009026:	e9d4 3200 	ldrd	r3, r2, [r4]
2400902a:	e76a      	b.n	24008f02 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->Sai1ClockSelection)
2400902c:	4635      	mov	r5, r6
    if (ret == HAL_OK)
2400902e:	2d00      	cmp	r5, #0
24009030:	f000 8114 	beq.w	2400925c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
24009034:	462e      	mov	r6, r5
24009036:	e9d4 3200 	ldrd	r3, r2, [r4]
2400903a:	e4ee      	b.n	24008a1a <HAL_RCCEx_PeriphCLKConfig+0x72>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2400903c:	2101      	movs	r1, #1
2400903e:	f104 0008 	add.w	r0, r4, #8
24009042:	f7ff fbbd 	bl	240087c0 <RCCEx_PLL2_Config>
24009046:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24009048:	2d00      	cmp	r5, #0
2400904a:	f040 8149 	bne.w	240092e0 <HAL_RCCEx_PeriphCLKConfig+0x938>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
2400904e:	4a05      	ldr	r2, [pc, #20]	; (24009064 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
24009050:	6f21      	ldr	r1, [r4, #112]	; 0x70
24009052:	6d13      	ldr	r3, [r2, #80]	; 0x50
24009054:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
24009058:	430b      	orrs	r3, r1
2400905a:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
2400905c:	e9d4 3200 	ldrd	r3, r2, [r4]
24009060:	e5b8      	b.n	24008bd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
24009062:	bf00      	nop
24009064:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24009068:	2101      	movs	r1, #1
2400906a:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400906e:	f7ff fc21 	bl	240088b4 <RCCEx_PLL3_Config>
24009072:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24009074:	2d00      	cmp	r5, #0
24009076:	f040 8173 	bne.w	24009360 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
2400907a:	4abb      	ldr	r2, [pc, #748]	; (24009368 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
2400907c:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
24009080:	6d53      	ldr	r3, [r2, #84]	; 0x54
24009082:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
24009086:	430b      	orrs	r3, r1
24009088:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
2400908a:	e9d4 3200 	ldrd	r3, r2, [r4]
2400908e:	e718      	b.n	24008ec2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24009090:	2102      	movs	r1, #2
24009092:	f104 0028 	add.w	r0, r4, #40	; 0x28
24009096:	f7ff fc0d 	bl	240088b4 <RCCEx_PLL3_Config>
2400909a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400909c:	2d00      	cmp	r5, #0
2400909e:	f040 815b 	bne.w	24009358 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
240090a2:	4ab1      	ldr	r2, [pc, #708]	; (24009368 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
240090a4:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
240090a8:	6d93      	ldr	r3, [r2, #88]	; 0x58
240090aa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
240090ae:	430b      	orrs	r3, r1
240090b0:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
240090b2:	e9d4 3200 	ldrd	r3, r2, [r4]
240090b6:	e6f2      	b.n	24008e9e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
240090b8:	2101      	movs	r1, #1
240090ba:	f104 0008 	add.w	r0, r4, #8
240090be:	f7ff fb7f 	bl	240087c0 <RCCEx_PLL2_Config>
240090c2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240090c4:	2d00      	cmp	r5, #0
240090c6:	f040 8107 	bne.w	240092d8 <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
240090ca:	4aa7      	ldr	r2, [pc, #668]	; (24009368 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
240090cc:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
240090ce:	6d53      	ldr	r3, [r2, #84]	; 0x54
240090d0:	f023 0338 	bic.w	r3, r3, #56	; 0x38
240090d4:	430b      	orrs	r3, r1
240090d6:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
240090d8:	e9d4 3200 	ldrd	r3, r2, [r4]
240090dc:	e610      	b.n	24008d00 <HAL_RCCEx_PeriphCLKConfig+0x358>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
240090de:	2102      	movs	r1, #2
240090e0:	f104 0028 	add.w	r0, r4, #40	; 0x28
240090e4:	f7ff fbe6 	bl	240088b4 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
240090e8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
240090ec:	2800      	cmp	r0, #0
240090ee:	f43f aef7 	beq.w	24008ee0 <HAL_RCCEx_PeriphCLKConfig+0x538>
      status = HAL_ERROR;
240090f2:	2601      	movs	r6, #1
240090f4:	e6f4      	b.n	24008ee0 <HAL_RCCEx_PeriphCLKConfig+0x538>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240090f6:	2100      	movs	r1, #0
240090f8:	f104 0008 	add.w	r0, r4, #8
240090fc:	f7ff fb60 	bl	240087c0 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
24009100:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
24009102:	2800      	cmp	r0, #0
24009104:	f43f af46 	beq.w	24008f94 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
24009108:	0797      	lsls	r7, r2, #30
2400910a:	4606      	mov	r6, r0
2400910c:	f57f af45 	bpl.w	24008f9a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24009110:	2101      	movs	r1, #1
24009112:	f104 0008 	add.w	r0, r4, #8
24009116:	f7ff fb53 	bl	240087c0 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
2400911a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
2400911c:	2800      	cmp	r0, #0
2400911e:	f43f af3c 	beq.w	24008f9a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
24009122:	0755      	lsls	r5, r2, #29
24009124:	4606      	mov	r6, r0
24009126:	f57f af3b 	bpl.w	24008fa0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2400912a:	2102      	movs	r1, #2
2400912c:	f104 0008 	add.w	r0, r4, #8
24009130:	f7ff fb46 	bl	240087c0 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
24009134:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
24009136:	2800      	cmp	r0, #0
24009138:	f43f af32 	beq.w	24008fa0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
2400913c:	4606      	mov	r6, r0
2400913e:	0710      	lsls	r0, r2, #28
24009140:	f57f af31 	bpl.w	24008fa6 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24009144:	2100      	movs	r1, #0
24009146:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400914a:	f7ff fbb3 	bl	240088b4 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
2400914e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
24009150:	2800      	cmp	r0, #0
24009152:	f43f af28 	beq.w	24008fa6 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
24009156:	06d1      	lsls	r1, r2, #27
24009158:	4606      	mov	r6, r0
2400915a:	f57f af27 	bpl.w	24008fac <HAL_RCCEx_PeriphCLKConfig+0x604>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400915e:	f104 0528 	add.w	r5, r4, #40	; 0x28
24009162:	2101      	movs	r1, #1
24009164:	4628      	mov	r0, r5
24009166:	f7ff fba5 	bl	240088b4 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
2400916a:	2800      	cmp	r0, #0
2400916c:	f000 8130 	beq.w	240093d0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
24009170:	6863      	ldr	r3, [r4, #4]
24009172:	069b      	lsls	r3, r3, #26
24009174:	d550      	bpl.n	24009218 <HAL_RCCEx_PeriphCLKConfig+0x870>
24009176:	4606      	mov	r6, r0
24009178:	e047      	b.n	2400920a <HAL_RCCEx_PeriphCLKConfig+0x862>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
2400917a:	4f7c      	ldr	r7, [pc, #496]	; (2400936c <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
2400917c:	683b      	ldr	r3, [r7, #0]
2400917e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24009182:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
24009184:	f7fb fe0c 	bl	24004da0 <HAL_GetTick>
24009188:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
2400918a:	e006      	b.n	2400919a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
2400918c:	f7fb fe08 	bl	24004da0 <HAL_GetTick>
24009190:	eba0 0008 	sub.w	r0, r0, r8
24009194:	2864      	cmp	r0, #100	; 0x64
24009196:	f200 81e2 	bhi.w	2400955e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
2400919a:	683b      	ldr	r3, [r7, #0]
2400919c:	05da      	lsls	r2, r3, #23
2400919e:	d5f5      	bpl.n	2400918c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    if (ret == HAL_OK)
240091a0:	2d00      	cmp	r5, #0
240091a2:	f040 820b 	bne.w	240095bc <HAL_RCCEx_PeriphCLKConfig+0xc14>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
240091a6:	4b70      	ldr	r3, [pc, #448]	; (24009368 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
240091a8:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
240091ac:	6f19      	ldr	r1, [r3, #112]	; 0x70
240091ae:	4051      	eors	r1, r2
240091b0:	f411 7f40 	tst.w	r1, #768	; 0x300
240091b4:	d00d      	beq.n	240091d2 <HAL_RCCEx_PeriphCLKConfig+0x82a>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
240091b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
240091b8:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
240091ba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
240091be:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
240091c2:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
240091c4:	6f19      	ldr	r1, [r3, #112]	; 0x70
240091c6:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
240091ca:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
240091cc:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
240091ce:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
240091d2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
240091d6:	f000 81d3 	beq.w	24009580 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
240091da:	f402 7340 	and.w	r3, r2, #768	; 0x300
240091de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
240091e2:	f000 81e1 	beq.w	240095a8 <HAL_RCCEx_PeriphCLKConfig+0xc00>
240091e6:	4a60      	ldr	r2, [pc, #384]	; (24009368 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
240091e8:	6913      	ldr	r3, [r2, #16]
240091ea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
240091ee:	6113      	str	r3, [r2, #16]
240091f0:	4a5d      	ldr	r2, [pc, #372]	; (24009368 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
240091f2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
240091f6:	6f11      	ldr	r1, [r2, #112]	; 0x70
240091f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
240091fc:	430b      	orrs	r3, r1
240091fe:	6713      	str	r3, [r2, #112]	; 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
24009200:	e9d4 3200 	ldrd	r3, r2, [r4]
24009204:	e54a      	b.n	24008c9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24009206:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2400920a:	2102      	movs	r1, #2
2400920c:	4628      	mov	r0, r5
2400920e:	f7ff fb51 	bl	240088b4 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
24009212:	2800      	cmp	r0, #0
24009214:	f43f aecd 	beq.w	24008fb2 <HAL_RCCEx_PeriphCLKConfig+0x60a>
  return HAL_ERROR;
24009218:	2001      	movs	r0, #1
}
2400921a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
2400921e:	4a52      	ldr	r2, [pc, #328]	; (24009368 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
24009220:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
24009224:	6d93      	ldr	r3, [r2, #88]	; 0x58
24009226:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
2400922a:	430b      	orrs	r3, r1
2400922c:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
2400922e:	e9d4 3200 	ldrd	r3, r2, [r4]
24009232:	e446      	b.n	24008ac2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
24009234:	4a4c      	ldr	r2, [pc, #304]	; (24009368 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
24009236:	6de1      	ldr	r1, [r4, #92]	; 0x5c
24009238:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400923a:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
2400923e:	430b      	orrs	r3, r1
24009240:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
24009242:	e9d4 3200 	ldrd	r3, r2, [r4]
24009246:	e402      	b.n	24008a4e <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
24009248:	4a47      	ldr	r2, [pc, #284]	; (24009368 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
2400924a:	6e21      	ldr	r1, [r4, #96]	; 0x60
2400924c:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400924e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
24009252:	430b      	orrs	r3, r1
24009254:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
24009256:	e9d4 3200 	ldrd	r3, r2, [r4]
2400925a:	e46b      	b.n	24008b34 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
2400925c:	4a42      	ldr	r2, [pc, #264]	; (24009368 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
2400925e:	6da1      	ldr	r1, [r4, #88]	; 0x58
24009260:	6d13      	ldr	r3, [r2, #80]	; 0x50
24009262:	f023 0307 	bic.w	r3, r3, #7
24009266:	430b      	orrs	r3, r1
24009268:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
2400926a:	e9d4 3200 	ldrd	r3, r2, [r4]
2400926e:	f7ff bbd4 	b.w	24008a1a <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
24009272:	4a3d      	ldr	r2, [pc, #244]	; (24009368 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
24009274:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
24009278:	6d93      	ldr	r3, [r2, #88]	; 0x58
2400927a:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
2400927e:	430b      	orrs	r3, r1
24009280:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
24009282:	e9d4 3200 	ldrd	r3, r2, [r4]
24009286:	f7ff bbff 	b.w	24008a88 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2400928a:	2102      	movs	r1, #2
2400928c:	f104 0008 	add.w	r0, r4, #8
24009290:	f7ff fa96 	bl	240087c0 <RCCEx_PLL2_Config>
24009294:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24009296:	2d00      	cmp	r5, #0
24009298:	d07a      	beq.n	24009390 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
2400929a:	462e      	mov	r6, r5
2400929c:	e9d4 3200 	ldrd	r3, r2, [r4]
240092a0:	e61b      	b.n	24008eda <HAL_RCCEx_PeriphCLKConfig+0x532>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240092a2:	4a31      	ldr	r2, [pc, #196]	; (24009368 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
240092a4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
240092a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240092aa:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
240092ac:	e43c      	b.n	24008b28 <HAL_RCCEx_PeriphCLKConfig+0x180>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240092ae:	4a2e      	ldr	r2, [pc, #184]	; (24009368 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
240092b0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
240092b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240092b6:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
240092b8:	f7ff bbfd 	b.w	24008ab6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240092bc:	4a2a      	ldr	r2, [pc, #168]	; (24009368 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
240092be:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
240092c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240092c4:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
240092c6:	f7ff bbbc 	b.w	24008a42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240092ca:	4a27      	ldr	r2, [pc, #156]	; (24009368 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
240092cc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
240092ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240092d2:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
240092d4:	f7ff bbd2 	b.w	24008a7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
240092d8:	e9d4 3200 	ldrd	r3, r2, [r4]
240092dc:	462e      	mov	r6, r5
240092de:	e50f      	b.n	24008d00 <HAL_RCCEx_PeriphCLKConfig+0x358>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
240092e0:	e9d4 3200 	ldrd	r3, r2, [r4]
240092e4:	462e      	mov	r6, r5
240092e6:	e475      	b.n	24008bd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
240092e8:	4a1f      	ldr	r2, [pc, #124]	; (24009368 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
240092ea:	6fa1      	ldr	r1, [r4, #120]	; 0x78
240092ec:	6d53      	ldr	r3, [r2, #84]	; 0x54
240092ee:	f023 0307 	bic.w	r3, r3, #7
240092f2:	430b      	orrs	r3, r1
240092f4:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
240092f6:	e9d4 3200 	ldrd	r3, r2, [r4]
240092fa:	e51b      	b.n	24008d34 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
240092fc:	4a1a      	ldr	r2, [pc, #104]	; (24009368 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
240092fe:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
24009302:	6d93      	ldr	r3, [r2, #88]	; 0x58
24009304:	f023 0307 	bic.w	r3, r3, #7
24009308:	430b      	orrs	r3, r1
2400930a:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
2400930c:	e9d4 3200 	ldrd	r3, r2, [r4]
24009310:	e52e      	b.n	24008d70 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
24009312:	e9d4 3200 	ldrd	r3, r2, [r4]
24009316:	462e      	mov	r6, r5
24009318:	e54c      	b.n	24008db4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
2400931a:	e9d4 3200 	ldrd	r3, r2, [r4]
2400931e:	462e      	mov	r6, r5
24009320:	f7ff bbec 	b.w	24008afc <HAL_RCCEx_PeriphCLKConfig+0x154>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
24009324:	4a10      	ldr	r2, [pc, #64]	; (24009368 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
24009326:	6ca1      	ldr	r1, [r4, #72]	; 0x48
24009328:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
2400932a:	f023 0303 	bic.w	r3, r3, #3
2400932e:	430b      	orrs	r3, r1
24009330:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
24009332:	e9d4 3200 	ldrd	r3, r2, [r4]
24009336:	e4ae      	b.n	24008c96 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
24009338:	e9d4 3200 	ldrd	r3, r2, [r4]
2400933c:	462e      	mov	r6, r5
2400933e:	e419      	b.n	24008b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
24009340:	e9d4 3200 	ldrd	r3, r2, [r4]
24009344:	462e      	mov	r6, r5
24009346:	e579      	b.n	24008e3c <HAL_RCCEx_PeriphCLKConfig+0x494>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
24009348:	e9d4 3200 	ldrd	r3, r2, [r4]
2400934c:	462e      	mov	r6, r5
2400934e:	e431      	b.n	24008bb4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
24009350:	e9d4 3200 	ldrd	r3, r2, [r4]
24009354:	462e      	mov	r6, r5
24009356:	e54f      	b.n	24008df8 <HAL_RCCEx_PeriphCLKConfig+0x450>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
24009358:	e9d4 3200 	ldrd	r3, r2, [r4]
2400935c:	462e      	mov	r6, r5
2400935e:	e59e      	b.n	24008e9e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
24009360:	e9d4 3200 	ldrd	r3, r2, [r4]
24009364:	462e      	mov	r6, r5
24009366:	e5ac      	b.n	24008ec2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
24009368:	58024400 	.word	0x58024400
2400936c:	58024800 	.word	0x58024800
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24009370:	4a9b      	ldr	r2, [pc, #620]	; (240095e0 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
24009372:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24009374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24009378:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
2400937a:	2d00      	cmp	r5, #0
2400937c:	f43f ae4b 	beq.w	24009016 <HAL_RCCEx_PeriphCLKConfig+0x66e>
24009380:	e010      	b.n	240093a4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24009382:	4a97      	ldr	r2, [pc, #604]	; (240095e0 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
24009384:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24009386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400938a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
2400938c:	2d00      	cmp	r5, #0
2400938e:	d184      	bne.n	2400929a <HAL_RCCEx_PeriphCLKConfig+0x8f2>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
24009390:	4a93      	ldr	r2, [pc, #588]	; (240095e0 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
24009392:	6d21      	ldr	r1, [r4, #80]	; 0x50
24009394:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
24009396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2400939a:	430b      	orrs	r3, r1
2400939c:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
2400939e:	e9d4 3200 	ldrd	r3, r2, [r4]
240093a2:	e59a      	b.n	24008eda <HAL_RCCEx_PeriphCLKConfig+0x532>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
240093a4:	e9d4 3200 	ldrd	r3, r2, [r4]
240093a8:	462e      	mov	r6, r5
240093aa:	e5aa      	b.n	24008f02 <HAL_RCCEx_PeriphCLKConfig+0x55a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240093ac:	4a8c      	ldr	r2, [pc, #560]	; (240095e0 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
240093ae:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
240093b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240093b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
240093b6:	2d00      	cmp	r5, #0
240093b8:	f43f ae5f 	beq.w	2400907a <HAL_RCCEx_PeriphCLKConfig+0x6d2>
240093bc:	e7d0      	b.n	24009360 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240093be:	f104 0008 	add.w	r0, r4, #8
240093c2:	f7ff f9fd 	bl	240087c0 <RCCEx_PLL2_Config>
240093c6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240093c8:	2d00      	cmp	r5, #0
240093ca:	f43f ae6a 	beq.w	240090a2 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
240093ce:	e7c3      	b.n	24009358 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
240093d0:	6862      	ldr	r2, [r4, #4]
240093d2:	e5eb      	b.n	24008fac <HAL_RCCEx_PeriphCLKConfig+0x604>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
240093d4:	2102      	movs	r1, #2
240093d6:	f104 0028 	add.w	r0, r4, #40	; 0x28
240093da:	f7ff fa6b 	bl	240088b4 <RCCEx_PLL3_Config>
240093de:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240093e0:	2d00      	cmp	r5, #0
240093e2:	f43f acff 	beq.w	24008de4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
240093e6:	e7b3      	b.n	24009350 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
240093e8:	2102      	movs	r1, #2
240093ea:	f104 0028 	add.w	r0, r4, #40	; 0x28
240093ee:	f7ff fa61 	bl	240088b4 <RCCEx_PLL3_Config>
240093f2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240093f4:	2d00      	cmp	r5, #0
240093f6:	f43f ad17 	beq.w	24008e28 <HAL_RCCEx_PeriphCLKConfig+0x480>
240093fa:	e7a1      	b.n	24009340 <HAL_RCCEx_PeriphCLKConfig+0x998>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240093fc:	4a78      	ldr	r2, [pc, #480]	; (240095e0 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
240093fe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24009400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24009404:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
24009406:	2d00      	cmp	r5, #0
24009408:	f43f ae21 	beq.w	2400904e <HAL_RCCEx_PeriphCLKConfig+0x6a6>
2400940c:	e768      	b.n	240092e0 <HAL_RCCEx_PeriphCLKConfig+0x938>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400940e:	2101      	movs	r1, #1
24009410:	f104 0028 	add.w	r0, r4, #40	; 0x28
24009414:	f7ff fa4e 	bl	240088b4 <RCCEx_PLL3_Config>
24009418:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400941a:	2d00      	cmp	r5, #0
2400941c:	f43f aba1 	beq.w	24008b62 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
24009420:	e78a      	b.n	24009338 <HAL_RCCEx_PeriphCLKConfig+0x990>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24009422:	2101      	movs	r1, #1
24009424:	f104 0028 	add.w	r0, r4, #40	; 0x28
24009428:	f7ff fa44 	bl	240088b4 <RCCEx_PLL3_Config>
2400942c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400942e:	2d00      	cmp	r5, #0
24009430:	f43f abb6 	beq.w	24008ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
24009434:	e788      	b.n	24009348 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24009436:	2102      	movs	r1, #2
24009438:	f104 0008 	add.w	r0, r4, #8
2400943c:	f7ff f9c0 	bl	240087c0 <RCCEx_PLL2_Config>
24009440:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24009442:	2d00      	cmp	r5, #0
24009444:	f43f ab51 	beq.w	24008aea <HAL_RCCEx_PeriphCLKConfig+0x142>
24009448:	e767      	b.n	2400931a <HAL_RCCEx_PeriphCLKConfig+0x972>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2400944a:	2102      	movs	r1, #2
2400944c:	f104 0028 	add.w	r0, r4, #40	; 0x28
24009450:	f7ff fa30 	bl	240088b4 <RCCEx_PLL3_Config>
24009454:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24009456:	2d00      	cmp	r5, #0
24009458:	f43f aca2 	beq.w	24008da0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
2400945c:	e759      	b.n	24009312 <HAL_RCCEx_PeriphCLKConfig+0x96a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2400945e:	2102      	movs	r1, #2
24009460:	f104 0008 	add.w	r0, r4, #8
24009464:	f7ff f9ac 	bl	240087c0 <RCCEx_PLL2_Config>
24009468:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400946a:	2d00      	cmp	r5, #0
2400946c:	f43f af5a 	beq.w	24009324 <HAL_RCCEx_PeriphCLKConfig+0x97c>
24009470:	e40e      	b.n	24008c90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24009472:	2102      	movs	r1, #2
24009474:	f104 0028 	add.w	r0, r4, #40	; 0x28
24009478:	f7ff fa1c 	bl	240088b4 <RCCEx_PLL3_Config>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
2400947c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24009480:	2800      	cmp	r0, #0
24009482:	f43f ace3 	beq.w	24008e4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        status = HAL_ERROR;
24009486:	2601      	movs	r6, #1
24009488:	e4e0      	b.n	24008e4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
2400948a:	2102      	movs	r1, #2
2400948c:	f104 0028 	add.w	r0, r4, #40	; 0x28
24009490:	f7ff fa10 	bl	240088b4 <RCCEx_PLL3_Config>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
24009494:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24009498:	2800      	cmp	r0, #0
2400949a:	f43f ace7 	beq.w	24008e6c <HAL_RCCEx_PeriphCLKConfig+0x4c4>
        status = HAL_ERROR;
2400949e:	2601      	movs	r6, #1
240094a0:	e4e4      	b.n	24008e6c <HAL_RCCEx_PeriphCLKConfig+0x4c4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
240094a2:	2100      	movs	r1, #0
240094a4:	f104 0028 	add.w	r0, r4, #40	; 0x28
240094a8:	f7ff fa04 	bl	240088b4 <RCCEx_PLL3_Config>
240094ac:	4605      	mov	r5, r0
        break;
240094ae:	f7ff bae5 	b.w	24008a7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
240094b2:	2102      	movs	r1, #2
240094b4:	3028      	adds	r0, #40	; 0x28
240094b6:	f7ff f9fd 	bl	240088b4 <RCCEx_PLL3_Config>
240094ba:	4606      	mov	r6, r0
    if (ret == HAL_OK)
240094bc:	2e00      	cmp	r6, #0
240094be:	f43f aa8f 	beq.w	240089e0 <HAL_RCCEx_PeriphCLKConfig+0x38>
240094c2:	f7ff ba9a 	b.w	240089fa <HAL_RCCEx_PeriphCLKConfig+0x52>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240094c6:	4a46      	ldr	r2, [pc, #280]	; (240095e0 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
        break;
240094c8:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240094ca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
240094cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240094d0:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
240094d2:	e5ac      	b.n	2400902e <HAL_RCCEx_PeriphCLKConfig+0x686>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240094d4:	2100      	movs	r1, #0
240094d6:	f104 0008 	add.w	r0, r4, #8
240094da:	f7ff f971 	bl	240087c0 <RCCEx_PLL2_Config>
240094de:	4605      	mov	r5, r0
        break;
240094e0:	e5a5      	b.n	2400902e <HAL_RCCEx_PeriphCLKConfig+0x686>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
240094e2:	2100      	movs	r1, #0
240094e4:	f104 0028 	add.w	r0, r4, #40	; 0x28
240094e8:	f7ff f9e4 	bl	240088b4 <RCCEx_PLL3_Config>
240094ec:	4605      	mov	r5, r0
        break;
240094ee:	f7ff bb1b 	b.w	24008b28 <HAL_RCCEx_PeriphCLKConfig+0x180>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
240094f2:	2100      	movs	r1, #0
240094f4:	f104 0028 	add.w	r0, r4, #40	; 0x28
240094f8:	f7ff f9dc 	bl	240088b4 <RCCEx_PLL3_Config>
240094fc:	4605      	mov	r5, r0
        break;
240094fe:	f7ff bada 	b.w	24008ab6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24009502:	2100      	movs	r1, #0
24009504:	f104 0028 	add.w	r0, r4, #40	; 0x28
24009508:	f7ff f9d4 	bl	240088b4 <RCCEx_PLL3_Config>
2400950c:	4605      	mov	r5, r0
        break;
2400950e:	e58e      	b.n	2400902e <HAL_RCCEx_PeriphCLKConfig+0x686>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24009510:	2100      	movs	r1, #0
24009512:	f104 0028 	add.w	r0, r4, #40	; 0x28
24009516:	f7ff f9cd 	bl	240088b4 <RCCEx_PLL3_Config>
2400951a:	4605      	mov	r5, r0
        break;
2400951c:	f7ff ba91 	b.w	24008a42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24009520:	2101      	movs	r1, #1
24009522:	f104 0028 	add.w	r0, r4, #40	; 0x28
24009526:	f7ff f9c5 	bl	240088b4 <RCCEx_PLL3_Config>
2400952a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400952c:	2d00      	cmp	r5, #0
2400952e:	f43f aee5 	beq.w	240092fc <HAL_RCCEx_PeriphCLKConfig+0x954>
24009532:	e41a      	b.n	24008d6a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24009534:	2101      	movs	r1, #1
24009536:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400953a:	f7ff f9bb 	bl	240088b4 <RCCEx_PLL3_Config>
2400953e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24009540:	2d00      	cmp	r5, #0
24009542:	f43f aed1 	beq.w	240092e8 <HAL_RCCEx_PeriphCLKConfig+0x940>
24009546:	f7ff bbf2 	b.w	24008d2e <HAL_RCCEx_PeriphCLKConfig+0x386>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400954a:	2101      	movs	r1, #1
2400954c:	f104 0028 	add.w	r0, r4, #40	; 0x28
24009550:	f7ff f9b0 	bl	240088b4 <RCCEx_PLL3_Config>
24009554:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24009556:	2d00      	cmp	r5, #0
24009558:	f43f adb7 	beq.w	240090ca <HAL_RCCEx_PeriphCLKConfig+0x722>
2400955c:	e6bc      	b.n	240092d8 <HAL_RCCEx_PeriphCLKConfig+0x930>
        status = ret;
2400955e:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
24009560:	e9d4 3200 	ldrd	r3, r2, [r4]
24009564:	4635      	mov	r5, r6
24009566:	f7ff bb99 	b.w	24008c9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    switch (PeriphClkInit->SpdifrxClockSelection)
2400956a:	2601      	movs	r6, #1
2400956c:	f7ff ba47 	b.w	240089fe <HAL_RCCEx_PeriphCLKConfig+0x56>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24009570:	4a1b      	ldr	r2, [pc, #108]	; (240095e0 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
24009572:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24009574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24009578:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
2400957a:	6e81      	ldr	r1, [r0, #104]	; 0x68
2400957c:	f7ff ba36 	b.w	240089ec <HAL_RCCEx_PeriphCLKConfig+0x44>
        tickstart = HAL_GetTick();
24009580:	f7fb fc0e 	bl	24004da0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24009584:	f8df 8058 	ldr.w	r8, [pc, #88]	; 240095e0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
        tickstart = HAL_GetTick();
24009588:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2400958a:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2400958e:	e004      	b.n	2400959a <HAL_RCCEx_PeriphCLKConfig+0xbf2>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24009590:	f7fb fc06 	bl	24004da0 <HAL_GetTick>
24009594:	1bc0      	subs	r0, r0, r7
24009596:	4548      	cmp	r0, r9
24009598:	d8e1      	bhi.n	2400955e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2400959a:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
2400959e:	079b      	lsls	r3, r3, #30
240095a0:	d5f6      	bpl.n	24009590 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
240095a2:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
240095a6:	e618      	b.n	240091da <HAL_RCCEx_PeriphCLKConfig+0x832>
240095a8:	490d      	ldr	r1, [pc, #52]	; (240095e0 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
240095aa:	4b0e      	ldr	r3, [pc, #56]	; (240095e4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>)
240095ac:	ea03 1312 	and.w	r3, r3, r2, lsr #4
240095b0:	690a      	ldr	r2, [r1, #16]
240095b2:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
240095b6:	4313      	orrs	r3, r2
240095b8:	610b      	str	r3, [r1, #16]
240095ba:	e619      	b.n	240091f0 <HAL_RCCEx_PeriphCLKConfig+0x848>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
240095bc:	e9d4 3200 	ldrd	r3, r2, [r4]
240095c0:	462e      	mov	r6, r5
240095c2:	f7ff bb6b 	b.w	24008c9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    switch (PeriphClkInit->FmcClockSelection)
240095c6:	2601      	movs	r6, #1
240095c8:	4635      	mov	r5, r6
240095ca:	f7ff bb64 	b.w	24008c96 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    switch (PeriphClkInit->Lpuart1ClockSelection)
240095ce:	2601      	movs	r6, #1
240095d0:	4635      	mov	r5, r6
240095d2:	f7ff bbcd 	b.w	24008d70 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
    switch (PeriphClkInit->Usart234578ClockSelection)
240095d6:	2601      	movs	r6, #1
240095d8:	4635      	mov	r5, r6
240095da:	f7ff bbab 	b.w	24008d34 <HAL_RCCEx_PeriphCLKConfig+0x38c>
240095de:	bf00      	nop
240095e0:	58024400 	.word	0x58024400
240095e4:	00ffffcf 	.word	0x00ffffcf

240095e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240095e8:	4a50      	ldr	r2, [pc, #320]	; (2400972c <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
{
240095ea:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240095ec:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
240095ee:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
240095f0:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll2m != 0U)
240095f2:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
240095f6:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
240095fa:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
  if (pll2m != 0U)
240095fc:	d05d      	beq.n	240096ba <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
240095fe:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
24009602:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24009606:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
2400960a:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
2400960e:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
24009610:	ee07 4a90 	vmov	s15, r4
24009614:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
24009618:	d003      	beq.n	24009622 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
2400961a:	2902      	cmp	r1, #2
2400961c:	d078      	beq.n	24009710 <HAL_RCCEx_GetPLL2ClockFreq+0x128>
2400961e:	2900      	cmp	r1, #0
24009620:	d050      	beq.n	240096c4 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24009622:	ee07 3a90 	vmov	s15, r3
24009626:	ed9f 5a42 	vldr	s10, [pc, #264]	; 24009730 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
2400962a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400962e:	6b93      	ldr	r3, [r2, #56]	; 0x38
24009630:	eec5 6a27 	vdiv.f32	s13, s10, s15
24009634:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 24009734 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
24009638:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400963c:	ee07 3a90 	vmov	s15, r3
24009640:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24009644:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009648:	ee77 7aa5 	vadd.f32	s15, s15, s11
2400964c:	eee7 7a06 	vfma.f32	s15, s14, s12
24009650:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
24009654:	4a35      	ldr	r2, [pc, #212]	; (2400972c <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
24009656:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2400965a:	6b93      	ldr	r3, [r2, #56]	; 0x38
2400965c:	f3c3 2346 	ubfx	r3, r3, #9, #7
24009660:	ee07 3a90 	vmov	s15, r3
24009664:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
24009668:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
2400966a:	ee77 7a86 	vadd.f32	s15, s15, s12
2400966e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24009672:	eebc 7ac7 	vcvt.u32.f32	s14, s14
24009676:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
2400967a:	6b93      	ldr	r3, [r2, #56]	; 0x38
2400967c:	f3c3 4306 	ubfx	r3, r3, #16, #7
24009680:	ee07 3a90 	vmov	s15, r3
24009684:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009688:	ee77 7a86 	vadd.f32	s15, s15, s12
2400968c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24009690:	eebc 7ac7 	vcvt.u32.f32	s14, s14
24009694:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
24009698:	6b93      	ldr	r3, [r2, #56]	; 0x38
2400969a:	f3c3 6306 	ubfx	r3, r3, #24, #7
2400969e:	ee07 3a10 	vmov	s14, r3
240096a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
240096a6:	ee37 7a06 	vadd.f32	s14, s14, s12
240096aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
240096ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240096b2:	ee17 3a90 	vmov	r3, s15
240096b6:	6083      	str	r3, [r0, #8]
}
240096b8:	4770      	bx	lr
240096ba:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
240096bc:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
240096c0:	6083      	str	r3, [r0, #8]
}
240096c2:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
240096c4:	6811      	ldr	r1, [r2, #0]
240096c6:	0689      	lsls	r1, r1, #26
240096c8:	d529      	bpl.n	2400971e <HAL_RCCEx_GetPLL2ClockFreq+0x136>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240096ca:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
240096cc:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240096d0:	4919      	ldr	r1, [pc, #100]	; (24009738 <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
240096d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240096d6:	6b93      	ldr	r3, [r2, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240096d8:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
240096dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240096e0:	ed9f 5a14 	vldr	s10, [pc, #80]	; 24009734 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
240096e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240096e8:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
240096ea:	ee06 3a10 	vmov	s12, r3
240096ee:	ee05 1a90 	vmov	s11, r1
240096f2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
240096f6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
240096fa:	ee36 6a26 	vadd.f32	s12, s12, s13
240096fe:	eec5 6aa7 	vdiv.f32	s13, s11, s15
24009702:	eef0 7a46 	vmov.f32	s15, s12
24009706:	eee7 7a05 	vfma.f32	s15, s14, s10
2400970a:	ee66 6aa7 	vmul.f32	s13, s13, s15
2400970e:	e7a1      	b.n	24009654 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24009710:	ee07 3a90 	vmov	s15, r3
24009714:	ed9f 5a09 	vldr	s10, [pc, #36]	; 2400973c <HAL_RCCEx_GetPLL2ClockFreq+0x154>
24009718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400971c:	e787      	b.n	2400962e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2400971e:	ee07 3a90 	vmov	s15, r3
24009722:	ed9f 5a07 	vldr	s10, [pc, #28]	; 24009740 <HAL_RCCEx_GetPLL2ClockFreq+0x158>
24009726:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400972a:	e780      	b.n	2400962e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
2400972c:	58024400 	.word	0x58024400
24009730:	4a742400 	.word	0x4a742400
24009734:	39000000 	.word	0x39000000
24009738:	03d09000 	.word	0x03d09000
2400973c:	4b742400 	.word	0x4b742400
24009740:	4c742400 	.word	0x4c742400

24009744 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24009744:	4a50      	ldr	r2, [pc, #320]	; (24009888 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
{
24009746:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24009748:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
2400974a:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
2400974c:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll3m != 0U)
2400974e:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
24009752:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
24009756:	6c54      	ldr	r4, [r2, #68]	; 0x44
  if (pll3m != 0U)
24009758:	d05d      	beq.n	24009816 <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
2400975a:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
2400975e:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24009762:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
24009766:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
2400976a:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
2400976c:	ee07 4a90 	vmov	s15, r4
24009770:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
24009774:	d003      	beq.n	2400977e <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
24009776:	2902      	cmp	r1, #2
24009778:	d078      	beq.n	2400986c <HAL_RCCEx_GetPLL3ClockFreq+0x128>
2400977a:	2900      	cmp	r1, #0
2400977c:	d050      	beq.n	24009820 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2400977e:	ee07 3a90 	vmov	s15, r3
24009782:	ed9f 5a42 	vldr	s10, [pc, #264]	; 2400988c <HAL_RCCEx_GetPLL3ClockFreq+0x148>
24009786:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400978a:	6c13      	ldr	r3, [r2, #64]	; 0x40
2400978c:	eec5 6a27 	vdiv.f32	s13, s10, s15
24009790:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 24009890 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
24009794:	f3c3 0308 	ubfx	r3, r3, #0, #9
24009798:	ee07 3a90 	vmov	s15, r3
2400979c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
240097a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240097a4:	ee77 7aa5 	vadd.f32	s15, s15, s11
240097a8:	eee7 7a06 	vfma.f32	s15, s14, s12
240097ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
240097b0:	4a35      	ldr	r2, [pc, #212]	; (24009888 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
240097b2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
240097b6:	6c13      	ldr	r3, [r2, #64]	; 0x40
240097b8:	f3c3 2346 	ubfx	r3, r3, #9, #7
240097bc:	ee07 3a90 	vmov	s15, r3
240097c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
240097c4:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
240097c6:	ee77 7a86 	vadd.f32	s15, s15, s12
240097ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240097ce:	eebc 7ac7 	vcvt.u32.f32	s14, s14
240097d2:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
240097d6:	6c13      	ldr	r3, [r2, #64]	; 0x40
240097d8:	f3c3 4306 	ubfx	r3, r3, #16, #7
240097dc:	ee07 3a90 	vmov	s15, r3
240097e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240097e4:	ee77 7a86 	vadd.f32	s15, s15, s12
240097e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240097ec:	eebc 7ac7 	vcvt.u32.f32	s14, s14
240097f0:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
240097f4:	6c13      	ldr	r3, [r2, #64]	; 0x40
240097f6:	f3c3 6306 	ubfx	r3, r3, #24, #7
240097fa:	ee07 3a10 	vmov	s14, r3
240097fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24009802:	ee37 7a06 	vadd.f32	s14, s14, s12
24009806:	eec6 7a87 	vdiv.f32	s15, s13, s14
2400980a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2400980e:	ee17 3a90 	vmov	r3, s15
24009812:	6083      	str	r3, [r0, #8]
}
24009814:	4770      	bx	lr
24009816:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
24009818:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
2400981c:	6083      	str	r3, [r0, #8]
}
2400981e:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24009820:	6811      	ldr	r1, [r2, #0]
24009822:	0689      	lsls	r1, r1, #26
24009824:	d529      	bpl.n	2400987a <HAL_RCCEx_GetPLL3ClockFreq+0x136>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009826:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24009828:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400982c:	4919      	ldr	r1, [pc, #100]	; (24009894 <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2400982e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24009832:	6c13      	ldr	r3, [r2, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009834:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24009838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400983c:	ed9f 5a14 	vldr	s10, [pc, #80]	; 24009890 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
24009840:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009844:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24009846:	ee06 3a10 	vmov	s12, r3
2400984a:	ee05 1a90 	vmov	s11, r1
2400984e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
24009852:	eef8 5ae5 	vcvt.f32.s32	s11, s11
24009856:	ee36 6a26 	vadd.f32	s12, s12, s13
2400985a:	eec5 6aa7 	vdiv.f32	s13, s11, s15
2400985e:	eef0 7a46 	vmov.f32	s15, s12
24009862:	eee7 7a05 	vfma.f32	s15, s14, s10
24009866:	ee66 6aa7 	vmul.f32	s13, s13, s15
2400986a:	e7a1      	b.n	240097b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2400986c:	ee07 3a90 	vmov	s15, r3
24009870:	ed9f 5a09 	vldr	s10, [pc, #36]	; 24009898 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
24009874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009878:	e787      	b.n	2400978a <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2400987a:	ee07 3a90 	vmov	s15, r3
2400987e:	ed9f 5a07 	vldr	s10, [pc, #28]	; 2400989c <HAL_RCCEx_GetPLL3ClockFreq+0x158>
24009882:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009886:	e780      	b.n	2400978a <HAL_RCCEx_GetPLL3ClockFreq+0x46>
24009888:	58024400 	.word	0x58024400
2400988c:	4a742400 	.word	0x4a742400
24009890:	39000000 	.word	0x39000000
24009894:	03d09000 	.word	0x03d09000
24009898:	4b742400 	.word	0x4b742400
2400989c:	4c742400 	.word	0x4c742400

240098a0 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240098a0:	4a51      	ldr	r2, [pc, #324]	; (240099e8 <HAL_RCCEx_GetPLL1ClockFreq+0x148>)
{
240098a2:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240098a4:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
240098a6:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
240098a8:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll1m != 0U)
240098aa:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
240098ae:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
240098b2:	6b54      	ldr	r4, [r2, #52]	; 0x34
  if (pll1m != 0U)
240098b4:	d05e      	beq.n	24009974 <HAL_RCCEx_GetPLL1ClockFreq+0xd4>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
240098b6:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
240098ba:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240098be:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
240098c2:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
240098c6:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
240098c8:	ee07 4a90 	vmov	s15, r4
240098cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
240098d0:	f000 8082 	beq.w	240099d8 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
240098d4:	2902      	cmp	r1, #2
240098d6:	d078      	beq.n	240099ca <HAL_RCCEx_GetPLL1ClockFreq+0x12a>
240098d8:	2900      	cmp	r1, #0
240098da:	d050      	beq.n	2400997e <HAL_RCCEx_GetPLL1ClockFreq+0xde>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240098dc:	ee07 3a90 	vmov	s15, r3
240098e0:	ed9f 5a42 	vldr	s10, [pc, #264]	; 240099ec <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
240098e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240098e8:	6b13      	ldr	r3, [r2, #48]	; 0x30
240098ea:	eec5 6a27 	vdiv.f32	s13, s10, s15
240098ee:	ed9f 6a40 	vldr	s12, [pc, #256]	; 240099f0 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
240098f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
240098f6:	ee07 3a90 	vmov	s15, r3
240098fa:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
240098fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009902:	ee77 7aa5 	vadd.f32	s15, s15, s11
24009906:	eee7 7a06 	vfma.f32	s15, s14, s12
2400990a:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
2400990e:	4a36      	ldr	r2, [pc, #216]	; (240099e8 <HAL_RCCEx_GetPLL1ClockFreq+0x148>)
24009910:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24009914:	6b13      	ldr	r3, [r2, #48]	; 0x30
24009916:	f3c3 2346 	ubfx	r3, r3, #9, #7
2400991a:	ee07 3a90 	vmov	s15, r3
2400991e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
24009922:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
24009924:	ee77 7a86 	vadd.f32	s15, s15, s12
24009928:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2400992c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
24009930:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
24009934:	6b13      	ldr	r3, [r2, #48]	; 0x30
24009936:	f3c3 4306 	ubfx	r3, r3, #16, #7
2400993a:	ee07 3a90 	vmov	s15, r3
2400993e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009942:	ee77 7a86 	vadd.f32	s15, s15, s12
24009946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2400994a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
2400994e:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
24009952:	6b13      	ldr	r3, [r2, #48]	; 0x30
24009954:	f3c3 6306 	ubfx	r3, r3, #24, #7
24009958:	ee07 3a10 	vmov	s14, r3
2400995c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24009960:	ee37 7a06 	vadd.f32	s14, s14, s12
24009964:	eec6 7a87 	vdiv.f32	s15, s13, s14
24009968:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2400996c:	ee17 3a90 	vmov	r3, s15
24009970:	6083      	str	r3, [r0, #8]
}
24009972:	4770      	bx	lr
24009974:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
24009976:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
2400997a:	6083      	str	r3, [r0, #8]
}
2400997c:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2400997e:	6811      	ldr	r1, [r2, #0]
24009980:	0689      	lsls	r1, r1, #26
24009982:	d5ab      	bpl.n	240098dc <HAL_RCCEx_GetPLL1ClockFreq+0x3c>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009984:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24009986:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400998a:	491a      	ldr	r1, [pc, #104]	; (240099f4 <HAL_RCCEx_GetPLL1ClockFreq+0x154>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400998c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24009990:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009992:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24009996:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400999a:	ed9f 5a15 	vldr	s10, [pc, #84]	; 240099f0 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
2400999e:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240099a2:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240099a4:	ee06 3a10 	vmov	s12, r3
240099a8:	ee05 1a90 	vmov	s11, r1
240099ac:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
240099b0:	eef8 5ae5 	vcvt.f32.s32	s11, s11
240099b4:	ee36 6a26 	vadd.f32	s12, s12, s13
240099b8:	eec5 6aa7 	vdiv.f32	s13, s11, s15
240099bc:	eef0 7a46 	vmov.f32	s15, s12
240099c0:	eee7 7a05 	vfma.f32	s15, s14, s10
240099c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
240099c8:	e7a1      	b.n	2400990e <HAL_RCCEx_GetPLL1ClockFreq+0x6e>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240099ca:	ee07 3a90 	vmov	s15, r3
240099ce:	ed9f 5a0a 	vldr	s10, [pc, #40]	; 240099f8 <HAL_RCCEx_GetPLL1ClockFreq+0x158>
240099d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240099d6:	e787      	b.n	240098e8 <HAL_RCCEx_GetPLL1ClockFreq+0x48>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240099d8:	ee07 3a90 	vmov	s15, r3
240099dc:	ed9f 5a07 	vldr	s10, [pc, #28]	; 240099fc <HAL_RCCEx_GetPLL1ClockFreq+0x15c>
240099e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240099e4:	e780      	b.n	240098e8 <HAL_RCCEx_GetPLL1ClockFreq+0x48>
240099e6:	bf00      	nop
240099e8:	58024400 	.word	0x58024400
240099ec:	4c742400 	.word	0x4c742400
240099f0:	39000000 	.word	0x39000000
240099f4:	03d09000 	.word	0x03d09000
240099f8:	4b742400 	.word	0x4b742400
240099fc:	4a742400 	.word	0x4a742400

24009a00 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
24009a00:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
24009a04:	430b      	orrs	r3, r1
{
24009a06:	b500      	push	{lr}
24009a08:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
24009a0a:	f000 8083 	beq.w	24009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
24009a0e:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
24009a12:	430b      	orrs	r3, r1
24009a14:	d038      	beq.n	24009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
24009a16:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
24009a1a:	430b      	orrs	r3, r1
24009a1c:	f000 80e6 	beq.w	24009bec <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
24009a20:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
24009a24:	430b      	orrs	r3, r1
24009a26:	f000 8089 	beq.w	24009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
24009a2a:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
24009a2e:	430b      	orrs	r3, r1
24009a30:	d060      	beq.n	24009af4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
24009a32:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
24009a36:	430b      	orrs	r3, r1
24009a38:	f000 8112 	beq.w	24009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
24009a3c:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
24009a40:	430b      	orrs	r3, r1
24009a42:	f000 80a3 	beq.w	24009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
24009a46:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
24009a4a:	430b      	orrs	r3, r1
24009a4c:	f000 80fa 	beq.w	24009c44 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
24009a50:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
24009a54:	430b      	orrs	r3, r1
24009a56:	f000 8143 	beq.w	24009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
24009a5a:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
24009a5e:	4308      	orrs	r0, r1
24009a60:	d137      	bne.n	24009ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
24009a62:	4a9a      	ldr	r2, [pc, #616]	; (24009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009a64:	6d13      	ldr	r3, [r2, #80]	; 0x50
24009a66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
24009a6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24009a6e:	f000 8084 	beq.w	24009b7a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
24009a72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24009a76:	f000 8157 	beq.w	24009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
24009a7a:	bb53      	cbnz	r3, 24009ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
24009a7c:	6810      	ldr	r0, [r2, #0]
24009a7e:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
24009a82:	d044      	beq.n	24009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = HSE_VALUE;
24009a84:	4892      	ldr	r0, [pc, #584]	; (24009cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
24009a86:	e042      	b.n	24009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
24009a88:	4a90      	ldr	r2, [pc, #576]	; (24009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009a8a:	6d13      	ldr	r3, [r2, #80]	; 0x50
24009a8c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
24009a90:	2b80      	cmp	r3, #128	; 0x80
24009a92:	f000 80a6 	beq.w	24009be2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
24009a96:	d920      	bls.n	24009ada <HAL_RCCEx_GetPeriphCLKFreq+0xda>
24009a98:	2bc0      	cmp	r3, #192	; 0xc0
24009a9a:	d037      	beq.n	24009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
24009a9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24009aa0:	d117      	bne.n	24009ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24009aa2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24009aa4:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24009aa6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24009aaa:	0749      	lsls	r1, r1, #29
24009aac:	d502      	bpl.n	24009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
24009aae:	2b00      	cmp	r3, #0
24009ab0:	f000 80c2 	beq.w	24009c38 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
24009ab4:	4a85      	ldr	r2, [pc, #532]	; (24009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009ab6:	6812      	ldr	r2, [r2, #0]
24009ab8:	05d0      	lsls	r0, r2, #23
24009aba:	d503      	bpl.n	24009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
24009abc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24009ac0:	f000 8102 	beq.w	24009cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
24009ac4:	4a81      	ldr	r2, [pc, #516]	; (24009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009ac6:	6812      	ldr	r2, [r2, #0]
24009ac8:	0391      	lsls	r1, r2, #14
24009aca:	d502      	bpl.n	24009ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
24009acc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24009ad0:	d0d8      	beq.n	24009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
24009ad2:	2000      	movs	r0, #0
}
24009ad4:	b005      	add	sp, #20
24009ad6:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
24009ada:	2b00      	cmp	r3, #0
24009adc:	d04d      	beq.n	24009b7a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
24009ade:	2b40      	cmp	r3, #64	; 0x40
24009ae0:	d1f7      	bne.n	24009ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24009ae2:	6810      	ldr	r0, [r2, #0]
24009ae4:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
24009ae8:	d011      	beq.n	24009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24009aea:	a801      	add	r0, sp, #4
24009aec:	f7ff fd7c 	bl	240095e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
24009af0:	9801      	ldr	r0, [sp, #4]
24009af2:	e00c      	b.n	24009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
24009af4:	4a75      	ldr	r2, [pc, #468]	; (24009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009af6:	6d13      	ldr	r3, [r2, #80]	; 0x50
24009af8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
24009afc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24009b00:	d06f      	beq.n	24009be2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
24009b02:	d938      	bls.n	24009b76 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
24009b04:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
24009b08:	f040 8088 	bne.w	24009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
24009b0c:	4871      	ldr	r0, [pc, #452]	; (24009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
24009b0e:	b005      	add	sp, #20
24009b10:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
24009b14:	4b6d      	ldr	r3, [pc, #436]	; (24009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24009b18:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
24009b1c:	2b04      	cmp	r3, #4
24009b1e:	d8d8      	bhi.n	24009ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
24009b20:	a201      	add	r2, pc, #4	; (adr r2, 24009b28 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
24009b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24009b26:	bf00      	nop
24009b28:	24009bcb 	.word	0x24009bcb
24009b2c:	24009ba7 	.word	0x24009ba7
24009b30:	24009bb7 	.word	0x24009bb7
24009b34:	24009b0d 	.word	0x24009b0d
24009b38:	24009bb3 	.word	0x24009bb3
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
24009b3c:	4a63      	ldr	r2, [pc, #396]	; (24009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009b3e:	6d93      	ldr	r3, [r2, #88]	; 0x58
24009b40:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
24009b44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
24009b48:	d04b      	beq.n	24009be2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
24009b4a:	d944      	bls.n	24009bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
24009b4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
24009b50:	d0dc      	beq.n	24009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
24009b52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
24009b56:	d1bc      	bne.n	24009ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24009b58:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24009b5a:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24009b5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24009b60:	0752      	lsls	r2, r2, #29
24009b62:	d5a7      	bpl.n	24009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
24009b64:	2b00      	cmp	r3, #0
24009b66:	d1a5      	bne.n	24009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009b68:	4b58      	ldr	r3, [pc, #352]	; (24009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009b6a:	485b      	ldr	r0, [pc, #364]	; (24009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
24009b6c:	681b      	ldr	r3, [r3, #0]
24009b6e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
24009b72:	40d8      	lsrs	r0, r3
24009b74:	e7cb      	b.n	24009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
24009b76:	2b00      	cmp	r3, #0
24009b78:	d154      	bne.n	24009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24009b7a:	6810      	ldr	r0, [r2, #0]
24009b7c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
24009b80:	d0c5      	beq.n	24009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
24009b82:	a801      	add	r0, sp, #4
24009b84:	f7ff fe8c 	bl	240098a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
24009b88:	9802      	ldr	r0, [sp, #8]
24009b8a:	e7c0      	b.n	24009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
24009b8c:	4a4f      	ldr	r2, [pc, #316]	; (24009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009b8e:	6d93      	ldr	r3, [r2, #88]	; 0x58
24009b90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
24009b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24009b98:	f000 80d0 	beq.w	24009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
24009b9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24009ba0:	d0da      	beq.n	24009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
24009ba2:	2b00      	cmp	r3, #0
24009ba4:	d195      	bne.n	24009ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24009ba6:	4b49      	ldr	r3, [pc, #292]	; (24009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009ba8:	6818      	ldr	r0, [r3, #0]
24009baa:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
24009bae:	d0ae      	beq.n	24009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
24009bb0:	e79b      	b.n	24009aea <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24009bb2:	4a46      	ldr	r2, [pc, #280]	; (24009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009bb4:	e775      	b.n	24009aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24009bb6:	4b45      	ldr	r3, [pc, #276]	; (24009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009bb8:	6818      	ldr	r0, [r3, #0]
24009bba:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
24009bbe:	d0a6      	beq.n	24009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24009bc0:	a801      	add	r0, sp, #4
24009bc2:	f7ff fdbf 	bl	24009744 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
24009bc6:	9801      	ldr	r0, [sp, #4]
24009bc8:	e7a1      	b.n	24009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24009bca:	4b40      	ldr	r3, [pc, #256]	; (24009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009bcc:	6818      	ldr	r0, [r3, #0]
24009bce:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
24009bd2:	d09c      	beq.n	24009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
24009bd4:	e7d5      	b.n	24009b82 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
24009bd6:	2b00      	cmp	r3, #0
24009bd8:	d0cf      	beq.n	24009b7a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
24009bda:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
24009bde:	d080      	beq.n	24009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
24009be0:	e777      	b.n	24009ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24009be2:	6810      	ldr	r0, [r2, #0]
24009be4:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
24009be8:	d091      	beq.n	24009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
24009bea:	e7e9      	b.n	24009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
24009bec:	4a37      	ldr	r2, [pc, #220]	; (24009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009bee:	6d93      	ldr	r3, [r2, #88]	; 0x58
24009bf0:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
24009bf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
24009bf8:	d0f3      	beq.n	24009be2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
24009bfa:	d806      	bhi.n	24009c0a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
24009bfc:	2b00      	cmp	r3, #0
24009bfe:	d0bc      	beq.n	24009b7a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
24009c00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
24009c04:	f43f af6d 	beq.w	24009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
24009c08:	e763      	b.n	24009ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
24009c0a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
24009c0e:	f43f af7d 	beq.w	24009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
24009c12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
24009c16:	f43f af44 	beq.w	24009aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
24009c1a:	e75a      	b.n	24009ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    switch (srcclk)
24009c1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24009c20:	d09a      	beq.n	24009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
24009c22:	e756      	b.n	24009ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
24009c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24009c28:	f43f af5b 	beq.w	24009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
24009c2c:	e751      	b.n	24009ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
24009c2e:	6810      	ldr	r0, [r2, #0]
24009c30:	f010 0004 	ands.w	r0, r0, #4
24009c34:	f43f af6b 	beq.w	24009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009c38:	6813      	ldr	r3, [r2, #0]
24009c3a:	4827      	ldr	r0, [pc, #156]	; (24009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
24009c3c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
24009c40:	40d8      	lsrs	r0, r3
24009c42:	e764      	b.n	24009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
24009c44:	4b21      	ldr	r3, [pc, #132]	; (24009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009c46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
24009c48:	03d2      	lsls	r2, r2, #15
24009c4a:	d5bf      	bpl.n	24009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24009c4c:	6818      	ldr	r0, [r3, #0]
24009c4e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
24009c52:	f43f af5c 	beq.w	24009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24009c56:	a801      	add	r0, sp, #4
24009c58:	f7ff fcc6 	bl	240095e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
24009c5c:	9803      	ldr	r0, [sp, #12]
24009c5e:	e756      	b.n	24009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
24009c60:	4a1a      	ldr	r2, [pc, #104]	; (24009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009c62:	6d13      	ldr	r3, [r2, #80]	; 0x50
24009c64:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
24009c68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
24009c6c:	d0df      	beq.n	24009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
24009c6e:	d810      	bhi.n	24009c92 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
24009c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24009c74:	d058      	beq.n	24009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
24009c76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24009c7a:	d118      	bne.n	24009cae <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24009c7c:	4b13      	ldr	r3, [pc, #76]	; (24009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009c7e:	6818      	ldr	r0, [r3, #0]
24009c80:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
24009c84:	f43f af43 	beq.w	24009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24009c88:	a801      	add	r0, sp, #4
24009c8a:	f7ff fd5b 	bl	24009744 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
24009c8e:	9802      	ldr	r0, [sp, #8]
24009c90:	e73d      	b.n	24009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
24009c92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
24009c96:	d012      	beq.n	24009cbe <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
24009c98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
24009c9c:	f47f af19 	bne.w	24009ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
24009ca0:	4b0a      	ldr	r3, [pc, #40]	; (24009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009ca2:	6818      	ldr	r0, [r3, #0]
24009ca4:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
24009ca8:	f43f af31 	beq.w	24009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
24009cac:	e6ea      	b.n	24009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
24009cae:	2b00      	cmp	r3, #0
24009cb0:	f47f af0f 	bne.w	24009ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
}
24009cb4:	b005      	add	sp, #20
24009cb6:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
24009cba:	f7fe bd39 	b.w	24008730 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
24009cbe:	6810      	ldr	r0, [r2, #0]
24009cc0:	f410 7080 	ands.w	r0, r0, #256	; 0x100
24009cc4:	f43f af23 	beq.w	24009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = CSI_VALUE;
24009cc8:	4804      	ldr	r0, [pc, #16]	; (24009cdc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
24009cca:	e720      	b.n	24009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
24009ccc:	58024400 	.word	0x58024400
24009cd0:	00f42400 	.word	0x00f42400
24009cd4:	00bb8000 	.word	0x00bb8000
24009cd8:	03d09000 	.word	0x03d09000
24009cdc:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
24009ce0:	4b28      	ldr	r3, [pc, #160]	; (24009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
24009ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24009ce4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
24009ce8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24009cec:	d037      	beq.n	24009d5e <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
24009cee:	d814      	bhi.n	24009d1a <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
24009cf0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24009cf4:	d03f      	beq.n	24009d76 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
24009cf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24009cfa:	d0bf      	beq.n	24009c7c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
24009cfc:	2b00      	cmp	r3, #0
24009cfe:	f47f aee8 	bne.w	24009ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
24009d02:	f7fe fcd5 	bl	240086b0 <HAL_RCC_GetHCLKFreq>
24009d06:	4b1f      	ldr	r3, [pc, #124]	; (24009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
24009d08:	4a1f      	ldr	r2, [pc, #124]	; (24009d88 <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
24009d0a:	6a1b      	ldr	r3, [r3, #32]
24009d0c:	f3c3 1302 	ubfx	r3, r3, #4, #3
24009d10:	5cd3      	ldrb	r3, [r2, r3]
24009d12:	f003 031f 	and.w	r3, r3, #31
24009d16:	40d8      	lsrs	r0, r3
        break;
24009d18:	e6f9      	b.n	24009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
24009d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24009d1e:	d017      	beq.n	24009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
24009d20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
24009d24:	d0bc      	beq.n	24009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
24009d26:	e6d4      	b.n	24009ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24009d28:	6810      	ldr	r0, [r2, #0]
24009d2a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
24009d2e:	f43f aeee 	beq.w	24009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24009d32:	a801      	add	r0, sp, #4
24009d34:	f7ff fc58 	bl	240095e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
24009d38:	9802      	ldr	r0, [sp, #8]
24009d3a:	e6e8      	b.n	24009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24009d3c:	6810      	ldr	r0, [r2, #0]
24009d3e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
24009d42:	f43f aee4 	beq.w	24009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24009d46:	a801      	add	r0, sp, #4
24009d48:	f7ff fcfc 	bl	24009744 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
24009d4c:	9803      	ldr	r0, [sp, #12]
24009d4e:	e6de      	b.n	24009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
24009d50:	4b0c      	ldr	r3, [pc, #48]	; (24009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
24009d52:	6818      	ldr	r0, [r3, #0]
24009d54:	f410 7080 	ands.w	r0, r0, #256	; 0x100
24009d58:	f43f aed9 	beq.w	24009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
24009d5c:	e7b4      	b.n	24009cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
24009d5e:	4b09      	ldr	r3, [pc, #36]	; (24009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
24009d60:	6818      	ldr	r0, [r3, #0]
24009d62:	f010 0004 	ands.w	r0, r0, #4
24009d66:	f43f aed2 	beq.w	24009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009d6a:	681b      	ldr	r3, [r3, #0]
24009d6c:	4807      	ldr	r0, [pc, #28]	; (24009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
24009d6e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
24009d72:	40d8      	lsrs	r0, r3
24009d74:	e6cb      	b.n	24009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24009d76:	4b03      	ldr	r3, [pc, #12]	; (24009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
24009d78:	6818      	ldr	r0, [r3, #0]
24009d7a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
24009d7e:	f43f aec6 	beq.w	24009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
24009d82:	e7d6      	b.n	24009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
24009d84:	58024400 	.word	0x58024400
24009d88:	2401a148 	.word	0x2401a148
24009d8c:	03d09000 	.word	0x03d09000

24009d90 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
24009d90:	2800      	cmp	r0, #0
24009d92:	d03c      	beq.n	24009e0e <HAL_RNG_Init+0x7e>
{
24009d94:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
24009d96:	7a43      	ldrb	r3, [r0, #9]
24009d98:	4604      	mov	r4, r0
24009d9a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
24009d9e:	2b00      	cmp	r3, #0
24009da0:	d031      	beq.n	24009e06 <HAL_RNG_Init+0x76>
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
24009da2:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
24009da4:	2302      	movs	r3, #2
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
24009da6:	6861      	ldr	r1, [r4, #4]
  hrng->State = HAL_RNG_STATE_BUSY;
24009da8:	7263      	strb	r3, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
24009daa:	6813      	ldr	r3, [r2, #0]
24009dac:	f023 0320 	bic.w	r3, r3, #32
24009db0:	430b      	orrs	r3, r1
24009db2:	6013      	str	r3, [r2, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
24009db4:	6822      	ldr	r2, [r4, #0]
24009db6:	6813      	ldr	r3, [r2, #0]
24009db8:	f043 0304 	orr.w	r3, r3, #4
24009dbc:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
24009dbe:	6823      	ldr	r3, [r4, #0]
24009dc0:	685b      	ldr	r3, [r3, #4]
24009dc2:	0658      	lsls	r0, r3, #25
24009dc4:	d503      	bpl.n	24009dce <HAL_RNG_Init+0x3e>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
24009dc6:	2304      	movs	r3, #4
    return HAL_ERROR;
24009dc8:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
24009dca:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
24009dcc:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
24009dce:	f7fa ffe7 	bl	24004da0 <HAL_GetTick>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
24009dd2:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
24009dd4:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
24009dd6:	685b      	ldr	r3, [r3, #4]
24009dd8:	0759      	lsls	r1, r3, #29
24009dda:	d50e      	bpl.n	24009dfa <HAL_RNG_Init+0x6a>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
24009ddc:	f7fa ffe0 	bl	24004da0 <HAL_GetTick>
24009de0:	1b43      	subs	r3, r0, r5
24009de2:	2b02      	cmp	r3, #2
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
24009de4:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
24009de6:	d9f6      	bls.n	24009dd6 <HAL_RNG_Init+0x46>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
24009de8:	685a      	ldr	r2, [r3, #4]
24009dea:	0752      	lsls	r2, r2, #29
24009dec:	d5f3      	bpl.n	24009dd6 <HAL_RNG_Init+0x46>
        hrng->State = HAL_RNG_STATE_ERROR;
24009dee:	2204      	movs	r2, #4
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
24009df0:	2302      	movs	r3, #2
        return HAL_ERROR;
24009df2:	2001      	movs	r0, #1
        hrng->State = HAL_RNG_STATE_ERROR;
24009df4:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
24009df6:	60e3      	str	r3, [r4, #12]
}
24009df8:	bd38      	pop	{r3, r4, r5, pc}
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
24009dfa:	2300      	movs	r3, #0
  hrng->State = HAL_RNG_STATE_READY;
24009dfc:	2201      	movs	r2, #1
  return HAL_OK;
24009dfe:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
24009e00:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
24009e02:	60e3      	str	r3, [r4, #12]
}
24009e04:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
24009e06:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
24009e08:	f7fa facc 	bl	240043a4 <HAL_RNG_MspInit>
24009e0c:	e7c9      	b.n	24009da2 <HAL_RNG_Init+0x12>
    return HAL_ERROR;
24009e0e:	2001      	movs	r0, #1
}
24009e10:	4770      	bx	lr
24009e12:	bf00      	nop

24009e14 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
24009e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
24009e16:	7a03      	ldrb	r3, [r0, #8]
24009e18:	2b01      	cmp	r3, #1
24009e1a:	d027      	beq.n	24009e6c <HAL_RNG_GenerateRandomNumber+0x58>

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
24009e1c:	7a43      	ldrb	r3, [r0, #9]
  __HAL_LOCK(hrng);
24009e1e:	2201      	movs	r2, #1
24009e20:	4604      	mov	r4, r0
  if (hrng->State == HAL_RNG_STATE_READY)
24009e22:	4293      	cmp	r3, r2
24009e24:	b2de      	uxtb	r6, r3
  __HAL_LOCK(hrng);
24009e26:	7202      	strb	r2, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
24009e28:	d006      	beq.n	24009e38 <HAL_RNG_GenerateRandomNumber+0x24>
#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
24009e2a:	2304      	movs	r3, #4
    status = HAL_ERROR;
24009e2c:	4616      	mov	r6, r2
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
24009e2e:	60c3      	str	r3, [r0, #12]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
24009e30:	2300      	movs	r3, #0
24009e32:	7223      	strb	r3, [r4, #8]

  return status;
}
24009e34:	4630      	mov	r0, r6
24009e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
24009e38:	2302      	movs	r3, #2
24009e3a:	460d      	mov	r5, r1
24009e3c:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
24009e3e:	f7fa ffaf 	bl	24004da0 <HAL_GetTick>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
24009e42:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
24009e44:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
24009e46:	685a      	ldr	r2, [r3, #4]
24009e48:	07d2      	lsls	r2, r2, #31
24009e4a:	d412      	bmi.n	24009e72 <HAL_RNG_GenerateRandomNumber+0x5e>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
24009e4c:	f7fa ffa8 	bl	24004da0 <HAL_GetTick>
24009e50:	1bc0      	subs	r0, r0, r7
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
24009e52:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
24009e54:	2802      	cmp	r0, #2
24009e56:	d9f6      	bls.n	24009e46 <HAL_RNG_GenerateRandomNumber+0x32>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
24009e58:	685a      	ldr	r2, [r3, #4]
24009e5a:	f012 0201 	ands.w	r2, r2, #1
24009e5e:	d1f2      	bne.n	24009e46 <HAL_RNG_GenerateRandomNumber+0x32>
          hrng->State = HAL_RNG_STATE_READY;
24009e60:	2101      	movs	r1, #1
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
24009e62:	2302      	movs	r3, #2
          __HAL_UNLOCK(hrng);
24009e64:	7222      	strb	r2, [r4, #8]
          hrng->State = HAL_RNG_STATE_READY;
24009e66:	7261      	strb	r1, [r4, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
24009e68:	60e3      	str	r3, [r4, #12]
          return HAL_ERROR;
24009e6a:	e7e3      	b.n	24009e34 <HAL_RNG_GenerateRandomNumber+0x20>
  __HAL_LOCK(hrng);
24009e6c:	2602      	movs	r6, #2
}
24009e6e:	4630      	mov	r0, r6
24009e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->RandomNumber = hrng->Instance->DR;
24009e72:	689b      	ldr	r3, [r3, #8]
    hrng->State = HAL_RNG_STATE_READY;
24009e74:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
24009e76:	2600      	movs	r6, #0
    hrng->RandomNumber = hrng->Instance->DR;
24009e78:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
24009e7a:	602b      	str	r3, [r5, #0]
    hrng->State = HAL_RNG_STATE_READY;
24009e7c:	7262      	strb	r2, [r4, #9]
24009e7e:	e7d7      	b.n	24009e30 <HAL_RNG_GenerateRandomNumber+0x1c>

24009e80 <HAL_SAI_Init.part.0>:
  *         in the SAI_InitTypeDef structure and initialize the associated handle.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
24009e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
24009e82:	4ba3      	ldr	r3, [pc, #652]	; (2400a110 <HAL_SAI_Init.part.0+0x290>)
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
24009e84:	4605      	mov	r5, r0
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
24009e86:	6802      	ldr	r2, [r0, #0]
24009e88:	429a      	cmp	r2, r3
24009e8a:	d01c      	beq.n	24009ec6 <HAL_SAI_Init.part.0+0x46>
24009e8c:	3320      	adds	r3, #32
24009e8e:	429a      	cmp	r2, r3
24009e90:	d019      	beq.n	24009ec6 <HAL_SAI_Init.part.0+0x46>
  {
    SaiBaseAddress = SAI1;
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
24009e92:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
24009e96:	429a      	cmp	r2, r3
24009e98:	d04d      	beq.n	24009f36 <HAL_SAI_Init.part.0+0xb6>
24009e9a:	3320      	adds	r3, #32
24009e9c:	429a      	cmp	r2, r3
24009e9e:	d04a      	beq.n	24009f36 <HAL_SAI_Init.part.0+0xb6>
  {
    SaiBaseAddress = SAI2;
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
24009ea0:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
24009ea4:	429a      	cmp	r2, r3
24009ea6:	f000 812f 	beq.w	2400a108 <HAL_SAI_Init.part.0+0x288>
24009eaa:	3320      	adds	r3, #32
24009eac:	429a      	cmp	r2, r3
24009eae:	f000 812b 	beq.w	2400a108 <HAL_SAI_Init.part.0+0x288>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
24009eb2:	4b98      	ldr	r3, [pc, #608]	; (2400a114 <HAL_SAI_Init.part.0+0x294>)
24009eb4:	429a      	cmp	r2, r3
24009eb6:	f000 8129 	beq.w	2400a10c <HAL_SAI_Init.part.0+0x28c>
24009eba:	3320      	adds	r3, #32
24009ebc:	429a      	cmp	r2, r3
24009ebe:	f000 8125 	beq.w	2400a10c <HAL_SAI_Init.part.0+0x28c>
    SaiBaseAddress = SAI4;
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
24009ec2:	2001      	movs	r0, #1

  /* Release Lock */
  __HAL_UNLOCK(hsai);

  return HAL_OK;
}
24009ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SaiBaseAddress = SAI1;
24009ec6:	4c94      	ldr	r4, [pc, #592]	; (2400a118 <HAL_SAI_Init.part.0+0x298>)
  if (hsai->State == HAL_SAI_STATE_RESET)
24009ec8:	f895 3091 	ldrb.w	r3, [r5, #145]	; 0x91
24009ecc:	f003 01ff 	and.w	r1, r3, #255	; 0xff
24009ed0:	2b00      	cmp	r3, #0
24009ed2:	d037      	beq.n	24009f44 <HAL_SAI_Init.part.0+0xc4>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
24009ed4:	4b91      	ldr	r3, [pc, #580]	; (2400a11c <HAL_SAI_Init.part.0+0x29c>)
24009ed6:	4992      	ldr	r1, [pc, #584]	; (2400a120 <HAL_SAI_Init.part.0+0x2a0>)
24009ed8:	681b      	ldr	r3, [r3, #0]
24009eda:	fba1 1303 	umull	r1, r3, r1, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
24009ede:	6811      	ldr	r1, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
24009ee0:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
24009ee2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
24009ee6:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
24009ee8:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
24009eea:	2b00      	cmp	r3, #0
24009eec:	d031      	beq.n	24009f52 <HAL_SAI_Init.part.0+0xd2>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
24009eee:	682a      	ldr	r2, [r5, #0]
    count--;
24009ef0:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
24009ef2:	6812      	ldr	r2, [r2, #0]
24009ef4:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
24009ef8:	d1f7      	bne.n	24009eea <HAL_SAI_Init.part.0+0x6a>
  switch (hsai->Init.SynchroExt)
24009efa:	68eb      	ldr	r3, [r5, #12]
  hsai->State = HAL_SAI_STATE_BUSY;
24009efc:	2102      	movs	r1, #2
  switch (hsai->Init.SynchroExt)
24009efe:	2b01      	cmp	r3, #1
  hsai->State = HAL_SAI_STATE_BUSY;
24009f00:	f885 1091 	strb.w	r1, [r5, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
24009f04:	f000 8150 	beq.w	2400a1a8 <HAL_SAI_Init.part.0+0x328>
24009f08:	428b      	cmp	r3, r1
24009f0a:	bf19      	ittee	ne
24009f0c:	460e      	movne	r6, r1
24009f0e:	2003      	movne	r0, #3
24009f10:	2023      	moveq	r0, #35	; 0x23
24009f12:	2622      	moveq	r6, #34	; 0x22
24009f14:	bf15      	itete	ne
24009f16:	2701      	movne	r7, #1
24009f18:	2721      	moveq	r7, #33	; 0x21
24009f1a:	2100      	movne	r1, #0
24009f1c:	2120      	moveq	r1, #32
  switch (hsai->Init.Synchro)
24009f1e:	68ab      	ldr	r3, [r5, #8]
24009f20:	3b01      	subs	r3, #1
24009f22:	2b04      	cmp	r3, #4
24009f24:	f200 8180 	bhi.w	2400a228 <HAL_SAI_Init.part.0+0x3a8>
24009f28:	e8df f013 	tbh	[pc, r3, lsl #1]
24009f2c:	001c00e3 	.word	0x001c00e3
24009f30:	001b00ea 	.word	0x001b00ea
24009f34:	00e6      	.short	0x00e6
  if (hsai->State == HAL_SAI_STATE_RESET)
24009f36:	f895 3091 	ldrb.w	r3, [r5, #145]	; 0x91
    SaiBaseAddress = SAI2;
24009f3a:	4c7a      	ldr	r4, [pc, #488]	; (2400a124 <HAL_SAI_Init.part.0+0x2a4>)
  if (hsai->State == HAL_SAI_STATE_RESET)
24009f3c:	f003 01ff 	and.w	r1, r3, #255	; 0xff
24009f40:	2b00      	cmp	r3, #0
24009f42:	d1c7      	bne.n	24009ed4 <HAL_SAI_Init.part.0+0x54>
    HAL_SAI_MspInit(hsai);
24009f44:	4628      	mov	r0, r5
    hsai->Lock = HAL_UNLOCKED;
24009f46:	f885 1090 	strb.w	r1, [r5, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
24009f4a:	f7fa fa91 	bl	24004470 <HAL_SAI_MspInit>
  __HAL_SAI_DISABLE(hsai);
24009f4e:	682a      	ldr	r2, [r5, #0]
24009f50:	e7c0      	b.n	24009ed4 <HAL_SAI_Init.part.0+0x54>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
24009f52:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    return HAL_ERROR;
24009f56:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
24009f58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
24009f5c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
}
24009f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
24009f62:	4631      	mov	r1, r6
      syncen_bits = SAI_xCR1_SYNCEN_1;
24009f64:	f44f 6600 	mov.w	r6, #2048	; 0x800
  SaiBaseAddress->GCR = tmpregisterGCR;
24009f68:	6021      	str	r1, [r4, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
24009f6a:	6a2b      	ldr	r3, [r5, #32]
24009f6c:	2b00      	cmp	r3, #0
24009f6e:	d046      	beq.n	24009ffe <HAL_SAI_Init.part.0+0x17e>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
24009f70:	682b      	ldr	r3, [r5, #0]
24009f72:	4967      	ldr	r1, [pc, #412]	; (2400a110 <HAL_SAI_Init.part.0+0x290>)
24009f74:	428b      	cmp	r3, r1
24009f76:	f000 812b 	beq.w	2400a1d0 <HAL_SAI_Init.part.0+0x350>
24009f7a:	3120      	adds	r1, #32
24009f7c:	428b      	cmp	r3, r1
24009f7e:	f000 8127 	beq.w	2400a1d0 <HAL_SAI_Init.part.0+0x350>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
24009f82:	4969      	ldr	r1, [pc, #420]	; (2400a128 <HAL_SAI_Init.part.0+0x2a8>)
24009f84:	428b      	cmp	r3, r1
24009f86:	f000 8133 	beq.w	2400a1f0 <HAL_SAI_Init.part.0+0x370>
24009f8a:	3120      	adds	r1, #32
24009f8c:	428b      	cmp	r3, r1
24009f8e:	f000 812f 	beq.w	2400a1f0 <HAL_SAI_Init.part.0+0x370>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
24009f92:	4966      	ldr	r1, [pc, #408]	; (2400a12c <HAL_SAI_Init.part.0+0x2ac>)
24009f94:	428b      	cmp	r3, r1
24009f96:	f000 8123 	beq.w	2400a1e0 <HAL_SAI_Init.part.0+0x360>
24009f9a:	3120      	adds	r1, #32
24009f9c:	428b      	cmp	r3, r1
24009f9e:	f000 811f 	beq.w	2400a1e0 <HAL_SAI_Init.part.0+0x360>
    if (hsai->Instance == SAI4_Block_A)
24009fa2:	495c      	ldr	r1, [pc, #368]	; (2400a114 <HAL_SAI_Init.part.0+0x294>)
24009fa4:	428b      	cmp	r3, r1
24009fa6:	f000 8135 	beq.w	2400a214 <HAL_SAI_Init.part.0+0x394>
    if (hsai->Instance == SAI4_Block_B)
24009faa:	4961      	ldr	r1, [pc, #388]	; (2400a130 <HAL_SAI_Init.part.0+0x2b0>)
24009fac:	428b      	cmp	r3, r1
24009fae:	f000 812a 	beq.w	2400a206 <HAL_SAI_Init.part.0+0x386>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
24009fb2:	69ab      	ldr	r3, [r5, #24]
24009fb4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
24009fb8:	f000 80fb 	beq.w	2400a1b2 <HAL_SAI_Init.part.0+0x332>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
24009fbc:	6aab      	ldr	r3, [r5, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
24009fbe:	eb02 0282 	add.w	r2, r2, r2, lsl #2
24009fc2:	6a29      	ldr	r1, [r5, #32]
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
24009fc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
24009fc8:	ea4f 0342 	mov.w	r3, r2, lsl #1
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
24009fcc:	bf0c      	ite	eq
24009fce:	2202      	moveq	r2, #2
24009fd0:	2201      	movne	r2, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
24009fd2:	fb01 f202 	mul.w	r2, r1, r2
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
24009fd6:	6c69      	ldr	r1, [r5, #68]	; 0x44
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
24009fd8:	0212      	lsls	r2, r2, #8
24009fda:	fbb3 f3f2 	udiv	r3, r3, r2
    hsai->Init.Mckdiv = tmpval / 10U;
24009fde:	4a55      	ldr	r2, [pc, #340]	; (2400a134 <HAL_SAI_Init.part.0+0x2b4>)
24009fe0:	fba2 0203 	umull	r0, r2, r2, r3
24009fe4:	08d2      	lsrs	r2, r2, #3
    if ((tmpval % 10U) > 8U)
24009fe6:	eb02 0082 	add.w	r0, r2, r2, lsl #2
24009fea:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
24009fee:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
24009ff0:	bf08      	it	eq
24009ff2:	3201      	addeq	r2, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
24009ff4:	2904      	cmp	r1, #4
      hsai->Init.Mckdiv += 1U;
24009ff6:	626a      	str	r2, [r5, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
24009ff8:	d101      	bne.n	24009ffe <HAL_SAI_Init.part.0+0x17e>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
24009ffa:	0852      	lsrs	r2, r2, #1
24009ffc:	626a      	str	r2, [r5, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24009ffe:	686b      	ldr	r3, [r5, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
2400a000:	6d2f      	ldr	r7, [r5, #80]	; 0x50
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400a002:	f033 0302 	bics.w	r3, r3, #2
2400a006:	f040 80c8 	bne.w	2400a19a <HAL_SAI_Init.part.0+0x31a>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
2400a00a:	3f01      	subs	r7, #1
2400a00c:	bf18      	it	ne
2400a00e:	2701      	movne	r7, #1
2400a010:	027f      	lsls	r7, r7, #9
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
2400a012:	f7fa fedd 	bl	24004dd0 <HAL_GetREVID>
2400a016:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
2400a01a:	682a      	ldr	r2, [r5, #0]
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
2400a01c:	f0c0 80a9 	bcc.w	2400a172 <HAL_SAI_Init.part.0+0x2f2>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
2400a020:	6811      	ldr	r1, [r2, #0]
2400a022:	4b45      	ldr	r3, [pc, #276]	; (2400a138 <HAL_SAI_Init.part.0+0x2b8>)
2400a024:	400b      	ands	r3, r1
2400a026:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2400a028:	6c69      	ldr	r1, [r5, #68]	; 0x44
2400a02a:	e9d5 2300 	ldrd	r2, r3, [r5]
2400a02e:	430b      	orrs	r3, r1
2400a030:	6ca9      	ldr	r1, [r5, #72]	; 0x48
2400a032:	430b      	orrs	r3, r1
2400a034:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
2400a036:	430b      	orrs	r3, r1
2400a038:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
2400a03a:	430b      	orrs	r3, r1
2400a03c:	6969      	ldr	r1, [r5, #20]
2400a03e:	430b      	orrs	r3, r1
2400a040:	69a9      	ldr	r1, [r5, #24]
2400a042:	430b      	orrs	r3, r1
2400a044:	6aa9      	ldr	r1, [r5, #40]	; 0x28
2400a046:	430b      	orrs	r3, r1
2400a048:	6929      	ldr	r1, [r5, #16]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2400a04a:	430b      	orrs	r3, r1
2400a04c:	6811      	ldr	r1, [r2, #0]
2400a04e:	430b      	orrs	r3, r1
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
2400a050:	6a69      	ldr	r1, [r5, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2400a052:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
2400a056:	4333      	orrs	r3, r6
2400a058:	433b      	orrs	r3, r7
2400a05a:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
2400a05c:	682a      	ldr	r2, [r5, #0]
2400a05e:	4b37      	ldr	r3, [pc, #220]	; (2400a13c <HAL_SAI_Init.part.0+0x2bc>)
2400a060:	6851      	ldr	r1, [r2, #4]
2400a062:	400b      	ands	r3, r1
2400a064:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
2400a066:	6b29      	ldr	r1, [r5, #48]	; 0x30
2400a068:	69eb      	ldr	r3, [r5, #28]
2400a06a:	682a      	ldr	r2, [r5, #0]
2400a06c:	430b      	orrs	r3, r1
2400a06e:	6b69      	ldr	r1, [r5, #52]	; 0x34
2400a070:	430b      	orrs	r3, r1
2400a072:	6851      	ldr	r1, [r2, #4]
2400a074:	430b      	orrs	r3, r1
2400a076:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
2400a078:	682a      	ldr	r2, [r5, #0]
2400a07a:	4b31      	ldr	r3, [pc, #196]	; (2400a140 <HAL_SAI_Init.part.0+0x2c0>)
2400a07c:	6891      	ldr	r1, [r2, #8]
2400a07e:	400b      	ands	r3, r1
2400a080:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
2400a082:	6dea      	ldr	r2, [r5, #92]	; 0x5c
2400a084:	6e6b      	ldr	r3, [r5, #100]	; 0x64
2400a086:	6829      	ldr	r1, [r5, #0]
2400a088:	4313      	orrs	r3, r2
2400a08a:	6e2a      	ldr	r2, [r5, #96]	; 0x60
2400a08c:	6888      	ldr	r0, [r1, #8]
2400a08e:	4313      	orrs	r3, r2
2400a090:	6d6a      	ldr	r2, [r5, #84]	; 0x54
2400a092:	4303      	orrs	r3, r0
2400a094:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
2400a096:	f24f 0020 	movw	r0, #61472	; 0xf020
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
2400a09a:	4313      	orrs	r3, r2
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
2400a09c:	6daa      	ldr	r2, [r5, #88]	; 0x58
2400a09e:	3a01      	subs	r2, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
2400a0a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
2400a0a4:	608b      	str	r3, [r1, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
2400a0a6:	682a      	ldr	r2, [r5, #0]
2400a0a8:	68d3      	ldr	r3, [r2, #12]
2400a0aa:	4003      	ands	r3, r0
2400a0ac:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
2400a0ae:	6829      	ldr	r1, [r5, #0]
2400a0b0:	e9d5 301a 	ldrd	r3, r0, [r5, #104]	; 0x68
2400a0b4:	68ca      	ldr	r2, [r1, #12]
2400a0b6:	4303      	orrs	r3, r0
2400a0b8:	4313      	orrs	r3, r2
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
2400a0ba:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
2400a0bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
2400a0c0:	6f2a      	ldr	r2, [r5, #112]	; 0x70
2400a0c2:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
2400a0c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
2400a0c8:	4a11      	ldr	r2, [pc, #68]	; (2400a110 <HAL_SAI_Init.part.0+0x290>)
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
2400a0ca:	60cb      	str	r3, [r1, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
2400a0cc:	682b      	ldr	r3, [r5, #0]
2400a0ce:	4293      	cmp	r3, r2
2400a0d0:	d03c      	beq.n	2400a14c <HAL_SAI_Init.part.0+0x2cc>
2400a0d2:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
2400a0d6:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
2400a0da:	4293      	cmp	r3, r2
2400a0dc:	d036      	beq.n	2400a14c <HAL_SAI_Init.part.0+0x2cc>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
2400a0de:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
2400a0e0:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
2400a0e2:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  return HAL_OK;
2400a0e6:	4618      	mov	r0, r3
  hsai->State = HAL_SAI_STATE_READY;
2400a0e8:	f885 2091 	strb.w	r2, [r5, #145]	; 0x91
  __HAL_UNLOCK(hsai);
2400a0ec:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
}
2400a0f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (hsai->Init.Synchro)
2400a0f2:	f44f 6680 	mov.w	r6, #1024	; 0x400
2400a0f6:	e737      	b.n	24009f68 <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
2400a0f8:	4601      	mov	r1, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
2400a0fa:	f44f 6600 	mov.w	r6, #2048	; 0x800
      break;
2400a0fe:	e733      	b.n	24009f68 <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
2400a100:	4639      	mov	r1, r7
      syncen_bits = SAI_xCR1_SYNCEN_1;
2400a102:	f44f 6600 	mov.w	r6, #2048	; 0x800
      break;
2400a106:	e72f      	b.n	24009f68 <HAL_SAI_Init.part.0+0xe8>
    SaiBaseAddress = SAI3;
2400a108:	4c0e      	ldr	r4, [pc, #56]	; (2400a144 <HAL_SAI_Init.part.0+0x2c4>)
2400a10a:	e6dd      	b.n	24009ec8 <HAL_SAI_Init.part.0+0x48>
    SaiBaseAddress = SAI4;
2400a10c:	4c0e      	ldr	r4, [pc, #56]	; (2400a148 <HAL_SAI_Init.part.0+0x2c8>)
2400a10e:	e6db      	b.n	24009ec8 <HAL_SAI_Init.part.0+0x48>
2400a110:	40015804 	.word	0x40015804
2400a114:	58005404 	.word	0x58005404
2400a118:	40015800 	.word	0x40015800
2400a11c:	2000074c 	.word	0x2000074c
2400a120:	95cbec1b 	.word	0x95cbec1b
2400a124:	40015c00 	.word	0x40015c00
2400a128:	40015c04 	.word	0x40015c04
2400a12c:	40016004 	.word	0x40016004
2400a130:	58005424 	.word	0x58005424
2400a134:	cccccccd 	.word	0xcccccccd
2400a138:	f005c010 	.word	0xf005c010
2400a13c:	ffff1ff0 	.word	0xffff1ff0
2400a140:	fff88000 	.word	0xfff88000
2400a144:	40016000 	.word	0x40016000
2400a148:	58005400 	.word	0x58005400
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
2400a14c:	6c63      	ldr	r3, [r4, #68]	; 0x44
2400a14e:	f023 0301 	bic.w	r3, r3, #1
2400a152:	6463      	str	r3, [r4, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
2400a154:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
2400a158:	2b01      	cmp	r3, #1
2400a15a:	d1c0      	bne.n	2400a0de <HAL_SAI_Init.part.0+0x25e>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
2400a15c:	e9d5 230f 	ldrd	r2, r3, [r5, #60]	; 0x3c
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
2400a160:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
2400a162:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
2400a166:	6463      	str	r3, [r4, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
2400a168:	6c63      	ldr	r3, [r4, #68]	; 0x44
2400a16a:	f043 0301 	orr.w	r3, r3, #1
2400a16e:	6463      	str	r3, [r4, #68]	; 0x44
2400a170:	e7b5      	b.n	2400a0de <HAL_SAI_Init.part.0+0x25e>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
2400a172:	6811      	ldr	r1, [r2, #0]
2400a174:	4b2d      	ldr	r3, [pc, #180]	; (2400a22c <HAL_SAI_Init.part.0+0x3ac>)
2400a176:	400b      	ands	r3, r1
2400a178:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2400a17a:	6c69      	ldr	r1, [r5, #68]	; 0x44
2400a17c:	e9d5 2300 	ldrd	r2, r3, [r5]
2400a180:	430b      	orrs	r3, r1
2400a182:	6ca9      	ldr	r1, [r5, #72]	; 0x48
2400a184:	430b      	orrs	r3, r1
2400a186:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
2400a188:	430b      	orrs	r3, r1
2400a18a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
2400a18c:	430b      	orrs	r3, r1
2400a18e:	6969      	ldr	r1, [r5, #20]
2400a190:	430b      	orrs	r3, r1
2400a192:	69a9      	ldr	r1, [r5, #24]
2400a194:	430b      	orrs	r3, r1
2400a196:	6aa9      	ldr	r1, [r5, #40]	; 0x28
2400a198:	e757      	b.n	2400a04a <HAL_SAI_Init.part.0+0x1ca>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
2400a19a:	f1a7 0701 	sub.w	r7, r7, #1
2400a19e:	fab7 f787 	clz	r7, r7
2400a1a2:	097f      	lsrs	r7, r7, #5
2400a1a4:	027f      	lsls	r7, r7, #9
2400a1a6:	e734      	b.n	2400a012 <HAL_SAI_Init.part.0+0x192>
  switch (hsai->Init.SynchroExt)
2400a1a8:	2013      	movs	r0, #19
2400a1aa:	2612      	movs	r6, #18
2400a1ac:	2711      	movs	r7, #17
2400a1ae:	2110      	movs	r1, #16
2400a1b0:	e6b5      	b.n	24009f1e <HAL_SAI_Init.part.0+0x9e>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
2400a1b2:	6c69      	ldr	r1, [r5, #68]	; 0x44
2400a1b4:	2904      	cmp	r1, #4
2400a1b6:	d035      	beq.n	2400a224 <HAL_SAI_Init.part.0+0x3a4>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
2400a1b8:	2908      	cmp	r1, #8
2400a1ba:	d021      	beq.n	2400a200 <HAL_SAI_Init.part.0+0x380>
        tmpframelength = hsai->FrameInit.FrameLength;
2400a1bc:	6d68      	ldr	r0, [r5, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
2400a1be:	eb02 0282 	add.w	r2, r2, r2, lsl #2
2400a1c2:	0053      	lsls	r3, r2, #1
2400a1c4:	6a2a      	ldr	r2, [r5, #32]
2400a1c6:	fb00 f202 	mul.w	r2, r0, r2
2400a1ca:	fbb3 f3f2 	udiv	r3, r3, r2
2400a1ce:	e706      	b.n	24009fde <HAL_SAI_Init.part.0+0x15e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
2400a1d0:	f44f 7080 	mov.w	r0, #256	; 0x100
2400a1d4:	2100      	movs	r1, #0
2400a1d6:	f7ff fc13 	bl	24009a00 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
2400a1da:	682b      	ldr	r3, [r5, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
2400a1dc:	4602      	mov	r2, r0
2400a1de:	e6d0      	b.n	24009f82 <HAL_SAI_Init.part.0+0x102>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
2400a1e0:	f44f 7000 	mov.w	r0, #512	; 0x200
2400a1e4:	2100      	movs	r1, #0
2400a1e6:	f7ff fc0b 	bl	24009a00 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_A)
2400a1ea:	682b      	ldr	r3, [r5, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
2400a1ec:	4602      	mov	r2, r0
2400a1ee:	e6d8      	b.n	24009fa2 <HAL_SAI_Init.part.0+0x122>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
2400a1f0:	f44f 7000 	mov.w	r0, #512	; 0x200
2400a1f4:	2100      	movs	r1, #0
2400a1f6:	f7ff fc03 	bl	24009a00 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
2400a1fa:	682b      	ldr	r3, [r5, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
2400a1fc:	4602      	mov	r2, r0
2400a1fe:	e6c8      	b.n	24009f92 <HAL_SAI_Init.part.0+0x112>
        tmpframelength = SAI_AC97_FRAME_LENGTH;
2400a200:	f44f 7080 	mov.w	r0, #256	; 0x100
2400a204:	e7db      	b.n	2400a1be <HAL_SAI_Init.part.0+0x33e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
2400a206:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400a20a:	2100      	movs	r1, #0
2400a20c:	f7ff fbf8 	bl	24009a00 <HAL_RCCEx_GetPeriphCLKFreq>
2400a210:	4602      	mov	r2, r0
2400a212:	e6ce      	b.n	24009fb2 <HAL_SAI_Init.part.0+0x132>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
2400a214:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400a218:	2100      	movs	r1, #0
2400a21a:	f7ff fbf1 	bl	24009a00 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_B)
2400a21e:	682b      	ldr	r3, [r5, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
2400a220:	4602      	mov	r2, r0
2400a222:	e6c2      	b.n	24009faa <HAL_SAI_Init.part.0+0x12a>
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
2400a224:	2040      	movs	r0, #64	; 0x40
2400a226:	e7ca      	b.n	2400a1be <HAL_SAI_Init.part.0+0x33e>
      syncen_bits = 0;
2400a228:	2600      	movs	r6, #0
2400a22a:	e69d      	b.n	24009f68 <HAL_SAI_Init.part.0+0xe8>
2400a22c:	f805c010 	.word	0xf805c010

2400a230 <HAL_SAI_InitProtocol>:
  switch (protocol)
2400a230:	2902      	cmp	r1, #2
{
2400a232:	b538      	push	{r3, r4, r5, lr}
2400a234:	4604      	mov	r4, r0
  switch (protocol)
2400a236:	d935      	bls.n	2400a2a4 <HAL_SAI_InitProtocol+0x74>
2400a238:	1ec8      	subs	r0, r1, #3
2400a23a:	2801      	cmp	r0, #1
2400a23c:	d830      	bhi.n	2400a2a0 <HAL_SAI_InitProtocol+0x70>
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
2400a23e:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
2400a240:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
2400a242:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
2400a244:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
2400a246:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.FirstBitOffset  = 0;
2400a248:	66a0      	str	r0, [r4, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
2400a24a:	f64f 70ff 	movw	r0, #65535	; 0xffff
2400a24e:	6760      	str	r0, [r4, #116]	; 0x74
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400a250:	6860      	ldr	r0, [r4, #4]
2400a252:	f030 0002 	bics.w	r0, r0, #2
2400a256:	bf0c      	ite	eq
2400a258:	2501      	moveq	r5, #1
2400a25a:	2500      	movne	r5, #0
      hsai->FrameInit.ActiveFrameLength = 13;
2400a25c:	2904      	cmp	r1, #4
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
2400a25e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
2400a262:	6525      	str	r5, [r4, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 13;
2400a264:	bf0c      	ite	eq
2400a266:	2001      	moveq	r0, #1
2400a268:	200d      	movne	r0, #13
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
2400a26a:	6621      	str	r1, [r4, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
2400a26c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
2400a270:	65a0      	str	r0, [r4, #88]	; 0x58
2400a272:	6661      	str	r1, [r4, #100]	; 0x64
  switch (datasize)
2400a274:	2a03      	cmp	r2, #3
2400a276:	d813      	bhi.n	2400a2a0 <HAL_SAI_InitProtocol+0x70>
2400a278:	e8df f002 	tbb	[pc, r2]
2400a27c:	5c554f3e 	.word	0x5c554f3e
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
2400a280:	6823      	ldr	r3, [r4, #0]
2400a282:	4a47      	ldr	r2, [pc, #284]	; (2400a3a0 <HAL_SAI_InitProtocol+0x170>)
2400a284:	4293      	cmp	r3, r2
2400a286:	d005      	beq.n	2400a294 <HAL_SAI_InitProtocol+0x64>
2400a288:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
2400a28c:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
2400a290:	4293      	cmp	r3, r2
2400a292:	d105      	bne.n	2400a2a0 <HAL_SAI_InitProtocol+0x70>
2400a294:	6863      	ldr	r3, [r4, #4]
2400a296:	2b01      	cmp	r3, #1
2400a298:	d102      	bne.n	2400a2a0 <HAL_SAI_InitProtocol+0x70>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
2400a29a:	6c63      	ldr	r3, [r4, #68]	; 0x44
2400a29c:	2b00      	cmp	r3, #0
2400a29e:	d037      	beq.n	2400a310 <HAL_SAI_InitProtocol+0xe0>
}
2400a2a0:	2001      	movs	r0, #1
2400a2a2:	bd38      	pop	{r3, r4, r5, pc}
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
2400a2a4:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
2400a2a6:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
2400a2a8:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
2400a2aa:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->SlotInit.FirstBitOffset  = 0;
2400a2ac:	66a0      	str	r0, [r4, #104]	; 0x68
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400a2ae:	6860      	ldr	r0, [r4, #4]
2400a2b0:	f030 0002 	bics.w	r0, r0, #2
2400a2b4:	bf14      	ite	ne
2400a2b6:	2001      	movne	r0, #1
2400a2b8:	2000      	moveq	r0, #0
2400a2ba:	6520      	str	r0, [r4, #80]	; 0x50
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
2400a2bc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
2400a2c0:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
2400a2c2:	f64f 70ff 	movw	r0, #65535	; 0xffff
2400a2c6:	6760      	str	r0, [r4, #116]	; 0x74
  if ((nbslot & 0x1U) != 0U)
2400a2c8:	f013 0001 	ands.w	r0, r3, #1
2400a2cc:	d1e8      	bne.n	2400a2a0 <HAL_SAI_InitProtocol+0x70>
  if (protocol == SAI_I2S_STANDARD)
2400a2ce:	b949      	cbnz	r1, 2400a2e4 <HAL_SAI_InitProtocol+0xb4>
2400a2d0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400a2d4:	e9c4 1018 	strd	r1, r0, [r4, #96]	; 0x60
  switch (datasize)
2400a2d8:	2a03      	cmp	r2, #3
2400a2da:	d8e1      	bhi.n	2400a2a0 <HAL_SAI_InitProtocol+0x70>
2400a2dc:	e8df f002 	tbb	[pc, r2]
2400a2e0:	2c364655 	.word	0x2c364655
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
2400a2e4:	6660      	str	r0, [r4, #100]	; 0x64
2400a2e6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400a2ea:	6620      	str	r0, [r4, #96]	; 0x60
  switch (datasize)
2400a2ec:	2a03      	cmp	r2, #3
2400a2ee:	d8d7      	bhi.n	2400a2a0 <HAL_SAI_InitProtocol+0x70>
2400a2f0:	e8df f002 	tbb	[pc, r2]
2400a2f4:	222c3c4b 	.word	0x222c3c4b
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400a2f8:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 16U * nbslot;
2400a2fa:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
2400a2fc:	2240      	movs	r2, #64	; 0x40
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400a2fe:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
2400a300:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
2400a302:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
2400a304:	f7fa fd64 	bl	24004dd0 <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
2400a308:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
2400a30c:	2b01      	cmp	r3, #1
2400a30e:	d0b7      	beq.n	2400a280 <HAL_SAI_InitProtocol+0x50>
2400a310:	4620      	mov	r0, r4
}
2400a312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
2400a316:	f7ff bdb3 	b.w	24009e80 <HAL_SAI_Init.part.0>
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400a31a:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
2400a31c:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400a31e:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
2400a320:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400a322:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
2400a324:	e7ee      	b.n	2400a304 <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_24;
2400a326:	21c0      	movs	r1, #192	; 0xc0
      hsai->FrameInit.FrameLength = 32U * nbslot;
2400a328:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400a32a:	2280      	movs	r2, #128	; 0x80
      hsai->Init.DataSize = SAI_DATASIZE_32;
2400a32c:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
2400a32e:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400a330:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
2400a332:	e7e7      	b.n	2400a304 <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_32;
2400a334:	21e0      	movs	r1, #224	; 0xe0
2400a336:	e7f7      	b.n	2400a328 <HAL_SAI_InitProtocol+0xf8>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400a338:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_32;
2400a33a:	20e0      	movs	r0, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400a33c:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400a33e:	019a      	lsls	r2, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
2400a340:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400a342:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400a344:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400a346:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2400a34a:	e7db      	b.n	2400a304 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400a34c:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
2400a34e:	22c0      	movs	r2, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400a350:	2580      	movs	r5, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2400a352:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400a354:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
2400a358:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400a35a:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400a35e:	66e5      	str	r5, [r4, #108]	; 0x6c
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400a360:	6560      	str	r0, [r4, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400a362:	65a3      	str	r3, [r4, #88]	; 0x58
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2400a364:	d1ce      	bne.n	2400a304 <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 8;
2400a366:	2308      	movs	r3, #8
2400a368:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
2400a36a:	e7cb      	b.n	2400a304 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400a36c:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400a36e:	2280      	movs	r2, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2400a370:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400a372:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400a376:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400a378:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400a37c:	66e2      	str	r2, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400a37e:	e9c4 0315 	strd	r0, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2400a382:	d1bf      	bne.n	2400a304 <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 16;
2400a384:	2310      	movs	r3, #16
2400a386:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
2400a388:	e7bc      	b.n	2400a304 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
2400a38a:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400a38c:	2080      	movs	r0, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
2400a38e:	2140      	movs	r1, #64	; 0x40
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
2400a390:	015a      	lsls	r2, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400a392:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
2400a394:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
2400a396:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
2400a398:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2400a39c:	e7b2      	b.n	2400a304 <HAL_SAI_InitProtocol+0xd4>
2400a39e:	bf00      	nop
2400a3a0:	40015804 	.word	0x40015804

2400a3a4 <HAL_SAI_Transmit_DMA>:
{
2400a3a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2400a3a8:	4615      	mov	r5, r2
2400a3aa:	f04f 0800 	mov.w	r8, #0
2400a3ae:	460f      	mov	r7, r1
2400a3b0:	4604      	mov	r4, r0
2400a3b2:	f365 080f 	bfi	r8, r5, #0, #16
  uint32_t tickstart = HAL_GetTick();
2400a3b6:	f7fa fcf3 	bl	24004da0 <HAL_GetTick>
2400a3ba:	f365 481f 	bfi	r8, r5, #16, #16
  if ((pData == NULL) || (Size == 0U))
2400a3be:	2f00      	cmp	r7, #0
2400a3c0:	d066      	beq.n	2400a490 <HAL_SAI_Transmit_DMA+0xec>
2400a3c2:	fab5 f985 	clz	r9, r5
2400a3c6:	ea4f 1959 	mov.w	r9, r9, lsr #5
2400a3ca:	2d00      	cmp	r5, #0
2400a3cc:	d060      	beq.n	2400a490 <HAL_SAI_Transmit_DMA+0xec>
  if (hsai->State == HAL_SAI_STATE_READY)
2400a3ce:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
2400a3d2:	2b01      	cmp	r3, #1
2400a3d4:	fa5f fa83 	uxtb.w	sl, r3
2400a3d8:	d155      	bne.n	2400a486 <HAL_SAI_Transmit_DMA+0xe2>
    __HAL_LOCK(hsai);
2400a3da:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
2400a3de:	2b01      	cmp	r3, #1
2400a3e0:	d051      	beq.n	2400a486 <HAL_SAI_Transmit_DMA+0xe2>
    hsai->State = HAL_SAI_STATE_BUSY_TX;
2400a3e2:	2312      	movs	r3, #18
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
2400a3e4:	f8c4 9094 	str.w	r9, [r4, #148]	; 0x94
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
2400a3e8:	4a39      	ldr	r2, [pc, #228]	; (2400a4d0 <HAL_SAI_Transmit_DMA+0x12c>)
2400a3ea:	4606      	mov	r6, r0
    hsai->State = HAL_SAI_STATE_BUSY_TX;
2400a3ec:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
2400a3f0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    __HAL_LOCK(hsai);
2400a3f4:	f884 a090 	strb.w	sl, [r4, #144]	; 0x90
    hsai->XferSize = Size;
2400a3f8:	e9c4 781e 	strd	r7, r8, [r4, #120]	; 0x78
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
2400a3fc:	641a      	str	r2, [r3, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
2400a3fe:	4a35      	ldr	r2, [pc, #212]	; (2400a4d4 <HAL_SAI_Transmit_DMA+0x130>)
2400a400:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
2400a404:	63da      	str	r2, [r3, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
2400a406:	4a34      	ldr	r2, [pc, #208]	; (2400a4d8 <HAL_SAI_Transmit_DMA+0x134>)
2400a408:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
2400a40c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
2400a40e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
2400a412:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
2400a416:	6822      	ldr	r2, [r4, #0]
2400a418:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
2400a41c:	321c      	adds	r2, #28
2400a41e:	6fa1      	ldr	r1, [r4, #120]	; 0x78
2400a420:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
2400a424:	f7fb f8d8 	bl	240055d8 <HAL_DMA_Start_IT>
2400a428:	2800      	cmp	r0, #0
2400a42a:	d13f      	bne.n	2400a4ac <HAL_SAI_Transmit_DMA+0x108>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a42c:	6c63      	ldr	r3, [r4, #68]	; 0x44
2400a42e:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400a430:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a432:	d032      	beq.n	2400a49a <HAL_SAI_Transmit_DMA+0xf6>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400a434:	2205      	movs	r2, #5
2400a436:	2161      	movs	r1, #97	; 0x61
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400a438:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
2400a43a:	2b01      	cmp	r3, #1
2400a43c:	bf98      	it	ls
2400a43e:	460a      	movls	r2, r1
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400a440:	6821      	ldr	r1, [r4, #0]
2400a442:	690b      	ldr	r3, [r1, #16]
2400a444:	4313      	orrs	r3, r2
2400a446:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
2400a448:	6822      	ldr	r2, [r4, #0]
2400a44a:	6813      	ldr	r3, [r2, #0]
2400a44c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400a450:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
2400a452:	e005      	b.n	2400a460 <HAL_SAI_Transmit_DMA+0xbc>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
2400a454:	f7fa fca4 	bl	24004da0 <HAL_GetTick>
2400a458:	1b83      	subs	r3, r0, r6
2400a45a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2400a45e:	d82a      	bhi.n	2400a4b6 <HAL_SAI_Transmit_DMA+0x112>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
2400a460:	6822      	ldr	r2, [r4, #0]
2400a462:	6955      	ldr	r5, [r2, #20]
2400a464:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
2400a468:	d0f4      	beq.n	2400a454 <HAL_SAI_Transmit_DMA+0xb0>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
2400a46a:	6813      	ldr	r3, [r2, #0]
2400a46c:	03db      	lsls	r3, r3, #15
2400a46e:	d403      	bmi.n	2400a478 <HAL_SAI_Transmit_DMA+0xd4>
      __HAL_SAI_ENABLE(hsai);
2400a470:	6813      	ldr	r3, [r2, #0]
2400a472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2400a476:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
2400a478:	2300      	movs	r3, #0
    return HAL_OK;
2400a47a:	469a      	mov	sl, r3
    __HAL_UNLOCK(hsai);
2400a47c:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
2400a480:	4650      	mov	r0, sl
2400a482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
2400a486:	f04f 0a02 	mov.w	sl, #2
}
2400a48a:	4650      	mov	r0, sl
2400a48c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return  HAL_ERROR;
2400a490:	f04f 0a01 	mov.w	sl, #1
}
2400a494:	4650      	mov	r0, sl
2400a496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400a49a:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a49e:	2a01      	cmp	r2, #1
2400a4a0:	bf0b      	itete	eq
2400a4a2:	2215      	moveq	r2, #21
2400a4a4:	2205      	movne	r2, #5
2400a4a6:	2171      	moveq	r1, #113	; 0x71
2400a4a8:	2161      	movne	r1, #97	; 0x61
2400a4aa:	e7c5      	b.n	2400a438 <HAL_SAI_Transmit_DMA+0x94>
}
2400a4ac:	4650      	mov	r0, sl
      __HAL_UNLOCK(hsai);
2400a4ae:	f884 9090 	strb.w	r9, [r4, #144]	; 0x90
}
2400a4b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400a4b6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
2400a4ba:	f04f 0a03 	mov.w	sl, #3
        __HAL_UNLOCK(hsai);
2400a4be:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400a4c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
2400a4c6:	4650      	mov	r0, sl
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400a4c8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
2400a4cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2400a4d0:	2400a629 	.word	0x2400a629
2400a4d4:	2400a5c5 	.word	0x2400a5c5
2400a4d8:	2400a6ad 	.word	0x2400a6ad

2400a4dc <HAL_SAI_Receive_DMA>:
{
2400a4dc:	2300      	movs	r3, #0
2400a4de:	f362 030f 	bfi	r3, r2, #0, #16
2400a4e2:	b570      	push	{r4, r5, r6, lr}
2400a4e4:	f362 431f 	bfi	r3, r2, #16, #16
  if ((pData == NULL) || (Size == 0U))
2400a4e8:	2900      	cmp	r1, #0
2400a4ea:	d054      	beq.n	2400a596 <HAL_SAI_Receive_DMA+0xba>
2400a4ec:	fab2 f582 	clz	r5, r2
2400a4f0:	096d      	lsrs	r5, r5, #5
2400a4f2:	2a00      	cmp	r2, #0
2400a4f4:	d04f      	beq.n	2400a596 <HAL_SAI_Receive_DMA+0xba>
  if (hsai->State == HAL_SAI_STATE_READY)
2400a4f6:	f890 2091 	ldrb.w	r2, [r0, #145]	; 0x91
2400a4fa:	4604      	mov	r4, r0
2400a4fc:	2a01      	cmp	r2, #1
2400a4fe:	b2d6      	uxtb	r6, r2
2400a500:	d146      	bne.n	2400a590 <HAL_SAI_Receive_DMA+0xb4>
    __HAL_LOCK(hsai);
2400a502:	f890 2090 	ldrb.w	r2, [r0, #144]	; 0x90
2400a506:	2a01      	cmp	r2, #1
2400a508:	d042      	beq.n	2400a590 <HAL_SAI_Receive_DMA+0xb4>
    hsai->pBuffPtr = pData;
2400a50a:	6781      	str	r1, [r0, #120]	; 0x78
    hsai->State = HAL_SAI_STATE_BUSY_RX;
2400a50c:	2122      	movs	r1, #34	; 0x22
    hsai->XferSize = Size;
2400a50e:	67c3      	str	r3, [r0, #124]	; 0x7c
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
2400a510:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
2400a514:	4b28      	ldr	r3, [pc, #160]	; (2400a5b8 <HAL_SAI_Receive_DMA+0xdc>)
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
2400a516:	f8c0 5094 	str.w	r5, [r0, #148]	; 0x94
    __HAL_LOCK(hsai);
2400a51a:	f880 6090 	strb.w	r6, [r0, #144]	; 0x90
    hsai->State = HAL_SAI_STATE_BUSY_RX;
2400a51e:	f880 1091 	strb.w	r1, [r0, #145]	; 0x91
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
2400a522:	6413      	str	r3, [r2, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
2400a524:	4a25      	ldr	r2, [pc, #148]	; (2400a5bc <HAL_SAI_Receive_DMA+0xe0>)
2400a526:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
2400a52a:	63da      	str	r2, [r3, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
2400a52c:	4a24      	ldr	r2, [pc, #144]	; (2400a5c0 <HAL_SAI_Receive_DMA+0xe4>)
2400a52e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
2400a532:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
2400a534:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
2400a538:	651d      	str	r5, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
2400a53a:	6801      	ldr	r1, [r0, #0]
2400a53c:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
2400a540:	6f82      	ldr	r2, [r0, #120]	; 0x78
2400a542:	311c      	adds	r1, #28
2400a544:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
2400a548:	f7fb f846 	bl	240055d8 <HAL_DMA_Start_IT>
2400a54c:	bb30      	cbnz	r0, 2400a59c <HAL_SAI_Receive_DMA+0xc0>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a54e:	6c63      	ldr	r3, [r4, #68]	; 0x44
2400a550:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400a552:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a554:	d026      	beq.n	2400a5a4 <HAL_SAI_Receive_DMA+0xc8>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400a556:	2205      	movs	r2, #5
2400a558:	2061      	movs	r0, #97	; 0x61
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400a55a:	6821      	ldr	r1, [r4, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400a55c:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
2400a55e:	2b01      	cmp	r3, #1
2400a560:	bf98      	it	ls
2400a562:	4602      	movls	r2, r0
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400a564:	690b      	ldr	r3, [r1, #16]
2400a566:	4313      	orrs	r3, r2
2400a568:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
2400a56a:	6822      	ldr	r2, [r4, #0]
2400a56c:	6813      	ldr	r3, [r2, #0]
2400a56e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400a572:	6013      	str	r3, [r2, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
2400a574:	6823      	ldr	r3, [r4, #0]
2400a576:	681a      	ldr	r2, [r3, #0]
2400a578:	03d2      	lsls	r2, r2, #15
2400a57a:	d403      	bmi.n	2400a584 <HAL_SAI_Receive_DMA+0xa8>
      __HAL_SAI_ENABLE(hsai);
2400a57c:	681a      	ldr	r2, [r3, #0]
2400a57e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
2400a582:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
2400a584:	2300      	movs	r3, #0
    return HAL_OK;
2400a586:	461e      	mov	r6, r3
    __HAL_UNLOCK(hsai);
2400a588:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
2400a58c:	4630      	mov	r0, r6
2400a58e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
2400a590:	2602      	movs	r6, #2
}
2400a592:	4630      	mov	r0, r6
2400a594:	bd70      	pop	{r4, r5, r6, pc}
    return  HAL_ERROR;
2400a596:	2601      	movs	r6, #1
}
2400a598:	4630      	mov	r0, r6
2400a59a:	bd70      	pop	{r4, r5, r6, pc}
2400a59c:	4630      	mov	r0, r6
      __HAL_UNLOCK(hsai);
2400a59e:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
}
2400a5a2:	bd70      	pop	{r4, r5, r6, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400a5a4:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a5a8:	2a01      	cmp	r2, #1
2400a5aa:	bf0b      	itete	eq
2400a5ac:	2215      	moveq	r2, #21
2400a5ae:	2205      	movne	r2, #5
2400a5b0:	2071      	moveq	r0, #113	; 0x71
2400a5b2:	2061      	movne	r0, #97	; 0x61
2400a5b4:	e7d1      	b.n	2400a55a <HAL_SAI_Receive_DMA+0x7e>
2400a5b6:	bf00      	nop
2400a5b8:	2400a6a1 	.word	0x2400a6a1
2400a5bc:	2400a639 	.word	0x2400a639
2400a5c0:	2400a6ad 	.word	0x2400a6ad

2400a5c4 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
2400a5c4:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
2400a5c6:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400a5c8:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
2400a5ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400a5ce:	d01b      	beq.n	2400a608 <SAI_DMATxCplt+0x44>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
2400a5d0:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
2400a5d2:	2300      	movs	r3, #0
2400a5d4:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
2400a5d8:	6813      	ldr	r3, [r2, #0]
2400a5da:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
2400a5de:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a5e0:	6c43      	ldr	r3, [r0, #68]	; 0x44
2400a5e2:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400a5e4:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a5e6:	d012      	beq.n	2400a60e <SAI_DMATxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400a5e8:	f06f 0c61 	mvn.w	ip, #97	; 0x61
2400a5ec:	f06f 0205 	mvn.w	r2, #5

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400a5f0:	6801      	ldr	r1, [r0, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400a5f2:	3b02      	subs	r3, #2
2400a5f4:	2b01      	cmp	r3, #1
2400a5f6:	bf98      	it	ls
2400a5f8:	4662      	movls	r2, ip
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400a5fa:	690b      	ldr	r3, [r1, #16]

    hsai->State = HAL_SAI_STATE_READY;
2400a5fc:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400a600:	4013      	ands	r3, r2
2400a602:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
2400a604:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
2400a608:	f029 f94e 	bl	240338a8 <__HAL_SAI_TxCpltCallback_veneer>
#endif
}
2400a60c:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400a60e:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a612:	2a01      	cmp	r2, #1
2400a614:	bf0b      	itete	eq
2400a616:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
2400a61a:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
2400a61e:	f06f 0215 	mvneq.w	r2, #21
2400a622:	f06f 0205 	mvnne.w	r2, #5
2400a626:	e7e3      	b.n	2400a5f0 <SAI_DMATxCplt+0x2c>

2400a628 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
2400a628:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
2400a62a:	6b80      	ldr	r0, [r0, #56]	; 0x38
2400a62c:	f029 f938 	bl	240338a0 <__HAL_SAI_TxHalfCpltCallback_veneer>
#endif
}
2400a630:	bd08      	pop	{r3, pc}
2400a632:	bf00      	nop

2400a634 <HAL_SAI_RxCpltCallback>:
2400a634:	4770      	bx	lr
2400a636:	bf00      	nop

2400a638 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
2400a638:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
2400a63a:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400a63c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
2400a63e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400a642:	d01b      	beq.n	2400a67c <SAI_DMARxCplt+0x44>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
2400a644:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
2400a646:	2100      	movs	r1, #0
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
2400a648:	6813      	ldr	r3, [r2, #0]
2400a64a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
2400a64e:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a650:	6c43      	ldr	r3, [r0, #68]	; 0x44
    hsai->XferCount = 0;
2400a652:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a656:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400a658:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a65a:	d012      	beq.n	2400a682 <SAI_DMARxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400a65c:	f06f 0c61 	mvn.w	ip, #97	; 0x61
2400a660:	f06f 0205 	mvn.w	r2, #5

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400a664:	6801      	ldr	r1, [r0, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400a666:	3b02      	subs	r3, #2
2400a668:	2b01      	cmp	r3, #1
2400a66a:	bf98      	it	ls
2400a66c:	4662      	movls	r2, ip
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400a66e:	690b      	ldr	r3, [r1, #16]

    hsai->State = HAL_SAI_STATE_READY;
2400a670:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400a674:	4013      	ands	r3, r2
2400a676:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
2400a678:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
2400a67c:	f7ff ffda 	bl	2400a634 <HAL_SAI_RxCpltCallback>
#endif
}
2400a680:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400a682:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a686:	2a01      	cmp	r2, #1
2400a688:	bf0b      	itete	eq
2400a68a:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
2400a68e:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
2400a692:	f06f 0215 	mvneq.w	r2, #21
2400a696:	f06f 0205 	mvnne.w	r2, #5
2400a69a:	e7e3      	b.n	2400a664 <SAI_DMARxCplt+0x2c>

2400a69c <HAL_SAI_RxHalfCpltCallback>:
2400a69c:	4770      	bx	lr
2400a69e:	bf00      	nop

2400a6a0 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
2400a6a0:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
2400a6a2:	6b80      	ldr	r0, [r0, #56]	; 0x38
2400a6a4:	f7ff fffa 	bl	2400a69c <HAL_SAI_RxHalfCpltCallback>
#endif
}
2400a6a8:	bd08      	pop	{r3, pc}
2400a6aa:	bf00      	nop

2400a6ac <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
2400a6ac:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400a6ae:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
2400a6b0:	f7fc f9e2 	bl	24006a78 <HAL_DMA_GetError>
2400a6b4:	2802      	cmp	r0, #2
2400a6b6:	d025      	beq.n	2400a704 <SAI_DMAError+0x58>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400a6b8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
2400a6bc:	6821      	ldr	r1, [r4, #0]
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400a6be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400a6c2:	4814      	ldr	r0, [pc, #80]	; (2400a714 <SAI_DMAError+0x68>)
2400a6c4:	4a14      	ldr	r2, [pc, #80]	; (2400a718 <SAI_DMAError+0x6c>)
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400a6c6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
2400a6ca:	680b      	ldr	r3, [r1, #0]
2400a6cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
2400a6d0:	600b      	str	r3, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400a6d2:	6803      	ldr	r3, [r0, #0]
  __HAL_SAI_DISABLE(hsai);
2400a6d4:	6821      	ldr	r1, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400a6d6:	fba2 2303 	umull	r2, r3, r2, r3
  __HAL_SAI_DISABLE(hsai);
2400a6da:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400a6dc:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
2400a6de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400a6e2:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
2400a6e4:	600a      	str	r2, [r1, #0]
    if (count == 0U)
2400a6e6:	b173      	cbz	r3, 2400a706 <SAI_DMAError+0x5a>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
2400a6e8:	6822      	ldr	r2, [r4, #0]
    count--;
2400a6ea:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
2400a6ec:	6812      	ldr	r2, [r2, #0]
2400a6ee:	03d2      	lsls	r2, r2, #15
2400a6f0:	d4f9      	bmi.n	2400a6e6 <SAI_DMAError+0x3a>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
2400a6f2:	2201      	movs	r2, #1

    /* Initialize XferCount */
    hsai->XferCount = 0U;
2400a6f4:	2300      	movs	r3, #0

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
2400a6f6:	4620      	mov	r0, r4
    hsai->State = HAL_SAI_STATE_READY;
2400a6f8:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
2400a6fc:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
2400a700:	f029 f8ca 	bl	24033898 <__HAL_SAI_ErrorCallback_veneer>
#endif
  }
}
2400a704:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400a706:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
2400a70a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400a70e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      break;
2400a712:	e7ee      	b.n	2400a6f2 <SAI_DMAError+0x46>
2400a714:	2000074c 	.word	0x2000074c
2400a718:	95cbec1b 	.word	0x95cbec1b

2400a71c <HAL_SD_GetCardStatus.part.0>:
  * @param  hsd: Pointer to SD handle
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
2400a71c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2400a720:	4604      	mov	r4, r0
2400a722:	b096      	sub	sp, #88	; 0x58
2400a724:	460d      	mov	r5, r1
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
2400a726:	f7fa fb3b 	bl	24004da0 <HAL_GetTick>
  uint32_t count;
  uint32_t *pData = pSDstatus;

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400a72a:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
2400a72c:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400a72e:	6820      	ldr	r0, [r4, #0]
2400a730:	f001 fcca 	bl	2400c0c8 <SDMMC_GetResponse>
2400a734:	0181      	lsls	r1, r0, #6
2400a736:	d45a      	bmi.n	2400a7ee <HAL_SD_GetCardStatus.part.0+0xd2>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
2400a738:	2140      	movs	r1, #64	; 0x40
2400a73a:	6820      	ldr	r0, [r4, #0]
2400a73c:	f001 fcde 	bl	2400c0fc <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a740:	b1e8      	cbz	r0, 2400a77e <HAL_SD_GetCardStatus.part.0+0x62>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
  if (errorstate != HAL_SD_ERROR_NONE)
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
2400a742:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a744:	6363      	str	r3, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a746:	6823      	ldr	r3, [r4, #0]
2400a748:	4955      	ldr	r1, [pc, #340]	; (2400a8a0 <HAL_SD_GetCardStatus.part.0+0x184>)
    hsd->State = HAL_SD_STATE_READY;
2400a74a:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a74c:	6399      	str	r1, [r3, #56]	; 0x38
    status = HAL_ERROR;
2400a74e:	4616      	mov	r6, r2
    hsd->ErrorCode |= errorstate;
2400a750:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a752:	4303      	orrs	r3, r0
2400a754:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
2400a756:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
2400a75a:	f44f 7100 	mov.w	r1, #512	; 0x200
2400a75e:	6820      	ldr	r0, [r4, #0]
2400a760:	f001 fccc 	bl	2400c0fc <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a764:	b138      	cbz	r0, 2400a776 <HAL_SD_GetCardStatus.part.0+0x5a>
    hsd->State = HAL_SD_STATE_READY;
2400a766:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a768:	6822      	ldr	r2, [r4, #0]
2400a76a:	494d      	ldr	r1, [pc, #308]	; (2400a8a0 <HAL_SD_GetCardStatus.part.0+0x184>)
    status = HAL_ERROR;
2400a76c:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a76e:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
2400a770:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
2400a772:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
2400a776:	4630      	mov	r0, r6
2400a778:	b016      	add	sp, #88	; 0x58
2400a77a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400a77e:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400a780:	6820      	ldr	r0, [r4, #0]
2400a782:	0409      	lsls	r1, r1, #16
2400a784:	f002 fa42 	bl	2400cc0c <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a788:	2800      	cmp	r0, #0
2400a78a:	d1da      	bne.n	2400a742 <HAL_SD_GetCardStatus.part.0+0x26>
  config.DataLength    = 64U;
2400a78c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2400a790:	2340      	movs	r3, #64	; 0x40
  (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a792:	4669      	mov	r1, sp
2400a794:	6820      	ldr	r0, [r4, #0]
  config.DataLength    = 64U;
2400a796:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
2400a79a:	2260      	movs	r2, #96	; 0x60
2400a79c:	2302      	movs	r3, #2
2400a79e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
2400a7a2:	2200      	movs	r2, #0
2400a7a4:	2301      	movs	r3, #1
2400a7a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a7aa:	f001 fc91 	bl	2400c0d0 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
2400a7ae:	6820      	ldr	r0, [r4, #0]
2400a7b0:	f002 fdf8 	bl	2400d3a4 <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a7b4:	2800      	cmp	r0, #0
2400a7b6:	d1c4      	bne.n	2400a742 <HAL_SD_GetCardStatus.part.0+0x26>
  uint32_t *pData = pSDstatus;
2400a7b8:	ae06      	add	r6, sp, #24
2400a7ba:	e004      	b.n	2400a7c6 <HAL_SD_GetCardStatus.part.0+0xaa>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
        pData++;
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
2400a7bc:	f7fa faf0 	bl	24004da0 <HAL_GetTick>
2400a7c0:	1bc0      	subs	r0, r0, r7
2400a7c2:	3001      	adds	r0, #1
2400a7c4:	d017      	beq.n	2400a7f6 <HAL_SD_GetCardStatus.part.0+0xda>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
2400a7c6:	6823      	ldr	r3, [r4, #0]
2400a7c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2400a7ca:	f412 7f95 	tst.w	r2, #298	; 0x12a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
2400a7ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
2400a7d0:	d114      	bne.n	2400a7fc <HAL_SD_GetCardStatus.part.0+0xe0>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
2400a7d2:	0412      	lsls	r2, r2, #16
2400a7d4:	d5f2      	bpl.n	2400a7bc <HAL_SD_GetCardStatus.part.0+0xa0>
2400a7d6:	f106 0820 	add.w	r8, r6, #32
2400a7da:	e000      	b.n	2400a7de <HAL_SD_GetCardStatus.part.0+0xc2>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
2400a7dc:	6823      	ldr	r3, [r4, #0]
2400a7de:	4618      	mov	r0, r3
2400a7e0:	f001 fc5c 	bl	2400c09c <SDMMC_ReadFIFO>
2400a7e4:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
2400a7e8:	4546      	cmp	r6, r8
2400a7ea:	d1f7      	bne.n	2400a7dc <HAL_SD_GetCardStatus.part.0+0xc0>
2400a7ec:	e7e6      	b.n	2400a7bc <HAL_SD_GetCardStatus.part.0+0xa0>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
2400a7ee:	6823      	ldr	r3, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
2400a7f0:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400a7f4:	e7a8      	b.n	2400a748 <HAL_SD_GetCardStatus.part.0+0x2c>
    {
      return HAL_SD_ERROR_TIMEOUT;
2400a7f6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400a7fa:	e7a4      	b.n	2400a746 <HAL_SD_GetCardStatus.part.0+0x2a>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
2400a7fc:	0710      	lsls	r0, r2, #28
2400a7fe:	d449      	bmi.n	2400a894 <HAL_SD_GetCardStatus.part.0+0x178>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
2400a800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2400a802:	0791      	lsls	r1, r2, #30
2400a804:	d448      	bmi.n	2400a898 <HAL_SD_GetCardStatus.part.0+0x17c>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
2400a806:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2400a808:	0692      	lsls	r2, r2, #26
2400a80a:	d50a      	bpl.n	2400a822 <HAL_SD_GetCardStatus.part.0+0x106>
2400a80c:	e046      	b.n	2400a89c <HAL_SD_GetCardStatus.part.0+0x180>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
2400a80e:	f001 fc45 	bl	2400c09c <SDMMC_ReadFIFO>
2400a812:	f846 0b04 	str.w	r0, [r6], #4
    pData++;

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
2400a816:	f7fa fac3 	bl	24004da0 <HAL_GetTick>
2400a81a:	1bc0      	subs	r0, r0, r7
2400a81c:	3001      	adds	r0, #1
2400a81e:	d0ea      	beq.n	2400a7f6 <HAL_SD_GetCardStatus.part.0+0xda>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a820:	6823      	ldr	r3, [r4, #0]
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
2400a822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    *pData = SDMMC_ReadFIFO(hsd->Instance);
2400a824:	4618      	mov	r0, r3
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
2400a826:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
2400a82a:	d1f0      	bne.n	2400a80e <HAL_SD_GetCardStatus.part.0+0xf2>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400a82c:	491d      	ldr	r1, [pc, #116]	; (2400a8a4 <HAL_SD_GetCardStatus.part.0+0x188>)
  HAL_StatusTypeDef status = HAL_OK;
2400a82e:	4616      	mov	r6, r2
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400a830:	6399      	str	r1, [r3, #56]	; 0x38
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
2400a832:	9b06      	ldr	r3, [sp, #24]
2400a834:	f3c3 1281 	ubfx	r2, r3, #6, #2
2400a838:	702a      	strb	r2, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
2400a83a:	f3c3 1240 	ubfx	r2, r3, #5, #1
2400a83e:	706a      	strb	r2, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
2400a840:	0a1a      	lsrs	r2, r3, #8
2400a842:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
2400a846:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
2400a84a:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
2400a84e:	b292      	uxth	r2, r2
2400a850:	ba09      	rev	r1, r1
2400a852:	806a      	strh	r2, [r5, #2]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
2400a854:	b2da      	uxtb	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
2400a856:	6069      	str	r1, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
2400a858:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
2400a85a:	f3c3 2207 	ubfx	r2, r3, #8, #8
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
2400a85e:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
2400a862:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
2400a864:	f3c3 5203 	ubfx	r2, r3, #20, #4
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
2400a868:	0c1b      	lsrs	r3, r3, #16
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
2400a86a:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
2400a86c:	9a09      	ldr	r2, [sp, #36]	; 0x24
2400a86e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
2400a872:	b2d0      	uxtb	r0, r2
2400a874:	4303      	orrs	r3, r0
2400a876:	81ab      	strh	r3, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
2400a878:	f3c2 2385 	ubfx	r3, r2, #10, #6
2400a87c:	73ab      	strb	r3, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
2400a87e:	f3c2 2301 	ubfx	r3, r2, #8, #2
2400a882:	73eb      	strb	r3, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
2400a884:	f3c2 1303 	ubfx	r3, r2, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
2400a888:	f002 020f 	and.w	r2, r2, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
2400a88c:	742b      	strb	r3, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
2400a88e:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
2400a890:	74a9      	strb	r1, [r5, #18]
2400a892:	e762      	b.n	2400a75a <HAL_SD_GetCardStatus.part.0+0x3e>
    return HAL_SD_ERROR_DATA_TIMEOUT;
2400a894:	2008      	movs	r0, #8
2400a896:	e757      	b.n	2400a748 <HAL_SD_GetCardStatus.part.0+0x2c>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
2400a898:	2002      	movs	r0, #2
2400a89a:	e755      	b.n	2400a748 <HAL_SD_GetCardStatus.part.0+0x2c>
    return HAL_SD_ERROR_RX_OVERRUN;
2400a89c:	2020      	movs	r0, #32
2400a89e:	e753      	b.n	2400a748 <HAL_SD_GetCardStatus.part.0+0x2c>
2400a8a0:	1fe00fff 	.word	0x1fe00fff
2400a8a4:	18000f3a 	.word	0x18000f3a

2400a8a8 <SD_FindSCR.constprop.0>:
  * @brief  Finds the SD card SCR register value.
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
2400a8a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2400a8ac:	4605      	mov	r5, r0
2400a8ae:	b086      	sub	sp, #24
2400a8b0:	460f      	mov	r7, r1
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
2400a8b2:	f7fa fa75 	bl	24004da0 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
2400a8b6:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
2400a8b8:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
2400a8ba:	6828      	ldr	r0, [r5, #0]
2400a8bc:	f001 fc1e 	bl	2400c0fc <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a8c0:	4604      	mov	r4, r0
2400a8c2:	b118      	cbz	r0, 2400a8cc <SD_FindSCR.constprop.0+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
2400a8c4:	4620      	mov	r0, r4
2400a8c6:	b006      	add	sp, #24
2400a8c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
2400a8cc:	6c69      	ldr	r1, [r5, #68]	; 0x44
2400a8ce:	6828      	ldr	r0, [r5, #0]
2400a8d0:	0409      	lsls	r1, r1, #16
2400a8d2:	f002 f99b 	bl	2400cc0c <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a8d6:	4604      	mov	r4, r0
2400a8d8:	2800      	cmp	r0, #0
2400a8da:	d1f3      	bne.n	2400a8c4 <SD_FindSCR.constprop.0+0x1c>
  config.DataLength    = 8U;
2400a8dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2400a8e0:	2308      	movs	r3, #8
  (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a8e2:	4669      	mov	r1, sp
2400a8e4:	6828      	ldr	r0, [r5, #0]
  config.DataLength    = 8U;
2400a8e6:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
2400a8ea:	2230      	movs	r2, #48	; 0x30
2400a8ec:	2302      	movs	r3, #2
2400a8ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
2400a8f2:	2200      	movs	r2, #0
2400a8f4:	2301      	movs	r3, #1
2400a8f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a8fa:	f001 fbe9 	bl	2400c0d0 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
2400a8fe:	6828      	ldr	r0, [r5, #0]
2400a900:	f002 fb1c 	bl	2400cf3c <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a904:	4604      	mov	r4, r0
2400a906:	2800      	cmp	r0, #0
2400a908:	d1dc      	bne.n	2400a8c4 <SD_FindSCR.constprop.0+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
2400a90a:	4682      	mov	sl, r0
2400a90c:	4681      	mov	r9, r0
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
2400a90e:	f240 582a 	movw	r8, #1322	; 0x52a
2400a912:	e004      	b.n	2400a91e <SD_FindSCR.constprop.0+0x76>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
2400a914:	f7fa fa44 	bl	24004da0 <HAL_GetTick>
2400a918:	1b83      	subs	r3, r0, r6
2400a91a:	3301      	adds	r3, #1
2400a91c:	d024      	beq.n	2400a968 <SD_FindSCR.constprop.0+0xc0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
2400a91e:	6828      	ldr	r0, [r5, #0]
2400a920:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a922:	ea13 0f08 	tst.w	r3, r8
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
2400a926:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
2400a928:	d10c      	bne.n	2400a944 <SD_FindSCR.constprop.0+0x9c>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
2400a92a:	0319      	lsls	r1, r3, #12
2400a92c:	d4f2      	bmi.n	2400a914 <SD_FindSCR.constprop.0+0x6c>
2400a92e:	2c00      	cmp	r4, #0
2400a930:	d1f0      	bne.n	2400a914 <SD_FindSCR.constprop.0+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
2400a932:	f001 fbb3 	bl	2400c09c <SDMMC_ReadFIFO>
2400a936:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
2400a938:	6828      	ldr	r0, [r5, #0]
      index++;
2400a93a:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
2400a93c:	f001 fbae 	bl	2400c09c <SDMMC_ReadFIFO>
2400a940:	4682      	mov	sl, r0
      index++;
2400a942:	e7e7      	b.n	2400a914 <SD_FindSCR.constprop.0+0x6c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
2400a944:	071a      	lsls	r2, r3, #28
2400a946:	d416      	bmi.n	2400a976 <SD_FindSCR.constprop.0+0xce>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
2400a948:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a94a:	079b      	lsls	r3, r3, #30
2400a94c:	d40f      	bmi.n	2400a96e <SD_FindSCR.constprop.0+0xc6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
2400a94e:	6b44      	ldr	r4, [r0, #52]	; 0x34
2400a950:	f014 0420 	ands.w	r4, r4, #32
2400a954:	d113      	bne.n	2400a97e <SD_FindSCR.constprop.0+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400a956:	fa9a f28a 	rev.w	r2, sl
2400a95a:	fa99 f389 	rev.w	r3, r9
2400a95e:	490a      	ldr	r1, [pc, #40]	; (2400a988 <SD_FindSCR.constprop.0+0xe0>)
2400a960:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
2400a962:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
2400a966:	e7ad      	b.n	2400a8c4 <SD_FindSCR.constprop.0+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
2400a968:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
2400a96c:	e7aa      	b.n	2400a8c4 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
2400a96e:	2302      	movs	r3, #2
    return HAL_SD_ERROR_DATA_CRC_FAIL;
2400a970:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
2400a972:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
2400a974:	e7a6      	b.n	2400a8c4 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
2400a976:	2308      	movs	r3, #8
    return HAL_SD_ERROR_DATA_TIMEOUT;
2400a978:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
2400a97a:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
2400a97c:	e7a2      	b.n	2400a8c4 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
2400a97e:	2320      	movs	r3, #32
    return HAL_SD_ERROR_RX_OVERRUN;
2400a980:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
2400a982:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
2400a984:	e79e      	b.n	2400a8c4 <SD_FindSCR.constprop.0+0x1c>
2400a986:	bf00      	nop
2400a988:	18000f3a 	.word	0x18000f3a

2400a98c <HAL_SD_ReadBlocks>:
{
2400a98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400a990:	460d      	mov	r5, r1
2400a992:	b087      	sub	sp, #28
2400a994:	4604      	mov	r4, r0
2400a996:	4692      	mov	sl, r2
2400a998:	461f      	mov	r7, r3
2400a99a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
2400a99e:	f7fa f9ff 	bl	24004da0 <HAL_GetTick>
  if (NULL == pData)
2400a9a2:	2d00      	cmp	r5, #0
2400a9a4:	d069      	beq.n	2400aa7a <HAL_SD_ReadBlocks+0xee>
  if (hsd->State == HAL_SD_STATE_READY)
2400a9a6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
2400a9aa:	2b01      	cmp	r3, #1
2400a9ac:	fa5f f983 	uxtb.w	r9, r3
2400a9b0:	d152      	bne.n	2400aa58 <HAL_SD_ReadBlocks+0xcc>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400a9b2:	eb0a 0307 	add.w	r3, sl, r7
2400a9b6:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400a9b8:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400a9ba:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400a9bc:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400a9be:	d866      	bhi.n	2400aa8e <HAL_SD_ReadBlocks+0x102>
    hsd->State = HAL_SD_STATE_BUSY;
2400a9c0:	2303      	movs	r3, #3
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
2400a9c2:	f04f 0b02 	mov.w	fp, #2
2400a9c6:	4606      	mov	r6, r0
    hsd->State = HAL_SD_STATE_BUSY;
2400a9c8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
2400a9cc:	6823      	ldr	r3, [r4, #0]
2400a9ce:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a9d0:	4669      	mov	r1, sp
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
2400a9d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a9d4:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
2400a9d6:	2b01      	cmp	r3, #1
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
2400a9d8:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
2400a9dc:	e9cd 3304 	strd	r3, r3, [sp, #16]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400a9e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
2400a9e4:	bf18      	it	ne
2400a9e6:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400a9ea:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
2400a9ec:	027b      	lsls	r3, r7, #9
2400a9ee:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
2400a9f0:	2390      	movs	r3, #144	; 0x90
2400a9f2:	e9cd 3b02 	strd	r3, fp, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a9f6:	f001 fb6b 	bl	2400c0d0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
2400a9fa:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
2400a9fc:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
2400a9fe:	68d3      	ldr	r3, [r2, #12]
2400aa00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400aa04:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
2400aa06:	d931      	bls.n	2400aa6c <HAL_SD_ReadBlocks+0xe0>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
2400aa08:	4651      	mov	r1, sl
2400aa0a:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
2400aa0c:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
2400aa10:	f001 fcd0 	bl	2400c3b4 <SDMMC_CmdReadMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
2400aa14:	2800      	cmp	r0, #0
2400aa16:	d142      	bne.n	2400aa9e <HAL_SD_ReadBlocks+0x112>
    dataremaining = config.DataLength;
2400aa18:	f8dd b004 	ldr.w	fp, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
2400aa1c:	e004      	b.n	2400aa28 <HAL_SD_ReadBlocks+0x9c>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
2400aa1e:	f7fa f9bf 	bl	24004da0 <HAL_GetTick>
2400aa22:	1b80      	subs	r0, r0, r6
2400aa24:	4540      	cmp	r0, r8
2400aa26:	d267      	bcs.n	2400aaf8 <HAL_SD_ReadBlocks+0x16c>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
2400aa28:	6820      	ldr	r0, [r4, #0]
2400aa2a:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400aa2c:	f413 7f95 	tst.w	r3, #298	; 0x12a
2400aa30:	d141      	bne.n	2400aab6 <HAL_SD_ReadBlocks+0x12a>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
2400aa32:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400aa34:	041a      	lsls	r2, r3, #16
2400aa36:	d5f2      	bpl.n	2400aa1e <HAL_SD_ReadBlocks+0x92>
2400aa38:	f1bb 0f1f 	cmp.w	fp, #31
2400aa3c:	d9ef      	bls.n	2400aa1e <HAL_SD_ReadBlocks+0x92>
2400aa3e:	f105 0a20 	add.w	sl, r5, #32
2400aa42:	e000      	b.n	2400aa46 <HAL_SD_ReadBlocks+0xba>
          data = SDMMC_ReadFIFO(hsd->Instance);
2400aa44:	6820      	ldr	r0, [r4, #0]
2400aa46:	f001 fb29 	bl	2400c09c <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
2400aa4a:	f845 0b04 	str.w	r0, [r5], #4
        for (count = 0U; count < 8U; count++)
2400aa4e:	45aa      	cmp	sl, r5
2400aa50:	d1f8      	bne.n	2400aa44 <HAL_SD_ReadBlocks+0xb8>
        dataremaining -= 32U;
2400aa52:	f1ab 0b20 	sub.w	fp, fp, #32
2400aa56:	e7e2      	b.n	2400aa1e <HAL_SD_ReadBlocks+0x92>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400aa58:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
2400aa5a:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400aa5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
2400aa62:	6363      	str	r3, [r4, #52]	; 0x34
}
2400aa64:	4648      	mov	r0, r9
2400aa66:	b007      	add	sp, #28
2400aa68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
2400aa6c:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
2400aa6e:	4651      	mov	r1, sl
2400aa70:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
2400aa72:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
2400aa74:	f001 fbf0 	bl	2400c258 <SDMMC_CmdReadSingleBlock>
2400aa78:	e7cc      	b.n	2400aa14 <HAL_SD_ReadBlocks+0x88>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400aa7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
2400aa7c:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400aa80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
2400aa84:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400aa86:	6363      	str	r3, [r4, #52]	; 0x34
}
2400aa88:	b007      	add	sp, #28
2400aa8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400aa8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
2400aa90:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400aa92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
2400aa96:	6363      	str	r3, [r4, #52]	; 0x34
}
2400aa98:	b007      	add	sp, #28
2400aa9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400aa9e:	6823      	ldr	r3, [r4, #0]
2400aaa0:	4a30      	ldr	r2, [pc, #192]	; (2400ab64 <HAL_SD_ReadBlocks+0x1d8>)
2400aaa2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
2400aaa4:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
2400aaa6:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400aaa8:	4303      	orrs	r3, r0
2400aaaa:	6363      	str	r3, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
2400aaac:	2300      	movs	r3, #0
          hsd->State = HAL_SD_STATE_READY;
2400aaae:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
2400aab2:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
2400aab4:	e7d6      	b.n	2400aa64 <HAL_SD_ReadBlocks+0xd8>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
2400aab6:	68c3      	ldr	r3, [r0, #12]
2400aab8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400aabc:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
2400aabe:	6820      	ldr	r0, [r4, #0]
2400aac0:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400aac2:	05db      	lsls	r3, r3, #23
2400aac4:	d501      	bpl.n	2400aaca <HAL_SD_ReadBlocks+0x13e>
2400aac6:	2f01      	cmp	r7, #1
2400aac8:	d825      	bhi.n	2400ab16 <HAL_SD_ReadBlocks+0x18a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
2400aaca:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400aacc:	f013 0308 	ands.w	r3, r3, #8
2400aad0:	d135      	bne.n	2400ab3e <HAL_SD_ReadBlocks+0x1b2>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
2400aad2:	6b42      	ldr	r2, [r0, #52]	; 0x34
2400aad4:	f012 0202 	ands.w	r2, r2, #2
2400aad8:	d126      	bne.n	2400ab28 <HAL_SD_ReadBlocks+0x19c>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
2400aada:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400aadc:	f013 0320 	ands.w	r3, r3, #32
2400aae0:	d039      	beq.n	2400ab56 <HAL_SD_ReadBlocks+0x1ca>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400aae2:	4b20      	ldr	r3, [pc, #128]	; (2400ab64 <HAL_SD_ReadBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
2400aae4:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400aae6:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
2400aae8:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400aaea:	f043 0320 	orr.w	r3, r3, #32
2400aaee:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400aaf0:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400aaf4:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400aaf6:	e7b5      	b.n	2400aa64 <HAL_SD_ReadBlocks+0xd8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400aaf8:	6823      	ldr	r3, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
2400aafa:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400aafc:	4819      	ldr	r0, [pc, #100]	; (2400ab64 <HAL_SD_ReadBlocks+0x1d8>)
        hsd->Context = SD_CONTEXT_NONE;
2400aafe:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
2400ab00:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ab04:	6398      	str	r0, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
2400ab06:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400ab08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
2400ab0c:	6363      	str	r3, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
2400ab0e:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
2400ab12:	62e2      	str	r2, [r4, #44]	; 0x2c
        return HAL_TIMEOUT;
2400ab14:	e7a6      	b.n	2400aa64 <HAL_SD_ReadBlocks+0xd8>
      if (hsd->SdCard.CardType != CARD_SECURED)
2400ab16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400ab18:	2b03      	cmp	r3, #3
2400ab1a:	d0d6      	beq.n	2400aaca <HAL_SD_ReadBlocks+0x13e>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
2400ab1c:	f001 fe54 	bl	2400c7c8 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
2400ab20:	2800      	cmp	r0, #0
2400ab22:	d1bc      	bne.n	2400aa9e <HAL_SD_ReadBlocks+0x112>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ab24:	6820      	ldr	r0, [r4, #0]
2400ab26:	e7d0      	b.n	2400aaca <HAL_SD_ReadBlocks+0x13e>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ab28:	4a0e      	ldr	r2, [pc, #56]	; (2400ab64 <HAL_SD_ReadBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
2400ab2a:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ab2c:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
2400ab2e:	6b62      	ldr	r2, [r4, #52]	; 0x34
2400ab30:	f042 0202 	orr.w	r2, r2, #2
2400ab34:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400ab36:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400ab3a:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400ab3c:	e792      	b.n	2400aa64 <HAL_SD_ReadBlocks+0xd8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ab3e:	4b09      	ldr	r3, [pc, #36]	; (2400ab64 <HAL_SD_ReadBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
2400ab40:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ab42:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
2400ab44:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400ab46:	f043 0308 	orr.w	r3, r3, #8
2400ab4a:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
2400ab4c:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
2400ab4e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400ab52:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400ab54:	e786      	b.n	2400aa64 <HAL_SD_ReadBlocks+0xd8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400ab56:	4904      	ldr	r1, [pc, #16]	; (2400ab68 <HAL_SD_ReadBlocks+0x1dc>)
    hsd->State = HAL_SD_STATE_READY;
2400ab58:	2201      	movs	r2, #1
    return HAL_OK;
2400ab5a:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400ab5c:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
2400ab5e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
2400ab62:	e77f      	b.n	2400aa64 <HAL_SD_ReadBlocks+0xd8>
2400ab64:	1fe00fff 	.word	0x1fe00fff
2400ab68:	18000f3a 	.word	0x18000f3a

2400ab6c <HAL_SD_WriteBlocks>:
{
2400ab6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400ab70:	460d      	mov	r5, r1
2400ab72:	b089      	sub	sp, #36	; 0x24
2400ab74:	4604      	mov	r4, r0
2400ab76:	4692      	mov	sl, r2
2400ab78:	461f      	mov	r7, r3
2400ab7a:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
2400ab7e:	f7fa f90f 	bl	24004da0 <HAL_GetTick>
  if (NULL == pData)
2400ab82:	2d00      	cmp	r5, #0
2400ab84:	d068      	beq.n	2400ac58 <HAL_SD_WriteBlocks+0xec>
  if (hsd->State == HAL_SD_STATE_READY)
2400ab86:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
2400ab8a:	2b01      	cmp	r3, #1
2400ab8c:	fa5f f983 	uxtb.w	r9, r3
2400ab90:	d152      	bne.n	2400ac38 <HAL_SD_WriteBlocks+0xcc>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400ab92:	eb0a 0307 	add.w	r3, sl, r7
2400ab96:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400ab98:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400ab9a:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400ab9c:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400ab9e:	d865      	bhi.n	2400ac6c <HAL_SD_WriteBlocks+0x100>
    hsd->State = HAL_SD_STATE_BUSY;
2400aba0:	2303      	movs	r3, #3
2400aba2:	4606      	mov	r6, r0
2400aba4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
2400aba8:	6823      	ldr	r3, [r4, #0]
2400abaa:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400abac:	a902      	add	r1, sp, #8
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
2400abae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400abb0:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
2400abb2:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
2400abb4:	f04f 0300 	mov.w	r3, #0
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
2400abb8:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DPSM          = SDMMC_DPSM_DISABLE;
2400abbc:	9307      	str	r3, [sp, #28]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400abbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
2400abc2:	bf18      	it	ne
2400abc4:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400abc8:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
2400abca:	027b      	lsls	r3, r7, #9
2400abcc:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
2400abce:	2390      	movs	r3, #144	; 0x90
2400abd0:	9304      	str	r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400abd2:	f001 fa7d 	bl	2400c0d0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
2400abd6:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
2400abd8:	2f01      	cmp	r7, #1
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
2400abda:	4651      	mov	r1, sl
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
2400abdc:	68d3      	ldr	r3, [r2, #12]
2400abde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400abe2:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
2400abe4:	d932      	bls.n	2400ac4c <HAL_SD_WriteBlocks+0xe0>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
2400abe6:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
2400abe8:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
2400abea:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
2400abec:	f001 fd3e 	bl	2400c66c <SDMMC_CmdWriteMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
2400abf0:	2800      	cmp	r0, #0
2400abf2:	d143      	bne.n	2400ac7c <HAL_SD_WriteBlocks+0x110>
    dataremaining = config.DataLength;
2400abf4:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
2400abf8:	e004      	b.n	2400ac04 <HAL_SD_WriteBlocks+0x98>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
2400abfa:	f7fa f8d1 	bl	24004da0 <HAL_GetTick>
2400abfe:	1b80      	subs	r0, r0, r6
2400ac00:	4540      	cmp	r0, r8
2400ac02:	d268      	bcs.n	2400acd6 <HAL_SD_WriteBlocks+0x16a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
2400ac04:	6820      	ldr	r0, [r4, #0]
2400ac06:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400ac08:	f413 7f8d 	tst.w	r3, #282	; 0x11a
2400ac0c:	d142      	bne.n	2400ac94 <HAL_SD_WriteBlocks+0x128>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
2400ac0e:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400ac10:	045a      	lsls	r2, r3, #17
2400ac12:	d5f2      	bpl.n	2400abfa <HAL_SD_WriteBlocks+0x8e>
2400ac14:	f1bb 0f1f 	cmp.w	fp, #31
2400ac18:	d9ef      	bls.n	2400abfa <HAL_SD_WriteBlocks+0x8e>
2400ac1a:	f105 0a20 	add.w	sl, r5, #32
2400ac1e:	e000      	b.n	2400ac22 <HAL_SD_WriteBlocks+0xb6>
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
2400ac20:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
2400ac22:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
2400ac26:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
2400ac28:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
2400ac2a:	f001 fa3b 	bl	2400c0a4 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
2400ac2e:	4555      	cmp	r5, sl
2400ac30:	d1f6      	bne.n	2400ac20 <HAL_SD_WriteBlocks+0xb4>
        dataremaining -= 32U;
2400ac32:	f1ab 0b20 	sub.w	fp, fp, #32
2400ac36:	e7e0      	b.n	2400abfa <HAL_SD_WriteBlocks+0x8e>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400ac38:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
2400ac3a:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400ac3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
2400ac42:	6363      	str	r3, [r4, #52]	; 0x34
}
2400ac44:	4648      	mov	r0, r9
2400ac46:	b009      	add	sp, #36	; 0x24
2400ac48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
2400ac4c:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
2400ac4e:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
2400ac50:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
2400ac52:	f001 fc5d 	bl	2400c510 <SDMMC_CmdWriteSingleBlock>
2400ac56:	e7cb      	b.n	2400abf0 <HAL_SD_WriteBlocks+0x84>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400ac58:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
2400ac5a:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400ac5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
2400ac62:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400ac64:	6363      	str	r3, [r4, #52]	; 0x34
}
2400ac66:	b009      	add	sp, #36	; 0x24
2400ac68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400ac6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
2400ac6e:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400ac70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
2400ac74:	6363      	str	r3, [r4, #52]	; 0x34
}
2400ac76:	b009      	add	sp, #36	; 0x24
2400ac78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ac7c:	6823      	ldr	r3, [r4, #0]
2400ac7e:	4a30      	ldr	r2, [pc, #192]	; (2400ad40 <HAL_SD_WriteBlocks+0x1d4>)
2400ac80:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
2400ac82:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
2400ac84:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400ac86:	4303      	orrs	r3, r0
2400ac88:	6363      	str	r3, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
2400ac8a:	2300      	movs	r3, #0
          hsd->State = HAL_SD_STATE_READY;
2400ac8c:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
2400ac90:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
2400ac92:	e7d7      	b.n	2400ac44 <HAL_SD_WriteBlocks+0xd8>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
2400ac94:	68c3      	ldr	r3, [r0, #12]
2400ac96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400ac9a:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
2400ac9c:	6820      	ldr	r0, [r4, #0]
2400ac9e:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400aca0:	05db      	lsls	r3, r3, #23
2400aca2:	d501      	bpl.n	2400aca8 <HAL_SD_WriteBlocks+0x13c>
2400aca4:	2f01      	cmp	r7, #1
2400aca6:	d823      	bhi.n	2400acf0 <HAL_SD_WriteBlocks+0x184>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
2400aca8:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400acaa:	f013 0308 	ands.w	r3, r3, #8
2400acae:	d133      	bne.n	2400ad18 <HAL_SD_WriteBlocks+0x1ac>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
2400acb0:	6b42      	ldr	r2, [r0, #52]	; 0x34
2400acb2:	f012 0202 	ands.w	r2, r2, #2
2400acb6:	d124      	bne.n	2400ad02 <HAL_SD_WriteBlocks+0x196>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
2400acb8:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400acba:	f013 0310 	ands.w	r3, r3, #16
2400acbe:	d037      	beq.n	2400ad30 <HAL_SD_WriteBlocks+0x1c4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400acc0:	4b1f      	ldr	r3, [pc, #124]	; (2400ad40 <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
2400acc2:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400acc4:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
2400acc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400acc8:	f043 0310 	orr.w	r3, r3, #16
2400accc:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400acce:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400acd2:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400acd4:	e7b6      	b.n	2400ac44 <HAL_SD_WriteBlocks+0xd8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400acd6:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
2400acd8:	2201      	movs	r2, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400acda:	4819      	ldr	r0, [pc, #100]	; (2400ad40 <HAL_SD_WriteBlocks+0x1d4>)
        hsd->Context = SD_CONTEXT_NONE;
2400acdc:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
2400acde:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ace2:	6388      	str	r0, [r1, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
2400ace4:	6b61      	ldr	r1, [r4, #52]	; 0x34
2400ace6:	6361      	str	r1, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
2400ace8:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
2400acec:	62e3      	str	r3, [r4, #44]	; 0x2c
        return HAL_TIMEOUT;
2400acee:	e7a9      	b.n	2400ac44 <HAL_SD_WriteBlocks+0xd8>
      if (hsd->SdCard.CardType != CARD_SECURED)
2400acf0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400acf2:	2b03      	cmp	r3, #3
2400acf4:	d0d8      	beq.n	2400aca8 <HAL_SD_WriteBlocks+0x13c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
2400acf6:	f001 fd67 	bl	2400c7c8 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
2400acfa:	2800      	cmp	r0, #0
2400acfc:	d1be      	bne.n	2400ac7c <HAL_SD_WriteBlocks+0x110>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400acfe:	6820      	ldr	r0, [r4, #0]
2400ad00:	e7d2      	b.n	2400aca8 <HAL_SD_WriteBlocks+0x13c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ad02:	4a0f      	ldr	r2, [pc, #60]	; (2400ad40 <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
2400ad04:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ad06:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
2400ad08:	6b62      	ldr	r2, [r4, #52]	; 0x34
2400ad0a:	f042 0202 	orr.w	r2, r2, #2
2400ad0e:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400ad10:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400ad14:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400ad16:	e795      	b.n	2400ac44 <HAL_SD_WriteBlocks+0xd8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ad18:	4b09      	ldr	r3, [pc, #36]	; (2400ad40 <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
2400ad1a:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ad1c:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
2400ad1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400ad20:	f043 0308 	orr.w	r3, r3, #8
2400ad24:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
2400ad26:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
2400ad28:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400ad2c:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400ad2e:	e789      	b.n	2400ac44 <HAL_SD_WriteBlocks+0xd8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400ad30:	4904      	ldr	r1, [pc, #16]	; (2400ad44 <HAL_SD_WriteBlocks+0x1d8>)
    hsd->State = HAL_SD_STATE_READY;
2400ad32:	2201      	movs	r2, #1
    return HAL_OK;
2400ad34:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400ad36:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
2400ad38:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
2400ad3c:	e782      	b.n	2400ac44 <HAL_SD_WriteBlocks+0xd8>
2400ad3e:	bf00      	nop
2400ad40:	1fe00fff 	.word	0x1fe00fff
2400ad44:	18000f3a 	.word	0x18000f3a

2400ad48 <HAL_SD_GetCardCSD>:
{
2400ad48:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
2400ad4a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  pCSD->Reserved2 = 0U; /*!< Reserved */
2400ad4c:	f04f 0c00 	mov.w	ip, #0
{
2400ad50:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
2400ad52:	0f92      	lsrs	r2, r2, #30
2400ad54:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
2400ad56:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
2400ad58:	f3c2 6283 	ubfx	r2, r2, #26, #4
2400ad5c:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
2400ad5e:	f890 205f 	ldrb.w	r2, [r0, #95]	; 0x5f
2400ad62:	f002 0203 	and.w	r2, r2, #3
2400ad66:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
2400ad68:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
2400ad6c:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
2400ad6e:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
2400ad72:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
2400ad74:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
2400ad78:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
2400ad7a:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400ad7c:	0d12      	lsrs	r2, r2, #20
2400ad7e:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
2400ad80:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
2400ad84:	f002 020f 	and.w	r2, r2, #15
2400ad88:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
2400ad8a:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400ad8c:	f3c2 32c0 	ubfx	r2, r2, #15, #1
2400ad90:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
2400ad92:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400ad94:	f3c2 3280 	ubfx	r2, r2, #14, #1
2400ad98:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
2400ad9a:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400ad9c:	f3c2 3240 	ubfx	r2, r2, #13, #1
2400ada0:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
2400ada2:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400ada4:	f3c2 3200 	ubfx	r2, r2, #12, #1
2400ada8:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
2400adaa:	f881 c00d 	strb.w	ip, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
2400adae:	6b82      	ldr	r2, [r0, #56]	; 0x38
2400adb0:	2a00      	cmp	r2, #0
2400adb2:	f040 808a 	bne.w	2400aeca <HAL_SD_GetCardCSD+0x182>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
2400adb6:	6e04      	ldr	r4, [r0, #96]	; 0x60
2400adb8:	f640 72fc 	movw	r2, #4092	; 0xffc
2400adbc:	6e40      	ldr	r0, [r0, #100]	; 0x64
2400adbe:	ea02 0284 	and.w	r2, r2, r4, lsl #2
2400adc2:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
2400adc6:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
2400adc8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400adca:	f3c2 62c2 	ubfx	r2, r2, #27, #3
2400adce:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
2400add0:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
2400add4:	f002 0207 	and.w	r2, r2, #7
2400add8:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
2400adda:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400addc:	f3c2 5242 	ubfx	r2, r2, #21, #3
2400ade0:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
2400ade2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400ade4:	f3c2 4282 	ubfx	r2, r2, #18, #3
2400ade8:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
2400adea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400adec:	f3c2 32c2 	ubfx	r2, r2, #15, #3
2400adf0:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
2400adf2:	690a      	ldr	r2, [r1, #16]
2400adf4:	3201      	adds	r2, #1
2400adf6:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
2400adf8:	7e08      	ldrb	r0, [r1, #24]
2400adfa:	f000 0007 	and.w	r0, r0, #7
2400adfe:	3002      	adds	r0, #2
2400ae00:	4082      	lsls	r2, r0
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
2400ae02:	2001      	movs	r0, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
2400ae04:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
2400ae06:	f891 c008 	ldrb.w	ip, [r1, #8]
2400ae0a:	f00c 0c0f 	and.w	ip, ip, #15
2400ae0e:	fa00 f00c 	lsl.w	r0, r0, ip
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
2400ae12:	ea4f 2c50 	mov.w	ip, r0, lsr #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
2400ae16:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
2400ae18:	fb02 f20c 	mul.w	r2, r2, ip
2400ae1c:	651a      	str	r2, [r3, #80]	; 0x50
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
2400ae1e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    hsd->SdCard.LogBlockSize = 512U;
2400ae20:	f44f 7400 	mov.w	r4, #512	; 0x200
  pCSD->Reserved3 = 0;
2400ae24:	2000      	movs	r0, #0
  pCSD->Reserved4 = 1;
2400ae26:	f04f 0c01 	mov.w	ip, #1
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
2400ae2a:	f3c2 3280 	ubfx	r2, r2, #14, #1
    hsd->SdCard.LogBlockSize = 512U;
2400ae2e:	655c      	str	r4, [r3, #84]	; 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
2400ae30:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
2400ae32:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400ae34:	f3c2 12c6 	ubfx	r2, r2, #7, #7
2400ae38:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
2400ae3a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400ae3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
2400ae40:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
2400ae42:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400ae44:	0fd2      	lsrs	r2, r2, #31
2400ae46:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
2400ae48:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400ae4a:	f3c2 7241 	ubfx	r2, r2, #29, #2
2400ae4e:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
2400ae50:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400ae52:	f3c2 6282 	ubfx	r2, r2, #26, #3
2400ae56:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
2400ae58:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400ae5a:	f3c2 5283 	ubfx	r2, r2, #22, #4
2400ae5e:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
2400ae60:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400ae62:	f3c2 5240 	ubfx	r2, r2, #21, #1
2400ae66:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
2400ae6a:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
2400ae6e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
2400ae72:	ea02 020c 	and.w	r2, r2, ip
2400ae76:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
2400ae7a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400ae7c:	f3c2 32c0 	ubfx	r2, r2, #15, #1
2400ae80:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
2400ae84:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400ae86:	f3c2 3280 	ubfx	r2, r2, #14, #1
2400ae8a:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
2400ae8e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400ae90:	f3c2 3240 	ubfx	r2, r2, #13, #1
2400ae94:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
2400ae98:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400ae9a:	f3c2 3200 	ubfx	r2, r2, #12, #1
2400ae9e:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
2400aea2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400aea4:	f3c2 2281 	ubfx	r2, r2, #10, #2
2400aea8:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
2400aeac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400aeae:	f3c2 2201 	ubfx	r2, r2, #8, #2
2400aeb2:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
2400aeb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2400aeb8:	f3c3 0346 	ubfx	r3, r3, #1, #7
2400aebc:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
2400aec0:	f881 c02a 	strb.w	ip, [r1, #42]	; 0x2a
}
2400aec4:	f85d 4b04 	ldr.w	r4, [sp], #4
2400aec8:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
2400aeca:	2a01      	cmp	r2, #1
2400aecc:	d110      	bne.n	2400aef0 <HAL_SD_GetCardCSD+0x1a8>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
2400aece:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400aed0:	f8b0 4066 	ldrh.w	r4, [r0, #102]	; 0x66
    hsd->SdCard.BlockSize = 512U;
2400aed4:	f44f 7000 	mov.w	r0, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
2400aed8:	0412      	lsls	r2, r2, #16
2400aeda:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
2400aede:	4322      	orrs	r2, r4
2400aee0:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
2400aee2:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
2400aee4:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
2400aee6:	3201      	adds	r2, #1
2400aee8:	0292      	lsls	r2, r2, #10
2400aeea:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
2400aeec:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
2400aeee:	e796      	b.n	2400ae1e <HAL_SD_GetCardCSD+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400aef0:	6802      	ldr	r2, [r0, #0]
    hsd->State = HAL_SD_STATE_READY;
2400aef2:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400aef4:	4805      	ldr	r0, [pc, #20]	; (2400af0c <HAL_SD_GetCardCSD+0x1c4>)
2400aef6:	6390      	str	r0, [r2, #56]	; 0x38
    return HAL_ERROR;
2400aef8:	4608      	mov	r0, r1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400aefa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2400aefc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
2400af00:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
2400af02:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
}
2400af06:	f85d 4b04 	ldr.w	r4, [sp], #4
2400af0a:	4770      	bx	lr
2400af0c:	1fe00fff 	.word	0x1fe00fff

2400af10 <HAL_SD_InitCard>:
{
2400af10:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
2400af12:	2200      	movs	r2, #0
{
2400af14:	b095      	sub	sp, #84	; 0x54
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
2400af16:	2300      	movs	r3, #0
{
2400af18:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
2400af1a:	2100      	movs	r1, #0
2400af1c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
2400af20:	e9cd 2304 	strd	r2, r3, [sp, #16]
2400af24:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
2400af28:	f7fe fd6a 	bl	24009a00 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
2400af2c:	b940      	cbnz	r0, 2400af40 <HAL_SD_InitCard+0x30>
    hsd->State = HAL_SD_STATE_READY;
2400af2e:	2601      	movs	r6, #1
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
2400af30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hsd->State = HAL_SD_STATE_READY;
2400af34:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
2400af38:	6363      	str	r3, [r4, #52]	; 0x34
}
2400af3a:	4630      	mov	r0, r6
2400af3c:	b015      	add	sp, #84	; 0x54
2400af3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
2400af40:	0a06      	lsrs	r6, r0, #8
2400af42:	4b8e      	ldr	r3, [pc, #568]	; (2400b17c <HAL_SD_InitCard+0x26c>)
  (void)SDMMC_Init(hsd->Instance, Init);
2400af44:	aa07      	add	r2, sp, #28
2400af46:	4605      	mov	r5, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
2400af48:	fba3 3606 	umull	r3, r6, r3, r6
  (void)SDMMC_Init(hsd->Instance, Init);
2400af4c:	ab04      	add	r3, sp, #16
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
2400af4e:	0936      	lsrs	r6, r6, #4
  (void)SDMMC_Init(hsd->Instance, Init);
2400af50:	9608      	str	r6, [sp, #32]
2400af52:	e892 0003 	ldmia.w	r2, {r0, r1}
2400af56:	e88d 0003 	stmia.w	sp, {r0, r1}
2400af5a:	cb0e      	ldmia	r3, {r1, r2, r3}
2400af5c:	6820      	ldr	r0, [r4, #0]
2400af5e:	f001 f881 	bl	2400c064 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
2400af62:	6820      	ldr	r0, [r4, #0]
2400af64:	f001 f8a4 	bl	2400c0b0 <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
2400af68:	4b85      	ldr	r3, [pc, #532]	; (2400b180 <HAL_SD_InitCard+0x270>)
2400af6a:	429d      	cmp	r5, r3
2400af6c:	d902      	bls.n	2400af74 <HAL_SD_InitCard+0x64>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
2400af6e:	0076      	lsls	r6, r6, #1
2400af70:	fbb5 f5f6 	udiv	r5, r5, r6
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
2400af74:	4883      	ldr	r0, [pc, #524]	; (2400b184 <HAL_SD_InitCard+0x274>)
2400af76:	fbb0 f0f5 	udiv	r0, r0, r5
2400af7a:	3001      	adds	r0, #1
2400af7c:	f7f9 ff16 	bl	24004dac <HAL_Delay>
  __IO uint32_t count = 0U;
2400af80:	2300      	movs	r3, #0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
2400af82:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
2400af84:	9303      	str	r3, [sp, #12]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
2400af86:	f001 fdd5 	bl	2400cb34 <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
2400af8a:	4605      	mov	r5, r0
2400af8c:	b140      	cbz	r0, 2400afa0 <HAL_SD_InitCard+0x90>
    hsd->State = HAL_SD_STATE_READY;
2400af8e:	2601      	movs	r6, #1
2400af90:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
}
2400af94:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
2400af96:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400af98:	432b      	orrs	r3, r5
2400af9a:	6363      	str	r3, [r4, #52]	; 0x34
}
2400af9c:	b015      	add	sp, #84	; 0x54
2400af9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
2400afa0:	6820      	ldr	r0, [r4, #0]
2400afa2:	f001 fdf3 	bl	2400cb8c <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
2400afa6:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
2400afaa:	f000 80ce 	beq.w	2400b14a <HAL_SD_InitCard+0x23a>
    hsd->SdCard.CardVersion = CARD_V2_X;
2400afae:	2301      	movs	r3, #1
2400afb0:	63e3      	str	r3, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
2400afb2:	2100      	movs	r1, #0
2400afb4:	6820      	ldr	r0, [r4, #0]
2400afb6:	f001 fe29 	bl	2400cc0c <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400afba:	bb08      	cbnz	r0, 2400b000 <HAL_SD_InitCard+0xf0>
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
2400afbc:	9b03      	ldr	r3, [sp, #12]
2400afbe:	f64f 76fe 	movw	r6, #65534	; 0xfffe
2400afc2:	42b3      	cmp	r3, r6
2400afc4:	f200 80d3 	bhi.w	2400b16e <HAL_SD_InitCard+0x25e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
2400afc8:	4f6f      	ldr	r7, [pc, #444]	; (2400b188 <HAL_SD_InitCard+0x278>)
2400afca:	e010      	b.n	2400afee <HAL_SD_InitCard+0xde>
2400afcc:	6820      	ldr	r0, [r4, #0]
2400afce:	f001 fecb 	bl	2400cd68 <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400afd2:	4601      	mov	r1, r0
2400afd4:	b9a0      	cbnz	r0, 2400b000 <HAL_SD_InitCard+0xf0>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400afd6:	6820      	ldr	r0, [r4, #0]
2400afd8:	f001 f876 	bl	2400c0c8 <SDMMC_GetResponse>
    count++;
2400afdc:	9b03      	ldr	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
2400afde:	2800      	cmp	r0, #0
    count++;
2400afe0:	f103 0301 	add.w	r3, r3, #1
2400afe4:	9303      	str	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
2400afe6:	9b03      	ldr	r3, [sp, #12]
2400afe8:	db0d      	blt.n	2400b006 <HAL_SD_InitCard+0xf6>
2400afea:	42b3      	cmp	r3, r6
2400afec:	d80b      	bhi.n	2400b006 <HAL_SD_InitCard+0xf6>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
2400afee:	2100      	movs	r1, #0
2400aff0:	6820      	ldr	r0, [r4, #0]
2400aff2:	f001 fe0b 	bl	2400cc0c <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
2400aff6:	4639      	mov	r1, r7
    if (errorstate != HAL_SD_ERROR_NONE)
2400aff8:	2800      	cmp	r0, #0
2400affa:	d0e7      	beq.n	2400afcc <HAL_SD_InitCard+0xbc>
2400affc:	4605      	mov	r5, r0
2400affe:	e7c6      	b.n	2400af8e <HAL_SD_InitCard+0x7e>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400b000:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
2400b004:	e7c3      	b.n	2400af8e <HAL_SD_InitCard+0x7e>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
2400b006:	9a03      	ldr	r2, [sp, #12]
2400b008:	f64f 73fe 	movw	r3, #65534	; 0xfffe
2400b00c:	429a      	cmp	r2, r3
2400b00e:	f200 80b2 	bhi.w	2400b176 <HAL_SD_InitCard+0x266>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
2400b012:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  hsd->SdCard.CardType = CARD_SDSC;
2400b016:	f04f 0300 	mov.w	r3, #0
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
2400b01a:	bf18      	it	ne
2400b01c:	2501      	movne	r5, #1
  hsd->SdCard.CardType = CARD_SDSC;
2400b01e:	63a3      	str	r3, [r4, #56]	; 0x38
  uint16_t sd_rca = 0U;
2400b020:	2300      	movs	r3, #0
2400b022:	63a5      	str	r5, [r4, #56]	; 0x38
2400b024:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint32_t tickstart = HAL_GetTick();
2400b028:	f7f9 feba 	bl	24004da0 <HAL_GetTick>
2400b02c:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
2400b02e:	6820      	ldr	r0, [r4, #0]
2400b030:	f001 f846 	bl	2400c0c0 <SDMMC_GetPowerState>
2400b034:	b350      	cbz	r0, 2400b08c <HAL_SD_InitCard+0x17c>
  if (hsd->SdCard.CardType != CARD_SECURED)
2400b036:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400b038:	2b03      	cmp	r3, #3
2400b03a:	d132      	bne.n	2400b0a2 <HAL_SD_InitCard+0x192>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
2400b03c:	2104      	movs	r1, #4
2400b03e:	6820      	ldr	r0, [r4, #0]
2400b040:	f001 f842 	bl	2400c0c8 <SDMMC_GetResponse>
2400b044:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
2400b046:	a909      	add	r1, sp, #36	; 0x24
2400b048:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
2400b04a:	0d1b      	lsrs	r3, r3, #20
2400b04c:	6423      	str	r3, [r4, #64]	; 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
2400b04e:	f7ff fe7b 	bl	2400ad48 <HAL_SD_GetCardCSD>
2400b052:	4606      	mov	r6, r0
2400b054:	2800      	cmp	r0, #0
2400b056:	f040 8084 	bne.w	2400b162 <HAL_SD_InitCard+0x252>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
2400b05a:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400b05c:	6820      	ldr	r0, [r4, #0]
2400b05e:	0409      	lsls	r1, r1, #16
2400b060:	f001 fcba 	bl	2400c9d8 <SDMMC_CmdSelDesel>
  if (errorstate != HAL_SD_ERROR_NONE)
2400b064:	b9a0      	cbnz	r0, 2400b090 <HAL_SD_InitCard+0x180>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
2400b066:	f44f 7100 	mov.w	r1, #512	; 0x200
2400b06a:	6820      	ldr	r0, [r4, #0]
2400b06c:	f001 f846 	bl	2400c0fc <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400b070:	2800      	cmp	r0, #0
2400b072:	f43f af62 	beq.w	2400af3a <HAL_SD_InitCard+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b076:	6822      	ldr	r2, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
2400b078:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b07a:	4944      	ldr	r1, [pc, #272]	; (2400b18c <HAL_SD_InitCard+0x27c>)
    return HAL_ERROR;
2400b07c:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b07e:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
2400b080:	6b62      	ldr	r2, [r4, #52]	; 0x34
2400b082:	4310      	orrs	r0, r2
2400b084:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
2400b086:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    return HAL_ERROR;
2400b08a:	e756      	b.n	2400af3a <HAL_SD_InitCard+0x2a>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
2400b08c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
2400b090:	2601      	movs	r6, #1
2400b092:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
2400b096:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400b098:	4303      	orrs	r3, r0
}
2400b09a:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
2400b09c:	6363      	str	r3, [r4, #52]	; 0x34
}
2400b09e:	b015      	add	sp, #84	; 0x54
2400b0a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
2400b0a2:	6820      	ldr	r0, [r4, #0]
2400b0a4:	f001 fff2 	bl	2400d08c <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
2400b0a8:	2800      	cmp	r0, #0
2400b0aa:	d1f1      	bne.n	2400b090 <HAL_SD_InitCard+0x180>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400b0ac:	4601      	mov	r1, r0
2400b0ae:	6820      	ldr	r0, [r4, #0]
2400b0b0:	f001 f80a 	bl	2400c0c8 <SDMMC_GetResponse>
2400b0b4:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400b0b6:	2104      	movs	r1, #4
2400b0b8:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400b0ba:	66e3      	str	r3, [r4, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400b0bc:	f001 f804 	bl	2400c0c8 <SDMMC_GetResponse>
2400b0c0:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400b0c2:	2108      	movs	r1, #8
2400b0c4:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400b0c6:	6723      	str	r3, [r4, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400b0c8:	f000 fffe 	bl	2400c0c8 <SDMMC_GetResponse>
2400b0cc:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400b0ce:	210c      	movs	r1, #12
2400b0d0:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400b0d2:	6763      	str	r3, [r4, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400b0d4:	f000 fff8 	bl	2400c0c8 <SDMMC_GetResponse>
  if (hsd->SdCard.CardType != CARD_SECURED)
2400b0d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400b0da:	67a0      	str	r0, [r4, #120]	; 0x78
  if (hsd->SdCard.CardType != CARD_SECURED)
2400b0dc:	2b03      	cmp	r3, #3
2400b0de:	d0ad      	beq.n	2400b03c <HAL_SD_InitCard+0x12c>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
2400b0e0:	f241 3687 	movw	r6, #4999	; 0x1387
2400b0e4:	e009      	b.n	2400b0fa <HAL_SD_InitCard+0x1ea>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
2400b0e6:	6820      	ldr	r0, [r4, #0]
2400b0e8:	f002 f84e 	bl	2400d188 <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
2400b0ec:	2800      	cmp	r0, #0
2400b0ee:	d1cf      	bne.n	2400b090 <HAL_SD_InitCard+0x180>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
2400b0f0:	f7f9 fe56 	bl	24004da0 <HAL_GetTick>
2400b0f4:	1b43      	subs	r3, r0, r5
2400b0f6:	42b3      	cmp	r3, r6
2400b0f8:	d836      	bhi.n	2400b168 <HAL_SD_InitCard+0x258>
    while (sd_rca == 0U)
2400b0fa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
2400b0fe:	f10d 010a 	add.w	r1, sp, #10
    while (sd_rca == 0U)
2400b102:	2b00      	cmp	r3, #0
2400b104:	d0ef      	beq.n	2400b0e6 <HAL_SD_InitCard+0x1d6>
  if (hsd->SdCard.CardType != CARD_SECURED)
2400b106:	6ba2      	ldr	r2, [r4, #56]	; 0x38
2400b108:	2a03      	cmp	r2, #3
2400b10a:	d097      	beq.n	2400b03c <HAL_SD_InitCard+0x12c>
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400b10c:	0419      	lsls	r1, r3, #16
2400b10e:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
2400b110:	6463      	str	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400b112:	f001 fff9 	bl	2400d108 <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
2400b116:	2800      	cmp	r0, #0
2400b118:	d1ba      	bne.n	2400b090 <HAL_SD_InitCard+0x180>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400b11a:	4601      	mov	r1, r0
2400b11c:	6820      	ldr	r0, [r4, #0]
2400b11e:	f000 ffd3 	bl	2400c0c8 <SDMMC_GetResponse>
2400b122:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400b124:	2104      	movs	r1, #4
2400b126:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400b128:	65e3      	str	r3, [r4, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400b12a:	f000 ffcd 	bl	2400c0c8 <SDMMC_GetResponse>
2400b12e:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400b130:	2108      	movs	r1, #8
2400b132:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400b134:	6623      	str	r3, [r4, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400b136:	f000 ffc7 	bl	2400c0c8 <SDMMC_GetResponse>
2400b13a:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400b13c:	210c      	movs	r1, #12
2400b13e:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400b140:	6663      	str	r3, [r4, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400b142:	f000 ffc1 	bl	2400c0c8 <SDMMC_GetResponse>
2400b146:	66a0      	str	r0, [r4, #104]	; 0x68
2400b148:	e778      	b.n	2400b03c <HAL_SD_InitCard+0x12c>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
2400b14a:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
2400b14c:	63e5      	str	r5, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
2400b14e:	f001 fcf1 	bl	2400cb34 <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
2400b152:	2800      	cmp	r0, #0
2400b154:	f47f af52 	bne.w	2400affc <HAL_SD_InitCard+0xec>
  if (hsd->SdCard.CardVersion == CARD_V2_X)
2400b158:	6be3      	ldr	r3, [r4, #60]	; 0x3c
2400b15a:	2b01      	cmp	r3, #1
2400b15c:	f47f af2e 	bne.w	2400afbc <HAL_SD_InitCard+0xac>
2400b160:	e727      	b.n	2400afb2 <HAL_SD_InitCard+0xa2>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400b162:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
2400b166:	e793      	b.n	2400b090 <HAL_SD_InitCard+0x180>
        return HAL_SD_ERROR_TIMEOUT;
2400b168:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  if (errorstate != HAL_SD_ERROR_NONE)
2400b16c:	e790      	b.n	2400b090 <HAL_SD_InitCard+0x180>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
2400b16e:	9b03      	ldr	r3, [sp, #12]
2400b170:	42b3      	cmp	r3, r6
2400b172:	f67f af55 	bls.w	2400b020 <HAL_SD_InitCard+0x110>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
2400b176:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
2400b17a:	e708      	b.n	2400af8e <HAL_SD_InitCard+0x7e>
2400b17c:	014f8b59 	.word	0x014f8b59
2400b180:	000c34ff 	.word	0x000c34ff
2400b184:	00012110 	.word	0x00012110
2400b188:	c1100000 	.word	0xc1100000
2400b18c:	1fe00fff 	.word	0x1fe00fff

2400b190 <HAL_SD_GetCardInfo>:
{
2400b190:	4603      	mov	r3, r0
}
2400b192:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
2400b194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
2400b196:	600a      	str	r2, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
2400b198:	6bda      	ldr	r2, [r3, #60]	; 0x3c
2400b19a:	604a      	str	r2, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
2400b19c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
2400b19e:	608a      	str	r2, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
2400b1a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
2400b1a2:	60ca      	str	r2, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
2400b1a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
2400b1a6:	610a      	str	r2, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
2400b1a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
2400b1aa:	614a      	str	r2, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
2400b1ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
2400b1ae:	618a      	str	r2, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
2400b1b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2400b1b2:	61cb      	str	r3, [r1, #28]
}
2400b1b4:	4770      	bx	lr
2400b1b6:	bf00      	nop

2400b1b8 <HAL_SD_ConfigWideBusOperation>:
{
2400b1b8:	b530      	push	{r4, r5, lr}
  hsd->State = HAL_SD_STATE_BUSY;
2400b1ba:	2203      	movs	r2, #3
  if (hsd->SdCard.CardType != CARD_SECURED)
2400b1bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
2400b1be:	b089      	sub	sp, #36	; 0x24
2400b1c0:	4604      	mov	r4, r0
  if (hsd->SdCard.CardType != CARD_SECURED)
2400b1c2:	4293      	cmp	r3, r2
{
2400b1c4:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
2400b1c6:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
2400b1ca:	d040      	beq.n	2400b24e <HAL_SD_ConfigWideBusOperation+0x96>
    if (WideMode == SDMMC_BUS_WIDE_8B)
2400b1cc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
2400b1d0:	d03d      	beq.n	2400b24e <HAL_SD_ConfigWideBusOperation+0x96>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
2400b1d2:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
2400b1d6:	d07d      	beq.n	2400b2d4 <HAL_SD_ConfigWideBusOperation+0x11c>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
2400b1d8:	2900      	cmp	r1, #0
2400b1da:	d05c      	beq.n	2400b296 <HAL_SD_ConfigWideBusOperation+0xde>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400b1dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400b1de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
2400b1e2:	6343      	str	r3, [r0, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
2400b1e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400b1e6:	2b00      	cmp	r3, #0
2400b1e8:	d138      	bne.n	2400b25c <HAL_SD_ConfigWideBusOperation+0xa4>
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
2400b1ea:	f44f 3080 	mov.w	r0, #65536	; 0x10000
2400b1ee:	2100      	movs	r1, #0
2400b1f0:	f7fe fc06 	bl	24009a00 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
2400b1f4:	2800      	cmp	r0, #0
2400b1f6:	d048      	beq.n	2400b28a <HAL_SD_ConfigWideBusOperation+0xd2>
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
2400b1f8:	6922      	ldr	r2, [r4, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400b1fa:	4b50      	ldr	r3, [pc, #320]	; (2400b33c <HAL_SD_ConfigWideBusOperation+0x184>)
      Init.ClockEdge           = hsd->Init.ClockEdge;
2400b1fc:	6861      	ldr	r1, [r4, #4]
      Init.BusWide             = WideMode;
2400b1fe:	9504      	str	r5, [sp, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
2400b200:	9205      	str	r2, [sp, #20]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400b202:	fba3 5300 	umull	r5, r3, r3, r0
2400b206:	6962      	ldr	r2, [r4, #20]
      Init.ClockEdge           = hsd->Init.ClockEdge;
2400b208:	9102      	str	r1, [sp, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400b20a:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
2400b20e:	68a1      	ldr	r1, [r4, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400b210:	ea4f 6513 	mov.w	r5, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
2400b214:	9103      	str	r1, [sp, #12]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400b216:	d20e      	bcs.n	2400b236 <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
2400b218:	6da1      	ldr	r1, [r4, #88]	; 0x58
2400b21a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
2400b21e:	d00a      	beq.n	2400b236 <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
2400b220:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
2400b224:	d078      	beq.n	2400b318 <HAL_SD_ConfigWideBusOperation+0x160>
        if (hsd->Init.ClockDiv == 0U)
2400b226:	b112      	cbz	r2, 2400b22e <HAL_SD_ConfigWideBusOperation+0x76>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
2400b228:	0053      	lsls	r3, r2, #1
2400b22a:	fbb0 f0f3 	udiv	r0, r0, r3
2400b22e:	4b44      	ldr	r3, [pc, #272]	; (2400b340 <HAL_SD_ConfigWideBusOperation+0x188>)
2400b230:	4298      	cmp	r0, r3
2400b232:	bf88      	it	hi
2400b234:	462a      	movhi	r2, r5
      (void)SDMMC_Init(hsd->Instance, Init);
2400b236:	a905      	add	r1, sp, #20
        Init.ClockDiv = hsd->Init.ClockDiv;
2400b238:	9206      	str	r2, [sp, #24]
      (void)SDMMC_Init(hsd->Instance, Init);
2400b23a:	ab02      	add	r3, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
2400b23c:	2500      	movs	r5, #0
      (void)SDMMC_Init(hsd->Instance, Init);
2400b23e:	c903      	ldmia	r1, {r0, r1}
2400b240:	e88d 0003 	stmia.w	sp, {r0, r1}
2400b244:	cb0e      	ldmia	r3, {r1, r2, r3}
2400b246:	6820      	ldr	r0, [r4, #0]
2400b248:	f000 ff0c 	bl	2400c064 <SDMMC_Init>
2400b24c:	e00a      	b.n	2400b264 <HAL_SD_ConfigWideBusOperation+0xac>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400b24e:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400b250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2400b254:	6363      	str	r3, [r4, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
2400b256:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400b258:	2b00      	cmp	r3, #0
2400b25a:	d0c6      	beq.n	2400b1ea <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b25c:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
2400b25e:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b260:	4a38      	ldr	r2, [pc, #224]	; (2400b344 <HAL_SD_ConfigWideBusOperation+0x18c>)
2400b262:	639a      	str	r2, [r3, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
2400b264:	f44f 7100 	mov.w	r1, #512	; 0x200
2400b268:	6820      	ldr	r0, [r4, #0]
2400b26a:	f000 ff47 	bl	2400c0fc <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400b26e:	b130      	cbz	r0, 2400b27e <HAL_SD_ConfigWideBusOperation+0xc6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b270:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
2400b272:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b274:	4a33      	ldr	r2, [pc, #204]	; (2400b344 <HAL_SD_ConfigWideBusOperation+0x18c>)
2400b276:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
2400b278:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400b27a:	4303      	orrs	r3, r0
2400b27c:	6363      	str	r3, [r4, #52]	; 0x34
  hsd->State = HAL_SD_STATE_READY;
2400b27e:	2301      	movs	r3, #1
}
2400b280:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
2400b282:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
2400b286:	b009      	add	sp, #36	; 0x24
2400b288:	bd30      	pop	{r4, r5, pc}
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
2400b28a:	6b63      	ldr	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
2400b28c:	2501      	movs	r5, #1
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
2400b28e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
2400b292:	6363      	str	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
2400b294:	e7e6      	b.n	2400b264 <HAL_SD_ConfigWideBusOperation+0xac>
  uint32_t scr[2U] = {0UL, 0UL};
2400b296:	2200      	movs	r2, #0
2400b298:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400b29a:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
2400b29c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400b2a0:	f000 ff12 	bl	2400c0c8 <SDMMC_GetResponse>
2400b2a4:	0182      	lsls	r2, r0, #6
2400b2a6:	d434      	bmi.n	2400b312 <HAL_SD_ConfigWideBusOperation+0x15a>
  errorstate = SD_FindSCR(hsd, scr);
2400b2a8:	a902      	add	r1, sp, #8
2400b2aa:	4620      	mov	r0, r4
2400b2ac:	f7ff fafc 	bl	2400a8a8 <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
2400b2b0:	b960      	cbnz	r0, 2400b2cc <HAL_SD_ConfigWideBusOperation+0x114>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
2400b2b2:	9b03      	ldr	r3, [sp, #12]
2400b2b4:	03db      	lsls	r3, r3, #15
2400b2b6:	d535      	bpl.n	2400b324 <HAL_SD_ConfigWideBusOperation+0x16c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400b2b8:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400b2ba:	6820      	ldr	r0, [r4, #0]
2400b2bc:	0409      	lsls	r1, r1, #16
2400b2be:	f001 fca5 	bl	2400cc0c <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400b2c2:	b918      	cbnz	r0, 2400b2cc <HAL_SD_ConfigWideBusOperation+0x114>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
2400b2c4:	4601      	mov	r1, r0
2400b2c6:	6820      	ldr	r0, [r4, #0]
2400b2c8:	f001 fd8a 	bl	2400cde0 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
2400b2cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400b2ce:	4303      	orrs	r3, r0
2400b2d0:	6363      	str	r3, [r4, #52]	; 0x34
2400b2d2:	e7c0      	b.n	2400b256 <HAL_SD_ConfigWideBusOperation+0x9e>
  uint32_t scr[2U] = {0UL, 0UL};
2400b2d4:	2200      	movs	r2, #0
2400b2d6:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400b2d8:	2100      	movs	r1, #0
2400b2da:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
2400b2dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400b2e0:	f000 fef2 	bl	2400c0c8 <SDMMC_GetResponse>
2400b2e4:	0180      	lsls	r0, r0, #6
2400b2e6:	d414      	bmi.n	2400b312 <HAL_SD_ConfigWideBusOperation+0x15a>
  errorstate = SD_FindSCR(hsd, scr);
2400b2e8:	a902      	add	r1, sp, #8
2400b2ea:	4620      	mov	r0, r4
2400b2ec:	f7ff fadc 	bl	2400a8a8 <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
2400b2f0:	2800      	cmp	r0, #0
2400b2f2:	d1eb      	bne.n	2400b2cc <HAL_SD_ConfigWideBusOperation+0x114>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
2400b2f4:	9b03      	ldr	r3, [sp, #12]
2400b2f6:	0359      	lsls	r1, r3, #13
2400b2f8:	d514      	bpl.n	2400b324 <HAL_SD_ConfigWideBusOperation+0x16c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400b2fa:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400b2fc:	6820      	ldr	r0, [r4, #0]
2400b2fe:	0409      	lsls	r1, r1, #16
2400b300:	f001 fc84 	bl	2400cc0c <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400b304:	2800      	cmp	r0, #0
2400b306:	d1e1      	bne.n	2400b2cc <HAL_SD_ConfigWideBusOperation+0x114>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
2400b308:	2102      	movs	r1, #2
2400b30a:	6820      	ldr	r0, [r4, #0]
2400b30c:	f001 fd68 	bl	2400cde0 <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
2400b310:	e7dc      	b.n	2400b2cc <HAL_SD_ConfigWideBusOperation+0x114>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
2400b312:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400b316:	e7d9      	b.n	2400b2cc <HAL_SD_ConfigWideBusOperation+0x114>
        if (hsd->Init.ClockDiv == 0U)
2400b318:	b93a      	cbnz	r2, 2400b32a <HAL_SD_ConfigWideBusOperation+0x172>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
2400b31a:	490b      	ldr	r1, [pc, #44]	; (2400b348 <HAL_SD_ConfigWideBusOperation+0x190>)
2400b31c:	4288      	cmp	r0, r1
2400b31e:	d98a      	bls.n	2400b236 <HAL_SD_ConfigWideBusOperation+0x7e>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
2400b320:	0e5a      	lsrs	r2, r3, #25
2400b322:	e788      	b.n	2400b236 <HAL_SD_ConfigWideBusOperation+0x7e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
2400b324:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
2400b328:	e7d0      	b.n	2400b2cc <HAL_SD_ConfigWideBusOperation+0x114>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
2400b32a:	0051      	lsls	r1, r2, #1
2400b32c:	fbb0 f1f1 	udiv	r1, r0, r1
2400b330:	4805      	ldr	r0, [pc, #20]	; (2400b348 <HAL_SD_ConfigWideBusOperation+0x190>)
2400b332:	4281      	cmp	r1, r0
2400b334:	f67f af7f 	bls.w	2400b236 <HAL_SD_ConfigWideBusOperation+0x7e>
2400b338:	e7f2      	b.n	2400b320 <HAL_SD_ConfigWideBusOperation+0x168>
2400b33a:	bf00      	nop
2400b33c:	55e63b89 	.word	0x55e63b89
2400b340:	017d7840 	.word	0x017d7840
2400b344:	1fe00fff 	.word	0x1fe00fff
2400b348:	02faf080 	.word	0x02faf080

2400b34c <HAL_SD_Init>:
{
2400b34c:	b5f0      	push	{r4, r5, r6, r7, lr}
2400b34e:	b087      	sub	sp, #28
  if (hsd == NULL)
2400b350:	2800      	cmp	r0, #0
2400b352:	d045      	beq.n	2400b3e0 <HAL_SD_Init+0x94>
  if (hsd->State == HAL_SD_STATE_RESET)
2400b354:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
2400b358:	4604      	mov	r4, r0
2400b35a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
2400b35e:	2b00      	cmp	r3, #0
2400b360:	d042      	beq.n	2400b3e8 <HAL_SD_Init+0x9c>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
2400b362:	2304      	movs	r3, #4
  if (HAL_SD_InitCard(hsd) != HAL_OK)
2400b364:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_PROGRAMMING;
2400b366:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
2400b36a:	f7ff fdd1 	bl	2400af10 <HAL_SD_InitCard>
2400b36e:	2800      	cmp	r0, #0
2400b370:	d136      	bne.n	2400b3e0 <HAL_SD_Init+0x94>
  if (hsd->State == HAL_SD_STATE_BUSY)
2400b372:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
2400b376:	2b03      	cmp	r3, #3
2400b378:	d032      	beq.n	2400b3e0 <HAL_SD_Init+0x94>
2400b37a:	a901      	add	r1, sp, #4
2400b37c:	4620      	mov	r0, r4
2400b37e:	f7ff f9cd 	bl	2400a71c <HAL_SD_GetCardStatus.part.0>
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
2400b382:	bb68      	cbnz	r0, 2400b3e0 <HAL_SD_Init+0x94>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400b384:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  speedgrade = CardStatus.UhsSpeedGrade;
2400b386:	f89d 3014 	ldrb.w	r3, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400b38a:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
2400b38c:	f89d 2015 	ldrb.w	r2, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
2400b390:	b2db      	uxtb	r3, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
2400b392:	b2d2      	uxtb	r2, r2
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400b394:	d02c      	beq.n	2400b3f0 <HAL_SD_Init+0xa4>
2400b396:	4603      	mov	r3, r0
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
2400b398:	68e1      	ldr	r1, [r4, #12]
2400b39a:	4620      	mov	r0, r4
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
2400b39c:	65a3      	str	r3, [r4, #88]	; 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
2400b39e:	f7ff ff0b 	bl	2400b1b8 <HAL_SD_ConfigWideBusOperation>
2400b3a2:	4606      	mov	r6, r0
2400b3a4:	b9e0      	cbnz	r0, 2400b3e0 <HAL_SD_Init+0x94>
  tickstart = HAL_GetTick();
2400b3a6:	f7f9 fcfb 	bl	24004da0 <HAL_GetTick>
2400b3aa:	4607      	mov	r7, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
2400b3ac:	e00c      	b.n	2400b3c8 <HAL_SD_Init+0x7c>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400b3ae:	6820      	ldr	r0, [r4, #0]
2400b3b0:	4629      	mov	r1, r5
2400b3b2:	f000 fe89 	bl	2400c0c8 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
2400b3b6:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
2400b3ba:	2804      	cmp	r0, #4
2400b3bc:	d01f      	beq.n	2400b3fe <HAL_SD_Init+0xb2>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
2400b3be:	f7f9 fcef 	bl	24004da0 <HAL_GetTick>
2400b3c2:	1bc3      	subs	r3, r0, r7
2400b3c4:	3301      	adds	r3, #1
2400b3c6:	d020      	beq.n	2400b40a <HAL_SD_Init+0xbe>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400b3c8:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400b3ca:	6820      	ldr	r0, [r4, #0]
2400b3cc:	0409      	lsls	r1, r1, #16
2400b3ce:	f001 ff3b 	bl	2400d248 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
2400b3d2:	4605      	mov	r5, r0
2400b3d4:	2800      	cmp	r0, #0
2400b3d6:	d0ea      	beq.n	2400b3ae <HAL_SD_Init+0x62>
    hsd->ErrorCode |= errorstate;
2400b3d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400b3da:	4303      	orrs	r3, r0
2400b3dc:	6363      	str	r3, [r4, #52]	; 0x34
  return (HAL_SD_CardStateTypeDef)cardstate;
2400b3de:	e7ee      	b.n	2400b3be <HAL_SD_Init+0x72>
    return HAL_ERROR;
2400b3e0:	2601      	movs	r6, #1
}
2400b3e2:	4630      	mov	r0, r6
2400b3e4:	b007      	add	sp, #28
2400b3e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->Lock = HAL_UNLOCKED;
2400b3e8:	7602      	strb	r2, [r0, #24]
    HAL_SD_MspInit(hsd);
2400b3ea:	f7f9 f91f 	bl	2400462c <HAL_SD_MspInit>
2400b3ee:	e7b8      	b.n	2400b362 <HAL_SD_Init+0x16>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400b3f0:	4313      	orrs	r3, r2
2400b3f2:	bf0c      	ite	eq
2400b3f4:	f44f 7380 	moveq.w	r3, #256	; 0x100
2400b3f8:	f44f 7300 	movne.w	r3, #512	; 0x200
2400b3fc:	e7cc      	b.n	2400b398 <HAL_SD_Init+0x4c>
  hsd->State = HAL_SD_STATE_READY;
2400b3fe:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400b400:	6365      	str	r5, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
2400b402:	62e5      	str	r5, [r4, #44]	; 0x2c
  hsd->State = HAL_SD_STATE_READY;
2400b404:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return HAL_OK;
2400b408:	e7eb      	b.n	2400b3e2 <HAL_SD_Init+0x96>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
2400b40a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State = HAL_SD_STATE_READY;
2400b40e:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
2400b410:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
2400b412:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400b414:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      return HAL_TIMEOUT;
2400b418:	e7e3      	b.n	2400b3e2 <HAL_SD_Init+0x96>
2400b41a:	bf00      	nop

2400b41c <HAL_SD_GetCardState>:
{
2400b41c:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400b41e:	6c41      	ldr	r1, [r0, #68]	; 0x44
{
2400b420:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400b422:	6800      	ldr	r0, [r0, #0]
2400b424:	0409      	lsls	r1, r1, #16
2400b426:	f001 ff0f 	bl	2400d248 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
2400b42a:	4601      	mov	r1, r0
2400b42c:	b120      	cbz	r0, 2400b438 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
2400b42e:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400b430:	2000      	movs	r0, #0
2400b432:	430b      	orrs	r3, r1
2400b434:	6363      	str	r3, [r4, #52]	; 0x34
}
2400b436:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400b438:	6820      	ldr	r0, [r4, #0]
2400b43a:	f000 fe45 	bl	2400c0c8 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
2400b43e:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
2400b442:	bd10      	pop	{r4, pc}

2400b444 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
2400b444:	b318      	cbz	r0, 2400b48e <HAL_SDRAM_Init+0x4a>
{
2400b446:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
2400b448:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
2400b44c:	4604      	mov	r4, r0
2400b44e:	460d      	mov	r5, r1
2400b450:	f003 02ff 	and.w	r2, r3, #255	; 0xff
2400b454:	b1b3      	cbz	r3, 2400b484 <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
2400b456:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
2400b458:	2302      	movs	r3, #2
2400b45a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
2400b45e:	f851 0b04 	ldr.w	r0, [r1], #4
2400b462:	f000 fd4d 	bl	2400bf00 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
2400b466:	6862      	ldr	r2, [r4, #4]
2400b468:	4629      	mov	r1, r5
2400b46a:	6820      	ldr	r0, [r4, #0]
2400b46c:	f000 fd86 	bl	2400bf7c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
2400b470:	4a08      	ldr	r2, [pc, #32]	; (2400b494 <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
2400b472:	2101      	movs	r1, #1

  return HAL_OK;
2400b474:	2000      	movs	r0, #0
  __FMC_ENABLE();
2400b476:	6813      	ldr	r3, [r2, #0]
2400b478:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
2400b47c:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
2400b47e:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
2400b482:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
2400b484:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
2400b488:	f7f6 fd92 	bl	24001fb0 <HAL_SDRAM_MspInit>
2400b48c:	e7e3      	b.n	2400b456 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
2400b48e:	2001      	movs	r0, #1
}
2400b490:	4770      	bx	lr
2400b492:	bf00      	nop
2400b494:	52004000 	.word	0x52004000

2400b498 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
2400b498:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
2400b49a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
2400b49e:	4604      	mov	r4, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
2400b4a0:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
2400b4a2:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
2400b4a4:	d004      	beq.n	2400b4b0 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
2400b4a6:	f000 06fb 	and.w	r6, r0, #251	; 0xfb
2400b4aa:	2e01      	cmp	r6, #1
2400b4ac:	d001      	beq.n	2400b4b2 <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
2400b4ae:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
2400b4b0:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400b4b2:	2302      	movs	r3, #2
2400b4b4:	460d      	mov	r5, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
2400b4b6:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400b4b8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
2400b4bc:	f000 fdac 	bl	2400c018 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
2400b4c0:	682b      	ldr	r3, [r5, #0]
2400b4c2:	2b02      	cmp	r3, #2
2400b4c4:	d003      	beq.n	2400b4ce <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
2400b4c6:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
2400b4c8:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
2400b4cc:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
2400b4ce:	2305      	movs	r3, #5
  return HAL_OK;
2400b4d0:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
2400b4d2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
2400b4d6:	bd70      	pop	{r4, r5, r6, pc}

2400b4d8 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
2400b4d8:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
2400b4da:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
2400b4de:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
2400b4e0:	2b02      	cmp	r3, #2
2400b4e2:	b2d8      	uxtb	r0, r3
2400b4e4:	d005      	beq.n	2400b4f2 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
2400b4e6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
2400b4ea:	2b01      	cmp	r3, #1
2400b4ec:	b2dd      	uxtb	r5, r3
2400b4ee:	d001      	beq.n	2400b4f4 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
2400b4f0:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
2400b4f2:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400b4f4:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
2400b4f6:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400b4f8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
2400b4fc:	f000 fda4 	bl	2400c048 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
2400b500:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
2400b502:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
2400b506:	bd38      	pop	{r3, r4, r5, pc}

2400b508 <SPI_AbortTransfer>:
  * @retval None
  */
static void SPI_AbortTransfer(SPI_HandleTypeDef *hspi)
{
  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
2400b508:	6801      	ldr	r1, [r0, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
2400b50a:	4b1b      	ldr	r3, [pc, #108]	; (2400b578 <SPI_AbortTransfer+0x70>)
  __HAL_SPI_DISABLE(hspi);
2400b50c:	680a      	ldr	r2, [r1, #0]
2400b50e:	f022 0201 	bic.w	r2, r2, #1
2400b512:	600a      	str	r2, [r1, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
2400b514:	6802      	ldr	r2, [r0, #0]
2400b516:	6911      	ldr	r1, [r2, #16]
2400b518:	400b      	ands	r3, r1
2400b51a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Clear the Status flags in the SR register */
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
2400b51c:	6802      	ldr	r2, [r0, #0]
2400b51e:	6993      	ldr	r3, [r2, #24]
2400b520:	f043 0308 	orr.w	r3, r3, #8
2400b524:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2400b526:	6802      	ldr	r2, [r0, #0]
2400b528:	6993      	ldr	r3, [r2, #24]
2400b52a:	f043 0310 	orr.w	r3, r3, #16
2400b52e:	6193      	str	r3, [r2, #24]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400b530:	6802      	ldr	r2, [r0, #0]
2400b532:	6893      	ldr	r3, [r2, #8]
2400b534:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
2400b538:	6093      	str	r3, [r2, #8]

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400b53a:	6802      	ldr	r2, [r0, #0]
2400b53c:	6993      	ldr	r3, [r2, #24]
2400b53e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400b542:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400b544:	6802      	ldr	r2, [r0, #0]
2400b546:	6993      	ldr	r3, [r2, #24]
2400b548:	f043 0320 	orr.w	r3, r3, #32
2400b54c:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
2400b54e:	6802      	ldr	r2, [r0, #0]
2400b550:	6993      	ldr	r3, [r2, #24]
2400b552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400b556:	6193      	str	r3, [r2, #24]

#if (USE_SPI_CRC != 0U)
  __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
#endif /* USE_SPI_CRC */

  hspi->TxXferCount = (uint16_t)0UL;
2400b558:	2200      	movs	r2, #0
  __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400b55a:	6801      	ldr	r1, [r0, #0]
2400b55c:	698b      	ldr	r3, [r1, #24]
2400b55e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400b562:	618b      	str	r3, [r1, #24]
  __HAL_SPI_CLEAR_SUSPFLAG(hspi);
2400b564:	6801      	ldr	r1, [r0, #0]
2400b566:	698b      	ldr	r3, [r1, #24]
2400b568:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400b56c:	618b      	str	r3, [r1, #24]
  hspi->TxXferCount = (uint16_t)0UL;
2400b56e:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
2400b572:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
}
2400b576:	4770      	bx	lr
2400b578:	fffffc90 	.word	0xfffffc90

2400b57c <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
2400b57c:	6802      	ldr	r2, [r0, #0]
{
2400b57e:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
2400b580:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
2400b582:	6991      	ldr	r1, [r2, #24]
2400b584:	f041 0108 	orr.w	r1, r1, #8
2400b588:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2400b58a:	6801      	ldr	r1, [r0, #0]
2400b58c:	698a      	ldr	r2, [r1, #24]
2400b58e:	f042 0210 	orr.w	r2, r2, #16
2400b592:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
2400b594:	6801      	ldr	r1, [r0, #0]
2400b596:	680a      	ldr	r2, [r1, #0]
2400b598:	f022 0201 	bic.w	r2, r2, #1
2400b59c:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
2400b59e:	6801      	ldr	r1, [r0, #0]
2400b5a0:	4a27      	ldr	r2, [pc, #156]	; (2400b640 <SPI_CloseTransfer+0xc4>)
2400b5a2:	690c      	ldr	r4, [r1, #16]
2400b5a4:	4022      	ands	r2, r4
2400b5a6:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400b5a8:	6801      	ldr	r1, [r0, #0]
2400b5aa:	688a      	ldr	r2, [r1, #8]
2400b5ac:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
2400b5b0:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
2400b5b2:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
2400b5b6:	2a04      	cmp	r2, #4
2400b5b8:	d001      	beq.n	2400b5be <SPI_CloseTransfer+0x42>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
2400b5ba:	069c      	lsls	r4, r3, #26
2400b5bc:	d433      	bmi.n	2400b626 <SPI_CloseTransfer+0xaa>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
2400b5be:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
2400b5c2:	2a03      	cmp	r2, #3
2400b5c4:	d001      	beq.n	2400b5ca <SPI_CloseTransfer+0x4e>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
2400b5c6:	0659      	lsls	r1, r3, #25
2400b5c8:	d421      	bmi.n	2400b60e <SPI_CloseTransfer+0x92>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
2400b5ca:	059a      	lsls	r2, r3, #22
2400b5cc:	d50a      	bpl.n	2400b5e4 <SPI_CloseTransfer+0x68>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400b5ce:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400b5d2:	6801      	ldr	r1, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400b5d4:	f042 0201 	orr.w	r2, r2, #1
2400b5d8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400b5dc:	698a      	ldr	r2, [r1, #24]
2400b5de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
2400b5e2:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
2400b5e4:	05db      	lsls	r3, r3, #23
2400b5e6:	d50a      	bpl.n	2400b5fe <SPI_CloseTransfer+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400b5e8:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400b5ec:	6802      	ldr	r2, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400b5ee:	f043 0308 	orr.w	r3, r3, #8
2400b5f2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400b5f6:	6993      	ldr	r3, [r2, #24]
2400b5f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400b5fc:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
2400b5fe:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
2400b600:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
2400b604:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
2400b608:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
2400b60c:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400b60e:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400b612:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400b614:	f042 0204 	orr.w	r2, r2, #4
2400b618:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400b61c:	698a      	ldr	r2, [r1, #24]
2400b61e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2400b622:	618a      	str	r2, [r1, #24]
2400b624:	e7d1      	b.n	2400b5ca <SPI_CloseTransfer+0x4e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400b626:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400b62a:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400b62c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
2400b630:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400b634:	698a      	ldr	r2, [r1, #24]
2400b636:	f042 0220 	orr.w	r2, r2, #32
2400b63a:	618a      	str	r2, [r1, #24]
2400b63c:	e7bf      	b.n	2400b5be <SPI_CloseTransfer+0x42>
2400b63e:	bf00      	nop
2400b640:	fffffc90 	.word	0xfffffc90

2400b644 <HAL_SPI_Init>:
  if (hspi == NULL)
2400b644:	2800      	cmp	r0, #0
2400b646:	f000 80be 	beq.w	2400b7c6 <HAL_SPI_Init+0x182>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
2400b64a:	4a62      	ldr	r2, [pc, #392]	; (2400b7d4 <HAL_SPI_Init+0x190>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
2400b64c:	2100      	movs	r1, #0
{
2400b64e:	b538      	push	{r3, r4, r5, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
2400b650:	6803      	ldr	r3, [r0, #0]
2400b652:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
2400b654:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
2400b656:	4293      	cmp	r3, r2
2400b658:	d015      	beq.n	2400b686 <HAL_SPI_Init+0x42>
2400b65a:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
2400b65e:	4293      	cmp	r3, r2
2400b660:	d011      	beq.n	2400b686 <HAL_SPI_Init+0x42>
2400b662:	f502 6280 	add.w	r2, r2, #1024	; 0x400
2400b666:	4293      	cmp	r3, r2
2400b668:	68c2      	ldr	r2, [r0, #12]
2400b66a:	f000 80a5 	beq.w	2400b7b8 <HAL_SPI_Init+0x174>
2400b66e:	2a0f      	cmp	r2, #15
2400b670:	d807      	bhi.n	2400b682 <HAL_SPI_Init+0x3e>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400b672:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
2400b674:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400b676:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
2400b678:	08d2      	lsrs	r2, r2, #3

  return data_size * fifo_threashold;
2400b67a:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
2400b67e:	2a08      	cmp	r2, #8
2400b680:	d914      	bls.n	2400b6ac <HAL_SPI_Init+0x68>
    return HAL_ERROR;
2400b682:	2001      	movs	r0, #1
}
2400b684:	bd38      	pop	{r3, r4, r5, pc}
  data_size = (data_size + 7UL) / 8UL;
2400b686:	68e2      	ldr	r2, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400b688:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
2400b68a:	3208      	adds	r2, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
2400b68c:	4851      	ldr	r0, [pc, #324]	; (2400b7d4 <HAL_SPI_Init+0x190>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400b68e:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
2400b690:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
2400b692:	fb01 2202 	mla	r2, r1, r2, r2
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
2400b696:	4950      	ldr	r1, [pc, #320]	; (2400b7d8 <HAL_SPI_Init+0x194>)
2400b698:	428b      	cmp	r3, r1
2400b69a:	bf18      	it	ne
2400b69c:	4283      	cmpne	r3, r0
2400b69e:	d003      	beq.n	2400b6a8 <HAL_SPI_Init+0x64>
2400b6a0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
2400b6a4:	428b      	cmp	r3, r1
2400b6a6:	d101      	bne.n	2400b6ac <HAL_SPI_Init+0x68>
2400b6a8:	2a10      	cmp	r2, #16
2400b6aa:	d8ea      	bhi.n	2400b682 <HAL_SPI_Init+0x3e>
  if (hspi->State == HAL_SPI_STATE_RESET)
2400b6ac:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
2400b6b0:	f002 01ff 	and.w	r1, r2, #255	; 0xff
2400b6b4:	2a00      	cmp	r2, #0
2400b6b6:	d078      	beq.n	2400b7aa <HAL_SPI_Init+0x166>
  hspi->State = HAL_SPI_STATE_BUSY;
2400b6b8:	2202      	movs	r2, #2
2400b6ba:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
2400b6be:	681a      	ldr	r2, [r3, #0]
2400b6c0:	f022 0201 	bic.w	r2, r2, #1
2400b6c4:	601a      	str	r2, [r3, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400b6c6:	69a1      	ldr	r1, [r4, #24]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
2400b6c8:	6823      	ldr	r3, [r4, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400b6ca:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
2400b6ce:	6861      	ldr	r1, [r4, #4]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
2400b6d0:	689a      	ldr	r2, [r3, #8]
2400b6d2:	f402 12f8 	and.w	r2, r2, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400b6d6:	d058      	beq.n	2400b78a <HAL_SPI_Init+0x146>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
2400b6d8:	0249      	lsls	r1, r1, #9
2400b6da:	d502      	bpl.n	2400b6e2 <HAL_SPI_Init+0x9e>
2400b6dc:	68e1      	ldr	r1, [r4, #12]
2400b6de:	2906      	cmp	r1, #6
2400b6e0:	d84c      	bhi.n	2400b77c <HAL_SPI_Init+0x138>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
2400b6e2:	6819      	ldr	r1, [r3, #0]
2400b6e4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
2400b6e8:	6019      	str	r1, [r3, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
2400b6ea:	6aa5      	ldr	r5, [r4, #40]	; 0x28
2400b6ec:	69e3      	ldr	r3, [r4, #28]
2400b6ee:	6be0      	ldr	r0, [r4, #60]	; 0x3c
2400b6f0:	432b      	orrs	r3, r5
2400b6f2:	6821      	ldr	r1, [r4, #0]
2400b6f4:	4303      	orrs	r3, r0
2400b6f6:	68e0      	ldr	r0, [r4, #12]
2400b6f8:	4303      	orrs	r3, r0
2400b6fa:	4313      	orrs	r3, r2
2400b6fc:	608b      	str	r3, [r1, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
2400b6fe:	6a65      	ldr	r5, [r4, #36]	; 0x24
2400b700:	69a0      	ldr	r0, [r4, #24]
2400b702:	6822      	ldr	r2, [r4, #0]
2400b704:	e9d4 310d 	ldrd	r3, r1, [r4, #52]	; 0x34
2400b708:	432b      	orrs	r3, r5
2400b70a:	430b      	orrs	r3, r1
2400b70c:	6921      	ldr	r1, [r4, #16]
2400b70e:	4303      	orrs	r3, r0
2400b710:	6960      	ldr	r0, [r4, #20]
2400b712:	430b      	orrs	r3, r1
2400b714:	6a21      	ldr	r1, [r4, #32]
2400b716:	4303      	orrs	r3, r0
2400b718:	6860      	ldr	r0, [r4, #4]
2400b71a:	430b      	orrs	r3, r1
2400b71c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
2400b71e:	4303      	orrs	r3, r0
2400b720:	68a0      	ldr	r0, [r4, #8]
2400b722:	430b      	orrs	r3, r1
2400b724:	6ca1      	ldr	r1, [r4, #72]	; 0x48
2400b726:	4303      	orrs	r3, r0
2400b728:	430b      	orrs	r3, r1
2400b72a:	6da1      	ldr	r1, [r4, #88]	; 0x58
2400b72c:	430b      	orrs	r3, r1
2400b72e:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
2400b730:	6863      	ldr	r3, [r4, #4]
2400b732:	b96b      	cbnz	r3, 2400b750 <HAL_SPI_Init+0x10c>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
2400b734:	6822      	ldr	r2, [r4, #0]
2400b736:	6893      	ldr	r3, [r2, #8]
2400b738:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
2400b73c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400b740:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
2400b742:	6822      	ldr	r2, [r4, #0]
2400b744:	6893      	ldr	r3, [r2, #8]
2400b746:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
2400b74a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2400b74e:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
2400b750:	6822      	ldr	r2, [r4, #0]
2400b752:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400b754:	f023 0301 	bic.w	r3, r3, #1
2400b758:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
2400b75a:	6863      	ldr	r3, [r4, #4]
2400b75c:	025b      	lsls	r3, r3, #9
2400b75e:	d506      	bpl.n	2400b76e <HAL_SPI_Init+0x12a>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
2400b760:	6822      	ldr	r2, [r4, #0]
2400b762:	6d61      	ldr	r1, [r4, #84]	; 0x54
2400b764:	68d3      	ldr	r3, [r2, #12]
2400b766:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
2400b76a:	430b      	orrs	r3, r1
2400b76c:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2400b76e:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
2400b770:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2400b772:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
2400b776:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
2400b77a:	bd38      	pop	{r3, r4, r5, pc}
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
2400b77c:	6819      	ldr	r1, [r3, #0]
2400b77e:	6d20      	ldr	r0, [r4, #80]	; 0x50
2400b780:	f421 7180 	bic.w	r1, r1, #256	; 0x100
2400b784:	4301      	orrs	r1, r0
2400b786:	6019      	str	r1, [r3, #0]
2400b788:	e7af      	b.n	2400b6ea <HAL_SPI_Init+0xa6>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400b78a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
2400b78e:	d01c      	beq.n	2400b7ca <HAL_SPI_Init+0x186>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
2400b790:	2900      	cmp	r1, #0
2400b792:	d1a1      	bne.n	2400b6d8 <HAL_SPI_Init+0x94>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
2400b794:	6ba1      	ldr	r1, [r4, #56]	; 0x38
2400b796:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
2400b79a:	d1a2      	bne.n	2400b6e2 <HAL_SPI_Init+0x9e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
2400b79c:	6819      	ldr	r1, [r3, #0]
2400b79e:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
2400b7a2:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
2400b7a4:	e9d4 3100 	ldrd	r3, r1, [r4]
2400b7a8:	e796      	b.n	2400b6d8 <HAL_SPI_Init+0x94>
    HAL_SPI_MspInit(hspi);
2400b7aa:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
2400b7ac:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
2400b7b0:	f7f8 ffea 	bl	24004788 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
2400b7b4:	6823      	ldr	r3, [r4, #0]
2400b7b6:	e77f      	b.n	2400b6b8 <HAL_SPI_Init+0x74>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400b7b8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
2400b7ba:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400b7bc:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
2400b7be:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
2400b7c0:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
2400b7c4:	e770      	b.n	2400b6a8 <HAL_SPI_Init+0x64>
    return HAL_ERROR;
2400b7c6:	2001      	movs	r0, #1
}
2400b7c8:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400b7ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
2400b7cc:	2900      	cmp	r1, #0
2400b7ce:	d0e5      	beq.n	2400b79c <HAL_SPI_Init+0x158>
2400b7d0:	e784      	b.n	2400b6dc <HAL_SPI_Init+0x98>
2400b7d2:	bf00      	nop
2400b7d4:	40013000 	.word	0x40013000
2400b7d8:	40003800 	.word	0x40003800

2400b7dc <HAL_SPI_TransmitReceive_DMA>:
{
2400b7dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2400b7e0:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
2400b7e2:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
2400b7e6:	2b01      	cmp	r3, #1
2400b7e8:	f000 809a 	beq.w	2400b920 <HAL_SPI_TransmitReceive_DMA+0x144>
2400b7ec:	2301      	movs	r3, #1
2400b7ee:	4604      	mov	r4, r0
2400b7f0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
2400b7f4:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
2400b7f8:	2b01      	cmp	r3, #1
2400b7fa:	b2de      	uxtb	r6, r3
2400b7fc:	d158      	bne.n	2400b8b0 <HAL_SPI_TransmitReceive_DMA+0xd4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
2400b7fe:	2d00      	cmp	r5, #0
2400b800:	bf18      	it	ne
2400b802:	2a00      	cmpne	r2, #0
2400b804:	d04e      	beq.n	2400b8a4 <HAL_SPI_TransmitReceive_DMA+0xc8>
2400b806:	fab1 f381 	clz	r3, r1
2400b80a:	095b      	lsrs	r3, r3, #5
2400b80c:	2900      	cmp	r1, #0
2400b80e:	d049      	beq.n	2400b8a4 <HAL_SPI_TransmitReceive_DMA+0xc8>
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
2400b810:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
2400b812:	2105      	movs	r1, #5
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
2400b814:	6642      	str	r2, [r0, #100]	; 0x64
  SPI_2LINES(hspi);
2400b816:	6802      	ldr	r2, [r0, #0]
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
2400b818:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
  hspi->TxXferSize  = Size;
2400b81c:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
2400b820:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->RxXferSize  = Size;
2400b824:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->TxXferCount = Size;
2400b828:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
  hspi->RxXferCount = Size;
2400b82c:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxISR       = NULL;
2400b830:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  SPI_2LINES(hspi);
2400b834:	68d3      	ldr	r3, [r2, #12]
2400b836:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
2400b83a:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400b83c:	6802      	ldr	r2, [r0, #0]
2400b83e:	6893      	ldr	r3, [r2, #8]
2400b840:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
2400b844:	6093      	str	r3, [r2, #8]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
2400b846:	68c3      	ldr	r3, [r0, #12]
2400b848:	2b0f      	cmp	r3, #15
2400b84a:	d938      	bls.n	2400b8be <HAL_SPI_TransmitReceive_DMA+0xe2>
2400b84c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
2400b84e:	699a      	ldr	r2, [r3, #24]
2400b850:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400b854:	d126      	bne.n	2400b8a4 <HAL_SPI_TransmitReceive_DMA+0xc8>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
2400b856:	4a6c      	ldr	r2, [pc, #432]	; (2400ba08 <HAL_SPI_TransmitReceive_DMA+0x22c>)
  hspi->hdmarx->XferAbortCallback = NULL;
2400b858:	f04f 0800 	mov.w	r8, #0
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
2400b85c:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 2400ba14 <HAL_SPI_TransmitReceive_DMA+0x238>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
2400b860:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
2400b862:	4a6a      	ldr	r2, [pc, #424]	; (2400ba0c <HAL_SPI_TransmitReceive_DMA+0x230>)
2400b864:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400b866:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
2400b868:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400b86a:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
2400b86e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400b870:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
2400b874:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
2400b878:	6821      	ldr	r1, [r4, #0]
2400b87a:	b29b      	uxth	r3, r3
2400b87c:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400b87e:	3130      	adds	r1, #48	; 0x30
2400b880:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400b882:	f7f9 fea9 	bl	240055d8 <HAL_DMA_Start_IT>
2400b886:	4607      	mov	r7, r0
2400b888:	2800      	cmp	r0, #0
2400b88a:	d04d      	beq.n	2400b928 <HAL_SPI_TransmitReceive_DMA+0x14c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400b88c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400b890:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
2400b892:	f884 8080 	strb.w	r8, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400b896:	f043 0310 	orr.w	r3, r3, #16
2400b89a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400b89e:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
2400b8a2:	e002      	b.n	2400b8aa <HAL_SPI_TransmitReceive_DMA+0xce>
    __HAL_UNLOCK(hspi);
2400b8a4:	2300      	movs	r3, #0
2400b8a6:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
2400b8aa:	4630      	mov	r0, r6
2400b8ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_UNLOCK(hspi);
2400b8b0:	2300      	movs	r3, #0
    return errorcode;
2400b8b2:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
2400b8b4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
2400b8b8:	4630      	mov	r0, r6
2400b8ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
2400b8be:	2b07      	cmp	r3, #7
2400b8c0:	d87f      	bhi.n	2400b9c2 <HAL_SPI_TransmitReceive_DMA+0x1e6>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
2400b8c2:	6f82      	ldr	r2, [r0, #120]	; 0x78
2400b8c4:	6993      	ldr	r3, [r2, #24]
2400b8c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2400b8ca:	d107      	bne.n	2400b8dc <HAL_SPI_TransmitReceive_DMA+0x100>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
2400b8cc:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
2400b8d0:	b29b      	uxth	r3, r3
2400b8d2:	3301      	adds	r3, #1
2400b8d4:	085b      	lsrs	r3, r3, #1
2400b8d6:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400b8da:	6993      	ldr	r3, [r2, #24]
2400b8dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400b8e0:	d106      	bne.n	2400b8f0 <HAL_SPI_TransmitReceive_DMA+0x114>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
2400b8e2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
2400b8e6:	b29b      	uxth	r3, r3
2400b8e8:	3303      	adds	r3, #3
2400b8ea:	089b      	lsrs	r3, r3, #2
2400b8ec:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
2400b8f0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400b8f2:	699a      	ldr	r2, [r3, #24]
2400b8f4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
2400b8f8:	d107      	bne.n	2400b90a <HAL_SPI_TransmitReceive_DMA+0x12e>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
2400b8fa:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400b8fe:	b292      	uxth	r2, r2
2400b900:	3201      	adds	r2, #1
2400b902:	0852      	lsrs	r2, r2, #1
2400b904:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400b908:	699a      	ldr	r2, [r3, #24]
2400b90a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400b90e:	d1a2      	bne.n	2400b856 <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
2400b910:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400b914:	b292      	uxth	r2, r2
2400b916:	3203      	adds	r2, #3
2400b918:	0892      	lsrs	r2, r2, #2
2400b91a:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
2400b91e:	e79a      	b.n	2400b856 <HAL_SPI_TransmitReceive_DMA+0x7a>
  __HAL_LOCK(hspi);
2400b920:	2602      	movs	r6, #2
}
2400b922:	4630      	mov	r0, r6
2400b924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
2400b928:	6822      	ldr	r2, [r4, #0]
2400b92a:	6893      	ldr	r3, [r2, #8]
2400b92c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2400b930:	6093      	str	r3, [r2, #8]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
2400b932:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400b934:	6418      	str	r0, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
2400b936:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400b938:	63d8      	str	r0, [r3, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
2400b93a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400b93c:	6518      	str	r0, [r3, #80]	; 0x50
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
2400b93e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400b940:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
                                 hspi->TxXferCount))
2400b944:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
2400b948:	6822      	ldr	r2, [r4, #0]
2400b94a:	b29b      	uxth	r3, r3
2400b94c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
2400b94e:	3220      	adds	r2, #32
2400b950:	6fa0      	ldr	r0, [r4, #120]	; 0x78
2400b952:	f7f9 fe41 	bl	240055d8 <HAL_DMA_Start_IT>
2400b956:	bb40      	cbnz	r0, 2400b9aa <HAL_SPI_TransmitReceive_DMA+0x1ce>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400b958:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400b95a:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400b95c:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400b95e:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400b960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400b964:	4b2a      	ldr	r3, [pc, #168]	; (2400ba10 <HAL_SPI_TransmitReceive_DMA+0x234>)
2400b966:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
2400b96a:	bf18      	it	ne
2400b96c:	432b      	orrne	r3, r5
2400b96e:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
2400b970:	6822      	ldr	r2, [r4, #0]
2400b972:	6893      	ldr	r3, [r2, #8]
2400b974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
2400b978:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
2400b97a:	6822      	ldr	r2, [r4, #0]
2400b97c:	6913      	ldr	r3, [r2, #16]
2400b97e:	f443 7358 	orr.w	r3, r3, #864	; 0x360
2400b982:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
2400b984:	6822      	ldr	r2, [r4, #0]
2400b986:	6813      	ldr	r3, [r2, #0]
2400b988:	f043 0301 	orr.w	r3, r3, #1
2400b98c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
2400b98e:	6863      	ldr	r3, [r4, #4]
2400b990:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2400b994:	d104      	bne.n	2400b9a0 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
2400b996:	6822      	ldr	r2, [r4, #0]
2400b998:	6813      	ldr	r3, [r2, #0]
2400b99a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400b99e:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
2400b9a0:	2300      	movs	r3, #0
  return errorcode;
2400b9a2:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
2400b9a4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
2400b9a8:	e77f      	b.n	2400b8aa <HAL_SPI_TransmitReceive_DMA+0xce>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400b9aa:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400b9ae:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
2400b9b0:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400b9b4:	f043 0310 	orr.w	r3, r3, #16
2400b9b8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400b9bc:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
2400b9c0:	e773      	b.n	2400b8aa <HAL_SPI_TransmitReceive_DMA+0xce>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
2400b9c2:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
2400b9c4:	699a      	ldr	r2, [r3, #24]
2400b9c6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
2400b9ca:	d003      	beq.n	2400b9d4 <HAL_SPI_TransmitReceive_DMA+0x1f8>
2400b9cc:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400b9d0:	f47f af68 	bne.w	2400b8a4 <HAL_SPI_TransmitReceive_DMA+0xc8>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400b9d4:	6fa1      	ldr	r1, [r4, #120]	; 0x78
2400b9d6:	6989      	ldr	r1, [r1, #24]
2400b9d8:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
2400b9dc:	d107      	bne.n	2400b9ee <HAL_SPI_TransmitReceive_DMA+0x212>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
2400b9de:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
2400b9e2:	b292      	uxth	r2, r2
2400b9e4:	3201      	adds	r2, #1
2400b9e6:	0852      	lsrs	r2, r2, #1
2400b9e8:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400b9ec:	699a      	ldr	r2, [r3, #24]
2400b9ee:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400b9f2:	f47f af30 	bne.w	2400b856 <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
2400b9f6:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400b9fa:	b292      	uxth	r2, r2
2400b9fc:	3201      	adds	r2, #1
2400b9fe:	0852      	lsrs	r2, r2, #1
2400ba00:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
2400ba04:	e727      	b.n	2400b856 <HAL_SPI_TransmitReceive_DMA+0x7a>
2400ba06:	bf00      	nop
2400ba08:	2400bb89 	.word	0x2400bb89
2400ba0c:	2400bb61 	.word	0x2400bb61
2400ba10:	ffff0000 	.word	0xffff0000
2400ba14:	2400bb99 	.word	0x2400bb99

2400ba18 <HAL_SPI_Abort>:
  __HAL_LOCK(hspi);
2400ba18:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
2400ba1c:	2b01      	cmp	r3, #1
2400ba1e:	f000 8095 	beq.w	2400bb4c <HAL_SPI_Abort+0x134>
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
2400ba22:	4b4b      	ldr	r3, [pc, #300]	; (2400bb50 <HAL_SPI_Abort+0x138>)
2400ba24:	2164      	movs	r1, #100	; 0x64
2400ba26:	4a4b      	ldr	r2, [pc, #300]	; (2400bb54 <HAL_SPI_Abort+0x13c>)
{
2400ba28:	b510      	push	{r4, lr}
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
2400ba2a:	681b      	ldr	r3, [r3, #0]
2400ba2c:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
2400ba2e:	2001      	movs	r0, #1
{
2400ba30:	b082      	sub	sp, #8
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
2400ba32:	fba2 2303 	umull	r2, r3, r2, r3
  if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
2400ba36:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(hspi);
2400ba38:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_ABORT;
2400ba3c:	2007      	movs	r0, #7
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
2400ba3e:	0a5b      	lsrs	r3, r3, #9
  hspi->State = HAL_SPI_STATE_ABORT;
2400ba40:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
2400ba44:	fb01 f303 	mul.w	r3, r1, r3
2400ba48:	9301      	str	r3, [sp, #4]
  if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
2400ba4a:	6813      	ldr	r3, [r2, #0]
2400ba4c:	0598      	lsls	r0, r3, #22
2400ba4e:	d53e      	bpl.n	2400bace <HAL_SPI_Abort+0xb6>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
2400ba50:	6913      	ldr	r3, [r2, #16]
2400ba52:	f023 0308 	bic.w	r3, r3, #8
2400ba56:	6113      	str	r3, [r2, #16]
    while (HAL_IS_BIT_SET(hspi->Instance->IER, SPI_IT_EOT));
2400ba58:	6822      	ldr	r2, [r4, #0]
2400ba5a:	e002      	b.n	2400ba62 <HAL_SPI_Abort+0x4a>
2400ba5c:	6913      	ldr	r3, [r2, #16]
2400ba5e:	0719      	lsls	r1, r3, #28
2400ba60:	d50b      	bpl.n	2400ba7a <HAL_SPI_Abort+0x62>
      count--;
2400ba62:	9b01      	ldr	r3, [sp, #4]
2400ba64:	3b01      	subs	r3, #1
2400ba66:	9301      	str	r3, [sp, #4]
      if (count == 0UL)
2400ba68:	9b01      	ldr	r3, [sp, #4]
2400ba6a:	2b00      	cmp	r3, #0
2400ba6c:	d1f6      	bne.n	2400ba5c <HAL_SPI_Abort+0x44>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2400ba6e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400ba72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400ba76:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSUSP);
2400ba7a:	6813      	ldr	r3, [r2, #0]
2400ba7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2400ba80:	6013      	str	r3, [r2, #0]
    while (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART));
2400ba82:	6822      	ldr	r2, [r4, #0]
2400ba84:	e002      	b.n	2400ba8c <HAL_SPI_Abort+0x74>
2400ba86:	6813      	ldr	r3, [r2, #0]
2400ba88:	059b      	lsls	r3, r3, #22
2400ba8a:	d50b      	bpl.n	2400baa4 <HAL_SPI_Abort+0x8c>
      count--;
2400ba8c:	9b01      	ldr	r3, [sp, #4]
2400ba8e:	3b01      	subs	r3, #1
2400ba90:	9301      	str	r3, [sp, #4]
      if (count == 0UL)
2400ba92:	9b01      	ldr	r3, [sp, #4]
2400ba94:	2b00      	cmp	r3, #0
2400ba96:	d1f6      	bne.n	2400ba86 <HAL_SPI_Abort+0x6e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2400ba98:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400ba9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400baa0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
2400baa4:	6993      	ldr	r3, [r2, #24]
2400baa6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400baaa:	6193      	str	r3, [r2, #24]
    while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_SUSP));
2400baac:	6822      	ldr	r2, [r4, #0]
2400baae:	e002      	b.n	2400bab6 <HAL_SPI_Abort+0x9e>
2400bab0:	6953      	ldr	r3, [r2, #20]
2400bab2:	0518      	lsls	r0, r3, #20
2400bab4:	d50b      	bpl.n	2400bace <HAL_SPI_Abort+0xb6>
      count--;
2400bab6:	9b01      	ldr	r3, [sp, #4]
2400bab8:	3b01      	subs	r3, #1
2400baba:	9301      	str	r3, [sp, #4]
      if (count == 0UL)
2400babc:	9b01      	ldr	r3, [sp, #4]
2400babe:	2b00      	cmp	r3, #0
2400bac0:	d1f6      	bne.n	2400bab0 <HAL_SPI_Abort+0x98>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2400bac2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400bac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400baca:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN))
2400bace:	6893      	ldr	r3, [r2, #8]
2400bad0:	0419      	lsls	r1, r3, #16
2400bad2:	d508      	bpl.n	2400bae6 <HAL_SPI_Abort+0xce>
    if (hspi->hdmatx != NULL)
2400bad4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400bad6:	b133      	cbz	r3, 2400bae6 <HAL_SPI_Abort+0xce>
      hspi->hdmatx->XferAbortCallback = NULL;
2400bad8:	2200      	movs	r2, #0
2400bada:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
2400badc:	6fa0      	ldr	r0, [r4, #120]	; 0x78
2400bade:	f7fa f847 	bl	24005b70 <HAL_DMA_Abort>
2400bae2:	bb00      	cbnz	r0, 2400bb26 <HAL_SPI_Abort+0x10e>
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN))
2400bae4:	6822      	ldr	r2, [r4, #0]
2400bae6:	6893      	ldr	r3, [r2, #8]
2400bae8:	045b      	lsls	r3, r3, #17
2400baea:	d507      	bpl.n	2400bafc <HAL_SPI_Abort+0xe4>
    if (hspi->hdmarx != NULL)
2400baec:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400baee:	b12b      	cbz	r3, 2400bafc <HAL_SPI_Abort+0xe4>
      hspi->hdmarx->XferAbortCallback = NULL;
2400baf0:	2200      	movs	r2, #0
2400baf2:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
2400baf4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400baf6:	f7fa f83b 	bl	24005b70 <HAL_DMA_Abort>
2400bafa:	b9f0      	cbnz	r0, 2400bb3a <HAL_SPI_Abort+0x122>
  SPI_AbortTransfer(hspi);
2400bafc:	4620      	mov	r0, r4
2400bafe:	f7ff fd03 	bl	2400b508 <SPI_AbortTransfer>
  if (HAL_IS_BIT_SET(hspi->ErrorCode, HAL_SPI_ERROR_ABORT))
2400bb02:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400bb06:	f013 0340 	ands.w	r3, r3, #64	; 0x40
2400bb0a:	d10a      	bne.n	2400bb22 <HAL_SPI_Abort+0x10a>
  errorcode = HAL_OK;
2400bb0c:	4618      	mov	r0, r3
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2400bb0e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(hspi);
2400bb12:	2200      	movs	r2, #0
  hspi->State = HAL_SPI_STATE_READY;
2400bb14:	2301      	movs	r3, #1
  __HAL_UNLOCK(hspi);
2400bb16:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
2400bb1a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
2400bb1e:	b002      	add	sp, #8
2400bb20:	bd10      	pop	{r4, pc}
    errorcode = HAL_ERROR;
2400bb22:	2001      	movs	r0, #1
2400bb24:	e7f5      	b.n	2400bb12 <HAL_SPI_Abort+0xfa>
        if (HAL_DMA_GetError(hspi->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
2400bb26:	6fa0      	ldr	r0, [r4, #120]	; 0x78
2400bb28:	f7fa ffa6 	bl	24006a78 <HAL_DMA_GetError>
2400bb2c:	2820      	cmp	r0, #32
2400bb2e:	d1d9      	bne.n	2400bae4 <HAL_SPI_Abort+0xcc>
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
2400bb30:	2340      	movs	r3, #64	; 0x40
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN))
2400bb32:	6822      	ldr	r2, [r4, #0]
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
2400bb34:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
2400bb38:	e7d5      	b.n	2400bae6 <HAL_SPI_Abort+0xce>
        if (HAL_DMA_GetError(hspi->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
2400bb3a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400bb3c:	f7fa ff9c 	bl	24006a78 <HAL_DMA_GetError>
2400bb40:	2820      	cmp	r0, #32
2400bb42:	d1db      	bne.n	2400bafc <HAL_SPI_Abort+0xe4>
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
2400bb44:	2340      	movs	r3, #64	; 0x40
2400bb46:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
2400bb4a:	e7d7      	b.n	2400bafc <HAL_SPI_Abort+0xe4>
  __HAL_LOCK(hspi);
2400bb4c:	2002      	movs	r0, #2
}
2400bb4e:	4770      	bx	lr
2400bb50:	2000074c 	.word	0x2000074c
2400bb54:	057619f1 	.word	0x057619f1

2400bb58 <HAL_SPI_TxCpltCallback>:
2400bb58:	4770      	bx	lr
2400bb5a:	bf00      	nop

2400bb5c <HAL_SPI_RxCpltCallback>:
2400bb5c:	4770      	bx	lr
2400bb5e:	bf00      	nop

2400bb60 <SPI_DMATransmitReceiveCplt>:
{
2400bb60:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400bb62:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
2400bb64:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
2400bb68:	2b07      	cmp	r3, #7
2400bb6a:	d009      	beq.n	2400bb80 <SPI_DMATransmitReceiveCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400bb6c:	6f83      	ldr	r3, [r0, #120]	; 0x78
2400bb6e:	69db      	ldr	r3, [r3, #28]
2400bb70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400bb74:	d005      	beq.n	2400bb82 <SPI_DMATransmitReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
2400bb76:	6802      	ldr	r2, [r0, #0]
2400bb78:	6913      	ldr	r3, [r2, #16]
2400bb7a:	f043 0308 	orr.w	r3, r3, #8
2400bb7e:	6113      	str	r3, [r2, #16]
}
2400bb80:	bd08      	pop	{r3, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
2400bb82:	f027 fead 	bl	240338e0 <__HAL_SPI_TxRxCpltCallback_veneer>
}
2400bb86:	bd08      	pop	{r3, pc}

2400bb88 <SPI_DMAHalfTransmitReceiveCplt>:
{
2400bb88:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
2400bb8a:	6b80      	ldr	r0, [r0, #56]	; 0x38
2400bb8c:	f027 fe80 	bl	24033890 <__HAL_SPI_TxRxHalfCpltCallback_veneer>
}
2400bb90:	bd08      	pop	{r3, pc}
2400bb92:	bf00      	nop

2400bb94 <HAL_SPI_ErrorCallback>:
2400bb94:	4770      	bx	lr
2400bb96:	bf00      	nop

2400bb98 <SPI_DMAError>:
{
2400bb98:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400bb9a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
2400bb9c:	f7fa ff6c 	bl	24006a78 <HAL_DMA_GetError>
2400bba0:	2802      	cmp	r0, #2
2400bba2:	d100      	bne.n	2400bba6 <SPI_DMAError+0xe>
}
2400bba4:	bd10      	pop	{r4, pc}
  uint32_t itflag = hspi->Instance->SR;
2400bba6:	6822      	ldr	r2, [r4, #0]
2400bba8:	6953      	ldr	r3, [r2, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
2400bbaa:	6991      	ldr	r1, [r2, #24]
2400bbac:	f041 0108 	orr.w	r1, r1, #8
2400bbb0:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2400bbb2:	6821      	ldr	r1, [r4, #0]
2400bbb4:	698a      	ldr	r2, [r1, #24]
2400bbb6:	f042 0210 	orr.w	r2, r2, #16
2400bbba:	618a      	str	r2, [r1, #24]
  __HAL_SPI_DISABLE(hspi);
2400bbbc:	6821      	ldr	r1, [r4, #0]
2400bbbe:	680a      	ldr	r2, [r1, #0]
2400bbc0:	f022 0201 	bic.w	r2, r2, #1
2400bbc4:	600a      	str	r2, [r1, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
2400bbc6:	6821      	ldr	r1, [r4, #0]
2400bbc8:	4a2c      	ldr	r2, [pc, #176]	; (2400bc7c <SPI_DMAError+0xe4>)
2400bbca:	6908      	ldr	r0, [r1, #16]
2400bbcc:	4002      	ands	r2, r0
2400bbce:	610a      	str	r2, [r1, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400bbd0:	6821      	ldr	r1, [r4, #0]
2400bbd2:	688a      	ldr	r2, [r1, #8]
2400bbd4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
2400bbd8:	608a      	str	r2, [r1, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
2400bbda:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
2400bbde:	2a04      	cmp	r2, #4
2400bbe0:	d001      	beq.n	2400bbe6 <SPI_DMAError+0x4e>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
2400bbe2:	0698      	lsls	r0, r3, #26
2400bbe4:	d43d      	bmi.n	2400bc62 <SPI_DMAError+0xca>
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
2400bbe6:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
2400bbea:	2a03      	cmp	r2, #3
2400bbec:	d001      	beq.n	2400bbf2 <SPI_DMAError+0x5a>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
2400bbee:	0659      	lsls	r1, r3, #25
2400bbf0:	d42b      	bmi.n	2400bc4a <SPI_DMAError+0xb2>
  if ((itflag & SPI_FLAG_MODF) != 0UL)
2400bbf2:	059a      	lsls	r2, r3, #22
2400bbf4:	d50a      	bpl.n	2400bc0c <SPI_DMAError+0x74>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400bbf6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400bbfa:	6821      	ldr	r1, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400bbfc:	f042 0201 	orr.w	r2, r2, #1
2400bc00:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400bc04:	698a      	ldr	r2, [r1, #24]
2400bc06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
2400bc0a:	618a      	str	r2, [r1, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
2400bc0c:	05db      	lsls	r3, r3, #23
2400bc0e:	d50a      	bpl.n	2400bc26 <SPI_DMAError+0x8e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400bc10:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400bc14:	6822      	ldr	r2, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400bc16:	f043 0308 	orr.w	r3, r3, #8
2400bc1a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400bc1e:	6993      	ldr	r3, [r2, #24]
2400bc20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400bc24:	6193      	str	r3, [r2, #24]
  hspi->TxXferCount = (uint16_t)0UL;
2400bc26:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
2400bc28:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
2400bc2a:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
2400bc2c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
2400bc30:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400bc34:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400bc38:	f043 0310 	orr.w	r3, r3, #16
2400bc3c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400bc40:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
2400bc44:	f7ff ffa6 	bl	2400bb94 <HAL_SPI_ErrorCallback>
}
2400bc48:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400bc4a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400bc4e:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400bc50:	f042 0204 	orr.w	r2, r2, #4
2400bc54:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400bc58:	698a      	ldr	r2, [r1, #24]
2400bc5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2400bc5e:	618a      	str	r2, [r1, #24]
2400bc60:	e7c7      	b.n	2400bbf2 <SPI_DMAError+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400bc62:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400bc66:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400bc68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
2400bc6c:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400bc70:	698a      	ldr	r2, [r1, #24]
2400bc72:	f042 0220 	orr.w	r2, r2, #32
2400bc76:	618a      	str	r2, [r1, #24]
2400bc78:	e7b5      	b.n	2400bbe6 <SPI_DMAError+0x4e>
2400bc7a:	bf00      	nop
2400bc7c:	fffffc90 	.word	0xfffffc90

2400bc80 <SPI_DMAAbortOnError>:
{
2400bc80:	b508      	push	{r3, lr}
  hspi->State = HAL_SPI_STATE_READY;
2400bc82:	2201      	movs	r2, #1
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400bc84:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
2400bc86:	2300      	movs	r3, #0
2400bc88:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
2400bc8c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
2400bc90:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
2400bc94:	f7ff ff7e 	bl	2400bb94 <HAL_SPI_ErrorCallback>
}
2400bc98:	bd08      	pop	{r3, pc}
2400bc9a:	bf00      	nop

2400bc9c <HAL_SPI_SuspendCallback>:
2400bc9c:	4770      	bx	lr
2400bc9e:	bf00      	nop

2400bca0 <HAL_SPI_IRQHandler>:
{
2400bca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itsource = hspi->Instance->IER;
2400bca4:	6805      	ldr	r5, [r0, #0]
{
2400bca6:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
2400bca8:	692a      	ldr	r2, [r5, #16]
  uint32_t itflag   = hspi->Instance->SR;
2400bcaa:	696b      	ldr	r3, [r5, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
2400bcac:	f8d5 8008 	ldr.w	r8, [r5, #8]
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
2400bcb0:	0519      	lsls	r1, r3, #20
  HAL_SPI_StateTypeDef State = hspi->State;
2400bcb2:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  uint32_t trigger  = itsource & itflag;
2400bcb6:	ea02 0703 	and.w	r7, r2, r3
  HAL_SPI_StateTypeDef State = hspi->State;
2400bcba:	b2f6      	uxtb	r6, r6
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
2400bcbc:	d502      	bpl.n	2400bcc4 <HAL_SPI_IRQHandler+0x24>
2400bcbe:	0713      	lsls	r3, r2, #28
2400bcc0:	f100 80fd 	bmi.w	2400bebe <HAL_SPI_IRQHandler+0x21e>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
2400bcc4:	f007 0364 	and.w	r3, r7, #100	; 0x64
2400bcc8:	2b04      	cmp	r3, #4
2400bcca:	d076      	beq.n	2400bdba <HAL_SPI_IRQHandler+0x11a>
  uint32_t handled  = 0UL;
2400bccc:	2200      	movs	r2, #0
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
2400bcce:	f007 0345 	and.w	r3, r7, #69	; 0x45
2400bcd2:	2b01      	cmp	r3, #1
2400bcd4:	d045      	beq.n	2400bd62 <HAL_SPI_IRQHandler+0xc2>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
2400bcd6:	f007 0326 	and.w	r3, r7, #38	; 0x26
2400bcda:	2b02      	cmp	r3, #2
2400bcdc:	d048      	beq.n	2400bd70 <HAL_SPI_IRQHandler+0xd0>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_TSERF))
2400bcde:	0579      	lsls	r1, r7, #21
2400bce0:	f100 80e4 	bmi.w	2400beac <HAL_SPI_IRQHandler+0x20c>
  if (handled != 0UL)
2400bce4:	2a00      	cmp	r2, #0
2400bce6:	d150      	bne.n	2400bd8a <HAL_SPI_IRQHandler+0xea>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
2400bce8:	073b      	lsls	r3, r7, #28
2400bcea:	d56e      	bpl.n	2400bdca <HAL_SPI_IRQHandler+0x12a>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
2400bcec:	6822      	ldr	r2, [r4, #0]
2400bcee:	6993      	ldr	r3, [r2, #24]
2400bcf0:	f043 0308 	orr.w	r3, r3, #8
2400bcf4:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2400bcf6:	6822      	ldr	r2, [r4, #0]
2400bcf8:	6993      	ldr	r3, [r2, #24]
2400bcfa:	f043 0310 	orr.w	r3, r3, #16
2400bcfe:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
2400bd00:	6822      	ldr	r2, [r4, #0]
2400bd02:	6993      	ldr	r3, [r2, #24]
2400bd04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400bd08:	6193      	str	r3, [r2, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
2400bd0a:	6822      	ldr	r2, [r4, #0]
2400bd0c:	6913      	ldr	r3, [r2, #16]
2400bd0e:	f023 0308 	bic.w	r3, r3, #8
2400bd12:	6113      	str	r3, [r2, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400bd14:	6823      	ldr	r3, [r4, #0]
2400bd16:	689b      	ldr	r3, [r3, #8]
2400bd18:	f413 4f40 	tst.w	r3, #49152	; 0xc000
2400bd1c:	d137      	bne.n	2400bd8e <HAL_SPI_IRQHandler+0xee>
      while (hspi->RxXferCount != 0UL)
2400bd1e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
2400bd22:	b29b      	uxth	r3, r3
2400bd24:	2b00      	cmp	r3, #0
2400bd26:	d032      	beq.n	2400bd8e <HAL_SPI_IRQHandler+0xee>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
2400bd28:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400bd2a:	e00f      	b.n	2400bd4c <HAL_SPI_IRQHandler+0xac>
2400bd2c:	6823      	ldr	r3, [r4, #0]
2400bd2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400bd30:	6013      	str	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
2400bd32:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400bd34:	3204      	adds	r2, #4
        hspi->RxXferCount--;
2400bd36:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint32_t);
2400bd3a:	6662      	str	r2, [r4, #100]	; 0x64
        hspi->RxXferCount--;
2400bd3c:	3b01      	subs	r3, #1
2400bd3e:	b29b      	uxth	r3, r3
2400bd40:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
2400bd44:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
2400bd48:	b29b      	uxth	r3, r3
2400bd4a:	b303      	cbz	r3, 2400bd8e <HAL_SPI_IRQHandler+0xee>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
2400bd4c:	68e3      	ldr	r3, [r4, #12]
2400bd4e:	2b0f      	cmp	r3, #15
2400bd50:	d8ec      	bhi.n	2400bd2c <HAL_SPI_IRQHandler+0x8c>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
2400bd52:	2b07      	cmp	r3, #7
2400bd54:	f240 80c3 	bls.w	2400bede <HAL_SPI_IRQHandler+0x23e>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
2400bd58:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
2400bd5a:	8013      	strh	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
2400bd5c:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400bd5e:	3202      	adds	r2, #2
2400bd60:	e7e9      	b.n	2400bd36 <HAL_SPI_IRQHandler+0x96>
    hspi->RxISR(hspi);
2400bd62:	6f23      	ldr	r3, [r4, #112]	; 0x70
2400bd64:	4620      	mov	r0, r4
2400bd66:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
2400bd68:	f007 0326 	and.w	r3, r7, #38	; 0x26
2400bd6c:	2b02      	cmp	r3, #2
2400bd6e:	d102      	bne.n	2400bd76 <HAL_SPI_IRQHandler+0xd6>
    hspi->TxISR(hspi);
2400bd70:	6f63      	ldr	r3, [r4, #116]	; 0x74
2400bd72:	4620      	mov	r0, r4
2400bd74:	4798      	blx	r3
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_TSERF))
2400bd76:	0578      	lsls	r0, r7, #21
2400bd78:	d507      	bpl.n	2400bd8a <HAL_SPI_IRQHandler+0xea>
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400bd7a:	6822      	ldr	r2, [r4, #0]
    hspi->Reload.Requested = 0UL;
2400bd7c:	2300      	movs	r3, #0
2400bd7e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400bd82:	6993      	ldr	r3, [r2, #24]
2400bd84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2400bd88:	6193      	str	r3, [r2, #24]
}
2400bd8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SPI_CloseTransfer(hspi);
2400bd8e:	4620      	mov	r0, r4
2400bd90:	f7ff fbf4 	bl	2400b57c <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
2400bd94:	2301      	movs	r3, #1
2400bd96:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2400bd9a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400bd9e:	2b00      	cmp	r3, #0
2400bda0:	f040 8099 	bne.w	2400bed6 <HAL_SPI_IRQHandler+0x236>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
2400bda4:	2e05      	cmp	r6, #5
2400bda6:	f000 80a1 	beq.w	2400beec <HAL_SPI_IRQHandler+0x24c>
    else if (State == HAL_SPI_STATE_BUSY_RX)
2400bdaa:	2e04      	cmp	r6, #4
2400bdac:	f000 80a1 	beq.w	2400bef2 <HAL_SPI_IRQHandler+0x252>
    else if (State == HAL_SPI_STATE_BUSY_TX)
2400bdb0:	2e03      	cmp	r6, #3
2400bdb2:	d1ea      	bne.n	2400bd8a <HAL_SPI_IRQHandler+0xea>
      HAL_SPI_TxCpltCallback(hspi);
2400bdb4:	f7ff fed0 	bl	2400bb58 <HAL_SPI_TxCpltCallback>
2400bdb8:	e7e7      	b.n	2400bd8a <HAL_SPI_IRQHandler+0xea>
    hspi->TxISR(hspi);
2400bdba:	4620      	mov	r0, r4
2400bdbc:	6f63      	ldr	r3, [r4, #116]	; 0x74
2400bdbe:	4798      	blx	r3
    hspi->RxISR(hspi);
2400bdc0:	6f23      	ldr	r3, [r4, #112]	; 0x70
2400bdc2:	4620      	mov	r0, r4
2400bdc4:	4798      	blx	r3
    handled = 1UL;
2400bdc6:	2201      	movs	r2, #1
2400bdc8:	e781      	b.n	2400bcce <HAL_SPI_IRQHandler+0x2e>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
2400bdca:	f417 7f58 	tst.w	r7, #864	; 0x360
2400bdce:	d0dc      	beq.n	2400bd8a <HAL_SPI_IRQHandler+0xea>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
2400bdd0:	0678      	lsls	r0, r7, #25
2400bdd2:	d50a      	bpl.n	2400bdea <HAL_SPI_IRQHandler+0x14a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400bdd4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400bdd8:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400bdda:	f043 0304 	orr.w	r3, r3, #4
2400bdde:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400bde2:	6993      	ldr	r3, [r2, #24]
2400bde4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400bde8:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
2400bdea:	05b9      	lsls	r1, r7, #22
2400bdec:	d50a      	bpl.n	2400be04 <HAL_SPI_IRQHandler+0x164>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400bdee:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400bdf2:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400bdf4:	f043 0301 	orr.w	r3, r3, #1
2400bdf8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400bdfc:	6993      	ldr	r3, [r2, #24]
2400bdfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400be02:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
2400be04:	05fa      	lsls	r2, r7, #23
2400be06:	d50a      	bpl.n	2400be1e <HAL_SPI_IRQHandler+0x17e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400be08:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
2400be0c:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400be0e:	f043 0308 	orr.w	r3, r3, #8
2400be12:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
2400be16:	6993      	ldr	r3, [r2, #24]
2400be18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400be1c:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
2400be1e:	06bb      	lsls	r3, r7, #26
2400be20:	d50a      	bpl.n	2400be38 <HAL_SPI_IRQHandler+0x198>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400be22:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400be26:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400be28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2400be2c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400be30:	6993      	ldr	r3, [r2, #24]
2400be32:	f043 0320 	orr.w	r3, r3, #32
2400be36:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2400be38:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400be3c:	2b00      	cmp	r3, #0
2400be3e:	d0a4      	beq.n	2400bd8a <HAL_SPI_IRQHandler+0xea>
      __HAL_SPI_DISABLE(hspi);
2400be40:	6822      	ldr	r2, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400be42:	f408 4840 	and.w	r8, r8, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
2400be46:	6813      	ldr	r3, [r2, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400be48:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
2400be4c:	f023 0301 	bic.w	r3, r3, #1
2400be50:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
2400be52:	6822      	ldr	r2, [r4, #0]
2400be54:	4b28      	ldr	r3, [pc, #160]	; (2400bef8 <HAL_SPI_IRQHandler+0x258>)
2400be56:	6911      	ldr	r1, [r2, #16]
2400be58:	ea03 0301 	and.w	r3, r3, r1
2400be5c:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400be5e:	d136      	bne.n	2400bece <HAL_SPI_IRQHandler+0x22e>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400be60:	6822      	ldr	r2, [r4, #0]
2400be62:	6893      	ldr	r3, [r2, #8]
2400be64:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
2400be68:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
2400be6a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400be6c:	b15b      	cbz	r3, 2400be86 <HAL_SPI_IRQHandler+0x1e6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
2400be6e:	4a23      	ldr	r2, [pc, #140]	; (2400befc <HAL_SPI_IRQHandler+0x25c>)
2400be70:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
2400be72:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400be74:	f7fa f892 	bl	24005f9c <HAL_DMA_Abort_IT>
2400be78:	b128      	cbz	r0, 2400be86 <HAL_SPI_IRQHandler+0x1e6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2400be7a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400be7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400be82:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
2400be86:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400be88:	2b00      	cmp	r3, #0
2400be8a:	f43f af7e 	beq.w	2400bd8a <HAL_SPI_IRQHandler+0xea>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
2400be8e:	4a1b      	ldr	r2, [pc, #108]	; (2400befc <HAL_SPI_IRQHandler+0x25c>)
2400be90:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
2400be92:	6fa0      	ldr	r0, [r4, #120]	; 0x78
2400be94:	f7fa f882 	bl	24005f9c <HAL_DMA_Abort_IT>
2400be98:	2800      	cmp	r0, #0
2400be9a:	f43f af76 	beq.w	2400bd8a <HAL_SPI_IRQHandler+0xea>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2400be9e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400bea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400bea6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
2400beaa:	e76e      	b.n	2400bd8a <HAL_SPI_IRQHandler+0xea>
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400beac:	6821      	ldr	r1, [r4, #0]
    hspi->Reload.Requested = 0UL;
2400beae:	2300      	movs	r3, #0
2400beb0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400beb4:	698b      	ldr	r3, [r1, #24]
2400beb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2400beba:	618b      	str	r3, [r1, #24]
2400bebc:	e712      	b.n	2400bce4 <HAL_SPI_IRQHandler+0x44>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
2400bebe:	69ab      	ldr	r3, [r5, #24]
2400bec0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400bec4:	61ab      	str	r3, [r5, #24]
    HAL_SPI_SuspendCallback(hspi);
2400bec6:	f7ff fee9 	bl	2400bc9c <HAL_SPI_SuspendCallback>
}
2400beca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hspi->State = HAL_SPI_STATE_READY;
2400bece:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
2400bed0:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
2400bed2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
2400bed6:	f7ff fe5d 	bl	2400bb94 <HAL_SPI_ErrorCallback>
}
2400beda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
2400bede:	6823      	ldr	r3, [r4, #0]
2400bee0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
2400bee4:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
2400bee6:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400bee8:	3201      	adds	r2, #1
2400beea:	e724      	b.n	2400bd36 <HAL_SPI_IRQHandler+0x96>
      HAL_SPI_TxRxCpltCallback(hspi);
2400beec:	f027 fcf8 	bl	240338e0 <__HAL_SPI_TxRxCpltCallback_veneer>
2400bef0:	e74b      	b.n	2400bd8a <HAL_SPI_IRQHandler+0xea>
      HAL_SPI_RxCpltCallback(hspi);
2400bef2:	f7ff fe33 	bl	2400bb5c <HAL_SPI_RxCpltCallback>
2400bef6:	e748      	b.n	2400bd8a <HAL_SPI_IRQHandler+0xea>
2400bef8:	fffffc94 	.word	0xfffffc94
2400befc:	2400bc81 	.word	0x2400bc81

2400bf00 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
2400bf00:	680b      	ldr	r3, [r1, #0]
{
2400bf02:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
2400bf04:	b9d3      	cbnz	r3, 2400bf3c <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
2400bf06:	6804      	ldr	r4, [r0, #0]
2400bf08:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
2400bf0c:	684a      	ldr	r2, [r1, #4]
2400bf0e:	4023      	ands	r3, r4
2400bf10:	4313      	orrs	r3, r2
2400bf12:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
2400bf16:	4323      	orrs	r3, r4
2400bf18:	4313      	orrs	r3, r2
2400bf1a:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
2400bf1e:	4323      	orrs	r3, r4
2400bf20:	4313      	orrs	r3, r2
2400bf22:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
2400bf26:	4323      	orrs	r3, r4
2400bf28:	4313      	orrs	r3, r2
2400bf2a:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
2400bf2e:	4323      	orrs	r3, r4
2400bf30:	4313      	orrs	r3, r2
2400bf32:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
2400bf34:	2000      	movs	r0, #0
2400bf36:	f85d 4b04 	ldr.w	r4, [sp], #4
2400bf3a:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
2400bf3c:	6802      	ldr	r2, [r0, #0]
2400bf3e:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
2400bf42:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
2400bf46:	4322      	orrs	r2, r4
2400bf48:	6a4c      	ldr	r4, [r1, #36]	; 0x24
2400bf4a:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
2400bf4c:	4b0a      	ldr	r3, [pc, #40]	; (2400bf78 <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
2400bf4e:	4322      	orrs	r2, r4
2400bf50:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
2400bf52:	6842      	ldr	r2, [r0, #4]
2400bf54:	4013      	ands	r3, r2
2400bf56:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
2400bf5a:	4323      	orrs	r3, r4
2400bf5c:	4313      	orrs	r3, r2
2400bf5e:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
2400bf62:	4323      	orrs	r3, r4
2400bf64:	4313      	orrs	r3, r2
2400bf66:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
2400bf6a:	4323      	orrs	r3, r4
2400bf6c:	4313      	orrs	r3, r2
2400bf6e:	6043      	str	r3, [r0, #4]
}
2400bf70:	2000      	movs	r0, #0
2400bf72:	f85d 4b04 	ldr.w	r4, [sp], #4
2400bf76:	4770      	bx	lr
2400bf78:	ffff8000 	.word	0xffff8000

2400bf7c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
2400bf7c:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
2400bf7e:	bb0a      	cbnz	r2, 2400bfc4 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
2400bf80:	6883      	ldr	r3, [r0, #8]
2400bf82:	e9d1 2400 	ldrd	r2, r4, [r1]
2400bf86:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
2400bf8a:	3c01      	subs	r4, #1
2400bf8c:	3a01      	subs	r2, #1
2400bf8e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
2400bf92:	4313      	orrs	r3, r2
2400bf94:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
2400bf98:	3c01      	subs	r4, #1
2400bf9a:	3a01      	subs	r2, #1
2400bf9c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
2400bfa0:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
2400bfa4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
2400bfa8:	698a      	ldr	r2, [r1, #24]
2400bfaa:	3d01      	subs	r5, #1
2400bfac:	1e61      	subs	r1, r4, #1
2400bfae:	3a01      	subs	r2, #1
2400bfb0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
2400bfb4:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
2400bfb8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
2400bfbc:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
2400bfbe:	2000      	movs	r0, #0
2400bfc0:	bc30      	pop	{r4, r5}
2400bfc2:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
2400bfc4:	6885      	ldr	r5, [r0, #8]
2400bfc6:	68ca      	ldr	r2, [r1, #12]
2400bfc8:	4b12      	ldr	r3, [pc, #72]	; (2400c014 <FMC_SDRAM_Timing_Init+0x98>)
2400bfca:	1e54      	subs	r4, r2, #1
2400bfcc:	694a      	ldr	r2, [r1, #20]
2400bfce:	402b      	ands	r3, r5
2400bfd0:	3a01      	subs	r2, #1
2400bfd2:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
2400bfd6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
2400bfda:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
2400bfdc:	68c3      	ldr	r3, [r0, #12]
2400bfde:	688d      	ldr	r5, [r1, #8]
2400bfe0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
2400bfe4:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
2400bfe8:	e9d1 2400 	ldrd	r2, r4, [r1]
2400bfec:	3c01      	subs	r4, #1
2400bfee:	3a01      	subs	r2, #1
2400bff0:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
2400bff4:	690c      	ldr	r4, [r1, #16]
2400bff6:	4313      	orrs	r3, r2
2400bff8:	698a      	ldr	r2, [r1, #24]
2400bffa:	1e61      	subs	r1, r4, #1
2400bffc:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
2400c000:	3a01      	subs	r2, #1
2400c002:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
2400c006:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
2400c00a:	60c3      	str	r3, [r0, #12]
}
2400c00c:	2000      	movs	r0, #0
2400c00e:	bc30      	pop	{r4, r5}
2400c010:	4770      	bx	lr
2400c012:	bf00      	nop
2400c014:	ff0f0fff 	.word	0xff0f0fff

2400c018 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
2400c018:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
2400c01a:	e9d1 3400 	ldrd	r3, r4, [r1]
{
2400c01e:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
2400c020:	6900      	ldr	r0, [r0, #16]
2400c022:	4323      	orrs	r3, r4
2400c024:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
2400c028:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
2400c02c:	4c05      	ldr	r4, [pc, #20]	; (2400c044 <FMC_SDRAM_SendCommand+0x2c>)
2400c02e:	3901      	subs	r1, #1
2400c030:	4004      	ands	r4, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
2400c032:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
2400c034:	4323      	orrs	r3, r4
2400c036:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
2400c03a:	6113      	str	r3, [r2, #16]
}
2400c03c:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c040:	4770      	bx	lr
2400c042:	bf00      	nop
2400c044:	ffc00000 	.word	0xffc00000

2400c048 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
2400c048:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
2400c04a:	4b05      	ldr	r3, [pc, #20]	; (2400c060 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
2400c04c:	2000      	movs	r0, #0
{
2400c04e:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
2400c050:	6954      	ldr	r4, [r2, #20]
2400c052:	4023      	ands	r3, r4
2400c054:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
2400c058:	6151      	str	r1, [r2, #20]
}
2400c05a:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c05e:	4770      	bx	lr
2400c060:	ffffc001 	.word	0xffffc001

2400c064 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
2400c064:	b084      	sub	sp, #16
2400c066:	b410      	push	{r4}
2400c068:	f10d 0c08 	add.w	ip, sp, #8
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
2400c06c:	4614      	mov	r4, r2
{
2400c06e:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
2400c072:	460b      	mov	r3, r1
             Init.ClockPowerSave      | \
2400c074:	9904      	ldr	r1, [sp, #16]
{
2400c076:	4602      	mov	r2, r0
             Init.BusWide             | \
2400c078:	9805      	ldr	r0, [sp, #20]
  tmpreg |= (Init.ClockEdge           | \
2400c07a:	4323      	orrs	r3, r4
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
2400c07c:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      | \
2400c07e:	430b      	orrs	r3, r1
             Init.HardwareFlowControl | \
2400c080:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             | \
2400c082:	4303      	orrs	r3, r0

  return HAL_OK;
}
2400c084:	2000      	movs	r0, #0
             Init.HardwareFlowControl | \
2400c086:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
2400c088:	4903      	ldr	r1, [pc, #12]	; (2400c098 <SDMMC_Init+0x34>)
2400c08a:	4021      	ands	r1, r4
2400c08c:	430b      	orrs	r3, r1
2400c08e:	6053      	str	r3, [r2, #4]
}
2400c090:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c094:	b004      	add	sp, #16
2400c096:	4770      	bx	lr
2400c098:	ffc02c00 	.word	0xffc02c00

2400c09c <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
2400c09c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
2400c0a0:	4770      	bx	lr
2400c0a2:	bf00      	nop

2400c0a4 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
2400c0a4:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
2400c0a6:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
2400c0a8:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
2400c0aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
2400c0ae:	4770      	bx	lr

2400c0b0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
2400c0b0:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
2400c0b2:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
2400c0b4:	681a      	ldr	r2, [r3, #0]
2400c0b6:	f042 0203 	orr.w	r2, r2, #3
2400c0ba:	601a      	str	r2, [r3, #0]
}
2400c0bc:	4770      	bx	lr
2400c0be:	bf00      	nop

2400c0c0 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
2400c0c0:	6800      	ldr	r0, [r0, #0]
}
2400c0c2:	f000 0003 	and.w	r0, r0, #3
2400c0c6:	4770      	bx	lr

2400c0c8 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
2400c0c8:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
2400c0ca:	5840      	ldr	r0, [r0, r1]
}
2400c0cc:	4770      	bx	lr
2400c0ce:	bf00      	nop

2400c0d0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
2400c0d0:	b430      	push	{r4, r5}
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
2400c0d2:	680b      	ldr	r3, [r1, #0]
{
2400c0d4:	4602      	mov	r2, r0
  SDMMCx->DTIMER = Data->DataTimeOut;
2400c0d6:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
2400c0d8:	684b      	ldr	r3, [r1, #4]
2400c0da:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
                       Data->TransferDir   | \
2400c0dc:	690d      	ldr	r5, [r1, #16]
                       Data->TransferMode  | \
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
2400c0de:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
2400c0e0:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
2400c0e4:	4323      	orrs	r3, r4
                       Data->TransferMode  | \
2400c0e6:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
2400c0e8:	f020 01ff 	bic.w	r1, r0, #255	; 0xff

  return HAL_OK;

}
2400c0ec:	2000      	movs	r0, #0
                       Data->TransferDir   | \
2400c0ee:	432b      	orrs	r3, r5
                       Data->TransferMode  | \
2400c0f0:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
2400c0f2:	430b      	orrs	r3, r1
2400c0f4:	62d3      	str	r3, [r2, #44]	; 0x2c
}
2400c0f6:	bc30      	pop	{r4, r5}
2400c0f8:	4770      	bx	lr
2400c0fa:	bf00      	nop

2400c0fc <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c0fc:	4a50      	ldr	r2, [pc, #320]	; (2400c240 <SDMMC_CmdBlockLength+0x144>)
{
2400c0fe:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c100:	4b50      	ldr	r3, [pc, #320]	; (2400c244 <SDMMC_CmdBlockLength+0x148>)
2400c102:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c104:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c108:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c10c:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400c110:	484d      	ldr	r0, [pc, #308]	; (2400c248 <SDMMC_CmdBlockLength+0x14c>)
2400c112:	f241 1310 	movw	r3, #4368	; 0x1110
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c116:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c118:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c11a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c11e:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c120:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c124:	f8cc 300c 	str.w	r3, [ip, #12]

  do
  {
    if (count-- == 0U)
2400c128:	1e53      	subs	r3, r2, #1
2400c12a:	b14a      	cbz	r2, 2400c140 <SDMMC_CmdBlockLength+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c12c:	4947      	ldr	r1, [pc, #284]	; (2400c24c <SDMMC_CmdBlockLength+0x150>)
    sta_reg = SDMMCx->STA;
2400c12e:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400c132:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c134:	420a      	tst	r2, r1
2400c136:	d001      	beq.n	2400c13c <SDMMC_CmdBlockLength+0x40>
2400c138:	0492      	lsls	r2, r2, #18
2400c13a:	d504      	bpl.n	2400c146 <SDMMC_CmdBlockLength+0x4a>
    if (count-- == 0U)
2400c13c:	1c58      	adds	r0, r3, #1
2400c13e:	d1f6      	bne.n	2400c12e <SDMMC_CmdBlockLength+0x32>
      return SDMMC_ERROR_TIMEOUT;
2400c140:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400c144:	4770      	bx	lr

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c146:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400c14a:	0758      	lsls	r0, r3, #29
2400c14c:	d445      	bmi.n	2400c1da <SDMMC_CmdBlockLength+0xde>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c14e:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400c152:	f010 0001 	ands.w	r0, r0, #1
2400c156:	d137      	bne.n	2400c1c8 <SDMMC_CmdBlockLength+0xcc>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c158:	4b3d      	ldr	r3, [pc, #244]	; (2400c250 <SDMMC_CmdBlockLength+0x154>)
2400c15a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c15e:	f8dc 3010 	ldr.w	r3, [ip, #16]

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c162:	b2db      	uxtb	r3, r3
2400c164:	2b10      	cmp	r3, #16
2400c166:	d136      	bne.n	2400c1d6 <SDMMC_CmdBlockLength+0xda>
  return (*(__IO uint32_t *) tmp);
2400c168:	f8dc 3014 	ldr.w	r3, [ip, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c16c:	4839      	ldr	r0, [pc, #228]	; (2400c254 <SDMMC_CmdBlockLength+0x158>)
2400c16e:	4018      	ands	r0, r3
2400c170:	2800      	cmp	r0, #0
2400c172:	d02f      	beq.n	2400c1d4 <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_NONE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c174:	2b00      	cmp	r3, #0
2400c176:	db35      	blt.n	2400c1e4 <SDMMC_CmdBlockLength+0xe8>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c178:	0059      	lsls	r1, r3, #1
2400c17a:	d436      	bmi.n	2400c1ea <SDMMC_CmdBlockLength+0xee>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c17c:	009a      	lsls	r2, r3, #2
2400c17e:	d436      	bmi.n	2400c1ee <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c180:	00d9      	lsls	r1, r3, #3
2400c182:	d436      	bmi.n	2400c1f2 <SDMMC_CmdBlockLength+0xf6>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c184:	011a      	lsls	r2, r3, #4
2400c186:	d437      	bmi.n	2400c1f8 <SDMMC_CmdBlockLength+0xfc>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c188:	0159      	lsls	r1, r3, #5
2400c18a:	d438      	bmi.n	2400c1fe <SDMMC_CmdBlockLength+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c18c:	01da      	lsls	r2, r3, #7
2400c18e:	d439      	bmi.n	2400c204 <SDMMC_CmdBlockLength+0x108>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c190:	0219      	lsls	r1, r3, #8
2400c192:	d43a      	bmi.n	2400c20a <SDMMC_CmdBlockLength+0x10e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c194:	025a      	lsls	r2, r3, #9
2400c196:	d43b      	bmi.n	2400c210 <SDMMC_CmdBlockLength+0x114>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c198:	0299      	lsls	r1, r3, #10
2400c19a:	d445      	bmi.n	2400c228 <SDMMC_CmdBlockLength+0x12c>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c19c:	02da      	lsls	r2, r3, #11
2400c19e:	d440      	bmi.n	2400c222 <SDMMC_CmdBlockLength+0x126>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c1a0:	0359      	lsls	r1, r3, #13
2400c1a2:	d43b      	bmi.n	2400c21c <SDMMC_CmdBlockLength+0x120>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c1a4:	039a      	lsls	r2, r3, #14
2400c1a6:	d436      	bmi.n	2400c216 <SDMMC_CmdBlockLength+0x11a>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c1a8:	03d9      	lsls	r1, r3, #15
2400c1aa:	d446      	bmi.n	2400c23a <SDMMC_CmdBlockLength+0x13e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c1ac:	041a      	lsls	r2, r3, #16
2400c1ae:	d441      	bmi.n	2400c234 <SDMMC_CmdBlockLength+0x138>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c1b0:	0459      	lsls	r1, r3, #17
2400c1b2:	d43c      	bmi.n	2400c22e <SDMMC_CmdBlockLength+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c1b4:	049a      	lsls	r2, r3, #18
2400c1b6:	d40b      	bmi.n	2400c1d0 <SDMMC_CmdBlockLength+0xd4>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c1b8:	f013 0f08 	tst.w	r3, #8
2400c1bc:	bf14      	ite	ne
2400c1be:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400c1c2:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400c1c6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c1c8:	2301      	movs	r3, #1
2400c1ca:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c1ce:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
2400c1d0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
2400c1d4:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c1d6:	2001      	movs	r0, #1
2400c1d8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c1da:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c1dc:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c1de:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c1e2:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c1e4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400c1e8:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c1ea:	2040      	movs	r0, #64	; 0x40
2400c1ec:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c1ee:	2080      	movs	r0, #128	; 0x80
2400c1f0:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c1f2:	f44f 7080 	mov.w	r0, #256	; 0x100
2400c1f6:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c1f8:	f44f 7000 	mov.w	r0, #512	; 0x200
2400c1fc:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c1fe:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400c202:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c204:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400c208:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c20a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400c20e:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c210:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400c214:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c216:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400c21a:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c21c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400c220:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
2400c222:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400c226:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c228:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400c22c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c22e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400c232:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c234:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400c238:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c23a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400c23e:	4770      	bx	lr
2400c240:	2000074c 	.word	0x2000074c
2400c244:	10624dd3 	.word	0x10624dd3
2400c248:	fffee0c0 	.word	0xfffee0c0
2400c24c:	00200045 	.word	0x00200045
2400c250:	002000c5 	.word	0x002000c5
2400c254:	fdffe008 	.word	0xfdffe008

2400c258 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c258:	4a50      	ldr	r2, [pc, #320]	; (2400c39c <SDMMC_CmdReadSingleBlock+0x144>)
{
2400c25a:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c25c:	4b50      	ldr	r3, [pc, #320]	; (2400c3a0 <SDMMC_CmdReadSingleBlock+0x148>)
2400c25e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c260:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c264:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c268:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400c26c:	484d      	ldr	r0, [pc, #308]	; (2400c3a4 <SDMMC_CmdReadSingleBlock+0x14c>)
2400c26e:	f241 1311 	movw	r3, #4369	; 0x1111
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c272:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c274:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c276:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c27a:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c27c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c280:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400c284:	1e53      	subs	r3, r2, #1
2400c286:	b14a      	cbz	r2, 2400c29c <SDMMC_CmdReadSingleBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c288:	4947      	ldr	r1, [pc, #284]	; (2400c3a8 <SDMMC_CmdReadSingleBlock+0x150>)
    sta_reg = SDMMCx->STA;
2400c28a:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400c28e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c290:	420a      	tst	r2, r1
2400c292:	d001      	beq.n	2400c298 <SDMMC_CmdReadSingleBlock+0x40>
2400c294:	0492      	lsls	r2, r2, #18
2400c296:	d504      	bpl.n	2400c2a2 <SDMMC_CmdReadSingleBlock+0x4a>
    if (count-- == 0U)
2400c298:	1c58      	adds	r0, r3, #1
2400c29a:	d1f6      	bne.n	2400c28a <SDMMC_CmdReadSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
2400c29c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400c2a0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c2a2:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400c2a6:	0758      	lsls	r0, r3, #29
2400c2a8:	d445      	bmi.n	2400c336 <SDMMC_CmdReadSingleBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c2aa:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400c2ae:	f010 0001 	ands.w	r0, r0, #1
2400c2b2:	d137      	bne.n	2400c324 <SDMMC_CmdReadSingleBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c2b4:	4b3d      	ldr	r3, [pc, #244]	; (2400c3ac <SDMMC_CmdReadSingleBlock+0x154>)
2400c2b6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c2ba:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c2be:	b2db      	uxtb	r3, r3
2400c2c0:	2b11      	cmp	r3, #17
2400c2c2:	d136      	bne.n	2400c332 <SDMMC_CmdReadSingleBlock+0xda>
  return (*(__IO uint32_t *) tmp);
2400c2c4:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c2c8:	4839      	ldr	r0, [pc, #228]	; (2400c3b0 <SDMMC_CmdReadSingleBlock+0x158>)
2400c2ca:	4018      	ands	r0, r3
2400c2cc:	2800      	cmp	r0, #0
2400c2ce:	d02f      	beq.n	2400c330 <SDMMC_CmdReadSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c2d0:	2b00      	cmp	r3, #0
2400c2d2:	db35      	blt.n	2400c340 <SDMMC_CmdReadSingleBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c2d4:	0059      	lsls	r1, r3, #1
2400c2d6:	d436      	bmi.n	2400c346 <SDMMC_CmdReadSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c2d8:	009a      	lsls	r2, r3, #2
2400c2da:	d436      	bmi.n	2400c34a <SDMMC_CmdReadSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c2dc:	00d9      	lsls	r1, r3, #3
2400c2de:	d436      	bmi.n	2400c34e <SDMMC_CmdReadSingleBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c2e0:	011a      	lsls	r2, r3, #4
2400c2e2:	d437      	bmi.n	2400c354 <SDMMC_CmdReadSingleBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c2e4:	0159      	lsls	r1, r3, #5
2400c2e6:	d438      	bmi.n	2400c35a <SDMMC_CmdReadSingleBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c2e8:	01da      	lsls	r2, r3, #7
2400c2ea:	d439      	bmi.n	2400c360 <SDMMC_CmdReadSingleBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c2ec:	0219      	lsls	r1, r3, #8
2400c2ee:	d43a      	bmi.n	2400c366 <SDMMC_CmdReadSingleBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c2f0:	025a      	lsls	r2, r3, #9
2400c2f2:	d43b      	bmi.n	2400c36c <SDMMC_CmdReadSingleBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c2f4:	0299      	lsls	r1, r3, #10
2400c2f6:	d445      	bmi.n	2400c384 <SDMMC_CmdReadSingleBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c2f8:	02da      	lsls	r2, r3, #11
2400c2fa:	d440      	bmi.n	2400c37e <SDMMC_CmdReadSingleBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c2fc:	0359      	lsls	r1, r3, #13
2400c2fe:	d43b      	bmi.n	2400c378 <SDMMC_CmdReadSingleBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c300:	039a      	lsls	r2, r3, #14
2400c302:	d436      	bmi.n	2400c372 <SDMMC_CmdReadSingleBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c304:	03d9      	lsls	r1, r3, #15
2400c306:	d446      	bmi.n	2400c396 <SDMMC_CmdReadSingleBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c308:	041a      	lsls	r2, r3, #16
2400c30a:	d441      	bmi.n	2400c390 <SDMMC_CmdReadSingleBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c30c:	0459      	lsls	r1, r3, #17
2400c30e:	d43c      	bmi.n	2400c38a <SDMMC_CmdReadSingleBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c310:	049a      	lsls	r2, r3, #18
2400c312:	d40b      	bmi.n	2400c32c <SDMMC_CmdReadSingleBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c314:	f013 0f08 	tst.w	r3, #8
2400c318:	bf14      	ite	ne
2400c31a:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400c31e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400c322:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c324:	2301      	movs	r3, #1
2400c326:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c32a:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
2400c32c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
2400c330:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c332:	2001      	movs	r0, #1
2400c334:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c336:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c338:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c33a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c33e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c340:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400c344:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c346:	2040      	movs	r0, #64	; 0x40
2400c348:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c34a:	2080      	movs	r0, #128	; 0x80
2400c34c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c34e:	f44f 7080 	mov.w	r0, #256	; 0x100
2400c352:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c354:	f44f 7000 	mov.w	r0, #512	; 0x200
2400c358:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c35a:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400c35e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c360:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400c364:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c366:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400c36a:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c36c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400c370:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c372:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400c376:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c378:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400c37c:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
2400c37e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400c382:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c384:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400c388:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c38a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400c38e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c390:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400c394:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c396:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400c39a:	4770      	bx	lr
2400c39c:	2000074c 	.word	0x2000074c
2400c3a0:	10624dd3 	.word	0x10624dd3
2400c3a4:	fffee0c0 	.word	0xfffee0c0
2400c3a8:	00200045 	.word	0x00200045
2400c3ac:	002000c5 	.word	0x002000c5
2400c3b0:	fdffe008 	.word	0xfdffe008

2400c3b4 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c3b4:	4a50      	ldr	r2, [pc, #320]	; (2400c4f8 <SDMMC_CmdReadMultiBlock+0x144>)
{
2400c3b6:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c3b8:	4b50      	ldr	r3, [pc, #320]	; (2400c4fc <SDMMC_CmdReadMultiBlock+0x148>)
2400c3ba:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c3bc:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c3c0:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c3c4:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400c3c8:	484d      	ldr	r0, [pc, #308]	; (2400c500 <SDMMC_CmdReadMultiBlock+0x14c>)
2400c3ca:	f241 1312 	movw	r3, #4370	; 0x1112
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c3ce:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c3d0:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c3d2:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c3d6:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c3d8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c3dc:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400c3e0:	1e53      	subs	r3, r2, #1
2400c3e2:	b14a      	cbz	r2, 2400c3f8 <SDMMC_CmdReadMultiBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c3e4:	4947      	ldr	r1, [pc, #284]	; (2400c504 <SDMMC_CmdReadMultiBlock+0x150>)
    sta_reg = SDMMCx->STA;
2400c3e6:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400c3ea:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c3ec:	420a      	tst	r2, r1
2400c3ee:	d001      	beq.n	2400c3f4 <SDMMC_CmdReadMultiBlock+0x40>
2400c3f0:	0492      	lsls	r2, r2, #18
2400c3f2:	d504      	bpl.n	2400c3fe <SDMMC_CmdReadMultiBlock+0x4a>
    if (count-- == 0U)
2400c3f4:	1c58      	adds	r0, r3, #1
2400c3f6:	d1f6      	bne.n	2400c3e6 <SDMMC_CmdReadMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
2400c3f8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400c3fc:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c3fe:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400c402:	0758      	lsls	r0, r3, #29
2400c404:	d445      	bmi.n	2400c492 <SDMMC_CmdReadMultiBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c406:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400c40a:	f010 0001 	ands.w	r0, r0, #1
2400c40e:	d137      	bne.n	2400c480 <SDMMC_CmdReadMultiBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c410:	4b3d      	ldr	r3, [pc, #244]	; (2400c508 <SDMMC_CmdReadMultiBlock+0x154>)
2400c412:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c416:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c41a:	b2db      	uxtb	r3, r3
2400c41c:	2b12      	cmp	r3, #18
2400c41e:	d136      	bne.n	2400c48e <SDMMC_CmdReadMultiBlock+0xda>
  return (*(__IO uint32_t *) tmp);
2400c420:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c424:	4839      	ldr	r0, [pc, #228]	; (2400c50c <SDMMC_CmdReadMultiBlock+0x158>)
2400c426:	4018      	ands	r0, r3
2400c428:	2800      	cmp	r0, #0
2400c42a:	d02f      	beq.n	2400c48c <SDMMC_CmdReadMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c42c:	2b00      	cmp	r3, #0
2400c42e:	db35      	blt.n	2400c49c <SDMMC_CmdReadMultiBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c430:	0059      	lsls	r1, r3, #1
2400c432:	d436      	bmi.n	2400c4a2 <SDMMC_CmdReadMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c434:	009a      	lsls	r2, r3, #2
2400c436:	d436      	bmi.n	2400c4a6 <SDMMC_CmdReadMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c438:	00d9      	lsls	r1, r3, #3
2400c43a:	d436      	bmi.n	2400c4aa <SDMMC_CmdReadMultiBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c43c:	011a      	lsls	r2, r3, #4
2400c43e:	d437      	bmi.n	2400c4b0 <SDMMC_CmdReadMultiBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c440:	0159      	lsls	r1, r3, #5
2400c442:	d438      	bmi.n	2400c4b6 <SDMMC_CmdReadMultiBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c444:	01da      	lsls	r2, r3, #7
2400c446:	d439      	bmi.n	2400c4bc <SDMMC_CmdReadMultiBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c448:	0219      	lsls	r1, r3, #8
2400c44a:	d43a      	bmi.n	2400c4c2 <SDMMC_CmdReadMultiBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c44c:	025a      	lsls	r2, r3, #9
2400c44e:	d43b      	bmi.n	2400c4c8 <SDMMC_CmdReadMultiBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c450:	0299      	lsls	r1, r3, #10
2400c452:	d445      	bmi.n	2400c4e0 <SDMMC_CmdReadMultiBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c454:	02da      	lsls	r2, r3, #11
2400c456:	d440      	bmi.n	2400c4da <SDMMC_CmdReadMultiBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c458:	0359      	lsls	r1, r3, #13
2400c45a:	d43b      	bmi.n	2400c4d4 <SDMMC_CmdReadMultiBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c45c:	039a      	lsls	r2, r3, #14
2400c45e:	d436      	bmi.n	2400c4ce <SDMMC_CmdReadMultiBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c460:	03d9      	lsls	r1, r3, #15
2400c462:	d446      	bmi.n	2400c4f2 <SDMMC_CmdReadMultiBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c464:	041a      	lsls	r2, r3, #16
2400c466:	d441      	bmi.n	2400c4ec <SDMMC_CmdReadMultiBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c468:	0459      	lsls	r1, r3, #17
2400c46a:	d43c      	bmi.n	2400c4e6 <SDMMC_CmdReadMultiBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c46c:	049a      	lsls	r2, r3, #18
2400c46e:	d40b      	bmi.n	2400c488 <SDMMC_CmdReadMultiBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c470:	f013 0f08 	tst.w	r3, #8
2400c474:	bf14      	ite	ne
2400c476:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400c47a:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400c47e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c480:	2301      	movs	r3, #1
2400c482:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c486:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
2400c488:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
2400c48c:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c48e:	2001      	movs	r0, #1
2400c490:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c492:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c494:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c496:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c49a:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c49c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400c4a0:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c4a2:	2040      	movs	r0, #64	; 0x40
2400c4a4:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c4a6:	2080      	movs	r0, #128	; 0x80
2400c4a8:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c4aa:	f44f 7080 	mov.w	r0, #256	; 0x100
2400c4ae:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c4b0:	f44f 7000 	mov.w	r0, #512	; 0x200
2400c4b4:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c4b6:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400c4ba:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c4bc:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400c4c0:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c4c2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400c4c6:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c4c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400c4cc:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c4ce:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400c4d2:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c4d4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400c4d8:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
2400c4da:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400c4de:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c4e0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400c4e4:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c4e6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400c4ea:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c4ec:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400c4f0:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c4f2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400c4f6:	4770      	bx	lr
2400c4f8:	2000074c 	.word	0x2000074c
2400c4fc:	10624dd3 	.word	0x10624dd3
2400c500:	fffee0c0 	.word	0xfffee0c0
2400c504:	00200045 	.word	0x00200045
2400c508:	002000c5 	.word	0x002000c5
2400c50c:	fdffe008 	.word	0xfdffe008

2400c510 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c510:	4a50      	ldr	r2, [pc, #320]	; (2400c654 <SDMMC_CmdWriteSingleBlock+0x144>)
{
2400c512:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c514:	4b50      	ldr	r3, [pc, #320]	; (2400c658 <SDMMC_CmdWriteSingleBlock+0x148>)
2400c516:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c518:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c51c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c520:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400c524:	484d      	ldr	r0, [pc, #308]	; (2400c65c <SDMMC_CmdWriteSingleBlock+0x14c>)
2400c526:	f241 1318 	movw	r3, #4376	; 0x1118
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c52a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c52c:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c52e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c532:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c534:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c538:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400c53c:	1e53      	subs	r3, r2, #1
2400c53e:	b14a      	cbz	r2, 2400c554 <SDMMC_CmdWriteSingleBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c540:	4947      	ldr	r1, [pc, #284]	; (2400c660 <SDMMC_CmdWriteSingleBlock+0x150>)
    sta_reg = SDMMCx->STA;
2400c542:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400c546:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c548:	420a      	tst	r2, r1
2400c54a:	d001      	beq.n	2400c550 <SDMMC_CmdWriteSingleBlock+0x40>
2400c54c:	0492      	lsls	r2, r2, #18
2400c54e:	d504      	bpl.n	2400c55a <SDMMC_CmdWriteSingleBlock+0x4a>
    if (count-- == 0U)
2400c550:	1c58      	adds	r0, r3, #1
2400c552:	d1f6      	bne.n	2400c542 <SDMMC_CmdWriteSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
2400c554:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400c558:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c55a:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400c55e:	0758      	lsls	r0, r3, #29
2400c560:	d445      	bmi.n	2400c5ee <SDMMC_CmdWriteSingleBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c562:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400c566:	f010 0001 	ands.w	r0, r0, #1
2400c56a:	d137      	bne.n	2400c5dc <SDMMC_CmdWriteSingleBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c56c:	4b3d      	ldr	r3, [pc, #244]	; (2400c664 <SDMMC_CmdWriteSingleBlock+0x154>)
2400c56e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c572:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c576:	b2db      	uxtb	r3, r3
2400c578:	2b18      	cmp	r3, #24
2400c57a:	d136      	bne.n	2400c5ea <SDMMC_CmdWriteSingleBlock+0xda>
  return (*(__IO uint32_t *) tmp);
2400c57c:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c580:	4839      	ldr	r0, [pc, #228]	; (2400c668 <SDMMC_CmdWriteSingleBlock+0x158>)
2400c582:	4018      	ands	r0, r3
2400c584:	2800      	cmp	r0, #0
2400c586:	d02f      	beq.n	2400c5e8 <SDMMC_CmdWriteSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c588:	2b00      	cmp	r3, #0
2400c58a:	db35      	blt.n	2400c5f8 <SDMMC_CmdWriteSingleBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c58c:	0059      	lsls	r1, r3, #1
2400c58e:	d436      	bmi.n	2400c5fe <SDMMC_CmdWriteSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c590:	009a      	lsls	r2, r3, #2
2400c592:	d436      	bmi.n	2400c602 <SDMMC_CmdWriteSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c594:	00d9      	lsls	r1, r3, #3
2400c596:	d436      	bmi.n	2400c606 <SDMMC_CmdWriteSingleBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c598:	011a      	lsls	r2, r3, #4
2400c59a:	d437      	bmi.n	2400c60c <SDMMC_CmdWriteSingleBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c59c:	0159      	lsls	r1, r3, #5
2400c59e:	d438      	bmi.n	2400c612 <SDMMC_CmdWriteSingleBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c5a0:	01da      	lsls	r2, r3, #7
2400c5a2:	d439      	bmi.n	2400c618 <SDMMC_CmdWriteSingleBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c5a4:	0219      	lsls	r1, r3, #8
2400c5a6:	d43a      	bmi.n	2400c61e <SDMMC_CmdWriteSingleBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c5a8:	025a      	lsls	r2, r3, #9
2400c5aa:	d43b      	bmi.n	2400c624 <SDMMC_CmdWriteSingleBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c5ac:	0299      	lsls	r1, r3, #10
2400c5ae:	d445      	bmi.n	2400c63c <SDMMC_CmdWriteSingleBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c5b0:	02da      	lsls	r2, r3, #11
2400c5b2:	d440      	bmi.n	2400c636 <SDMMC_CmdWriteSingleBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c5b4:	0359      	lsls	r1, r3, #13
2400c5b6:	d43b      	bmi.n	2400c630 <SDMMC_CmdWriteSingleBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c5b8:	039a      	lsls	r2, r3, #14
2400c5ba:	d436      	bmi.n	2400c62a <SDMMC_CmdWriteSingleBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c5bc:	03d9      	lsls	r1, r3, #15
2400c5be:	d446      	bmi.n	2400c64e <SDMMC_CmdWriteSingleBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c5c0:	041a      	lsls	r2, r3, #16
2400c5c2:	d441      	bmi.n	2400c648 <SDMMC_CmdWriteSingleBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c5c4:	0459      	lsls	r1, r3, #17
2400c5c6:	d43c      	bmi.n	2400c642 <SDMMC_CmdWriteSingleBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c5c8:	049a      	lsls	r2, r3, #18
2400c5ca:	d40b      	bmi.n	2400c5e4 <SDMMC_CmdWriteSingleBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c5cc:	f013 0f08 	tst.w	r3, #8
2400c5d0:	bf14      	ite	ne
2400c5d2:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400c5d6:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400c5da:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c5dc:	2301      	movs	r3, #1
2400c5de:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c5e2:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
2400c5e4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
2400c5e8:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c5ea:	2001      	movs	r0, #1
2400c5ec:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c5ee:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c5f0:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c5f2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c5f6:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c5f8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400c5fc:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c5fe:	2040      	movs	r0, #64	; 0x40
2400c600:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c602:	2080      	movs	r0, #128	; 0x80
2400c604:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c606:	f44f 7080 	mov.w	r0, #256	; 0x100
2400c60a:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c60c:	f44f 7000 	mov.w	r0, #512	; 0x200
2400c610:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c612:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400c616:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c618:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400c61c:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c61e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400c622:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c624:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400c628:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c62a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400c62e:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c630:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400c634:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
2400c636:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400c63a:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c63c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400c640:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c642:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400c646:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c648:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400c64c:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c64e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400c652:	4770      	bx	lr
2400c654:	2000074c 	.word	0x2000074c
2400c658:	10624dd3 	.word	0x10624dd3
2400c65c:	fffee0c0 	.word	0xfffee0c0
2400c660:	00200045 	.word	0x00200045
2400c664:	002000c5 	.word	0x002000c5
2400c668:	fdffe008 	.word	0xfdffe008

2400c66c <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c66c:	4a50      	ldr	r2, [pc, #320]	; (2400c7b0 <SDMMC_CmdWriteMultiBlock+0x144>)
{
2400c66e:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c670:	4b50      	ldr	r3, [pc, #320]	; (2400c7b4 <SDMMC_CmdWriteMultiBlock+0x148>)
2400c672:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c674:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c678:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c67c:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400c680:	484d      	ldr	r0, [pc, #308]	; (2400c7b8 <SDMMC_CmdWriteMultiBlock+0x14c>)
2400c682:	f241 1319 	movw	r3, #4377	; 0x1119
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c686:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c688:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c68a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c68e:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c690:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c694:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400c698:	1e53      	subs	r3, r2, #1
2400c69a:	b14a      	cbz	r2, 2400c6b0 <SDMMC_CmdWriteMultiBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c69c:	4947      	ldr	r1, [pc, #284]	; (2400c7bc <SDMMC_CmdWriteMultiBlock+0x150>)
    sta_reg = SDMMCx->STA;
2400c69e:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400c6a2:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c6a4:	420a      	tst	r2, r1
2400c6a6:	d001      	beq.n	2400c6ac <SDMMC_CmdWriteMultiBlock+0x40>
2400c6a8:	0492      	lsls	r2, r2, #18
2400c6aa:	d504      	bpl.n	2400c6b6 <SDMMC_CmdWriteMultiBlock+0x4a>
    if (count-- == 0U)
2400c6ac:	1c58      	adds	r0, r3, #1
2400c6ae:	d1f6      	bne.n	2400c69e <SDMMC_CmdWriteMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
2400c6b0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400c6b4:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c6b6:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400c6ba:	0758      	lsls	r0, r3, #29
2400c6bc:	d445      	bmi.n	2400c74a <SDMMC_CmdWriteMultiBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c6be:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400c6c2:	f010 0001 	ands.w	r0, r0, #1
2400c6c6:	d137      	bne.n	2400c738 <SDMMC_CmdWriteMultiBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c6c8:	4b3d      	ldr	r3, [pc, #244]	; (2400c7c0 <SDMMC_CmdWriteMultiBlock+0x154>)
2400c6ca:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c6ce:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c6d2:	b2db      	uxtb	r3, r3
2400c6d4:	2b19      	cmp	r3, #25
2400c6d6:	d136      	bne.n	2400c746 <SDMMC_CmdWriteMultiBlock+0xda>
  return (*(__IO uint32_t *) tmp);
2400c6d8:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c6dc:	4839      	ldr	r0, [pc, #228]	; (2400c7c4 <SDMMC_CmdWriteMultiBlock+0x158>)
2400c6de:	4018      	ands	r0, r3
2400c6e0:	2800      	cmp	r0, #0
2400c6e2:	d02f      	beq.n	2400c744 <SDMMC_CmdWriteMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c6e4:	2b00      	cmp	r3, #0
2400c6e6:	db35      	blt.n	2400c754 <SDMMC_CmdWriteMultiBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c6e8:	0059      	lsls	r1, r3, #1
2400c6ea:	d436      	bmi.n	2400c75a <SDMMC_CmdWriteMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c6ec:	009a      	lsls	r2, r3, #2
2400c6ee:	d436      	bmi.n	2400c75e <SDMMC_CmdWriteMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c6f0:	00d9      	lsls	r1, r3, #3
2400c6f2:	d436      	bmi.n	2400c762 <SDMMC_CmdWriteMultiBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c6f4:	011a      	lsls	r2, r3, #4
2400c6f6:	d437      	bmi.n	2400c768 <SDMMC_CmdWriteMultiBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c6f8:	0159      	lsls	r1, r3, #5
2400c6fa:	d438      	bmi.n	2400c76e <SDMMC_CmdWriteMultiBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c6fc:	01da      	lsls	r2, r3, #7
2400c6fe:	d439      	bmi.n	2400c774 <SDMMC_CmdWriteMultiBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c700:	0219      	lsls	r1, r3, #8
2400c702:	d43a      	bmi.n	2400c77a <SDMMC_CmdWriteMultiBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c704:	025a      	lsls	r2, r3, #9
2400c706:	d43b      	bmi.n	2400c780 <SDMMC_CmdWriteMultiBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c708:	0299      	lsls	r1, r3, #10
2400c70a:	d445      	bmi.n	2400c798 <SDMMC_CmdWriteMultiBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c70c:	02da      	lsls	r2, r3, #11
2400c70e:	d440      	bmi.n	2400c792 <SDMMC_CmdWriteMultiBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c710:	0359      	lsls	r1, r3, #13
2400c712:	d43b      	bmi.n	2400c78c <SDMMC_CmdWriteMultiBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c714:	039a      	lsls	r2, r3, #14
2400c716:	d436      	bmi.n	2400c786 <SDMMC_CmdWriteMultiBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c718:	03d9      	lsls	r1, r3, #15
2400c71a:	d446      	bmi.n	2400c7aa <SDMMC_CmdWriteMultiBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c71c:	041a      	lsls	r2, r3, #16
2400c71e:	d441      	bmi.n	2400c7a4 <SDMMC_CmdWriteMultiBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c720:	0459      	lsls	r1, r3, #17
2400c722:	d43c      	bmi.n	2400c79e <SDMMC_CmdWriteMultiBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c724:	049a      	lsls	r2, r3, #18
2400c726:	d40b      	bmi.n	2400c740 <SDMMC_CmdWriteMultiBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c728:	f013 0f08 	tst.w	r3, #8
2400c72c:	bf14      	ite	ne
2400c72e:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400c732:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400c736:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c738:	2301      	movs	r3, #1
2400c73a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c73e:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
2400c740:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
2400c744:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c746:	2001      	movs	r0, #1
2400c748:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c74a:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c74c:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c74e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c752:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c754:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400c758:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c75a:	2040      	movs	r0, #64	; 0x40
2400c75c:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c75e:	2080      	movs	r0, #128	; 0x80
2400c760:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c762:	f44f 7080 	mov.w	r0, #256	; 0x100
2400c766:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c768:	f44f 7000 	mov.w	r0, #512	; 0x200
2400c76c:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c76e:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400c772:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c774:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400c778:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c77a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400c77e:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c780:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400c784:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c786:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400c78a:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c78c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400c790:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
2400c792:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400c796:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c798:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400c79c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c79e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400c7a2:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c7a4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400c7a8:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c7aa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400c7ae:	4770      	bx	lr
2400c7b0:	2000074c 	.word	0x2000074c
2400c7b4:	10624dd3 	.word	0x10624dd3
2400c7b8:	fffee0c0 	.word	0xfffee0c0
2400c7bc:	00200045 	.word	0x00200045
2400c7c0:	002000c5 	.word	0x002000c5
2400c7c4:	fdffe008 	.word	0xfdffe008

2400c7c8 <SDMMC_CmdStopTransfer>:
{
2400c7c8:	b430      	push	{r4, r5}
2400c7ca:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c7cc:	4b7b      	ldr	r3, [pc, #492]	; (2400c9bc <SDMMC_CmdStopTransfer+0x1f4>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
2400c7ce:	68c0      	ldr	r0, [r0, #12]
  SDMMCx->ARG = Command->Argument;
2400c7d0:	2500      	movs	r5, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c7d2:	4c7b      	ldr	r4, [pc, #492]	; (2400c9c0 <SDMMC_CmdStopTransfer+0x1f8>)
2400c7d4:	681a      	ldr	r2, [r3, #0]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
2400c7d6:	f040 0080 	orr.w	r0, r0, #128	; 0x80
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c7da:	4b7a      	ldr	r3, [pc, #488]	; (2400c9c4 <SDMMC_CmdStopTransfer+0x1fc>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
2400c7dc:	60c8      	str	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c7de:	fba4 4202 	umull	r4, r2, r4, r2
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
2400c7e2:	68c8      	ldr	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c7e4:	4c78      	ldr	r4, [pc, #480]	; (2400c9c8 <SDMMC_CmdStopTransfer+0x200>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
2400c7e6:	f020 0040 	bic.w	r0, r0, #64	; 0x40
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c7ea:	0a52      	lsrs	r2, r2, #9
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
2400c7ec:	60c8      	str	r0, [r1, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c7ee:	f241 100c 	movw	r0, #4364	; 0x110c
  SDMMCx->ARG = Command->Argument;
2400c7f2:	608d      	str	r5, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c7f4:	fb04 f202 	mul.w	r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c7f8:	68cc      	ldr	r4, [r1, #12]
2400c7fa:	4023      	ands	r3, r4
2400c7fc:	4318      	orrs	r0, r3
2400c7fe:	60c8      	str	r0, [r1, #12]
    if (count-- == 0U)
2400c800:	b14a      	cbz	r2, 2400c816 <SDMMC_CmdStopTransfer+0x4e>
2400c802:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c804:	4871      	ldr	r0, [pc, #452]	; (2400c9cc <SDMMC_CmdStopTransfer+0x204>)
    sta_reg = SDMMCx->STA;
2400c806:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
2400c808:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c80a:	4202      	tst	r2, r0
2400c80c:	d001      	beq.n	2400c812 <SDMMC_CmdStopTransfer+0x4a>
2400c80e:	0492      	lsls	r2, r2, #18
2400c810:	d509      	bpl.n	2400c826 <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
2400c812:	1c5c      	adds	r4, r3, #1
2400c814:	d1f7      	bne.n	2400c806 <SDMMC_CmdStopTransfer+0x3e>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c816:	68cb      	ldr	r3, [r1, #12]
2400c818:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400c81c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c820:	60cb      	str	r3, [r1, #12]
}
2400c822:	bc30      	pop	{r4, r5}
2400c824:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c826:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400c828:	075b      	lsls	r3, r3, #29
2400c82a:	d452      	bmi.n	2400c8d2 <SDMMC_CmdStopTransfer+0x10a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c82c:	6b48      	ldr	r0, [r1, #52]	; 0x34
2400c82e:	f010 0001 	ands.w	r0, r0, #1
2400c832:	d13b      	bne.n	2400c8ac <SDMMC_CmdStopTransfer+0xe4>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c834:	4b66      	ldr	r3, [pc, #408]	; (2400c9d0 <SDMMC_CmdStopTransfer+0x208>)
2400c836:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c838:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c83a:	b2db      	uxtb	r3, r3
2400c83c:	2b0c      	cmp	r3, #12
2400c83e:	d142      	bne.n	2400c8c6 <SDMMC_CmdStopTransfer+0xfe>
  return (*(__IO uint32_t *) tmp);
2400c840:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c842:	4a64      	ldr	r2, [pc, #400]	; (2400c9d4 <SDMMC_CmdStopTransfer+0x20c>)
2400c844:	401a      	ands	r2, r3
2400c846:	2a00      	cmp	r2, #0
2400c848:	d037      	beq.n	2400c8ba <SDMMC_CmdStopTransfer+0xf2>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c84a:	2b00      	cmp	r3, #0
2400c84c:	db35      	blt.n	2400c8ba <SDMMC_CmdStopTransfer+0xf2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c84e:	005d      	lsls	r5, r3, #1
2400c850:	d446      	bmi.n	2400c8e0 <SDMMC_CmdStopTransfer+0x118>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c852:	009c      	lsls	r4, r3, #2
2400c854:	d44a      	bmi.n	2400c8ec <SDMMC_CmdStopTransfer+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c856:	00d8      	lsls	r0, r3, #3
2400c858:	d44e      	bmi.n	2400c8f8 <SDMMC_CmdStopTransfer+0x130>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c85a:	011a      	lsls	r2, r3, #4
2400c85c:	d453      	bmi.n	2400c906 <SDMMC_CmdStopTransfer+0x13e>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c85e:	015d      	lsls	r5, r3, #5
2400c860:	d458      	bmi.n	2400c914 <SDMMC_CmdStopTransfer+0x14c>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c862:	01dc      	lsls	r4, r3, #7
2400c864:	d464      	bmi.n	2400c930 <SDMMC_CmdStopTransfer+0x168>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c866:	0218      	lsls	r0, r3, #8
2400c868:	d45b      	bmi.n	2400c922 <SDMMC_CmdStopTransfer+0x15a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c86a:	025a      	lsls	r2, r3, #9
2400c86c:	d46e      	bmi.n	2400c94c <SDMMC_CmdStopTransfer+0x184>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c86e:	029d      	lsls	r5, r3, #10
2400c870:	d465      	bmi.n	2400c93e <SDMMC_CmdStopTransfer+0x176>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c872:	02dc      	lsls	r4, r3, #11
2400c874:	d47f      	bmi.n	2400c976 <SDMMC_CmdStopTransfer+0x1ae>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c876:	0358      	lsls	r0, r3, #13
2400c878:	d476      	bmi.n	2400c968 <SDMMC_CmdStopTransfer+0x1a0>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c87a:	039a      	lsls	r2, r3, #14
2400c87c:	d46d      	bmi.n	2400c95a <SDMMC_CmdStopTransfer+0x192>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c87e:	03dd      	lsls	r5, r3, #15
2400c880:	f100 8095 	bmi.w	2400c9ae <SDMMC_CmdStopTransfer+0x1e6>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c884:	041c      	lsls	r4, r3, #16
2400c886:	f100 8084 	bmi.w	2400c992 <SDMMC_CmdStopTransfer+0x1ca>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c88a:	0458      	lsls	r0, r3, #17
2400c88c:	d47a      	bmi.n	2400c984 <SDMMC_CmdStopTransfer+0x1bc>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c88e:	049a      	lsls	r2, r3, #18
2400c890:	f100 8086 	bmi.w	2400c9a0 <SDMMC_CmdStopTransfer+0x1d8>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
2400c894:	f013 0f08 	tst.w	r3, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c898:	68cb      	ldr	r3, [r1, #12]
2400c89a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
2400c89e:	bf14      	ite	ne
2400c8a0:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c8a4:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c8a8:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c8aa:	e7ba      	b.n	2400c822 <SDMMC_CmdStopTransfer+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c8ac:	2301      	movs	r3, #1
2400c8ae:	638b      	str	r3, [r1, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c8b0:	68cb      	ldr	r3, [r1, #12]
2400c8b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c8b6:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c8b8:	e7b3      	b.n	2400c822 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c8ba:	68cb      	ldr	r3, [r1, #12]
2400c8bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c8c0:	60cb      	str	r3, [r1, #12]
}
2400c8c2:	bc30      	pop	{r4, r5}
2400c8c4:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c8c6:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c8c8:	2001      	movs	r0, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c8ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c8ce:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c8d0:	e7a7      	b.n	2400c822 <SDMMC_CmdStopTransfer+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c8d2:	2004      	movs	r0, #4
2400c8d4:	6388      	str	r0, [r1, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c8d6:	68cb      	ldr	r3, [r1, #12]
2400c8d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c8dc:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c8de:	e7a0      	b.n	2400c822 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c8e0:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c8e2:	2040      	movs	r0, #64	; 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c8e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c8e8:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c8ea:	e79a      	b.n	2400c822 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c8ec:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c8ee:	2080      	movs	r0, #128	; 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c8f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c8f4:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c8f6:	e794      	b.n	2400c822 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c8f8:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c8fa:	f44f 7080 	mov.w	r0, #256	; 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c8fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c902:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c904:	e78d      	b.n	2400c822 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c906:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c908:	f44f 7000 	mov.w	r0, #512	; 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c90c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c910:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c912:	e786      	b.n	2400c822 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c914:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c916:	f44f 6080 	mov.w	r0, #1024	; 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c91a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c91e:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c920:	e77f      	b.n	2400c822 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c922:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c924:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c928:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c92c:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c92e:	e778      	b.n	2400c822 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c930:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c932:	f44f 6000 	mov.w	r0, #2048	; 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c93a:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c93c:	e771      	b.n	2400c822 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c93e:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c940:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c944:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c948:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c94a:	e76a      	b.n	2400c822 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c94c:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c94e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c952:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c956:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c958:	e763      	b.n	2400c822 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c95a:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c95c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c960:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c964:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c966:	e75c      	b.n	2400c822 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c968:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c96a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c96e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c972:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c974:	e755      	b.n	2400c822 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c976:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CC_ERR;
2400c978:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c97c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c980:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c982:	e74e      	b.n	2400c822 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c984:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c986:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c98a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c98e:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c990:	e747      	b.n	2400c822 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c992:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c994:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c998:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c99c:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c99e:	e740      	b.n	2400c822 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c9a0:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_RESET;
2400c9a2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c9a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c9aa:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c9ac:	e739      	b.n	2400c822 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c9ae:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c9b0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c9b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c9b8:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c9ba:	e732      	b.n	2400c822 <SDMMC_CmdStopTransfer+0x5a>
2400c9bc:	2000074c 	.word	0x2000074c
2400c9c0:	10624dd3 	.word	0x10624dd3
2400c9c4:	fffee0c0 	.word	0xfffee0c0
2400c9c8:	05f5e100 	.word	0x05f5e100
2400c9cc:	00200045 	.word	0x00200045
2400c9d0:	002000c5 	.word	0x002000c5
2400c9d4:	fdffe008 	.word	0xfdffe008

2400c9d8 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c9d8:	4a50      	ldr	r2, [pc, #320]	; (2400cb1c <SDMMC_CmdSelDesel+0x144>)
{
2400c9da:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c9dc:	4b50      	ldr	r3, [pc, #320]	; (2400cb20 <SDMMC_CmdSelDesel+0x148>)
2400c9de:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c9e0:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c9e4:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c9e8:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400c9ec:	484d      	ldr	r0, [pc, #308]	; (2400cb24 <SDMMC_CmdSelDesel+0x14c>)
2400c9ee:	f241 1307 	movw	r3, #4359	; 0x1107
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c9f2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c9f4:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c9f6:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c9fa:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c9fc:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ca00:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400ca04:	1e53      	subs	r3, r2, #1
2400ca06:	b14a      	cbz	r2, 2400ca1c <SDMMC_CmdSelDesel+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400ca08:	4947      	ldr	r1, [pc, #284]	; (2400cb28 <SDMMC_CmdSelDesel+0x150>)
    sta_reg = SDMMCx->STA;
2400ca0a:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400ca0e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400ca10:	420a      	tst	r2, r1
2400ca12:	d001      	beq.n	2400ca18 <SDMMC_CmdSelDesel+0x40>
2400ca14:	0492      	lsls	r2, r2, #18
2400ca16:	d504      	bpl.n	2400ca22 <SDMMC_CmdSelDesel+0x4a>
    if (count-- == 0U)
2400ca18:	1c58      	adds	r0, r3, #1
2400ca1a:	d1f6      	bne.n	2400ca0a <SDMMC_CmdSelDesel+0x32>
      return SDMMC_ERROR_TIMEOUT;
2400ca1c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400ca20:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400ca22:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400ca26:	0758      	lsls	r0, r3, #29
2400ca28:	d445      	bmi.n	2400cab6 <SDMMC_CmdSelDesel+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400ca2a:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400ca2e:	f010 0001 	ands.w	r0, r0, #1
2400ca32:	d137      	bne.n	2400caa4 <SDMMC_CmdSelDesel+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400ca34:	4b3d      	ldr	r3, [pc, #244]	; (2400cb2c <SDMMC_CmdSelDesel+0x154>)
2400ca36:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400ca3a:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400ca3e:	b2db      	uxtb	r3, r3
2400ca40:	2b07      	cmp	r3, #7
2400ca42:	d136      	bne.n	2400cab2 <SDMMC_CmdSelDesel+0xda>
  return (*(__IO uint32_t *) tmp);
2400ca44:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400ca48:	4839      	ldr	r0, [pc, #228]	; (2400cb30 <SDMMC_CmdSelDesel+0x158>)
2400ca4a:	4018      	ands	r0, r3
2400ca4c:	2800      	cmp	r0, #0
2400ca4e:	d02f      	beq.n	2400cab0 <SDMMC_CmdSelDesel+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400ca50:	2b00      	cmp	r3, #0
2400ca52:	db35      	blt.n	2400cac0 <SDMMC_CmdSelDesel+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400ca54:	0059      	lsls	r1, r3, #1
2400ca56:	d436      	bmi.n	2400cac6 <SDMMC_CmdSelDesel+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400ca58:	009a      	lsls	r2, r3, #2
2400ca5a:	d436      	bmi.n	2400caca <SDMMC_CmdSelDesel+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400ca5c:	00d9      	lsls	r1, r3, #3
2400ca5e:	d436      	bmi.n	2400cace <SDMMC_CmdSelDesel+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400ca60:	011a      	lsls	r2, r3, #4
2400ca62:	d437      	bmi.n	2400cad4 <SDMMC_CmdSelDesel+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400ca64:	0159      	lsls	r1, r3, #5
2400ca66:	d438      	bmi.n	2400cada <SDMMC_CmdSelDesel+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400ca68:	01da      	lsls	r2, r3, #7
2400ca6a:	d439      	bmi.n	2400cae0 <SDMMC_CmdSelDesel+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400ca6c:	0219      	lsls	r1, r3, #8
2400ca6e:	d43a      	bmi.n	2400cae6 <SDMMC_CmdSelDesel+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400ca70:	025a      	lsls	r2, r3, #9
2400ca72:	d43b      	bmi.n	2400caec <SDMMC_CmdSelDesel+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400ca74:	0299      	lsls	r1, r3, #10
2400ca76:	d445      	bmi.n	2400cb04 <SDMMC_CmdSelDesel+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400ca78:	02da      	lsls	r2, r3, #11
2400ca7a:	d440      	bmi.n	2400cafe <SDMMC_CmdSelDesel+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400ca7c:	0359      	lsls	r1, r3, #13
2400ca7e:	d43b      	bmi.n	2400caf8 <SDMMC_CmdSelDesel+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400ca80:	039a      	lsls	r2, r3, #14
2400ca82:	d436      	bmi.n	2400caf2 <SDMMC_CmdSelDesel+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400ca84:	03d9      	lsls	r1, r3, #15
2400ca86:	d446      	bmi.n	2400cb16 <SDMMC_CmdSelDesel+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400ca88:	041a      	lsls	r2, r3, #16
2400ca8a:	d441      	bmi.n	2400cb10 <SDMMC_CmdSelDesel+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400ca8c:	0459      	lsls	r1, r3, #17
2400ca8e:	d43c      	bmi.n	2400cb0a <SDMMC_CmdSelDesel+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400ca90:	049a      	lsls	r2, r3, #18
2400ca92:	d40b      	bmi.n	2400caac <SDMMC_CmdSelDesel+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400ca94:	f013 0f08 	tst.w	r3, #8
2400ca98:	bf14      	ite	ne
2400ca9a:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400ca9e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400caa2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400caa4:	2301      	movs	r3, #1
2400caa6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400caaa:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
2400caac:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
2400cab0:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400cab2:	2001      	movs	r0, #1
2400cab4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400cab6:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cab8:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400caba:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cabe:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400cac0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400cac4:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400cac6:	2040      	movs	r0, #64	; 0x40
2400cac8:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400caca:	2080      	movs	r0, #128	; 0x80
2400cacc:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400cace:	f44f 7080 	mov.w	r0, #256	; 0x100
2400cad2:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400cad4:	f44f 7000 	mov.w	r0, #512	; 0x200
2400cad8:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400cada:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400cade:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400cae0:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400cae4:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
2400cae6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400caea:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
2400caec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400caf0:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400caf2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400caf6:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400caf8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400cafc:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
2400cafe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400cb02:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400cb04:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400cb08:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400cb0a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400cb0e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400cb10:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400cb14:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400cb16:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400cb1a:	4770      	bx	lr
2400cb1c:	2000074c 	.word	0x2000074c
2400cb20:	10624dd3 	.word	0x10624dd3
2400cb24:	fffee0c0 	.word	0xfffee0c0
2400cb28:	00200045 	.word	0x00200045
2400cb2c:	002000c5 	.word	0x002000c5
2400cb30:	fdffe008 	.word	0xfdffe008

2400cb34 <SDMMC_CmdGoIdleState>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cb34:	4b11      	ldr	r3, [pc, #68]	; (2400cb7c <SDMMC_CmdGoIdleState+0x48>)
{
2400cb36:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cb38:	4a11      	ldr	r2, [pc, #68]	; (2400cb80 <SDMMC_CmdGoIdleState+0x4c>)
{
2400cb3a:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cb3c:	4c11      	ldr	r4, [pc, #68]	; (2400cb84 <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
2400cb3e:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cb40:	681b      	ldr	r3, [r3, #0]
  SDMMCx->ARG = Command->Argument;
2400cb42:	6085      	str	r5, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cb44:	fba4 4303 	umull	r4, r3, r4, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cb48:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cb4a:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cb4e:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cb50:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cb52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cb56:	fb00 f303 	mul.w	r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cb5a:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cb5c:	e002      	b.n	2400cb64 <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
2400cb5e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
2400cb60:	0612      	lsls	r2, r2, #24
2400cb62:	d405      	bmi.n	2400cb70 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
2400cb64:	3b01      	subs	r3, #1
2400cb66:	d2fa      	bcs.n	2400cb5e <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
2400cb68:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400cb6c:	bc30      	pop	{r4, r5}
2400cb6e:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400cb70:	4b05      	ldr	r3, [pc, #20]	; (2400cb88 <SDMMC_CmdGoIdleState+0x54>)

  return SDMMC_ERROR_NONE;
2400cb72:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400cb74:	638b      	str	r3, [r1, #56]	; 0x38
}
2400cb76:	bc30      	pop	{r4, r5}
2400cb78:	4770      	bx	lr
2400cb7a:	bf00      	nop
2400cb7c:	2000074c 	.word	0x2000074c
2400cb80:	fffee0c0 	.word	0xfffee0c0
2400cb84:	10624dd3 	.word	0x10624dd3
2400cb88:	002000c5 	.word	0x002000c5

2400cb8c <SDMMC_CmdOperCond>:
{
2400cb8c:	b410      	push	{r4}
2400cb8e:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
2400cb90:	f44f 74d5 	mov.w	r4, #426	; 0x1aa
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cb94:	4a1a      	ldr	r2, [pc, #104]	; (2400cc00 <SDMMC_CmdOperCond+0x74>)
2400cb96:	4b1b      	ldr	r3, [pc, #108]	; (2400cc04 <SDMMC_CmdOperCond+0x78>)
  SDMMCx->ARG = Command->Argument;
2400cb98:	608c      	str	r4, [r1, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cb9a:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cb9c:	68cc      	ldr	r4, [r1, #12]
2400cb9e:	481a      	ldr	r0, [pc, #104]	; (2400cc08 <SDMMC_CmdOperCond+0x7c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cba0:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cba4:	f241 1308 	movw	r3, #4360	; 0x1108
2400cba8:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cbaa:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cbac:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cbae:	f241 3088 	movw	r0, #5000	; 0x1388
2400cbb2:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cbb6:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
2400cbb8:	b14a      	cbz	r2, 2400cbce <SDMMC_CmdOperCond+0x42>
2400cbba:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400cbbc:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
2400cbbe:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400cbc0:	f012 0f45 	tst.w	r2, #69	; 0x45
2400cbc4:	d001      	beq.n	2400cbca <SDMMC_CmdOperCond+0x3e>
2400cbc6:	0490      	lsls	r0, r2, #18
2400cbc8:	d506      	bpl.n	2400cbd8 <SDMMC_CmdOperCond+0x4c>
    if (count-- == 0U)
2400cbca:	1c5c      	adds	r4, r3, #1
2400cbcc:	d1f6      	bne.n	2400cbbc <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
2400cbce:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400cbd2:	f85d 4b04 	ldr.w	r4, [sp], #4
2400cbd6:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400cbd8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400cbda:	075a      	lsls	r2, r3, #29
2400cbdc:	d40c      	bmi.n	2400cbf8 <SDMMC_CmdOperCond+0x6c>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400cbde:	6b48      	ldr	r0, [r1, #52]	; 0x34
2400cbe0:	f010 0001 	ands.w	r0, r0, #1
2400cbe4:	d105      	bne.n	2400cbf2 <SDMMC_CmdOperCond+0x66>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
2400cbe6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400cbe8:	065b      	lsls	r3, r3, #25
2400cbea:	d5f2      	bpl.n	2400cbd2 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
2400cbec:	2340      	movs	r3, #64	; 0x40
2400cbee:	638b      	str	r3, [r1, #56]	; 0x38
2400cbf0:	e7ef      	b.n	2400cbd2 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400cbf2:	2301      	movs	r3, #1
2400cbf4:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400cbf6:	e7ec      	b.n	2400cbd2 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400cbf8:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cbfa:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400cbfc:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cbfe:	e7e8      	b.n	2400cbd2 <SDMMC_CmdOperCond+0x46>
2400cc00:	2000074c 	.word	0x2000074c
2400cc04:	10624dd3 	.word	0x10624dd3
2400cc08:	fffee0c0 	.word	0xfffee0c0

2400cc0c <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cc0c:	4a50      	ldr	r2, [pc, #320]	; (2400cd50 <SDMMC_CmdAppCommand+0x144>)
{
2400cc0e:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cc10:	4b50      	ldr	r3, [pc, #320]	; (2400cd54 <SDMMC_CmdAppCommand+0x148>)
2400cc12:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400cc14:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cc18:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cc1c:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400cc20:	484d      	ldr	r0, [pc, #308]	; (2400cd58 <SDMMC_CmdAppCommand+0x14c>)
2400cc22:	f241 1337 	movw	r3, #4407	; 0x1137
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cc26:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cc28:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cc2a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cc2e:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cc30:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cc34:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400cc38:	1e53      	subs	r3, r2, #1
2400cc3a:	b14a      	cbz	r2, 2400cc50 <SDMMC_CmdAppCommand+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400cc3c:	4947      	ldr	r1, [pc, #284]	; (2400cd5c <SDMMC_CmdAppCommand+0x150>)
    sta_reg = SDMMCx->STA;
2400cc3e:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400cc42:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400cc44:	420a      	tst	r2, r1
2400cc46:	d001      	beq.n	2400cc4c <SDMMC_CmdAppCommand+0x40>
2400cc48:	0492      	lsls	r2, r2, #18
2400cc4a:	d504      	bpl.n	2400cc56 <SDMMC_CmdAppCommand+0x4a>
    if (count-- == 0U)
2400cc4c:	1c58      	adds	r0, r3, #1
2400cc4e:	d1f6      	bne.n	2400cc3e <SDMMC_CmdAppCommand+0x32>
      return SDMMC_ERROR_TIMEOUT;
2400cc50:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400cc54:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400cc56:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400cc5a:	0758      	lsls	r0, r3, #29
2400cc5c:	d445      	bmi.n	2400ccea <SDMMC_CmdAppCommand+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400cc5e:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400cc62:	f010 0001 	ands.w	r0, r0, #1
2400cc66:	d137      	bne.n	2400ccd8 <SDMMC_CmdAppCommand+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400cc68:	4b3d      	ldr	r3, [pc, #244]	; (2400cd60 <SDMMC_CmdAppCommand+0x154>)
2400cc6a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400cc6e:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400cc72:	b2db      	uxtb	r3, r3
2400cc74:	2b37      	cmp	r3, #55	; 0x37
2400cc76:	d136      	bne.n	2400cce6 <SDMMC_CmdAppCommand+0xda>
  return (*(__IO uint32_t *) tmp);
2400cc78:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400cc7c:	4839      	ldr	r0, [pc, #228]	; (2400cd64 <SDMMC_CmdAppCommand+0x158>)
2400cc7e:	4018      	ands	r0, r3
2400cc80:	2800      	cmp	r0, #0
2400cc82:	d02f      	beq.n	2400cce4 <SDMMC_CmdAppCommand+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400cc84:	2b00      	cmp	r3, #0
2400cc86:	db35      	blt.n	2400ccf4 <SDMMC_CmdAppCommand+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400cc88:	0059      	lsls	r1, r3, #1
2400cc8a:	d436      	bmi.n	2400ccfa <SDMMC_CmdAppCommand+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400cc8c:	009a      	lsls	r2, r3, #2
2400cc8e:	d436      	bmi.n	2400ccfe <SDMMC_CmdAppCommand+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400cc90:	00d9      	lsls	r1, r3, #3
2400cc92:	d436      	bmi.n	2400cd02 <SDMMC_CmdAppCommand+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400cc94:	011a      	lsls	r2, r3, #4
2400cc96:	d437      	bmi.n	2400cd08 <SDMMC_CmdAppCommand+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400cc98:	0159      	lsls	r1, r3, #5
2400cc9a:	d438      	bmi.n	2400cd0e <SDMMC_CmdAppCommand+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400cc9c:	01da      	lsls	r2, r3, #7
2400cc9e:	d439      	bmi.n	2400cd14 <SDMMC_CmdAppCommand+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400cca0:	0219      	lsls	r1, r3, #8
2400cca2:	d43a      	bmi.n	2400cd1a <SDMMC_CmdAppCommand+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400cca4:	025a      	lsls	r2, r3, #9
2400cca6:	d43b      	bmi.n	2400cd20 <SDMMC_CmdAppCommand+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400cca8:	0299      	lsls	r1, r3, #10
2400ccaa:	d445      	bmi.n	2400cd38 <SDMMC_CmdAppCommand+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400ccac:	02da      	lsls	r2, r3, #11
2400ccae:	d440      	bmi.n	2400cd32 <SDMMC_CmdAppCommand+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400ccb0:	0359      	lsls	r1, r3, #13
2400ccb2:	d43b      	bmi.n	2400cd2c <SDMMC_CmdAppCommand+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400ccb4:	039a      	lsls	r2, r3, #14
2400ccb6:	d436      	bmi.n	2400cd26 <SDMMC_CmdAppCommand+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400ccb8:	03d9      	lsls	r1, r3, #15
2400ccba:	d446      	bmi.n	2400cd4a <SDMMC_CmdAppCommand+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400ccbc:	041a      	lsls	r2, r3, #16
2400ccbe:	d441      	bmi.n	2400cd44 <SDMMC_CmdAppCommand+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400ccc0:	0459      	lsls	r1, r3, #17
2400ccc2:	d43c      	bmi.n	2400cd3e <SDMMC_CmdAppCommand+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400ccc4:	049a      	lsls	r2, r3, #18
2400ccc6:	d40b      	bmi.n	2400cce0 <SDMMC_CmdAppCommand+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400ccc8:	f013 0f08 	tst.w	r3, #8
2400cccc:	bf14      	ite	ne
2400ccce:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400ccd2:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400ccd6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400ccd8:	2301      	movs	r3, #1
2400ccda:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400ccde:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
2400cce0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
2400cce4:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400cce6:	2001      	movs	r0, #1
2400cce8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400ccea:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400ccec:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400ccee:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400ccf2:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400ccf4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400ccf8:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400ccfa:	2040      	movs	r0, #64	; 0x40
2400ccfc:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400ccfe:	2080      	movs	r0, #128	; 0x80
2400cd00:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400cd02:	f44f 7080 	mov.w	r0, #256	; 0x100
2400cd06:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400cd08:	f44f 7000 	mov.w	r0, #512	; 0x200
2400cd0c:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400cd0e:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400cd12:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400cd14:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400cd18:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
2400cd1a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400cd1e:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
2400cd20:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400cd24:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400cd26:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400cd2a:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400cd2c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400cd30:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
2400cd32:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400cd36:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400cd38:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400cd3c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400cd3e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400cd42:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400cd44:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400cd48:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400cd4a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400cd4e:	4770      	bx	lr
2400cd50:	2000074c 	.word	0x2000074c
2400cd54:	10624dd3 	.word	0x10624dd3
2400cd58:	fffee0c0 	.word	0xfffee0c0
2400cd5c:	00200045 	.word	0x00200045
2400cd60:	002000c5 	.word	0x002000c5
2400cd64:	fdffe008 	.word	0xfdffe008

2400cd68 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cd68:	4a19      	ldr	r2, [pc, #100]	; (2400cdd0 <SDMMC_CmdAppOperCommand+0x68>)
{
2400cd6a:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cd6c:	4b19      	ldr	r3, [pc, #100]	; (2400cdd4 <SDMMC_CmdAppOperCommand+0x6c>)
2400cd6e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400cd70:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cd74:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cd78:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400cd7c:	4816      	ldr	r0, [pc, #88]	; (2400cdd8 <SDMMC_CmdAppOperCommand+0x70>)
2400cd7e:	f241 1329 	movw	r3, #4393	; 0x1129
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cd82:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cd84:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cd86:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cd8a:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cd8c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cd90:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400cd94:	1e53      	subs	r3, r2, #1
2400cd96:	b14a      	cbz	r2, 2400cdac <SDMMC_CmdAppOperCommand+0x44>
    sta_reg = SDMMCx->STA;
2400cd98:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400cd9c:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400cd9e:	f012 0f45 	tst.w	r2, #69	; 0x45
2400cda2:	d001      	beq.n	2400cda8 <SDMMC_CmdAppOperCommand+0x40>
2400cda4:	0492      	lsls	r2, r2, #18
2400cda6:	d504      	bpl.n	2400cdb2 <SDMMC_CmdAppOperCommand+0x4a>
    if (count-- == 0U)
2400cda8:	1c59      	adds	r1, r3, #1
2400cdaa:	d1f5      	bne.n	2400cd98 <SDMMC_CmdAppOperCommand+0x30>
      return SDMMC_ERROR_TIMEOUT;
2400cdac:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400cdb0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400cdb2:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400cdb6:	f010 0004 	ands.w	r0, r0, #4
2400cdba:	d103      	bne.n	2400cdc4 <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400cdbc:	4b07      	ldr	r3, [pc, #28]	; (2400cddc <SDMMC_CmdAppOperCommand+0x74>)
2400cdbe:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
2400cdc2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400cdc4:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cdc6:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400cdc8:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cdcc:	4770      	bx	lr
2400cdce:	bf00      	nop
2400cdd0:	2000074c 	.word	0x2000074c
2400cdd4:	10624dd3 	.word	0x10624dd3
2400cdd8:	fffee0c0 	.word	0xfffee0c0
2400cddc:	002000c5 	.word	0x002000c5

2400cde0 <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cde0:	4a50      	ldr	r2, [pc, #320]	; (2400cf24 <SDMMC_CmdBusWidth+0x144>)
{
2400cde2:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cde4:	4b50      	ldr	r3, [pc, #320]	; (2400cf28 <SDMMC_CmdBusWidth+0x148>)
2400cde6:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400cde8:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cdec:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cdf0:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400cdf4:	484d      	ldr	r0, [pc, #308]	; (2400cf2c <SDMMC_CmdBusWidth+0x14c>)
2400cdf6:	f241 1306 	movw	r3, #4358	; 0x1106
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cdfa:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cdfc:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cdfe:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ce02:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ce04:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ce08:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400ce0c:	1e53      	subs	r3, r2, #1
2400ce0e:	b14a      	cbz	r2, 2400ce24 <SDMMC_CmdBusWidth+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400ce10:	4947      	ldr	r1, [pc, #284]	; (2400cf30 <SDMMC_CmdBusWidth+0x150>)
    sta_reg = SDMMCx->STA;
2400ce12:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400ce16:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400ce18:	420a      	tst	r2, r1
2400ce1a:	d001      	beq.n	2400ce20 <SDMMC_CmdBusWidth+0x40>
2400ce1c:	0492      	lsls	r2, r2, #18
2400ce1e:	d504      	bpl.n	2400ce2a <SDMMC_CmdBusWidth+0x4a>
    if (count-- == 0U)
2400ce20:	1c58      	adds	r0, r3, #1
2400ce22:	d1f6      	bne.n	2400ce12 <SDMMC_CmdBusWidth+0x32>
      return SDMMC_ERROR_TIMEOUT;
2400ce24:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400ce28:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400ce2a:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400ce2e:	0758      	lsls	r0, r3, #29
2400ce30:	d445      	bmi.n	2400cebe <SDMMC_CmdBusWidth+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400ce32:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400ce36:	f010 0001 	ands.w	r0, r0, #1
2400ce3a:	d137      	bne.n	2400ceac <SDMMC_CmdBusWidth+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400ce3c:	4b3d      	ldr	r3, [pc, #244]	; (2400cf34 <SDMMC_CmdBusWidth+0x154>)
2400ce3e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400ce42:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400ce46:	b2db      	uxtb	r3, r3
2400ce48:	2b06      	cmp	r3, #6
2400ce4a:	d136      	bne.n	2400ceba <SDMMC_CmdBusWidth+0xda>
  return (*(__IO uint32_t *) tmp);
2400ce4c:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400ce50:	4839      	ldr	r0, [pc, #228]	; (2400cf38 <SDMMC_CmdBusWidth+0x158>)
2400ce52:	4018      	ands	r0, r3
2400ce54:	2800      	cmp	r0, #0
2400ce56:	d02f      	beq.n	2400ceb8 <SDMMC_CmdBusWidth+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400ce58:	2b00      	cmp	r3, #0
2400ce5a:	db35      	blt.n	2400cec8 <SDMMC_CmdBusWidth+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400ce5c:	0059      	lsls	r1, r3, #1
2400ce5e:	d436      	bmi.n	2400cece <SDMMC_CmdBusWidth+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400ce60:	009a      	lsls	r2, r3, #2
2400ce62:	d436      	bmi.n	2400ced2 <SDMMC_CmdBusWidth+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400ce64:	00d9      	lsls	r1, r3, #3
2400ce66:	d436      	bmi.n	2400ced6 <SDMMC_CmdBusWidth+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400ce68:	011a      	lsls	r2, r3, #4
2400ce6a:	d437      	bmi.n	2400cedc <SDMMC_CmdBusWidth+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400ce6c:	0159      	lsls	r1, r3, #5
2400ce6e:	d438      	bmi.n	2400cee2 <SDMMC_CmdBusWidth+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400ce70:	01da      	lsls	r2, r3, #7
2400ce72:	d439      	bmi.n	2400cee8 <SDMMC_CmdBusWidth+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400ce74:	0219      	lsls	r1, r3, #8
2400ce76:	d43a      	bmi.n	2400ceee <SDMMC_CmdBusWidth+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400ce78:	025a      	lsls	r2, r3, #9
2400ce7a:	d43b      	bmi.n	2400cef4 <SDMMC_CmdBusWidth+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400ce7c:	0299      	lsls	r1, r3, #10
2400ce7e:	d445      	bmi.n	2400cf0c <SDMMC_CmdBusWidth+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400ce80:	02da      	lsls	r2, r3, #11
2400ce82:	d440      	bmi.n	2400cf06 <SDMMC_CmdBusWidth+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400ce84:	0359      	lsls	r1, r3, #13
2400ce86:	d43b      	bmi.n	2400cf00 <SDMMC_CmdBusWidth+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400ce88:	039a      	lsls	r2, r3, #14
2400ce8a:	d436      	bmi.n	2400cefa <SDMMC_CmdBusWidth+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400ce8c:	03d9      	lsls	r1, r3, #15
2400ce8e:	d446      	bmi.n	2400cf1e <SDMMC_CmdBusWidth+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400ce90:	041a      	lsls	r2, r3, #16
2400ce92:	d441      	bmi.n	2400cf18 <SDMMC_CmdBusWidth+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400ce94:	0459      	lsls	r1, r3, #17
2400ce96:	d43c      	bmi.n	2400cf12 <SDMMC_CmdBusWidth+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400ce98:	049a      	lsls	r2, r3, #18
2400ce9a:	d40b      	bmi.n	2400ceb4 <SDMMC_CmdBusWidth+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400ce9c:	f013 0f08 	tst.w	r3, #8
2400cea0:	bf14      	ite	ne
2400cea2:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400cea6:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400ceaa:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400ceac:	2301      	movs	r3, #1
2400ceae:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400ceb2:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
2400ceb4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
2400ceb8:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400ceba:	2001      	movs	r0, #1
2400cebc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400cebe:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cec0:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400cec2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cec6:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400cec8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400cecc:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400cece:	2040      	movs	r0, #64	; 0x40
2400ced0:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400ced2:	2080      	movs	r0, #128	; 0x80
2400ced4:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400ced6:	f44f 7080 	mov.w	r0, #256	; 0x100
2400ceda:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400cedc:	f44f 7000 	mov.w	r0, #512	; 0x200
2400cee0:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400cee2:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400cee6:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400cee8:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400ceec:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
2400ceee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400cef2:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
2400cef4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400cef8:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400cefa:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400cefe:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400cf00:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400cf04:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
2400cf06:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400cf0a:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400cf0c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400cf10:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400cf12:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400cf16:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400cf18:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400cf1c:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400cf1e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400cf22:	4770      	bx	lr
2400cf24:	2000074c 	.word	0x2000074c
2400cf28:	10624dd3 	.word	0x10624dd3
2400cf2c:	fffee0c0 	.word	0xfffee0c0
2400cf30:	00200045 	.word	0x00200045
2400cf34:	002000c5 	.word	0x002000c5
2400cf38:	fdffe008 	.word	0xfdffe008

2400cf3c <SDMMC_CmdSendSCR>:
{
2400cf3c:	b410      	push	{r4}
2400cf3e:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
2400cf40:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cf42:	4a4c      	ldr	r2, [pc, #304]	; (2400d074 <SDMMC_CmdSendSCR+0x138>)
2400cf44:	4b4c      	ldr	r3, [pc, #304]	; (2400d078 <SDMMC_CmdSendSCR+0x13c>)
  SDMMCx->ARG = Command->Argument;
2400cf46:	608c      	str	r4, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cf48:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cf4a:	68cc      	ldr	r4, [r1, #12]
2400cf4c:	484b      	ldr	r0, [pc, #300]	; (2400d07c <SDMMC_CmdSendSCR+0x140>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cf4e:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cf52:	f241 1333 	movw	r3, #4403	; 0x1133
2400cf56:	4020      	ands	r0, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cf58:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cf5a:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cf5c:	f241 3088 	movw	r0, #5000	; 0x1388
2400cf60:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cf64:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
2400cf66:	b14a      	cbz	r2, 2400cf7c <SDMMC_CmdSendSCR+0x40>
2400cf68:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400cf6a:	4845      	ldr	r0, [pc, #276]	; (2400d080 <SDMMC_CmdSendSCR+0x144>)
    sta_reg = SDMMCx->STA;
2400cf6c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
2400cf6e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400cf70:	4202      	tst	r2, r0
2400cf72:	d001      	beq.n	2400cf78 <SDMMC_CmdSendSCR+0x3c>
2400cf74:	0494      	lsls	r4, r2, #18
2400cf76:	d506      	bpl.n	2400cf86 <SDMMC_CmdSendSCR+0x4a>
    if (count-- == 0U)
2400cf78:	1c5a      	adds	r2, r3, #1
2400cf7a:	d1f7      	bne.n	2400cf6c <SDMMC_CmdSendSCR+0x30>
      return SDMMC_ERROR_TIMEOUT;
2400cf7c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400cf80:	f85d 4b04 	ldr.w	r4, [sp], #4
2400cf84:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400cf86:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400cf88:	0758      	lsls	r0, r3, #29
2400cf8a:	d43d      	bmi.n	2400d008 <SDMMC_CmdSendSCR+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400cf8c:	6b48      	ldr	r0, [r1, #52]	; 0x34
2400cf8e:	f010 0001 	ands.w	r0, r0, #1
2400cf92:	d134      	bne.n	2400cffe <SDMMC_CmdSendSCR+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400cf94:	4b3b      	ldr	r3, [pc, #236]	; (2400d084 <SDMMC_CmdSendSCR+0x148>)
2400cf96:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400cf98:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400cf9a:	b2db      	uxtb	r3, r3
2400cf9c:	2b33      	cmp	r3, #51	; 0x33
2400cf9e:	d131      	bne.n	2400d004 <SDMMC_CmdSendSCR+0xc8>
  return (*(__IO uint32_t *) tmp);
2400cfa0:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400cfa2:	4839      	ldr	r0, [pc, #228]	; (2400d088 <SDMMC_CmdSendSCR+0x14c>)
2400cfa4:	4018      	ands	r0, r3
2400cfa6:	2800      	cmp	r0, #0
2400cfa8:	d0ea      	beq.n	2400cf80 <SDMMC_CmdSendSCR+0x44>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400cfaa:	2b00      	cmp	r3, #0
2400cfac:	db30      	blt.n	2400d010 <SDMMC_CmdSendSCR+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400cfae:	005a      	lsls	r2, r3, #1
2400cfb0:	d431      	bmi.n	2400d016 <SDMMC_CmdSendSCR+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400cfb2:	009c      	lsls	r4, r3, #2
2400cfb4:	d431      	bmi.n	2400d01a <SDMMC_CmdSendSCR+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400cfb6:	00d9      	lsls	r1, r3, #3
2400cfb8:	d431      	bmi.n	2400d01e <SDMMC_CmdSendSCR+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400cfba:	011a      	lsls	r2, r3, #4
2400cfbc:	d432      	bmi.n	2400d024 <SDMMC_CmdSendSCR+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400cfbe:	015c      	lsls	r4, r3, #5
2400cfc0:	d433      	bmi.n	2400d02a <SDMMC_CmdSendSCR+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400cfc2:	01d9      	lsls	r1, r3, #7
2400cfc4:	d434      	bmi.n	2400d030 <SDMMC_CmdSendSCR+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400cfc6:	021a      	lsls	r2, r3, #8
2400cfc8:	d435      	bmi.n	2400d036 <SDMMC_CmdSendSCR+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400cfca:	025c      	lsls	r4, r3, #9
2400cfcc:	d436      	bmi.n	2400d03c <SDMMC_CmdSendSCR+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400cfce:	0299      	lsls	r1, r3, #10
2400cfd0:	d440      	bmi.n	2400d054 <SDMMC_CmdSendSCR+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400cfd2:	02da      	lsls	r2, r3, #11
2400cfd4:	d43b      	bmi.n	2400d04e <SDMMC_CmdSendSCR+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400cfd6:	035c      	lsls	r4, r3, #13
2400cfd8:	d436      	bmi.n	2400d048 <SDMMC_CmdSendSCR+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400cfda:	0399      	lsls	r1, r3, #14
2400cfdc:	d431      	bmi.n	2400d042 <SDMMC_CmdSendSCR+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400cfde:	03da      	lsls	r2, r3, #15
2400cfe0:	d444      	bmi.n	2400d06c <SDMMC_CmdSendSCR+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400cfe2:	041c      	lsls	r4, r3, #16
2400cfe4:	d43f      	bmi.n	2400d066 <SDMMC_CmdSendSCR+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400cfe6:	0459      	lsls	r1, r3, #17
2400cfe8:	d43a      	bmi.n	2400d060 <SDMMC_CmdSendSCR+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400cfea:	049a      	lsls	r2, r3, #18
2400cfec:	d435      	bmi.n	2400d05a <SDMMC_CmdSendSCR+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400cfee:	f013 0f08 	tst.w	r3, #8
2400cff2:	bf14      	ite	ne
2400cff4:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400cff8:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400cffc:	e7c0      	b.n	2400cf80 <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400cffe:	2301      	movs	r3, #1
2400d000:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d002:	e7bd      	b.n	2400cf80 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d004:	2001      	movs	r0, #1
2400d006:	e7bb      	b.n	2400cf80 <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d008:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d00a:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d00c:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d00e:	e7b7      	b.n	2400cf80 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400d010:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400d014:	e7b4      	b.n	2400cf80 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400d016:	2040      	movs	r0, #64	; 0x40
2400d018:	e7b2      	b.n	2400cf80 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400d01a:	2080      	movs	r0, #128	; 0x80
2400d01c:	e7b0      	b.n	2400cf80 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400d01e:	f44f 7080 	mov.w	r0, #256	; 0x100
2400d022:	e7ad      	b.n	2400cf80 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400d024:	f44f 7000 	mov.w	r0, #512	; 0x200
2400d028:	e7aa      	b.n	2400cf80 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400d02a:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400d02e:	e7a7      	b.n	2400cf80 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400d030:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400d034:	e7a4      	b.n	2400cf80 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400d036:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400d03a:	e7a1      	b.n	2400cf80 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400d03c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400d040:	e79e      	b.n	2400cf80 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400d042:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400d046:	e79b      	b.n	2400cf80 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400d048:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400d04c:	e798      	b.n	2400cf80 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CC_ERR;
2400d04e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400d052:	e795      	b.n	2400cf80 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400d054:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400d058:	e792      	b.n	2400cf80 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_RESET;
2400d05a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
2400d05e:	e78f      	b.n	2400cf80 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400d060:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400d064:	e78c      	b.n	2400cf80 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400d066:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400d06a:	e789      	b.n	2400cf80 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400d06c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400d070:	e786      	b.n	2400cf80 <SDMMC_CmdSendSCR+0x44>
2400d072:	bf00      	nop
2400d074:	2000074c 	.word	0x2000074c
2400d078:	10624dd3 	.word	0x10624dd3
2400d07c:	fffee0c0 	.word	0xfffee0c0
2400d080:	00200045 	.word	0x00200045
2400d084:	002000c5 	.word	0x002000c5
2400d088:	fdffe008 	.word	0xfdffe008

2400d08c <SDMMC_CmdSendCID>:
{
2400d08c:	b410      	push	{r4}
2400d08e:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
2400d090:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d092:	4a19      	ldr	r2, [pc, #100]	; (2400d0f8 <SDMMC_CmdSendCID+0x6c>)
2400d094:	4b19      	ldr	r3, [pc, #100]	; (2400d0fc <SDMMC_CmdSendCID+0x70>)
  SDMMCx->ARG = Command->Argument;
2400d096:	608c      	str	r4, [r1, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d098:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d09a:	68cc      	ldr	r4, [r1, #12]
2400d09c:	4818      	ldr	r0, [pc, #96]	; (2400d100 <SDMMC_CmdSendCID+0x74>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d09e:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d0a2:	f241 3302 	movw	r3, #4866	; 0x1302
2400d0a6:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d0a8:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d0aa:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d0ac:	f241 3088 	movw	r0, #5000	; 0x1388
2400d0b0:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d0b4:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
2400d0b6:	b14a      	cbz	r2, 2400d0cc <SDMMC_CmdSendCID+0x40>
2400d0b8:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400d0ba:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
2400d0bc:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400d0be:	f012 0f45 	tst.w	r2, #69	; 0x45
2400d0c2:	d001      	beq.n	2400d0c8 <SDMMC_CmdSendCID+0x3c>
2400d0c4:	0492      	lsls	r2, r2, #18
2400d0c6:	d506      	bpl.n	2400d0d6 <SDMMC_CmdSendCID+0x4a>
    if (count-- == 0U)
2400d0c8:	1c58      	adds	r0, r3, #1
2400d0ca:	d1f6      	bne.n	2400d0ba <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
2400d0cc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400d0d0:	f85d 4b04 	ldr.w	r4, [sp], #4
2400d0d4:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400d0d6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400d0d8:	075b      	lsls	r3, r3, #29
2400d0da:	d409      	bmi.n	2400d0f0 <SDMMC_CmdSendCID+0x64>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400d0dc:	6b48      	ldr	r0, [r1, #52]	; 0x34
2400d0de:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400d0e2:	bf14      	ite	ne
2400d0e4:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400d0e6:	4b07      	ldreq	r3, [pc, #28]	; (2400d104 <SDMMC_CmdSendCID+0x78>)
2400d0e8:	638b      	str	r3, [r1, #56]	; 0x38
}
2400d0ea:	f85d 4b04 	ldr.w	r4, [sp], #4
2400d0ee:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d0f0:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d0f2:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d0f4:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d0f6:	e7eb      	b.n	2400d0d0 <SDMMC_CmdSendCID+0x44>
2400d0f8:	2000074c 	.word	0x2000074c
2400d0fc:	10624dd3 	.word	0x10624dd3
2400d100:	fffee0c0 	.word	0xfffee0c0
2400d104:	002000c5 	.word	0x002000c5

2400d108 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d108:	4a1b      	ldr	r2, [pc, #108]	; (2400d178 <SDMMC_CmdSendCSD+0x70>)
{
2400d10a:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d10c:	4b1b      	ldr	r3, [pc, #108]	; (2400d17c <SDMMC_CmdSendCSD+0x74>)
2400d10e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400d110:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d114:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d118:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400d11c:	4818      	ldr	r0, [pc, #96]	; (2400d180 <SDMMC_CmdSendCSD+0x78>)
2400d11e:	f241 3309 	movw	r3, #4873	; 0x1309
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d122:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d124:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d126:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d12a:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d12c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d130:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400d134:	1e53      	subs	r3, r2, #1
2400d136:	b14a      	cbz	r2, 2400d14c <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
2400d138:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400d13c:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400d13e:	f012 0f45 	tst.w	r2, #69	; 0x45
2400d142:	d001      	beq.n	2400d148 <SDMMC_CmdSendCSD+0x40>
2400d144:	0492      	lsls	r2, r2, #18
2400d146:	d504      	bpl.n	2400d152 <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
2400d148:	1c59      	adds	r1, r3, #1
2400d14a:	d1f5      	bne.n	2400d138 <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
2400d14c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400d150:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400d152:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400d156:	075b      	lsls	r3, r3, #29
2400d158:	d409      	bmi.n	2400d16e <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400d15a:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400d15e:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400d162:	bf14      	ite	ne
2400d164:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400d166:	4b07      	ldreq	r3, [pc, #28]	; (2400d184 <SDMMC_CmdSendCSD+0x7c>)
2400d168:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
2400d16c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d16e:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d170:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d172:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d176:	4770      	bx	lr
2400d178:	2000074c 	.word	0x2000074c
2400d17c:	10624dd3 	.word	0x10624dd3
2400d180:	fffee0c0 	.word	0xfffee0c0
2400d184:	002000c5 	.word	0x002000c5

2400d188 <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
2400d188:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d18a:	4a2b      	ldr	r2, [pc, #172]	; (2400d238 <SDMMC_CmdSetRelAdd+0xb0>)
{
2400d18c:	4684      	mov	ip, r0
2400d18e:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
2400d190:	6083      	str	r3, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d192:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d194:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d196:	4829      	ldr	r0, [pc, #164]	; (2400d23c <SDMMC_CmdSetRelAdd+0xb4>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d198:	4c29      	ldr	r4, [pc, #164]	; (2400d240 <SDMMC_CmdSetRelAdd+0xb8>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d19a:	fba0 0202 	umull	r0, r2, r0, r2
2400d19e:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d1a2:	401c      	ands	r4, r3
2400d1a4:	f241 1303 	movw	r3, #4355	; 0x1103
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d1a8:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d1aa:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d1ac:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d1b0:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400d1b4:	b152      	cbz	r2, 2400d1cc <SDMMC_CmdSetRelAdd+0x44>
2400d1b6:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400d1b8:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400d1bc:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400d1be:	f012 0f45 	tst.w	r2, #69	; 0x45
2400d1c2:	d001      	beq.n	2400d1c8 <SDMMC_CmdSetRelAdd+0x40>
2400d1c4:	0494      	lsls	r4, r2, #18
2400d1c6:	d506      	bpl.n	2400d1d6 <SDMMC_CmdSetRelAdd+0x4e>
    if (count-- == 0U)
2400d1c8:	1c5a      	adds	r2, r3, #1
2400d1ca:	d1f5      	bne.n	2400d1b8 <SDMMC_CmdSetRelAdd+0x30>
      return SDMMC_ERROR_TIMEOUT;
2400d1cc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400d1d0:	f85d 4b04 	ldr.w	r4, [sp], #4
2400d1d4:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400d1d6:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400d1da:	0758      	lsls	r0, r3, #29
2400d1dc:	d421      	bmi.n	2400d222 <SDMMC_CmdSetRelAdd+0x9a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400d1de:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400d1e2:	f010 0001 	ands.w	r0, r0, #1
2400d1e6:	d116      	bne.n	2400d216 <SDMMC_CmdSetRelAdd+0x8e>
  return (uint8_t)(SDMMCx->RESPCMD);
2400d1e8:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400d1ec:	b2db      	uxtb	r3, r3
2400d1ee:	2b03      	cmp	r3, #3
2400d1f0:	d115      	bne.n	2400d21e <SDMMC_CmdSetRelAdd+0x96>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400d1f2:	4b14      	ldr	r3, [pc, #80]	; (2400d244 <SDMMC_CmdSetRelAdd+0xbc>)
2400d1f4:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
2400d1f8:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
2400d1fc:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
2400d200:	d017      	beq.n	2400d232 <SDMMC_CmdSetRelAdd+0xaa>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
2400d202:	045a      	lsls	r2, r3, #17
2400d204:	d412      	bmi.n	2400d22c <SDMMC_CmdSetRelAdd+0xa4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400d206:	f413 4f00 	tst.w	r3, #32768	; 0x8000
2400d20a:	bf14      	ite	ne
2400d20c:	f44f 5080 	movne.w	r0, #4096	; 0x1000
2400d210:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400d214:	e7dc      	b.n	2400d1d0 <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400d216:	2301      	movs	r3, #1
2400d218:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d21c:	e7d8      	b.n	2400d1d0 <SDMMC_CmdSetRelAdd+0x48>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d21e:	2001      	movs	r0, #1
2400d220:	e7d6      	b.n	2400d1d0 <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d222:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d224:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d226:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d22a:	e7d1      	b.n	2400d1d0 <SDMMC_CmdSetRelAdd+0x48>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400d22c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400d230:	e7ce      	b.n	2400d1d0 <SDMMC_CmdSetRelAdd+0x48>
    *pRCA = (uint16_t)(response_r1 >> 16);
2400d232:	0c1b      	lsrs	r3, r3, #16
2400d234:	800b      	strh	r3, [r1, #0]
    return SDMMC_ERROR_NONE;
2400d236:	e7cb      	b.n	2400d1d0 <SDMMC_CmdSetRelAdd+0x48>
2400d238:	2000074c 	.word	0x2000074c
2400d23c:	10624dd3 	.word	0x10624dd3
2400d240:	fffee0c0 	.word	0xfffee0c0
2400d244:	002000c5 	.word	0x002000c5

2400d248 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d248:	4a50      	ldr	r2, [pc, #320]	; (2400d38c <SDMMC_CmdSendStatus+0x144>)
{
2400d24a:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d24c:	4b50      	ldr	r3, [pc, #320]	; (2400d390 <SDMMC_CmdSendStatus+0x148>)
2400d24e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400d250:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d254:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d258:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400d25c:	484d      	ldr	r0, [pc, #308]	; (2400d394 <SDMMC_CmdSendStatus+0x14c>)
2400d25e:	f241 130d 	movw	r3, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d262:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d264:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d266:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d26a:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d26c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d270:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400d274:	1e53      	subs	r3, r2, #1
2400d276:	b14a      	cbz	r2, 2400d28c <SDMMC_CmdSendStatus+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400d278:	4947      	ldr	r1, [pc, #284]	; (2400d398 <SDMMC_CmdSendStatus+0x150>)
    sta_reg = SDMMCx->STA;
2400d27a:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400d27e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400d280:	420a      	tst	r2, r1
2400d282:	d001      	beq.n	2400d288 <SDMMC_CmdSendStatus+0x40>
2400d284:	0492      	lsls	r2, r2, #18
2400d286:	d504      	bpl.n	2400d292 <SDMMC_CmdSendStatus+0x4a>
    if (count-- == 0U)
2400d288:	1c58      	adds	r0, r3, #1
2400d28a:	d1f6      	bne.n	2400d27a <SDMMC_CmdSendStatus+0x32>
      return SDMMC_ERROR_TIMEOUT;
2400d28c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400d290:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400d292:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400d296:	0758      	lsls	r0, r3, #29
2400d298:	d445      	bmi.n	2400d326 <SDMMC_CmdSendStatus+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400d29a:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400d29e:	f010 0001 	ands.w	r0, r0, #1
2400d2a2:	d137      	bne.n	2400d314 <SDMMC_CmdSendStatus+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400d2a4:	4b3d      	ldr	r3, [pc, #244]	; (2400d39c <SDMMC_CmdSendStatus+0x154>)
2400d2a6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400d2aa:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400d2ae:	b2db      	uxtb	r3, r3
2400d2b0:	2b0d      	cmp	r3, #13
2400d2b2:	d136      	bne.n	2400d322 <SDMMC_CmdSendStatus+0xda>
  return (*(__IO uint32_t *) tmp);
2400d2b4:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400d2b8:	4839      	ldr	r0, [pc, #228]	; (2400d3a0 <SDMMC_CmdSendStatus+0x158>)
2400d2ba:	4018      	ands	r0, r3
2400d2bc:	2800      	cmp	r0, #0
2400d2be:	d02f      	beq.n	2400d320 <SDMMC_CmdSendStatus+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400d2c0:	2b00      	cmp	r3, #0
2400d2c2:	db35      	blt.n	2400d330 <SDMMC_CmdSendStatus+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400d2c4:	0059      	lsls	r1, r3, #1
2400d2c6:	d436      	bmi.n	2400d336 <SDMMC_CmdSendStatus+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400d2c8:	009a      	lsls	r2, r3, #2
2400d2ca:	d436      	bmi.n	2400d33a <SDMMC_CmdSendStatus+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400d2cc:	00d9      	lsls	r1, r3, #3
2400d2ce:	d436      	bmi.n	2400d33e <SDMMC_CmdSendStatus+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400d2d0:	011a      	lsls	r2, r3, #4
2400d2d2:	d437      	bmi.n	2400d344 <SDMMC_CmdSendStatus+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400d2d4:	0159      	lsls	r1, r3, #5
2400d2d6:	d438      	bmi.n	2400d34a <SDMMC_CmdSendStatus+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400d2d8:	01da      	lsls	r2, r3, #7
2400d2da:	d439      	bmi.n	2400d350 <SDMMC_CmdSendStatus+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400d2dc:	0219      	lsls	r1, r3, #8
2400d2de:	d43a      	bmi.n	2400d356 <SDMMC_CmdSendStatus+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400d2e0:	025a      	lsls	r2, r3, #9
2400d2e2:	d43b      	bmi.n	2400d35c <SDMMC_CmdSendStatus+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400d2e4:	0299      	lsls	r1, r3, #10
2400d2e6:	d445      	bmi.n	2400d374 <SDMMC_CmdSendStatus+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400d2e8:	02da      	lsls	r2, r3, #11
2400d2ea:	d440      	bmi.n	2400d36e <SDMMC_CmdSendStatus+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400d2ec:	0359      	lsls	r1, r3, #13
2400d2ee:	d43b      	bmi.n	2400d368 <SDMMC_CmdSendStatus+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400d2f0:	039a      	lsls	r2, r3, #14
2400d2f2:	d436      	bmi.n	2400d362 <SDMMC_CmdSendStatus+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400d2f4:	03d9      	lsls	r1, r3, #15
2400d2f6:	d446      	bmi.n	2400d386 <SDMMC_CmdSendStatus+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400d2f8:	041a      	lsls	r2, r3, #16
2400d2fa:	d441      	bmi.n	2400d380 <SDMMC_CmdSendStatus+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400d2fc:	0459      	lsls	r1, r3, #17
2400d2fe:	d43c      	bmi.n	2400d37a <SDMMC_CmdSendStatus+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400d300:	049a      	lsls	r2, r3, #18
2400d302:	d40b      	bmi.n	2400d31c <SDMMC_CmdSendStatus+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400d304:	f013 0f08 	tst.w	r3, #8
2400d308:	bf14      	ite	ne
2400d30a:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400d30e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400d312:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400d314:	2301      	movs	r3, #1
2400d316:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d31a:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
2400d31c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
2400d320:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d322:	2001      	movs	r0, #1
2400d324:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d326:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d328:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d32a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d32e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400d330:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400d334:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400d336:	2040      	movs	r0, #64	; 0x40
2400d338:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400d33a:	2080      	movs	r0, #128	; 0x80
2400d33c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400d33e:	f44f 7080 	mov.w	r0, #256	; 0x100
2400d342:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400d344:	f44f 7000 	mov.w	r0, #512	; 0x200
2400d348:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400d34a:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400d34e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400d350:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400d354:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
2400d356:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400d35a:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
2400d35c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400d360:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400d362:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400d366:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400d368:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400d36c:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
2400d36e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400d372:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400d374:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400d378:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400d37a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400d37e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400d380:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400d384:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400d386:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400d38a:	4770      	bx	lr
2400d38c:	2000074c 	.word	0x2000074c
2400d390:	10624dd3 	.word	0x10624dd3
2400d394:	fffee0c0 	.word	0xfffee0c0
2400d398:	00200045 	.word	0x00200045
2400d39c:	002000c5 	.word	0x002000c5
2400d3a0:	fdffe008 	.word	0xfdffe008

2400d3a4 <SDMMC_CmdStatusRegister>:
{
2400d3a4:	b410      	push	{r4}
2400d3a6:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
2400d3a8:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d3aa:	4a4c      	ldr	r2, [pc, #304]	; (2400d4dc <SDMMC_CmdStatusRegister+0x138>)
2400d3ac:	4b4c      	ldr	r3, [pc, #304]	; (2400d4e0 <SDMMC_CmdStatusRegister+0x13c>)
  SDMMCx->ARG = Command->Argument;
2400d3ae:	608c      	str	r4, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d3b0:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d3b2:	68cc      	ldr	r4, [r1, #12]
2400d3b4:	484b      	ldr	r0, [pc, #300]	; (2400d4e4 <SDMMC_CmdStatusRegister+0x140>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d3b6:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d3ba:	f241 130d 	movw	r3, #4365	; 0x110d
2400d3be:	4020      	ands	r0, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d3c0:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d3c2:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d3c4:	f241 3088 	movw	r0, #5000	; 0x1388
2400d3c8:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d3cc:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
2400d3ce:	b14a      	cbz	r2, 2400d3e4 <SDMMC_CmdStatusRegister+0x40>
2400d3d0:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400d3d2:	4845      	ldr	r0, [pc, #276]	; (2400d4e8 <SDMMC_CmdStatusRegister+0x144>)
    sta_reg = SDMMCx->STA;
2400d3d4:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
2400d3d6:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400d3d8:	4202      	tst	r2, r0
2400d3da:	d001      	beq.n	2400d3e0 <SDMMC_CmdStatusRegister+0x3c>
2400d3dc:	0494      	lsls	r4, r2, #18
2400d3de:	d506      	bpl.n	2400d3ee <SDMMC_CmdStatusRegister+0x4a>
    if (count-- == 0U)
2400d3e0:	1c5a      	adds	r2, r3, #1
2400d3e2:	d1f7      	bne.n	2400d3d4 <SDMMC_CmdStatusRegister+0x30>
      return SDMMC_ERROR_TIMEOUT;
2400d3e4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400d3e8:	f85d 4b04 	ldr.w	r4, [sp], #4
2400d3ec:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400d3ee:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400d3f0:	0758      	lsls	r0, r3, #29
2400d3f2:	d43d      	bmi.n	2400d470 <SDMMC_CmdStatusRegister+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400d3f4:	6b48      	ldr	r0, [r1, #52]	; 0x34
2400d3f6:	f010 0001 	ands.w	r0, r0, #1
2400d3fa:	d134      	bne.n	2400d466 <SDMMC_CmdStatusRegister+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400d3fc:	4b3b      	ldr	r3, [pc, #236]	; (2400d4ec <SDMMC_CmdStatusRegister+0x148>)
2400d3fe:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400d400:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400d402:	b2db      	uxtb	r3, r3
2400d404:	2b0d      	cmp	r3, #13
2400d406:	d131      	bne.n	2400d46c <SDMMC_CmdStatusRegister+0xc8>
  return (*(__IO uint32_t *) tmp);
2400d408:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400d40a:	4839      	ldr	r0, [pc, #228]	; (2400d4f0 <SDMMC_CmdStatusRegister+0x14c>)
2400d40c:	4018      	ands	r0, r3
2400d40e:	2800      	cmp	r0, #0
2400d410:	d0ea      	beq.n	2400d3e8 <SDMMC_CmdStatusRegister+0x44>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400d412:	2b00      	cmp	r3, #0
2400d414:	db30      	blt.n	2400d478 <SDMMC_CmdStatusRegister+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400d416:	005a      	lsls	r2, r3, #1
2400d418:	d431      	bmi.n	2400d47e <SDMMC_CmdStatusRegister+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400d41a:	009c      	lsls	r4, r3, #2
2400d41c:	d431      	bmi.n	2400d482 <SDMMC_CmdStatusRegister+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400d41e:	00d9      	lsls	r1, r3, #3
2400d420:	d431      	bmi.n	2400d486 <SDMMC_CmdStatusRegister+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400d422:	011a      	lsls	r2, r3, #4
2400d424:	d432      	bmi.n	2400d48c <SDMMC_CmdStatusRegister+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400d426:	015c      	lsls	r4, r3, #5
2400d428:	d433      	bmi.n	2400d492 <SDMMC_CmdStatusRegister+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400d42a:	01d9      	lsls	r1, r3, #7
2400d42c:	d434      	bmi.n	2400d498 <SDMMC_CmdStatusRegister+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400d42e:	021a      	lsls	r2, r3, #8
2400d430:	d435      	bmi.n	2400d49e <SDMMC_CmdStatusRegister+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400d432:	025c      	lsls	r4, r3, #9
2400d434:	d436      	bmi.n	2400d4a4 <SDMMC_CmdStatusRegister+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400d436:	0299      	lsls	r1, r3, #10
2400d438:	d440      	bmi.n	2400d4bc <SDMMC_CmdStatusRegister+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400d43a:	02da      	lsls	r2, r3, #11
2400d43c:	d43b      	bmi.n	2400d4b6 <SDMMC_CmdStatusRegister+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400d43e:	035c      	lsls	r4, r3, #13
2400d440:	d436      	bmi.n	2400d4b0 <SDMMC_CmdStatusRegister+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400d442:	0399      	lsls	r1, r3, #14
2400d444:	d431      	bmi.n	2400d4aa <SDMMC_CmdStatusRegister+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400d446:	03da      	lsls	r2, r3, #15
2400d448:	d444      	bmi.n	2400d4d4 <SDMMC_CmdStatusRegister+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400d44a:	041c      	lsls	r4, r3, #16
2400d44c:	d43f      	bmi.n	2400d4ce <SDMMC_CmdStatusRegister+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400d44e:	0459      	lsls	r1, r3, #17
2400d450:	d43a      	bmi.n	2400d4c8 <SDMMC_CmdStatusRegister+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400d452:	049a      	lsls	r2, r3, #18
2400d454:	d435      	bmi.n	2400d4c2 <SDMMC_CmdStatusRegister+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400d456:	f013 0f08 	tst.w	r3, #8
2400d45a:	bf14      	ite	ne
2400d45c:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400d460:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400d464:	e7c0      	b.n	2400d3e8 <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400d466:	2301      	movs	r3, #1
2400d468:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d46a:	e7bd      	b.n	2400d3e8 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d46c:	2001      	movs	r0, #1
2400d46e:	e7bb      	b.n	2400d3e8 <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d470:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d472:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d474:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d476:	e7b7      	b.n	2400d3e8 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400d478:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400d47c:	e7b4      	b.n	2400d3e8 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400d47e:	2040      	movs	r0, #64	; 0x40
2400d480:	e7b2      	b.n	2400d3e8 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400d482:	2080      	movs	r0, #128	; 0x80
2400d484:	e7b0      	b.n	2400d3e8 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400d486:	f44f 7080 	mov.w	r0, #256	; 0x100
2400d48a:	e7ad      	b.n	2400d3e8 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400d48c:	f44f 7000 	mov.w	r0, #512	; 0x200
2400d490:	e7aa      	b.n	2400d3e8 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400d492:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400d496:	e7a7      	b.n	2400d3e8 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400d498:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400d49c:	e7a4      	b.n	2400d3e8 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400d49e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400d4a2:	e7a1      	b.n	2400d3e8 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400d4a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400d4a8:	e79e      	b.n	2400d3e8 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400d4aa:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400d4ae:	e79b      	b.n	2400d3e8 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400d4b0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400d4b4:	e798      	b.n	2400d3e8 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CC_ERR;
2400d4b6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400d4ba:	e795      	b.n	2400d3e8 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400d4bc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400d4c0:	e792      	b.n	2400d3e8 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_RESET;
2400d4c2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
2400d4c6:	e78f      	b.n	2400d3e8 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400d4c8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400d4cc:	e78c      	b.n	2400d3e8 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400d4ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400d4d2:	e789      	b.n	2400d3e8 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400d4d4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400d4d8:	e786      	b.n	2400d3e8 <SDMMC_CmdStatusRegister+0x44>
2400d4da:	bf00      	nop
2400d4dc:	2000074c 	.word	0x2000074c
2400d4e0:	10624dd3 	.word	0x10624dd3
2400d4e4:	fffee0c0 	.word	0xfffee0c0
2400d4e8:	00200045 	.word	0x00200045
2400d4ec:	002000c5 	.word	0x002000c5
2400d4f0:	fdffe008 	.word	0xfdffe008

2400d4f4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
2400d4f4:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
2400d4f6:	4903      	ldr	r1, [pc, #12]	; (2400d504 <MX_FATFS_Init+0x10>)
2400d4f8:	4803      	ldr	r0, [pc, #12]	; (2400d508 <MX_FATFS_Init+0x14>)
2400d4fa:	f003 f81b 	bl	24010534 <FATFS_LinkDriver>
2400d4fe:	4b03      	ldr	r3, [pc, #12]	; (2400d50c <MX_FATFS_Init+0x18>)
2400d500:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
2400d502:	bd08      	pop	{r3, pc}
2400d504:	2001daf0 	.word	0x2001daf0
2400d508:	2401a160 	.word	0x2401a160
2400d50c:	2001daf4 	.word	0x2001daf4

2400d510 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
2400d510:	2000      	movs	r0, #0
2400d512:	4770      	bx	lr

2400d514 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
2400d514:	b510      	push	{r4, lr}
2400d516:	4694      	mov	ip, r2
2400d518:	b082      	sub	sp, #8
2400d51a:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
2400d51c:	460a      	mov	r2, r1
2400d51e:	4663      	mov	r3, ip
2400d520:	4601      	mov	r1, r0
2400d522:	9400      	str	r4, [sp, #0]
2400d524:	4803      	ldr	r0, [pc, #12]	; (2400d534 <BSP_SD_ReadBlocks+0x20>)
2400d526:	f7fd fa31 	bl	2400a98c <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
2400d52a:	3800      	subs	r0, #0
2400d52c:	bf18      	it	ne
2400d52e:	2001      	movne	r0, #1
2400d530:	b002      	add	sp, #8
2400d532:	bd10      	pop	{r4, pc}
2400d534:	2001d2f0 	.word	0x2001d2f0

2400d538 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
2400d538:	b510      	push	{r4, lr}
2400d53a:	4694      	mov	ip, r2
2400d53c:	b082      	sub	sp, #8
2400d53e:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
2400d540:	460a      	mov	r2, r1
2400d542:	4663      	mov	r3, ip
2400d544:	4601      	mov	r1, r0
2400d546:	9400      	str	r4, [sp, #0]
2400d548:	4803      	ldr	r0, [pc, #12]	; (2400d558 <BSP_SD_WriteBlocks+0x20>)
2400d54a:	f7fd fb0f 	bl	2400ab6c <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
2400d54e:	3800      	subs	r0, #0
2400d550:	bf18      	it	ne
2400d552:	2001      	movne	r0, #1
2400d554:	b002      	add	sp, #8
2400d556:	bd10      	pop	{r4, pc}
2400d558:	2001d2f0 	.word	0x2001d2f0

2400d55c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
2400d55c:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
2400d55e:	4803      	ldr	r0, [pc, #12]	; (2400d56c <BSP_SD_GetCardState+0x10>)
2400d560:	f7fd ff5c 	bl	2400b41c <HAL_SD_GetCardState>
}
2400d564:	3804      	subs	r0, #4
2400d566:	bf18      	it	ne
2400d568:	2001      	movne	r0, #1
2400d56a:	bd08      	pop	{r3, pc}
2400d56c:	2001d2f0 	.word	0x2001d2f0

2400d570 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
2400d570:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
2400d572:	4801      	ldr	r0, [pc, #4]	; (2400d578 <BSP_SD_GetCardInfo+0x8>)
2400d574:	f7fd be0c 	b.w	2400b190 <HAL_SD_GetCardInfo>
2400d578:	2001d2f0 	.word	0x2001d2f0

2400d57c <BSP_SD_Init>:
{
2400d57c:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
2400d57e:	f7f5 f93b 	bl	240027f8 <BSP_SD_IsDetected>
2400d582:	2801      	cmp	r0, #1
2400d584:	d001      	beq.n	2400d58a <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
2400d586:	2002      	movs	r0, #2
}
2400d588:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
2400d58a:	4807      	ldr	r0, [pc, #28]	; (2400d5a8 <BSP_SD_Init+0x2c>)
2400d58c:	f7fd fede 	bl	2400b34c <HAL_SD_Init>
  if (sd_state == MSD_OK)
2400d590:	2800      	cmp	r0, #0
2400d592:	d1f9      	bne.n	2400d588 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
2400d594:	f44f 4180 	mov.w	r1, #16384	; 0x4000
2400d598:	4803      	ldr	r0, [pc, #12]	; (2400d5a8 <BSP_SD_Init+0x2c>)
2400d59a:	f7fd fe0d 	bl	2400b1b8 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
2400d59e:	3800      	subs	r0, #0
2400d5a0:	bf18      	it	ne
2400d5a2:	2001      	movne	r0, #1
}
2400d5a4:	bd08      	pop	{r3, pc}
2400d5a6:	bf00      	nop
2400d5a8:	2001d2f0 	.word	0x2001d2f0

2400d5ac <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
2400d5ac:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
2400d5ae:	4c0a      	ldr	r4, [pc, #40]	; (2400d5d8 <SD_initialize+0x2c>)
2400d5b0:	2501      	movs	r5, #1
2400d5b2:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
2400d5b4:	f7ff ffe2 	bl	2400d57c <BSP_SD_Init>
2400d5b8:	b108      	cbz	r0, 2400d5be <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
2400d5ba:	7820      	ldrb	r0, [r4, #0]
}
2400d5bc:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
2400d5be:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
2400d5c0:	f7ff ffcc 	bl	2400d55c <BSP_SD_GetCardState>
2400d5c4:	b918      	cbnz	r0, 2400d5ce <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
2400d5c6:	7823      	ldrb	r3, [r4, #0]
2400d5c8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
2400d5cc:	7023      	strb	r3, [r4, #0]
  return Stat;
2400d5ce:	7823      	ldrb	r3, [r4, #0]
2400d5d0:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
2400d5d2:	7023      	strb	r3, [r4, #0]
  return Stat;
2400d5d4:	7820      	ldrb	r0, [r4, #0]
}
2400d5d6:	bd38      	pop	{r3, r4, r5, pc}
2400d5d8:	2000075c 	.word	0x2000075c

2400d5dc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
2400d5dc:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
2400d5de:	2301      	movs	r3, #1
2400d5e0:	4c05      	ldr	r4, [pc, #20]	; (2400d5f8 <SD_status+0x1c>)
2400d5e2:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
2400d5e4:	f7ff ffba 	bl	2400d55c <BSP_SD_GetCardState>
2400d5e8:	b918      	cbnz	r0, 2400d5f2 <SD_status+0x16>
    Stat &= ~STA_NOINIT;
2400d5ea:	7823      	ldrb	r3, [r4, #0]
2400d5ec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
2400d5f0:	7023      	strb	r3, [r4, #0]
  return Stat;
2400d5f2:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
2400d5f4:	bd10      	pop	{r4, pc}
2400d5f6:	bf00      	nop
2400d5f8:	2000075c 	.word	0x2000075c

2400d5fc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
2400d5fc:	b508      	push	{r3, lr}
2400d5fe:	4608      	mov	r0, r1
2400d600:	4611      	mov	r1, r2
2400d602:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
2400d604:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400d608:	f7ff ff84 	bl	2400d514 <BSP_SD_ReadBlocks>
2400d60c:	b108      	cbz	r0, 2400d612 <SD_read+0x16>
  DRESULT res = RES_ERROR;
2400d60e:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }

  return res;
}
2400d610:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
2400d612:	f7ff ffa3 	bl	2400d55c <BSP_SD_GetCardState>
2400d616:	2800      	cmp	r0, #0
2400d618:	d0fa      	beq.n	2400d610 <SD_read+0x14>
2400d61a:	f7ff ff9f 	bl	2400d55c <BSP_SD_GetCardState>
2400d61e:	2800      	cmp	r0, #0
2400d620:	d1f7      	bne.n	2400d612 <SD_read+0x16>
2400d622:	e7f5      	b.n	2400d610 <SD_read+0x14>

2400d624 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400d624:	4b18      	ldr	r3, [pc, #96]	; (2400d688 <SD_ioctl+0x64>)
{
2400d626:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400d628:	7818      	ldrb	r0, [r3, #0]
{
2400d62a:	b08b      	sub	sp, #44	; 0x2c
  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400d62c:	f010 0401 	ands.w	r4, r0, #1
2400d630:	d106      	bne.n	2400d640 <SD_ioctl+0x1c>
2400d632:	4615      	mov	r5, r2

  switch (cmd)
2400d634:	2903      	cmp	r1, #3
2400d636:	d824      	bhi.n	2400d682 <SD_ioctl+0x5e>
2400d638:	e8df f001 	tbb	[pc, r1]
2400d63c:	1a120a06 	.word	0x1a120a06
  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400d640:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
2400d642:	4620      	mov	r0, r4
2400d644:	b00b      	add	sp, #44	; 0x2c
2400d646:	bd30      	pop	{r4, r5, pc}
    res = RES_OK;
2400d648:	460c      	mov	r4, r1
}
2400d64a:	4620      	mov	r0, r4
2400d64c:	b00b      	add	sp, #44	; 0x2c
2400d64e:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
2400d650:	a801      	add	r0, sp, #4
2400d652:	f7ff ff8d 	bl	2400d570 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
2400d656:	9b07      	ldr	r3, [sp, #28]
}
2400d658:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockNbr;
2400d65a:	602b      	str	r3, [r5, #0]
}
2400d65c:	b00b      	add	sp, #44	; 0x2c
2400d65e:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
2400d660:	a801      	add	r0, sp, #4
2400d662:	f7ff ff85 	bl	2400d570 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
2400d666:	9b08      	ldr	r3, [sp, #32]
}
2400d668:	4620      	mov	r0, r4
    *(WORD*)buff = CardInfo.LogBlockSize;
2400d66a:	802b      	strh	r3, [r5, #0]
}
2400d66c:	b00b      	add	sp, #44	; 0x2c
2400d66e:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
2400d670:	a801      	add	r0, sp, #4
2400d672:	f7ff ff7d 	bl	2400d570 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
2400d676:	9b08      	ldr	r3, [sp, #32]
}
2400d678:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
2400d67a:	0a5b      	lsrs	r3, r3, #9
2400d67c:	602b      	str	r3, [r5, #0]
}
2400d67e:	b00b      	add	sp, #44	; 0x2c
2400d680:	bd30      	pop	{r4, r5, pc}
  switch (cmd)
2400d682:	2404      	movs	r4, #4
2400d684:	e7dd      	b.n	2400d642 <SD_ioctl+0x1e>
2400d686:	bf00      	nop
2400d688:	2000075c 	.word	0x2000075c

2400d68c <SD_write>:
{
2400d68c:	b508      	push	{r3, lr}
2400d68e:	4608      	mov	r0, r1
2400d690:	4611      	mov	r1, r2
2400d692:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
2400d694:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400d698:	f7ff ff4e 	bl	2400d538 <BSP_SD_WriteBlocks>
2400d69c:	b108      	cbz	r0, 2400d6a2 <SD_write+0x16>
  DRESULT res = RES_ERROR;
2400d69e:	2001      	movs	r0, #1
}
2400d6a0:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
2400d6a2:	f7ff ff5b 	bl	2400d55c <BSP_SD_GetCardState>
2400d6a6:	2800      	cmp	r0, #0
2400d6a8:	d0fa      	beq.n	2400d6a0 <SD_write+0x14>
2400d6aa:	f7ff ff57 	bl	2400d55c <BSP_SD_GetCardState>
2400d6ae:	2800      	cmp	r0, #0
2400d6b0:	d1f7      	bne.n	2400d6a2 <SD_write+0x16>
2400d6b2:	e7f5      	b.n	2400d6a0 <SD_write+0x14>

2400d6b4 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
2400d6b4:	4b03      	ldr	r3, [pc, #12]	; (2400d6c4 <disk_status+0x10>)
2400d6b6:	eb03 0280 	add.w	r2, r3, r0, lsl #2
2400d6ba:	4418      	add	r0, r3
2400d6bc:	6853      	ldr	r3, [r2, #4]
2400d6be:	7a00      	ldrb	r0, [r0, #8]
2400d6c0:	685b      	ldr	r3, [r3, #4]
2400d6c2:	4718      	bx	r3
2400d6c4:	2001dd20 	.word	0x2001dd20

2400d6c8 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
2400d6c8:	4b07      	ldr	r3, [pc, #28]	; (2400d6e8 <disk_initialize+0x20>)
2400d6ca:	5c1a      	ldrb	r2, [r3, r0]
2400d6cc:	b952      	cbnz	r2, 2400d6e4 <disk_initialize+0x1c>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
2400d6ce:	eb03 0280 	add.w	r2, r3, r0, lsl #2
2400d6d2:	1819      	adds	r1, r3, r0
    disk.is_initialized[pdrv] = 1;
2400d6d4:	f04f 0c01 	mov.w	ip, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
2400d6d8:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
2400d6da:	f803 c000 	strb.w	ip, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
2400d6de:	7a08      	ldrb	r0, [r1, #8]
2400d6e0:	6813      	ldr	r3, [r2, #0]
2400d6e2:	4718      	bx	r3
  }
  return stat;
}
2400d6e4:	2000      	movs	r0, #0
2400d6e6:	4770      	bx	lr
2400d6e8:	2001dd20 	.word	0x2001dd20

2400d6ec <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
2400d6ec:	b410      	push	{r4}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
2400d6ee:	4c06      	ldr	r4, [pc, #24]	; (2400d708 <disk_read+0x1c>)
2400d6f0:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
2400d6f4:	4420      	add	r0, r4
2400d6f6:	f8dc 4004 	ldr.w	r4, [ip, #4]
2400d6fa:	7a00      	ldrb	r0, [r0, #8]
2400d6fc:	68a4      	ldr	r4, [r4, #8]
2400d6fe:	46a4      	mov	ip, r4
  return res;
}
2400d700:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
2400d704:	4760      	bx	ip
2400d706:	bf00      	nop
2400d708:	2001dd20 	.word	0x2001dd20

2400d70c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
2400d70c:	b410      	push	{r4}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
2400d70e:	4c06      	ldr	r4, [pc, #24]	; (2400d728 <disk_write+0x1c>)
2400d710:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
2400d714:	4420      	add	r0, r4
2400d716:	f8dc 4004 	ldr.w	r4, [ip, #4]
2400d71a:	7a00      	ldrb	r0, [r0, #8]
2400d71c:	68e4      	ldr	r4, [r4, #12]
2400d71e:	46a4      	mov	ip, r4
  return res;
}
2400d720:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
2400d724:	4760      	bx	ip
2400d726:	bf00      	nop
2400d728:	2001dd20 	.word	0x2001dd20

2400d72c <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
2400d72c:	4b04      	ldr	r3, [pc, #16]	; (2400d740 <disk_ioctl+0x14>)
2400d72e:	eb03 0c00 	add.w	ip, r3, r0
2400d732:	eb03 0080 	add.w	r0, r3, r0, lsl #2
2400d736:	6843      	ldr	r3, [r0, #4]
2400d738:	f89c 0008 	ldrb.w	r0, [ip, #8]
2400d73c:	691b      	ldr	r3, [r3, #16]
2400d73e:	4718      	bx	r3
2400d740:	2001dd20 	.word	0x2001dd20

2400d744 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
2400d744:	4b2a      	ldr	r3, [pc, #168]	; (2400d7f0 <inc_lock+0xac>)
{
2400d746:	4684      	mov	ip, r0
2400d748:	b470      	push	{r4, r5, r6}
		if (Files[i].fs == dp->obj.fs &&
2400d74a:	681a      	ldr	r2, [r3, #0]
2400d74c:	6804      	ldr	r4, [r0, #0]
2400d74e:	4294      	cmp	r4, r2
2400d750:	d01c      	beq.n	2400d78c <inc_lock+0x48>
2400d752:	6918      	ldr	r0, [r3, #16]
2400d754:	42a0      	cmp	r0, r4
2400d756:	d005      	beq.n	2400d764 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400d758:	b372      	cbz	r2, 2400d7b8 <inc_lock+0x74>
2400d75a:	2800      	cmp	r0, #0
2400d75c:	d044      	beq.n	2400d7e8 <inc_lock+0xa4>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
2400d75e:	2000      	movs	r0, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
2400d760:	bc70      	pop	{r4, r5, r6}
2400d762:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
2400d764:	695d      	ldr	r5, [r3, #20]
2400d766:	f8dc 6008 	ldr.w	r6, [ip, #8]
2400d76a:	42b5      	cmp	r5, r6
2400d76c:	d1f4      	bne.n	2400d758 <inc_lock+0x14>
			Files[i].clu == dp->obj.sclust &&
2400d76e:	f8dc 5014 	ldr.w	r5, [ip, #20]
2400d772:	699e      	ldr	r6, [r3, #24]
2400d774:	42ae      	cmp	r6, r5
2400d776:	d1ef      	bne.n	2400d758 <inc_lock+0x14>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
2400d778:	2201      	movs	r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400d77a:	b999      	cbnz	r1, 2400d7a4 <inc_lock+0x60>
2400d77c:	eb03 1402 	add.w	r4, r3, r2, lsl #4
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
2400d780:	1c50      	adds	r0, r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400d782:	0111      	lsls	r1, r2, #4
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400d784:	89a2      	ldrh	r2, [r4, #12]
2400d786:	3201      	adds	r2, #1
2400d788:	b292      	uxth	r2, r2
2400d78a:	e029      	b.n	2400d7e0 <inc_lock+0x9c>
		if (Files[i].fs == dp->obj.fs &&
2400d78c:	6880      	ldr	r0, [r0, #8]
2400d78e:	685d      	ldr	r5, [r3, #4]
2400d790:	4285      	cmp	r5, r0
2400d792:	d1de      	bne.n	2400d752 <inc_lock+0xe>
			Files[i].clu == dp->obj.sclust &&
2400d794:	f8dc 5014 	ldr.w	r5, [ip, #20]
2400d798:	6898      	ldr	r0, [r3, #8]
2400d79a:	4285      	cmp	r5, r0
2400d79c:	d1d9      	bne.n	2400d752 <inc_lock+0xe>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
2400d79e:	2200      	movs	r2, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400d7a0:	2900      	cmp	r1, #0
2400d7a2:	d0eb      	beq.n	2400d77c <inc_lock+0x38>
2400d7a4:	eb03 1002 	add.w	r0, r3, r2, lsl #4
2400d7a8:	0111      	lsls	r1, r2, #4
2400d7aa:	8980      	ldrh	r0, [r0, #12]
2400d7ac:	2800      	cmp	r0, #0
2400d7ae:	d1d6      	bne.n	2400d75e <inc_lock+0x1a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
2400d7b0:	1c50      	adds	r0, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400d7b2:	f44f 7280 	mov.w	r2, #256	; 0x100
2400d7b6:	e013      	b.n	2400d7e0 <inc_lock+0x9c>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400d7b8:	2001      	movs	r0, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400d7ba:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
2400d7bc:	ea4f 1102 	mov.w	r1, r2, lsl #4
2400d7c0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
2400d7c4:	505c      	str	r4, [r3, r1]
		Files[i].clu = dp->obj.sclust;
2400d7c6:	f8dc 4014 	ldr.w	r4, [ip, #20]
2400d7ca:	f8dc 5008 	ldr.w	r5, [ip, #8]
2400d7ce:	e9c2 5401 	strd	r5, r4, [r2, #4]
		Files[i].ctr = 0;
2400d7d2:	f04f 0400 	mov.w	r4, #0
2400d7d6:	8194      	strh	r4, [r2, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400d7d8:	bf14      	ite	ne
2400d7da:	f44f 7280 	movne.w	r2, #256	; 0x100
2400d7de:	2201      	moveq	r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400d7e0:	440b      	add	r3, r1
2400d7e2:	819a      	strh	r2, [r3, #12]
}
2400d7e4:	bc70      	pop	{r4, r5, r6}
2400d7e6:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400d7e8:	2002      	movs	r0, #2
2400d7ea:	2201      	movs	r2, #1
2400d7ec:	e7e5      	b.n	2400d7ba <inc_lock+0x76>
2400d7ee:	bf00      	nop
2400d7f0:	2001dafc 	.word	0x2001dafc

2400d7f4 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
2400d7f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2400d7f8:	440a      	add	r2, r1
2400d7fa:	460d      	mov	r5, r1
2400d7fc:	4606      	mov	r6, r0
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400d7fe:	4f37      	ldr	r7, [pc, #220]	; (2400d8dc <pattern_matching+0xe8>)
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
2400d800:	42aa      	cmp	r2, r5
2400d802:	d012      	beq.n	2400d82a <pattern_matching+0x36>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400d804:	f815 cb01 	ldrb.w	ip, [r5], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400d808:	f1ac 0161 	sub.w	r1, ip, #97	; 0x61
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400d80c:	eb07 000c 	add.w	r0, r7, ip
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400d810:	fa1f f48c 	uxth.w	r4, ip
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400d814:	2919      	cmp	r1, #25
2400d816:	d9f3      	bls.n	2400d800 <pattern_matching+0xc>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400d818:	2c7f      	cmp	r4, #127	; 0x7f
2400d81a:	bf88      	it	hi
2400d81c:	f810 4c80 	ldrbhi.w	r4, [r0, #-128]
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
2400d820:	2c00      	cmp	r4, #0
2400d822:	d1ed      	bne.n	2400d800 <pattern_matching+0xc>
2400d824:	2000      	movs	r0, #0
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
2400d826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!*pat && inf) return 1;		/* (short circuit) */
2400d82a:	1e1f      	subs	r7, r3, #0
2400d82c:	f896 8000 	ldrb.w	r8, [r6]
2400d830:	bf18      	it	ne
2400d832:	2701      	movne	r7, #1
2400d834:	f1b8 0f00 	cmp.w	r8, #0
2400d838:	d100      	bne.n	2400d83c <pattern_matching+0x48>
2400d83a:	bb8f      	cbnz	r7, 2400d8a0 <pattern_matching+0xac>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400d83c:	4c27      	ldr	r4, [pc, #156]	; (2400d8dc <pattern_matching+0xe8>)
		pp = pat; np = nam;			/* Top of pattern and name to match */
2400d83e:	4630      	mov	r0, r6
{
2400d840:	4643      	mov	r3, r8
		pp = pat; np = nam;			/* Top of pattern and name to match */
2400d842:	46a9      	mov	r9, r5
2400d844:	e010      	b.n	2400d868 <pattern_matching+0x74>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400d846:	3a20      	subs	r2, #32
2400d848:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400d84a:	f819 1b01 	ldrb.w	r1, [r9], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400d84e:	f1a1 0c61 	sub.w	ip, r1, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400d852:	b28b      	uxth	r3, r1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400d854:	f1bc 0f19 	cmp.w	ip, #25
2400d858:	d815      	bhi.n	2400d886 <pattern_matching+0x92>
2400d85a:	3b20      	subs	r3, #32
2400d85c:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
2400d85e:	4293      	cmp	r3, r2
2400d860:	d118      	bne.n	2400d894 <pattern_matching+0xa0>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
2400d862:	b1eb      	cbz	r3, 2400d8a0 <pattern_matching+0xac>
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
2400d864:	f810 3f01 	ldrb.w	r3, [r0, #1]!
2400d868:	2b3f      	cmp	r3, #63	; 0x3f
2400d86a:	d01c      	beq.n	2400d8a6 <pattern_matching+0xb2>
2400d86c:	2b2a      	cmp	r3, #42	; 0x2a
2400d86e:	d01a      	beq.n	2400d8a6 <pattern_matching+0xb2>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400d870:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400d874:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400d876:	2919      	cmp	r1, #25
2400d878:	d9e5      	bls.n	2400d846 <pattern_matching+0x52>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400d87a:	2a7f      	cmp	r2, #127	; 0x7f
2400d87c:	d9e5      	bls.n	2400d84a <pattern_matching+0x56>
2400d87e:	4423      	add	r3, r4
2400d880:	f813 2c80 	ldrb.w	r2, [r3, #-128]
2400d884:	e7e1      	b.n	2400d84a <pattern_matching+0x56>
2400d886:	2b7f      	cmp	r3, #127	; 0x7f
2400d888:	d9e9      	bls.n	2400d85e <pattern_matching+0x6a>
2400d88a:	4421      	add	r1, r4
2400d88c:	f811 3c80 	ldrb.w	r3, [r1, #-128]
			if (pc != nc) break;	/* Branch mismatched? */
2400d890:	4293      	cmp	r3, r2
2400d892:	d0e6      	beq.n	2400d862 <pattern_matching+0x6e>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400d894:	3501      	adds	r5, #1
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
2400d896:	2b00      	cmp	r3, #0
2400d898:	d0c4      	beq.n	2400d824 <pattern_matching+0x30>
2400d89a:	2f00      	cmp	r7, #0
2400d89c:	d1cf      	bne.n	2400d83e <pattern_matching+0x4a>
2400d89e:	e7c1      	b.n	2400d824 <pattern_matching+0x30>
	if (!*pat && inf) return 1;		/* (short circuit) */
2400d8a0:	2001      	movs	r0, #1
}
2400d8a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2400d8a6:	4601      	mov	r1, r0
				nm = nx = 0;
2400d8a8:	2300      	movs	r3, #0
2400d8aa:	f811 cb01 	ldrb.w	ip, [r1], #1
2400d8ae:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
2400d8b0:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
2400d8b4:	4608      	mov	r0, r1
				} while (*pp == '?' || *pp == '*');
2400d8b6:	f811 cb01 	ldrb.w	ip, [r1], #1
					if (*pp++ == '?') nm++; else nx = 1;
2400d8ba:	bf0c      	ite	eq
2400d8bc:	3201      	addeq	r2, #1
2400d8be:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
2400d8c0:	f1bc 0f2a 	cmp.w	ip, #42	; 0x2a
2400d8c4:	d0f4      	beq.n	2400d8b0 <pattern_matching+0xbc>
2400d8c6:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
2400d8ca:	d0f1      	beq.n	2400d8b0 <pattern_matching+0xbc>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
2400d8cc:	4649      	mov	r1, r9
2400d8ce:	f7ff ff91 	bl	2400d7f4 <pattern_matching>
2400d8d2:	2800      	cmp	r0, #0
2400d8d4:	d1e4      	bne.n	2400d8a0 <pattern_matching+0xac>
				nc = *np; break;	/* Branch mismatched */
2400d8d6:	f899 3000 	ldrb.w	r3, [r9]
2400d8da:	e7db      	b.n	2400d894 <pattern_matching+0xa0>
2400d8dc:	2401a188 	.word	0x2401a188

2400d8e0 <get_fileinfo>:
	fno->fname[0] = 0;		/* Invaidate file info */
2400d8e0:	2300      	movs	r3, #0
{
2400d8e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
2400d8e6:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
2400d8ea:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
2400d8ec:	69c2      	ldr	r2, [r0, #28]
2400d8ee:	2a00      	cmp	r2, #0
2400d8f0:	d063      	beq.n	2400d9ba <get_fileinfo+0xda>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
2400d8f2:	6b02      	ldr	r2, [r0, #48]	; 0x30
2400d8f4:	4604      	mov	r4, r0
2400d8f6:	460d      	mov	r5, r1
2400d8f8:	3201      	adds	r2, #1
2400d8fa:	d01f      	beq.n	2400d93c <get_fileinfo+0x5c>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2400d8fc:	f8d8 300c 	ldr.w	r3, [r8, #12]
2400d900:	8818      	ldrh	r0, [r3, #0]
2400d902:	2800      	cmp	r0, #0
2400d904:	d063      	beq.n	2400d9ce <get_fileinfo+0xee>
2400d906:	f101 0715 	add.w	r7, r1, #21
2400d90a:	2601      	movs	r6, #1
2400d90c:	e000      	b.n	2400d910 <get_fileinfo+0x30>
2400d90e:	461e      	mov	r6, r3
				w = ff_convert(w, 0);		/* Unicode -> OEM */
2400d910:	2100      	movs	r1, #0
2400d912:	f002 fe35 	bl	24010580 <ff_convert>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2400d916:	1c73      	adds	r3, r6, #1
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
2400d918:	2800      	cmp	r0, #0
2400d91a:	d058      	beq.n	2400d9ce <get_fileinfo+0xee>
2400d91c:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
2400d920:	d055      	beq.n	2400d9ce <get_fileinfo+0xee>
				fno->fname[i++] = (TCHAR)w;
2400d922:	f807 0f01 	strb.w	r0, [r7, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2400d926:	f8d8 200c 	ldr.w	r2, [r8, #12]
2400d92a:	f832 0016 	ldrh.w	r0, [r2, r6, lsl #1]
2400d92e:	2800      	cmp	r0, #0
2400d930:	d1ed      	bne.n	2400d90e <get_fileinfo+0x2e>
			fno->fname[i] = 0;	/* Terminate the LFN */
2400d932:	442e      	add	r6, r5
2400d934:	2300      	movs	r3, #0
2400d936:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
2400d938:	7da8      	ldrb	r0, [r5, #22]
2400d93a:	e000      	b.n	2400d93e <get_fileinfo+0x5e>
2400d93c:	4618      	mov	r0, r3
	i = j = 0;
2400d93e:	f04f 0c00 	mov.w	ip, #0
			fno->altname[j++] = '.';
2400d942:	272e      	movs	r7, #46	; 0x2e
	i = j = 0;
2400d944:	4662      	mov	r2, ip
		c = (TCHAR)dp->dir[i++];
2400d946:	6a21      	ldr	r1, [r4, #32]
2400d948:	5c8b      	ldrb	r3, [r1, r2]
2400d94a:	3201      	adds	r2, #1
		if (c == ' ') continue;				/* Skip padding spaces */
2400d94c:	2b20      	cmp	r3, #32
2400d94e:	d01b      	beq.n	2400d988 <get_fileinfo+0xa8>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
2400d950:	2b05      	cmp	r3, #5
2400d952:	bf08      	it	eq
2400d954:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
2400d956:	2a09      	cmp	r2, #9
2400d958:	d031      	beq.n	2400d9be <get_fileinfo+0xde>
		fno->altname[j] = c;
2400d95a:	eb05 010c 	add.w	r1, r5, ip
2400d95e:	724b      	strb	r3, [r1, #9]
		if (!lfv) {
2400d960:	b980      	cbnz	r0, 2400d984 <get_fileinfo+0xa4>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
2400d962:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
2400d966:	2e19      	cmp	r6, #25
2400d968:	d80b      	bhi.n	2400d982 <get_fileinfo+0xa2>
2400d96a:	6a26      	ldr	r6, [r4, #32]
2400d96c:	2a08      	cmp	r2, #8
2400d96e:	f896 e00c 	ldrb.w	lr, [r6, #12]
2400d972:	bf8c      	ite	hi
2400d974:	2610      	movhi	r6, #16
2400d976:	2608      	movls	r6, #8
2400d978:	ea1e 0f06 	tst.w	lr, r6
2400d97c:	d001      	beq.n	2400d982 <get_fileinfo+0xa2>
				c += 0x20;			/* To lower */
2400d97e:	3320      	adds	r3, #32
2400d980:	b2db      	uxtb	r3, r3
			fno->fname[j] = c;
2400d982:	758b      	strb	r3, [r1, #22]
		j++;
2400d984:	f10c 0c01 	add.w	ip, ip, #1
	while (i < 11) {		/* Copy name body and extension */
2400d988:	2a0b      	cmp	r2, #11
2400d98a:	d1dc      	bne.n	2400d946 <get_fileinfo+0x66>
		fno->fname[j] = 0;
2400d98c:	eb05 010c 	add.w	r1, r5, ip
	if (!lfv) {
2400d990:	b928      	cbnz	r0, 2400d99e <get_fileinfo+0xbe>
		fno->fname[j] = 0;
2400d992:	7588      	strb	r0, [r1, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
2400d994:	6a23      	ldr	r3, [r4, #32]
2400d996:	7b1b      	ldrb	r3, [r3, #12]
2400d998:	2b00      	cmp	r3, #0
2400d99a:	bf08      	it	eq
2400d99c:	4629      	moveq	r1, r5
	fno->altname[j] = 0;	/* Terminate the SFN */
2400d99e:	2300      	movs	r3, #0
2400d9a0:	724b      	strb	r3, [r1, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
2400d9a2:	6a23      	ldr	r3, [r4, #32]
2400d9a4:	7adb      	ldrb	r3, [r3, #11]
2400d9a6:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[0];
2400d9a8:	6a23      	ldr	r3, [r4, #32]
2400d9aa:	69db      	ldr	r3, [r3, #28]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
2400d9ac:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[0];
2400d9ae:	6a23      	ldr	r3, [r4, #32]
2400d9b0:	f8d3 3016 	ldr.w	r3, [r3, #22]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
2400d9b4:	0c1a      	lsrs	r2, r3, #16
2400d9b6:	80eb      	strh	r3, [r5, #6]
2400d9b8:	80aa      	strh	r2, [r5, #4]
}
2400d9ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!lfv) fno->fname[j] = '.';
2400d9be:	eb05 010c 	add.w	r1, r5, ip
2400d9c2:	b900      	cbnz	r0, 2400d9c6 <get_fileinfo+0xe6>
2400d9c4:	758f      	strb	r7, [r1, #22]
			fno->altname[j++] = '.';
2400d9c6:	f10c 0c01 	add.w	ip, ip, #1
2400d9ca:	724f      	strb	r7, [r1, #9]
2400d9cc:	e7c5      	b.n	2400d95a <get_fileinfo+0x7a>
			i = j = 0;
2400d9ce:	2600      	movs	r6, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
2400d9d0:	2300      	movs	r3, #0
2400d9d2:	442e      	add	r6, r5
2400d9d4:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
2400d9d6:	7da8      	ldrb	r0, [r5, #22]
2400d9d8:	e7b1      	b.n	2400d93e <get_fileinfo+0x5e>
2400d9da:	bf00      	nop

2400d9dc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
2400d9dc:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
2400d9de:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
2400d9e2:	2300      	movs	r3, #0
{
2400d9e4:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d9e6:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
2400d9e8:	70c3      	strb	r3, [r0, #3]
2400d9ea:	6306      	str	r6, [r0, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d9ec:	d00c      	beq.n	2400da08 <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400d9ee:	460d      	mov	r5, r1
2400d9f0:	460a      	mov	r2, r1
2400d9f2:	2301      	movs	r3, #1
2400d9f4:	f100 0134 	add.w	r1, r0, #52	; 0x34
2400d9f8:	7840      	ldrb	r0, [r0, #1]
2400d9fa:	f7ff fe77 	bl	2400d6ec <disk_read>
2400d9fe:	b110      	cbz	r0, 2400da06 <check_fs+0x2a>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
2400da00:	2004      	movs	r0, #4
			fs->winsect = sector;
2400da02:	6326      	str	r6, [r4, #48]	; 0x30
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
2400da04:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
2400da06:	6325      	str	r5, [r4, #48]	; 0x30
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
2400da08:	f64a 2355 	movw	r3, #43605	; 0xaa55
2400da0c:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
2400da10:	429a      	cmp	r2, r3
2400da12:	d11a      	bne.n	2400da4a <check_fs+0x6e>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
2400da14:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
2400da18:	2be9      	cmp	r3, #233	; 0xe9
2400da1a:	d007      	beq.n	2400da2c <check_fs+0x50>
2400da1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400da1e:	4a0d      	ldr	r2, [pc, #52]	; (2400da54 <check_fs+0x78>)
2400da20:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
2400da24:	4293      	cmp	r3, r2
2400da26:	d001      	beq.n	2400da2c <check_fs+0x50>
	return 2;
2400da28:	2002      	movs	r0, #2
}
2400da2a:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
2400da2c:	f8d4 306a 	ldr.w	r3, [r4, #106]	; 0x6a
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
2400da30:	4a09      	ldr	r2, [pc, #36]	; (2400da58 <check_fs+0x7c>)
2400da32:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
2400da36:	4293      	cmp	r3, r2
2400da38:	d009      	beq.n	2400da4e <check_fs+0x72>
	rv = rv << 8 | ptr[0];
2400da3a:	f8d4 0086 	ldr.w	r0, [r4, #134]	; 0x86
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
2400da3e:	4b07      	ldr	r3, [pc, #28]	; (2400da5c <check_fs+0x80>)
2400da40:	1ac0      	subs	r0, r0, r3
2400da42:	bf18      	it	ne
2400da44:	2001      	movne	r0, #1
2400da46:	0040      	lsls	r0, r0, #1
}
2400da48:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
2400da4a:	2003      	movs	r0, #3
}
2400da4c:	bd70      	pop	{r4, r5, r6, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
2400da4e:	2000      	movs	r0, #0
}
2400da50:	bd70      	pop	{r4, r5, r6, pc}
2400da52:	bf00      	nop
2400da54:	009000eb 	.word	0x009000eb
2400da58:	00544146 	.word	0x00544146
2400da5c:	33544146 	.word	0x33544146

2400da60 <move_window>:
{
2400da60:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
2400da62:	6b06      	ldr	r6, [r0, #48]	; 0x30
{
2400da64:	b083      	sub	sp, #12
	if (sector != fs->winsect) {	/* Window offset changed? */
2400da66:	428e      	cmp	r6, r1
2400da68:	d024      	beq.n	2400dab4 <move_window+0x54>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400da6a:	78c3      	ldrb	r3, [r0, #3]
2400da6c:	460d      	mov	r5, r1
2400da6e:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400da70:	f100 0134 	add.w	r1, r0, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400da74:	b963      	cbnz	r3, 2400da90 <move_window+0x30>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400da76:	2301      	movs	r3, #1
2400da78:	462a      	mov	r2, r5
2400da7a:	7860      	ldrb	r0, [r4, #1]
2400da7c:	f7ff fe36 	bl	2400d6ec <disk_read>
2400da80:	b910      	cbnz	r0, 2400da88 <move_window+0x28>
			fs->winsect = sector;
2400da82:	6325      	str	r5, [r4, #48]	; 0x30
}
2400da84:	b003      	add	sp, #12
2400da86:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = FR_DISK_ERR;
2400da88:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
2400da8a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
2400da8e:	e7f8      	b.n	2400da82 <move_window+0x22>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400da90:	2301      	movs	r3, #1
2400da92:	4632      	mov	r2, r6
2400da94:	7840      	ldrb	r0, [r0, #1]
2400da96:	9101      	str	r1, [sp, #4]
2400da98:	f7ff fe38 	bl	2400d70c <disk_write>
2400da9c:	b9d0      	cbnz	r0, 2400dad4 <move_window+0x74>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400da9e:	6a62      	ldr	r2, [r4, #36]	; 0x24
2400daa0:	69e3      	ldr	r3, [r4, #28]
2400daa2:	1ab2      	subs	r2, r6, r2
2400daa4:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
2400daa6:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400daa8:	429a      	cmp	r2, r3
2400daaa:	d2e4      	bcs.n	2400da76 <move_window+0x16>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400daac:	78a7      	ldrb	r7, [r4, #2]
2400daae:	2f01      	cmp	r7, #1
2400dab0:	d804      	bhi.n	2400dabc <move_window+0x5c>
2400dab2:	e7e0      	b.n	2400da76 <move_window+0x16>
	FRESULT res = FR_OK;
2400dab4:	2000      	movs	r0, #0
}
2400dab6:	b003      	add	sp, #12
2400dab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					wsect += fs->fsize;
2400daba:	69e3      	ldr	r3, [r4, #28]
2400dabc:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400dabe:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400dac0:	2301      	movs	r3, #1
2400dac2:	7860      	ldrb	r0, [r4, #1]
2400dac4:	4632      	mov	r2, r6
2400dac6:	9101      	str	r1, [sp, #4]
2400dac8:	f7ff fe20 	bl	2400d70c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400dacc:	2f01      	cmp	r7, #1
2400dace:	9901      	ldr	r1, [sp, #4]
2400dad0:	d1f3      	bne.n	2400daba <move_window+0x5a>
2400dad2:	e7d0      	b.n	2400da76 <move_window+0x16>
			res = FR_DISK_ERR;
2400dad4:	2001      	movs	r0, #1
}
2400dad6:	b003      	add	sp, #12
2400dad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
2400dada:	bf00      	nop

2400dadc <find_volume>:
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
2400dadc:	2300      	movs	r3, #0
{
2400dade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*rfs = 0;
2400dae2:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
2400dae4:	6804      	ldr	r4, [r0, #0]
2400dae6:	b18c      	cbz	r4, 2400db0c <find_volume+0x30>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400dae8:	7825      	ldrb	r5, [r4, #0]
2400daea:	2d1f      	cmp	r5, #31
2400daec:	d912      	bls.n	2400db14 <find_volume+0x38>
2400daee:	2d3a      	cmp	r5, #58	; 0x3a
2400daf0:	d010      	beq.n	2400db14 <find_volume+0x38>
2400daf2:	46a4      	mov	ip, r4
2400daf4:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
2400daf8:	2b1f      	cmp	r3, #31
2400dafa:	d90d      	bls.n	2400db18 <find_volume+0x3c>
2400dafc:	2b3a      	cmp	r3, #58	; 0x3a
2400dafe:	d1f9      	bne.n	2400daf4 <find_volume+0x18>
			i = *tp++ - '0';
2400db00:	3401      	adds	r4, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
2400db02:	45a4      	cmp	ip, r4
2400db04:	d102      	bne.n	2400db0c <find_volume+0x30>
2400db06:	2d30      	cmp	r5, #48	; 0x30
2400db08:	f000 80da 	beq.w	2400dcc0 <find_volume+0x1e4>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
2400db0c:	240b      	movs	r4, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
2400db0e:	4620      	mov	r0, r4
2400db10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400db14:	462b      	mov	r3, r5
2400db16:	46a4      	mov	ip, r4
		if (*tt == ':') {	/* If a ':' is exist in the path name */
2400db18:	2b3a      	cmp	r3, #58	; 0x3a
2400db1a:	d0f1      	beq.n	2400db00 <find_volume+0x24>
	fs = FatFs[vol];					/* Get pointer to the file system object */
2400db1c:	4ba3      	ldr	r3, [pc, #652]	; (2400ddac <find_volume+0x2d0>)
2400db1e:	681d      	ldr	r5, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
2400db20:	2d00      	cmp	r5, #0
2400db22:	f000 80c9 	beq.w	2400dcb8 <find_volume+0x1dc>
	*rfs = fs;							/* Return pointer to the file system object */
2400db26:	600d      	str	r5, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
2400db28:	f002 04fe 	and.w	r4, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
2400db2c:	782b      	ldrb	r3, [r5, #0]
2400db2e:	b17b      	cbz	r3, 2400db50 <find_volume+0x74>
		stat = disk_status(fs->drv);
2400db30:	7868      	ldrb	r0, [r5, #1]
2400db32:	f7ff fdbf 	bl	2400d6b4 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
2400db36:	07c1      	lsls	r1, r0, #31
2400db38:	d40a      	bmi.n	2400db50 <find_volume+0x74>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
2400db3a:	2c00      	cmp	r4, #0
2400db3c:	f000 80ab 	beq.w	2400dc96 <find_volume+0x1ba>
2400db40:	f010 0404 	ands.w	r4, r0, #4
2400db44:	f000 80a7 	beq.w	2400dc96 <find_volume+0x1ba>
				return FR_WRITE_PROTECTED;
2400db48:	240a      	movs	r4, #10
}
2400db4a:	4620      	mov	r0, r4
2400db4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
2400db50:	2000      	movs	r0, #0
2400db52:	8028      	strh	r0, [r5, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
2400db54:	f7ff fdb8 	bl	2400d6c8 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
2400db58:	07c2      	lsls	r2, r0, #31
2400db5a:	f100 809f 	bmi.w	2400dc9c <find_volume+0x1c0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
2400db5e:	b10c      	cbz	r4, 2400db64 <find_volume+0x88>
2400db60:	0743      	lsls	r3, r0, #29
2400db62:	d4f1      	bmi.n	2400db48 <find_volume+0x6c>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
2400db64:	2100      	movs	r1, #0
2400db66:	4628      	mov	r0, r5
2400db68:	f7ff ff38 	bl	2400d9dc <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
2400db6c:	2802      	cmp	r0, #2
2400db6e:	d077      	beq.n	2400dc60 <find_volume+0x184>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
2400db70:	2804      	cmp	r0, #4
2400db72:	f000 809f 	beq.w	2400dcb4 <find_volume+0x1d8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
2400db76:	2801      	cmp	r0, #1
2400db78:	f200 808c 	bhi.w	2400dc94 <find_volume+0x1b8>
	bsect = 0;
2400db7c:	2400      	movs	r4, #0
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
2400db7e:	f8b5 303f 	ldrh.w	r3, [r5, #63]	; 0x3f
2400db82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2400db86:	f040 8085 	bne.w	2400dc94 <find_volume+0x1b8>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
2400db8a:	f8b5 204a 	ldrh.w	r2, [r5, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
2400db8e:	b902      	cbnz	r2, 2400db92 <find_volume+0xb6>
	rv = rv << 8 | ptr[0];
2400db90:	6daa      	ldr	r2, [r5, #88]	; 0x58
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
2400db92:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		fs->fsize = fasize;
2400db96:	61ea      	str	r2, [r5, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
2400db98:	1e59      	subs	r1, r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
2400db9a:	70ab      	strb	r3, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
2400db9c:	2901      	cmp	r1, #1
2400db9e:	d879      	bhi.n	2400dc94 <find_volume+0x1b8>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
2400dba0:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
2400dba4:	b288      	uxth	r0, r1
2400dba6:	8168      	strh	r0, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
2400dba8:	2800      	cmp	r0, #0
2400dbaa:	d073      	beq.n	2400dc94 <find_volume+0x1b8>
2400dbac:	1e48      	subs	r0, r1, #1
2400dbae:	4208      	tst	r0, r1
2400dbb0:	d170      	bne.n	2400dc94 <find_volume+0x1b8>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
2400dbb2:	f8b5 c045 	ldrh.w	ip, [r5, #69]	; 0x45
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
2400dbb6:	f01c 0f0f 	tst.w	ip, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
2400dbba:	f8a5 c008 	strh.w	ip, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
2400dbbe:	d169      	bne.n	2400dc94 <find_volume+0x1b8>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
2400dbc0:	f8b5 0047 	ldrh.w	r0, [r5, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
2400dbc4:	b900      	cbnz	r0, 2400dbc8 <find_volume+0xec>
	rv = rv << 8 | ptr[0];
2400dbc6:	6d68      	ldr	r0, [r5, #84]	; 0x54
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
2400dbc8:	f8b5 7042 	ldrh.w	r7, [r5, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
2400dbcc:	2f00      	cmp	r7, #0
2400dbce:	d061      	beq.n	2400dc94 <find_volume+0x1b8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
2400dbd0:	fb02 f303 	mul.w	r3, r2, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
2400dbd4:	eb07 161c 	add.w	r6, r7, ip, lsr #4
2400dbd8:	441e      	add	r6, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
2400dbda:	42b0      	cmp	r0, r6
2400dbdc:	d35a      	bcc.n	2400dc94 <find_volume+0x1b8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
2400dbde:	eba0 0e06 	sub.w	lr, r0, r6
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
2400dbe2:	458e      	cmp	lr, r1
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
2400dbe4:	fbbe f0f1 	udiv	r0, lr, r1
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
2400dbe8:	d354      	bcc.n	2400dc94 <find_volume+0x1b8>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
2400dbea:	f64f 71f5 	movw	r1, #65525	; 0xfff5
2400dbee:	4288      	cmp	r0, r1
2400dbf0:	f200 8084 	bhi.w	2400dcfc <find_volume+0x220>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
2400dbf4:	f640 71f5 	movw	r1, #4085	; 0xff5
2400dbf8:	4288      	cmp	r0, r1
2400dbfa:	f200 80a3 	bhi.w	2400dd44 <find_volume+0x268>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400dbfe:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400dc00:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
2400dc02:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
2400dc04:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400dc06:	61a8      	str	r0, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
2400dc08:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400dc0a:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
2400dc0c:	f1bc 0f00 	cmp.w	ip, #0
2400dc10:	d040      	beq.n	2400dc94 <find_volume+0x1b8>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2400dc12:	eb00 0140 	add.w	r1, r0, r0, lsl #1
2400dc16:	f000 0001 	and.w	r0, r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400dc1a:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2400dc1c:	eb00 0151 	add.w	r1, r0, r1, lsr #1
2400dc20:	2001      	movs	r0, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400dc22:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400dc26:	62ab      	str	r3, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400dc28:	ebb2 2f51 	cmp.w	r2, r1, lsr #9
2400dc2c:	d332      	bcc.n	2400dc94 <find_volume+0x1b8>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400dc2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
2400dc32:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400dc34:	e9c5 3304 	strd	r3, r3, [r5, #16]
		fs->fsi_flag = 0x80;
2400dc38:	712a      	strb	r2, [r5, #4]
	fs->id = ++Fsid;		/* File system mount ID */
2400dc3a:	495d      	ldr	r1, [pc, #372]	; (2400ddb0 <find_volume+0x2d4>)
	fs->fs_type = fmt;		/* FAT sub-type */
2400dc3c:	7028      	strb	r0, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
2400dc3e:	880b      	ldrh	r3, [r1, #0]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
2400dc40:	485c      	ldr	r0, [pc, #368]	; (2400ddb4 <find_volume+0x2d8>)
		if (Files[i].fs == fs) Files[i].fs = 0;
2400dc42:	4a5d      	ldr	r2, [pc, #372]	; (2400ddb8 <find_volume+0x2dc>)
	fs->id = ++Fsid;		/* File system mount ID */
2400dc44:	3301      	adds	r3, #1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
2400dc46:	60e8      	str	r0, [r5, #12]
		if (Files[i].fs == fs) Files[i].fs = 0;
2400dc48:	6810      	ldr	r0, [r2, #0]
	fs->id = ++Fsid;		/* File system mount ID */
2400dc4a:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
2400dc4c:	42a8      	cmp	r0, r5
	fs->id = ++Fsid;		/* File system mount ID */
2400dc4e:	800b      	strh	r3, [r1, #0]
2400dc50:	80eb      	strh	r3, [r5, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
2400dc52:	f000 8085 	beq.w	2400dd60 <find_volume+0x284>
2400dc56:	6913      	ldr	r3, [r2, #16]
2400dc58:	429d      	cmp	r5, r3
2400dc5a:	d06f      	beq.n	2400dd3c <find_volume+0x260>
	return FR_OK;
2400dc5c:	2400      	movs	r4, #0
2400dc5e:	e01a      	b.n	2400dc96 <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400dc60:	f895 61f6 	ldrb.w	r6, [r5, #502]	; 0x1f6
2400dc64:	b10e      	cbz	r6, 2400dc6a <find_volume+0x18e>
	rv = rv << 8 | ptr[0];
2400dc66:	f8d5 61fa 	ldr.w	r6, [r5, #506]	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400dc6a:	f895 4206 	ldrb.w	r4, [r5, #518]	; 0x206
2400dc6e:	b10c      	cbz	r4, 2400dc74 <find_volume+0x198>
	rv = rv << 8 | ptr[0];
2400dc70:	f8d5 420a 	ldr.w	r4, [r5, #522]	; 0x20a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400dc74:	f895 3216 	ldrb.w	r3, [r5, #534]	; 0x216
2400dc78:	b303      	cbz	r3, 2400dcbc <find_volume+0x1e0>
	rv = rv << 8 | ptr[0];
2400dc7a:	f8d5 821a 	ldr.w	r8, [r5, #538]	; 0x21a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400dc7e:	f895 7226 	ldrb.w	r7, [r5, #550]	; 0x226
2400dc82:	b10f      	cbz	r7, 2400dc88 <find_volume+0x1ac>
	rv = rv << 8 | ptr[0];
2400dc84:	f8d5 722a 	ldr.w	r7, [r5, #554]	; 0x22a
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400dc88:	b9f6      	cbnz	r6, 2400dcc8 <find_volume+0x1ec>
2400dc8a:	bb2c      	cbnz	r4, 2400dcd8 <find_volume+0x1fc>
2400dc8c:	f1b8 0f00 	cmp.w	r8, #0
2400dc90:	d12c      	bne.n	2400dcec <find_volume+0x210>
2400dc92:	b93f      	cbnz	r7, 2400dca4 <find_volume+0x1c8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
2400dc94:	240d      	movs	r4, #13
}
2400dc96:	4620      	mov	r0, r4
2400dc98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
2400dc9c:	2403      	movs	r4, #3
}
2400dc9e:	4620      	mov	r0, r4
2400dca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400dca4:	4639      	mov	r1, r7
2400dca6:	4628      	mov	r0, r5
2400dca8:	f7ff fe98 	bl	2400d9dc <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400dcac:	2801      	cmp	r0, #1
2400dcae:	d95a      	bls.n	2400dd66 <find_volume+0x28a>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
2400dcb0:	2804      	cmp	r0, #4
2400dcb2:	d1ef      	bne.n	2400dc94 <find_volume+0x1b8>
2400dcb4:	2401      	movs	r4, #1
2400dcb6:	e7ee      	b.n	2400dc96 <find_volume+0x1ba>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
2400dcb8:	240c      	movs	r4, #12
2400dcba:	e7ec      	b.n	2400dc96 <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400dcbc:	4698      	mov	r8, r3
2400dcbe:	e7de      	b.n	2400dc7e <find_volume+0x1a2>
					*path = ++tt;
2400dcc0:	f10c 0301 	add.w	r3, ip, #1
2400dcc4:	6003      	str	r3, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
2400dcc6:	e729      	b.n	2400db1c <find_volume+0x40>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400dcc8:	4631      	mov	r1, r6
2400dcca:	4628      	mov	r0, r5
2400dccc:	f7ff fe86 	bl	2400d9dc <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400dcd0:	2801      	cmp	r0, #1
2400dcd2:	d8da      	bhi.n	2400dc8a <find_volume+0x1ae>
2400dcd4:	4634      	mov	r4, r6
2400dcd6:	e752      	b.n	2400db7e <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400dcd8:	4621      	mov	r1, r4
2400dcda:	4628      	mov	r0, r5
2400dcdc:	f7ff fe7e 	bl	2400d9dc <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400dce0:	2801      	cmp	r0, #1
2400dce2:	f67f af4c 	bls.w	2400db7e <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400dce6:	f1b8 0f00 	cmp.w	r8, #0
2400dcea:	d0d2      	beq.n	2400dc92 <find_volume+0x1b6>
2400dcec:	4641      	mov	r1, r8
2400dcee:	4628      	mov	r0, r5
2400dcf0:	f7ff fe74 	bl	2400d9dc <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400dcf4:	2801      	cmp	r0, #1
2400dcf6:	d8cc      	bhi.n	2400dc92 <find_volume+0x1b6>
2400dcf8:	4644      	mov	r4, r8
2400dcfa:	e740      	b.n	2400db7e <find_volume+0xa2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
2400dcfc:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400dd00:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400dd02:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
2400dd04:	4426      	add	r6, r4
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
2400dd06:	ea5c 0303 	orrs.w	r3, ip, r3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400dd0a:	61a8      	str	r0, [r5, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400dd0c:	626f      	str	r7, [r5, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
2400dd0e:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
2400dd10:	622c      	str	r4, [r5, #32]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
2400dd12:	d1bf      	bne.n	2400dc94 <find_volume+0x1b8>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
2400dd14:	0080      	lsls	r0, r0, #2
	rv = rv << 8 | ptr[0];
2400dd16:	6e29      	ldr	r1, [r5, #96]	; 0x60
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400dd18:	f200 13ff 	addw	r3, r0, #511	; 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
2400dd1c:	62a9      	str	r1, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400dd1e:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
2400dd22:	d3b7      	bcc.n	2400dc94 <find_volume+0x1b8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
2400dd24:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400dd28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
2400dd2c:	2180      	movs	r1, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
2400dd2e:	2a01      	cmp	r2, #1
		fs->fsi_flag = 0x80;
2400dd30:	7129      	strb	r1, [r5, #4]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400dd32:	e9c5 3304 	strd	r3, r3, [r5, #16]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
2400dd36:	d018      	beq.n	2400dd6a <find_volume+0x28e>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
2400dd38:	2003      	movs	r0, #3
2400dd3a:	e77e      	b.n	2400dc3a <find_volume+0x15e>
		if (Files[i].fs == fs) Files[i].fs = 0;
2400dd3c:	2300      	movs	r3, #0
	return FR_OK;
2400dd3e:	461c      	mov	r4, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
2400dd40:	6113      	str	r3, [r2, #16]
2400dd42:	e7a8      	b.n	2400dc96 <find_volume+0x1ba>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400dd44:	1c81      	adds	r1, r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400dd46:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
2400dd48:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
2400dd4a:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400dd4c:	61a9      	str	r1, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
2400dd4e:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400dd50:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
2400dd52:	f1bc 0f00 	cmp.w	ip, #0
2400dd56:	d09d      	beq.n	2400dc94 <find_volume+0x1b8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400dd58:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2400dd5a:	0049      	lsls	r1, r1, #1
2400dd5c:	2002      	movs	r0, #2
2400dd5e:	e760      	b.n	2400dc22 <find_volume+0x146>
		if (Files[i].fs == fs) Files[i].fs = 0;
2400dd60:	2300      	movs	r3, #0
2400dd62:	6013      	str	r3, [r2, #0]
2400dd64:	e777      	b.n	2400dc56 <find_volume+0x17a>
2400dd66:	463c      	mov	r4, r7
2400dd68:	e709      	b.n	2400db7e <find_volume+0xa2>
			&& move_window(fs, bsect + 1) == FR_OK)
2400dd6a:	1c61      	adds	r1, r4, #1
2400dd6c:	4628      	mov	r0, r5
2400dd6e:	f7ff fe77 	bl	2400da60 <move_window>
2400dd72:	2800      	cmp	r0, #0
2400dd74:	d1e0      	bne.n	2400dd38 <find_volume+0x25c>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
2400dd76:	f64a 2355 	movw	r3, #43605	; 0xaa55
2400dd7a:	f8b5 2232 	ldrh.w	r2, [r5, #562]	; 0x232
			fs->fsi_flag = 0;
2400dd7e:	7128      	strb	r0, [r5, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
2400dd80:	429a      	cmp	r2, r3
2400dd82:	d1d9      	bne.n	2400dd38 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
2400dd84:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
2400dd86:	4b0d      	ldr	r3, [pc, #52]	; (2400ddbc <find_volume+0x2e0>)
2400dd88:	429a      	cmp	r2, r3
2400dd8a:	d1d5      	bne.n	2400dd38 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
2400dd8c:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
	rv = rv << 8 | ptr[0];
2400dd90:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
2400dd94:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
2400dd98:	3320      	adds	r3, #32
2400dd9a:	429a      	cmp	r2, r3
2400dd9c:	d1cc      	bne.n	2400dd38 <find_volume+0x25c>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
2400dd9e:	2003      	movs	r0, #3
2400dda0:	e9d5 3287 	ldrd	r3, r2, [r5, #540]	; 0x21c
2400dda4:	e9c5 2304 	strd	r2, r3, [r5, #16]
2400dda8:	e747      	b.n	2400dc3a <find_volume+0x15e>
2400ddaa:	bf00      	nop
2400ddac:	2001daf8 	.word	0x2001daf8
2400ddb0:	2001db1c 	.word	0x2001db1c
2400ddb4:	2001db20 	.word	0x2001db20
2400ddb8:	2001dafc 	.word	0x2001dafc
2400ddbc:	41615252 	.word	0x41615252

2400ddc0 <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
2400ddc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		switch (fs->fs_type) {
2400ddc4:	7806      	ldrb	r6, [r0, #0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
2400ddc6:	4604      	mov	r4, r0
2400ddc8:	460d      	mov	r5, r1
2400ddca:	4690      	mov	r8, r2
		switch (fs->fs_type) {
2400ddcc:	2e02      	cmp	r6, #2
2400ddce:	d007      	beq.n	2400dde0 <put_fat.part.0+0x20>
2400ddd0:	2e03      	cmp	r6, #3
2400ddd2:	d041      	beq.n	2400de58 <put_fat.part.0+0x98>
2400ddd4:	2e01      	cmp	r6, #1
2400ddd6:	d01b      	beq.n	2400de10 <put_fat.part.0+0x50>
2400ddd8:	2702      	movs	r7, #2
}
2400ddda:	4638      	mov	r0, r7
2400dddc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
2400dde0:	6a41      	ldr	r1, [r0, #36]	; 0x24
2400dde2:	eb01 2115 	add.w	r1, r1, r5, lsr #8
2400dde6:	f7ff fe3b 	bl	2400da60 <move_window>
			if (res != FR_OK) break;
2400ddea:	4607      	mov	r7, r0
2400ddec:	2800      	cmp	r0, #0
2400ddee:	d1f4      	bne.n	2400ddda <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
2400ddf0:	006d      	lsls	r5, r5, #1
2400ddf2:	f104 0334 	add.w	r3, r4, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
2400ddf6:	f3c8 2207 	ubfx	r2, r8, #8, #8
			fs->wflag = 1;
2400ddfa:	2101      	movs	r1, #1
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
2400ddfc:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
}
2400de00:	4638      	mov	r0, r7
	*ptr++ = (BYTE)val; val >>= 8;
2400de02:	f803 8005 	strb.w	r8, [r3, r5]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
2400de06:	442b      	add	r3, r5
	*ptr++ = (BYTE)val;
2400de08:	705a      	strb	r2, [r3, #1]
			fs->wflag = 1;
2400de0a:	70e1      	strb	r1, [r4, #3]
}
2400de0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400de10:	6a41      	ldr	r1, [r0, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
2400de12:	eb05 0955 	add.w	r9, r5, r5, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400de16:	eb01 2159 	add.w	r1, r1, r9, lsr #9
2400de1a:	f7ff fe21 	bl	2400da60 <move_window>
			if (res != FR_OK) break;
2400de1e:	4607      	mov	r7, r0
2400de20:	2800      	cmp	r0, #0
2400de22:	d1da      	bne.n	2400ddda <put_fat.part.0+0x1a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400de24:	07eb      	lsls	r3, r5, #31
			p = fs->win + bc++ % SS(fs);
2400de26:	f109 0b01 	add.w	fp, r9, #1
2400de2a:	f104 0a34 	add.w	sl, r4, #52	; 0x34
2400de2e:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400de32:	d52a      	bpl.n	2400de8a <put_fat.part.0+0xca>
2400de34:	f81a 3009 	ldrb.w	r3, [sl, r9]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400de38:	4620      	mov	r0, r4
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400de3a:	f003 030f 	and.w	r3, r3, #15
2400de3e:	ea43 1308 	orr.w	r3, r3, r8, lsl #4
2400de42:	f80a 3009 	strb.w	r3, [sl, r9]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400de46:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
2400de48:	70e6      	strb	r6, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400de4a:	eb01 215b 	add.w	r1, r1, fp, lsr #9
2400de4e:	f7ff fe07 	bl	2400da60 <move_window>
			if (res != FR_OK) break;
2400de52:	b3a0      	cbz	r0, 2400debe <put_fat.part.0+0xfe>
2400de54:	4607      	mov	r7, r0
	return res;
2400de56:	e7c0      	b.n	2400ddda <put_fat.part.0+0x1a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
2400de58:	6a41      	ldr	r1, [r0, #36]	; 0x24
2400de5a:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
2400de5e:	f7ff fdff 	bl	2400da60 <move_window>
			if (res != FR_OK) break;
2400de62:	4607      	mov	r7, r0
2400de64:	2800      	cmp	r0, #0
2400de66:	d1b8      	bne.n	2400ddda <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400de68:	00ad      	lsls	r5, r5, #2
2400de6a:	f104 0134 	add.w	r1, r4, #52	; 0x34
2400de6e:	f028 4270 	bic.w	r2, r8, #4026531840	; 0xf0000000
			fs->wflag = 1;
2400de72:	2001      	movs	r0, #1
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400de74:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400de78:	594b      	ldr	r3, [r1, r5]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400de7a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
2400de7e:	4313      	orrs	r3, r2
	*ptr++ = (BYTE)val; val >>= 8;
2400de80:	514b      	str	r3, [r1, r5]
			fs->wflag = 1;
2400de82:	70e0      	strb	r0, [r4, #3]
}
2400de84:	4638      	mov	r0, r7
2400de86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400de8a:	f80a 8009 	strb.w	r8, [sl, r9]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400de8e:	4620      	mov	r0, r4
2400de90:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
2400de92:	70e6      	strb	r6, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400de94:	eb01 215b 	add.w	r1, r1, fp, lsr #9
2400de98:	f7ff fde2 	bl	2400da60 <move_window>
			if (res != FR_OK) break;
2400de9c:	2800      	cmp	r0, #0
2400de9e:	d1d9      	bne.n	2400de54 <put_fat.part.0+0x94>
			p = fs->win + bc % SS(fs);
2400dea0:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400dea4:	f3c8 2203 	ubfx	r2, r8, #8, #4
2400dea8:	f81a 300b 	ldrb.w	r3, [sl, fp]
			p = fs->win + bc % SS(fs);
2400deac:	44da      	add	sl, fp
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400deae:	f023 030f 	bic.w	r3, r3, #15
2400deb2:	4313      	orrs	r3, r2
			fs->wflag = 1;
2400deb4:	2201      	movs	r2, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400deb6:	f88a 3000 	strb.w	r3, [sl]
			fs->wflag = 1;
2400deba:	70e2      	strb	r2, [r4, #3]
			break;
2400debc:	e78d      	b.n	2400ddda <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
2400debe:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400dec2:	f3c8 1307 	ubfx	r3, r8, #4, #8
			p = fs->win + bc % SS(fs);
2400dec6:	44da      	add	sl, fp
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400dec8:	e7f4      	b.n	2400deb4 <put_fat.part.0+0xf4>
2400deca:	bf00      	nop

2400decc <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400decc:	2901      	cmp	r1, #1
2400dece:	d90e      	bls.n	2400deee <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
2400ded0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400ded2:	6983      	ldr	r3, [r0, #24]
2400ded4:	460c      	mov	r4, r1
2400ded6:	4605      	mov	r5, r0
2400ded8:	4299      	cmp	r1, r3
2400deda:	d206      	bcs.n	2400deea <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
2400dedc:	7803      	ldrb	r3, [r0, #0]
2400dede:	2b02      	cmp	r3, #2
2400dee0:	d021      	beq.n	2400df26 <get_fat.isra.0+0x5a>
2400dee2:	2b03      	cmp	r3, #3
2400dee4:	d010      	beq.n	2400df08 <get_fat.isra.0+0x3c>
2400dee6:	2b01      	cmp	r3, #1
2400dee8:	d003      	beq.n	2400def2 <get_fat.isra.0+0x26>
2400deea:	2001      	movs	r0, #1
}
2400deec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
2400deee:	2001      	movs	r0, #1
}
2400def0:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400def2:	6a41      	ldr	r1, [r0, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
2400def4:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400def8:	eb01 2157 	add.w	r1, r1, r7, lsr #9
2400defc:	f7ff fdb0 	bl	2400da60 <move_window>
2400df00:	b1f0      	cbz	r0, 2400df40 <get_fat.isra.0+0x74>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
2400df02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
2400df06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400df08:	6a41      	ldr	r1, [r0, #36]	; 0x24
2400df0a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
2400df0e:	f7ff fda7 	bl	2400da60 <move_window>
2400df12:	2800      	cmp	r0, #0
2400df14:	d1f5      	bne.n	2400df02 <get_fat.isra.0+0x36>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400df16:	00a4      	lsls	r4, r4, #2
2400df18:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400df1c:	4425      	add	r5, r4
2400df1e:	6b68      	ldr	r0, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400df20:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
2400df24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400df26:	6a41      	ldr	r1, [r0, #36]	; 0x24
2400df28:	eb01 2114 	add.w	r1, r1, r4, lsr #8
2400df2c:	f7ff fd98 	bl	2400da60 <move_window>
2400df30:	2800      	cmp	r0, #0
2400df32:	d1e6      	bne.n	2400df02 <get_fat.isra.0+0x36>
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400df34:	0063      	lsls	r3, r4, #1
2400df36:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
2400df3a:	442b      	add	r3, r5
2400df3c:	8e98      	ldrh	r0, [r3, #52]	; 0x34
}
2400df3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
2400df40:	f3c7 0308 	ubfx	r3, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400df44:	6a69      	ldr	r1, [r5, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
2400df46:	3701      	adds	r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400df48:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
2400df4a:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400df4c:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400df50:	f893 6034 	ldrb.w	r6, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400df54:	f7ff fd84 	bl	2400da60 <move_window>
2400df58:	2800      	cmp	r0, #0
2400df5a:	d1d2      	bne.n	2400df02 <get_fat.isra.0+0x36>
			wc |= fs->win[bc % SS(fs)] << 8;
2400df5c:	f3c7 0708 	ubfx	r7, r7, #0, #9
2400df60:	442f      	add	r7, r5
2400df62:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
2400df66:	ea46 2003 	orr.w	r0, r6, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400df6a:	07e3      	lsls	r3, r4, #31
2400df6c:	bf4c      	ite	mi
2400df6e:	0900      	lsrmi	r0, r0, #4
2400df70:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
}
2400df74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2400df76:	bf00      	nop

2400df78 <dir_read.constprop.0>:
FRESULT dir_read (
2400df78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
2400df7c:	69c6      	ldr	r6, [r0, #28]
FRESULT dir_read (
2400df7e:	b083      	sub	sp, #12
2400df80:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
2400df82:	f8d0 8000 	ldr.w	r8, [r0]
	while (dp->sect) {
2400df86:	2e00      	cmp	r6, #0
2400df88:	d061      	beq.n	2400e04e <dir_read.constprop.0+0xd6>
	BYTE ord = 0xFF, sum = 0xFF;
2400df8a:	f04f 0bff 	mov.w	fp, #255	; 0xff
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400df8e:	f108 0a34 	add.w	sl, r8, #52	; 0x34
	BYTE ord = 0xFF, sum = 0xFF;
2400df92:	46d9      	mov	r9, fp
	if (sector != fs->winsect) {	/* Window offset changed? */
2400df94:	f8d8 5030 	ldr.w	r5, [r8, #48]	; 0x30
2400df98:	42b5      	cmp	r5, r6
2400df9a:	d018      	beq.n	2400dfce <dir_read.constprop.0+0x56>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400df9c:	f898 3003 	ldrb.w	r3, [r8, #3]
2400dfa0:	2b00      	cmp	r3, #0
2400dfa2:	f040 80c8 	bne.w	2400e136 <dir_read.constprop.0+0x1be>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400dfa6:	2301      	movs	r3, #1
2400dfa8:	4632      	mov	r2, r6
2400dfaa:	4651      	mov	r1, sl
2400dfac:	f898 0001 	ldrb.w	r0, [r8, #1]
2400dfb0:	f7ff fb9c 	bl	2400d6ec <disk_read>
2400dfb4:	b148      	cbz	r0, 2400dfca <dir_read.constprop.0+0x52>
			fs->winsect = sector;
2400dfb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
2400dfba:	2001      	movs	r0, #1
			fs->winsect = sector;
2400dfbc:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
2400dfc0:	2300      	movs	r3, #0
2400dfc2:	61e3      	str	r3, [r4, #28]
}
2400dfc4:	b003      	add	sp, #12
2400dfc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
2400dfca:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
		c = dp->dir[DIR_Name];	/* Test for the entry type */
2400dfce:	6a21      	ldr	r1, [r4, #32]
2400dfd0:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
2400dfd2:	2a00      	cmp	r2, #0
2400dfd4:	d03b      	beq.n	2400e04e <dir_read.constprop.0+0xd6>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
2400dfd6:	7acb      	ldrb	r3, [r1, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
2400dfd8:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
2400dfda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2400dfde:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
2400dfe0:	d005      	beq.n	2400dfee <dir_read.constprop.0+0x76>
2400dfe2:	2a2e      	cmp	r2, #46	; 0x2e
2400dfe4:	d003      	beq.n	2400dfee <dir_read.constprop.0+0x76>
2400dfe6:	f023 0020 	bic.w	r0, r3, #32
2400dfea:	2808      	cmp	r0, #8
2400dfec:	d136      	bne.n	2400e05c <dir_read.constprop.0+0xe4>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400dfee:	f04f 09ff 	mov.w	r9, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400dff2:	6965      	ldr	r5, [r4, #20]
	FATFS *fs = dp->obj.fs;
2400dff4:	6827      	ldr	r7, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400dff6:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400dff8:	69e6      	ldr	r6, [r4, #28]
2400dffa:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2400dffe:	d226      	bcs.n	2400e04e <dir_read.constprop.0+0xd6>
2400e000:	b32e      	cbz	r6, 2400e04e <dir_read.constprop.0+0xd6>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400e002:	f3c5 0308 	ubfx	r3, r5, #0, #9
2400e006:	bb23      	cbnz	r3, 2400e052 <dir_read.constprop.0+0xda>
		dp->sect++;				/* Next sector */
2400e008:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
2400e00a:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
2400e00c:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
2400e00e:	b961      	cbnz	r1, 2400e02a <dir_read.constprop.0+0xb2>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
2400e010:	893b      	ldrh	r3, [r7, #8]
2400e012:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
2400e016:	d91a      	bls.n	2400e04e <dir_read.constprop.0+0xd6>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400e018:	3734      	adds	r7, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
2400e01a:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400e01c:	6227      	str	r7, [r4, #32]
	while (dp->sect) {
2400e01e:	2e00      	cmp	r6, #0
2400e020:	d1b8      	bne.n	2400df94 <dir_read.constprop.0+0x1c>
		res = move_window(fs, dp->sect);
2400e022:	2000      	movs	r0, #0
}
2400e024:	b003      	add	sp, #12
2400e026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2400e02a:	897b      	ldrh	r3, [r7, #10]
2400e02c:	3b01      	subs	r3, #1
2400e02e:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
2400e032:	d1f1      	bne.n	2400e018 <dir_read.constprop.0+0xa0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400e034:	4638      	mov	r0, r7
2400e036:	9301      	str	r3, [sp, #4]
2400e038:	f7ff ff48 	bl	2400decc <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400e03c:	2801      	cmp	r0, #1
2400e03e:	f240 80b2 	bls.w	2400e1a6 <dir_read.constprop.0+0x22e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400e042:	1c43      	adds	r3, r0, #1
2400e044:	d07f      	beq.n	2400e146 <dir_read.constprop.0+0x1ce>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2400e046:	69ba      	ldr	r2, [r7, #24]
2400e048:	4290      	cmp	r0, r2
2400e04a:	f0c0 809f 	bcc.w	2400e18c <dir_read.constprop.0+0x214>
	FRESULT res = FR_NO_FILE;
2400e04e:	2004      	movs	r0, #4
2400e050:	e7b6      	b.n	2400dfc0 <dir_read.constprop.0+0x48>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400e052:	3734      	adds	r7, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
2400e054:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400e056:	441f      	add	r7, r3
2400e058:	6227      	str	r7, [r4, #32]
	while (dp->sect) {
2400e05a:	e79b      	b.n	2400df94 <dir_read.constprop.0+0x1c>
				if (a == AM_LFN) {			/* An LFN entry is found */
2400e05c:	2b0f      	cmp	r3, #15
2400e05e:	f040 80a9 	bne.w	2400e1b4 <dir_read.constprop.0+0x23c>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
2400e062:	0650      	lsls	r0, r2, #25
2400e064:	d571      	bpl.n	2400e14a <dir_read.constprop.0+0x1d2>
						dp->blk_ofs = dp->dptr;
2400e066:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;
2400e068:	f002 09bf 	and.w	r9, r2, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
2400e06c:	f891 b00d 	ldrb.w	fp, [r1, #13]
						dp->blk_ofs = dp->dptr;
2400e070:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400e072:	7b4b      	ldrb	r3, [r1, #13]
2400e074:	455b      	cmp	r3, fp
2400e076:	d1ba      	bne.n	2400dfee <dir_read.constprop.0+0x76>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
2400e078:	8b4b      	ldrh	r3, [r1, #26]
2400e07a:	2b00      	cmp	r3, #0
2400e07c:	d1b7      	bne.n	2400dfee <dir_read.constprop.0+0x76>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
2400e07e:	780b      	ldrb	r3, [r1, #0]
2400e080:	f8b1 0001 	ldrh.w	r0, [r1, #1]
2400e084:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400e088:	3b01      	subs	r3, #1
2400e08a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
2400e08e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e092:	2bfe      	cmp	r3, #254	; 0xfe
2400e094:	d8ab      	bhi.n	2400dfee <dir_read.constprop.0+0x76>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400e096:	f8d8 500c 	ldr.w	r5, [r8, #12]
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e09a:	1c5a      	adds	r2, r3, #1
2400e09c:	f825 0013 	strh.w	r0, [r5, r3, lsl #1]
2400e0a0:	f8b1 6003 	ldrh.w	r6, [r1, #3]
		if (wc) {
2400e0a4:	2800      	cmp	r0, #0
2400e0a6:	f040 808e 	bne.w	2400e1c6 <dir_read.constprop.0+0x24e>
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e0aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e0ae:	429e      	cmp	r6, r3
2400e0b0:	d19d      	bne.n	2400dfee <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400e0b2:	f8b1 c005 	ldrh.w	ip, [r1, #5]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e0b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e0ba:	459c      	cmp	ip, r3
2400e0bc:	d197      	bne.n	2400dfee <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400e0be:	f8b1 7007 	ldrh.w	r7, [r1, #7]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e0c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e0c6:	429f      	cmp	r7, r3
2400e0c8:	d191      	bne.n	2400dfee <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400e0ca:	f8b1 6009 	ldrh.w	r6, [r1, #9]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e0ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e0d2:	429e      	cmp	r6, r3
2400e0d4:	d18b      	bne.n	2400dfee <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400e0d6:	89cf      	ldrh	r7, [r1, #14]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e0d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e0dc:	429f      	cmp	r7, r3
2400e0de:	d186      	bne.n	2400dfee <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400e0e0:	f8b1 c010 	ldrh.w	ip, [r1, #16]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e0e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e0e8:	459c      	cmp	ip, r3
2400e0ea:	d180      	bne.n	2400dfee <dir_read.constprop.0+0x76>
	rv = rv << 8 | ptr[0];
2400e0ec:	8a4e      	ldrh	r6, [r1, #18]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e0ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e0f2:	429e      	cmp	r6, r3
2400e0f4:	f47f af7b 	bne.w	2400dfee <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400e0f8:	8a8f      	ldrh	r7, [r1, #20]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e0fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e0fe:	429f      	cmp	r7, r3
2400e100:	f47f af75 	bne.w	2400dfee <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400e104:	8ace      	ldrh	r6, [r1, #22]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e106:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e10a:	429e      	cmp	r6, r3
2400e10c:	f47f af6f 	bne.w	2400dfee <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400e110:	8b0f      	ldrh	r7, [r1, #24]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e112:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e116:	429f      	cmp	r7, r3
2400e118:	f47f af69 	bne.w	2400dfee <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400e11c:	8b8e      	ldrh	r6, [r1, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e11e:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e122:	429e      	cmp	r6, r3
2400e124:	f47f af63 	bne.w	2400dfee <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400e128:	8bcf      	ldrh	r7, [r1, #30]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e12a:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e12e:	429f      	cmp	r7, r3
2400e130:	f000 80bd 	beq.w	2400e2ae <dir_read.constprop.0+0x336>
2400e134:	e75b      	b.n	2400dfee <dir_read.constprop.0+0x76>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400e136:	2301      	movs	r3, #1
2400e138:	462a      	mov	r2, r5
2400e13a:	4651      	mov	r1, sl
2400e13c:	f898 0001 	ldrb.w	r0, [r8, #1]
2400e140:	f7ff fae4 	bl	2400d70c <disk_write>
2400e144:	b128      	cbz	r0, 2400e152 <dir_read.constprop.0+0x1da>
	FRESULT res = FR_NO_FILE;
2400e146:	2001      	movs	r0, #1
2400e148:	e73a      	b.n	2400dfc0 <dir_read.constprop.0+0x48>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400e14a:	454a      	cmp	r2, r9
2400e14c:	f47f af4f 	bne.w	2400dfee <dir_read.constprop.0+0x76>
2400e150:	e78f      	b.n	2400e072 <dir_read.constprop.0+0xfa>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400e152:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
2400e156:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400e15a:	1aea      	subs	r2, r5, r3
2400e15c:	f8d8 301c 	ldr.w	r3, [r8, #28]
2400e160:	429a      	cmp	r2, r3
2400e162:	f4bf af20 	bcs.w	2400dfa6 <dir_read.constprop.0+0x2e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e166:	f898 7002 	ldrb.w	r7, [r8, #2]
2400e16a:	2f01      	cmp	r7, #1
2400e16c:	d802      	bhi.n	2400e174 <dir_read.constprop.0+0x1fc>
2400e16e:	e71a      	b.n	2400dfa6 <dir_read.constprop.0+0x2e>
					wsect += fs->fsize;
2400e170:	f8d8 301c 	ldr.w	r3, [r8, #28]
2400e174:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e176:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400e178:	2301      	movs	r3, #1
2400e17a:	4651      	mov	r1, sl
2400e17c:	462a      	mov	r2, r5
2400e17e:	f898 0001 	ldrb.w	r0, [r8, #1]
2400e182:	f7ff fac3 	bl	2400d70c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e186:	2f01      	cmp	r7, #1
2400e188:	d1f2      	bne.n	2400e170 <dir_read.constprop.0+0x1f8>
2400e18a:	e70c      	b.n	2400dfa6 <dir_read.constprop.0+0x2e>
				dp->clust = clst;		/* Initialize data for new cluster */
2400e18c:	61a0      	str	r0, [r4, #24]
	clst -= 2;
2400e18e:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400e190:	69ba      	ldr	r2, [r7, #24]
2400e192:	9b01      	ldr	r3, [sp, #4]
2400e194:	3a02      	subs	r2, #2
2400e196:	4290      	cmp	r0, r2
2400e198:	d207      	bcs.n	2400e1aa <dir_read.constprop.0+0x232>
	return clst * fs->csize + fs->database;
2400e19a:	897b      	ldrh	r3, [r7, #10]
2400e19c:	6afe      	ldr	r6, [r7, #44]	; 0x2c
2400e19e:	fb00 6603 	mla	r6, r0, r3, r6
				dp->sect = clust2sect(fs, clst);
2400e1a2:	61e6      	str	r6, [r4, #28]
2400e1a4:	e738      	b.n	2400e018 <dir_read.constprop.0+0xa0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400e1a6:	2002      	movs	r0, #2
2400e1a8:	e70a      	b.n	2400dfc0 <dir_read.constprop.0+0x48>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400e1aa:	3734      	adds	r7, #52	; 0x34
				dp->sect = clust2sect(fs, clst);
2400e1ac:	61e3      	str	r3, [r4, #28]
	dp->dptr = ofs;						/* Current entry */
2400e1ae:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400e1b0:	6227      	str	r7, [r4, #32]
	while (dp->sect) {
2400e1b2:	e736      	b.n	2400e022 <dir_read.constprop.0+0xaa>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
2400e1b4:	f1b9 0f00 	cmp.w	r9, #0
2400e1b8:	f000 8086 	beq.w	2400e2c8 <dir_read.constprop.0+0x350>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
2400e1bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		res = move_window(fs, dp->sect);
2400e1c0:	2000      	movs	r0, #0
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
2400e1c2:	6323      	str	r3, [r4, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
2400e1c4:	e6fe      	b.n	2400dfc4 <dir_read.constprop.0+0x4c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e1c6:	2aff      	cmp	r2, #255	; 0xff
2400e1c8:	f000 80c8 	beq.w	2400e35c <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e1cc:	f825 6012 	strh.w	r6, [r5, r2, lsl #1]
2400e1d0:	0050      	lsls	r0, r2, #1
2400e1d2:	f8b1 c005 	ldrh.w	ip, [r1, #5]
2400e1d6:	1c9a      	adds	r2, r3, #2
		if (wc) {
2400e1d8:	2e00      	cmp	r6, #0
2400e1da:	f43f af6c 	beq.w	2400e0b6 <dir_read.constprop.0+0x13e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e1de:	2aff      	cmp	r2, #255	; 0xff
2400e1e0:	f000 80bc 	beq.w	2400e35c <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e1e4:	4428      	add	r0, r5
2400e1e6:	1cda      	adds	r2, r3, #3
2400e1e8:	f8a0 c002 	strh.w	ip, [r0, #2]
2400e1ec:	f8b1 7007 	ldrh.w	r7, [r1, #7]
		if (wc) {
2400e1f0:	f1bc 0f00 	cmp.w	ip, #0
2400e1f4:	f43f af65 	beq.w	2400e0c2 <dir_read.constprop.0+0x14a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e1f8:	2aff      	cmp	r2, #255	; 0xff
2400e1fa:	f000 80af 	beq.w	2400e35c <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e1fe:	8087      	strh	r7, [r0, #4]
2400e200:	1d1a      	adds	r2, r3, #4
	rv = ptr[1];
2400e202:	f8b1 6009 	ldrh.w	r6, [r1, #9]
		if (wc) {
2400e206:	2f00      	cmp	r7, #0
2400e208:	f43f af61 	beq.w	2400e0ce <dir_read.constprop.0+0x156>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e20c:	2aff      	cmp	r2, #255	; 0xff
2400e20e:	f000 80a5 	beq.w	2400e35c <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e212:	80c6      	strh	r6, [r0, #6]
2400e214:	1d5a      	adds	r2, r3, #5
	rv = ptr[1];
2400e216:	89cf      	ldrh	r7, [r1, #14]
		if (wc) {
2400e218:	2e00      	cmp	r6, #0
2400e21a:	f43f af5d 	beq.w	2400e0d8 <dir_read.constprop.0+0x160>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e21e:	2aff      	cmp	r2, #255	; 0xff
2400e220:	f000 809c 	beq.w	2400e35c <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e224:	8107      	strh	r7, [r0, #8]
2400e226:	1d9a      	adds	r2, r3, #6
	rv = ptr[1];
2400e228:	f8b1 c010 	ldrh.w	ip, [r1, #16]
		if (wc) {
2400e22c:	2f00      	cmp	r7, #0
2400e22e:	f43f af59 	beq.w	2400e0e4 <dir_read.constprop.0+0x16c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e232:	2aff      	cmp	r2, #255	; 0xff
2400e234:	f000 8092 	beq.w	2400e35c <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e238:	f8a0 c00a 	strh.w	ip, [r0, #10]
2400e23c:	1dda      	adds	r2, r3, #7
	rv = ptr[1];
2400e23e:	8a4e      	ldrh	r6, [r1, #18]
		if (wc) {
2400e240:	f1bc 0f00 	cmp.w	ip, #0
2400e244:	f43f af53 	beq.w	2400e0ee <dir_read.constprop.0+0x176>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e248:	2aff      	cmp	r2, #255	; 0xff
2400e24a:	f000 8087 	beq.w	2400e35c <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e24e:	8186      	strh	r6, [r0, #12]
2400e250:	f103 0208 	add.w	r2, r3, #8
	rv = ptr[1];
2400e254:	8a8f      	ldrh	r7, [r1, #20]
		if (wc) {
2400e256:	2e00      	cmp	r6, #0
2400e258:	f43f af4f 	beq.w	2400e0fa <dir_read.constprop.0+0x182>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e25c:	2aff      	cmp	r2, #255	; 0xff
2400e25e:	d07d      	beq.n	2400e35c <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e260:	81c7      	strh	r7, [r0, #14]
2400e262:	f103 0209 	add.w	r2, r3, #9
	rv = ptr[1];
2400e266:	8ace      	ldrh	r6, [r1, #22]
		if (wc) {
2400e268:	2f00      	cmp	r7, #0
2400e26a:	f43f af4c 	beq.w	2400e106 <dir_read.constprop.0+0x18e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e26e:	2aff      	cmp	r2, #255	; 0xff
2400e270:	d074      	beq.n	2400e35c <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e272:	8206      	strh	r6, [r0, #16]
2400e274:	f103 020a 	add.w	r2, r3, #10
	rv = ptr[1];
2400e278:	8b0f      	ldrh	r7, [r1, #24]
		if (wc) {
2400e27a:	2e00      	cmp	r6, #0
2400e27c:	f43f af49 	beq.w	2400e112 <dir_read.constprop.0+0x19a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e280:	2aff      	cmp	r2, #255	; 0xff
2400e282:	d06b      	beq.n	2400e35c <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e284:	8247      	strh	r7, [r0, #18]
2400e286:	f103 020b 	add.w	r2, r3, #11
	rv = ptr[1];
2400e28a:	8b8e      	ldrh	r6, [r1, #28]
		if (wc) {
2400e28c:	2f00      	cmp	r7, #0
2400e28e:	f43f af46 	beq.w	2400e11e <dir_read.constprop.0+0x1a6>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e292:	2aff      	cmp	r2, #255	; 0xff
2400e294:	d062      	beq.n	2400e35c <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e296:	8286      	strh	r6, [r0, #20]
2400e298:	f103 020c 	add.w	r2, r3, #12
	rv = ptr[1];
2400e29c:	8bcf      	ldrh	r7, [r1, #30]
		if (wc) {
2400e29e:	2e00      	cmp	r6, #0
2400e2a0:	f43f af43 	beq.w	2400e12a <dir_read.constprop.0+0x1b2>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e2a4:	2aff      	cmp	r2, #255	; 0xff
2400e2a6:	d059      	beq.n	2400e35c <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e2a8:	f103 020d 	add.w	r2, r3, #13
2400e2ac:	82c7      	strh	r7, [r0, #22]
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
2400e2ae:	780b      	ldrb	r3, [r1, #0]
2400e2b0:	0659      	lsls	r1, r3, #25
2400e2b2:	d504      	bpl.n	2400e2be <dir_read.constprop.0+0x346>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
2400e2b4:	2aff      	cmp	r2, #255	; 0xff
2400e2b6:	d051      	beq.n	2400e35c <dir_read.constprop.0+0x3e4>
		lfnbuf[i] = 0;
2400e2b8:	2300      	movs	r3, #0
2400e2ba:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400e2be:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
2400e2c2:	fa5f f989 	uxtb.w	r9, r9
2400e2c6:	e694      	b.n	2400dff2 <dir_read.constprop.0+0x7a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400e2c8:	780b      	ldrb	r3, [r1, #0]
2400e2ca:	01da      	lsls	r2, r3, #7
2400e2cc:	ea42 0253 	orr.w	r2, r2, r3, lsr #1
2400e2d0:	784b      	ldrb	r3, [r1, #1]
2400e2d2:	441a      	add	r2, r3
2400e2d4:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400e2d8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400e2dc:	788a      	ldrb	r2, [r1, #2]
2400e2de:	fa52 f383 	uxtab	r3, r2, r3
2400e2e2:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400e2e6:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400e2ea:	78cb      	ldrb	r3, [r1, #3]
2400e2ec:	fa53 f282 	uxtab	r2, r3, r2
2400e2f0:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400e2f4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400e2f8:	790a      	ldrb	r2, [r1, #4]
2400e2fa:	fa52 f383 	uxtab	r3, r2, r3
2400e2fe:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400e302:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400e306:	794b      	ldrb	r3, [r1, #5]
2400e308:	fa53 f282 	uxtab	r2, r3, r2
2400e30c:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400e310:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400e314:	798a      	ldrb	r2, [r1, #6]
2400e316:	fa52 f383 	uxtab	r3, r2, r3
2400e31a:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400e31e:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400e322:	79cb      	ldrb	r3, [r1, #7]
2400e324:	fa53 f282 	uxtab	r2, r3, r2
2400e328:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400e32c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400e330:	7a0a      	ldrb	r2, [r1, #8]
2400e332:	fa52 f383 	uxtab	r3, r2, r3
2400e336:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400e33a:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400e33e:	7a4b      	ldrb	r3, [r1, #9]
2400e340:	7a89      	ldrb	r1, [r1, #10]
2400e342:	fa53 f282 	uxtab	r2, r3, r2
2400e346:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400e34a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400e34e:	fa51 f383 	uxtab	r3, r1, r3
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
2400e352:	b2db      	uxtb	r3, r3
2400e354:	455b      	cmp	r3, fp
2400e356:	f47f af31 	bne.w	2400e1bc <dir_read.constprop.0+0x244>
2400e35a:	e662      	b.n	2400e022 <dir_read.constprop.0+0xaa>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400e35c:	4691      	mov	r9, r2
2400e35e:	e648      	b.n	2400dff2 <dir_read.constprop.0+0x7a>

2400e360 <sync_fs>:
{
2400e360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400e362:	78c3      	ldrb	r3, [r0, #3]
{
2400e364:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400e366:	b95b      	cbnz	r3, 2400e380 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
2400e368:	7823      	ldrb	r3, [r4, #0]
2400e36a:	2b03      	cmp	r3, #3
2400e36c:	d029      	beq.n	2400e3c2 <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
2400e36e:	2200      	movs	r2, #0
2400e370:	7860      	ldrb	r0, [r4, #1]
2400e372:	4611      	mov	r1, r2
2400e374:	f7ff f9da 	bl	2400d72c <disk_ioctl>
			res = FR_DISK_ERR;
2400e378:	3800      	subs	r0, #0
2400e37a:	bf18      	it	ne
2400e37c:	2001      	movne	r0, #1
}
2400e37e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
2400e380:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400e382:	f100 0734 	add.w	r7, r0, #52	; 0x34
2400e386:	2301      	movs	r3, #1
2400e388:	7840      	ldrb	r0, [r0, #1]
2400e38a:	462a      	mov	r2, r5
2400e38c:	4639      	mov	r1, r7
2400e38e:	f7ff f9bd 	bl	2400d70c <disk_write>
2400e392:	2800      	cmp	r0, #0
2400e394:	d13e      	bne.n	2400e414 <sync_fs+0xb4>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400e396:	6a62      	ldr	r2, [r4, #36]	; 0x24
2400e398:	69e3      	ldr	r3, [r4, #28]
2400e39a:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
2400e39c:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400e39e:	429a      	cmp	r2, r3
2400e3a0:	d2e2      	bcs.n	2400e368 <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e3a2:	78a6      	ldrb	r6, [r4, #2]
2400e3a4:	2e01      	cmp	r6, #1
2400e3a6:	d801      	bhi.n	2400e3ac <sync_fs+0x4c>
2400e3a8:	e7de      	b.n	2400e368 <sync_fs+0x8>
					wsect += fs->fsize;
2400e3aa:	69e3      	ldr	r3, [r4, #28]
2400e3ac:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e3ae:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400e3b0:	2301      	movs	r3, #1
2400e3b2:	4639      	mov	r1, r7
2400e3b4:	462a      	mov	r2, r5
2400e3b6:	7860      	ldrb	r0, [r4, #1]
2400e3b8:	f7ff f9a8 	bl	2400d70c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e3bc:	2e01      	cmp	r6, #1
2400e3be:	d1f4      	bne.n	2400e3aa <sync_fs+0x4a>
2400e3c0:	e7d2      	b.n	2400e368 <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
2400e3c2:	7925      	ldrb	r5, [r4, #4]
2400e3c4:	2d01      	cmp	r5, #1
2400e3c6:	d1d2      	bne.n	2400e36e <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
2400e3c8:	f104 0634 	add.w	r6, r4, #52	; 0x34
		*d++ = (BYTE)val;
2400e3cc:	f44f 7200 	mov.w	r2, #512	; 0x200
2400e3d0:	2100      	movs	r1, #0
2400e3d2:	4630      	mov	r0, r6
2400e3d4:	f009 fb34 	bl	24017a40 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
2400e3d8:	480f      	ldr	r0, [pc, #60]	; (2400e418 <sync_fs+0xb8>)
	*ptr++ = (BYTE)val; val >>= 8;
2400e3da:	f64a 2355 	movw	r3, #43605	; 0xaa55
	*ptr++ = (BYTE)val; val >>= 8;
2400e3de:	6360      	str	r0, [r4, #52]	; 0x34
2400e3e0:	f100 50ff 	add.w	r0, r0, #534773760	; 0x1fe00000
	*ptr++ = (BYTE)val; val >>= 8;
2400e3e4:	f8a4 3232 	strh.w	r3, [r4, #562]	; 0x232
			disk_write(fs->drv, fs->win, fs->winsect, 1);
2400e3e8:	462b      	mov	r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
2400e3ea:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
2400e3ee:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
2400e3f2:	3020      	adds	r0, #32
2400e3f4:	f8c4 221c 	str.w	r2, [r4, #540]	; 0x21c
			fs->winsect = fs->volbase + 1;
2400e3f8:	6a22      	ldr	r2, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
2400e3fa:	f8c4 1220 	str.w	r1, [r4, #544]	; 0x220
			disk_write(fs->drv, fs->win, fs->winsect, 1);
2400e3fe:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;
2400e400:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
2400e402:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
			disk_write(fs->drv, fs->win, fs->winsect, 1);
2400e406:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
2400e408:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
2400e40a:	f7ff f97f 	bl	2400d70c <disk_write>
			fs->fsi_flag = 0;
2400e40e:	2300      	movs	r3, #0
2400e410:	7123      	strb	r3, [r4, #4]
2400e412:	e7ac      	b.n	2400e36e <sync_fs+0xe>
			res = FR_DISK_ERR;
2400e414:	2001      	movs	r0, #1
}
2400e416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2400e418:	41615252 	.word	0x41615252

2400e41c <create_chain>:
{
2400e41c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400e420:	4681      	mov	r9, r0
	if (clst == 0) {	/* Create a new chain */
2400e422:	460f      	mov	r7, r1
	FATFS *fs = obj->fs;
2400e424:	f8d0 8000 	ldr.w	r8, [r0]
	if (clst == 0) {	/* Create a new chain */
2400e428:	2900      	cmp	r1, #0
2400e42a:	f040 80a7 	bne.w	2400e57c <create_chain+0x160>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
2400e42e:	f8d8 6010 	ldr.w	r6, [r8, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
2400e432:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400e436:	b9c6      	cbnz	r6, 2400e46a <create_chain+0x4e>
2400e438:	2601      	movs	r6, #1
2400e43a:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
2400e43c:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
2400e43e:	429c      	cmp	r4, r3
2400e440:	d317      	bcc.n	2400e472 <create_chain+0x56>
				if (ncl > scl) return 0;	/* No free cluster */
2400e442:	2e01      	cmp	r6, #1
2400e444:	f000 8096 	beq.w	2400e574 <create_chain+0x158>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
2400e448:	f8d9 5000 	ldr.w	r5, [r9]
				ncl = 2;
2400e44c:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400e44e:	69ab      	ldr	r3, [r5, #24]
2400e450:	42a3      	cmp	r3, r4
2400e452:	d906      	bls.n	2400e462 <create_chain+0x46>
		switch (fs->fs_type) {
2400e454:	782b      	ldrb	r3, [r5, #0]
2400e456:	2b02      	cmp	r3, #2
2400e458:	d07e      	beq.n	2400e558 <create_chain+0x13c>
2400e45a:	2b03      	cmp	r3, #3
2400e45c:	d064      	beq.n	2400e528 <create_chain+0x10c>
2400e45e:	2b01      	cmp	r3, #1
2400e460:	d00c      	beq.n	2400e47c <create_chain+0x60>
2400e462:	2401      	movs	r4, #1
}
2400e464:	4620      	mov	r0, r4
2400e466:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
2400e46a:	42b3      	cmp	r3, r6
2400e46c:	bf98      	it	ls
2400e46e:	2601      	movls	r6, #1
2400e470:	e7e3      	b.n	2400e43a <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400e472:	2c01      	cmp	r4, #1
2400e474:	f8d9 5000 	ldr.w	r5, [r9]
2400e478:	d9f3      	bls.n	2400e462 <create_chain+0x46>
2400e47a:	e7e8      	b.n	2400e44e <create_chain+0x32>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e47c:	6a69      	ldr	r1, [r5, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
2400e47e:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e482:	4628      	mov	r0, r5
2400e484:	eb01 215b 	add.w	r1, r1, fp, lsr #9
2400e488:	f7ff faea 	bl	2400da60 <move_window>
2400e48c:	2800      	cmp	r0, #0
2400e48e:	d146      	bne.n	2400e51e <create_chain+0x102>
			wc = fs->win[bc++ % SS(fs)];
2400e490:	f3cb 0308 	ubfx	r3, fp, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e494:	6a69      	ldr	r1, [r5, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
2400e496:	f10b 0b01 	add.w	fp, fp, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e49a:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
2400e49c:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e49e:	eb01 215b 	add.w	r1, r1, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400e4a2:	f893 a034 	ldrb.w	sl, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e4a6:	f7ff fadb 	bl	2400da60 <move_window>
2400e4aa:	bbc0      	cbnz	r0, 2400e51e <create_chain+0x102>
			wc |= fs->win[bc % SS(fs)] << 8;
2400e4ac:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400e4b0:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
2400e4b2:	44ab      	add	fp, r5
2400e4b4:	f89b 3034 	ldrb.w	r3, [fp, #52]	; 0x34
2400e4b8:	ea4a 2303 	orr.w	r3, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400e4bc:	bf4c      	ite	mi
2400e4be:	091b      	lsrmi	r3, r3, #4
2400e4c0:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
			if (cs == 0) break;				/* Found a free cluster */
2400e4c4:	2b00      	cmp	r3, #0
2400e4c6:	d140      	bne.n	2400e54a <create_chain+0x12e>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400e4c8:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400e4cc:	42a3      	cmp	r3, r4
2400e4ce:	d9c8      	bls.n	2400e462 <create_chain+0x46>
2400e4d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2400e4d4:	4621      	mov	r1, r4
2400e4d6:	4640      	mov	r0, r8
2400e4d8:	f7ff fc72 	bl	2400ddc0 <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
2400e4dc:	b958      	cbnz	r0, 2400e4f6 <create_chain+0xda>
2400e4de:	b157      	cbz	r7, 2400e4f6 <create_chain+0xda>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400e4e0:	2f01      	cmp	r7, #1
2400e4e2:	d0be      	beq.n	2400e462 <create_chain+0x46>
2400e4e4:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400e4e8:	429f      	cmp	r7, r3
2400e4ea:	d2ba      	bcs.n	2400e462 <create_chain+0x46>
2400e4ec:	4622      	mov	r2, r4
2400e4ee:	4639      	mov	r1, r7
2400e4f0:	4640      	mov	r0, r8
2400e4f2:	f7ff fc65 	bl	2400ddc0 <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
2400e4f6:	b980      	cbnz	r0, 2400e51a <create_chain+0xfe>
		fs->last_clst = ncl;
2400e4f8:	f8c8 4010 	str.w	r4, [r8, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
2400e4fc:	e9d8 2305 	ldrd	r2, r3, [r8, #20]
2400e500:	3b02      	subs	r3, #2
2400e502:	429a      	cmp	r2, r3
2400e504:	d802      	bhi.n	2400e50c <create_chain+0xf0>
2400e506:	3a01      	subs	r2, #1
2400e508:	f8c8 2014 	str.w	r2, [r8, #20]
		fs->fsi_flag |= 1;
2400e50c:	f898 3004 	ldrb.w	r3, [r8, #4]
2400e510:	f043 0301 	orr.w	r3, r3, #1
2400e514:	f888 3004 	strb.w	r3, [r8, #4]
2400e518:	e7a4      	b.n	2400e464 <create_chain+0x48>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
2400e51a:	2801      	cmp	r0, #1
2400e51c:	d1a1      	bne.n	2400e462 <create_chain+0x46>
2400e51e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
2400e522:	4620      	mov	r0, r4
2400e524:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400e528:	6a69      	ldr	r1, [r5, #36]	; 0x24
2400e52a:	4628      	mov	r0, r5
2400e52c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
2400e530:	f7ff fa96 	bl	2400da60 <move_window>
2400e534:	2800      	cmp	r0, #0
2400e536:	d1f2      	bne.n	2400e51e <create_chain+0x102>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400e538:	00a3      	lsls	r3, r4, #2
2400e53a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400e53e:	441d      	add	r5, r3
2400e540:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400e542:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
2400e546:	2b00      	cmp	r3, #0
2400e548:	d0be      	beq.n	2400e4c8 <create_chain+0xac>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
2400e54a:	2b01      	cmp	r3, #1
2400e54c:	d089      	beq.n	2400e462 <create_chain+0x46>
			if (ncl == scl) return 0;		/* No free cluster */
2400e54e:	42a6      	cmp	r6, r4
2400e550:	d010      	beq.n	2400e574 <create_chain+0x158>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400e552:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400e556:	e771      	b.n	2400e43c <create_chain+0x20>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400e558:	6a69      	ldr	r1, [r5, #36]	; 0x24
2400e55a:	4628      	mov	r0, r5
2400e55c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
2400e560:	f7ff fa7e 	bl	2400da60 <move_window>
2400e564:	2800      	cmp	r0, #0
2400e566:	d1da      	bne.n	2400e51e <create_chain+0x102>
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400e568:	0063      	lsls	r3, r4, #1
2400e56a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
2400e56e:	442b      	add	r3, r5
2400e570:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
			break;
2400e572:	e7a7      	b.n	2400e4c4 <create_chain+0xa8>
				if (ncl > scl) return 0;	/* No free cluster */
2400e574:	2400      	movs	r4, #0
}
2400e576:	4620      	mov	r0, r4
2400e578:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
2400e57c:	4640      	mov	r0, r8
2400e57e:	f7ff fca5 	bl	2400decc <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
2400e582:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
2400e584:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
2400e586:	f67f af6c 	bls.w	2400e462 <create_chain+0x46>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
2400e58a:	1c41      	adds	r1, r0, #1
2400e58c:	d0c7      	beq.n	2400e51e <create_chain+0x102>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
2400e58e:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400e592:	4283      	cmp	r3, r0
2400e594:	f63f af66 	bhi.w	2400e464 <create_chain+0x48>
2400e598:	463e      	mov	r6, r7
2400e59a:	e74e      	b.n	2400e43a <create_chain+0x1e>

2400e59c <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
2400e59c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
{
2400e5a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = dp->obj.fs;
2400e5a4:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
2400e5a8:	d24e      	bcs.n	2400e648 <dir_sdi+0xac>
2400e5aa:	06ca      	lsls	r2, r1, #27
2400e5ac:	460c      	mov	r4, r1
2400e5ae:	d14b      	bne.n	2400e648 <dir_sdi+0xac>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
2400e5b0:	6885      	ldr	r5, [r0, #8]
2400e5b2:	4606      	mov	r6, r0
	dp->dptr = ofs;				/* Set current offset */
2400e5b4:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
2400e5b6:	2d00      	cmp	r5, #0
2400e5b8:	d049      	beq.n	2400e64e <dir_sdi+0xb2>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
2400e5ba:	f8b8 300a 	ldrh.w	r3, [r8, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
2400e5be:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
2400e5c2:	ea4f 2943 	mov.w	r9, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
2400e5c6:	f0c0 8084 	bcc.w	2400e6d2 <dir_sdi+0x136>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400e5ca:	2d01      	cmp	r5, #1
2400e5cc:	d03c      	beq.n	2400e648 <dir_sdi+0xac>
2400e5ce:	4647      	mov	r7, r8
2400e5d0:	e037      	b.n	2400e642 <dir_sdi+0xa6>
		switch (fs->fs_type) {
2400e5d2:	783b      	ldrb	r3, [r7, #0]
2400e5d4:	2b02      	cmp	r3, #2
2400e5d6:	d06e      	beq.n	2400e6b6 <dir_sdi+0x11a>
2400e5d8:	2b03      	cmp	r3, #3
2400e5da:	d05c      	beq.n	2400e696 <dir_sdi+0xfa>
2400e5dc:	2b01      	cmp	r3, #1
2400e5de:	d133      	bne.n	2400e648 <dir_sdi+0xac>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e5e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
2400e5e2:	eb05 0a55 	add.w	sl, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e5e6:	4638      	mov	r0, r7
2400e5e8:	eb01 215a 	add.w	r1, r1, sl, lsr #9
2400e5ec:	f7ff fa38 	bl	2400da60 <move_window>
2400e5f0:	2800      	cmp	r0, #0
2400e5f2:	d14d      	bne.n	2400e690 <dir_sdi+0xf4>
			wc = fs->win[bc++ % SS(fs)];
2400e5f4:	f3ca 0308 	ubfx	r3, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e5f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
2400e5fa:	f10a 0a01 	add.w	sl, sl, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e5fe:	4638      	mov	r0, r7
			wc = fs->win[bc++ % SS(fs)];
2400e600:	443b      	add	r3, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e602:	eb01 215a 	add.w	r1, r1, sl, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400e606:	f893 b034 	ldrb.w	fp, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e60a:	f7ff fa29 	bl	2400da60 <move_window>
2400e60e:	2800      	cmp	r0, #0
2400e610:	d13e      	bne.n	2400e690 <dir_sdi+0xf4>
			wc |= fs->win[bc % SS(fs)] << 8;
2400e612:	f3ca 0a08 	ubfx	sl, sl, #0, #9
2400e616:	44ba      	add	sl, r7
2400e618:	f89a 3034 	ldrb.w	r3, [sl, #52]	; 0x34
2400e61c:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400e620:	07eb      	lsls	r3, r5, #31
2400e622:	bf4c      	ite	mi
2400e624:	ea4f 151b 	movmi.w	r5, fp, lsr #4
2400e628:	f3cb 050b 	ubfxpl	r5, fp, #0, #12
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
2400e62c:	2d01      	cmp	r5, #1
2400e62e:	d90b      	bls.n	2400e648 <dir_sdi+0xac>
2400e630:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400e634:	42ab      	cmp	r3, r5
2400e636:	d907      	bls.n	2400e648 <dir_sdi+0xac>
			ofs -= csz;
2400e638:	eba4 0409 	sub.w	r4, r4, r9
		while (ofs >= csz) {				/* Follow cluster chain */
2400e63c:	45a1      	cmp	r9, r4
2400e63e:	d84a      	bhi.n	2400e6d6 <dir_sdi+0x13a>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
2400e640:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400e642:	69bb      	ldr	r3, [r7, #24]
2400e644:	42ab      	cmp	r3, r5
2400e646:	d8c4      	bhi.n	2400e5d2 <dir_sdi+0x36>
		switch (fs->fs_type) {
2400e648:	2002      	movs	r0, #2
}
2400e64a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
2400e64e:	f898 3000 	ldrb.w	r3, [r8]
2400e652:	2b02      	cmp	r3, #2
2400e654:	d816      	bhi.n	2400e684 <dir_sdi+0xe8>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
2400e656:	f8b8 3008 	ldrh.w	r3, [r8, #8]
2400e65a:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
2400e65e:	d9f3      	bls.n	2400e648 <dir_sdi+0xac>
		dp->sect = fs->dirbase;
2400e660:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	dp->clust = clst;					/* Current cluster# */
2400e664:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
2400e668:	2b00      	cmp	r3, #0
2400e66a:	d0ed      	beq.n	2400e648 <dir_sdi+0xac>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
2400e66c:	f108 0834 	add.w	r8, r8, #52	; 0x34
2400e670:	f3c4 0108 	ubfx	r1, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
2400e674:	eb03 2354 	add.w	r3, r3, r4, lsr #9
	return FR_OK;
2400e678:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
2400e67a:	4441      	add	r1, r8
2400e67c:	e9c6 3107 	strd	r3, r1, [r6, #28]
}
2400e680:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		clst = fs->dirbase;
2400e684:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
2400e688:	2b00      	cmp	r3, #0
2400e68a:	d0e4      	beq.n	2400e656 <dir_sdi+0xba>
2400e68c:	461d      	mov	r5, r3
2400e68e:	e794      	b.n	2400e5ba <dir_sdi+0x1e>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
2400e690:	2001      	movs	r0, #1
}
2400e692:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400e696:	6a79      	ldr	r1, [r7, #36]	; 0x24
2400e698:	4638      	mov	r0, r7
2400e69a:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
2400e69e:	f7ff f9df 	bl	2400da60 <move_window>
2400e6a2:	2800      	cmp	r0, #0
2400e6a4:	d1f4      	bne.n	2400e690 <dir_sdi+0xf4>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400e6a6:	00ab      	lsls	r3, r5, #2
2400e6a8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400e6ac:	443b      	add	r3, r7
2400e6ae:	6b5d      	ldr	r5, [r3, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400e6b0:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			break;
2400e6b4:	e7ba      	b.n	2400e62c <dir_sdi+0x90>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400e6b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
2400e6b8:	4638      	mov	r0, r7
2400e6ba:	eb01 2115 	add.w	r1, r1, r5, lsr #8
2400e6be:	f7ff f9cf 	bl	2400da60 <move_window>
2400e6c2:	2800      	cmp	r0, #0
2400e6c4:	d1e4      	bne.n	2400e690 <dir_sdi+0xf4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400e6c6:	006b      	lsls	r3, r5, #1
2400e6c8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
2400e6cc:	443b      	add	r3, r7
2400e6ce:	8e9d      	ldrh	r5, [r3, #52]	; 0x34
			break;
2400e6d0:	e7ac      	b.n	2400e62c <dir_sdi+0x90>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400e6d2:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400e6d6:	3b02      	subs	r3, #2
	clst -= 2;
2400e6d8:	1eaa      	subs	r2, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400e6da:	429a      	cmp	r2, r3
2400e6dc:	d206      	bcs.n	2400e6ec <dir_sdi+0x150>
	return clst * fs->csize + fs->database;
2400e6de:	f8b8 100a 	ldrh.w	r1, [r8, #10]
2400e6e2:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
2400e6e6:	fb02 3301 	mla	r3, r2, r1, r3
2400e6ea:	e7bb      	b.n	2400e664 <dir_sdi+0xc8>
		dp->sect = fs->dirbase;
2400e6ec:	2300      	movs	r3, #0
2400e6ee:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
2400e6f2:	e7a9      	b.n	2400e648 <dir_sdi+0xac>

2400e6f4 <dir_find>:
{
2400e6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
2400e6f8:	2100      	movs	r1, #0
{
2400e6fa:	b085      	sub	sp, #20
2400e6fc:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
2400e6fe:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
2400e702:	f7ff ff4b 	bl	2400e59c <dir_sdi>
	if (res != FR_OK) return res;
2400e706:	4607      	mov	r7, r0
2400e708:	b9e8      	cbnz	r0, 2400e746 <dir_find+0x52>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2400e70a:	f04f 09ff 	mov.w	r9, #255	; 0xff
2400e70e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		res = move_window(fs, dp->sect);
2400e712:	69e6      	ldr	r6, [r4, #28]
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2400e714:	464f      	mov	r7, r9
2400e716:	6323      	str	r3, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e718:	f8d8 5030 	ldr.w	r5, [r8, #48]	; 0x30
2400e71c:	42b5      	cmp	r5, r6
2400e71e:	d018      	beq.n	2400e752 <dir_find+0x5e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400e720:	f898 3003 	ldrb.w	r3, [r8, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400e724:	f108 0134 	add.w	r1, r8, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400e728:	2b00      	cmp	r3, #0
2400e72a:	f040 8085 	bne.w	2400e838 <dir_find+0x144>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400e72e:	2301      	movs	r3, #1
2400e730:	4632      	mov	r2, r6
2400e732:	f898 0001 	ldrb.w	r0, [r8, #1]
2400e736:	f7fe ffd9 	bl	2400d6ec <disk_read>
2400e73a:	b140      	cbz	r0, 2400e74e <dir_find+0x5a>
			fs->winsect = sector;
2400e73c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
2400e740:	2701      	movs	r7, #1
			fs->winsect = sector;
2400e742:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
}
2400e746:	4638      	mov	r0, r7
2400e748:	b005      	add	sp, #20
2400e74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
2400e74e:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
		c = dp->dir[DIR_Name];
2400e752:	6a25      	ldr	r5, [r4, #32]
2400e754:	782e      	ldrb	r6, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2400e756:	b346      	cbz	r6, 2400e7aa <dir_find+0xb6>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
2400e758:	7aeb      	ldrb	r3, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
2400e75a:	2ee5      	cmp	r6, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
2400e75c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
2400e760:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
2400e762:	d004      	beq.n	2400e76e <dir_find+0x7a>
2400e764:	071b      	lsls	r3, r3, #28
2400e766:	d525      	bpl.n	2400e7b4 <dir_find+0xc0>
2400e768:	2a0f      	cmp	r2, #15
2400e76a:	f000 8093 	beq.w	2400e894 <dir_find+0x1a0>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2400e76e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400e772:	27ff      	movs	r7, #255	; 0xff
2400e774:	6323      	str	r3, [r4, #48]	; 0x30
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400e776:	6965      	ldr	r5, [r4, #20]
	FATFS *fs = dp->obj.fs;
2400e778:	6823      	ldr	r3, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400e77a:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400e77c:	69e6      	ldr	r6, [r4, #28]
2400e77e:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2400e782:	d212      	bcs.n	2400e7aa <dir_find+0xb6>
2400e784:	b18e      	cbz	r6, 2400e7aa <dir_find+0xb6>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400e786:	f3c5 0208 	ubfx	r2, r5, #0, #9
2400e78a:	b94a      	cbnz	r2, 2400e7a0 <dir_find+0xac>
		dp->sect++;				/* Next sector */
2400e78c:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
2400e78e:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
2400e790:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
2400e792:	2900      	cmp	r1, #0
2400e794:	d15c      	bne.n	2400e850 <dir_find+0x15c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
2400e796:	8919      	ldrh	r1, [r3, #8]
2400e798:	ebb1 1f55 	cmp.w	r1, r5, lsr #5
2400e79c:	f240 813a 	bls.w	2400ea14 <dir_find+0x320>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400e7a0:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
2400e7a2:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400e7a4:	4413      	add	r3, r2
2400e7a6:	6223      	str	r3, [r4, #32]
	} while (res == FR_OK);
2400e7a8:	e7b6      	b.n	2400e718 <dir_find+0x24>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2400e7aa:	2704      	movs	r7, #4
}
2400e7ac:	4638      	mov	r0, r7
2400e7ae:	b005      	add	sp, #20
2400e7b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
2400e7b4:	2a0f      	cmp	r2, #15
2400e7b6:	d06d      	beq.n	2400e894 <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
2400e7b8:	2f00      	cmp	r7, #0
2400e7ba:	f000 80d9 	beq.w	2400e970 <dir_find+0x27c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
2400e7be:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
2400e7c2:	f017 0701 	ands.w	r7, r7, #1
2400e7c6:	d1d2      	bne.n	2400e76e <dir_find+0x7a>
	} while (--cnt && r == 0);
2400e7c8:	782a      	ldrb	r2, [r5, #0]
2400e7ca:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
2400e7ce:	429a      	cmp	r2, r3
2400e7d0:	d1cd      	bne.n	2400e76e <dir_find+0x7a>
2400e7d2:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
2400e7d6:	786b      	ldrb	r3, [r5, #1]
2400e7d8:	429a      	cmp	r2, r3
2400e7da:	d1c8      	bne.n	2400e76e <dir_find+0x7a>
2400e7dc:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
2400e7e0:	78ab      	ldrb	r3, [r5, #2]
2400e7e2:	429a      	cmp	r2, r3
2400e7e4:	d1c3      	bne.n	2400e76e <dir_find+0x7a>
2400e7e6:	78ea      	ldrb	r2, [r5, #3]
2400e7e8:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
2400e7ec:	429a      	cmp	r2, r3
2400e7ee:	d1be      	bne.n	2400e76e <dir_find+0x7a>
2400e7f0:	792a      	ldrb	r2, [r5, #4]
2400e7f2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
2400e7f6:	429a      	cmp	r2, r3
2400e7f8:	d1b9      	bne.n	2400e76e <dir_find+0x7a>
2400e7fa:	796a      	ldrb	r2, [r5, #5]
2400e7fc:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
2400e800:	429a      	cmp	r2, r3
2400e802:	d1b4      	bne.n	2400e76e <dir_find+0x7a>
2400e804:	79aa      	ldrb	r2, [r5, #6]
2400e806:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
2400e80a:	429a      	cmp	r2, r3
2400e80c:	d1af      	bne.n	2400e76e <dir_find+0x7a>
2400e80e:	79ea      	ldrb	r2, [r5, #7]
2400e810:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
2400e814:	429a      	cmp	r2, r3
2400e816:	d1aa      	bne.n	2400e76e <dir_find+0x7a>
2400e818:	7a2a      	ldrb	r2, [r5, #8]
2400e81a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
2400e81e:	429a      	cmp	r2, r3
2400e820:	d1a5      	bne.n	2400e76e <dir_find+0x7a>
2400e822:	7a6a      	ldrb	r2, [r5, #9]
2400e824:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
2400e828:	429a      	cmp	r2, r3
2400e82a:	d1a0      	bne.n	2400e76e <dir_find+0x7a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
2400e82c:	7aaa      	ldrb	r2, [r5, #10]
2400e82e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
2400e832:	429a      	cmp	r2, r3
2400e834:	d19b      	bne.n	2400e76e <dir_find+0x7a>
2400e836:	e786      	b.n	2400e746 <dir_find+0x52>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400e838:	2301      	movs	r3, #1
2400e83a:	462a      	mov	r2, r5
2400e83c:	f898 0001 	ldrb.w	r0, [r8, #1]
2400e840:	9100      	str	r1, [sp, #0]
2400e842:	f7fe ff63 	bl	2400d70c <disk_write>
2400e846:	9900      	ldr	r1, [sp, #0]
2400e848:	2800      	cmp	r0, #0
2400e84a:	d06e      	beq.n	2400e92a <dir_find+0x236>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2400e84c:	2701      	movs	r7, #1
2400e84e:	e77a      	b.n	2400e746 <dir_find+0x52>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2400e850:	8958      	ldrh	r0, [r3, #10]
2400e852:	3801      	subs	r0, #1
2400e854:	ea10 2055 	ands.w	r0, r0, r5, lsr #9
2400e858:	d1a2      	bne.n	2400e7a0 <dir_find+0xac>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400e85a:	4618      	mov	r0, r3
2400e85c:	9201      	str	r2, [sp, #4]
2400e85e:	9300      	str	r3, [sp, #0]
2400e860:	f7ff fb34 	bl	2400decc <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400e864:	2801      	cmp	r0, #1
2400e866:	f240 80d9 	bls.w	2400ea1c <dir_find+0x328>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400e86a:	1c43      	adds	r3, r0, #1
2400e86c:	d0ee      	beq.n	2400e84c <dir_find+0x158>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2400e86e:	9b00      	ldr	r3, [sp, #0]
2400e870:	6999      	ldr	r1, [r3, #24]
2400e872:	4288      	cmp	r0, r1
2400e874:	f080 80ce 	bcs.w	2400ea14 <dir_find+0x320>
				dp->clust = clst;		/* Initialize data for new cluster */
2400e878:	61a0      	str	r0, [r4, #24]
	clst -= 2;
2400e87a:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400e87c:	6999      	ldr	r1, [r3, #24]
2400e87e:	9a01      	ldr	r2, [sp, #4]
2400e880:	3902      	subs	r1, #2
2400e882:	4288      	cmp	r0, r1
2400e884:	f080 80cc 	bcs.w	2400ea20 <dir_find+0x32c>
	return clst * fs->csize + fs->database;
2400e888:	8959      	ldrh	r1, [r3, #10]
2400e88a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
2400e88c:	fb00 6601 	mla	r6, r0, r1, r6
				dp->sect = clust2sect(fs, clst);
2400e890:	61e6      	str	r6, [r4, #28]
2400e892:	e785      	b.n	2400e7a0 <dir_find+0xac>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
2400e894:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
2400e898:	0658      	lsls	r0, r3, #25
2400e89a:	f53f af6c 	bmi.w	2400e776 <dir_find+0x82>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
2400e89e:	0671      	lsls	r1, r6, #25
2400e8a0:	f140 80b3 	bpl.w	2400ea0a <dir_find+0x316>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
2400e8a4:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
2400e8a6:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
2400e8aa:	f895 900d 	ldrb.w	r9, [r5, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
2400e8ae:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400e8b0:	7b6b      	ldrb	r3, [r5, #13]
2400e8b2:	454b      	cmp	r3, r9
2400e8b4:	f040 80ac 	bne.w	2400ea10 <dir_find+0x31c>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
2400e8b8:	8b6b      	ldrh	r3, [r5, #26]
2400e8ba:	2b00      	cmp	r3, #0
2400e8bc:	f040 80a8 	bne.w	2400ea10 <dir_find+0x31c>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
2400e8c0:	782f      	ldrb	r7, [r5, #0]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
2400e8c2:	2101      	movs	r1, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400e8c4:	f8d8 200c 	ldr.w	r2, [r8, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
2400e8c8:	f007 073f 	and.w	r7, r7, #63	; 0x3f
2400e8cc:	f8df a178 	ldr.w	sl, [pc, #376]	; 2400ea48 <dir_find+0x354>
2400e8d0:	9602      	str	r6, [sp, #8]
2400e8d2:	462e      	mov	r6, r5
2400e8d4:	3f01      	subs	r7, #1
2400e8d6:	f10a 0b0d 	add.w	fp, sl, #13
2400e8da:	4615      	mov	r5, r2
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400e8dc:	9203      	str	r2, [sp, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
2400e8de:	eb07 0347 	add.w	r3, r7, r7, lsl #1
2400e8e2:	f8cd 8000 	str.w	r8, [sp]
2400e8e6:	9401      	str	r4, [sp, #4]
2400e8e8:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
2400e8ec:	e010      	b.n	2400e910 <dir_find+0x21c>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
2400e8ee:	2ffe      	cmp	r7, #254	; 0xfe
2400e8f0:	4620      	mov	r0, r4
2400e8f2:	d816      	bhi.n	2400e922 <dir_find+0x22e>
2400e8f4:	f001 fe62 	bl	240105bc <ff_wtoupper>
2400e8f8:	4680      	mov	r8, r0
2400e8fa:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
2400e8fe:	3701      	adds	r7, #1
2400e900:	f001 fe5c 	bl	240105bc <ff_wtoupper>
2400e904:	4580      	cmp	r8, r0
2400e906:	4621      	mov	r1, r4
2400e908:	d10b      	bne.n	2400e922 <dir_find+0x22e>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
2400e90a:	45d3      	cmp	fp, sl
2400e90c:	f000 808a 	beq.w	2400ea24 <dir_find+0x330>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
2400e910:	f81a 3b01 	ldrb.w	r3, [sl], #1
2400e914:	5af4      	ldrh	r4, [r6, r3]
		if (wc) {
2400e916:	2900      	cmp	r1, #0
2400e918:	d1e9      	bne.n	2400e8ee <dir_find+0x1fa>
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e91a:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e91e:	429c      	cmp	r4, r3
2400e920:	d0f3      	beq.n	2400e90a <dir_find+0x216>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400e922:	e9dd 8400 	ldrd	r8, r4, [sp]
2400e926:	27ff      	movs	r7, #255	; 0xff
2400e928:	e725      	b.n	2400e776 <dir_find+0x82>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400e92a:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
2400e92e:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400e932:	1aea      	subs	r2, r5, r3
2400e934:	f8d8 301c 	ldr.w	r3, [r8, #28]
2400e938:	429a      	cmp	r2, r3
2400e93a:	f4bf aef8 	bcs.w	2400e72e <dir_find+0x3a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e93e:	f898 a002 	ldrb.w	sl, [r8, #2]
2400e942:	f1ba 0f01 	cmp.w	sl, #1
2400e946:	f67f aef2 	bls.w	2400e72e <dir_find+0x3a>
2400e94a:	468b      	mov	fp, r1
2400e94c:	e001      	b.n	2400e952 <dir_find+0x25e>
					wsect += fs->fsize;
2400e94e:	f8d8 301c 	ldr.w	r3, [r8, #28]
2400e952:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e954:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
2400e958:	2301      	movs	r3, #1
2400e95a:	4659      	mov	r1, fp
2400e95c:	462a      	mov	r2, r5
2400e95e:	f898 0001 	ldrb.w	r0, [r8, #1]
2400e962:	f7fe fed3 	bl	2400d70c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e966:	f1ba 0f01 	cmp.w	sl, #1
2400e96a:	d1f0      	bne.n	2400e94e <dir_find+0x25a>
2400e96c:	4659      	mov	r1, fp
2400e96e:	e6de      	b.n	2400e72e <dir_find+0x3a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400e970:	782a      	ldrb	r2, [r5, #0]
2400e972:	7869      	ldrb	r1, [r5, #1]
2400e974:	01d0      	lsls	r0, r2, #7
2400e976:	78ae      	ldrb	r6, [r5, #2]
2400e978:	78eb      	ldrb	r3, [r5, #3]
2400e97a:	ea40 0052 	orr.w	r0, r0, r2, lsr #1
2400e97e:	792a      	ldrb	r2, [r5, #4]
2400e980:	f895 a005 	ldrb.w	sl, [r5, #5]
2400e984:	4408      	add	r0, r1
2400e986:	f895 e006 	ldrb.w	lr, [r5, #6]
2400e98a:	f895 c007 	ldrb.w	ip, [r5, #7]
2400e98e:	f3c0 0146 	ubfx	r1, r0, #1, #7
2400e992:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
2400e996:	7a68      	ldrb	r0, [r5, #9]
2400e998:	fa56 f181 	uxtab	r1, r6, r1
2400e99c:	7a2e      	ldrb	r6, [r5, #8]
2400e99e:	f3c1 0b46 	ubfx	fp, r1, #1, #7
2400e9a2:	ea4b 1bc1 	orr.w	fp, fp, r1, lsl #7
2400e9a6:	7aa9      	ldrb	r1, [r5, #10]
2400e9a8:	fa53 fb8b 	uxtab	fp, r3, fp
2400e9ac:	f3cb 0346 	ubfx	r3, fp, #1, #7
2400e9b0:	ea43 13cb 	orr.w	r3, r3, fp, lsl #7
2400e9b4:	fa52 f383 	uxtab	r3, r2, r3
2400e9b8:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400e9bc:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400e9c0:	fa5a f282 	uxtab	r2, sl, r2
2400e9c4:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400e9c8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400e9cc:	fa5e f383 	uxtab	r3, lr, r3
2400e9d0:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400e9d4:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400e9d8:	fa5c f282 	uxtab	r2, ip, r2
2400e9dc:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400e9e0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400e9e4:	fa56 f383 	uxtab	r3, r6, r3
2400e9e8:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400e9ec:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400e9f0:	fa50 f282 	uxtab	r2, r0, r2
2400e9f4:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400e9f8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400e9fc:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
2400ea00:	b2db      	uxtb	r3, r3
2400ea02:	4599      	cmp	r9, r3
2400ea04:	f47f aedb 	bne.w	2400e7be <dir_find+0xca>
2400ea08:	e69d      	b.n	2400e746 <dir_find+0x52>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400ea0a:	42b7      	cmp	r7, r6
2400ea0c:	f43f af50 	beq.w	2400e8b0 <dir_find+0x1bc>
2400ea10:	27ff      	movs	r7, #255	; 0xff
2400ea12:	e6b0      	b.n	2400e776 <dir_find+0x82>
				dp->sect = 0; return FR_NO_FILE;
2400ea14:	2300      	movs	r3, #0
2400ea16:	2704      	movs	r7, #4
2400ea18:	61e3      	str	r3, [r4, #28]
	} while (res == FR_OK);
2400ea1a:	e694      	b.n	2400e746 <dir_find+0x52>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400ea1c:	2702      	movs	r7, #2
2400ea1e:	e692      	b.n	2400e746 <dir_find+0x52>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400ea20:	4616      	mov	r6, r2
2400ea22:	e735      	b.n	2400e890 <dir_find+0x19c>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
2400ea24:	4635      	mov	r5, r6
2400ea26:	f8dd 8000 	ldr.w	r8, [sp]
2400ea2a:	782b      	ldrb	r3, [r5, #0]
2400ea2c:	065a      	lsls	r2, r3, #25
2400ea2e:	e9dd 4601 	ldrd	r4, r6, [sp, #4]
2400ea32:	d500      	bpl.n	2400ea36 <dir_find+0x342>
2400ea34:	b911      	cbnz	r1, 2400ea3c <dir_find+0x348>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400ea36:	3e01      	subs	r6, #1
2400ea38:	b2f7      	uxtb	r7, r6
2400ea3a:	e69c      	b.n	2400e776 <dir_find+0x82>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
2400ea3c:	9b03      	ldr	r3, [sp, #12]
2400ea3e:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
2400ea42:	2b00      	cmp	r3, #0
2400ea44:	d0f7      	beq.n	2400ea36 <dir_find+0x342>
2400ea46:	e7e3      	b.n	2400ea10 <dir_find+0x31c>
2400ea48:	2401a208 	.word	0x2401a208

2400ea4c <follow_path>:
{
2400ea4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
2400ea50:	780b      	ldrb	r3, [r1, #0]
{
2400ea52:	b083      	sub	sp, #12
2400ea54:	4688      	mov	r8, r1
2400ea56:	4607      	mov	r7, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
2400ea58:	2b2f      	cmp	r3, #47	; 0x2f
	FATFS *fs = obj->fs;
2400ea5a:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
2400ea5e:	d103      	bne.n	2400ea68 <follow_path+0x1c>
2400ea60:	f818 3f01 	ldrb.w	r3, [r8, #1]!
2400ea64:	2b2f      	cmp	r3, #47	; 0x2f
2400ea66:	d0fb      	beq.n	2400ea60 <follow_path+0x14>
2400ea68:	2b5c      	cmp	r3, #92	; 0x5c
2400ea6a:	d0f9      	beq.n	2400ea60 <follow_path+0x14>
		obj->sclust = 0;					/* Start from root directory */
2400ea6c:	2100      	movs	r1, #0
2400ea6e:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
2400ea70:	f898 3000 	ldrb.w	r3, [r8]
2400ea74:	2b1f      	cmp	r3, #31
2400ea76:	f240 8147 	bls.w	2400ed08 <follow_path+0x2bc>
2400ea7a:	465a      	mov	r2, fp
		if (w < ' ') break;				/* Break if end of the path name */
2400ea7c:	2b1f      	cmp	r3, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
2400ea7e:	68d5      	ldr	r5, [r2, #12]
		w = p[si++];					/* Get a character */
2400ea80:	b298      	uxth	r0, r3
		if (w < ' ') break;				/* Break if end of the path name */
2400ea82:	d929      	bls.n	2400ead8 <follow_path+0x8c>
2400ea84:	f1a5 0902 	sub.w	r9, r5, #2
2400ea88:	4646      	mov	r6, r8
		w = p[si++];					/* Get a character */
2400ea8a:	2401      	movs	r4, #1
2400ea8c:	e008      	b.n	2400eaa0 <follow_path+0x54>
		lfn[di++] = w;					/* Store the Unicode character */
2400ea8e:	f829 0f02 	strh.w	r0, [r9, #2]!
		w = p[si++];					/* Get a character */
2400ea92:	1c63      	adds	r3, r4, #1
2400ea94:	f816 0f01 	ldrb.w	r0, [r6, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
2400ea98:	281f      	cmp	r0, #31
2400ea9a:	f240 80f6 	bls.w	2400ec8a <follow_path+0x23e>
		w = p[si++];					/* Get a character */
2400ea9e:	461c      	mov	r4, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
2400eaa0:	282f      	cmp	r0, #47	; 0x2f
2400eaa2:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
2400eaa6:	d01d      	beq.n	2400eae4 <follow_path+0x98>
2400eaa8:	285c      	cmp	r0, #92	; 0x5c
2400eaaa:	d01b      	beq.n	2400eae4 <follow_path+0x98>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
2400eaac:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
2400eab0:	d00e      	beq.n	2400ead0 <follow_path+0x84>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
2400eab2:	2101      	movs	r1, #1
2400eab4:	f001 fd64 	bl	24010580 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
2400eab8:	b150      	cbz	r0, 2400ead0 <follow_path+0x84>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
2400eaba:	287f      	cmp	r0, #127	; 0x7f
2400eabc:	d8e7      	bhi.n	2400ea8e <follow_path+0x42>
	while (*str && *str != chr) str++;
2400eabe:	2322      	movs	r3, #34	; 0x22
2400eac0:	4aa5      	ldr	r2, [pc, #660]	; (2400ed58 <follow_path+0x30c>)
2400eac2:	e003      	b.n	2400eacc <follow_path+0x80>
2400eac4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
2400eac8:	2b00      	cmp	r3, #0
2400eaca:	d0e0      	beq.n	2400ea8e <follow_path+0x42>
2400eacc:	4298      	cmp	r0, r3
2400eace:	d1f9      	bne.n	2400eac4 <follow_path+0x78>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
2400ead0:	2006      	movs	r0, #6
}
2400ead2:	b003      	add	sp, #12
2400ead4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lfn[di] = 0;						/* LFN is created */
2400ead8:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
2400eada:	2006      	movs	r0, #6
	lfn[di] = 0;						/* LFN is created */
2400eadc:	802b      	strh	r3, [r5, #0]
}
2400eade:	b003      	add	sp, #12
2400eae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
2400eae4:	f818 3004 	ldrb.w	r3, [r8, r4]
2400eae8:	eb08 0204 	add.w	r2, r8, r4
2400eaec:	2b2f      	cmp	r3, #47	; 0x2f
2400eaee:	d002      	beq.n	2400eaf6 <follow_path+0xaa>
2400eaf0:	2b5c      	cmp	r3, #92	; 0x5c
2400eaf2:	f040 811e 	bne.w	2400ed32 <follow_path+0x2e6>
2400eaf6:	1c63      	adds	r3, r4, #1
2400eaf8:	4443      	add	r3, r8
2400eafa:	4698      	mov	r8, r3
2400eafc:	f813 2b01 	ldrb.w	r2, [r3], #1
2400eb00:	2a2f      	cmp	r2, #47	; 0x2f
2400eb02:	d0fa      	beq.n	2400eafa <follow_path+0xae>
2400eb04:	2a5c      	cmp	r2, #92	; 0x5c
2400eb06:	d0f8      	beq.n	2400eafa <follow_path+0xae>
	while (di) {						/* Snip off trailing spaces and dots if exist */
2400eb08:	f1ba 0f00 	cmp.w	sl, #0
2400eb0c:	d0e4      	beq.n	2400ead8 <follow_path+0x8c>
2400eb0e:	2603      	movs	r6, #3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
2400eb10:	2400      	movs	r4, #0
2400eb12:	eb05 024a 	add.w	r2, r5, sl, lsl #1
2400eb16:	e002      	b.n	2400eb1e <follow_path+0xd2>
	while (di) {						/* Snip off trailing spaces and dots if exist */
2400eb18:	f1ba 0a01 	subs.w	sl, sl, #1
2400eb1c:	d0dc      	beq.n	2400ead8 <follow_path+0x8c>
		w = lfn[di - 1];
2400eb1e:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
2400eb22:	2b20      	cmp	r3, #32
2400eb24:	d0f8      	beq.n	2400eb18 <follow_path+0xcc>
2400eb26:	2b2e      	cmp	r3, #46	; 0x2e
2400eb28:	d0f6      	beq.n	2400eb18 <follow_path+0xcc>
		*d++ = (BYTE)val;
2400eb2a:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
2400eb2e:	2100      	movs	r1, #0
		*d++ = (BYTE)val;
2400eb30:	f242 0220 	movw	r2, #8224	; 0x2020
	lfn[di] = 0;						/* LFN is created */
2400eb34:	f825 101a 	strh.w	r1, [r5, sl, lsl #1]
		*d++ = (BYTE)val;
2400eb38:	627b      	str	r3, [r7, #36]	; 0x24
2400eb3a:	62bb      	str	r3, [r7, #40]	; 0x28
2400eb3c:	2320      	movs	r3, #32
2400eb3e:	85ba      	strh	r2, [r7, #44]	; 0x2c
2400eb40:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
2400eb44:	8828      	ldrh	r0, [r5, #0]
2400eb46:	282e      	cmp	r0, #46	; 0x2e
2400eb48:	d002      	beq.n	2400eb50 <follow_path+0x104>
2400eb4a:	4298      	cmp	r0, r3
2400eb4c:	f040 80e5 	bne.w	2400ed1a <follow_path+0x2ce>
2400eb50:	462a      	mov	r2, r5
2400eb52:	2300      	movs	r3, #0
2400eb54:	f832 0f02 	ldrh.w	r0, [r2, #2]!
2400eb58:	461c      	mov	r4, r3
2400eb5a:	3301      	adds	r3, #1
2400eb5c:	2820      	cmp	r0, #32
2400eb5e:	d0f9      	beq.n	2400eb54 <follow_path+0x108>
2400eb60:	282e      	cmp	r0, #46	; 0x2e
2400eb62:	d0f7      	beq.n	2400eb54 <follow_path+0x108>
		w = lfn[si++];					/* Get an LFN character */
2400eb64:	3402      	adds	r4, #2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
2400eb66:	eb05 034a 	add.w	r3, r5, sl, lsl #1
2400eb6a:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
2400eb6e:	2a2e      	cmp	r2, #46	; 0x2e
2400eb70:	d002      	beq.n	2400eb78 <follow_path+0x12c>
2400eb72:	f1ba 0a01 	subs.w	sl, sl, #1
2400eb76:	d1f8      	bne.n	2400eb6a <follow_path+0x11e>
		if (!w) break;					/* Break on end of the LFN */
2400eb78:	b3b0      	cbz	r0, 2400ebe8 <follow_path+0x19c>
2400eb7a:	2208      	movs	r2, #8
2400eb7c:	4641      	mov	r1, r8
2400eb7e:	2300      	movs	r3, #0
2400eb80:	46b8      	mov	r8, r7
2400eb82:	462f      	mov	r7, r5
2400eb84:	4615      	mov	r5, r2
2400eb86:	4699      	mov	r9, r3
2400eb88:	460a      	mov	r2, r1
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
2400eb8a:	2820      	cmp	r0, #32
2400eb8c:	d003      	beq.n	2400eb96 <follow_path+0x14a>
2400eb8e:	282e      	cmp	r0, #46	; 0x2e
2400eb90:	d14d      	bne.n	2400ec2e <follow_path+0x1e2>
2400eb92:	45a2      	cmp	sl, r4
2400eb94:	d04b      	beq.n	2400ec2e <follow_path+0x1e2>
			cf |= NS_LOSS | NS_LFN; continue;
2400eb96:	f046 0603 	orr.w	r6, r6, #3
2400eb9a:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN character */
2400eb9c:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
2400eba0:	3401      	adds	r4, #1
		if (!w) break;					/* Break on end of the LFN */
2400eba2:	2800      	cmp	r0, #0
2400eba4:	d1f1      	bne.n	2400eb8a <follow_path+0x13e>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
2400eba6:	4647      	mov	r7, r8
2400eba8:	4690      	mov	r8, r2
2400ebaa:	462a      	mov	r2, r5
2400ebac:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
2400ebb0:	29e5      	cmp	r1, #229	; 0xe5
2400ebb2:	d102      	bne.n	2400ebba <follow_path+0x16e>
2400ebb4:	2105      	movs	r1, #5
2400ebb6:	f887 1024 	strb.w	r1, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
2400ebba:	2a08      	cmp	r2, #8
2400ebbc:	f000 8093 	beq.w	2400ece6 <follow_path+0x29a>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2400ebc0:	f003 020c 	and.w	r2, r3, #12
2400ebc4:	2a0c      	cmp	r2, #12
2400ebc6:	d065      	beq.n	2400ec94 <follow_path+0x248>
2400ebc8:	f003 0303 	and.w	r3, r3, #3
2400ebcc:	2b03      	cmp	r3, #3
2400ebce:	d061      	beq.n	2400ec94 <follow_path+0x248>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
2400ebd0:	07b1      	lsls	r1, r6, #30
2400ebd2:	d409      	bmi.n	2400ebe8 <follow_path+0x19c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
2400ebd4:	2b01      	cmp	r3, #1
2400ebd6:	d102      	bne.n	2400ebde <follow_path+0x192>
2400ebd8:	f046 0610 	orr.w	r6, r6, #16
2400ebdc:	b2f6      	uxtb	r6, r6
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
2400ebde:	2a04      	cmp	r2, #4
2400ebe0:	d102      	bne.n	2400ebe8 <follow_path+0x19c>
2400ebe2:	f046 0608 	orr.w	r6, r6, #8
2400ebe6:	b2f6      	uxtb	r6, r6
			res = dir_find(dp);				/* Find an object with the segment name */
2400ebe8:	4638      	mov	r0, r7
	dp->fn[NSFLAG] = cf;	/* SFN is created */
2400ebea:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
2400ebee:	f7ff fd81 	bl	2400e6f4 <dir_find>
			ns = dp->fn[NSFLAG];
2400ebf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
2400ebf6:	2800      	cmp	r0, #0
2400ebf8:	d158      	bne.n	2400ecac <follow_path+0x260>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
2400ebfa:	075a      	lsls	r2, r3, #29
2400ebfc:	f53f af69 	bmi.w	2400ead2 <follow_path+0x86>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
2400ec00:	79bb      	ldrb	r3, [r7, #6]
2400ec02:	06db      	lsls	r3, r3, #27
2400ec04:	f140 8097 	bpl.w	2400ed36 <follow_path+0x2ea>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2400ec08:	697a      	ldr	r2, [r7, #20]
2400ec0a:	f10b 0334 	add.w	r3, fp, #52	; 0x34
	if (fs->fs_type == FS_FAT32) {
2400ec0e:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2400ec12:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
2400ec16:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2400ec18:	4413      	add	r3, r2
	cl = ld_word(dir + DIR_FstClusLO);
2400ec1a:	8b5a      	ldrh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
2400ec1c:	d102      	bne.n	2400ec24 <follow_path+0x1d8>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
2400ec1e:	8a9b      	ldrh	r3, [r3, #20]
2400ec20:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2400ec24:	60ba      	str	r2, [r7, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
2400ec26:	683a      	ldr	r2, [r7, #0]
		w = p[si++];					/* Get a character */
2400ec28:	f898 3000 	ldrb.w	r3, [r8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
2400ec2c:	e726      	b.n	2400ea7c <follow_path+0x30>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
2400ec2e:	454d      	cmp	r5, r9
2400ec30:	d91c      	bls.n	2400ec6c <follow_path+0x220>
2400ec32:	ebaa 0104 	sub.w	r1, sl, r4
2400ec36:	fab1 f181 	clz	r1, r1
2400ec3a:	0949      	lsrs	r1, r1, #5
2400ec3c:	b9b1      	cbnz	r1, 2400ec6c <follow_path+0x220>
		if (w >= 0x80) {				/* Non ASCII character */
2400ec3e:	287f      	cmp	r0, #127	; 0x7f
2400ec40:	d83c      	bhi.n	2400ecbc <follow_path+0x270>
	while (*str && *str != chr) str++;
2400ec42:	212b      	movs	r1, #43	; 0x2b
2400ec44:	f8df c118 	ldr.w	ip, [pc, #280]	; 2400ed60 <follow_path+0x314>
2400ec48:	e003      	b.n	2400ec52 <follow_path+0x206>
2400ec4a:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
2400ec4e:	2900      	cmp	r1, #0
2400ec50:	d052      	beq.n	2400ecf8 <follow_path+0x2ac>
2400ec52:	4281      	cmp	r1, r0
2400ec54:	d1f9      	bne.n	2400ec4a <follow_path+0x1fe>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
2400ec56:	f046 0603 	orr.w	r6, r6, #3
2400ec5a:	205f      	movs	r0, #95	; 0x5f
2400ec5c:	b2f6      	uxtb	r6, r6
		dp->fn[i++] = (BYTE)w;
2400ec5e:	eb08 0109 	add.w	r1, r8, r9
2400ec62:	f109 0901 	add.w	r9, r9, #1
2400ec66:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
2400ec6a:	e797      	b.n	2400eb9c <follow_path+0x150>
			if (ni == 11) {				/* Long extension */
2400ec6c:	2d0b      	cmp	r5, #11
2400ec6e:	d064      	beq.n	2400ed3a <follow_path+0x2ee>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
2400ec70:	45a2      	cmp	sl, r4
2400ec72:	d003      	beq.n	2400ec7c <follow_path+0x230>
2400ec74:	f046 0603 	orr.w	r6, r6, #3
2400ec78:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
2400ec7a:	d394      	bcc.n	2400eba6 <follow_path+0x15a>
			b <<= 2; continue;
2400ec7c:	009b      	lsls	r3, r3, #2
2400ec7e:	4654      	mov	r4, sl
			si = di; i = 8; ni = 11;	/* Enter extension section */
2400ec80:	250b      	movs	r5, #11
2400ec82:	f04f 0908 	mov.w	r9, #8
			b <<= 2; continue;
2400ec86:	b2db      	uxtb	r3, r3
2400ec88:	e788      	b.n	2400eb9c <follow_path+0x150>
	*path = &p[si];						/* Return pointer to the next segment */
2400ec8a:	46a2      	mov	sl, r4
2400ec8c:	4498      	add	r8, r3
2400ec8e:	2607      	movs	r6, #7
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
2400ec90:	2404      	movs	r4, #4
2400ec92:	e73e      	b.n	2400eb12 <follow_path+0xc6>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2400ec94:	f046 0602 	orr.w	r6, r6, #2
			res = dir_find(dp);				/* Find an object with the segment name */
2400ec98:	4638      	mov	r0, r7
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2400ec9a:	b2f6      	uxtb	r6, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
2400ec9c:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
2400eca0:	f7ff fd28 	bl	2400e6f4 <dir_find>
			ns = dp->fn[NSFLAG];
2400eca4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
2400eca8:	2800      	cmp	r0, #0
2400ecaa:	d0a6      	beq.n	2400ebfa <follow_path+0x1ae>
				if (res == FR_NO_FILE) {	/* Object is not found */
2400ecac:	2804      	cmp	r0, #4
2400ecae:	f47f af10 	bne.w	2400ead2 <follow_path+0x86>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
2400ecb2:	f013 0f04 	tst.w	r3, #4
2400ecb6:	bf08      	it	eq
2400ecb8:	2005      	moveq	r0, #5
2400ecba:	e70a      	b.n	2400ead2 <follow_path+0x86>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
2400ecbc:	e9cd 3200 	strd	r3, r2, [sp]
2400ecc0:	f001 fc5e 	bl	24010580 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400ecc4:	e9dd 3200 	ldrd	r3, r2, [sp]
2400ecc8:	b918      	cbnz	r0, 2400ecd2 <follow_path+0x286>
			cf |= NS_LFN;				/* Force create LFN entry */
2400ecca:	f046 0602 	orr.w	r6, r6, #2
2400ecce:	b2f6      	uxtb	r6, r6
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
2400ecd0:	e7c1      	b.n	2400ec56 <follow_path+0x20a>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400ecd2:	4922      	ldr	r1, [pc, #136]	; (2400ed5c <follow_path+0x310>)
			cf |= NS_LFN;				/* Force create LFN entry */
2400ecd4:	f046 0602 	orr.w	r6, r6, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400ecd8:	4408      	add	r0, r1
			cf |= NS_LFN;				/* Force create LFN entry */
2400ecda:	b2f6      	uxtb	r6, r6
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400ecdc:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
2400ece0:	2800      	cmp	r0, #0
2400ece2:	d0b8      	beq.n	2400ec56 <follow_path+0x20a>
2400ece4:	e7ad      	b.n	2400ec42 <follow_path+0x1f6>
	if (ni == 8) b <<= 2;
2400ece6:	009a      	lsls	r2, r3, #2
2400ece8:	f002 020c 	and.w	r2, r2, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2400ecec:	2a0c      	cmp	r2, #12
2400ecee:	d0d1      	beq.n	2400ec94 <follow_path+0x248>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
2400ecf0:	07b0      	lsls	r0, r6, #30
2400ecf2:	f57f af74 	bpl.w	2400ebde <follow_path+0x192>
2400ecf6:	e777      	b.n	2400ebe8 <follow_path+0x19c>
				if (IsUpper(w)) {		/* ASCII large capital */
2400ecf8:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
2400ecfc:	2919      	cmp	r1, #25
2400ecfe:	d80f      	bhi.n	2400ed20 <follow_path+0x2d4>
					b |= 2;
2400ed00:	f043 0302 	orr.w	r3, r3, #2
		dp->fn[i++] = (BYTE)w;
2400ed04:	b2c0      	uxtb	r0, r0
2400ed06:	e7aa      	b.n	2400ec5e <follow_path+0x212>
		dp->fn[NSFLAG] = NS_NONAME;
2400ed08:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
2400ed0a:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
2400ed0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
2400ed10:	b003      	add	sp, #12
2400ed12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
2400ed16:	f7ff bc41 	b.w	2400e59c <dir_sdi>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
2400ed1a:	4626      	mov	r6, r4
2400ed1c:	2401      	movs	r4, #1
2400ed1e:	e722      	b.n	2400eb66 <follow_path+0x11a>
					if (IsLower(w)) {	/* ASCII small capital */
2400ed20:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
2400ed24:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
2400ed26:	bf9c      	itt	ls
2400ed28:	3820      	subls	r0, #32
2400ed2a:	f043 0301 	orrls.w	r3, r3, #1
		dp->fn[i++] = (BYTE)w;
2400ed2e:	b2c0      	uxtb	r0, r0
2400ed30:	e795      	b.n	2400ec5e <follow_path+0x212>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
2400ed32:	4690      	mov	r8, r2
2400ed34:	e6e8      	b.n	2400eb08 <follow_path+0xbc>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
2400ed36:	2005      	movs	r0, #5
2400ed38:	e6cb      	b.n	2400ead2 <follow_path+0x86>
				cf |= NS_LOSS | NS_LFN; break;
2400ed3a:	4647      	mov	r7, r8
2400ed3c:	4690      	mov	r8, r2
2400ed3e:	f046 0603 	orr.w	r6, r6, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
2400ed42:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
				cf |= NS_LOSS | NS_LFN; break;
2400ed46:	b2f6      	uxtb	r6, r6
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
2400ed48:	2ae5      	cmp	r2, #229	; 0xe5
2400ed4a:	f47f af39 	bne.w	2400ebc0 <follow_path+0x174>
2400ed4e:	2205      	movs	r2, #5
2400ed50:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
2400ed54:	e734      	b.n	2400ebc0 <follow_path+0x174>
2400ed56:	bf00      	nop
2400ed58:	2401a174 	.word	0x2401a174
2400ed5c:	2401a188 	.word	0x2401a188
2400ed60:	2401a180 	.word	0x2401a180

2400ed64 <dir_next>:
{
2400ed64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400ed68:	69c3      	ldr	r3, [r0, #28]
{
2400ed6a:	b085      	sub	sp, #20
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400ed6c:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400ed6e:	2b00      	cmp	r3, #0
2400ed70:	d03d      	beq.n	2400edee <dir_next+0x8a>
2400ed72:	3520      	adds	r5, #32
2400ed74:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2400ed78:	d239      	bcs.n	2400edee <dir_next+0x8a>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400ed7a:	f3c5 0808 	ubfx	r8, r5, #0, #9
2400ed7e:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
2400ed80:	6807      	ldr	r7, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400ed82:	f1b8 0f00 	cmp.w	r8, #0
2400ed86:	d008      	beq.n	2400ed9a <dir_next+0x36>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400ed88:	f107 0634 	add.w	r6, r7, #52	; 0x34
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400ed8c:	4446      	add	r6, r8
	return FR_OK;
2400ed8e:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
2400ed90:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400ed92:	6226      	str	r6, [r4, #32]
}
2400ed94:	b005      	add	sp, #20
2400ed96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->sect++;				/* Next sector */
2400ed9a:	460e      	mov	r6, r1
2400ed9c:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
2400ed9e:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
2400eda0:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
2400eda2:	b341      	cbz	r1, 2400edf6 <dir_next+0x92>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2400eda4:	897b      	ldrh	r3, [r7, #10]
2400eda6:	3b01      	subs	r3, #1
2400eda8:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
2400edac:	9300      	str	r3, [sp, #0]
2400edae:	d1eb      	bne.n	2400ed88 <dir_next+0x24>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400edb0:	4638      	mov	r0, r7
2400edb2:	f7ff f88b 	bl	2400decc <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400edb6:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400edb8:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400edba:	d924      	bls.n	2400ee06 <dir_next+0xa2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400edbc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
2400edc0:	d023      	beq.n	2400ee0a <dir_next+0xa6>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2400edc2:	69bb      	ldr	r3, [r7, #24]
2400edc4:	4283      	cmp	r3, r0
2400edc6:	d922      	bls.n	2400ee0e <dir_next+0xaa>
	clst -= 2;
2400edc8:	1e83      	subs	r3, r0, #2
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400edca:	f107 0634 	add.w	r6, r7, #52	; 0x34
2400edce:	4619      	mov	r1, r3
	clst -= 2;
2400edd0:	9301      	str	r3, [sp, #4]
				dp->clust = clst;		/* Initialize data for new cluster */
2400edd2:	f8c4 9018 	str.w	r9, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400edd6:	69bb      	ldr	r3, [r7, #24]
2400edd8:	3b02      	subs	r3, #2
2400edda:	428b      	cmp	r3, r1
2400eddc:	d904      	bls.n	2400ede8 <dir_next+0x84>
	return clst * fs->csize + fs->database;
2400edde:	897a      	ldrh	r2, [r7, #10]
2400ede0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2400ede2:	fb01 3302 	mla	r3, r1, r2, r3
2400ede6:	9300      	str	r3, [sp, #0]
				dp->sect = clust2sect(fs, clst);
2400ede8:	9b00      	ldr	r3, [sp, #0]
2400edea:	61e3      	str	r3, [r4, #28]
2400edec:	e7ce      	b.n	2400ed8c <dir_next+0x28>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400edee:	2004      	movs	r0, #4
}
2400edf0:	b005      	add	sp, #20
2400edf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
2400edf6:	893b      	ldrh	r3, [r7, #8]
2400edf8:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
2400edfc:	d8c4      	bhi.n	2400ed88 <dir_next+0x24>
				dp->sect = 0; return FR_NO_FILE;
2400edfe:	2300      	movs	r3, #0
2400ee00:	2004      	movs	r0, #4
2400ee02:	61e3      	str	r3, [r4, #28]
2400ee04:	e7c6      	b.n	2400ed94 <dir_next+0x30>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400ee06:	2002      	movs	r0, #2
2400ee08:	e7c4      	b.n	2400ed94 <dir_next+0x30>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400ee0a:	2001      	movs	r0, #1
2400ee0c:	e7c2      	b.n	2400ed94 <dir_next+0x30>
					if (!stretch) {								/* If no stretch, report EOT */
2400ee0e:	2e00      	cmp	r6, #0
2400ee10:	d0f5      	beq.n	2400edfe <dir_next+0x9a>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
2400ee12:	69a1      	ldr	r1, [r4, #24]
2400ee14:	4620      	mov	r0, r4
2400ee16:	f7ff fb01 	bl	2400e41c <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
2400ee1a:	4681      	mov	r9, r0
2400ee1c:	2800      	cmp	r0, #0
2400ee1e:	d05a      	beq.n	2400eed6 <dir_next+0x172>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
2400ee20:	2801      	cmp	r0, #1
2400ee22:	d0f0      	beq.n	2400ee06 <dir_next+0xa2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
2400ee24:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
2400ee28:	d0ef      	beq.n	2400ee0a <dir_next+0xa6>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400ee2a:	78fb      	ldrb	r3, [r7, #3]
2400ee2c:	2b00      	cmp	r3, #0
2400ee2e:	d154      	bne.n	2400eeda <dir_next+0x176>
2400ee30:	f107 0b34 	add.w	fp, r7, #52	; 0x34
		*d++ = (BYTE)val;
2400ee34:	f44f 7200 	mov.w	r2, #512	; 0x200
2400ee38:	2100      	movs	r1, #0
2400ee3a:	4658      	mov	r0, fp
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
2400ee3c:	465e      	mov	r6, fp
		*d++ = (BYTE)val;
2400ee3e:	f008 fdff 	bl	24017a40 <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400ee42:	69bb      	ldr	r3, [r7, #24]
	clst -= 2;
2400ee44:	f1a9 0202 	sub.w	r2, r9, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400ee48:	3b02      	subs	r3, #2
	clst -= 2;
2400ee4a:	9201      	str	r2, [sp, #4]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400ee4c:	429a      	cmp	r2, r3
2400ee4e:	d267      	bcs.n	2400ef20 <dir_next+0x1bc>
	return clst * fs->csize + fs->database;
2400ee50:	4611      	mov	r1, r2
2400ee52:	897b      	ldrh	r3, [r7, #10]
2400ee54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
2400ee56:	fb01 2203 	mla	r2, r1, r3, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
2400ee5a:	633a      	str	r2, [r7, #48]	; 0x30
2400ee5c:	2b00      	cmp	r3, #0
2400ee5e:	d036      	beq.n	2400eece <dir_next+0x16a>
2400ee60:	2300      	movs	r3, #0
						fs->wflag = 1;
2400ee62:	e9cd 6402 	strd	r6, r4, [sp, #8]
2400ee66:	465e      	mov	r6, fp
2400ee68:	461c      	mov	r4, r3
2400ee6a:	46ab      	mov	fp, r5
2400ee6c:	4615      	mov	r5, r2
2400ee6e:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400ee72:	462a      	mov	r2, r5
2400ee74:	4631      	mov	r1, r6
2400ee76:	7878      	ldrb	r0, [r7, #1]
						fs->wflag = 1;
2400ee78:	70fb      	strb	r3, [r7, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400ee7a:	2301      	movs	r3, #1
2400ee7c:	f7fe fc46 	bl	2400d70c <disk_write>
2400ee80:	2800      	cmp	r0, #0
2400ee82:	d1c2      	bne.n	2400ee0a <dir_next+0xa6>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400ee84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
2400ee86:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400ee88:	1aea      	subs	r2, r5, r3
2400ee8a:	69fb      	ldr	r3, [r7, #28]
2400ee8c:	429a      	cmp	r2, r3
2400ee8e:	d212      	bcs.n	2400eeb6 <dir_next+0x152>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400ee90:	f897 a002 	ldrb.w	sl, [r7, #2]
2400ee94:	f1ba 0f01 	cmp.w	sl, #1
2400ee98:	d801      	bhi.n	2400ee9e <dir_next+0x13a>
2400ee9a:	e00c      	b.n	2400eeb6 <dir_next+0x152>
					wsect += fs->fsize;
2400ee9c:	69fb      	ldr	r3, [r7, #28]
2400ee9e:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400eea0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
2400eea4:	2301      	movs	r3, #1
2400eea6:	4631      	mov	r1, r6
2400eea8:	462a      	mov	r2, r5
2400eeaa:	7878      	ldrb	r0, [r7, #1]
2400eeac:	f7fe fc2e 	bl	2400d70c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400eeb0:	f1ba 0f01 	cmp.w	sl, #1
2400eeb4:	d1f2      	bne.n	2400ee9c <dir_next+0x138>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
2400eeb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2400eeb8:	3401      	adds	r4, #1
2400eeba:	1c5d      	adds	r5, r3, #1
2400eebc:	897b      	ldrh	r3, [r7, #10]
2400eebe:	42a3      	cmp	r3, r4
2400eec0:	633d      	str	r5, [r7, #48]	; 0x30
2400eec2:	d8d4      	bhi.n	2400ee6e <dir_next+0x10a>
2400eec4:	462a      	mov	r2, r5
2400eec6:	4623      	mov	r3, r4
2400eec8:	465d      	mov	r5, fp
2400eeca:	e9dd 6402 	ldrd	r6, r4, [sp, #8]
					fs->winsect -= n;							/* Restore window offset */
2400eece:	1ad2      	subs	r2, r2, r3
2400eed0:	9901      	ldr	r1, [sp, #4]
2400eed2:	633a      	str	r2, [r7, #48]	; 0x30
2400eed4:	e77d      	b.n	2400edd2 <dir_next+0x6e>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
2400eed6:	2007      	movs	r0, #7
2400eed8:	e75c      	b.n	2400ed94 <dir_next+0x30>
		wsect = fs->winsect;	/* Current sector number */
2400eeda:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400eede:	f107 0b34 	add.w	fp, r7, #52	; 0x34
2400eee2:	2301      	movs	r3, #1
2400eee4:	7878      	ldrb	r0, [r7, #1]
2400eee6:	4652      	mov	r2, sl
2400eee8:	4659      	mov	r1, fp
2400eeea:	f7fe fc0f 	bl	2400d70c <disk_write>
2400eeee:	2800      	cmp	r0, #0
2400eef0:	d18b      	bne.n	2400ee0a <dir_next+0xa6>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400eef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
2400eef4:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400eef6:	ebaa 0203 	sub.w	r2, sl, r3
2400eefa:	69fb      	ldr	r3, [r7, #28]
2400eefc:	429a      	cmp	r2, r3
2400eefe:	d299      	bcs.n	2400ee34 <dir_next+0xd0>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400ef00:	78be      	ldrb	r6, [r7, #2]
2400ef02:	2e01      	cmp	r6, #1
2400ef04:	d801      	bhi.n	2400ef0a <dir_next+0x1a6>
2400ef06:	e795      	b.n	2400ee34 <dir_next+0xd0>
2400ef08:	69fb      	ldr	r3, [r7, #28]
					wsect += fs->fsize;
2400ef0a:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400ef0c:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400ef0e:	2301      	movs	r3, #1
2400ef10:	4659      	mov	r1, fp
2400ef12:	4652      	mov	r2, sl
2400ef14:	7878      	ldrb	r0, [r7, #1]
2400ef16:	f7fe fbf9 	bl	2400d70c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400ef1a:	2e01      	cmp	r6, #1
2400ef1c:	d1f4      	bne.n	2400ef08 <dir_next+0x1a4>
2400ef1e:	e789      	b.n	2400ee34 <dir_next+0xd0>
	return clst * fs->csize + fs->database;
2400ef20:	897b      	ldrh	r3, [r7, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400ef22:	2200      	movs	r2, #0
2400ef24:	e799      	b.n	2400ee5a <dir_next+0xf6>
2400ef26:	bf00      	nop

2400ef28 <dir_register>:
{
2400ef28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2400ef2c:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
{
2400ef30:	b08d      	sub	sp, #52	; 0x34
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2400ef32:	f013 01a0 	ands.w	r1, r3, #160	; 0xa0
2400ef36:	9304      	str	r3, [sp, #16]
2400ef38:	f040 8312 	bne.w	2400f560 <dir_register+0x638>
	FATFS *fs = dp->obj.fs;
2400ef3c:	6803      	ldr	r3, [r0, #0]
2400ef3e:	4604      	mov	r4, r0
2400ef40:	9303      	str	r3, [sp, #12]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
2400ef42:	68db      	ldr	r3, [r3, #12]
2400ef44:	881a      	ldrh	r2, [r3, #0]
2400ef46:	2a00      	cmp	r2, #0
2400ef48:	f000 8473 	beq.w	2400f832 <dir_register+0x90a>
2400ef4c:	4689      	mov	r9, r1
2400ef4e:	f833 2f02 	ldrh.w	r2, [r3, #2]!
2400ef52:	f109 0901 	add.w	r9, r9, #1
2400ef56:	2a00      	cmp	r2, #0
2400ef58:	d1f9      	bne.n	2400ef4e <dir_register+0x26>
	mem_cpy(sn, dp->fn, 12);
2400ef5a:	f104 0624 	add.w	r6, r4, #36	; 0x24
			*d++ = *s++;
2400ef5e:	ab0c      	add	r3, sp, #48	; 0x30
2400ef60:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
2400ef64:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
2400ef68:	9b04      	ldr	r3, [sp, #16]
2400ef6a:	07dd      	lsls	r5, r3, #31
2400ef6c:	f140 8153 	bpl.w	2400f216 <dir_register+0x2ee>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
2400ef70:	2340      	movs	r3, #64	; 0x40
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ef72:	f8cd 9014 	str.w	r9, [sp, #20]
			*d++ = *s++;
2400ef76:	f89d a02e 	ldrb.w	sl, [sp, #46]	; 0x2e
		for (n = 1; n < 100; n++) {
2400ef7a:	2701      	movs	r7, #1
			*d++ = *s++;
2400ef7c:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ef80:	f04f 0b20 	mov.w	fp, #32
				if (sr & 0x10000) sr ^= 0x11021;
2400ef84:	4db1      	ldr	r5, [pc, #708]	; (2400f24c <dir_register+0x324>)
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ef86:	f8dd 900c 	ldr.w	r9, [sp, #12]
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
2400ef8a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
			*d++ = *s++;
2400ef8e:	9002      	str	r0, [sp, #8]
2400ef90:	9101      	str	r1, [sp, #4]
2400ef92:	9b02      	ldr	r3, [sp, #8]
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
2400ef94:	2f05      	cmp	r7, #5
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
2400ef96:	f8d9 100c 	ldr.w	r1, [r9, #12]
			*d++ = *s++;
2400ef9a:	6263      	str	r3, [r4, #36]	; 0x24
2400ef9c:	9b01      	ldr	r3, [sp, #4]
2400ef9e:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
2400efa2:	62a3      	str	r3, [r4, #40]	; 0x28
2400efa4:	f884 a02e 	strb.w	sl, [r4, #46]	; 0x2e
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
2400efa8:	f240 814e 	bls.w	2400f248 <dir_register+0x320>
		while (*lfn) {	/* Create a CRC */
2400efac:	880a      	ldrh	r2, [r1, #0]
2400efae:	2a00      	cmp	r2, #0
2400efb0:	f000 814a 	beq.w	2400f248 <dir_register+0x320>
				sr = (sr << 1) + (wc & 1);
2400efb4:	468c      	mov	ip, r1
2400efb6:	f002 0101 	and.w	r1, r2, #1
				wc >>= 1;
2400efba:	0850      	lsrs	r0, r2, #1
				sr = (sr << 1) + (wc & 1);
2400efbc:	eb01 0147 	add.w	r1, r1, r7, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400efc0:	e009      	b.n	2400efd6 <dir_register+0xae>
				sr = (sr << 1) + (wc & 1);
2400efc2:	f002 0101 	and.w	r1, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
2400efc6:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				wc >>= 1;
2400efca:	ea4f 0052 	mov.w	r0, r2, lsr #1
				sr = (sr << 1) + (wc & 1);
2400efce:	eb01 014e 	add.w	r1, r1, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400efd2:	bf18      	it	ne
2400efd4:	4069      	eorne	r1, r5
				sr = (sr << 1) + (wc & 1);
2400efd6:	f000 0e01 	and.w	lr, r0, #1
				wc >>= 1;
2400efda:	0893      	lsrs	r3, r2, #2
2400efdc:	08d0      	lsrs	r0, r2, #3
				sr = (sr << 1) + (wc & 1);
2400efde:	eb0e 0e41 	add.w	lr, lr, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400efe2:	0409      	lsls	r1, r1, #16
				sr = (sr << 1) + (wc & 1);
2400efe4:	f003 0301 	and.w	r3, r3, #1
2400efe8:	f000 0001 	and.w	r0, r0, #1
				if (sr & 0x10000) sr ^= 0x11021;
2400efec:	bf48      	it	mi
2400efee:	ea8e 0e05 	eormi.w	lr, lr, r5
				wc >>= 1;
2400eff2:	0911      	lsrs	r1, r2, #4
				sr = (sr << 1) + (wc & 1);
2400eff4:	eb03 034e 	add.w	r3, r3, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400eff8:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				sr = (sr << 1) + (wc & 1);
2400effc:	f001 0101 	and.w	r1, r1, #1
				wc >>= 1;
2400f000:	ea4f 3ed2 	mov.w	lr, r2, lsr #15
				if (sr & 0x10000) sr ^= 0x11021;
2400f004:	bf18      	it	ne
2400f006:	406b      	eorne	r3, r5
				sr = (sr << 1) + (wc & 1);
2400f008:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f00c:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2400f00e:	ea4f 1352 	mov.w	r3, r2, lsr #5
				if (sr & 0x10000) sr ^= 0x11021;
2400f012:	bf48      	it	mi
2400f014:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
2400f016:	f003 0301 	and.w	r3, r3, #1
2400f01a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f01e:	0400      	lsls	r0, r0, #16
				wc >>= 1;
2400f020:	ea4f 1092 	mov.w	r0, r2, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
2400f024:	bf48      	it	mi
2400f026:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
2400f028:	f000 0001 	and.w	r0, r0, #1
2400f02c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f030:	0409      	lsls	r1, r1, #16
				wc >>= 1;
2400f032:	ea4f 11d2 	mov.w	r1, r2, lsr #7
				if (sr & 0x10000) sr ^= 0x11021;
2400f036:	bf48      	it	mi
2400f038:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
2400f03a:	f001 0101 	and.w	r1, r1, #1
2400f03e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f042:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2400f044:	ea4f 2312 	mov.w	r3, r2, lsr #8
				if (sr & 0x10000) sr ^= 0x11021;
2400f048:	bf48      	it	mi
2400f04a:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
2400f04c:	f003 0301 	and.w	r3, r3, #1
2400f050:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f054:	0400      	lsls	r0, r0, #16
				wc >>= 1;
2400f056:	ea4f 2052 	mov.w	r0, r2, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
2400f05a:	bf48      	it	mi
2400f05c:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
2400f05e:	f000 0001 	and.w	r0, r0, #1
2400f062:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f066:	0409      	lsls	r1, r1, #16
				wc >>= 1;
2400f068:	ea4f 2192 	mov.w	r1, r2, lsr #10
				if (sr & 0x10000) sr ^= 0x11021;
2400f06c:	bf48      	it	mi
2400f06e:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
2400f070:	f001 0101 	and.w	r1, r1, #1
2400f074:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f078:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2400f07a:	ea4f 23d2 	mov.w	r3, r2, lsr #11
				if (sr & 0x10000) sr ^= 0x11021;
2400f07e:	bf48      	it	mi
2400f080:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
2400f082:	f003 0301 	and.w	r3, r3, #1
2400f086:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f08a:	0400      	lsls	r0, r0, #16
				wc >>= 1;
2400f08c:	ea4f 3012 	mov.w	r0, r2, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
2400f090:	bf48      	it	mi
2400f092:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
2400f094:	f000 0001 	and.w	r0, r0, #1
2400f098:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f09c:	0409      	lsls	r1, r1, #16
				wc >>= 1;
2400f09e:	ea4f 3152 	mov.w	r1, r2, lsr #13
				if (sr & 0x10000) sr ^= 0x11021;
2400f0a2:	bf48      	it	mi
2400f0a4:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
2400f0a6:	f001 0101 	and.w	r1, r1, #1
2400f0aa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f0ae:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2400f0b0:	ea4f 3392 	mov.w	r3, r2, lsr #14
				if (sr & 0x10000) sr ^= 0x11021;
2400f0b4:	bf48      	it	mi
2400f0b6:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
2400f0b8:	f003 0301 	and.w	r3, r3, #1
2400f0bc:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f0c0:	0400      	lsls	r0, r0, #16
2400f0c2:	bf48      	it	mi
2400f0c4:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
2400f0c6:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f0ca:	040a      	lsls	r2, r1, #16
		while (*lfn) {	/* Create a CRC */
2400f0cc:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
				if (sr & 0x10000) sr ^= 0x11021;
2400f0d0:	bf48      	it	mi
2400f0d2:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
2400f0d4:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f0d8:	041b      	lsls	r3, r3, #16
2400f0da:	bf48      	it	mi
2400f0dc:	ea8e 0e05 	eormi.w	lr, lr, r5
		while (*lfn) {	/* Create a CRC */
2400f0e0:	2a00      	cmp	r2, #0
2400f0e2:	f47f af6e 	bne.w	2400efc2 <dir_register+0x9a>
		c = (BYTE)((seq % 16) + '0');
2400f0e6:	f00e 010f 	and.w	r1, lr, #15
2400f0ea:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2400f0ee:	2a39      	cmp	r2, #57	; 0x39
2400f0f0:	bf88      	it	hi
2400f0f2:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2400f0f6:	f1be 0f0f 	cmp.w	lr, #15
		seq /= 16;
2400f0fa:	ea4f 111e 	mov.w	r1, lr, lsr #4
		ns[i--] = c;
2400f0fe:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	} while (seq);
2400f102:	f240 8191 	bls.w	2400f428 <dir_register+0x500>
		c = (BYTE)((seq % 16) + '0');
2400f106:	f001 000f 	and.w	r0, r1, #15
2400f10a:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
2400f10e:	2a39      	cmp	r2, #57	; 0x39
2400f110:	bf88      	it	hi
2400f112:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
2400f116:	290f      	cmp	r1, #15
		seq /= 16;
2400f118:	ea4f 201e 	mov.w	r0, lr, lsr #8
		ns[i--] = c;
2400f11c:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
	} while (seq);
2400f120:	f240 8188 	bls.w	2400f434 <dir_register+0x50c>
		c = (BYTE)((seq % 16) + '0');
2400f124:	f000 010f 	and.w	r1, r0, #15
2400f128:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2400f12c:	2a39      	cmp	r2, #57	; 0x39
2400f12e:	bf88      	it	hi
2400f130:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2400f134:	280f      	cmp	r0, #15
		seq /= 16;
2400f136:	ea4f 311e 	mov.w	r1, lr, lsr #12
		ns[i--] = c;
2400f13a:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	} while (seq);
2400f13e:	f240 8188 	bls.w	2400f452 <dir_register+0x52a>
		c = (BYTE)((seq % 16) + '0');
2400f142:	f001 000f 	and.w	r0, r1, #15
2400f146:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
2400f14a:	2a39      	cmp	r2, #57	; 0x39
2400f14c:	bf88      	it	hi
2400f14e:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
2400f152:	290f      	cmp	r1, #15
		seq /= 16;
2400f154:	ea4f 401e 	mov.w	r0, lr, lsr #16
		ns[i--] = c;
2400f158:	f88d 2020 	strb.w	r2, [sp, #32]
	} while (seq);
2400f15c:	f240 817f 	bls.w	2400f45e <dir_register+0x536>
		c = (BYTE)((seq % 16) + '0');
2400f160:	f000 010f 	and.w	r1, r0, #15
2400f164:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2400f168:	2a39      	cmp	r2, #57	; 0x39
2400f16a:	bf88      	it	hi
2400f16c:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2400f170:	280f      	cmp	r0, #15
		seq /= 16;
2400f172:	ea4f 511e 	mov.w	r1, lr, lsr #20
		ns[i--] = c;
2400f176:	f88d 201f 	strb.w	r2, [sp, #31]
	} while (seq);
2400f17a:	f240 8176 	bls.w	2400f46a <dir_register+0x542>
		c = (BYTE)((seq % 16) + '0');
2400f17e:	f001 000f 	and.w	r0, r1, #15
		seq /= 16;
2400f182:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
		c = (BYTE)((seq % 16) + '0');
2400f186:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
2400f18a:	2a39      	cmp	r2, #57	; 0x39
2400f18c:	bf88      	it	hi
2400f18e:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
2400f192:	290f      	cmp	r1, #15
		ns[i--] = c;
2400f194:	f88d 201e 	strb.w	r2, [sp, #30]
	} while (seq);
2400f198:	f240 816d 	bls.w	2400f476 <dir_register+0x54e>
		c = (BYTE)((seq % 16) + '0');
2400f19c:	f00e 010f 	and.w	r1, lr, #15
2400f1a0:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2400f1a4:	2a39      	cmp	r2, #57	; 0x39
2400f1a6:	bf88      	it	hi
2400f1a8:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2400f1ac:	f1be 0f0f 	cmp.w	lr, #15
		ns[i--] = c;
2400f1b0:	f88d 201d 	strb.w	r2, [sp, #29]
	} while (seq);
2400f1b4:	f240 8144 	bls.w	2400f440 <dir_register+0x518>
		ns[i--] = c;
2400f1b8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
2400f1bc:	f104 0123 	add.w	r1, r4, #35	; 0x23
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400f1c0:	2200      	movs	r2, #0
2400f1c2:	e002      	b.n	2400f1ca <dir_register+0x2a2>
2400f1c4:	3201      	adds	r2, #1
2400f1c6:	4562      	cmp	r2, ip
2400f1c8:	d003      	beq.n	2400f1d2 <dir_register+0x2aa>
2400f1ca:	f811 3f01 	ldrb.w	r3, [r1, #1]!
2400f1ce:	2b20      	cmp	r3, #32
2400f1d0:	d1f8      	bne.n	2400f1c4 <dir_register+0x29c>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f1d2:	f1bc 0f07 	cmp.w	ip, #7
2400f1d6:	d93d      	bls.n	2400f254 <dir_register+0x32c>
2400f1d8:	1c50      	adds	r0, r2, #1
2400f1da:	f806 b002 	strb.w	fp, [r6, r2]
	} while (j < 8);
2400f1de:	2807      	cmp	r0, #7
2400f1e0:	d809      	bhi.n	2400f1f6 <dir_register+0x2ce>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f1e2:	1c42      	adds	r2, r0, #1
2400f1e4:	2120      	movs	r1, #32
2400f1e6:	2a08      	cmp	r2, #8
2400f1e8:	f1c0 0208 	rsb	r2, r0, #8
2400f1ec:	4430      	add	r0, r6
2400f1ee:	bf88      	it	hi
2400f1f0:	2201      	movhi	r2, #1
2400f1f2:	f008 fc25 	bl	24017a40 <memset>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2400f1f6:	4620      	mov	r0, r4
2400f1f8:	f7ff fa7c 	bl	2400e6f4 <dir_find>
2400f1fc:	4601      	mov	r1, r0
			if (res != FR_OK) break;
2400f1fe:	2800      	cmp	r0, #0
2400f200:	f040 80a6 	bne.w	2400f350 <dir_register+0x428>
		for (n = 1; n < 100; n++) {
2400f204:	3701      	adds	r7, #1
2400f206:	2f64      	cmp	r7, #100	; 0x64
2400f208:	f47f aec3 	bne.w	2400ef92 <dir_register+0x6a>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
2400f20c:	2107      	movs	r1, #7
}
2400f20e:	4608      	mov	r0, r1
2400f210:	b00d      	add	sp, #52	; 0x34
2400f212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400f216:	f013 0802 	ands.w	r8, r3, #2
2400f21a:	9d03      	ldr	r5, [sp, #12]
2400f21c:	f000 80a5 	beq.w	2400f36a <dir_register+0x442>
2400f220:	4a0b      	ldr	r2, [pc, #44]	; (2400f250 <dir_register+0x328>)
2400f222:	f109 030c 	add.w	r3, r9, #12
	res = dir_sdi(dp, 0);
2400f226:	2100      	movs	r1, #0
2400f228:	4620      	mov	r0, r4
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400f22a:	fba2 2303 	umull	r2, r3, r2, r3
2400f22e:	ea4f 0893 	mov.w	r8, r3, lsr #2
	res = dir_sdi(dp, 0);
2400f232:	f7ff f9b3 	bl	2400e59c <dir_sdi>
	if (res == FR_OK) {
2400f236:	4601      	mov	r1, r0
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400f238:	f108 0b01 	add.w	fp, r8, #1
	if (res == FR_OK) {
2400f23c:	2800      	cmp	r0, #0
2400f23e:	f000 809e 	beq.w	2400f37e <dir_register+0x456>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
2400f242:	2904      	cmp	r1, #4
2400f244:	d0e2      	beq.n	2400f20c <dir_register+0x2e4>
2400f246:	e7e2      	b.n	2400f20e <dir_register+0x2e6>
2400f248:	46be      	mov	lr, r7
2400f24a:	e74c      	b.n	2400f0e6 <dir_register+0x1be>
2400f24c:	00011021 	.word	0x00011021
2400f250:	4ec4ec4f 	.word	0x4ec4ec4f
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f254:	f10c 0330 	add.w	r3, ip, #48	; 0x30
2400f258:	f10c 0c01 	add.w	ip, ip, #1
2400f25c:	eb0d 0103 	add.w	r1, sp, r3
2400f260:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400f264:	54b1      	strb	r1, [r6, r2]
2400f266:	3201      	adds	r2, #1
	} while (j < 8);
2400f268:	2a07      	cmp	r2, #7
2400f26a:	d8c4      	bhi.n	2400f1f6 <dir_register+0x2ce>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f26c:	f1bc 0f08 	cmp.w	ip, #8
2400f270:	f000 80a3 	beq.w	2400f3ba <dir_register+0x492>
2400f274:	f10c 0330 	add.w	r3, ip, #48	; 0x30
	} while (j < 8);
2400f278:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f27a:	f102 0001 	add.w	r0, r2, #1
2400f27e:	eb0d 0103 	add.w	r1, sp, r3
2400f282:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400f286:	54b1      	strb	r1, [r6, r2]
2400f288:	f10c 0101 	add.w	r1, ip, #1
	} while (j < 8);
2400f28c:	d0b3      	beq.n	2400f1f6 <dir_register+0x2ce>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f28e:	2908      	cmp	r1, #8
2400f290:	f000 809b 	beq.w	2400f3ca <dir_register+0x4a2>
2400f294:	f10c 0331 	add.w	r3, ip, #49	; 0x31
	} while (j < 8);
2400f298:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f29a:	eb0d 0103 	add.w	r1, sp, r3
2400f29e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400f2a2:	5431      	strb	r1, [r6, r0]
2400f2a4:	f10c 0102 	add.w	r1, ip, #2
2400f2a8:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
2400f2ac:	d0a3      	beq.n	2400f1f6 <dir_register+0x2ce>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f2ae:	2908      	cmp	r1, #8
2400f2b0:	f000 8093 	beq.w	2400f3da <dir_register+0x4b2>
2400f2b4:	f10c 0332 	add.w	r3, ip, #50	; 0x32
	} while (j < 8);
2400f2b8:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f2ba:	eb0d 0103 	add.w	r1, sp, r3
2400f2be:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400f2c2:	5431      	strb	r1, [r6, r0]
2400f2c4:	f10c 0103 	add.w	r1, ip, #3
2400f2c8:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
2400f2cc:	d093      	beq.n	2400f1f6 <dir_register+0x2ce>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f2ce:	2908      	cmp	r1, #8
2400f2d0:	f000 808b 	beq.w	2400f3ea <dir_register+0x4c2>
2400f2d4:	f10c 0333 	add.w	r3, ip, #51	; 0x33
	} while (j < 8);
2400f2d8:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f2da:	eb0d 0103 	add.w	r1, sp, r3
2400f2de:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400f2e2:	5431      	strb	r1, [r6, r0]
2400f2e4:	f10c 0104 	add.w	r1, ip, #4
2400f2e8:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
2400f2ec:	d083      	beq.n	2400f1f6 <dir_register+0x2ce>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f2ee:	2908      	cmp	r1, #8
2400f2f0:	f000 8083 	beq.w	2400f3fa <dir_register+0x4d2>
2400f2f4:	f10c 0334 	add.w	r3, ip, #52	; 0x34
	} while (j < 8);
2400f2f8:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f2fa:	eb0d 0103 	add.w	r1, sp, r3
2400f2fe:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400f302:	5431      	strb	r1, [r6, r0]
2400f304:	f10c 0105 	add.w	r1, ip, #5
2400f308:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
2400f30c:	f43f af73 	beq.w	2400f1f6 <dir_register+0x2ce>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f310:	2908      	cmp	r1, #8
2400f312:	d07a      	beq.n	2400f40a <dir_register+0x4e2>
2400f314:	f10c 0335 	add.w	r3, ip, #53	; 0x35
	} while (j < 8);
2400f318:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f31a:	eb0d 0103 	add.w	r1, sp, r3
2400f31e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400f322:	5431      	strb	r1, [r6, r0]
2400f324:	f102 0106 	add.w	r1, r2, #6
	} while (j < 8);
2400f328:	f43f af65 	beq.w	2400f1f6 <dir_register+0x2ce>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f32c:	f1bc 0f01 	cmp.w	ip, #1
2400f330:	d173      	bne.n	2400f41a <dir_register+0x4f2>
2400f332:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
	} while (j < 8);
2400f336:	2906      	cmp	r1, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f338:	5472      	strb	r2, [r6, r1]
	} while (j < 8);
2400f33a:	f47f af5c 	bne.w	2400f1f6 <dir_register+0x2ce>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2400f33e:	4620      	mov	r0, r4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f340:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2400f344:	f7ff f9d6 	bl	2400e6f4 <dir_find>
2400f348:	4601      	mov	r1, r0
			if (res != FR_OK) break;
2400f34a:	2800      	cmp	r0, #0
2400f34c:	f43f af5a 	beq.w	2400f204 <dir_register+0x2dc>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
2400f350:	2804      	cmp	r0, #4
2400f352:	f8dd 9014 	ldr.w	r9, [sp, #20]
2400f356:	f47f af5a 	bne.w	2400f20e <dir_register+0x2e6>
		dp->fn[NSFLAG] = sn[NSFLAG];
2400f35a:	9b04      	ldr	r3, [sp, #16]
	FATFS *fs = dp->obj.fs;
2400f35c:	6825      	ldr	r5, [r4, #0]
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400f35e:	f013 0802 	ands.w	r8, r3, #2
		dp->fn[NSFLAG] = sn[NSFLAG];
2400f362:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400f366:	f47f af5b 	bne.w	2400f220 <dir_register+0x2f8>
	res = dir_sdi(dp, 0);
2400f36a:	2100      	movs	r1, #0
2400f36c:	4620      	mov	r0, r4
2400f36e:	f7ff f915 	bl	2400e59c <dir_sdi>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400f372:	f04f 0b01 	mov.w	fp, #1
	if (res == FR_OK) {
2400f376:	4601      	mov	r1, r0
2400f378:	2800      	cmp	r0, #0
2400f37a:	f47f af62 	bne.w	2400f242 <dir_register+0x31a>
		n = 0;
2400f37e:	4607      	mov	r7, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400f380:	f105 0a34 	add.w	sl, r5, #52	; 0x34
2400f384:	f8cd 8004 	str.w	r8, [sp, #4]
			res = move_window(fs, dp->sect);
2400f388:	69e6      	ldr	r6, [r4, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
2400f38a:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
2400f38e:	4546      	cmp	r6, r8
2400f390:	d078      	beq.n	2400f484 <dir_register+0x55c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400f392:	78eb      	ldrb	r3, [r5, #3]
2400f394:	2b00      	cmp	r3, #0
2400f396:	f040 80bb 	bne.w	2400f510 <dir_register+0x5e8>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400f39a:	2301      	movs	r3, #1
2400f39c:	4632      	mov	r2, r6
2400f39e:	4651      	mov	r1, sl
2400f3a0:	7868      	ldrb	r0, [r5, #1]
2400f3a2:	f7fe f9a3 	bl	2400d6ec <disk_read>
2400f3a6:	2800      	cmp	r0, #0
2400f3a8:	d06b      	beq.n	2400f482 <dir_register+0x55a>
				res = FR_DISK_ERR;
2400f3aa:	2101      	movs	r1, #1
			fs->winsect = sector;
2400f3ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
2400f3b0:	4608      	mov	r0, r1
			fs->winsect = sector;
2400f3b2:	632b      	str	r3, [r5, #48]	; 0x30
}
2400f3b4:	b00d      	add	sp, #52	; 0x34
2400f3b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} while (j < 8);
2400f3ba:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f3bc:	f102 0001 	add.w	r0, r2, #1
2400f3c0:	f806 b002 	strb.w	fp, [r6, r2]
	} while (j < 8);
2400f3c4:	f47f af0d 	bne.w	2400f1e2 <dir_register+0x2ba>
2400f3c8:	e715      	b.n	2400f1f6 <dir_register+0x2ce>
2400f3ca:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f3cc:	f806 b000 	strb.w	fp, [r6, r0]
2400f3d0:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
2400f3d4:	f47f af05 	bne.w	2400f1e2 <dir_register+0x2ba>
2400f3d8:	e70d      	b.n	2400f1f6 <dir_register+0x2ce>
2400f3da:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f3dc:	f806 b000 	strb.w	fp, [r6, r0]
2400f3e0:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
2400f3e4:	f47f aefd 	bne.w	2400f1e2 <dir_register+0x2ba>
2400f3e8:	e705      	b.n	2400f1f6 <dir_register+0x2ce>
2400f3ea:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f3ec:	f806 b000 	strb.w	fp, [r6, r0]
2400f3f0:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
2400f3f4:	f47f aef5 	bne.w	2400f1e2 <dir_register+0x2ba>
2400f3f8:	e6fd      	b.n	2400f1f6 <dir_register+0x2ce>
2400f3fa:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f3fc:	f806 b000 	strb.w	fp, [r6, r0]
2400f400:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
2400f404:	f47f aeed 	bne.w	2400f1e2 <dir_register+0x2ba>
2400f408:	e6f5      	b.n	2400f1f6 <dir_register+0x2ce>
2400f40a:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f40c:	f806 b000 	strb.w	fp, [r6, r0]
2400f410:	f102 0006 	add.w	r0, r2, #6
	} while (j < 8);
2400f414:	f47f aee5 	bne.w	2400f1e2 <dir_register+0x2ba>
2400f418:	e6ed      	b.n	2400f1f6 <dir_register+0x2ce>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f41a:	f806 b001 	strb.w	fp, [r6, r1]
	} while (j < 8);
2400f41e:	2a00      	cmp	r2, #0
2400f420:	f47f aee9 	bne.w	2400f1f6 <dir_register+0x2ce>
2400f424:	2007      	movs	r0, #7
2400f426:	e6dc      	b.n	2400f1e2 <dir_register+0x2ba>
	ns[i] = '~';
2400f428:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400f42a:	f04f 0c06 	mov.w	ip, #6
	ns[i] = '~';
2400f42e:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400f432:	e6c3      	b.n	2400f1bc <dir_register+0x294>
	ns[i] = '~';
2400f434:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400f436:	f04f 0c05 	mov.w	ip, #5
	ns[i] = '~';
2400f43a:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400f43e:	e6bd      	b.n	2400f1bc <dir_register+0x294>
	ns[i] = '~';
2400f440:	227e      	movs	r2, #126	; 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f442:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
2400f446:	f88d 201c 	strb.w	r2, [sp, #28]
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f44a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
2400f44e:	4662      	mov	r2, ip
2400f450:	e710      	b.n	2400f274 <dir_register+0x34c>
	ns[i] = '~';
2400f452:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400f454:	f04f 0c04 	mov.w	ip, #4
	ns[i] = '~';
2400f458:	f88d 2020 	strb.w	r2, [sp, #32]
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400f45c:	e6ae      	b.n	2400f1bc <dir_register+0x294>
	ns[i] = '~';
2400f45e:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400f460:	f04f 0c03 	mov.w	ip, #3
	ns[i] = '~';
2400f464:	f88d 201f 	strb.w	r2, [sp, #31]
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400f468:	e6a8      	b.n	2400f1bc <dir_register+0x294>
	ns[i] = '~';
2400f46a:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400f46c:	f04f 0c02 	mov.w	ip, #2
	ns[i] = '~';
2400f470:	f88d 201e 	strb.w	r2, [sp, #30]
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400f474:	e6a2      	b.n	2400f1bc <dir_register+0x294>
	ns[i] = '~';
2400f476:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400f478:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
2400f47c:	f88d 201d 	strb.w	r2, [sp, #29]
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400f480:	e69c      	b.n	2400f1bc <dir_register+0x294>
			fs->winsect = sector;
2400f482:	632e      	str	r6, [r5, #48]	; 0x30
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
2400f484:	6a23      	ldr	r3, [r4, #32]
2400f486:	781b      	ldrb	r3, [r3, #0]
2400f488:	2be5      	cmp	r3, #229	; 0xe5
2400f48a:	d00d      	beq.n	2400f4a8 <dir_register+0x580>
2400f48c:	fab3 f283 	clz	r2, r3
2400f490:	0952      	lsrs	r2, r2, #5
2400f492:	b14b      	cbz	r3, 2400f4a8 <dir_register+0x580>
				n = 0;					/* Not a blank entry. Restart to search */
2400f494:	4617      	mov	r7, r2
			res = dir_next(dp, 1);
2400f496:	2101      	movs	r1, #1
2400f498:	4620      	mov	r0, r4
2400f49a:	f7ff fc63 	bl	2400ed64 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
2400f49e:	2800      	cmp	r0, #0
2400f4a0:	f43f af72 	beq.w	2400f388 <dir_register+0x460>
2400f4a4:	4601      	mov	r1, r0
2400f4a6:	e6cc      	b.n	2400f242 <dir_register+0x31a>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
2400f4a8:	3701      	adds	r7, #1
2400f4aa:	45bb      	cmp	fp, r7
2400f4ac:	d1f3      	bne.n	2400f496 <dir_register+0x56e>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
2400f4ae:	f8dd 8004 	ldr.w	r8, [sp, #4]
2400f4b2:	f1b8 0f00 	cmp.w	r8, #0
2400f4b6:	d155      	bne.n	2400f564 <dir_register+0x63c>
		res = move_window(fs, dp->sect);
2400f4b8:	69e1      	ldr	r1, [r4, #28]
2400f4ba:	9803      	ldr	r0, [sp, #12]
2400f4bc:	f7fe fad0 	bl	2400da60 <move_window>
		if (res == FR_OK) {
2400f4c0:	4601      	mov	r1, r0
2400f4c2:	2800      	cmp	r0, #0
2400f4c4:	f47f aea3 	bne.w	2400f20e <dir_register+0x2e6>
		*d++ = (BYTE)val;
2400f4c8:	2220      	movs	r2, #32
2400f4ca:	9001      	str	r0, [sp, #4]
2400f4cc:	6a20      	ldr	r0, [r4, #32]
2400f4ce:	f008 fab7 	bl	24017a40 <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
2400f4d2:	6a23      	ldr	r3, [r4, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
2400f4d4:	f104 0225 	add.w	r2, r4, #37	; 0x25
2400f4d8:	9901      	ldr	r1, [sp, #4]
2400f4da:	1a9a      	subs	r2, r3, r2
2400f4dc:	2a02      	cmp	r2, #2
2400f4de:	f240 81ab 	bls.w	2400f838 <dir_register+0x910>
			*d++ = *s++;
2400f4e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
2400f4e4:	601a      	str	r2, [r3, #0]
2400f4e6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
2400f4e8:	605a      	str	r2, [r3, #4]
2400f4ea:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
2400f4ee:	721a      	strb	r2, [r3, #8]
2400f4f0:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
2400f4f4:	725a      	strb	r2, [r3, #9]
2400f4f6:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
2400f4fa:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
2400f4fc:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
2400f4fe:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
2400f502:	6a20      	ldr	r0, [r4, #32]
2400f504:	f003 0318 	and.w	r3, r3, #24
2400f508:	7303      	strb	r3, [r0, #12]
			fs->wflag = 1;
2400f50a:	9b03      	ldr	r3, [sp, #12]
2400f50c:	70da      	strb	r2, [r3, #3]
2400f50e:	e67e      	b.n	2400f20e <dir_register+0x2e6>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400f510:	2301      	movs	r3, #1
2400f512:	4642      	mov	r2, r8
2400f514:	4651      	mov	r1, sl
2400f516:	7868      	ldrb	r0, [r5, #1]
2400f518:	f7fe f8f8 	bl	2400d70c <disk_write>
2400f51c:	b9d8      	cbnz	r0, 2400f556 <dir_register+0x62e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400f51e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
			fs->wflag = 0;
2400f520:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400f522:	eba8 0103 	sub.w	r1, r8, r3
2400f526:	69eb      	ldr	r3, [r5, #28]
2400f528:	4299      	cmp	r1, r3
2400f52a:	f4bf af36 	bcs.w	2400f39a <dir_register+0x472>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400f52e:	f895 9002 	ldrb.w	r9, [r5, #2]
2400f532:	f1b9 0f01 	cmp.w	r9, #1
2400f536:	d801      	bhi.n	2400f53c <dir_register+0x614>
2400f538:	e72f      	b.n	2400f39a <dir_register+0x472>
					wsect += fs->fsize;
2400f53a:	69eb      	ldr	r3, [r5, #28]
2400f53c:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400f53e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
2400f542:	2301      	movs	r3, #1
2400f544:	4651      	mov	r1, sl
2400f546:	4642      	mov	r2, r8
2400f548:	7868      	ldrb	r0, [r5, #1]
2400f54a:	f7fe f8df 	bl	2400d70c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400f54e:	f1b9 0f01 	cmp.w	r9, #1
2400f552:	d1f2      	bne.n	2400f53a <dir_register+0x612>
2400f554:	e721      	b.n	2400f39a <dir_register+0x472>
2400f556:	2101      	movs	r1, #1
}
2400f558:	4608      	mov	r0, r1
2400f55a:	b00d      	add	sp, #52	; 0x34
2400f55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2400f560:	2106      	movs	r1, #6
2400f562:	e654      	b.n	2400f20e <dir_register+0x2e6>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
2400f564:	6961      	ldr	r1, [r4, #20]
2400f566:	4620      	mov	r0, r4
2400f568:	eba1 1148 	sub.w	r1, r1, r8, lsl #5
2400f56c:	f7ff f816 	bl	2400e59c <dir_sdi>
		if (res == FR_OK) {
2400f570:	4601      	mov	r1, r0
2400f572:	2800      	cmp	r0, #0
2400f574:	f47f ae4b 	bne.w	2400f20e <dir_register+0x2e6>
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400f578:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
2400f57c:	260f      	movs	r6, #15
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f57e:	f64f 77fd 	movw	r7, #65533	; 0xfffd
	*ptr++ = (BYTE)val; val >>= 8;
2400f582:	f64f 79ff 	movw	r9, #65535	; 0xffff
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400f586:	01d3      	lsls	r3, r2, #7
	*ptr++ = (BYTE)val; val >>= 8;
2400f588:	f8dd a00c 	ldr.w	sl, [sp, #12]
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400f58c:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
2400f590:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
2400f594:	4413      	add	r3, r2
2400f596:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400f59a:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400f59e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
2400f5a2:	fa53 f282 	uxtab	r2, r3, r2
2400f5a6:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400f5aa:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400f5ae:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
2400f5b2:	fa52 f383 	uxtab	r3, r2, r3
2400f5b6:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400f5ba:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400f5be:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
2400f5c2:	fa53 f282 	uxtab	r2, r3, r2
2400f5c6:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400f5ca:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400f5ce:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
2400f5d2:	fa52 f383 	uxtab	r3, r2, r3
2400f5d6:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400f5da:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400f5de:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
2400f5e2:	fa53 f282 	uxtab	r2, r3, r2
2400f5e6:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400f5ea:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400f5ee:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
2400f5f2:	fa52 f383 	uxtab	r3, r2, r3
2400f5f6:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400f5fa:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400f5fe:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
2400f602:	fa53 f282 	uxtab	r2, r3, r2
2400f606:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400f60a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400f60e:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
2400f612:	fa52 f383 	uxtab	r3, r2, r3
2400f616:	f3c3 0546 	ubfx	r5, r3, #1, #7
2400f61a:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
2400f61e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
2400f622:	fa53 f585 	uxtab	r5, r3, r5
2400f626:	b2ed      	uxtb	r5, r5
	} while (--n);
2400f628:	e02a      	b.n	2400f680 <dir_register+0x758>
	*ptr++ = (BYTE)val; val >>= 8;
2400f62a:	f8a3 9003 	strh.w	r9, [r3, #3]
2400f62e:	f8a3 9005 	strh.w	r9, [r3, #5]
2400f632:	f8a3 9007 	strh.w	r9, [r3, #7]
2400f636:	f8a3 9009 	strh.w	r9, [r3, #9]
2400f63a:	f8a3 900e 	strh.w	r9, [r3, #14]
2400f63e:	f8a3 9010 	strh.w	r9, [r3, #16]
2400f642:	f8a3 9012 	strh.w	r9, [r3, #18]
2400f646:	f8a3 9014 	strh.w	r9, [r3, #20]
2400f64a:	f8a3 9016 	strh.w	r9, [r3, #22]
2400f64e:	f8a3 9018 	strh.w	r9, [r3, #24]
2400f652:	f8a3 901c 	strh.w	r9, [r3, #28]
2400f656:	f8a3 901e 	strh.w	r9, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
2400f65a:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
2400f65e:	f883 c000 	strb.w	ip, [r3]
				fs->wflag = 1;
2400f662:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
2400f664:	2100      	movs	r1, #0
2400f666:	4620      	mov	r0, r4
				fs->wflag = 1;
2400f668:	f88a 3003 	strb.w	r3, [sl, #3]
				res = dir_next(dp, 0);	/* Next entry */
2400f66c:	f7ff fb7a 	bl	2400ed64 <dir_next>
			} while (res == FR_OK && --nent);
2400f670:	4601      	mov	r1, r0
2400f672:	2800      	cmp	r0, #0
2400f674:	f47f adcb 	bne.w	2400f20e <dir_register+0x2e6>
2400f678:	f1b8 0801 	subs.w	r8, r8, #1
2400f67c:	f43f af1c 	beq.w	2400f4b8 <dir_register+0x590>
				res = move_window(fs, dp->sect);
2400f680:	69e1      	ldr	r1, [r4, #28]
2400f682:	4650      	mov	r0, sl
2400f684:	f7fe f9ec 	bl	2400da60 <move_window>
2400f688:	4601      	mov	r1, r0
				if (res != FR_OK) break;
2400f68a:	2800      	cmp	r0, #0
2400f68c:	f47f adbf 	bne.w	2400f20e <dir_register+0x2e6>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
2400f690:	fa5f fc88 	uxtb.w	ip, r8
2400f694:	6a23      	ldr	r3, [r4, #32]
2400f696:	f8da 100c 	ldr.w	r1, [sl, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
2400f69a:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400f69e:	8358      	strh	r0, [r3, #26]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
2400f6a0:	735d      	strb	r5, [r3, #13]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
2400f6a2:	eb02 0042 	add.w	r0, r2, r2, lsl #1
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
2400f6a6:	f8a3 600b 	strh.w	r6, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
2400f6aa:	eb02 0280 	add.w	r2, r2, r0, lsl #2
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f6ae:	f831 0012 	ldrh.w	r0, [r1, r2, lsl #1]
2400f6b2:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400f6b6:	7058      	strb	r0, [r3, #1]
2400f6b8:	0a00      	lsrs	r0, r0, #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f6ba:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
2400f6be:	7098      	strb	r0, [r3, #2]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f6c0:	0050      	lsls	r0, r2, #1
2400f6c2:	45be      	cmp	lr, r7
2400f6c4:	d8b1      	bhi.n	2400f62a <dir_register+0x702>
2400f6c6:	3201      	adds	r2, #1
2400f6c8:	f831 e012 	ldrh.w	lr, [r1, r2, lsl #1]
2400f6cc:	0052      	lsls	r2, r2, #1
2400f6ce:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400f6d2:	f883 e003 	strb.w	lr, [r3, #3]
2400f6d6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f6da:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400f6de:	f883 e004 	strb.w	lr, [r3, #4]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f6e2:	45bb      	cmp	fp, r7
2400f6e4:	d8a3      	bhi.n	2400f62e <dir_register+0x706>
2400f6e6:	440a      	add	r2, r1
2400f6e8:	f8b2 e002 	ldrh.w	lr, [r2, #2]
2400f6ec:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400f6f0:	f883 e005 	strb.w	lr, [r3, #5]
2400f6f4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f6f8:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400f6fc:	f883 e006 	strb.w	lr, [r3, #6]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f700:	45bb      	cmp	fp, r7
2400f702:	d896      	bhi.n	2400f632 <dir_register+0x70a>
2400f704:	f8b2 e004 	ldrh.w	lr, [r2, #4]
2400f708:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400f70c:	f883 e007 	strb.w	lr, [r3, #7]
2400f710:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f714:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400f718:	f883 e008 	strb.w	lr, [r3, #8]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f71c:	45bb      	cmp	fp, r7
2400f71e:	d88a      	bhi.n	2400f636 <dir_register+0x70e>
2400f720:	f8b2 e006 	ldrh.w	lr, [r2, #6]
2400f724:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400f728:	f883 e009 	strb.w	lr, [r3, #9]
2400f72c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f730:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400f734:	f883 e00a 	strb.w	lr, [r3, #10]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f738:	45bb      	cmp	fp, r7
2400f73a:	f63f af7e 	bhi.w	2400f63a <dir_register+0x712>
2400f73e:	f8b2 e008 	ldrh.w	lr, [r2, #8]
2400f742:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400f746:	f883 e00e 	strb.w	lr, [r3, #14]
2400f74a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f74e:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400f752:	f883 e00f 	strb.w	lr, [r3, #15]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f756:	45bb      	cmp	fp, r7
2400f758:	f63f af71 	bhi.w	2400f63e <dir_register+0x716>
2400f75c:	f8b2 e00a 	ldrh.w	lr, [r2, #10]
2400f760:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400f764:	f883 e010 	strb.w	lr, [r3, #16]
2400f768:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f76c:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400f770:	f883 e011 	strb.w	lr, [r3, #17]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f774:	45bb      	cmp	fp, r7
2400f776:	f63f af64 	bhi.w	2400f642 <dir_register+0x71a>
2400f77a:	f8b2 e00c 	ldrh.w	lr, [r2, #12]
2400f77e:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400f782:	f883 e012 	strb.w	lr, [r3, #18]
2400f786:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f78a:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400f78e:	f883 e013 	strb.w	lr, [r3, #19]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f792:	45bb      	cmp	fp, r7
2400f794:	f63f af57 	bhi.w	2400f646 <dir_register+0x71e>
2400f798:	f8b2 e00e 	ldrh.w	lr, [r2, #14]
2400f79c:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400f7a0:	f883 e014 	strb.w	lr, [r3, #20]
2400f7a4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f7a8:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400f7ac:	f883 e015 	strb.w	lr, [r3, #21]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f7b0:	45bb      	cmp	fp, r7
2400f7b2:	f63f af4a 	bhi.w	2400f64a <dir_register+0x722>
2400f7b6:	f8b2 e010 	ldrh.w	lr, [r2, #16]
2400f7ba:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400f7be:	f883 e016 	strb.w	lr, [r3, #22]
2400f7c2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f7c6:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400f7ca:	f883 e017 	strb.w	lr, [r3, #23]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f7ce:	45bb      	cmp	fp, r7
2400f7d0:	f63f af3d 	bhi.w	2400f64e <dir_register+0x726>
2400f7d4:	f8b2 e012 	ldrh.w	lr, [r2, #18]
2400f7d8:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400f7dc:	f883 e018 	strb.w	lr, [r3, #24]
2400f7e0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f7e4:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400f7e8:	f883 e019 	strb.w	lr, [r3, #25]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f7ec:	45bb      	cmp	fp, r7
2400f7ee:	f63f af30 	bhi.w	2400f652 <dir_register+0x72a>
2400f7f2:	f8b2 e014 	ldrh.w	lr, [r2, #20]
2400f7f6:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400f7fa:	f883 e01c 	strb.w	lr, [r3, #28]
2400f7fe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f802:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400f806:	f883 e01d 	strb.w	lr, [r3, #29]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f80a:	45bb      	cmp	fp, r7
2400f80c:	f63f af23 	bhi.w	2400f656 <dir_register+0x72e>
2400f810:	8ad2      	ldrh	r2, [r2, #22]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
2400f812:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400f816:	779a      	strb	r2, [r3, #30]
2400f818:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
2400f81a:	77da      	strb	r2, [r3, #31]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
2400f81c:	fa1f f28e 	uxth.w	r2, lr
2400f820:	42ba      	cmp	r2, r7
2400f822:	f63f af1a 	bhi.w	2400f65a <dir_register+0x732>
2400f826:	180a      	adds	r2, r1, r0
2400f828:	8b52      	ldrh	r2, [r2, #26]
2400f82a:	2a00      	cmp	r2, #0
2400f82c:	f47f af17 	bne.w	2400f65e <dir_register+0x736>
2400f830:	e713      	b.n	2400f65a <dir_register+0x732>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
2400f832:	4691      	mov	r9, r2
2400f834:	f7ff bb91 	b.w	2400ef5a <dir_register+0x32>
			*d++ = *s++;
2400f838:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
2400f83c:	701a      	strb	r2, [r3, #0]
2400f83e:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
2400f842:	705a      	strb	r2, [r3, #1]
2400f844:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
2400f848:	709a      	strb	r2, [r3, #2]
2400f84a:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
2400f84e:	70da      	strb	r2, [r3, #3]
2400f850:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
2400f854:	711a      	strb	r2, [r3, #4]
2400f856:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
2400f85a:	715a      	strb	r2, [r3, #5]
2400f85c:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
2400f860:	719a      	strb	r2, [r3, #6]
2400f862:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
2400f866:	71da      	strb	r2, [r3, #7]
2400f868:	e63f      	b.n	2400f4ea <dir_register+0x5c2>
2400f86a:	bf00      	nop

2400f86c <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
2400f86c:	2901      	cmp	r1, #1
{
2400f86e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400f872:	460c      	mov	r4, r1
2400f874:	b083      	sub	sp, #12
	FATFS *fs = obj->fs;
2400f876:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
2400f878:	d914      	bls.n	2400f8a4 <remove_chain+0x38>
2400f87a:	69ab      	ldr	r3, [r5, #24]
2400f87c:	428b      	cmp	r3, r1
2400f87e:	d911      	bls.n	2400f8a4 <remove_chain+0x38>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
2400f880:	4606      	mov	r6, r0
2400f882:	4611      	mov	r1, r2
2400f884:	b992      	cbnz	r2, 2400f8ac <remove_chain+0x40>
2400f886:	462f      	mov	r7, r5
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400f888:	f105 0934 	add.w	r9, r5, #52	; 0x34
			fs->wflag = 1;
2400f88c:	f04f 0801 	mov.w	r8, #1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400f890:	429c      	cmp	r4, r3
2400f892:	d207      	bcs.n	2400f8a4 <remove_chain+0x38>
		switch (fs->fs_type) {
2400f894:	783b      	ldrb	r3, [r7, #0]
2400f896:	2b02      	cmp	r3, #2
2400f898:	f000 80a3 	beq.w	2400f9e2 <remove_chain+0x176>
2400f89c:	2b03      	cmp	r3, #3
2400f89e:	d022      	beq.n	2400f8e6 <remove_chain+0x7a>
2400f8a0:	2b01      	cmp	r3, #1
2400f8a2:	d011      	beq.n	2400f8c8 <remove_chain+0x5c>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
2400f8a4:	2002      	movs	r0, #2
}
2400f8a6:	b003      	add	sp, #12
2400f8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400f8ac:	4293      	cmp	r3, r2
2400f8ae:	d9f9      	bls.n	2400f8a4 <remove_chain+0x38>
2400f8b0:	2a01      	cmp	r2, #1
2400f8b2:	d0f7      	beq.n	2400f8a4 <remove_chain+0x38>
2400f8b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2400f8b8:	4628      	mov	r0, r5
2400f8ba:	f7fe fa81 	bl	2400ddc0 <put_fat.part.0>
		if (res != FR_OK) return res;
2400f8be:	2800      	cmp	r0, #0
2400f8c0:	d1f1      	bne.n	2400f8a6 <remove_chain+0x3a>
2400f8c2:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400f8c4:	69bb      	ldr	r3, [r7, #24]
2400f8c6:	e7df      	b.n	2400f888 <remove_chain+0x1c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400f8c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
2400f8ca:	eb04 0a54 	add.w	sl, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400f8ce:	4638      	mov	r0, r7
2400f8d0:	eb01 215a 	add.w	r1, r1, sl, lsr #9
2400f8d4:	f7fe f8c4 	bl	2400da60 <move_window>
2400f8d8:	2800      	cmp	r0, #0
2400f8da:	f000 80a9 	beq.w	2400fa30 <remove_chain+0x1c4>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
2400f8de:	2001      	movs	r0, #1
}
2400f8e0:	b003      	add	sp, #12
2400f8e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400f8e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
2400f8e8:	4638      	mov	r0, r7
2400f8ea:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
2400f8ee:	f7fe f8b7 	bl	2400da60 <move_window>
2400f8f2:	2800      	cmp	r0, #0
2400f8f4:	d1f3      	bne.n	2400f8de <remove_chain+0x72>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400f8f6:	00a3      	lsls	r3, r4, #2
2400f8f8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400f8fc:	443b      	add	r3, r7
2400f8fe:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400f902:	f02a 4a70 	bic.w	sl, sl, #4026531840	; 0xf0000000
		if (nxt == 0) break;				/* Empty cluster? */
2400f906:	f1ba 0f00 	cmp.w	sl, #0
2400f90a:	f000 80af 	beq.w	2400fa6c <remove_chain+0x200>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
2400f90e:	f1ba 0f01 	cmp.w	sl, #1
2400f912:	d0c7      	beq.n	2400f8a4 <remove_chain+0x38>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400f914:	69ab      	ldr	r3, [r5, #24]
2400f916:	42a3      	cmp	r3, r4
2400f918:	d9c4      	bls.n	2400f8a4 <remove_chain+0x38>
		switch (fs->fs_type) {
2400f91a:	782f      	ldrb	r7, [r5, #0]
2400f91c:	2f02      	cmp	r7, #2
2400f91e:	d029      	beq.n	2400f974 <remove_chain+0x108>
2400f920:	2f03      	cmp	r7, #3
2400f922:	d047      	beq.n	2400f9b4 <remove_chain+0x148>
2400f924:	2f01      	cmp	r7, #1
2400f926:	d1bd      	bne.n	2400f8a4 <remove_chain+0x38>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400f928:	6a69      	ldr	r1, [r5, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
2400f92a:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400f92e:	4628      	mov	r0, r5
2400f930:	eb01 215b 	add.w	r1, r1, fp, lsr #9
2400f934:	f7fe f894 	bl	2400da60 <move_window>
			if (res != FR_OK) break;
2400f938:	2800      	cmp	r0, #0
2400f93a:	d1b4      	bne.n	2400f8a6 <remove_chain+0x3a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400f93c:	07e2      	lsls	r2, r4, #31
			p = fs->win + bc++ % SS(fs);
2400f93e:	f10b 0301 	add.w	r3, fp, #1
2400f942:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400f946:	d55c      	bpl.n	2400fa02 <remove_chain+0x196>
2400f948:	f819 200b 	ldrb.w	r2, [r9, fp]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400f94c:	4628      	mov	r0, r5
2400f94e:	9301      	str	r3, [sp, #4]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400f950:	f002 020f 	and.w	r2, r2, #15
2400f954:	f809 200b 	strb.w	r2, [r9, fp]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400f958:	6a69      	ldr	r1, [r5, #36]	; 0x24
			fs->wflag = 1;
2400f95a:	70ef      	strb	r7, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400f95c:	eb01 2153 	add.w	r1, r1, r3, lsr #9
2400f960:	f7fe f87e 	bl	2400da60 <move_window>
			if (res != FR_OK) break;
2400f964:	9b01      	ldr	r3, [sp, #4]
2400f966:	2800      	cmp	r0, #0
2400f968:	d19d      	bne.n	2400f8a6 <remove_chain+0x3a>
			p = fs->win + bc % SS(fs);
2400f96a:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400f96e:	444b      	add	r3, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400f970:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) return res;
2400f972:	e00c      	b.n	2400f98e <remove_chain+0x122>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
2400f974:	6a69      	ldr	r1, [r5, #36]	; 0x24
2400f976:	4628      	mov	r0, r5
2400f978:	eb01 2114 	add.w	r1, r1, r4, lsr #8
2400f97c:	f7fe f870 	bl	2400da60 <move_window>
			if (res != FR_OK) break;
2400f980:	2800      	cmp	r0, #0
2400f982:	d190      	bne.n	2400f8a6 <remove_chain+0x3a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
2400f984:	0064      	lsls	r4, r4, #1
2400f986:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
2400f98a:	442c      	add	r4, r5
2400f98c:	86a0      	strh	r0, [r4, #52]	; 0x34
			fs->wflag = 1;
2400f98e:	f885 8003 	strb.w	r8, [r5, #3]
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
2400f992:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
2400f996:	1e91      	subs	r1, r2, #2
2400f998:	428b      	cmp	r3, r1
2400f99a:	d205      	bcs.n	2400f9a8 <remove_chain+0x13c>
			fs->free_clst++;
2400f99c:	3301      	adds	r3, #1
2400f99e:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
2400f9a0:	792b      	ldrb	r3, [r5, #4]
2400f9a2:	f043 0301 	orr.w	r3, r3, #1
2400f9a6:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
2400f9a8:	4552      	cmp	r2, sl
2400f9aa:	d95f      	bls.n	2400fa6c <remove_chain+0x200>
		nxt = get_fat(obj, clst);			/* Get cluster status */
2400f9ac:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400f9ae:	4654      	mov	r4, sl
2400f9b0:	69bb      	ldr	r3, [r7, #24]
2400f9b2:	e76d      	b.n	2400f890 <remove_chain+0x24>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
2400f9b4:	6a69      	ldr	r1, [r5, #36]	; 0x24
2400f9b6:	4628      	mov	r0, r5
2400f9b8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
2400f9bc:	f7fe f850 	bl	2400da60 <move_window>
			if (res != FR_OK) break;
2400f9c0:	2800      	cmp	r0, #0
2400f9c2:	f47f af70 	bne.w	2400f8a6 <remove_chain+0x3a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400f9c6:	00a4      	lsls	r4, r4, #2
2400f9c8:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400f9cc:	f859 2004 	ldr.w	r2, [r9, r4]
	*ptr++ = (BYTE)val; val >>= 8;
2400f9d0:	f829 0004 	strh.w	r0, [r9, r4]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400f9d4:	444c      	add	r4, r9
	*ptr++ = (BYTE)val; val >>= 8;
2400f9d6:	0e13      	lsrs	r3, r2, #24
2400f9d8:	70a0      	strb	r0, [r4, #2]
2400f9da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	*ptr++ = (BYTE)val;
2400f9de:	70e3      	strb	r3, [r4, #3]
			if (res != FR_OK) return res;
2400f9e0:	e7d5      	b.n	2400f98e <remove_chain+0x122>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400f9e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
2400f9e4:	4638      	mov	r0, r7
2400f9e6:	eb01 2114 	add.w	r1, r1, r4, lsr #8
2400f9ea:	f7fe f839 	bl	2400da60 <move_window>
2400f9ee:	2800      	cmp	r0, #0
2400f9f0:	f47f af75 	bne.w	2400f8de <remove_chain+0x72>
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400f9f4:	0063      	lsls	r3, r4, #1
2400f9f6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
2400f9fa:	443b      	add	r3, r7
2400f9fc:	f8b3 a034 	ldrh.w	sl, [r3, #52]	; 0x34
			break;
2400fa00:	e781      	b.n	2400f906 <remove_chain+0x9a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400fa02:	f809 000b 	strb.w	r0, [r9, fp]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400fa06:	4628      	mov	r0, r5
2400fa08:	6a69      	ldr	r1, [r5, #36]	; 0x24
			fs->wflag = 1;
2400fa0a:	70ef      	strb	r7, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400fa0c:	eb01 2153 	add.w	r1, r1, r3, lsr #9
2400fa10:	9301      	str	r3, [sp, #4]
2400fa12:	f7fe f825 	bl	2400da60 <move_window>
			if (res != FR_OK) break;
2400fa16:	2800      	cmp	r0, #0
2400fa18:	f47f af45 	bne.w	2400f8a6 <remove_chain+0x3a>
			p = fs->win + bc % SS(fs);
2400fa1c:	9b01      	ldr	r3, [sp, #4]
2400fa1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400fa22:	f819 0003 	ldrb.w	r0, [r9, r3]
			p = fs->win + bc % SS(fs);
2400fa26:	444b      	add	r3, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400fa28:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
2400fa2c:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) return res;
2400fa2e:	e7ae      	b.n	2400f98e <remove_chain+0x122>
			wc = fs->win[bc++ % SS(fs)];
2400fa30:	f3ca 0308 	ubfx	r3, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400fa34:	6a79      	ldr	r1, [r7, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
2400fa36:	f10a 0a01 	add.w	sl, sl, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400fa3a:	4638      	mov	r0, r7
			wc = fs->win[bc++ % SS(fs)];
2400fa3c:	443b      	add	r3, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400fa3e:	eb01 215a 	add.w	r1, r1, sl, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400fa42:	f893 b034 	ldrb.w	fp, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400fa46:	f7fe f80b 	bl	2400da60 <move_window>
2400fa4a:	2800      	cmp	r0, #0
2400fa4c:	f47f af47 	bne.w	2400f8de <remove_chain+0x72>
			wc |= fs->win[bc % SS(fs)] << 8;
2400fa50:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400fa54:	07e1      	lsls	r1, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
2400fa56:	44ba      	add	sl, r7
2400fa58:	f89a 3034 	ldrb.w	r3, [sl, #52]	; 0x34
2400fa5c:	ea4b 2a03 	orr.w	sl, fp, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400fa60:	bf4c      	ite	mi
2400fa62:	ea4f 1a1a 	movmi.w	sl, sl, lsr #4
2400fa66:	f3ca 0a0b 	ubfxpl	sl, sl, #0, #12
2400fa6a:	e74c      	b.n	2400f906 <remove_chain+0x9a>
	return FR_OK;
2400fa6c:	2000      	movs	r0, #0
2400fa6e:	e71a      	b.n	2400f8a6 <remove_chain+0x3a>

2400fa70 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
2400fa70:	b510      	push	{r4, lr}
2400fa72:	b082      	sub	sp, #8
2400fa74:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
2400fa78:	b1a1      	cbz	r1, 2400faa4 <f_mount+0x34>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400fa7a:	f891 c000 	ldrb.w	ip, [r1]
2400fa7e:	f1bc 0f1f 	cmp.w	ip, #31
2400fa82:	d912      	bls.n	2400faaa <f_mount+0x3a>
2400fa84:	f1bc 0f3a 	cmp.w	ip, #58	; 0x3a
2400fa88:	d00f      	beq.n	2400faaa <f_mount+0x3a>
2400fa8a:	4608      	mov	r0, r1
2400fa8c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
2400fa90:	2b1f      	cmp	r3, #31
2400fa92:	d90c      	bls.n	2400faae <f_mount+0x3e>
2400fa94:	2b3a      	cmp	r3, #58	; 0x3a
2400fa96:	d1f9      	bne.n	2400fa8c <f_mount+0x1c>
			i = *tp++ - '0';
2400fa98:	3101      	adds	r1, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
2400fa9a:	4288      	cmp	r0, r1
2400fa9c:	d102      	bne.n	2400faa4 <f_mount+0x34>
2400fa9e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
2400faa2:	d006      	beq.n	2400fab2 <f_mount+0x42>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
2400faa4:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
2400faa6:	b002      	add	sp, #8
2400faa8:	bd10      	pop	{r4, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400faaa:	4663      	mov	r3, ip
2400faac:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
2400faae:	2b3a      	cmp	r3, #58	; 0x3a
2400fab0:	d0f2      	beq.n	2400fa98 <f_mount+0x28>
	cfs = FatFs[vol];					/* Pointer to fs object */
2400fab2:	4913      	ldr	r1, [pc, #76]	; (2400fb00 <f_mount+0x90>)
2400fab4:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
2400fab6:	b143      	cbz	r3, 2400faca <f_mount+0x5a>
		if (Files[i].fs == fs) Files[i].fs = 0;
2400fab8:	4812      	ldr	r0, [pc, #72]	; (2400fb04 <f_mount+0x94>)
2400faba:	6804      	ldr	r4, [r0, #0]
2400fabc:	42a3      	cmp	r3, r4
2400fabe:	d019      	beq.n	2400faf4 <f_mount+0x84>
2400fac0:	6904      	ldr	r4, [r0, #16]
2400fac2:	429c      	cmp	r4, r3
2400fac4:	d013      	beq.n	2400faee <f_mount+0x7e>
		cfs->fs_type = 0;				/* Clear old fs object */
2400fac6:	2000      	movs	r0, #0
2400fac8:	7018      	strb	r0, [r3, #0]
	if (fs) {
2400faca:	9b01      	ldr	r3, [sp, #4]
2400facc:	b15b      	cbz	r3, 2400fae6 <f_mount+0x76>
		fs->fs_type = 0;				/* Clear new fs object */
2400face:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
2400fad0:	2a01      	cmp	r2, #1
	FatFs[vol] = fs;					/* Register new fs object */
2400fad2:	600b      	str	r3, [r1, #0]
		fs->fs_type = 0;				/* Clear new fs object */
2400fad4:	7018      	strb	r0, [r3, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
2400fad6:	d1e6      	bne.n	2400faa6 <f_mount+0x36>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
2400fad8:	4602      	mov	r2, r0
2400fada:	a901      	add	r1, sp, #4
2400fadc:	4668      	mov	r0, sp
2400fade:	f7fd fffd 	bl	2400dadc <find_volume>
}
2400fae2:	b002      	add	sp, #8
2400fae4:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
2400fae6:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
2400fae8:	600b      	str	r3, [r1, #0]
}
2400faea:	b002      	add	sp, #8
2400faec:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
2400faee:	2400      	movs	r4, #0
2400faf0:	6104      	str	r4, [r0, #16]
2400faf2:	e7e8      	b.n	2400fac6 <f_mount+0x56>
2400faf4:	2400      	movs	r4, #0
2400faf6:	6004      	str	r4, [r0, #0]
2400faf8:	6904      	ldr	r4, [r0, #16]
2400fafa:	429c      	cmp	r4, r3
2400fafc:	d1e3      	bne.n	2400fac6 <f_mount+0x56>
2400fafe:	e7f6      	b.n	2400faee <f_mount+0x7e>
2400fb00:	2001daf8 	.word	0x2001daf8
2400fb04:	2001dafc 	.word	0x2001dafc

2400fb08 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
2400fb08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2400fb0c:	b092      	sub	sp, #72	; 0x48
2400fb0e:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
2400fb10:	2800      	cmp	r0, #0
2400fb12:	f000 8096 	beq.w	2400fc42 <f_open+0x13a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
2400fb16:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
2400fb1a:	4616      	mov	r6, r2
2400fb1c:	4604      	mov	r4, r0
2400fb1e:	a903      	add	r1, sp, #12
2400fb20:	a801      	add	r0, sp, #4
2400fb22:	463a      	mov	r2, r7
2400fb24:	f7fd ffda 	bl	2400dadc <find_volume>
	if (res == FR_OK) {
2400fb28:	4605      	mov	r5, r0
2400fb2a:	b128      	cbz	r0, 2400fb38 <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
2400fb2c:	2300      	movs	r3, #0
2400fb2e:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
2400fb30:	4628      	mov	r0, r5
2400fb32:	b012      	add	sp, #72	; 0x48
2400fb34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
2400fb38:	f8dd 800c 	ldr.w	r8, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
2400fb3c:	a804      	add	r0, sp, #16
2400fb3e:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
2400fb40:	f8cd 8010 	str.w	r8, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
2400fb44:	f7fe ff82 	bl	2400ea4c <follow_path>
		if (res == FR_OK) {
2400fb48:	b9f0      	cbnz	r0, 2400fb88 <f_open+0x80>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
2400fb4a:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
2400fb4e:	2b00      	cmp	r3, #0
2400fb50:	db7e      	blt.n	2400fc50 <f_open+0x148>
		if (Files[i].fs) {	/* Existing entry */
2400fb52:	4b9d      	ldr	r3, [pc, #628]	; (2400fdc8 <f_open+0x2c0>)
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400fb54:	f027 0001 	bic.w	r0, r7, #1
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400fb58:	9a04      	ldr	r2, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
2400fb5a:	f8d3 9000 	ldr.w	r9, [r3]
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400fb5e:	4601      	mov	r1, r0
				Files[i].clu == dp->obj.sclust &&
2400fb60:	f8dd c018 	ldr.w	ip, [sp, #24]
				Files[i].ofs == dp->dptr) break;
2400fb64:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
		if (Files[i].fs) {	/* Existing entry */
2400fb68:	f1b9 0f00 	cmp.w	r9, #0
2400fb6c:	f000 80d8 	beq.w	2400fd20 <f_open+0x218>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400fb70:	4591      	cmp	r9, r2
2400fb72:	d06f      	beq.n	2400fc54 <f_open+0x14c>
		if (Files[i].fs) {	/* Existing entry */
2400fb74:	f8d3 9010 	ldr.w	r9, [r3, #16]
2400fb78:	f1b9 0f00 	cmp.w	r9, #0
2400fb7c:	d071      	beq.n	2400fc62 <f_open+0x15a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400fb7e:	454a      	cmp	r2, r9
2400fb80:	f000 80e7 	beq.w	2400fd52 <f_open+0x24a>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
2400fb84:	2512      	movs	r5, #18
2400fb86:	e7d1      	b.n	2400fb2c <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
2400fb88:	f016 0f1c 	tst.w	r6, #28
2400fb8c:	d05e      	beq.n	2400fc4c <f_open+0x144>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
2400fb8e:	2804      	cmp	r0, #4
2400fb90:	d15c      	bne.n	2400fc4c <f_open+0x144>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400fb92:	4b8d      	ldr	r3, [pc, #564]	; (2400fdc8 <f_open+0x2c0>)
2400fb94:	681a      	ldr	r2, [r3, #0]
2400fb96:	b112      	cbz	r2, 2400fb9e <f_open+0x96>
2400fb98:	691b      	ldr	r3, [r3, #16]
2400fb9a:	2b00      	cmp	r3, #0
2400fb9c:	d1f2      	bne.n	2400fb84 <f_open+0x7c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
2400fb9e:	a804      	add	r0, sp, #16
				mode |= FA_CREATE_ALWAYS;		/* File is created */
2400fba0:	f047 0708 	orr.w	r7, r7, #8
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
2400fba4:	f7ff f9c0 	bl	2400ef28 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
2400fba8:	2800      	cmp	r0, #0
2400fbaa:	d14f      	bne.n	2400fc4c <f_open+0x144>
				dw = GET_FATTIME();
2400fbac:	f7fd fcb0 	bl	2400d510 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
2400fbb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
2400fbb2:	0a02      	lsrs	r2, r0, #8
2400fbb4:	f8c3 000e 	str.w	r0, [r3, #14]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
2400fbb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
2400fbba:	75da      	strb	r2, [r3, #23]
2400fbbc:	0c02      	lsrs	r2, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
2400fbbe:	7598      	strb	r0, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
2400fbc0:	0e00      	lsrs	r0, r0, #24
2400fbc2:	761a      	strb	r2, [r3, #24]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
2400fbc4:	2220      	movs	r2, #32
	*ptr++ = (BYTE)val;
2400fbc6:	7658      	strb	r0, [r3, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
2400fbc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
2400fbca:	72da      	strb	r2, [r3, #11]
	if (fs->fs_type == FS_FAT32) {
2400fbcc:	f898 2000 	ldrb.w	r2, [r8]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
2400fbd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
2400fbd2:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
2400fbd4:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
2400fbd6:	d102      	bne.n	2400fbde <f_open+0xd6>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
2400fbd8:	8a9a      	ldrh	r2, [r3, #20]
2400fbda:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
2400fbde:	2200      	movs	r2, #0
2400fbe0:	835a      	strh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
2400fbe2:	f898 1000 	ldrb.w	r1, [r8]
2400fbe6:	2903      	cmp	r1, #3
2400fbe8:	d100      	bne.n	2400fbec <f_open+0xe4>
	*ptr++ = (BYTE)val; val >>= 8;
2400fbea:	829a      	strh	r2, [r3, #20]
					st_dword(dj.dir + DIR_FileSize, 0);
2400fbec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
2400fbee:	2200      	movs	r2, #0
2400fbf0:	61da      	str	r2, [r3, #28]
					fs->wflag = 1;
2400fbf2:	2301      	movs	r3, #1
2400fbf4:	f888 3003 	strb.w	r3, [r8, #3]
					if (cl) {							/* Remove the cluster chain if exist */
2400fbf8:	b186      	cbz	r6, 2400fc1c <f_open+0x114>
						dw = fs->winsect;
2400fbfa:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
2400fbfe:	4631      	mov	r1, r6
2400fc00:	a804      	add	r0, sp, #16
						dw = fs->winsect;
2400fc02:	9300      	str	r3, [sp, #0]
						res = remove_chain(&dj.obj, cl, 0);
2400fc04:	f7ff fe32 	bl	2400f86c <remove_chain>
						if (res == FR_OK) {
2400fc08:	9b00      	ldr	r3, [sp, #0]
2400fc0a:	b9f8      	cbnz	r0, 2400fc4c <f_open+0x144>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
2400fc0c:	3e01      	subs	r6, #1
							res = move_window(fs, dw);
2400fc0e:	4619      	mov	r1, r3
2400fc10:	4640      	mov	r0, r8
2400fc12:	f7fd ff25 	bl	2400da60 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
2400fc16:	f8c8 6010 	str.w	r6, [r8, #16]
		if (res == FR_OK) {
2400fc1a:	b9b8      	cbnz	r0, 2400fc4c <f_open+0x144>
				mode |= FA_MODIFIED;
2400fc1c:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400fc20:	f027 0101 	bic.w	r1, r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
2400fc24:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400fc28:	3900      	subs	r1, #0
2400fc2a:	a804      	add	r0, sp, #16
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
2400fc2c:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400fc2e:	bf18      	it	ne
2400fc30:	2101      	movne	r1, #1
			fp->dir_ptr = dj.dir;
2400fc32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
2400fc34:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400fc36:	f7fd fd85 	bl	2400d744 <inc_lock>
2400fc3a:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
2400fc3c:	b9e8      	cbnz	r0, 2400fc7a <f_open+0x172>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
2400fc3e:	2502      	movs	r5, #2
2400fc40:	e774      	b.n	2400fb2c <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
2400fc42:	2509      	movs	r5, #9
}
2400fc44:	4628      	mov	r0, r5
2400fc46:	b012      	add	sp, #72	; 0x48
2400fc48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2400fc4c:	4605      	mov	r5, r0
2400fc4e:	e76d      	b.n	2400fb2c <f_open+0x24>
				res = FR_INVALID_NAME;
2400fc50:	2506      	movs	r5, #6
2400fc52:	e76b      	b.n	2400fb2c <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400fc54:	685a      	ldr	r2, [r3, #4]
2400fc56:	4562      	cmp	r2, ip
2400fc58:	f000 8084 	beq.w	2400fd64 <f_open+0x25c>
		if (Files[i].fs) {	/* Existing entry */
2400fc5c:	691a      	ldr	r2, [r3, #16]
2400fc5e:	2a00      	cmp	r2, #0
2400fc60:	d18d      	bne.n	2400fb7e <f_open+0x76>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
2400fc62:	f016 0f1c 	tst.w	r6, #28
2400fc66:	d048      	beq.n	2400fcfa <f_open+0x1f2>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
2400fc68:	f89d 3016 	ldrb.w	r3, [sp, #22]
2400fc6c:	f013 0f11 	tst.w	r3, #17
2400fc70:	d154      	bne.n	2400fd1c <f_open+0x214>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
2400fc72:	0773      	lsls	r3, r6, #29
2400fc74:	d54f      	bpl.n	2400fd16 <f_open+0x20e>
2400fc76:	2508      	movs	r5, #8
2400fc78:	e758      	b.n	2400fb2c <f_open+0x24>
	if (fs->fs_type == FS_FAT32) {
2400fc7a:	f898 2000 	ldrb.w	r2, [r8]
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
2400fc7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
2400fc80:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
2400fc82:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
2400fc84:	d102      	bne.n	2400fc8c <f_open+0x184>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
2400fc86:	8a9a      	ldrh	r2, [r3, #20]
2400fc88:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
2400fc8c:	60a6      	str	r6, [r4, #8]
			fp->err = 0;			/* Clear error flag */
2400fc8e:	2100      	movs	r1, #0
	rv = rv << 8 | ptr[0];
2400fc90:	f8d3 901c 	ldr.w	r9, [r3, #28]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
2400fc94:	f104 0a2c 	add.w	sl, r4, #44	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
2400fc98:	f8c4 8000 	str.w	r8, [r4]
		*d++ = (BYTE)val;
2400fc9c:	f44f 7200 	mov.w	r2, #512	; 0x200
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
2400fca0:	f8c4 900c 	str.w	r9, [r4, #12]
		*d++ = (BYTE)val;
2400fca4:	4650      	mov	r0, sl
			fp->obj.id = fs->id;
2400fca6:	f8b8 3006 	ldrh.w	r3, [r8, #6]
			fp->flag = mode;		/* Set file access mode */
2400fcaa:	7527      	strb	r7, [r4, #20]
			fp->obj.id = fs->id;
2400fcac:	80a3      	strh	r3, [r4, #4]
			fp->err = 0;			/* Clear error flag */
2400fcae:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
2400fcb0:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
2400fcb2:	61a1      	str	r1, [r4, #24]
		*d++ = (BYTE)val;
2400fcb4:	f007 fec4 	bl	24017a40 <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
2400fcb8:	06bf      	lsls	r7, r7, #26
2400fcba:	f57f af39 	bpl.w	2400fb30 <f_open+0x28>
2400fcbe:	f1b9 0f00 	cmp.w	r9, #0
2400fcc2:	f43f af35 	beq.w	2400fb30 <f_open+0x28>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
2400fcc6:	f8c4 9018 	str.w	r9, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
2400fcca:	f8b8 300a 	ldrh.w	r3, [r8, #10]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2400fcce:	ebb9 2f43 	cmp.w	r9, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
2400fcd2:	ea4f 2743 	mov.w	r7, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2400fcd6:	d804      	bhi.n	2400fce2 <f_open+0x1da>
2400fcd8:	e04a      	b.n	2400fd70 <f_open+0x268>
2400fcda:	1c70      	adds	r0, r6, #1
2400fcdc:	d06c      	beq.n	2400fdb8 <f_open+0x2b0>
2400fcde:	454f      	cmp	r7, r9
2400fce0:	d26a      	bcs.n	2400fdb8 <f_open+0x2b0>
					clst = get_fat(&fp->obj, clst);
2400fce2:	4631      	mov	r1, r6
2400fce4:	6820      	ldr	r0, [r4, #0]
2400fce6:	f7fe f8f1 	bl	2400decc <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
2400fcea:	2801      	cmp	r0, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2400fcec:	eba9 0907 	sub.w	r9, r9, r7
					clst = get_fat(&fp->obj, clst);
2400fcf0:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
2400fcf2:	d8f2      	bhi.n	2400fcda <f_open+0x1d2>
2400fcf4:	2502      	movs	r5, #2
				fp->clust = clst;
2400fcf6:	61e0      	str	r0, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
2400fcf8:	e718      	b.n	2400fb2c <f_open+0x24>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
2400fcfa:	f89d 3016 	ldrb.w	r3, [sp, #22]
2400fcfe:	06da      	lsls	r2, r3, #27
2400fd00:	d425      	bmi.n	2400fd4e <f_open+0x246>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
2400fd02:	07b2      	lsls	r2, r6, #30
2400fd04:	d501      	bpl.n	2400fd0a <f_open+0x202>
2400fd06:	07db      	lsls	r3, r3, #31
2400fd08:	d408      	bmi.n	2400fd1c <f_open+0x214>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
2400fd0a:	f006 0608 	and.w	r6, r6, #8
2400fd0e:	2e00      	cmp	r6, #0
2400fd10:	d184      	bne.n	2400fc1c <f_open+0x114>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400fd12:	4601      	mov	r1, r0
2400fd14:	e786      	b.n	2400fc24 <f_open+0x11c>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
2400fd16:	0730      	lsls	r0, r6, #28
2400fd18:	d584      	bpl.n	2400fc24 <f_open+0x11c>
2400fd1a:	e747      	b.n	2400fbac <f_open+0xa4>
						res = FR_DENIED;
2400fd1c:	2507      	movs	r5, #7
2400fd1e:	e705      	b.n	2400fb2c <f_open+0x24>
		if (Files[i].fs) {	/* Existing entry */
2400fd20:	f8d3 9010 	ldr.w	r9, [r3, #16]
2400fd24:	f1b9 0f00 	cmp.w	r9, #0
2400fd28:	d09b      	beq.n	2400fc62 <f_open+0x15a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400fd2a:	4591      	cmp	r9, r2
2400fd2c:	d199      	bne.n	2400fc62 <f_open+0x15a>
2400fd2e:	695a      	ldr	r2, [r3, #20]
2400fd30:	4562      	cmp	r2, ip
2400fd32:	d196      	bne.n	2400fc62 <f_open+0x15a>
				Files[i].clu == dp->obj.sclust &&
2400fd34:	699a      	ldr	r2, [r3, #24]
2400fd36:	4572      	cmp	r2, lr
2400fd38:	d193      	bne.n	2400fc62 <f_open+0x15a>
	for (i = be = 0; i < _FS_LOCK; i++) {
2400fd3a:	2201      	movs	r2, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
2400fd3c:	b928      	cbnz	r0, 2400fd4a <f_open+0x242>
2400fd3e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
2400fd42:	899b      	ldrh	r3, [r3, #12]
2400fd44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400fd48:	d18b      	bne.n	2400fc62 <f_open+0x15a>
2400fd4a:	2510      	movs	r5, #16
2400fd4c:	e6ee      	b.n	2400fb2c <f_open+0x24>
					res = FR_NO_FILE;
2400fd4e:	2504      	movs	r5, #4
2400fd50:	e6ec      	b.n	2400fb2c <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400fd52:	695a      	ldr	r2, [r3, #20]
2400fd54:	4562      	cmp	r2, ip
2400fd56:	f47f af15 	bne.w	2400fb84 <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
2400fd5a:	699a      	ldr	r2, [r3, #24]
2400fd5c:	4572      	cmp	r2, lr
2400fd5e:	f47f af11 	bne.w	2400fb84 <f_open+0x7c>
2400fd62:	e7ea      	b.n	2400fd3a <f_open+0x232>
2400fd64:	689a      	ldr	r2, [r3, #8]
2400fd66:	4572      	cmp	r2, lr
2400fd68:	f47f af78 	bne.w	2400fc5c <f_open+0x154>
	for (i = be = 0; i < _FS_LOCK; i++) {
2400fd6c:	462a      	mov	r2, r5
2400fd6e:	e7e5      	b.n	2400fd3c <f_open+0x234>
				fp->clust = clst;
2400fd70:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
2400fd72:	f3c9 0308 	ubfx	r3, r9, #0, #9
2400fd76:	2b00      	cmp	r3, #0
2400fd78:	f43f aeda 	beq.w	2400fb30 <f_open+0x28>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400fd7c:	f8d8 3018 	ldr.w	r3, [r8, #24]
	clst -= 2;
2400fd80:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400fd82:	3b02      	subs	r3, #2
2400fd84:	429e      	cmp	r6, r3
2400fd86:	f4bf af5a 	bcs.w	2400fc3e <f_open+0x136>
	return clst * fs->csize + fs->database;
2400fd8a:	f8b8 200a 	ldrh.w	r2, [r8, #10]
2400fd8e:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
2400fd92:	fb06 3202 	mla	r2, r6, r2, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
2400fd96:	2a00      	cmp	r2, #0
2400fd98:	f43f af51 	beq.w	2400fc3e <f_open+0x136>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
2400fd9c:	eb02 2259 	add.w	r2, r2, r9, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
2400fda0:	4651      	mov	r1, sl
2400fda2:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
2400fda4:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
2400fda6:	f898 0001 	ldrb.w	r0, [r8, #1]
2400fdaa:	f7fd fc9f 	bl	2400d6ec <disk_read>
2400fdae:	2800      	cmp	r0, #0
2400fdb0:	f43f aebe 	beq.w	2400fb30 <f_open+0x28>
2400fdb4:	2501      	movs	r5, #1
2400fdb6:	e6b9      	b.n	2400fb2c <f_open+0x24>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
2400fdb8:	1c71      	adds	r1, r6, #1
				fp->clust = clst;
2400fdba:	61e6      	str	r6, [r4, #28]
					if (clst <= 1) res = FR_INT_ERR;
2400fdbc:	bf0c      	ite	eq
2400fdbe:	2301      	moveq	r3, #1
2400fdc0:	2300      	movne	r3, #0
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
2400fdc2:	d1d6      	bne.n	2400fd72 <f_open+0x26a>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
2400fdc4:	461d      	mov	r5, r3
2400fdc6:	e6b1      	b.n	2400fb2c <f_open+0x24>
2400fdc8:	2001dafc 	.word	0x2001dafc

2400fdcc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
2400fdcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400fdd0:	461e      	mov	r6, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
2400fdd2:	2300      	movs	r3, #0
{
2400fdd4:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
2400fdd6:	6033      	str	r3, [r6, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400fdd8:	b150      	cbz	r0, 2400fdf0 <f_read+0x24>
2400fdda:	6803      	ldr	r3, [r0, #0]
2400fddc:	4604      	mov	r4, r0
2400fdde:	b13b      	cbz	r3, 2400fdf0 <f_read+0x24>
2400fde0:	4691      	mov	r9, r2
2400fde2:	781a      	ldrb	r2, [r3, #0]
2400fde4:	b122      	cbz	r2, 2400fdf0 <f_read+0x24>
2400fde6:	460d      	mov	r5, r1
2400fde8:	88da      	ldrh	r2, [r3, #6]
2400fdea:	8881      	ldrh	r1, [r0, #4]
2400fdec:	4291      	cmp	r1, r2
2400fdee:	d005      	beq.n	2400fdfc <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
2400fdf0:	f04f 0809 	mov.w	r8, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
2400fdf4:	4640      	mov	r0, r8
2400fdf6:	b005      	add	sp, #20
2400fdf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
2400fdfc:	7858      	ldrb	r0, [r3, #1]
2400fdfe:	f7fd fc59 	bl	2400d6b4 <disk_status>
2400fe02:	07c2      	lsls	r2, r0, #31
2400fe04:	d4f4      	bmi.n	2400fdf0 <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
2400fe06:	f894 8015 	ldrb.w	r8, [r4, #21]
2400fe0a:	f1b8 0f00 	cmp.w	r8, #0
2400fe0e:	d1f1      	bne.n	2400fdf4 <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
2400fe10:	7d23      	ldrb	r3, [r4, #20]
2400fe12:	f013 0301 	ands.w	r3, r3, #1
2400fe16:	9300      	str	r3, [sp, #0]
2400fe18:	f000 80cb 	beq.w	2400ffb2 <f_read+0x1e6>
	remain = fp->obj.objsize - fp->fptr;
2400fe1c:	69a3      	ldr	r3, [r4, #24]
2400fe1e:	68e7      	ldr	r7, [r4, #12]
2400fe20:	1aff      	subs	r7, r7, r3
2400fe22:	454f      	cmp	r7, r9
2400fe24:	bf28      	it	cs
2400fe26:	464f      	movcs	r7, r9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
2400fe28:	f8d4 9000 	ldr.w	r9, [r4]
	for ( ;  btr;								/* Repeat until all data read */
2400fe2c:	2f00      	cmp	r7, #0
2400fe2e:	d0e1      	beq.n	2400fdf4 <f_read+0x28>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
2400fe30:	f104 022d 	add.w	r2, r4, #45	; 0x2d
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400fe34:	f104 0a2c 	add.w	sl, r4, #44	; 0x2c
2400fe38:	e9cd 2801 	strd	r2, r8, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
2400fe3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
2400fe40:	2a00      	cmp	r2, #0
2400fe42:	d140      	bne.n	2400fec6 <f_read+0xfa>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
2400fe44:	f8b9 200a 	ldrh.w	r2, [r9, #10]
2400fe48:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
2400fe4a:	ea12 2253 	ands.w	r2, r2, r3, lsr #9
2400fe4e:	d06e      	beq.n	2400ff2e <f_read+0x162>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
2400fe50:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400fe52:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
2400fe56:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400fe58:	3b02      	subs	r3, #2
2400fe5a:	4298      	cmp	r0, r3
2400fe5c:	d274      	bcs.n	2400ff48 <f_read+0x17c>
	return clst * fs->csize + fs->database;
2400fe5e:	f8b9 100a 	ldrh.w	r1, [r9, #10]
2400fe62:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
2400fe66:	fb01 3300 	mla	r3, r1, r0, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
2400fe6a:	2b00      	cmp	r3, #0
2400fe6c:	d06c      	beq.n	2400ff48 <f_read+0x17c>
			if (cc) {							/* Read maximum contiguous sectors directly */
2400fe6e:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
2400fe72:	eb02 0b03 	add.w	fp, r2, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
2400fe76:	d36e      	bcc.n	2400ff56 <f_read+0x18a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
2400fe78:	eb02 2057 	add.w	r0, r2, r7, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
2400fe7c:	ea4f 2857 	mov.w	r8, r7, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
2400fe80:	4288      	cmp	r0, r1
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400fe82:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
2400fe86:	bf88      	it	hi
2400fe88:	eba1 0802 	subhi.w	r8, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400fe8c:	465a      	mov	r2, fp
2400fe8e:	4629      	mov	r1, r5
2400fe90:	4643      	mov	r3, r8
2400fe92:	f7fd fc2b 	bl	2400d6ec <disk_read>
2400fe96:	2800      	cmp	r0, #0
2400fe98:	d172      	bne.n	2400ff80 <f_read+0x1b4>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
2400fe9a:	f994 2014 	ldrsb.w	r2, [r4, #20]
2400fe9e:	2a00      	cmp	r2, #0
2400fea0:	f2c0 8097 	blt.w	2400ffd2 <f_read+0x206>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
2400fea4:	ea4f 2148 	mov.w	r1, r8, lsl #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
2400fea8:	69a3      	ldr	r3, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
2400feaa:	1a7f      	subs	r7, r7, r1
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
2400feac:	440d      	add	r5, r1
2400feae:	440b      	add	r3, r1
2400feb0:	61a3      	str	r3, [r4, #24]
2400feb2:	6833      	ldr	r3, [r6, #0]
2400feb4:	440b      	add	r3, r1
2400feb6:	6033      	str	r3, [r6, #0]
	for ( ;  btr;								/* Repeat until all data read */
2400feb8:	f000 80a1 	beq.w	2400fffe <f_read+0x232>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
2400febc:	69a3      	ldr	r3, [r4, #24]
2400febe:	f3c3 0208 	ubfx	r2, r3, #0, #9
2400fec2:	2a00      	cmp	r2, #0
2400fec4:	d0be      	beq.n	2400fe44 <f_read+0x78>
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
2400fec6:	1c50      	adds	r0, r2, #1
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400fec8:	f5c2 7100 	rsb	r1, r2, #512	; 0x200
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
2400fecc:	eb0a 0302 	add.w	r3, sl, r2
2400fed0:	4450      	add	r0, sl
2400fed2:	42b9      	cmp	r1, r7
2400fed4:	eba5 0000 	sub.w	r0, r5, r0
2400fed8:	bf28      	it	cs
2400feda:	4639      	movcs	r1, r7
void mem_cpy (void* dst, const void* src, UINT cnt) {
2400fedc:	2802      	cmp	r0, #2
2400fede:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
2400fee2:	d95c      	bls.n	2400ff9e <f_read+0x1d2>
2400fee4:	f1bb 0f05 	cmp.w	fp, #5
2400fee8:	d959      	bls.n	2400ff9e <f_read+0x1d2>
2400feea:	f021 0e03 	bic.w	lr, r1, #3
2400feee:	461a      	mov	r2, r3
2400fef0:	4628      	mov	r0, r5
2400fef2:	449e      	add	lr, r3
			*d++ = *s++;
2400fef4:	f852 cb04 	ldr.w	ip, [r2], #4
2400fef8:	4572      	cmp	r2, lr
2400fefa:	f840 cb04 	str.w	ip, [r0], #4
		} while (--cnt);
2400fefe:	d1f9      	bne.n	2400fef4 <f_read+0x128>
2400ff00:	f021 0203 	bic.w	r2, r1, #3
2400ff04:	4291      	cmp	r1, r2
2400ff06:	eb05 0002 	add.w	r0, r5, r2
2400ff0a:	eb03 0c02 	add.w	ip, r3, r2
2400ff0e:	d0cb      	beq.n	2400fea8 <f_read+0xdc>
			*d++ = *s++;
2400ff10:	5c9b      	ldrb	r3, [r3, r2]
		} while (--cnt);
2400ff12:	ebbb 0b02 	subs.w	fp, fp, r2
			*d++ = *s++;
2400ff16:	54ab      	strb	r3, [r5, r2]
		} while (--cnt);
2400ff18:	d0c6      	beq.n	2400fea8 <f_read+0xdc>
			*d++ = *s++;
2400ff1a:	f89c 3001 	ldrb.w	r3, [ip, #1]
		} while (--cnt);
2400ff1e:	f1bb 0f01 	cmp.w	fp, #1
			*d++ = *s++;
2400ff22:	7043      	strb	r3, [r0, #1]
		} while (--cnt);
2400ff24:	d0c0      	beq.n	2400fea8 <f_read+0xdc>
			*d++ = *s++;
2400ff26:	f89c 3002 	ldrb.w	r3, [ip, #2]
2400ff2a:	7083      	strb	r3, [r0, #2]
		} while (--cnt);
2400ff2c:	e7bc      	b.n	2400fea8 <f_read+0xdc>
				if (fp->fptr == 0) {			/* On the top of the file? */
2400ff2e:	bb7b      	cbnz	r3, 2400ff90 <f_read+0x1c4>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
2400ff30:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
2400ff32:	2801      	cmp	r0, #1
2400ff34:	d908      	bls.n	2400ff48 <f_read+0x17c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2400ff36:	1c43      	adds	r3, r0, #1
2400ff38:	d022      	beq.n	2400ff80 <f_read+0x1b4>
				fp->clust = clst;				/* Update current cluster */
2400ff3a:	61e0      	str	r0, [r4, #28]
	clst -= 2;
2400ff3c:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400ff3e:	f8d9 3018 	ldr.w	r3, [r9, #24]
2400ff42:	3b02      	subs	r3, #2
2400ff44:	4298      	cmp	r0, r3
2400ff46:	d38a      	bcc.n	2400fe5e <f_read+0x92>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
2400ff48:	2302      	movs	r3, #2
2400ff4a:	4698      	mov	r8, r3
2400ff4c:	7563      	strb	r3, [r4, #21]
}
2400ff4e:	4640      	mov	r0, r8
2400ff50:	b005      	add	sp, #20
2400ff52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect) {			/* Load data sector if not in cache */
2400ff56:	6a22      	ldr	r2, [r4, #32]
2400ff58:	455a      	cmp	r2, fp
2400ff5a:	d00b      	beq.n	2400ff74 <f_read+0x1a8>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
2400ff5c:	f994 3014 	ldrsb.w	r3, [r4, #20]
2400ff60:	2b00      	cmp	r3, #0
2400ff62:	db29      	blt.n	2400ffb8 <f_read+0x1ec>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
2400ff64:	2301      	movs	r3, #1
2400ff66:	465a      	mov	r2, fp
2400ff68:	4651      	mov	r1, sl
2400ff6a:	f899 0001 	ldrb.w	r0, [r9, #1]
2400ff6e:	f7fd fbbd 	bl	2400d6ec <disk_read>
2400ff72:	b928      	cbnz	r0, 2400ff80 <f_read+0x1b4>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400ff74:	69a3      	ldr	r3, [r4, #24]
			fp->sect = sect;
2400ff76:	f8c4 b020 	str.w	fp, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400ff7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
2400ff7e:	e7a2      	b.n	2400fec6 <f_read+0xfa>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2400ff80:	f8dd 8000 	ldr.w	r8, [sp]
2400ff84:	2301      	movs	r3, #1
}
2400ff86:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2400ff88:	7563      	strb	r3, [r4, #21]
}
2400ff8a:	b005      	add	sp, #20
2400ff8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
2400ff90:	69e1      	ldr	r1, [r4, #28]
2400ff92:	6820      	ldr	r0, [r4, #0]
2400ff94:	9203      	str	r2, [sp, #12]
2400ff96:	f7fd ff99 	bl	2400decc <get_fat.isra.0>
2400ff9a:	9a03      	ldr	r2, [sp, #12]
2400ff9c:	e7c9      	b.n	2400ff32 <f_read+0x166>
2400ff9e:	1e6a      	subs	r2, r5, #1
2400ffa0:	eb03 0c01 	add.w	ip, r3, r1
			*d++ = *s++;
2400ffa4:	f813 0b01 	ldrb.w	r0, [r3], #1
		} while (--cnt);
2400ffa8:	4563      	cmp	r3, ip
			*d++ = *s++;
2400ffaa:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
2400ffae:	d1f9      	bne.n	2400ffa4 <f_read+0x1d8>
2400ffb0:	e77a      	b.n	2400fea8 <f_read+0xdc>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
2400ffb2:	f04f 0807 	mov.w	r8, #7
2400ffb6:	e71d      	b.n	2400fdf4 <f_read+0x28>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400ffb8:	2301      	movs	r3, #1
2400ffba:	4651      	mov	r1, sl
2400ffbc:	f899 0001 	ldrb.w	r0, [r9, #1]
2400ffc0:	f7fd fba4 	bl	2400d70c <disk_write>
2400ffc4:	2800      	cmp	r0, #0
2400ffc6:	d1db      	bne.n	2400ff80 <f_read+0x1b4>
					fp->flag &= (BYTE)~FA_DIRTY;
2400ffc8:	7d23      	ldrb	r3, [r4, #20]
2400ffca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2400ffce:	7523      	strb	r3, [r4, #20]
2400ffd0:	e7c8      	b.n	2400ff64 <f_read+0x198>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
2400ffd2:	6a22      	ldr	r2, [r4, #32]
2400ffd4:	eba2 020b 	sub.w	r2, r2, fp
2400ffd8:	4542      	cmp	r2, r8
2400ffda:	f4bf af63 	bcs.w	2400fea4 <f_read+0xd8>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
2400ffde:	eb05 2242 	add.w	r2, r5, r2, lsl #9
2400ffe2:	9b01      	ldr	r3, [sp, #4]
2400ffe4:	4651      	mov	r1, sl
void mem_cpy (void* dst, const void* src, UINT cnt) {
2400ffe6:	1ad0      	subs	r0, r2, r3
2400ffe8:	2802      	cmp	r0, #2
2400ffea:	d90b      	bls.n	24010004 <f_read+0x238>
2400ffec:	f502 7c00 	add.w	ip, r2, #512	; 0x200
			*d++ = *s++;
2400fff0:	f851 3b04 	ldr.w	r3, [r1], #4
2400fff4:	f842 3b04 	str.w	r3, [r2], #4
		} while (--cnt);
2400fff8:	4562      	cmp	r2, ip
2400fffa:	d1f9      	bne.n	2400fff0 <f_read+0x224>
2400fffc:	e752      	b.n	2400fea4 <f_read+0xd8>
2400fffe:	f8dd 8008 	ldr.w	r8, [sp, #8]
24010002:	e6f7      	b.n	2400fdf4 <f_read+0x28>
24010004:	3a01      	subs	r2, #1
24010006:	f504 7c0b 	add.w	ip, r4, #556	; 0x22c
			*d++ = *s++;
2401000a:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
2401000e:	458c      	cmp	ip, r1
			*d++ = *s++;
24010010:	f802 3f01 	strb.w	r3, [r2, #1]!
		} while (--cnt);
24010014:	d1f9      	bne.n	2401000a <f_read+0x23e>
24010016:	e745      	b.n	2400fea4 <f_read+0xd8>

24010018 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
24010018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2401001c:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
2401001e:	2300      	movs	r3, #0
{
24010020:	b085      	sub	sp, #20
	*bw = 0;	/* Clear write byte counter */
24010022:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
24010024:	b150      	cbz	r0, 2401003c <f_write+0x24>
24010026:	6803      	ldr	r3, [r0, #0]
24010028:	4604      	mov	r4, r0
2401002a:	b13b      	cbz	r3, 2401003c <f_write+0x24>
2401002c:	4616      	mov	r6, r2
2401002e:	781a      	ldrb	r2, [r3, #0]
24010030:	b122      	cbz	r2, 2401003c <f_write+0x24>
24010032:	460d      	mov	r5, r1
24010034:	88da      	ldrh	r2, [r3, #6]
24010036:	8881      	ldrh	r1, [r0, #4]
24010038:	4291      	cmp	r1, r2
2401003a:	d005      	beq.n	24010048 <f_write+0x30>
	FRESULT res = FR_INVALID_OBJECT;
2401003c:	f04f 0809 	mov.w	r8, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
24010040:	4640      	mov	r0, r8
24010042:	b005      	add	sp, #20
24010044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
24010048:	7858      	ldrb	r0, [r3, #1]
2401004a:	f7fd fb33 	bl	2400d6b4 <disk_status>
2401004e:	07c0      	lsls	r0, r0, #31
24010050:	d4f4      	bmi.n	2401003c <f_write+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
24010052:	f894 8015 	ldrb.w	r8, [r4, #21]
24010056:	f1b8 0f00 	cmp.w	r8, #0
2401005a:	d1f1      	bne.n	24010040 <f_write+0x28>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
2401005c:	7d22      	ldrb	r2, [r4, #20]
2401005e:	0791      	lsls	r1, r2, #30
24010060:	f140 80e6 	bpl.w	24010230 <f_write+0x218>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
24010064:	69a3      	ldr	r3, [r4, #24]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
24010066:	f8d4 9000 	ldr.w	r9, [r4]
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
2401006a:	42f3      	cmn	r3, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2401006c:	bf28      	it	cs
2401006e:	43de      	mvncs	r6, r3
	for ( ;  btw;							/* Repeat until all data written */
24010070:	2e00      	cmp	r6, #0
24010072:	f000 80cf 	beq.w	24010214 <f_write+0x1fc>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
24010076:	f504 720b 	add.w	r2, r4, #556	; 0x22c
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
2401007a:	f104 0a2c 	add.w	sl, r4, #44	; 0x2c
2401007e:	9201      	str	r2, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
24010080:	f3c3 0208 	ubfx	r2, r3, #0, #9
24010084:	2a00      	cmp	r2, #0
24010086:	d15e      	bne.n	24010146 <f_write+0x12e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
24010088:	f8b9 b00a 	ldrh.w	fp, [r9, #10]
2401008c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
			if (csect == 0) {				/* On the cluster boundary? */
24010090:	ea1b 2b53 	ands.w	fp, fp, r3, lsr #9
24010094:	d110      	bne.n	240100b8 <f_write+0xa0>
				if (fp->fptr == 0) {		/* On the top of the file? */
24010096:	2b00      	cmp	r3, #0
24010098:	f040 80b4 	bne.w	24010204 <f_write+0x1ec>
					clst = fp->obj.sclust;	/* Follow from the origin */
2401009c:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
2401009e:	2800      	cmp	r0, #0
240100a0:	f000 80c9 	beq.w	24010236 <f_write+0x21e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
240100a4:	2801      	cmp	r0, #1
240100a6:	f000 8087 	beq.w	240101b8 <f_write+0x1a0>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
240100aa:	1c43      	adds	r3, r0, #1
240100ac:	f000 80a3 	beq.w	240101f6 <f_write+0x1de>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
240100b0:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
240100b2:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
240100b4:	b903      	cbnz	r3, 240100b8 <f_write+0xa0>
240100b6:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
240100b8:	f994 3014 	ldrsb.w	r3, [r4, #20]
240100bc:	2b00      	cmp	r3, #0
240100be:	f2c0 808d 	blt.w	240101dc <f_write+0x1c4>
	clst -= 2;
240100c2:	69e3      	ldr	r3, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
240100c4:	f8d9 2018 	ldr.w	r2, [r9, #24]
	clst -= 2;
240100c8:	3b02      	subs	r3, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
240100ca:	3a02      	subs	r2, #2
240100cc:	4293      	cmp	r3, r2
240100ce:	d273      	bcs.n	240101b8 <f_write+0x1a0>
	return clst * fs->csize + fs->database;
240100d0:	f8b9 100a 	ldrh.w	r1, [r9, #10]
240100d4:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
240100d8:	fb01 2203 	mla	r2, r1, r3, r2
			if (!sect) ABORT(fs, FR_INT_ERR);
240100dc:	2a00      	cmp	r2, #0
240100de:	d06b      	beq.n	240101b8 <f_write+0x1a0>
			if (cc) {						/* Write maximum contiguous sectors directly */
240100e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
240100e4:	445a      	add	r2, fp
			if (cc) {						/* Write maximum contiguous sectors directly */
240100e6:	d36e      	bcc.n	240101c6 <f_write+0x1ae>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
240100e8:	eb0b 2056 	add.w	r0, fp, r6, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
240100ec:	0a73      	lsrs	r3, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
240100ee:	4288      	cmp	r0, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
240100f0:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
240100f4:	bf88      	it	hi
240100f6:	eba1 030b 	subhi.w	r3, r1, fp
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
240100fa:	4629      	mov	r1, r5
240100fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
24010100:	f7fd fb04 	bl	2400d70c <disk_write>
24010104:	2800      	cmp	r0, #0
24010106:	d176      	bne.n	240101f6 <f_write+0x1de>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
24010108:	6a21      	ldr	r1, [r4, #32]
2401010a:	9a02      	ldr	r2, [sp, #8]
2401010c:	9b03      	ldr	r3, [sp, #12]
2401010e:	1a8a      	subs	r2, r1, r2
24010110:	429a      	cmp	r2, r3
24010112:	f0c0 80a4 	bcc.w	2401025e <f_write+0x246>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
24010116:	eb05 2243 	add.w	r2, r5, r3, lsl #9
2401011a:	ea4f 2c43 	mov.w	ip, r3, lsl #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
2401011e:	69a3      	ldr	r3, [r4, #24]
24010120:	4615      	mov	r5, r2
24010122:	68e2      	ldr	r2, [r4, #12]
24010124:	4463      	add	r3, ip
24010126:	429a      	cmp	r2, r3
24010128:	61a3      	str	r3, [r4, #24]
2401012a:	bf38      	it	cc
2401012c:	461a      	movcc	r2, r3
	for ( ;  btw;							/* Repeat until all data written */
2401012e:	ebb6 060c 	subs.w	r6, r6, ip
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
24010132:	60e2      	str	r2, [r4, #12]
24010134:	683b      	ldr	r3, [r7, #0]
24010136:	4463      	add	r3, ip
24010138:	603b      	str	r3, [r7, #0]
	for ( ;  btw;							/* Repeat until all data written */
2401013a:	d06a      	beq.n	24010212 <f_write+0x1fa>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
2401013c:	69a3      	ldr	r3, [r4, #24]
2401013e:	f3c3 0208 	ubfx	r2, r3, #0, #9
24010142:	2a00      	cmp	r2, #0
24010144:	d0a0      	beq.n	24010088 <f_write+0x70>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
24010146:	f5c2 7c00 	rsb	ip, r2, #512	; 0x200
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
2401014a:	eb0a 0302 	add.w	r3, sl, r2
2401014e:	1c6a      	adds	r2, r5, #1
24010150:	45b4      	cmp	ip, r6
24010152:	eba3 0202 	sub.w	r2, r3, r2
24010156:	bf28      	it	cs
24010158:	46b4      	movcs	ip, r6
void mem_cpy (void* dst, const void* src, UINT cnt) {
2401015a:	2a02      	cmp	r2, #2
2401015c:	f10c 3bff 	add.w	fp, ip, #4294967295	; 0xffffffff
24010160:	d95c      	bls.n	2401021c <f_write+0x204>
24010162:	f1bb 0f05 	cmp.w	fp, #5
24010166:	d959      	bls.n	2401021c <f_write+0x204>
24010168:	f02c 0e03 	bic.w	lr, ip, #3
2401016c:	461a      	mov	r2, r3
2401016e:	4629      	mov	r1, r5
24010170:	449e      	add	lr, r3
			*d++ = *s++;
24010172:	f851 0b04 	ldr.w	r0, [r1], #4
24010176:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
2401017a:	4596      	cmp	lr, r2
2401017c:	d1f9      	bne.n	24010172 <f_write+0x15a>
2401017e:	f02c 0103 	bic.w	r1, ip, #3
24010182:	458c      	cmp	ip, r1
24010184:	eb03 0001 	add.w	r0, r3, r1
24010188:	eb05 0201 	add.w	r2, r5, r1
2401018c:	d00f      	beq.n	240101ae <f_write+0x196>
			*d++ = *s++;
2401018e:	f815 e001 	ldrb.w	lr, [r5, r1]
		} while (--cnt);
24010192:	ebbb 0b01 	subs.w	fp, fp, r1
			*d++ = *s++;
24010196:	f803 e001 	strb.w	lr, [r3, r1]
		} while (--cnt);
2401019a:	d006      	beq.n	240101aa <f_write+0x192>
			*d++ = *s++;
2401019c:	7853      	ldrb	r3, [r2, #1]
		} while (--cnt);
2401019e:	f1bb 0f01 	cmp.w	fp, #1
			*d++ = *s++;
240101a2:	7043      	strb	r3, [r0, #1]
240101a4:	bf1c      	itt	ne
240101a6:	7893      	ldrbne	r3, [r2, #2]
240101a8:	7083      	strbne	r3, [r0, #2]
		} while (--cnt);
240101aa:	eb05 020c 	add.w	r2, r5, ip
		fp->flag |= FA_DIRTY;
240101ae:	7d23      	ldrb	r3, [r4, #20]
240101b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
240101b4:	7523      	strb	r3, [r4, #20]
240101b6:	e7b2      	b.n	2401011e <f_write+0x106>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
240101b8:	2302      	movs	r3, #2
240101ba:	4698      	mov	r8, r3
240101bc:	7563      	strb	r3, [r4, #21]
}
240101be:	4640      	mov	r0, r8
240101c0:	b005      	add	sp, #20
240101c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect && 		/* Fill sector cache with file data */
240101c6:	6a23      	ldr	r3, [r4, #32]
240101c8:	4293      	cmp	r3, r2
				fp->fptr < fp->obj.objsize &&
240101ca:	69a3      	ldr	r3, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
240101cc:	d002      	beq.n	240101d4 <f_write+0x1bc>
240101ce:	68e1      	ldr	r1, [r4, #12]
240101d0:	428b      	cmp	r3, r1
240101d2:	d338      	bcc.n	24010246 <f_write+0x22e>
			fp->sect = sect;
240101d4:	6222      	str	r2, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
240101d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
240101da:	e7b4      	b.n	24010146 <f_write+0x12e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
240101dc:	2301      	movs	r3, #1
240101de:	6a22      	ldr	r2, [r4, #32]
240101e0:	4651      	mov	r1, sl
240101e2:	f899 0001 	ldrb.w	r0, [r9, #1]
240101e6:	f7fd fa91 	bl	2400d70c <disk_write>
240101ea:	b920      	cbnz	r0, 240101f6 <f_write+0x1de>
				fp->flag &= (BYTE)~FA_DIRTY;
240101ec:	7d23      	ldrb	r3, [r4, #20]
240101ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
240101f2:	7523      	strb	r3, [r4, #20]
240101f4:	e765      	b.n	240100c2 <f_write+0xaa>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
240101f6:	2301      	movs	r3, #1
240101f8:	4698      	mov	r8, r3
240101fa:	7563      	strb	r3, [r4, #21]
}
240101fc:	4640      	mov	r0, r8
240101fe:	b005      	add	sp, #20
24010200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
24010204:	69e1      	ldr	r1, [r4, #28]
24010206:	4620      	mov	r0, r4
24010208:	f7fe f908 	bl	2400e41c <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
2401020c:	2800      	cmp	r0, #0
2401020e:	f47f af49 	bne.w	240100a4 <f_write+0x8c>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
24010212:	7d22      	ldrb	r2, [r4, #20]
24010214:	f042 0240 	orr.w	r2, r2, #64	; 0x40
24010218:	7522      	strb	r2, [r4, #20]
	LEAVE_FF(fs, FR_OK);
2401021a:	e711      	b.n	24010040 <f_write+0x28>
2401021c:	3b01      	subs	r3, #1
2401021e:	eb05 020c 	add.w	r2, r5, ip
			*d++ = *s++;
24010222:	f815 1b01 	ldrb.w	r1, [r5], #1
		} while (--cnt);
24010226:	4295      	cmp	r5, r2
			*d++ = *s++;
24010228:	f803 1f01 	strb.w	r1, [r3, #1]!
		} while (--cnt);
2401022c:	d1f9      	bne.n	24010222 <f_write+0x20a>
2401022e:	e7be      	b.n	240101ae <f_write+0x196>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
24010230:	f04f 0807 	mov.w	r8, #7
24010234:	e704      	b.n	24010040 <f_write+0x28>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
24010236:	4659      	mov	r1, fp
24010238:	4620      	mov	r0, r4
2401023a:	f7fe f8ef 	bl	2400e41c <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
2401023e:	2800      	cmp	r0, #0
24010240:	f47f af30 	bne.w	240100a4 <f_write+0x8c>
24010244:	e7e5      	b.n	24010212 <f_write+0x1fa>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
24010246:	2301      	movs	r3, #1
24010248:	4651      	mov	r1, sl
2401024a:	f899 0001 	ldrb.w	r0, [r9, #1]
2401024e:	9202      	str	r2, [sp, #8]
24010250:	f7fd fa4c 	bl	2400d6ec <disk_read>
				fp->fptr < fp->obj.objsize &&
24010254:	2800      	cmp	r0, #0
24010256:	d1ce      	bne.n	240101f6 <f_write+0x1de>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
24010258:	69a3      	ldr	r3, [r4, #24]
2401025a:	9a02      	ldr	r2, [sp, #8]
2401025c:	e7ba      	b.n	240101d4 <f_write+0x1bc>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
2401025e:	eb05 2042 	add.w	r0, r5, r2, lsl #9
24010262:	1c42      	adds	r2, r0, #1
24010264:	4601      	mov	r1, r0
void mem_cpy (void* dst, const void* src, UINT cnt) {
24010266:	ebaa 0202 	sub.w	r2, sl, r2
2401026a:	2a02      	cmp	r2, #2
2401026c:	d90d      	bls.n	2401028a <f_write+0x272>
2401026e:	4652      	mov	r2, sl
24010270:	f8dd c004 	ldr.w	ip, [sp, #4]
			*d++ = *s++;
24010274:	f851 0b04 	ldr.w	r0, [r1], #4
24010278:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
2401027c:	4562      	cmp	r2, ip
2401027e:	d1f9      	bne.n	24010274 <f_write+0x25c>
					fp->flag &= (BYTE)~FA_DIRTY;
24010280:	7d22      	ldrb	r2, [r4, #20]
24010282:	f002 027f 	and.w	r2, r2, #127	; 0x7f
24010286:	7522      	strb	r2, [r4, #20]
24010288:	e745      	b.n	24010116 <f_write+0xfe>
2401028a:	f104 022b 	add.w	r2, r4, #43	; 0x2b
2401028e:	f500 7c00 	add.w	ip, r0, #512	; 0x200
			*d++ = *s++;
24010292:	f811 0b01 	ldrb.w	r0, [r1], #1
		} while (--cnt);
24010296:	458c      	cmp	ip, r1
			*d++ = *s++;
24010298:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
2401029c:	d1f9      	bne.n	24010292 <f_write+0x27a>
2401029e:	e7ef      	b.n	24010280 <f_write+0x268>

240102a0 <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
240102a0:	b158      	cbz	r0, 240102ba <f_close+0x1a>
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
240102a2:	b570      	push	{r4, r5, r6, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
240102a4:	6803      	ldr	r3, [r0, #0]
240102a6:	4604      	mov	r4, r0
240102a8:	b12b      	cbz	r3, 240102b6 <f_close+0x16>
240102aa:	781a      	ldrb	r2, [r3, #0]
240102ac:	b11a      	cbz	r2, 240102b6 <f_close+0x16>
240102ae:	8881      	ldrh	r1, [r0, #4]
240102b0:	88da      	ldrh	r2, [r3, #6]
240102b2:	4291      	cmp	r1, r2
240102b4:	d003      	beq.n	240102be <f_close+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
240102b6:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
240102b8:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_INVALID_OBJECT;
240102ba:	2009      	movs	r0, #9
}
240102bc:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
240102be:	7858      	ldrb	r0, [r3, #1]
240102c0:	f7fd f9f8 	bl	2400d6b4 <disk_status>
240102c4:	07c1      	lsls	r1, r0, #31
240102c6:	d4f6      	bmi.n	240102b6 <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
240102c8:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
240102ca:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
240102cc:	065a      	lsls	r2, r3, #25
240102ce:	d52e      	bpl.n	2401032e <f_close+0x8e>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
240102d0:	061b      	lsls	r3, r3, #24
240102d2:	d451      	bmi.n	24010378 <f_close+0xd8>
			tm = GET_FATTIME();				/* Modified time */
240102d4:	f7fd f91c 	bl	2400d510 <get_fattime>
				res = move_window(fs, fp->dir_sect);
240102d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
240102da:	4606      	mov	r6, r0
				res = move_window(fs, fp->dir_sect);
240102dc:	4628      	mov	r0, r5
240102de:	f7fd fbbf 	bl	2400da60 <move_window>
				if (res == FR_OK) {
240102e2:	2800      	cmp	r0, #0
240102e4:	d1e8      	bne.n	240102b8 <f_close+0x18>
					dir = fp->dir_ptr;
240102e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
240102e8:	7ada      	ldrb	r2, [r3, #11]
240102ea:	f042 0220 	orr.w	r2, r2, #32
240102ee:	72da      	strb	r2, [r3, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
240102f0:	68a2      	ldr	r2, [r4, #8]
240102f2:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
240102f4:	f3c2 2007 	ubfx	r0, r2, #8, #8
240102f8:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
240102fa:	76d8      	strb	r0, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
240102fc:	7809      	ldrb	r1, [r1, #0]
240102fe:	2903      	cmp	r1, #3
24010300:	d103      	bne.n	2401030a <f_close+0x6a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
24010302:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
24010304:	751a      	strb	r2, [r3, #20]
24010306:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
24010308:	755a      	strb	r2, [r3, #21]
	*ptr++ = (BYTE)val; val >>= 8;
2401030a:	68e1      	ldr	r1, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
2401030c:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
2401030e:	f8c3 6016 	str.w	r6, [r3, #22]
					res = sync_fs(fs);					/* Restore it to the directory */
24010312:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
24010314:	61d9      	str	r1, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
24010316:	825a      	strh	r2, [r3, #18]
					fs->wflag = 1;
24010318:	2301      	movs	r3, #1
2401031a:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
2401031c:	f7fe f820 	bl	2400e360 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
24010320:	7d23      	ldrb	r3, [r4, #20]
24010322:	f023 0340 	bic.w	r3, r3, #64	; 0x40
24010326:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
24010328:	2800      	cmp	r0, #0
2401032a:	d1c5      	bne.n	240102b8 <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2401032c:	6825      	ldr	r5, [r4, #0]
2401032e:	2d00      	cmp	r5, #0
24010330:	d0c1      	beq.n	240102b6 <f_close+0x16>
24010332:	782b      	ldrb	r3, [r5, #0]
24010334:	2b00      	cmp	r3, #0
24010336:	d0be      	beq.n	240102b6 <f_close+0x16>
24010338:	88a2      	ldrh	r2, [r4, #4]
2401033a:	88eb      	ldrh	r3, [r5, #6]
2401033c:	429a      	cmp	r2, r3
2401033e:	d1ba      	bne.n	240102b6 <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
24010340:	7868      	ldrb	r0, [r5, #1]
24010342:	f7fd f9b7 	bl	2400d6b4 <disk_status>
24010346:	f010 0001 	ands.w	r0, r0, #1
2401034a:	d1b4      	bne.n	240102b6 <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
2401034c:	6923      	ldr	r3, [r4, #16]
2401034e:	3b01      	subs	r3, #1
24010350:	2b01      	cmp	r3, #1
24010352:	d81e      	bhi.n	24010392 <f_close+0xf2>
		n = Files[i].ctr;
24010354:	4912      	ldr	r1, [pc, #72]	; (240103a0 <f_close+0x100>)
24010356:	011d      	lsls	r5, r3, #4
24010358:	eb01 1303 	add.w	r3, r1, r3, lsl #4
2401035c:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
2401035e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
24010362:	d01a      	beq.n	2401039a <f_close+0xfa>
		if (n > 0) n--;				/* Decrement read mode open count */
24010364:	b11a      	cbz	r2, 2401036e <f_close+0xce>
24010366:	3a01      	subs	r2, #1
24010368:	b292      	uxth	r2, r2
		Files[i].ctr = n;
2401036a:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
2401036c:	b90a      	cbnz	r2, 24010372 <f_close+0xd2>
2401036e:	2300      	movs	r3, #0
24010370:	514b      	str	r3, [r1, r5]
				fp->obj.fs = 0;			/* Invalidate file object */
24010372:	2300      	movs	r3, #0
24010374:	6023      	str	r3, [r4, #0]
}
24010376:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
24010378:	2301      	movs	r3, #1
2401037a:	6a22      	ldr	r2, [r4, #32]
2401037c:	f104 012c 	add.w	r1, r4, #44	; 0x2c
24010380:	7868      	ldrb	r0, [r5, #1]
24010382:	f7fd f9c3 	bl	2400d70c <disk_write>
24010386:	b930      	cbnz	r0, 24010396 <f_close+0xf6>
				fp->flag &= (BYTE)~FA_DIRTY;
24010388:	7d23      	ldrb	r3, [r4, #20]
2401038a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2401038e:	7523      	strb	r3, [r4, #20]
24010390:	e7a0      	b.n	240102d4 <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
24010392:	2002      	movs	r0, #2
}
24010394:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
24010396:	2001      	movs	r0, #1
}
24010398:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
2401039a:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
2401039c:	e7e7      	b.n	2401036e <f_close+0xce>
2401039e:	bf00      	nop
240103a0:	2001dafc 	.word	0x2001dafc

240103a4 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
240103a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
240103a8:	b150      	cbz	r0, 240103c0 <f_findnext+0x1c>
240103aa:	4605      	mov	r5, r0
240103ac:	460e      	mov	r6, r1
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
240103ae:	4c3b      	ldr	r4, [pc, #236]	; (2401049c <f_findnext+0xf8>)
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
240103b0:	682b      	ldr	r3, [r5, #0]
240103b2:	b12b      	cbz	r3, 240103c0 <f_findnext+0x1c>
240103b4:	781a      	ldrb	r2, [r3, #0]
240103b6:	b11a      	cbz	r2, 240103c0 <f_findnext+0x1c>
240103b8:	88a9      	ldrh	r1, [r5, #4]
240103ba:	88da      	ldrh	r2, [r3, #6]
240103bc:	4291      	cmp	r1, r2
240103be:	d003      	beq.n	240103c8 <f_findnext+0x24>
	FRESULT res = FR_INVALID_OBJECT;
240103c0:	2709      	movs	r7, #9
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
240103c2:	4638      	mov	r0, r7
240103c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
240103c8:	7858      	ldrb	r0, [r3, #1]
240103ca:	f7fd f973 	bl	2400d6b4 <disk_status>
240103ce:	07c3      	lsls	r3, r0, #31
240103d0:	d4f6      	bmi.n	240103c0 <f_findnext+0x1c>
		if (!fno) {
240103d2:	2e00      	cmp	r6, #0
240103d4:	d059      	beq.n	2401048a <f_findnext+0xe6>
			res = dir_read(dp, 0);			/* Read an item */
240103d6:	4628      	mov	r0, r5
240103d8:	f7fd fdce 	bl	2400df78 <dir_read.constprop.0>
			if (res == FR_OK) {				/* A valid entry is found */
240103dc:	f010 08fb 	ands.w	r8, r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
240103e0:	4607      	mov	r7, r0
			if (res == FR_OK) {				/* A valid entry is found */
240103e2:	d1ee      	bne.n	240103c2 <f_findnext+0x1e>
				get_fileinfo(dp, fno);		/* Get the object information */
240103e4:	4631      	mov	r1, r6
240103e6:	4628      	mov	r0, r5
240103e8:	f7fd fa7a 	bl	2400d8e0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
240103ec:	4641      	mov	r1, r8
240103ee:	4628      	mov	r0, r5
240103f0:	f7fe fcb8 	bl	2400ed64 <dir_next>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
240103f4:	f010 07fb 	ands.w	r7, r0, #251	; 0xfb
240103f8:	d14d      	bne.n	24010496 <f_findnext+0xf2>
240103fa:	7db3      	ldrb	r3, [r6, #22]
240103fc:	2b00      	cmp	r3, #0
240103fe:	d0e0      	beq.n	240103c2 <f_findnext+0x1e>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
24010400:	f106 0116 	add.w	r1, r6, #22
	if (!*pat && inf) return 1;		/* (short circuit) */
24010404:	f8d5 c034 	ldr.w	ip, [r5, #52]	; 0x34
24010408:	e00f      	b.n	2401042a <f_findnext+0x86>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2401040a:	3a20      	subs	r2, #32
2401040c:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2401040e:	f811 0b01 	ldrb.w	r0, [r1], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
24010412:	f1a0 0e61 	sub.w	lr, r0, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
24010416:	b283      	uxth	r3, r0
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
24010418:	f1be 0f19 	cmp.w	lr, #25
2401041c:	d817      	bhi.n	2401044e <f_findnext+0xaa>
2401041e:	3b20      	subs	r3, #32
24010420:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
24010422:	4293      	cmp	r3, r2
24010424:	d1c4      	bne.n	240103b0 <f_findnext+0xc>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
24010426:	2b00      	cmp	r3, #0
24010428:	d0cb      	beq.n	240103c2 <f_findnext+0x1e>
2401042a:	4662      	mov	r2, ip
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
2401042c:	f81c 3b01 	ldrb.w	r3, [ip], #1
24010430:	2b3f      	cmp	r3, #63	; 0x3f
24010432:	d012      	beq.n	2401045a <f_findnext+0xb6>
24010434:	2b2a      	cmp	r3, #42	; 0x2a
24010436:	d010      	beq.n	2401045a <f_findnext+0xb6>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
24010438:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2401043c:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2401043e:	2819      	cmp	r0, #25
24010440:	d9e3      	bls.n	2401040a <f_findnext+0x66>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
24010442:	2a7f      	cmp	r2, #127	; 0x7f
24010444:	d9e3      	bls.n	2401040e <f_findnext+0x6a>
24010446:	4423      	add	r3, r4
24010448:	f813 2c80 	ldrb.w	r2, [r3, #-128]
2401044c:	e7df      	b.n	2401040e <f_findnext+0x6a>
2401044e:	2b7f      	cmp	r3, #127	; 0x7f
24010450:	d9e7      	bls.n	24010422 <f_findnext+0x7e>
24010452:	4420      	add	r0, r4
24010454:	f810 3c80 	ldrb.w	r3, [r0, #-128]
24010458:	e7e3      	b.n	24010422 <f_findnext+0x7e>
2401045a:	4694      	mov	ip, r2
				nm = nx = 0;
2401045c:	2300      	movs	r3, #0
2401045e:	f81c eb01 	ldrb.w	lr, [ip], #1
24010462:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
24010464:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
24010468:	4660      	mov	r0, ip
				} while (*pp == '?' || *pp == '*');
2401046a:	f81c eb01 	ldrb.w	lr, [ip], #1
					if (*pp++ == '?') nm++; else nx = 1;
2401046e:	bf0c      	ite	eq
24010470:	3201      	addeq	r2, #1
24010472:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
24010474:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
24010478:	d0f4      	beq.n	24010464 <f_findnext+0xc0>
2401047a:	f1be 0f2a 	cmp.w	lr, #42	; 0x2a
2401047e:	d0f1      	beq.n	24010464 <f_findnext+0xc0>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
24010480:	f7fd f9b8 	bl	2400d7f4 <pattern_matching>
24010484:	2800      	cmp	r0, #0
24010486:	d093      	beq.n	240103b0 <f_findnext+0xc>
24010488:	e79b      	b.n	240103c2 <f_findnext+0x1e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
2401048a:	4631      	mov	r1, r6
2401048c:	4628      	mov	r0, r5
}
2401048e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
24010492:	f7fe b883 	b.w	2400e59c <dir_sdi>
24010496:	4607      	mov	r7, r0
24010498:	e793      	b.n	240103c2 <f_findnext+0x1e>
2401049a:	bf00      	nop
2401049c:	2401a188 	.word	0x2401a188

240104a0 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
240104a0:	b570      	push	{r4, r5, r6, lr}
240104a2:	b082      	sub	sp, #8
240104a4:	4615      	mov	r5, r2
240104a6:	4604      	mov	r4, r0
240104a8:	460e      	mov	r6, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
240104aa:	6343      	str	r3, [r0, #52]	; 0x34
	res = find_volume(&path, &fs, 0);
240104ac:	2200      	movs	r2, #0
240104ae:	a901      	add	r1, sp, #4
240104b0:	4668      	mov	r0, sp
240104b2:	9500      	str	r5, [sp, #0]
240104b4:	f7fd fb12 	bl	2400dadc <find_volume>
	if (res == FR_OK) {
240104b8:	b118      	cbz	r0, 240104c2 <f_findfirst+0x22>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
240104ba:	2300      	movs	r3, #0
240104bc:	6023      	str	r3, [r4, #0]
	res = f_opendir(dp, path);		/* Open the target directory */
	if (res == FR_OK) {
		res = f_findnext(dp, fno);	/* Find the first item */
	}
	return res;
}
240104be:	b002      	add	sp, #8
240104c0:	bd70      	pop	{r4, r5, r6, pc}
		res = follow_path(dp, path);			/* Follow the path to the directory */
240104c2:	e9dd 1500 	ldrd	r1, r5, [sp]
240104c6:	4620      	mov	r0, r4
		obj->fs = fs;
240104c8:	6025      	str	r5, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
240104ca:	f7fe fabf 	bl	2400ea4c <follow_path>
		if (res == FR_OK) {						/* Follow completed */
240104ce:	bb00      	cbnz	r0, 24010512 <f_findfirst+0x72>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
240104d0:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
240104d4:	2b00      	cmp	r3, #0
240104d6:	db0b      	blt.n	240104f0 <f_findfirst+0x50>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
240104d8:	79a3      	ldrb	r3, [r4, #6]
240104da:	06db      	lsls	r3, r3, #27
240104dc:	d51f      	bpl.n	2401051e <f_findfirst+0x7e>
	if (fs->fs_type == FS_FAT32) {
240104de:	7829      	ldrb	r1, [r5, #0]
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
240104e0:	6a22      	ldr	r2, [r4, #32]
	if (fs->fs_type == FS_FAT32) {
240104e2:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
240104e4:	8b53      	ldrh	r3, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
240104e6:	d102      	bne.n	240104ee <f_findfirst+0x4e>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
240104e8:	8a92      	ldrh	r2, [r2, #20]
240104ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
240104ee:	60a3      	str	r3, [r4, #8]
				obj->id = fs->id;
240104f0:	88eb      	ldrh	r3, [r5, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
240104f2:	2100      	movs	r1, #0
240104f4:	4620      	mov	r0, r4
				obj->id = fs->id;
240104f6:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
240104f8:	f7fe f850 	bl	2400e59c <dir_sdi>
				if (res == FR_OK) {
240104fc:	b948      	cbnz	r0, 24010512 <f_findfirst+0x72>
					if (obj->sclust) {
240104fe:	68a3      	ldr	r3, [r4, #8]
24010500:	b97b      	cbnz	r3, 24010522 <f_findfirst+0x82>
						obj->lockid = 0;	/* Root directory need not to be locked */
24010502:	6123      	str	r3, [r4, #16]
		res = f_findnext(dp, fno);	/* Find the first item */
24010504:	4631      	mov	r1, r6
24010506:	4620      	mov	r0, r4
}
24010508:	b002      	add	sp, #8
2401050a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		res = f_findnext(dp, fno);	/* Find the first item */
2401050e:	f7ff bf49 	b.w	240103a4 <f_findnext>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
24010512:	2804      	cmp	r0, #4
24010514:	d1d1      	bne.n	240104ba <f_findfirst+0x1a>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
24010516:	2300      	movs	r3, #0
	res = f_opendir(dp, path);		/* Open the target directory */
24010518:	2005      	movs	r0, #5
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
2401051a:	6023      	str	r3, [r4, #0]
	if (res == FR_OK) {
2401051c:	e7cf      	b.n	240104be <f_findfirst+0x1e>
					res = FR_NO_PATH;
2401051e:	2005      	movs	r0, #5
24010520:	e7cb      	b.n	240104ba <f_findfirst+0x1a>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
24010522:	4601      	mov	r1, r0
24010524:	4620      	mov	r0, r4
24010526:	f7fd f90d 	bl	2400d744 <inc_lock>
2401052a:	6120      	str	r0, [r4, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
2401052c:	2800      	cmp	r0, #0
2401052e:	d1e9      	bne.n	24010504 <f_findfirst+0x64>
24010530:	2012      	movs	r0, #18
24010532:	e7c2      	b.n	240104ba <f_findfirst+0x1a>

24010534 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
24010534:	4b11      	ldr	r3, [pc, #68]	; (2401057c <FATFS_LinkDriver+0x48>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
24010536:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
24010538:	7a5c      	ldrb	r4, [r3, #9]
2401053a:	b9cc      	cbnz	r4, 24010570 <FATFS_LinkDriver+0x3c>
    disk.is_initialized[disk.nbr] = 0;
2401053c:	f004 02ff 	and.w	r2, r4, #255	; 0xff
24010540:	7a5c      	ldrb	r4, [r3, #9]
24010542:	551a      	strb	r2, [r3, r4]
    disk.drv[disk.nbr] = drv;
24010544:	7a5c      	ldrb	r4, [r3, #9]
24010546:	eb03 0484 	add.w	r4, r3, r4, lsl #2
2401054a:	6060      	str	r0, [r4, #4]
    disk.lun[disk.nbr] = lun;
2401054c:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
2401054e:	7a58      	ldrb	r0, [r3, #9]
    disk.lun[disk.nbr] = lun;
24010550:	441c      	add	r4, r3
24010552:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
24010554:	1c44      	adds	r4, r0, #1
    path[0] = DiskNum + '0';
24010556:	3030      	adds	r0, #48	; 0x30
    DiskNum = disk.nbr++;
24010558:	b2e4      	uxtb	r4, r4
2401055a:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
2401055c:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
2401055e:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
24010560:	7008      	strb	r0, [r1, #0]
    path[1] = ':';
24010562:	704c      	strb	r4, [r1, #1]
  return FATFS_LinkDriverEx(drv, path, 0);
}
24010564:	4610      	mov	r0, r2
24010566:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[3] = 0;
2401056a:	70ca      	strb	r2, [r1, #3]
    path[2] = '/';
2401056c:	708b      	strb	r3, [r1, #2]
}
2401056e:	4770      	bx	lr
  uint8_t ret = 1;
24010570:	2201      	movs	r2, #1
}
24010572:	f85d 4b04 	ldr.w	r4, [sp], #4
24010576:	4610      	mov	r0, r2
24010578:	4770      	bx	lr
2401057a:	bf00      	nop
2401057c:	2001dd20 	.word	0x2001dd20

24010580 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
24010580:	287f      	cmp	r0, #127	; 0x7f
24010582:	d913      	bls.n	240105ac <ff_convert+0x2c>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
24010584:	b979      	cbnz	r1, 240105a6 <ff_convert+0x26>
24010586:	4b0c      	ldr	r3, [pc, #48]	; (240105b8 <ff_convert+0x38>)
24010588:	e001      	b.n	2401058e <ff_convert+0xe>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
2401058a:	2980      	cmp	r1, #128	; 0x80
2401058c:	d00d      	beq.n	240105aa <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
2401058e:	f833 2b02 	ldrh.w	r2, [r3], #2
24010592:	fa1f fc81 	uxth.w	ip, r1
			for (c = 0; c < 0x80; c++) {
24010596:	3101      	adds	r1, #1
				if (chr == Tbl[c]) break;
24010598:	4282      	cmp	r2, r0
2401059a:	d1f6      	bne.n	2401058a <ff_convert+0xa>
			}
			c = (c + 0x80) & 0xFF;
2401059c:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
240105a0:	fa1f f08c 	uxth.w	r0, ip
240105a4:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
240105a6:	28ff      	cmp	r0, #255	; 0xff
240105a8:	d901      	bls.n	240105ae <ff_convert+0x2e>
240105aa:	2000      	movs	r0, #0
		}
	}

	return c;
}
240105ac:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
240105ae:	4b02      	ldr	r3, [pc, #8]	; (240105b8 <ff_convert+0x38>)
240105b0:	3880      	subs	r0, #128	; 0x80
240105b2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
240105b6:	4770      	bx	lr
240105b8:	2401a218 	.word	0x2401a218

240105bc <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
240105bc:	4b23      	ldr	r3, [pc, #140]	; (2401064c <ff_wtoupper+0x90>)
240105be:	4a24      	ldr	r2, [pc, #144]	; (24010650 <ff_wtoupper+0x94>)
240105c0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
240105c4:	bf28      	it	cs
240105c6:	4613      	movcs	r3, r2
{
240105c8:	b510      	push	{r4, lr}
240105ca:	3304      	adds	r3, #4
240105cc:	e00a      	b.n	240105e4 <ff_wtoupper+0x28>
	for (;;) {
		bc = *p++;								/* Get block base */
		if (!bc || chr < bc) break;
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
240105ce:	f833 2c02 	ldrh.w	r2, [r3, #-2]
240105d2:	fa5f fc82 	uxtb.w	ip, r2
240105d6:	0a12      	lsrs	r2, r2, #8
		if (chr < bc + nc) {	/* In the block? */
240105d8:	eb0c 0e01 	add.w	lr, ip, r1
240105dc:	4570      	cmp	r0, lr
240105de:	db09      	blt.n	240105f4 <ff_wtoupper+0x38>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
240105e0:	3304      	adds	r3, #4
240105e2:	b182      	cbz	r2, 24010606 <ff_wtoupper+0x4a>
		bc = *p++;								/* Get block base */
240105e4:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		if (!bc || chr < bc) break;
240105e8:	461c      	mov	r4, r3
240105ea:	1e4a      	subs	r2, r1, #1
240105ec:	b292      	uxth	r2, r2
240105ee:	4290      	cmp	r0, r2
240105f0:	d8ed      	bhi.n	240105ce <ff_wtoupper+0x12>
	}

	return chr;
}
240105f2:	bd10      	pop	{r4, pc}
			switch (cmd) {
240105f4:	2a08      	cmp	r2, #8
240105f6:	d8fc      	bhi.n	240105f2 <ff_wtoupper+0x36>
240105f8:	e8df f002 	tbb	[pc, r2]
240105fc:	1916100c 	.word	0x1916100c
24010600:	25221f1c 	.word	0x25221f1c
24010604:	08          	.byte	0x08
24010605:	00          	.byte	0x00
		if (!cmd) p += nc;
24010606:	eb04 034c 	add.w	r3, r4, ip, lsl #1
2401060a:	e7de      	b.n	240105ca <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
2401060c:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
24010610:	b280      	uxth	r0, r0
}
24010612:	bd10      	pop	{r4, pc}
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
24010614:	1a41      	subs	r1, r0, r1
24010616:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
}
2401061a:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
2401061c:	1a43      	subs	r3, r0, r1
2401061e:	f003 0301 	and.w	r3, r3, #1
24010622:	1ac3      	subs	r3, r0, r3
24010624:	b298      	uxth	r0, r3
}
24010626:	bd10      	pop	{r4, pc}
			case 2: chr -= 16; break;				/* Shift -16 */
24010628:	3810      	subs	r0, #16
2401062a:	b280      	uxth	r0, r0
}
2401062c:	bd10      	pop	{r4, pc}
			case 3:	chr -= 32; break;				/* Shift -32 */
2401062e:	3820      	subs	r0, #32
24010630:	b280      	uxth	r0, r0
}
24010632:	bd10      	pop	{r4, pc}
			case 4:	chr -= 48; break;				/* Shift -48 */
24010634:	3830      	subs	r0, #48	; 0x30
24010636:	b280      	uxth	r0, r0
}
24010638:	bd10      	pop	{r4, pc}
			case 5:	chr -= 26; break;				/* Shift -26 */
2401063a:	381a      	subs	r0, #26
2401063c:	b280      	uxth	r0, r0
}
2401063e:	bd10      	pop	{r4, pc}
			case 6:	chr += 8; break;				/* Shift +8 */
24010640:	3008      	adds	r0, #8
24010642:	b280      	uxth	r0, r0
}
24010644:	bd10      	pop	{r4, pc}
			case 7: chr -= 80; break;				/* Shift -80 */
24010646:	3850      	subs	r0, #80	; 0x50
24010648:	b280      	uxth	r0, r0
}
2401064a:	bd10      	pop	{r4, pc}
2401064c:	2401a318 	.word	0x2401a318
24010650:	2401a50c 	.word	0x2401a50c

24010654 <tEnvelopeFollower_init>:
//===========================================================================
/* Envelope Follower */
//===========================================================================

void    tEnvelopeFollower_init(tEnvelopeFollower* const ef, Lfloat attackThreshold, Lfloat decayCoeff, LEAF* const leaf)
{
24010654:	b538      	push	{r3, r4, r5, lr}
24010656:	ed2d 8b02 	vpush	{d8}
    tEnvelopeFollower_initToPool(ef, attackThreshold, decayCoeff, &leaf->mempool);
}

void    tEnvelopeFollower_initToPool    (tEnvelopeFollower* const ef, Lfloat attackThreshold, Lfloat decayCoeff, tMempool* const mp)
{
    _tMempool* m = *mp;
2401065a:	698d      	ldr	r5, [r1, #24]
{
2401065c:	eef0 8a40 	vmov.f32	s17, s0
24010660:	eeb0 8a60 	vmov.f32	s16, s1
24010664:	4604      	mov	r4, r0
    _tEnvelopeFollower* e = *ef = (_tEnvelopeFollower*) mpool_alloc(sizeof(_tEnvelopeFollower), m);
24010666:	4629      	mov	r1, r5
24010668:	2010      	movs	r0, #16
2401066a:	f003 fc55 	bl	24013f18 <mpool_alloc>
    e->mempool = m;
    
    e->y = 0.0f;
2401066e:	2300      	movs	r3, #0
    _tEnvelopeFollower* e = *ef = (_tEnvelopeFollower*) mpool_alloc(sizeof(_tEnvelopeFollower), m);
24010670:	6020      	str	r0, [r4, #0]
    e->mempool = m;
24010672:	6005      	str	r5, [r0, #0]
    e->y = 0.0f;
24010674:	6043      	str	r3, [r0, #4]
    e->a_thresh = attackThreshold;
24010676:	edc0 8a02 	vstr	s17, [r0, #8]
    e->d_coeff = decayCoeff;
2401067a:	ed80 8a03 	vstr	s16, [r0, #12]
}
2401067e:	ecbd 8b02 	vpop	{d8}
24010682:	bd38      	pop	{r3, r4, r5, pc}

24010684 <tEnvelopeFollower_tick>:
    mpool_free((char*)e, e->mempool);
}

Lfloat   tEnvelopeFollower_tick(tEnvelopeFollower* const ef, Lfloat x)
{
    _tEnvelopeFollower* e = *ef;
24010684:	6803      	ldr	r3, [r0, #0]
    
    if (x < 0.0f ) x = -x;  /* Absolute value. */
24010686:	eeb0 0ac0 	vabs.f32	s0, s0
    
    if (isnan(x)) return 0.0f;
    if ((x >= e->y) && (x > e->a_thresh)) e->y = x; /* If we hit a peak, ride the peak to the top. */
2401068a:	edd3 7a01 	vldr	s15, [r3, #4]
2401068e:	eef4 7ac0 	vcmpe.f32	s15, s0
24010692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010696:	d810      	bhi.n	240106ba <tEnvelopeFollower_tick+0x36>
24010698:	ed93 7a02 	vldr	s14, [r3, #8]
2401069c:	eeb4 7ac0 	vcmpe.f32	s14, s0
240106a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240106a4:	d509      	bpl.n	240106ba <tEnvelopeFollower_tick+0x36>
    //ef->y = envelope_pow[(uint16_t)(ef->y * (Lfloat)UINT16_MAX)] * ef->d_coeff; //not quite the right behavior - too much loss of precision?
    //ef->y = powf(ef->y, 1.000009f) * ef->d_coeff;  // too expensive
    
#ifdef NO_DENORMAL_CHECK
#else
    if( e->y < VSF)   e->y = 0.0f;
240106a6:	eddf 7a0e 	vldr	s15, [pc, #56]	; 240106e0 <tEnvelopeFollower_tick+0x5c>
240106aa:	eeb4 0ae7 	vcmpe.f32	s0, s15
240106ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240106b2:	d40d      	bmi.n	240106d0 <tEnvelopeFollower_tick+0x4c>
240106b4:	ed83 0a01 	vstr	s0, [r3, #4]
240106b8:	4770      	bx	lr
    else e->y = e->y * e->d_coeff; /* Else, exponential decay of output. */
240106ba:	ed93 0a03 	vldr	s0, [r3, #12]
240106be:	ee27 0a80 	vmul.f32	s0, s15, s0
    if( e->y < VSF)   e->y = 0.0f;
240106c2:	eddf 7a07 	vldr	s15, [pc, #28]	; 240106e0 <tEnvelopeFollower_tick+0x5c>
240106c6:	eeb4 0ae7 	vcmpe.f32	s0, s15
240106ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240106ce:	d5f1      	bpl.n	240106b4 <tEnvelopeFollower_tick+0x30>
240106d0:	eddf 7a04 	vldr	s15, [pc, #16]	; 240106e4 <tEnvelopeFollower_tick+0x60>
240106d4:	eeb0 0a67 	vmov.f32	s0, s15
240106d8:	edc3 7a01 	vstr	s15, [r3, #4]
#endif
    return e->y;
}
240106dc:	4770      	bx	lr
240106de:	bf00      	nop
240106e0:	006ce3ee 	.word	0x006ce3ee
240106e4:	00000000 	.word	0x00000000

240106e8 <tPowerFollower_initToPool>:
{
    tPowerFollower_initToPool(pf, factor, &leaf->mempool);
}

void    tPowerFollower_initToPool   (tPowerFollower* const pf, Lfloat factor, tMempool* const mp)
{
240106e8:	b538      	push	{r3, r4, r5, lr}
240106ea:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
240106ee:	680d      	ldr	r5, [r1, #0]
{
240106f0:	4604      	mov	r4, r0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
240106f2:	2010      	movs	r0, #16
{
240106f4:	eeb0 8a40 	vmov.f32	s16, s0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
240106f8:	4629      	mov	r1, r5
240106fa:	f003 fc0d 	bl	24013f18 <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
240106fe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    p->curr=0.0f;
24010702:	2300      	movs	r3, #0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
24010704:	6020      	str	r0, [r4, #0]
    p->mempool = m;
24010706:	6005      	str	r5, [r0, #0]
    p->oneminusfactor=1.0f-factor;
24010708:	ee77 7ac8 	vsub.f32	s15, s15, s16
    p->curr=0.0f;
2401070c:	60c3      	str	r3, [r0, #12]
    p->factor=factor;
2401070e:	ed80 8a01 	vstr	s16, [r0, #4]
    p->oneminusfactor=1.0f-factor;
24010712:	edc0 7a02 	vstr	s15, [r0, #8]
}
24010716:	ecbd 8b02 	vpop	{d8}
2401071a:	bd38      	pop	{r3, r4, r5, pc}

2401071c <tPowerFollower_free>:

void    tPowerFollower_free (tPowerFollower* const pf)
{
    _tPowerFollower* p = *pf;
2401071c:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)p, p->mempool);
2401071e:	6801      	ldr	r1, [r0, #0]
24010720:	f003 bcbc 	b.w	2401409c <mpool_free>

24010724 <tPowerFollower_setFactor>:
}

void tPowerFollower_setFactor(tPowerFollower* const pf, Lfloat factor)
{
    _tPowerFollower* p = *pf;
24010724:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24010728:	ed9f 7a06 	vldr	s14, [pc, #24]	; 24010744 <tPowerFollower_setFactor+0x20>
2401072c:	6803      	ldr	r3, [r0, #0]
    
    if (factor<0.0f) factor=0.0f;
    if (factor>1.0f) factor=1.0f;
2401072e:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
24010732:	fe80 0a67 	vminnm.f32	s0, s0, s15
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
24010736:	ee77 7ac0 	vsub.f32	s15, s15, s0
    p->factor=factor;
2401073a:	ed83 0a01 	vstr	s0, [r3, #4]
    p->oneminusfactor=1.0f-factor;
2401073e:	edc3 7a02 	vstr	s15, [r3, #8]
}
24010742:	4770      	bx	lr
24010744:	00000000 	.word	0x00000000

24010748 <tPowerFollower_tick>:

Lfloat tPowerFollower_tick(tPowerFollower* const pf, Lfloat input)
{
    _tPowerFollower* p = *pf;
24010748:	6803      	ldr	r3, [r0, #0]
    p->curr = p->factor*input*input+p->oneminusfactor*p->curr;
2401074a:	ee60 7a00 	vmul.f32	s15, s0, s0
2401074e:	edd3 6a03 	vldr	s13, [r3, #12]
24010752:	ed93 0a02 	vldr	s0, [r3, #8]
24010756:	ed93 7a01 	vldr	s14, [r3, #4]
2401075a:	ee20 0a26 	vmul.f32	s0, s0, s13
2401075e:	eea7 0a27 	vfma.f32	s0, s14, s15
24010762:	ed83 0a03 	vstr	s0, [r3, #12]
    return p->curr;
}
24010766:	4770      	bx	lr

24010768 <tLinearDelay_initToPool>:
{
    tLinearDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tLinearDelay_initToPool  (tLinearDelay* const dl, Lfloat delay, uint32_t maxDelay, tMempool* const mp)
{
24010768:	b570      	push	{r4, r5, r6, lr}
2401076a:	460d      	mov	r5, r1
2401076c:	4606      	mov	r6, r0
    _tMempool* m = *mp;
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
2401076e:	202c      	movs	r0, #44	; 0x2c
{
24010770:	ed2d 8b02 	vpush	{d8}
24010774:	b082      	sub	sp, #8
    _tMempool* m = *mp;
24010776:	6811      	ldr	r1, [r2, #0]
{
24010778:	eeb0 8a40 	vmov.f32	s16, s0
    d->mempool = m;

    d->maxDelay = maxDelay;

    if (delay > maxDelay)   d->delay = maxDelay;
2401077c:	eddf 8a30 	vldr	s17, [pc, #192]	; 24010840 <tLinearDelay_initToPool+0xd8>
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
24010780:	9101      	str	r1, [sp, #4]
24010782:	f003 fbc9 	bl	24013f18 <mpool_alloc>
    if (delay > maxDelay)   d->delay = maxDelay;
24010786:	ee07 5a90 	vmov	s15, r5
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
2401078a:	4604      	mov	r4, r0
    else if (delay < 0.0f)  d->delay = 0.0f;
    else                    d->delay = delay;

    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
2401078c:	9901      	ldr	r1, [sp, #4]
    if (delay > maxDelay)   d->delay = maxDelay;
2401078e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
24010792:	6030      	str	r0, [r6, #0]
    if (delay > maxDelay)   d->delay = maxDelay;
24010794:	fec8 7a28 	vmaxnm.f32	s15, s16, s17
    d->mempool = m;
24010798:	6001      	str	r1, [r0, #0]
    d->maxDelay = maxDelay;
2401079a:	61c5      	str	r5, [r0, #28]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
2401079c:	00a8      	lsls	r0, r5, #2
    if (delay > maxDelay)   d->delay = maxDelay;
2401079e:	fec7 7ac7 	vminnm.f32	s15, s15, s14
240107a2:	edc4 7a08 	vstr	s15, [r4, #32]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
240107a6:	f003 fbb7 	bl	24013f18 <mpool_alloc>

    d->gain = 1.0f;
240107aa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000

    d->lastIn = 0.0f;
    d->lastOut = 0.0f;
    
    d->inPoint = 0;
240107ae:	2300      	movs	r3, #0
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
240107b0:	60a0      	str	r0, [r4, #8]
    d->gain = 1.0f;
240107b2:	6062      	str	r2, [r4, #4]

void     tLinearDelay_setDelay (tLinearDelay* const dl, Lfloat delay)
{
    _tLinearDelay* d = *dl;

    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
240107b4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    d->lastIn = 0.0f;
240107b8:	edc4 8a04 	vstr	s17, [r4, #16]
    d->lastOut = 0.0f;
240107bc:	edc4 8a03 	vstr	s17, [r4, #12]
    d->inPoint = 0;
240107c0:	6163      	str	r3, [r4, #20]
    d->outPoint = 0;
240107c2:	61a3      	str	r3, [r4, #24]
    _tLinearDelay* d = *dl;
240107c4:	6835      	ldr	r5, [r6, #0]
    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
240107c6:	edd4 0a08 	vldr	s1, [r4, #32]
240107ca:	edd5 7a07 	vldr	s15, [r5, #28]
240107ce:	eeb8 1a67 	vcvt.f32.u32	s2, s15
240107d2:	f023 f881 	bl	240338d8 <__LEAF_clip_veneer>

    Lfloat outPointer = d->inPoint - d->delay;
240107d6:	edd5 7a05 	vldr	s15, [r5, #20]

    while ( outPointer < 0 )
        outPointer += d->maxDelay; // modulo maximum length
240107da:	69ea      	ldr	r2, [r5, #28]
    Lfloat outPointer = d->inPoint - d->delay;
240107dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
240107e0:	ed85 0a08 	vstr	s0, [r5, #32]
    Lfloat outPointer = d->inPoint - d->delay;
240107e4:	ee77 7ac0 	vsub.f32	s15, s15, s0
    while ( outPointer < 0 )
240107e8:	eef4 7ae8 	vcmpe.f32	s15, s17
240107ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240107f0:	d50a      	bpl.n	24010808 <tLinearDelay_initToPool+0xa0>
        outPointer += d->maxDelay; // modulo maximum length
240107f2:	ee07 2a10 	vmov	s14, r2
240107f6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
240107fa:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
240107fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24010802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010806:	d4f8      	bmi.n	240107fa <tLinearDelay_initToPool+0x92>

    d->outPoint = (uint32_t) outPointer;   // integer part
24010808:	eebc 7ae7 	vcvt.u32.f32	s14, s15
2401080c:	ee17 3a10 	vmov	r3, s14

    d->alpha = outPointer - d->outPoint; // fractional part
    d->omAlpha = 1.0f - d->alpha;
24010810:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
24010814:	ee06 3a90 	vmov	s13, r3

    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
24010818:	4293      	cmp	r3, r2
2401081a:	bf08      	it	eq
2401081c:	2300      	moveq	r3, #0
    d->omAlpha = 1.0f - d->alpha;
2401081e:	ee37 7a67 	vsub.f32	s14, s14, s15
    d->alpha = outPointer - d->outPoint; // fractional part
24010822:	eef8 6a66 	vcvt.f32.u32	s13, s13
24010826:	61ab      	str	r3, [r5, #24]
24010828:	ee77 7ae6 	vsub.f32	s15, s15, s13
    d->omAlpha = 1.0f - d->alpha;
2401082c:	ee37 7a26 	vadd.f32	s14, s14, s13
    d->alpha = outPointer - d->outPoint; // fractional part
24010830:	edc5 7a09 	vstr	s15, [r5, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
24010834:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
}
24010838:	b002      	add	sp, #8
2401083a:	ecbd 8b02 	vpop	{d8}
2401083e:	bd70      	pop	{r4, r5, r6, pc}
24010840:	00000000 	.word	0x00000000

24010844 <tLinearDelay_free>:
{
24010844:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
24010846:	6804      	ldr	r4, [r0, #0]
    mpool_free((char*)d->buff, d->mempool);
24010848:	6821      	ldr	r1, [r4, #0]
2401084a:	68a0      	ldr	r0, [r4, #8]
2401084c:	f003 fc26 	bl	2401409c <mpool_free>
    mpool_free((char*)d, d->mempool);
24010850:	6821      	ldr	r1, [r4, #0]
24010852:	4620      	mov	r0, r4
}
24010854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)d, d->mempool);
24010858:	f003 bc20 	b.w	2401409c <mpool_free>

2401085c <tLinearDelay_clear>:
    _tLinearDelay* d = *dl;
2401085c:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
2401085e:	69cb      	ldr	r3, [r1, #28]
24010860:	b14b      	cbz	r3, 24010876 <tLinearDelay_clear+0x1a>
24010862:	2300      	movs	r3, #0
        d->buff[i] = 0;
24010864:	2000      	movs	r0, #0
24010866:	688a      	ldr	r2, [r1, #8]
24010868:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for (unsigned i = 0; i < d->maxDelay; i++)
2401086c:	3301      	adds	r3, #1
        d->buff[i] = 0;
2401086e:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
24010870:	69ca      	ldr	r2, [r1, #28]
24010872:	429a      	cmp	r2, r3
24010874:	d8f7      	bhi.n	24010866 <tLinearDelay_clear+0xa>
}
24010876:	4770      	bx	lr

24010878 <tLinearDelay_tick>:
{
24010878:	b410      	push	{r4}
    _tLinearDelay* d = *dl;
2401087a:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
2401087c:	edd3 7a01 	vldr	s15, [r3, #4]
24010880:	6959      	ldr	r1, [r3, #20]
24010882:	689a      	ldr	r2, [r3, #8]
24010884:	ee27 0a80 	vmul.f32	s0, s15, s0
24010888:	eb02 0281 	add.w	r2, r2, r1, lsl #2
2401088c:	ed82 0a00 	vstr	s0, [r2]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
24010890:	69dc      	ldr	r4, [r3, #28]
    d->lastOut = d->buff[idx] * d->omAlpha;
24010892:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
    uint32_t idx = (uint32_t) d->outPoint;
24010896:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
2401089a:	3201      	adds	r2, #1
    if ((idx + 1) < d->maxDelay)
2401089c:	1c48      	adds	r0, r1, #1
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
2401089e:	42a2      	cmp	r2, r4
240108a0:	bf08      	it	eq
240108a2:	2200      	moveq	r2, #0
    if ((idx + 1) < d->maxDelay)
240108a4:	4284      	cmp	r4, r0
240108a6:	615a      	str	r2, [r3, #20]
    d->lastOut = d->buff[idx] * d->omAlpha;
240108a8:	689a      	ldr	r2, [r3, #8]
240108aa:	eb02 0181 	add.w	r1, r2, r1, lsl #2
240108ae:	ed91 0a00 	vldr	s0, [r1]
240108b2:	ee20 0a27 	vmul.f32	s0, s0, s15
240108b6:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((idx + 1) < d->maxDelay)
240108ba:	d90b      	bls.n	240108d4 <tLinearDelay_tick+0x5c>
        d->lastOut += d->buff[idx+1] * d->alpha;
240108bc:	ed91 7a01 	vldr	s14, [r1, #4]
240108c0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
240108c4:	6198      	str	r0, [r3, #24]
        d->lastOut += d->buff[idx+1] * d->alpha;
240108c6:	eea7 0a27 	vfma.f32	s0, s14, s15
240108ca:	ed83 0a03 	vstr	s0, [r3, #12]
}
240108ce:	f85d 4b04 	ldr.w	r4, [sp], #4
240108d2:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
240108d4:	ed92 7a00 	vldr	s14, [r2]
240108d8:	2000      	movs	r0, #0
240108da:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
240108de:	6198      	str	r0, [r3, #24]
        d->lastOut += d->buff[0] * d->alpha;
240108e0:	eea7 0a27 	vfma.f32	s0, s14, s15
        d->lastOut += d->buff[idx+1] * d->alpha;
240108e4:	ed83 0a03 	vstr	s0, [r3, #12]
}
240108e8:	f85d 4b04 	ldr.w	r4, [sp], #4
240108ec:	4770      	bx	lr
240108ee:	bf00      	nop

240108f0 <tLinearDelay_tickIn>:
    _tLinearDelay* d = *dl;
240108f0:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
240108f2:	edd3 7a01 	vldr	s15, [r3, #4]
240108f6:	6959      	ldr	r1, [r3, #20]
240108f8:	689a      	ldr	r2, [r3, #8]
240108fa:	ee27 0a80 	vmul.f32	s0, s15, s0
240108fe:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24010902:	ed82 0a00 	vstr	s0, [r2]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
24010906:	695a      	ldr	r2, [r3, #20]
24010908:	69d9      	ldr	r1, [r3, #28]
2401090a:	3201      	adds	r2, #1
2401090c:	428a      	cmp	r2, r1
2401090e:	bf08      	it	eq
24010910:	2200      	moveq	r2, #0
24010912:	615a      	str	r2, [r3, #20]
}
24010914:	4770      	bx	lr
24010916:	bf00      	nop

24010918 <tLinearDelay_tickOut>:
{
24010918:	b410      	push	{r4}
    _tLinearDelay* d = *dl;
2401091a:	6803      	ldr	r3, [r0, #0]
    uint32_t idx = (uint32_t) d->outPoint;
2401091c:	699a      	ldr	r2, [r3, #24]
    d->lastOut = d->buff[idx] * d->omAlpha;
2401091e:	6899      	ldr	r1, [r3, #8]
24010920:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
24010924:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    if ((idx + 1) < d->maxDelay)
24010928:	69dc      	ldr	r4, [r3, #28]
2401092a:	3201      	adds	r2, #1
    d->lastOut = d->buff[idx] * d->omAlpha;
2401092c:	ed90 0a00 	vldr	s0, [r0]
    if ((idx + 1) < d->maxDelay)
24010930:	42a2      	cmp	r2, r4
    d->lastOut = d->buff[idx] * d->omAlpha;
24010932:	ee20 0a27 	vmul.f32	s0, s0, s15
24010936:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((idx + 1) < d->maxDelay)
2401093a:	d20b      	bcs.n	24010954 <tLinearDelay_tickOut+0x3c>
        d->lastOut += d->buff[idx+1] * d->alpha;
2401093c:	ed90 7a01 	vldr	s14, [r0, #4]
24010940:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
24010944:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[idx+1] * d->alpha;
24010946:	eea7 0a27 	vfma.f32	s0, s14, s15
2401094a:	ed83 0a03 	vstr	s0, [r3, #12]
}
2401094e:	f85d 4b04 	ldr.w	r4, [sp], #4
24010952:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
24010954:	ed91 7a00 	vldr	s14, [r1]
24010958:	2200      	movs	r2, #0
2401095a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
2401095e:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[0] * d->alpha;
24010960:	eea7 0a27 	vfma.f32	s0, s14, s15
        d->lastOut += d->buff[idx+1] * d->alpha;
24010964:	ed83 0a03 	vstr	s0, [r3, #12]
}
24010968:	f85d 4b04 	ldr.w	r4, [sp], #4
2401096c:	4770      	bx	lr
2401096e:	bf00      	nop

24010970 <tLinearDelay_setDelay>:
{
24010970:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
24010972:	6804      	ldr	r4, [r0, #0]
{
24010974:	eef0 0a40 	vmov.f32	s1, s0
    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
24010978:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
2401097c:	edd4 7a07 	vldr	s15, [r4, #28]
24010980:	eeb8 1a67 	vcvt.f32.u32	s2, s15
24010984:	f022 ffa8 	bl	240338d8 <__LEAF_clip_veneer>
    Lfloat outPointer = d->inPoint - d->delay;
24010988:	edd4 7a05 	vldr	s15, [r4, #20]
        outPointer += d->maxDelay; // modulo maximum length
2401098c:	69e2      	ldr	r2, [r4, #28]
    Lfloat outPointer = d->inPoint - d->delay;
2401098e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
24010992:	ed84 0a08 	vstr	s0, [r4, #32]
    Lfloat outPointer = d->inPoint - d->delay;
24010996:	ee77 7ac0 	vsub.f32	s15, s15, s0
    while ( outPointer < 0 )
2401099a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
2401099e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240109a2:	d50a      	bpl.n	240109ba <tLinearDelay_setDelay+0x4a>
        outPointer += d->maxDelay; // modulo maximum length
240109a4:	ee07 2a10 	vmov	s14, r2
240109a8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
240109ac:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
240109b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
240109b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240109b8:	d4f8      	bmi.n	240109ac <tLinearDelay_setDelay+0x3c>
    d->outPoint = (uint32_t) outPointer;   // integer part
240109ba:	eebc 7ae7 	vcvt.u32.f32	s14, s15
240109be:	ee17 3a10 	vmov	r3, s14
    d->omAlpha = 1.0f - d->alpha;
240109c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
240109c6:	ee06 3a90 	vmov	s13, r3
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
240109ca:	4293      	cmp	r3, r2
240109cc:	bf08      	it	eq
240109ce:	2300      	moveq	r3, #0
    d->omAlpha = 1.0f - d->alpha;
240109d0:	ee37 7a67 	vsub.f32	s14, s14, s15
    d->alpha = outPointer - d->outPoint; // fractional part
240109d4:	eef8 6a66 	vcvt.f32.u32	s13, s13
240109d8:	61a3      	str	r3, [r4, #24]
240109da:	ee77 7ae6 	vsub.f32	s15, s15, s13
    d->omAlpha = 1.0f - d->alpha;
240109de:	ee37 7a26 	vadd.f32	s14, s14, s13
    d->alpha = outPointer - d->outPoint; // fractional part
240109e2:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
240109e6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
}
240109ea:	bd10      	pop	{r4, pc}

240109ec <tLinearDelay_tapOut>:

Lfloat tLinearDelay_tapOut (tLinearDelay* const dl, uint32_t tapDelay)
{
    _tLinearDelay* d = *dl;
240109ec:	6802      	ldr	r2, [r0, #0]

    int32_t tap = d->inPoint - tapDelay - 1;
240109ee:	6953      	ldr	r3, [r2, #20]
240109f0:	1a59      	subs	r1, r3, r1
    // Check for wraparound.
    while ( tap < 0 )   tap += d->maxDelay;
240109f2:	3901      	subs	r1, #1
240109f4:	d502      	bpl.n	240109fc <tLinearDelay_tapOut+0x10>
240109f6:	69d3      	ldr	r3, [r2, #28]
240109f8:	18c9      	adds	r1, r1, r3
240109fa:	d4fd      	bmi.n	240109f8 <tLinearDelay_tapOut+0xc>

    return d->buff[tap];
240109fc:	6893      	ldr	r3, [r2, #8]
240109fe:	eb03 0381 	add.w	r3, r3, r1, lsl #2
}
24010a02:	ed93 0a00 	vldr	s0, [r3]
24010a06:	4770      	bx	lr

24010a08 <tLinearDelay_addTo>:
    d->buff[tap] = value;
}

Lfloat tLinearDelay_addTo (tLinearDelay* const dl, Lfloat value, uint32_t tapDelay)
{
    _tLinearDelay* d = *dl;
24010a08:	6802      	ldr	r2, [r0, #0]

    int32_t tap = d->inPoint - tapDelay - 1;
24010a0a:	6953      	ldr	r3, [r2, #20]
24010a0c:	1a59      	subs	r1, r3, r1

    // Check for wraparound.
    while ( tap < 0 )   tap += d->maxDelay;
24010a0e:	3901      	subs	r1, #1
24010a10:	d502      	bpl.n	24010a18 <tLinearDelay_addTo+0x10>
24010a12:	69d3      	ldr	r3, [r2, #28]
24010a14:	18c9      	adds	r1, r1, r3
24010a16:	d4fd      	bmi.n	24010a14 <tLinearDelay_addTo+0xc>
    
    return (d->buff[tap] += value);
24010a18:	6893      	ldr	r3, [r2, #8]
24010a1a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
24010a1e:	edd3 7a00 	vldr	s15, [r3]
24010a22:	ee30 0a27 	vadd.f32	s0, s0, s15
24010a26:	ed83 0a00 	vstr	s0, [r3]
}
24010a2a:	4770      	bx	lr

24010a2c <tTapeDelay_initToPool>:
{
    tTapeDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tTapeDelay_initToPool (tTapeDelay* const dl, Lfloat delay, uint32_t maxDelay, tMempool* const mp)
{
24010a2c:	b570      	push	{r4, r5, r6, lr}
24010a2e:	460e      	mov	r6, r1
24010a30:	b082      	sub	sp, #8
    _tMempool* m = *mp;
24010a32:	6811      	ldr	r1, [r2, #0]
{
24010a34:	4605      	mov	r5, r0
    _tTapeDelay* d = *dl = (_tTapeDelay*) mpool_alloc(sizeof(_tTapeDelay), m);
24010a36:	202c      	movs	r0, #44	; 0x2c
{
24010a38:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tTapeDelay* d = *dl = (_tTapeDelay*) mpool_alloc(sizeof(_tTapeDelay), m);
24010a3c:	9100      	str	r1, [sp, #0]
24010a3e:	f003 fa6b 	bl	24013f18 <mpool_alloc>
    d->mempool = m;
24010a42:	9900      	ldr	r1, [sp, #0]
    _tTapeDelay* d = *dl = (_tTapeDelay*) mpool_alloc(sizeof(_tTapeDelay), m);
24010a44:	4604      	mov	r4, r0
24010a46:	6028      	str	r0, [r5, #0]
    d->mempool = m;
24010a48:	6001      	str	r1, [r0, #0]

    d->maxDelay = maxDelay;
24010a4a:	6186      	str	r6, [r0, #24]

    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
24010a4c:	00b0      	lsls	r0, r6, #2
24010a4e:	f003 fa63 	bl	24013f18 <mpool_alloc>

    d->gain = 1.0f;
24010a52:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0

    d->lastIn = 0.0f;
24010a56:	2300      	movs	r3, #0
    d->lastOut = 0.0f;

    d->idx = 0.0f;
    d->inc = 1.0f;
    d->inPoint = 0;
24010a58:	2200      	movs	r2, #0
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
24010a5a:	60a0      	str	r0, [r4, #8]
    d->lastIn = 0.0f;
24010a5c:	6123      	str	r3, [r4, #16]
    d->lastOut = 0.0f;
24010a5e:	60e3      	str	r3, [r4, #12]
    d->idx = 0.0f;
24010a60:	6263      	str	r3, [r4, #36]	; 0x24
    d->inPoint = 0;
24010a62:	6162      	str	r2, [r4, #20]
    d->gain = 1.0f;
24010a64:	ed84 0a01 	vstr	s0, [r4, #4]
    d->inc = 1.0f;
24010a68:	ed84 0a08 	vstr	s0, [r4, #32]
    d->inc = rate;
}

void     tTapeDelay_setDelay (tTapeDelay* const dl, Lfloat delay)
{
    _tTapeDelay* d = *dl;
24010a6c:	682c      	ldr	r4, [r5, #0]
    d->delay = LEAF_clip(1.f, delay,  d->maxDelay);
24010a6e:	eddd 0a01 	vldr	s1, [sp, #4]
24010a72:	edd4 7a06 	vldr	s15, [r4, #24]
24010a76:	eeb8 1a67 	vcvt.f32.u32	s2, s15
24010a7a:	f022 ff2d 	bl	240338d8 <__LEAF_clip_veneer>
24010a7e:	ed84 0a07 	vstr	s0, [r4, #28]
}
24010a82:	b002      	add	sp, #8
24010a84:	bd70      	pop	{r4, r5, r6, pc}
24010a86:	bf00      	nop

24010a88 <tTapeDelay_tick>:
{
24010a88:	b510      	push	{r4, lr}
    _tTapeDelay* d = *dl;
24010a8a:	6804      	ldr	r4, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
24010a8c:	edd4 7a01 	vldr	s15, [r4, #4]
24010a90:	6962      	ldr	r2, [r4, #20]
24010a92:	68a3      	ldr	r3, [r4, #8]
24010a94:	ee27 0a80 	vmul.f32	s0, s15, s0
24010a98:	eb03 0382 	add.w	r3, r3, r2, lsl #2
24010a9c:	ed83 0a00 	vstr	s0, [r3]
    int idx =  (int) d->idx;
24010aa0:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
24010aa4:	68a1      	ldr	r1, [r4, #8]
    int idx =  (int) d->idx;
24010aa6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
24010aaa:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
    int idx =  (int) d->idx;
24010aae:	ee17 2a10 	vmov	r2, s14
    Lfloat alpha = d->idx - idx;
24010ab2:	eeb8 2ac7 	vcvt.f32.s32	s4, s14
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
24010ab6:	3001      	adds	r0, #1
                                              d->buff[(idx + 2) % d->maxDelay],
24010ab8:	f102 0e02 	add.w	lr, r2, #2
                                              d->buff[(idx + 1) % d->maxDelay],
24010abc:	f102 0c01 	add.w	ip, r2, #1
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
24010ac0:	4298      	cmp	r0, r3
24010ac2:	bf08      	it	eq
24010ac4:	2000      	moveq	r0, #0
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
24010ac6:	ee37 2ac2 	vsub.f32	s4, s15, s4
24010aca:	6160      	str	r0, [r4, #20]
24010acc:	1e58      	subs	r0, r3, #1
24010ace:	4410      	add	r0, r2
24010ad0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
24010ad4:	edd2 0a00 	vldr	s1, [r2]
                                              d->buff[(idx + 2) % d->maxDelay],
24010ad8:	fbbe f2f3 	udiv	r2, lr, r3
24010adc:	fb03 ee12 	mls	lr, r3, r2, lr
                                              d->buff[(idx + 1) % d->maxDelay],
24010ae0:	fbbc f2f3 	udiv	r2, ip, r3
24010ae4:	fb03 cc12 	mls	ip, r3, r2, ip
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
24010ae8:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
24010aec:	fbb0 f2f3 	udiv	r2, r0, r3
24010af0:	fb03 0012 	mls	r0, r3, r2, r0
24010af4:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
24010af8:	edde 1a00 	vldr	s3, [lr]
24010afc:	eb01 0180 	add.w	r1, r1, r0, lsl #2
24010b00:	ed9c 1a00 	vldr	s2, [ip]
24010b04:	ed91 0a00 	vldr	s0, [r1]
24010b08:	f003 f902 	bl	24013d10 <LEAF_interpolate_hermite_x>
    Lfloat diff = (d->inPoint - d->idx);
24010b0c:	edd4 7a05 	vldr	s15, [r4, #20]
24010b10:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
24010b14:	eef8 7a67 	vcvt.f32.u32	s15, s15
    while (diff < 0.f) diff += d->maxDelay;
24010b18:	edd4 6a06 	vldr	s13, [r4, #24]
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
24010b1c:	ed84 0a03 	vstr	s0, [r4, #12]
    while (diff < 0.f) diff += d->maxDelay;
24010b20:	eef8 6a66 	vcvt.f32.u32	s13, s13
    Lfloat diff = (d->inPoint - d->idx);
24010b24:	ee77 7ac7 	vsub.f32	s15, s15, s14
    while (diff < 0.f) diff += d->maxDelay;
24010b28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24010b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010b30:	d506      	bpl.n	24010b40 <tTapeDelay_tick+0xb8>
24010b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
24010b36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24010b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010b3e:	d4f8      	bmi.n	24010b32 <tTapeDelay_tick+0xaa>
    d->inc = 1.0f + (diff - d->delay) / d->delay; //* SMOOTH_FACTOR;
24010b40:	edd4 5a07 	vldr	s11, [r4, #28]
24010b44:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
24010b48:	ee77 7ae5 	vsub.f32	s15, s15, s11
24010b4c:	ee87 6aa5 	vdiv.f32	s12, s15, s11
24010b50:	ee36 6a05 	vadd.f32	s12, s12, s10
    d->idx += d->inc;
24010b54:	ee77 7a06 	vadd.f32	s15, s14, s12
    d->inc = 1.0f + (diff - d->delay) / d->delay; //* SMOOTH_FACTOR;
24010b58:	ed84 6a08 	vstr	s12, [r4, #32]
    while (d->idx >= d->maxDelay) d->idx -= d->maxDelay;
24010b5c:	eef4 7ae6 	vcmpe.f32	s15, s13
    d->idx += d->inc;
24010b60:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    while (d->idx >= d->maxDelay) d->idx -= d->maxDelay;
24010b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010b68:	db08      	blt.n	24010b7c <tTapeDelay_tick+0xf4>
24010b6a:	ee77 7ae6 	vsub.f32	s15, s15, s13
24010b6e:	eef4 7ae6 	vcmpe.f32	s15, s13
24010b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010b76:	daf8      	bge.n	24010b6a <tTapeDelay_tick+0xe2>
24010b78:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
}
24010b7c:	bd10      	pop	{r4, pc}
24010b7e:	bf00      	nop

24010b80 <tTapeDelay_setDelay>:
{
24010b80:	b510      	push	{r4, lr}
    _tTapeDelay* d = *dl;
24010b82:	6804      	ldr	r4, [r0, #0]
{
24010b84:	eef0 0a40 	vmov.f32	s1, s0
    d->delay = LEAF_clip(1.f, delay,  d->maxDelay);
24010b88:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24010b8c:	edd4 7a06 	vldr	s15, [r4, #24]
24010b90:	eeb8 1a67 	vcvt.f32.u32	s2, s15
24010b94:	f022 fea0 	bl	240338d8 <__LEAF_clip_veneer>
24010b98:	ed84 0a07 	vstr	s0, [r4, #28]
}
24010b9c:	bd10      	pop	{r4, pc}
24010b9e:	bf00      	nop

24010ba0 <tWavefolder_initToPool>:
{
    tWavefolder_initToPool   (wf, ffAmount, fbAmount, foldDepth, &leaf->mempool);
}

void tWavefolder_initToPool (tWavefolder* const wf, Lfloat ffAmount, Lfloat fbAmount, Lfloat foldDepth, tMempool* const mp)
{
24010ba0:	b570      	push	{r4, r5, r6, lr}
24010ba2:	ed2d 8b04 	vpush	{d8-d9}
    _tMempool* m = *mp;
24010ba6:	680e      	ldr	r6, [r1, #0]
{
24010ba8:	460c      	mov	r4, r1
24010baa:	4605      	mov	r5, r0
    _tWavefolder* w = *wf = (_tWavefolder*) mpool_alloc(sizeof(_tWavefolder), m);
24010bac:	2024      	movs	r0, #36	; 0x24
24010bae:	4631      	mov	r1, r6
{
24010bb0:	eeb0 8a60 	vmov.f32	s16, s1
24010bb4:	eef0 8a40 	vmov.f32	s17, s0
24010bb8:	eeb0 9a41 	vmov.f32	s18, s2
    _tWavefolder* w = *wf = (_tWavefolder*) mpool_alloc(sizeof(_tWavefolder), m);
24010bbc:	f003 f9ac 	bl	24013f18 <mpool_alloc>
    w->mempool = m;
    tHighpass_initToPool(&w->dcBlock, 1.0f, mp);
24010bc0:	4621      	mov	r1, r4
    _tWavefolder* w = *wf = (_tWavefolder*) mpool_alloc(sizeof(_tWavefolder), m);
24010bc2:	6028      	str	r0, [r5, #0]
24010bc4:	4604      	mov	r4, r0
    tHighpass_initToPool(&w->dcBlock, 1.0f, mp);
24010bc6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    w->mempool = m;
24010bca:	f840 6b20 	str.w	r6, [r0], #32
    tHighpass_initToPool(&w->dcBlock, 1.0f, mp);
24010bce:	f000 fdc5 	bl	2401175c <tHighpass_initToPool>
    w->FBsample = 0.0f;
    w->offset = 0.0f;
    w->gain = 1.0f;
24010bd2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    w->foldDepth = foldDepth;
    w->FBAmount = fbAmount;
24010bd6:	ed84 8a05 	vstr	s16, [r4, #20]
    w->FBsample = 0.0f;
24010bda:	2300      	movs	r3, #0
    w->foldDepth = foldDepth;
24010bdc:	ed84 9a04 	vstr	s18, [r4, #16]
    w->FFAmount = ffAmount;
    w->invFBAmount = 1.0f / (1.0f + fbAmount);
24010be0:	ee38 8a27 	vadd.f32	s16, s16, s15
    w->FFAmount = ffAmount;
24010be4:	edc4 8a07 	vstr	s17, [r4, #28]
    w->FBsample = 0.0f;
24010be8:	6063      	str	r3, [r4, #4]
    w->offset = 0.0f;
24010bea:	60e3      	str	r3, [r4, #12]
    w->invFBAmount = 1.0f / (1.0f + fbAmount);
24010bec:	ee87 7a88 	vdiv.f32	s14, s15, s16
    w->gain = 1.0f;
24010bf0:	edc4 7a02 	vstr	s15, [r4, #8]
    w->invFBAmount = 1.0f / (1.0f + fbAmount);
24010bf4:	ed84 7a06 	vstr	s14, [r4, #24]
}
24010bf8:	ecbd 8b04 	vpop	{d8-d9}
24010bfc:	bd70      	pop	{r4, r5, r6, pc}
24010bfe:	bf00      	nop

24010c00 <tWavefolder_free>:

void tWavefolder_free (tWavefolder* const wf)
{
    _tWavefolder* w = *wf;
24010c00:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)w, w->mempool);
24010c02:	6801      	ldr	r1, [r0, #0]
24010c04:	f003 ba4a 	b.w	2401409c <mpool_free>

24010c08 <tWavefolder_setFFAmount>:
}

void tWavefolder_setFFAmount(tWavefolder* const wf, Lfloat ffAmount)
{
    _tWavefolder* w = *wf;
24010c08:	6803      	ldr	r3, [r0, #0]
    w->FFAmount = ffAmount;
24010c0a:	ed83 0a07 	vstr	s0, [r3, #28]
}
24010c0e:	4770      	bx	lr

24010c10 <tWavefolder_setFBAmount>:
void tWavefolder_setFBAmount(tWavefolder* const wf, Lfloat fbAmount)
{
    _tWavefolder* w = *wf;
    w->FBAmount = fbAmount;
    
    w->invFBAmount = 1.0f / (1.0f + fbAmount);
24010c10:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tWavefolder* w = *wf;
24010c14:	6803      	ldr	r3, [r0, #0]
    w->FBAmount = fbAmount;
24010c16:	ed83 0a05 	vstr	s0, [r3, #20]
    w->invFBAmount = 1.0f / (1.0f + fbAmount);
24010c1a:	ee70 6a27 	vadd.f32	s13, s0, s15
24010c1e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
24010c22:	ed83 7a06 	vstr	s14, [r3, #24]
}
24010c26:	4770      	bx	lr

24010c28 <tWavefolder_setFoldDepth>:

void tWavefolder_setFoldDepth(tWavefolder* const wf, Lfloat foldDepth)
{
    _tWavefolder* w = *wf;
24010c28:	6803      	ldr	r3, [r0, #0]
    w->foldDepth = foldDepth;
24010c2a:	ed83 0a04 	vstr	s0, [r3, #16]
}
24010c2e:	4770      	bx	lr

24010c30 <tWavefolder_tick>:
    w->gain = gain;
}

Lfloat tWavefolder_tick(tWavefolder* const wf, Lfloat in)
{
    _tWavefolder* w = *wf;
24010c30:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        ffSample = -1.0f;
    } else if (ffSample >= 1.0f)
    {
        ffSample = 1.0f;
    }
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
24010c34:	eddf 4a26 	vldr	s9, [pc, #152]	; 24010cd0 <tWavefolder_tick+0xa0>
24010c38:	eebf 5a00 	vmov.f32	s10, #240	; 0xbf800000 -1.0
    ffSample *= 1.499999f;
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);
24010c3c:	ed9f 4a25 	vldr	s8, [pc, #148]	; 24010cd4 <tWavefolder_tick+0xa4>
24010c40:	fe80 6a67 	vminnm.f32	s12, s0, s15
{
24010c44:	b510      	push	{r4, lr}
24010c46:	fe86 6a05 	vmaxnm.f32	s12, s12, s10
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
24010c4a:	ee66 6a06 	vmul.f32	s13, s12, s12
{
24010c4e:	ed2d 8b04 	vpush	{d8-d9}
    _tWavefolder* w = *wf;
24010c52:	6804      	ldr	r4, [r0, #0]
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
24010c54:	ee66 6aa4 	vmul.f32	s13, s13, s9
    float curFF = w->FFAmount;
24010c58:	edd4 5a07 	vldr	s11, [r4, #28]
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
24010c5c:	ee77 6ae6 	vsub.f32	s13, s15, s13
24010c60:	ed94 7a01 	vldr	s14, [r4, #4]
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);
24010c64:	ee37 8ae5 	vsub.f32	s16, s15, s11
24010c68:	ed94 9a05 	vldr	s18, [r4, #20]
24010c6c:	ee65 5a84 	vmul.f32	s11, s11, s8
24010c70:	fe87 7a67 	vminnm.f32	s14, s14, s15
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
24010c74:	ee66 6a86 	vmul.f32	s13, s13, s12
24010c78:	fe87 7a05 	vmaxnm.f32	s14, s14, s10
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);
24010c7c:	ee28 8a00 	vmul.f32	s16, s16, s0
        fbSample = -1.0f;
    } else if (fbSample >= 1.0f)
    {
        fbSample = 1.0f;
    }
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
24010c80:	ee27 5a07 	vmul.f32	s10, s14, s14
24010c84:	ee29 9a04 	vmul.f32	s18, s18, s8
    fbSample *= 1.499999f;
    float fb = curFB * fbSample;

    Lfloat tempVal = 0.0f;
#ifdef ARM_MATH_CM7
    tempVal =arm_sin_f32(TWO_PI * sample);
24010c88:	ed9f 4a13 	vldr	s8, [pc, #76]	; 24010cd8 <tWavefolder_tick+0xa8>
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);
24010c8c:	eea6 8aa5 	vfma.f32	s16, s13, s11
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
24010c90:	ee25 5a24 	vmul.f32	s10, s10, s9
    tempVal =arm_sin_f32(TWO_PI * sample);
24010c94:	ee20 0a04 	vmul.f32	s0, s0, s8
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
24010c98:	ee77 7ac5 	vsub.f32	s15, s15, s10
24010c9c:	ee67 8a87 	vmul.f32	s17, s15, s14
    tempVal =arm_sin_f32(TWO_PI * sample);
24010ca0:	f006 fe2c 	bl	240178fc <arm_sin_f32>
#else
    tempVal =sinf(TWO_PI * sample);
#endif
    w->FBsample = (ff + fb) - w->foldDepth * tempVal;
24010ca4:	eef0 7a48 	vmov.f32	s15, s16
24010ca8:	edd4 6a04 	vldr	s13, [r4, #16]
    sample = w->FBsample * w->invFBAmount;
24010cac:	ed94 7a06 	vldr	s14, [r4, #24]
    sample = tHighpass_tick(&w->dcBlock, sample);
24010cb0:	f104 0020 	add.w	r0, r4, #32
    w->FBsample = (ff + fb) - w->foldDepth * tempVal;
24010cb4:	eee8 7a89 	vfma.f32	s15, s17, s18
24010cb8:	eee6 7ac0 	vfms.f32	s15, s13, s0
24010cbc:	edc4 7a01 	vstr	s15, [r4, #4]
    sample = tHighpass_tick(&w->dcBlock, sample);
24010cc0:	ee27 0a87 	vmul.f32	s0, s15, s14
    return sample;
}
24010cc4:	ecbd 8b04 	vpop	{d8-d9}
24010cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sample = tHighpass_tick(&w->dcBlock, sample);
24010ccc:	f000 bd76 	b.w	240117bc <tHighpass_tick>
24010cd0:	3eaaaaaa 	.word	0x3eaaaaaa
24010cd4:	3fbffff8 	.word	0x3fbffff8
24010cd8:	40c90fdb 	.word	0x40c90fdb

24010cdc <tCrusher_init>:
//============================================================================================================
#define SCALAR 5000.f
#define INV_SCALAR 0.0002f

void tCrusher_init (tCrusher* const cr, LEAF* const leaf)
{
24010cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tCrusher_initToPool(cr, &leaf->mempool);
}

void tCrusher_initToPool (tCrusher* const cr, tMempool* const mp)
{
    _tMempool* m = *mp;
24010cde:	698f      	ldr	r7, [r1, #24]
{
24010ce0:	4606      	mov	r6, r0
24010ce2:	460d      	mov	r5, r1
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
24010ce4:	2020      	movs	r0, #32
24010ce6:	4639      	mov	r1, r7
24010ce8:	f003 f916 	bl	24013f18 <mpool_alloc>
    c->mempool = m;
    
    c->op = 4;
    c->div = 1.0f / SCALAR;
    c->rnd = 0.25f;
24010cec:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
    c->div = 1.0f / SCALAR;
24010cf0:	4a10      	ldr	r2, [pc, #64]	; (24010d34 <tCrusher_init+0x58>)
    c->op = 4;
24010cf2:	2104      	movs	r1, #4
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
24010cf4:	6030      	str	r0, [r6, #0]
24010cf6:	4604      	mov	r4, r0
    c->op = 4;
24010cf8:	6141      	str	r1, [r0, #20]
    c->rnd = 0.25f;
24010cfa:	6103      	str	r3, [r0, #16]
    c->srr = 0.25f;
24010cfc:	6043      	str	r3, [r0, #4]
    c->div = 1.0f / SCALAR;
24010cfe:	60c2      	str	r2, [r0, #12]
    c->mempool = m;
24010d00:	6007      	str	r7, [r0, #0]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
24010d02:	2010      	movs	r0, #16
    _tMempool* m = *mp;
24010d04:	69ad      	ldr	r5, [r5, #24]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
24010d06:	4629      	mov	r1, r5
24010d08:	f003 f906 	bl	24013f18 <mpool_alloc>
    s->invRatio = 1.0f;
24010d0c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    s->hold = 0.0f;
24010d10:	2200      	movs	r2, #0
    s->count = 0;
24010d12:	2300      	movs	r3, #0
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
24010d14:	61e0      	str	r0, [r4, #28]
    tSampleReducer_initToPool(&c->sReducer, mp);
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
24010d16:	ed9f 7a08 	vldr	s14, [pc, #32]	; 24010d38 <tCrusher_init+0x5c>
    s->mempool = m;
24010d1a:	6005      	str	r5, [r0, #0]
    s->invRatio = 1.0f;
24010d1c:	6041      	str	r1, [r0, #4]
    s->hold = 0.0f;
24010d1e:	6082      	str	r2, [r0, #8]
    s->count = 0;
24010d20:	60c3      	str	r3, [r0, #12]
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
24010d22:	eddf 7a06 	vldr	s15, [pc, #24]	; 24010d3c <tCrusher_init+0x60>
24010d26:	edd4 6a03 	vldr	s13, [r4, #12]
24010d2a:	eee6 7a87 	vfma.f32	s15, s13, s14
24010d2e:	edc4 7a06 	vstr	s15, [r4, #24]
}
24010d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24010d34:	3951b717 	.word	0x3951b717
24010d38:	3912ccf6 	.word	0x3912ccf6
24010d3c:	3e99999a 	.word	0x3e99999a

24010d40 <tCrusher_tick>:
{
    _tCrusher* c = *cr;
    
    Lfloat sample = input;
    
    sample *= SCALAR; // SCALAR is 5000 by default
24010d40:	eddf 7a1e 	vldr	s15, [pc, #120]	; 24010dbc <tCrusher_tick+0x7c>
24010d44:	ee20 0a27 	vmul.f32	s0, s0, s15
{
24010d48:	b510      	push	{r4, lr}
    
    sample = (int32_t) sample;
24010d4a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    _tCrusher* c = *cr;
24010d4e:	6804      	ldr	r4, [r0, #0]
    
    sample *= c->div;
24010d50:	edd4 7a03 	vldr	s15, [r4, #12]
    sample = (int32_t) sample;
24010d54:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    
    sample = LEAF_bitwise_xor(sample, c->op << 23);
24010d58:	6960      	ldr	r0, [r4, #20]
24010d5a:	05c0      	lsls	r0, r0, #23
24010d5c:	ee20 0a27 	vmul.f32	s0, s0, s15
24010d60:	f002 fe06 	bl	24013970 <LEAF_bitwise_xor>
    
    sample = LEAF_clip(-1.f, sample, 1.f);
24010d64:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    sample = LEAF_bitwise_xor(sample, c->op << 23);
24010d68:	eef0 0a40 	vmov.f32	s1, s0
    sample = LEAF_clip(-1.f, sample, 1.f);
24010d6c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24010d70:	f022 fdb2 	bl	240338d8 <__LEAF_clip_veneer>
    
    sample = LEAF_round(sample, c->rnd);
24010d74:	edd4 0a04 	vldr	s1, [r4, #16]
24010d78:	f002 fde8 	bl	2401394c <LEAF_round>
    _tSampleReducer* s = *sr;
24010d7c:	69e3      	ldr	r3, [r4, #28]
    if (s->count > s->invRatio)
24010d7e:	68da      	ldr	r2, [r3, #12]
24010d80:	edd3 7a01 	vldr	s15, [r3, #4]
24010d84:	ee07 2a10 	vmov	s14, r2
24010d88:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24010d8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
24010d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010d94:	dc08      	bgt.n	24010da8 <tCrusher_tick+0x68>
    s->count++;
24010d96:	3201      	adds	r2, #1
    return s->hold;
24010d98:	ed93 0a02 	vldr	s0, [r3, #8]
    s->count++;
24010d9c:	60da      	str	r2, [r3, #12]
    
    sample = tSampleReducer_tick(&c->sReducer, sample);
    
    return sample * c->gain;
24010d9e:	edd4 7a06 	vldr	s15, [r4, #24]
    
}
24010da2:	ee20 0a27 	vmul.f32	s0, s0, s15
24010da6:	bd10      	pop	{r4, pc}
        s->hold = input;
24010da8:	2201      	movs	r2, #1
24010daa:	ed83 0a02 	vstr	s0, [r3, #8]
    s->count++;
24010dae:	60da      	str	r2, [r3, #12]
    return sample * c->gain;
24010db0:	edd4 7a06 	vldr	s15, [r4, #24]
}
24010db4:	ee20 0a27 	vmul.f32	s0, s0, s15
24010db8:	bd10      	pop	{r4, pc}
24010dba:	bf00      	nop
24010dbc:	459c4000 	.word	0x459c4000

24010dc0 <tCrusher_setOperation>:

void    tCrusher_setOperation (tCrusher* const cr, Lfloat op)
{
    _tCrusher* c = *cr;
    c->op = (uint32_t) (op * 8.0f);
24010dc0:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
    _tCrusher* c = *cr;
24010dc4:	6803      	ldr	r3, [r0, #0]
    c->op = (uint32_t) (op * 8.0f);
24010dc6:	ee20 0a27 	vmul.f32	s0, s0, s15
24010dca:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24010dce:	ed83 0a05 	vstr	s0, [r3, #20]
}
24010dd2:	4770      	bx	lr

24010dd4 <tCrusher_setQuality>:

// 0.0 - 1.0
void    tCrusher_setQuality (tCrusher* const cr, Lfloat val)
{
24010dd4:	eef0 0a40 	vmov.f32	s1, s0
    _tCrusher* c = *cr;
    
    val = LEAF_clip(0.0f, val, 1.0f);
24010dd8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 24010e0c <tCrusher_setQuality+0x38>
24010ddc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
24010de0:	b510      	push	{r4, lr}
    _tCrusher* c = *cr;
24010de2:	6804      	ldr	r4, [r0, #0]
    val = LEAF_clip(0.0f, val, 1.0f);
24010de4:	f022 fd78 	bl	240338d8 <__LEAF_clip_veneer>
    
    c->div = 0.01f + val * SCALAR;
24010de8:	ed9f 6a09 	vldr	s12, [pc, #36]	; 24010e10 <tCrusher_setQuality+0x3c>
24010dec:	eddf 7a09 	vldr	s15, [pc, #36]	; 24010e14 <tCrusher_setQuality+0x40>
    
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
24010df0:	eddf 6a09 	vldr	s13, [pc, #36]	; 24010e18 <tCrusher_setQuality+0x44>
    c->div = 0.01f + val * SCALAR;
24010df4:	eee0 7a06 	vfma.f32	s15, s0, s12
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
24010df8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 24010e1c <tCrusher_setQuality+0x48>
24010dfc:	eea7 7aa6 	vfma.f32	s14, s15, s13
    c->div = 0.01f + val * SCALAR;
24010e00:	edc4 7a03 	vstr	s15, [r4, #12]
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
24010e04:	ed84 7a06 	vstr	s14, [r4, #24]
}
24010e08:	bd10      	pop	{r4, pc}
24010e0a:	bf00      	nop
24010e0c:	00000000 	.word	0x00000000
24010e10:	459c4000 	.word	0x459c4000
24010e14:	3c23d70a 	.word	0x3c23d70a
24010e18:	3912ccf6 	.word	0x3912ccf6
24010e1c:	3e99999a 	.word	0x3e99999a

24010e20 <tCrusher_setRound>:

// what decimal to round to
void    tCrusher_setRound (tCrusher* const cr, Lfloat rnd)
{
    _tCrusher* c = *cr;
24010e20:	6803      	ldr	r3, [r0, #0]
    c->rnd = rnd;
24010e22:	ed83 0a04 	vstr	s0, [r3, #16]
}
24010e26:	4770      	bx	lr

24010e28 <tCrusher_setSamplingRatio>:
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
24010e28:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0

void    tCrusher_setSamplingRatio (tCrusher* const cr, Lfloat ratio)
{
    _tCrusher* c = *cr;
24010e2c:	6803      	ldr	r3, [r0, #0]
    c->srr = ratio;
24010e2e:	ed83 0a01 	vstr	s0, [r3, #4]
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
24010e32:	eeb4 0a67 	vcmp.f32	s0, s15
24010e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010e3a:	d809      	bhi.n	24010e50 <tCrusher_setSamplingRatio+0x28>
24010e3c:	eeb5 0a40 	vcmp.f32	s0, #0.0
24010e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010e44:	db04      	blt.n	24010e50 <tCrusher_setSamplingRatio+0x28>
        s->invRatio = 1.0f / ratio;
24010e46:	ee87 7a80 	vdiv.f32	s14, s15, s0
    _tSampleReducer* s = *sr;
24010e4a:	69db      	ldr	r3, [r3, #28]
        s->invRatio = 1.0f / ratio;
24010e4c:	ed83 7a01 	vstr	s14, [r3, #4]
    tSampleReducer_setRatio(&c->sReducer, ratio);
}
24010e50:	4770      	bx	lr
24010e52:	bf00      	nop

24010e54 <tCompressor_init>:
 
 return c;
 }
 */
void tCompressor_init (tCompressor* const comp, LEAF* const leaf)
{
24010e54:	b570      	push	{r4, r5, r6, lr}
24010e56:	ed2d 8b02 	vpush	{d8}
    tCompressor_initToPool(comp, &leaf->mempool);
}

void tCompressor_initToPool (tCompressor* const comp, tMempool* const mp)
{
    _tMempool* m = *mp;
24010e5a:	698d      	ldr	r5, [r1, #24]
{
24010e5c:	4606      	mov	r6, r0
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
24010e5e:	206c      	movs	r0, #108	; 0x6c
24010e60:	4629      	mov	r1, r5
24010e62:	f003 f859 	bl	24013f18 <mpool_alloc>
24010e66:	6030      	str	r0, [r6, #0]
    c->mempool = m;
24010e68:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    c->sampleRate = leaf->sampleRate;
    
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
24010e6a:	eebb 0a04 	vmov.f32	s0, #180	; 0xc1a00000 -20.0
    c->sampleRate = leaf->sampleRate;
24010e6e:	686b      	ldr	r3, [r5, #4]
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
24010e70:	4604      	mov	r4, r0
    c->sampleRate = leaf->sampleRate;
24010e72:	ed93 8a00 	vldr	s16, [r3]
24010e76:	ed80 8a12 	vstr	s16, [r0, #72]	; 0x48
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
24010e7a:	ee80 0a08 	vdiv.f32	s0, s0, s16
24010e7e:	f006 fe45 	bl	24017b0c <expf>
24010e82:	ed84 0a01 	vstr	s0, [r4, #4]
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
24010e86:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
24010e8a:	ee87 0a88 	vdiv.f32	s0, s15, s16
24010e8e:	f006 fe3d 	bl	24017b0c <expf>
    c->x_T[0] = 0.0f;
    c->x_T[1] = 0.0f;
    c->y_T[0] = 0.0f;
    c->y_T[1] = 0.0f;
    c->T = 0.0f; // Threshold
    c->R = 0.5f; // compression Ratio
24010e92:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->x_G[0] = 0.0f;
24010e96:	2300      	movs	r3, #0
    c->invR = 2.0f; //inverse of ratio
24010e98:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c->R = 0.5f; // compression Ratio
24010e9c:	6122      	str	r2, [r4, #16]
    c->isActive = 0;
24010e9e:	2200      	movs	r2, #0
    c->x_G[0] = 0.0f;
24010ea0:	6263      	str	r3, [r4, #36]	; 0x24
    c->isActive = 0;
24010ea2:	6462      	str	r2, [r4, #68]	; 0x44
    c->M = 3.0f; // decibel Make-up gain
    c->W = 1.5f; // decibel Width of knee transition
24010ea4:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
    c->x_G[1] = 0.0f;
24010ea8:	62a3      	str	r3, [r4, #40]	; 0x28
    c->y_G[0] = 0.0f;
24010eaa:	62e3      	str	r3, [r4, #44]	; 0x2c
    c->y_G[1] = 0.0f;
24010eac:	6323      	str	r3, [r4, #48]	; 0x30
    c->x_T[0] = 0.0f;
24010eae:	6363      	str	r3, [r4, #52]	; 0x34
    c->x_T[1] = 0.0f;
24010eb0:	63a3      	str	r3, [r4, #56]	; 0x38
    c->y_T[0] = 0.0f;
24010eb2:	63e3      	str	r3, [r4, #60]	; 0x3c
    c->y_T[1] = 0.0f;
24010eb4:	6423      	str	r3, [r4, #64]	; 0x40
    c->T = 0.0f; // Threshold
24010eb6:	60e3      	str	r3, [r4, #12]
    c->M = 3.0f; // decibel Make-up gain
24010eb8:	4905      	ldr	r1, [pc, #20]	; (24010ed0 <tCompressor_init+0x7c>)
    c->inv4W = 1.0f / (4.0f * c->W) ;
24010eba:	4b06      	ldr	r3, [pc, #24]	; (24010ed4 <tCompressor_init+0x80>)
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
24010ebc:	ed84 0a02 	vstr	s0, [r4, #8]
    c->invR = 2.0f; //inverse of ratio
24010ec0:	61e0      	str	r0, [r4, #28]
    c->M = 3.0f; // decibel Make-up gain
24010ec2:	61a1      	str	r1, [r4, #24]
    c->W = 1.5f; // decibel Width of knee transition
24010ec4:	6162      	str	r2, [r4, #20]
    c->inv4W = 1.0f / (4.0f * c->W) ;
24010ec6:	6223      	str	r3, [r4, #32]
}
24010ec8:	ecbd 8b02 	vpop	{d8}
24010ecc:	bd70      	pop	{r4, r5, r6, pc}
24010ece:	bf00      	nop
24010ed0:	40400000 	.word	0x40400000
24010ed4:	3e2aaaab 	.word	0x3e2aaaab

24010ed8 <tCompressor_tick>:
    
    mpool_free((char*)c, c->mempool);
}

Lfloat tCompressor_tick(tCompressor* const comp, Lfloat in)
{
24010ed8:	b510      	push	{r4, lr}
24010eda:	ed2d 8b02 	vpush	{d8}
    _tCompressor* c = *comp;
24010ede:	6804      	ldr	r4, [r0, #0]
{
24010ee0:	eeb0 8a40 	vmov.f32	s16, s0
    
    Lfloat slope, overshoot;
    
    Lfloat in_db = LEAF_clip(-90.0f, fasteratodb(fastabsf(in)), 0.0f);
24010ee4:	f002 fc6e 	bl	240137c4 <fastabsf>
24010ee8:	f002 ffac 	bl	24013e44 <fasteratodb>
24010eec:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 24010f9c <tCompressor_tick+0xc4>
24010ef0:	eef0 0a40 	vmov.f32	s1, s0
24010ef4:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 24010fa0 <tCompressor_tick+0xc8>
24010ef8:	f022 fcee 	bl	240338d8 <__LEAF_clip_veneer>
    
    c->y_T[1] = c->y_T[0];
    
    slope = 1.0f - c->invR; // feed-forward topology;
    
    overshoot = in_db - c->T;
24010efc:	edd4 7a03 	vldr	s15, [r4, #12]
    

    if (overshoot <= -(c->W))
24010f00:	ed94 6a05 	vldr	s12, [r4, #20]
    overshoot = in_db - c->T;
24010f04:	ee70 7a67 	vsub.f32	s15, s0, s15
    c->y_T[1] = c->y_T[0];
24010f08:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    if (overshoot <= -(c->W))
24010f0c:	eeb1 7a46 	vneg.f32	s14, s12
    c->y_T[1] = c->y_T[0];
24010f10:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
    if (overshoot <= -(c->W))
24010f14:	eeb4 7ae7 	vcmpe.f32	s14, s15
24010f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010f1c:	da16      	bge.n	24010f4c <tCompressor_tick+0x74>
    {
        out_db = in_db;
        c->isActive = 0;
    }
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
24010f1e:	eeb4 6ae7 	vcmpe.f32	s12, s15
    slope = 1.0f - c->invR; // feed-forward topology;
24010f22:	edd4 5a07 	vldr	s11, [r4, #28]
24010f26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
24010f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    slope = 1.0f - c->invR; // feed-forward topology;
24010f2e:	ee37 7a65 	vsub.f32	s14, s14, s11
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
24010f32:	dd2f      	ble.n	24010f94 <tCompressor_tick+0xbc>
    {
        Lfloat squareit = (overshoot + c->W);
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
24010f34:	edd4 5a08 	vldr	s11, [r4, #32]
        Lfloat squareit = (overshoot + c->W);
24010f38:	ee36 6a27 	vadd.f32	s12, s12, s15
    {
24010f3c:	2301      	movs	r3, #1
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
24010f3e:	ee27 7a25 	vmul.f32	s14, s14, s11
24010f42:	ee27 7a06 	vmul.f32	s14, s14, s12
24010f46:	ee27 7a06 	vmul.f32	s14, s14, s12
    {
24010f4a:	e002      	b.n	24010f52 <tCompressor_tick+0x7a>
24010f4c:	2300      	movs	r3, #0
24010f4e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 24010f9c <tCompressor_tick+0xc4>
        out_db = in_db + slope * overshoot;
        c->isActive = 1;
    }
    */
    c->x_T[0] = out_db - in_db;
    if (c->x_T[0] > c->y_T[1])
24010f52:	eef4 6ac7 	vcmpe.f32	s13, s14
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
    else
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
    Lfloat attenuation = fasterdbtoa(c->M - c->y_T[0]);
24010f56:	ed94 0a06 	vldr	s0, [r4, #24]
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
24010f5a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        c->isActive = 0;
24010f5e:	6463      	str	r3, [r4, #68]	; 0x44
    c->x_T[0] = out_db - in_db;
24010f60:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
    if (c->x_T[0] > c->y_T[1])
24010f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
24010f68:	bf4c      	ite	mi
24010f6a:	ed94 6a01 	vldrmi	s12, [r4, #4]
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
24010f6e:	ed94 6a02 	vldrpl	s12, [r4, #8]
24010f72:	ee77 7ac6 	vsub.f32	s15, s15, s12
24010f76:	ee67 7a87 	vmul.f32	s15, s15, s14
24010f7a:	eee6 7a86 	vfma.f32	s15, s13, s12
    Lfloat attenuation = fasterdbtoa(c->M - c->y_T[0]);
24010f7e:	ee30 0a67 	vsub.f32	s0, s0, s15
24010f82:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
24010f86:	f002 ff8b 	bl	24013ea0 <fasterdbtoa>
    return attenuation * in;
}
24010f8a:	ee28 0a00 	vmul.f32	s0, s16, s0
24010f8e:	ecbd 8b02 	vpop	{d8}
24010f92:	bd10      	pop	{r4, pc}
        out_db = in_db + slope * overshoot;
24010f94:	ee27 7a27 	vmul.f32	s14, s14, s15
24010f98:	2301      	movs	r3, #1
24010f9a:	e7da      	b.n	24010f52 <tCompressor_tick+0x7a>
24010f9c:	00000000 	.word	0x00000000
24010fa0:	c2b40000 	.word	0xc2b40000

24010fa4 <tCompressor_setTables>:
{
    _tCompressor* c = *comp;
	c->atodbTable = atodb;
	c->dbtoaTable = dbtoa;

	c->atodbTableSizeMinus1 = atodbTableSize-1;
24010fa4:	3b01      	subs	r3, #1
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;

	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
24010fa6:	ee70 0ac0 	vsub.f32	s1, s1, s0
    _tCompressor* c = *comp;
24010faa:	6800      	ldr	r0, [r0, #0]
	c->atodbOffset = atodbMinIn * c->atodbScalar;


	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
24010fac:	ee71 1ac1 	vsub.f32	s3, s3, s2
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
24010fb0:	ee07 3a90 	vmov	s15, r3
	c->atodbTableSizeMinus1 = atodbTableSize-1;
24010fb4:	6643      	str	r3, [r0, #100]	; 0x64
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
24010fb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
{
24010fba:	9b00      	ldr	r3, [sp, #0]
	c->atodbTable = atodb;
24010fbc:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;
24010fbe:	3b01      	subs	r3, #1
	c->dbtoaTable = dbtoa;
24010fc0:	6502      	str	r2, [r0, #80]	; 0x50
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
24010fc2:	eec7 7a20 	vdiv.f32	s15, s14, s1
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;
24010fc6:	6683      	str	r3, [r0, #104]	; 0x68
	c->atodbOffset = atodbMinIn * c->atodbScalar;
24010fc8:	ee27 0a80 	vmul.f32	s0, s15, s0
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
24010fcc:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
24010fd0:	ee07 3a90 	vmov	s15, r3
24010fd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	c->atodbOffset = atodbMinIn * c->atodbScalar;
24010fd8:	ed80 0a17 	vstr	s0, [r0, #92]	; 0x5c
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
24010fdc:	eec7 7a21 	vdiv.f32	s15, s14, s3
	c->dbtoaOffset = dbtoaMinIn * c->dbtoaScalar;
24010fe0:	ee27 1a81 	vmul.f32	s2, s15, s2
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
24010fe4:	edc0 7a16 	vstr	s15, [r0, #88]	; 0x58
	c->dbtoaOffset = dbtoaMinIn * c->dbtoaScalar;
24010fe8:	ed80 1a18 	vstr	s2, [r0, #96]	; 0x60

}
24010fec:	4770      	bx	lr
24010fee:	bf00      	nop

24010ff0 <tCompressor_setSampleRate>:
    c->tauRelease = fasterexpf(-1.0f/(0.001f * release * c->sampleRate));
}

void tCompressor_setSampleRate(tCompressor* const comp, Lfloat sampleRate)
{
    _tCompressor* c = *comp;
24010ff0:	6803      	ldr	r3, [r0, #0]
    c->sampleRate = sampleRate;
24010ff2:	ed83 0a12 	vstr	s0, [r3, #72]	; 0x48
}
24010ff6:	4770      	bx	lr

24010ff8 <tFeedbackLeveler_init>:
/* Feedback Leveler */

void tFeedbackLeveler_init (tFeedbackLeveler* const fb, Lfloat targetLevel, Lfloat factor, Lfloat strength, int mode, LEAF* const leaf)
{
24010ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
    tFeedbackLeveler_initToPool(fb, targetLevel, factor, strength, mode, &leaf->mempool);
}

void tFeedbackLeveler_initToPool (tFeedbackLeveler* const fb, Lfloat targetLevel, Lfloat factor, Lfloat strength, int mode, tMempool* const mp)
{
    _tMempool* m = *mp;
24010ffa:	4614      	mov	r4, r2
{
24010ffc:	4606      	mov	r6, r0
24010ffe:	460d      	mov	r5, r1
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
24011000:	2018      	movs	r0, #24
{
24011002:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
24011006:	f854 7f18 	ldr.w	r7, [r4, #24]!
{
2401100a:	b083      	sub	sp, #12
2401100c:	eef0 8a40 	vmov.f32	s17, s0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
24011010:	4639      	mov	r1, r7
{
24011012:	eeb0 8a41 	vmov.f32	s16, s2
24011016:	edcd 0a01 	vstr	s1, [sp, #4]
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
2401101a:	f002 ff7d 	bl	24013f18 <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->targetLevel=targetLevel;
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
2401101e:	4621      	mov	r1, r4
    p->curr=0.0f;
24011020:	2300      	movs	r3, #0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
24011022:	4604      	mov	r4, r0
24011024:	6030      	str	r0, [r6, #0]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
24011026:	ed9d 0a01 	vldr	s0, [sp, #4]
2401102a:	3014      	adds	r0, #20
    p->mempool = m;
2401102c:	f840 7c14 	str.w	r7, [r0, #-20]
    p->targetLevel=targetLevel;
24011030:	ed40 8a04 	vstr	s17, [r0, #-16]
    p->curr=0.0f;
24011034:	6123      	str	r3, [r4, #16]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
24011036:	f7ff fb57 	bl	240106e8 <tPowerFollower_initToPool>
    p->mode=mode;
2401103a:	60e5      	str	r5, [r4, #12]
    p->strength=strength;
2401103c:	ed84 8a02 	vstr	s16, [r4, #8]
}
24011040:	b003      	add	sp, #12
24011042:	ecbd 8b02 	vpop	{d8}
24011046:	bdf0      	pop	{r4, r5, r6, r7, pc}

24011048 <tFeedbackLeveler_initToPool>:
{
24011048:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
2401104a:	6817      	ldr	r7, [r2, #0]
{
2401104c:	4614      	mov	r4, r2
2401104e:	4606      	mov	r6, r0
24011050:	460d      	mov	r5, r1
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
24011052:	2018      	movs	r0, #24
24011054:	4639      	mov	r1, r7
{
24011056:	ed2d 8b02 	vpush	{d8}
2401105a:	eef0 8a40 	vmov.f32	s17, s0
2401105e:	b083      	sub	sp, #12
24011060:	eeb0 8a41 	vmov.f32	s16, s2
24011064:	edcd 0a01 	vstr	s1, [sp, #4]
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
24011068:	f002 ff56 	bl	24013f18 <mpool_alloc>
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
2401106c:	4621      	mov	r1, r4
    p->curr=0.0f;
2401106e:	2300      	movs	r3, #0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
24011070:	4604      	mov	r4, r0
24011072:	6030      	str	r0, [r6, #0]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
24011074:	ed9d 0a01 	vldr	s0, [sp, #4]
24011078:	3014      	adds	r0, #20
    p->mempool = m;
2401107a:	f840 7c14 	str.w	r7, [r0, #-20]
    p->targetLevel=targetLevel;
2401107e:	ed40 8a04 	vstr	s17, [r0, #-16]
    p->curr=0.0f;
24011082:	6123      	str	r3, [r4, #16]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
24011084:	f7ff fb30 	bl	240106e8 <tPowerFollower_initToPool>
    p->mode=mode;
24011088:	60e5      	str	r5, [r4, #12]
    p->strength=strength;
2401108a:	ed84 8a02 	vstr	s16, [r4, #8]
}
2401108e:	b003      	add	sp, #12
24011090:	ecbd 8b02 	vpop	{d8}
24011094:	bdf0      	pop	{r4, r5, r6, r7, pc}
24011096:	bf00      	nop

24011098 <tFeedbackLeveler_free>:

void tFeedbackLeveler_free (tFeedbackLeveler* const fb)
{
24011098:	b510      	push	{r4, lr}
    _tFeedbackLeveler* p = *fb;
2401109a:	6804      	ldr	r4, [r0, #0]
    
    tPowerFollower_free(&p->pwrFlw);
2401109c:	f104 0014 	add.w	r0, r4, #20
240110a0:	f7ff fb3c 	bl	2401071c <tPowerFollower_free>
    mpool_free((char*)p, p->mempool);
240110a4:	6821      	ldr	r1, [r4, #0]
240110a6:	4620      	mov	r0, r4
}
240110a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)p, p->mempool);
240110ac:	f002 bff6 	b.w	2401409c <mpool_free>

240110b0 <tFeedbackLeveler_setStrength>:

void     tFeedbackLeveler_setStrength(tFeedbackLeveler* const fb, Lfloat strength)
{    // strength is how strongly level diff is affecting the amp ratio
    // try 0.125 for a start
    _tFeedbackLeveler* p = *fb;
240110b0:	6803      	ldr	r3, [r0, #0]
    p->strength=strength;
240110b2:	ed83 0a02 	vstr	s0, [r3, #8]
}
240110b6:	4770      	bx	lr

240110b8 <tFeedbackLeveler_setFactor>:

void     tFeedbackLeveler_setFactor(tFeedbackLeveler* const fb, Lfloat factor)
{
    _tFeedbackLeveler* p = *fb;
    tPowerFollower_setFactor(&p->pwrFlw,factor);
240110b8:	6800      	ldr	r0, [r0, #0]
240110ba:	3014      	adds	r0, #20
240110bc:	f7ff bb32 	b.w	24010724 <tPowerFollower_setFactor>

240110c0 <tFeedbackLeveler_setMode>:
}

void     tFeedbackLeveler_setMode(tFeedbackLeveler* const fb, int mode)
{    // 0 for decaying with upwards lev limiting, 1 for constrained absolute level (also downwards limiting)
    _tFeedbackLeveler* p = *fb;
240110c0:	6803      	ldr	r3, [r0, #0]
    p->mode=mode;
240110c2:	60d9      	str	r1, [r3, #12]
}
240110c4:	4770      	bx	lr
240110c6:	bf00      	nop

240110c8 <tFeedbackLeveler_tick>:

Lfloat   tFeedbackLeveler_tick(tFeedbackLeveler* const fb, Lfloat input)
{
240110c8:	b510      	push	{r4, lr}
240110ca:	ed2d 8b02 	vpush	{d8}
    _tFeedbackLeveler* p = *fb;
240110ce:	6804      	ldr	r4, [r0, #0]
{
240110d0:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
240110d4:	f104 0014 	add.w	r0, r4, #20
240110d8:	f7ff fb36 	bl	24010748 <tPowerFollower_tick>
240110dc:	edd4 7a01 	vldr	s15, [r4, #4]
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
240110e0:	68e3      	ldr	r3, [r4, #12]
    Lfloat levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
240110e2:	ee30 7a67 	vsub.f32	s14, s0, s15
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
240110e6:	b91b      	cbnz	r3, 240110f0 <tFeedbackLeveler_tick+0x28>
240110e8:	eddf 7a08 	vldr	s15, [pc, #32]	; 2401110c <tFeedbackLeveler_tick+0x44>
240110ec:	fe87 7a27 	vmaxnm.f32	s14, s14, s15
    p->curr=input*(1.0f-p->strength*levdiff);
240110f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240110f4:	edd4 6a02 	vldr	s13, [r4, #8]
240110f8:	eee6 7ac7 	vfms.f32	s15, s13, s14
240110fc:	ee27 0a88 	vmul.f32	s0, s15, s16
24011100:	ed84 0a04 	vstr	s0, [r4, #16]
    return p->curr;
}
24011104:	ecbd 8b02 	vpop	{d8}
24011108:	bd10      	pop	{r4, pc}
2401110a:	bf00      	nop
2401110c:	00000000 	.word	0x00000000

24011110 <tFeedbackLeveler_setTargetLevel>:
}


void     tFeedbackLeveler_setTargetLevel   (tFeedbackLeveler* const fb, Lfloat TargetLevel)
{
    _tFeedbackLeveler* p = *fb;
24011110:	6803      	ldr	r3, [r0, #0]
    p->targetLevel=TargetLevel;
24011112:	ed83 0a01 	vstr	s0, [r3, #4]
}
24011116:	4770      	bx	lr

24011118 <tADSRT_init>:
//================================================================================

/* ADSR 4 */ // new version of our original table-based ADSR but with the table passed in by the user
// use this if the size of the big ADSR tables is too much.
void    tADSRT_init    (tADSRT* const adsrenv, Lfloat attack, Lfloat decay, Lfloat sustain, Lfloat release, Lfloat* expBuffer, int bufferSize, LEAF* const leaf)
{
24011118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2401111a:	ed2d 8b04 	vpush	{d8-d9}

//initialize with an exponential function that decays -- i.e. a call to LEAF_generate_exp(expBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, EXP_BUFFER_SIZE);
//times are in ms
void    tADSRT_initToPool    (tADSRT* const adsrenv, Lfloat attack, Lfloat decay, Lfloat sustain, Lfloat release, Lfloat* expBuffer, int bufferSize, tMempool* const mp)
{
    _tMempool* m = *mp;
2401111e:	699e      	ldr	r6, [r3, #24]
{
24011120:	4614      	mov	r4, r2
24011122:	4607      	mov	r7, r0
24011124:	460d      	mov	r5, r1
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
24011126:	206c      	movs	r0, #108	; 0x6c
24011128:	4631      	mov	r1, r6
{
2401112a:	eef0 9a40 	vmov.f32	s19, s0
2401112e:	eeb0 9a60 	vmov.f32	s18, s1
24011132:	eef0 8a61 	vmov.f32	s17, s3
24011136:	eeb0 8a41 	vmov.f32	s16, s2
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
2401113a:	f002 feed 	bl	24013f18 <mpool_alloc>
    adsr->exp_buff = expBuffer;
    adsr->buff_size = bufferSize;
    adsr->buff_sizeMinusOne = bufferSize - 1;

    adsr->sampleRate = leaf->sampleRate;
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
2401113e:	ee07 4a90 	vmov	s15, r4
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
24011142:	6038      	str	r0, [r7, #0]
    adsr->buff_sizeMinusOne = bufferSize - 1;
24011144:	1e62      	subs	r2, r4, #1
    adsr->mempool = m;
24011146:	6006      	str	r6, [r0, #0]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
24011148:	eef8 5a67 	vcvt.f32.u32	s11, s15
2401114c:	eddf 7a22 	vldr	s15, [pc, #136]	; 240111d8 <tADSRT_init+0xc0>
    LEAF* leaf = adsr->mempool->leaf;
24011150:	6873      	ldr	r3, [r6, #4]

    adsr->next = 0.0f;

    adsr->whichStage = env_idle;

    adsr->sustain = sustain;
24011152:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    adsr->buff_sizeMinusOne = bufferSize - 1;
24011156:	60c2      	str	r2, [r0, #12]
    adsr->decay = decay;
    adsr->release = release;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
24011158:	eef4 6a00 	vmov.f32	s13, #64	; 0x3e000000  0.125
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
2401115c:	ee65 5aa7 	vmul.f32	s11, s11, s15
    adsr->exp_buff = expBuffer;
24011160:	6045      	str	r5, [r0, #4]
    adsr->buff_size = bufferSize;
24011162:	6084      	str	r4, [r0, #8]
    adsr->sustain = sustain;
24011164:	fe88 8a46 	vminnm.f32	s16, s16, s12
    adsr->sampleRate = leaf->sampleRate;
24011168:	ed93 5a00 	vldr	s10, [r3]
    adsr->whichStage = env_idle;
2401116c:	2200      	movs	r2, #0
2401116e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 240111dc <tADSRT_init+0xc4>
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
24011172:	eec5 7a85 	vdiv.f32	s15, s11, s10
    adsr->sampleRate = leaf->sampleRate;
24011176:	ed80 5a04 	vstr	s10, [r0, #16]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
2401117a:	fe89 0a87 	vmaxnm.f32	s0, s19, s14
2401117e:	fec9 0a07 	vmaxnm.f32	s1, s18, s14
24011182:	fec8 1a87 	vmaxnm.f32	s3, s17, s14

    adsr->baseLeakFactor = 1.0f;
24011186:	ed80 6a18 	vstr	s12, [r0, #96]	; 0x60
    adsr->leakFactor = 1.0f;
2401118a:	ed80 6a19 	vstr	s12, [r0, #100]	; 0x64
    adsr->sustain = sustain;
2401118e:	fe88 8a07 	vmaxnm.f32	s16, s16, s14
    adsr->next = 0.0f;
24011192:	ed80 7a06 	vstr	s14, [r0, #24]
    adsr->whichStage = env_idle;
24011196:	63c2      	str	r2, [r0, #60]	; 0x3c
    adsr->attack = attack;
24011198:	ed80 0a08 	vstr	s0, [r0, #32]
    adsr->decay = decay;
2401119c:	edc0 0a09 	vstr	s1, [r0, #36]	; 0x24
    adsr->sustain = sustain;
240111a0:	ed80 8a10 	vstr	s16, [r0, #64]	; 0x40
    adsr->release = release;
240111a4:	edc0 1a0a 	vstr	s3, [r0, #40]	; 0x28
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
240111a8:	ee87 5a80 	vdiv.f32	s10, s15, s0
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
240111ac:	edc0 7a05 	vstr	s15, [r0, #20]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
240111b0:	eec7 5aa0 	vdiv.f32	s11, s15, s1
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
240111b4:	ee87 6aa1 	vdiv.f32	s12, s15, s3
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
240111b8:	ee27 7aa6 	vmul.f32	s14, s15, s13
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
240111bc:	ed80 5a0b 	vstr	s10, [r0, #44]	; 0x2c
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
240111c0:	ed80 7a0e 	vstr	s14, [r0, #56]	; 0x38
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
240111c4:	edc0 5a0c 	vstr	s11, [r0, #48]	; 0x30
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
240111c8:	ed80 6a0d 	vstr	s12, [r0, #52]	; 0x34
    adsr->invSampleRate = leaf->invSampleRate;
240111cc:	685b      	ldr	r3, [r3, #4]
240111ce:	6683      	str	r3, [r0, #104]	; 0x68
}
240111d0:	ecbd 8b04 	vpop	{d8-d9}
240111d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
240111d6:	bf00      	nop
240111d8:	4479ffff 	.word	0x4479ffff
240111dc:	00000000 	.word	0x00000000

240111e0 <tExpSmooth_init>:



/* Exponential Smoother */
void    tExpSmooth_init(tExpSmooth* const expsmooth, Lfloat val, Lfloat factor, LEAF* const leaf)
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
240111e0:	b538      	push	{r3, r4, r5, lr}
240111e2:	ed2d 8b02 	vpush	{d8}
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
}

void    tExpSmooth_initToPool   (tExpSmooth* const expsmooth, Lfloat val, Lfloat factor, tMempool* const mp)
{
    _tMempool* m = *mp;
240111e6:	698c      	ldr	r4, [r1, #24]
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
240111e8:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
240111ea:	201c      	movs	r0, #28
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
240111ec:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
240111f0:	4621      	mov	r1, r4
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
240111f2:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
240111f6:	f002 fe8f 	bl	24013f18 <mpool_alloc>
240111fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240111fe:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 24011234 <tExpSmooth_init+0x54>
24011202:	6028      	str	r0, [r5, #0]
    smooth->mempool = m;
24011204:	fec8 0a07 	vmaxnm.f32	s1, s16, s14
24011208:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->dest = val;
    if (factor < 0.0f) factor = 0.0f;
    if (factor > 1.0f) factor = 1.0f;
    smooth->baseFactor = factor;
    smooth->factor = factor;
    smooth->oneminusfactor = 1.0f - factor;
2401120c:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
24011210:	6004      	str	r4, [r0, #0]
    smooth->curr = val;
24011212:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->dest = val;
24011216:	edc0 8a05 	vstr	s17, [r0, #20]
    smooth->baseFactor = factor;
2401121a:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->factor = factor;
2401121e:	edc0 0a02 	vstr	s1, [r0, #8]
    smooth->oneminusfactor = 1.0f - factor;
24011222:	edc0 7a03 	vstr	s15, [r0, #12]
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
24011226:	6863      	ldr	r3, [r4, #4]
24011228:	685b      	ldr	r3, [r3, #4]
2401122a:	6183      	str	r3, [r0, #24]
}
2401122c:	ecbd 8b02 	vpop	{d8}
24011230:	bd38      	pop	{r3, r4, r5, pc}
24011232:	bf00      	nop
24011234:	00000000 	.word	0x00000000

24011238 <tExpSmooth_initToPool>:
{
24011238:	b538      	push	{r3, r4, r5, lr}
2401123a:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
2401123e:	680c      	ldr	r4, [r1, #0]
{
24011240:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24011242:	201c      	movs	r0, #28
{
24011244:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24011248:	4621      	mov	r1, r4
{
2401124a:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
2401124e:	f002 fe63 	bl	24013f18 <mpool_alloc>
24011252:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24011256:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 2401128c <tExpSmooth_initToPool+0x54>
2401125a:	6028      	str	r0, [r5, #0]
    smooth->mempool = m;
2401125c:	fec8 0a07 	vmaxnm.f32	s1, s16, s14
24011260:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->oneminusfactor = 1.0f - factor;
24011264:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
24011268:	6004      	str	r4, [r0, #0]
    smooth->curr = val;
2401126a:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->dest = val;
2401126e:	edc0 8a05 	vstr	s17, [r0, #20]
    smooth->baseFactor = factor;
24011272:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->factor = factor;
24011276:	edc0 0a02 	vstr	s1, [r0, #8]
    smooth->oneminusfactor = 1.0f - factor;
2401127a:	edc0 7a03 	vstr	s15, [r0, #12]
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
2401127e:	6863      	ldr	r3, [r4, #4]
24011280:	685b      	ldr	r3, [r3, #4]
24011282:	6183      	str	r3, [r0, #24]
}
24011284:	ecbd 8b02 	vpop	{d8}
24011288:	bd38      	pop	{r3, r4, r5, pc}
2401128a:	bf00      	nop
2401128c:	00000000 	.word	0x00000000

24011290 <tExpSmooth_free>:

void    tExpSmooth_free (tExpSmooth* const expsmooth)
{
    _tExpSmooth* smooth = *expsmooth;
24011290:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)smooth, smooth->mempool);
24011292:	6801      	ldr	r1, [r0, #0]
24011294:	f002 bf02 	b.w	2401409c <mpool_free>

24011298 <tExpSmooth_setValAndDest>:
    smooth->curr=val;
}

void     tExpSmooth_setValAndDest(tExpSmooth* const expsmooth, Lfloat val)
{
    _tExpSmooth* smooth = *expsmooth;
24011298:	6803      	ldr	r3, [r0, #0]
    smooth->curr=val;
2401129a:	ed83 0a04 	vstr	s0, [r3, #16]
    smooth->dest=val;
2401129e:	ed83 0a05 	vstr	s0, [r3, #20]
}
240112a2:	4770      	bx	lr

240112a4 <tOnePole_initToPool>:
{
    tOnePole_initToPool(ft, freq, &leaf->mempool);
}

void    tOnePole_initToPool     (tOnePole* const ft, Lfloat freq, tMempool* const mp)
{
240112a4:	b538      	push	{r3, r4, r5, lr}
240112a6:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
240112aa:	680d      	ldr	r5, [r1, #0]
{
240112ac:	4604      	mov	r4, r0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
    
    f->gain = 1.0f;
240112ae:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
240112b2:	2028      	movs	r0, #40	; 0x28
240112b4:	4629      	mov	r1, r5
{
240112b6:	eeb0 8a40 	vmov.f32	s16, s0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
240112ba:	f002 fe2d 	bl	24013f18 <mpool_alloc>
    f->a0 = 1.0;
    
    f->lastIn = 0.0f;
240112be:	ed9f 0a12 	vldr	s0, [pc, #72]	; 24011308 <tOnePole_initToPool+0x64>
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
240112c2:	6020      	str	r0, [r4, #0]
{
    _tOnePole* f = *ft;
    
    f->freq = freq;
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
240112c4:	eeb0 1a68 	vmov.f32	s2, s17
    f->mempool = m;
240112c8:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
240112ca:	686b      	ldr	r3, [r5, #4]
    f->gain = 1.0f;
240112cc:	edc0 8a02 	vstr	s17, [r0, #8]
    f->a0 = 1.0;
240112d0:	edc0 8a03 	vstr	s17, [r0, #12]
    f->lastIn = 0.0f;
240112d4:	ed80 0a07 	vstr	s0, [r0, #28]
    f->lastOut = 0.0f;
240112d8:	ed80 0a08 	vstr	s0, [r0, #32]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
240112dc:	68db      	ldr	r3, [r3, #12]
240112de:	6243      	str	r3, [r0, #36]	; 0x24
    _tOnePole* f = *ft;
240112e0:	6824      	ldr	r4, [r4, #0]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
240112e2:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    f->freq = freq;
240112e6:	ed84 8a01 	vstr	s16, [r4, #4]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
240112ea:	ee68 0a27 	vmul.f32	s1, s16, s15
240112ee:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
240112f2:	f022 faf1 	bl	240338d8 <__LEAF_clip_veneer>
    f->a1 = 1.0f - f->b0;
240112f6:	ee78 8ac0 	vsub.f32	s17, s17, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
240112fa:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
240112fe:	edc4 8a04 	vstr	s17, [r4, #16]
}
24011302:	ecbd 8b02 	vpop	{d8}
24011306:	bd38      	pop	{r3, r4, r5, pc}
24011308:	00000000 	.word	0x00000000

2401130c <tOnePole_free>:
    _tOnePole* f = *ft;
2401130c:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
2401130e:	6801      	ldr	r1, [r0, #0]
24011310:	f002 bec4 	b.w	2401409c <mpool_free>

24011314 <tOnePole_setFreq>:
{
24011314:	b510      	push	{r4, lr}
    _tOnePole* f = *ft;
24011316:	6804      	ldr	r4, [r0, #0]
{
24011318:	eef0 0a40 	vmov.f32	s1, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
2401131c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24011320:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 2401134c <tOnePole_setFreq+0x38>
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
24011324:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    f->freq = freq;
24011328:	edc4 0a01 	vstr	s1, [r4, #4]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
2401132c:	ee60 0aa7 	vmul.f32	s1, s1, s15
24011330:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24011334:	f022 fad0 	bl	240338d8 <__LEAF_clip_veneer>
    f->a1 = 1.0f - f->b0;
24011338:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
2401133c:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
24011340:	ee77 7ac0 	vsub.f32	s15, s15, s0
24011344:	edc4 7a04 	vstr	s15, [r4, #16]
}
24011348:	bd10      	pop	{r4, pc}
2401134a:	bf00      	nop
2401134c:	00000000 	.word	0x00000000

24011350 <tOnePole_tick>:
    f->gain = gain;
}

Lfloat   tOnePole_tick(tOnePole* const ft, Lfloat input)
{
    _tOnePole* f = *ft;
24011350:	6803      	ldr	r3, [r0, #0]
    
    Lfloat in = input * f->gain;
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
24011352:	ed93 6a08 	vldr	s12, [r3, #32]
    Lfloat in = input * f->gain;
24011356:	ed93 7a02 	vldr	s14, [r3, #8]
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
2401135a:	edd3 7a04 	vldr	s15, [r3, #16]
    Lfloat in = input * f->gain;
2401135e:	ee20 7a07 	vmul.f32	s14, s0, s14
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
24011362:	edd3 6a05 	vldr	s13, [r3, #20]
24011366:	ee27 0a86 	vmul.f32	s0, s15, s12
    
    f->lastIn = in;
2401136a:	ed83 7a07 	vstr	s14, [r3, #28]
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
2401136e:	eea6 0a87 	vfma.f32	s0, s13, s14
    f->lastOut = out;
24011372:	ed83 0a08 	vstr	s0, [r3, #32]
    
    return out;
}
24011376:	4770      	bx	lr

24011378 <tOnePole_setSampleRate>:

void tOnePole_setSampleRate(tOnePole* const ft, Lfloat sr)
{
    _tOnePole* f = *ft;
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
24011378:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 240113b4 <tOnePole_setSampleRate+0x3c>
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
2401137c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
24011380:	eec7 7a00 	vdiv.f32	s15, s14, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24011384:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 240113b8 <tOnePole_setSampleRate+0x40>
{
24011388:	b510      	push	{r4, lr}
    _tOnePole* f = *ft;
2401138a:	6804      	ldr	r4, [r0, #0]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
2401138c:	edd4 0a01 	vldr	s1, [r4, #4]
24011390:	ee67 0aa0 	vmul.f32	s1, s15, s1
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
24011394:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
24011398:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
2401139c:	f022 fa9c 	bl	240338d8 <__LEAF_clip_veneer>
    f->a1 = 1.0f - f->b0;
240113a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
240113a4:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
240113a8:	ee77 7ac0 	vsub.f32	s15, s15, s0
240113ac:	edc4 7a04 	vstr	s15, [r4, #16]
}
240113b0:	bd10      	pop	{r4, pc}
240113b2:	bf00      	nop
240113b4:	40c90fdb 	.word	0x40c90fdb
240113b8:	00000000 	.word	0x00000000

240113bc <tSVF_init>:
}

// Less efficient, more accurate version of SVF, in which cutoff frequency is taken as Lfloating point Hz value and tanf
// is calculated when frequency changes.
void tSVF_init(tSVF* const svff, SVFType type, Lfloat freq, Lfloat Q, LEAF* const leaf)
{
240113bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
240113be:	ed2d 8b02 	vpush	{d8}
     */
}

void    tSVF_initToPool     (tSVF* const svff, SVFType type, Lfloat freq, Lfloat Q, tMempool* const mp)
{
    _tMempool* m = *mp;
240113c2:	6995      	ldr	r5, [r2, #24]
{
240113c4:	4606      	mov	r6, r0
240113c6:	460f      	mov	r7, r1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
240113c8:	204c      	movs	r0, #76	; 0x4c
240113ca:	4629      	mov	r1, r5
{
240113cc:	eef0 8a40 	vmov.f32	s17, s0
240113d0:	eeb0 8a60 	vmov.f32	s16, s1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
240113d4:	f002 fda0 	bl	24013f18 <mpool_alloc>
240113d8:	6030      	str	r0, [r6, #0]
240113da:	4604      	mov	r4, r0
    svf->mempool = m;
240113dc:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = svf->mempool->leaf;
240113de:	686e      	ldr	r6, [r5, #4]
    svf->sampleRate = leaf->sampleRate;
    svf->invSampleRate = leaf->invSampleRate;
    
    svf->type = type;
    
    svf->ic1eq = 0;
240113e0:	2500      	movs	r5, #0
    svf->ic2eq = 0;
    svf->Q = Q;
    svf->cutoff = freq;
    svf->g = tanf(PI * freq * svf->invSampleRate);
240113e2:	ed9f 0a35 	vldr	s0, [pc, #212]	; 240114b8 <tSVF_init+0xfc>
    svf->sampleRate = leaf->sampleRate;
240113e6:	6833      	ldr	r3, [r6, #0]
    svf->g = tanf(PI * freq * svf->invSampleRate);
240113e8:	ee28 0a80 	vmul.f32	s0, s17, s0
    svf->sampleRate = leaf->sampleRate;
240113ec:	6403      	str	r3, [r0, #64]	; 0x40
    svf->invSampleRate = leaf->invSampleRate;
240113ee:	edd6 7a01 	vldr	s15, [r6, #4]
    svf->type = type;
240113f2:	7107      	strb	r7, [r0, #4]
    svf->g = tanf(PI * freq * svf->invSampleRate);
240113f4:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->invSampleRate = leaf->invSampleRate;
240113f8:	edc0 7a11 	vstr	s15, [r0, #68]	; 0x44
    svf->ic1eq = 0;
240113fc:	6145      	str	r5, [r0, #20]
    svf->ic2eq = 0;
240113fe:	6185      	str	r5, [r0, #24]
    svf->Q = Q;
24011400:	ed80 8a03 	vstr	s16, [r0, #12]
    svf->cutoff = freq;
24011404:	edc0 8a02 	vstr	s17, [r0, #8]
    svf->g = tanf(PI * freq * svf->invSampleRate);
24011408:	f007 f844 	bl	24018494 <tanf>
    svf->k = 1.0f/Q;
2401140c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    svf->g = tanf(PI * freq * svf->invSampleRate);
24011410:	ed84 0a07 	vstr	s0, [r4, #28]
    svf->cH = 0.0f;
    svf->cB = 0.0f;
    svf->cBK = 0.0f;
    svf->cL = 1.0f;
    
    if (type == SVFTypeLowpass)
24011414:	2f01      	cmp	r7, #1
    svf->cH = 0.0f;
24011416:	6325      	str	r5, [r4, #48]	; 0x30
    svf->k = 1.0f/Q;
24011418:	ee87 7a88 	vdiv.f32	s14, s15, s16
    svf->cL = 1.0f;
2401141c:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
    svf->cB = 0.0f;
24011420:	6365      	str	r5, [r4, #52]	; 0x34
    svf->cBK = 0.0f;
24011422:	63e5      	str	r5, [r4, #60]	; 0x3c
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24011424:	eef0 6a67 	vmov.f32	s13, s15
24011428:	ee30 6a07 	vadd.f32	s12, s0, s14
    svf->k = 1.0f/Q;
2401142c:	ed84 7a08 	vstr	s14, [r4, #32]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24011430:	eee0 6a06 	vfma.f32	s13, s0, s12
24011434:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    svf->a2 = svf->g*svf->a1;
24011438:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
2401143c:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
24011440:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g*svf->a1;
24011444:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    svf->a3 = svf->g*svf->a2;
24011448:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    if (type == SVFTypeLowpass)
2401144c:	d00d      	beq.n	2401146a <tSVF_init+0xae>
        svf->cH = 0.0f;
        svf->cB = 0.0f;
        svf->cBK = 0.0f;
        svf->cL = 1.0f;
    }
    else if (type == SVFTypeBandpass)
2401144e:	2f04      	cmp	r7, #4
24011450:	d80b      	bhi.n	2401146a <tSVF_init+0xae>
24011452:	e8df f007 	tbb	[pc, r7]
24011456:	0a23      	.short	0x0a23
24011458:	032a      	.short	0x032a
2401145a:	1a          	.byte	0x1a
2401145b:	00          	.byte	0x00
        svf->cL = -1.0f;
    }
    
    else if (type == SVFTypeNotch)
    {
        svf->cH = 1.0f;
2401145c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
24011460:	4a16      	ldr	r2, [pc, #88]	; (240114bc <tSVF_init+0x100>)
        svf->cL = 0.0f;
24011462:	2300      	movs	r3, #0
        svf->cH = 1.0f;
24011464:	6321      	str	r1, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
24011466:	63e2      	str	r2, [r4, #60]	; 0x3c
        svf->cL = 0.0f;
24011468:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cH = 1.0f;
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
        svf->cL = -2.0f;
    }
    if (leaf->sampleRate > 90000)
2401146a:	ed96 7a00 	vldr	s14, [r6]
2401146e:	eddf 7a14 	vldr	s15, [pc, #80]	; 240114c0 <tSVF_init+0x104>
    {
    	svf->table = __filterTanhTable_96000;
    }
    else
    {
    	svf->table = __filterTanhTable_48000;
24011472:	4a14      	ldr	r2, [pc, #80]	; (240114c4 <tSVF_init+0x108>)
24011474:	eeb4 7ae7 	vcmpe.f32	s14, s15
24011478:	4b13      	ldr	r3, [pc, #76]	; (240114c8 <tSVF_init+0x10c>)
2401147a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401147e:	bfd8      	it	le
24011480:	4613      	movle	r3, r2
24011482:	64a3      	str	r3, [r4, #72]	; 0x48
}
24011484:	ecbd 8b02 	vpop	{d8}
24011488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        svf->cH = 1.0f;
2401148a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
2401148e:	4a0b      	ldr	r2, [pc, #44]	; (240114bc <tSVF_init+0x100>)
        svf->cL = -2.0f;
24011490:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
        svf->cH = 1.0f;
24011494:	6321      	str	r1, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
24011496:	63e2      	str	r2, [r4, #60]	; 0x3c
        svf->cL = -2.0f;
24011498:	63a3      	str	r3, [r4, #56]	; 0x38
2401149a:	e7e6      	b.n	2401146a <tSVF_init+0xae>
        svf->cBK = -1.0f;
2401149c:	4b07      	ldr	r3, [pc, #28]	; (240114bc <tSVF_init+0x100>)
        svf->cH = 1.0f;
2401149e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
240114a2:	63e3      	str	r3, [r4, #60]	; 0x3c
        svf->cH = 1.0f;
240114a4:	6322      	str	r2, [r4, #48]	; 0x30
        svf->cL = -1.0f;
240114a6:	63a3      	str	r3, [r4, #56]	; 0x38
240114a8:	e7df      	b.n	2401146a <tSVF_init+0xae>
        svf->cB = 1.0f;
240114aa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
        svf->cL = 0.0f;
240114ae:	2200      	movs	r2, #0
        svf->cB = 1.0f;
240114b0:	6363      	str	r3, [r4, #52]	; 0x34
        svf->cL = 0.0f;
240114b2:	63a2      	str	r2, [r4, #56]	; 0x38
240114b4:	e7d9      	b.n	2401146a <tSVF_init+0xae>
240114b6:	bf00      	nop
240114b8:	40490fdb 	.word	0x40490fdb
240114bc:	bf800000 	.word	0xbf800000
240114c0:	47afc800 	.word	0x47afc800
240114c4:	2401a5c8 	.word	0x2401a5c8
240114c8:	2401e5c8 	.word	0x2401e5c8

240114cc <tSVF_initToPool>:
{
240114cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
240114ce:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
240114d2:	6815      	ldr	r5, [r2, #0]
{
240114d4:	4606      	mov	r6, r0
240114d6:	460f      	mov	r7, r1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
240114d8:	204c      	movs	r0, #76	; 0x4c
240114da:	4629      	mov	r1, r5
{
240114dc:	eef0 8a40 	vmov.f32	s17, s0
240114e0:	eeb0 8a60 	vmov.f32	s16, s1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
240114e4:	f002 fd18 	bl	24013f18 <mpool_alloc>
240114e8:	6030      	str	r0, [r6, #0]
240114ea:	4604      	mov	r4, r0
    svf->mempool = m;
240114ec:	6005      	str	r5, [r0, #0]
    LEAF* leaf = svf->mempool->leaf;
240114ee:	686e      	ldr	r6, [r5, #4]
    svf->ic1eq = 0;
240114f0:	2500      	movs	r5, #0
    svf->g = tanf(PI * freq * svf->invSampleRate);
240114f2:	ed9f 0a35 	vldr	s0, [pc, #212]	; 240115c8 <tSVF_initToPool+0xfc>
    svf->sampleRate = leaf->sampleRate;
240114f6:	6833      	ldr	r3, [r6, #0]
    svf->g = tanf(PI * freq * svf->invSampleRate);
240114f8:	ee28 0a80 	vmul.f32	s0, s17, s0
    svf->sampleRate = leaf->sampleRate;
240114fc:	6403      	str	r3, [r0, #64]	; 0x40
    svf->invSampleRate = leaf->invSampleRate;
240114fe:	edd6 7a01 	vldr	s15, [r6, #4]
    svf->type = type;
24011502:	7107      	strb	r7, [r0, #4]
    svf->g = tanf(PI * freq * svf->invSampleRate);
24011504:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->invSampleRate = leaf->invSampleRate;
24011508:	edc0 7a11 	vstr	s15, [r0, #68]	; 0x44
    svf->ic1eq = 0;
2401150c:	6145      	str	r5, [r0, #20]
    svf->ic2eq = 0;
2401150e:	6185      	str	r5, [r0, #24]
    svf->Q = Q;
24011510:	ed80 8a03 	vstr	s16, [r0, #12]
    svf->cutoff = freq;
24011514:	edc0 8a02 	vstr	s17, [r0, #8]
    svf->g = tanf(PI * freq * svf->invSampleRate);
24011518:	f006 ffbc 	bl	24018494 <tanf>
    svf->k = 1.0f/Q;
2401151c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    svf->g = tanf(PI * freq * svf->invSampleRate);
24011520:	ed84 0a07 	vstr	s0, [r4, #28]
    if (type == SVFTypeLowpass)
24011524:	2f01      	cmp	r7, #1
    svf->cH = 0.0f;
24011526:	6325      	str	r5, [r4, #48]	; 0x30
    svf->k = 1.0f/Q;
24011528:	ee87 7a88 	vdiv.f32	s14, s15, s16
    svf->cL = 1.0f;
2401152c:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
    svf->cB = 0.0f;
24011530:	6365      	str	r5, [r4, #52]	; 0x34
    svf->cBK = 0.0f;
24011532:	63e5      	str	r5, [r4, #60]	; 0x3c
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24011534:	eef0 6a67 	vmov.f32	s13, s15
24011538:	ee30 6a07 	vadd.f32	s12, s0, s14
    svf->k = 1.0f/Q;
2401153c:	ed84 7a08 	vstr	s14, [r4, #32]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24011540:	eee0 6a06 	vfma.f32	s13, s0, s12
24011544:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    svf->a2 = svf->g*svf->a1;
24011548:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
2401154c:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
24011550:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g*svf->a1;
24011554:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    svf->a3 = svf->g*svf->a2;
24011558:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    if (type == SVFTypeLowpass)
2401155c:	d00b      	beq.n	24011576 <tSVF_initToPool+0xaa>
    else if (type == SVFTypeBandpass)
2401155e:	2f04      	cmp	r7, #4
24011560:	d809      	bhi.n	24011576 <tSVF_initToPool+0xaa>
24011562:	e8df f007 	tbb	[pc, r7]
24011566:	0821      	.short	0x0821
24011568:	2803      	.short	0x2803
2401156a:	18          	.byte	0x18
2401156b:	00          	.byte	0x00
        svf->cB = 1.0f;
2401156c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
        svf->cL = 0.0f;
24011570:	2200      	movs	r2, #0
        svf->cB = 1.0f;
24011572:	6363      	str	r3, [r4, #52]	; 0x34
        svf->cL = 0.0f;
24011574:	63a2      	str	r2, [r4, #56]	; 0x38
    if (leaf->sampleRate > 90000)
24011576:	ed96 7a00 	vldr	s14, [r6]
2401157a:	eddf 7a14 	vldr	s15, [pc, #80]	; 240115cc <tSVF_initToPool+0x100>
    	svf->table = __filterTanhTable_48000;
2401157e:	4a14      	ldr	r2, [pc, #80]	; (240115d0 <tSVF_initToPool+0x104>)
24011580:	eeb4 7ae7 	vcmpe.f32	s14, s15
24011584:	4b13      	ldr	r3, [pc, #76]	; (240115d4 <tSVF_initToPool+0x108>)
24011586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401158a:	bfd8      	it	le
2401158c:	4613      	movle	r3, r2
2401158e:	64a3      	str	r3, [r4, #72]	; 0x48
    }
}
24011590:	ecbd 8b02 	vpop	{d8}
24011594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        svf->cH = 1.0f;
24011596:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
2401159a:	4a0f      	ldr	r2, [pc, #60]	; (240115d8 <tSVF_initToPool+0x10c>)
        svf->cL = -2.0f;
2401159c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
        svf->cH = 1.0f;
240115a0:	6321      	str	r1, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
240115a2:	63e2      	str	r2, [r4, #60]	; 0x3c
        svf->cL = -2.0f;
240115a4:	63a3      	str	r3, [r4, #56]	; 0x38
240115a6:	e7e6      	b.n	24011576 <tSVF_initToPool+0xaa>
        svf->cBK = -1.0f;
240115a8:	4b0b      	ldr	r3, [pc, #44]	; (240115d8 <tSVF_initToPool+0x10c>)
        svf->cH = 1.0f;
240115aa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
240115ae:	63e3      	str	r3, [r4, #60]	; 0x3c
        svf->cH = 1.0f;
240115b0:	6322      	str	r2, [r4, #48]	; 0x30
        svf->cL = -1.0f;
240115b2:	63a3      	str	r3, [r4, #56]	; 0x38
240115b4:	e7df      	b.n	24011576 <tSVF_initToPool+0xaa>
        svf->cH = 1.0f;
240115b6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
240115ba:	4a07      	ldr	r2, [pc, #28]	; (240115d8 <tSVF_initToPool+0x10c>)
        svf->cL = 0.0f;
240115bc:	2300      	movs	r3, #0
        svf->cH = 1.0f;
240115be:	6321      	str	r1, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
240115c0:	63e2      	str	r2, [r4, #60]	; 0x3c
        svf->cL = 0.0f;
240115c2:	63a3      	str	r3, [r4, #56]	; 0x38
240115c4:	e7d7      	b.n	24011576 <tSVF_initToPool+0xaa>
240115c6:	bf00      	nop
240115c8:	40490fdb 	.word	0x40490fdb
240115cc:	47afc800 	.word	0x47afc800
240115d0:	2401a5c8 	.word	0x2401a5c8
240115d4:	2401e5c8 	.word	0x2401e5c8
240115d8:	bf800000 	.word	0xbf800000

240115dc <tSVF_tick>:
    mpool_free((char*)svf, svf->mempool);
}

Lfloat   tSVF_tick(tSVF* const svff, Lfloat v0)
{
    _tSVF* svf = *svff;
240115dc:	6803      	ldr	r3, [r0, #0]
#endif
    Lfloat v1,v2,v3;
    v3 = v0 - svf->ic2eq;
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
240115de:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
    v3 = v0 - svf->ic2eq;
240115e2:	edd3 6a06 	vldr	s13, [r3, #24]
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
240115e6:	ed93 6a05 	vldr	s12, [r3, #20]
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
240115ea:	eef0 5a66 	vmov.f32	s11, s13
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
240115ee:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
    v3 = v0 - svf->ic2eq;
240115f2:	ee30 4a66 	vsub.f32	s8, s0, s13
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
240115f6:	ed93 3a0b 	vldr	s6, [r3, #44]	; 0x2c
240115fa:	edd3 3a0f 	vldr	s7, [r3, #60]	; 0x3c
240115fe:	eee6 5a27 	vfma.f32	s11, s12, s15
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
24011602:	edd3 2a09 	vldr	s5, [r3, #36]	; 0x24
24011606:	ee67 7a84 	vmul.f32	s15, s15, s8
2401160a:	ed93 2a08 	vldr	s4, [r3, #32]
2401160e:	ed93 5a0d 	vldr	s10, [r3, #52]	; 0x34
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
    
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
24011612:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
24011616:	eea2 5a23 	vfma.f32	s10, s4, s7
2401161a:	edd3 3a0c 	vldr	s7, [r3, #48]	; 0x30
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
2401161e:	eee2 7a86 	vfma.f32	s15, s5, s12
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
24011622:	eee3 5a04 	vfma.f32	s11, s6, s8
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
24011626:	ee97 6aa4 	vfnms.f32	s12, s15, s9
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
2401162a:	ee25 7a87 	vmul.f32	s14, s11, s14
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
2401162e:	eed5 6aa4 	vfnms.f32	s13, s11, s9
24011632:	eea7 7a85 	vfma.f32	s14, s15, s10
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
24011636:	ed83 6a05 	vstr	s12, [r3, #20]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
2401163a:	edc3 6a06 	vstr	s13, [r3, #24]
}
2401163e:	eea3 7a80 	vfma.f32	s14, s7, s0
24011642:	eeb0 0a47 	vmov.f32	s0, s14
24011646:	4770      	bx	lr

24011648 <tSVF_setFreqFast>:

void    tSVF_setFreqFast     (tSVF* const vf, Lfloat cutoff)
{
	_tSVF* svf = *vf;
	svf->cutoffMIDI = cutoff;
	cutoff *= 30.567164179104478f; //get 0-134 midi range to 0-4095
24011648:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 240116c8 <tSVF_setFreqFast+0x80>
2401164c:	f640 7cfe 	movw	ip, #4094	; 0xffe
	_tSVF* svf = *vf;
24011650:	6803      	ldr	r3, [r0, #0]
    {
    	intVer = 0;
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;

    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
24011652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	cutoff *= 30.567164179104478f; //get 0-134 midi range to 0-4095
24011656:	ee20 7a07 	vmul.f32	s14, s0, s14
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
2401165a:	6c99      	ldr	r1, [r3, #72]	; 0x48
	svf->cutoffMIDI = cutoff;
2401165c:	ed83 0a04 	vstr	s0, [r3, #16]
    int32_t intVer = (int32_t)cutoff;
24011660:	eefd 7ac7 	vcvt.s32.f32	s15, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24011664:	ed93 6a08 	vldr	s12, [r3, #32]
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
24011668:	ee76 5ac7 	vsub.f32	s11, s13, s14
    int32_t intVer = (int32_t)cutoff;
2401166c:	ee17 2a90 	vmov	r2, s15
24011670:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
24011674:	4562      	cmp	r2, ip
24011676:	bfa8      	it	ge
24011678:	4662      	movge	r2, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
2401167a:	ee07 2a90 	vmov	s15, r2
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
2401167e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24011682:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
24011686:	ed92 4a01 	vldr	s8, [r2, #4]
2401168a:	edd2 4a00 	vldr	s9, [r2]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
2401168e:	ee77 7a45 	vsub.f32	s15, s14, s10
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
24011692:	ee35 7a85 	vadd.f32	s14, s11, s10
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24011696:	eef0 5a66 	vmov.f32	s11, s13
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
2401169a:	ee67 7a84 	vmul.f32	s15, s15, s8
2401169e:	eee4 7a87 	vfma.f32	s15, s9, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
240116a2:	ee37 7a86 	vadd.f32	s14, s15, s12
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
240116a6:	edc3 7a07 	vstr	s15, [r3, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
240116aa:	eee7 5a87 	vfma.f32	s11, s15, s14
240116ae:	ee86 6aa5 	vdiv.f32	s12, s13, s11
    svf->a2 = svf->g * svf->a1;
240116b2:	ee27 7a86 	vmul.f32	s14, s15, s12
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
240116b6:	ed83 6a09 	vstr	s12, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
240116ba:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
240116be:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
    svf->a3 = svf->g * svf->a2;
240116c2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
240116c6:	4770      	bx	lr
240116c8:	41f4898d 	.word	0x41f4898d

240116cc <tSVF_setQ>:

void     tSVF_setQ(tSVF* const svff, Lfloat Q)
{
    _tSVF* svf = *svff;
    svf->Q = Q;
    svf->k = 1.0f/Q;
240116cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    _tSVF* svf = *svff;
240116d0:	6803      	ldr	r3, [r0, #0]
    
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
240116d2:	edd3 7a07 	vldr	s15, [r3, #28]
    svf->k = 1.0f/Q;
240116d6:	eec7 6a00 	vdiv.f32	s13, s14, s0
    svf->Q = Q;
240116da:	ed83 0a03 	vstr	s0, [r3, #12]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
240116de:	eeb0 6a47 	vmov.f32	s12, s14
240116e2:	ee76 5aa7 	vadd.f32	s11, s13, s15
    svf->k = 1.0f/Q;
240116e6:	edc3 6a08 	vstr	s13, [r3, #32]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
240116ea:	eea7 6aa5 	vfma.f32	s12, s15, s11
240116ee:	eec7 6a06 	vdiv.f32	s13, s14, s12
    svf->a2 = svf->g * svf->a1;
240116f2:	ee27 7aa6 	vmul.f32	s14, s15, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
240116f6:	edc3 6a09 	vstr	s13, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
240116fa:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
240116fe:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
    svf->a3 = svf->g * svf->a2;
24011702:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
24011706:	4770      	bx	lr

24011708 <tSVF_setSampleRate>:

void    tSVF_setSampleRate  (tSVF* const svff, Lfloat sr)
{
    _tSVF* svf = *svff;
    svf->sampleRate = sr;
    svf->invSampleRate = 1.0f/svf->sampleRate;
24011708:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    _tSVF* svf = *svff;
2401170c:	6803      	ldr	r3, [r0, #0]
    svf->sampleRate = sr;
2401170e:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
    svf->invSampleRate = 1.0f/svf->sampleRate;
24011712:	eec7 7a00 	vdiv.f32	s15, s14, s0
24011716:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
2401171a:	4770      	bx	lr

2401171c <tHighpass_init>:

#endif // LEAF_INCLUDE_FILTERTAN_TABLE

/* Highpass */
void tHighpass_init(tHighpass* const ft, Lfloat freq, LEAF* const leaf)
{
2401171c:	b538      	push	{r3, r4, r5, lr}
2401171e:	ed2d 8b02 	vpush	{d8}
    tHighpass_initToPool(ft, freq, &leaf->mempool);
}

void tHighpass_initToPool    (tHighpass* const ft, Lfloat freq, tMempool* const mp)
{
    _tMempool* m = *mp;
24011722:	698c      	ldr	r4, [r1, #24]
{
24011724:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
24011726:	2018      	movs	r0, #24
{
24011728:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
2401172c:	4621      	mov	r1, r4
2401172e:	f002 fc57 	bl	24013fe0 <mpool_calloc>
24011732:	6028      	str	r0, [r5, #0]
    f->mempool = m;
24011734:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
24011736:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
2401173a:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
2401173c:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
2401173e:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
24011742:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
24011744:	eee8 7a47 	vfms.f32	s15, s16, s14
    f->xs = 0.0f;
24011748:	6043      	str	r3, [r0, #4]
    
    f->frequency = freq;
2401174a:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
2401174e:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
24011752:	edc0 7a03 	vstr	s15, [r0, #12]
}
24011756:	ecbd 8b02 	vpop	{d8}
2401175a:	bd38      	pop	{r3, r4, r5, pc}

2401175c <tHighpass_initToPool>:
{
2401175c:	b538      	push	{r3, r4, r5, lr}
2401175e:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
24011762:	680c      	ldr	r4, [r1, #0]
{
24011764:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
24011766:	2018      	movs	r0, #24
{
24011768:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
2401176c:	4621      	mov	r1, r4
2401176e:	f002 fc37 	bl	24013fe0 <mpool_calloc>
24011772:	6028      	str	r0, [r5, #0]
    f->mempool = m;
24011774:	6004      	str	r4, [r0, #0]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
24011776:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
2401177a:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
2401177c:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
2401177e:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
24011782:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
24011784:	eee7 7a48 	vfms.f32	s15, s14, s16
    f->xs = 0.0f;
24011788:	6043      	str	r3, [r0, #4]
    f->frequency = freq;
2401178a:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
2401178e:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
24011792:	edc0 7a03 	vstr	s15, [r0, #12]
}
24011796:	ecbd 8b02 	vpop	{d8}
2401179a:	bd38      	pop	{r3, r4, r5, pc}

2401179c <tHighpass_free>:

void tHighpass_free  (tHighpass* const ft)
{
    _tHighpass* f = *ft;
2401179c:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
2401179e:	6801      	ldr	r1, [r0, #0]
240117a0:	f002 bc7c 	b.w	2401409c <mpool_free>

240117a4 <tHighpass_setFreq>:
}

void tHighpass_setFreq(tHighpass* const ft, Lfloat freq)
{
    _tHighpass* f = *ft;
240117a4:	6803      	ldr	r3, [r0, #0]
    
    f->frequency = freq;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
240117a6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240117aa:	ed93 7a05 	vldr	s14, [r3, #20]
    f->frequency = freq;
240117ae:	ed83 0a04 	vstr	s0, [r3, #16]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
240117b2:	eee7 7a40 	vfms.f32	s15, s14, s0
240117b6:	edc3 7a03 	vstr	s15, [r3, #12]
}
240117ba:	4770      	bx	lr

240117bc <tHighpass_tick>:
}

// From JOS DC Blocker
Lfloat tHighpass_tick(tHighpass* const ft, Lfloat x)
{
    _tHighpass* f = *ft;
240117bc:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
240117be:	edd3 7a01 	vldr	s15, [r3, #4]
240117c2:	ed93 7a02 	vldr	s14, [r3, #8]
240117c6:	edd3 6a03 	vldr	s13, [r3, #12]
    f->xs = x;
240117ca:	ed83 0a01 	vstr	s0, [r3, #4]
240117ce:	eed6 7a87 	vfnms.f32	s15, s13, s14
    f->ys = x - f->xs + f->R * f->ys;
240117d2:	ee30 0a27 	vadd.f32	s0, s0, s15
240117d6:	ed83 0a02 	vstr	s0, [r3, #8]
    return f->ys;
}
240117da:	4770      	bx	lr

240117dc <tHighpass_setSampleRate>:

void tHighpass_setSampleRate(tHighpass* const ft, Lfloat sr)
{
    _tHighpass* f = *ft;
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
240117dc:	eddf 6a07 	vldr	s13, [pc, #28]	; 240117fc <tHighpass_setSampleRate+0x20>
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
240117e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tHighpass* f = *ft;
240117e4:	6803      	ldr	r3, [r0, #0]
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
240117e6:	ee86 7a80 	vdiv.f32	s14, s13, s0
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
240117ea:	edd3 6a04 	vldr	s13, [r3, #16]
240117ee:	eee7 7a66 	vfms.f32	s15, s14, s13
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
240117f2:	ed83 7a05 	vstr	s14, [r3, #20]
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
240117f6:	edc3 7a03 	vstr	s15, [r3, #12]
}
240117fa:	4770      	bx	lr
240117fc:	40c90fdb 	.word	0x40c90fdb

24011800 <tVZFilter_tickEfficient>:
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

Lfloat   tVZFilter_tickEfficient             (tVZFilter* const vf, Lfloat in)
{
    _tVZFilter* f = *vf;
24011800:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
24011802:	edd3 6a03 	vldr	s13, [r3, #12]
24011806:	ed93 7a02 	vldr	s14, [r3, #8]
2401180a:	ee70 7a66 	vsub.f32	s15, s0, s13
2401180e:	ed93 4a10 	vldr	s8, [r3, #64]	; 0x40
24011812:	ed93 5a06 	vldr	s10, [r3, #24]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
24011816:	ed93 6a04 	vldr	s12, [r3, #16]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
2401181a:	eee4 7a47 	vfms.f32	s15, s8, s14
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
2401181e:	ed93 0a09 	vldr	s0, [r3, #36]	; 0x24
24011822:	edd3 4a08 	vldr	s9, [r3, #32]
24011826:	edd3 5a07 	vldr	s11, [r3, #28]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
2401182a:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
2401182e:	eea6 7a27 	vfma.f32	s14, s12, s15
    return f->cL*yL + f->cB*yB + f->cH*yH;
24011832:	ee27 0a80 	vmul.f32	s0, s15, s0
    yL = v2 + f->s2;
24011836:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
2401183a:	eeb0 5a47 	vmov.f32	s10, s14
2401183e:	eea4 0a87 	vfma.f32	s0, s9, s14
24011842:	eea6 5a27 	vfma.f32	s10, s12, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
24011846:	eef0 7a66 	vmov.f32	s15, s13
}
2401184a:	eea5 0aa6 	vfma.f32	s0, s11, s13
    f->s2 = v2 + yL; // state update in 2nd integrator
2401184e:	eee6 7a07 	vfma.f32	s15, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
24011852:	ed83 5a02 	vstr	s10, [r3, #8]
    f->s2 = v2 + yL; // state update in 2nd integrator
24011856:	edc3 7a03 	vstr	s15, [r3, #12]
}
2401185a:	4770      	bx	lr

2401185c <tVZFilter_calcCoeffs>:

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
2401185c:	b510      	push	{r4, lr}
    _tVZFilter* f = *vf;
2401185e:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24011860:	eddf 7a98 	vldr	s15, [pc, #608]	; 24011ac4 <tVZFilter_calcCoeffs+0x268>
{
24011864:	ed2d 8b02 	vpush	{d8}
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24011868:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
2401186c:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
24011870:	ee68 8a87 	vmul.f32	s17, s17, s14
24011874:	ee68 8aa7 	vmul.f32	s17, s17, s15
24011878:	eeb0 0a68 	vmov.f32	s0, s17
2401187c:	f006 fe0a 	bl	24018494 <tanf>
    
    switch( f->type )
24011880:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24011882:	eeb0 8a40 	vmov.f32	s16, s0
24011886:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
2401188a:	2b0a      	cmp	r3, #10
2401188c:	f200 8117 	bhi.w	24011abe <tVZFilter_calcCoeffs+0x262>
24011890:	e8df f013 	tbh	[pc, r3, lsl #1]
24011894:	002f0026 	.word	0x002f0026
24011898:	00410038 	.word	0x00410038
2401189c:	0056004d 	.word	0x0056004d
240118a0:	00a1008b 	.word	0x00a1008b
240118a4:	010a00b7 	.word	0x010a00b7
240118a8:	000b      	.short	0x000b
        }
            break;
        case Allpass:
        {
            //f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B); if using bandwidth instead of Q
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
240118aa:	edd4 7a05 	vldr	s15, [r4, #20]
240118ae:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
240118b2:	eeb1 7a67 	vneg.f32	s14, s15
240118b6:	61e3      	str	r3, [r4, #28]
240118b8:	6263      	str	r3, [r4, #36]	; 0x24
240118ba:	ed84 7a08 	vstr	s14, [r4, #32]
        }
        break;
            
    }
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
240118be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
240118c2:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
240118c6:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
240118ca:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
240118ce:	eee7 6a88 	vfma.f32	s13, s15, s16
240118d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
240118d6:	edc4 7a06 	vstr	s15, [r4, #24]
}
240118da:	ecbd 8b02 	vpop	{d8}
240118de:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
240118e0:	2300      	movs	r3, #0
240118e2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
240118e6:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
240118ea:	61e3      	str	r3, [r4, #28]
240118ec:	6223      	str	r3, [r4, #32]
240118ee:	6262      	str	r2, [r4, #36]	; 0x24
            break;
240118f0:	e7e5      	b.n	240118be <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
240118f2:	2300      	movs	r3, #0
240118f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
240118f8:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
240118fc:	6223      	str	r3, [r4, #32]
240118fe:	6263      	str	r3, [r4, #36]	; 0x24
24011900:	61e2      	str	r2, [r4, #28]
            break;
24011902:	e7dc      	b.n	240118be <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
24011904:	2300      	movs	r3, #0
24011906:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
2401190a:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
2401190e:	61e3      	str	r3, [r4, #28]
24011910:	6263      	str	r3, [r4, #36]	; 0x24
24011912:	6222      	str	r2, [r4, #32]
            break;
24011914:	e7d3      	b.n	240118be <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24011916:	edd4 7a05 	vldr	s15, [r4, #20]
2401191a:	2300      	movs	r3, #0
2401191c:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
24011920:	61e3      	str	r3, [r4, #28]
24011922:	ee27 7a27 	vmul.f32	s14, s14, s15
24011926:	6263      	str	r3, [r4, #36]	; 0x24
24011928:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
2401192c:	e7c7      	b.n	240118be <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
2401192e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24011932:	2200      	movs	r2, #0
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24011934:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
24011938:	6222      	str	r2, [r4, #32]
2401193a:	61e3      	str	r3, [r4, #28]
2401193c:	6263      	str	r3, [r4, #36]	; 0x24
            break;
2401193e:	e7be      	b.n	240118be <tVZFilter_calcCoeffs+0x62>
            Lfloat fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
24011940:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
24011944:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
24011948:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
2401194c:	ee60 0aa7 	vmul.f32	s1, s1, s15
24011950:	f006 faee 	bl	24017f30 <powf>
            Lfloat wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
24011954:	ee28 0a80 	vmul.f32	s0, s17, s0
24011958:	f006 fd9c 	bl	24018494 <tanf>
            Lfloat r  = f->g/wl;
2401195c:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24011960:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
24011964:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24011968:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
2401196c:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24011970:	ed84 7a07 	vstr	s14, [r4, #28]
24011974:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
24011978:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2401197c:	eea7 7aa7 	vfma.f32	s14, s15, s15
24011980:	eef0 6a47 	vmov.f32	s13, s14
24011984:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24011988:	ee77 7a45 	vsub.f32	s15, s14, s10
2401198c:	ee67 7aa5 	vmul.f32	s15, s15, s11
24011990:	ee87 7a86 	vdiv.f32	s14, s15, s12
24011994:	eef1 7ac7 	vsqrt.f32	s15, s14
24011998:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
2401199c:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240119a0:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
240119a4:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
240119a8:	e789      	b.n	240118be <tVZFilter_calcCoeffs+0x62>
            Lfloat A = sqrtf(f->G);
240119aa:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
240119ae:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
240119b2:	edd4 7a05 	vldr	s15, [r4, #20]
240119b6:	eef1 6ac7 	vsqrt.f32	s13, s14
240119ba:	ed84 7a07 	vstr	s14, [r4, #28]
240119be:	6263      	str	r3, [r4, #36]	; 0x24
240119c0:	ee27 6a27 	vmul.f32	s12, s14, s15
240119c4:	ed84 6a08 	vstr	s12, [r4, #32]
240119c8:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
240119cc:	ee80 8a07 	vdiv.f32	s16, s0, s14
240119d0:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
240119d4:	e773      	b.n	240118be <tVZFilter_calcCoeffs+0x62>
            Lfloat A = sqrtf(f->G);
240119d6:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
240119da:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
240119de:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
240119e2:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
240119e6:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
240119ea:	61e3      	str	r3, [r4, #28]
240119ec:	ee27 6a27 	vmul.f32	s12, s14, s15
240119f0:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
240119f4:	eeb1 7ae6 	vsqrt.f32	s14, s13
240119f8:	ee20 8a07 	vmul.f32	s16, s0, s14
240119fc:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
24011a00:	e75d      	b.n	240118be <tVZFilter_calcCoeffs+0x62>
            Lfloat x  = (2.0f*f->m-1.0f);
24011a02:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
24011a06:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
24011a0a:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24011a0e:	eddf 0a2e 	vldr	s1, [pc, #184]	; 24011ac8 <tVZFilter_calcCoeffs+0x26c>
24011a12:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            Lfloat x  = (2.0f*f->m-1.0f);
24011a16:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24011a1a:	eeb0 0a48 	vmov.f32	s0, s16
24011a1e:	eea7 0a67 	vfms.f32	s0, s14, s15
24011a22:	f002 fa57 	bl	24013ed4 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24011a26:	eddf 0a28 	vldr	s1, [pc, #160]	; 24011ac8 <tVZFilter_calcCoeffs+0x26c>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24011a2a:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24011a2e:	eeb0 0a68 	vmov.f32	s0, s17
24011a32:	f002 fa53 	bl	24013edc <minimum>
            f->cB = 1.0f-x*x;
24011a36:	eeb0 7a48 	vmov.f32	s14, s16
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011a3a:	edd4 7a05 	vldr	s15, [r4, #20]
24011a3e:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
24011a42:	eea8 7ae8 	vfms.f32	s14, s17, s17
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011a46:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
24011a4a:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24011a4e:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011a52:	ee76 5a06 	vadd.f32	s11, s12, s12
24011a56:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
24011a5a:	ed84 7a08 	vstr	s14, [r4, #32]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011a5e:	eee6 7a06 	vfma.f32	s15, s12, s12
24011a62:	eee0 7a00 	vfma.f32	s15, s0, s0
24011a66:	eee0 7a65 	vfms.f32	s15, s0, s11
24011a6a:	ee86 0aa7 	vdiv.f32	s0, s13, s15
24011a6e:	f001 fe87 	bl	24013780 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
24011a72:	edd4 5a07 	vldr	s11, [r4, #28]
24011a76:	ed94 6a08 	vldr	s12, [r4, #32]
24011a7a:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
24011a7e:	edd4 7a05 	vldr	s15, [r4, #20]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011a82:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
24011a86:	ed94 8a04 	vldr	s16, [r4, #16]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011a8a:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
24011a8e:	ee65 5a80 	vmul.f32	s11, s11, s0
24011a92:	ee26 6a00 	vmul.f32	s12, s12, s0
24011a96:	ee66 6a80 	vmul.f32	s13, s13, s0
24011a9a:	edc4 5a07 	vstr	s11, [r4, #28]
24011a9e:	ed84 6a08 	vstr	s12, [r4, #32]
24011aa2:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
        break;
24011aa6:	e70a      	b.n	240118be <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f;
24011aa8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
24011aac:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
24011ab0:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
24011ab2:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
24011ab6:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
24011aba:	6263      	str	r3, [r4, #36]	; 0x24
            break;
24011abc:	e6ff      	b.n	240118be <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24011abe:	edd4 7a05 	vldr	s15, [r4, #20]
24011ac2:	e6fc      	b.n	240118be <tVZFilter_calcCoeffs+0x62>
24011ac4:	40490fdb 	.word	0x40490fdb
24011ac8:	00000000 	.word	0x00000000

24011acc <tVZFilter_initToPool>:
{
24011acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24011ad0:	ed2d 8b04 	vpush	{d8-d9}
    _tMempool* m = *mp;
24011ad4:	6816      	ldr	r6, [r2, #0]
{
24011ad6:	b082      	sub	sp, #8
24011ad8:	4605      	mov	r5, r0
24011ada:	460f      	mov	r7, r1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
24011adc:	2054      	movs	r0, #84	; 0x54
24011ade:	4631      	mov	r1, r6
{
24011ae0:	eef0 8a60 	vmov.f32	s17, s1
24011ae4:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
24011ae8:	f002 fa16 	bl	24013f18 <mpool_alloc>
24011aec:	6028      	str	r0, [r5, #0]
    f->mempool = m;
24011aee:	6006      	str	r6, [r0, #0]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24011af0:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
    LEAF* leaf = f->mempool->leaf;
24011af4:	6876      	ldr	r6, [r6, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
24011af6:	4604      	mov	r4, r0
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24011af8:	ed9f 8a47 	vldr	s16, [pc, #284]	; 24011c18 <tVZFilter_initToPool+0x14c>
    f->sampleRate = leaf->sampleRate;
24011afc:	ed96 1a00 	vldr	s2, [r6]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24011b00:	eddd 0a01 	vldr	s1, [sp, #4]
24011b04:	eeb0 0a48 	vmov.f32	s0, s16
    f->sampleRate = leaf->sampleRate;
24011b08:	ed80 1a11 	vstr	s2, [r0, #68]	; 0x44
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24011b0c:	ee21 1a29 	vmul.f32	s2, s2, s19
    f->invSampleRate = leaf->invSampleRate;
24011b10:	6873      	ldr	r3, [r6, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24011b12:	ed9f 9a42 	vldr	s18, [pc, #264]	; 24011c1c <tVZFilter_initToPool+0x150>
    f->invSampleRate = leaf->invSampleRate;
24011b16:	6483      	str	r3, [r0, #72]	; 0x48
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24011b18:	f021 fede 	bl	240338d8 <__LEAF_clip_veneer>
24011b1c:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    f->cutoffMIDI = ftom(f->fc);
24011b20:	f002 f976 	bl	24013e10 <ftom>
    f->invG = 1.414213562373095f;
24011b24:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 24011c20 <tVZFilter_initToPool+0x154>
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24011b28:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
24011b2c:	ed94 6a12 	vldr	s12, [r4, #72]	; 0x48
    f->R2Plusg = f->R2 + f->g;
24011b30:	edd4 7a04 	vldr	s15, [r4, #16]
    f->cutoffMIDI = ftom(f->fc);
24011b34:	ed84 0a13 	vstr	s0, [r4, #76]	; 0x4c
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24011b38:	ee26 0a86 	vmul.f32	s0, s13, s12
    f->R2Plusg = f->R2 + f->g;
24011b3c:	ee77 7a87 	vadd.f32	s15, s15, s14
    f->G    = INV_SQRT2;
24011b40:	4b38      	ldr	r3, [pc, #224]	; (24011c24 <tVZFilter_initToPool+0x158>)
    f->invG = 1.414213562373095f;
24011b42:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
    f->G    = INV_SQRT2;
24011b46:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24011b48:	ee20 0a09 	vmul.f32	s0, s0, s18
    f->R2   = f->invG;
24011b4c:	ed84 7a05 	vstr	s14, [r4, #20]
    f->R2Plusg = f->R2 + f->g;
24011b50:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->type = type;
24011b54:	7127      	strb	r7, [r4, #4]
    f->B    = bandWidth;
24011b56:	edc4 8a0e 	vstr	s17, [r4, #56]	; 0x38
    f->m    = 0.0f;
24011b5a:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
    f->Q    = 0.5f;
24011b5e:	edc4 9a0d 	vstr	s19, [r4, #52]	; 0x34
    f->s1    = 0.0f;
24011b62:	ed84 8a02 	vstr	s16, [r4, #8]
    f->s2   = 0.0f;
24011b66:	ed84 8a03 	vstr	s16, [r4, #12]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24011b6a:	f006 fc93 	bl	24018494 <tanf>
}

void   tVZFilter_setBandwidth               (tVZFilter* const vf, Lfloat B)
{
    _tVZFilter* f = *vf;
    f->B = LEAF_clip(0.0f, B, 100.0f);
24011b6e:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 24011c28 <tVZFilter_initToPool+0x15c>
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24011b72:	ed84 0a04 	vstr	s0, [r4, #16]
    f->B = LEAF_clip(0.0f, B, 100.0f);
24011b76:	eef0 0a68 	vmov.f32	s1, s17
24011b7a:	eeb0 0a48 	vmov.f32	s0, s16
    _tVZFilter* f = *vf;
24011b7e:	f8d5 8000 	ldr.w	r8, [r5]
    f->B = LEAF_clip(0.0f, B, 100.0f);
24011b82:	f021 fea9 	bl	240338d8 <__LEAF_clip_veneer>
24011b86:	eef0 0a40 	vmov.f32	s1, s0
}

Lfloat tVZFilter_BandwidthToR(tVZFilter* const vf, Lfloat B)
{
    _tVZFilter* f = *vf;
    Lfloat fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
24011b8a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
24011b8e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    f->B = LEAF_clip(0.0f, B, 100.0f);
24011b92:	edc8 0a0e 	vstr	s1, [r8, #56]	; 0x38
    _tVZFilter* f = *vf;
24011b96:	682f      	ldr	r7, [r5, #0]
    Lfloat fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
24011b98:	ee60 0aa7 	vmul.f32	s1, s1, s15
24011b9c:	f006 f9c8 	bl	24017f30 <powf>
    Lfloat gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
24011ba0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
24011ba4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
24011ba8:	ee67 7a87 	vmul.f32	s15, s15, s14
24011bac:	ee67 7a89 	vmul.f32	s15, s15, s18
24011bb0:	ee27 0a80 	vmul.f32	s0, s15, s0
24011bb4:	f006 fc6e 	bl	24018494 <tanf>
    Lfloat r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
24011bb8:	ed97 6a04 	vldr	s12, [r7, #16]
    // unwarped: r = pow(2, -B/2) -> approximation for low
    // center-frequencies
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
24011bbc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
24011bc0:	4628      	mov	r0, r5
    Lfloat r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
24011bc2:	ee80 7a06 	vdiv.f32	s14, s0, s12
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
24011bc6:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
24011bca:	ee27 7a07 	vmul.f32	s14, s14, s14
24011bce:	ee77 7ac7 	vsub.f32	s15, s15, s14
24011bd2:	ee67 7aa7 	vmul.f32	s15, s15, s15
24011bd6:	ee67 7aa6 	vmul.f32	s15, s15, s13
24011bda:	eec7 6a87 	vdiv.f32	s13, s15, s14
24011bde:	eef1 7ae6 	vsqrt.f32	s15, s13
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
24011be2:	ee77 7aa7 	vadd.f32	s15, s15, s15
24011be6:	edc8 7a05 	vstr	s15, [r8, #20]
    tVZFilter_calcCoeffs(vf);
24011bea:	f7ff fe37 	bl	2401185c <tVZFilter_calcCoeffs>
    tVZFilter_calcCoeffs(vf);
24011bee:	4628      	mov	r0, r5
24011bf0:	f7ff fe34 	bl	2401185c <tVZFilter_calcCoeffs>
    if (leaf->sampleRate > 90000)
24011bf4:	ed96 7a00 	vldr	s14, [r6]
24011bf8:	eddf 7a0c 	vldr	s15, [pc, #48]	; 24011c2c <tVZFilter_initToPool+0x160>
    	f->table = __filterTanhTable_48000;
24011bfc:	4a0c      	ldr	r2, [pc, #48]	; (24011c30 <tVZFilter_initToPool+0x164>)
24011bfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
24011c02:	4b0c      	ldr	r3, [pc, #48]	; (24011c34 <tVZFilter_initToPool+0x168>)
24011c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011c08:	bfd8      	it	le
24011c0a:	4613      	movle	r3, r2
24011c0c:	6523      	str	r3, [r4, #80]	; 0x50
}
24011c0e:	b002      	add	sp, #8
24011c10:	ecbd 8b04 	vpop	{d8-d9}
24011c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
24011c18:	00000000 	.word	0x00000000
24011c1c:	40490fdb 	.word	0x40490fdb
24011c20:	3fb504f3 	.word	0x3fb504f3
24011c24:	3f3504f3 	.word	0x3f3504f3
24011c28:	42c80000 	.word	0x42c80000
24011c2c:	47afc800 	.word	0x47afc800
24011c30:	2401a5c8 	.word	0x2401a5c8
24011c34:	2401e5c8 	.word	0x2401e5c8

24011c38 <tVZFilter_init>:
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf->mempool);
24011c38:	3218      	adds	r2, #24
24011c3a:	f7ff bf47 	b.w	24011acc <tVZFilter_initToPool>
24011c3e:	bf00      	nop

24011c40 <tVZFilter_setFreq>:
{
24011c40:	b538      	push	{r3, r4, r5, lr}
    _tVZFilter* f = *vf;
24011c42:	6805      	ldr	r5, [r0, #0]
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24011c44:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
24011c48:	4604      	mov	r4, r0
24011c4a:	eef0 0a40 	vmov.f32	s1, s0
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24011c4e:	ed95 1a11 	vldr	s2, [r5, #68]	; 0x44
24011c52:	ed9f 0a06 	vldr	s0, [pc, #24]	; 24011c6c <tVZFilter_setFreq+0x2c>
24011c56:	ee21 1a27 	vmul.f32	s2, s2, s15
24011c5a:	f021 fe3d 	bl	240338d8 <__LEAF_clip_veneer>
    tVZFilter_calcCoeffs(vf);
24011c5e:	4620      	mov	r0, r4
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24011c60:	ed85 0a0a 	vstr	s0, [r5, #40]	; 0x28
}
24011c64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
24011c68:	f7ff bdf8 	b.w	2401185c <tVZFilter_calcCoeffs>
24011c6c:	00000000 	.word	0x00000000

24011c70 <tVZFilter_setFreqFast>:
	 cutoff *= 30.567164179104478f;
24011c70:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 24011f38 <tVZFilter_setFreqFast+0x2c8>
24011c74:	f640 7cfe 	movw	ip, #4094	; 0xffe
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
24011c78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	 cutoff *= 30.567164179104478f;
24011c7c:	ee20 7a07 	vmul.f32	s14, s0, s14
{
24011c80:	b510      	push	{r4, lr}
	    int32_t intVer = (int32_t)cutoff;
24011c82:	eefd 7ac7 	vcvt.s32.f32	s15, s14
	 _tVZFilter* f = *vf;
24011c86:	6804      	ldr	r4, [r0, #0]
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
24011c88:	ee76 6ac7 	vsub.f32	s13, s13, s14
	    int32_t intVer = (int32_t)cutoff;
24011c8c:	ee17 3a90 	vmov	r3, s15
24011c90:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
24011c94:	4563      	cmp	r3, ip
24011c96:	bfa8      	it	ge
24011c98:	4663      	movge	r3, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24011c9a:	ee07 3a90 	vmov	s15, r3
{
24011c9e:	ed2d 8b02 	vpush	{d8}
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24011ca2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
24011ca6:	6d22      	ldr	r2, [r4, #80]	; 0x50
	 f->cutoffMIDI = cutoff;
24011ca8:	ed84 0a13 	vstr	s0, [r4, #76]	; 0x4c
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
24011cac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    switch( f->type )
24011cb0:	7921      	ldrb	r1, [r4, #4]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24011cb2:	ee77 7a46 	vsub.f32	s15, s14, s12
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
24011cb6:	ed93 5a01 	vldr	s10, [r3, #4]
24011cba:	ee36 7a86 	vadd.f32	s14, s13, s12
24011cbe:	edd3 5a00 	vldr	s11, [r3]
24011cc2:	ee67 7a85 	vmul.f32	s15, s15, s10
24011cc6:	eee5 7a87 	vfma.f32	s15, s11, s14
24011cca:	edc4 7a04 	vstr	s15, [r4, #16]
    switch( f->type )
24011cce:	290a      	cmp	r1, #10
24011cd0:	f200 812f 	bhi.w	24011f32 <tVZFilter_setFreqFast+0x2c2>
24011cd4:	e8df f011 	tbh	[pc, r1, lsl #1]
24011cd8:	002f0026 	.word	0x002f0026
24011cdc:	00410038 	.word	0x00410038
24011ce0:	0056004d 	.word	0x0056004d
24011ce4:	00b5009b 	.word	0x00b5009b
24011ce8:	012200cf 	.word	0x012200cf
24011cec:	000b      	.short	0x000b
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
24011cee:	ed94 7a05 	vldr	s14, [r4, #20]
24011cf2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24011cf6:	eef1 6a47 	vneg.f32	s13, s14
24011cfa:	61e3      	str	r3, [r4, #28]
24011cfc:	6263      	str	r3, [r4, #36]	; 0x24
24011cfe:	edc4 6a08 	vstr	s13, [r4, #32]
    f->R2Plusg = f->R2+f->g;
24011d02:	ee37 0a27 	vadd.f32	s0, s14, s15
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24011d06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
24011d0a:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24011d0e:	eef0 6a47 	vmov.f32	s13, s14
24011d12:	eee0 6a27 	vfma.f32	s13, s0, s15
24011d16:	eec7 7a26 	vdiv.f32	s15, s14, s13
24011d1a:	edc4 7a06 	vstr	s15, [r4, #24]
}
24011d1e:	ecbd 8b02 	vpop	{d8}
24011d22:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
24011d24:	2300      	movs	r3, #0
24011d26:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24011d2a:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
24011d2e:	61e3      	str	r3, [r4, #28]
24011d30:	6223      	str	r3, [r4, #32]
24011d32:	6262      	str	r2, [r4, #36]	; 0x24
            break;
24011d34:	e7e5      	b.n	24011d02 <tVZFilter_setFreqFast+0x92>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
24011d36:	2300      	movs	r3, #0
24011d38:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24011d3c:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
24011d40:	6223      	str	r3, [r4, #32]
24011d42:	6263      	str	r3, [r4, #36]	; 0x24
24011d44:	61e2      	str	r2, [r4, #28]
            break;
24011d46:	e7dc      	b.n	24011d02 <tVZFilter_setFreqFast+0x92>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
24011d48:	2300      	movs	r3, #0
24011d4a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24011d4e:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
24011d52:	61e3      	str	r3, [r4, #28]
24011d54:	6263      	str	r3, [r4, #36]	; 0x24
24011d56:	6222      	str	r2, [r4, #32]
            break;
24011d58:	e7d3      	b.n	24011d02 <tVZFilter_setFreqFast+0x92>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24011d5a:	ed94 7a05 	vldr	s14, [r4, #20]
24011d5e:	2300      	movs	r3, #0
24011d60:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
24011d64:	61e3      	str	r3, [r4, #28]
24011d66:	ee66 6a87 	vmul.f32	s13, s13, s14
24011d6a:	6263      	str	r3, [r4, #36]	; 0x24
24011d6c:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
24011d70:	e7c7      	b.n	24011d02 <tVZFilter_setFreqFast+0x92>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
24011d72:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24011d76:	2200      	movs	r2, #0
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24011d78:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
24011d7c:	6222      	str	r2, [r4, #32]
24011d7e:	61e3      	str	r3, [r4, #28]
24011d80:	6263      	str	r3, [r4, #36]	; 0x24
            break;
24011d82:	e7be      	b.n	24011d02 <tVZFilter_setFreqFast+0x92>
            Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
24011d84:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
24011d88:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
24011d8c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
24011d90:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24011d94:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
            Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
24011d98:	ee60 0aa7 	vmul.f32	s1, s1, s15
24011d9c:	f001 fd76 	bl	2401388c <fastPowf>
            Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
24011da0:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
24011da4:	eddf 7a65 	vldr	s15, [pc, #404]	; 24011f3c <tVZFilter_setFreqFast+0x2cc>
24011da8:	ee28 8a07 	vmul.f32	s16, s16, s14
24011dac:	ee28 8a27 	vmul.f32	s16, s16, s15
24011db0:	ee28 0a00 	vmul.f32	s0, s16, s0
24011db4:	f001 fcd0 	bl	24013758 <fastertanf>
            Lfloat r  = f->g/wl;
24011db8:	ed94 7a04 	vldr	s14, [r4, #16]
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24011dbc:	eeb0 5a68 	vmov.f32	s10, s17
24011dc0:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
            Lfloat r  = f->g/wl;
24011dc4:	eec7 7a00 	vdiv.f32	s15, s14, s0
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24011dc8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
24011dcc:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
24011dd0:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24011dd4:	eea7 5aa7 	vfma.f32	s10, s15, s15
24011dd8:	ee85 7a27 	vdiv.f32	s14, s10, s15
24011ddc:	ee77 7a65 	vsub.f32	s15, s14, s11
24011de0:	ee67 7a86 	vmul.f32	s15, s15, s12
24011de4:	ee87 0aa6 	vdiv.f32	s0, s15, s13
24011de8:	f001 fcca 	bl	24013780 <fastsqrtf>
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24011dec:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
    f->R2Plusg = f->R2+f->g;
24011df0:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24011df4:	edc4 8a07 	vstr	s17, [r4, #28]
24011df8:	edc4 8a09 	vstr	s17, [r4, #36]	; 0x24
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24011dfc:	ee30 7a00 	vadd.f32	s14, s0, s0
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24011e00:	ee66 6a87 	vmul.f32	s13, s13, s14
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24011e04:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24011e08:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
24011e0c:	e779      	b.n	24011d02 <tVZFilter_setFreqFast+0x92>
            Lfloat A = fastsqrtf(f->G);
24011e0e:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
24011e12:	f001 fcb5 	bl	24013780 <fastsqrtf>
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011e16:	f001 fcb3 	bl	24013780 <fastsqrtf>
24011e1a:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
24011e1e:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
24011e22:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011e26:	eec6 7a00 	vdiv.f32	s15, s12, s0
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
24011e2a:	ed94 7a05 	vldr	s14, [r4, #20]
24011e2e:	edc4 6a07 	vstr	s13, [r4, #28]
24011e32:	6263      	str	r3, [r4, #36]	; 0x24
24011e34:	ee66 6a87 	vmul.f32	s13, s13, s14
24011e38:	edc4 6a08 	vstr	s13, [r4, #32]
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011e3c:	edc4 7a04 	vstr	s15, [r4, #16]
            break;
24011e40:	e75f      	b.n	24011d02 <tVZFilter_setFreqFast+0x92>
            Lfloat A = fastsqrtf(f->G);
24011e42:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
24011e46:	f001 fc9b 	bl	24013780 <fastsqrtf>
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011e4a:	f001 fc99 	bl	24013780 <fastsqrtf>
24011e4e:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
24011e52:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
24011e56:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24011e5a:	ed94 7a05 	vldr	s14, [r4, #20]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011e5e:	ee60 7a06 	vmul.f32	s15, s0, s12
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
24011e62:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
24011e66:	ee67 6a26 	vmul.f32	s13, s14, s13
24011e6a:	61e3      	str	r3, [r4, #28]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011e6c:	edc4 7a04 	vstr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
24011e70:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
24011e74:	e745      	b.n	24011d02 <tVZFilter_setFreqFast+0x92>
            Lfloat x  = (2.0f*f->m-1.0f);
24011e76:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
24011e7a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
24011e7e:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24011e82:	eddf 0a2f 	vldr	s1, [pc, #188]	; 24011f40 <tVZFilter_setFreqFast+0x2d0>
24011e86:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            Lfloat x  = (2.0f*f->m-1.0f);
24011e8a:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24011e8e:	eeb0 0a48 	vmov.f32	s0, s16
24011e92:	eea7 0a67 	vfms.f32	s0, s14, s15
24011e96:	f002 f81d 	bl	24013ed4 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24011e9a:	eddf 0a29 	vldr	s1, [pc, #164]	; 24011f40 <tVZFilter_setFreqFast+0x2d0>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24011e9e:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24011ea2:	eeb0 0a68 	vmov.f32	s0, s17
24011ea6:	f002 f819 	bl	24013edc <minimum>
            f->cB = 1.0f-x*x;
24011eaa:	eeb0 7a48 	vmov.f32	s14, s16
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011eae:	edd4 7a05 	vldr	s15, [r4, #20]
24011eb2:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
24011eb6:	eea8 7ae8 	vfms.f32	s14, s17, s17
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011eba:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
24011ebe:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24011ec2:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011ec6:	ee76 5a06 	vadd.f32	s11, s12, s12
24011eca:	ee38 8a08 	vadd.f32	s16, s16, s16
24011ece:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
24011ed2:	ed84 7a08 	vstr	s14, [r4, #32]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011ed6:	eee6 7a06 	vfma.f32	s15, s12, s12
24011eda:	eee0 7a00 	vfma.f32	s15, s0, s0
24011ede:	eee0 7a65 	vfms.f32	s15, s0, s11
24011ee2:	ee86 0aa7 	vdiv.f32	s0, s13, s15
24011ee6:	f001 fc4b 	bl	24013780 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
24011eea:	edd4 5a07 	vldr	s11, [r4, #28]
24011eee:	ed94 6a08 	vldr	s12, [r4, #32]
24011ef2:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
24011ef6:	ed94 7a05 	vldr	s14, [r4, #20]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011efa:	ee28 0a00 	vmul.f32	s0, s16, s0
    f->R2Plusg = f->R2+f->g;
24011efe:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL *= s; f->cB *= s; f->cH *= s;
24011f02:	ee65 5a80 	vmul.f32	s11, s11, s0
24011f06:	ee26 6a00 	vmul.f32	s12, s12, s0
24011f0a:	ee66 6a80 	vmul.f32	s13, s13, s0
24011f0e:	edc4 5a07 	vstr	s11, [r4, #28]
24011f12:	ed84 6a08 	vstr	s12, [r4, #32]
24011f16:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
        break;
24011f1a:	e6f2      	b.n	24011d02 <tVZFilter_setFreqFast+0x92>
            f->cL = 1.0f;
24011f1c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
24011f20:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
            f->cL = 1.0f;
24011f24:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
24011f26:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cB = f->R2;
24011f2a:	ed84 7a08 	vstr	s14, [r4, #32]
            f->cH = 1.0f;
24011f2e:	6263      	str	r3, [r4, #36]	; 0x24
            break;
24011f30:	e6e7      	b.n	24011d02 <tVZFilter_setFreqFast+0x92>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24011f32:	ed94 7a05 	vldr	s14, [r4, #20]
24011f36:	e6e4      	b.n	24011d02 <tVZFilter_setFreqFast+0x92>
24011f38:	41f4898d 	.word	0x41f4898d
24011f3c:	40490fdb 	.word	0x40490fdb
24011f40:	00000000 	.word	0x00000000

24011f44 <tVZFilter_setGain>:
{
24011f44:	b538      	push	{r3, r4, r5, lr}
24011f46:	eef0 0a40 	vmov.f32	s1, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24011f4a:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 24011f74 <tVZFilter_setGain+0x30>
24011f4e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 24011f78 <tVZFilter_setGain+0x34>
{
24011f52:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
24011f54:	6805      	ldr	r5, [r0, #0]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24011f56:	f021 fcbf 	bl	240338d8 <__LEAF_clip_veneer>
    f->invG = 1.0f/f->G;
24011f5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
24011f5e:	4620      	mov	r0, r4
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24011f60:	ed85 0a0b 	vstr	s0, [r5, #44]	; 0x2c
    f->invG = 1.0f/f->G;
24011f64:	eec7 7a00 	vdiv.f32	s15, s14, s0
24011f68:	edc5 7a0c 	vstr	s15, [r5, #48]	; 0x30
}
24011f6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
24011f70:	f7ff bc74 	b.w	2401185c <tVZFilter_calcCoeffs>
24011f74:	457a0000 	.word	0x457a0000
24011f78:	358637bd 	.word	0x358637bd

24011f7c <tVZFilter_setResonance>:
{
24011f7c:	b538      	push	{r3, r4, r5, lr}
24011f7e:	eef0 0a40 	vmov.f32	s1, s0
    f->Q = LEAF_clip(0.01f, res, 100.0f);
24011f82:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 24011fac <tVZFilter_setResonance+0x30>
24011f86:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 24011fb0 <tVZFilter_setResonance+0x34>
{
24011f8a:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
24011f8c:	6805      	ldr	r5, [r0, #0]
    f->Q = LEAF_clip(0.01f, res, 100.0f);
24011f8e:	f021 fca3 	bl	240338d8 <__LEAF_clip_veneer>
    f->R2 = 1.0f / f->Q;
24011f92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
24011f96:	4620      	mov	r0, r4
    f->Q = LEAF_clip(0.01f, res, 100.0f);
24011f98:	ed85 0a0d 	vstr	s0, [r5, #52]	; 0x34
    f->R2 = 1.0f / f->Q;
24011f9c:	eec7 7a00 	vdiv.f32	s15, s14, s0
24011fa0:	edc5 7a05 	vstr	s15, [r5, #20]
}
24011fa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
24011fa8:	f7ff bc58 	b.w	2401185c <tVZFilter_calcCoeffs>
24011fac:	42c80000 	.word	0x42c80000
24011fb0:	3c23d70a 	.word	0x3c23d70a

24011fb4 <tVZFilter_setSampleRate>:

void    tVZFilter_setSampleRate  (tVZFilter* const vf, Lfloat sr)
{
    _tVZFilter* f = *vf;
    f->sampleRate = sr;
    f->invSampleRate = 1.0f/f->sampleRate;
24011fb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    if (sr > 90000)
24011fb8:	ed9f 7a09 	vldr	s14, [pc, #36]	; 24011fe0 <tVZFilter_setSampleRate+0x2c>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
24011fbc:	4909      	ldr	r1, [pc, #36]	; (24011fe4 <tVZFilter_setSampleRate+0x30>)
24011fbe:	eeb4 0ac7 	vcmpe.f32	s0, s14
    _tVZFilter* f = *vf;
24011fc2:	6803      	ldr	r3, [r0, #0]
    f->invSampleRate = 1.0f/f->sampleRate;
24011fc4:	eec6 7a80 	vdiv.f32	s15, s13, s0
    	f->table = __filterTanhTable_48000;
24011fc8:	4a07      	ldr	r2, [pc, #28]	; (24011fe8 <tVZFilter_setSampleRate+0x34>)
    f->sampleRate = sr;
24011fca:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    	f->table = __filterTanhTable_48000;
24011fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011fd2:	bfd8      	it	le
24011fd4:	460a      	movle	r2, r1
24011fd6:	651a      	str	r2, [r3, #80]	; 0x50
    f->invSampleRate = 1.0f/f->sampleRate;
24011fd8:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    }
}
24011fdc:	4770      	bx	lr
24011fde:	bf00      	nop
24011fe0:	47afc800 	.word	0x47afc800
24011fe4:	2401a5c8 	.word	0x2401a5c8
24011fe8:	2401e5c8 	.word	0x2401e5c8

24011fec <tVZFilterLS_initToPool>:
{
    tVZFilterLS_initToPool(vf, freq, Q, gain, &leaf->mempool);
}

void    tVZFilterLS_initToPool     (tVZFilterLS* const vf, Lfloat freq, Lfloat Q, Lfloat gain, tMempool* const mp)
{
24011fec:	b570      	push	{r4, r5, r6, lr}
24011fee:	ed2d 8b04 	vpush	{d8-d9}
    _tMempool* m = *mp;
24011ff2:	680d      	ldr	r5, [r1, #0]
{
24011ff4:	b082      	sub	sp, #8
24011ff6:	4606      	mov	r6, r0
    _tVZFilterLS* f = *vf = (_tVZFilterLS*) mpool_alloc(sizeof(_tVZFilterLS), m);
24011ff8:	2048      	movs	r0, #72	; 0x48
24011ffa:	4629      	mov	r1, r5
{
24011ffc:	eef0 8a60 	vmov.f32	s17, s1
24012000:	eeb0 9a41 	vmov.f32	s18, s2
24012004:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilterLS* f = *vf = (_tVZFilterLS*) mpool_alloc(sizeof(_tVZFilterLS), m);
24012008:	f001 ff86 	bl	24013f18 <mpool_alloc>
2401200c:	6030      	str	r0, [r6, #0]
    f->mempool = m;
2401200e:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->sampleRate = leaf->sampleRate;
    f->sampRatio = 48000.0f / f->sampleRate;
    f->invSampleRate = leaf->invSampleRate;
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24012010:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
    LEAF* leaf = f->mempool->leaf;
24012014:	686d      	ldr	r5, [r5, #4]
    _tVZFilterLS* f = *vf = (_tVZFilterLS*) mpool_alloc(sizeof(_tVZFilterLS), m);
24012016:	4604      	mov	r4, r0
    f->sampRatio = 48000.0f / f->sampleRate;
24012018:	eddf 6a37 	vldr	s13, [pc, #220]	; 240120f8 <tVZFilterLS_initToPool+0x10c>
    f->cutoffMIDI = ftom(f->fc);
    f->Q    = Q;
    f->R2 =    1.0f/Q;
2401201c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    f->sampleRate = leaf->sampleRate;
24012020:	edd5 7a00 	vldr	s15, [r5]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24012024:	eddf 9a35 	vldr	s19, [pc, #212]	; 240120fc <tVZFilterLS_initToPool+0x110>
    f->sampRatio = 48000.0f / f->sampleRate;
24012028:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    f->sampleRate = leaf->sampleRate;
2401202c:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24012030:	eddd 0a01 	vldr	s1, [sp, #4]
24012034:	ee27 1a81 	vmul.f32	s2, s15, s2
24012038:	eeb0 0a69 	vmov.f32	s0, s19
    f->sampRatio = 48000.0f / f->sampleRate;
2401203c:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
    f->invSampleRate = leaf->invSampleRate;
24012040:	686b      	ldr	r3, [r5, #4]
24012042:	6303      	str	r3, [r0, #48]	; 0x30
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24012044:	f021 fc48 	bl	240338d8 <__LEAF_clip_veneer>
24012048:	ed84 0a06 	vstr	s0, [r4, #24]
    f->cutoffMIDI = ftom(f->fc);
2401204c:	f001 fee0 	bl	24013e10 <ftom>
    f->R2 =    1.0f/Q;
24012050:	ee88 7a28 	vdiv.f32	s14, s16, s17
    f->s1    = 0.0f;
    f->s2   = 0.0f;
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
24012054:	ed94 6a0c 	vldr	s12, [r4, #48]	; 0x30
24012058:	edd4 7a06 	vldr	s15, [r4, #24]
2401205c:	eddf 6a28 	vldr	s13, [pc, #160]	; 24012100 <tVZFilterLS_initToPool+0x114>
    f->cutoffMIDI = ftom(f->fc);
24012060:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
24012064:	ee67 7a86 	vmul.f32	s15, s15, s12
    f->Q    = Q;
24012068:	edc4 8a08 	vstr	s17, [r4, #32]
    f->s1    = 0.0f;
2401206c:	edc4 9a01 	vstr	s19, [r4, #4]
    f->s2   = 0.0f;
24012070:	edc4 9a02 	vstr	s19, [r4, #8]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
24012074:	ee27 0aa6 	vmul.f32	s0, s15, s13
    f->R2 =    1.0f/Q;
24012078:	ed84 7a04 	vstr	s14, [r4, #16]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
2401207c:	f006 fa0a 	bl	24018494 <tanf>
24012080:	eef0 7a40 	vmov.f32	s15, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24012084:	eef0 0a49 	vmov.f32	s1, s18
24012088:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 24012104 <tVZFilterLS_initToPool+0x118>
2401208c:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 24012108 <tVZFilterLS_initToPool+0x11c>
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
24012090:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24012094:	f021 fc20 	bl	240338d8 <__LEAF_clip_veneer>
24012098:	ed84 0a07 	vstr	s0, [r4, #28]
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
2401209c:	f001 fb70 	bl	24013780 <fastsqrtf>
240120a0:	f001 fb6e 	bl	24013780 <fastsqrtf>
240120a4:	eec8 6a00 	vdiv.f32	s13, s16, s0
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
240120a8:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
240120ac:	ed94 7a04 	vldr	s14, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
    if (leaf->sampleRate > 90000)
240120b0:	ed9f 6a16 	vldr	s12, [pc, #88]	; 2401210c <tVZFilterLS_initToPool+0x120>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
240120b4:	4a16      	ldr	r2, [pc, #88]	; (24012110 <tVZFilterLS_initToPool+0x124>)
240120b6:	4b17      	ldr	r3, [pc, #92]	; (24012114 <tVZFilterLS_initToPool+0x128>)
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
240120b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
240120bc:	edc4 6a0e 	vstr	s13, [r4, #56]	; 0x38
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
240120c0:	eef0 6a48 	vmov.f32	s13, s16
    f->R2Plusg = f->R2+f->g;
240120c4:	ee37 7a87 	vadd.f32	s14, s15, s14
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
240120c8:	edc4 7a03 	vstr	s15, [r4, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
240120cc:	eee7 6a87 	vfma.f32	s13, s15, s14
    f->R2Plusg = f->R2+f->g;
240120d0:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
240120d4:	eec8 7a26 	vdiv.f32	s15, s16, s13
240120d8:	edc4 7a05 	vstr	s15, [r4, #20]
    if (leaf->sampleRate > 90000)
240120dc:	edd5 7a00 	vldr	s15, [r5]
    	f->table = __filterTanhTable_48000;
240120e0:	eef4 7ac6 	vcmpe.f32	s15, s12
240120e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240120e8:	bfd8      	it	le
240120ea:	4613      	movle	r3, r2
240120ec:	6423      	str	r3, [r4, #64]	; 0x40
    }
}
240120ee:	b002      	add	sp, #8
240120f0:	ecbd 8b04 	vpop	{d8-d9}
240120f4:	bd70      	pop	{r4, r5, r6, pc}
240120f6:	bf00      	nop
240120f8:	473b8000 	.word	0x473b8000
240120fc:	00000000 	.word	0x00000000
24012100:	40490fdb 	.word	0x40490fdb
24012104:	457a0000 	.word	0x457a0000
24012108:	358637bd 	.word	0x358637bd
2401210c:	47afc800 	.word	0x47afc800
24012110:	2401a5c8 	.word	0x2401a5c8
24012114:	2401e5c8 	.word	0x2401e5c8

24012118 <tVZFilterLS_init>:
    tVZFilterLS_initToPool(vf, freq, Q, gain, &leaf->mempool);
24012118:	3118      	adds	r1, #24
2401211a:	f7ff bf67 	b.w	24011fec <tVZFilterLS_initToPool>
2401211e:	bf00      	nop

24012120 <tVZFilterLS_setSampleRate>:

void    tVZFilterLS_setSampleRate  (tVZFilterLS* const vf, Lfloat sampleRate)
{
        _tVZFilterLS* f = *vf;
        f->sampleRate = sampleRate;
    f->invSampleRate = 1.0f / sampleRate;
24012120:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->sampRatio = 48000.0f / f->sampleRate;
24012124:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 24012158 <tVZFilterLS_setSampleRate+0x38>
    if (sampleRate > 90000)
24012128:	eddf 6a0c 	vldr	s13, [pc, #48]	; 2401215c <tVZFilterLS_setSampleRate+0x3c>
       {
       	f->table = __filterTanhTable_96000;
       }
       else
       {
       	f->table = __filterTanhTable_48000;
2401212c:	490c      	ldr	r1, [pc, #48]	; (24012160 <tVZFilterLS_setSampleRate+0x40>)
    f->invSampleRate = 1.0f / sampleRate;
2401212e:	ee87 7a80 	vdiv.f32	s14, s15, s0
        _tVZFilterLS* f = *vf;
24012132:	6803      	ldr	r3, [r0, #0]
       	f->table = __filterTanhTable_48000;
24012134:	4a0b      	ldr	r2, [pc, #44]	; (24012164 <tVZFilterLS_setSampleRate+0x44>)
        f->sampleRate = sampleRate;
24012136:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
    f->sampRatio = 48000.0f / f->sampleRate;
2401213a:	eec6 7a00 	vdiv.f32	s15, s12, s0
       	f->table = __filterTanhTable_48000;
2401213e:	eeb4 0ae6 	vcmpe.f32	s0, s13
24012142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012146:	bfd8      	it	le
24012148:	460a      	movle	r2, r1
    f->invSampleRate = 1.0f / sampleRate;
2401214a:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30
    f->sampRatio = 48000.0f / f->sampleRate;
2401214e:	641a      	str	r2, [r3, #64]	; 0x40
24012150:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
       }
}
24012154:	4770      	bx	lr
24012156:	bf00      	nop
24012158:	473b8000 	.word	0x473b8000
2401215c:	47afc800 	.word	0x47afc800
24012160:	2401a5c8 	.word	0x2401a5c8
24012164:	2401e5c8 	.word	0x2401e5c8

24012168 <tVZFilterLS_tick>:
Lfloat   tVZFilterLS_tick               (tVZFilterLS* const vf, Lfloat input)
{
        _tVZFilterLS* f = *vf;
24012168:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
2401216a:	edd3 7a02 	vldr	s15, [r3, #8]
2401216e:	ed93 7a01 	vldr	s14, [r3, #4]
24012172:	ee30 0a67 	vsub.f32	s0, s0, s15
24012176:	ed93 5a0a 	vldr	s10, [r3, #40]	; 0x28
2401217a:	edd3 5a05 	vldr	s11, [r3, #20]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
2401217e:	edd3 6a03 	vldr	s13, [r3, #12]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
24012182:	eea5 0a47 	vfms.f32	s0, s10, s14
24012186:	edd3 4a04 	vldr	s9, [r3, #16]
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return f->G*yL + f->R2*f->G*yB + yH;
2401218a:	ed93 6a07 	vldr	s12, [r3, #28]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
2401218e:	ee20 0a25 	vmul.f32	s0, s0, s11
    yB = v1 + f->s1;
24012192:	eea6 7a80 	vfma.f32	s14, s13, s0
    yL = v2 + f->s2;
24012196:	eee6 7a87 	vfma.f32	s15, s13, s14
    f->s1 = v1 + yB; // state update in 1st integrator
2401219a:	eeb0 5a47 	vmov.f32	s10, s14
2401219e:	eea6 5a80 	vfma.f32	s10, s13, s0
    f->s2 = v2 + yL; // state update in 2nd integrator
240121a2:	eef0 5a67 	vmov.f32	s11, s15
240121a6:	eee4 7a87 	vfma.f32	s15, s9, s14
240121aa:	eee6 5a87 	vfma.f32	s11, s13, s14
    f->s1 = v1 + yB; // state update in 1st integrator
240121ae:	ed83 5a01 	vstr	s10, [r3, #4]
}
240121b2:	eea6 0a27 	vfma.f32	s0, s12, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
240121b6:	edc3 5a02 	vstr	s11, [r3, #8]
}
240121ba:	4770      	bx	lr

240121bc <tVZFilterLS_setFreqFast>:

void    tVZFilterLS_setFreqFast           (tVZFilterLS* const vf, Lfloat cutoff)
{
        _tVZFilterLS* f = *vf;
        f->cutoffMIDI = cutoff;
        cutoff *= 30.567164179104478f;
240121bc:	eddf 7a21 	vldr	s15, [pc, #132]	; 24012244 <tVZFilterLS_setFreqFast+0x88>
240121c0:	f640 7cfe 	movw	ip, #4094	; 0xffe
        if (intVer < 0)
        {
        	intVer = 0;
        }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
240121c4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
        _tVZFilterLS* f = *vf;
240121c8:	6803      	ldr	r3, [r0, #0]
        cutoff *= 30.567164179104478f;
240121ca:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
240121ce:	6c19      	ldr	r1, [r3, #64]	; 0x40
240121d0:	edd3 3a0f 	vldr	s7, [r3, #60]	; 0x3c
        int32_t intVer = (int32_t)cutoff;
240121d4:	eefd 6ae7 	vcvt.s32.f32	s13, s15
        f->cutoffMIDI = cutoff;
240121d8:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
240121dc:	ee76 5a67 	vsub.f32	s11, s12, s15

    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
240121e0:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
        int32_t intVer = (int32_t)cutoff;
240121e4:	ee16 2a90 	vmov	r2, s13
    f->R2Plusg = f->R2+f->g;
240121e8:	edd3 6a04 	vldr	s13, [r3, #16]
240121ec:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
240121f0:	4562      	cmp	r2, ip
240121f2:	bfa8      	it	ge
240121f4:	4662      	movge	r2, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
240121f6:	ee05 2a10 	vmov	s10, r2
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
240121fa:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
240121fe:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
24012202:	ed92 4a01 	vldr	s8, [r2, #4]
24012206:	edd2 4a00 	vldr	s9, [r2]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
2401220a:	ee77 7ac5 	vsub.f32	s15, s15, s10
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
2401220e:	ee75 5a85 	vadd.f32	s11, s11, s10
24012212:	ee67 7aa3 	vmul.f32	s15, s15, s7
24012216:	ee67 7a84 	vmul.f32	s15, s15, s8
2401221a:	eee4 7aa5 	vfma.f32	s15, s9, s11
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
2401221e:	ee27 7a87 	vmul.f32	s14, s15, s14
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
24012222:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
24012226:	ee77 7a26 	vadd.f32	s15, s14, s13
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
2401222a:	ed83 7a03 	vstr	s14, [r3, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
2401222e:	eef0 6a46 	vmov.f32	s13, s12
    f->R2Plusg = f->R2+f->g;
24012232:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24012236:	eee7 6a27 	vfma.f32	s13, s14, s15
2401223a:	eec6 7a26 	vdiv.f32	s15, s12, s13
2401223e:	edc3 7a05 	vstr	s15, [r3, #20]
}
24012242:	4770      	bx	lr
24012244:	41f4898d 	.word	0x41f4898d

24012248 <tVZFilterLS_setGain>:
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
}

void    tVZFilterLS_setGain                  (tVZFilterLS* const vf, Lfloat gain)
{
24012248:	b510      	push	{r4, lr}
        _tVZFilterLS* f = *vf;
2401224a:	6804      	ldr	r4, [r0, #0]
{
2401224c:	eef0 0a40 	vmov.f32	s1, s0
        f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24012250:	ed9f 1a13 	vldr	s2, [pc, #76]	; 240122a0 <tVZFilterLS_setGain+0x58>
24012254:	ed9f 0a13 	vldr	s0, [pc, #76]	; 240122a4 <tVZFilterLS_setGain+0x5c>
24012258:	f021 fb3e 	bl	240338d8 <__LEAF_clip_veneer>
2401225c:	ed84 0a07 	vstr	s0, [r4, #28]
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
24012260:	f001 fa8e 	bl	24013780 <fastsqrtf>
24012264:	f001 fa8c 	bl	24013780 <fastsqrtf>
24012268:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
2401226c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
24012270:	ed94 7a04 	vldr	s14, [r4, #16]
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
24012274:	ee86 6a80 	vdiv.f32	s12, s13, s0
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
24012278:	ee66 7a27 	vmul.f32	s15, s12, s15
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
2401227c:	ed84 6a0e 	vstr	s12, [r4, #56]	; 0x38
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24012280:	eeb0 6a66 	vmov.f32	s12, s13
    f->R2Plusg = f->R2+f->g;
24012284:	ee37 7a87 	vadd.f32	s14, s15, s14
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
24012288:	edc4 7a03 	vstr	s15, [r4, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
2401228c:	eea7 6a87 	vfma.f32	s12, s15, s14
    f->R2Plusg = f->R2+f->g;
24012290:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24012294:	eec6 7a86 	vdiv.f32	s15, s13, s12
24012298:	edc4 7a05 	vstr	s15, [r4, #20]
}
2401229c:	bd10      	pop	{r4, pc}
2401229e:	bf00      	nop
240122a0:	457a0000 	.word	0x457a0000
240122a4:	358637bd 	.word	0x358637bd

240122a8 <tVZFilterLS_setResonance>:

void    tVZFilterLS_setResonance                (tVZFilterLS* const vf, Lfloat res)
{
        _tVZFilterLS* f = *vf;
        f->Q = res;
        f->R2 = 1.0f/res;
240122a8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        _tVZFilterLS* f = *vf;
240122ac:	6803      	ldr	r3, [r0, #0]
        f->R2Plusg = f->R2+f->g;
240122ae:	edd3 6a03 	vldr	s13, [r3, #12]
        f->R2 = 1.0f/res;
240122b2:	ee87 6a80 	vdiv.f32	s12, s15, s0
        f->Q = res;
240122b6:	ed83 0a08 	vstr	s0, [r3, #32]
        f->R2Plusg = f->R2+f->g;
240122ba:	ee36 7a26 	vadd.f32	s14, s12, s13
        f->R2 = 1.0f/res;
240122be:	ed83 6a04 	vstr	s12, [r3, #16]
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
240122c2:	eeb0 6a67 	vmov.f32	s12, s15
        f->R2Plusg = f->R2+f->g;
240122c6:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
240122ca:	eea6 6a87 	vfma.f32	s12, s13, s14
240122ce:	ee87 7a86 	vdiv.f32	s14, s15, s12
240122d2:	ed83 7a05 	vstr	s14, [r3, #20]
}
240122d6:	4770      	bx	lr

240122d8 <tVZFilterHS_initToPool>:
{
    tVZFilterHS_initToPool(vf, freq, Q, gain, &leaf->mempool);
}

void    tVZFilterHS_initToPool     (tVZFilterHS* const vf, Lfloat freq, Lfloat Q, Lfloat gain, tMempool* const mp)
{
240122d8:	b570      	push	{r4, r5, r6, lr}
240122da:	ed2d 8b04 	vpush	{d8-d9}
    _tMempool* m = *mp;
240122de:	680d      	ldr	r5, [r1, #0]
{
240122e0:	b082      	sub	sp, #8
240122e2:	4606      	mov	r6, r0
    _tVZFilterHS* f = *vf = (_tVZFilterHS*) mpool_alloc(sizeof(_tVZFilterHS), m);
240122e4:	2048      	movs	r0, #72	; 0x48
240122e6:	4629      	mov	r1, r5
{
240122e8:	eeb0 8a60 	vmov.f32	s16, s1
240122ec:	eeb0 9a41 	vmov.f32	s18, s2
240122f0:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilterHS* f = *vf = (_tVZFilterHS*) mpool_alloc(sizeof(_tVZFilterHS), m);
240122f4:	f001 fe10 	bl	24013f18 <mpool_alloc>
240122f8:	6030      	str	r0, [r6, #0]
    f->mempool = m;
240122fa:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->sampleRate = leaf->sampleRate;
    f->invSampleRate = leaf->invSampleRate;
    f->sampRatio = 48000.0f / f->sampleRate;
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240122fc:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
    LEAF* leaf = f->mempool->leaf;
24012300:	686d      	ldr	r5, [r5, #4]
    _tVZFilterHS* f = *vf = (_tVZFilterHS*) mpool_alloc(sizeof(_tVZFilterHS), m);
24012302:	4604      	mov	r4, r0
    f->sampRatio = 48000.0f / f->sampleRate;
24012304:	eddf 6a36 	vldr	s13, [pc, #216]	; 240123e0 <tVZFilterHS_initToPool+0x108>
    f->cutoffMIDI = ftom(f->fc);
    f->Q    = Q;
    f->R2 =    1.0f/Q;
24012308:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    f->sampleRate = leaf->sampleRate;
2401230c:	edd5 7a00 	vldr	s15, [r5]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24012310:	eddf 9a34 	vldr	s19, [pc, #208]	; 240123e4 <tVZFilterHS_initToPool+0x10c>
    f->sampRatio = 48000.0f / f->sampleRate;
24012314:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    f->sampleRate = leaf->sampleRate;
24012318:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
    f->invSampleRate = leaf->invSampleRate;
2401231c:	686b      	ldr	r3, [r5, #4]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
2401231e:	eddd 0a01 	vldr	s1, [sp, #4]
    f->invSampleRate = leaf->invSampleRate;
24012322:	6303      	str	r3, [r0, #48]	; 0x30
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24012324:	ee27 1a81 	vmul.f32	s2, s15, s2
24012328:	eeb0 0a69 	vmov.f32	s0, s19
    f->sampRatio = 48000.0f / f->sampleRate;
2401232c:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24012330:	f021 fad2 	bl	240338d8 <__LEAF_clip_veneer>
24012334:	ed84 0a06 	vstr	s0, [r4, #24]
    f->cutoffMIDI = ftom(f->fc);
24012338:	f001 fd6a 	bl	24013e10 <ftom>
    f->R2 =    1.0f/Q;
2401233c:	ee88 7a88 	vdiv.f32	s14, s17, s16
    f->s1    = 0.0f;
    f->s2   = 0.0f;
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
24012340:	ed94 6a0c 	vldr	s12, [r4, #48]	; 0x30
24012344:	edd4 7a06 	vldr	s15, [r4, #24]
24012348:	eddf 6a27 	vldr	s13, [pc, #156]	; 240123e8 <tVZFilterHS_initToPool+0x110>
    f->cutoffMIDI = ftom(f->fc);
2401234c:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
24012350:	ee67 7a86 	vmul.f32	s15, s15, s12
    f->Q    = Q;
24012354:	ed84 8a08 	vstr	s16, [r4, #32]
    f->s1    = 0.0f;
24012358:	edc4 9a01 	vstr	s19, [r4, #4]
    f->s2   = 0.0f;
2401235c:	edc4 9a02 	vstr	s19, [r4, #8]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
24012360:	ee27 0aa6 	vmul.f32	s0, s15, s13
    f->R2 =    1.0f/Q;
24012364:	ed84 7a04 	vstr	s14, [r4, #16]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
24012368:	f006 f894 	bl	24018494 <tanf>
2401236c:	eef0 7a40 	vmov.f32	s15, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24012370:	eef0 0a49 	vmov.f32	s1, s18
24012374:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 240123ec <tVZFilterHS_initToPool+0x114>
24012378:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 240123f0 <tVZFilterHS_initToPool+0x118>
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
2401237c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24012380:	f021 faaa 	bl	240338d8 <__LEAF_clip_veneer>
24012384:	ed84 0a07 	vstr	s0, [r4, #28]
    f->sqrtA = (fastsqrtf(fastsqrtf(f->G)));
24012388:	f001 f9fa 	bl	24013780 <fastsqrtf>
2401238c:	f001 f9f8 	bl	24013780 <fastsqrtf>
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
24012390:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
24012394:	ed94 7a04 	vldr	s14, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24012398:	eeb0 6a68 	vmov.f32	s12, s17
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
2401239c:	ee60 7a27 	vmul.f32	s15, s0, s15
    if (leaf->sampleRate > 90000)
240123a0:	eddf 6a14 	vldr	s13, [pc, #80]	; 240123f4 <tVZFilterHS_initToPool+0x11c>
    f->sqrtA = (fastsqrtf(fastsqrtf(f->G)));
240123a4:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
240123a8:	4a13      	ldr	r2, [pc, #76]	; (240123f8 <tVZFilterHS_initToPool+0x120>)
    f->R2Plusg = f->R2+f->g;
240123aa:	ee37 7a87 	vadd.f32	s14, s15, s14
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
240123ae:	edc4 7a03 	vstr	s15, [r4, #12]
    	f->table = __filterTanhTable_48000;
240123b2:	4b12      	ldr	r3, [pc, #72]	; (240123fc <tVZFilterHS_initToPool+0x124>)
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
240123b4:	eea7 6a87 	vfma.f32	s12, s15, s14
    f->R2Plusg = f->R2+f->g;
240123b8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
240123bc:	eec8 7a86 	vdiv.f32	s15, s17, s12
240123c0:	edc4 7a05 	vstr	s15, [r4, #20]
    if (leaf->sampleRate > 90000)
240123c4:	edd5 7a00 	vldr	s15, [r5]
    	f->table = __filterTanhTable_48000;
240123c8:	eef4 7ae6 	vcmpe.f32	s15, s13
240123cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240123d0:	bfd8      	it	le
240123d2:	4613      	movle	r3, r2
240123d4:	6423      	str	r3, [r4, #64]	; 0x40
    }
}
240123d6:	b002      	add	sp, #8
240123d8:	ecbd 8b04 	vpop	{d8-d9}
240123dc:	bd70      	pop	{r4, r5, r6, pc}
240123de:	bf00      	nop
240123e0:	473b8000 	.word	0x473b8000
240123e4:	00000000 	.word	0x00000000
240123e8:	40490fdb 	.word	0x40490fdb
240123ec:	457a0000 	.word	0x457a0000
240123f0:	358637bd 	.word	0x358637bd
240123f4:	47afc800 	.word	0x47afc800
240123f8:	2401a5c8 	.word	0x2401a5c8
240123fc:	2401e5c8 	.word	0x2401e5c8

24012400 <tVZFilterHS_init>:
    tVZFilterHS_initToPool(vf, freq, Q, gain, &leaf->mempool);
24012400:	3118      	adds	r1, #24
24012402:	f7ff bf69 	b.w	240122d8 <tVZFilterHS_initToPool>
24012406:	bf00      	nop

24012408 <tVZFilterHS_setSampleRate>:

void    tVZFilterHS_setSampleRate  (tVZFilterHS* const vf, Lfloat sampleRate)
{
        _tVZFilterHS* f = *vf;
        f->sampleRate = sampleRate;
    f->invSampleRate = 1.0f / sampleRate;
24012408:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->sampRatio = 48000.0f / f->sampleRate;
2401240c:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 24012440 <tVZFilterHS_setSampleRate+0x38>
    if (sampleRate > 90000)
24012410:	eddf 6a0c 	vldr	s13, [pc, #48]	; 24012444 <tVZFilterHS_setSampleRate+0x3c>
          {
          	f->table = __filterTanhTable_96000;
          }
          else
          {
          	f->table = __filterTanhTable_48000;
24012414:	490c      	ldr	r1, [pc, #48]	; (24012448 <tVZFilterHS_setSampleRate+0x40>)
    f->invSampleRate = 1.0f / sampleRate;
24012416:	ee87 7a80 	vdiv.f32	s14, s15, s0
        _tVZFilterHS* f = *vf;
2401241a:	6803      	ldr	r3, [r0, #0]
          	f->table = __filterTanhTable_48000;
2401241c:	4a0b      	ldr	r2, [pc, #44]	; (2401244c <tVZFilterHS_setSampleRate+0x44>)
        f->sampleRate = sampleRate;
2401241e:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
    f->sampRatio = 48000.0f / f->sampleRate;
24012422:	eec6 7a00 	vdiv.f32	s15, s12, s0
          	f->table = __filterTanhTable_48000;
24012426:	eeb4 0ae6 	vcmpe.f32	s0, s13
2401242a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401242e:	bfd8      	it	le
24012430:	460a      	movle	r2, r1
    f->invSampleRate = 1.0f / sampleRate;
24012432:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30
    f->sampRatio = 48000.0f / f->sampleRate;
24012436:	641a      	str	r2, [r3, #64]	; 0x40
24012438:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
          }
}
2401243c:	4770      	bx	lr
2401243e:	bf00      	nop
24012440:	473b8000 	.word	0x473b8000
24012444:	47afc800 	.word	0x47afc800
24012448:	2401a5c8 	.word	0x2401a5c8
2401244c:	2401e5c8 	.word	0x2401e5c8

24012450 <tVZFilterHS_tick>:
Lfloat   tVZFilterHS_tick               (tVZFilterHS* const vf, Lfloat input)
{
        _tVZFilterHS* f = *vf;
24012450:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
24012452:	edd3 6a02 	vldr	s13, [r3, #8]
24012456:	ed93 7a01 	vldr	s14, [r3, #4]
2401245a:	ee70 7a66 	vsub.f32	s15, s0, s13
2401245e:	ed93 4a0a 	vldr	s8, [r3, #40]	; 0x28
24012462:	ed93 5a05 	vldr	s10, [r3, #20]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
24012466:	ed93 6a03 	vldr	s12, [r3, #12]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
2401246a:	eee4 7a47 	vfms.f32	s15, s8, s14
2401246e:	edd3 4a04 	vldr	s9, [r3, #16]
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return yL + f->R2*f->G*yB + f->G*yH;
24012472:	edd3 5a07 	vldr	s11, [r3, #28]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
24012476:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
2401247a:	eea6 7a27 	vfma.f32	s14, s12, s15
    yL = v2 + f->s2;
2401247e:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
24012482:	eeb0 5a47 	vmov.f32	s10, s14
24012486:	eea6 5a27 	vfma.f32	s10, s12, s15
2401248a:	eee4 7a87 	vfma.f32	s15, s9, s14
    yL = v2 + f->s2;
2401248e:	eeb0 0a66 	vmov.f32	s0, s13
    f->s2 = v2 + yL; // state update in 2nd integrator
24012492:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
24012496:	ed83 5a01 	vstr	s10, [r3, #4]
}
2401249a:	eea5 0aa7 	vfma.f32	s0, s11, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
2401249e:	edc3 6a02 	vstr	s13, [r3, #8]
}
240124a2:	4770      	bx	lr

240124a4 <tVZFilterHS_setFreqFast>:

void    tVZFilterHS_setFreqFast           (tVZFilterHS* const vf, Lfloat cutoff)
{
        _tVZFilterHS* f = *vf;
        f->cutoffMIDI = cutoff;
        cutoff *= 30.567164179104478f;
240124a4:	eddf 7a21 	vldr	s15, [pc, #132]	; 2401252c <tVZFilterHS_setFreqFast+0x88>
240124a8:	f640 7cfe 	movw	ip, #4094	; 0xffe
        if (intVer < 0)
        {
        	intVer = 0;
        }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
240124ac:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
        _tVZFilterHS* f = *vf;
240124b0:	6803      	ldr	r3, [r0, #0]
        cutoff *= 30.567164179104478f;
240124b2:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
240124b6:	6c19      	ldr	r1, [r3, #64]	; 0x40
240124b8:	edd3 3a0f 	vldr	s7, [r3, #60]	; 0x3c
        int32_t intVer = (int32_t)cutoff;
240124bc:	eefd 6ae7 	vcvt.s32.f32	s13, s15
        f->cutoffMIDI = cutoff;
240124c0:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
240124c4:	ee76 5a67 	vsub.f32	s11, s12, s15

    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
240124c8:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
        int32_t intVer = (int32_t)cutoff;
240124cc:	ee16 2a90 	vmov	r2, s13
    
    f->R2Plusg = f->R2+f->g;
240124d0:	edd3 6a04 	vldr	s13, [r3, #16]
240124d4:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
240124d8:	4562      	cmp	r2, ip
240124da:	bfa8      	it	ge
240124dc:	4662      	movge	r2, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
240124de:	ee05 2a10 	vmov	s10, r2
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
240124e2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
240124e6:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
240124ea:	ed92 4a01 	vldr	s8, [r2, #4]
240124ee:	edd2 4a00 	vldr	s9, [r2]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
240124f2:	ee77 7ac5 	vsub.f32	s15, s15, s10
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
240124f6:	ee75 5a85 	vadd.f32	s11, s11, s10
240124fa:	ee67 7aa3 	vmul.f32	s15, s15, s7
240124fe:	ee67 7a84 	vmul.f32	s15, s15, s8
24012502:	eee4 7aa5 	vfma.f32	s15, s9, s11
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
24012506:	ee27 7a87 	vmul.f32	s14, s15, s14
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
2401250a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
2401250e:	ee77 7a26 	vadd.f32	s15, s14, s13
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
24012512:	ed83 7a03 	vstr	s14, [r3, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24012516:	eef0 6a46 	vmov.f32	s13, s12
    f->R2Plusg = f->R2+f->g;
2401251a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
2401251e:	eee7 6a27 	vfma.f32	s13, s14, s15
24012522:	eec6 7a26 	vdiv.f32	s15, s12, s13
24012526:	edc3 7a05 	vstr	s15, [r3, #20]
}
2401252a:	4770      	bx	lr
2401252c:	41f4898d 	.word	0x41f4898d

24012530 <tVZFilterHS_setGain>:
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
}

void    tVZFilterHS_setGain                  (tVZFilterHS* const vf, Lfloat gain)
{
24012530:	b510      	push	{r4, lr}
        _tVZFilterHS* f = *vf;
24012532:	6804      	ldr	r4, [r0, #0]
{
24012534:	eef0 0a40 	vmov.f32	s1, s0
        f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24012538:	ed9f 1a12 	vldr	s2, [pc, #72]	; 24012584 <tVZFilterHS_setGain+0x54>
2401253c:	ed9f 0a12 	vldr	s0, [pc, #72]	; 24012588 <tVZFilterHS_setGain+0x58>
24012540:	f021 f9ca 	bl	240338d8 <__LEAF_clip_veneer>
24012544:	ed84 0a07 	vstr	s0, [r4, #28]
    f->sqrtA = fastsqrtf(fastsqrtf(f->G));
24012548:	f001 f91a 	bl	24013780 <fastsqrtf>
2401254c:	f001 f918 	bl	24013780 <fastsqrtf>
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
24012550:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24012554:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
24012558:	ed94 7a04 	vldr	s14, [r4, #16]
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
2401255c:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->sqrtA = fastsqrtf(fastsqrtf(f->G));
24012560:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24012564:	eeb0 6a66 	vmov.f32	s12, s13
    f->R2Plusg = f->R2+f->g;
24012568:	ee37 7a87 	vadd.f32	s14, s15, s14
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
2401256c:	edc4 7a03 	vstr	s15, [r4, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24012570:	eea7 6a87 	vfma.f32	s12, s15, s14
    f->R2Plusg = f->R2+f->g;
24012574:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24012578:	eec6 7a86 	vdiv.f32	s15, s13, s12
2401257c:	edc4 7a05 	vstr	s15, [r4, #20]
}
24012580:	bd10      	pop	{r4, pc}
24012582:	bf00      	nop
24012584:	457a0000 	.word	0x457a0000
24012588:	358637bd 	.word	0x358637bd

2401258c <tVZFilterHS_setResonance>:

void    tVZFilterHS_setResonance                (tVZFilterHS* const vf, Lfloat res)
{
        _tVZFilterHS* f = *vf;
        f->Q = res;
        f->R2 = 1.0f/res;
2401258c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        _tVZFilterHS* f = *vf;
24012590:	6803      	ldr	r3, [r0, #0]
        f->R2Plusg = f->R2+f->g;
24012592:	edd3 6a03 	vldr	s13, [r3, #12]
        f->R2 = 1.0f/res;
24012596:	ee87 6a80 	vdiv.f32	s12, s15, s0
        f->Q = res;
2401259a:	ed83 0a08 	vstr	s0, [r3, #32]
        f->R2Plusg = f->R2+f->g;
2401259e:	ee36 7a26 	vadd.f32	s14, s12, s13
        f->R2 = 1.0f/res;
240125a2:	ed83 6a04 	vstr	s12, [r3, #16]
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
240125a6:	eeb0 6a67 	vmov.f32	s12, s15
        f->R2Plusg = f->R2+f->g;
240125aa:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
240125ae:	eea6 6a87 	vfma.f32	s12, s13, s14
240125b2:	ee87 7a86 	vdiv.f32	s14, s15, s12
240125b6:	ed83 7a05 	vstr	s14, [r3, #20]
}
240125ba:	4770      	bx	lr

240125bc <tVZFilterBell_initToPool>:
{
    tVZFilterBell_initToPool(vf, freq, BW, gain, &leaf->mempool);
}

void    tVZFilterBell_initToPool     (tVZFilterBell* const vf, Lfloat freq, Lfloat BW, Lfloat gain, tMempool* const mp)
{
240125bc:	b570      	push	{r4, r5, r6, lr}
240125be:	ed2d 8b06 	vpush	{d8-d10}
    _tMempool* m = *mp;
240125c2:	680d      	ldr	r5, [r1, #0]
{
240125c4:	4606      	mov	r6, r0
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
240125c6:	2040      	movs	r0, #64	; 0x40
{
240125c8:	eeb0 8a40 	vmov.f32	s16, s0
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
240125cc:	4629      	mov	r1, r5
{
240125ce:	eef0 9a60 	vmov.f32	s19, s1
240125d2:	eeb0 aa41 	vmov.f32	s20, s2
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
240125d6:	f001 fc9f 	bl	24013f18 <mpool_alloc>
240125da:	6030      	str	r0, [r6, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->sampleRate = leaf->sampleRate;
    f->invSampleRate = leaf->invSampleRate;
    f->sampRatio = 48000.0f / f->sampleRate;
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240125dc:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
    f->mempool = m;
240125e0:	6005      	str	r5, [r0, #0]
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
240125e2:	4604      	mov	r4, r0
    LEAF* leaf = f->mempool->leaf;
240125e4:	686d      	ldr	r5, [r5, #4]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240125e6:	eef0 0a48 	vmov.f32	s1, s16
    f->sampRatio = 48000.0f / f->sampleRate;
240125ea:	eddf 6a48 	vldr	s13, [pc, #288]	; 2401270c <tVZFilterBell_initToPool+0x150>
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
    Lfloat r  = f->g/wl;
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
    // warped upper bandedge, wc the center
    f->rToUse = r;
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240125ee:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    f->sampleRate = leaf->sampleRate;
240125f2:	edd5 7a00 	vldr	s15, [r5]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240125f6:	ed9f 9a46 	vldr	s18, [pc, #280]	; 24012710 <tVZFilterBell_initToPool+0x154>
    f->sampRatio = 48000.0f / f->sampleRate;
240125fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    f->sampleRate = leaf->sampleRate;
240125fe:	edc0 7a0a 	vstr	s15, [r0, #40]	; 0x28
    f->invSampleRate = leaf->invSampleRate;
24012602:	686b      	ldr	r3, [r5, #4]
    f->g = tanf(PI * freq * f->invSampleRate);
24012604:	eddf aa43 	vldr	s21, [pc, #268]	; 24012714 <tVZFilterBell_initToPool+0x158>
    f->invSampleRate = leaf->invSampleRate;
24012608:	62c3      	str	r3, [r0, #44]	; 0x2c
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
2401260a:	ee27 1a81 	vmul.f32	s2, s15, s2
2401260e:	eeb0 0a49 	vmov.f32	s0, s18
    f->g = tanf(PI * freq * f->invSampleRate);
24012612:	ee28 8a2a 	vmul.f32	s16, s16, s21
    f->sampRatio = 48000.0f / f->sampleRate;
24012616:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
2401261a:	f021 f95d 	bl	240338d8 <__LEAF_clip_veneer>
2401261e:	ed84 0a06 	vstr	s0, [r4, #24]
    f->cutoffMIDI = ftom(f->fc);
24012622:	f001 fbf5 	bl	24013e10 <ftom>
24012626:	eef0 7a40 	vmov.f32	s15, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
2401262a:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 24012718 <tVZFilterBell_initToPool+0x15c>
2401262e:	eef0 0a4a 	vmov.f32	s1, s20
    f->B = BW;
24012632:	edc4 9a08 	vstr	s19, [r4, #32]
    f->cutoffMIDI = ftom(f->fc);
24012636:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
    f->s1    = 0.0f;
2401263a:	ed84 9a01 	vstr	s18, [r4, #4]
    f->s2   = 0.0f;
2401263e:	ed84 9a02 	vstr	s18, [r4, #8]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24012642:	ed9f 0a36 	vldr	s0, [pc, #216]	; 2401271c <tVZFilterBell_initToPool+0x160>
24012646:	f021 f947 	bl	240338d8 <__LEAF_clip_veneer>
    f->g = tanf(PI * freq * f->invSampleRate);
2401264a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
2401264e:	ed84 0a07 	vstr	s0, [r4, #28]
    f->g = tanf(PI * freq * f->invSampleRate);
24012652:	ee28 0a27 	vmul.f32	s0, s16, s15
24012656:	f005 ff1d 	bl	24018494 <tanf>
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
2401265a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
    f->g = tanf(PI * freq * f->invSampleRate);
2401265e:	eeb0 7a40 	vmov.f32	s14, s0
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
24012662:	edd4 0a08 	vldr	s1, [r4, #32]
24012666:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
2401266a:	ed94 8a06 	vldr	s16, [r4, #24]
2401266e:	ee60 0aa7 	vmul.f32	s1, s1, s15
    f->g = tanf(PI * freq * f->invSampleRate);
24012672:	ed84 7a03 	vstr	s14, [r4, #12]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
24012676:	f001 f909 	bl	2401388c <fastPowf>
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
2401267a:	ee20 0a2a 	vmul.f32	s0, s0, s21
2401267e:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
24012682:	ee20 0a08 	vmul.f32	s0, s0, s16
24012686:	ee20 0a27 	vmul.f32	s0, s0, s15
2401268a:	f001 f865 	bl	24013758 <fastertanf>
    Lfloat r  = f->g/wl;
2401268e:	ed94 7a03 	vldr	s14, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24012692:	eeb0 5a68 	vmov.f32	s10, s17
24012696:	edd4 6a07 	vldr	s13, [r4, #28]
    Lfloat r  = f->g/wl;
2401269a:	eec7 7a00 	vdiv.f32	s15, s14, s0
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2401269e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
240126a2:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
240126a6:	ee67 7aa7 	vmul.f32	s15, s15, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240126aa:	eea7 5aa7 	vfma.f32	s10, s15, s15
    f->rToUse = r;
240126ae:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240126b2:	ee85 7a27 	vdiv.f32	s14, s10, s15
240126b6:	ee77 7a65 	vsub.f32	s15, s14, s11
240126ba:	ee67 7a86 	vmul.f32	s15, s15, s12
240126be:	ee87 0aa6 	vdiv.f32	s0, s15, s13
240126c2:	f001 f85d 	bl	24013780 <fastsqrtf>
    f->R2Plusg = f->R2+f->g;
240126c6:	ed94 7a03 	vldr	s14, [r4, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
    if (leaf->sampleRate > 90000)
240126ca:	eddf 6a15 	vldr	s13, [pc, #84]	; 24012720 <tVZFilterBell_initToPool+0x164>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
240126ce:	4a15      	ldr	r2, [pc, #84]	; (24012724 <tVZFilterBell_initToPool+0x168>)
240126d0:	4b15      	ldr	r3, [pc, #84]	; (24012728 <tVZFilterBell_initToPool+0x16c>)
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240126d2:	ee30 0a00 	vadd.f32	s0, s0, s0
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
240126d6:	eeb0 6a68 	vmov.f32	s12, s17
    f->R2Plusg = f->R2+f->g;
240126da:	ee70 7a07 	vadd.f32	s15, s0, s14
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240126de:	ed84 0a04 	vstr	s0, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
240126e2:	eea7 6a27 	vfma.f32	s12, s14, s15
    f->R2Plusg = f->R2+f->g;
240126e6:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
240126ea:	eec8 7a86 	vdiv.f32	s15, s17, s12
240126ee:	edc4 7a05 	vstr	s15, [r4, #20]
    if (leaf->sampleRate > 90000)
240126f2:	edd5 7a00 	vldr	s15, [r5]
    	f->table = __filterTanhTable_48000;
240126f6:	eef4 7ae6 	vcmpe.f32	s15, s13
240126fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240126fe:	bfd8      	it	le
24012700:	4613      	movle	r3, r2
24012702:	63a3      	str	r3, [r4, #56]	; 0x38
    }
}
24012704:	ecbd 8b06 	vpop	{d8-d10}
24012708:	bd70      	pop	{r4, r5, r6, pc}
2401270a:	bf00      	nop
2401270c:	473b8000 	.word	0x473b8000
24012710:	00000000 	.word	0x00000000
24012714:	40490fdb 	.word	0x40490fdb
24012718:	457a0000 	.word	0x457a0000
2401271c:	358637bd 	.word	0x358637bd
24012720:	47afc800 	.word	0x47afc800
24012724:	2401a5c8 	.word	0x2401a5c8
24012728:	2401e5c8 	.word	0x2401e5c8

2401272c <tVZFilterBell_init>:
    tVZFilterBell_initToPool(vf, freq, BW, gain, &leaf->mempool);
2401272c:	3118      	adds	r1, #24
2401272e:	f7ff bf45 	b.w	240125bc <tVZFilterBell_initToPool>
24012732:	bf00      	nop

24012734 <tVZFilterBell_setSampleRate>:

void    tVZFilterBell_setSampleRate  (tVZFilterBell* const vf, Lfloat sampleRate)
{
        _tVZFilterBell* f = *vf;
        f->sampleRate = sampleRate;
    f->invSampleRate = 1.0f / sampleRate;
24012734:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->sampRatio = 48000.0f / f->sampleRate;
24012738:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 2401276c <tVZFilterBell_setSampleRate+0x38>
    if (sampleRate > 90000)
2401273c:	eddf 6a0c 	vldr	s13, [pc, #48]	; 24012770 <tVZFilterBell_setSampleRate+0x3c>
          {
          	f->table = __filterTanhTable_96000;
          }
          else
          {
          	f->table = __filterTanhTable_48000;
24012740:	490c      	ldr	r1, [pc, #48]	; (24012774 <tVZFilterBell_setSampleRate+0x40>)
    f->invSampleRate = 1.0f / sampleRate;
24012742:	ee87 7a80 	vdiv.f32	s14, s15, s0
        _tVZFilterBell* f = *vf;
24012746:	6803      	ldr	r3, [r0, #0]
          	f->table = __filterTanhTable_48000;
24012748:	4a0b      	ldr	r2, [pc, #44]	; (24012778 <tVZFilterBell_setSampleRate+0x44>)
        f->sampleRate = sampleRate;
2401274a:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    f->sampRatio = 48000.0f / f->sampleRate;
2401274e:	eec6 7a00 	vdiv.f32	s15, s12, s0
          	f->table = __filterTanhTable_48000;
24012752:	eeb4 0ae6 	vcmpe.f32	s0, s13
24012756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401275a:	bfd8      	it	le
2401275c:	460a      	movle	r2, r1
    f->invSampleRate = 1.0f / sampleRate;
2401275e:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
    f->sampRatio = 48000.0f / f->sampleRate;
24012762:	639a      	str	r2, [r3, #56]	; 0x38
24012764:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
          }
}
24012768:	4770      	bx	lr
2401276a:	bf00      	nop
2401276c:	473b8000 	.word	0x473b8000
24012770:	47afc800 	.word	0x47afc800
24012774:	2401a5c8 	.word	0x2401a5c8
24012778:	2401e5c8 	.word	0x2401e5c8

2401277c <tVZFilterBell_tick>:
Lfloat   tVZFilterBell_tick               (tVZFilterBell* const vf, Lfloat input)
{
        _tVZFilterBell* f = *vf;
2401277c:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
2401277e:	edd3 6a02 	vldr	s13, [r3, #8]
24012782:	ed93 7a01 	vldr	s14, [r3, #4]
24012786:	ee70 7a66 	vsub.f32	s15, s0, s13
2401278a:	ed93 4a09 	vldr	s8, [r3, #36]	; 0x24
2401278e:	ed93 5a05 	vldr	s10, [r3, #20]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
24012792:	ed93 6a03 	vldr	s12, [r3, #12]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
24012796:	eee4 7a47 	vfms.f32	s15, s8, s14
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return yL + f->R2*f->G*yB + yH;
2401279a:	edd3 5a04 	vldr	s11, [r3, #16]
2401279e:	edd3 4a07 	vldr	s9, [r3, #28]
240127a2:	ee65 5aa4 	vmul.f32	s11, s11, s9
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
240127a6:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
240127aa:	eea6 7a27 	vfma.f32	s14, s12, s15
    yL = v2 + f->s2;
240127ae:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
240127b2:	eeb0 5a47 	vmov.f32	s10, s14
240127b6:	eea6 5a27 	vfma.f32	s10, s12, s15
240127ba:	eee5 7a87 	vfma.f32	s15, s11, s14
    f->s2 = v2 + yL; // state update in 2nd integrator
240127be:	eef0 5a66 	vmov.f32	s11, s13
240127c2:	eee6 5a07 	vfma.f32	s11, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
240127c6:	ed83 5a01 	vstr	s10, [r3, #4]
}
240127ca:	ee36 0aa7 	vadd.f32	s0, s13, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
240127ce:	edc3 5a02 	vstr	s11, [r3, #8]
}
240127d2:	4770      	bx	lr

240127d4 <tVZFilterBell_setBandwidth>:


               
void    tVZFilterBell_setBandwidth           (tVZFilterBell* const vf, Lfloat bandWidth)
{
240127d4:	eef0 7a40 	vmov.f32	s15, s0
        _tVZFilterBell* f = *vf;
    f->B = bandWidth;
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
240127d8:	eefe 0a00 	vmov.f32	s1, #224	; 0xbf000000 -0.5
240127dc:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
{
240127e0:	b510      	push	{r4, lr}
        _tVZFilterBell* f = *vf;
240127e2:	6804      	ldr	r4, [r0, #0]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
240127e4:	ee67 0aa0 	vmul.f32	s1, s15, s1
{
240127e8:	ed2d 8b02 	vpush	{d8}
    f->B = bandWidth;
240127ec:	edc4 7a08 	vstr	s15, [r4, #32]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
240127f0:	ed94 8a06 	vldr	s16, [r4, #24]
240127f4:	f001 f84a 	bl	2401388c <fastPowf>
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
240127f8:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
240127fc:	eddf 7a17 	vldr	s15, [pc, #92]	; 2401285c <tVZFilterBell_setBandwidth+0x88>
24012800:	ee28 8a07 	vmul.f32	s16, s16, s14
24012804:	ee28 8a27 	vmul.f32	s16, s16, s15
24012808:	ee28 0a00 	vmul.f32	s0, s16, s0
2401280c:	f000 ffa4 	bl	24013758 <fastertanf>
    Lfloat r  = f->g/wl;
24012810:	edd4 6a03 	vldr	s13, [r4, #12]
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
    // warped upper bandedge, wc the center
    f->rToUse = r;
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24012814:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    Lfloat r  = f->g/wl;
24012818:	eec6 7a80 	vdiv.f32	s15, s13, s0
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2401281c:	ed94 0a07 	vldr	s0, [r4, #28]
24012820:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
24012824:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
24012828:	ee67 7aa7 	vmul.f32	s15, s15, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2401282c:	eea7 7aa7 	vfma.f32	s14, s15, s15
    f->rToUse = r;
24012830:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24012834:	eef0 6a47 	vmov.f32	s13, s14
24012838:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2401283c:	ee77 7a65 	vsub.f32	s15, s14, s11
24012840:	ee67 7a86 	vmul.f32	s15, s15, s12
24012844:	ee87 0a80 	vdiv.f32	s0, s15, s0
24012848:	f000 ff9a 	bl	24013780 <fastsqrtf>
2401284c:	ee30 0a00 	vadd.f32	s0, s0, s0
24012850:	ed84 0a04 	vstr	s0, [r4, #16]
}
24012854:	ecbd 8b02 	vpop	{d8}
24012858:	bd10      	pop	{r4, pc}
2401285a:	bf00      	nop
2401285c:	40490fdb 	.word	0x40490fdb

24012860 <tVZFilterBell_setFreq>:
void    tVZFilterBell_setFreq           (tVZFilterBell* const vf, Lfloat freq)
{
24012860:	b510      	push	{r4, lr}
24012862:	ed2d 8b02 	vpush	{d8}
24012866:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 24012914 <tVZFilterBell_setFreq+0xb4>
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
    Lfloat r  = f->g/wl;
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
    // warped upper bandedge, wc the center
    f->rToUse = r;
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2401286a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    _tVZFilterBell* f = *vf;
2401286e:	6804      	ldr	r4, [r0, #0]
    f->fc = freq;
24012870:	ee20 8a08 	vmul.f32	s16, s0, s16
    f->g = tanf(PI * freq * f->invSampleRate);
24012874:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
    f->fc = freq;
24012878:	ed84 0a06 	vstr	s0, [r4, #24]
    f->g = tanf(PI * freq * f->invSampleRate);
2401287c:	ee28 0a27 	vmul.f32	s0, s16, s15
24012880:	f005 fe08 	bl	24018494 <tanf>
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
24012884:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
    f->g = tanf(PI * freq * f->invSampleRate);
24012888:	eeb0 7a40 	vmov.f32	s14, s0
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
2401288c:	edd4 0a08 	vldr	s1, [r4, #32]
24012890:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
24012894:	ee60 0aa7 	vmul.f32	s1, s1, s15
    f->g = tanf(PI * freq * f->invSampleRate);
24012898:	ed84 7a03 	vstr	s14, [r4, #12]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
2401289c:	f000 fff6 	bl	2401388c <fastPowf>
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
240128a0:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
240128a4:	ee28 8a27 	vmul.f32	s16, s16, s15
240128a8:	ee28 0a00 	vmul.f32	s0, s16, s0
240128ac:	f000 ff54 	bl	24013758 <fastertanf>
    Lfloat r  = f->g/wl;
240128b0:	ed94 7a03 	vldr	s14, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240128b4:	eeb0 5a68 	vmov.f32	s10, s17
240128b8:	edd4 6a07 	vldr	s13, [r4, #28]
    Lfloat r  = f->g/wl;
240128bc:	eec7 7a00 	vdiv.f32	s15, s14, s0
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240128c0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
240128c4:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
240128c8:	ee67 7aa7 	vmul.f32	s15, s15, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240128cc:	eea7 5aa7 	vfma.f32	s10, s15, s15
    f->rToUse = r;
240128d0:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240128d4:	ee85 7a27 	vdiv.f32	s14, s10, s15
240128d8:	ee77 7a65 	vsub.f32	s15, s14, s11
240128dc:	ee67 7a86 	vmul.f32	s15, s15, s12
240128e0:	ee87 0aa6 	vdiv.f32	s0, s15, s13
240128e4:	f000 ff4c 	bl	24013780 <fastsqrtf>
    f->R2Plusg = f->R2+f->g;
240128e8:	ed94 7a03 	vldr	s14, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240128ec:	ee30 0a00 	vadd.f32	s0, s0, s0
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
240128f0:	eef0 6a68 	vmov.f32	s13, s17
    f->R2Plusg = f->R2+f->g;
240128f4:	ee70 7a07 	vadd.f32	s15, s0, s14
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240128f8:	ed84 0a04 	vstr	s0, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
240128fc:	eee7 6a27 	vfma.f32	s13, s14, s15
    f->R2Plusg = f->R2+f->g;
24012900:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24012904:	eec8 7aa6 	vdiv.f32	s15, s17, s13
24012908:	edc4 7a05 	vstr	s15, [r4, #20]
}
2401290c:	ecbd 8b02 	vpop	{d8}
24012910:	bd10      	pop	{r4, pc}
24012912:	bf00      	nop
24012914:	40490fdb 	.word	0x40490fdb

24012918 <tVZFilterBell_setFreqFast>:

void    tVZFilterBell_setFreqFast           (tVZFilterBell* const vf, Lfloat cutoff)
{
    _tVZFilterBell* f = *vf;
    f->cutoffMIDI = cutoff;
    cutoff *= 30.567164179104478f;
24012918:	eddf 7a43 	vldr	s15, [pc, #268]	; 24012a28 <tVZFilterBell_setFreqFast+0x110>
	{
		intVer = 0;
	}
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
2401291c:	eef9 6a08 	vmov.f32	s13, #152	; 0xc0c00000 -6.0
24012920:	f640 7cfe 	movw	ip, #4094	; 0xffe

    Lfloat r  = f->g/gLower;
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
    // warped upper bandedge, wc the center
    f->rToUse = r;
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24012924:	eeb0 4a00 	vmov.f32	s8, #0	; 0x40000000  2.0
    cutoff *= 30.567164179104478f;
24012928:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2401292c:	eef5 4a00 	vmov.f32	s9, #80	; 0x3e800000  0.250
	int32_t intVer = (int32_t)cutoff;
24012930:	eebd 7ae7 	vcvt.s32.f32	s14, s15
{
24012934:	b510      	push	{r4, lr}
    _tVZFilterBell* f = *vf;
24012936:	6804      	ldr	r4, [r0, #0]
	int32_t intVer = (int32_t)cutoff;
24012938:	ee17 3a10 	vmov	r3, s14
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
2401293c:	eeb0 7a67 	vmov.f32	s14, s15
24012940:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
{
24012944:	ed2d 8b02 	vpush	{d8}
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
24012948:	ed94 6a08 	vldr	s12, [r4, #32]
2401294c:	4563      	cmp	r3, ip
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
2401294e:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
24012952:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
24012954:	eea6 7a26 	vfma.f32	s14, s12, s13
24012958:	bfa8      	it	ge
2401295a:	4663      	movge	r3, ip
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
2401295c:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24012960:	ee05 3a10 	vmov	s10, r3
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
24012964:	ee38 6a67 	vsub.f32	s12, s16, s15
24012968:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    f->cutoffMIDI = cutoff;
2401296c:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24012970:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24012974:	ed94 0a07 	vldr	s0, [r4, #28]
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
24012978:	ed93 3a01 	vldr	s6, [r3, #4]
	intVer = (int32_t)fl;
2401297c:	eefd 6ac7 	vcvt.s32.f32	s13, s14
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
24012980:	edd3 3a00 	vldr	s7, [r3]
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24012984:	ee77 7ac5 	vsub.f32	s15, s15, s10
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
24012988:	ee36 6a05 	vadd.f32	s12, s12, s10
	intVer = (int32_t)fl;
2401298c:	ee16 2a90 	vmov	r2, s13
	Lfloat gLower = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
24012990:	ee78 6a47 	vsub.f32	s13, s16, s14
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
24012994:	ee67 7aa5 	vmul.f32	s15, s15, s11
24012998:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
2401299c:	4562      	cmp	r2, ip
2401299e:	ee67 7a83 	vmul.f32	s15, s15, s6
240129a2:	bfa8      	it	ge
240129a4:	4662      	movge	r2, ip
240129a6:	eee3 7a86 	vfma.f32	s15, s7, s12
	LfloatVer = fl - (Lfloat)intVer;
240129aa:	ee05 2a10 	vmov	s10, r2
	Lfloat gLower = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
240129ae:	eb01 0382 	add.w	r3, r1, r2, lsl #2
	LfloatVer = fl - (Lfloat)intVer;
240129b2:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
240129b6:	ee37 7a45 	vsub.f32	s14, s14, s10
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
240129ba:	edc4 7a03 	vstr	s15, [r4, #12]
	Lfloat gLower = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
240129be:	ee76 6a85 	vadd.f32	s13, s13, s10
240129c2:	ed93 6a00 	vldr	s12, [r3]
240129c6:	ee27 7a25 	vmul.f32	s14, s14, s11
240129ca:	edd3 5a01 	vldr	s11, [r3, #4]
240129ce:	ee27 7a25 	vmul.f32	s14, s14, s11
240129d2:	eea6 7a26 	vfma.f32	s14, s12, s13
    Lfloat r  = f->g/gLower;
240129d6:	eec7 6a87 	vdiv.f32	s13, s15, s14
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
240129da:	ee66 7aa6 	vmul.f32	s15, s13, s13
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240129de:	eef0 6a48 	vmov.f32	s13, s16
    f->rToUse = r;
240129e2:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240129e6:	eee7 6aa7 	vfma.f32	s13, s15, s15
240129ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240129ee:	ee77 7a44 	vsub.f32	s15, s14, s8
240129f2:	ee67 7aa4 	vmul.f32	s15, s15, s9
240129f6:	ee87 0a80 	vdiv.f32	s0, s15, s0
240129fa:	f000 fec1 	bl	24013780 <fastsqrtf>
    f->R2Plusg = f->R2+f->g;
240129fe:	ed94 7a03 	vldr	s14, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24012a02:	ee30 0a00 	vadd.f32	s0, s0, s0
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24012a06:	eef0 6a48 	vmov.f32	s13, s16
    f->R2Plusg = f->R2+f->g;
24012a0a:	ee70 7a07 	vadd.f32	s15, s0, s14
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24012a0e:	ed84 0a04 	vstr	s0, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24012a12:	eee7 6a27 	vfma.f32	s13, s14, s15
    f->R2Plusg = f->R2+f->g;
24012a16:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24012a1a:	eec8 7a26 	vdiv.f32	s15, s16, s13
24012a1e:	edc4 7a05 	vstr	s15, [r4, #20]
}
24012a22:	ecbd 8b02 	vpop	{d8}
24012a26:	bd10      	pop	{r4, pc}
24012a28:	41f4898d 	.word	0x41f4898d

24012a2c <tVZFilterBell_setGain>:

void    tVZFilterBell_setGain                  (tVZFilterBell* const vf, Lfloat gain)
{
24012a2c:	b510      	push	{r4, lr}
24012a2e:	ed2d 8b02 	vpush	{d8}
    _tVZFilterBell* f = *vf;
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
24012a32:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    _tVZFilterBell* f = *vf;
24012a36:	6804      	ldr	r4, [r0, #0]
{
24012a38:	eef0 0a40 	vmov.f32	s1, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24012a3c:	ed9f 1a18 	vldr	s2, [pc, #96]	; 24012aa0 <tVZFilterBell_setGain+0x74>
24012a40:	ed9f 0a18 	vldr	s0, [pc, #96]	; 24012aa4 <tVZFilterBell_setGain+0x78>
24012a44:	f020 ff48 	bl	240338d8 <__LEAF_clip_veneer>
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
24012a48:	eef0 5a48 	vmov.f32	s11, s16
24012a4c:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
24012a50:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
24012a54:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24012a58:	ed84 0a07 	vstr	s0, [r4, #28]
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
24012a5c:	eee7 5a07 	vfma.f32	s11, s14, s14
24012a60:	eec5 7a87 	vdiv.f32	s15, s11, s14
24012a64:	ee77 7ac6 	vsub.f32	s15, s15, s12
24012a68:	ee67 7aa6 	vmul.f32	s15, s15, s13
24012a6c:	ee87 0a80 	vdiv.f32	s0, s15, s0
24012a70:	f000 fe86 	bl	24013780 <fastsqrtf>
    f->R2Plusg = f->R2+f->g;
24012a74:	ed94 7a03 	vldr	s14, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
24012a78:	ee30 0a00 	vadd.f32	s0, s0, s0
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24012a7c:	eef0 6a48 	vmov.f32	s13, s16
    f->R2Plusg = f->R2+f->g;
24012a80:	ee70 7a07 	vadd.f32	s15, s0, s14
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
24012a84:	ed84 0a04 	vstr	s0, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24012a88:	eee7 6a27 	vfma.f32	s13, s14, s15
    f->R2Plusg = f->R2+f->g;
24012a8c:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24012a90:	eec8 7a26 	vdiv.f32	s15, s16, s13
24012a94:	edc4 7a05 	vstr	s15, [r4, #20]
}
24012a98:	ecbd 8b02 	vpop	{d8}
24012a9c:	bd10      	pop	{r4, pc}
24012a9e:	bf00      	nop
24012aa0:	457a0000 	.word	0x457a0000
24012aa4:	358637bd 	.word	0x358637bd

24012aa8 <tDiodeFilter_init>:

//taken from Ivan C's model of the EMS diode ladder, based on mystran's code from KVR forums
//https://www.kvraudio.com/forum/viewtopic.php?f=33&t=349859&start=255

void    tDiodeFilter_init           (tDiodeFilter* const vf, Lfloat cutoff, Lfloat resonance, LEAF* const leaf)
{
24012aa8:	b570      	push	{r4, r5, r6, lr}
24012aaa:	ed2d 8b02 	vpush	{d8}
    tDiodeFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tDiodeFilter_initToPool     (tDiodeFilter* const vf, Lfloat cutoff, Lfloat resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
24012aae:	698d      	ldr	r5, [r1, #24]
{
24012ab0:	eeb0 8a40 	vmov.f32	s16, s0
24012ab4:	4606      	mov	r6, r0
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
24012ab6:	2048      	movs	r0, #72	; 0x48
24012ab8:	4629      	mov	r1, r5
{
24012aba:	eef0 8a60 	vmov.f32	s17, s1
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
24012abe:	f001 fa2b 	bl	24013f18 <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    // initialization (the resonance factor is between 0 and 8 according to the article)
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
24012ac2:	ed9f 0a27 	vldr	s0, [pc, #156]	; 24012b60 <tDiodeFilter_init+0xb8>
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
24012ac6:	6030      	str	r0, [r6, #0]
24012ac8:	4604      	mov	r4, r0
    f->mempool = m;
24012aca:	6005      	str	r5, [r0, #0]
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
24012acc:	ee28 0a00 	vmul.f32	s0, s16, s0
    LEAF* leaf = f->mempool->leaf;
24012ad0:	686d      	ldr	r5, [r5, #4]
    f->invSampleRate = leaf->invSampleRate;
24012ad2:	edd5 7a01 	vldr	s15, [r5, #4]
    f->cutoff = cutoff;
24012ad6:	ed80 8a01 	vstr	s16, [r0, #4]
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
24012ada:	ee20 0a27 	vmul.f32	s0, s0, s15
    f->invSampleRate = leaf->invSampleRate;
24012ade:	edc0 7a0f 	vstr	s15, [r0, #60]	; 0x3c
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
24012ae2:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
24012ae6:	f005 fd6b 	bl	240185c0 <tan>
24012aea:	eef7 7bc0 	vcvt.f32.f64	s15, d0
    f->cutoffMIDI = ftom(cutoff);
24012aee:	eeb0 0a48 	vmov.f32	s0, s16
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
24012af2:	edc4 7a02 	vstr	s15, [r4, #8]
    f->cutoffMIDI = ftom(cutoff);
24012af6:	f001 f98b 	bl	24013e10 <ftom>
    f->r = (7.f * resonance + 0.5f);
24012afa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24012afe:	eeb1 6a0c 	vmov.f32	s12, #28	; 0x40e00000  7.0
    f->Vt = 0.5f;
    f->n = 1.836f;
24012b02:	4b18      	ldr	r3, [pc, #96]	; (24012b64 <tDiodeFilter_init+0xbc>)
    f->gamma = f->Vt*f->n;
    f->s0 = 0.01f;
    f->s1 = 0.02f;
    f->s2 = 0.03f;
    f->s3 = 0.04f;
    f->g0inv = 1.f/(2.f*f->Vt);
24012b04:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->zi = 0.0f; //previous input value
24012b08:	2100      	movs	r1, #0
    f->r = (7.f * resonance + 0.5f);
24012b0a:	eef0 6a67 	vmov.f32	s13, s15
    f->n = 1.836f;
24012b0e:	6163      	str	r3, [r4, #20]
    f->gamma = f->Vt*f->n;
24012b10:	4b15      	ldr	r3, [pc, #84]	; (24012b68 <tDiodeFilter_init+0xc0>)
    f->zi = 0.0f; //previous input value
24012b12:	61e1      	str	r1, [r4, #28]
    f->r = (7.f * resonance + 0.5f);
24012b14:	eee8 6a86 	vfma.f32	s13, s17, s12
    f->g0inv = 1.f/(2.f*f->Vt);
24012b18:	6222      	str	r2, [r4, #32]
    f->gamma = f->Vt*f->n;
24012b1a:	61a3      	str	r3, [r4, #24]
    f->g1inv = 1.f/(2.f*f->gamma);
24012b1c:	4913      	ldr	r1, [pc, #76]	; (24012b6c <tDiodeFilter_init+0xc4>)
    f->g2inv = 1.f/(6.f*f->gamma);
24012b1e:	4a14      	ldr	r2, [pc, #80]	; (24012b70 <tDiodeFilter_init+0xc8>)
    f->s0 = 0.01f;
24012b20:	4b14      	ldr	r3, [pc, #80]	; (24012b74 <tDiodeFilter_init+0xcc>)
    f->g1inv = 1.f/(2.f*f->gamma);
24012b22:	6261      	str	r1, [r4, #36]	; 0x24
    f->g2inv = 1.f/(6.f*f->gamma);
24012b24:	62a2      	str	r2, [r4, #40]	; 0x28
    f->s0 = 0.01f;
24012b26:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->s2 = 0.03f;
24012b28:	4a13      	ldr	r2, [pc, #76]	; (24012b78 <tDiodeFilter_init+0xd0>)
    f->s3 = 0.04f;
24012b2a:	4b14      	ldr	r3, [pc, #80]	; (24012b7c <tDiodeFilter_init+0xd4>)
    f->s1 = 0.02f;
24012b2c:	4914      	ldr	r1, [pc, #80]	; (24012b80 <tDiodeFilter_init+0xd8>)
    f->s2 = 0.03f;
24012b2e:	6362      	str	r2, [r4, #52]	; 0x34
    f->s3 = 0.04f;
24012b30:	63a3      	str	r3, [r4, #56]	; 0x38
    f->cutoffMIDI = ftom(cutoff);
24012b32:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    f->Vt = 0.5f;
24012b36:	edc4 7a04 	vstr	s15, [r4, #16]
    f->r = (7.f * resonance + 0.5f);
24012b3a:	edc4 6a03 	vstr	s13, [r4, #12]
    f->s1 = 0.02f;
24012b3e:	6321      	str	r1, [r4, #48]	; 0x30
    if (leaf->sampleRate > 90000)
24012b40:	ed9f 7a10 	vldr	s14, [pc, #64]	; 24012b84 <tDiodeFilter_init+0xdc>
24012b44:	edd5 7a00 	vldr	s15, [r5]
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
24012b48:	4a0f      	ldr	r2, [pc, #60]	; (24012b88 <tDiodeFilter_init+0xe0>)
24012b4a:	eef4 7ac7 	vcmpe.f32	s15, s14
24012b4e:	4b0f      	ldr	r3, [pc, #60]	; (24012b8c <tDiodeFilter_init+0xe4>)
24012b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012b54:	bfd8      	it	le
24012b56:	4613      	movle	r3, r2
24012b58:	6423      	str	r3, [r4, #64]	; 0x40
}
24012b5a:	ecbd 8b02 	vpop	{d8}
24012b5e:	bd70      	pop	{r4, r5, r6, pc}
24012b60:	40490fdb 	.word	0x40490fdb
24012b64:	3feb020c 	.word	0x3feb020c
24012b68:	3f6b020c 	.word	0x3f6b020c
24012b6c:	3f0b6efd 	.word	0x3f0b6efd
24012b70:	3e39e952 	.word	0x3e39e952
24012b74:	3c23d70a 	.word	0x3c23d70a
24012b78:	3cf5c28f 	.word	0x3cf5c28f
24012b7c:	3d23d70a 	.word	0x3d23d70a
24012b80:	3ca3d70a 	.word	0x3ca3d70a
24012b84:	47afc800 	.word	0x47afc800
24012b88:	2401a5c8 	.word	0x2401a5c8
24012b8c:	2401e5c8 	.word	0x2401e5c8

24012b90 <tDiodeFilter_tick>:

volatile int errorCheckCheck = 0;
//#define SAFE_FILTER
Lfloat   tDiodeFilter_tick               (tDiodeFilter* const vf, Lfloat in)
{
    _tDiodeFilter* f = *vf;
24012b90:	6803      	ldr	r3, [r0, #0]
{
24012b92:	eeb0 4a40 	vmov.f32	s8, s0
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    Lfloat ih = 0.5f * (in + f->zi);
    
    // evaluate the non-linear factors
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24012b96:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012b9a:	eddf 6add 	vldr	s13, [pc, #884]	; 24012f10 <tDiodeFilter_tick+0x380>
24012b9e:	eef2 4a0e 	vmov.f32	s9, #46	; 0x41700000  15.0
    if (testVal!= 0.0f)
24012ba2:	eddf 5adc 	vldr	s11, [pc, #880]	; 24012f14 <tDiodeFilter_tick+0x384>
{
24012ba6:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24012baa:	ed93 0a03 	vldr	s0, [r3, #12]
24012bae:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
    Lfloat ih = 0.5f * (in + f->zi);
24012bb2:	ed93 6a07 	vldr	s12, [r3, #28]
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24012bb6:	ee67 7a40 	vnmul.f32	s15, s14, s0
24012bba:	ed93 5a08 	vldr	s10, [r3, #32]
    Lfloat ih = 0.5f * (in + f->zi);
24012bbe:	ee34 6a06 	vadd.f32	s12, s8, s12
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24012bc2:	edd3 1a02 	vldr	s3, [r3, #8]
24012bc6:	eee6 7a23 	vfma.f32	s15, s12, s7
24012bca:	ee67 7a85 	vmul.f32	s15, s15, s10
    Lfloat a = x*x;
24012bce:	ee67 7aa7 	vmul.f32	s15, s15, s15
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012bd2:	eee7 6aa4 	vfma.f32	s13, s15, s9
24012bd6:	ee67 6aa6 	vmul.f32	s13, s15, s13
    if (testVal!= 0.0f)
24012bda:	eef4 6a65 	vcmp.f32	s13, s11
24012bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012be2:	f000 8187 	beq.w	24012ef4 <tDiodeFilter_tick+0x364>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012be6:	ed9f 6acc 	vldr	s12, [pc, #816]	; 24012f18 <tDiodeFilter_tick+0x388>
24012bea:	ee76 5a86 	vadd.f32	s11, s13, s12
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24012bee:	edd3 3a0c 	vldr	s7, [r3, #48]	; 0x30
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012bf2:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24012bf6:	ed93 3a0b 	vldr	s6, [r3, #44]	; 0x2c
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24012bfa:	ee21 5a85 	vmul.f32	s10, s3, s10
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24012bfe:	ed93 2a09 	vldr	s4, [r3, #36]	; 0x24
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
    
    // This formula gives the result for y3 thanks to MATLAB
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24012c02:	eeb0 9a08 	vmov.f32	s18, #8	; 0x40400000  3.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24012c06:	ee73 6ac3 	vsub.f32	s13, s7, s6
    return ((a + 105.0f)*a + 945.0f) / output;
24012c0a:	ed9f 1ac3 	vldr	s2, [pc, #780]	; 24012f18 <tDiodeFilter_tick+0x388>
24012c0e:	eddf 4ac3 	vldr	s9, [pc, #780]	; 24012f1c <tDiodeFilter_tick+0x38c>
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012c12:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
24012c16:	eeb0 8a41 	vmov.f32	s16, s2
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012c1a:	ed9f 6abd 	vldr	s12, [pc, #756]	; 24012f10 <tDiodeFilter_tick+0x380>
    return ((a + 105.0f)*a + 945.0f) / output;
24012c1e:	ee77 4aa4 	vadd.f32	s9, s15, s9
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24012c22:	ee66 6a82 	vmul.f32	s13, s13, s4
    return ((a + 105.0f)*a + 945.0f) / output;
24012c26:	eea7 8aa4 	vfma.f32	s16, s15, s9
    if (testVal!= 0.0f)
24012c2a:	eddf 4aba 	vldr	s9, [pc, #744]	; 24012f14 <tDiodeFilter_tick+0x384>
    Lfloat a = x*x;
24012c2e:	ee66 6aa6 	vmul.f32	s13, s13, s13
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012c32:	eef0 7a46 	vmov.f32	s15, s12
24012c36:	ed9f 6ab6 	vldr	s12, [pc, #728]	; 24012f10 <tDiodeFilter_tick+0x380>
24012c3a:	eee6 7aa0 	vfma.f32	s15, s13, s1
    return ((a + 105.0f)*a + 945.0f) / output;
24012c3e:	eddf 0ab6 	vldr	s1, [pc, #728]	; 24012f18 <tDiodeFilter_tick+0x388>
24012c42:	eec8 2a25 	vdiv.f32	s5, s16, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012c46:	ee66 7aa7 	vmul.f32	s15, s13, s15
24012c4a:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
    return ((a + 105.0f)*a + 945.0f) / output;
24012c4e:	eef0 8a60 	vmov.f32	s17, s1
    if (testVal!= 0.0f)
24012c52:	eef4 7a64 	vcmp.f32	s15, s9
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24012c56:	edd3 4a0d 	vldr	s9, [r3, #52]	; 0x34
    if (testVal!= 0.0f)
24012c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012c5e:	bf18      	it	ne
24012c60:	ee77 5a81 	vaddne.f32	s11, s15, s2
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24012c64:	ee74 7ae3 	vsub.f32	s15, s9, s7
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24012c68:	ee62 2a85 	vmul.f32	s5, s5, s10
    return ((a + 105.0f)*a + 945.0f) / output;
24012c6c:	ed9f 5aab 	vldr	s10, [pc, #684]	; 24012f1c <tDiodeFilter_tick+0x38c>
    Lfloat output = 1.0f;
24012c70:	bf08      	it	eq
24012c72:	eef7 5a00 	vmoveq.f32	s11, #112	; 0x3f800000  1.0
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24012c76:	ee67 7a82 	vmul.f32	s15, s15, s4
    return ((a + 105.0f)*a + 945.0f) / output;
24012c7a:	ee36 5a85 	vadd.f32	s10, s13, s10
24012c7e:	ee21 1a82 	vmul.f32	s2, s3, s4
    Lfloat a = x*x;
24012c82:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return ((a + 105.0f)*a + 945.0f) / output;
24012c86:	eee6 8a85 	vfma.f32	s17, s13, s10
24012c8a:	ed9f 5aa4 	vldr	s10, [pc, #656]	; 24012f1c <tDiodeFilter_tick+0x38c>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012c8e:	eea7 6a88 	vfma.f32	s12, s15, s16
    return ((a + 105.0f)*a + 945.0f) / output;
24012c92:	ee37 5a85 	vadd.f32	s10, s15, s10
24012c96:	eec8 6aa5 	vdiv.f32	s13, s17, s11
    if (testVal!= 0.0f)
24012c9a:	eddf 5a9e 	vldr	s11, [pc, #632]	; 24012f14 <tDiodeFilter_tick+0x384>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012c9e:	ee27 6a86 	vmul.f32	s12, s15, s12
    if (testVal!= 0.0f)
24012ca2:	eeb4 6a65 	vcmp.f32	s12, s11
24012ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012caa:	bf18      	it	ne
24012cac:	ee76 5a20 	vaddne.f32	s11, s12, s1
    return ((a + 105.0f)*a + 945.0f) / output;
24012cb0:	eddf 0a99 	vldr	s1, [pc, #612]	; 24012f18 <tDiodeFilter_tick+0x388>
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
24012cb4:	ee37 6a64 	vsub.f32	s12, s14, s9
    return ((a + 105.0f)*a + 945.0f) / output;
24012cb8:	eeb0 8a60 	vmov.f32	s16, s1
    Lfloat output = 1.0f;
24012cbc:	bf08      	it	eq
24012cbe:	eef7 5a00 	vmoveq.f32	s11, #112	; 0x3f800000  1.0
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
24012cc2:	ee26 6a02 	vmul.f32	s12, s12, s4
    return ((a + 105.0f)*a + 945.0f) / output;
24012cc6:	eea7 8a85 	vfma.f32	s16, s15, s10
    if (testVal!= 0.0f)
24012cca:	ed9f 5a92 	vldr	s10, [pc, #584]	; 24012f14 <tDiodeFilter_tick+0x384>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012cce:	eeb2 2a0e 	vmov.f32	s4, #46	; 0x41700000  15.0
    Lfloat a = x*x;
24012cd2:	ee26 6a06 	vmul.f32	s12, s12, s12
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24012cd6:	ee66 6a81 	vmul.f32	s13, s13, s2
    return ((a + 105.0f)*a + 945.0f) / output;
24012cda:	eec8 7a25 	vdiv.f32	s15, s16, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012cde:	eddf 5a8c 	vldr	s11, [pc, #560]	; 24012f10 <tDiodeFilter_tick+0x380>
24012ce2:	eee6 5a02 	vfma.f32	s11, s12, s4
    return ((a + 105.0f)*a + 945.0f) / output;
24012ce6:	ed9f 2a8c 	vldr	s4, [pc, #560]	; 24012f18 <tDiodeFilter_tick+0x388>
24012cea:	eeb0 8a42 	vmov.f32	s16, s4
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012cee:	ee66 5a25 	vmul.f32	s11, s12, s11
    if (testVal!= 0.0f)
24012cf2:	eef4 5a45 	vcmp.f32	s11, s10
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24012cf6:	ee67 7a81 	vmul.f32	s15, s15, s2
    if (testVal!= 0.0f)
24012cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012cfe:	bf18      	it	ne
24012d00:	ee35 5aa0 	vaddne.f32	s10, s11, s1
    return ((a + 105.0f)*a + 945.0f) / output;
24012d04:	eddf 5a85 	vldr	s11, [pc, #532]	; 24012f1c <tDiodeFilter_tick+0x38c>
    Lfloat output = 1.0f;
24012d08:	bf08      	it	eq
24012d0a:	eeb7 5a00 	vmoveq.f32	s10, #112	; 0x3f800000  1.0
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24012d0e:	edd3 0a0a 	vldr	s1, [r3, #40]	; 0x28
    return ((a + 105.0f)*a + 945.0f) / output;
24012d12:	ee76 5a25 	vadd.f32	s11, s12, s11
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24012d16:	ee61 1aa0 	vmul.f32	s3, s3, s1
    return ((a + 105.0f)*a + 945.0f) / output;
24012d1a:	eea6 8a25 	vfma.f32	s16, s12, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012d1e:	ed9f 6a7c 	vldr	s12, [pc, #496]	; 24012f10 <tDiodeFilter_tick+0x380>
    return ((a + 105.0f)*a + 945.0f) / output;
24012d22:	eec8 5a05 	vdiv.f32	s11, s16, s10
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24012d26:	ee27 5a20 	vmul.f32	s10, s14, s1
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012d2a:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
24012d2e:	ee77 0a23 	vadd.f32	s1, s14, s7
    Lfloat a = x*x;
24012d32:	ee25 5a05 	vmul.f32	s10, s10, s10
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012d36:	eea5 6a08 	vfma.f32	s12, s10, s16
    return ((a + 105.0f)*a + 945.0f) / output;
24012d3a:	ed9f 8a77 	vldr	s16, [pc, #476]	; 24012f18 <tDiodeFilter_tick+0x388>
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
24012d3e:	ee65 5a81 	vmul.f32	s11, s11, s2
    if (testVal!= 0.0f)
24012d42:	ed9f 1a74 	vldr	s2, [pc, #464]	; 24012f14 <tDiodeFilter_tick+0x384>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012d46:	ee26 6a05 	vmul.f32	s12, s12, s10
    if (testVal!= 0.0f)
24012d4a:	eeb4 6a41 	vcmp.f32	s12, s2
    return ((a + 105.0f)*a + 945.0f) / output;
24012d4e:	ed9f 1a73 	vldr	s2, [pc, #460]	; 24012f1c <tDiodeFilter_tick+0x38c>
24012d52:	ee35 1a01 	vadd.f32	s2, s10, s2
    if (testVal!= 0.0f)
24012d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    return ((a + 105.0f)*a + 945.0f) / output;
24012d5a:	eea5 8a01 	vfma.f32	s16, s10, s2
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012d5e:	bf14      	ite	ne
24012d60:	ee36 2a02 	vaddne.f32	s4, s12, s4
    Lfloat output = 1.0f;
24012d64:	eeb7 2a00 	vmoveq.f32	s4, #112	; 0x3f800000  1.0
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24012d68:	ee37 6a24 	vadd.f32	s12, s14, s9
24012d6c:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
    return ((a + 105.0f)*a + 945.0f) / output;
24012d70:	ee88 5a02 	vdiv.f32	s10, s16, s4
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24012d74:	ee33 2a24 	vadd.f32	s4, s6, s9
24012d78:	ee34 8aa0 	vadd.f32	s16, s9, s1
24012d7c:	ee32 2a20 	vadd.f32	s4, s4, s1
24012d80:	eef0 0a48 	vmov.f32	s1, s16
24012d84:	eea4 2a22 	vfma.f32	s4, s8, s5
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24012d88:	ee25 5a21 	vmul.f32	s10, s10, s3
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24012d8c:	eee2 0a26 	vfma.f32	s1, s4, s13
24012d90:	ee36 2a06 	vadd.f32	s4, s12, s12
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012d94:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
24012d98:	ee75 8a09 	vadd.f32	s17, s10, s18
24012d9c:	eea6 6a82 	vfma.f32	s12, s13, s4
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24012da0:	ee27 2a26 	vmul.f32	s4, s14, s13
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012da4:	ee35 8a29 	vadd.f32	s16, s10, s19
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24012da8:	eea0 6aa7 	vfma.f32	s12, s1, s15
24012dac:	eef0 0a47 	vmov.f32	s1, s14
24012db0:	eee2 0a01 	vfma.f32	s1, s4, s2
24012db4:	ee22 2a09 	vmul.f32	s4, s4, s18
24012db8:	eea7 2a01 	vfma.f32	s4, s14, s2
24012dbc:	eee2 0a27 	vfma.f32	s1, s4, s15
24012dc0:	eeb0 2a60 	vmov.f32	s4, s1
24012dc4:	eef0 0a61 	vmov.f32	s1, s3
24012dc8:	eea6 2a25 	vfma.f32	s4, s12, s11
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012dcc:	eee0 0a22 	vfma.f32	s1, s0, s5
24012dd0:	eeb0 6a61 	vmov.f32	s12, s3
24012dd4:	eea5 6a01 	vfma.f32	s12, s10, s2
24012dd8:	ee75 1a20 	vadd.f32	s3, s10, s1
24012ddc:	eef0 0a41 	vmov.f32	s1, s2
24012de0:	eee1 8aa6 	vfma.f32	s17, s3, s13
24012de4:	ee75 1a01 	vadd.f32	s3, s10, s2
24012de8:	eee5 0a01 	vfma.f32	s1, s10, s2
24012dec:	eee6 1a26 	vfma.f32	s3, s12, s13
24012df0:	eeb0 6a45 	vmov.f32	s12, s10
24012df4:	eee8 1aa7 	vfma.f32	s3, s17, s15
24012df8:	ee68 8a26 	vmul.f32	s17, s16, s13
24012dfc:	eea8 6a81 	vfma.f32	s12, s17, s2
24012e00:	eee8 0a89 	vfma.f32	s1, s17, s18
24012e04:	eea0 6aa7 	vfma.f32	s12, s1, s15
24012e08:	eea1 6aa5 	vfma.f32	s12, s3, s11
    if (isnan(tempy3denom))
    {
        errorCheck = 2;
    }
#endif
    if (tempy3denom == 0.0f)
24012e0c:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
24012e10:	eeb4 6a61 	vcmp.f32	s12, s3
24012e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
24012e18:	eef5 6a40 	vcmp.f32	s13, #0.0
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012e1c:	bf14      	ite	ne
24012e1e:	ee36 6a29 	vaddne.f32	s12, s12, s19
        tempy3denom = 0.000001f;
24012e22:	ed9f 6a3f 	vldreq	s12, [pc, #252]	; 24012f20 <tDiodeFilter_tick+0x390>
    if (t1 == 0.0f)
24012e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
24012e2a:	ee82 1a06 	vdiv.f32	s2, s4, s12
    if (t1 == 0.0f)
24012e2e:	d069      	beq.n	24012f04 <tDiodeFilter_tick+0x374>
24012e30:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24012e34:	ee76 0aa0 	vadd.f32	s1, s13, s1
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
24012e38:	eef5 7a40 	vcmp.f32	s15, #0.0
24012e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012e40:	d05b      	beq.n	24012efa <tDiodeFilter_tick+0x36a>
24012e42:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
24012e46:	ee37 2a82 	vadd.f32	s4, s15, s4
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
24012e4a:	eef5 5a40 	vcmp.f32	s11, #0.0
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
    
    f->zi = in;
24012e4e:	ed83 4a07 	vstr	s8, [r3, #28]
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24012e52:	eeb0 9a47 	vmov.f32	s18, s14
24012e56:	eef0 8a64 	vmov.f32	s17, s9
    if (t3 == 0.0f)
24012e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
24012e5e:	ee77 0aa0 	vadd.f32	s1, s15, s1
    Lfloat xx = (in - f->r*y3);
24012e62:	ee20 0a01 	vmul.f32	s0, s0, s2
        t3 = 0.000001f;
24012e66:	bf08      	it	eq
24012e68:	eddf 5a2d 	vldreq	s11, [pc, #180]	; 24012f20 <tDiodeFilter_tick+0x390>
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24012e6c:	ee38 8a25 	vadd.f32	s16, s16, s11
24012e70:	eee5 8a81 	vfma.f32	s17, s11, s2
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
24012e74:	ee35 2a82 	vadd.f32	s4, s11, s4
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24012e78:	ee98 9a01 	vfnms.f32	s18, s16, s2
24012e7c:	eeb0 8a63 	vmov.f32	s16, s7
    Lfloat xx = (in - f->r*y3);
24012e80:	ee74 1a40 	vsub.f32	s3, s8, s0
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24012e84:	ee89 6a25 	vdiv.f32	s12, s18, s11
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
24012e88:	eed2 8a06 	vfnms.f32	s17, s4, s12
24012e8c:	eea7 8a86 	vfma.f32	s16, s15, s12
24012e90:	ee88 2aa7 	vdiv.f32	s4, s17, s15
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
24012e94:	ee90 8a82 	vfnms.f32	s16, s1, s4
24012e98:	ee88 4a26 	vdiv.f32	s8, s16, s13
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24012e9c:	ee32 4a44 	vsub.f32	s8, s4, s8
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24012ea0:	ee36 2a42 	vsub.f32	s4, s12, s4
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24012ea4:	ee31 6a46 	vsub.f32	s12, s2, s12
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24012ea8:	ee64 6a26 	vmul.f32	s13, s8, s13
24012eac:	eeb0 4a00 	vmov.f32	s8, #0	; 0x40000000  2.0
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24012eb0:	ee26 6a25 	vmul.f32	s12, s12, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24012eb4:	eef0 0a66 	vmov.f32	s1, s13
24012eb8:	eed2 6a27 	vfnms.f32	s13, s4, s15
24012ebc:	eef0 5a46 	vmov.f32	s11, s12
24012ec0:	eee2 0aa1 	vfma.f32	s1, s5, s3
24012ec4:	eea5 6a01 	vfma.f32	s12, s10, s2
24012ec8:	eee2 5a67 	vfms.f32	s11, s4, s15
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24012ecc:	eee6 3a84 	vfma.f32	s7, s13, s8
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24012ed0:	eea0 3a84 	vfma.f32	s6, s1, s8
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
24012ed4:	eea6 7a44 	vfms.f32	s14, s12, s8
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24012ed8:	eee5 4a84 	vfma.f32	s9, s11, s8
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24012edc:	edc3 3a0c 	vstr	s7, [r3, #48]	; 0x30
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24012ee0:	ed83 3a0b 	vstr	s6, [r3, #44]	; 0x2c
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
24012ee4:	ed83 7a0e 	vstr	s14, [r3, #56]	; 0x38
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24012ee8:	edc3 4a0d 	vstr	s9, [r3, #52]	; 0x34
    return tanhf(y3*f->r);
}
24012eec:	ecbd 8b04 	vpop	{d8-d9}
    return tanhf(y3*f->r);
24012ef0:	f005 bafc 	b.w	240184ec <tanhf>
    Lfloat output = 1.0f;
24012ef4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24012ef8:	e679      	b.n	24012bee <tDiodeFilter_tick+0x5e>
24012efa:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 24012f24 <tDiodeFilter_tick+0x394>
        t2 = 0.000001f;
24012efe:	eddf 7a08 	vldr	s15, [pc, #32]	; 24012f20 <tDiodeFilter_tick+0x390>
24012f02:	e7a2      	b.n	24012e4a <tDiodeFilter_tick+0x2ba>
24012f04:	eddf 0a07 	vldr	s1, [pc, #28]	; 24012f24 <tDiodeFilter_tick+0x394>
        t1 = 0.000001f;
24012f08:	eddf 6a05 	vldr	s13, [pc, #20]	; 24012f20 <tDiodeFilter_tick+0x390>
24012f0c:	e794      	b.n	24012e38 <tDiodeFilter_tick+0x2a8>
24012f0e:	bf00      	nop
24012f10:	43d20000 	.word	0x43d20000
24012f14:	c46c4000 	.word	0xc46c4000
24012f18:	446c4000 	.word	0x446c4000
24012f1c:	42d20000 	.word	0x42d20000
24012f20:	358637bd 	.word	0x358637bd
24012f24:	3f800008 	.word	0x3f800008

24012f28 <tDiodeFilter_tickEfficient>:

//#define SAFE_FILTER
Lfloat   tDiodeFilter_tickEfficient               (tDiodeFilter* const vf, Lfloat in)
{
    _tDiodeFilter* f = *vf;
24012f28:	6803      	ldr	r3, [r0, #0]
{
24012f2a:	eeb0 4a40 	vmov.f32	s8, s0
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    Lfloat ih = 0.5f * (in + f->zi);

    // evaluate the non-linear factors
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24012f2e:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012f32:	eddf 6add 	vldr	s13, [pc, #884]	; 240132a8 <tDiodeFilter_tickEfficient+0x380>
24012f36:	eef2 4a0e 	vmov.f32	s9, #46	; 0x41700000  15.0
    if (testVal!= 0.0f)
24012f3a:	eddf 5adc 	vldr	s11, [pc, #880]	; 240132ac <tDiodeFilter_tickEfficient+0x384>
{
24012f3e:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24012f42:	ed93 0a03 	vldr	s0, [r3, #12]
24012f46:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
    Lfloat ih = 0.5f * (in + f->zi);
24012f4a:	ed93 6a07 	vldr	s12, [r3, #28]
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24012f4e:	ee67 7a40 	vnmul.f32	s15, s14, s0
24012f52:	ed93 5a08 	vldr	s10, [r3, #32]
    Lfloat ih = 0.5f * (in + f->zi);
24012f56:	ee34 6a06 	vadd.f32	s12, s8, s12
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24012f5a:	edd3 1a02 	vldr	s3, [r3, #8]
24012f5e:	eee6 7a23 	vfma.f32	s15, s12, s7
24012f62:	ee67 7a85 	vmul.f32	s15, s15, s10
    Lfloat a = x*x;
24012f66:	ee67 7aa7 	vmul.f32	s15, s15, s15
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012f6a:	eee7 6aa4 	vfma.f32	s13, s15, s9
24012f6e:	ee67 6aa6 	vmul.f32	s13, s15, s13
    if (testVal!= 0.0f)
24012f72:	eef4 6a65 	vcmp.f32	s13, s11
24012f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012f7a:	f000 8187 	beq.w	2401328c <tDiodeFilter_tickEfficient+0x364>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012f7e:	ed9f 6acc 	vldr	s12, [pc, #816]	; 240132b0 <tDiodeFilter_tickEfficient+0x388>
24012f82:	ee76 5a86 	vadd.f32	s11, s13, s12
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24012f86:	edd3 3a0c 	vldr	s7, [r3, #48]	; 0x30
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012f8a:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24012f8e:	ed93 3a0b 	vldr	s6, [r3, #44]	; 0x2c
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24012f92:	ee21 5a85 	vmul.f32	s10, s3, s10
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24012f96:	ed93 2a09 	vldr	s4, [r3, #36]	; 0x24
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;

    // This formula gives the result for y3 thanks to MATLAB
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24012f9a:	eeb0 9a08 	vmov.f32	s18, #8	; 0x40400000  3.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24012f9e:	ee73 6ac3 	vsub.f32	s13, s7, s6
    return ((a + 105.0f)*a + 945.0f) / output;
24012fa2:	ed9f 1ac3 	vldr	s2, [pc, #780]	; 240132b0 <tDiodeFilter_tickEfficient+0x388>
24012fa6:	eddf 4ac3 	vldr	s9, [pc, #780]	; 240132b4 <tDiodeFilter_tickEfficient+0x38c>
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012faa:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
24012fae:	eeb0 8a41 	vmov.f32	s16, s2
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012fb2:	ed9f 6abd 	vldr	s12, [pc, #756]	; 240132a8 <tDiodeFilter_tickEfficient+0x380>
    return ((a + 105.0f)*a + 945.0f) / output;
24012fb6:	ee77 4aa4 	vadd.f32	s9, s15, s9
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24012fba:	ee66 6a82 	vmul.f32	s13, s13, s4
    return ((a + 105.0f)*a + 945.0f) / output;
24012fbe:	eea7 8aa4 	vfma.f32	s16, s15, s9
    if (testVal!= 0.0f)
24012fc2:	eddf 4aba 	vldr	s9, [pc, #744]	; 240132ac <tDiodeFilter_tickEfficient+0x384>
    Lfloat a = x*x;
24012fc6:	ee66 6aa6 	vmul.f32	s13, s13, s13
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012fca:	eef0 7a46 	vmov.f32	s15, s12
24012fce:	ed9f 6ab6 	vldr	s12, [pc, #728]	; 240132a8 <tDiodeFilter_tickEfficient+0x380>
24012fd2:	eee6 7aa0 	vfma.f32	s15, s13, s1
    return ((a + 105.0f)*a + 945.0f) / output;
24012fd6:	eddf 0ab6 	vldr	s1, [pc, #728]	; 240132b0 <tDiodeFilter_tickEfficient+0x388>
24012fda:	eec8 2a25 	vdiv.f32	s5, s16, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012fde:	ee66 7aa7 	vmul.f32	s15, s13, s15
24012fe2:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
    return ((a + 105.0f)*a + 945.0f) / output;
24012fe6:	eef0 8a60 	vmov.f32	s17, s1
    if (testVal!= 0.0f)
24012fea:	eef4 7a64 	vcmp.f32	s15, s9
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24012fee:	edd3 4a0d 	vldr	s9, [r3, #52]	; 0x34
    if (testVal!= 0.0f)
24012ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012ff6:	bf18      	it	ne
24012ff8:	ee77 5a81 	vaddne.f32	s11, s15, s2
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24012ffc:	ee74 7ae3 	vsub.f32	s15, s9, s7
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24013000:	ee62 2a85 	vmul.f32	s5, s5, s10
    return ((a + 105.0f)*a + 945.0f) / output;
24013004:	ed9f 5aab 	vldr	s10, [pc, #684]	; 240132b4 <tDiodeFilter_tickEfficient+0x38c>
    Lfloat output = 1.0f;
24013008:	bf08      	it	eq
2401300a:	eef7 5a00 	vmoveq.f32	s11, #112	; 0x3f800000  1.0
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
2401300e:	ee67 7a82 	vmul.f32	s15, s15, s4
    return ((a + 105.0f)*a + 945.0f) / output;
24013012:	ee36 5a85 	vadd.f32	s10, s13, s10
24013016:	ee21 1a82 	vmul.f32	s2, s3, s4
    Lfloat a = x*x;
2401301a:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return ((a + 105.0f)*a + 945.0f) / output;
2401301e:	eee6 8a85 	vfma.f32	s17, s13, s10
24013022:	ed9f 5aa4 	vldr	s10, [pc, #656]	; 240132b4 <tDiodeFilter_tickEfficient+0x38c>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013026:	eea7 6a88 	vfma.f32	s12, s15, s16
    return ((a + 105.0f)*a + 945.0f) / output;
2401302a:	ee37 5a85 	vadd.f32	s10, s15, s10
2401302e:	eec8 6aa5 	vdiv.f32	s13, s17, s11
    if (testVal!= 0.0f)
24013032:	eddf 5a9e 	vldr	s11, [pc, #632]	; 240132ac <tDiodeFilter_tickEfficient+0x384>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013036:	ee27 6a86 	vmul.f32	s12, s15, s12
    if (testVal!= 0.0f)
2401303a:	eeb4 6a65 	vcmp.f32	s12, s11
2401303e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013042:	bf18      	it	ne
24013044:	ee76 5a20 	vaddne.f32	s11, s12, s1
    return ((a + 105.0f)*a + 945.0f) / output;
24013048:	eddf 0a99 	vldr	s1, [pc, #612]	; 240132b0 <tDiodeFilter_tickEfficient+0x388>
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
2401304c:	ee37 6a64 	vsub.f32	s12, s14, s9
    return ((a + 105.0f)*a + 945.0f) / output;
24013050:	eeb0 8a60 	vmov.f32	s16, s1
    Lfloat output = 1.0f;
24013054:	bf08      	it	eq
24013056:	eef7 5a00 	vmoveq.f32	s11, #112	; 0x3f800000  1.0
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
2401305a:	ee26 6a02 	vmul.f32	s12, s12, s4
    return ((a + 105.0f)*a + 945.0f) / output;
2401305e:	eea7 8a85 	vfma.f32	s16, s15, s10
    if (testVal!= 0.0f)
24013062:	ed9f 5a92 	vldr	s10, [pc, #584]	; 240132ac <tDiodeFilter_tickEfficient+0x384>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013066:	eeb2 2a0e 	vmov.f32	s4, #46	; 0x41700000  15.0
    Lfloat a = x*x;
2401306a:	ee26 6a06 	vmul.f32	s12, s12, s12
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
2401306e:	ee66 6a81 	vmul.f32	s13, s13, s2
    return ((a + 105.0f)*a + 945.0f) / output;
24013072:	eec8 7a25 	vdiv.f32	s15, s16, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013076:	eddf 5a8c 	vldr	s11, [pc, #560]	; 240132a8 <tDiodeFilter_tickEfficient+0x380>
2401307a:	eee6 5a02 	vfma.f32	s11, s12, s4
    return ((a + 105.0f)*a + 945.0f) / output;
2401307e:	ed9f 2a8c 	vldr	s4, [pc, #560]	; 240132b0 <tDiodeFilter_tickEfficient+0x388>
24013082:	eeb0 8a42 	vmov.f32	s16, s4
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013086:	ee66 5a25 	vmul.f32	s11, s12, s11
    if (testVal!= 0.0f)
2401308a:	eef4 5a45 	vcmp.f32	s11, s10
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
2401308e:	ee67 7a81 	vmul.f32	s15, s15, s2
    if (testVal!= 0.0f)
24013092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013096:	bf18      	it	ne
24013098:	ee35 5aa0 	vaddne.f32	s10, s11, s1
    return ((a + 105.0f)*a + 945.0f) / output;
2401309c:	eddf 5a85 	vldr	s11, [pc, #532]	; 240132b4 <tDiodeFilter_tickEfficient+0x38c>
    Lfloat output = 1.0f;
240130a0:	bf08      	it	eq
240130a2:	eeb7 5a00 	vmoveq.f32	s10, #112	; 0x3f800000  1.0
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
240130a6:	edd3 0a0a 	vldr	s1, [r3, #40]	; 0x28
    return ((a + 105.0f)*a + 945.0f) / output;
240130aa:	ee76 5a25 	vadd.f32	s11, s12, s11
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
240130ae:	ee61 1aa0 	vmul.f32	s3, s3, s1
    return ((a + 105.0f)*a + 945.0f) / output;
240130b2:	eea6 8a25 	vfma.f32	s16, s12, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240130b6:	ed9f 6a7c 	vldr	s12, [pc, #496]	; 240132a8 <tDiodeFilter_tickEfficient+0x380>
    return ((a + 105.0f)*a + 945.0f) / output;
240130ba:	eec8 5a05 	vdiv.f32	s11, s16, s10
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
240130be:	ee27 5a20 	vmul.f32	s10, s14, s1
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240130c2:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
240130c6:	ee77 0a23 	vadd.f32	s1, s14, s7
    Lfloat a = x*x;
240130ca:	ee25 5a05 	vmul.f32	s10, s10, s10
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240130ce:	eea5 6a08 	vfma.f32	s12, s10, s16
    return ((a + 105.0f)*a + 945.0f) / output;
240130d2:	ed9f 8a77 	vldr	s16, [pc, #476]	; 240132b0 <tDiodeFilter_tickEfficient+0x388>
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
240130d6:	ee65 5a81 	vmul.f32	s11, s11, s2
    if (testVal!= 0.0f)
240130da:	ed9f 1a74 	vldr	s2, [pc, #464]	; 240132ac <tDiodeFilter_tickEfficient+0x384>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240130de:	ee26 6a05 	vmul.f32	s12, s12, s10
    if (testVal!= 0.0f)
240130e2:	eeb4 6a41 	vcmp.f32	s12, s2
    return ((a + 105.0f)*a + 945.0f) / output;
240130e6:	ed9f 1a73 	vldr	s2, [pc, #460]	; 240132b4 <tDiodeFilter_tickEfficient+0x38c>
240130ea:	ee35 1a01 	vadd.f32	s2, s10, s2
    if (testVal!= 0.0f)
240130ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    return ((a + 105.0f)*a + 945.0f) / output;
240130f2:	eea5 8a01 	vfma.f32	s16, s10, s2
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240130f6:	bf14      	ite	ne
240130f8:	ee36 2a02 	vaddne.f32	s4, s12, s4
    Lfloat output = 1.0f;
240130fc:	eeb7 2a00 	vmoveq.f32	s4, #112	; 0x3f800000  1.0
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24013100:	ee37 6a24 	vadd.f32	s12, s14, s9
24013104:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
    return ((a + 105.0f)*a + 945.0f) / output;
24013108:	ee88 5a02 	vdiv.f32	s10, s16, s4
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
2401310c:	ee33 2a24 	vadd.f32	s4, s6, s9
24013110:	ee34 8aa0 	vadd.f32	s16, s9, s1
24013114:	ee32 2a20 	vadd.f32	s4, s4, s1
24013118:	eef0 0a48 	vmov.f32	s1, s16
2401311c:	eea4 2a22 	vfma.f32	s4, s8, s5
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24013120:	ee25 5a21 	vmul.f32	s10, s10, s3
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24013124:	eee2 0a26 	vfma.f32	s1, s4, s13
24013128:	ee36 2a06 	vadd.f32	s4, s12, s12
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
2401312c:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
24013130:	ee75 8a09 	vadd.f32	s17, s10, s18
24013134:	eea6 6a82 	vfma.f32	s12, s13, s4
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24013138:	ee27 2a26 	vmul.f32	s4, s14, s13
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
2401313c:	ee35 8a29 	vadd.f32	s16, s10, s19
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24013140:	eea0 6aa7 	vfma.f32	s12, s1, s15
24013144:	eef0 0a47 	vmov.f32	s1, s14
24013148:	eee2 0a01 	vfma.f32	s1, s4, s2
2401314c:	ee22 2a09 	vmul.f32	s4, s4, s18
24013150:	eea7 2a01 	vfma.f32	s4, s14, s2
24013154:	eee2 0a27 	vfma.f32	s1, s4, s15
24013158:	eeb0 2a60 	vmov.f32	s4, s1
2401315c:	eef0 0a61 	vmov.f32	s1, s3
24013160:	eea6 2a25 	vfma.f32	s4, s12, s11
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24013164:	eee0 0a22 	vfma.f32	s1, s0, s5
24013168:	eeb0 6a61 	vmov.f32	s12, s3
2401316c:	eea5 6a01 	vfma.f32	s12, s10, s2
24013170:	ee75 1a20 	vadd.f32	s3, s10, s1
24013174:	eef0 0a41 	vmov.f32	s1, s2
24013178:	eee1 8aa6 	vfma.f32	s17, s3, s13
2401317c:	ee75 1a01 	vadd.f32	s3, s10, s2
24013180:	eee5 0a01 	vfma.f32	s1, s10, s2
24013184:	eee6 1a26 	vfma.f32	s3, s12, s13
24013188:	eeb0 6a45 	vmov.f32	s12, s10
2401318c:	eee8 1aa7 	vfma.f32	s3, s17, s15
24013190:	ee68 8a26 	vmul.f32	s17, s16, s13
24013194:	eea8 6a81 	vfma.f32	s12, s17, s2
24013198:	eee8 0a89 	vfma.f32	s1, s17, s18
2401319c:	eea0 6aa7 	vfma.f32	s12, s1, s15
240131a0:	eea1 6aa5 	vfma.f32	s12, s3, s11
    {
        errorCheck = 2;
    }

#endif
    if (tempy3denom == 0.0f)
240131a4:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
240131a8:	eeb4 6a61 	vcmp.f32	s12, s3
240131ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
240131b0:	eef5 6a40 	vcmp.f32	s13, #0.0
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
240131b4:	bf14      	ite	ne
240131b6:	ee36 6a29 	vaddne.f32	s12, s12, s19
        tempy3denom = 0.000001f;
240131ba:	ed9f 6a3f 	vldreq	s12, [pc, #252]	; 240132b8 <tDiodeFilter_tickEfficient+0x390>
    if (t1 == 0.0f)
240131be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
240131c2:	ee82 1a06 	vdiv.f32	s2, s4, s12
    if (t1 == 0.0f)
240131c6:	d069      	beq.n	2401329c <tDiodeFilter_tickEfficient+0x374>
240131c8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240131cc:	ee76 0aa0 	vadd.f32	s1, s13, s1
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
240131d0:	eef5 7a40 	vcmp.f32	s15, #0.0
240131d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240131d8:	d05b      	beq.n	24013292 <tDiodeFilter_tickEfficient+0x36a>
240131da:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
240131de:	ee37 2a82 	vadd.f32	s4, s15, s4
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
240131e2:	eef5 5a40 	vcmp.f32	s11, #0.0
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));

    f->zi = in;
240131e6:	ed83 4a07 	vstr	s8, [r3, #28]
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
240131ea:	eeb0 9a47 	vmov.f32	s18, s14
240131ee:	eef0 8a64 	vmov.f32	s17, s9
    if (t3 == 0.0f)
240131f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
240131f6:	ee77 0aa0 	vadd.f32	s1, s15, s1
    Lfloat xx = (in - f->r*y3);
240131fa:	ee20 0a01 	vmul.f32	s0, s0, s2
        t3 = 0.000001f;
240131fe:	bf08      	it	eq
24013200:	eddf 5a2d 	vldreq	s11, [pc, #180]	; 240132b8 <tDiodeFilter_tickEfficient+0x390>
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24013204:	ee38 8a25 	vadd.f32	s16, s16, s11
24013208:	eee5 8a81 	vfma.f32	s17, s11, s2
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
2401320c:	ee35 2a82 	vadd.f32	s4, s11, s4
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24013210:	ee98 9a01 	vfnms.f32	s18, s16, s2
24013214:	eeb0 8a63 	vmov.f32	s16, s7
    Lfloat xx = (in - f->r*y3);
24013218:	ee74 1a40 	vsub.f32	s3, s8, s0
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
2401321c:	ee89 6a25 	vdiv.f32	s12, s18, s11
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
24013220:	eed2 8a06 	vfnms.f32	s17, s4, s12
24013224:	eea7 8a86 	vfma.f32	s16, s15, s12
24013228:	ee88 2aa7 	vdiv.f32	s4, s17, s15
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
2401322c:	ee90 8a82 	vfnms.f32	s16, s1, s4
24013230:	ee88 4a26 	vdiv.f32	s8, s16, s13
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24013234:	ee32 4a44 	vsub.f32	s8, s4, s8
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24013238:	ee36 2a42 	vsub.f32	s4, s12, s4
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
2401323c:	ee31 6a46 	vsub.f32	s12, s2, s12
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24013240:	ee64 6a26 	vmul.f32	s13, s8, s13
24013244:	eeb0 4a00 	vmov.f32	s8, #0	; 0x40000000  2.0
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24013248:	ee26 6a25 	vmul.f32	s12, s12, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
2401324c:	eef0 0a66 	vmov.f32	s1, s13
24013250:	eed2 6a27 	vfnms.f32	s13, s4, s15
24013254:	eef0 5a46 	vmov.f32	s11, s12
24013258:	eee2 0aa1 	vfma.f32	s1, s5, s3
2401325c:	eea5 6a01 	vfma.f32	s12, s10, s2
24013260:	eee2 5a67 	vfms.f32	s11, s4, s15
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24013264:	eee6 3a84 	vfma.f32	s7, s13, s8
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24013268:	eea0 3a84 	vfma.f32	s6, s1, s8
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
2401326c:	eea6 7a44 	vfms.f32	s14, s12, s8
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24013270:	eee5 4a84 	vfma.f32	s9, s11, s8
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24013274:	edc3 3a0c 	vstr	s7, [r3, #48]	; 0x30
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24013278:	ed83 3a0b 	vstr	s6, [r3, #44]	; 0x2c
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
2401327c:	ed83 7a0e 	vstr	s14, [r3, #56]	; 0x38
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24013280:	edc3 4a0d 	vstr	s9, [r3, #52]	; 0x34
    return fast_tanh5(y3*f->r);
}
24013284:	ecbd 8b04 	vpop	{d8-d9}
    return fast_tanh5(y3*f->r);
24013288:	f000 bb9c 	b.w	240139c4 <fast_tanh5>
    Lfloat output = 1.0f;
2401328c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24013290:	e679      	b.n	24012f86 <tDiodeFilter_tickEfficient+0x5e>
24013292:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 240132bc <tDiodeFilter_tickEfficient+0x394>
        t2 = 0.000001f;
24013296:	eddf 7a08 	vldr	s15, [pc, #32]	; 240132b8 <tDiodeFilter_tickEfficient+0x390>
2401329a:	e7a2      	b.n	240131e2 <tDiodeFilter_tickEfficient+0x2ba>
2401329c:	eddf 0a07 	vldr	s1, [pc, #28]	; 240132bc <tDiodeFilter_tickEfficient+0x394>
        t1 = 0.000001f;
240132a0:	eddf 6a05 	vldr	s13, [pc, #20]	; 240132b8 <tDiodeFilter_tickEfficient+0x390>
240132a4:	e794      	b.n	240131d0 <tDiodeFilter_tickEfficient+0x2a8>
240132a6:	bf00      	nop
240132a8:	43d20000 	.word	0x43d20000
240132ac:	c46c4000 	.word	0xc46c4000
240132b0:	446c4000 	.word	0x446c4000
240132b4:	42d20000 	.word	0x42d20000
240132b8:	358637bd 	.word	0x358637bd
240132bc:	3f800008 	.word	0x3f800008

240132c0 <tDiodeFilter_setFreqFast>:

void    tDiodeFilter_setFreqFast     (tDiodeFilter* const vf, Lfloat cutoff)
{
	_tDiodeFilter* f = *vf;
	f->cutoffMIDI = cutoff;
	cutoff *= 30.567164179104478f; // span of midinotes 0-134.0f (frequency range up to around 19000.0f)
240132c0:	eddf 7a15 	vldr	s15, [pc, #84]	; 24013318 <tDiodeFilter_setFreqFast+0x58>
240132c4:	f640 7cfe 	movw	ip, #4094	; 0xffe
	_tDiodeFilter* f = *vf;
240132c8:	6801      	ldr	r1, [r0, #0]
    if (intVer < 0)
    {
    	intVer = 0;
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
240132ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	cutoff *= 30.567164179104478f; // span of midinotes 0-134.0f (frequency range up to around 19000.0f)
240132ce:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
240132d2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
	f->cutoffMIDI = cutoff;
240132d4:	ed81 0a11 	vstr	s0, [r1, #68]	; 0x44
    int32_t intVer = (int32_t)cutoff;
240132d8:	eefd 6ae7 	vcvt.s32.f32	s13, s15
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
240132dc:	ee37 7a67 	vsub.f32	s14, s14, s15
    int32_t intVer = (int32_t)cutoff;
240132e0:	ee16 3a90 	vmov	r3, s13
240132e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
240132e8:	4563      	cmp	r3, ip
240132ea:	bfa8      	it	ge
240132ec:	4663      	movge	r3, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
240132ee:	ee06 3a90 	vmov	s13, r3
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
240132f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
240132f6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
240132fa:	edd3 5a01 	vldr	s11, [r3, #4]
240132fe:	ed93 6a00 	vldr	s12, [r3]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24013302:	ee77 7ae6 	vsub.f32	s15, s15, s13
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
24013306:	ee37 7a26 	vadd.f32	s14, s14, s13
2401330a:	ee67 7aa5 	vmul.f32	s15, s15, s11
2401330e:	eee6 7a07 	vfma.f32	s15, s12, s14
24013312:	edc1 7a02 	vstr	s15, [r1, #8]
}
24013316:	4770      	bx	lr
24013318:	41f4898d 	.word	0x41f4898d

2401331c <tDiodeFilter_setQ>:

void    tDiodeFilter_setQ     (tDiodeFilter* const vf, Lfloat resonance)
{
    _tDiodeFilter* f = *vf;
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
2401331c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24013320:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
24013324:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
24013328:	eef0 0a67 	vmov.f32	s1, s15
{
2401332c:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
2401332e:	6804      	ldr	r4, [r0, #0]
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
24013330:	eee0 0a07 	vfma.f32	s1, s0, s14
24013334:	eeb0 0a67 	vmov.f32	s0, s15
24013338:	f020 face 	bl	240338d8 <__LEAF_clip_veneer>
2401333c:	ed84 0a03 	vstr	s0, [r4, #12]
}
24013340:	bd10      	pop	{r4, pc}
24013342:	bf00      	nop

24013344 <tDiodeFilter_setSampleRate>:

void    tDiodeFilter_setSampleRate(tDiodeFilter* const vf, Lfloat sr)
{
    _tDiodeFilter* f = *vf;
    
    f->invSampleRate = 1.0f/sr;
24013344:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    if (sr > 90000)
24013348:	ed9f 7a08 	vldr	s14, [pc, #32]	; 2401336c <tDiodeFilter_setSampleRate+0x28>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
2401334c:	4908      	ldr	r1, [pc, #32]	; (24013370 <tDiodeFilter_setSampleRate+0x2c>)
2401334e:	eeb4 0ac7 	vcmpe.f32	s0, s14
24013352:	4b08      	ldr	r3, [pc, #32]	; (24013374 <tDiodeFilter_setSampleRate+0x30>)
    f->invSampleRate = 1.0f/sr;
24013354:	eec6 7a80 	vdiv.f32	s15, s13, s0
    _tDiodeFilter* f = *vf;
24013358:	6802      	ldr	r2, [r0, #0]
    	f->table = __filterTanhTable_48000;
2401335a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401335e:	bfd8      	it	le
24013360:	460b      	movle	r3, r1
24013362:	6413      	str	r3, [r2, #64]	; 0x40
    f->invSampleRate = 1.0f/sr;
24013364:	edc2 7a0f 	vstr	s15, [r2, #60]	; 0x3c
    }
}
24013368:	4770      	bx	lr
2401336a:	bf00      	nop
2401336c:	47afc800 	.word	0x47afc800
24013370:	2401a5c8 	.word	0x2401a5c8
24013374:	2401e5c8 	.word	0x2401e5c8

24013378 <tLadderFilter_init>:


void    tLadderFilter_init           (tLadderFilter* const vf, Lfloat cutoff, Lfloat resonance, LEAF* const leaf)
{
24013378:	b570      	push	{r4, r5, r6, lr}
2401337a:	ed2d 8b02 	vpush	{d8}
    tLadderFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tLadderFilter_initToPool     (tLadderFilter* const vf, Lfloat cutoff, Lfloat resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
2401337e:	698d      	ldr	r5, [r1, #24]
{
24013380:	4606      	mov	r6, r0
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
24013382:	2040      	movs	r0, #64	; 0x40
{
24013384:	eeb0 8a40 	vmov.f32	s16, s0
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
24013388:	4629      	mov	r1, r5
{
2401338a:	eef0 8a60 	vmov.f32	s17, s1
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
2401338e:	f000 fdc3 	bl	24013f18 <mpool_alloc>
24013392:	6030      	str	r0, [r6, #0]
    f->mempool = m;
24013394:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    f->cutoffMIDI = ftom(cutoff);
24013396:	eeb0 0a48 	vmov.f32	s0, s16
    LEAF* leaf = f->mempool->leaf;
2401339a:	686d      	ldr	r5, [r5, #4]
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
2401339c:	4604      	mov	r4, r0
    f->invSampleRate = leaf->invSampleRate;
2401339e:	686b      	ldr	r3, [r5, #4]
    f->cutoff = cutoff;
240133a0:	ed80 8a01 	vstr	s16, [r0, #4]
    f->invSampleRate = leaf->invSampleRate;
240133a4:	6083      	str	r3, [r0, #8]
    f->cutoffMIDI = ftom(cutoff);
240133a6:	f000 fd33 	bl	24013e10 <ftom>
    f->oversampling = 1;
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
240133aa:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 2401341c <tLadderFilter_init+0xa4>
    f->cutoffMIDI = ftom(cutoff);
240133ae:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
    f->oversampling = 1;
240133b2:	2301      	movs	r3, #1
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
240133b4:	ee28 0a07 	vmul.f32	s0, s16, s14
240133b8:	edd4 7a02 	vldr	s15, [r4, #8]
    f->oversampling = 1;
240133bc:	60e3      	str	r3, [r4, #12]
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
240133be:	ee20 0a27 	vmul.f32	s0, s0, s15
240133c2:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
240133c6:	f005 f8fb 	bl	240185c0 <tan>
    f->c2 = 2.0f * f->c;
    //resonance / feedback is from 0 to 4 for 100%, further "drives" feedback
    f->fb = (resonance * 8.0f);
240133ca:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
240133ce:	eeb7 0bc0 	vcvt.f32.f64	s0, d0

    // shaper coefficients, offset, scale, shape
    // very quick approximation, close enough for me to tanh
    // yet far more flexible
    f->a = 2.0f;
240133d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f->s = 0.1f;
    f->d = 1.0f;
240133d6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->s = 0.1f;
240133da:	4911      	ldr	r1, [pc, #68]	; (24013420 <tLadderFilter_init+0xa8>)
    f->fb = (resonance * 8.0f);
240133dc:	ee68 8aa6 	vmul.f32	s17, s17, s13
    f->a = 2.0f;
240133e0:	61e3      	str	r3, [r4, #28]
    f->c2 = 2.0f * f->c;
240133e2:	ee30 7a00 	vadd.f32	s14, s0, s0
    
    
    f->b[0] = 0.01f;
    f->b[0] = 0.02f;
    f->b[0] = 0.03f;
    f->b[0] = 0.04f;
240133e6:	4b0f      	ldr	r3, [pc, #60]	; (24013424 <tLadderFilter_init+0xac>)
    f->d = 1.0f;
240133e8:	6262      	str	r2, [r4, #36]	; 0x24
    f->b[0] = 0.04f;
240133ea:	62a3      	str	r3, [r4, #40]	; 0x28
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
240133ec:	ed84 0a04 	vstr	s0, [r4, #16]
    f->s = 0.1f;
240133f0:	6221      	str	r1, [r4, #32]
    f->c2 = 2.0f * f->c;
240133f2:	ed84 7a06 	vstr	s14, [r4, #24]
    f->fb = (resonance * 8.0f);
240133f6:	edc4 8a05 	vstr	s17, [r4, #20]
    if (leaf->sampleRate > 90000)
240133fa:	eddf 7a0b 	vldr	s15, [pc, #44]	; 24013428 <tLadderFilter_init+0xb0>
240133fe:	ed95 7a00 	vldr	s14, [r5]
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
24013402:	4a0a      	ldr	r2, [pc, #40]	; (2401342c <tLadderFilter_init+0xb4>)
24013404:	eeb4 7ae7 	vcmpe.f32	s14, s15
24013408:	4b09      	ldr	r3, [pc, #36]	; (24013430 <tLadderFilter_init+0xb8>)
2401340a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401340e:	bfd8      	it	le
24013410:	4613      	movle	r3, r2
24013412:	63a3      	str	r3, [r4, #56]	; 0x38
}
24013414:	ecbd 8b02 	vpop	{d8}
24013418:	bd70      	pop	{r4, r5, r6, pc}
2401341a:	bf00      	nop
2401341c:	40490fdb 	.word	0x40490fdb
24013420:	3dcccccd 	.word	0x3dcccccd
24013424:	3d23d70a 	.word	0x3d23d70a
24013428:	47afc800 	.word	0x47afc800
2401342c:	2401a5c8 	.word	0x2401a5c8
24013430:	2401e5c8 	.word	0x2401e5c8

24013434 <tLadderFilter_tick>:
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
}

Lfloat   tLadderFilter_tick               (tLadderFilter* const vf, Lfloat in)
{
    _tLadderFilter* f = *vf;
24013434:	6802      	ldr	r2, [r0, #0]
    
    Lfloat y3 = 0.0f;
    in += 0.015f;
24013436:	eddf 7a90 	vldr	s15, [pc, #576]	; 24013678 <tLadderFilter_tick+0x244>
{
2401343a:	ed2d 8b10 	vpush	{d8-d15}
    // per-sample computation
    for (int i = 0; i < f->oversampling; i++) {
2401343e:	68d1      	ldr	r1, [r2, #12]
    in += 0.015f;
24013440:	ee30 0a27 	vadd.f32	s0, s0, s15
    for (int i = 0; i < f->oversampling; i++) {
24013444:	2900      	cmp	r1, #0
24013446:	f340 8112 	ble.w	2401366e <tLadderFilter_tick+0x23a>
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
2401344a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
        Lfloat t1 = tanhd(f->b[1] + f->a, f->d, f->s);
        Lfloat t2 = tanhd(f->b[2] + f->a, f->d, f->s);
        Lfloat t3 = tanhd(f->b[3] + f->a, f->d, f->s);
        
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
2401344e:	ed92 5a04 	vldr	s10, [r2, #16]
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
24013452:	ed92 2a09 	vldr	s4, [r2, #36]	; 0x24
    Lfloat  x2 = smoothABS (x-b, 0.01f);
24013456:	eebf aa00 	vmov.f32	s20, #240	; 0xbf800000 -1.0
        Lfloat z1 = f->c*t1 / (1.0f + f->c*t1);
        Lfloat z2 = f->c*t2 / (1.0f + f->c*t2);
        Lfloat z3 = f->c*t3 / (1.0f + f->c*t3);
        
        Lfloat f3 = f->c       * t2*g3;
        Lfloat f2 = f->c*f->c     * t1*g2 * t2*g3;
2401345a:	ee65 8a05 	vmul.f32	s17, s10, s10
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
2401345e:	ed92 7a08 	vldr	s14, [r2, #32]
24013462:	ee72 2a27 	vadd.f32	s5, s4, s15
24013466:	ed92 3a0a 	vldr	s6, [r2, #40]	; 0x28
        Lfloat estimate =
        g3 * f->b[3] +
        f3 * g2 * f->b[2] +
        f2 * g1 * f->b[1] +
        f1 * g0 * f->b[0] +
        f0 * in;
2401346a:	ee65 aa00 	vmul.f32	s21, s10, s0
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
2401346e:	ed92 1a07 	vldr	s2, [r2, #28]
        // i believe in the original this is computed incorrectly?
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
        
        // clamp can be a hard clip, a diode + highpass is better
        // if you implement a highpass do not forget to include it in the computation of the gain coefficients!
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
24013472:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
24013476:	edd2 3a0b 	vldr	s7, [r2, #44]	; 0x2c
        Lfloat f1 = f->c*f->c*f->c   * t0*g1 * t1*g2 * t2*g3;
2401347a:	ee25 9a28 	vmul.f32	s18, s10, s17
2401347e:	ed92 4a0c 	vldr	s8, [r2, #48]	; 0x30
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
24013482:	ee62 2a87 	vmul.f32	s5, s5, s14
24013486:	edd2 4a0d 	vldr	s9, [r2, #52]	; 0x34
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
2401348a:	edd2 0a05 	vldr	s1, [r2, #20]
    for (int i = 0; i < f->oversampling; i++) {
2401348e:	2300      	movs	r3, #0
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
        
        // update the stored state
        f->b[0] += f->c2 * (xx - y0);
24013490:	edd2 1a06 	vldr	s3, [r2, #24]
		return (sqrtf((x * x)  + y)) - sqrtf(y);
24013494:	ed9f 8a79 	vldr	s16, [pc, #484]	; 2401367c <tLadderFilter_tick+0x248>
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
24013498:	ee71 5a03 	vadd.f32	s11, s2, s6
    for (int i = 0; i < f->oversampling; i++) {
2401349c:	3301      	adds	r3, #1
        Lfloat t1 = tanhd(f->b[1] + f->a, f->d, f->s);
2401349e:	ee31 6a23 	vadd.f32	s12, s2, s7
        Lfloat t2 = tanhd(f->b[2] + f->a, f->d, f->s);
240134a2:	ee71 6a04 	vadd.f32	s13, s2, s8
    for (int i = 0; i < f->oversampling; i++) {
240134a6:	428b      	cmp	r3, r1
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
240134a8:	ee65 5aa5 	vmul.f32	s11, s11, s11
240134ac:	ee26 6a06 	vmul.f32	s12, s12, s12
240134b0:	ee66 6aa6 	vmul.f32	s13, s13, s13
240134b4:	ee22 baa5 	vmul.f32	s22, s5, s11
240134b8:	ee26 ca22 	vmul.f32	s24, s12, s5
240134bc:	ee72 5a25 	vadd.f32	s11, s4, s11
240134c0:	ee32 6a06 	vadd.f32	s12, s4, s12
240134c4:	ee66 baa2 	vmul.f32	s23, s13, s5
240134c8:	eecb ea25 	vdiv.f32	s29, s22, s11
240134cc:	eecc 5a06 	vdiv.f32	s11, s24, s12
240134d0:	ee72 6a26 	vadd.f32	s13, s4, s13
        Lfloat t3 = tanhd(f->b[3] + f->a, f->d, f->s);
240134d4:	ee31 7a24 	vadd.f32	s14, s2, s9
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
240134d8:	ee8b 6aa6 	vdiv.f32	s12, s23, s13
240134dc:	ee27 7a07 	vmul.f32	s14, s14, s14
240134e0:	ee77 eaee 	vsub.f32	s29, s15, s29
240134e4:	ee77 6ae5 	vsub.f32	s13, s15, s11
240134e8:	ee22 ba87 	vmul.f32	s22, s5, s14
240134ec:	ee32 7a07 	vadd.f32	s14, s4, s14
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
240134f0:	ee65 5a2e 	vmul.f32	s11, s10, s29
        Lfloat g1 = 1.0f / (1.0f + f->c*t1);
240134f4:	ee25 ea26 	vmul.f32	s28, s10, s13
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
240134f8:	eecb ca07 	vdiv.f32	s25, s22, s14
        Lfloat g1 = 1.0f / (1.0f + f->c*t1);
240134fc:	ee7e da27 	vadd.f32	s27, s28, s15
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
24013500:	ee37 7ac6 	vsub.f32	s14, s15, s12
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
24013504:	ee35 6aa7 	vadd.f32	s12, s11, s15
        Lfloat g2 = 1.0f / (1.0f + f->c*t2);
24013508:	ee25 da07 	vmul.f32	s26, s10, s14
        Lfloat z0 = f->c*t0 / (1.0f + f->c*t0);
2401350c:	eec5 ba86 	vdiv.f32	s23, s11, s12
        Lfloat z1 = f->c*t1 / (1.0f + f->c*t1);
24013510:	eece 5a2d 	vdiv.f32	s11, s28, s27
        Lfloat g2 = 1.0f / (1.0f + f->c*t2);
24013514:	ee3d ca27 	vadd.f32	s24, s26, s15
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
24013518:	ee77 caec 	vsub.f32	s25, s15, s25
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
2401351c:	ee87 fa86 	vdiv.f32	s30, s15, s12
        Lfloat z2 = f->c*t2 / (1.0f + f->c*t2);
24013520:	ee8d ea0c 	vdiv.f32	s28, s26, s24
        Lfloat g3 = 1.0f / (1.0f + f->c*t3);
24013524:	ee25 ba2c 	vmul.f32	s22, s10, s25
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
24013528:	ee6b baa5 	vmul.f32	s23, s23, s11
        Lfloat g1 = 1.0f / (1.0f + f->c*t1);
2401352c:	ee87 6aad 	vdiv.f32	s12, s15, s27
        Lfloat g3 = 1.0f / (1.0f + f->c*t3);
24013530:	ee7b 5a27 	vadd.f32	s11, s22, s15
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
24013534:	ee6b baa0 	vmul.f32	s23, s23, s1
        Lfloat g2 = 1.0f / (1.0f + f->c*t2);
24013538:	eec7 da8c 	vdiv.f32	s27, s15, s24
        Lfloat g3 = 1.0f / (1.0f + f->c*t3);
2401353c:	ee87 caa5 	vdiv.f32	s24, s15, s11
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
24013540:	ee6b ba8e 	vmul.f32	s23, s23, s28
        Lfloat z3 = f->c*t3 / (1.0f + f->c*t3);
24013544:	ee8b ea25 	vdiv.f32	s28, s22, s11
        Lfloat estimate =
24013548:	ee73 5a2a 	vadd.f32	s11, s6, s21
2401354c:	ee27 ba26 	vmul.f32	s22, s14, s13
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
24013550:	ee66 6a26 	vmul.f32	s13, s12, s13
24013554:	ee65 5a89 	vmul.f32	s11, s11, s18
24013558:	ee2b ba06 	vmul.f32	s22, s22, s12
        Lfloat y0 = t0 * g0 * (f->b[0] + f->c * xx);
2401355c:	ee2f 6a2e 	vmul.f32	s12, s30, s29
24013560:	ee65 5aae 	vmul.f32	s11, s11, s29
24013564:	ee60 ea8c 	vmul.f32	s29, s1, s24
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
24013568:	ee2c ca2c 	vmul.f32	s24, s24, s25
2401356c:	ee65 5a8f 	vmul.f32	s11, s11, s30
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
24013570:	eef0 ca67 	vmov.f32	s25, s15
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
24013574:	ee2d 7a87 	vmul.f32	s14, s27, s14
24013578:	eee3 5aa8 	vfma.f32	s11, s7, s17
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
2401357c:	eeeb ca8e 	vfma.f32	s25, s23, s28
24013580:	ee6b 5a25 	vmul.f32	s11, s22, s11
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
24013584:	eec9 baac 	vdiv.f32	s23, s19, s25
24013588:	eeed 5a04 	vfma.f32	s11, s26, s8
2401358c:	eef0 ca64 	vmov.f32	s25, s9
    Lfloat  x1 = smoothABS (x-a, 0.01f);
24013590:	eeb0 ba67 	vmov.f32	s22, s15
		return (sqrtf((x * x)  + y)) - sqrtf(y);
24013594:	eeb0 da48 	vmov.f32	s26, s16
24013598:	eeed caa5 	vfma.f32	s25, s27, s11
    Lfloat  x2 = smoothABS (x-b, 0.01f);
2401359c:	eef0 5a4a 	vmov.f32	s11, s20
    Lfloat  x1 = smoothABS (x-a, 0.01f);
240135a0:	eeac baae 	vfma.f32	s22, s25, s29
    Lfloat  x2 = smoothABS (x-b, 0.01f);
240135a4:	eeec 5aae 	vfma.f32	s11, s25, s29
		return (sqrtf((x * x)  + y)) - sqrtf(y);
240135a8:	eef0 ca48 	vmov.f32	s25, s16
240135ac:	eeab da0b 	vfma.f32	s26, s22, s22
240135b0:	eee5 caa5 	vfma.f32	s25, s11, s11
240135b4:	eef1 5acd 	vsqrt.f32	s11, s26
240135b8:	eeb1 baec 	vsqrt.f32	s22, s25
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
240135bc:	ee3b ba65 	vsub.f32	s22, s22, s11
240135c0:	eef0 5a40 	vmov.f32	s11, s0
240135c4:	eeeb 5a2b 	vfma.f32	s11, s22, s23
        Lfloat y0 = t0 * g0 * (f->b[0] + f->c * xx);
240135c8:	eeb0 ba43 	vmov.f32	s22, s6
240135cc:	eea5 ba25 	vfma.f32	s22, s10, s11
240135d0:	ee26 6a0b 	vmul.f32	s12, s12, s22
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
240135d4:	eeb0 ba63 	vmov.f32	s22, s7
        f->b[0] += f->c2 * (xx - y0);
240135d8:	ee75 5ac6 	vsub.f32	s11, s11, s12
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
240135dc:	eea5 ba06 	vfma.f32	s22, s10, s12
        f->b[0] += f->c2 * (xx - y0);
240135e0:	eea1 3aa5 	vfma.f32	s6, s3, s11
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
240135e4:	eef0 5a44 	vmov.f32	s11, s8
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
240135e8:	ee66 6a8b 	vmul.f32	s13, s13, s22
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
240135ec:	eee5 5a26 	vfma.f32	s11, s10, s13
        f->b[1] += f->c2 * (y0 - y1);
240135f0:	ee36 6a66 	vsub.f32	s12, s12, s13
240135f4:	eee1 3a86 	vfma.f32	s7, s3, s12
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
240135f8:	eeb0 6a64 	vmov.f32	s12, s9
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
240135fc:	ee27 7a25 	vmul.f32	s14, s14, s11
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
24013600:	eea5 6a07 	vfma.f32	s12, s10, s14
        f->b[2] += f->c2 * (y1 - y2);
24013604:	ee76 6ac7 	vsub.f32	s13, s13, s14
24013608:	eea1 4aa6 	vfma.f32	s8, s3, s13
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
2401360c:	ee2c ca06 	vmul.f32	s24, s24, s12
        f->b[3] += f->c2 * (y2 - y3);
24013610:	ee37 7a4c 	vsub.f32	s14, s14, s24
24013614:	eee1 4a87 	vfma.f32	s9, s3, s14
    for (int i = 0; i < f->oversampling; i++) {
24013618:	f47f af3e 	bne.w	24013498 <tLadderFilter_tick+0x64>
2401361c:	ed82 3a0a 	vstr	s6, [r2, #40]	; 0x28
24013620:	edc2 3a0b 	vstr	s7, [r2, #44]	; 0x2c
24013624:	ed82 4a0c 	vstr	s8, [r2, #48]	; 0x30
24013628:	edc2 4a0d 	vstr	s9, [r2, #52]	; 0x34
		return (sqrtf((x * x)  + y)) - sqrtf(y);
2401362c:	eddf 7a13 	vldr	s15, [pc, #76]	; 2401367c <tLadderFilter_tick+0x248>
    Lfloat  x2 = smoothABS (x-b, 0.01f);
24013630:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
    }
    
    // you must limit the compensation if feedback is clamped
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
24013634:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
		return (sqrtf((x * x)  + y)) - sqrtf(y);
24013638:	eeb0 5a67 	vmov.f32	s10, s15
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
2401363c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
		return (sqrtf((x * x)  + y)) - sqrtf(y);
24013640:	eea0 5aa0 	vfma.f32	s10, s1, s1
    Lfloat  x2 = smoothABS (x-b, 0.01f);
24013644:	ee70 0ac6 	vsub.f32	s1, s1, s12
		return (sqrtf((x * x)  + y)) - sqrtf(y);
24013648:	eee0 7aa0 	vfma.f32	s15, s1, s1
2401364c:	eeb0 7a67 	vmov.f32	s14, s15
24013650:	eef1 7ac5 	vsqrt.f32	s15, s10
24013654:	eeb1 5ac7 	vsqrt.f32	s10, s14
    x = x - x2;
24013658:	ee77 7a86 	vadd.f32	s15, s15, s12
2401365c:	ee77 7ac5 	vsub.f32	s15, s15, s10
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
24013660:	eea7 0aa5 	vfma.f32	s0, s15, s11
    return y3 * compensation;
}
24013664:	ee20 0a0c 	vmul.f32	s0, s0, s24
24013668:	ecbd 8b10 	vpop	{d8-d15}
2401366c:	4770      	bx	lr
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
2401366e:	edd2 0a05 	vldr	s1, [r2, #20]
    Lfloat y3 = 0.0f;
24013672:	ed9f ca03 	vldr	s24, [pc, #12]	; 24013680 <tLadderFilter_tick+0x24c>
24013676:	e7d9      	b.n	2401362c <tLadderFilter_tick+0x1f8>
24013678:	3c75c28f 	.word	0x3c75c28f
2401367c:	3c23d70a 	.word	0x3c23d70a
24013680:	00000000 	.word	0x00000000

24013684 <tLadderFilter_setFreqFast>:

void    tLadderFilter_setFreqFast     (tLadderFilter* const vf, Lfloat cutoff)
{
    _tLadderFilter* f = *vf;
    f->cutoffMIDI = cutoff;
    cutoff *= 30.567164179104478f;
24013684:	ed9f 7a17 	vldr	s14, [pc, #92]	; 240136e4 <tLadderFilter_setFreqFast+0x60>
24013688:	f640 7cfe 	movw	ip, #4094	; 0xffe
    _tLadderFilter* f = *vf;
2401368c:	6802      	ldr	r2, [r0, #0]
    {
    	intVer = 0;
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;

    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
2401368e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    cutoff *= 30.567164179104478f;
24013692:	ee20 7a07 	vmul.f32	s14, s0, s14
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
24013696:	6b91      	ldr	r1, [r2, #56]	; 0x38
    f->cutoffMIDI = cutoff;
24013698:	ed82 0a0f 	vstr	s0, [r2, #60]	; 0x3c
    int32_t intVer = (int32_t)cutoff;
2401369c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
240136a0:	ee76 6ac7 	vsub.f32	s13, s13, s14
    int32_t intVer = (int32_t)cutoff;
240136a4:	ee17 3a90 	vmov	r3, s15
240136a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
240136ac:	4563      	cmp	r3, ip
240136ae:	bfa8      	it	ge
240136b0:	4663      	movge	r3, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
240136b2:	ee07 3a90 	vmov	s15, r3
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
240136b6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
240136ba:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
240136be:	ed93 5a01 	vldr	s10, [r3, #4]
240136c2:	edd3 5a00 	vldr	s11, [r3]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
240136c6:	ee77 7a46 	vsub.f32	s15, s14, s12
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
240136ca:	ee36 7a86 	vadd.f32	s14, s13, s12
240136ce:	ee67 7a85 	vmul.f32	s15, s15, s10
240136d2:	eee5 7a87 	vfma.f32	s15, s11, s14
    f->c2 = 2.0f * f->c;
240136d6:	ee37 7aa7 	vadd.f32	s14, s15, s15
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
240136da:	edc2 7a04 	vstr	s15, [r2, #16]
    f->c2 = 2.0f * f->c;
240136de:	ed82 7a06 	vstr	s14, [r2, #24]
}
240136e2:	4770      	bx	lr
240136e4:	41f4898d 	.word	0x41f4898d

240136e8 <tLadderFilter_setQ>:

void    tLadderFilter_setQ     (tLadderFilter* const vf, Lfloat resonance)
{
240136e8:	b510      	push	{r4, lr}
    _tLadderFilter* f = *vf;
240136ea:	6804      	ldr	r4, [r0, #0]
{
240136ec:	eef0 0a40 	vmov.f32	s1, s0
    f->fb = LEAF_clip(0.2f, resonance, 24.0f);
240136f0:	eeb3 1a08 	vmov.f32	s2, #56	; 0x41c00000  24.0
240136f4:	ed9f 0a03 	vldr	s0, [pc, #12]	; 24013704 <tLadderFilter_setQ+0x1c>
240136f8:	f020 f8ee 	bl	240338d8 <__LEAF_clip_veneer>
240136fc:	ed84 0a05 	vstr	s0, [r4, #20]
}
24013700:	bd10      	pop	{r4, pc}
24013702:	bf00      	nop
24013704:	3e4ccccd 	.word	0x3e4ccccd

24013708 <tLadderFilter_setSampleRate>:

void    tLadderFilter_setSampleRate(tLadderFilter* const vf, Lfloat sr)
{
    _tLadderFilter* f = *vf;
    
    f->invSampleRate = 1.0f/sr;
24013708:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    if (sr > 90000)
2401370c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 24013730 <tLadderFilter_setSampleRate+0x28>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
24013710:	4908      	ldr	r1, [pc, #32]	; (24013734 <tLadderFilter_setSampleRate+0x2c>)
24013712:	eeb4 0ac7 	vcmpe.f32	s0, s14
24013716:	4b08      	ldr	r3, [pc, #32]	; (24013738 <tLadderFilter_setSampleRate+0x30>)
    f->invSampleRate = 1.0f/sr;
24013718:	eec6 7a80 	vdiv.f32	s15, s13, s0
    _tLadderFilter* f = *vf;
2401371c:	6802      	ldr	r2, [r0, #0]
    	f->table = __filterTanhTable_48000;
2401371e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013722:	bfd8      	it	le
24013724:	460b      	movle	r3, r1
24013726:	6393      	str	r3, [r2, #56]	; 0x38
    f->invSampleRate = 1.0f/sr;
24013728:	edc2 7a02 	vstr	s15, [r2, #8]
    }
}
2401372c:	4770      	bx	lr
2401372e:	bf00      	nop
24013730:	47afc800 	.word	0x47afc800
24013734:	2401a5c8 	.word	0x2401a5c8
24013738:	2401e5c8 	.word	0x2401e5c8

2401373c <LEAF_map>:
    return(fraction);
}

float LEAF_map(float value, float istart, float istop, float ostart, float ostop)
{
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
2401373c:	ee70 7a60 	vsub.f32	s15, s0, s1
24013740:	ee31 1a60 	vsub.f32	s2, s2, s1
24013744:	ee32 2a61 	vsub.f32	s4, s4, s3
24013748:	ee87 7a81 	vdiv.f32	s14, s15, s2
}
2401374c:	eee2 1a07 	vfma.f32	s3, s4, s14
24013750:	eeb0 0a61 	vmov.f32	s0, s3
24013754:	4770      	bx	lr
24013756:	bf00      	nop

24013758 <fastertanf>:
    return fResult;
}

Lfloat fastertanf(Lfloat fAngle)
{
    Lfloat fASqr = fAngle*fAngle;
24013758:	ee60 6a00 	vmul.f32	s13, s0, s0
    Lfloat fResult = 2.033e-01f;
    fResult *= fASqr;
    fResult += 3.1755e-01f;
2401375c:	ed9f 6a06 	vldr	s12, [pc, #24]	; 24013778 <fastertanf+0x20>
24013760:	ed9f 7a06 	vldr	s14, [pc, #24]	; 2401377c <fastertanf+0x24>
    fResult *= fASqr;
    fResult += 1.0f;
24013764:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    fResult += 3.1755e-01f;
24013768:	eea6 7a86 	vfma.f32	s14, s13, s12
    fResult += 1.0f;
2401376c:	eee6 7a87 	vfma.f32	s15, s13, s14
    fResult *= fAngle;
    return fResult;
}
24013770:	ee20 0a27 	vmul.f32	s0, s0, s15
24013774:	4770      	bx	lr
24013776:	bf00      	nop
24013778:	3e502de0 	.word	0x3e502de0
2401377c:	3ea295ea 	.word	0x3ea295ea

24013780 <fastsqrtf>:
// from Heng Li, a combination of inverse square root (see wiki) and inversion: https://bits.stephan-brumme.com/inverse.html
Lfloat fastsqrtf(Lfloat x)
{
	union { Lfloat f; uint32_t i; } z = { x };
	z.i  = 0x5f3759df - (z.i >> 1);
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24013780:	ee10 2a10 	vmov	r2, s0
24013784:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	z.i  = 0x5f3759df - (z.i >> 1);
24013788:	4b0d      	ldr	r3, [pc, #52]	; (240137c0 <fastsqrtf+0x40>)
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
2401378a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
2401378e:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
24013792:	ee60 7a27 	vmul.f32	s15, s0, s15
24013796:	ee00 3a10 	vmov	s0, r3
2401379a:	ee67 7a80 	vmul.f32	s15, s15, s0
2401379e:	eea0 7a67 	vfms.f32	s14, s0, s15
240137a2:	ee60 7a07 	vmul.f32	s15, s0, s14
240137a6:	ee17 3a90 	vmov	r3, s15
	z.i = 0x7EEEEEEE - z.i;
	return z.f;
240137aa:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
240137ae:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
240137b2:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
240137b6:	336e      	adds	r3, #110	; 0x6e
}
240137b8:	ee00 3a10 	vmov	s0, r3
240137bc:	4770      	bx	lr
240137be:	bf00      	nop
240137c0:	5f3759df 	.word	0x5f3759df

240137c4 <fastabsf>:
        unsigned int ui;
    }alias;
    
    alias.f = f;
    alias.ui &= 0x7fffffff;
    return alias.f;
240137c4:	ee10 3a10 	vmov	r3, s0
240137c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
240137cc:	ee00 3a10 	vmov	s0, r3
}
240137d0:	4770      	bx	lr
240137d2:	bf00      	nop

240137d4 <fasterexpf>:
    x *= x; x *= x; x *= x; x *= x;
    return x;
}

inline Lfloat fasterexpf(Lfloat x) {
    x = 1.0f + (x * 0.00390625f);
240137d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240137d8:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 24013804 <fasterexpf+0x30>
240137dc:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
240137e0:	ee27 0aa7 	vmul.f32	s0, s15, s15
240137e4:	ee20 0a00 	vmul.f32	s0, s0, s0
240137e8:	ee20 0a00 	vmul.f32	s0, s0, s0
240137ec:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
240137f0:	ee20 0a00 	vmul.f32	s0, s0, s0
240137f4:	ee20 0a00 	vmul.f32	s0, s0, s0
240137f8:	ee20 0a00 	vmul.f32	s0, s0, s0
    return x;
}
240137fc:	ee20 0a00 	vmul.f32	s0, s0, s0
24013800:	4770      	bx	lr
24013802:	bf00      	nop
24013804:	3b800000 	.word	0x3b800000

24013808 <fast_sinf2>:
Lfloat fast_sinf2(Lfloat x)
{
	Lfloat invert = 1.0f;
	Lfloat out;

	x = x * INV_TWO_PI_TIMES_SINE_TABLE_SIZE;
24013808:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 24013880 <fast_sinf2+0x78>
2401380c:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
24013810:	ee20 0b07 	vmul.f64	d0, d0, d7
24013814:	eeb7 0bc0 	vcvt.f32.f64	s0, d0

	if (x < 0.0f)
24013818:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2401381c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013820:	d426      	bmi.n	24013870 <fast_sinf2+0x68>
	Lfloat invert = 1.0f;
24013822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	{
		x *= -1.0f;
		invert = -1.0f;
	}
	int intX = ((int)x) & 2047;
24013826:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	int intXNext = (intX + 1) & 2047;
	Lfloat LfloatX = x-intX;

	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
2401382a:	4a17      	ldr	r2, [pc, #92]	; (24013888 <fast_sinf2+0x80>)
	int intX = ((int)x) & 2047;
2401382c:	ee17 3a90 	vmov	r3, s15
	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
24013830:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	int intX = ((int)x) & 2047;
24013834:	f3c3 030a 	ubfx	r3, r3, #0, #11
	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
24013838:	ee77 7ac0 	vsub.f32	s15, s15, s0
	int intXNext = (intX + 1) & 2047;
2401383c:	1c59      	adds	r1, r3, #1
	Lfloat LfloatX = x-intX;
2401383e:	ee07 3a10 	vmov	s14, r3
	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
24013842:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	Lfloat LfloatX = x-intX;
24013846:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	int intXNext = (intX + 1) & 2047;
2401384a:	f3c1 010a 	ubfx	r1, r1, #0, #11
	out += __leaf_table_sinewave[intXNext] * LfloatX;
2401384e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	Lfloat LfloatX = x-intX;
24013852:	ee30 0a47 	vsub.f32	s0, s0, s14
	out += __leaf_table_sinewave[intXNext] * LfloatX;
24013856:	ed92 6a00 	vldr	s12, [r2]
	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
2401385a:	ee77 7a87 	vadd.f32	s15, s15, s14
	out += __leaf_table_sinewave[intXNext] * LfloatX;
2401385e:	ed93 7a00 	vldr	s14, [r3]
24013862:	ee20 0a06 	vmul.f32	s0, s0, s12
24013866:	eea7 0a27 	vfma.f32	s0, s14, s15
	out *= invert;
	return out;
}
2401386a:	ee26 0a80 	vmul.f32	s0, s13, s0
2401386e:	4770      	bx	lr
		x *= -1.0f;
24013870:	eeb1 0a40 	vneg.f32	s0, s0
		invert = -1.0f;
24013874:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
24013878:	e7d5      	b.n	24013826 <fast_sinf2+0x1e>
2401387a:	bf00      	nop
2401387c:	f3af 8000 	nop.w
24013880:	6dc9c883 	.word	0x6dc9c883
24013884:	40745f30 	.word	0x40745f30
24013888:	24022648 	.word	0x24022648

2401388c <fastPowf>:
    { 
        Lfloat d; int x; 
    } 
    u = { a };

    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
2401388c:	ee10 3a10 	vmov	r3, s0
24013890:	ed9f 7a08 	vldr	s14, [pc, #32]	; 240138b4 <fastPowf+0x28>
24013894:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
24013898:	f503 0307 	add.w	r3, r3, #8847360	; 0x870000
2401389c:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
240138a0:	330b      	adds	r3, #11
240138a2:	ee07 3a90 	vmov	s15, r3
240138a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240138aa:	eea7 7aa0 	vfma.f32	s14, s15, s1
    return u.d;
240138ae:	eebd 0ac7 	vcvt.s32.f32	s0, s14
}
240138b2:	4770      	bx	lr
240138b4:	4e7de250 	.word	0x4e7de250

240138b8 <LEAF_shaper>:
#else
Lfloat LEAF_clip(Lfloat min, Lfloat val, Lfloat max)
#endif
{

    if (val < min)
240138b8:	eddf 7a1e 	vldr	s15, [pc, #120]	; 24013934 <LEAF_shaper+0x7c>
240138bc:	eeb4 0ae7 	vcmpe.f32	s0, s15
240138c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240138c4:	d406      	bmi.n	240138d4 <LEAF_shaper+0x1c>
    {
        return min;
    }
    else if (val > max)
240138c6:	eddf 7a1c 	vldr	s15, [pc, #112]	; 24013938 <LEAF_shaper+0x80>
240138ca:	eeb4 0ae7 	vcmpe.f32	s0, s15
240138ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240138d2:	dd02      	ble.n	240138da <LEAF_shaper+0x22>
240138d4:	ed9f 0a19 	vldr	s0, [pc, #100]	; 2401393c <LEAF_shaper+0x84>
}
240138d8:	4770      	bx	lr
    Lfloat fx = input * 2.0f;    // prescale
240138da:	ee30 0a00 	vadd.f32	s0, s0, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
240138de:	eddf 4a18 	vldr	s9, [pc, #96]	; 24013940 <LEAF_shaper+0x88>
240138e2:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
240138e6:	eddf 3a17 	vldr	s7, [pc, #92]	; 24013944 <LEAF_shaper+0x8c>
    c = 0.5f*fx*(3.0f - (xc2));
240138ea:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
    xc2 = xc*xc;
240138ee:	ee20 6a00 	vmul.f32	s12, s0, s0
    c = 0.5f*fx*(3.0f - (xc2));
240138f2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
240138f6:	eeb6 5a08 	vmov.f32	s10, #104	; 0x3f400000  0.750
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
240138fa:	ee26 4a06 	vmul.f32	s8, s12, s12
240138fe:	ee66 6ac6 	vnmul.f32	s13, s13, s12
    c = 0.5f*fx*(3.0f - (xc2));
24013902:	ee37 7a46 	vsub.f32	s14, s14, s12
24013906:	ee60 7a27 	vmul.f32	s15, s0, s15
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
2401390a:	eee4 6a24 	vfma.f32	s13, s8, s9
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
2401390e:	ee70 0a85 	vadd.f32	s1, s1, s10
24013912:	ed9f 5a0d 	vldr	s10, [pc, #52]	; 24013948 <LEAF_shaper+0x90>
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
24013916:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    c = 0.5f*fx*(3.0f - (xc2));
2401391a:	ee67 7a27 	vmul.f32	s15, s14, s15
2401391e:	ee20 0aa3 	vmul.f32	s0, s1, s7
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
24013922:	eee6 7a05 	vfma.f32	s15, s12, s10
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
24013926:	ee36 7aa5 	vadd.f32	s14, s13, s11
2401392a:	ee20 0a07 	vmul.f32	s0, s0, s14
    shaperOut *= 0.5f;    // post_scale
2401392e:	ee20 0a27 	vmul.f32	s0, s0, s15
    {
        return max;
    }
    else
    {
        return val;
24013932:	4770      	bx	lr
24013934:	bfb504f3 	.word	0xbfb504f3
24013938:	3fb504f3 	.word	0x3fb504f3
2401393c:	00000000 	.word	0x00000000
24013940:	3c800000 	.word	0x3c800000
24013944:	3f272f05 	.word	0x3f272f05
24013948:	3d4ccccd 	.word	0x3d4ccccd

2401394c <LEAF_round>:
    rnd = fabsf(rnd);
2401394c:	eef0 0ae0 	vabs.f32	s1, s1
    if (rnd <= 0.0000001f) return input;
24013950:	eddf 7a06 	vldr	s15, [pc, #24]	; 2401396c <LEAF_round+0x20>
24013954:	eef4 0ae7 	vcmpe.f32	s1, s15
24013958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401395c:	d905      	bls.n	2401396a <LEAF_round+0x1e>
    return roundf(input * scale) * rnd;
2401395e:	eec0 7a20 	vdiv.f32	s15, s0, s1
24013962:	fef8 7a67 	vrinta.f32	s15, s15
24013966:	ee27 0aa0 	vmul.f32	s0, s15, s1
}
2401396a:	4770      	bx	lr
2401396c:	33d6bf95 	.word	0x33d6bf95

24013970 <LEAF_bitwise_xor>:
    return unholy.f;
24013970:	ee10 3a10 	vmov	r3, s0
24013974:	4043      	eors	r3, r0
24013976:	ee00 3a10 	vmov	s0, r3
}
2401397a:	4770      	bx	lr

2401397c <LEAF_tanh>:

// Adapted from MusicDSP: http://www.musicdsp.org/showone.php?id=238
Lfloat LEAF_tanh(Lfloat x)
{
    
    if( x < -3.0f )
2401397c:	eef8 7a08 	vmov.f32	s15, #136	; 0xc0400000 -3.0
24013980:	eeb4 0ae7 	vcmpe.f32	s0, s15
24013984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013988:	d418      	bmi.n	240139bc <LEAF_tanh+0x40>
        return -1.0f;
    else if( x > 3.0f )
2401398a:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
2401398e:	eeb4 0ae7 	vcmpe.f32	s0, s15
24013992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013996:	dd02      	ble.n	2401399e <LEAF_tanh+0x22>
        return 1.0f;
24013998:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    else
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
}
2401399c:	4770      	bx	lr
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
2401399e:	ee60 6a00 	vmul.f32	s13, s0, s0
240139a2:	eef3 7a0b 	vmov.f32	s15, #59	; 0x41d80000  27.0
240139a6:	eeb2 6a02 	vmov.f32	s12, #34	; 0x41100000  9.0
240139aa:	ee36 7aa7 	vadd.f32	s14, s13, s15
240139ae:	eee6 7a86 	vfma.f32	s15, s13, s12
240139b2:	ee27 7a00 	vmul.f32	s14, s14, s0
240139b6:	ee87 0a27 	vdiv.f32	s0, s14, s15
240139ba:	4770      	bx	lr
        return -1.0f;
240139bc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
240139c0:	4770      	bx	lr
240139c2:	bf00      	nop

240139c4 <fast_tanh5>:
}

//from raphx on this post : https://www.kvraudio.com/forum/viewtopic.php?t=332930&start=30
Lfloat fast_tanh5(Lfloat x)
{
	Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
240139c4:	ee60 7a00 	vmul.f32	s15, s0, s0
240139c8:	ed9f 6a09 	vldr	s12, [pc, #36]	; 240139f0 <fast_tanh5+0x2c>
240139cc:	eddf 6a09 	vldr	s13, [pc, #36]	; 240139f4 <fast_tanh5+0x30>
	return a / sqrtf(1.0f + a * a);
240139d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
240139d4:	eee7 6a86 	vfma.f32	s13, s15, s12
	Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
240139d8:	ee67 7a80 	vmul.f32	s15, s15, s0
240139dc:	eea7 0aa6 	vfma.f32	s0, s15, s13
	return a / sqrtf(1.0f + a * a);
240139e0:	eea0 7a00 	vfma.f32	s14, s0, s0
240139e4:	eef1 7ac7 	vsqrt.f32	s15, s14
}
240139e8:	ee80 0a27 	vdiv.f32	s0, s0, s15
240139ec:	4770      	bx	lr
240139ee:	bf00      	nop
240139f0:	3c217586 	.word	0x3c217586
240139f4:	3e28d927 	.word	0x3e28d927

240139f8 <fastSine>:
//from Olli Niemitalo
//https://dsp.stackexchange.com/questions/46629/finding-polynomial-approximations-of-a-sine-wave
Lfloat fastSine(Lfloat x)
{
	Lfloat term1 = x * 1.570034357f;
	Lfloat term2 = x * x * x * -0.6425216143f;
240139f8:	ee60 7a00 	vmul.f32	s15, s0, s0
240139fc:	eddf 6a08 	vldr	s13, [pc, #32]	; 24013a20 <fastSine+0x28>
24013a00:	ed9f 7a08 	vldr	s14, [pc, #32]	; 24013a24 <fastSine+0x2c>
24013a04:	ee60 6a26 	vmul.f32	s13, s0, s13
	Lfloat term3 = x * x * x * x * x * 0.07248725712f;
	return term1+term2+term3;
24013a08:	ed9f 6a07 	vldr	s12, [pc, #28]	; 24013a28 <fastSine+0x30>
	Lfloat term2 = x * x * x * -0.6425216143f;
24013a0c:	ee67 7a80 	vmul.f32	s15, s15, s0
	Lfloat term3 = x * x * x * x * x * 0.07248725712f;
24013a10:	eea7 7aa6 	vfma.f32	s14, s15, s13
	return term1+term2+term3;
24013a14:	ee20 0a07 	vmul.f32	s0, s0, s14
}
24013a18:	eea7 0a86 	vfma.f32	s0, s15, s12
24013a1c:	4770      	bx	lr
24013a1e:	bf00      	nop
24013a20:	3d947433 	.word	0x3d947433
24013a24:	3fc8f6e3 	.word	0x3fc8f6e3
24013a28:	bf247c4c 	.word	0xbf247c4c

24013a2c <LEAF_generate_exp>:
}


//0.001 base gives a good curve that goes from 1 to near zero
void LEAF_generate_exp(Lfloat* buffer, Lfloat base, Lfloat start, Lfloat end, Lfloat offset, int size)
{
24013a2c:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = (end - start) / (Lfloat)(size-1);
24013a2e:	1e4b      	subs	r3, r1, #1
24013a30:	ee31 1a60 	vsub.f32	s2, s2, s1
    Lfloat x = start;
    for (int i = 0; i < size; i++)
24013a34:	2900      	cmp	r1, #0
    Lfloat increment = (end - start) / (Lfloat)(size-1);
24013a36:	ee07 3a90 	vmov	s15, r3
24013a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
24013a3e:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat increment = (end - start) / (Lfloat)(size-1);
24013a42:	eec1 9a27 	vdiv.f32	s19, s2, s15
    for (int i = 0; i < size; i++)
24013a46:	dd16      	ble.n	24013a76 <LEAF_generate_exp+0x4a>
24013a48:	4604      	mov	r4, r0
24013a4a:	eb00 0581 	add.w	r5, r0, r1, lsl #2
24013a4e:	eeb0 8a60 	vmov.f32	s16, s1
24013a52:	eef0 8a40 	vmov.f32	s17, s0
24013a56:	eeb0 9a61 	vmov.f32	s18, s3
    {
        buffer[i] = powf(base, x) + offset;
24013a5a:	eef0 0a48 	vmov.f32	s1, s16
24013a5e:	eeb0 0a68 	vmov.f32	s0, s17
24013a62:	f004 fa65 	bl	24017f30 <powf>
24013a66:	ee70 7a09 	vadd.f32	s15, s0, s18
        x += increment;
24013a6a:	ee38 8a29 	vadd.f32	s16, s16, s19
        buffer[i] = powf(base, x) + offset;
24013a6e:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
24013a72:	42a5      	cmp	r5, r4
24013a74:	d1f1      	bne.n	24013a5a <LEAF_generate_exp+0x2e>
    }
}
24013a76:	ecbd 8b04 	vpop	{d8-d9}
24013a7a:	bd38      	pop	{r3, r4, r5, pc}

24013a7c <LEAF_generate_table_skew_non_sym>:
    }
}


void LEAF_generate_table_skew_non_sym(Lfloat* buffer, Lfloat start, Lfloat end, Lfloat center, int size)
{
24013a7c:	b538      	push	{r3, r4, r5, lr}
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
24013a7e:	ee31 1a40 	vsub.f32	s2, s2, s0
{
24013a82:	460d      	mov	r5, r1
24013a84:	4604      	mov	r4, r0
24013a86:	ed2d 8b06 	vpush	{d8-d10}
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
24013a8a:	ee70 9ac0 	vsub.f32	s19, s1, s0
{
24013a8e:	eef0 8a40 	vmov.f32	s17, s0
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
24013a92:	ee81 0a29 	vdiv.f32	s0, s2, s19
24013a96:	f004 f8ad 	bl	24017bf4 <logf>
    Lfloat increment = 1.0f / (Lfloat)(size-1);
24013a9a:	1e6b      	subs	r3, r5, #1
    Lfloat x = 0.0000000001f;
    Lfloat proportion = 0.0;
    for (int i = 0; i < size; i++)
24013a9c:	2d00      	cmp	r5, #0
    Lfloat increment = 1.0f / (Lfloat)(size-1);
24013a9e:	ee07 3a90 	vmov	s15, r3
24013aa2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24013aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24013aaa:	ee87 aa27 	vdiv.f32	s20, s14, s15
    for (int i = 0; i < size; i++)
24013aae:	dd1e      	ble.n	24013aee <LEAF_generate_table_skew_non_sym+0x72>
24013ab0:	eddf 7a10 	vldr	s15, [pc, #64]	; 24013af4 <LEAF_generate_table_skew_non_sym+0x78>
24013ab4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    Lfloat x = 0.0000000001f;
24013ab8:	ed9f 8a0f 	vldr	s16, [pc, #60]	; 24013af8 <LEAF_generate_table_skew_non_sym+0x7c>
24013abc:	eeb0 9a40 	vmov.f32	s18, s0
    for (int i = 0; i < size; i++)
24013ac0:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 24013afc <LEAF_generate_table_skew_non_sym+0x80>
24013ac4:	ee29 9a27 	vmul.f32	s18, s18, s15
24013ac8:	e001      	b.n	24013ace <LEAF_generate_table_skew_non_sym+0x52>
    {
        proportion = expf (logf(x) / skew);
24013aca:	f004 f893 	bl	24017bf4 <logf>
24013ace:	ee29 0a00 	vmul.f32	s0, s18, s0
24013ad2:	f004 f81b 	bl	24017b0c <expf>
        buffer[i] = (Lfloat)(start + (end - start) * proportion);
24013ad6:	eef0 7a68 	vmov.f32	s15, s17
        x += increment;
24013ada:	ee38 8a0a 	vadd.f32	s16, s16, s20
        buffer[i] = (Lfloat)(start + (end - start) * proportion);
24013ade:	eee9 7a80 	vfma.f32	s15, s19, s0
        proportion = expf (logf(x) / skew);
24013ae2:	eeb0 0a48 	vmov.f32	s0, s16
        buffer[i] = (Lfloat)(start + (end - start) * proportion);
24013ae6:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
24013aea:	42a5      	cmp	r5, r4
24013aec:	d1ed      	bne.n	24013aca <LEAF_generate_table_skew_non_sym+0x4e>
    }
}
24013aee:	ecbd 8b06 	vpop	{d8-d10}
24013af2:	bd38      	pop	{r3, r4, r5, pc}
24013af4:	bfb8aa3b 	.word	0xbfb8aa3b
24013af8:	2edbe6ff 	.word	0x2edbe6ff
24013afc:	c1b834f1 	.word	0xc1b834f1

24013b00 <LEAF_generate_atodb>:


void LEAF_generate_atodb(Lfloat* buffer, int size, Lfloat min, Lfloat max)
{
24013b00:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = (max-min) / (Lfloat)(size-1);
24013b02:	1e4b      	subs	r3, r1, #1
24013b04:	ee70 0ac0 	vsub.f32	s1, s1, s0
    Lfloat x = min;
    for (int i = 0; i < size; i++)
24013b08:	2900      	cmp	r1, #0
    Lfloat increment = (max-min) / (Lfloat)(size-1);
24013b0a:	ee07 3a90 	vmov	s15, r3
24013b0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
24013b12:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat increment = (max-min) / (Lfloat)(size-1);
24013b16:	eec0 8aa7 	vdiv.f32	s17, s1, s15
    for (int i = 0; i < size; i++)
24013b1a:	dd12      	ble.n	24013b42 <LEAF_generate_atodb+0x42>
24013b1c:	4604      	mov	r4, r0
24013b1e:	eb00 0581 	add.w	r5, r0, r1, lsl #2
24013b22:	eeb0 8a40 	vmov.f32	s16, s0
}


Lfloat atodb(Lfloat a)
{
    return 20.0f*log10f(a);
24013b26:	eeb3 9a04 	vmov.f32	s18, #52	; 0x41a00000  20.0
24013b2a:	eeb0 0a48 	vmov.f32	s0, s16
24013b2e:	f004 fc75 	bl	2401841c <log10f>
24013b32:	ee20 0a09 	vmul.f32	s0, s0, s18
        x += increment;
24013b36:	ee38 8a28 	vadd.f32	s16, s16, s17
        buffer[i] = atodb(x);
24013b3a:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
24013b3e:	42a5      	cmp	r5, r4
24013b40:	d1f3      	bne.n	24013b2a <LEAF_generate_atodb+0x2a>
}
24013b42:	ecbd 8b04 	vpop	{d8-d9}
24013b46:	bd38      	pop	{r3, r4, r5, pc}

24013b48 <LEAF_generate_dbtoa>:
{
24013b48:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
24013b4a:	1e4b      	subs	r3, r1, #1
24013b4c:	ee70 0ac0 	vsub.f32	s1, s1, s0
    for (int i = 0; i < size; i++)
24013b50:	2900      	cmp	r1, #0
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
24013b52:	ee07 3a90 	vmov	s15, r3
24013b56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
24013b5a:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
24013b5e:	eec0 8aa7 	vdiv.f32	s17, s1, s15
    for (int i = 0; i < size; i++)
24013b62:	dd14      	ble.n	24013b8e <LEAF_generate_dbtoa+0x46>
24013b64:	4604      	mov	r4, r0
	return 20.0f*log10f_fast(a);
}

Lfloat dbtoa(Lfloat db)
{
    return powf(10.0f, db * 0.05f);
24013b66:	eddf 9a0b 	vldr	s19, [pc, #44]	; 24013b94 <LEAF_generate_dbtoa+0x4c>
24013b6a:	ed9f 9a0b 	vldr	s18, [pc, #44]	; 24013b98 <LEAF_generate_dbtoa+0x50>
24013b6e:	eb00 0581 	add.w	r5, r0, r1, lsl #2
24013b72:	eeb0 8a40 	vmov.f32	s16, s0
24013b76:	ee28 0a29 	vmul.f32	s0, s16, s19
        x += increment;
24013b7a:	ee38 8a28 	vadd.f32	s16, s16, s17
    return powf(10.0f, db * 0.05f);
24013b7e:	ee20 0a09 	vmul.f32	s0, s0, s18
24013b82:	f003 ffc3 	bl	24017b0c <expf>
        buffer[i] = dbtoa(x);
24013b86:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
24013b8a:	42a5      	cmp	r5, r4
24013b8c:	d1f3      	bne.n	24013b76 <LEAF_generate_dbtoa+0x2e>
}
24013b8e:	ecbd 8b04 	vpop	{d8-d9}
24013b92:	bd38      	pop	{r3, r4, r5, pc}
24013b94:	3d4ccccd 	.word	0x3d4ccccd
24013b98:	40135d8e 	.word	0x40135d8e

24013b9c <LEAF_generate_mtof>:
{
24013b9c:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = 1.0f / (Lfloat)(size-1);
24013b9e:	1e4b      	subs	r3, r1, #1
24013ba0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    for (int i = 0; i < size; i++)
24013ba4:	2900      	cmp	r1, #0
    Lfloat increment = 1.0f / (Lfloat)(size-1);
24013ba6:	ee07 3a90 	vmov	s15, r3
24013baa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
24013bae:	ed2d 8b0a 	vpush	{d8-d12}
    Lfloat increment = 1.0f / (Lfloat)(size-1);
24013bb2:	eec7 aa27 	vdiv.f32	s21, s14, s15
    Lfloat scalar = (endMIDI-startMIDI);
24013bb6:	ee30 aac0 	vsub.f32	s20, s1, s0
    for (int i = 0; i < size; i++)
24013bba:	dd29      	ble.n	24013c10 <LEAF_generate_mtof+0x74>
    Lfloat x = 0.0f;
24013bbc:	ed9f 9a19 	vldr	s18, [pc, #100]	; 24013c24 <LEAF_generate_mtof+0x88>
24013bc0:	eef0 9a40 	vmov.f32	s19, s0
24013bc4:	4604      	mov	r4, r0
    if (f <= -1500.0f) return(0);
24013bc6:	eddf 8a18 	vldr	s17, [pc, #96]	; 24013c28 <LEAF_generate_mtof+0x8c>
24013bca:	eeb0 ba49 	vmov.f32	s22, s18
    else if (f > 1499.0f) return(mtof(1499.0f));
24013bce:	ed9f 8a17 	vldr	s16, [pc, #92]	; 24013c2c <LEAF_generate_mtof+0x90>
24013bd2:	eb00 0581 	add.w	r5, r0, r1, lsl #2
    else return (8.17579891564f * expf(0.0577622650f * f));
24013bd6:	ed9f ca16 	vldr	s24, [pc, #88]	; 24013c30 <LEAF_generate_mtof+0x94>
24013bda:	eddf ba16 	vldr	s23, [pc, #88]	; 24013c34 <LEAF_generate_mtof+0x98>
        Lfloat midiVal = (x * scalar) + startMIDI;
24013bde:	eeb0 0a69 	vmov.f32	s0, s19
24013be2:	eeaa 0a09 	vfma.f32	s0, s20, s18
Lfloat mtof(Lfloat f)
24013be6:	e006      	b.n	24013bf6 <LEAF_generate_mtof+0x5a>
    else if (f > 1499.0f) return(mtof(1499.0f));
24013be8:	eeb4 0ac8 	vcmpe.f32	s0, s16
24013bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013bf0:	dd11      	ble.n	24013c16 <LEAF_generate_mtof+0x7a>
24013bf2:	eeb0 0a48 	vmov.f32	s0, s16
    if (f <= -1500.0f) return(0);
24013bf6:	eeb4 0ae8 	vcmpe.f32	s0, s17
24013bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013bfe:	d8f3      	bhi.n	24013be8 <LEAF_generate_mtof+0x4c>
24013c00:	eef0 7a4b 	vmov.f32	s15, s22
        buffer[i] = mtof(midiVal);
24013c04:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
24013c08:	42ac      	cmp	r4, r5
        x += increment;
24013c0a:	ee39 9a2a 	vadd.f32	s18, s18, s21
    for (int i = 0; i < size; i++)
24013c0e:	d1e6      	bne.n	24013bde <LEAF_generate_mtof+0x42>
}
24013c10:	ecbd 8b0a 	vpop	{d8-d12}
24013c14:	bd38      	pop	{r3, r4, r5, pc}
    else return (8.17579891564f * expf(0.0577622650f * f));
24013c16:	ee20 0a0c 	vmul.f32	s0, s0, s24
24013c1a:	f003 ff77 	bl	24017b0c <expf>
24013c1e:	ee60 7a2b 	vmul.f32	s15, s0, s23
24013c22:	e7ef      	b.n	24013c04 <LEAF_generate_mtof+0x68>
24013c24:	00000000 	.word	0x00000000
24013c28:	c4bb8000 	.word	0xc4bb8000
24013c2c:	44bb6000 	.word	0x44bb6000
24013c30:	3d6c9820 	.word	0x3d6c9820
24013c34:	4102d013 	.word	0x4102d013

24013c38 <LEAF_poly_blep>:
    if (t < dt) {
24013c38:	eeb4 0ae0 	vcmpe.f32	s0, s1
24013c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013c40:	d418      	bmi.n	24013c74 <LEAF_poly_blep+0x3c>
    else if (t > 1.0f - dt) {
24013c42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24013c46:	ee77 7a60 	vsub.f32	s15, s14, s1
24013c4a:	eef4 7ac0 	vcmpe.f32	s15, s0
24013c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013c52:	d50c      	bpl.n	24013c6e <LEAF_poly_blep+0x36>
        t = (t - 1.0f) / dt;
24013c54:	ee70 7a47 	vsub.f32	s15, s0, s14
        return t*t + t+t + 1.0f;
24013c58:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
        t = (t - 1.0f) / dt;
24013c5c:	ee87 6aa0 	vdiv.f32	s12, s15, s1
        return t*t + t+t + 1.0f;
24013c60:	ee76 7a26 	vadd.f32	s15, s12, s13
24013c64:	eea7 7a86 	vfma.f32	s14, s15, s12
24013c68:	eeb0 0a47 	vmov.f32	s0, s14
24013c6c:	4770      	bx	lr
    else return 0.0f;
24013c6e:	ed9f 0a07 	vldr	s0, [pc, #28]	; 24013c8c <LEAF_poly_blep+0x54>
}
24013c72:	4770      	bx	lr
        t /= dt;
24013c74:	ee80 7a20 	vdiv.f32	s14, s0, s1
        return t+t - t*t - 1.0f;
24013c78:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
24013c7c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24013c80:	ee77 7ac7 	vsub.f32	s15, s15, s14
24013c84:	eea7 0a87 	vfma.f32	s0, s15, s14
24013c88:	4770      	bx	lr
24013c8a:	bf00      	nop
24013c8c:	00000000 	.word	0x00000000

24013c90 <LEAF_poly_blamp>:
    if ((0 <= t) && (t < (2.0f * dt)))
24013c90:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24013c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013c98:	db2c      	blt.n	24013cf4 <LEAF_poly_blamp+0x64>
24013c9a:	ee70 7aa0 	vadd.f32	s15, s1, s1
24013c9e:	eef4 7ac0 	vcmpe.f32	s15, s0
24013ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013ca6:	dd25      	ble.n	24013cf4 <LEAF_poly_blamp+0x64>
        Lfloat x = (t / dt);
24013ca8:	eec0 6a20 	vdiv.f32	s13, s0, s1
        Lfloat u = 2.0f - x;
24013cac:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
        if (t < dt)
24013cb0:	eeb4 0ae0 	vcmpe.f32	s0, s1
24013cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        Lfloat u = 2.0f - x;
24013cb8:	ee37 7a66 	vsub.f32	s14, s14, s13
        Lfloat u2 = u * u;
24013cbc:	ee67 7a07 	vmul.f32	s15, s14, s14
        u *= u2 * u2;
24013cc0:	ee67 7aa7 	vmul.f32	s15, s15, s15
24013cc4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (t < dt)
24013cc8:	d517      	bpl.n	24013cfa <LEAF_poly_blamp+0x6a>
        	Lfloat v = 1.0f - x;
24013cca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    return y * dt / 0.066666666666667f; // divide by 15
24013cce:	eddf 5a0e 	vldr	s11, [pc, #56]	; 24013d08 <LEAF_poly_blamp+0x78>
24013cd2:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
24013cd6:	ee60 0aa5 	vmul.f32	s1, s1, s11
        	Lfloat v = 1.0f - x;
24013cda:	ee37 7a66 	vsub.f32	s14, s14, s13
        	Lfloat v2 = v * v;
24013cde:	ee67 6a07 	vmul.f32	s13, s14, s14
            y += 4.0f * v;
24013ce2:	ee27 7a06 	vmul.f32	s14, s14, s12
24013ce6:	ee27 7a26 	vmul.f32	s14, s14, s13
24013cea:	eed6 7a87 	vfnms.f32	s15, s13, s14
    return y * dt / 0.066666666666667f; // divide by 15
24013cee:	ee20 0aa7 	vmul.f32	s0, s1, s15
24013cf2:	4770      	bx	lr
24013cf4:	ed9f 0a05 	vldr	s0, [pc, #20]	; 24013d0c <LEAF_poly_blamp+0x7c>
}
24013cf8:	4770      	bx	lr
    return y * dt / 0.066666666666667f; // divide by 15
24013cfa:	ed9f 7a03 	vldr	s14, [pc, #12]	; 24013d08 <LEAF_poly_blamp+0x78>
24013cfe:	ee60 0a87 	vmul.f32	s1, s1, s14
24013d02:	ee27 0ae0 	vnmul.f32	s0, s15, s1
24013d06:	4770      	bx	lr
24013d08:	416fffff 	.word	0x416fffff
24013d0c:	00000000 	.word	0x00000000

24013d10 <LEAF_interpolate_hermite_x>:
    Lfloat c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
24013d10:	ee71 1ac0 	vsub.f32	s3, s3, s0
    Lfloat c1 = 0.5f * (yy2 - yy0);
24013d14:	ee31 6a40 	vsub.f32	s12, s2, s0
24013d18:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    Lfloat c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
24013d1c:	ee71 1aa0 	vadd.f32	s3, s3, s1
24013d20:	eef0 5a60 	vmov.f32	s11, s1
24013d24:	ee30 7ac1 	vsub.f32	s14, s1, s2
24013d28:	ee31 1ac1 	vsub.f32	s2, s3, s2
24013d2c:	eed6 5a26 	vfnms.f32	s11, s12, s13
24013d30:	eea1 7a26 	vfma.f32	s14, s2, s13
    Lfloat c2 = y0my1 + c1 - c3;
24013d34:	ee70 7a25 	vadd.f32	s15, s0, s11
24013d38:	ee77 7ac7 	vsub.f32	s15, s15, s14
    return ((c3 * xx + c2) * xx + c1) * xx + c0;
24013d3c:	eee7 7a02 	vfma.f32	s15, s14, s4
24013d40:	ee67 7a82 	vmul.f32	s15, s15, s4
24013d44:	eee6 7a26 	vfma.f32	s15, s12, s13
}
24013d48:	eee7 0a82 	vfma.f32	s1, s15, s4
24013d4c:	eeb0 0a60 	vmov.f32	s0, s1
24013d50:	4770      	bx	lr
24013d52:	bf00      	nop

24013d54 <LEAF_interpolation_linear>:
    alpha = LEAF_clip(0.0f, alpha, 1.0f);
24013d54:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24013d58:	ed9f 7a07 	vldr	s14, [pc, #28]	; 24013d78 <LEAF_interpolation_linear+0x24>
24013d5c:	fe81 1a67 	vminnm.f32	s2, s2, s15
24013d60:	fe81 1a07 	vmaxnm.f32	s2, s2, s14
    Lfloat omAlpha = 1.0f - alpha;
24013d64:	ee77 7ac1 	vsub.f32	s15, s15, s2
    out += B * alpha;
24013d68:	ee61 0a20 	vmul.f32	s1, s2, s1
}
24013d6c:	eee7 0a80 	vfma.f32	s1, s15, s0
24013d70:	eeb0 0a60 	vmov.f32	s0, s1
24013d74:	4770      	bx	lr
24013d76:	bf00      	nop
24013d78:	00000000 	.word	0x00000000

24013d7c <mtof>:
    if (f <= -1500.0f) return(0);
24013d7c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 24013dbc <mtof+0x40>
    else if (f > 1499.0f) return(mtof(1499.0f));
24013d80:	eddf 7a0f 	vldr	s15, [pc, #60]	; 24013dc0 <mtof+0x44>
24013d84:	e006      	b.n	24013d94 <mtof+0x18>
24013d86:	eeb4 0ae7 	vcmpe.f32	s0, s15
24013d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013d8e:	dd09      	ble.n	24013da4 <mtof+0x28>
24013d90:	eeb0 0a67 	vmov.f32	s0, s15
    if (f <= -1500.0f) return(0);
24013d94:	eeb4 0ac7 	vcmpe.f32	s0, s14
24013d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013d9c:	d8f3      	bhi.n	24013d86 <mtof+0xa>
24013d9e:	ed9f 0a09 	vldr	s0, [pc, #36]	; 24013dc4 <mtof+0x48>
}
24013da2:	4770      	bx	lr
    else return (8.17579891564f * expf(0.0577622650f * f));
24013da4:	eddf 7a08 	vldr	s15, [pc, #32]	; 24013dc8 <mtof+0x4c>
{
24013da8:	b508      	push	{r3, lr}
    else return (8.17579891564f * expf(0.0577622650f * f));
24013daa:	ee20 0a27 	vmul.f32	s0, s0, s15
24013dae:	f003 fead 	bl	24017b0c <expf>
24013db2:	eddf 7a06 	vldr	s15, [pc, #24]	; 24013dcc <mtof+0x50>
24013db6:	ee20 0a27 	vmul.f32	s0, s0, s15
}
24013dba:	bd08      	pop	{r3, pc}
24013dbc:	c4bb8000 	.word	0xc4bb8000
24013dc0:	44bb6000 	.word	0x44bb6000
24013dc4:	00000000 	.word	0x00000000
24013dc8:	3d6c9820 	.word	0x3d6c9820
24013dcc:	4102d013 	.word	0x4102d013

24013dd0 <faster_mtof>:
    x = 1.0f + (x * 0.00390625f);
24013dd0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24013dd4:	eddf 6a0c 	vldr	s13, [pc, #48]	; 24013e08 <faster_mtof+0x38>
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
24013dd8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 24013e0c <faster_mtof+0x3c>
    x = 1.0f + (x * 0.00390625f);
24013ddc:	eee0 7a26 	vfma.f32	s15, s0, s13
    x *= x; x *= x; x *= x; x *= x;
24013de0:	ee67 7aa7 	vmul.f32	s15, s15, s15
24013de4:	ee67 7aa7 	vmul.f32	s15, s15, s15
24013de8:	ee67 7aa7 	vmul.f32	s15, s15, s15
24013dec:	ee67 7aa7 	vmul.f32	s15, s15, s15
    x *= x; x *= x; x *= x; x *= x;
24013df0:	ee67 7aa7 	vmul.f32	s15, s15, s15
24013df4:	ee67 7aa7 	vmul.f32	s15, s15, s15
24013df8:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
24013dfc:	ee67 7aa7 	vmul.f32	s15, s15, s15
}
24013e00:	ee27 0a87 	vmul.f32	s0, s15, s14
24013e04:	4770      	bx	lr
24013e06:	bf00      	nop
24013e08:	396c9820 	.word	0x396c9820
24013e0c:	4102d013 	.word	0x4102d013

24013e10 <ftom>:
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
24013e10:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24013e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013e18:	dd0b      	ble.n	24013e32 <ftom+0x22>
24013e1a:	eddf 7a07 	vldr	s15, [pc, #28]	; 24013e38 <ftom+0x28>
{
24013e1e:	b508      	push	{r3, lr}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
24013e20:	ee20 0a27 	vmul.f32	s0, s0, s15
24013e24:	f003 fee6 	bl	24017bf4 <logf>
24013e28:	eddf 7a04 	vldr	s15, [pc, #16]	; 24013e3c <ftom+0x2c>
24013e2c:	ee20 0a27 	vmul.f32	s0, s0, s15
}
24013e30:	bd08      	pop	{r3, pc}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
24013e32:	ed9f 0a03 	vldr	s0, [pc, #12]	; 24013e40 <ftom+0x30>
}
24013e36:	4770      	bx	lr
24013e38:	3dfa7ed2 	.word	0x3dfa7ed2
24013e3c:	418a7fac 	.word	0x418a7fac
24013e40:	c4bb8000 	.word	0xc4bb8000

24013e44 <fasteratodb>:
{
24013e44:	b500      	push	{lr}
24013e46:	b083      	sub	sp, #12
    F = frexpf(fabsf(X), &E);
24013e48:	eeb0 0ac0 	vabs.f32	s0, s0
24013e4c:	a801      	add	r0, sp, #4
24013e4e:	f003 fe37 	bl	24017ac0 <frexpf>
    Y += -4.11852516267426f;
24013e52:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 24013e8c <fasteratodb+0x48>
24013e56:	eddf 7a0e 	vldr	s15, [pc, #56]	; 24013e90 <fasteratodb+0x4c>
    Y += 6.02197014179219f;
24013e5a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 24013e94 <fasteratodb+0x50>
    Y += -4.11852516267426f;
24013e5e:	eee0 7a06 	vfma.f32	s15, s0, s12
    Y += E;
24013e62:	eddf 5a0d 	vldr	s11, [pc, #52]	; 24013e98 <fasteratodb+0x54>
	return 20.0f*log10f_fast(a);
24013e66:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 24013e9c <fasteratodb+0x58>
    Y += -4.11852516267426f;
24013e6a:	eef0 6a67 	vmov.f32	s13, s15
    Y += E;
24013e6e:	eddd 7a01 	vldr	s15, [sp, #4]
24013e72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    Y += 6.02197014179219f;
24013e76:	eea0 7a26 	vfma.f32	s14, s0, s13
    Y += E;
24013e7a:	ee77 7ae5 	vsub.f32	s15, s15, s11
24013e7e:	eee0 7a07 	vfma.f32	s15, s0, s14
}
24013e82:	ee27 0a86 	vmul.f32	s0, s15, s12
24013e86:	b003      	add	sp, #12
24013e88:	f85d fb04 	ldr.w	pc, [sp], #4
24013e8c:	3f9da1a8 	.word	0x3f9da1a8
24013e90:	c083caf5 	.word	0xc083caf5
24013e94:	40c0b3fb 	.word	0x40c0b3fb
24013e98:	404892e0 	.word	0x404892e0
24013e9c:	40c0a8c2 	.word	0x40c0a8c2

24013ea0 <fasterdbtoa>:
    x = 1.0f + (x * 0.00390625f);
24013ea0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24013ea4:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 24013ed0 <fasterdbtoa+0x30>
24013ea8:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
24013eac:	ee27 0aa7 	vmul.f32	s0, s15, s15
24013eb0:	ee20 0a00 	vmul.f32	s0, s0, s0
24013eb4:	ee20 0a00 	vmul.f32	s0, s0, s0
24013eb8:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
24013ebc:	ee20 0a00 	vmul.f32	s0, s0, s0
24013ec0:	ee20 0a00 	vmul.f32	s0, s0, s0
24013ec4:	ee20 0a00 	vmul.f32	s0, s0, s0

Lfloat fasterdbtoa(Lfloat db)
{
    //return powf(10.0f, db * 0.05f);
    return fasterexpf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
}
24013ec8:	ee20 0a00 	vmul.f32	s0, s0, s0
24013ecc:	4770      	bx	lr
24013ece:	bf00      	nop
24013ed0:	39ebc8e3 	.word	0x39ebc8e3

24013ed4 <maximum>:


Lfloat maximum (Lfloat num1, Lfloat num2)
{
    return (num1 > num2 ) ? num1 : num2;
}
24013ed4:	fe80 0a80 	vmaxnm.f32	s0, s1, s0
24013ed8:	4770      	bx	lr
24013eda:	bf00      	nop

24013edc <minimum>:

Lfloat minimum (Lfloat num1, Lfloat num2)
{
    return (num1 < num2 ) ? num1 : num2;
}
24013edc:	fe80 0ac0 	vminnm.f32	s0, s1, s0
24013ee0:	4770      	bx	lr
24013ee2:	bf00      	nop

24013ee4 <leaf_pool_init>:
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
}


void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
24013ee4:	b430      	push	{r4, r5}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
24013ee6:	6a03      	ldr	r3, [r0, #32]
24013ee8:	2510      	movs	r5, #16
    pool->usize  = 0;
24013eea:	2400      	movs	r4, #0
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
24013eec:	635d      	str	r5, [r3, #52]	; 0x34
    if (size < pool->leaf->header_size)
24013eee:	6a03      	ldr	r3, [r0, #32]
    pool->usize  = 0;
24013ef0:	e9c0 1409 	strd	r1, r4, [r0, #36]	; 0x24
    if (size < pool->leaf->header_size)
24013ef4:	6b5d      	ldr	r5, [r3, #52]	; 0x34
24013ef6:	42aa      	cmp	r2, r5
24013ef8:	bf38      	it	cc
24013efa:	462a      	movcc	r2, r5
    pool->msize  = size;
24013efc:	62c2      	str	r2, [r0, #44]	; 0x2c
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
24013efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24013f00:	1ad2      	subs	r2, r2, r3
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
24013f02:	440b      	add	r3, r1
24013f04:	600b      	str	r3, [r1, #0]
    mpool_create(memory, size, &leaf->_internal_mempool);
24013f06:	f100 031c 	add.w	r3, r0, #28
    node->next = next;
    node->prev = prev;
    node->size = size;
24013f0a:	60ca      	str	r2, [r1, #12]
    node->prev = prev;
24013f0c:	e9c1 4401 	strd	r4, r4, [r1, #4]
}
24013f10:	bc30      	pop	{r4, r5}
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
24013f12:	6301      	str	r1, [r0, #48]	; 0x30
    leaf->mempool = &leaf->_internal_mempool;
24013f14:	6183      	str	r3, [r0, #24]
}
24013f16:	4770      	bx	lr

24013f18 <mpool_alloc>:
{
24013f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
24013f1a:	684a      	ldr	r2, [r1, #4]
{
24013f1c:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
24013f1e:	6c93      	ldr	r3, [r2, #72]	; 0x48
24013f20:	3301      	adds	r3, #1
24013f22:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
24013f24:	694b      	ldr	r3, [r1, #20]
24013f26:	2b00      	cmp	r3, #0
24013f28:	d04a      	beq.n	24013fc0 <mpool_alloc+0xa8>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
24013f2a:	1dc4      	adds	r4, r0, #7
24013f2c:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
24013f30:	e002      	b.n	24013f38 <mpool_alloc+0x20>
        node_to_alloc = node_to_alloc->next;
24013f32:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
24013f34:	2b00      	cmp	r3, #0
24013f36:	d043      	beq.n	24013fc0 <mpool_alloc+0xa8>
    while (node_to_alloc->size < size_to_alloc)
24013f38:	68da      	ldr	r2, [r3, #12]
24013f3a:	42a2      	cmp	r2, r4
24013f3c:	d3f9      	bcc.n	24013f32 <mpool_alloc+0x1a>
    node_to_alloc->size = size_to_alloc;
24013f3e:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
24013f40:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
24013f42:	f8dc 1004 	ldr.w	r1, [ip, #4]
24013f46:	6b49      	ldr	r1, [r1, #52]	; 0x34
24013f48:	4281      	cmp	r1, r0
24013f4a:	d246      	bcs.n	24013fda <mpool_alloc+0xc2>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24013f4c:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
24013f50:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
24013f52:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24013f54:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
24013f56:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
24013f58:	1915      	adds	r5, r2, r4
                               node_to_alloc->prev,
24013f5a:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
24013f5e:	4429      	add	r1, r5
24013f60:	5111      	str	r1, [r2, r4]
    node->size = size;
24013f62:	60e8      	str	r0, [r5, #12]
    node->prev = prev;
24013f64:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
24013f68:	f8dc 2014 	ldr.w	r2, [ip, #20]
24013f6c:	429a      	cmp	r2, r3
        pool->head = new_node;
24013f6e:	bf08      	it	eq
24013f70:	f8cc 5014 	streq.w	r5, [ip, #20]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
24013f74:	685a      	ldr	r2, [r3, #4]
24013f76:	b10a      	cbz	r2, 24013f7c <mpool_alloc+0x64>
    {
        // Close the link
        node->next->prev = node->prev;
24013f78:	6899      	ldr	r1, [r3, #8]
24013f7a:	6091      	str	r1, [r2, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
24013f7c:	689a      	ldr	r2, [r3, #8]
24013f7e:	b10a      	cbz	r2, 24013f84 <mpool_alloc+0x6c>
    {
        // Close the link
        node->prev->next = node->next;
24013f80:	6859      	ldr	r1, [r3, #4]
24013f82:	6051      	str	r1, [r2, #4]
    }
    
    node->next = NULL;
24013f84:	2500      	movs	r5, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
24013f86:	68d8      	ldr	r0, [r3, #12]
    node->prev = NULL;
24013f88:	e9c3 5501 	strd	r5, r5, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
24013f8c:	f8dc 1004 	ldr.w	r1, [ip, #4]
24013f90:	f8dc 200c 	ldr.w	r2, [ip, #12]
24013f94:	6b4c      	ldr	r4, [r1, #52]	; 0x34
24013f96:	4422      	add	r2, r4
24013f98:	4402      	add	r2, r0
24013f9a:	f8cc 200c 	str.w	r2, [ip, #12]
    if (pool->leaf->clearOnAllocation > 0)
24013f9e:	694a      	ldr	r2, [r1, #20]
24013fa0:	42aa      	cmp	r2, r5
24013fa2:	dd0b      	ble.n	24013fbc <mpool_alloc+0xa4>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
24013fa4:	68da      	ldr	r2, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
24013fa6:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
24013fa8:	b14a      	cbz	r2, 24013fbe <mpool_alloc+0xa6>
24013faa:	1e41      	subs	r1, r0, #1
24013fac:	460a      	mov	r2, r1
24013fae:	f801 5f01 	strb.w	r5, [r1, #1]!
24013fb2:	68dc      	ldr	r4, [r3, #12]
24013fb4:	3202      	adds	r2, #2
24013fb6:	1a12      	subs	r2, r2, r0
24013fb8:	42a2      	cmp	r2, r4
24013fba:	d3f7      	bcc.n	24013fac <mpool_alloc+0x94>
        char* new_pool = (char*)node_to_alloc->pool;
24013fbc:	6818      	ldr	r0, [r3, #0]
}
24013fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
24013fc0:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
24013fc4:	1a9b      	subs	r3, r3, r2
24013fc6:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24013fc8:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
24013fcc:	bf8c      	ite	hi
24013fce:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24013fd0:	2100      	movls	r1, #0
24013fd2:	f003 f875 	bl	240170c0 <LEAF_internalErrorCallback>
        return NULL;
24013fd6:	2000      	movs	r0, #0
}
24013fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
24013fda:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
24013fdc:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
24013fde:	e7c3      	b.n	24013f68 <mpool_alloc+0x50>

24013fe0 <mpool_calloc>:
{
24013fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
24013fe2:	684a      	ldr	r2, [r1, #4]
{
24013fe4:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
24013fe6:	6c93      	ldr	r3, [r2, #72]	; 0x48
24013fe8:	3301      	adds	r3, #1
24013fea:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
24013fec:	694b      	ldr	r3, [r1, #20]
24013fee:	2b00      	cmp	r3, #0
24013ff0:	d044      	beq.n	2401407c <mpool_calloc+0x9c>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
24013ff2:	1dc4      	adds	r4, r0, #7
24013ff4:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
24013ff8:	e002      	b.n	24014000 <mpool_calloc+0x20>
        node_to_alloc = node_to_alloc->next;
24013ffa:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
24013ffc:	2b00      	cmp	r3, #0
24013ffe:	d03d      	beq.n	2401407c <mpool_calloc+0x9c>
    while (node_to_alloc->size < size_to_alloc)
24014000:	68da      	ldr	r2, [r3, #12]
24014002:	42a2      	cmp	r2, r4
24014004:	d3f9      	bcc.n	24013ffa <mpool_calloc+0x1a>
    node_to_alloc->size = size_to_alloc;
24014006:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
24014008:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
2401400a:	f8dc 1004 	ldr.w	r1, [ip, #4]
2401400e:	6b49      	ldr	r1, [r1, #52]	; 0x34
24014010:	4281      	cmp	r1, r0
24014012:	d240      	bcs.n	24014096 <mpool_calloc+0xb6>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24014014:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
24014018:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
2401401a:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
2401401c:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
2401401e:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
24014020:	1915      	adds	r5, r2, r4
                               node_to_alloc->prev,
24014022:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
24014026:	4429      	add	r1, r5
24014028:	5111      	str	r1, [r2, r4]
    node->size = size;
2401402a:	60e8      	str	r0, [r5, #12]
    node->prev = prev;
2401402c:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
24014030:	f8dc 2014 	ldr.w	r2, [ip, #20]
24014034:	429a      	cmp	r2, r3
        pool->head = new_node;
24014036:	bf08      	it	eq
24014038:	f8cc 5014 	streq.w	r5, [ip, #20]
    if (node->next != NULL)
2401403c:	685a      	ldr	r2, [r3, #4]
2401403e:	b10a      	cbz	r2, 24014044 <mpool_calloc+0x64>
        node->next->prev = node->prev;
24014040:	6899      	ldr	r1, [r3, #8]
24014042:	6091      	str	r1, [r2, #8]
    if (node->prev != NULL)
24014044:	689a      	ldr	r2, [r3, #8]
24014046:	b10a      	cbz	r2, 2401404c <mpool_calloc+0x6c>
        node->prev->next = node->next;
24014048:	6859      	ldr	r1, [r3, #4]
2401404a:	6051      	str	r1, [r2, #4]
    node->next = NULL;
2401404c:	2200      	movs	r2, #0
    node->prev = NULL;
2401404e:	e9c3 2201 	strd	r2, r2, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
24014052:	f8dc 1004 	ldr.w	r1, [ip, #4]
24014056:	f8dc 000c 	ldr.w	r0, [ip, #12]
2401405a:	6b49      	ldr	r1, [r1, #52]	; 0x34
2401405c:	4401      	add	r1, r0
2401405e:	68d8      	ldr	r0, [r3, #12]
24014060:	4401      	add	r1, r0
24014062:	f8cc 100c 	str.w	r1, [ip, #12]
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
24014066:	68d9      	ldr	r1, [r3, #12]
24014068:	b131      	cbz	r1, 24014078 <mpool_calloc+0x98>
2401406a:	4610      	mov	r0, r2
2401406c:	6819      	ldr	r1, [r3, #0]
2401406e:	5488      	strb	r0, [r1, r2]
24014070:	3201      	adds	r2, #1
24014072:	68d9      	ldr	r1, [r3, #12]
24014074:	4291      	cmp	r1, r2
24014076:	d8f9      	bhi.n	2401406c <mpool_calloc+0x8c>
    return node_to_alloc->pool;
24014078:	6818      	ldr	r0, [r3, #0]
}
2401407a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
2401407c:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
24014080:	1a9b      	subs	r3, r3, r2
24014082:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24014084:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
24014088:	bf8c      	ite	hi
2401408a:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
2401408c:	2100      	movls	r1, #0
2401408e:	f003 f817 	bl	240170c0 <LEAF_internalErrorCallback>
        return NULL;
24014092:	2000      	movs	r0, #0
}
24014094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
24014096:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
24014098:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
2401409a:	e7c9      	b.n	24014030 <mpool_calloc+0x50>

2401409c <mpool_free>:
{
2401409c:	b470      	push	{r4, r5, r6}
    pool->leaf->freeCount++;
2401409e:	684a      	ldr	r2, [r1, #4]
240140a0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
240140a2:	3301      	adds	r3, #1
240140a4:	64d3      	str	r3, [r2, #76]	; 0x4c
    mpool_node_t* freed_node = (mpool_node_t*) (ptr - pool->leaf->header_size);
240140a6:	684e      	ldr	r6, [r1, #4]
    pool->usize -= pool->leaf->header_size + freed_node->size;
240140a8:	68cb      	ldr	r3, [r1, #12]
    mpool_node_t* freed_node = (mpool_node_t*) (ptr - pool->leaf->header_size);
240140aa:	6b72      	ldr	r2, [r6, #52]	; 0x34
240140ac:	1a84      	subs	r4, r0, r2
    pool->usize -= pool->leaf->header_size + freed_node->size;
240140ae:	1a9b      	subs	r3, r3, r2
240140b0:	68e2      	ldr	r2, [r4, #12]
240140b2:	1a9a      	subs	r2, r3, r2
    mpool_node_t* other_node = pool->head;
240140b4:	694b      	ldr	r3, [r1, #20]
    pool->usize -= pool->leaf->header_size + freed_node->size;
240140b6:	60ca      	str	r2, [r1, #12]
    while (other_node != NULL)
240140b8:	2b00      	cmp	r3, #0
240140ba:	d051      	beq.n	24014160 <mpool_free+0xc4>
        if ((long) other_node < (long) pool->mpool ||
240140bc:	688a      	ldr	r2, [r1, #8]
    node->next = NULL;
240140be:	2000      	movs	r0, #0
        if ((long) other_node < (long) pool->mpool ||
240140c0:	429a      	cmp	r2, r3
240140c2:	dc17      	bgt.n	240140f4 <mpool_free+0x58>
            (long) other_node >= (((long) pool->mpool) + pool->msize))
240140c4:	690d      	ldr	r5, [r1, #16]
240140c6:	442a      	add	r2, r5
        if ((long) other_node < (long) pool->mpool ||
240140c8:	429a      	cmp	r2, r3
240140ca:	d913      	bls.n	240140f4 <mpool_free+0x58>
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
240140cc:	6b72      	ldr	r2, [r6, #52]	; 0x34
240140ce:	68e6      	ldr	r6, [r4, #12]
        next_node = other_node->next;
240140d0:	685d      	ldr	r5, [r3, #4]
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
240140d2:	eb02 0c06 	add.w	ip, r2, r6
240140d6:	eb0c 0604 	add.w	r6, ip, r4
240140da:	42b3      	cmp	r3, r6
240140dc:	d029      	beq.n	24014132 <mpool_free+0x96>
        else if (((long) other_node) + (pool->leaf->header_size + other_node->size) == (long) freed_node)
240140de:	68de      	ldr	r6, [r3, #12]
240140e0:	441a      	add	r2, r3
240140e2:	4432      	add	r2, r6
240140e4:	4294      	cmp	r4, r2
240140e6:	d00a      	beq.n	240140fe <mpool_free+0x62>
    while (other_node != NULL)
240140e8:	b1e5      	cbz	r5, 24014124 <mpool_free+0x88>
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
240140ea:	462b      	mov	r3, r5
        if ((long) other_node < (long) pool->mpool ||
240140ec:	688a      	ldr	r2, [r1, #8]
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
240140ee:	684e      	ldr	r6, [r1, #4]
        if ((long) other_node < (long) pool->mpool ||
240140f0:	429a      	cmp	r2, r3
240140f2:	dde7      	ble.n	240140c4 <mpool_free+0x28>
            LEAF_internalErrorCallback(pool->leaf, LEAFInvalidFree);
240140f4:	4630      	mov	r0, r6
240140f6:	2102      	movs	r1, #2
}
240140f8:	bc70      	pop	{r4, r5, r6}
            LEAF_internalErrorCallback(pool->leaf, LEAFInvalidFree);
240140fa:	f002 bfe1 	b.w	240170c0 <LEAF_internalErrorCallback>
            other_node->size += pool->leaf->header_size + freed_node->size;
240140fe:	4466      	add	r6, ip
24014100:	60de      	str	r6, [r3, #12]
            if (other_node != pool->head)
24014102:	694a      	ldr	r2, [r1, #20]
24014104:	429a      	cmp	r2, r3
24014106:	d028      	beq.n	2401415a <mpool_free+0xbe>
    if (node->next != NULL)
24014108:	b10d      	cbz	r5, 2401410e <mpool_free+0x72>
        node->next->prev = node->prev;
2401410a:	689a      	ldr	r2, [r3, #8]
2401410c:	60aa      	str	r2, [r5, #8]
    if (node->prev != NULL)
2401410e:	689a      	ldr	r2, [r3, #8]
24014110:	b10a      	cbz	r2, 24014116 <mpool_free+0x7a>
        node->prev->next = node->next;
24014112:	685c      	ldr	r4, [r3, #4]
24014114:	6054      	str	r4, [r2, #4]
    node->next = NULL;
24014116:	461c      	mov	r4, r3
    node->prev = NULL;
24014118:	e9c3 0001 	strd	r0, r0, [r3, #4]
                other_node->next = pool->head;
2401411c:	694a      	ldr	r2, [r1, #20]
2401411e:	605a      	str	r2, [r3, #4]
    while (other_node != NULL)
24014120:	2d00      	cmp	r5, #0
24014122:	d1e2      	bne.n	240140ea <mpool_free+0x4e>
    freed_node->next = pool->head;
24014124:	694b      	ldr	r3, [r1, #20]
24014126:	6063      	str	r3, [r4, #4]
    if (pool->head != NULL) pool->head->prev = freed_node;
24014128:	b103      	cbz	r3, 2401412c <mpool_free+0x90>
2401412a:	609c      	str	r4, [r3, #8]
    pool->head = freed_node;
2401412c:	614c      	str	r4, [r1, #20]
}
2401412e:	bc70      	pop	{r4, r5, r6}
24014130:	4770      	bx	lr
            freed_node->size += pool->leaf->header_size + other_node->size;
24014132:	68da      	ldr	r2, [r3, #12]
24014134:	4462      	add	r2, ip
24014136:	60e2      	str	r2, [r4, #12]
            if (other_node == pool->head) pool->head = pool->head->next;
24014138:	694a      	ldr	r2, [r1, #20]
2401413a:	429a      	cmp	r2, r3
2401413c:	d00a      	beq.n	24014154 <mpool_free+0xb8>
    if (node->next != NULL)
2401413e:	685a      	ldr	r2, [r3, #4]
24014140:	b10a      	cbz	r2, 24014146 <mpool_free+0xaa>
        node->next->prev = node->prev;
24014142:	689e      	ldr	r6, [r3, #8]
24014144:	6096      	str	r6, [r2, #8]
    if (node->prev != NULL)
24014146:	689a      	ldr	r2, [r3, #8]
24014148:	b10a      	cbz	r2, 2401414e <mpool_free+0xb2>
        node->prev->next = node->next;
2401414a:	685e      	ldr	r6, [r3, #4]
2401414c:	6056      	str	r6, [r2, #4]
    node->prev = NULL;
2401414e:	e9c3 0001 	strd	r0, r0, [r3, #4]
}
24014152:	e7c9      	b.n	240140e8 <mpool_free+0x4c>
            if (other_node == pool->head) pool->head = pool->head->next;
24014154:	685a      	ldr	r2, [r3, #4]
24014156:	614a      	str	r2, [r1, #20]
24014158:	e7f1      	b.n	2401413e <mpool_free+0xa2>
                pool->head = pool->head->next;
2401415a:	461c      	mov	r4, r3
2401415c:	614d      	str	r5, [r1, #20]
                freed_node = other_node;
2401415e:	e7c3      	b.n	240140e8 <mpool_free+0x4c>
    freed_node->next = pool->head;
24014160:	6063      	str	r3, [r4, #4]
    if (pool->head != NULL) pool->head->prev = freed_node;
24014162:	e7e3      	b.n	2401412c <mpool_free+0x90>

24014164 <tMempool_init>:

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
24014164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
    _tMempool* mm = *mem;
24014166:	699f      	ldr	r7, [r3, #24]
{
24014168:	4606      	mov	r6, r0
2401416a:	460c      	mov	r4, r1
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
2401416c:	2018      	movs	r0, #24
2401416e:	4639      	mov	r1, r7
{
24014170:	4615      	mov	r5, r2
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
24014172:	f7ff fed1 	bl	24013f18 <mpool_alloc>
24014176:	6030      	str	r0, [r6, #0]
    m->leaf = mm->leaf;
24014178:	687b      	ldr	r3, [r7, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
2401417a:	2210      	movs	r2, #16
    pool->usize  = 0;
2401417c:	2100      	movs	r1, #0
    m->leaf = mm->leaf;
2401417e:	6043      	str	r3, [r0, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
24014180:	635a      	str	r2, [r3, #52]	; 0x34
    if (size < pool->leaf->header_size)
24014182:	6843      	ldr	r3, [r0, #4]
    pool->usize  = 0;
24014184:	e9c0 4102 	strd	r4, r1, [r0, #8]
    if (size < pool->leaf->header_size)
24014188:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2401418a:	42aa      	cmp	r2, r5
2401418c:	bf38      	it	cc
2401418e:	462a      	movcc	r2, r5
    pool->msize  = size;
24014190:	6102      	str	r2, [r0, #16]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
24014192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24014194:	1ad2      	subs	r2, r2, r3
    node->pool = block_location + header_size;
24014196:	4423      	add	r3, r4
    node->prev = prev;
24014198:	e9c4 1101 	strd	r1, r1, [r4, #4]
    node->pool = block_location + header_size;
2401419c:	6023      	str	r3, [r4, #0]
    node->size = size;
2401419e:	60e2      	str	r2, [r4, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
240141a0:	6144      	str	r4, [r0, #20]
}
240141a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

240141a4 <tCycle_init>:


#if LEAF_INCLUDE_SINE_TABLE
// Cycle
void    tCycle_init(tCycle* const cy, LEAF* const leaf)
{
240141a4:	b538      	push	{r3, r4, r5, lr}
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
240141a6:	698c      	ldr	r4, [r1, #24]
{
240141a8:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
240141aa:	2018      	movs	r0, #24
240141ac:	4621      	mov	r1, r4
240141ae:	f7ff feb3 	bl	24013f18 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
240141b2:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
240141b4:	6028      	str	r0, [r5, #0]
    c->phase    =  0;
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
    c->mask = SINE_TABLE_SIZE - 1;
240141b6:	f240 72ff 	movw	r2, #2047	; 0x7ff
    c->mempool = m;
240141ba:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
240141bc:	6861      	ldr	r1, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240141be:	ed9f 7a06 	vldr	s14, [pc, #24]	; 240141d8 <tCycle_init+0x34>
    c->phase    =  0;
240141c2:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240141c6:	edd1 7a01 	vldr	s15, [r1, #4]
    c->mask = SINE_TABLE_SIZE - 1;
240141ca:	6142      	str	r2, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240141cc:	ee67 7a87 	vmul.f32	s15, s15, s14
240141d0:	edc0 7a04 	vstr	s15, [r0, #16]
}
240141d4:	bd38      	pop	{r3, r4, r5, pc}
240141d6:	bf00      	nop
240141d8:	4f800000 	.word	0x4f800000

240141dc <tCycle_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
Lfloat   tCycle_tick(tCycle* const cy)
{
    _tCycle* c = *cy;
240141dc:	6800      	ldr	r0, [r0, #0]
    c->phase += c->inc;
    // Wavetable synthesis
    idx = c->phase >> 21; //11 bit table 
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
    
    samp0 = __leaf_table_sinewave[idx];
240141de:	4910      	ldr	r1, [pc, #64]	; (24014220 <tCycle_tick+0x44>)
    idx = (idx + 1) & c->mask;
    samp1 = __leaf_table_sinewave[idx];
    
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
240141e0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 24014224 <tCycle_tick+0x48>
    c->phase += c->inc;
240141e4:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
240141e8:	4413      	add	r3, r2
    idx = c->phase >> 21; //11 bit table 
240141ea:	0d5a      	lsrs	r2, r3, #21
    c->phase += c->inc;
240141ec:	6043      	str	r3, [r0, #4]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
240141ee:	f3c3 0314 	ubfx	r3, r3, #0, #21
    idx = (idx + 1) & c->mask;
240141f2:	6940      	ldr	r0, [r0, #20]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
240141f4:	ee07 3a90 	vmov	s15, r3
    samp0 = __leaf_table_sinewave[idx];
240141f8:	eb01 0382 	add.w	r3, r1, r2, lsl #2
    idx = (idx + 1) & c->mask;
240141fc:	3201      	adds	r2, #1
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
240141fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    samp0 = __leaf_table_sinewave[idx];
24014202:	ed93 0a00 	vldr	s0, [r3]
    idx = (idx + 1) & c->mask;
24014206:	4002      	ands	r2, r0
    samp1 = __leaf_table_sinewave[idx];
24014208:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
2401420c:	ee67 7a87 	vmul.f32	s15, s15, s14
24014210:	ed91 7a00 	vldr	s14, [r1]
24014214:	ee37 7a40 	vsub.f32	s14, s14, s0
}
24014218:	eea7 0a27 	vfma.f32	s0, s14, s15
2401421c:	4770      	bx	lr
2401421e:	bf00      	nop
24014220:	24022648 	.word	0x24022648
24014224:	35000004 	.word	0x35000004

24014228 <tCycle_setFreq>:

void     tCycle_setFreq(tCycle* const cy, Lfloat freq)
{
    _tCycle* c = *cy;
24014228:	6803      	ldr	r3, [r0, #0]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401422a:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
2401422e:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24014232:	ee20 0a27 	vmul.f32	s0, s0, s15
24014236:	eebd 0ac0 	vcvt.s32.f32	s0, s0
2401423a:	ed83 0a02 	vstr	s0, [r3, #8]
}
2401423e:	4770      	bx	lr

24014240 <tCycle_setPhase>:

void    tCycle_setPhase(tCycle* const cy, Lfloat phase)
{
    _tCycle* c = *cy;
    
    int i = phase;
24014240:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
24014244:	ed9f 7a06 	vldr	s14, [pc, #24]	; 24014260 <tCycle_setPhase+0x20>
    _tCycle* c = *cy;
24014248:	6803      	ldr	r3, [r0, #0]
    phase -= i;
2401424a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401424e:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
24014252:	ee20 0a07 	vmul.f32	s0, s0, s14
24014256:	eebc 0ac0 	vcvt.u32.f32	s0, s0
2401425a:	ed83 0a01 	vstr	s0, [r3, #4]
}
2401425e:	4770      	bx	lr
24014260:	4f800000 	.word	0x4f800000

24014264 <tCycle_setSampleRate>:

void     tCycle_setSampleRate (tCycle* const cy, Lfloat sr)
{
    _tCycle* c = *cy;
    
    c->invSampleRateTimesTwoTo32 = (1.0f/sr) * TWO_TO_32;
24014264:	eddf 7a0a 	vldr	s15, [pc, #40]	; 24014290 <tCycle_setSampleRate+0x2c>
    _tCycle* c = *cy;
24014268:	6803      	ldr	r3, [r0, #0]
    c->invSampleRateTimesTwoTo32 = (1.0f/sr) * TWO_TO_32;
2401426a:	ee87 7a80 	vdiv.f32	s14, s15, s0
    tCycle_setFreq(cy, c->freq);
2401426e:	edd3 7a03 	vldr	s15, [r3, #12]
    c->invSampleRateTimesTwoTo32 = (1.0f/sr) * TWO_TO_32;
24014272:	ed83 7a04 	vstr	s14, [r3, #16]
    _tCycle* c = *cy;
24014276:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24014278:	ed93 7a04 	vldr	s14, [r3, #16]
    c->freq  = freq;
2401427c:	edc3 7a03 	vstr	s15, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24014280:	ee67 7a87 	vmul.f32	s15, s15, s14
24014284:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24014288:	edc3 7a02 	vstr	s15, [r3, #8]
}
2401428c:	4770      	bx	lr
2401428e:	bf00      	nop
24014290:	4f800000 	.word	0x4f800000

24014294 <tPBTriangle_init>:

//==============================================================================

/* tTri: Anti-aliased Triangle waveform. */
void    tPBTriangle_init          (tPBTriangle* const osc, LEAF* const leaf)
{
24014294:	b538      	push	{r3, r4, r5, lr}
    tPBTriangle_initToPool(osc, &leaf->mempool);
}

void    tPBTriangle_initToPool    (tPBTriangle* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
24014296:	698c      	ldr	r4, [r1, #24]
{
24014298:	4605      	mov	r5, r0
    _tPBTriangle* c = *osc = (_tPBTriangle*) mpool_alloc(sizeof(_tPBTriangle), m);
2401429a:	2020      	movs	r0, #32
2401429c:	4621      	mov	r1, r4
2401429e:	f7ff fe3b 	bl	24013f18 <mpool_alloc>
240142a2:	6028      	str	r0, [r5, #0]
    c->mempool = m;
240142a4:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;

    c->invSampleRate = leaf->invSampleRate;
    c->inc      =  0.0f;
    c->phase    =  0.25f;
    c->skew     =  0.5f;
240142a6:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->invSampleRate = leaf->invSampleRate;
240142aa:	6861      	ldr	r1, [r4, #4]
    c->inc      =  0.0f;
240142ac:	2300      	movs	r3, #0
    c->phase    =  0.25f;
240142ae:	f04f 5c7a 	mov.w	ip, #1048576000	; 0x3e800000
    c->invSampleRate = leaf->invSampleRate;
240142b2:	6849      	ldr	r1, [r1, #4]
    c->phase    =  0.25f;
240142b4:	f8c0 c004 	str.w	ip, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
240142b8:	61c1      	str	r1, [r0, #28]
    c->inc      =  0.0f;
240142ba:	6083      	str	r3, [r0, #8]
    c->skew     =  0.5f;
240142bc:	6102      	str	r2, [r0, #16]
    c->oneMinusSkew     =  0.5f;
240142be:	6142      	str	r2, [r0, #20]
    c->lastOut  =  0.0f;
240142c0:	6183      	str	r3, [r0, #24]
}
240142c2:	bd38      	pop	{r3, r4, r5, pc}

240142c4 <tPBTriangle_setSkew>:
    c->freq  = freq;
    c->inc = freq * c->invSampleRate;
}

void    tPBTriangle_setSkew       (tPBTriangle* const osc, Lfloat mySkew)
{
240142c4:	eef0 0a40 	vmov.f32	s1, s0
    _tPBTriangle* c = *osc;

    mySkew = LEAF_clip(0.01f, mySkew, 0.99f);
240142c8:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 240142f8 <tPBTriangle_setSkew+0x34>
240142cc:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 240142fc <tPBTriangle_setSkew+0x38>
{
240142d0:	b510      	push	{r4, lr}
    _tPBTriangle* c = *osc;
240142d2:	6804      	ldr	r4, [r0, #0]
    mySkew = LEAF_clip(0.01f, mySkew, 0.99f);
240142d4:	f01f fb00 	bl	240338d8 <__LEAF_clip_veneer>
    c->skew = (mySkew + 1.0f) * 0.5f;
240142d8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240142dc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
240142e0:	ee30 0a27 	vadd.f32	s0, s0, s15
240142e4:	ee20 0a07 	vmul.f32	s0, s0, s14
    c->oneMinusSkew = 1.0f - c->skew;
240142e8:	ee77 7ac0 	vsub.f32	s15, s15, s0
    c->skew = (mySkew + 1.0f) * 0.5f;
240142ec:	ed84 0a04 	vstr	s0, [r4, #16]
    c->oneMinusSkew = 1.0f - c->skew;
240142f0:	edc4 7a05 	vstr	s15, [r4, #20]
}
240142f4:	bd10      	pop	{r4, pc}
240142f6:	bf00      	nop
240142f8:	3f7d70a4 	.word	0x3f7d70a4
240142fc:	3c23d70a 	.word	0x3c23d70a

24014300 <tPBSineTriangle_init>:

//==============================================================================

/* tPBSineTriangle: Anti-aliased Triangle waveform with sine wave, crossfaded between them with shape param. */
void    tPBSineTriangle_init          (tPBSineTriangle* const osc, LEAF* const leaf)
{
24014300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	tPBSineTriangle_initToPool(osc, &leaf->mempool);
}

void    tPBSineTriangle_initToPool    (tPBSineTriangle* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
24014302:	698e      	ldr	r6, [r1, #24]
{
24014304:	4607      	mov	r7, r0
24014306:	460d      	mov	r5, r1
    _tPBSineTriangle* c = *osc = (_tPBSineTriangle*) mpool_alloc(sizeof(_tPBSineTriangle), m);
24014308:	2028      	movs	r0, #40	; 0x28
2401430a:	4631      	mov	r1, r6
2401430c:	f7ff fe04 	bl	24013f18 <mpool_alloc>
24014310:	6038      	str	r0, [r7, #0]
    c->mempool = m;
24014312:	6006      	str	r6, [r0, #0]
    _tPBSineTriangle* c = *osc = (_tPBSineTriangle*) mpool_alloc(sizeof(_tPBSineTriangle), m);
24014314:	4604      	mov	r4, r0
    _tMempool* m = *mp;
24014316:	69ad      	ldr	r5, [r5, #24]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
24014318:	2018      	movs	r0, #24
    LEAF* leaf = c->mempool->leaf;
2401431a:	6876      	ldr	r6, [r6, #4]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
2401431c:	4629      	mov	r1, r5
2401431e:	f7ff fdfb 	bl	24013f18 <mpool_alloc>
    c->inc      =  0;
24014322:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
24014324:	61e0      	str	r0, [r4, #28]
    c->mask = SINE_TABLE_SIZE - 1;
24014326:	f240 71ff 	movw	r1, #2047	; 0x7ff
    c->mempool = m;
2401432a:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
2401432c:	686a      	ldr	r2, [r5, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2401432e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 24014364 <tPBSineTriangle_init+0x64>
    c->phase    =  0;
24014332:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24014336:	edd2 7a01 	vldr	s15, [r2, #4]
    tCycle_initToPool(&c->sine, mp);
    c->invSampleRate = leaf->invSampleRate;
    c->inc      =  0.0f;
    c->phase    =  0.25f;
2401433a:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
    c->mask = SINE_TABLE_SIZE - 1;
2401433e:	6141      	str	r1, [r0, #20]
    c->inc      =  0.0f;
24014340:	2300      	movs	r3, #0
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24014342:	ee67 7a87 	vmul.f32	s15, s15, s14
    c->shape     =  0.0f;
    c->skew 	 = 0.5f;
24014346:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2401434a:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRate = leaf->invSampleRate;
2401434e:	6870      	ldr	r0, [r6, #4]
    c->phase    =  0.25f;
24014350:	6062      	str	r2, [r4, #4]
    c->oneMinusShape = 1.0f;
24014352:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->inc      =  0.0f;
24014356:	60a3      	str	r3, [r4, #8]
    c->invSampleRate = leaf->invSampleRate;
24014358:	61a0      	str	r0, [r4, #24]
    c->shape     =  0.0f;
2401435a:	6123      	str	r3, [r4, #16]
    c->lastOut  =  0.0f;
2401435c:	6163      	str	r3, [r4, #20]
    c->skew 	 = 0.5f;
2401435e:	6261      	str	r1, [r4, #36]	; 0x24
    c->oneMinusShape = 1.0f;
24014360:	6222      	str	r2, [r4, #32]
}
24014362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24014364:	4f800000 	.word	0x4f800000

24014368 <tPBSineTriangle_setShape>:

void    tPBSineTriangle_setShape       (tPBSineTriangle* const osc, Lfloat shape)
{
    _tPBSineTriangle* c = *osc;
    c->shape = -1.0f * shape; // inverted because triangle output is inverted
    c->oneMinusShape = 1.0f - shape;
24014368:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tPBSineTriangle* c = *osc;
2401436c:	6803      	ldr	r3, [r0, #0]
    c->shape = -1.0f * shape; // inverted because triangle output is inverted
2401436e:	eeb1 7a40 	vneg.f32	s14, s0
    c->oneMinusShape = 1.0f - shape;
24014372:	ee77 7ac0 	vsub.f32	s15, s15, s0
    c->shape = -1.0f * shape; // inverted because triangle output is inverted
24014376:	ed83 7a04 	vstr	s14, [r3, #16]
    c->oneMinusShape = 1.0f - shape;
2401437a:	edc3 7a08 	vstr	s15, [r3, #32]
}
2401437e:	4770      	bx	lr

24014380 <tPBPulse_init>:
}
//==============================================================================

/* tPulse: Anti-aliased pulse waveform. */
void    tPBPulse_init        (tPBPulse* const osc, LEAF* const leaf)
{
24014380:	b538      	push	{r3, r4, r5, lr}
    tPBPulse_initToPool(osc, &leaf->mempool);
}

void    tPBPulse_initToPool  (tPBPulse* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
24014382:	698c      	ldr	r4, [r1, #24]
{
24014384:	4605      	mov	r5, r0
    _tPBPulse* c = *osc = (_tPBPulse*) mpool_alloc(sizeof(_tPBPulse), m);
24014386:	2020      	movs	r0, #32
24014388:	4621      	mov	r1, r4
2401438a:	f7ff fdc5 	bl	24013f18 <mpool_alloc>
2401438e:	6028      	str	r0, [r5, #0]
    c->mempool = m;
24014390:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
    c->inc      =  0;
24014392:	2200      	movs	r2, #0
    c->invSampleRate = leaf->invSampleRate;
24014394:	6861      	ldr	r1, [r4, #4]
    c->phase    =  0;
    c->width     =  (0.5f * TWO_TO_32);
24014396:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
2401439a:	eddf 7a08 	vldr	s15, [pc, #32]	; 240143bc <tPBPulse_init+0x3c>
    c->invSampleRate = leaf->invSampleRate;
2401439e:	ed91 7a01 	vldr	s14, [r1, #4]
    c->oneMinusWidth =  c->width;
    c->freq = 0.0f;
240143a2:	2100      	movs	r1, #0
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
240143a4:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->invSampleRate = leaf->invSampleRate;
240143a8:	ed80 7a06 	vstr	s14, [r0, #24]
    c->freq = 0.0f;
240143ac:	60c1      	str	r1, [r0, #12]
    c->phase    =  0;
240143ae:	e9c0 2201 	strd	r2, r2, [r0, #4]
    c->oneMinusWidth =  c->width;
240143b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
240143b6:	edc0 7a07 	vstr	s15, [r0, #28]
}
240143ba:	bd38      	pop	{r3, r4, r5, pc}
240143bc:	4f800000 	.word	0x4f800000

240143c0 <tPBPulse_setWidth>:
    }
    if (width > 0.95f)
    {
        width = 0.95f;
    }
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
240143c0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240143c4:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 240143f8 <tPBPulse_setWidth+0x38>
240143c8:	eddf 6a0c 	vldr	s13, [pc, #48]	; 240143fc <tPBPulse_setWidth+0x3c>
240143cc:	fe80 0a06 	vmaxnm.f32	s0, s0, s12
240143d0:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 24014400 <tPBPulse_setWidth+0x40>
240143d4:	fe80 0a66 	vminnm.f32	s0, s0, s13
240143d8:	ee77 7ac0 	vsub.f32	s15, s15, s0
    c->width = width * TWO_TO_32;
240143dc:	ee20 0a07 	vmul.f32	s0, s0, s14
    _tPBPulse* c = *osc;
240143e0:	6803      	ldr	r3, [r0, #0]
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
240143e2:	ee67 7a87 	vmul.f32	s15, s15, s14
    c->width = width * TWO_TO_32;
240143e6:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
240143ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    c->width = width * TWO_TO_32;
240143ee:	ed83 0a04 	vstr	s0, [r3, #16]
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
240143f2:	edc3 7a05 	vstr	s15, [r3, #20]
}
240143f6:	4770      	bx	lr
240143f8:	3d4ccccd 	.word	0x3d4ccccd
240143fc:	3f733333 	.word	0x3f733333
24014400:	4f800000 	.word	0x4f800000

24014404 <tPBSaw_init>:

//==============================================================================

/* tSawtooth: Anti-aliased Sawtooth waveform. */
void    tPBSaw_init          (tPBSaw* const osc, LEAF* const leaf)
{
24014404:	b538      	push	{r3, r4, r5, lr}
    tPBSaw_initToPool(osc, &leaf->mempool);
}

void    tPBSaw_initToPool    (tPBSaw* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
24014406:	698c      	ldr	r4, [r1, #24]
{
24014408:	4605      	mov	r5, r0
    _tPBSaw* c = *osc = (_tPBSaw*) mpool_alloc(sizeof(_tPBSaw), m);
2401440a:	2020      	movs	r0, #32
2401440c:	4621      	mov	r1, r4
2401440e:	f7ff fd83 	bl	24013f18 <mpool_alloc>
24014412:	6028      	str	r0, [r5, #0]
    c->mempool = m;
24014414:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
    c->inc      =  0;
24014416:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
24014418:	6861      	ldr	r1, [r4, #4]
    c->phase    =  0;
    c->freq = 0.0f;
2401441a:	2200      	movs	r2, #0
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
2401441c:	eddf 7a06 	vldr	s15, [pc, #24]	; 24014438 <tPBSaw_init+0x34>
    c->invSampleRate = leaf->invSampleRate;
24014420:	ed91 7a01 	vldr	s14, [r1, #4]
    c->freq = 0.0f;
24014424:	60c2      	str	r2, [r0, #12]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24014426:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->invSampleRate = leaf->invSampleRate;
2401442a:	ed80 7a04 	vstr	s14, [r0, #16]
    c->phase    =  0;
2401442e:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24014432:	edc0 7a05 	vstr	s15, [r0, #20]
}
24014436:	bd38      	pop	{r3, r4, r5, pc}
24014438:	4f800000 	.word	0x4f800000

2401443c <tPBSawSquare_init>:
//========================================================================


/* tSawtooth: Anti-aliased Sawtooth waveform. */
void    tPBSawSquare_init          (tPBSawSquare* const osc, LEAF* const leaf)
{
2401443c:	b538      	push	{r3, r4, r5, lr}
    tPBSawSquare_initToPool(osc, &leaf->mempool);
}

void    tPBSawSquare_initToPool    (tPBSawSquare* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
2401443e:	698c      	ldr	r4, [r1, #24]
{
24014440:	4605      	mov	r5, r0
    _tPBSawSquare* c = *osc = (_tPBSawSquare*) mpool_alloc(sizeof(_tPBSawSquare), m);
24014442:	2028      	movs	r0, #40	; 0x28
24014444:	4621      	mov	r1, r4
24014446:	f7ff fd67 	bl	24013f18 <mpool_alloc>
2401444a:	6028      	str	r0, [r5, #0]
    c->mempool = m;
2401444c:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
    c->inc      =  0;
2401444e:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
24014450:	6861      	ldr	r1, [r4, #4]
    c->phase    =  0;
    c->freq = 0.0f;
24014452:	2200      	movs	r2, #0
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24014454:	eddf 7a06 	vldr	s15, [pc, #24]	; 24014470 <tPBSawSquare_init+0x34>
    c->invSampleRate = leaf->invSampleRate;
24014458:	ed91 7a01 	vldr	s14, [r1, #4]
    c->freq = 0.0f;
2401445c:	60c2      	str	r2, [r0, #12]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
2401445e:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->invSampleRate = leaf->invSampleRate;
24014462:	ed80 7a04 	vstr	s14, [r0, #16]
    c->phase    =  0;
24014466:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
2401446a:	edc0 7a05 	vstr	s15, [r0, #20]
}
2401446e:	bd38      	pop	{r3, r4, r5, pc}
24014470:	4f800000 	.word	0x4f800000

24014474 <tPBSawSquare_setShape>:
void    tPBSawSquare_setShape      (tPBSawSquare* const osc, Lfloat inputShape)
{
    _tPBSawSquare* c = *osc;
    
    c->shape  = inputShape;
    c->oneMinusShape = 1.0f - inputShape;
24014474:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tPBSawSquare* c = *osc;
24014478:	6803      	ldr	r3, [r0, #0]
    c->shape  = inputShape;
2401447a:	ed83 0a08 	vstr	s0, [r3, #32]
    c->oneMinusShape = 1.0f - inputShape;
2401447e:	ee77 7ac0 	vsub.f32	s15, s15, s0
24014482:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
24014486:	4770      	bx	lr

24014488 <tNoise_init>:
};

//========================================================================
/* Noise */
void    tNoise_init(tNoise* const ns, NoiseType type, LEAF* const leaf)
{
24014488:	b570      	push	{r4, r5, r6, lr}
    tNoise_initToPool(ns, type, &leaf->mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
    _tMempool* m = *mp;
2401448a:	6995      	ldr	r5, [r2, #24]
{
2401448c:	4606      	mov	r6, r0
2401448e:	460c      	mov	r4, r1
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
24014490:	2018      	movs	r0, #24
24014492:	4629      	mov	r1, r5
24014494:	f7ff fd40 	bl	24013f18 <mpool_alloc>
24014498:	6030      	str	r0, [r6, #0]
    n->mempool = m;
2401449a:	6005      	str	r5, [r0, #0]
    LEAF* leaf = n->mempool->leaf;
2401449c:	686b      	ldr	r3, [r5, #4]
    
    n->type = type;
2401449e:	7104      	strb	r4, [r0, #4]
    n->rand = leaf->random;
240144a0:	691b      	ldr	r3, [r3, #16]
240144a2:	6143      	str	r3, [r0, #20]
}
240144a4:	bd70      	pop	{r4, r5, r6, pc}
240144a6:	bf00      	nop

240144a8 <tNoise_initToPool>:
{
240144a8:	b570      	push	{r4, r5, r6, lr}
    _tMempool* m = *mp;
240144aa:	6815      	ldr	r5, [r2, #0]
{
240144ac:	4606      	mov	r6, r0
240144ae:	460c      	mov	r4, r1
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
240144b0:	2018      	movs	r0, #24
240144b2:	4629      	mov	r1, r5
240144b4:	f7ff fd30 	bl	24013f18 <mpool_alloc>
240144b8:	6030      	str	r0, [r6, #0]
    n->mempool = m;
240144ba:	6005      	str	r5, [r0, #0]
    LEAF* leaf = n->mempool->leaf;
240144bc:	686b      	ldr	r3, [r5, #4]
    n->type = type;
240144be:	7104      	strb	r4, [r0, #4]
    n->rand = leaf->random;
240144c0:	691b      	ldr	r3, [r3, #16]
240144c2:	6143      	str	r3, [r0, #20]
}
240144c4:	bd70      	pop	{r4, r5, r6, pc}
240144c6:	bf00      	nop

240144c8 <tNoise_tick>:
    
    mpool_free((char*)n, n->mempool);
}

Lfloat   tNoise_tick(tNoise* const ns)
{
240144c8:	b510      	push	{r4, lr}
    _tNoise* n = *ns;
240144ca:	6804      	ldr	r4, [r0, #0]
    
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
240144cc:	6963      	ldr	r3, [r4, #20]
240144ce:	4798      	blx	r3
    
    if (n->type == PinkNoise)
240144d0:	7923      	ldrb	r3, [r4, #4]
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
240144d2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
240144d6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    if (n->type == PinkNoise)
240144da:	2b01      	cmp	r3, #1
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
240144dc:	eee0 7a07 	vfma.f32	s15, s0, s14
    if (n->type == PinkNoise)
240144e0:	d131      	bne.n	24014546 <tNoise_tick+0x7e>
    {
        Lfloat tmp;
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
240144e2:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 2401454c <tNoise_tick+0x84>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
240144e6:	eddf 6a1a 	vldr	s13, [pc, #104]	; 24014550 <tNoise_tick+0x88>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
240144ea:	ee27 6a86 	vmul.f32	s12, s15, s12
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
240144ee:	ed94 5a03 	vldr	s10, [r4, #12]
240144f2:	ee67 6aa6 	vmul.f32	s13, s15, s13
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
240144f6:	edd4 3a02 	vldr	s7, [r4, #8]
240144fa:	eddf 4a16 	vldr	s9, [pc, #88]	; 24014554 <tNoise_tick+0x8c>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
240144fe:	eddf 5a16 	vldr	s11, [pc, #88]	; 24014558 <tNoise_tick+0x90>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
24014502:	eea3 6aa4 	vfma.f32	s12, s7, s9
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
24014506:	ed9f 7a15 	vldr	s14, [pc, #84]	; 2401455c <tNoise_tick+0x94>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
2401450a:	eee5 6a25 	vfma.f32	s13, s10, s11
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
2401450e:	ed94 4a04 	vldr	s8, [r4, #16]
24014512:	ee27 7a87 	vmul.f32	s14, s15, s14
24014516:	eddf 5a12 	vldr	s11, [pc, #72]	; 24014560 <tNoise_tick+0x98>
2401451a:	eddf 4a12 	vldr	s9, [pc, #72]	; 24014564 <tNoise_tick+0x9c>
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
        return (tmp * 0.05f);
2401451e:	ed9f 5a12 	vldr	s10, [pc, #72]	; 24014568 <tNoise_tick+0xa0>
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
24014522:	eea4 7a25 	vfma.f32	s14, s8, s11
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
24014526:	ed84 6a02 	vstr	s12, [r4, #8]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
2401452a:	ee76 5a26 	vadd.f32	s11, s12, s13
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
2401452e:	edc4 6a03 	vstr	s13, [r4, #12]
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
24014532:	eef0 6a65 	vmov.f32	s13, s11
24014536:	ed84 7a04 	vstr	s14, [r4, #16]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
2401453a:	eee7 6aa4 	vfma.f32	s13, s15, s9
2401453e:	ee37 7a26 	vadd.f32	s14, s14, s13
        return (tmp * 0.05f);
24014542:	ee67 7a05 	vmul.f32	s15, s14, s10
    }
    else // WhiteNoise
    {
        return rand;
    }
}
24014546:	eeb0 0a67 	vmov.f32	s0, s15
2401454a:	bd10      	pop	{r4, pc}
2401454c:	3dcad8a1 	.word	0x3dcad8a1
24014550:	3e97d0ff 	.word	0x3e97d0ff
24014554:	3f7f65fe 	.word	0x3f7f65fe
24014558:	3f76872b 	.word	0x3f76872b
2401455c:	3f86be97 	.word	0x3f86be97
24014560:	3f11eb85 	.word	0x3f11eb85
24014564:	3e3d3c36 	.word	0x3e3d3c36
24014568:	3d4ccccd 	.word	0x3d4ccccd

2401456c <tIntPhasor_init>:


//beep boop adding intphasro
// Cycle
void    tIntPhasor_init(tIntPhasor* const cy, LEAF* const leaf)
{
2401456c:	b538      	push	{r3, r4, r5, lr}
    tIntPhasor_initToPool(cy, &leaf->mempool);
}

void    tIntPhasor_initToPool   (tIntPhasor* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
2401456e:	698c      	ldr	r4, [r1, #24]
{
24014570:	4605      	mov	r5, r0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24014572:	201c      	movs	r0, #28
24014574:	4621      	mov	r1, r4
24014576:	f7ff fccf 	bl	24013f18 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->phase    =  0;
2401457a:	2300      	movs	r3, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
2401457c:	6028      	str	r0, [r5, #0]
    c->mempool = m;
2401457e:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24014580:	6862      	ldr	r2, [r4, #4]
    c->inc  = 0;
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24014582:	ed9f 7a05 	vldr	s14, [pc, #20]	; 24014598 <tIntPhasor_init+0x2c>
    c->inc  = 0;
24014586:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2401458a:	edd2 7a01 	vldr	s15, [r2, #4]
2401458e:	ee67 7a87 	vmul.f32	s15, s15, s14
24014592:	edc0 7a06 	vstr	s15, [r0, #24]
}
24014596:	bd38      	pop	{r3, r4, r5, pc}
24014598:	4f800000 	.word	0x4f800000

2401459c <tIntPhasor_tick>:
}


Lfloat   tIntPhasor_tick(tIntPhasor* const cy)
{
    _tIntPhasor* c = *cy;
2401459c:	6802      	ldr	r2, [r0, #0]
    // Phasor increment
    c->phase = (c->phase + c->inc);
    
    return c->phase * INV_TWO_TO_32; 
2401459e:	eddf 7a06 	vldr	s15, [pc, #24]	; 240145b8 <tIntPhasor_tick+0x1c>
    c->phase = (c->phase + c->inc);
240145a2:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
240145a6:	440b      	add	r3, r1
    return c->phase * INV_TWO_TO_32; 
240145a8:	ee07 3a10 	vmov	s14, r3
    c->phase = (c->phase + c->inc);
240145ac:	6053      	str	r3, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
240145ae:	eeb8 0a47 	vcvt.f32.u32	s0, s14
}
240145b2:	ee20 0a27 	vmul.f32	s0, s0, s15
240145b6:	4770      	bx	lr
240145b8:	2f80000d 	.word	0x2f80000d

240145bc <tIntPhasor_setFreq>:

void     tIntPhasor_setFreq(tIntPhasor* const cy, Lfloat freq)
{
    _tIntPhasor* c = *cy;
240145bc:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240145be:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
240145c2:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240145c6:	ee20 0a27 	vmul.f32	s0, s0, s15
240145ca:	eebc 0ac0 	vcvt.u32.f32	s0, s0
240145ce:	ed83 0a02 	vstr	s0, [r3, #8]
}
240145d2:	4770      	bx	lr

240145d4 <tIntPhasor_setPhase>:

void    tIntPhasor_setPhase(tIntPhasor* const cy, Lfloat phase)
{
    _tIntPhasor* c = *cy;
    
    int i = phase;
240145d4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
240145d8:	ed9f 7a06 	vldr	s14, [pc, #24]	; 240145f4 <tIntPhasor_setPhase+0x20>
    _tIntPhasor* c = *cy;
240145dc:	6803      	ldr	r3, [r0, #0]
    phase -= i;
240145de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240145e2:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
240145e6:	ee20 0a07 	vmul.f32	s0, s0, s14
240145ea:	eebc 0ac0 	vcvt.u32.f32	s0, s0
240145ee:	ed83 0a01 	vstr	s0, [r3, #4]
}
240145f2:	4770      	bx	lr
240145f4:	4f800000 	.word	0x4f800000

240145f8 <tSquareLFO_init>:
    tIntPhasor_setFreq(cy, c->freq);
}

//////SQUARE(PUSHER)LFO
void    tSquareLFO_init(tSquareLFO* const cy, LEAF* const leaf)
{
240145f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
240145fa:	ed2d 8b02 	vpush	{d8}
    tSquareLFO_initToPool(cy, &leaf->mempool);
}

void    tSquareLFO_initToPool   (tSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
240145fe:	698f      	ldr	r7, [r1, #24]
{
24014600:	4606      	mov	r6, r0
24014602:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24014604:	2010      	movs	r0, #16
24014606:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24014608:	ed9f 8a22 	vldr	s16, [pc, #136]	; 24014694 <tSquareLFO_init+0x9c>
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
2401460c:	f7ff fc84 	bl	24013f18 <mpool_alloc>
24014610:	6030      	str	r0, [r6, #0]
    c->mempool = m;
24014612:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24014614:	4604      	mov	r4, r0
    _tMempool* m = *mp;
24014616:	69af      	ldr	r7, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24014618:	201c      	movs	r0, #28
2401461a:	4639      	mov	r1, r7
2401461c:	f7ff fc7c 	bl	24013f18 <mpool_alloc>
24014620:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
24014622:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24014624:	687a      	ldr	r2, [r7, #4]
    c->phase    =  0;
24014626:	2700      	movs	r7, #0
    c->inc  = 0;
24014628:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2401462c:	edd2 7a01 	vldr	s15, [r2, #4]
24014630:	ee67 7a88 	vmul.f32	s15, s15, s16
24014634:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24014638:	201c      	movs	r0, #28
    _tMempool* m = *mp;
2401463a:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
2401463c:	4629      	mov	r1, r5
2401463e:	f7ff fc6b 	bl	24013f18 <mpool_alloc>
24014642:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
24014644:	6005      	str	r5, [r0, #0]

void tSquareLFO_setPulseWidth(tSquareLFO* const cy, Lfloat pw)
{
    _tSquareLFO *c = *cy;

    c->pulsewidth = pw;
24014646:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    LEAF* leaf = c->mempool->leaf;
2401464a:	686a      	ldr	r2, [r5, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
2401464c:	eddf 6a12 	vldr	s13, [pc, #72]	; 24014698 <tSquareLFO_init+0xa0>
    c->inc  = 0;
24014650:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24014654:	ed92 7a01 	vldr	s14, [r2, #4]
24014658:	ee27 7a08 	vmul.f32	s14, s14, s16
2401465c:	ed80 7a06 	vstr	s14, [r0, #24]
    _tSquareLFO *c = *cy;
24014660:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24014662:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
24014664:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24014668:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
2401466c:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
2401466e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24014672:	eee7 7a26 	vfma.f32	s15, s14, s13
    int i = phase;
24014676:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
2401467a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
2401467e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
24014682:	ee67 7a88 	vmul.f32	s15, s15, s16
24014686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2401468a:	edc3 7a01 	vstr	s15, [r3, #4]
}
2401468e:	ecbd 8b02 	vpop	{d8}
24014692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24014694:	4f800000 	.word	0x4f800000
24014698:	2f80000d 	.word	0x2f80000d

2401469c <tSquareLFO_initToPool>:
{
2401469c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2401469e:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
240146a2:	680f      	ldr	r7, [r1, #0]
{
240146a4:	4606      	mov	r6, r0
240146a6:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
240146a8:	2010      	movs	r0, #16
240146aa:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240146ac:	ed9f 8a22 	vldr	s16, [pc, #136]	; 24014738 <tSquareLFO_initToPool+0x9c>
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
240146b0:	f7ff fc32 	bl	24013f18 <mpool_alloc>
240146b4:	6030      	str	r0, [r6, #0]
    c->mempool = m;
240146b6:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
240146b8:	4604      	mov	r4, r0
    _tMempool* m = *mp;
240146ba:	682f      	ldr	r7, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
240146bc:	201c      	movs	r0, #28
240146be:	4639      	mov	r1, r7
240146c0:	f7ff fc2a 	bl	24013f18 <mpool_alloc>
240146c4:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
240146c6:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
240146c8:	687a      	ldr	r2, [r7, #4]
    c->phase    =  0;
240146ca:	2700      	movs	r7, #0
    c->inc  = 0;
240146cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240146d0:	edd2 7a01 	vldr	s15, [r2, #4]
240146d4:	ee67 7a88 	vmul.f32	s15, s15, s16
240146d8:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
240146dc:	201c      	movs	r0, #28
    _tMempool* m = *mp;
240146de:	682d      	ldr	r5, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
240146e0:	4629      	mov	r1, r5
240146e2:	f7ff fc19 	bl	24013f18 <mpool_alloc>
240146e6:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
240146e8:	6005      	str	r5, [r0, #0]
    c->pulsewidth = pw;
240146ea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    LEAF* leaf = c->mempool->leaf;
240146ee:	686a      	ldr	r2, [r5, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240146f0:	eddf 6a12 	vldr	s13, [pc, #72]	; 2401473c <tSquareLFO_initToPool+0xa0>
    c->inc  = 0;
240146f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240146f8:	ed92 7a01 	vldr	s14, [r2, #4]
240146fc:	ee27 7a08 	vmul.f32	s14, s14, s16
24014700:	ed80 7a06 	vstr	s14, [r0, #24]
    _tSquareLFO *c = *cy;
24014704:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24014706:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
24014708:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
2401470c:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
24014710:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24014712:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24014716:	eee7 7a26 	vfma.f32	s15, s14, s13
    int i = phase;
2401471a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
2401471e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24014722:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
24014726:	ee67 7a88 	vmul.f32	s15, s15, s16
2401472a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2401472e:	edc3 7a01 	vstr	s15, [r3, #4]
}
24014732:	ecbd 8b02 	vpop	{d8}
24014736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24014738:	4f800000 	.word	0x4f800000
2401473c:	2f80000d 	.word	0x2f80000d

24014740 <tSquareLFO_tick>:
    _tSquareLFO* c = *cy;
24014740:	6802      	ldr	r2, [r0, #0]
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
24014742:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
24014746:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 24014784 <tSquareLFO_tick+0x44>
    _tIntPhasor* c = *cy;
2401474a:	6891      	ldr	r1, [r2, #8]
    c->phase = (c->phase + c->inc);
2401474c:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
24014750:	4403      	add	r3, r0
24014752:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
24014754:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
24014758:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
2401475a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
2401475e:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
24014762:	4403      	add	r3, r0
    return c->phase * INV_TWO_TO_32; 
24014764:	ee06 3a10 	vmov	s12, r3
    c->phase = (c->phase + c->inc);
24014768:	604b      	str	r3, [r1, #4]
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
2401476a:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
2401476e:	eeb8 6a46 	vcvt.f32.u32	s12, s12
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
24014772:	ee30 0a66 	vsub.f32	s0, s0, s13
24014776:	ee77 7ac6 	vsub.f32	s15, s15, s12
2401477a:	eea7 0a87 	vfma.f32	s0, s15, s14
}
2401477e:	ee30 0a00 	vadd.f32	s0, s0, s0
24014782:	4770      	bx	lr
24014784:	2f80000d 	.word	0x2f80000d

24014788 <tSquareLFO_setFreq>:
    _tSquareLFO* c = *cy;
24014788:	6802      	ldr	r2, [r0, #0]
    _tIntPhasor* c = *cy;
2401478a:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401478c:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
24014790:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24014794:	ee60 7a27 	vmul.f32	s15, s0, s15
24014798:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2401479c:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
240147a0:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240147a2:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
240147a6:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240147aa:	ee20 0a27 	vmul.f32	s0, s0, s15
240147ae:	eebc 0ac0 	vcvt.u32.f32	s0, s0
240147b2:	ed83 0a02 	vstr	s0, [r3, #8]
}
240147b6:	4770      	bx	lr

240147b8 <tSquareLFO_setPulseWidth>:
    _tSquareLFO *c = *cy;
240147b8:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240147ba:	eddf 6a0d 	vldr	s13, [pc, #52]	; 240147f0 <tSquareLFO_setPulseWidth+0x38>
240147be:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
240147c0:	ed83 0a01 	vstr	s0, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240147c4:	edd2 7a01 	vldr	s15, [r2, #4]
    c->phase = phase * TWO_TO_32;
240147c8:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 240147f4 <tSquareLFO_setPulseWidth+0x3c>
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240147cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
240147d0:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240147d2:	eea7 0aa6 	vfma.f32	s0, s15, s13
    int i = phase;
240147d6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
240147da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240147de:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
240147e2:	ee20 0a07 	vmul.f32	s0, s0, s14
240147e6:	eebc 0ac0 	vcvt.u32.f32	s0, s0
240147ea:	ed83 0a01 	vstr	s0, [r3, #4]
}
240147ee:	4770      	bx	lr
240147f0:	2f80000d 	.word	0x2f80000d
240147f4:	4f800000 	.word	0x4f800000

240147f8 <tSquareLFO_setPhase>:
    int i = phase;
240147f8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
240147fc:	eddf 6a13 	vldr	s13, [pc, #76]	; 2401484c <tSquareLFO_setPhase+0x54>

void tSquareLFO_setPhase(tSquareLFO* const cy, Lfloat phase)
{
    _tSquareLFO *c = *cy;
24014800:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->phasor, phase);
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24014802:	ed9f 6a13 	vldr	s12, [pc, #76]	; 24014850 <tSquareLFO_setPhase+0x58>
    phase -= i;
24014806:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tIntPhasor* c = *cy;
2401480a:	689a      	ldr	r2, [r3, #8]
    phase -= i;
2401480c:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
24014810:	ee20 0a26 	vmul.f32	s0, s0, s13
24014814:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24014818:	ed82 0a01 	vstr	s0, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
2401481c:	689a      	ldr	r2, [r3, #8]
2401481e:	edd3 7a01 	vldr	s15, [r3, #4]
24014822:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
24014826:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24014828:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2401482c:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
24014830:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
24014834:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24014838:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
2401483c:	ee67 7aa6 	vmul.f32	s15, s15, s13
24014840:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24014844:	edc3 7a01 	vstr	s15, [r3, #4]
}
24014848:	4770      	bx	lr
2401484a:	bf00      	nop
2401484c:	4f800000 	.word	0x4f800000
24014850:	2f80000d 	.word	0x2f80000d

24014854 <tSawSquareLFO_init>:

void    tSawSquareLFO_init        (tSawSquareLFO* const cy, LEAF* const leaf)
{
24014854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

}

void    tSawSquareLFO_initToPool  (tSawSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
24014856:	460c      	mov	r4, r1
{
24014858:	4606      	mov	r6, r0
2401485a:	460d      	mov	r5, r1
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
2401485c:	2010      	movs	r0, #16
    _tMempool* m = *mp;
2401485e:	f854 7f18 	ldr.w	r7, [r4, #24]!
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
24014862:	4639      	mov	r1, r7
24014864:	f7ff fb58 	bl	24013f18 <mpool_alloc>
    c->mempool = m;
    tSquareLFO_initToPool(&c->square,mp);
24014868:	4621      	mov	r1, r4
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
2401486a:	6030      	str	r0, [r6, #0]
2401486c:	4604      	mov	r4, r0
    c->mempool = m;
2401486e:	f840 7b0c 	str.w	r7, [r0], #12
    tSquareLFO_initToPool(&c->square,mp);
24014872:	f7ff ff13 	bl	2401469c <tSquareLFO_initToPool>
    _tMempool* m = *mp;
24014876:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24014878:	201c      	movs	r0, #28
2401487a:	4629      	mov	r1, r5
2401487c:	f7ff fb4c 	bl	24013f18 <mpool_alloc>
    c->phase    =  0;
24014880:	2300      	movs	r3, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24014882:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
24014884:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24014886:	686a      	ldr	r2, [r5, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24014888:	ed9f 7a05 	vldr	s14, [pc, #20]	; 240148a0 <tSawSquareLFO_init+0x4c>
    c->inc  = 0;
2401488c:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24014890:	edd2 7a01 	vldr	s15, [r2, #4]
24014894:	ee67 7a87 	vmul.f32	s15, s15, s14
24014898:	edc0 7a06 	vstr	s15, [r0, #24]
}
2401489c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2401489e:	bf00      	nop
240148a0:	4f800000 	.word	0x4f800000

240148a4 <tSawSquareLFO_tick>:
    tSquareLFO_free(&c->square);
    mpool_free((char*)c, c->mempool);
}
    
Lfloat   tSawSquareLFO_tick        (tSawSquareLFO* const cy)
{
240148a4:	b410      	push	{r4}
    _tSawSquareLFO* c = *cy;
240148a6:	6802      	ldr	r2, [r0, #0]
    Lfloat a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
240148a8:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
240148ac:	eddf 5a1d 	vldr	s11, [pc, #116]	; 24014924 <tSawSquareLFO_tick+0x80>
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
240148b0:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
    _tIntPhasor* c = *cy;
240148b4:	6891      	ldr	r1, [r2, #8]
    Lfloat b = tSquareLFO_tick(&c->square);
    return  (1 - c->shape) * a + c->shape * b; 
240148b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->phase = (c->phase + c->inc);
240148ba:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
240148be:	4403      	add	r3, r0
240148c0:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
240148c2:	ee07 3a90 	vmov	s15, r3
    _tSquareLFO* c = *cy;
240148c6:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
240148c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
240148cc:	6888      	ldr	r0, [r1, #8]
    c->phase = (c->phase + c->inc);
240148ce:	6843      	ldr	r3, [r0, #4]
    Lfloat a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
240148d0:	eea7 6aa5 	vfma.f32	s12, s15, s11
    c->phase = (c->phase + c->inc);
240148d4:	6884      	ldr	r4, [r0, #8]
240148d6:	4423      	add	r3, r4
240148d8:	6043      	str	r3, [r0, #4]
    return c->phase * INV_TWO_TO_32; 
240148da:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
240148de:	68c8      	ldr	r0, [r1, #12]
    return c->phase * INV_TWO_TO_32; 
240148e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
240148e4:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
240148e8:	4423      	add	r3, r4
    return c->phase * INV_TWO_TO_32; 
240148ea:	ee06 3a90 	vmov	s13, r3
    c->phase = (c->phase + c->inc);
240148ee:	6043      	str	r3, [r0, #4]
    return  (1 - c->shape) * a + c->shape * b; 
240148f0:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
240148f4:	eef8 4a66 	vcvt.f32.u32	s9, s13
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
240148f8:	edd1 6a01 	vldr	s13, [r1, #4]
    return  (1 - c->shape) * a + c->shape * b; 
240148fc:	ee37 7a40 	vsub.f32	s14, s14, s0
}
24014900:	f85d 4b04 	ldr.w	r4, [sp], #4
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
24014904:	ee76 6ac5 	vsub.f32	s13, s13, s10
24014908:	ee77 7ae4 	vsub.f32	s15, s15, s9
    return  (1 - c->shape) * a + c->shape * b; 
2401490c:	ee30 0a00 	vadd.f32	s0, s0, s0
24014910:	ee37 7a07 	vadd.f32	s14, s14, s14
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
24014914:	eee7 6aa5 	vfma.f32	s13, s15, s11
    return  (1 - c->shape) * a + c->shape * b; 
24014918:	ee20 0a26 	vmul.f32	s0, s0, s13
}
2401491c:	eea6 0a07 	vfma.f32	s0, s12, s14
24014920:	4770      	bx	lr
24014922:	bf00      	nop
24014924:	2f80000d 	.word	0x2f80000d

24014928 <tSawSquareLFO_setFreq>:
void    tSawSquareLFO_setFreq     (tSawSquareLFO* const cy, Lfloat freq)
{
    _tSawSquareLFO* c = *cy;
24014928:	6802      	ldr	r2, [r0, #0]
    _tSquareLFO* c = *cy;
2401492a:	68d1      	ldr	r1, [r2, #12]
    _tIntPhasor* c = *cy;
2401492c:	688b      	ldr	r3, [r1, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401492e:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
24014932:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24014936:	ee60 7a27 	vmul.f32	s15, s0, s15
2401493a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2401493e:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
24014942:	68cb      	ldr	r3, [r1, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24014944:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
24014948:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401494c:	ee60 7a27 	vmul.f32	s15, s0, s15
24014950:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24014954:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
24014958:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401495a:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
2401495e:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24014962:	ee20 0a27 	vmul.f32	s0, s0, s15
24014966:	eebc 0ac0 	vcvt.u32.f32	s0, s0
2401496a:	ed83 0a02 	vstr	s0, [r3, #8]
    tSquareLFO_setFreq(&c->square, freq);
    tIntPhasor_setFreq(&c->saw, freq);
}
2401496e:	4770      	bx	lr

24014970 <tSawSquareLFO_setPhase>:
    int i = phase;
24014970:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
24014974:	eddf 6a15 	vldr	s13, [pc, #84]	; 240149cc <tSawSquareLFO_setPhase+0x5c>
    tSquareLFO_setSampleRate(&c->square, sr);
    tIntPhasor_setSampleRate(&c->saw, sr);
}
void    tSawSquareLFO_setPhase (tSawSquareLFO* const cy, Lfloat phase)
{
    _tSawSquareLFO* c = *cy;
24014978:	6801      	ldr	r1, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
2401497a:	ed9f 6a15 	vldr	s12, [pc, #84]	; 240149d0 <tSawSquareLFO_setPhase+0x60>
    phase -= i;
2401497e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tSquareLFO *c = *cy;
24014982:	68ca      	ldr	r2, [r1, #12]
    _tIntPhasor* c = *cy;
24014984:	6890      	ldr	r0, [r2, #8]
    phase -= i;
24014986:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
2401498a:	ee20 0a26 	vmul.f32	s0, s0, s13
2401498e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
24014992:	edc0 7a01 	vstr	s15, [r0, #4]
24014996:	ee17 3a90 	vmov	r3, s15
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
2401499a:	6890      	ldr	r0, [r2, #8]
2401499c:	edd2 7a01 	vldr	s15, [r2, #4]
240149a0:	ed90 7a01 	vldr	s14, [r0, #4]
    _tIntPhasor* c = *cy;
240149a4:	68d2      	ldr	r2, [r2, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240149a6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
240149aa:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
240149ae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
240149b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
240149b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
240149ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
240149be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240149c2:	edc2 7a01 	vstr	s15, [r2, #4]
    _tIntPhasor* c = *cy;
240149c6:	688a      	ldr	r2, [r1, #8]
    c->phase = phase * TWO_TO_32;
240149c8:	6053      	str	r3, [r2, #4]
    tSquareLFO_setPhase(&c->square, phase);
    tIntPhasor_setPhase(&c->saw, phase);
}
240149ca:	4770      	bx	lr
240149cc:	4f800000 	.word	0x4f800000
240149d0:	2f80000d 	.word	0x2f80000d

240149d4 <tSawSquareLFO_setShape>:


void    tSawSquareLFO_setShape (tSawSquareLFO* const cy, Lfloat shape)
{
    _tSawSquareLFO* c = *cy;
240149d4:	6803      	ldr	r3, [r0, #0]
    c->shape = shape; 
240149d6:	ed83 0a01 	vstr	s0, [r3, #4]
}
240149da:	4770      	bx	lr

240149dc <tTriLFO_init>:



///tri
void    tTriLFO_init(tTriLFO* const cy, LEAF* const leaf)
{
240149dc:	b538      	push	{r3, r4, r5, lr}
    tTriLFO_initToPool(cy, &leaf->mempool);
}

void    tTriLFO_initToPool   (tTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
240149de:	698d      	ldr	r5, [r1, #24]
{
240149e0:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
240149e2:	2018      	movs	r0, #24
240149e4:	4629      	mov	r1, r5
240149e6:	f7ff fa97 	bl	24013f18 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
240149ea:	2300      	movs	r3, #0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
240149ec:	6020      	str	r0, [r4, #0]
    c->mempool = m;
240149ee:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
240149f0:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
240149f2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 24014a28 <tTriLFO_init+0x4c>

void     tTriLFO_setFreq(tTriLFO* const cy, Lfloat freq)
{
    _tTriLFO* c = *cy;
    
    c->freq  = freq;
240149f6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 24014a2c <tTriLFO_init+0x50>
    c->phase    =  0;
240149fa:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
240149fe:	edd2 6a01 	vldr	s13, [r2, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
24014a02:	ee66 7aa7 	vmul.f32	s15, s13, s15
    c->invSampleRate = leaf->invSampleRate;
24014a06:	edc0 6a04 	vstr	s13, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
24014a0a:	edc0 7a05 	vstr	s15, [r0, #20]
    _tTriLFO* c = *cy;
24014a0e:	6823      	ldr	r3, [r4, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24014a10:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
24014a14:	ed83 7a03 	vstr	s14, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24014a18:	ee67 7a87 	vmul.f32	s15, s15, s14
24014a1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24014a20:	edc3 7a02 	vstr	s15, [r3, #8]
}
24014a24:	bd38      	pop	{r3, r4, r5, pc}
24014a26:	bf00      	nop
24014a28:	4f800000 	.word	0x4f800000
24014a2c:	435c0000 	.word	0x435c0000

24014a30 <tTriLFO_tick>:
    _tTriLFO* c = *cy;
24014a30:	6801      	ldr	r1, [r0, #0]
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
24014a32:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24014a36:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 24014a60 <tTriLFO_tick+0x30>
    c->phase += c->inc;
24014a3a:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
24014a3e:	4413      	add	r3, r2
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
24014a40:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    c->phase += c->inc;
24014a44:	604b      	str	r3, [r1, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
24014a46:	eb02 73e2 	add.w	r3, r2, r2, asr #31
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
24014a4a:	ea83 73e2 	eor.w	r3, r3, r2, asr #31
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
24014a4e:	ee07 3a90 	vmov	s15, r3
24014a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24014a56:	eea7 0a87 	vfma.f32	s0, s15, s14
}
24014a5a:	ee30 0a00 	vadd.f32	s0, s0, s0
24014a5e:	4770      	bx	lr
24014a60:	2ffffff6 	.word	0x2ffffff6

24014a64 <tTriLFO_setFreq>:
    _tTriLFO* c = *cy;
24014a64:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24014a66:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
24014a6a:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24014a6e:	ee20 0a27 	vmul.f32	s0, s0, s15
24014a72:	eebd 0ac0 	vcvt.s32.f32	s0, s0
24014a76:	ed83 0a02 	vstr	s0, [r3, #8]
}
24014a7a:	4770      	bx	lr

24014a7c <tTriLFO_setPhase>:

void    tTriLFO_setPhase(tTriLFO* const cy, Lfloat phase)
{
    _tTriLFO* c = *cy;
    int i = phase;
24014a7c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    _tTriLFO* c = *cy;
24014a80:	6803      	ldr	r3, [r0, #0]
    phase -= i;
24014a82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24014a86:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
24014a8a:	eebe 0ac0 	vcvt.s32.f32	s0, s0, #32
24014a8e:	ed83 0a01 	vstr	s0, [r3, #4]
}
24014a92:	4770      	bx	lr

24014a94 <tSineTriLFO_init>:
    tTriLFO_setFreq(cy, c->freq);
}
///sinetri

void    tSineTriLFO_init        (tSineTriLFO* const cy, LEAF* const leaf)
{
24014a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24014a96:	ed2d 8b02 	vpush	{d8}
    tSineTriLFO_initToPool(cy, &leaf->mempool);
}

void    tSineTriLFO_initToPool  (tSineTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
24014a9a:	698f      	ldr	r7, [r1, #24]
{
24014a9c:	4606      	mov	r6, r0
24014a9e:	460d      	mov	r5, r1
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
24014aa0:	2010      	movs	r0, #16
24014aa2:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
24014aa4:	ed9f 8a1e 	vldr	s16, [pc, #120]	; 24014b20 <tSineTriLFO_init+0x8c>
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
24014aa8:	f7ff fa36 	bl	24013f18 <mpool_alloc>
24014aac:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
24014aae:	2018      	movs	r0, #24
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
24014ab0:	6034      	str	r4, [r6, #0]
    c->mempool = m;
24014ab2:	6027      	str	r7, [r4, #0]
    _tMempool* m = *mp;
24014ab4:	69ae      	ldr	r6, [r5, #24]
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
24014ab6:	4631      	mov	r1, r6
24014ab8:	f7ff fa2e 	bl	24013f18 <mpool_alloc>
24014abc:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
24014abe:	6006      	str	r6, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24014ac0:	6873      	ldr	r3, [r6, #4]
    c->inc      =  0;
24014ac2:	2600      	movs	r6, #0
    c->freq  = freq;
24014ac4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 24014b24 <tSineTriLFO_init+0x90>
    c->phase    =  0;
24014ac8:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
24014acc:	edd3 7a01 	vldr	s15, [r3, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
24014ad0:	ee67 6a88 	vmul.f32	s13, s15, s16
    c->invSampleRate = leaf->invSampleRate;
24014ad4:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
24014ad8:	edc0 6a05 	vstr	s13, [r0, #20]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
24014adc:	2018      	movs	r0, #24
    _tTriLFO* c = *cy;
24014ade:	68a3      	ldr	r3, [r4, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24014ae0:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
24014ae4:	ed83 7a03 	vstr	s14, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24014ae8:	ee67 7a87 	vmul.f32	s15, s15, s14
24014aec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24014af0:	edc3 7a02 	vstr	s15, [r3, #8]
    _tMempool* m = *mp;
24014af4:	69ad      	ldr	r5, [r5, #24]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
24014af6:	4629      	mov	r1, r5
24014af8:	f7ff fa0e 	bl	24013f18 <mpool_alloc>
24014afc:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
24014afe:	6005      	str	r5, [r0, #0]
    c->mask = SINE_TABLE_SIZE - 1;
24014b00:	f240 73ff 	movw	r3, #2047	; 0x7ff
    LEAF* leaf = c->mempool->leaf;
24014b04:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
24014b06:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24014b0a:	edd2 7a01 	vldr	s15, [r2, #4]
    c->mask = SINE_TABLE_SIZE - 1;
24014b0e:	6143      	str	r3, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24014b10:	ee67 7a88 	vmul.f32	s15, s15, s16
24014b14:	edc0 7a04 	vstr	s15, [r0, #16]
}
24014b18:	ecbd 8b02 	vpop	{d8}
24014b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24014b1e:	bf00      	nop
24014b20:	4f800000 	.word	0x4f800000
24014b24:	435c0000 	.word	0x435c0000

24014b28 <tSineTriLFO_tick>:
    tTriLFO_free(&c->tri);
    mpool_free((char*)c, c->mempool);
}
    
Lfloat   tSineTriLFO_tick        (tSineTriLFO* const cy)
{
24014b28:	b470      	push	{r4, r5, r6}
    _tSineTriLFO* c = *cy;
24014b2a:	6804      	ldr	r4, [r0, #0]
    Lfloat a = tCycle_tick(&c->sine);
    Lfloat b = tTriLFO_tick(&c->tri);
    return  (1.0f - c->shape) * a + c->shape * b;
24014b2c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    samp0 = __leaf_table_sinewave[idx];
24014b30:	4a21      	ldr	r2, [pc, #132]	; (24014bb8 <tSineTriLFO_tick+0x90>)
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
24014b32:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
    _tCycle* c = *cy;
24014b36:	68e0      	ldr	r0, [r4, #12]
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24014b38:	ed9f 7a20 	vldr	s14, [pc, #128]	; 24014bbc <tSineTriLFO_tick+0x94>
    idx = (idx + 1) & c->mask;
24014b3c:	6945      	ldr	r5, [r0, #20]
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
24014b3e:	eddf 4a20 	vldr	s9, [pc, #128]	; 24014bc0 <tSineTriLFO_tick+0x98>
    c->phase += c->inc;
24014b42:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
24014b46:	440b      	add	r3, r1
24014b48:	6043      	str	r3, [r0, #4]
    idx = c->phase >> 21; //11 bit table 
24014b4a:	0d59      	lsrs	r1, r3, #21
    _tTriLFO* c = *cy;
24014b4c:	68a0      	ldr	r0, [r4, #8]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
24014b4e:	f3c3 0314 	ubfx	r3, r3, #0, #21
24014b52:	ee07 3a90 	vmov	s15, r3
    c->phase += c->inc;
24014b56:	e9d0 3601 	ldrd	r3, r6, [r0, #4]
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24014b5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->phase += c->inc;
24014b5e:	4433      	add	r3, r6
24014b60:	6043      	str	r3, [r0, #4]
    idx = (idx + 1) & c->mask;
24014b62:	1c48      	adds	r0, r1, #1
    samp0 = __leaf_table_sinewave[idx];
24014b64:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
24014b68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    idx = (idx + 1) & c->mask;
24014b6c:	4028      	ands	r0, r5
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24014b6e:	ee67 7a87 	vmul.f32	s15, s15, s14
    samp0 = __leaf_table_sinewave[idx];
24014b72:	edd1 6a00 	vldr	s13, [r1]
    samp1 = __leaf_table_sinewave[idx];
24014b76:	eb02 0180 	add.w	r1, r2, r0, lsl #2
    return  (1.0f - c->shape) * a + c->shape * b;
24014b7a:	ed94 7a01 	vldr	s14, [r4, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
24014b7e:	eb03 72e3 	add.w	r2, r3, r3, asr #31
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24014b82:	ed91 5a00 	vldr	s10, [r1]
    return  (1.0f - c->shape) * a + c->shape * b;
24014b86:	ee37 0a07 	vadd.f32	s0, s14, s14
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
24014b8a:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
    return  (1.0f - c->shape) * a + c->shape * b;
24014b8e:	ee36 6a47 	vsub.f32	s12, s12, s14
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24014b92:	ee35 5a66 	vsub.f32	s10, s10, s13
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
24014b96:	ee07 2a10 	vmov	s14, r2
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24014b9a:	eee7 6a85 	vfma.f32	s13, s15, s10
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
24014b9e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24014ba2:	eef0 7a65 	vmov.f32	s15, s11
}
24014ba6:	bc70      	pop	{r4, r5, r6}
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
24014ba8:	eee7 7a24 	vfma.f32	s15, s14, s9
    return  (1.0f - c->shape) * a + c->shape * b;
24014bac:	ee20 0a27 	vmul.f32	s0, s0, s15
}
24014bb0:	eea6 0a26 	vfma.f32	s0, s12, s13
24014bb4:	4770      	bx	lr
24014bb6:	bf00      	nop
24014bb8:	24022648 	.word	0x24022648
24014bbc:	35000004 	.word	0x35000004
24014bc0:	2ffffff6 	.word	0x2ffffff6

24014bc4 <tSineTriLFO_setFreq>:
void    tSineTriLFO_setFreq     (tSineTriLFO* const cy, Lfloat freq)
{
    _tSineTriLFO* c = *cy;
24014bc4:	6802      	ldr	r2, [r0, #0]
    _tTriLFO* c = *cy;
24014bc6:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24014bc8:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
24014bcc:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24014bd0:	ee60 7a27 	vmul.f32	s15, s0, s15
24014bd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24014bd8:	edc3 7a02 	vstr	s15, [r3, #8]
    _tCycle* c = *cy;
24014bdc:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24014bde:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
24014be2:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24014be6:	ee20 0a27 	vmul.f32	s0, s0, s15
24014bea:	eebd 0ac0 	vcvt.s32.f32	s0, s0
24014bee:	ed83 0a02 	vstr	s0, [r3, #8]
    tTriLFO_setFreq(&c->tri, freq);
    tCycle_setFreq(&c->sine, freq);
}
24014bf2:	4770      	bx	lr

24014bf4 <tSineTriLFO_setPhase>:
    int i = phase;
24014bf4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32_INT;
24014bf8:	ed9f 7a09 	vldr	s14, [pc, #36]	; 24014c20 <tSineTriLFO_setPhase+0x2c>
    tTriLFO_setSampleRate(&c->tri, sr);
    tCycle_setSampleRate(&c->sine, sr);
}
void    tSineTriLFO_setPhase (tSineTriLFO* const cy, Lfloat phase)
{
    _tSineTriLFO* c = *cy;
24014bfc:	6803      	ldr	r3, [r0, #0]
    phase -= i;
24014bfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tTriLFO* c = *cy;
24014c02:	689a      	ldr	r2, [r3, #8]
    phase -= i;
24014c04:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
24014c08:	ee20 0a07 	vmul.f32	s0, s0, s14
24014c0c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
24014c10:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    c->phase = phase * TWO_TO_32_INT;
24014c14:	edc2 7a01 	vstr	s15, [r2, #4]
    _tCycle* c = *cy;
24014c18:	68db      	ldr	r3, [r3, #12]
    c->phase = phase * TWO_TO_32;
24014c1a:	ed83 0a01 	vstr	s0, [r3, #4]
    tTriLFO_setPhase(&c->tri, phase);
    tCycle_setPhase(&c->sine, phase);
}
24014c1e:	4770      	bx	lr
24014c20:	4f800000 	.word	0x4f800000

24014c24 <tSineTriLFO_setShape>:

 void    tSineTriLFO_setShape (tSineTriLFO* const cy, Lfloat shape)
 {
    _tSineTriLFO* c = *cy;
24014c24:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
24014c26:	ed83 0a01 	vstr	s0, [r3, #4]

 }
24014c2a:	4770      	bx	lr
24014c2c:	0000      	movs	r0, r0
	...

24014c30 <tSimpleLivingString3_initToPool>:
}

void    tSimpleLivingString3_initToPool  (tSimpleLivingString3* const pl, int oversampling, Lfloat freq, Lfloat dampFreq,
                                         Lfloat decay, Lfloat targetLev, Lfloat levSmoothFactor,
                                         Lfloat levStrength, int levMode, tMempool* const mp)
{
24014c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24014c34:	ed2d 8b0a 	vpush	{d8-d12}
    _tMempool* m = *mp;
24014c38:	f8d3 9000 	ldr.w	r9, [r3]
{
24014c3c:	b083      	sub	sp, #12
24014c3e:	460e      	mov	r6, r1
24014c40:	4680      	mov	r8, r0
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
24014c42:	4649      	mov	r1, r9
24014c44:	206c      	movs	r0, #108	; 0x6c
{
24014c46:	461d      	mov	r5, r3
24014c48:	eeb0 8a40 	vmov.f32	s16, s0
24014c4c:	eeb0 9a41 	vmov.f32	s18, s2
24014c50:	4617      	mov	r7, r2
24014c52:	eef0 9a61 	vmov.f32	s19, s3
24014c56:	eeb0 aa42 	vmov.f32	s20, s4
24014c5a:	eeb0 ba62 	vmov.f32	s22, s5
24014c5e:	eef0 8a60 	vmov.f32	s17, s1
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
24014c62:	f7ff f959 	bl	24013f18 <mpool_alloc>
24014c66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    p->mempool = m;
    LEAF* leaf = p->mempool->leaf;
    p->oversampling = oversampling;
    p->sampleRate = leaf->sampleRate * oversampling;
24014c6a:	ee07 6a90 	vmov	s15, r6
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
24014c6e:	f8c8 0000 	str.w	r0, [r8]
    p->curr=0.0f;
    p->maxLength = 2400 * oversampling;
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24014c72:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    p->mempool = m;
24014c76:	f8c0 9000 	str.w	r9, [r0]
    p->sampleRate = leaf->sampleRate * oversampling;
24014c7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24014c7e:	ee87 ca08 	vdiv.f32	s24, s14, s16
    LEAF* leaf = p->mempool->leaf;
24014c82:	f8d9 3004 	ldr.w	r3, [r9, #4]
    p->oversampling = oversampling;
24014c86:	65c6      	str	r6, [r0, #92]	; 0x5c
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
24014c88:	4604      	mov	r4, r0
    p->sampleRate = leaf->sampleRate * oversampling;
24014c8a:	ed93 7a00 	vldr	s14, [r3]
    p->maxLength = 2400 * oversampling;
24014c8e:	f44f 6316 	mov.w	r3, #2400	; 0x960
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24014c92:	f100 0a58 	add.w	sl, r0, #88	; 0x58
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
24014c96:	f100 0b34 	add.w	fp, r0, #52	; 0x34
    p->maxLength = 2400 * oversampling;
24014c9a:	fb03 f606 	mul.w	r6, r3, r6
    p->curr=0.0f;
24014c9e:	2300      	movs	r3, #0
    p->sampleRate = leaf->sampleRate * oversampling;
24014ca0:	ee67 7a87 	vmul.f32	s15, s15, s14
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24014ca4:	eddf 0a7e 	vldr	s1, [pc, #504]	; 24014ea0 <tSimpleLivingString3_initToPool+0x270>
    p->curr=0.0f;
24014ca8:	6243      	str	r3, [r0, #36]	; 0x24
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24014caa:	4629      	mov	r1, r5
    p->maxLength = 2400 * oversampling;
24014cac:	6306      	str	r6, [r0, #48]	; 0x30
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
24014cae:	f104 0938 	add.w	r9, r4, #56	; 0x38
    p->sampleRate = leaf->sampleRate * oversampling;
24014cb2:	edc0 7a18 	vstr	s15, [r0, #96]	; 0x60
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24014cb6:	4650      	mov	r0, sl
24014cb8:	ee2c 0a2a 	vmul.f32	s0, s24, s21
24014cbc:	ee20 0a27 	vmul.f32	s0, s0, s15
24014cc0:	f7fc faba 	bl	24011238 <tExpSmooth_initToPool>
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
24014cc4:	ed94 0a02 	vldr	s0, [r4, #8]
24014cc8:	462a      	mov	r2, r5
24014cca:	6b21      	ldr	r1, [r4, #48]	; 0x30
24014ccc:	4658      	mov	r0, fp
24014cce:	f7fb fd4b 	bl	24010768 <tLinearDelay_initToPool>
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
24014cd2:	ed94 0a02 	vldr	s0, [r4, #8]
24014cd6:	462a      	mov	r2, r5
24014cd8:	6b21      	ldr	r1, [r4, #48]	; 0x30
24014cda:	4648      	mov	r0, r9
24014cdc:	f7fb fd44 	bl	24010768 <tLinearDelay_initToPool>
    mpool_free((char*)p, p->mempool);
}

void     tSimpleLivingString3_setFreq(tSimpleLivingString3* const pl, Lfloat freq)
{
    _tSimpleLivingString3* p = *pl;
24014ce0:	f8d8 6000 	ldr.w	r6, [r8]
    p->freq = freq;
    Lfloat waveLength = (p->sampleRate/freq);
24014ce4:	ed96 7a18 	vldr	s14, [r6, #96]	; 0x60
    p->freq = freq;
24014ce8:	ed86 8a01 	vstr	s16, [r6, #4]
    Lfloat waveLength = (p->sampleRate/freq);
24014cec:	ee2c 7a07 	vmul.f32	s14, s24, s14
    if (waveLength<4.8) waveLength=4.8f;
24014cf0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 24014e90 <tSimpleLivingString3_initToPool+0x260>
24014cf4:	eeb7 5ac7 	vcvt.f64.f32	d5, s14
24014cf8:	eeb4 5bc6 	vcmpe.f64	d5, d6
24014cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014d00:	f100 80bd 	bmi.w	24014e7e <tSimpleLivingString3_initToPool+0x24e>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
24014d04:	6b33      	ldr	r3, [r6, #48]	; 0x30
24014d06:	005b      	lsls	r3, r3, #1
24014d08:	ee07 3a90 	vmov	s15, r3
24014d0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    p->waveLengthInSamples =  waveLength * 0.5f;
24014d10:	fec7 7ac7 	vminnm.f32	s15, s15, s14
24014d14:	ee27 0aaa 	vmul.f32	s0, s15, s21
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24014d18:	f106 0058 	add.w	r0, r6, #88	; 0x58
    p->waveLengthInSamples =  waveLength * 0.5f;
24014d1c:	ed86 0a02 	vstr	s0, [r6, #8]
    //Lfloat decay = p->userDecay;

    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24014d20:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24014d24:	f01e fdd4 	bl	240338d0 <__tExpSmooth_setDest_veneer>
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24014d28:	ed96 7a05 	vldr	s14, [r6, #20]
    p->rippleDelay = 0.5f;
24014d2c:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24014d30:	eddf 7a5c 	vldr	s15, [pc, #368]	; 24014ea4 <tSimpleLivingString3_initToPool+0x274>
24014d34:	ee37 7a2b 	vadd.f32	s14, s14, s23
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24014d38:	ed96 6a01 	vldr	s12, [r6, #4]
24014d3c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24014d40:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24014d44:	ed9f 0b54 	vldr	d0, [pc, #336]	; 24014e98 <tSimpleLivingString3_initToPool+0x268>
24014d48:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
24014d4c:	ee27 7b06 	vmul.f64	d7, d7, d6
24014d50:	ee80 0b07 	vdiv.f64	d0, d0, d7
24014d54:	f002 ffb4 	bl	24017cc0 <exp>
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
24014d58:	4658      	mov	r0, fp
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24014d5a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24014d5e:	ed86 0a04 	vstr	s0, [r6, #16]
    tHighpass_initToPool(&p->DCblocker,13, mp);
24014d62:	f104 0650 	add.w	r6, r4, #80	; 0x50
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
24014d66:	ed94 0a02 	vldr	s0, [r4, #8]
24014d6a:	f7fb fe01 	bl	24010970 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, p->waveLengthInSamples);
24014d6e:	ed94 0a02 	vldr	s0, [r4, #8]
24014d72:	4648      	mov	r0, r9
24014d74:	f7fb fdfc 	bl	24010970 <tLinearDelay_setDelay>
    tLinearDelay_clear(&p->delayLineU);
24014d78:	4658      	mov	r0, fp
24014d7a:	f7fb fd6f 	bl	2401085c <tLinearDelay_clear>
    tLinearDelay_clear(&p->delayLineL);
24014d7e:	4648      	mov	r0, r9
24014d80:	f7fb fd6c 	bl	2401085c <tLinearDelay_clear>
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
24014d84:	f104 003c 	add.w	r0, r4, #60	; 0x3c
24014d88:	4629      	mov	r1, r5
24014d8a:	eeb0 0a68 	vmov.f32	s0, s17
    p->dampFreq = dampFreq;
24014d8e:	edc4 8a03 	vstr	s17, [r4, #12]
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
24014d92:	9001      	str	r0, [sp, #4]
24014d94:	f7fc fa86 	bl	240112a4 <tOnePole_initToPool>
    tOnePole_setSampleRate(&p->bridgeFilter, p->sampleRate);
24014d98:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
24014d9c:	9801      	ldr	r0, [sp, #4]
24014d9e:	f7fc faeb 	bl	24011378 <tOnePole_setSampleRate>
    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
24014da2:	eeb0 0a68 	vmov.f32	s0, s17
24014da6:	9801      	ldr	r0, [sp, #4]
24014da8:	f7fc fab4 	bl	24011314 <tOnePole_setFreq>
    p->rippleGain = 0.0f;
24014dac:	2300      	movs	r3, #0
    tHighpass_initToPool(&p->DCblocker,13, mp);
24014dae:	4629      	mov	r1, r5
24014db0:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
    p->rippleGain = 0.0f;
24014db4:	6663      	str	r3, [r4, #100]	; 0x64
    tHighpass_initToPool(&p->DCblocker,13, mp);
24014db6:	4630      	mov	r0, r6
    p->rippleDelay = 0.5f;
24014db8:	edc4 aa1a 	vstr	s21, [r4, #104]	; 0x68
    tHighpass_initToPool(&p->DCblocker,13, mp);
24014dbc:	9601      	str	r6, [sp, #4]
24014dbe:	f7fc fccd 	bl	2401175c <tHighpass_initToPool>
    tHighpass_setSampleRate(&p->DCblocker,p->sampleRate);
24014dc2:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
24014dc6:	9801      	ldr	r0, [sp, #4]
24014dc8:	f7fc fd08 	bl	240117dc <tHighpass_setSampleRate>
    tHighpass_setFreq(&p->DCblocker,13);
24014dcc:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
24014dd0:	9801      	ldr	r0, [sp, #4]
24014dd2:	f7fc fce7 	bl	240117a4 <tHighpass_setFreq>
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
24014dd6:	eeb0 1a4b 	vmov.f32	s2, s22
24014dda:	eef0 0a4a 	vmov.f32	s1, s20
24014dde:	462a      	mov	r2, r5
24014de0:	eeb0 0a69 	vmov.f32	s0, s19
24014de4:	f104 0054 	add.w	r0, r4, #84	; 0x54
24014de8:	4639      	mov	r1, r7
    p->userDecay = decay;
24014dea:	ed84 9a05 	vstr	s18, [r4, #20]
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
24014dee:	f7fc f92b 	bl	24011048 <tFeedbackLeveler_initToPool>
    Lfloat waveLength = (p->sampleRate/freq);
24014df2:	edd4 6a18 	vldr	s13, [r4, #96]	; 0x60
    p->levMode=levMode;
24014df6:	6227      	str	r7, [r4, #32]
    Lfloat waveLength = (p->sampleRate/freq);
24014df8:	ee2c ca26 	vmul.f32	s24, s24, s13
    p->changeGainCompensator = 1.0f;
24014dfc:	edc4 ba07 	vstr	s23, [r4, #28]
    p->freq = freq;
24014e00:	ed84 8a01 	vstr	s16, [r4, #4]
    if (waveLength<4.8) waveLength=4.8f;
24014e04:	ed9f 7b22 	vldr	d7, [pc, #136]	; 24014e90 <tSimpleLivingString3_initToPool+0x260>
24014e08:	eeb7 6acc 	vcvt.f64.f32	d6, s24
24014e0c:	eeb4 6bc7 	vcmpe.f64	d6, d7
24014e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014e14:	d436      	bmi.n	24014e84 <tSimpleLivingString3_initToPool+0x254>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
24014e16:	6b23      	ldr	r3, [r4, #48]	; 0x30
24014e18:	005b      	lsls	r3, r3, #1
24014e1a:	ee00 3a10 	vmov	s0, r3
24014e1e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->waveLengthInSamples =  waveLength * 0.5f;
24014e22:	fe80 0a4c 	vminnm.f32	s0, s0, s24
24014e26:	ee20 0a2a 	vmul.f32	s0, s0, s21
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24014e2a:	4650      	mov	r0, sl
    p->waveLengthInSamples =  waveLength * 0.5f;
24014e2c:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24014e30:	f01e fd4e 	bl	240338d0 <__tExpSmooth_setDest_veneer>
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24014e34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24014e38:	ed94 7a05 	vldr	s14, [r4, #20]
24014e3c:	eddf 7a19 	vldr	s15, [pc, #100]	; 24014ea4 <tSimpleLivingString3_initToPool+0x274>
24014e40:	ee37 7a26 	vadd.f32	s14, s14, s13
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24014e44:	ed94 6a01 	vldr	s12, [r4, #4]
24014e48:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24014e4c:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24014e50:	ed9f 0b11 	vldr	d0, [pc, #68]	; 24014e98 <tSimpleLivingString3_initToPool+0x268>
24014e54:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
24014e58:	ee27 7b06 	vmul.f64	d7, d7, d6
24014e5c:	ee80 0b07 	vdiv.f64	d0, d0, d7
24014e60:	f002 ff2e 	bl	24017cc0 <exp>
    p->pickupPoint = 0.9f;
24014e64:	4a10      	ldr	r2, [pc, #64]	; (24014ea8 <tSimpleLivingString3_initToPool+0x278>)
    p->prevDelayLength = p->waveLengthInSamples;
24014e66:	68a3      	ldr	r3, [r4, #8]
    p->pickupPoint = 0.9f;
24014e68:	64e2      	str	r2, [r4, #76]	; 0x4c
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24014e6a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    p->prevDelayLength = p->waveLengthInSamples;
24014e6e:	61a3      	str	r3, [r4, #24]
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24014e70:	ed84 0a04 	vstr	s0, [r4, #16]
}
24014e74:	b003      	add	sp, #12
24014e76:	ecbd 8b0a 	vpop	{d8-d12}
24014e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24014e7e:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 24014eac <tSimpleLivingString3_initToPool+0x27c>
24014e82:	e749      	b.n	24014d18 <tSimpleLivingString3_initToPool+0xe8>
24014e84:	ed9f 0a09 	vldr	s0, [pc, #36]	; 24014eac <tSimpleLivingString3_initToPool+0x27c>
24014e88:	e7cf      	b.n	24014e2a <tSimpleLivingString3_initToPool+0x1fa>
24014e8a:	bf00      	nop
24014e8c:	f3af 8000 	nop.w
24014e90:	33333333 	.word	0x33333333
24014e94:	40133333 	.word	0x40133333
24014e98:	0a3d70a4 	.word	0x0a3d70a4
24014e9c:	c01ba3d7 	.word	0xc01ba3d7
24014ea0:	3c23d70a 	.word	0x3c23d70a
24014ea4:	3d8d78c4 	.word	0x3d8d78c4
24014ea8:	3f666666 	.word	0x3f666666
24014eac:	4019999a 	.word	0x4019999a

24014eb0 <tSimpleLivingString3_free>:
{
24014eb0:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
24014eb2:	6804      	ldr	r4, [r0, #0]
    tExpSmooth_free(&p->wlSmooth);
24014eb4:	f104 0058 	add.w	r0, r4, #88	; 0x58
24014eb8:	f7fc f9ea 	bl	24011290 <tExpSmooth_free>
    tLinearDelay_free(&p->delayLineU);
24014ebc:	f104 0034 	add.w	r0, r4, #52	; 0x34
24014ec0:	f7fb fcc0 	bl	24010844 <tLinearDelay_free>
    tLinearDelay_free(&p->delayLineL);
24014ec4:	f104 0038 	add.w	r0, r4, #56	; 0x38
24014ec8:	f7fb fcbc 	bl	24010844 <tLinearDelay_free>
    tOnePole_free(&p->bridgeFilter);
24014ecc:	f104 003c 	add.w	r0, r4, #60	; 0x3c
24014ed0:	f7fc fa1c 	bl	2401130c <tOnePole_free>
    tHighpass_free(&p->DCblocker);
24014ed4:	f104 0050 	add.w	r0, r4, #80	; 0x50
24014ed8:	f7fc fc60 	bl	2401179c <tHighpass_free>
    tFeedbackLeveler_free(&p->fbLev);
24014edc:	f104 0054 	add.w	r0, r4, #84	; 0x54
24014ee0:	f7fc f8da 	bl	24011098 <tFeedbackLeveler_free>
    mpool_free((char*)p, p->mempool);
24014ee4:	6821      	ldr	r1, [r4, #0]
24014ee6:	4620      	mov	r0, r4
}
24014ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)p, p->mempool);
24014eec:	f7ff b8d6 	b.w	2401409c <mpool_free>

24014ef0 <tSimpleLivingString3_setFreq>:
{
24014ef0:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
24014ef2:	6804      	ldr	r4, [r0, #0]
    Lfloat waveLength = (p->sampleRate/freq);
24014ef4:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
    p->freq = freq;
24014ef8:	ed84 0a01 	vstr	s0, [r4, #4]
    Lfloat waveLength = (p->sampleRate/freq);
24014efc:	eec7 7a00 	vdiv.f32	s15, s14, s0
    if (waveLength<4.8) waveLength=4.8f;
24014f00:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 24014f78 <tSimpleLivingString3_setFreq+0x88>
24014f04:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
24014f08:	eeb4 5bc6 	vcmpe.f64	d5, d6
24014f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014f10:	d42e      	bmi.n	24014f70 <tSimpleLivingString3_setFreq+0x80>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
24014f12:	6b23      	ldr	r3, [r4, #48]	; 0x30
    p->waveLengthInSamples =  waveLength * 0.5f;
24014f14:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
24014f18:	005b      	lsls	r3, r3, #1
24014f1a:	ee00 3a10 	vmov	s0, r3
24014f1e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->waveLengthInSamples =  waveLength * 0.5f;
24014f22:	fe80 0a67 	vminnm.f32	s0, s0, s15
24014f26:	ee20 0a07 	vmul.f32	s0, s0, s14
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24014f2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
    p->waveLengthInSamples =  waveLength * 0.5f;
24014f2e:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24014f32:	f01e fccd 	bl	240338d0 <__tExpSmooth_setDest_veneer>
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24014f36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24014f3a:	ed94 7a05 	vldr	s14, [r4, #20]
24014f3e:	eddf 7a12 	vldr	s15, [pc, #72]	; 24014f88 <tSimpleLivingString3_setFreq+0x98>
24014f42:	ee37 7a26 	vadd.f32	s14, s14, s13
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24014f46:	ed94 6a01 	vldr	s12, [r4, #4]
24014f4a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24014f4e:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24014f52:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 24014f80 <tSimpleLivingString3_setFreq+0x90>
24014f56:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
24014f5a:	ee27 7b06 	vmul.f64	d7, d7, d6
24014f5e:	ee80 0b07 	vdiv.f64	d0, d0, d7
24014f62:	f002 fead 	bl	24017cc0 <exp>
24014f66:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24014f6a:	ed84 0a04 	vstr	s0, [r4, #16]
    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);

    //p->decay=powf(0.001f,1.0f/(p->freq*p->userDecay));
}
24014f6e:	bd10      	pop	{r4, pc}
24014f70:	ed9f 0a06 	vldr	s0, [pc, #24]	; 24014f8c <tSimpleLivingString3_setFreq+0x9c>
24014f74:	e7d9      	b.n	24014f2a <tSimpleLivingString3_setFreq+0x3a>
24014f76:	bf00      	nop
24014f78:	33333333 	.word	0x33333333
24014f7c:	40133333 	.word	0x40133333
24014f80:	0a3d70a4 	.word	0x0a3d70a4
24014f84:	c01ba3d7 	.word	0xc01ba3d7
24014f88:	3d8d78c4 	.word	0x3d8d78c4
24014f8c:	4019999a 	.word	0x4019999a

24014f90 <tSimpleLivingString3_setDampFreq>:
    _tSimpleLivingString3* p = *pl;
    //p->temp1 = (1.0f - brightness) * 0.25f * p->decay;
    //p->temp2 = (1.0f + brightness) * 0.5f * p->decay;
    //tBiQuad_setCoefficients(&p->bridgeFilter2, p->temp1 , p->temp2, p->temp1 , 0.0f, 0.0f);

    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
24014f90:	6800      	ldr	r0, [r0, #0]
24014f92:	303c      	adds	r0, #60	; 0x3c
24014f94:	f7fc b9be 	b.w	24011314 <tOnePole_setFreq>

24014f98 <tSimpleLivingString3_setDecay>:
void     tSimpleLivingString3_setDecay(tSimpleLivingString3* const pl, Lfloat decay)
{
    _tSimpleLivingString3* p = *pl;
    p->userDecay = decay;

    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
24014f98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24014f9c:	eddf 7a10 	vldr	s15, [pc, #64]	; 24014fe0 <tSimpleLivingString3_setDecay+0x48>
{
24014fa0:	b510      	push	{r4, lr}
    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
24014fa2:	ee30 7a07 	vadd.f32	s14, s0, s14
    _tSimpleLivingString3* p = *pl;
24014fa6:	6804      	ldr	r4, [r0, #0]
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
24014fa8:	ed94 6a01 	vldr	s12, [r4, #4]
    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
24014fac:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->userDecay = decay;
24014fb0:	ed84 0a05 	vstr	s0, [r4, #20]
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
24014fb4:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
24014fb8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
24014fbc:	ed9f 5b06 	vldr	d5, [pc, #24]	; 24014fd8 <tSimpleLivingString3_setDecay+0x40>
24014fc0:	ee27 7b06 	vmul.f64	d7, d7, d6
24014fc4:	ee85 0b07 	vdiv.f64	d0, d5, d7
24014fc8:	f002 fe7a 	bl	24017cc0 <exp>
24014fcc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24014fd0:	ed84 0a04 	vstr	s0, [r4, #16]
    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);
    //p->decay=powf(0.001f,1.0f/(p->freq*decay));
}
24014fd4:	bd10      	pop	{r4, pc}
24014fd6:	bf00      	nop
24014fd8:	52bd3c36 	.word	0x52bd3c36
24014fdc:	c01ba196 	.word	0xc01ba196
24014fe0:	3d8d78c4 	.word	0x3d8d78c4

24014fe4 <tSimpleLivingString3_setTargetLev>:

void     tSimpleLivingString3_setTargetLev(tSimpleLivingString3* const pl, Lfloat targetLev)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setTargetLevel(&p->fbLev, targetLev);
24014fe4:	6800      	ldr	r0, [r0, #0]
24014fe6:	3054      	adds	r0, #84	; 0x54
24014fe8:	f7fc b892 	b.w	24011110 <tFeedbackLeveler_setTargetLevel>

24014fec <tSimpleLivingString3_setLevSmoothFactor>:
}

void     tSimpleLivingString3_setLevSmoothFactor(tSimpleLivingString3* const pl, Lfloat levSmoothFactor)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setFactor(&p->fbLev, levSmoothFactor);
24014fec:	6800      	ldr	r0, [r0, #0]
24014fee:	3054      	adds	r0, #84	; 0x54
24014ff0:	f7fc b862 	b.w	240110b8 <tFeedbackLeveler_setFactor>

24014ff4 <tSimpleLivingString3_setLevStrength>:
}

void     tSimpleLivingString3_setLevStrength(tSimpleLivingString3* const pl, Lfloat levStrength)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setStrength(&p->fbLev, levStrength);
24014ff4:	6800      	ldr	r0, [r0, #0]
24014ff6:	3054      	adds	r0, #84	; 0x54
24014ff8:	f7fc b85a 	b.w	240110b0 <tFeedbackLeveler_setStrength>

24014ffc <tSimpleLivingString3_setLevMode>:
}

void     tSimpleLivingString3_setLevMode(tSimpleLivingString3* const pl, int levMode)
{
24014ffc:	b538      	push	{r3, r4, r5, lr}
    _tSimpleLivingString3* p = *pl;
24014ffe:	6805      	ldr	r5, [r0, #0]
{
24015000:	460c      	mov	r4, r1
    tFeedbackLeveler_setMode(&p->fbLev, levMode);
24015002:	f105 0054 	add.w	r0, r5, #84	; 0x54
24015006:	f7fc f85b 	bl	240110c0 <tFeedbackLeveler_setMode>
    p->levMode=levMode;
2401500a:	622c      	str	r4, [r5, #32]
}
2401500c:	bd38      	pop	{r3, r4, r5, pc}
2401500e:	bf00      	nop

24015010 <tSimpleLivingString3_pluck>:

void   tSimpleLivingString3_pluck(tSimpleLivingString3* const pl, Lfloat input, Lfloat position)
{
24015010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    _tSimpleLivingString3* p = *pl;
24015014:	6801      	ldr	r1, [r0, #0]
{
24015016:	b083      	sub	sp, #12
    int length = p->waveLengthInSamples;
24015018:	edd1 7a02 	vldr	s15, [r1, #8]
2401501c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24015020:	ee17 0a90 	vmov	r0, s15
    int pluckPoint = (int)(length * position);
24015024:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24015028:	ee67 0aa0 	vmul.f32	s1, s15, s1
2401502c:	eefd 7ae0 	vcvt.s32.f32	s15, s1
24015030:	ee17 6a90 	vmov	r6, s15
    if (pluckPoint < 1)
24015034:	2e00      	cmp	r6, #0
24015036:	f340 8085 	ble.w	24015144 <tSimpleLivingString3_pluck+0x134>
    {
    	pluckPoint = 1;
    }
    else if (pluckPoint > (length-1))
2401503a:	42b0      	cmp	r0, r6
2401503c:	dc11      	bgt.n	24015062 <tSimpleLivingString3_pluck+0x52>
    {
    	pluckPoint = length-1;
2401503e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    }
    int remainder = length-pluckPoint;
    for (int i = 0; i < length; i++)
24015042:	2800      	cmp	r0, #0
    	pluckPoint = length-1;
24015044:	4666      	mov	r6, ip
    for (int i = 0; i < length; i++)
24015046:	dd7a      	ble.n	2401513e <tSimpleLivingString3_pluck+0x12e>
    {
        Lfloat val = 0.0f;
        if (i <= pluckPoint)
        {
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
24015048:	ee07 ca90 	vmov	s15, ip
2401504c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24015050:	f1bc 0f00 	cmp.w	ip, #0
24015054:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
24015058:	ee86 7a86 	vdiv.f32	s14, s13, s12
2401505c:	da10      	bge.n	24015080 <tSimpleLivingString3_pluck+0x70>
2401505e:	2300      	movs	r3, #0
24015060:	e02d      	b.n	240150be <tSimpleLivingString3_pluck+0xae>
    int remainder = length-pluckPoint;
24015062:	1b83      	subs	r3, r0, r6
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
24015064:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
24015068:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
2401506c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
        }
        else
        {
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
24015070:	ee07 3a90 	vmov	s15, r3
24015074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24015078:	ee85 7a86 	vdiv.f32	s14, s11, s12
2401507c:	eec5 6aa7 	vdiv.f32	s13, s11, s15
24015080:	4566      	cmp	r6, ip
    for (int i = 0; i < length; i++)
24015082:	f04f 0300 	mov.w	r3, #0
24015086:	bfa8      	it	ge
24015088:	4666      	movge	r6, ip
2401508a:	ee20 7a07 	vmul.f32	s14, s0, s14
                                 
        }
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
2401508e:	6b4c      	ldr	r4, [r1, #52]	; 0x34
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
24015090:	ee07 3a90 	vmov	s15, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24015094:	e9d4 2506 	ldrd	r2, r5, [r4, #24]
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
24015098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        p->delayLineU->buff[bufWritePoint] = val;
2401509c:	68a4      	ldr	r4, [r4, #8]
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
2401509e:	441a      	add	r2, r3
    for (int i = 0; i < length; i++)
240150a0:	3301      	adds	r3, #1
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
240150a2:	fbb2 f7f5 	udiv	r7, r2, r5
240150a6:	fb05 2217 	mls	r2, r5, r7, r2
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
240150aa:	ee67 7a87 	vmul.f32	s15, s15, s14
    for (int i = 0; i < length; i++)
240150ae:	42b3      	cmp	r3, r6
        p->delayLineU->buff[bufWritePoint] = val;
240150b0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
240150b4:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < length; i++)
240150b8:	dde9      	ble.n	2401508e <tSimpleLivingString3_pluck+0x7e>
240150ba:	4298      	cmp	r0, r3
240150bc:	dd1d      	ble.n	240150fa <tSimpleLivingString3_pluck+0xea>
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
240150be:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
240150c2:	ee07 3a90 	vmov	s15, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
240150c6:	6b4c      	ldr	r4, [r1, #52]	; 0x34
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
240150c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
240150cc:	eef0 7a65 	vmov.f32	s15, s11
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
240150d0:	e9d4 2506 	ldrd	r2, r5, [r4, #24]
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
240150d4:	ee36 7a47 	vsub.f32	s14, s12, s14
        p->delayLineU->buff[bufWritePoint] = val;
240150d8:	68a4      	ldr	r4, [r4, #8]
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
240150da:	441a      	add	r2, r3
    for (int i = 0; i < length; i++)
240150dc:	3301      	adds	r3, #1
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
240150de:	eee6 7a87 	vfma.f32	s15, s13, s14
    for (int i = 0; i < length; i++)
240150e2:	4298      	cmp	r0, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
240150e4:	fbb2 f6f5 	udiv	r6, r2, r5
240150e8:	fb05 2216 	mls	r2, r5, r6, r2
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
240150ec:	ee60 7a27 	vmul.f32	s15, s0, s15
        p->delayLineU->buff[bufWritePoint] = val;
240150f0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
240150f4:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < length; i++)
240150f8:	dce3      	bgt.n	240150c2 <tSimpleLivingString3_pluck+0xb2>
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
240150fa:	f04f 0e00 	mov.w	lr, #0
    }
    for (int i = 0; i < length; i++)
    {
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
        int currentBufReadPoint = ((length-1-i)+p->delayLineU->outPoint);
240150fe:	ebac 020e 	sub.w	r2, ip, lr
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24015102:	e9d1 540d 	ldrd	r5, r4, [r1, #52]	; 0x34
24015106:	69a3      	ldr	r3, [r4, #24]
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
24015108:	69ef      	ldr	r7, [r5, #28]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
2401510a:	9301      	str	r3, [sp, #4]
        int currentBufReadPoint = ((length-1-i)+p->delayLineU->outPoint);
2401510c:	69ab      	ldr	r3, [r5, #24]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
2401510e:	69e6      	ldr	r6, [r4, #28]
        int currentBufReadPoint = ((length-1-i)+p->delayLineU->outPoint);
24015110:	441a      	add	r2, r3
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24015112:	9b01      	ldr	r3, [sp, #4]
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
24015114:	68ad      	ldr	r5, [r5, #8]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24015116:	4473      	add	r3, lr
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
24015118:	68a4      	ldr	r4, [r4, #8]
    for (int i = 0; i < length; i++)
2401511a:	f10e 0e01 	add.w	lr, lr, #1
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
2401511e:	fbb2 f9f7 	udiv	r9, r2, r7
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24015122:	fbb3 f8f6 	udiv	r8, r3, r6
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
24015126:	fb07 2219 	mls	r2, r7, r9, r2
    for (int i = 0; i < length; i++)
2401512a:	4570      	cmp	r0, lr
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
2401512c:	fb06 3318 	mls	r3, r6, r8, r3
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
24015130:	eb05 0282 	add.w	r2, r5, r2, lsl #2
24015134:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24015138:	6812      	ldr	r2, [r2, #0]
2401513a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < length; i++)
2401513c:	d1df      	bne.n	240150fe <tSimpleLivingString3_pluck+0xee>
    }
}
2401513e:	b003      	add	sp, #12
24015140:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    for (int i = 0; i < length; i++)
24015144:	2800      	cmp	r0, #0
24015146:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
2401514a:	ddf8      	ble.n	2401513e <tSimpleLivingString3_pluck+0x12e>
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
2401514c:	ee07 ca10 	vmov	s14, ip
24015150:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    	pluckPoint = 1;
24015154:	2601      	movs	r6, #1
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
24015156:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
2401515a:	eeb0 7a67 	vmov.f32	s14, s15
2401515e:	eec7 6a86 	vdiv.f32	s13, s15, s12
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
24015162:	eeb0 6a67 	vmov.f32	s12, s15
24015166:	e78b      	b.n	24015080 <tSimpleLivingString3_pluck+0x70>

24015168 <tSimpleLivingString3_tick>:

Lfloat   tSimpleLivingString3_tick(tSimpleLivingString3* const pl, Lfloat input)
{
24015168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2401516c:	ed2d 8b02 	vpush	{d8}
    _tSimpleLivingString3* p = *pl;
24015170:	6804      	ldr	r4, [r0, #0]
{
24015172:	eef0 8a40 	vmov.f32	s17, s0

    //p->changeGainCompensator = 1.0f;
    Lfloat wl = tExpSmooth_tick(&p->wlSmooth);
24015176:	f104 0058 	add.w	r0, r4, #88	; 0x58
    //Lfloat changeInDelayTime = wl - p->prevDelayLength;
    //if (changeInDelayTime < 0.0f)
    {
    //	p->changeGainCompensator = sqrtf(1.0f - changeInDelayTime);
    }
    tLinearDelay_setDelay(&p->delayLineU, wl);
2401517a:	f104 0534 	add.w	r5, r4, #52	; 0x34
    Lfloat wl = tExpSmooth_tick(&p->wlSmooth);
2401517e:	f01e fba3 	bl	240338c8 <__tExpSmooth_tick_veneer>
24015182:	eeb0 8a40 	vmov.f32	s16, s0
    tLinearDelay_setDelay(&p->delayLineL, wl);
24015186:	f104 0738 	add.w	r7, r4, #56	; 0x38
    tLinearDelay_setDelay(&p->delayLineU, wl);
2401518a:	4628      	mov	r0, r5
2401518c:	f7fb fbf0 	bl	24010970 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, wl);
24015190:	eeb0 0a48 	vmov.f32	s0, s16
24015194:	4638      	mov	r0, r7
24015196:	f7fb fbeb 	bl	24010970 <tLinearDelay_setDelay>
    
    for (int i = 0; i < p->oversampling; i++)
2401519a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
2401519c:	2b00      	cmp	r3, #0
2401519e:	dd56      	ble.n	2401524e <tSimpleLivingString3_tick+0xe6>
    {
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay - p->rippleGain));
240151a0:	f104 0a50 	add.w	sl, r4, #80	; 0x50
240151a4:	f104 093c 	add.w	r9, r4, #60	; 0x3c
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
240151a8:	f104 0854 	add.w	r8, r4, #84	; 0x54
    for (int i = 0; i < p->oversampling; i++)
240151ac:	2600      	movs	r6, #0
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay - p->rippleGain));
240151ae:	4628      	mov	r0, r5
    for (int i = 0; i < p->oversampling; i++)
240151b0:	3601      	adds	r6, #1
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay - p->rippleGain));
240151b2:	f7fb fbb1 	bl	24010918 <tLinearDelay_tickOut>
240151b6:	4648      	mov	r0, r9
240151b8:	f7fc f8ca 	bl	24011350 <tOnePole_tick>
240151bc:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
240151c0:	edd4 7a04 	vldr	s15, [r4, #16]
240151c4:	4650      	mov	r0, sl
240151c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
240151ca:	ee27 0a80 	vmul.f32	s0, s15, s0
240151ce:	f7fc faf5 	bl	240117bc <tHighpass_tick>
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
240151d2:	4640      	mov	r0, r8
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay - p->rippleGain));
240151d4:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
240151d8:	f7fb ff76 	bl	240110c8 <tFeedbackLeveler_tick>
240151dc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240151e0:	eef0 0a40 	vmov.f32	s1, s0
240151e4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
240151e8:	f01e fb76 	bl	240338d8 <__LEAF_clip_veneer>
    	//p->Uout = tLinearDelay_tickOut(&p->delayLineU) * p->decay;
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
240151ec:	4638      	mov	r0, r7
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
240151ee:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
240151f2:	f7fb fb91 	bl	24010918 <tLinearDelay_tickOut>
240151f6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240151fa:	eef0 0a40 	vmov.f32	s1, s0
240151fe:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24015202:	f01e fb69 	bl	240338d8 <__LEAF_clip_veneer>
24015206:	eef0 7a40 	vmov.f32	s15, s0

		tLinearDelay_tickIn(&p->delayLineU, (-1.0f * p->Lout) + input);
2401520a:	4628      	mov	r0, r5
2401520c:	ee38 0ac0 	vsub.f32	s0, s17, s0
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
24015210:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
		tLinearDelay_tickIn(&p->delayLineU, (-1.0f * p->Lout) + input);
24015214:	f7fb fb6c 	bl	240108f0 <tLinearDelay_tickIn>
		tLinearDelay_tickIn(&p->delayLineL, -1.0f * p->Uout);
24015218:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
2401521c:	4638      	mov	r0, r7
2401521e:	eeb1 0a40 	vneg.f32	s0, s0
24015222:	f7fb fb65 	bl	240108f0 <tLinearDelay_tickIn>
		tLinearDelay_addTo (&p->delayLineU, p->Lout * p->rippleGain, p->rippleDelay*wl);
24015226:	edd4 7a1a 	vldr	s15, [r4, #104]	; 0x68
2401522a:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
2401522e:	4628      	mov	r0, r5
24015230:	ee68 7a27 	vmul.f32	s15, s16, s15
24015234:	ed94 0a19 	vldr	s0, [r4, #100]	; 0x64
24015238:	ee26 0a80 	vmul.f32	s0, s13, s0
2401523c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24015240:	ee17 1a90 	vmov	r1, s15
24015244:	f7fb fbe0 	bl	24010a08 <tLinearDelay_addTo>
    for (int i = 0; i < p->oversampling; i++)
24015248:	6de3      	ldr	r3, [r4, #92]	; 0x5c
2401524a:	42b3      	cmp	r3, r6
2401524c:	dcaf      	bgt.n	240151ae <tSimpleLivingString3_tick+0x46>
    }
    
    //calculate pickup point
    Lfloat point = wl * p->pickupPoint;
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
2401524e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    Lfloat point = wl * p->pickupPoint;
24015252:	edd4 6a13 	vldr	s13, [r4, #76]	; 0x4c
    int32_t whichPoint = ((int32_t)roundf(point));
    Lfloat LfloatPart = point - whichPoint;

    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
24015256:	6b63      	ldr	r3, [r4, #52]	; 0x34
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);

    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
24015258:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
    Lfloat point = wl * p->pickupPoint;
2401525c:	ee66 5a88 	vmul.f32	s11, s13, s16
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
24015260:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
24015262:	ee77 6ae6 	vsub.f32	s13, s15, s13
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
24015266:	689d      	ldr	r5, [r3, #8]
    int32_t whichPoint = ((int32_t)roundf(point));
24015268:	feb8 6a65 	vrinta.f32	s12, s11
2401526c:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
24015270:	ee66 6a88 	vmul.f32	s13, s13, s16
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
24015274:	ee37 5ae5 	vsub.f32	s10, s15, s11
    whichPoint = (int32_t)roundf(reversePoint);
24015278:	feb8 7a66 	vrinta.f32	s14, s13
2401527c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
24015280:	ee37 0ae6 	vsub.f32	s0, s15, s13
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
24015284:	e9d3 2706 	ldrd	r2, r7, [r3, #24]
    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
24015288:	ee16 3a10 	vmov	r3, s12
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
2401528c:	ee17 0a10 	vmov	r0, s14
    Lfloat LfloatPart = point - whichPoint;
24015290:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
24015294:	441a      	add	r2, r3
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
24015296:	698b      	ldr	r3, [r1, #24]
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
24015298:	fb92 f6f7 	sdiv	r6, r2, r7
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
2401529c:	4418      	add	r0, r3
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
2401529e:	fb07 2216 	mls	r2, r7, r6, r2
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
240152a2:	ee75 7a06 	vadd.f32	s15, s10, s12
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
240152a6:	4603      	mov	r3, r0
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
240152a8:	69c8      	ldr	r0, [r1, #28]
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
240152aa:	6889      	ldr	r1, [r1, #8]
    Lfloat LfloatPart = point - whichPoint;
240152ac:	ee75 5ac6 	vsub.f32	s11, s11, s12
    LfloatPart = reversePoint - whichPoint;
240152b0:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
240152b4:	fb93 f6f0 	sdiv	r6, r3, r0
240152b8:	fb00 3316 	mls	r3, r0, r6, r3
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
240152bc:	1c56      	adds	r6, r2, #1
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
240152be:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
240152c2:	ee30 0a06 	vadd.f32	s0, s0, s12
    LfloatPart = reversePoint - whichPoint;
240152c6:	ee76 6ac6 	vsub.f32	s13, s13, s12
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
240152ca:	ed92 7a00 	vldr	s14, [r2]
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
240152ce:	eb01 0283 	add.w	r2, r1, r3, lsl #2
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
240152d2:	3301      	adds	r3, #1
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
240152d4:	ed92 6a00 	vldr	s12, [r2]
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
240152d8:	fb96 f2f7 	sdiv	r2, r6, r7
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
240152dc:	ee20 0a06 	vmul.f32	s0, s0, s12
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
240152e0:	fb07 6612 	mls	r6, r7, r2, r6
    //p->curr = p->Uout;

    p->prevDelayLength = p->waveLengthInSamples;
240152e4:	68a2      	ldr	r2, [r4, #8]
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
240152e6:	eb05 0586 	add.w	r5, r5, r6, lsl #2
240152ea:	eea7 0a27 	vfma.f32	s0, s14, s15
240152ee:	edd5 7a00 	vldr	s15, [r5]
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
240152f2:	fb93 f5f0 	sdiv	r5, r3, r0
240152f6:	eea7 0aa5 	vfma.f32	s0, s15, s11
240152fa:	fb00 3315 	mls	r3, r0, r5, r3
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
240152fe:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
24015302:	edd1 7a00 	vldr	s15, [r1]
    p->prevDelayLength = p->waveLengthInSamples;
24015306:	61a2      	str	r2, [r4, #24]
    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
24015308:	eea7 0aa6 	vfma.f32	s0, s15, s13
2401530c:	ee20 0a24 	vmul.f32	s0, s0, s9
24015310:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    //Lfloat stringInput=tHighpass_tick(&p->DCblocker, tFeedbackLeveler_tick(&p->fbLev, (p->levMode==0?p->decay*stringOut:stringOut)+input));
    //tLinearDelay_tickIn(&p->delayLine, stringInput);
    //tLinearDelay_setDelay(&p->delayLine, tExpSmooth_tick(&p->wlSmooth));
    //p->curr = d1 + d2;
    return p->curr;
}
24015314:	ecbd 8b02 	vpop	{d8}
24015318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

2401531c <tSimpleLivingString3_setPickupPoint>:


void   tSimpleLivingString3_setPickupPoint(tSimpleLivingString3* const pl, Lfloat pickupPoint)
{
    _tSimpleLivingString3* p = *pl;
2401531c:	6803      	ldr	r3, [r0, #0]
    p->pickupPoint = pickupPoint;
2401531e:	ed83 0a13 	vstr	s0, [r3, #76]	; 0x4c
}
24015322:	4770      	bx	lr
24015324:	0000      	movs	r0, r0
	...

24015328 <tSimpleLivingString5_initToPool>:
}

void    tSimpleLivingString5_initToPool  (tSimpleLivingString5* const pl, int oversampling, Lfloat freq, Lfloat dampFreq,
                                         Lfloat decay, Lfloat prepPos, Lfloat prepIndex, Lfloat pluckPos, Lfloat targetLev, Lfloat levSmoothFactor,
                                         Lfloat levStrength, int levMode, tMempool* const mp)
{
24015328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2401532c:	ed2d 8b0a 	vpush	{d8-d12}
    _tMempool* m = *mp;
24015330:	f8d3 9000 	ldr.w	r9, [r3]
{
24015334:	460e      	mov	r6, r1
24015336:	b083      	sub	sp, #12
24015338:	4680      	mov	r8, r0
    _tSimpleLivingString5* p = *pl = (_tSimpleLivingString5*) mpool_alloc(sizeof(_tSimpleLivingString5), m);
2401533a:	4649      	mov	r1, r9
2401533c:	20b0      	movs	r0, #176	; 0xb0
{
2401533e:	eeb0 9a61 	vmov.f32	s18, s3
24015342:	461d      	mov	r5, r3
24015344:	eef0 8a42 	vmov.f32	s17, s4
24015348:	4617      	mov	r7, r2
2401534a:	eef0 ca62 	vmov.f32	s25, s5
2401534e:	eef0 aa41 	vmov.f32	s21, s2
24015352:	eef0 ba43 	vmov.f32	s23, s6
24015356:	eeb0 ca63 	vmov.f32	s24, s7
2401535a:	eeb0 ba44 	vmov.f32	s22, s8
2401535e:	eef0 9a40 	vmov.f32	s19, s0
24015362:	eeb0 8a60 	vmov.f32	s16, s1
    _tSimpleLivingString5* p = *pl = (_tSimpleLivingString5*) mpool_alloc(sizeof(_tSimpleLivingString5), m);
24015366:	f7fe fdd7 	bl	24013f18 <mpool_alloc>
    p->mempool = m;
    LEAF* leaf = p->mempool->leaf;
    p->oversampling = oversampling;
    p->sampleRate = leaf->sampleRate * oversampling;
2401536a:	ee07 6a90 	vmov	s15, r6
    _tSimpleLivingString5* p = *pl = (_tSimpleLivingString5*) mpool_alloc(sizeof(_tSimpleLivingString5), m);
2401536e:	f8c8 0000 	str.w	r0, [r8]
    p->mempool = m;
24015372:	f8c0 9000 	str.w	r9, [r0]
    _tSimpleLivingString5* p = *pl = (_tSimpleLivingString5*) mpool_alloc(sizeof(_tSimpleLivingString5), m);
24015376:	4604      	mov	r4, r0
    LEAF* leaf = p->mempool->leaf;
24015378:	f8d9 3004 	ldr.w	r3, [r9, #4]
    p->sampleRate = leaf->sampleRate * oversampling;
2401537c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    p->oversampling = oversampling;
24015380:	f8c0 6098 	str.w	r6, [r0, #152]	; 0x98
    p->curr=0.0f;
    p->maxLength = 2400 * oversampling;
    p->prepPos = prepPos;
    p->prepIndex = prepIndex;
    p->pluckPosition = pluckPos;
    tExpSmooth_initToPool(&p->prepPosSmooth, prepPos, 0.01f, mp);
24015384:	eeb0 0a49 	vmov.f32	s0, s18
    p->sampleRate = leaf->sampleRate * oversampling;
24015388:	edd3 7a00 	vldr	s15, [r3]
    p->maxLength = 2400 * oversampling;
2401538c:	f44f 6316 	mov.w	r3, #2400	; 0x960
    p->prepPos = prepPos;
24015390:	ed80 9a0e 	vstr	s18, [r0, #56]	; 0x38
    tExpSmooth_initToPool(&p->prepPosSmooth, prepPos, 0.01f, mp);
24015394:	4629      	mov	r1, r5
    p->sampleRate = leaf->sampleRate * oversampling;
24015396:	ee67 7a87 	vmul.f32	s15, s15, s14
    p->maxLength = 2400 * oversampling;
2401539a:	fb03 f606 	mul.w	r6, r3, r6
    p->curr=0.0f;
2401539e:	2300      	movs	r3, #0
    p->prepIndex = prepIndex;
240153a0:	edc0 8a0d 	vstr	s17, [r0, #52]	; 0x34
    p->maxLength = 2400 * oversampling;
240153a4:	6306      	str	r6, [r0, #48]	; 0x30
    tExpSmooth_initToPool(&p->prepPosSmooth, prepPos, 0.01f, mp);
240153a6:	3090      	adds	r0, #144	; 0x90
    p->curr=0.0f;
240153a8:	f840 3c6c 	str.w	r3, [r0, #-108]
    tExpSmooth_initToPool(&p->prepIndexSmooth, prepIndex, 0.01f, mp);

    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
240153ac:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
    p->sampleRate = leaf->sampleRate * oversampling;
240153b0:	edc0 7a03 	vstr	s15, [r0, #12]
    tLinearDelay_initToPool(&p->delUF,p->waveLengthInSamples, p->maxLength, mp);
240153b4:	f104 0b40 	add.w	fp, r4, #64	; 0x40
    p->pluckPosition = pluckPos;
240153b8:	ed40 ca0a 	vstr	s25, [r0, #-40]	; 0xffffffd8
    tLinearDelay_initToPool(&p->delUB,p->waveLengthInSamples, p->maxLength, mp);
240153bc:	f104 0a44 	add.w	sl, r4, #68	; 0x44
    tExpSmooth_initToPool(&p->prepPosSmooth, prepPos, 0.01f, mp);
240153c0:	eddf 0ab5 	vldr	s1, [pc, #724]	; 24015698 <tSimpleLivingString5_initToPool+0x370>
    tLinearDelay_initToPool(&p->delLF,p->waveLengthInSamples, p->maxLength, mp);
240153c4:	f104 093c 	add.w	r9, r4, #60	; 0x3c
    _tSimpleLivingString5* p = *pl = (_tSimpleLivingString5*) mpool_alloc(sizeof(_tSimpleLivingString5), m);
240153c8:	f8cd 8004 	str.w	r8, [sp, #4]
    tExpSmooth_initToPool(&p->prepPosSmooth, prepPos, 0.01f, mp);
240153cc:	f7fb ff34 	bl	24011238 <tExpSmooth_initToPool>
    tExpSmooth_initToPool(&p->prepIndexSmooth, prepIndex, 0.01f, mp);
240153d0:	eeb0 0a68 	vmov.f32	s0, s17
240153d4:	4629      	mov	r1, r5
240153d6:	eddf 0ab0 	vldr	s1, [pc, #704]	; 24015698 <tSimpleLivingString5_initToPool+0x370>
240153da:	f104 0094 	add.w	r0, r4, #148	; 0x94
240153de:	f7fb ff2b 	bl	24011238 <tExpSmooth_initToPool>
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
240153e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
240153e6:	edd4 7a27 	vldr	s15, [r4, #156]	; 0x9c
240153ea:	f104 088c 	add.w	r8, r4, #140	; 0x8c
240153ee:	eddf 0aaa 	vldr	s1, [pc, #680]	; 24015698 <tSimpleLivingString5_initToPool+0x370>
240153f2:	4629      	mov	r1, r5
240153f4:	ee87 9a29 	vdiv.f32	s18, s14, s19
240153f8:	4640      	mov	r0, r8
    tLinearDelay_initToPool(&p->delLB,p->waveLengthInSamples, p->maxLength, mp);
240153fa:	f104 0648 	add.w	r6, r4, #72	; 0x48
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
240153fe:	ee29 0a0a 	vmul.f32	s0, s18, s20
24015402:	ee20 0a27 	vmul.f32	s0, s0, s15
24015406:	f7fb ff17 	bl	24011238 <tExpSmooth_initToPool>
    tLinearDelay_initToPool(&p->delUF,p->waveLengthInSamples, p->maxLength, mp);
2401540a:	ed94 0a02 	vldr	s0, [r4, #8]
2401540e:	462a      	mov	r2, r5
24015410:	6b21      	ldr	r1, [r4, #48]	; 0x30
24015412:	4658      	mov	r0, fp
24015414:	f7fb f9a8 	bl	24010768 <tLinearDelay_initToPool>
    tLinearDelay_initToPool(&p->delUB,p->waveLengthInSamples, p->maxLength, mp);
24015418:	ed94 0a02 	vldr	s0, [r4, #8]
2401541c:	462a      	mov	r2, r5
2401541e:	6b21      	ldr	r1, [r4, #48]	; 0x30
24015420:	4650      	mov	r0, sl
24015422:	f7fb f9a1 	bl	24010768 <tLinearDelay_initToPool>
    tLinearDelay_initToPool(&p->delLF,p->waveLengthInSamples, p->maxLength, mp);
24015426:	ed94 0a02 	vldr	s0, [r4, #8]
2401542a:	462a      	mov	r2, r5
2401542c:	6b21      	ldr	r1, [r4, #48]	; 0x30
2401542e:	4648      	mov	r0, r9
24015430:	f7fb f99a 	bl	24010768 <tLinearDelay_initToPool>
    tLinearDelay_initToPool(&p->delLB,p->waveLengthInSamples, p->maxLength, mp);
24015434:	4630      	mov	r0, r6
24015436:	ed94 0a02 	vldr	s0, [r4, #8]
2401543a:	462a      	mov	r2, r5
2401543c:	6b21      	ldr	r1, [r4, #48]	; 0x30
2401543e:	f7fb f993 	bl	24010768 <tLinearDelay_initToPool>
    mpool_free((char*)p, p->mempool);
}

void     tSimpleLivingString5_setFreq(tSimpleLivingString5* const pl, Lfloat freq)
{
    _tSimpleLivingString5* p = *pl;
24015442:	9b01      	ldr	r3, [sp, #4]
24015444:	6818      	ldr	r0, [r3, #0]
    p->freq = freq;
    Lfloat waveLength = (p->sampleRate/freq);
24015446:	ed90 7a27 	vldr	s14, [r0, #156]	; 0x9c
    p->freq = freq;
2401544a:	edc0 9a01 	vstr	s19, [r0, #4]
    Lfloat waveLength = (p->sampleRate/freq);
2401544e:	ee29 7a07 	vmul.f32	s14, s18, s14
    if (waveLength<4.8) waveLength=4.8f;
24015452:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 24015690 <tSimpleLivingString5_initToPool+0x368>
24015456:	eeb7 5ac7 	vcvt.f64.f32	d5, s14
2401545a:	eeb4 5bc6 	vcmpe.f64	d5, d6
2401545e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015462:	f100 810e 	bmi.w	24015682 <tSimpleLivingString5_initToPool+0x35a>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
24015466:	6b02      	ldr	r2, [r0, #48]	; 0x30
24015468:	0053      	lsls	r3, r2, #1
2401546a:	ee07 3a90 	vmov	s15, r3
2401546e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    p->waveLengthInSamples =  waveLength * 0.5f;
24015472:	fec7 7ac7 	vminnm.f32	s15, s15, s14
24015476:	ee27 0a8a 	vmul.f32	s0, s15, s20
2401547a:	ed80 0a02 	vstr	s0, [r0, #8]
    tLinearDelay_setDelay(&p->delUF, p->waveLengthInSamples-(p->prepPos*p->waveLengthInSamples));
2401547e:	eef7 ca00 	vmov.f32	s25, #112	; 0x3f800000  1.0
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24015482:	308c      	adds	r0, #140	; 0x8c
    p->rippleDelay = 0.5f;
24015484:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24015488:	f01e fa22 	bl	240338d0 <__tExpSmooth_setDest_veneer>
    tLinearDelay_setDelay(&p->delUF, p->waveLengthInSamples-(p->prepPos*p->waveLengthInSamples));
2401548c:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
24015490:	ed94 0a02 	vldr	s0, [r4, #8]
24015494:	4658      	mov	r0, fp
24015496:	ee7c 7ae7 	vsub.f32	s15, s25, s15
    p->rippleGain = 0.0f;
2401549a:	ed9f aa80 	vldr	s20, [pc, #512]	; 2401569c <tSimpleLivingString5_initToPool+0x374>
    tLinearDelay_setDelay(&p->delUF, p->waveLengthInSamples-(p->prepPos*p->waveLengthInSamples));
2401549e:	ee27 0a80 	vmul.f32	s0, s15, s0
240154a2:	f7fb fa65 	bl	24010970 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delUB, p->waveLengthInSamples-((1.0f-p->prepPos)*p->waveLengthInSamples));
240154a6:	edd4 7a02 	vldr	s15, [r4, #8]
240154aa:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
240154ae:	4650      	mov	r0, sl
240154b0:	ee20 0a27 	vmul.f32	s0, s0, s15
240154b4:	f7fb fa5c 	bl	24010970 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delLF, p->waveLengthInSamples-(p->prepPos*p->waveLengthInSamples));
240154b8:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
240154bc:	ed94 0a02 	vldr	s0, [r4, #8]
240154c0:	4648      	mov	r0, r9
240154c2:	ee7c 7ae7 	vsub.f32	s15, s25, s15
240154c6:	ee27 0a80 	vmul.f32	s0, s15, s0
240154ca:	f7fb fa51 	bl	24010970 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delLB, p->waveLengthInSamples-((1.0f-p->prepPos)*p->waveLengthInSamples));
240154ce:	edd4 7a02 	vldr	s15, [r4, #8]
240154d2:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
240154d6:	4630      	mov	r0, r6
240154d8:	ee20 0a27 	vmul.f32	s0, s0, s15
240154dc:	f7fb fa48 	bl	24010970 <tLinearDelay_setDelay>
    tLinearDelay_clear(&p->delUF);
240154e0:	4658      	mov	r0, fp
240154e2:	f7fb f9bb 	bl	2401085c <tLinearDelay_clear>
    tLinearDelay_clear(&p->delUB);
240154e6:	4650      	mov	r0, sl
240154e8:	f7fb f9b8 	bl	2401085c <tLinearDelay_clear>
    tLinearDelay_clear(&p->delLF);
240154ec:	4648      	mov	r0, r9
240154ee:	f7fb f9b5 	bl	2401085c <tLinearDelay_clear>
    tLinearDelay_clear(&p->delLB);
240154f2:	4630      	mov	r0, r6
240154f4:	f7fb f9b2 	bl	2401085c <tLinearDelay_clear>
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
240154f8:	f104 004c 	add.w	r0, r4, #76	; 0x4c
240154fc:	4629      	mov	r1, r5
240154fe:	eeb0 0a48 	vmov.f32	s0, s16
    p->dampFreq = dampFreq;
24015502:	ed84 8a03 	vstr	s16, [r4, #12]
    tOnePole_initToPool(&p->nutFilter, dampFreq, mp);
24015506:	f104 0650 	add.w	r6, r4, #80	; 0x50
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
2401550a:	9001      	str	r0, [sp, #4]
2401550c:	f7fb feca 	bl	240112a4 <tOnePole_initToPool>
    tOnePole_setSampleRate(&p->bridgeFilter, p->sampleRate);
24015510:	ed94 0a27 	vldr	s0, [r4, #156]	; 0x9c
24015514:	9801      	ldr	r0, [sp, #4]
24015516:	f7fb ff2f 	bl	24011378 <tOnePole_setSampleRate>
    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
2401551a:	eeb0 0a48 	vmov.f32	s0, s16
2401551e:	9801      	ldr	r0, [sp, #4]
24015520:	f7fb fef8 	bl	24011314 <tOnePole_setFreq>
    tOnePole_initToPool(&p->nutFilter, dampFreq, mp);
24015524:	4629      	mov	r1, r5
24015526:	4630      	mov	r0, r6
24015528:	eeb0 0a48 	vmov.f32	s0, s16
2401552c:	9601      	str	r6, [sp, #4]
2401552e:	f7fb feb9 	bl	240112a4 <tOnePole_initToPool>
    tHighpass_initToPool(&p->DCblocker,0.001f, mp);
24015532:	f104 066c 	add.w	r6, r4, #108	; 0x6c
    tOnePole_setSampleRate(&p->nutFilter, p->sampleRate);
24015536:	ed94 0a27 	vldr	s0, [r4, #156]	; 0x9c
2401553a:	9801      	ldr	r0, [sp, #4]
2401553c:	f7fb ff1c 	bl	24011378 <tOnePole_setSampleRate>
    tOnePole_setFreq(&p->nutFilter, dampFreq);
24015540:	eeb0 0a48 	vmov.f32	s0, s16
24015544:	9801      	ldr	r0, [sp, #4]
24015546:	f7fb fee5 	bl	24011314 <tOnePole_setFreq>
    tHighpass_initToPool(&p->DCblocker,0.001f, mp);
2401554a:	4629      	mov	r1, r5
2401554c:	4630      	mov	r0, r6
2401554e:	ed9f 0a54 	vldr	s0, [pc, #336]	; 240156a0 <tSimpleLivingString5_initToPool+0x378>
    p->rippleGain = 0.0f;
24015552:	ed84 aa28 	vstr	s20, [r4, #160]	; 0xa0
    p->rippleDelay = 0.5f;
24015556:	edc4 8a29 	vstr	s17, [r4, #164]	; 0xa4
    tHighpass_initToPool(&p->DCblocker,0.001f, mp);
2401555a:	9601      	str	r6, [sp, #4]
2401555c:	f7fc f8fe 	bl	2401175c <tHighpass_initToPool>
    tHighpass_initToPool(&p->DCblocker2,0.001f, mp);
24015560:	f104 0670 	add.w	r6, r4, #112	; 0x70
    tHighpass_setSampleRate(&p->DCblocker,p->sampleRate);
24015564:	ed94 0a27 	vldr	s0, [r4, #156]	; 0x9c
24015568:	9801      	ldr	r0, [sp, #4]
2401556a:	f7fc f937 	bl	240117dc <tHighpass_setSampleRate>
    tHighpass_setFreq(&p->DCblocker,0.001f);
2401556e:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 240156a0 <tSimpleLivingString5_initToPool+0x378>
24015572:	9801      	ldr	r0, [sp, #4]
24015574:	f7fc f916 	bl	240117a4 <tHighpass_setFreq>
    tHighpass_initToPool(&p->DCblocker2,0.001f, mp);
24015578:	4629      	mov	r1, r5
2401557a:	ed9f 0a49 	vldr	s0, [pc, #292]	; 240156a0 <tSimpleLivingString5_initToPool+0x378>
2401557e:	4630      	mov	r0, r6
24015580:	9601      	str	r6, [sp, #4]
24015582:	f7fc f8eb 	bl	2401175c <tHighpass_initToPool>
    tHighpass_setSampleRate(&p->DCblocker2,p->sampleRate);
24015586:	ed94 0a27 	vldr	s0, [r4, #156]	; 0x9c
2401558a:	9801      	ldr	r0, [sp, #4]
2401558c:	f7fc f926 	bl	240117dc <tHighpass_setSampleRate>
    tHighpass_setFreq(&p->DCblocker2,0.001f);
24015590:	ed9f 0a43 	vldr	s0, [pc, #268]	; 240156a0 <tSimpleLivingString5_initToPool+0x378>
24015594:	9801      	ldr	r0, [sp, #4]
24015596:	f7fc f905 	bl	240117a4 <tHighpass_setFreq>
    p->pluckPosition = 0.8f;
2401559a:	4a42      	ldr	r2, [pc, #264]	; (240156a4 <tSimpleLivingString5_initToPool+0x37c>)
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
2401559c:	eeb0 1a4b 	vmov.f32	s2, s22
240155a0:	4639      	mov	r1, r7
240155a2:	eef0 0a4c 	vmov.f32	s1, s24
240155a6:	f104 0074 	add.w	r0, r4, #116	; 0x74
240155aa:	eeb0 0a6b 	vmov.f32	s0, s23
    p->pluckPosition = 0.8f;
240155ae:	66a2      	str	r2, [r4, #104]	; 0x68
    p->userDecay = decay;
240155b0:	edc4 aa05 	vstr	s21, [r4, #20]
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
240155b4:	462a      	mov	r2, r5
240155b6:	f7fb fd47 	bl	24011048 <tFeedbackLeveler_initToPool>
    tFeedbackLeveler_initToPool(&p->fbLev2, targetLev, levSmoothFactor, levStrength, levMode, mp);
240155ba:	462a      	mov	r2, r5
240155bc:	eef0 0a4c 	vmov.f32	s1, s24
240155c0:	4639      	mov	r1, r7
240155c2:	eeb0 0a6b 	vmov.f32	s0, s23
240155c6:	f104 0078 	add.w	r0, r4, #120	; 0x78
240155ca:	eeb0 1a4b 	vmov.f32	s2, s22
    p->levMode=levMode;
240155ce:	6227      	str	r7, [r4, #32]
    p->changeGainCompensator = 1.0f;
240155d0:	edc4 ca07 	vstr	s25, [r4, #28]
    tFeedbackLeveler_initToPool(&p->fbLev2, targetLev, levSmoothFactor, levStrength, levMode, mp);
240155d4:	f7fb fd38 	bl	24011048 <tFeedbackLeveler_initToPool>
    tWavefolder_initToPool(&p->wf1, 0.0f, 0.4f, 0.5f, mp);
240155d8:	eeb0 1a68 	vmov.f32	s2, s17
240155dc:	eeb0 0a4a 	vmov.f32	s0, s20
240155e0:	4629      	mov	r1, r5
240155e2:	eddf 0a31 	vldr	s1, [pc, #196]	; 240156a8 <tSimpleLivingString5_initToPool+0x380>
240155e6:	f104 007c 	add.w	r0, r4, #124	; 0x7c
240155ea:	f7fb fad9 	bl	24010ba0 <tWavefolder_initToPool>
    tWavefolder_initToPool(&p->wf2, 0.0f, 0.4f, 0.5f, mp);
240155ee:	eeb0 1a68 	vmov.f32	s2, s17
240155f2:	eeb0 0a4a 	vmov.f32	s0, s20
240155f6:	4629      	mov	r1, r5
240155f8:	eddf 0a2b 	vldr	s1, [pc, #172]	; 240156a8 <tSimpleLivingString5_initToPool+0x380>
240155fc:	f104 0080 	add.w	r0, r4, #128	; 0x80
24015600:	f7fb face 	bl	24010ba0 <tWavefolder_initToPool>
    tWavefolder_initToPool(&p->wf3, 0.0f, 0.4f, 0.5f, mp);
24015604:	eeb0 1a68 	vmov.f32	s2, s17
24015608:	eeb0 0a4a 	vmov.f32	s0, s20
2401560c:	4629      	mov	r1, r5
2401560e:	eddf 0a26 	vldr	s1, [pc, #152]	; 240156a8 <tSimpleLivingString5_initToPool+0x380>
24015612:	f104 0084 	add.w	r0, r4, #132	; 0x84
24015616:	f7fb fac3 	bl	24010ba0 <tWavefolder_initToPool>
    tWavefolder_initToPool(&p->wf4, 0.0f, 0.4f, 0.5f, mp);
2401561a:	eeb0 1a68 	vmov.f32	s2, s17
2401561e:	eeb0 0a4a 	vmov.f32	s0, s20
24015622:	4629      	mov	r1, r5
24015624:	eddf 0a20 	vldr	s1, [pc, #128]	; 240156a8 <tSimpleLivingString5_initToPool+0x380>
24015628:	f104 0088 	add.w	r0, r4, #136	; 0x88
2401562c:	f7fb fab8 	bl	24010ba0 <tWavefolder_initToPool>
    Lfloat waveLength = (p->sampleRate/freq);
24015630:	edd4 6a27 	vldr	s13, [r4, #156]	; 0x9c
    p->freq = freq;
24015634:	edc4 9a01 	vstr	s19, [r4, #4]
    Lfloat waveLength = (p->sampleRate/freq);
24015638:	ee29 9a26 	vmul.f32	s18, s18, s13
    if (waveLength<4.8) waveLength=4.8f;
2401563c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 24015690 <tSimpleLivingString5_initToPool+0x368>
24015640:	eeb7 6ac9 	vcvt.f64.f32	d6, s18
24015644:	eeb4 6bc7 	vcmpe.f64	d6, d7
24015648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401564c:	d41c      	bmi.n	24015688 <tSimpleLivingString5_initToPool+0x360>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
2401564e:	6b22      	ldr	r2, [r4, #48]	; 0x30
24015650:	0053      	lsls	r3, r2, #1
24015652:	ee00 3a10 	vmov	s0, r3
24015656:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->waveLengthInSamples =  waveLength * 0.5f;
2401565a:	fe80 0a49 	vminnm.f32	s0, s0, s18
2401565e:	ee20 0a28 	vmul.f32	s0, s0, s17
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24015662:	4640      	mov	r0, r8
    p->waveLengthInSamples =  waveLength * 0.5f;
24015664:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24015668:	f01e f932 	bl	240338d0 <__tExpSmooth_setDest_veneer>
    p->pickupPoint = 0.9f;
2401566c:	4a0f      	ldr	r2, [pc, #60]	; (240156ac <tSimpleLivingString5_initToPool+0x384>)
    p->prevDelayLength = p->waveLengthInSamples;
2401566e:	68a3      	ldr	r3, [r4, #8]
    p->decay = decay;
24015670:	edc4 aa04 	vstr	s21, [r4, #16]
    p->pickupPoint = 0.9f;
24015674:	6662      	str	r2, [r4, #100]	; 0x64
    p->prevDelayLength = p->waveLengthInSamples;
24015676:	61a3      	str	r3, [r4, #24]
}
24015678:	b003      	add	sp, #12
2401567a:	ecbd 8b0a 	vpop	{d8-d12}
2401567e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24015682:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 240156b0 <tSimpleLivingString5_initToPool+0x388>
24015686:	e6f8      	b.n	2401547a <tSimpleLivingString5_initToPool+0x152>
24015688:	ed9f 0a09 	vldr	s0, [pc, #36]	; 240156b0 <tSimpleLivingString5_initToPool+0x388>
2401568c:	e7e9      	b.n	24015662 <tSimpleLivingString5_initToPool+0x33a>
2401568e:	bf00      	nop
24015690:	33333333 	.word	0x33333333
24015694:	40133333 	.word	0x40133333
24015698:	3c23d70a 	.word	0x3c23d70a
2401569c:	00000000 	.word	0x00000000
240156a0:	3a83126f 	.word	0x3a83126f
240156a4:	3f4ccccd 	.word	0x3f4ccccd
240156a8:	3ecccccd 	.word	0x3ecccccd
240156ac:	3f666666 	.word	0x3f666666
240156b0:	4019999a 	.word	0x4019999a

240156b4 <tSimpleLivingString5_free>:
{
240156b4:	b510      	push	{r4, lr}
    _tSimpleLivingString5* p = *pl;
240156b6:	6804      	ldr	r4, [r0, #0]
    tExpSmooth_free(&p->wlSmooth);
240156b8:	f104 008c 	add.w	r0, r4, #140	; 0x8c
240156bc:	f7fb fde8 	bl	24011290 <tExpSmooth_free>
    tExpSmooth_free(&p->prepIndexSmooth);
240156c0:	f104 0094 	add.w	r0, r4, #148	; 0x94
240156c4:	f7fb fde4 	bl	24011290 <tExpSmooth_free>
    tExpSmooth_free(&p->prepPosSmooth);
240156c8:	f104 0090 	add.w	r0, r4, #144	; 0x90
240156cc:	f7fb fde0 	bl	24011290 <tExpSmooth_free>
    tLinearDelay_free(&p->delUF);
240156d0:	f104 0040 	add.w	r0, r4, #64	; 0x40
240156d4:	f7fb f8b6 	bl	24010844 <tLinearDelay_free>
    tLinearDelay_free(&p->delUB);
240156d8:	f104 0044 	add.w	r0, r4, #68	; 0x44
240156dc:	f7fb f8b2 	bl	24010844 <tLinearDelay_free>
    tLinearDelay_free(&p->delLF);
240156e0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
240156e4:	f7fb f8ae 	bl	24010844 <tLinearDelay_free>
    tLinearDelay_free(&p->delLB);
240156e8:	f104 0048 	add.w	r0, r4, #72	; 0x48
240156ec:	f7fb f8aa 	bl	24010844 <tLinearDelay_free>
    tOnePole_free(&p->bridgeFilter);
240156f0:	f104 004c 	add.w	r0, r4, #76	; 0x4c
240156f4:	f7fb fe0a 	bl	2401130c <tOnePole_free>
    tOnePole_free(&p->nutFilter);
240156f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
240156fc:	f7fb fe06 	bl	2401130c <tOnePole_free>
    tHighpass_free(&p->DCblocker);
24015700:	f104 006c 	add.w	r0, r4, #108	; 0x6c
24015704:	f7fc f84a 	bl	2401179c <tHighpass_free>
    tHighpass_free(&p->DCblocker2);
24015708:	f104 0070 	add.w	r0, r4, #112	; 0x70
2401570c:	f7fc f846 	bl	2401179c <tHighpass_free>
    tFeedbackLeveler_free(&p->fbLev);
24015710:	f104 0074 	add.w	r0, r4, #116	; 0x74
24015714:	f7fb fcc0 	bl	24011098 <tFeedbackLeveler_free>
    tFeedbackLeveler_free(&p->fbLev2);
24015718:	f104 0078 	add.w	r0, r4, #120	; 0x78
2401571c:	f7fb fcbc 	bl	24011098 <tFeedbackLeveler_free>
    tWavefolder_free(&p->wf1);
24015720:	f104 007c 	add.w	r0, r4, #124	; 0x7c
24015724:	f7fb fa6c 	bl	24010c00 <tWavefolder_free>
    tWavefolder_free(&p->wf2);
24015728:	f104 0080 	add.w	r0, r4, #128	; 0x80
2401572c:	f7fb fa68 	bl	24010c00 <tWavefolder_free>
    tWavefolder_free(&p->wf3);
24015730:	f104 0084 	add.w	r0, r4, #132	; 0x84
24015734:	f7fb fa64 	bl	24010c00 <tWavefolder_free>
    tWavefolder_free(&p->wf4);
24015738:	f104 0088 	add.w	r0, r4, #136	; 0x88
2401573c:	f7fb fa60 	bl	24010c00 <tWavefolder_free>
    mpool_free((char*)p, p->mempool);
24015740:	6821      	ldr	r1, [r4, #0]
24015742:	4620      	mov	r0, r4
}
24015744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)p, p->mempool);
24015748:	f7fe bca8 	b.w	2401409c <mpool_free>
2401574c:	0000      	movs	r0, r0
	...

24015750 <tSimpleLivingString5_setFreq>:
    _tSimpleLivingString5* p = *pl;
24015750:	6802      	ldr	r2, [r0, #0]
    Lfloat waveLength = (p->sampleRate/freq);
24015752:	ed92 7a27 	vldr	s14, [r2, #156]	; 0x9c
    p->freq = freq;
24015756:	ed82 0a01 	vstr	s0, [r2, #4]
    Lfloat waveLength = (p->sampleRate/freq);
2401575a:	eec7 7a00 	vdiv.f32	s15, s14, s0
    if (waveLength<4.8) waveLength=4.8f;
2401575e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 240157a8 <tSimpleLivingString5_setFreq+0x58>
24015762:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
24015766:	eeb4 5bc6 	vcmpe.f64	d5, d6
2401576a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401576e:	d411      	bmi.n	24015794 <tSimpleLivingString5_setFreq+0x44>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
24015770:	6b13      	ldr	r3, [r2, #48]	; 0x30
    p->waveLengthInSamples =  waveLength * 0.5f;
24015772:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24015776:	f102 008c 	add.w	r0, r2, #140	; 0x8c
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
2401577a:	005b      	lsls	r3, r3, #1
2401577c:	ee00 3a10 	vmov	s0, r3
24015780:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->waveLengthInSamples =  waveLength * 0.5f;
24015784:	fe80 0a67 	vminnm.f32	s0, s0, s15
24015788:	ee20 0a07 	vmul.f32	s0, s0, s14
2401578c:	ed82 0a02 	vstr	s0, [r2, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24015790:	f01e b89e 	b.w	240338d0 <__tExpSmooth_setDest_veneer>
24015794:	ed9f 0a06 	vldr	s0, [pc, #24]	; 240157b0 <tSimpleLivingString5_setFreq+0x60>
24015798:	f102 008c 	add.w	r0, r2, #140	; 0x8c
    p->waveLengthInSamples =  waveLength * 0.5f;
2401579c:	ed82 0a02 	vstr	s0, [r2, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
240157a0:	f01e b896 	b.w	240338d0 <__tExpSmooth_setDest_veneer>
240157a4:	f3af 8000 	nop.w
240157a8:	33333333 	.word	0x33333333
240157ac:	40133333 	.word	0x40133333
240157b0:	4019999a 	.word	0x4019999a

240157b4 <tSimpleLivingString5_setDampFreq>:
    p->waveLengthInSamples = waveLength * 0.5f;
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
}

void     tSimpleLivingString5_setDampFreq(tSimpleLivingString5* const pl, Lfloat dampFreq)
{
240157b4:	b510      	push	{r4, lr}
240157b6:	ed2d 8b02 	vpush	{d8}
240157ba:	eeb0 8a40 	vmov.f32	s16, s0
    _tSimpleLivingString5* p = *pl;
240157be:	6804      	ldr	r4, [r0, #0]
    //p->temp1 = (1.0f - brightness) * 0.25f * p->decay;
    //p->temp2 = (1.0f + brightness) * 0.5f * p->decay;
    //tBiQuad_setCoefficients(&p->bridgeFilter2, p->temp1 , p->temp2, p->temp1 , 0.0f, 0.0f);

    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
240157c0:	f104 004c 	add.w	r0, r4, #76	; 0x4c
240157c4:	f7fb fda6 	bl	24011314 <tOnePole_setFreq>
    tOnePole_setFreq(&p->nutFilter, dampFreq);
240157c8:	eeb0 0a48 	vmov.f32	s0, s16
240157cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
}
240157d0:	ecbd 8b02 	vpop	{d8}
240157d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tOnePole_setFreq(&p->nutFilter, dampFreq);
240157d8:	f7fb bd9c 	b.w	24011314 <tOnePole_setFreq>

240157dc <tSimpleLivingString5_setDecay>:

void     tSimpleLivingString5_setDecay(tSimpleLivingString5* const pl, Lfloat decay)
{
    _tSimpleLivingString5* p = *pl;
240157dc:	6803      	ldr	r3, [r0, #0]
    p->userDecay = decay;
240157de:	ed83 0a05 	vstr	s0, [r3, #20]

    
    //Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
    //p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
    p->decay = decay;//;
240157e2:	ed83 0a04 	vstr	s0, [r3, #16]
    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);
    //p->decay=powf(0.001f,1.0f/(p->freq*decay));
}
240157e6:	4770      	bx	lr

240157e8 <tSimpleLivingString5_setPrepPosition>:
void   tSimpleLivingString5_setPrepPosition(tSimpleLivingString5* const pl, Lfloat prepPosition)
{
     _tSimpleLivingString5* p = *pl;
240157e8:	6803      	ldr	r3, [r0, #0]
    p->prepPos = prepPosition;
240157ea:	ed83 0a0e 	vstr	s0, [r3, #56]	; 0x38
}
240157ee:	4770      	bx	lr

240157f0 <tSimpleLivingString5_setPrepIndex>:
void   tSimpleLivingString5_setPrepIndex(tSimpleLivingString5* const pl, Lfloat prepIndex)
{
     _tSimpleLivingString5* p = *pl;
240157f0:	6803      	ldr	r3, [r0, #0]
     p->prepIndex = prepIndex;
240157f2:	ed83 0a0d 	vstr	s0, [r3, #52]	; 0x34
}
240157f6:	4770      	bx	lr

240157f8 <tSimpleLivingString5_setTargetLev>:

void     tSimpleLivingString5_setTargetLev(tSimpleLivingString5* const pl, Lfloat targetLev)
{
240157f8:	b510      	push	{r4, lr}
240157fa:	ed2d 8b02 	vpush	{d8}
240157fe:	eeb0 8a40 	vmov.f32	s16, s0
    _tSimpleLivingString5* p = *pl;
24015802:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_setTargetLevel(&p->fbLev, targetLev);
24015804:	f104 0074 	add.w	r0, r4, #116	; 0x74
24015808:	f7fb fc82 	bl	24011110 <tFeedbackLeveler_setTargetLevel>
    tFeedbackLeveler_setTargetLevel(&p->fbLev2, targetLev);
2401580c:	eeb0 0a48 	vmov.f32	s0, s16
24015810:	f104 0078 	add.w	r0, r4, #120	; 0x78
}
24015814:	ecbd 8b02 	vpop	{d8}
24015818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tFeedbackLeveler_setTargetLevel(&p->fbLev2, targetLev);
2401581c:	f7fb bc78 	b.w	24011110 <tFeedbackLeveler_setTargetLevel>

24015820 <tSimpleLivingString5_setLevMode>:
    tFeedbackLeveler_setStrength(&p->fbLev, levStrength);
    tFeedbackLeveler_setStrength(&p->fbLev2, levStrength);
}

void     tSimpleLivingString5_setLevMode(tSimpleLivingString5* const pl, int levMode)
{
24015820:	b538      	push	{r3, r4, r5, lr}
    _tSimpleLivingString5* p = *pl;
24015822:	6805      	ldr	r5, [r0, #0]
{
24015824:	460c      	mov	r4, r1
    tFeedbackLeveler_setMode(&p->fbLev, levMode);
24015826:	f105 0074 	add.w	r0, r5, #116	; 0x74
2401582a:	f7fb fc49 	bl	240110c0 <tFeedbackLeveler_setMode>
    tFeedbackLeveler_setMode(&p->fbLev2, levMode);
2401582e:	4621      	mov	r1, r4
24015830:	f105 0078 	add.w	r0, r5, #120	; 0x78
24015834:	f7fb fc44 	bl	240110c0 <tFeedbackLeveler_setMode>
    p->levMode=levMode;
24015838:	622c      	str	r4, [r5, #32]
}
2401583a:	bd38      	pop	{r3, r4, r5, pc}

2401583c <tSimpleLivingString5_setPluckPosition>:

void   tSimpleLivingString5_setPluckPosition(tSimpleLivingString5* const pl, Lfloat position)
{
    _tSimpleLivingString5* p = *pl;
2401583c:	6803      	ldr	r3, [r0, #0]
    p->pluckPosition = position;
2401583e:	ed83 0a1a 	vstr	s0, [r3, #104]	; 0x68
}
24015842:	4770      	bx	lr

24015844 <tSimpleLivingString5_pluck>:


void   tSimpleLivingString5_pluck(tSimpleLivingString5* const pl, Lfloat input, Lfloat position)
{
24015844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
24015848:	ed2d 8b08 	vpush	{d8-d11}
    _tSimpleLivingString5* p = *pl;
2401584c:	6805      	ldr	r5, [r0, #0]
{
2401584e:	b083      	sub	sp, #12

    p->pluckPosition = position;
    volatile Lfloat pluckPoint = position*p->waveLengthInSamples;
    pluckPoint = LEAF_clip(1.0f, pluckPoint, p->waveLengthInSamples-1.0f);
24015850:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
    volatile Lfloat pluckPoint = position*p->waveLengthInSamples;
24015854:	ed95 1a02 	vldr	s2, [r5, #8]
{
24015858:	eeb0 aa40 	vmov.f32	s20, s0
    p->pluckPosition = position;
2401585c:	edc5 0a1a 	vstr	s1, [r5, #104]	; 0x68
    volatile Lfloat pluckPoint = position*p->waveLengthInSamples;
24015860:	ee61 0a20 	vmul.f32	s1, s2, s1
    pluckPoint = LEAF_clip(1.0f, pluckPoint, p->waveLengthInSamples-1.0f);
24015864:	eeb0 0a6a 	vmov.f32	s0, s21
24015868:	ee31 1a6a 	vsub.f32	s2, s2, s21
    volatile Lfloat pluckPoint = position*p->waveLengthInSamples;
2401586c:	edcd 0a00 	vstr	s1, [sp]
    pluckPoint = LEAF_clip(1.0f, pluckPoint, p->waveLengthInSamples-1.0f);
24015870:	eddd 0a00 	vldr	s1, [sp]
24015874:	f01e f830 	bl	240338d8 <__LEAF_clip_veneer>
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
    volatile Lfloat remainder = p->waveLengthInSamples-pluckPoint;
    Lfloat BLen = p->delUB->delay;
24015878:	6c6a      	ldr	r2, [r5, #68]	; 0x44
    Lfloat FLen = p->delUF->delay;
2401587a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    Lfloat BLen = p->delUB->delay;
2401587c:	ed92 7a08 	vldr	s14, [r2, #32]
    uint32_t FLenInt = (uint32_t)FLen;
24015880:	edd3 6a08 	vldr	s13, [r3, #32]
    float FLenAlpha = FLen -FLenInt;
    uint32_t BLenInt = (uint32_t)BLen;
24015884:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    pluckPoint = LEAF_clip(1.0f, pluckPoint, p->waveLengthInSamples-1.0f);
24015888:	ed8d 0a00 	vstr	s0, [sp]
    uint32_t FLenInt = (uint32_t)FLen;
2401588c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
    volatile Lfloat remainder = p->waveLengthInSamples-pluckPoint;
24015890:	edd5 5a02 	vldr	s11, [r5, #8]
    uint32_t BLenInt = (uint32_t)BLen;
24015894:	ee17 6a90 	vmov	r6, s15
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
24015898:	eddd 7a00 	vldr	s15, [sp]
    float BLenAlpha = BLen -BLenInt;
    
    for (uint32_t i = 0; i < p->waveLengthInSamples; i++)
2401589c:	eef5 5ac0 	vcmpe.f32	s11, #0.0
    volatile Lfloat remainder = p->waveLengthInSamples-pluckPoint;
240158a0:	ed9d 6a00 	vldr	s12, [sp]
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
240158a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    uint32_t FLenInt = (uint32_t)FLen;
240158a8:	ee16 9a90 	vmov	r9, s13
    float BLenAlpha = BLen -BLenInt;
240158ac:	ee06 6a90 	vmov	s13, r6
    for (uint32_t i = 0; i < p->waveLengthInSamples; i++)
240158b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float BLenAlpha = BLen -BLenInt;
240158b4:	eef8 6a66 	vcvt.f32.u32	s13, s13
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
240158b8:	ee17 7a90 	vmov	r7, s15
    volatile Lfloat remainder = p->waveLengthInSamples-pluckPoint;
240158bc:	ee75 7ac6 	vsub.f32	s15, s11, s12
    float BLenAlpha = BLen -BLenInt;
240158c0:	ee37 ba66 	vsub.f32	s22, s14, s13
    volatile Lfloat remainder = p->waveLengthInSamples-pluckPoint;
240158c4:	edcd 7a01 	vstr	s15, [sp, #4]
    for (uint32_t i = 0; i < p->waveLengthInSamples; i++)
240158c8:	dd6d      	ble.n	240159a6 <tSimpleLivingString5_pluck+0x162>
    {
        Lfloat val = 0.0f;
        if (i <= pluckPointInt)
        {
            val = input * ((Lfloat)i/(Lfloat)pluckPointInt);
240158ca:	ee07 7a90 	vmov	s15, r7
            tLinearDelay_addTo(&p->delUB, val, i);
            tLinearDelay_addTo(&p->delLB, val, BLenInt-i);
        }
        else if (i == BLenInt)
        {
            tLinearDelay_addTo(&p->delUB, val * (1.0f-BLenAlpha), i);
240158ce:	ee3a 7ac7 	vsub.f32	s14, s21, s14
            tLinearDelay_addTo(&p->delLF, val * BLenAlpha, (FLenInt-1)-(i-BLenInt));
        }
        else
        {
            tLinearDelay_addTo(&p->delUF, val, i-BLenInt);
            tLinearDelay_addTo(&p->delLF, val, (FLenInt-1)-(i-BLenInt));
240158d2:	eb09 0806 	add.w	r8, r9, r6
    for (uint32_t i = 0; i < p->waveLengthInSamples; i++)
240158d6:	2400      	movs	r4, #0
            val = input * ((Lfloat)i/(Lfloat)pluckPointInt);
240158d8:	eef8 8a67 	vcvt.f32.u32	s17, s15
    for (uint32_t i = 0; i < p->waveLengthInSamples; i++)
240158dc:	eddf 7a34 	vldr	s15, [pc, #208]	; 240159b0 <tSimpleLivingString5_pluck+0x16c>
            tLinearDelay_addTo(&p->delUB, val * (1.0f-BLenAlpha), i);
240158e0:	ee77 9a26 	vadd.f32	s19, s14, s13
            tLinearDelay_addTo(&p->delLF, val, (FLenInt-1)-(i-BLenInt));
240158e4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
            val = input * ((Lfloat)i/(Lfloat)pluckPointInt);
240158e8:	ee8a 9a28 	vdiv.f32	s18, s20, s17
240158ec:	e016      	b.n	2401591c <tSimpleLivingString5_pluck+0xd8>
        else if (i == BLenInt)
240158ee:	d038      	beq.n	24015962 <tSimpleLivingString5_pluck+0x11e>
            tLinearDelay_addTo(&p->delUF, val, i-BLenInt);
240158f0:	f7fb f88a 	bl	24010a08 <tLinearDelay_addTo>
            tLinearDelay_addTo(&p->delLF, val, (FLenInt-1)-(i-BLenInt));
240158f4:	eeb0 0a48 	vmov.f32	s0, s16
240158f8:	eba8 0104 	sub.w	r1, r8, r4
240158fc:	f105 003c 	add.w	r0, r5, #60	; 0x3c
24015900:	f7fb f882 	bl	24010a08 <tLinearDelay_addTo>
    for (uint32_t i = 0; i < p->waveLengthInSamples; i++)
24015904:	3401      	adds	r4, #1
24015906:	ed95 7a02 	vldr	s14, [r5, #8]
2401590a:	ee07 4a90 	vmov	s15, r4
2401590e:	eef8 7a67 	vcvt.f32.u32	s15, s15
24015912:	eef4 7ac7 	vcmpe.f32	s15, s14
24015916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401591a:	d544      	bpl.n	240159a6 <tSimpleLivingString5_pluck+0x162>
        if (i <= pluckPointInt)
2401591c:	42a7      	cmp	r7, r4
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)/(Lfloat)remainder));
2401591e:	ee38 7ae7 	vsub.f32	s14, s17, s15
            val = input * ((Lfloat)i/(Lfloat)pluckPointInt);
24015922:	ee29 8a27 	vmul.f32	s16, s18, s15
        if (i <= pluckPointInt)
24015926:	d207      	bcs.n	24015938 <tSimpleLivingString5_pluck+0xf4>
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)/(Lfloat)remainder));
24015928:	eddd 6a01 	vldr	s13, [sp, #4]
2401592c:	eec7 7a26 	vdiv.f32	s15, s14, s13
24015930:	ee77 7aaa 	vadd.f32	s15, s15, s21
24015934:	ee27 8a8a 	vmul.f32	s16, s15, s20
        if (i  < BLenInt)
24015938:	42a6      	cmp	r6, r4
            tLinearDelay_addTo(&p->delUF, val, i-BLenInt);
2401593a:	eeb0 0a48 	vmov.f32	s0, s16
2401593e:	eba4 0106 	sub.w	r1, r4, r6
24015942:	f105 0040 	add.w	r0, r5, #64	; 0x40
        if (i  < BLenInt)
24015946:	d9d2      	bls.n	240158ee <tSimpleLivingString5_pluck+0xaa>
            tLinearDelay_addTo(&p->delUB, val, i);
24015948:	4621      	mov	r1, r4
2401594a:	f105 0044 	add.w	r0, r5, #68	; 0x44
2401594e:	f7fb f85b 	bl	24010a08 <tLinearDelay_addTo>
            tLinearDelay_addTo(&p->delLB, val, BLenInt-i);
24015952:	eeb0 0a48 	vmov.f32	s0, s16
24015956:	1b31      	subs	r1, r6, r4
24015958:	f105 0048 	add.w	r0, r5, #72	; 0x48
2401595c:	f7fb f854 	bl	24010a08 <tLinearDelay_addTo>
24015960:	e7d0      	b.n	24015904 <tSimpleLivingString5_pluck+0xc0>
            tLinearDelay_addTo(&p->delUB, val * (1.0f-BLenAlpha), i);
24015962:	ee69 ba88 	vmul.f32	s23, s19, s16
24015966:	4631      	mov	r1, r6
            tLinearDelay_addTo(&p->delUF, val * BLenAlpha, i-BLenInt);
24015968:	ee28 8a0b 	vmul.f32	s16, s16, s22
            tLinearDelay_addTo(&p->delUB, val * (1.0f-BLenAlpha), i);
2401596c:	f105 0044 	add.w	r0, r5, #68	; 0x44
24015970:	eeb0 0a6b 	vmov.f32	s0, s23
24015974:	f7fb f848 	bl	24010a08 <tLinearDelay_addTo>
            tLinearDelay_addTo(&p->delLB, val * (1.0f-BLenAlpha), BLenInt-i);
24015978:	f105 0048 	add.w	r0, r5, #72	; 0x48
2401597c:	eeb0 0a6b 	vmov.f32	s0, s23
24015980:	2100      	movs	r1, #0
24015982:	f7fb f841 	bl	24010a08 <tLinearDelay_addTo>
            tLinearDelay_addTo(&p->delUF, val * BLenAlpha, i-BLenInt);
24015986:	f105 0040 	add.w	r0, r5, #64	; 0x40
2401598a:	eeb0 0a48 	vmov.f32	s0, s16
2401598e:	2100      	movs	r1, #0
24015990:	f7fb f83a 	bl	24010a08 <tLinearDelay_addTo>
            tLinearDelay_addTo(&p->delLF, val * BLenAlpha, (FLenInt-1)-(i-BLenInt));
24015994:	eeb0 0a48 	vmov.f32	s0, s16
24015998:	f109 31ff 	add.w	r1, r9, #4294967295	; 0xffffffff
2401599c:	f105 003c 	add.w	r0, r5, #60	; 0x3c
240159a0:	f7fb f832 	bl	24010a08 <tLinearDelay_addTo>
240159a4:	e7ae      	b.n	24015904 <tSimpleLivingString5_pluck+0xc0>
        }
    }
}
240159a6:	b003      	add	sp, #12
240159a8:	ecbd 8b08 	vpop	{d8-d11}
240159ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
240159b0:	00000000 	.word	0x00000000

240159b4 <tSimpleLivingString5_tick>:




Lfloat   tSimpleLivingString5_tick(tSimpleLivingString5* const pl, Lfloat input)
{
240159b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
240159b8:	ed2d 8b0a 	vpush	{d8-d12}
    _tSimpleLivingString5* p = *pl;
240159bc:	6804      	ldr	r4, [r0, #0]
{
240159be:	b083      	sub	sp, #12
    }
    //else
    {
    //    p->changeGainCompensator = 1.0f;
    }
    Lfloat FLen = wl*(1.0f-p->prepPos);
240159c0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    Lfloat wl = tExpSmooth_tick(&p->wlSmooth);
240159c4:	f104 008c 	add.w	r0, r4, #140	; 0x8c
{
240159c8:	eeb0 9a40 	vmov.f32	s18, s0
    Lfloat wl = tExpSmooth_tick(&p->wlSmooth);
240159cc:	f01d ff7c 	bl	240338c8 <__tExpSmooth_tick_veneer>
    Lfloat FLen = wl*(1.0f-p->prepPos);
240159d0:	ed94 ba0e 	vldr	s22, [r4, #56]	; 0x38
    uint32_t FLenInt = (uint32_t)FLen;
    Lfloat BLen = wl*p->prepPos;
    uint32_t BLenInt = (uint32_t)BLen;
    tLinearDelay_setDelay(&p->delUF, FLen);
240159d4:	f104 0640 	add.w	r6, r4, #64	; 0x40
    tLinearDelay_setDelay(&p->delUB, BLen);
240159d8:	f104 0844 	add.w	r8, r4, #68	; 0x44
    Lfloat FLen = wl*(1.0f-p->prepPos);
240159dc:	ee78 8a4b 	vsub.f32	s17, s16, s22
    tLinearDelay_setDelay(&p->delLF, FLen);
240159e0:	f104 053c 	add.w	r5, r4, #60	; 0x3c
    Lfloat BLen = wl*p->prepPos;
240159e4:	ee2b ba00 	vmul.f32	s22, s22, s0
    tLinearDelay_setDelay(&p->delUF, FLen);
240159e8:	4630      	mov	r0, r6
    Lfloat wl = tExpSmooth_tick(&p->wlSmooth);
240159ea:	eef0 aa40 	vmov.f32	s21, s0
    tLinearDelay_setDelay(&p->delLB, BLen);
240159ee:	f104 0748 	add.w	r7, r4, #72	; 0x48
    Lfloat FLen = wl*(1.0f-p->prepPos);
240159f2:	ee68 8a80 	vmul.f32	s17, s17, s0
    uint32_t BLenInt = (uint32_t)BLen;
240159f6:	eefc 7acb 	vcvt.u32.f32	s15, s22
    tLinearDelay_setDelay(&p->delUF, FLen);
240159fa:	eeb0 0a68 	vmov.f32	s0, s17
    uint32_t BLenInt = (uint32_t)BLen;
240159fe:	edcd 7a01 	vstr	s15, [sp, #4]
    uint32_t FLenInt = (uint32_t)FLen;
24015a02:	eefc 7ae8 	vcvt.u32.f32	s15, s17
24015a06:	eef0 ca67 	vmov.f32	s25, s15
    tLinearDelay_setDelay(&p->delUF, FLen);
24015a0a:	f7fa ffb1 	bl	24010970 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delUB, BLen);
24015a0e:	eeb0 0a4b 	vmov.f32	s0, s22
24015a12:	4640      	mov	r0, r8
24015a14:	f7fa ffac 	bl	24010970 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delLF, FLen);
24015a18:	eeb0 0a68 	vmov.f32	s0, s17
24015a1c:	4628      	mov	r0, r5
24015a1e:	f7fa ffa7 	bl	24010970 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delLB, BLen);
24015a22:	eeb0 0a4b 	vmov.f32	s0, s22
24015a26:	4638      	mov	r0, r7
24015a28:	f7fa ffa2 	bl	24010970 <tLinearDelay_setDelay>

    Lfloat pluckPosInSamples = p->pluckPosition * wl;
24015a2c:	edd4 7a1a 	vldr	s15, [r4, #104]	; 0x68
    uint32_t sample2 = pluckPosInSamplesInt + 1;

    uint32_t sample1Front = (uint32_t) (sample1 - BLen);
    uint32_t sample2Front = (uint32_t) (sample2 - BLen);

    if (sample1 < BLenInt)
24015a30:	9b01      	ldr	r3, [sp, #4]
    Lfloat pluckPosInSamples = p->pluckPosition * wl;
24015a32:	ee6a 7aa7 	vmul.f32	s15, s21, s15
    uint32_t pluckPosInSamplesInt = (uint32_t) pluckPosInSamples;
24015a36:	eebc 7ae7 	vcvt.u32.f32	s14, s15
    {
        tLinearDelay_addTo(&p->delUB, input * (1.0f - alpha), sample1);
24015a3a:	ee38 8a67 	vsub.f32	s16, s16, s15
    uint32_t pluckPosInSamplesInt = (uint32_t) pluckPosInSamples;
24015a3e:	ee17 aa10 	vmov	sl, s14
    Lfloat alpha = pluckPosInSamples - pluckPosInSamplesInt;
24015a42:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    if (sample1 < BLenInt)
24015a46:	4553      	cmp	r3, sl
    uint32_t sample2 = pluckPosInSamplesInt + 1;
24015a48:	f10a 0901 	add.w	r9, sl, #1
    Lfloat alpha = pluckPosInSamples - pluckPosInSamplesInt;
24015a4c:	ee77 8ac7 	vsub.f32	s17, s15, s14
    if (sample1 < BLenInt)
24015a50:	f240 80fe 	bls.w	24015c50 <tSimpleLivingString5_tick+0x29c>
        tLinearDelay_addTo(&p->delUB, input * (1.0f - alpha), sample1);
24015a54:	ee38 8a07 	vadd.f32	s16, s16, s14
24015a58:	4651      	mov	r1, sl
24015a5a:	4640      	mov	r0, r8
24015a5c:	ee28 8a09 	vmul.f32	s16, s16, s18
24015a60:	eeb0 0a48 	vmov.f32	s0, s16
24015a64:	f7fa ffd0 	bl	24010a08 <tLinearDelay_addTo>
        tLinearDelay_addTo(&p->delLB, input * (1.0f - alpha), BLenInt-sample1);
24015a68:	9b01      	ldr	r3, [sp, #4]
24015a6a:	eeb0 0a48 	vmov.f32	s0, s16
24015a6e:	4638      	mov	r0, r7
24015a70:	eba3 010a 	sub.w	r1, r3, sl
24015a74:	f7fa ffc8 	bl	24010a08 <tLinearDelay_addTo>
    else
    {
        tLinearDelay_addTo(&p->delUF, input * (1.0f - alpha), sample1Front);
        tLinearDelay_addTo(&p->delLF, input * (1.0f - alpha), FLenInt-sample1Front);
    }
    if (sample2 < BLenInt)
24015a78:	9b01      	ldr	r3, [sp, #4]
24015a7a:	454b      	cmp	r3, r9
24015a7c:	f240 80cb 	bls.w	24015c16 <tSimpleLivingString5_tick+0x262>
    {
        tLinearDelay_addTo(&p->delUB, input * alpha, sample2);
24015a80:	ee68 8a89 	vmul.f32	s17, s17, s18
24015a84:	4649      	mov	r1, r9
24015a86:	4640      	mov	r0, r8
24015a88:	eeb0 0a68 	vmov.f32	s0, s17
24015a8c:	f7fa ffbc 	bl	24010a08 <tLinearDelay_addTo>
        tLinearDelay_addTo(&p->delLB, input * alpha, BLenInt-sample2);
24015a90:	9b01      	ldr	r3, [sp, #4]
24015a92:	eeb0 0a68 	vmov.f32	s0, s17
24015a96:	4638      	mov	r0, r7
24015a98:	eba3 0109 	sub.w	r1, r3, r9
24015a9c:	f7fa ffb4 	bl	24010a08 <tLinearDelay_addTo>
        tLinearDelay_addTo(&p->delUF, input * alpha, sample2Front);
        tLinearDelay_addTo(&p->delLF, input * alpha, FLenInt-sample2Front);
    }

    //now tick out the output data and filter (oversampled)
    for (int i = 0; i < p->oversampling; i++)
24015aa0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
24015aa4:	2b00      	cmp	r3, #0
24015aa6:	dd6b      	ble.n	24015b80 <tSimpleLivingString5_tick+0x1cc>
#endif

        // into front half of string, from bridge, going backwards (lower section)
        //Lfloat fromBridge=-tFeedbackLeveler_tick(&p->fbLev, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblocker, tOnePole_tick(&p->bridgeFilter, fromUF)));
        //Lfloat fromBridge=-tFeedbackLeveler_tick(&p->fbLev, (p->levMode==0?p->decay:1.0f)*fromUF);
        Lfloat fromBridge=-p->decay*tOnePole_tick(&p->bridgeFilter, fromUF);
24015aa8:	f104 034c 	add.w	r3, r4, #76	; 0x4c
        tLinearDelay_tickIn(&p->delLF, fromBridge);
        // into back half of string, from prepPoint, going backwards (lower section)
        //Lfloat fromUpperPrep=-tOnePole_tick(&p->prepFilterL, fromUB);
        Lfloat fromUpperPrep=-fromUB;
        //fromUpperPrep = LEAF_clip(-1.0f, fromUpperPrep, 1.0f);
        Lfloat intoLower=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF; //used to add input here
24015aac:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
        fromUF = tWavefolder_tick(&p->wf1, fromUF);
24015ab0:	f104 0b7c 	add.w	fp, r4, #124	; 0x7c
        fromLB = tWavefolder_tick(&p->wf2, fromLB);
24015ab4:	f104 0a80 	add.w	sl, r4, #128	; 0x80
        Lfloat fromBridge=-p->decay*tOnePole_tick(&p->bridgeFilter, fromUF);
24015ab8:	ee0b 3a90 	vmov	s23, r3
        //intoLower = LEAF_clip(-1.0f, intoLower, 1.0f);
        tLinearDelay_tickIn(&p->delLB, intoLower);
        // into back of string, from nut going forward (upper section)
        //Lfloat fromNut=-tFeedbackLeveler_tick(&p->fbLev2, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblocker2,fromLB));
        //Lfloat fromNut=-tFeedbackLeveler_tick(&p->fbLev2, (p->levMode==0?p->decay:1.0f)*fromLB);
        Lfloat fromNut=-p->decay*tOnePole_tick(&p->nutFilter, fromLB);
24015abc:	f104 0350 	add.w	r3, r4, #80	; 0x50
24015ac0:	f04f 0900 	mov.w	r9, #0
24015ac4:	ee0c 3a10 	vmov	s24, r3
        Lfloat fromUF=tLinearDelay_tickOut(&p->delUF);
24015ac8:	4630      	mov	r0, r6
    for (int i = 0; i < p->oversampling; i++)
24015aca:	f109 0901 	add.w	r9, r9, #1
        Lfloat fromUF=tLinearDelay_tickOut(&p->delUF);
24015ace:	f7fa ff23 	bl	24010918 <tLinearDelay_tickOut>
        Lfloat fromLF=tLinearDelay_tickOut(&p->delLF);
24015ad2:	4628      	mov	r0, r5
        Lfloat fromUF=tLinearDelay_tickOut(&p->delUF);
24015ad4:	eeb0 8a40 	vmov.f32	s16, s0
        Lfloat fromLF=tLinearDelay_tickOut(&p->delLF);
24015ad8:	f7fa ff1e 	bl	24010918 <tLinearDelay_tickOut>
        Lfloat fromLB=tLinearDelay_tickOut(&p->delLB);
24015adc:	4638      	mov	r0, r7
        Lfloat fromLF=tLinearDelay_tickOut(&p->delLF);
24015ade:	eef0 8a40 	vmov.f32	s17, s0
        Lfloat fromLB=tLinearDelay_tickOut(&p->delLB);
24015ae2:	f7fa ff19 	bl	24010918 <tLinearDelay_tickOut>
        Lfloat fromUB=tLinearDelay_tickOut(&p->delUB);
24015ae6:	4640      	mov	r0, r8
        Lfloat fromLB=tLinearDelay_tickOut(&p->delLB);
24015ae8:	eef0 9a40 	vmov.f32	s19, s0
        Lfloat fromUB=tLinearDelay_tickOut(&p->delUB);
24015aec:	f7fa ff14 	bl	24010918 <tLinearDelay_tickOut>
        fromUF = tWavefolder_tick(&p->wf1, fromUF);
24015af0:	4658      	mov	r0, fp
        Lfloat fromUB=tLinearDelay_tickOut(&p->delUB);
24015af2:	eeb0 9a40 	vmov.f32	s18, s0
        fromUF = tWavefolder_tick(&p->wf1, fromUF);
24015af6:	eeb0 0a48 	vmov.f32	s0, s16
24015afa:	f7fb f899 	bl	24010c30 <tWavefolder_tick>
24015afe:	eeb0 8a40 	vmov.f32	s16, s0
        fromLB = tWavefolder_tick(&p->wf2, fromLB);
24015b02:	4650      	mov	r0, sl
24015b04:	eeb0 0a69 	vmov.f32	s0, s19
24015b08:	f7fb f892 	bl	24010c30 <tWavefolder_tick>
24015b0c:	eef0 9a40 	vmov.f32	s19, s0
        Lfloat fromBridge=-p->decay*tOnePole_tick(&p->bridgeFilter, fromUF);
24015b10:	eeb0 0a48 	vmov.f32	s0, s16
24015b14:	ed94 8a04 	vldr	s16, [r4, #16]
24015b18:	ee1b 0a90 	vmov	r0, s23
24015b1c:	f7fb fc18 	bl	24011350 <tOnePole_tick>
24015b20:	ee20 8a48 	vnmul.f32	s16, s0, s16
        tLinearDelay_tickIn(&p->delLF, fromBridge);
24015b24:	4628      	mov	r0, r5
24015b26:	eeb0 0a48 	vmov.f32	s0, s16
24015b2a:	f7fa fee1 	bl	240108f0 <tLinearDelay_tickIn>
        Lfloat intoLower=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF; //used to add input here
24015b2e:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
        tLinearDelay_tickIn(&p->delLB, intoLower);
24015b32:	4638      	mov	r0, r7
        Lfloat intoLower=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF; //used to add input here
24015b34:	ee7a 7a47 	vsub.f32	s15, s20, s14
24015b38:	ee27 0aa8 	vmul.f32	s0, s15, s17
        tLinearDelay_tickIn(&p->delLB, intoLower);
24015b3c:	eea7 0a49 	vfms.f32	s0, s14, s18
24015b40:	f7fa fed6 	bl	240108f0 <tLinearDelay_tickIn>
        Lfloat fromNut=-p->decay*tOnePole_tick(&p->nutFilter, fromLB);
24015b44:	eeb0 0a69 	vmov.f32	s0, s19
24015b48:	edd4 9a04 	vldr	s19, [r4, #16]
24015b4c:	ee1c 0a10 	vmov	r0, s24
24015b50:	f7fb fbfe 	bl	24011350 <tOnePole_tick>
        //Lfloat fromNut=-p->decay*tHighpass_tick(&p->DCblocker2,fromLB)); //version without feedback leveler
        //fromNut = LEAF_clip(-1.0f, fromNut, 1.0f);
        tLinearDelay_tickIn(&p->delUB, fromNut);
24015b54:	4640      	mov	r0, r8
24015b56:	ee20 0a69 	vnmul.f32	s0, s0, s19
24015b5a:	f7fa fec9 	bl	240108f0 <tLinearDelay_tickIn>
        // into front half of string, from prepPoint, going forward (upper section)
        //Lfloat fromLowerPrep=-tOnePole_tick(&p->prepFilterU, fromLF);
        Lfloat fromLowerPrep=-fromLF;
        //fromLowerPrep = LEAF_clip(-1.0f, fromLowerPrep, 1.0f);
        Lfloat intoUpperFront=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB;
24015b5e:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
        //intoUpper = tanhf(intoUpper);
        //intoUpperFront = LEAF_clip(-1.0f, intoUpperFront, 1.0f);
        tLinearDelay_tickIn(&p->delUF, intoUpperFront);
24015b62:	4630      	mov	r0, r6
        Lfloat intoUpperFront=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB;
24015b64:	ee7a 7a47 	vsub.f32	s15, s20, s14
24015b68:	ee27 0a89 	vmul.f32	s0, s15, s18
        tLinearDelay_tickIn(&p->delUF, intoUpperFront);
24015b6c:	eea7 0a68 	vfms.f32	s0, s14, s17
24015b70:	f7fa febe 	bl	240108f0 <tLinearDelay_tickIn>
    for (int i = 0; i < p->oversampling; i++)
24015b74:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98

        p->curr = fromBridge;
24015b78:	ed84 8a09 	vstr	s16, [r4, #36]	; 0x24
    for (int i = 0; i < p->oversampling; i++)
24015b7c:	454a      	cmp	r2, r9
24015b7e:	dca3      	bgt.n	24015ac8 <tSimpleLivingString5_tick+0x114>
    }

    //pick up the signal
    Lfloat pickupPosInSamples = p->pickupPoint * wl;
24015b80:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
    uint32_t sample2Front2 = (uint32_t) (sample2 - BLen);

    float outputSample1 = 0.0f;
    float outputSample2 = 0.0f;

    if (sample1 < BLenInt)
24015b84:	9b01      	ldr	r3, [sp, #4]
    Lfloat pickupPosInSamples = p->pickupPoint * wl;
24015b86:	ee6a aaa7 	vmul.f32	s21, s21, s15
    uint32_t pickupPosInSamplesInt = (uint32_t) pickupPosInSamples;
24015b8a:	eefc 7aea 	vcvt.u32.f32	s15, s21
24015b8e:	ee17 aa90 	vmov	sl, s15
    alpha = pickupPosInSamples - pickupPosInSamplesInt;
24015b92:	eeb8 9a67 	vcvt.f32.u32	s18, s15
    if (sample1 < BLenInt)
24015b96:	4553      	cmp	r3, sl
    sample2 = pickupPosInSamplesInt + 1;
24015b98:	f10a 0901 	add.w	r9, sl, #1
    alpha = pickupPosInSamples - pickupPosInSamplesInt;
24015b9c:	ee7a 9ac9 	vsub.f32	s19, s21, s18
    if (sample1 < BLenInt)
24015ba0:	f240 808b 	bls.w	24015cba <tSimpleLivingString5_tick+0x306>
    {
        outputSample1 = tLinearDelay_tapOut(&p->delUB, sample1);
24015ba4:	ee17 1a90 	vmov	r1, s15
24015ba8:	4640      	mov	r0, r8
24015baa:	f7fa ff1f 	bl	240109ec <tLinearDelay_tapOut>
        outputSample1 += tLinearDelay_tapOut(&p->delLB, BLenInt-sample1);
24015bae:	9b01      	ldr	r3, [sp, #4]
        outputSample1 = tLinearDelay_tapOut(&p->delUB, sample1);
24015bb0:	eef0 8a40 	vmov.f32	s17, s0
        outputSample1 += tLinearDelay_tapOut(&p->delLB, BLenInt-sample1);
24015bb4:	4638      	mov	r0, r7
24015bb6:	eba3 010a 	sub.w	r1, r3, sl
24015bba:	f7fa ff17 	bl	240109ec <tLinearDelay_tapOut>
24015bbe:	ee78 8a80 	vadd.f32	s17, s17, s0
    else
    {
        outputSample1 = tLinearDelay_tapOut(&p->delUF, sample1Front2);
        outputSample1 += tLinearDelay_tapOut(&p->delLF, FLenInt-sample1Front2);
    }
    if (sample2 < BLenInt)
24015bc2:	9b01      	ldr	r3, [sp, #4]
24015bc4:	454b      	cmp	r3, r9
24015bc6:	d95e      	bls.n	24015c86 <tSimpleLivingString5_tick+0x2d2>
    {
        outputSample2 = tLinearDelay_tapOut(&p->delUB, sample2);
24015bc8:	4640      	mov	r0, r8
24015bca:	4649      	mov	r1, r9
24015bcc:	f7fa ff0e 	bl	240109ec <tLinearDelay_tapOut>
        outputSample2 += tLinearDelay_tapOut(&p->delLB, BLenInt-sample2);
24015bd0:	9b01      	ldr	r3, [sp, #4]
        outputSample2 = tLinearDelay_tapOut(&p->delUB, sample2);
24015bd2:	eeb0 8a40 	vmov.f32	s16, s0
        outputSample2 += tLinearDelay_tapOut(&p->delLB, BLenInt-sample2);
24015bd6:	4638      	mov	r0, r7
24015bd8:	eba3 0109 	sub.w	r1, r3, r9
24015bdc:	f7fa ff06 	bl	240109ec <tLinearDelay_tapOut>
24015be0:	ee38 0a00 	vadd.f32	s0, s16, s0
    else
    {
        outputSample2 = tLinearDelay_tapOut(&p->delUF, sample2Front2);
        outputSample2 += tLinearDelay_tapOut(&p->delLF, FLenInt-sample2Front2);
    }
    p->curr = 0.5f * ((outputSample1 * (1.0f-alpha))+ (outputSample2 * alpha));
24015be4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0

        p->curr = 0.5f * (sampleBitOne + sampleBitTwo) * p->changeGainCompensator;
    }
#endif
    //p->curr = p->Uout;
    p->prevDelayLength = p->waveLengthInSamples;
24015be8:	68a3      	ldr	r3, [r4, #8]
    p->curr = 0.5f * ((outputSample1 * (1.0f-alpha))+ (outputSample2 * alpha));
24015bea:	ee20 0a29 	vmul.f32	s0, s0, s19
24015bee:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    p->prevDelayLength = p->waveLengthInSamples;
24015bf2:	61a3      	str	r3, [r4, #24]
    p->curr = 0.5f * ((outputSample1 * (1.0f-alpha))+ (outputSample2 * alpha));
24015bf4:	ee37 7a6a 	vsub.f32	s14, s14, s21
24015bf8:	eef0 7a40 	vmov.f32	s15, s0
24015bfc:	ee37 7a09 	vadd.f32	s14, s14, s18
24015c00:	eee7 7a28 	vfma.f32	s15, s14, s17
24015c04:	ee27 0aa6 	vmul.f32	s0, s15, s13
24015c08:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    //Lfloat stringInput=tHighpass_tick(&p->DCblocker, tFeedbackLeveler_tick(&p->fbLev, (p->levMode==0?p->decay*stringOut:stringOut)+input));
    //tLinearDelay_tickIn(&p->delayLine, stringInput);
    //tLinearDelay_setDelay(&p->delayLine, tExpSmooth_tick(&p->wlSmooth));
    //p->curr = d1 + d2;
    return p->curr;
}
24015c0c:	b003      	add	sp, #12
24015c0e:	ecbd 8b0a 	vpop	{d8-d12}
24015c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t sample2Front = (uint32_t) (sample2 - BLen);
24015c16:	ee07 9a90 	vmov	s15, r9
        tLinearDelay_addTo(&p->delUF, input * alpha, sample2Front);
24015c1a:	ee68 8a89 	vmul.f32	s17, s17, s18
24015c1e:	4630      	mov	r0, r6
    uint32_t sample2Front = (uint32_t) (sample2 - BLen);
24015c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
        tLinearDelay_addTo(&p->delUF, input * alpha, sample2Front);
24015c24:	eeb0 0a68 	vmov.f32	s0, s17
    uint32_t sample2Front = (uint32_t) (sample2 - BLen);
24015c28:	ee77 7acb 	vsub.f32	s15, s15, s22
24015c2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
        tLinearDelay_addTo(&p->delUF, input * alpha, sample2Front);
24015c30:	ee17 1a90 	vmov	r1, s15
    uint32_t sample2Front = (uint32_t) (sample2 - BLen);
24015c34:	ee17 9a90 	vmov	r9, s15
        tLinearDelay_addTo(&p->delUF, input * alpha, sample2Front);
24015c38:	f7fa fee6 	bl	24010a08 <tLinearDelay_addTo>
        tLinearDelay_addTo(&p->delLF, input * alpha, FLenInt-sample2Front);
24015c3c:	ee1c 3a90 	vmov	r3, s25
24015c40:	eeb0 0a68 	vmov.f32	s0, s17
24015c44:	4628      	mov	r0, r5
24015c46:	eba3 0109 	sub.w	r1, r3, r9
24015c4a:	f7fa fedd 	bl	24010a08 <tLinearDelay_addTo>
24015c4e:	e727      	b.n	24015aa0 <tSimpleLivingString5_tick+0xec>
    uint32_t sample1Front = (uint32_t) (sample1 - BLen);
24015c50:	ee77 7a4b 	vsub.f32	s15, s14, s22
        tLinearDelay_addTo(&p->delUF, input * (1.0f - alpha), sample1Front);
24015c54:	4630      	mov	r0, r6
24015c56:	ee38 8a07 	vadd.f32	s16, s16, s14
    uint32_t sample1Front = (uint32_t) (sample1 - BLen);
24015c5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
        tLinearDelay_addTo(&p->delUF, input * (1.0f - alpha), sample1Front);
24015c5e:	ee28 8a09 	vmul.f32	s16, s16, s18
24015c62:	ee17 1a90 	vmov	r1, s15
    uint32_t sample1Front = (uint32_t) (sample1 - BLen);
24015c66:	ee17 aa90 	vmov	sl, s15
        tLinearDelay_addTo(&p->delUF, input * (1.0f - alpha), sample1Front);
24015c6a:	eeb0 0a48 	vmov.f32	s0, s16
24015c6e:	f7fa fecb 	bl	24010a08 <tLinearDelay_addTo>
        tLinearDelay_addTo(&p->delLF, input * (1.0f - alpha), FLenInt-sample1Front);
24015c72:	ee1c 3a90 	vmov	r3, s25
24015c76:	eeb0 0a48 	vmov.f32	s0, s16
24015c7a:	4628      	mov	r0, r5
24015c7c:	eba3 010a 	sub.w	r1, r3, sl
24015c80:	f7fa fec2 	bl	24010a08 <tLinearDelay_addTo>
24015c84:	e6f8      	b.n	24015a78 <tSimpleLivingString5_tick+0xc4>
    uint32_t sample2Front2 = (uint32_t) (sample2 - BLen);
24015c86:	ee07 9a90 	vmov	s15, r9
        outputSample2 = tLinearDelay_tapOut(&p->delUF, sample2Front2);
24015c8a:	4630      	mov	r0, r6
    uint32_t sample2Front2 = (uint32_t) (sample2 - BLen);
24015c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
24015c90:	ee77 7acb 	vsub.f32	s15, s15, s22
24015c94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
        outputSample2 = tLinearDelay_tapOut(&p->delUF, sample2Front2);
24015c98:	ee17 1a90 	vmov	r1, s15
    uint32_t sample2Front2 = (uint32_t) (sample2 - BLen);
24015c9c:	ee17 6a90 	vmov	r6, s15
        outputSample2 = tLinearDelay_tapOut(&p->delUF, sample2Front2);
24015ca0:	f7fa fea4 	bl	240109ec <tLinearDelay_tapOut>
        outputSample2 += tLinearDelay_tapOut(&p->delLF, FLenInt-sample2Front2);
24015ca4:	ee1c 3a90 	vmov	r3, s25
        outputSample2 = tLinearDelay_tapOut(&p->delUF, sample2Front2);
24015ca8:	eeb0 8a40 	vmov.f32	s16, s0
        outputSample2 += tLinearDelay_tapOut(&p->delLF, FLenInt-sample2Front2);
24015cac:	4628      	mov	r0, r5
24015cae:	1b99      	subs	r1, r3, r6
24015cb0:	f7fa fe9c 	bl	240109ec <tLinearDelay_tapOut>
24015cb4:	ee38 0a00 	vadd.f32	s0, s16, s0
24015cb8:	e794      	b.n	24015be4 <tSimpleLivingString5_tick+0x230>
    uint32_t sample1Front2 = (uint32_t) (sample1 - BLen);
24015cba:	ee79 7a4b 	vsub.f32	s15, s18, s22
        outputSample1 = tLinearDelay_tapOut(&p->delUF, sample1Front2);
24015cbe:	4630      	mov	r0, r6
    uint32_t sample1Front2 = (uint32_t) (sample1 - BLen);
24015cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
        outputSample1 = tLinearDelay_tapOut(&p->delUF, sample1Front2);
24015cc4:	ee17 1a90 	vmov	r1, s15
    uint32_t sample1Front2 = (uint32_t) (sample1 - BLen);
24015cc8:	ee17 aa90 	vmov	sl, s15
        outputSample1 = tLinearDelay_tapOut(&p->delUF, sample1Front2);
24015ccc:	f7fa fe8e 	bl	240109ec <tLinearDelay_tapOut>
        outputSample1 += tLinearDelay_tapOut(&p->delLF, FLenInt-sample1Front2);
24015cd0:	ee1c 3a90 	vmov	r3, s25
        outputSample1 = tLinearDelay_tapOut(&p->delUF, sample1Front2);
24015cd4:	eef0 8a40 	vmov.f32	s17, s0
        outputSample1 += tLinearDelay_tapOut(&p->delLF, FLenInt-sample1Front2);
24015cd8:	4628      	mov	r0, r5
24015cda:	eba3 010a 	sub.w	r1, r3, sl
24015cde:	f7fa fe85 	bl	240109ec <tLinearDelay_tapOut>
24015ce2:	ee78 8a80 	vadd.f32	s17, s17, s0
24015ce6:	e76c      	b.n	24015bc2 <tSimpleLivingString5_tick+0x20e>

24015ce8 <tSimpleLivingString5_setPickupPoint>:


void   tSimpleLivingString5_setPickupPoint(tSimpleLivingString5* const pl, Lfloat pickupPoint)
{
    _tSimpleLivingString5* p = *pl;
24015ce8:	6803      	ldr	r3, [r0, #0]
    p->pickupPoint = pickupPoint;
24015cea:	ed83 0a19 	vstr	s0, [r3, #100]	; 0x64
}
24015cee:	4770      	bx	lr

24015cf0 <tSimpleLivingString5_setFBAmount>:
    tOnePole_setSampleRate(&p->bridgeFilter, p->sampleRate);
    tHighpass_setSampleRate(&p->DCblocker, p->sampleRate);
}

void   tSimpleLivingString5_setFBAmount(tSimpleLivingString5* const pl, Lfloat fb)
{
24015cf0:	b510      	push	{r4, lr}
24015cf2:	ed2d 8b02 	vpush	{d8}
24015cf6:	eeb0 8a40 	vmov.f32	s16, s0
    _tSimpleLivingString5* p = *pl;
24015cfa:	6804      	ldr	r4, [r0, #0]
    tWavefolder_setFBAmount(&p->wf1, fb);
24015cfc:	f104 007c 	add.w	r0, r4, #124	; 0x7c
24015d00:	f7fa ff86 	bl	24010c10 <tWavefolder_setFBAmount>
    tWavefolder_setFBAmount(&p->wf2, fb);
24015d04:	eeb0 0a48 	vmov.f32	s0, s16
24015d08:	f104 0080 	add.w	r0, r4, #128	; 0x80
}
24015d0c:	ecbd 8b02 	vpop	{d8}
24015d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tWavefolder_setFBAmount(&p->wf2, fb);
24015d14:	f7fa bf7c 	b.w	24010c10 <tWavefolder_setFBAmount>

24015d18 <tSimpleLivingString5_setFFAmount>:
void   tSimpleLivingString5_setFFAmount(tSimpleLivingString5* const pl, Lfloat ff)
{
24015d18:	b510      	push	{r4, lr}
24015d1a:	ed2d 8b02 	vpush	{d8}
24015d1e:	eeb0 8a40 	vmov.f32	s16, s0
    _tSimpleLivingString5* p = *pl;
24015d22:	6804      	ldr	r4, [r0, #0]
    tWavefolder_setFFAmount(&p->wf1, ff);
24015d24:	f104 007c 	add.w	r0, r4, #124	; 0x7c
24015d28:	f7fa ff6e 	bl	24010c08 <tWavefolder_setFFAmount>
    tWavefolder_setFFAmount(&p->wf2, ff);
24015d2c:	eeb0 0a48 	vmov.f32	s0, s16
24015d30:	f104 0080 	add.w	r0, r4, #128	; 0x80
}
24015d34:	ecbd 8b02 	vpop	{d8}
24015d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tWavefolder_setFFAmount(&p->wf2, ff);
24015d3c:	f7fa bf64 	b.w	24010c08 <tWavefolder_setFFAmount>

24015d40 <tSimpleLivingString5_setFoldDepth>:
void   tSimpleLivingString5_setFoldDepth(tSimpleLivingString5* const pl, Lfloat depth)
{
24015d40:	b510      	push	{r4, lr}
24015d42:	ed2d 8b02 	vpush	{d8}
24015d46:	eeb0 8a40 	vmov.f32	s16, s0
    _tSimpleLivingString5* p = *pl;
24015d4a:	6804      	ldr	r4, [r0, #0]
    tWavefolder_setFoldDepth(&p->wf1, depth);
24015d4c:	f104 007c 	add.w	r0, r4, #124	; 0x7c
24015d50:	f7fa ff6a 	bl	24010c28 <tWavefolder_setFoldDepth>
    tWavefolder_setFoldDepth(&p->wf2, depth);
24015d54:	eeb0 0a48 	vmov.f32	s0, s16
24015d58:	f104 0080 	add.w	r0, r4, #128	; 0x80
}
24015d5c:	ecbd 8b02 	vpop	{d8}
24015d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tWavefolder_setFoldDepth(&p->wf2, depth);
24015d64:	f7fa bf60 	b.w	24010c28 <tWavefolder_setFoldDepth>

24015d68 <glottis_setup_waveform>:




void glottis_setup_waveform(glottis* const glo)
{
24015d68:	b510      	push	{r4, lr}
	_glottis* glot = *glo;
24015d6a:	6804      	ldr	r4, [r0, #0]

    Lfloat alpha;
    Lfloat E0;


    glot->Rd = 3.0f * (1.0f - glot->tenseness);
24015d6c:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
24015d70:	eddf 3a53 	vldr	s7, [pc, #332]	; 24015ec0 <glottis_setup_waveform+0x158>
    if(Rd < 0.5f) Rd = 0.5f;
    if(Rd > 2.7f) Rd = 2.7f;


    Ra = -0.01f + 0.048f*Rd;
    Rk = 0.224f + 0.118f*Rd;
24015d74:	eddf 6a53 	vldr	s13, [pc, #332]	; 24015ec4 <glottis_setup_waveform+0x15c>
24015d78:	ed9f 6a53 	vldr	s12, [pc, #332]	; 24015ec8 <glottis_setup_waveform+0x160>
    Ra = -0.01f + 0.048f*Rd;
24015d7c:	ed9f 4a53 	vldr	s8, [pc, #332]	; 24015ecc <glottis_setup_waveform+0x164>
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
24015d80:	eddf 4a53 	vldr	s9, [pc, #332]	; 24015ed0 <glottis_setup_waveform+0x168>
24015d84:	eddf 5a53 	vldr	s11, [pc, #332]	; 24015ed4 <glottis_setup_waveform+0x16c>
{
24015d88:	ed2d 8b08 	vpush	{d8-d11}
    glot->Rd = 3.0f * (1.0f - glot->tenseness);
24015d8c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
24015d90:	edd4 7a02 	vldr	s15, [r4, #8]
24015d94:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
    glot->waveform_length = 1.0f / glot->freq;
24015d98:	ed94 7a01 	vldr	s14, [r4, #4]


    Ta = Ra;
    Tp = (Lfloat)1.0f / (2.0f*Rg);
    Te = Tp + Tp*Rk;
24015d9c:	ed9f 8a4e 	vldr	s16, [pc, #312]	; 24015ed8 <glottis_setup_waveform+0x170>
    glot->Rd = 3.0f * (1.0f - glot->tenseness);
24015da0:	ee79 7a67 	vsub.f32	s15, s18, s15
    Ra = -0.01f + 0.048f*Rd;
24015da4:	eddf aa4d 	vldr	s21, [pc, #308]	; 24015edc <glottis_setup_waveform+0x174>
    glot->Rd = 3.0f * (1.0f - glot->tenseness);
24015da8:	ee67 7a85 	vmul.f32	s15, s15, s10
    glot->waveform_length = 1.0f / glot->freq;
24015dac:	ee89 5a07 	vdiv.f32	s10, s18, s14
24015db0:	fe87 7a8b 	vmaxnm.f32	s14, s15, s22
24015db4:	fe87 7a63 	vminnm.f32	s14, s14, s7
    glot->Rd = 3.0f * (1.0f - glot->tenseness);
24015db8:	edc4 7a03 	vstr	s15, [r4, #12]
    Rk = 0.224f + 0.118f*Rd;
24015dbc:	eea7 6a26 	vfma.f32	s12, s14, s13
    Te = Tp + Tp*Rk;
24015dc0:	eea7 8a26 	vfma.f32	s16, s14, s13
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
24015dc4:	eef0 6a4b 	vmov.f32	s13, s22
    Ra = -0.01f + 0.048f*Rd;
24015dc8:	eee7 aa04 	vfma.f32	s21, s14, s8
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
24015dcc:	eee6 6a24 	vfma.f32	s13, s12, s9



    epsilon = (Lfloat)1.0f / Ta;
24015dd0:	eec9 ba2a 	vdiv.f32	s23, s18, s21
    glot->waveform_length = 1.0f / glot->freq;
24015dd4:	ed84 5a04 	vstr	s10, [r4, #16]
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
24015dd8:	ee6a 7ae6 	vnmul.f32	s15, s21, s13
24015ddc:	ee66 6a86 	vmul.f32	s13, s13, s12
24015de0:	eee7 7a25 	vfma.f32	s15, s14, s11
    Tp = (Lfloat)1.0f / (2.0f*Rg);
24015de4:	ee77 7aa7 	vadd.f32	s15, s15, s15
24015de8:	ee87 aaa6 	vdiv.f32	s20, s15, s13
    Te = Tp + Tp*Rk;
24015dec:	ee28 8a0a 	vmul.f32	s16, s16, s20
    shift = fasterexpf(-epsilon * (1.0f - Te));
24015df0:	ee38 0a49 	vsub.f32	s0, s16, s18
24015df4:	ee20 0a2b 	vmul.f32	s0, s0, s23
24015df8:	f7fd fcec 	bl	240137d4 <fasterexpf>
    rhs_integral = rhs_integral / delta;
    lower_integral = - (Te - Tp) / 2.0f + rhs_integral;
    upper_integral = -lower_integral;


    omega = M_PI / Tp;
24015dfc:	eeb7 5aca 	vcvt.f64.f32	d5, s20
    rhs_integral = (Lfloat)(1.0f/epsilon) * (shift-1.0f) + (1.0f-Te)*shift;
24015e00:	ee79 7a48 	vsub.f32	s15, s18, s16
    lower_integral = - (Te - Tp) / 2.0f + rhs_integral;
24015e04:	ee3a 7a48 	vsub.f32	s14, s20, s16
    shift = fasterexpf(-epsilon * (1.0f - Te));
24015e08:	eef0 9a40 	vmov.f32	s19, s0
    rhs_integral = (Lfloat)(1.0f/epsilon) * (shift-1.0f) + (1.0f-Te)*shift;
24015e0c:	ee67 7a80 	vmul.f32	s15, s15, s0
    omega = M_PI / Tp;
24015e10:	ed9f 4b27 	vldr	d4, [pc, #156]	; 24015eb0 <glottis_setup_waveform+0x148>
24015e14:	ee84 6b05 	vdiv.f64	d6, d4, d5
    rhs_integral = (Lfloat)(1.0f/epsilon) * (shift-1.0f) + (1.0f-Te)*shift;
24015e18:	ee70 5a49 	vsub.f32	s11, s0, s18
    delta = 1.0f - shift;
24015e1c:	ee39 9a40 	vsub.f32	s18, s18, s0
    rhs_integral = (Lfloat)(1.0f/epsilon) * (shift-1.0f) + (1.0f-Te)*shift;
24015e20:	eee5 7aaa 	vfma.f32	s15, s11, s21
    rhs_integral = rhs_integral / delta;
24015e24:	eec7 8a89 	vdiv.f32	s17, s15, s18
    lower_integral = - (Te - Tp) / 2.0f + rhs_integral;
24015e28:	eee7 8a0b 	vfma.f32	s17, s14, s22
    omega = M_PI / Tp;
24015e2c:	eef7 abc6 	vcvt.f32.f64	s21, d6
    s = fast_sinf2(omega * Te);
24015e30:	ee28 0a2a 	vmul.f32	s0, s16, s21
24015e34:	f7fd fce8 	bl	24013808 <fast_sinf2>

    y = -M_PI * s * upper_integral / (Tp*2.0f);
24015e38:	eeb7 5ac0 	vcvt.f64.f32	d5, s0
    upper_integral = -lower_integral;
24015e3c:	eeb1 7a68 	vneg.f32	s14, s17
    y = -M_PI * s * upper_integral / (Tp*2.0f);
24015e40:	ee3a 6a0a 	vadd.f32	s12, s20, s20
    s = fast_sinf2(omega * Te);
24015e44:	eef0 8a40 	vmov.f32	s17, s0
    y = -M_PI * s * upper_integral / (Tp*2.0f);
24015e48:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
24015e4c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
24015e50:	ed9f 4b19 	vldr	d4, [pc, #100]	; 24015eb8 <glottis_setup_waveform+0x150>
24015e54:	ee25 5b04 	vmul.f64	d5, d5, d4
24015e58:	ee27 7b05 	vmul.f64	d7, d7, d5
24015e5c:	ee87 0b06 	vdiv.f64	d0, d7, d6
    z = logf(y);
24015e60:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24015e64:	f001 fec6 	bl	24017bf4 <logf>
    alpha = z / (Tp/2.0f - Te);
24015e68:	eef0 7a48 	vmov.f32	s15, s16
24015e6c:	eeda 7a0b 	vfnms.f32	s15, s20, s22
24015e70:	ee80 aa27 	vdiv.f32	s20, s0, s15
    E0 = -1.0f / (s * fasterexpf(alpha*Te));
24015e74:	ee28 0a0a 	vmul.f32	s0, s16, s20
24015e78:	f7fd fcac 	bl	240137d4 <fasterexpf>
24015e7c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
24015e80:	ee20 0a28 	vmul.f32	s0, s0, s17



    glot->alpha = alpha;
24015e84:	ed84 aa06 	vstr	s20, [r4, #24]
    glot->E0 = E0;
    glot->epsilon = epsilon;
24015e88:	edc4 ba08 	vstr	s23, [r4, #32]
    glot->shift = shift;
24015e8c:	edc4 9a09 	vstr	s19, [r4, #36]	; 0x24
    E0 = -1.0f / (s * fasterexpf(alpha*Te));
24015e90:	eec7 7a00 	vdiv.f32	s15, s14, s0
    glot->delta = delta;
24015e94:	ed84 9a0a 	vstr	s18, [r4, #40]	; 0x28
    glot->Te = Te;
24015e98:	ed84 8a0b 	vstr	s16, [r4, #44]	; 0x2c
    glot->omega = omega;
24015e9c:	edc4 aa0c 	vstr	s21, [r4, #48]	; 0x30
    glot->E0 = E0;
24015ea0:	edc4 7a07 	vstr	s15, [r4, #28]
}
24015ea4:	ecbd 8b08 	vpop	{d8-d11}
24015ea8:	bd10      	pop	{r4, pc}
24015eaa:	bf00      	nop
24015eac:	f3af 8000 	nop.w
24015eb0:	54442d18 	.word	0x54442d18
24015eb4:	400921fb 	.word	0x400921fb
24015eb8:	54442d18 	.word	0x54442d18
24015ebc:	c00921fb 	.word	0xc00921fb
24015ec0:	402ccccd 	.word	0x402ccccd
24015ec4:	3df1a9fc 	.word	0x3df1a9fc
24015ec8:	3e656042 	.word	0x3e656042
24015ecc:	3d449ba6 	.word	0x3d449ba6
24015ed0:	3f99999a 	.word	0x3f99999a
24015ed4:	3de147ae 	.word	0x3de147ae
24015ed8:	3f9cac08 	.word	0x3f9cac08
24015edc:	bc23d70a 	.word	0xbc23d70a

24015ee0 <glottis_compute>:
	mpool_free((char*)glot, glot->mempool);
}


Lfloat glottis_compute(glottis* const glo)
{
24015ee0:	b530      	push	{r4, r5, lr}
24015ee2:	ed2d 8b04 	vpush	{d8-d9}
	_glottis* glot = *glo;
24015ee6:	6804      	ldr	r4, [r0, #0]
{
24015ee8:	b083      	sub	sp, #12
    Lfloat t;
    Lfloat intensity;

    out = 0.0f;
    intensity = 1.0f;
    glot->time_in_waveform += glot->T;
24015eea:	edd4 7a05 	vldr	s15, [r4, #20]
24015eee:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34

    if(glot->time_in_waveform > glot->waveform_length) {
24015ef2:	ed94 7a04 	vldr	s14, [r4, #16]
    glot->time_in_waveform += glot->T;
24015ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
	LEAF* leaf = glot->mempool->leaf;
24015efa:	6823      	ldr	r3, [r4, #0]
	_glottis* glot = *glo;
24015efc:	9401      	str	r4, [sp, #4]
	LEAF* leaf = glot->mempool->leaf;
24015efe:	685d      	ldr	r5, [r3, #4]
    if(glot->time_in_waveform > glot->waveform_length) {
24015f00:	eef4 7ac7 	vcmpe.f32	s15, s14
    glot->time_in_waveform += glot->T;
24015f04:	edc4 7a05 	vstr	s15, [r4, #20]
    if(glot->time_in_waveform > glot->waveform_length) {
24015f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015f0c:	dc4b      	bgt.n	24015fa6 <glottis_compute+0xc6>
        glot->time_in_waveform -= glot->waveform_length;
        glottis_setup_waveform(&glot);

    }

    t = (glot->time_in_waveform / glot->waveform_length);
24015f0e:	eec7 8a87 	vdiv.f32	s17, s15, s14

    if(t > glot->Te) {
24015f12:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
24015f16:	eeb4 0ae8 	vcmpe.f32	s0, s17
24015f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015f1e:	d52d      	bpl.n	24015f7c <glottis_compute+0x9c>
        out = (-fasterexpf(-glot->epsilon * (t-glot->Te)) + glot->shift) / glot->delta;
24015f20:	ee30 0a68 	vsub.f32	s0, s0, s17
24015f24:	edd4 7a08 	vldr	s15, [r4, #32]
24015f28:	ed94 8a09 	vldr	s16, [r4, #36]	; 0x24
24015f2c:	ee20 0a27 	vmul.f32	s0, s0, s15
24015f30:	f7fd fc50 	bl	240137d4 <fasterexpf>
24015f34:	ee38 0a40 	vsub.f32	s0, s16, s0
24015f38:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
24015f3c:	ee80 8a27 	vdiv.f32	s16, s0, s15
    } else {
        out = glot->E0 * fasterexpf(glot->alpha * t) * fast_sinf2(glot->omega * t);
    }

    noise = (2.0f * leaf->random()) - 1.0f;
24015f40:	692b      	ldr	r3, [r5, #16]
24015f42:	4798      	blx	r3
24015f44:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
24015f48:	eeb0 7a40 	vmov.f32	s14, s0

    aspiration = intensity * (1.0f - fastsqrtf(glot->tenseness)) * 0.3f * noise;
24015f4c:	ed94 0a02 	vldr	s0, [r4, #8]
    noise = (2.0f * leaf->random()) - 1.0f;
24015f50:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
24015f54:	eee7 8a27 	vfma.f32	s17, s14, s15
    aspiration = intensity * (1.0f - fastsqrtf(glot->tenseness)) * 0.3f * noise;
24015f58:	f7fd fc12 	bl	24013780 <fastsqrtf>
24015f5c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0

    aspiration *= 0.2f;

    out += aspiration;
24015f60:	ed9f 7a17 	vldr	s14, [pc, #92]	; 24015fc0 <glottis_compute+0xe0>
    aspiration = intensity * (1.0f - fastsqrtf(glot->tenseness)) * 0.3f * noise;
24015f64:	ee37 0ac0 	vsub.f32	s0, s15, s0
    out += aspiration;
24015f68:	ee20 0a28 	vmul.f32	s0, s0, s17

    return out;
}
24015f6c:	eea0 8a07 	vfma.f32	s16, s0, s14
24015f70:	eeb0 0a48 	vmov.f32	s0, s16
24015f74:	b003      	add	sp, #12
24015f76:	ecbd 8b04 	vpop	{d8-d9}
24015f7a:	bd30      	pop	{r4, r5, pc}
        out = glot->E0 * fasterexpf(glot->alpha * t) * fast_sinf2(glot->omega * t);
24015f7c:	ed94 0a06 	vldr	s0, [r4, #24]
24015f80:	ed94 9a07 	vldr	s18, [r4, #28]
24015f84:	ee28 0a80 	vmul.f32	s0, s17, s0
24015f88:	f7fd fc24 	bl	240137d4 <fasterexpf>
24015f8c:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
24015f90:	eeb0 8a40 	vmov.f32	s16, s0
24015f94:	ee28 0aa7 	vmul.f32	s0, s17, s15
24015f98:	f7fd fc36 	bl	24013808 <fast_sinf2>
24015f9c:	ee28 8a00 	vmul.f32	s16, s16, s0
24015fa0:	ee28 8a09 	vmul.f32	s16, s16, s18
24015fa4:	e7cc      	b.n	24015f40 <glottis_compute+0x60>
        glot->time_in_waveform -= glot->waveform_length;
24015fa6:	ee77 7ac7 	vsub.f32	s15, s15, s14
        glottis_setup_waveform(&glot);
24015faa:	a801      	add	r0, sp, #4
        glot->time_in_waveform -= glot->waveform_length;
24015fac:	edc4 7a05 	vstr	s15, [r4, #20]
        glottis_setup_waveform(&glot);
24015fb0:	f7ff feda 	bl	24015d68 <glottis_setup_waveform>
    t = (glot->time_in_waveform / glot->waveform_length);
24015fb4:	9c01      	ldr	r4, [sp, #4]
24015fb6:	edd4 7a05 	vldr	s15, [r4, #20]
24015fba:	ed94 7a04 	vldr	s14, [r4, #16]
24015fbe:	e7a6      	b.n	24015f0e <glottis_compute+0x2e>
24015fc0:	3d75c290 	.word	0x3d75c290

24015fc4 <tract_calculate_reflections>:
	mpool_free((char*)tr, tr->mempool);
}


void tract_calculate_reflections(tract* const t)
{
24015fc4:	b500      	push	{lr}
	_tract* tr = *t;
24015fc6:	6803      	ldr	r3, [r0, #0]
	int i;
    Lfloat  sum;

    for(i = 0; i < tr->n; i++) {
24015fc8:	685a      	ldr	r2, [r3, #4]
24015fca:	2a00      	cmp	r2, #0
24015fcc:	dd30      	ble.n	24016030 <tract_calculate_reflections+0x6c>
24015fce:	2200      	movs	r2, #0
        tr->A[i] = tr->diameter[i] * tr->diameter[i];
24015fd0:	6898      	ldr	r0, [r3, #8]
24015fd2:	6b19      	ldr	r1, [r3, #48]	; 0x30
24015fd4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
24015fd8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    for(i = 0; i < tr->n; i++) {
24015fdc:	3201      	adds	r2, #1
        tr->A[i] = tr->diameter[i] * tr->diameter[i];
24015fde:	edd0 7a00 	vldr	s15, [r0]
24015fe2:	ee67 7aa7 	vmul.f32	s15, s15, s15
24015fe6:	edc1 7a00 	vstr	s15, [r1]
    for(i = 0; i < tr->n; i++) {
24015fea:	6859      	ldr	r1, [r3, #4]
24015fec:	4291      	cmp	r1, r2
24015fee:	dcef      	bgt.n	24015fd0 <tract_calculate_reflections+0xc>
        /* Calculate area from diameter squared*/
    }

    for(i = 1; i < tr->n; i++) {
24015ff0:	2901      	cmp	r1, #1
24015ff2:	dd1d      	ble.n	24016030 <tract_calculate_reflections+0x6c>
24015ff4:	2204      	movs	r2, #4
24015ff6:	f04f 0c01 	mov.w	ip, #1
        tr->reflection[i] = tr->new_reflection[i];
        if(tr->A[i] == 0) {
            tr->new_reflection[i] = 0.999f; /* to prevent bad behavior if 0 */
24015ffa:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 240160cc <tract_calculate_reflections+0x108>
        tr->reflection[i] = tr->new_reflection[i];
24015ffe:	e9d3 1008 	ldrd	r1, r0, [r3, #32]
24016002:	4410      	add	r0, r2
24016004:	4411      	add	r1, r2
24016006:	6800      	ldr	r0, [r0, #0]
24016008:	6008      	str	r0, [r1, #0]
        if(tr->A[i] == 0) {
2401600a:	6b19      	ldr	r1, [r3, #48]	; 0x30
2401600c:	4411      	add	r1, r2
2401600e:	edd1 7a00 	vldr	s15, [r1]
24016012:	eef5 7a40 	vcmp.f32	s15, #0.0
24016016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401601a:	d143      	bne.n	240160a4 <tract_calculate_reflections+0xe0>
            tr->new_reflection[i] = 0.999f; /* to prevent bad behavior if 0 */
2401601c:	6a59      	ldr	r1, [r3, #36]	; 0x24
    for(i = 1; i < tr->n; i++) {
2401601e:	f10c 0c01 	add.w	ip, ip, #1
            tr->new_reflection[i] = 0.999f; /* to prevent bad behavior if 0 */
24016022:	4411      	add	r1, r2
24016024:	3204      	adds	r2, #4
24016026:	f8c1 e000 	str.w	lr, [r1]
    for(i = 1; i < tr->n; i++) {
2401602a:	6859      	ldr	r1, [r3, #4]
2401602c:	4561      	cmp	r1, ip
2401602e:	dce6      	bgt.n	24015ffe <tract_calculate_reflections+0x3a>
            tr->new_reflection[i] =
                (tr->A[i - 1] - tr->A[i]) / (tr->A[i - 1] + tr->A[i]);
        }
    }

    tr->reflection_left = tr->new_reflection_left;
24016030:	6f99      	ldr	r1, [r3, #120]	; 0x78
    tr->reflection_right = tr->new_reflection_right;
    tr->reflection_nose = tr->new_reflection_nose;

    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
    Lfloat invSum = 1.0f / sum;
24016032:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    tr->reflection_right = tr->new_reflection_right;
24016036:	f8d3 c07c 	ldr.w	ip, [r3, #124]	; 0x7c
    tr->new_reflection_left = (Lfloat)(2.0f * tr->A[tr->nose_start] - sum) * invSum;
2401603a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
    tr->reflection_left = tr->new_reflection_left;
2401603e:	66d9      	str	r1, [r3, #108]	; 0x6c
    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
24016040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    tr->reflection_nose = tr->new_reflection_nose;
24016042:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
24016046:	6b98      	ldr	r0, [r3, #56]	; 0x38
    tr->reflection_right = tr->new_reflection_right;
24016048:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
    tr->reflection_nose = tr->new_reflection_nose;
2401604c:	6759      	str	r1, [r3, #116]	; 0x74
    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
2401604e:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
24016052:	6e99      	ldr	r1, [r3, #104]	; 0x68
24016054:	eddc 5a00 	vldr	s11, [ip]
24016058:	edd1 7a00 	vldr	s15, [r1]
2401605c:	ed9c 7a01 	vldr	s14, [ip, #4]
24016060:	ee75 7aa7 	vadd.f32	s15, s11, s15
24016064:	ee77 7a87 	vadd.f32	s15, s15, s14
    Lfloat invSum = 1.0f / sum;
24016068:	ee86 7a27 	vdiv.f32	s14, s12, s15
    tr->new_reflection_left = (Lfloat)(2.0f * tr->A[tr->nose_start] - sum) * invSum;
2401606c:	eeb0 6a67 	vmov.f32	s12, s15
24016070:	ee95 6aa6 	vfnms.f32	s12, s11, s13
24016074:	ee26 6a07 	vmul.f32	s12, s12, s14
24016078:	ed83 6a1e 	vstr	s12, [r3, #120]	; 0x78
    tr->new_reflection_right = (Lfloat)(2.0f * tr->A[tr->nose_start + 1] - sum) * invSum;
2401607c:	eeb0 6a67 	vmov.f32	s12, s15
24016080:	eddc 5a01 	vldr	s11, [ip, #4]
24016084:	ee95 6aa6 	vfnms.f32	s12, s11, s13
24016088:	ee26 6a07 	vmul.f32	s12, s12, s14
2401608c:	ed83 6a1f 	vstr	s12, [r3, #124]	; 0x7c
    tr->new_reflection_nose = (Lfloat)(2.0f * tr->noseA[0] - sum) * invSum;
24016090:	ed91 6a00 	vldr	s12, [r1]
24016094:	eed6 7a26 	vfnms.f32	s15, s12, s13
24016098:	ee67 7a87 	vmul.f32	s15, s15, s14
2401609c:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
}
240160a0:	f85d fb04 	ldr.w	pc, [sp], #4
                (tr->A[i - 1] - tr->A[i]) / (tr->A[i - 1] + tr->A[i]);
240160a4:	ed11 7a01 	vldr	s14, [r1, #-4]
    for(i = 1; i < tr->n; i++) {
240160a8:	f10c 0c01 	add.w	ip, ip, #1
            tr->new_reflection[i] =
240160ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
                (tr->A[i - 1] - tr->A[i]) / (tr->A[i - 1] + tr->A[i]);
240160ae:	ee77 6a67 	vsub.f32	s13, s14, s15
240160b2:	ee77 7a87 	vadd.f32	s15, s15, s14
            tr->new_reflection[i] =
240160b6:	4411      	add	r1, r2
    for(i = 1; i < tr->n; i++) {
240160b8:	3204      	adds	r2, #4
                (tr->A[i - 1] - tr->A[i]) / (tr->A[i - 1] + tr->A[i]);
240160ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
            tr->new_reflection[i] =
240160be:	ed81 7a00 	vstr	s14, [r1]
    for(i = 1; i < tr->n; i++) {
240160c2:	6859      	ldr	r1, [r3, #4]
240160c4:	4561      	cmp	r1, ip
240160c6:	dc9a      	bgt.n	24015ffe <tract_calculate_reflections+0x3a>
240160c8:	e7b2      	b.n	24016030 <tract_calculate_reflections+0x6c>
240160ca:	bf00      	nop
240160cc:	3f7fbe77 	.word	0x3f7fbe77

240160d0 <tract_initToPool>:
{
240160d0:	b5f0      	push	{r4, r5, r6, r7, lr}
240160d2:	ed2d 8b04 	vpush	{d8-d9}
240160d6:	ee08 1a10 	vmov	s16, r1
	_tMempool* m = *mp;
240160da:	6813      	ldr	r3, [r2, #0]
{
240160dc:	b083      	sub	sp, #12
240160de:	4605      	mov	r5, r0
    Lfloat n = numTractSections;
240160e0:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
240160e4:	4619      	mov	r1, r3
240160e6:	20d0      	movs	r0, #208	; 0xd0
	_tMempool* m = *mp;
240160e8:	9300      	str	r3, [sp, #0]
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
240160ea:	f7fd ff79 	bl	24013fe0 <mpool_calloc>
    tr->nose_length = n*0.636363636363636f; //28
240160ee:	eddf 6aca 	vldr	s13, [pc, #808]	; 24016418 <tract_initToPool+0x348>
    tr->tip_start = n*0.727272727272727f;
240160f2:	ed9f 7aca 	vldr	s14, [pc, #808]	; 2401641c <tract_initToPool+0x34c>
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
240160f6:	4604      	mov	r4, r0
    tr->blade_start = n*0.227272727272727f;
240160f8:	eddf 7ac9 	vldr	s15, [pc, #804]	; 24016420 <tract_initToPool+0x350>
    tr->nose_length = n*0.636363636363636f; //28
240160fc:	ee68 6a26 	vmul.f32	s13, s16, s13
	tr->mempool = m;
24016100:	9a00      	ldr	r2, [sp, #0]
    tr->tip_start = n*0.727272727272727f;
24016102:	ee28 7a07 	vmul.f32	s14, s16, s14
    tr->blade_start = n*0.227272727272727f;
24016106:	ee68 7a27 	vmul.f32	s15, s16, s15
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
2401610a:	602c      	str	r4, [r5, #0]
	tr->mempool = m;
2401610c:	6022      	str	r2, [r4, #0]
    tr->nose_start = (n - tr->nose_length) + 1; //17
2401610e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    tr->nose_length = n*0.636363636363636f; //28
24016112:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    tr->reflection_left = 0.0f;
24016116:	2300      	movs	r3, #0
    tr->tip_start = n*0.727272727272727f;
24016118:	eebd 7ac7 	vcvt.s32.f32	s14, s14
	LEAF* leaf = m->leaf;
2401611c:	9900      	ldr	r1, [sp, #0]
    tr->blade_start = n*0.227272727272727f;
2401611e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
24016122:	ed9f 2ac0 	vldr	s4, [pc, #768]	; 24016424 <tract_initToPool+0x354>
	LEAF* leaf = m->leaf;
24016126:	684d      	ldr	r5, [r1, #4]
    tr->nose_start = (n - tr->nose_length) + 1; //17
24016128:	eef8 2ae6 	vcvt.f32.s32	s5, s13
    tr->reflection_left = 0.0f;
2401612c:	66e3      	str	r3, [r4, #108]	; 0x6c
    tr->nose_start = (n - tr->nose_length) + 1; //17
2401612e:	ee78 5a05 	vadd.f32	s11, s16, s10
    tr->reflection_right = 0.0f;
24016132:	6723      	str	r3, [r4, #112]	; 0x70
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
24016134:	eeb8 3ac7 	vcvt.f32.s32	s6, s14
    tr->reflection_nose = 0.0f;
24016138:	6763      	str	r3, [r4, #116]	; 0x74
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
2401613a:	eef8 3ae7 	vcvt.f32.s32	s7, s15
    tr->new_reflection_left = 0.0f;
2401613e:	67a3      	str	r3, [r4, #120]	; 0x78
    tr->nose_start = (n - tr->nose_length) + 1; //17
24016140:	ee75 5ae2 	vsub.f32	s11, s11, s5
    tr->new_reflection_right= 0.0f;
24016144:	67e3      	str	r3, [r4, #124]	; 0x7c
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
24016146:	eea8 3a42 	vfms.f32	s6, s16, s4
    tr->new_reflection_nose = 0.0f;
2401614a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	tr->turbuluencePointPosition[1] = n* 0.5f;
2401614e:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
    tr->lip_output = 0.0f;
24016152:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    tr->n = n; //44
24016156:	eefd 1ac8 	vcvt.s32.f32	s3, s16
    tr->nose_output = 0.0f;
2401615a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    tr->glottal_reflection = 0.75f;
2401615e:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
24016162:	ed9f 4ab1 	vldr	s8, [pc, #708]	; 24016428 <tract_initToPool+0x358>
    tr->nose_start = (n - tr->nose_length) + 1; //17
24016166:	eefd 5ae5 	vcvt.s32.f32	s11, s11
    tr->glottal_reflection = 0.75f;
2401616a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	tr->turbuluencePointPosition[1] = n* 0.5f;
2401616e:	ee68 4a24 	vmul.f32	s9, s16, s9
    tr->lip_reflection = -0.85f;
24016172:	4bae      	ldr	r3, [pc, #696]	; (2401642c <tract_initToPool+0x35c>)
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
24016174:	eee8 3a04 	vfma.f32	s7, s16, s8
    tr->lip_start = n*0.886363636363636f;
24016178:	ed9f 6aad 	vldr	s12, [pc, #692]	; 24016430 <tract_initToPool+0x360>
	tr->turbuluencePointDiameter[0] = 1.5f;
2401617c:	eef7 9a08 	vmov.f32	s19, #120	; 0x3fc00000  1.5
    tr->lip_reflection = -0.85f;
24016180:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    tr->last_obstruction = -1;
24016184:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    tr->lip_start = n*0.886363636363636f;
24016188:	ee28 6a06 	vmul.f32	s12, s16, s12
	tr->turbuluencePointPosition[0] = n* 0.45f;
2401618c:	ed9f 4aa9 	vldr	s8, [pc, #676]	; 24016434 <tract_initToPool+0x364>
    tr->last_obstruction = -1;
24016190:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    Lfloat invN = 1.0f / tr->n;
24016194:	eeb8 2ae1 	vcvt.f32.s32	s4, s3
    tr->movement_speed = 200.0f;
24016198:	4ba7      	ldr	r3, [pc, #668]	; (24016438 <tract_initToPool+0x368>)
	tr->turbuluencePointPosition[0] = n* 0.45f;
2401619a:	ee28 4a04 	vmul.f32	s8, s16, s8
    tr->lip_start = n*0.886363636363636f;
2401619e:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    tr->n = n; //44
240161a2:	ee11 0a90 	vmov	r0, s3
    tr->movement_speed = 200.0f;
240161a6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    Lfloat invNoseLength = 1.0f / tr->nose_length;
240161aa:	ee85 9a22 	vdiv.f32	s18, s10, s5
    tr->velum_target = 0.01f;
240161ae:	4ba3      	ldr	r3, [pc, #652]	; (2401643c <tract_initToPool+0x36c>)
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * tr->n, m);
240161b0:	0080      	lsls	r0, r0, #2
    tr->n = n; //44
240161b2:	edc4 1a01 	vstr	s3, [r4, #4]
    tr->nose_length = n*0.636363636363636f; //28
240161b6:	edc4 6a0d 	vstr	s13, [r4, #52]	; 0x34
    tr->nose_start = (n - tr->nose_length) + 1; //17
240161ba:	edc4 5a0e 	vstr	s11, [r4, #56]	; 0x38
    tr->tip_start = n*0.727272727272727f;
240161be:	ed84 7a0f 	vstr	s14, [r4, #60]	; 0x3c
    Lfloat invN = 1.0f / tr->n;
240161c2:	eec5 8a02 	vdiv.f32	s17, s10, s4
    tr->blade_start = n*0.227272727272727f;
240161c6:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
240161ca:	ed84 3a12 	vstr	s6, [r4, #72]	; 0x48
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
240161ce:	edc4 3a13 	vstr	s7, [r4, #76]	; 0x4c
	tr->turbuluencePointPosition[0] = n* 0.45f;
240161d2:	ed84 4a2e 	vstr	s8, [r4, #184]	; 0xb8
	tr->turbuluencePointPosition[1] = n* 0.5f;
240161d6:	edc4 4a2f 	vstr	s9, [r4, #188]	; 0xbc
    tr->lip_start = n*0.886363636363636f;
240161da:	ed84 6a11 	vstr	s12, [r4, #68]	; 0x44
    tr->velum_target = 0.01f;
240161de:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	tr->turbuluencePointDiameter[0] = 1.5f;
240161e2:	edc4 9a30 	vstr	s19, [r4, #192]	; 0xc0
	tr->turbuluencePointDiameter[1] = 1.5f;
240161e6:	edc4 9a31 	vstr	s19, [r4, #196]	; 0xc4
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
240161ea:	9401      	str	r4, [sp, #4]
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * tr->n, m);
240161ec:	f7fd fef8 	bl	24013fe0 <mpool_calloc>
    tr->rest_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * tr->n, m);
240161f0:	6863      	ldr	r3, [r4, #4]
240161f2:	9900      	ldr	r1, [sp, #0]
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * tr->n, m);
240161f4:	60a0      	str	r0, [r4, #8]
    tr->rest_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * tr->n, m);
240161f6:	0098      	lsls	r0, r3, #2
240161f8:	f7fd fef2 	bl	24013fe0 <mpool_calloc>
    tr->target_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * tr->n, m);
240161fc:	6863      	ldr	r3, [r4, #4]
240161fe:	9900      	ldr	r1, [sp, #0]
    tr->rest_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * tr->n, m);
24016200:	60e0      	str	r0, [r4, #12]
    tr->target_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * tr->n, m);
24016202:	0098      	lsls	r0, r3, #2
24016204:	f7fd feec 	bl	24013fe0 <mpool_calloc>
    tr->new_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * tr->n, m);
24016208:	6863      	ldr	r3, [r4, #4]
2401620a:	9900      	ldr	r1, [sp, #0]
    tr->target_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * tr->n, m);
2401620c:	6120      	str	r0, [r4, #16]
    tr->new_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * tr->n, m);
2401620e:	0098      	lsls	r0, r3, #2
24016210:	f7fd fee6 	bl	24013fe0 <mpool_calloc>
    tr->L = (Lfloat*) mpool_calloc(sizeof(Lfloat) * tr->n, m);
24016214:	6863      	ldr	r3, [r4, #4]
24016216:	9900      	ldr	r1, [sp, #0]
    tr->new_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * tr->n, m);
24016218:	6160      	str	r0, [r4, #20]
    tr->L = (Lfloat*) mpool_calloc(sizeof(Lfloat) * tr->n, m);
2401621a:	0098      	lsls	r0, r3, #2
2401621c:	f7fd fee0 	bl	24013fe0 <mpool_calloc>
    tr->R = (Lfloat*) mpool_calloc(sizeof(Lfloat) * tr->n, m);
24016220:	6863      	ldr	r3, [r4, #4]
24016222:	9900      	ldr	r1, [sp, #0]
    tr->L = (Lfloat*) mpool_calloc(sizeof(Lfloat) * tr->n, m);
24016224:	61e0      	str	r0, [r4, #28]
    tr->R = (Lfloat*) mpool_calloc(sizeof(Lfloat) * tr->n, m);
24016226:	0098      	lsls	r0, r3, #2
24016228:	f7fd feda 	bl	24013fe0 <mpool_calloc>
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (tr->n + 1), m);
2401622c:	6863      	ldr	r3, [r4, #4]
    tr->R = (Lfloat*) mpool_calloc(sizeof(Lfloat) * tr->n, m);
2401622e:	61a0      	str	r0, [r4, #24]
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (tr->n + 1), m);
24016230:	1c58      	adds	r0, r3, #1
24016232:	9900      	ldr	r1, [sp, #0]
24016234:	0080      	lsls	r0, r0, #2
24016236:	f7fd fed3 	bl	24013fe0 <mpool_calloc>
    tr->new_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (tr->n + 1), m);
2401623a:	6863      	ldr	r3, [r4, #4]
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (tr->n + 1), m);
2401623c:	6220      	str	r0, [r4, #32]
    tr->new_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (tr->n + 1), m);
2401623e:	1c58      	adds	r0, r3, #1
24016240:	9900      	ldr	r1, [sp, #0]
24016242:	0080      	lsls	r0, r0, #2
24016244:	f7fd fecc 	bl	24013fe0 <mpool_calloc>
    tr->junction_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (tr->n + 1), m);
24016248:	6863      	ldr	r3, [r4, #4]
    tr->new_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (tr->n + 1), m);
2401624a:	6260      	str	r0, [r4, #36]	; 0x24
    tr->junction_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (tr->n + 1), m);
2401624c:	1c58      	adds	r0, r3, #1
2401624e:	9900      	ldr	r1, [sp, #0]
24016250:	0080      	lsls	r0, r0, #2
24016252:	f7fd fec5 	bl	24013fe0 <mpool_calloc>
    tr->junction_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (tr->n + 1), m);
24016256:	6863      	ldr	r3, [r4, #4]
    tr->junction_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (tr->n + 1), m);
24016258:	62a0      	str	r0, [r4, #40]	; 0x28
    tr->junction_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (tr->n + 1), m);
2401625a:	1c58      	adds	r0, r3, #1
2401625c:	9900      	ldr	r1, [sp, #0]
2401625e:	0080      	lsls	r0, r0, #2
24016260:	f7fd febe 	bl	24013fe0 <mpool_calloc>
    tr->A = (Lfloat*) mpool_calloc(sizeof(Lfloat) * tr->n, m);
24016264:	6863      	ldr	r3, [r4, #4]
24016266:	9900      	ldr	r1, [sp, #0]
    tr->junction_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (tr->n + 1), m);
24016268:	62e0      	str	r0, [r4, #44]	; 0x2c
    tr->A = (Lfloat*) mpool_calloc(sizeof(Lfloat) * tr->n, m);
2401626a:	0098      	lsls	r0, r3, #2
2401626c:	f7fd feb8 	bl	24013fe0 <mpool_calloc>
    tr->noseL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * tr->nose_length, m);
24016270:	6b63      	ldr	r3, [r4, #52]	; 0x34
24016272:	9900      	ldr	r1, [sp, #0]
    tr->A = (Lfloat*) mpool_calloc(sizeof(Lfloat) * tr->n, m);
24016274:	6320      	str	r0, [r4, #48]	; 0x30
    tr->noseL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * tr->nose_length, m);
24016276:	0098      	lsls	r0, r3, #2
24016278:	f7fd feb2 	bl	24013fe0 <mpool_calloc>
    tr->noseR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * tr->nose_length, m);
2401627c:	6b63      	ldr	r3, [r4, #52]	; 0x34
2401627e:	9900      	ldr	r1, [sp, #0]
    tr->noseL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * tr->nose_length, m);
24016280:	6520      	str	r0, [r4, #80]	; 0x50
    tr->noseR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * tr->nose_length, m);
24016282:	0098      	lsls	r0, r3, #2
24016284:	f7fd feac 	bl	24013fe0 <mpool_calloc>
    tr->nose_junc_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (tr->nose_length + 1), m);
24016288:	6b63      	ldr	r3, [r4, #52]	; 0x34
    tr->noseR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * tr->nose_length, m);
2401628a:	6560      	str	r0, [r4, #84]	; 0x54
    tr->nose_junc_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (tr->nose_length + 1), m);
2401628c:	1c58      	adds	r0, r3, #1
2401628e:	9900      	ldr	r1, [sp, #0]
24016290:	0080      	lsls	r0, r0, #2
24016292:	f7fd fea5 	bl	24013fe0 <mpool_calloc>
    tr->nose_junc_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (tr->nose_length + 1), m);
24016296:	6b63      	ldr	r3, [r4, #52]	; 0x34
    tr->nose_junc_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (tr->nose_length + 1), m);
24016298:	65a0      	str	r0, [r4, #88]	; 0x58
    tr->nose_junc_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (tr->nose_length + 1), m);
2401629a:	1c58      	adds	r0, r3, #1
2401629c:	9900      	ldr	r1, [sp, #0]
2401629e:	0080      	lsls	r0, r0, #2
240162a0:	f7fd fe9e 	bl	24013fe0 <mpool_calloc>
    tr->nose_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * tr->nose_length, m);
240162a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
240162a6:	9900      	ldr	r1, [sp, #0]
    tr->nose_junc_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (tr->nose_length + 1), m);
240162a8:	65e0      	str	r0, [r4, #92]	; 0x5c
    tr->nose_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * tr->nose_length, m);
240162aa:	0098      	lsls	r0, r3, #2
240162ac:	f7fd fe98 	bl	24013fe0 <mpool_calloc>
    tr->nose_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * tr->nose_length, m);
240162b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
240162b2:	9900      	ldr	r1, [sp, #0]
    tr->nose_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * tr->nose_length, m);
240162b4:	6660      	str	r0, [r4, #100]	; 0x64
    tr->nose_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * tr->nose_length, m);
240162b6:	0098      	lsls	r0, r3, #2
240162b8:	f7fd fe92 	bl	24013fe0 <mpool_calloc>
    tr->noseA = (Lfloat*) mpool_calloc(sizeof(Lfloat) * tr->nose_length, m);
240162bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    tr->nose_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * tr->nose_length, m);
240162be:	6620      	str	r0, [r4, #96]	; 0x60
    tr->noseA = (Lfloat*) mpool_calloc(sizeof(Lfloat) * tr->nose_length, m);
240162c0:	9900      	ldr	r1, [sp, #0]
240162c2:	0098      	lsls	r0, r3, #2
240162c4:	f7fd fe8c 	bl	24013fe0 <mpool_calloc>
    for(i = 0; i < tr->n; i++) {
240162c8:	6863      	ldr	r3, [r4, #4]
    tr->noseA = (Lfloat*) mpool_calloc(sizeof(Lfloat) * tr->nose_length, m);
240162ca:	66a0      	str	r0, [r4, #104]	; 0x68
    for(i = 0; i < tr->n; i++) {
240162cc:	2b00      	cmp	r3, #0
240162ce:	dd43      	ble.n	24016358 <tract_initToPool+0x288>
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
240162d0:	eebe 4a00 	vmov.f32	s8, #224	; 0xbf000000 -0.5
    for(i = 0; i < tr->n; i++) {
240162d4:	2200      	movs	r2, #0
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
240162d6:	eddf 4a5a 	vldr	s9, [pc, #360]	; 24016440 <tract_initToPool+0x370>
            diameter = 0.6f;
240162da:	ed9f 5a5a 	vldr	s10, [pc, #360]	; 24016444 <tract_initToPool+0x374>
        } else if( i < (int)((n*0.272727272727273f) * (Lfloat)tr->n * invN)) { //was 12
240162de:	eddf 5a5a 	vldr	s11, [pc, #360]	; 24016448 <tract_initToPool+0x378>
            diameter = 1.1f;
240162e2:	eddf 3a5a 	vldr	s7, [pc, #360]	; 2401644c <tract_initToPool+0x37c>
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
240162e6:	ee07 3a90 	vmov	s15, r3
240162ea:	eef0 6a44 	vmov.f32	s13, s8
            diameter = 0.6f;
240162ee:	eeb0 7a45 	vmov.f32	s14, s10
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
240162f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240162f6:	ee27 6aa4 	vmul.f32	s12, s15, s9
        } else if( i < (int)((n*0.272727272727273f) * (Lfloat)tr->n * invN)) { //was 12
240162fa:	ee67 7aa5 	vmul.f32	s15, s15, s11
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
240162fe:	ee26 6a08 	vmul.f32	s12, s12, s16
        } else if( i < (int)((n*0.272727272727273f) * (Lfloat)tr->n * invN)) { //was 12
24016302:	ee67 7a88 	vmul.f32	s15, s15, s16
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
24016306:	eee8 6a86 	vfma.f32	s13, s17, s12
        } else if( i < (int)((n*0.272727272727273f) * (Lfloat)tr->n * invN)) { //was 12
2401630a:	ee67 7aa8 	vmul.f32	s15, s15, s17
2401630e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
24016312:	eefd 6ae6 	vcvt.s32.f32	s13, s13
24016316:	ee16 3a90 	vmov	r3, s13
2401631a:	4293      	cmp	r3, r2
2401631c:	dc04      	bgt.n	24016328 <tract_initToPool+0x258>
            diameter = 1.1f;
2401631e:	ee17 3a90 	vmov	r3, s15
24016322:	4293      	cmp	r3, r2
24016324:	fe33 7aa9 	vselgt.f32	s14, s7, s19
            tr->new_diameter[i] = diameter;
24016328:	6963      	ldr	r3, [r4, #20]
2401632a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
2401632e:	ed83 7a00 	vstr	s14, [r3]
            tr->target_diameter[i] =
24016332:	6923      	ldr	r3, [r4, #16]
24016334:	eb03 0382 	add.w	r3, r3, r2, lsl #2
24016338:	ed83 7a00 	vstr	s14, [r3]
            tr->rest_diameter[i] =
2401633c:	68e3      	ldr	r3, [r4, #12]
2401633e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
24016342:	ed83 7a00 	vstr	s14, [r3]
        tr->diameter[i] =
24016346:	68a3      	ldr	r3, [r4, #8]
24016348:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for(i = 0; i < tr->n; i++) {
2401634c:	3201      	adds	r2, #1
        tr->diameter[i] =
2401634e:	ed83 7a00 	vstr	s14, [r3]
    for(i = 0; i < tr->n; i++) {
24016352:	6863      	ldr	r3, [r4, #4]
24016354:	4293      	cmp	r3, r2
24016356:	dcc6      	bgt.n	240162e6 <tract_initToPool+0x216>
	for(i = 0; i < tr->nose_length; i++) {
24016358:	6b63      	ldr	r3, [r4, #52]	; 0x34
2401635a:	2b00      	cmp	r3, #0
2401635c:	dd2f      	ble.n	240163be <tract_initToPool+0x2ee>
		if(d < 1.0f) {
2401635e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
	for(i = 0; i < tr->nose_length; i++) {
24016362:	2300      	movs	r3, #0
			diameter = 0.5f + 1.5f*(2.0f-d);
24016364:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
		diameter = MIN(diameter, 1.9f);
24016368:	ed9f 4a39 	vldr	s8, [pc, #228]	; 24016450 <tract_initToPool+0x380>
			diameter = 0.5f + 1.5f*(2.0f-d);
2401636c:	eef7 3a08 	vmov.f32	s7, #120	; 0x3fc00000  1.5
			diameter = 0.4f + 1.6f * d;
24016370:	eddf 4a38 	vldr	s9, [pc, #224]	; 24016454 <tract_initToPool+0x384>
24016374:	ed9f 5a38 	vldr	s10, [pc, #224]	; 24016458 <tract_initToPool+0x388>
		d = 2.0f * ((Lfloat)i * invNoseLength);
24016378:	ee07 3a90 	vmov	s15, r3
			diameter = 0.4f + 1.6f * d;
2401637c:	eef0 6a45 	vmov.f32	s13, s10
		tr->nose_diameter[i] = diameter;
24016380:	6e62      	ldr	r2, [r4, #100]	; 0x64
		d = 2.0f * ((Lfloat)i * invNoseLength);
24016382:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24016386:	ee67 7a89 	vmul.f32	s15, s15, s18
2401638a:	ee37 7aa7 	vadd.f32	s14, s15, s15
		if(d < 1.0f) {
2401638e:	eef4 7ac6 	vcmpe.f32	s15, s12
			diameter = 0.5f + 1.5f*(2.0f-d);
24016392:	eef0 7a46 	vmov.f32	s15, s12
24016396:	ee73 5a47 	vsub.f32	s11, s6, s14
		if(d < 1.0f) {
2401639a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			diameter = 0.4f + 1.6f * d;
2401639e:	eee7 6a24 	vfma.f32	s13, s14, s9
			diameter = 0.5f + 1.5f*(2.0f-d);
240163a2:	eee5 7aa3 	vfma.f32	s15, s11, s7
		if(d < 1.0f) {
240163a6:	f140 80e4 	bpl.w	24016572 <tract_initToPool+0x4a2>
		tr->nose_diameter[i] = diameter;
240163aa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
		diameter = MIN(diameter, 1.9f);
240163ae:	fec6 6ac4 	vminnm.f32	s13, s13, s8
	for(i = 0; i < tr->nose_length; i++) {
240163b2:	3301      	adds	r3, #1
		tr->nose_diameter[i] = diameter;
240163b4:	edc2 6a00 	vstr	s13, [r2]
	for(i = 0; i < tr->nose_length; i++) {
240163b8:	6b62      	ldr	r2, [r4, #52]	; 0x34
240163ba:	429a      	cmp	r2, r3
240163bc:	dcdc      	bgt.n	24016378 <tract_initToPool+0x2a8>
	tSVF_initToPool(&tr->fricativeNoiseFilt[0], SVFTypeBandpass, 1010.0f, 0.5f, &m);
240163be:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
240163c2:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
240163c6:	ed9f 0a25 	vldr	s0, [pc, #148]	; 2401645c <tract_initToPool+0x38c>
240163ca:	2102      	movs	r1, #2
240163cc:	466a      	mov	r2, sp
240163ce:	f7fb f87d 	bl	240114cc <tSVF_initToPool>
	tSVF_initToPool(&tr->fricativeNoiseFilt[1], SVFTypeBandpass, 990.0f, 0.5f, &m);
240163d2:	f104 00ac 	add.w	r0, r4, #172	; 0xac
240163d6:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
240163da:	466a      	mov	r2, sp
240163dc:	ed9f 0a20 	vldr	s0, [pc, #128]	; 24016460 <tract_initToPool+0x390>
240163e0:	2102      	movs	r1, #2
240163e2:	f7fb f873 	bl	240114cc <tSVF_initToPool>
	tSVF_initToPool(&tr->aspirationNoiseFilt, SVFTypeBandpass, 500.0f, 0.5f, &m);
240163e6:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
240163ea:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
240163ee:	466a      	mov	r2, sp
240163f0:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 24016464 <tract_initToPool+0x394>
240163f4:	2102      	movs	r1, #2
240163f6:	f7fb f869 	bl	240114cc <tSVF_initToPool>
	tNoise_initToPool(&tr->whiteNoise, WhiteNoise, &m);
240163fa:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
240163fe:	466a      	mov	r2, sp
24016400:	2100      	movs	r1, #0
24016402:	f7fe f851 	bl	240144a8 <tNoise_initToPool>
    tract_calculate_reflections(&tr);
24016406:	a801      	add	r0, sp, #4
24016408:	f7ff fddc 	bl	24015fc4 <tract_calculate_reflections>

}

void tract_calculate_nose_reflections(tract* const t)
{
	_tract* tr = *t;
2401640c:	9c01      	ldr	r4, [sp, #4]
	int i;

    for(i = 0; i < tr->nose_length; i++) {
2401640e:	6b63      	ldr	r3, [r4, #52]	; 0x34
24016410:	2b00      	cmp	r3, #0
24016412:	dd5a      	ble.n	240164ca <tract_initToPool+0x3fa>
24016414:	2300      	movs	r3, #0
24016416:	e02b      	b.n	24016470 <tract_initToPool+0x3a0>
24016418:	3f22e8ba 	.word	0x3f22e8ba
2401641c:	3f3a2e8c 	.word	0x3f3a2e8c
24016420:	3e68ba2f 	.word	0x3e68ba2f
24016424:	3d8ba2e9 	.word	0x3d8ba2e9
24016428:	3d3a2e8c 	.word	0x3d3a2e8c
2401642c:	bf59999a 	.word	0xbf59999a
24016430:	3f62e8ba 	.word	0x3f62e8ba
24016434:	3ee66666 	.word	0x3ee66666
24016438:	43480000 	.word	0x43480000
2401643c:	3c23d70a 	.word	0x3c23d70a
24016440:	3e22e8ba 	.word	0x3e22e8ba
24016444:	3f19999a 	.word	0x3f19999a
24016448:	3e8ba2e9 	.word	0x3e8ba2e9
2401644c:	3f8ccccd 	.word	0x3f8ccccd
24016450:	3ff33333 	.word	0x3ff33333
24016454:	3fcccccd 	.word	0x3fcccccd
24016458:	3ecccccd 	.word	0x3ecccccd
2401645c:	447c8000 	.word	0x447c8000
24016460:	44778000 	.word	0x44778000
24016464:	43fa0000 	.word	0x43fa0000
24016468:	42800000 	.word	0x42800000
2401646c:	00000000 	.word	0x00000000
        tr->noseA[i] = tr->nose_diameter[i] * tr->nose_diameter[i];
24016470:	e9d4 1219 	ldrd	r1, r2, [r4, #100]	; 0x64
24016474:	eb01 0183 	add.w	r1, r1, r3, lsl #2
24016478:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for(i = 0; i < tr->nose_length; i++) {
2401647c:	3301      	adds	r3, #1
        tr->noseA[i] = tr->nose_diameter[i] * tr->nose_diameter[i];
2401647e:	edd1 7a00 	vldr	s15, [r1]
24016482:	ee67 7aa7 	vmul.f32	s15, s15, s15
24016486:	edc2 7a00 	vstr	s15, [r2]
    for(i = 0; i < tr->nose_length; i++) {
2401648a:	6b62      	ldr	r2, [r4, #52]	; 0x34
2401648c:	4293      	cmp	r3, r2
2401648e:	dbef      	blt.n	24016470 <tract_initToPool+0x3a0>
    }

    for(i = 1; i < tr->nose_length; i++) {
24016490:	2a01      	cmp	r2, #1
24016492:	dd1a      	ble.n	240164ca <tract_initToPool+0x3fa>
24016494:	2000      	movs	r0, #0
24016496:	2301      	movs	r3, #1
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) /
24016498:	6ea2      	ldr	r2, [r4, #104]	; 0x68
2401649a:	6e21      	ldr	r1, [r4, #96]	; 0x60
2401649c:	eb02 0c00 	add.w	ip, r2, r0
240164a0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
240164a4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    for(i = 1; i < tr->nose_length; i++) {
240164a8:	3301      	adds	r3, #1
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) /
240164aa:	ed92 7a00 	vldr	s14, [r2]
    for(i = 1; i < tr->nose_length; i++) {
240164ae:	3004      	adds	r0, #4
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) /
240164b0:	eddc 7a00 	vldr	s15, [ip]
240164b4:	ee77 6ac7 	vsub.f32	s13, s15, s14
            (tr->noseA[i-1] + tr->noseA[i]);
240164b8:	ee77 7a87 	vadd.f32	s15, s15, s14
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) /
240164bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240164c0:	ed81 7a00 	vstr	s14, [r1]
    for(i = 1; i < tr->nose_length; i++) {
240164c4:	6b62      	ldr	r2, [r4, #52]	; 0x34
240164c6:	4293      	cmp	r3, r2
240164c8:	dbe6      	blt.n	24016498 <tract_initToPool+0x3c8>
    tr->nose_diameter[0] = tr->velum_target;
240164ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
    tr->T = 1.0f / leaf->sampleRate;
240164cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    tr->nose_diameter[0] = tr->velum_target;
240164d0:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
240164d4:	201c      	movs	r0, #28
    tr->block_time = 64.0f / leaf->sampleRate;
240164d6:	ed1f 6a1c 	vldr	s12, [pc, #-112]	; 24016468 <tract_initToPool+0x398>
        tr->tpool->pool[i]->is_free = 1;
240164da:	2601      	movs	r6, #1
    tr->nose_diameter[0] = tr->velum_target;
240164dc:	601a      	str	r2, [r3, #0]
    tr->block_time = 64.0f / leaf->sampleRate;
240164de:	ed95 7a00 	vldr	s14, [r5]
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
240164e2:	9900      	ldr	r1, [sp, #0]
    tr->block_time = 64.0f / leaf->sampleRate;
240164e4:	eec6 7a07 	vdiv.f32	s15, s12, s14
        tr->tpool->pool[i]->time_alive = 0;
240164e8:	ed1f 8a20 	vldr	s16, [pc, #-128]	; 2401646c <tract_initToPool+0x39c>
    tr->block_time = 64.0f / leaf->sampleRate;
240164ec:	edc4 7a29 	vstr	s15, [r4, #164]	; 0xa4
    tr->T = 1.0f / leaf->sampleRate;
240164f0:	ed95 7a00 	vldr	s14, [r5]
240164f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
240164f8:	edc4 7a33 	vstr	s15, [r4, #204]	; 0xcc
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
240164fc:	f7fd fd0c 	bl	24013f18 <mpool_alloc>
    tr->tpool->size = 0;
24016500:	2300      	movs	r3, #0
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
24016502:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
    for(i = 0; i < MAX_TRANSIENTS; i++) {
24016506:	461d      	mov	r5, r3
    tr->tpool->size = 0;
24016508:	6143      	str	r3, [r0, #20]
    tr->tpool->next_free = 0;
2401650a:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
2401650e:	6193      	str	r3, [r2, #24]
    	tr->tpool->pool[i] = (_transient*) mpool_alloc(sizeof(_transient), m);
24016510:	f8d4 70c8 	ldr.w	r7, [r4, #200]	; 0xc8
24016514:	2020      	movs	r0, #32
24016516:	9900      	ldr	r1, [sp, #0]
24016518:	f7fd fcfe 	bl	24013f18 <mpool_alloc>
2401651c:	f847 0025 	str.w	r0, [r7, r5, lsl #2]
        tr->tpool->pool[i]->is_free = 1;
24016520:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
        tr->tpool->pool[i]->position = 0;
24016524:	2200      	movs	r2, #0
        tr->tpool->pool[i]->is_free = 1;
24016526:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
2401652a:	751e      	strb	r6, [r3, #20]
        tr->tpool->pool[i]->id = i;
2401652c:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
24016530:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
24016534:	619d      	str	r5, [r3, #24]
        tr->tpool->pool[i]->position = 0;
24016536:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
2401653a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
2401653e:	601a      	str	r2, [r3, #0]
        tr->tpool->pool[i]->time_alive = 0;
24016540:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
24016544:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
24016548:	ed83 8a01 	vstr	s16, [r3, #4]
        tr->tpool->pool[i]->strength = 0;
2401654c:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
24016550:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
24016554:	ed83 8a03 	vstr	s16, [r3, #12]
        tr->tpool->pool[i]->exponent = 0;
24016558:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
2401655c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    for(i = 0; i < MAX_TRANSIENTS; i++) {
24016560:	3501      	adds	r5, #1
24016562:	2d04      	cmp	r5, #4
        tr->tpool->pool[i]->exponent = 0;
24016564:	ed83 8a04 	vstr	s16, [r3, #16]
    for(i = 0; i < MAX_TRANSIENTS; i++) {
24016568:	d1d2      	bne.n	24016510 <tract_initToPool+0x440>
}
2401656a:	b003      	add	sp, #12
2401656c:	ecbd 8b04 	vpop	{d8-d9}
24016570:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tr->nose_diameter[i] = diameter;
24016572:	eb02 0283 	add.w	r2, r2, r3, lsl #2
		diameter = MIN(diameter, 1.9f);
24016576:	fec7 7ac4 	vminnm.f32	s15, s15, s8
	for(i = 0; i < tr->nose_length; i++) {
2401657a:	3301      	adds	r3, #1
		tr->nose_diameter[i] = diameter;
2401657c:	edc2 7a00 	vstr	s15, [r2]
	for(i = 0; i < tr->nose_length; i++) {
24016580:	6b62      	ldr	r2, [r4, #52]	; 0x34
24016582:	4293      	cmp	r3, r2
24016584:	f6ff aef8 	blt.w	24016378 <tract_initToPool+0x2a8>
24016588:	e719      	b.n	240163be <tract_initToPool+0x2ee>
2401658a:	bf00      	nop

2401658c <tract_reshape>:
{
2401658c:	b430      	push	{r4, r5}
	_tract* tr = *t;
2401658e:	6802      	ldr	r2, [r0, #0]
    for(i = 0; i < tr->n; i++) {
24016590:	6853      	ldr	r3, [r2, #4]
    amount = tr->block_time * tr->movement_speed;
24016592:	ed92 5a29 	vldr	s10, [r2, #164]	; 0xa4
24016596:	edd2 7a26 	vldr	s15, [r2, #152]	; 0x98
    for(i = 0; i < tr->n; i++) {
2401659a:	2b00      	cmp	r3, #0
    amount = tr->block_time * tr->movement_speed;
2401659c:	ee25 5a27 	vmul.f32	s10, s10, s15
    for(i = 0; i < tr->n; i++) {
240165a0:	f340 80ab 	ble.w	240166fa <tract_reshape+0x16e>
        tr->diameter[i] = move_towards(diameter, target_diameter,
240165a4:	eddf 2a5f 	vldr	s5, [pc, #380]	; 24016724 <tract_reshape+0x198>
240165a8:	ee75 3a05 	vadd.f32	s7, s10, s10
    current_obstruction = -1;
240165ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    for(i = 0; i < tr->n; i++) {
240165b0:	2300      	movs	r3, #0
        tr->diameter[i] = move_towards(diameter, target_diameter,
240165b2:	ee25 4a22 	vmul.f32	s8, s10, s5
        if(diameter < 0.001f) current_obstruction = i;
240165b6:	eddf 4a5c 	vldr	s9, [pc, #368]	; 24016728 <tract_reshape+0x19c>
                0.6f+0.4f*(i - tr->nose_start)/(tr->tip_start - tr->nose_start);
240165ba:	ed9f 3a5c 	vldr	s6, [pc, #368]	; 2401672c <tract_reshape+0x1a0>
        diameter = tr->diameter[i];
240165be:	6891      	ldr	r1, [r2, #8]
        tr->diameter[i] = move_towards(diameter, target_diameter,
240165c0:	eef0 7a44 	vmov.f32	s15, s8
        if(i < tr->nose_start) slow_return = 0.6f;
240165c4:	6b90      	ldr	r0, [r2, #56]	; 0x38
        diameter = tr->diameter[i];
240165c6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
        target_diameter = tr->target_diameter[i];
240165ca:	6915      	ldr	r5, [r2, #16]
        diameter = tr->diameter[i];
240165cc:	ed91 7a00 	vldr	s14, [r1]
        target_diameter = tr->target_diameter[i];
240165d0:	eb05 0c83 	add.w	ip, r5, r3, lsl #2
        if(diameter < 0.001f) current_obstruction = i;
240165d4:	eeb4 7a64 	vcmp.f32	s14, s9
        target_diameter = tr->target_diameter[i];
240165d8:	ed9c 6a00 	vldr	s12, [ip]
        if(diameter < 0.001f) current_obstruction = i;
240165dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240165e0:	bf48      	it	mi
240165e2:	461c      	movmi	r4, r3
        if(i < tr->nose_start) slow_return = 0.6f;
240165e4:	4298      	cmp	r0, r3
240165e6:	dc16      	bgt.n	24016616 <tract_reshape+0x8a>
                0.6f+0.4f*(i - tr->nose_start)/(tr->tip_start - tr->nose_start);
240165e8:	1a1d      	subs	r5, r3, r0
        else if(i >= tr->tip_start) slow_return = 1.0f;
240165ea:	eef0 7a45 	vmov.f32	s15, s10
                0.6f+0.4f*(i - tr->nose_start)/(tr->tip_start - tr->nose_start);
240165ee:	ee05 5a90 	vmov	s11, r5
        else if(i >= tr->tip_start) slow_return = 1.0f;
240165f2:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
                0.6f+0.4f*(i - tr->nose_start)/(tr->tip_start - tr->nose_start);
240165f4:	1a28      	subs	r0, r5, r0
240165f6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
        else if(i >= tr->tip_start) slow_return = 1.0f;
240165fa:	42ab      	cmp	r3, r5
                0.6f+0.4f*(i - tr->nose_start)/(tr->tip_start - tr->nose_start);
240165fc:	ee06 0a90 	vmov	s13, r0
24016600:	ee65 5a83 	vmul.f32	s11, s11, s6
24016604:	eef8 6ae6 	vcvt.f32.s32	s13, s13
        else if(i >= tr->tip_start) slow_return = 1.0f;
24016608:	da05      	bge.n	24016616 <tract_reshape+0x8a>
                0.6f+0.4f*(i - tr->nose_start)/(tr->tip_start - tr->nose_start);
2401660a:	eec5 7aa6 	vdiv.f32	s15, s11, s13
            slow_return =
2401660e:	ee77 7aa2 	vadd.f32	s15, s15, s5
        tr->diameter[i] = move_towards(diameter, target_diameter,
24016612:	ee67 7a85 	vmul.f32	s15, s15, s10

Lfloat move_towards(Lfloat current, Lfloat target,
        Lfloat amt_up, Lfloat amt_down)
{
    Lfloat tmp;
    if(current < target) {
24016616:	eeb4 7ac6 	vcmpe.f32	s14, s12
        tmp = current + amt_up;
2401661a:	ee77 7a27 	vadd.f32	s15, s14, s15
        return MIN(tmp, target);
    } else {
        tmp = current - amt_down;
2401661e:	ee77 6a63 	vsub.f32	s13, s14, s7
    if(current < target) {
24016622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return MIN(tmp, target);
24016626:	fec7 7ac6 	vminnm.f32	s15, s15, s12
        return MAX(tmp, target);
2401662a:	fec6 6a86 	vmaxnm.f32	s13, s13, s12
    if(current < target) {
2401662e:	d52d      	bpl.n	2401668c <tract_reshape+0x100>
    for(i = 0; i < tr->n; i++) {
24016630:	3301      	adds	r3, #1
        tr->diameter[i] = move_towards(diameter, target_diameter,
24016632:	edc1 7a00 	vstr	s15, [r1]
    for(i = 0; i < tr->n; i++) {
24016636:	6851      	ldr	r1, [r2, #4]
24016638:	428b      	cmp	r3, r1
2401663a:	dbc0      	blt.n	240165be <tract_reshape+0x32>
    if(tr->last_obstruction > -1 && current_obstruction == -1 &&
2401663c:	f1a4 31ff 	sub.w	r1, r4, #4294967295	; 0xffffffff
24016640:	fab1 f181 	clz	r1, r1
24016644:	0949      	lsrs	r1, r1, #5
24016646:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
2401664a:	2b00      	cmp	r3, #0
2401664c:	db00      	blt.n	24016650 <tract_reshape+0xc4>
2401664e:	bb59      	cbnz	r1, 240166a8 <tract_reshape+0x11c>
    tr->nose_diameter[0] = move_towards(tr->nose_diameter[0], tr->velum_target,
24016650:	6e53      	ldr	r3, [r2, #100]	; 0x64
24016652:	edd2 7a21 	vldr	s15, [r2, #132]	; 0x84
    tr->last_obstruction = current_obstruction;
24016656:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
    tr->nose_diameter[0] = move_towards(tr->nose_diameter[0], tr->velum_target,
2401665a:	ed93 7a00 	vldr	s14, [r3]
    if(current < target) {
2401665e:	eeb4 7ae7 	vcmpe.f32	s14, s15
24016662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016666:	d518      	bpl.n	2401669a <tract_reshape+0x10e>
        tmp = current + amt_up;
24016668:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
2401666c:	eea5 7a26 	vfma.f32	s14, s10, s13
        return MIN(tmp, target);
24016670:	fec7 7ac7 	vminnm.f32	s15, s15, s14
    tr->nose_diameter[0] = move_towards(tr->nose_diameter[0], tr->velum_target,
24016674:	edc3 7a00 	vstr	s15, [r3]
    tr->noseA[0] = tr->nose_diameter[0] * tr->nose_diameter[0];
24016678:	e9d2 1319 	ldrd	r1, r3, [r2, #100]	; 0x64
2401667c:	edd1 7a00 	vldr	s15, [r1]
24016680:	ee67 7aa7 	vmul.f32	s15, s15, s15
24016684:	edc3 7a00 	vstr	s15, [r3]
}
24016688:	bc30      	pop	{r4, r5}
2401668a:	4770      	bx	lr
    for(i = 0; i < tr->n; i++) {
2401668c:	3301      	adds	r3, #1
        tr->diameter[i] = move_towards(diameter, target_diameter,
2401668e:	edc1 6a00 	vstr	s13, [r1]
    for(i = 0; i < tr->n; i++) {
24016692:	6851      	ldr	r1, [r2, #4]
24016694:	4299      	cmp	r1, r3
24016696:	dc92      	bgt.n	240165be <tract_reshape+0x32>
24016698:	e7d0      	b.n	2401663c <tract_reshape+0xb0>
        tmp = current - amt_down;
2401669a:	eddf 6a25 	vldr	s13, [pc, #148]	; 24016730 <tract_reshape+0x1a4>
2401669e:	eea5 7a66 	vfms.f32	s14, s10, s13
        return MAX(tmp, target);
240166a2:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
240166a6:	e7e5      	b.n	24016674 <tract_reshape+0xe8>
            tr->noseA[0] < 0.05f) {
240166a8:	6e91      	ldr	r1, [r2, #104]	; 0x68
    if(tr->last_obstruction > -1 && current_obstruction == -1 &&
240166aa:	eddf 7a22 	vldr	s15, [pc, #136]	; 24016734 <tract_reshape+0x1a8>
240166ae:	ed91 7a00 	vldr	s14, [r1]
240166b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
240166b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240166ba:	d5c9      	bpl.n	24016650 <tract_reshape+0xc4>
	_transient_pool* pool = *po;
240166bc:	f8d2 10c8 	ldr.w	r1, [r2, #200]	; 0xc8
    if(pool->size == MAX_TRANSIENTS) return 0;
240166c0:	6948      	ldr	r0, [r1, #20]
240166c2:	2804      	cmp	r0, #4
240166c4:	d0c4      	beq.n	24016650 <tract_reshape+0xc4>
    free_id = pool->next_free;
240166c6:	6988      	ldr	r0, [r1, #24]
    if(free_id == -1) {
240166c8:	1c45      	adds	r5, r0, #1
240166ca:	d01a      	beq.n	24016702 <tract_reshape+0x176>
    t = pool->pool[free_id];
240166cc:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    t->next = pool->root;
240166d0:	690d      	ldr	r5, [r1, #16]
240166d2:	61c5      	str	r5, [r0, #28]
    pool->size++;
240166d4:	694d      	ldr	r5, [r1, #20]
    pool->root = t;
240166d6:	6108      	str	r0, [r1, #16]
    pool->size++;
240166d8:	3501      	adds	r5, #1
240166da:	614d      	str	r5, [r1, #20]
    t->is_free = 0;
240166dc:	2500      	movs	r5, #0
    t->position = position;
240166de:	6003      	str	r3, [r0, #0]
    pool->next_free = -1;
240166e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    t->is_free = 0;
240166e4:	7505      	strb	r5, [r0, #20]
    t->time_alive = 0.0f;
240166e6:	2500      	movs	r5, #0
240166e8:	6045      	str	r5, [r0, #4]
    t->lifetime = 0.2f;
240166ea:	4d13      	ldr	r5, [pc, #76]	; (24016738 <tract_reshape+0x1ac>)
240166ec:	6085      	str	r5, [r0, #8]
    t->strength = 0.3f;
240166ee:	4d13      	ldr	r5, [pc, #76]	; (2401673c <tract_reshape+0x1b0>)
240166f0:	60c5      	str	r5, [r0, #12]
    t->exponent = 200.0f;
240166f2:	4d13      	ldr	r5, [pc, #76]	; (24016740 <tract_reshape+0x1b4>)
240166f4:	6105      	str	r5, [r0, #16]
    pool->next_free = -1;
240166f6:	618b      	str	r3, [r1, #24]
    return 0;
240166f8:	e7aa      	b.n	24016650 <tract_reshape+0xc4>
    for(i = 0; i < tr->n; i++) {
240166fa:	2101      	movs	r1, #1
    current_obstruction = -1;
240166fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
24016700:	e7a1      	b.n	24016646 <tract_reshape+0xba>
            if(pool->pool[i]->is_free) {
24016702:	6808      	ldr	r0, [r1, #0]
24016704:	7d05      	ldrb	r5, [r0, #20]
24016706:	2d00      	cmp	r5, #0
24016708:	d1e2      	bne.n	240166d0 <tract_reshape+0x144>
2401670a:	6848      	ldr	r0, [r1, #4]
2401670c:	7d05      	ldrb	r5, [r0, #20]
2401670e:	2d00      	cmp	r5, #0
24016710:	d1de      	bne.n	240166d0 <tract_reshape+0x144>
24016712:	6888      	ldr	r0, [r1, #8]
24016714:	7d05      	ldrb	r5, [r0, #20]
24016716:	2d00      	cmp	r5, #0
24016718:	d1da      	bne.n	240166d0 <tract_reshape+0x144>
2401671a:	68c8      	ldr	r0, [r1, #12]
2401671c:	7d05      	ldrb	r5, [r0, #20]
2401671e:	2d00      	cmp	r5, #0
24016720:	d096      	beq.n	24016650 <tract_reshape+0xc4>
24016722:	e7d5      	b.n	240166d0 <tract_reshape+0x144>
24016724:	3f19999a 	.word	0x3f19999a
24016728:	3a83126f 	.word	0x3a83126f
2401672c:	3ecccccd 	.word	0x3ecccccd
24016730:	3dcccccd 	.word	0x3dcccccd
24016734:	3d4ccccd 	.word	0x3d4ccccd
24016738:	3e4ccccd 	.word	0x3e4ccccd
2401673c:	3e99999a 	.word	0x3e99999a
24016740:	43480000 	.word	0x43480000

24016744 <tract_addTurbulenceNoiseAtPosition>:
{
24016744:	b538      	push	{r3, r4, r5, lr}
24016746:	ed2d 8b06 	vpush	{d8-d10}
2401674a:	eef0 8a60 	vmov.f32	s17, s1
	Lfloat mapped = LEAF_map(diameter, 0.38f, 0.245f, 0.0f, 1.0f);
2401674e:	eddf 1a3a 	vldr	s3, [pc, #232]	; 24016838 <tract_addTurbulenceNoiseAtPosition+0xf4>
{
24016752:	eeb0 9a41 	vmov.f32	s18, s2
	Lfloat mapped = LEAF_map(diameter, 0.38f, 0.245f, 0.0f, 1.0f);
24016756:	eddf 0a39 	vldr	s1, [pc, #228]	; 2401683c <tract_addTurbulenceNoiseAtPosition+0xf8>
2401675a:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
2401675e:	ed9f 1a38 	vldr	s2, [pc, #224]	; 24016840 <tract_addTurbulenceNoiseAtPosition+0xfc>
	int i = (int)floorf(position);
24016762:	fefb 7a68 	vrintm.f32	s15, s17
24016766:	eefd 7ae7 	vcvt.s32.f32	s15, s15
{
2401676a:	eeb0 8a40 	vmov.f32	s16, s0
	_tract* tr = *t;
2401676e:	6805      	ldr	r5, [r0, #0]
	Lfloat mapped = LEAF_map(diameter, 0.38f, 0.245f, 0.0f, 1.0f);
24016770:	eeb0 0a49 	vmov.f32	s0, s18
	int i = (int)floorf(position);
24016774:	ee17 4a90 	vmov	r4, s15
	Lfloat mapped = LEAF_map(diameter, 0.38f, 0.245f, 0.0f, 1.0f);
24016778:	f7fc ffe0 	bl	2401373c <LEAF_map>
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
2401677c:	eddf 7a31 	vldr	s15, [pc, #196]	; 24016844 <tract_addTurbulenceNoiseAtPosition+0x100>
24016780:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
	Lfloat delta = position - i;
24016784:	ee07 4a10 	vmov	s14, r4
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
24016788:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
2401678c:	ee77 7ac9 	vsub.f32	s15, s15, s18
24016790:	ed9f 0a29 	vldr	s0, [pc, #164]	; 24016838 <tract_addTurbulenceNoiseAtPosition+0xf4>
	Lfloat delta = position - i;
24016794:	eeb8 aac7 	vcvt.f32.s32	s20, s14
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
24016798:	ee67 0aa0 	vmul.f32	s1, s15, s1
2401679c:	f01d f89c 	bl	240338d8 <__LEAF_clip_veneer>
	Lfloat openness = LEAF_clip(0.0f, 30.0f * (diameter), 1.0f);
240167a0:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
240167a4:	eef0 9a40 	vmov.f32	s19, s0
	Lfloat openness = LEAF_clip(0.0f, 30.0f * (diameter), 1.0f);
240167a8:	ed9f 0a23 	vldr	s0, [pc, #140]	; 24016838 <tract_addTurbulenceNoiseAtPosition+0xf4>
240167ac:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240167b0:	ee69 0a20 	vmul.f32	s1, s18, s1
240167b4:	f01d f890 	bl	240338d8 <__LEAF_clip_veneer>
	Lfloat noise0 = turbulenceNoise * (1.0f - delta) * thinness0 * openness * 0.5f;
240167b8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	if ((i + 1) < tr->n) {
240167bc:	686b      	ldr	r3, [r5, #4]
240167be:	1c62      	adds	r2, r4, #1
240167c0:	ee68 7a27 	vmul.f32	s15, s16, s15
240167c4:	429a      	cmp	r2, r3
240167c6:	ee67 7aa9 	vmul.f32	s15, s15, s19
240167ca:	ee27 0a80 	vmul.f32	s0, s15, s0
240167ce:	da18      	bge.n	24016802 <tract_addTurbulenceNoiseAtPosition+0xbe>
	Lfloat noise0 = turbulenceNoise * (1.0f - delta) * thinness0 * openness * 0.5f;
240167d0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
		tr->R[i + 1] += noise0;
240167d4:	69ab      	ldr	r3, [r5, #24]
240167d6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	Lfloat noise0 = turbulenceNoise * (1.0f - delta) * thinness0 * openness * 0.5f;
240167da:	ee77 7ae8 	vsub.f32	s15, s15, s17
		tr->R[i + 1] += noise0;
240167de:	ed93 7a00 	vldr	s14, [r3]
	Lfloat noise0 = turbulenceNoise * (1.0f - delta) * thinness0 * openness * 0.5f;
240167e2:	ee77 7a8a 	vadd.f32	s15, s15, s20
		tr->R[i + 1] += noise0;
240167e6:	eea7 7a80 	vfma.f32	s14, s15, s0
240167ea:	ed83 7a00 	vstr	s14, [r3]
		tr->L[i + 1] += noise0;
240167ee:	69eb      	ldr	r3, [r5, #28]
240167f0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
240167f4:	ed93 7a00 	vldr	s14, [r3]
240167f8:	eea7 7a80 	vfma.f32	s14, s15, s0
240167fc:	ed83 7a00 	vstr	s14, [r3]
	if ((i + 2) < tr->n) {
24016800:	686b      	ldr	r3, [r5, #4]
24016802:	3402      	adds	r4, #2
24016804:	429c      	cmp	r4, r3
24016806:	da13      	bge.n	24016830 <tract_addTurbulenceNoiseAtPosition+0xec>
		tr->R[i + 2] += noise1;
24016808:	69ab      	ldr	r3, [r5, #24]
	Lfloat delta = position - i;
2401680a:	ee78 8aca 	vsub.f32	s17, s17, s20
		tr->R[i + 2] += noise1;
2401680e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
24016812:	edd3 7a00 	vldr	s15, [r3]
24016816:	eee8 7a80 	vfma.f32	s15, s17, s0
2401681a:	edc3 7a00 	vstr	s15, [r3]
		tr->L[i + 2] += noise1;
2401681e:	69eb      	ldr	r3, [r5, #28]
24016820:	eb03 0384 	add.w	r3, r3, r4, lsl #2
24016824:	edd3 7a00 	vldr	s15, [r3]
24016828:	eee8 7a80 	vfma.f32	s15, s17, s0
2401682c:	edc3 7a00 	vstr	s15, [r3]
 }
24016830:	ecbd 8b06 	vpop	{d8-d10}
24016834:	bd38      	pop	{r3, r4, r5, pc}
24016836:	bf00      	nop
24016838:	00000000 	.word	0x00000000
2401683c:	3ec28f5c 	.word	0x3ec28f5c
24016840:	3e7ae148 	.word	0x3e7ae148
24016844:	3db851ec 	.word	0x3db851ec

24016848 <tract_compute>:
{
24016848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2401684c:	ed2d 8b04 	vpush	{d8-d9}
	_tract* tr = *t;
24016850:	6804      	ldr	r4, [r0, #0]
{
24016852:	eef0 9a40 	vmov.f32	s19, s0
24016856:	eeb0 8a60 	vmov.f32	s16, s1
2401685a:	b082      	sub	sp, #8
    thepool = tr->tpool;
2401685c:	f8d4 60c8 	ldr.w	r6, [r4, #200]	; 0xc8
	n = thepool->root;
24016860:	e9d6 5a04 	ldrd	r5, sl, [r6, #16]
	for(i = 0; i < current_size; i++) {
24016864:	f1ba 0f00 	cmp.w	sl, #0
24016868:	dd60      	ble.n	2401692c <tract_compute+0xe4>
2401686a:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
2401686e:	f04f 0900 	mov.w	r9, #0
            n->next->is_free = 1;
24016872:	f04f 0801 	mov.w	r8, #1
24016876:	e004      	b.n	24016882 <tract_compute+0x3a>
	for(i = 0; i < current_size; i++) {
24016878:	f109 0901 	add.w	r9, r9, #1
		n = n->next;
2401687c:	69ed      	ldr	r5, [r5, #28]
	for(i = 0; i < current_size; i++) {
2401687e:	45ca      	cmp	sl, r9
24016880:	d054      	beq.n	2401692c <tract_compute+0xe4>
		amp = n->strength * fastPowf(2.0f, -1.0f * n->exponent * n->time_alive);
24016882:	edd5 7a04 	vldr	s15, [r5, #16]
24016886:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
2401688a:	edd5 0a01 	vldr	s1, [r5, #4]
2401688e:	edd5 8a03 	vldr	s17, [r5, #12]
24016892:	ee60 0ae7 	vnmul.f32	s1, s1, s15
24016896:	f7fc fff9 	bl	2401388c <fastPowf>
		tr->L[n->position] += amp * 0.5f;
2401689a:	69e3      	ldr	r3, [r4, #28]
2401689c:	682a      	ldr	r2, [r5, #0]
2401689e:	ee20 0a09 	vmul.f32	s0, s0, s18
240168a2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
240168a6:	edd3 7a00 	vldr	s15, [r3]
240168aa:	eee8 7a80 	vfma.f32	s15, s17, s0
240168ae:	edc3 7a00 	vstr	s15, [r3]
		tr->R[n->position] += amp * 0.5f;
240168b2:	69a3      	ldr	r3, [r4, #24]
240168b4:	682a      	ldr	r2, [r5, #0]
240168b6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
240168ba:	edd3 7a00 	vldr	s15, [r3]
240168be:	eee8 7a80 	vfma.f32	s15, s17, s0
240168c2:	edc3 7a00 	vstr	s15, [r3]
		n->time_alive += tr->T * 0.5f;
240168c6:	edd4 6a33 	vldr	s13, [r4, #204]	; 0xcc
240168ca:	edd5 7a01 	vldr	s15, [r5, #4]
		if(n->time_alive > n->lifetime) {
240168ce:	ed95 7a02 	vldr	s14, [r5, #8]
		n->time_alive += tr->T * 0.5f;
240168d2:	eee6 7a89 	vfma.f32	s15, s13, s18
		if(n->time_alive > n->lifetime) {
240168d6:	eef4 7ac7 	vcmpe.f32	s15, s14
		n->time_alive += tr->T * 0.5f;
240168da:	edc5 7a01 	vstr	s15, [r5, #4]
		if(n->time_alive > n->lifetime) {
240168de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240168e2:	ddc9      	ble.n	24016878 <tract_compute+0x30>
			 remove_transient(&thepool, n->id);
240168e4:	69a8      	ldr	r0, [r5, #24]
    n = pool->root;
240168e6:	6933      	ldr	r3, [r6, #16]
    pool->next_free = id;
240168e8:	61b0      	str	r0, [r6, #24]
    if(id == n->id) {
240168ea:	699a      	ldr	r2, [r3, #24]
240168ec:	4290      	cmp	r0, r2
240168ee:	f000 817d 	beq.w	24016bec <tract_compute+0x3a4>
    for(i = 0; i < pool->size; i++) {
240168f2:	6971      	ldr	r1, [r6, #20]
240168f4:	2900      	cmp	r1, #0
240168f6:	ddbf      	ble.n	24016878 <tract_compute+0x30>
240168f8:	2200      	movs	r2, #0
240168fa:	e001      	b.n	24016900 <tract_compute+0xb8>
240168fc:	428a      	cmp	r2, r1
240168fe:	d0bb      	beq.n	24016878 <tract_compute+0x30>
        n = n->next;
24016900:	469e      	mov	lr, r3
        if(n->next->id == id) {
24016902:	69db      	ldr	r3, [r3, #28]
    for(i = 0; i < pool->size; i++) {
24016904:	3201      	adds	r2, #1
        if(n->next->id == id) {
24016906:	699f      	ldr	r7, [r3, #24]
24016908:	42b8      	cmp	r0, r7
2401690a:	d1f7      	bne.n	240168fc <tract_compute+0xb4>
            pool->size--;
2401690c:	1e4b      	subs	r3, r1, #1
	for(i = 0; i < current_size; i++) {
2401690e:	f109 0901 	add.w	r9, r9, #1
            pool->size--;
24016912:	6173      	str	r3, [r6, #20]
	for(i = 0; i < current_size; i++) {
24016914:	45ca      	cmp	sl, r9
            n->next->is_free = 1;
24016916:	f8de 301c 	ldr.w	r3, [lr, #28]
2401691a:	f883 8014 	strb.w	r8, [r3, #20]
            n->next = n->next->next;
2401691e:	f8de 301c 	ldr.w	r3, [lr, #28]
24016922:	69db      	ldr	r3, [r3, #28]
24016924:	f8ce 301c 	str.w	r3, [lr, #28]
		n = n->next;
24016928:	69ed      	ldr	r5, [r5, #28]
	for(i = 0; i < current_size; i++) {
2401692a:	d1aa      	bne.n	24016882 <tract_compute+0x3a>
		Lfloat turbulenceNoise = tSVF_tick(&tr->fricativeNoiseFilt[i], tNoise_tick(&tr->whiteNoise) * 0.28f);
2401692c:	eddf 8ab2 	vldr	s17, [pc, #712]	; 24016bf8 <tract_compute+0x3b0>
24016930:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
	_tract* tr = *t;
24016934:	9401      	str	r4, [sp, #4]
		Lfloat turbulenceNoise = tSVF_tick(&tr->fricativeNoiseFilt[i], tNoise_tick(&tr->whiteNoise) * 0.28f);
24016936:	f7fd fdc7 	bl	240144c8 <tNoise_tick>
2401693a:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
2401693e:	ee20 0a28 	vmul.f32	s0, s0, s17
24016942:	f7fa fe4b 	bl	240115dc <tSVF_tick>
		tract_addTurbulenceNoiseAtPosition(&tr, turbulenceNoise, tr->turbuluencePointPosition[i], tr->turbuluencePointDiameter[i]);
24016946:	ed94 1a30 	vldr	s2, [r4, #192]	; 0xc0
2401694a:	edd4 0a2e 	vldr	s1, [r4, #184]	; 0xb8
2401694e:	a801      	add	r0, sp, #4
24016950:	f7ff fef8 	bl	24016744 <tract_addTurbulenceNoiseAtPosition>
		Lfloat turbulenceNoise = tSVF_tick(&tr->fricativeNoiseFilt[i], tNoise_tick(&tr->whiteNoise) * 0.28f);
24016954:	9d01      	ldr	r5, [sp, #4]
24016956:	f105 00b4 	add.w	r0, r5, #180	; 0xb4
2401695a:	f7fd fdb5 	bl	240144c8 <tNoise_tick>
2401695e:	f105 00ac 	add.w	r0, r5, #172	; 0xac
24016962:	ee20 0a28 	vmul.f32	s0, s0, s17
24016966:	f7fa fe39 	bl	240115dc <tSVF_tick>
		tract_addTurbulenceNoiseAtPosition(&tr, turbulenceNoise, tr->turbuluencePointPosition[i], tr->turbuluencePointDiameter[i]);
2401696a:	ed95 1a31 	vldr	s2, [r5, #196]	; 0xc4
2401696e:	edd5 0a2f 	vldr	s1, [r5, #188]	; 0xbc
24016972:	a801      	add	r0, sp, #4
24016974:	f7ff fee6 	bl	24016744 <tract_addTurbulenceNoiseAtPosition>
    tr->junction_outR[0] = tr->L[0] * tr->glottal_reflection + in;
24016978:	69e3      	ldr	r3, [r4, #28]
2401697a:	edd4 7a22 	vldr	s15, [r4, #136]	; 0x88
2401697e:	ed93 7a00 	vldr	s14, [r3]
    tr->junction_outL[tr->n] = tr->R[tr->n - 1] * tr->lip_reflection;
24016982:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
    tr->junction_outR[0] = tr->L[0] * tr->glottal_reflection + in;
24016986:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
24016988:	eee7 9a27 	vfma.f32	s19, s14, s15
2401698c:	edc2 9a00 	vstr	s19, [r2]
    tr->junction_outL[tr->n] = tr->R[tr->n - 1] * tr->lip_reflection;
24016990:	6862      	ldr	r2, [r4, #4]
24016992:	69a1      	ldr	r1, [r4, #24]
24016994:	4413      	add	r3, r2
24016996:	ed94 7a23 	vldr	s14, [r4, #140]	; 0x8c
2401699a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
2401699c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
240169a0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
240169a4:	edd1 7a00 	vldr	s15, [r1]
240169a8:	ee67 7a87 	vmul.f32	s15, s15, s14
240169ac:	edc2 7a01 	vstr	s15, [r2, #4]
    for(i = 1; i < tr->n; i++) {
240169b0:	6863      	ldr	r3, [r4, #4]
240169b2:	2b01      	cmp	r3, #1
240169b4:	dd30      	ble.n	24016a18 <tract_compute+0x1d0>
    r = tr->new_reflection_left * (1.0f - lambda) + tr->reflection_left*lambda;
240169b6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
240169ba:	2304      	movs	r3, #4
    for(i = 1; i < tr->n; i++) {
240169bc:	2501      	movs	r5, #1
    r = tr->new_reflection_left * (1.0f - lambda) + tr->reflection_left*lambda;
240169be:	ee75 5ac8 	vsub.f32	s11, s11, s16
    for(i = 1; i < tr->n; i++) {
240169c2:	3501      	adds	r5, #1
        r = tr->reflection[i] * (1 - lambda) + tr->new_reflection[i] * lambda;
240169c4:	e9d4 0608 	ldrd	r0, r6, [r4, #32]
        w = r * (tr->R[i - 1] + tr->L[i]);
240169c8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
        r = tr->reflection[i] * (1 - lambda) + tr->new_reflection[i] * lambda;
240169cc:	441e      	add	r6, r3
240169ce:	4418      	add	r0, r3
        w = r * (tr->R[i - 1] + tr->L[i]);
240169d0:	4419      	add	r1, r3
240169d2:	441a      	add	r2, r3
        r = tr->reflection[i] * (1 - lambda) + tr->new_reflection[i] * lambda;
240169d4:	edd6 7a00 	vldr	s15, [r6]
240169d8:	ed90 6a00 	vldr	s12, [r0]
240169dc:	ee68 7a27 	vmul.f32	s15, s16, s15
        w = r * (tr->R[i - 1] + tr->L[i]);
240169e0:	ed51 6a01 	vldr	s13, [r1, #-4]
240169e4:	ed92 7a00 	vldr	s14, [r2]
        tr->junction_outR[i] = tr->R[i - 1] - w;
240169e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        r = tr->reflection[i] * (1 - lambda) + tr->new_reflection[i] * lambda;
240169ea:	eee6 7a25 	vfma.f32	s15, s12, s11
        w = r * (tr->R[i - 1] + tr->L[i]);
240169ee:	ee36 7a87 	vadd.f32	s14, s13, s14
        tr->junction_outR[i] = tr->R[i - 1] - w;
240169f2:	441a      	add	r2, r3
240169f4:	eee7 6a67 	vfms.f32	s13, s14, s15
240169f8:	edc2 6a00 	vstr	s13, [r2]
        tr->junction_outL[i] = tr->L[i] + w;
240169fc:	69e1      	ldr	r1, [r4, #28]
240169fe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
24016a00:	4419      	add	r1, r3
24016a02:	441a      	add	r2, r3
24016a04:	3304      	adds	r3, #4
24016a06:	edd1 6a00 	vldr	s13, [r1]
24016a0a:	eee7 6a27 	vfma.f32	s13, s14, s15
24016a0e:	edc2 6a00 	vstr	s13, [r2]
    for(i = 1; i < tr->n; i++) {
24016a12:	6862      	ldr	r2, [r4, #4]
24016a14:	42aa      	cmp	r2, r5
24016a16:	dcd4      	bgt.n	240169c2 <tract_compute+0x17a>
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
24016a18:	6ba2      	ldr	r2, [r4, #56]	; 0x38
24016a1a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
    r = tr->new_reflection_left * (1.0f - lambda) + tr->reflection_left*lambda;
24016a1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24016a22:	edd4 6a1b 	vldr	s13, [r4, #108]	; 0x6c
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
24016a26:	4413      	add	r3, r2
    r = tr->new_reflection_left * (1.0f - lambda) + tr->reflection_left*lambda;
24016a28:	edd4 7a1e 	vldr	s15, [r4, #120]	; 0x78
24016a2c:	ee68 6a26 	vmul.f32	s13, s16, s13
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
24016a30:	69e0      	ldr	r0, [r4, #28]
24016a32:	009b      	lsls	r3, r3, #2
    r = tr->new_reflection_left * (1.0f - lambda) + tr->reflection_left*lambda;
24016a34:	ee37 6a48 	vsub.f32	s12, s14, s16
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
24016a38:	69a5      	ldr	r5, [r4, #24]
24016a3a:	1d1a      	adds	r2, r3, #4
24016a3c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    r = tr->new_reflection_left * (1.0f - lambda) + tr->reflection_left*lambda;
24016a3e:	eee7 6a86 	vfma.f32	s13, s15, s12
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
24016a42:	441d      	add	r5, r3
24016a44:	4410      	add	r0, r2
24016a46:	4411      	add	r1, r2
24016a48:	edd5 5a00 	vldr	s11, [r5]
24016a4c:	edd0 7a00 	vldr	s15, [r0]
24016a50:	6d20      	ldr	r0, [r4, #80]	; 0x50
24016a52:	edd0 4a00 	vldr	s9, [r0]
24016a56:	ee36 5a87 	vadd.f32	s10, s13, s14
24016a5a:	ee77 7aa4 	vadd.f32	s15, s15, s9
24016a5e:	ee67 7a85 	vmul.f32	s15, s15, s10
24016a62:	eee5 7aa6 	vfma.f32	s15, s11, s13
24016a66:	edc1 7a00 	vstr	s15, [r1]
    r = tr->new_reflection_right * (1.0f - lambda) + tr->reflection_right * lambda;
24016a6a:	edd4 6a1c 	vldr	s13, [r4, #112]	; 0x70
24016a6e:	edd4 7a1f 	vldr	s15, [r4, #124]	; 0x7c
24016a72:	ee68 6a26 	vmul.f32	s13, s16, s13
    tr->junction_outR[i] = r*tr->L[i] + (1.0f+r)*(tr->R[i-1]+tr->noseL[0]);
24016a76:	69e0      	ldr	r0, [r4, #28]
24016a78:	69a1      	ldr	r1, [r4, #24]
24016a7a:	4410      	add	r0, r2
    r = tr->new_reflection_right * (1.0f - lambda) + tr->reflection_right * lambda;
24016a7c:	eee7 6a86 	vfma.f32	s13, s15, s12
    tr->junction_outR[i] = r*tr->L[i] + (1.0f+r)*(tr->R[i-1]+tr->noseL[0]);
24016a80:	4419      	add	r1, r3
24016a82:	edd0 5a00 	vldr	s11, [r0]
24016a86:	6d20      	ldr	r0, [r4, #80]	; 0x50
24016a88:	edd1 7a00 	vldr	s15, [r1]
24016a8c:	edd0 4a00 	vldr	s9, [r0]
24016a90:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
24016a92:	ee36 5a87 	vadd.f32	s10, s13, s14
24016a96:	ee77 7aa4 	vadd.f32	s15, s15, s9
24016a9a:	4411      	add	r1, r2
24016a9c:	ee67 7a85 	vmul.f32	s15, s15, s10
24016aa0:	eee5 7aa6 	vfma.f32	s15, s11, s13
24016aa4:	edc1 7a00 	vstr	s15, [r1]
    r = tr->new_reflection_nose * (1.0f - lambda) + tr->reflection_nose * lambda;
24016aa8:	edd4 6a1d 	vldr	s13, [r4, #116]	; 0x74
    tr->nose_junc_outR[0] = r * tr->noseL[0]+(1.0f+r)*(tr->L[i]+tr->R[i-1]);
24016aac:	6d21      	ldr	r1, [r4, #80]	; 0x50
    r = tr->new_reflection_nose * (1.0f - lambda) + tr->reflection_nose * lambda;
24016aae:	ee28 8a26 	vmul.f32	s16, s16, s13
24016ab2:	edd4 7a20 	vldr	s15, [r4, #128]	; 0x80
    tr->nose_junc_outR[0] = r * tr->noseL[0]+(1.0f+r)*(tr->L[i]+tr->R[i-1]);
24016ab6:	edd1 6a00 	vldr	s13, [r1]
24016aba:	69e1      	ldr	r1, [r4, #28]
    r = tr->new_reflection_nose * (1.0f - lambda) + tr->reflection_nose * lambda;
24016abc:	eea7 8a86 	vfma.f32	s16, s15, s12
    tr->nose_junc_outR[0] = r * tr->noseL[0]+(1.0f+r)*(tr->L[i]+tr->R[i-1]);
24016ac0:	6de0      	ldr	r0, [r4, #92]	; 0x5c
24016ac2:	4411      	add	r1, r2
24016ac4:	69a2      	ldr	r2, [r4, #24]
24016ac6:	441a      	add	r2, r3
24016ac8:	edd1 7a00 	vldr	s15, [r1]
24016acc:	ed92 6a00 	vldr	s12, [r2]
24016ad0:	ee38 7a07 	vadd.f32	s14, s16, s14
24016ad4:	ee77 7a86 	vadd.f32	s15, s15, s12
24016ad8:	ee67 7a87 	vmul.f32	s15, s15, s14
24016adc:	eee6 7a88 	vfma.f32	s15, s13, s16
24016ae0:	edc0 7a00 	vstr	s15, [r0]
    for(i = 0; i < tr->n; i++) {
24016ae4:	6862      	ldr	r2, [r4, #4]
24016ae6:	2a00      	cmp	r2, #0
24016ae8:	dd1d      	ble.n	24016b26 <tract_compute+0x2de>
24016aea:	2300      	movs	r3, #0
        tr->R[i] = tr->junction_outR[i]*0.999f;
24016aec:	ed9f 7a43 	vldr	s14, [pc, #268]	; 24016bfc <tract_compute+0x3b4>
    for(i = 0; i < tr->n; i++) {
24016af0:	4618      	mov	r0, r3
        tr->R[i] = tr->junction_outR[i]*0.999f;
24016af2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
24016af4:	461d      	mov	r5, r3
24016af6:	69a2      	ldr	r2, [r4, #24]
    for(i = 0; i < tr->n; i++) {
24016af8:	3001      	adds	r0, #1
        tr->R[i] = tr->junction_outR[i]*0.999f;
24016afa:	4419      	add	r1, r3
24016afc:	441a      	add	r2, r3
24016afe:	3304      	adds	r3, #4
24016b00:	edd1 7a00 	vldr	s15, [r1]
24016b04:	ee67 7a87 	vmul.f32	s15, s15, s14
24016b08:	edc2 7a00 	vstr	s15, [r2]
        tr->L[i] = tr->junction_outL[i + 1]*0.999f;
24016b0c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
24016b0e:	69e2      	ldr	r2, [r4, #28]
24016b10:	4419      	add	r1, r3
24016b12:	442a      	add	r2, r5
24016b14:	edd1 7a00 	vldr	s15, [r1]
24016b18:	ee67 7a87 	vmul.f32	s15, s15, s14
24016b1c:	edc2 7a00 	vstr	s15, [r2]
    for(i = 0; i < tr->n; i++) {
24016b20:	6862      	ldr	r2, [r4, #4]
24016b22:	4282      	cmp	r2, r0
24016b24:	dce5      	bgt.n	24016af2 <tract_compute+0x2aa>
    tr->lip_output = tr->R[tr->n - 1];
24016b26:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
24016b2a:	69a0      	ldr	r0, [r4, #24]
        tr->noseR[tr->nose_length-1] * tr->lip_reflection;
24016b2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    tr->lip_output = tr->R[tr->n - 1];
24016b2e:	441a      	add	r2, r3
        tr->noseR[tr->nose_length-1] * tr->lip_reflection;
24016b30:	ed94 7a23 	vldr	s14, [r4, #140]	; 0x8c
24016b34:	440b      	add	r3, r1
    tr->nose_junc_outL[tr->nose_length] =
24016b36:	6da1      	ldr	r1, [r4, #88]	; 0x58
    tr->lip_output = tr->R[tr->n - 1];
24016b38:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    tr->nose_junc_outL[tr->nose_length] =
24016b3c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    tr->lip_output = tr->R[tr->n - 1];
24016b40:	6802      	ldr	r2, [r0, #0]
24016b42:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
        tr->noseR[tr->nose_length-1] * tr->lip_reflection;
24016b46:	6d62      	ldr	r2, [r4, #84]	; 0x54
24016b48:	eb02 0283 	add.w	r2, r2, r3, lsl #2
24016b4c:	edd2 7a00 	vldr	s15, [r2]
24016b50:	ee67 7a87 	vmul.f32	s15, s15, s14
    tr->nose_junc_outL[tr->nose_length] =
24016b54:	edc1 7a01 	vstr	s15, [r1, #4]
    for(i = 1; i < tr->nose_length; i++) {
24016b58:	6b62      	ldr	r2, [r4, #52]	; 0x34
24016b5a:	2a01      	cmp	r2, #1
24016b5c:	dd24      	ble.n	24016ba8 <tract_compute+0x360>
24016b5e:	2304      	movs	r3, #4
24016b60:	2501      	movs	r5, #1
24016b62:	3501      	adds	r5, #1
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
24016b64:	e9d4 0614 	ldrd	r0, r6, [r4, #80]	; 0x50
        tr->nose_junc_outR[i] = tr->noseR[i - 1] - w;
24016b68:	e9d4 2117 	ldrd	r2, r1, [r4, #92]	; 0x5c
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
24016b6c:	441e      	add	r6, r3
24016b6e:	4418      	add	r0, r3
24016b70:	4419      	add	r1, r3
        tr->nose_junc_outR[i] = tr->noseR[i - 1] - w;
24016b72:	441a      	add	r2, r3
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
24016b74:	ed16 7a01 	vldr	s14, [r6, #-4]
24016b78:	edd0 7a00 	vldr	s15, [r0]
24016b7c:	edd1 6a00 	vldr	s13, [r1]
24016b80:	ee77 7a27 	vadd.f32	s15, s14, s15
        tr->nose_junc_outR[i] = tr->noseR[i - 1] - w;
24016b84:	eea6 7ae7 	vfms.f32	s14, s13, s15
24016b88:	ed82 7a00 	vstr	s14, [r2]
        tr->nose_junc_outL[i] = tr->noseL[i] + w;
24016b8c:	6d21      	ldr	r1, [r4, #80]	; 0x50
24016b8e:	6da2      	ldr	r2, [r4, #88]	; 0x58
24016b90:	4419      	add	r1, r3
24016b92:	441a      	add	r2, r3
24016b94:	3304      	adds	r3, #4
24016b96:	ed91 7a00 	vldr	s14, [r1]
24016b9a:	eea6 7aa7 	vfma.f32	s14, s13, s15
24016b9e:	ed82 7a00 	vstr	s14, [r2]
    for(i = 1; i < tr->nose_length; i++) {
24016ba2:	6b62      	ldr	r2, [r4, #52]	; 0x34
24016ba4:	42aa      	cmp	r2, r5
24016ba6:	dcdc      	bgt.n	24016b62 <tract_compute+0x31a>
    for(i = 0; i < tr->nose_length; i++) {
24016ba8:	2a00      	cmp	r2, #0
24016baa:	dd13      	ble.n	24016bd4 <tract_compute+0x38c>
24016bac:	2300      	movs	r3, #0
24016bae:	4618      	mov	r0, r3
        tr->noseR[i] = tr->nose_junc_outR[i];
24016bb0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
24016bb2:	461d      	mov	r5, r3
24016bb4:	6d62      	ldr	r2, [r4, #84]	; 0x54
    for(i = 0; i < tr->nose_length; i++) {
24016bb6:	3001      	adds	r0, #1
        tr->noseR[i] = tr->nose_junc_outR[i];
24016bb8:	4419      	add	r1, r3
24016bba:	441a      	add	r2, r3
24016bbc:	3304      	adds	r3, #4
24016bbe:	6809      	ldr	r1, [r1, #0]
24016bc0:	6011      	str	r1, [r2, #0]
        tr->noseL[i] = tr->nose_junc_outL[i + 1];
24016bc2:	6da1      	ldr	r1, [r4, #88]	; 0x58
24016bc4:	6d22      	ldr	r2, [r4, #80]	; 0x50
24016bc6:	4419      	add	r1, r3
24016bc8:	442a      	add	r2, r5
24016bca:	6809      	ldr	r1, [r1, #0]
24016bcc:	6011      	str	r1, [r2, #0]
    for(i = 0; i < tr->nose_length; i++) {
24016bce:	6b62      	ldr	r2, [r4, #52]	; 0x34
24016bd0:	4282      	cmp	r2, r0
24016bd2:	dced      	bgt.n	24016bb0 <tract_compute+0x368>
    tr->nose_output = tr->noseR[tr->nose_length - 1];
24016bd4:	6d63      	ldr	r3, [r4, #84]	; 0x54
24016bd6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
24016bda:	f853 3c04 	ldr.w	r3, [r3, #-4]
24016bde:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
}
24016be2:	b002      	add	sp, #8
24016be4:	ecbd 8b04 	vpop	{d8-d9}
24016be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        pool->root = n->next;
24016bec:	69db      	ldr	r3, [r3, #28]
24016bee:	6133      	str	r3, [r6, #16]
        pool->size--;
24016bf0:	6973      	ldr	r3, [r6, #20]
24016bf2:	3b01      	subs	r3, #1
24016bf4:	6173      	str	r3, [r6, #20]
        return;
24016bf6:	e63f      	b.n	24016878 <tract_compute+0x30>
24016bf8:	3e8f5c29 	.word	0x3e8f5c29
24016bfc:	3f7fbe77 	.word	0x3f7fbe77

24016c00 <tVoc_init>:
}



void    tVoc_init         (tVoc* const voc, int numTractSections, LEAF* const leaf)
{
24016c00:	b5f0      	push	{r4, r5, r6, r7, lr}
	tVoc_initToPool   (voc, numTractSections, &leaf->mempool);
}

void    tVoc_initToPool   (tVoc* const voc, int numTractSections, tMempool* const mp)
{
	_tMempool* m = *mp;
24016c02:	6995      	ldr	r5, [r2, #24]
{
24016c04:	b083      	sub	sp, #12
24016c06:	4607      	mov	r7, r0
24016c08:	460e      	mov	r6, r1
	_tVoc* v = *voc = (_tVoc*) mpool_alloc(sizeof(_tVoc), m);
24016c0a:	2014      	movs	r0, #20
24016c0c:	4629      	mov	r1, r5
	_tMempool* m = *mp;
24016c0e:	9500      	str	r5, [sp, #0]
	_tVoc* v = *voc = (_tVoc*) mpool_alloc(sizeof(_tVoc), m);
24016c10:	f7fd f982 	bl	24013f18 <mpool_alloc>
24016c14:	4604      	mov	r4, r0
24016c16:	6038      	str	r0, [r7, #0]
	_glottis* glot = *glo = (_glottis*) mpool_calloc(sizeof(_glottis), m);
24016c18:	4629      	mov	r1, r5
	v->mempool = m;
24016c1a:	6005      	str	r5, [r0, #0]
	_glottis* glot = *glo = (_glottis*) mpool_calloc(sizeof(_glottis), m);
24016c1c:	2038      	movs	r0, #56	; 0x38
24016c1e:	f7fd f9df 	bl	24013fe0 <mpool_calloc>
24016c22:	6060      	str	r0, [r4, #4]
24016c24:	4603      	mov	r3, r0
	glot->mempool = m;
24016c26:	6005      	str	r5, [r0, #0]
	_glottis* glot = *glo = (_glottis*) mpool_calloc(sizeof(_glottis), m);
24016c28:	9001      	str	r0, [sp, #4]
    glot->T = 1.0f/leaf->sampleRate; /* big T */
24016c2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	glot->freq = 140.0f; /* 140Hz frequency by default */
24016c2e:	480d      	ldr	r0, [pc, #52]	; (24016c64 <tVoc_init+0x64>)
    glot->time_in_waveform = 0;
24016c30:	2200      	movs	r2, #0
	LEAF* leaf = glot->mempool->leaf;
24016c32:	6869      	ldr	r1, [r5, #4]
	glot->freq = 140.0f; /* 140Hz frequency by default */
24016c34:	6058      	str	r0, [r3, #4]
    glot->tenseness = 0.6f; /* value between 0 and 1 */
24016c36:	480c      	ldr	r0, [pc, #48]	; (24016c68 <tVoc_init+0x68>)
24016c38:	6098      	str	r0, [r3, #8]
    glottis_setup_waveform(&glot);
24016c3a:	a801      	add	r0, sp, #4
    glot->T = 1.0f/leaf->sampleRate; /* big T */
24016c3c:	ed91 7a00 	vldr	s14, [r1]
    glot->time_in_waveform = 0;
24016c40:	615a      	str	r2, [r3, #20]
    glot->T = 1.0f/leaf->sampleRate; /* big T */
24016c42:	eec6 7a87 	vdiv.f32	s15, s13, s14
24016c46:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    glottis_setup_waveform(&glot);
24016c4a:	f7ff f88d 	bl	24015d68 <glottis_setup_waveform>
	glottis_initToPool(&v->glot, &m); /* initialize glottis */
	tract_initToPool(&v->tr, numTractSections, &m); /* initialize vocal tract */
24016c4e:	466a      	mov	r2, sp
24016c50:	4631      	mov	r1, r6
24016c52:	f104 0008 	add.w	r0, r4, #8
24016c56:	f7ff fa3b 	bl	240160d0 <tract_initToPool>
	v->counter = 0;
24016c5a:	2300      	movs	r3, #0
24016c5c:	60e3      	str	r3, [r4, #12]
}
24016c5e:	b003      	add	sp, #12
24016c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
24016c62:	bf00      	nop
24016c64:	430c0000 	.word	0x430c0000
24016c68:	3f19999a 	.word	0x3f19999a

24016c6c <tVoc_tick>:
	//mpool_free((char*)v->buf, v->mempool);
	mpool_free((char*)v, v->mempool);
}

Lfloat   tVoc_tick         (tVoc* const voc)
{
24016c6c:	b570      	push	{r4, r5, r6, lr}
	_tVoc* v = *voc;
24016c6e:	6804      	ldr	r4, [r0, #0]
	Lfloat vocal_output, glot;
	Lfloat lambda1, lambda2;

	if(v->counter == 0) {
24016c70:	68e5      	ldr	r5, [r4, #12]
		tract_reshape(&v->tr);
24016c72:	f104 0608 	add.w	r6, r4, #8
	if(v->counter == 0) {
24016c76:	b1d5      	cbz	r5, 24016cae <tVoc_tick+0x42>

	//Lfloat finalOutput = v->buf[v->counter];
	vocal_output = 0.0f;
	lambda1 = ((Lfloat) v->counter) * 0.015625f;// /64
	lambda2 = (Lfloat) (v->counter + 0.5f) * 0.015625f; //   /64
	glot = glottis_compute(&v->glot);
24016c78:	1d20      	adds	r0, r4, #4
24016c7a:	f7ff f931 	bl	24015ee0 <glottis_compute>

	tract_compute(&v->tr, glot, lambda1);
24016c7e:	ee00 5a90 	vmov	s1, r5
24016c82:	4630      	mov	r0, r6
24016c84:	eefa 0acd 	vcvt.f32.s32	s1, s1, #6
24016c88:	f7ff fdde 	bl	24016848 <tract_compute>
	//v->buf[i] = vocal_output * 0.125f;


	//vocal_output = glot;
	v->counter = (v->counter + 1) & 63;
	return vocal_output * 0.25f;
24016c8c:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
	v->counter = (v->counter + 1) & 63;
24016c90:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
	vocal_output += v->tr->lip_output + v->tr->nose_output;
24016c94:	edd2 7a27 	vldr	s15, [r2, #156]	; 0x9c
	v->counter = (v->counter + 1) & 63;
24016c98:	3301      	adds	r3, #1
	vocal_output += v->tr->lip_output + v->tr->nose_output;
24016c9a:	ed92 7a28 	vldr	s14, [r2, #160]	; 0xa0
	v->counter = (v->counter + 1) & 63;
24016c9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	vocal_output += v->tr->lip_output + v->tr->nose_output;
24016ca2:	ee77 7a87 	vadd.f32	s15, s15, s14
	v->counter = (v->counter + 1) & 63;
24016ca6:	60e3      	str	r3, [r4, #12]
}
24016ca8:	ee27 0a80 	vmul.f32	s0, s15, s0
24016cac:	bd70      	pop	{r4, r5, r6, pc}
		tract_reshape(&v->tr);
24016cae:	4630      	mov	r0, r6
24016cb0:	f7ff fc6c 	bl	2401658c <tract_reshape>
		tract_calculate_reflections(&v->tr);
24016cb4:	4630      	mov	r0, r6
24016cb6:	f7ff f985 	bl	24015fc4 <tract_calculate_reflections>
	lambda1 = ((Lfloat) v->counter) * 0.015625f;// /64
24016cba:	68e5      	ldr	r5, [r4, #12]
24016cbc:	e7dc      	b.n	24016c78 <tVoc_tick+0xc>
24016cbe:	bf00      	nop

24016cc0 <tVoc_setFreq>:


void    tVoc_setFreq      (tVoc* const voc, Lfloat freq)
{
	_tVoc* v = *voc;
	v->glot->freq = freq;
24016cc0:	6803      	ldr	r3, [r0, #0]
24016cc2:	685b      	ldr	r3, [r3, #4]
24016cc4:	ed83 0a01 	vstr	s0, [r3, #4]
}
24016cc8:	4770      	bx	lr
24016cca:	bf00      	nop

24016ccc <tVoc_set_tenseness>:
}

void tVoc_set_tenseness(tVoc* const voc, Lfloat tenseness)
{
	_tVoc* v = *voc;
	v->glot->tenseness = tenseness;
24016ccc:	6803      	ldr	r3, [r0, #0]
24016cce:	685b      	ldr	r3, [r3, #4]
24016cd0:	ed83 0a02 	vstr	s0, [r3, #8]
}
24016cd4:	4770      	bx	lr
24016cd6:	bf00      	nop

24016cd8 <tVoc_set_velum>:
	return &v->glot->tenseness;
}
void tVoc_set_velum(tVoc* const voc, Lfloat velum)
{
	_tVoc* v = *voc;
	v->tr->velum_target = velum;
24016cd8:	6803      	ldr	r3, [r0, #0]
24016cda:	689b      	ldr	r3, [r3, #8]
24016cdc:	ed83 0a21 	vstr	s0, [r3, #132]	; 0x84
}
24016ce0:	4770      	bx	lr
24016ce2:	bf00      	nop
24016ce4:	0000      	movs	r0, r0
	...

24016ce8 <tVoc_set_tongue_and_touch_diameters>:
	return &v->tr->velum_target;
}

//diameter and index are 0-1.0f
void tVoc_set_tongue_and_touch_diameters(tVoc* const voc, Lfloat tongue_index, Lfloat tongue_diameter, Lfloat touch_index, Lfloat touch_diameter, Lfloat *theDiameters)
{
24016ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
24016cec:	ed2d 8b0a 	vpush	{d8-d12}
	int i;

	_tVoc* v = *voc;
24016cf0:	6807      	ldr	r7, [r0, #0]
{
24016cf2:	460e      	mov	r6, r1

	Lfloat t;
	Lfloat curve;
	//do tongue position
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
24016cf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24016cf8:	68bb      	ldr	r3, [r7, #8]
{
24016cfa:	eeb0 9a40 	vmov.f32	s18, s0
24016cfe:	eef0 aa41 	vmov.f32	s21, s2
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
24016d02:	6c1c      	ldr	r4, [r3, #64]	; 0x40
{
24016d04:	eeb0 ba61 	vmov.f32	s22, s3
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
24016d08:	6bda      	ldr	r2, [r3, #60]	; 0x3c

	for (i = 0; i < v->tr->n; i++)
24016d0a:	6859      	ldr	r1, [r3, #4]
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
24016d0c:	1b12      	subs	r2, r2, r4
	for (i = 0; i < v->tr->n; i++)
24016d0e:	2900      	cmp	r1, #0
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
24016d10:	ee07 2a90 	vmov	s15, r2
24016d14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24016d18:	ee87 8a27 	vdiv.f32	s16, s14, s15
	for (i = 0; i < v->tr->n; i++)
24016d1c:	dd0d      	ble.n	24016d3a <tVoc_set_tongue_and_touch_diameters+0x52>
24016d1e:	4630      	mov	r0, r6
24016d20:	2200      	movs	r2, #0
	{
		theDiameters[i] = v->tr->rest_diameter[i];
24016d22:	68db      	ldr	r3, [r3, #12]
24016d24:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	for (i = 0; i < v->tr->n; i++)
24016d28:	3201      	adds	r2, #1
		theDiameters[i] = v->tr->rest_diameter[i];
24016d2a:	681b      	ldr	r3, [r3, #0]
24016d2c:	f840 3b04 	str.w	r3, [r0], #4
	for (i = 0; i < v->tr->n; i++)
24016d30:	68bb      	ldr	r3, [r7, #8]
24016d32:	6859      	ldr	r1, [r3, #4]
24016d34:	4291      	cmp	r1, r2
24016d36:	dcf4      	bgt.n	24016d22 <tVoc_set_tongue_and_touch_diameters+0x3a>
	}
	for(i = v->tr->blade_start; i < v->tr->lip_start; i++)
24016d38:	6c1c      	ldr	r4, [r3, #64]	; 0x40
24016d3a:	6c5d      	ldr	r5, [r3, #68]	; 0x44
24016d3c:	42a5      	cmp	r5, r4
24016d3e:	dd48      	ble.n	24016dd2 <tVoc_set_tongue_and_touch_diameters+0xea>
	{
		t = 1.1f * M_PI * (Lfloat)(tongue_index - i) * alpha;
		Lfloat fixedTongueDiameter = 2.0f + ((tongue_diameter - 2.0f) * 0.66666666666667f);
24016d40:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
		curve = (1.5f - fixedTongueDiameter + 1.7f) * cosf(t);
24016d44:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 24016fb0 <tVoc_set_tongue_and_touch_diameters+0x2c8>
		t = 1.1f * M_PI * (Lfloat)(tongue_index - i) * alpha;
24016d48:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
		curve = (1.5f - fixedTongueDiameter + 1.7f) * cosf(t);
24016d4c:	eddf 9a99 	vldr	s19, [pc, #612]	; 24016fb4 <tVoc_set_tongue_and_touch_diameters+0x2cc>
		}
		if(i == v->tr->blade_start || i == v->tr->lip_start - 2)
		{
			curve *= 0.94f;
		}
		theDiameters[i] = 1.5f - curve;
24016d50:	eeb7 aa08 	vmov.f32	s20, #120	; 0x3fc00000  1.5
24016d54:	eb06 0984 	add.w	r9, r6, r4, lsl #2
		curve = (1.5f - fixedTongueDiameter + 1.7f) * cosf(t);
24016d58:	ee77 7ae0 	vsub.f32	s15, s15, s1
			curve *= 0.8f;
24016d5c:	ed9f ca96 	vldr	s24, [pc, #600]	; 24016fb8 <tVoc_set_tongue_and_touch_diameters+0x2d0>
			curve *= 0.94f;
24016d60:	eddf ba96 	vldr	s23, [pc, #600]	; 24016fbc <tVoc_set_tongue_and_touch_diameters+0x2d4>
		curve = (1.5f - fixedTongueDiameter + 1.7f) * cosf(t);
24016d64:	46a0      	mov	r8, r4
24016d66:	ed9f 6b8a 	vldr	d6, [pc, #552]	; 24016f90 <tVoc_set_tongue_and_touch_diameters+0x2a8>
24016d6a:	eee7 9a87 	vfma.f32	s19, s15, s14
24016d6e:	ee28 8b06 	vmul.f64	d8, d8, d6
24016d72:	e00c      	b.n	24016d8e <tVoc_set_tongue_and_touch_diameters+0xa6>
		if(i == v->tr->blade_start || i == v->tr->lip_start - 2)
24016d74:	42a5      	cmp	r5, r4
24016d76:	d025      	beq.n	24016dc4 <tVoc_set_tongue_and_touch_diameters+0xdc>
		theDiameters[i] = 1.5f - curve;
24016d78:	ee7a 7a40 	vsub.f32	s15, s20, s0
	for(i = v->tr->blade_start; i < v->tr->lip_start; i++)
24016d7c:	3401      	adds	r4, #1
		theDiameters[i] = 1.5f - curve;
24016d7e:	ece9 7a01 	vstmia	r9!, {s15}
	for(i = v->tr->blade_start; i < v->tr->lip_start; i++)
24016d82:	68bb      	ldr	r3, [r7, #8]
24016d84:	6c5d      	ldr	r5, [r3, #68]	; 0x44
24016d86:	42a5      	cmp	r5, r4
24016d88:	dd22      	ble.n	24016dd0 <tVoc_set_tongue_and_touch_diameters+0xe8>
		if(i == v->tr->blade_start - 2 || i == v->tr->lip_start - 1)
24016d8a:	f8d3 8040 	ldr.w	r8, [r3, #64]	; 0x40
		t = 1.1f * M_PI * (Lfloat)(tongue_index - i) * alpha;
24016d8e:	ee07 4a90 	vmov	s15, r4
24016d92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
24016d96:	ee39 7a47 	vsub.f32	s14, s18, s14
24016d9a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
24016d9e:	ee27 7b08 	vmul.f64	d7, d7, d8
		curve = (1.5f - fixedTongueDiameter + 1.7f) * cosf(t);
24016da2:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
24016da6:	f001 fa4b 	bl	24018240 <cosf>
		if(i == v->tr->blade_start - 2 || i == v->tr->lip_start - 1)
24016daa:	f1a8 0302 	sub.w	r3, r8, #2
24016dae:	1e6a      	subs	r2, r5, #1
		curve = (1.5f - fixedTongueDiameter + 1.7f) * cosf(t);
24016db0:	ee29 0a80 	vmul.f32	s0, s19, s0
		if(i == v->tr->blade_start - 2 || i == v->tr->lip_start - 1)
24016db4:	42a3      	cmp	r3, r4
		if(i == v->tr->blade_start || i == v->tr->lip_start - 2)
24016db6:	f1a5 0502 	sub.w	r5, r5, #2
		if(i == v->tr->blade_start - 2 || i == v->tr->lip_start - 1)
24016dba:	d006      	beq.n	24016dca <tVoc_set_tongue_and_touch_diameters+0xe2>
24016dbc:	42a2      	cmp	r2, r4
24016dbe:	d004      	beq.n	24016dca <tVoc_set_tongue_and_touch_diameters+0xe2>
		if(i == v->tr->blade_start || i == v->tr->lip_start - 2)
24016dc0:	4544      	cmp	r4, r8
24016dc2:	d1d7      	bne.n	24016d74 <tVoc_set_tongue_and_touch_diameters+0x8c>
			curve *= 0.94f;
24016dc4:	ee20 0a2b 	vmul.f32	s0, s0, s23
24016dc8:	e7d6      	b.n	24016d78 <tVoc_set_tongue_and_touch_diameters+0x90>
			curve *= 0.8f;
24016dca:	ee20 0a0c 	vmul.f32	s0, s0, s24
24016dce:	e7f7      	b.n	24016dc0 <tVoc_set_tongue_and_touch_diameters+0xd8>
	}

	//now do additional constrictions (touch position)
	Lfloat width=2.0f;

	if (touch_index< (v->tr->n * 0.568181818181818f)) width = 10.0f; //25 in original code
24016dd0:	6859      	ldr	r1, [r3, #4]
24016dd2:	ee07 1a90 	vmov	s15, r1
24016dd6:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 24016fc0 <tVoc_set_tongue_and_touch_diameters+0x2d8>
24016dda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24016dde:	ee27 7a87 	vmul.f32	s14, s15, s14
24016de2:	eeb4 7aea 	vcmpe.f32	s14, s21
24016de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016dea:	dc20      	bgt.n	24016e2e <tVoc_set_tongue_and_touch_diameters+0x146>
	else if (touch_index>=v->tr->tip_start) width= 5.0f;
24016dec:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
24016df0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24016df4:	eeb4 7aea 	vcmpe.f32	s14, s21
24016df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016dfc:	d82c      	bhi.n	24016e58 <tVoc_set_tongue_and_touch_diameters+0x170>
	else width = 10.0f-5.0f*(touch_index-25.0f)/(v->tr->tip_start-25.0f);
	Lfloat invWidth = 1.0f / width;
	if ((touch_index < v->tr->n) && (touch_diameter < 3.0f))
24016dfe:	eef4 7a6a 	vcmp.f32	s15, s21
24016e02:	f06f 0405 	mvn.w	r4, #5
24016e06:	eeb1 8a08 	vmov.f32	s16, #24	; 0x40c00000  6.0
	else if (touch_index>=v->tr->tip_start) width= 5.0f;
24016e0a:	eef1 ba04 	vmov.f32	s23, #20	; 0x40a00000  5.0
	if ((touch_index < v->tr->n) && (touch_diameter < 3.0f))
24016e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016e12:	ed9f 9b61 	vldr	d9, [pc, #388]	; 24016f98 <tVoc_set_tongue_and_touch_diameters+0x2b0>
24016e16:	dd06      	ble.n	24016e26 <tVoc_set_tongue_and_touch_diameters+0x13e>
24016e18:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
24016e1c:	eeb4 bae7 	vcmpe.f32	s22, s15
24016e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016e24:	d45a      	bmi.n	24016edc <tVoc_set_tongue_and_touch_diameters+0x1f4>
				theDiameters[intIndex+i] = touch_diameter + (theDiameters[intIndex+i]-touch_diameter)*shrink;
			}
		}
	}

}
24016e26:	ecbd 8b0a 	vpop	{d8-d12}
24016e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((touch_index < v->tr->n) && (touch_diameter < 3.0f))
24016e2e:	eef4 7a6a 	vcmp.f32	s15, s21
24016e32:	f06f 040a 	mvn.w	r4, #10
24016e36:	eeb2 8a06 	vmov.f32	s16, #38	; 0x41300000  11.0
	if (touch_index< (v->tr->n * 0.568181818181818f)) width = 10.0f; //25 in original code
24016e3a:	eef2 ba04 	vmov.f32	s23, #36	; 0x41200000  10.0
	if ((touch_index < v->tr->n) && (touch_diameter < 3.0f))
24016e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016e42:	ed9f 9b57 	vldr	d9, [pc, #348]	; 24016fa0 <tVoc_set_tongue_and_touch_diameters+0x2b8>
24016e46:	ddee      	ble.n	24016e26 <tVoc_set_tongue_and_touch_diameters+0x13e>
24016e48:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
24016e4c:	eeb4 bae7 	vcmpe.f32	s22, s15
24016e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016e54:	d5e7      	bpl.n	24016e26 <tVoc_set_tongue_and_touch_diameters+0x13e>
24016e56:	e041      	b.n	24016edc <tVoc_set_tongue_and_touch_diameters+0x1f4>
24016e58:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
24016e5c:	eeb4 ba66 	vcmp.f32	s22, s13
24016e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016e64:	d5df      	bpl.n	24016e26 <tVoc_set_tongue_and_touch_diameters+0x13e>
24016e66:	eef4 7aea 	vcmpe.f32	s15, s21
24016e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016e6e:	ddda      	ble.n	24016e26 <tVoc_set_tongue_and_touch_diameters+0x13e>
	else width = 10.0f-5.0f*(touch_index-25.0f)/(v->tr->tip_start-25.0f);
24016e70:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
24016e74:	eeb1 5a04 	vmov.f32	s10, #20	; 0x40a00000  5.0
24016e78:	eef2 ba04 	vmov.f32	s23, #36	; 0x41200000  10.0
24016e7c:	ee7a 6ae7 	vsub.f32	s13, s21, s15
24016e80:	ee77 7ac7 	vsub.f32	s15, s15, s14
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
24016e84:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
	else width = 10.0f-5.0f*(touch_index-25.0f)/(v->tr->tip_start-25.0f);
24016e88:	ee26 7a85 	vmul.f32	s14, s13, s10
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
24016e8c:	eef2 5a06 	vmov.f32	s11, #38	; 0x41300000  11.0
	else width = 10.0f-5.0f*(touch_index-25.0f)/(v->tr->tip_start-25.0f);
24016e90:	ee87 8a27 	vdiv.f32	s16, s14, s15
24016e94:	ee78 ba2b 	vadd.f32	s23, s16, s23
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
24016e98:	ee38 8a25 	vadd.f32	s16, s16, s11
24016e9c:	fefa 7a6b 	vrintp.f32	s15, s23
24016ea0:	ee77 7a86 	vadd.f32	s15, s15, s12
24016ea4:	eef1 7a67 	vneg.f32	s15, s15
24016ea8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24016eac:	ee17 4a90 	vmov	r4, s15
24016eb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24016eb4:	eef4 7ac8 	vcmpe.f32	s15, s16
24016eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016ebc:	d5b3      	bpl.n	24016e26 <tVoc_set_tongue_and_touch_diameters+0x13e>
	Lfloat invWidth = 1.0f / width;
24016ebe:	ee86 9a2b 	vdiv.f32	s18, s12, s23
		int intIndex = roundf(touch_index);
24016ec2:	fef8 7a6a 	vrinta.f32	s15, s21
24016ec6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24016eca:	ed9f 6b37 	vldr	d6, [pc, #220]	; 24016fa8 <tVoc_set_tongue_and_touch_diameters+0x2c0>
24016ece:	ee17 5a90 	vmov	r5, s15
			else shrink = 0.5f*(1.0f-cosf(M_PI * relpos * invWidth));
24016ed2:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
24016ed6:	ee29 9b06 	vmul.f64	d9, d9, d6
24016eda:	e005      	b.n	24016ee8 <tVoc_set_tongue_and_touch_diameters+0x200>
		int intIndex = roundf(touch_index);
24016edc:	fef8 7a6a 	vrinta.f32	s15, s21
24016ee0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24016ee4:	ee17 5a90 	vmov	r5, s15
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
24016ee8:	442c      	add	r4, r5
			if (relpos <= 0.0f) shrink = 0.0f;
24016eea:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
			else if (relpos > width) shrink = 1.0f;
24016eee:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
24016ef2:	f1c5 0501 	rsb	r5, r5, #1
24016ef6:	eb06 0684 	add.w	r6, r6, r4, lsl #2
			if (relpos <= 0.0f) shrink = 0.0f;
24016efa:	ed9f ca32 	vldr	s24, [pc, #200]	; 24016fc4 <tVoc_set_tongue_and_touch_diameters+0x2dc>
			Lfloat relpos = (intIndex+i) - touch_index;
24016efe:	ee07 4a90 	vmov	s15, r4
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
24016f02:	2c00      	cmp	r4, #0
			Lfloat relpos = (intIndex+i) - touch_index;
24016f04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
24016f08:	db32      	blt.n	24016f70 <tVoc_set_tongue_and_touch_diameters+0x288>
24016f0a:	68bb      	ldr	r3, [r7, #8]
			Lfloat relpos = (intIndex+i) - touch_index;
24016f0c:	ee77 7aea 	vsub.f32	s15, s15, s21
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
24016f10:	685b      	ldr	r3, [r3, #4]
			relpos = fabsf(relpos)-0.5f;
24016f12:	eef0 7ae7 	vabs.f32	s15, s15
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
24016f16:	429c      	cmp	r4, r3
24016f18:	da2a      	bge.n	24016f70 <tVoc_set_tongue_and_touch_diameters+0x288>
			if (relpos <= 0.0f) shrink = 0.0f;
24016f1a:	eef4 7ae8 	vcmpe.f32	s15, s17
			relpos = fabsf(relpos)-0.5f;
24016f1e:	ee37 7ae8 	vsub.f32	s14, s15, s17
			if (relpos <= 0.0f) shrink = 0.0f;
24016f22:	eef0 7a4c 	vmov.f32	s15, s24
24016f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016f2a:	d912      	bls.n	24016f52 <tVoc_set_tongue_and_touch_diameters+0x26a>
			else if (relpos > width) shrink = 1.0f;
24016f2c:	eeb4 7aeb 	vcmpe.f32	s14, s23
			else shrink = 0.5f*(1.0f-cosf(M_PI * relpos * invWidth));
24016f30:	eeb7 0ac7 	vcvt.f64.f32	d0, s14
			else if (relpos > width) shrink = 1.0f;
24016f34:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24016f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			else shrink = 0.5f*(1.0f-cosf(M_PI * relpos * invWidth));
24016f3c:	ee20 0b09 	vmul.f64	d0, d0, d9
			else if (relpos > width) shrink = 1.0f;
24016f40:	dc07      	bgt.n	24016f52 <tVoc_set_tongue_and_touch_diameters+0x26a>
			else shrink = 0.5f*(1.0f-cosf(M_PI * relpos * invWidth));
24016f42:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24016f46:	f001 f97b 	bl	24018240 <cosf>
24016f4a:	ee3a 0a40 	vsub.f32	s0, s20, s0
24016f4e:	ee60 7a28 	vmul.f32	s15, s0, s17
			if (touch_diameter < theDiameters[intIndex+i])
24016f52:	ed96 7a00 	vldr	s14, [r6]
				theDiameters[intIndex+i] = touch_diameter + (theDiameters[intIndex+i]-touch_diameter)*shrink;
24016f56:	ee77 6a4b 	vsub.f32	s13, s14, s22
			if (touch_diameter < theDiameters[intIndex+i])
24016f5a:	eeb4 7acb 	vcmpe.f32	s14, s22
				theDiameters[intIndex+i] = touch_diameter + (theDiameters[intIndex+i]-touch_diameter)*shrink;
24016f5e:	eeb0 7a4b 	vmov.f32	s14, s22
			if (touch_diameter < theDiameters[intIndex+i])
24016f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				theDiameters[intIndex+i] = touch_diameter + (theDiameters[intIndex+i]-touch_diameter)*shrink;
24016f66:	eea6 7aa7 	vfma.f32	s14, s13, s15
24016f6a:	bfc8      	it	gt
24016f6c:	ed86 7a00 	vstrgt	s14, [r6]
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
24016f70:	192b      	adds	r3, r5, r4
24016f72:	3604      	adds	r6, #4
24016f74:	3401      	adds	r4, #1
24016f76:	ee07 3a90 	vmov	s15, r3
24016f7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24016f7e:	eef4 7ac8 	vcmpe.f32	s15, s16
24016f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016f86:	d4ba      	bmi.n	24016efe <tVoc_set_tongue_and_touch_diameters+0x216>
}
24016f88:	ecbd 8b0a 	vpop	{d8-d12}
24016f8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
24016f90:	4d2562ef 	.word	0x4d2562ef
24016f94:	400ba561 	.word	0x400ba561
24016f98:	7ba3bcbe 	.word	0x7ba3bcbe
24016f9c:	3fe41b2f 	.word	0x3fe41b2f
24016fa0:	7ba3bcbe 	.word	0x7ba3bcbe
24016fa4:	3fd41b2f 	.word	0x3fd41b2f
24016fa8:	54442d18 	.word	0x54442d18
24016fac:	400921fb 	.word	0x400921fb
24016fb0:	3f2aaaab 	.word	0x3f2aaaab
24016fb4:	3f99999a 	.word	0x3f99999a
24016fb8:	3f4ccccd 	.word	0x3f4ccccd
24016fbc:	3f70a3d7 	.word	0x3f70a3d7
24016fc0:	3f11745d 	.word	0x3f11745d
24016fc4:	00000000 	.word	0x00000000

24016fc8 <tVoc_set_tongue_shape_and_touch>:
{
24016fc8:	b500      	push	{lr}
	tongue_diameter += 2.05f;
24016fca:	eddf 7a23 	vldr	s15, [pc, #140]	; 24017058 <tVoc_set_tongue_shape_and_touch+0x90>
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
24016fce:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
24016fd2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 2401705c <tVoc_set_tongue_shape_and_touch+0x94>
{
24016fd6:	ed2d 8b04 	vpush	{d8-d9}
24016fda:	fec1 1a87 	vmaxnm.f32	s3, s3, s14
24016fde:	b083      	sub	sp, #12
	_tVoc* v = *voc;
24016fe0:	6803      	ldr	r3, [r0, #0]
	tongue_diameter += 2.05f;
24016fe2:	eddf 9a1f 	vldr	s19, [pc, #124]	; 24017060 <tVoc_set_tongue_shape_and_touch+0x98>
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
24016fe6:	eeb0 9a00 	vmov.f32	s18, #0	; 0x40000000  2.0
	_tVoc* v = *voc;
24016fea:	9301      	str	r3, [sp, #4]
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
24016fec:	a801      	add	r0, sp, #4
	return v->tr->target_diameter;
24016fee:	689b      	ldr	r3, [r3, #8]
	tongue_diameter += 2.05f;
24016ff0:	eee0 9aa7 	vfma.f32	s19, s1, s15
	touch_diameter *= 1.6f;
24016ff4:	eddf 7a1b 	vldr	s15, [pc, #108]	; 24017064 <tVoc_set_tongue_shape_and_touch+0x9c>
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
24016ff8:	edd3 8a13 	vldr	s17, [r3, #76]	; 0x4c
	touch_diameter *= 1.6f;
24016ffc:	ee21 8aa7 	vmul.f32	s16, s3, s15
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
24017000:	edd3 7a01 	vldr	s15, [r3, #4]
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
24017004:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
24017008:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
2401700c:	6919      	ldr	r1, [r3, #16]
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
2401700e:	ee37 7a68 	vsub.f32	s14, s14, s17
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
24017012:	eef0 1a48 	vmov.f32	s3, s16
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
24017016:	ee77 7ae6 	vsub.f32	s15, s15, s13
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
2401701a:	eee7 8a00 	vfma.f32	s17, s14, s0
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
2401701e:	eef0 0a69 	vmov.f32	s1, s19
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
24017022:	eea7 9a81 	vfma.f32	s18, s15, s2
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
24017026:	eeb0 0a68 	vmov.f32	s0, s17
2401702a:	eeb0 1a49 	vmov.f32	s2, s18
2401702e:	f7ff fe5b 	bl	24016ce8 <tVoc_set_tongue_and_touch_diameters>
	v->tr->turbuluencePointPosition[0] = tongue_index;
24017032:	9b01      	ldr	r3, [sp, #4]
24017034:	689a      	ldr	r2, [r3, #8]
24017036:	edc2 8a2e 	vstr	s17, [r2, #184]	; 0xb8
	v->tr->turbuluencePointDiameter[0] = tongue_diameter;
2401703a:	689a      	ldr	r2, [r3, #8]
2401703c:	edc2 9a30 	vstr	s19, [r2, #192]	; 0xc0
	v->tr->turbuluencePointPosition[1] = touch_index;
24017040:	689a      	ldr	r2, [r3, #8]
24017042:	ed82 9a2f 	vstr	s18, [r2, #188]	; 0xbc
	v->tr->turbuluencePointDiameter[1] = touch_diameter;
24017046:	689b      	ldr	r3, [r3, #8]
24017048:	ed83 8a31 	vstr	s16, [r3, #196]	; 0xc4
}
2401704c:	b003      	add	sp, #12
2401704e:	ecbd 8b04 	vpop	{d8-d9}
24017052:	f85d fb04 	ldr.w	pc, [sp], #4
24017056:	bf00      	nop
24017058:	3fb9999a 	.word	0x3fb9999a
2401705c:	00000000 	.word	0x00000000
24017060:	40033333 	.word	0x40033333
24017064:	3fcccccd 	.word	0x3fcccccd

24017068 <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
24017068:	4770      	bx	lr
2401706a:	bf00      	nop

2401706c <LEAF_init>:
{
2401706c:	b538      	push	{r3, r4, r5, lr}
    leaf->_internal_mempool.leaf = leaf;
2401706e:	6200      	str	r0, [r0, #32]
{
24017070:	4604      	mov	r4, r0
24017072:	461d      	mov	r5, r3
24017074:	ed2d 8b02 	vpush	{d8}
24017078:	eeb0 8a40 	vmov.f32	s16, s0
    leaf_pool_init(leaf, memory, memorysize);
2401707c:	f7fc ff32 	bl	24013ee4 <leaf_pool_init>
    leaf->invSampleRate = 1.0f/sr;
24017080:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
24017084:	eddf 7a0c 	vldr	s15, [pc, #48]	; 240170b8 <LEAF_init+0x4c>
    leaf->clearOnAllocation = 0;
24017088:	2200      	movs	r2, #0
    leaf->errorCallback = &LEAF_defaultErrorCallback;
2401708a:	4b0c      	ldr	r3, [pc, #48]	; (240170bc <LEAF_init+0x50>)
    leaf->sampleRate = sr;
2401708c:	ed84 8a00 	vstr	s16, [r4]
    leaf->invSampleRate = 1.0f/sr;
24017090:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf->random = random;
24017094:	6125      	str	r5, [r4, #16]
    leaf->clearOnAllocation = 0;
24017096:	6162      	str	r2, [r4, #20]
        leaf->errorState[i] = 0;
24017098:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
2401709c:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
    leaf->freeCount = 0;
240170a0:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
240170a4:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf->invSampleRate = 1.0f/sr;
240170a8:	ed84 7a01 	vstr	s14, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
240170ac:	edc4 7a03 	vstr	s15, [r4, #12]
}
240170b0:	ecbd 8b02 	vpop	{d8}
240170b4:	bd38      	pop	{r3, r4, r5, pc}
240170b6:	bf00      	nop
240170b8:	40c90fdb 	.word	0x40c90fdb
240170bc:	24017069 	.word	0x24017069

240170c0 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
240170c0:	b410      	push	{r4}
    leaf->errorState[whichone] = 1;
240170c2:	eb00 0281 	add.w	r2, r0, r1, lsl #2
240170c6:	2401      	movs	r4, #1
240170c8:	63d4      	str	r4, [r2, #60]	; 0x3c
    leaf->errorCallback(leaf, whichone);
}
240170ca:	f85d 4b04 	ldr.w	r4, [sp], #4
    leaf->errorCallback(leaf, whichone);
240170ce:	6b83      	ldr	r3, [r0, #56]	; 0x38
240170d0:	4718      	bx	r3
240170d2:	bf00      	nop

240170d4 <arm_fir_interpolate_init_f32>:
240170d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
240170d6:	fbb2 f6f1 	udiv	r6, r2, r1
240170da:	fb01 2416 	mls	r4, r1, r6, r2
240170de:	9f06      	ldr	r7, [sp, #24]
240170e0:	b984      	cbnz	r4, 24017104 <arm_fir_interpolate_init_f32+0x30>
240170e2:	6043      	str	r3, [r0, #4]
240170e4:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
240170e8:	9b07      	ldr	r3, [sp, #28]
240170ea:	4605      	mov	r5, r0
240170ec:	7001      	strb	r1, [r0, #0]
240170ee:	4621      	mov	r1, r4
240170f0:	441a      	add	r2, r3
240170f2:	8046      	strh	r6, [r0, #2]
240170f4:	4638      	mov	r0, r7
240170f6:	4432      	add	r2, r6
240170f8:	0092      	lsls	r2, r2, #2
240170fa:	f000 fca1 	bl	24017a40 <memset>
240170fe:	60af      	str	r7, [r5, #8]
24017100:	4620      	mov	r0, r4
24017102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24017104:	f06f 0001 	mvn.w	r0, #1
24017108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2401710a:	bf00      	nop

2401710c <arm_fir_interpolate_f32>:
2401710c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24017110:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
24017114:	b08f      	sub	sp, #60	; 0x3c
24017116:	8845      	ldrh	r5, [r0, #2]
24017118:	9202      	str	r2, [sp, #8]
2401711a:	442c      	add	r4, r5
2401711c:	6882      	ldr	r2, [r0, #8]
2401711e:	930d      	str	r3, [sp, #52]	; 0x34
24017120:	089b      	lsrs	r3, r3, #2
24017122:	eb02 0784 	add.w	r7, r2, r4, lsl #2
24017126:	9107      	str	r1, [sp, #28]
24017128:	950b      	str	r5, [sp, #44]	; 0x2c
2401712a:	4616      	mov	r6, r2
2401712c:	9209      	str	r2, [sp, #36]	; 0x24
2401712e:	f8d0 b004 	ldr.w	fp, [r0, #4]
24017132:	970a      	str	r7, [sp, #40]	; 0x28
24017134:	930c      	str	r3, [sp, #48]	; 0x30
24017136:	f000 811b 	beq.w	24017370 <arm_fir_interpolate_f32+0x264>
2401713a:	462a      	mov	r2, r5
2401713c:	468e      	mov	lr, r1
2401713e:	4619      	mov	r1, r3
24017140:	4635      	mov	r5, r6
24017142:	4613      	mov	r3, r2
24017144:	ea4f 0892 	mov.w	r8, r2, lsr #2
24017148:	f106 0c1c 	add.w	ip, r6, #28
2401714c:	f10e 0210 	add.w	r2, lr, #16
24017150:	ea4f 1608 	mov.w	r6, r8, lsl #4
24017154:	f003 0903 	and.w	r9, r3, #3
24017158:	f107 0310 	add.w	r3, r7, #16
2401715c:	f8cd b020 	str.w	fp, [sp, #32]
24017160:	4693      	mov	fp, r2
24017162:	e9cd 3103 	strd	r3, r1, [sp, #12]
24017166:	f106 030c 	add.w	r3, r6, #12
2401716a:	4466      	add	r6, ip
2401716c:	18eb      	adds	r3, r5, r3
2401716e:	9301      	str	r3, [sp, #4]
24017170:	f85b 3c10 	ldr.w	r3, [fp, #-16]
24017174:	9a03      	ldr	r2, [sp, #12]
24017176:	f842 3c10 	str.w	r3, [r2, #-16]
2401717a:	f85b 3c0c 	ldr.w	r3, [fp, #-12]
2401717e:	f842 3c0c 	str.w	r3, [r2, #-12]
24017182:	f85b 3c08 	ldr.w	r3, [fp, #-8]
24017186:	f842 3c08 	str.w	r3, [r2, #-8]
2401718a:	f85b 3c04 	ldr.w	r3, [fp, #-4]
2401718e:	f842 3c04 	str.w	r3, [r2, #-4]
24017192:	f890 a000 	ldrb.w	sl, [r0]
24017196:	4653      	mov	r3, sl
24017198:	f1ba 0f00 	cmp.w	sl, #0
2401719c:	f000 80c5 	beq.w	2401732a <arm_fir_interpolate_f32+0x21e>
240171a0:	f1ac 0310 	sub.w	r3, ip, #16
240171a4:	f8cd b018 	str.w	fp, [sp, #24]
240171a8:	4655      	mov	r5, sl
240171aa:	9f02      	ldr	r7, [sp, #8]
240171ac:	f04f 0e01 	mov.w	lr, #1
240171b0:	f8dd b020 	ldr.w	fp, [sp, #32]
240171b4:	9305      	str	r3, [sp, #20]
240171b6:	eba5 040e 	sub.w	r4, r5, lr
240171ba:	ed1c 2a07 	vldr	s4, [ip, #-28]	; 0xffffffe4
240171be:	ed1c 3a06 	vldr	s6, [ip, #-24]	; 0xffffffe8
240171c2:	eb0b 0484 	add.w	r4, fp, r4, lsl #2
240171c6:	ed5c 2a05 	vldr	s5, [ip, #-20]	; 0xffffffec
240171ca:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 240174ac <arm_fir_interpolate_f32+0x3a0>
240171ce:	f1b8 0f00 	cmp.w	r8, #0
240171d2:	f000 8163 	beq.w	2401749c <arm_fir_interpolate_f32+0x390>
240171d6:	eef0 5a47 	vmov.f32	s11, s14
240171da:	00a9      	lsls	r1, r5, #2
240171dc:	eef0 4a47 	vmov.f32	s9, s14
240171e0:	4662      	mov	r2, ip
240171e2:	eef0 6a47 	vmov.f32	s13, s14
240171e6:	4623      	mov	r3, r4
240171e8:	ed52 1a04 	vldr	s3, [r2, #-16]
240171ec:	3210      	adds	r2, #16
240171ee:	edd3 7a00 	vldr	s15, [r3]
240171f2:	440b      	add	r3, r1
240171f4:	ee27 6a82 	vmul.f32	s12, s15, s4
240171f8:	edd3 3a00 	vldr	s7, [r3]
240171fc:	ee27 4a83 	vmul.f32	s8, s15, s6
24017200:	ed12 2a07 	vldr	s4, [r2, #-28]	; 0xffffffe4
24017204:	ee27 5aa2 	vmul.f32	s10, s15, s5
24017208:	440b      	add	r3, r1
2401720a:	ee61 7aa7 	vmul.f32	s15, s3, s15
2401720e:	ee76 6a26 	vadd.f32	s13, s12, s13
24017212:	ed93 6a00 	vldr	s12, [r3]
24017216:	ee63 0a83 	vmul.f32	s1, s7, s6
2401721a:	ed12 3a06 	vldr	s6, [r2, #-24]	; 0xffffffe8
2401721e:	ee75 5a25 	vadd.f32	s11, s10, s11
24017222:	440b      	add	r3, r1
24017224:	ee21 1aa3 	vmul.f32	s2, s3, s7
24017228:	ee74 4a24 	vadd.f32	s9, s8, s9
2401722c:	ed93 5a00 	vldr	s10, [r3]
24017230:	ee23 4aa2 	vmul.f32	s8, s7, s5
24017234:	440b      	add	r3, r1
24017236:	ee37 7a87 	vadd.f32	s14, s15, s14
2401723a:	ee63 3a82 	vmul.f32	s7, s7, s4
2401723e:	ee74 4a24 	vadd.f32	s9, s8, s9
24017242:	ee70 0aa6 	vadd.f32	s1, s1, s13
24017246:	ee21 4a86 	vmul.f32	s8, s3, s12
2401724a:	ee66 6a22 	vmul.f32	s13, s12, s5
2401724e:	ed52 2a05 	vldr	s5, [r2, #-20]	; 0xffffffec
24017252:	ee31 1a25 	vadd.f32	s2, s2, s11
24017256:	4296      	cmp	r6, r2
24017258:	ee73 7a87 	vadd.f32	s15, s7, s14
2401725c:	ee62 5a06 	vmul.f32	s11, s4, s12
24017260:	ee26 7a03 	vmul.f32	s14, s12, s6
24017264:	ee61 1a85 	vmul.f32	s3, s3, s10
24017268:	ee34 4a24 	vadd.f32	s8, s8, s9
2401726c:	ee35 6a81 	vadd.f32	s12, s11, s2
24017270:	ee62 4a05 	vmul.f32	s9, s4, s10
24017274:	ee63 5a05 	vmul.f32	s11, s6, s10
24017278:	ee76 6aa0 	vadd.f32	s13, s13, s1
2401727c:	ee37 7a27 	vadd.f32	s14, s14, s15
24017280:	ee25 5a22 	vmul.f32	s10, s10, s5
24017284:	ee71 6aa6 	vadd.f32	s13, s3, s13
24017288:	ee74 4a84 	vadd.f32	s9, s9, s8
2401728c:	ee75 5a86 	vadd.f32	s11, s11, s12
24017290:	ee35 7a07 	vadd.f32	s14, s10, s14
24017294:	d1a8      	bne.n	240171e8 <arm_fir_interpolate_f32+0xdc>
24017296:	fb08 f305 	mul.w	r3, r8, r5
2401729a:	9a01      	ldr	r2, [sp, #4]
2401729c:	eb04 1403 	add.w	r4, r4, r3, lsl #4
240172a0:	f1b9 0f00 	cmp.w	r9, #0
240172a4:	d01e      	beq.n	240172e4 <arm_fir_interpolate_f32+0x1d8>
240172a6:	00ad      	lsls	r5, r5, #2
240172a8:	464b      	mov	r3, r9
240172aa:	ed94 6a00 	vldr	s12, [r4]
240172ae:	3b01      	subs	r3, #1
240172b0:	ecf2 7a01 	vldmia	r2!, {s15}
240172b4:	442c      	add	r4, r5
240172b6:	ee66 3a02 	vmul.f32	s7, s12, s4
240172ba:	ee26 4a03 	vmul.f32	s8, s12, s6
240172be:	ee26 5a22 	vmul.f32	s10, s12, s5
240172c2:	eeb0 2a43 	vmov.f32	s4, s6
240172c6:	eeb0 3a62 	vmov.f32	s6, s5
240172ca:	eef0 2a67 	vmov.f32	s5, s15
240172ce:	ee67 7a86 	vmul.f32	s15, s15, s12
240172d2:	ee76 6aa3 	vadd.f32	s13, s13, s7
240172d6:	ee74 4a84 	vadd.f32	s9, s9, s8
240172da:	ee75 5a85 	vadd.f32	s11, s11, s10
240172de:	ee37 7a27 	vadd.f32	s14, s14, s15
240172e2:	d1e2      	bne.n	240172aa <arm_fir_interpolate_f32+0x19e>
240172e4:	edc7 6a00 	vstr	s13, [r7]
240172e8:	45f2      	cmp	sl, lr
240172ea:	7803      	ldrb	r3, [r0, #0]
240172ec:	f10e 0201 	add.w	r2, lr, #1
240172f0:	eb07 0383 	add.w	r3, r7, r3, lsl #2
240172f4:	edc3 4a00 	vstr	s9, [r3]
240172f8:	7803      	ldrb	r3, [r0, #0]
240172fa:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
240172fe:	edc3 5a00 	vstr	s11, [r3]
24017302:	7803      	ldrb	r3, [r0, #0]
24017304:	eb03 0343 	add.w	r3, r3, r3, lsl #1
24017308:	eb07 0383 	add.w	r3, r7, r3, lsl #2
2401730c:	f107 0704 	add.w	r7, r7, #4
24017310:	ed83 7a00 	vstr	s14, [r3]
24017314:	d002      	beq.n	2401731c <arm_fir_interpolate_f32+0x210>
24017316:	4696      	mov	lr, r2
24017318:	7805      	ldrb	r5, [r0, #0]
2401731a:	e74c      	b.n	240171b6 <arm_fir_interpolate_f32+0xaa>
2401731c:	9b02      	ldr	r3, [sp, #8]
2401731e:	f8dd b018 	ldr.w	fp, [sp, #24]
24017322:	eb03 038a 	add.w	r3, r3, sl, lsl #2
24017326:	9302      	str	r3, [sp, #8]
24017328:	7803      	ldrb	r3, [r0, #0]
2401732a:	9a03      	ldr	r2, [sp, #12]
2401732c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
24017330:	f10b 0b10 	add.w	fp, fp, #16
24017334:	f10c 0c10 	add.w	ip, ip, #16
24017338:	3210      	adds	r2, #16
2401733a:	3610      	adds	r6, #16
2401733c:	9203      	str	r2, [sp, #12]
2401733e:	9a01      	ldr	r2, [sp, #4]
24017340:	3210      	adds	r2, #16
24017342:	9201      	str	r2, [sp, #4]
24017344:	9a02      	ldr	r2, [sp, #8]
24017346:	eb02 0383 	add.w	r3, r2, r3, lsl #2
2401734a:	9302      	str	r3, [sp, #8]
2401734c:	9b04      	ldr	r3, [sp, #16]
2401734e:	3b01      	subs	r3, #1
24017350:	9304      	str	r3, [sp, #16]
24017352:	f47f af0d 	bne.w	24017170 <arm_fir_interpolate_f32+0x64>
24017356:	9b0c      	ldr	r3, [sp, #48]	; 0x30
24017358:	9a07      	ldr	r2, [sp, #28]
2401735a:	011b      	lsls	r3, r3, #4
2401735c:	f8dd b020 	ldr.w	fp, [sp, #32]
24017360:	441a      	add	r2, r3
24017362:	9207      	str	r2, [sp, #28]
24017364:	9a0a      	ldr	r2, [sp, #40]	; 0x28
24017366:	441a      	add	r2, r3
24017368:	920a      	str	r2, [sp, #40]	; 0x28
2401736a:	9a09      	ldr	r2, [sp, #36]	; 0x24
2401736c:	441a      	add	r2, r3
2401736e:	9209      	str	r2, [sp, #36]	; 0x24
24017370:	9b0d      	ldr	r3, [sp, #52]	; 0x34
24017372:	f013 0303 	ands.w	r3, r3, #3
24017376:	f000 80b1 	beq.w	240174dc <arm_fir_interpolate_f32+0x3d0>
2401737a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
2401737c:	009d      	lsls	r5, r3, #2
2401737e:	990a      	ldr	r1, [sp, #40]	; 0x28
24017380:	0894      	lsrs	r4, r2, #2
24017382:	f002 0a03 	and.w	sl, r2, #3
24017386:	9a09      	ldr	r2, [sp, #36]	; 0x24
24017388:	0123      	lsls	r3, r4, #4
2401738a:	9106      	str	r1, [sp, #24]
2401738c:	f102 0110 	add.w	r1, r2, #16
24017390:	46a1      	mov	r9, r4
24017392:	f103 0e10 	add.w	lr, r3, #16
24017396:	18d3      	adds	r3, r2, r3
24017398:	9101      	str	r1, [sp, #4]
2401739a:	9907      	ldr	r1, [sp, #28]
2401739c:	4496      	add	lr, r2
2401739e:	950c      	str	r5, [sp, #48]	; 0x30
240173a0:	4429      	add	r1, r5
240173a2:	9303      	str	r3, [sp, #12]
240173a4:	f8cd b014 	str.w	fp, [sp, #20]
240173a8:	910a      	str	r1, [sp, #40]	; 0x28
240173aa:	9004      	str	r0, [sp, #16]
240173ac:	9a07      	ldr	r2, [sp, #28]
240173ae:	f852 3b04 	ldr.w	r3, [r2], #4
240173b2:	9207      	str	r2, [sp, #28]
240173b4:	9a01      	ldr	r2, [sp, #4]
240173b6:	3a10      	subs	r2, #16
240173b8:	9208      	str	r2, [sp, #32]
240173ba:	9a06      	ldr	r2, [sp, #24]
240173bc:	f842 3b04 	str.w	r3, [r2], #4
240173c0:	9b04      	ldr	r3, [sp, #16]
240173c2:	9206      	str	r2, [sp, #24]
240173c4:	f893 b000 	ldrb.w	fp, [r3]
240173c8:	f1bb 0f00 	cmp.w	fp, #0
240173cc:	d074      	beq.n	240174b8 <arm_fir_interpolate_f32+0x3ac>
240173ce:	465f      	mov	r7, fp
240173d0:	f04f 0c01 	mov.w	ip, #1
240173d4:	9b05      	ldr	r3, [sp, #20]
240173d6:	eba7 000c 	sub.w	r0, r7, ip
240173da:	f8dd 8008 	ldr.w	r8, [sp, #8]
240173de:	eb03 0080 	add.w	r0, r3, r0, lsl #2
240173e2:	f1b9 0f00 	cmp.w	r9, #0
240173e6:	d055      	beq.n	24017494 <arm_fir_interpolate_f32+0x388>
240173e8:	b23a      	sxth	r2, r7
240173ea:	9b01      	ldr	r3, [sp, #4]
240173ec:	4601      	mov	r1, r0
240173ee:	eddf 7a2f 	vldr	s15, [pc, #188]	; 240174ac <arm_fir_interpolate_f32+0x3a0>
240173f2:	0094      	lsls	r4, r2, #2
240173f4:	0115      	lsls	r5, r2, #4
240173f6:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
240173fa:	ed13 7a04 	vldr	s14, [r3, #-16]
240173fe:	190e      	adds	r6, r1, r4
24017400:	edd1 6a00 	vldr	s13, [r1]
24017404:	3310      	adds	r3, #16
24017406:	ed53 5a07 	vldr	s11, [r3, #-28]	; 0xffffffe4
2401740a:	4429      	add	r1, r5
2401740c:	ee27 7a26 	vmul.f32	s14, s14, s13
24017410:	ed96 6a00 	vldr	s12, [r6]
24017414:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
24017418:	1916      	adds	r6, r2, r4
2401741a:	ee26 6a25 	vmul.f32	s12, s12, s11
2401741e:	ed92 5a00 	vldr	s10, [r2]
24017422:	ee77 7a27 	vadd.f32	s15, s14, s15
24017426:	edd6 5a00 	vldr	s11, [r6]
2401742a:	ee26 7a85 	vmul.f32	s14, s13, s10
2401742e:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
24017432:	459e      	cmp	lr, r3
24017434:	442a      	add	r2, r5
24017436:	ee76 7a27 	vadd.f32	s15, s12, s15
2401743a:	ee65 6aa6 	vmul.f32	s13, s11, s13
2401743e:	ee77 7a27 	vadd.f32	s15, s14, s15
24017442:	ee76 7aa7 	vadd.f32	s15, s13, s15
24017446:	d1d8      	bne.n	240173fa <arm_fir_interpolate_f32+0x2ee>
24017448:	fb09 f404 	mul.w	r4, r9, r4
2401744c:	9a03      	ldr	r2, [sp, #12]
2401744e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
24017452:	f1ba 0f00 	cmp.w	sl, #0
24017456:	d00c      	beq.n	24017472 <arm_fir_interpolate_f32+0x366>
24017458:	00bf      	lsls	r7, r7, #2
2401745a:	4653      	mov	r3, sl
2401745c:	edd0 6a00 	vldr	s13, [r0]
24017460:	3b01      	subs	r3, #1
24017462:	ecb2 7a01 	vldmia	r2!, {s14}
24017466:	4438      	add	r0, r7
24017468:	ee27 7a26 	vmul.f32	s14, s14, s13
2401746c:	ee77 7a87 	vadd.f32	s15, s15, s14
24017470:	d1f4      	bne.n	2401745c <arm_fir_interpolate_f32+0x350>
24017472:	45e3      	cmp	fp, ip
24017474:	ece8 7a01 	vstmia	r8!, {s15}
24017478:	f10c 0301 	add.w	r3, ip, #1
2401747c:	d018      	beq.n	240174b0 <arm_fir_interpolate_f32+0x3a4>
2401747e:	469c      	mov	ip, r3
24017480:	9b04      	ldr	r3, [sp, #16]
24017482:	781f      	ldrb	r7, [r3, #0]
24017484:	9b05      	ldr	r3, [sp, #20]
24017486:	eba7 000c 	sub.w	r0, r7, ip
2401748a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
2401748e:	f1b9 0f00 	cmp.w	r9, #0
24017492:	d1a9      	bne.n	240173e8 <arm_fir_interpolate_f32+0x2dc>
24017494:	9a08      	ldr	r2, [sp, #32]
24017496:	eddf 7a05 	vldr	s15, [pc, #20]	; 240174ac <arm_fir_interpolate_f32+0x3a0>
2401749a:	e7da      	b.n	24017452 <arm_fir_interpolate_f32+0x346>
2401749c:	9a05      	ldr	r2, [sp, #20]
2401749e:	eef0 5a47 	vmov.f32	s11, s14
240174a2:	eef0 4a47 	vmov.f32	s9, s14
240174a6:	eef0 6a47 	vmov.f32	s13, s14
240174aa:	e6f9      	b.n	240172a0 <arm_fir_interpolate_f32+0x194>
240174ac:	00000000 	.word	0x00000000
240174b0:	9b02      	ldr	r3, [sp, #8]
240174b2:	eb03 038b 	add.w	r3, r3, fp, lsl #2
240174b6:	9302      	str	r3, [sp, #8]
240174b8:	9b03      	ldr	r3, [sp, #12]
240174ba:	f10e 0e04 	add.w	lr, lr, #4
240174be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
240174c0:	3304      	adds	r3, #4
240174c2:	9303      	str	r3, [sp, #12]
240174c4:	9b01      	ldr	r3, [sp, #4]
240174c6:	3304      	adds	r3, #4
240174c8:	9301      	str	r3, [sp, #4]
240174ca:	9b07      	ldr	r3, [sp, #28]
240174cc:	4293      	cmp	r3, r2
240174ce:	f47f af6d 	bne.w	240173ac <arm_fir_interpolate_f32+0x2a0>
240174d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
240174d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
240174d6:	9804      	ldr	r0, [sp, #16]
240174d8:	4413      	add	r3, r2
240174da:	9309      	str	r3, [sp, #36]	; 0x24
240174dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
240174de:	6885      	ldr	r5, [r0, #8]
240174e0:	1e5c      	subs	r4, r3, #1
240174e2:	08a6      	lsrs	r6, r4, #2
240174e4:	d020      	beq.n	24017528 <arm_fir_interpolate_f32+0x41c>
240174e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
240174e8:	4631      	mov	r1, r6
240174ea:	f103 0210 	add.w	r2, r3, #16
240174ee:	f105 0310 	add.w	r3, r5, #16
240174f2:	f852 0c10 	ldr.w	r0, [r2, #-16]
240174f6:	3901      	subs	r1, #1
240174f8:	f102 0210 	add.w	r2, r2, #16
240174fc:	f103 0310 	add.w	r3, r3, #16
24017500:	f843 0c20 	str.w	r0, [r3, #-32]
24017504:	f852 0c1c 	ldr.w	r0, [r2, #-28]
24017508:	f843 0c1c 	str.w	r0, [r3, #-28]
2401750c:	f852 0c18 	ldr.w	r0, [r2, #-24]
24017510:	f843 0c18 	str.w	r0, [r3, #-24]
24017514:	f852 0c14 	ldr.w	r0, [r2, #-20]
24017518:	f843 0c14 	str.w	r0, [r3, #-20]
2401751c:	d1e9      	bne.n	240174f2 <arm_fir_interpolate_f32+0x3e6>
2401751e:	0133      	lsls	r3, r6, #4
24017520:	9a09      	ldr	r2, [sp, #36]	; 0x24
24017522:	441d      	add	r5, r3
24017524:	441a      	add	r2, r3
24017526:	9209      	str	r2, [sp, #36]	; 0x24
24017528:	f014 0403 	ands.w	r4, r4, #3
2401752c:	d00a      	beq.n	24017544 <arm_fir_interpolate_f32+0x438>
2401752e:	9a09      	ldr	r2, [sp, #36]	; 0x24
24017530:	3c01      	subs	r4, #1
24017532:	6813      	ldr	r3, [r2, #0]
24017534:	602b      	str	r3, [r5, #0]
24017536:	d005      	beq.n	24017544 <arm_fir_interpolate_f32+0x438>
24017538:	6853      	ldr	r3, [r2, #4]
2401753a:	2c01      	cmp	r4, #1
2401753c:	606b      	str	r3, [r5, #4]
2401753e:	d001      	beq.n	24017544 <arm_fir_interpolate_f32+0x438>
24017540:	6893      	ldr	r3, [r2, #8]
24017542:	60ab      	str	r3, [r5, #8]
24017544:	b00f      	add	sp, #60	; 0x3c
24017546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2401754a:	bf00      	nop

2401754c <arm_fir_decimate_init_f32>:
2401754c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24017550:	e9dd 8c06 	ldrd	r8, ip, [sp, #24]
24017554:	fbbc f4f2 	udiv	r4, ip, r2
24017558:	fb02 c414 	mls	r4, r2, r4, ip
2401755c:	b99c      	cbnz	r4, 24017586 <arm_fir_decimate_init_f32+0x3a>
2401755e:	460f      	mov	r7, r1
24017560:	4616      	mov	r6, r2
24017562:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
24017566:	4605      	mov	r5, r0
24017568:	443a      	add	r2, r7
2401756a:	8069      	strh	r1, [r5, #2]
2401756c:	6043      	str	r3, [r0, #4]
2401756e:	4621      	mov	r1, r4
24017570:	4462      	add	r2, ip
24017572:	4640      	mov	r0, r8
24017574:	0092      	lsls	r2, r2, #2
24017576:	f000 fa63 	bl	24017a40 <memset>
2401757a:	4620      	mov	r0, r4
2401757c:	f8c5 8008 	str.w	r8, [r5, #8]
24017580:	702e      	strb	r6, [r5, #0]
24017582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
24017586:	f06f 0001 	mvn.w	r0, #1
2401758a:	e7fa      	b.n	24017582 <arm_fir_decimate_init_f32+0x36>

2401758c <arm_fir_decimate_f32>:
2401758c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24017590:	4605      	mov	r5, r0
24017592:	b08d      	sub	sp, #52	; 0x34
24017594:	4694      	mov	ip, r2
24017596:	782c      	ldrb	r4, [r5, #0]
24017598:	886f      	ldrh	r7, [r5, #2]
2401759a:	9001      	str	r0, [sp, #4]
2401759c:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
240175a0:	68ae      	ldr	r6, [r5, #8]
240175a2:	4438      	add	r0, r7
240175a4:	686d      	ldr	r5, [r5, #4]
240175a6:	9207      	str	r2, [sp, #28]
240175a8:	970a      	str	r7, [sp, #40]	; 0x28
240175aa:	eb06 0b80 	add.w	fp, r6, r0, lsl #2
240175ae:	9508      	str	r5, [sp, #32]
240175b0:	fbb3 f3f4 	udiv	r3, r3, r4
240175b4:	930b      	str	r3, [sp, #44]	; 0x2c
240175b6:	089b      	lsrs	r3, r3, #2
240175b8:	9309      	str	r3, [sp, #36]	; 0x24
240175ba:	f000 80ef 	beq.w	2401779c <arm_fir_decimate_f32+0x210>
240175be:	08ba      	lsrs	r2, r7, #2
240175c0:	462b      	mov	r3, r5
240175c2:	3510      	adds	r5, #16
240175c4:	f007 0703 	and.w	r7, r7, #3
240175c8:	9205      	str	r2, [sp, #20]
240175ca:	0112      	lsls	r2, r2, #4
240175cc:	9809      	ldr	r0, [sp, #36]	; 0x24
240175ce:	f10c 0910 	add.w	r9, ip, #16
240175d2:	4413      	add	r3, r2
240175d4:	9100      	str	r1, [sp, #0]
240175d6:	eb05 0e02 	add.w	lr, r5, r2
240175da:	4611      	mov	r1, r2
240175dc:	9503      	str	r5, [sp, #12]
240175de:	9704      	str	r7, [sp, #16]
240175e0:	9002      	str	r0, [sp, #8]
240175e2:	9306      	str	r3, [sp, #24]
240175e4:	00a4      	lsls	r4, r4, #2
240175e6:	4658      	mov	r0, fp
240175e8:	9a00      	ldr	r2, [sp, #0]
240175ea:	4623      	mov	r3, r4
240175ec:	f852 5b04 	ldr.w	r5, [r2], #4
240175f0:	3b01      	subs	r3, #1
240175f2:	f840 5b04 	str.w	r5, [r0], #4
240175f6:	d1f9      	bne.n	240175ec <arm_fir_decimate_f32+0x60>
240175f8:	9b01      	ldr	r3, [sp, #4]
240175fa:	00a4      	lsls	r4, r4, #2
240175fc:	eddf 0abe 	vldr	s1, [pc, #760]	; 240178f8 <arm_fir_decimate_f32+0x36c>
24017600:	f893 8000 	ldrb.w	r8, [r3]
24017604:	44a3      	add	fp, r4
24017606:	9b00      	ldr	r3, [sp, #0]
24017608:	ea4f 0888 	mov.w	r8, r8, lsl #2
2401760c:	4423      	add	r3, r4
2401760e:	eb06 0708 	add.w	r7, r6, r8
24017612:	9300      	str	r3, [sp, #0]
24017614:	eb07 0c08 	add.w	ip, r7, r8
24017618:	9b05      	ldr	r3, [sp, #20]
2401761a:	eb0c 0a08 	add.w	sl, ip, r8
2401761e:	2b00      	cmp	r3, #0
24017620:	f000 815c 	beq.w	240178dc <arm_fir_decimate_f32+0x350>
24017624:	eef0 4a60 	vmov.f32	s9, s1
24017628:	9b03      	ldr	r3, [sp, #12]
2401762a:	eef0 7a60 	vmov.f32	s15, s1
2401762e:	f106 0510 	add.w	r5, r6, #16
24017632:	eeb0 7a60 	vmov.f32	s14, s1
24017636:	f107 0410 	add.w	r4, r7, #16
2401763a:	f10c 0010 	add.w	r0, ip, #16
2401763e:	f10a 0210 	add.w	r2, sl, #16
24017642:	ed53 5a04 	vldr	s11, [r3, #-16]
24017646:	3310      	adds	r3, #16
24017648:	ed12 5a04 	vldr	s10, [r2, #-16]
2401764c:	3510      	adds	r5, #16
2401764e:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
24017652:	3410      	adds	r4, #16
24017654:	ed14 1a08 	vldr	s2, [r4, #-32]	; 0xffffffe0
24017658:	3010      	adds	r0, #16
2401765a:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
2401765e:	ee65 6aa6 	vmul.f32	s13, s11, s13
24017662:	ee25 1a81 	vmul.f32	s2, s11, s2
24017666:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
2401766a:	ee65 3aa3 	vmul.f32	s7, s11, s7
2401766e:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
24017672:	ee65 5a85 	vmul.f32	s11, s11, s10
24017676:	ed15 2a07 	vldr	s4, [r5, #-28]	; 0xffffffe4
2401767a:	ed12 5a03 	vldr	s10, [r2, #-12]
2401767e:	ee36 7a87 	vadd.f32	s14, s13, s14
24017682:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
24017686:	ee73 1aa4 	vadd.f32	s3, s7, s9
2401768a:	ee26 2a02 	vmul.f32	s4, s12, s4
2401768e:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
24017692:	ee31 1a27 	vadd.f32	s2, s2, s15
24017696:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
2401769a:	ee66 7a22 	vmul.f32	s15, s12, s5
2401769e:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
240176a2:	ee26 3a03 	vmul.f32	s6, s12, s6
240176a6:	ed50 4a06 	vldr	s9, [r0, #-24]	; 0xffffffe8
240176aa:	ee75 5aa0 	vadd.f32	s11, s11, s1
240176ae:	ed52 0a02 	vldr	s1, [r2, #-8]
240176b2:	ee26 6a05 	vmul.f32	s12, s12, s10
240176b6:	ed13 5a05 	vldr	s10, [r3, #-20]	; 0xffffffec
240176ba:	ee72 2a07 	vadd.f32	s5, s4, s14
240176be:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
240176c2:	ee77 7a81 	vadd.f32	s15, s15, s2
240176c6:	ed10 2a05 	vldr	s4, [r0, #-20]	; 0xffffffec
240176ca:	ee33 3a21 	vadd.f32	s6, s6, s3
240176ce:	ed14 1a05 	vldr	s2, [r4, #-20]	; 0xffffffec
240176d2:	ee66 3aa3 	vmul.f32	s7, s13, s7
240176d6:	ed52 1a01 	vldr	s3, [r2, #-4]
240176da:	ee26 4a84 	vmul.f32	s8, s13, s8
240176de:	459e      	cmp	lr, r3
240176e0:	ee66 4aa4 	vmul.f32	s9, s13, s9
240176e4:	f102 0210 	add.w	r2, r2, #16
240176e8:	ee66 6aa0 	vmul.f32	s13, s13, s1
240176ec:	ee36 6a25 	vadd.f32	s12, s12, s11
240176f0:	ee25 7a07 	vmul.f32	s14, s10, s14
240176f4:	ee34 4a27 	vadd.f32	s8, s8, s15
240176f8:	ee74 4a83 	vadd.f32	s9, s9, s6
240176fc:	ee65 7a01 	vmul.f32	s15, s10, s2
24017700:	ee25 3a02 	vmul.f32	s6, s10, s4
24017704:	ee73 3aa2 	vadd.f32	s7, s7, s5
24017708:	ee76 6a86 	vadd.f32	s13, s13, s12
2401770c:	ee25 5a21 	vmul.f32	s10, s10, s3
24017710:	ee37 7a23 	vadd.f32	s14, s14, s7
24017714:	ee77 7a84 	vadd.f32	s15, s15, s8
24017718:	ee73 4a24 	vadd.f32	s9, s6, s9
2401771c:	ee75 0a26 	vadd.f32	s1, s10, s13
24017720:	d18f      	bne.n	24017642 <arm_fir_decimate_f32+0xb6>
24017722:	440e      	add	r6, r1
24017724:	440f      	add	r7, r1
24017726:	448c      	add	ip, r1
24017728:	eb0a 0001 	add.w	r0, sl, r1
2401772c:	9a06      	ldr	r2, [sp, #24]
2401772e:	9b04      	ldr	r3, [sp, #16]
24017730:	b1db      	cbz	r3, 2401776a <arm_fir_decimate_f32+0x1de>
24017732:	ecb2 5a01 	vldmia	r2!, {s10}
24017736:	3b01      	subs	r3, #1
24017738:	ecf6 2a01 	vldmia	r6!, {s5}
2401773c:	ecf7 3a01 	vldmia	r7!, {s7}
24017740:	ecbc 4a01 	vldmia	ip!, {s8}
24017744:	ee65 2a22 	vmul.f32	s5, s10, s5
24017748:	ecf0 6a01 	vldmia	r0!, {s13}
2401774c:	ee65 3a23 	vmul.f32	s7, s10, s7
24017750:	ee25 4a04 	vmul.f32	s8, s10, s8
24017754:	ee25 5a26 	vmul.f32	s10, s10, s13
24017758:	ee37 7a22 	vadd.f32	s14, s14, s5
2401775c:	ee77 7aa3 	vadd.f32	s15, s15, s7
24017760:	ee74 4a84 	vadd.f32	s9, s9, s8
24017764:	ee70 0a85 	vadd.f32	s1, s1, s10
24017768:	d1e3      	bne.n	24017732 <arm_fir_decimate_f32+0x1a6>
2401776a:	9b02      	ldr	r3, [sp, #8]
2401776c:	eb0a 0608 	add.w	r6, sl, r8
24017770:	ed09 7a04 	vstr	s14, [r9, #-16]
24017774:	f109 0910 	add.w	r9, r9, #16
24017778:	3b01      	subs	r3, #1
2401777a:	ed49 7a07 	vstr	s15, [r9, #-28]	; 0xffffffe4
2401777e:	ed49 4a06 	vstr	s9, [r9, #-24]	; 0xffffffe8
24017782:	ed49 0a05 	vstr	s1, [r9, #-20]	; 0xffffffec
24017786:	9302      	str	r3, [sp, #8]
24017788:	d002      	beq.n	24017790 <arm_fir_decimate_f32+0x204>
2401778a:	9b01      	ldr	r3, [sp, #4]
2401778c:	781c      	ldrb	r4, [r3, #0]
2401778e:	e729      	b.n	240175e4 <arm_fir_decimate_f32+0x58>
24017790:	9b07      	ldr	r3, [sp, #28]
24017792:	9a09      	ldr	r2, [sp, #36]	; 0x24
24017794:	9900      	ldr	r1, [sp, #0]
24017796:	eb03 1302 	add.w	r3, r3, r2, lsl #4
2401779a:	9307      	str	r3, [sp, #28]
2401779c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
2401779e:	f013 0803 	ands.w	r8, r3, #3
240177a2:	d067      	beq.n	24017874 <arm_fir_decimate_f32+0x2e8>
240177a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
240177a6:	9808      	ldr	r0, [sp, #32]
240177a8:	ea4f 0e93 	mov.w	lr, r3, lsr #2
240177ac:	9d07      	ldr	r5, [sp, #28]
240177ae:	4602      	mov	r2, r0
240177b0:	f003 0703 	and.w	r7, r3, #3
240177b4:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
240177b8:	f8cd e000 	str.w	lr, [sp]
240177bc:	3210      	adds	r2, #16
240177be:	eb05 0888 	add.w	r8, r5, r8, lsl #2
240177c2:	eb00 090c 	add.w	r9, r0, ip
240177c6:	f8dd e004 	ldr.w	lr, [sp, #4]
240177ca:	eb02 040c 	add.w	r4, r2, ip
240177ce:	46aa      	mov	sl, r5
240177d0:	9203      	str	r2, [sp, #12]
240177d2:	f89e 5000 	ldrb.w	r5, [lr]
240177d6:	4658      	mov	r0, fp
240177d8:	460a      	mov	r2, r1
240177da:	462b      	mov	r3, r5
240177dc:	ecf2 7a01 	vldmia	r2!, {s15}
240177e0:	3b01      	subs	r3, #1
240177e2:	ece0 7a01 	vstmia	r0!, {s15}
240177e6:	d1f9      	bne.n	240177dc <arm_fir_decimate_f32+0x250>
240177e8:	00ad      	lsls	r5, r5, #2
240177ea:	9b00      	ldr	r3, [sp, #0]
240177ec:	4429      	add	r1, r5
240177ee:	44ab      	add	fp, r5
240177f0:	2b00      	cmp	r3, #0
240177f2:	d07c      	beq.n	240178ee <arm_fir_decimate_f32+0x362>
240177f4:	9b03      	ldr	r3, [sp, #12]
240177f6:	f106 0210 	add.w	r2, r6, #16
240177fa:	eddf 7a3f 	vldr	s15, [pc, #252]	; 240178f8 <arm_fir_decimate_f32+0x36c>
240177fe:	ed13 7a04 	vldr	s14, [r3, #-16]
24017802:	3310      	adds	r3, #16
24017804:	ed52 6a04 	vldr	s13, [r2, #-16]
24017808:	3210      	adds	r2, #16
2401780a:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
2401780e:	ee27 7a26 	vmul.f32	s14, s14, s13
24017812:	ed52 5a07 	vldr	s11, [r2, #-28]	; 0xffffffe4
24017816:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
2401781a:	ee26 6a25 	vmul.f32	s12, s12, s11
2401781e:	ed12 5a06 	vldr	s10, [r2, #-24]	; 0xffffffe8
24017822:	ee77 7a27 	vadd.f32	s15, s14, s15
24017826:	ed53 5a05 	vldr	s11, [r3, #-20]	; 0xffffffec
2401782a:	ee26 7a85 	vmul.f32	s14, s13, s10
2401782e:	ed52 6a05 	vldr	s13, [r2, #-20]	; 0xffffffec
24017832:	429c      	cmp	r4, r3
24017834:	ee76 7a27 	vadd.f32	s15, s12, s15
24017838:	ee65 6aa6 	vmul.f32	s13, s11, s13
2401783c:	ee77 7a27 	vadd.f32	s15, s14, s15
24017840:	ee76 7aa7 	vadd.f32	s15, s13, s15
24017844:	d1db      	bne.n	240177fe <arm_fir_decimate_f32+0x272>
24017846:	eb06 000c 	add.w	r0, r6, ip
2401784a:	464a      	mov	r2, r9
2401784c:	b157      	cbz	r7, 24017864 <arm_fir_decimate_f32+0x2d8>
2401784e:	463b      	mov	r3, r7
24017850:	ecb2 7a01 	vldmia	r2!, {s14}
24017854:	3b01      	subs	r3, #1
24017856:	ecf0 6a01 	vldmia	r0!, {s13}
2401785a:	ee27 7a26 	vmul.f32	s14, s14, s13
2401785e:	ee77 7a87 	vadd.f32	s15, s15, s14
24017862:	d1f5      	bne.n	24017850 <arm_fir_decimate_f32+0x2c4>
24017864:	f89e 3000 	ldrb.w	r3, [lr]
24017868:	ecea 7a01 	vstmia	sl!, {s15}
2401786c:	45c2      	cmp	sl, r8
2401786e:	eb06 0683 	add.w	r6, r6, r3, lsl #2
24017872:	d1ae      	bne.n	240177d2 <arm_fir_decimate_f32+0x246>
24017874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
24017876:	1e5c      	subs	r4, r3, #1
24017878:	9b01      	ldr	r3, [sp, #4]
2401787a:	08a5      	lsrs	r5, r4, #2
2401787c:	689f      	ldr	r7, [r3, #8]
2401787e:	d01d      	beq.n	240178bc <arm_fir_decimate_f32+0x330>
24017880:	f106 0210 	add.w	r2, r6, #16
24017884:	f107 0310 	add.w	r3, r7, #16
24017888:	4629      	mov	r1, r5
2401788a:	f852 0c10 	ldr.w	r0, [r2, #-16]
2401788e:	3901      	subs	r1, #1
24017890:	f102 0210 	add.w	r2, r2, #16
24017894:	f103 0310 	add.w	r3, r3, #16
24017898:	f843 0c20 	str.w	r0, [r3, #-32]
2401789c:	f852 0c1c 	ldr.w	r0, [r2, #-28]
240178a0:	f843 0c1c 	str.w	r0, [r3, #-28]
240178a4:	f852 0c18 	ldr.w	r0, [r2, #-24]
240178a8:	f843 0c18 	str.w	r0, [r3, #-24]
240178ac:	f852 0c14 	ldr.w	r0, [r2, #-20]
240178b0:	f843 0c14 	str.w	r0, [r3, #-20]
240178b4:	d1e9      	bne.n	2401788a <arm_fir_decimate_f32+0x2fe>
240178b6:	012d      	lsls	r5, r5, #4
240178b8:	442e      	add	r6, r5
240178ba:	442f      	add	r7, r5
240178bc:	f014 0403 	ands.w	r4, r4, #3
240178c0:	d009      	beq.n	240178d6 <arm_fir_decimate_f32+0x34a>
240178c2:	6833      	ldr	r3, [r6, #0]
240178c4:	3c01      	subs	r4, #1
240178c6:	603b      	str	r3, [r7, #0]
240178c8:	d005      	beq.n	240178d6 <arm_fir_decimate_f32+0x34a>
240178ca:	6873      	ldr	r3, [r6, #4]
240178cc:	2c01      	cmp	r4, #1
240178ce:	607b      	str	r3, [r7, #4]
240178d0:	d001      	beq.n	240178d6 <arm_fir_decimate_f32+0x34a>
240178d2:	68b3      	ldr	r3, [r6, #8]
240178d4:	60bb      	str	r3, [r7, #8]
240178d6:	b00d      	add	sp, #52	; 0x34
240178d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
240178dc:	4650      	mov	r0, sl
240178de:	9a08      	ldr	r2, [sp, #32]
240178e0:	eef0 4a60 	vmov.f32	s9, s1
240178e4:	eef0 7a60 	vmov.f32	s15, s1
240178e8:	eeb0 7a60 	vmov.f32	s14, s1
240178ec:	e71f      	b.n	2401772e <arm_fir_decimate_f32+0x1a2>
240178ee:	9a08      	ldr	r2, [sp, #32]
240178f0:	4630      	mov	r0, r6
240178f2:	eddf 7a01 	vldr	s15, [pc, #4]	; 240178f8 <arm_fir_decimate_f32+0x36c>
240178f6:	e7a9      	b.n	2401784c <arm_fir_decimate_f32+0x2c0>
240178f8:	00000000 	.word	0x00000000

240178fc <arm_sin_f32>:
240178fc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 2401797c <arm_sin_f32+0x80>
24017900:	ee20 0a27 	vmul.f32	s0, s0, s15
24017904:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24017908:	eefd 7ac0 	vcvt.s32.f32	s15, s0
2401790c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017910:	d504      	bpl.n	2401791c <arm_sin_f32+0x20>
24017912:	ee17 3a90 	vmov	r3, s15
24017916:	3b01      	subs	r3, #1
24017918:	ee07 3a90 	vmov	s15, r3
2401791c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24017920:	eddf 6a17 	vldr	s13, [pc, #92]	; 24017980 <arm_sin_f32+0x84>
24017924:	ee70 7a67 	vsub.f32	s15, s0, s15
24017928:	ee67 7aa6 	vmul.f32	s15, s15, s13
2401792c:	eebc 7ae7 	vcvt.u32.f32	s14, s15
24017930:	ee17 3a10 	vmov	r3, s14
24017934:	b29b      	uxth	r3, r3
24017936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2401793a:	d21a      	bcs.n	24017972 <arm_sin_f32+0x76>
2401793c:	ee07 3a10 	vmov	s14, r3
24017940:	1c59      	adds	r1, r3, #1
24017942:	eeb8 0a47 	vcvt.f32.u32	s0, s14
24017946:	ee77 7ac0 	vsub.f32	s15, s15, s0
2401794a:	4a0e      	ldr	r2, [pc, #56]	; (24017984 <arm_sin_f32+0x88>)
2401794c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24017950:	eb02 0383 	add.w	r3, r2, r3, lsl #2
24017954:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24017958:	ee30 0a67 	vsub.f32	s0, s0, s15
2401795c:	edd3 6a00 	vldr	s13, [r3]
24017960:	ed92 7a00 	vldr	s14, [r2]
24017964:	ee20 0a26 	vmul.f32	s0, s0, s13
24017968:	ee67 7a87 	vmul.f32	s15, s15, s14
2401796c:	ee30 0a27 	vadd.f32	s0, s0, s15
24017970:	4770      	bx	lr
24017972:	ee77 7ae6 	vsub.f32	s15, s15, s13
24017976:	2101      	movs	r1, #1
24017978:	2300      	movs	r3, #0
2401797a:	e7e6      	b.n	2401794a <arm_sin_f32+0x4e>
2401797c:	3e22f983 	.word	0x3e22f983
24017980:	44000000 	.word	0x44000000
24017984:	24031d54 	.word	0x24031d54

24017988 <__itoa>:
24017988:	1e93      	subs	r3, r2, #2
2401798a:	2b22      	cmp	r3, #34	; 0x22
2401798c:	b510      	push	{r4, lr}
2401798e:	460c      	mov	r4, r1
24017990:	d904      	bls.n	2401799c <__itoa+0x14>
24017992:	2300      	movs	r3, #0
24017994:	700b      	strb	r3, [r1, #0]
24017996:	461c      	mov	r4, r3
24017998:	4620      	mov	r0, r4
2401799a:	bd10      	pop	{r4, pc}
2401799c:	2a0a      	cmp	r2, #10
2401799e:	d109      	bne.n	240179b4 <__itoa+0x2c>
240179a0:	2800      	cmp	r0, #0
240179a2:	da07      	bge.n	240179b4 <__itoa+0x2c>
240179a4:	232d      	movs	r3, #45	; 0x2d
240179a6:	700b      	strb	r3, [r1, #0]
240179a8:	4240      	negs	r0, r0
240179aa:	2101      	movs	r1, #1
240179ac:	4421      	add	r1, r4
240179ae:	f000 f805 	bl	240179bc <__utoa>
240179b2:	e7f1      	b.n	24017998 <__itoa+0x10>
240179b4:	2100      	movs	r1, #0
240179b6:	e7f9      	b.n	240179ac <__itoa+0x24>

240179b8 <itoa>:
240179b8:	f7ff bfe6 	b.w	24017988 <__itoa>

240179bc <__utoa>:
240179bc:	b5f0      	push	{r4, r5, r6, r7, lr}
240179be:	4c1f      	ldr	r4, [pc, #124]	; (24017a3c <__utoa+0x80>)
240179c0:	b08b      	sub	sp, #44	; 0x2c
240179c2:	4605      	mov	r5, r0
240179c4:	460b      	mov	r3, r1
240179c6:	466e      	mov	r6, sp
240179c8:	f104 0c20 	add.w	ip, r4, #32
240179cc:	6820      	ldr	r0, [r4, #0]
240179ce:	6861      	ldr	r1, [r4, #4]
240179d0:	4637      	mov	r7, r6
240179d2:	c703      	stmia	r7!, {r0, r1}
240179d4:	3408      	adds	r4, #8
240179d6:	4564      	cmp	r4, ip
240179d8:	463e      	mov	r6, r7
240179da:	d1f7      	bne.n	240179cc <__utoa+0x10>
240179dc:	7921      	ldrb	r1, [r4, #4]
240179de:	7139      	strb	r1, [r7, #4]
240179e0:	1e91      	subs	r1, r2, #2
240179e2:	6820      	ldr	r0, [r4, #0]
240179e4:	6038      	str	r0, [r7, #0]
240179e6:	2922      	cmp	r1, #34	; 0x22
240179e8:	f04f 0100 	mov.w	r1, #0
240179ec:	d904      	bls.n	240179f8 <__utoa+0x3c>
240179ee:	7019      	strb	r1, [r3, #0]
240179f0:	460b      	mov	r3, r1
240179f2:	4618      	mov	r0, r3
240179f4:	b00b      	add	sp, #44	; 0x2c
240179f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
240179f8:	1e58      	subs	r0, r3, #1
240179fa:	4684      	mov	ip, r0
240179fc:	fbb5 f7f2 	udiv	r7, r5, r2
24017a00:	fb02 5617 	mls	r6, r2, r7, r5
24017a04:	3628      	adds	r6, #40	; 0x28
24017a06:	446e      	add	r6, sp
24017a08:	460c      	mov	r4, r1
24017a0a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
24017a0e:	f80c 6f01 	strb.w	r6, [ip, #1]!
24017a12:	462e      	mov	r6, r5
24017a14:	42b2      	cmp	r2, r6
24017a16:	f101 0101 	add.w	r1, r1, #1
24017a1a:	463d      	mov	r5, r7
24017a1c:	d9ee      	bls.n	240179fc <__utoa+0x40>
24017a1e:	2200      	movs	r2, #0
24017a20:	545a      	strb	r2, [r3, r1]
24017a22:	1919      	adds	r1, r3, r4
24017a24:	1aa5      	subs	r5, r4, r2
24017a26:	42aa      	cmp	r2, r5
24017a28:	dae3      	bge.n	240179f2 <__utoa+0x36>
24017a2a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
24017a2e:	780e      	ldrb	r6, [r1, #0]
24017a30:	7006      	strb	r6, [r0, #0]
24017a32:	3201      	adds	r2, #1
24017a34:	f801 5901 	strb.w	r5, [r1], #-1
24017a38:	e7f4      	b.n	24017a24 <__utoa+0x68>
24017a3a:	bf00      	nop
24017a3c:	24032558 	.word	0x24032558

24017a40 <memset>:
24017a40:	4402      	add	r2, r0
24017a42:	4603      	mov	r3, r0
24017a44:	4293      	cmp	r3, r2
24017a46:	d100      	bne.n	24017a4a <memset+0xa>
24017a48:	4770      	bx	lr
24017a4a:	f803 1b01 	strb.w	r1, [r3], #1
24017a4e:	e7f9      	b.n	24017a44 <memset+0x4>

24017a50 <__errno>:
24017a50:	4b01      	ldr	r3, [pc, #4]	; (24017a58 <__errno+0x8>)
24017a52:	6818      	ldr	r0, [r3, #0]
24017a54:	4770      	bx	lr
24017a56:	bf00      	nop
24017a58:	200007ac 	.word	0x200007ac

24017a5c <__libc_init_array>:
24017a5c:	b570      	push	{r4, r5, r6, lr}
24017a5e:	4d0d      	ldr	r5, [pc, #52]	; (24017a94 <__libc_init_array+0x38>)
24017a60:	4c0d      	ldr	r4, [pc, #52]	; (24017a98 <__libc_init_array+0x3c>)
24017a62:	1b64      	subs	r4, r4, r5
24017a64:	10a4      	asrs	r4, r4, #2
24017a66:	2600      	movs	r6, #0
24017a68:	42a6      	cmp	r6, r4
24017a6a:	d109      	bne.n	24017a80 <__libc_init_array+0x24>
24017a6c:	4d0b      	ldr	r5, [pc, #44]	; (24017a9c <__libc_init_array+0x40>)
24017a6e:	4c0c      	ldr	r4, [pc, #48]	; (24017aa0 <__libc_init_array+0x44>)
24017a70:	f01b fefe 	bl	24033870 <_init>
24017a74:	1b64      	subs	r4, r4, r5
24017a76:	10a4      	asrs	r4, r4, #2
24017a78:	2600      	movs	r6, #0
24017a7a:	42a6      	cmp	r6, r4
24017a7c:	d105      	bne.n	24017a8a <__libc_init_array+0x2e>
24017a7e:	bd70      	pop	{r4, r5, r6, pc}
24017a80:	f855 3b04 	ldr.w	r3, [r5], #4
24017a84:	4798      	blx	r3
24017a86:	3601      	adds	r6, #1
24017a88:	e7ee      	b.n	24017a68 <__libc_init_array+0xc>
24017a8a:	f855 3b04 	ldr.w	r3, [r5], #4
24017a8e:	4798      	blx	r3
24017a90:	3601      	adds	r6, #1
24017a92:	e7f2      	b.n	24017a7a <__libc_init_array+0x1e>
24017a94:	240338f0 	.word	0x240338f0
24017a98:	240338f0 	.word	0x240338f0
24017a9c:	240338f0 	.word	0x240338f0
24017aa0:	240338f4 	.word	0x240338f4

24017aa4 <memcpy>:
24017aa4:	440a      	add	r2, r1
24017aa6:	4291      	cmp	r1, r2
24017aa8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
24017aac:	d100      	bne.n	24017ab0 <memcpy+0xc>
24017aae:	4770      	bx	lr
24017ab0:	b510      	push	{r4, lr}
24017ab2:	f811 4b01 	ldrb.w	r4, [r1], #1
24017ab6:	f803 4f01 	strb.w	r4, [r3, #1]!
24017aba:	4291      	cmp	r1, r2
24017abc:	d1f9      	bne.n	24017ab2 <memcpy+0xe>
24017abe:	bd10      	pop	{r4, pc}

24017ac0 <frexpf>:
24017ac0:	ee10 3a10 	vmov	r3, s0
24017ac4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
24017ac8:	2100      	movs	r1, #0
24017aca:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
24017ace:	6001      	str	r1, [r0, #0]
24017ad0:	da19      	bge.n	24017b06 <frexpf+0x46>
24017ad2:	b1c2      	cbz	r2, 24017b06 <frexpf+0x46>
24017ad4:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
24017ad8:	d10a      	bne.n	24017af0 <frexpf+0x30>
24017ada:	eddf 7a0b 	vldr	s15, [pc, #44]	; 24017b08 <frexpf+0x48>
24017ade:	ee60 7a27 	vmul.f32	s15, s0, s15
24017ae2:	f06f 0118 	mvn.w	r1, #24
24017ae6:	ee17 3a90 	vmov	r3, s15
24017aea:	6001      	str	r1, [r0, #0]
24017aec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
24017af0:	6801      	ldr	r1, [r0, #0]
24017af2:	15d2      	asrs	r2, r2, #23
24017af4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
24017af8:	3a7e      	subs	r2, #126	; 0x7e
24017afa:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
24017afe:	4411      	add	r1, r2
24017b00:	ee00 3a10 	vmov	s0, r3
24017b04:	6001      	str	r1, [r0, #0]
24017b06:	4770      	bx	lr
24017b08:	4c000000 	.word	0x4c000000

24017b0c <expf>:
24017b0c:	ee10 2a10 	vmov	r2, s0
24017b10:	f240 412a 	movw	r1, #1066	; 0x42a
24017b14:	f3c2 530a 	ubfx	r3, r2, #20, #11
24017b18:	428b      	cmp	r3, r1
24017b1a:	b430      	push	{r4, r5}
24017b1c:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
24017b20:	d92a      	bls.n	24017b78 <expf+0x6c>
24017b22:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
24017b26:	d058      	beq.n	24017bda <expf+0xce>
24017b28:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
24017b2c:	d303      	bcc.n	24017b36 <expf+0x2a>
24017b2e:	ee30 0a00 	vadd.f32	s0, s0, s0
24017b32:	bc30      	pop	{r4, r5}
24017b34:	4770      	bx	lr
24017b36:	eddf 7a2a 	vldr	s15, [pc, #168]	; 24017be0 <expf+0xd4>
24017b3a:	eeb4 0ae7 	vcmpe.f32	s0, s15
24017b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017b42:	dd03      	ble.n	24017b4c <expf+0x40>
24017b44:	bc30      	pop	{r4, r5}
24017b46:	2000      	movs	r0, #0
24017b48:	f000 bc40 	b.w	240183cc <__math_oflowf>
24017b4c:	eddf 7a25 	vldr	s15, [pc, #148]	; 24017be4 <expf+0xd8>
24017b50:	eeb4 0ae7 	vcmpe.f32	s0, s15
24017b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017b58:	d503      	bpl.n	24017b62 <expf+0x56>
24017b5a:	bc30      	pop	{r4, r5}
24017b5c:	2000      	movs	r0, #0
24017b5e:	f000 bc29 	b.w	240183b4 <__math_uflowf>
24017b62:	eddf 7a21 	vldr	s15, [pc, #132]	; 24017be8 <expf+0xdc>
24017b66:	eeb4 0ae7 	vcmpe.f32	s0, s15
24017b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017b6e:	d503      	bpl.n	24017b78 <expf+0x6c>
24017b70:	bc30      	pop	{r4, r5}
24017b72:	2000      	movs	r0, #0
24017b74:	f000 bc24 	b.w	240183c0 <__math_may_uflowf>
24017b78:	4b1c      	ldr	r3, [pc, #112]	; (24017bec <expf+0xe0>)
24017b7a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
24017b7e:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
24017b82:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
24017b86:	eeb0 7b44 	vmov.f64	d7, d4
24017b8a:	eea5 7b06 	vfma.f64	d7, d5, d6
24017b8e:	ee17 0a10 	vmov	r0, s14
24017b92:	ee37 7b44 	vsub.f64	d7, d7, d4
24017b96:	f000 021f 	and.w	r2, r0, #31
24017b9a:	ee95 7b06 	vfnms.f64	d7, d5, d6
24017b9e:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
24017ba2:	ee27 4b07 	vmul.f64	d4, d7, d7
24017ba6:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
24017baa:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
24017bae:	eea5 6b07 	vfma.f64	d6, d5, d7
24017bb2:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
24017bb6:	684d      	ldr	r5, [r1, #4]
24017bb8:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
24017bbc:	2100      	movs	r1, #0
24017bbe:	190a      	adds	r2, r1, r4
24017bc0:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
24017bc4:	eea5 0b07 	vfma.f64	d0, d5, d7
24017bc8:	ec43 2b17 	vmov	d7, r2, r3
24017bcc:	eea6 0b04 	vfma.f64	d0, d6, d4
24017bd0:	ee20 0b07 	vmul.f64	d0, d0, d7
24017bd4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24017bd8:	e7ab      	b.n	24017b32 <expf+0x26>
24017bda:	ed9f 0a05 	vldr	s0, [pc, #20]	; 24017bf0 <expf+0xe4>
24017bde:	e7a8      	b.n	24017b32 <expf+0x26>
24017be0:	42b17217 	.word	0x42b17217
24017be4:	c2cff1b4 	.word	0xc2cff1b4
24017be8:	c2ce8ecf 	.word	0xc2ce8ecf
24017bec:	24032580 	.word	0x24032580
24017bf0:	00000000 	.word	0x00000000

24017bf4 <logf>:
24017bf4:	ee10 3a10 	vmov	r3, s0
24017bf8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
24017bfc:	b410      	push	{r4}
24017bfe:	d055      	beq.n	24017cac <logf+0xb8>
24017c00:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
24017c04:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
24017c08:	d31a      	bcc.n	24017c40 <logf+0x4c>
24017c0a:	005a      	lsls	r2, r3, #1
24017c0c:	d104      	bne.n	24017c18 <logf+0x24>
24017c0e:	f85d 4b04 	ldr.w	r4, [sp], #4
24017c12:	2001      	movs	r0, #1
24017c14:	f000 bbe0 	b.w	240183d8 <__math_divzerof>
24017c18:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
24017c1c:	d043      	beq.n	24017ca6 <logf+0xb2>
24017c1e:	2b00      	cmp	r3, #0
24017c20:	db02      	blt.n	24017c28 <logf+0x34>
24017c22:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
24017c26:	d303      	bcc.n	24017c30 <logf+0x3c>
24017c28:	f85d 4b04 	ldr.w	r4, [sp], #4
24017c2c:	f000 bbe6 	b.w	240183fc <__math_invalidf>
24017c30:	eddf 7a20 	vldr	s15, [pc, #128]	; 24017cb4 <logf+0xc0>
24017c34:	ee20 0a27 	vmul.f32	s0, s0, s15
24017c38:	ee10 3a10 	vmov	r3, s0
24017c3c:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
24017c40:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
24017c44:	491c      	ldr	r1, [pc, #112]	; (24017cb8 <logf+0xc4>)
24017c46:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
24017c4a:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
24017c4e:	f3c2 40c3 	ubfx	r0, r2, #19, #4
24017c52:	0dd4      	lsrs	r4, r2, #23
24017c54:	eb01 1000 	add.w	r0, r1, r0, lsl #4
24017c58:	05e4      	lsls	r4, r4, #23
24017c5a:	ed90 6b00 	vldr	d6, [r0]
24017c5e:	1b1b      	subs	r3, r3, r4
24017c60:	ee07 3a90 	vmov	s15, r3
24017c64:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
24017c68:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
24017c6c:	15d2      	asrs	r2, r2, #23
24017c6e:	eea6 0b07 	vfma.f64	d0, d6, d7
24017c72:	ed90 6b02 	vldr	d6, [r0, #8]
24017c76:	ee20 4b00 	vmul.f64	d4, d0, d0
24017c7a:	ee07 2a90 	vmov	s15, r2
24017c7e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
24017c82:	eea7 6b05 	vfma.f64	d6, d7, d5
24017c86:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
24017c8a:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
24017c8e:	eea5 7b00 	vfma.f64	d7, d5, d0
24017c92:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
24017c96:	ee30 0b06 	vadd.f64	d0, d0, d6
24017c9a:	eea5 7b04 	vfma.f64	d7, d5, d4
24017c9e:	eea4 0b07 	vfma.f64	d0, d4, d7
24017ca2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24017ca6:	f85d 4b04 	ldr.w	r4, [sp], #4
24017caa:	4770      	bx	lr
24017cac:	ed9f 0a03 	vldr	s0, [pc, #12]	; 24017cbc <logf+0xc8>
24017cb0:	e7f9      	b.n	24017ca6 <logf+0xb2>
24017cb2:	bf00      	nop
24017cb4:	4b000000 	.word	0x4b000000
24017cb8:	240326c8 	.word	0x240326c8
24017cbc:	00000000 	.word	0x00000000

24017cc0 <exp>:
24017cc0:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
24017cc2:	ee10 3a90 	vmov	r3, s1
24017cc6:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
24017cca:	f3c3 540a 	ubfx	r4, r3, #20, #11
24017cce:	18a2      	adds	r2, r4, r2
24017cd0:	2a3e      	cmp	r2, #62	; 0x3e
24017cd2:	ee10 1a10 	vmov	r1, s0
24017cd6:	d922      	bls.n	24017d1e <exp+0x5e>
24017cd8:	2a00      	cmp	r2, #0
24017cda:	da06      	bge.n	24017cea <exp+0x2a>
24017cdc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
24017ce0:	ee30 0b07 	vadd.f64	d0, d0, d7
24017ce4:	b004      	add	sp, #16
24017ce6:	bcf0      	pop	{r4, r5, r6, r7}
24017ce8:	4770      	bx	lr
24017cea:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
24017cee:	f04f 0000 	mov.w	r0, #0
24017cf2:	d913      	bls.n	24017d1c <exp+0x5c>
24017cf4:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
24017cf8:	bf08      	it	eq
24017cfa:	4281      	cmpeq	r1, r0
24017cfc:	f000 80a0 	beq.w	24017e40 <exp+0x180>
24017d00:	f240 72ff 	movw	r2, #2047	; 0x7ff
24017d04:	4294      	cmp	r4, r2
24017d06:	d0e9      	beq.n	24017cdc <exp+0x1c>
24017d08:	4283      	cmp	r3, r0
24017d0a:	da03      	bge.n	24017d14 <exp+0x54>
24017d0c:	b004      	add	sp, #16
24017d0e:	bcf0      	pop	{r4, r5, r6, r7}
24017d10:	f000 b8c6 	b.w	24017ea0 <__math_uflow>
24017d14:	b004      	add	sp, #16
24017d16:	bcf0      	pop	{r4, r5, r6, r7}
24017d18:	f000 b8ca 	b.w	24017eb0 <__math_oflow>
24017d1c:	4604      	mov	r4, r0
24017d1e:	4950      	ldr	r1, [pc, #320]	; (24017e60 <exp+0x1a0>)
24017d20:	ed91 6b02 	vldr	d6, [r1, #8]
24017d24:	ed91 5b00 	vldr	d5, [r1]
24017d28:	eeb0 7b46 	vmov.f64	d7, d6
24017d2c:	eea5 7b00 	vfma.f64	d7, d5, d0
24017d30:	ee17 5a10 	vmov	r5, s14
24017d34:	ee37 7b46 	vsub.f64	d7, d7, d6
24017d38:	ed91 6b04 	vldr	d6, [r1, #16]
24017d3c:	f005 037f 	and.w	r3, r5, #127	; 0x7f
24017d40:	eea6 0b07 	vfma.f64	d0, d6, d7
24017d44:	ed91 6b06 	vldr	d6, [r1, #24]
24017d48:	18d8      	adds	r0, r3, r3
24017d4a:	f100 030f 	add.w	r3, r0, #15
24017d4e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
24017d52:	eea6 0b07 	vfma.f64	d0, d6, d7
24017d56:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
24017d5a:	ee20 7b00 	vmul.f64	d7, d0, d0
24017d5e:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
24017d62:	ed91 4b08 	vldr	d4, [r1, #32]
24017d66:	ee30 6b06 	vadd.f64	d6, d0, d6
24017d6a:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
24017d6e:	eea3 4b00 	vfma.f64	d4, d3, d0
24017d72:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
24017d76:	eea4 6b07 	vfma.f64	d6, d4, d7
24017d7a:	ee27 7b07 	vmul.f64	d7, d7, d7
24017d7e:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
24017d82:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
24017d86:	f8d2 c004 	ldr.w	ip, [r2, #4]
24017d8a:	eea3 4b00 	vfma.f64	d4, d3, d0
24017d8e:	2600      	movs	r6, #0
24017d90:	19f2      	adds	r2, r6, r7
24017d92:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
24017d96:	eea7 6b04 	vfma.f64	d6, d7, d4
24017d9a:	2c00      	cmp	r4, #0
24017d9c:	d14b      	bne.n	24017e36 <exp+0x176>
24017d9e:	42b5      	cmp	r5, r6
24017da0:	db10      	blt.n	24017dc4 <exp+0x104>
24017da2:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
24017da6:	ed9f 7b28 	vldr	d7, [pc, #160]	; 24017e48 <exp+0x188>
24017daa:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
24017dae:	4610      	mov	r0, r2
24017db0:	ec41 0b10 	vmov	d0, r0, r1
24017db4:	eea6 0b00 	vfma.f64	d0, d6, d0
24017db8:	ee20 0b07 	vmul.f64	d0, d0, d7
24017dbc:	b004      	add	sp, #16
24017dbe:	bcf0      	pop	{r4, r5, r6, r7}
24017dc0:	f000 b88a 	b.w	24017ed8 <__math_check_oflow>
24017dc4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
24017dc8:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
24017dcc:	4610      	mov	r0, r2
24017dce:	ec41 0b17 	vmov	d7, r0, r1
24017dd2:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
24017dd6:	ee26 6b07 	vmul.f64	d6, d6, d7
24017dda:	ee37 5b06 	vadd.f64	d5, d7, d6
24017dde:	eeb4 5bc4 	vcmpe.f64	d5, d4
24017de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017de6:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 24017e50 <exp+0x190>
24017dea:	d51e      	bpl.n	24017e2a <exp+0x16a>
24017dec:	ee35 3b04 	vadd.f64	d3, d5, d4
24017df0:	ee37 7b45 	vsub.f64	d7, d7, d5
24017df4:	ee37 7b06 	vadd.f64	d7, d7, d6
24017df8:	ee34 6b43 	vsub.f64	d6, d4, d3
24017dfc:	ee36 6b05 	vadd.f64	d6, d6, d5
24017e00:	ee36 6b07 	vadd.f64	d6, d6, d7
24017e04:	ee36 6b03 	vadd.f64	d6, d6, d3
24017e08:	ee36 5b44 	vsub.f64	d5, d6, d4
24017e0c:	eeb5 5b40 	vcmp.f64	d5, #0.0
24017e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017e14:	d101      	bne.n	24017e1a <exp+0x15a>
24017e16:	ed9f 5b10 	vldr	d5, [pc, #64]	; 24017e58 <exp+0x198>
24017e1a:	ed8d 0b00 	vstr	d0, [sp]
24017e1e:	ed9d 7b00 	vldr	d7, [sp]
24017e22:	ee27 7b00 	vmul.f64	d7, d7, d0
24017e26:	ed8d 7b02 	vstr	d7, [sp, #8]
24017e2a:	ee25 0b00 	vmul.f64	d0, d5, d0
24017e2e:	b004      	add	sp, #16
24017e30:	bcf0      	pop	{r4, r5, r6, r7}
24017e32:	f000 b845 	b.w	24017ec0 <__math_check_uflow>
24017e36:	ec43 2b10 	vmov	d0, r2, r3
24017e3a:	eea6 0b00 	vfma.f64	d0, d6, d0
24017e3e:	e751      	b.n	24017ce4 <exp+0x24>
24017e40:	ed9f 0b05 	vldr	d0, [pc, #20]	; 24017e58 <exp+0x198>
24017e44:	e74e      	b.n	24017ce4 <exp+0x24>
24017e46:	bf00      	nop
24017e48:	00000000 	.word	0x00000000
24017e4c:	7f000000 	.word	0x7f000000
24017e50:	00000000 	.word	0x00000000
24017e54:	00100000 	.word	0x00100000
	...
24017e60:	240327e8 	.word	0x240327e8

24017e64 <with_errno>:
24017e64:	b513      	push	{r0, r1, r4, lr}
24017e66:	4604      	mov	r4, r0
24017e68:	ed8d 0b00 	vstr	d0, [sp]
24017e6c:	f7ff fdf0 	bl	24017a50 <__errno>
24017e70:	ed9d 0b00 	vldr	d0, [sp]
24017e74:	6004      	str	r4, [r0, #0]
24017e76:	b002      	add	sp, #8
24017e78:	bd10      	pop	{r4, pc}

24017e7a <xflow>:
24017e7a:	b082      	sub	sp, #8
24017e7c:	b158      	cbz	r0, 24017e96 <xflow+0x1c>
24017e7e:	eeb1 7b40 	vneg.f64	d7, d0
24017e82:	ed8d 7b00 	vstr	d7, [sp]
24017e86:	ed9d 7b00 	vldr	d7, [sp]
24017e8a:	2022      	movs	r0, #34	; 0x22
24017e8c:	ee20 0b07 	vmul.f64	d0, d0, d7
24017e90:	b002      	add	sp, #8
24017e92:	f7ff bfe7 	b.w	24017e64 <with_errno>
24017e96:	eeb0 7b40 	vmov.f64	d7, d0
24017e9a:	e7f2      	b.n	24017e82 <xflow+0x8>
24017e9c:	0000      	movs	r0, r0
	...

24017ea0 <__math_uflow>:
24017ea0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 24017ea8 <__math_uflow+0x8>
24017ea4:	f7ff bfe9 	b.w	24017e7a <xflow>
24017ea8:	00000000 	.word	0x00000000
24017eac:	10000000 	.word	0x10000000

24017eb0 <__math_oflow>:
24017eb0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 24017eb8 <__math_oflow+0x8>
24017eb4:	f7ff bfe1 	b.w	24017e7a <xflow>
24017eb8:	00000000 	.word	0x00000000
24017ebc:	70000000 	.word	0x70000000

24017ec0 <__math_check_uflow>:
24017ec0:	eeb5 0b40 	vcmp.f64	d0, #0.0
24017ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017ec8:	d102      	bne.n	24017ed0 <__math_check_uflow+0x10>
24017eca:	2022      	movs	r0, #34	; 0x22
24017ecc:	f7ff bfca 	b.w	24017e64 <with_errno>
24017ed0:	4770      	bx	lr
24017ed2:	0000      	movs	r0, r0
24017ed4:	0000      	movs	r0, r0
	...

24017ed8 <__math_check_oflow>:
24017ed8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 24017ef8 <__math_check_oflow+0x20>
24017edc:	eeb0 7bc0 	vabs.f64	d7, d0
24017ee0:	eeb4 7b46 	vcmp.f64	d7, d6
24017ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017ee8:	dd02      	ble.n	24017ef0 <__math_check_oflow+0x18>
24017eea:	2022      	movs	r0, #34	; 0x22
24017eec:	f7ff bfba 	b.w	24017e64 <with_errno>
24017ef0:	4770      	bx	lr
24017ef2:	bf00      	nop
24017ef4:	f3af 8000 	nop.w
24017ef8:	ffffffff 	.word	0xffffffff
24017efc:	7fefffff 	.word	0x7fefffff

24017f00 <checkint>:
24017f00:	f3c0 53c7 	ubfx	r3, r0, #23, #8
24017f04:	2b7e      	cmp	r3, #126	; 0x7e
24017f06:	dd10      	ble.n	24017f2a <checkint+0x2a>
24017f08:	2b96      	cmp	r3, #150	; 0x96
24017f0a:	dc0c      	bgt.n	24017f26 <checkint+0x26>
24017f0c:	2201      	movs	r2, #1
24017f0e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
24017f12:	fa02 f303 	lsl.w	r3, r2, r3
24017f16:	1e5a      	subs	r2, r3, #1
24017f18:	4202      	tst	r2, r0
24017f1a:	d106      	bne.n	24017f2a <checkint+0x2a>
24017f1c:	4203      	tst	r3, r0
24017f1e:	bf0c      	ite	eq
24017f20:	2002      	moveq	r0, #2
24017f22:	2001      	movne	r0, #1
24017f24:	4770      	bx	lr
24017f26:	2002      	movs	r0, #2
24017f28:	4770      	bx	lr
24017f2a:	2000      	movs	r0, #0
24017f2c:	4770      	bx	lr
	...

24017f30 <powf>:
24017f30:	b537      	push	{r0, r1, r2, r4, r5, lr}
24017f32:	ee10 1a10 	vmov	r1, s0
24017f36:	ee10 4a90 	vmov	r4, s1
24017f3a:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
24017f3e:	0062      	lsls	r2, r4, #1
24017f40:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
24017f44:	eef0 7a40 	vmov.f32	s15, s0
24017f48:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
24017f4c:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
24017f50:	d252      	bcs.n	24017ff8 <powf+0xc8>
24017f52:	4298      	cmp	r0, r3
24017f54:	d252      	bcs.n	24017ffc <powf+0xcc>
24017f56:	2000      	movs	r0, #0
24017f58:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
24017f5c:	4a9e      	ldr	r2, [pc, #632]	; (240181d8 <powf+0x2a8>)
24017f5e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
24017f62:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
24017f66:	f3c3 44c3 	ubfx	r4, r3, #19, #4
24017f6a:	0ddb      	lsrs	r3, r3, #23
24017f6c:	eb02 1404 	add.w	r4, r2, r4, lsl #4
24017f70:	05db      	lsls	r3, r3, #23
24017f72:	ed94 5b00 	vldr	d5, [r4]
24017f76:	1ac9      	subs	r1, r1, r3
24017f78:	ee07 1a90 	vmov	s15, r1
24017f7c:	15db      	asrs	r3, r3, #23
24017f7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
24017f82:	eea5 6b07 	vfma.f64	d6, d5, d7
24017f86:	ed94 5b02 	vldr	d5, [r4, #8]
24017f8a:	ee26 2b06 	vmul.f64	d2, d6, d6
24017f8e:	ee22 1b02 	vmul.f64	d1, d2, d2
24017f92:	ee07 3a90 	vmov	s15, r3
24017f96:	ed92 3b42 	vldr	d3, [r2, #264]	; 0x108
24017f9a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
24017f9e:	ee37 7b05 	vadd.f64	d7, d7, d5
24017fa2:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
24017fa6:	ed92 4b44 	vldr	d4, [r2, #272]	; 0x110
24017faa:	eea6 3b05 	vfma.f64	d3, d6, d5
24017fae:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
24017fb2:	eea6 5b04 	vfma.f64	d5, d6, d4
24017fb6:	ed92 4b48 	vldr	d4, [r2, #288]	; 0x120
24017fba:	eea6 7b04 	vfma.f64	d7, d6, d4
24017fbe:	eeb7 6ae0 	vcvt.f64.f32	d6, s1
24017fc2:	eea2 7b05 	vfma.f64	d7, d2, d5
24017fc6:	eea3 7b01 	vfma.f64	d7, d3, d1
24017fca:	ee26 6b07 	vmul.f64	d6, d6, d7
24017fce:	ee16 3a90 	vmov	r3, s13
24017fd2:	f3c3 32cf 	ubfx	r2, r3, #15, #16
24017fd6:	f248 03bf 	movw	r3, #32959	; 0x80bf
24017fda:	429a      	cmp	r2, r3
24017fdc:	f0c0 80b0 	bcc.w	24018140 <powf+0x210>
24017fe0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 240181b8 <powf+0x288>
24017fe4:	eeb4 6bc7 	vcmpe.f64	d6, d7
24017fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017fec:	dd78      	ble.n	240180e0 <powf+0x1b0>
24017fee:	b003      	add	sp, #12
24017ff0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
24017ff4:	f000 b9ea 	b.w	240183cc <__math_oflowf>
24017ff8:	4298      	cmp	r0, r3
24017ffa:	d32d      	bcc.n	24018058 <powf+0x128>
24017ffc:	b952      	cbnz	r2, 24018014 <powf+0xe4>
24017ffe:	f481 0180 	eor.w	r1, r1, #4194304	; 0x400000
24018002:	0049      	lsls	r1, r1, #1
24018004:	f511 0f00 	cmn.w	r1, #8388608	; 0x800000
24018008:	f240 80c8 	bls.w	2401819c <powf+0x26c>
2401800c:	ee37 0aa0 	vadd.f32	s0, s15, s1
24018010:	b003      	add	sp, #12
24018012:	bd30      	pop	{r4, r5, pc}
24018014:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
24018018:	d105      	bne.n	24018026 <powf+0xf6>
2401801a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
2401801e:	0064      	lsls	r4, r4, #1
24018020:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
24018024:	e7f0      	b.n	24018008 <powf+0xd8>
24018026:	0049      	lsls	r1, r1, #1
24018028:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
2401802c:	d8ee      	bhi.n	2401800c <powf+0xdc>
2401802e:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
24018032:	d1eb      	bne.n	2401800c <powf+0xdc>
24018034:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
24018038:	f000 80b0 	beq.w	2401819c <powf+0x26c>
2401803c:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
24018040:	ea6f 0404 	mvn.w	r4, r4
24018044:	bf34      	ite	cc
24018046:	2100      	movcc	r1, #0
24018048:	2101      	movcs	r1, #1
2401804a:	0fe4      	lsrs	r4, r4, #31
2401804c:	42a1      	cmp	r1, r4
2401804e:	f040 80a8 	bne.w	240181a2 <powf+0x272>
24018052:	ee20 0aa0 	vmul.f32	s0, s1, s1
24018056:	e7db      	b.n	24018010 <powf+0xe0>
24018058:	004d      	lsls	r5, r1, #1
2401805a:	1e6a      	subs	r2, r5, #1
2401805c:	429a      	cmp	r2, r3
2401805e:	d31c      	bcc.n	2401809a <powf+0x16a>
24018060:	2900      	cmp	r1, #0
24018062:	ee20 0a00 	vmul.f32	s0, s0, s0
24018066:	da0f      	bge.n	24018088 <powf+0x158>
24018068:	ee10 0a90 	vmov	r0, s1
2401806c:	f7ff ff48 	bl	24017f00 <checkint>
24018070:	2801      	cmp	r0, #1
24018072:	d109      	bne.n	24018088 <powf+0x158>
24018074:	eeb1 0a40 	vneg.f32	s0, s0
24018078:	b945      	cbnz	r5, 2401808c <powf+0x15c>
2401807a:	2c00      	cmp	r4, #0
2401807c:	dac8      	bge.n	24018010 <powf+0xe0>
2401807e:	b003      	add	sp, #12
24018080:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
24018084:	f000 b9a8 	b.w	240183d8 <__math_divzerof>
24018088:	2000      	movs	r0, #0
2401808a:	e7f5      	b.n	24018078 <powf+0x148>
2401808c:	2c00      	cmp	r4, #0
2401808e:	dabf      	bge.n	24018010 <powf+0xe0>
24018090:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24018094:	ee87 0a80 	vdiv.f32	s0, s15, s0
24018098:	e7ba      	b.n	24018010 <powf+0xe0>
2401809a:	2900      	cmp	r1, #0
2401809c:	da1e      	bge.n	240180dc <powf+0x1ac>
2401809e:	ee10 0a90 	vmov	r0, s1
240180a2:	f7ff ff2d 	bl	24017f00 <checkint>
240180a6:	b920      	cbnz	r0, 240180b2 <powf+0x182>
240180a8:	b003      	add	sp, #12
240180aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
240180ae:	f000 b9a5 	b.w	240183fc <__math_invalidf>
240180b2:	1e43      	subs	r3, r0, #1
240180b4:	4258      	negs	r0, r3
240180b6:	4158      	adcs	r0, r3
240180b8:	0400      	lsls	r0, r0, #16
240180ba:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
240180be:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
240180c2:	f4bf af49 	bcs.w	24017f58 <powf+0x28>
240180c6:	ed9f 7a45 	vldr	s14, [pc, #276]	; 240181dc <powf+0x2ac>
240180ca:	ee27 0a87 	vmul.f32	s0, s15, s14
240180ce:	ee10 3a10 	vmov	r3, s0
240180d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
240180d6:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
240180da:	e73d      	b.n	24017f58 <powf+0x28>
240180dc:	2000      	movs	r0, #0
240180de:	e7ee      	b.n	240180be <powf+0x18e>
240180e0:	ed9f 7b37 	vldr	d7, [pc, #220]	; 240181c0 <powf+0x290>
240180e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
240180e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240180ec:	dd10      	ble.n	24018110 <powf+0x1e0>
240180ee:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
240180f2:	2800      	cmp	r0, #0
240180f4:	d158      	bne.n	240181a8 <powf+0x278>
240180f6:	9300      	str	r3, [sp, #0]
240180f8:	eddd 7a00 	vldr	s15, [sp]
240180fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24018100:	ee77 7a87 	vadd.f32	s15, s15, s14
24018104:	eef4 7a47 	vcmp.f32	s15, s14
24018108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401810c:	f47f af6f 	bne.w	24017fee <powf+0xbe>
24018110:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 240181c8 <powf+0x298>
24018114:	eeb4 6bc7 	vcmpe.f64	d6, d7
24018118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401811c:	d804      	bhi.n	24018128 <powf+0x1f8>
2401811e:	b003      	add	sp, #12
24018120:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
24018124:	f000 b946 	b.w	240183b4 <__math_uflowf>
24018128:	ed9f 7b29 	vldr	d7, [pc, #164]	; 240181d0 <powf+0x2a0>
2401812c:	eeb4 6bc7 	vcmpe.f64	d6, d7
24018130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018134:	d504      	bpl.n	24018140 <powf+0x210>
24018136:	b003      	add	sp, #12
24018138:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
2401813c:	f000 b940 	b.w	240183c0 <__math_may_uflowf>
24018140:	4b27      	ldr	r3, [pc, #156]	; (240181e0 <powf+0x2b0>)
24018142:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
24018146:	ed93 5b40 	vldr	d5, [r3, #256]	; 0x100
2401814a:	ee36 7b05 	vadd.f64	d7, d6, d5
2401814e:	ee17 2a10 	vmov	r2, s14
24018152:	ee37 7b45 	vsub.f64	d7, d7, d5
24018156:	f002 011f 	and.w	r1, r2, #31
2401815a:	ee36 7b47 	vsub.f64	d7, d6, d7
2401815e:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
24018162:	ee27 4b07 	vmul.f64	d4, d7, d7
24018166:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
2401816a:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
2401816e:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
24018172:	eea7 6b05 	vfma.f64	d6, d7, d5
24018176:	686d      	ldr	r5, [r5, #4]
24018178:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
2401817c:	1882      	adds	r2, r0, r2
2401817e:	2300      	movs	r3, #0
24018180:	1918      	adds	r0, r3, r4
24018182:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
24018186:	eea7 0b05 	vfma.f64	d0, d7, d5
2401818a:	ec41 0b17 	vmov	d7, r0, r1
2401818e:	eea6 0b04 	vfma.f64	d0, d6, d4
24018192:	ee20 0b07 	vmul.f64	d0, d0, d7
24018196:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
2401819a:	e739      	b.n	24018010 <powf+0xe0>
2401819c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
240181a0:	e736      	b.n	24018010 <powf+0xe0>
240181a2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 240181e4 <powf+0x2b4>
240181a6:	e733      	b.n	24018010 <powf+0xe0>
240181a8:	9301      	str	r3, [sp, #4]
240181aa:	eddd 7a01 	vldr	s15, [sp, #4]
240181ae:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
240181b2:	ee77 7a67 	vsub.f32	s15, s14, s15
240181b6:	e7a5      	b.n	24018104 <powf+0x1d4>
240181b8:	ffd1d571 	.word	0xffd1d571
240181bc:	405fffff 	.word	0x405fffff
240181c0:	ffa3aae2 	.word	0xffa3aae2
240181c4:	405fffff 	.word	0x405fffff
240181c8:	00000000 	.word	0x00000000
240181cc:	c062c000 	.word	0xc062c000
240181d0:	00000000 	.word	0x00000000
240181d4:	c062a000 	.word	0xc062a000
240181d8:	240336c0 	.word	0x240336c0
240181dc:	4b000000 	.word	0x4b000000
240181e0:	24032580 	.word	0x24032580
240181e4:	00000000 	.word	0x00000000

240181e8 <sinf_poly>:
240181e8:	07cb      	lsls	r3, r1, #31
240181ea:	d412      	bmi.n	24018212 <sinf_poly+0x2a>
240181ec:	ee21 5b00 	vmul.f64	d5, d1, d0
240181f0:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
240181f4:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
240181f8:	eea6 7b01 	vfma.f64	d7, d6, d1
240181fc:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
24018200:	ee21 1b05 	vmul.f64	d1, d1, d5
24018204:	eea6 0b05 	vfma.f64	d0, d6, d5
24018208:	eea7 0b01 	vfma.f64	d0, d7, d1
2401820c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24018210:	4770      	bx	lr
24018212:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
24018216:	ee21 5b01 	vmul.f64	d5, d1, d1
2401821a:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
2401821e:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
24018222:	eea1 7b06 	vfma.f64	d7, d1, d6
24018226:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
2401822a:	eea1 0b06 	vfma.f64	d0, d1, d6
2401822e:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
24018232:	ee21 1b05 	vmul.f64	d1, d1, d5
24018236:	eea5 0b06 	vfma.f64	d0, d5, d6
2401823a:	e7e5      	b.n	24018208 <sinf_poly+0x20>
2401823c:	0000      	movs	r0, r0
	...

24018240 <cosf>:
24018240:	b538      	push	{r3, r4, r5, lr}
24018242:	ee10 4a10 	vmov	r4, s0
24018246:	f3c4 530a 	ubfx	r3, r4, #20, #11
2401824a:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
2401824e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
24018252:	d21f      	bcs.n	24018294 <cosf+0x54>
24018254:	ee27 7b07 	vmul.f64	d7, d7, d7
24018258:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
2401825c:	f0c0 8086 	bcc.w	2401836c <cosf+0x12c>
24018260:	ee27 4b07 	vmul.f64	d4, d7, d7
24018264:	4b46      	ldr	r3, [pc, #280]	; (24018380 <cosf+0x140>)
24018266:	ed93 5b14 	vldr	d5, [r3, #80]	; 0x50
2401826a:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
2401826e:	ed93 0b0c 	vldr	d0, [r3, #48]	; 0x30
24018272:	eea7 6b05 	vfma.f64	d6, d7, d5
24018276:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
2401827a:	eea7 0b05 	vfma.f64	d0, d7, d5
2401827e:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
24018282:	ee27 7b04 	vmul.f64	d7, d7, d4
24018286:	eea4 0b05 	vfma.f64	d0, d4, d5
2401828a:	eea6 0b07 	vfma.f64	d0, d6, d7
2401828e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24018292:	bd38      	pop	{r3, r4, r5, pc}
24018294:	f240 422e 	movw	r2, #1070	; 0x42e
24018298:	4293      	cmp	r3, r2
2401829a:	d829      	bhi.n	240182f0 <cosf+0xb0>
2401829c:	4b38      	ldr	r3, [pc, #224]	; (24018380 <cosf+0x140>)
2401829e:	ed93 6b08 	vldr	d6, [r3, #32]
240182a2:	ee27 6b06 	vmul.f64	d6, d7, d6
240182a6:	eefd 6bc6 	vcvt.s32.f64	s13, d6
240182aa:	f103 0070 	add.w	r0, r3, #112	; 0x70
240182ae:	ee16 1a90 	vmov	r1, s13
240182b2:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
240182b6:	1609      	asrs	r1, r1, #24
240182b8:	ee06 1a90 	vmov	s13, r1
240182bc:	f001 0203 	and.w	r2, r1, #3
240182c0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
240182c4:	eeb8 5be6 	vcvt.f64.s32	d5, s13
240182c8:	ed92 0b00 	vldr	d0, [r2]
240182cc:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
240182d0:	f011 0f02 	tst.w	r1, #2
240182d4:	bf08      	it	eq
240182d6:	4618      	moveq	r0, r3
240182d8:	f081 0101 	eor.w	r1, r1, #1
240182dc:	eea5 7b46 	vfms.f64	d7, d5, d6
240182e0:	ee27 1b07 	vmul.f64	d1, d7, d7
240182e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
240182e8:	ee27 0b00 	vmul.f64	d0, d7, d0
240182ec:	f7ff bf7c 	b.w	240181e8 <sinf_poly>
240182f0:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
240182f4:	d236      	bcs.n	24018364 <cosf+0x124>
240182f6:	4a23      	ldr	r2, [pc, #140]	; (24018384 <cosf+0x144>)
240182f8:	f3c4 6183 	ubfx	r1, r4, #26, #4
240182fc:	eb02 0581 	add.w	r5, r2, r1, lsl #2
24018300:	f3c4 0316 	ubfx	r3, r4, #0, #23
24018304:	f3c4 50c2 	ubfx	r0, r4, #23, #3
24018308:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
2401830c:	6a2a      	ldr	r2, [r5, #32]
2401830e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
24018312:	4083      	lsls	r3, r0
24018314:	fba3 2002 	umull	r2, r0, r3, r2
24018318:	692a      	ldr	r2, [r5, #16]
2401831a:	4359      	muls	r1, r3
2401831c:	fbe3 0102 	umlal	r0, r1, r3, r2
24018320:	f101 5300 	add.w	r3, r1, #536870912	; 0x20000000
24018324:	0f9d      	lsrs	r5, r3, #30
24018326:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
2401832a:	1ac9      	subs	r1, r1, r3
2401832c:	f7e8 f96a 	bl	24000604 <__aeabi_l2d>
24018330:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
24018334:	4b12      	ldr	r3, [pc, #72]	; (24018380 <cosf+0x140>)
24018336:	ed9f 0b10 	vldr	d0, [pc, #64]	; 24018378 <cosf+0x138>
2401833a:	ec41 0b17 	vmov	d7, r0, r1
2401833e:	f004 0203 	and.w	r2, r4, #3
24018342:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
24018346:	f014 0f02 	tst.w	r4, #2
2401834a:	ee27 0b00 	vmul.f64	d0, d7, d0
2401834e:	f103 0070 	add.w	r0, r3, #112	; 0x70
24018352:	ed92 7b00 	vldr	d7, [r2]
24018356:	ee20 1b00 	vmul.f64	d1, d0, d0
2401835a:	f085 0101 	eor.w	r1, r5, #1
2401835e:	bf08      	it	eq
24018360:	4618      	moveq	r0, r3
24018362:	e7bf      	b.n	240182e4 <cosf+0xa4>
24018364:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
24018368:	f000 b848 	b.w	240183fc <__math_invalidf>
2401836c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24018370:	e78f      	b.n	24018292 <cosf+0x52>
24018372:	bf00      	nop
24018374:	f3af 8000 	nop.w
24018378:	54442d18 	.word	0x54442d18
2401837c:	3c1921fb 	.word	0x3c1921fb
24018380:	240330b8 	.word	0x240330b8
24018384:	24033058 	.word	0x24033058

24018388 <with_errnof>:
24018388:	b513      	push	{r0, r1, r4, lr}
2401838a:	4604      	mov	r4, r0
2401838c:	ed8d 0a01 	vstr	s0, [sp, #4]
24018390:	f7ff fb5e 	bl	24017a50 <__errno>
24018394:	ed9d 0a01 	vldr	s0, [sp, #4]
24018398:	6004      	str	r4, [r0, #0]
2401839a:	b002      	add	sp, #8
2401839c:	bd10      	pop	{r4, pc}

2401839e <xflowf>:
2401839e:	b130      	cbz	r0, 240183ae <xflowf+0x10>
240183a0:	eef1 7a40 	vneg.f32	s15, s0
240183a4:	ee27 0a80 	vmul.f32	s0, s15, s0
240183a8:	2022      	movs	r0, #34	; 0x22
240183aa:	f7ff bfed 	b.w	24018388 <with_errnof>
240183ae:	eef0 7a40 	vmov.f32	s15, s0
240183b2:	e7f7      	b.n	240183a4 <xflowf+0x6>

240183b4 <__math_uflowf>:
240183b4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 240183bc <__math_uflowf+0x8>
240183b8:	f7ff bff1 	b.w	2401839e <xflowf>
240183bc:	10000000 	.word	0x10000000

240183c0 <__math_may_uflowf>:
240183c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 240183c8 <__math_may_uflowf+0x8>
240183c4:	f7ff bfeb 	b.w	2401839e <xflowf>
240183c8:	1a200000 	.word	0x1a200000

240183cc <__math_oflowf>:
240183cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 240183d4 <__math_oflowf+0x8>
240183d0:	f7ff bfe5 	b.w	2401839e <xflowf>
240183d4:	70000000 	.word	0x70000000

240183d8 <__math_divzerof>:
240183d8:	ed9f 0a07 	vldr	s0, [pc, #28]	; 240183f8 <__math_divzerof+0x20>
240183dc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
240183e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
240183e4:	2800      	cmp	r0, #0
240183e6:	f04f 0022 	mov.w	r0, #34	; 0x22
240183ea:	fe47 7a27 	vseleq.f32	s15, s14, s15
240183ee:	ee87 0a80 	vdiv.f32	s0, s15, s0
240183f2:	f7ff bfc9 	b.w	24018388 <with_errnof>
240183f6:	bf00      	nop
240183f8:	00000000 	.word	0x00000000

240183fc <__math_invalidf>:
240183fc:	eef0 7a40 	vmov.f32	s15, s0
24018400:	ee30 7a40 	vsub.f32	s14, s0, s0
24018404:	eef4 7a67 	vcmp.f32	s15, s15
24018408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401840c:	ee87 0a07 	vdiv.f32	s0, s14, s14
24018410:	d602      	bvs.n	24018418 <__math_invalidf+0x1c>
24018412:	2021      	movs	r0, #33	; 0x21
24018414:	f7ff bfb8 	b.w	24018388 <with_errnof>
24018418:	4770      	bx	lr
	...

2401841c <log10f>:
2401841c:	b508      	push	{r3, lr}
2401841e:	ed2d 8b02 	vpush	{d8}
24018422:	eeb0 8a40 	vmov.f32	s16, s0
24018426:	f000 f9df 	bl	240187e8 <__ieee754_log10f>
2401842a:	eeb4 8a48 	vcmp.f32	s16, s16
2401842e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018432:	d60f      	bvs.n	24018454 <log10f+0x38>
24018434:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
24018438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401843c:	d80a      	bhi.n	24018454 <log10f+0x38>
2401843e:	eeb5 8a40 	vcmp.f32	s16, #0.0
24018442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018446:	d108      	bne.n	2401845a <log10f+0x3e>
24018448:	f7ff fb02 	bl	24017a50 <__errno>
2401844c:	2322      	movs	r3, #34	; 0x22
2401844e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 24018470 <log10f+0x54>
24018452:	6003      	str	r3, [r0, #0]
24018454:	ecbd 8b02 	vpop	{d8}
24018458:	bd08      	pop	{r3, pc}
2401845a:	f7ff faf9 	bl	24017a50 <__errno>
2401845e:	ecbd 8b02 	vpop	{d8}
24018462:	2321      	movs	r3, #33	; 0x21
24018464:	6003      	str	r3, [r0, #0]
24018466:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
2401846a:	4802      	ldr	r0, [pc, #8]	; (24018474 <log10f+0x58>)
2401846c:	f000 b80c 	b.w	24018488 <nanf>
24018470:	ff800000 	.word	0xff800000
24018474:	2403257c 	.word	0x2403257c

24018478 <fabsf>:
24018478:	ee10 3a10 	vmov	r3, s0
2401847c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24018480:	ee00 3a10 	vmov	s0, r3
24018484:	4770      	bx	lr
	...

24018488 <nanf>:
24018488:	ed9f 0a01 	vldr	s0, [pc, #4]	; 24018490 <nanf+0x8>
2401848c:	4770      	bx	lr
2401848e:	bf00      	nop
24018490:	7fc00000 	.word	0x7fc00000

24018494 <tanf>:
24018494:	ee10 3a10 	vmov	r3, s0
24018498:	b507      	push	{r0, r1, r2, lr}
2401849a:	4a12      	ldr	r2, [pc, #72]	; (240184e4 <tanf+0x50>)
2401849c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
240184a0:	4293      	cmp	r3, r2
240184a2:	dc07      	bgt.n	240184b4 <tanf+0x20>
240184a4:	eddf 0a10 	vldr	s1, [pc, #64]	; 240184e8 <tanf+0x54>
240184a8:	2001      	movs	r0, #1
240184aa:	b003      	add	sp, #12
240184ac:	f85d eb04 	ldr.w	lr, [sp], #4
240184b0:	f000 b8ba 	b.w	24018628 <__kernel_tanf>
240184b4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
240184b8:	db04      	blt.n	240184c4 <tanf+0x30>
240184ba:	ee30 0a40 	vsub.f32	s0, s0, s0
240184be:	b003      	add	sp, #12
240184c0:	f85d fb04 	ldr.w	pc, [sp], #4
240184c4:	4668      	mov	r0, sp
240184c6:	f000 fa27 	bl	24018918 <__ieee754_rem_pio2f>
240184ca:	0040      	lsls	r0, r0, #1
240184cc:	f000 0002 	and.w	r0, r0, #2
240184d0:	eddd 0a01 	vldr	s1, [sp, #4]
240184d4:	ed9d 0a00 	vldr	s0, [sp]
240184d8:	f1c0 0001 	rsb	r0, r0, #1
240184dc:	f000 f8a4 	bl	24018628 <__kernel_tanf>
240184e0:	e7ed      	b.n	240184be <tanf+0x2a>
240184e2:	bf00      	nop
240184e4:	3f490fda 	.word	0x3f490fda
240184e8:	00000000 	.word	0x00000000

240184ec <tanhf>:
240184ec:	b538      	push	{r3, r4, r5, lr}
240184ee:	ee10 5a10 	vmov	r5, s0
240184f2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
240184f6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
240184fa:	ed2d 8b02 	vpush	{d8}
240184fe:	db0f      	blt.n	24018520 <tanhf+0x34>
24018500:	4b2a      	ldr	r3, [pc, #168]	; (240185ac <tanhf+0xc0>)
24018502:	ed93 6a00 	vldr	s12, [r3]
24018506:	edd3 6a00 	vldr	s13, [r3]
2401850a:	eec6 7a00 	vdiv.f32	s15, s12, s0
2401850e:	2d00      	cmp	r5, #0
24018510:	bfac      	ite	ge
24018512:	ee37 0aa6 	vaddge.f32	s0, s15, s13
24018516:	ee37 0ae6 	vsublt.f32	s0, s15, s13
2401851a:	ecbd 8b02 	vpop	{d8}
2401851e:	bd38      	pop	{r3, r4, r5, pc}
24018520:	4a23      	ldr	r2, [pc, #140]	; (240185b0 <tanhf+0xc4>)
24018522:	4293      	cmp	r3, r2
24018524:	dc39      	bgt.n	2401859a <tanhf+0xae>
24018526:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
2401852a:	da07      	bge.n	2401853c <tanhf+0x50>
2401852c:	4b1f      	ldr	r3, [pc, #124]	; (240185ac <tanhf+0xc0>)
2401852e:	edd3 7a00 	vldr	s15, [r3]
24018532:	ee77 7a80 	vadd.f32	s15, s15, s0
24018536:	ee27 0a80 	vmul.f32	s0, s15, s0
2401853a:	e7ee      	b.n	2401851a <tanhf+0x2e>
2401853c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
24018540:	4c1c      	ldr	r4, [pc, #112]	; (240185b4 <tanhf+0xc8>)
24018542:	db19      	blt.n	24018578 <tanhf+0x8c>
24018544:	f7ff ff98 	bl	24018478 <fabsf>
24018548:	edd4 7a00 	vldr	s15, [r4]
2401854c:	ee20 0a27 	vmul.f32	s0, s0, s15
24018550:	f001 f802 	bl	24019558 <expm1f>
24018554:	4b15      	ldr	r3, [pc, #84]	; (240185ac <tanhf+0xc0>)
24018556:	edd3 7a00 	vldr	s15, [r3]
2401855a:	edd4 6a00 	vldr	s13, [r4]
2401855e:	ed94 7a00 	vldr	s14, [r4]
24018562:	ee37 0a00 	vadd.f32	s0, s14, s0
24018566:	ee86 7a80 	vdiv.f32	s14, s13, s0
2401856a:	ee37 0ac7 	vsub.f32	s0, s15, s14
2401856e:	2d00      	cmp	r5, #0
24018570:	bfb8      	it	lt
24018572:	eeb1 0a40 	vneglt.f32	s0, s0
24018576:	e7d0      	b.n	2401851a <tanhf+0x2e>
24018578:	ed94 8a00 	vldr	s16, [r4]
2401857c:	f7ff ff7c 	bl	24018478 <fabsf>
24018580:	ee28 0a40 	vnmul.f32	s0, s16, s0
24018584:	f000 ffe8 	bl	24019558 <expm1f>
24018588:	edd4 7a00 	vldr	s15, [r4]
2401858c:	ee77 7a80 	vadd.f32	s15, s15, s0
24018590:	eeb1 7a40 	vneg.f32	s14, s0
24018594:	ee87 0a27 	vdiv.f32	s0, s14, s15
24018598:	e7e9      	b.n	2401856e <tanhf+0x82>
2401859a:	4b04      	ldr	r3, [pc, #16]	; (240185ac <tanhf+0xc0>)
2401859c:	ed93 0a00 	vldr	s0, [r3]
240185a0:	4b05      	ldr	r3, [pc, #20]	; (240185b8 <tanhf+0xcc>)
240185a2:	edd3 7a00 	vldr	s15, [r3]
240185a6:	ee30 0a67 	vsub.f32	s0, s0, s15
240185aa:	e7e0      	b.n	2401856e <tanhf+0x82>
240185ac:	200007b0 	.word	0x200007b0
240185b0:	41afffff 	.word	0x41afffff
240185b4:	200007b8 	.word	0x200007b8
240185b8:	200007b4 	.word	0x200007b4
240185bc:	00000000 	.word	0x00000000

240185c0 <tan>:
240185c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
240185c2:	eeb0 7b40 	vmov.f64	d7, d0
240185c6:	ee17 3a90 	vmov	r3, s15
240185ca:	4a15      	ldr	r2, [pc, #84]	; (24018620 <tan+0x60>)
240185cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
240185d0:	4293      	cmp	r3, r2
240185d2:	dc07      	bgt.n	240185e4 <tan+0x24>
240185d4:	ed9f 1b10 	vldr	d1, [pc, #64]	; 24018618 <tan+0x58>
240185d8:	2001      	movs	r0, #1
240185da:	b005      	add	sp, #20
240185dc:	f85d eb04 	ldr.w	lr, [sp], #4
240185e0:	f000 be9e 	b.w	24019320 <__kernel_tan>
240185e4:	4a0f      	ldr	r2, [pc, #60]	; (24018624 <tan+0x64>)
240185e6:	4293      	cmp	r3, r2
240185e8:	dd04      	ble.n	240185f4 <tan+0x34>
240185ea:	ee30 0b40 	vsub.f64	d0, d0, d0
240185ee:	b005      	add	sp, #20
240185f0:	f85d fb04 	ldr.w	pc, [sp], #4
240185f4:	4668      	mov	r0, sp
240185f6:	f000 fabb 	bl	24018b70 <__ieee754_rem_pio2>
240185fa:	0040      	lsls	r0, r0, #1
240185fc:	f000 0002 	and.w	r0, r0, #2
24018600:	ed9d 1b02 	vldr	d1, [sp, #8]
24018604:	ed9d 0b00 	vldr	d0, [sp]
24018608:	f1c0 0001 	rsb	r0, r0, #1
2401860c:	f000 fe88 	bl	24019320 <__kernel_tan>
24018610:	e7ed      	b.n	240185ee <tan+0x2e>
24018612:	bf00      	nop
24018614:	f3af 8000 	nop.w
	...
24018620:	3fe921fb 	.word	0x3fe921fb
24018624:	7fefffff 	.word	0x7fefffff

24018628 <__kernel_tanf>:
24018628:	b508      	push	{r3, lr}
2401862a:	ee10 3a10 	vmov	r3, s0
2401862e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
24018632:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
24018636:	eef0 7a40 	vmov.f32	s15, s0
2401863a:	da17      	bge.n	2401866c <__kernel_tanf+0x44>
2401863c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
24018640:	ee17 1a10 	vmov	r1, s14
24018644:	bb41      	cbnz	r1, 24018698 <__kernel_tanf+0x70>
24018646:	1c43      	adds	r3, r0, #1
24018648:	4313      	orrs	r3, r2
2401864a:	d108      	bne.n	2401865e <__kernel_tanf+0x36>
2401864c:	f7ff ff14 	bl	24018478 <fabsf>
24018650:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24018654:	eec7 7a00 	vdiv.f32	s15, s14, s0
24018658:	eeb0 0a67 	vmov.f32	s0, s15
2401865c:	bd08      	pop	{r3, pc}
2401865e:	2801      	cmp	r0, #1
24018660:	d0fa      	beq.n	24018658 <__kernel_tanf+0x30>
24018662:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
24018666:	eec7 7a00 	vdiv.f32	s15, s14, s0
2401866a:	e7f5      	b.n	24018658 <__kernel_tanf+0x30>
2401866c:	494c      	ldr	r1, [pc, #304]	; (240187a0 <__kernel_tanf+0x178>)
2401866e:	428a      	cmp	r2, r1
24018670:	db12      	blt.n	24018698 <__kernel_tanf+0x70>
24018672:	2b00      	cmp	r3, #0
24018674:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 240187a4 <__kernel_tanf+0x17c>
24018678:	bfb8      	it	lt
2401867a:	eef1 7a40 	vneglt.f32	s15, s0
2401867e:	ee37 7a67 	vsub.f32	s14, s14, s15
24018682:	eddf 7a49 	vldr	s15, [pc, #292]	; 240187a8 <__kernel_tanf+0x180>
24018686:	bfb8      	it	lt
24018688:	eef1 0a60 	vneglt.f32	s1, s1
2401868c:	ee77 7ae0 	vsub.f32	s15, s15, s1
24018690:	eddf 0a46 	vldr	s1, [pc, #280]	; 240187ac <__kernel_tanf+0x184>
24018694:	ee77 7a87 	vadd.f32	s15, s15, s14
24018698:	ee67 6aa7 	vmul.f32	s13, s15, s15
2401869c:	eddf 5a44 	vldr	s11, [pc, #272]	; 240187b0 <__kernel_tanf+0x188>
240186a0:	ed9f 6a44 	vldr	s12, [pc, #272]	; 240187b4 <__kernel_tanf+0x18c>
240186a4:	ed9f 5a44 	vldr	s10, [pc, #272]	; 240187b8 <__kernel_tanf+0x190>
240186a8:	493d      	ldr	r1, [pc, #244]	; (240187a0 <__kernel_tanf+0x178>)
240186aa:	ee26 7aa6 	vmul.f32	s14, s13, s13
240186ae:	428a      	cmp	r2, r1
240186b0:	eea7 6a25 	vfma.f32	s12, s14, s11
240186b4:	eddf 5a41 	vldr	s11, [pc, #260]	; 240187bc <__kernel_tanf+0x194>
240186b8:	eee6 5a07 	vfma.f32	s11, s12, s14
240186bc:	ed9f 6a40 	vldr	s12, [pc, #256]	; 240187c0 <__kernel_tanf+0x198>
240186c0:	eea5 6a87 	vfma.f32	s12, s11, s14
240186c4:	eddf 5a3f 	vldr	s11, [pc, #252]	; 240187c4 <__kernel_tanf+0x19c>
240186c8:	eee6 5a07 	vfma.f32	s11, s12, s14
240186cc:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 240187c8 <__kernel_tanf+0x1a0>
240186d0:	eea5 6a87 	vfma.f32	s12, s11, s14
240186d4:	eddf 5a3d 	vldr	s11, [pc, #244]	; 240187cc <__kernel_tanf+0x1a4>
240186d8:	eee7 5a05 	vfma.f32	s11, s14, s10
240186dc:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 240187d0 <__kernel_tanf+0x1a8>
240186e0:	eea5 5a87 	vfma.f32	s10, s11, s14
240186e4:	eddf 5a3b 	vldr	s11, [pc, #236]	; 240187d4 <__kernel_tanf+0x1ac>
240186e8:	eee5 5a07 	vfma.f32	s11, s10, s14
240186ec:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 240187d8 <__kernel_tanf+0x1b0>
240186f0:	eea5 5a87 	vfma.f32	s10, s11, s14
240186f4:	eddf 5a39 	vldr	s11, [pc, #228]	; 240187dc <__kernel_tanf+0x1b4>
240186f8:	eee5 5a07 	vfma.f32	s11, s10, s14
240186fc:	eeb0 7a46 	vmov.f32	s14, s12
24018700:	eea5 7aa6 	vfma.f32	s14, s11, s13
24018704:	ee27 5aa6 	vmul.f32	s10, s15, s13
24018708:	eeb0 6a60 	vmov.f32	s12, s1
2401870c:	eea7 6a05 	vfma.f32	s12, s14, s10
24018710:	ed9f 7a33 	vldr	s14, [pc, #204]	; 240187e0 <__kernel_tanf+0x1b8>
24018714:	eee6 0a26 	vfma.f32	s1, s12, s13
24018718:	eee5 0a07 	vfma.f32	s1, s10, s14
2401871c:	ee77 6aa0 	vadd.f32	s13, s15, s1
24018720:	db1d      	blt.n	2401875e <__kernel_tanf+0x136>
24018722:	ee07 0a10 	vmov	s14, r0
24018726:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
2401872a:	ee66 5aa6 	vmul.f32	s11, s13, s13
2401872e:	ee76 6a87 	vadd.f32	s13, s13, s14
24018732:	179b      	asrs	r3, r3, #30
24018734:	ee85 6aa6 	vdiv.f32	s12, s11, s13
24018738:	f003 0302 	and.w	r3, r3, #2
2401873c:	f1c3 0301 	rsb	r3, r3, #1
24018740:	ee76 6a60 	vsub.f32	s13, s12, s1
24018744:	ee77 7ae6 	vsub.f32	s15, s15, s13
24018748:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
2401874c:	eea7 7ae6 	vfms.f32	s14, s15, s13
24018750:	ee07 3a90 	vmov	s15, r3
24018754:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24018758:	ee67 7a87 	vmul.f32	s15, s15, s14
2401875c:	e77c      	b.n	24018658 <__kernel_tanf+0x30>
2401875e:	2801      	cmp	r0, #1
24018760:	d01b      	beq.n	2401879a <__kernel_tanf+0x172>
24018762:	4b20      	ldr	r3, [pc, #128]	; (240187e4 <__kernel_tanf+0x1bc>)
24018764:	ee16 2a90 	vmov	r2, s13
24018768:	401a      	ands	r2, r3
2401876a:	ee05 2a90 	vmov	s11, r2
2401876e:	ee75 7ae7 	vsub.f32	s15, s11, s15
24018772:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24018776:	ee70 0ae7 	vsub.f32	s1, s1, s15
2401877a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
2401877e:	ee87 6aa6 	vdiv.f32	s12, s15, s13
24018782:	ee16 2a10 	vmov	r2, s12
24018786:	4013      	ands	r3, r2
24018788:	ee07 3a90 	vmov	s15, r3
2401878c:	eea5 7aa7 	vfma.f32	s14, s11, s15
24018790:	eea0 7aa7 	vfma.f32	s14, s1, s15
24018794:	eee7 7a06 	vfma.f32	s15, s14, s12
24018798:	e75e      	b.n	24018658 <__kernel_tanf+0x30>
2401879a:	eef0 7a66 	vmov.f32	s15, s13
2401879e:	e75b      	b.n	24018658 <__kernel_tanf+0x30>
240187a0:	3f2ca140 	.word	0x3f2ca140
240187a4:	3f490fda 	.word	0x3f490fda
240187a8:	33222168 	.word	0x33222168
240187ac:	00000000 	.word	0x00000000
240187b0:	b79bae5f 	.word	0xb79bae5f
240187b4:	38a3f445 	.word	0x38a3f445
240187b8:	37d95384 	.word	0x37d95384
240187bc:	3a1a26c8 	.word	0x3a1a26c8
240187c0:	3b6b6916 	.word	0x3b6b6916
240187c4:	3cb327a4 	.word	0x3cb327a4
240187c8:	3e088889 	.word	0x3e088889
240187cc:	3895c07a 	.word	0x3895c07a
240187d0:	398137b9 	.word	0x398137b9
240187d4:	3abede48 	.word	0x3abede48
240187d8:	3c11371f 	.word	0x3c11371f
240187dc:	3d5d0dd1 	.word	0x3d5d0dd1
240187e0:	3eaaaaab 	.word	0x3eaaaaab
240187e4:	fffff000 	.word	0xfffff000

240187e8 <__ieee754_log10f>:
240187e8:	b508      	push	{r3, lr}
240187ea:	ee10 2a10 	vmov	r2, s0
240187ee:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
240187f2:	ed2d 8b02 	vpush	{d8}
240187f6:	d108      	bne.n	2401880a <__ieee754_log10f+0x22>
240187f8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 24018880 <__ieee754_log10f+0x98>
240187fc:	eddf 7a21 	vldr	s15, [pc, #132]	; 24018884 <__ieee754_log10f+0x9c>
24018800:	ee87 0a27 	vdiv.f32	s0, s14, s15
24018804:	ecbd 8b02 	vpop	{d8}
24018808:	bd08      	pop	{r3, pc}
2401880a:	2a00      	cmp	r2, #0
2401880c:	da02      	bge.n	24018814 <__ieee754_log10f+0x2c>
2401880e:	ee30 7a40 	vsub.f32	s14, s0, s0
24018812:	e7f3      	b.n	240187fc <__ieee754_log10f+0x14>
24018814:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
24018818:	db02      	blt.n	24018820 <__ieee754_log10f+0x38>
2401881a:	ee30 0a00 	vadd.f32	s0, s0, s0
2401881e:	e7f1      	b.n	24018804 <__ieee754_log10f+0x1c>
24018820:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
24018824:	bfbf      	itttt	lt
24018826:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 24018888 <__ieee754_log10f+0xa0>
2401882a:	ee60 7a27 	vmullt.f32	s15, s0, s15
2401882e:	f06f 0118 	mvnlt.w	r1, #24
24018832:	ee17 2a90 	vmovlt	r2, s15
24018836:	ea4f 53e2 	mov.w	r3, r2, asr #23
2401883a:	bfa8      	it	ge
2401883c:	2100      	movge	r1, #0
2401883e:	3b7f      	subs	r3, #127	; 0x7f
24018840:	440b      	add	r3, r1
24018842:	0fd9      	lsrs	r1, r3, #31
24018844:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
24018848:	ee07 3a90 	vmov	s15, r3
2401884c:	f3c2 0216 	ubfx	r2, r2, #0, #23
24018850:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
24018854:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
24018858:	ee00 3a10 	vmov	s0, r3
2401885c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
24018860:	f7ff f9c8 	bl	24017bf4 <logf>
24018864:	eddf 7a09 	vldr	s15, [pc, #36]	; 2401888c <__ieee754_log10f+0xa4>
24018868:	ee20 0a27 	vmul.f32	s0, s0, s15
2401886c:	eddf 7a08 	vldr	s15, [pc, #32]	; 24018890 <__ieee754_log10f+0xa8>
24018870:	eea8 0a27 	vfma.f32	s0, s16, s15
24018874:	eddf 7a07 	vldr	s15, [pc, #28]	; 24018894 <__ieee754_log10f+0xac>
24018878:	eea8 0a27 	vfma.f32	s0, s16, s15
2401887c:	e7c2      	b.n	24018804 <__ieee754_log10f+0x1c>
2401887e:	bf00      	nop
24018880:	cc000000 	.word	0xcc000000
24018884:	00000000 	.word	0x00000000
24018888:	4c000000 	.word	0x4c000000
2401888c:	3ede5bd9 	.word	0x3ede5bd9
24018890:	355427db 	.word	0x355427db
24018894:	3e9a2080 	.word	0x3e9a2080

24018898 <lrintf>:
24018898:	ee10 3a10 	vmov	r3, s0
2401889c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
240188a0:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
240188a4:	281e      	cmp	r0, #30
240188a6:	b082      	sub	sp, #8
240188a8:	dc2f      	bgt.n	2401890a <lrintf+0x72>
240188aa:	1c41      	adds	r1, r0, #1
240188ac:	da02      	bge.n	240188b4 <lrintf+0x1c>
240188ae:	2000      	movs	r0, #0
240188b0:	b002      	add	sp, #8
240188b2:	4770      	bx	lr
240188b4:	2816      	cmp	r0, #22
240188b6:	ea4f 71d3 	mov.w	r1, r3, lsr #31
240188ba:	dd0a      	ble.n	240188d2 <lrintf+0x3a>
240188bc:	f3c3 0316 	ubfx	r3, r3, #0, #23
240188c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
240188c4:	3a96      	subs	r2, #150	; 0x96
240188c6:	fa03 f002 	lsl.w	r0, r3, r2
240188ca:	2900      	cmp	r1, #0
240188cc:	d0f0      	beq.n	240188b0 <lrintf+0x18>
240188ce:	4240      	negs	r0, r0
240188d0:	e7ee      	b.n	240188b0 <lrintf+0x18>
240188d2:	4b10      	ldr	r3, [pc, #64]	; (24018914 <lrintf+0x7c>)
240188d4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
240188d8:	ed93 7a00 	vldr	s14, [r3]
240188dc:	ee37 0a00 	vadd.f32	s0, s14, s0
240188e0:	ed8d 0a01 	vstr	s0, [sp, #4]
240188e4:	eddd 7a01 	vldr	s15, [sp, #4]
240188e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
240188ec:	ee17 3a90 	vmov	r3, s15
240188f0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
240188f4:	d0db      	beq.n	240188ae <lrintf+0x16>
240188f6:	f3c3 0016 	ubfx	r0, r3, #0, #23
240188fa:	f3c3 53c7 	ubfx	r3, r3, #23, #8
240188fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
24018902:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
24018906:	40d8      	lsrs	r0, r3
24018908:	e7df      	b.n	240188ca <lrintf+0x32>
2401890a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
2401890e:	ee17 0a90 	vmov	r0, s15
24018912:	e7cd      	b.n	240188b0 <lrintf+0x18>
24018914:	24033198 	.word	0x24033198

24018918 <__ieee754_rem_pio2f>:
24018918:	b5f0      	push	{r4, r5, r6, r7, lr}
2401891a:	ee10 6a10 	vmov	r6, s0
2401891e:	4b86      	ldr	r3, [pc, #536]	; (24018b38 <__ieee754_rem_pio2f+0x220>)
24018920:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
24018924:	429d      	cmp	r5, r3
24018926:	b087      	sub	sp, #28
24018928:	4604      	mov	r4, r0
2401892a:	dc05      	bgt.n	24018938 <__ieee754_rem_pio2f+0x20>
2401892c:	2300      	movs	r3, #0
2401892e:	ed80 0a00 	vstr	s0, [r0]
24018932:	6043      	str	r3, [r0, #4]
24018934:	2000      	movs	r0, #0
24018936:	e020      	b.n	2401897a <__ieee754_rem_pio2f+0x62>
24018938:	4b80      	ldr	r3, [pc, #512]	; (24018b3c <__ieee754_rem_pio2f+0x224>)
2401893a:	429d      	cmp	r5, r3
2401893c:	dc38      	bgt.n	240189b0 <__ieee754_rem_pio2f+0x98>
2401893e:	2e00      	cmp	r6, #0
24018940:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 24018b40 <__ieee754_rem_pio2f+0x228>
24018944:	4b7f      	ldr	r3, [pc, #508]	; (24018b44 <__ieee754_rem_pio2f+0x22c>)
24018946:	f025 050f 	bic.w	r5, r5, #15
2401894a:	dd18      	ble.n	2401897e <__ieee754_rem_pio2f+0x66>
2401894c:	429d      	cmp	r5, r3
2401894e:	ee70 7a47 	vsub.f32	s15, s0, s14
24018952:	bf09      	itett	eq
24018954:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 24018b48 <__ieee754_rem_pio2f+0x230>
24018958:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 24018b4c <__ieee754_rem_pio2f+0x234>
2401895c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
24018960:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 24018b50 <__ieee754_rem_pio2f+0x238>
24018964:	ee77 6ac7 	vsub.f32	s13, s15, s14
24018968:	ee77 7ae6 	vsub.f32	s15, s15, s13
2401896c:	edc0 6a00 	vstr	s13, [r0]
24018970:	ee77 7ac7 	vsub.f32	s15, s15, s14
24018974:	edc0 7a01 	vstr	s15, [r0, #4]
24018978:	2001      	movs	r0, #1
2401897a:	b007      	add	sp, #28
2401897c:	bdf0      	pop	{r4, r5, r6, r7, pc}
2401897e:	429d      	cmp	r5, r3
24018980:	ee70 7a07 	vadd.f32	s15, s0, s14
24018984:	bf09      	itett	eq
24018986:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 24018b48 <__ieee754_rem_pio2f+0x230>
2401898a:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 24018b4c <__ieee754_rem_pio2f+0x234>
2401898e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
24018992:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 24018b50 <__ieee754_rem_pio2f+0x238>
24018996:	ee77 6a87 	vadd.f32	s13, s15, s14
2401899a:	ee77 7ae6 	vsub.f32	s15, s15, s13
2401899e:	edc0 6a00 	vstr	s13, [r0]
240189a2:	ee77 7a87 	vadd.f32	s15, s15, s14
240189a6:	edc0 7a01 	vstr	s15, [r0, #4]
240189aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
240189ae:	e7e4      	b.n	2401897a <__ieee754_rem_pio2f+0x62>
240189b0:	4b68      	ldr	r3, [pc, #416]	; (24018b54 <__ieee754_rem_pio2f+0x23c>)
240189b2:	429d      	cmp	r5, r3
240189b4:	dc71      	bgt.n	24018a9a <__ieee754_rem_pio2f+0x182>
240189b6:	f7ff fd5f 	bl	24018478 <fabsf>
240189ba:	ed9f 7a67 	vldr	s14, [pc, #412]	; 24018b58 <__ieee754_rem_pio2f+0x240>
240189be:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
240189c2:	eee0 7a07 	vfma.f32	s15, s0, s14
240189c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
240189ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
240189ce:	ee17 0a90 	vmov	r0, s15
240189d2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 24018b40 <__ieee754_rem_pio2f+0x228>
240189d6:	eea7 0a67 	vfms.f32	s0, s14, s15
240189da:	281f      	cmp	r0, #31
240189dc:	eddf 7a5b 	vldr	s15, [pc, #364]	; 24018b4c <__ieee754_rem_pio2f+0x234>
240189e0:	ee67 7a27 	vmul.f32	s15, s14, s15
240189e4:	eeb1 6a47 	vneg.f32	s12, s14
240189e8:	ee70 6a67 	vsub.f32	s13, s0, s15
240189ec:	ee16 2a90 	vmov	r2, s13
240189f0:	dc1c      	bgt.n	24018a2c <__ieee754_rem_pio2f+0x114>
240189f2:	495a      	ldr	r1, [pc, #360]	; (24018b5c <__ieee754_rem_pio2f+0x244>)
240189f4:	1e47      	subs	r7, r0, #1
240189f6:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
240189fa:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
240189fe:	428b      	cmp	r3, r1
24018a00:	d014      	beq.n	24018a2c <__ieee754_rem_pio2f+0x114>
24018a02:	6022      	str	r2, [r4, #0]
24018a04:	ed94 7a00 	vldr	s14, [r4]
24018a08:	ee30 0a47 	vsub.f32	s0, s0, s14
24018a0c:	2e00      	cmp	r6, #0
24018a0e:	ee30 0a67 	vsub.f32	s0, s0, s15
24018a12:	ed84 0a01 	vstr	s0, [r4, #4]
24018a16:	dab0      	bge.n	2401897a <__ieee754_rem_pio2f+0x62>
24018a18:	eeb1 7a47 	vneg.f32	s14, s14
24018a1c:	eeb1 0a40 	vneg.f32	s0, s0
24018a20:	ed84 7a00 	vstr	s14, [r4]
24018a24:	ed84 0a01 	vstr	s0, [r4, #4]
24018a28:	4240      	negs	r0, r0
24018a2a:	e7a6      	b.n	2401897a <__ieee754_rem_pio2f+0x62>
24018a2c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
24018a30:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
24018a34:	2908      	cmp	r1, #8
24018a36:	ea4f 53e5 	mov.w	r3, r5, asr #23
24018a3a:	dde2      	ble.n	24018a02 <__ieee754_rem_pio2f+0xea>
24018a3c:	eddf 5a42 	vldr	s11, [pc, #264]	; 24018b48 <__ieee754_rem_pio2f+0x230>
24018a40:	eef0 6a40 	vmov.f32	s13, s0
24018a44:	eee6 6a25 	vfma.f32	s13, s12, s11
24018a48:	ee70 7a66 	vsub.f32	s15, s0, s13
24018a4c:	eee6 7a25 	vfma.f32	s15, s12, s11
24018a50:	eddf 5a3f 	vldr	s11, [pc, #252]	; 24018b50 <__ieee754_rem_pio2f+0x238>
24018a54:	eed7 7a25 	vfnms.f32	s15, s14, s11
24018a58:	ee76 5ae7 	vsub.f32	s11, s13, s15
24018a5c:	ee15 2a90 	vmov	r2, s11
24018a60:	f3c2 51c7 	ubfx	r1, r2, #23, #8
24018a64:	1a5b      	subs	r3, r3, r1
24018a66:	2b19      	cmp	r3, #25
24018a68:	dc04      	bgt.n	24018a74 <__ieee754_rem_pio2f+0x15c>
24018a6a:	edc4 5a00 	vstr	s11, [r4]
24018a6e:	eeb0 0a66 	vmov.f32	s0, s13
24018a72:	e7c7      	b.n	24018a04 <__ieee754_rem_pio2f+0xec>
24018a74:	eddf 5a3a 	vldr	s11, [pc, #232]	; 24018b60 <__ieee754_rem_pio2f+0x248>
24018a78:	eeb0 0a66 	vmov.f32	s0, s13
24018a7c:	eea6 0a25 	vfma.f32	s0, s12, s11
24018a80:	ee76 7ac0 	vsub.f32	s15, s13, s0
24018a84:	eddf 6a37 	vldr	s13, [pc, #220]	; 24018b64 <__ieee754_rem_pio2f+0x24c>
24018a88:	eee6 7a25 	vfma.f32	s15, s12, s11
24018a8c:	eed7 7a26 	vfnms.f32	s15, s14, s13
24018a90:	ee30 7a67 	vsub.f32	s14, s0, s15
24018a94:	ed84 7a00 	vstr	s14, [r4]
24018a98:	e7b4      	b.n	24018a04 <__ieee754_rem_pio2f+0xec>
24018a9a:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
24018a9e:	db06      	blt.n	24018aae <__ieee754_rem_pio2f+0x196>
24018aa0:	ee70 7a40 	vsub.f32	s15, s0, s0
24018aa4:	edc0 7a01 	vstr	s15, [r0, #4]
24018aa8:	edc0 7a00 	vstr	s15, [r0]
24018aac:	e742      	b.n	24018934 <__ieee754_rem_pio2f+0x1c>
24018aae:	15ea      	asrs	r2, r5, #23
24018ab0:	3a86      	subs	r2, #134	; 0x86
24018ab2:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
24018ab6:	ee07 3a90 	vmov	s15, r3
24018aba:	eebd 7ae7 	vcvt.s32.f32	s14, s15
24018abe:	eddf 6a2a 	vldr	s13, [pc, #168]	; 24018b68 <__ieee754_rem_pio2f+0x250>
24018ac2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24018ac6:	ee77 7ac7 	vsub.f32	s15, s15, s14
24018aca:	ed8d 7a03 	vstr	s14, [sp, #12]
24018ace:	ee67 7aa6 	vmul.f32	s15, s15, s13
24018ad2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
24018ad6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24018ada:	ee77 7ac7 	vsub.f32	s15, s15, s14
24018ade:	ed8d 7a04 	vstr	s14, [sp, #16]
24018ae2:	ee67 7aa6 	vmul.f32	s15, s15, s13
24018ae6:	eef5 7a40 	vcmp.f32	s15, #0.0
24018aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018aee:	edcd 7a05 	vstr	s15, [sp, #20]
24018af2:	d11e      	bne.n	24018b32 <__ieee754_rem_pio2f+0x21a>
24018af4:	eeb5 7a40 	vcmp.f32	s14, #0.0
24018af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018afc:	bf14      	ite	ne
24018afe:	2302      	movne	r3, #2
24018b00:	2301      	moveq	r3, #1
24018b02:	491a      	ldr	r1, [pc, #104]	; (24018b6c <__ieee754_rem_pio2f+0x254>)
24018b04:	9101      	str	r1, [sp, #4]
24018b06:	2102      	movs	r1, #2
24018b08:	9100      	str	r1, [sp, #0]
24018b0a:	a803      	add	r0, sp, #12
24018b0c:	4621      	mov	r1, r4
24018b0e:	f000 fec9 	bl	240198a4 <__kernel_rem_pio2f>
24018b12:	2e00      	cmp	r6, #0
24018b14:	f6bf af31 	bge.w	2401897a <__ieee754_rem_pio2f+0x62>
24018b18:	edd4 7a00 	vldr	s15, [r4]
24018b1c:	eef1 7a67 	vneg.f32	s15, s15
24018b20:	edc4 7a00 	vstr	s15, [r4]
24018b24:	edd4 7a01 	vldr	s15, [r4, #4]
24018b28:	eef1 7a67 	vneg.f32	s15, s15
24018b2c:	edc4 7a01 	vstr	s15, [r4, #4]
24018b30:	e77a      	b.n	24018a28 <__ieee754_rem_pio2f+0x110>
24018b32:	2303      	movs	r3, #3
24018b34:	e7e5      	b.n	24018b02 <__ieee754_rem_pio2f+0x1ea>
24018b36:	bf00      	nop
24018b38:	3f490fd8 	.word	0x3f490fd8
24018b3c:	4016cbe3 	.word	0x4016cbe3
24018b40:	3fc90f80 	.word	0x3fc90f80
24018b44:	3fc90fd0 	.word	0x3fc90fd0
24018b48:	37354400 	.word	0x37354400
24018b4c:	37354443 	.word	0x37354443
24018b50:	2e85a308 	.word	0x2e85a308
24018b54:	43490f80 	.word	0x43490f80
24018b58:	3f22f984 	.word	0x3f22f984
24018b5c:	240331a0 	.word	0x240331a0
24018b60:	2e85a300 	.word	0x2e85a300
24018b64:	248d3132 	.word	0x248d3132
24018b68:	43800000 	.word	0x43800000
24018b6c:	24033220 	.word	0x24033220

24018b70 <__ieee754_rem_pio2>:
24018b70:	b570      	push	{r4, r5, r6, lr}
24018b72:	eeb0 7b40 	vmov.f64	d7, d0
24018b76:	ee17 5a90 	vmov	r5, s15
24018b7a:	4b99      	ldr	r3, [pc, #612]	; (24018de0 <__ieee754_rem_pio2+0x270>)
24018b7c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
24018b80:	429e      	cmp	r6, r3
24018b82:	b088      	sub	sp, #32
24018b84:	4604      	mov	r4, r0
24018b86:	dc07      	bgt.n	24018b98 <__ieee754_rem_pio2+0x28>
24018b88:	2200      	movs	r2, #0
24018b8a:	2300      	movs	r3, #0
24018b8c:	ed84 0b00 	vstr	d0, [r4]
24018b90:	e9c0 2302 	strd	r2, r3, [r0, #8]
24018b94:	2000      	movs	r0, #0
24018b96:	e01b      	b.n	24018bd0 <__ieee754_rem_pio2+0x60>
24018b98:	4b92      	ldr	r3, [pc, #584]	; (24018de4 <__ieee754_rem_pio2+0x274>)
24018b9a:	429e      	cmp	r6, r3
24018b9c:	dc3b      	bgt.n	24018c16 <__ieee754_rem_pio2+0xa6>
24018b9e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
24018ba2:	2d00      	cmp	r5, #0
24018ba4:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 24018da0 <__ieee754_rem_pio2+0x230>
24018ba8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
24018bac:	dd19      	ble.n	24018be2 <__ieee754_rem_pio2+0x72>
24018bae:	ee30 7b46 	vsub.f64	d7, d0, d6
24018bb2:	429e      	cmp	r6, r3
24018bb4:	d00e      	beq.n	24018bd4 <__ieee754_rem_pio2+0x64>
24018bb6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 24018da8 <__ieee754_rem_pio2+0x238>
24018bba:	ee37 5b46 	vsub.f64	d5, d7, d6
24018bbe:	ee37 7b45 	vsub.f64	d7, d7, d5
24018bc2:	ed84 5b00 	vstr	d5, [r4]
24018bc6:	ee37 7b46 	vsub.f64	d7, d7, d6
24018bca:	ed84 7b02 	vstr	d7, [r4, #8]
24018bce:	2001      	movs	r0, #1
24018bd0:	b008      	add	sp, #32
24018bd2:	bd70      	pop	{r4, r5, r6, pc}
24018bd4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 24018db0 <__ieee754_rem_pio2+0x240>
24018bd8:	ee37 7b46 	vsub.f64	d7, d7, d6
24018bdc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 24018db8 <__ieee754_rem_pio2+0x248>
24018be0:	e7eb      	b.n	24018bba <__ieee754_rem_pio2+0x4a>
24018be2:	429e      	cmp	r6, r3
24018be4:	ee30 7b06 	vadd.f64	d7, d0, d6
24018be8:	d00e      	beq.n	24018c08 <__ieee754_rem_pio2+0x98>
24018bea:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 24018da8 <__ieee754_rem_pio2+0x238>
24018bee:	ee37 5b06 	vadd.f64	d5, d7, d6
24018bf2:	ee37 7b45 	vsub.f64	d7, d7, d5
24018bf6:	ed84 5b00 	vstr	d5, [r4]
24018bfa:	ee37 7b06 	vadd.f64	d7, d7, d6
24018bfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
24018c02:	ed84 7b02 	vstr	d7, [r4, #8]
24018c06:	e7e3      	b.n	24018bd0 <__ieee754_rem_pio2+0x60>
24018c08:	ed9f 6b69 	vldr	d6, [pc, #420]	; 24018db0 <__ieee754_rem_pio2+0x240>
24018c0c:	ee37 7b06 	vadd.f64	d7, d7, d6
24018c10:	ed9f 6b69 	vldr	d6, [pc, #420]	; 24018db8 <__ieee754_rem_pio2+0x248>
24018c14:	e7eb      	b.n	24018bee <__ieee754_rem_pio2+0x7e>
24018c16:	4b74      	ldr	r3, [pc, #464]	; (24018de8 <__ieee754_rem_pio2+0x278>)
24018c18:	429e      	cmp	r6, r3
24018c1a:	dc70      	bgt.n	24018cfe <__ieee754_rem_pio2+0x18e>
24018c1c:	f000 fdb8 	bl	24019790 <fabs>
24018c20:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
24018c24:	ed9f 6b66 	vldr	d6, [pc, #408]	; 24018dc0 <__ieee754_rem_pio2+0x250>
24018c28:	eea0 7b06 	vfma.f64	d7, d0, d6
24018c2c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
24018c30:	eeb8 5be7 	vcvt.f64.s32	d5, s15
24018c34:	ee17 0a90 	vmov	r0, s15
24018c38:	eeb1 4b45 	vneg.f64	d4, d5
24018c3c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 24018da0 <__ieee754_rem_pio2+0x230>
24018c40:	eea5 0b47 	vfms.f64	d0, d5, d7
24018c44:	ed9f 7b58 	vldr	d7, [pc, #352]	; 24018da8 <__ieee754_rem_pio2+0x238>
24018c48:	281f      	cmp	r0, #31
24018c4a:	ee25 7b07 	vmul.f64	d7, d5, d7
24018c4e:	ee30 6b47 	vsub.f64	d6, d0, d7
24018c52:	dc08      	bgt.n	24018c66 <__ieee754_rem_pio2+0xf6>
24018c54:	4b65      	ldr	r3, [pc, #404]	; (24018dec <__ieee754_rem_pio2+0x27c>)
24018c56:	1e42      	subs	r2, r0, #1
24018c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
24018c5c:	42b3      	cmp	r3, r6
24018c5e:	d002      	beq.n	24018c66 <__ieee754_rem_pio2+0xf6>
24018c60:	ed84 6b00 	vstr	d6, [r4]
24018c64:	e024      	b.n	24018cb0 <__ieee754_rem_pio2+0x140>
24018c66:	ee16 3a90 	vmov	r3, s13
24018c6a:	f3c3 530a 	ubfx	r3, r3, #20, #11
24018c6e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
24018c72:	2b10      	cmp	r3, #16
24018c74:	ea4f 5226 	mov.w	r2, r6, asr #20
24018c78:	ddf2      	ble.n	24018c60 <__ieee754_rem_pio2+0xf0>
24018c7a:	eeb0 6b40 	vmov.f64	d6, d0
24018c7e:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 24018db0 <__ieee754_rem_pio2+0x240>
24018c82:	eea4 6b03 	vfma.f64	d6, d4, d3
24018c86:	ee30 7b46 	vsub.f64	d7, d0, d6
24018c8a:	eea4 7b03 	vfma.f64	d7, d4, d3
24018c8e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 24018db8 <__ieee754_rem_pio2+0x248>
24018c92:	ee95 7b03 	vfnms.f64	d7, d5, d3
24018c96:	ee36 3b47 	vsub.f64	d3, d6, d7
24018c9a:	ee13 3a90 	vmov	r3, s7
24018c9e:	f3c3 530a 	ubfx	r3, r3, #20, #11
24018ca2:	1ad3      	subs	r3, r2, r3
24018ca4:	2b31      	cmp	r3, #49	; 0x31
24018ca6:	dc17      	bgt.n	24018cd8 <__ieee754_rem_pio2+0x168>
24018ca8:	eeb0 0b46 	vmov.f64	d0, d6
24018cac:	ed84 3b00 	vstr	d3, [r4]
24018cb0:	ed94 6b00 	vldr	d6, [r4]
24018cb4:	2d00      	cmp	r5, #0
24018cb6:	ee30 0b46 	vsub.f64	d0, d0, d6
24018cba:	ee30 0b47 	vsub.f64	d0, d0, d7
24018cbe:	ed84 0b02 	vstr	d0, [r4, #8]
24018cc2:	da85      	bge.n	24018bd0 <__ieee754_rem_pio2+0x60>
24018cc4:	eeb1 6b46 	vneg.f64	d6, d6
24018cc8:	eeb1 0b40 	vneg.f64	d0, d0
24018ccc:	ed84 6b00 	vstr	d6, [r4]
24018cd0:	ed84 0b02 	vstr	d0, [r4, #8]
24018cd4:	4240      	negs	r0, r0
24018cd6:	e77b      	b.n	24018bd0 <__ieee754_rem_pio2+0x60>
24018cd8:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 24018dc8 <__ieee754_rem_pio2+0x258>
24018cdc:	eeb0 0b46 	vmov.f64	d0, d6
24018ce0:	eea4 0b07 	vfma.f64	d0, d4, d7
24018ce4:	ee36 6b40 	vsub.f64	d6, d6, d0
24018ce8:	eea4 6b07 	vfma.f64	d6, d4, d7
24018cec:	ed9f 4b38 	vldr	d4, [pc, #224]	; 24018dd0 <__ieee754_rem_pio2+0x260>
24018cf0:	eeb0 7b46 	vmov.f64	d7, d6
24018cf4:	ee95 7b04 	vfnms.f64	d7, d5, d4
24018cf8:	ee30 6b47 	vsub.f64	d6, d0, d7
24018cfc:	e7b0      	b.n	24018c60 <__ieee754_rem_pio2+0xf0>
24018cfe:	4b3c      	ldr	r3, [pc, #240]	; (24018df0 <__ieee754_rem_pio2+0x280>)
24018d00:	429e      	cmp	r6, r3
24018d02:	dd06      	ble.n	24018d12 <__ieee754_rem_pio2+0x1a2>
24018d04:	ee30 7b40 	vsub.f64	d7, d0, d0
24018d08:	ed80 7b02 	vstr	d7, [r0, #8]
24018d0c:	ed80 7b00 	vstr	d7, [r0]
24018d10:	e740      	b.n	24018b94 <__ieee754_rem_pio2+0x24>
24018d12:	1532      	asrs	r2, r6, #20
24018d14:	ee10 0a10 	vmov	r0, s0
24018d18:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
24018d1c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
24018d20:	ec41 0b17 	vmov	d7, r0, r1
24018d24:	eebd 6bc7 	vcvt.s32.f64	s12, d7
24018d28:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 24018dd8 <__ieee754_rem_pio2+0x268>
24018d2c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
24018d30:	ee37 7b46 	vsub.f64	d7, d7, d6
24018d34:	ed8d 6b02 	vstr	d6, [sp, #8]
24018d38:	ee27 7b05 	vmul.f64	d7, d7, d5
24018d3c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
24018d40:	a808      	add	r0, sp, #32
24018d42:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
24018d46:	ee37 7b46 	vsub.f64	d7, d7, d6
24018d4a:	ed8d 6b04 	vstr	d6, [sp, #16]
24018d4e:	ee27 7b05 	vmul.f64	d7, d7, d5
24018d52:	ed8d 7b06 	vstr	d7, [sp, #24]
24018d56:	2103      	movs	r1, #3
24018d58:	ed30 7b02 	vldmdb	r0!, {d7}
24018d5c:	eeb5 7b40 	vcmp.f64	d7, #0.0
24018d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018d64:	460b      	mov	r3, r1
24018d66:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
24018d6a:	d0f5      	beq.n	24018d58 <__ieee754_rem_pio2+0x1e8>
24018d6c:	4921      	ldr	r1, [pc, #132]	; (24018df4 <__ieee754_rem_pio2+0x284>)
24018d6e:	9101      	str	r1, [sp, #4]
24018d70:	2102      	movs	r1, #2
24018d72:	9100      	str	r1, [sp, #0]
24018d74:	a802      	add	r0, sp, #8
24018d76:	4621      	mov	r1, r4
24018d78:	f000 f83e 	bl	24018df8 <__kernel_rem_pio2>
24018d7c:	2d00      	cmp	r5, #0
24018d7e:	f6bf af27 	bge.w	24018bd0 <__ieee754_rem_pio2+0x60>
24018d82:	ed94 7b00 	vldr	d7, [r4]
24018d86:	eeb1 7b47 	vneg.f64	d7, d7
24018d8a:	ed84 7b00 	vstr	d7, [r4]
24018d8e:	ed94 7b02 	vldr	d7, [r4, #8]
24018d92:	eeb1 7b47 	vneg.f64	d7, d7
24018d96:	ed84 7b02 	vstr	d7, [r4, #8]
24018d9a:	e79b      	b.n	24018cd4 <__ieee754_rem_pio2+0x164>
24018d9c:	f3af 8000 	nop.w
24018da0:	54400000 	.word	0x54400000
24018da4:	3ff921fb 	.word	0x3ff921fb
24018da8:	1a626331 	.word	0x1a626331
24018dac:	3dd0b461 	.word	0x3dd0b461
24018db0:	1a600000 	.word	0x1a600000
24018db4:	3dd0b461 	.word	0x3dd0b461
24018db8:	2e037073 	.word	0x2e037073
24018dbc:	3ba3198a 	.word	0x3ba3198a
24018dc0:	6dc9c883 	.word	0x6dc9c883
24018dc4:	3fe45f30 	.word	0x3fe45f30
24018dc8:	2e000000 	.word	0x2e000000
24018dcc:	3ba3198a 	.word	0x3ba3198a
24018dd0:	252049c1 	.word	0x252049c1
24018dd4:	397b839a 	.word	0x397b839a
24018dd8:	00000000 	.word	0x00000000
24018ddc:	41700000 	.word	0x41700000
24018de0:	3fe921fb 	.word	0x3fe921fb
24018de4:	4002d97b 	.word	0x4002d97b
24018de8:	413921fb 	.word	0x413921fb
24018dec:	24033538 	.word	0x24033538
24018df0:	7fefffff 	.word	0x7fefffff
24018df4:	240335b8 	.word	0x240335b8

24018df8 <__kernel_rem_pio2>:
24018df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24018dfc:	ed2d 8b06 	vpush	{d8-d10}
24018e00:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
24018e04:	460f      	mov	r7, r1
24018e06:	9002      	str	r0, [sp, #8]
24018e08:	49c3      	ldr	r1, [pc, #780]	; (24019118 <__kernel_rem_pio2+0x320>)
24018e0a:	98a2      	ldr	r0, [sp, #648]	; 0x288
24018e0c:	9301      	str	r3, [sp, #4]
24018e0e:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
24018e12:	9901      	ldr	r1, [sp, #4]
24018e14:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
24018e16:	f112 0f14 	cmn.w	r2, #20
24018e1a:	bfa8      	it	ge
24018e1c:	1ed0      	subge	r0, r2, #3
24018e1e:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
24018e22:	bfaa      	itet	ge
24018e24:	2418      	movge	r4, #24
24018e26:	2000      	movlt	r0, #0
24018e28:	fb90 f0f4 	sdivge	r0, r0, r4
24018e2c:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 24019100 <__kernel_rem_pio2+0x308>
24018e30:	f06f 0417 	mvn.w	r4, #23
24018e34:	fb00 4404 	mla	r4, r0, r4, r4
24018e38:	eba0 060a 	sub.w	r6, r0, sl
24018e3c:	4414      	add	r4, r2
24018e3e:	eb09 0c0a 	add.w	ip, r9, sl
24018e42:	ad1a      	add	r5, sp, #104	; 0x68
24018e44:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
24018e48:	2200      	movs	r2, #0
24018e4a:	4562      	cmp	r2, ip
24018e4c:	dd10      	ble.n	24018e70 <__kernel_rem_pio2+0x78>
24018e4e:	9a01      	ldr	r2, [sp, #4]
24018e50:	a91a      	add	r1, sp, #104	; 0x68
24018e52:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
24018e56:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
24018e5a:	f04f 0c00 	mov.w	ip, #0
24018e5e:	45cc      	cmp	ip, r9
24018e60:	dc26      	bgt.n	24018eb0 <__kernel_rem_pio2+0xb8>
24018e62:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 24019100 <__kernel_rem_pio2+0x308>
24018e66:	f8dd e008 	ldr.w	lr, [sp, #8]
24018e6a:	4616      	mov	r6, r2
24018e6c:	2500      	movs	r5, #0
24018e6e:	e015      	b.n	24018e9c <__kernel_rem_pio2+0xa4>
24018e70:	42d6      	cmn	r6, r2
24018e72:	d409      	bmi.n	24018e88 <__kernel_rem_pio2+0x90>
24018e74:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
24018e78:	ee07 1a90 	vmov	s15, r1
24018e7c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
24018e80:	eca5 7b02 	vstmia	r5!, {d7}
24018e84:	3201      	adds	r2, #1
24018e86:	e7e0      	b.n	24018e4a <__kernel_rem_pio2+0x52>
24018e88:	eeb0 7b46 	vmov.f64	d7, d6
24018e8c:	e7f8      	b.n	24018e80 <__kernel_rem_pio2+0x88>
24018e8e:	ecbe 5b02 	vldmia	lr!, {d5}
24018e92:	ed96 6b00 	vldr	d6, [r6]
24018e96:	3501      	adds	r5, #1
24018e98:	eea5 7b06 	vfma.f64	d7, d5, d6
24018e9c:	4555      	cmp	r5, sl
24018e9e:	f1a6 0608 	sub.w	r6, r6, #8
24018ea2:	ddf4      	ble.n	24018e8e <__kernel_rem_pio2+0x96>
24018ea4:	eca8 7b02 	vstmia	r8!, {d7}
24018ea8:	f10c 0c01 	add.w	ip, ip, #1
24018eac:	3208      	adds	r2, #8
24018eae:	e7d6      	b.n	24018e5e <__kernel_rem_pio2+0x66>
24018eb0:	aa06      	add	r2, sp, #24
24018eb2:	ed9f 9b95 	vldr	d9, [pc, #596]	; 24019108 <__kernel_rem_pio2+0x310>
24018eb6:	ed9f ab96 	vldr	d10, [pc, #600]	; 24019110 <__kernel_rem_pio2+0x318>
24018eba:	eb02 0289 	add.w	r2, r2, r9, lsl #2
24018ebe:	eb03 0380 	add.w	r3, r3, r0, lsl #2
24018ec2:	9204      	str	r2, [sp, #16]
24018ec4:	9303      	str	r3, [sp, #12]
24018ec6:	464d      	mov	r5, r9
24018ec8:	00eb      	lsls	r3, r5, #3
24018eca:	9305      	str	r3, [sp, #20]
24018ecc:	ab92      	add	r3, sp, #584	; 0x248
24018ece:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
24018ed2:	f10d 0b18 	add.w	fp, sp, #24
24018ed6:	ab6a      	add	r3, sp, #424	; 0x1a8
24018ed8:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
24018edc:	465e      	mov	r6, fp
24018ede:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
24018ee2:	4628      	mov	r0, r5
24018ee4:	2800      	cmp	r0, #0
24018ee6:	f1a2 0208 	sub.w	r2, r2, #8
24018eea:	dc48      	bgt.n	24018f7e <__kernel_rem_pio2+0x186>
24018eec:	4620      	mov	r0, r4
24018eee:	f000 fc5b 	bl	240197a8 <scalbn>
24018ef2:	eeb0 8b40 	vmov.f64	d8, d0
24018ef6:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
24018efa:	ee28 0b00 	vmul.f64	d0, d8, d0
24018efe:	f000 ff43 	bl	24019d88 <floor>
24018f02:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
24018f06:	eea0 8b47 	vfms.f64	d8, d0, d7
24018f0a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
24018f0e:	2c00      	cmp	r4, #0
24018f10:	ee17 8a90 	vmov	r8, s15
24018f14:	eeb8 7be7 	vcvt.f64.s32	d7, s15
24018f18:	ee38 8b47 	vsub.f64	d8, d8, d7
24018f1c:	dd41      	ble.n	24018fa2 <__kernel_rem_pio2+0x1aa>
24018f1e:	1e68      	subs	r0, r5, #1
24018f20:	ab06      	add	r3, sp, #24
24018f22:	f1c4 0c18 	rsb	ip, r4, #24
24018f26:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
24018f2a:	fa46 f20c 	asr.w	r2, r6, ip
24018f2e:	4490      	add	r8, r2
24018f30:	fa02 f20c 	lsl.w	r2, r2, ip
24018f34:	1ab6      	subs	r6, r6, r2
24018f36:	f1c4 0217 	rsb	r2, r4, #23
24018f3a:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
24018f3e:	4116      	asrs	r6, r2
24018f40:	2e00      	cmp	r6, #0
24018f42:	dd3d      	ble.n	24018fc0 <__kernel_rem_pio2+0x1c8>
24018f44:	f04f 0c00 	mov.w	ip, #0
24018f48:	f108 0801 	add.w	r8, r8, #1
24018f4c:	4660      	mov	r0, ip
24018f4e:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
24018f52:	4565      	cmp	r5, ip
24018f54:	dc6a      	bgt.n	2401902c <__kernel_rem_pio2+0x234>
24018f56:	2c00      	cmp	r4, #0
24018f58:	dd04      	ble.n	24018f64 <__kernel_rem_pio2+0x16c>
24018f5a:	2c01      	cmp	r4, #1
24018f5c:	d07b      	beq.n	24019056 <__kernel_rem_pio2+0x25e>
24018f5e:	2c02      	cmp	r4, #2
24018f60:	f000 8083 	beq.w	2401906a <__kernel_rem_pio2+0x272>
24018f64:	2e02      	cmp	r6, #2
24018f66:	d12b      	bne.n	24018fc0 <__kernel_rem_pio2+0x1c8>
24018f68:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
24018f6c:	ee30 8b48 	vsub.f64	d8, d0, d8
24018f70:	b330      	cbz	r0, 24018fc0 <__kernel_rem_pio2+0x1c8>
24018f72:	4620      	mov	r0, r4
24018f74:	f000 fc18 	bl	240197a8 <scalbn>
24018f78:	ee38 8b40 	vsub.f64	d8, d8, d0
24018f7c:	e020      	b.n	24018fc0 <__kernel_rem_pio2+0x1c8>
24018f7e:	ee20 7b09 	vmul.f64	d7, d0, d9
24018f82:	eebd 7bc7 	vcvt.s32.f64	s14, d7
24018f86:	3801      	subs	r0, #1
24018f88:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
24018f8c:	eea7 0b4a 	vfms.f64	d0, d7, d10
24018f90:	eebd 0bc0 	vcvt.s32.f64	s0, d0
24018f94:	eca6 0a01 	vstmia	r6!, {s0}
24018f98:	ed92 0b00 	vldr	d0, [r2]
24018f9c:	ee37 0b00 	vadd.f64	d0, d7, d0
24018fa0:	e7a0      	b.n	24018ee4 <__kernel_rem_pio2+0xec>
24018fa2:	d105      	bne.n	24018fb0 <__kernel_rem_pio2+0x1b8>
24018fa4:	1e6a      	subs	r2, r5, #1
24018fa6:	ab06      	add	r3, sp, #24
24018fa8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
24018fac:	15f6      	asrs	r6, r6, #23
24018fae:	e7c7      	b.n	24018f40 <__kernel_rem_pio2+0x148>
24018fb0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
24018fb4:	eeb4 8bc7 	vcmpe.f64	d8, d7
24018fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018fbc:	da34      	bge.n	24019028 <__kernel_rem_pio2+0x230>
24018fbe:	2600      	movs	r6, #0
24018fc0:	eeb5 8b40 	vcmp.f64	d8, #0.0
24018fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018fc8:	f040 80aa 	bne.w	24019120 <__kernel_rem_pio2+0x328>
24018fcc:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
24018fd0:	4658      	mov	r0, fp
24018fd2:	2200      	movs	r2, #0
24018fd4:	4548      	cmp	r0, r9
24018fd6:	da50      	bge.n	2401907a <__kernel_rem_pio2+0x282>
24018fd8:	2a00      	cmp	r2, #0
24018fda:	d06b      	beq.n	240190b4 <__kernel_rem_pio2+0x2bc>
24018fdc:	ab06      	add	r3, sp, #24
24018fde:	3c18      	subs	r4, #24
24018fe0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
24018fe4:	2b00      	cmp	r3, #0
24018fe6:	f000 8087 	beq.w	240190f8 <__kernel_rem_pio2+0x300>
24018fea:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
24018fee:	4620      	mov	r0, r4
24018ff0:	f000 fbda 	bl	240197a8 <scalbn>
24018ff4:	ed9f 6b44 	vldr	d6, [pc, #272]	; 24019108 <__kernel_rem_pio2+0x310>
24018ff8:	f10b 0201 	add.w	r2, fp, #1
24018ffc:	a96a      	add	r1, sp, #424	; 0x1a8
24018ffe:	00d3      	lsls	r3, r2, #3
24019000:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
24019004:	465a      	mov	r2, fp
24019006:	2a00      	cmp	r2, #0
24019008:	f280 80b8 	bge.w	2401917c <__kernel_rem_pio2+0x384>
2401900c:	465a      	mov	r2, fp
2401900e:	2a00      	cmp	r2, #0
24019010:	f2c0 80d6 	blt.w	240191c0 <__kernel_rem_pio2+0x3c8>
24019014:	a96a      	add	r1, sp, #424	; 0x1a8
24019016:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
2401901a:	ed9f 7b39 	vldr	d7, [pc, #228]	; 24019100 <__kernel_rem_pio2+0x308>
2401901e:	4d3f      	ldr	r5, [pc, #252]	; (2401911c <__kernel_rem_pio2+0x324>)
24019020:	2000      	movs	r0, #0
24019022:	ebab 0102 	sub.w	r1, fp, r2
24019026:	e0c0      	b.n	240191aa <__kernel_rem_pio2+0x3b2>
24019028:	2602      	movs	r6, #2
2401902a:	e78b      	b.n	24018f44 <__kernel_rem_pio2+0x14c>
2401902c:	f8db 2000 	ldr.w	r2, [fp]
24019030:	b958      	cbnz	r0, 2401904a <__kernel_rem_pio2+0x252>
24019032:	b122      	cbz	r2, 2401903e <__kernel_rem_pio2+0x246>
24019034:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
24019038:	f8cb 2000 	str.w	r2, [fp]
2401903c:	2201      	movs	r2, #1
2401903e:	f10c 0c01 	add.w	ip, ip, #1
24019042:	f10b 0b04 	add.w	fp, fp, #4
24019046:	4610      	mov	r0, r2
24019048:	e783      	b.n	24018f52 <__kernel_rem_pio2+0x15a>
2401904a:	ebae 0202 	sub.w	r2, lr, r2
2401904e:	f8cb 2000 	str.w	r2, [fp]
24019052:	4602      	mov	r2, r0
24019054:	e7f3      	b.n	2401903e <__kernel_rem_pio2+0x246>
24019056:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
2401905a:	ab06      	add	r3, sp, #24
2401905c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
24019060:	f3c2 0216 	ubfx	r2, r2, #0, #23
24019064:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
24019068:	e77c      	b.n	24018f64 <__kernel_rem_pio2+0x16c>
2401906a:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
2401906e:	ab06      	add	r3, sp, #24
24019070:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
24019074:	f3c2 0215 	ubfx	r2, r2, #0, #22
24019078:	e7f4      	b.n	24019064 <__kernel_rem_pio2+0x26c>
2401907a:	ab06      	add	r3, sp, #24
2401907c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
24019080:	3801      	subs	r0, #1
24019082:	431a      	orrs	r2, r3
24019084:	e7a6      	b.n	24018fd4 <__kernel_rem_pio2+0x1dc>
24019086:	3201      	adds	r2, #1
24019088:	f850 6d04 	ldr.w	r6, [r0, #-4]!
2401908c:	2e00      	cmp	r6, #0
2401908e:	d0fa      	beq.n	24019086 <__kernel_rem_pio2+0x28e>
24019090:	9b05      	ldr	r3, [sp, #20]
24019092:	f503 7312 	add.w	r3, r3, #584	; 0x248
24019096:	eb0d 0003 	add.w	r0, sp, r3
2401909a:	9b01      	ldr	r3, [sp, #4]
2401909c:	18ee      	adds	r6, r5, r3
2401909e:	ab1a      	add	r3, sp, #104	; 0x68
240190a0:	f105 0c01 	add.w	ip, r5, #1
240190a4:	3898      	subs	r0, #152	; 0x98
240190a6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
240190aa:	442a      	add	r2, r5
240190ac:	4562      	cmp	r2, ip
240190ae:	da04      	bge.n	240190ba <__kernel_rem_pio2+0x2c2>
240190b0:	4615      	mov	r5, r2
240190b2:	e709      	b.n	24018ec8 <__kernel_rem_pio2+0xd0>
240190b4:	9804      	ldr	r0, [sp, #16]
240190b6:	2201      	movs	r2, #1
240190b8:	e7e6      	b.n	24019088 <__kernel_rem_pio2+0x290>
240190ba:	9b03      	ldr	r3, [sp, #12]
240190bc:	f8dd e008 	ldr.w	lr, [sp, #8]
240190c0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
240190c4:	9305      	str	r3, [sp, #20]
240190c6:	ee07 3a90 	vmov	s15, r3
240190ca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
240190ce:	2500      	movs	r5, #0
240190d0:	eca6 7b02 	vstmia	r6!, {d7}
240190d4:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 24019100 <__kernel_rem_pio2+0x308>
240190d8:	46b0      	mov	r8, r6
240190da:	4555      	cmp	r5, sl
240190dc:	dd04      	ble.n	240190e8 <__kernel_rem_pio2+0x2f0>
240190de:	eca0 7b02 	vstmia	r0!, {d7}
240190e2:	f10c 0c01 	add.w	ip, ip, #1
240190e6:	e7e1      	b.n	240190ac <__kernel_rem_pio2+0x2b4>
240190e8:	ecbe 5b02 	vldmia	lr!, {d5}
240190ec:	ed38 6b02 	vldmdb	r8!, {d6}
240190f0:	3501      	adds	r5, #1
240190f2:	eea5 7b06 	vfma.f64	d7, d5, d6
240190f6:	e7f0      	b.n	240190da <__kernel_rem_pio2+0x2e2>
240190f8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
240190fc:	e76e      	b.n	24018fdc <__kernel_rem_pio2+0x1e4>
240190fe:	bf00      	nop
	...
2401910c:	3e700000 	.word	0x3e700000
24019110:	00000000 	.word	0x00000000
24019114:	41700000 	.word	0x41700000
24019118:	24033828 	.word	0x24033828
2401911c:	240337e8 	.word	0x240337e8
24019120:	4260      	negs	r0, r4
24019122:	eeb0 0b48 	vmov.f64	d0, d8
24019126:	f000 fb3f 	bl	240197a8 <scalbn>
2401912a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 24019308 <__kernel_rem_pio2+0x510>
2401912e:	eeb4 0bc6 	vcmpe.f64	d0, d6
24019132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019136:	db18      	blt.n	2401916a <__kernel_rem_pio2+0x372>
24019138:	ed9f 7b75 	vldr	d7, [pc, #468]	; 24019310 <__kernel_rem_pio2+0x518>
2401913c:	ee20 7b07 	vmul.f64	d7, d0, d7
24019140:	eebd 7bc7 	vcvt.s32.f64	s14, d7
24019144:	aa06      	add	r2, sp, #24
24019146:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
2401914a:	eea5 0b46 	vfms.f64	d0, d5, d6
2401914e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
24019152:	f105 0b01 	add.w	fp, r5, #1
24019156:	ee10 3a10 	vmov	r3, s0
2401915a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
2401915e:	ee17 3a10 	vmov	r3, s14
24019162:	3418      	adds	r4, #24
24019164:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
24019168:	e73f      	b.n	24018fea <__kernel_rem_pio2+0x1f2>
2401916a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
2401916e:	aa06      	add	r2, sp, #24
24019170:	ee10 3a10 	vmov	r3, s0
24019174:	46ab      	mov	fp, r5
24019176:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
2401917a:	e736      	b.n	24018fea <__kernel_rem_pio2+0x1f2>
2401917c:	a806      	add	r0, sp, #24
2401917e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
24019182:	9001      	str	r0, [sp, #4]
24019184:	ee07 0a90 	vmov	s15, r0
24019188:	3a01      	subs	r2, #1
2401918a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
2401918e:	ee27 7b00 	vmul.f64	d7, d7, d0
24019192:	ee20 0b06 	vmul.f64	d0, d0, d6
24019196:	ed21 7b02 	vstmdb	r1!, {d7}
2401919a:	e734      	b.n	24019006 <__kernel_rem_pio2+0x20e>
2401919c:	ecb5 5b02 	vldmia	r5!, {d5}
240191a0:	ecb4 6b02 	vldmia	r4!, {d6}
240191a4:	3001      	adds	r0, #1
240191a6:	eea5 7b06 	vfma.f64	d7, d5, d6
240191aa:	4548      	cmp	r0, r9
240191ac:	dc01      	bgt.n	240191b2 <__kernel_rem_pio2+0x3ba>
240191ae:	4288      	cmp	r0, r1
240191b0:	ddf4      	ble.n	2401919c <__kernel_rem_pio2+0x3a4>
240191b2:	a842      	add	r0, sp, #264	; 0x108
240191b4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
240191b8:	ed81 7b00 	vstr	d7, [r1]
240191bc:	3a01      	subs	r2, #1
240191be:	e726      	b.n	2401900e <__kernel_rem_pio2+0x216>
240191c0:	9aa2      	ldr	r2, [sp, #648]	; 0x288
240191c2:	2a02      	cmp	r2, #2
240191c4:	dc0a      	bgt.n	240191dc <__kernel_rem_pio2+0x3e4>
240191c6:	2a00      	cmp	r2, #0
240191c8:	dc2e      	bgt.n	24019228 <__kernel_rem_pio2+0x430>
240191ca:	d047      	beq.n	2401925c <__kernel_rem_pio2+0x464>
240191cc:	f008 0007 	and.w	r0, r8, #7
240191d0:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
240191d4:	ecbd 8b06 	vpop	{d8-d10}
240191d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
240191dc:	9aa2      	ldr	r2, [sp, #648]	; 0x288
240191de:	2a03      	cmp	r2, #3
240191e0:	d1f4      	bne.n	240191cc <__kernel_rem_pio2+0x3d4>
240191e2:	a942      	add	r1, sp, #264	; 0x108
240191e4:	f1a3 0208 	sub.w	r2, r3, #8
240191e8:	440a      	add	r2, r1
240191ea:	4611      	mov	r1, r2
240191ec:	4658      	mov	r0, fp
240191ee:	2800      	cmp	r0, #0
240191f0:	f1a1 0108 	sub.w	r1, r1, #8
240191f4:	dc55      	bgt.n	240192a2 <__kernel_rem_pio2+0x4aa>
240191f6:	4659      	mov	r1, fp
240191f8:	2901      	cmp	r1, #1
240191fa:	f1a2 0208 	sub.w	r2, r2, #8
240191fe:	dc60      	bgt.n	240192c2 <__kernel_rem_pio2+0x4ca>
24019200:	ed9f 7b45 	vldr	d7, [pc, #276]	; 24019318 <__kernel_rem_pio2+0x520>
24019204:	aa42      	add	r2, sp, #264	; 0x108
24019206:	4413      	add	r3, r2
24019208:	f1bb 0f01 	cmp.w	fp, #1
2401920c:	dc69      	bgt.n	240192e2 <__kernel_rem_pio2+0x4ea>
2401920e:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
24019212:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
24019216:	2e00      	cmp	r6, #0
24019218:	d16a      	bne.n	240192f0 <__kernel_rem_pio2+0x4f8>
2401921a:	ed87 5b00 	vstr	d5, [r7]
2401921e:	ed87 6b02 	vstr	d6, [r7, #8]
24019222:	ed87 7b04 	vstr	d7, [r7, #16]
24019226:	e7d1      	b.n	240191cc <__kernel_rem_pio2+0x3d4>
24019228:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 24019318 <__kernel_rem_pio2+0x520>
2401922c:	aa42      	add	r2, sp, #264	; 0x108
2401922e:	4413      	add	r3, r2
24019230:	465a      	mov	r2, fp
24019232:	2a00      	cmp	r2, #0
24019234:	da26      	bge.n	24019284 <__kernel_rem_pio2+0x48c>
24019236:	b35e      	cbz	r6, 24019290 <__kernel_rem_pio2+0x498>
24019238:	eeb1 7b46 	vneg.f64	d7, d6
2401923c:	ed87 7b00 	vstr	d7, [r7]
24019240:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
24019244:	aa44      	add	r2, sp, #272	; 0x110
24019246:	2301      	movs	r3, #1
24019248:	ee37 7b46 	vsub.f64	d7, d7, d6
2401924c:	459b      	cmp	fp, r3
2401924e:	da22      	bge.n	24019296 <__kernel_rem_pio2+0x49e>
24019250:	b10e      	cbz	r6, 24019256 <__kernel_rem_pio2+0x45e>
24019252:	eeb1 7b47 	vneg.f64	d7, d7
24019256:	ed87 7b02 	vstr	d7, [r7, #8]
2401925a:	e7b7      	b.n	240191cc <__kernel_rem_pio2+0x3d4>
2401925c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 24019318 <__kernel_rem_pio2+0x520>
24019260:	aa42      	add	r2, sp, #264	; 0x108
24019262:	4413      	add	r3, r2
24019264:	f1bb 0f00 	cmp.w	fp, #0
24019268:	da05      	bge.n	24019276 <__kernel_rem_pio2+0x47e>
2401926a:	b10e      	cbz	r6, 24019270 <__kernel_rem_pio2+0x478>
2401926c:	eeb1 7b47 	vneg.f64	d7, d7
24019270:	ed87 7b00 	vstr	d7, [r7]
24019274:	e7aa      	b.n	240191cc <__kernel_rem_pio2+0x3d4>
24019276:	ed33 6b02 	vldmdb	r3!, {d6}
2401927a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
2401927e:	ee37 7b06 	vadd.f64	d7, d7, d6
24019282:	e7ef      	b.n	24019264 <__kernel_rem_pio2+0x46c>
24019284:	ed33 7b02 	vldmdb	r3!, {d7}
24019288:	3a01      	subs	r2, #1
2401928a:	ee36 6b07 	vadd.f64	d6, d6, d7
2401928e:	e7d0      	b.n	24019232 <__kernel_rem_pio2+0x43a>
24019290:	eeb0 7b46 	vmov.f64	d7, d6
24019294:	e7d2      	b.n	2401923c <__kernel_rem_pio2+0x444>
24019296:	ecb2 6b02 	vldmia	r2!, {d6}
2401929a:	3301      	adds	r3, #1
2401929c:	ee37 7b06 	vadd.f64	d7, d7, d6
240192a0:	e7d4      	b.n	2401924c <__kernel_rem_pio2+0x454>
240192a2:	ed91 7b00 	vldr	d7, [r1]
240192a6:	ed91 5b02 	vldr	d5, [r1, #8]
240192aa:	3801      	subs	r0, #1
240192ac:	ee37 6b05 	vadd.f64	d6, d7, d5
240192b0:	ee37 7b46 	vsub.f64	d7, d7, d6
240192b4:	ed81 6b00 	vstr	d6, [r1]
240192b8:	ee37 7b05 	vadd.f64	d7, d7, d5
240192bc:	ed81 7b02 	vstr	d7, [r1, #8]
240192c0:	e795      	b.n	240191ee <__kernel_rem_pio2+0x3f6>
240192c2:	ed92 7b00 	vldr	d7, [r2]
240192c6:	ed92 5b02 	vldr	d5, [r2, #8]
240192ca:	3901      	subs	r1, #1
240192cc:	ee37 6b05 	vadd.f64	d6, d7, d5
240192d0:	ee37 7b46 	vsub.f64	d7, d7, d6
240192d4:	ed82 6b00 	vstr	d6, [r2]
240192d8:	ee37 7b05 	vadd.f64	d7, d7, d5
240192dc:	ed82 7b02 	vstr	d7, [r2, #8]
240192e0:	e78a      	b.n	240191f8 <__kernel_rem_pio2+0x400>
240192e2:	ed33 6b02 	vldmdb	r3!, {d6}
240192e6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
240192ea:	ee37 7b06 	vadd.f64	d7, d7, d6
240192ee:	e78b      	b.n	24019208 <__kernel_rem_pio2+0x410>
240192f0:	eeb1 5b45 	vneg.f64	d5, d5
240192f4:	eeb1 6b46 	vneg.f64	d6, d6
240192f8:	ed87 5b00 	vstr	d5, [r7]
240192fc:	eeb1 7b47 	vneg.f64	d7, d7
24019300:	ed87 6b02 	vstr	d6, [r7, #8]
24019304:	e78d      	b.n	24019222 <__kernel_rem_pio2+0x42a>
24019306:	bf00      	nop
24019308:	00000000 	.word	0x00000000
2401930c:	41700000 	.word	0x41700000
24019310:	00000000 	.word	0x00000000
24019314:	3e700000 	.word	0x3e700000
	...

24019320 <__kernel_tan>:
24019320:	eeb0 7b40 	vmov.f64	d7, d0
24019324:	ee17 3a90 	vmov	r3, s15
24019328:	4989      	ldr	r1, [pc, #548]	; (24019550 <__kernel_tan+0x230>)
2401932a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
2401932e:	428a      	cmp	r2, r1
24019330:	b510      	push	{r4, lr}
24019332:	dc33      	bgt.n	2401939c <__kernel_tan+0x7c>
24019334:	eefd 6bc0 	vcvt.s32.f64	s13, d0
24019338:	ee16 1a90 	vmov	r1, s13
2401933c:	2900      	cmp	r1, #0
2401933e:	d143      	bne.n	240193c8 <__kernel_tan+0xa8>
24019340:	ee10 4a10 	vmov	r4, s0
24019344:	1c43      	adds	r3, r0, #1
24019346:	4323      	orrs	r3, r4
24019348:	4313      	orrs	r3, r2
2401934a:	d108      	bne.n	2401935e <__kernel_tan+0x3e>
2401934c:	f000 fa20 	bl	24019790 <fabs>
24019350:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
24019354:	ee86 7b00 	vdiv.f64	d7, d6, d0
24019358:	eeb0 0b47 	vmov.f64	d0, d7
2401935c:	bd10      	pop	{r4, pc}
2401935e:	2801      	cmp	r0, #1
24019360:	d0fa      	beq.n	24019358 <__kernel_tan+0x38>
24019362:	ee30 6b01 	vadd.f64	d6, d0, d1
24019366:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
2401936a:	ec53 2b16 	vmov	r2, r3, d6
2401936e:	ee87 3b06 	vdiv.f64	d3, d7, d6
24019372:	460a      	mov	r2, r1
24019374:	ec43 2b15 	vmov	d5, r2, r3
24019378:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
2401937c:	ec53 2b13 	vmov	r2, r3, d3
24019380:	ee35 4b40 	vsub.f64	d4, d5, d0
24019384:	460a      	mov	r2, r1
24019386:	ec43 2b17 	vmov	d7, r2, r3
2401938a:	ee31 4b44 	vsub.f64	d4, d1, d4
2401938e:	eea5 6b07 	vfma.f64	d6, d5, d7
24019392:	eea4 6b07 	vfma.f64	d6, d4, d7
24019396:	eea6 7b03 	vfma.f64	d7, d6, d3
2401939a:	e7dd      	b.n	24019358 <__kernel_tan+0x38>
2401939c:	496d      	ldr	r1, [pc, #436]	; (24019554 <__kernel_tan+0x234>)
2401939e:	428a      	cmp	r2, r1
240193a0:	dd12      	ble.n	240193c8 <__kernel_tan+0xa8>
240193a2:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 240194d0 <__kernel_tan+0x1b0>
240193a6:	2b00      	cmp	r3, #0
240193a8:	bfb8      	it	lt
240193aa:	eeb1 7b40 	vneglt.f64	d7, d0
240193ae:	ee36 6b47 	vsub.f64	d6, d6, d7
240193b2:	ed9f 7b49 	vldr	d7, [pc, #292]	; 240194d8 <__kernel_tan+0x1b8>
240193b6:	bfb8      	it	lt
240193b8:	eeb1 1b41 	vneglt.f64	d1, d1
240193bc:	ee37 7b41 	vsub.f64	d7, d7, d1
240193c0:	ed9f 1b47 	vldr	d1, [pc, #284]	; 240194e0 <__kernel_tan+0x1c0>
240193c4:	ee37 7b06 	vadd.f64	d7, d7, d6
240193c8:	ee27 5b07 	vmul.f64	d5, d7, d7
240193cc:	ed9f 3b46 	vldr	d3, [pc, #280]	; 240194e8 <__kernel_tan+0x1c8>
240193d0:	ee25 6b05 	vmul.f64	d6, d5, d5
240193d4:	ed9f 4b46 	vldr	d4, [pc, #280]	; 240194f0 <__kernel_tan+0x1d0>
240193d8:	eea6 4b03 	vfma.f64	d4, d6, d3
240193dc:	ed9f 3b46 	vldr	d3, [pc, #280]	; 240194f8 <__kernel_tan+0x1d8>
240193e0:	eea4 3b06 	vfma.f64	d3, d4, d6
240193e4:	ed9f 4b46 	vldr	d4, [pc, #280]	; 24019500 <__kernel_tan+0x1e0>
240193e8:	eea3 4b06 	vfma.f64	d4, d3, d6
240193ec:	ed9f 3b46 	vldr	d3, [pc, #280]	; 24019508 <__kernel_tan+0x1e8>
240193f0:	eea4 3b06 	vfma.f64	d3, d4, d6
240193f4:	ed9f 4b46 	vldr	d4, [pc, #280]	; 24019510 <__kernel_tan+0x1f0>
240193f8:	ed9f 2b47 	vldr	d2, [pc, #284]	; 24019518 <__kernel_tan+0x1f8>
240193fc:	eea3 4b06 	vfma.f64	d4, d3, d6
24019400:	ed9f 3b47 	vldr	d3, [pc, #284]	; 24019520 <__kernel_tan+0x200>
24019404:	eea6 3b02 	vfma.f64	d3, d6, d2
24019408:	ed9f 2b47 	vldr	d2, [pc, #284]	; 24019528 <__kernel_tan+0x208>
2401940c:	eea3 2b06 	vfma.f64	d2, d3, d6
24019410:	ed9f 3b47 	vldr	d3, [pc, #284]	; 24019530 <__kernel_tan+0x210>
24019414:	eea2 3b06 	vfma.f64	d3, d2, d6
24019418:	ed9f 2b47 	vldr	d2, [pc, #284]	; 24019538 <__kernel_tan+0x218>
2401941c:	eea3 2b06 	vfma.f64	d2, d3, d6
24019420:	ed9f 3b47 	vldr	d3, [pc, #284]	; 24019540 <__kernel_tan+0x220>
24019424:	494b      	ldr	r1, [pc, #300]	; (24019554 <__kernel_tan+0x234>)
24019426:	eea2 3b06 	vfma.f64	d3, d2, d6
2401942a:	ee27 2b05 	vmul.f64	d2, d7, d5
2401942e:	eeb0 6b44 	vmov.f64	d6, d4
24019432:	eeb0 4b41 	vmov.f64	d4, d1
24019436:	eea3 6b05 	vfma.f64	d6, d3, d5
2401943a:	eea6 4b02 	vfma.f64	d4, d6, d2
2401943e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 24019548 <__kernel_tan+0x228>
24019442:	eea4 1b05 	vfma.f64	d1, d4, d5
24019446:	428a      	cmp	r2, r1
24019448:	eea2 1b06 	vfma.f64	d1, d2, d6
2401944c:	ee37 5b01 	vadd.f64	d5, d7, d1
24019450:	dd1d      	ble.n	2401948e <__kernel_tan+0x16e>
24019452:	ee25 3b05 	vmul.f64	d3, d5, d5
24019456:	179b      	asrs	r3, r3, #30
24019458:	ee06 0a90 	vmov	s13, r0
2401945c:	f003 0302 	and.w	r3, r3, #2
24019460:	f1c3 0301 	rsb	r3, r3, #1
24019464:	eeb8 6be6 	vcvt.f64.s32	d6, s13
24019468:	ee35 5b06 	vadd.f64	d5, d5, d6
2401946c:	ee83 4b05 	vdiv.f64	d4, d3, d5
24019470:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
24019474:	ee34 4b41 	vsub.f64	d4, d4, d1
24019478:	ee37 7b44 	vsub.f64	d7, d7, d4
2401947c:	eea7 6b45 	vfms.f64	d6, d7, d5
24019480:	ee07 3a90 	vmov	s15, r3
24019484:	eeb8 7be7 	vcvt.f64.s32	d7, s15
24019488:	ee27 7b06 	vmul.f64	d7, d7, d6
2401948c:	e764      	b.n	24019358 <__kernel_tan+0x38>
2401948e:	2801      	cmp	r0, #1
24019490:	d01a      	beq.n	240194c8 <__kernel_tan+0x1a8>
24019492:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
24019496:	ec51 0b15 	vmov	r0, r1, d5
2401949a:	2000      	movs	r0, #0
2401949c:	ec41 0b13 	vmov	d3, r0, r1
240194a0:	ee33 7b47 	vsub.f64	d7, d3, d7
240194a4:	ee31 1b47 	vsub.f64	d1, d1, d7
240194a8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
240194ac:	ee87 4b05 	vdiv.f64	d4, d7, d5
240194b0:	ec53 2b14 	vmov	r2, r3, d4
240194b4:	4602      	mov	r2, r0
240194b6:	ec43 2b17 	vmov	d7, r2, r3
240194ba:	eea3 6b07 	vfma.f64	d6, d3, d7
240194be:	eea1 6b07 	vfma.f64	d6, d1, d7
240194c2:	eea6 7b04 	vfma.f64	d7, d6, d4
240194c6:	e747      	b.n	24019358 <__kernel_tan+0x38>
240194c8:	eeb0 7b45 	vmov.f64	d7, d5
240194cc:	e744      	b.n	24019358 <__kernel_tan+0x38>
240194ce:	bf00      	nop
240194d0:	54442d18 	.word	0x54442d18
240194d4:	3fe921fb 	.word	0x3fe921fb
240194d8:	33145c07 	.word	0x33145c07
240194dc:	3c81a626 	.word	0x3c81a626
	...
240194e8:	db605373 	.word	0xdb605373
240194ec:	bef375cb 	.word	0xbef375cb
240194f0:	a03792a6 	.word	0xa03792a6
240194f4:	3f147e88 	.word	0x3f147e88
240194f8:	f2f26501 	.word	0xf2f26501
240194fc:	3f4344d8 	.word	0x3f4344d8
24019500:	c9560328 	.word	0xc9560328
24019504:	3f6d6d22 	.word	0x3f6d6d22
24019508:	8406d637 	.word	0x8406d637
2401950c:	3f9664f4 	.word	0x3f9664f4
24019510:	1110fe7a 	.word	0x1110fe7a
24019514:	3fc11111 	.word	0x3fc11111
24019518:	74bf7ad4 	.word	0x74bf7ad4
2401951c:	3efb2a70 	.word	0x3efb2a70
24019520:	32f0a7e9 	.word	0x32f0a7e9
24019524:	3f12b80f 	.word	0x3f12b80f
24019528:	1a8d1068 	.word	0x1a8d1068
2401952c:	3f3026f7 	.word	0x3f3026f7
24019530:	fee08315 	.word	0xfee08315
24019534:	3f57dbc8 	.word	0x3f57dbc8
24019538:	e96e8493 	.word	0xe96e8493
2401953c:	3f8226e3 	.word	0x3f8226e3
24019540:	1bb341fe 	.word	0x1bb341fe
24019544:	3faba1ba 	.word	0x3faba1ba
24019548:	55555563 	.word	0x55555563
2401954c:	3fd55555 	.word	0x3fd55555
24019550:	3e2fffff 	.word	0x3e2fffff
24019554:	3fe59427 	.word	0x3fe59427

24019558 <expm1f>:
24019558:	ee10 2a10 	vmov	r2, s0
2401955c:	497d      	ldr	r1, [pc, #500]	; (24019754 <expm1f+0x1fc>)
2401955e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
24019562:	428b      	cmp	r3, r1
24019564:	d920      	bls.n	240195a8 <expm1f+0x50>
24019566:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
2401956a:	d902      	bls.n	24019572 <expm1f+0x1a>
2401956c:	ee30 0a00 	vadd.f32	s0, s0, s0
24019570:	4770      	bx	lr
24019572:	d105      	bne.n	24019580 <expm1f+0x28>
24019574:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
24019578:	2a00      	cmp	r2, #0
2401957a:	fe20 0a27 	vselge.f32	s0, s0, s15
2401957e:	4770      	bx	lr
24019580:	2a00      	cmp	r2, #0
24019582:	db05      	blt.n	24019590 <expm1f+0x38>
24019584:	4974      	ldr	r1, [pc, #464]	; (24019758 <expm1f+0x200>)
24019586:	428b      	cmp	r3, r1
24019588:	d95c      	bls.n	24019644 <expm1f+0xec>
2401958a:	2000      	movs	r0, #0
2401958c:	f7fe bf1e 	b.w	240183cc <__math_oflowf>
24019590:	eddf 7a72 	vldr	s15, [pc, #456]	; 2401975c <expm1f+0x204>
24019594:	ee70 7a27 	vadd.f32	s15, s0, s15
24019598:	eef5 7ac0 	vcmpe.f32	s15, #0.0
2401959c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240195a0:	d550      	bpl.n	24019644 <expm1f+0xec>
240195a2:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
240195a6:	4770      	bx	lr
240195a8:	496d      	ldr	r1, [pc, #436]	; (24019760 <expm1f+0x208>)
240195aa:	428b      	cmp	r3, r1
240195ac:	d966      	bls.n	2401967c <expm1f+0x124>
240195ae:	496d      	ldr	r1, [pc, #436]	; (24019764 <expm1f+0x20c>)
240195b0:	428b      	cmp	r3, r1
240195b2:	d847      	bhi.n	24019644 <expm1f+0xec>
240195b4:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 24019768 <expm1f+0x210>
240195b8:	2a00      	cmp	r2, #0
240195ba:	bfa7      	ittee	ge
240195bc:	ee30 7a47 	vsubge.f32	s14, s0, s14
240195c0:	eddf 6a6a 	vldrge	s13, [pc, #424]	; 2401976c <expm1f+0x214>
240195c4:	eddf 6a6a 	vldrlt	s13, [pc, #424]	; 24019770 <expm1f+0x218>
240195c8:	ee30 7a07 	vaddlt.f32	s14, s0, s14
240195cc:	bfac      	ite	ge
240195ce:	2301      	movge	r3, #1
240195d0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
240195d4:	ee37 0a66 	vsub.f32	s0, s14, s13
240195d8:	ee77 7a40 	vsub.f32	s15, s14, s0
240195dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
240195e0:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
240195e4:	ee20 4a25 	vmul.f32	s8, s0, s11
240195e8:	ed9f 6a62 	vldr	s12, [pc, #392]	; 24019774 <expm1f+0x21c>
240195ec:	eddf 6a62 	vldr	s13, [pc, #392]	; 24019778 <expm1f+0x220>
240195f0:	ed9f 5a62 	vldr	s10, [pc, #392]	; 2401977c <expm1f+0x224>
240195f4:	ee20 7a04 	vmul.f32	s14, s0, s8
240195f8:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
240195fc:	eee7 6a06 	vfma.f32	s13, s14, s12
24019600:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 24019780 <expm1f+0x228>
24019604:	eea6 6a87 	vfma.f32	s12, s13, s14
24019608:	eddf 6a5e 	vldr	s13, [pc, #376]	; 24019784 <expm1f+0x22c>
2401960c:	eee6 6a07 	vfma.f32	s13, s12, s14
24019610:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24019614:	eea6 5a87 	vfma.f32	s10, s13, s14
24019618:	eef0 6a46 	vmov.f32	s13, s12
2401961c:	eee5 6a07 	vfma.f32	s13, s10, s14
24019620:	eee4 4a66 	vfms.f32	s9, s8, s13
24019624:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
24019628:	eea0 4a64 	vfms.f32	s8, s0, s9
2401962c:	ee36 5ae4 	vsub.f32	s10, s13, s9
24019630:	eec5 6a04 	vdiv.f32	s13, s10, s8
24019634:	ee66 6a87 	vmul.f32	s13, s13, s14
24019638:	bb73      	cbnz	r3, 24019698 <expm1f+0x140>
2401963a:	ee90 7a26 	vfnms.f32	s14, s0, s13
2401963e:	ee30 0a47 	vsub.f32	s0, s0, s14
24019642:	4770      	bx	lr
24019644:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
24019648:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2401964c:	2a00      	cmp	r2, #0
2401964e:	fe67 7a87 	vselge.f32	s15, s15, s14
24019652:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 24019788 <expm1f+0x230>
24019656:	ee40 7a07 	vmla.f32	s15, s0, s14
2401965a:	eeb0 7a40 	vmov.f32	s14, s0
2401965e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24019662:	eef8 6ae7 	vcvt.f32.s32	s13, s15
24019666:	ee17 3a90 	vmov	r3, s15
2401966a:	eddf 7a3f 	vldr	s15, [pc, #252]	; 24019768 <expm1f+0x210>
2401966e:	eea6 7ae7 	vfms.f32	s14, s13, s15
24019672:	eddf 7a3e 	vldr	s15, [pc, #248]	; 2401976c <expm1f+0x214>
24019676:	ee66 6aa7 	vmul.f32	s13, s13, s15
2401967a:	e7ab      	b.n	240195d4 <expm1f+0x7c>
2401967c:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
24019680:	d208      	bcs.n	24019694 <expm1f+0x13c>
24019682:	eddf 7a42 	vldr	s15, [pc, #264]	; 2401978c <expm1f+0x234>
24019686:	ee70 7a27 	vadd.f32	s15, s0, s15
2401968a:	ee77 7ae7 	vsub.f32	s15, s15, s15
2401968e:	ee30 0a67 	vsub.f32	s0, s0, s15
24019692:	4770      	bx	lr
24019694:	2300      	movs	r3, #0
24019696:	e7a3      	b.n	240195e0 <expm1f+0x88>
24019698:	ee76 6ae7 	vsub.f32	s13, s13, s15
2401969c:	1c5a      	adds	r2, r3, #1
2401969e:	eed6 7a80 	vfnms.f32	s15, s13, s0
240196a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
240196a6:	d106      	bne.n	240196b6 <expm1f+0x15e>
240196a8:	ee70 7a67 	vsub.f32	s15, s0, s15
240196ac:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
240196b0:	eea7 0aa5 	vfma.f32	s0, s15, s11
240196b4:	4770      	bx	lr
240196b6:	2b01      	cmp	r3, #1
240196b8:	d118      	bne.n	240196ec <expm1f+0x194>
240196ba:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
240196be:	eeb4 0ac7 	vcmpe.f32	s0, s14
240196c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240196c6:	bf5b      	ittet	pl
240196c8:	ee70 7a67 	vsubpl.f32	s15, s0, s15
240196cc:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
240196d0:	ee70 5a25 	vaddmi.f32	s11, s0, s11
240196d4:	eea7 6a87 	vfmapl.f32	s12, s15, s14
240196d8:	bf43      	ittte	mi
240196da:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
240196de:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
240196e2:	ee27 0a80 	vmulmi.f32	s0, s15, s0
240196e6:	eeb0 0a46 	vmovpl.f32	s0, s12
240196ea:	4770      	bx	lr
240196ec:	1c5a      	adds	r2, r3, #1
240196ee:	2a39      	cmp	r2, #57	; 0x39
240196f0:	ea4f 51c3 	mov.w	r1, r3, lsl #23
240196f4:	d90b      	bls.n	2401970e <expm1f+0x1b6>
240196f6:	ee77 7ac0 	vsub.f32	s15, s15, s0
240196fa:	ee76 7a67 	vsub.f32	s15, s12, s15
240196fe:	ee17 3a90 	vmov	r3, s15
24019702:	4419      	add	r1, r3
24019704:	ee07 1a90 	vmov	s15, r1
24019708:	ee37 0ac6 	vsub.f32	s0, s15, s12
2401970c:	4770      	bx	lr
2401970e:	2b16      	cmp	r3, #22
24019710:	dc11      	bgt.n	24019736 <expm1f+0x1de>
24019712:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
24019716:	fa42 f303 	asr.w	r3, r2, r3
2401971a:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
2401971e:	ee07 3a10 	vmov	s14, r3
24019722:	ee77 7ac0 	vsub.f32	s15, s15, s0
24019726:	ee77 7a67 	vsub.f32	s15, s14, s15
2401972a:	ee17 3a90 	vmov	r3, s15
2401972e:	440b      	add	r3, r1
24019730:	ee00 3a10 	vmov	s0, r3
24019734:	4770      	bx	lr
24019736:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
2401973a:	05db      	lsls	r3, r3, #23
2401973c:	ee07 3a10 	vmov	s14, r3
24019740:	ee77 7a87 	vadd.f32	s15, s15, s14
24019744:	ee70 7a67 	vsub.f32	s15, s0, s15
24019748:	ee77 7a86 	vadd.f32	s15, s15, s12
2401974c:	ee17 3a90 	vmov	r3, s15
24019750:	e7ed      	b.n	2401972e <expm1f+0x1d6>
24019752:	bf00      	nop
24019754:	4195b843 	.word	0x4195b843
24019758:	42b17217 	.word	0x42b17217
2401975c:	0da24260 	.word	0x0da24260
24019760:	3eb17218 	.word	0x3eb17218
24019764:	3f851591 	.word	0x3f851591
24019768:	3f317180 	.word	0x3f317180
2401976c:	3717f7d1 	.word	0x3717f7d1
24019770:	b717f7d1 	.word	0xb717f7d1
24019774:	b457edbb 	.word	0xb457edbb
24019778:	36867e54 	.word	0x36867e54
2401977c:	bd088889 	.word	0xbd088889
24019780:	b8a670cd 	.word	0xb8a670cd
24019784:	3ad00d01 	.word	0x3ad00d01
24019788:	3fb8aa3b 	.word	0x3fb8aa3b
2401978c:	7149f2ca 	.word	0x7149f2ca

24019790 <fabs>:
24019790:	ec51 0b10 	vmov	r0, r1, d0
24019794:	ee10 2a10 	vmov	r2, s0
24019798:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
2401979c:	ec43 2b10 	vmov	d0, r2, r3
240197a0:	4770      	bx	lr
240197a2:	0000      	movs	r0, r0
240197a4:	0000      	movs	r0, r0
	...

240197a8 <scalbn>:
240197a8:	ee10 1a90 	vmov	r1, s1
240197ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
240197b0:	b98b      	cbnz	r3, 240197d6 <scalbn+0x2e>
240197b2:	ee10 3a10 	vmov	r3, s0
240197b6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
240197ba:	4319      	orrs	r1, r3
240197bc:	d00a      	beq.n	240197d4 <scalbn+0x2c>
240197be:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 24019870 <scalbn+0xc8>
240197c2:	4b37      	ldr	r3, [pc, #220]	; (240198a0 <scalbn+0xf8>)
240197c4:	ee20 0b07 	vmul.f64	d0, d0, d7
240197c8:	4298      	cmp	r0, r3
240197ca:	da0b      	bge.n	240197e4 <scalbn+0x3c>
240197cc:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 24019878 <scalbn+0xd0>
240197d0:	ee20 0b07 	vmul.f64	d0, d0, d7
240197d4:	4770      	bx	lr
240197d6:	f240 72ff 	movw	r2, #2047	; 0x7ff
240197da:	4293      	cmp	r3, r2
240197dc:	d107      	bne.n	240197ee <scalbn+0x46>
240197de:	ee30 0b00 	vadd.f64	d0, d0, d0
240197e2:	4770      	bx	lr
240197e4:	ee10 1a90 	vmov	r1, s1
240197e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
240197ec:	3b36      	subs	r3, #54	; 0x36
240197ee:	f24c 3250 	movw	r2, #50000	; 0xc350
240197f2:	4290      	cmp	r0, r2
240197f4:	dd0d      	ble.n	24019812 <scalbn+0x6a>
240197f6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 24019880 <scalbn+0xd8>
240197fa:	ee10 3a90 	vmov	r3, s1
240197fe:	eeb0 6b47 	vmov.f64	d6, d7
24019802:	ed9f 5b21 	vldr	d5, [pc, #132]	; 24019888 <scalbn+0xe0>
24019806:	2b00      	cmp	r3, #0
24019808:	fe27 7b05 	vselge.f64	d7, d7, d5
2401980c:	ee27 0b06 	vmul.f64	d0, d7, d6
24019810:	4770      	bx	lr
24019812:	4418      	add	r0, r3
24019814:	f240 73fe 	movw	r3, #2046	; 0x7fe
24019818:	4298      	cmp	r0, r3
2401981a:	dcec      	bgt.n	240197f6 <scalbn+0x4e>
2401981c:	2800      	cmp	r0, #0
2401981e:	dd0a      	ble.n	24019836 <scalbn+0x8e>
24019820:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
24019824:	ec53 2b10 	vmov	r2, r3, d0
24019828:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
2401982c:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
24019830:	ec43 2b10 	vmov	d0, r2, r3
24019834:	4770      	bx	lr
24019836:	f110 0f35 	cmn.w	r0, #53	; 0x35
2401983a:	da09      	bge.n	24019850 <scalbn+0xa8>
2401983c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 24019878 <scalbn+0xd0>
24019840:	ee10 3a90 	vmov	r3, s1
24019844:	eeb0 6b47 	vmov.f64	d6, d7
24019848:	ed9f 5b11 	vldr	d5, [pc, #68]	; 24019890 <scalbn+0xe8>
2401984c:	2b00      	cmp	r3, #0
2401984e:	e7db      	b.n	24019808 <scalbn+0x60>
24019850:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
24019854:	ec53 2b10 	vmov	r2, r3, d0
24019858:	3036      	adds	r0, #54	; 0x36
2401985a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
2401985e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
24019862:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 24019898 <scalbn+0xf0>
24019866:	ec43 2b10 	vmov	d0, r2, r3
2401986a:	e7b1      	b.n	240197d0 <scalbn+0x28>
2401986c:	f3af 8000 	nop.w
24019870:	00000000 	.word	0x00000000
24019874:	43500000 	.word	0x43500000
24019878:	c2f8f359 	.word	0xc2f8f359
2401987c:	01a56e1f 	.word	0x01a56e1f
24019880:	8800759c 	.word	0x8800759c
24019884:	7e37e43c 	.word	0x7e37e43c
24019888:	8800759c 	.word	0x8800759c
2401988c:	fe37e43c 	.word	0xfe37e43c
24019890:	c2f8f359 	.word	0xc2f8f359
24019894:	81a56e1f 	.word	0x81a56e1f
24019898:	00000000 	.word	0x00000000
2401989c:	3c900000 	.word	0x3c900000
240198a0:	ffff3cb0 	.word	0xffff3cb0

240198a4 <__kernel_rem_pio2f>:
240198a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
240198a8:	ed2d 8b04 	vpush	{d8-d9}
240198ac:	b0d9      	sub	sp, #356	; 0x164
240198ae:	4688      	mov	r8, r1
240198b0:	9002      	str	r0, [sp, #8]
240198b2:	49b8      	ldr	r1, [pc, #736]	; (24019b94 <__kernel_rem_pio2f+0x2f0>)
240198b4:	9866      	ldr	r0, [sp, #408]	; 0x198
240198b6:	9301      	str	r3, [sp, #4]
240198b8:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
240198bc:	9901      	ldr	r1, [sp, #4]
240198be:	9b67      	ldr	r3, [sp, #412]	; 0x19c
240198c0:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
240198c4:	1d11      	adds	r1, r2, #4
240198c6:	db25      	blt.n	24019914 <__kernel_rem_pio2f+0x70>
240198c8:	1ed0      	subs	r0, r2, #3
240198ca:	bf48      	it	mi
240198cc:	1d10      	addmi	r0, r2, #4
240198ce:	10c0      	asrs	r0, r0, #3
240198d0:	1c45      	adds	r5, r0, #1
240198d2:	00e9      	lsls	r1, r5, #3
240198d4:	eba0 070b 	sub.w	r7, r0, fp
240198d8:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 24019ba4 <__kernel_rem_pio2f+0x300>
240198dc:	9103      	str	r1, [sp, #12]
240198de:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
240198e2:	eb0a 0c0b 	add.w	ip, sl, fp
240198e6:	ae1c      	add	r6, sp, #112	; 0x70
240198e8:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
240198ec:	2400      	movs	r4, #0
240198ee:	4564      	cmp	r4, ip
240198f0:	dd12      	ble.n	24019918 <__kernel_rem_pio2f+0x74>
240198f2:	9901      	ldr	r1, [sp, #4]
240198f4:	ac1c      	add	r4, sp, #112	; 0x70
240198f6:	eb04 0481 	add.w	r4, r4, r1, lsl #2
240198fa:	f50d 7988 	add.w	r9, sp, #272	; 0x110
240198fe:	f04f 0c00 	mov.w	ip, #0
24019902:	45d4      	cmp	ip, sl
24019904:	dc27      	bgt.n	24019956 <__kernel_rem_pio2f+0xb2>
24019906:	f8dd e008 	ldr.w	lr, [sp, #8]
2401990a:	eddf 7aa6 	vldr	s15, [pc, #664]	; 24019ba4 <__kernel_rem_pio2f+0x300>
2401990e:	4627      	mov	r7, r4
24019910:	2600      	movs	r6, #0
24019912:	e016      	b.n	24019942 <__kernel_rem_pio2f+0x9e>
24019914:	2000      	movs	r0, #0
24019916:	e7db      	b.n	240198d0 <__kernel_rem_pio2f+0x2c>
24019918:	42e7      	cmn	r7, r4
2401991a:	bf5d      	ittte	pl
2401991c:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
24019920:	ee07 1a90 	vmovpl	s15, r1
24019924:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
24019928:	eef0 7a47 	vmovmi.f32	s15, s14
2401992c:	ece6 7a01 	vstmia	r6!, {s15}
24019930:	3401      	adds	r4, #1
24019932:	e7dc      	b.n	240198ee <__kernel_rem_pio2f+0x4a>
24019934:	ecfe 6a01 	vldmia	lr!, {s13}
24019938:	ed97 7a00 	vldr	s14, [r7]
2401993c:	eee6 7a87 	vfma.f32	s15, s13, s14
24019940:	3601      	adds	r6, #1
24019942:	455e      	cmp	r6, fp
24019944:	f1a7 0704 	sub.w	r7, r7, #4
24019948:	ddf4      	ble.n	24019934 <__kernel_rem_pio2f+0x90>
2401994a:	ece9 7a01 	vstmia	r9!, {s15}
2401994e:	f10c 0c01 	add.w	ip, ip, #1
24019952:	3404      	adds	r4, #4
24019954:	e7d5      	b.n	24019902 <__kernel_rem_pio2f+0x5e>
24019956:	a908      	add	r1, sp, #32
24019958:	eb01 018a 	add.w	r1, r1, sl, lsl #2
2401995c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
24019960:	eddf 8a8f 	vldr	s17, [pc, #572]	; 24019ba0 <__kernel_rem_pio2f+0x2fc>
24019964:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 24019b9c <__kernel_rem_pio2f+0x2f8>
24019968:	9105      	str	r1, [sp, #20]
2401996a:	9304      	str	r3, [sp, #16]
2401996c:	4656      	mov	r6, sl
2401996e:	00b3      	lsls	r3, r6, #2
24019970:	9306      	str	r3, [sp, #24]
24019972:	ab58      	add	r3, sp, #352	; 0x160
24019974:	eb03 0086 	add.w	r0, r3, r6, lsl #2
24019978:	ac08      	add	r4, sp, #32
2401997a:	ab44      	add	r3, sp, #272	; 0x110
2401997c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
24019980:	46a4      	mov	ip, r4
24019982:	eb03 0086 	add.w	r0, r3, r6, lsl #2
24019986:	4637      	mov	r7, r6
24019988:	2f00      	cmp	r7, #0
2401998a:	f1a0 0004 	sub.w	r0, r0, #4
2401998e:	dc4a      	bgt.n	24019a26 <__kernel_rem_pio2f+0x182>
24019990:	4628      	mov	r0, r5
24019992:	9207      	str	r2, [sp, #28]
24019994:	f000 fab2 	bl	24019efc <scalbnf>
24019998:	eeb0 8a40 	vmov.f32	s16, s0
2401999c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
240199a0:	ee28 0a00 	vmul.f32	s0, s16, s0
240199a4:	f000 fa68 	bl	24019e78 <floorf>
240199a8:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
240199ac:	eea0 8a67 	vfms.f32	s16, s0, s15
240199b0:	2d00      	cmp	r5, #0
240199b2:	9a07      	ldr	r2, [sp, #28]
240199b4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
240199b8:	ee17 9a90 	vmov	r9, s15
240199bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240199c0:	ee38 8a67 	vsub.f32	s16, s16, s15
240199c4:	dd41      	ble.n	24019a4a <__kernel_rem_pio2f+0x1a6>
240199c6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
240199ca:	ab08      	add	r3, sp, #32
240199cc:	f1c5 0e08 	rsb	lr, r5, #8
240199d0:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
240199d4:	fa47 f00e 	asr.w	r0, r7, lr
240199d8:	4481      	add	r9, r0
240199da:	fa00 f00e 	lsl.w	r0, r0, lr
240199de:	1a3f      	subs	r7, r7, r0
240199e0:	f1c5 0007 	rsb	r0, r5, #7
240199e4:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
240199e8:	4107      	asrs	r7, r0
240199ea:	2f00      	cmp	r7, #0
240199ec:	dd3c      	ble.n	24019a68 <__kernel_rem_pio2f+0x1c4>
240199ee:	f04f 0e00 	mov.w	lr, #0
240199f2:	f109 0901 	add.w	r9, r9, #1
240199f6:	4671      	mov	r1, lr
240199f8:	4576      	cmp	r6, lr
240199fa:	dc67      	bgt.n	24019acc <__kernel_rem_pio2f+0x228>
240199fc:	2d00      	cmp	r5, #0
240199fe:	dd03      	ble.n	24019a08 <__kernel_rem_pio2f+0x164>
24019a00:	2d01      	cmp	r5, #1
24019a02:	d074      	beq.n	24019aee <__kernel_rem_pio2f+0x24a>
24019a04:	2d02      	cmp	r5, #2
24019a06:	d07b      	beq.n	24019b00 <__kernel_rem_pio2f+0x25c>
24019a08:	2f02      	cmp	r7, #2
24019a0a:	d12d      	bne.n	24019a68 <__kernel_rem_pio2f+0x1c4>
24019a0c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24019a10:	ee30 8a48 	vsub.f32	s16, s0, s16
24019a14:	b341      	cbz	r1, 24019a68 <__kernel_rem_pio2f+0x1c4>
24019a16:	4628      	mov	r0, r5
24019a18:	9207      	str	r2, [sp, #28]
24019a1a:	f000 fa6f 	bl	24019efc <scalbnf>
24019a1e:	9a07      	ldr	r2, [sp, #28]
24019a20:	ee38 8a40 	vsub.f32	s16, s16, s0
24019a24:	e020      	b.n	24019a68 <__kernel_rem_pio2f+0x1c4>
24019a26:	ee60 7a28 	vmul.f32	s15, s0, s17
24019a2a:	3f01      	subs	r7, #1
24019a2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24019a30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24019a34:	eea7 0ac9 	vfms.f32	s0, s15, s18
24019a38:	eebd 0ac0 	vcvt.s32.f32	s0, s0
24019a3c:	ecac 0a01 	vstmia	ip!, {s0}
24019a40:	ed90 0a00 	vldr	s0, [r0]
24019a44:	ee37 0a80 	vadd.f32	s0, s15, s0
24019a48:	e79e      	b.n	24019988 <__kernel_rem_pio2f+0xe4>
24019a4a:	d105      	bne.n	24019a58 <__kernel_rem_pio2f+0x1b4>
24019a4c:	1e70      	subs	r0, r6, #1
24019a4e:	ab08      	add	r3, sp, #32
24019a50:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
24019a54:	11ff      	asrs	r7, r7, #7
24019a56:	e7c8      	b.n	240199ea <__kernel_rem_pio2f+0x146>
24019a58:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24019a5c:	eeb4 8ae7 	vcmpe.f32	s16, s15
24019a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019a64:	da30      	bge.n	24019ac8 <__kernel_rem_pio2f+0x224>
24019a66:	2700      	movs	r7, #0
24019a68:	eeb5 8a40 	vcmp.f32	s16, #0.0
24019a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019a70:	f040 809a 	bne.w	24019ba8 <__kernel_rem_pio2f+0x304>
24019a74:	1e74      	subs	r4, r6, #1
24019a76:	46a4      	mov	ip, r4
24019a78:	2100      	movs	r1, #0
24019a7a:	45d4      	cmp	ip, sl
24019a7c:	da47      	bge.n	24019b0e <__kernel_rem_pio2f+0x26a>
24019a7e:	2900      	cmp	r1, #0
24019a80:	d063      	beq.n	24019b4a <__kernel_rem_pio2f+0x2a6>
24019a82:	ab08      	add	r3, sp, #32
24019a84:	3d08      	subs	r5, #8
24019a86:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
24019a8a:	2b00      	cmp	r3, #0
24019a8c:	d07f      	beq.n	24019b8e <__kernel_rem_pio2f+0x2ea>
24019a8e:	4628      	mov	r0, r5
24019a90:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24019a94:	f000 fa32 	bl	24019efc <scalbnf>
24019a98:	1c63      	adds	r3, r4, #1
24019a9a:	aa44      	add	r2, sp, #272	; 0x110
24019a9c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 24019ba0 <__kernel_rem_pio2f+0x2fc>
24019aa0:	0099      	lsls	r1, r3, #2
24019aa2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
24019aa6:	4623      	mov	r3, r4
24019aa8:	2b00      	cmp	r3, #0
24019aaa:	f280 80ad 	bge.w	24019c08 <__kernel_rem_pio2f+0x364>
24019aae:	4623      	mov	r3, r4
24019ab0:	2b00      	cmp	r3, #0
24019ab2:	f2c0 80cb 	blt.w	24019c4c <__kernel_rem_pio2f+0x3a8>
24019ab6:	aa44      	add	r2, sp, #272	; 0x110
24019ab8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
24019abc:	4e36      	ldr	r6, [pc, #216]	; (24019b98 <__kernel_rem_pio2f+0x2f4>)
24019abe:	eddf 7a39 	vldr	s15, [pc, #228]	; 24019ba4 <__kernel_rem_pio2f+0x300>
24019ac2:	2000      	movs	r0, #0
24019ac4:	1ae2      	subs	r2, r4, r3
24019ac6:	e0b6      	b.n	24019c36 <__kernel_rem_pio2f+0x392>
24019ac8:	2702      	movs	r7, #2
24019aca:	e790      	b.n	240199ee <__kernel_rem_pio2f+0x14a>
24019acc:	6820      	ldr	r0, [r4, #0]
24019ace:	b949      	cbnz	r1, 24019ae4 <__kernel_rem_pio2f+0x240>
24019ad0:	b118      	cbz	r0, 24019ada <__kernel_rem_pio2f+0x236>
24019ad2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
24019ad6:	6020      	str	r0, [r4, #0]
24019ad8:	2001      	movs	r0, #1
24019ada:	f10e 0e01 	add.w	lr, lr, #1
24019ade:	3404      	adds	r4, #4
24019ae0:	4601      	mov	r1, r0
24019ae2:	e789      	b.n	240199f8 <__kernel_rem_pio2f+0x154>
24019ae4:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
24019ae8:	6020      	str	r0, [r4, #0]
24019aea:	4608      	mov	r0, r1
24019aec:	e7f5      	b.n	24019ada <__kernel_rem_pio2f+0x236>
24019aee:	1e74      	subs	r4, r6, #1
24019af0:	ab08      	add	r3, sp, #32
24019af2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
24019af6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
24019afa:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
24019afe:	e783      	b.n	24019a08 <__kernel_rem_pio2f+0x164>
24019b00:	1e74      	subs	r4, r6, #1
24019b02:	ab08      	add	r3, sp, #32
24019b04:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
24019b08:	f000 003f 	and.w	r0, r0, #63	; 0x3f
24019b0c:	e7f5      	b.n	24019afa <__kernel_rem_pio2f+0x256>
24019b0e:	ab08      	add	r3, sp, #32
24019b10:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
24019b14:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
24019b18:	4301      	orrs	r1, r0
24019b1a:	e7ae      	b.n	24019a7a <__kernel_rem_pio2f+0x1d6>
24019b1c:	3001      	adds	r0, #1
24019b1e:	f854 7d04 	ldr.w	r7, [r4, #-4]!
24019b22:	2f00      	cmp	r7, #0
24019b24:	d0fa      	beq.n	24019b1c <__kernel_rem_pio2f+0x278>
24019b26:	9b06      	ldr	r3, [sp, #24]
24019b28:	f503 73b0 	add.w	r3, r3, #352	; 0x160
24019b2c:	eb0d 0403 	add.w	r4, sp, r3
24019b30:	9b01      	ldr	r3, [sp, #4]
24019b32:	18f7      	adds	r7, r6, r3
24019b34:	ab1c      	add	r3, sp, #112	; 0x70
24019b36:	f106 0c01 	add.w	ip, r6, #1
24019b3a:	3c4c      	subs	r4, #76	; 0x4c
24019b3c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
24019b40:	4430      	add	r0, r6
24019b42:	4560      	cmp	r0, ip
24019b44:	da04      	bge.n	24019b50 <__kernel_rem_pio2f+0x2ac>
24019b46:	4606      	mov	r6, r0
24019b48:	e711      	b.n	2401996e <__kernel_rem_pio2f+0xca>
24019b4a:	9c05      	ldr	r4, [sp, #20]
24019b4c:	2001      	movs	r0, #1
24019b4e:	e7e6      	b.n	24019b1e <__kernel_rem_pio2f+0x27a>
24019b50:	9b04      	ldr	r3, [sp, #16]
24019b52:	f8dd e008 	ldr.w	lr, [sp, #8]
24019b56:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
24019b5a:	9306      	str	r3, [sp, #24]
24019b5c:	ee07 3a90 	vmov	s15, r3
24019b60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24019b64:	2600      	movs	r6, #0
24019b66:	ece7 7a01 	vstmia	r7!, {s15}
24019b6a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 24019ba4 <__kernel_rem_pio2f+0x300>
24019b6e:	46b9      	mov	r9, r7
24019b70:	455e      	cmp	r6, fp
24019b72:	dd04      	ble.n	24019b7e <__kernel_rem_pio2f+0x2da>
24019b74:	ece4 7a01 	vstmia	r4!, {s15}
24019b78:	f10c 0c01 	add.w	ip, ip, #1
24019b7c:	e7e1      	b.n	24019b42 <__kernel_rem_pio2f+0x29e>
24019b7e:	ecfe 6a01 	vldmia	lr!, {s13}
24019b82:	ed39 7a01 	vldmdb	r9!, {s14}
24019b86:	3601      	adds	r6, #1
24019b88:	eee6 7a87 	vfma.f32	s15, s13, s14
24019b8c:	e7f0      	b.n	24019b70 <__kernel_rem_pio2f+0x2cc>
24019b8e:	3c01      	subs	r4, #1
24019b90:	e777      	b.n	24019a82 <__kernel_rem_pio2f+0x1de>
24019b92:	bf00      	nop
24019b94:	24033864 	.word	0x24033864
24019b98:	24033838 	.word	0x24033838
24019b9c:	43800000 	.word	0x43800000
24019ba0:	3b800000 	.word	0x3b800000
24019ba4:	00000000 	.word	0x00000000
24019ba8:	9b03      	ldr	r3, [sp, #12]
24019baa:	eeb0 0a48 	vmov.f32	s0, s16
24019bae:	1a98      	subs	r0, r3, r2
24019bb0:	f000 f9a4 	bl	24019efc <scalbnf>
24019bb4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 24019b9c <__kernel_rem_pio2f+0x2f8>
24019bb8:	eeb4 0ac7 	vcmpe.f32	s0, s14
24019bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019bc0:	db19      	blt.n	24019bf6 <__kernel_rem_pio2f+0x352>
24019bc2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 24019ba0 <__kernel_rem_pio2f+0x2fc>
24019bc6:	ee60 7a27 	vmul.f32	s15, s0, s15
24019bca:	aa08      	add	r2, sp, #32
24019bcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24019bd0:	1c74      	adds	r4, r6, #1
24019bd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24019bd6:	3508      	adds	r5, #8
24019bd8:	eea7 0ac7 	vfms.f32	s0, s15, s14
24019bdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24019be0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
24019be4:	ee10 3a10 	vmov	r3, s0
24019be8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
24019bec:	ee17 3a90 	vmov	r3, s15
24019bf0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
24019bf4:	e74b      	b.n	24019a8e <__kernel_rem_pio2f+0x1ea>
24019bf6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
24019bfa:	aa08      	add	r2, sp, #32
24019bfc:	ee10 3a10 	vmov	r3, s0
24019c00:	4634      	mov	r4, r6
24019c02:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
24019c06:	e742      	b.n	24019a8e <__kernel_rem_pio2f+0x1ea>
24019c08:	a808      	add	r0, sp, #32
24019c0a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
24019c0e:	9001      	str	r0, [sp, #4]
24019c10:	ee07 0a90 	vmov	s15, r0
24019c14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24019c18:	3b01      	subs	r3, #1
24019c1a:	ee67 7a80 	vmul.f32	s15, s15, s0
24019c1e:	ee20 0a07 	vmul.f32	s0, s0, s14
24019c22:	ed62 7a01 	vstmdb	r2!, {s15}
24019c26:	e73f      	b.n	24019aa8 <__kernel_rem_pio2f+0x204>
24019c28:	ecf6 6a01 	vldmia	r6!, {s13}
24019c2c:	ecb5 7a01 	vldmia	r5!, {s14}
24019c30:	eee6 7a87 	vfma.f32	s15, s13, s14
24019c34:	3001      	adds	r0, #1
24019c36:	4550      	cmp	r0, sl
24019c38:	dc01      	bgt.n	24019c3e <__kernel_rem_pio2f+0x39a>
24019c3a:	4290      	cmp	r0, r2
24019c3c:	ddf4      	ble.n	24019c28 <__kernel_rem_pio2f+0x384>
24019c3e:	a858      	add	r0, sp, #352	; 0x160
24019c40:	eb00 0282 	add.w	r2, r0, r2, lsl #2
24019c44:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
24019c48:	3b01      	subs	r3, #1
24019c4a:	e731      	b.n	24019ab0 <__kernel_rem_pio2f+0x20c>
24019c4c:	9b66      	ldr	r3, [sp, #408]	; 0x198
24019c4e:	2b02      	cmp	r3, #2
24019c50:	dc09      	bgt.n	24019c66 <__kernel_rem_pio2f+0x3c2>
24019c52:	2b00      	cmp	r3, #0
24019c54:	dc2b      	bgt.n	24019cae <__kernel_rem_pio2f+0x40a>
24019c56:	d044      	beq.n	24019ce2 <__kernel_rem_pio2f+0x43e>
24019c58:	f009 0007 	and.w	r0, r9, #7
24019c5c:	b059      	add	sp, #356	; 0x164
24019c5e:	ecbd 8b04 	vpop	{d8-d9}
24019c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24019c66:	9b66      	ldr	r3, [sp, #408]	; 0x198
24019c68:	2b03      	cmp	r3, #3
24019c6a:	d1f5      	bne.n	24019c58 <__kernel_rem_pio2f+0x3b4>
24019c6c:	aa30      	add	r2, sp, #192	; 0xc0
24019c6e:	1f0b      	subs	r3, r1, #4
24019c70:	4413      	add	r3, r2
24019c72:	461a      	mov	r2, r3
24019c74:	4620      	mov	r0, r4
24019c76:	2800      	cmp	r0, #0
24019c78:	f1a2 0204 	sub.w	r2, r2, #4
24019c7c:	dc52      	bgt.n	24019d24 <__kernel_rem_pio2f+0x480>
24019c7e:	4622      	mov	r2, r4
24019c80:	2a01      	cmp	r2, #1
24019c82:	f1a3 0304 	sub.w	r3, r3, #4
24019c86:	dc5d      	bgt.n	24019d44 <__kernel_rem_pio2f+0x4a0>
24019c88:	ab30      	add	r3, sp, #192	; 0xc0
24019c8a:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 24019ba4 <__kernel_rem_pio2f+0x300>
24019c8e:	440b      	add	r3, r1
24019c90:	2c01      	cmp	r4, #1
24019c92:	dc67      	bgt.n	24019d64 <__kernel_rem_pio2f+0x4c0>
24019c94:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
24019c98:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
24019c9c:	2f00      	cmp	r7, #0
24019c9e:	d167      	bne.n	24019d70 <__kernel_rem_pio2f+0x4cc>
24019ca0:	edc8 6a00 	vstr	s13, [r8]
24019ca4:	ed88 7a01 	vstr	s14, [r8, #4]
24019ca8:	edc8 7a02 	vstr	s15, [r8, #8]
24019cac:	e7d4      	b.n	24019c58 <__kernel_rem_pio2f+0x3b4>
24019cae:	ab30      	add	r3, sp, #192	; 0xc0
24019cb0:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 24019ba4 <__kernel_rem_pio2f+0x300>
24019cb4:	440b      	add	r3, r1
24019cb6:	4622      	mov	r2, r4
24019cb8:	2a00      	cmp	r2, #0
24019cba:	da24      	bge.n	24019d06 <__kernel_rem_pio2f+0x462>
24019cbc:	b34f      	cbz	r7, 24019d12 <__kernel_rem_pio2f+0x46e>
24019cbe:	eef1 7a47 	vneg.f32	s15, s14
24019cc2:	edc8 7a00 	vstr	s15, [r8]
24019cc6:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
24019cca:	ee77 7ac7 	vsub.f32	s15, s15, s14
24019cce:	aa31      	add	r2, sp, #196	; 0xc4
24019cd0:	2301      	movs	r3, #1
24019cd2:	429c      	cmp	r4, r3
24019cd4:	da20      	bge.n	24019d18 <__kernel_rem_pio2f+0x474>
24019cd6:	b10f      	cbz	r7, 24019cdc <__kernel_rem_pio2f+0x438>
24019cd8:	eef1 7a67 	vneg.f32	s15, s15
24019cdc:	edc8 7a01 	vstr	s15, [r8, #4]
24019ce0:	e7ba      	b.n	24019c58 <__kernel_rem_pio2f+0x3b4>
24019ce2:	ab30      	add	r3, sp, #192	; 0xc0
24019ce4:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 24019ba4 <__kernel_rem_pio2f+0x300>
24019ce8:	440b      	add	r3, r1
24019cea:	2c00      	cmp	r4, #0
24019cec:	da05      	bge.n	24019cfa <__kernel_rem_pio2f+0x456>
24019cee:	b10f      	cbz	r7, 24019cf4 <__kernel_rem_pio2f+0x450>
24019cf0:	eef1 7a67 	vneg.f32	s15, s15
24019cf4:	edc8 7a00 	vstr	s15, [r8]
24019cf8:	e7ae      	b.n	24019c58 <__kernel_rem_pio2f+0x3b4>
24019cfa:	ed33 7a01 	vldmdb	r3!, {s14}
24019cfe:	3c01      	subs	r4, #1
24019d00:	ee77 7a87 	vadd.f32	s15, s15, s14
24019d04:	e7f1      	b.n	24019cea <__kernel_rem_pio2f+0x446>
24019d06:	ed73 7a01 	vldmdb	r3!, {s15}
24019d0a:	3a01      	subs	r2, #1
24019d0c:	ee37 7a27 	vadd.f32	s14, s14, s15
24019d10:	e7d2      	b.n	24019cb8 <__kernel_rem_pio2f+0x414>
24019d12:	eef0 7a47 	vmov.f32	s15, s14
24019d16:	e7d4      	b.n	24019cc2 <__kernel_rem_pio2f+0x41e>
24019d18:	ecb2 7a01 	vldmia	r2!, {s14}
24019d1c:	3301      	adds	r3, #1
24019d1e:	ee77 7a87 	vadd.f32	s15, s15, s14
24019d22:	e7d6      	b.n	24019cd2 <__kernel_rem_pio2f+0x42e>
24019d24:	edd2 7a00 	vldr	s15, [r2]
24019d28:	edd2 6a01 	vldr	s13, [r2, #4]
24019d2c:	ee37 7aa6 	vadd.f32	s14, s15, s13
24019d30:	3801      	subs	r0, #1
24019d32:	ee77 7ac7 	vsub.f32	s15, s15, s14
24019d36:	ed82 7a00 	vstr	s14, [r2]
24019d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
24019d3e:	edc2 7a01 	vstr	s15, [r2, #4]
24019d42:	e798      	b.n	24019c76 <__kernel_rem_pio2f+0x3d2>
24019d44:	edd3 7a00 	vldr	s15, [r3]
24019d48:	edd3 6a01 	vldr	s13, [r3, #4]
24019d4c:	ee37 7aa6 	vadd.f32	s14, s15, s13
24019d50:	3a01      	subs	r2, #1
24019d52:	ee77 7ac7 	vsub.f32	s15, s15, s14
24019d56:	ed83 7a00 	vstr	s14, [r3]
24019d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
24019d5e:	edc3 7a01 	vstr	s15, [r3, #4]
24019d62:	e78d      	b.n	24019c80 <__kernel_rem_pio2f+0x3dc>
24019d64:	ed33 7a01 	vldmdb	r3!, {s14}
24019d68:	3c01      	subs	r4, #1
24019d6a:	ee77 7a87 	vadd.f32	s15, s15, s14
24019d6e:	e78f      	b.n	24019c90 <__kernel_rem_pio2f+0x3ec>
24019d70:	eef1 6a66 	vneg.f32	s13, s13
24019d74:	eeb1 7a47 	vneg.f32	s14, s14
24019d78:	edc8 6a00 	vstr	s13, [r8]
24019d7c:	ed88 7a01 	vstr	s14, [r8, #4]
24019d80:	eef1 7a67 	vneg.f32	s15, s15
24019d84:	e790      	b.n	24019ca8 <__kernel_rem_pio2f+0x404>
24019d86:	bf00      	nop

24019d88 <floor>:
24019d88:	ee10 1a90 	vmov	r1, s1
24019d8c:	f3c1 520a 	ubfx	r2, r1, #20, #11
24019d90:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
24019d94:	2b13      	cmp	r3, #19
24019d96:	b530      	push	{r4, r5, lr}
24019d98:	ee10 0a10 	vmov	r0, s0
24019d9c:	ee10 5a10 	vmov	r5, s0
24019da0:	dc31      	bgt.n	24019e06 <floor+0x7e>
24019da2:	2b00      	cmp	r3, #0
24019da4:	da15      	bge.n	24019dd2 <floor+0x4a>
24019da6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 24019e68 <floor+0xe0>
24019daa:	ee30 0b07 	vadd.f64	d0, d0, d7
24019dae:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
24019db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019db6:	dd07      	ble.n	24019dc8 <floor+0x40>
24019db8:	2900      	cmp	r1, #0
24019dba:	da4e      	bge.n	24019e5a <floor+0xd2>
24019dbc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
24019dc0:	4308      	orrs	r0, r1
24019dc2:	d04d      	beq.n	24019e60 <floor+0xd8>
24019dc4:	492a      	ldr	r1, [pc, #168]	; (24019e70 <floor+0xe8>)
24019dc6:	2000      	movs	r0, #0
24019dc8:	460b      	mov	r3, r1
24019dca:	4602      	mov	r2, r0
24019dcc:	ec43 2b10 	vmov	d0, r2, r3
24019dd0:	e020      	b.n	24019e14 <floor+0x8c>
24019dd2:	4a28      	ldr	r2, [pc, #160]	; (24019e74 <floor+0xec>)
24019dd4:	411a      	asrs	r2, r3
24019dd6:	ea01 0402 	and.w	r4, r1, r2
24019dda:	4304      	orrs	r4, r0
24019ddc:	d01a      	beq.n	24019e14 <floor+0x8c>
24019dde:	ed9f 7b22 	vldr	d7, [pc, #136]	; 24019e68 <floor+0xe0>
24019de2:	ee30 0b07 	vadd.f64	d0, d0, d7
24019de6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
24019dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019dee:	ddeb      	ble.n	24019dc8 <floor+0x40>
24019df0:	2900      	cmp	r1, #0
24019df2:	bfbe      	ittt	lt
24019df4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
24019df8:	fa40 f303 	asrlt.w	r3, r0, r3
24019dfc:	18c9      	addlt	r1, r1, r3
24019dfe:	ea21 0102 	bic.w	r1, r1, r2
24019e02:	2000      	movs	r0, #0
24019e04:	e7e0      	b.n	24019dc8 <floor+0x40>
24019e06:	2b33      	cmp	r3, #51	; 0x33
24019e08:	dd05      	ble.n	24019e16 <floor+0x8e>
24019e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
24019e0e:	d101      	bne.n	24019e14 <floor+0x8c>
24019e10:	ee30 0b00 	vadd.f64	d0, d0, d0
24019e14:	bd30      	pop	{r4, r5, pc}
24019e16:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
24019e1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
24019e1e:	40e2      	lsrs	r2, r4
24019e20:	4210      	tst	r0, r2
24019e22:	d0f7      	beq.n	24019e14 <floor+0x8c>
24019e24:	ed9f 7b10 	vldr	d7, [pc, #64]	; 24019e68 <floor+0xe0>
24019e28:	ee30 0b07 	vadd.f64	d0, d0, d7
24019e2c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
24019e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019e34:	ddc8      	ble.n	24019dc8 <floor+0x40>
24019e36:	2900      	cmp	r1, #0
24019e38:	da02      	bge.n	24019e40 <floor+0xb8>
24019e3a:	2b14      	cmp	r3, #20
24019e3c:	d103      	bne.n	24019e46 <floor+0xbe>
24019e3e:	3101      	adds	r1, #1
24019e40:	ea20 0002 	bic.w	r0, r0, r2
24019e44:	e7c0      	b.n	24019dc8 <floor+0x40>
24019e46:	2401      	movs	r4, #1
24019e48:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
24019e4c:	fa04 f303 	lsl.w	r3, r4, r3
24019e50:	4418      	add	r0, r3
24019e52:	4285      	cmp	r5, r0
24019e54:	bf88      	it	hi
24019e56:	1909      	addhi	r1, r1, r4
24019e58:	e7f2      	b.n	24019e40 <floor+0xb8>
24019e5a:	2000      	movs	r0, #0
24019e5c:	4601      	mov	r1, r0
24019e5e:	e7b3      	b.n	24019dc8 <floor+0x40>
24019e60:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
24019e64:	e7b0      	b.n	24019dc8 <floor+0x40>
24019e66:	bf00      	nop
24019e68:	8800759c 	.word	0x8800759c
24019e6c:	7e37e43c 	.word	0x7e37e43c
24019e70:	bff00000 	.word	0xbff00000
24019e74:	000fffff 	.word	0x000fffff

24019e78 <floorf>:
24019e78:	ee10 3a10 	vmov	r3, s0
24019e7c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
24019e80:	3a7f      	subs	r2, #127	; 0x7f
24019e82:	2a16      	cmp	r2, #22
24019e84:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
24019e88:	dc2a      	bgt.n	24019ee0 <floorf+0x68>
24019e8a:	2a00      	cmp	r2, #0
24019e8c:	da11      	bge.n	24019eb2 <floorf+0x3a>
24019e8e:	eddf 7a18 	vldr	s15, [pc, #96]	; 24019ef0 <floorf+0x78>
24019e92:	ee30 0a27 	vadd.f32	s0, s0, s15
24019e96:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24019e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019e9e:	dd05      	ble.n	24019eac <floorf+0x34>
24019ea0:	2b00      	cmp	r3, #0
24019ea2:	da23      	bge.n	24019eec <floorf+0x74>
24019ea4:	4a13      	ldr	r2, [pc, #76]	; (24019ef4 <floorf+0x7c>)
24019ea6:	2900      	cmp	r1, #0
24019ea8:	bf18      	it	ne
24019eaa:	4613      	movne	r3, r2
24019eac:	ee00 3a10 	vmov	s0, r3
24019eb0:	4770      	bx	lr
24019eb2:	4911      	ldr	r1, [pc, #68]	; (24019ef8 <floorf+0x80>)
24019eb4:	4111      	asrs	r1, r2
24019eb6:	420b      	tst	r3, r1
24019eb8:	d0fa      	beq.n	24019eb0 <floorf+0x38>
24019eba:	eddf 7a0d 	vldr	s15, [pc, #52]	; 24019ef0 <floorf+0x78>
24019ebe:	ee30 0a27 	vadd.f32	s0, s0, s15
24019ec2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24019ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019eca:	ddef      	ble.n	24019eac <floorf+0x34>
24019ecc:	2b00      	cmp	r3, #0
24019ece:	bfbe      	ittt	lt
24019ed0:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
24019ed4:	fa40 f202 	asrlt.w	r2, r0, r2
24019ed8:	189b      	addlt	r3, r3, r2
24019eda:	ea23 0301 	bic.w	r3, r3, r1
24019ede:	e7e5      	b.n	24019eac <floorf+0x34>
24019ee0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
24019ee4:	d3e4      	bcc.n	24019eb0 <floorf+0x38>
24019ee6:	ee30 0a00 	vadd.f32	s0, s0, s0
24019eea:	4770      	bx	lr
24019eec:	2300      	movs	r3, #0
24019eee:	e7dd      	b.n	24019eac <floorf+0x34>
24019ef0:	7149f2ca 	.word	0x7149f2ca
24019ef4:	bf800000 	.word	0xbf800000
24019ef8:	007fffff 	.word	0x007fffff

24019efc <scalbnf>:
24019efc:	ee10 3a10 	vmov	r3, s0
24019f00:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
24019f04:	d02a      	beq.n	24019f5c <scalbnf+0x60>
24019f06:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
24019f0a:	d302      	bcc.n	24019f12 <scalbnf+0x16>
24019f0c:	ee30 0a00 	vadd.f32	s0, s0, s0
24019f10:	4770      	bx	lr
24019f12:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
24019f16:	d122      	bne.n	24019f5e <scalbnf+0x62>
24019f18:	4b23      	ldr	r3, [pc, #140]	; (24019fa8 <scalbnf+0xac>)
24019f1a:	eddf 7a24 	vldr	s15, [pc, #144]	; 24019fac <scalbnf+0xb0>
24019f1e:	4298      	cmp	r0, r3
24019f20:	ee20 0a27 	vmul.f32	s0, s0, s15
24019f24:	db16      	blt.n	24019f54 <scalbnf+0x58>
24019f26:	ee10 3a10 	vmov	r3, s0
24019f2a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
24019f2e:	3a19      	subs	r2, #25
24019f30:	f24c 3150 	movw	r1, #50000	; 0xc350
24019f34:	4288      	cmp	r0, r1
24019f36:	dd14      	ble.n	24019f62 <scalbnf+0x66>
24019f38:	eddf 7a1d 	vldr	s15, [pc, #116]	; 24019fb0 <scalbnf+0xb4>
24019f3c:	eddf 6a1d 	vldr	s13, [pc, #116]	; 24019fb4 <scalbnf+0xb8>
24019f40:	ee10 3a10 	vmov	r3, s0
24019f44:	eeb0 7a67 	vmov.f32	s14, s15
24019f48:	2b00      	cmp	r3, #0
24019f4a:	fe67 7aa6 	vselge.f32	s15, s15, s13
24019f4e:	ee27 0a87 	vmul.f32	s0, s15, s14
24019f52:	4770      	bx	lr
24019f54:	eddf 7a18 	vldr	s15, [pc, #96]	; 24019fb8 <scalbnf+0xbc>
24019f58:	ee27 0a80 	vmul.f32	s0, s15, s0
24019f5c:	4770      	bx	lr
24019f5e:	0dd2      	lsrs	r2, r2, #23
24019f60:	e7e6      	b.n	24019f30 <scalbnf+0x34>
24019f62:	4410      	add	r0, r2
24019f64:	28fe      	cmp	r0, #254	; 0xfe
24019f66:	dce7      	bgt.n	24019f38 <scalbnf+0x3c>
24019f68:	2800      	cmp	r0, #0
24019f6a:	dd06      	ble.n	24019f7a <scalbnf+0x7e>
24019f6c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
24019f70:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
24019f74:	ee00 3a10 	vmov	s0, r3
24019f78:	4770      	bx	lr
24019f7a:	f110 0f16 	cmn.w	r0, #22
24019f7e:	da09      	bge.n	24019f94 <scalbnf+0x98>
24019f80:	eddf 7a0d 	vldr	s15, [pc, #52]	; 24019fb8 <scalbnf+0xbc>
24019f84:	eddf 6a0d 	vldr	s13, [pc, #52]	; 24019fbc <scalbnf+0xc0>
24019f88:	ee10 3a10 	vmov	r3, s0
24019f8c:	eeb0 7a67 	vmov.f32	s14, s15
24019f90:	2b00      	cmp	r3, #0
24019f92:	e7da      	b.n	24019f4a <scalbnf+0x4e>
24019f94:	3019      	adds	r0, #25
24019f96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
24019f9a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
24019f9e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 24019fc0 <scalbnf+0xc4>
24019fa2:	ee07 3a90 	vmov	s15, r3
24019fa6:	e7d7      	b.n	24019f58 <scalbnf+0x5c>
24019fa8:	ffff3cb0 	.word	0xffff3cb0
24019fac:	4c000000 	.word	0x4c000000
24019fb0:	7149f2ca 	.word	0x7149f2ca
24019fb4:	f149f2ca 	.word	0xf149f2ca
24019fb8:	0da24260 	.word	0x0da24260
24019fbc:	8da24260 	.word	0x8da24260
24019fc0:	33000000 	.word	0x33000000
24019fc4:	62652e2a 	.word	0x62652e2a
24019fc8:	00000070 	.word	0x00000070
24019fcc:	53594850 	.word	0x53594850
24019fd0:	52545320 	.word	0x52545320
24019fd4:	20202031 	.word	0x20202031
24019fd8:	00002020 	.word	0x00002020
24019fdc:	64656546 	.word	0x64656546
24019fe0:	6b636162 	.word	0x6b636162
24019fe4:	00002020 	.word	0x00002020
24019fe8:	64696c53 	.word	0x64696c53
24019fec:	696f4e65 	.word	0x696f4e65
24019ff0:	00002073 	.word	0x00002073
24019ff4:	63756c50 	.word	0x63756c50
24019ff8:	6469576b 	.word	0x6469576b
24019ffc:	00002074 	.word	0x00002074
2401a000:	6b636950 	.word	0x6b636950
2401a004:	73696f4e 	.word	0x73696f4e
2401a008:	00002065 	.word	0x00002065
2401a00c:	6b636950 	.word	0x6b636950
2401a010:	69537075 	.word	0x69537075
2401a014:	0000006d 	.word	0x0000006d
2401a018:	20202020 	.word	0x20202020
2401a01c:	20202020 	.word	0x20202020
2401a020:	00002020 	.word	0x00002020
2401a024:	20202020 	.word	0x20202020
2401a028:	20202020 	.word	0x20202020
2401a02c:	00000020 	.word	0x00000020
2401a030:	53594850 	.word	0x53594850
2401a034:	52545320 	.word	0x52545320
2401a038:	20202032 	.word	0x20202032
2401a03c:	00002020 	.word	0x00002020
2401a040:	70657250 	.word	0x70657250
2401a044:	65646e49 	.word	0x65646e49
2401a048:	00002078 	.word	0x00002078
2401a04c:	64696c53 	.word	0x64696c53
2401a050:	696f4e65 	.word	0x696f4e65
2401a054:	00006573 	.word	0x00006573
2401a058:	63756c50 	.word	0x63756c50
2401a05c:	736f506b 	.word	0x736f506b
2401a060:	00002020 	.word	0x00002020
2401a064:	61636544 	.word	0x61636544
2401a068:	20202079 	.word	0x20202079
2401a06c:	00002020 	.word	0x00002020
2401a070:	63756f54 	.word	0x63756f54
2401a074:	20202068 	.word	0x20202068
2401a078:	00002020 	.word	0x00002020
2401a07c:	6b636950 	.word	0x6b636950
2401a080:	6f507075 	.word	0x6f507075
2401a084:	00002073 	.word	0x00002073
2401a088:	706d6144 	.word	0x706d6144
2401a08c:	71657246 	.word	0x71657246
2401a090:	00002020 	.word	0x00002020
2401a094:	6d414646 	.word	0x6d414646
2401a098:	746e756f 	.word	0x746e756f
2401a09c:	00002020 	.word	0x00002020
2401a0a0:	6d414246 	.word	0x6d414246
2401a0a4:	746e756f 	.word	0x746e756f
2401a0a8:	00002020 	.word	0x00002020
2401a0ac:	646c6f66 	.word	0x646c6f66
2401a0b0:	74706544 	.word	0x74706544
2401a0b4:	00002068 	.word	0x00002068
2401a0b8:	70657270 	.word	0x70657270
2401a0bc:	58736f50 	.word	0x58736f50
2401a0c0:	00000020 	.word	0x00000020
2401a0c4:	70657270 	.word	0x70657270
2401a0c8:	59736f50 	.word	0x59736f50
2401a0cc:	00000020 	.word	0x00000020
2401a0d0:	49444441 	.word	0x49444441
2401a0d4:	45564954 	.word	0x45564954
2401a0d8:	20202020 	.word	0x20202020
2401a0dc:	00002020 	.word	0x00002020
2401a0e0:	73696f4e 	.word	0x73696f4e
2401a0e4:	20203165 	.word	0x20203165
2401a0e8:	00002020 	.word	0x00002020
2401a0ec:	73696f4e 	.word	0x73696f4e
2401a0f0:	20203265 	.word	0x20203265
2401a0f4:	00002020 	.word	0x00002020
2401a0f8:	656e6f54 	.word	0x656e6f54
2401a0fc:	20202020 	.word	0x20202020
2401a100:	00002020 	.word	0x00002020
2401a104:	65727453 	.word	0x65727453
2401a108:	20686374 	.word	0x20686374
2401a10c:	00002020 	.word	0x00002020
2401a110:	646e6152 	.word	0x646e6152
2401a114:	79636544 	.word	0x79636544
2401a118:	00002020 	.word	0x00002020
2401a11c:	646e6152 	.word	0x646e6152
2401a120:	6e696147 	.word	0x6e696147
2401a124:	00002020 	.word	0x00002020
2401a128:	73696f4e 	.word	0x73696f4e
2401a12c:	6c6f5665 	.word	0x6c6f5665
2401a130:	00002020 	.word	0x00002020
2401a134:	7062652e 	.word	0x7062652e
2401a138:	00000000 	.word	0x00000000
2401a13c:	69617262 	.word	0x69617262
2401a140:	69622e6e 	.word	0x69622e6e
2401a144:	0000006e 	.word	0x0000006e

2401a148 <D1CorePrescTable>:
2401a148:	00000000 04030201 04030201 09080706     ................

2401a158 <flagBitshiftOffset.0>:
2401a158:	16100600 16100600                       ........

2401a160 <SD_Driver>:
2401a160:	2400d5ad 2400d5dd 2400d5fd 2400d68d     ...$...$...$...$
2401a170:	2400d625 3c3a2a22 7f7c3f3e 00000000     %..$"*:<>?|.....
2401a180:	3d3b2c2b 00005d5b                       +,;=[]..

2401a188 <ExCvt>:
2401a188:	41455543 43414141 49454545 41414949     CUEAAAACEEEIIIAA
2401a198:	4f929245 55554f4f 4f554f59 9f9e4f9c     E..OOOUUYOUO.O..
2401a1a8:	554f4941 a7a6a5a5 abaaa9a8 afaeadac     AIOU............
2401a1b8:	b3b2b1b0 414141b4 bbbab9b8 bfbebdbc     .....AAA........
2401a1c8:	c3c2c1c0 4141c5c4 cbcac9c8 cfcecdcc     ......AA........
2401a1d8:	4545d1d1 49494945 dbdad949 df49dddc     ..EEEIIII.....I.
2401a1e8:	4f4fe14f e8e64f4f 555555e8 efee5959     O.OOOO...UUUYY..
2401a1f8:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

2401a208 <LfnOfs>:
2401a208:	07050301 12100e09 1c181614 0000001e     ................

2401a218 <Tbl>:
2401a218:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
2401a228:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
2401a238:	00e600c9 00f400c6 00f200f6 00f900fb     ................
2401a248:	00d600ff 00f800dc 00d800a3 019200d7     ................
2401a258:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
2401a268:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
2401a278:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
2401a288:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
2401a298:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
2401a2a8:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
2401a2b8:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
2401a2c8:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
2401a2d8:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
2401a2e8:	00da00de 00d900db 00dd00fd 00b400af     ................
2401a2f8:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
2401a308:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

2401a318 <cvt1.1>:
2401a318:	031a0061 031700e0 030700f8 000100ff     a...............
2401a328:	01000178 01320130 01390106 014a0110     x...0.2...9...J.
2401a338:	0179012e 01800106 0243004d 01820181     ..y.....M.C.....
2401a348:	01840182 01860184 01870187 018a0189     ................
2401a358:	018b018b 018e018d 0190018f 01910191     ................
2401a368:	01940193 019601f6 01980197 023d0198     ..............=.
2401a378:	019c019b 0220019d 01a0019f 01a201a0     ...... .........
2401a388:	01a401a2 01a601a4 01a701a7 01aa01a9     ................
2401a398:	01ac01ab 01ae01ac 01af01af 01b201b1     ................
2401a3a8:	01b301b3 01b501b5 01b801b7 01ba01b8     ................
2401a3b8:	01bc01bb 01be01bc 01c001f7 01c201c1     ................
2401a3c8:	01c401c3 01c401c5 01c801c7 01ca01c7     ................
2401a3d8:	01ca01cb 011001cd 000101dd 01de018e     ................
2401a3e8:	01f30112 01f10003 01f401f4 012801f8     ..............(.
2401a3f8:	01120222 0009023a 023b2c65 023d023b     "...:...e,;.;.=.
2401a408:	023f2c66 02410240 02460241 0253010a     f,?.@.A.A.F...S.
2401a418:	01810040 02550186 018a0189 018f0258     @.....U.....X...
2401a428:	0190025a 025d025c 025f025e 02610193     Z...\.].^._...a.
2401a438:	01940262 02650264 02670266 01960197     b...d.e.f.g.....
2401a448:	2c62026a 026d026c 019c026e 02710270     j.b,l.m.n...p.q.
2401a458:	0273019d 019f0274 02770276 02790278     ..s.t...v.w.x.y.
2401a468:	027b027a 2c64027c 027f027e 028101a6     z.{.|.d,~.......
2401a478:	01a90282 02850284 02870286 024401ae     ..............D.
2401a488:	01b201b1 028d0245 028f028e 02910290     ....E...........
2401a498:	037b01b7 03fd0003 03ff03fe 000403ac     ..{.............
2401a4a8:	03880386 038a0389 031103b1 000203c2     ................
2401a4b8:	03a303a3 030803c4 000303cc 038e038c     ................
2401a4c8:	03d8038f 03f20118 03f9000a 03f403f3     ................
2401a4d8:	03f603f5 03f703f7 03fa03f9 043003fa     ..............0.
2401a4e8:	04500320 04600710 048a0122 04c10136      .P...`."...6...
2401a4f8:	04cf010e 04c00001 014404d0 04260561     ..........D.a.&.
2401a508:	00000000                                ....

2401a50c <cvt2.0>:
2401a50c:	00011d7d 1e002c63 1ea00196 1f00015a     }...c,......Z...
2401a51c:	1f100608 1f200606 1f300608 1f400608     ...... ...0...@.
2401a52c:	1f510606 1f590007 1f5b1f52 1f5d1f54     ..Q...Y.R.[.T.].
2401a53c:	1f5f1f56 06081f60 000e1f70 1fbb1fba     V._.`...p.......
2401a54c:	1fc91fc8 1fcb1fca 1fdb1fda 1ff91ff8     ................
2401a55c:	1feb1fea 1ffb1ffa 06081f80 06081f90     ................
2401a56c:	06081fa0 00041fb0 1fb91fb8 1fbc1fb2     ................
2401a57c:	00011fcc 1fd01fc3 1fe00602 1fe50602     ................
2401a58c:	1fec0001 00011ff2 214e1ffc 21320001     ..........N!..2!
2401a59c:	02102170 00012184 24d02183 2c30051a     p!...!...!.$..0,
2401a5ac:	2c60042f 2c670102 2c750106 2c800102     /.`,..g,..u,...,
2401a5bc:	2d000164 ff410826 0000031a              d..-&.A.....

2401a5c8 <__filterTanhTable_48000>:
2401a5c8:	3a0c4647 3a0c8a33 3a0cce41 3a0d126f     GF.:3..:A..:o..:
2401a5d8:	3a0d56be 3a0d9b2e 3a0ddfc0 3a0e2472     .V.:...:...:r$.:
2401a5e8:	3a0e6946 3a0eae3c 3a0ef352 3a0f388a     Fi.:<..:R..:.8.:
2401a5f8:	3a0f7de4 3a0fc35f 3a1008fc 3a104eba     .}.:_..:...:.N.:
2401a608:	3a10949a 3a10da9d 3a1120c1 3a116707     ...:...:. .:.g.:
2401a618:	3a11ad6f 3a11f3f9 3a123aa5 3a128173     o..:...:.:.:s..:
2401a628:	3a12c864 3a130f77 3a1356ad 3a139e05     d..:w..:.V.:...:
2401a638:	3a13e57f 3a142d1c 3a1474dc 3a14bcbf     ...:.-.:.t.:...:
2401a648:	3a1504c4 3a154ced 3a159538 3a15dda6     ...:.L.:8..:...:
2401a658:	3a162637 3a166eec 3a16b7c3 3a1700be     7&.:.n.:...:...:
2401a668:	3a1749dc 3a17931e 3a17dc83 3a18260c     .I.:...:...:.&.:
2401a678:	3a186fb8 3a18b988 3a19037c 3a194d93     .o.:...:|..:.M.:
2401a688:	3a1997ce 3a19e22e 3a1a2cb1 3a1a7758     ...:...:.,.:Xw.:
2401a698:	3a1ac224 3a1b0d14 3a1b5828 3a1ba360     $..:...:(X.:`..:
2401a6a8:	3a1beebd 3a1c3a3e 3a1c85e4 3a1cd1af     ...:>:.:...:...:
2401a6b8:	3a1d1d9e 3a1d69b2 3a1db5eb 3a1e0248     ...:.i.:...:H..:
2401a6c8:	3a1e4ecb 3a1e9b73 3a1ee840 3a1f3532     .N.:s..:@..:25.:
2401a6d8:	3a1f8249 3a1fcf86 3a201ce8 3a206a6f     I..:...:.. :oj :
2401a6e8:	3a20b81c 3a2105ef 3a2153e7 3a21a205     .. :..!:.S!:..!:
2401a6f8:	3a21f049 3a223eb3 3a228d43 3a22dbf9     I.!:.>":C.":..":
2401a708:	3a232ad5 3a2379d7 3a23c8ff 3a24184e     .*#:.y#:..#:N.$:
2401a718:	3a2467c3 3a24b75e 3a250721 3a255709     .g$:^.$:!.%:.W%:
2401a728:	3a25a719 3a25f74f 3a2647ac 3a269830     ..%:O.%:.G&:0.&:
2401a738:	3a26e8db 3a2739ad 3a278aa6 3a27dbc7     ..&:.9':..':..':
2401a748:	3a282d0e 3a287e7d 3a28d014 3a2921d2     .-(:}~(:..(:.!):
2401a758:	3a2973b7 3a29c5c4 3a2a17f9 3a2a6a56     .s):..):..*:Vj*:
2401a768:	3a2abcda 3a2b0f87 3a2b625c 3a2bb558     ..*:..+:\b+:X.+:
2401a778:	3a2c087d 3a2c5bca 3a2caf40 3a2d02de     }.,:.[,:@.,:..-:
2401a788:	3a2d56a4 3a2daa93 3a2dfeaa 3a2e52eb     .V-:..-:..-:.R.:
2401a798:	3a2ea754 3a2efbe6 3a2f50a1 3a2fa585     T..:...:.P/:../:
2401a7a8:	3a2ffa92 3a304fc8 3a30a527 3a30fab0     ../:.O0:'.0:..0:
2401a7b8:	3a315062 3a31a63e 3a31fc44 3a325273     bP1:>.1:D.1:sR2:
2401a7c8:	3a32a8cb 3a32ff4e 3a3355fa 3a33acd0     ..2:N.2:.U3:..3:
2401a7d8:	3a3403d1 3a345afb 3a34b250 3a3509cf     ..4:.Z4:P.4:..5:
2401a7e8:	3a356179 3a35b94c 3a36114b 3a366974     ya5:L.5:K.6:ti6:
2401a7f8:	3a36c1c8 3a371a46 3a3772ef 3a37cbc3     ..6:F.7:.r7:..7:
2401a808:	3a3824c3 3a387ded 3a38d743 3a3930c3     .$8:.}8:C.8:.09:
2401a818:	3a398a6f 3a39e447 3a3a3e4a 3a3a9879     o.9:G.9:J>::y.::
2401a828:	3a3af2d3 3a3b4d59 3a3ba80b 3a3c02e9     ..::YM;:..;:..<:
2401a838:	3a3c5df2 3a3cb928 3a3d148a 3a3d7019     .]<:(.<:..=:.p=:
2401a848:	3a3dcbd3 3a3e27ba 3a3e83ce 3a3ee00e     ..=:.'>:..>:..>:
2401a858:	3a3f3c7b 3a3f9914 3a3ff5da 3a4052ce     {<?:..?:..?:.R@:
2401a868:	3a40afee 3a410d3b 3a416ab6 3a41c85e     ..@:;.A:.jA:^.A:
2401a878:	3a422633 3a428436 3a42e266 3a4340c4     3&B:6.B:f.B:.@C:
2401a888:	3a439f4f 3a43fe08 3a445cef 3a44bc04     O.C:..C:.\D:..D:
2401a898:	3a451b48 3a457ab9 3a45da58 3a463a26     H.E:.zE:X.E:&:F:
2401a8a8:	3a469a22 3a46fa4d 3a475aa6 3a47bb2e     ".F:M.F:.ZG:..G:
2401a8b8:	3a481be4 3a487cca 3a48ddde 3a493f21     ..H:.|H:..H:!?I:
2401a8c8:	3a49a094 3a4a0235 3a4a6406 3a4ac606     ..I:5.J:.dJ:..J:
2401a8d8:	3a4b2836 3a4b8a95 3a4bed24 3a4c4fe3     6(K:..K:$.K:.OL:
2401a8e8:	3a4cb2d1 3a4d15ef 3a4d793e 3a4ddcbc     ..L:..M:>yM:..M:
2401a8f8:	3a4e406b 3a4ea44a 3a4f0859 3a4f6c98     k@N:J.N:Y.O:.lO:
2401a908:	3a4fd109 3a5035a9 3a509a7b 3a50ff7d     ..O:.5P:{.P:}.P:
2401a918:	3a5164b1 3a51ca15 3a522faa 3a529571     .dQ:..Q:./R:q.R:
2401a928:	3a52fb69 3a536192 3a53c7ed 3a542e79     i.R:.aS:..S:y.T:
2401a938:	3a549537 3a54fc26 3a556348 3a55ca9b     7.T:&.T:HcU:..U:
2401a948:	3a563221 3a5699d8 3a5701c2 3a5769de     !2V:..V:..W:.iW:
2401a958:	3a57d22d 3a583aae 3a58a361 3a590c48     -.W:.:X:a.X:H.Y:
2401a968:	3a597561 3a59dead 3a5a482c 3a5ab1de     auY:..Y:,HZ:..Z:
2401a978:	3a5b1bc3 3a5b85dc 3a5bf028 3a5c5aa7     ..[:..[:(.[:.Z\:
2401a988:	3a5cc55a 3a5d3041 3a5d9b5b 3a5e06aa     Z.\:A0]:[.]:..^:
2401a998:	3a5e722c 3a5edde2 3a5f49cd 3a5fb5eb     ,r^:..^:.I_:.._:
2401a9a8:	3a60223e 3a608ec6 3a60fb82 3a616873     >"`:..`:..`:sha:
2401a9b8:	3a61d598 3a6242f2 3a62b082 3a631e46     ..a:.Bb:..b:F.c:
2401a9c8:	3a638c3f 3a63fa6e 3a6468d2 3a64d76c     ?.c:n.c:.hd:l.d:
2401a9d8:	3a65463b 3a65b53f 3a66247a 3a6693ea     ;Fe:?.e:z$f:..f:
2401a9e8:	3a670390 3a67736d 3a67e37f 3a6853c8     ..g:msg:..g:.Sh:
2401a9f8:	3a68c447 3a6934fd 3a69a5e9 3a6a170c     G.h:.4i:..i:..j:
2401aa08:	3a6a8866 3a6af9f6 3a6b6bbe 3a6bddbc     f.j:..j:.kk:..k:
2401aa18:	3a6c4ff2 3a6cc25f 3a6d3504 3a6da7e0     .Ol:_.l:.5m:..m:
2401aa28:	3a6e1af4 3a6e8e3f 3a6f01c2 3a6f757d     ..n:?.n:..o:}uo:
2401aa38:	3a6fe971 3a705d9c 3a70d200 3a71469c     q.o:.]p:..p:.Fq:
2401aa48:	3a71bb70 3a72307d 3a72a5c3 3a731b41     p.q:}0r:..r:A.s:
2401aa58:	3a7390f8 3a7406e9 3a747d12 3a74f375     ..s:..t:.}t:u.t:
2401aa68:	3a756a11 3a75e0e6 3a7657f5 3a76cf3e     .ju:..u:.Wv:>.v:
2401aa78:	3a7746c0 3a77be7d 3a783673 3a78aea3     .Fw:}.w:s6x:..x:
2401aa88:	3a79270e 3a799fb2 3a7a1892 3a7a91ab     .'y:..y:..z:..z:
2401aa98:	3a7b0b00 3a7b848f 3a7bfe59 3a7c785e     ..{:..{:Y.{:^x|:
2401aaa8:	3a7cf29e 3a7d6d19 3a7de7d0 3a7e62c2     ..|:.m}:..}:.b~:
2401aab8:	3a7eddef 3a7f5958 3a7fd4fd 3a80286f     ..~:XY.:...:o(.:
2401aac8:	3a80667d 3a80a4aa 3a80e2f4 3a81215d     }f.:...:...:]!.:
2401aad8:	3a815fe4 3a819e89 3a81dd4d 3a821c2f     ._.:...:M..:/..:
2401aae8:	3a825b2f 3a829a4e 3a82d98b 3a8318e8     /[.:N..:...:...:
2401aaf8:	3a835862 3a8397fc 3a83d7b4 3a84178b     bX.:...:...:...:
2401ab08:	3a845781 3a849796 3a84d7ca 3a85181d     .W.:...:...:...:
2401ab18:	3a855890 3a859921 3a85d9d2 3a861aa2     .X.:!..:...:...:
2401ab28:	3a865b92 3a869ca0 3a86ddcf 3a871f1d     .[.:...:...:...:
2401ab38:	3a87608a 3a87a218 3a87e3c5 3a882592     .`.:...:...:.%.:
2401ab48:	3a88677e 3a88a98b 3a88ebb7 3a892e04     ~g.:...:...:...:
2401ab58:	3a897071 3a89b2fe 3a89f5ab 3a8a3878     qp.:...:...:x8.:
2401ab68:	3a8a7b66 3a8abe74 3a8b01a3 3a8b44f2     f{.:t..:...:.D.:
2401ab78:	3a8b8862 3a8bcbf2 3a8c0fa3 3a8c5375     b..:...:...:uS.:
2401ab88:	3a8c9768 3a8cdb7b 3a8d1fb0 3a8d6406     h..:{..:...:.d.:
2401ab98:	3a8da87c 3a8ded14 3a8e31cd 3a8e76a8     |..:...:.1.:.v.:
2401aba8:	3a8ebba3 3a8f00c0 3a8f45ff 3a8f8b5f     ...:...:.E.:_..:
2401abb8:	3a8fd0e1 3a901684 3a905c49 3a90a230     ...:...:I\.:0..:
2401abc8:	3a90e839 3a912e63 3a9174b0 3a91bb1f     9..:c..:.t.:...:
2401abd8:	3a9201af 3a924862 3a928f37 3a92d62f     ...:bH.:7..:/..:
2401abe8:	3a931d49 3a936485 3a93abe4 3a93f365     I..:.d.:...:e..:
2401abf8:	3a943b09 3a9482cf 3a94cab9 3a9512c5     .;.:...:...:...:
2401ac08:	3a955af4 3a95a346 3a95ebbb 3a963453     .Z.:F..:...:S4.:
2401ac18:	3a967d0e 3a96c5ed 3a970eef 3a975814     .}.:...:...:.X.:
2401ac28:	3a97a15c 3a97eac8 3a983458 3a987e0b     \..:...:X4.:.~.:
2401ac38:	3a98c7e2 3a9911dc 3a995bfb 3a99a63d     ...:...:.[.:=..:
2401ac48:	3a99f0a4 3a9a3b2e 3a9a85dc 3a9ad0af     ...:.;.:...:...:
2401ac58:	3a9b1ba6 3a9b66c1 3a9bb200 3a9bfd64     ...:.f.:...:d..:
2401ac68:	3a9c48ed 3a9c949a 3a9ce06b 3a9d2c62     .H.:...:k..:b,.:
2401ac78:	3a9d787d 3a9dc4bd 3a9e1122 3a9e5dac     }x.:...:"..:.].:
2401ac88:	3a9eaa5a 3a9ef72f 3a9f4428 3a9f9146     Z..:/..:(D.:F..:
2401ac98:	3a9fde8a 3aa02bf4 3aa07982 3aa0c737     ...:.+.:.y.:7..:
2401aca8:	3aa11511 3aa16310 3aa1b136 3aa1ff81     ...:.c.:6..:...:
2401acb8:	3aa24df2 3aa29c8a 3aa2eb47 3aa33a2a     .M.:...:G..:*:.:
2401acc8:	3aa38934 3aa3d864 3aa427ba 3aa47736     4..:d..:.'.:6w.:
2401acd8:	3aa4c6d9 3aa516a3 3aa56693 3aa5b6aa     ...:...:.f.:...:
2401ace8:	3aa606e8 3aa6574d 3aa6a7d8 3aa6f88b     ...:MW.:...:...:
2401acf8:	3aa74964 3aa79a65 3aa7eb8d 3aa83cdd     dI.:e..:...:.<.:
2401ad08:	3aa88e53 3aa8dff1 3aa931b7 3aa983a4     S..:...:.1.:...:
2401ad18:	3aa9d5b9 3aaa27f6 3aaa7a5a 3aaacce7     ...:.'.:Zz.:...:
2401ad28:	3aab1f9b 3aab7277 3aabc57c 3aac18a9     ...:wr.:|..:...:
2401ad38:	3aac6bfe 3aacbf7b 3aad1321 3aad66ef     .k.:{..:!..:.f.:
2401ad48:	3aadbae6 3aae0f05 3aae634d 3aaeb7be     ...:...:Mc.:...:
2401ad58:	3aaf0c58 3aaf611b 3aafb607 3ab00b1c     X..:.a.:...:...:
2401ad68:	3ab0605b 3ab0b5c2 3ab10b53 3ab1610d     [`.:...:S..:.a.:
2401ad78:	3ab1b6f1 3ab20cff 3ab26336 3ab2b996     ...:...:6c.:...:
2401ad88:	3ab31021 3ab366d6 3ab3bdb4 3ab414bd     !..:.f.:...:...:
2401ad98:	3ab46bf0 3ab4c34d 3ab51ad4 3ab57286     .k.:M..:...:.r.:
2401ada8:	3ab5ca62 3ab62268 3ab67a9a 3ab6d2f6     b..:h".:.z.:...:
2401adb8:	3ab72b7c 3ab7842e 3ab7dd0b 3ab83612     |+.:...:...:.6.:
2401adc8:	3ab88f45 3ab8e8a3 3ab9422c 3ab99be1     E..:...:,B.:...:
2401add8:	3ab9f5c1 3aba4fcc 3abaaa03 3abb0466     ...:.O.:...:f..:
2401ade8:	3abb5ef5 3abbb9af 3abc1495 3abc6fa8     .^.:...:...:.o.:
2401adf8:	3abccae6 3abd2651 3abd81e8 3abdddab     ...:Q&.:...:...:
2401ae08:	3abe399b 3abe95b7 3abef200 3abf4e75     .9.:...:...:uN.:
2401ae18:	3abfab18 3ac007e7 3ac064e3 3ac0c20c     ...:...:.d.:...:
2401ae28:	3ac11f62 3ac17ce5 3ac1da96 3ac23874     b..:.|.:...:t8.:
2401ae38:	3ac29680 3ac2f4b9 3ac3531f 3ac3b1b4     ...:...:.S.:...:
2401ae48:	3ac41076 3ac46f66 3ac4ce84 3ac52dd0     v..:fo.:...:.-.:
2401ae58:	3ac58d4a 3ac5ecf3 3ac64cc9 3ac6accf     J..:...:.L.:...:
2401ae68:	3ac70d02 3ac76d65 3ac7cdf5 3ac82eb5     ...:em.:...:...:
2401ae78:	3ac88fa4 3ac8f0c1 3ac9520e 3ac9b389     ...:...:.R.:...:
2401ae88:	3aca1534 3aca770e 3acad918 3acb3b51     4..:.w.:...:Q;.:
2401ae98:	3acb9db9 3acc0051 3acc6319 3accc611     ...:Q..:.c.:...:
2401aea8:	3acd2939 3acd8c90 3acdf018 3ace53d0     9).:...:...:.S.:
2401aeb8:	3aceb7b8 3acf1bd1 3acf801a 3acfe494     ...:...:...:...:
2401aec8:	3ad0493e 3ad0ae19 3ad11325 3ad17862     >I.:...:%..:bx.:
2401aed8:	3ad1ddd0 3ad2436f 3ad2a93f 3ad30f40     ...:oC.:?..:@..:
2401aee8:	3ad37573 3ad3dbd7 3ad4426d 3ad4a935     su.:...:mB.:5..:
2401aef8:	3ad5102e 3ad5775a 3ad5deb7 3ad64646     ...:Zw.:...:FF.:
2401af08:	3ad6ae07 3ad715fb 3ad77e21 3ad7e679     ...:...:!~.:y..:
2401af18:	3ad84f04 3ad8b7c2 3ad920b2 3ad989d5     .O.:...:. .:...:
2401af28:	3ad9f32b 3ada5cb4 3adac670 3adb305f     +..:.\.:p..:_0.:
2401af38:	3adb9a82 3adc04d8 3adc6f61 3adcda1e     ...:...:ao.:...:
2401af48:	3add450f 3addb034 3ade1b8c 3ade8719     .E.:4..:...:...:
2401af58:	3adef2d9 3adf5ece 3adfcaf6 3ae03754     ...:.^.:...:T7.:
2401af68:	3ae0a3e6 3ae110ac 3ae17da7 3ae1ead7     ...:...:.}.:...:
2401af78:	3ae2583b 3ae2c5d5 3ae333a3 3ae3a1a7     ;X.:...:.3.:...:
2401af88:	3ae40fe0 3ae47e4f 3ae4ecf3 3ae55bcc     ...:O~.:...:.[.:
2401af98:	3ae5cadc 3ae63a21 3ae6a99b 3ae7194c     ...:!:.:...:L..:
2401afa8:	3ae78933 3ae7f950 3ae869a4 3ae8da2e     3..:P..:.i.:...:
2401afb8:	3ae94aee 3ae9bbe5 3aea2d12 3aea9e77     .J.:...:.-.:w..:
2401afc8:	3aeb1012 3aeb81e4 3aebf3ee 3aec662e     ...:...:...:.f.:
2401afd8:	3aecd8a6 3aed4b56 3aedbe3d 3aee315b     ...:VK.:=..:[1.:
2401afe8:	3aeea4b1 3aef1840 3aef8c06 3af00004     ...:@..:...:...:
2401aff8:	3af0743a 3af0e8a9 3af15d50 3af1d22f     :t.:...:P].:/..:
2401b008:	3af24747 3af2bc98 3af33222 3af3a7e4     GG.:...:"2.:...:
2401b018:	3af41ddf 3af49414 3af50a82 3af58129     ...:...:...:)..:
2401b028:	3af5f80a 3af66f24 3af6e678 3af75e06     ...:$o.:x..:.^.:
2401b038:	3af7d5cd 3af84dcf 3af8c60a 3af93e80     ...:.M.:...:.>.:
2401b048:	3af9b731 3afa301b 3afaa940 3afb22a0     1..:.0.:@..:.".:
2401b058:	3afb9c3b 3afc1610 3afc9021 3afd0a6d     ;..:...:!..:m..:
2401b068:	3afd84f3 3afdffb6 3afe7ab3 3afef5ec     ...:...:.z.:...:
2401b078:	3aff7161 3affed12 3b00347f 3b007293     aq.:...:.4.;.r.;
2401b088:	3b00b0c6 3b00ef16 3b012d85 3b016c12     ...;...;.-.;.l.;
2401b098:	3b01aabd 3b01e986 3b02286e 3b026775     ...;...;n(.;ug.;
2401b0a8:	3b02a699 3b02e5dd 3b03253f 3b0364c0     ...;...;?%.;.d.;
2401b0b8:	3b03a45f 3b03e41d 3b0423fb 3b0463f7     _..;...;.#.;.c.;
2401b0c8:	3b04a412 3b04e44c 3b0524a5 3b05651e     ...;L..;.$.;.e.;
2401b0d8:	3b05a5b5 3b05e66c 3b062742 3b066838     ...;l..;B'.;8h.;
2401b0e8:	3b06a94d 3b06ea82 3b072bd6 3b076d49     M..;...;.+.;Im.;
2401b0f8:	3b07aedd 3b07f090 3b083263 3b087456     ...;...;c2.;Vt.;
2401b108:	3b08b669 3b08f89c 3b093aef 3b097d62     i..;...;.:.;b}.;
2401b118:	3b09bff5 3b0a02a8 3b0a457c 3b0a8870     ...;...;|E.;p..;
2401b128:	3b0acb85 3b0b0eba 3b0b520f 3b0b9585     ...;...;.R.;...;
2401b138:	3b0bd91c 3b0c1cd4 3b0c60ac 3b0ca4a5     ...;...;.`.;...;
2401b148:	3b0ce8bf 3b0d2cfa 3b0d7157 3b0db5d4     ...;.,.;Wq.;...;
2401b158:	3b0dfa72 3b0e3f32 3b0e8413 3b0ec915     r..;2?.;...;...;
2401b168:	3b0f0e39 3b0f537e 3b0f98e4 3b0fde6d     9..;~S.;...;m..;
2401b178:	3b102417 3b1069e2 3b10afd0 3b10f5df     .$.;.i.;...;...;
2401b188:	3b113c10 3b118264 3b11c8d9 3b120f70     .<.;d..;...;p..;
2401b198:	3b12562a 3b129d06 3b12e404 3b132b24     *V.;...;...;$+.;
2401b1a8:	3b137267 3b13b9cd 3b140155 3b144900     gr.;...;U..;.I.;
2401b1b8:	3b1490cd 3b14d8bd 3b1520d0 3b156906     ...;...;. .;.i.;
2401b1c8:	3b15b15f 3b15f9db 3b16427a 3b168b3c     _..;...;zB.;<..;
2401b1d8:	3b16d421 3b171d2a 3b176656 3b17afa6     !..;*..;Vf.;...;
2401b1e8:	3b17f919 3b1842af 3b188c69 3b18d647     ...;.B.;i..;G..;
2401b1f8:	3b192049 3b196a6e 3b19b4b8 3b19ff25     I .;nj.;...;%..;
2401b208:	3b1a49b7 3b1a946c 3b1adf46 3b1b2a44     .I.;l..;F..;D*.;
2401b218:	3b1b7566 3b1bc0ad 3b1c0c18 3b1c57a7     fu.;...;...;.W.;
2401b228:	3b1ca35b 3b1cef34 3b1d3b32 3b1d8754     [..;4..;2;.;T..;
2401b238:	3b1dd39b 3b1e2008 3b1e6c99 3b1eb94f     ...;. .;.l.;O..;
2401b248:	3b1f062a 3b1f532b 3b1fa051 3b1fed9c     *..;+S.;Q..;...;
2401b258:	3b203b0d 3b2088a3 3b20d65f 3b212440     .; ;.. ;_. ;@$!;
2401b268:	3b217247 3b21c074 3b220ec7 3b225d3f     Gr!;t.!;..";?]";
2401b278:	3b22abde 3b22faa3 3b23498e 3b23989f     ..";..";.I#;..#;
2401b288:	3b23e7d6 3b243734 3b2486b8 3b24d663     ..#;47$;..$;c.$;
2401b298:	3b252634 3b25762c 3b25c64a 3b261690     4&%;,v%;J.%;..&;
2401b2a8:	3b2666fc 3b26b78f 3b27084a 3b27592b     .f&;..&;J.';+Y';
2401b2b8:	3b27aa33 3b27fb63 3b284cba 3b289e39     3.';c.';.L(;9.(;
2401b2c8:	3b28efde 3b2941ac 3b2993a1 3b29e5be     ..(;.A);..);..);
2401b2d8:	3b2a3802 3b2a8a6e 3b2add03 3b2b2fbf     .8*;n.*;..*;./+;
2401b2e8:	3b2b82a3 3b2bd5af 3b2c28e4 3b2c7c41     ..+;..+;.(,;A|,;
2401b2f8:	3b2ccfc6 3b2d2374 3b2d774a 3b2dcb49     ..,;t#-;Jw-;I.-;
2401b308:	3b2e1f71 3b2e73c1 3b2ec83a 3b2f1cdc     q..;.s.;:..;../;
2401b318:	3b2f71a7 3b2fc69b 3b301bb8 3b3070fe     .q/;../;..0;.p0;
2401b328:	3b30c66e 3b311c07 3b3171ca 3b31c7b6     n.0;..1;.q1;..1;
2401b338:	3b321dcb 3b32740b 3b32ca74 3b332107     ..2;.t2;t.2;.!3;
2401b348:	3b3377c3 3b33ceaa 3b3425bb 3b347cf6     .w3;..3;.%4;.|4;
2401b358:	3b34d45c 3b352beb 3b3583a5 3b35db8a     \.4;.+5;..5;..5;
2401b368:	3b363399 3b368bd2 3b36e437 3b373cc6     .36;..6;7.6;.<7;
2401b378:	3b379580 3b37ee65 3b384775 3b38a0b1     ..7;e.7;uG8;..8;
2401b388:	3b38fa17 3b3953a9 3b39ad66 3b3a074f     ..8;.S9;f.9;O.:;
2401b398:	3b3a6163 3b3abba2 3b3b160e 3b3b70a5     ca:;..:;..;;.p;;
2401b3a8:	3b3bcb68 3b3c2657 3b3c8172 3b3cdcb9     h.;;W&<;r.<;..<;
2401b3b8:	3b3d382d 3b3d93cc 3b3def98 3b3e4b91     -8=;..=;..=;.K>;
2401b3c8:	3b3ea7b6 3b3f0408 3b3f6086 3b3fbd31     ..>;..?;.`?;1.?;
2401b3d8:	3b401a09 3b40770e 3b40d440 3b41319f     ..@;.w@;@.@;.1A;
2401b3e8:	3b418f2b 3b41ece5 3b424acc 3b42a8e0     +.A;..A;.JB;..B;
2401b3f8:	3b430722 3b436592 3b43c430 3b4422fb     ".C;.eC;0.C;."D;
2401b408:	3b4481f4 3b44e11b 3b454070 3b459ff4     ..D;..D;p@E;..E;
2401b418:	3b45ffa5 3b465f85 3b46bf93 3b471fd0     ..E;._F;..F;..G;
2401b428:	3b47803c 3b47e0d6 3b48419f 3b48a297     <.G;..G;.AH;..H;
2401b438:	3b4903bd 3b496513 3b49c698 3b4a284c     ..I;.eI;..I;L(J;
2401b448:	3b4a8a30 3b4aec43 3b4b4e85 3b4bb0f7     0.J;C.J;.NK;..K;
2401b458:	3b4c1399 3b4c766a 3b4cd96b 3b4d3c9c     ..L;jvL;k.L;.<M;
2401b468:	3b4d9ffe 3b4e038f 3b4e6750 3b4ecb42     ..M;..N;PgN;B.N;
2401b478:	3b4f2f64 3b4f93b7 3b4ff83a 3b505cee     d/O;..O;:.O;.\P;
2401b488:	3b50c1d3 3b5126e9 3b518c2f 3b51f1a7     ..P;.&Q;/.Q;..Q;
2401b498:	3b52574f 3b52bd29 3b532335 3b538971     OWR;).R;5#S;q.S;
2401b4a8:	3b53efdf 3b54567f 3b54bd51 3b552454     ..S;.VT;Q.T;T$U;
2401b4b8:	3b558b89 3b55f2f0 3b565a89 3b56c255     ..U;..U;.ZV;U.V;
2401b4c8:	3b572a52 3b579282 3b57fae5 3b58637a     R*W;..W;..W;zcX;
2401b4d8:	3b58cc41 3b59353b 3b599e69 3b5a07c9     A.X;;5Y;i.Y;..Z;
2401b4e8:	3b5a715c 3b5adb22 3b5b451c 3b5baf48     \qZ;".Z;.E[;H.[;
2401b4f8:	3b5c19a8 3b5c843c 3b5cef03 3b5d59fe     ..\;<.\;..\;.Y];
2401b508:	3b5dc52d 3b5e3090 3b5e9c27 3b5f07f2     -.];.0^;'.^;.._;
2401b518:	3b5f73f1 3b5fe024 3b604c8c 3b60b928     .s_;$._;.L`;(.`;
2401b528:	3b6125f8 3b6192fe 3b620038 3b626da7     .%a;..a;8.b;.mb;
2401b538:	3b62db4b 3b634925 3b63b733 3b642577     K.b;%Ic;3.c;w%d;
2401b548:	3b6493f0 3b65029f 3b657183 3b65e09d     ..d;..e;.qe;..e;
2401b558:	3b664fec 3b66bf72 3b672f2e 3b679f1f     .Of;r.f;./g;..g;
2401b568:	3b680f47 3b687fa5 3b68f03a 3b696105     G.h;..h;:.h;.ai;
2401b578:	3b69d207 3b6a433f 3b6ab4af 3b6b2655     ..i;?Cj;..j;U&k;
2401b588:	3b6b9832 3b6c0a47 3b6c7c92 3b6cef15     2.k;G.l;.|l;..l;
2401b598:	3b6d61d0 3b6dd4c2 3b6e47eb 3b6ebb4d     .am;..m;.Gn;M.n;
2401b5a8:	3b6f2ee6 3b6fa2b7 3b7016c1 3b708b02     ..o;..o;..p;..p;
2401b5b8:	3b70ff7c 3b71742e 3b71e919 3b725e3c     |.p;.tq;..q;<^r;
2401b5c8:	3b72d398 3b73492d 3b73befb 3b743502     ..r;-Is;..s;.5t;
2401b5d8:	3b74ab42 3b7521bb 3b75986e 3b760f5a     B.t;.!u;n.u;Z.v;
2401b5e8:	3b768680 3b76fddf 3b777579 3b77ed4c     ..v;..v;yuw;L.w;
2401b5f8:	3b786559 3b78dda0 3b795622 3b79cede     Yex;..x;"Vy;..y;
2401b608:	3b7a47d4 3b7ac105 3b7b3a70 3b7bb417     .Gz;..z;p:{;..{;
2401b618:	3b7c2df8 3b7ca815 3b7d226c 3b7d9cff     .-|;..|;l"};..};
2401b628:	3b7e17cd 3b7e92d6 3b7f0e1b 3b7f899c     ..~;..~;...;...;
2401b638:	3b8002ac 3b8040a9 3b807ec3 3b80bcfb     ...;.@.;.~.;...;
2401b648:	3b80fb52 3b8139c6 3b817859 3b81b70a     R..;.9.;Yx.;...;
2401b658:	3b81f5da 3b8234c8 3b8273d4 3b82b2ff     ...;.4.;.s.;...;
2401b668:	3b82f249 3b8331b1 3b837138 3b83b0de     I..;.1.;8q.;...;
2401b678:	3b83f0a2 3b843086 3b847088 3b84b0a9     ...;.0.;.p.;...;
2401b688:	3b84f0ea 3b853149 3b8571c8 3b85b266     ...;I1.;.q.;f..;
2401b698:	3b85f323 3b8633ff 3b8674fb 3b86b617     #..;.3.;.t.;...;
2401b6a8:	3b86f752 3b8738ac 3b877a26 3b87bbc0     R..;.8.;&z.;...;
2401b6b8:	3b87fd7a 3b883f53 3b88814c 3b88c366     z..;S?.;L..;f..;
2401b6c8:	3b89059f 3b8947f8 3b898a72 3b89cd0c     ...;.G.;r..;...;
2401b6d8:	3b8a0fc5 3b8a52a0 3b8a959a 3b8ad8b5     ...;.R.;...;...;
2401b6e8:	3b8b1bf1 3b8b5f4d 3b8ba2ca 3b8be667     ...;M_.;...;g..;
2401b6f8:	3b8c2a25 3b8c6e04 3b8cb204 3b8cf625     %*.;.n.;...;%..;
2401b708:	3b8d3a66 3b8d7ec9 3b8dc34d 3b8e07f2     f:.;.~.;M..;...;
2401b718:	3b8e4cb8 3b8e91a0 3b8ed6a9 3b8f1bd3     .L.;...;...;...;
2401b728:	3b8f611f 3b8fa68d 3b8fec1c 3b9031cd     .a.;...;...;.1.;
2401b738:	3b90779f 3b90bd93 3b9103aa 3b9149e2     .w.;...;...;.I.;
2401b748:	3b91903c 3b91d6b8 3b921d56 3b926417     <..;...;V..;.d.;
2401b758:	3b92aafa 3b92f1ff 3b933926 3b938070     ...;...;&9.;p..;
2401b768:	3b93c7dd 3b940f6c 3b94571d 3b949ef2     ...;l..;.W.;...;
2401b778:	3b94e6e9 3b952f03 3b957740 3b95bfa0     ...;./.;@w.;...;
2401b788:	3b960823 3b9650c9 3b969992 3b96e27f     #..;.P.;...;...;
2401b798:	3b972b8f 3b9774c2 3b97be19 3b980793     .+.;.t.;...;...;
2401b7a8:	3b985131 3b989af2 3b98e4d7 3b992ee0     1Q.;...;...;...;
2401b7b8:	3b99790d 3b99c35d 3b9a0dd2 3b9a586b     .y.;]..;...;kX.;
2401b7c8:	3b9aa328 3b9aee09 3b9b390e 3b9b8438     (..;...;.9.;8..;
2401b7d8:	3b9bcf86 3b9c1af8 3b9c668f 3b9cb24b     ...;...;.f.;K..;
2401b7e8:	3b9cfe2b 3b9d4a30 3b9d965a 3b9de2a9     +..;0J.;Z..;...;
2401b7f8:	3b9e2f1c 3b9e7bb5 3b9ec873 3b9f1556     ./.;.{.;s..;V..;
2401b808:	3b9f625e 3b9faf8b 3b9ffcde 3ba04a57     ^b.;...;...;WJ.;
2401b818:	3ba097f4 3ba0e5b8 3ba133a1 3ba181b0     ...;...;.3.;...;
2401b828:	3ba1cfe4 3ba21e3f 3ba26cbf 3ba2bb65     ...;?..;.l.;e..;
2401b838:	3ba30a32 3ba35925 3ba3a83d 3ba3f77d     2..;%Y.;=..;}..;
2401b848:	3ba446e2 3ba4966e 3ba4e621 3ba535fa     .F.;n..;!..;.5.;
2401b858:	3ba585fa 3ba5d620 3ba6266e 3ba676e2     ...; ..;n&.;.v.;
2401b868:	3ba6c77d 3ba7183f 3ba76928 3ba7ba39     }..;?..;(i.;9..;
2401b878:	3ba80b71 3ba85cd0 3ba8ae56 3ba90004     q..;.\.;V..;...;
2401b888:	3ba951da 3ba9a3d7 3ba9f5fc 3baa4848     .Q.;...;...;HH.;
2401b898:	3baa9abd 3baaed59 3bab401e 3bab930a     ...;Y..;.@.;...;
2401b8a8:	3babe61f 3bac395c 3bac8cc1 3bace04e     ...;\9.;...;N..;
2401b8b8:	3bad3404 3bad87e3 3baddbea 3bae301a     .4.;...;...;.0.;
2401b8c8:	3bae8473 3baed8f4 3baf2d9f 3baf8272     s..;...;.-.;r..;
2401b8d8:	3bafd76e 3bb02c94 3bb081e3 3bb0d75b     n..;.,.;...;[..;
2401b8e8:	3bb12cfd 3bb182c8 3bb1d8bc 3bb22eda     .,.;...;...;...;
2401b8f8:	3bb28522 3bb2db94 3bb3322f 3bb388f5     "..;...;/2.;...;
2401b908:	3bb3dfe4 3bb436fe 3bb48e42 3bb4e5b0     ...;.6.;B..;...;
2401b918:	3bb53d48 3bb5950b 3bb5ecf8 3bb64510     H=.;...;...;.E.;
2401b928:	3bb69d53 3bb6f5c0 3bb74e58 3bb7a71b     S..;...;XN.;...;
2401b938:	3bb80009 3bb85922 3bb8b266 3bb90bd5     ...;"Y.;f..;...;
2401b948:	3bb96570 3bb9bf36 3bba1928 3bba7345     pe.;6..;(..;Es.;
2401b958:	3bbacd8e 3bbb2802 3bbb82a3 3bbbdd6f     ...;.(.;...;o..;
2401b968:	3bbc3867 3bbc938b 3bbceedb 3bbd4a58     g8.;...;...;XJ.;
2401b978:	3bbda601 3bbe01d6 3bbe5dd8 3bbeba06     ...;...;.].;...;
2401b988:	3bbf1661 3bbf72e8 3bbfcf9d 3bc02c7e     a..;.r.;...;~,.;
2401b998:	3bc0898c 3bc0e6c8 3bc14430 3bc1a1c6     ...;...;0D.;...;
2401b9a8:	3bc1ff89 3bc25d7a 3bc2bb97 3bc319e3     ...;z].;...;...;
2401b9b8:	3bc3785c 3bc3d703 3bc435d8 3bc494db     \x.;...;.5.;...;
2401b9c8:	3bc4f40b 3bc5536a 3bc5b2f7 3bc612b2     ...;jS.;...;...;
2401b9d8:	3bc6729c 3bc6d2b4 3bc732fb 3bc79370     .r.;...;.2.;p..;
2401b9e8:	3bc7f414 3bc854e6 3bc8b5e8 3bc91719     ...;.T.;...;...;
2401b9f8:	3bc97878 3bc9da07 3bca3bc5 3bca9db3     xx.;...;.;.;...;
2401ba08:	3bcaffcf 3bcb621c 3bcbc498 3bcc2743     ...;.b.;...;C'.;
2401ba18:	3bcc8a1f 3bcced2a 3bcd5065 3bcdb3d0     ...;*..;eP.;...;
2401ba28:	3bce176c 3bce7b37 3bcedf33 3bcf4360     l..;7{.;3..;`C.;
2401ba38:	3bcfa7bd 3bd00c4a 3bd07108 3bd0d5f7     ...;J..;.q.;...;
2401ba48:	3bd13b17 3bd1a068 3bd205ea 3bd26b9d     .;.;h..;...;.k.;
2401ba58:	3bd2d181 3bd33797 3bd39dde 3bd40457     ...;.7.;...;W..;
2401ba68:	3bd46b01 3bd4d1dd 3bd538ea 3bd5a02a     .k.;...;.8.;*..;
2401ba78:	3bd6079c 3bd66f3f 3bd6d715 3bd73f1e     ...;?o.;...;.?.;
2401ba88:	3bd7a758 3bd80fc5 3bd87865 3bd8e137     X..;...;ex.;7..;
2401ba98:	3bd94a3c 3bd9b374 3bda1cdf 3bda867d     <J.;t..;...;}..;
2401baa8:	3bdaf04e 3bdb5a52 3bdbc48a 3bdc2ef5     N..;RZ.;...;...;
2401bab8:	3bdc9994 3bdd0466 3bdd6f6c 3bdddaa6     ...;f..;lo.;...;
2401bac8:	3bde4614 3bdeb1b5 3bdf1d8b 3bdf8995     .F.;...;...;...;
2401bad8:	3bdff5d4 3be06247 3be0ceee 3be13bca     ...;Gb.;...;.;.;
2401bae8:	3be1a8db 3be21620 3be2839b 3be2f14a     ...; ..;...;J..;
2401baf8:	3be35f2f 3be3cd48 3be43b97 3be4aa1c     /_.;H..;.;.;...;
2401bb08:	3be518d6 3be587c6 3be5f6eb 3be66646     ...;...;...;Ff.;
2401bb18:	3be6d5d7 3be7459f 3be7b59c 3be825cf     ...;.E.;...;.%.;
2401bb28:	3be89639 3be906d9 3be977b0 3be9e8be     9..;...;.w.;...;
2401bb38:	3bea5a02 3beacb7d 3beb3d2f 3bebaf18     .Z.;}..;/=.;...;
2401bb48:	3bec2138 3bec9390 3bed061f 3bed78e5     8!.;...;...;.x.;
2401bb58:	3bedebe3 3bee5f19 3beed286 3bef462b     ...;._.;...;+F.;
2401bb68:	3befba09 3bf02e1e 3bf0a26c 3bf116f2     ...;...;l..;...;
2401bb78:	3bf18bb0 3bf200a7 3bf275d7 3bf2eb3f     ...;...;.u.;?..;
2401bb88:	3bf360e0 3bf3d6ba 3bf44cce 3bf4c31a     .`.;...;.L.;...;
2401bb98:	3bf539a0 3bf5b05f 3bf62757 3bf69e8a     .9.;_..;W'.;...;
2401bba8:	3bf715f6 3bf78d9b 3bf8057b 3bf87d95     ...;...;{..;.}.;
2401bbb8:	3bf8f5e9 3bf96e77 3bf9e740 3bfa6043     ...;wn.;@..;C`.;
2401bbc8:	3bfad980 3bfb52f9 3bfbccac 3bfc469a     ...;.R.;...;.F.;
2401bbd8:	3bfcc0c3 3bfd3b28 3bfdb5c7 3bfe30a2     ...;(;.;...;.0.;
2401bbe8:	3bfeabb9 3bff270b 3bffa299 3c000f31     ...;.'.;...;1..<
2401bbf8:	3c004d34 3c008b55 3c00c994 3c0107f1     4M.<U..<...<...<
2401bc08:	3c01466c 3c018506 3c01c3bd 3c020294     lF.<...<...<...<
2401bc18:	3c024188 3c02809b 3c02bfcd 3c02ff1d     .A.<...<...<...<
2401bc28:	3c033e8c 3c037e1a 3c03bdc6 3c03fd92     .>.<.~.<...<...<
2401bc38:	3c043d7c 3c047d85 3c04bdad 3c04fdf4     |=.<.}.<...<...<
2401bc48:	3c053e5b 3c057ee0 3c05bf85 3c060049     [>.<.~.<...<I..<
2401bc58:	3c06412c 3c06822f 3c06c352 3c070494     ,A.</..<R..<...<
2401bc68:	3c0745f5 3c078776 3c07c917 3c080ad8     .E.<v..<...<...<
2401bc78:	3c084cb8 3c088eb9 3c08d0d9 3c091319     .L.<...<...<...<
2401bc88:	3c09557a 3c0997fb 3c09da9b 3c0a1d5c     zU.<...<...<\..<
2401bc98:	3c0a603e 3c0aa340 3c0ae662 3c0b29a5     >`.<@..<b..<.).<
2401bca8:	3c0b6d08 3c0bb08c 3c0bf431 3c0c37f6     .m.<...<1..<.7.<
2401bcb8:	3c0c7bdc 3c0cbfe4 3c0d040c 3c0d4855     .{.<...<...<UH.<
2401bcc8:	3c0d8cbf 3c0dd14a 3c0e15f7 3c0e5ac4     ...<J..<...<.Z.<
2401bcd8:	3c0e9fb4 3c0ee4c4 3c0f29f6 3c0f6f49     ...<...<.).<Io.<
2401bce8:	3c0fb4be 3c0ffa55 3c10400d 3c1085e7     ...<U..<.@.<...<
2401bcf8:	3c10cbe3 3c111201 3c115841 3c119ea3     ...<...<AX.<...<
2401bd08:	3c11e527 3c122bcd 3c127295 3c12b97f     '..<.+.<.r.<...<
2401bd18:	3c13008c 3c1347bb 3c138f0d 3c13d682     ...<.G.<...<...<
2401bd28:	3c141e18 3c1465d2 3c14adae 3c14f5ad     ...<.e.<...<...<
2401bd38:	3c153dcf 3c158614 3c15ce7c 3c161707     .=.<...<|..<...<
2401bd48:	3c165fb5 3c16a887 3c16f17b 3c173a93     ._.<...<{..<.:.<
2401bd58:	3c1783ce 3c17cd2d 3c1816af 3c186055     ...<-..<...<U`.<
2401bd68:	3c18aa1f 3c18f40c 3c193e1d 3c198852     ...<...<.>.<R..<
2401bd78:	3c19d2ab 3c1a1d28 3c1a67c9 3c1ab28e     ...<(..<.g.<...<
2401bd88:	3c1afd77 3c1b4885 3c1b93b7 3c1bdf0d     w..<.H.<...<...<
2401bd98:	3c1c2a88 3c1c7628 3c1cc1ec 3c1d0dd5     .*.<(v.<...<...<
2401bda8:	3c1d59e2 3c1da614 3c1df26c 3c1e3ee8     .Y.<...<l..<.>.<
2401bdb8:	3c1e8b89 3c1ed850 3c1f253b 3c1f724c     ...<P..<;%.<Lr.<
2401bdc8:	3c1fbf82 3c200cde 3c205a5f 3c20a805     ...<.. <_Z <.. <
2401bdd8:	3c20f5d1 3c2143c3 3c2191db 3c21e018     .. <.C!<..!<..!<
2401bde8:	3c222e7b 3c227d05 3c22cbb4 3c231a89     {."<.}"<.."<..#<
2401bdf8:	3c236985 3c23b8a7 3c2407ef 3c24575d     .i#<..#<..$<]W$<
2401be08:	3c24a6f2 3c24f6ae 3c254690 3c259699     ..$<..$<.F%<..%<
2401be18:	3c25e6c9 3c26371f 3c26879c 3c26d841     ..%<.7&<..&<A.&<
2401be28:	3c27290c 3c2779ff 3c27cb18 3c281c59     .)'<.y'<..'<Y.(<
2401be38:	3c286dc2 3c28bf52 3c291109 3c2962e8     .m(<R.(<..)<.b)<
2401be48:	3c29b4ee 3c2a071d 3c2a5973 3c2aabf1     ..)<..*<sY*<..*<
2401be58:	3c2afe96 3c2b5164 3c2ba45a 3c2bf779     ..*<dQ+<Z.+<y.+<
2401be68:	3c2c4abf 3c2c9e2e 3c2cf1c5 3c2d4585     .J,<..,<..,<.E-<
2401be78:	3c2d996d 3c2ded7e 3c2e41b7 3c2e961a     m.-<~.-<.A.<...<
2401be88:	3c2eeaa5 3c2f3f59 3c2f9436 3c2fe93d     ...<Y?/<6./<=./<
2401be98:	3c303e6c 3c3093c5 3c30e947 3c313ef3     l>0<..0<G.0<.>1<
2401bea8:	3c3194c8 3c31eac6 3c3240ef 3c329740     ..1<..1<.@2<@.2<
2401beb8:	3c32edbc 3c334462 3c339b32 3c33f22b     ..2<bD3<2.3<+.3<
2401bec8:	3c34494f 3c34a09d 3c34f815 3c354fb8     OI4<..4<..4<.O5<
2401bed8:	3c35a785 3c35ff7d 3c36579f 3c36afec     ..5<}.5<.W6<..6<
2401bee8:	3c370863 3c376106 3c37b9d3 3c3812cc     c.7<.a7<..7<..8<
2401bef8:	3c386bef 3c38c53e 3c391eb8 3c39785d     .k8<>.8<..9<]x9<
2401bf08:	3c39d22e 3c3a2c2a 3c3a8652 3c3ae0a6     ..9<*,:<R.:<..:<
2401bf18:	3c3b3b25 3c3b95d0 3c3bf0a7 3c3c4baa     %;;<..;<..;<.K<<
2401bf28:	3c3ca6d9 3c3d0234 3c3d5dbc 3c3db970     ..<<4.=<.]=<p.=<
2401bf38:	3c3e1550 3c3e715c 3c3ecd96 3c3f29fc     P.><\q><..><.)?<
2401bf48:	3c3f868e 3c3fe34e 3c40403b 3c409d54     ..?<N.?<;@@<T.@<
2401bf58:	3c40fa9b 3c41580e 3c41b5af 3c42137e     ..@<.XA<..A<~.B<
2401bf68:	3c42717a 3c42cfa3 3c432dfa 3c438c7f     zqB<..B<.-C<..C<
2401bf78:	3c43eb31 3c444a11 3c44a91f 3c45085c     1.C<.JD<..D<\.E<
2401bf88:	3c4567c6 3c45c75f 3c462726 3c46871b     .gE<_.E<&'F<..F<
2401bf98:	3c46e73f 3c474791 3c47a812 3c4808c2     ?.F<.GG<..G<..H<
2401bfa8:	3c4869a1 3c48caae 3c492beb 3c498d56     .iH<..H<.+I<V.I<
2401bfb8:	3c49eef1 3c4a50bb 3c4ab2b4 3c4b14dd     ..I<.PJ<..J<..K<
2401bfc8:	3c4b7736 3c4bd9be 3c4c3c76 3c4c9f5d     6wK<..K<v<L<].L<
2401bfd8:	3c4d0275 3c4d65bc 3c4dc934 3c4e2cdc     u.M<.eM<4.M<.,N<
2401bfe8:	3c4e90b4 3c4ef4bc 3c4f58f5 3c4fbd5f     ..N<..N<.XO<_.O<
2401bff8:	3c5021f9 3c5086c3 3c50ebbf 3c5150ec     .!P<..P<..P<.PQ<
2401c008:	3c51b649 3c521bd8 3c528197 3c52e789     I.Q<..R<..R<..R<
2401c018:	3c534dab 3c53b3ff 3c541a85 3c54813c     .MS<..S<..T<<.T<
2401c028:	3c54e825 3c554f3f 3c55b68c 3c561e0b     %.T<?OU<..U<..V<
2401c038:	3c5685bc 3c56ed9f 3c5755b4 3c57bdfc     ..V<..V<.UW<..W<
2401c048:	3c582677 3c588f23 3c58f803 3c596116     w&X<#.X<..X<.aY<
2401c058:	3c59ca5b 3c5a33d3 3c5a9d7f 3c5b075d     [.Y<.3Z<..Z<].[<
2401c068:	3c5b716f 3c5bdbb5 3c5c462d 3c5cb0da     oq[<..[<-F\<..\<
2401c078:	3c5d1bba 3c5d86ce 3c5df215 3c5e5d91     ..]<..]<..]<.]^<
2401c088:	3c5ec941 3c5f3524 3c5fa13c 3c600d89     A.^<$5_<<._<..`<
2401c098:	3c607a0a 3c60e6bf 3c6153a9 3c61c0c8     .z`<..`<.Sa<..a<
2401c0a8:	3c622e1c 3c629ba5 3c630963 3c637756     ..b<..b<c.c<Vwc<
2401c0b8:	3c63e57e 3c6453db 3c64c26e 3c653137     ~.c<.Sd<n.d<71e<
2401c0c8:	3c65a035 3c660f69 3c667ed3 3c66ee73     5.e<i.f<.~f<s.f<
2401c0d8:	3c675e49 3c67ce55 3c683e97 3c68af10     I^g<U.g<.>h<..h<
2401c0e8:	3c691fbf 3c6990a5 3c6a01c2 3c6a7315     ..i<..i<..j<.sj<
2401c0f8:	3c6ae49f 3c6b5660 3c6bc859 3c6c3a88     ..j<`Vk<Y.k<.:l<
2401c108:	3c6cacef 3c6d1f8d 3c6d9263 3c6e0570     ..l<..m<c.m<p.n<
2401c118:	3c6e78b5 3c6eec32 3c6f5fe7 3c6fd3d4     .xn<2.n<._o<..o<
2401c128:	3c7047f9 3c70bc57 3c7130ed 3c71a5bb     .Gp<W.p<.0q<..q<
2401c138:	3c721ac2 3c729001 3c730579 3c737b2b     ..r<..r<y.s<+{s<
2401c148:	3c73f115 3c746738 3c74dd95 3c75542b     ..s<8gt<..t<+Tu<
2401c158:	3c75cafa 3c764203 3c76b946 3c7730c2     ..u<.Bv<F.v<.0w<
2401c168:	3c77a878 3c782068 3c789893 3c7910f7     x.w<h x<..x<..y<
2401c178:	3c798996 3c7a026f 3c7a7b83 3c7af4d2     ..y<o.z<.{z<..z<
2401c188:	3c7b6e5b 3c7be81f 3c7c621e 3c7cdc59     [n{<..{<.b|<Y.|<
2401c198:	3c7d56ce 3c7dd17f 3c7e4c6b 3c7ec793     .V}<..}<kL~<..~<
2401c1a8:	3c7f42f6 3c7fbe95 3c801d38 3c805b44     .B.<...<8..<D[.<
2401c1b8:	3c80996d 3c80d7b5 3c81161b 3c81549f     m..<...<...<.T.<
2401c1c8:	3c819342 3c81d202 3c8210e1 3c824fdf     B..<...<...<.O.<
2401c1d8:	3c828efb 3c82ce36 3c830d8f 3c834d07     ...<6..<...<.M.<
2401c1e8:	3c838c9e 3c83cc54 3c840c28 3c844c1b     ...<T..<(..<.L.<
2401c1f8:	3c848c2e 3c84cc5f 3c850cb0 3c854d1f     ...<_..<...<.M.<
2401c208:	3c858dae 3c85ce5c 3c860f2a 3c865017     ...<\..<*..<.P.<
2401c218:	3c869123 3c86d24f 3c87139a 3c875505     #..<O..<...<.U.<
2401c228:	3c879690 3c87d83b 3c881a05 3c885bef     ...<;..<...<.[.<
2401c238:	3c889df9 3c88e023 3c89226d 3c8964d8     ...<#..<m".<.d.<
2401c248:	3c89a762 3c89ea0d 3c8a2cd8 3c8a6fc3     b..<...<.,.<.o.<
2401c258:	3c8ab2cf 3c8af5fb 3c8b3948 3c8b7cb6     ...<...<H9.<.|.<
2401c268:	3c8bc044 3c8c03f3 3c8c47c2 3c8c8bb3     D..<...<.G.<...<
2401c278:	3c8ccfc4 3c8d13f6 3c8d584a 3c8d9cbe     ...<...<JX.<...<
2401c288:	3c8de154 3c8e260b 3c8e6ae3 3c8eafdd     T..<.&.<.j.<...<
2401c298:	3c8ef4f8 3c8f3a34 3c8f7f92 3c8fc512     ...<4:.<...<...<
2401c2a8:	3c900ab3 3c905076 3c90965b 3c90dc61     ...<vP.<[..<a..<
2401c2b8:	3c91228a 3c9168d5 3c91af41 3c91f5d0     .".<.h.<A..<...<
2401c2c8:	3c923c81 3c928354 3c92ca4a 3c931162     .<.<T..<J..<b..<
2401c2d8:	3c93589c 3c939ff9 3c93e779 3c942f1b     .X.<...<y..<./.<
2401c2e8:	3c9476df 3c94bec7 3c9506d2 3c954eff     .v.<...<...<.N.<
2401c2f8:	3c95974f 3c95dfc2 3c962859 3c967113     O..<...<Y(.<.q.<
2401c308:	3c96b9ef 3c9702f0 3c974c13 3c97955a     ...<...<.L.<Z..<
2401c318:	3c97dec5 3c982853 3c987204 3c98bbda     ...<S(.<.r.<...<
2401c328:	3c9905d3 3c994ff0 3c999a31 3c99e496     ...<.O.<1..<...<
2401c338:	3c9a2f1f 3c9a79cc 3c9ac49d 3c9b0f93     ./.<.y.<...<...<
2401c348:	3c9b5aad 3c9ba5eb 3c9bf14e 3c9c3cd5     .Z.<...<N..<.<.<
2401c358:	3c9c8881 3c9cd451 3c9d2046 3c9d6c60     ...<Q..<F .<`l.<
2401c368:	3c9db89f 3c9e0503 3c9e518c 3c9e9e3a     ...<...<.Q.<:..<
2401c378:	3c9eeb0d 3c9f3805 3c9f8523 3c9fd266     ...<.8.<#..<f..<
2401c388:	3ca01fcf 3ca06d5d 3ca0bb10 3ca108e9     ...<]m.<...<...<
2401c398:	3ca156e8 3ca1a50d 3ca1f358 3ca241c8     .V.<...<X..<.A.<
2401c3a8:	3ca2905f 3ca2df1b 3ca32dfe 3ca37d07     _..<...<.-.<.}.<
2401c3b8:	3ca3cc36 3ca41b8c 3ca46b08 3ca4baab     6..<...<.k.<...<
2401c3c8:	3ca50a74 3ca55a64 3ca5aa7b 3ca5fab8     t..<dZ.<{..<...<
2401c3d8:	3ca64b1c 3ca69ba8 3ca6ec5a 3ca73d34     .K.<...<Z..<4=.<
2401c3e8:	3ca78e34 3ca7df5c 3ca830ab 3ca88222     4..<\..<.0.<"..<
2401c3f8:	3ca8d3c0 3ca92586 3ca97773 3ca9c988     ...<.%.<sw.<...<
2401c408:	3caa1bc5 3caa6e29 3caac0b6 3cab136a     ...<)n.<...<j..<
2401c418:	3cab6647 3cabb94c 3cac0c79 3cac5fce     Gf.<L..<y..<._.<
2401c428:	3cacb34c 3cad06f2 3cad5ac1 3cadaeb8     L..<...<.Z.<...<
2401c438:	3cae02d8 3cae5721 3caeab93 3caf002d     ...<!W.<...<-..<
2401c448:	3caf54f1 3cafa9de 3caffef3 3cb05433     .T.<...<...<3T.<
2401c458:	3cb0a99b 3cb0ff2d 3cb154e8 3cb1aacd     ...<-..<.T.<...<
2401c468:	3cb200db 3cb25713 3cb2ad75 3cb30401     ...<.W.<u..<...<
2401c478:	3cb35ab7 3cb3b197 3cb408a1 3cb45fd5     .Z.<...<...<._.<
2401c488:	3cb4b733 3cb50ebc 3cb5666f 3cb5be4c     3..<...<of.<L..<
2401c498:	3cb61655 3cb66e87 3cb6c6e5 3cb71f6e     U..<.n.<...<n..<
2401c4a8:	3cb77821 3cb7d0ff 3cb82a09 3cb8833d     !x.<...<.*.<=..<
2401c4b8:	3cb8dc9d 3cb93628 3cb98fdf 3cb9e9c1     ...<(6.<...<...<
2401c4c8:	3cba43ce 3cba9e08 3cbaf86d 3cbb52fe     .C.<...<m..<.R.<
2401c4d8:	3cbbadba 3cbc08a3 3cbc63b8 3cbcbef9     ...<...<.c.<...<
2401c4e8:	3cbd1a66 3cbd75ff 3cbdd1c5 3cbe2db7     f..<.u.<...<.-.<
2401c4f8:	3cbe89d6 3cbee622 3cbf429a 3cbf9f3f     ...<"..<.B.<?..<
2401c508:	3cbffc11 3cc05910 3cc0b63c 3cc11396     ...<.Y.<<..<...<
2401c518:	3cc1711c 3cc1ced0 3cc22cb1 3cc28ac0     .q.<...<.,.<...<
2401c528:	3cc2e8fd 3cc34767 3cc3a5ff 3cc404c4     ...<gG.<...<...<
2401c538:	3cc463b8 3cc4c2da 3cc52229 3cc581a7     .c.<...<)".<...<
2401c548:	3cc5e154 3cc6412e 3cc6a137 3cc7016f     T..<.A.<7..<o..<
2401c558:	3cc761d6 3cc7c26b 3cc8232f 3cc88421     .a.<k..</#.<!..<
2401c568:	3cc8e543 3cc94694 3cc9a814 3cca09c3     C..<.F.<...<...<
2401c578:	3cca6ba2 3ccacdb0 3ccb2fee 3ccb925b     .k.<...<./.<[..<
2401c588:	3ccbf4f8 3ccc57c5 3cccbac2 3ccd1def     ...<.W.<...<...<
2401c598:	3ccd814c 3ccde4d9 3cce4896 3cceac83     L..<...<.H.<...<
2401c5a8:	3ccf10a1 3ccf74f0 3ccfd96f 3cd03e1f     ...<.t.<o..<.>.<
2401c5b8:	3cd0a300 3cd10812 3cd16d54 3cd1d2c8     ...<...<Tm.<...<
2401c5c8:	3cd2386d 3cd29e43 3cd3044b 3cd36a84     m8.<C..<K..<.j.<
2401c5d8:	3cd3d0ef 3cd4378b 3cd49e59 3cd50559     ...<.7.<Y..<Y..<
2401c5e8:	3cd56c8b 3cd5d3ef 3cd63b85 3cd6a34d     .l.<...<.;.<M..<
2401c5f8:	3cd70b48 3cd77375 3cd7dbd4 3cd84467     H..<us.<...<gD.<
2401c608:	3cd8ad2b 3cd91623 3cd97f4e 3cd9e8ab     +..<#..<N..<...<
2401c618:	3cda523c 3cdabc00 3cdb25f7 3cdb9021     <R.<...<.%.<!..<
2401c628:	3cdbfa7f 3cdc6511 3cdccfd6 3cdd3acf     ...<.e.<...<.:.<
2401c638:	3cdda5fc 3cde115d 3cde7cf2 3cdee8bb     ...<]..<.|.<...<
2401c648:	3cdf54b8 3cdfc0ea 3ce02d50 3ce099eb     .T.<...<P-.<...<
2401c658:	3ce106ba 3ce173be 3ce1e0f7 3ce24e65     ...<.s.<...<eN.<
2401c668:	3ce2bc08 3ce329e1 3ce397ee 3ce40631     ...<.).<...<1..<
2401c678:	3ce474a9 3ce4e357 3ce5523b 3ce5c154     .t.<W..<;R.<T..<
2401c688:	3ce630a4 3ce6a029 3ce70fe4 3ce77fd6     .0.<)..<...<...<
2401c698:	3ce7effe 3ce8605c 3ce8d0f1 3ce941bc     ...<\`.<...<.A.<
2401c6a8:	3ce9b2be 3cea23f7 3cea9567 3ceb070d     ...<.#.<g..<...<
2401c6b8:	3ceb78eb 3cebeb00 3cec5d4d 3ceccfd1     .x.<...<M].<...<
2401c6c8:	3ced428c 3cedb57f 3cee28aa 3cee9c0d     .B.<...<.(.<...<
2401c6d8:	3cef0fa8 3cef837a 3ceff785 3cf06bc8     ...<z..<...<.k.<
2401c6e8:	3cf0e044 3cf154f8 3cf1c9e5 3cf23f0a     D..<.T.<...<.?.<
2401c6f8:	3cf2b469 3cf32a00 3cf39fd0 3cf415d9     i..<.*.<...<...<
2401c708:	3cf48c1c 3cf50298 3cf5794d 3cf5f03c     ...<...<My.<<..<
2401c718:	3cf66765 3cf6dec8 3cf75664 3cf7ce3b     eg.<...<dV.<;..<
2401c728:	3cf8464b 3cf8be96 3cf9371b 3cf9afdb     KF.<...<.7.<...<
2401c738:	3cfa28d5 3cfaa20a 3cfb1b7a 3cfb9525     .(.<...<z..<%..<
2401c748:	3cfc0f0a 3cfc892b 3cfd0387 3cfd7e1f     ...<+..<...<.~.<
2401c758:	3cfdf8f2 3cfe7400 3cfeef4a 3cff6ad0     ...<.t.<J..<.j.<
2401c768:	3cffe692 3d003148 3d006f65 3d00ada0     ...<H1.=eo.=...=
2401c778:	3d00ebfa 3d012a71 3d016907 3d01a7bc     ...=q*.=.i.=...=
2401c788:	3d01e68e 3d022580 3d02648f 3d02a3be     ...=.%.=.d.=...=
2401c798:	3d02e30b 3d032276 3d036201 3d03a1aa     ...=v".=.b.=...=
2401c7a8:	3d03e173 3d04215a 3d046160 3d04a185     s..=Z!.=`a.=...=
2401c7b8:	3d04e1ca 3d05222d 3d0562b0 3d05a352     ...=-".=.b.=R..=
2401c7c8:	3d05e413 3d0624f4 3d0665f5 3d06a715     ...=.$.=.e.=...=
2401c7d8:	3d06e854 3d0729b3 3d076b32 3d07acd1     T..=.).=2k.=...=
2401c7e8:	3d07ee8f 3d08306e 3d08726c 3d08b48b     ...=n0.=lr.=...=
2401c7f8:	3d08f6c9 3d093928 3d097ba7 3d09be46     ...=(9.=.{.=F..=
2401c808:	3d0a0105 3d0a43e5 3d0a86e6 3d0aca06     ...=.C.=...=...=
2401c818:	3d0b0d48 3d0b50aa 3d0b942d 3d0bd7d0     H..=.P.=-..=...=
2401c828:	3d0c1b95 3d0c5f7a 3d0ca380 3d0ce7a7     ...=z_.=...=...=
2401c838:	3d0d2bf0 3d0d7059 3d0db4e4 3d0df990     .+.=Yp.=...=...=
2401c848:	3d0e3e5d 3d0e834b 3d0ec85c 3d0f0d8d     ]>.=K..=\..=...=
2401c858:	3d0f52e0 3d0f9855 3d0fddec 3d1023a4     .R.=U..=...=.#.=
2401c868:	3d10697e 3d10af7a 3d10f599 3d113bd9     ~i.=z..=...=.;.=
2401c878:	3d11823b 3d11c8bf 3d120f66 3d12562f     ;..=...=f..=/V.=
2401c888:	3d129d1a 3d12e428 3d132b58 3d1372ab     ...=(..=X+.=.r.=
2401c898:	3d13ba20 3d1401b8 3d144973 3d149151      ..=...=sI.=Q..=
2401c8a8:	3d14d951 3d152175 3d1569bb 3d15b225     Q..=u!.=.i.=%..=
2401c8b8:	3d15fab2 3d164362 3d168c35 3d16d52c     ...=bC.=5..=,..=
2401c8c8:	3d171e46 3d176783 3d17b0e4 3d17fa69     F..=.g.=...=i..=
2401c8d8:	3d184412 3d188dde 3d18d7ce 3d1921e2     .D.=...=...=.!.=
2401c8e8:	3d196c1a 3d19b676 3d1a00f6 3d1a4b9a     .l.=v..=...=.K.=
2401c8f8:	3d1a9662 3d1ae14f 3d1b2c60 3d1b7796     b..=O..=`,.=.w.=
2401c908:	3d1bc2f0 3d1c0e6f 3d1c5a12 3d1ca5db     ...=o..=.Z.=...=
2401c918:	3d1cf1c8 3d1d3dd9 3d1d8a10 3d1dd66c     ...=.=.=...=l..=
2401c928:	3d1e22ed 3d1e6f93 3d1ebc5e 3d1f094f     .".=.o.=^..=O..=
2401c938:	3d1f5665 3d1fa3a0 3d1ff101 3d203e87     eV.=...=...=.> =
2401c948:	3d208c33 3d20da05 3d2127fd 3d21761a     3. =.. =.'!=.v!=
2401c958:	3d21c45e 3d2212c7 3d226157 3d22b00c     ^.!=.."=Wa"=.."=
2401c968:	3d22fee8 3d234dea 3d239d13 3d23ec62     .."=.M#=..#=b.#=
2401c978:	3d243bd8 3d248b74 3d24db37 3d252b20     .;$=t.$=7.$= +%=
2401c988:	3d257b31 3d25cb68 3d261bc6 3d266c4c     1{%=h.%=..&=Ll&=
2401c998:	3d26bcf8 3d270dcc 3d275ec7 3d27afe9     ..&=..'=.^'=..'=
2401c9a8:	3d280133 3d2852a4 3d28a43d 3d28f5fd     3.(=.R(==.(=..(=
2401c9b8:	3d2947e5 3d2999f5 3d29ec2d 3d2a3e8d     .G)=..)=-.)=.>*=
2401c9c8:	3d2a9114 3d2ae3c4 3d2b369c 3d2b899c     ..*=..*=.6+=..+=
2401c9d8:	3d2bdcc5 3d2c3016 3d2c8390 3d2cd732     ..+=.0,=..,=2.,=
2401c9e8:	3d2d2afc 3d2d7ef0 3d2dd30c 3d2e2751     .*-=.~-=..-=Q'.=
2401c9f8:	3d2e7bbf 3d2ed056 3d2f2517 3d2f7a00     .{.=V..=.%/=.z/=
2401ca08:	3d2fcf13 3d30244f 3d3079b4 3d30cf43     ../=O$0=.y0=C.0=
2401ca18:	3d3124fb 3d317ade 3d31d0e9 3d32271f     .$1=.z1=..1=.'2=
2401ca28:	3d327d7f 3d32d408 3d332abc 3d33819a     .}2=..2=.*3=..3=
2401ca38:	3d33d8a2 3d342fd4 3d348731 3d34deb8     ..3=./4=1.4=..4=
2401ca48:	3d35366a 3d358e46 3d35e64d 3d363e7f     j65=F.5=M.5=.>6=
2401ca58:	3d3696dc 3d36ef64 3d374817 3d37a0f4     ..6=d.6=.H7=..7=
2401ca68:	3d37f9fe 3d385332 3d38ac92 3d39061d     ..7=2S8=..8=..9=
2401ca78:	3d395fd4 3d39b9b6 3d3a13c4 3d3a6dfe     ._9=..9=..:=.m:=
2401ca88:	3d3ac863 3d3b22f5 3d3b7db3 3d3bd89d     c.:=.";=.};=..;=
2401ca98:	3d3c33b3 3d3c8ef5 3d3cea64 3d3d45ff     .3<=..<=d.<=.E==
2401caa8:	3d3da1c6 3d3dfdbb 3d3e59dc 3d3eb62a     ..==..==.Y>=*.>=
2401cab8:	3d3f12a4 3d3f6f4c 3d3fcc21 3d402923     ..?=Lo?=!.?=#)@=
2401cac8:	3d408652 3d40e3ae 3d414138 3d419ef0     R.@=..@=8AA=..A=
2401cad8:	3d41fcd5 3d425ae7 3d42b928 3d431796     ..A=.ZB=(.B=..C=
2401cae8:	3d437632 3d43d4fc 3d4433f5 3d44931b     2vC=..C=.3D=..D=
2401caf8:	3d44f270 3d4551f3 3d45b1a5 3d461185     p.D=.QE=..E=..F=
2401cb08:	3d467194 3d46d1d1 3d47323d 3d4792d9     .qF=..F==2G=..G=
2401cb18:	3d47f3a3 3d48549c 3d48b5c5 3d49171d     ..G=.TH=..H=..I=
2401cb28:	3d4978a4 3d49da5b 3d4a3c41 3d4a9e56     .xI=[.I=A<J=V.J=
2401cb38:	3d4b009c 3d4b6311 3d4bc5b7 3d4c288c     ..K=.cK=..K=.(L=
2401cb48:	3d4c8b91 3d4ceec7 3d4d522d 3d4db5c3     ..L=..L=-RM=..M=
2401cb58:	3d4e1989 3d4e7d81 3d4ee1a9 3d4f4601     ..N=.}N=..N=.FO=
2401cb68:	3d4faa8b 3d500f45 3d507430 3d50d94d     ..O=E.P=0tP=M.P=
2401cb78:	3d513e9b 3d51a41a 3d5209ca 3d526fac     .>Q=..Q=..R=.oR=
2401cb88:	3d52d5c0 3d533c05 3d53a27c 3d540925     ..R=.<S=|.S=%.T=
2401cb98:	3d547000 3d54d70d 3d553e4c 3d55a5bd     .pT=..T=L>U=..U=
2401cba8:	3d560d61 3d567537 3d56dd40 3d57457b     a.V=7uV=@.V={EW=
2401cbb8:	3d57adea 3d58168b 3d587f5f 3d58e866     ..W=..X=_.X=f.X=
2401cbc8:	3d5951a0 3d59bb0d 3d5a24ae 3d5a8e82     .QY=..Y=.$Z=..Z=
2401cbd8:	3d5af88a 3d5b62c5 3d5bcd34 3d5c37d7     ..Z=.b[=4.[=.7\=
2401cbe8:	3d5ca2ae 3d5d0db9 3d5d78f8 3d5de46b     ..\=..]=.x]=k.]=
2401cbf8:	3d5e5012 3d5ebbee 3d5f27ff 3d5f9444     .P^=..^=.'_=D._=
2401cc08:	3d6000be 3d606d6d 3d60da50 3d614769     ..`=mm`=P.`=iGa=
2401cc18:	3d61b4b7 3d62223a 3d628ff3 3d62fde1     ..a=:"b=..b=..b=
2401cc28:	3d636c04 3d63da5d 3d6448ec 3d64b7b1     .lc=].c=.Hd=..d=
2401cc38:	3d6526ac 3d6595dc 3d660543 3d6674e1     .&e=..e=C.f=.tf=
2401cc48:	3d66e4b4 3d6754bf 3d67c4ff 3d683577     ..f=.Tg=..g=w5h=
2401cc58:	3d68a625 3d69170a 3d698827 3d69f97a     %.h=..i='.i=z.i=
2401cc68:	3d6a6b04 3d6adcc6 3d6b4ec0 3d6bc0f1     .kj=..j=.Nk=..k=
2401cc78:	3d6c3359 3d6ca5f9 3d6d18d2 3d6d8be2     Y3l=..l=..m=..m=
2401cc88:	3d6dff2a 3d6e72ab 3d6ee663 3d6f5a55     *.m=.rn=c.n=UZo=
2401cc98:	3d6fce7e 3d7042e1 3d70b77c 3d712c50     ~.o=.Bp=|.p=P,q=
2401cca8:	3d71a15d 3d7216a3 3d728c22 3d7301da     ].q=..r=".r=..s=
2401ccb8:	3d7377cc 3d73edf7 3d74645c 3d74dafb     .ws=..s=\dt=..t=
2401ccc8:	3d7551d4 3d75c8e6 3d764033 3d76b7ba     .Qu=..u=3@v=..v=
2401ccd8:	3d772f7b 3d77a776 3d781fac 3d78981d     {/w=v.w=..x=..x=
2401cce8:	3d7910c8 3d7989af 3d7a02d0 3d7a7c2c     ..y=..y=..z=,|z=
2401ccf8:	3d7af5c4 3d7b6f97 3d7be9a5 3d7c63ef     ..z=.o{=..{=.c|=
2401cd08:	3d7cde74 3d7d5936 3d7dd433 3d7e4f6c     t.|=6Y}=3.}=lO~=
2401cd18:	3d7ecae1 3d7f4693 3d7fc281 3d801f56     ..~=.F.=...=V..=
2401cd28:	3d805d89 3d809bdb 3d80da4b 3d8118da     .].=...=K..=...=
2401cd38:	3d815787 3d819653 3d81d53e 3d821447     .W.=S..=>..=G..=
2401cd48:	3d82536f 3d8292b6 3d82d21b 3d8311a0     oS.=...=...=...=
2401cd58:	3d835144 3d839106 3d83d0e8 3d8410e9     DQ.=...=...=...=
2401cd68:	3d84510a 3d849149 3d84d1a8 3d851227     .Q.=I..=...='..=
2401cd78:	3d8552c5 3d859382 3d85d45f 3d86155c     .R.=...=_..=\..=
2401cd88:	3d865678 3d8697b5 3d86d911 3d871a8d     xV.=...=...=...=
2401cd98:	3d875c29 3d879de5 3d87dfc1 3d8821be     )\.=...=...=.!.=
2401cda8:	3d8863da 3d88a617 3d88e874 3d892af2     .c.=...=t..=.*.=
2401cdb8:	3d896d90 3d89b04f 3d89f32e 3d8a362e     .m.=O..=...=.6.=
2401cdc8:	3d8a794f 3d8abc91 3d8afff3 3d8b4376     Oy.=...=...=vC.=
2401cdd8:	3d8b871b 3d8bcae0 3d8c0ec7 3d8c52ce     ...=...=...=.R.=
2401cde8:	3d8c96f7 3d8cdb42 3d8d1fad 3d8d643a     ...=B..=...=:d.=
2401cdf8:	3d8da8e9 3d8dedb9 3d8e32ab 3d8e77bf     ...=...=.2.=.w.=
2401ce08:	3d8ebcf4 3d8f024b 3d8f47c4 3d8f8d5f     ...=K..=.G.=_..=
2401ce18:	3d8fd31c 3d9018fb 3d905efc 3d90a520     ...=...=.^.= ..=
2401ce28:	3d90eb66 3d9131ce 3d917859 3d91bf06     f..=.1.=Yx.=...=
2401ce38:	3d9205d6 3d924cc8 3d9293dd 3d92db15     ...=.L.=...=...=
2401ce48:	3d93226f 3d9369ed 3d93b18e 3d93f951     o".=.i.=...=Q..=
2401ce58:	3d944138 3d948942 3d94d16f 3d9519bf     8A.=B..=o..=...=
2401ce68:	3d956233 3d95aacb 3d95f385 3d963c64     3b.=...=...=d<.=
2401ce78:	3d968566 3d96ce8c 3d9717d5 3d976143     f..=...=...=Ca.=
2401ce88:	3d97aad4 3d97f48a 3d983e63 3d988861     ...=...=c>.=a..=
2401ce98:	3d98d283 3d991cc9 3d996734 3d99b1c3     ...=...=4g.=...=
2401cea8:	3d99fc76 3d9a474e 3d9a924b 3d9add6c     v..=NG.=K..=l..=
2401ceb8:	3d9b28b3 3d9b741e 3d9bbfae 3d9c0b63     .(.=.t.=...=c..=
2401cec8:	3d9c573d 3d9ca33c 3d9cef61 3d9d3bab     =W.=<..=a..=.;.=
2401ced8:	3d9d881a 3d9dd4af 3d9e2169 3d9e6e49     ...=...=i!.=In.=
2401cee8:	3d9ebb4e 3d9f0879 3d9f55ca 3d9fa341     N..=y..=.U.=A..=
2401cef8:	3d9ff0de 3da03ea1 3da08c8a 3da0da99     ...=.>.=...=...=
2401cf08:	3da128cf 3da1772b 3da1c5ad 3da21456     .(.=+w.=...=V..=
2401cf18:	3da26325 3da2b21b 3da30137 3da3507b     %c.=...=7..={P.=
2401cf28:	3da39fe5 3da3ef76 3da43f2f 3da48f0e     ...=v..=/?.=...=
2401cf38:	3da4df15 3da52f42 3da57f98 3da5d014     ...=B/.=...=...=
2401cf48:	3da620b8 3da67184 3da6c277 3da71392     . .=.q.=w..=...=
2401cf58:	3da764d5 3da7b63f 3da807d2 3da8598c     .d.=?..=...=.Y.=
2401cf68:	3da8ab6f 3da8fd7a 3da94fad 3da9a208     o..=z..=.O.=...=
2401cf78:	3da9f48c 3daa4739 3daa9a0e 3daaed0b     ...=9G.=...=...=
2401cf88:	3dab4032 3dab9381 3dabe6f9 3dac3a9a     2@.=...=...=.:.=
2401cf98:	3dac8e65 3dace258 3dad3674 3dad8aba     e..=X..=t6.=...=
2401cfa8:	3daddf2a 3dae33c2 3dae8885 3daedd71     *..=.3.=...=q..=
2401cfb8:	3daf3286 3daf87c6 3dafdd2f 3db032c2     .2.=...=/..=.2.=
2401cfc8:	3db08880 3db0de67 3db13479 3db18ab5     ...=g..=y4.=...=
2401cfd8:	3db1e11b 3db237ac 3db28e68 3db2e54e     ...=.7.=h..=N..=
2401cfe8:	3db33c5e 3db3939a 3db3eb00 3db44292     ^<.=...=...=.B.=
2401cff8:	3db49a4e 3db4f236 3db54a49 3db5a287     N..=6..=IJ.=...=
2401d008:	3db5faf0 3db65386 3db6ac46 3db70532     ...=.S.=F..=2..=
2401d018:	3db75e4a 3db7b78e 3db810fe 3db86a9a     J^.=...=...=.j.=
2401d028:	3db8c462 3db91e56 3db97876 3db9d2c3     b..=V..=vx.=...=
2401d038:	3dba2d3c 3dba87e2 3dbae2b4 3dbb3db3     <-.=...=...=.=.=
2401d048:	3dbb98df 3dbbf437 3dbc4fbd 3dbcab70     ...=7..=.O.=p..=
2401d058:	3dbd074f 3dbd635c 3dbdbf97 3dbe1bff     O..=\c.=...=...=
2401d068:	3dbe7894 3dbed557 3dbf3248 3dbf8f66     .x.=W..=H2.=f..=
2401d078:	3dbfecb3 3dc04a2d 3dc0a7d5 3dc105ac     ...=-J.=...=...=
2401d088:	3dc163b0 3dc1c1e4 3dc22045 3dc27ed5     .c.=...=E .=.~.=
2401d098:	3dc2dd94 3dc33c81 3dc39b9d 3dc3fae8     ...=.<.=...=...=
2401d0a8:	3dc45a62 3dc4ba0b 3dc519e4 3dc579eb     bZ.=...=...=.y.=
2401d0b8:	3dc5da22 3dc63a89 3dc69b1e 3dc6fbe4     "..=.:.=...=...=
2401d0c8:	3dc75cd9 3dc7bdfe 3dc81f54 3dc880d9     .\.=...=T..=...=
2401d0d8:	3dc8e28e 3dc94473 3dc9a689 3dca08cf     ...=sD.=...=...=
2401d0e8:	3dca6b46 3dcacded 3dcb30c5 3dcb93ce     Fk.=...=.0.=...=
2401d0f8:	3dcbf708 3dcc5a73 3dccbe0e 3dcd21db     ...=sZ.=...=.!.=
2401d108:	3dcd85da 3dcdea09 3dce4e6a 3dceb2fd     ...=...=jN.=...=
2401d118:	3dcf17c2 3dcf7cb8 3dcfe1e0 3dd0473a     ...=.|.=...=:G.=
2401d128:	3dd0acc6 3dd11285 3dd17875 3dd1de98     ...=...=ux.=...=
2401d138:	3dd244ee 3dd2ab76 3dd31231 3dd3791f     .D.=v..=1..=.y.=
2401d148:	3dd3e03f 3dd44793 3dd4af19 3dd516d3     ?..=.G.=...=...=
2401d158:	3dd57ec0 3dd5e6e1 3dd64f35 3dd6b7bd     .~.=...=5O.=...=
2401d168:	3dd72078 3dd78968 3dd7f28b 3dd85be2     x .=h..=...=.[.=
2401d178:	3dd8c56d 3dd92f2d 3dd99921 3dda0349     m..=-/.=!..=I..=
2401d188:	3dda6da7 3ddad838 3ddb42ff 3ddbadfa     .m.=8..=.B.=...=
2401d198:	3ddc192a 3ddc8490 3ddcf02a 3ddd5bfa     *..=...=*..=.[.=
2401d1a8:	3dddc800 3dde343b 3ddea0ab 3ddf0d52     ...=;4.=...=R..=
2401d1b8:	3ddf7a2e 3ddfe740 3de05488 3de0c206     .z.=@..=.T.=...=
2401d1c8:	3de12fbb 3de19da6 3de20bc8 3de27a20     ./.=...=...= z.=
2401d1d8:	3de2e8af 3de35775 3de3c671 3de435a5     ...=uW.=q..=.5.=
2401d1e8:	3de4a510 3de514b2 3de5848c 3de5f49d     ...=...=...=...=
2401d1f8:	3de664e6 3de6d566 3de7461f 3de7b70f     .d.=f..=.F.=...=
2401d208:	3de82838 3de89998 3de90b31 3de97d03     8(.=...=1..=.}.=
2401d218:	3de9ef0d 3dea614f 3dead3cb 3deb467f     ...=Oa.=...=.F.=
2401d228:	3debb96c 3dec2c92 3dec9ff2 3ded138b     l..=.,.=...=...=
2401d238:	3ded875d 3dedfb69 3dee6faf 3deee42f     ]..=i..=.o.=/..=
2401d248:	3def58e8 3defcddc 3df04309 3df0b871     .X.=...=.C.=q..=
2401d258:	3df12e14 3df1a3f1 3df21a08 3df2905b     ...=...=...=[..=
2401d268:	3df306e8 3df37db0 3df3f4b4 3df46bf3     ...=.}.=...=.k.=
2401d278:	3df4e36d 3df55b22 3df5d313 3df64b40     m..="[.=...=@K.=
2401d288:	3df6c3a9 3df73c4e 3df7b52f 3df82e4c     ...=N<.=/..=L..=
2401d298:	3df8a7a5 3df9213b 3df99b0e 3dfa151d     ...=;!.=...=...=
2401d2a8:	3dfa8f6a 3dfb09f3 3dfb84b9 3dfbffbd     j..=...=...=...=
2401d2b8:	3dfc7afe 3dfcf67c 3dfd7238 3dfdee32     .z.=|..=8r.=2..=
2401d2c8:	3dfe6a69 3dfee6df 3dff6393 3dffe085     ij.=...=.c.=...=
2401d2d8:	3e002eda 3e006d92 3e00ac69 3e00eb5f     ...>.m.>i..>_..>
2401d2e8:	3e012a74 3e0169a9 3e01a8fe 3e01e872     t*.>.i.>...>r..>
2401d2f8:	3e022806 3e0267ba 3e02a78e 3e02e782     .(.>.g.>...>...>
2401d308:	3e032795 3e0367c9 3e03a81c 3e03e890     .'.>.g.>...>...>
2401d318:	3e042924 3e0469d9 3e04aaad 3e04eba3     $).>.i.>...>...>
2401d328:	3e052cb8 3e056def 3e05af46 3e05f0bd     .,.>.m.>F..>...>
2401d338:	3e063256 3e06740f 3e06b5e9 3e06f7e4     V2.>.t.>...>...>
2401d348:	3e073a01 3e077c3e 3e07be9d 3e08011c     .:.>>|.>...>...>
2401d358:	3e0843be 3e088680 3e08c964 3e090c6a     .C.>...>d..>j..>
2401d368:	3e094f91 3e0992da 3e09d644 3e0a19d1     .O.>...>D..>...>
2401d378:	3e0a5d7f 3e0aa14f 3e0ae542 3e0b2956     .].>O..>B..>V).>
2401d388:	3e0b6d8d 3e0bb1e6 3e0bf661 3e0c3afe     .m.>...>a..>.:.>
2401d398:	3e0c7fbe 3e0cc4a1 3e0d09a6 3e0d4ece     ...>...>...>.N.>
2401d3a8:	3e0d9418 3e0dd986 3e0e1f16 3e0e64c9     ...>...>...>.d.>
2401d3b8:	3e0eaaa0 3e0ef099 3e0f36b6 3e0f7cf6     ...>...>.6.>.|.>
2401d3c8:	3e0fc359 3e1009e0 3e10508a 3e109758     Y..>...>.P.>X..>
2401d3d8:	3e10de49 3e11255e 3e116c97 3e11b3f4     I..>^%.>.l.>...>
2401d3e8:	3e11fb75 3e12431a 3e128ae3 3e12d2d0     u..>.C.>...>...>
2401d3f8:	3e131ae1 3e136316 3e13ab70 3e13f3ef     ...>.c.>p..>...>
2401d408:	3e143c92 3e14855a 3e14ce46 3e151757     .<.>Z..>F..>W..>
2401d418:	3e15608d 3e15a9e9 3e15f369 3e163d0e     .`.>...>i..>.=.>
2401d428:	3e1686d8 3e16d0c8 3e171add 3e176517     ...>...>...>.e.>
2401d438:	3e17af77 3e17f9fc 3e1844a8 3e188f78     w..>...>.D.>x..>
2401d448:	3e18da6f 3e19258c 3e1970ce 3e19bc37     o..>.%.>.p.>7..>
2401d458:	3e1a07c6 3e1a537b 3e1a9f56 3e1aeb58     ...>{S.>V..>X..>
2401d468:	3e1b3780 3e1b83cf 3e1bd045 3e1c1ce1     .7.>...>E..>...>
2401d478:	3e1c69a4 3e1cb68e 3e1d039e 3e1d50d6     .i.>...>...>.P.>
2401d488:	3e1d9e35 3e1debbc 3e1e3969 3e1e873e     5..>...>i9.>>..>
2401d498:	3e1ed53b 3e1f235f 3e1f71aa 3e1fc01e     ;..>_#.>.q.>...>
2401d4a8:	3e200eb9 3e205d7c 3e20ac67 3e20fb7a     .. >|] >g. >z. >
2401d4b8:	3e214ab6 3e219a1a 3e21e9a6 3e22395a     .J!>..!>..!>Z9">
2401d4c8:	3e228937 3e22d93c 3e23296b 3e2379c2     7."><.">k)#>.y#>
2401d4d8:	3e23ca42 3e241aea 3e246bbc 3e24bcb7     B.#>..$>.k$>..$>
2401d4e8:	3e250ddc 3e255f29 3e25b0a0 3e260241     ..%>)_%>..%>A.&>
2401d4f8:	3e26540b 3e26a5ff 3e26f81c 3e274a63     .T&>..&>..&>cJ'>
2401d508:	3e279cd5 3e27ef70 3e284236 3e289525     ..'>p.'>6B(>%.(>
2401d518:	3e28e83f 3e293b84 3e298ef3 3e29e28c     ?.(>.;)>..)>..)>
2401d528:	3e2a3651 3e2a8a40 3e2ade5a 3e2b329e     Q6*>@.*>Z.*>.2+>
2401d538:	3e2b870e 3e2bdbaa 3e2c3070 3e2c8562     ..+>..+>p0,>b.,>
2401d548:	3e2cda7f 3e2d2fc8 3e2d853c 3e2ddadc     ..,>./-><.->..->
2401d558:	3e2e30a8 3e2e86a0 3e2edcc4 3e2f3314     .0.>...>...>.3/>
2401d568:	3e2f8990 3e2fe038 3e30370d 3e308e0f     ../>8./>.70>..0>
2401d578:	3e30e53d 3e313c98 3e31941f 3e31ebd4     =.0>.<1>..1>..1>
2401d588:	3e3243b5 3e329bc4 3e32f400 3e334c69     .C2>..2>..2>iL3>
2401d598:	3e33a4ff 3e33fdc3 3e3456b5 3e34afd5     ..3>..3>.V4>..4>
2401d5a8:	3e350922 3e35629d 3e35bc46 3e36161d     ".5>.b5>F.5>..6>
2401d5b8:	3e367023 3e36ca57 3e3724b9 3e377f4a     #p6>W.6>.$7>J.7>
2401d5c8:	3e37da09 3e3834f7 3e389014 3e38eb60     ..7>.48>..8>`.8>
2401d5d8:	3e3946dc 3e39a286 3e39fe5f 3e3a5a68     .F9>..9>_.9>hZ:>
2401d5e8:	3e3ab6a1 3e3b1309 3e3b6fa0 3e3bcc68     ..:>..;>.o;>h.;>
2401d5f8:	3e3c295f 3e3c8687 3e3ce3de 3e3d4166     _)<>..<>..<>fA=>
2401d608:	3e3d9f1e 3e3dfd07 3e3e5b20 3e3eb96a     ..=>..=> [>>j.>>
2401d618:	3e3f17e5 3e3f7690 3e3fd56d 3e40347a     ..?>.v?>m.?>z4@>
2401d628:	3e4093b9 3e40f32a 3e4152cb 3e41b29f     ..@>*.@>.RA>..A>
2401d638:	3e4212a4 3e4272da 3e42d343 3e4333de     ..B>.rB>C.B>.3C>
2401d648:	3e4394ab 3e43f5aa 3e4456db 3e44b83f     ..C>..C>.VD>?.D>
2401d658:	3e4519d6 3e457b9f 3e45dd9b 3e463fcb     ..E>.{E>..E>.?F>
2401d668:	3e46a22d 3e4704c2 3e47678b 3e47ca87     -.F>..G>.gG>..G>
2401d678:	3e482db6 3e48911a 3e48f4b1 3e49587c     .-H>..H>..H>|XI>
2401d688:	3e49bc7b 3e4a20ae 3e4a8515 3e4ae9b1     {.I>. J>..J>..J>
2401d698:	3e4b4e81 3e4bb386 3e4c18bf 3e4c7e2e     .NK>..K>..L>.~L>
2401d6a8:	3e4ce3d1 3e4d49aa 3e4dafb7 3e4e15fa     ..L>.IM>..M>..N>
2401d6b8:	3e4e7c73 3e4ee321 3e4f4a05 3e4fb11f     s|N>!.N>.JO>..O>
2401d6c8:	3e50186f 3e507ff4 3e50e7b1 3e514fa3     o.P>..P>..P>.OQ>
2401d6d8:	3e51b7cc 3e52202b 3e5288c2 3e52f18f     ..Q>+ R>..R>..R>
2401d6e8:	3e535a93 3e53c3ce 3e542d41 3e5496eb     .ZS>..S>A-T>..T>
2401d6f8:	3e5500cc 3e556ae5 3e55d536 3e563fbf     ..U>.jU>6.U>.?V>
2401d708:	3e56aa80 3e571579 3e5780aa 3e57ec14     ..V>y.W>..W>..W>
2401d718:	3e5857b6 3e58c391 3e592fa5 3e599bf2     .WX>..X>./Y>..Y>
2401d728:	3e5a0878 3e5a7537 3e5ae230 3e5b4f62     x.Z>7uZ>0.Z>bO[>
2401d738:	3e5bbcce 3e5c2a73 3e5c9853 3e5d066c     ..[>s*\>S.\>l.]>
2401d748:	3e5d74c0 3e5de34e 3e5e5217 3e5ec11a     .t]>N.]>.R^>..^>
2401d758:	3e5f3058 3e5f9fd1 3e600f85 3e607f74     X0_>.._>..`>t.`>
2401d768:	3e60ef9e 3e616004 3e61d0a6 3e624183     ..`>.`a>..a>.Ab>
2401d778:	3e62b29d 3e6323f2 3e639584 3e640751     ..b>.#c>..c>Q.d>
2401d788:	3e64795c 3e64eba3 3e655e27 3e65d0e7     \yd>..d>'^e>..e>
2401d798:	3e6643e5 3e66b720 3e672a98 3e679e4e     .Cf> .f>.*g>N.g>
2401d7a8:	3e681242 3e688673 3e68fae3 3e696f90     B.h>s.h>..h>.oi>
2401d7b8:	3e69e47c 3e6a59a6 3e6acf0f 3e6b44b6     |.i>.Yj>..j>.Dk>
2401d7c8:	3e6bba9d 3e6c30c2 3e6ca727 3e6d1dcb     ..k>.0l>'.l>..m>
2401d7d8:	3e6d94ae 3e6e0bd2 3e6e8335 3e6efad7     ..m>..n>5.n>..n>
2401d7e8:	3e6f72bb 3e6feade 3e706342 3e70dbe6     .ro>..o>Bcp>..p>
2401d7f8:	3e7154cc 3e71cdf2 3e724759 3e72c101     .Tq>..q>YGr>..r>
2401d808:	3e733aeb 3e73b517 3e742f84 3e74aa33     .:s>..s>./t>3.t>
2401d818:	3e752525 3e75a058 3e761bce 3e769786     %%u>X.u>..v>..v>
2401d828:	3e771382 3e778fc0 3e780c41 3e788905     ..w>..w>A.x>..x>
2401d838:	3e79060d 3e798358 3e7a00e7 3e7a7eba     ..y>X.y>..z>.~z>
2401d848:	3e7afcd1 3e7b7b2d 3e7bf9cd 3e7c78b1     ..z>-{{>..{>.x|>
2401d858:	3e7cf7da 3e7d7748 3e7df6fb 3e7e76f4     ..|>Hw}>..}>.v~>
2401d868:	3e7ef732 3e7f77b6 3e7ff87f 3e803cc7     2.~>.w.>...>.<.>
2401d878:	3e807d72 3e80be40 3e80ff31 3e814046     r}.>@..>1..>F@.>
2401d888:	3e81817e 3e81c2da 3e820459 3e8245fc     ~..>...>Y..>.E.>
2401d898:	3e8287c3 3e82c9ae 3e830bbc 3e834def     ...>...>...>.M.>
2401d8a8:	3e839046 3e83d2c1 3e841561 3e845825     F..>...>a..>%X.>
2401d8b8:	3e849b0e 3e84de1b 3e85214d 3e8564a4     ...>...>M!.>.d.>
2401d8c8:	3e85a820 3e85ebc1 3e862f87 3e867372      ..>...>./.>rs.>
2401d8d8:	3e86b783 3e86fbb9 3e874015 3e878496     ...>...>.@.>...>
2401d8e8:	3e87c93d 3e880e09 3e8852fc 3e889815     =..>...>.R.>...>
2401d8f8:	3e88dd54 3e8922b9 3e896844 3e89adf6     T..>.".>Dh.>...>
2401d908:	3e89f3ce 3e8a39cd 3e8a7ff2 3e8ac63f     ...>.9.>...>?..>
2401d918:	3e8b0cb2 3e8b534c 3e8b9a0e 3e8be0f7     ...>LS.>...>...>
2401d928:	3e8c2807 3e8c6f3e 3e8cb69d 3e8cfe24     .(.>>o.>...>$..>
2401d938:	3e8d45d3 3e8d8da9 3e8dd5a7 3e8e1dce     .E.>...>...>...>
2401d948:	3e8e661d 3e8eae94 3e8ef733 3e8f3ffb     .f.>...>3..>.?.>
2401d958:	3e8f88eb 3e8fd205 3e901b47 3e9064b2     ...>...>G..>.d.>
2401d968:	3e90ae46 3e90f803 3e9141ea 3e918bfa     F..>...>.A.>...>
2401d978:	3e91d633 3e922096 3e926b23 3e92b5da     3..>. .>#k.>...>
2401d988:	3e9300bb 3e934bc5 3e9396fa 3e93e25a     ...>.K.>...>Z..>
2401d998:	3e942de3 3e947998 3e94c577 3e951180     .-.>.y.>w..>...>
2401d9a8:	3e955db5 3e95aa15 3e95f69f 3e964356     .].>...>...>VC.>
2401d9b8:	3e969037 3e96dd44 3e972a7c 3e9777e1     7..>D..>|*.>.w.>
2401d9c8:	3e97c571 3e98132d 3e986115 3e98af29     q..>-..>.a.>)..>
2401d9d8:	3e98fd6a 3e994bd8 3e999a71 3e99e938     j..>.K.>q..>8..>
2401d9e8:	3e9a382b 3e9a874c 3e9ad699 3e9b2614     +8.>L..>...>.&.>
2401d9f8:	3e9b75bc 3e9bc592 3e9c1595 3e9c65c6     .u.>...>...>.e.>
2401da08:	3e9cb625 3e9d06b1 3e9d576c 3e9da856     %..>...>lW.>V..>
2401da18:	3e9df96d 3e9e4ab3 3e9e9c28 3e9eedcc     m..>.J.>(..>...>
2401da28:	3e9f3f9e 3e9f91a0 3e9fe3d0 3ea03630     .?.>...>...>06.>
2401da38:	3ea088c0 3ea0db7f 3ea12e6e 3ea1818d     ...>...>n..>...>
2401da48:	3ea1d4db 3ea2285a 3ea27c0a 3ea2cfe9     ...>Z(.>.|.>...>
2401da58:	3ea323f9 3ea3783a 3ea3ccac 3ea4214f     .#.>:x.>...>O!.>
2401da68:	3ea47623 3ea4cb28 3ea5205f 3ea575c7     #v.>(..>_ .>.u.>
2401da78:	3ea5cb61 3ea6212d 3ea6772b 3ea6cd5b     a..>-!.>+w.>[..>
2401da88:	3ea723bd 3ea77a52 3ea7d119 3ea82813     .#.>Rz.>...>.(.>
2401da98:	3ea87f40 3ea8d6a0 3ea92e34 3ea985fa     @..>...>4..>...>
2401daa8:	3ea9ddf4 3eaa3622 3eaa8e84 3eaae719     ...>"6.>...>...>
2401dab8:	3eab3fe3 3eab98e1 3eabf214 3eac4b7b     .?.>...>...>{K.>
2401dac8:	3eaca516 3eacfee7 3ead58ed 3eadb328     ...>...>.X.>(..>
2401dad8:	3eae0d99 3eae683f 3eaec31a 3eaf1e2c     ...>?h.>...>,..>
2401dae8:	3eaf7974 3eafd4f2 3eb030a6 3eb08c91     ty.>...>.0.>...>
2401daf8:	3eb0e8b2 3eb1450b 3eb1a19a 3eb1fe61     ...>.E.>...>a..>
2401db08:	3eb25b5f 3eb2b894 3eb31602 3eb373a7     _[.>...>...>.s.>
2401db18:	3eb3d184 3eb42f9a 3eb48de8 3eb4ec6e     ...>./.>...>n..>
2401db28:	3eb54b2e 3eb5aa26 3eb60957 3eb668c2     .K.>&..>W..>.h.>
2401db38:	3eb6c866 3eb72844 3eb7885c 3eb7e8ae     f..>D(.>\..>...>
2401db48:	3eb8493a 3eb8aa00 3eb90b01 3eb96c3d     :I.>...>...>=l.>
2401db58:	3eb9cdb3 3eba2f65 3eba9152 3ebaf37a     ...>e/.>R..>z..>
2401db68:	3ebb55df 3ebbb87f 3ebc1b5b 3ebc7e74     .U.>...>[..>t~.>
2401db78:	3ebce1c9 3ebd455a 3ebda929 3ebe0d34     ...>ZE.>)..>4..>
2401db88:	3ebe717d 3ebed603 3ebf3ac7 3ebf9fc9     }q.>...>.:.>...>
2401db98:	3ec00508 3ec06a86 3ec0d043 3ec1363e     ...>.j.>C..>>6.>
2401dba8:	3ec19c78 3ec202f0 3ec269a9 3ec2d0a0     x..>...>.i.>...>
2401dbb8:	3ec337d8 3ec39f4f 3ec40706 3ec46efe     .7.>O..>...>.n.>
2401dbc8:	3ec4d736 3ec53fae 3ec5a868 3ec61163     6..>.?.>h..>c..>
2401dbd8:	3ec67a9f 3ec6e41d 3ec74ddd 3ec7b7de     .z.>...>.M.>...>
2401dbe8:	3ec82222 3ec88ca9 3ec8f772 3ec9627e     "".>...>r..>~b.>
2401dbf8:	3ec9cdcd 3eca395f 3ecaa535 3ecb114f     ...>_9.>5..>O..>
2401dc08:	3ecb7dad 3ecbea4f 3ecc5736 3eccc461     .}.>O..>6W.>a..>
2401dc18:	3ecd31d2 3ecd9f87 3ece0d82 3ece7bc3     .1.>...>...>.{.>
2401dc28:	3eceea4a 3ecf5916 3ecfc82a 3ed03783     J..>.Y.>*..>.7.>
2401dc38:	3ed0a724 3ed1170c 3ed1873b 3ed1f7b2     $..>...>;..>...>
2401dc48:	3ed26870 3ed2d977 3ed34ac6 3ed3bc5e     ph.>w..>.J.>^..>
2401dc58:	3ed42e3e 3ed4a068 3ed512db 3ed58598     >..>h..>...>...>
2401dc68:	3ed5f89e 3ed66bef 3ed6df8a 3ed75370     ...>.k.>...>pS.>
2401dc78:	3ed7c7a1 3ed83c1d 3ed8b0e4 3ed925f7     ...>.<.>...>.%.>
2401dc88:	3ed99b57 3eda1102 3eda86fa 3edafd3f     W..>...>...>?..>
2401dc98:	3edb73d1 3edbeab0 3edc61dd 3edcd958     .s.>...>.a.>X..>
2401dca8:	3edd5121 3eddc938 3ede419e 3edeba54     !Q.>8..>.A.>T..>
2401dcb8:	3edf3358 3edfacad 3ee02651 3ee0a045     X3.>...>Q&.>E..>
2401dcc8:	3ee11a8a 3ee19520 3ee21007 3ee28b3f     ...> ..>...>?..>
2401dcd8:	3ee306c9 3ee382a5 3ee3fed3 3ee47b54     ...>...>...>T{.>
2401dce8:	3ee4f827 3ee5754e 3ee5f2c9 3ee67097     '..>Nu.>...>.p.>
2401dcf8:	3ee6eeb9 3ee76d30 3ee7ebfc 3ee86b1c     ...>0m.>...>.k.>
2401dd08:	3ee8ea92 3ee96a5e 3ee9ea80 3eea6af8     ...>^j.>...>.j.>
2401dd18:	3eeaebc7 3eeb6ced 3eebee6a 3eec703f     ...>.l.>j..>?p.>
2401dd28:	3eecf26c 3eed74f2 3eedf7d0 3eee7b07     l..>.t.>...>.{.>
2401dd38:	3eeefe97 3eef8282 3ef006c6 3ef08b64     ...>...>...>d..>
2401dd48:	3ef1105e 3ef195b2 3ef21b62 3ef2a16e     ^..>...>b..>n..>
2401dd58:	3ef327d6 3ef3ae9a 3ef435bc 3ef4bd3a     .'.>...>.5.>:..>
2401dd68:	3ef54516 3ef5cd50 3ef655e9 3ef6dee0     .E.>P..>.U.>...>
2401dd78:	3ef76837 3ef7f1ec 3ef87c02 3ef90678     7h.>...>.|.>x..>
2401dd88:	3ef9914e 3efa1c86 3efaa81f 3efb3419     N..>...>...>.4.>
2401dd98:	3efbc076 3efc4d36 3efcda58 3efd67dd     v..>6M.>X..>.g.>
2401dda8:	3efdf5c7 3efe8414 3eff12c6 3effa1dd     ...>...>...>...>
2401ddb8:	3f0018ad 3f00609e 3f00a8c2 3f00f11a     ...?.`.?...?...?
2401ddc8:	3f0139a5 3f018263 3f01cb56 3f02147d     .9.?c..?V..?}..?
2401ddd8:	3f025dd8 3f02a768 3f02f12d 3f033b26     .].?h..?-..?&;.?
2401dde8:	3f038555 3f03cfb9 3f041a53 3f046523     U..?...?S..?#e.?
2401ddf8:	3f04b029 3f04fb66 3f0546d9 3f059282     )..?f..?.F.?...?
2401de08:	3f05de63 3f062a7b 3f0676cb 3f06c353     c..?{*.?.v.?S..?
2401de18:	3f071012 3f075d0a 3f07aa3a 3f07f7a2     ...?.].?:..?...?
2401de28:	3f084544 3f08931f 3f08e134 3f092f82     DE.?...?4..?./.?
2401de38:	3f097e0a 3f09cccc 3f0a1bc8 3f0a6b00     .~.?...?...?.k.?
2401de48:	3f0aba72 3f0b0a20 3f0b5a08 3f0baa2d     r..? ..?.Z.?-..?
2401de58:	3f0bfa8e 3f0c4b2b 3f0c9c04 3f0ced1a     ...?+K.?...?...?
2401de68:	3f0d3e6e 3f0d8ffe 3f0de1cc 3f0e33d8     n>.?...?...?.3.?
2401de78:	3f0e8622 3f0ed8ab 3f0f2b72 3f0f7e78     "..?...?r+.?x~.?
2401de88:	3f0fd1be 3f102543 3f107908 3f10cd0d     ...?C%.?.y.?...?
2401de98:	3f112152 3f1175d9 3f11caa0 3f121fa8     R!.?.u.?...?...?
2401dea8:	3f1274f2 3f12ca7e 3f13204c 3f13765d     .t.?~..?L .?]v.?
2401deb8:	3f13ccb0 3f142346 3f147a20 3f14d13e     ...?F#.? z.?>..?
2401dec8:	3f1528a0 3f158046 3f15d831 3f163060     .(.?F..?1..?`0.?
2401ded8:	3f1688d5 3f16e190 3f173a91 3f1793d8     ...?...?.:.?...?
2401dee8:	3f17ed65 3f18473a 3f18a156 3f18fbba     e..?:G.?V..?...?
2401def8:	3f195665 3f19b159 3f1a0c96 3f1a681b     eV.?Y..?...?.h.?
2401df08:	3f1ac3ea 3f1b2003 3f1b7c66 3f1bd913     ...?. .?f|.?...?
2401df18:	3f1c360b 3f1c934e 3f1cf0dd 3f1d4eb7     .6.?N..?...?.N.?
2401df28:	3f1dacde 3f1e0b52 3f1e6a12 3f1ec920     ...?R..?.j.? ..?
2401df38:	3f1f287c 3f1f8826 3f1fe81e 3f204866     |(.?&..?...?fH ?
2401df48:	3f20a8fc 3f2109e3 3f216b19 3f21cca0     .. ?..!?.k!?..!?
2401df58:	3f222e78 3f2290a2 3f22f31d 3f2355ea     x."?.."?.."?.U#?
2401df68:	3f23b90a 3f241c7d 3f248043 3f24e45d     ..#?}.$?C.$?].$?
2401df78:	3f2548cb 3f25ad8e 3f2612a6 3f267814     .H%?..%?..&?.x&?
2401df88:	3f26ddd7 3f2743f1 3f27aa62 3f28112b     ..&?.C'?b.'?+.(?
2401df98:	3f28784b 3f28dfc3 3f294794 3f29afbe     Kx(?..(?.G)?..)?
2401dfa8:	3f2a1842 3f2a8120 3f2aea59 3f2b53ed     B.*? .*?Y.*?.S+?
2401dfb8:	3f2bbddc 3f2c2827 3f2c92cf 3f2cfdd4     ..+?'(,?..,?..,?
2401dfc8:	3f2d6936 3f2dd4f6 3f2e4115 3f2ead93     6i-?..-?.A.?...?
2401dfd8:	3f2f1a70 3f2f87ae 3f2ff54c 3f30634b     p./?../?L./?Kc0?
2401dfe8:	3f30d1ac 3f31406e 3f31af94 3f321f1d     ..0?n@1?..1?..2?
2401dff8:	3f328f09 3f32ff5a 3f337010 3f33e12b     ..2?Z.2?.p3?+.3?
2401e008:	3f3452ac 3f34c494 3f3536e3 3f35a999     .R4?..4?.65?..5?
2401e018:	3f361cb8 3f369040 3f370431 3f37788c     ..6?@.6?1.7?.x7?
2401e028:	3f37ed52 3f386283 3f38d820 3f394e2a     R.7?.b8? .8?*N9?
2401e038:	3f39c4a0 3f3a3b85 3f3ab2d7 3f3b2a99     ..9?.;:?..:?.*;?
2401e048:	3f3ba2ca 3f3c1b6c 3f3c947e 3f3d0e02     ..;?l.<?~.<?..=?
2401e058:	3f3d87f8 3f3e0261 3f3e7d3e 3f3ef88e     ..=?a.>?>}>?..>?
2401e068:	3f3f7454 3f3ff090 3f406d41 3f40ea6a     Tt??..??Am@?j.@?
2401e078:	3f41680a 3f41e623 3f4264b5 3f42e3c1     .hA?#.A?.dB?..B?
2401e088:	3f436347 3f43e349 3f4463c6 3f44e4c1     GcC?I.C?.cD?..D?
2401e098:	3f456639 3f45e82f 3f466aa5 3f46ed9a     9fE?/.E?.jF?..F?
2401e0a8:	3f477110 3f47f507 3f487981 3f48fe7d     .qG?..G?.yH?}.H?
2401e0b8:	3f4983fe 3f4a0a03 3f4a908d 3f4b179e     ..I?..J?..J?..K?
2401e0c8:	3f4b9f36 3f4c2756 3f4cafff 3f4d3932     6.K?V'L?..L?29M?
2401e0d8:	3f4dc2ef 3f4e4d37 3f4ed80c 3f4f636e     ..M?7MN?..N?ncO?
2401e0e8:	3f4fef5e 3f507bdd 3f5108ec 3f51968b     ^.O?.{P?..Q?..Q?
2401e0f8:	3f5224bd 3f52b381 3f5342d9 3f53d2c6     .$R?..R?.BS?..S?
2401e108:	3f546348 3f54f460 3f558611 3f561859     HcT?`.T?..U?Y.V?
2401e118:	3f56ab3b 3f573eb8 3f57d2d0 3f586785     ;.V?.>W?..W?.gX?
2401e128:	3f58fcd8 3f5992c9 3f5a295a 3f5ac08b     ..X?..Y?Z)Z?..Z?
2401e138:	3f5b585f 3f5bf0d5 3f5c89f0 3f5d23b0     _X[?..[?..\?.#]?
2401e148:	3f5dbe16 3f5e5923 3f5ef4d9 3f5f9138     ..]?#Y^?..^?8._?
2401e158:	3f602e43 3f60cbf9 3f616a5d 3f62096f     C.`?..`?]ja?o.b?
2401e168:	3f62a931 3f6349a4 3f63eac8 3f648ca0     1.b?.Ic?..c?..d?
2401e178:	3f652f2d 3f65d26f 3f667669 3f671b1b     -/e?o.e?ivf?..g?
2401e188:	3f67c086 3f6866ad 3f690d90 3f69b531     ..g?.fh?..i?1.i?
2401e198:	3f6a5d91 3f6b06b1 3f6bb093 3f6c5b38     .]j?..k?..k?8[l?
2401e1a8:	3f6d06a2 3f6db2d2 3f6e5fca 3f6f0d8a     ..m?..m?._n?..o?
2401e1b8:	3f6fbc15 3f706b6c 3f711b90 3f71cc83     ..o?lkp?..q?..q?
2401e1c8:	3f727e47 3f7330dd 3f73e446 3f749884     G~r?.0s?F.s?..t?
2401e1d8:	3f754d9a 3f760387 3f76ba4f 3f7771f2     .Mu?..v?O.v?.qw?
2401e1e8:	3f782a73 3f78e3d2 3f799e12 3f7a5935     s*x?..x?..y?5Yz?
2401e1f8:	3f7b153c 3f7bd228 3f7c8ffd 3f7d4ebb     <.{?(.{?..|?.N}?
2401e208:	3f7e0e64 3f7ecefa 3f7f9080 3f80297b     d.~?..~?...?{).?
2401e218:	3f808b2f 3f80ed5e 3f815008 3f81b32e     /..?^..?.P.?...?
2401e228:	3f8216d2 3f827af4 3f82df95 3f8344b6     ...?.z.?...?.D.?
2401e238:	3f83aa59 3f84107e 3f847727 3f84de54     Y..?~..?'w.?T..?
2401e248:	3f854606 3f85ae3f 3f861700 3f86804a     .F.??..?...?J..?
2401e258:	3f86ea1e 3f87547d 3f87bf68 3f882ae1     ...?}T.?h..?.*.?
2401e268:	3f8896e8 3f890380 3f8970a8 3f89de63     ...?...?.p.?c..?
2401e278:	3f8a4cb1 3f8abb94 3f8b2b0d 3f8b9b1d     .L.?...?.+.?...?
2401e288:	3f8c0bc6 3f8c7d09 3f8ceee7 3f8d6162     ...?.}.?...?ba.?
2401e298:	3f8dd47a 3f8e4832 3f8ebc8b 3f8f3186     z..?2H.?...?.1.?
2401e2a8:	3f8fa724 3f901d68 3f909452 3f910be4     $..?h..?R..?...?
2401e2b8:	3f91841f 3f91fd05 3f927698 3f92f0d9     ...?...?.v.?...?
2401e2c8:	3f936bc9 3f93e76b 3f9463bf 3f94e0c8     .k.?k..?.c.?...?
2401e2d8:	3f955e87 3f95dcfe 3f965c2e 3f96dc19     .^.?...?.\.?...?
2401e2e8:	3f975cc2 3f97de29 3f986050 3f98e33a     .\.?)..?P`.?:..?
2401e2f8:	3f9966e8 3f99eb5c 3f9a7097 3f9af69d     .f.?\..?.p.?...?
2401e308:	3f9b7d6e 3f9c050c 3f9c8d7a 3f9d16ba     n}.?...?z..?...?
2401e318:	3f9da0cd 3f9e2bb6 3f9eb777 3f9f4412     ...?.+.?w..?.D.?
2401e328:	3f9fd188 3fa05fdd 3fa0ef12 3fa17f29     ...?._.?...?)..?
2401e338:	3fa21026 3fa2a209 3fa334d6 3fa3c88f     &..?...?.4.?...?
2401e348:	3fa45d36 3fa4f2cd 3fa58958 3fa620d8     6].?...?X..?. .?
2401e358:	3fa6b950 3fa752c2 3fa7ed32 3fa888a1     P..?.R.?2..?...?
2401e368:	3fa92513 3fa9c28a 3faa6109 3fab0093     .%.?...?.a.?...?
2401e378:	3faba12a 3fac42d2 3face58c 3fad895d     *..?.B.?...?]..?
2401e388:	3fae2e47 3faed44d 3faf7b73 3fb023bb     G..?M..?s{.?.#.?
2401e398:	3fb0cd28 3fb177be 3fb22380 3fb2d072     (..?.w.?.#.?r..?
2401e3a8:	3fb37e96 3fb42df0 3fb4de84 3fb59055     .~.?.-.?...?U..?
2401e3b8:	3fb64366 3fb6f7bc 3fb7ad59 3fb86443     fC.?...?Y..?Cd.?
2401e3c8:	3fb91c7b 3fb9d607 3fba90ea 3fbb4d29     {..?...?...?)M.?
2401e3d8:	3fbc0ac6 3fbcc9c7 3fbd8a2f 3fbe4c03     ...?...?/..?.L.?
2401e3e8:	3fbf0f47 3fbfd400 3fc09a31 3fc161df     G..?...?1..?.a.?
2401e3f8:	3fc22b0f 3fc2f5c6 3fc3c208 3fc48fda     .+.?...?...?...?
2401e408:	3fc55f41 3fc63042 3fc702e2 3fc7d726     A_.?B0.?...?&..?
2401e418:	3fc8ad14 3fc984b0 3fca5e00 3fcb390a     ...?...?.^.?.9.?
2401e428:	3fcc15d2 3fccf460 3fcdd4b8 3fceb6e1     ...?`..?...?...?
2401e438:	3fcf9ae0 3fd080bc 3fd1687a 3fd25222     ...?...?zh.?"R.?
2401e448:	3fd33db9 3fd42b46 3fd51ad0 3fd60c5d     .=.?F+.?...?]..?
2401e458:	3fd6fff4 3fd7f59d 3fd8ed5e 3fd9e73f     ...?...?^..??..?
2401e468:	3fdae347 3fdbe17e 3fdce1eb 3fdde497     G..?~..?...?...?
2401e478:	3fdee988 3fdff0c8 3fe0fa5e 3fe20654     ...?...?^..?T..?
2401e488:	3fe314b1 3fe4257e 3fe538c5 3fe64e8d     ...?~%.?.8.?.N.?
2401e498:	3fe766e2 3fe881cc 3fe99f54 3feabf85     .f.?...?T..?...?
2401e4a8:	3febe269 3fed080a 3fee3071 3fef5bab     i..?...?q0.?.[.?
2401e4b8:	3ff089c1 3ff1bac0 3ff2eeb1 3ff425a1     ...?...?...?.%.?
2401e4c8:	3ff55f9c 3ff69cad 3ff7dce1 3ff92044     ._.?...?...?D .?
2401e4d8:	3ffa66e4 3ffbb0cc 3ffcfe0b 3ffe4eae     .f.?...?...?.N.?
2401e4e8:	3fffa2c4 40007d2c 40012abf 4001da20     ...?,}.@.*.@ ..@
2401e4f8:	40028b57 40033e6d 4003f368 4004aa52     W..@m>.@h..@R..@
2401e508:	40056333 40061e12 4006daf9 400799f1     3c.@...@...@...@
2401e518:	40085b02 40091e36 4009e397 400aab2e     .[.@6..@...@...@
2401e528:	400b7504 400c4126 400d0f9b 400de071     .u.@&A.@...@q..@
2401e538:	400eb3b0 400f8965 4010619b 40113c5e     ...@e..@.a.@^<.@
2401e548:	401219ba 4012f9bb 4013dc6e 4014c1e0     ...@...@n..@...@
2401e558:	4015aa1e 40169536 40178336 4018742c     ...@6..@6..@,t.@
2401e568:	40196827 401a5f36 401b5968 401c56cf     'h.@6_.@hY.@.V.@
2401e578:	401d5779 401e5b78 401f62de 40206dbb     yW.@x[.@.b.@.m @
2401e588:	40217c22 40228e25 4023a3d9 4024bd51     "|!@%."@..#@Q.$@
2401e598:	4025daa1 4026fbde 4028211e 40294a76     ..%@..&@.!(@vJ)@
2401e5a8:	402a77fe 402ba9ce 402cdffc 402e1aa3     .w*@..+@..,@...@
2401e5b8:	402f59db 40309dc0 4031e66c 403333fc     .Y/@..0@l.1@.33@

2401e5c8 <__filterTanhTable_96000>:
2401e5c8:	398c4646 398c8a33 398cce40 398d126e     FF.93..9@..9n..9
2401e5d8:	398d56bd 398d9b2e 398ddfbf 398e2472     .V.9...9...9r$.9
2401e5e8:	398e6946 398eae3b 398ef351 398f3889     Fi.9;..9Q..9.8.9
2401e5f8:	398f7de3 398fc35e 399008fb 39904eb9     .}.9^..9...9.N.9
2401e608:	3990949a 3990da9c 399120c0 39916706     ...9...9. .9.g.9
2401e618:	3991ad6e 3991f3f8 39923aa4 39928173     n..9...9.:.9s..9
2401e628:	3992c863 39930f76 399356ac 39939e04     c..9v..9.V.9...9
2401e638:	3993e57f 39942d1c 399474dc 3994bcbe     ...9.-.9.t.9...9
2401e648:	399504c3 39954cec 39959537 3995dda5     ...9.L.97..9...9
2401e658:	39962636 39966eeb 3996b7c2 399700bd     6&.9.n.9...9...9
2401e668:	399749dc 3997931d 3997dc82 3998260b     .I.9...9...9.&.9
2401e678:	39986fb7 3998b987 3999037b 39994d92     .o.9...9{..9.M.9
2401e688:	399997ce 3999e22d 399a2cb0 399a7758     ...9-..9.,.9Xw.9
2401e698:	399ac223 399b0d13 399b5827 399ba35f     #..9...9'X.9_..9
2401e6a8:	399beebc 399c3a3d 399c85e3 399cd1ae     ...9=:.9...9...9
2401e6b8:	399d1d9d 399d69b1 399db5ea 399e0247     ...9.i.9...9G..9
2401e6c8:	399e4eca 399e9b72 399ee83f 399f3531     .N.9r..9?..915.9
2401e6d8:	399f8248 399fcf85 39a01ce7 39a06a6e     H..9...9...9nj.9
2401e6e8:	39a0b81b 39a105ee 39a153e6 39a1a204     ...9...9.S.9...9
2401e6f8:	39a1f048 39a23eb2 39a28d42 39a2dbf8     H..9.>.9B..9...9
2401e708:	39a32ad4 39a379d6 39a3c8fe 39a4184d     .*.9.y.9...9M..9
2401e718:	39a467c2 39a4b75d 39a50720 39a55708     .g.9]..9 ..9.W.9
2401e728:	39a5a718 39a5f74e 39a647ab 39a6982f     ...9N..9.G.9/..9
2401e738:	39a6e8da 39a739ac 39a78aa5 39a7dbc5     ...9.9.9...9...9
2401e748:	39a82d0d 39a87e7c 39a8d012 39a921d0     .-.9|~.9...9.!.9
2401e758:	39a973b6 39a9c5c3 39aa17f8 39aa6a55     .s.9...9...9Uj.9
2401e768:	39aabcd9 39ab0f86 39ab625a 39abb557     ...9...9Zb.9W..9
2401e778:	39ac087c 39ac5bc9 39acaf3e 39ad02dc     |..9.[.9>..9...9
2401e788:	39ad56a3 39adaa92 39adfea9 39ae52e9     .V.9...9...9.R.9
2401e798:	39aea753 39aefbe5 39af509f 39afa583     S..9...9.P.9...9
2401e7a8:	39affa90 39b04fc7 39b0a526 39b0faaf     ...9.O.9&..9...9
2401e7b8:	39b15061 39b1a63d 39b1fc42 39b25271     aP.9=..9B..9qR.9
2401e7c8:	39b2a8ca 39b2ff4c 39b355f9 39b3accf     ...9L..9.U.9...9
2401e7d8:	39b403d0 39b45afa 39b4b24f 39b509ce     ...9.Z.9O..9...9
2401e7e8:	39b56177 39b5b94b 39b61149 39b66972     wa.9K..9I..9ri.9
2401e7f8:	39b6c1c6 39b71a45 39b772ee 39b7cbc2     ...9E..9.r.9...9
2401e808:	39b824c1 39b87dec 39b8d741 39b930c2     .$.9.}.9A..9.0.9
2401e818:	39b98a6e 39b9e445 39ba3e48 39ba9877     n..9E..9H>.9w..9
2401e828:	39baf2d1 39bb4d57 39bba809 39bc02e7     ...9WM.9...9...9
2401e838:	39bc5df1 39bcb927 39bd1489 39bd7017     .].9'..9...9.p.9
2401e848:	39bdcbd2 39be27b9 39be83cc 39bee00c     ...9.'.9...9...9
2401e858:	39bf3c79 39bf9912 39bff5d9 39c052cc     y<.9...9...9.R.9
2401e868:	39c0afec 39c10d3a 39c16ab4 39c1c85c     ...9:..9.j.9\..9
2401e878:	39c22631 39c28434 39c2e264 39c340c2     1&.94..9d..9.@.9
2401e888:	39c39f4d 39c3fe07 39c45cee 39c4bc03     M..9...9.\.9...9
2401e898:	39c51b46 39c57ab7 39c5da56 39c63a24     F..9.z.9V..9$:.9
2401e8a8:	39c69a20 39c6fa4b 39c75aa4 39c7bb2c      ..9K..9.Z.9,..9
2401e8b8:	39c81be2 39c87cc8 39c8dddc 39c93f1f     ...9.|.9...9.?.9
2401e8c8:	39c9a092 39ca0233 39ca6404 39cac604     ...93..9.d.9...9
2401e8d8:	39cb2834 39cb8a93 39cbed22 39cc4fe1     4(.9...9"..9.O.9
2401e8e8:	39ccb2cf 39cd15ed 39cd793c 39cddcba     ...9...9<y.9...9
2401e8f8:	39ce4069 39cea447 39cf0857 39cf6c96     i@.9G..9W..9.l.9
2401e908:	39cfd106 39d035a7 39d09a79 39d0ff7b     ...9.5.9y..9{..9
2401e918:	39d164ae 39d1ca13 39d22fa8 39d2956f     .d.9...9./.9o..9
2401e928:	39d2fb66 39d36190 39d3c7ea 39d42e76     f..9.a.9...9v..9
2401e938:	39d49534 39d4fc24 39d56346 39d5ca99     4..9$..9Fc.9...9
2401e948:	39d6321e 39d699d6 39d701c0 39d769dc     .2.9...9...9.i.9
2401e958:	39d7d22a 39d83aab 39d8a35f 39d90c45     *..9.:.9_..9E..9
2401e968:	39d9755f 39d9deab 39da482a 39dab1dc     _u.9...9*H.9...9
2401e978:	39db1bc1 39db85d9 39dbf025 39dc5aa5     ...9...9%..9.Z.9
2401e988:	39dcc558 39dd303e 39dd9b59 39de06a7     X..9>0.9Y..9...9
2401e998:	39de7229 39dedddf 39df49ca 39dfb5e9     )r.9...9.I.9...9
2401e9a8:	39e0223c 39e08ec3 39e0fb7f 39e16870     <".9...9...9ph.9
2401e9b8:	39e1d595 39e242f0 39e2b07f 39e31e43     ...9.B.9...9C..9
2401e9c8:	39e38c3c 39e3fa6b 39e468cf 39e4d769     <..9k..9.h.9i..9
2401e9d8:	39e54638 39e5b53c 39e62477 39e693e7     8F.9<..9w$.9...9
2401e9e8:	39e7038d 39e7736a 39e7e37c 39e853c5     ...9js.9|..9.S.9
2401e9f8:	39e8c444 39e934fa 39e9a5e6 39ea1709     D..9.4.9...9...9
2401ea08:	39ea8863 39eaf9f3 39eb6bbb 39ebddb9     c..9...9.k.9...9
2401ea18:	39ec4fef 39ecc25c 39ed3501 39eda7dd     .O.9\..9.5.9...9
2401ea28:	39ee1af0 39ee8e3c 39ef01bf 39ef757a     ...9<..9...9zu.9
2401ea38:	39efe96d 39f05d99 39f0d1fc 39f14698     m..9.].9...9.F.9
2401ea48:	39f1bb6d 39f2307a 39f2a5bf 39f31b3e     m..9z0.9...9>..9
2401ea58:	39f390f5 39f406e5 39f47d0f 39f4f371     ...9...9.}.9q..9
2401ea68:	39f56a0d 39f5e0e3 39f657f2 39f6cf3a     .j.9...9.W.9:..9
2401ea78:	39f746bd 39f7be79 39f8366f 39f8ae9f     .F.9y..9o6.9...9
2401ea88:	39f9270a 39f99faf 39fa188e 39fa91a8     .'.9...9...9...9
2401ea98:	39fb0afc 39fb848b 39fbfe55 39fc785a     ...9...9U..9Zx.9
2401eaa8:	39fcf29a 39fd6d15 39fde7cc 39fe62be     ...9.m.9...9.b.9
2401eab8:	39feddeb 39ff5955 39ffd4f9 3a00286d     ...9UY.9...9m(.:
2401eac8:	3a00667b 3a00a4a8 3a00e2f2 3a01215b     {f.:...:...:[!.:
2401ead8:	3a015fe2 3a019e87 3a01dd4b 3a021c2d     ._.:...:K..:-..:
2401eae8:	3a025b2d 3a029a4c 3a02d989 3a0318e5     -[.:L..:...:...:
2401eaf8:	3a035860 3a0397fa 3a03d7b2 3a041789     `X.:...:...:...:
2401eb08:	3a04577f 3a049794 3a04d7c8 3a05181b     .W.:...:...:...:
2401eb18:	3a05588d 3a05991f 3a05d9d0 3a061aa0     .X.:...:...:...:
2401eb28:	3a065b8f 3a069c9e 3a06ddcd 3a071f1a     .[.:...:...:...:
2401eb38:	3a076088 3a07a215 3a07e3c2 3a08258f     .`.:...:...:.%.:
2401eb48:	3a08677c 3a08a988 3a08ebb5 3a092e02     |g.:...:...:...:
2401eb58:	3a09706e 3a09b2fb 3a09f5a8 3a0a3876     np.:...:...:v8.:
2401eb68:	3a0a7b63 3a0abe72 3a0b01a0 3a0b44ef     c{.:r..:...:.D.:
2401eb78:	3a0b885f 3a0bcbef 3a0c0fa1 3a0c5372     _..:...:...:rS.:
2401eb88:	3a0c9765 3a0cdb79 3a0d1fad 3a0d6403     e..:y..:...:.d.:
2401eb98:	3a0da87a 3a0ded12 3a0e31cb 3a0e76a5     z..:...:.1.:.v.:
2401eba8:	3a0ebba1 3a0f00be 3a0f45fc 3a0f8b5c     ...:...:.E.:\..:
2401ebb8:	3a0fd0de 3a101681 3a105c46 3a10a22d     ...:...:F\.:-..:
2401ebc8:	3a10e836 3a112e61 3a1174ad 3a11bb1c     6..:a..:.t.:...:
2401ebd8:	3a1201ac 3a12485f 3a128f34 3a12d62c     ...:_H.:4..:,..:
2401ebe8:	3a131d46 3a136482 3a13abe1 3a13f362     F..:.d.:...:b..:
2401ebf8:	3a143b06 3a1482cc 3a14cab6 3a1512c2     .;.:...:...:...:
2401ec08:	3a155af1 3a15a343 3a15ebb8 3a163450     .Z.:C..:...:P4.:
2401ec18:	3a167d0b 3a16c5ea 3a170eeb 3a175810     .}.:...:...:.X.:
2401ec28:	3a17a159 3a17eac5 3a183454 3a187e08     Y..:...:T4.:.~.:
2401ec38:	3a18c7de 3a1911d9 3a195bf7 3a19a63a     ...:...:.[.::..:
2401ec48:	3a19f0a0 3a1a3b2a 3a1a85d9 3a1ad0ab     ...:*;.:...:...:
2401ec58:	3a1b1ba2 3a1b66bd 3a1bb1fd 3a1bfd61     ...:.f.:...:a..:
2401ec68:	3a1c48e9 3a1c9496 3a1ce068 3a1d2c5e     .H.:...:h..:^,.:
2401ec78:	3a1d7879 3a1dc4b9 3a1e111e 3a1e5da8     yx.:...:...:.].:
2401ec88:	3a1eaa57 3a1ef72b 3a1f4424 3a1f9143     W..:+..:$D.:C..:
2401ec98:	3a1fde86 3a202bf0 3a20797e 3a20c733     ...:.+ :~y :3. :
2401eca8:	3a21150d 3a21630c 3a21b132 3a21ff7d     ..!:.c!:2.!:}.!:
2401ecb8:	3a224dee 3a229c85 3a22eb43 3a233a26     .M":..":C.":&:#:
2401ecc8:	3a238930 3a23d85f 3a2427b6 3a247732     0.#:_.#:.'$:2w$:
2401ecd8:	3a24c6d5 3a25169f 3a25668f 3a25b6a6     ..$:..%:.f%:..%:
2401ece8:	3a2606e4 3a265748 3a26a7d4 3a26f886     ..&:HW&:..&:..&:
2401ecf8:	3a274960 3a279a61 3a27eb89 3a283cd8     `I':a.':..':.<(:
2401ed08:	3a288e4f 3a28dfed 3a2931b2 3a2983a0     O.(:..(:.1):..):
2401ed18:	3a29d5b4 3a2a27f1 3a2a7a56 3a2acce2     ..):.'*:Vz*:..*:
2401ed28:	3a2b1f96 3a2b7273 3a2bc577 3a2c18a4     ..+:sr+:w.+:..,:
2401ed38:	3a2c6bf9 3a2cbf76 3a2d131c 3a2d66ea     .k,:v.,:..-:.f-:
2401ed48:	3a2dbae1 3a2e0f00 3a2e6348 3a2eb7b9     ..-:...:Hc.:...:
2401ed58:	3a2f0c53 3a2f6116 3a2fb602 3a300b17     S./:.a/:../:..0:
2401ed68:	3a306055 3a30b5bd 3a310b4e 3a316108     U`0:..0:N.1:.a1:
2401ed78:	3a31b6ec 3a320cf9 3a326330 3a32b991     ..1:..2:0c2:..2:
2401ed88:	3a33101c 3a3366d0 3a33bdaf 3a3414b7     ..3:.f3:..3:..4:
2401ed98:	3a346bea 3a34c347 3a351ace 3a357280     .k4:G.4:..5:.r5:
2401eda8:	3a35ca5c 3a362263 3a367a94 3a36d2f0     \.5:c"6:.z6:..6:
2401edb8:	3a372b77 3a378428 3a37dd05 3a38360c     w+7:(.7:..7:.68:
2401edc8:	3a388f3f 3a38e89d 3a394226 3a399bdb     ?.8:..8:&B9:..9:
2401edd8:	3a39f5bb 3a3a4fc6 3a3aa9fd 3a3b0460     ..9:.O::..::`.;:
2401ede8:	3a3b5eee 3a3bb9a9 3a3c148f 3a3c6fa1     .^;:..;:..<:.o<:
2401edf8:	3a3ccae0 3a3d264b 3a3d81e1 3a3ddda5     ..<:K&=:..=:..=:
2401ee08:	3a3e3994 3a3e95b0 3a3ef1f9 3a3f4e6f     .9>:..>:..>:oN?:
2401ee18:	3a3fab11 3a4007e0 3a4064dc 3a40c205     ..?:..@:.d@:..@:
2401ee28:	3a411f5b 3a417cdf 3a41da8f 3a42386d     [.A:.|A:..A:m8B:
2401ee38:	3a429679 3a42f4b2 3a435318 3a43b1ad     y.B:..B:.SC:..C:
2401ee48:	3a44106f 3a446f5f 3a44ce7d 3a452dc9     o.D:_oD:}.D:.-E:
2401ee58:	3a458d43 3a45eceb 3a464cc2 3a46acc7     C.E:..E:.LF:..F:
2401ee68:	3a470cfb 3a476d5d 3a47cdee 3a482eae     ..G:]mG:..G:..H:
2401ee78:	3a488f9c 3a48f0b9 3a495206 3a49b381     ..H:..H:.RI:..I:
2401ee88:	3a4a152c 3a4a7706 3a4ad910 3a4b3b49     ,.J:.wJ:..J:I;K:
2401ee98:	3a4b9db1 3a4c0049 3a4c6311 3a4cc609     ..K:I.L:.cL:..L:
2401eea8:	3a4d2930 3a4d8c88 3a4df010 3a4e53c8     0)M:..M:..M:.SN:
2401eeb8:	3a4eb7b0 3a4f1bc8 3a4f8012 3a4fe48b     ..N:..O:..O:..O:
2401eec8:	3a504935 3a50ae10 3a51131c 3a517859     5IP:..P:..Q:YxQ:
2401eed8:	3a51ddc7 3a524366 3a52a936 3a530f37     ..Q:fCR:6.R:7.S:
2401eee8:	3a53756a 3a53dbce 3a544264 3a54a92c     juS:..S:dBT:,.T:
2401eef8:	3a551025 3a557750 3a55dead 3a56463d     %.U:PwU:..U:=FV:
2401ef08:	3a56adfe 3a5715f1 3a577e17 3a57e670     ..V:..W:.~W:p.W:
2401ef18:	3a584efb 3a58b7b8 3a5920a8 3a5989cb     .NX:..X:. Y:..Y:
2401ef28:	3a59f321 3a5a5caa 3a5ac666 3a5b3055     !.Y:.\Z:f.Z:U0[:
2401ef38:	3a5b9a78 3a5c04ce 3a5c6f57 3a5cda14     x.[:..\:Wo\:..\:
2401ef48:	3a5d4505 3a5db029 3a5e1b82 3a5e870e     .E]:).]:..^:..^:
2401ef58:	3a5ef2ce 3a5f5ec3 3a5fcaec 3a603749     ..^:.^_:.._:I7`:
2401ef68:	3a60a3db 3a6110a1 3a617d9c 3a61eacc     ..`:..a:.}a:..a:
2401ef78:	3a625830 3a62c5ca 3a633398 3a63a19c     0Xb:..b:.3c:..c:
2401ef88:	3a640fd5 3a647e44 3a64ece7 3a655bc1     ..d:D~d:..d:.[e:
2401ef98:	3a65cad0 3a663a15 3a66a990 3a671941     ..e:.:f:..f:A.g:
2401efa8:	3a678927 3a67f944 3a686998 3a68da21     '.g:D.g:.ih:!.h:
2401efb8:	3a694ae2 3a69bbd8 3a6a2d06 3a6a9e6a     .Ji:..i:.-j:j.j:
2401efc8:	3a6b1006 3a6b81d8 3a6bf3e1 3a6c6622     ..k:..k:..k:"fl:
2401efd8:	3a6cd89a 3a6d4b49 3a6dbe30 3a6e314e     ..l:IKm:0.m:N1n:
2401efe8:	3a6ea4a4 3a6f1832 3a6f8bf9 3a6ffff7     ..n:2.o:..o:..o:
2401eff8:	3a70742d 3a70e89b 3a715d42 3a71d222     -tp:..p:B]q:".q:
2401f008:	3a72473a 3a72bc8a 3a733214 3a73a7d6     :Gr:..r:.2s:..s:
2401f018:	3a741dd2 3a749406 3a750a74 3a75811b     ..t:..t:t.u:..u:
2401f028:	3a75f7fc 3a766f16 3a76e66a 3a775df7     ..u:.ov:j.v:.]w:
2401f038:	3a77d5bf 3a784dc0 3a78c5fc 3a793e72     ..w:.Mx:..x:r>y:
2401f048:	3a79b722 3a7a300c 3a7aa931 3a7b2291     ".y:.0z:1.z:."{:
2401f058:	3a7b9c2c 3a7c1601 3a7c9012 3a7d0a5d     ,.{:..|:..|:].}:
2401f068:	3a7d84e4 3a7dffa6 3a7e7aa4 3a7ef5dd     ..}:..}:.z~:..~:
2401f078:	3a7f7151 3a7fed02 3a803477 3a80728b     Qq.:...:w4.:.r.:
2401f088:	3a80b0be 3a80ef0e 3a812d7d 3a816c09     ...:...:}-.:.l.:
2401f098:	3a81aab5 3a81e97e 3a822866 3a82676c     ...:~..:f(.:lg.:
2401f0a8:	3a82a691 3a82e5d4 3a832536 3a8364b7     ...:...:6%.:.d.:
2401f0b8:	3a83a456 3a83e415 3a8423f2 3a8463ee     V..:...:.#.:.c.:
2401f0c8:	3a84a409 3a84e443 3a85249c 3a856515     ...:C..:.$.:.e.:
2401f0d8:	3a85a5ac 3a85e663 3a862739 3a86682f     ...:c..:9'.:/h.:
2401f0e8:	3a86a944 3a86ea78 3a872bcc 3a876d40     D..:x..:.+.:@m.:
2401f0f8:	3a87aed3 3a87f087 3a88325a 3a88744c     ...:...:Z2.:Lt.:
2401f108:	3a88b65f 3a88f892 3a893ae5 3a897d58     _..:...:.:.:X}.:
2401f118:	3a89bfeb 3a8a029e 3a8a4572 3a8a8866     ...:...:rE.:f..:
2401f128:	3a8acb7b 3a8b0eb0 3a8b5205 3a8b957b     {..:...:.R.:{..:
2401f138:	3a8bd912 3a8c1cc9 3a8c60a2 3a8ca49b     ...:...:.`.:...:
2401f148:	3a8ce8b5 3a8d2cf0 3a8d714c 3a8db5c9     ...:.,.:Lq.:...:
2401f158:	3a8dfa67 3a8e3f27 3a8e8408 3a8ec90a     g..:'?.:...:...:
2401f168:	3a8f0e2d 3a8f5372 3a8f98d9 3a8fde61     -..:rS.:...:a..:
2401f178:	3a90240b 3a9069d7 3a90afc4 3a90f5d3     .$.:.i.:...:...:
2401f188:	3a913c05 3a918258 3a91c8cd 3a920f64     .<.:X..:...:d..:
2401f198:	3a92561e 3a929cfa 3a92e3f8 3a932b18     .V.:...:...:.+.:
2401f1a8:	3a93725b 3a93b9c1 3a940149 3a9448f3     [r.:...:I..:.H.:
2401f1b8:	3a9490c1 3a94d8b1 3a9520c4 3a9568f9     ...:...:. .:.h.:
2401f1c8:	3a95b152 3a95f9ce 3a96426d 3a968b2f     R..:...:mB.:/..:
2401f1d8:	3a96d414 3a971d1d 3a976649 3a97af98     ...:...:If.:...:
2401f1e8:	3a97f90b 3a9842a2 3a988c5c 3a98d63a     ...:.B.:\..::..:
2401f1f8:	3a99203b 3a996a61 3a99b4aa 3a99ff17     ; .:aj.:...:...:
2401f208:	3a9a49a9 3a9a945e 3a9adf38 3a9b2a35     .I.:^..:8..:5*.:
2401f218:	3a9b7558 3a9bc09e 3a9c0c09 3a9c5799     Xu.:...:...:.W.:
2401f228:	3a9ca34d 3a9cef26 3a9d3b23 3a9d8745     M..:&..:#;.:E..:
2401f238:	3a9dd38c 3a9e1ff9 3a9e6c8a 3a9eb940     ...:...:.l.:@..:
2401f248:	3a9f061b 3a9f531c 3a9fa041 3a9fed8d     ...:.S.:A..:...:
2401f258:	3aa03afd 3aa08893 3aa0d64f 3aa12430     .:.:...:O..:0$.:
2401f268:	3aa17237 3aa1c064 3aa20eb7 3aa25d2f     7r.:d..:...:/].:
2401f278:	3aa2abce 3aa2fa92 3aa3497d 3aa3988e     ...:...:}I.:...:
2401f288:	3aa3e7c5 3aa43723 3aa486a7 3aa4d652     ...:#7.:...:R..:
2401f298:	3aa52623 3aa5761b 3aa5c639 3aa6167e     #&.:.v.:9..:~..:
2401f2a8:	3aa666eb 3aa6b77e 3aa70838 3aa75919     .f.:~..:8..:.Y.:
2401f2b8:	3aa7aa21 3aa7fb51 3aa84ca8 3aa89e26     !..:Q..:.L.:&..:
2401f2c8:	3aa8efcc 3aa94199 3aa9938e 3aa9e5ab     ...:.A.:...:...:
2401f2d8:	3aaa37ef 3aaa8a5b 3aaadcf0 3aab2fac     .7.:[..:...:./.:
2401f2e8:	3aab8290 3aabd59c 3aac28d1 3aac7c2d     ...:...:.(.:-|.:
2401f2f8:	3aaccfb3 3aad2360 3aad7736 3aadcb35     ...:`#.:6w.:5..:
2401f308:	3aae1f5c 3aae73ad 3aaec826 3aaf1cc7     \..:.s.:&..:...:
2401f318:	3aaf7192 3aafc686 3ab01ba3 3ab070e9     .q.:...:...:.p.:
2401f328:	3ab0c659 3ab11bf2 3ab171b4 3ab1c7a0     Y..:...:.q.:...:
2401f338:	3ab21db6 3ab273f5 3ab2ca5e 3ab320f1     ...:.s.:^..:. .:
2401f348:	3ab377ad 3ab3ce94 3ab425a5 3ab47ce0     .w.:...:.%.:.|.:
2401f358:	3ab4d445 3ab52bd4 3ab5838e 3ab5db73     E..:.+.:...:s..:
2401f368:	3ab63382 3ab68bbb 3ab6e420 3ab73caf     .3.:...: ..:.<.:
2401f378:	3ab79569 3ab7ee4e 3ab8475e 3ab8a099     i..:N..:^G.:...:
2401f388:	3ab8f9ff 3ab95391 3ab9ad4e 3aba0736     ...:.S.:N..:6..:
2401f398:	3aba614a 3ababb8a 3abb15f5 3abb708c     Ja.:...:...:.p.:
2401f3a8:	3abbcb4f 3abc263e 3abc8159 3abcdca0     O..:>&.:Y..:...:
2401f3b8:	3abd3813 3abd93b2 3abdef7e 3abe4b77     .8.:...:~..:wK.:
2401f3c8:	3abea79b 3abf03ed 3abf606b 3abfbd16     ...:...:k`.:...:
2401f3d8:	3ac019ee 3ac076f3 3ac0d425 3ac13183     ...:.v.:%..:.1.:
2401f3e8:	3ac18f10 3ac1ecc9 3ac24ab0 3ac2a8c4     ...:...:.J.:...:
2401f3f8:	3ac30706 3ac36576 3ac3c413 3ac422de     ...:ve.:...:.".:
2401f408:	3ac481d7 3ac4e0fe 3ac54053 3ac59fd6     ...:...:S@.:...:
2401f418:	3ac5ff88 3ac65f67 3ac6bf75 3ac71fb2     ...:g_.:u..:...:
2401f428:	3ac7801d 3ac7e0b7 3ac84180 3ac8a278     ...:...:.A.:x..:
2401f438:	3ac9039e 3ac964f4 3ac9c679 3aca282d     ...:.d.:y..:-(.:
2401f448:	3aca8a10 3acaec23 3acb4e65 3acbb0d7     ...:#..:eN.:...:
2401f458:	3acc1378 3acc7649 3accd94a 3acd3c7b     x..:Iv.:J..:{<.:
2401f468:	3acd9fdc 3ace036d 3ace672f 3acecb20     ...:m..:/g.: ..:
2401f478:	3acf2f42 3acf9395 3acff818 3ad05ccc     B/.:...:...:.\.:
2401f488:	3ad0c1b0 3ad126c6 3ad18c0c 3ad1f183     ...:.&.:...:...:
2401f498:	3ad2572c 3ad2bd06 3ad32311 3ad3894d     ,W.:...:.#.:M..:
2401f4a8:	3ad3efbb 3ad4565b 3ad4bd2c 3ad5242f     ...:[V.:,..:/$.:
2401f4b8:	3ad58b64 3ad5f2cb 3ad65a64 3ad6c22f     d..:...:dZ.:/..:
2401f4c8:	3ad72a2c 3ad7925c 3ad7fabe 3ad86353     ,*.:\..:...:Sc.:
2401f4d8:	3ad8cc1a 3ad93514 3ad99e41 3ada07a1     ...:.5.:A..:...:
2401f4e8:	3ada7134 3adadafa 3adb44f3 3adbaf20     4q.:...:.D.: ..:
2401f4f8:	3adc1980 3adc8413 3adceeda 3add59d5     ...:...:...:.Y.:
2401f508:	3addc504 3ade3066 3ade9bfd 3adf07c7     ...:f0.:...:...:
2401f518:	3adf73c6 3adfdff9 3ae04c60 3ae0b8fc     .s.:...:`L.:...:
2401f528:	3ae125cd 3ae192d2 3ae2000c 3ae26d7b     .%.:...:...:{m.:
2401f538:	3ae2db1f 3ae348f8 3ae3b706 3ae4254a     ...:.H.:...:J%.:
2401f548:	3ae493c2 3ae50271 3ae57155 3ae5e06e     ...:q..:Uq.:n..:
2401f558:	3ae64fbe 3ae6bf43 3ae72efe 3ae79ef0     .O.:C..:...:...:
2401f568:	3ae80f17 3ae87f75 3ae8f00a 3ae960d5     ...:u..:...:.`.:
2401f578:	3ae9d1d6 3aea430e 3aeab47d 3aeb2623     ...:.C.:}..:#&.:
2401f588:	3aeb9800 3aec0a14 3aec7c60 3aeceee2     ...:...:`|.:...:
2401f598:	3aed619d 3aedd48e 3aee47b8 3aeebb19     .a.:...:.G.:...:
2401f5a8:	3aef2eb2 3aefa283 3af0168c 3af08acd     ...:...:...:...:
2401f5b8:	3af0ff47 3af173f9 3af1e8e3 3af25e06     G..:.s.:...:.^.:
2401f5c8:	3af2d362 3af348f6 3af3bec4 3af434ca     b..:.H.:...:.4.:
2401f5d8:	3af4ab0a 3af52183 3af59836 3af60f21     ...:.!.:6..:!..:
2401f5e8:	3af68647 3af6fda6 3af7753f 3af7ed12     G..:...:?u.:...:
2401f5f8:	3af8651e 3af8dd65 3af955e7 3af9cea2     .e.:e..:.U.:...:
2401f608:	3afa4798 3afac0c9 3afb3a34 3afbb3da     .G.:...:4:.:...:
2401f618:	3afc2dbb 3afca7d7 3afd222e 3afd9cc0     .-.:...:.".:...:
2401f628:	3afe178e 3afe9297 3aff0ddc 3aff895d     ...:...:...:]..:
2401f638:	3b00028c 3b004088 3b007ea3 3b00bcdb     ...;.@.;.~.;...;
2401f648:	3b00fb31 3b0139a5 3b017838 3b01b6e9     1..;.9.;8x.;...;
2401f658:	3b01f5b9 3b0234a6 3b0273b3 3b02b2dd     ...;.4.;.s.;...;
2401f668:	3b02f227 3b03318f 3b037115 3b03b0bb     '..;.1.;.q.;...;
2401f678:	3b03f07f 3b043062 3b047065 3b04b086     ...;b0.;ep.;...;
2401f688:	3b04f0c6 3b053125 3b0571a4 3b05b241     ...;%1.;.q.;A..;
2401f698:	3b05f2fe 3b0633da 3b0674d6 3b06b5f1     ...;.3.;.t.;...;
2401f6a8:	3b06f72c 3b073886 3b077a00 3b07bb9a     ,..;.8.;.z.;...;
2401f6b8:	3b07fd53 3b083f2d 3b088126 3b08c33f     S..;-?.;&..;?..;
2401f6c8:	3b090578 3b0947d1 3b098a4a 3b09cce4     x..;.G.;J..;...;
2401f6d8:	3b0a0f9d 3b0a5277 3b0a9572 3b0ad88d     ...;wR.;r..;...;
2401f6e8:	3b0b1bc8 3b0b5f24 3b0ba2a0 3b0be63d     ...;$_.;...;=..;
2401f6f8:	3b0c29fb 3b0c6dda 3b0cb1d9 3b0cf5fa     .).;.m.;...;...;
2401f708:	3b0d3a3b 3b0d7e9e 3b0dc322 3b0e07c6     ;:.;.~.;"..;...;
2401f718:	3b0e4c8c 3b0e9174 3b0ed67d 3b0f1ba7     .L.;t..;}..;...;
2401f728:	3b0f60f2 3b0fa65f 3b0febee 3b10319f     .`.;_..;...;.1.;
2401f738:	3b107771 3b10bd65 3b11037b 3b1149b3     qw.;e..;{..;.I.;
2401f748:	3b11900d 3b11d689 3b121d27 3b1263e7     ...;...;'..;.c.;
2401f758:	3b12aac9 3b12f1ce 3b1338f5 3b13803f     ...;...;.8.;?..;
2401f768:	3b13c7ab 3b140f3a 3b1456ec 3b149ec0     ...;:..;.V.;...;
2401f778:	3b14e6b7 3b152ed0 3b15770d 3b15bf6d     ...;...;.w.;m..;
2401f788:	3b1607ef 3b165095 3b16995e 3b16e24a     ...;.P.;^..;J..;
2401f798:	3b172b5a 3b17748d 3b17bde3 3b18075d     Z+.;.t.;...;]..;
2401f7a8:	3b1850fb 3b189abc 3b18e4a1 3b192ea9     .P.;...;...;...;
2401f7b8:	3b1978d6 3b19c326 3b1a0d9a 3b1a5833     .x.;&..;...;3X.;
2401f7c8:	3b1aa2ef 3b1aedd0 3b1b38d5 3b1b83fe     ...;...;.8.;...;
2401f7d8:	3b1bcf4c 3b1c1abe 3b1c6655 3b1cb210     L..;...;Uf.;...;
2401f7e8:	3b1cfdf0 3b1d49f5 3b1d961e 3b1de26d     ...;.I.;...;m..;
2401f7f8:	3b1e2ee0 3b1e7b78 3b1ec836 3b1f1518     ...;x{.;6..;...;
2401f808:	3b1f6220 3b1faf4d 3b1ffca0 3b204a18      b.;M..;...;.J ;
2401f818:	3b2097b5 3b20e578 3b213361 3b21816f     .. ;x. ;a3!;o.!;
2401f828:	3b21cfa4 3b221dfe 3b226c7e 3b22bb24     ..!;..";~l";$.";
2401f838:	3b2309f0 3b2358e2 3b23a7fb 3b23f739     ..#;.X#;..#;9.#;
2401f848:	3b24469f 3b24962a 3b24e5dc 3b2535b5     .F$;*.$;..$;.5%;
2401f858:	3b2585b4 3b25d5db 3b262628 3b26769b     ..%;..%;(&&;.v&;
2401f868:	3b26c736 3b2717f8 3b2768e1 3b27b9f1     6.&;..';.h';..';
2401f878:	3b280b28 3b285c87 3b28ae0d 3b28ffbb     (.(;.\(;..(;..(;
2401f888:	3b295190 3b29a38c 3b29f5b1 3b2a47fd     .Q);..);..);.G*;
2401f898:	3b2a9a71 3b2aed0d 3b2b3fd1 3b2b92bd     q.*;..*;.?+;..+;
2401f8a8:	3b2be5d1 3b2c390e 3b2c8c72 3b2ce000     ..+;.9,;r.,;..,;
2401f8b8:	3b2d33b5 3b2d8793 3b2ddb9a 3b2e2fc9     .3-;..-;..-;./.;
2401f8c8:	3b2e8422 3b2ed8a3 3b2f2d4c 3b2f821f     "..;...;L-/;../;
2401f8d8:	3b2fd71b 3b302c41 3b30818f 3b30d707     ../;A,0;..0;..0;
2401f8e8:	3b312ca8 3b318272 3b31d866 3b322e84     .,1;r.1;f.1;..2;
2401f8f8:	3b3284cb 3b32db3d 3b3331d8 3b33889d     ..2;=.2;.13;..3;
2401f908:	3b33df8c 3b3436a5 3b348de8 3b34e556     ..3;.64;..4;V.4;
2401f918:	3b353ced 3b3594b0 3b35ec9c 3b3644b4     .<5;..5;..5;.D6;
2401f928:	3b369cf6 3b36f562 3b374dfa 3b37a6bc     ..6;b.6;.M7;..7;
2401f938:	3b37ffaa 3b3858c2 3b38b206 3b390b75     ..7;.X8;..8;u.9;
2401f948:	3b39650f 3b39bed5 3b3a18c6 3b3a72e2     .e9;..9;..:;.r:;
2401f958:	3b3acd2a 3b3b279e 3b3b823e 3b3bdd0a     *.:;.';;>.;;..;;
2401f968:	3b3c3801 3b3c9325 3b3cee74 3b3d49f0     .8<;%.<;t.<;.I=;
2401f978:	3b3da599 3b3e016d 3b3e5d6e 3b3eb99c     ..=;m.>;n]>;..>;
2401f988:	3b3f15f6 3b3f727d 3b3fcf31 3b402c12     ..?;}r?;1.?;.,@;
2401f998:	3b408920 3b40e65a 3b4143c2 3b41a157      .@;Z.@;.CA;W.A;
2401f9a8:	3b41ff1a 3b425d0a 3b42bb27 3b431972     ..A;.]B;'.B;r.C;
2401f9b8:	3b4377ea 3b43d691 3b443565 3b449467     .wC;..C;e5D;g.D;
2401f9c8:	3b44f397 3b4552f5 3b45b281 3b46123c     ..D;.RE;..E;<.F;
2401f9d8:	3b467225 3b46d23c 3b473282 3b4792f7     %rF;<.F;.2G;..G;
2401f9e8:	3b47f39a 3b48546c 3b48b56d 3b49169d     ..G;lTH;m.H;..I;
2401f9f8:	3b4977fc 3b49d98a 3b4a3b47 3b4a9d34     .wI;..I;G;J;4.J;
2401fa08:	3b4aff50 3b4b619b 3b4bc416 3b4c26c1     P.J;.aK;..K;.&L;
2401fa18:	3b4c899c 3b4ceca6 3b4d4fe1 3b4db34b     ..L;..L;.OM;K.M;
2401fa28:	3b4e16e6 3b4e7ab1 3b4edeac 3b4f42d8     ..N;.zN;..N;.BO;
2401fa38:	3b4fa734 3b500bc1 3b50707e 3b50d56c     4.O;..P;~pP;l.P;
2401fa48:	3b513a8b 3b519fdb 3b52055c 3b526b0f     .:Q;..Q;\.R;.kR;
2401fa58:	3b52d0f2 3b533707 3b539d4d 3b5403c5     ..R;.7S;M.S;..T;
2401fa68:	3b546a6e 3b54d14a 3b553857 3b559f95     njT;J.T;W8U;..U;
2401fa78:	3b560706 3b566ea9 3b56d67e 3b573e85     ..V;.nV;~.V;.>W;
2401fa88:	3b57a6bf 3b580f2b 3b5877ca 3b58e09c     ..W;+.X;.wX;..X;
2401fa98:	3b5949a0 3b59b2d7 3b5a1c41 3b5a85de     .IY;..Y;A.Z;..Z;
2401faa8:	3b5aefae 3b5b59b1 3b5bc3e8 3b5c2e52     ..Z;.Y[;..[;R.\;
2401fab8:	3b5c98f0 3b5d03c1 3b5d6ec6 3b5dd9ff     ..\;..];.n];..];
2401fac8:	3b5e456c 3b5eb10d 3b5f1ce2 3b5f88eb     lE^;..^;.._;.._;
2401fad8:	3b5ff528 3b60619a 3b60ce41 3b613b1c     (._;.a`;A.`;.;a;
2401fae8:	3b61a82b 3b621570 3b6282e9 3b62f098     +.a;p.b;..b;..b;
2401faf8:	3b635e7b 3b63cc94 3b643ae2 3b64a966     {^c;..c;.:d;f.d;
2401fb08:	3b65181f 3b65870d 3b65f631 3b66658c     ..e;..e;1.e;.ef;
2401fb18:	3b66d51c 3b6744e2 3b67b4de 3b682510     ..f;.Dg;..g;.%h;
2401fb28:	3b689579 3b690618 3b6976ee 3b69e7fa     y.h;..i;.vi;..i;
2401fb38:	3b6a593e 3b6acab8 3b6b3c68 3b6bae50     >Yj;..j;h<k;P.k;
2401fb48:	3b6c2070 3b6c92c6 3b6d0554 3b6d7819     p l;..l;T.m;.xm;
2401fb58:	3b6deb16 3b6e5e4a 3b6ed1b6 3b6f455a     ..m;J^n;..n;ZEo;
2401fb68:	3b6fb937 3b702d4b 3b70a197 3b71161c     7.o;K-p;..p;..q;
2401fb78:	3b718ad9 3b71ffcf 3b7274fd 3b72ea64     ..q;..q;.tr;d.r;
2401fb88:	3b736004 3b73d5dd 3b744bef 3b74c23a     .`s;..s;.Kt;:.t;
2401fb98:	3b7538bf 3b75af7d 3b762674 3b769da5     .8u;}.u;t&v;..v;
2401fba8:	3b77150f 3b778cb4 3b780492 3b787cab     ..w;..w;..x;.|x;
2401fbb8:	3b78f4fd 3b796d8a 3b79e651 3b7a5f53     ..x;.my;Q.y;S_z;
2401fbc8:	3b7ad88f 3b7b5206 3b7bcbb8 3b7c45a5     ..z;.R{;..{;.E|;
2401fbd8:	3b7cbfcd 3b7d3a30 3b7db4ce 3b7e2fa8     ..|;0:};..};./~;
2401fbe8:	3b7eaabd 3b7f260d 3b7fa19a 3b800eb1     ..~;.&.;...;...;
2401fbf8:	3b804cb3 3b808ad3 3b80c911 3b81076e     .L.;...;...;n..;
2401fc08:	3b8145e8 3b818481 3b81c338 3b82020d     .E.;...;8..;...;
2401fc18:	3b824101 3b828014 3b82bf45 3b82fe94     .A.;...;E..;...;
2401fc28:	3b833e02 3b837d8f 3b83bd3b 3b83fd05     .>.;.}.;;..;...;
2401fc38:	3b843cef 3b847cf7 3b84bd1e 3b84fd65     .<.;.|.;...;e..;
2401fc48:	3b853dca 3b857e4f 3b85bef3 3b85ffb6     .=.;O~.;...;...;
2401fc58:	3b864099 3b86819b 3b86c2bc 3b8703fd     .@.;...;...;...;
2401fc68:	3b87455e 3b8786de 3b87c87e 3b880a3e     ^E.;...;~..;>..;
2401fc78:	3b884c1e 3b888e1d 3b88d03d 3b89127c     .L.;...;=..;|..;
2401fc88:	3b8954dc 3b89975c 3b89d9fb 3b8a1cbc     .T.;\..;...;...;
2401fc98:	3b8a5f9c 3b8aa29d 3b8ae5be 3b8b2900     ._.;...;...;.).;
2401fca8:	3b8b6c63 3b8bafe6 3b8bf389 3b8c374e     cl.;...;...;N7.;
2401fcb8:	3b8c7b33 3b8cbf39 3b8d0361 3b8d47a9     3{.;9..;a..;.G.;
2401fcc8:	3b8d8c12 3b8dd09c 3b8e1548 3b8e5a14     ...;...;H..;.Z.;
2401fcd8:	3b8e9f02 3b8ee412 3b8f2943 3b8f6e95     ...;...;C).;.n.;
2401fce8:	3b8fb409 3b8ff99f 3b903f56 3b90852f     ...;...;V?.;/..;
2401fcf8:	3b90cb2a 3b911147 3b915785 3b919de6     *..;G..;.W.;...;
2401fd08:	3b91e469 3b922b0e 3b9271d5 3b92b8bf     i..;.+.;.q.;...;
2401fd18:	3b92ffca 3b9346f8 3b938e49 3b93d5bc     ...;.F.;I..;...;
2401fd28:	3b941d52 3b94650b 3b94ace6 3b94f4e4     R..;.e.;...;...;
2401fd38:	3b953d04 3b958548 3b95cdaf 3b961639     .=.;H..;...;9..;
2401fd48:	3b965ee6 3b96a7b6 3b96f0a9 3b9739c0     .^.;...;...;.9.;
2401fd58:	3b9782fa 3b97cc58 3b9815d9 3b985f7d     ...;X..;...;}_.;
2401fd68:	3b98a946 3b98f332 3b993d42 3b998775     F..;2..;B=.;u..;
2401fd78:	3b99d1cd 3b9a1c49 3b9a66e8 3b9ab1ac     ...;I..;.f.;...;
2401fd88:	3b9afc94 3b9b47a1 3b9b92d1 3b9bde26     ...;.G.;...;&..;
2401fd98:	3b9c29a0 3b9c753e 3b9cc101 3b9d0ce8     .).;>u.;...;...;
2401fda8:	3b9d58f4 3b9da525 3b9df17b 3b9e3df6     .X.;%..;{..;.=.;
2401fdb8:	3b9e8a96 3b9ed75b 3b9f2445 3b9f7155     ...;[..;E$.;Uq.;
2401fdc8:	3b9fbe89 3ba00be3 3ba05963 3ba0a708     ...;...;cY.;...;
2401fdd8:	3ba0f4d3 3ba142c3 3ba190d9 3ba1df15     ...;.B.;...;...;
2401fde8:	3ba22d77 3ba27bff 3ba2caad 3ba31980     w-.;.{.;...;...;
2401fdf8:	3ba3687b 3ba3b79b 3ba406e1 3ba4564e     {h.;...;...;NV.;
2401fe08:	3ba4a5e2 3ba4f59c 3ba5457d 3ba59584     ...;...;}E.;...;
2401fe18:	3ba5e5b2 3ba63607 3ba68683 3ba6d725     ...;.6.;...;%..;
2401fe28:	3ba727ef 3ba778e0 3ba7c9f8 3ba81b37     .'.;.x.;...;7..;
2401fe38:	3ba86c9e 3ba8be2c 3ba90fe2 3ba961bf     .l.;,..;...;.a.;
2401fe48:	3ba9b3c4 3baa05f1 3baa5845 3baaaac1     ...;...;EX.;...;
2401fe58:	3baafd65 3bab5031 3baba326 3babf642     e..;1P.;&..;B..;
2401fe68:	3bac4987 3bac9cf4 3bacf089 3bad4447     .I.;...;...;GD.;
2401fe78:	3bad982e 3badec3d 3bae4074 3bae94d5     ...;=..;t@.;...;
2401fe88:	3baee95e 3baf3e11 3baf92ec 3bafe7f1     ^..;.>.;...;...;
2401fe98:	3bb03d1e 3bb09275 3bb0e7f5 3bb13d9f     .=.;u..;...;.=.;
2401fea8:	3bb19372 3bb1e96f 3bb23f95 3bb295e5     r..;o..;.?.;...;
2401feb8:	3bb2ec5f 3bb34302 3bb399d0 3bb3f0c8     _..;.C.;...;...;
2401fec8:	3bb447e9 3bb49f35 3bb4f6ac 3bb54e4c     .G.;5..;...;LN.;
2401fed8:	3bb5a617 3bb5fe0d 3bb6562d 3bb6ae78     ...;...;-V.;x..;
2401fee8:	3bb706ed 3bb75f8e 3bb7b859 3bb8114f     ...;._.;Y..;O..;
2401fef8:	3bb86a71 3bb8c3bd 3bb91d35 3bb976d8     qj.;...;5..;.v.;
2401ff08:	3bb9d0a7 3bba2aa1 3bba84c6 3bbadf17     ...;.*.;...;...;
2401ff18:	3bbb3994 3bbb943d 3bbbef12 3bbc4a13     .9.;=..;...;.J.;
2401ff28:	3bbca53f 3bbd0098 3bbd5c1d 3bbdb7cf     ?..;...;.\.;...;
2401ff38:	3bbe13ad 3bbe6fb7 3bbecbee 3bbf2851     ...;.o.;...;Q(.;
2401ff48:	3bbf84e2 3bbfe19f 3bc03e89 3bc09ba0     ...;...;.>.;...;
2401ff58:	3bc0f8e4 3bc15655 3bc1b3f4 3bc211c0     ...;UV.;...;...;
2401ff68:	3bc26fb9 3bc2cde0 3bc32c34 3bc38ab6     .o.;...;4,.;...;
2401ff78:	3bc3e966 3bc44844 3bc4a74f 3bc50689     f..;DH.;O..;...;
2401ff88:	3bc565f1 3bc5c587 3bc6254b 3bc6853d     .e.;...;K%.;=..;
2401ff98:	3bc6e55f 3bc745ae 3bc7a62c 3bc806d9     _..;.E.;,..;...;
2401ffa8:	3bc867b5 3bc8c8c0 3bc929fa 3bc98b62     .g.;...;.).;b..;
2401ffb8:	3bc9ecfa 3bca4ec2 3bcab0b8 3bcb12de     ...;.N.;...;...;
2401ffc8:	3bcb7534 3bcbd7b9 3bcc3a6e 3bcc9d52     4u.;...;n:.;R..;
2401ffd8:	3bcd0067 3bcd63ac 3bcdc720 3bce2ac5     g..;.c.; ..;.*.;
2401ffe8:	3bce8e9a 3bcef29f 3bcf56d5 3bcfbb3b     ...;...;.V.;;..;
2401fff8:	3bd01fd2 3bd0849a 3bd0e992 3bd14ebc     ...;...;...;.N.;
24020008:	3bd1b416 3bd219a2 3bd27f5e 3bd2e54c     ...;...;^..;L..;
24020018:	3bd34b6b 3bd3b1bc 3bd4183e 3bd47ef2     kK.;...;>..;.~.;
24020028:	3bd4e5d8 3bd54cef 3bd5b438 3bd61bb4     ...;.L.;8..;...;
24020038:	3bd68361 3bd6eb41 3bd75353 3bd7bb97     a..;A..;SS.;...;
24020048:	3bd8240e 3bd88cb8 3bd8f594 3bd95ea3     .$.;...;...;.^.;
24020058:	3bd9c7e5 3bda3159 3bda9b01 3bdb04dc     ...;Y1.;...;...;
24020068:	3bdb6eea 3bdbd92c 3bdc43a1 3bdcae4a     .n.;,..;.C.;J..;
24020078:	3bdd1926 3bdd8436 3bddef7a 3bde5af2     &..;6..;z..;.Z.;
24020088:	3bdec69e 3bdf327e 3bdf9e92 3be00adb     ...;~2.;...;...;
24020098:	3be07758 3be0e409 3be150ef 3be1be0a     Xw.;...;.P.;...;
240200a8:	3be22b5a 3be298df 3be30698 3be37487     Z+.;...;...;.t.;
240200b8:	3be3e2ab 3be45105 3be4bf94 3be52e58     ...;.Q.;...;X..;
240200c8:	3be59d52 3be60c82 3be67be8 3be6eb83     R..;...;.{.;...;
240200d8:	3be75b55 3be7cb5d 3be83b9b 3be8ac0f     U[.;]..;.;.;...;
240200e8:	3be91cba 3be98d9c 3be9feb4 3bea7002     ...;...;...;.p.;
240200f8:	3beae188 3beb5345 3bebc539 3bec3764     ...;ES.;9..;d7.;
24020108:	3beca9c6 3bed1c60 3bed8f31 3bee0239     ...;`..;1..;9..;
24020118:	3bee757a 3beee8f2 3bef5ca2 3befd08b     zu.;...;.\.;...;
24020128:	3bf044ab 3bf0b903 3bf12d94 3bf1a25e     .D.;...;.-.;^..;
24020138:	3bf21760 3bf28c9a 3bf3020e 3bf377ba     `..;...;...;.w.;
24020148:	3bf3ed9f 3bf463bd 3bf4da15 3bf550a6     ...;.c.;...;.P.;
24020158:	3bf5c770 3bf63e74 3bf6b5b1 3bf72d28     p..;t>.;...;(-.;
24020168:	3bf7a4d9 3bf81cc4 3bf894e9 3bf90d48     ...;...;...;H..;
24020178:	3bf985e2 3bf9feb6 3bfa77c4 3bfaf10d     ...;...;.w.;...;
24020188:	3bfb6a91 3bfbe450 3bfc5e49 3bfcd87e     .j.;P..;I^.;~..;
24020198:	3bfd52ee 3bfdcd99 3bfe487f 3bfec3a2     .R.;...;.H.;...;
240201a8:	3bff3eff 3bffba99 3c001b37 3c005940     .>.;...;7..<@Y.<
240201b8:	3c009766 3c00d5ab 3c01140e 3c01528f     f..<...<...<.R.<
240201c8:	3c01912e 3c01cfec 3c020ec8 3c024dc3     ...<...<...<.M.<
240201d8:	3c028cdc 3c02cc14 3c030b6a 3c034adf     ...<...<j..<.J.<
240201e8:	3c038a72 3c03ca25 3c0409f6 3c0449e6     r..<%..<...<.I.<
240201f8:	3c0489f5 3c04ca23 3c050a71 3c054add     ...<#..<q..<.J.<
24020208:	3c058b69 3c05cc14 3c060cde 3c064dc7     i..<...<...<.M.<
24020218:	3c068ed0 3c06cff9 3c071141 3c0752a8     ...<...<A..<.R.<
24020228:	3c079430 3c07d5d7 3c08179d 3c085984     0..<...<...<.Y.<
24020238:	3c089b8b 3c08ddb1 3c091ff8 3c09625f     ...<...<...<_b.<
24020248:	3c09a4e6 3c09e78d 3c0a2a54 3c0a6d3c     ...<...<T*.<<m.<
24020258:	3c0ab044 3c0af36c 3c0b36b5 3c0b7a1f     D..<l..<.6.<.z.<
24020268:	3c0bbda9 3c0c0154 3c0c4520 3c0c890d     ...<T..< E.<...<
24020278:	3c0ccd1a 3c0d1149 3c0d5598 3c0d9a09     ...<I..<.U.<...<
24020288:	3c0dde9b 3c0e234e 3c0e6822 3c0ead17     ...<N#.<"h.<...<
24020298:	3c0ef22e 3c0f3767 3c0f7cc1 3c0fc23c     ...<g7.<.|.<<..<
240202a8:	3c1007d9 3c104d98 3c109379 3c10d97b     ...<.M.<y..<{..<
240202b8:	3c111fa0 3c1165e6 3c11ac4f 3c11f2d9     ...<.e.<O..<...<
240202c8:	3c123986 3c128055 3c12c746 3c130e59     .9.<U..<F..<Y..<
240202d8:	3c13558f 3c139ce8 3c13e463 3c142c00     .U.<...<c..<.,.<
240202e8:	3c1473c1 3c14bba4 3c1503aa 3c154bd2     .s.<...<...<.K.<
240202f8:	3c15941e 3c15dc8d 3c16251f 3c166dd3     ...<...<.%.<.m.<
24020308:	3c16b6ac 3c16ffa7 3c1748c6 3c179208     ...<...<.H.<...<
24020318:	3c17db6e 3c1824f7 3c186ea4 3c18b874     n..<.$.<.n.<t..<
24020328:	3c190268 3c194c80 3c1996bc 3c19e11c     h..<.L.<...<...<
24020338:	3c1a2ba0 3c1a7648 3c1ac114 3c1b0c05     .+.<Hv.<...<...<
24020348:	3c1b5719 3c1ba252 3c1bedb0 3c1c3932     .W.<R..<...<29.<
24020358:	3c1c84d8 3c1cd0a4 3c1d1c93 3c1d68a8     ...<...<...<.h.<
24020368:	3c1db4e2 3c1e0140 3c1e4dc3 3c1e9a6c     ...<@..<.M.<l..<
24020378:	3c1ee739 3c1f342c 3c1f8144 3c1fce82     9..<,4.<D..<...<
24020388:	3c201be4 3c20696d 3c20b71b 3c2104ee     .. <mi <.. <..!<
24020398:	3c2152e7 3c21a106 3c21ef4b 3c223db5     .R!<..!<K.!<.="<
240203a8:	3c228c46 3c22dafd 3c2329d9 3c2378dc     F."<.."<.)#<.x#<
240203b8:	3c23c806 3c241755 3c2466cb 3c24b668     ..#<U.$<.f$<h.$<
240203c8:	3c25062b 3c255615 3c25a625 3c25f65c     +.%<.V%<%.%<\.%<
240203d8:	3c2646ba 3c26973f 3c26e7eb 3c2738be     .F&<?.&<..&<.8'<
240203e8:	3c2789b8 3c27dad9 3c282c22 3c287d92     ..'<..'<",(<.}(<
240203f8:	3c28cf29 3c2920e8 3c2972cf 3c29c4dd     ).(<. )<.r)<..)<
24020408:	3c2a1713 3c2a6971 3c2abbf7 3c2b0ea4     ..*<qi*<..*<..+<
24020418:	3c2b617a 3c2bb478 3c2c079e 3c2c5aec     za+<x.+<..,<.Z,<
24020428:	3c2cae63 3c2d0202 3c2d55c9 3c2da9b9     c.,<..-<.U-<..-<
24020438:	3c2dfdd2 3c2e5214 3c2ea67e 3c2efb11     ..-<.R.<~..<...<
24020448:	3c2f4fcd 3c2fa4b3 3c2ff9c1 3c304ef8     .O/<../<../<.N0<
24020458:	3c30a459 3c30f9e3 3c314f97 3c31a574     Y.0<..0<.O1<t.1<
24020468:	3c31fb7b 3c3251ab 3c32a805 3c32fe89     {.1<.Q2<..2<..2<
24020478:	3c335537 3c33ac0e 3c340310 3c345a3c     7U3<..3<..4<<Z4<
24020488:	3c34b192 3c350913 3c3560be 3c35b893     ..4<..5<.`5<..5<
24020498:	3c361093 3c3668bd 3c36c113 3c371993     ..6<.h6<..6<..7<
240204a8:	3c37723e 3c37cb13 3c382414 3c387d40     >r7<..7<.$8<@}8<
240204b8:	3c38d697 3c39301a 3c3989c7 3c39e3a0     ..8<.09<..9<..9<
240204c8:	3c3a3da5 3c3a97d5 3c3af231 3c3b4cb9     .=:<..:<1.:<.L;<
240204d8:	3c3ba76d 3c3c024c 3c3c5d58 3c3cb88f     m.;<L.<<X]<<..<<
240204e8:	3c3d13f3 3c3d6f83 3c3dcb40 3c3e2729     ..=<.o=<@.=<)'><
240204f8:	3c3e833e 3c3edf80 3c3f3bef 3c3f988a     >.><..><.;?<..?<
24020508:	3c3ff552 3c405247 3c40af6a 3c410cb9     R.?<GR@<j.@<..A<
24020518:	3c416a36 3c41c7df 3c4225b7 3c4283bb     6jA<..A<.%B<..B<
24020528:	3c42e1ed 3c43404d 3c439edb 3c43fd96     ..B<M@C<..C<..C<
24020538:	3c445c7f 3c44bb96 3c451adc 3c457a4f     .\D<..D<..E<OzE<
24020548:	3c45d9f1 3c4639c0 3c4699bf 3c46f9ec     ..E<.9F<..F<..F<
24020558:	3c475a47 3c47bad1 3c481b8a 3c487c72     GZG<..G<..H<r|H<
24020568:	3c48dd88 3c493ece 3c49a043 3c4a01e7     ..H<.>I<C.I<..J<
24020578:	3c4a63ba 3c4ac5bd 3c4b27ef 3c4b8a50     .cJ<..J<.'K<P.K<
24020588:	3c4bece2 3c4c4fa3 3c4cb294 3c4d15b4     ..K<.OL<..L<..M<
24020598:	3c4d7905 3c4ddc86 3c4e4037 3c4ea419     .yM<..M<7@N<..N<
240205a8:	3c4f082b 3c4f6c6d 3c4fd0e0 3c503583     +.O<mlO<..O<.5P<
240205b8:	3c509a58 3c50ff5d 3c516493 3c51c9fa     X.P<].P<.dQ<..Q<
240205c8:	3c522f92 3c52955b 3c52fb56 3c536182     ./R<[.R<V.R<.aS<
240205d8:	3c53c7e0 3c542e6f 3c54952f 3c54fc22     ..S<o.T</.T<".T<
240205e8:	3c556347 3c55ca9d 3c563225 3c5699e0     GcU<..U<%2V<..V<
240205f8:	3c5701cd 3c5769ec 3c57d23e 3c583ac2     ..W<.iW<>.W<.:X<
24020608:	3c58a379 3c590c62 3c59757f 3c59dece     y.X<b.Y<.uY<..Y<
24020618:	3c5a4850 3c5ab206 3c5b1bee 3c5b860a     PHZ<..Z<..[<..[<
24020628:	3c5bf059 3c5c5adc 3c5cc592 3c5d307c     Y.[<.Z\<..\<|0]<
24020638:	3c5d9b9a 3c5e06ec 3c5e7272 3c5ede2b     ..]<..^<rr^<+.^<
24020648:	3c5f4a19 3c5fb63c 3c602292 3c608f1d     .J_<<._<."`<..`<
24020658:	3c60fbdd 3c6168d2 3c61d5fb 3c624359     ..`<.ha<..a<YCb<
24020668:	3c62b0ec 3c631eb4 3c638cb1 3c63fae4     ..b<..c<..c<..c<
24020678:	3c64694c 3c64d7e9 3c6546bc 3c65b5c5     Lid<..d<.Fe<..e<
24020688:	3c662503 3c669477 3c670422 3c677402     .%f<w.f<".g<.tg<
24020698:	3c67e419 3c685466 3c68c4e9 3c6935a3     ..g<fTh<..h<.5i<
240206a8:	3c69a693 3c6a17ba 3c6a8918 3c6afaad     ..i<..j<..j<..j<
240206b8:	3c6b6c79 3c6bde7c 3c6c50b6 3c6cc328     ylk<|.k<.Pl<(.l<
240206c8:	3c6d35d1 3c6da8b1 3c6e1bca 3c6e8f1a     .5m<..m<..n<..n<
240206d8:	3c6f02a1 3c6f7661 3c6fea59 3c705e89     ..o<avo<Y.o<.^p<
240206e8:	3c70d2f1 3c714792 3c71bc6b 3c72317d     ..p<.Gq<k.q<}1r<
240206f8:	3c72a6c8 3c731c4b 3c739207 3c7407fd     ..r<K.s<..s<..t<
24020708:	3c747e2b 3c74f493 3c756b34 3c75e20e     +~t<..t<4ku<..u<
24020718:	3c765922 3c76d070 3c7747f8 3c77bfb9     "Yv<p.v<.Gw<..w<
24020728:	3c7837b5 3c78afea 3c79285a 3c79a104     .7x<..x<Z(y<..y<
24020738:	3c7a19e9 3c7a9308 3c7b0c62 3c7b85f7     ..z<..z<b.{<..{<
24020748:	3c7bffc6 3c7c79d1 3c7cf417 3c7d6e98     ..{<.y|<..|<.n}<
24020758:	3c7de954 3c7e644c 3c7edf7f 3c7f5aee     T.}<Ld~<..~<.Z.<
24020768:	3c7fd699 3c802940 3c806751 3c80a581     ...<@).<Qg.<...<
24020778:	3c80e3ce 3c81223a 3c8160c4 3c819f6c     ...<:".<.`.<l..<
24020788:	3c81de33 3c821d18 3c825c1b 3c829b3e     3..<...<.\.<>..<
24020798:	3c82da7e 3c8319dd 3c83595b 3c8398f8     ~..<...<[Y.<...<
240207a8:	3c83d8b4 3c84188e 3c845888 3c8498a0     ...<...<.X.<...<
240207b8:	3c84d8d7 3c85192e 3c8559a4 3c859a39     ...<...<.Y.<9..<
240207c8:	3c85daed 3c861bc0 3c865cb3 3c869dc6     ...<...<.\.<...<
240207d8:	3c86def8 3c872049 3c8761ba 3c87a34b     ...<I .<.a.<K..<
240207e8:	3c87e4fc 3c8826cc 3c8868bd 3c88aacd     ...<.&.<.h.<...<
240207f8:	3c88ecfe 3c892f4e 3c8971be 3c89b44f     ...<N/.<.q.<O..<
24020808:	3c89f700 3c8a39d1 3c8a7cc3 3c8abfd5     ...<.9.<.|.<...<
24020818:	3c8b0308 3c8b465b 3c8b89cf 3c8bcd63     ...<[F.<...<c..<
24020828:	3c8c1118 3c8c54ee 3c8c98e5 3c8cdcfd     ...<.T.<...<...<
24020838:	3c8d2136 3c8d658f 3c8daa0a 3c8deea7     6!.<.e.<...<...<
24020848:	3c8e3364 3c8e7843 3c8ebd43 3c8f0264     d3.<Cx.<C..<d..<
24020858:	3c8f47a7 3c8f8d0c 3c8fd292 3c901839     .G.<...<...<9..<
24020868:	3c905e03 3c90a3ee 3c90e9fc 3c91302b     .^.<...<...<+0.<
24020878:	3c91767c 3c91bcef 3c920385 3c924a3c     |v.<...<...<<J.<
24020888:	3c929116 3c92d813 3c931f31 3c936672     ...<...<1..<rf.<
24020898:	3c93add6 3c93f55c 3c943d05 3c9484d0     ...<\..<.=.<...<
240208a8:	3c94ccbf 3c9514d0 3c955d04 3c95a55b     ...<...<.].<[..<
240208b8:	3c95edd5 3c963673 3c967f33 3c96c817     ...<s6.<3..<...<
240208c8:	3c97111e 3c975a48 3c97a396 3c97ed07     ...<HZ.<...<...<
240208d8:	3c98369c 3c988055 3c98ca31 3c991431     .6.<U..<1..<1..<
240208e8:	3c995e55 3c99a89d 3c99f309 3c9a3d99     U^.<...<...<.=.<
240208f8:	3c9a884d 3c9ad326 3c9b1e22 3c9b6943     M..<&..<"..<Ci.<
24020908:	3c9bb488 3c9bfff2 3c9c4b81 3c9c9734     ...<...<.K.<4..<
24020918:	3c9ce30b 3c9d2f08 3c9d7b29 3c9dc76f     ...<./.<){.<o..<
24020928:	3c9e13da 3c9e606a 3c9ead1f 3c9ef9f9     ...<j`.<...<...<
24020938:	3c9f46f9 3c9f941e 3c9fe168 3ca02ed8     .F.<...<h..<...<
24020948:	3ca07c6d 3ca0ca28 3ca11809 3ca1660f     m|.<(..<...<.f.<
24020958:	3ca1b43b 3ca2028d 3ca25105 3ca29fa3     ;..<...<.Q.<...<
24020968:	3ca2ee67 3ca33d51 3ca38c61 3ca3db98     g..<Q=.<a..<...<
24020978:	3ca42af5 3ca47a79 3ca4ca23 3ca519f4     .*.<yz.<#..<...<
24020988:	3ca569eb 3ca5ba09 3ca60a4e 3ca65aba     .i.<...<N..<.Z.<
24020998:	3ca6ab4d 3ca6fc07 3ca74ce8 3ca79df0     M..<...<.L.<...<
240209a8:	3ca7ef20 3ca84077 3ca891f5 3ca8e39b      ..<w@.<...<...<
240209b8:	3ca93568 3ca9875d 3ca9d97a 3caa2bbe     h5.<]..<z..<.+.<
240209c8:	3caa7e2b 3caad0bf 3cab237b 3cab7660     +~.<...<{#.<`v.<
240209d8:	3cabc96c 3cac1ca1 3cac6ffe 3cacc384     l..<...<.o.<...<
240209e8:	3cad1732 3cad6b08 3cadbf08 3cae1330     2..<.k.<...<0..<
240209f8:	3cae6780 3caebbfa 3caf109d 3caf6568     .g.<...<...<he.<
24020a08:	3cafba5d 3cb00f7b 3cb064c2 3cb0ba32     ]..<{..<.d.<2..<
24020a18:	3cb10fcc 3cb1658f 3cb1bb7c 3cb21193     ...<.e.<|..<...<
24020a28:	3cb267d3 3cb2be3d 3cb314d1 3cb36b8f     .g.<=..<...<.k.<
24020a38:	3cb3c277 3cb41989 3cb470c5 3cb4c82c     w..<...<.p.<,..<
24020a48:	3cb51fbc 3cb57778 3cb5cf5e 3cb6276e     ...<xw.<^..<n'.<
24020a58:	3cb67fa9 3cb6d80f 3cb730a0 3cb7895c     ...<...<.0.<\..<
24020a68:	3cb7e242 3cb83b54 3cb89491 3cb8edf9     B..<T;.<...<...<
24020a78:	3cb9478d 3cb9a14c 3cb9fb37 3cba554d     .G.<L..<7..<MU.<
24020a88:	3cbaaf8e 3cbb09fc 3cbb6495 3cbbbf5a     ...<...<.d.<Z..<
24020a98:	3cbc1a4c 3cbc7569 3cbcd0b2 3cbd2c28     L..<iu.<...<(,.<
24020aa8:	3cbd87ca 3cbde399 3cbe3f94 3cbe9bbb     ...<...<.?.<...<
24020ab8:	3cbef80f 3cbf5490 3cbfb13e 3cc00e19     ...<.T.<>..<...<
24020ac8:	3cc06b21 3cc0c856 3cc125b8 3cc18347     !k.<V..<.%.<G..<
24020ad8:	3cc1e104 3cc23eee 3cc29d06 3cc2fb4b     ...<.>.<...<K..<
24020ae8:	3cc359be 3cc3b85e 3cc4172d 3cc4762a     .Y.<^..<-..<*v.<
24020af8:	3cc4d554 3cc534ad 3cc59434 3cc5f3e9     T..<.4.<4..<...<
24020b08:	3cc653cd 3cc6b3df 3cc71420 3cc7748f     .S.<...< ..<.t.<
24020b18:	3cc7d52d 3cc835fa 3cc896f6 3cc8f821     -..<.5.<...<!..<
24020b28:	3cc9597b 3cc9bb05 3cca1cbd 3cca7ea5     {Y.<...<...<.~.<
24020b38:	3ccae0bc 3ccb4303 3ccba57a 3ccc0820     ...<.C.<z..< ..<
24020b48:	3ccc6af6 3ccccdfc 3ccd3132 3ccd9499     .j.<...<21.<...<
24020b58:	3ccdf82f 3cce5bf6 3ccebfed 3ccf2414     /..<.[.<...<.$.<
24020b68:	3ccf886c 3ccfecf5 3cd051ae 3cd0b699     l..<...<.Q.<...<
24020b78:	3cd11bb4 3cd18100 3cd1e67d 3cd24c2c     ...<...<}..<,L.<
24020b88:	3cd2b20c 3cd3181d 3cd37e60 3cd3e4d4     ...<...<`~.<...<
24020b98:	3cd44b7a 3cd4b252 3cd5195b 3cd58097     zK.<R..<[..<...<
24020ba8:	3cd5e804 3cd64fa4 3cd6b776 3cd71f7b     ...<.O.<v..<{..<
24020bb8:	3cd787b1 3cd7f01b 3cd858b7 3cd8c185     ...<...<.X.<...<
24020bc8:	3cd92a87 3cd993bb 3cd9fd23 3cda66bd     .*.<...<#..<.f.<
24020bd8:	3cdad08b 3cdb3a8c 3cdba4c1 3cdc0f29     ...<.:.<...<)..<
24020be8:	3cdc79c4 3cdce493 3cdd4f96 3cddbacd     .y.<...<.O.<...<
24020bf8:	3cde2638 3cde91d7 3cdefdab 3cdf69b2     8&.<...<...<.i.<
24020c08:	3cdfd5ee 3ce0425e 3ce0af03 3ce11bdd     ...<^B.<...<...<
24020c18:	3ce188eb 3ce1f62f 3ce263a7 3ce2d154     ...</..<.c.<T..<
24020c28:	3ce33f37 3ce3ad4f 3ce41b9c 3ce48a1f     7?.<O..<...<...<
24020c38:	3ce4f8d7 3ce567c5 3ce5d6e9 3ce64643     ...<.g.<...<CF.<
24020c48:	3ce6b5d3 3ce72599 3ce79595 3ce805c7     ...<.%.<...<...<
24020c58:	3ce87630 3ce8e6cf 3ce957a5 3ce9c8b2     0v.<...<.W.<...<
24020c68:	3cea39f5 3ceaab70 3ceb1d21 3ceb8f0a     .9.<p..<!..<...<
24020c78:	3cec012a 3cec7381 3cece60f 3ced58d6     *..<.s.<...<.X.<
24020c88:	3cedcbd4 3cee3f09 3ceeb277 3cef261c     ...<.?.<w..<.&.<
24020c98:	3cef99fa 3cf00e10 3cf0825e 3cf0f6e4     ...<...<^..<...<
24020ca8:	3cf16ba4 3cf1e09b 3cf255cc 3cf2cb35     .k.<...<.U.<5..<
24020cb8:	3cf340d7 3cf3b6b3 3cf42cc7 3cf4a315     .@.<...<.,.<...<
24020cc8:	3cf5199c 3cf5905c 3cf60757 3cf67e8b     ...<\..<W..<.~.<
24020cd8:	3cf6f5f8 3cf76da0 3cf7e582 3cf85d9e     ...<.m.<...<.].<
24020ce8:	3cf8d5f4 3cf94e85 3cf9c750 3cfa4055     ...<.N.<P..<U@.<
24020cf8:	3cfab996 3cfb3311 3cfbacc7 3cfc26b8     ...<.3.<...<.&.<
24020d08:	3cfca0e4 3cfd1b4c 3cfd95ef 3cfe10cd     ...<L..<...<...<
24020d18:	3cfe8be7 3cff073d 3cff82cf 3cfffe9c     ...<=..<...<...<
24020d28:	3d003d53 3d007b76 3d00b9b7 3d00f816     S=.=v{.=...=...=
24020d38:	3d013694 3d017530 3d01b3ea 3d01f2c2     .6.=0u.=...=...=
24020d48:	3d0231ba 3d0270cf 3d02b004 3d02ef57     .1.=.p.=...=W..=
24020d58:	3d032ec8 3d036e59 3d03ae08 3d03edd6     ...=Yn.=...=...=
24020d68:	3d042dc3 3d046dd0 3d04adfb 3d04ee45     .-.=.m.=...=E..=
24020d78:	3d052eaf 3d056f38 3d05afe0 3d05f0a8     ...=8o.=...=...=
24020d88:	3d06318f 3d067295 3d06b3bb 3d06f501     .1.=.r.=...=...=
24020d98:	3d073666 3d0777eb 3d07b990 3d07fb55     f6.=.w.=...=U..=
24020da8:	3d083d39 3d087f3e 3d08c163 3d0903a7     9=.=>..=c..=...=
24020db8:	3d09460c 3d098891 3d09cb37 3d0a0dfd     .F.=...=7..=...=
24020dc8:	3d0a50e3 3d0a93e9 3d0ad711 3d0b1a58     .P.=...=...=X..=
24020dd8:	3d0b5dc1 3d0ba14a 3d0be4f4 3d0c28be     .].=J..=...=.(.=
24020de8:	3d0c6caa 3d0cb0b7 3d0cf4e4 3d0d3933     .l.=...=...=39.=
24020df8:	3d0d7da3 3d0dc234 3d0e06e6 3d0e4bba     .}.=4..=...=.K.=
24020e08:	3d0e90af 3d0ed5c6 3d0f1afe 3d0f6058     ...=...=...=X`.=
24020e18:	3d0fa5d3 3d0feb70 3d10312f 3d107710     ...=p..=/1.=.w.=
24020e28:	3d10bd13 3d110337 3d11497e 3d118fe7     ...=7..=~I.=...=
24020e38:	3d11d672 3d121d1f 3d1263ef 3d12aae1     r..=...=.c.=...=
24020e48:	3d12f1f5 3d13392c 3d138085 3d13c802     ...=,9.=...=...=
24020e58:	3d140fa0 3d145762 3d149f46 3d14e74e     ...=bW.=F..=N..=
24020e68:	3d152f78 3d1577c5 3d15c036 3d1608c9     x/.=.w.=6..=...=
24020e78:	3d165180 3d169a5a 3d16e358 3d172c79     .Q.=Z..=X..=y,.=
24020e88:	3d1775bd 3d17bf25 3d1808b1 3d185260     .u.=%..=...=`R.=
24020e98:	3d189c34 3d18e62b 3d193046 3d197a84     4..=+..=F0.=.z.=
24020ea8:	3d19c4e7 3d1a0f6e 3d1a5a1a 3d1aa4e9     ...=n..=.Z.=...=
24020eb8:	3d1aefdd 3d1b3af5 3d1b8632 3d1bd193     ...=.:.=2..=...=
24020ec8:	3d1c1d19 3d1c68c4 3d1cb493 3d1d0087     ...=.h.=...=...=
24020ed8:	3d1d4ca0 3d1d98de 3d1de541 3d1e31c9     .L.=...=A..=.1.=
24020ee8:	3d1e7e76 3d1ecb49 3d1f1841 3d1f655e     v~.=I..=A..=^e.=
24020ef8:	3d1fb2a0 3d200009 3d204d96 3d209b4a     ...=.. =.M =J. =
24020f08:	3d20e923 3d213722 3d218547 3d21d392     #. ="7!=G.!=..!=
24020f18:	3d222202 3d227099 3d22bf56 3d230e3a     .""=.p"=V."=:.#=
24020f28:	3d235d43 3d23ac74 3d23fbca 3d244b47     C]#=t.#=..#=GK$=
24020f38:	3d249aeb 3d24eab5 3d253aa6 3d258abe     ..$=..$=.:%=..%=
24020f48:	3d25dafd 3d262b63 3d267bf0 3d26cca4     ..%=c+&=.{&=..&=
24020f58:	3d271d7f 3d276e82 3d27bfac 3d2810fd     ..'=.n'=..'=..(=
24020f68:	3d286276 3d28b416 3d2905de 3d2957ce     vb(=..(=..)=.W)=
24020f78:	3d29a9e6 3d29fc25 3d2a4e8d 3d2aa11c     ..)=%.)=.N*=..*=
24020f88:	3d2af3d4 3d2b46b4 3d2b99bc 3d2becec     ..*=.F+=..+=..+=
24020f98:	3d2c4045 3d2c93c7 3d2ce771 3d2d3b43     E@,=..,=q.,=C;-=
24020fa8:	3d2d8f3f 3d2de363 3d2e37b0 3d2e8c26     ?.-=c.-=.7.=&..=
24020fb8:	3d2ee0c5 3d2f358d 3d2f8a7e 3d2fdf99     ...=.5/=~./=../=
24020fc8:	3d3034dd 3d308a4b 3d30dfe1 3d3135a2     .40=K.0=..0=.51=
24020fd8:	3d318b8c 3d31e1a0 3d3237de 3d328e46     ..1=..1=.72=F.2=
24020fe8:	3d32e4d8 3d333b94 3d33927a 3d33e98a     ..2=.;3=z.3=..3=
24020ff8:	3d3440c4 3d349829 3d34efb9 3d354773     .@4=).4=..4=sG5=
24021008:	3d359f58 3d35f767 3d364fa1 3d36a806     X.5=g.5=.O6=..6=
24021018:	3d370096 3d375951 3d37b238 3d380b49     ..7=QY7=8.7=I.8=
24021028:	3d386486 3d38bdee 3d391782 3d397141     .d8=..8=..9=Aq9=
24021038:	3d39cb2c 3d3a2542 3d3a7f84 3d3ad9f3     ,.9=B%:=..:=..:=
24021048:	3d3b348d 3d3b8f53 3d3bea46 3d3c4564     .4;=S.;=F.;=dE<=
24021058:	3d3ca0af 3d3cfc26 3d3d57ca 3d3db39a     ..<=&.<=.W==..==
24021068:	3d3e0f97 3d3e6bc1 3d3ec818 3d3f249b     ..>=.k>=..>=.$?=
24021078:	3d3f814c 3d3fde29 3d403b34 3d40986c     L.?=).?=4;@=l.@=
24021088:	3d40f5d1 3d415364 3d41b124 3d420f12     ..@=dSA=$.A=..B=
24021098:	3d426d2d 3d42cb77 3d4329ee 3d438893     -mB=w.B=.)C=..C=
240210a8:	3d43e766 3d444667 3d44a597 3d4504f4     f.C=gFD=..D=..E=
240210b8:	3d456481 3d45c43b 3d462424 3d46843c     .dE=;.E=$$F=<.F=
240210c8:	3d46e483 3d4744f8 3d47a59d 3d480670     ..F=.DG=..G=p.H=
240210d8:	3d486773 3d48c8a4 3d492a05 3d498b96     sgH=..H=.*I=..I=
240210e8:	3d49ed56 3d4a4f45 3d4ab164 3d4b13b3     V.I=EOJ=d.J=..K=
240210f8:	3d4b7632 3d4bd8e0 3d4c3bbf 3d4c9ecd     2vK=..K=.;L=..L=
24021108:	3d4d020c 3d4d657b 3d4dc91b 3d4e2ceb     ..M={eM=..M=.,N=
24021118:	3d4e90ec 3d4ef51d 3d4f597f 3d4fbe12     ..N=..N=.YO=..O=
24021128:	3d5022d6 3d5087cb 3d50ecf1 3d515248     ."P=..P=..P=HRQ=
24021138:	3d51b7d1 3d521d8b 3d528377 3d52e994     ..Q=..R=w.R=..R=
24021148:	3d534fe3 3d53b663 3d541d16 3d5483fb     .OS=c.S=..T=..T=
24021158:	3d54eb11 3d55525a 3d55b9d5 3d562183     ..T=ZRU=..U=.!V=
24021168:	3d568963 3d56f175 3d5759bb 3d57c233     c.V=u.V=.YW=3.W=
24021178:	3d582ade 3d5893bb 3d58fccc 3d596610     .*X=..X=..X=.fY=
24021188:	3d59cf88 3d5a3932 3d5aa311 3d5b0d22     ..Y=29Z=..Z=".[=
24021198:	3d5b7768 3d5be1e1 3d5c4c8e 3d5cb76f     hw[=..[=.L\=o.\=
240211a8:	3d5d2284 3d5d8dcd 3d5df94a 3d5e64fc     ."]=..]=J.]=.d^=
240211b8:	3d5ed0e2 3d5f3cfd 3d5fa94c 3d6015d0     ..^=.<_=L._=..`=
240211c8:	3d608289 3d60ef77 3d615c9a 3d61c9f3     ..`=w.`=.\a=..a=
240211d8:	3d623780 3d62a543 3d63133b 3d638169     .7b=C.b=;.c=i.c=
240211e8:	3d63efcd 3d645e66 3d64cd35 3d653c3a     ..c=f^d=5.d=:<e=
240211f8:	3d65ab76 3d661ae7 3d668a8f 3d66fa6d     v.e=..f=..f=m.f=
24021208:	3d676a82 3d67dacd 3d684b50 3d68bc09     .jg=..g=PKh=..h=
24021218:	3d692cf8 3d699e1f 3d6a0f7d 3d6a8113     .,i=..i=}.j=..j=
24021228:	3d6af2df 3d6b64e3 3d6bd71f 3d6c4992     ..j=.dk=..k=.Il=
24021238:	3d6cbc3e 3d6d2f21 3d6da23c 3d6e158f     >.l=!/m=<.m=..n=
24021248:	3d6e891a 3d6efcde 3d6f70da 3d6fe50f     ..n=..n=.po=..o=
24021258:	3d70597c 3d70ce22 3d714301 3d71b819     |Yp=".p=.Cq=..q=
24021268:	3d722d6a 3d72a2f5 3d7318b8 3d738eb5     j-r=..r=..s=..s=
24021278:	3d7404ec 3d747b5c 3d74f206 3d7568ea     ..t=\{t=..t=.hu=
24021288:	3d75e008 3d76575f 3d76cef2 3d7746be     ..u=_Wv=..v=.Fw=
24021298:	3d77bec5 3d783706 3d78af82 3d792839     ..w=.7x=..x=9(y=
240212a8:	3d79a12b 3d7a1a58 3d7a93bf 3d7b0d62     +.y=X.z=..z=b.{=
240212b8:	3d7b8741 3d7c015b 3d7c7bb0 3d7cf641     A.{=[.|=.{|=A.|=
240212c8:	3d7d710e 3d7dec17 3d7e675c 3d7ee2dd     .q}=..}=\g~=..~=
240212d8:	3d7f5e9a 3d7fda94 3d802b65 3d80699e     .^.=...=e+.=.i.=
240212e8:	3d80a7f6 3d80e66c 3d812501 3d8163b4     ...=l..=.%.=.c.=
240212f8:	3d81a286 3d81e176 3d822086 3d825fb4     ...=v..=. .=._.=
24021308:	3d829f00 3d82de6c 3d831df7 3d835da0     ...=l..=...=.].=
24021318:	3d839d69 3d83dd51 3d841d58 3d845d7f     i..=Q..=X..=.].=
24021328:	3d849dc4 3d84de29 3d851eae 3d855f52     ...=)..=...=R_.=
24021338:	3d85a015 3d85e0f9 3d8621fc 3d86631e     ...=...=.!.=.c.=
24021348:	3d86a461 3d86e5c3 3d872745 3d8768e8     a..=...=E'.=.h.=
24021358:	3d87aaaa 3d87ec8c 3d882e8f 3d8870b2     ...=...=...=.p.=
24021368:	3d88b2f5 3d88f559 3d8937dd 3d897a81     ...=Y..=.7.=.z.=
24021378:	3d89bd46 3d8a002c 3d8a4332 3d8a8659     F..=,..=2C.=Y..=
24021388:	3d8ac9a1 3d8b0d0a 3d8b5094 3d8b943f     ...=...=.P.=?..=
24021398:	3d8bd80a 3d8c1bf7 3d8c6005 3d8ca435     ...=...=.`.=5..=
240213a8:	3d8ce886 3d8d2cf8 3d8d718b 3d8db640     ...=.,.=.q.=@..=
240213b8:	3d8dfb17 3d8e400f 3d8e852a 3d8eca65     ...=.@.=*..=e..=
240213c8:	3d8f0fc3 3d8f5543 3d8f9ae4 3d8fe0a8     ...=CU.=...=...=
240213d8:	3d90268e 3d906c96 3d90b2c0 3d90f90c     .&.=.l.=...=...=
240213e8:	3d913f7b 3d91860d 3d91ccc0 3d921397     {?.=...=...=...=
240213f8:	3d925a90 3d92a1ac 3d92e8ea 3d93304c     .Z.=...=...=L0.=
24021408:	3d9377d0 3d93bf77 3d940742 3d944f2f     .w.=w..=B..=/O.=
24021418:	3d949740 3d94df74 3d9527cb 3d957046     @..=t..=.'.=Fp.=
24021428:	3d95b8e4 3d9601a6 3d964a8b 3d969394     ...=...=.J.=...=
24021438:	3d96dcc1 3d972612 3d976f86 3d97b91f     ...=.&.=.o.=...=
24021448:	3d9802db 3d984cbc 3d9896c0 3d98e0e9     ...=.L.=...=...=
24021458:	3d992b36 3d9975a8 3d99c03e 3d9a0af9     6+.=.u.=>..=...=
24021468:	3d9a55d8 3d9aa0dc 3d9aec04 3d9b3752     .U.=...=...=R7.=
24021478:	3d9b82c4 3d9bce5b 3d9c1a18 3d9c65f9     ...=[..=...=.e.=
24021488:	3d9cb200 3d9cfe2b 3d9d4a7c 3d9d96f3     ...=+..=|J.=...=
24021498:	3d9de38f 3d9e3050 3d9e7d38 3d9eca44     ...=P0.=8}.=D..=
240214a8:	3d9f1777 3d9f64cf 3d9fb24d 3d9ffff2     w..=.d.=M..=...=
240214b8:	3da04dbc 3da09bac 3da0e9c3 3da13800     .M.=...=...=.8.=
240214c8:	3da18663 3da1d4ed 3da2239d 3da27274     c..=...=.#.=tr.=
240214d8:	3da2c171 3da31096 3da35fe1 3da3af52     q..=...=._.=R..=
240214e8:	3da3feeb 3da44eab 3da49e92 3da4eea0     ...=.N.=...=...=
240214f8:	3da53ed6 3da58f32 3da5dfb7 3da63062     .>.=2..=...=b0.=
24021508:	3da68136 3da6d230 3da72353 3da7749e     6..=0..=S#.=.t.=
24021518:	3da7c610 3da817aa 3da8696d 3da8bb57     ...=...=mi.=W..=
24021528:	3da90d6a 3da95fa5 3da9b208 3daa0494     j..=._.=...=...=
24021538:	3daa5748 3daaaa25 3daafd2a 3dab5059     HW.=%..=*..=YP.=
24021548:	3daba3b0 3dabf730 3dac4ad9 3dac9eab     ...=0..=.J.=...=
24021558:	3dacf2a7 3dad46cb 3dad9b19 3dadef90     ...=.F.=...=...=
24021568:	3dae4431 3dae98fc 3daeedf0 3daf430d     1D.=...=...=.C.=
24021578:	3daf9855 3dafedc6 3db04362 3db09927     U..=...=bC.='..=
24021588:	3db0ef17 3db14531 3db19b75 3db1f1e4     ...=1E.=u..=...=
24021598:	3db2487d 3db29f41 3db2f62f 3db34d48     }H.=A..=/..=HM.=
240215a8:	3db3a48c 3db3fbfb 3db45394 3db4ab59     ...=...=.S.=Y..=
240215b8:	3db50349 3db55b65 3db5b3ab 3db60c1d     I..=e[.=...=...=
240215c8:	3db664bb 3db6bd84 3db71678 3db76f99     .d.=...=x..=.o.=
240215d8:	3db7c8e5 3db8225e 3db87c02 3db8d5d2     ...=^".=.|.=...=
240215e8:	3db92fcf 3db989f8 3db9e44d 3dba3ecf     ./.=...=M..=.>.=
240215f8:	3dba997d 3dbaf458 3dbb4f60 3dbbaa94     }..=X..=`O.=...=
24021608:	3dbc05f6 3dbc6184 3dbcbd40 3dbd1928     ...=.a.=@..=(..=
24021618:	3dbd753e 3dbdd181 3dbe2df2 3dbe8a90     >u.=...=.-.=...=
24021628:	3dbee75c 3dbf4456 3dbfa17d 3dbffed2     \..=VD.=}..=...=
24021638:	3dc05c55 3dc0ba07 3dc117e6 3dc175f4     U\.=...=...=.u.=
24021648:	3dc1d430 3dc2329a 3dc29134 3dc2effb     0..=.2.=4..=...=
24021658:	3dc34ef2 3dc3ae17 3dc40d6b 3dc46cee     .N.=...=k..=.l.=
24021668:	3dc4cca1 3dc52c82 3dc58c93 3dc5ecd3     ...=.,.=...=...=
24021678:	3dc64d42 3dc6ade2 3dc70eb0 3dc76faf     BM.=...=...=.o.=
24021688:	3dc7d0dd 3dc8323c 3dc893ca 3dc8f589     ...=<2.=...=...=
24021698:	3dc95778 3dc9b997 3dca1be6 3dca7e66     xW.=...=...=f~.=
240216a8:	3dcae117 3dcb43f9 3dcba70b 3dcc0a4e     ...=.C.=...=N..=
240216b8:	3dcc6dc2 3dccd168 3dcd353e 3dcd9946     .m.=h..=>5.=F..=
240216c8:	3dcdfd7f 3dce61ea 3dcec687 3dcf2b55     ...=.a.=...=U+.=
240216d8:	3dcf9055 3dcff586 3dd05aea 3dd0c080     U..=...=.Z.=...=
240216e8:	3dd12648 3dd18c43 3dd1f270 3dd258cf     H&.=C..=p..=.X.=
240216f8:	3dd2bf61 3dd32626 3dd38d1d 3dd3f448     a..=&&.=...=H..=
24021708:	3dd45ba5 3dd4c336 3dd52af9 3dd592f1     .[.=6..=.*.=...=
24021718:	3dd5fb1b 3dd66379 3dd6cc0b 3dd734d0     ...=yc.=...=.4.=
24021728:	3dd79dca 3dd806f7 3dd87058 3dd8d9ee     ...=...=Xp.=...=
24021738:	3dd943b8 3dd9adb6 3dda17e9 3dda8250     .C.=...=...=P..=
24021748:	3ddaecec 3ddb57bc 3ddbc2c2 3ddc2dfd     ...=.W.=...=.-.=
24021758:	3ddc996d 3ddd0511 3ddd70ec 3ddddcfc     m..=...=.p.=...=
24021768:	3dde4941 3ddeb5bc 3ddf226d 3ddf8f53     AI.=...=m".=S..=
24021778:	3ddffc70 3de069c2 3de0d74b 3de1450b     p..=.i.=K..=.E.=
24021788:	3de1b300 3de2212c 3de28f8f 3de2fe29     ...=,!.=...=)..=
24021798:	3de36cf9 3de3dc01 3de44b3f 3de4bab5     .l.=...=?K.=...=
240217a8:	3de52a62 3de59a46 3de60a62 3de67ab6     b*.=F..=b..=.z.=
240217b8:	3de6eb41 3de75c04 3de7cd00 3de83e33     A..=.\.=...=3>.=
240217c8:	3de8af9f 3de92142 3de9931f 3dea0534     ...=B!.=...=4..=
240217d8:	3dea7781 3deaea08 3deb5cc7 3debcfbf     .w.=...=.\.=...=
240217e8:	3dec42f1 3decb65c 3ded2a00 3ded9ddd     .B.=\..=.*.=...=
240217f8:	3dee11f4 3dee8645 3deefad0 3def6f95     ...=E..=...=.o.=
24021808:	3defe494 3df059cd 3df0cf40 3df144ee     ...=.Y.=@..=.D.=
24021818:	3df1bad6 3df230f9 3df2a757 3df31df0     ...=.0.=W..=...=
24021828:	3df394c3 3df40bd2 3df4831d 3df4faa2     ...=...=...=...=
24021838:	3df57263 3df5ea60 3df66299 3df6db0d     cr.=`..=.b.=...=
24021848:	3df753bd 3df7ccaa 3df845d3 3df8bf38     .S.=...=.E.=8..=
24021858:	3df938da 3df9b2b8 3dfa2cd3 3dfaa72b     .8.=...=.,.=+..=
24021868:	3dfb21c0 3dfb9c93 3dfc17a2 3dfc92ef     .!.=...=...=...=
24021878:	3dfd0e79 3dfd8a41 3dfe0647 3dfe828a     y..=A..=G..=...=
24021888:	3dfeff0c 3dff7bcc 3dfff8ca 3e003b03     ...=.{.=...=.;.>
24021898:	3e0079c1 3e00b89e 3e00f79a 3e0136b6     .y.>...>...>.6.>
240218a8:	3e0175f1 3e01b54c 3e01f4c6 3e023460     .u.>L..>...>`4.>
240218b8:	3e02741a 3e02b3f4 3e02f3ee 3e033408     .t.>...>...>.4.>
240218c8:	3e037441 3e03b49b 3e03f515 3e0435b0     At.>...>...>.5.>
240218d8:	3e04766a 3e04b745 3e04f841 3e05395d     jv.>E..>A..>]9.>
240218e8:	3e057a9a 3e05bbf7 3e05fd75 3e063f14     .z.>...>u..>.?.>
240218f8:	3e0680d3 3e06c2b4 3e0704b6 3e0746d8     ...>...>...>.F.>
24021908:	3e07891c 3e07cb81 3e080e07 3e0850af     ...>...>...>.P.>
24021918:	3e089378 3e08d663 3e09196f 3e095c9c     x..>c..>o..>.\.>
24021928:	3e099fec 3e09e35d 3e0a26f0 3e0a6aa5     ...>]..>.&.>.j.>
24021938:	3e0aae7c 3e0af275 3e0b3690 3e0b7acd     |..>u..>.6.>.z.>
24021948:	3e0bbf2c 3e0c03ae 3e0c4852 3e0c8d19     ,..>...>RH.>...>
24021958:	3e0cd202 3e0d170e 3e0d5c3d 3e0da18e     ...>...>=\.>...>
24021968:	3e0de702 3e0e2c9a 3e0e7254 3e0eb831     ...>.,.>Tr.>1..>
24021978:	3e0efe31 3e0f4455 3e0f8a9b 3e0fd106     1..>UD.>...>...>
24021988:	3e101793 3e105e44 3e10a519 3e10ec11     ...>D^.>...>...>
24021998:	3e11332d 3e117a6d 3e11c1d1 3e120959     -3.>mz.>...>Y..>
240219a8:	3e125104 3e1298d4 3e12e0c8 3e1328e1     .Q.>...>...>.(.>
240219b8:	3e13711d 3e13b97f 3e140204 3e144aae     .q.>...>...>.J.>
240219c8:	3e14937d 3e14dc71 3e152589 3e156ec6     }..>q..>.%.>.n.>
240219d8:	3e15b828 3e1601b0 3e164b5c 3e16952e     (..>...>\K.>...>
240219e8:	3e16df25 3e172941 3e177382 3e17bdea     %..>A).>.s.>...>
240219f8:	3e180876 3e185329 3e189e01 3e18e8ff     v..>)S.>...>...>
24021a08:	3e193423 3e197f6d 3e19cadd 3e1a1673     #4.>m..>...>s..>
24021a18:	3e1a6230 3e1aae13 3e1afa1c 3e1b464c     0b.>...>...>LF.>
24021a28:	3e1b92a2 3e1bdf1f 3e1c2bc3 3e1c788d     ...>...>.+.>.x.>
24021a38:	3e1cc57e 3e1d1297 3e1d5fd6 3e1dad3d     ~..>...>._.>=..>
24021a48:	3e1dfacb 3e1e4880 3e1e965d 3e1ee461     ...>.H.>]..>a..>
24021a58:	3e1f328d 3e1f80e0 3e1fcf5b 3e201dfe     .2.>...>[..>.. >
24021a68:	3e206cc9 3e20bbbc 3e210ad7 3e215a1a     .l >.. >..!>.Z!>
24021a78:	3e21a986 3e21f919 3e2248d6 3e2298bb     ..!>..!>.H">..">
24021a88:	3e22e8c8 3e2338fe 3e23895d 3e23d9e5     ..">.8#>].#>..#>
24021a98:	3e242a96 3e247b70 3e24cc73 3e251d9f     .*$>p{$>s.$>..%>
24021aa8:	3e256ef5 3e25c074 3e26121c 3e2663ee     .n%>t.%>..&>.c&>
24021ab8:	3e26b5ea 3e270810 3e275a5f 3e27acd9     ..&>..'>_Z'>..'>
24021ac8:	3e27ff7c 3e28524a 3e28a542 3e28f864     |.'>JR(>B.(>d.(>
24021ad8:	3e294bb1 3e299f28 3e29f2ca 3e2a4696     .K)>(.)>..)>.F*>
24021ae8:	3e2a9a8e 3e2aeeb0 3e2b42fd 3e2b9776     ..*>..*>.B+>v.+>
24021af8:	3e2bec19 3e2c40e8 3e2c95e2 3e2ceb08     ..+>.@,>..,>..,>
24021b08:	3e2d4059 3e2d95d6 3e2deb7e 3e2e4153     Y@->..->~.->SA.>
24021b18:	3e2e9753 3e2eed7f 3e2f43d8 3e2f9a5d     S..>...>.C/>]./>
24021b28:	3e2ff10e 3e3047ec 3e309ef6 3e30f62c     ../>.G0>..0>,.0>
24021b38:	3e314d90 3e31a520 3e31fcdd 3e3254c8     .M1> .1>..1>.T2>
24021b48:	3e32acdf 3e330524 3e335d96 3e33b635     ..2>$.3>.]3>5.3>
24021b58:	3e340f02 3e3467fc 3e34c125 3e351a7b     ..4>.g4>%.4>{.5>
24021b68:	3e3573ff 3e35cdb1 3e362791 3e3681a0     .s5>..5>.'6>..6>
24021b78:	3e36dbdd 3e373648 3e3790e2 3e37ebaa     ..6>H67>..7>..7>
24021b88:	3e3846a1 3e38a1c8 3e38fd1d 3e3958a1     .F8>..8>..8>.X9>
24021b98:	3e39b454 3e3a1037 3e3a6c49 3e3ac88b     T.9>7.:>Il:>..:>
24021ba8:	3e3b24fc 3e3b819d 3e3bde6e 3e3c3b6f     .$;>..;>n.;>o;<>
24021bb8:	3e3c989f 3e3cf600 3e3d5391 3e3db153     ..<>..<>.S=>S.=>
24021bc8:	3e3e0f45 3e3e6d68 3e3ecbbb 3e3f2a3f     E.>>hm>>..>>?*?>
24021bd8:	3e3f88f4 3e3fe7da 3e4046f2 3e40a63a     ..?>..?>.F@>:.@>
24021be8:	3e4105b4 3e41655f 3e41c53c 3e42254b     ..A>_eA><.A>K%B>
24021bf8:	3e42858b 3e42e5fe 3e4346a2 3e43a779     ..B>..B>.FC>y.C>
24021c08:	3e440882 3e4469bd 3e44cb2b 3e452ccb     ..D>.iD>+.D>.,E>
24021c18:	3e458e9e 3e45f0a4 3e4652dd 3e46b54a     ..E>..E>.RF>J.F>
24021c28:	3e4717e9 3e477abb 3e47ddc1 3e4840fb     ..G>.zG>..G>.@H>
24021c38:	3e48a468 3e490809 3e496bde 3e49cfe8     h.H>..I>.kI>..I>
24021c48:	3e4a3425 3e4a9896 3e4afd3c 3e4b6216     %4J>..J><.J>.bK>
24021c58:	3e4bc726 3e4c2c69 3e4c91e2 3e4cf790     &.K>i,L>..L>..L>
24021c68:	3e4d5d73 3e4dc38b 3e4e29d8 3e4e905b     s]M>..M>.)N>[.N>
24021c78:	3e4ef714 3e4f5e02 3e4fc526 3e502c80     ..N>.^O>&.O>.,P>
24021c88:	3e509411 3e50fbd7 3e5163d4 3e51cc08     ..P>..P>.cQ>..Q>
24021c98:	3e523472 3e529d13 3e5305eb 3e536efa     r4R>..R>..S>.nS>
24021ca8:	3e53d840 3e5441bd 3e54ab72 3e55155e     @.S>.AT>r.T>^.U>
24021cb8:	3e557f82 3e55e9de 3e565471 3e56bf3d     ..U>..U>qTV>=.V>
24021cc8:	3e572a41 3e57957d 3e5800f2 3e586c9f     A*W>}.W>..X>.lX>
24021cd8:	3e58d885 3e5944a4 3e59b0fc 3e5a1d8d     ..X>.DY>..Y>..Z>
24021ce8:	3e5a8a57 3e5af75b 3e5b6498 3e5bd20f     W.Z>[.Z>.d[>..[>
24021cf8:	3e5c3fc0 3e5cadab 3e5d1bd0 3e5d8a2f     .?\>..\>..]>/.]>
24021d08:	3e5df8c8 3e5e679c 3e5ed6ab 3e5f45f4     ..]>.g^>..^>.E_>
24021d18:	3e5fb579 3e602538 3e609533 3e610569     y._>8%`>3.`>i.a>
24021d28:	3e6175da 3e61e688 3e625771 3e62c895     .ua>..a>qWb>..b>
24021d38:	3e6339f6 3e63ab94 3e641d6d 3e648f83     .9c>..c>m.d>..d>
24021d48:	3e6501d6 3e657466 3e65e732 3e665a3c     ..e>fte>2.e><Zf>
24021d58:	3e66cd83 3e674107 3e67b4c9 3e6828c8     ..f>.Ag>..g>.(h>
24021d68:	3e689d06 3e691181 3e69863b 3e69fb33     ..h>..i>;.i>3.i>
24021d78:	3e6a7069 3e6ae5de 3e6b5b92 3e6bd184     ipj>..j>.[k>..k>
24021d88:	3e6c47b6 3e6cbe27 3e6d34d7 3e6dabc7     .Gl>'.l>.4m>..m>
24021d98:	3e6e22f7 3e6e9a66 3e6f1215 3e6f8a05     ."n>f.n>..o>..o>
24021da8:	3e700235 3e707aa5 3e70f356 3e716c48     5.p>.zp>V.p>Hlq>
24021db8:	3e71e57b 3e725eef 3e72d8a4 3e73529b     {.q>.^r>..r>.Rs>
24021dc8:	3e73ccd3 3e74474d 3e74c209 3e753d07     ..s>MGt>..t>.=u>
24021dd8:	3e75b847 3e7633ca 3e76af8f 3e772b98     G.u>.3v>..v>.+w>
24021de8:	3e77a7e3 3e782471 3e78a142 3e791e57     ..w>q$x>B.x>W.y>
24021df8:	3e799bb0 3e7a194c 3e7a972c 3e7b1550     ..y>L.z>,.z>P.{>
24021e08:	3e7b93b9 3e7c1266 3e7c9158 3e7d108e     ..{>f.|>X.|>..}>
24021e18:	3e7d900a 3e7e0fcb 3e7e8fd0 3e7f101c     ..}>..~>..~>...>
24021e28:	3e7f90ad 3e8008c2 3e804951 3e808a02     ...>...>QI.>...>
24021e38:	3e80cad7 3e810bcf 3e814ceb 3e818e2a     ...>...>.L.>*..>
24021e48:	3e81cf8c 3e821113 3e8252bd 3e82948a     ...>...>.R.>...>
24021e58:	3e82d67c 3e831892 3e835acc 3e839d2a     |..>...>.Z.>*..>
24021e68:	3e83dfac 3e842253 3e84651e 3e84a80e     ...>S".>.e.>...>
24021e78:	3e84eb22 3e852e5b 3e8571b9 3e85b53d     "..>[..>.q.>=..>
24021e88:	3e85f8e5 3e863cb2 3e8680a4 3e86c4bc     ...>.<.>...>...>
24021e98:	3e8708fa 3e874d5c 3e8791e5 3e87d693     ...>\M.>...>...>
24021ea8:	3e881b67 3e886061 3e88a581 3e88eac7     g..>a`.>...>...>
24021eb8:	3e893034 3e8975c7 3e89bb80 3e8a0160     40.>.u.>...>`..>
24021ec8:	3e8a4766 3e8a8d93 3e8ad3e7 3e8b1a62     fG.>...>...>b..>
24021ed8:	3e8b6104 3e8ba7cd 3e8beebd 3e8c35d5     .a.>...>...>.5.>
24021ee8:	3e8c7d14 3e8cc47b 3e8d0c0a 3e8d53c0     .}.>{..>...>.S.>
24021ef8:	3e8d9b9e 3e8de3a4 3e8e2bd2 3e8e7429     ...>...>.+.>)t.>
24021f08:	3e8ebca8 3e8f054f 3e8f4e1f 3e8f9717     ...>O..>.N.>...>
24021f18:	3e8fe038 3e902982 3e9072f5 3e90bc91     8..>.).>.r.>...>
24021f28:	3e910657 3e915045 3e919a5d 3e91e49f     W..>EP.>]..>...>
24021f38:	3e922f0a 3e92799f 3e92c45e 3e930f47     ./.>.y.>^..>G..>
24021f48:	3e935a5a 3e93a597 3e93f0fe 3e943c90     ZZ.>...>...>.<.>
24021f58:	3e94884d 3e94d434 3e952046 3e956c83     M..>4..>F .>.l.>
24021f68:	3e95b8eb 3e96057e 3e96523d 3e969f27     ...>~..>=R.>'..>
24021f78:	3e96ec3c 3e97397d 3e9786ea 3e97d483     <..>}9.>...>...>
24021f88:	3e982247 3e987038 3e98be55 3e990c9e     G".>8p.>U..>...>
24021f98:	3e995b14 3e99a9b7 3e99f886 3e9a4782     .[.>...>...>.G.>
24021fa8:	3e9a96ab 3e9ae602 3e9b3585 3e9b8536     ...>...>.5.>6..>
24021fb8:	3e9bd514 3e9c2521 3e9c755a 3e9cc5c2     ...>!%.>Zu.>...>
24021fc8:	3e9d1658 3e9d671c 3e9db80e 3e9e092e     X..>.g.>...>...>
24021fd8:	3e9e5a7e 3e9eabfb 3e9efda8 3e9f4f84     ~Z.>...>...>.O.>
24021fe8:	3e9fa18e 3e9ff3c8 3ea04632 3ea098ca     ...>...>2F.>...>
24021ff8:	3ea0eb93 3ea13e8b 3ea191b3 3ea1e50b     ...>.>.>...>...>
24022008:	3ea23893 3ea28c4c 3ea2e035 3ea3344f     .8.>L..>5..>O4.>
24022018:	3ea38899 3ea3dd14 3ea431c1 3ea4869e     ...>...>.1.>...>
24022028:	3ea4dbad 3ea530ed 3ea5865f 3ea5dc03     ...>.0.>_..>...>
24022038:	3ea631d8 3ea687e0 3ea6de1a 3ea73486     .1.>...>...>.4.>
24022048:	3ea78b24 3ea7e1f5 3ea838f9 3ea89030     $..>...>.8.>0..>
24022058:	3ea8e79a 3ea93f37 3ea99708 3ea9ef0c     ...>7?.>...>...>
24022068:	3eaa4744 3eaa9fb0 3eaaf850 3eab5123     DG.>...>P..>#Q.>
24022078:	3eabaa2c 3eac0368 3eac5cda 3eacb680     ,..>h..>.\.>...>
24022088:	3ead105b 3ead6a6b 3eadc4b0 3eae1f2b     [..>kj.>...>+..>
24022098:	3eae79db 3eaed4c2 3eaf2fde 3eaf8b30     .y.>...>./.>0..>
240220a8:	3eafe6b8 3eb04277 3eb09e6d 3eb0fa99     ...>wB.>m..>...>
240220b8:	3eb156fc 3eb1b396 3eb21067 3eb26d70     .V.>...>g..>pm.>
240220c8:	3eb2cab1 3eb32829 3eb385d9 3eb3e3c1     ...>)(.>...>...>
240220d8:	3eb441e2 3eb4a03b 3eb4fecc 3eb55d97     .A.>;..>...>.].>
240220e8:	3eb5bc9a 3eb61bd6 3eb67b4c 3eb6dafc     ...>...>L{.>...>
240220f8:	3eb73ae5 3eb79b08 3eb7fb65 3eb85bfc     .:.>...>e..>.[.>
24022108:	3eb8bcce 3eb91dda 3eb97f21 3eb9e0a3     ...>...>!..>...>
24022118:	3eba4260 3ebaa459 3ebb068d 3ebb68fd     `B.>Y..>...>.h.>
24022128:	3ebbcba9 3ebc2e91 3ebc91b5 3ebcf516     ...>...>...>...>
24022138:	3ebd58b3 3ebdbc8d 3ebe20a5 3ebe84f9     .X.>...>. .>...>
24022148:	3ebee98b 3ebf4e5b 3ebfb369 3ec018b5     ...>[N.>i..>...>
24022158:	3ec07e3f 3ec0e407 3ec14a0e 3ec1b055     ?~.>...>.J.>U..>
24022168:	3ec216da 3ec27d9e 3ec2e4a2 3ec34be6     ...>.}.>...>.K.>
24022178:	3ec3b369 3ec41b2d 3ec48331 3ec4eb76     i..>-..>1..>v..>
24022188:	3ec553fb 3ec5bcc2 3ec625c9 3ec68f12     .S.>...>.%.>...>
24022198:	3ec6f89d 3ec76269 3ec7cc78 3ec836c8     ...>ib.>x..>.6.>
240221a8:	3ec8a15c 3ec90c32 3ec9774b 3ec9e2a7     \..>2..>Kw.>...>
240221b8:	3eca4e46 3ecaba2a 3ecb2651 3ecb92bc     FN.>*..>Q&.>...>
240221c8:	3ecbff6b 3ecc6c5f 3eccd998 3ecd4716     k..>_l.>...>.G.>
240221d8:	3ecdb4d9 3ece22e1 3ece9130 3eceffc4     ...>.".>0..>...>
240221e8:	3ecf6e9e 3ecfddbf 3ed04d27 3ed0bcd5     .n.>...>'M.>...>
240221f8:	3ed12ccb 3ed19d08 3ed20d8c 3ed27e59     .,.>...>...>Y~.>
24022208:	3ed2ef6e 3ed360cb 3ed3d271 3ed4445f     n..>.`.>q..>_D.>
24022218:	3ed4b697 3ed52919 3ed59be4 3ed60ef9     ...>.).>...>...>
24022228:	3ed68258 3ed6f601 3ed769f6 3ed7de35     X..>...>.i.>5..>
24022238:	3ed852c0 3ed8c796 3ed93cb7 3ed9b225     .R.>...>.<.>%..>
24022248:	3eda27e0 3eda9de7 3edb143a 3edb8adb     .'.>...>:..>...>
24022258:	3edc01c9 3edc7905 3edcf08f 3edd6868     ...>.y.>...>hh.>
24022268:	3edde08e 3ede5904 3eded1c9 3edf4add     ...>.Y.>...>.J.>
24022278:	3edfc441 3ee03df4 3ee0b7f8 3ee1324d     A..>.=.>...>M2.>
24022288:	3ee1acf2 3ee227e9 3ee2a331 3ee31ecb     ...>.'.>1..>...>
24022298:	3ee39ab7 3ee416f5 3ee49386 3ee51069     ...>...>...>i..>
240222a8:	3ee58da1 3ee60b2b 3ee6890a 3ee7073c     ...>+..>...><..>
240222b8:	3ee785c4 3ee804a0 3ee883d1 3ee90358     ...>...>...>X..>
240222c8:	3ee98334 3eea0367 3eea83f0 3eeb04cf     4..>g..>...>...>
240222d8:	3eeb8606 3eec0795 3eec897b 3eed0bb9     ...>...>{..>...>
240222e8:	3eed8e4f 3eee113f 3eee9487 3eef1829     O..>?..>...>)..>
240222f8:	3eef9c24 3ef0207a 3ef0a52a 3ef12a35     $..>z .>*..>5*.>
24022308:	3ef1af9c 3ef2355d 3ef2bb7b 3ef341f5     ...>]5.>{..>.A.>
24022318:	3ef3c8cb 3ef44ffe 3ef4d78f 3ef55f7e     ...>.O.>...>~_.>
24022328:	3ef5e7ca 3ef67075 3ef6f97f 3ef782e7     ...>up.>...>...>
24022338:	3ef80cb0 3ef896d8 3ef92161 3ef9ac4a     ...>...>a!.>J..>
24022348:	3efa3794 3efac340 3efb4f4e 3efbdbbe     .7.>@..>NO.>...>
24022358:	3efc6890 3efcf5c6 3efd835f 3efe115b     .h.>...>_..>[..>
24022368:	3efe9fbc 3eff2e82 3effbdad 3f00269e     ...>...>...>.&.?
24022378:	3f006e99 3f00b6c8 3f00ff29 3f0147be     .n.?...?)..?.G.?
24022388:	3f019087 3f01d984 3f0222b5 3f026c1a     ...?...?.".?.l.?
24022398:	3f02b5b4 3f02ff83 3f034987 3f0393c0     ...?...?.I.?...?
240223a8:	3f03de2f 3f0428d3 3f0473ae 3f04bebe     /..?.(.?.s.?...?
240223b8:	3f050a05 3f055583 3f05a137 3f05ed23     ...?.U.?7..?#..?
240223c8:	3f063946 3f0685a0 3f06d232 3f071efd     F9.?...?2..?...?
240223d8:	3f076bff 3f07b93a 3f0806ae 3f08545b     .k.?:..?...?[T.?
240223e8:	3f08a241 3f08f061 3f093eba 3f098d4d     A..?a..?.>.?M..?
240223f8:	3f09dc1b 3f0a2b23 3f0a7a65 3f0ac9e3     ...?#+.?ez.?...?
24022408:	3f0b199c 3f0b6991 3f0bb9c1 3f0c0a2d     ...?.i.?...?-..?
24022418:	3f0c5ad6 3f0cabbb 3f0cfcdd 3f0d4e3c     .Z.?...?...?<N.?
24022428:	3f0d9fd9 3f0df1b3 3f0e43cb 3f0e9621     ...?...?.C.?!..?
24022438:	3f0ee8b6 3f0f3b89 3f0f8e9c 3f0fe1ee     ...?.;.?...?...?
24022448:	3f10357f 3f108950 3f10dd62 3f1131b4     .5.?P..?b..?.1.?
24022458:	3f118646 3f11db1a 3f12302f 3f128586     F..?...?/0.?...?
24022468:	3f12db1f 3f1330fa 3f138717 3f13dd78     ...?.0.?...?x..?
24022478:	3f14341b 3f148b02 3f14e22d 3f15399c     .4.?...?-..?.9.?
24022488:	3f15914f 3f15e948 3f164185 3f169a07     O..?H..?.A.?...?
24022498:	3f16f2d0 3f174bde 3f17a533 3f17fece     ...?.K.?3..?...?
240224a8:	3f1858b0 3f18b2da 3f190d4c 3f196805     .X.?...?L..?.h.?
240224b8:	3f19c307 3f1a1e52 3f1a79e6 3f1ad5c3     ...?R..?.y.?...?
240224c8:	3f1b31ea 3f1b8e5b 3f1beb17 3f1c481d     .1.?[..?...?.H.?
240224d8:	3f1ca56f 3f1d030d 3f1d60f6 3f1dbf2c     o..?...?.`.?,..?
240224e8:	3f1e1dae 3f1e7c7e 3f1edb9b 3f1f3b06     ...?~|.?...?.;.?
240224f8:	3f1f9abf 3f1ffac6 3f205b1d 3f20bbc3     ...?...?.[ ?.. ?
24022508:	3f211cb9 3f217dff 3f21df96 3f22417e     ..!?.}!?..!?~A"?
24022518:	3f22a3b7 3f230642 3f23691f 3f23cc4f     .."?B.#?.i#?O.#?
24022528:	3f242fd2 3f2493a8 3f24f7d3 3f255c51     ./$?..$?..$?Q\%?
24022538:	3f25c125 3f26264d 3f268bcc 3f26f1a0     %.%?M&&?..&?..&?
24022548:	3f2757cb 3f27be4d 3f282526 3f288c57     .W'?M.'?&%(?W.(?
24022558:	3f28f3e1 3f295bc3 3f29c3ff 3f2a2c94     ..(?.[)?..)?.,*?
24022568:	3f2a9584 3f2afece 3f2b6873 3f2bd274     ..*?..*?sh+?t.+?
24022578:	3f2c3cd2 3f2ca78b 3f2d12a2 3f2d7e17     .<,?..,?..-?.~-?
24022588:	3f2de9e9 3f2e561b 3f2ec2ab 3f2f2f9b     ..-?.V.?...?.//?
24022598:	3f2f9ceb 3f300a9c 3f3078ae 3f30e722     ../?..0?.x0?".0?
240225a8:	3f3155f8 3f31c530 3f3234cc 3f32a4cc     .U1?0.1?.42?..2?
240225b8:	3f331531 3f3385fa 3f33f729 3f3468be     1.3?..3?).3?.h4?

240225c8 <__leaf_table_fir2XLow>:
240225c8:	3a8bdc32 bb955900 bc88e6bf bcac918f     2..:.Y..........
240225d8:	bb7aead8 3c98db7f 3c45342d bca916b1     ..z....<-4E<....
240225e8:	bcdbbdfe 3c9254a3 3d49d119 bb8d3cda     .....T.<..I=.<..
240225f8:	bdaf8d57 bd1ccea3 3e3ca03d 3ecf9165     W.......=.<>e..>
24022608:	3ecf9165 3e3ca03d bd1ccea3 bdaf8d57     e..>=.<>....W...
24022618:	bb8d3cda 3d49d119 3c9254a3 bcdbbdfe     .<....I=.T.<....
24022628:	bca916b1 3c45342d 3c98db7f bb7aead8     ....-4E<...<..z.
24022638:	bcac918f bc88e6bf bb955900 3a8bdc32     .........Y..2..:

24022648 <__leaf_table_sinewave>:
24022648:	00000000 3b47e282 3bc8de2b 3c1691a7     ......G;+..;...<
24022658:	3c49081c 3c7b00bd 3c96bb99 3cafb7e9     ..I<..{<...<...<
24022668:	3cc9081c 3ce2046c 3cfb3fa7 3d0a1dfc     ...<l..<.?.<...=
24022678:	3d16bb99 3d23443d 3d2fc265 3d3c6003     ...==D#=e./=.`<=
24022688:	3d48de2b 3d557bc8 3d62046c 3d6e8295     +.H=.{U=l.b=..n=
24022698:	3d7b2032 3d83cf2d 3d8a0e41 3d90624e     2 {=-..=A..=Nb.=
240226a8:	3d96a162 3d9ce076 3da31f8a 3da96e59     b..=v..=...=Yn.=
240226b8:	3dafad6d 3db5f1bf 3dbc30d3 3dc26fe7     m..=...=.0.=.o.=
240226c8:	3dc8aefb 3dceee0f 3dd53261 3ddb7176     ...=...=a2.=vq.=
240226d8:	3de1b08a 3de7ef9e 3dee2eb2 3df46dc6     ...=...=...=.m.=
240226e8:	3dfab218 3e0070b9 3e039043 3e06afcd     ...=.p.>C..>...>
240226f8:	3e09c77a 3e0ce704 3e10092d 3e1320da     z..>...>-..>. .>
24022708:	3e163886 3e195810 3e1c6fbd 3e1f8f47     .8.>.X.>.o.>G..>
24022718:	3e22a6f4 3e25c140 3e28d8ed 3e2bf099     ..">@.%>..(>..+>
24022728:	3e2f0846 3e3227d0 3e3537a0 3e384f4c     F./>.'2>.75>LO8>
24022738:	3e3b66f9 3e3e8145 3e4198f2 3e44a8c1     .f;>E.>>..A>..D>
24022748:	3e47c06e 3e4ad81b 3e4de7ea 3e50ff97     n.G>..J>..M>..P>
24022758:	3e540f67 3e571f36 3e5a36e3 3e5d46b2     g.T>6.W>.6Z>.F]>
24022768:	3e605921 3e6368f1 3e6678c0 3e698890     !Y`>.hc>.xf>..i>
24022778:	3e6c985f 3e6fa051 3e72b021 3e75bff0     _.l>Q.o>!.r>..u>
24022788:	3e78c7e3 3e7bd7b2 3e7edfa4 3e80f7ba     ..x>..{>..~>...>
24022798:	3e827bb3 3e83ffac 3e8583a5 3e87079e     .{.>...>...>...>
240227a8:	3e888b97 3e8a0f91 3e8b938a 3e8d1394     ...>...>...>...>
240227b8:	3e8e978d 3e901798 3e919b91 3e931b9b     ...>...>...>...>
240227c8:	3e949ba6 3e961f9f 3e979fa9 3e991fb4     ...>...>...>...>
240227d8:	3e9a9bd0 3e9c1bda 3e9d9be5 3e9f1bef     ...>...>...>...>
240227e8:	3ea0980b 3ea21427 3ea39431 3ea5104d     ...>'..>1..>M..>
240227f8:	3ea68c69 3ea80885 3ea984a1 3eaaff6d     i..>...>...>m..>
24022808:	3eac7b89 3eadf3b6 3eaf6fd2 3eb0e7ff     .{.>...>.o.>...>
24022818:	3eb2602d 3eb3d85a 3eb55476 3eb6cca3     -`.>Z..>vT.>...>
24022828:	3eb83f92 3eb9b7bf 3ebb2fec 3ebca42b     .?.>...>./.>+..>
24022838:	3ebe1c58 3ebf9097 3ec10386 3ec277c4     X..>...>...>.w.>
24022848:	3ec3ec03 3ec56042 3ec6d480 3ec84381     ...>B`.>...>.C.>
24022858:	3ec9b7bf 3ecb280f 3ecc985f 3ece075f     ...>.(.>_..>_..>
24022868:	3ecf77af 3ed0e7ff 3ed2584f 3ed3c361     .w.>...>OX.>a..>
24022878:	3ed533b1 3ed6a012 3ed80c74 3ed97785     .3.>...>t..>.w.>
24022888:	3edae3e7 3edc5048 3eddbb5a 3edf23cd     ...>HP.>Z..>.#.>
24022898:	3ee0902e 3ee1f8a1 3ee35fc4 3ee4c836     ...>...>._.>6..>
240228a8:	3ee62f5a 3ee797cc 3ee8fc50 3eea6373     Z/.>...>P..>sc.>
240228b8:	3eebc7f7 3eed2c7c 3eee8fb0 3eeff434     ...>|,.>...>4..>
240228c8:	3ef15769 3ef2bbed 3ef41c82 3ef57bc8     iW.>...>...>.{.>
240228d8:	3ef6dc5d 3ef83ba3 3ef99c39 3efafb7f     ]..>.;.>9..>...>
240228e8:	3efc5c14 3efdb76b 3eff1412 3f0037b5     .\.>k..>...>.7.?
240228f8:	3f00e608 3f0193b4 3f024207 3f02edbb     ...?...?.B.?...?
24022908:	3f039a17 3f0447c3 3f04f228 3f059ddc     ...?.G.?(..?...?
24022918:	3f064a38 3f06f3f5 3f07a051 3f084a0e     8J.?...?Q..?.J.?
24022928:	3f08f3cb 3f099e30 3f0a47ed 3f0aefb3     ...?0..?.G.?...?
24022938:	3f0b9820 3f0c41dd 3f0cea4b 3f0d9019      ..?.A.?K..?...?
24022948:	3f0e37df 3f0ee04c 3f0f861a 3f102be9     .7.?L..?...?.+.?
24022958:	3f10d1b7 3f11782d 3f121dfc 3f12c1d3     ...?-x.?...?...?
24022968:	3f136651 3f140a28 3f14ae00 3f1551d7     Qf.?(..?...?.Q.?
24022978:	3f15f5ae 3f169835 3f173a15 3f17dbf5     ...?5..?.:.?...?
24022988:	3f187dd4 3f191fb4 3f19c044 3f1a602d     .}.?...?D..?-`.?
24022998:	3f1b020c 3f1b9ffd 3f1c3fe6 3f1cdfce     ...?...?.?.?...?
240229a8:	3f1d7dbf 3f1e1bb0 3f1eba49 3f1f583a     .}.?...?I..?:X.?
240229b8:	3f1ff62b 3f209225 3f212e1f 3f21ca19     +..?%. ?..!?..!?
240229c8:	3f226613 3f23020c 3f239c0f 3f243611     .f"?..#?..#?.6$?
240229d8:	3f24d014 3f256a16 3f260419 3f269c24     ..$?.j%?..&?$.&?
240229e8:	3f27342f 3f27cc3a 3f286445 3f28fc50     /4'?:.'?Ed(?P.(?
240229f8:	3f2991bc 3f2a27d0 3f2abde4 3f2b53f8     ..)?.'*?..*?.S+?
24022a08:	3f2bea0c 3f2c7e28 3f2d1245 3f2da5b9     ..+?(~,?E.-?..-?
24022a18:	3f2e39d6 3f2ecdf2 3f2f6018 3f2ff23d     .9.?...?.`/?=./?
24022a28:	3f3083ba 3f3115df 3f31a60d 3f32363b     ..0?..1?..1?;62?
24022a38:	3f32c7b9 3f3355ef 3f33e61d 3f347454     ..2?.U3?..3?Tt4?
24022a48:	3f3503da 3f359210 3f361e4f 3f36abde     ..5?..5?O.6?..6?
24022a58:	3f37381d 3f37c3b5 3f384ff4 3f38dc33     .87?..7?.O8?3.8?
24022a68:	3f3965d4 3f39f01c 3f3a79bc 3f3b0404     .e9?..9?.y:?..;?
24022a78:	3f3b8e4c 3f3c15f4 3f3c9e45 3f3d25ee     L.;?..<?E.<?.%=?
24022a88:	3f3dae3e 3f3e33f0 3f3eba49 3f3f3ffb     >.=?.3>?I.>?.???
24022a98:	3f3fc5ac 3f404a0e 3f40cfc0 3f415422     ..??.J@?..@?"TA?
24022aa8:	3f41d5e5 3f425a47 3f42dc0a 3f435dcc     ..A?GZB?..B?.]C?
24022ab8:	3f43e037 3f4461fa 3f44e1c6 3f456239     7.C?.aD?..D?9bE?
24022ac8:	3f45e204 3f4661d0 3f46e04c 3f475e20     ..E?.aF?L.F? ^G?
24022ad8:	3f47dbf5 3f4859c9 3f48d64d 3f495422     ..G?.YH?M.H?"TI?
24022ae8:	3f49cfff 3f4a49e4 3f4ac5c1 3f4b404f     ..I?.IJ?..J?O@K?
24022af8:	3f4bba34 3f4c341a 3f4cac08 3f4d25ee     4.K?.4L?..L?.%M?
24022b08:	3f4d9ddc 3f4e13d3 3f4e8bc1 3f4f01b8     ..M?..N?..N?..O?
24022b18:	3f4f77af 3f4fee4e 3f50624e 3f50d845     .wO?N.O?NbP?E.P?
24022b28:	3f514c44 3f51be4d 3f52324d 3f52a3ad     DLQ?M.Q?M2R?..R?
24022b38:	3f5315b5 3f5387be 3f53f7cf 3f5469d7     ..S?..S?..S?.iT?
24022b48:	3f54d9e8 3f554802 3f55b813 3f56262d     ..T?.HU?..U?-&V?
24022b58:	3f569446 3f5701b8 3f576ddb 3f57d9fd     F.V?..W?.mW?..W?
24022b68:	3f584620 3f58b242 3f591bc5 3f5985f0      FX?B.X?..Y?..Y?
24022b78:	3f59f01c 3f5a5a47 3f5ac1d3 3f5b2a06     ..Y?GZZ?..Z?.*[?
24022b88:	3f5b923a 3f5bf9c6 3f5c6003 3f5cc63f     :.[?..[?.`\??.\?
24022b98:	3f5d2bd4 3f5d9019 3f5df3b6 3f5e57fb     .+]?..]?..]?.W^?
24022ba8:	3f5ebc41 3f5f1de7 3f5f822c 3f5fe3d2     A.^?.._?,._?.._?
24022bb8:	3f604428 3f60a3d7 3f610625 3f6163dc     (D`?..`?%.a?.ca?
24022bc8:	3f61c433 3f6221ea 3f628049 3f62de01     3.a?.!b?I.b?..b?
24022bd8:	3f6339c1 3f639629 3f63f1e9 3f644e51     .9c?).c?..c?QNd?
24022be8:	3f64a81a 3f6501e2 3f655c53 3f65b61c     ..d?..e?S\e?..e?
24022bf8:	3f660ded 3f6665bf 3f66bc41 3f671412     ..f?.ef?A.f?..g?
24022c08:	3f6769ec 3f67bfc6 3f681451 3f686a2b     .ig?..g?Q.h?+jh?
24022c18:	3f68be0e 3f690ff9 3f6963dc 3f69b5c8     ..h?..i?.ci?..i?
24022c28:	3f6a07b3 3f6a584f 3f6aaa3b 3f6afa2f     ..j?OXj?;.j?/.j?
24022c38:	3f6b4a23 3f6b9820 3f6be61d 3f6c341a     #Jk? .k?..k?.4l?
24022c48:	3f6c8217 3f6cce1c 3f6d1a22 3f6d6627     ..l?..l?".m?'fm?
24022c58:	3f6db036 3f6dfc3b 3f6e4452 3f6e8db9     6.m?;.m?RDn?..n?
24022c68:	3f6ed5d0 3f6f1de7 3f6f65fe 3f6fae14     ..n?..o?.eo?..o?
24022c78:	3f6ff434 3f703a54 3f707dd4 3f70c3f4     4.o?T:p?.}p?..p?
24022c88:	3f71081c 3f714a4d 3f718dce 3f71cfff     ..q?MJq?..q?..q?
24022c98:	3f721230 3f7251c2 3f7293f3 3f72d235     0.r?.Qr?..r?5.r?
24022ca8:	3f7311c7 3f735200 3f739043 3f73cbe6     ..s?.Rs?C.s?..s?
24022cb8:	3f740a28 3f7445cc 3f748217 3f74bdba     (.t?.Et?..t?..t?
24022cc8:	3f74f80e 3f7531ba 3f756c0d 3f75a3c2     ..t?.1u?.lu?..u?
24022cd8:	3f75dc1e 3f7613d3 3f764c30 3f7681ed     ..u?..v?0Lv?..v?
24022ce8:	3f76b852 3f76ee0f 3f7721d5 3f775643     R.v?..v?.!w?CVw?
24022cf8:	3f778a09 3f77bbd8 3f77f045 3f78201d     ..w?..w?E.w?. x?
24022d08:	3f7851ec 3f7881c3 3f78b242 3f78e219     .Qx?..x?B.x?..x?
24022d18:	3f790ff9 3f793dd9 3f796bba 3f799a41     ..y?.=y?.ky?A.y?
24022d28:	3f79c62a 3f79f213 3f7a1c04 3f7a47ed     *.y?..y?..z?.Gz?
24022d38:	3f7a71de 3f7a99d9 3f7ac3ca 3f7aebc4     .qz?..z?..z?..z?
24022d48:	3f7b11c7 3f7b39c1 3f7b5fc4 3f7b85c6     ..{?.9{?._{?..{?
24022d58:	3f7ba9d2 3f7bcfd5 3f7bf3e0 3f7c15f4     ..{?..{?..{?..|?
24022d68:	3f7c3a00 3f7c5c14 3f7c7c31 3f7c9e45     .:|?.\|?1||?E.|?
24022d78:	3f7cbdba 3f7cddd7 3f7cfbfc 3f7d1a22     ..|?..|?..|?".}?
24022d88:	3f7d3847 3f7d55c5 3f7d71f3 3f7d8e22     G8}?.U}?.q}?".}?
24022d98:	3f7daa50 3f7dc3df 3f7dde16 3f7df84d     P.}?..}?..}?M.}?
24022da8:	3f7e11dc 3f7e2a1b 3f7e41b3 3f7e57fb     ..~?.*~?.A~?.W~?
24022db8:	3f7e6e44 3f7e83e4 3f7e9a2c 3f7eadd6     Dn~?..~?,.~?..~?
24022dc8:	3f7ec227 3f7ed5d0 3f7ee829 3f7ef9db     '.~?..~?).~?..~?
24022dd8:	3f7f0c35 3f7f1de7 3f7f2e49 3f7f3e03     5..?...?I..?.>.?
24022de8:	3f7f4bc7 3f7f5a32 3f7f67f5 3f7f75b8     .K.?2Z.?.g.?.u.?
24022df8:	3f7f822c 3f7f8df8 3f7f99c4 3f7fa440     ,..?...?...?@..?
24022e08:	3f7fb00c 3f7fb7e9 3f7fc1be 3f7fca43     ...?...?...?C..?
24022e18:	3f7fd220 3f7fd806 3f7fdfe3 3f7fe5c9      ..?...?...?...?
24022e28:	3f7fe9b8 3f7fee4e 3f7ff23d 3f7ff62b     ...?N..?=..?+..?
24022e38:	3f7ffa1a 3f7ffc11 3f7ffc11 3f7ffe09     ...?...?...?...?
24022e48:	3f7ffe09 3f7ffe09 3f7ffc11 3f7ffc11     ...?...?...?...?
24022e58:	3f7ffa1a 3f7ff62b 3f7ff23d 3f7fee4e     ...?+..?=..?N..?
24022e68:	3f7fe9b8 3f7fe5c9 3f7fdfe3 3f7fd806     ...?...?...?...?
24022e78:	3f7fd220 3f7fca43 3f7fc1be 3f7fb7e9      ..?C..?...?...?
24022e88:	3f7fb00c 3f7fa440 3f7f99c4 3f7f8df8     ...?@..?...?...?
24022e98:	3f7f822c 3f7f75b8 3f7f67f5 3f7f5a32     ,..?.u.?.g.?2Z.?
24022ea8:	3f7f4bc7 3f7f3e03 3f7f2e49 3f7f1de7     .K.?.>.?I..?...?
24022eb8:	3f7f0c35 3f7ef9db 3f7ee829 3f7ed5d0     5..?..~?).~?..~?
24022ec8:	3f7ec227 3f7eadd6 3f7e9a2c 3f7e83e4     '.~?..~?,.~?..~?
24022ed8:	3f7e6e44 3f7e57fb 3f7e41b3 3f7e2a1b     Dn~?.W~?.A~?.*~?
24022ee8:	3f7e11dc 3f7df84d 3f7dde16 3f7dc3df     ..~?M.}?..}?..}?
24022ef8:	3f7daa50 3f7d8e22 3f7d71f3 3f7d55c5     P.}?".}?.q}?.U}?
24022f08:	3f7d3847 3f7d1a22 3f7cfbfc 3f7cddd7     G8}?".}?..|?..|?
24022f18:	3f7cbdba 3f7c9e45 3f7c7c31 3f7c5c14     ..|?E.|?1||?.\|?
24022f28:	3f7c3a00 3f7c15f4 3f7bf3e0 3f7bcfd5     .:|?..|?..{?..{?
24022f38:	3f7ba9d2 3f7b85c6 3f7b5fc4 3f7b39c1     ..{?..{?._{?.9{?
24022f48:	3f7b11c7 3f7aebc4 3f7ac3ca 3f7a99d9     ..{?..z?..z?..z?
24022f58:	3f7a71de 3f7a47ed 3f7a1c04 3f79f213     .qz?.Gz?..z?..y?
24022f68:	3f79c62a 3f799a41 3f796bba 3f793dd9     *.y?A.y?.ky?.=y?
24022f78:	3f790ff9 3f78e219 3f78b242 3f7881c3     ..y?..x?B.x?..x?
24022f88:	3f7851ec 3f78201d 3f77f045 3f77bbd8     .Qx?. x?E.w?..w?
24022f98:	3f778a09 3f775643 3f7721d5 3f76ee0f     ..w?CVw?.!w?..v?
24022fa8:	3f76b852 3f7681ed 3f764c30 3f7613d3     R.v?..v?0Lv?..v?
24022fb8:	3f75dc1e 3f75a3c2 3f756c0d 3f7531ba     ..u?..u?.lu?.1u?
24022fc8:	3f74f80e 3f74bdba 3f748217 3f7445cc     ..t?..t?..t?.Et?
24022fd8:	3f740a28 3f73cbe6 3f739043 3f735200     (.t?..s?C.s?.Rs?
24022fe8:	3f7311c7 3f72d235 3f7293f3 3f7251c2     ..s?5.r?..r?.Qr?
24022ff8:	3f721230 3f71cfff 3f718dce 3f714a4d     0.r?..q?..q?MJq?
24023008:	3f71081c 3f70c3f4 3f707dd4 3f703a54     ..q?..p?.}p?T:p?
24023018:	3f6ff434 3f6fae14 3f6f65fe 3f6f1de7     4.o?..o?.eo?..o?
24023028:	3f6ed5d0 3f6e8db9 3f6e4452 3f6dfc3b     ..n?..n?RDn?;.m?
24023038:	3f6db036 3f6d6627 3f6d1a22 3f6cce1c     6.m?'fm?".m?..l?
24023048:	3f6c8217 3f6c341a 3f6be61d 3f6b9820     ..l?.4l?..k? .k?
24023058:	3f6b4a23 3f6afa2f 3f6aaa3b 3f6a584f     #Jk?/.j?;.j?OXj?
24023068:	3f6a07b3 3f69b5c8 3f6963dc 3f690ff9     ..j?..i?.ci?..i?
24023078:	3f68be0e 3f686a2b 3f681451 3f67bfc6     ..h?+jh?Q.h?..g?
24023088:	3f6769ec 3f671412 3f66bc41 3f6665bf     .ig?..g?A.f?.ef?
24023098:	3f660ded 3f65b61c 3f655c53 3f6501e2     ..f?..e?S\e?..e?
240230a8:	3f64a81a 3f644e51 3f63f1e9 3f639629     ..d?QNd?..c?).c?
240230b8:	3f6339c1 3f62de01 3f628049 3f6221ea     .9c?..b?I.b?.!b?
240230c8:	3f61c433 3f6163dc 3f610625 3f60a3d7     3.a?.ca?%.a?..`?
240230d8:	3f604428 3f5fe3d2 3f5f822c 3f5f1de7     (D`?.._?,._?.._?
240230e8:	3f5ebc41 3f5e57fb 3f5df3b6 3f5d9019     A.^?.W^?..]?..]?
240230f8:	3f5d2bd4 3f5cc63f 3f5c6003 3f5bf9c6     .+]??.\?.`\?..[?
24023108:	3f5b923a 3f5b2a06 3f5ac1d3 3f5a5a47     :.[?.*[?..Z?GZZ?
24023118:	3f59f01c 3f5985f0 3f591bc5 3f58b242     ..Y?..Y?..Y?B.X?
24023128:	3f584620 3f57d9fd 3f576ddb 3f5701b8      FX?..W?.mW?..W?
24023138:	3f569446 3f56262d 3f55b813 3f554802     F.V?-&V?..U?.HU?
24023148:	3f54d9e8 3f5469d7 3f53f7cf 3f5387be     ..T?.iT?..S?..S?
24023158:	3f5315b5 3f52a3ad 3f52324d 3f51be4d     ..S?..R?M2R?M.Q?
24023168:	3f514c44 3f50d845 3f50624e 3f4fee4e     DLQ?E.P?NbP?N.O?
24023178:	3f4f77af 3f4f01b8 3f4e8bc1 3f4e13d3     .wO?..O?..N?..N?
24023188:	3f4d9ddc 3f4d25ee 3f4cac08 3f4c341a     ..M?.%M?..L?.4L?
24023198:	3f4bba34 3f4b404f 3f4ac5c1 3f4a49e4     4.K?O@K?..J?.IJ?
240231a8:	3f49cfff 3f495422 3f48d64d 3f4859c9     ..I?"TI?M.H?.YH?
240231b8:	3f47dbf5 3f475e20 3f46e04c 3f4661d0     ..G? ^G?L.F?.aF?
240231c8:	3f45e204 3f456239 3f44e1c6 3f4461fa     ..E?9bE?..D?.aD?
240231d8:	3f43e037 3f435dcc 3f42dc0a 3f425a47     7.C?.]C?..B?GZB?
240231e8:	3f41d5e5 3f415422 3f40cfc0 3f404a0e     ..A?"TA?..@?.J@?
240231f8:	3f3fc5ac 3f3f3ffb 3f3eba49 3f3e33f0     ..??.???I.>?.3>?
24023208:	3f3dae3e 3f3d25ee 3f3c9e45 3f3c15f4     >.=?.%=?E.<?..<?
24023218:	3f3b8e4c 3f3b0404 3f3a79bc 3f39f01c     L.;?..;?.y:?..9?
24023228:	3f3965d4 3f38dc33 3f384ff4 3f37c3b5     .e9?3.8?.O8?..7?
24023238:	3f37381d 3f36abde 3f361e4f 3f359210     .87?..6?O.6?..5?
24023248:	3f3503da 3f347454 3f33e61d 3f3355ef     ..5?Tt4?..3?.U3?
24023258:	3f32c7b9 3f32363b 3f31a60d 3f3115df     ..2?;62?..1?..1?
24023268:	3f3083ba 3f2ff23d 3f2f6018 3f2ecdf2     ..0?=./?.`/?...?
24023278:	3f2e39d6 3f2da5b9 3f2d1245 3f2c7e28     .9.?..-?E.-?(~,?
24023288:	3f2bea0c 3f2b53f8 3f2abde4 3f2a27d0     ..+?.S+?..*?.'*?
24023298:	3f2991bc 3f28fc50 3f286445 3f27cc3a     ..)?P.(?Ed(?:.'?
240232a8:	3f27342f 3f269c24 3f260419 3f256a16     /4'?$.&?..&?.j%?
240232b8:	3f24d014 3f243611 3f239c0f 3f23020c     ..$?.6$?..#?..#?
240232c8:	3f226613 3f21ca19 3f212e1f 3f209225     .f"?..!?..!?%. ?
240232d8:	3f1ff62b 3f1f583a 3f1eba49 3f1e1bb0     +..?:X.?I..?...?
240232e8:	3f1d7dbf 3f1cdfce 3f1c3fe6 3f1b9ffd     .}.?...?.?.?...?
240232f8:	3f1b020c 3f1a602d 3f19c044 3f191fb4     ...?-`.?D..?...?
24023308:	3f187dd4 3f17dbf5 3f173a15 3f169835     .}.?...?.:.?5..?
24023318:	3f15f5ae 3f1551d7 3f14ae00 3f140a28     ...?.Q.?...?(..?
24023328:	3f136651 3f12c1d3 3f121dfc 3f11782d     Qf.?...?...?-x.?
24023338:	3f10d1b7 3f102be9 3f0f861a 3f0ee04c     ...?.+.?...?L..?
24023348:	3f0e37df 3f0d9019 3f0cea4b 3f0c41dd     .7.?...?K..?.A.?
24023358:	3f0b9820 3f0aefb3 3f0a47ed 3f099e30      ..?...?.G.?0..?
24023368:	3f08f3cb 3f084a0e 3f07a051 3f06f3f5     ...?.J.?Q..?...?
24023378:	3f064a38 3f059ddc 3f04f228 3f0447c3     8J.?...?(..?.G.?
24023388:	3f039a17 3f02edbb 3f024207 3f0193b4     ...?...?.B.?...?
24023398:	3f00e608 3f0037b5 3eff1412 3efdb76b     ...?.7.?...>k..>
240233a8:	3efc5c14 3efafb7f 3ef99c39 3ef83ba3     .\.>...>9..>.;.>
240233b8:	3ef6dc5d 3ef57bc8 3ef41c82 3ef2bbed     ]..>.{.>...>...>
240233c8:	3ef15769 3eeff434 3eee8fb0 3eed2c7c     iW.>4..>...>|,.>
240233d8:	3eebc7f7 3eea6373 3ee8fc50 3ee797cc     ...>sc.>P..>...>
240233e8:	3ee62f5a 3ee4c836 3ee35fc4 3ee1f8a1     Z/.>6..>._.>...>
240233f8:	3ee0902e 3edf23cd 3eddbb5a 3edc5048     ...>.#.>Z..>HP.>
24023408:	3edae3e7 3ed97785 3ed80c74 3ed6a012     ...>.w.>t..>...>
24023418:	3ed533b1 3ed3c361 3ed2584f 3ed0e7ff     .3.>a..>OX.>...>
24023428:	3ecf77af 3ece075f 3ecc985f 3ecb280f     .w.>_..>_..>.(.>
24023438:	3ec9b7bf 3ec84381 3ec6d480 3ec56042     ...>.C.>...>B`.>
24023448:	3ec3ec03 3ec277c4 3ec10386 3ebf9097     ...>.w.>...>...>
24023458:	3ebe1c58 3ebca42b 3ebb2fec 3eb9b7bf     X..>+..>./.>...>
24023468:	3eb83f92 3eb6cca3 3eb55476 3eb3d85a     .?.>...>vT.>Z..>
24023478:	3eb2602d 3eb0e7ff 3eaf6fd2 3eadf3b6     -`.>...>.o.>...>
24023488:	3eac7b89 3eaaff6d 3ea984a1 3ea80885     .{.>m..>...>...>
24023498:	3ea68c69 3ea5104d 3ea39431 3ea21427     i..>M..>1..>'..>
240234a8:	3ea0980b 3e9f1bef 3e9d9be5 3e9c1bda     ...>...>...>...>
240234b8:	3e9a9bd0 3e991fb4 3e979fa9 3e961f9f     ...>...>...>...>
240234c8:	3e949ba6 3e931b9b 3e919b91 3e901798     ...>...>...>...>
240234d8:	3e8e978d 3e8d1394 3e8b938a 3e8a0f91     ...>...>...>...>
240234e8:	3e888b97 3e87079e 3e8583a5 3e83ffac     ...>...>...>...>
240234f8:	3e827bb3 3e80f7ba 3e7edfa4 3e7bd7b2     .{.>...>..~>..{>
24023508:	3e78c7e3 3e75bff0 3e72b021 3e6fa051     ..x>..u>!.r>Q.o>
24023518:	3e6c985f 3e698890 3e6678c0 3e6368f1     _.l>..i>.xf>.hc>
24023528:	3e605921 3e5d46b2 3e5a36e3 3e571f36     !Y`>.F]>.6Z>6.W>
24023538:	3e540f67 3e50ff97 3e4de7ea 3e4ad81b     g.T>..P>..M>..J>
24023548:	3e47c06e 3e44a8c1 3e4198f2 3e3e8145     n.G>..D>..A>E.>>
24023558:	3e3b66f9 3e384f4c 3e3537a0 3e3227d0     .f;>LO8>.75>.'2>
24023568:	3e2f0846 3e2bf099 3e28d8ed 3e25c140     F./>..+>..(>@.%>
24023578:	3e22a6f4 3e1f8f47 3e1c6fbd 3e195810     ..">G..>.o.>.X.>
24023588:	3e163886 3e1320da 3e10092d 3e0ce704     .8.>. .>-..>...>
24023598:	3e09c77a 3e06afcd 3e039043 3e0070b9     z..>...>C..>.p.>
240235a8:	3dfab218 3df46dc6 3dee2eb2 3de7ef9e     ...=.m.=...=...=
240235b8:	3de1b08a 3ddb7176 3dd53261 3dceee0f     ...=vq.=a2.=...=
240235c8:	3dc8aefb 3dc26fe7 3dbc30d3 3db5f1bf     ...=.o.=.0.=...=
240235d8:	3dafad6d 3da96e59 3da31f8a 3d9ce076     m..=Yn.=...=v..=
240235e8:	3d96a162 3d90624e 3d8a0e41 3d83cf2d     b..=Nb.=A..=-..=
240235f8:	3d7b2032 3d6e8295 3d62046c 3d557bc8     2 {=..n=l.b=.{U=
24023608:	3d48de2b 3d3c6003 3d2fc265 3d23443d     +.H=.`<=e./==D#=
24023618:	3d16bb99 3d0a1dfc 3cfb3fa7 3ce2046c     ...=...=.?.<l..<
24023628:	3cc9081c 3cafb7e9 3c96bb99 3c7b00bd     ...<...<...<..{<
24023638:	3c49081c 3c1691a7 3bc8de2b 3b47e282     ..I<...<+..;..G;
24023648:	00000000 bb49d9d3 bbc9d9d3 bc170f7c     ......I.....|...
24023658:	bc4985f0 bc7b7e91 bc96fa83 bcaff6d3     ..I..~{.........
24023668:	bcc94706 bce24357 bcfb7e91 bd0a3d71     .G..WC...~..q=..
24023678:	bd16db0e bd2363b2 bd2fe1da bd3c7f78     .....c#.../.x.<.
24023688:	bd48fda0 bd559b3d bd6223e2 bd6ea20a     ..H.=.U..#b...n.
24023698:	bd7b3fa7 bd83dee8 bd8a1dfc bd907208     .?{..........r..
240236a8:	bd96b11c bd9cf030 bda32f45 bda97e13     ....0...E/...~..
240236b8:	bdafc265 bdb60179 bdbc408e bdc27fa2     e...y....@......
240236c8:	bdc8beb6 bdcefdca bdd5421c bddb8130     .........B..0...
240236d8:	bde1c044 bde7ff58 bdee3e6c bdf47d80     D...X...l>...}..
240236e8:	bdfac1d3 be007896 be039820 be06b7aa     .....x.. .......
240236f8:	be09cf57 be0ceee1 be10110a be1328b7     W............(..
24023708:	be164064 be195fee be1c779a be1f9724     d@..._...w..$...
24023718:	be22aed1 be25c91d be28e0ca be2bf877     .."...%...(.w.+.
24023728:	be2f1023 be322fad be353f7d be38572a     #./../2.}?5.*W8.
24023738:	be3b6ed6 be3e8922 be41a0cf be44b09f     .n;.".>...A...D.
24023748:	be47c84b be4adff8 be4defc8 be510774     K.G...J...M.t.Q.
24023758:	be541744 be572713 be5a3ec0 be5d512f     D.T..'W..>Z./Q].
24023768:	be6060fe be6370ce be66809d be69906d     .``..pc...f.m.i.
24023778:	be6ca03c be6fa82f be72b7fe be75c7ce     <.l./.o...r...u.
24023788:	be78cfc0 be7bdf8f be7ee782 be80fba9     ..x...{...~.....
24023798:	be827fa2 be84039b be858794 be870b8d     ................
240237a8:	be888f86 be8a137f be8b9778 be8d1783     ........x.......
240237b8:	be8e9b7c be901b86 be919f80 be931f8a     |...............
240237c8:	be949f95 be96238e be97a398 be9923a3     .....#.......#..
240237d8:	be9a9fbe be9c1fc9 be9d9fd3 be9f1fde     ................
240237e8:	bea09bfa bea21816 bea39820 bea5143c     ........ ...<...
240237f8:	bea69058 bea80c74 bea98890 beab035c     X...t.......\...
24023808:	beac7f78 beadf7a5 beaf73c1 beb0ebee     x........s......
24023818:	beb2641b beb3dc48 beb55864 beb6d091     .d..H...dX......
24023828:	beb84381 beb9bbae bebb33db bebca81a     .C.......3......
24023838:	bebe2047 bebf9485 bec10774 bec27bb3     G ......t....{..
24023848:	bec3eff2 bec56430 bec6d86f bec8476f     ....0d..o...oG..
24023858:	bec9bbae becb2bfe becc9c4e bece0c9e     .....+..N.......
24023868:	becf7b9e bed0ebee bed25c3e bed3c89f     .{......>\......
24023878:	bed537a0 bed6a401 bed81062 bed97b74     .7......b...t{..
24023888:	bedae7d5 bedc5437 beddc098 bedf27bb     ....7T.......'..
24023898:	bee0941d bee1fc8f bee363b2 bee4cc25     .........c..%...
240238a8:	bee63498 bee79bbb bee9003f beea6762     .4......?...bg..
240238b8:	beebcbe6 beed306a beee939f beeff823     ....j0......#...
240238c8:	bef15ca7 bef2bfdb bef42071 bef57fb7     .\......q ......
240238d8:	bef6e04c bef83f92 bef9a027 befaff6d     L....?..'...m...
240238e8:	befc6003 befdbb5a beff1801 bf003a54     .`..Z.......T:..
240238f8:	bf00e7ff bf019653 bf0243fe bf02efb3     ....S....C......
24023908:	bf039c0f bf0449ba bf04f41f bf059fd3     .....I..........
24023918:	bf064c30 bf06f5ed bf07a249 bf084c06     0L......I....L..
24023928:	bf08f5c3 bf09a027 bf0a49e4 bf0af252     ....'....I..R...
24023938:	bf0b9a17 bf0c43d4 bf0cec42 bf0d9210     .....C..B.......
24023948:	bf0e39d6 bf0ee243 bf0f8812 bf102de0     .9..C........-..
24023958:	bf10d3ae bf117a25 bf121ff3 bf12c3ca     ....%z..........
24023968:	bf136849 bf140c20 bf14aff7 bf1553ce     Ih.. ........S..
24023978:	bf15f84d bf169a2c bf173c0c bf17ddec     M...,....<......
24023988:	bf187fcc bf192253 bf19c23b bf1a6224     ....S"..;...$b..
24023998:	bf1b0404 bf1ba1f5 bf1c41dd bf1ce1c6     .........A......
240239a8:	bf1d7fb7 bf1e1e4f bf1ebc41 bf1f5a32     ....O...A...2Z..
240239b8:	bf1ff823 bf20941d bf213016 bf21cc10     #..... ..0!...!.
240239c8:	bf22680a bf230404 bf239e06 bf243809     .h"...#...#..8$.
240239d8:	bf24d20b bf256c0d bf260610 bf269e1b     ..$..l%...&...&.
240239e8:	bf273626 bf27ce31 bf28663c bf28fe48     &6'.1.'.<f(.H.(.
240239f8:	bf2993b4 bf2a29c7 bf2abfdb bf2b55ef     ..)..)*...*..U+.
24023a08:	bf2bec03 bf2c801f bf2d143c bf2da7b1     ..+...,.<.-...-.
24023a18:	bf2e3bcd bf2ecfea bf2f620f bf2ff434     .;.......b/.4./.
24023a28:	bf3085b2 bf3117d7 bf31a805 bf323832     ..0...1...1.282.
24023a38:	bf32c9b0 bf3357e6 bf33e814 bf34764b     ..2..W3...3.Kv4.
24023a48:	bf3505d1 bf359408 bf362047 bf36add6     ..5...5.G 6...6.
24023a58:	bf373a15 bf37c5ac bf3851ec bf38de2b     .:7...7..Q8.+.8.
24023a68:	bf3967cb bf39f213 bf3a7bb3 bf3b05fb     .g9...9..{:...;.
24023a78:	bf3b9043 bf3c17ec bf3ca03c bf3d27e5     C.;...<.<.<..'=.
24023a88:	bf3db036 bf3e35e7 bf3ebc41 bf3f41f2     6.=..5>.A.>..A?.
24023a98:	bf3fc84b bf404c06 bf40d1b7 bf415619     K.?..L@...@..VA.
24023aa8:	bf41d7dc bf425c3e bf42de01 bf435fc4     ..A.>\B...B.._C.
24023ab8:	bf43e22e bf4463f1 bf44e3bd bf456430     ..C..cD...D.0dE.
24023ac8:	bf45e3fc bf4663c7 bf46e243 bf476018     ..E..cF.C.F..`G.
24023ad8:	bf47ddec bf485bc0 bf48d845 bf495619     ..G..[H.E.H..VI.
24023ae8:	bf49d1f6 bf4a4bdc bf4ac7b9 bf4b4246     ..I..KJ...J.FBK.
24023af8:	bf4bbc2c bf4c3611 bf4cae00 bf4d27e5     ,.K..6L...L..'M.
24023b08:	bf4d9fd3 bf4e15ca bf4e8db9 bf4f03b0     ..M...N...N...O.
24023b18:	bf4f7a4e bf4ff045 bf506445 bf50da3c     NzO.E.O.EdP.<.P.
24023b28:	bf514e3c bf51c044 bf523444 bf52a64c     <NQ.D.Q.D4R.L.R.
24023b38:	bf5317ad bf5389b5 bf53f9c6 bf546bcf     ..S...S...S..kT.
24023b48:	bf54dbe0 bf5549f9 bf55ba0a bf562824     ..T..IU...U.$(V.
24023b58:	bf56963e bf5703b0 bf576fd2 bf57dbf5     >.V...W..oW...W.
24023b68:	bf584817 bf58b439 bf591dbd bf5987e8     .HX.9.X...Y...Y.
24023b78:	bf59f213 bf5a5c3e bf5ac3ca bf5b2bfe     ..Y.>\Z...Z..+[.
24023b88:	bf5b9431 bf5bfbbd bf5c61fa bf5cc836     1.[...[..a\.6.\.
24023b98:	bf5d2dcb bf5d9210 bf5df5ae bf5e59f3     .-]...]...]..Y^.
24023ba8:	bf5ebe38 bf5f1fde bf5f8423 bf5fe5c9     8.^..._.#._..._.
24023bb8:	bf604620 bf60a5ce bf61081c bf6165d4      F`...`...a..ea.
24023bc8:	bf61c62a bf6223e2 bf628241 bf62dff8     *.a..#b.A.b...b.
24023bd8:	bf633bb8 bf639820 bf63f3e0 bf645048     .;c. .c...c.HPd.
24023be8:	bf64aa11 bf6503da bf655e4a bf65b813     ..d...e.J^e...e.
24023bf8:	bf660fe4 bf6667b6 bf66be38 bf671609     ..f..gf.8.f...g.
24023c08:	bf676be3 bf67c1be bf681648 bf686c22     .kg...g.H.h."lh.
24023c18:	bf68c005 bf6911f1 bf6965d4 bf69b7bf     ..h...i..ei...i.
24023c28:	bf6a0a52 bf6a5a47 bf6aac32 bf6afc26     R.j.GZj.2.j.&.j.
24023c38:	bf6b4c1b bf6b9a17 bf6be814 bf6c3611     .Lk...k...k..6l.
24023c48:	bf6c840e bf6cd014 bf6d1c19 bf6d681f     ..l...l...m..hm.
24023c58:	bf6db22d bf6dfe33 bf6e464a bf6e8fb0     -.m.3.m.JFn...n.
24023c68:	bf6ed7c7 bf6f1fde bf6f67f5 bf6fb00c     ..n...o..go...o.
24023c78:	bf6ff62b bf703c4b bf707fcc bf70c5eb     +.o.K<p...p...p.
24023c88:	bf710a13 bf714c44 bf718fc5 bf71d1f6     ..q.DLq...q...q.
24023c98:	bf721427 bf7253b9 bf7295ea bf72d42c     '.r..Sr...r.,.r.
24023ca8:	bf7313be bf7353f8 bf73923a bf73cddd     ..s..Ss.:.s...s.
24023cb8:	bf740c20 bf7447c3 bf74840e bf74bfb1      .t..Gt...t...t.
24023cc8:	bf74fa05 bf7533b1 bf756e05 bf75a5b9     ..t..3u..nu...u.
24023cd8:	bf75de16 bf7615ca bf764e27 bf7683e4     ..u...v.'Nv...v.
24023ce8:	bf76ba49 bf76f007 bf7723cd bf77583a     I.v...v..#w.:Xw.
24023cf8:	bf778c00 bf77bdcf bf77f23d bf782214     ..w...w.=.w.."x.
24023d08:	bf7853e3 bf7883ba bf78b439 bf78e411     .Sx...x.9.x...x.
24023d18:	bf7911f1 bf793fd1 bf796db1 bf799c39     ..y..?y..my.9.y.
24023d28:	bf79c821 bf79f40a bf7a1dfc bf7a49e4     !.y...y...z..Iz.
24023d38:	bf7a73d6 bf7a9bd0 bf7ac5c1 bf7aedbb     .sz...z...z...z.
24023d48:	bf7b13be bf7b3bb8 bf7b61bb bf7b87be     ..{..;{..a{...{.
24023d58:	bf7babc9 bf7bd1cc bf7bf5d8 bf7c17ec     ..{...{...{...|.
24023d68:	bf7c3bf7 bf7c5e0b bf7c7e28 bf7ca03c     .;|..^|.(~|.<.|.
24023d78:	bf7cbfb1 bf7cdfce bf7cfdf4 bf7d1c19     ..|...|...|...}.
24023d88:	bf7d3a3f bf7d57bc bf7d73eb bf7d9019     ?:}..W}..s}...}.
24023d98:	bf7dac47 bf7dc5d6 bf7de00d bf7dfa44     G.}...}...}.D.}.
24023da8:	bf7e13d3 bf7e2c13 bf7e4452 bf7e59f3     ..~..,~.RD~..Y~.
24023db8:	bf7e703b bf7e85db bf7e9c24 bf7eafcd     ;p~...~.$.~...~.
24023dc8:	bf7ec41e bf7ed7c7 bf7eea21 bf7efbd2     ..~...~.!.~...~.
24023dd8:	bf7f0e2c bf7f1fde bf7f3040 bf7f3ffb     ,.......@0...?..
24023de8:	bf7f4dbe bf7f5c29 bf7f69ec bf7f77af     .M..)\...i...w..
24023df8:	bf7f8423 bf7f8fef bf7f9bbb bf7fa637     #...........7...
24023e08:	bf7fb203 bf7fb9e0 bf7fc3b5 bf7fcc3a     ............:...
24023e18:	bf7fd417 bf7fd9fd bf7fe1da bf7fe7c0     ................
24023e28:	bf7febaf bf7ff045 bf7ff434 bf7ff823     ....E...4...#...
24023e38:	bf7ffc11 bf7ffe09 bf7ffe09 bf800000     ................
24023e48:	bf800000 bf800000 bf7ffe09 bf7ffe09     ................
24023e58:	bf7ffc11 bf7ff823 bf7ff434 bf7ff045     ....#...4...E...
24023e68:	bf7febaf bf7fe7c0 bf7fe1da bf7fd9fd     ................
24023e78:	bf7fd417 bf7fcc3a bf7fc3b5 bf7fb9e0     ....:...........
24023e88:	bf7fb203 bf7fa637 bf7f9bbb bf7f8fef     ....7...........
24023e98:	bf7f8423 bf7f77af bf7f69ec bf7f5c29     #....w...i..)\..
24023ea8:	bf7f4dbe bf7f3ffb bf7f3040 bf7f1fde     .M...?..@0......
24023eb8:	bf7f0e2c bf7efbd2 bf7eea21 bf7ed7c7     ,.....~.!.~...~.
24023ec8:	bf7ec41e bf7eafcd bf7e9c24 bf7e85db     ..~...~.$.~...~.
24023ed8:	bf7e703b bf7e59f3 bf7e4452 bf7e2c13     ;p~..Y~.RD~..,~.
24023ee8:	bf7e13d3 bf7dfa44 bf7de00d bf7dc5d6     ..~.D.}...}...}.
24023ef8:	bf7dac47 bf7d9019 bf7d73eb bf7d57bc     G.}...}..s}..W}.
24023f08:	bf7d3a3f bf7d1c19 bf7cfdf4 bf7cdfce     ?:}...}...|...|.
24023f18:	bf7cbfb1 bf7ca03c bf7c7e28 bf7c5e0b     ..|.<.|.(~|..^|.
24023f28:	bf7c3bf7 bf7c17ec bf7bf5d8 bf7bd1cc     .;|...|...{...{.
24023f38:	bf7babc9 bf7b87be bf7b61bb bf7b3bb8     ..{...{..a{..;{.
24023f48:	bf7b13be bf7aedbb bf7ac5c1 bf7a9bd0     ..{...z...z...z.
24023f58:	bf7a73d6 bf7a49e4 bf7a1dfc bf79f40a     .sz..Iz...z...y.
24023f68:	bf79c821 bf799c39 bf796db1 bf793fd1     !.y.9.y..my..?y.
24023f78:	bf7911f1 bf78e411 bf78b439 bf7883ba     ..y...x.9.x...x.
24023f88:	bf7853e3 bf782214 bf77f23d bf77bdcf     .Sx.."x.=.w...w.
24023f98:	bf778c00 bf77583a bf7723cd bf76f007     ..w.:Xw..#w...v.
24023fa8:	bf76ba49 bf7683e4 bf764e27 bf7615ca     I.v...v.'Nv...v.
24023fb8:	bf75de16 bf75a5b9 bf756e05 bf7533b1     ..u...u..nu..3u.
24023fc8:	bf74fa05 bf74bfb1 bf74840e bf7447c3     ..t...t...t..Gt.
24023fd8:	bf740c20 bf73cddd bf73923a bf7353f8      .t...s.:.s..Ss.
24023fe8:	bf7313be bf72d42c bf7295ea bf7253b9     ..s.,.r...r..Sr.
24023ff8:	bf721427 bf71d1f6 bf718fc5 bf714c44     '.r...q...q.DLq.
24024008:	bf710a13 bf70c5eb bf707fcc bf703c4b     ..q...p...p.K<p.
24024018:	bf6ff62b bf6fb00c bf6f67f5 bf6f1fde     +.o...o..go...o.
24024028:	bf6ed7c7 bf6e8fb0 bf6e464a bf6dfe33     ..n...n.JFn.3.m.
24024038:	bf6db22d bf6d681f bf6d1c19 bf6cd014     -.m..hm...m...l.
24024048:	bf6c840e bf6c3611 bf6be814 bf6b9a17     ..l..6l...k...k.
24024058:	bf6b4c1b bf6afc26 bf6aac32 bf6a5a47     .Lk.&.j.2.j.GZj.
24024068:	bf6a0a52 bf69b7bf bf6965d4 bf6911f1     R.j...i..ei...i.
24024078:	bf68c005 bf686c22 bf681648 bf67c1be     ..h."lh.H.h...g.
24024088:	bf676be3 bf671609 bf66be38 bf6667b6     .kg...g.8.f..gf.
24024098:	bf660fe4 bf65b813 bf655e4a bf6503da     ..f...e.J^e...e.
240240a8:	bf64aa11 bf645048 bf63f3e0 bf639820     ..d.HPd...c. .c.
240240b8:	bf633bb8 bf62dff8 bf628241 bf6223e2     .;c...b.A.b..#b.
240240c8:	bf61c62a bf6165d4 bf61081c bf60a5ce     *.a..ea...a...`.
240240d8:	bf604620 bf5fe5c9 bf5f8423 bf5f1fde      F`..._.#._..._.
240240e8:	bf5ebe38 bf5e59f3 bf5df5ae bf5d9210     8.^..Y^...]...].
240240f8:	bf5d2dcb bf5cc836 bf5c61fa bf5bfbbd     .-].6.\..a\...[.
24024108:	bf5b9431 bf5b2bfe bf5ac3ca bf5a5c3e     1.[..+[...Z.>\Z.
24024118:	bf59f213 bf5987e8 bf591dbd bf58b439     ..Y...Y...Y.9.X.
24024128:	bf584817 bf57dbf5 bf576fd2 bf5703b0     .HX...W..oW...W.
24024138:	bf56963e bf562824 bf55ba0a bf5549f9     >.V.$(V...U..IU.
24024148:	bf54dbe0 bf546bcf bf53f9c6 bf5389b5     ..T..kT...S...S.
24024158:	bf5317ad bf52a64c bf523444 bf51c044     ..S.L.R.D4R.D.Q.
24024168:	bf514e3c bf50da3c bf506445 bf4ff045     <NQ.<.P.EdP.E.O.
24024178:	bf4f7a4e bf4f03b0 bf4e8db9 bf4e15ca     NzO...O...N...N.
24024188:	bf4d9fd3 bf4d27e5 bf4cae00 bf4c3611     ..M..'M...L..6L.
24024198:	bf4bbc2c bf4b4246 bf4ac7b9 bf4a4bdc     ,.K.FBK...J..KJ.
240241a8:	bf49d1f6 bf495619 bf48d845 bf485bc0     ..I..VI.E.H..[H.
240241b8:	bf47ddec bf476018 bf46e243 bf4663c7     ..G..`G.C.F..cF.
240241c8:	bf45e3fc bf456430 bf44e3bd bf4463f1     ..E.0dE...D..cD.
240241d8:	bf43e22e bf435fc4 bf42de01 bf425c3e     ..C.._C...B.>\B.
240241e8:	bf41d7dc bf415619 bf40d1b7 bf404c06     ..A..VA...@..L@.
240241f8:	bf3fc84b bf3f41f2 bf3ebc41 bf3e35e7     K.?..A?.A.>..5>.
24024208:	bf3db036 bf3d27e5 bf3ca03c bf3c17ec     6.=..'=.<.<...<.
24024218:	bf3b9043 bf3b05fb bf3a7bb3 bf39f213     C.;...;..{:...9.
24024228:	bf3967cb bf38de2b bf3851ec bf37c5ac     .g9.+.8..Q8...7.
24024238:	bf373a15 bf36add6 bf362047 bf359408     .:7...6.G 6...5.
24024248:	bf3505d1 bf34764b bf33e814 bf3357e6     ..5.Kv4...3..W3.
24024258:	bf32c9b0 bf323832 bf31a805 bf3117d7     ..2.282...1...1.
24024268:	bf3085b2 bf2ff434 bf2f620f bf2ecfea     ..0.4./..b/.....
24024278:	bf2e3bcd bf2da7b1 bf2d143c bf2c801f     .;....-.<.-...,.
24024288:	bf2bec03 bf2b55ef bf2abfdb bf2a29c7     ..+..U+...*..)*.
24024298:	bf2993b4 bf28fe48 bf28663c bf27ce31     ..).H.(.<f(.1.'.
240242a8:	bf273626 bf269e1b bf260610 bf256c0d     &6'...&...&..l%.
240242b8:	bf24d20b bf243809 bf239e06 bf230404     ..$..8$...#...#.
240242c8:	bf22680a bf21cc10 bf213016 bf20941d     .h"...!..0!... .
240242d8:	bf1ff823 bf1f5a32 bf1ebc41 bf1e1e4f     #...2Z..A...O...
240242e8:	bf1d7fb7 bf1ce1c6 bf1c41dd bf1ba1f5     .........A......
240242f8:	bf1b0404 bf1a6224 bf19c23b bf192253     ....$b..;...S"..
24024308:	bf187fcc bf17ddec bf173c0c bf169a2c     .........<..,...
24024318:	bf15f84d bf1553ce bf14aff7 bf140c20     M....S...... ...
24024328:	bf136849 bf12c3ca bf121ff3 bf117a25     Ih..........%z..
24024338:	bf10d3ae bf102de0 bf0f8812 bf0ee243     .....-......C...
24024348:	bf0e39d6 bf0d9210 bf0cec42 bf0c43d4     .9......B....C..
24024358:	bf0b9a17 bf0af252 bf0a49e4 bf09a027     ....R....I..'...
24024368:	bf08f5c3 bf084c06 bf07a249 bf06f5ed     .....L..I.......
24024378:	bf064c30 bf059fd3 bf04f41f bf0449ba     0L...........I..
24024388:	bf039c0f bf02efb3 bf0243fe bf019653     .........C..S...
24024398:	bf00e7ff bf003a54 beff1801 befdbb5a     ....T:......Z...
240243a8:	befc6003 befaff6d bef9a027 bef83f92     .`..m...'....?..
240243b8:	bef6e04c bef57fb7 bef42071 bef2bfdb     L.......q ......
240243c8:	bef15ca7 beeff823 beee939f beed306a     .\..#.......j0..
240243d8:	beebcbe6 beea6762 bee9003f bee79bbb     ....bg..?.......
240243e8:	bee63498 bee4cc25 bee363b2 bee1fc8f     .4..%....c......
240243f8:	bee0941d bedf27bb beddc098 bedc5437     .....'......7T..
24024408:	bedae7d5 bed97b74 bed81062 bed6a401     ....t{..b.......
24024418:	bed537a0 bed3c89f bed25c3e bed0ebee     .7......>\......
24024428:	becf7b9e bece0c9e becc9c4e becb2bfe     .{......N....+..
24024438:	bec9bbae bec8476f bec6d86f bec56430     ....oG..o...0d..
24024448:	bec3eff2 bec27bb3 bec10774 bebf9485     .....{..t.......
24024458:	bebe2047 bebca81a bebb33db beb9bbae     G .......3......
24024468:	beb84381 beb6d091 beb55864 beb3dc48     .C......dX..H...
24024478:	beb2641b beb0ebee beaf73c1 beadf7a5     .d.......s......
24024488:	beac7f78 beab035c bea98890 bea80c74     x...\.......t...
24024498:	bea69058 bea5143c bea39820 bea21816     X...<... .......
240244a8:	bea09bfa be9f1fde be9d9fd3 be9c1fc9     ................
240244b8:	be9a9fbe be9923a3 be97a398 be96238e     .....#.......#..
240244c8:	be949f95 be931f8a be919f80 be901b86     ................
240244d8:	be8e9b7c be8d1783 be8b9778 be8a137f     |.......x.......
240244e8:	be888f86 be870b8d be858794 be84039b     ................
240244f8:	be827fa2 be80fba9 be7ee782 be7bdf8f     ..........~...{.
24024508:	be78cfc0 be75c7ce be72b7fe be6fa82f     ..x...u...r./.o.
24024518:	be6ca03c be69906d be66809d be6370ce     <.l.m.i...f..pc.
24024528:	be6060fe be5d512f be5a3ec0 be572713     .``./Q]..>Z..'W.
24024538:	be541744 be510774 be4defc8 be4adff8     D.T.t.Q...M...J.
24024548:	be47c84b be44b09f be41a0cf be3e8922     K.G...D...A.".>.
24024558:	be3b6ed6 be38572a be353f7d be322fad     .n;.*W8.}?5../2.
24024568:	be2f1023 be2bf877 be28e0ca be25c91d     #./.w.+...(...%.
24024578:	be22aed1 be1f9724 be1c779a be195fee     ..".$....w..._..
24024588:	be164064 be1328b7 be10110a be0ceee1     d@...(..........
24024598:	be09cf57 be06b7aa be039820 be007896     W....... ....x..
240245a8:	bdfac1d3 bdf47d80 bdee3e6c bde7ff58     .....}..l>..X...
240245b8:	bde1c044 bddb8130 bdd5421c bdcefdca     D...0....B......
240245c8:	bdc8beb6 bdc27fa2 bdbc408e bdb60179     .........@..y...
240245d8:	bdafc265 bda97e13 bda32f45 bd9cf030     e....~..E/..0...
240245e8:	bd96b11c bd907208 bd8a1dfc bd83dee8     .....r..........
240245f8:	bd7b3fa7 bd6ea20a bd6223e2 bd559b3d     .?{...n..#b.=.U.
24024608:	bd48fda0 bd3c7f78 bd2fe1da bd2363b2     ..H.x.<.../..c#.
24024618:	bd16db0e bd0a3d71 bcfb7e91 bce24357     ....q=...~..WC..
24024628:	bcc94706 bcaff6d3 bc96fa83 bc7b7e91     .G...........~{.
24024638:	bc4985f0 bc170f7c bbc9d9d3 bb49d9d3     ..I.|.........I.

24024648 <slope_dd_table>:
	...
240246e4:	2cab8ce3 2d68347f 2deb01ac 2e544fe2     ...,.4h-...-.OT.
240246f4:	2eb4d9a2 2f1478c0 2f6d355b 2fb9305e     .....x./[5m/^0./
24024704:	300d9bec 30546b62 309c713f 30e28342     ...0bkT0?q.0B..0
24024714:	31215d25 316277dc 319cb3d0 31d609f3     %]!1.wb1...1...1
24024724:	321068d1 3240ab9c 327e5e66 32a64673     .h.2..@2f^~2sF.2
24024734:	32d7679c 330a5764 3330496c 335ef8ba     .g.2dW.3lI03..^3
24024744:	338c0709 33aeb9ae 33d8adc2 340592c9     ...3...3...3...4
24024754:	3423c86b 3447c905 347281d6 34927fa8     k.#4..G4..r4...4
24024764:	34b03812 34d3147a 34fbd406 3515a661     .8.4z..4...4a..5
24024774:	353136ea 355120e8 3575f8a9 3590316c     .615. Q5..u5l1.5
24024784:	35a88b00 35c46df5 35e449d3 36044cb4     ...5.m.5.I.5.L.6
24024794:	3618f201 36305f16 364ae57f 3668de86     ...6._06..J6..h6
240247a4:	368555ed 36985c1c 36adbc07 36c5b517     .U.6.\.6...6...6
240247b4:	36e08c51 36fe8cae 371003cc 3722aaa7     Q..6...6...7.."7
240247c4:	37376ab0 374e7796 37680929 37822de0     .j77.wN7).h7.-.7
240247d4:	3791d827 37a3266e 37b63e57 37cb4867     '..7n&.7W>.7gH.7
240247e4:	37e2701a 37fbe415 380beb2e 381b3e47     .p.7...7...8G>.8
240247f4:	382c07fc 383e66f3 38527bee 386869e2     ..,8.f>8.{R8.ih8
24024804:	38802b0b 388d3423 389b6562 38aad54a     .+.8#4.8be.8J..8
24024814:	38bb9bce 38cdd25a 38e193ee 38f6fd38     ...8Z..8...88..8
24024824:	3907164c 3913a123 3921301d 392fd553     L..9#..9.0!9S./9
24024834:	393fa3cd 3950afad 39630e43 3976d600     ..?9..P9C.c9..v9
24024844:	39860f46 39918074 399dcbac 39aafec7     F..9t..9...9...9
24024854:	39b92855 39c857a7 39d89cd5 39ea08cb     U(.9.W.9...9...9
24024864:	39fcad41 3a084e6f 3a12f592 3a1e5647     A..9oN.:...:GV.:
24024874:	3a2a7b43 3a376fc2 3a453f7f 3a53f6c4     C{*:.o7:.?E:..S:
24024884:	3a63a266 3a744fcf 3a830681 3a8c744b     f.c:.Ot:...:Kt.:
24024894:	3a9678ed 3aa11c4d 3aac66c8 3ab860eb     .x.:M..:.f.:.`.:
240248a4:	3ac513c6 3ad288a3 3ae0c93f 3aefdfc4     ...:...:?..:...:
240248b4:	3affd6a9 3b085c70 3b1148db 3b1ab683     ...:p\.;.H.;...;
240248c4:	3b24ab75 3b2f2e12 3b3a44e0 3b45f6af     u.$;../;.D:;..E;
240248d4:	3b524a8c 3b5f47b9 3b6cf5c4 3b7b5c7a     .JR;.G_;..l;z\{;
240248e4:	3b8541f6 3b8d3a34 3b959b48 3b9e699e     .A.;4:.;H..;.i.;
240248f4:	3ba7a9d0 3bb16098 3bbb92d5 3bc6458e     ...;.`.;...;.E.;
24024904:	3bd17df1 3bdd4153 3be99532 3bf67f36     .}.;SA.;2..;6..;
24024914:	3c020297 3c09168a 3c107e87 3c183db6     ...<...<.~.<.=.<
24024924:	3c205754 3c28ceb6 3c31a742 3c3ae482     TW <..(<B.1<..:<
24024934:	3c448a08 3c4e9b84 3c591cbc 3c64118d     ..D<..N<..Y<..d<
24024944:	3c6f7de7 3c7b65dd 3c83e6ca 3c8a5ca0     .}o<.e{<...<.\.<
24024954:	3c91169e 3c9816f8 3c9f5ff2 3ca6f3da     ...<...<._.<...<
24024964:	3caed50a 3cb705eb 3cbf88ec 3cc8608c     ...<...<...<.`.<
24024974:	3cd18f5a 3cdb17e9 3ce4fcdf 3cef40eb     Z..<...<...<.@.<
24024984:	3cf9e6c1 3d027898 3d083185 3d0e1f93     ...<.x.=.1.=...=
24024994:	3d14443a 3d1aa0f3 3d213740 3d2808a3     :D.=...=@7!=..(=
240249a4:	3d2f16a6 3d3662de 3d3deede 3d45bc3f     ../=.b6=..==?.E=
240249b4:	3d4dcca4 3d5621b0 3d5ebd0a 3d67a063     ..M=.!V=..^=c.g=
240249c4:	3d70cd6d 3d7a45dc 3d8205b5 3d870fee     m.p=.Ez=...=...=
240249d4:	3d8c4276 3d919e34 3d97240a 3d9cd4e1     vB.=4..=.$.=...=
240249e4:	3da2b19e 3da8bb2d 3daef277 3db55868     ...=-..=w..=hX.=
240249f4:	3dbbedee 3dc2b3f6 3dc9ab70 3dd0d548     ...=...=p..=H..=
24024a04:	3dd83276 3ddfc3dd 3de78a7b 3def8734     v2.=...={..=4..=
24024a14:	3df7bb08 3e00136d 3e0465d4 3e08d526     ...=m..>.e.>&..>
24024a24:	3e0d61e8 3e120c86 3e16d57f 3e1bbd4c     .a.>...>...>L..>
24024a34:	3e20c452 3e25eb16 3e2b3205 3e309997     R. >..%>.2+>..0>
24024a44:	3e362237 3e3bcc5f 3e319872 3e2786ea     7"6>_.;>r.1>..'>
24024a54:	3e1d9833 3e13ccb6 3e0a24e1 3e00a116     3..>...>.$.>...>
24024a64:	3dee8386 3ddc0e97 3dc9e41b 3db804df     ...=...=...=...=
24024a74:	3da6719c 3d952b10 3d8431ec 3d670dc3     .q.=.+.=.1.=..g=
24024a84:	3d465539 3d263b89 3d06c1eb 3ccfd33c     9UF=.;&=...=<..<
24024a94:	3c936791 3c30861a 3b733efc bb513f96     .g.<..0<.>s;.?Q.
24024aa4:	bc22d4f0 bc875dd8 bcbc005c bcef5060     .."..]..\...`P..
24024ab4:	bd10a636 bd28f986 bd40a183 bd579d99     6.....(...@...W.
24024ac4:	bd6ded43 bd81c805 bd8c42c9 bd9666c0     C.m......B...f..
24024ad4:	bda033cd bda9a9d4 bdb2c8c6 bdbb909f     .3..............
24024ae4:	bdc4015e bdcc1b10 bdd3ddce bddb499d     ^............I..
24024af4:	bde25ed0 bde91d73 bdef85ca bdf59818     .^..s...........
24024b04:	bdfb54ad be005df4 be02e70c be0545dc     .T...].......E..
24024b14:	be077a98 be09857e be0b66de be0d1ef5     .z..~....f......
24024b24:	be0eae12 be10148d be1152be be1268fb     .........R...h..
24024b34:	be1357b1 be141f3c be14c00f be153a96     .W..<........:..
24024b44:	be158f49 be15bea1 be15c91d be15af3d     I...........=...
24024b54:	be15718f be15109e be148cff be13e73e     .q..........>...
24024b64:	be131ffc be1237d5 be112f6f be10076b     .....7..o/..k...
24024b74:	be0ec079 be0d5b46 be0bd889 be0a38f5     y...F[.......8..
24024b84:	be087d41 be06a635 be04b487 be02a8ff     A}..5...........
24024b94:	be008469 bdfc8f17 bdf7e671 bdf3107e     i.......q...~...
24024ba4:	bdee0eec bde8e34e bde38f6c bdde14f4     ....N...l.......
24024bb4:	bdd875ad bdd2b339 bdcccf6c bdc6cc11     .u..9...l.......
24024bc4:	bdc0aadf bdba6da6 bdb41633 bdada656     .....m..3...V...
24024bd4:	bda71fdb bda08496 bd99d658 bd9316f5     ........X.......
24024be4:	bd8c483d bd856c05 bd7d0841 bd6f24b9     =H...l..A.}..$o.
24024bf4:	bd613118 bd5330fd bd4527fb bd3719aa     .1a..0S..'E...7.
24024c04:	bd290997 bd1afb4c bd0cf249 bcfde417     ..).L...I.......
24024c14:	bce1fc09 bcc63335 bcaa905d bc8f1a24     ....53..]...$...
24024c24:	bc67ae45 bc319ba4 bbf8124f bb8e06b8     E.g...1.O.......
24024c34:	ba94b4b6 3b04c42c 3ba88f58 3c06a1ae     ....,..;X..;...<
24024c44:	3c3833b9 3c68f2a8 3c8c69db 3ca3e62e     .38<..h<.i.<...<
24024c54:	3cbae930 3cd16de7 3ce76f86 3cfce965     0..<.m.<.o.<e..<
24024c64:	3d08eb87 3d131a16 3d1cfe50 3d26963a     ...=...=P..=:.&=
24024c74:	3d2fdfea 3d38d996 3d418188 3d49d622     ../=..8=..A=".I=
24024c84:	3d51d5e1 3d597f55 3d60d12c 3d67ca2c     ..Q=U.Y=,.`=,.g=
24024c94:	3d6e692f 3d74ad36 3d7a954d 3d801052     /in=6.t=M.z=R..=
24024ca4:	3d82a73f 3d850f21 3d8747b2 3d8950c1     ?..=!..=.G.=.P.=
24024cb4:	3d8b2a24 3d8cd3bf 3d8e4d88 3d8f977c     $*.=...=.M.=|..=
24024cc4:	3d90b1a9 3d919c2a 3d925724 3d92e2cd     ...=*..=$W.=...=
24024cd4:	3d933f65 3d936d3a 3d936ca7 3d933e12     e?.=:m.=.l.=.>.=
24024ce4:	3d92e1ed 3d9258b9 3d91a301 3d90c15d     ...=.X.=...=]..=
24024cf4:	3d8fb46e 3d8e7ce3 3d8d1b75 3d8b90eb     n..=.|.=u..=...=
24024d04:	3d89de10 3d8803c1 3d8602df 3d83dc59     ...=...=...=Y..=
24024d14:	3d819125 3d7e4487 3d79217f 3d73bb51     %..=.D~=.!y=Q.s=
24024d24:	3d6e1435 3d682e70 3d620c4f 3d5bb03d     5.n=p.h=O.b==.[=
24024d34:	3d551ca2 3d4e5401 3d4758dd 3d402dcd     ..U=.TN=.XG=.-@=
24024d44:	3d38d571 3d315270 3d29a77e 3d21d750     q.8=pR1=~.)=P.!=
24024d54:	3d19e4ae 3d11d258 3d09a31f 3d0159d7     ...=X..=...=.Y.=
24024d64:	3cf1f2a6 3ce108d9 3ccffbfc 3cbed1c8     ...<...<...<...<
24024d74:	3cad8ffb 3c9c3c46 3c8adc67 3c72ec11     ...<F<.<g..<..r<
24024d84:	3c501daf 3c2d58f4 3c0aa90b 3bd03236     ..P<.X-<...<62.;
24024d94:	3b8b6844 3b0e141d 38cb48bd bb00327c     Dh.;...;.H.8|2..
24024da4:	bb82b41e bbc48edb bc02ca95 bc22d996     ..............".
24024db4:	bc426aa9 bc61744f bc7fed2b bc8ee61c     .jB.Ota.+.......
24024dc4:	bc9d8445 bcabccc8 bcb9bb83 bcc74c65     E...........eL..
24024dd4:	bcd47b92 bce1454f bceda601 bcf99a35     .{..OE......5...
24024de4:	bd028f57 bd081822 bd0d6605 bd127797     W..."....f...w..
24024df4:	bd174b8e bd1be0b1 bd2035de bd244a07     .K.......5 ..J$.
24024e04:	bd281c39 bd2bab9a bd2ef75f bd31fee0     9.(...+._.....1.
24024e14:	bd34c186 bd373ed1 bd397659 bd3b67d5     ..4..>7.Yv9..g;.
24024e24:	bd3d130e bd3e77e5 bd3f9653 bd406e6d     ..=..w>.S.?.mn@.
24024e34:	bd410058 bd414c5b bd4152ce bd41141f     X.A.[LA..RA...A.
24024e44:	bd4090d7 bd3fc994 bd3ebf0b bd3d7203     ..@...?...>..r=.
24024e54:	bd3be366 bd3a1423 bd380548 bd35b7f3     f.;.#.:.H.8...5.
24024e64:	bd332d59 bd3066c5 bd2d658e bd2a2b27     Y-3..f0..e-.'+*.
24024e74:	bd26b90a bd2310cc bd1f3410 bd1b2484     ..&...#..4...$..
24024e84:	bd16e3f2 bd127424 bd0dd6fe bd090e6c     ....$t......l...
24024e94:	bd041c6a bcfe05fa bcf38868 bce8c465     j.......h...e...
24024ea4:	bcddbe2c bcd27a2b bcc6fcc4 bcbb4a84     ,...+z.......J..
24024eb4:	bcaf67e7 bca35991 bc97241e bc8acc37     .g...Y...$..7...
24024ec4:	bc7cad1a bc638fa7 bc4a4990 bc30e439     ..|...c..IJ.9.0.
24024ed4:	bc176927 bbfbc383 bbc8aee6 bb95a735     'i..........5...
24024ee4:	bb457e2d bac02426 389a269e 3ad20ea2     -~E.&$...&.8...:
24024ef4:	3b4c6c55 3b976e69 3bc81ae8 3bf82a7a     UlL;in.;...;z*.;
24024f04:	3c13c61c 3c2b17c6 3c42022e 3c587d5a     ...<..+<..B<Z}X<
24024f14:	3c6e8193 3c8203a6 3c8c83a7 3c96bd36     ..n<...<...<6..<
24024f24:	3ca0acee 3caa4f7f 3cb3a1b8 3cbca09a     ...<.O.<...<...<
24024f34:	3cc54935 3ccd98bf 3cd58c9f 3cdd2255     5I.<...<...<U".<
24024f44:	3ce45788 3ceb2a0a 3cf197d8 3cf79f03     .W.<.*.<...<...<
24024f54:	3cfd3de4 3d01396e 3d039e45 3d05ccdb     .=.<n9.=E..=...=
24024f64:	3d07c4a5 3d09852f 3d0b0e19 3d0c5f1c     ...=/..=...=._.=
24024f74:	3d0d7800 3d0e58ab 3d0f010f 3d0f713d     .x.=.X.=...==q.=
24024f84:	3d0fa94e 3d0fa97e 3d0f7219 3d0f0379     N..=~..=.r.=y..=
24024f94:	3d0e5e14 3d0d8275 3d0c7135 3d0b2b07     .^.=u..=5q.=.+.=
24024fa4:	3d09b0ab 3d0802f9 3d0622dc 3d04114d     ...=...=.".=M..=
24024fb4:	3d01cf58 3cfebc3e 3cf97d9a 3cf3e54a     X..=>..<.}.<J..<
24024fc4:	3cedf5ed 3ce7b236 3ce11d0b 3cda3962     ...<6..<...<b9.<
24024fd4:	3cd30a49 3ccb92eb 3cc3d689 3cbbd889     I..<...<...<...<
24024fe4:	3cb39c55 3cab2573 3ca27774 3c99960e     U..<s%.<tw.<...<
24024ff4:	3c9084ee 3c8747e8 3c7bc589 3c68b2dc     ...<.G.<..{<..h<
24025004:	3c555f98 3c41d39f 3c2e16df 3c1a315e     ._U<..A<...<^1.<
24025014:	3c062b1f 3be41854 3bbbb916 3b934890     .+.<T..;...;.H.;
24025024:	3b55ad9c 3b04e786 3a517a74 b9de6c9f     ..U;...;tzQ:.l..
24025034:	bad6fb9c bb3a9320 bb84777e bbab3999     .... .:.~w...9..
24025044:	bbd18107 bbf73f2d bc0e32dc bc20734c     ....-?...2..Ls .
24025054:	bc325a10 bc43e05f bc54ffcc bc65b201     .Z2._.C...T...e.
24025064:	bc75f0bd bc82db17 bc8a7e43 bc91df26     ..u.....C~..&...
24025074:	bc98fb19 bc9fcf94 bca65a37 bcac98b5     ........7Z......
24025084:	bcb288e9 bcb828cb bcbd767e bcc2703d     .....(..~v..=p..
24025094:	bcc7146c bccb6193 bccf5654 bcd2f18f     l....a..TV......
240250a4:	bcd63226 bcd91743 bcdba01a bcddcc19     &2..C...........
240250b4:	bcdf9ac5 bce10bce bce21f0f bce2d486     ................
240250c4:	bce32c50 bce326bc bce2c430 bce20543     P,...&..0...C...
240250d4:	bce0eaac bcdf7546 bcdda613 bcdb7e30     ....Fu......0~..
240250e4:	bcd8fee5 bcd6299d bcd2ffdd bccf8350     .....)......P...
240250f4:	bccbb5c1 bcc79911 bcc32f55 bcbe7aa5     ........U/...z..
24025104:	bcb97d4a bcb4399e bcaeb20f bca8e938     J}...9......8...
24025114:	bca2e1bc bc9c9e5c bc9621eb bc8f6f54     ....\....!..To..
24025124:	bc88898c bc8173ae bc74619c bc65883a     .....s...at.:.e.
24025134:	bc5661b6 bc46f4a6 bc3747a0 bc276179     .aV...F..G7.ya'.
24025144:	bc1748f1 bc0704e7 bbed3888 bbcc2bef     .H.......8...+..
24025154:	bbaaf1ed bb899876 bb505af2 bb0d7dc2     ....v....ZP..}..
24025164:	ba956a35 b901c962 3a68c173 3af82d12     5j..b...s.h:.-.:
24025174:	3b3d7b02 3b7e4323 3b9f2a54 3bbecad4     .{=;#C~;T*.;...;
24025184:	3bddf65a 3bfca067 3c0d5e5e 3c1c1fb3     Z..;g..;^^.<...<
24025194:	3c2a8e5e 3c38a4ac 3c465d1c 3c53b25a     ^.*<..8<.]F<Z.S<
240251a4:	3c609f32 3c6d1ebc 3c792c1c 3c826164     2.`<..m<.,y<da.<
240251b4:	3c87ef32 3c8d3d65 3c924a0a 3c97133d     2..<e=.<.J.<=..<
240251c4:	3c9b974b 3c9fd491 3ca3c999 3ca774f9     K..<...<...<.t.<
240251d4:	3caad57c 3cadea03 3cb0b189 3cb32b3b     |..<...<...<;+.<
240251e4:	3cb55659 3cb7324c 3cb8be9e 3cb9faf9     YV.<L2.<...<...<
240251f4:	3cbae727 3cbb8313 3cbbced8 3cbbcaa1     '..<...<...<...<
24025204:	3cbb76be 3cbad3ab 3cb9e1f9 3cb8a25e     .v.<...<...<^..<
24025214:	3cb715b1 3cb53ce9 3cb3191d 3cb0ab79     ...<.<.<...<y..<
24025224:	3cadf556 3caaf821 3ca7b566 3ca42ed4     V..<!..<f..<...<
24025234:	3ca06622 3c9c5d39 3c981606 3c9392a4     "f.<9].<...<...<
24025244:	3c8ed535 3c89dff8 3c84b53c 3c7eaee7     5..<...<<..<..~<
24025254:	3c739229 3c681964 3c5c49cd 3c5028c2     ).s<d.h<.I\<.(P<
24025264:	3c43bbd7 3c37088b 3c2a14a7 3c1ce5df     ..C<..7<..*<...<
24025274:	3c0f821f 3c01ef52 3be866e9 3bcca920     ...<R..<.f.; ..;
24025284:	3bb0b170 3b948c0b 3b708a68 3b37d24c     p..;...;h.p;L.7;
24025294:	3afe1092 3a8c8999 395a0339 ba2b3541     ...:...:9.Z9A5+.
240252a4:	bac5d765 bb1aa322 bb51dc09 bb843f93     e...".....Q..?..
240252b4:	bb9f3abf bbb9d440 bbd400fe bbedb61a     .:..@...........
240252c4:	bc03747a bc0fc796 bc1bcf51 bc2786c2     zt......Q.....'.
240252d4:	bc32e92c bc3df1f3 bc489ca7 bc52e4ff     ,.2...=...H...R.
240252e4:	bc5cc6eb bc663e8e bc6f482d bc77e04c     ..\..>f.-Ho.L.w.
240252f4:	bc8001c8 bc83d77b bc876fc6 bc8ac952     ....{....o..R...
24025304:	bc8de2f2 bc90bb7f bc9351fc bc95a58e     .........Q......
24025314:	bc97b569 bc9980eb bc9b0788 bc9c48e1     i............H..
24025324:	bc9d449f bc9dfa9d bc9e6aca bc9e9537     .D.......j..7...
24025334:	bc9e7a0e bc9e19a1 bc9d745a bc9c8abb     .z......Zt......
24025344:	bc9b5d6e bc99ed37 bc983aef bc964795     n]..7....:...G..
24025354:	bc941439 bc91a214 bc8ef26c bc8c06a4     9.......l.......
24025364:	bc88e03e bc8580ce bc81ea05 bc7c3b4f     >...........O;|.
24025374:	bc743b1b bc6bd749 bc6313ec bc59f529     .;t.I.k...c.).Y.
24025384:	bc507f54 bc46b6de bc3ca06f bc3240a5     T.P...F.o.<..@2.
24025394:	bc279c5c bc1cb878 bc1199fe bc064604     \.'.x........F..
240253a4:	bbf58369 bbde2497 bbc67a25 bbae8ec1     i....$..%z......
240253b4:	bb966d28 bb7c4058 bb4b654c bb1a5ee6     (m..X@|.LeK..^..
240253c4:	bad285db ba609c3b b8e41eb9 3a26e759     ....;.`.....Y.&:
240253d4:	3ab4a7df 3b0a981f 3b3a7167 3b69cb06     ...:...;gq:;..i;
240253e4:	3b8c4843 3ba356e1 3bba0776 3bd05052     CH.;.V.;v..;RP.;
240253f4:	3be627f5 3bfb8518 3c082f5c 3c125608     .'.;...;\/.<.V.<
24025404:	3c1c324e 3c25c00e 3c2efb60 3c37e06c     N2.<..%<`..<l.7<
24025414:	3c406b8b 3c489941 3c50664a 3c57cf80     .k@<A.H<JfP<..W<
24025424:	3c5ed1e8 3c656ac9 3c6b9793 3c7155e3     ..^<.je<..k<.Uq<
24025434:	3c76a396 3c7b7e9c 3c7fe548 3c81eafc     ..v<.~{<H..<...<
24025444:	3c83a7b5 3c85282e 3c866bfa 3c8772c0     ...<.(.<.k.<.r.<
24025454:	3c883c3a 3c88c840 3c8916d0 3c8927fd     :<.<@..<...<.'.<
24025464:	3c88fbed 3c8892ec 3c87ed5f 3c870bc3     ...<...<_..<...<
24025474:	3c85eeb2 3c8496d8 3c830508 3c813a22     ...<...<...<":.<
24025484:	3c7e6e50 3c79fa62 3c751aca 3c6fd20a     Pn~<b.y<..u<..o<
24025494:	3c6a22f4 3c641056 3c5d9d4a 3c56cceb     ."j<V.d<J.]<..V<
240254a4:	3c4fa2b5 3c48220d 3c404eaf 3c382c57     ..O<."H<.N@<W,8<
240254b4:	3c2fbeea 3c270a70 3c1e1317 3c14dd0d     ../<p.'<...<...<
240254c4:	3c0b6cae 3c01c667 3befdd71 3bdbd470     .l.<g..<q..;p..;
240254d4:	3bc77b12 3bb2dabc 3b9dfcef 3b88eb3a     .{.;...;...;:..;
240254e4:	3b675e85 3b3ca567 3b11be88 3acd7aa5     .^g;g.<;...;.z.:
240254f4:	3a6ed4cd 3985cc53 b9d112eb ba8996b1     ..n:S..9........
24025504:	bade5cb1 bb193890 bb42d751 bb6bf83a     .\...8..Q.B.:.k.
24025514:	bb8a4498 bb9e3c34 bbb1da2f bbc51601     .D..4<../.......
24025524:	bbd7e750 bbea45f5 bbfc2a0a bc06c5ef     P....E...*......
24025534:	bc0f3204 bc1755b0 bc1f2d82 bc26b62d     .2...U...-..-.&.
24025544:	bc2dec8d bc34cda8 bc3b56a3 bc4184d0     ..-...4..V;...A.
24025554:	bc4755b5 bc4cc6f8 bc51d677 bc568238     .UG...L.w.Q.8.V.
24025564:	bc5ac86e bc5ea780 bc621df8 bc652ab2     n.Z...^...b..*e.
24025574:	bc67cc82 bc6a02a8 bc6bcc77 bc6d2979     ..g...j.w.k.y)m.
24025584:	bc6e1958 bc6e9c20 bc6eb1cf bc6e5ac7     X.n. .n...n..Zn.
24025594:	bc6d977d bc6c68b4 bc6acf37 bc68cc27     }.m..hl.7.j.'.h.
240255a4:	bc6660bd bc638e70 bc6056cd bc5cbba3     .`f.p.c..V`...\.
240255b4:	bc58bee9 bc5462b9 bc4fa96b bc4a955a     ..X..bT.k.O.Z.J.
240255c4:	bc45292a bc3f679f bc395393 bc32f017     *)E..g?..S9...2.
240255d4:	bc2c4050 bc254778 bc1e090c bc168888     P@,.xG%.........
240255e4:	bc0ec98b bc06cfd1 bbfd3e55 bbec7701     ........U>...w..
240255f4:	bbdb519e bbc9d647 bbb80d3c bba5feda     .Q..G...<.......
24025604:	bb93b393 bb8133f0 bb5d1124 bb37743a     .....3..$.].:t7.
24025614:	bb11a288 bad75b01 ba8b4d2e b9fcf9c6     .....[...M......
24025624:	38cae747 3a30add5 3aa39890 3aee514e     G..8..0:...:NQ.:
24025634:	3b1c2fb2 3b40d0c4 3b64fb60 3b844fb3     ./.;..@;`.d;.O.;
24025644:	3b95d672 3ba70a27 3bb7e335 3bc85a2a     r..;'..;5..;*Z.;
24025654:	3bd867c9 3be8050f 3bf72b29 3c02e9c5     .g.;...;)+.;...<
24025664:	3c09fbec 3c10c901 3c174e1e 3c1d887c     ...<...<.N.<|..<
24025674:	3c23757d 3c2912a9 3c2e5da1 3c335440     }u#<..)<.].<@T3<
24025684:	3c37f483 3c3c3c87 3c402aa8 3c43bd4f     ..7<.<<<.*@<O.C<
24025694:	3c46f32f 3c49cb05 3c4c43db 3c4e5cda     /.F<..I<.CL<.\N<
240256a4:	3c50154c 3c516cba 3c5262d9 3c52f774     L.P<.lQ<.bR<t.R<
240256b4:	3c532a95 3c52fc7c 3c526d80 3c517e42     .*S<|.R<.mR<B~Q<
240256c4:	3c502f63 3c4e81ce 3c4c769b 3c4a0f0d     c/P<..N<.vL<..J<
240256d4:	3c474c70 3c44305c 3c40bc89 3c3cf2d0     pLG<\0D<..@<..<<
240256e4:	3c38d534 3c3465d8 3c2fa702 3c2a9b34     4.8<.e4<../<4.*<
240256f4:	3c2544f3 3c1fa6e9 3c19c3ed 3c139ee9     .D%<...<...<...<
24025704:	3c0d3ae8 3c069b0d 3bff852f 3bf169b4     .:.<...</..;.i.;
24025714:	3be2ea82 3bd40e97 3bc4dd1d 3bb55d56     ...;...;...;V].;
24025724:	3ba596aa 3b95909e 3b8552c5 3b69c9a6     ...;...;.R.;..i;
24025734:	3b489d05 3b272f40 3b059000 3ac79dec     ..H;@/';...;...:
24025744:	3a83f7b6 3a00999a b7d0dec1 ba0d33e0     ...:...:.....3..
24025754:	ba899790 bacc1d9d bb0706d2 bb27a4c6     ..............'.
24025764:	bb47d9d1 bb679760 bb836789 bb92b96b     ..G.`.g..g..k...
24025774:	bba1ba76 bbb063f4 bbbeaf5b bbcc9653     v....c..[...S...
24025784:	bbda12b7 bbe71e95 bbf3b437 bbffce21     ........7...!...
24025794:	bc05b38b bc0b3d09 bc10812f bc157dbe     .....=../....}..
240257a4:	bc1a309e bc1e97d6 bc22b197 bc267c36     .0........".6|&.
240257b4:	bc29f628 bc2d1e11 bc2ff2ac bc327304     (.)...-.../..s2.
240257c4:	bc349e17 bc367324 bc37f1a9 bc39191c     ..4.$s6...7...9.
240257d4:	bc39e945 bc3a6206 bc3a835f bc3a4d99     E.9..b:._.:..M:.
240257e4:	bc39c0f7 bc38de02 bc37a573 bc361815     ..9...8.s.7...6.
240257f4:	bc3436df bc3202f2 bc2f7d91 bc2ca834     .64...2..}/.4.,.
24025804:	bc29845e bc2613c6 bc22583a bc1e53b9     ^.)...&.:X"..S..
24025814:	bc1a0859 bc15784d bc10a5ed bc0b93a9     Y...Mx..........
24025824:	bc064412 bc00b9cf bbf5ef48 bbea00d2     .D......H.......
24025834:	bbddae22 bbd0fd46 bbc3f472 bbb699fd     "...F...r.......
24025844:	bba8f462 bb9b0a3d bb8ce240 bb7d066a     b...=...@...j.}.
24025854:	bb5fe803 bb42772b bb24c1e3 bb06d644     .._.+wB...$.D...
24025864:	bad184e5 ba952947 ba316bfc b9623b7d     ....G)...k1.};b.
24025874:	39801899 3a382d4c 3a97ce24 3ad310f0     ...9L-8:$..:...:
24025884:	3b06e1cf 3b23e596 3b408676 3b5cb755     ...;..#;v.@;U.\;
24025894:	3b786b4c 3b89cae3 3b971538 3ba40ea6     Lkx;...;8..;...;
240258a4:	3bb0b150 3bbcf791 3bc8dbeb 3bd45917     P..;...;...;.Y.;
240258b4:	3bdf6a00 3bea09c5 3bf433c4 3bfde38c     .j.;...;.3.;...;
240258c4:	3c038a7a 3c07e204 3c0bf68b 3c0fc659     z..<...<...<Y..<
240258d4:	3c134fd8 3c169192 3c198a36 3c1c3898     .O.<...<6..<.8.<
240258e4:	3c1e9bac 3c20b28c 3c227c76 3c23f8ce     ...<.. <v|"<..#<
240258f4:	3c252716 3c260706 3c269865 3c26db36     .'%<..&<e.&<6.&<
24025904:	3c26cf82 3c267595 3c25cdda 3c24d8c8     ..&<.u&<..%<..$<
24025914:	3c23971e 3c2209a5 3c203153 3c1e0f3c     ..#<.."<S1 <<..<
24025924:	3c1ba49a 3c18f2c4 3c15fb37 3c12bf8c     ...<...<7..<...<
24025934:	3c0f417a 3c0b82d9 3c07859b 3c034bd2     zA.<...<...<.K.<
24025944:	3bfdaf4b 3bf456bb 3bea92aa 3be06804     K..;.V.;...;.h.;
24025954:	3bd5dbdf 3bcaf37b 3bbfb445 3bb423c3     ...;{..;E..;.#.;
24025964:	3ba847ac 3b9c25ca 3b8fc40e 3b832878     .G.;.%.;...;x(.;
24025974:	3b6cb257 3b52b8a8 3b38706c 3b1de641     W.l;..R;lp8;A..;
24025984:	3b0326de 3ad07e10 3a9a7718 3a48a4fa     .&.;.~.:.w.:..H:
24025994:	39b8a790 b87d2477 b9f73496 ba66d1a6     ...9w$}..4....f.
240259a4:	baa8a319 badd631d bb08c826 bb22893e     .....c..&...>.".
240259b4:	bb3be8e9 bb54db75 bb6d556a bb82a5cb     ..;.u.T.jUm.....
240259c4:	bb8e5984 bb99c08c bba4d5ba bbaf940f     .Y..............
240259d4:	bbb9f6b8 bbc3f912 bbcd96a6 bbd6cb35     ............5...
240259e4:	bbdf92b3 bbe7e94f bbefcb66 bbf73597     ....O...f....5..
240259f4:	bbfe24b8 bc024aef bc05432f bc07f9e2     .$...J../C......
24025a04:	bc0a6df2 bc0c9e66 bc0e8a69 bc103144     .m..f...i...D1..
24025a14:	bc119261 bc12ad50 bc1381be bc140f7a     a...P.......z...
24025a24:	bc145678 bc1456c9 bc1410a3 bc13845b     xV...V......[...
24025a34:	bc12b269 bc119b64 bc104003 bc0ea11f     i...d....@......
24025a44:	bc0cbfae bc0a9cc6 bc08399d bc059782     .........9......
24025a54:	bc02b7e6 bbff38a3 bbf88cda bbf16ff1     .....8.......o..
24025a64:	bbe9e59b bbe1f1be bbd9986f bbd0ddef     ........o.......
24025a74:	bbc7c6ad bbbe573e bbb49461 bbaa82ef     ....>W..a.......
24025a84:	bba027f3 bb95888a bb8aa9f4 bb7f2314     .'...........#..
24025a94:	bb688974 bb519219 bb3a482a bb22b6fe     t.h...Q.*H:...".
24025aa4:	bb0ae9f6 bae5d927 bab594bc ba851dd9     ....'...........
24025ab4:	ba291742 b98fd528 38c8e127 39f39dc5     B.).(...'..8...9
24025ac4:	3a59ffea 3a9cc0eb 3acc13ea 3afae2b5     ..Y:...:...:...:
24025ad4:	3b148bb5 3b2b4e44 3b41ae72 3b57a1e8     ...;DN+;r.A;..W;
24025ae4:	3b6d1e80 3b810d2c 3b8b45ed 3b9534d5     ..m;,..;.E.;.4.;
24025af4:	3b9ed563 3ba8233d 3bb11a30 3bb9b63a     c..;=#.;0..;:..;
24025b04:	3bc1f384 3bc9ce6b 3bd14376 3bd84f68     ...;k..;vC.;hO.;
24025b14:	3bdeef33 3be51ffe 3beadf2b 3bf02a50     3..;...;+..;P*.;
24025b24:	3bf4ff3f 3bf95c04 3bfd3ee1 3c00532d     ?..;.\.;.>.;-S.<
24025b34:	3c01c895 3c02ff27 3c03f67a 3c04ae4a     ...<'..<z..<J..<
24025b44:	3c05266f 3c055edd 3c0557ac 3c05110c     o&.<.^.<.W.<...<
24025b54:	3c048b50 3c03c6e6 3c02c45b 3c018459     P..<...<[..<Y..<
24025b64:	3c0007a5 3bfc9e4a 3bf8b7aa 3bf45da2     ...<J..;...;.].;
24025b74:	3bef929b 3bea5934 3be4b43b 3bdea6b8     ...;4Y.;;..;...;
24025b84:	3bd833da 3bd15f01 3bca2bb7 3bc29db9     .3.;._.;.+.;...;
24025b94:	3bbab8e1 3bb2813a 3ba9faec 3ba12a47     ...;:..;...;G*.;
24025ba4:	3b9813b5 3b8ebbc5 3b852720 3b76b50b     ...;...; '.;..v;
24025bb4:	3b62b5a0 3b4e59d5 3b39abb3 3b24b552     ..b;.YN;..9;R.$;
24025bc4:	3b0f80f4 3af431da 3ac90f39 3a9daee3     ...;.1.:9..:...:
24025bd4:	3a644b87 3a0d11a8 395767d6 b904c749     .Kd:...:.gW9I...
24025be4:	b9efd05f ba4e1fe5 ba91d804 babc3819     _.....N......8..
24025bf4:	bae61c32 bb07b853 bb1c1107 bb300ebc     2...S.........0.
24025c04:	bb43a81c bb56d415 bb6989cb bb7bc09e     ..C...V...i...{.
24025c14:	bb86b81e bb8f4845 bb978ce2 bb9f8238     ....EH......8...
24025c24:	bba724b2 bbae70e6 bbb56396 bbbbf9b2     .$...p...c......
24025c34:	bbc23055 bbc804d1 bbcd74a2 bbd27d77     U0.......t..w}..
24025c44:	bbd71d35 bbdb51f6 bbdf1a04 bbe273e2     5....Q.......s..
24025c54:	bbe55e47 bbe7d821 bbe9e097 bbeb7701     G^..!........w..
24025c64:	bbec9af6 bbed4c3e bbed8adb bbed5706     ....>L.......W..
24025c74:	bbecb12c bbeb99f7 bbea123e bbe81b16     ,.......>.......
24025c84:	bbe5b5c3 bbe2e3bd bbdfa6b3 bbdc0083     ................
24025c94:	bbd7f33c bbd38120 bbceac9d bbc9784f     <... .......Ox..
24025ca4:	bbc3e6fe bbbdfb9b bbb7b946 bbb12341     ........F...A#..
24025cb4:	bbaa3cf3 bba309ee bb9b8ddd bb93cc93     .<..............
24025cc4:	bb8bc9fa bb838a23 bb762260 bb64c6bf     ....#...`"v...d.
24025cd4:	bb530a0b bb40f50e bb2e90c8 bb1be643     ..S...@.....C...
24025ce4:	bb08feb5 baebc6b8 bac53b2a ba9e6d8b     ........*;...m..
24025cf4:	ba6ee152 ba20aeea b9a4d33c b786e4a2     R.n... .<.......
24025d04:	399385e4 3a175f4f 3a6478df 3a98757a     ...9O_.:.xd:zu.:
24025d14:	3abe489d 3ae3a3ee 3b043aeb 3b165684     .H.:...:.:.;.V.;
24025d24:	3b281c3e 3b3983d6 3b4a8527 3b5b1859     >.(;..9;'.J;Y.[;
24025d34:	3b6b35bf 3b7ad5f5 3b84f8e7 3b8c4137     .5k;..z;...;7A.;
24025d44:	3b93409c 3b99f3f0 3ba0582f 3ba66a87     .@.;...;/X.;.j.;
24025d54:	3bac2845 3bb18ee8 3bb69c16 3bbb4da5     E(.;...;...;.M.;
24025d64:	3bbfa198 3bc39622 3bc729a4 3bca5aaa     ...;"..;.).;.Z.;
24025d74:	3bcd27fc 3bcf9088 3bd19373 3bd33011     .'.;...;s..;.0.;
24025d84:	3bd465ed 3bd534bd 3bd59c6c 3bd59d18     .e.;.4.;l..;...;
24025d94:	3bd53710 3bd46ad1 3bd3390f 3bd1a2aa     .7.;.j.;.9.;...;
24025da4:	3bcfa8b3 3bcd4c68 3bca8f3d 3bc772c8     ...;hL.;=..;.r.;
24025db4:	3bc3f8d8 3bc02360 3bbbf47e 3bb76e7f     ...;`#.;~..;.n.;
24025dc4:	3bb293d1 3bad670e 3ba7eaf6 3ba2226a     ...;.g.;...;j".;
24025dd4:	3b9c106f 3b95b82c 3b8f1ce9 3b884208     o..;,..;...;.B.;
24025de4:	3b812b07 3b73b70b 3b64ae67 3b5543ba     .+.;..s;g.d;.CU;
24025df4:	3b457ebf 3b356755 3b250589 3b14617b     .~E;Ug5;..%;{a.;
24025e04:	3b038369 3ae4e742 3ac27516 3a9fc137     i..;B..:.u.:7..:
24025e14:	3a79b929 3a33b063 39db1457 391da1e7     ).y:c.3:W..9...9
24025e24:	b8f49665 b9c88be8 ba298f84 ba6e4e4e     e.........).NNn.
24025e34:	ba9930c7 babad463 badc020e bafcaa1b     .0..c...........
24025e44:	bb0e5e93 bb1e160d bb2d7428 bb3c71b2     .^......(t-..q<.
24025e54:	bb4b07bb bb592f87 bb66e28d bb741a88     ..K../Y...f...t.
24025e64:	bb8068bb bb8680cb bb8c52b4 bb91dbda     .h.......R......
24025e74:	bb9719cb bb9c0a35 bba0aaf2 bba4fa04     ....5...........
24025e84:	bba8f593 bbac9bf3 bbafeba0 bbb2e346     ............F...
24025e94:	bbb581b9 bbb7c5fb bbb9af37 bbbb3cc8     ........7....<..
24025ea4:	bbbc6e36 bbbd4335 bbbdbba4 bbbdd794     6n..5C..........
24025eb4:	bbbd973c bbbcfb08 bbbc0387 bbbab17b     <...........{...
24025ec4:	bbb905ce bbb70194 bbb4a60f bbb1f4a5     ................
24025ed4:	bbaeeee9 bbab9696 bba7ed89 bba3f5c7     ................
24025ee4:	bb9fb17a bb9b22f3 bb964ca0 bb91310f     z...."...L...1..
24025ef4:	bb8bd2f4 bb86351d bb805a72 bb748bfb     .....5..rZ....t.
24025f04:	bb67f5bb bb5af896 bb4d9b29 bb3fe43e     ..g...Z.).M.>.?.
24025f14:	bb31dabf bb2385bd bb14ec69 bb06160d     ..1...#.i.......
24025f24:	baee1412 bacf9fb2 bab0de04 ba91de31     ............1...
24025f34:	ba655efd ba26c255 b9d00a03 b9251651     .^e.U.&.....Q.%.
24025f44:	38aaebf2 39a78bc9 3a11d582 3a4f6e79     ...8...9...:ynO:
24025f54:	3a86399e 3aa46355 3ac22608 3adf7387     .9.:Uc.:.&.:.s.:
24025f64:	3afc3df6 3b0c3be3 3b1a09db 3b27826e     .=.:.;.;...;n.';
24025f74:	3b349f51 3b415a71 3b4dadeb 3b599412     Q.4;qZA;..M;..Y;
24025f84:	3b65077d 3b7002ee 3b7a816f 3b823f28     }.e;..p;o.z;(?.;
24025f94:	3b86fa8e 3b8b70cf 3b8f9ffb 3b93863e     ...;.p.;...;>..;
24025fa4:	3b9721f2 3b9a718c 3b9d73ae 3ba02723     .!.;.q.;.s.;#'.;
24025fb4:	3ba28ad6 3ba49ddc 3ba65f76 3ba7cf0b     ...;...;v_.;...;
24025fc4:	3ba8ec26 3ba9b681 3baa2dfc 3baa529e     &..;...;.-.;.R.;
24025fd4:	3baa2497 3ba9a43e 3ba8d217 3ba7aec8     .$.;>..;...;...;
24025fe4:	3ba63b1d 3ba4780f 3ba266b7 3ba00856     .;.;.x.;.f.;V..;
24025ff4:	3b9d5e4f 3b9a6a2d 3b972d97 3b93aa5f     O^.;-j.;.-.;_..;
24026004:	3b8fe272 3b8bd7dc 3b878ccd 3b83038d     r..;...;...;...;
24026014:	3b7c7d0b 3b72806e 3b68167b 3b5d449d     .}|;n.r;{.h;.D];
24026024:	3b52106e 3b467fac 3b3a984a 3b2e6054     n.R;..F;J.:;T`.;
24026034:	3b21ddff 3b15179d 3b0813a0 3af5b11d     ..!;...;...;...:
24026044:	3adada12 3abfaf72 3aa43eca 3a8895aa     ...:r..:.>.:...:
24026054:	3a598376 3a21a14e 39d3409b 39466f4a     v.Y:N.!:.@.9JoF9
24026064:	b7ca1a98 b97829fa b9eaec59 ba2c791f     .....)x.Y....y,.
24026074:	ba62f8de ba8c6d9d baa7034b bac130b7     ..b..m..K....0..
24026084:	badae981 baf4217a bb066661 bb126fe7     ....z!..af...o..
24026094:	bb1e27a6 bb298835 bb348c46 bb3f2ec8     .'..5.).F.4...?.
240260a4:	bb496adc bb533bdf bb5c9d54 bb658b0a     .jI..;S.T.\...e.
240260b4:	bb6e00fe bb75fb7c bb7d76fd bb823823     ..n.|.u..v}.#8..
240260c4:	bb85722e bb886842 bb8b1923 bb8d83bd     .r..Bh..#.......
240260d4:	bb8fa71d bb91826d bb931503 bb945e5a     ....m.......Z^..
240260e4:	bb955e07 bb9613cf bb967f91 bb96a15b     .^..........[...
240260f4:	bb967956 bb9607d2 bb954d44 bb944a42     Vy......DM..BJ..
24026104:	bb92ff88 bb916df1 bb8f967c bb8d7a4b     .....m..|...Kz..
24026114:	bb8b1a9b bb8878cf bb859662 bb8274f8     .....x..b....t..
24026124:	bb7e2c96 bb76f85e bb6f513a bb673b3c     .,~.^.v.:Qo.<;g.
24026134:	bb5ebaba bb55d42e bb4c8c4b bb42e7e5     ..^...U.K.L...B.
24026144:	bb38ec00 bb2e9dc9 bb24028b bb191fb2     ..8.......$.....
24026154:	bb0dfad1 bb029989 baee0342 bad671df     ........B....q..
24026164:	babe8ac0 baa659d8 ba8deb32 ba6a9608     .....Y..2.....j.
24026174:	ba390ae4 ba074d78 b9aaec78 b90e768e     ..9.xM..x....v..
24026184:	38623f05 397ed902 39e20272 3a21ecfa     .?b8..~9r..9..!:
24026194:	3a5261e7 3a81245a 3a98c533 3ab00835     .aR:Z$.:3..:5..:
240261a4:	3ac6e252 3add48b5 3af330cb 3b04481f     R..:.H.:.0.:.H.;
240261b4:	3b0eae88 3b18c6cb 3b228c36 3b2bfa44     ...;...;6.";D.+;
240261c4:	3b350cab 3b3dbf3e 3b460e0e 3b4df563     ..5;>.=;..F;c.M;
240261d4:	3b5571b3 3b5c7fae 3b631c3c 3b694481     .qU;..\;<.c;.Di;
240261e4:	3b6ef5e0 3b742de9 3b78ea80 3b7d29b3     ..n;.-t;..x;.)};
240261f4:	3b8074f0 3b8214c9 3b8373d3 3b849197     .t.;...;.s.;...;
24026204:	3b856dc2 3b86081e 3b866097 3b86773b     .m.;...;.`.;;w.;
24026214:	3b864c35 3b85dfd1 3b85327e 3b8444c7     5L.;...;~2.;.D.;
24026224:	3b831757 3b81aaf4 3b80008c 3b7c3240     W..;...;...;@2|;
24026234:	3b77eba8 3b732fd2 3b6e016a 3b686363     ..w;./s;j.n;cch;
24026244:	3b6258d9 3b5be51d 3b550bb1 3b4dd04b     .Xb;..[;..U;K.M;
24026254:	3b4636ca 3b3e4332 3b35f9b7 3b2d5eb7     .6F;2C>;..5;.^-;
24026264:	3b2476a9 3b1b462d 3b11d1fe 3b081f04     .v$;-F.;...;...;
24026274:	3afc6450 3ae82109 3ad37e6d 3abe86ec     Pd.:.!.:m~.:...:
24026284:	3aa94519 3a93c39f 3a7c1a7e 3a505997     .E.:...:~.|:.YP:
24026294:	3a245a40 39f0648f 3997eee3 38fdfbf4     @Z$:.d.9...9...8
240262a4:	b845fe3b b96144a2 b9c7fdd9 ba0f53fe     ;.E..Da......S..
240262b4:	ba3a3b69 ba64a083 ba873775 ba9bc95b     i;:...d.u7..[...
240262c4:	baaffc18 bac3c61c bad71e12 bae9fad2     ................
240262d4:	bafc5392 bb070fe1 bb0fab91 bb17f8df     .S..............
240262e4:	bb1ff3f7 bb27993f bb2ee53d bb35d4ac     ....?.'.=.....5.
240262f4:	bb3c6470 bb4291a9 bb4859a5 bb4db9e1     pd<...B..YH...M.
24026304:	bb52b015 bb573a30 bb5b5657 bb5f02e7     ..R.0:W.WV[..._.
24026314:	bb623e6c bb6507b9 bb675dd0 bb693ff5     l>b...e..]g..?i.
24026324:	bb6aad9a bb6ba679 bb6c2a76 bb6c39be     ..j.y.k.v*l..9l.
24026334:	bb6bd4a9 bb6afbd5 bb69b00c bb67f25c     ..k...j...i.\.g.
24026344:	bb65c3ff bb63266b bb601b4d bb5ca482     ..e.k&c.M.`...\.
24026354:	bb58c41e bb547c66 bb4fcfcc bb4ac0f7     ..X.f|T...O...J.
24026364:	bb4552b9 bb3f8811 bb39642d bb32ea5a     .RE...?.-d9.Z.2.
24026374:	bb2c1e1a bb250304 bb1d9ce3 bb15ef9a     ..,...%.........
24026384:	bb0dff2d bb05cfbd bafacb15 bae989e1     -...............
24026394:	bad7e4a5 bac5e47b bab3927a baa0f7ff     ....{...z.......
240263a4:	ba8e1e66 ba761e63 ba4fa7d3 ba28ec5b     f...c.v...O.[.(.
240263b4:	ba01ff44 b9b5e7bd b94f75e7 b84cf593     D........uO...L.
240263c4:	38d11aa8 3981cf02 39ced488 3a0d98e5     ...8...9...9...:
240263d4:	3a3360e6 3a58b00f 3a7d746f 3a90ce33     .`3:..X:ot}:3..:
240263e4:	3aa28b63 3ab3e951 3ac4dfd5 3ad566e0     c..:Q..:...:.f.:
240263f4:	3ae576bd 3af507ee 3b0209a3 3b0948e1     .v.:...:...;.H.;
24026404:	3b103e67 3b16e704 3b1d3fbd 3b2345b3     g>.;...;.?.;.E#;
24026414:	3b28f63f 3b2e4edd 3b334d41 3b37ef3d     ?.(;.N.;AM3;=.7;
24026424:	3b3c32e1 3b40166c 3b439841 3b46b709     .2<;l.@;A.C;..F;
24026434:	3b49718e 3b4bc6d3 3b4db60e 3b4f3ea4     .qI;..K;..M;.>O;
24026444:	3b506037 3b511a8f 3b516db5 3b5159d4     7`P;..Q;.mQ;.YQ;
24026454:	3b50df5a 3b4ffedb 3b4eb929 3b4d0f39     Z.P;..O;).N;9.M;
24026464:	3b4b023a 3b48938b 3b45c4b5 3b42976e     :.K;..H;..E;n.B;
24026474:	3b3f0da5 3b3b2966 3b36ecef 3b325aa8     ..?;f);;..6;.Z2;
24026484:	3b2d751d 3b283f06 3b22bb3d 3b1cecbe     .u-;.?(;=.";...;
24026494:	3b16d6b1 3b107c4b 3b09e0f7 3b03082e     ...;K|.;...;...;
240264a4:	3af7eb09 3ae95964 3ada62f4 3acb0f77     ...:dY.:.b.:w..:
240264b4:	3abb66d1 3aab7107 3a9b3641 3a8abebe     .f.:.q.:A6.:...:
240264c4:	3a7425aa 3a5275cf 3a307ede 3a0e51d8     .%t:.uR:.~0:.Q.:
240264d4:	39d7ff8e 39933374 391cc2dc 379ab728     ...9t3.9...9(..7
240264e4:	b8eb32e1 b97dcb0b b9c27dbb ba02ba3d     .2....}..}..=...
240264f4:	ba23d4aa ba447e29 ba64a707 ba821ff1     ..#.)~D...d.....
24026504:	ba919cd4 baa0c2d0 baaf8abf babdedae     ................
24026514:	bacbe4e8 bad969e1 bae6765b baf3045e     .....i..[v..^...
24026524:	baff0e2c bb054723 bb0abfc4 bb0fee86     ,...#G..........
24026534:	bb14d126 bb196579 bb1da989 bb219b86     &...ye........!.
24026544:	bb2539d0 bb2882df bb2b7571 bb2e105a     .9%...(.qu+.Z...
24026554:	bb3052aa bb323b8d bb33ca6e bb34fed8     .R0..;2.n.3...4.
24026564:	bb35d88c bb365773 bb367b9f bb364554     ..5.sW6..{6.TE6.
24026574:	bb35b507 bb34cb4e bb3388f7 bb31eef2     ..5.N.4...3...1.
24026584:	bb2ffe5c bb2db879 bb2b1ebd bb2832be     \./.y.-...+..2(.
24026594:	bb24f63b bb216b1b bb1d9368 bb197151     ;.$..k!.h...Qq..
240265a4:	bb150723 bb105759 bb0b647c bb063143     #...YW..|d..C1..
240265b4:	bb00c080 baf62a2d baea641e bade3508     ....-*...d...5..
240265c4:	bad1a35c bac4b5b0 bab772b7 baa9e154     \........r..T...
240265d4:	ba9c088a ba8def75 ba7f3a79 ba623274     ....u...y:..t2b.
240265e4:	ba44d58b ba273294 ba095878 b9d6ac5d     ..D..2'.xX..]...
240265f4:	b99a7567 b93c5407 b887a067 385194ab     gu...T<.g.....Q8
24026604:	392c10eb 39917c36 39cc70c8 3a0364bf     ..,96|.9.p.9.d.:
24026614:	3a20350d 3a3c9b61 3a588a19 3a73f3d3     .5 :a.<:..X:..s:
24026624:	3a8765c3 3a948236 3aa14919 3aadb461     .e.:6..:.I.:a..:
24026634:	3ab9be52 3ac56149 3ad097ef 3adb5d1a     R..:Ia.:...:.].:
24026644:	3ae5abe3 3aef7fa2 3af8d3f8 3b00d25f     ...:...:...:_..;
24026654:	3b04f70b 3b08d635 3b0c6e34 3b0fbd89     ...;5..;4n.;...;
24026664:	3b12c2d0 3b157cdd 3b17ea94 3b1a0b15     ...;.|.;...;...;
24026674:	3b1bdd97 3b1d617f 3b1e965d 3b1f7be4     ...;.a.;]..;.{.;
24026684:	3b2011ee 3b20587b 3b204fbd 3b1ff7fe     .. ;{X ;.O ;...;
24026694:	3b1f51bb 3b1e5d8e 3b1d1c46 3b1b8ec1     .Q.;.].;F..;...;
240266a4:	3b19b612 3b179374 3b152830 3b1275ce     ...;t..;0(.;.u.;
240266b4:	3b0f7de2 3b0c4225 3b08c479 3b0506d9     .}.;%B.;y..;...;
240266c4:	3b010b5d 3af9a86f 3af0c77e 3ae778b1     ]..;o..:~..:.x.:
240266d4:	3addc119 3ad3a5eb 3ac92c84 3abe5a7f     ...:...:.,.:.Z.:
240266e4:	3ab33580 3aa7c36d 3a9c0a2f 3a900fe1     .5.:m..:/..:...:
240266f4:	3a83daaf 3a6ee1d1 3a55b1c2 3a3c3208     ...:..n:..U:.2<:
24026704:	3a226f96 3a087770 39dcad54 39a834bd     .o":pw.:T..9.4.9
24026714:	39673ea9 38fc1d03 37a86981 b8a722e2     .>g9...8.i.7."..
24026724:	b93b99ec b9916ca1 b9c48e8c b9f719d9     ..;..l..........
24026734:	ba147b0a ba2d0598 ba4520d2 ba5cc131     .{....-.. E.1.\.
24026744:	ba73db7c ba853262 ba902936 ba9acd18     |.s.b2..6)......
24026754:	baa51918 baaf0874 bab89693 bac1bf1f     ....t...........
24026764:	baca7df9 bad2cf2c badaaf0e bae21a22     .}..,......."...
24026774:	bae90d30 baef8545 baf57f9e bafaf9cb     0...E...........
24026784:	bafff19b bb023286 bb042938 bb05dc34     .....2..8)..4...
24026794:	bb074ae2 bb0874d5 bb0959b9 bb09f964     .J...t...Y..d...
240267a4:	bb0a53d2 bb0a6914 bb0a396e bb09c537     .S...i..n9..7...
240267b4:	bb090cf3 bb081142 bb06d2e5 bb0552bb     ....B........R..
240267c4:	bb0391c5 bb019129 bafea447 baf9ac29     ....)...G...)...
240267d4:	baf43ce4 baee59a9 bae805d2 bae14507     .<...Y.......E..
240267e4:	bada1b03 bad28bc2 baca9b78 bac24e6f     ........x...oN..
240267f4:	bab9a926 bab0b03f baa76898 ba9dd705     &...?....h......
24026804:	ba9400a0 ba89ea94 ba7f3436 ba6a2933     ........64..3)j.
24026814:	ba54befa ba3f0092 ba28f91e ba12b3dd     ..T...?...(.....
24026824:	b9f87839 b9cb3a78 b99dc541 b9605ecc     9x..x:..A....^`.
24026834:	b9051f62 b827e69e 384394ae 390b503a     b.....'...C8:P.9
24026844:	39651b07 399f0cc9 39cb1042 39f68288     ..e9...9B..9...9
24026854:	3a10a74d 3a25aff0 3a3a5115 3a4e80ec     M..:..%:.Q::..N:
24026864:	3a6235dd 3a75669d 3a840519 3a8d0bed     .5b:.fu:...:...:
24026874:	3a95c3a1 3a9e2830 3aa635c5 3aade8ba     ...:0(.:.5.:...:
24026884:	3ab53d8f 3abc3116 3ac2c02f 3ac8e808     .=.:.1.:/..:...:
24026894:	3acea5f3 3ad3f78e 3ad8daa2 3add4d34     ...:...:...:4M.:
240268a4:	3ae14d7c 3ae4da01 3ae7f16b 3aea92b9     |M.:...:k..:...:
240268b4:	3aecbd0b 3aee6fcf 3aefaaae 3af06d80     ...:.o.:...:.m.:
240268c4:	3af0b86d 3af08bc4 3aefe81f 3aeece4c     m..:...:...:L..:
240268d4:	3aed3f4d 3aeb3c68 3ae8c721 3ae5e11b     M?.:h<.:!..:...:
240268e4:	3ae28c41 3adecab7 3ada9ec8 3ad60af5     A..:...:...:...:
240268f4:	3ad11201 3acbb6bc 3ac5fc4e 3abfe5e7     ...:...:N..:...:
24026904:	3ab976f3 3ab2b301 3aab9dd3 3aa43b33     .v.:...:...:3;.:
24026914:	3a9c8f3a 3a949ded 3a8c6ba2 3a83fc9c     :..:...:.k.:...:
24026924:	3a76aac0 3a64f4e0 3a52e0da 3a407811     ..v:..d:..R:.x@:
24026934:	3a2dc40d 3a1ace6c 3a07a0e4 39e88a7a     ..-:l..:...:z..9
24026944:	39c18a9c 399a55e0 39660015 391739a1     ...9.U.9..f9.9.9
24026954:	3890ff75 b6c0ce57 b8a8640d b921dc73     u..8W....d..s.!.
24026964:	b96edf95 b99d8ae6 b9c32cfe b9e843d3     ..n......,...C..
24026974:	ba065ec5 ba18444c ba29c9f4 ba3ae76d     .^..LD....).m.:.
24026984:	ba4b949f ba5bc9b4 ba6b7f1b ba7aad8d     ..K...[...k...z.
24026994:	ba84a708 ba8bacf2 ba926559 ba98cd41     ........Ye..A...
240269a4:	ba9ee1be baa4a03b baaa0623 baaf112e     ....;...#.......
240269b4:	bab3bf3d bab80e69 babbfce0 babf8920     =...i....... ...
240269c4:	bac2b1d2 bac575c9 bac7d415 bac9cbf8     .....u..........
240269d4:	bacb5cf1 bacc8692 bacd48c9 bacda3a6     .\.......H......
240269e4:	bacd9767 bacd2483 bacc4ba6 bacb0db0     g....$...K......
240269f4:	bac96bab bac766dc bac500a6 bac23aab     .k...f.......:..
24026a04:	babf16bd babb96cd bab7bd01 bab38bab     ................
24026a14:	baaf053c baaa2c64 baa503db ba9f8e8c     <...d,..........
24026a24:	ba99cf8e ba93ca08 ba8d8155 ba86f8d8     ........U.......
24026a34:	ba803418 ba726d83 ba64091a ba554299     .4...mr...d..BU.
24026a44:	ba4621d0 ba36aeac ba26f143 ba16f1c3     .!F...6.C.&.....
24026a54:	ba06b86f b9ec9b4b b9cb7398 b9aa0ab7     o...K....s......
24026a64:	b988719a b94d727a b909e540 b88cbaa6     .q..zrM.@.......
24026a74:	b63f1c5a 388037d9 3902ca92 3944eeb4     Z.?..7.8...9..D9
24026a84:	398333e8 39a38afe 39c36ce8 39e2ca3a     .3.9...9.l.9:..9
24026a94:	3a00c9ed 3a0fdd8a 3a1e98c3 3a2cf4a3     ...:...:...:..,:
24026aa4:	3a3aea64 3a487383 3a5589b5 3a6226f0     d.::.sH:..U:.&b:
24026ab4:	3a6e4573 3a79dfba 3a827848 3a87b984     sEn:..y:Hx.:...:
24026ac4:	3a8cb143 3a915d4f 3a95bbbf 3a99caa8     C..:O].:...:...:
24026ad4:	3a9d8867 3aa0f377 3aa40a83 3aa6cc54     g..:w..:...:T..:
24026ae4:	3aa937f2 3aab4c8e 3aad0974 3aae6e2c     .7.:.L.:t..:,n.:
24026af4:	3aaf7a70 3ab02e17 3ab08928 3ab08be8     pz.:...:(..:...:
24026b04:	3ab036ae 3aaf8a0b 3aae86bc 3aad2da0     .6.:...:...:.-.:
24026b14:	3aab7fcb 3aa97e72 3aa72afd 3aa486dd     ...:r~.:.*.:...:
24026b24:	3aa193db 3a9e53b5 3a9ac876 3a96f42b     ...:.S.:v..:+..:
24026b34:	3a92d914 3a8e799a 3a89d831 3a84f776     ...:.y.:1..:v..:
24026b44:	3a7fb445 3a750620 3a69ea52 3a5e66e8     E..: .u:R.i:.f^:
24026b54:	3a52821c 3a464252 3a39ae10 3a2ccc04     ..R:RBF:..9:..,:
24026b64:	3a1fa2fa 3a1239d7 3a04979e 39ed86bd     ...:.9.:...:...9
24026b74:	39d18885 39b542ef 3998c478 3978373c     ...9.B.9x..9<7x9
24026b84:	393eade3 390509e2 3896d060 378f2d25     ..>9...9`..8%-.7
24026b94:	b81d8479 b8c09f6c b918ca0d b950b460     y...l.......`.P.
24026ba4:	b983f9b4 b99f361d b9ba0243 b9d4513a     .....6..C...:Q..
24026bb4:	b9ee166e ba03a2cc ba0fe966 ba1bd93f     n.......f...?...
24026bc4:	ba276cc3 ba329e92 ba3d6986 ba47c8af     .l'...2..i=...G.
24026bd4:	ba51b75a ba5b3114 ba6431a8 ba6cb520     Z.Q..1[..1d. .l.
24026be4:	ba74b7cf ba7c3649 ba8196b4 ba84cd26     ..t.I6|.....&...
24026bf4:	ba87bd34 ba8a65b9 ba8cc5b2 ba8edc49     4....e......I...
24026c04:	ba90a8c0 ba922a8f ba93614f ba944cb1     .....*..Oa...L..
24026c14:	ba94ecae ba95413d ba954a91 ba950909     ....=A...J......
24026c24:	ba947d14 ba93a756 ba928894 ba9121af     .}..V........!..
24026c34:	ba8f73b7 ba8d7fd2 ba8b474f ba88cba7     .s......OG......
24026c44:	ba860e5e ba831122 ba7fab90 ba78bc68     ^...".......h.x.
24026c54:	ba7158db ba698524 ba6145bc ba589f43     .Xq.$.i..Ea.C.X.
24026c64:	ba4f968d ba463099 ba3c728e ba3261b9     ..O..0F..r<..a2.
24026c74:	ba28038a ba1d5d92 ba127580 ba07511d     ..(..]...u...Q..
24026c84:	b9f7ec8b b9e0d5e4 b9c96a4e b9b1b5ee     ........Nj......
24026c94:	b999c507 b981a3df b952bd9f b922046b     ..........R.k.".
24026ca4:	b8e2698d b880ceac b77b4913 38032cd3     .i.......I{..,.8
24026cb4:	38a1ffc1 3900d197 393028d6 395eee66     ...8...9.(09f.^9
24026cc4:	398685bb 399d34dd 39b379a7 39c94968     ...9.4.9.y.9hI.9
24026cd4:	39de99bc 39f3608e 3a03ca07 3a0d9569     ...9.`.9...:i..:
24026ce4:	3a170de1 3a202f0f 3a28f4cc 3a315b1b     ...:./ :..(:.[1:
24026cf4:	3a395e3e 3a40faa2 3a482cf7 3a4ef21f     >^9:..@:.,H:..N:
24026d04:	3a554737 3a5b299d 3a6096e7 3a658ceb     7GU:.)[:..`:..e:
24026d14:	3a6a09bc 3a6e0bb0 3a719159 3a749989     ..j:..n:Y.q:..t:
24026d24:	3a772356 3a792e15 3a7ab95b 3a7bc4fc     V#w:..y:[.z:..{:
24026d34:	3a7c5113 3a7c5df4 3a7bec34 3a7afcaa     .Q|:.]|:4.{:..z:
24026d44:	3a79906b 3a77a8c5 3a754748 3a726dba     k.y:..w:HGu:.mr:
24026d54:	3a6f1e21 3a6b5ab7 3a6725f0 3a628276     !.o:.Zk:.%g:v.b:
24026d64:	3a5d7327 3a57fb13 3a521d7c 3a4bddd5     's]:..W:|.R:..K:
24026d74:	3a453fb7 3a3e46ef 3a36f770 3a2f554d     .?E:.F>:p.6:MU/:
24026d84:	3a2764ca 3a1f2a3f 3a16aa32 3a0de93e     .d':?*.:2..:>..:
24026d94:	3a04ec18 39f76f25 39e4a125 39d17821     ...:%o.9%..9!x.9
24026da4:	39bdfe32 39aa3d84 39964063 39821123     2..9.=.9c@.9#..9
24026db4:	395b7452 39328bcb 39097d87 38c0bcb4     Rt[9..29.}.9...8
24026dc4:	385d0c26 376403d4 b7d4ac5c b88653fe     &.]8..d7\....S..
24026dd4:	b8d6d20d b9133ed6 b93a97d9 b96160fb     .....>....:..`a.
24026de4:	b983c3ae b9967c50 b9a8d169 b9baba46     ....P|..i...F...
24026df4:	b9cc2e69 b9dd259a b9ed97f9 b9fd7dde     i....%.......}..
24026e04:	ba066803 ba0dc3b9 ba14cec2 ba1b85f7     .h..............
24026e14:	ba21e663 ba27ed41 ba2d97fb ba32e42a     c.!.A.'...-.*.2.
24026e24:	ba37cf9f ba3c585d ba407c9a ba443ac0     ..7.]X<..|@..:D.
24026e34:	ba479171 ba4a7f83 ba4d0404 ba4f1e39     q.G...J...M.9.O.
24026e44:	ba50cd99 ba5211d8 ba52eada ba5358c0     ..P...R...R..XS.
24026e54:	ba535bda ba52f4b1 ba522404 ba50eac6     .[S...R..$R...P.
24026e64:	ba4f4a19 ba4d4357 ba4ad80c ba4809ef     .JO.WCM...J...H.
24026e74:	ba44daef ba414d20 ba3d62cb ba391e60     ..D. MA..b=.`.9.
24026e84:	ba34827b ba2f91e3 ba2a4f84 ba24be6d     {.4.../..O*.m.$.
24026e94:	ba1ee1d3 ba18bd11 ba12539b ba0ba908     .........S......
24026ea4:	ba04c10b b9fb3eda b9ec9027 b9dd7df5     .....>..'....}..
24026eb4:	b9ce105c b9be4f9d b9ae4418 b99df645     \....O...D..E...
24026ec4:	b98d6ebc b9796c2e b957aa0f b935a890     .n...ly...W...5.
24026ed4:	b9137931 b8e25ad7 b89dad63 b832198c     1y...Z..c.....2.
24026ee4:	b724dca7 37be0f9f 38665f77 38b64657     ..$....7w_f8WF.8
24026ef4:	38f8a6a3 391d180f 393d6160 395d1f9e     ...8...9`a=9..]9
24026f04:	397c4388 398d5f0f 399c4077 39aabef5     .C|9._.9w@.9...9
24026f14:	39b8d3b5 39c6782d 39d3a60c 39e0574c     ...9-x.9...9LW.9
24026f24:	39ec8627 39f82d28 3a01a391 3a06e79c     '..9(-.9...:...:
24026f34:	3a0be06d 3a108be3 3a14e810 3a18f328     m..:...:...:(..:
24026f44:	3a1cab8c 3a200fcb 3a231ea0 3a25d6f2     ...:.. :..#:..%:
24026f54:	3a2837d7 3a2a4090 3a2bf08d 3a2d476c     .7(:.@*:..+:lG-:
24026f64:	3a2e44f7 3a2ee929 3a2f3428 3a2f2645     .D.:)..:(4/:E&/:
24026f74:	3a2ebfff 3a2e0205 3a2ced2b 3a2b8275     ...:...:+.,:u.+:
24026f84:	3a29c30d 3a27b04b 3a254bab 3a2296d3     ..):K.':.K%:..":
24026f94:	3a1f9390 3a1c43d1 3a18a9ac 3a14c75b     ...:.C.:...:[..:
24026fa4:	3a109f34 3a0c33b5 3a078773 3a029d27     4..:.3.:s..:'..:
24026fb4:	39faef43 39f0339c 39e50d64 39d982d4     C..9.3.9d..9...9
24026fc4:	39cd9a4a 39c15a4e 39b4c98c 39a7eed3     J..9NZ.9...9...9
24026fd4:	399ad10c 398d7734 397fd0c0 39645779     ...94w.9...9yWd9
24026fe4:	394890f0 392c8ba5 39105624 38e7fdf3     ..H9..,9$V.9...8
24026ff4:	38af295f 386c970f 37f60540 361cec30     _).8..l8@..70..6
24027004:	b7cd9758 b856946d b8a2a9ff b8d969d6     X...m.V......i..
24027014:	b907b76a b9224f50 b93c6fb4 b9560bf9     j...PO"..o<...V.
24027024:	b96f17e0 b983c3bc b98fa79e b99b3205     ..o..........2..
24027034:	b9a65d8e b9b12512 b9bb83ab b9c574a3     .]...%.......t..
24027044:	b9cef38d b9d7fc33 b9e08aa6 b9e89b36     ....3.......6...
24027054:	b9f02a7f b9f73564 b9fdb901 ba01d965     .*..d5......e...
24027064:	ba04903e ba07000a ba0927f1 ba0b073f     >........'..?...
24027074:	ba0c9d67 ba0dea02 ba0eecce ba0fa5af     g...............
24027084:	ba1014b0 ba1039ff ba1015f2 ba0fa903     .....9..........
24027094:	ba0ef3ce ba0df718 ba0cb3c3 ba0b2ad9     .............*..
240270a4:	ba095d82 ba074d0c ba04fadf ba026888     .]...M.......h..
240270b4:	b9ff2f5e b9f9143a b9f28364 b9eb80df     ^/..:...d.......
240270c4:	b9e410d9 b9dc37b3 b9d3fa07 b9cb5c8c     .....7.......\..
240270d4:	b9c26430 b9b91603 b9af7739 b9a58d2b     0d......9w..+...
240270e4:	b99b5d4a b990ed30 b9864281 b976c601     J]..0....B....v.
240270f4:	b960a8ff b94a39c4 b933842d b91c942e     ..`..9J.-.3.....
24027104:	b90575cb b8dc69fe b8adbbb9 b87df171     .u...i......q.}.
24027114:	b82071d6 b786505f 36cde2b2 37ec1a00     .q ._P.....6...7
24027124:	38519ba8 38961d60 38c2dec2 38eefbfc     ..Q8`..8...8...8
24027134:	390d2fc3 39227a21 393752de 394baffd     ./.9!z"9.R79..K9
24027144:	395f87cf 3972d0fb 3982c13e 398bc9d1     .._9..r9>..9...9
24027154:	39947e12 399cda0a 39a4d9f6 39ac7a47     .~.9...9...9Gz.9
24027164:	39b3b7a6 39ba8ef0 39c0fd3d 39c6ffdb     ...9...9=..9...9
24027174:	39cc9456 39d1b879 39d66a46 39daa7f9     V..9y..9Fj.9...9
24027184:	39de7016 39e1c159 39e49abe 39e6fb7c     .p.9Y..9...9|..9
24027194:	39e8e30c 39ea5127 39eb45c0 39ebc10e     ...9'Q.9.E.9...9
240271a4:	39ebc37f 39eb4dc6 39ea60c9 39e8fdb3     ...9.M.9.`.9...9
240271b4:	39e725e3 39e4daf0 39e21eaf 39def331     .%.9...9...91..9
240271c4:	39db5aac 39d7579c 39d2eca7 39ce1ca7     .Z.9.W.9...9...9
240271d4:	39c8ea9f 39c359cb 39bd6d8d 39b7296b     ...9.Y.9.m.9k).9
240271e4:	39b0911f 39a9a87b 39a27383 399af651     ...9{..9.s.9Q..9
240271f4:	39933525 398b3456 3982f854 39750b61     %5.9V4.9T..9a.u9
24027204:	3963c216 39521e2c 39402930 392decb8     ..c9,.R90)@9..-9
24027214:	391b7290 3908c477 38ebd89c 38c5e7cf     .r.9w..9...8...8
24027224:	389fca60 38732806 3826b0ca 37b4ac65     `..8.(s8..&8e..7
24027234:	3663f186 b775b801 b8088b05 b852f262     ..c6..u.....b.R.
24027244:	b88e3f90 b8b28670 b8d63bff b8f94ed7     .?..p....;...N..
24027254:	b90dd6ff b91ea46f b92f07b4 b93ef913     ....o...../...>.
24027264:	b94e7102 b95d6856 b96bd821 b979b9c2     .qN.Vh].!.k...y.
24027274:	b983837f b989dcf1 b98fe664 b9959d3e     ........d...>...
24027284:	b99aff0b b9a00988 b9a4baa5 b9a9107e     ............~...
24027294:	b9ad0965 b9b0a3d8 b9b3de8f b9b6b86f     e...........o...
240272a4:	b9b93096 b9bb4651 b9bcf921 b9be48ba     .0..QF..!....H..
240272b4:	b9bf3508 b9bfbe22 b9bfe459 b9bfa82d     .5.."...Y...-...
240272c4:	b9bf0a4f b9be0ba2 b9bcad3b b9baf05d     O.......;...]...
240272d4:	b9b8d676 b9b6612b b9b39242 b9b06bb7     v...+a..B....k..
240272e4:	b9acefa3 b9a92058 b9a50044 b9a091fa     ....X ..D.......
240272f4:	b99bd83c b996d5e4 b9918dee b98c037a     <...........z...
24027304:	b98639c4 b9803420 b973ec0c b96705f1     .9.. 4....s...g.
24027314:	b959bd29 b94c1923 b93e2163 b92fdd91     ).Y.#.L.c!>.../.
24027324:	b921556d b91290dc b90397c4 b8e8e444     mU!.........D...
24027334:	b8ca5015 b8ab8303 b88c8d39 b85afda9     .P......9.....Z.
24027344:	b81ccfdb b7bd6210 b70303e5 36e70675     .....b......u..6
24027354:	37b42a48 3816bd46 3852bae2 3886f819     H*.7F..8..R8...8
24027364:	38a42002 38c0c6e2 38dcdec3 38f85a22     . .8...8...8"Z.8
24027374:	390995df 3916a369 39234f90 392f9464     ...9i..9.O#9d./9
24027384:	393b6c2e 3946d189 3951bf40 395c3070     .l;9..F9@.Q9p0\9
24027394:	39662082 396f8b0f 39786c1e 39805ff6     . f9..o9.lx9._.9
240273a4:	39844182 3987d924 398b257b 398e253f     .A.9$..9{%.9?%.9
240273b4:	3990d761 39933af1 39954f32 39971389     a..9.:.92O.9...9
240273c4:	39988789 3999aaec 399a7d9a 399affa5     ...9...9.}.9...9
240273d4:	399b3144 399b12d7 399aa4ea 3999e831     D1.9...9...91..9
240273e4:	3998dd84 399785e7 3995e280 3993f49e     ...9...9...9...9
240273f4:	3991bdab 398f3f43 398c7b1a 39897304     ...9C?.9.{.9.s.9
24027404:	39862900 39829f20 397daf35 3975a984     .).9 ..95.}9..u9
24027414:	396d3202 39644db3 395b01e3 395153ee     .2m9.Md9..[9.SQ9
24027424:	39474972 393ce820 393235d7 3927389c     rIG9 .<9.529.8'9
24027434:	391bf687 391075d1 3904bcca 38f1a39c     ...9.u.9...9...8
24027444:	38d9769d 38c0ff92 38a84b88 388f6798     .v.8...8.K.8.g.8
24027454:	386cc1b8 383a88dd 38083ec4 37abfada     ..l8..:8.>.8...7
24027464:	370f7ab7 b6603dc7 b77e436f b7e15e9e     .z.7.=`.oC~..^..
24027474:	b8214693 b8513e75 b8803f97 b89778c3     .F!.u>Q..?...x..
24027484:	b8ae3f6a b8c4887e b8da4948 b8ef7769     j?..~...HI..iw..
24027494:	b9020471 b90bf9fc b91597c1 b91ed950     q...........P...
240274a4:	b927ba74 b930372b b9384bbc b93ff49a     t.'.+70..K8...?.
240274b4:	b9472e78 b94df655 b9544959 b95a24fd     x.G.U.M.YIT..$Z.
240274c4:	b95f86fa b9646d45 b968d61f b96cc000     .._.Emd...h...l.
240274d4:	b97029ae b973122f b97578d2 b9775d22     .)p./.s..xu."]w.
240274e4:	b978bef5 b9799e60 b979fbc4 b979d7b7     ..x.`.y...y...y.
240274f4:	b979331c b9780f14 b9766cfd b9744e74     .3y...x..lv.tNt.
24027504:	b971b55a b96ea3c7 b96b1c09 b96720bb     Z.q...n...k.. g.
24027514:	b962b49b b95ddaa2 b9589604 b952ea21     ..b...]...X.!.R.
24027524:	b94cda84 b9466aff b93f9f66 b9387be4     ..L..jF.f.?..{8.
24027534:	b93104a1 b9293e0c b9212ca0 b918d501     ..1..>)..,!.....
24027544:	b9103bf1 b907664b b8fcb1e2 b8ea31fc     .;..Kf.......1..
24027554:	b8d756fb b8c42b3d b8b0b920 b89d0b25     .V..=+.. ...%...
24027564:	b8892bda b86a4ba0 b8420746 b8199fcd     .+...Kj.F.B.....
24027574:	b7e254a2 b79177aa b701a4cb 35f71cbf     .T...w.........5
24027584:	373e5809 37ae33ea 37fc61b0 3824c729     .X>7.3.7.a.7).$8
24027594:	384ac9be 387025da 388a649b 389c5103     ..J8.%p8.d.8.Q.8
240275a4:	38adcf82 38bed7bb 38cf619d 38df655e     ...8...8.a.8^e.8
240275b4:	38eedb9c 38fdbd31 390601ad 390cd3d2     ...81..8...9...9
240275c4:	39135207 3919797a 391f4782 3924b9ae     .R.9zy.9.G.9..$9
240275d4:	3929cdc4 392e81ba 3932d3bc 3936c227     ..)9...9..29'.69
240275e4:	393a4b9d 393d6ee1 39402b03 39427f35     .K:9.n=9.+@95.B9
240275f4:	39446aed 3945edda 394707d7 3947b909     .jD9..E9..G9..G9
24027604:	394801ad 3947e252 39475bac 39466eac     ..H9R.G9.[G9.nF9
24027614:	39451c71 3943664e 39414dcf 393ed49f     q.E9NfC9.MA9..>9
24027624:	393bfca7 3938c7fe 393538de 393151c0     ..;9..89.859.Q19
24027634:	392d152a 392885df 3923a6c0 391e7ae1     *.-9..(9..#9.z.9
24027644:	39190560 39134992 390d4ad8 39070ccc     `..9.I.9.J.9...9
24027654:	39009305 38f3c28c 38e5f6be 38d7ca83     ...9...8...8...8
24027664:	38c945c0 38ba7096 38ab5339 389bf5f8     .E.8.p.89S.8...8
24027674:	388c6133 38793ab2 385965d2 383954c1     3a.8.:y8.eY8.T98
24027684:	3819188b 37f18460 37b0c53c 37602add     ...8`..7<..7.*`7
24027694:	36be59c1 b604b4d9 b720a1cf b78f781d     .Y.6...... ..x..
240276a4:	b7cdec68 b805c73e b8241fdc b841f115     h...>.....$...A.
240276b4:	b85f2c4a b87bc342 b88bd41c b89966ea     J,_.B.{......f..
240276c4:	b8a6939d b8b35404 b8bfa233 b8cb7885     .....T..3....x..
240276d4:	b8d6d191 b8e1a855 b8ebf7f7 b8f5bbf5     ....U...........
240276e4:	b8fef02d b903c868 b907cd21 b90b84ae     -...h...!.......
240276f4:	b90eeda2 b91206b3 b914cece b9174509     .............E..
24027704:	b919689e b91b3903 b91cb5c9 b91ddebb     .h...9..........
24027714:	b91eb3c3 b91f3503 b91f62c1 b91f3d78     .....5...b..x=..
24027724:	b91ec5b8 b91dfc50 b91ce22f b91b7878     ....P.../...xx..
24027734:	b919c05e b917bb4f b9156ad8 b912d0ab     ^...O....j......
24027744:	b90fee9b b90cc6ab b9095ae6 b905ad8c     .........Z......
24027754:	b901c0fb b8fb2f2d b8f267ff b8e931af     ....-/...g...1..
24027764:	b8df91d2 b8d58e0c b8cb2c3a b8c0726a     ........:,..jr..
24027774:	b8b566c4 b8aa0f8f b89e7335 b8929832     .f......5s..2...
24027784:	b886851d b874813e b85ba2db b8427c95     ....>.t...[..|B.
24027794:	b8291bfe b80f8eaf b7ebc488 b7b848a7     ..)..........H..
240277a4:	b784c4bd b722a76f b67081f4 36275a21     ....o."...p.!Z'6
240277b4:	370f0973 377344d0 37ab2b04 37dc05ba     s..7.Ds7.+.7...7
240277c4:	38060d1f 381da863 3834c91b 384b6407     ...8c..8..48.dK8
240277d4:	38616e40 3876dd41 3885d372 388fe0b3     @na8A.v8r..8...8
240277e4:	389991be 38a2e21f 38abcda0 38b45045     ...8...8...8EP.8
240277f4:	38bc6652 38c40c44 38cb3ee0 38d1fb2b     Rf.8D..8.>.8+..8
24027804:	38d83e5f 38de0618 38e35015 38e81a75     _>.8...8.P.8u..8
24027814:	38ec638d 38f029f9 38f36ca6 38f62ab7     .c.8.).8.l.8.*.8
24027824:	38f863b0 38fa1741 38fb4575 38fbee77     .c.8A..8uE.8w..8
24027834:	38fc12f9 38fbb3ad 38fad1b5 38f96e5a     ...8...8...8Zn.8
24027844:	38f78b39 38f52a40 38f24d5e 38eef6fe     9..8@*.8^M.8...8
24027854:	38eb29a5 38e6e82c 38e23579 38dd14d3     .).8,..8y5.8...8
24027864:	38d789a9 38d19790 38cb4251 38c48dec     ...8...8QB.8...8
24027874:	38bd7e82 38b61862 38ae5fff 38a659ed     .~.8b..8._.8.Y.8
24027884:	389e0ae6 389577bf 388ca569 388398ec     ...8.w.8i..8...8
24027894:	3874aed3 3861cc24 384e9452 383b11fb     ..t8$.a8R.N8..;8
240278a4:	38274fd4 381358a0 37fe6e57 37d5ec8c     .O'8.X.8Wn.7...7
240278b4:	37ad4181 378482ba 37378b5f 36cc7eb9     .A.7...7_.77.~.6
240278c4:	35aa5cd1 b66c9886 b70aeca4 b759df59     .\.5..l.....Y.Y.
240278d4:	b793eb2e b7ba5553 b7e01af3 b80294b8     ....SU..........
240278e4:	b814b74f b8266c72 b837ab98 b8486c8a     O...rl&...7..lH.
240278f4:	b858a75f b868547e b8776cad b882f483     _.X.~Th..lw.....
24027904:	b889e182 b8907a40 b896bbdc b89ca3a9     ....@z..........
24027914:	b8a22f2a b8a75c1c b8ac286a b8b0923c     */...\..j(..<...
24027924:	b8b497ee b8b83815 b8bb717b b8be4324     .....8..{q..$C..
24027934:	b8c0ac4d b8c2ac68 b8c44322 b8c5705e     M...h..."C..^p..
24027944:	b8c63438 b8c68f02 b8c68146 b8c60bc1     84......F.......
24027954:	b8c52f69 b8c3ed65 b8c24712 b8c03dfd     i/..e....G...=..
24027964:	b8bdd3e7 b8bb0abc b8b7e49b b8b463d1     .............c..
24027974:	b8b08ad0 b8ac5c3c b8a7dadd b8a309a1     ....<\..........
24027984:	b89deb9c b8988406 b892d638 b88ce5a8     ........8.......
24027994:	b886b5e9 b8804aac b8734f6e b865a1d7     .....J..nOs...e.
240279a4:	b8579471 b8492f4b b83a7a90 b82b7e83     q.W.K/I..z:..~+.
240279b4:	b81c4382 b80cd1fe b7fa64dd b7dadac1     .C.......d......
240279c4:	b7bb16b4 b79b29d0 b7764a40 b736334d     .....)..@Jv.M36.
240279d4:	b6ec60fb b6598d4e 351130b4 369023c4     .`..N.Y..0.5.#.6
240279e4:	370678eb 3744286a 3780809d 379e7272     .x.7j(D7...7rr.7
240279f4:	37bbdad6 37d8ab3a 37f4d599 38082622     ...7:..7...7"&.8
24027a04:	38158109 38227525 382efc61 383b10eb     ...8%u"8a..8..;8
24027a14:	3846ad32 3851cbf4 385c683b 38667d58     2.F8..Q8;h\8X}f8
24027a24:	387006f5 38790106 3880b3ea 38849bfc     ..p8..y8...8...8
24027a34:	38883736 388b8439 388e81d8 38912f0c     67.89..8...8./.8
24027a44:	38938b00 38959507 38974ca1 3898b17c     ...8...8.L.8|..8
24027a54:	3899c373 389a828a 389aeef0 389b0905     s..8...8...8...8
24027a64:	389ad14e 389a487b 38996f6a 3898471b     N..8{H.8jo.8.G.8
24027a74:	3896d0bc 38950d9d 3892ff38 3890a72d     ...8...88..8-..8
24027a84:	388e073a 388b2146 3887f754 38848b8d     :..8F!.8T..8...8
24027a94:	3880e036 3879ef60 3871a8f5 3868f25d     6..8`.y8..q8].h8
24027aa4:	385fd0fb 38564a62 384c6452 384224ad     .._8bJV8RdL8.$B8
24027ab4:	38379181 382cb0fb 38218960 38162116     ..78..,8`.!8.!.8
24027ac4:	380a7e9a 37fd50eb 37e54a8c 37ccf772     .~.8.P.7.J.7r..7
24027ad4:	37b464f3 379ba081 3782b787 37536ee5     .d.7...7...7.nS7
24027ae4:	37215b2d 36de9d0e 36758d3a 353b3a04     -[!7...6:.u6.:;5
24027af4:	b6169ad7 b6ad2480 b706f5f4 b736b943     .....$......C.6.
24027b04:	b765c40d b789ff6a b7a0a95c b7b6d4aa     ..e.j...\.......
24027b14:	b7cc7693 b7e1849b b7f5f4bc b804dea3     .v..............
24027b24:	b80e6a7f b8179987 b820678c b828d09b     .j.......g ...(.
24027b34:	b830d0fc b8386531 b83f8a05 b8463c7c     ..0.1e8...?.|<F.
24027b44:	b84c79e1 b8523fbc b8578be2 b85c5c60     .yL..?R...W.`\\.
24027b54:	b860af94 b864841b b867d8d7 b86aacf3     ..`...d...g...j.
24027b64:	b86cffe1 b86ed150 b870213e b870efe8     ..l.P.n.>!p...p.
24027b74:	b8713dd1 b8710bbd b8705ab9 b86f2c0b     .=q...q..Zp..,o.
24027b84:	b86d813b b86b5c17 b868bea2 b865ab1e     ;.m..\k...h...e.
24027b94:	b862240c b85e2c1b b859c63c b854f591     .$b..,^.<.Y...T.
24027ba4:	b84fbd6c b84a2151 b84424f5 b83dcc39     l.O.Q!J..$D.9.=.
24027bb4:	b8371b25 b83015ea b828c0e0 b821207b     %.7...0...(.{ !.
24027bc4:	b8193956 b8111022 b808a9b5 b8000af2     V9.."...........
24027bd4:	b7ee71aa b7dc70d8 b7ca1da5 b7b7826b     .q...p......k...
24027be4:	b7a4a984 b7919d70 b77cd14b b7562b3c     ....p...K.|.<+V.
24027bf4:	b72f5da9 b7087d7e b6c33eea b66b60b5     .]/.~}...>...`k.
24027c04:	b5a1e08f 35910587 3660a8ca 36bb99c2     .......5..`6...6
24027c14:	3702f580 3727913d 374b8dae 376ed8ea     ...7=.'7..K7..n7
24027c24:	3788b0bb 37998b3d 37a9f3c8 37b9e280     ...7=..7...7...7
24027c34:	37c94fce 37d8347e 37e689a4 37f448ae     .O.7~4.7...7.H.7
24027c44:	3800b5b9 3806f60c 380ce29a 381278d6     ...8...8...8.x.8
24027c54:	3817b672 381c994a 38211f70 3825472f     r..8J..8p.!8/G%8
24027c64:	38290f03 382c759f 382f79f2 38321b15     ..)8.u,8.y/8..28
24027c74:	38345863 38363169 3837a5ed 3838b5e5     cX48i168..78..88
24027c84:	38396180 3839a924 38398d67 38390f1c     .a98$.98g.98..98
24027c94:	38382f3c 3836eefb 38354fbe 38335317     </88..68.O58.S38
24027ca4:	3830fac9 382e48be 382b3f19 3827e01c     ..08.H.8.?+8..'8
24027cb4:	38242e38 38202c03 381bdc3a 381741c0     8.$8., 8:..8.A.8
24027cc4:	38125f98 380d38e6 3807d0ee 38022b0d     ._.8.8.8...8.+.8
24027cd4:	37f89585 37ec6739 37dfd289 37d2def3     ...79g.7...7...7
24027ce4:	37c59417 37b7f9b6 37aa17ab 379bf5e9     ...7...7...7...7
24027cf4:	378d9c72 377e26b3 3760c591 374325af     r..7.&~7..`7.%C7
24027d04:	37255760 37076aeb 36d2e106 3696f08a     `W%7.j.7...6...6
24027d14:	363648bc 357ce15d b55c460e b62c5724     .H66].|5.F\.$W,.
24027d24:	b6902ded b6c9720b b700ed60 b71ca5cb     .-...r..`.......
24027d34:	b737d463 b7526bb2 b76c5e97 b782d045     c.7..kR..^l.E...
24027d44:	b78f12a5 b79af09a b7a66495 b7b1693d     .........d..=i..
24027d54:	b7bbf986 b7c610b0 b7cfaa3f b7d8c208     ........?.......
24027d64:	b7e15429 b7e95d0a b7f0d97a b7f7c67b     )T...]..z...{...
24027d74:	b7fe2175 b801f411 b8048c43 b806d885     u!......C.......
24027d84:	b808d82b b80a8abf b80befed b80d078a     +...............
24027d94:	b80dd19e b80e4e52 b80e7dfc b80e611a     ....RN...}...a..
24027da4:	b80df850 b80d4471 b80c466a b80aff5d     P...qD..jF..]...
24027db4:	b8097083 b8079b41 b8058121 b80323c9     .p..A...!....#..
24027dc4:	b8008502 b7fb4d6a b7f515d4 b7ee6792     ....jM.......g..
24027dd4:	b7e74717 b7dfb927 b7d7c2a2 b7cf689e     .G..'........h..
24027de4:	b7c6b05a b7bd9f44 b7b43ae7 b7aa88f8     Z...D....:......
24027df4:	b7a08f4a b79653b9 b78bdc54 b7812f35     J....S..T...5/..
24027e04:	b76ca4f1 b75698ab b740462c b729b9f3     ..l...V.,F@...).
24027e14:	b713008d b6f84d2e b6ca7135 b69c8626     .....M..5q..&...
24027e24:	b65d49b1 b601cbcb b51b0d35 354e7ebb     .I].....5....~N5
24027e34:	360d2dce 3665b888 369e891b 36c98718     .-.6..e6...6...6
24027e44:	36f3c072 370e8ffa 3722c887 37367fed     r..6...7.."7..67
24027e54:	3749ac83 375c450e 376e40bf 377f971f     ..I7.E\7.@n7...7
24027e64:	37882008 379019fd 3797b5dd 379ef044     . .7...7...7D..7
24027e74:	37a5c619 37ac346d 37b2389f 37b7d03e     ...7m4.7.8.7>..7
24027e84:	37bcf92e 37c1b17c 37c5f77f 37c9c9d4     ...7|..7...7...7
24027e94:	37cd2750 37d00f12 37d28076 37d47b18     P'.7...7v..7.{.7
24027ea4:	37d5fed8 37d70bd7 37d7a271 37d7c341     ...7...7q..7A..7
24027eb4:	37d76f34 37d6a751 37d56cfd 37d3c1ca     4o.7Q..7.l.7...7
24027ec4:	37d1a77b 37cf201f 37cc2de7 37c8d351     {..7. .7.-.7Q..7
24027ed4:	37c512fc 37c0efc2 37bc6ca6 37b78cda     ...7...7.l.7...7
24027ee4:	37b253c4 37acc4f3 37a6e40f 37a0b4ef     .S.7...7...7...7
24027ef4:	379a3b97 37937c17 378c7aa4 37853b9a     .;.7.|.7.z.7.;.7
24027f04:	377b86c0 376c2cf1 375c72f8 374c6211     ..{7.,l7.r\7.bL7
24027f14:	373c03ae 372b6143 371a847b 370976e1     ..<7Ca+7{..7.v.7
24027f24:	36f0843b 36cddfb1 36ab1367 36883294     ;..6...6g..6.2.6
24027f34:	364aa0a4 3604ff27 357e98f1 b3a8a189     ..J6'..6..~5....
24027f44:	b5933c4a b60d4115 b6500a9c b688ec18     J<...A....P.....
24027f54:	b6a94407 b6c8fcb4 b6e80625 b7032873     .D......%...s(..
24027f64:	b711e704 b7203797 b72e134b b73b7374     .....7 .K...ts;.
24027f74:	b74851e9 b754a8a5 b7607208 b76ba8d4     .QH...T..r`...k.
24027f84:	b7764825 b78025b1 b784d730 b78936ab     %Hv..%..0....6..
24027f94:	b78d4261 b790f8db b79458b9 b79760de     aB.......X...`..
24027fa4:	b79a105d b79c6670 b79e6293 b7a00469     ]...pf...b..i...
24027fb4:	b7a14bcb b7a238c5 b7a2cb98 b7a304a7     .K...8..........
24027fc4:	b7a2e497 b7a26c33 b7a19c74 b7a07682     ....3l..t....v..
24027fd4:	b79efbb6 b79d2d8d b79b0db9 b7989e0d     .....-..........
24027fe4:	b795e07d b792d73b b78f8486 b78beac8     }...;...........
24027ff4:	b7880c99 b783ec9e b77f1b57 b775e53b     ........W...;.u.
24028004:	b76c3d0c b76228fa b757af75 b74cd6f9     .=l..(b.u.W...L.
24028014:	b741a65c b7362466 b72a5817 b71e4884     \.A.f$6..X*..H..
24028024:	b711fcd9 b7057c51 b6f19c6d b6d7f3ba     ....Q|..m.......
24028034:	b6be0d43 b6a3f7bb b689c1d2 b65ef46c     C...........l.^.
24028044:	b62a5ee1 b5ebbfe2 b5832877 b4598081     .^*.....w(....Y.
24028054:	3517e325 35b20597 360b6b1c 363d1760     %..5...5.k.6`.=6
24028064:	366dedde 368eeac8 36a65b0f 36bd3bfc     ..m6...6.[.6.;.6
24028074:	36d38230 36e922b6 36fe1310 37092499     0..6.".6...6.$.7
24028084:	3712ddc6 371c308b 372518a0 372d9203     ...7.0.7..%7..-7
24028094:	373598fc 373d2a1a 37444224 374ade46     ..57.*=7$BD7F.J7
240280a4:	3750fbe0 375698a0 375bb28e 376047f0     ..P7..V7..[7.G`7
240280b4:	3764575d 3767dfc1 376ae04c 376d5879     ]Wd7..g7L.j7yXm7
240280c4:	376f481d 3770af42 37718e4b 3771e5f5     .Ho7B.p7K.q7..q7
240280d4:	3771b72f 3771032e 376fcb7f 376e11f9     /.q7..q7..o7..n7
240280e4:	376bd897 376921b5 3765efe7 376245f7     ..k7.!i7..e7.Eb7
240280f4:	375e26fe 3759963f 37549735 374f2d9b     .&^7?.Y75.T7.-O7
24028104:	37495d5b 37432a8a 373c997d 3735ae8b     []I7.*C7}.<7..57
24028114:	372e6e63 3726ddc5 371f018c 3716debf     cn.7..&7...7...7
24028124:	370e7a7a 3705d9f5 36fa0501 36e7f2f6     zz.7...7...6...6
24028134:	36d588b0 36c2d125 36afd768 369ca697     ...6%..6h..6...6
24028144:	368949d0 366b9875 364471e0 361d360b     .I.6u.k6.qD6.6.6
24028154:	35ebf5d4 359dacb0 351f7782 329367e6     ...5...5.w.5.g.2
24028164:	b514e783 b5965f2c b5e14c42 b61589bb     ....,_..BL......
24028174:	b639c723 b65d4ba2 b6800284 b690f0e0     #.9..K].........
24028184:	b6a1686e b6b16108 b6c0d2e4 b6cfb693     nh...a..........
24028194:	b6de0503 b6ebb789 b6f8c7df b7029813     ................
240281a4:	b7087574 b70df990 b713221d b717ed03     tu......."......
240281b4:	b71c586c b72062b4 b7240a74 b7274e81     lX...b .t.$..N'.
240281c4:	b72a2dea b72ca7f0 b72ebc16 b7306a24     .-*...,.....$j0.
240281d4:	b731b204 b73293ef b7331051 b73327b9     ..1...2.Q.3..'3.
240281e4:	b732db04 b7322b4f b73119ce b72fa802     ..2.O+2...1.../.
240281f4:	b72dd798 b72baa5d b729226d b72641fd     ..-.].+.m")..A&.
24028204:	b7230b71 b71f815e b71ba680 b7177dba     q.#.^........}..
24028214:	b7130a15 b70e4ebc b7094efc b7040e42     .....N...N..B...
24028224:	b6fd2031 b6f1b045 b6e5d437 b6d993b0     1 ..E...7.......
24028234:	b6ccf67b b6c00489 b6b2c5e6 b6a542bc     {............B..
24028244:	b6978342 b6898fc5 b676e138 b65a5c45     B.......8.v.E\Z.
24028254:	b63da166 b620c150 b603cca5 b5cda7d9     f.=.P. .........
24028264:	b593cf1c b5345efb b483a42f 343f256f     .....^4./...o%?4
24028274:	3520355b 35879a89 35be4690 35f401c4     [5 5...5.F.5...5
24028284:	361457f2 362e1acd 36473c3b 365faf7a     .W.6...6;<G6z._6
24028294:	36776849 36872d76 36923e19 369ce0bf     Ihw6v-.6.>.6...6
240282a4:	36a71060 36b0c847 36ba0405 36c2bf89     `..6G..6...6...6
240282b4:	36caf705 36d2a70b 36d9cc7a 36e06489     ...6...6z..6.d.6
240282c4:	36e66ccd 36ebe325 36f0c5d5 36f51370     .l.6%..6...6p..6
240282d4:	36f8cae7 36fbeb81 36fe74dc 37003377     ...6...6.t.6w3.7
240282e4:	3700e101 3701435d 37015b06 370128a1     ...7]C.7.[.7.(.7
240282f4:	3700acfb 36ffd215 36fdbbd7 36fb19bf     ...7...6...6...6
24028304:	36f7ee9f 36f43d91 36f009eb 36eb5754     ...6.=.6...6TW.6
24028314:	36e629a7 36e08503 36da6dc5 36d3e874     .).6...6.m.6t..6
24028324:	36ccf9dc 36c5a6ef 36bdf4d0 36b5e8d2     ...6...6...6...6
24028334:	36ad8862 36a4d923 369be0c8 3692a528     b..6#..6...6(..6
24028344:	36892c34 367ef7db 366b34d9 36571ba6     4,.6..~6.4k6..W6
24028354:	3642b8a5 362e183d 361946df 360450fb     ..B6=..6.F.6.P.6
24028364:	35de85f0 35b45258 358a1fb6 35400c96     ...5XR.5...5..@5
24028374:	34d87880 33c7edc1 b46601ae b50b1078     .x.4...3..f.x...
24028384:	b55b85ab b5955a2d b5bc38f7 b5e24a85     ..[.-Z...8...J..
24028394:	b603bd71 b615db5f b62775bc b63883a3     q..._....u'...8.
240283a4:	b648fc97 b658d87d b6680fae b6769aef     ..H.}.X...h...v.
240283b4:	b68239c5 b688c995 b68efa01 b694c861     .9..........a...
240283c4:	b69a324c b69f3597 b6a3d05a b6a800eb     L2...5..Z.......
240283d4:	b6abc5e7 b6af1e2a b6b208cf b6b4853b     ....*.......;...
240283e4:	b6b6930c b6b83225 b6b962af b6ba2508     ....%2...b...%..
240283f4:	b6ba79d9 b6ba6201 b6b9de9f b6b8f10c     .y...b..........
24028404:	b6b79ae5 b6b5ddf2 b6b3bc3e b6b13806     ........>....8..
24028414:	b6ae53b7 b6ab11fa b6a775a0 b6a381a9     .S.......u......
24028424:	b69f3947 b69a9fcd b695b8be b69087ba     G9..............
24028434:	b68b108c b6855714 b67ebeb7 b6725af8     .....W....~..Zr.
24028444:	b6658b5d b658587f b64acb17 b63cebff     ].e..XX...J...<.
24028454:	b62ec431 b6205cb9 b611beb1 b602f337     1....\ .....7...
24028464:	b5e806f3 b5c9f137 b5abb779 b58d6bee     ....7...y....k..
24028474:	b55e4113 b521ce5b b4cb45e1 b4278657     .A^.[.!..E..W.'.
24028484:	338a9c67 3497b5e9 350593d8 353e5e3d     g..3...4...5=^>5
24028494:	35761b07 35965600 35b0f9ff 35caeb6c     ..v5.V.5...5l..5
240284a4:	35e41cbf 35fc8103 360a05f5 361558db     ...5...5...6.X.6
240284b4:	362033ae 362a9137 36346c98 363dc156     .3 67.*6.l46V.=6
240284c4:	36468b47 364ec6a1 36566ffd 365d844b     G.F6..N6.oV6K.]6
240284d4:	366400e6 3669e381 366f2a34 3673d380     ..d6..i64*o6..s6
240284e4:	3677de3a 367b49a0 367e155b 368020b3     :.w6.I{6[.~6. .6
240284f4:	3680e70d 36815e20 36818676 368160cc     ...6 ^.6v..6.`.6
24028504:	3680ee09 36802f42 367e4b6c 367ba59b     ...6B/.6lK~6..{6
24028514:	36787034 3674aea5 367064ae 366b964f     4px6..t6.dp6O.k6
24028524:	366647d4 36607dca 365a3cf8 36538a67     .Gf6.}`6.<Z6g.S6
24028534:	364c6b4f 3644e527 363cfd89 3634ba48     OkL6'.D6..<6H.46
24028544:	362c215a 362338d4 361a06ed 36109202     Z!,6.8#6...6...6
24028554:	3606e07f 35f9f1ce 35e5c38b 35d14378     ...6...5...5xC.5
24028564:	35bc7eda 35a78304 35925d43 357a35a8     .~.5...5C].5.5z5
24028574:	354f91e8 3524e96f 34f4ac59 349fe37e     ..O5o.$5Y..4~..4
24028584:	34175591 b2798518 b434a16b b4abb349     .U.4..y.k.4.I...
24028594:	b4fbc58d b5252d34 b54ba313 b5712f46     ....4-%...K.F/q.
240285a4:	b58adeb7 b59c9d13 b5adc94c b5be5a90     ........L....Z..
240285b4:	b5ce4872 b5dd8af9 b5ec1abb b5f9f0c6     rH..............
240285c4:	b603835b b609ab4d b60f6d93 b614c7c1     [...M....m......
240285d4:	b619b7b6 b61e3ba0 b62251e5 b625f93c     .....;...Q".<.%.
240285e4:	b62930ab b62bf76f b62e4d1a b630317d     .0).o.+..M..}10.
240285f4:	b631a4b6 b632a72a b6333978 b6335c8d     ..1.*.2.x93..\3.
24028604:	b633118f b63259f6 b6313765 b62fabc7     ..3..Y2.e71.../.
24028614:	b62db949 b62b6242 b628a953 b6259143     I.-.Bb+.S.(.C.%.
24028624:	b6221d15 b61e4ffb b61a2d5c b615b8bc     .."..O..\-......
24028634:	b610f5d3 b60be886 b60694c9 b600fec9     ................
24028644:	b5f6557e b5ea3a01 b5ddb412 b5d0ccb9     ~U...:..........
24028654:	b5c38d24 b5b5fea3 b5a82a96 b59a1a7a     $........*..z...
24028664:	b58bd7dc b57ad85d b55dc20a b5407fb5     ....].z...]...@.
24028674:	b5232441 b505c26d b4d0d987 b4966b27     A$#.m.......'k..
24028684:	b438bb90 b38b5357 333067f7 341c4ba4     ..8.WS...g03.K.4
24028694:	348554a2 34bb795e 34f074fc 351214c5     .T.4^y.4.t.4...5
240286a4:	352b3d1a 3543a5b7 355b416e 357203be     .=+5..C5nA[5..r5
240286b4:	3583f06b 358e66ca 35985fd2 35a1d6a1     k..5.f.5._.5...5
240286c4:	35aac6d1 35b32c54 35bb037c 35c24907     ...5T,.5|..5.I.5
240286d4:	35c8fa11 35cf1432 35d49553 35d97bcc     ...52..5S..5.{.5
240286e4:	35ddc66b 35e1745b 35e48522 35e6f8bf     k..5[t.5"..5...5
240286f4:	35e8cf94 35ea0a62 35eaaa4b 35eab0db     ...5b..5K..5...5
24028704:	35ea1fed 35e8f9c5 35e74101 35e4f88c     ...5...5.A.5...5
24028714:	35e223b1 35dec605 35dae368 35d68016     .#.5...5h..5...5
24028724:	35d1a07c 35cc4958 35c67fa6 35c0488d     |..5XI.5...5.H.5
24028734:	35b9a98d 35b2a83f 35ab4a6a 35a39610     ...5?..5jJ.5...5
24028744:	359b9158 35934279 358aafd1 3581dfe2     X..5yB.5...5...5
24028754:	3571b26b 355f44ce 354c843e 35397e18     k.q5.D_5>.L5.~95
24028764:	35263fc0 3512d690 34fe9fb9 34d771b7     .?&5...5...4.q.4
24028774:	34b03d55 34891c82 34445186 33edece0     U=.4...4.QD4...3
24028784:	3329641f b3055a25 b3d7d2a0 b43531ad     .d)3%Z.......15.
24028794:	b47d0361 b4a199e2 b4c3ccde b4e506f6     a.}.............
240287a4:	b5029aaf b512231e b5211453 b52f665f     .....#..S.!._f/.
240287b4:	b53d11d4 b54a0fca b55659e6 b561ea5a     ..=...J..YV.Z.a.
240287c4:	b56cbbe6 b576c9df b5800814 b584459d     ..l...v......E..
240287d4:	b5881c13 b58b8a46 b58e8f55 b5912aa2     ....F...U....*..
240287e4:	b5935bde b5952308 b5968055 b5977452     .[...#..U...Rt..
240287f4:	b597ffc9 b59823dd b597e1ca b5973b37     .....#......7;..
24028804:	b59631f5 b594c81d b592fff4 b590dc05     .1..............
24028814:	b58e5f0f b58b8bfe b58865fb b584f05d     ._.......e..]...
24028824:	b5812e96 b57a489e b571aaab b5688b2d     .....Hz...q.-.h.
24028834:	b55ef23d b554e831 b54a7590 b53fa307     =.^.1.T..uJ...?.
24028844:	b534796e b52901b9 b51d44f3 b5114c39     ny4...)..D..9L..
24028854:	b50520b4 b4f1971a b4d8abd9 b4bf91e3     . ..............
24028864:	b4a65b5b b48d1a37 b467c062 b4357d91     [[..7...b.g..}5.
24028874:	b4038e51 b3a428a0 b304c193 326fd6b5     Q....(........o2
24028884:	33795845 33d97706 341a10c6 34463a10     EXy3.w.3...4.:F4
24028894:	34711ccc 348d4fd1 34a1554d 34b4938d     ..q4.O.4MU.4...4
240288a4:	34c6fffa 34d890b7 34e93cad 34f8fb80     ...4...4.<.4...4
240288b4:	3503e2d2 350aca29 351130cb 35171422     ...5)..5.0.5"..5
240288c4:	351c7203 352148a9 352596b7 35295b39     .r.5.H!5..%59[)5
240288d4:	352c959d 352f45c2 35316bdf 35330896     ..,5.E/5.k15..35
240288e4:	35341ce8 3534aa39 3534b241 35343720     ..459.45A.45 745
240288f4:	35333b41 3531c16d 352fccbc 352d6092     A;35m.15../5.`-5
24028904:	352a80a2 352730e3 35237594 351f532b     ..*5.0'5.u#5+S.5
24028914:	351ace61 3515ec21 3510b18b 350b23ec     a..5!..5...5.#.5
24028924:	350548bb 34fe4b24 34f18058 34e43cc3     .H.5$K.4X..4.<.4
24028934:	34d68c38 34c87abb 34ba145e 34ab654e     8..4.z.4^..4Ne.4
24028944:	349c79b2 348d5dc0 347c3b28 345d8a7d     .y.4.].4(;|4}.]4
24028954:	343ec15a 341ff757 340143ac 33c57a35     Z.>4W..4.C.45z.3
24028964:	3388f3f6 331a402e 32114718 b29f22aa     ...3.@.3.G.2."..
24028974:	b3411a0b b397fe24 b3cdf79a b4012b58     ..A.$.......X+..
24028984:	b41a7d45 b432e1f9 b44a4af1 b460aa9a     E}....2..JJ...`.
24028994:	b475f455 b4850e56 b48e8c92 b4977034     U.u.V.......4p..
240289a4:	b49fb511 b4a75799 b4ae54bd b4b4aa09     .....W...T......
240289b4:	b4ba558e b4bf55ec b4c3aa54 b4c7527e     .U...U..T...~R..
240289c4:	b4ca4eab b4cc9fa6 b4ce46ba b4cf45b7     .N.......F...E..
240289d4:	b4cf9eee b4cf5523 b4ce6b96 b4cce5f3     ....#U...k......
240289e4:	b4cac85b b4c8174e b4c4d7bb b4c10ee2     [...N...........
240289f4:	b4bcc262 b4b7f82a b4b2b672 b4ad03c0     b...*...r.......
24028a04:	b4a6e6d1 b4a0669c b4998a4e b492593a     .....f..N...:Y..
24028a14:	b48adad7 b48316c6 b476295b b465b89e     ........[)v...e.
24028a24:	b454eaea b443cfdd b43276f6 b420efc6     ..T...C..v2... .
24028a34:	b40f499b b3fb275f b3d7b9e3 b3b4682b     .I.._'......+h..
24028a44:	b3914efe b35d14ca b3186b4b b2a9ac8f     .N....].Kk......
24028a54:	b19444ff 32393335 32daf688 332ad657     .D..5392...2W.*3
24028a64:	336633fd 338fb652 33ab2dac 33c56ee4     .3f3R..3.-.3.n.3
24028a74:	33de6a36 33f61138 34062b7b 341097f7     6j.38..3{+.4...4
24028a84:	341a490b 34233a6b 342b6893 3432d0a1     .I.4k:#4.h+4..24
24028a94:	34397092 343f46ff 3444534f 3448959d     .p94.F?4OSD4..H4
24028aa4:	344c0ea6 344ebfe8 3450ab86 3451d449     ..L4..N4..P4I.Q4
24028ab4:	34523d97 3451eb7c 3450e28e 344f27eb     .=R4|.Q4..P4.'O4
24028ac4:	344cc152 3449b4dc 3446093f 3441c57c     R.L4..I4?.F4|.A4
24028ad4:	343cf11c 343793e7 3431b60e 342b6007     ..<4..74..14.`+4
24028ae4:	34249a90 341d6e99 3415e542 340e07d5     ..$4.n.4B..4...4
24028af4:	3405dfb9 33faecc5 33e9aab6 33d80c4b     ...4...3...3K..3
24028b04:	33c6247d 33b40620 33a1c3d7 338f7004     }$.3 ..3...3.p.3
24028b14:	337a395c 3355b6fc 33317b49 330da79c     \9z3..U3I{13...3
24028b24:	32d4b870 328f7037 321763d1 309b60fd     p..27p.2.c.2.`.0
24028b34:	b1d9373f b2684eb1 b2afa77a b2e8a27f     ?7...Nh.z.......
24028b44:	b30f7821 b3293619 b3417abc b3583779     !x...6)..zA.y7X.
24028b54:	b36d5fa5 b380743e b3896492 b3917d59     ._m.>t...d..Y}..
24028b64:	b398bc0f b39f1f1e b3a4a5e6 b3a950ac     .............P..
24028b74:	b3ad209c b3b017c2 b3b23903 b3b38812     . .......9......
24028b84:	b3b40972 b3b3c262 b3b2b8d8 b3b0f37a     r...b.......z...
24028b94:	b3ae798e b3ab52f0 b3a7880c b3a321c8     .y...R.......!..
24028ba4:	b39e2980 b398a8f4 b392aa40 b38c37ca     .)......@....7..
24028bb4:	b3855c39 b37c44c0 b36d2a7b b35d7fc8     9\...D|.{*m...].
24028bc4:	b34d5ad7 b33cd1e0 b32bfaeb b31aebd3     .ZM...<...+.....
24028bd4:	b309ba1b b2f0f5bf b2ce8572 b2ac4b4e     ........r...NK..
24028be4:	b28a6e18 b25225eb b210bb10 b1a1be60     .n...%R.....`...
24028bf4:	b0969102 3124c101 31c5e07f 321a3ab0     ......$1...1.:.2
24028c04:	324ee0c0 32805c39 3297ce32 32adb60e     ..N29\.22..2...2
24028c14:	32c20610 32d4b2df 32e5b3aa 32f501fe     ...2...2...2...2
24028c24:	33014cf9 33073cf0 330c514c 33108b97     .L.3.<.3LQ.3...3
24028c34:	3313ee75 33167d94 33183db8 33193495     u..3.}.3.=.3.4.3
24028c44:	331968c9 3318e1d5 3317a805 3315c463     .h.3...3...3c..3
24028c54:	331340a8 3310271b 330c8297 33085e68     .@.3.'.3...3h^.3
24028c64:	3303c63d 32fd8c16 32f2d41a 32e77d31     =..3...2...21}.2
24028c74:	32dba046 32cf563e 32c2b7d0 32b5dd6a     F..2>V.2...2j..2
24028c84:	32a8df0f 329bd443 328ed3b0 3281f34f     ...2C..2...2O..2
24028c94:	326a903f 3251cc32 3239bffd 32228ee0     ?.j22.Q2..92.."2
24028ca4:	320c5960 31ee7a7f 31c6aa9f 31a17301     `Y.2.z.1...1.s.1
24028cb4:	317dfa42 313ed8c1 3105bb42 30a59e03     B.}1..>1B..1...0
24028cc4:	3018d301 287ffffa 00000000 00000000     ...0...(........
	...

24028d4c <step_dd_table>:
	...
24028e80:	2fab8ce1 2fab8ce1 2f729e86 30126e14     .../.../..r/.n.0
24028e90:	2fb6c188 306dced6 300d6d57 30bd9e15     .../..m0Wm.0...0
24028ea0:	305a5159 31156364 30a598ce 31682fc6     YQZ0dc.1...0./h1
24028eb0:	30f5854b 31b17936 3131bb06 32052b5d     K..06y.1..11]+.2
24028ec0:	317b8e5c 32440ef2 31ae5dca 328d9eec     \.{1..D2.].1...2
24028ed0:	31ed3d32 32c8ee3c 321eb3c7 330c240e     2=.1<..2...2.$.3
24028ee0:	32512804 33406e0f 3287f987 33823569     .(Q2.n@3...2i5.3
24028ef0:	32aea874 33addf87 32dde428 33e5588c     t..2...3(..2.X.3
24028f00:	330b8c5d 34158f63 332def60 34410b3a     ]..3c..4`.-3:.A4
24028f10:	3356ff82 3476cb18 3383dda7 349c5cf5     ..V3..v4...3.\.4
24028f20:	33a09ed4 34c484aa 33c25ffe 34f51ca9     ...3...4._.3...4
24028f30:	33e9ce56 3517c81f 340bd463 353abd3a     V..3...5c..4:.:5
24028f40:	342660a2 35645563 3444ff1b 358aca95     .`&4cUd5..D4...5
24028f50:	34682dde 35a7d053 34883b5b 35c9df24     .-h4S..5[;.4$..5
24028f60:	349f37f1 35f1ad24 34b95e74 3610025e     .7.4$..5t^.4^..6
24028f70:	34d707b6 362ae356 34f89409 3649f5d6     ...4V.*6...4..I6
24028f80:	350f35e2 366dc350 35247fce 368b71a1     .5.5P.m6..$5.q.6
24028f90:	353c64a2 36a2fe35 355725f2 36bde2f5     .d<55..6.%W5...6
24028fa0:	35750a4e 36dc843e 358b2ec6 36ff4ff0     N.u5>..6...5.O.6
24028fb0:	359db882 37135f08 35b24dfc 3729a8c5     ...5._.7.M.5..)7
24028fc0:	35c91dde 3742cc86 35e25a15 375f17c5     ...5..B7.Z.5.._7
24028fd0:	35fe37e3 377edec8 360e780e 37913e64     .7.5..~7.x.6d>.7
24028fe0:	361f5faa 37a52a58 3631f2f3 37bb68b8     ._.6X*.7..16.h.7
24028ff0:	3646542f 37d4333e 365ca7b4 37efc836     /TF6>3.7..\66..7
24029000:	36751413 3807355b 3687e116 3818317f     ..u6[5.8...6.1.8
24029010:	36966ea0 382aff51 36a6498b 383fc883     .n.6Q.*8.I.6..?8
24029020:	36b789fd 3856b9c3 36ca4981 387002f4     ...6..V8.I.6..p8
24029030:	36dea2fb 3885eba9 36f4b2c7 389536d5     ...6...8...6.6.8
24029040:	37064b5f 38a60041 37133723 38b86725     _K.7A..8#7.7%g.8
24029050:	37212d2e 38cc8ccb 37303ed9 38e294a9     .-!7...8.>07...8
24029060:	37407e44 38faa473 3751fe84 390a7220     D~@7s..8..Q7 r.9
24029070:	3764d393 3918bf58 37791250 3928507b     ..d7X..9P.y7{P(9
24029080:	3787684b 39393d8a 3793129b 394b9fdb     Kh.7.=99...7..K9
24029090:	379f9408 395f925c 37acf8fc 39753178     ...7\._9...7x1u9
240290a0:	37bb4e74 39864da5 37caa1f9 3992f7c4     tN.7.M.9...7...9
240290b0:	37db018f 39a0a7de 37ec7be8 39af6f9a     ...7...9.{.7.o.9
240290c0:	37ff2031 39bf619e 38097f23 39d09184     1 .7.a.9#..8...9
240290d0:	38141343 39e313ea 381f5501 39f6fe8c     C..8...9.U.8...9
240290e0:	382b4d2c 3a063418 383804f1 3a11b467     ,M+8.4.:..88g..:
240290f0:	384585c4 3a1e0cc4 3853d974 3a2b4a5b     ..E8...:t.S8[J+:
24029100:	38630a24 3a397afe 38732248 3a48ad21     $.c8.z9:H"s8!.H:
24029110:	38821658 3a58efed 388b1a44 3a6a5336     X..8..X:D..86Sj:
24029120:	3894a2a8 3a7ce78a 389eb571 3a885f1b     ...8..|:q..8._.:
24029130:	38a958bb 3a92f4a9 38b492cb 3a9e3dd4     .X.8...:...8.=.:
24029140:	38c06a1c 3aaa4473 38cce54f 3ab712c9     .j.8sD.:O..8...:
24029150:	38da0b38 3ac4b381 38e7e2d6 3ad331b0     8..8...:...8.1.:
24029160:	38f6735a 3ae298de 3902e216 3af2f522     Zs.8...:...9"..:
24029170:	390aee62 3b022977 39136275 3b0b5f9e     b..9w).;ub.9._.;
24029180:	391c4240 3b1523c2 392591cc 3b1f7ce2     @B.9.#.;..%9.|.;
24029190:	392f553a 3b2a7233 393990c1 3b360b3f     :U/93r*;..99?.6;
240291a0:	394448b4 3b424fcb 394f8172 3b4f47e2     .HD9.OB;r.O9.GO;
240291b0:	395b3f70 3b5cfbd9 39678746 3b6b744f     p?[9..\;F.g9Otk;
240291c0:	39745d84 3b7aba28 3980e378 3b856b4b     .]t9(.z;x..9Kk.;
240291d0:	3987e426 3b8de98d 398f3339 3b96dcc0     &..9...;93.9...;
240291e0:	3996d32a 3ba049f3 399ec678 3baa365b     *..9.I.;x..9[6.;
240291f0:	39a70fac 3bb4a756 39afb154 3bbfa26b     ...9V..;T..9k..;
24029200:	39b8ae0c 3bcb2d4c 39c20873 3bd74dd2     ...9L-.;s..9.M.;
24029210:	39cbc32b 3be40a04 39d5e0e7 3bf16813     +..9...;...9.h.;
24029220:	39e06451 3bff6e59 39eb5023 3c0711ae     Qd.9Yn.;#P.9...<
24029230:	39f6a718 3c0ec6e6 3a0135fb 3c16da46     ...9...<.5.:F..<
24029240:	3a0750bb 3c1f4f52 3a0da532 3c2829a0     .P.:RO.<2..:.)(<
24029250:	3a1434c3 3c316cf5 3a1b00d4 3c3b1d02     .4.:.l1<...:..;<
24029260:	3a220ac8 3c453dad 3a295406 3c4fd2e7     ..":.=E<.T):..O<
24029270:	3a30ddef 3c5ae0cc 3a38a9ea 3c666b64     ..0:..Z<..8:dkf<
24029280:	3a40b958 3c727700 3a490d99 3c7f07d3     X.@:.wr<..I:...<
24029290:	3a51a80c 3c86112c 3a5a8a0b 3c8ce57c     ..Q:,..<..Z:|..<
240292a0:	3a63b4f1 3c940322 3a6d2a11 3c9b6c72     ..c:"..<.*m:rl.<
240292b0:	3a76eabf 3ca323cc 3a807c22 3cab2b8d     ..v:.#.<"|.:.+.<
240292c0:	3a85a9f9 3cb3862a 3a8aff78 3cbc3621     ...:*..<x..:!6.<
240292d0:	3a907d4c 3cc53df8 3a962408 3ccea037     L}.:.=.<.$.:7..<
240292e0:	3a9bf43d 3cd85f7d 3aa1ee8e 3ce27e65     =..:}_.<...:e~.<
240292f0:	3aa8137c 3cecff9d 3aae639a 3cf7e5d5     |..:...<.c.:...<
24029300:	3ab4df68 3d0199e6 3abb8766 3d077621     h..:...=f..:!v.=
24029310:	3ac25c17 3d0d8902 3ac95de0 3d13d3f2     .\.:...=.].:...=
24029320:	3ad08d43 3d1a585b 3ad7ea9e 3d2117b0     C..:[X.=...:..!=
24029330:	3adf7659 3d281362 3ae730c9 3d2f4cea     Yv.:b.(=.0.:.L/=
24029340:	3aef1a43 3d36c5bd 3af7331f 3d3e7f54     C..:..6=.3.:T.>=
24029350:	3aff7b98 3d467b31 3b03f9f5 3d4ebad1     .{.:1{F=...;..N=
24029360:	3b084e25 3d573fb2 3b0cba74 3d600b5b     %N.;.?W=t..;[.`=
24029370:	3b113ef1 3d691f49 3b15dbac 3d727d05     .>.;I.i=...;.}r=
24029380:	3b1a90a9 3d7c260e 3b1f5dee 3d830df7     ...;.&|=.].;...=
24029390:	3b244370 3d883012 3b294131 3d8d7a1c     pC$;.0.=1A);.z.=
240293a0:	3b2e571e 3d92ecd4 3b338528 3d9888fe     .W.;...=(.3;...=
240293b0:	3b38cb34 3d9e4f58 3b3e2924 3da440a0     4.8;XO.=$)>;.@.=
240293c0:	3b439ed1 3daa5d97 3b492c10 3db0a6f8     ..C;.].=.,I;...=
240293d0:	3b4ed0b7 3db71d7e 3b548c85 3dbdc1e2     ..N;~..=..T;...=
240293e0:	3b5a5f43 3dc494dc 3b6048a6 3dcb9721     C_Z;...=.H`;!..=
240293f0:	3b66486b 3dd2c966 3b6c5e38 3dda2c59     kHf;f..=8^l;Y,.=
24029400:	3b7289b5 3de1c0a2 3b78ca86 3de986fd     ..r;...=..x;...=
24029410:	3b7f203e 3df17ffd 3b82c537 3df9ac51     > .;...=7..;Q..=
24029420:	3b860453 3e010646 3b894d31 3e0550b6     S..;F..>1M.;.P.>
24029430:	3b8c9f8f 3e09b5ad 3b8ffb28 3e0e3589     ...;...>(..;.5.>
24029440:	3b935fb0 3e12d087 3b96ccdc 3e1786ea     ._.;...>...;...>
24029450:	3b9a4256 3e1c5903 3b9dbfcd 3e214700     VB.;.Y.>...;.G!>
24029460:	3ba144e5 3e265124 3ba4d13f 3e2b77ac     .D.;$Q&>?..;.w+>
24029470:	3ba8647c 3e30bad4 3babfe36 3e361ac5     |d.;..0>6..;..6>
24029480:	3baf9e04 3e3b97b5 3bb3437b 3e4131d1     ...;..;>{C.;.1A>
24029490:	3bb6ee27 3e46e943 3bba9d95 3e4cbe2c     '..;C.F>...;,.L>
240294a0:	3bbe514e 3e52b0bb 3bc208d3 3e58c0fe     NQ.;..R>...;..X>
240294b0:	3bc5c3a6 3e5eef1c 3bc98142 3e653b2a     ...;..^>B..;*;e>
240294c0:	3bcd4122 3e6ba52e 3bd102ba 3e722d44     "A.;..k>...;D-r>
240294d0:	3bd4c57b 3e78d372 3bd888d4 3e7f97b8     {..;r.x>...;...>
240294e0:	3bdc4c31 3e833d0b 3be00ef6 3e86bd4a     1L.;.=.>...;J..>
240294f0:	3be3d08a 3e8a4c8a 3be7904c 3e8deacd     ...;.L.>L..;...>
24029500:	3beb4d9b 3e919804 3bef07d1 3e955422     .M.;...>...;"T.>
24029510:	3bf2be48 3e991f1a 3bf67050 3e9cf8da     H..;...>Pp.;...>
24029520:	3bfa1d41 3ea0e150 3bfdc469 3ea4d863     A..;P..>i..;c..>
24029530:	3c00b289 3ea8ddf8 3c027f46 3eacf1f2     ...<...>F..<...>
24029540:	3c04480e 3eb11432 3c060c85 bf255db5     .H.<2..>...<.]%.
24029550:	3c07cc4d bf233e85 3c098709 bf211867     M..<.>#....<g.!.
24029560:	3c0b3c56 bf1eeb77 3c0cebd8 bf1cb7c7     V<.<w......<....
24029570:	3c0e952b bf1a7d73 3c1037f0 bf183c93     +..<s}...7.<.<..
24029580:	3c11d3c3 bf15f544 3c136843 bf13a7a3     ...<D...Ch.<....
24029590:	3c14f50d bf1153ce 3c1679be bf0ef9e7     ...<.S...y.<....
240295a0:	3c17f5f4 bf0c9a10 3c196949 bf0a346a     ...<....Ii.<j4..
240295b0:	3c1ad35d bf07c91d 3c1c33cc bf05584e     ]..<.....3.<NX..
240295c0:	3c1d8a33 bf02e225 3c1ed630 bf0066cd     3..<%...0..<.f..
240295d0:	3c201761 befbccde 3c214d65 bef6c274     a. <....eM!<t...
240295e0:	3c2277db bef1aeb4 3c239663 beec9200     .w"<....c.#<....
240295f0:	3c24a8a1 bee76cba 3c25ae30 bee23f4a     ..$<.l..0.%<J?..
24029600:	3c26a6b3 bedd0a13 3c2791d5 bed7cd86     ..&<......'<....
24029610:	3c286f40 bed28a0d 3c293e93 becd4017     @o(<.....>)<.@..
24029620:	3c29ff6d bec7f01d 3c2ab18f bec29a8e     m.)<......*<....
24029630:	3c2b548d bebd3fec 3c2be826 beb7e0a9     .T+<.?..&.+<....
24029640:	3c2c6c04 beb27d49 3c2cdfd2 bead164b     .l,<I}....,<K...
24029650:	3c2d435a bea7ac31 3c2d9631 bea23f7f     ZC-<1...1.-<.?..
24029660:	3c2dd82a be9cd0bf 3c2e08fd be976076     *.-<.......<v`..
24029670:	3c2e285c be91ef31 3c2e3614 be8c7d80     \(.<1....6.<.}..
24029680:	3c2e31e2 be870bf2 3c2e1b92 be819b15     .1.<.......<....
24029690:	3c2df2e2 be7856fb 3c2db7b4 be6d7b85     ..-<.Vx...-<.{m.
240296a0:	3c2d69bb be62a4e9 3c2d08e2 be57d45a     .i-<..b...-<Z.W.
240296b0:	3c2c94f4 be4d0b08 3c2c0ddb be424a2e     ..,<..M...,<.JB.
240296c0:	3c2b7361 be3792f3 3c2ac571 be2ce69f     as+<..7.q.*<..,.
240296d0:	3c2a03ea be224661 3c292ec3 be17b374     ..*<aF"...)<t...
240296e0:	3c2845da be0d2f14 3c274930 be02ba82     .E(<./..0I'<....
240296f0:	3c2638af bdf0adf5 3c251457 bddc0b64     .8&<....W.%<d...
24029700:	3c23dc28 bdc78fe2 3c229016 bdb33ddf     (.#<......"<.=..
24029710:	3c213035 bd9f17d8 3c1fbc8f bd8b2046     50!<.......<F ..
24029720:	3c1e3530 bd6eb341 3c1c9a2d bd478cb4     05.<A.n.-..<..G.
24029730:	3c1aeba0 bd20d1cd 3c1929a4 bcf50ec5     ...<.. ..).<....
24029740:	3c17545d bca96498 3c156bef bc3d5d43     ]T.<.d...k.<C]=.
24029750:	3c137087 bb27b2f3 3c116254 3bceeb31     .p.<..'.Tb.<1..;
24029760:	3c0f418b 3c76b721 3c0d0e64 3cc1e2c4     .A.<!.v<d..<...<
24029770:	3c0ac91e 3d03a3a9 3c0871fb 3d25c029     ...<...=.q.<).%=
24029780:	3c060941 3d474277 3c038f3e 3d682647     A..<wBG=>..<G&h=
24029790:	3c010441 3d8433ac 3bfcd13b 3d9400bf     A..<.3.=;..;...=
240297a0:	3bf77963 3da37855 3bf201ae 3db29871     cy.;Ux.=...;q..=
240297b0:	3bec6ae4 3dc15f1f 3be6b5d7 3dcfca78     .j.;._.=...;x..=
240297c0:	3be0e358 3dddd8b6 3bdaf44b 3deb87f3     X..;...=K..;...=
240297d0:	3bd4e996 3df8d691 3bcec429 3e02e169     ...;...=)..;i..>
240297e0:	3bc884ff 3e092593 3bc22d19 3e0f36fd     ...;.%.>.-.;.6.>
240297f0:	3bbbbd7d 3e1514e4 3bb5373e 3e1abea0     }..;...>>7.;...>
24029800:	3bae9b72 3e20337c 3ba7eb3b 3e2572d8     r..;|3 >;..;.r%>
24029810:	3ba127bf 3e2a7c11 3b9a5228 3e2f4ea2     .'.;.|*>(R.;.N/>
24029820:	3b936baf 3e33ea05 3b8c758b 3e384dac     .k.;..3>.u.;.M8>
24029830:	3b8570fd 3e3c7934 3b7cbe93 3e406c30     .p.;4y<>..|;0l@>
24029840:	3b6e8381 3e44263c 3b603365 3e47a70e     ..n;<&D>e3`;..G>
24029850:	3b51d0e5 3e4aee4f 3b435eba 3e4dfbc9     ..Q;O.J>.^C;..M>
24029860:	3b34df9f 3e50cf47 3b265663 3e5368a0     ..4;G.P>cV&;.hS>
24029870:	3b17c5cd 3e55c7b9 3b0930b4 3e57ec7f     ...;..U>.0.;..W>
24029880:	3af533e3 3e59d6e4 3ad808c9 3e5b86f4     .3.:..Y>...:..[>
24029890:	3abae5e7 3e5cfcbf 3a9dd114 3e5e3865     ...:..\>...:e8^>
240298a0:	3a80d01a 3e5f3a01 3a47d1c2 3e6001d6     ...:.:_>..G:..`>
240298b0:	3a0e4288 3e60901a 39a9fc92 3e60e516     .B.:..`>...9..`>
240298c0:	38e08650 3e61012a b8e3d1a1 3e60e4ab     P..8*.a>......`>
240298d0:	b9a92df1 3e609013 ba0c39ce 3e6003db     .-....`>.9....`>
240298e0:	ba435715 3e5f4088 ba79e332 3e5e46a1     .WC..@_>2.y..F^>
240298f0:	ba97e951 3e5d16ce bab28d06 3e5bb1b6     Q.....]>......[>
24029900:	baccd6f8 3e5a1808 bae6c1a7 3e584a87     ......Z>.....JX>
24029910:	bb0023b8 3e5649f5 bb0cb172 3e541730     .#...IV>r...0.T>
24029920:	bb19074d 3e51b315 bb2522a0 3e4f1e88     M.....Q>."%...O>
24029930:	bb3100d0 3e4c5a81 bb3c9f47 3e496807     ..1..ZL>G.<..hI>
24029940:	bb47fb82 3e464819 bb531304 3e42fbcf     ..G..HF>..S...B>
24029950:	bb5de36d 3e3f843e bb686a5a 3e3be293     m.].>.?>Zjh...;>
24029960:	bb72a586 3e381803 bb7c92b8 3e3425b6     ..r...8>..|..%4>
24029970:	bb8317e0 3e300cf3 bb87bd46 3e2bcf0b     ......0>F.....+>
24029980:	bb8c388c 3e276d47 bb9088b9 3e22e903     .8..Gm'>......">
24029990:	bb94acde 3e1e439d bb98a419 3e197e78     .....C.>....x~.>
240299a0:	bb9c6d8e 3e149b0c bba0086d 3e0f9ac9     .m.....>m......>
240299b0:	bba373f8 3e0a7f29 bba6af71 3e0549af     .s..)..>q....I.>
240299c0:	bba9ba30 3dfff7b7 bbac9392 3df52e80     0......=.......=
240299d0:	bbaf3b03 3dea3ad2 bbb1affe 3ddf1fd0     .;...:.=.......=
240299e0:	bbb3f206 3dd3e0b0 bbb600ab 3dc880a6     .......=.......=
240299f0:	bbb7db91 3dbd02ed bbb9825e 3db16ac8     .......=^....j.=
24029a00:	bbbaf4cf 3da5bb7a bbbc32ab 3d99f850     ....z..=.2..P..=
24029a10:	bbbd3bc9 3d8e2493 bbbe1006 3d824393     .;...$.=.....C.=
24029a20:	bbbeaf55 3d6cb13c bbbf19b5 3d54ce06     U...<.l=......T=
24029a30:	bbbf4f31 3d3ce41f bbbf4fe6 3d24fa23     1O....<=.O..#.$=
24029a40:	bbbf1bf9 3d0d16a4 bbbeb3a0 3cea805c     .......=....\..<
24029a50:	bbbe1723 3cbafa98 bbbd46d5 3c8ba8e0     #......<.F.....<
24029a60:	bbbc4312 3c393038 bbbb0c4e 3bb7541f     .C..809<N....T.;
24029a70:	bbb9a302 b893b8a1 bbb807bb bbba569e     .............V..
24029a80:	bbb63b10 bc3848d2 bbb43da6 bc8933d6     .;...H8..=...3..
24029a90:	bbb21031 bcb5b7e3 bbafb373 bce1a4bb     1.......s.......
24029aa0:	bbad2837 bd067766 bbaa6f5b bd1bc550     7(..fw..[o..P...
24029ab0:	bba789c5 bd30b689 bba47867 bd454597     ......0.gx...EE.
24029ac0:	bba13c46 bd596d1f bb9dd66a bd6d27ec     F<...mY.j....'m.
24029ad0:	bb9a47ec bd803875 bb9691f3 bd89a194     .G..u8..........
24029ae0:	bb92b5a9 bd92ccef bb8eb44a bd9bb834     ........J...4...
24029af0:	bb8a8f18 bda46125 bb864764 bdacc59b     ....%a..dG......
24029b00:	bb81de85 bdb4e383 bb7aabba bdbcb8e2     ..........z.....
24029b10:	bb715dae bdc443cf bb67d5ca bdcb827d     .]q..C....g.}...
24029b20:	bb5e1704 bdd27335 bb542467 bdd91453     ..^.5s..g$T.S...
24029b30:	bb4a0104 bddf6464 bb3fafff bde561e2     ..J.dd....?..a..
24029b40:	bb353488 bdeb0b8a bb2a91e0 bdf0601a     .45.......*..`..
24029b50:	bb1fcb48 bdf55e6c bb14e413 bdfa058d     H...l^..........
24029b60:	bb09df9b bdfe548c bafd8288 be012549     .....T......I%..
24029b70:	bae718f6 be02f380 bad0894d be049492     ........M.......
24029b80:	bab9da82 be060844 baa3137c be074e6c     ....D...|...lN..
24029b90:	ba8c3b40 be0866e4 ba6ab183 be095190     @;...f....j..Q..
24029ba0:	ba3ce5f1 be0a0e77 ba0f21c8 be0a9d98     ..<.w....!......
24029bb0:	b9c2e5ec be0aff0f b94f9d7f be0b32f7     ..........O..2..
24029bc0:	b7d19bcc be0b3985 391a3b27 be0b12f5     .....9..';.9....
24029bd0:	39a6bbd4 be0abf98 39ffa5de be0a3fc6     ...9.......9.?..
24029be0:	3a2be069 be0993e3 3a577906 be08bc67     i.+:.....yW:g...
24029bf0:	3a8147d0 be07b9da 3a968b9d be068cc0     .G.:.......:....
24029c00:	3aab818a be0535bc 3ac02346 be03b576     ...:.5..F#.:v...
24029c10:	3ad46aa6 be020ca1 3ae8519f be003c01     .j.:.....Q.:.<..
24029c20:	3afbd238 bdfc88b2 3b077351 bdf84d19     8..:....Qs.;.M..
24029c30:	3b10c49e bdf3c6f2 3b19da42 bdeef820     ...;....B..; ...
24029c40:	3b22b18a bde9e295 3b2b47e0 bde4885b     ..";.....G+;[...
24029c50:	3b339ac0 bddeeb8b 3b3ba7bb bdd90e4c     ..3;......;;L...
24029c60:	3b436c7c bdd2f2df 3b4ae6c8 bdcc9bad     |lC;......J;....
24029c70:	3b521475 bdc60b08 3b58f37b bdbf436d     u.R;....{.X;mC..
24029c80:	3b5f81e4 bdb8475e 3b65bddb bdb1196f     .._;^G....e;o...
24029c90:	3b6ba5a2 bda9bc41 3b7137a1 bda23285     ..k;A....7q;.2..
24029ca0:	3b767249 bd9a7ef3 3b7b543d bd92a451     Irv;.~..=T{;Q...
24029cb0:	3b7fdc2e bd8aa56f 3b82047d bd828527     ...;o...}..;'...
24029cc0:	3b83ecc3 bd748cb7 3b85a677 bd63d7e6     ...;..t.w..;..c.
24029cd0:	3b873131 bd52f1c2 3b888c99 bd41e02f     11.;..R....;/.A.
24029ce0:	3b89b863 bd30a923 3b8ab45b bd1f5296     c..;#.0.[..;.R..
24029cf0:	3b8b8056 bd0de28c 3b8c1c3d bcf8be07     V..;....=..;....
24029d00:	3b8c8806 bcd59c09 3b8cc3b7 bcb26b1c     ...;.......;.k..
24029d10:	3b8ccf6b bc8f3740 3b8cab45 bc5818db     k..;@7..E..;..X.
24029d20:	3b8c5781 bc11ed1d 3b8bd461 bb9805d9     .W.;....a..;....
24029d30:	3b8b223f b9ce39b3 3b8a4180 3b7abbc8     ?".;.9...A.;..z;
24029d40:	3b893299 3c03483f 3b87f612 3c47434b     .2.;?H.<...;KCG<
24029d50:	3b868c7b 3c8544c3 3b84f67b 3ca68260     {..;.D.<{..;`..<
24029d60:	3b8334c0 3cc74f90 3b81480e 3ce7a195     .4.;.O.<.H.;...<
24029d70:	3b7e6264 3d03b6f1 3b79e211 3d135512     db~;...=..y;.U.=
24029d80:	3b7510f5 3d22a620 3b6ff0ff 3d31a531     ..u; ."=..o;1.1=
24029d90:	3b6a843a 3d404d75 3b64ccc9 3d4e9a42     :.j;uM@=..d;B.N=
24029da0:	3b5ecce6 3d5c870f 3b5886dd 3d6a0f7e     ..^;..\=..X;~.j=
24029db0:	3b51fd1f 3d772f4f 3b4b3229 3d81f139     ..Q;O/w=)2K;9..=
24029dc0:	3b44288a 3d88127e 3b3ce2f5 3d8df996     .(D;~..=..<;...=
24029dd0:	3b356419 3d93a4b5 3b2daecf 3d99122c     .d5;...=..-;,..=
24029de0:	3b25c5f3 3d9e405c 3b1dac70 3da32dbf     ..%;\@.=p..;.-.=
24029df0:	3b15654f 3da7d8ea 3b0cf399 3dac4087     Oe.;...=...;.@.=
24029e00:	3b045a69 3db0635a 3af739c4 3db44041     iZ.;Zc.=.9.:A@.=
24029e10:	3ae57c7a 3db7d633 3ad38364 3dbb2441     z|.:3..=d..:A$.=
24029e20:	3ac15517 3dbe2995 3aaef814 3dc0e576     .U.:.).=...:v..=
24029e30:	3a9c7313 3dc35741 3a89ccc8 3dc57e74     .s.:AW.=...:t~.=
24029e40:	3a6e17ae 3dc75aa4 3a486e18 3dc8eb80     ..n:.Z.=.nH:...=
24029e50:	3a22aa49 3dca30d5 39f9b387 3dcb2a89     I.":.0.=...9.*.=
24029e60:	39ae140f 3dcbd89d 3945223e 3dcc3b2e     ...9...=>"E9.;.=
24029e70:	383a2c72 3dcc5272 b8cecfc1 3dcc1ebf     r,:8rR.=.......=
24029e80:	b97c81a6 3dcba07e b9c846c5 3dcad837     ..|.~..=.F..7..=
24029e90:	ba08d5d9 3dc9c68c ba2d2ae8 3dc86c35     .......=.*-.5l.=
24029ea0:	ba5115d2 3dc6ca0a ba748a09 3dc4e0f7     ..Q....=..t....=
24029eb0:	ba8bbd97 3dc2b200 ba9cee85 3dc03e45     .......=....E>.=
24029ec0:	baadd1e8 3dbd86fe babe61e1 3dba8d76     .......=.a..v..=
24029ed0:	bace98b2 3db75314 bade70d3 3db3d951     .....S.=.p..Q..=
24029ee0:	baede4d3 3db021bd bafcef6e 3dac2e00     .....!.=n......=
24029ef0:	bb05c5c1 3da7ffd1 bb0cda14 3da39900     .......=.......=
24029f00:	bb13b24f 3d9efb6e bb1a4c20 3d9a290d     O...n..= L...).=
24029f10:	bb20a55a 3d9523e2 bb26bbdf 3d8fee03     Z. ..#.=..&....=
24029f20:	bb2c8db0 3d8a8996 bb3218ec 3d84f8cf     ..,....=..2....=
24029f30:	bb375bbf 3d7e7be1 bb3c5485 3d72b699     .[7..{~=.T<...r=
24029f40:	bb41019f 3d66a680 bb45619a 3d5a5066     ..A...f=.aE.fPZ=
24029f50:	bb497322 3d4db934 bb4d34f8 3d40e5e4     "sI.4.M=.4M...@=
24029f60:	bb50a5fa 3d33db84 bb53c531 3d269f31     ..P...3=1.S.1.&=
24029f70:	bb5691b6 3d193614 bb590ac9 3d0ba568     ..V..6.=..Y.h..=
24029f80:	bb5b2fc9 3cfbe4d8 bb5d0036 3ce044d4     ./[....<6.]..D.<
24029f90:	bb5e7ba9 3cc4755b bb5fa1e7 3ca8811e     .{^.[u.<.._....<
24029fa0:	bb6072c3 3c8c72ca bb60ee3e 3c60aa04     .r`..r.<>.`...`<
24029fb0:	bb611471 3c2864e4 bb60e59e 3be056fa     q.a..d(<..`..V.;
24029fc0:	bb60621e 3b604bd6 bb5f8a6e 37416576     .b`..K`;n._.veA7
24029fd0:	bb5e5f28 bb5d9dc0 bb5ce102 bbdd3f61     (_^...]...\.a?..
24029fe0:	bb5b10d5 bc2563e8 bb58ef9b bc5b9fce     ..[..c%...X...[.
24029ff0:	bb567e63 bc889fb1 bb53be61 bca3177c     c~V.....a.S.|...
2402a000:	bb50b0e1 bcbd2d9d bb4d5754 bcd6d884     ..P..-..TWM.....
2402a010:	bb49b339 bcf00eec bb45c633 bd0463da     9.I.....3.E..c..
2402a020:	bb419202 bd107cfb bb3d1875 bd1c4e82     ..A..|..u.=..N..
2402a030:	bb385b84 bd27d43a bb335d32 bd330a0e     .[8.:.'.2]3...3.
2402a040:	bb2e1f9a bd3dec07 bb28a4f6 bd487656     ......=...(.VvH.
2402a050:	bb22ef91 bd52a54f bb1d01c8 bd5c756c     ..".O.R.....lu\.
2402a060:	bb16de13 bd65e34c bb1086f6 bd6eebbb     ....L.e.......n.
2402a070:	bb09ff0c bd778bad bb034902 bd7fc03c     ......w..I..<...
2402a080:	baf8cf1a bd83c35a baeabaec bd876e46     ....Z.......Fn..
2402a090:	badc5b2d bd8adfb2 bacdb5a2 bd8e1689     -[..............
2402a0a0:	babed024 bd9111ca baafb0b2 bd93d08d     $...............
2402a0b0:	baa05d47 bd965201 ba90dbf5 bd989571     G]...R......q...
2402a0c0:	ba8132e9 bd9a9a3d ba62d097 bd9c5fde     .2..=.....b.._..
2402a0d0:	ba4304ab bd9de5e8 ba230e8a bd9f2c05     ..C.......#..,..
2402a0e0:	ba02fab7 bda031fa b9c5ab77 bda0f7a6     .....1..w.......
2402a0f0:	b9855836 bda17cfd b90a2968 bda1c213     6X...|..h)......
2402a100:	b71f3a7b bda1c70d 38eb7e6a bda18c2c     {:......j~.8,...
2402a110:	3974bdf6 bda111ce 39b96bdc bda05862     ..t9.....k.9bX..
2402a120:	39f7ee0c bd9f6074 3a1ae6cd bd9e2aa7     ...9t`.....:.*..
2402a130:	3a397978 bd9cb7b4 3a57a360 bd9b086c     xy9:....`.W:l...
2402a140:	3a755914 bd991dba 3a8947ac bd96f89c     .Yu:.....G.:....
2402a150:	3a979d8d bd949a26 3aa5a8cf bd920383     ...:&......:....
2402a160:	3ab36435 bd8f35f2 3ac0ca94 bd8c32c8     5d.:.5.....:.2..
2402a170:	3acdd6ec bd88fb6c 3ada8479 bd85915a     ...:l...y..:Z...
2402a180:	3ae6ce78 bd81f620 3af2b07b bd7c56bb     x..: ...{..:.V|.
2402a190:	3afe261c bd74658b 3b04959a bd6c1c30     .&.:.et....;0.l.
2402a1a0:	3b09dde5 bd637e52 3b0eea0b bd5a8fb3     ...;R~c....;..Z.
2402a1b0:	3b13b83b bd51542e 3b1846c9 bd47cfc3     ;..;.TQ..F.;..G.
2402a1c0:	3b1c9417 bd3e0681 3b209ead bd33fc97     ...;..>... ;..3.
2402a1d0:	3b246520 bd29b645 3b27e634 bd1f37e1      e$;E.).4.';.7..
2402a1e0:	3b2b20b7 bd1485d4 3b2e139c bd09a49c     . +;.......;....
2402a1f0:	3b30bdf4 bcfd3179 3b331eef bce6cd9a     ..0;y1....3;....
2402a200:	3b3535d3 bcd026df 3b37020f bcb9469e     .55;.&....7;.F..
2402a210:	3b388321 bca2363b 3b39b8b3 bc8aff22     !.8;;6....9;"...
2402a220:	3b3aa286 bc6755a5 3b3b4080 bc388583     ..:;.Ug..@;;..8.
2402a230:	3b3b929b bc09a0de 3b3b98f7 bbb57540     ..;;......;;@u..
2402a240:	3b3b53d4 bb2f96ad 3b3ac387 3932cd6d     .S;;../...:;m.29
2402a250:	3b39e888 3b45155e 3b38c36f 3bbeec67     ..9;^.E;o.8;g..;
2402a260:	3b3754f0 3c0d4b6f 3b359dd8 3c3ab2e4     .T7;oK.<..5;..:<
2402a270:	3b339f14 3c679aae 3b3159ae 3c89f88c     ..3;..g<.Y1;...<
2402a280:	3b2ececa 3c9fd263 3b2bffa7 3cb55257     ...;c..<..+;WR.<
2402a290:	3b28eda0 3cca700b 3b259a25 3cdf2351     ..(;.p.<%.%;Q#.<
2402a2a0:	3b2206c8 3cf3642b 3b1e3530 3d039569     ..";+d.<05.;i..=
2402a2b0:	3b1a2715 3d0d37d9 3b15de52 3d1695be     .'.;.7.=R..;...=
2402a2c0:	3b115cd2 3d1fab8c 3b0ca494 3d2875d5     .\.;...=...;.u(=
2402a2d0:	3b07b7af 3d30f14f 3b029850 3d391ad4     ...;O.0=P..;..9=
2402a2e0:	3afa915f 3d40ef61 3aef9648 3d486c12     _..:a.@=H..:.lH=
2402a2f0:	3ae4440d 3d4f8e33 3ad89f94 3d565331     .D.:3.O=...:1SV=
2402a300:	3accade5 3d5cb89d 3ac0740a 3d62bc40     ...:..\=.t.:@.b=
2402a310:	3ab3f746 3d685bfa 3aa73ce8 3d6d95e0     F..:.[h=.<.:..m=
2402a320:	3a9a4a44 3d726832 3a8d24db 3d76d158     DJ.:2hr=.$.:X.v=
2402a330:	3a7fa456 3d7acfea 3a64afa7 3d7e62a9     V..:..z=..d:.b~=
2402a340:	3a4976e3 3d80c443 3a2e0563 3d82204d     .vI:C..=c..:M .=
2402a350:	3a126693 3d83451b 39ed4bc7 3d843266     .f.:.E.=.K.9f2.=
2402a360:	39b59d99 3d84e804 397bb331 3d8565de     ...9...=1.{9.e.=
2402a370:	390c2d6b 3d85abf4 37e6bcaf 3d85ba60     k-.9...=...7`..=
2402a380:	b8a4416c 3d85914f b9408e33 3d853109     lA..O..=3.@..1.=
2402a390:	b99721f4 3d8499e7 b9cd8aa3 3d83cc5c     .!.....=....\..=
2402a3a0:	ba01b593 3d82c8f1 ba1c56dc 3d819043     .......=.V..C..=
2402a3b0:	ba369e73 3d802306 ba5081cb 3d7d0405     s.6..#.=..P...}=
2402a3c0:	ba69f687 3d795c2a ba81793f 3d755061     ..i.*\y=?y..aPu=
2402a3d0:	ba8db5e1 3d70e2b1 ba99ac53 3d6c154f     ......p=S...O.l=
2402a3e0:	baa557cf 3d66ea90 bab0b3ce 3d6164f2     .W....f=.....da=
2402a3f0:	babbbbd0 3d5b8715 bac66b8a 3d5553b7     ......[=.k...SU=
2402a400:	bad0bed2 3d4ecdc1 badab1b4 3d47f834     ......N=....4.G=
2402a410:	bae4405c 3d40d631 baed6719 3d396af8     \@..1.@=.g...j9=
2402a420:	baf62275 3d31b9e4 bafe6f29 3d29c66b     u"....1=)o..k.)=
2402a430:	bb03250a 3d21941a bb06d825 3d192698     .%....!=%....&.=
2402a440:	bb0a4f8f 3d1081a0 bb0d8a06 3d07a8ff     .O.....=.......=
2402a450:	bb10865c 3cfd4134 bb13438c 3cead8c1     \...4A.<.C.....<
2402a460:	bb15c09c 3cd820ae bb17fcb6 3cc52117     ..... .<.....!.<
2402a470:	bb19f722 3cb1e230 bb1baf40 3c9e6c4c     "...0..<@...Ll.<
2402a480:	bb1d248f 3c8ac7ba bb1e56a0 3c6df9c3     .$.....<.V....m<
2402a490:	bb1f452e 3c462879 bb1ff00a 3c1e2c7a     .E..y(F<....z,.<
2402a4a0:	bb20571f 3bec2d65 bb207a78 3b9bf029     .W .e-.;xz .)..;
2402a4b0:	bb205a42 3b178610 bb1ff6b4 b9070a1c     BZ ....;........
2402a4c0:	bb1f5034 bb27c0d7 bb1e673c bba3140a     4P....'.<g......
2402a4d0:	bb1d3c62 bbf1b23b bb1bd056 bc1fcd33     b<..;...V...3...
2402a4e0:	bb1a23e5 bc465630 bb1837f0 bc6c642c     .#..0VF..7..,dl.
2402a4f0:	bb160d80 bc88f3c5 bb13a5ad bc9b687c     ............|h..
2402a500:	bb1101a7 bcad88af bb0e22ba bcbf4d07     ........."...M..
2402a510:	bb0b0a4e bcd0ae4e bb07b9d9 bce1a58c     N...N...........
2402a520:	bb0432ef bcf22be7 bb007738 bd011d69     .2...+..8w..i...
2402a530:	baf910df bd08e5f0 baf0d0c9 bd106c74     ............tl..
2402a540:	bae83203 bd17ae04 badf3870 bd1ea7c9     .2......p8......
2402a550:	bad5e821 bd25570a bacc4557 bd2bb934     !....W%.WE..4.+.
2402a560:	bac25456 bd31cbd8 bab8199e bd378ca4     VT....1.......7.
2402a570:	baad99b4 bd3cf973 baa2d945 bd42103b     ....s.<.E...;.B.
2402a580:	ba97dd1b bd46cf24 ba8ca9fb bd4b3474     ....$.F.....t4K.
2402a590:	ba8144db bd4f3e9c ba6b6572 bd52ec31     .D...>O.rek.1.R.
2402a5a0:	ba53f140 bd563bf7 ba3c3755 bd592cd5     @.S..;V.U7<..,Y.
2402a5b0:	ba2441fe bd5bbddc ba0c1b9a bd5dee4a     .A$...[.....J.].
2402a5c0:	b9e79d27 bd5fbd85 b9b6cac8 bd612b1b     '....._......+a.
2402a5d0:	b985d509 bd6236c4 b929a1cc bd62e065     .....6b...).e.b.
2402a5e0:	b88f4d1f bd63280b 37d0eed1 bd630def     .M...(c....7..c.
2402a5f0:	38f703d3 bd62926c 395c5c54 bd61b610     ...8l.b.T\\9..a.
2402a600:	399e4214 bd60798d 39cde871 bd5eddbc     .B.9.y`.q..9..^.
2402a610:	39fd0d35 bd5ce3a1 3a15ce4e bd5a8c69     5..9..\.N..:i.Z.
2402a620:	3a2cc198 bd57d960 3a4356e5 bd54cc05     ..,:`.W..VC:..T.
2402a630:	3a5984d6 bd5165f1 3a6f4237 bd4da8e8     ..Y:.eQ.7Bo:..M.
2402a640:	3a824307 bd4996d2 3a8ca3ce bd4531b3     .C.:..I....:.1E.
2402a650:	3a96bf30 bd407bb9 3aa0910d bd3b7732     0..:.{@....:2w;.
2402a660:	3aaa155f bd362685 3ab34853 bd308c42     _..:.&6.SH.:B.0.
2402a670:	3abc2636 bd2aab12 3ac4ab6b bd2485b6     6&.:..*.k..:..$.
2402a680:	3accd49e bd1e1f12 3ad49e86 bd177a1d     ...:.......:.z..
2402a690:	3adc061d bd1099ec 3ae30870 bd0981a9     ...:....p..:....
2402a6a0:	3ae9a2cf bd023493 3aefd2b6 bcf56bf8     ...:.4.....:.k..
2402a6b0:	3af595c4 bce6129e 3afae9c9 bcd66400     ...:.......:.d..
2402a6c0:	3affccdd bcc66732 3b021e9c bcb6235d     ...:2g.....;]#..
2402a6d0:	3b041c9a bca59fcd 3b05dfc2 bc94e3d2     ...;.......;....
2402a6e0:	3b07677d bc83f6e5 3b08b347 bc65c0ef     }g.;....G..;..e.
2402a6f0:	3b09c2c8 bc435042 3b0a95b0 bc20aad7     ...;BPC....;.. .
2402a700:	3b0b2bd4 bbfbbfc3 3b0b8522 bbb5fd32     .+.;...."..;2...
2402a710:	3b0ba19f bb6058c1 3b0b8171 baa9aea9     ...;.X`.q..;....
2402a720:	3b0b24cc 3a5935ee 3b0a8c0f 3b40d98b     .$.;.5Y:...;..@;
2402a730:	3b09b7a0 3ba54895 3b08a80d 3be99c9c     ...;.H.;...;...;
2402a740:	3b075dfa 3c16a5cd 3b05da1b 3c381c51     .].;...<...;Q.8<
2402a750:	3b041d4a 3c5923a8 3b022871 3c79adc1     J..;.#Y<q(.;..y<
2402a760:	3afff928 3c8cd672 3afb3596 3c9c89ce     (..:r..<.5.:...<
2402a770:	3af60897 3cabea59 3af074b6 3cbaf1a3     ...:Y..<.t.:...<
2402a780:	3aea7ca5 3cc9996c 3ae42356 3cd7dba4     .|.:l..<V#.:...<
2402a790:	3add6bc5 3ce5b25c 3ad65935 3cf317f0     .k.:\..<5Y.:...<
2402a7a0:	3aceeef7 3d000370 3ac73089 3d063cf6     ...:p..=.0.:.<.=
2402a7b0:	3abf2182 3d0c3601 3ab6c5ad 3d11ec2e     .!.:.6.=...:...=
2402a7c0:	3aae20dd 3d175d34 3aa53718 3d1c86ef     . .:4].=.7.:...=
2402a7d0:	3a9c0c6e 3d216751 3a92a51a 3d25fc79     n..:Qg!=...:y.%=
2402a7e0:	3a890555 3d2a44a5 3a7e630f 3d2e3e31     U..:.D*=.c~:1>.=
2402a7f0:	3a6a5c42 3d31e7a1 3a55ff4d 3d353fa0     B\j:..1=M.U:.?5=
2402a800:	3a415555 3d3844f6 3a2c679d 3d3af694     UUA:.D8=.g,:..:=
2402a810:	3a173f82 3d3d5390 3a01e66f 3d3f5b2a     .?.:.S==o..:*[?=
2402a820:	39d8cbc8 3d410cc3 39ad8ed2 3d4267df     ...9..A=...9.gB=
2402a830:	39822915 3d436c31 392d5b78 3d44198d     .).91lC=x[-9..D=
2402a840:	38acbf89 3d446fec b4f581df 3d446f73     ...8.oD=....soD=
2402a850:	b8ae1c2f 3d441863 b92d3477 3d436b2f     /...c.D=w4-./kC=
2402a860:	b981642c 3d426868 b9abd247 3d4110c4     ,d..hhB=G.....A=
2402a870:	b9d5d234 3d3f651d b9ff51c7 3d3d667b     4....e?=.Q..{f==
2402a880:	ba141f93 3d3b15fe ba28445e 3d3874ec     ......;=^D(..t8=
2402a890:	ba3c0ea3 3d3584b2 ba4f75f3 3d3246da     ..<...5=.uO..F2=
2402a8a0:	ba627208 3d2ebd12 ba74fad8 3d2ae925     .rb....=..t.%.*=
2402a8b0:	ba838448 3d26cd03 ba8c49c7 3d226ab6     H.....&=.I...j"=
2402a8c0:	ba94ca41 3d1dc464 ba9d021e 3d18dc52     A...d..=....R..=
2402a8d0:	baa4ee03 3d13b4e1 baac8a9e 3d0e508e     .......=.....P.=
2402a8e0:	bab3d4d9 3d08b1e5 babac9a6 3d02db9a     .......=.......=
2402a8f0:	bac16645 3cf9a0cb bac7a7fd 3ced264e     Ef.....<....N&.<
2402a900:	bacd8c54 3ce04d88 bad310f0 3cd31c78     T....M.<....x..<
2402a910:	bad833ab 3cc5993c badcf281 3cb7ca16     .3..<..<.......<
2402a920:	bae14ba4 3ca9b55b bae53d6d 3c9b6185     .K..[..<m=...a.<
2402a930:	bae8c675 3c8cd520 baebe574 3c7c2d8e     u... ..<t....-|<
2402a940:	baee9948 3c5e5a69 baf0e121 3c403e3e     H...iZ^<!...>>@<
2402a950:	baf2bc39 3c21e6ba baf42a11 3c036178     9.....!<.*..xa.<
2402a960:	baf52a64 3bc9785a baf5bcfd 3b8c091a     d*..Zx.;.......;
2402a970:	baf5e1ef 3b1d213d baf59986 3a0951e4     ....=!.;.....Q.:
2402a980:	baf4e421 bab03b2d baf3c26b bb51fed0     !...-;..k.....Q.
2402a990:	baf2352b bba58cb3 baf03d6a bbe19c0d     +5......j=......
2402a9a0:	baeddc4d bc0e8990 baeb132b bc2bebf7     M.......+.....+.
2402a9b0:	bae7e398 bc48e867 bae44f42 bc657255     ....g.H.BO..Ure.
2402a9c0:	bae05809 bc80bea7 badbfff1 bc8e7ea9     .X...........~..
2402a9d0:	bad74941 bc9bf33b bad2364c bca9169f     AI..;...L6......
2402a9e0:	baccc994 bcb5e33c bac705ca bcc25397     ....<........S..
2402a9f0:	bac0edbe bcce6274 baba8465 bcda0ab8     ....tb..e.......
2402aa00:	bab3cccc bce54788 baacca34 bcf0142a     .....G..4...*...
2402aa10:	baa57ff1 bcfa6c27 ba9df176 bd02259f     ....'l..v....%..
2402aa20:	ba96225b bd06d6b4 ba8e163f bd0b4764     ["......?...dG..
2402aa30:	ba85d0e5 bd0f75ec ba7aac6c bd13609d     .....u..l.z..`..
2402aa40:	ba69542d bd1705ee ba57a11c bd1a6472     -Ti.......W.rd..
2402aa50:	ba459b61 bd1d7ae0 ba334b48 bd20480c     a.E..z..HK3..H .
2402aa60:	ba20b936 bd22caf3 ba0deda9 bd2502a9     6. ...".......%.
2402aa70:	b9f5e265 bd26ee6f b9cf98eb bd288da0     e...o.&.......(.
2402aa80:	b9a91044 bd29dfc0 b98259db bd2ae475     D.....)..Y..u.*.
2402aa90:	b9370e4f bd2b9b82 b8d2a697 bd2c04d6     O.7...+.......,.
2402aaa0:	b7dd2c5c bd2c207a 384760a9 bd2beea3     \,..z ,..`G8..+.
2402aab0:	38fe066c bd2b6fa0 394bb940 bd2aa3e5     l..8.o+.@.K9..*.
2402aac0:	398bec11 bd298c0d 39b19f1a bd2828d1     ...9..)....9.((.
2402aad0:	39d6e50b bd267b07 39fbad7a bd2483ab     ...9.{&.z..9..$.
2402aae0:	3a0ff41d bd2243da 3a21c2b6 bd1fbccf     ...:.C"...!:....
2402aaf0:	3a333ac1 bd1cefe5 3a4454a0 bd19de93     .:3:.....TD:....
2402ab00:	3a5508e7 bd168a6e 3a65505f bd12f52d     ..U:n..._Pe:-...
2402ab10:	3a752400 bd0f209d 3a823e80 bd0b0eaa     .$u:. ...>.:....
2402ab20:	3a89aa63 bd06c155 3a90d287 bd023ac3     c..:U......:.:..
2402ab30:	3a97b3e6 bcfafa47 3a9e4b8e bcf1158c     ...:G....K.:....
2402ab40:	3aa496c5 bce6cc22 3aaa92e6 bcdc22f1     ...:"......:."..
2402ab50:	3ab03d75 bcd11f1c 3ab59421 bcc5c5d8     u=.:....!..:....
2402ab60:	3aba94c4 bcba1c8c 3abf3d53 bcae28b8     ...:....S=.:.(..
2402ab70:	3ac38bf5 bca1eff5 3ac77ef4 bc957807     ...:.....~.:.x..
2402ab80:	3acb14d6 bc88c6b9 3ace4c29 bc77c3f1     ...:....)L.:..w.
2402ab90:	3ad123d2 bc5d9f78 3ad39abf bc432c1a     .#.:x.]....:.,C.
2402aba0:	3ad5b018 bc287616 3ad7633a bc0d89b4     ...:.v(.:c.:....
2402abb0:	3ad8b39c bbe4e681 3ad9a0f1 bbae7e45     ...:.......:E~..
2402abc0:	3ada2b15 bb6fe6ff 3ada5213 bb02bdf5     .+.:..o..R.:....
2402abd0:	3ada1614 b9ad9762 3ad97780 3aae11a9     ...:b....w.:...:
2402abe0:	3ad876e9 3b434449 3ad714fa 3b976763     .v.:IDC;...:cg.;
2402abf0:	3ad552ad 3bccbc0e 3ad33104 3c00c428     .R.:...;.1.:(..<
2402ac00:	3ad0b133 3c1ada4e 3acdd4b5 3c3494e8     3..:N..<...:..4<
2402ac10:	3aca9d03 3c4de881 3ac70bd4 3c66ca04     ...:..M<...:..f<
2402ac20:	3ac32311 3c7f2e5e 3abee4b5 3c8b857a     .#.:^..<...:z..<
2402ac30:	3aba52e6 3c972aa9 3ab56ffe 3ca281aa     .R.:.*.<.o.:...<
2402ac40:	3ab03e5d 3cad858f 3aaac0a2 3cb8319a     ]>.:...<...:.1.<
2402ac50:	3aa4f985 3cc28134 3a9eebc7 3ccc6ff0     ...:4..<...:.o.<
2402ac60:	3a989a63 3cd5f997 3a920867 3cdf1a1c     c..:...<g..:...<
2402ac70:	3a8b3904 3ce7cdaa 3a842f71 3cf010a4     .9.:...<q/.:...<
2402ac80:	3a79de21 3cf7df95 3a6af6a2 3cff3748     !.y:...<..j:H7.<
2402ac90:	3a5baf7a 3d030a64 3a4c0fdb 3d063aa2     z.[:d..=..L:.:.=
2402aca0:	3a3c1f20 3d092b1f 3a2be4c0 3d0bdab2      .<:.+.=..+:...=
2402acb0:	3a1b6854 3d0e4852 3a0ab189 3d10731a     Th.:RH.=...:.s.=
2402acc0:	39f39048 3d125a3b 39d167f5 3d13fd0a     H..9;Z.=.g.9...=
2402acd0:	39aef9e8 3d155afe 398c55fb 3d1673aa     ...9.Z.=.U.9.s.=
2402ace0:	3953183f 3d1746c1 390d5890 3d17d41a     ?.S9.F.=.X.9...=
2402acf0:	388f199d 3d181ba8 35ea6c11 3d181d7b     ...8...=.l.5{..=
2402ad00:	b8875f32 3d17d9cc b908e0f2 3d1750ea     2_.....=.....P.=
2402ad10:	b94d9fe6 3d16834c b988e6b1 3d15717f     ..M.L..=.....q.=
2402ad20:	b9aaa55c 3d141c34 b9cbfcc3 3d128439     \...4..=....9..=
2402ad30:	b9ecde00 3d10aa7d ba069d2e 3d0e9009     ....}..=.......=
2402ad40:	ba1681b7 3d0c3601 ba26158d 3d099dab     .....6.=..&....=
2402ad50:	ba3551cb 3d06c864 ba442fb6 3d03b7a5     .Q5.d..=./D....=
2402ad60:	ba52a8c7 3d006d03 ba60b6a5 3cf9d452     ..R..m.=..`.R..<
2402ad70:	ba6e532f 3cf261b7 ba7b787b 3cea85f6     /Sn..a.<{x{....<
2402ad80:	ba841068 3ce244ef ba8a236b 3cd9a2b4     h....D.<k#.....<
2402ad90:	ba8ff29e 3cd0a38c ba957b8e 3cc74bd4     .......<.{...K.<
2402ada0:	ba9abbe1 3cbda014 ba9fb161 3cb3a4fe     .......<a......<
2402adb0:	baa45a09 3ca95f5f baa8b3d8 3c9ed421     .Z..__.<....!..<
2402adc0:	baacbd15 3c940850 bab0741e 3c89010b     ....P..<.t.....<
2402add0:	bab3d777 3c7b872a bab6e5ca 3c64aa6f     w...*.{<....o.d<
2402ade0:	bab99df1 3c4d76b6 babbfeda 3c35f6dd     .....vM<......5<
2402adf0:	babe07c1 3c1e35e1 babfb7e6 3c063ee5     .....5.<.....>.<
2402ae00:	bac10ec2 3bdc3a19 bac20bf6 3babb719     .....:.;.......;
2402ae10:	bac2af56 3b76168c bac2f8c1 3b149a2b     V.....v;....+..;
2402ae20:	bac2e86a 3a4c97d5 bac27e84 ba38653c     j.....L:.~..<e8.
2402ae30:	bac1bb90 bb0ef718 bac0a019 bb6f4724     ............$Go.
2402ae40:	babf2ce2 bba76ecb babd62d5 bbd6c77e     .,...n...b..~...
2402ae50:	babb42fb bc02cc1e bab8ce8b bc19e5f0     .B..............
2402ae60:	bab606eb bc30a6d1 bab2ed8f bc470481     ......0.......G.
2402ae70:	baaf8423 bc5cf503 baabcc6e bc726e92     #.....\.n....nr.
2402ae80:	baa7c85b bc83b3cf baa379fe bc8deb70     [........y..p...
2402ae90:	ba9ee385 bc97d9a6 ba9a0739 bca17a18     ........9....z..
2402aea0:	ba94e783 bcaac891 ba8f8702 bcb3c102     ................
2402aeb0:	ba89e84c bcbc5f87 ba840e20 bcc4a069     L...._.. ...i...
2402aec0:	ba7bf6d5 bccc8021 ba6f6623 bcd3fb4f     ..{.!...#fo.O...
2402aed0:	ba627046 bcdb0ed5 ba551b80 bce1b7b0     Fpb.......U.....
2402aee0:	ba476e36 bce7f31e ba396ef4 bcedbe9a     6nG......n9.....
2402aef0:	ba2b2468 bcf317ba ba1c955e bcf7fc66     h$+.....^...f...
2402af00:	ba0dc8bc bcfc6aaa b9fd8b06 bd00306c     .....j......l0..
2402af10:	b9df2589 bd01eeb8 b9c06f51 bd036f96     .%......Qo...o..
2402af20:	b9a176ba bd04b284 b9824a49 bd05b717     .v......IJ......
2402af30:	b945f104 bd067d0a b9071fef bd070429     ..E..}......)...
2402af40:	b8907ceb bd074c68 b7169b72 bd0755d0     .|..hL..r....U..
2402af50:	3855053b bd072090 38e74b7e bd06aceb     ;.U8. ..~K.8....
2402af60:	3931a6fb bd05fb42 396f2892 bd050c19     ..19B....(o9....
2402af70:	39960735 bd03e00c 39b41e65 bd0277cf     5..9....e..9.w..
2402af80:	39d1cc2d bd00d436 39ef0319 bcfdec5f     -..96......9_...
2402af90:	3a05dafb bcf9bd8c 3a13ebec bcf51e2a     ...:.......:*...
2402afa0:	3a21ae0e bcf010ba 3a2f1b3a bcea97df     ..!:....:./:....
2402afb0:	3a3c2d72 bce4b673 3a48dee8 bcde6f7c     r-<:s.....H:|o..
2402afc0:	3a5529fd bcd7c62a 3a610947 bcd0bde3     .)U:*...G.a:....
2402afd0:	3a6c778d bcc95a27 3a776fd4 bcc19ea6     .wl:'Z...ow:....
2402afe0:	3a80f6ac bcb98f3d 3a85f5c5 bcb12fde     ...:=......:./..
2402aff0:	3a8ab319 bca884ae 3a8f2c9d bc9f91e6     ...:.....,.:....
2402b000:	3a936067 bc965bdd 3a974cb8 bc8ce714     g`.:.[...L.:....
2402b010:	3a9aeff5 bc833813 3a9e489a bc72a711     ...:.8...H.:..r.
2402b020:	3aa15550 bc5e7c6d 3aa414e1 bc49f9d4     PU.:m|^....:..I.
2402b030:	3aa6863c bc35290c 3aa8a86f bc2013f9     <..:.)5.o..:.. .
2402b040:	3aaa7abd bc0ac4a3 3aabfc7b bbea8a26     .z.:....{..:&...
2402b050:	3aad2d30 bbbf3eda 3aae0c87 bb93bbb6     0-.:.>.....:....
2402b060:	3aae9a5d bb502a42 3aaed68f baf17df6     ]..:B*P....:.}..
2402b070:	3aaec149 ba05794f 3aae5acf 3a573c54     I..:Oy...Z.:T<W:
2402b080:	3aada389 3b0ca0da 3aac9bf7 3b62eed6     ...:...;...:..b;
2402b090:	3aab44d7 3b9c48a1 3aa99efe 3bc6b060     .D.:.H.;...:`..;
2402b0a0:	3aa7ab5e 3bf09b37 3aa56b23 3c0cfb00     ^..:7..;#k.:...<
2402b0b0:	3aa2df82 3c2156f1 3aa009e5 3c355831     ...:.V!<...:1X5<
2402b0c0:	3a9cebd6 3c48f5a8 3a9986e9 3c5c2687     ...:..H<...:.&\<
2402b0d0:	3a95dcee 3c6ee220 3a91efce 3c80900e     ...: .n<...:...<
2402b0e0:	3a8dc185 3c896c25 3a895438 3c92016a     ...:%l.<8T.:j..<
2402b0f0:	3a84aa16 3c9a4c0c 3a7f8b09 3ca24864     ...:.L.<...:dH.<
2402b100:	3a7551d6 3ca9f2f3 3a6aada9 3cb14862     .Qu:...<..j:bH.<
2402b110:	3a5fa3c1 3cb8457c 3a543988 3cbee74c     .._:|E.<.9T:L..<
2402b120:	3a487496 3cc52aed 3a3c5aa3 3ccb0dc5     .tH:.*.<.Z<:...<
2402b130:	3a2ff194 3cd08d51 3a233f63 3cd5a74c     ../:Q..<c?#:L..<
2402b140:	3a164a34 3cda599e 3a09183f 3cdea25d     4J.:.Y.<?..:]..<
2402b150:	39f75faf 3ce27fdd 39dc2ec6 3ce5f09a     ._.9...<...9...<
2402b160:	39c0aab8 3ce8f344 39a4e09a 3ceb86c7     ...9D..<...9...<
2402b170:	3988dd97 3cedaa3d 39595dd0 3cef5cfa     ...9=..<.]Y9.\.<
2402b180:	3920c3a3 3cf09e7e 38d00eaa 3cf16e8d     .. 9~..<...8.n.<
2402b190:	383d0dc6 3cf1cd17 b716d77e 3cf1ba3d     ..=8...<~...=..<
2402b1a0:	b883e1ec 3cf13659 b8f45976 3cf041fd     ....Y6.<vY...A.<
2402b1b0:	b93206b4 3ceeddf4 b9696509 3ced0b26     ..2....<.ei.&..<
2402b1c0:	b9901712 3ceacaca b9ab2466 3ce81e37     .......<f$..7..<
2402b1d0:	b9c5ce1b 3ce50700 b9e007f6 3ce186e3     .......<.......<
2402b1e0:	b9f9c606 3cdd9fc9 ba097e47 3cd953d9     .......<G~...S.<
2402b1f0:	ba15d011 3cd4a559 ba21d2d0 3ccf96c1     ....Y..<..!....<
2402b200:	ba2d811a 3cca2ab6 ba38d5b2 3cc46408     ..-..*.<..8..d.<
2402b210:	ba43cb88 3cbe45ab ba4e5dba 3cb7d2c0     ..C..E.<.]N....<
2402b220:	ba58879b 3cb10e80 ba6244b0 3ca9fc5e     ..X....<.Db.^..<
2402b230:	ba6b90b2 3ca29fd8 ba746795 3c9afc9b     ..k....<.gt....<
2402b240:	ba7cc585 3c93166d ba825376 3c8af135     ..|.m..<vS..5..<
2402b250:	ba860433 3c8290f4 ba897376 3c73f378     3......<vs..x.s<
2402b260:	ba8c9fbf 3c625f86 ba8f87c8 3c506e8d     ....._b<.....nP<
2402b270:	ba922a6d 3c3e293b ba94868a 3c2b986a     m*..;)><....j.+<
2402b280:	ba969b49 3c18c500 ba9867da 3c05b805     I......<.g.....<
2402b290:	ba99eb9b 3be4f522 ba9b25fa 3bbe2ba4     ...."..;.%...+.;
2402b2a0:	ba9c16aa 3b9725f9 ba9cbd5d 3b5fed44     .....%.;]...D._;
2402b2b0:	ba9d1a02 3b116043 ba9d2c99 3a8593ed     ....C`.;.,.....:
2402b2c0:	ba9cf54c b93b0b0f ba9c7473 bab3d5d2     L.....;.st......
2402b2d0:	ba9baa74 bb27c023 ba9a97e0 bb750c13     t...#.'.......u.
2402b2e0:	ba993d6d bba0d565 ba979be8 bbc6bc5f     m=..e......._...
2402b2f0:	ba95b454 bbec2976 ba9387c3 bc0885b2     T...v)..........
2402b300:	ba911761 bc1aa89f ba8e6487 bc2c7534     a........d..4u,.
2402b310:	ba8b70ae bc3de345 ba883d59 bc4eeaf5     .p..E.=.Y=....N.
2402b320:	ba84cc3e bc5f8475 ba811f29 bc6fa859     >...u._.)...Y.o.
2402b330:	ba7a6ff0 bc7f4f61 ba723154 bc87393a     .oz.aO..T1r.:9..
2402b340:	ba6986b1 bc8e856f ba607463 bc958914     ..i.o...ct`.....
2402b350:	ba56fef6 bc9c4109 ba4d2b23 bca2aa64     ..V..A..#+M.d...
2402b360:	ba42fdca bca8c251 ba387bf5 bcae8630     ..B.Q....{8.0...
2402b370:	ba2daacf bcb3f388 ba228faa bcb90804     ..-.......".....
2402b380:	ba172ff0 bcbdc182 ba0b912f bcc21e0d     ./....../.......
2402b390:	b9ff7216 bcc61bd3 b9e75a7c bcc9b942     .r......|Z..B...
2402b3a0:	b9cee737 bcccf4db b9b6240b bccfcd6d     7........$..m...
2402b3b0:	b99d1cd7 bcd241e1 b983dd99 bcd45156     .....A......VQ..
2402b3c0:	b954e4bf bcd5fb1f b921ce84 bcd73ebb     ..T.......!..>..
2402b3d0:	b8dd217f bcd81be0 b86d0f0a bcd89263     .!........m.c...
2402b3e0:	b6fff827 bcd8a263 382c8c6b bcd84c1c     '...c...k.,8.L..
2402b3f0:	38bc1991 bcd79004 3910a569 bcd66ebc     ...8....i..9.n..
2402b400:	3942d560 bcd4e910 39748537 bcd30008     `.B9....7.t9....
2402b410:	3992ceec bcd0b4c9 39ab0444 bcce08b7     ...9....D..9....
2402b420:	39c2d76e bccafd5a 39da3d72 bcc79464     n..9Z...r=.9d...
2402b430:	39f12b8a bcc3cfb9 3a03cb9e bcbfb15b     .+.9.......:[...
2402b440:	3a0ebb24 bcbb3b80 3a195f5b bcb67085     $..:.;..[_.:.p..
2402b450:	3a23b375 bcb152e9 3a2db2c5 bcabe556     u.#:.R....-:V...
2402b460:	3a3758ce bca62a8c 3a40a13f bca02585     .X7:.*..?.@:.%..
2402b470:	3a4987f4 bc99d945 3a5208fc bc9348fd     ..I:E.....R:.H..
2402b480:	3a5a209c bc8c77f8 3a61cb44 bc85699c     . Z:.w..D.a:.i..
2402b490:	3a6905a4 bc7c42dc 3a6fcc9d bc6d4614     ..i:.B|...o:.Fm.
2402b4a0:	3a761d4b bc5de442 3a7bf502 bc4e24f1     K.v:B.]...{:.$N.
2402b4b0:	3a80a8aa bc3e0fdb 3a831809 bc2dacd7     ...:..>....:..-.
2402b4c0:	3a85479f bc1d03e8 3a87368d bc0c1d17     .G.:.....6.:....
2402b4d0:	3a88e41d bbf60128 3a8a4fa5 bbd36d3d     ...:(....O.:=m..
2402b4e0:	3a8b78bc bbb08f0e 3a8c5eeb bb8d7753     .x.:.....^.:Sw..
2402b4f0:	3a8d0207 bb546da2 3a8d61e4 bb0dbcb0     ...:.mT..a.:....
2402b500:	3a8d7e8c ba8dfad5 3a8d5818 b6a2baaf     .~.:.....X.:....
2402b510:	3a8ceed5 3a8c4c18 3a8c4311 3b0c4799     ...:.L.:.C.:.G.;
2402b520:	3a8b555e 3b51f248 3a8a2656 3b8b82b7     ^U.:H.Q;V&.:...;
2402b530:	3a88b6a6 3badb063 3a87073d 3bcf7232     ...:c..;=..:2r.;
2402b540:	3a85190d 3bf0b876 3a82ed2b 3c08b9e1     ...:v..;+..:...<
2402b550:	3a8084c9 3c18ca7a 3a7bc26a 3c28869c     ...:z..<j.{:..(<
2402b560:	3a7607b2 3c37e717 3a6fdc73 3c46e4e1     ..v:..7<s.o:..F<
2402b570:	3a6943e7 3c557924 3a62417b 3c639d3e     .Ci:$yU<{Ab:>.c<
2402b580:	3a5ad8cc 3c714ac6 3a530da3 3c7e7b9c     ..Z:.Jq<..S:.{~<
2402b590:	3a4ae3f9 3c8594f0 3a425fef 3c8ba7ef     ..J:...<._B:...<
2402b5a0:	3a3985cf 3c91741c 3a305a06 3c96f6ed     ..9:.t.<.Z0:...<
2402b5b0:	3a26e129 3c9c2df9 3a1d1feb 3ca116f7     ).&:.-.<...:...<
2402b5c0:	3a131b22 3ca5afcd 3a08d7bc 3ca9f68e     "..:...<...:...<
2402b5d0:	39fcb58d 3cade962 39e752c4 3cb186b0     ...9b..<.R.9...<
2402b5e0:	39d19194 3cb4ccf6 39bb7c8e 3cb7bae7     ...9...<.|.9...<
2402b5f0:	39a51e6d 3cba4f62 398e8204 3cbc8968     m..9bO.<...9h..<
2402b600:	396f6475 3cbe6830 3941740f 3cbfeb17     udo90h.<.tA9...<
2402b610:	391348f4 3cc111ae 38c9f262 3cc1db9d     .H.9...<b..8...<
2402b620:	385a6b94 3cc248d5 37044237 3cc2595c     .kZ8.H.<7B.7\Y.<
2402b630:	b817d443 3cc20d71 b8a7f5a7 3cc1657b     C...q..<....{e.<
2402b640:	b901b766 3cc06210 b92f1542 3cbf03e1     f....b.<B./....<
2402b650:	b95bff0c 3cbd4be6 b9842fdf 3cbb3b25     ..[..K.<./..%;.<
2402b660:	b99a1151 3cb8d2e0 b9af99a7 3cb6147a     Q......<....z..<
2402b670:	b9c4bee5 3cb3017f b9d9773b 3caf9b9f     .......<;w.....<
2402b680:	b9edb91c 3cabe4bb ba00bd9d 3ca7ded1     .......<.......<
2402b690:	ba0a5a41 3ca38bfc ba13ae1a 3c9eee8d     AZ.....<.......<
2402b6a0:	ba1cb4e7 3c9a08e5 ba256a93 3c94dd92     .......<.j%....<
2402b6b0:	ba2dcb31 3c8f6f39 ba35d301 3c89c09e     1.-.9o.<..5....<
2402b6c0:	ba3d7e6d 3c83d4ac ba44ca0f 3c7b5cb8     m~=....<..D..\{<
2402b6d0:	ba4bb2b0 3c6ea189 ba52354c 3c617e35     ..K...n<L5R.5~a<
2402b6e0:	ba584f0f 3c53f947 ba5dfd5d 3c461975     .OX.G.S<].].u.F<
2402b6f0:	ba633dca 3c37e595 ba680e23 3c2964b3     .=c...7<#.h..d)<
2402b700:	ba6c6c6d 3c1a9deb ba7056e0 3c0b987d     mll....<.Vp.}..<
2402b710:	ba73cbf1 3bf8b77d ba76ca4e 3bd9de34     ..s.}..;N.v.4..;
2402b720:	ba7950da 3bbab417 ba7b5eb9 3b9b4841     .Py....;.^{.AH.;
2402b730:	ba7cf340 3b7753b4 ba7e0e06 3b37d02f     @.|..Sw;..~./.7;
2402b740:	ba7eaedc 3af048f5 ba7ed5c6 3a61bc21     ..~..H.:..~.!.a:
2402b750:	ba7e8309 b8e63746 ba7db724 ba8d3f07     ..~.F7..$.}..?..
2402b760:	ba7c72cc bb05bc35 ba7ab6f0 bb4469f4     .r|.5.....z..iD.
2402b770:	ba7884b7 bb814590 ba75dd83 bba00141     ..x..E....u.A...
2402b780:	ba72c2e9 bbbe599e ba6f36b4 bbdc4073     ..r..Y...6o.s@..
2402b790:	ba6b3ae8 bbf9a7d1 ba66d1b9 bc0b4104     .:k.......f..A..
2402b7a0:	ba61fd91 bc1960dd ba5cc106 bc272ceb     ..a..`....\..,'.
2402b7b0:	ba571ee4 bc349ed9 ba511a23 bc41b07a     ..W...4.#.Q.z.A.
2402b7c0:	ba4ab5e9 bc4e5bd9 ba43f585 bc5a9b37     ..J..[N...C.7.Z.
2402b7d0:	ba3cdc72 bc666900 ba356e55 bc71bfe1     r.<..if.Un5...q.
2402b7e0:	ba2daef3 bc7c9ad0 ba25a23b bc837a79     ..-...|.;.%.yz..
2402b7f0:	ba1d4c3d bc8864de ba14b127 bc8d0a65     =L...d..'...e...
2402b800:	ba0bd547 bc91690e ba02bd06 bc957ef8     G....i.......~..
2402b810:	b9f2d9d0 bc994a5f b9dfd314 bc9cc9aa     ...._J..........
2402b820:	b9cc6f32 bc9ffb68 b9b8b7b9 bca2de47     2o..h.......G...
2402b830:	b9a4b649 bca5711e b99074b0 bca7b2f2     I....q...t......
2402b840:	b977f98d bca9a2e7 b94eb0fa bcab4045     ..w.......N.E@..
2402b850:	b92523a2 bcac8a8d b8f6cb3d bcad8158     .#%.....=...X...
2402b860:	b8a31610 bcae2470 b81e9fd5 bcae73c1     ....p$.......s..
2402b870:	360be183 bcae6f5f 382f9db6 bcae1790     ...6_o..../8....
2402b880:	38aad7c0 bcad6cbb 38fd524d bcac6f6a     ...8.l..MR.8jo..
2402b890:	39278baa bcab204f 3950002c bca98052     ..'9O ..,.P9R...
2402b8a0:	3977f390 bca79068 398fa989 bca551c4     ..w9h......9.Q..
2402b8b0:	39a30621 bca2c5ad 39b60688 bc9fed91     !..9.......9....
2402b8c0:	39c8a1e0 bc9ccb07 39dacf8e bc995fcd     ...9.......9._..
2402b8d0:	39ec8726 bc95adac 39fdc085 bc91b6ac     &..9.......9....
2402b8e0:	3a0739df bc8d7cdb 3a0f4c9b bc890278     .9.:.|...L.:x...
2402b8f0:	3a1714c9 bc8449d1 3a1e8ee2 bc7eaab6     ...:.I.....:..~.
2402b900:	3a25b78c bc744f3d 3a2c8b90 bc698681     ..%:=Ot...,:..i.
2402b910:	3a3307e6 bc5e5601 3a3929af bc52c367     ..3:.V^..)9:g.R.
2402b920:	3a3eee3d bc46d485 3a44530d bc3a8f53     =.>:..F..SD:S.:.
2402b930:	3a4955cc bc2df9f9 3a4df45c bc211ab4     .UI:..-.\.M:..!.
2402b940:	3a522ccb bc13f7e8 3a55fd5e bc069812     .,R:....^.U:....
2402b950:	3a596487 bbf20393 3a5c60f4 bbd67775     .dY:.....`\:uw..
2402b960:	3a5ef180 bbba9944 3a61153c bb9e769d     ..^:D...<.a:.v..
2402b970:	3a62cb71 bb821d2f 3a64139b bb4b3577     q.b:/.....d:w5K.
2402b980:	3a64ed68 bb11fa1c 3a6558c3 bab147d8     h.d:.....Xe:.G..
2402b990:	3a6555c4 b9fa73d6 3a64e4be 39cf55a6     .Ue:.s....d:.U.9
2402b9a0:	3a640632 3aa5d886 3a62bade 3b0b9afa     2.d:...:..b:...;
2402b9b0:	3a6103ac 3b43dbe2 3a5ee1bc 3b7b9454     ..a:..C;..^:T.{;
2402b9c0:	3a5c5660 3b9954f5 3a596320 3bb4815a     `V\:.T.; cY:Z..;
2402b9d0:	3a5609ad 3bcf428f 3a524bef 3be98c0d     ..V:.B.;.KR:...;
2402b9e0:	3a4e2bf8 3c01a8c6 3a49ac09 3c0e4386     .+N:...<..I:.C.<
2402b9f0:	3a44ce92 3c1a906f 3a3f962c 3c2689d8     ..D:o..<,.?:..&<
2402ba00:	3a3a0599 3c322a29 3a341fc5 3c3d6c27     ..::)*2<..4:'l=<
2402ba10:	3a2de7c6 3c484aa7 3a2760cf 3c52c0ad     ..-:.JH<.`':..R<
2402ba20:	3a208e3f 3c5cc99a 3a197392 3c6660d2     ?. :..\<.s.:.`f<
2402ba30:	3a121468 3c6f8219 3a0a747c 3c78295c     h..:..o<|t.:\)x<
2402ba40:	3a0297a6 3c80296b 39f503b7 3c83fd7b     ...:k).<...9{..<
2402ba50:	39e46e51 3c878f36 39d3775a 3c8add13     Qn.96..<Zw.9...<
2402ba60:	39c22748 3c8de5ac 39b086ab 3c90a7c8     H'.9...<...9...<
2402ba70:	399e9e34 3c932241 398c76b7 3c95541a     4..9A".<.v.9.T.<
2402ba80:	3974323e 3c973c82 394f1ccf 3c98dabd     >2t9.<.<..O9...<
2402ba90:	3929bf38 3c9a2e3a 39042b9e 3c9b3692     8.)9:..<.+.9.6.<
2402baa0:	38bce897 3c9bf37c 3862addf 3c9c64d0     ...8|..<..b8.d.<
2402bab0:	37971b02 3c9c8a95 b7968e6f 3c9c64f6     ...7...<o....d.<
2402bac0:	b86187e4 3c9bf42d b8bb7651 3c9b38bb     ..a.-..<Qv...8.<
2402bad0:	b902cb8a 3c9a3322 b9278177 3c98e41d     ...."3.<w.'....<
2402bae0:	b94bcb88 3c974c88 b96f9897 3c956d55     ..K..L.<..o.Um.<
2402baf0:	b9896bdd 3c9347a6 b99abc30 3c90dcb7     .k...G.<0......<
2402bb00:	b9abb527 3c8e2de0 b9bc4ed9 3c8b3ca4     '....-.<.N...<.<
2402bb10:	b9cc8184 3c880aa1 b9dc45b0 3c849988     .......<.E.....<
2402bb20:	b9eb940d 3c80eb37 b9fa6595 3c7a0347     ....7..<.e..G.z<
2402bb30:	ba0459be 3c71bda8 ba0b3b9e 3c6909ef     .Y....q<.;....i<
2402bb40:	ba11d54e 3c5fec9a ba1823d5 3c566a5a     N....._<.#..ZjV<
2402bb50:	ba1e245b 3c4c8819 ba23d439 3c424ad3     [$....L<9.#..JB<
2402bb60:	ba2930e8 3c37b7c8 ba2e3811 3c2cd449     .0)...7<.8..I.,<
2402bb70:	ba32e788 3c21a5cd ba373d47 3c1631f8     ..2...!<G=7..1.<
2402bb80:	ba3b3779 3c0a7e81 ba3ed476 3bfd2273     y7;..~.<v.>.s".;
2402bb90:	ba4212c4 3be4e01a ba44f119 3bcc41f8     ..B....;..D..A.;
2402bba0:	ba476e56 3bb3542d ba498992 3b9a22fb     VnG.-T.;..I..".;
2402bbb0:	ba4b420d 3b80bab9 ba4c973e 3b4e4fa2     .BK....;>.L..ON;
2402bbc0:	ba4d88c6 3b1aed70 ba4e167b 3acecfa0     ..M.p..;{.N....:
2402bbd0:	ba4e4060 3a4f5ee5 ba4e06ab 36ac1d59     `@N..^O:..N.Y..6
2402bbe0:	ba4d69bf ba4c1185 ba4c6a34 bacc3ddc     .iM...L.4jL..=..
2402bbf0:	ba4b08ca bb18e122 ba494674 bb4b32c0     ..K."...tFI..2K.
2402bc00:	ba472453 bb7cfbd4 ba44a3b3 bb971260     S$G...|...D.`...
2402bc10:	ba41c611 bbaf4b23 ba3e8d12 bbc71cc4     ..A.#K....>.....
2402bc20:	ba3afa88 bbde7c15 ba37106e bbf55e24     ..:..|..n.7.$^..
2402bc30:	ba32d0e7 bc05dc20 ba2e3e40 bc10c003     ..2. ...@>......
2402bc40:	ba295ae9 bc1b55b2 ba24297d bc25984b     .Z)..U..})$.K.%.
2402bc50:	ba1eacb7 bc2f831b ba18e772 bc39118f     ....../.r.....9.
2402bc60:	ba12dcae bc423f55 ba0c8f8b bc4b0852     ....U?B.....R.K.
2402bc70:	ba060346 bc536888 b9fe7666 bc5b5c3c     F....hS.fv..<\[.
2402bc80:	b9f07591 bc62dfe9 b9e20b21 bc69f03e     .u....b.!...>.i.
2402bc90:	b9d33e5d bc708a2c b9c416b1 bc76aae2     ]>..,.p.......v.
2402bca0:	b9b49bb6 bc7c4fc7 b9a4d528 bc80bb36     .....O|.(...6...
2402bcb0:	b994cad8 bc830e62 b98484bd bc852076     ....b.......v ..
2402bcc0:	b96815c2 bc86f0a0 b946cabf bc887e34     ..h.......F.4~..
2402bcd0:	b92538c9 bc89c8a6 b903705c bc8acf87     .8%.....\p......
2402bce0:	b8c303d0 bc8b928b b87df7e8 bc8c1186     ..........}.....
2402bcf0:	b7eba892 bc8c4c74 36910a8d bc8c4360     ....tL.....6`C..
2402bd00:	3819a74c bc8bf68e 38903e32 bc8b6650     L..8....2>.8Pf..
2402bd10:	38d32ff9 bc8a9321 390ac474 bc897d98     ./.8!...t..9.}..
2402bd20:	392b94af bc882670 394bf90f bc868e7a     ..+9p&....K9z...
2402bd30:	396be238 bc84b6b9 3985a08b bc82a033     8.k9.......93...
2402bd40:	3995036e bc804c26 39a41291 bc7b77bb     n..9&L.....9.w{.
2402bd50:	39b2c6e4 bc75e184 39c1198f bc6fd8b6     ...9..u....9..o.
2402bd60:	39cf03e9 bc696097 39dc7f82 bc627c97     ...9.`i....9.|b.
2402bd70:	39e9862c bc5b3068 39f611e9 bc537fda     ,..9h0[....9..S.
2402bd80:	3a010e83 bc4b6ef4 3a06d104 bc4301dd     ...:.nK....:..C.
2402bd90:	3a0c4de3 bc3a3d08 3a1182a9 bc3124db     .M.:.=:....:.$1.
2402bda0:	3a166d08 bc27be0a 3a1b0ad5 bc1e0d5a     .m.:..'....:Z...
2402bdb0:	3a1f5a0d bc1417b9 3a2358d4 bc09e22c     .Z.:.....X#:,...
2402bdc0:	3a270577 bbfee3a9 3a2a5e6b bbe997dd     w.':....k^*:....
2402bdd0:	3a2d6250 bbd3eb92 3a300ff0 bbbde994     Pb-:......0:....
2402bde0:	3a32663f bba79ccc 3a34645c bb911040     ?f2:....\d4:@...
2402bdf0:	3a360992 bb749e1e 3a375558 bb46c8c5     ..6:..t.XU7:..F.
2402be00:	3a38474e bb18b6f5 3a38df44 bad4fe41     NG8:....D.8:A...
2402be10:	3a391d35 ba70df54 3a390143 b95f784b     5.9:T.p.C.9:Kx_.
2402be20:	3a388bc1 3a00adae 3a37bd2c 3a9c356f     ..8:...:,.7:o5.:
2402be30:	3a36962a 3af78080 3a35178b 3b290622     *.6:...:..5:".);
2402be40:	3a33424e 3b55d6b7 3a311793 3b810e4e     NB3:..U;..1:N..;
2402be50:	3a2e98ac 3b96e163 3a2bc70b 3bac5a44     ...:c..;..+:DZ.;
2402be60:	3a28a44d 3bc16ecf 3a253235 3bd61515     M.(:.n.;52%:...;
2402be70:	3a2172aa 3bea436b 3a1d67ba 3bfdf062     .r!:kC.;.g.:b..;
2402be80:	3a19138f 3c08896a 3a14787f 3c11d0f2     ...:j..<.x.:...<
2402be90:	3a0f98f8 3c1aca81 3a0a778c 3c2371fa     ...:...<.w.:.q#<
2402bea0:	3a0516ea 3c2bc368 39fef3bf 3c33bb03     ...:h.+<...9..3<
2402beb0:	39f346a3 3c3b5541 39e72c84 3c428e9b     .F.9AU;<.,.9..B<
2402bec0:	39daab92 3c4963f7 39cdca2d 3c4fd250     ...9.cI<-..9P.O<
2402bed0:	39c08ee2 3c55d6c1 39b3005d 3c5b6ec6     ...9..U<]..9.n[<
2402bee0:	39a52572 3c6097f0 39970515 3c65501c     r%.9..`<...9.Pe<
2402bef0:	3988a659 3c699550 397420d2 3c6d65d4     Y..9P.i<. t9.em<
2402bf00:	395694fb 3c70c027 3938b7dc 3c73a305     ..V9'.p<..89..s<
2402bf10:	391a982a 3c760d63 38f8897c 3c77fe74     *..9c.v<|..8t.w<
2402bf20:	38bb98f5 3c7975ad 387cf913 3c7a72a2     ...8.uy<..|8.rz<
2402bf30:	3802a420 3c7af549 3606e8d8 3c7afdb8      ..8I.z<...6..z<
2402bf40:	b7e2d8b4 3c7a8c4e b86ab1a7 3c79a197     ....N.z<..j...y<
2402bf50:	b8b19371 3c783e75 b8ed4911 3c7663df     q...u>x<.I...cv<
2402bf60:	b9142e8c 3c741322 b931599e 3c714dc0     ....".t<.Y1..Mq<
2402bf70:	b94e17e3 3c6e155c b96a5bba 3c6a6bef     ..N.\.n<.[j..kj<
2402bf80:	b9830bdb 3c665391 b9909f66 3c61ce92     .....Sf<f.....a<
2402bf90:	b99de219 3c5cdf8a b9aacdc6 3c578913     ......\<......W<
2402bfa0:	b9b75c65 3c51ce34 b9c38820 3c4bb1f0     e\..4.Q< .....K<
2402bfb0:	b9cf4b5b 3c453798 b9daa0ac 3c3e6291     [K...7E<.....b><
2402bfc0:	b9e582e6 3c373678 b9efed14 3c2fb712     ....x67<....../<
2402bfd0:	b9f9da81 3c27e83c ba01a35e 3c1fce0a     ....<.'<^......<
2402bfe0:	ba0616c8 3c176c9d ba0a4588 3c0ec845     .....l.<.E..E..<
2402bff0:	ba0e2dca 3c05e569 ba11cddd 3bf99115     .-..i..<.......;
2402c000:	ba152435 3be6ec8f ba182f6c 3bd3e6a1     5$.....;l/.....;
2402c010:	ba1aee3f 3bc088d8 ba1d5f94 3bacdce7     ?......;._.....;
2402c020:	ba1f8276 3b98ec98 ba215619 3b84c1d5     v......;.V!....;
2402c030:	ba22d9d3 3b60cd35 ba240d28 3b37c9e8     ..".5.`;(.$...7;
2402c040:	ba24efbe 3b0e8dfc ba258167 3aca5b3f     ..$....;g.%.?[.:
2402c050:	ba25c218 3a6ef46c ba25b1f3 399284f1     ..%.l.n:..%....9
2402c060:	ba25513d b9b81d85 ba24a063 ba805793     =Q%.....c.$..W..
2402c070:	ba239ff8 bad22791 ba2250b9 bb11a7f7     ..#..'...P".....
2402c080:	ba20b383 bb39d4d6 ba1ec95e bb61872f     .. ...9.^.../.a.
2402c090:	ba1c9374 bb845606 ba1a1313 bb979869     t....V......i...
2402c0a0:	ba1749ac bbaa819e ba1438d2 bbbd08b9     .I.......8......
2402c0b0:	ba10e23e bbcf24ff ba0d47c2 bbe0cdf8     >....$...G......
2402c0c0:	ba096b58 bbf1fb63 ba054f14 bc0152a3     Xk..c....O...R..
2402c0d0:	ba00f525 bc0961f5 b9f8bfb9 bc1127f3     %....a.......'..
2402c0e0:	b9ef2348 bc18a10d b9e519fe bc1fc9dd     H#..............
2402c0f0:	b9daa913 bc269f26 b9cfd5ef bc2d1dd0     ....&.&.......-.
2402c100:	b9c4a621 bc334303 b9b91f6c bc390c05     !....C3.l.....9.
2402c110:	b9ad47af bc3e763d b9a124eb bc437f66     .G..=v>..$..f.C.
2402c120:	b994bd46 bc482553 b9881708 bc4c660a     F...S%H......fL.
2402c130:	b976710b bc503fc9 b95c5062 bc53b10d     .qv..?P.bP\...S.
2402c140:	b941d92e bc56b873 b9271888 bc5954d0     ..A.s.V...'..TY.
2402c150:	b90c1bba bc5b8542 b8e1e046 bc5d4906     ....B.[.F....I].
2402c160:	b8ab4641 bc5e9f93 b8690879 bc5f889c     AF....^.y.i..._.
2402c170:	b7f6d43f bc600401 b65e6f89 bc6011ee     ?.....`..o^...`.
2402c180:	37be9748 bc5fb2a3 384bf8b3 bc5ee6ab     H..7.._...K8..^.
2402c190:	389bf5cd bc5daebd 38d17822 bc5c0bcf     ...8..]."x.8..\.
2402c1a0:	390334cb bc59fefa 391d5868 bc578994     .4.9..Y.hX.9..W.
2402c1b0:	39371a6a bc54ad2b 39506e87 bc516b6d     j.79+.T..nP9mkQ.
2402c1c0:	396948be bc4dc652 3980ceaa bc49bfdd     .Hi9R.M....9..I.
2402c1d0:	398cb063 bc455a52 399843f8 bc409836     c..9RZE..C.96.@.
2402c1e0:	39a38407 bc3b7c17 39ae6b4c bc3608bb     ...9.|;.Lk.9..6.
2402c1f0:	39b8f4c1 bc30411b 39c31b84 bc2a283d     ...9.A0....9=(*.
2402c200:	39ccdaf6 bc23c163 39d62ea4 bc1d0fee     ...9c.#....9....
2402c210:	39df1251 bc16175b 39e78207 bc0edb4a     Q..9[......9J...
2402c220:	39ef79fd bc075f7b 39f6f6ac bbff4f8c     .y.9{_.....9.O..
2402c230:	39fdf4d3 bbef703d 3a0238b6 bbdf2928     ...9=p...8.:()..
2402c240:	3a0534d9 bbce828b 3a07ed90 bbbd84d9     .4.:.......:....
2402c250:	3a0a61be bbac38a3 3a0c9066 bb9aa695     .a.:.8..f..:....
2402c260:	3a0e78ad bb88d780 3a1019df bb6da887     .x.:.......:..m.
2402c270:	3a117366 bb494bb0 3a1284d6 bb24aa77     fs.:.KI....:w.$.
2402c280:	3a134dde baffae07 3a13ce59 bab5c6d4     .M.:....Y..:....
2402c290:	3a140640 ba57876e 3a13f5b3 b9872377     @..:n.W....:w#..
2402c2a0:	3a139cf3 39a0166b 3a12fc64 3a630799     ...:k..9d..:..c:
2402c2b0:	3a12148e 3aba8e17 3a10e61c 3b018091     ...:...:...:...;
2402c2c0:	3a0f71db 3b255d07 3a0db8b7 3b48cb35     .q.:.]%;...:5.H;
2402c2d0:	3a0bbbc0 3b6bba27 3a097c23 3b870c97     ...:'.k;#|.:...;
2402c2e0:	3a06fb31 3b97ebff 3a043a56 3ba87349     1..:...;V:.:Is.;
2402c2f0:	3a013b1f 3bb89aad 39fbfe65 3bc85a93     .;.:...;e..9.Z.;
2402c300:	39f510b2 3bd7ab9d 39edb0e2 3be686ac     ...9...;...9...;
2402c310:	39e5e2f2 3bf4e4dc 39ddab00 3c015fc6     ...9...;...9._.<
2402c320:	39d50d71 3c080831 39cc0eca 3c0e68a8     q..91..<...9.h.<
2402c330:	39c2b3ba 3c147e45 39b90124 3c1a464e     ...9E~.<$..9NF.<
2402c340:	39aefc0d 3c1fbe2f 39a4a99d 3c24e37a     ...9/..<...9z.$<
2402c350:	399a0f1a 3c29b3f9 398f31f6 3c2e2d85     ...9..)<.1.9.-.<
2402c360:	398417b0 3c324e46 39718bda 3c36146f     ...9FN2<..q9o.6<
2402c370:	395a84c5 3c397e87 394325b1 3c3c8b16     ..Z9.~9<.%C9..<<
2402c380:	392b7a53 3c3f3906 39138e81 3c41873f     Sz+9.9?<...9?.A<
2402c390:	38f6dc4f 3c4374f5 38c64a7e 3c450187     O..8.tC<~J.8..E<
2402c3a0:	38957f89 3c462c8a 3849270c 3c46f5b3     ...8.,F<.'I8..F<
2402c3b0:	37ce7a03 3c475cec 35ae1e2b 3c47625f     .z.7.\G<+..5_bG<
2402c3c0:	b7b81ac2 3c47064f b83d0e7c 3c464945     ....O.G<|.=.EIF<
2402c3d0:	b88eb1a3 3c452be4 b8be6e93 3c43af01     .....+E<.n....C<
2402c3e0:	b8eda704 3c41d3b5 b90e2221 3c3f9b2b     ......A<!"..+.?<
2402c3f0:	b9251802 3c3d06d1 b93baa29 3c3a181f     ..%...=<).;...:<
2402c400:	b951cde2 3c36d0ed b96778a5 3c333308     ..Q...6<.xg..33<
2402c410:	b97ca039 3c2f408a b9889d57 3c2afba1     9.|..@/<W.....*<
2402c420:	b9929f36 3c2666a7 b99c5107 3c21841d     6....f&<.Q....!<
2402c430:	b9a5ae52 3c1c56aa b9aeb2c2 3c16e114     R....V.<.......<
2402c440:	b9b75a35 3c112643 b9bfa0be 3c0b293c     5Z..C&.<....<).<
2402c450:	b9c78299 3c04ed28 b9cefc3c 3bfcea8c     ....(..<<......;
2402c460:	b9d60a55 3bef89e6 b9dca9c9 3be1bf4b     U......;....K..;
2402c470:	b9e2d7b0 3bd391d0 b9e89163 3bc508ba     .......;c......;
2402c480:	b9edd46c 3bb62b71 b9f29ea3 3ba70188     l...q+.;.......;
2402c490:	b9f6ee0a 3b9792a8 b9fac0eb 3b87e698     .......;.......;
2402c4a0:	b9fe15ce 3b700a76 ba0075ba 3b4fed0a     ....v.p;.u....O;
2402c4b0:	ba01a074 3b2f84ed ba028ab4 3b0ee242     t...../;....B..;
2402c4c0:	ba033440 3adc2a63 ba039cf7 3a9a5be1     @4..c*.:.....[.:
2402c4d0:	ba03c4dc 3a30f2ea ba03ac12 39351b5e     ......0:....^.59
2402c4e0:	ba0352da b9ac1801 ba02b991 ba58c591     .R............X.
2402c4f0:	ba01e0bd baad5324 ba00c8f9 baedb7a0     ....$S..........
2402c500:	b9fee607 bb16b894 b9fbbf6c bb36307e     ........l...~06.
2402c510:	b9f82015 bb553483 b9f40a2e bb73b5c9     . ...4U.......s.
2402c520:	b9ef8018 bb88d2e7 b9ea846c bb977b2d     ........l...-{..
2402c530:	b9e519fb bba5cccc b9df43c6 bbb3c109     .........C......
2402c540:	b9d9050a bbc15159 b9d26129 bbce776b     ....YQ..)a..kw..
2402c550:	b9cb5bba bbdb2d27 b9c3f87e bbe76cb0     .[..'-..~....l..
2402c560:	b9bc3b66 bbf33066 b9b4288a bbfe72ef     f;..f0...(...r..
2402c570:	b9abc421 bc049799 b9a31292 bc09b02d     !...........-...
2402c580:	b99a1860 bc0e80f0 b990da2f bc1307c1     `......./.......
2402c590:	b9875cc3 bc1742a7 b97b49f1 bc1b2fcf     .\...B...I{../..
2402c5a0:	b9676f84 bc1ecd8d b953345a bc221a5e     .og.....Z4S.^.".
2402c5b0:	b93ea2b1 bc2514ed b929c4f6 bc27bbfc     ..>...%...)...'.
2402c5c0:	b914a592 bc2a0e92 b8fe9e5b bc2c0bcd     ......*.[.....,.
2402c5d0:	b8d398d3 bc2db301 b8a84fe9 bc2f03a4     ......-..O..../.
2402c5e0:	b879b24d bc2ffd53 b8229404 bc309fe6     M.y.S./..."...0.
2402c5f0:	b796dfd3 bc30eb5a 3638f2e5 bc30dfc7     ....Z.0...86..0.
2402c600:	37c47d5e bc307d8c 38387444 bc2fc515     ^}.7.}0.Dt88../.
2402c610:	38870301 bc2eb70d 38b16534 bc2d5441     ...8....4e.8AT-.
2402c620:	38db4c45 bc2b9da8 390251fe bc299463     EL.8..+..Q.9c.).
2402c630:	3916ac45 bc2739b6 392aab3a bc248f0b     E..9.9'.:.*9..$.
2402c640:	393e455c bc2195f1 3951715a bc1e502c     \E>9..!.ZqQ9,P..
2402c650:	39642629 bc1abf93 39765af3 bc16e628     )&d9.....Zv9(...
2402c660:	398403a2 bc12c60b 398c9169 bc0e617f     ...9....i..9.a..
2402c670:	3994d2d8 bc09bae9 399cc426 bc04d4c7     ...9....&..9....
2402c680:	39a461a9 bbff6374 39aba7eb bbf4a8f6     .a.9tc.....9....
2402c690:	39b293a9 bbe97fba 39b921be bbddeda0     ...9.....!.9....
2402c6a0:	39bf4f4c bbd1f8aa 39c51992 bbc5a712     LO.9.......9....
2402c6b0:	39ca7e11 bbb8ff30 39cf7a77 bbac078a     .~.90...wz.9....
2402c6c0:	39d40cab bb9ec6bd 39d832c3 bb914392     ...9.....2.9.C..
2402c6d0:	39dbeb13 bb8384e1 39df3427 bb6b233e     ...9....'4.9>#k.
2402c6e0:	39e20cbd bb4ee1a5 39e473ce bb32532d     ...9..N..s.9-S2.
2402c6f0:	39e6688f bb158617 39e7ea68 baf11194     .h.9....h..9....
2402c700:	39e8f8fd bab6d355 39e99430 ba78dc9b     ...9U...0..9..x.
2402c710:	39e9bc10 ba03fe93 39e970f1 b87461b2     ...9.....p.9.at.
2402c720:	39e8b358 39ca2722 39e78407 3a58d593     X..9"'.9...9..X:
2402c730:	39e5e3ec 3aa5e3c4 39e3d43f 3aded8d8     ...9...:?..9...:
2402c740:	39e1565d 3b0b9738 39de6bdf 3b2764b3     ]V.98..;.k.9.d';
2402c750:	39db1692 3b42c783 39d75875 3b5db292     ...9..B;uX.9..];
2402c760:	39d333b5 3b781909 39ceaabc 3b88f731     .3.9..x;...91..;
2402c770:	39c9c015 3b959332 39c47683 3ba1da99     ...92..;.v.9...;
2402c780:	39bed0ee 3badc7a8 39b8d26f 3bb954cf     ...9...;o..9.T.;
2402c790:	39b27e44 3bc47cb4 39abd7d9 3bcf3a32     D~.9.|.;...92:.;
2402c7a0:	39a4e2b2 3bd9885d 399da285 3be36286     ...9]..;...9.b.;
2402c7b0:	39961b24 3becc437 398e5081 3bf5a940     $..97..;.P.9@..;
2402c7c0:	398646aa 3bfe0dab 397c039e 3c02f6e3     .F.9...;..|9...<
2402c7d0:	396b0c5c 3c06a315 3959b054 3c0a09d6     \.k9...<T.Y9...<
2402c7e0:	3947f863 3c0d29b8 3935ed94 3c10016f     c.G9.).<..59o..<
2402c7f0:	3923990f 3c128fd3 39110416 3c14d3e3     ..#9...<...9...<
2402c800:	38fc701e 3c16ccc4 38d67cd9 3c1879bd     .p.8...<.|.8.y.<
2402c810:	38b0414f 3c19da3f 3889d09a 3c1aede0     OA.8?..<...8...<
2402c820:	38467ba7 3c1bb45d 37f2706d 3c1c2d95     .{F8]..<mp.7.-.<
2402c830:	372ff41d 3c1c5991 b7043f81 3c1c3882     ../7.Y.<.?...8.<
2402c840:	b7db916b 3c1bcab9 b83a07f6 3c1b10b1     k......<..:....<
2402c850:	b882d43e 3c1a0b09 b8a842c8 3c18ba83     >......<.B.....<
2402c860:	b8cd3d7d 3c172008 b8f1b289 3c153ca3     }=... .<.....<.<
2402c870:	b90ac836 3c131182 b91c6300 3c109ff6     6......<.c.....<
2402c880:	b92da13c 3c0de971 b93e7ab9 3c0aef87     <.-.q..<.z>....<
2402c890:	b94ee78d 3c07b3e8 b95edff5 3c043868     ..N....<..^.h8.<
2402c8a0:	b96e5c7b 3c007ef6 b97d55e6 3bf9133e     {\n..~.<.U}.>..;
2402c8b0:	b985e2a5 3bf0b514 b98cd202 3be7e7f3     .......;.......;
2402c8c0:	b99375dd 3bdeb096 b999cb33 3bd513e1     .u.....;3......;
2402c8d0:	b99fcf2d 3bcb16ee b9a57f13 3bc0befe     -......;.......;
2402c8e0:	b9aad86b 3bb61177 b9afd8d7 3bab13ea     k...w..;.......;
2402c8f0:	b9b47e2f 3b9fcc07 b9b8c67a 3b943f9f     /~.....;z....?.;
2402c900:	b9bcafed 3b8874a1 b9c038ee 3b78e225     .....t.;.8..%.x;
2402c910:	b9c36010 3b607622 b9c62424 3b47b19f     .`.."v`;$$....G;
2402c920:	b9c8841b 3b2ea11b b9ca7f28 3b155135     .......;(...5Q.;
2402c930:	b9cc14a4 3af79d41 b9cd4425 3ac44c3a     ....A..:%D..:L.:
2402c940:	b9ce0d72 3a90c8dd b9ce707c 3a3a5978     r......:|p..xY::
2402c950:	b9ce6d6d 39a64580 b9ce04a8 b89efc92     mm...E.9........
2402c960:	b9cd36b3 b9f4f5d6 b9cc044e ba607d12     .6......N....}`.
2402c970:	b9ca6e6e baa2da24 b9c87630 bad4f7ad     nn..$...0v......
2402c980:	b9c61ce5 bb033f76 b9c36409 bb1babf6     ....v?...d......
2402c990:	b9c04d4e bb33b5a0 b9bcda8a bb4b50f2     NM....3......PK.
2402c9a0:	b9b90dc5 bb6272ab b9b4e92f bb790fd0     .....rb./.....y.
2402c9b0:	b9b06f1c bb878ed9 b9aba214 bb9248fa     .o...........H..
2402c9c0:	b9a684bb bb9cb146 b9a119e3 bba6c2e5     ....F...........
2402c9d0:	b99b647f bbb0792d b995679c bbb9cfa7     .d..-y...g......
2402c9e0:	b98f2672 bbc2c20d b988a456 bbcb4c53     r&......V...SL..
2402c9f0:	b981e4b6 bbd36a9f b975d643 bbdb1950     .....j..C.u.P...
2402ca00:	b9677671 bbe25503 b958b17a bbe91a90     qvg..U..z.X.....
2402ca10:	b9498efc bbef6707 b93a16c9 bbf537bf     ..I..g....:..7..
2402ca20:	b92a50d1 bbfa8a44 b91a4523 bbff5c6e     .P*.D...#E..n\..
2402ca30:	b909fbe8 bc01d626 b8f2fab9 bc03bc1c     ....&...........
2402ca40:	b8d1a3cc bc055f63 b8b003b6 bc06bf6a     ....c_......j...
2402ca50:	b88e2b5d bc07dbc2 b8585756 bc08b419     ]+......VWX.....
2402ca60:	b8142b1a bc094844 b79fe7b8 bc099838     .+..DH......8...
2402ca70:	b63d3593 bc09a40b 37605373 bc096bf7     .5=.....sS`7.k..
2402ca80:	37f746db bc08f053 383eb747 bc08319c     .F.7S...G.>8.1..
2402ca90:	388097dc bc07306c 38a1763a bc05ed80     ...8l0..:v.8....
2402caa0:	38c1e6d6 bc0469b2 38e1da0b bc02a5fe     ...8.i.....8....
2402cab0:	3900a041 bc00a37c 3910059c bbfcc6cc     A..9|......9....
2402cac0:	391f15bd bbf7ce1e 392dc987 bbf25fd3     ...9......-9._..
2402cad0:	393c19fe bbec7f02 394a007b bbe62efe     ..<9....{.J9....
2402cae0:	39577671 bbdf734b 3964759e bbd84f9e     qvW9Ks...ud9.O..
2402caf0:	3970f80d bbd0c7dd 397cf7f9 bbc8e01d     ..p9......|9....
2402cb00:	398437f7 bbc09c9e 3989ad5c bbb801c9     .7.9....\..9....
2402cb10:	398ed9ba bbaf142c 3993bac5 bba5d882     ...9,......9....
2402cb20:	39984e58 bb9c539c 399c9276 bb928a73     XN.9.S..v..9s...
2402cb30:	39a0854f bb88821e 39a42535 bb7c7f98     O..9....5%.9..|.
2402cb40:	39a770a9 bb679181 39aa6658 bb5244b5     .p.9..g.Xf.9.DR.
2402cb50:	39ad0520 bb3ca413 39af4bfb bb26ba94      ..9..<..K.9..&.
2402cb60:	39b13a1d bb10934f 39b2cee7 baf472ea     .:.9O......9.r..
2402cb70:	39b409dc bac7706c 39b4eab6 ba9a35c3     ...9lp.....9.5..
2402cb80:	39b5715c ba59b2d5 39b59dd7 b9fdc7cf     \q.9..Y....9....
2402cb90:	39b5706c b910aece 39b4e97a 39592427     lp.9....z..9'$Y9
2402cba0:	39b4099e 3a104dda 39b2d19a 3a69b6a5     ...9.M.:...9..i:
2402cbb0:	39b14251 3aa12be8 39af5cdd 3acd0320     QB.9.+.:.\.9 ..:
2402cbc0:	39ad2281 3af84bbd 39aa94a3 3b117874     .".9.K.:...9tx.;
2402cbd0:	39a7b4d4 3b266f11 39a484c9 3b3affa8     ...9.o&;...9..:;
2402cbe0:	39a10662 3b4f2075 399d3ba4 3b62c7e9     b..9u O;.;.9..b;
2402cbf0:	399926b4 3b75ecc1 3994c9dd 3b8442fd     .&.9..u;...9.B.;
2402cc00:	39902787 3b8d4576 398b4241 3b95f99a     .'.9vE.;AB.9...;
2402cc10:	39861cb2 3b9e5b66 3980b9a6 3ba666ff     ...9f[.;...9.f.;
2402cc20:	397637f9 3bae18c0 396a8d71 3bb56d2a     .7v9...;q.j9*m.;
2402cc30:	395e79d8 3bbc60fa 3952038b 3bc2f116     .y^9.`.;..R9...;
2402cc40:	39453116 3bc91aa0 39380929 3bcedae9     .1E9...;).89...;
2402cc50:	392a9295 3bd42f7e 391cd448 3bd91620     ..*9~/.;H..9 ..;
2402cc60:	390ed557 3bdd8cca 39009ced 3be191b1     W..9...;...9...;
2402cc70:	38e46492 3be52343 38c73983 3be8402a     .d.8C#.;.9.8*@.;
2402cc80:	38a9c766 3beae748 388c1d15 3bed17bb     f..8H..;...8...;
2402cc90:	385c92ea 3beed0e1 3820b6e6 3bf0124e     ..\8...;.. 8N..;
2402cca0:	37c987e6 3bf0dbd8 37235f6e 3bf12d86     ...7...;n_#7.-.;
2402ccb0:	b6977dd8 3bf107a8 b79ceaae 3bf06abd     .}.....;.....j.;
2402ccc0:	b8099bb8 3bef5784 b84445ec 3bedcef9     .....W.;.ED....;
2402ccd0:	b87e5754 3bebd24c b89bd9e1 3be962e3     TW~.L..;.....b.;
2402cce0:	b8b81fb7 3be68265 b8d3ef88 3be332a6     ....e..;.....2.;
2402ccf0:	b8ef3c08 3bdf75b6 b904fc16 3bdb4dd5     .<...u.;.....M.;
2402cd00:	b9120b95 3bd6bd78 b91ec65d 3bd1c746     ....x..;]...F..;
2402cd10:	b92b2662 3bcc6e13 b93725e7 3bc6b4e3     b&+..n.;.%7....;
2402cd20:	b942bf48 3bc09eea b94ded35 3bba2f80     H.B....;5.M../.;
2402cd30:	b958aa78 3bb36a2c b962f22f 3bac5299     x.X.,j.;/.b..R.;
2402cd40:	b96cbfb5 3ba4ec9c b9760ea2 3b9d3c28     ..l....;..v.(<.;
2402cd50:	b97edac8 3b954550 b9839027 3b8d0c4f     ..~.PE.;'...O..;
2402cd60:	b9876dcb 3b849573 b98b04aa 3b77ca4d     .m..s..;....M.w;
2402cd70:	b98e533e 3b65ffe8 b9915826 3b53d4e1     >S....e;&X....S;
2402cd80:	b9941229 3b41529f b9968038 3b2e8297     )....RA;8......;
2402cd90:	b998a162 3b1b6e6c b99a74e4 3b081fce     b...ln.;.t.....;
2402cda0:	b99bfa23 3ae94111 b99d30a3 3ac1f4e9     #....A.:.0.....:
2402cdb0:	b99e1818 3a9a6edf b99eb05d 3a658598     .....n.:].....e:
2402cdc0:	b99ef96b 3a1608e1 b99ef372 398d1e53     k......:r...S..9
2402cdd0:	b99e9eb7 b80c032d b99dfbb8 b9af7c20     ....-....... |..
2402cde0:	b99d0b0e ba264395 b99bcd78 ba742a51     .....C&.x...Q*t.
2402cdf0:	b99a43e0 baa0a620 b9986f4f bac6c1f1     .C.. ...Oo......
2402ce00:	b99650f9 baec5633 b993ea31 bb08a85f     .P..3V..1..._...
2402ce10:	b9913c6b bb1acfee b98e493e bb2c9914     k<......>I....,.
2402ce20:	b98b126c bb3dfb63 b98799c4 bb4eee99     l...c.=.......N.
2402ce30:	b983e146 bb5f6ac1 b97fd609 bb6f6825     F....j_.....%ho.
2402ce40:	b9777264 bb7edf48 b96e9c3c bb86e487     drw.H.~.<.n.....
2402ce50:	b965585d bb8e0f49 b95babce bb94eca8     ]Xe.I.....[.....
2402ce60:	b9519bc4 bb9b7985 b9472d9c bba1b2f4     ..Q..y...-G.....
2402ce70:	b93c66d8 bba79629 b9314d30 bbad2093     .f<.)...0M1.. ..
2402ce80:	b925e66f bbb24fc7 b91a388c bbb7218a     o.%..O...8...!..
2402ce90:	b90e4997 bbbb93d7 b9021fbd bbbfa4d5     .I..............
2402cea0:	b8eb827f bbc352e0 b8d268f5 bbc69c83     .....R...h......
2402ceb0:	b8b8ff97 bbc98081 b89f5363 bbcbfdd0     ........cS......
2402cec0:	b8857152 bbce1394 b856cceb bbcfc12f     Rq........V./...
2402ced0:	b8227fc1 bbd1062d b7dc2aaf bbd1e258     ..".-....*..X...
2402cee0:	b7669f4f bbd255a9 b5aa280a bbd2604a     O.f..U...(..J`..
2402cef0:	373b51e9 bbd202a1 37c55f4e bbd13d43     .Q;7....N_.7C=..
2402cf00:	381626c9 bbd010f6 384920b9 bbce7eb3     .&.8..... I8.~..
2402cf10:	387b8498 bbcc87ab 38969cfb bbca2d37     ..{8.......87-..
2402cf20:	38af1464 bbc770e5 38c71cc2 bbc45472     d..8.p.....8rT..
2402cf30:	38deaa97 bbc0d9c7 38f5b290 bbbd02fe     ...8.......8....
2402cf40:	390614f3 bbb8d255 391102ef bbb44a3f     ...9U......9?J..
2402cf50:	391b9e1a bbaf6d4d 3925e18d bbaa3e42     ...9Mm....%9B>..
2402cf60:	392fc877 bba4bffe 39394e51 bb9ef58a     w./9....QN99....
2402cf70:	39426eba bb98e215 394b2588 bb9288e8     .nB9.....%K9....
2402cf80:	39536ed8 bb8bed72 395b46f4 bb85133a     .nS9r....F[9:...
2402cf90:	3962aa61 bb7bfbcf 396995eb bb6d626f     a.b9..{...i9obm.
2402cfa0:	39700698 bb5e6207 3975f9ab bb4f026d     ..p9.b^...u9m.O.
2402cfb0:	397b6cad bb3f4b9f 39802eb4 bb2f45cb     .l{9.K?....9.E/.
2402cfc0:	398264f1 bb1ef92e 39845838 bb0e6e24     .d.9....8X.9$n..
2402cfd0:	398607d3 bafb5a54 3987732d bad97d8a     ...9TZ..-s.9.}..
2402cfe0:	398899d3 bab7571a 39897b7c ba94f839     ...9.W..|{.99...
2402cff0:	398a17fc ba64e471 398a6f44 ba1faccd     ...9q.d.Do.9....
2402d000:	398a8174 b9b4d82a 398a4ebe b8aa25a7     t..9*....N.9.%..
2402d010:	3989d78c 393e9c40 39891c53 39e86a77     ...9@.>9S..9wj.9
2402d020:	39881dba 3a384418 3986dc81 3a7bb259     ...9.D8:...9Y.{:
2402d030:	3985598a 3a9f2f8e 398395d5 3ac01503     .Y.9./.:...9...:
2402d040:	39819287 3ae079a8 397ea1b6 3b0026f1     ...9.y.:..~9.&.;
2402d050:	3979a46a 3b0fc136 39743011 3b1f0438     j.y96..;.0t98..;
2402d060:	396e47e4 3b2de8b5 3967ef3d 3b3c67a9     .Gn9..-;=.g9.g<;
2402d070:	396129bc 3b4a7a44 3959fb32 3b5819f7     .)a9DzJ;2.Y9..X;
2402d080:	39526789 3b65406e 394a72f8 3b71e7a0     .gR9n@e;.rJ9..q;
2402d090:	394221d8 3b7e09be 3939789f 3b84d0a4     .!B9..~;.x99...;
2402d0a0:	39307bff 3b8a5484 392730bf 3b8f8e0a     .{09.T.;.0'9...;
2402d0b0:	391d9bcf 3b947ae8 3913c23c 3b9918fa     ...9.z.;<..9...;
2402d0c0:	3909a933 3b9d6642 38feabf0 3ba160f2     3..9Bf.;...8.`.;
2402d0d0:	38e99be0 3ba50763 38d42d1c 3ba85816     ...8c..;.-.8.X.;
2402d0e0:	38be6a9e 3bab51c2 38a85f9b 3badf341     .j.8.Q.;._.8A..;
2402d0f0:	38921750 3bb03b9d 38773a2d 3bb22a12     P..8.;.;-:w8.*.;
2402d100:	3849f89f 3bb3be04 381c80cc 3bb4f705     ..I8...;...8...;
2402d110:	37ddd31d 3bb5d4d7 37829374 3bb6576a     ...7...;t..7jW.;
2402d120:	369dc062 3bb67edc b6cda6bb 3bb64b72     b..6.~.;....rK.;
2402d130:	b78dccef 3bb5bda5 b7e78d1f 3bb4d618     .......;.......;
2402d140:	b8203f1d 3bb39599 b84c3a5c 3bb1fd24     .? ....;\:L.$..;
2402d150:	b877a2eb 3bb00dde b89131e0 3badc917     ..w....;.1.....;
2402d160:	b8a6341d 3bab3047 b8bace15 3ba8450e     .4..G0.;.....E.;
2402d170:	b8cef5f0 3ba50937 b8e2a215 3ba17eaf     ....7..;.....~.;
2402d180:	b8f5c945 3b9da78a b9043134 3b9985ff     E......;41.....;
2402d190:	b90d326b 3b951c6e b915e412 3b906d4b     k2..n..;....Km.;
2402d1a0:	b91e422f 3b8b7b3a b92648e6 3b8648f4     /B..:{.;.H&..H.;
2402d1b0:	b92df495 3b80d94f b93541c8 3b765e81     ..-.O..;.A5..^v;
2402d1c0:	b93c2d36 3b6a9baf b942b3d2 3b5e7070     6-<...j;..B.pp^;
2402d1d0:	b948d2c2 3b51e344 b94e8765 3b44facf     ..H.D.Q;e.N...D;
2402d1e0:	b953cf58 3b37bdd8 b958a859 3b2a3352     X.S...7;Y.X.R3*;
2402d1f0:	b95d1081 3b1c624c b9610602 3b0e51ec     ..].Lb.;..a..Q.;
2402d200:	b9648763 3b000976 b967935a 3ae3207f     c.d.v..;Z.g.. .:
2402d210:	b96a28dc 3ac5db63 b96c4712 3aa85280     .(j.c..:.Gl..R.:
2402d220:	b96ded6d 3a8a94d5 b96f1b9b 3a5962bd     m.m....:..o..bY:
2402d230:	b96fd17f 3a1d6e5d b9700f3d 39c2d51b     ..o.]n.:=.p....9
2402d240:	b96fd526 3915d510 b96f23e0 b8b29d97     &.o....9.#o.....
2402d250:	b96dfc38 b9a3a580 b96c5f3b ba0cea91     8.m.....;_l.....
2402d260:	b96a4e3a ba477e1f b967caad ba80b864     :Nj..~G...g.d...
2402d270:	b964d648 ba9d532f b96172fe bab9818e     H.d./S...ra.....
2402d280:	b95da2f6 bad535ec b9596886 baf062ff     ..]..5...hY..b..
2402d290:	b954c633 bb057de1 b94fbec1 bb1279cd     3.T..}....O..y..
2402d2a0:	b94a5510 bb1f1f1d b9448c44 bb2b67e3     .UJ.....D.D..g+.
2402d2b0:	b93e679c bb374e5c b937ea8f bb42cd04     .g>.\N7...7...B.
2402d2c0:	b93118ae bb4dde92 b929f5bd bb587dec     ..1...M...)..}X.
2402d2d0:	b922859e bb62a646 b91acc59 bb6c530b     ..".F.b.Y....Sl.
2402d2e0:	b912ce10 bb757fec b90a8f10 bb7e28dd     ......u......(~.
2402d2f0:	b90213b7 bb83250c b8f2c0f5 bb86f010     .....%..........
2402d300:	b8e0f3e3 bb8a73e0 b8cec98a bb8daf06     .....s..........
2402d310:	b8bc4b4f bb90a034 b8a982cc bb93463f     OK..4.......?F..
2402d320:	b89679ae bb95a025 b88339b7 bb97ad0c     .y..%....9......
2402d330:	b85f997a bb996c40 b8387945 bb9add33     z._.@l..Ey8.3...
2402d340:	b811269c bb9bff7f b7d36aaa bb9cd2ea     .&.......j......
2402d350:	b7847283 bb9d575c b6d6310c bb9d8ce8     .r..\W...1......
2402d360:	3649061c bb9d73c8 374edb0f bb9d0c5a     ..I6.s....N7Z...
2402d370:	37b53358 bb9c5728 380125fb bb9b54db     X3.7(W...%.8.T..
2402d380:	382748c9 bb9a0648 384cef7d bb986c6a     .H'8H...}.L8jl..
2402d390:	387207cf bb96885a 388b3fe8 bb945b5b     ..r8Z....?.8[[..
2402d3a0:	389d22f8 bb91e6ce 38aea48b bb8f2c3c     .".8.......8<,..
2402d3b0:	38bfbc47 bb8c2d4d 38d06215 bb88ebc4     G..8M-...b.8....
2402d3c0:	38e08e19 bb85698c 38f038cb bb81a8a8     ...8.i...8.8....
2402d3d0:	38ff5ada bb7b5678 3906f6a6 bb72e70e     .Z.8xV{....9..r.
2402d3e0:	390df4b6 bb6a07c2 3914a472 bb60bd7c     ...9..j.r..9|.`.
2402d3f0:	391b02d7 bb570d4f 39210d07 bb4cfc7f     ...9O.W...!9..L.
2402d400:	3926c061 bb429078 392c1a64 bb37ced3     a.&9x.B.d.,9..7.
2402d410:	393118bc bb2cbd45 3935b957 bb2161b1     ..19E.,.W.59.a!.
2402d420:	3939fa47 bb15c20d 393dd9cc bb09e470     G.99......=9p...
2402d430:	39415666 bafb9e13 39446ebd bae31039     fVA9.....nD99...
2402d440:	394721b8 baca2c00 39496e5f bab0fe3a     .!G9.,.._nI9:...
2402d450:	394b53f8 ba9793b9 394cd210 ba7bf2ed     .SK9......L9..{.
2402d460:	394de845 ba4878da 394e9689 ba14d33a     E.M9.xH...N9:...
2402d470:	394edceb b9c237fe 394ebbb7 b935b444     ..N9.7....N9D.5.
2402d480:	394e3375 37c3f9a4 394d44d8 3965c409     u3N9...7.DM9..e9
2402d490:	394bf0bd 39d8da63 394a3843 3a1efb42     ..K9c..9C8J9B..:
2402d4a0:	39481cae 3a51026d 39459f77 3a813525     ..H9m.Q:w.E9%5.:
2402d4b0:	3942c243 3a998d6b 393f86f2 3ab17e4e     C.B9k..:..?9N~.:
2402d4c0:	393bef80 3ac8fc3b 3937fe21 3adffbff     ..;9;..:!.79...:
2402d4d0:	3933b524 3af672a7 392f171c 3b062ac5     $.39.r.:../9.*.;
2402d4e0:	392a26a5 3b10cd2d 3924e69e 3b1b1b98     .&*9-..;..$9...;
2402d4f0:	391f59fa 3b25113a 391983c8 3b2ea976     .Y.9:.%;...9v..;
2402d500:	39136750 3b37dfeb 390d07e6 3b40b067     Pg.9..7;...9g.@;
2402d510:	39066906 3b4916fa 38ff1c85 3b510fdb     .i.9..I;...8..Q;
2402d520:	38f0f693 3b58978f 38e267c7 3b5faacf     ...8..X;.g.8.._;
2402d530:	38d377dd 3b66468f 38c42eb3 3b6c6804     .w.8.Ff;...8.hl;
2402d540:	38b49457 3b720ca7 38a4b0ea 3b77322f     W..8..r;...8/2w;
2402d550:	38948cb1 3b7bd694 38843007 3b7ff815     ...8..{;.0.8...;
2402d560:	386746ac 3b81ca97 3845de39 3b835654     .Fg8...;9.E8TV.;
2402d570:	382437c3 3b849ec3 38026464 3b85a38c     .7$8...;dd.8...;
2402d580:	37c0ea74 3b866475 3779ed7c 3b86e16c     t..7ud.;|.y7l..;
2402d590:	36e43ee9 3b871a7c b5aa8a46 3b870fd4     .>.6|..;F......;
2402d5a0:	b71c215f 3b86c1c4 b7910702 3b8630bc     _!.....;.....0.;
2402d5b0:	b7d36a94 3b855d51 b80a8d68 3b844837     .j..Q].;h...7H.;
2402d5c0:	b82afbcb 3b82f23f b84af0ad 3b815c5f     ..*.?..;..J._\.;
2402d5d0:	b86a5c95 3b7f0f48 b884982f 3b7aea86     .\j.H..;/.....z;
2402d5e0:	b893aea0 3b764d13 b8a26a6e 3b7139bf     .....Mv;nj...9q;
2402d5f0:	b8b0c49c 3b6bb39c b8beb664 3b65bde8     ......k;d.....e;
2402d600:	b8cc3940 3b5f5c1c b8d946e3 3b5891e7     @9...\_;.F....X;
2402d610:	b8e5d952 3b51631b b8f1eabe 3b49d3c5     R....cQ;......I;
2402d620:	b8fd75ae 3b41e817 b9043a76 3b39a46f     .u....A;v:..o.9;
2402d630:	b90971cb 3b310d54 b90e5e87 3b28276b     .q..T.1;.^..k'(;
2402d640:	b912fe8b 3b1ef785 b9174fd4 3b158284     .......;.O.....;
2402d650:	b91b5094 3b0bcd7e b91eff23 3b01dd8c     .P..~..;#......;
2402d660:	b9225a06 3aef6fd4 b9255fe5 3adac3db     .Z"..o.:._%....:
2402d670:	b9280fa0 3ac5c1e3 b92a6840 3ab074db     ..(....:@h*..t.:
2402d680:	b92c68fd 3a9ae7bc b92e112c 3a852599     .h,....:,....%.:
2402d690:	b92f6065 3a5e7312 b9305663 3a325d7a     e`/..s^:cV0.z]2:
2402d6a0:	b930f305 3a0620b8 b931366d 39b3a637     ..0.. .:m61.7..9
2402d6b0:	b93120d8 39362b96 b930b2b4 36af1bf9     . 1..+69..0....6
2402d6c0:	b92feca0 b92a73be b92ecf55 b9aca189     ../..s*.U.......
2402d6d0:	b92d5bd1 ba01a7b9 b92b9327 ba2c8c83     .[-.....'.+...,.
2402d6e0:	b92976a2 ba56ea2b b92707ad ba80560b     .v).+.V...'..V..
2402d6f0:	b92447dd ba94df06 b92138eb baa90627     .G$......8!.'...
2402d700:	b91ddcb7 babcc1bd b91a354d bad00863     ........M5..c...
2402d710:	b91644d0 bae2d101 b9120d99 baf512b4     .D..............
2402d720:	b90d9209 bb03627a b908d4ae bb0befc5     ....zb..........
2402d730:	b903d830 bb142d45 b8fd3ec2 bb1c173c     0...E-...>..<...
2402d740:	b8f25a33 bb23aa0f b8e708b5 bb2ae253     3Z....#.....S.*.
2402d750:	b8db5075 bb31bcda b8cf37b6 bb383697     uP....1..7...68.
2402d760:	b8c2c506 bb3e4cbe b8b5ff03 bb43fcb8     .....L>.......C.
2402d770:	b8a8ec75 bb49441b b89b9442 bb4e20bd     u....DI.B.... N.
2402d780:	b88dfd6a bb5290a8 b8802f04 bb56921d     j.....R../....V.
2402d790:	b864607b bb5a23a2 b84810a3 bb5d43e4     {`d..#Z...H..C].
2402d7a0:	b82b7d13 bb5ff1d8 b80eb46f bb622ca8     .}+..._.o....,b.
2402d7b0:	b7e38ac0 bb63f3c1 b7a97d38 bb6546b9     ......c.8}...Fe.
2402d7c0:	b75ebb20 bb662575 b6d52447 bb669006      .^.u%f.G$....f.
2402d7d0:	35146659 bb6686bf 36f92967 bb660a2d     Yf.5..f.g).6-.f.
2402d7e0:	376f1f86 bb651b0d 37b05722 bb63ba5c     ..o7..e."W.7\.c.
2402d7f0:	37e8848e bb61e954 380ffe3e bb5fa95e     ...7T.a.>..8^._.
2402d800:	382b51f6 bb5cfc16 3846302e bb59e354     .Q+8..\..0F8T.Y.
2402d810:	38608bf3 bb566124 387a589f bb5277c3     ..`8$aV..Xz8.wR.
2402d820:	3889c4f2 bb4e2999 389609e7 bb49794a     ...8.)N....8JyI.
2402d830:	38a1f567 bb44699e 38ad81dc bb3efd8e     g..8.iD....8..>.
2402d840:	38b8a9e8 bb393841 38c36864 bb331cfd     ...8A89.dh.8..3.
2402d850:	38cdb867 bb2caf3a 38d79542 bb25f290     g..8:.,.B..8..%.
2402d860:	38e0fa7e bb1eeabc 38e9e408 bb179b9b     ~..8.......8....
2402d870:	38f24dcc bb10092f 38fa344c bb08378b     .M.8/...L4.8.7..
2402d880:	3900ca05 bb002aeb 39043503 baefcf39     ...9.*...5.99...
2402d890:	390759b4 badee3fc 390a36d4 bacd9d24     .Y.9.....6.9$...
2402d8a0:	390ccb42 babc03c1 390f160f baaa20fb     B..9.......9. ..
2402d8b0:	3911165e ba97fe30 3912cb91 ba85a4bd     ^..90......9....
2402d8c0:	39143520 ba663c2f 391552af ba40e785      5.9/<f..R.9..@.
2402d8d0:	391623fc ba1b5e85 3916a905 b9eb6886     .#.9.^.....9.h..
2402d8e0:	3916e1d9 b99ff79d 3916ceaf b929208c     ...9.......9. ).
2402d8f0:	39166ff4 b79584aa 3915c62b 39031593     .o.9....+..9...9
2402d900:	3914d1ff 398bf3c9 39139447 39d5bdec     ...9...9G..9...9
2402d910:	39120df2 3a0f6271 3910401a 3a337278     ...9qb.:.@.9xr3:
2402d920:	390e2c02 3a56fd78 390bd2fb 3a79f237     .,.9x.V:...97.y:
2402d930:	39093694 3a8e1ff1 39065861 3a9eeaf8     .6.9...:aX.9...:
2402d940:	39033a22 3aaf523e 38ffbb62 3abf4df8     ":.9>R.:b..8.M.:
2402d950:	38f88a21 3aced692 38f0e497 3adde4de     !..8...:...8...:
2402d960:	38e8cf39 3aec71d0 38e04e88 3afa76ba     9..8.q.:.N.8.v.:
2402d970:	38d7674d 3b03f696 38ce1e7f 3b0a678d     Mg.8...;...8.g.;
2402d980:	38c4793f 3b108b57 38ba7cce 3b165f3d     ?y.8W..;.|.8=_.;
2402d990:	38b02e9b 3b1be0b1 38a59434 3b210d52     ...8...;4..8R.!;
2402d9a0:	389ab348 3b25e2ed 388f91a3 3b2a5f7a     H..8..%;...8z_*;
2402d9b0:	3884352a 3b2e8125 387147b2 3b324641     *5.8%..;.Gq8AF2;
2402d9c0:	3859c780 3b35ad61 3841f602 3b38b539     ..Y8a.5;..A89.8;
2402d9d0:	3829df90 3b3b5cb8 38119099 3b3da2f9     ..)8.\;;...8..=;
2402d9e0:	37f22b36 3b3f8750 37c0f639 3b41093d     6+.7P.?;9..7=.A;
2402d9f0:	378f9b3f 3b422873 373c66a3 3b42e4d7     ?..7s(B;.f<7..B;
2402da00:	36b35d48 3b433e88 b50bfe40 3b4335c6     H].6.>C;@....5C;
2402da10:	b6d56795 3b42cb12 b74bfc5c 3b41ff18     .g....B;\.K...A;
2402da20:	b79634b7 3b40d2ae b7c5e5c2 3b3f46e3     .4....@;.....F?;
2402da30:	b7f4f9ee 3b3d5ced b811ad23 3b3b1638     .....\=;#...8.;;
2402da40:	b8287826 3b387459 b83ed300 3b35790d     &x(.Yt8;..>..y5;
2402da50:	b854b2f6 3b322643 b86a0d99 3b2e7e0b     ..T.C&2;..j..~.;
2402da60:	b87ed8cd 3b2a82a9 b8898561 3b26367e     ..~...*;a...~6&;
2402da70:	b8934d03 3b219c14 b89cbec3 3b1cb61d     .M....!;.......;
2402da80:	b8a5d646 3b17876c b8ae8f67 3b1212f0     F...l..;g......;
2402da90:	b8b6e630 3b0c5bbf b8bed6e7 3b066509     0....[.;.....e.;
2402daa0:	b8c65e06 3b003219 b8cd7843 3af38caa     .^...2.;Cx.....:
2402dab0:	b8d42288 3ae64a80 b8da5a08 3ad8a4e1     ."...J.:.Z.....:
2402dac0:	b8e01c3a 3acaa31e b8e566a5 3abc4cb3     :......:.f...L.:
2402dad0:	b8ea373f 3aada93d b8ee8c35 3a9ec07e     ?7..=..:5...~..:
2402dae0:	b8f263ea 3a8f9a3c b8f5bcfa 3a803e70     .c..<..:....p>.:
2402daf0:	b8f8965f 3a616a14 b8faef3c 3a420c2d     _....ja:<...-.B:
2402db00:	b8fcc70a 3a22734c b8fe1d66 3a02af9f     ....Ls":f......:
2402db10:	b8fef245 39c5a2a9 b8ff45ea 3985d12f     E......9.E../..9
2402db20:	b8ff18b6 390c160a b8fe6b5b 374e058e     .......9[k....N7
2402db30:	b8fd3ed0 b8e37e25 b8fb9453 b96f893c     .>..%~..S...<.o.
2402db40:	b8f96d47 b9b61ff0 b8f6cb58 b9f3d2c6     Gm......X.......
2402db50:	b8f3b082 ba185f73 b8f01ecf ba36634d     ....s_......Mc6.
2402db60:	b8ec18a9 ba53e662 b8e7a0b2 ba70da78     ....b.S.....x.p.
2402db70:	b8e2b999 ba8698d8 b8dd667b ba946f41     ........{f..Ao..
2402db80:	b8d7aa76 baa1e9e4 b8d188f7 baaf0273     v...........s...
2402db90:	b8cb0594 babbb2c9 b8c4240a bac7f510     .........$......
2402dba0:	b8bce845 bad3c395 b8b55659 badf18f7     E.......YV......
2402dbb0:	b8ad7281 bae9f01e b8a5411c baf44435     .r.......A..5D..
2402dbc0:	b89cc6ac bafe109a b89407ce bb03a88e     ................
2402dbd0:	b88b0942 bb0800d5 b881cfdf bb0c0f54     B...........T...
2402dbe0:	b870c125 bb0fd25b b85d80c2 bb13485c     %.p.[.....].\H..
2402dbf0:	b849e8c8 bb167000 b8360380 bb194810     ..I..p....6..H..
2402dc00:	b821db55 bb1bcf7b b80d7ac0 bb1e0568     U.!.{....z..h...
2402dc10:	b7f1d8a4 bb1fe918 b7c87547 bb217a01     ........Gu...z!.
2402dc20:	b79ee097 bb22b7c4 b76a5f94 bb23a224     ......".._j.$.#.
2402dc30:	b716f02d bb243912 b6873a1d bb247cae     -....9$..:...|$.
2402dc40:	3576fdc9 bb246d3f 36c41a09 bb240b33     ..v5?m$....63.$.
2402dc50:	37341148 bb235721 3782aa00 bb2251cf     H.47!W#....7.Q".
2402dc60:	37aad68f bb20fc20 37d27a9f bb1f572b     ...7 . ..z.7+W..
2402dc70:	37f982d1 bb1d6425 380fee21 bb1b246f     ...7%d..!..8o$..
2402dc80:	3822ba33 bb189983 38351c9d bb15c513     3."8......58....
2402dc90:	38470c9c bb12a8e0 385881b2 bb0f46da     ..G8......X8.F..
2402dca0:	386973a5 bb0ba10d 3879da8e bb07b9a2     .si8......y8....
2402dcb0:	3884d76b bb0392e5 388c7499 bafe5e84     k..8.....t.8.^..
2402dcc0:	3893c15a baf52268 389aba66 baeb76c2     Z..8h"..f..8.v..
2402dcd0:	38a15c9d bae160fb 38a7a516 bad6e6ac     .\.8.`.....8....
2402dce0:	38ad9114 bacc0d9b 38b31e0e bac0dbb9     ...8.......8....
2402dcf0:	38b849ac bab55721 38bd11ce baa985fe     .I.8!W.....8....
2402dd00:	38c17488 ba9d6ebb 38c57023 ba9117b7     .t.8.n..#p.8....
2402dd10:	38c9031b ba848786 38cc2c28 ba6f8982     ...8....(,.8..o.
2402dd20:	38ceea38 ba55ac3a 38d13c6d ba3b84ad     8..8:.U.m<.8..;.
2402dd30:	38d32220 ba212069 38d49af4 ba068d0a      ".8i !....8....
2402dd40:	38d5a6a3 b9d7b06c 38d6453a b9a21f1d     ...8l...:E.8....
2402dd50:	38d676f1 b95902c9 38d63c28 b8dbc95c     .v.8..Y.(<.8\...
2402dd60:	38d595ac b6467698 38d48431 38ce5082     ...8.vF.1..8.P.8
2402dd70:	38d308f2 3950acb9 38d1250a 399c9f9d     ...8..P9.%.8...9
2402dd80:	38ceda10 39d05624 38cc29a8 3a01b046     ...8$V.9.).8F..:
2402dd90:	38c915ae 3a1ad2fc 38c5a030 3a338702     ...8...:0..8..3:
2402dda0:	38c1cb69 3a4bc06f 38bd99c2 3a6373a8     i..8o.K:...8.sc:
2402ddb0:	38b90dd2 3a7a9562 38b42a58 3a888d58     ...8b.z:X*.8X..:
2402ddc0:	38aef23d 3a937c7d 38a96890 3a9e1304     =..8}|.:.h.8...:
2402ddd0:	38a39084 3aa84c0f 389d6d76 3ab222e4     ...8.L.:vm.8.".:
2402dde0:	389702de 3abb9314 38905456 3ac49853     ...8...:VT.8S..:
2402ddf0:	38896597 3acd2eae 38823a76 3ad55257     .e.8...:v:.8WR.:
2402de00:	3875adbd 3adcffc2 38667dae 3ae433b5     ..u8...:.}f8.3.:
2402de10:	3856ecf2 3aeaeb1b 384703e9 3af1233b     ..V8...:..G8;#.:
2402de20:	3836cb0e 3af6d991 38264afc 3afc0be6     ..68...:.J&8...:
2402de30:	38158c6a 3b005c28 3804981d 3b026e85     j..8(\.;...8.n.;
2402de40:	37e6ede8 3b043c61 37c463a4 3b05c52b     ...7a<.;.c.7+..;
2402de50:	37a1a33d 3b070872 377d7d2d 3b0805ef     =..7r..;-}}7...;
2402de60:	37378f11 3b08bd7e 36e33f51 3b092f1c     ..77~..;Q?.6./.;
2402de70:	362f49a1 3b095aee b5cdac62 3b09413a     .I/6.Z.;b...:A.;
2402de80:	b6bdaabc 3b08e263 b7236a98 3b083efa     ....c..;.j#..>.;
2402de90:	b7675339 3b0757a7 b79536dc 3b062d38     9Sg..W.;.6..8-.;
2402dea0:	b7b64c99 3b04c09e b7d6daa9 3b0312eb     .L.....;.......;
2402deb0:	b7f6d14e 3b012548 b80b1088 3afdf209     N...H%.;.......:
2402dec0:	b81a5d7b 3af91f21 b8294833 3af3d4e0     {]..!..:3H)....:
2402ded0:	b837c9a9 3aee168d b845db08 3ae7e7b9     ..7....:..E....:
2402dee0:	b85375c5 3ae14c0b b8609395 3ada4770     .uS..L.:..`.pG.:
2402def0:	b86d2e7b 3ad2ddf8 b87940bd 3acb13f6     {.m....:.@y....:
2402df00:	b8826278 3ac2edc8 b887dafc 3aba7018     xb.....:.....p.:
2402df10:	b88d0787 3ab19fa0 b891e5dd 3aa88147     .......:....G..:
2402df20:	b89673eb 3a9f1a04 b89aafd0 3a956f0a     .s.....:.....o.:
2402df30:	b89e97ce 3a8b858d b8a22a5c 3a8162e7     .......:\*...b.:
2402df40:	b8a56619 3a6e190b b8a849d4 3a590fcf     .f....n:.I....Y:
2402df50:	b8aad48b 3a43b53e b8ad0568 3a2e1491     ....>.C:h......:
2402df60:	b8aedbc7 3a183919 b8b0572f 3a022e32     .....9.:/W..2..:
2402df70:	b8b17759 39d7fe90 b8b23c2c 39ab6f85     Yw.....9,<...o.9
2402df80:	b8b2a5b9 397d8c2d b8b2b449 3924320a     ....-.}9I....2$9
2402df90:	b8b26849 3895fbc4 b8b1c259 b75e34a7     Ih.....8Y....4^.
2402dfa0:	b8b0c344 b8cc89d7 b8af6c00 b93dfaec     D........l....=.
2402dfb0:	b8adbdb2 b98a6ce4 b8abb9a7 b9b55b4b     .....l......K[..
2402dfc0:	b8a96156 b9dfb3a2 b8a6b660 ba04b09d     Va......`.......
2402dfd0:	b8a3ba8e ba1927ee b8a06fcd ba2d35e8     .....'...o...5-.
2402dfe0:	b89cd833 ba40d0ef b898f5f8 ba53efae     3.....@.......S.
2402dff0:	b894cb79 ba66891d b8905b33 ba789483     y.....f.3[....x.
2402e000:	b88ba7c4 ba8504c0 b886b3e5 ba8d6ffc     .............o..
2402e010:	b8818274 ba958823 b8782cc7 ba9d498e     t...#....,x..I..
2402e020:	b86ce587 baa4b0b5 b8613573 baabba61     ..l.....s5a.a...
2402e030:	b8552307 bab2637b b848b4eb bab8a921     .#U.{c....H.!...
2402e040:	b83bf1e3 babe88b4 b82ee0df bac3ffb8     ..;.............
2402e050:	b82188ec bac90c01 b813f129 bacdab89     ..!.....).......
2402e060:	b80620d9 bad1dc92 b7f03e8f bad59d89     . .......>......
2402e070:	b7d3e7ac bad8ed28 b7b74bd9 badbca5a     ....(....K..Z...
2402e080:	b79a79ff bade3442 b77b0209 bae02a44     .y..B4....{.D*..
2402e090:	b740dfb8 bae1ac02 b706aace bae2b959     ..@.........Y...
2402e0a0:	b69901e5 bae3525b b593fd27 bae37756     ....[R..'...Vw..
2402e0b0:	361cef66 bae328e2 36c12925 bae267b6     f..6.(..%).6.g..
2402e0c0:	37196de8 bae134db 3751aba0 badf9187     .m.7.4....Q7....
2402e0d0:	378498ff badd7f22 379ff2e3 badaff59     ...7"......7Y...
2402e0e0:	37bad61c bad813fe 37d535ab bad4bf23     ...7.....5.7#...
2402e0f0:	37ef04d5 bad10312 38041ba0 bacce235     ...7.......85...
2402e100:	38106078 bac85f32 381c4b2a bac37cdc     x`.82_..*K.8.|..
2402e110:	3827d61f babe3e25 3832fbfd bab8a647     ..'8%>....28G...
2402e120:	383db7a4 bab2b88b 3848042c baac7866     ..=8....,.H8fx..
2402e130:	3851dcf1 baa5e981 385b3d8f ba9f0f94     ..Q8.....=[8....
2402e140:	386421e4 ba97ee85 386c8615 ba908a5a     .!d8......l8Z...
2402e150:	3874668d ba88e722 387bbffb ba810921     .ft8".....{8!...
2402e160:	388147ad ba71e94d 388468fa ba615c2f     .G.8M.q..h.8/\a.
2402e170:	388742ac ba5073d9 3889d3b0 ba3f3963     .B.8.sP....8c9?.
2402e180:	388c1b1e ba2db5ff 388e1830 ba1bf2fa     ...8..-.0..8....
2402e190:	388fca49 ba09f9af 389130f4 b9efa723     I..8.....0.8#...
2402e1a0:	38924be1 b9cb142a 38931ae8 b9a64d6f     .K.8*......8oM..
2402e1b0:	38939e07 b98165ee 3893d564 b938e12c     ...8.e..d..8,.8.
2402e1c0:	3893c14b b8de010c 3893622f b8153db8     K..8..../b.8.=..
2402e1d0:	3892b8a6 38103394 3891c56d 38d9df32     ...8.3.8m..82..8
2402e1e0:	38908965 3935344e 388f0595 397cb718     e..8N459...8..|9
2402e1f0:	388d3b24 39a1aa55 388b2b5c 39c4752b     $;.8U..9\+.8+u.9
2402e200:	3888d7aa 39e6ab17 3886419d 3a041dbf     ...8...9.A.8...:
2402e210:	38836adf 3a148b1b 3880553c 3a2495c3     .j.8...:<U.8..$:
2402e220:	387a053f 3a343617 3872ea1a 3a4364b8     ?.z8.64:..r8.dC:
2402e230:	386b5d4a 3a521a8c 38636348 3a6050c1     J]k8..R:Hcc8.P`:
2402e240:	385b00b8 3a6e00cd 38523a77 3a7b2474     ..[8..n:w:R8t${:
2402e250:	38491581 3a83dae3 383f9706 3a89d79e     ..I8...:..?8...:
2402e260:	3835c457 3a8f85c4 382ba2e9 3a94e2d9     W.58...:..+8...:
2402e270:	38213859 3a99ec9d 38168a55 3a9ea0ea     Y8!8...:U..8...:
2402e280:	380b9eb2 3aa2fde0 38007b52 3aa701c0     ...8...:R{.8...:
2402e290:	37ea4c66 3aaaaaed 37d34ac1 3aadf818     fL.7...:.J.7...:
2402e2a0:	37bbfde7 3ab0e815 37a47227 3ab379d9     ...7...:'r.7.y.:
2402e2b0:	378cb3da 3ab5aca8 37699ebb 3ab77fe7     ...7...:..i7...:
2402e2c0:	3739a239 3ab8f32f 37098add 3aba0643     9.97/..:...7C..:
2402e2d0:	36b2e2c1 3abab924 3625b930 3abb0c05     ...6$..:0.%6...:
2402e2e0:	b4ccc03c 3abaff34 b657cd95 3aba934b     <...4..:..W.K..:
2402e2f0:	b6ca43ff 3ab9c906 b713da43 3ab8a158     .C.....:C...X..:
2402e300:	b7420505 3ab71d49 b76f8b6a 3ab53e32     ..B.I..:j.o.2>.:
2402e310:	b78e2b9e 3ab30584 b7a42944 3ab074e4     .+.....:D)...t.:
2402e320:	b7b9b40c 3aad8e10 b7cec191 3aaa530b     .......:.....S.:
2402e330:	b7e347c6 3aa6c5ec b7f73cf0 3aa2e8f9     .G.....:.<.....:
2402e340:	b8054bd6 3a9ebe9d b80ea779 3a9a495c     .K.....:y...\I.:
2402e350:	b817ad0d 3a958bf6 b820586e 3a908936     .......:nX .6..:
2402e360:	b828a5b0 3a8b4405 b830911b 3a85bf7b     ..(..D.:..0.{..:
2402e370:	b838172f 3a7ffd84 b83f349d 3a740a3b     /.8....:.4?.;.t:
2402e380:	b845e65f 3a67abd6 b84c299b 3a5ae93b     _.E...g:.)L.;.Z:
2402e390:	b851fbbf 3a4dc980 b8575a70 3a4053d7     ..Q...M:pZW..S@:
2402e3a0:	b85c4393 3a328f9e b860b54a 3a24844a     .C\...2:J.`.J.$:
2402e3b0:	b864adfc 3a16396b b8682c4b 3a07b6a6     ..d.k9.:K,h....:
2402e3c0:	b86b2f1c 39f20766 b86db596 39d450b4     ./k.f..9..m..P.9
2402e3d0:	b86fbf1d 39b658d2 b8714b56 39982f68     ..o..X.9VKq.h/.9
2402e3e0:	b8725a2d 3973c844 b872ebc4 39370d50     -Zr.D.s9..r.P.79
2402e3f0:	b8730088 38f49a5e b872991c 38769ba1     ..s.^..8..r...v8
2402e400:	b871b666 359ca77c b870598a b86b7450     f.q.|..5.Yp.Ptk.
2402e410:	b86e83e8 b8ecfc22 b86c371c b9318bd7     ..n."....7l...1.
2402e420:	b86974fc b96be911 b8663f9b b992bc7f     .ti...k..?f.....
2402e430:	b862993c b9af0fa6 b85e8463 b9cae032     <.b.....c.^.2...
2402e440:	b85a03c2 b9e620a8 b8551a3f ba0061f8     ..Z.. ..?.U..a..
2402e450:	b84fcaf4 ba0d5ea8 b84a192a ba1a003b     ..O..^..*.J.;...
2402e460:	b844085a ba2640c0 b83d9c1f ba321a82     Z.D..@&...=...2.
2402e470:	b836d84b ba3d8808 b82fc0cf ba488415     K.6...=.../...H.
2402e480:	b82859c6 ba5309b0 b820a767 ba5d1427     .Y(...S.g. .'.].
2402e490:	b818ae12 ba669f08 b8107240 ba6fa62c     ......f.@r..,.o.
2402e4a0:	b807f888 ba7825b5 b7fe8b2e ba800d07     .....%x.........
2402e4b0:	b7ecbc65 ba83bffa b7da8e6e ba872a34     e.......n...4*..
2402e4c0:	b7c80b21 ba8a4a60 b7b53c6d ba8d1f52     !...`J..m<..R...
2402e4d0:	b7a22c61 ba8fa7fe b78ee51e ba91e398     a,..............
2402e4e0:	b776e19a ba93d159 b74fb35a ba9570c0     ..v.Y...Z.O..p..
2402e4f0:	b72853ec ba96c167 b700d7bd ba97c31a     .S(.g...........
2402e500:	b6b2a657 ba9875be b6476a08 ba98d96f     W....u...jG.o...
2402e510:	b5281e8c ba98ee79 35e5154e ba98b532     ..(.y...N..52...
2402e520:	3686fee8 ba982e35 36d401ec ba975a2d     ...65......6-Z..
2402e530:	371013f9 ba963a0b 3735a59c ba94cec0     ...7.:....57....
2402e540:	375aa35f ba931978 377efb16 ba911b82     _.Z7x.....~7....
2402e550:	37914d93 ba8ed647 37a2b92b ba8c4b64     .M.7G...+..7dK..
2402e560:	37b3b7ed ba897c85 37c441cc ba866b7b     ...7.|...A.7{k..
2402e570:	37d44ef1 ba831a40 37e3d7de ba7f15c7     .N.7@......7....
2402e580:	37f2d55b ba777f1c 3800a03d ba6f7518     [..7..w.=..8.uo.
2402e590:	3807895b ba66fc83 380e22ec ba5e1a54     [..8..f..".8T.^.
2402e5a0:	381469fd ba54d3b5 381a5bd3 ba4b2df7     .i.8..T..[.8.-K.
2402e5b0:	381ff5da ba412e9a 382535b4 ba36db3f     ...8..A..5%8?.6.
2402e5c0:	382a1934 ba2c39aa 382e9e60 ba214fc5     4.*8.9,.`..8.O!.
2402e5d0:	3832c36d ba16238e 383686c6 ba0abb22     m.28.#....68"...
2402e5e0:	3839e713 b9fe3962 383ce320 b9e69cfc     ..98b9.. .<8....
2402e5f0:	383f79fd b9ceadbe 3841aae9 b9b6785f     .y?8......A8_x..
2402e600:	38437559 b99e09b5 3844d8f5 b9856e96     YuC8......D8.n..
2402e610:	3845d5a2 b95967c5 38466b71 b927ccec     ..E8.gY.qkF8..'.
2402e620:	38469aad b8ec4c78 384663d4 b8891a93     ..F8xL...cF8....
2402e630:	3845c799 b798db1a 3844c6de 37f0b2a1     ..E8......D8...7
2402e640:	384362bd 389dde07 38419c7e 38feac43     .bC8...8~.A8C..8
2402e650:	383f7599 392f338a 383cefb6 395e6f74     .u?8.3/9..<8to^9
2402e660:	383a0cad 39867951 3836ce86 399d5321     ..:8Qy.9..68!S.9
2402e670:	3833376c 39b3ba0d 382f49bb 39c9a347     l738...9.I/8G..9
2402e680:	382b07f8 39df0447 382674cc 39f3d2de     ..+8G..9.t&8...9
2402e690:	3821930c 3a0402a1 381c65aa 3a0dc8fa     ..!8...:.e.8...:
2402e6a0:	3816efc2 3a1737f7 38113489 3a204b3f     ...8.7.:.4.8?K :
2402e6b0:	380b3759 3a28feb5 3804fba6 3a314e70     Y7.8..(:...8pN1:
2402e6c0:	37fd0a02 3a3936bf 37efae24 3a40b430     ...7.69:$..70.@:
2402e6d0:	37e1eb31 3a47c38a 37d3c8db 3a4e61d1     1..7..G:...7.aN:
2402e6e0:	37c54ee6 3a548c48 37b68550 3a5a4072     .N.7H.T:P..7r@Z:
2402e6f0:	37a7741d 3a5f7c14 3798237e 3a643d2f     .t.7.|_:~#.7/=d:
2402e700:	37889baf 3a68820d 3771c9f4 3a6c4935     ...7..h:..q75Il:
2402e710:	37520f65 3a6f9173 3732188a 3a7259d4     e.R7s.o:..27.Yr:
2402e720:	3711f623 3a74a1ad 36e371dc 3a766891     #..7..t:.q.6.hv:
2402e730:	36a2e355 3a77ae57 3644c3fa 3a78731b     U..6W.w:..D6.sx:
2402e740:	35883baf 3a78b73a b56fa87f 3a787b50     .;.5:.x:..o.P{x:
2402e750:	b63b1304 3a77c03b b69c8e5e 3a76871f     ..;.;.w:^.....v:
2402e760:	b6dae40f 3a74d156 b70c35c8 3a72a080     ....V.t:.5....r:
2402e770:	b72a8337 3a6ff673 b7484b6d 3a6cd545     7.*.s.o:mKH.E.l:
2402e780:	b7657fe3 3a693f46 b7810932 3a6536fc     ..e.F?i:2....6e:
2402e790:	b78efa9d 3a60bf27 b79c8d8b 3a5bdaba     ....'.`:......[:
2402e7a0:	b7a9bb8a 3a568cde b7b67e66 3a50d8ec     ......V:f~....P:
2402e7b0:	b7c2d032 3a4ac269 b7ceab41 3a444d10     2...i.J:A....MD:
2402e7c0:	b7da0a26 3a3d7cbe b7e4e7c8 3a365581     &....|=:.....U6:
2402e7d0:	b7ef3f49 3a2edb86 b7f90c26 3a271325     I?.....:&...%.':
2402e7e0:	b8012512 3a1f00d4 b8057aa7 3a16a929     .%.....:.z..)..:
2402e7f0:	b8098508 3a0e10da b80d4293 3a053caf     .......:.B...<.:
2402e800:	b810b1cc 39f86327 b813d161 39e5e8f8     ....'c.9a......9
2402e810:	b816a035 39d314f5 b8191d4a 39bff149     5......9J...I..9
2402e820:	b81b47d5 39ac8851 b81d1f32 3998e46a     .G..Q..92...j..9
2402e830:	b81ea2ef 3985100b b81fd2c0 39622b68     .......9....h+b9
2402e840:	b820ae86 3939ffc7 b8213652 3911b232     .. ...99R6!.2..9
2402e850:	b8216a58 38d2af2e b8214afd 388209b6     Xj!....8.J!....8
2402e860:	b820d8d1 37c67531 b820148a b77367c6     .. .1u.7.. ..gs.
2402e870:	b81eff0a b85bd8fc b81d9958 b8bcb92a     ......[.X...*...
2402e880:	b81be4a7 b90555be b819e252 b92bce51     .....U..R...Q.+.
2402e890:	b81793d4 b951b348 b814fad1 b976f1f9     ....H.Q.......v.
2402e8a0:	b8121912 b98dbc20 b80ef07d b99f9a2f     .... ...}.../...
2402e8b0:	b80b8325 b9b10a93 b807d32f b9c204fa     %......./.......
2402e8c0:	b803e2ee b9d28158 b7ff698d b9e277f0     ....X....i...w..
2402e8d0:	b7f6967c b9f1e159 b7ed51ec ba005b3b     |...Y....Q..;[..
2402e8e0:	b7e3a152 ba077847 b7d98a4f ba0e4499     R...Gx..O....D..
2402e8f0:	b7cf12ad ba14bd2e b7c44072 ba1adf31     ........r@..1...
2402e900:	b7b919b5 ba20a7ff b7ada4b2 ba261525     ...... .....%.&.
2402e910:	b7a1e7d5 ba2b2464 b795e98d ba2fd3b0     ....d$+......./.
2402e920:	b789b074 ba342133 b77a8657 ba380b4d     t...3!4.W.z.M.8.
2402e930:	b76150f0 ba3b9091 b747ce24 ba3eafc9     .Pa...;.$.G...>.
2402e940:	b72e0ba6 ba4167f8 b714171d ba43b855     .....gA.....U.C.
2402e950:	b6f3fc6a ba45a04c b6bf9d3e ba471f88     j...L.E.>.....G.
2402e960:	b68b2c06 ba4835df b62d87d8 ba48e367     .,...5H...-.g.H.
2402e970:	b589ffb9 ba492867 350c298f ba49055e     ....g(I..).5^.I.
2402e980:	360a61f0 ba487afb 3670d283 ba478a29     .a.6.zH...p6).G.
2402e990:	36ab144e ba463400 36dd18ce ba4479ce     N..6.4F....6.yD.
2402e9a0:	37072ef7 ba425d12 371f65b2 ba3fdf7b     ...7.]B..e.7{.?.
2402e9b0:	373724b9 ba3d02e8 374e6086 ba39c967     .$77..=..`N7g.9.
2402e9c0:	37650de6 ba36352f 377b21f3 ba3248a7     ..e7/56..!{7.H2.
2402e9d0:	37884918 ba2e065e 3792aa4e ba29710d     .I.7^...N..7.q).
2402e9e0:	379cafb5 ba248b8e 37a654bc ba1f58e8     ...7..$..T.7.X..
2402e9f0:	37af94f0 ba19dc41 37b86c2c ba1418df     ...7A...,l.7....
2402ea00:	37c0d67c ba0e122c 37c8d034 ba07cbab     |..7,...4..7....
2402ea10:	37d055da ba0148fc 37d76446 b9f51bb3     .U.7.H..Fd.7....
2402ea20:	37ddf886 b9e73c2a 37e40ff6 b9d8fb29     ...7*<.....7)...
2402ea30:	37e9a829 b9ca60a9 37eebeff b9bb74b7     )..7.`.....7.t..
2402ea40:	37f352a4 b9ac3f8f 37f76187 b99cc976     .R.7.?...a.7v...
2402ea50:	37faea54 b98d1acf 37fdec08 b97a7821     T..7.......7!xz.
2402ea60:	380032f6 b95a6b60 38012bc5 b93a2073     .2.8`kZ..+.8s :.
2402ea70:	3801e054 b919a858 380250b8 b8f22860     T..8X....P.8`(..
2402ea80:	38027d1b b8b0e9cd 380265ce b85f6dcc     .}.8.....e.8.m_.
2402ea90:	38020b4a b7bac4fe 38016e26 37102e93     J..8....&n.8...7
2402eaa0:	38008f17 38249abb 37feddf2 389204db     ...8..$8...7...8
2402eab0:	37fc1d8c 38d10c3e 37f8df34 3907a205     ...7>..84..7...9
2402eac0:	37f5254f 392646b2 37f0f295 394464ff     O%.7.F&9...7.dD9
2402ead0:	37ec49e9 3961ee42 37e72e70 397ed40b     .I.7B.a9p..7..~9
2402eae0:	37e1a37d 398d843d 37dbac9b 399b3f09     }..7=..9...7.?.9
2402eaf0:	37d54d8c 39a893df 37ce8a3a 39b57c83     .M.7...9:..7.|.9
2402eb00:	37c766c8 39c1f2f0 37bfe778 39cdf168     .f.7...9x..7h..9
2402eb10:	37b810bb 39d97274 37afe725 39e470e8     ...7tr.9%..7.p.9
2402eb20:	37a76f79 39eee7dd 379eae93 39f8d2c8     yo.7...9...7...9
2402eb30:	3795a962 3a0116ae 378c650a 3a0579d7     b..7...:.e.7.y.:
2402eb40:	3782e6b0 3a09910c 3772673c 3a0d5aaa     ...7...:<gr7.Z.:
2402eb50:	375ea258 3a10d533 374a897d 3a13ff58     X.^73..:}.J7X..:
2402eb60:	3736279f 3a16d7f7 372187ba 3a195e16     .'67...:..!7.^.:
2402eb70:	370cb4e1 3a1b90e9 36ef7455 3a1d6fd2     ...7...:Ut.6.o.:
2402eb80:	36c54569 3a1efa5d 369af32f 3a203043     iE.6]..:/..6C0 :
2402eb90:	36612798 3a21116b 360c7a8d 3a219de5     .'a6k.!:.z.6..!:
2402eba0:	35602c11 3a21d5f0 b4dfdd41 3a21b9f4     .,`5..!:A.....!:
2402ebb0:	b5dedd25 3a214a87 b6422367 3a208863     %....J!:g#B.c. :
2402ebc0:	b689f83b 3a1f7473 b6b25663 3a1e0fc6     ;...st.:cV.....:
2402ebd0:	b6da1818 3a1c5b96 b70094da 3a1a5942     .....[.:....BY.:
2402ebe0:	b713bc08 3a180a53 b7267840 3a157071     ....S..:@x&.qp.:
2402ebf0:	b738c07b 3a128d6f b74a8be5 3a0f633f     {.8.o..:..J.?c.:
2402ec00:	b75bd21f 3a0bf3f7 b76c8b00 3a0841cb     ..[....:..l..A.:
2402ec10:	b77caeb8 3a044f11 b7861ae6 3a001e39     ..|..O.:....9..:
2402ec20:	b78d8c99 39f763a8 b794a91b 39ee1917     .....c.9.......9
2402ec30:	b79b6d44 39e46243 b7a1d612 39da44e1     Dm..Cb.9.....D.9
2402ec40:	b7a7e0d1 39cfc6d2 b7ad8aed 39c4ee23     .......9....#..9
2402ec50:	b7b2d20f 39b9c105 b7b7b417 39ae45c2     .......9.....E.9
2402ec60:	b7bc2f20 39a282d0 b7c04173 39967ebb      /.....9sA...~.9
2402ec70:	b7c3e99f 398a4021 b7c7266c 397b9b70     ....!@.9l&..p.{9
2402ec80:	b7c9f6cb 39625c96 b7cc59f8 3948d156     .....\b9.Y..V.H9
2402ec90:	b7ce4f62 392f076f b7cfd6b8 39150c99     bO..o./9.......9
2402eca0:	b7d0efd9 38f5dd30 b7d19ae5 38c1767e     ....0..8....~v.8
2402ecb0:	b7d1d82f 388d0072 b7d1a846 38312cc1     /...r..8F....,18
2402ecc0:	b7d10bf5 37914d8d b7d0043a b6fadab6     .....M.7:.......
2402ecd0:	b7ce9242 b806a47a b7ccb783 b86d0039     B...z.......9.m.
2402ece0:	b7ca758a b8a91d80 b7c7ce3a b8db110d     .u......:.......
2402ecf0:	b7c4c387 b90620fa b7c157a7 b91e4bee     ..... ...W...K..
2402ed00:	b7bd8d03 b935fd8d b7b96623 b94d2a53     ......5.#f..S*M.
2402ed10:	b7b4e5c7 b963c707 b7b00ecf b979c8e5     ......c.......y.
2402ed20:	b7aae452 b98792b8 b7a5697a b991e94e     R.......zi..N...
2402ed30:	b79fa1ab b99be36a b799905a b9a57c6e     ....j...Z...n|..
2402ed40:	b7933927 b9aeb001 b78c9fcb b9b779fe     '9...........y..
2402ed50:	b785c81d b9bfd67f b77d6c2b b9c7c1e1     ........+l}.....
2402ed60:	b76edb68 b9cf38bd b75fe645 b9d637ed     h.n..8..E._..7..
2402ed70:	b7509523 b9dcbc97 b740f08e b9e2c41b     #.P.......@.....
2402ed80:	b7310127 b9e84c25 b720cfaf b9ed52a2     '.1.%L.... ..R..
2402ed90:	b71064fe b9f1d5cb b6ff93f1 b9f5d41a     .d..............
2402eda0:	b6de0f1d b9f94c57 b6bc4d6a b9fc3d8b     ....WL..jM...=..
2402edb0:	b69a60c9 b9fea711 b670b640 ba00443d     .`......@.p.=D..
2402edc0:	b62c9c95 ba00f0db b5d13020 ba015972     ..,..... 0..rY..
2402edd0:	b5132fa9 ba017e3e 34f52788 ba015f9a     ./..>~...'.4._..
2402ede0:	35c33007 ba00fe01 3623eb46 ba005a17     .0.5....F.#6.Z..
2402edf0:	36657d3a b9fee932 36931681 b9fc9cd7     :}e62......6....
2402ee00:	36b2ed2f b9f9d123 36d232ea b9f68858     /..6#....2.6X...
2402ee10:	36f0d858 b9f2c4f8 37076745 b9ee89bd     X..6....Eg.7....
2402ee20:	37160383 b9e9d9a1 372439e4 b9e4b7d0     ...7.....9$7....
2402ee30:	373203aa b9df27b2 373f5a56 b9d92ce0     ..27.'..VZ?7.,..
2402ee40:	374c37b7 b9d2cb23 375895d6 b9cc0674     .7L7#.....X7t...
2402ee50:	37646f1d b9c4e2fc 376fbe2e b9bd650a     .od7......o7.e..
2402ee60:	377a7e0d b9b5911a 37825501 b9ad6bca     .~z7.....U.7.k..
2402ee70:	37871ee5 b9a4f9dd 378b9a9e b99c4033     ...7.......73@..
2402ee80:	378fc663 b99343cd 3793a089 b98a09c2     c..7.C.....7....
2402ee90:	3797278d b9809749 379a5a26 b96de34f     .'.7I...&Z.7O.m.
2402eea0:	379d3732 b95a3c6d 379fbdbd b94644b0     27.7m<Z....7.DF.
2402eeb0:	37a1ed01 b9320714 37a3c471 b91d8e85     ...7..2.q..7....
2402eec0:	37a5439e b908e613 37a66a57 b8e8318b     .C.7....Wj.7.1..
2402eed0:	37a7388a b8be636a 37a7ae6a b89477ce     .8.7jc..j..7.w..
2402eee0:	37a7cc3f b855097c 37a79290 b8014034     ?..7|.U....74@..
2402eef0:	37a70204 b736fcc7 37a61b7c 37153a30     ...7..6.|..70:.7
2402ef00:	37a4dff4 37ef7d0c 37a350a1 384966d7     ...7.}.7.P.7.fI8
2402ef10:	37a16edd 388d0f22 379f3c28 38b4de2b     .n.7"..8(<.7+..8
2402ef20:	379cba2b 38dc0cbd 3799eab8 390143b4     +..7...8...7.C.9
2402ef30:	3796cfc8 39141daa 37936b6d 39268b18     ...7...9mk.7..&9
2402ef40:	378fbff2 39388315 378bcfa9 3949fd0b     ...7..89...7..I9
2402ef50:	37879d14 395af0ae 37832ad4 396b560b     ...7..Z9.*.7.Vk9
2402ef60:	377cf742 397b257c 377324a4 39852be5     B.|7|%{9.$s7.+.9
2402ef70:	3768e3a5 398c72ff 375e3a52 399364d5     ..h7.r.9R:^7.d.9
2402ef80:	37532ef2 3999fe4c 3747c7ea 39a03c89     ..S7L..9..G7.<.9
2402ef90:	373c0bb6 39a61ce7 3730010b 39ab9cf0     ..<7...9..07...9
2402efa0:	3723aeae 39b0ba65 37171b89 39b57341     ..#7e..9...7As.9
2402efb0:	370a4e91 39b9c5b7 36fa9dae 39bdb02d     .N.7...9...6-..9
2402efc0:	36e046eb 39c13149 36c5a728 39c447e5     .F.6I1.9(..6.G.9
2402efd0:	36aaccc0 39c6f317 368fc61e 39c93230     ...6...9...602.9
2402efe0:	36694340 39cb04b7 3632db4a 39cc6a6f     @Ci6...9J.26oj.9
2402eff0:	35f8e1ea 39cd6350 358c414f 39cdef92     ...5Pc.9OA.5...9
2402f000:	348034a4 39ce0f9f b5170581 39cdc41c     .4.4...9.......9
2402f010:	b5b63755 39cd0de5 b60fed26 39cbee0a     U7.....9&......9
2402f020:	b6441b1e 39ca65d4 b6778b67 39c876bd     ..D..e.9g.w..v.9
2402f030:	b695122d 39c62273 b6ade67a 39c36ada     -...s".9z....j.9
2402f040:	b6c6366b 39c05201 b6ddf629 39bcda27     k6...R.9)...'..9
2402f050:	b6f51a3c 39b905bf b705cbc7 39b4d75f     <......9...._..9
2402f060:	b710b1bc 39b051d3 b71b39df 39ab7804     .....Q.9.9...x.9
2402f070:	b7255f4a 39a64d0b b72f1d53 39a0d41f     J_%..M.9S./....9
2402f080:	b7386f9b 399b10a3 b74151e1 39950613     .o8....9.QA....9
2402f090:	b749c050 398eb811 b751b738 39882a58     P.I....98.Q.X*.9
2402f0a0:	b759333f 398160bc b7603138 3974be64     ?3Y..`.981`.d.t9
2402f0b0:	b766ae57 39665383 b76ca814 395788fd     W.f..Sf9..l...W9
2402f0c0:	b7721c28 39486740 b777089a 3938f6b3     (.r.@gH9..w...89
2402f0d0:	b77b6bb1 39293ffb b77f440e 39194bb5     .k{..?)9.D...K.9
2402f0e0:	b781484f 390922b0 b782a843 38f19b4a     OH...".9C...J..8
2402f0f0:	b783c1a0 38d0aae2 b7849450 38af85ce     .......8P......8
2402f100:	b785205a 388e3db7 b78565e3 3859c87d     Z ...=.8.e..}.Y8
2402f110:	b7856543 381715db b7851ef4 37a90cc2     Ce.....8.......7
2402f120:	b784938a 3691e4e6 b783c3c0 b73e9511     .......6......>.
2402f130:	b782b07c b7e1fb05 b7815ac2 b831aae3     |........Z....1.
2402f140:	b77f8751 b8718cb7 b77bd8f5 b898417a     Q.....q...{.zA..
2402f150:	b777ad2f b8b73720 b773070d b8d597fb     /.w. 7....s.....
2402f160:	b76de9bb b8f3553d b76858bf b9083028     ..m.=U...Xh.(0..
2402f170:	b76257bf b91655a5 b75bea8f b924144c     .Wb..U....[.L.$.
2402f180:	b7551559 b93165a4 b74ddc5e b93e4366     Y.U..e1.^.M.fC>.
2402f190:	b74643fe b94aa7a9 b73e50dd b9568cb6     .CF...J..P>...V.
2402f1a0:	b73607c0 b961ed2f b72d6d8d b96cc40e     ..6./.a..m-...l.
2402f1b0:	b724874f b9770c7e b71b5a31 b9806110     O.$.~.w.1Z...a..
2402f1c0:	b711eb76 b984f06c b7084080 b9893272     v...l....@..r2..
2402f1d0:	b6fcbd89 b98d2566 b6e8979b b990c7c5     ....f%..........
2402f1e0:	b6d41a6b b9941830 b6bf514a b9971575     k...0...JQ..u...
2402f1f0:	b6aa479b b999be92 b69508d5 b99c12b6     .G..............
2402f200:	b67f40da b99e1139 b65433d0 b99fb99e     .@..9....3T.....
2402f210:	b6290179 b9a10ba2 b5fb817a b9a20725     y.).....z...%...
2402f220:	b5a510bd b9a2ac34 b51dbbd5 b9a2fb12     ....4...........
2402f230:	335d4690 b9a2f429 353836bf b9a2980f     .F]3)....685....
2402f240:	35b089f3 b9a1e782 36020577 b9a0e37a     ...5....w..6z...
2402f250:	362b3a0f b99f8d05 3653ce1b b99de566     .:+6......S6f...
2402f260:	367bad5f b99bee0f 36916213 b999a885     _.{6.....b.6....
2402f270:	36a47fa8 b9971688 36b7261d b99439ee     ...6.....&.6.9..
2402f280:	36c94c7a b99114bb 36daea13 b98da914     zL.6.......6....
2402f290:	36ebf693 b989f938 36fc6a02 b9860791     ...68....j.6....
2402f2a0:	37061e63 b981d69e 370db3cf b97ad201     c..7.......7..z.
2402f2b0:	3714f1df b97182e3 371bd557 b967c58d     ...7..q.W..7..g.
2402f2c0:	37225b37 b95d9fd9 372880b8 b95317d1     7["7..]...(7..S.
2402f2d0:	372e4339 b948339a 3733a069 b93cf992     9C.7.3H.i.37..<.
2402f2e0:	37389617 b9317031 373d2274 b9259e0a     ..871p1.t"=7..%.
2402f2f0:	374143b4 b91989d3 3744f876 b90d3a48     .CA7....v.D7H:..
2402f300:	37483f87 b900b651 374b17d3 b8e809a7     .?H7Q.....K7....
2402f310:	374d80b6 b8ce5990 374f7996 b8b46a5e     ..M7.Y...yO7^j..
2402f320:	37510230 b89a4a18 37521a85 b88006c8     0.Q7.J....R7....
2402f330:	3752c2ab b84b5ce6 3752fb1b b8169e1d     ..R7.\K...R7....
2402f340:	3752c479 b7c3d9fd 37521fa1 b7359458     y.R7......R7X.5.
2402f350:	37510d9d 35dbca10 374f8fbf 376b0903     ..Q7...5..O7..k7
2402f360:	374da78a 37dc5846 374b56b4 382101d0     ..M7FX.7.VK7..!8
2402f370:	37489f38 3853299e 3745831b 38824532     8.H7.)S8..E72E.8
2402f380:	374204c3 389a85cb 373e26a5 38b24a9f     ..B7...8.&>7.J.8
2402f390:	3739eb69 38c9880d 373555fb 38e032c7     i.97...8.U57.2.8
2402f3a0:	37306953 38f63ff9 372b28a8 3905d283     Si07.?.8.(+7...9
2402f3b0:	37259743 39102bf8 371fb8a6 391a2787     C.%7.+.9...7.'.9
2402f3c0:	37199068 3923c08c 3713224a 392cf2b2     h..7..#9J".7..,9
2402f3d0:	370c7223 3935b9d3 370583ec 393e120f     #r.7..59...7..>9
2402f3e0:	36fcb76b 3945f7c8 36edfb4e 394d67a9     k..6..E9N..6.gM9
2402f3f0:	36dedbfe 39545e87 36cf621e 395ad998     ...6.^T9.b.6..Z9
2402f400:	36bf966a 3960d648 36af81c4 3966525c     j..6H.`9...6\Rf9
2402f410:	369f2d21 396b4bc3 368ea185 396fc0cd     !-.6.Kk9...6..o9
2402f420:	367bd00f 3973b00d 365a1388 3977185c     ..{6..s9..Z6\.w9
2402f430:	36381fb8 3979f8dd 361606da 397c50f4     ..86..y9...6.P|9
2402f440:	35e7b64f 397e2061 35a35d70 397f671f     O..5a ~9p].5.g.9
2402f450:	353e4e41 398012b5 3459b80f 39802ded     AN>5...9..Y4.-.9
2402f460:	b4a13e75 3980059f b55693cf 397f34a7     u>.....9..V..4.9
2402f470:	b5ad958d 397dd97c b5ef10d8 397bfb59     ....|.}9....Y.{9
2402f480:	b617cd5d 39799c26 b637896a 3976be01     ]...&.y9j.7...v9
2402f490:	b656acce 3973634e b6752831 396f8ea8     ..V.Ncs91(u...o9
2402f4a0:	b6897653 396b42f5 b697f5e2 3966834b     Sv...Bk9....K.f9
2402f4b0:	b6a60bca 396152ea b6b3b15e 395bb563     .....Ra9^...c.[9
2402f4c0:	b6c0e031 3955ae5e b6cd921d 394f41cc     1...^.U9.....AO9
2402f4d0:	b6d9c153 394873c2 b6e56846 3941487e     S....sH9Fh..~HA9
2402f4e0:	b6f081c8 3939c474 b6fb08f1 3931ec28     ....t.99....(.19
2402f4f0:	b7027c9f 3929c45f b7072739 392151f0     .|.._.)99'...Q!9
2402f500:	b70b825c 391899ca b70f8c46 390fa107     \......9F......9
2402f510:	b7134367 39066ccf b716a659 38fa04c9     gC...l.9Y......8
2402f520:	b719b3ea 38e6ce4b b71c6b12 38d340f1     ....K..8.k...@.8
2402f530:	b71ecafc 38bf6790 b720d300 38ab4d30     .....g.8.. .0M.8
2402f540:	b72282a8 3896fcda b723d9ab 388281a6     .."....8..#....8
2402f550:	b724d7f2 385bcd50 b7257d93 38326de9     ..$.P.[8.}%..m28
2402f560:	b725cad3 3808fb35 b725c026 37bf1659     ..%.5..8&.%.Y..7
2402f570:	b7255e2b 3758ce88 b724a5b5 3650a33c     +^%...X7..$.<.P6
2402f580:	b72397b9 b6deddd2 b7223560 b788d225     ..#.....`5".%...
2402f590:	b7207ffa b7d91222 b71e7901 b8142752     .. ."....y..R'..
2402f5a0:	b71c2216 b83b2fd7 b7197d06 b8618f19     .".../;..}....a.
2402f5b0:	b7168bbf b8839904 b7135056 b896030f     ........VP......
2402f5c0:	b70fcd04 b8a7fcb0 b70c0424 b8b97d34     ........$...4}..
2402f5d0:	b707f82f b8ca7c39 b703abc3 b8daf1b3     /...9|..........
2402f5e0:	b6fe432a b8ead5e4 b6f4b8f4 b8fa2174     *C..........t!..
2402f5f0:	b6eabec1 b90466ad b6e05a9b b90b6984     .....f...Z...i..
2402f600:	b6d592bc b912161b b6ca6d8a b9186986     .........m...i..
2402f610:	b6bef18e b91e6115 b6b32577 b923fa42     .....a..w%..B.#.
2402f620:	b6a7100a b92932bf b69ab832 b92e0880     .....2).2.......
2402f630:	b68e24ec b93279a6 b6815d44 b9368493     .$...y2.D]....6.
2402f640:	b668d0b6 b93a27d4 b64e9ab8 b93d6243     ..h..':...N.Cb=.
2402f650:	b63426f2 b94032da b61983d4 b94298ec     .&4..2@.......B.
2402f660:	b5fd7f7a b94493eb b5c7d232 b9462390     z.....D.2....#F.
2402f670:	b5921c6c b94747c8 b538f556 b94800bc     l....GG.V.8...H.
2402f680:	b49c2483 b9484ed3 33e1c3fe b9483295     .$...NH....3.2H.
2402f690:	3505b3c5 b947ace0 356e2931 b946beb8     ...5..G.1)n5..F.
2402f6a0:	35aab1af b945695a 35dd96e6 b943ae2a     ...5ZiE....5*.C.
2402f6b0:	3607d54f b9418ed3 362069eb b93f0d2f     O..6..A..i 6/.?.
2402f6c0:	36387d0f b93c2b3a 365002ee b938eb2f     .}86:+<...P6/.8.
2402f6d0:	3666f009 b9354f6b 367d395a b9315a87     ..f6kO5.Z9}6.Z1.
2402f6e0:	36896a1a b92d0f34 3693db30 b928705f     .j.64.-.0..6_p(.
2402f6f0:	369deb0f b9238102 36a79512 b91e445c     ...6..#....6\D..
2402f700:	36b0d4d4 b918bdb4 36b9a62b b912f081     ...6....+..6....
2402f710:	36c20533 b90ce05b 36c9ee4e b90690ea     3..6[...N..6....
2402f720:	36d15e1e b90005f5 36d8518c b8f286d0     .^.6.....Q.6....
2402f730:	36dec5c9 b8e49a79 36e4b854 b8d64ef2     ...6y...T..6.N..
2402f740:	36ea26ed b8c7ac83 36ef0fa2 b8b8bb88     .&.6.......6....
2402f750:	36f370cb b8a9847c 36f7490d b89a0feb     .p.6|....I.6....
2402f760:	36fa9753 b88a6675 36fd5ad8 b8752190     S..6uf...Z.6.!u.
2402f770:	36ff931e b8552f2c 37009ffb b835072e     ...6,/U....7..5.
2402f780:	370130bd b814bafe 37017c06 b7e8b7fc     .0.7.....|.7....
2402f790:	3701822c b7a7f6e5 370143aa b74eaa18     ,..7.....C.7..N.
2402f7a0:	3700c11c b69bd202 36fff68a 3648490b     ...7.......6.IH6
2402f7b0:	36fde60b 37310546 36fb52ca 37975755     ...6F.17.R.6UW.7
2402f7c0:	36f83f0f 37d5671b 36f4ad68 3809493c     .?.6.g.7h..6<I.8
2402f7d0:	36f0a09f 38275d4e 36ec1bb8 3844e0c7     ...6N]'8...6..D8
2402f7e0:	36e721f6 3861c505 36e1b6d1 387dfbde     .!.6..a8...6..}8
2402f7f0:	36dbddf5 388cbbcf 36d59b4b 389a1583     ...6...8K..6...8
2402f800:	36cef2e0 38a704b2 36c7e8fc 38b38341     ...6...8...6A..8
2402f810:	36c0820b 38bf8b62 36b8c2a7 38cb178c     ...6b..8...6...8
2402f820:	36b0af8c 38d6227e 36a84d9e 38e0a762     ...6~".8.M.6b..8
2402f830:	369fa1e2 38eaa17e 3696b179 38f40c95     ...6~..8y..6...8
2402f840:	368d81a0 38fce4ac 368417b0 39029316     ...6...8...6...9
2402f850:	3674f21c 390666e0 36615676 3909ec3a     ..t6.f.9vVa6:..9
2402f860:	364d6786 390d21d4 3639307c 3910069a     .gM6.!.9|096...9
2402f870:	3624bc98 39129988 3610172c 3914d9e4     ..$6...9,..6...9
2402f880:	35f69716 3916c716 35ccca17 391860aa     ...5...9...5.`.9
2402f890:	35a2ddf6 3919a662 3571d26a 391a9838     ...5b..9j.q58..9
2402f8a0:	351e046a 391b3638 3494fc93 391b80bd     j..586.9...4...9
2402f8b0:	b30940e5 391b7826 b4b60e83 391b1d1f     .@..&x.9.......9
2402f8c0:	b52cb096 391a7070 b57d6613 39197308     ..,.pp.9.f}..s.9
2402f8d0:	b5a67f41 3918260a b5cda8cf 39168ab7     A....&.9.......9
2402f8e0:	b5f41c04 3914a27c b60ce2da 39126ef5     ....|..9.....n.9
2402f8f0:	b61f49ac 390ff1cd b6313971 390d2cea     .I.....9q91..,.9
2402f900:	b642a975 390a2244 b6539165 3906d3ff     u.B.D".9e.S....9
2402f910:	b663e935 39034456 b673a93c 38feeb66     5.c.VD.9<.s.f..8
2402f920:	b6816519 38f6d510 b688a295 38ee4aec     .e.....8.....J.8
2402f930:	b68f89d3 38e5524c b69617c4 38dbf0d2     ....LR.8.......8
2402f940:	b69c498e 38d22c3d b6a21c91 38c80a6e     .I..=,.8....n..8
2402f950:	b6a78e61 38bd9189 b6ac9ccc 38b2c7bc     a......8.......8
2402f960:	b6b145d6 38a7b35e b6b587c1 389c5ae2     .E..^..8.....Z.8
2402f970:	b6b96109 3890c4d1 b6bcd05f 3884f7cc     .a.....8_......8
2402f980:	b6bfd4b5 3871f500 b6c26d37 3859a75a     ......q87m..Z.Y8
2402f990:	b6c4994b 38411431 b6c6588e 3828491f     K...1.A8.X...I(8
2402f9a0:	b6c7aadf 380f53c1 b6c89055 37ec8371     .....S.8U...q..7
2402f9b0:	b6c9093c 37ba411e b6c91621 3787fb97     <....A.7!......7
2402f9c0:	b6c8b7c7 372b9b4a b6c7ef24 368f4775     ....J.+7$...uG.6
2402f9d0:	b6c6bd6b b5ddd7d6 b6c52403 b6fc99fb     k........$......
2402f9e0:	b6c32489 b75fdf45 b6c0c0cb b7a01fd5     .$..E._.........
2402f9f0:	b6bdfac9 b7cf9e85 b6bad4b9 b7fe53b6     .............S..
2402fa00:	b6b750f8 b81613fa b6b3721a b82c823d     .P.......r..=.,.
2402fa10:	b6af3ad6 b8426996 b6aaae16 b857bf59     .:...iB.....Y.W.
2402fa20:	b6a5cee3 b86c7936 b6a0a077 b88046a2     ....6yl.w....F..
2402fa30:	b69b2624 b889f904 b695636b b8934f3b     $&......kc..;O..
2402fa40:	b68f5be5 b89c44f9 b689134b b8a4d62f     .[...D..K.../...
2402fa50:	b6828d71 b8acff06 b6779c99 b8b4bbeb     q.........w.....
2402fa60:	b669b3ba b8bc0988 b65b6880 b8c2e4cd     ..i......h[.....
2402fa70:	b64cc34e b8c94ae6 b63dcc9b b8cf394b     N.L..J....=.K9..
2402fa80:	b62e8d03 b8d4adb1 b61f0d33 b8d9a621     ........3...!...
2402fa90:	b60f55ef b8de20c7 b5fee00b b8e21c4b     .U... ......K...
2402faa0:	b5dec8aa b8e59772 b5be776c b8e89152     ....r...lw..R...
2402fab0:	b59dfe04 b8eb0945 b57adc3a b8ecfefa     ....E...:.z.....
2402fac0:	b539b2ac b8ee7262 b4f1448b b8ef63a7     ..9.br...D...c..
2402fad0:	b45f36aa b8efd345 330a8e23 b8efc1ee     .6_.E...#..3....
2402fae0:	34913f22 b8ef30b4 3507f513 b8ee20c8     "?.4.0.....5. ..
2402faf0:	354688b3 b8ec93b6 35821d2e b8ea8b44     ..F5.......5D...
2402fb00:	35a07558 b8e80970 35be3d87 b8e5107a     Xu.5p....=.5z...
2402fb10:	35db66de b8e1a2db 35f7e2dd b8ddc34f     .f.5.......5O...
2402fb20:	3609d1d1 b8d974bc 36174dc9 b8d4ba4e     ...6.t...M.6N...
2402fb30:	36245ee9 b8cf975b 3630fef1 b8ca0f64     .^$6[.....06d...
2402fb40:	363d27f8 b8c42623 3648d457 b8bddf81     .'=6#&..W.H6....
2402fb50:	3653feba b8b73f8b 365ea21d b8b04a7a     ..S6.?....^6zJ..
2402fb60:	3668b9cb b8a904ac 36724167 b8a172a0     ..h6....gAr6.r..
2402fb70:	367b34df b89998f9 3681c841 b8917c75     .4{6....A..6u|..
2402fb80:	3685a87c b88921ee 3689399c b8808e54     |..6.!...9.6T...
2402fb90:	368c7a52 b86f8d5e 368f6977 b85da02f     Rz.6^.o.wi.6/.].
2402fba0:	36920610 b84b5f6c 36944f57 b838d581     ...6l_K.WO.6..8.
2402fbb0:	369644af b8260cec 3697e5aa b8131036     .D.6..&....66...
2402fbc0:	3699320b b7ffd3eb 369a29be b7d94979     .2.6.....).6yI..
2402fbd0:	369acce2 b7b29640 369b1bbf b78bcf51     ...6@......6Q...
2402fbe0:	369b16cc b74a1340 369abeac b6f967d3     ...6@.J....6.g..
2402fbf0:	369a142c b63ea74e 36991848 35e71284     ,..6N.>.H..6...5
2402fc00:	3697cc1e 36d190bf 369630fc 3733e0e1     ...6...6.0.6..37
2402fc10:	36944859 377e0507 369213cd 37a3877a     YH.6..~7...6z..7
2402fc20:	368f9518 37c76cc0 368cce22 37eaa048     ...6.l.7"..6H..7
2402fc30:	3689c0f0 38068842 36866faf 38175637     ...6B..8.o.67V.8
2402fc40:	3682dcab 3827b1cc 367e149a 38379315     ...6..'8..~6..78
2402fc50:	3675f637 3846f279 366d6378 3855c8b2     7.u6y.F8xcm6..U8
2402fc60:	366461dc 38640ed0 365af707 3871be40     .ad6..d8..Z6@.q8
2402fc70:	365128e0 387ed0cd 3646fd63 3885a052     .(Q6..~8c.F6R..8
2402fc80:	363c7ac3 388b8427 3631a74a 38911163     .z<6'..8J.16c..8
2402fc90:	36268971 389645ae 361b27b8 389b1eeb     q.&6.E.8.'.6...8
2402fca0:	360f88cd 389f9b32 3603b35f 38a3b8cc     ...62..8_..6...8
2402fcb0:	35ef5c81 38a77640 35d7007d 38aad240     .\.5@v.8}..5@..8
2402fcc0:	35be6079 38adcbc2 35a58a3c 38b061ec     y`.5...8<..5.a.8
2402fcd0:	358c8b8f 38b2941b 3566e46f 38b461e3     ...5...8o.f5.a.8
2402fce0:	353497e3 38b5cb13 35024cc9 38b6cfac     ..45...8.L.5...8
2402fcf0:	34a03c7c 38b76fe9 33f138b2 38b7ac36     |<.4.o.8.8.36..8
2402fd00:	b39bf124 38b7853b b4896e96 38b6fbcc     $...;..8.n.....8
2402fd10:	b4ead545 38b610f7 b5257ee6 38b4c5f9     E......8.~%....8
2402fd20:	b554db59 38b31c43 b581b3ea 38b11573     Y.T.C..8....s..8
2402fd30:	b5988668 38aeb359 b5aed9ab 38abf7f2     h...Y..8.......8
2402fd40:	b5c4a2a2 38a8e567 b5d9d69c 38a57e0d     ....g..8.....~.8
2402fd50:	b5ee6b4d 38a1c460 b6012b5e 389dbb06     Mk..`..8^+.....8
2402fd60:	b60ac7bb 389964c7 b6140639 3894c496     .....d.89......8
2402fd70:	b61ce295 388fdd81 b62558be 388ab2bb     .......8.X%....8
2402fd80:	b62d64ef 38854794 b6350396 387f3eef     .d-..G.8..5..>.8
2402fd90:	b63c3170 38737bd7 b642eb76 38674d20     p1<..{s8v.B. Mg8
2402fda0:	b6492ee1 385aba33 b64ef93e 384dca9e     ..I.3.Z8>.N...M8
2402fdb0:	b654484f 38408618 b6591a2a 3832f476     OHT...@8*.Y.v.28
2402fdc0:	b65d6d2b 38251da4 b6613fec 381709a6     +m]...%8.?a....8
2402fdd0:	b6649159 3808c08f b66760a6 37f4950b     Y.d....8.`g....7
2402fde0:	b669ad44 37d75f60 b66b76fd 37b9f080     D.i.`_.7.vk....7
2402fdf0:	b66cbdd6 379c58c7 b66d821a 377d5106     ..l..X.7..m..Q}7
2402fe00:	b66dc461 3741dfe9 b66d8589 37067e8a     a.m...A7..m..~.7
2402fe10:	b66cc6ab 369699c0 b66b892f 3583549e     ..l....6/.k..T.5
2402fe20:	b669ceb7 b6282467 b6679928 b6c7dec7     ..i.g$(.(.g.....
2402fe30:	b664eaa1 b71d2a0c b661c58c b7559b70     ..d..*....a.p.U.
2402fe40:	b65e2c80 b7869349 b65a2253 b7a1d793     .,^.I...S"Z.....
2402fe50:	b655aa1c b7bc8cd7 b650c717 b7d6a5ba     ..U.......P.....
2402fe60:	b64b7cbf b7f0154e b645cec4 b8046795     .|K.N.....E..g..
2402fe70:	b63fc0f8 b81063a3 b639575d b81bf919     ..?..c..]W9.....
2402fe80:	b632962d b827227c b62b81b7 b831da98     -.2.|"'...+...1.
2402fe90:	b6241e7d b83c1c7e b61c7118 b845e392     }.$.~.<..q....E.
2402fea0:	b6147e46 b84f2b75 b60c4ae1 b857f023     F~..u+O..J..#.W.
2402feb0:	b603dbe2 b8602de1 b5f66c95 b867e145     .....-`..l..E.g.
2402fec0:	b5e4be7a b86f073a b5d2b7d4 b8759cf8     z...:.o.......u.
2402fed0:	b5c0631d b87ba012 b5adcae1 b8808734     .c....{.....4...
2402fee0:	b59af9c8 b882f31b b587fa78 b8851305     ........x.......
2402fef0:	b569af3f b886e663 b54337e0 b8886cd4     ?.i.c....7C..l..
2402ff00:	b51ca420 b889a61c b4ec1262 b88a922e      .......b.......
2402ff10:	b49ef847 b88b3126 b424474d b88b834a     G...&1..MG$.J...
2402ff20:	b237b948 b88b8907 340c2130 b88b42f7     H.7.....0!.4.B..
2402ff30:	34911f6d b88ab1d8 34db4752 b889d691     m..4....RG.4....
2402ff40:	351230d9 b888b230 3536246b b88745e6     .0.50...k$65.E..
2402ff50:	35596bfe b885930e 357bf5ad b8839b23     .kY5......{5#...
2402ff60:	358ed813 b8815fc3 359f4554 b87dc55a     ...5._..TE.5Z.}.
2402ff70:	35af3a7e b8784b88 35beafcf b8725608     ~:.5.Kx....5.Vr.
2402ff80:	35cd9de2 b86be91a 35dbfd92 b865092d     ...5..k....5-.e.
2402ff90:	35e9c834 b85dbaec 35f6f765 b856032f     4..5..].e..5/.V.
2402ffa0:	3601c29a b84de707 3607b5f9 b8456ba7     ...6..M....6.kE.
2402ffb0:	360d5347 b83c9670 36129811 b8336cf0     GS.6p.<....6.l3.
2402ffc0:	36178233 b829f4cd 361c0faf b82033d4     3..6..)....6.3 .
2402ffd0:	36203ec3 b8162fe7 36240de4 b80bef09     .> 6./....$6....
2402ffe0:	36277bbb b801774c 362a872e b7ed9db0     .{'6Lw....*6....
2402fff0:	362d2f5a b7d7f7c8 362f7391 b7c20956     Z/-6.....s/6V...
24030000:	3631535d b7abdee9 3632ce82 b7958518     ]S16......26....
24030010:	3633e4fe b77e10f7 36349703 b750eb36     ..36..~...466.P.
24030020:	3634e4f5 b723b1f5 3634cf72 b6ecfc31     ..46..#.r.461...
24030030:	36345758 b692d085 36337da4 b5e446cd     XW46.....}36.F..
24030040:	36324397 35804068 3630aaa4 3670cad5     .C26h@.5..06..p6
24030050:	362eb45f 36cfbf9a 362c629e 3712f874     _..6...6.b,6t..7
24030060:	3629b760 373d6651 3626b4ca 3767137d     `.)6Qf=7..&6}.g7
24030070:	36235d37 3787f568 361fb328 379bebcb     7]#6h..7(..6...7
24030080:	361bb945 37af62f2 36177258 37c2513c     E..6.b.7Xr.6<Q.7
24030090:	3612e15b 37d4ad69 360e0962 37e66e95     [..6i..7b..6.n.7
240300a0:	3608eda7 37f78c49 3603917f 3803ff3c     ...6I..7...6<..8
240300b0:	35fbf0b3 380bdec4 35f04b94 38136121     ...5...8.K.5!a.8
240300c0:	35e43aea 381a82f7 35d7c631 3821412a     .:.5...81..5*A!8
240300d0:	35caf4fa 382798d0 35bdcf21 382d8749     ...5..'8!..5I.-8
240300e0:	35b05c75 38330a2c 35a2a507 38381f55     u\.5,.38...5U.88
240300f0:	3594b0da 383cc4db 35868824 3840f91c     ...5..<8$..5..@8
24030100:	35706619 3844bab6 355373a1 38480885     .fp5..D8.sS5..H8
24030110:	35364960 384ae1aa 3518f7cb 384d4589     `I65..J8...5.EM8
24030120:	34f71ea4 384f33c5 34bc40a0 3850ac47     ...4.3O8.@.4G.P8
24030130:	34817604 3851af33 340dbe00 38523cf2     .v.43.Q8...4.<R8
24030140:	32c9b669 38525628 b3b4d594 3851fbbc     i..2(VR8......Q8
24030150:	b44ce8f5 38512ed5 b49f0382 384ff0cd     ..L...Q8......O8
24030160:	b4d6c4c0 384e4343 b506cd93 384c280d     ....CCN8.....(L8
24030170:	b521b52f 3849a13a b53c0b73 3846b10a     /.!.:.I8s.<...F8
24030180:	b555c304 384359ff b56ecefc 383f9ec4     ..U..YC8..n...?8
24030190:	b5839177 383b8238 b58f5970 3837076b     w...8.;8pY..k.78
240301a0:	b59ab9c5 3832319f b5a5acf1 382d0437     .....128....7.-8
240301b0:	b5b02dcc 382782c7 b5ba377e 3821b10c     .-....'8~7....!8
240301c0:	b5c3c575 381b92e1 b5ccd366 38152c46     u......8f...F,.8
240301d0:	b5d55d55 380e815b b5dd5f9d 3807965e     U]..[..8._..^..8
240301e0:	b5e4d6e8 38006fa6 b5ebc03a 37f2234a     .....o.8:...J#.7
240301f0:	b5f218e5 37e301be b5f7de92 37d383d0     .......7.......7
24030200:	b5fd0f42 37c3b2dc b600d4a0 37b3984b     B......7....K..7
24030210:	b602d5a2 37a33d95 b6048a28 3792ac52     .....=.7(...R..7
24030220:	b605f1de 3781ee13 b6070c99 376218ff     .......7......b7
24030230:	b607da61 37402270 b6085b62 371e0b93     a...p"@7b[.....7
24030240:	b6088fef 36f7cf2f b6087892 36b392e6     ..../..6.x.....6
24030250:	b60815ec 365f0fe0 b60768da 35af4e14     ......_6.h...N.5
24030260:	b606724e b53b2d11 b605336e b633feb2     Nr...-;.n3....3.
24030270:	b603ad7f b69bd616 b601e1eb b6dcc70e     ................
24030280:	b5ffa495 b70e581a b5fb0086 b72db827     .....X......'.-.
24030290:	b5f5db6a b74c7397 b5f03918 b76a7ab8     j....sL..9...zj.
240302a0:	b5ea1db1 b783df37 b5e38dac b7921815     ....7...........
240302b0:	b5dc8d89 b79fe0ea b5d52221 b7ad330d     ........!"...3..
240302c0:	b5cd5067 b7ba0814 b5c51d9b b7c659f0     gP...........Y..
240302d0:	b5bc8f09 b7d222e0 b5b3aa38 b7dd5d84     ....."..8....]..
240302e0:	b5aa74c4 b7e804cd b5a0f482 b7f21415     .t..............
240302f0:	b5972f4a b7fb870d b58d2b20 b8022cde     J/...... +...,..
24030300:	b582ee1c b8064450 b570fccb b80a0843     ....PD....p.C...
24030310:	b55bc46a b80d7753 b5463fa1 b8109054     j.[.Sw...?F.T...
24030320:	b5307b07 b813523f b51a8343 b815bc4b     .{0.?R..C...K...
24030330:	b50464fa b817cde0 b4dc599f b8198692     .d.......Y......
24030340:	b4afceb2 b81ae630 b483423e b81becb5     ....0...>B......
24030350:	b42d9a1f b81c9a4f b3aa1f18 b81cef5f     ..-.O......._...
24030360:	313aacff b81cec73 33b44982 b81c924f     ..:1s....I.3O...
24030370:	34306f86 b81be1df 3482ce70 b81adc41     .o04....p..4A...
24030380:	34acbfd1 b81982c2 34d5f5d9 b817d6d7     ...4.......4....
24030390:	34fe5b12 b815da22 3512ed55 b8138e6b     .[.4"...U..5k...
240303a0:	3526303c b810f5ab 3538ec86 b80e11fa     <0&5......85....
240303b0:	354b18d5 b80ae595 355cac37 b80772e4     ..K5....7.\5.r..
240303c0:	356d9e19 b803bc6d 357de65c b7ff89a8     ..m5m...\.}5....
240303d0:	3586bea2 b7f71dbc 358e2dd2 b7ee3adc     ...5.....-.5.:..
240303e0:	35953d59 b7e4e708 359bea06 b7db2868     Y=.5.......5h(..
240303f0:	35a230ed b7d10558 35a80f71 b7c6845f     .0.5X...q..5_...
24030400:	35ad8323 b7bbac31 35b289ce b7b08391     #..51......5....
24030410:	35b72198 b7a51179 35bb48d3 b7995ceb     .!.5y....H.5.\..
24030420:	35befe1d b78d6d07 35c24055 b7814905     ...5.m..U@.5.I..
24030430:	35c50ea0 b769f035 35c76867 b7510322     ...55.i.gh.5".Q.
24030440:	35c94d40 b737d97f 35cabd24 b71e81da     @M.5..7.$..5....
24030450:	35cbb83e b7050ad2 35cc3ef7 b6d705e6     >..5.....>.5....
24030460:	35cc5200 b6a3f166 35cbf246 b661e9a9     .R.5f...F..5..a.
24030470:	35cb20f5 b5f8b25d 35c9df7c b4bb4b81     . .5]...|..5.K..
24030480:	35c82f72 35995c92 35c612cc 362fb7af     r/.5.\.5...5../6
24030490:	35c38b90 3688bebb 35c09c1d 36b8e5c1     ...5...6...5...6
240304a0:	35bd46ed 36e8377c 35b98ec9 370b4d98     .F.5|7.6...5.M.7
240304b0:	35b5769b 3721fc6c 35b10185 37381ca1     .v.5l.!7...5..87
240304c0:	35ac32c1 374da2f1 35a70dd9 376284ac     .2.5..M7...5..b7
240304d0:	35a19660 3776b778 359bd027 378518c0     `..5x.v7'..5...7
240304e0:	3595bf0f 378e74b2 358f672e 37976b22     ...5.t.7.g.5"k.7
240304f0:	3588ccaf 379ff7ef 3581f3df 37a8172c     ...5...7...5,..7
24030500:	3575c23c 37afc53c 356731d3 37b6fecc     <.u5<..7.1g5...7
24030510:	35583fa2 37bdc0ca 3548f4f1 37c40870     .?X5...7..H5p..7
24030520:	35395b23 37c9d34c 35297bb3 37cf1f27     #[95L..7.{)5'..7
24030530:	35196030 37d3ea29 3509123c 37d832bb     0`.5)..7<..5.2.7
24030540:	34f136f0 37dbf798 34d00b1f 37df37c4     .6.4...7...4.7.7
24030550:	34aeb450 37e1f294 348d45c1 37e427ab     P..4...7.E.4.'.7
24030560:	3457a51b 37e5d6f8 3414db5e 37e700ad     ..W4...7^..4...7
24030570:	33a4a7d6 37e7a552 32819eb6 37e7c5ba     ...3R..7...2...7
24030580:	b3458119 37e762fd b3e488e7 37e67e73     ..E..b.7....s~.7
24030590:	b4325566 37e519c7 b471709b 37e336e4     fU2....7.pq..6.7
240305a0:	b497ba33 37e0d7fe b4b61ffb 37ddff80     3......7.......7
240305b0:	b4d3d9be 37dab015 b4f0d817 37d6ecb9     .......7.......7
240305c0:	b5068614 37d2b888 b51433d5 37ce16e8     .......7.3.....7
240305d0:	b5216e79 37c90b74 b52e2f77 37c399f9     yn!.t..7w/.....7
240305e0:	b53a709c 37bdc675 b5462c0b 37b79514     .p:.u..7.,F....7
240305f0:	b5515c3e 37b10a31 b55bfc0b 37aa2a4f     >\Q.1..7..[.O*.7
24030600:	b56606a4 37a2fa1b b56f779d 379b7e5c     ..f....7.wo.\~.7
24030610:	b5784aeb 3793bc06 b5803e70 378bb81f     .Jx....7p>.....7
24030620:	b584051d 378377d1 b587780a 37760097     .....w.7.x....v7
24030630:	b58a95fa 3764addd b58d5de9 3753021b     ......d7.]....S7
24030640:	b58fcef3 37410843 b591e879 372ecb34     ....C.A7y...4..7
24030650:	b593aa12 371c55ef b5951380 3709b380     .....U.7.......7
24030660:	b59624a9 36edddd3 b596ddca 36c82660     .$.....6....`&.6
24030670:	b5973f33 36a25693 b5974970 3679086f     3?...V.6pI..o.y6
24030680:	b596fd43 362d89d2 b5965b88 35c4b812     C.....-6.[.....5
24030690:	b5956572 34bd4a87 b5941c36 b5499332     re...J.46...2.I.
240306a0:	b592815f b5f74af5 b590967a b643f0b8     _....J..z.....C.
240306b0:	b58e5d57 b6858fb2 b58bd7f6 b6a885af     W]..............
240306c0:	b589086f b6cac7cb b585f0ff b6ec440a     o............D..
240306d0:	b5829411 b7067488 b57de85f b716530e     .....t.._.}..S..
240306e0:	b5762807 b725b58e b56decaf b734945d     .(v...%...m.].4.
240306f0:	b5653c23 b742e818 b55c1c6b b750a9e2     #<e...B.k.\...P.
24030700:	b55293bc b75dd31d b548a87f b76a5da5     ..R...]...H..]j.
24030710:	b53e6143 b77643b8 b533c4c3 b780c002     Ca>..Cv...3.....
24030720:	b528d9d6 b78606d2 b51da777 b78af40f     ..(.....w.......
24030730:	b51234b7 b78f85b5 b50688c0 b793b9fb     .4..............
24030740:	b4f5559a b7978f51 b4dd4441 b79b0462     .U..Q...AD..b...
24030750:	b4c4ec1d b79e180f b4ac5bcd b7a0c982     .........[......
24030760:	b493a202 b7a31805 b4759aaa b7a5033d     ..........u.=...
24030770:	b443d8b7 b7a68af0 b4121b14 b7a7af25     ..C.........%...
24030780:	b3c0fcd4 b7a87024 b33c7c60 b7a8ce5f     ....$p..`|<._...
24030790:	30f37563 b7a8ca92 3349e05b b7a865a4     cu.0....[.I3.e..
240307a0:	33c4f2ca b7a7a0b1 3411d05d b7a67d11     ...3....]..4.}..
240307b0:	3440631d b7a4fc47 346e1880 b7a32019     .c@4G.....n4. ..
240307c0:	348d6c01 b7a0ea68 34a344f9 b79e5d56     .l.4h....D.4V]..
240307d0:	34b88bb1 b79b7b23 34cd352b b798464e     ...4#{..+5.4NF..
240307e0:	34e136d5 b794c175 34f48690 b790ef5d     .6.4u......4]...
240307f0:	35038d65 b78cd2ed 350c7533 b7886f46     e..5....3u.5Fo..
24030800:	3514f667 b783c792 351d0d01 b77dbe55     g..5.......5U.}.
24030810:	3524b541 b77372fb 352bebb3 b768b445     A.$5.rs...+5E.h.
24030820:	3532ad2b b75d8974 3538f6cb b751fa02     +.25t.]...85..Q.
24030830:	353ec5fe b7460da9 3544187e b739cc1a     ..>5..F.~.D5..9.
24030840:	3548ec52 b72d3d5c 354d3fce b720695c     R.H5\=-..?M5\i .
24030850:	35511198 b7135843 355460a1 b7061239     ..Q5CX...`T59...
24030860:	35572c2c b6f13eed 355973c6 b6d61073     ,,W5.>...sY5s...
24030870:	355b374d b6baa98a 355c76ec b69f1aab     M7[5.....v\5....
24030880:	355d331e b6837448 355d6ca3 b64f8d67     .3]5Ht...l]5g.O.
24030890:	355d2489 b6184448 355c5c2b b5c25a7b     .$]5HD..+\\5{Z..
240308a0:	355b1526 b5299fca 35595161 343ec65b     &.[5..).aQY5[.>4
240308b0:	35571307 3583624f 35545c85 35ed9091     ..W5Ob.5.\T5...5
240308c0:	3551308d 362b146b 354d9209 365e78ef     .0Q5k.+6..M5.x^6
240308d0:	35498427 36886cfb 35450a48 36a10e45     '.I5.l.6H.E5E..6
240308e0:	3540280c 36b91347 353ae142 36d06f70     .(@5G..6B.:5po.6
240308f0:	353539ef 36e716ac 352f3648 36fcfd76     .955...6H6/5v..6
24030900:	3528daab 37090c66 35222ba4 37132f20     ..(5f..7.+"5 /.7
24030910:	351b2de6 371ce1ff 3513e643 37262062     .-.5...7C..5b &7
24030920:	350c59b1 372ee601 35048d44 37372ed1     .Y.5...7D..5..77
24030930:	34f90c56 373ef735 34e8934c 37463bca     V..45.>7L..4.;F7
24030940:	34d7ba1e 374cf9a2 34c68b9e 37532e00     ...4..L7...4..S7
24030950:	34b512b2 3758d690 34a35a58 375df164     ...4..X7XZ.4d.]7
24030960:	34916d9a 37627cd0 347eaf0f 37667789     .m.4.|b7..~4.wf7
24030970:	345a465d 3769e0a9 3435b736 376cb77f     ]FZ4..i76.54..l7
24030980:	3411177b 376efbe0 33d8fa10 3770add7     {..4..n7...3..p7
24030990:	338ffae2 3771cdd1 330eb822 37725c7f     ...3..q7"..3.\r7
240309a0:	afb84db9 37725b14 b31031b8 3771cae6     .M...[r7.1....q7
240309b0:	b38e9d04 3770adab b3d41d0c 376f0569     ......p7....i.o7
240309c0:	b40c391a 376cd488 b42dbb62 376a1d9b     .9....l7b.-...j7
240309d0:	b44e8313 3766e38e b46e7e74 37632999     ..N...f7t~n..)c7
240309e0:	b486ce3f 375ef322 b495e65f 375a43ef     ?...".^7_....CZ7
240309f0:	b4a47fc3 37551ff5 b4b292ee 374f8b5e     ......U7....^.O7
24030a00:	b4c018c5 37498a95 b4cd0a90 37432240     ......I7....@"C7
24030a10:	b4d96202 373c572d b4e51933 37352e62     .b..-W<73...b.57
24030a20:	b4f02aaf 372dad12 b4fa916a 3725d886     .*....-7j.....%7
24030a30:	b5022468 371db640 b506a65d 37154bda     h$..@..7]....K.7
24030a40:	b50accbf 370c9f0e b50e95f2 3703b5af     .......7.......7
24030a50:	b5120091 36f52b4b b5150b7b 36e289dc     ....K+.6{......6
24030a60:	b517b5c4 36cf9324 b519fec1 36bc534d     ....$..6....MS.6
24030a70:	b51be601 36a8d68d b51d6b4b 36952923     .......6Kk..#).6
24030a80:	b51e8ea6 3681574e b51f5052 365ada87     ....NW.6RP....Z6
24030a90:	b51fb0ca 3632ee53 b51fb0c2 360b0224     ....S.26....$..6
24030aa0:	b51f5124 35c65bb5 b51e9313 356e2459     $Q...[.5....Y$n5
24030ab0:	b51d77e9 34a158df b51c0132 b496a985     .w...X.42.......
24030ac0:	b51a30b3 b5658574 b518085d b5bec6e6     .0..t.e.].......
24030ad0:	b5158a54 b604c60b b512b8eb b6297445     T...........Et).
24030ae0:	b50f96a0 b64d59eb b50c261f b6706376     .....YM..&..vcp.
24030af0:	b5086a3a b6893f01 b50465ec b699cbbe     :j...?...e......
24030b00:	b5001c54 b6a9cf4a b4f72164 b6b9415f     T...J...d!.._A..
24030b10:	b4ed8cd2 b6c81a2e b4e381f1 b6d6524d     ............MR..
24030b20:	b4d907f5 b6e3e2ca b4ce264a b6f0c530     ........J&..0...
24030b30:	b4c2e483 b6fcf379 b4b74a63 b704340f     ....y...cJ...4..
24030b40:	b4ab5fc7 b7098f0d b49f2caf b70e8873     ._.......,..s...
24030b50:	b492b93a b7131e3d b4860d8f b7174ea9     :...=........N..
24030b60:	b47263d9 b71b1838 b4585d31 b71e79ad     .cr.8...1]X..y..
24030b70:	b43e17b3 b721720c b423a3ff b724009c     ..>..r!...#...$.
24030b80:	b4091295 b72624e6 b3dce7c9 b727deb6     .....$&.......'.
24030b90:	b3a7b09e b7292e1b b3653fd7 b72a1354     ......)..?e.T.*.
24030ba0:	b2f756b3 b72a8f06 b19715d4 b72aa1e1     .V....*.......*.
24030bb0:	32a9b83c b72a4d0e 333b547f b72991b5     <..2.M*..T;3..).
24030bc0:	33902587 b728716e 33c1c2f6 b726ede4     .%.3nq(....3..&.
24030bd0:	33f26667 b7250916 3410fa4a b722c52d     gf.3..%.J..4-.".
24030be0:	34282997 b7202487 343eb45a b71d29b5     .)(4.$ .Z.>4.)..
24030bf0:	34548e72 b719d77c 3469ac39 b71630cb     r.T4|...9.i4.0..
24030c00:	347e029a b71238c1 3488c38b b70df2a4     ..~4.8.....4....
24030c10:	349217e0 b70961e5 349af9ae b7048a17     ...4.a.....4....
24030c20:	34a364a0 b6fedde5 34ab54ba b6f42899     .d.4.....T.4.(..
24030c30:	34b2c655 b6e8fc34 34b9b619 b6dd60d3     U..44......4.`..
24030c40:	34c02112 b6d15ec1 34c604a0 b6c4fe77     .!.4.^.....4w...
24030c50:	34cb5e77 b6b84891 34d02cb2 b6ab45c4     w^.4.H...,.4.E..
24030c60:	34d46dbc b69dfee9 34d82060 b6907ce3     .m.4....` .4.|..
24030c70:	34db43c2 b682c8a7 34ddd766 b669d661     .C.4....f..4a.i.
24030c80:	34dfdb23 b64ddafe 34e14f2c b631b119     #..4..M.,O.4..1.
24030c90:	34e23413 b6156a95 34e28ab7 b5f2327e     .4.4.j.....4~2..
24030ca0:	34e25459 b5b99d63 34e19280 b58138c7     YT.4c......4.8..
24030cb0:	34e04711 b5124e03 34de7442 b40c4f88     .G.4.N..Bt.4.O..
24030cc0:	34dc1c92 3495f4d1 34d942cf 35379bd0     ...4...4.B.4..75
24030cd0:	34d5ea15 3591486d 34d215c2 35c5cddf     ...4mH.5...4...5
24030ce0:	34cdc977 35f9403c 34c90925 3615c142     w..4<@.5%..4B..6
24030cf0:	34c3d8e8 362e3c5f 34be3d26 36460406     ...4_<.6&=.4..F6
24030d00:	34b83a7b 365d0b54 34b1d5b4 3673460a     {:.4T.]6...4.Fs6
24030d10:	34ab13d4 36845443 34a3fa0c 368e93e3     ...4CT.6...4...6
24030d20:	349c8dae 36985cbf 3494d443 36a1aa03     ...4.\.6C..4...6
24030d30:	348cd368 36aa7739 348490de 36b2c046     h..49w.6...4F..6
24030d40:	3478250e 36ba816f 3466bca7 36c1b755     .%x4o..6..f4U..6
24030d50:	3454f490 36c85efa 3442d8ff 36ce75c2     ..T4.^.6..B4.u.6
24030d60:	34307634 36d3f971 341dd874 36d8e837     4v04q..6t..47..6
24030d70:	340b0c24 36dd4098 33f03b26 36e10184     $..4.@.6&;.3...6
24030d80:	33ca321e 36e42a4d 33a4159f 36e6baa2     .2.3M*.6...3...6
24030d90:	337bfbe3 36e8b29b 33300638 36ea12a7     ..{3...68.03...6
24030da0:	32c8f356 36eadb9b 31cc2779 36eb0ea4     V..2...6y'.1...6
24030db0:	b242a876 36eaad51 b2f3cd1e 36e9b982     v.B.Q..6.......6
24030dc0:	b3420483 36e83579 b3846ca0 36e623c7     ..B.y5.6.l...#.6
24030dd0:	b3a71da5 36e38751 b3c9013a 36e0634c     ....Q..6:...Lc.6
24030de0:	b3ea03fe 36dcbb3c b40509ad 36d892ef     ....<..6.......6
24030df0:	b4148eb5 36d3ee79 b423889f 36ced233     ....y..6..#.3..6
24030e00:	b431ef56 36c942b8 b43fbb37 36c344e0     V.1..B.67.?..D.6
24030e10:	b44ce51c 36bcddb6 b459665d 36b61284     ..L....6]fY....6
24030e20:	b46538be 36aee8be b470568e 36a76608     .8e....6.Vp..f.6
24030e30:	b47abaa1 369f9035 b4823026 36976d33     ..z.5..6&0..3m.6
24030e40:	b486a1b1 368f0317 b48ab027 36865814     .......6'....X.6
24030e50:	b48e59fe 367ae4eb b4919ded 3668b12b     .Y....z6....+.h6
24030e60:	b4947af1 365621cd b496f054 364343c4     .z...!V6T....CC6
24030e70:	b498fd9f 3630240e b49aa299 361ccfbd     .....$06.......6
24030e80:	b49bdf57 360953d2 b49cb42d 35eb7a95     W....S.6-....z.5
24030e90:	b49d21b4 35c4322c b49d28c4 359ce7fa     .!..,2.5.(.....5
24030ea0:	b49cca71 356b6aba b49c0813 351d66b0     q....jk5.....f.5
24030eb0:	b49ae343 349fea1a b4995dd1 3251894d     C......4.]..M.Q2
24030ec0:	b49779c5 b490ed7b b4953961 b513136e     .y..{...a9..n...
24030ed0:	b4929f21 b55c62fe b48fadb0 b5921ce8     !....b\.........
24030ee0:	b48c67ee b5b536e7 b488d0e7 b5d76b24     .g...6......$k..
24030ef0:	b484ebda b5f8a618 b480bc28 b60c6a8f     ........(....j..
24030f00:	b4788ac2 b61bf33c b46f1675 b62ae4a4     ..x.<...u.o...*.
24030f10:	b465230e b63936d3 b45ab877 b646e25d     .#e..69.w.Z.].F.
24030f20:	b44fded3 b653e048 b4449e7d b6602a31     ..O.H.S.}.D.1*`.
24030f30:	b438fff4 b66bba2e b42d0bee b6768af1     ..8...k...-...v.
24030f40:	b420cb29 b6804bd0 b414469b b684ee06     ). ..K...F......
24030f50:	b4078733 b6892a3e b3f52c23 b68cfef1     3...>*..#,......
24030f60:	b3daf875 b6906ad2 b3c08595 b6936ce9     u....j.......l..
24030f70:	b3a5e5b5 b6960480 b38b2ae9 b698312b     .........*..+1..
24030f80:	b360ce54 b699f2c6 b32b5891 b69b4978     T.`......X+.xI..
24030f90:	b2ec2f71 b69c35a6 b2825cfe b69cb805     q/...5...\......
24030fa0:	b14bf031 b69cd182 321c5536 b69c8359     1.K.....6U.2Y...
24030fb0:	32b45b87 b69bcefc 330c6a85 b69ab627     .[.2.....j.3'...
24030fc0:	333daca5 b6993ace 336dd626 b6975f21     ..=3.:..&.m3!_..
24030fd0:	338e6511 b695258e 33a53666 b69290b5     .e.3.%..f6.3....
24030fe0:	33bb51c1 b68fa36c 33d0aa73 b68c60c4     .Q.3l...s..3.`..
24030ff0:	33e5346d b688cbf2 33f8e450 b684e861     m4.3....P..3a...
24031000:	3405d7b9 b680b9a3 340ec5e9 b67886e6     ...4.......4..x.
24031010:	3417381a b66f1363 341f2a0f b66520c3     .8.4c.o..*.4. e.
24031020:	342697f1 b65ab746 342d7e40 b64fdf62     ..&4F.Z.@~-4b.O.
24031030:	3433d9f1 b644a1c1 3439a857 b639073c     ..34..D.W.94<.9.
24031040:	343ee726 b62d18cb 3443947d b620df84     &.>4..-.}.C4.. .
24031050:	3447aeef b6146493 344b356a b607b13b     ..G4.d..j5K4;...
24031060:	344e2744 b5f59d91 3450843f b5db8d0b     D'N4....?.P4....
24031070:	34524c7d b5c1437b 34538092 b5a6d367     }LR4{C....S4g...
24031080:	34542160 b58c4f39 34543038 b5639268     `!T49O..80T4h.c.
24031090:	3453aed5 b52ea6b3 34529f3a b4f3fdc9     ..S4....:.R4....
240310a0:	345103d8 b48b7bdd 344edf76 b3903090     ..Q4.{..v.N4.0..
240310b0:	344c3522 34041cd7 34490852 34a69298     "5L4...4R.I4...4
240310c0:	34455cc2 3504a07b 34413677 3534ee18     .\E4{..5w6A4..45
240310d0:	343c99c8 3564148b 34378b4d 3588fbb0     ..<4..d5M.74...5
240310e0:	34320fdb 359f3daa 342c2c90 35b4c337     ..24.=.5.,,47..5
240310f0:	3425e6ba 35c98012 341f43df 35dd688c     ..%4...5.C.4.h.5
24031100:	341849b7 35f071ca 3410fe2a 360148c7     .I.4.q.5*..4.H.6
24031110:	34096738 3609df37 34018b1d 3611f7eb     8g.47..6...4...6
24031120:	33f2e02c 36198eed 33e23934 3620a0b4     ,..3...649.3.. 6
24031130:	33d12e31 36272a29 33bfcc42 362d2887     1..3)*'6B..3.(-6
24031140:	33ae2098 3632998f 339c386c 36377b53     . .3..26l8.3S{76
24031150:	338a20fe 363bcc5a 336fcf17 363f8b97     . .3Z.;6..o3..?6
24031160:	334b327d 3642b85f 33268658 36455278     }2K3_.B6X.&3xRE6
24031170:	3301e48d 36475a0a 32bacd6f 3648cfa6     ...3.ZG6o..2..H6
24031180:	3264980e 3649b43f 31a9d96d 364a092a     ..d2?.I6m..1*.J6
24031190:	b1641906 3649d025 b244e251 36490b43     ..d.%.I6Q.D.C.I6
240311a0:	b2a725c3 3647bcf6 b2ea744b 3645e80d     .%....G6Kt....E6
240311b0:	b31618d7 36438fab b3361a34 3640b742     ......C64.6.B.@6
240311c0:	b3552a58 363d629b b3733644 363995be     X*U..b=6D6s...96
240311d0:	b38815f4 3635550e b395fd18 3630a529     .....U56....).06
240311e0:	b3a34888 362b8ae4 b3aff0c2 36260b5c     .H....+6....\.&6
240311f0:	b3bbeed3 36202be6 b3c73c54 3619f205     .....+ 6T<.....6
24031200:	b3d1d370 36136368 b3dbaeec 360c85f1     p...hc.6.......6
24031210:	b3e4ca1b 36055fa2 b3ed20eb 35fbed32     ....._.6. ..2..5
24031220:	b3f4afe4 35eca236 b3fb742c 35dceaed     ....6..5,t.....5
24031230:	b400b5c8 35ccd43a b4034a2c 35bc6af5     ....:..5,J...j.5
24031240:	b40576b8 35abbc1c b4073b40 359ad4b5     .v.....5@;.....5
24031250:	b40897d3 3589c1bc b4098cc4 35712042     .......5....B q5
24031260:	b40a1acc 354e998f b40a42d2 352c08db     ......N5.B....,5
24031270:	b40a0619 35098755 b4096617 34ce5ba1     ....U..5.f...[.4
24031280:	b408648f 348a295a b407038f 340d4f24     .d..Z).4....$O.4
24031290:	b4054553 32009cdd b4032c68 b3f6453a     SE.....2h,..:E..
240312a0:	b400bb7f b47bde1c b3fbeb40 b4bce9de     ......{.@.......
240312b0:	b3f5bbca b4fa58cd b3eeef5f b51b0a52     .....X.._...R...
240312c0:	b3e78d25 b537fbf7 b3df9c89 b553ef88     %.....7.......S.
240312d0:	b3d72565 b56ed435 b3ce2fab b5844d15     e%..5.n../...M..
240312e0:	b3c4c3c9 b5909954 b3baea4e b59c47f7     ....T...N....G..
240312f0:	b3b0ac08 b5a752b5 b3a611f4 b5b1b3d9     .....R..........
24031300:	b39b2535 b5bb662b b38fef13 b5c46518     5%..+f.......e..
24031310:	b38478ef b5ccacad b371987a b5d4396a     .x......z.q.j9..
24031320:	b359e4f6 b5db0896 b341ea5e b5e117e5     ..Y.....^.A.....
24031330:	b329bbb3 b5e665c1 b3116be1 b5eaf124     ..)..e...k..$...
24031340:	b2f21b6d b5eeb992 b2c167a0 b5f1bf2e     m........g......
24031350:	b290e11a b5f402b1 b2415803 b5f58569     .........XA.i...
24031360:	b1c3af36 b5f64917 af6196a5 b5f65022     6....I....a."P..
24031370:	31b2b052 b5f59d6e 32348246 b5f43469     R..1n...F.42i4..
24031380:	3286dc45 b5f218ff 32b25edf b5ef4f7b     E..2.....^.2{O..
24031390:	32dcab8b b5ebdcd1 3302d31d b5e7c638     ...2.......38...
240313a0:	33169a1f b5e31165 33299e25 b5ddc475     ...3e...%.)3u...
240313b0:	333bd34b b5d7e5df 334d2e74 b5d17c68     K.;3....t.M3h|..
240313c0:	335da54c b5ca8f3c 336d2e55 b5c325ca     L.]3<...U.m3.%..
240313d0:	337bc0eb b5bb47c2 3384aaa2 b5b2fd1e     ..{3.G.....3....
240313e0:	338af23c b5aa4df9 3390b43c b5a142b6     <..3.M..<..3.B..
240313f0:	3395ee15 b597e3d1 339a9da6 b58e39f3     ...3.......3.9..
24031400:	339ec147 b5844de3 33a257bf b57450cc     G..3.M...W.3.Pt.
24031410:	33a5604d b55fa4c2 33a7da9c b54aa970     M`.3.._....3p.J.
24031420:	33a9c6d1 b5357096 33ab2579 b5200be6     ...3.p5.y%.3.. .
24031430:	33abf795 b50a8cf4 33ac3e91 b4ea0a42     ...3.....>.3B...
24031440:	33abfc43 b4bf0b33 33ab32e5 b4943e78     C..33....2.3x>..
24031450:	33a9e51d b4538a62 33a815e9 b3fefee3     ...3b.S....3....
24031460:	33a5c8ad b3326c60 33a30122 331395e4     ...3`l2."..3...3
24031470:	339fc359 33e98e4a 339c13b4 3442d0ff     Y..3J..3...3..B4
24031480:	3397f6e3 3487663a 339371df 34ac42b1     ...3:f.4.q.3.B.4
24031490:	338e89e3 34cfe529 3389446b 34f23645     ...3)..4kD.3E6.4
240314a0:	3383a72c 35099008 337b701b 35194709     ,..3...5.p{3.G.5
240314b0:	336efa53 352836af 3361f982 35365646     S.n3.6(5..a3FV65
240314c0:	33547a72 35439dec 33468a28 35500690     rzT3..C5(.F3..P5
240314d0:	333835db 355b89ee 33298aea 3566229c     .583..[5..)3."f5
240314e0:	331a96c1 356fcc08 330b66ea 35788277     ...3..o5.f.3w.x5
240314f0:	32f811c5 35802183 32d91449 358385d3     ...2.!.5I..2...5
24031500:	32b9f02b 35866d94 329abff4 3588d892     +..2.m.5...2...5
24031510:	32773bac 358ac70b 32394743 358c399d     .;w2...5CG92.9.5
24031520:	31f7aa6f 358d3147 317c5c59 358daf72     o..1G1.5Y\|1r..5
24031530:	2f4f46d1 358db5f1 b15e2794 358d46db     .FO/...5.'^..F.5
24031540:	b1e2214e 358c64bc b2292ba2 358b1265     N!...d.5.+).e..5
24031550:	b25fb11e 358952ff b28a3ca9 35872a0b     .._..R.5.<...*.5
24031560:	b2a3af3f 35849b4f b2bc1e80 3581aad4     ?...O..5.......5
24031570:	b2d379c7 357cb9db b2e9b187 35756c4f     .y....|5....Olu5
24031580:	b2feb776 356d7693 b3093f39 3564e2a0     v....vm59?....d5
24031590:	b3127d5d 355bbaca b31b10db 355209bc     ]}....[5......R5
240315a0:	b322f51c 3547da6a b32a2627 353d3808     ..".j.G5'&*..8=5
240315b0:	b330a0b9 35322dfb b3366231 3526c7d8     ..0..-251b6...&5
240315c0:	b33b689b 351b1150 b33fb2b9 350f1624     .h;.P..5..?.$..5
240315d0:	b3433fe9 3502e225 b3461038 34ed0245     .?C.%..58.F.E..4
240315e0:	b3482460 34d3fdb5 b3497db5 34bacdfe     `$H....4.}I....4
240315f0:	b34a1e34 34a18a3a b34a0875 3488492b     4.J.:..4u.J.+I.4
24031600:	b3493fa7 345e426f b347c793 342c5084     .?I.oB^4..G..P,4
24031610:	b345a489 33f5cecf b342db6f 33946113     ..E....3o.B..a.3
24031620:	b33f71a4 32d2a105 b33b6d07 b2a43909     .q?....2.m;..9..
24031630:	b336d3f5 b384783d b331ad2e b3dd4ecf     ..6.=x....1..N..
24031640:	b32bffe1 b419a763 b325d398 b4431c49     ..+.c.....%.I.C.
24031650:	b31f303c b46ae855 b3181dfa b48877e9     <0..U.j......w..
24031660:	b310a54f b49a8c94 b308ceee b4aba673     O...........s...
24031670:	b300a3bf b4bbbae9 b2f059b4 b4cac086     .........Y......
24031680:	b2dee6f0 b4d8aef4 b2cd01cd b4e57f12     ................
24031690:	b2babd18 b4f12ae2 b2a82b99 b4fbad9c     .....*...+......
240316a0:	b2956033 b50281d1 b2826daf b506953d     3`.......m..=...
240316b0:	b25ecd57 b50a1072 b238bb45 b50cf360     W.^.r...E.8.`...
240316c0:	b212c97f b50f3e85 b1da3766 b510f2f5     .....>..f7......
240316d0:	b18fa971 b5121248 b10c5a09 b5129ea2     q...H....Z......
240316e0:	2e7e00ff b5129aa9 31112416 b5120985     ..~......$.1....
240316f0:	318d580c b510eed6 31d0139e b50f4ead     .X.1.......1.N..
24031700:	3208469e b50d2d93 32274837 b50a9072     .F.2.-..7H'2r...
24031710:	3244f5fa b5077c9a 326138fb b503f7b6     ..D2.|...8a2....
24031720:	327bfc0a b50007c6 328a95e0 b4f7662e     ..{2.......2.f..
24031730:	32965b49 b4ee007a 32a1467c b4e3ec12     I[.2z...|F.2....
24031740:	32ab509e b4d93708 32b473d9 b4cdefcc     .P.2.7...s.2....
24031750:	32bcab53 b4c22516 32c3f33d b4b5e5e2     S..2.%..=..2....
24031760:	32ca48c7 b4a94156 32cfaa17 b49c46b5     .H.2VA.....2.F..
24031770:	32d41669 b48f054c 32d78dea b4818c6f     i..2L......2o...
24031780:	32da11ca b467d6a6 32dba430 b44c6221     ...2..g.0..2!bL.
24031790:	32dc4831 b430d91b 32dc01d8 b41558e1     1H.2..0....2.X..
240317a0:	32dad613 b3f3fc3b 32d8ca9e b3bdc98e     ...2;......2....
240317b0:	32d5e624 b3885005 32d23008 b3278806     $..2.P...0.2..'.
240317c0:	32cdb06d b2815f9f 32c8703b 320e212f     m..2._..;p.2/!.2
240317d0:	32c278eb 3304c4c3 32bbd4ae 3362af1a     .x.2...3...2..b3
240317e0:	32b48e32 339e7b18 32acb0a8 33c9a742     2..2.{.3...2B..3
240317f0:	32a447bf 33f2b932 329b5f89 340cc889     .G.22..3._.2...4
24031800:	32920468 341f091a 3288431b 3430117d     h..2...4.C.2}.04
24031810:	327c5119 343fd68a 326783c4 344e4ecb     .Q|2..?4..g2.NN4
24031820:	325238c9 345b7256 323c8ac2 34673b03     .8R2Vr[4..<2.;g4
24031830:	3226948c 3471a449 321070c7 347aab59     ..&2I.q4.p.2Y.z4
24031840:	31f473bc 3481277c 31c813b2 348447ca     .s.1|'.4...1.G.4
24031850:	319bf49d 3486b79d 3160912c 348878bc     ...1...4,.`1.x.4
24031860:	310a80ce 34898dbe 30585a4f 3489f9ec     ...1...4OZX0...4
24031870:	afe29461 3489c148 b0d8c6c3 3488e880     a...H..4.......4
24031880:	b139c8ef 348774ef b1821a5f 34856c85     ..9..t.4_....l.4
24031890:	b1a5aea3 3482d5ca b1c77f03 347f6f9d     .......4.....o.4
240318a0:	b1e76bf7 34783441 b202ac67 3470097a     .k..A4x4g...z.p4
240318b0:	b21095e0 3467001b b21d6703 345d29a6     ......g4.g...)]4
240318c0:	b22915fd 3452984c b2339a8b 34475e9d     ..).L.R4..3..^G4
240318d0:	b23cee11 343b8fc1 b2450b7b 342f3f0b     ..<...;4{.E..?/4
240318e0:	b24bef5d 34228014 b25197fe 34156691     ].K..."4..Q..f.4
240318f0:	b2560526 3408063f b2593849 33f4e570     &.V.?..4I8Y.p..3
24031900:	b25b346f 33d97ee2 b25bfe16 33bdff27     o4[..~.3..[.'..3
24031910:	b25b9b4e 33a28bbd b25a1392 3387494b     N.[....3..Z.KI.3
24031920:	b2576fc4 3358b6a4 b253ba19 3323c81e     .oW...X3..S...#3
24031930:	b24efe15 32e01131 b249484e 3276da14     ..N.1..2NHI...v2
24031940:	b242a69d 3150cde0 b23b27a9 b206f432     ..B...P1.';.2...
24031950:	b232db3a b29ce7b6 b229d1cb b2f1d09e     :.2.......).....
24031960:	b2201c9f b320ef76 b215cd92 b34662d9     .. .v. ......bF.
24031970:	b20af70e b369209d b1ff57c5 b38485cb     ..... i..W......
24031980:	b1e7fe67 b39305b1 b1d008bd b3a0063d     g...........=...
24031990:	b1b79db9 b3ab8019 b19ee464 b3b56e5f     ........d..._n..
240319a0:	b18603a1 b3bdce99 b15a4420 b3c4a0ba     ........ DZ.....
240319b0:	b128cb83 b3c9e716 b0efcf8f b3cda654     ..(.........T...
240319c0:	b08fc1cc b3cfe55b afc7dfdc b3d0ad3b     ....[.......;...
240319d0:	2fa425c7 b3d00915 3080c457 b3ce0604     .%./....W..0....
240319e0:	30d4c1f0 b3cab2fc 311249e5 b3c620ad     ...0.....I.1. ..
240319f0:	3137e9ea b3c0615e 315b1284 b3b988c9     ..71^a....[1....
24031a00:	317b9a1d b3b1abf8 318cae13 b3a8e118     ..{1.......1....
24031a10:	319a1c99 b39f3f4f 31a60ba3 b394de94     ...1O?.....1....
24031a20:	31b070fc b389d784 31b94528 b37c8664     .p.1....(E.1d.|.
24031a30:	31c08384 b36475f3 31c62a43 b34bb0ab     ...1.ud.C*.1..K.
24031a40:	31ca3a60 b332695f 31ccb79b b318d26a     `:.1_i2....1j...
24031a50:	31cda876 b2fe3abb 31cd160f b2caf534     v..1.:.....14...
24031a60:	31cb0c1b b298322f 31c798c7 b24c97fc     ...1/2.....1..L.
24031a70:	31c2cc8d b1d66366 31bcba22 b04d4a25     ...1fc.."..1%JM.
24031a80:	31b5763a 319bccf6 31ad1770 32247233     :v.1...1p..13r$2
24031a90:	31a3b601 32764d36 31996bae 32a18188     ...16Mv2.k.1...2
24031aa0:	318e5377 32c51664 31828967 32e5b8be     wS.1d..2g..1...2
24031ab0:	316c54ac 3301a1a8 3152a770 330ecc1f     .Tl1...3p.R1...3
24031ac0:	313846a5 331a508a 311d6e02 33242769     .F81.P.3.n.1i'$3
24031ad0:	31025900 332c4cfa 30ce849a 3332c120     .Y.1.L,3...0 .23
24031ae0:	3098c6c6 33378755 3047d005 333aa696     ...0U.73..G0..:3
24031af0:	2fc14e57 333c2933 ad4818fa 333c1cb2     WN./3)<3..H...<3
24031b00:	afc58b58 333a9199 b03d94a4 33379b47     X.....:3..=.G.73
24031b10:	b0897393 33334faa b0b11316 332dc713     .s...O33......-3
24031b20:	b0d5650d 33271be9 b0f62dca 331f6a7c     .e....'3.-..|j.3
24031b30:	b1099d4d 3316d0a6 b11631c8 330d6d8b     M......3.1...m.3
24031b40:	b120c66f 33036123 b1295337 32f197e2     o. .#a.37S)....2
24031b50:	b12fd540 32db9d38 b1344f15 32c51355     @./.8..2.O4.U..2
24031b60:	b136c8f2 32ae3a38 b137507a 32975026     ..6.8:.2zP7.&P.2
24031b70:	b135f844 3280911c b132d831 32546c2d     D.5....21.2.-lT2
24031b80:	b12e0cc0 3228e8ff b127b6c5 31fdf69d     ......(2..'....1
24031b90:	b11ffb3a 31adf901 b1170288 3144ef7a     :......1....z.D1
24031ba0:	b10cf83e 305fdce4 b1020a6a b0942665     >....._0j...e&..
24031bb0:	b0ecd1f2 b1407c2c b0d48a4f b19560a7     ....,|@.O....`..
24031bc0:	b0bba187 b1c44909 b0a27b00 b1ece7cb     .....I...{......
24031bd0:	b0897889 b207a2f7 b061f10f b215c208     .x........a.....
24031be0:	b032a9bc b220eca3 b005c24c b22948c8     ..2... .L....H).
24031bf0:	afb7a529 b22f05ef af558159 b2325bf2     )...../.Y.U..[2.
24031c00:	ae96e200 b23389be 2e360020 b232d3c0     ......3. .6...2.
24031c10:	2f145295 b2308274 2f68731a b22ce09e     .R./t.0..sh/..,.
24031c20:	2f94e105 b228399c 2fac4a82 b222d748     .../.9(..J./H.".
24031c30:	2fbadd03 b21d0060 2fc139eb b216f690     .../`....9./....
24031c40:	2fc03b77 b210f4b5 2fb8f017 b20b2d34     w;./......./4-..
24031c50:	2fac949c b205c88e 2f9c8bdf b200e430     .../......./0...
24031c60:	2f8a540f b1f9231e 2f6ef27b b1f1ab8a     .T./.#..{.n/....
24031c70:	2f4b0acd b1eb5333 2f2bd8e1 b1e5f46d     ..K/3S....+/m...
24031c80:	2f13eb9e b1e1550f 2f0542b6 b1dd2afb     .../.U...B./.*..
24031c90:	2f0111ed b1d9226b 2f0779db b1d4e69b     .../k"...y./....
24031ca0:	2f173b32 b1d02cc2 2f2d3ef1 b1cac2cb     2;./.,...>-/....
24031cb0:	2f44e786 b1c49b90 2f5c3202 b1bdb9fe     ..D/.....2\/....
24031cc0:	2f72e932 b1b622b5 2f848411 b1adda74     2.r/."...../t...
24031cd0:	2f8f40e5 b1a4e667 2f99a50f b19b4c14     .@./g....../.L..
24031ce0:	2fa3aa9b b191116c 2fad4bcb b1863caf     .../l....K./.<..
24031cf0:	2fb6832f b175a8f8 2fbf4b70 b15dbf8a     /../..u.pK./..].
24031d00:	2fc79fa7 b144cb96 2fcf7b17 b12adc31     .../..D..{./1.*.
24031d10:	2fd6d953 b1100106 2fddb655 b0e89479     S../....U../y...
24031d20:	2fe40e42 b0af90e7 2fe9ddba b06a32f2     B../......./.2j.
24031d30:	2fef219d afe54447 2fe54447 00000000     .!./GD..GD./....
	...

24031d54 <sinTable_f32>:
24031d54:	00000000 3c490e92 3cc90ab1 3d16c32b     ......I<...<+..=
24031d64:	3d48fb2e 3d7b2b75 3d96a904 3dafb680     ..H=u+{=...=...=
24031d74:	3dc8bd36 3de1bc2f 3dfab273 3e09cf87     6..=/..=s..=...>
24031d84:	3e164083 3e22abb5 3e2f10a2 3e3b6ecf     .@.>..">../>.n;>
24031d94:	3e47c5c2 3e541501 3e605c13 3e6c9a7f     ..G>..T>.\`>..l>
24031da4:	3e78cfcc 3e827dc0 3e888e93 3e8e9a22     ..x>.}.>...>"..>
24031db4:	3e94a032 3e9aa086 3ea09ae5 3ea68f12     2..>...>...>...>
24031dc4:	3eac7cd4 3eb263ef 3eb8442a 3ebe1d49     .|.>.c.>*D.>I..>
24031dd4:	3ec3ef15 3ec9b953 3ecf7bca 3ed53641     ...>S..>.{.>A6.>
24031de4:	3edae880 3ee0924f 3ee63375 3eebcbbb     ...>O..>u3.>...>
24031df4:	3ef15aea 3ef6e0cb 3efc5d27 3f00e7e4     .Z.>...>'].>...?
24031e04:	3f039c3d 3f064b82 3f08f59b 3f0b9a6b     =..?.K.?...?k..?
24031e14:	3f0e39da 3f10d3cd 3f13682a 3f15f6d9     .9.?...?*h.?...?
24031e24:	3f187fc0 3f1b02c6 3f1d7fd1 3f1ff6cb     ...?...?...?...?
24031e34:	3f226799 3f24d225 3f273656 3f299415     .g"?%.$?V6'?..)?
24031e44:	3f2beb4a 3f2e3bde 3f3085bb 3f32c8c9     J.+?.;.?..0?..2?
24031e54:	3f3504f3 3f373a23 3f396842 3f3b8f3b     ..5?#:7?Bh9?;.;?
24031e64:	3f3daef9 3f3fc767 3f41d870 3f43e201     ..=?g.??p.A?..C?
24031e74:	3f45e403 3f47de65 3f49d112 3f4bbbf8     ..E?e.G?..I?..K?
24031e84:	3f4d9f02 3f4f7a20 3f514d3d 3f531849     ..M? zO?=MQ?I.S?
24031e94:	3f54db31 3f5695e5 3f584853 3f59f26a     1.T?..V?SHX?j.Y?
24031ea4:	3f5b941a 3f5d2d53 3f5ebe05 3f604621     ..[?S-]?..^?!F`?
24031eb4:	3f61c597 3f633c5a 3f64aa59 3f660f88     ..a?Z<c?Y.d?..f?
24031ec4:	3f676bd8 3f68bf3c 3f6a09a7 3f6b4b0c     .kg?<.h?..j?.Kk?
24031ed4:	3f6c835e 3f6db293 3f6ed89e 3f6ff573     ^.l?..m?..n?s.o?
24031ee4:	3f710908 3f721352 3f731447 3f740bdd     ..q?R.r?G.s?..t?
24031ef4:	3f74fa0b 3f75dec6 3f76ba07 3f778bc5     ..t?..u?..v?..w?
24031f04:	3f7853f8 3f791298 3f79c79d 3f7a7302     .Sx?..y?..y?.sz?
24031f14:	3f7b14be 3f7baccd 3f7c3b28 3f7cbfc9     ..{?..{?(;|?..|?
24031f24:	3f7d3aac 3f7dabcc 3f7e1323 3f7e70b0     .:}?..}?#.~?.p~?
24031f34:	3f7ec46d 3f7f0e58 3f7f4e6d 3f7f84ab     m.~?X..?mN.?...?
24031f44:	3f7fb10f 3f7fd397 3f7fec43 3f7ffb11     ...?...?C..?...?
24031f54:	3f800000 3f7ffb11 3f7fec43 3f7fd397     ...?...?C..?...?
24031f64:	3f7fb10f 3f7f84ab 3f7f4e6d 3f7f0e58     ...?...?mN.?X..?
24031f74:	3f7ec46d 3f7e70b0 3f7e1323 3f7dabcc     m.~?.p~?#.~?..}?
24031f84:	3f7d3aac 3f7cbfc9 3f7c3b28 3f7baccd     .:}?..|?(;|?..{?
24031f94:	3f7b14be 3f7a7302 3f79c79d 3f791298     ..{?.sz?..y?..y?
24031fa4:	3f7853f8 3f778bc5 3f76ba07 3f75dec6     .Sx?..w?..v?..u?
24031fb4:	3f74fa0b 3f740bdd 3f731447 3f721352     ..t?..t?G.s?R.r?
24031fc4:	3f710908 3f6ff573 3f6ed89e 3f6db293     ..q?s.o?..n?..m?
24031fd4:	3f6c835e 3f6b4b0c 3f6a09a7 3f68bf3c     ^.l?.Kk?..j?<.h?
24031fe4:	3f676bd8 3f660f88 3f64aa59 3f633c5a     .kg?..f?Y.d?Z<c?
24031ff4:	3f61c597 3f604621 3f5ebe05 3f5d2d53     ..a?!F`?..^?S-]?
24032004:	3f5b941a 3f59f26a 3f584853 3f5695e5     ..[?j.Y?SHX?..V?
24032014:	3f54db31 3f531849 3f514d3d 3f4f7a20     1.T?I.S?=MQ? zO?
24032024:	3f4d9f02 3f4bbbf8 3f49d112 3f47de65     ..M?..K?..I?e.G?
24032034:	3f45e403 3f43e201 3f41d870 3f3fc767     ..E?..C?p.A?g.??
24032044:	3f3daef9 3f3b8f3b 3f396842 3f373a23     ..=?;.;?Bh9?#:7?
24032054:	3f3504f3 3f32c8c9 3f3085bb 3f2e3bde     ..5?..2?..0?.;.?
24032064:	3f2beb4a 3f299415 3f273656 3f24d225     J.+?..)?V6'?%.$?
24032074:	3f226799 3f1ff6cb 3f1d7fd1 3f1b02c6     .g"?...?...?...?
24032084:	3f187fc0 3f15f6d9 3f13682a 3f10d3cd     ...?...?*h.?...?
24032094:	3f0e39da 3f0b9a6b 3f08f59b 3f064b82     .9.?k..?...?.K.?
240320a4:	3f039c3d 3f00e7e4 3efc5d27 3ef6e0cb     =..?...?'].>...>
240320b4:	3ef15aea 3eebcbbb 3ee63375 3ee0924f     .Z.>...>u3.>O..>
240320c4:	3edae880 3ed53641 3ecf7bca 3ec9b953     ...>A6.>.{.>S..>
240320d4:	3ec3ef15 3ebe1d49 3eb8442a 3eb263ef     ...>I..>*D.>.c.>
240320e4:	3eac7cd4 3ea68f12 3ea09ae5 3e9aa086     .|.>...>...>...>
240320f4:	3e94a032 3e8e9a22 3e888e93 3e827dc0     2..>"..>...>.}.>
24032104:	3e78cfcc 3e6c9a7f 3e605c13 3e541501     ..x>..l>.\`>..T>
24032114:	3e47c5c2 3e3b6ecf 3e2f10a2 3e22abb5     ..G>.n;>../>..">
24032124:	3e164083 3e09cf87 3dfab273 3de1bc2f     .@.>...>s..=/..=
24032134:	3dc8bd36 3dafb680 3d96a904 3d7b2b75     6..=...=...=u+{=
24032144:	3d48fb2e 3d16c32b 3cc90ab1 3c490e92     ..H=+..=...<..I<
24032154:	00000000 bc490e92 bcc90ab1 bd16c32b     ......I.....+...
24032164:	bd48fb2e bd7b2b75 bd96a904 bdafb680     ..H.u+{.........
24032174:	bdc8bd36 bde1bc2f bdfab273 be09cf87     6.../...s.......
24032184:	be164083 be22abb5 be2f10a2 be3b6ecf     .@....".../..n;.
24032194:	be47c5c2 be541501 be605c13 be6c9a7f     ..G...T..\`...l.
240321a4:	be78cfcc be827dc0 be888e93 be8e9a22     ..x..}......"...
240321b4:	be94a032 be9aa086 bea09ae5 bea68f12     2...............
240321c4:	beac7cd4 beb263ef beb8442a bebe1d49     .|...c..*D..I...
240321d4:	bec3ef15 bec9b953 becf7bca bed53641     ....S....{..A6..
240321e4:	bedae880 bee0924f bee63375 beebcbbb     ....O...u3......
240321f4:	bef15aea bef6e0cb befc5d27 bf00e7e4     .Z......']......
24032204:	bf039c3d bf064b82 bf08f59b bf0b9a6b     =....K......k...
24032214:	bf0e39da bf10d3cd bf13682a bf15f6d9     .9......*h......
24032224:	bf187fc0 bf1b02c6 bf1d7fd1 bf1ff6cb     ................
24032234:	bf226799 bf24d225 bf273656 bf299415     .g".%.$.V6'...).
24032244:	bf2beb4a bf2e3bde bf3085bb bf32c8c9     J.+..;....0...2.
24032254:	bf3504f3 bf373a23 bf396842 bf3b8f3b     ..5.#:7.Bh9.;.;.
24032264:	bf3daef9 bf3fc767 bf41d870 bf43e201     ..=.g.?.p.A...C.
24032274:	bf45e403 bf47de65 bf49d112 bf4bbbf8     ..E.e.G...I...K.
24032284:	bf4d9f02 bf4f7a20 bf514d3d bf531849     ..M. zO.=MQ.I.S.
24032294:	bf54db31 bf5695e5 bf584853 bf59f26a     1.T...V.SHX.j.Y.
240322a4:	bf5b941a bf5d2d53 bf5ebe05 bf604621     ..[.S-]...^.!F`.
240322b4:	bf61c597 bf633c5a bf64aa59 bf660f88     ..a.Z<c.Y.d...f.
240322c4:	bf676bd8 bf68bf3c bf6a09a7 bf6b4b0c     .kg.<.h...j..Kk.
240322d4:	bf6c835e bf6db293 bf6ed89e bf6ff573     ^.l...m...n.s.o.
240322e4:	bf710908 bf721352 bf731447 bf740bdd     ..q.R.r.G.s...t.
240322f4:	bf74fa0b bf75dec6 bf76ba07 bf778bc5     ..t...u...v...w.
24032304:	bf7853f8 bf791298 bf79c79d bf7a7302     .Sx...y...y..sz.
24032314:	bf7b14be bf7baccd bf7c3b28 bf7cbfc9     ..{...{.(;|...|.
24032324:	bf7d3aac bf7dabcc bf7e1323 bf7e70b0     .:}...}.#.~..p~.
24032334:	bf7ec46d bf7f0e58 bf7f4e6d bf7f84ab     m.~.X...mN......
24032344:	bf7fb10f bf7fd397 bf7fec43 bf7ffb11     ........C.......
24032354:	bf800000 bf7ffb11 bf7fec43 bf7fd397     ........C.......
24032364:	bf7fb10f bf7f84ab bf7f4e6d bf7f0e58     ........mN..X...
24032374:	bf7ec46d bf7e70b0 bf7e1323 bf7dabcc     m.~..p~.#.~...}.
24032384:	bf7d3aac bf7cbfc9 bf7c3b28 bf7baccd     .:}...|.(;|...{.
24032394:	bf7b14be bf7a7302 bf79c79d bf791298     ..{..sz...y...y.
240323a4:	bf7853f8 bf778bc5 bf76ba07 bf75dec6     .Sx...w...v...u.
240323b4:	bf74fa0b bf740bdd bf731447 bf721352     ..t...t.G.s.R.r.
240323c4:	bf710908 bf6ff573 bf6ed89e bf6db293     ..q.s.o...n...m.
240323d4:	bf6c835e bf6b4b0c bf6a09a7 bf68bf3c     ^.l..Kk...j.<.h.
240323e4:	bf676bd8 bf660f88 bf64aa59 bf633c5a     .kg...f.Y.d.Z<c.
240323f4:	bf61c597 bf604621 bf5ebe05 bf5d2d53     ..a.!F`...^.S-].
24032404:	bf5b941a bf59f26a bf584853 bf5695e5     ..[.j.Y.SHX...V.
24032414:	bf54db31 bf531849 bf514d3d bf4f7a20     1.T.I.S.=MQ. zO.
24032424:	bf4d9f02 bf4bbbf8 bf49d112 bf47de65     ..M...K...I.e.G.
24032434:	bf45e403 bf43e201 bf41d870 bf3fc767     ..E...C.p.A.g.?.
24032444:	bf3daef9 bf3b8f3b bf396842 bf373a23     ..=.;.;.Bh9.#:7.
24032454:	bf3504f3 bf32c8c9 bf3085bb bf2e3bde     ..5...2...0..;..
24032464:	bf2beb4a bf299415 bf273656 bf24d225     J.+...).V6'.%.$.
24032474:	bf226799 bf1ff6cb bf1d7fd1 bf1b02c6     .g".............
24032484:	bf187fc0 bf15f6d9 bf13682a bf10d3cd     ........*h......
24032494:	bf0e39da bf0b9a6b bf08f59b bf064b82     .9..k........K..
240324a4:	bf039c3d bf00e7e4 befc5d27 bef6e0cb     =.......']......
240324b4:	bef15aea beebcbbb bee63375 bee0924f     .Z......u3..O...
240324c4:	bedae880 bed53641 becf7bca bec9b953     ....A6...{..S...
240324d4:	bec3ef15 bebe1d49 beb8442a beb263ef     ....I...*D...c..
240324e4:	beac7cd4 bea68f12 bea09ae5 be9aa086     .|..............
240324f4:	be94a032 be8e9a22 be888e93 be827dc0     2..."........}..
24032504:	be78cfcc be6c9a7f be605c13 be541501     ..x...l..\`...T.
24032514:	be47c5c2 be3b6ecf be2f10a2 be22abb5     ..G..n;.../...".
24032524:	be164083 be09cf87 bdfab273 bde1bc2f     .@......s.../...
24032534:	bdc8bd36 bdafb680 bd96a904 bd7b2b75     6...........u+{.
24032544:	bd48fb2e bd16c32b bcc90ab1 bc490e92     ..H.+.........I.
24032554:	80000000 33323130 37363534 62613938     ....0123456789ab
24032564:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
24032574:	76757473 7a797877 00000000              stuvwxyz....

24032580 <__exp2f_data>:
24032580:	00000000 3ff00000 d3158574 3fefd9b0     .......?t......?
24032590:	6cf9890f 3fefb558 d0125b51 3fef9301     ...lX..?Q[.....?
240325a0:	3c7d517b 3fef72b8 3168b9aa 3fef5487     {Q}<.r.?..h1.T.?
240325b0:	6e756238 3fef387a f51fdee1 3fef1e9d     8bunz8.?.......?
240325c0:	0a31b715 3fef06fe 373aa9cb 3feef1a7     ..1....?..:7...?
240325d0:	4c123422 3feedea6 6061892d 3feece08     "4.L...?-.a`...?
240325e0:	d5362a27 3feebfda 569d4f82 3feeb42b     '*6....?.O.V+..?
240325f0:	dd485429 3feeab07 b03a5585 3feea47e     )TH....?.U:.~..?
24032600:	667f3bcd 3feea09e e8ec5f74 3fee9f75     .;.f...?t_..u..?
24032610:	73eb0187 3feea114 994cce13 3feea589     ...s...?..L....?
24032620:	422aa0db 3feeace5 b0cdc5e5 3feeb737     ..*B...?....7..?
24032630:	82a3f090 3feec491 b23e255d 3feed503     .......?]%>....?
24032640:	995ad3ad 3feee89f f2fb5e47 3feeff76     ..Z....?G^..v..?
24032650:	dd85529c 3fef199b dcef9069 3fef3720     .R.....?i... 7.?
24032660:	dcfba487 3fef5818 337b9b5f 3fef7c97     .....X.?_.{3.|.?
24032670:	a2a490da 3fefa4af 5b6e4540 3fefd076     .......?@En[v..?
24032680:	00000000 42e80000 4b912394 3fac6af8     .......B.#.K.j.?
24032690:	50fac4f3 3fcebfce ff0c52d6 3fe62e42     ...P...?.R..B..?
240326a0:	00000000 43380000 652b82fe 40471547     ......8C..+eG.G@
240326b0:	4b912394 3ebc6af8 50fac4f3 3f2ebfce     .#.K.j.>...P...?
240326c0:	ff0c52d6 3f962e42                       .R..B..?

240326c8 <__logf_data>:
240326c8:	79f8f3be 3ff661ec 808caade bfd57bf7     ...y.a.?.....{..
240326d8:	4aaf883d 3ff571ed a7c06ddb bfd2bef0     =..J.q.?.m......
240326e8:	f0f010b0 3ff49539 7f513a67 bfd01eae     ....9..?g:Q.....
240326f8:	b0b80385 3ff3c995 a68224e9 bfcb31d8     .......?.$...1..
24032708:	0c8864a5 3ff30d19 0ac07758 bfc6574f     .d.....?Xw..OW..
24032718:	7b0b8ea0 3ff25e22 c79c8100 bfc1aa2b     ...{"^.?....+...
24032728:	4a1a343f 3ff1bb4a ce8c0e5e bfba4e76     ?4.JJ..?^...vN..
24032738:	f08ae5ba 3ff12358 5a611ccc bfb1973c     ....X#.?..aZ<...
24032748:	419900a7 3ff0953f 38e10c1e bfa252f4     ...A?..?...8.R..
24032758:	00000000 3ff00000 00000000 00000000     .......?........
24032768:	fd9a47ac 3fee608c 5df25984 3faaa5aa     .G...`.?.Y.]...?
24032778:	1f026aa0 3feca4b3 aa362eb4 3fbc5e53     .j.....?..6.S^.?
24032788:	576afce6 3feb2036 7720db08 3fc526e5     ..jW6 .?.. w.&.?
24032798:	63a1aa2d 3fe9c2d1 0d224770 3fcbc286     -..c...?pG"....?
240327a8:	037841ed 3fe886e6 c8a07ee1 3fd1058b     .Ax....?.~.....?
240327b8:	f5534862 3fe767dc 57b6ee09 3fd40430     bHS..g.?...W0..?
240327c8:	fefa39ef 3fe62e42 48b88334 bfd00ea3     .9..B..?4..H....
240327d8:	0be00b6a 3fd5575b f20a4123 bfdffffe     j...[W.?#A......

240327e8 <__exp_data>:
240327e8:	652b82fe 40671547 00000000 43380000     ..+eG.g@......8C
240327f8:	fefa0000 bf762e42 bc9e3b3a bd0cf79a     ....B.v.:;......
24032808:	fffffdbd 3fdfffff 5555543c 3fc55555     .......?<TUUUU.?
24032818:	cf172b91 3fa55555 67a4d017 3f811111     .+..UU.?...g...?
24032828:	00000000 42c80000 fefa39ef 3fe62e42     .......B.9..B..?
24032838:	ff82c424 3fcebfbd d70cf4b5 3fac6b08     $......?.....k.?
24032848:	d24650cc 3f83b2ab 9b4e3a84 3f55d7e0     .PF....?.:N...U?
	...
24032864:	3ff00000 1a88bf6e 3c9b3b4f a9fb3335     ...?n...O;.<53..
24032874:	3feff63d 9cd8dc5d bc716013 3e778061     =..?]....`q.a.w>
24032884:	3fefec9a 108766d1 bc905e7a e86e7f85     ...?.f..z^....n.
24032894:	3fefe315 3567f613 3c8cd252 d3158574     ...?..g5R..<t...
240328a4:	3fefd9b0 23f98efa bc8bce80 29ddf6de     ...?...#.......)
240328b4:	3fefd06b 61e6c861 3c60f74e 18759bc8     k..?a..aN.`<..u.
240328c4:	3fefc745 5b33d399 3c90a3e4 cac6f383     E..?..3[...<....
240328d4:	3fefbe3e 5d837b6d 3c979aa6 6cf9890f     >..?m{.]...<...l
240328e4:	3fefb558 92fdeffc 3c8eb51a 2b7247f7     X..?.......<.Gr+
240328f4:	3fefac92 702f9cd1 3c3ebe3d 32d3d1a2     ...?../p=.><...2
24032904:	3fefa3ec 89906e0b bc6a0334 affed31b     ...?.n..4.j.....
24032914:	3fef9b66 2a2fbd0e bc955652 d0125b51     f..?../*RV..Q[..
24032924:	3fef9301 8c4eea55 bc5080ef c06c31cc     ...?U.N...P..1l.
24032934:	3fef8abd b9d5f416 bc91c923 aea92de0     ...?....#....-..
24032944:	3fef829a e95c55af 3c80d3e3 c8a58e51     ...?.U\....<Q...
24032954:	3fef7a98 eaa59348 bc801b15 3c7d517b     .z.?H.......{Q}<
24032964:	3fef72b8 55de323d bc8f1ff0 388c8dea     .r.?=2.U.......8
24032974:	3fef6af9 3f1353bf 3c8b898c eb6fcb75     .j.?.S.?...<u.o.
24032984:	3fef635b 7611eb26 bc96d99c 84045cd4     [c.?&..v.....\..
24032994:	3fef5be0 3e3a2f60 3c9aecf7 3168b9aa     .[.?`/:>...<..h1
240329a4:	3fef5487 cb86389d bc8fe782 22fcd91d     .T.?.8........."
240329b4:	3fef4d50 44a6c38d 3c8a6f41 88628cd6     PM.?...DAo.<..b.
240329c4:	3fef463b b0e4047d 3c807a05 917ddc96     ;F.?}....z.<..}.
240329d4:	3fef3f49 e3a8a894 3c968efd 6e756238     I?.?.......<8bun
240329e4:	3fef387a f274487d 3c875e18 4fb2a63f     z8.?}Ht..^.<?..O
240329f4:	3fef31ce 981fe7f2 3c80472b 65e27cdd     .1.?....+G.<.|.e
24032a04:	3fef2b45 3f71085e bc96b87b e1f56381     E+.?^.q?{....c..
24032a14:	3fef24df 6d09ab31 3c82f7e1 f51fdee1     .$.?1..m...<....
24032a24:	3fef1e9d 1a6fbffa bc3d219b d0dad990     ...?..o..!=.....
24032a34:	3fef187f 720c0ab4 3c8b3782 a6e4030b     ...?...r.7.<....
24032a44:	3fef1285 89cecb8f 3c6e1492 a93e2f56     ...?......n<V/>.
24032a54:	3fef0caf 4db0abb6 3c834d75 0a31b715     ...?...MuM.<..1.
24032a64:	3fef06fe e2ac744c 3c864201 fc4cd831     ...?Lt...B.<1.L.
24032a74:	3fef0170 5dd3f84a 3c8fdd39 b26416ff     p..?J..]9..<..d.
24032a84:	3feefc08 3b8e5b04 bc86a380 5f929ff1     ...?.[.;......._
24032a94:	3feef6c5 cc4b5068 bc924aed 373aa9cb     ...?hPK..J....:7
24032aa4:	3feef1a7 1b512d8e bc9907f8 6d05d866     ...?.-Q.....f..m
24032ab4:	3feeecae 3e9436d2 bc71d1e8 34e59ff7     ...?.6.>..q....4
24032ac4:	3feee7db b3ce1b15 bc991919 c313a8e5     ...?............
24032ad4:	3feee32d a72a4c6d 3c859f48 4c123422     -..?mL*.H..<"4.L
24032ae4:	3feedea6 7a28698a bc931260 04ac801c     ...?.i(z`.......
24032af4:	3feeda45 4817895b bc58a78f 21f72e2a     E..?[..H..X.*..!
24032b04:	3feed60a 67499a1b bc7c2c9b d950a897     ...?..Ig.,|...P.
24032b14:	3feed1f5 60c2ac11 3c4363ed 6061892d     ...?...`.cC<-.a`
24032b24:	3feece08 3b0664ef 3c966609 ed1d0057     ...?.d.;.f.<W...
24032b34:	3feeca41 daa10379 3c6ecce1 b5c13cd0     A..?y.....n<.<..
24032b44:	3feec6a2 3f0f1230 3c93ff8e f0d7d3de     ...?0..?...<....
24032b54:	3feec32a bb7aafb0 3c7690ce d5362a27     *..?..z...v<'*6.
24032b64:	3feebfda eb54e077 3c931dbd 99fddd0d     ...?w.T....<....
24032b74:	3feebcb2 0071a38e bc8f9434 769d2ca7     ...?..q.4....,.v
24032b84:	3feeb9b2 dc93a349 bc87decc a2cf6642     ...?I.......Bf..
24032b94:	3feeb6da bd0f385f bc78dec6 569d4f82     ...?_8....x..O.V
24032ba4:	3feeb42b ec7b5cf6 bc861246 ca5d920f     +..?.\{.F.....].
24032bb4:	3feeb1a4 18fdd78e 3c933505 36b527da     ...?.....5.<.'.6
24032bc4:	3feeaf47 2f8a9b05 3c7b98b7 d497c7fd     G..?.../..{<....
24032bd4:	3feead12 e21c5409 3c9063e1 dd485429     ...?.T...c.<)TH.
24032be4:	3feeab07 5019c6ea 3c34c785 8a5946b7     ...?...P..4<.FY.
24032bf4:	3feea926 2b64c035 3c9432e6 15ad2148     &..?5.d+.2.<H!..
24032c04:	3feea76f 6199769f bc8ce44a b976dc09     o..?.v.aJ.....v.
24032c14:	3feea5e1 3bef4da8 bc8c33c5 b03a5585     ...?.M.;.3...U:.
24032c24:	3feea47e 892be9ae bc845378 34ccc320     ~..?..+.xS.. ..4
24032c34:	3feea346 78565858 bc93cedd 82552225     F..?XXVx....%"U.
24032c44:	3feea238 807e1964 3c5710aa d44ca973     8..?d.~...W<s.L.
24032c54:	3feea155 bf5e2228 bc93b3ef 667f3bcd     U..?("^......;.f
24032c64:	3feea09e 8734b982 bc6a12ad 750bdabf     ...?..4...j....u
24032c74:	3feea012 b86da9ee bc6367ef 3c651a2f     ...?..m..gc./.e<
24032c84:	3fee9fb2 54e08851 bc80dc3d f9519484     ...?Q..T=.....Q.
24032c94:	3fee9f7d 7e5a3ecf bc781f64 e8ec5f74     }..?.>Z~d.x.t_..
24032ca4:	3fee9f75 c08b7db0 bc86ee4a 48a58174     u..?.}..J...t..H
24032cb4:	3fee9f9a 1e55e68a bc861932 564267c9     ...?..U.2....gBV
24032cc4:	3fee9feb 5e09d4d3 3c909ccb 4fde5d3f     ...?...^...<?].O
24032cd4:	3feea069 b94da51d bc7b32dc 73eb0187     i..?..M..2{....s
24032ce4:	3feea114 5467c06b 3c94ecfd 0130c132     ...?k.gT...<2.0.
24032cf4:	3feea1ed abd66c55 3c65ebe1 36cf4e62     ...?Ul....e<bN.6
24032d04:	3feea2f3 2fb3cf42 bc88a1c5 543e1a12     ...?B../......>T
24032d14:	3feea427 f13b3734 bc9369b6 994cce13     '..?47;..i....L.
24032d24:	3feea589 3a19ff1e bc805e84 4623c7ad     ...?...:.^....#F
24032d34:	3feea71a d872576e bc94d450 9b4492ed     ...?nWr.P.....D.
24032d44:	3feea8d9 5b0e8a00 3c90ad67 d98a6699     ...?...[g..<.f..
24032d54:	3feeaac7 c1f0eab4 3c8db72f 422aa0db     ...?..../..<..*B
24032d64:	3feeace5 9cc5e7ff bc65b660 16b5448c     ...?....`.e..D..
24032d74:	3feeaf32 59f35f44 3c7bf683 99157736     2..?D_.Y..{<6w..
24032d84:	3feeb1ae a71e3d83 bc93091f 0b91ffc6     ...?.=..........
24032d94:	3feeb45b 8b6c1e29 bc5da9b8 b0cdc5e5     [..?).l...].....
24032da4:	3feeb737 7c90b959 bc6c23f9 cbc8520f     7..?Y..|.#l..R..
24032db4:	3feeba44 22f4f9aa bc924343 9fde4e50     D..?..."CC..PN..
24032dc4:	3feebd82 d7668e4b bc85ca6c 70ca07ba     ...?K.f.l......p
24032dd4:	3feec0f1 2b91ce27 3c71affc 82a3f090     ...?'..+..q<....
24032de4:	3feec491 e10a73bb 3c6dd235 19e32323     ...?.s..5.m<##..
24032df4:	3feec863 22622263 bc87c504 7b5de565     c..?c"b"....e.]{
24032e04:	3feecc66 e3e231d5 3c8b1c86 ec4a2d33     f..?.1.....<3-J.
24032e14:	3feed09b d3bcbb15 bc91bbd1 b23e255d     ...?........]%>.
24032e24:	3feed503 9cee31d2 3c90cc31 1330b358     ...?.1..1..<X.0.
24032e34:	3feed99e 6e735ab3 3c846984 5579fdbf     ...?.Zsn.i.<..yU
24032e44:	3feede6b 978e9db4 bc82dfcd bfd3f37a     k..?........z...
24032e54:	3feee36b 92cb3387 3c8c1a77 995ad3ad     k..?.3..w..<..Z.
24032e64:	3feee89f 4ad1d9fa bc907b8f 298db666     ...?...J.{..f..)
24032e74:	3feeee07 56dcaeba bc55c3d9 b84f15fb     ...?...V..U...O.
24032e84:	3feef3a2 3da6f640 bc90a40e 8de5593a     ...?@..=....:Y..
24032e94:	3feef972 38ad9334 bc68d6f4 f2fb5e47     r..?4..8..h.G^..
24032ea4:	3feeff76 6b588a35 bc91eee2 30a1064a     v..?5.Xk....J..0
24032eb4:	3fef05b0 0a5fddcd 3c74ffd7 904bc1d2     ...?.._...t<..K.
24032ec4:	3fef0c1e fa9298ac bc91bdfb 5bd71e09     ...?...........[
24032ed4:	3fef12c2 30af0cb3 3c736eae dd85529c     ...?...0.ns<.R..
24032ee4:	3fef199b 5c9ffd94 3c8ee332 5fffd07a     ...?...\2..<z.._
24032ef4:	3fef20ab d10959ac 3c84e08f 2e57d14b     . .?.Y.....<K.W.
24032f04:	3fef27f1 384e1a67 3c63cdaf 9406e7b5     .'.?g.N8..c<....
24032f14:	3fef2f6d 6c921968 3c676b2c dcef9069     m/.?h..l,kg<i...
24032f24:	3fef3720 83ccb5d2 bc808a18 555dc3fa      7.?..........]U
24032f34:	3fef3f0b 3ffffa6f bc8fad5d 4a07897c     .?.?o..?]...|..J
24032f44:	3fef472d 3875a949 bc900dae 080d89f2     -G.?I.u8........
24032f54:	3fef4f87 a63d07a7 3c74a385 dcfba487     .O.?..=...t<....
24032f64:	3fef5818 2040220f bc82919e 16c98398     .X.?."@ ........
24032f74:	3fef60e3 d5c192ac 3c8e5a50 03db3285     .`.?....PZ.<.2..
24032f84:	3fef69e6 ac016b4b 3c843a59 f301b460     .i.?Kk..Y:.<`...
24032f94:	3fef7321 07b43e1f bc82d521 337b9b5f     !s.?.>..!..._.{3
24032fa4:	3fef7c97 3b470dc9 bc892ab9 14f5a129     .|.?..G;.*..)...
24032fb4:	3fef8646 603a88d3 3c74b604 e78b3ff6     F..?..:`..t<.?..
24032fc4:	3fef902e 519d7271 3c83c5ec fbc74c83     ...?qr.Q...<.L..
24032fd4:	3fef9a51 8fd391f0 bc8ff712 a2a490da     Q..?............
24032fe4:	3fefa4af e223747d bc8dae98 2d8e67f1     ...?}t#......g.-
24032ff4:	3fefaf48 41aa2008 3c8ec3bc ee615a27     H..?. .A...<'Za.
24033004:	3fefba1b c3a9eb32 3c842b94 376bba97     ...?2....+.<..k7
24033014:	3fefc52b 31d185ee 3c8a64a9 5b6e4540     +..?...1.d.<@En[
24033024:	3fefd076 e43be3ed bc8e37ba ad9cbe14     v..?..;..7......
24033034:	3fefdbfd 4d91cd9d 3c77893b 819e90d8     ...?...M;.w<....
24033044:	3fefe7c1 4160cc89 3c5305c1 2b8f71f1     ...?..`A..S<.q.+
24033054:	3feff3c2                                ...?

24033058 <__inv_pio4>:
24033058:	000000a2 0000a2f9 00a2f983 a2f9836e     ............n...
24033068:	f9836e4e 836e4e44 6e4e4415 4e441529     Nn..DNn..DNn).DN
24033078:	441529fc 1529fc27 29fc2757 fc2757d1     .).D'.).W'.).W'.
24033088:	2757d1f5 57d1f534 d1f534dd f534ddc0     ..W'4..W.4....4.
24033098:	34ddc0db ddc0db62 c0db6295 db629599     ...4b....b....b.
240330a8:	6295993c 95993c43 993c4390 3c439041     <..bC<...C<.A.C<

240330b8 <__sincosf_table>:
240330b8:	00000000 3ff00000 00000000 bff00000     .......?........
240330c8:	00000000 bff00000 00000000 3ff00000     ...............?
240330d8:	6dc9c883 41645f30 54442d18 3ff921fb     ...m0_dA.-DT.!.?
240330e8:	00000000 3ff00000 fd0c621c bfdfffff     .......?.b......
240330f8:	e1068f19 3fa55553 e89a359d bf56c087     ....SU.?.5....V.
24033108:	027bf8c3 3ef99343 5995a603 bfc55554     ..{.C..>...YTU..
24033118:	05230bc4 3f811076 3774cf24 bf2994eb     ..#.v..?$.t7..).
24033128:	00000000 3ff00000 00000000 bff00000     .......?........
24033138:	00000000 bff00000 00000000 3ff00000     ...............?
24033148:	6dc9c883 41645f30 54442d18 3ff921fb     ...m0_dA.-DT.!.?
24033158:	00000000 bff00000 fd0c621c 3fdfffff     .........b.....?
24033168:	e1068f19 bfa55553 e89a359d 3f56c087     ....SU...5....V?
24033178:	027bf8c3 bef99343 5995a603 bfc55554     ..{.C......YTU..
24033188:	05230bc4 3f811076 3774cf24 bf2994eb     ..#.v..?$.t7..).

24033198 <TWO23>:
24033198:	4b000000 cb000000                       ...K....

240331a0 <npio2_hw>:
240331a0:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
240331b0:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
240331c0:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
240331d0:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
240331e0:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
240331f0:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
24033200:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
24033210:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

24033220 <two_over_pi>:
24033220:	000000a2 000000f9 00000083 0000006e     ............n...
24033230:	0000004e 00000044 00000015 00000029     N...D.......)...
24033240:	000000fc 00000027 00000057 000000d1     ....'...W.......
24033250:	000000f5 00000034 000000dd 000000c0     ....4...........
24033260:	000000db 00000062 00000095 00000099     ....b...........
24033270:	0000003c 00000043 00000090 00000041     <...C.......A...
24033280:	000000fe 00000051 00000063 000000ab     ....Q...c.......
24033290:	000000de 000000bb 000000c5 00000061     ............a...
240332a0:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
240332b0:	00000042 0000004d 000000d2 000000e0     B...M...........
240332c0:	00000006 00000049 0000002e 000000ea     ....I...........
240332d0:	00000009 000000d1 00000092 0000001c     ................
240332e0:	000000fe 0000001d 000000eb 0000001c     ................
240332f0:	000000b1 00000029 000000a7 0000003e     ....).......>...
24033300:	000000e8 00000082 00000035 000000f5     ........5.......
24033310:	0000002e 000000bb 00000044 00000084     ........D.......
24033320:	000000e9 0000009c 00000070 00000026     ........p...&...
24033330:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
24033340:	00000039 00000091 000000d6 00000039     9...........9...
24033350:	00000083 00000053 00000039 000000f4     ....S...9.......
24033360:	0000009c 00000084 0000005f 0000008b     ........_.......
24033370:	000000bd 000000f9 00000028 0000003b     ........(...;...
24033380:	0000001f 000000f8 00000097 000000ff     ................
24033390:	000000de 00000005 00000098 0000000f     ................
240333a0:	000000ef 0000002f 00000011 0000008b     ..../...........
240333b0:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
240333c0:	0000006d 00000036 0000007e 000000cf     m...6...~.......
240333d0:	00000027 000000cb 00000009 000000b7     '...............
240333e0:	0000004f 00000046 0000003f 00000066     O...F...?...f...
240333f0:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
24033400:	00000075 00000027 000000ba 000000c7     u...'...........
24033410:	000000eb 000000e5 000000f1 0000007b     ............{...
24033420:	0000003d 00000007 00000039 000000f7     =.......9.......
24033430:	0000008a 00000052 00000092 000000ea     ....R...........
24033440:	0000006b 000000fb 0000005f 000000b1     k......._.......
24033450:	0000001f 0000008d 0000005d 00000008     ........].......
24033460:	00000056 00000003 00000030 00000046     V.......0...F...
24033470:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
24033480:	000000f0 000000cf 000000bc 00000020     ............ ...
24033490:	0000009a 000000f4 00000036 0000001d     ........6.......
240334a0:	000000a9 000000e3 00000091 00000061     ............a...
240334b0:	0000005e 000000e6 0000001b 00000008     ^...............
240334c0:	00000065 00000099 00000085 0000005f     e..........._...
240334d0:	00000014 000000a0 00000068 00000040     ........h...@...
240334e0:	0000008d 000000ff 000000d8 00000080     ................
240334f0:	0000004d 00000073 00000027 00000031     M...s...'...1...
24033500:	00000006 00000006 00000015 00000056     ............V...
24033510:	000000ca 00000073 000000a8 000000c9     ....s...........
24033520:	00000060 000000e2 0000007b 000000c0     `.......{.......
24033530:	0000008c 0000006b                       ....k...

24033538 <npio2_hw>:
24033538:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
24033548:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
24033558:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
24033568:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
24033578:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
24033588:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
24033598:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
240335a8:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

240335b8 <two_over_pi>:
240335b8:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
240335c8:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
240335d8:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
240335e8:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
240335f8:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
24033608:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
24033618:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
24033628:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
24033638:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
24033648:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
24033658:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
24033668:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
24033678:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
24033688:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
24033698:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
240336a8:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
240336b8:	0060e27b 00c08c6b                       {.`.k...

240336c0 <__powf_log2_data>:
240336c0:	79f8f3be 3ff661ec 5b963019 bfdefec6     ...y.a.?.0.[....
240336d0:	4aaf883d 3ff571ed 32d4fca4 bfdb0b68     =..J.q.?...2h...
240336e0:	f0f010b0 3ff49539 0a1fb77b bfd7418b     ....9..?{....A..
240336f0:	b0b80385 3ff3c995 1a6dcf7b bfd39de9     .......?{.m.....
24033700:	0c8864a5 3ff30d19 f3f2b631 bfd01d9b     .d.....?1.......
24033710:	7b0b8ea0 3ff25e22 1b3b7af0 bfc97c1d     ...{"^.?.z;..|..
24033720:	4a1a343f 3ff1bb4a 93af3c9f bfc2f9e3     ?4.JJ..?.<......
24033730:	f08ae5ba 3ff12358 bf788d5c bfb960cb     ....X#.?\.x..`..
24033740:	419900a7 3ff0953f b6475fce bfaa6f9d     ...A?..?._G..o..
24033750:	00000000 3ff00000 00000000 00000000     .......?........
24033760:	fd9a47ac 3fee608c 9f24f53d 3fb338ca     .G...`.?=.$..8.?
24033770:	1f026aa0 3feca4b3 543891ba 3fc476a9     .j.....?..8T.v.?
24033780:	576afce6 3feb2036 4ac4e4d2 3fce840b     ..jW6 .?...J...?
24033790:	63a1aa2d 3fe9c2d1 f0c6651c 3fd40645     -..c...?.e..E..?
240337a0:	037841ed 3fe886e6 2c1b9ff8 3fd88e9c     .Ax....?...,...?
240337b0:	f5534862 3fe767dc 4eb17bcc 3fdce0a4     bHS..g.?.{.N...?
240337c0:	c9496e0b 3fd27616 a075c67a bfd71969     .nI..v.?z.u.i...
240337d0:	6ca7badd 3fdec70a 48bef6c8 bfe71547     ...l...?...HG...
240337e0:	652ab82b 3ff71547                       +.*eG..?

240337e8 <PIo2>:
240337e8:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
240337f8:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
24033808:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
24033818:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

24033828 <init_jk>:
24033828:	00000002 00000003 00000004 00000006     ................

24033838 <PIo2>:
24033838:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
24033848:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
24033858:	1fc40000 1bc60000 17440000              ..........D.

24033864 <init_jk>:
24033864:	00000004 00000007 00000009              ............

24033870 <_init>:
24033870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24033872:	bf00      	nop
24033874:	bcf8      	pop	{r3, r4, r5, r6, r7}
24033876:	bc08      	pop	{r3}
24033878:	469e      	mov	lr, r3
2403387a:	4770      	bx	lr

2403387c <_fini>:
2403387c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2403387e:	bf00      	nop
24033880:	bcf8      	pop	{r3, r4, r5, r6, r7}
24033882:	bc08      	pop	{r3}
24033884:	469e      	mov	lr, r3
24033886:	4770      	bx	lr

24033888 <__randomNumber_veneer>:
24033888:	f85f f000 	ldr.w	pc, [pc]	; 2403388c <__randomNumber_veneer+0x4>
2403388c:	00006121 	.word	0x00006121

24033890 <__HAL_SPI_TxRxHalfCpltCallback_veneer>:
24033890:	f85f f000 	ldr.w	pc, [pc]	; 24033894 <__HAL_SPI_TxRxHalfCpltCallback_veneer+0x4>
24033894:	00008d61 	.word	0x00008d61

24033898 <__HAL_SAI_ErrorCallback_veneer>:
24033898:	f85f f000 	ldr.w	pc, [pc]	; 2403389c <__HAL_SAI_ErrorCallback_veneer+0x4>
2403389c:	00005e01 	.word	0x00005e01

240338a0 <__HAL_SAI_TxHalfCpltCallback_veneer>:
240338a0:	f85f f000 	ldr.w	pc, [pc]	; 240338a4 <__HAL_SAI_TxHalfCpltCallback_veneer+0x4>
240338a4:	00005ca1 	.word	0x00005ca1

240338a8 <__HAL_SAI_TxCpltCallback_veneer>:
240338a8:	f85f f000 	ldr.w	pc, [pc]	; 240338ac <__HAL_SAI_TxCpltCallback_veneer+0x4>
240338ac:	00005b41 	.word	0x00005b41

240338b0 <__parsePreset_veneer>:
240338b0:	f85f f000 	ldr.w	pc, [pc]	; 240338b4 <__parsePreset_veneer+0x4>
240338b4:	00006181 	.word	0x00006181

240338b8 <__tADSRT_setLeakFactor_veneer>:
240338b8:	f85f f000 	ldr.w	pc, [pc]	; 240338bc <__tADSRT_setLeakFactor_veneer+0x4>
240338bc:	000091c1 	.word	0x000091c1

240338c0 <__HAL_I2C_SlaveRxCpltCallback_veneer>:
240338c0:	f85f f000 	ldr.w	pc, [pc]	; 240338c4 <__HAL_I2C_SlaveRxCpltCallback_veneer+0x4>
240338c4:	000089a1 	.word	0x000089a1

240338c8 <__tExpSmooth_tick_veneer>:
240338c8:	f85f f000 	ldr.w	pc, [pc]	; 240338cc <__tExpSmooth_tick_veneer+0x4>
240338cc:	000090a1 	.word	0x000090a1

240338d0 <__tExpSmooth_setDest_veneer>:
240338d0:	f85f f000 	ldr.w	pc, [pc]	; 240338d4 <__tExpSmooth_setDest_veneer+0x4>
240338d4:	000090c1 	.word	0x000090c1

240338d8 <__LEAF_clip_veneer>:
240338d8:	f85f f000 	ldr.w	pc, [pc]	; 240338dc <__LEAF_clip_veneer+0x4>
240338dc:	000098a1 	.word	0x000098a1

240338e0 <__HAL_SPI_TxRxCpltCallback_veneer>:
240338e0:	f85f f000 	ldr.w	pc, [pc]	; 240338e4 <__HAL_SPI_TxRxCpltCallback_veneer+0x4>
240338e4:	00008a21 	.word	0x00008a21

240338e8 <__HAL_I2C_ErrorCallback_veneer>:
240338e8:	f85f f000 	ldr.w	pc, [pc]	; 240338ec <__HAL_I2C_ErrorCallback_veneer+0x4>
240338ec:	000089e1 	.word	0x000089e1

Disassembly of section .itcmram:

00000400 <updateStateFromSPIMessage>:
}
     400:	4a3a      	ldr	r2, [pc, #232]	; (4ec <updateStateFromSPIMessage+0xec>)
     402:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
     406:	1813      	adds	r3, r2, r0
     408:	b4f0      	push	{r4, r5, r6, r7}
     40a:	7e19      	ldrb	r1, [r3, #24]
     40c:	7e5e      	ldrb	r6, [r3, #25]
            Lfloat PUPLfloat = fullPUPoint - PUPInt;

            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPLfloat);
            pickupOut += tHermiteDelay_tapOut(&p->delLF,  PUPInt + 1) * PUPLfloat;
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPLfloat);
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt - 1)) * PUPLfloat;
     40e:	f001 030f 	and.w	r3, r1, #15
     412:	4c37      	ldr	r4, [pc, #220]	; (4f0 <updateStateFromSPIMessage+0xf0>)
     414:	4d37      	ldr	r5, [pc, #220]	; (4f4 <updateStateFromSPIMessage+0xf4>)
     416:	3b05      	subs	r3, #5

    //p->curr = fromBridge;
    //p->curr += fromNut;

    return p->curr;
}
     418:	4f37      	ldr	r7, [pc, #220]	; (4f8 <updateStateFromSPIMessage+0xf8>)
     41a:	ee07 3a90 	vmov	s15, r3
        p->curr = pickupOut;
     41e:	f3c1 1380 	ubfx	r3, r1, #6, #1
}
     422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     426:	7023      	strb	r3, [r4, #0]
     428:	602e      	str	r6, [r5, #0]
     42a:	f3c1 1540 	ubfx	r5, r1, #5, #1
    __HAL_DMA_ENABLE(hdma);
     42e:	7823      	ldrb	r3, [r4, #0]
     430:	f3c1 1100 	ubfx	r1, r1, #4, #1
     434:	4c31      	ldr	r4, [pc, #196]	; (4fc <updateStateFromSPIMessage+0xfc>)
     436:	ee67 7a87 	vmul.f32	s15, s15, s14
     43a:	6025      	str	r5, [r4, #0]
     43c:	4c30      	ldr	r4, [pc, #192]	; (500 <updateStateFromSPIMessage+0x100>)
     43e:	edc7 7a00 	vstr	s15, [r7]
     442:	6021      	str	r1, [r4, #0]
     444:	b14b      	cbz	r3, 45a <updateStateFromSPIMessage+0x5a>
     446:	4b2f      	ldr	r3, [pc, #188]	; (504 <updateStateFromSPIMessage+0x104>)
     448:	781b      	ldrb	r3, [r3, #0]
     44a:	b133      	cbz	r3, 45a <updateStateFromSPIMessage+0x5a>
     44c:	492e      	ldr	r1, [pc, #184]	; (508 <updateStateFromSPIMessage+0x108>)
     44e:	2b01      	cmp	r3, #1
     450:	edc1 7a00 	vstr	s15, [r1]
     454:	bf18      	it	ne
     456:	edc1 7a01 	vstrne	s15, [r1, #4]
     45a:	4410      	add	r0, r2
     45c:	4c2b      	ldr	r4, [pc, #172]	; (50c <updateStateFromSPIMessage+0x10c>)
     45e:	4a2c      	ldr	r2, [pc, #176]	; (510 <updateStateFromSPIMessage+0x110>)
     460:	7e81      	ldrb	r1, [r0, #26]
     462:	7ec3      	ldrb	r3, [r0, #27]
     464:	eddf 7a2b 	vldr	s15, [pc, #172]	; 514 <updateStateFromSPIMessage+0x114>
     468:	eb03 2301 	add.w	r3, r3, r1, lsl #8
     46c:	7f01      	ldrb	r1, [r0, #28]
     46e:	7f40      	ldrb	r0, [r0, #29]
     470:	b29b      	uxth	r3, r3
     472:	4d29      	ldr	r5, [pc, #164]	; (518 <updateStateFromSPIMessage+0x118>)
     474:	eb00 2001 	add.w	r0, r0, r1, lsl #8
     478:	4928      	ldr	r1, [pc, #160]	; (51c <updateStateFromSPIMessage+0x11c>)
     47a:	8023      	strh	r3, [r4, #0]
     47c:	8823      	ldrh	r3, [r4, #0]
     47e:	b29b      	uxth	r3, r3
     480:	ee00 3a10 	vmov	s0, r3
     484:	7813      	ldrb	r3, [r2, #0]
     486:	b2db      	uxtb	r3, r3
     488:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
     48c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     490:	7813      	ldrb	r3, [r2, #0]
     492:	ee20 0a27 	vmul.f32	s0, s0, s15
     496:	4822      	ldr	r0, [pc, #136]	; (520 <updateStateFromSPIMessage+0x120>)
     498:	b2db      	uxtb	r3, r3
     49a:	ed85 0a00 	vstr	s0, [r5]
     49e:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
     4a2:	7813      	ldrb	r3, [r2, #0]
     4a4:	b2db      	uxtb	r3, r3
  HAL_StatusTypeDef status = HAL_OK;
     4a6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    __HAL_DMA_ENABLE(hdma);
     4aa:	429c      	cmp	r4, r3
     4ac:	d01a      	beq.n	4e4 <updateStateFromSPIMessage+0xe4>
}
     4ae:	7814      	ldrb	r4, [r2, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
     4b0:	7813      	ldrb	r3, [r2, #0]
     4b2:	b2e2      	uxtb	r2, r4
    return HAL_ERROR;
     4b4:	eddf 6a1b 	vldr	s13, [pc, #108]	; 524 <updateStateFromSPIMessage+0x124>
}
     4b8:	b2db      	uxtb	r3, r3
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
     4ba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
     4be:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
     4c2:	ed91 7a00 	vldr	s14, [r1]
}
     4c6:	edd1 7a01 	vldr	s15, [r1, #4]
    __HAL_DMA_ENABLE(hdma);
     4ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
     4ce:	4b16      	ldr	r3, [pc, #88]	; (528 <updateStateFromSPIMessage+0x128>)
}
     4d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
     4d4:	ee27 7a26 	vmul.f32	s14, s14, s13
     4d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
     4dc:	ed83 7a00 	vstr	s14, [r3]
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
     4e0:	edc3 7a01 	vstr	s15, [r3, #4]
     4e4:	4811      	ldr	r0, [pc, #68]	; (52c <updateStateFromSPIMessage+0x12c>)
     4e6:	bcf0      	pop	{r4, r5, r6, r7}
     4e8:	f008 bdea 	b.w	90c0 <tExpSmooth_setDest>
     4ec:	30000800 	.word	0x30000800
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
     4f0:	200056ec 	.word	0x200056ec
     4f4:	20014a64 	.word	0x20014a64
     4f8:	200056e8 	.word	0x200056e8
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
     4fc:	200051bc 	.word	0x200051bc
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
     500:	200051c0 	.word	0x200051c0
     504:	20000015 	.word	0x20000015
     508:	20014998 	.word	0x20014998
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
     50c:	20014a70 	.word	0x20014a70
     510:	20014a98 	.word	0x20014a98
     514:	39800801 	.word	0x39800801
     518:	20014a6c 	.word	0x20014a6c
     51c:	200149a0 	.word	0x200149a0
     520:	200149a8 	.word	0x200149a8
     524:	3b000000 	.word	0x3b000000
     528:	20000a98 	.word	0x20000a98
     52c:	20014a74 	.word	0x20014a74
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
     530:	f3af 8000 	nop.w
     534:	f3af 8000 	nop.w
     538:	f3af 8000 	nop.w
     53c:	f3af 8000 	nop.w

00000540 <switchStringModel>:
     540:	2801      	cmp	r0, #1
     542:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     546:	ed2d 8b06 	vpush	{d8-d10}
     54a:	d07b      	beq.n	644 <switchStringModel+0x104>
     54c:	2802      	cmp	r0, #2
     54e:	d00e      	beq.n	56e <switchStringModel+0x2e>
     550:	4b70      	ldr	r3, [pc, #448]	; (714 <switchStringModel+0x1d4>)
     552:	2100      	movs	r1, #0
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
     554:	4a70      	ldr	r2, [pc, #448]	; (718 <switchStringModel+0x1d8>)
     556:	2401      	movs	r4, #1
     558:	681b      	ldr	r3, [r3, #0]
     55a:	7011      	strb	r1, [r2, #0]
     55c:	486f      	ldr	r0, [pc, #444]	; (71c <switchStringModel+0x1dc>)
     55e:	b2db      	uxtb	r3, r3
     560:	4a6f      	ldr	r2, [pc, #444]	; (720 <switchStringModel+0x1e0>)
     562:	6004      	str	r4, [r0, #0]
        (*isr_reg) = ((BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU));
     564:	7013      	strb	r3, [r2, #0]
     566:	ecbd 8b06 	vpop	{d8-d10}
        return HAL_ERROR;
     56a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TE;
     56e:	4f6d      	ldr	r7, [pc, #436]	; (724 <switchStringModel+0x1e4>)
        __HAL_UNLOCK(hdma);
     570:	783b      	ldrb	r3, [r7, #0]
     572:	2b01      	cmp	r3, #1
        hdma->State = HAL_DMA_STATE_READY;
     574:	d04e      	beq.n	614 <switchStringModel+0xd4>
     576:	4d6c      	ldr	r5, [pc, #432]	; (728 <switchStringModel+0x1e8>)
        return HAL_ERROR;
     578:	782b      	ldrb	r3, [r5, #0]
    if ((((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR & BDMA_CCR_CIRC) != 0U)
     57a:	2b00      	cmp	r3, #0
     57c:	d04a      	beq.n	614 <switchStringModel+0xd4>
     57e:	4e6b      	ldr	r6, [pc, #428]	; (72c <switchStringModel+0x1ec>)
     580:	2400      	movs	r4, #0
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
     582:	4630      	mov	r0, r6
     584:	3401      	adds	r4, #1
      cpltlevel_mask = BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU);
     586:	f00a fce7 	bl	af58 <__tSimpleLivingString3_free_veneer>
     58a:	782b      	ldrb	r3, [r5, #0]
     58c:	3604      	adds	r6, #4
     58e:	42a3      	cmp	r3, r4
    isr_reg  = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
     590:	dcf7      	bgt.n	582 <switchStringModel+0x42>
    ifcr_reg = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
     592:	2b00      	cmp	r3, #0
     594:	d03e      	beq.n	614 <switchStringModel+0xd4>
     596:	4c66      	ldr	r4, [pc, #408]	; (730 <switchStringModel+0x1f0>)
     598:	2600      	movs	r6, #0
     59a:	eddf aa66 	vldr	s21, [pc, #408]	; 734 <switchStringModel+0x1f4>
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
     59e:	ed9f aa66 	vldr	s20, [pc, #408]	; 738 <switchStringModel+0x1f8>
     5a2:	eddf 9a66 	vldr	s19, [pc, #408]	; 73c <switchStringModel+0x1fc>
      cpltlevel_mask = BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU);
     5a6:	ed9f 8a66 	vldr	s16, [pc, #408]	; 740 <switchStringModel+0x200>
     5aa:	ed9f 9a66 	vldr	s18, [pc, #408]	; 744 <switchStringModel+0x204>
     5ae:	eddf 8a66 	vldr	s17, [pc, #408]	; 748 <switchStringModel+0x208>
     5b2:	4b66      	ldr	r3, [pc, #408]	; (74c <switchStringModel+0x20c>)
      (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
     5b4:	eef6 1a08 	vmov.f32	s3, #104	; 0x3f400000  0.750
     5b8:	eeb0 4a6a 	vmov.f32	s8, s21
     5bc:	eddf 3a5d 	vldr	s7, [pc, #372]	; 734 <switchStringModel+0x1f4>
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
     5c0:	eeb0 3a4a 	vmov.f32	s6, s20
     5c4:	2200      	movs	r2, #0
     5c6:	eef0 2a69 	vmov.f32	s5, s19
     5ca:	2102      	movs	r1, #2
     5cc:	eeb0 2a48 	vmov.f32	s4, s16

static inline void sub_collector_save(_sub_collector* collector, _auto_correlation_info info)
{
    collector->_fundamental = info;
    collector->_fundamental._harmonic = 1;
    collector->_first_period = sub_collector_period_of(collector, collector->_fundamental);
     5d0:	4620      	mov	r0, r4
     5d2:	eeb0 1a49 	vmov.f32	s2, s18
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
     5d6:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 750 <switchStringModel+0x210>
     5da:	eef0 0a68 	vmov.f32	s1, s17
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
     5de:	3601      	adds	r6, #1
     5e0:	f00a fce2 	bl	afa8 <__tSimpleLivingString5_initToPool_veneer>
	pb->buf[i++] = (BYTE)c;
     5e4:	4620      	mov	r0, r4
     5e6:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
		i = (bw == (UINT)i) ? 0 : -1;
	}
	pb->idx = i;
	pb->nchr++;
     5ea:	f00a fd91 	bl	b110 <__tSimpleLivingString5_setPluckPosition_veneer>
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			if (!(f & 2)) {
				while (j++ < w) putc_bfd(&pb, ' ');
     5ee:	4620      	mov	r0, r4
	pb->idx = i;
     5f0:	ed9f 0a58 	vldr	s0, [pc, #352]	; 754 <switchStringModel+0x214>
	pb->nchr++;
     5f4:	f00a fcc8 	bl	af88 <__tSimpleLivingString5_setPrepPosition_veneer>
     5f8:	4620      	mov	r0, r4
				while (j++ < w) putc_bfd(&pb, ' ');
     5fa:	eeb0 0a48 	vmov.f32	s0, s16
     5fe:	f00a fcd7 	bl	afb0 <__tSimpleLivingString5_setPrepIndex_veneer>
     602:	4620      	mov	r0, r4
     604:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
     608:	3404      	adds	r4, #4
     60a:	f00a fc5d 	bl	aec8 <__tSimpleLivingString5_setPickupPoint_veneer>
     60e:	782b      	ldrb	r3, [r5, #0]
			}
			while (*p) putc_bfd(&pb, *p++);
			while (j++ < w) putc_bfd(&pb, ' ');
     610:	42b3      	cmp	r3, r6
     612:	dcce      	bgt.n	5b2 <switchStringModel+0x72>
			while (*p) putc_bfd(&pb, *p++);
     614:	4e50      	ldr	r6, [pc, #320]	; (758 <switchStringModel+0x218>)
     616:	2400      	movs	r4, #0
     618:	4d50      	ldr	r5, [pc, #320]	; (75c <switchStringModel+0x21c>)
     61a:	f04f 0901 	mov.w	r9, #1
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
     61e:	f8df 816c 	ldr.w	r8, [pc, #364]	; 78c <switchStringModel+0x24c>
     622:	4628      	mov	r0, r5
     624:	ecb6 0a01 	vldmia	r6!, {s0}
		switch (d) {				/* Type is... */
     628:	f00a fd8a 	bl	b140 <__tExpSmooth_setValAndDest_veneer>
     62c:	f808 9004 	strb.w	r9, [r8, r4]
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
     630:	3401      	adds	r4, #1
     632:	3504      	adds	r5, #4
     634:	2c0c      	cmp	r4, #12
     636:	d1f4      	bne.n	622 <switchStringModel+0xe2>
     638:	4b49      	ldr	r3, [pc, #292]	; (760 <switchStringModel+0x220>)
	if (i < 0) return;
     63a:	4a4a      	ldr	r2, [pc, #296]	; (764 <switchStringModel+0x224>)
     63c:	f887 9000 	strb.w	r9, [r7]
	pb->buf[i++] = (BYTE)c;
     640:	601a      	str	r2, [r3, #0]
     642:	e785      	b.n	550 <switchStringModel+0x10>
     644:	4f37      	ldr	r7, [pc, #220]	; (724 <switchStringModel+0x1e4>)
     646:	783b      	ldrb	r3, [r7, #0]
     648:	2b00      	cmp	r3, #0
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
     64a:	d046      	beq.n	6da <switchStringModel+0x19a>
	pb->buf[i++] = (BYTE)c;
     64c:	4d36      	ldr	r5, [pc, #216]	; (728 <switchStringModel+0x1e8>)
     64e:	782b      	ldrb	r3, [r5, #0]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
     650:	2b00      	cmp	r3, #0
	pb->nchr++;
     652:	d042      	beq.n	6da <switchStringModel+0x19a>
     654:	4e36      	ldr	r6, [pc, #216]	; (730 <switchStringModel+0x1f0>)
	pb->idx = i;
     656:	2400      	movs	r4, #0
	pb->nchr++;
     658:	4630      	mov	r0, r6
     65a:	3401      	adds	r4, #1
     65c:	f00a fdd4 	bl	b208 <__tSimpleLivingString5_free_veneer>
     660:	782b      	ldrb	r3, [r5, #0]
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
     662:	3604      	adds	r6, #4
     664:	42a3      	cmp	r3, r4
     666:	dcf7      	bgt.n	658 <switchStringModel+0x118>
     668:	b3bb      	cbz	r3, 6da <switchStringModel+0x19a>
     66a:	4c30      	ldr	r4, [pc, #192]	; (72c <switchStringModel+0x1ec>)
     66c:	2600      	movs	r6, #0
		i = (bw == (UINT)i) ? 0 : -1;
     66e:	eddf aa3e 	vldr	s21, [pc, #248]	; 768 <switchStringModel+0x228>
     672:	ed9f 8a33 	vldr	s16, [pc, #204]	; 740 <switchStringModel+0x200>
     676:	ed9f aa33 	vldr	s20, [pc, #204]	; 744 <switchStringModel+0x204>
     67a:	eddf 9a3c 	vldr	s19, [pc, #240]	; 76c <switchStringModel+0x22c>
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			str[i++] = d + '0';
		} while (v && i < sizeof str / sizeof str[0]);
		if (f & 8) str[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
     67e:	ed9f 9a3c 	vldr	s18, [pc, #240]	; 770 <switchStringModel+0x230>
     682:	eddf 8a3c 	vldr	s17, [pc, #240]	; 774 <switchStringModel+0x234>
	if (i < 0) return;
     686:	4b31      	ldr	r3, [pc, #196]	; (74c <switchStringModel+0x20c>)
     688:	eef0 2a6a 	vmov.f32	s5, s21
	pb->buf[i++] = (BYTE)c;
     68c:	eef0 1a48 	vmov.f32	s3, s16
     690:	ed9f 2a35 	vldr	s4, [pc, #212]	; 768 <switchStringModel+0x228>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
     694:	eeb0 1a4a 	vmov.f32	s2, s20
	pb->buf[i++] = (BYTE)c;
     698:	2200      	movs	r2, #0
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
     69a:	eef0 0a69 	vmov.f32	s1, s19
	pb->nchr++;
     69e:	2104      	movs	r1, #4
	pb->idx = i;
     6a0:	4620      	mov	r0, r4
	pb->nchr++;
     6a2:	eeb0 0a49 	vmov.f32	s0, s18
     6a6:	f00a fc67 	bl	af78 <__tSimpleLivingString3_initToPool_veneer>
	return EOF;
     6aa:	4620      	mov	r0, r4
	}

	va_end(arp);

	return putc_flush(&pb);
}
     6ac:	eeb0 0a68 	vmov.f32	s0, s17
     6b0:	3601      	adds	r6, #1
     6b2:	f00a fd5d 	bl	b170 <__tSimpleLivingString3_setTargetLev_veneer>
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
     6b6:	4620      	mov	r0, r4
     6b8:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 778 <switchStringModel+0x238>
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
     6bc:	f00a fde0 	bl	b280 <__tSimpleLivingString3_setLevSmoothFactor_veneer>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
     6c0:	4620      	mov	r0, r4
     6c2:	eeb0 0a48 	vmov.f32	s0, s16
     6c6:	f00a fbfb 	bl	aec0 <__tSimpleLivingString3_setLevStrength_veneer>
		i = (bw == (UINT)i) ? 0 : -1;
     6ca:	4620      	mov	r0, r4
     6cc:	2101      	movs	r1, #1
     6ce:	3404      	adds	r4, #4
     6d0:	f00a fc66 	bl	afa0 <__tSimpleLivingString3_setLevMode_veneer>
     6d4:	782b      	ldrb	r3, [r5, #0]
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
     6d6:	42b3      	cmp	r3, r6
     6d8:	dcd5      	bgt.n	686 <switchStringModel+0x146>
     6da:	4e28      	ldr	r6, [pc, #160]	; (77c <switchStringModel+0x23c>)
     6dc:	2400      	movs	r4, #0
     6de:	4d1f      	ldr	r5, [pc, #124]	; (75c <switchStringModel+0x21c>)
     6e0:	f04f 0901 	mov.w	r9, #1
		i = (bw == (UINT)i) ? 0 : -1;
     6e4:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 78c <switchStringModel+0x24c>
     6e8:	4628      	mov	r0, r5
     6ea:	ecb6 0a01 	vldmia	r6!, {s0}
				while (j++ < w) putc_bfd(&pb, ' ');
     6ee:	f00a fd27 	bl	b140 <__tExpSmooth_setValAndDest_veneer>
     6f2:	f808 9004 	strb.w	r9, [r8, r4]
     6f6:	3401      	adds	r4, #1
     6f8:	3504      	adds	r5, #4
     6fa:	2c0c      	cmp	r4, #12
     6fc:	d1f4      	bne.n	6e8 <switchStringModel+0x1a8>
            if (p < b) {
     6fe:	ed9f 0a20 	vldr	s0, [pc, #128]	; 780 <switchStringModel+0x240>
            if (p < 0.0f) {
     702:	4820      	ldr	r0, [pc, #128]	; (784 <switchStringModel+0x244>)
     704:	f00a fd48 	bl	b198 <__tVZFilter_setFreq_veneer>
     708:	2100      	movs	r1, #0
     70a:	4b15      	ldr	r3, [pc, #84]	; (760 <switchStringModel+0x220>)
                p += 1.0f;
     70c:	4a1e      	ldr	r2, [pc, #120]	; (788 <switchStringModel+0x248>)
     70e:	7039      	strb	r1, [r7, #0]
	i = lrintf(r - 0.5f);
     710:	601a      	str	r2, [r3, #0]
     712:	e71d      	b.n	550 <switchStringModel+0x10>
	r = MINBLEP_PHASES * phase * inv_w;
     714:	20014a64 	.word	0x20014a64
	_tMBSineTri* c = *osc;
     718:	20014cc0 	.word	0x20014cc0
	i = lrintf(r - 0.5f);
     71c:	20005884 	.word	0x20005884
                p += 1.0f;
     720:	20000744 	.word	0x20000744
                x = 0.5f - (p - b) * invB1;
     724:	20014a99 	.word	0x20014a99
	i = lrintf(r - 0.5f);
     728:	20000015 	.word	0x20000015
                x = 0.5f - (p - b) * invB1;
     72c:	20005534 	.word	0x20005534
                tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
     730:	200149b0 	.word	0x200149b0
                x = 0.5f - (p - b) * invB1;
     734:	3d4ccccd 	.word	0x3d4ccccd
	i = lrintf(r - 0.5f);
     738:	3e99999a 	.word	0x3e99999a
	r -= (Lfloat)i;
     73c:	3f2a7efa 	.word	0x3f2a7efa
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     740:	00000000 	.word	0x00000000
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     744:	3f7fff58 	.word	0x3f7fff58
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     748:	468ca000 	.word	0x468ca000
	r -= (Lfloat)i;
     74c:	20005650 	.word	0x20005650
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     750:	43dc0000 	.word	0x43dc0000
	r -= (Lfloat)i;
     754:	3ecccccd 	.word	0x3ecccccd
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     758:	2000018c 	.word	0x2000018c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     75c:	200053dc 	.word	0x200053dc
	c->BLEPindices[c->mostRecentBLEP] = i;
     760:	20000a7c 	.word	0x20000a7c
     764:	00001061 	.word	0x00001061
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     768:	3c23d70a 	.word	0x3c23d70a
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     76c:	4684d000 	.word	0x4684d000
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     770:	435c0000 	.word	0x435c0000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     774:	3d40c0f0 	.word	0x3d40c0f0
     778:	3cf753bf 	.word	0x3cf753bf
            x = 0.5f - (p_at_reset - b) * invB1;
     77c:	2000015c 	.word	0x2000015c
                if (p_at_reset >= 1.0f) {
     780:	45504000 	.word	0x45504000
            x = 0.5f - (p_at_reset - b) * invB1;
     784:	200056c0 	.word	0x200056c0
     788:	00000ac1 	.word	0x00000ac1
                if (p_at_reset >= 1.0f) {
     78c:	200053a0 	.word	0x200053a0
            x = 0.5f - (p_at_reset - b) * invB1;
     790:	f3af 8000 	nop.w
                if (p_at_reset >= 1.0f) {
     794:	f3af 8000 	nop.w
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
     798:	f3af 8000 	nop.w
     79c:	f3af 8000 	nop.w

000007a0 <audioTickString1>:
     7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7a4:	4ba1      	ldr	r3, [pc, #644]	; (a2c <audioTickString1+0x28c>)
	i = lrintf(r - 0.5f);
     7a6:	4ca2      	ldr	r4, [pc, #648]	; (a30 <audioTickString1+0x290>)
     7a8:	48a2      	ldr	r0, [pc, #648]	; (a34 <audioTickString1+0x294>)
     7aa:	4ea3      	ldr	r6, [pc, #652]	; (a38 <audioTickString1+0x298>)
     7ac:	4625      	mov	r5, r4
     7ae:	f104 0830 	add.w	r8, r4, #48	; 0x30
	r -= (Lfloat)i;
     7b2:	ed2d 8b0a 	vpush	{d8-d12}
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     7b6:	b087      	sub	sp, #28
     7b8:	781b      	ldrb	r3, [r3, #0]
	c->BLEPindices[c->mostRecentBLEP] = i;
     7ba:	af00      	add	r7, sp, #0
     7bc:	009b      	lsls	r3, r3, #2
	r -= (Lfloat)i;
     7be:	3307      	adds	r3, #7
     7c0:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
     7c4:	ebad 0d03 	sub.w	sp, sp, r3
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     7c8:	f008 fc6a 	bl	90a0 <tExpSmooth_tick>
     7cc:	eeb0 8a40 	vmov.f32	s16, s0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     7d0:	46e9      	mov	r9, sp
     7d2:	4630      	mov	r0, r6
	c->BLEPindices[c->mostRecentBLEP] = i;
     7d4:	3604      	adds	r6, #4
     7d6:	f008 fc63 	bl	90a0 <tExpSmooth_tick>
     7da:	eca5 0a01 	vstmia	r5!, {s0}
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     7de:	4545      	cmp	r5, r8
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     7e0:	d1f7      	bne.n	7d2 <audioTickString1+0x32>
     7e2:	4b92      	ldr	r3, [pc, #584]	; (a2c <audioTickString1+0x28c>)
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     7e4:	4a95      	ldr	r2, [pc, #596]	; (a3c <audioTickString1+0x29c>)
     7e6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     7e8:	781b      	ldrb	r3, [r3, #0]
     7ea:	eddf ba95 	vldr	s23, [pc, #596]	; a40 <audioTickString1+0x2a0>
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     7ee:	6011      	str	r1, [r2, #0]
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     7f0:	2b00      	cmp	r3, #0
     7f2:	f000 80e0 	beq.w	9b6 <audioTickString1+0x216>
     7f6:	4b93      	ldr	r3, [pc, #588]	; (a44 <audioTickString1+0x2a4>)
     7f8:	eef0 8a6b 	vmov.f32	s17, s23
     7fc:	4a92      	ldr	r2, [pc, #584]	; (a48 <audioTickString1+0x2a8>)
     7fe:	2600      	movs	r6, #0
     800:	613b      	str	r3, [r7, #16]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     802:	464b      	mov	r3, r9
     804:	4d91      	ldr	r5, [pc, #580]	; (a4c <audioTickString1+0x2ac>)
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     806:	f8df 92a4 	ldr.w	r9, [pc, #676]	; aac <audioTickString1+0x30c>
            if (p >= b) {
     80a:	469a      	mov	sl, r3
     80c:	eddf aa90 	vldr	s21, [pc, #576]	; a50 <audioTickString1+0x2b0>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     810:	ed9f aa90 	vldr	s20, [pc, #576]	; a54 <audioTickString1+0x2b4>
            if (p >= b) {
     814:	ed9f ba90 	vldr	s22, [pc, #576]	; a58 <audioTickString1+0x2b8>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     818:	eddf 9a90 	vldr	s19, [pc, #576]	; a5c <audioTickString1+0x2bc>
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     81c:	f8df 8290 	ldr.w	r8, [pc, #656]	; ab0 <audioTickString1+0x310>
	c->BLEPindices[c->mostRecentBLEP] = i;
     820:	498f      	ldr	r1, [pc, #572]	; (a60 <audioTickString1+0x2c0>)
     822:	f8df b290 	ldr.w	fp, [pc, #656]	; ab4 <audioTickString1+0x314>
     826:	ed9f 9a8f 	vldr	s18, [pc, #572]	; a64 <audioTickString1+0x2c4>
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     82a:	617a      	str	r2, [r7, #20]
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     82c:	4b8e      	ldr	r3, [pc, #568]	; (a68 <audioTickString1+0x2c8>)
     82e:	eeb0 ca68 	vmov.f32	s24, s17
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     832:	00b2      	lsls	r2, r6, #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     834:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     838:	edd3 7a00 	vldr	s15, [r3]
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     83c:	693b      	ldr	r3, [r7, #16]
     83e:	ecb3 7a01 	vldmia	r3!, {s14}
     842:	ee77 7a87 	vadd.f32	s15, s15, s14
     846:	613b      	str	r3, [r7, #16]
     848:	eef5 7ac0 	vcmpe.f32	s15, #0.0
            if (p >= b) {
     84c:	ecea 7a01 	vstmia	sl!, {s15}
            x = -0.5f + p * invB;
     850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     854:	f100 80e6 	bmi.w	a24 <audioTickString1+0x284>
     858:	ed4a 7a01 	vstr	s15, [sl, #-4]
                p -= 1.0f;
     85c:	fe87 caea 	vminnm.f32	s24, s15, s21
     860:	f811 3b01 	ldrb.w	r3, [r1], #1
                x = -0.5f + p * invB;
     864:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
	_tMBSineTri* c = *osc;
     868:	eef0 ca4a 	vmov.f32	s25, s20
                tMBSineTri_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
     86c:	ed0a ca01 	vstr	s24, [sl, #-4]
                x = -0.5f + p * invB;
     870:	b12b      	cbz	r3, 87e <audioTickString1+0xde>
     872:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
	i = lrintf(r - 0.5f);
     876:	eee7 7a0b 	vfma.f32	s15, s14, s22
     87a:	eef0 ca67 	vmov.f32	s25, s15
	r -= (Lfloat)i;
     87e:	4628      	mov	r0, r5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     880:	ed94 0a08 	vldr	s0, [r4, #32]
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     884:	3601      	adds	r6, #1
     886:	e9c7 1201 	strd	r1, r2, [r7, #4]
	r -= (Lfloat)i;
     88a:	f00a fcad 	bl	b1e8 <__tSimpleLivingString3_setPickupPoint_veneer>
	scale *= w;
     88e:	4628      	mov	r0, r5
     890:	eeb0 0a6c 	vmov.f32	s0, s25
                x = -0.5f + p * invB;
     894:	f00a fc18 	bl	b0c8 <__tSimpleLivingString3_setDecay_veneer>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     898:	4628      	mov	r0, r5
	r -= (Lfloat)i;
     89a:	eeb0 0a49 	vmov.f32	s0, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     89e:	f00a fbbb 	bl	b018 <__tSimpleLivingString3_setDampFreq_veneer>
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     8a2:	ed94 0a00 	vldr	s0, [r4]
	c->BLEPindices[c->mostRecentBLEP] = i;
     8a6:	4628      	mov	r0, r5
     8a8:	ee20 0a29 	vmul.f32	s0, s0, s19
     8ac:	f00a fb08 	bl	aec0 <__tSimpleLivingString3_setLevStrength_veneer>
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     8b0:	ed9f 7a6e 	vldr	s14, [pc, #440]	; a6c <audioTickString1+0x2cc>
     8b4:	edd4 7a05 	vldr	s15, [r4, #20]
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     8b8:	eeb0 0a4c 	vmov.f32	s0, s24
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     8bc:	f8d4 c02c 	ldr.w	ip, [r4, #44]	; 0x2c
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     8c0:	ee67 7a87 	vmul.f32	s15, s15, s14
     8c4:	60fd      	str	r5, [r7, #12]
     8c6:	f855 0b04 	ldr.w	r0, [r5], #4
     8ca:	f8c0 c068 	str.w	ip, [r0, #104]	; 0x68
}
     8ce:	edc0 7a19 	vstr	s15, [r0, #100]	; 0x64
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
     8d2:	f00a fb75 	bl	afc0 <__mtof_veneer>
	i = lrintf(r - 0.5f);
     8d6:	4648      	mov	r0, r9
     8d8:	f008 fbf2 	bl	90c0 <tExpSmooth_setDest>
                x = 0.5f - (p - b) * invB1;
     8dc:	4648      	mov	r0, r9
     8de:	f008 fbdf 	bl	90a0 <tExpSmooth_tick>
	i = lrintf(r - 0.5f);
     8e2:	68fb      	ldr	r3, [r7, #12]
     8e4:	f109 0904 	add.w	r9, r9, #4
     8e8:	4618      	mov	r0, r3
                x = 0.5f - (p - b) * invB1;
     8ea:	f00a fc71 	bl	b1d0 <__tSimpleLivingString3_setFreq_veneer>
	i = lrintf(r - 0.5f);
     8ee:	4b60      	ldr	r3, [pc, #384]	; (a70 <audioTickString1+0x2d0>)
     8f0:	ed9b 0a00 	vldr	s0, [fp]
	r -= (Lfloat)i;
     8f4:	4640      	mov	r0, r8
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     8f6:	edd3 7a00 	vldr	s15, [r3]
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     8fa:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     8fe:	eeb0 0ac0 	vabs.f32	s0, s0
	r -= (Lfloat)i;
     902:	f008 fbdd 	bl	90c0 <tExpSmooth_setDest>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     906:	4640      	mov	r0, r8
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     908:	f008 fbca 	bl	90a0 <tExpSmooth_tick>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     90c:	4959      	ldr	r1, [pc, #356]	; (a74 <audioTickString1+0x2d4>)
     90e:	68ba      	ldr	r2, [r7, #8]
	r -= (Lfloat)i;
     910:	f108 0804 	add.w	r8, r8, #4
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     914:	1888      	adds	r0, r1, r2
     916:	f00a fb3b 	bl	af90 <__tEnvelopeFollower_tick_veneer>
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     91a:	f8db 2000 	ldr.w	r2, [fp]
	c->BLEPindices[c->mostRecentBLEP] = i;
     91e:	4b54      	ldr	r3, [pc, #336]	; (a70 <audioTickString1+0x2d0>)
     920:	eeb0 ca40 	vmov.f32	s24, s0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     924:	4854      	ldr	r0, [pc, #336]	; (a78 <audioTickString1+0x2d8>)
     926:	601a      	str	r2, [r3, #0]
     928:	f00a fbde 	bl	b0e8 <__tNoise_tick_veneer>
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     92c:	4853      	ldr	r0, [pc, #332]	; (a7c <audioTickString1+0x2dc>)
     92e:	f00a fad7 	bl	aee0 <__tVZFilter_tickEfficient_veneer>
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     932:	eef2 5a04 	vmov.f32	s11, #36	; 0x41200000  10.0
            x = -0.5f + p_at_reset * invB;
     936:	ed9f 6a52 	vldr	s12, [pc, #328]	; a80 <audioTickString1+0x2e0>
    sinPhase += inc_amount;
     93a:	ed94 7a01 	vldr	s14, [r4, #4]
    p += inc_amount;
     93e:	edd4 7a07 	vldr	s15, [r4, #28]
            x = -0.5f + p_at_reset * invB;
     942:	697b      	ldr	r3, [r7, #20]
     944:	ee27 7a25 	vmul.f32	s14, s14, s11
            else if (sw < 0)
     948:	ee67 7a86 	vmul.f32	s15, s15, s12
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
     94c:	ecf3 6a01 	vldmia	r3!, {s13}
     950:	ee27 7a0c 	vmul.f32	s14, s14, s24
     954:	ee67 7aa6 	vmul.f32	s15, s15, s13
     958:	617b      	str	r3, [r7, #20]
                    p_at_reset -= 1.0f;
     95a:	68fb      	ldr	r3, [r7, #12]
     95c:	eee0 7a07 	vfma.f32	s15, s0, s14
                    x = -0.5f + p_at_reset * invB;
     960:	4618      	mov	r0, r3
                    p_at_reset -= 1.0f;
     962:	eeb0 0a67 	vmov.f32	s0, s15
	i = lrintf(r - 0.5f);
     966:	f00a fb37 	bl	afd8 <__tSimpleLivingString3_tick_veneer>
                    x = -0.5f + p_at_reset * invB;
     96a:	ee30 7a00 	vadd.f32	s14, s0, s0
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
     96e:	eddf 7a45 	vldr	s15, [pc, #276]	; a84 <audioTickString1+0x2e4>
                    x = -0.5f + p_at_reset * invB;
     972:	eddf 3a45 	vldr	s7, [pc, #276]	; a88 <audioTickString1+0x2e8>
	i = lrintf(r - 0.5f);
     976:	ee67 5a07 	vmul.f32	s11, s14, s14
     97a:	eddf 4a44 	vldr	s9, [pc, #272]	; a8c <audioTickString1+0x2ec>
	r -= (Lfloat)i;
     97e:	ed9f 4a44 	vldr	s8, [pc, #272]	; a90 <audioTickString1+0x2f0>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     982:	ed9f 6a44 	vldr	s12, [pc, #272]	; a94 <audioTickString1+0x2f4>
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     986:	ee67 6a25 	vmul.f32	s13, s14, s11
	r -= (Lfloat)i;
     98a:	4b28      	ldr	r3, [pc, #160]	; (a2c <audioTickString1+0x28c>)
     98c:	ed9f 5a42 	vldr	s10, [pc, #264]	; a98 <audioTickString1+0x2f8>
	i = lrintf(r - 0.5f);
     990:	781b      	ldrb	r3, [r3, #0]
     992:	ee66 7aa7 	vmul.f32	s15, s13, s15
	r -= (Lfloat)i;
     996:	6879      	ldr	r1, [r7, #4]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     998:	ee67 6a26 	vmul.f32	s13, s14, s13
	i = lrintf(r - 0.5f);
     99c:	42b3      	cmp	r3, r6
     99e:	eee5 7aa3 	vfma.f32	s15, s11, s7
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     9a2:	eea6 6a84 	vfma.f32	s12, s13, s8
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     9a6:	eee6 7aa4 	vfma.f32	s15, s13, s9
	c->BLEPindices[c->mostRecentBLEP] = i;
     9aa:	eee6 7a07 	vfma.f32	s15, s12, s14
     9ae:	eee7 ba85 	vfma.f32	s23, s15, s10
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     9b2:	f73f af3b 	bgt.w	82c <audioTickString1+0x8c>
     9b6:	ed9f 0a39 	vldr	s0, [pc, #228]	; a9c <audioTickString1+0x2fc>
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     9ba:	eddf 7a39 	vldr	s15, [pc, #228]	; aa0 <audioTickString1+0x300>
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     9be:	eef0 0a40 	vmov.f32	s1, s0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     9c2:	ed9f 1a23 	vldr	s2, [pc, #140]	; a50 <audioTickString1+0x2b0>
     9c6:	eee8 0a27 	vfma.f32	s1, s16, s15
     9ca:	f008 ff69 	bl	98a0 <LEAF_clip>
	i = lrintf(r - 0.5f);
     9ce:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	r -= (Lfloat)i;
     9d2:	4934      	ldr	r1, [pc, #208]	; (aa4 <audioTickString1+0x304>)
     9d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	c->BLEPindices[c->mostRecentBLEP] = i;
     9d8:	4a33      	ldr	r2, [pc, #204]	; (aa8 <audioTickString1+0x308>)
     9da:	371c      	adds	r7, #28
     9dc:	ee17 3a10 	vmov	r3, s14
	r -= (Lfloat)i;
     9e0:	edd1 6a00 	vldr	s13, [r1]
     9e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                x = -0.5f + p * invB;
     9e8:	1c59      	adds	r1, r3, #1
     9ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     9ee:	ee77 7ac0 	vsub.f32	s15, s15, s0
     9f2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	_tMBSineTri* c = *osc;
     9f6:	ee30 0a47 	vsub.f32	s0, s0, s14
                x = -0.5f + p * invB;
     9fa:	ee6b baa6 	vmul.f32	s23, s23, s13
	i = lrintf(r - 0.5f);
     9fe:	eb02 0281 	add.w	r2, r2, r1, lsl #2
     a02:	ee77 7a87 	vadd.f32	s15, s15, s14
	r -= (Lfloat)i;
     a06:	ed93 7a00 	vldr	s14, [r3]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     a0a:	edd2 6a00 	vldr	s13, [r2]
	scale *= w;
     a0e:	ee20 0a26 	vmul.f32	s0, s0, s13
	r -= (Lfloat)i;
     a12:	eea7 0a27 	vfma.f32	s0, s14, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     a16:	ee2b 0a80 	vmul.f32	s0, s23, s0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     a1a:	46bd      	mov	sp, r7
                x = -0.5f + p * invB;
     a1c:	ecbd 8b0a 	vpop	{d8-d12}
	scale *= w;
     a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     a24:	ed4a 8a01 	vstr	s17, [sl, #-4]
	r -= (Lfloat)i;
     a28:	e71a      	b.n	860 <audioTickString1+0xc0>
     a2a:	bf00      	nop
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     a2c:	20000015 	.word	0x20000015
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     a30:	200053ac 	.word	0x200053ac
	c->BLEPindices[c->mostRecentBLEP] = i;
     a34:	20014a74 	.word	0x20014a74
     a38:	200053dc 	.word	0x200053dc
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     a3c:	20000154 	.word	0x20000154
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     a40:	00000000 	.word	0x00000000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     a44:	20014998 	.word	0x20014998
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     a48:	20000a80 	.word	0x20000a80
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     a4c:	20005534 	.word	0x20005534
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     a50:	42fe0000 	.word	0x42fe0000
     a54:	3dcccccd 	.word	0x3dcccccd
     a58:	44480000 	.word	0x44480000
     a5c:	3d108950 	.word	0x3d108950
}
     a60:	2000554c 	.word	0x2000554c
        	p = (1.0f - eof_offset) + 0.25f;
     a64:	46768933 	.word	0x46768933
        	sinPhase = (1.0f - eof_offset);
     a68:	20014990 	.word	0x20014990
        	p = (1.0f - eof_offset) + 0.25f;
     a6c:	bcf5c28f 	.word	0xbcf5c28f
        if (!k) {
     a70:	20005888 	.word	0x20005888
                if (p_at_reset < 0.0f) {
     a74:	20000aa0 	.word	0x20000aa0
     a78:	200056ac 	.word	0x200056ac
     a7c:	200056c0 	.word	0x200056c0
            x = -0.5f + p_at_reset * invB;
     a80:	3f666666 	.word	0x3f666666
     a84:	3b0a47ed 	.word	0x3b0a47ed
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
     a88:	3bdd2f1b 	.word	0x3bdd2f1b
     a8c:	39f9096c 	.word	0x39f9096c
            x = -0.5f + p_at_reset * invB;
     a90:	3a59d777 	.word	0x3a59d777
     a94:	3d99999a 	.word	0x3d99999a
	r = MINBLEP_PHASES * phase * inv_w;
     a98:	408bbced 	.word	0x408bbced
	i = lrintf(r - 0.5f);
     a9c:	423c0000 	.word	0x423c0000
     aa0:	42a00000 	.word	0x42a00000
     aa4:	2000000c 	.word	0x2000000c
     aa8:	20000540 	.word	0x20000540
	r -= (Lfloat)i;
     aac:	2000584c 	.word	0x2000584c
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     ab0:	20000aa8 	.word	0x20000aa8
	c->BLEPindices[c->mostRecentBLEP] = i;
     ab4:	20000a98 	.word	0x20000a98
	r -= (Lfloat)i;
     ab8:	f3af 8000 	nop.w
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     abc:	f3af 8000 	nop.w

00000ac0 <audioFrameString1>:
	r -= (Lfloat)i;
     ac0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     ac4:	2201      	movs	r2, #1
     ac6:	4680      	mov	r8, r0
     ac8:	2108      	movs	r1, #8
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     aca:	486b      	ldr	r0, [pc, #428]	; (c78 <audioFrameString1+0x1b8>)
     acc:	ed2d 8b04 	vpush	{d8-d9}
	c->BLEPindices[c->mostRecentBLEP] = i;
     ad0:	f00a faae 	bl	b030 <__HAL_GPIO_WritePin_veneer>
     ad4:	4a69      	ldr	r2, [pc, #420]	; (c7c <audioFrameString1+0x1bc>)
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     ad6:	4b6a      	ldr	r3, [pc, #424]	; (c80 <audioFrameString1+0x1c0>)
     ad8:	6856      	ldr	r6, [r2, #4]
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     ada:	781a      	ldrb	r2, [r3, #0]
     adc:	b16a      	cbz	r2, afa <audioFrameString1+0x3a>
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     ade:	4a69      	ldr	r2, [pc, #420]	; (c84 <audioFrameString1+0x1c4>)
     ae0:	7811      	ldrb	r1, [r2, #0]
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     ae2:	b141      	cbz	r1, af6 <audioFrameString1+0x36>
     ae4:	2200      	movs	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     ae6:	4868      	ldr	r0, [pc, #416]	; (c88 <audioFrameString1+0x1c8>)
     ae8:	4d68      	ldr	r5, [pc, #416]	; (c8c <audioFrameString1+0x1cc>)
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     aea:	2901      	cmp	r1, #1
     aec:	7002      	strb	r2, [r0, #0]
     aee:	802a      	strh	r2, [r5, #0]
     af0:	d001      	beq.n	af6 <audioFrameString1+0x36>
     af2:	7042      	strb	r2, [r0, #1]
     af4:	806a      	strh	r2, [r5, #2]
     af6:	2200      	movs	r2, #0
     af8:	701a      	strb	r2, [r3, #0]
     afa:	4a65      	ldr	r2, [pc, #404]	; (c90 <audioFrameString1+0x1d0>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     afc:	6813      	ldr	r3, [r2, #0]
     afe:	b373      	cbz	r3, b5e <audioFrameString1+0x9e>
	scale *= w;
     b00:	f8df a180 	ldr.w	sl, [pc, #384]	; c84 <audioFrameString1+0x1c4>
            if (p < b) {
     b04:	f89a 1000 	ldrb.w	r1, [sl]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     b08:	b339      	cbz	r1, b5a <audioFrameString1+0x9a>
     b0a:	ed9f 9a62 	vldr	s18, [pc, #392]	; c94 <audioFrameString1+0x1d4>
            if (p < b) {
     b0e:	2400      	movs	r4, #0
     b10:	eddf 8a61 	vldr	s17, [pc, #388]	; c98 <audioFrameString1+0x1d8>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     b14:	4f5c      	ldr	r7, [pc, #368]	; (c88 <audioFrameString1+0x1c8>)
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     b16:	4d5d      	ldr	r5, [pc, #372]	; (c8c <audioFrameString1+0x1cc>)
     b18:	f8df 91b4 	ldr.w	r9, [pc, #436]	; cd0 <audioFrameString1+0x210>
	c->BLEPindices[c->mostRecentBLEP] = i;
     b1c:	f8df b1b4 	ldr.w	fp, [pc, #436]	; cd4 <audioFrameString1+0x214>
     b20:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     b24:	b29b      	uxth	r3, r3
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     b26:	b923      	cbnz	r3, b32 <audioFrameString1+0x72>
     b28:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     b2c:	b29b      	uxth	r3, r3
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     b2e:	2b00      	cmp	r3, #0
     b30:	d16a      	bne.n	c08 <audioFrameString1+0x148>
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     b32:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     b36:	b29b      	uxth	r3, r3
     b38:	b133      	cbz	r3, b48 <audioFrameString1+0x88>
     b3a:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
     b3e:	b29b      	uxth	r3, r3
     b40:	b913      	cbnz	r3, b48 <audioFrameString1+0x88>
     b42:	f89a 1000 	ldrb.w	r1, [sl]
            if (p < b) {
     b46:	703b      	strb	r3, [r7, #0]
     b48:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
            x = 0.5f - (p - b) * invB1;
     b4c:	3701      	adds	r7, #1
            k = 1;
     b4e:	b29b      	uxth	r3, r3
            x = 0.5f - (p - b) * invB1;
     b50:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
     b54:	3401      	adds	r4, #1
     b56:	42a1      	cmp	r1, r4
     b58:	dce2      	bgt.n	b20 <audioFrameString1+0x60>
     b5a:	2300      	movs	r3, #0
     b5c:	6013      	str	r3, [r2, #0]
     b5e:	4c4f      	ldr	r4, [pc, #316]	; (c9c <audioFrameString1+0x1dc>)
     b60:	ed9f 8a4f 	vldr	s16, [pc, #316]	; ca0 <audioFrameString1+0x1e0>
     b64:	eb04 0788 	add.w	r7, r4, r8, lsl #2
     b68:	f504 7500 	add.w	r5, r4, #512	; 0x200
                    p_at_reset -= 1.0f;
     b6c:	eddf 8a4d 	vldr	s17, [pc, #308]	; ca4 <audioFrameString1+0x1e4>
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
     b70:	463c      	mov	r4, r7
     b72:	eb05 0588 	add.w	r5, r5, r8, lsl #2
	i = lrintf(r - 0.5f);
     b76:	f207 4704 	addw	r7, r7, #1028	; 0x404
     b7a:	f8df 815c 	ldr.w	r8, [pc, #348]	; cd8 <audioFrameString1+0x218>
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
     b7e:	f857 2c04 	ldr.w	r2, [r7, #-4]
	i = lrintf(r - 0.5f);
     b82:	3408      	adds	r4, #8
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
     b84:	f857 3b08 	ldr.w	r3, [r7], #8
	i = lrintf(r - 0.5f);
     b88:	0212      	lsls	r2, r2, #8
     b8a:	021b      	lsls	r3, r3, #8
     b8c:	ee07 2a10 	vmov	s14, r2
	r -= (Lfloat)i;
     b90:	ee07 3a90 	vmov	s15, r3
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     b94:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     b98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	r -= (Lfloat)i;
     b9c:	ee27 7a08 	vmul.f32	s14, s14, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     ba0:	ee67 7a88 	vmul.f32	s15, s15, s16
	scale *= w;
     ba4:	ed88 7a00 	vstr	s14, [r8]
                if (!k && p_at_reset >= b) {
     ba8:	edc8 7a01 	vstr	s15, [r8, #4]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     bac:	f7ff fdf8 	bl	7a0 <audioTickString1>
	r -= (Lfloat)i;
     bb0:	ee20 0a28 	vmul.f32	s0, s0, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     bb4:	42a5      	cmp	r5, r4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     bb6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	c->BLEPindices[c->mostRecentBLEP] = i;
     bba:	ee17 3a90 	vmov	r3, s15
                if (!k && p_at_reset >= b) {
     bbe:	e944 3302 	strd	r3, r3, [r4, #-8]
	c->BLEPindices[c->mostRecentBLEP] = i;
     bc2:	d1dc      	bne.n	b7e <audioFrameString1+0xbe>
     bc4:	4c38      	ldr	r4, [pc, #224]	; (ca8 <audioFrameString1+0x1e8>)
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     bc6:	6823      	ldr	r3, [r4, #0]
     bc8:	b9d3      	cbnz	r3, c00 <audioFrameString1+0x140>
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     bca:	2200      	movs	r2, #0
     bcc:	2108      	movs	r1, #8
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     bce:	482a      	ldr	r0, [pc, #168]	; (c78 <audioFrameString1+0x1b8>)
     bd0:	6022      	str	r2, [r4, #0]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     bd2:	f00a fa2d 	bl	b030 <__HAL_GPIO_WritePin_veneer>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     bd6:	4b29      	ldr	r3, [pc, #164]	; (c7c <audioFrameString1+0x1bc>)
     bd8:	4834      	ldr	r0, [pc, #208]	; (cac <audioFrameString1+0x1ec>)
     bda:	685b      	ldr	r3, [r3, #4]
     bdc:	ed90 7a00 	vldr	s14, [r0]
     be0:	1b9b      	subs	r3, r3, r6
     be2:	4933      	ldr	r1, [pc, #204]	; (cb0 <audioFrameString1+0x1f0>)
     be4:	4a33      	ldr	r2, [pc, #204]	; (cb4 <audioFrameString1+0x1f4>)
                if (!k && p_at_reset >= b) {
     be6:	ee07 3a90 	vmov	s15, r3
                    x = 0.5f - (p_at_reset - b) * invB1;
     bea:	600b      	str	r3, [r1, #0]
     bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
	i = lrintf(r - 0.5f);
     bf0:	ee67 7a87 	vmul.f32	s15, s15, s14
                    x = 0.5f - (p_at_reset - b) * invB1;
     bf4:	edc2 7a00 	vstr	s15, [r2]
     bf8:	ecbd 8b04 	vpop	{d8-d9}
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
     bfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    x = 0.5f - (p_at_reset - b) * invB1;
     c00:	6820      	ldr	r0, [r4, #0]
     c02:	f7ff fc9d 	bl	540 <switchStringModel>
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
     c06:	e7e0      	b.n	bca <audioFrameString1+0x10a>
	i = lrintf(r - 0.5f);
     c08:	492b      	ldr	r1, [pc, #172]	; (cb8 <audioFrameString1+0x1f8>)
     c0a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
     c0e:	4b2b      	ldr	r3, [pc, #172]	; (cbc <audioFrameString1+0x1fc>)
	r -= (Lfloat)i;
     c10:	eeb0 0a49 	vmov.f32	s0, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     c14:	7808      	ldrb	r0, [r1, #0]
     c16:	ed93 7a02 	vldr	s14, [r3, #8]
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     c1a:	4b29      	ldr	r3, [pc, #164]	; (cc0 <audioFrameString1+0x200>)
	r -= (Lfloat)i;
     c1c:	ee71 7a47 	vsub.f32	s15, s2, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     c20:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     c24:	edd3 6a00 	vldr	s13, [r3]
                    x = 0.5f - (p_at_reset - b) * invB1;
     c28:	4b26      	ldr	r3, [pc, #152]	; (cc4 <audioFrameString1+0x204>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     c2a:	eee6 7a87 	vfma.f32	s15, s13, s14
	r -= (Lfloat)i;
     c2e:	edd3 0a00 	vldr	s1, [r3]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     c32:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     c36:	b29b      	uxth	r3, r3
     c38:	ee08 3a10 	vmov	s16, r3
	c->BLEPindices[c->mostRecentBLEP] = i;
     c3c:	4b22      	ldr	r3, [pc, #136]	; (cc8 <audioFrameString1+0x208>)
     c3e:	ee60 0aa7 	vmul.f32	s1, s1, s15
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     c42:	6818      	ldr	r0, [r3, #0]
     c44:	eb0b 0384 	add.w	r3, fp, r4, lsl #2
     c48:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     c4c:	6018      	str	r0, [r3, #0]
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     c4e:	f008 fe27 	bl	98a0 <LEAF_clip>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     c52:	481e      	ldr	r0, [pc, #120]	; (ccc <audioFrameString1+0x20c>)
     c54:	00a3      	lsls	r3, r4, #2
     c56:	eef0 0a40 	vmov.f32	s1, s0
     c5a:	ee28 0a28 	vmul.f32	s0, s16, s17
     c5e:	4418      	add	r0, r3
        if (sw > 0)
     c60:	f00a fa1a 	bl	b098 <__tSimpleLivingString3_pluck_veneer>
     c64:	4914      	ldr	r1, [pc, #80]	; (cb8 <audioFrameString1+0x1f8>)
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
     c66:	4a0a      	ldr	r2, [pc, #40]	; (c90 <audioFrameString1+0x1d0>)
     c68:	780b      	ldrb	r3, [r1, #0]
     c6a:	3301      	adds	r3, #1
     c6c:	700b      	strb	r3, [r1, #0]
	i = lrintf(r - 0.5f);
     c6e:	2301      	movs	r3, #1
     c70:	f89a 1000 	ldrb.w	r1, [sl]
     c74:	703b      	strb	r3, [r7, #0]
     c76:	e767      	b.n	b48 <audioFrameString1+0x88>
     c78:	58020000 	.word	0x58020000
     c7c:	e0001000 	.word	0xe0001000
     c80:	20005cc6 	.word	0x20005cc6
     c84:	20000015 	.word	0x20000015
	r -= (Lfloat)i;
     c88:	2000554c 	.word	0x2000554c
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     c8c:	20005894 	.word	0x20005894
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     c90:	200056b0 	.word	0x200056b0
                if (p_at_reset >= 1.0f) {
     c94:	00000000 	.word	0x00000000
	r -= (Lfloat)i;
     c98:	37800080 	.word	0x37800080
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     c9c:	30000000 	.word	0x30000000
                if (p_at_reset >= 1.0f) {
     ca0:	2ffffff6 	.word	0x2ffffff6
	r -= (Lfloat)i;
     ca4:	4b000000 	.word	0x4b000000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     ca8:	200149b8 	.word	0x200149b8
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     cac:	20000004 	.word	0x20000004
	c->BLEPindices[c->mostRecentBLEP] = i;
     cb0:	200149e8 	.word	0x200149e8
     cb4:	20005260 	.word	0x20005260
     cb8:	20014c86 	.word	0x20014c86
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     cbc:	200053ac 	.word	0x200053ac
     cc0:	200058c4 	.word	0x200058c4
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     cc4:	20000154 	.word	0x20000154
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     cc8:	200056e8 	.word	0x200056e8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     ccc:	20005534 	.word	0x20005534
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     cd0:	20014978 	.word	0x20014978
     cd4:	20014998 	.word	0x20014998
     cd8:	20000a80 	.word	0x20000a80
     cdc:	f3af 8000 	nop.w

00000ce0 <audioTickString2>:
                if (p_at_reset >= 1.0f) {
     ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    x = 0.5f - (p_at_reset - b) * invB1;
     ce4:	4bba      	ldr	r3, [pc, #744]	; (fd0 <audioTickString2+0x2f0>)
     ce6:	4cbb      	ldr	r4, [pc, #748]	; (fd4 <audioTickString2+0x2f4>)
     ce8:	48bb      	ldr	r0, [pc, #748]	; (fd8 <audioTickString2+0x2f8>)
     cea:	4ebc      	ldr	r6, [pc, #752]	; (fdc <audioTickString2+0x2fc>)
     cec:	4625      	mov	r5, r4
     cee:	f104 0930 	add.w	r9, r4, #48	; 0x30
     cf2:	ed2d 8b0c 	vpush	{d8-d13}
     cf6:	b085      	sub	sp, #20
            x = 0.5f - (p_at_reset - b) * invB1;
     cf8:	781b      	ldrb	r3, [r3, #0]
     cfa:	af00      	add	r7, sp, #0
                if (p_at_reset < b) {
     cfc:	009b      	lsls	r3, r3, #2
     cfe:	3307      	adds	r3, #7
            x = 0.5f - (p_at_reset - b) * invB1;
     d00:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
                if (p_at_reset < b) {
     d04:	ebad 0d03 	sub.w	sp, sp, r3
            x = 0.5f - (p_at_reset - b) * invB1;
     d08:	f008 f9ca 	bl	90a0 <tExpSmooth_tick>
                if (p_at_reset < b) {
     d0c:	eef0 9a40 	vmov.f32	s19, s0
                if (p_at_reset < 0.0f) {
     d10:	46eb      	mov	fp, sp
     d12:	4630      	mov	r0, r6
     d14:	3604      	adds	r6, #4
     d16:	f008 f9c3 	bl	90a0 <tExpSmooth_tick>
     d1a:	eca5 0a01 	vstmia	r5!, {s0}
        else if (sw < 0)
     d1e:	454d      	cmp	r5, r9
     d20:	d1f7      	bne.n	d12 <audioTickString2+0x32>
     d22:	4bab      	ldr	r3, [pc, #684]	; (fd0 <audioTickString2+0x2f0>)
	i = lrintf(r - 0.5f);
     d24:	eddf 8aae 	vldr	s17, [pc, #696]	; fe0 <audioTickString2+0x300>
     d28:	781b      	ldrb	r3, [r3, #0]
     d2a:	2b00      	cmp	r3, #0
     d2c:	f000 80f5 	beq.w	f1a <audioTickString2+0x23a>
     d30:	4bac      	ldr	r3, [pc, #688]	; (fe4 <audioTickString2+0x304>)
     d32:	eeb0 9a68 	vmov.f32	s18, s17
     d36:	2600      	movs	r6, #0
	r -= (Lfloat)i;
     d38:	ed9f caab 	vldr	s24, [pc, #684]	; fe8 <audioTickString2+0x308>
	c->BLEPindices[c->mostRecentBLEP] = i;
     d3c:	60fb      	str	r3, [r7, #12]
     d3e:	eddf baab 	vldr	s23, [pc, #684]	; fec <audioTickString2+0x30c>
	r -= (Lfloat)i;
     d42:	4bab      	ldr	r3, [pc, #684]	; (ff0 <audioTickString2+0x310>)
     d44:	ed9f baab 	vldr	s22, [pc, #684]	; ff4 <audioTickString2+0x314>
     d48:	eddf aaab 	vldr	s21, [pc, #684]	; ff8 <audioTickString2+0x318>
                x = -0.5f + p * invB;
     d4c:	f8df a2ec 	ldr.w	sl, [pc, #748]	; 103c <audioTickString2+0x35c>
                p -= 1.0f;
     d50:	f8df 92ec 	ldr.w	r9, [pc, #748]	; 1040 <audioTickString2+0x360>
     d54:	ed9f aaa9 	vldr	s20, [pc, #676]	; ffc <audioTickString2+0x31c>
                x = -0.5f + p * invB;
     d58:	60bb      	str	r3, [r7, #8]
     d5a:	68fb      	ldr	r3, [r7, #12]
	_tMBSineTri* c = *osc;
     d5c:	ea4f 0886 	mov.w	r8, r6, lsl #2
     d60:	ecf3 7a01 	vldmia	r3!, {s15}
}
     d64:	60fb      	str	r3, [r7, #12]
     d66:	4ba6      	ldr	r3, [pc, #664]	; (1000 <audioTickString2+0x320>)
	i = lrintf(r - 0.5f);
     d68:	eb03 0386 	add.w	r3, r3, r6, lsl #2
                x = -0.5f + p * invB;
     d6c:	edd3 0a00 	vldr	s1, [r3]
	i = lrintf(r - 0.5f);
     d70:	ee70 0aa7 	vadd.f32	s1, s1, s15
     d74:	eef5 0ac0 	vcmpe.f32	s1, #0.0
	r -= (Lfloat)i;
     d78:	eceb 0a01 	vstmia	fp!, {s1}
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	scale *= w;
     d80:	f100 8120 	bmi.w	fc4 <audioTickString2+0x2e4>
	r -= (Lfloat)i;
     d84:	ed4b 0a01 	vstr	s1, [fp, #-4]
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     d88:	fe80 8acc 	vminnm.f32	s16, s1, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     d8c:	4b9d      	ldr	r3, [pc, #628]	; (1004 <audioTickString2+0x324>)
	scale *= w;
     d8e:	ed0b 8a01 	vstr	s16, [fp, #-4]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     d92:	eb03 0508 	add.w	r5, r3, r8
	r -= (Lfloat)i;
     d96:	4b9c      	ldr	r3, [pc, #624]	; (1008 <audioTickString2+0x328>)
     d98:	eb03 0008 	add.w	r0, r3, r8
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     d9c:	f008 fa70 	bl	9280 <tADSRT_tick>
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     da0:	4628      	mov	r0, r5
	c->BLEPindices[c->mostRecentBLEP] = i;
     da2:	eef0 ca40 	vmov.f32	s25, s0
     da6:	ed94 0a05 	vldr	s0, [r4, #20]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     daa:	f00a f88d 	bl	aec8 <__tSimpleLivingString5_setPickupPoint_veneer>
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     dae:	ed94 0a06 	vldr	s0, [r4, #24]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     db2:	4628      	mov	r0, r5
     db4:	ee20 0a2b 	vmul.f32	s0, s0, s23
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     db8:	f00a f8be 	bl	af38 <__tSimpleLivingString5_setDampFreq_veneer>
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     dbc:	ed94 0a07 	vldr	s0, [r4, #28]
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     dc0:	4628      	mov	r0, r5
     dc2:	f00a f89d 	bl	af00 <__tSimpleLivingString5_setFFAmount_veneer>
     dc6:	ed94 0a08 	vldr	s0, [r4, #32]
     dca:	4628      	mov	r0, r5
}
     dcc:	f00a f8b0 	bl	af30 <__tSimpleLivingString5_setFBAmount_veneer>
     dd0:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
     dd4:	4628      	mov	r0, r5
	i = lrintf(r - 0.5f);
     dd6:	f00a f9ef 	bl	b1b8 <__tSimpleLivingString5_setFoldDepth_veneer>
     dda:	ed94 0a02 	vldr	s0, [r4, #8]
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
     dde:	4628      	mov	r0, r5
     de0:	f00a f996 	bl	b110 <__tSimpleLivingString5_setPluckPosition_veneer>
     de4:	ee07 6a90 	vmov	s15, r6
	i = lrintf(r - 0.5f);
     de8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
     dec:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
                    p_at_reset += 1.0f;
     df0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i = lrintf(r - 0.5f);
     df4:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
     df8:	4628      	mov	r0, r5
	r -= (Lfloat)i;
     dfa:	3601      	adds	r6, #1
     dfc:	ee67 7a8b 	vmul.f32	s15, s15, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     e00:	ee30 0a67 	vsub.f32	s0, s0, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     e04:	ee20 0a26 	vmul.f32	s0, s0, s13
	r -= (Lfloat)i;
     e08:	eea7 0a27 	vfma.f32	s0, s14, s15
                if (k && p_at_reset < b) {
     e0c:	f00a f8bc 	bl	af88 <__tSimpleLivingString5_setPrepPosition_veneer>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     e10:	edd9 6a00 	vldr	s13, [r9]
	r -= (Lfloat)i;
     e14:	edda 7a00 	vldr	s15, [sl]
	scale *= w;
     e18:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     e1c:	4b7b      	ldr	r3, [pc, #492]	; (100c <audioTickString2+0x32c>)
     e1e:	ee77 7ae6 	vsub.f32	s15, s15, s13
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     e22:	eb03 0008 	add.w	r0, r3, r8
	c->BLEPindices[c->mostRecentBLEP] = i;
     e26:	eeb0 0ae7 	vabs.f32	s0, s15
                if (k && p_at_reset < b) {
     e2a:	6078      	str	r0, [r7, #4]
	c->BLEPindices[c->mostRecentBLEP] = i;
     e2c:	eeb4 0a47 	vcmp.f32	s0, s14
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     e34:	fe39 0a00 	vselgt.f32	s0, s18, s0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     e38:	f008 f942 	bl	90c0 <tExpSmooth_setDest>
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     e3c:	6878      	ldr	r0, [r7, #4]
     e3e:	f008 f92f 	bl	90a0 <tExpSmooth_tick>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     e42:	4b73      	ldr	r3, [pc, #460]	; (1010 <audioTickString2+0x330>)
     e44:	eb03 0008 	add.w	r0, r3, r8
     e48:	f00a f8a2 	bl	af90 <__tEnvelopeFollower_tick_veneer>
     e4c:	f8da 3000 	ldr.w	r3, [sl]
                if (k && p_at_reset < b) {
     e50:	4870      	ldr	r0, [pc, #448]	; (1014 <audioTickString2+0x334>)
     e52:	eeb0 da40 	vmov.f32	s26, s0
                    x = -0.5f + p_at_reset * invB;
     e56:	f8c9 3000 	str.w	r3, [r9]
     e5a:	f00a f945 	bl	b0e8 <__tNoise_tick_veneer>
	i = lrintf(r - 0.5f);
     e5e:	486e      	ldr	r0, [pc, #440]	; (1018 <audioTickString2+0x338>)
     e60:	f00a f83e 	bl	aee0 <__tVZFilter_tickEfficient_veneer>
                    x = -0.5f + p_at_reset * invB;
     e64:	edd4 7a01 	vldr	s15, [r4, #4]
	r = MINBLEP_PHASES * phase * inv_w;
     e68:	eef0 0a48 	vmov.f32	s1, s16
	i = lrintf(r - 0.5f);
     e6c:	ee27 8aaa 	vmul.f32	s16, s15, s21
     e70:	eeb0 7a40 	vmov.f32	s14, s0
	r -= (Lfloat)i;
     e74:	ed9f 0a69 	vldr	s0, [pc, #420]	; 101c <audioTickString2+0x33c>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     e78:	eeb0 1a4a 	vmov.f32	s2, s20
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     e7c:	ee28 8a0d 	vmul.f32	s16, s16, s26
	r -= (Lfloat)i;
     e80:	ee28 8a07 	vmul.f32	s16, s16, s14
     e84:	f008 fd0c 	bl	98a0 <LEAF_clip>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     e88:	ed9f 7a65 	vldr	s14, [pc, #404]	; 1020 <audioTickString2+0x340>
     e8c:	4628      	mov	r0, r5
     e8e:	eddf 7a65 	vldr	s15, [pc, #404]	; 1024 <audioTickString2+0x344>
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     e92:	4a65      	ldr	r2, [pc, #404]	; (1028 <audioTickString2+0x348>)
	c->BLEPindices[c->mostRecentBLEP] = i;
     e94:	eee0 7a07 	vfma.f32	s15, s0, s14
     e98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     e9c:	eefd 6ae7 	vcvt.s32.f32	s13, s15
     ea0:	ee37 7a67 	vsub.f32	s14, s14, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     ea4:	ee16 3a90 	vmov	r3, s13
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     ea8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     eac:	1c59      	adds	r1, r3, #1
     eae:	f3c3 030e 	ubfx	r3, r3, #0, #15
     eb2:	ee77 7ae6 	vsub.f32	s15, s15, s13
     eb6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
        else if (sw < 0)
     eba:	f3c1 010e 	ubfx	r1, r1, #0, #15
     ebe:	ee37 7a26 	vadd.f32	s14, s14, s13
	i = lrintf(r - 0.5f);
     ec2:	edd3 6a00 	vldr	s13, [r3]
     ec6:	eb02 0381 	add.w	r3, r2, r1, lsl #2
     eca:	ed93 6a00 	vldr	s12, [r3]
     ece:	ee27 0a86 	vmul.f32	s0, s15, s12
     ed2:	eea6 0a87 	vfma.f32	s0, s13, s14
     ed6:	f00a f8cf 	bl	b078 <__tSimpleLivingString5_setFreq_veneer>
     eda:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	r -= (Lfloat)i;
     ede:	ed94 7a04 	vldr	s14, [r4, #16]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     ee2:	ed94 0a00 	vldr	s0, [r4]
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     ee6:	eeb4 7ae7 	vcmpe.f32	s14, s15
	r -= (Lfloat)i;
     eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                if (p_at_reset < 0.0f) {
     eee:	dd55      	ble.n	f9c <audioTickString2+0x2bc>
     ef0:	ee2c 0a80 	vmul.f32	s0, s25, s0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     ef4:	4628      	mov	r0, r5
	r -= (Lfloat)i;
     ef6:	f00a f85b 	bl	afb0 <__tSimpleLivingString5_setPrepIndex_veneer>
	scale *= w;
     efa:	68bb      	ldr	r3, [r7, #8]
     efc:	4628      	mov	r0, r5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     efe:	ecb3 0a01 	vldmia	r3!, {s0}
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     f02:	ee38 0a00 	vadd.f32	s0, s16, s0
	c->BLEPindices[c->mostRecentBLEP] = i;
     f06:	60bb      	str	r3, [r7, #8]
     f08:	f009 ffe2 	bl	aed0 <__tSimpleLivingString5_tick_veneer>
                if (p_at_reset < 0.0f) {
     f0c:	4b30      	ldr	r3, [pc, #192]	; (fd0 <audioTickString2+0x2f0>)
	scale *= w;
     f0e:	ee78 8a80 	vadd.f32	s17, s17, s0
	c->BLEPindices[c->mostRecentBLEP] = i;
     f12:	781b      	ldrb	r3, [r3, #0]
     f14:	429e      	cmp	r6, r3
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     f16:	f6ff af20 	blt.w	d5a <audioTickString2+0x7a>
     f1a:	eddf 0a44 	vldr	s1, [pc, #272]	; 102c <audioTickString2+0x34c>
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     f1e:	ed9f 1a32 	vldr	s2, [pc, #200]	; fe8 <audioTickString2+0x308>
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     f22:	ee69 0aa0 	vmul.f32	s1, s19, s1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     f26:	ed9f 0a2e 	vldr	s0, [pc, #184]	; fe0 <audioTickString2+0x300>
     f2a:	f008 fcb9 	bl	98a0 <LEAF_clip>
     f2e:	eef0 7a40 	vmov.f32	s15, s0
     f32:	493f      	ldr	r1, [pc, #252]	; (1030 <audioTickString2+0x350>)
     f34:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
                    x = -0.5f + p_at_reset * invB;
     f38:	4a3e      	ldr	r2, [pc, #248]	; (1034 <audioTickString2+0x354>)
     f3a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
        else if (sw < 0)
     f3e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
     f42:	edd1 0a00 	vldr	s1, [r1]
	i = lrintf(r - 0.5f);
     f46:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 1038 <audioTickString2+0x358>
                    x = -0.5f + p_at_reset * invB;
     f4a:	ee17 3a10 	vmov	r3, s14
	i = lrintf(r - 0.5f);
     f4e:	ee31 7a67 	vsub.f32	s14, s2, s15
     f52:	ee60 0a86 	vmul.f32	s1, s1, s12
	r -= (Lfloat)i;
     f56:	1c59      	adds	r1, r3, #1
     f58:	ee06 3a90 	vmov	s13, r3
	c->BLEPindices[c->mostRecentBLEP] = i;
     f5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     f60:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	r -= (Lfloat)i;
     f64:	f001 017f 	and.w	r1, r1, #127	; 0x7f
                    x = -0.5f + p_at_reset * invB;
     f68:	ee60 0aa8 	vmul.f32	s1, s1, s17
	r -= (Lfloat)i;
     f6c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
     f70:	ee77 7ae6 	vsub.f32	s15, s15, s13
     f74:	ed92 6a00 	vldr	s12, [r2]
     f78:	ee37 7a26 	vadd.f32	s14, s14, s13
     f7c:	edd3 6a00 	vldr	s13, [r3]
                    x = 0.5f - (p_at_reset - b) * invB1;
     f80:	ee67 7a86 	vmul.f32	s15, s15, s12
	i = lrintf(r - 0.5f);
     f84:	eee6 7a87 	vfma.f32	s15, s13, s14
                    x = 0.5f - (p_at_reset - b) * invB1;
     f88:	ee60 0aa7 	vmul.f32	s1, s1, s15
     f8c:	f008 fc88 	bl	98a0 <LEAF_clip>
	i = lrintf(r - 0.5f);
     f90:	3714      	adds	r7, #20
     f92:	46bd      	mov	sp, r7
                    x = 0.5f - (p_at_reset - b) * invB1;
     f94:	ecbd 8b0c 	vpop	{d8-d13}
     f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	i = lrintf(r - 0.5f);
     f9c:	4628      	mov	r0, r5
     f9e:	f00a f807 	bl	afb0 <__tSimpleLivingString5_setPrepIndex_veneer>
     fa2:	68bb      	ldr	r3, [r7, #8]
                    x = 0.5f - (p_at_reset - b) * invB1;
     fa4:	4628      	mov	r0, r5
     fa6:	ecb3 0a01 	vldmia	r3!, {s0}
	i = lrintf(r - 0.5f);
     faa:	ee30 0a08 	vadd.f32	s0, s0, s16
	r -= (Lfloat)i;
     fae:	60bb      	str	r3, [r7, #8]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     fb0:	f009 ff8e 	bl	aed0 <__tSimpleLivingString5_tick_veneer>
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     fb4:	4b06      	ldr	r3, [pc, #24]	; (fd0 <audioTickString2+0x2f0>)
     fb6:	ee78 8a80 	vadd.f32	s17, s17, s0
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     fba:	781b      	ldrb	r3, [r3, #0]
	r -= (Lfloat)i;
     fbc:	42b3      	cmp	r3, r6
     fbe:	f73f aecc 	bgt.w	d5a <audioTickString2+0x7a>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     fc2:	e7aa      	b.n	f1a <audioTickString2+0x23a>
     fc4:	eeb0 8a49 	vmov.f32	s16, s18
     fc8:	ed0b 9a01 	vstr	s18, [fp, #-4]
	i = lrintf(r - 0.5f);
     fcc:	e6de      	b.n	d8c <audioTickString2+0xac>
	r -= (Lfloat)i;
     fce:	bf00      	nop
     fd0:	20000015 	.word	0x20000015
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     fd4:	200053ac 	.word	0x200053ac
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     fd8:	20014a74 	.word	0x20014a74
	c->BLEPindices[c->mostRecentBLEP] = i;
     fdc:	200053dc 	.word	0x200053dc
	i = lrintf(r - 0.5f);
     fe0:	00000000 	.word	0x00000000
	c->BLEPindices[c->mostRecentBLEP] = i;
     fe4:	20014998 	.word	0x20014998
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     fe8:	42fe0000 	.word	0x42fe0000
     fec:	471c4000 	.word	0x471c4000
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     ff0:	20000a80 	.word	0x20000a80
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     ff4:	3dcccccd 	.word	0x3dcccccd
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     ff8:	43480000 	.word	0x43480000
     ffc:	43230000 	.word	0x43230000
    1000:	20014990 	.word	0x20014990
	i = lrintf(r - 0.5f);
    1004:	200149b0 	.word	0x200149b0
	r -= (Lfloat)i;
    1008:	20005218 	.word	0x20005218
	c->BLEPindices[c->mostRecentBLEP] = i;
    100c:	20000aa8 	.word	0x20000aa8
    1010:	20000aa0 	.word	0x20000aa0
	r -= (Lfloat)i;
    1014:	200056ac 	.word	0x200056ac
    1018:	200056c0 	.word	0x200056c0
    101c:	c3230000 	.word	0xc3230000
    1020:	42c80000 	.word	0x42c80000
    sinPhase += inc_amount;
    1024:	46800000 	.word	0x46800000
    p += inc_amount;
    1028:	30022000 	.word	0x30022000
    102c:	42a00000 	.word	0x42a00000
                x = 0.5f - (p - b) * invB1;
    1030:	2000000c 	.word	0x2000000c
                k = 1;
    1034:	20000540 	.word	0x20000540
                x = 0.5f - (p - b) * invB1;
    1038:	3f7ae148 	.word	0x3f7ae148
    103c:	20000a98 	.word	0x20000a98
    1040:	20005888 	.word	0x20005888
    1044:	f3af 8000 	nop.w
                    x = 0.5f - (p_at_reset - b)  * invB1;
    1048:	f3af 8000 	nop.w
	i = lrintf(r - 0.5f);
    104c:	f3af 8000 	nop.w
    1050:	f3af 8000 	nop.w
                    x = 0.5f - (p_at_reset - b)  * invB1;
    1054:	f3af 8000 	nop.w
	i = lrintf(r - 0.5f);
    1058:	f3af 8000 	nop.w
    105c:	f3af 8000 	nop.w

00001060 <audioFrameString2>:
{
    1060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
    1064:	2201      	movs	r2, #1
{
    1066:	4607      	mov	r7, r0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
    1068:	2108      	movs	r1, #8
    106a:	488f      	ldr	r0, [pc, #572]	; (12a8 <audioFrameString2+0x248>)
	if (resetStringInputs)
    106c:	f8df a28c 	ldr.w	sl, [pc, #652]	; 12fc <audioFrameString2+0x29c>
{
    1070:	ed2d 8b06 	vpush	{d8-d10}
    1074:	b083      	sub	sp, #12
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
    1076:	f009 ffdb 	bl	b030 <__HAL_GPIO_WritePin_veneer>
	uint32_t tempCountFrame = DWT->CYCCNT;
    107a:	4b8c      	ldr	r3, [pc, #560]	; (12ac <audioFrameString2+0x24c>)
    107c:	685b      	ldr	r3, [r3, #4]
    107e:	9300      	str	r3, [sp, #0]
	if (resetStringInputs)
    1080:	f89a 3000 	ldrb.w	r3, [sl]
    1084:	b35b      	cbz	r3, 10de <audioFrameString2+0x7e>
		for (int i = 0; i < numStringsThisBoard; i++)
    1086:	4e8a      	ldr	r6, [pc, #552]	; (12b0 <audioFrameString2+0x250>)
    1088:	7833      	ldrb	r3, [r6, #0]
    108a:	b32b      	cbz	r3, 10d8 <audioFrameString2+0x78>
    108c:	f04f 0b00 	mov.w	fp, #0
    1090:	4c88      	ldr	r4, [pc, #544]	; (12b4 <audioFrameString2+0x254>)
    1092:	f8df 826c 	ldr.w	r8, [pc, #620]	; 1300 <audioFrameString2+0x2a0>
    1096:	4d88      	ldr	r5, [pc, #544]	; (12b8 <audioFrameString2+0x258>)
			tSimpleLivingString5_setLevMode(&strings[i], 0);
    1098:	46d9      	mov	r9, fp
			tSimpleLivingString5_setTargetLev(&strings[i], 0.0f);
    109a:	eddf 8a88 	vldr	s17, [pc, #544]	; 12bc <audioFrameString2+0x25c>
			tSimpleLivingString5_setDecay(&strings[i], 0.2f);
    109e:	ed9f 8a88 	vldr	s16, [pc, #544]	; 12c0 <audioFrameString2+0x260>
			tSimpleLivingString5_setTargetLev(&strings[i], 0.0f);
    10a2:	eeb0 0a68 	vmov.f32	s0, s17
    10a6:	4620      	mov	r0, r4
    10a8:	f00a f826 	bl	b0f8 <__tSimpleLivingString5_setTargetLev_veneer>
			tSimpleLivingString5_setLevMode(&strings[i], 0);
    10ac:	2100      	movs	r1, #0
    10ae:	4620      	mov	r0, r4
    10b0:	f00a f8ce 	bl	b250 <__tSimpleLivingString5_setLevMode_veneer>
			tSimpleLivingString5_setDecay(&strings[i], 0.2f);
    10b4:	4620      	mov	r0, r4
    10b6:	eeb0 0a48 	vmov.f32	s0, s16
		for (int i = 0; i < numStringsThisBoard; i++)
    10ba:	3404      	adds	r4, #4
			tSimpleLivingString5_setDecay(&strings[i], 0.2f);
    10bc:	f00a f8b0 	bl	b220 <__tSimpleLivingString5_setDecay_veneer>
			tADSRT_off(&fenvelopes[i]);
    10c0:	4640      	mov	r0, r8
    10c2:	f008 f8bd 	bl	9240 <tADSRT_off>
		for (int i = 0; i < numStringsThisBoard; i++)
    10c6:	7833      	ldrb	r3, [r6, #0]
			previousStringInputs[i] = 0;
    10c8:	f825 901b 	strh.w	r9, [r5, fp, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    10cc:	f10b 0b01 	add.w	fp, fp, #1
    10d0:	f108 0804 	add.w	r8, r8, #4
    10d4:	455b      	cmp	r3, fp
    10d6:	dce4      	bgt.n	10a2 <audioFrameString2+0x42>
		resetStringInputs = 0;
    10d8:	2300      	movs	r3, #0
    10da:	f88a 3000 	strb.w	r3, [sl]
	if (newPluck)
    10de:	f8df a224 	ldr.w	sl, [pc, #548]	; 1304 <audioFrameString2+0x2a4>
    10e2:	f8da 3000 	ldr.w	r3, [sl]
    10e6:	2b00      	cmp	r3, #0
    10e8:	d037      	beq.n	115a <audioFrameString2+0xfa>
		for (int i = 0; i < numStringsThisBoard; i++)
    10ea:	4e71      	ldr	r6, [pc, #452]	; (12b0 <audioFrameString2+0x250>)
    10ec:	7830      	ldrb	r0, [r6, #0]
    10ee:	b388      	cbz	r0, 1154 <audioFrameString2+0xf4>
    10f0:	4b74      	ldr	r3, [pc, #464]	; (12c4 <audioFrameString2+0x264>)
    10f2:	2400      	movs	r4, #0
				tSimpleLivingString5_setTargetLev(&strings[i], 0.0f);
    10f4:	ed9f aa71 	vldr	s20, [pc, #452]	; 12bc <audioFrameString2+0x25c>
				tSimpleLivingString5_setDecay(&strings[i], 0.2f);
    10f8:	eddf 8a71 	vldr	s17, [pc, #452]	; 12c0 <audioFrameString2+0x260>
				tSimpleLivingString5_setLevMode(&strings[i], (knobScaled[0] > 0.5f));
    10fc:	469b      	mov	fp, r3
				float amplitz = stringInputs[i] * 0.000015259021897f;
    10fe:	eddf 9a72 	vldr	s19, [pc, #456]	; 12c8 <audioFrameString2+0x268>
				tSimpleLivingString5_setDecay(&strings[i], knobScaled[3] * .2f + 0.9f);
    1102:	ed9f 9a72 	vldr	s18, [pc, #456]	; 12cc <audioFrameString2+0x26c>
    1106:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 1300 <audioFrameString2+0x2a0>
    110a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 12b4 <audioFrameString2+0x254>
    110e:	4d6a      	ldr	r5, [pc, #424]	; (12b8 <audioFrameString2+0x258>)
    1110:	4a6f      	ldr	r2, [pc, #444]	; (12d0 <audioFrameString2+0x270>)
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    1112:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    1116:	b29b      	uxth	r3, r3
    1118:	b923      	cbnz	r3, 1124 <audioFrameString2+0xc4>
    111a:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    111e:	b29b      	uxth	r3, r3
    1120:	2b00      	cmp	r3, #0
    1122:	d170      	bne.n	1206 <audioFrameString2+0x1a6>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    1124:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    1128:	b29b      	uxth	r3, r3
    112a:	b12b      	cbz	r3, 1138 <audioFrameString2+0xd8>
    112c:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
    1130:	b289      	uxth	r1, r1
    1132:	2900      	cmp	r1, #0
    1134:	f000 80a3 	beq.w	127e <audioFrameString2+0x21e>
			previousStringInputs[i] = stringInputs[i];
    1138:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    113c:	f10b 0b04 	add.w	fp, fp, #4
    1140:	f109 0904 	add.w	r9, r9, #4
    1144:	f108 0804 	add.w	r8, r8, #4
			previousStringInputs[i] = stringInputs[i];
    1148:	b289      	uxth	r1, r1
    114a:	f825 1014 	strh.w	r1, [r5, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    114e:	3401      	adds	r4, #1
    1150:	42a0      	cmp	r0, r4
    1152:	dcde      	bgt.n	1112 <audioFrameString2+0xb2>
		newPluck = 0;
    1154:	2300      	movs	r3, #0
    1156:	f8ca 3000 	str.w	r3, [sl]
    115a:	4c5e      	ldr	r4, [pc, #376]	; (12d4 <audioFrameString2+0x274>)
		audioInputs[0] = ((float) (((int32_t)(audioInBuffer[iplusbuffer]<<8)))) * INV_TWO_TO_31;
    115c:	ed9f 8a5e 	vldr	s16, [pc, #376]	; 12d8 <audioFrameString2+0x278>
    1160:	eb04 0687 	add.w	r6, r4, r7, lsl #2
    1164:	f504 7500 	add.w	r5, r4, #512	; 0x200
		current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    1168:	eddf 8a5c 	vldr	s17, [pc, #368]	; 12dc <audioFrameString2+0x27c>
    116c:	4634      	mov	r4, r6
    116e:	eb05 0587 	add.w	r5, r5, r7, lsl #2
    1172:	f206 4604 	addw	r6, r6, #1028	; 0x404
    1176:	4f5a      	ldr	r7, [pc, #360]	; (12e0 <audioFrameString2+0x280>)
		audioInputs[0] = ((float) (((int32_t)(audioInBuffer[iplusbuffer]<<8)))) * INV_TWO_TO_31;
    1178:	f856 2c04 	ldr.w	r2, [r6, #-4]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    117c:	3408      	adds	r4, #8
		audioInputs[1] = ((float) (((int32_t)(audioInBuffer[iplusone]<<8)))) * INV_TWO_TO_31;
    117e:	f856 3b08 	ldr.w	r3, [r6], #8
		audioInputs[0] = ((float) (((int32_t)(audioInBuffer[iplusbuffer]<<8)))) * INV_TWO_TO_31;
    1182:	0212      	lsls	r2, r2, #8
		audioInputs[1] = ((float) (((int32_t)(audioInBuffer[iplusone]<<8)))) * INV_TWO_TO_31;
    1184:	021b      	lsls	r3, r3, #8
		audioInputs[0] = ((float) (((int32_t)(audioInBuffer[iplusbuffer]<<8)))) * INV_TWO_TO_31;
    1186:	ee07 2a10 	vmov	s14, r2
		audioInputs[1] = ((float) (((int32_t)(audioInBuffer[iplusone]<<8)))) * INV_TWO_TO_31;
    118a:	ee07 3a90 	vmov	s15, r3
		audioInputs[0] = ((float) (((int32_t)(audioInBuffer[iplusbuffer]<<8)))) * INV_TWO_TO_31;
    118e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		audioInputs[1] = ((float) (((int32_t)(audioInBuffer[iplusone]<<8)))) * INV_TWO_TO_31;
    1192:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		audioInputs[0] = ((float) (((int32_t)(audioInBuffer[iplusbuffer]<<8)))) * INV_TWO_TO_31;
    1196:	ee27 7a08 	vmul.f32	s14, s14, s16
		audioInputs[1] = ((float) (((int32_t)(audioInBuffer[iplusone]<<8)))) * INV_TWO_TO_31;
    119a:	ee67 7a88 	vmul.f32	s15, s15, s16
		audioInputs[0] = ((float) (((int32_t)(audioInBuffer[iplusbuffer]<<8)))) * INV_TWO_TO_31;
    119e:	ed87 7a00 	vstr	s14, [r7]
		audioInputs[1] = ((float) (((int32_t)(audioInBuffer[iplusone]<<8)))) * INV_TWO_TO_31;
    11a2:	edc7 7a01 	vstr	s15, [r7, #4]
		current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    11a6:	f7ff fd9b 	bl	ce0 <audioTickString2>
    11aa:	ee20 0a28 	vmul.f32	s0, s0, s17
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    11ae:	42ac      	cmp	r4, r5
		current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    11b0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    11b4:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[buffer_offset + i + 1] = current_sample;
    11b8:	e944 3302 	strd	r3, r3, [r4, #-8]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    11bc:	d1dc      	bne.n	1178 <audioFrameString2+0x118>
	if (switchStrings)
    11be:	4c49      	ldr	r4, [pc, #292]	; (12e4 <audioFrameString2+0x284>)
    11c0:	6823      	ldr	r3, [r4, #0]
    11c2:	b9e3      	cbnz	r3, 11fe <audioFrameString2+0x19e>
	switchStrings = 0;
    11c4:	2200      	movs	r2, #0
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    11c6:	4848      	ldr	r0, [pc, #288]	; (12e8 <audioFrameString2+0x288>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
    11c8:	4b38      	ldr	r3, [pc, #224]	; (12ac <audioFrameString2+0x24c>)
	switchStrings = 0;
    11ca:	6022      	str	r2, [r4, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    11cc:	ed90 7a00 	vldr	s14, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    11d0:	685b      	ldr	r3, [r3, #4]
    11d2:	9800      	ldr	r0, [sp, #0]
    11d4:	4945      	ldr	r1, [pc, #276]	; (12ec <audioFrameString2+0x28c>)
    11d6:	1a1b      	subs	r3, r3, r0
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    11d8:	4c45      	ldr	r4, [pc, #276]	; (12f0 <audioFrameString2+0x290>)
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
    11da:	4833      	ldr	r0, [pc, #204]	; (12a8 <audioFrameString2+0x248>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    11dc:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
    11e0:	600b      	str	r3, [r1, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
    11e2:	2108      	movs	r1, #8
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    11e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
    11e8:	ee67 7a87 	vmul.f32	s15, s15, s14
    11ec:	edc4 7a00 	vstr	s15, [r4]
}
    11f0:	b003      	add	sp, #12
    11f2:	ecbd 8b06 	vpop	{d8-d10}
    11f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
    11fa:	f009 bf19 	b.w	b030 <__HAL_GPIO_WritePin_veneer>
		switchStringModel(switchStrings);
    11fe:	6820      	ldr	r0, [r4, #0]
    1200:	f7ff f99e 	bl	540 <switchStringModel>
    1204:	e7de      	b.n	11c4 <audioFrameString2+0x164>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    1206:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
				tADSRT_on(&fenvelopes[i], amplitz);
    120a:	4648      	mov	r0, r9
				float amplitz = stringInputs[i] * 0.000015259021897f;
    120c:	b29b      	uxth	r3, r3
    120e:	ee07 3a90 	vmov	s15, r3
				stringOctave[i] = octave;
    1212:	4b38      	ldr	r3, [pc, #224]	; (12f4 <audioFrameString2+0x294>)
				float amplitz = stringInputs[i] * 0.000015259021897f;
    1214:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
				stringOctave[i] = octave;
    1218:	681b      	ldr	r3, [r3, #0]
    121a:	f8cb 3000 	str.w	r3, [fp]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    121e:	ee28 8a29 	vmul.f32	s16, s16, s19
				tADSRT_on(&fenvelopes[i], amplitz);
    1222:	eeb0 0a48 	vmov.f32	s0, s16
    1226:	f007 ffeb 	bl	9200 <tADSRT_on>
				tSimpleLivingString5_setLevMode(&strings[i], (knobScaled[0] > 0.5f));
    122a:	4b33      	ldr	r3, [pc, #204]	; (12f8 <audioFrameString2+0x298>)
    122c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    1230:	4640      	mov	r0, r8
    1232:	ed93 7a00 	vldr	s14, [r3]
    1236:	eeb4 7ae7 	vcmpe.f32	s14, s15
    123a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    123e:	bfcc      	ite	gt
    1240:	2101      	movgt	r1, #1
    1242:	2100      	movle	r1, #0
    1244:	f00a f804 	bl	b250 <__tSimpleLivingString5_setLevMode_veneer>
				tSimpleLivingString5_setTargetLev(&strings[i], knobScaled[1]);
    1248:	4b2b      	ldr	r3, [pc, #172]	; (12f8 <audioFrameString2+0x298>)
    124a:	4640      	mov	r0, r8
    124c:	ed93 0a01 	vldr	s0, [r3, #4]
    1250:	f009 ff52 	bl	b0f8 <__tSimpleLivingString5_setTargetLev_veneer>
				tSimpleLivingString5_pluck(&strings[i], amplitz, knobScaled[2]);
    1254:	4b28      	ldr	r3, [pc, #160]	; (12f8 <audioFrameString2+0x298>)
    1256:	eeb0 0a48 	vmov.f32	s0, s16
    125a:	4640      	mov	r0, r8
    125c:	edd3 0a02 	vldr	s1, [r3, #8]
    1260:	f009 ffa6 	bl	b1b0 <__tSimpleLivingString5_pluck_veneer>
				tSimpleLivingString5_setDecay(&strings[i], knobScaled[3] * .2f + 0.9f);
    1264:	4b24      	ldr	r3, [pc, #144]	; (12f8 <audioFrameString2+0x298>)
    1266:	eeb0 0a49 	vmov.f32	s0, s18
    126a:	4640      	mov	r0, r8
    126c:	edd3 7a03 	vldr	s15, [r3, #12]
    1270:	eea7 0aa8 	vfma.f32	s0, s15, s17
    1274:	f009 ffd4 	bl	b220 <__tSimpleLivingString5_setDecay_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    1278:	7830      	ldrb	r0, [r6, #0]
			{
    127a:	4a15      	ldr	r2, [pc, #84]	; (12d0 <audioFrameString2+0x270>)
    127c:	e75c      	b.n	1138 <audioFrameString2+0xd8>
				tSimpleLivingString5_setTargetLev(&strings[i], 0.0f);
    127e:	eeb0 0a4a 	vmov.f32	s0, s20
    1282:	4640      	mov	r0, r8
    1284:	9101      	str	r1, [sp, #4]
    1286:	f009 ff37 	bl	b0f8 <__tSimpleLivingString5_setTargetLev_veneer>
				tSimpleLivingString5_setLevMode(&strings[i], 0);
    128a:	9901      	ldr	r1, [sp, #4]
    128c:	4640      	mov	r0, r8
    128e:	f009 ffdf 	bl	b250 <__tSimpleLivingString5_setLevMode_veneer>
				tSimpleLivingString5_setDecay(&strings[i], 0.2f);
    1292:	eeb0 0a68 	vmov.f32	s0, s17
    1296:	4640      	mov	r0, r8
    1298:	f009 ffc2 	bl	b220 <__tSimpleLivingString5_setDecay_veneer>
				tADSRT_off(&fenvelopes[i]);
    129c:	4648      	mov	r0, r9
    129e:	f007 ffcf 	bl	9240 <tADSRT_off>
		for (int i = 0; i < numStringsThisBoard; i++)
    12a2:	7830      	ldrb	r0, [r6, #0]
    12a4:	4a0a      	ldr	r2, [pc, #40]	; (12d0 <audioFrameString2+0x270>)
    12a6:	e747      	b.n	1138 <audioFrameString2+0xd8>
    12a8:	58020000 	.word	0x58020000
    12ac:	e0001000 	.word	0xe0001000
    12b0:	20000015 	.word	0x20000015
    12b4:	200149b0 	.word	0x200149b0
    12b8:	20005894 	.word	0x20005894
    12bc:	00000000 	.word	0x00000000
    12c0:	3e4ccccd 	.word	0x3e4ccccd
    12c4:	20014998 	.word	0x20014998
    12c8:	37800080 	.word	0x37800080
    12cc:	3f666666 	.word	0x3f666666
    12d0:	20014978 	.word	0x20014978
    12d4:	30000000 	.word	0x30000000
    12d8:	2ffffff6 	.word	0x2ffffff6
    12dc:	4b000000 	.word	0x4b000000
    12e0:	20000a80 	.word	0x20000a80
    12e4:	200149b8 	.word	0x200149b8
    12e8:	20000004 	.word	0x20000004
    12ec:	200149e8 	.word	0x200149e8
    12f0:	20005260 	.word	0x20005260
    12f4:	200056e8 	.word	0x200056e8
    12f8:	200053ac 	.word	0x200053ac
    12fc:	20005cc6 	.word	0x20005cc6
    1300:	20005218 	.word	0x20005218
    1304:	200056b0 	.word	0x200056b0
    1308:	f3af 8000 	nop.w
    130c:	f3af 8000 	nop.w
    1310:	f3af 8000 	nop.w
    1314:	f3af 8000 	nop.w
    1318:	f3af 8000 	nop.w
    131c:	f3af 8000 	nop.w

00001320 <audioTickAdditive>:
{
    1320:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1324:	4f68      	ldr	r7, [pc, #416]	; (14c8 <audioTickAdditive+0x1a8>)
    1326:	4d69      	ldr	r5, [pc, #420]	; (14cc <audioTickAdditive+0x1ac>)
    1328:	463c      	mov	r4, r7
    132a:	f107 0630 	add.w	r6, r7, #48	; 0x30
    132e:	ed2d 8b0a 	vpush	{d8-d12}
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    1332:	4628      	mov	r0, r5
	for (int i = 0; i < 12; i++)
    1334:	3504      	adds	r5, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    1336:	f007 feb3 	bl	90a0 <tExpSmooth_tick>
    133a:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
    133e:	42b4      	cmp	r4, r6
    1340:	d1f7      	bne.n	1332 <audioTickAdditive+0x12>
	float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
    1342:	4863      	ldr	r0, [pc, #396]	; (14d0 <audioTickAdditive+0x1b0>)
    1344:	f009 fed0 	bl	b0e8 <__tNoise_tick_veneer>
    1348:	4862      	ldr	r0, [pc, #392]	; (14d4 <audioTickAdditive+0x1b4>)
    134a:	f009 fdc9 	bl	aee0 <__tVZFilter_tickEfficient_veneer>
	filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
    134e:	4860      	ldr	r0, [pc, #384]	; (14d0 <audioTickAdditive+0x1b0>)
	float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
    1350:	eeb0 ca40 	vmov.f32	s24, s0
	filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
    1354:	f009 fec8 	bl	b0e8 <__tNoise_tick_veneer>
    1358:	485f      	ldr	r0, [pc, #380]	; (14d8 <audioTickAdditive+0x1b8>)
    135a:	f009 fdc1 	bl	aee0 <__tVZFilter_tickEfficient_veneer>
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    135e:	485f      	ldr	r0, [pc, #380]	; (14dc <audioTickAdditive+0x1bc>)
	filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
    1360:	eeb0 8a40 	vmov.f32	s16, s0
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    1364:	f007 fe9c 	bl	90a0 <tExpSmooth_tick>
	for (int i = 0; i < numStringsThisBoard; i++)
    1368:	4b5d      	ldr	r3, [pc, #372]	; (14e0 <audioTickAdditive+0x1c0>)
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    136a:	eef0 ca40 	vmov.f32	s25, s0
	float tempSamp = 0.0f;
    136e:	ed9f 9a5d 	vldr	s18, [pc, #372]	; 14e4 <audioTickAdditive+0x1c4>
	for (int i = 0; i < numStringsThisBoard; i++)
    1372:	781b      	ldrb	r3, [r3, #0]
    1374:	2b00      	cmp	r3, #0
    1376:	d072      	beq.n	145e <audioTickAdditive+0x13e>
	filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
    1378:	ee3c ca08 	vadd.f32	s24, s24, s16
    137c:	f8df b194 	ldr.w	fp, [pc, #404]	; 1514 <audioTickAdditive+0x1f4>
			float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[4]* 0.003f * j) + 1.0f);// * ((Env2 * knobScaled[5])+ 1.0f);
    1380:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
    1384:	f8df 8190 	ldr.w	r8, [pc, #400]	; 1518 <audioTickAdditive+0x1f8>
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
    1388:	eeb0 aa49 	vmov.f32	s20, s18
    138c:	f8df a18c 	ldr.w	sl, [pc, #396]	; 151c <audioTickAdditive+0x1fc>
			float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[4]* 0.003f * j) + 1.0f);// * ((Env2 * knobScaled[5])+ 1.0f);
    1390:	eddf ba55 	vldr	s23, [pc, #340]	; 14e8 <audioTickAdditive+0x1c8>
	for (int i = 0; i < numStringsThisBoard; i++)
    1394:	f04f 0900 	mov.w	r9, #0
			float tempGain = ((tempFreq - 15000.0f) * 0.00025f);
    1398:	ed9f ba54 	vldr	s22, [pc, #336]	; 14ec <audioTickAdditive+0x1cc>
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
    139c:	eddf aa54 	vldr	s21, [pc, #336]	; 14f0 <audioTickAdditive+0x1d0>
		float noiseEnv = tADSRT_tick(&fenvelopes[i]); //noise envelope
    13a0:	4b54      	ldr	r3, [pc, #336]	; (14f4 <audioTickAdditive+0x1d4>)
    13a2:	ea4f 0489 	mov.w	r4, r9, lsl #2
    13a6:	eb09 05c9 	add.w	r5, r9, r9, lsl #3
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    13aa:	4656      	mov	r6, sl
		float noiseEnv = tADSRT_tick(&fenvelopes[i]); //noise envelope
    13ac:	eb03 0089 	add.w	r0, r3, r9, lsl #2
    13b0:	f007 ff66 	bl	9280 <tADSRT_tick>
		tempSamp += filtNoise * noiseEnv * knobScaled[7];
    13b4:	edd7 7a07 	vldr	s15, [r7, #28]
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    13b8:	4b4f      	ldr	r3, [pc, #316]	; (14f8 <audioTickAdditive+0x1d8>)
		tempSamp += filtNoise * noiseEnv * knobScaled[7];
    13ba:	ee6c 7a27 	vmul.f32	s15, s24, s15
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    13be:	441c      	add	r4, r3
		tempSamp += filtNoise * noiseEnv * knobScaled[7];
    13c0:	eea0 9a27 	vfma.f32	s18, s0, s15
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    13c4:	ed94 7a00 	vldr	s14, [r4]
    13c8:	ecbb 0a01 	vldmia	fp!, {s0}
		for (int j = 0; j < NUM_OVERTONES; j++)
    13cc:	2400      	movs	r4, #0
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    13ce:	ee37 0a00 	vadd.f32	s0, s14, s0
    13d2:	f009 fdf5 	bl	afc0 <__mtof_veneer>
    13d6:	4b49      	ldr	r3, [pc, #292]	; (14fc <audioTickAdditive+0x1dc>)
    13d8:	eca8 0a01 	vstmia	r8!, {s0}
		for (int j = 0; j < NUM_OVERTONES; j++)
    13dc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
			float thisEnv = tADSRT_tick(&additiveEnv[i][j]);
    13e0:	4630      	mov	r0, r6
		for (int j = 0; j < NUM_OVERTONES; j++)
    13e2:	3604      	adds	r6, #4
			float thisEnv = tADSRT_tick(&additiveEnv[i][j]);
    13e4:	f007 ff4c 	bl	9280 <tADSRT_tick>
    13e8:	ee07 4a10 	vmov	s14, r4
			float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[4]* 0.003f * j) + 1.0f);// * ((Env2 * knobScaled[5])+ 1.0f);
    13ec:	3401      	adds	r4, #1
    13ee:	edd7 7a04 	vldr	s15, [r7, #16]
    13f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    13f6:	ed18 6a01 	vldr	s12, [r8, #-4]
    13fa:	ee06 4a90 	vmov	s13, r4
    13fe:	ee67 7aab 	vmul.f32	s15, s15, s23
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
    1402:	eef0 0a69 	vmov.f32	s1, s19
			float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[4]* 0.003f * j) + 1.0f);// * ((Env2 * knobScaled[5])+ 1.0f);
    1406:	eeb8 8ae6 	vcvt.f32.s32	s16, s13
    140a:	eef0 6a69 	vmov.f32	s13, s19
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
    140e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
			float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[4]* 0.003f * j) + 1.0f);// * ((Env2 * knobScaled[5])+ 1.0f);
    1412:	ee28 8a06 	vmul.f32	s16, s16, s12
    1416:	eee7 6a27 	vfma.f32	s13, s14, s15
			float thisEnv = tADSRT_tick(&additiveEnv[i][j]);
    141a:	eef0 8a40 	vmov.f32	s17, s0
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
    141e:	eeb0 0a4a 	vmov.f32	s0, s20
			float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[4]* 0.003f * j) + 1.0f);// * ((Env2 * knobScaled[5])+ 1.0f);
    1422:	ee28 8a26 	vmul.f32	s16, s16, s13
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
    1426:	ee7b 7a48 	vsub.f32	s15, s22, s16
    142a:	eee7 0aaa 	vfma.f32	s1, s15, s21
    142e:	f008 fa37 	bl	98a0 <LEAF_clip>
			tCycle_setFreq(&additive[i][j], tempFreq);
    1432:	4628      	mov	r0, r5
    1434:	eeb0 0a48 	vmov.f32	s0, s16
    1438:	f009 feee 	bl	b218 <__tCycle_setFreq_veneer>
			tempSamp += tCycle_tick(&additive[i][j]) * thisEnv;// * freqWeight;
    143c:	4628      	mov	r0, r5
    143e:	f009 ff0b 	bl	b258 <__tCycle_tick_veneer>
		for (int j = 0; j < NUM_OVERTONES; j++)
    1442:	2c0c      	cmp	r4, #12
			tempSamp += tCycle_tick(&additive[i][j]) * thisEnv;// * freqWeight;
    1444:	eea0 9a28 	vfma.f32	s18, s0, s17
		for (int j = 0; j < NUM_OVERTONES; j++)
    1448:	f105 0504 	add.w	r5, r5, #4
    144c:	d1c8      	bne.n	13e0 <audioTickAdditive+0xc0>
	for (int i = 0; i < numStringsThisBoard; i++)
    144e:	4b24      	ldr	r3, [pc, #144]	; (14e0 <audioTickAdditive+0x1c0>)
    1450:	f109 0901 	add.w	r9, r9, #1
    1454:	f10a 0a48 	add.w	sl, sl, #72	; 0x48
    1458:	781b      	ldrb	r3, [r3, #0]
    145a:	454b      	cmp	r3, r9
    145c:	dca0      	bgt.n	13a0 <audioTickAdditive+0x80>
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    145e:	ed9f 0a28 	vldr	s0, [pc, #160]	; 1500 <audioTickAdditive+0x1e0>
    1462:	eddf 7a28 	vldr	s15, [pc, #160]	; 1504 <audioTickAdditive+0x1e4>
    1466:	eef0 0a40 	vmov.f32	s1, s0
    146a:	ed9f 1a27 	vldr	s2, [pc, #156]	; 1508 <audioTickAdditive+0x1e8>
    146e:	eeec 0aa7 	vfma.f32	s1, s25, s15
    1472:	f008 fa15 	bl	98a0 <LEAF_clip>
	int volIdxInt = (int) volIdx;
    1476:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	tempSamp *= masterVolFromBrain;
    147a:	4924      	ldr	r1, [pc, #144]	; (150c <audioTickAdditive+0x1ec>)
	float omAlpha = 1.0f - alpha;
    147c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    1480:	4a23      	ldr	r2, [pc, #140]	; (1510 <audioTickAdditive+0x1f0>)
	int volIdxInt = (int) volIdx;
    1482:	ee17 3a10 	vmov	r3, s14
	float alpha = volIdx-volIdxInt;
    1486:	edd1 6a00 	vldr	s13, [r1]
    148a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    148e:	1c59      	adds	r1, r3, #1
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    1490:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	float omAlpha = 1.0f - alpha;
    1494:	ee77 7ac0 	vsub.f32	s15, s15, s0
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    1498:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float alpha = volIdx-volIdxInt;
    149c:	ee30 0a47 	vsub.f32	s0, s0, s14
    14a0:	ee29 9a26 	vmul.f32	s18, s18, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    14a4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	float omAlpha = 1.0f - alpha;
    14a8:	ee77 7a87 	vadd.f32	s15, s15, s14
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    14ac:	ed93 7a00 	vldr	s14, [r3]
    14b0:	edd2 6a00 	vldr	s13, [r2]
    14b4:	ee20 0a26 	vmul.f32	s0, s0, s13
    14b8:	eea7 0a27 	vfma.f32	s0, s14, s15
}
    14bc:	ee29 0a00 	vmul.f32	s0, s18, s0
    14c0:	ecbd 8b0a 	vpop	{d8-d12}
    14c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    14c8:	200053ac 	.word	0x200053ac
    14cc:	200053dc 	.word	0x200053dc
    14d0:	200056ac 	.word	0x200056ac
    14d4:	200056bc 	.word	0x200056bc
    14d8:	200056c0 	.word	0x200056c0
    14dc:	20014a74 	.word	0x20014a74
    14e0:	20000015 	.word	0x20000015
    14e4:	00000000 	.word	0x00000000
    14e8:	3b449ba6 	.word	0x3b449ba6
    14ec:	466a6000 	.word	0x466a6000
    14f0:	3983126f 	.word	0x3983126f
    14f4:	20005218 	.word	0x20005218
    14f8:	20014990 	.word	0x20014990
    14fc:	2000094c 	.word	0x2000094c
    1500:	423c0000 	.word	0x423c0000
    1504:	42a00000 	.word	0x42a00000
    1508:	42fe0000 	.word	0x42fe0000
    150c:	2000000c 	.word	0x2000000c
    1510:	20000540 	.word	0x20000540
    1514:	20014998 	.word	0x20014998
    1518:	20014948 	.word	0x20014948
    151c:	200009dc 	.word	0x200009dc

00001520 <audioFrameAdditive>:
{
    1520:	4603      	mov	r3, r0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
    1522:	2201      	movs	r2, #1
    1524:	2108      	movs	r1, #8
    1526:	48a8      	ldr	r0, [pc, #672]	; (17c8 <audioFrameAdditive+0x2a8>)
{
    1528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    152c:	ed2d 8b10 	vpush	{d8-d15}
    1530:	b08d      	sub	sp, #52	; 0x34
    1532:	9306      	str	r3, [sp, #24]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
    1534:	f009 fd7c 	bl	b030 <__HAL_GPIO_WritePin_veneer>
	uint32_t tempCountFrame = DWT->CYCCNT;
    1538:	4ba4      	ldr	r3, [pc, #656]	; (17cc <audioFrameAdditive+0x2ac>)
    153a:	685b      	ldr	r3, [r3, #4]
    153c:	9305      	str	r3, [sp, #20]
	if (newPluck)
    153e:	4ba4      	ldr	r3, [pc, #656]	; (17d0 <audioFrameAdditive+0x2b0>)
    1540:	681b      	ldr	r3, [r3, #0]
    1542:	2b00      	cmp	r3, #0
    1544:	d043      	beq.n	15ce <audioFrameAdditive+0xae>
		for (int i = 0; i < numStringsThisBoard; i++)
    1546:	4ba3      	ldr	r3, [pc, #652]	; (17d4 <audioFrameAdditive+0x2b4>)
    1548:	781a      	ldrb	r2, [r3, #0]
    154a:	2a00      	cmp	r2, #0
    154c:	d03c      	beq.n	15c8 <audioFrameAdditive+0xa8>
    154e:	4ba2      	ldr	r3, [pc, #648]	; (17d8 <audioFrameAdditive+0x2b8>)
    1550:	2600      	movs	r6, #0
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    1552:	eddf caa2 	vldr	s25, [pc, #648]	; 17dc <audioFrameAdditive+0x2bc>
    1556:	9302      	str	r3, [sp, #8]
    1558:	4ba1      	ldr	r3, [pc, #644]	; (17e0 <audioFrameAdditive+0x2c0>)
    155a:	ed9f aaa2 	vldr	s20, [pc, #648]	; 17e4 <audioFrameAdditive+0x2c4>
    155e:	9301      	str	r3, [sp, #4]
    1560:	4ba1      	ldr	r3, [pc, #644]	; (17e8 <audioFrameAdditive+0x2c8>)
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    1562:	ed9f faa2 	vldr	s30, [pc, #648]	; 17ec <audioFrameAdditive+0x2cc>
    1566:	9304      	str	r3, [sp, #16]
    1568:	eddf faa1 	vldr	s31, [pc, #644]	; 17f0 <audioFrameAdditive+0x2d0>
    156c:	4ba1      	ldr	r3, [pc, #644]	; (17f4 <audioFrameAdditive+0x2d4>)
    156e:	9303      	str	r3, [sp, #12]
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    1570:	4ba1      	ldr	r3, [pc, #644]	; (17f8 <audioFrameAdditive+0x2d8>)
    1572:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
    1576:	b29b      	uxth	r3, r3
    1578:	b92b      	cbnz	r3, 1586 <audioFrameAdditive+0x66>
    157a:	4ba0      	ldr	r3, [pc, #640]	; (17fc <audioFrameAdditive+0x2dc>)
    157c:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
    1580:	b29b      	uxth	r3, r3
    1582:	2b00      	cmp	r3, #0
    1584:	d16e      	bne.n	1664 <audioFrameAdditive+0x144>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    1586:	4b9c      	ldr	r3, [pc, #624]	; (17f8 <audioFrameAdditive+0x2d8>)
    1588:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
    158c:	b29b      	uxth	r3, r3
    158e:	b12b      	cbz	r3, 159c <audioFrameAdditive+0x7c>
    1590:	4b9a      	ldr	r3, [pc, #616]	; (17fc <audioFrameAdditive+0x2dc>)
    1592:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
    1596:	b29b      	uxth	r3, r3
    1598:	2b00      	cmp	r3, #0
    159a:	d053      	beq.n	1644 <audioFrameAdditive+0x124>
		for (int i = 0; i < numStringsThisBoard; i++)
    159c:	9b02      	ldr	r3, [sp, #8]
			previousStringInputs[i] = stringInputs[i];
    159e:	4996      	ldr	r1, [pc, #600]	; (17f8 <audioFrameAdditive+0x2d8>)
		for (int i = 0; i < numStringsThisBoard; i++)
    15a0:	3304      	adds	r3, #4
    15a2:	9302      	str	r3, [sp, #8]
    15a4:	9b01      	ldr	r3, [sp, #4]
    15a6:	3348      	adds	r3, #72	; 0x48
    15a8:	9301      	str	r3, [sp, #4]
    15aa:	9b04      	ldr	r3, [sp, #16]
    15ac:	3304      	adds	r3, #4
    15ae:	9304      	str	r3, [sp, #16]
    15b0:	9b03      	ldr	r3, [sp, #12]
    15b2:	3304      	adds	r3, #4
    15b4:	9303      	str	r3, [sp, #12]
			previousStringInputs[i] = stringInputs[i];
    15b6:	4b91      	ldr	r3, [pc, #580]	; (17fc <audioFrameAdditive+0x2dc>)
    15b8:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
    15bc:	b29b      	uxth	r3, r3
    15be:	f821 3016 	strh.w	r3, [r1, r6, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    15c2:	3601      	adds	r6, #1
    15c4:	42b2      	cmp	r2, r6
    15c6:	dcd3      	bgt.n	1570 <audioFrameAdditive+0x50>
		newPluck = 0;
    15c8:	2300      	movs	r3, #0
    15ca:	4a81      	ldr	r2, [pc, #516]	; (17d0 <audioFrameAdditive+0x2b0>)
    15cc:	6013      	str	r3, [r2, #0]
    15ce:	4c8c      	ldr	r4, [pc, #560]	; (1800 <audioFrameAdditive+0x2e0>)
    15d0:	9b06      	ldr	r3, [sp, #24]
    15d2:	f504 7500 	add.w	r5, r4, #512	; 0x200
		current_sample = (int32_t)(audioTickAdditive() * TWO_TO_23);
    15d6:	ed9f 8a8b 	vldr	s16, [pc, #556]	; 1804 <audioFrameAdditive+0x2e4>
    15da:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    15de:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    15e2:	f7ff fe9d 	bl	1320 <audioTickAdditive>
    15e6:	ee20 0a08 	vmul.f32	s0, s0, s16
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    15ea:	3408      	adds	r4, #8
		current_sample = (int32_t)(audioTickAdditive() * TWO_TO_23);
    15ec:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    15f0:	42a5      	cmp	r5, r4
		current_sample = (int32_t)(audioTickAdditive() * TWO_TO_23);
    15f2:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[buffer_offset + i + 1] = current_sample;
    15f6:	e944 3302 	strd	r3, r3, [r4, #-8]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    15fa:	d1f2      	bne.n	15e2 <audioFrameAdditive+0xc2>
	if (switchStrings)
    15fc:	4c82      	ldr	r4, [pc, #520]	; (1808 <audioFrameAdditive+0x2e8>)
    15fe:	6823      	ldr	r3, [r4, #0]
    1600:	b9e3      	cbnz	r3, 163c <audioFrameAdditive+0x11c>
	switchStrings = 0;
    1602:	2200      	movs	r2, #0
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    1604:	4881      	ldr	r0, [pc, #516]	; (180c <audioFrameAdditive+0x2ec>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
    1606:	4b71      	ldr	r3, [pc, #452]	; (17cc <audioFrameAdditive+0x2ac>)
	switchStrings = 0;
    1608:	6022      	str	r2, [r4, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    160a:	ed90 7a00 	vldr	s14, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    160e:	685b      	ldr	r3, [r3, #4]
    1610:	9805      	ldr	r0, [sp, #20]
    1612:	497f      	ldr	r1, [pc, #508]	; (1810 <audioFrameAdditive+0x2f0>)
    1614:	1a1b      	subs	r3, r3, r0
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    1616:	4c7f      	ldr	r4, [pc, #508]	; (1814 <audioFrameAdditive+0x2f4>)
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
    1618:	486b      	ldr	r0, [pc, #428]	; (17c8 <audioFrameAdditive+0x2a8>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    161a:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
    161e:	600b      	str	r3, [r1, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
    1620:	2108      	movs	r1, #8
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    1622:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1626:	ee67 7a87 	vmul.f32	s15, s15, s14
    162a:	edc4 7a00 	vstr	s15, [r4]
}
    162e:	b00d      	add	sp, #52	; 0x34
    1630:	ecbd 8b10 	vpop	{d8-d15}
    1634:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
    1638:	f009 bcfa 	b.w	b030 <__HAL_GPIO_WritePin_veneer>
		switchStringModel(switchStrings);
    163c:	6820      	ldr	r0, [r4, #0]
    163e:	f7fe ff7f 	bl	540 <switchStringModel>
    1642:	e7de      	b.n	1602 <audioFrameAdditive+0xe2>
    1644:	9b01      	ldr	r3, [sp, #4]
    1646:	461c      	mov	r4, r3
    1648:	f103 0530 	add.w	r5, r3, #48	; 0x30
					tADSRT_off(&additiveEnv[i][j]);
    164c:	4620      	mov	r0, r4
				for (int j = 0; j < NUM_OVERTONES; j++)
    164e:	3404      	adds	r4, #4
					tADSRT_off(&additiveEnv[i][j]);
    1650:	f007 fdf6 	bl	9240 <tADSRT_off>
				for (int j = 0; j < NUM_OVERTONES; j++)
    1654:	42a5      	cmp	r5, r4
    1656:	d1f9      	bne.n	164c <audioFrameAdditive+0x12c>
				tADSRT_off(&fenvelopes[i]);
    1658:	9802      	ldr	r0, [sp, #8]
    165a:	f007 fdf1 	bl	9240 <tADSRT_off>
		for (int i = 0; i < numStringsThisBoard; i++)
    165e:	4b5d      	ldr	r3, [pc, #372]	; (17d4 <audioFrameAdditive+0x2b4>)
    1660:	781a      	ldrb	r2, [r3, #0]
    1662:	e79b      	b.n	159c <audioFrameAdditive+0x7c>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    1664:	4b65      	ldr	r3, [pc, #404]	; (17fc <audioFrameAdditive+0x2dc>)
    1666:	eddf 7a6c 	vldr	s15, [pc, #432]	; 1818 <audioFrameAdditive+0x2f8>
    166a:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
				stringOctave[i] = octave;
    166e:	9c04      	ldr	r4, [sp, #16]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    1670:	b29b      	uxth	r3, r3
				tADSRT_on(&fenvelopes[i], amplitz);
    1672:	9802      	ldr	r0, [sp, #8]
				float fakedFreq = stringFrequencies[i] * ((knobScaled[2] * 3.5f) + 0.5f);
    1674:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 183c <audioFrameAdditive+0x31c>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    1678:	ee0c 3a10 	vmov	s24, r3
				stringOctave[i] = octave;
    167c:	4b67      	ldr	r3, [pc, #412]	; (181c <audioFrameAdditive+0x2fc>)
				float amplitz = stringInputs[i] * 0.000015259021897f;
    167e:	eeb8 cacc 	vcvt.f32.s32	s24, s24
				stringOctave[i] = octave;
    1682:	681b      	ldr	r3, [r3, #0]
    1684:	6023      	str	r3, [r4, #0]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    1686:	ee2c ca27 	vmul.f32	s24, s24, s15
				tADSRT_on(&fenvelopes[i], amplitz);
    168a:	eeb0 0a4c 	vmov.f32	s0, s24
    168e:	f007 fdb7 	bl	9200 <tADSRT_on>
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    1692:	4b63      	ldr	r3, [pc, #396]	; (1820 <audioFrameAdditive+0x300>)
    1694:	edd4 7a00 	vldr	s15, [r4]
    1698:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    169c:	ed93 0a00 	vldr	s0, [r3]
    16a0:	ee30 0a27 	vadd.f32	s0, s0, s15
    16a4:	f009 fc8c 	bl	afc0 <__mtof_veneer>
				float fakedFreq = stringFrequencies[i] * ((knobScaled[2] * 3.5f) + 0.5f);
    16a8:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
    16ac:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    16b0:	9b03      	ldr	r3, [sp, #12]
				float fakedFreq = stringFrequencies[i] * ((knobScaled[2] * 3.5f) + 0.5f);
    16b2:	eddb 6a02 	vldr	s13, [fp, #8]
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    16b6:	ed83 0a00 	vstr	s0, [r3]
				float fakedFreq = stringFrequencies[i] * ((knobScaled[2] * 3.5f) + 0.5f);
    16ba:	eee6 7a87 	vfma.f32	s15, s13, s14
				int thisString = i + firstString;
    16be:	4b59      	ldr	r3, [pc, #356]	; (1824 <audioFrameAdditive+0x304>)
    16c0:	681b      	ldr	r3, [r3, #0]
    16c2:	4433      	add	r3, r6
				float fakedFreq = stringFrequencies[i] * ((knobScaled[2] * 3.5f) + 0.5f);
    16c4:	ee60 9a27 	vmul.f32	s19, s0, s15
				if (thisString < 6)
    16c8:	2b05      	cmp	r3, #5
					stringFade = (float)thisString * 0.2f;
    16ca:	ee07 3a90 	vmov	s15, r3
				int thisString = i + firstString;
    16ce:	9308      	str	r3, [sp, #32]
					stringFade = (float)thisString * 0.2f;
    16d0:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
				if (thisString < 6)
    16d4:	f340 8185 	ble.w	19e2 <audioFrameAdditive+0x4c2>
					stringFade = (float)(thisString - 6.0f) * 0.2f;
    16d8:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    16dc:	4f52      	ldr	r7, [pc, #328]	; (1828 <audioFrameAdditive+0x308>)
    16de:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
    16e2:	eef0 1a6f 	vmov.f32	s3, s31
    16e6:	ed97 1a05 	vldr	s2, [r7, #20]
					stringFade = (float)(thisString - 6.0f) * 0.2f;
    16ea:	ee39 9a67 	vsub.f32	s18, s18, s15
    16ee:	eddf 7a4f 	vldr	s15, [pc, #316]	; 182c <audioFrameAdditive+0x30c>
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    16f2:	edd7 0a03 	vldr	s1, [r7, #12]
    16f6:	eeb0 0a69 	vmov.f32	s0, s19
					stringFade = (float)(thisString - 6.0f) * 0.2f;
    16fa:	ee29 9a27 	vmul.f32	s18, s18, s15
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    16fe:	f009 fc6f 	bl	afe0 <__LEAF_map_veneer>
    1702:	eeb0 1a4f 	vmov.f32	s2, s30
    1706:	eef0 0a40 	vmov.f32	s1, s0
    170a:	eeb0 0a6f 	vmov.f32	s0, s31
    170e:	f008 f8c7 	bl	98a0 <LEAF_clip>
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    1712:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    1716:	eef0 ba40 	vmov.f32	s23, s0
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    171a:	ed97 1a02 	vldr	s2, [r7, #8]
    171e:	eef0 1a6f 	vmov.f32	s3, s31
    1722:	edd7 0a00 	vldr	s1, [r7]
    1726:	eeb0 0a69 	vmov.f32	s0, s19
    172a:	f8df 9114 	ldr.w	r9, [pc, #276]	; 1840 <audioFrameAdditive+0x320>
    172e:	f009 fc57 	bl	afe0 <__LEAF_map_veneer>
    1732:	eeb0 1a4f 	vmov.f32	s2, s30
    1736:	eef0 0a40 	vmov.f32	s1, s0
    173a:	4d3d      	ldr	r5, [pc, #244]	; (1830 <audioFrameAdditive+0x310>)
    173c:	eeb0 0a6f 	vmov.f32	s0, s31
    1740:	4c3c      	ldr	r4, [pc, #240]	; (1834 <audioFrameAdditive+0x314>)
    1742:	f008 f8ad 	bl	98a0 <LEAF_clip>
				int height2Int = floor(height2);
    1746:	eeb7 7aeb 	vcvt.f64.f32	d7, s23
				int height1Int = floor(height1);
    174a:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
    174e:	493a      	ldr	r1, [pc, #232]	; (1838 <audioFrameAdditive+0x318>)
						thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    1750:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    1754:	960b      	str	r6, [sp, #44]	; 0x2c
				int height2Int = floor(height2);
    1756:	febb 7b47 	vrintm.f64	d7, d7
    175a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
				int height1Int = floor(height1);
    175e:	febb 6b46 	vrintm.f64	d6, d6
    1762:	eebd 6bc6 	vcvt.s32.f64	s12, d6
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    1766:	ee38 eac0 	vsub.f32	s28, s17, s0
    176a:	464e      	mov	r6, r9
    176c:	ee17 3a10 	vmov	r3, s14
				float height2Float = height2 - height2Int;
    1770:	eeb8 dac7 	vcvt.f32.s32	s26, s14
    1774:	ee16 2a10 	vmov	r2, s12
				float height1Float = height1 - height1Int;
    1778:	eef8 7ac6 	vcvt.f32.s32	s15, s12
    177c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    1780:	ee78 eaeb 	vsub.f32	s29, s17, s23
    1784:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1788:	9707      	str	r7, [sp, #28]
    178a:	011b      	lsls	r3, r3, #4
				float height1Float = height1 - height1Int;
    178c:	ee70 da67 	vsub.f32	s27, s0, s15
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    1790:	ee7e 7a27 	vadd.f32	s15, s28, s15
						thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    1794:	f8dd 8004 	ldr.w	r8, [sp, #4]
    1798:	f103 0a90 	add.w	sl, r3, #144	; 0x90
    179c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    17a0:	ee7e ea8d 	vadd.f32	s29, s29, s26
    17a4:	18c8      	adds	r0, r1, r3
    17a6:	eb01 1302 	add.w	r3, r1, r2, lsl #4
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    17aa:	eeb0 ba40 	vmov.f32	s22, s0
				float height2Float = height2 - height2Int;
    17ae:	448a      	add	sl, r1
    17b0:	461a      	mov	r2, r3
    17b2:	33c0      	adds	r3, #192	; 0xc0
						thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    17b4:	ee78 aac9 	vsub.f32	s21, s17, s18
    17b8:	4607      	mov	r7, r0
				float height2Float = height2 - height2Int;
    17ba:	ee3b dacd 	vsub.f32	s26, s23, s26
				for (int j = 0; j < NUM_OVERTONES; j++)
    17be:	4691      	mov	r9, r2
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    17c0:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
    17c4:	9300      	str	r3, [sp, #0]
    17c6:	e0c5      	b.n	1954 <audioFrameAdditive+0x434>
    17c8:	58020000 	.word	0x58020000
    17cc:	e0001000 	.word	0xe0001000
    17d0:	200056b0 	.word	0x200056b0
    17d4:	20000015 	.word	0x20000015
    17d8:	20005218 	.word	0x20005218
    17dc:	44fa0000 	.word	0x44fa0000
    17e0:	200009dc 	.word	0x200009dc
    17e4:	3dcccccd 	.word	0x3dcccccd
    17e8:	20014998 	.word	0x20014998
    17ec:	3ffeb852 	.word	0x3ffeb852
    17f0:	00000000 	.word	0x00000000
    17f4:	20014948 	.word	0x20014948
    17f8:	20005894 	.word	0x20005894
    17fc:	20014978 	.word	0x20014978
    1800:	30000000 	.word	0x30000000
    1804:	4b000000 	.word	0x4b000000
    1808:	200149b8 	.word	0x200149b8
    180c:	20000004 	.word	0x20000004
    1810:	200149e8 	.word	0x200149e8
    1814:	20005260 	.word	0x20005260
    1818:	37800080 	.word	0x37800080
    181c:	200056e8 	.word	0x200056e8
    1820:	20014990 	.word	0x20014990
    1824:	20005258 	.word	0x20005258
    1828:	2000036c 	.word	0x2000036c
    182c:	3e4ccccd 	.word	0x3e4ccccd
    1830:	20000c30 	.word	0x20000c30
    1834:	20014c86 	.word	0x20014c86
    1838:	20000390 	.word	0x20000390
    183c:	200053ac 	.word	0x200053ac
    1840:	20000d50 	.word	0x20000d50
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    1844:	ed97 8a00 	vldr	s16, [r7]
						if (height2 < 1.0f)
    1848:	eef4 bae8 	vcmpe.f32	s23, s17
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    184c:	edd3 7a00 	vldr	s15, [r3]
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    1850:	ee2d 8a08 	vmul.f32	s16, s26, s16
    1854:	ed9a 7a24 	vldr	s14, [sl, #144]	; 0x90
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    1858:	ee6d 7aa7 	vmul.f32	s15, s27, s15
    185c:	eddd 6a09 	vldr	s13, [sp, #36]	; 0x24
						if (height2 < 1.0f)
    1860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
							d2 = 1.0f / ((dAp[2][0][j] * LEAF_clip(stringFundamentals[2][0], fakedFreq, stringFundamentals[2][1])) + dBs[2][0][j]);
    1864:	9b07      	ldr	r3, [sp, #28]
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    1866:	eea7 8a2e 	vfma.f32	s16, s14, s29
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    186a:	ed99 7a24 	vldr	s14, [r9, #144]	; 0x90
    186e:	eee7 7a26 	vfma.f32	s15, s14, s13
						thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    1872:	ee28 8a2a 	vmul.f32	s16, s16, s21
    1876:	eea9 8a27 	vfma.f32	s16, s18, s15
						if (height2 < 1.0f)
    187a:	f100 80eb 	bmi.w	1a54 <audioFrameAdditive+0x534>
							d2 = 1.0f / ((dAp[2][1][j] * LEAF_clip(stringFundamentals[2][1], fakedFreq, stringFundamentals[2][2])) + dBs[2][1][j]);
    187e:	eef0 0a69 	vmov.f32	s1, s19
    1882:	ed93 1a08 	vldr	s2, [r3, #32]
    1886:	ed93 0a07 	vldr	s0, [r3, #28]
    188a:	ed95 ea3c 	vldr	s28, [r5, #240]	; 0xf0
    188e:	f008 f807 	bl	98a0 <LEAF_clip>
    1892:	ed96 7a3c 	vldr	s14, [r6, #240]	; 0xf0
    1896:	eeae 7a00 	vfma.f32	s14, s28, s0
    189a:	ee88 ea87 	vdiv.f32	s28, s17, s14
							d1 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    189e:	9b07      	ldr	r3, [sp, #28]
						if (height1 < 1.0f)
    18a0:	eeb4 bae8 	vcmpe.f32	s22, s17
    18a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    18a8:	f100 80bf 	bmi.w	1a2a <audioFrameAdditive+0x50a>
							d1 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
    18ac:	edd5 6a24 	vldr	s13, [r5, #144]	; 0x90
    18b0:	eef0 0a69 	vmov.f32	s1, s19
    18b4:	ed93 1a05 	vldr	s2, [r3, #20]
    18b8:	ed93 0a04 	vldr	s0, [r3, #16]
    18bc:	edcd 6a0a 	vstr	s13, [sp, #40]	; 0x28
    18c0:	f007 ffee 	bl	98a0 <LEAF_clip>
    18c4:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
    18c8:	ed96 7a24 	vldr	s14, [r6, #144]	; 0x90
    18cc:	eea6 7a80 	vfma.f32	s14, s13, s0
    18d0:	eec8 6a87 	vdiv.f32	s13, s17, s14
				for (int j = 0; j < NUM_OVERTONES; j++)
    18d4:	9b00      	ldr	r3, [sp, #0]
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    18d6:	4640      	mov	r0, r8
    18d8:	4a7c      	ldr	r2, [pc, #496]	; (1acc <audioFrameAdditive+0x5ac>)
				for (int j = 0; j < NUM_OVERTONES; j++)
    18da:	3504      	adds	r5, #4
    18dc:	3304      	adds	r3, #4
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    18de:	ed9b 0a05 	vldr	s0, [fp, #20]
				for (int j = 0; j < NUM_OVERTONES; j++)
    18e2:	3604      	adds	r6, #4
    18e4:	f109 0904 	add.w	r9, r9, #4
    18e8:	9300      	str	r3, [sp, #0]
						thisDecay = (d1 * stringFade) + (d2 * (1.0f - stringFade));
    18ea:	ee6e 7a2a 	vmul.f32	s15, s28, s21
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    18ee:	7823      	ldrb	r3, [r4, #0]
    18f0:	ee20 0a0a 	vmul.f32	s0, s0, s20
				for (int j = 0; j < NUM_OVERTONES; j++)
    18f4:	f10a 0a04 	add.w	sl, sl, #4
    18f8:	3704      	adds	r7, #4
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    18fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
						thisDecay = (d1 * stringFade) + (d2 * (1.0f - stringFade));
    18fe:	eee6 7a89 	vfma.f32	s15, s13, s18
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    1902:	ed93 7a00 	vldr	s14, [r3]
    1906:	ee20 0a07 	vmul.f32	s0, s0, s14
    190a:	ed9b 7a03 	vldr	s14, [fp, #12]
    190e:	ee27 7a2c 	vmul.f32	s14, s14, s25
    1912:	eea7 0a87 	vfma.f32	s0, s15, s14
    1916:	f007 fc03 	bl	9120 <tADSRT_setDecay>
					currentRandom++;
    191a:	7823      	ldrb	r3, [r4, #0]
					tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain + (randomFactors[currentRandom] * knobScaled[6] * 0.1f)));
    191c:	4a6b      	ldr	r2, [pc, #428]	; (1acc <audioFrameAdditive+0x5ac>)
    191e:	4640      	mov	r0, r8
					currentRandom++;
    1920:	3301      	adds	r3, #1
					tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain + (randomFactors[currentRandom] * knobScaled[6] * 0.1f)));
    1922:	eddb 7a06 	vldr	s15, [fp, #24]
				for (int j = 0; j < NUM_OVERTONES; j++)
    1926:	f108 0804 	add.w	r8, r8, #4
					currentRandom++;
    192a:	b2db      	uxtb	r3, r3
					tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain + (randomFactors[currentRandom] * knobScaled[6] * 0.1f)));
    192c:	ee67 7a8a 	vmul.f32	s15, s15, s20
					currentRandom++;
    1930:	7023      	strb	r3, [r4, #0]
					tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain + (randomFactors[currentRandom] * knobScaled[6] * 0.1f)));
    1932:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1936:	ed93 7a00 	vldr	s14, [r3]
    193a:	eea7 8a27 	vfma.f32	s16, s14, s15
    193e:	ee28 0a0c 	vmul.f32	s0, s16, s24
    1942:	f007 fc5d 	bl	9200 <tADSRT_on>
					currentRandom++;
    1946:	7823      	ldrb	r3, [r4, #0]
    1948:	3301      	adds	r3, #1
    194a:	7023      	strb	r3, [r4, #0]
				for (int j = 0; j < NUM_OVERTONES; j++)
    194c:	4b60      	ldr	r3, [pc, #384]	; (1ad0 <audioFrameAdditive+0x5b0>)
    194e:	42ab      	cmp	r3, r5
    1950:	f000 80b7 	beq.w	1ac2 <audioFrameAdditive+0x5a2>
					if (thisString < 6)
    1954:	9b08      	ldr	r3, [sp, #32]
    1956:	2b05      	cmp	r3, #5
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    1958:	9b00      	ldr	r3, [sp, #0]
					if (thisString < 6)
    195a:	f77f af73 	ble.w	1844 <audioFrameAdditive+0x324>
						float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    195e:	edd7 7a00 	vldr	s15, [r7]
						if (height2 < 1.0f)
    1962:	eef4 bae8 	vcmpe.f32	s23, s17
						float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    1966:	ed9a 8a00 	vldr	s16, [sl]
						float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    196a:	ed93 7a00 	vldr	s14, [r3]
						float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    196e:	eea7 8a8d 	vfma.f32	s16, s15, s26
						float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    1972:	edd9 7a00 	vldr	s15, [r9]
						if (height2 < 1.0f)
    1976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
							d2 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    197a:	9b07      	ldr	r3, [sp, #28]
						float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    197c:	eee7 7a2d 	vfma.f32	s15, s14, s27
						thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    1980:	ee28 8a2a 	vmul.f32	s16, s16, s21
    1984:	eea9 8a27 	vfma.f32	s16, s18, s15
						if (height2 < 1.0f)
    1988:	f100 808a 	bmi.w	1aa0 <audioFrameAdditive+0x580>
							d2 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
    198c:	eef0 0a69 	vmov.f32	s1, s19
    1990:	ed93 1a05 	vldr	s2, [r3, #20]
    1994:	ed93 0a04 	vldr	s0, [r3, #16]
    1998:	ed95 ea24 	vldr	s28, [r5, #144]	; 0x90
    199c:	f007 ff80 	bl	98a0 <LEAF_clip>
    19a0:	ed96 7a24 	vldr	s14, [r6, #144]	; 0x90
    19a4:	eeae 7a00 	vfma.f32	s14, s28, s0
    19a8:	ee88 ea87 	vdiv.f32	s28, s17, s14
							d1 = 1.0f / ((dAp[0][0][j] * LEAF_clip(stringFundamentals[0][0], fakedFreq, stringFundamentals[0][1])) + dBs[0][0][j]);
    19ac:	9b07      	ldr	r3, [sp, #28]
						if (height1 < 1.0f)
    19ae:	eeb4 bae8 	vcmpe.f32	s22, s17
    19b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    19b6:	d45e      	bmi.n	1a76 <audioFrameAdditive+0x556>
							d1 = 1.0f / ((dAp[0][1][j] * LEAF_clip(stringFundamentals[0][1], fakedFreq, stringFundamentals[0][2])) + dBs[0][1][j]);
    19b8:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
    19bc:	eef0 0a69 	vmov.f32	s1, s19
    19c0:	ed93 1a02 	vldr	s2, [r3, #8]
    19c4:	ed93 0a01 	vldr	s0, [r3, #4]
    19c8:	edcd 6a0a 	vstr	s13, [sp, #40]	; 0x28
    19cc:	f007 ff68 	bl	98a0 <LEAF_clip>
    19d0:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
    19d4:	ed96 7a0c 	vldr	s14, [r6, #48]	; 0x30
    19d8:	eea6 7a80 	vfma.f32	s14, s13, s0
    19dc:	eec8 6a87 	vdiv.f32	s13, s17, s14
    19e0:	e778      	b.n	18d4 <audioFrameAdditive+0x3b4>
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    19e2:	4f3c      	ldr	r7, [pc, #240]	; (1ad4 <audioFrameAdditive+0x5b4>)
    19e4:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
					stringFade = (float)thisString * 0.2f;
    19e8:	eddf 7a3b 	vldr	s15, [pc, #236]	; 1ad8 <audioFrameAdditive+0x5b8>
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    19ec:	eef0 1a6f 	vmov.f32	s3, s31
    19f0:	ed97 1a08 	vldr	s2, [r7, #32]
    19f4:	eeb0 0a69 	vmov.f32	s0, s19
    19f8:	edd7 0a06 	vldr	s1, [r7, #24]
					stringFade = (float)thisString * 0.2f;
    19fc:	ee29 9a27 	vmul.f32	s18, s18, s15
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    1a00:	f009 faee 	bl	afe0 <__LEAF_map_veneer>
    1a04:	eeb0 1a4f 	vmov.f32	s2, s30
    1a08:	eef0 0a40 	vmov.f32	s1, s0
    1a0c:	eeb0 0a6f 	vmov.f32	s0, s31
    1a10:	f007 ff46 	bl	98a0 <LEAF_clip>
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    1a14:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    1a18:	eef0 ba40 	vmov.f32	s23, s0
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    1a1c:	ed97 1a05 	vldr	s2, [r7, #20]
    1a20:	eef0 1a6f 	vmov.f32	s3, s31
    1a24:	edd7 0a03 	vldr	s1, [r7, #12]
    1a28:	e67d      	b.n	1726 <audioFrameAdditive+0x206>
							d1 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    1a2a:	edd5 6a18 	vldr	s13, [r5, #96]	; 0x60
    1a2e:	eef0 0a69 	vmov.f32	s1, s19
    1a32:	ed93 1a04 	vldr	s2, [r3, #16]
    1a36:	ed93 0a03 	vldr	s0, [r3, #12]
    1a3a:	edcd 6a0a 	vstr	s13, [sp, #40]	; 0x28
    1a3e:	f007 ff2f 	bl	98a0 <LEAF_clip>
    1a42:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
    1a46:	ed96 7a18 	vldr	s14, [r6, #96]	; 0x60
    1a4a:	eea6 7a80 	vfma.f32	s14, s13, s0
    1a4e:	eec8 6a87 	vdiv.f32	s13, s17, s14
    1a52:	e73f      	b.n	18d4 <audioFrameAdditive+0x3b4>
							d2 = 1.0f / ((dAp[2][0][j] * LEAF_clip(stringFundamentals[2][0], fakedFreq, stringFundamentals[2][1])) + dBs[2][0][j]);
    1a54:	eef0 0a69 	vmov.f32	s1, s19
    1a58:	ed93 1a07 	vldr	s2, [r3, #28]
    1a5c:	ed93 0a06 	vldr	s0, [r3, #24]
    1a60:	ed95 ea30 	vldr	s28, [r5, #192]	; 0xc0
    1a64:	f007 ff1c 	bl	98a0 <LEAF_clip>
    1a68:	ed96 7a30 	vldr	s14, [r6, #192]	; 0xc0
    1a6c:	eeae 7a00 	vfma.f32	s14, s28, s0
    1a70:	ee88 ea87 	vdiv.f32	s28, s17, s14
    1a74:	e713      	b.n	189e <audioFrameAdditive+0x37e>
							d1 = 1.0f / ((dAp[0][0][j] * LEAF_clip(stringFundamentals[0][0], fakedFreq, stringFundamentals[0][1])) + dBs[0][0][j]);
    1a76:	edd5 6a00 	vldr	s13, [r5]
    1a7a:	eef0 0a69 	vmov.f32	s1, s19
    1a7e:	ed93 1a01 	vldr	s2, [r3, #4]
    1a82:	ed93 0a00 	vldr	s0, [r3]
    1a86:	edcd 6a0a 	vstr	s13, [sp, #40]	; 0x28
    1a8a:	f007 ff09 	bl	98a0 <LEAF_clip>
    1a8e:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
    1a92:	ed96 7a00 	vldr	s14, [r6]
    1a96:	eea6 7a80 	vfma.f32	s14, s13, s0
    1a9a:	eec8 6a87 	vdiv.f32	s13, s17, s14
    1a9e:	e719      	b.n	18d4 <audioFrameAdditive+0x3b4>
							d2 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    1aa0:	eef0 0a69 	vmov.f32	s1, s19
    1aa4:	ed93 1a04 	vldr	s2, [r3, #16]
    1aa8:	ed93 0a03 	vldr	s0, [r3, #12]
    1aac:	ed95 ea18 	vldr	s28, [r5, #96]	; 0x60
    1ab0:	f007 fef6 	bl	98a0 <LEAF_clip>
    1ab4:	ed96 7a18 	vldr	s14, [r6, #96]	; 0x60
    1ab8:	eeae 7a00 	vfma.f32	s14, s28, s0
    1abc:	ee88 ea87 	vdiv.f32	s28, s17, s14
    1ac0:	e774      	b.n	19ac <audioFrameAdditive+0x48c>
		for (int i = 0; i < numStringsThisBoard; i++)
    1ac2:	4b06      	ldr	r3, [pc, #24]	; (1adc <audioFrameAdditive+0x5bc>)
    1ac4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    1ac6:	781a      	ldrb	r2, [r3, #0]
    1ac8:	e568      	b.n	159c <audioFrameAdditive+0x7c>
    1aca:	bf00      	nop
    1acc:	200058c4 	.word	0x200058c4
    1ad0:	20000c60 	.word	0x20000c60
    1ad4:	2000036c 	.word	0x2000036c
    1ad8:	3e4ccccd 	.word	0x3e4ccccd
    1adc:	20000015 	.word	0x20000015

00001ae0 <audioTickVocal>:
{
    1ae0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ae4:	4c40      	ldr	r4, [pc, #256]	; (1be8 <audioTickVocal+0x108>)
    1ae6:	4d41      	ldr	r5, [pc, #260]	; (1bec <audioTickVocal+0x10c>)
    1ae8:	f104 0630 	add.w	r6, r4, #48	; 0x30
    1aec:	ed2d 8b04 	vpush	{d8-d9}
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    1af0:	4628      	mov	r0, r5
	for (int i = 0; i < 12; i++)
    1af2:	3504      	adds	r5, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    1af4:	f007 fad4 	bl	90a0 <tExpSmooth_tick>
    1af8:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
    1afc:	42b4      	cmp	r4, r6
    1afe:	d1f7      	bne.n	1af0 <audioTickVocal+0x10>
	for (int i = 0; i < numStringsThisBoard; i++)
    1b00:	f8df 9114 	ldr.w	r9, [pc, #276]	; 1c18 <audioTickVocal+0x138>
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    1b04:	483a      	ldr	r0, [pc, #232]	; (1bf0 <audioTickVocal+0x110>)
    1b06:	f007 facb 	bl	90a0 <tExpSmooth_tick>
	for (int i = 0; i < numStringsThisBoard; i++)
    1b0a:	f899 3000 	ldrb.w	r3, [r9]
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    1b0e:	eeb0 9a40 	vmov.f32	s18, s0
	for (int i = 0; i < numStringsThisBoard; i++)
    1b12:	2b00      	cmp	r3, #0
    1b14:	d065      	beq.n	1be2 <audioTickVocal+0x102>
    1b16:	4e37      	ldr	r6, [pc, #220]	; (1bf4 <audioTickVocal+0x114>)
    1b18:	2400      	movs	r4, #0
    1b1a:	f8df 8100 	ldr.w	r8, [pc, #256]	; 1c1c <audioTickVocal+0x13c>
    1b1e:	4f36      	ldr	r7, [pc, #216]	; (1bf8 <audioTickVocal+0x118>)
	float tempSamp = 0.0f;
    1b20:	eddf 8a36 	vldr	s17, [pc, #216]	; 1bfc <audioTickVocal+0x11c>
    1b24:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 1c20 <audioTickVocal+0x140>
		tempSamp += tVoc_tick(&vocal[i]) * tADSRT_tickNoInterp(&additiveEnv[i][0]);
    1b28:	eb0b 0584 	add.w	r5, fp, r4, lsl #2
    1b2c:	ea4f 0a84 	mov.w	sl, r4, lsl #2
	for (int i = 0; i < numStringsThisBoard; i++)
    1b30:	3401      	adds	r4, #1
		tempSamp += tVoc_tick(&vocal[i]) * tADSRT_tickNoInterp(&additiveEnv[i][0]);
    1b32:	4628      	mov	r0, r5
    1b34:	f009 fbb0 	bl	b298 <__tVoc_tick_veneer>
    1b38:	4630      	mov	r0, r6
    1b3a:	eeb0 8a40 	vmov.f32	s16, s0
    1b3e:	f007 fd0f 	bl	9560 <tADSRT_tickNoInterp>
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    1b42:	4b2f      	ldr	r3, [pc, #188]	; (1c00 <audioTickVocal+0x120>)
	for (int i = 0; i < numStringsThisBoard; i++)
    1b44:	3648      	adds	r6, #72	; 0x48
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    1b46:	ecf8 7a01 	vldmia	r8!, {s15}
    1b4a:	4453      	add	r3, sl
		tempSamp += tVoc_tick(&vocal[i]) * tADSRT_tickNoInterp(&additiveEnv[i][0]);
    1b4c:	eee8 8a00 	vfma.f32	s17, s16, s0
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    1b50:	ed93 0a00 	vldr	s0, [r3]
    1b54:	ee30 0a27 	vadd.f32	s0, s0, s15
    1b58:	f009 fa32 	bl	afc0 <__mtof_veneer>
		tVoc_setFreq(&vocal[i], stringFrequencies[i]);
    1b5c:	4628      	mov	r0, r5
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    1b5e:	eca7 0a01 	vstmia	r7!, {s0}
		tVoc_setFreq(&vocal[i], stringFrequencies[i]);
    1b62:	f009 fa5d 	bl	b020 <__tVoc_setFreq_veneer>
		tVoc_set_tenseness(&vocal[i], volumeSmoothed);
    1b66:	eeb0 0a49 	vmov.f32	s0, s18
    1b6a:	4628      	mov	r0, r5
    1b6c:	f009 f9c4 	bl	aef8 <__tVoc_set_tenseness_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    1b70:	f899 3000 	ldrb.w	r3, [r9]
    1b74:	42a3      	cmp	r3, r4
    1b76:	dcd7      	bgt.n	1b28 <audioTickVocal+0x48>
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    1b78:	ed9f 0a22 	vldr	s0, [pc, #136]	; 1c04 <audioTickVocal+0x124>
    1b7c:	eddf 7a22 	vldr	s15, [pc, #136]	; 1c08 <audioTickVocal+0x128>
    1b80:	eef0 0a40 	vmov.f32	s1, s0
    1b84:	ed9f 1a21 	vldr	s2, [pc, #132]	; 1c0c <audioTickVocal+0x12c>
    1b88:	eee9 0a27 	vfma.f32	s1, s18, s15
    1b8c:	f007 fe88 	bl	98a0 <LEAF_clip>
	int volIdxInt = (int) volIdx;
    1b90:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	tempSamp *= masterVolFromBrain;
    1b94:	491e      	ldr	r1, [pc, #120]	; (1c10 <audioTickVocal+0x130>)
	float omAlpha = 1.0f - alpha;
    1b96:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    1b9a:	4a1e      	ldr	r2, [pc, #120]	; (1c14 <audioTickVocal+0x134>)
	int volIdxInt = (int) volIdx;
    1b9c:	ee17 3a10 	vmov	r3, s14
	float alpha = volIdx-volIdxInt;
    1ba0:	edd1 6a00 	vldr	s13, [r1]
    1ba4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    1ba8:	1c59      	adds	r1, r3, #1
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    1baa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	float omAlpha = 1.0f - alpha;
    1bae:	ee77 7ac0 	vsub.f32	s15, s15, s0
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    1bb2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float alpha = volIdx-volIdxInt;
    1bb6:	ee30 0a47 	vsub.f32	s0, s0, s14
    1bba:	ee68 8aa6 	vmul.f32	s17, s17, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    1bbe:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	float omAlpha = 1.0f - alpha;
    1bc2:	ee77 7a87 	vadd.f32	s15, s15, s14
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    1bc6:	ed93 7a00 	vldr	s14, [r3]
    1bca:	edd2 6a00 	vldr	s13, [r2]
    1bce:	ee20 0a26 	vmul.f32	s0, s0, s13
    1bd2:	eea7 0a27 	vfma.f32	s0, s14, s15
}
    1bd6:	ee28 0a80 	vmul.f32	s0, s17, s0
    1bda:	ecbd 8b04 	vpop	{d8-d9}
    1bde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	float tempSamp = 0.0f;
    1be2:	eddf 8a06 	vldr	s17, [pc, #24]	; 1bfc <audioTickVocal+0x11c>
    1be6:	e7c7      	b.n	1b78 <audioTickVocal+0x98>
    1be8:	200053ac 	.word	0x200053ac
    1bec:	200053dc 	.word	0x200053dc
    1bf0:	20014a74 	.word	0x20014a74
    1bf4:	200009dc 	.word	0x200009dc
    1bf8:	20014948 	.word	0x20014948
    1bfc:	00000000 	.word	0x00000000
    1c00:	20014990 	.word	0x20014990
    1c04:	423c0000 	.word	0x423c0000
    1c08:	42a00000 	.word	0x42a00000
    1c0c:	42fe0000 	.word	0x42fe0000
    1c10:	2000000c 	.word	0x2000000c
    1c14:	20000540 	.word	0x20000540
    1c18:	20000015 	.word	0x20000015
    1c1c:	20014998 	.word	0x20014998
    1c20:	20014a5c 	.word	0x20014a5c
    1c24:	f3af 8000 	nop.w
    1c28:	f3af 8000 	nop.w
    1c2c:	f3af 8000 	nop.w
    1c30:	f3af 8000 	nop.w
    1c34:	f3af 8000 	nop.w
    1c38:	f3af 8000 	nop.w
    1c3c:	f3af 8000 	nop.w

00001c40 <audioFrameVocal>:
{
    1c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
    1c44:	2108      	movs	r1, #8
{
    1c46:	4607      	mov	r7, r0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
    1c48:	2201      	movs	r2, #1
    1c4a:	4873      	ldr	r0, [pc, #460]	; (1e18 <audioFrameVocal+0x1d8>)
	if (newPluck)
    1c4c:	f8df 8210 	ldr.w	r8, [pc, #528]	; 1e60 <audioFrameVocal+0x220>
		for (int i = 0; i < numStringsThisBoard; i++)
    1c50:	f8df a210 	ldr.w	sl, [pc, #528]	; 1e64 <audioFrameVocal+0x224>
{
    1c54:	ed2d 8b02 	vpush	{d8}
    1c58:	b083      	sub	sp, #12
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
    1c5a:	f009 f9e9 	bl	b030 <__HAL_GPIO_WritePin_veneer>
	uint32_t tempCountFrame = DWT->CYCCNT;
    1c5e:	4b6f      	ldr	r3, [pc, #444]	; (1e1c <audioFrameVocal+0x1dc>)
		for (int i = 0; i < numStringsThisBoard; i++)
    1c60:	f89a 1000 	ldrb.w	r1, [sl]
	uint32_t tempCountFrame = DWT->CYCCNT;
    1c64:	685e      	ldr	r6, [r3, #4]
	if (newPluck)
    1c66:	f8d8 3000 	ldr.w	r3, [r8]
    1c6a:	2b00      	cmp	r3, #0
    1c6c:	d035      	beq.n	1cda <audioFrameVocal+0x9a>
		for (int i = 0; i < numStringsThisBoard; i++)
    1c6e:	2900      	cmp	r1, #0
    1c70:	f000 80a1 	beq.w	1db6 <audioFrameVocal+0x176>
    1c74:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 1e68 <audioFrameVocal+0x228>
    1c78:	2400      	movs	r4, #0
    1c7a:	4b69      	ldr	r3, [pc, #420]	; (1e20 <audioFrameVocal+0x1e0>)
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    1c7c:	9601      	str	r6, [sp, #4]
    1c7e:	465e      	mov	r6, fp
				float amplitz = stringInputs[i] * 0.000015259021897f;
    1c80:	eddf 8a68 	vldr	s17, [pc, #416]	; 1e24 <audioFrameVocal+0x1e4>
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    1c84:	469b      	mov	fp, r3
    1c86:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 1e6c <audioFrameVocal+0x22c>
    1c8a:	4d67      	ldr	r5, [pc, #412]	; (1e28 <audioFrameVocal+0x1e8>)
    1c8c:	4a67      	ldr	r2, [pc, #412]	; (1e2c <audioFrameVocal+0x1ec>)
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    1c8e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    1c92:	b29b      	uxth	r3, r3
    1c94:	b92b      	cbnz	r3, 1ca2 <audioFrameVocal+0x62>
    1c96:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    1c9a:	b29b      	uxth	r3, r3
    1c9c:	2b00      	cmp	r3, #0
    1c9e:	f040 808f 	bne.w	1dc0 <audioFrameVocal+0x180>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    1ca2:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	b12b      	cbz	r3, 1cb6 <audioFrameVocal+0x76>
    1caa:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    1cae:	b29b      	uxth	r3, r3
    1cb0:	2b00      	cmp	r3, #0
    1cb2:	f000 80aa 	beq.w	1e0a <audioFrameVocal+0x1ca>
			previousStringInputs[i] = stringInputs[i];
    1cb6:	f832 c014 	ldrh.w	ip, [r2, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    1cba:	f10b 0b04 	add.w	fp, fp, #4
    1cbe:	f109 0904 	add.w	r9, r9, #4
    1cc2:	3648      	adds	r6, #72	; 0x48
			previousStringInputs[i] = stringInputs[i];
    1cc4:	fa1f fc8c 	uxth.w	ip, ip
    1cc8:	f825 c014 	strh.w	ip, [r5, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    1ccc:	3401      	adds	r4, #1
    1cce:	42a1      	cmp	r1, r4
    1cd0:	dcdd      	bgt.n	1c8e <audioFrameVocal+0x4e>
		newPluck = 0;
    1cd2:	2300      	movs	r3, #0
    1cd4:	9e01      	ldr	r6, [sp, #4]
    1cd6:	f8c8 3000 	str.w	r3, [r8]
	for (int i = 0; i < numStringsThisBoard; i++)
    1cda:	f8df 9194 	ldr.w	r9, [pc, #404]	; 1e70 <audioFrameVocal+0x230>
    1cde:	b311      	cbz	r1, 1d26 <audioFrameVocal+0xe6>
		tVoc_set_velum(&vocal[i], (0.4f * knobScaled[7]) + 0.01f);
    1ce0:	eddf 8a53 	vldr	s17, [pc, #332]	; 1e30 <audioFrameVocal+0x1f0>
    1ce4:	464d      	mov	r5, r9
    1ce6:	ed9f 8a53 	vldr	s16, [pc, #332]	; 1e34 <audioFrameVocal+0x1f4>
	for (int i = 0; i < numStringsThisBoard; i++)
    1cea:	f04f 0800 	mov.w	r8, #0
    1cee:	4c52      	ldr	r4, [pc, #328]	; (1e38 <audioFrameVocal+0x1f8>)
		tVoc_set_tongue_shape_and_touch(&vocal[i], knobScaled[8], knobScaled[9],knobScaled[10],knobScaled[11]);
    1cf0:	4628      	mov	r0, r5
    1cf2:	edd4 1a0b 	vldr	s3, [r4, #44]	; 0x2c
    1cf6:	ed94 1a0a 	vldr	s2, [r4, #40]	; 0x28
	for (int i = 0; i < numStringsThisBoard; i++)
    1cfa:	f108 0801 	add.w	r8, r8, #1
		tVoc_set_tongue_shape_and_touch(&vocal[i], knobScaled[8], knobScaled[9],knobScaled[10],knobScaled[11]);
    1cfe:	edd4 0a09 	vldr	s1, [r4, #36]	; 0x24
    1d02:	ed94 0a08 	vldr	s0, [r4, #32]
    1d06:	f009 faab 	bl	b260 <__tVoc_set_tongue_shape_and_touch_veneer>
		tVoc_set_velum(&vocal[i], (0.4f * knobScaled[7]) + 0.01f);
    1d0a:	eeb0 0a48 	vmov.f32	s0, s16
    1d0e:	edd4 7a07 	vldr	s15, [r4, #28]
    1d12:	4628      	mov	r0, r5
	for (int i = 0; i < numStringsThisBoard; i++)
    1d14:	3504      	adds	r5, #4
		tVoc_set_velum(&vocal[i], (0.4f * knobScaled[7]) + 0.01f);
    1d16:	eea7 0aa8 	vfma.f32	s0, s15, s17
    1d1a:	f009 f995 	bl	b048 <__tVoc_set_velum_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    1d1e:	f89a 3000 	ldrb.w	r3, [sl]
    1d22:	4543      	cmp	r3, r8
    1d24:	dce4      	bgt.n	1cf0 <audioFrameVocal+0xb0>
    1d26:	4a45      	ldr	r2, [pc, #276]	; (1e3c <audioFrameVocal+0x1fc>)
		diameters[j] = vocal[0]->tr->diameter[j];
    1d28:	2100      	movs	r1, #0
    1d2a:	f8d9 4000 	ldr.w	r4, [r9]
    1d2e:	f102 0058 	add.w	r0, r2, #88	; 0x58
    1d32:	68a3      	ldr	r3, [r4, #8]
    1d34:	689b      	ldr	r3, [r3, #8]
    1d36:	440b      	add	r3, r1
    1d38:	3104      	adds	r1, #4
    1d3a:	681b      	ldr	r3, [r3, #0]
    1d3c:	f842 3b04 	str.w	r3, [r2], #4
	for (int j = 0; j < 22; j++)
    1d40:	4290      	cmp	r0, r2
    1d42:	d1f6      	bne.n	1d32 <audioFrameVocal+0xf2>
    1d44:	4c3e      	ldr	r4, [pc, #248]	; (1e40 <audioFrameVocal+0x200>)
		current_sample = (int32_t)(audioTickVocal() * TWO_TO_23);
    1d46:	ed9f 8a3f 	vldr	s16, [pc, #252]	; 1e44 <audioFrameVocal+0x204>
    1d4a:	f504 7500 	add.w	r5, r4, #512	; 0x200
    1d4e:	eb04 0487 	add.w	r4, r4, r7, lsl #2
    1d52:	eb05 0587 	add.w	r5, r5, r7, lsl #2
    1d56:	f7ff fec3 	bl	1ae0 <audioTickVocal>
    1d5a:	ee20 0a08 	vmul.f32	s0, s0, s16
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    1d5e:	3408      	adds	r4, #8
		current_sample = (int32_t)(audioTickVocal() * TWO_TO_23);
    1d60:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    1d64:	42a5      	cmp	r5, r4
		current_sample = (int32_t)(audioTickVocal() * TWO_TO_23);
    1d66:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[buffer_offset + i + 1] = current_sample;
    1d6a:	e944 3302 	strd	r3, r3, [r4, #-8]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    1d6e:	d1f2      	bne.n	1d56 <audioFrameVocal+0x116>
	if (switchStrings)
    1d70:	4c35      	ldr	r4, [pc, #212]	; (1e48 <audioFrameVocal+0x208>)
    1d72:	6823      	ldr	r3, [r4, #0]
    1d74:	b9db      	cbnz	r3, 1dae <audioFrameVocal+0x16e>
	switchStrings = 0;
    1d76:	2200      	movs	r2, #0
	timeFrame = DWT->CYCCNT - tempCountFrame;
    1d78:	4b28      	ldr	r3, [pc, #160]	; (1e1c <audioFrameVocal+0x1dc>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    1d7a:	4834      	ldr	r0, [pc, #208]	; (1e4c <audioFrameVocal+0x20c>)
	switchStrings = 0;
    1d7c:	6022      	str	r2, [r4, #0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    1d7e:	685b      	ldr	r3, [r3, #4]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    1d80:	ed90 7a00 	vldr	s14, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    1d84:	1b9b      	subs	r3, r3, r6
    1d86:	4932      	ldr	r1, [pc, #200]	; (1e50 <audioFrameVocal+0x210>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    1d88:	4c32      	ldr	r4, [pc, #200]	; (1e54 <audioFrameVocal+0x214>)
    1d8a:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
    1d8e:	600b      	str	r3, [r1, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
    1d90:	4821      	ldr	r0, [pc, #132]	; (1e18 <audioFrameVocal+0x1d8>)
    1d92:	2108      	movs	r1, #8
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    1d94:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1d98:	ee67 7a87 	vmul.f32	s15, s15, s14
    1d9c:	edc4 7a00 	vstr	s15, [r4]
}
    1da0:	b003      	add	sp, #12
    1da2:	ecbd 8b02 	vpop	{d8}
    1da6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
    1daa:	f009 b941 	b.w	b030 <__HAL_GPIO_WritePin_veneer>
		switchStringModel(switchStrings);
    1dae:	6820      	ldr	r0, [r4, #0]
    1db0:	f7fe fbc6 	bl	540 <switchStringModel>
    1db4:	e7df      	b.n	1d76 <audioFrameVocal+0x136>
		newPluck = 0;
    1db6:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 1e70 <audioFrameVocal+0x230>
    1dba:	f8c8 1000 	str.w	r1, [r8]
	for (int i = 0; i < numStringsThisBoard; i++)
    1dbe:	e7b2      	b.n	1d26 <audioFrameVocal+0xe6>
				stringOctave[i] = octave;
    1dc0:	4b25      	ldr	r3, [pc, #148]	; (1e58 <audioFrameVocal+0x218>)
    1dc2:	edd3 7a00 	vldr	s15, [r3]
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    1dc6:	4b25      	ldr	r3, [pc, #148]	; (1e5c <audioFrameVocal+0x21c>)
				stringOctave[i] = octave;
    1dc8:	edcb 7a00 	vstr	s15, [fp]
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    1dcc:	eb03 0184 	add.w	r1, r3, r4, lsl #2
				float amplitz = stringInputs[i] * 0.000015259021897f;
    1dd0:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    1dd4:	ed91 0a00 	vldr	s0, [r1]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    1dd8:	b29b      	uxth	r3, r3
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    1dda:	ee37 0a80 	vadd.f32	s0, s15, s0
				float amplitz = stringInputs[i] * 0.000015259021897f;
    1dde:	ee08 3a10 	vmov	s16, r3
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    1de2:	f009 f8ed 	bl	afc0 <__mtof_veneer>
				tADSRT_setSustain(&additiveEnv[i][0], 1.0f);// * randomFactors[currentRandom]);
    1de6:	4630      	mov	r0, r6
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    1de8:	ed89 0a00 	vstr	s0, [r9]
				tADSRT_setSustain(&additiveEnv[i][0], 1.0f);// * randomFactors[currentRandom]);
    1dec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    1df0:	f007 f9b6 	bl	9160 <tADSRT_setSustain>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    1df4:	eeb8 0ac8 	vcvt.f32.s32	s0, s16
				tADSRT_on(&additiveEnv[i][0], amplitz);
    1df8:	4630      	mov	r0, r6
    1dfa:	ee20 0a28 	vmul.f32	s0, s0, s17
    1dfe:	f007 f9ff 	bl	9200 <tADSRT_on>
		for (int i = 0; i < numStringsThisBoard; i++)
    1e02:	f89a 1000 	ldrb.w	r1, [sl]
			{
    1e06:	4a09      	ldr	r2, [pc, #36]	; (1e2c <audioFrameVocal+0x1ec>)
    1e08:	e755      	b.n	1cb6 <audioFrameVocal+0x76>
				tADSRT_off(&additiveEnv[i][0]);
    1e0a:	4630      	mov	r0, r6
    1e0c:	f007 fa18 	bl	9240 <tADSRT_off>
		for (int i = 0; i < numStringsThisBoard; i++)
    1e10:	f89a 1000 	ldrb.w	r1, [sl]
    1e14:	4a05      	ldr	r2, [pc, #20]	; (1e2c <audioFrameVocal+0x1ec>)
    1e16:	e74e      	b.n	1cb6 <audioFrameVocal+0x76>
    1e18:	58020000 	.word	0x58020000
    1e1c:	e0001000 	.word	0xe0001000
    1e20:	20014998 	.word	0x20014998
    1e24:	37800080 	.word	0x37800080
    1e28:	20005894 	.word	0x20005894
    1e2c:	20014978 	.word	0x20014978
    1e30:	3ecccccd 	.word	0x3ecccccd
    1e34:	3c23d70a 	.word	0x3c23d70a
    1e38:	200053ac 	.word	0x200053ac
    1e3c:	200050fc 	.word	0x200050fc
    1e40:	30000000 	.word	0x30000000
    1e44:	4b000000 	.word	0x4b000000
    1e48:	200149b8 	.word	0x200149b8
    1e4c:	20000004 	.word	0x20000004
    1e50:	200149e8 	.word	0x200149e8
    1e54:	20005260 	.word	0x20005260
    1e58:	200056e8 	.word	0x200056e8
    1e5c:	20014990 	.word	0x20014990
    1e60:	200056b0 	.word	0x200056b0
    1e64:	20000015 	.word	0x20000015
    1e68:	200009dc 	.word	0x200009dc
    1e6c:	20014948 	.word	0x20014948
    1e70:	20014a5c 	.word	0x20014a5c
    1e74:	f3af 8000 	nop.w
    1e78:	f3af 8000 	nop.w
    1e7c:	f3af 8000 	nop.w

00001e80 <oscillator_tick>:
{
    1e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		oscOuts[0][i][string] = 0.0f;
    1e84:	0082      	lsls	r2, r0, #2
    1e86:	4cbc      	ldr	r4, [pc, #752]	; (2178 <oscillator_tick+0x2f8>)
    1e88:	1c85      	adds	r5, r0, #2
    1e8a:	f04f 0b00 	mov.w	fp, #0
		oscOuts[1][i][string] = 0.0f;
    1e8e:	f100 0108 	add.w	r1, r0, #8
		oscOuts[0][i][string] = 0.0f;
    1e92:	1d07      	adds	r7, r0, #4
    1e94:	eb04 0a80 	add.w	sl, r4, r0, lsl #2
		oscOuts[1][i][string] = 0.0f;
    1e98:	1d86      	adds	r6, r0, #6
{
    1e9a:	4603      	mov	r3, r0
		oscOuts[1][i][string] = 0.0f;
    1e9c:	300a      	adds	r0, #10
	for (int osc = 0; osc < oscToTick; osc++)
    1e9e:	f8df 9310 	ldr.w	r9, [pc, #784]	; 21b0 <oscillator_tick+0x330>
		oscOuts[1][i][string] = 0.0f;
    1ea2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
{
    1ea6:	ed2d 8b06 	vpush	{d8-d10}
    1eaa:	b089      	sub	sp, #36	; 0x24
		oscOuts[0][i][string] = 0.0f;
    1eac:	f8ca b000 	str.w	fp, [sl]
		oscOuts[1][i][string] = 0.0f;
    1eb0:	f8c6 b000 	str.w	fp, [r6]
		oscOuts[0][i][string] = 0.0f;
    1eb4:	9201      	str	r2, [sp, #4]
    1eb6:	eb04 0285 	add.w	r2, r4, r5, lsl #2
		oscOuts[1][i][string] = 0.0f;
    1eba:	9102      	str	r1, [sp, #8]
		oscOuts[0][i][string] = 0.0f;
    1ebc:	f8c2 b000 	str.w	fp, [r2]
		oscOuts[1][i][string] = 0.0f;
    1ec0:	eb04 0281 	add.w	r2, r4, r1, lsl #2
    1ec4:	9003      	str	r0, [sp, #12]
    1ec6:	f8c2 b000 	str.w	fp, [r2]
		oscOuts[0][i][string] = 0.0f;
    1eca:	eb04 0287 	add.w	r2, r4, r7, lsl #2
    1ece:	f8c2 b000 	str.w	fp, [r2]
		oscOuts[1][i][string] = 0.0f;
    1ed2:	eb04 0280 	add.w	r2, r4, r0, lsl #2
    1ed6:	f8c2 b000 	str.w	fp, [r2]
	for (int osc = 0; osc < oscToTick; osc++)
    1eda:	f899 2000 	ldrb.w	r2, [r9]
    1ede:	b1a2      	cbz	r2, 1f0a <oscillator_tick+0x8a>
		if (oscOn[osc])
    1ee0:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 21b4 <oscillator_tick+0x334>
    1ee4:	eef0 8a40 	vmov.f32	s17, s0
    1ee8:	f898 0000 	ldrb.w	r0, [r8]
    1eec:	b990      	cbnz	r0, 1f14 <oscillator_tick+0x94>
	for (int osc = 0; osc < oscToTick; osc++)
    1eee:	2a01      	cmp	r2, #1
    1ef0:	d90b      	bls.n	1f0a <oscillator_tick+0x8a>
		if (oscOn[osc])
    1ef2:	f898 1001 	ldrb.w	r1, [r8, #1]
    1ef6:	2900      	cmp	r1, #0
    1ef8:	f040 8097 	bne.w	202a <oscillator_tick+0x1aa>
	for (int osc = 0; osc < oscToTick; osc++)
    1efc:	2a02      	cmp	r2, #2
    1efe:	d904      	bls.n	1f0a <oscillator_tick+0x8a>
		if (oscOn[osc])
    1f00:	f898 2002 	ldrb.w	r2, [r8, #2]
    1f04:	2a00      	cmp	r2, #0
    1f06:	f040 8157 	bne.w	21b8 <oscillator_tick+0x338>
}
    1f0a:	b009      	add	sp, #36	; 0x24
    1f0c:	ecbd 8b06 	vpop	{d8-d10}
    1f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			float freqOffset= oscParams[OscFreq].realVal[string];
    1f14:	00a9      	lsls	r1, r5, #2
    1f16:	4a99      	ldr	r2, [pc, #612]	; (217c <oscillator_tick+0x2fc>)
    1f18:	9305      	str	r3, [sp, #20]
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
    1f1a:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
			float freqOffset= oscParams[OscFreq].realVal[string];
    1f1e:	440a      	add	r2, r1
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    1f20:	9b01      	ldr	r3, [sp, #4]
    1f22:	4897      	ldr	r0, [pc, #604]	; (2180 <oscillator_tick+0x300>)
			float freqToSmooth = (note + (fine*0.01f));
    1f24:	ed92 7ab6 	vldr	s14, [r2, #728]	; 0x2d8
    1f28:	eddf 7a96 	vldr	s15, [pc, #600]	; 2184 <oscillator_tick+0x304>
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    1f2c:	4418      	add	r0, r3
			float filterSend = oscParams[OscFilterSend].realVal[string];
    1f2e:	ed92 9afc 	vldr	s18, [r2, #1008]	; 0x3f0
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    1f32:	eea7 0a27 	vfma.f32	s0, s14, s15
			float freqOffset= oscParams[OscFreq].realVal[string];
    1f36:	ed92 aabd 	vldr	s20, [r2, #756]	; 0x2f4
			float amp = oscParams[OscAmp].realVal[string];
    1f3a:	edd2 9acb 	vldr	s19, [r2, #812]	; 0x32c
			float shape = oscParams[OscShape].realVal[string];
    1f3e:	edd2 aac4 	vldr	s21, [r2, #784]	; 0x310
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    1f42:	9004      	str	r0, [sp, #16]
    1f44:	f007 f8bc 	bl	90c0 <tExpSmooth_setDest>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    1f48:	9804      	ldr	r0, [sp, #16]
    1f4a:	f007 f8a9 	bl	90a0 <tExpSmooth_tick>
    1f4e:	9b01      	ldr	r3, [sp, #4]
    1f50:	4a8d      	ldr	r2, [pc, #564]	; (2188 <oscillator_tick+0x308>)
    1f52:	eef0 0a40 	vmov.f32	s1, s0
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
    1f56:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 218c <oscillator_tick+0x30c>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    1f5a:	441a      	add	r2, r3
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
    1f5c:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 2190 <oscillator_tick+0x310>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    1f60:	edd2 7a00 	vldr	s15, [r2]
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
    1f64:	ee70 0aa7 	vadd.f32	s1, s1, s15
    1f68:	f007 fc9a 	bl	98a0 <LEAF_clip>
    1f6c:	ed9f 7a89 	vldr	s14, [pc, #548]	; 2194 <oscillator_tick+0x314>
    1f70:	eddf 7a89 	vldr	s15, [pc, #548]	; 2198 <oscillator_tick+0x318>
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    1f74:	eef0 0a6a 	vmov.f32	s1, s21
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
    1f78:	4888      	ldr	r0, [pc, #544]	; (219c <oscillator_tick+0x31c>)
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
    1f7a:	eee0 7a07 	vfma.f32	s15, s0, s14
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    1f7e:	9b01      	ldr	r3, [sp, #4]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    1f80:	eeb0 0a4a 	vmov.f32	s0, s20
			float sample = 0.0f;
    1f84:	f8cd b01c 	str.w	fp, [sp, #28]
	int tempIndexI = (int)tempIndexF;
    1f88:	eefd 6ae7 	vcvt.s32.f32	s13, s15
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
    1f8c:	ee38 7a67 	vsub.f32	s14, s16, s15
	int tempIndexI = (int)tempIndexF;
    1f90:	ee16 1a90 	vmov	r1, s13
	tempIndexF = tempIndexF -tempIndexI;
    1f94:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
    1f98:	1c4a      	adds	r2, r1, #1
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
    1f9a:	f3c1 010e 	ubfx	r1, r1, #0, #15
	tempIndexF = tempIndexF -tempIndexI;
    1f9e:	ee77 7ae6 	vsub.f32	s15, s15, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
    1fa2:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
    1fa6:	ee37 7a26 	vadd.f32	s14, s14, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
    1faa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
    1fae:	eb00 0081 	add.w	r0, r0, r1, lsl #2
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    1fb2:	497b      	ldr	r1, [pc, #492]	; (21a0 <oscillator_tick+0x320>)
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
    1fb4:	ed92 6a00 	vldr	s12, [r2]
    1fb8:	edd0 6a00 	vldr	s13, [r0]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    1fbc:	a807      	add	r0, sp, #28
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
    1fbe:	ee67 7a86 	vmul.f32	s15, s15, s12
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    1fc2:	4a78      	ldr	r2, [pc, #480]	; (21a4 <oscillator_tick+0x324>)
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    1fc4:	f8d1 b000 	ldr.w	fp, [r1]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    1fc8:	441a      	add	r2, r3
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    1fca:	9b05      	ldr	r3, [sp, #20]
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
    1fcc:	eee6 7a87 	vfma.f32	s15, s13, s14
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    1fd0:	ed92 7a00 	vldr	s14, [r2]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    1fd4:	2200      	movs	r2, #0
    1fd6:	9304      	str	r3, [sp, #16]
    1fd8:	4611      	mov	r1, r2
    1fda:	eea7 0a87 	vfma.f32	s0, s15, s14
    1fde:	47d8      	blx	fp
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    1fe0:	4a66      	ldr	r2, [pc, #408]	; (217c <oscillator_tick+0x2fc>)
    1fe2:	9b04      	ldr	r3, [sp, #16]
			sample *= amp;
    1fe4:	eddd 7a07 	vldr	s15, [sp, #28]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    1fe8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
			sourceValues[osc][string] = sample;
    1fec:	9901      	ldr	r1, [sp, #4]
			sample *= amp;
    1fee:	ee29 7aa7 	vmul.f32	s14, s19, s15
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    1ff2:	ed92 6aaa 	vldr	s12, [r2, #680]	; 0x2a8
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    1ff6:	ee78 7a49 	vsub.f32	s15, s16, s18
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    1ffa:	4a6b      	ldr	r2, [pc, #428]	; (21a8 <oscillator_tick+0x328>)
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    1ffc:	ee29 9a06 	vmul.f32	s18, s18, s12
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    2000:	edd2 6a00 	vldr	s13, [r2]
			sourceValues[osc][string] = sample;
    2004:	4a69      	ldr	r2, [pc, #420]	; (21ac <oscillator_tick+0x32c>)
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    2006:	ee67 6a26 	vmul.f32	s13, s14, s13
			sourceValues[osc][string] = sample;
    200a:	440a      	add	r2, r1
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    200c:	ee67 7aa6 	vmul.f32	s15, s15, s13
			sourceValues[osc][string] = sample;
    2010:	ed82 7a00 	vstr	s14, [r2]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    2014:	ee29 9a26 	vmul.f32	s18, s18, s13
	for (int osc = 0; osc < oscToTick; osc++)
    2018:	f899 2000 	ldrb.w	r2, [r9]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    201c:	ee67 7a86 	vmul.f32	s15, s15, s12
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    2020:	ed8a 9a00 	vstr	s18, [sl]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    2024:	edc6 7a00 	vstr	s15, [r6]
    2028:	e761      	b.n	1eee <oscillator_tick+0x6e>
			float freqOffset= oscParams[OscFreq].realVal[string];
    202a:	4e54      	ldr	r6, [pc, #336]	; (217c <oscillator_tick+0x2fc>)
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    202c:	eeb0 0a68 	vmov.f32	s0, s17
    2030:	4853      	ldr	r0, [pc, #332]	; (2180 <oscillator_tick+0x300>)
			float freqOffset= oscParams[OscFreq].realVal[string];
    2032:	ea4f 0a85 	mov.w	sl, r5, lsl #2
			float fine = oscParams[OscFine].realVal[string];
    2036:	f206 4244 	addw	r2, r6, #1092	; 0x444
			float freqToSmooth = (note + (fine*0.01f));
    203a:	eddf 7a52 	vldr	s15, [pc, #328]	; 2184 <oscillator_tick+0x304>
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    203e:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    2042:	9304      	str	r3, [sp, #16]
			float fine = oscParams[OscFine].realVal[string];
    2044:	eb02 0285 	add.w	r2, r2, r5, lsl #2
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
    2048:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    204c:	9001      	str	r0, [sp, #4]
			float freqToSmooth = (note + (fine*0.01f));
    204e:	ed92 7a00 	vldr	s14, [r2]
			float freqOffset= oscParams[OscFreq].realVal[string];
    2052:	f506 628c 	add.w	r2, r6, #1120	; 0x460
    2056:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    205a:	eea7 0a27 	vfma.f32	s0, s14, s15
			float freqOffset= oscParams[OscFreq].realVal[string];
    205e:	ed92 aa00 	vldr	s20, [r2]
			float shape = oscParams[OscShape].realVal[string];
    2062:	f206 427c 	addw	r2, r6, #1148	; 0x47c
    2066:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    206a:	edd2 aa00 	vldr	s21, [r2]
			float amp = oscParams[OscAmp].realVal[string];
    206e:	f506 6293 	add.w	r2, r6, #1176	; 0x498
    2072:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    2076:	edd2 9a00 	vldr	s19, [r2]
			float filterSend = oscParams[OscFilterSend].realVal[string];
    207a:	f206 525c 	addw	r2, r6, #1372	; 0x55c
    207e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    2082:	ed92 9a00 	vldr	s18, [r2]
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    2086:	f007 f81b 	bl	90c0 <tExpSmooth_setDest>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    208a:	9801      	ldr	r0, [sp, #4]
    208c:	f007 f808 	bl	90a0 <tExpSmooth_tick>
    2090:	4a3d      	ldr	r2, [pc, #244]	; (2188 <oscillator_tick+0x308>)
    2092:	eef0 0a40 	vmov.f32	s1, s0
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
    2096:	ed9f 1a3d 	vldr	s2, [pc, #244]	; 218c <oscillator_tick+0x30c>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    209a:	4452      	add	r2, sl
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
    209c:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 2190 <oscillator_tick+0x310>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    20a0:	edd2 7a00 	vldr	s15, [r2]
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
    20a4:	ee70 0aa7 	vadd.f32	s1, s1, s15
    20a8:	f007 fbfa 	bl	98a0 <LEAF_clip>
    20ac:	ed9f 7a39 	vldr	s14, [pc, #228]	; 2194 <oscillator_tick+0x314>
    20b0:	eddf 7a39 	vldr	s15, [pc, #228]	; 2198 <oscillator_tick+0x318>
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    20b4:	eef0 0a6a 	vmov.f32	s1, s21
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
    20b8:	4838      	ldr	r0, [pc, #224]	; (219c <oscillator_tick+0x31c>)
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
    20ba:	eee0 7a07 	vfma.f32	s15, s0, s14
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    20be:	9b04      	ldr	r3, [sp, #16]
    20c0:	eeb0 0a4a 	vmov.f32	s0, s20
    20c4:	9301      	str	r3, [sp, #4]
	int tempIndexI = (int)tempIndexF;
    20c6:	eefd 6ae7 	vcvt.s32.f32	s13, s15
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
    20ca:	ee38 7a67 	vsub.f32	s14, s16, s15
	int tempIndexI = (int)tempIndexF;
    20ce:	ee16 1a90 	vmov	r1, s13
	tempIndexF = tempIndexF -tempIndexI;
    20d2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
    20d6:	1c4a      	adds	r2, r1, #1
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
    20d8:	f3c1 010e 	ubfx	r1, r1, #0, #15
	tempIndexF = tempIndexF -tempIndexI;
    20dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
    20e0:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
    20e4:	ee37 7a26 	vadd.f32	s14, s14, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
    20e8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
    20ec:	eb00 0081 	add.w	r0, r0, r1, lsl #2
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    20f0:	2101      	movs	r1, #1
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
    20f2:	ed92 6a00 	vldr	s12, [r2]
    20f6:	edd0 6a00 	vldr	s13, [r0]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    20fa:	a807      	add	r0, sp, #28
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
    20fc:	ee67 7a86 	vmul.f32	s15, s15, s12
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    2100:	4a28      	ldr	r2, [pc, #160]	; (21a4 <oscillator_tick+0x324>)
    2102:	4452      	add	r2, sl
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
    2104:	eee6 7a87 	vfma.f32	s15, s13, s14
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    2108:	ed92 7a00 	vldr	s14, [r2]
			float sample = 0.0f;
    210c:	2200      	movs	r2, #0
    210e:	9207      	str	r2, [sp, #28]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    2110:	4a23      	ldr	r2, [pc, #140]	; (21a0 <oscillator_tick+0x320>)
    2112:	eea7 0a87 	vfma.f32	s0, s15, s14
    2116:	f8d2 b004 	ldr.w	fp, [r2, #4]
    211a:	2200      	movs	r2, #0
    211c:	47d8      	blx	fp
			sample *= amp;
    211e:	ed9d 7a07 	vldr	s14, [sp, #28]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    2122:	9b02      	ldr	r3, [sp, #8]
    2124:	ee78 7a49 	vsub.f32	s15, s16, s18
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    2128:	481f      	ldr	r0, [pc, #124]	; (21a8 <oscillator_tick+0x328>)
			sample *= amp;
    212a:	ee29 7a87 	vmul.f32	s14, s19, s14
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    212e:	eb04 0183 	add.w	r1, r4, r3, lsl #2
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    2132:	9b01      	ldr	r3, [sp, #4]
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    2134:	edd0 6a00 	vldr	s13, [r0]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    2138:	f203 1005 	addw	r0, r3, #261	; 0x105
	for (int osc = 0; osc < oscToTick; osc++)
    213c:	f899 2000 	ldrb.w	r2, [r9]
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    2140:	ee67 6a26 	vmul.f32	s13, s14, s13
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    2144:	eb06 0680 	add.w	r6, r6, r0, lsl #2
	for (int osc = 0; osc < oscToTick; osc++)
    2148:	2a02      	cmp	r2, #2
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    214a:	ee67 7aa6 	vmul.f32	s15, s15, s13
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    214e:	ed96 6a00 	vldr	s12, [r6]
    2152:	ee29 9a06 	vmul.f32	s18, s18, s12
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    2156:	ee67 7a86 	vmul.f32	s15, s15, s12
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    215a:	ee29 9a26 	vmul.f32	s18, s18, s13
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    215e:	edc1 7a00 	vstr	s15, [r1]
			sourceValues[osc][string] = sample;
    2162:	4912      	ldr	r1, [pc, #72]	; (21ac <oscillator_tick+0x32c>)
    2164:	4451      	add	r1, sl
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    2166:	44a2      	add	sl, r4
			sourceValues[osc][string] = sample;
    2168:	ed81 7a00 	vstr	s14, [r1]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    216c:	ed8a 9a00 	vstr	s18, [sl]
	for (int osc = 0; osc < oscToTick; osc++)
    2170:	f63f aec6 	bhi.w	1f00 <oscillator_tick+0x80>
    2174:	e6c9      	b.n	1f0a <oscillator_tick+0x8a>
    2176:	bf00      	nop
    2178:	20005724 	.word	0x20005724
    217c:	20019ad0 	.word	0x20019ad0
    2180:	2000584c 	.word	0x2000584c
    2184:	3c23d70a 	.word	0x3c23d70a
    2188:	20005654 	.word	0x20005654
    218c:	43230000 	.word	0x43230000
    2190:	c3230000 	.word	0xc3230000
    2194:	42c80000 	.word	0x42c80000
    2198:	46800000 	.word	0x46800000
    219c:	30022000 	.word	0x30022000
    21a0:	20005d3c 	.word	0x20005d3c
    21a4:	20005264 	.word	0x20005264
    21a8:	20000018 	.word	0x20000018
    21ac:	20014818 	.word	0x20014818
    21b0:	2000002c 	.word	0x2000002c
    21b4:	20005720 	.word	0x20005720
			float freqOffset= oscParams[OscFreq].realVal[string];
    21b8:	4e51      	ldr	r6, [pc, #324]	; (2300 <oscillator_tick+0x480>)
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    21ba:	eeb0 0a68 	vmov.f32	s0, s17
    21be:	4851      	ldr	r0, [pc, #324]	; (2304 <oscillator_tick+0x484>)
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
    21c0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
			float fine = oscParams[OscFine].realVal[string];
    21c4:	f506 62b6 	add.w	r2, r6, #1456	; 0x5b0
			float freqToSmooth = (note + (fine*0.01f));
    21c8:	eddf 7a4f 	vldr	s15, [pc, #316]	; 2308 <oscillator_tick+0x488>
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    21cc:	eb00 0087 	add.w	r0, r0, r7, lsl #2
    21d0:	9302      	str	r3, [sp, #8]
			float fine = oscParams[OscFine].realVal[string];
    21d2:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    21d6:	9001      	str	r0, [sp, #4]
    21d8:	00bf      	lsls	r7, r7, #2
			float freqToSmooth = (note + (fine*0.01f));
    21da:	ed92 7a00 	vldr	s14, [r2]
			float freqOffset= oscParams[OscFreq].realVal[string];
    21de:	f206 52cc 	addw	r2, r6, #1484	; 0x5cc
    21e2:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    21e6:	eea7 0a27 	vfma.f32	s0, s14, s15
			float freqOffset= oscParams[OscFreq].realVal[string];
    21ea:	edd2 9a00 	vldr	s19, [r2]
			float shape = oscParams[OscShape].realVal[string];
    21ee:	f506 62bd 	add.w	r2, r6, #1512	; 0x5e8
    21f2:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    21f6:	ed92 aa00 	vldr	s20, [r2]
			float amp = oscParams[OscAmp].realVal[string];
    21fa:	f206 6204 	addw	r2, r6, #1540	; 0x604
    21fe:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    2202:	edd2 8a00 	vldr	s17, [r2]
			float filterSend = oscParams[OscFilterSend].realVal[string];
    2206:	f506 62d9 	add.w	r2, r6, #1736	; 0x6c8
    220a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    220e:	ed92 9a00 	vldr	s18, [r2]
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    2212:	f006 ff55 	bl	90c0 <tExpSmooth_setDest>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    2216:	9801      	ldr	r0, [sp, #4]
    2218:	f006 ff42 	bl	90a0 <tExpSmooth_tick>
    221c:	4a3b      	ldr	r2, [pc, #236]	; (230c <oscillator_tick+0x48c>)
    221e:	eef0 0a40 	vmov.f32	s1, s0
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
    2222:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 2310 <oscillator_tick+0x490>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    2226:	443a      	add	r2, r7
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
    2228:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 2314 <oscillator_tick+0x494>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    222c:	edd2 7a00 	vldr	s15, [r2]
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
    2230:	ee70 0aa7 	vadd.f32	s1, s1, s15
    2234:	f007 fb34 	bl	98a0 <LEAF_clip>
    2238:	ed9f 7a37 	vldr	s14, [pc, #220]	; 2318 <oscillator_tick+0x498>
    223c:	eddf 7a37 	vldr	s15, [pc, #220]	; 231c <oscillator_tick+0x49c>
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    2240:	eef0 0a4a 	vmov.f32	s1, s20
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
    2244:	4836      	ldr	r0, [pc, #216]	; (2320 <oscillator_tick+0x4a0>)
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
    2246:	eee0 7a07 	vfma.f32	s15, s0, s14
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    224a:	9b02      	ldr	r3, [sp, #8]
    224c:	eeb0 0a69 	vmov.f32	s0, s19
    2250:	9301      	str	r3, [sp, #4]
	int tempIndexI = (int)tempIndexF;
    2252:	eefd 6ae7 	vcvt.s32.f32	s13, s15
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
    2256:	ee38 7a67 	vsub.f32	s14, s16, s15
	int tempIndexI = (int)tempIndexF;
    225a:	ee16 1a90 	vmov	r1, s13
	tempIndexF = tempIndexF -tempIndexI;
    225e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
    2262:	1c4a      	adds	r2, r1, #1
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
    2264:	f3c1 010e 	ubfx	r1, r1, #0, #15
	tempIndexF = tempIndexF -tempIndexI;
    2268:	ee77 7ae6 	vsub.f32	s15, s15, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
    226c:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
    2270:	ee37 7a26 	vadd.f32	s14, s14, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
    2274:	eb00 0282 	add.w	r2, r0, r2, lsl #2
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
    2278:	eb00 0081 	add.w	r0, r0, r1, lsl #2
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    227c:	2102      	movs	r1, #2
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
    227e:	ed92 6a00 	vldr	s12, [r2]
    2282:	edd0 6a00 	vldr	s13, [r0]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    2286:	a807      	add	r0, sp, #28
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
    2288:	ee67 7a86 	vmul.f32	s15, s15, s12
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    228c:	4a25      	ldr	r2, [pc, #148]	; (2324 <oscillator_tick+0x4a4>)
    228e:	443a      	add	r2, r7
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
    2290:	eee6 7a87 	vfma.f32	s15, s13, s14
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    2294:	ed92 7a00 	vldr	s14, [r2]
			float sample = 0.0f;
    2298:	2200      	movs	r2, #0
    229a:	9207      	str	r2, [sp, #28]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    229c:	4a22      	ldr	r2, [pc, #136]	; (2328 <oscillator_tick+0x4a8>)
    229e:	eea7 0a27 	vfma.f32	s0, s14, s15
    22a2:	6895      	ldr	r5, [r2, #8]
    22a4:	2200      	movs	r2, #0
    22a6:	47a8      	blx	r5
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    22a8:	9b01      	ldr	r3, [sp, #4]
			sample *= amp;
    22aa:	eddd 7a07 	vldr	s15, [sp, #28]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    22ae:	19e2      	adds	r2, r4, r7
    22b0:	f503 73b0 	add.w	r3, r3, #352	; 0x160
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    22b4:	491d      	ldr	r1, [pc, #116]	; (232c <oscillator_tick+0x4ac>)
			sample *= amp;
    22b6:	ee28 7aa7 	vmul.f32	s14, s17, s15
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    22ba:	9803      	ldr	r0, [sp, #12]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    22bc:	eb06 0683 	add.w	r6, r6, r3, lsl #2
			sourceValues[osc][string] = sample;
    22c0:	4b1b      	ldr	r3, [pc, #108]	; (2330 <oscillator_tick+0x4b0>)
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    22c2:	ed91 6a00 	vldr	s12, [r1]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    22c6:	ee78 7a49 	vsub.f32	s15, s16, s18
			sourceValues[osc][string] = sample;
    22ca:	443b      	add	r3, r7
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    22cc:	edd6 6a00 	vldr	s13, [r6]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    22d0:	eb04 0480 	add.w	r4, r4, r0, lsl #2
			sourceValues[osc][string] = sample;
    22d4:	ed83 7a00 	vstr	s14, [r3]
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    22d8:	ee27 7a06 	vmul.f32	s14, s14, s12
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    22dc:	ee26 9a89 	vmul.f32	s18, s13, s18
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    22e0:	ee67 7a87 	vmul.f32	s15, s15, s14
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    22e4:	ee29 9a07 	vmul.f32	s18, s18, s14
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    22e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    22ec:	ed82 9a00 	vstr	s18, [r2]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    22f0:	edc4 7a00 	vstr	s15, [r4]
}
    22f4:	b009      	add	sp, #36	; 0x24
    22f6:	ecbd 8b06 	vpop	{d8-d10}
    22fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    22fe:	bf00      	nop
    2300:	20019ad0 	.word	0x20019ad0
    2304:	2000584c 	.word	0x2000584c
    2308:	3c23d70a 	.word	0x3c23d70a
    230c:	20005654 	.word	0x20005654
    2310:	43230000 	.word	0x43230000
    2314:	c3230000 	.word	0xc3230000
    2318:	42c80000 	.word	0x42c80000
    231c:	46800000 	.word	0x46800000
    2320:	30022000 	.word	0x30022000
    2324:	20005264 	.word	0x20005264
    2328:	20005d3c 	.word	0x20005d3c
    232c:	20000018 	.word	0x20000018
    2330:	20014818 	.word	0x20014818
    2334:	f3af 8000 	nop.w
    2338:	f3af 8000 	nop.w
    233c:	f3af 8000 	nop.w

00002340 <sawSquareTick>:
{
    2340:	b538      	push	{r3, r4, r5, lr}
	tPBSawSquare_setFreq(&sawPaired[v][string], freq);
    2342:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    2346:	4c0e      	ldr	r4, [pc, #56]	; (2380 <sawSquareTick+0x40>)
{
    2348:	4605      	mov	r5, r0
	tPBSawSquare_setFreq(&sawPaired[v][string], freq);
    234a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
{
    234e:	ed2d 8b02 	vpush	{d8}
    2352:	eeb0 8a60 	vmov.f32	s16, s1
	tPBSawSquare_setFreq(&sawPaired[v][string], freq);
    2356:	4620      	mov	r0, r4
    2358:	f007 fd12 	bl	9d80 <tPBSawSquare_setFreq>
	tPBSawSquare_setShape(&sawPaired[v][string], shape);
    235c:	4620      	mov	r0, r4
    235e:	eeb0 0a48 	vmov.f32	s0, s16
    2362:	f008 fe51 	bl	b008 <__tPBSawSquare_setShape_veneer>
    *sample += tPBSawSquare_tick(&sawPaired[v][string]);
    2366:	4620      	mov	r0, r4
    2368:	f007 fcba 	bl	9ce0 <tPBSawSquare_tick>
    236c:	edd5 7a00 	vldr	s15, [r5]
    2370:	ee37 0a80 	vadd.f32	s0, s15, s0
    2374:	ed85 0a00 	vstr	s0, [r5]
}
    2378:	ecbd 8b02 	vpop	{d8}
    237c:	bd38      	pop	{r3, r4, r5, pc}
    237e:	bf00      	nop
    2380:	20005ce4 	.word	0x20005ce4
    2384:	f3af 8000 	nop.w
    2388:	f3af 8000 	nop.w
    238c:	f3af 8000 	nop.w
    2390:	f3af 8000 	nop.w
    2394:	f3af 8000 	nop.w
    2398:	f3af 8000 	nop.w
    239c:	f3af 8000 	nop.w

000023a0 <sineTriTick>:
{
    23a0:	b538      	push	{r3, r4, r5, lr}
    tPBSineTriangle_setFreq(&sinePaired[v][string], freq);
    23a2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    23a6:	4c0e      	ldr	r4, [pc, #56]	; (23e0 <sineTriTick+0x40>)
{
    23a8:	4605      	mov	r5, r0
    tPBSineTriangle_setFreq(&sinePaired[v][string], freq);
    23aa:	eb04 0483 	add.w	r4, r4, r3, lsl #2
{
    23ae:	ed2d 8b02 	vpush	{d8}
    23b2:	eeb0 8a60 	vmov.f32	s16, s1
    tPBSineTriangle_setFreq(&sinePaired[v][string], freq);
    23b6:	4620      	mov	r0, r4
    23b8:	f007 fb32 	bl	9a20 <tPBSineTriangle_setFreq>
    tPBSineTriangle_setShape(&sinePaired[v][string],shape);
    23bc:	4620      	mov	r0, r4
    23be:	eeb0 0a48 	vmov.f32	s0, s16
    23c2:	f008 fe31 	bl	b028 <__tPBSineTriangle_setShape_veneer>
    *sample += tPBSineTriangle_tick(&sinePaired[v][string]);
    23c6:	4620      	mov	r0, r4
    23c8:	f007 fa7a 	bl	98c0 <tPBSineTriangle_tick>
    23cc:	edd5 7a00 	vldr	s15, [r5]
    23d0:	ee37 0a80 	vadd.f32	s0, s15, s0
    23d4:	ed85 0a00 	vstr	s0, [r5]
}
    23d8:	ecbd 8b02 	vpop	{d8}
    23dc:	bd38      	pop	{r3, r4, r5, pc}
    23de:	bf00      	nop
    23e0:	20005da0 	.word	0x20005da0
    23e4:	f3af 8000 	nop.w
    23e8:	f3af 8000 	nop.w
    23ec:	f3af 8000 	nop.w
    23f0:	f3af 8000 	nop.w
    23f4:	f3af 8000 	nop.w
    23f8:	f3af 8000 	nop.w
    23fc:	f3af 8000 	nop.w

00002400 <sawTick>:
	tPBSaw_setFreq(&saw[v][string], freq);
    2400:	4a0a      	ldr	r2, [pc, #40]	; (242c <sawTick+0x2c>)
    2402:	eb03 0141 	add.w	r1, r3, r1, lsl #1
{
    2406:	b510      	push	{r4, lr}
    2408:	4604      	mov	r4, r0
    240a:	b082      	sub	sp, #8
	tPBSaw_setFreq(&saw[v][string], freq);
    240c:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    2410:	9001      	str	r0, [sp, #4]
    2412:	f007 fc55 	bl	9cc0 <tPBSaw_setFreq>
    *sample += tPBSaw_tick(&saw[v][string]);
    2416:	9801      	ldr	r0, [sp, #4]
    2418:	f007 fc22 	bl	9c60 <tPBSaw_tick>
    241c:	edd4 7a00 	vldr	s15, [r4]
    2420:	ee37 0a80 	vadd.f32	s0, s15, s0
    2424:	ed84 0a00 	vstr	s0, [r4]
}
    2428:	b002      	add	sp, #8
    242a:	bd10      	pop	{r4, pc}
    242c:	20005ccc 	.word	0x20005ccc
    2430:	f3af 8000 	nop.w
    2434:	f3af 8000 	nop.w
    2438:	f3af 8000 	nop.w
    243c:	f3af 8000 	nop.w

00002440 <pulseTick>:
{
    2440:	b538      	push	{r3, r4, r5, lr}
    tPBPulse_setFreq(&pulse[v][string], freq);
    2442:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    2446:	4c0e      	ldr	r4, [pc, #56]	; (2480 <pulseTick+0x40>)
{
    2448:	4605      	mov	r5, r0
    tPBPulse_setFreq(&pulse[v][string], freq);
    244a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
{
    244e:	ed2d 8b02 	vpush	{d8}
    2452:	eeb0 8a60 	vmov.f32	s16, s1
    tPBPulse_setFreq(&pulse[v][string], freq);
    2456:	4620      	mov	r0, r4
    2458:	f007 fbf2 	bl	9c40 <tPBPulse_setFreq>
    tPBPulse_setWidth(&pulse[v][string], shape);
    245c:	4620      	mov	r0, r4
    245e:	eeb0 0a48 	vmov.f32	s0, s16
    2462:	f008 fded 	bl	b040 <__tPBPulse_setWidth_veneer>
    *sample += tPBPulse_tick(&pulse[v][string]);
    2466:	4620      	mov	r0, r4
    2468:	f007 fbaa 	bl	9bc0 <tPBPulse_tick>
    246c:	edd5 7a00 	vldr	s15, [r5]
    2470:	ee37 0a80 	vadd.f32	s0, s15, s0
    2474:	ed85 0a00 	vstr	s0, [r5]
}
    2478:	ecbd 8b02 	vpop	{d8}
    247c:	bd38      	pop	{r3, r4, r5, pc}
    247e:	bf00      	nop
    2480:	200058ac 	.word	0x200058ac
    2484:	f3af 8000 	nop.w
    2488:	f3af 8000 	nop.w
    248c:	f3af 8000 	nop.w
    2490:	f3af 8000 	nop.w
    2494:	f3af 8000 	nop.w
    2498:	f3af 8000 	nop.w
    249c:	f3af 8000 	nop.w

000024a0 <sineTick>:
    tCycle_setFreq(&sine[v][string], freq);
    24a0:	4a0a      	ldr	r2, [pc, #40]	; (24cc <sineTick+0x2c>)
    24a2:	eb03 0141 	add.w	r1, r3, r1, lsl #1
{
    24a6:	b510      	push	{r4, lr}
    24a8:	4604      	mov	r4, r0
    24aa:	b082      	sub	sp, #8
    tCycle_setFreq(&sine[v][string], freq);
    24ac:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    24b0:	9001      	str	r0, [sp, #4]
    24b2:	f008 feb1 	bl	b218 <__tCycle_setFreq_veneer>
    *sample += tCycle_tick(&sine[v][string]);
    24b6:	9801      	ldr	r0, [sp, #4]
    24b8:	f008 fece 	bl	b258 <__tCycle_tick_veneer>
    24bc:	edd4 7a00 	vldr	s15, [r4]
    24c0:	ee37 0a80 	vadd.f32	s0, s15, s0
    24c4:	ed84 0a00 	vstr	s0, [r4]
}
    24c8:	b002      	add	sp, #8
    24ca:	bd10      	pop	{r4, pc}
    24cc:	20005d88 	.word	0x20005d88
    24d0:	f3af 8000 	nop.w
    24d4:	f3af 8000 	nop.w
    24d8:	f3af 8000 	nop.w
    24dc:	f3af 8000 	nop.w

000024e0 <triTick>:
{
    24e0:	b538      	push	{r3, r4, r5, lr}
    tPBTriangle_setFreq(&tri[v][string], freq);
    24e2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    24e6:	4c0e      	ldr	r4, [pc, #56]	; (2520 <triTick+0x40>)
{
    24e8:	4605      	mov	r5, r0
    tPBTriangle_setFreq(&tri[v][string], freq);
    24ea:	eb04 0483 	add.w	r4, r4, r3, lsl #2
{
    24ee:	ed2d 8b02 	vpush	{d8}
    24f2:	eeb0 8a60 	vmov.f32	s16, s1
    tPBTriangle_setFreq(&tri[v][string], freq);
    24f6:	4620      	mov	r0, r4
    24f8:	f007 fb52 	bl	9ba0 <tPBTriangle_setFreq>
    tPBTriangle_setSkew(&tri[v][string], shape);
    24fc:	4620      	mov	r0, r4
    24fe:	eeb0 0a48 	vmov.f32	s0, s16
    2502:	f008 fd75 	bl	aff0 <__tPBTriangle_setSkew_veneer>
    *sample += tPBTriangle_tick(&tri[v][string]);
    2506:	4620      	mov	r0, r4
    2508:	f007 faaa 	bl	9a60 <tPBTriangle_tick>
    250c:	edd5 7a00 	vldr	s15, [r5]
    2510:	ee37 0a80 	vadd.f32	s0, s15, s0
    2514:	ed85 0a00 	vstr	s0, [r5]
}
    2518:	ecbd 8b02 	vpop	{d8}
    251c:	bd38      	pop	{r3, r4, r5, pc}
    251e:	bf00      	nop
    2520:	20014a44 	.word	0x20014a44
    2524:	f3af 8000 	nop.w
    2528:	f3af 8000 	nop.w
    252c:	f3af 8000 	nop.w
    2530:	f3af 8000 	nop.w
    2534:	f3af 8000 	nop.w
    2538:	f3af 8000 	nop.w
    253c:	f3af 8000 	nop.w

00002540 <userTick>:
}
    2540:	4770      	bx	lr
    2542:	bf00      	nop
    2544:	f3af 8000 	nop.w
    2548:	f3af 8000 	nop.w
    254c:	f3af 8000 	nop.w
    2550:	f3af 8000 	nop.w
    2554:	f3af 8000 	nop.w
    2558:	f3af 8000 	nop.w
    255c:	f3af 8000 	nop.w

00002560 <filter_tick>:
		float enabled = filtParams[FilterEnabled].realVal[string];
    2560:	4b50      	ldr	r3, [pc, #320]	; (26a4 <filter_tick+0x144>)
    2562:	f201 229b 	addw	r2, r1, #667	; 0x29b
		if (!enabledFilt[f]) continue;
    2566:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		float enabled = filtParams[FilterEnabled].realVal[string];
    256a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
{
    256e:	b570      	push	{r4, r5, r6, lr}
    2570:	ed2d 8b04 	vpush	{d8-d9}
		float enabled = filtParams[FilterEnabled].realVal[string];
    2574:	ed92 7a00 	vldr	s14, [r2]
{
    2578:	460c      	mov	r4, r1
    257a:	4605      	mov	r5, r0
		if (!enabledFilt[f]) continue;
    257c:	eeb4 7ae7 	vcmpe.f32	s14, s15
    2580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2584:	d910      	bls.n	25a8 <filter_tick+0x48>
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
    2586:	1c8a      	adds	r2, r1, #2
    2588:	f503 612f 	add.w	r1, r3, #2800	; 0xaf0
    258c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
		cutoff[f] = MIDIcutoff + (note  * keyFollow);
    2590:	ed91 6a00 	vldr	s12, [r1]
		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
    2594:	f603 219c 	addw	r1, r3, #2716	; 0xa9c
    2598:	eb01 0282 	add.w	r2, r1, r2, lsl #2
		cutoff[f] = MIDIcutoff + (note  * keyFollow);
    259c:	edd2 7a00 	vldr	s15, [r2]
    25a0:	eee0 7a06 	vfma.f32	s15, s0, s12
    25a4:	eef0 6a67 	vmov.f32	s13, s15
		float enabled = filtParams[FilterEnabled].realVal[string];
    25a8:	f204 22c5 	addw	r2, r4, #709	; 0x2c5
		if (!enabledFilt[f]) continue;
    25ac:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		float enabled = filtParams[FilterEnabled].realVal[string];
    25b0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    25b4:	ed92 9a00 	vldr	s18, [r2]
		if (!enabledFilt[f]) continue;
    25b8:	eeb4 9ae7 	vcmpe.f32	s18, s15
    25bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    25c0:	d953      	bls.n	266a <filter_tick+0x10a>
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
    25c2:	1ca1      	adds	r1, r4, #2
    25c4:	4a38      	ldr	r2, [pc, #224]	; (26a8 <filter_tick+0x148>)
	if (enabledFilt[0])
    25c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    25ca:	f204 20ef 	addw	r0, r4, #751	; 0x2ef
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
    25ce:	eb02 0181 	add.w	r1, r2, r1, lsl #2
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    25d2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
		cutoff[f] = MIDIcutoff + (note  * keyFollow);
    25d6:	edd1 5a00 	vldr	s11, [r1]
	if (enabledFilt[0])
    25da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		cutoff[f] = MIDIcutoff + (note  * keyFollow);
    25de:	ed11 6a15 	vldr	s12, [r1, #-84]	; 0xffffffac
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    25e2:	ed93 8a00 	vldr	s16, [r3]
		cutoff[f] = MIDIcutoff + (note  * keyFollow);
    25e6:	eea0 6a25 	vfma.f32	s12, s0, s11
    25ea:	eef0 8a46 	vmov.f32	s17, s12
	if (enabledFilt[0])
    25ee:	dd1f      	ble.n	2630 <filter_tick+0xd0>
		filterTick[0](&samples[0], 0, cutoff[0], string);
    25f0:	4e2e      	ldr	r6, [pc, #184]	; (26ac <filter_tick+0x14c>)
    25f2:	eeb0 0a66 	vmov.f32	s0, s13
    25f6:	4622      	mov	r2, r4
    25f8:	2100      	movs	r1, #0
    25fa:	6833      	ldr	r3, [r6, #0]
    25fc:	4628      	mov	r0, r5
    25fe:	4798      	blx	r3
	float sendToFilter2 = samples[0] * (1.0f - sp);
    2600:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	if (enabledFilt[1])
    2604:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	samples[1] += sendToFilter2;
    2608:	ed95 0a01 	vldr	s0, [r5, #4]
	float sendToFilter2 = samples[0] * (1.0f - sp);
    260c:	edd5 7a00 	vldr	s15, [r5]
    2610:	ee37 7a48 	vsub.f32	s14, s14, s16
	if (enabledFilt[1])
    2614:	eeb4 9ae6 	vcmpe.f32	s18, s13
	samples[1] += sendToFilter2;
    2618:	eea7 0a87 	vfma.f32	s0, s15, s14
	if (enabledFilt[1])
    261c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	samples[1] += sendToFilter2;
    2620:	ed85 0a01 	vstr	s0, [r5, #4]
	if (enabledFilt[1])
    2624:	dc11      	bgt.n	264a <filter_tick+0xea>
	return samples[1] + (samples[0] * sp);
    2626:	eea8 0a27 	vfma.f32	s0, s16, s15
}
    262a:	ecbd 8b04 	vpop	{d8-d9}
    262e:	bd70      	pop	{r4, r5, r6, pc}
	float sendToFilter2 = samples[0] * (1.0f - sp);
    2630:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
    2634:	edd5 7a01 	vldr	s15, [r5, #4]
    2638:	edd5 6a00 	vldr	s13, [r5]
    263c:	4e1b      	ldr	r6, [pc, #108]	; (26ac <filter_tick+0x14c>)
	float sendToFilter2 = samples[0] * (1.0f - sp);
    263e:	ee37 7a48 	vsub.f32	s14, s14, s16
	samples[1] += sendToFilter2;
    2642:	eee6 7a87 	vfma.f32	s15, s13, s14
    2646:	edc5 7a01 	vstr	s15, [r5, #4]
		filterTick[1](&samples[1], 1, cutoff[1], string);
    264a:	eeb0 0a68 	vmov.f32	s0, s17
    264e:	6873      	ldr	r3, [r6, #4]
    2650:	4622      	mov	r2, r4
    2652:	2101      	movs	r1, #1
    2654:	1d28      	adds	r0, r5, #4
    2656:	4798      	blx	r3
	return samples[1] + (samples[0] * sp);
    2658:	ed95 0a01 	vldr	s0, [r5, #4]
    265c:	edd5 7a00 	vldr	s15, [r5]
    2660:	eea8 0a27 	vfma.f32	s0, s16, s15
}
    2664:	ecbd 8b04 	vpop	{d8-d9}
    2668:	bd70      	pop	{r4, r5, r6, pc}
	if (enabledFilt[0])
    266a:	eeb4 7ae7 	vcmpe.f32	s14, s15
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    266e:	f204 22ef 	addw	r2, r4, #751	; 0x2ef
    2672:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (enabledFilt[0])
    2676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    267a:	ed93 8a00 	vldr	s16, [r3]
	if (enabledFilt[0])
    267e:	dcb7      	bgt.n	25f0 <filter_tick+0x90>
	float sendToFilter2 = samples[0] * (1.0f - sp);
    2680:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
    2684:	ed95 0a01 	vldr	s0, [r5, #4]
	float sendToFilter2 = samples[0] * (1.0f - sp);
    2688:	edd5 7a00 	vldr	s15, [r5]
    268c:	ee37 7a48 	vsub.f32	s14, s14, s16
	samples[1] += sendToFilter2;
    2690:	eea7 0a27 	vfma.f32	s0, s14, s15
    2694:	ed85 0a01 	vstr	s0, [r5, #4]
	return samples[1] + (samples[0] * sp);
    2698:	eea8 0a27 	vfma.f32	s0, s16, s15
}
    269c:	ecbd 8b04 	vpop	{d8-d9}
    26a0:	bd70      	pop	{r4, r5, r6, pc}
    26a2:	bf00      	nop
    26a4:	20019ad0 	.word	0x20019ad0
    26a8:	2001a668 	.word	0x2001a668
    26ac:	20005240 	.word	0x20005240
    26b0:	f3af 8000 	nop.w
    26b4:	f3af 8000 	nop.w
    26b8:	f3af 8000 	nop.w
    26bc:	f3af 8000 	nop.w

000026c0 <lowpassTick>:
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
    26c0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    26c4:	4b0d      	ldr	r3, [pc, #52]	; (26fc <lowpassTick+0x3c>)
{
    26c6:	b530      	push	{r4, r5, lr}
    26c8:	4605      	mov	r5, r0
    26ca:	b083      	sub	sp, #12
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
    26cc:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    26d0:	0094      	lsls	r4, r2, #2
    26d2:	9001      	str	r0, [sp, #4]
    26d4:	f008 fc48 	bl	af68 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&lowpass[v][string], *sample);
    26d8:	ed95 0a00 	vldr	s0, [r5]
    26dc:	9801      	ldr	r0, [sp, #4]
    26de:	f008 fcb7 	bl	b050 <__tSVF_tick_veneer>
    *sample *= filterGain[v][string];
    26e2:	4b07      	ldr	r3, [pc, #28]	; (2700 <lowpassTick+0x40>)
	*sample = tSVF_tick(&lowpass[v][string], *sample);
    26e4:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    26e8:	4423      	add	r3, r4
    26ea:	edd3 7a00 	vldr	s15, [r3]
    26ee:	ee67 7a80 	vmul.f32	s15, s15, s0
    26f2:	edc5 7a00 	vstr	s15, [r5]
}
    26f6:	b003      	add	sp, #12
    26f8:	bd30      	pop	{r4, r5, pc}
    26fa:	bf00      	nop
    26fc:	2000553c 	.word	0x2000553c
    2700:	20005230 	.word	0x20005230
    2704:	f3af 8000 	nop.w
    2708:	f3af 8000 	nop.w
    270c:	f3af 8000 	nop.w
    2710:	f3af 8000 	nop.w
    2714:	f3af 8000 	nop.w
    2718:	f3af 8000 	nop.w
    271c:	f3af 8000 	nop.w

00002720 <highpassTick>:
	tSVF_setFreqFast(&highpass[v][string], cutoff);
    2720:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    2724:	4b0d      	ldr	r3, [pc, #52]	; (275c <highpassTick+0x3c>)
{
    2726:	b530      	push	{r4, r5, lr}
    2728:	4605      	mov	r5, r0
    272a:	b083      	sub	sp, #12
	tSVF_setFreqFast(&highpass[v][string], cutoff);
    272c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    2730:	0094      	lsls	r4, r2, #2
    2732:	9001      	str	r0, [sp, #4]
    2734:	f008 fc18 	bl	af68 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&highpass[v][string], *sample);
    2738:	ed95 0a00 	vldr	s0, [r5]
    273c:	9801      	ldr	r0, [sp, #4]
    273e:	f008 fc87 	bl	b050 <__tSVF_tick_veneer>
    *sample *= filterGain[v][string];
    2742:	4b07      	ldr	r3, [pc, #28]	; (2760 <highpassTick+0x40>)
	*sample = tSVF_tick(&highpass[v][string], *sample);
    2744:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    2748:	4423      	add	r3, r4
    274a:	edd3 7a00 	vldr	s15, [r3]
    274e:	ee67 7a80 	vmul.f32	s15, s15, s0
    2752:	edc5 7a00 	vstr	s15, [r5]
}
    2756:	b003      	add	sp, #12
    2758:	bd30      	pop	{r4, r5, pc}
    275a:	bf00      	nop
    275c:	200052e8 	.word	0x200052e8
    2760:	20005230 	.word	0x20005230
    2764:	f3af 8000 	nop.w
    2768:	f3af 8000 	nop.w
    276c:	f3af 8000 	nop.w
    2770:	f3af 8000 	nop.w
    2774:	f3af 8000 	nop.w
    2778:	f3af 8000 	nop.w
    277c:	f3af 8000 	nop.w

00002780 <bandpassTick>:
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
    2780:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    2784:	4b0d      	ldr	r3, [pc, #52]	; (27bc <bandpassTick+0x3c>)
{
    2786:	b530      	push	{r4, r5, lr}
    2788:	4605      	mov	r5, r0
    278a:	b083      	sub	sp, #12
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
    278c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    2790:	0094      	lsls	r4, r2, #2
    2792:	9001      	str	r0, [sp, #4]
    2794:	f008 fbe8 	bl	af68 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&bandpass[v][string], *sample);
    2798:	ed95 0a00 	vldr	s0, [r5]
    279c:	9801      	ldr	r0, [sp, #4]
    279e:	f008 fc57 	bl	b050 <__tSVF_tick_veneer>
    *sample *= filterGain[v][string];
    27a2:	4b07      	ldr	r3, [pc, #28]	; (27c0 <bandpassTick+0x40>)
	*sample = tSVF_tick(&bandpass[v][string], *sample);
    27a4:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    27a8:	4423      	add	r3, r4
    27aa:	edd3 7a00 	vldr	s15, [r3]
    27ae:	ee67 7a80 	vmul.f32	s15, s15, s0
    27b2:	edc5 7a00 	vstr	s15, [r5]
}
    27b6:	b003      	add	sp, #12
    27b8:	bd30      	pop	{r4, r5, pc}
    27ba:	bf00      	nop
    27bc:	20000a88 	.word	0x20000a88
    27c0:	20005230 	.word	0x20005230
    27c4:	f3af 8000 	nop.w
    27c8:	f3af 8000 	nop.w
    27cc:	f3af 8000 	nop.w
    27d0:	f3af 8000 	nop.w
    27d4:	f3af 8000 	nop.w
    27d8:	f3af 8000 	nop.w
    27dc:	f3af 8000 	nop.w

000027e0 <diodeLowpassTick>:
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
    27e0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    27e4:	4b0d      	ldr	r3, [pc, #52]	; (281c <diodeLowpassTick+0x3c>)
{
    27e6:	b530      	push	{r4, r5, lr}
    27e8:	4605      	mov	r5, r0
    27ea:	b083      	sub	sp, #12
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
    27ec:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    27f0:	0094      	lsls	r4, r2, #2
    27f2:	9001      	str	r0, [sp, #4]
    27f4:	f008 fc94 	bl	b120 <__tDiodeFilter_setFreqFast_veneer>
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
    27f8:	ed95 0a00 	vldr	s0, [r5]
    27fc:	9801      	ldr	r0, [sp, #4]
    27fe:	f008 fcab 	bl	b158 <__tDiodeFilter_tickEfficient_veneer>
    *sample *= filterGain[v][string];
    2802:	4b07      	ldr	r3, [pc, #28]	; (2820 <diodeLowpassTick+0x40>)
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
    2804:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    2808:	4423      	add	r3, r4
    280a:	edd3 7a00 	vldr	s15, [r3]
    280e:	ee67 7a80 	vmul.f32	s15, s15, s0
    2812:	edc5 7a00 	vstr	s15, [r5]
}
    2816:	b003      	add	sp, #12
    2818:	bd30      	pop	{r4, r5, pc}
    281a:	bf00      	nop
    281c:	200051ac 	.word	0x200051ac
    2820:	20005230 	.word	0x20005230
    2824:	f3af 8000 	nop.w
    2828:	f3af 8000 	nop.w
    282c:	f3af 8000 	nop.w
    2830:	f3af 8000 	nop.w
    2834:	f3af 8000 	nop.w
    2838:	f3af 8000 	nop.w
    283c:	f3af 8000 	nop.w

00002840 <VZpeakTick>:
	tVZFilterBell_setFreq(&VZfilterPeak[v][string], cutoff);
    2840:	4b09      	ldr	r3, [pc, #36]	; (2868 <VZpeakTick+0x28>)
    2842:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    2846:	b510      	push	{r4, lr}
    2848:	4604      	mov	r4, r0
    284a:	b082      	sub	sp, #8
	tVZFilterBell_setFreq(&VZfilterPeak[v][string], cutoff);
    284c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    2850:	9001      	str	r0, [sp, #4]
    2852:	f008 fbb9 	bl	afc8 <__tVZFilterBell_setFreq_veneer>
	*sample = tVZFilterBell_tick(&VZfilterPeak[v][string], *sample);
    2856:	9801      	ldr	r0, [sp, #4]
    2858:	ed94 0a00 	vldr	s0, [r4]
    285c:	f008 fc64 	bl	b128 <__tVZFilterBell_tick_veneer>
    2860:	ed84 0a00 	vstr	s0, [r4]
}
    2864:	b002      	add	sp, #8
    2866:	bd10      	pop	{r4, pc}
    2868:	2000093c 	.word	0x2000093c
    286c:	f3af 8000 	nop.w
    2870:	f3af 8000 	nop.w
    2874:	f3af 8000 	nop.w
    2878:	f3af 8000 	nop.w
    287c:	f3af 8000 	nop.w

00002880 <VZlowshelfTick>:
	tVZFilterLS_setFreqFast(&VZfilterLS[v][string], cutoff);
    2880:	4b09      	ldr	r3, [pc, #36]	; (28a8 <VZlowshelfTick+0x28>)
    2882:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    2886:	b510      	push	{r4, lr}
    2888:	4604      	mov	r4, r0
    288a:	b082      	sub	sp, #8
	tVZFilterLS_setFreqFast(&VZfilterLS[v][string], cutoff);
    288c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    2890:	9001      	str	r0, [sp, #4]
    2892:	f008 fcf1 	bl	b278 <__tVZFilterLS_setFreqFast_veneer>
	*sample = tVZFilterLS_tick(&VZfilterLS[v][string], *sample);
    2896:	9801      	ldr	r0, [sp, #4]
    2898:	ed94 0a00 	vldr	s0, [r4]
    289c:	f008 fb1c 	bl	aed8 <__tVZFilterLS_tick_veneer>
    28a0:	ed84 0a00 	vstr	s0, [r4]
}
    28a4:	b002      	add	sp, #8
    28a6:	bd10      	pop	{r4, pc}
    28a8:	2000092c 	.word	0x2000092c
    28ac:	f3af 8000 	nop.w
    28b0:	f3af 8000 	nop.w
    28b4:	f3af 8000 	nop.w
    28b8:	f3af 8000 	nop.w
    28bc:	f3af 8000 	nop.w

000028c0 <VZhighshelfTick>:
	tVZFilterHS_setFreqFast(&VZfilterHS[v][string], cutoff);
    28c0:	4b09      	ldr	r3, [pc, #36]	; (28e8 <VZhighshelfTick+0x28>)
    28c2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    28c6:	b510      	push	{r4, lr}
    28c8:	4604      	mov	r4, r0
    28ca:	b082      	sub	sp, #8
	tVZFilterHS_setFreqFast(&VZfilterHS[v][string], cutoff);
    28cc:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    28d0:	9001      	str	r0, [sp, #4]
    28d2:	f008 fc49 	bl	b168 <__tVZFilterHS_setFreqFast_veneer>
	*sample = tVZFilterHS_tick(&VZfilterHS[v][string], *sample);
    28d6:	9801      	ldr	r0, [sp, #4]
    28d8:	ed94 0a00 	vldr	s0, [r4]
    28dc:	f008 fc2c 	bl	b138 <__tVZFilterHS_tick_veneer>
    28e0:	ed84 0a00 	vstr	s0, [r4]
}
    28e4:	b002      	add	sp, #8
    28e6:	bd10      	pop	{r4, pc}
    28e8:	2000091c 	.word	0x2000091c
    28ec:	f3af 8000 	nop.w
    28f0:	f3af 8000 	nop.w
    28f4:	f3af 8000 	nop.w
    28f8:	f3af 8000 	nop.w
    28fc:	f3af 8000 	nop.w

00002900 <VZbandrejectTick>:
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
    2900:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    2904:	4b0d      	ldr	r3, [pc, #52]	; (293c <VZbandrejectTick+0x3c>)
{
    2906:	b530      	push	{r4, r5, lr}
    2908:	4605      	mov	r5, r0
    290a:	b083      	sub	sp, #12
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
    290c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    2910:	0094      	lsls	r4, r2, #2
    2912:	9001      	str	r0, [sp, #4]
    2914:	f008 fbf4 	bl	b100 <__tVZFilter_setFreqFast_veneer>
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
    2918:	ed95 0a00 	vldr	s0, [r5]
    291c:	9801      	ldr	r0, [sp, #4]
    291e:	f008 fadf 	bl	aee0 <__tVZFilter_tickEfficient_veneer>
    *sample *= filterGain[v][string];
    2922:	4b07      	ldr	r3, [pc, #28]	; (2940 <VZbandrejectTick+0x40>)
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
    2924:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    2928:	4423      	add	r3, r4
    292a:	edd3 7a00 	vldr	s15, [r3]
    292e:	ee67 7a80 	vmul.f32	s15, s15, s0
    2932:	edc5 7a00 	vstr	s15, [r5]
}
    2936:	b003      	add	sp, #12
    2938:	bd30      	pop	{r4, r5, pc}
    293a:	bf00      	nop
    293c:	2000090c 	.word	0x2000090c
    2940:	20005230 	.word	0x20005230
    2944:	f3af 8000 	nop.w
    2948:	f3af 8000 	nop.w
    294c:	f3af 8000 	nop.w
    2950:	f3af 8000 	nop.w
    2954:	f3af 8000 	nop.w
    2958:	f3af 8000 	nop.w
    295c:	f3af 8000 	nop.w

00002960 <LadderLowpassTick>:
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
    2960:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    2964:	4b0d      	ldr	r3, [pc, #52]	; (299c <LadderLowpassTick+0x3c>)
{
    2966:	b530      	push	{r4, r5, lr}
    2968:	4605      	mov	r5, r0
    296a:	b083      	sub	sp, #12
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
    296c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    2970:	0094      	lsls	r4, r2, #2
    2972:	9001      	str	r0, [sp, #4]
    2974:	f008 fae4 	bl	af40 <__tLadderFilter_setFreqFast_veneer>
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
    2978:	ed95 0a00 	vldr	s0, [r5]
    297c:	9801      	ldr	r0, [sp, #4]
    297e:	f008 fbe3 	bl	b148 <__tLadderFilter_tick_veneer>
    *sample *= filterGain[v][string];
    2982:	4b07      	ldr	r3, [pc, #28]	; (29a0 <LadderLowpassTick+0x40>)
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
    2984:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    2988:	4423      	add	r3, r4
    298a:	edd3 7a00 	vldr	s15, [r3]
    298e:	ee67 7a80 	vmul.f32	s15, s15, s0
    2992:	edc5 7a00 	vstr	s15, [r5]
}
    2996:	b003      	add	sp, #12
    2998:	bd30      	pop	{r4, r5, pc}
    299a:	bf00      	nop
    299c:	200008fc 	.word	0x200008fc
    29a0:	20005230 	.word	0x20005230
    29a4:	f3af 8000 	nop.w
    29a8:	f3af 8000 	nop.w
    29ac:	f3af 8000 	nop.w
    29b0:	f3af 8000 	nop.w
    29b4:	f3af 8000 	nop.w
    29b8:	f3af 8000 	nop.w
    29bc:	f3af 8000 	nop.w

000029c0 <setFreqMultPitch>:
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    29c0:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
    29c4:	4b0f      	ldr	r3, [pc, #60]	; (2a04 <setFreqMultPitch+0x44>)
    29c6:	0042      	lsls	r2, r0, #1
	pitch *= 24.0f;
    29c8:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    29cc:	eb00 008c 	add.w	r0, r0, ip, lsl #2
    29d0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    29d4:	3020      	adds	r0, #32
	pitch *= 24.0f;
    29d6:	ee20 0a07 	vmul.f32	s0, s0, s14
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    29da:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    29de:	4408      	add	r0, r1
    29e0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    29e4:	ed93 7a02 	vldr	s14, [r3, #8]
    29e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
    29ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    29f0:	dd01      	ble.n	29f6 <setFreqMultPitch+0x36>
		pitch = roundf(pitch);
    29f2:	feb8 0a40 	vrinta.f32	s0, s0
	midiAdd[osc][string] = pitch;
    29f6:	4b04      	ldr	r3, [pc, #16]	; (2a08 <setFreqMultPitch+0x48>)
    29f8:	440a      	add	r2, r1
    29fa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    29fe:	ed83 0a00 	vstr	s0, [r3]
}
    2a02:	4770      	bx	lr
    2a04:	20019ad0 	.word	0x20019ad0
    2a08:	20005654 	.word	0x20005654
    2a0c:	f3af 8000 	nop.w
    2a10:	f3af 8000 	nop.w
    2a14:	f3af 8000 	nop.w
    2a18:	f3af 8000 	nop.w
    2a1c:	f3af 8000 	nop.w

00002a20 <setFreqMultHarm>:
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    2a20:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
    2a24:	4b17      	ldr	r3, [pc, #92]	; (2a84 <setFreqMultHarm+0x64>)
    2a26:	0042      	lsls	r2, r0, #1
	harm *= 15.0f;
    2a28:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    2a2c:	eb00 008c 	add.w	r0, r0, ip, lsl #2
    2a30:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    2a34:	3020      	adds	r0, #32
	harm *= 15.0f;
    2a36:	ee20 0a07 	vmul.f32	s0, s0, s14
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    2a3a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2a3e:	4408      	add	r0, r1
    2a40:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    2a44:	ed93 7a02 	vldr	s14, [r3, #8]
    2a48:	eeb4 7ae7 	vcmpe.f32	s14, s15
    2a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2a50:	dd01      	ble.n	2a56 <setFreqMultHarm+0x36>
		harm = roundf(harm);
    2a52:	feb8 0a40 	vrinta.f32	s0, s0
	if (harm >= 0)
    2a56:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
		freqMult[osc][string] = (harm + 1);
    2a5a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	if (harm >= 0)
    2a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2a62:	db08      	blt.n	2a76 <setFreqMultHarm+0x56>
		freqMult[osc][string] = (harm + 1);
    2a64:	ee30 0a27 	vadd.f32	s0, s0, s15
    2a68:	4b07      	ldr	r3, [pc, #28]	; (2a88 <setFreqMultHarm+0x68>)
    2a6a:	440a      	add	r2, r1
    2a6c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2a70:	ed83 0a00 	vstr	s0, [r3]
}
    2a74:	4770      	bx	lr
		freqMult[osc][string] = (1.0f / fabsf((harm - 1)));
    2a76:	ee30 0a67 	vsub.f32	s0, s0, s15
    2a7a:	eeb0 7ac0 	vabs.f32	s14, s0
    2a7e:	ee87 0a87 	vdiv.f32	s0, s15, s14
    2a82:	e7f1      	b.n	2a68 <setFreqMultHarm+0x48>
    2a84:	20019ad0 	.word	0x20019ad0
    2a88:	20005264 	.word	0x20005264
    2a8c:	f3af 8000 	nop.w
    2a90:	f3af 8000 	nop.w
    2a94:	f3af 8000 	nop.w
    2a98:	f3af 8000 	nop.w
    2a9c:	f3af 8000 	nop.w

00002aa0 <lowpassSetQ>:
    tSVF_setQ(&lowpass[v][string], q);
    2aa0:	4b03      	ldr	r3, [pc, #12]	; (2ab0 <lowpassSetQ+0x10>)
    2aa2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2aa6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2aaa:	f008 ba3d 	b.w	af28 <__tSVF_setQ_veneer>
    2aae:	bf00      	nop
    2ab0:	2000553c 	.word	0x2000553c
    2ab4:	f3af 8000 	nop.w
    2ab8:	f3af 8000 	nop.w
    2abc:	f3af 8000 	nop.w

00002ac0 <highpassSetQ>:
    tSVF_setQ(&highpass[v][string], q);
    2ac0:	4b03      	ldr	r3, [pc, #12]	; (2ad0 <highpassSetQ+0x10>)
    2ac2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2ac6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2aca:	f008 ba2d 	b.w	af28 <__tSVF_setQ_veneer>
    2ace:	bf00      	nop
    2ad0:	200052e8 	.word	0x200052e8
    2ad4:	f3af 8000 	nop.w
    2ad8:	f3af 8000 	nop.w
    2adc:	f3af 8000 	nop.w

00002ae0 <bandpassSetQ>:
    tSVF_setQ(&bandpass[v][string], q);
    2ae0:	4b03      	ldr	r3, [pc, #12]	; (2af0 <bandpassSetQ+0x10>)
    2ae2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2ae6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2aea:	f008 ba1d 	b.w	af28 <__tSVF_setQ_veneer>
    2aee:	bf00      	nop
    2af0:	20000a88 	.word	0x20000a88
    2af4:	f3af 8000 	nop.w
    2af8:	f3af 8000 	nop.w
    2afc:	f3af 8000 	nop.w

00002b00 <diodeLowpassSetQ>:
	tDiodeFilter_setQ(&diodeFilters[v][string], q);
    2b00:	4b03      	ldr	r3, [pc, #12]	; (2b10 <diodeLowpassSetQ+0x10>)
    2b02:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2b06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2b0a:	f008 bb39 	b.w	b180 <__tDiodeFilter_setQ_veneer>
    2b0e:	bf00      	nop
    2b10:	200051ac 	.word	0x200051ac
    2b14:	f3af 8000 	nop.w
    2b18:	f3af 8000 	nop.w
    2b1c:	f3af 8000 	nop.w

00002b20 <VZpeakSetQ>:
	tVZFilterBell_setBandwidth(&VZfilterPeak[v][string], q);
    2b20:	4b03      	ldr	r3, [pc, #12]	; (2b30 <VZpeakSetQ+0x10>)
    2b22:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2b26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2b2a:	f008 b9e1 	b.w	aef0 <__tVZFilterBell_setBandwidth_veneer>
    2b2e:	bf00      	nop
    2b30:	2000093c 	.word	0x2000093c
    2b34:	f3af 8000 	nop.w
    2b38:	f3af 8000 	nop.w
    2b3c:	f3af 8000 	nop.w

00002b40 <VZlowshelfSetQ>:
	tVZFilterLS_setResonance(&VZfilterLS[v][string], q);
    2b40:	4b03      	ldr	r3, [pc, #12]	; (2b50 <VZlowshelfSetQ+0x10>)
    2b42:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2b46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2b4a:	f008 ba85 	b.w	b058 <__tVZFilterLS_setResonance_veneer>
    2b4e:	bf00      	nop
    2b50:	2000092c 	.word	0x2000092c
    2b54:	f3af 8000 	nop.w
    2b58:	f3af 8000 	nop.w
    2b5c:	f3af 8000 	nop.w

00002b60 <VZhighshelfSetQ>:
	tVZFilterHS_setResonance(&VZfilterHS[v][string], q);
    2b60:	4b03      	ldr	r3, [pc, #12]	; (2b70 <VZhighshelfSetQ+0x10>)
    2b62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2b66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2b6a:	f008 bb0d 	b.w	b188 <__tVZFilterHS_setResonance_veneer>
    2b6e:	bf00      	nop
    2b70:	2000091c 	.word	0x2000091c
    2b74:	f3af 8000 	nop.w
    2b78:	f3af 8000 	nop.w
    2b7c:	f3af 8000 	nop.w

00002b80 <VZbandrejectSetQ>:
	tVZFilter_setResonance(&VZfilterBR[v][string], q);
    2b80:	4b03      	ldr	r3, [pc, #12]	; (2b90 <VZbandrejectSetQ+0x10>)
    2b82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2b86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2b8a:	f008 bb29 	b.w	b1e0 <__tVZFilter_setResonance_veneer>
    2b8e:	bf00      	nop
    2b90:	2000090c 	.word	0x2000090c
    2b94:	f3af 8000 	nop.w
    2b98:	f3af 8000 	nop.w
    2b9c:	f3af 8000 	nop.w

00002ba0 <LadderLowpassSetQ>:
	tLadderFilter_setQ(&Ladderfilter[v][string], q);
    2ba0:	4b03      	ldr	r3, [pc, #12]	; (2bb0 <LadderLowpassSetQ+0x10>)
    2ba2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2ba6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2baa:	f008 bb45 	b.w	b238 <__tLadderFilter_setQ_veneer>
    2bae:	bf00      	nop
    2bb0:	200008fc 	.word	0x200008fc
    2bb4:	f3af 8000 	nop.w
    2bb8:	f3af 8000 	nop.w
    2bbc:	f3af 8000 	nop.w

00002bc0 <lowpassSetGain>:
    filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    2bc0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    2bc4:	4a1e      	ldr	r2, [pc, #120]	; (2c40 <lowpassSetGain+0x80>)
    filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    2bc6:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    2bca:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 2c44 <lowpassSetGain+0x84>
{
    2bce:	b538      	push	{r3, r4, r5, lr}
    filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    2bd0:	eee0 7a07 	vfma.f32	s15, s0, s14
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    2bd4:	4b1c      	ldr	r3, [pc, #112]	; (2c48 <lowpassSetGain+0x88>)
    2bd6:	ed92 7a00 	vldr	s14, [r2]
{
    2bda:	460c      	mov	r4, r1
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    2bdc:	edd3 0a00 	vldr	s1, [r3]
{
    2be0:	4605      	mov	r5, r0
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    2be2:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 2c4c <lowpassSetGain+0x8c>
    2be6:	eed7 0a87 	vfnms.f32	s1, s15, s14
    2bea:	f006 fe59 	bl	98a0 <LEAF_clip>
    uint32_t inDBIndex = (uint32_t) floatIndex;
    2bee:	eebc 7ac0 	vcvt.u32.f32	s14, s0
    filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    2bf2:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    2bf6:	4a16      	ldr	r2, [pc, #88]	; (2c50 <lowpassSetGain+0x90>)
    filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    2bf8:	4916      	ldr	r1, [pc, #88]	; (2c54 <lowpassSetGain+0x94>)
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    2bfa:	f643 74ff 	movw	r4, #16383	; 0x3fff
    uint32_t inDBIndex = (uint32_t) floatIndex;
    2bfe:	ee17 3a10 	vmov	r3, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    2c02:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    2c06:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    float alpha = floatIndex - (float)inDBIndex;
    2c0a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    2c0e:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    uint32_t inDBIndexPlusOne = inDBIndex + 1;
    2c12:	3301      	adds	r3, #1
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    2c14:	ee77 7ac0 	vsub.f32	s15, s15, s0
    2c18:	42a3      	cmp	r3, r4
    float alpha = floatIndex - (float)inDBIndex;
    2c1a:	ee30 0a47 	vsub.f32	s0, s0, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    2c1e:	edd0 6a00 	vldr	s13, [r0]
    2c22:	bf28      	it	cs
    2c24:	4623      	movcs	r3, r4
    2c26:	ee77 7a87 	vadd.f32	s15, s15, s14
    2c2a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    2c2e:	ed92 7a00 	vldr	s14, [r2]
    2c32:	ee20 0a07 	vmul.f32	s0, s0, s14
    2c36:	eea6 0aa7 	vfma.f32	s0, s13, s15
    filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    2c3a:	ed81 0a00 	vstr	s0, [r1]
}
    2c3e:	bd38      	pop	{r3, r4, r5, pc}
    2c40:	20000e74 	.word	0x20000e74
    2c44:	467ffc00 	.word	0x467ffc00
    2c48:	20000e70 	.word	0x20000e70
    2c4c:	00000000 	.word	0x00000000
    2c50:	30002000 	.word	0x30002000
    2c54:	20005230 	.word	0x20005230
    2c58:	f3af 8000 	nop.w
    2c5c:	f3af 8000 	nop.w

00002c60 <highpassSetGain>:
    2c60:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    2c64:	4a1e      	ldr	r2, [pc, #120]	; (2ce0 <highpassSetGain+0x80>)
    2c66:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    2c6a:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 2ce4 <highpassSetGain+0x84>
    2c6e:	b538      	push	{r3, r4, r5, lr}
    2c70:	eee0 7a07 	vfma.f32	s15, s0, s14
    2c74:	4b1c      	ldr	r3, [pc, #112]	; (2ce8 <highpassSetGain+0x88>)
    2c76:	ed92 7a00 	vldr	s14, [r2]
    2c7a:	460c      	mov	r4, r1
    2c7c:	edd3 0a00 	vldr	s1, [r3]
    2c80:	4605      	mov	r5, r0
    2c82:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 2cec <highpassSetGain+0x8c>
    2c86:	eed7 0a87 	vfnms.f32	s1, s15, s14
    2c8a:	f006 fe09 	bl	98a0 <LEAF_clip>
    2c8e:	eebc 7ac0 	vcvt.u32.f32	s14, s0
    2c92:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    2c96:	4a16      	ldr	r2, [pc, #88]	; (2cf0 <highpassSetGain+0x90>)
    2c98:	4916      	ldr	r1, [pc, #88]	; (2cf4 <highpassSetGain+0x94>)
    2c9a:	f643 74ff 	movw	r4, #16383	; 0x3fff
    2c9e:	ee17 3a10 	vmov	r3, s14
    2ca2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    2ca6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    2caa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    2cae:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    2cb2:	3301      	adds	r3, #1
    2cb4:	ee77 7ac0 	vsub.f32	s15, s15, s0
    2cb8:	42a3      	cmp	r3, r4
    2cba:	ee30 0a47 	vsub.f32	s0, s0, s14
    2cbe:	edd0 6a00 	vldr	s13, [r0]
    2cc2:	bf28      	it	cs
    2cc4:	4623      	movcs	r3, r4
    2cc6:	ee77 7a87 	vadd.f32	s15, s15, s14
    2cca:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    2cce:	ed92 7a00 	vldr	s14, [r2]
    2cd2:	ee20 0a07 	vmul.f32	s0, s0, s14
    2cd6:	eea6 0aa7 	vfma.f32	s0, s13, s15
    2cda:	ed81 0a00 	vstr	s0, [r1]
    2cde:	bd38      	pop	{r3, r4, r5, pc}
    2ce0:	20000e74 	.word	0x20000e74
    2ce4:	467ffc00 	.word	0x467ffc00
    2ce8:	20000e70 	.word	0x20000e70
    2cec:	00000000 	.word	0x00000000
    2cf0:	30002000 	.word	0x30002000
    2cf4:	20005230 	.word	0x20005230
    2cf8:	f3af 8000 	nop.w
    2cfc:	f3af 8000 	nop.w

00002d00 <bandpassSetGain>:
    2d00:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    2d04:	4a1e      	ldr	r2, [pc, #120]	; (2d80 <bandpassSetGain+0x80>)
    2d06:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    2d0a:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 2d84 <bandpassSetGain+0x84>
    2d0e:	b538      	push	{r3, r4, r5, lr}
    2d10:	eee0 7a07 	vfma.f32	s15, s0, s14
    2d14:	4b1c      	ldr	r3, [pc, #112]	; (2d88 <bandpassSetGain+0x88>)
    2d16:	ed92 7a00 	vldr	s14, [r2]
    2d1a:	460c      	mov	r4, r1
    2d1c:	edd3 0a00 	vldr	s1, [r3]
    2d20:	4605      	mov	r5, r0
    2d22:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 2d8c <bandpassSetGain+0x8c>
    2d26:	eed7 0a87 	vfnms.f32	s1, s15, s14
    2d2a:	f006 fdb9 	bl	98a0 <LEAF_clip>
    2d2e:	eebc 7ac0 	vcvt.u32.f32	s14, s0
    2d32:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    2d36:	4a16      	ldr	r2, [pc, #88]	; (2d90 <bandpassSetGain+0x90>)
    2d38:	4916      	ldr	r1, [pc, #88]	; (2d94 <bandpassSetGain+0x94>)
    2d3a:	f643 74ff 	movw	r4, #16383	; 0x3fff
    2d3e:	ee17 3a10 	vmov	r3, s14
    2d42:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    2d46:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    2d4a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    2d4e:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    2d52:	3301      	adds	r3, #1
    2d54:	ee77 7ac0 	vsub.f32	s15, s15, s0
    2d58:	42a3      	cmp	r3, r4
    2d5a:	ee30 0a47 	vsub.f32	s0, s0, s14
    2d5e:	edd0 6a00 	vldr	s13, [r0]
    2d62:	bf28      	it	cs
    2d64:	4623      	movcs	r3, r4
    2d66:	ee77 7a87 	vadd.f32	s15, s15, s14
    2d6a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    2d6e:	ed92 7a00 	vldr	s14, [r2]
    2d72:	ee20 0a07 	vmul.f32	s0, s0, s14
    2d76:	eea6 0aa7 	vfma.f32	s0, s13, s15
    2d7a:	ed81 0a00 	vstr	s0, [r1]
    2d7e:	bd38      	pop	{r3, r4, r5, pc}
    2d80:	20000e74 	.word	0x20000e74
    2d84:	467ffc00 	.word	0x467ffc00
    2d88:	20000e70 	.word	0x20000e70
    2d8c:	00000000 	.word	0x00000000
    2d90:	30002000 	.word	0x30002000
    2d94:	20005230 	.word	0x20005230
    2d98:	f3af 8000 	nop.w
    2d9c:	f3af 8000 	nop.w

00002da0 <diodeLowpassSetGain>:
    2da0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    2da4:	4a1e      	ldr	r2, [pc, #120]	; (2e20 <diodeLowpassSetGain+0x80>)
    2da6:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    2daa:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 2e24 <diodeLowpassSetGain+0x84>
    2dae:	b538      	push	{r3, r4, r5, lr}
    2db0:	eee0 7a07 	vfma.f32	s15, s0, s14
    2db4:	4b1c      	ldr	r3, [pc, #112]	; (2e28 <diodeLowpassSetGain+0x88>)
    2db6:	ed92 7a00 	vldr	s14, [r2]
    2dba:	460c      	mov	r4, r1
    2dbc:	edd3 0a00 	vldr	s1, [r3]
    2dc0:	4605      	mov	r5, r0
    2dc2:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 2e2c <diodeLowpassSetGain+0x8c>
    2dc6:	eed7 0a87 	vfnms.f32	s1, s15, s14
    2dca:	f006 fd69 	bl	98a0 <LEAF_clip>
    2dce:	eebc 7ac0 	vcvt.u32.f32	s14, s0
    2dd2:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    2dd6:	4a16      	ldr	r2, [pc, #88]	; (2e30 <diodeLowpassSetGain+0x90>)
    2dd8:	4916      	ldr	r1, [pc, #88]	; (2e34 <diodeLowpassSetGain+0x94>)
    2dda:	f643 74ff 	movw	r4, #16383	; 0x3fff
    2dde:	ee17 3a10 	vmov	r3, s14
    2de2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    2de6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    2dea:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    2dee:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    2df2:	3301      	adds	r3, #1
    2df4:	ee77 7ac0 	vsub.f32	s15, s15, s0
    2df8:	42a3      	cmp	r3, r4
    2dfa:	ee30 0a47 	vsub.f32	s0, s0, s14
    2dfe:	edd0 6a00 	vldr	s13, [r0]
    2e02:	bf28      	it	cs
    2e04:	4623      	movcs	r3, r4
    2e06:	ee77 7a87 	vadd.f32	s15, s15, s14
    2e0a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    2e0e:	ed92 7a00 	vldr	s14, [r2]
    2e12:	ee20 0a07 	vmul.f32	s0, s0, s14
    2e16:	eea6 0aa7 	vfma.f32	s0, s13, s15
    2e1a:	ed81 0a00 	vstr	s0, [r1]
    2e1e:	bd38      	pop	{r3, r4, r5, pc}
    2e20:	20000e74 	.word	0x20000e74
    2e24:	467ffc00 	.word	0x467ffc00
    2e28:	20000e70 	.word	0x20000e70
    2e2c:	00000000 	.word	0x00000000
    2e30:	30002000 	.word	0x30002000
    2e34:	20005230 	.word	0x20005230
    2e38:	f3af 8000 	nop.w
    2e3c:	f3af 8000 	nop.w

00002e40 <VZpeakSetGain>:
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    2e40:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    2e44:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 2ec4 <VZpeakSetGain+0x84>
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    2e48:	4a1f      	ldr	r2, [pc, #124]	; (2ec8 <VZpeakSetGain+0x88>)
    2e4a:	ed9f 1a20 	vldr	s2, [pc, #128]	; 2ecc <VZpeakSetGain+0x8c>
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    2e4e:	eee0 7a07 	vfma.f32	s15, s0, s14
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    2e52:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 2ed0 <VZpeakSetGain+0x90>
{
    2e56:	b538      	push	{r3, r4, r5, lr}
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    2e58:	4b1e      	ldr	r3, [pc, #120]	; (2ed4 <VZpeakSetGain+0x94>)
{
    2e5a:	460c      	mov	r4, r1
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    2e5c:	ed92 7a00 	vldr	s14, [r2]
{
    2e60:	4605      	mov	r5, r0
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    2e62:	edd3 0a00 	vldr	s1, [r3]
    2e66:	eed7 0a87 	vfnms.f32	s1, s15, s14
    2e6a:	f006 fd19 	bl	98a0 <LEAF_clip>
    uint32_t inDBIndex = (uint32_t) floatIndex;
    2e6e:	eebc 7ac0 	vcvt.u32.f32	s14, s0
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    2e72:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    2e76:	4a18      	ldr	r2, [pc, #96]	; (2ed8 <VZpeakSetGain+0x98>)
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    2e78:	4c18      	ldr	r4, [pc, #96]	; (2edc <VZpeakSetGain+0x9c>)
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    2e7a:	f643 71ff 	movw	r1, #16383	; 0x3fff
    uint32_t inDBIndex = (uint32_t) floatIndex;
    2e7e:	ee17 3a10 	vmov	r3, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    2e82:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    2e86:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    float alpha = floatIndex - (float)inDBIndex;
    2e8a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    2e8e:	eb02 0483 	add.w	r4, r2, r3, lsl #2
    uint32_t inDBIndexPlusOne = inDBIndex + 1;
    2e92:	3301      	adds	r3, #1
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    2e94:	ee77 7ac0 	vsub.f32	s15, s15, s0
    2e98:	428b      	cmp	r3, r1
    float alpha = floatIndex - (float)inDBIndex;
    2e9a:	ee30 0a47 	vsub.f32	s0, s0, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    2e9e:	edd4 6a00 	vldr	s13, [r4]
    2ea2:	bf28      	it	cs
    2ea4:	460b      	movcs	r3, r1
    2ea6:	ee77 7a87 	vadd.f32	s15, s15, s14
    2eaa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    2eae:	ed92 7a00 	vldr	s14, [r2]
    2eb2:	ee20 0a07 	vmul.f32	s0, s0, s14
}
    2eb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    2eba:	eea6 0aa7 	vfma.f32	s0, s13, s15
    2ebe:	f008 b8ff 	b.w	b0c0 <__tVZFilterBell_setGain_veneer>
    2ec2:	bf00      	nop
    2ec4:	42480000 	.word	0x42480000
    2ec8:	20000e74 	.word	0x20000e74
    2ecc:	467ffc00 	.word	0x467ffc00
    2ed0:	00000000 	.word	0x00000000
    2ed4:	20000e70 	.word	0x20000e70
    2ed8:	30002000 	.word	0x30002000
    2edc:	2000093c 	.word	0x2000093c

00002ee0 <VZlowshelfSetGain>:
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    2ee0:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    2ee4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 2f64 <VZlowshelfSetGain+0x84>
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    2ee8:	4a1f      	ldr	r2, [pc, #124]	; (2f68 <VZlowshelfSetGain+0x88>)
    2eea:	ed9f 1a20 	vldr	s2, [pc, #128]	; 2f6c <VZlowshelfSetGain+0x8c>
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    2eee:	eee0 7a07 	vfma.f32	s15, s0, s14
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    2ef2:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 2f70 <VZlowshelfSetGain+0x90>
{
    2ef6:	b538      	push	{r3, r4, r5, lr}
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    2ef8:	4b1e      	ldr	r3, [pc, #120]	; (2f74 <VZlowshelfSetGain+0x94>)
{
    2efa:	460c      	mov	r4, r1
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    2efc:	ed92 7a00 	vldr	s14, [r2]
{
    2f00:	4605      	mov	r5, r0
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    2f02:	edd3 0a00 	vldr	s1, [r3]
    2f06:	eed7 0a87 	vfnms.f32	s1, s15, s14
    2f0a:	f006 fcc9 	bl	98a0 <LEAF_clip>
    uint32_t inDBIndex = (uint32_t) floatIndex;
    2f0e:	eebc 7ac0 	vcvt.u32.f32	s14, s0
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    2f12:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    2f16:	4a18      	ldr	r2, [pc, #96]	; (2f78 <VZlowshelfSetGain+0x98>)
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    2f18:	4c18      	ldr	r4, [pc, #96]	; (2f7c <VZlowshelfSetGain+0x9c>)
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    2f1a:	f643 71ff 	movw	r1, #16383	; 0x3fff
    uint32_t inDBIndex = (uint32_t) floatIndex;
    2f1e:	ee17 3a10 	vmov	r3, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    2f22:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    2f26:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    float alpha = floatIndex - (float)inDBIndex;
    2f2a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    2f2e:	eb02 0483 	add.w	r4, r2, r3, lsl #2
    uint32_t inDBIndexPlusOne = inDBIndex + 1;
    2f32:	3301      	adds	r3, #1
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    2f34:	ee77 7ac0 	vsub.f32	s15, s15, s0
    2f38:	428b      	cmp	r3, r1
    float alpha = floatIndex - (float)inDBIndex;
    2f3a:	ee30 0a47 	vsub.f32	s0, s0, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    2f3e:	edd4 6a00 	vldr	s13, [r4]
    2f42:	bf28      	it	cs
    2f44:	460b      	movcs	r3, r1
    2f46:	ee77 7a87 	vadd.f32	s15, s15, s14
    2f4a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    2f4e:	ed92 7a00 	vldr	s14, [r2]
    2f52:	ee20 0a07 	vmul.f32	s0, s0, s14
}
    2f56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    2f5a:	eea6 0aa7 	vfma.f32	s0, s13, s15
    2f5e:	f008 b96f 	b.w	b240 <__tVZFilterLS_setGain_veneer>
    2f62:	bf00      	nop
    2f64:	42480000 	.word	0x42480000
    2f68:	20000e74 	.word	0x20000e74
    2f6c:	467ffc00 	.word	0x467ffc00
    2f70:	00000000 	.word	0x00000000
    2f74:	20000e70 	.word	0x20000e70
    2f78:	30002000 	.word	0x30002000
    2f7c:	2000092c 	.word	0x2000092c

00002f80 <VZhighshelfSetGain>:
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    2f80:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    2f84:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 3004 <VZhighshelfSetGain+0x84>
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    2f88:	4a1f      	ldr	r2, [pc, #124]	; (3008 <VZhighshelfSetGain+0x88>)
    2f8a:	ed9f 1a20 	vldr	s2, [pc, #128]	; 300c <VZhighshelfSetGain+0x8c>
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    2f8e:	eee0 7a07 	vfma.f32	s15, s0, s14
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    2f92:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 3010 <VZhighshelfSetGain+0x90>
{
    2f96:	b538      	push	{r3, r4, r5, lr}
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    2f98:	4b1e      	ldr	r3, [pc, #120]	; (3014 <VZhighshelfSetGain+0x94>)
{
    2f9a:	460c      	mov	r4, r1
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    2f9c:	ed92 7a00 	vldr	s14, [r2]
{
    2fa0:	4605      	mov	r5, r0
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    2fa2:	edd3 0a00 	vldr	s1, [r3]
    2fa6:	eed7 0a87 	vfnms.f32	s1, s15, s14
    2faa:	f006 fc79 	bl	98a0 <LEAF_clip>
    uint32_t inDBIndex = (uint32_t) floatIndex;
    2fae:	eebc 7ac0 	vcvt.u32.f32	s14, s0
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    2fb2:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    2fb6:	4a18      	ldr	r2, [pc, #96]	; (3018 <VZhighshelfSetGain+0x98>)
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    2fb8:	4c18      	ldr	r4, [pc, #96]	; (301c <VZhighshelfSetGain+0x9c>)
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    2fba:	f643 71ff 	movw	r1, #16383	; 0x3fff
    uint32_t inDBIndex = (uint32_t) floatIndex;
    2fbe:	ee17 3a10 	vmov	r3, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    2fc2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    2fc6:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    float alpha = floatIndex - (float)inDBIndex;
    2fca:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    2fce:	eb02 0483 	add.w	r4, r2, r3, lsl #2
    uint32_t inDBIndexPlusOne = inDBIndex + 1;
    2fd2:	3301      	adds	r3, #1
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    2fd4:	ee77 7ac0 	vsub.f32	s15, s15, s0
    2fd8:	428b      	cmp	r3, r1
    float alpha = floatIndex - (float)inDBIndex;
    2fda:	ee30 0a47 	vsub.f32	s0, s0, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    2fde:	edd4 6a00 	vldr	s13, [r4]
    2fe2:	bf28      	it	cs
    2fe4:	460b      	movcs	r3, r1
    2fe6:	ee77 7a87 	vadd.f32	s15, s15, s14
    2fea:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    2fee:	ed92 7a00 	vldr	s14, [r2]
    2ff2:	ee20 0a07 	vmul.f32	s0, s0, s14
}
    2ff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    2ffa:	eea6 0aa7 	vfma.f32	s0, s13, s15
    2ffe:	f007 bff3 	b.w	afe8 <__tVZFilterHS_setGain_veneer>
    3002:	bf00      	nop
    3004:	42480000 	.word	0x42480000
    3008:	20000e74 	.word	0x20000e74
    300c:	467ffc00 	.word	0x467ffc00
    3010:	00000000 	.word	0x00000000
    3014:	20000e70 	.word	0x20000e70
    3018:	30002000 	.word	0x30002000
    301c:	2000091c 	.word	0x2000091c

00003020 <VZbandrejectSetGain>:
    3020:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    3024:	4a1e      	ldr	r2, [pc, #120]	; (30a0 <VZbandrejectSetGain+0x80>)
    3026:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    302a:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 30a4 <VZbandrejectSetGain+0x84>
    302e:	b538      	push	{r3, r4, r5, lr}
    3030:	eee0 7a07 	vfma.f32	s15, s0, s14
    3034:	4b1c      	ldr	r3, [pc, #112]	; (30a8 <VZbandrejectSetGain+0x88>)
    3036:	ed92 7a00 	vldr	s14, [r2]
    303a:	460c      	mov	r4, r1
    303c:	edd3 0a00 	vldr	s1, [r3]
    3040:	4605      	mov	r5, r0
    3042:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 30ac <VZbandrejectSetGain+0x8c>
    3046:	eed7 0a87 	vfnms.f32	s1, s15, s14
    304a:	f006 fc29 	bl	98a0 <LEAF_clip>
    304e:	eebc 7ac0 	vcvt.u32.f32	s14, s0
    3052:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    3056:	4a16      	ldr	r2, [pc, #88]	; (30b0 <VZbandrejectSetGain+0x90>)
    3058:	4916      	ldr	r1, [pc, #88]	; (30b4 <VZbandrejectSetGain+0x94>)
    305a:	f643 74ff 	movw	r4, #16383	; 0x3fff
    305e:	ee17 3a10 	vmov	r3, s14
    3062:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    3066:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    306a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    306e:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    3072:	3301      	adds	r3, #1
    3074:	ee77 7ac0 	vsub.f32	s15, s15, s0
    3078:	42a3      	cmp	r3, r4
    307a:	ee30 0a47 	vsub.f32	s0, s0, s14
    307e:	edd0 6a00 	vldr	s13, [r0]
    3082:	bf28      	it	cs
    3084:	4623      	movcs	r3, r4
    3086:	ee77 7a87 	vadd.f32	s15, s15, s14
    308a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    308e:	ed92 7a00 	vldr	s14, [r2]
    3092:	ee20 0a07 	vmul.f32	s0, s0, s14
    3096:	eea6 0aa7 	vfma.f32	s0, s13, s15
    309a:	ed81 0a00 	vstr	s0, [r1]
    309e:	bd38      	pop	{r3, r4, r5, pc}
    30a0:	20000e74 	.word	0x20000e74
    30a4:	467ffc00 	.word	0x467ffc00
    30a8:	20000e70 	.word	0x20000e70
    30ac:	00000000 	.word	0x00000000
    30b0:	30002000 	.word	0x30002000
    30b4:	20005230 	.word	0x20005230
    30b8:	f3af 8000 	nop.w
    30bc:	f3af 8000 	nop.w

000030c0 <LadderLowpassSetGain>:
    30c0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    30c4:	4a1e      	ldr	r2, [pc, #120]	; (3140 <LadderLowpassSetGain+0x80>)
    30c6:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    30ca:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 3144 <LadderLowpassSetGain+0x84>
    30ce:	b538      	push	{r3, r4, r5, lr}
    30d0:	eee0 7a07 	vfma.f32	s15, s0, s14
    30d4:	4b1c      	ldr	r3, [pc, #112]	; (3148 <LadderLowpassSetGain+0x88>)
    30d6:	ed92 7a00 	vldr	s14, [r2]
    30da:	460c      	mov	r4, r1
    30dc:	edd3 0a00 	vldr	s1, [r3]
    30e0:	4605      	mov	r5, r0
    30e2:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 314c <LadderLowpassSetGain+0x8c>
    30e6:	eed7 0a87 	vfnms.f32	s1, s15, s14
    30ea:	f006 fbd9 	bl	98a0 <LEAF_clip>
    30ee:	eebc 7ac0 	vcvt.u32.f32	s14, s0
    30f2:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    30f6:	4a16      	ldr	r2, [pc, #88]	; (3150 <LadderLowpassSetGain+0x90>)
    30f8:	4916      	ldr	r1, [pc, #88]	; (3154 <LadderLowpassSetGain+0x94>)
    30fa:	f643 74ff 	movw	r4, #16383	; 0x3fff
    30fe:	ee17 3a10 	vmov	r3, s14
    3102:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    3106:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    310a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    310e:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    3112:	3301      	adds	r3, #1
    3114:	ee77 7ac0 	vsub.f32	s15, s15, s0
    3118:	42a3      	cmp	r3, r4
    311a:	ee30 0a47 	vsub.f32	s0, s0, s14
    311e:	edd0 6a00 	vldr	s13, [r0]
    3122:	bf28      	it	cs
    3124:	4623      	movcs	r3, r4
    3126:	ee77 7a87 	vadd.f32	s15, s15, s14
    312a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    312e:	ed92 7a00 	vldr	s14, [r2]
    3132:	ee20 0a07 	vmul.f32	s0, s0, s14
    3136:	eea6 0aa7 	vfma.f32	s0, s13, s15
    313a:	ed81 0a00 	vstr	s0, [r1]
    313e:	bd38      	pop	{r3, r4, r5, pc}
    3140:	20000e74 	.word	0x20000e74
    3144:	467ffc00 	.word	0x467ffc00
    3148:	20000e70 	.word	0x20000e70
    314c:	00000000 	.word	0x00000000
    3150:	30002000 	.word	0x30002000
    3154:	20005230 	.word	0x20005230
    3158:	f3af 8000 	nop.w
    315c:	f3af 8000 	nop.w

00003160 <envelope_tick>:
{
    3160:	b538      	push	{r3, r4, r5, lr}
		if (envOn[v])
    3162:	4d1d      	ldr	r5, [pc, #116]	; (31d8 <envelope_tick+0x78>)
{
    3164:	4604      	mov	r4, r0
		if (envOn[v])
    3166:	782b      	ldrb	r3, [r5, #0]
    3168:	bb53      	cbnz	r3, 31c0 <envelope_tick+0x60>
    316a:	786b      	ldrb	r3, [r5, #1]
    316c:	b9e3      	cbnz	r3, 31a8 <envelope_tick+0x48>
    316e:	78ab      	ldrb	r3, [r5, #2]
    3170:	b973      	cbnz	r3, 3190 <envelope_tick+0x30>
    3172:	78eb      	ldrb	r3, [r5, #3]
    3174:	b903      	cbnz	r3, 3178 <envelope_tick+0x18>
}
    3176:	bd38      	pop	{r3, r4, r5, pc}
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
    3178:	4b18      	ldr	r3, [pc, #96]	; (31dc <envelope_tick+0x7c>)
    317a:	1da0      	adds	r0, r4, #6
    317c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3180:	f006 f9ee 	bl	9560 <tADSRT_tickNoInterp>
    3184:	4b16      	ldr	r3, [pc, #88]	; (31e0 <envelope_tick+0x80>)
    3186:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    318a:	ed83 0a2e 	vstr	s0, [r3, #184]	; 0xb8
}
    318e:	bd38      	pop	{r3, r4, r5, pc}
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
    3190:	4b12      	ldr	r3, [pc, #72]	; (31dc <envelope_tick+0x7c>)
    3192:	1d20      	adds	r0, r4, #4
    3194:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3198:	f006 f9e2 	bl	9560 <tADSRT_tickNoInterp>
    319c:	4b10      	ldr	r3, [pc, #64]	; (31e0 <envelope_tick+0x80>)
    319e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    31a2:	ed83 0a2c 	vstr	s0, [r3, #176]	; 0xb0
    31a6:	e7e4      	b.n	3172 <envelope_tick+0x12>
    31a8:	4b0c      	ldr	r3, [pc, #48]	; (31dc <envelope_tick+0x7c>)
    31aa:	1ca0      	adds	r0, r4, #2
    31ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    31b0:	f006 f9d6 	bl	9560 <tADSRT_tickNoInterp>
    31b4:	4b0a      	ldr	r3, [pc, #40]	; (31e0 <envelope_tick+0x80>)
    31b6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    31ba:	ed83 0a2a 	vstr	s0, [r3, #168]	; 0xa8
    31be:	e7d6      	b.n	316e <envelope_tick+0xe>
    31c0:	4806      	ldr	r0, [pc, #24]	; (31dc <envelope_tick+0x7c>)
    31c2:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    31c6:	f006 f9cb 	bl	9560 <tADSRT_tickNoInterp>
    31ca:	4b05      	ldr	r3, [pc, #20]	; (31e0 <envelope_tick+0x80>)
    31cc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    31d0:	ed83 0a28 	vstr	s0, [r3, #160]	; 0xa0
    31d4:	e7c9      	b.n	316a <envelope_tick+0xa>
    31d6:	bf00      	nop
    31d8:	200051d4 	.word	0x200051d4
    31dc:	200051d8 	.word	0x200051d8
    31e0:	20014818 	.word	0x20014818
    31e4:	f3af 8000 	nop.w
    31e8:	f3af 8000 	nop.w
    31ec:	f3af 8000 	nop.w
    31f0:	f3af 8000 	nop.w
    31f4:	f3af 8000 	nop.w
    31f8:	f3af 8000 	nop.w
    31fc:	f3af 8000 	nop.w

00003200 <lfo_tick>:
{
    3200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3204:	f8df 804c 	ldr.w	r8, [pc, #76]	; 3254 <lfo_tick+0x54>
    3208:	b082      	sub	sp, #8
    320a:	4d10      	ldr	r5, [pc, #64]	; (324c <lfo_tick+0x4c>)
    320c:	4607      	mov	r7, r0
    320e:	4e10      	ldr	r6, [pc, #64]	; (3250 <lfo_tick+0x50>)
    3210:	f108 0904 	add.w	r9, r8, #4
    3214:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    3218:	4644      	mov	r4, r8
			float sample = 0.0f;
    321a:	f04f 0a00 	mov.w	sl, #0
    321e:	eba4 0108 	sub.w	r1, r4, r8
		if (lfoOn[i])
    3222:	f814 3b01 	ldrb.w	r3, [r4], #1
			lfoShapeTick[i](&sample,i, string);
    3226:	463a      	mov	r2, r7
    3228:	a801      	add	r0, sp, #4
		if (lfoOn[i])
    322a:	b133      	cbz	r3, 323a <lfo_tick+0x3a>
			lfoShapeTick[i](&sample,i, string);
    322c:	6833      	ldr	r3, [r6, #0]
			float sample = 0.0f;
    322e:	f8cd a004 	str.w	sl, [sp, #4]
			lfoShapeTick[i](&sample,i, string);
    3232:	4798      	blx	r3
			sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    3234:	9b01      	ldr	r3, [sp, #4]
    3236:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
	for (int i = 0; i < NUM_LFOS; i++)
    323a:	454c      	cmp	r4, r9
    323c:	f106 0604 	add.w	r6, r6, #4
    3240:	f105 0508 	add.w	r5, r5, #8
    3244:	d1eb      	bne.n	321e <lfo_tick+0x1e>
}
    3246:	b002      	add	sp, #8
    3248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    324c:	20014818 	.word	0x20014818
    3250:	200054c4 	.word	0x200054c4
    3254:	20005460 	.word	0x20005460
    3258:	f3af 8000 	nop.w
    325c:	f3af 8000 	nop.w

00003260 <setEnvelopeAttack>:
	a = a + 0.001f;
    3260:	eddf 7a05 	vldr	s15, [pc, #20]	; 3278 <setEnvelopeAttack+0x18>
	tADSRT_setAttack(&envs[v][string], a);
    3264:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3268:	4b04      	ldr	r3, [pc, #16]	; (327c <setEnvelopeAttack+0x1c>)
    326a:	ee30 0a27 	vadd.f32	s0, s0, s15
    326e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3272:	f005 bf35 	b.w	90e0 <tADSRT_setAttack>
    3276:	bf00      	nop
    3278:	3a83126f 	.word	0x3a83126f
    327c:	200051d8 	.word	0x200051d8

00003280 <setEnvelopeDecay>:
	d = d + 0.001f;
    3280:	eddf 7a05 	vldr	s15, [pc, #20]	; 3298 <setEnvelopeDecay+0x18>
	tADSRT_setDecay(&envs[v][string], d);
    3284:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3288:	4b04      	ldr	r3, [pc, #16]	; (329c <setEnvelopeDecay+0x1c>)
    328a:	ee30 0a27 	vadd.f32	s0, s0, s15
    328e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3292:	f005 bf45 	b.w	9120 <tADSRT_setDecay>
    3296:	bf00      	nop
    3298:	3a83126f 	.word	0x3a83126f
    329c:	200051d8 	.word	0x200051d8

000032a0 <setEnvelopeSustain>:
	tADSRT_setSustain(&envs[v][string], s);
    32a0:	4b03      	ldr	r3, [pc, #12]	; (32b0 <setEnvelopeSustain+0x10>)
    32a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    32a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    32aa:	f005 bf59 	b.w	9160 <tADSRT_setSustain>
    32ae:	bf00      	nop
    32b0:	200051d8 	.word	0x200051d8
    32b4:	f3af 8000 	nop.w
    32b8:	f3af 8000 	nop.w
    32bc:	f3af 8000 	nop.w

000032c0 <setEnvelopeRelease>:
	r = r + 0.001f;
    32c0:	eddf 7a05 	vldr	s15, [pc, #20]	; 32d8 <setEnvelopeRelease+0x18>
	tADSRT_setRelease(&envs[v][string], r);
    32c4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    32c8:	4b04      	ldr	r3, [pc, #16]	; (32dc <setEnvelopeRelease+0x1c>)
    32ca:	ee30 0a27 	vadd.f32	s0, s0, s15
    32ce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    32d2:	f005 bf55 	b.w	9180 <tADSRT_setRelease>
    32d6:	bf00      	nop
    32d8:	3a83126f 	.word	0x3a83126f
    32dc:	200051d8 	.word	0x200051d8

000032e0 <setEnvelopeLeak>:
	tADSRT_setLeakFactor(&envs[v][string], 0.99995f + 0.00005f*(1.f-leak));
    32e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    32e4:	eddf 6a08 	vldr	s13, [pc, #32]	; 3308 <setEnvelopeLeak+0x28>
    32e8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 330c <setEnvelopeLeak+0x2c>
    32ec:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    32f0:	4b07      	ldr	r3, [pc, #28]	; (3310 <setEnvelopeLeak+0x30>)
    32f2:	ee77 7ac0 	vsub.f32	s15, s15, s0
    32f6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    32fa:	eea7 7aa6 	vfma.f32	s14, s15, s13
    32fe:	eeb0 0a47 	vmov.f32	s0, s14
    3302:	f005 bf5d 	b.w	91c0 <tADSRT_setLeakFactor>
    3306:	bf00      	nop
    3308:	3851b717 	.word	0x3851b717
    330c:	3f7ffcb9 	.word	0x3f7ffcb9
    3310:	200051d8 	.word	0x200051d8
    3314:	f3af 8000 	nop.w
    3318:	f3af 8000 	nop.w
    331c:	f3af 8000 	nop.w

00003320 <setAmp>:
	amplitude[string] = amp;
    3320:	4b02      	ldr	r3, [pc, #8]	; (332c <setAmp+0xc>)
    3322:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3326:	ed81 0a00 	vstr	s0, [r1]
}
    332a:	4770      	bx	lr
    332c:	20000a6c 	.word	0x20000a6c
    3330:	f3af 8000 	nop.w
    3334:	f3af 8000 	nop.w
    3338:	f3af 8000 	nop.w
    333c:	f3af 8000 	nop.w

00003340 <setMaster>:
	finalMaster[string] = amp;
    3340:	4b02      	ldr	r3, [pc, #8]	; (334c <setMaster+0xc>)
    3342:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3346:	ed81 0a00 	vstr	s0, [r1]
}
    334a:	4770      	bx	lr
    334c:	20005250 	.word	0x20005250
    3350:	f3af 8000 	nop.w
    3354:	f3af 8000 	nop.w
    3358:	f3af 8000 	nop.w
    335c:	f3af 8000 	nop.w

00003360 <setTranspose>:
	transpose = in;
    3360:	4b01      	ldr	r3, [pc, #4]	; (3368 <setTranspose+0x8>)
    3362:	ed83 0a00 	vstr	s0, [r3]
}
    3366:	4770      	bx	lr
    3368:	20014a40 	.word	0x20014a40
    336c:	f3af 8000 	nop.w
    3370:	f3af 8000 	nop.w
    3374:	f3af 8000 	nop.w
    3378:	f3af 8000 	nop.w
    337c:	f3af 8000 	nop.w

00003380 <setPitchBendRange>:
	bendRangeMultiplier = 1.0f / (16383.0f / (in * 2.0f));
    3380:	eddf 7a03 	vldr	s15, [pc, #12]	; 3390 <setPitchBendRange+0x10>
    3384:	4b03      	ldr	r3, [pc, #12]	; (3394 <setPitchBendRange+0x14>)
    3386:	ee20 0a27 	vmul.f32	s0, s0, s15
    338a:	ed83 0a00 	vstr	s0, [r3]
}
    338e:	4770      	bx	lr
    3390:	39000200 	.word	0x39000200
    3394:	20000000 	.word	0x20000000
    3398:	f3af 8000 	nop.w
    339c:	f3af 8000 	nop.w

000033a0 <setFinalLowpass>:
	tSVF_setFreqFast(&finalLowpass[string], in);
    33a0:	4802      	ldr	r0, [pc, #8]	; (33ac <setFinalLowpass+0xc>)
    33a2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    33a6:	f007 bddf 	b.w	af68 <__tSVF_setFreqFast_veneer>
    33aa:	bf00      	nop
    33ac:	20005248 	.word	0x20005248
    33b0:	f3af 8000 	nop.w
    33b4:	f3af 8000 	nop.w
    33b8:	f3af 8000 	nop.w
    33bc:	f3af 8000 	nop.w

000033c0 <tickMappings>:
{
    33c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int i = 0; i < numMappings; i++)
    33c4:	f8df 915c 	ldr.w	r9, [pc, #348]	; 3524 <tickMappings+0x164>
	interruptChecker = 0;
    33c8:	f04f 0b00 	mov.w	fp, #0
    33cc:	4b51      	ldr	r3, [pc, #324]	; (3514 <tickMappings+0x154>)
	for (int i = 0; i < numMappings; i++)
    33ce:	f899 2000 	ldrb.w	r2, [r9]
{
    33d2:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 0;
    33d6:	f883 b000 	strb.w	fp, [r3]
	for (int i = 0; i < numMappings; i++)
    33da:	2a00      	cmp	r2, #0
    33dc:	f000 8087 	beq.w	34ee <tickMappings+0x12e>
    33e0:	4c4d      	ldr	r4, [pc, #308]	; (3518 <tickMappings+0x158>)
			for (int v = 0; v < numStringsThisBoard; v++)
    33e2:	f8df 8144 	ldr.w	r8, [pc, #324]	; 3528 <tickMappings+0x168>
    33e6:	e004      	b.n	33f2 <tickMappings+0x32>
	for (int i = 0; i < numMappings; i++)
    33e8:	f10b 0b01 	add.w	fp, fp, #1
    33ec:	344c      	adds	r4, #76	; 0x4c
    33ee:	455a      	cmp	r2, fp
    33f0:	dd7d      	ble.n	34ee <tickMappings+0x12e>
		if (mappings[i].destNumber != 255)
    33f2:	f814 3c08 	ldrb.w	r3, [r4, #-8]
    33f6:	2bff      	cmp	r3, #255	; 0xff
    33f8:	d0f6      	beq.n	33e8 <tickMappings+0x28>
			for (int v = 0; v < numStringsThisBoard; v++)
    33fa:	f898 3000 	ldrb.w	r3, [r8]
    33fe:	2b00      	cmp	r3, #0
    3400:	d0f2      	beq.n	33e8 <tickMappings+0x28>
    3402:	4b46      	ldr	r3, [pc, #280]	; (351c <tickMappings+0x15c>)
    3404:	4626      	mov	r6, r4
    3406:	2500      	movs	r5, #0
    3408:	eb03 07cb 	add.w	r7, r3, fp, lsl #3
					if (mappings[i].hookActive[j])
    340c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    3410:	2b00      	cmp	r3, #0
    3412:	d070      	beq.n	34f6 <tickMappings+0x136>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    3414:	6832      	ldr	r2, [r6, #0]
    3416:	69f3      	ldr	r3, [r6, #28]
    3418:	ed92 8a00 	vldr	s16, [r2]
    341c:	ed93 7a00 	vldr	s14, [r3]
    3420:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    3424:	ee28 8a07 	vmul.f32	s16, s16, s14
						if (mappings[i].sourceSmoothed[j])
    3428:	7e21      	ldrb	r1, [r4, #24]
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    342a:	ee28 8a27 	vmul.f32	s16, s16, s15
						if (mappings[i].sourceSmoothed[j])
    342e:	2900      	cmp	r1, #0
    3430:	d069      	beq.n	3506 <tickMappings+0x146>
							smoothedValue += sum;
    3432:	eef0 7a48 	vmov.f32	s15, s16
				float unsmoothedValue = 0.0f;
    3436:	ed9f 8a3a 	vldr	s16, [pc, #232]	; 3520 <tickMappings+0x160>
					if (mappings[i].hookActive[j])
    343a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    343e:	b183      	cbz	r3, 3462 <tickMappings+0xa2>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    3440:	68b2      	ldr	r2, [r6, #8]
    3442:	6a73      	ldr	r3, [r6, #36]	; 0x24
    3444:	ed92 7a00 	vldr	s14, [r2]
    3448:	ed93 6a00 	vldr	s12, [r3]
    344c:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
    3450:	ee27 7a06 	vmul.f32	s14, s14, s12
						if (mappings[i].sourceSmoothed[j])
    3454:	7e61      	ldrb	r1, [r4, #25]
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    3456:	ee27 7a26 	vmul.f32	s14, s14, s13
						if (mappings[i].sourceSmoothed[j])
    345a:	2900      	cmp	r1, #0
    345c:	d156      	bne.n	350c <tickMappings+0x14c>
							unsmoothedValue += sum;
    345e:	ee38 8a07 	vadd.f32	s16, s16, s14
					if (mappings[i].hookActive[j])
    3462:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    3466:	b183      	cbz	r3, 348a <tickMappings+0xca>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    3468:	6932      	ldr	r2, [r6, #16]
    346a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    346c:	ed92 7a00 	vldr	s14, [r2]
    3470:	ed93 6a00 	vldr	s12, [r3]
    3474:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    3478:	ee27 7a06 	vmul.f32	s14, s14, s12
						if (mappings[i].sourceSmoothed[j])
    347c:	7ea1      	ldrb	r1, [r4, #26]
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    347e:	ee27 7a26 	vmul.f32	s14, s14, s13
						if (mappings[i].sourceSmoothed[j])
    3482:	2900      	cmp	r1, #0
    3484:	d13c      	bne.n	3500 <tickMappings+0x140>
							unsmoothedValue += sum;
    3486:	ee38 8a07 	vadd.f32	s16, s16, s14
				smoothedValue += mappings[i].dest->zeroToOneVal[v];
    348a:	f854 3c04 	ldr.w	r3, [r4, #-4]
				tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
    348e:	4638      	mov	r0, r7
			for (int v = 0; v < numStringsThisBoard; v++)
    3490:	3604      	adds	r6, #4
				smoothedValue += mappings[i].dest->zeroToOneVal[v];
    3492:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    3496:	ed93 0a00 	vldr	s0, [r3]
				tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
    349a:	ee37 0a80 	vadd.f32	s0, s15, s0
    349e:	f005 fe0f 	bl	90c0 <tExpSmooth_setDest>
				smoothedValue = tExpSmooth_tick(&mapSmoothers[i][v]);
    34a2:	4638      	mov	r0, r7
    34a4:	f005 fdfc 	bl	90a0 <tExpSmooth_tick>
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    34a8:	f854 ac04 	ldr.w	sl, [r4, #-4]
    34ac:	ee30 0a08 	vadd.f32	s0, s0, s16
			for (int v = 0; v < numStringsThisBoard; v++)
    34b0:	3704      	adds	r7, #4
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    34b2:	f8da 3010 	ldr.w	r3, [sl, #16]
    34b6:	4798      	blx	r3
    34b8:	1cab      	adds	r3, r5, #2
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    34ba:	4629      	mov	r1, r5
			for (int v = 0; v < numStringsThisBoard; v++)
    34bc:	3501      	adds	r5, #1
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    34be:	eb0a 0283 	add.w	r2, sl, r3, lsl #2
    34c2:	ed82 0a00 	vstr	s0, [r2]
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    34c6:	f854 0c04 	ldr.w	r0, [r4, #-4]
    34ca:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    34ce:	6942      	ldr	r2, [r0, #20]
    34d0:	7e00      	ldrb	r0, [r0, #24]
    34d2:	ed93 0a00 	vldr	s0, [r3]
    34d6:	4790      	blx	r2
			for (int v = 0; v < numStringsThisBoard; v++)
    34d8:	f898 3000 	ldrb.w	r3, [r8]
    34dc:	42ab      	cmp	r3, r5
    34de:	dc95      	bgt.n	340c <tickMappings+0x4c>
	for (int i = 0; i < numMappings; i++)
    34e0:	f899 2000 	ldrb.w	r2, [r9]
    34e4:	f10b 0b01 	add.w	fp, fp, #1
    34e8:	344c      	adds	r4, #76	; 0x4c
    34ea:	455a      	cmp	r2, fp
    34ec:	dc81      	bgt.n	33f2 <tickMappings+0x32>
}
    34ee:	ecbd 8b02 	vpop	{d8}
    34f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				float smoothedValue = 0.0f;
    34f6:	eddf 7a0a 	vldr	s15, [pc, #40]	; 3520 <tickMappings+0x160>
				float unsmoothedValue = 0.0f;
    34fa:	eeb0 8a67 	vmov.f32	s16, s15
    34fe:	e79c      	b.n	343a <tickMappings+0x7a>
							smoothedValue += sum;
    3500:	ee77 7a87 	vadd.f32	s15, s15, s14
    3504:	e7c1      	b.n	348a <tickMappings+0xca>
				float smoothedValue = 0.0f;
    3506:	eddf 7a06 	vldr	s15, [pc, #24]	; 3520 <tickMappings+0x160>
    350a:	e796      	b.n	343a <tickMappings+0x7a>
							smoothedValue += sum;
    350c:	ee77 7a87 	vadd.f32	s15, s15, s14
    3510:	e7a7      	b.n	3462 <tickMappings+0xa2>
    3512:	bf00      	nop
    3514:	20016e43 	.word	0x20016e43
    3518:	20018e80 	.word	0x20018e80
    351c:	20005550 	.word	0x20005550
    3520:	00000000 	.word	0x00000000
    3524:	20019ac0 	.word	0x20019ac0
    3528:	20000015 	.word	0x20000015
    352c:	f3af 8000 	nop.w
    3530:	f3af 8000 	nop.w
    3534:	f3af 8000 	nop.w
    3538:	f3af 8000 	nop.w
    353c:	f3af 8000 	nop.w

00003540 <lfoSawSquareTick>:
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
    3540:	4b05      	ldr	r3, [pc, #20]	; (3558 <lfoSawSquareTick+0x18>)
    3542:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    3546:	b510      	push	{r4, lr}
    3548:	4604      	mov	r4, r0
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
    354a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    354e:	f007 fdcf 	bl	b0f0 <__tSawSquareLFO_tick_veneer>
    3552:	ed84 0a00 	vstr	s0, [r4]
}
    3556:	bd10      	pop	{r4, pc}
    3558:	200054a4 	.word	0x200054a4
    355c:	f3af 8000 	nop.w

00003560 <lfoSineTriTick>:
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
    3560:	4b05      	ldr	r3, [pc, #20]	; (3578 <lfoSineTriTick+0x18>)
    3562:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    3566:	b510      	push	{r4, lr}
    3568:	4604      	mov	r4, r0
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
    356a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    356e:	f007 fe97 	bl	b2a0 <__tSineTriLFO_tick_veneer>
    3572:	ed84 0a00 	vstr	s0, [r4]
}
    3576:	bd10      	pop	{r4, pc}
    3578:	200054f4 	.word	0x200054f4
    357c:	f3af 8000 	nop.w

00003580 <lfoSineTick>:
    *sample = tCycle_tick(&lfoSine[v][string]);
    3580:	4b05      	ldr	r3, [pc, #20]	; (3598 <lfoSineTick+0x18>)
    3582:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    3586:	b510      	push	{r4, lr}
    3588:	4604      	mov	r4, r0
    *sample = tCycle_tick(&lfoSine[v][string]);
    358a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    358e:	f007 fe63 	bl	b258 <__tCycle_tick_veneer>
    3592:	ed84 0a00 	vstr	s0, [r4]
}
    3596:	bd10      	pop	{r4, pc}
    3598:	200054d4 	.word	0x200054d4
    359c:	f3af 8000 	nop.w

000035a0 <lfoTriTick>:
    *sample = tTriLFO_tick(&lfoTri[v][string]);
    35a0:	4b05      	ldr	r3, [pc, #20]	; (35b8 <lfoTriTick+0x18>)
    35a2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    35a6:	b510      	push	{r4, lr}
    35a8:	4604      	mov	r4, r0
    *sample = tTriLFO_tick(&lfoTri[v][string]);
    35aa:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    35ae:	f007 fdab 	bl	b108 <__tTriLFO_tick_veneer>
    35b2:	ed84 0a00 	vstr	s0, [r4]
}
    35b6:	bd10      	pop	{r4, pc}
    35b8:	20005514 	.word	0x20005514
    35bc:	f3af 8000 	nop.w

000035c0 <lfoSawTick>:
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
    35c0:	4b08      	ldr	r3, [pc, #32]	; (35e4 <lfoSawTick+0x24>)
    35c2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    35c6:	b510      	push	{r4, lr}
    35c8:	4604      	mov	r4, r0
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
    35ca:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    35ce:	f007 fe17 	bl	b200 <__tIntPhasor_tick_veneer>
    35d2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    35d6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    35da:	eee0 7a07 	vfma.f32	s15, s0, s14
    35de:	edc4 7a00 	vstr	s15, [r4]
}
    35e2:	bd10      	pop	{r4, pc}
    35e4:	20005484 	.word	0x20005484
    35e8:	f3af 8000 	nop.w
    35ec:	f3af 8000 	nop.w
    35f0:	f3af 8000 	nop.w
    35f4:	f3af 8000 	nop.w
    35f8:	f3af 8000 	nop.w
    35fc:	f3af 8000 	nop.w

00003600 <lfoPulseTick>:
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
    3600:	4b05      	ldr	r3, [pc, #20]	; (3618 <lfoPulseTick+0x18>)
    3602:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    3606:	b510      	push	{r4, lr}
    3608:	4604      	mov	r4, r0
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
    360a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    360e:	f007 fda7 	bl	b160 <__tSquareLFO_tick_veneer>
    3612:	ed84 0a00 	vstr	s0, [r4]
}
    3616:	bd10      	pop	{r4, pc}
    3618:	20005464 	.word	0x20005464
    361c:	f3af 8000 	nop.w

00003620 <lfoSawSquareSetRate>:
	tSawSquareLFO_setFreq(&lfoSawSquare[v][string],r);
    3620:	4b03      	ldr	r3, [pc, #12]	; (3630 <lfoSawSquareSetRate+0x10>)
    3622:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3626:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    362a:	f007 bdd5 	b.w	b1d8 <__tSawSquareLFO_setFreq_veneer>
    362e:	bf00      	nop
    3630:	200054a4 	.word	0x200054a4
    3634:	f3af 8000 	nop.w
    3638:	f3af 8000 	nop.w
    363c:	f3af 8000 	nop.w

00003640 <lfoSineTriSetRate>:
	tSineTriLFO_setFreq(&lfoSineTri[v][string],r);
    3640:	4b03      	ldr	r3, [pc, #12]	; (3650 <lfoSineTriSetRate+0x10>)
    3642:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3646:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    364a:	f007 be11 	b.w	b270 <__tSineTriLFO_setFreq_veneer>
    364e:	bf00      	nop
    3650:	200054f4 	.word	0x200054f4
    3654:	f3af 8000 	nop.w
    3658:	f3af 8000 	nop.w
    365c:	f3af 8000 	nop.w

00003660 <lfoSineSetRate>:
	tCycle_setFreq(&lfoSine[v][string], r);
    3660:	4b03      	ldr	r3, [pc, #12]	; (3670 <lfoSineSetRate+0x10>)
    3662:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3666:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    366a:	f007 bdd5 	b.w	b218 <__tCycle_setFreq_veneer>
    366e:	bf00      	nop
    3670:	200054d4 	.word	0x200054d4
    3674:	f3af 8000 	nop.w
    3678:	f3af 8000 	nop.w
    367c:	f3af 8000 	nop.w

00003680 <lfoTriSetRate>:
	tTriLFO_setFreq(&lfoTri[v][string], r);
    3680:	4b03      	ldr	r3, [pc, #12]	; (3690 <lfoTriSetRate+0x10>)
    3682:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3686:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    368a:	f007 bd15 	b.w	b0b8 <__tTriLFO_setFreq_veneer>
    368e:	bf00      	nop
    3690:	20005514 	.word	0x20005514
    3694:	f3af 8000 	nop.w
    3698:	f3af 8000 	nop.w
    369c:	f3af 8000 	nop.w

000036a0 <lfoSawSetRate>:
	tIntPhasor_setFreq(&lfoSaw[v][string], r);
    36a0:	4b03      	ldr	r3, [pc, #12]	; (36b0 <lfoSawSetRate+0x10>)
    36a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    36a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    36aa:	f007 bc91 	b.w	afd0 <__tIntPhasor_setFreq_veneer>
    36ae:	bf00      	nop
    36b0:	20005484 	.word	0x20005484
    36b4:	f3af 8000 	nop.w
    36b8:	f3af 8000 	nop.w
    36bc:	f3af 8000 	nop.w

000036c0 <lfoPulseSetRate>:
	 tSquareLFO_setFreq(&lfoPulse[v][string], r);
    36c0:	4b03      	ldr	r3, [pc, #12]	; (36d0 <lfoPulseSetRate+0x10>)
    36c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    36c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    36ca:	f007 bc21 	b.w	af10 <__tSquareLFO_setFreq_veneer>
    36ce:	bf00      	nop
    36d0:	20005464 	.word	0x20005464
    36d4:	f3af 8000 	nop.w
    36d8:	f3af 8000 	nop.w
    36dc:	f3af 8000 	nop.w

000036e0 <lfoSawSquareSetPhase>:
	tSawSquareLFO_setPhase(&lfoSawSquare[v][string],p);
    36e0:	4b03      	ldr	r3, [pc, #12]	; (36f0 <lfoSawSquareSetPhase+0x10>)
    36e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    36e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    36ea:	f007 bde1 	b.w	b2b0 <__tSawSquareLFO_setPhase_veneer>
    36ee:	bf00      	nop
    36f0:	200054a4 	.word	0x200054a4
    36f4:	f3af 8000 	nop.w
    36f8:	f3af 8000 	nop.w
    36fc:	f3af 8000 	nop.w

00003700 <lfoSineTriSetPhase>:
	tSineTriLFO_setPhase(&lfoSineTri[v][string], p);
    3700:	4b03      	ldr	r3, [pc, #12]	; (3710 <lfoSineTriSetPhase+0x10>)
    3702:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3706:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    370a:	f007 bce9 	b.w	b0e0 <__tSineTriLFO_setPhase_veneer>
    370e:	bf00      	nop
    3710:	200054f4 	.word	0x200054f4
    3714:	f3af 8000 	nop.w
    3718:	f3af 8000 	nop.w
    371c:	f3af 8000 	nop.w

00003720 <lfoSineSetPhase>:
	tCycle_setPhase(&lfoSine[v][string],p);
    3720:	4b03      	ldr	r3, [pc, #12]	; (3730 <lfoSineSetPhase+0x10>)
    3722:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3726:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    372a:	f007 bd11 	b.w	b150 <__tCycle_setPhase_veneer>
    372e:	bf00      	nop
    3730:	200054d4 	.word	0x200054d4
    3734:	f3af 8000 	nop.w
    3738:	f3af 8000 	nop.w
    373c:	f3af 8000 	nop.w

00003740 <lfoTriSetPhase>:
	tTriLFO_setPhase(&lfoTri[v][string],p);
    3740:	4b03      	ldr	r3, [pc, #12]	; (3750 <lfoTriSetPhase+0x10>)
    3742:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3746:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    374a:	f007 bd61 	b.w	b210 <__tTriLFO_setPhase_veneer>
    374e:	bf00      	nop
    3750:	20005514 	.word	0x20005514
    3754:	f3af 8000 	nop.w
    3758:	f3af 8000 	nop.w
    375c:	f3af 8000 	nop.w

00003760 <lfoSawSetPhase>:
	tIntPhasor_setPhase(&lfoSaw[v][string], p);
    3760:	4b03      	ldr	r3, [pc, #12]	; (3770 <lfoSawSetPhase+0x10>)
    3762:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3766:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    376a:	f007 bc9d 	b.w	b0a8 <__tIntPhasor_setPhase_veneer>
    376e:	bf00      	nop
    3770:	20005484 	.word	0x20005484
    3774:	f3af 8000 	nop.w
    3778:	f3af 8000 	nop.w
    377c:	f3af 8000 	nop.w

00003780 <lfoPulseSetPhase>:
	tSquareLFO_setPhase(&lfoPulse[v][string], p);
    3780:	4b03      	ldr	r3, [pc, #12]	; (3790 <lfoPulseSetPhase+0x10>)
    3782:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3786:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    378a:	f007 bc71 	b.w	b070 <__tSquareLFO_setPhase_veneer>
    378e:	bf00      	nop
    3790:	20005464 	.word	0x20005464
    3794:	f3af 8000 	nop.w
    3798:	f3af 8000 	nop.w
    379c:	f3af 8000 	nop.w

000037a0 <lfoSawSquareSetShape>:
	tSawSquareLFO_setShape(&lfoSawSquare[v][string],s);
    37a0:	4b03      	ldr	r3, [pc, #12]	; (37b0 <lfoSawSquareSetShape+0x10>)
    37a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    37a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    37aa:	f007 bcf1 	b.w	b190 <__tSawSquareLFO_setShape_veneer>
    37ae:	bf00      	nop
    37b0:	200054a4 	.word	0x200054a4
    37b4:	f3af 8000 	nop.w
    37b8:	f3af 8000 	nop.w
    37bc:	f3af 8000 	nop.w

000037c0 <lfoSineTriSetShape>:
	tSineTriLFO_setShape(&lfoSineTri[v][string],s);
    37c0:	4b03      	ldr	r3, [pc, #12]	; (37d0 <lfoSineTriSetShape+0x10>)
    37c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    37c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    37ca:	f007 bc49 	b.w	b060 <__tSineTriLFO_setShape_veneer>
    37ce:	bf00      	nop
    37d0:	200054f4 	.word	0x200054f4
    37d4:	f3af 8000 	nop.w
    37d8:	f3af 8000 	nop.w
    37dc:	f3af 8000 	nop.w

000037e0 <lfoSineSetShape>:
}
    37e0:	4770      	bx	lr
    37e2:	bf00      	nop
    37e4:	f3af 8000 	nop.w
    37e8:	f3af 8000 	nop.w
    37ec:	f3af 8000 	nop.w
    37f0:	f3af 8000 	nop.w
    37f4:	f3af 8000 	nop.w
    37f8:	f3af 8000 	nop.w
    37fc:	f3af 8000 	nop.w

00003800 <lfoTriSetShape>:
    3800:	4770      	bx	lr
    3802:	bf00      	nop
    3804:	f3af 8000 	nop.w
    3808:	f3af 8000 	nop.w
    380c:	f3af 8000 	nop.w
    3810:	f3af 8000 	nop.w
    3814:	f3af 8000 	nop.w
    3818:	f3af 8000 	nop.w
    381c:	f3af 8000 	nop.w

00003820 <lfoSawSetShape>:
    3820:	4770      	bx	lr
    3822:	bf00      	nop
    3824:	f3af 8000 	nop.w
    3828:	f3af 8000 	nop.w
    382c:	f3af 8000 	nop.w
    3830:	f3af 8000 	nop.w
    3834:	f3af 8000 	nop.w
    3838:	f3af 8000 	nop.w
    383c:	f3af 8000 	nop.w

00003840 <lfoPulseSetShape>:
	tSquareLFO_setPulseWidth(&lfoPulse[v][string], s);
    3840:	4b03      	ldr	r3, [pc, #12]	; (3850 <lfoPulseSetShape+0x10>)
    3842:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3846:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    384a:	f007 bb91 	b.w	af70 <__tSquareLFO_setPulseWidth_veneer>
    384e:	bf00      	nop
    3850:	20005464 	.word	0x20005464
    3854:	f3af 8000 	nop.w
    3858:	f3af 8000 	nop.w
    385c:	f3af 8000 	nop.w

00003860 <clipperGainSet>:
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    3860:	4a1f      	ldr	r2, [pc, #124]	; (38e0 <clipperGainSet+0x80>)
    3862:	eef3 6a08 	vmov.f32	s13, #56	; 0x41c00000  24.0
{
    3866:	eeb0 7a40 	vmov.f32	s14, s0
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    386a:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 38e4 <clipperGainSet+0x84>
    386e:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 38e8 <clipperGainSet+0x88>
{
    3872:	b538      	push	{r3, r4, r5, lr}
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    3874:	edd2 7a00 	vldr	s15, [r2]
{
    3878:	460c      	mov	r4, r1
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    387a:	4b1c      	ldr	r3, [pc, #112]	; (38ec <clipperGainSet+0x8c>)
{
    387c:	4605      	mov	r5, r0
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    387e:	ee67 7aa6 	vmul.f32	s15, s15, s13
    3882:	edd3 0a00 	vldr	s1, [r3]
    3886:	eed7 0a27 	vfnms.f32	s1, s14, s15
    388a:	f006 f809 	bl	98a0 <LEAF_clip>
    uint32_t inDBIndex = (uint32_t) floatIndex;
    388e:	eebc 7ac0 	vcvt.u32.f32	s14, s0
	param1[v][string] = dbToATableLookup(value * 24.0f);
    3892:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    3896:	4a16      	ldr	r2, [pc, #88]	; (38f0 <clipperGainSet+0x90>)
	param1[v][string] = dbToATableLookup(value * 24.0f);
    3898:	4916      	ldr	r1, [pc, #88]	; (38f4 <clipperGainSet+0x94>)
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    389a:	f643 74ff 	movw	r4, #16383	; 0x3fff
    uint32_t inDBIndex = (uint32_t) floatIndex;
    389e:	ee17 3a10 	vmov	r3, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    38a2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	param1[v][string] = dbToATableLookup(value * 24.0f);
    38a6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    float alpha = floatIndex - (float)inDBIndex;
    38aa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    38ae:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    uint32_t inDBIndexPlusOne = inDBIndex + 1;
    38b2:	3301      	adds	r3, #1
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    38b4:	ee77 7ac0 	vsub.f32	s15, s15, s0
    38b8:	42a3      	cmp	r3, r4
    float alpha = floatIndex - (float)inDBIndex;
    38ba:	ee30 0a47 	vsub.f32	s0, s0, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    38be:	edd0 6a00 	vldr	s13, [r0]
    38c2:	bf28      	it	cs
    38c4:	4623      	movcs	r3, r4
    38c6:	ee77 7a87 	vadd.f32	s15, s15, s14
    38ca:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    38ce:	ed92 7a00 	vldr	s14, [r2]
    38d2:	ee20 0a07 	vmul.f32	s0, s0, s14
    38d6:	eea6 0aa7 	vfma.f32	s0, s13, s15
	param1[v][string] = dbToATableLookup(value * 24.0f);
    38da:	ed81 0a00 	vstr	s0, [r1]
}
    38de:	bd38      	pop	{r3, r4, r5, pc}
    38e0:	20000e74 	.word	0x20000e74
    38e4:	467ffc00 	.word	0x467ffc00
    38e8:	00000000 	.word	0x00000000
    38ec:	20000e70 	.word	0x20000e70
    38f0:	30002000 	.word	0x30002000
    38f4:	2000575c 	.word	0x2000575c
    38f8:	f3af 8000 	nop.w
    38fc:	f3af 8000 	nop.w

00003900 <wavefolderParam1>:
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    3900:	4a1f      	ldr	r2, [pc, #124]	; (3980 <wavefolderParam1+0x80>)
    3902:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
{
    3906:	eeb0 7a40 	vmov.f32	s14, s0
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    390a:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 3984 <wavefolderParam1+0x84>
    390e:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 3988 <wavefolderParam1+0x88>
{
    3912:	b538      	push	{r3, r4, r5, lr}
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    3914:	edd2 7a00 	vldr	s15, [r2]
{
    3918:	460c      	mov	r4, r1
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    391a:	4b1c      	ldr	r3, [pc, #112]	; (398c <wavefolderParam1+0x8c>)
{
    391c:	4605      	mov	r5, r0
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    391e:	ee67 7aa6 	vmul.f32	s15, s15, s13
    3922:	edd3 0a00 	vldr	s1, [r3]
    3926:	eed7 0a27 	vfnms.f32	s1, s14, s15
    392a:	f005 ffb9 	bl	98a0 <LEAF_clip>
    uint32_t inDBIndex = (uint32_t) floatIndex;
    392e:	eebc 7ac0 	vcvt.u32.f32	s14, s0
	param1[v][string] = dbToATableLookup(value * 12.0f);
    3932:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    3936:	4a16      	ldr	r2, [pc, #88]	; (3990 <wavefolderParam1+0x90>)
	param1[v][string] = dbToATableLookup(value * 12.0f);
    3938:	4916      	ldr	r1, [pc, #88]	; (3994 <wavefolderParam1+0x94>)
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    393a:	f643 74ff 	movw	r4, #16383	; 0x3fff
    uint32_t inDBIndex = (uint32_t) floatIndex;
    393e:	ee17 3a10 	vmov	r3, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    3942:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	param1[v][string] = dbToATableLookup(value * 12.0f);
    3946:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    float alpha = floatIndex - (float)inDBIndex;
    394a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    394e:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    uint32_t inDBIndexPlusOne = inDBIndex + 1;
    3952:	3301      	adds	r3, #1
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    3954:	ee77 7ac0 	vsub.f32	s15, s15, s0
    3958:	42a3      	cmp	r3, r4
    float alpha = floatIndex - (float)inDBIndex;
    395a:	ee30 0a47 	vsub.f32	s0, s0, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    395e:	edd0 6a00 	vldr	s13, [r0]
    3962:	bf28      	it	cs
    3964:	4623      	movcs	r3, r4
    3966:	ee77 7a87 	vadd.f32	s15, s15, s14
    396a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    396e:	ed92 7a00 	vldr	s14, [r2]
    3972:	ee20 0a07 	vmul.f32	s0, s0, s14
    3976:	eea6 0aa7 	vfma.f32	s0, s13, s15
	param1[v][string] = dbToATableLookup(value * 12.0f);
    397a:	ed81 0a00 	vstr	s0, [r1]
}
    397e:	bd38      	pop	{r3, r4, r5, pc}
    3980:	20000e74 	.word	0x20000e74
    3984:	467ffc00 	.word	0x467ffc00
    3988:	00000000 	.word	0x00000000
    398c:	20000e70 	.word	0x20000e70
    3990:	30002000 	.word	0x30002000
    3994:	2000575c 	.word	0x2000575c
    3998:	f3af 8000 	nop.w
    399c:	f3af 8000 	nop.w

000039a0 <wavefolderParam3>:
	invCurFB[v][string] = (1.0f / (1.0f + value));
    39a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    39a4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    39a8:	4b07      	ldr	r3, [pc, #28]	; (39c8 <wavefolderParam3+0x28>)
	param3[v][string] = value;
    39aa:	4a08      	ldr	r2, [pc, #32]	; (39cc <wavefolderParam3+0x2c>)
	invCurFB[v][string] = (1.0f / (1.0f + value));
    39ac:	ee70 6a27 	vadd.f32	s13, s0, s15
    39b0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	param3[v][string] = value;
    39b4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	invCurFB[v][string] = (1.0f / (1.0f + value));
    39b8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	param3[v][string] = value;
    39bc:	ed82 0a00 	vstr	s0, [r2]
	invCurFB[v][string] = (1.0f / (1.0f + value));
    39c0:	ed83 7a00 	vstr	s14, [r3]
}
    39c4:	4770      	bx	lr
    39c6:	bf00      	nop
    39c8:	2000537c 	.word	0x2000537c
    39cc:	2000579c 	.word	0x2000579c
    39d0:	f3af 8000 	nop.w
    39d4:	f3af 8000 	nop.w
    39d8:	f3af 8000 	nop.w
    39dc:	f3af 8000 	nop.w

000039e0 <tiltParam1>:
{
    39e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	tVZFilterLS_setGain(&shelf1[v][string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    39e4:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    39e8:	4e3b      	ldr	r6, [pc, #236]	; (3ad8 <tiltParam1+0xf8>)
    39ea:	4f3c      	ldr	r7, [pc, #240]	; (3adc <tiltParam1+0xfc>)
    39ec:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    39f0:	ed96 7a00 	vldr	s14, [r6]
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    39f4:	f643 78ff 	movw	r8, #16383	; 0x3fff
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    39f8:	edd7 0a00 	vldr	s1, [r7]
    39fc:	0085      	lsls	r5, r0, #2
    39fe:	ed9f 1a38 	vldr	s2, [pc, #224]	; 3ae0 <tiltParam1+0x100>
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    3a02:	4c38      	ldr	r4, [pc, #224]	; (3ae4 <tiltParam1+0x104>)
{
    3a04:	ed2d 8b04 	vpush	{d8-d9}
	tVZFilterLS_setGain(&shelf1[v][string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    3a08:	eeb3 9a0e 	vmov.f32	s18, #62	; 0x41f00000  30.0
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    3a0c:	eddf 9a36 	vldr	s19, [pc, #216]	; 3ae8 <tiltParam1+0x108>
{
    3a10:	b082      	sub	sp, #8
    3a12:	eef0 8a40 	vmov.f32	s17, s0
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    3a16:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
	tVZFilterLS_setGain(&shelf1[v][string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    3a1a:	eee0 7a49 	vfms.f32	s15, s0, s18
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    3a1e:	ed8d 1a01 	vstr	s2, [sp, #4]
    3a22:	eeb0 0a69 	vmov.f32	s0, s19
    3a26:	eed7 0a87 	vfnms.f32	s1, s15, s14
    3a2a:	f005 ff39 	bl	98a0 <LEAF_clip>
    uint32_t inDBIndex = (uint32_t) floatIndex;
    3a2e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    3a32:	ee38 7a40 	vsub.f32	s14, s16, s0
	tVZFilterLS_setGain(&shelf1[v][string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    3a36:	482d      	ldr	r0, [pc, #180]	; (3aec <tiltParam1+0x10c>)
    uint32_t inDBIndex = (uint32_t) floatIndex;
    3a38:	ee17 3a90 	vmov	r3, s15
    float alpha = floatIndex - (float)inDBIndex;
    3a3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
	tVZFilterLS_setGain(&shelf1[v][string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    3a40:	4428      	add	r0, r5
    uint32_t inDBIndexPlusOne = inDBIndex + 1;
    3a42:	1c5a      	adds	r2, r3, #1
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    3a44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    float alpha = floatIndex - (float)inDBIndex;
    3a48:	ee70 7a66 	vsub.f32	s15, s0, s13
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    3a4c:	4542      	cmp	r2, r8
    3a4e:	ee37 7a26 	vadd.f32	s14, s14, s13
    3a52:	edd3 6a00 	vldr	s13, [r3]
    3a56:	bf28      	it	cs
    3a58:	4642      	movcs	r2, r8
    3a5a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    3a5e:	ed92 6a00 	vldr	s12, [r2]
    3a62:	ee27 0a86 	vmul.f32	s0, s15, s12
	tVZFilterLS_setGain(&shelf1[v][string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    3a66:	eea6 0a87 	vfma.f32	s0, s13, s14
    3a6a:	f007 fbe9 	bl	b240 <__tVZFilterLS_setGain_veneer>
	tVZFilterHS_setGain(&shelf2[v][string], dbToATableLookup((value * 30.0f) - 15.0f));
    3a6e:	eefa 7a0e 	vmov.f32	s15, #174	; 0xc1700000 -15.0
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    3a72:	ed96 7a00 	vldr	s14, [r6]
    3a76:	eeb0 0a69 	vmov.f32	s0, s19
    3a7a:	edd7 0a00 	vldr	s1, [r7]
	tVZFilterHS_setGain(&shelf2[v][string], dbToATableLookup((value * 30.0f) - 15.0f));
    3a7e:	eee8 7a89 	vfma.f32	s15, s17, s18
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    3a82:	ed9d 1a01 	vldr	s2, [sp, #4]
    3a86:	eed7 0a87 	vfnms.f32	s1, s15, s14
    3a8a:	f005 ff09 	bl	98a0 <LEAF_clip>
    uint32_t inDBIndex = (uint32_t) floatIndex;
    3a8e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    3a92:	ee38 8a40 	vsub.f32	s16, s16, s0
	tVZFilterHS_setGain(&shelf2[v][string], dbToATableLookup((value * 30.0f) - 15.0f));
    3a96:	4816      	ldr	r0, [pc, #88]	; (3af0 <tiltParam1+0x110>)
    uint32_t inDBIndex = (uint32_t) floatIndex;
    3a98:	ee17 3a90 	vmov	r3, s15
    float alpha = floatIndex - (float)inDBIndex;
    3a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
	tVZFilterHS_setGain(&shelf2[v][string], dbToATableLookup((value * 30.0f) - 15.0f));
    3aa0:	4428      	add	r0, r5
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    3aa2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
    uint32_t inDBIndexPlusOne = inDBIndex + 1;
    3aa6:	3301      	adds	r3, #1
    float alpha = floatIndex - (float)inDBIndex;
    3aa8:	ee30 0a67 	vsub.f32	s0, s0, s15
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    3aac:	4543      	cmp	r3, r8
    3aae:	ee38 8a27 	vadd.f32	s16, s16, s15
    3ab2:	ed92 7a00 	vldr	s14, [r2]
    3ab6:	bf28      	it	cs
    3ab8:	4643      	movcs	r3, r8
    3aba:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    3abe:	edd4 7a00 	vldr	s15, [r4]
    3ac2:	ee20 0a27 	vmul.f32	s0, s0, s15
	tVZFilterHS_setGain(&shelf2[v][string], dbToATableLookup((value * 30.0f) - 15.0f));
    3ac6:	eea7 0a08 	vfma.f32	s0, s14, s16
}
    3aca:	b002      	add	sp, #8
    3acc:	ecbd 8b04 	vpop	{d8-d9}
    3ad0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	tVZFilterHS_setGain(&shelf2[v][string], dbToATableLookup((value * 30.0f) - 15.0f));
    3ad4:	f007 ba88 	b.w	afe8 <__tVZFilterHS_setGain_veneer>
    3ad8:	20000e74 	.word	0x20000e74
    3adc:	20000e70 	.word	0x20000e70
    3ae0:	467ffc00 	.word	0x467ffc00
    3ae4:	30002000 	.word	0x30002000
    3ae8:	00000000 	.word	0x00000000
    3aec:	20005d48 	.word	0x20005d48
    3af0:	20005d68 	.word	0x20005d68
    3af4:	f3af 8000 	nop.w
    3af8:	f3af 8000 	nop.w
    3afc:	f3af 8000 	nop.w

00003b00 <tiltParam2>:
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    3b00:	eef3 0a0a 	vmov.f32	s1, #58	; 0x41d00000  26.0
    3b04:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 3b38 <tiltParam2+0x38>
    3b08:	eddf 7a0c 	vldr	s15, [pc, #48]	; 3b3c <tiltParam2+0x3c>
    3b0c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 3b40 <tiltParam2+0x40>
    3b10:	eee0 0a07 	vfma.f32	s1, s0, s14
    3b14:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 3b44 <tiltParam2+0x44>
{
    3b18:	b538      	push	{r3, r4, r5, lr}
    3b1a:	4605      	mov	r5, r0
    3b1c:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    3b1e:	ee60 0aa7 	vmul.f32	s1, s1, s15
    3b22:	f005 febd 	bl	98a0 <LEAF_clip>
	tVZFilterBell_setFreq(&bell1[v][string], value);
    3b26:	4b08      	ldr	r3, [pc, #32]	; (3b48 <tiltParam2+0x48>)
    3b28:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    3b2c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    3b30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterBell_setFreq(&bell1[v][string], value);
    3b34:	f007 ba48 	b.w	afc8 <__tVZFilterBell_setFreq_veneer>
    3b38:	429a0000 	.word	0x429a0000
    3b3c:	420fb824 	.word	0x420fb824
    3b40:	457ff000 	.word	0x457ff000
    3b44:	00000000 	.word	0x00000000
    3b48:	20000ad0 	.word	0x20000ad0
    3b4c:	f3af 8000 	nop.w
    3b50:	f3af 8000 	nop.w
    3b54:	f3af 8000 	nop.w
    3b58:	f3af 8000 	nop.w
    3b5c:	f3af 8000 	nop.w

00003b60 <tiltParam3>:
	tVZFilterBell_setBandwidth(&bell1[v][string], (value +1.0f)*6.0f);//TODO: make this match plugin
    3b60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    3b64:	4b06      	ldr	r3, [pc, #24]	; (3b80 <tiltParam3+0x20>)
    3b66:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
    3b6a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3b6e:	ee30 0a07 	vadd.f32	s0, s0, s14
    3b72:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3b76:	ee20 0a27 	vmul.f32	s0, s0, s15
    3b7a:	f007 b9b9 	b.w	aef0 <__tVZFilterBell_setBandwidth_veneer>
    3b7e:	bf00      	nop
    3b80:	20000ad0 	.word	0x20000ad0
    3b84:	f3af 8000 	nop.w
    3b88:	f3af 8000 	nop.w
    3b8c:	f3af 8000 	nop.w
    3b90:	f3af 8000 	nop.w
    3b94:	f3af 8000 	nop.w
    3b98:	f3af 8000 	nop.w
    3b9c:	f3af 8000 	nop.w

00003ba0 <tiltParam4>:
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    3ba0:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
    3ba4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 3c24 <tiltParam4+0x84>
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    3ba8:	4a1f      	ldr	r2, [pc, #124]	; (3c28 <tiltParam4+0x88>)
    3baa:	ed9f 1a20 	vldr	s2, [pc, #128]	; 3c2c <tiltParam4+0x8c>
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    3bae:	eee0 7a07 	vfma.f32	s15, s0, s14
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    3bb2:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 3c30 <tiltParam4+0x90>
{
    3bb6:	b538      	push	{r3, r4, r5, lr}
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    3bb8:	4b1e      	ldr	r3, [pc, #120]	; (3c34 <tiltParam4+0x94>)
{
    3bba:	460c      	mov	r4, r1
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    3bbc:	ed92 7a00 	vldr	s14, [r2]
{
    3bc0:	4605      	mov	r5, r0
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    3bc2:	edd3 0a00 	vldr	s1, [r3]
    3bc6:	eed7 0a87 	vfnms.f32	s1, s15, s14
    3bca:	f005 fe69 	bl	98a0 <LEAF_clip>
    uint32_t inDBIndex = (uint32_t) floatIndex;
    3bce:	eebc 7ac0 	vcvt.u32.f32	s14, s0
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    3bd2:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    3bd6:	4a18      	ldr	r2, [pc, #96]	; (3c38 <tiltParam4+0x98>)
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    3bd8:	4c18      	ldr	r4, [pc, #96]	; (3c3c <tiltParam4+0x9c>)
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    3bda:	f643 71ff 	movw	r1, #16383	; 0x3fff
    uint32_t inDBIndex = (uint32_t) floatIndex;
    3bde:	ee17 3a10 	vmov	r3, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    3be2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    3be6:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    float alpha = floatIndex - (float)inDBIndex;
    3bea:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    3bee:	eb02 0483 	add.w	r4, r2, r3, lsl #2
    uint32_t inDBIndexPlusOne = inDBIndex + 1;
    3bf2:	3301      	adds	r3, #1
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    3bf4:	ee77 7ac0 	vsub.f32	s15, s15, s0
    3bf8:	428b      	cmp	r3, r1
    float alpha = floatIndex - (float)inDBIndex;
    3bfa:	ee30 0a47 	vsub.f32	s0, s0, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    3bfe:	edd4 6a00 	vldr	s13, [r4]
    3c02:	bf28      	it	cs
    3c04:	460b      	movcs	r3, r1
    3c06:	ee77 7a87 	vadd.f32	s15, s15, s14
    3c0a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    3c0e:	ed92 7a00 	vldr	s14, [r2]
    3c12:	ee20 0a07 	vmul.f32	s0, s0, s14
}
    3c16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    3c1a:	eea6 0aa7 	vfma.f32	s0, s13, s15
    3c1e:	f007 ba4f 	b.w	b0c0 <__tVZFilterBell_setGain_veneer>
    3c22:	bf00      	nop
    3c24:	42080000 	.word	0x42080000
    3c28:	20000e74 	.word	0x20000e74
    3c2c:	467ffc00 	.word	0x467ffc00
    3c30:	00000000 	.word	0x00000000
    3c34:	20000e70 	.word	0x20000e70
    3c38:	30002000 	.word	0x30002000
    3c3c:	20000ad0 	.word	0x20000ad0

00003c40 <compressorParam1>:
	comp[v][string]->T = value*-24.0f;
    3c40:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
    3c44:	4b04      	ldr	r3, [pc, #16]	; (3c58 <compressorParam1+0x18>)
    3c46:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3c4a:	ee20 0a27 	vmul.f32	s0, s0, s15
    3c4e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    3c52:	ed83 0a03 	vstr	s0, [r3, #12]
}
    3c56:	4770      	bx	lr
    3c58:	20000af0 	.word	0x20000af0
    3c5c:	f3af 8000 	nop.w

00003c60 <compressorParam2>:
	comp[v][string]->R = ((value*10.0f)+1.0f);
    3c60:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    3c64:	4b0a      	ldr	r3, [pc, #40]	; (3c90 <compressorParam2+0x30>)
    3c66:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
    3c6a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    3c6e:	eeb0 7a67 	vmov.f32	s14, s15
    3c72:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    3c76:	eea0 7a26 	vfma.f32	s14, s0, s13
    3c7a:	ed82 7a04 	vstr	s14, [r2, #16]
	comp[v][string]->invR  = 1.0f / comp[v][string]->R;
    3c7e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    3c82:	edd3 6a04 	vldr	s13, [r3, #16]
    3c86:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    3c8a:	ed83 7a07 	vstr	s14, [r3, #28]
}
    3c8e:	4770      	bx	lr
    3c90:	20000af0 	.word	0x20000af0
    3c94:	f3af 8000 	nop.w
    3c98:	f3af 8000 	nop.w
    3c9c:	f3af 8000 	nop.w

00003ca0 <compressorParam3>:
	comp[v][string]->M = value * 18.0f;
    3ca0:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
    3ca4:	4b04      	ldr	r3, [pc, #16]	; (3cb8 <compressorParam3+0x18>)
    3ca6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3caa:	ee20 0a27 	vmul.f32	s0, s0, s15
    3cae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    3cb2:	ed83 0a06 	vstr	s0, [r3, #24]
}
    3cb6:	4770      	bx	lr
    3cb8:	20000af0 	.word	0x20000af0
    3cbc:	f3af 8000 	nop.w

00003cc0 <compressorParam4>:
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    3cc0:	4b0b      	ldr	r3, [pc, #44]	; (3cf0 <compressorParam4+0x30>)
    3cc2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value +  0.001f);
    3cc6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 3cf4 <compressorParam4+0x34>
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    3cca:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
    3cce:	b510      	push	{r4, lr}
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    3cd0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value +  0.001f);
    3cd4:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    3cd8:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    3cdc:	ee20 0a07 	vmul.f32	s0, s0, s14
    3ce0:	ee87 0a80 	vdiv.f32	s0, s15, s0
    3ce4:	f007 fac0 	bl	b268 <__fasterexpf_veneer>
    3ce8:	ed84 0a01 	vstr	s0, [r4, #4]
}
    3cec:	bd10      	pop	{r4, pc}
    3cee:	bf00      	nop
    3cf0:	20000af0 	.word	0x20000af0
    3cf4:	3a83126f 	.word	0x3a83126f
    3cf8:	f3af 8000 	nop.w
    3cfc:	f3af 8000 	nop.w

00003d00 <compressorParam5>:
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    3d00:	4b0b      	ldr	r3, [pc, #44]	; (3d30 <compressorParam5+0x30>)
    3d02:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value + 0.001f);
    3d06:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 3d34 <compressorParam5+0x34>
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    3d0a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
    3d0e:	b510      	push	{r4, lr}
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    3d10:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value + 0.001f);
    3d14:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    3d18:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    3d1c:	ee20 0a07 	vmul.f32	s0, s0, s14
    3d20:	ee87 0a80 	vdiv.f32	s0, s15, s0
    3d24:	f007 faa0 	bl	b268 <__fasterexpf_veneer>
    3d28:	ed84 0a02 	vstr	s0, [r4, #8]
}
    3d2c:	bd10      	pop	{r4, pc}
    3d2e:	bf00      	nop
    3d30:	20000af0 	.word	0x20000af0
    3d34:	3a83126f 	.word	0x3a83126f
    3d38:	f3af 8000 	nop.w
    3d3c:	f3af 8000 	nop.w

00003d40 <offsetParam2>:
	param2[v][string] = (value * 2.0f) - 1.0f;
    3d40:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    3d44:	4b05      	ldr	r3, [pc, #20]	; (3d5c <offsetParam2+0x1c>)
    3d46:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    3d4a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3d4e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    3d52:	eee0 7a07 	vfma.f32	s15, s0, s14
    3d56:	edc3 7a00 	vstr	s15, [r3]
}
    3d5a:	4770      	bx	lr
    3d5c:	2000577c 	.word	0x2000577c

00003d60 <param2Linear>:
	param2[v][string] = value;
    3d60:	4b03      	ldr	r3, [pc, #12]	; (3d70 <param2Linear+0x10>)
    3d62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3d66:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    3d6a:	ed83 0a00 	vstr	s0, [r3]
}
    3d6e:	4770      	bx	lr
    3d70:	2000577c 	.word	0x2000577c
    3d74:	f3af 8000 	nop.w
    3d78:	f3af 8000 	nop.w
    3d7c:	f3af 8000 	nop.w

00003d80 <param3Linear>:
	param3[v][string] = value;
    3d80:	4b03      	ldr	r3, [pc, #12]	; (3d90 <param3Linear+0x10>)
    3d82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3d86:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    3d8a:	ed83 0a00 	vstr	s0, [r3]
}
    3d8e:	4770      	bx	lr
    3d90:	2000579c 	.word	0x2000579c
    3d94:	f3af 8000 	nop.w
    3d98:	f3af 8000 	nop.w
    3d9c:	f3af 8000 	nop.w

00003da0 <param3Soft>:
	param3[v][string] = (value * .99f) + 0.01f;
    3da0:	eddf 6a10 	vldr	s13, [pc, #64]	; 3de4 <param3Soft+0x44>
    3da4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    3da8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 3de8 <param3Soft+0x48>
    3dac:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    3db0:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 3dec <param3Soft+0x4c>
    3db4:	eee0 7a26 	vfma.f32	s15, s0, s13
    3db8:	4a0d      	ldr	r2, [pc, #52]	; (3df0 <param3Soft+0x50>)
    3dba:	eef0 6a47 	vmov.f32	s13, s14
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    3dbe:	4b0d      	ldr	r3, [pc, #52]	; (3df4 <param3Soft+0x54>)
	param3[v][string] = (value * .99f) + 0.01f;
    3dc0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    3dc4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3dc8:	ee67 5ae7 	vnmul.f32	s11, s15, s15
	param3[v][string] = (value * .99f) + 0.01f;
    3dcc:	edc2 7a00 	vstr	s15, [r2]
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    3dd0:	eee5 6a86 	vfma.f32	s13, s11, s12
    3dd4:	ee67 7aa6 	vmul.f32	s15, s15, s13
    3dd8:	eec7 6a27 	vdiv.f32	s13, s14, s15
    3ddc:	edc3 6a00 	vstr	s13, [r3]
}
    3de0:	4770      	bx	lr
    3de2:	bf00      	nop
    3de4:	3f7d70a4 	.word	0x3f7d70a4
    3de8:	3c23d70a 	.word	0x3c23d70a
    3dec:	3eaaaaaa 	.word	0x3eaaaaaa
    3df0:	2000579c 	.word	0x2000579c
    3df4:	20005d1c 	.word	0x20005d1c
    3df8:	f3af 8000 	nop.w
    3dfc:	f3af 8000 	nop.w

00003e00 <param3Hard>:
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    3e00:	eddf 6a17 	vldr	s13, [pc, #92]	; 3e60 <param3Hard+0x60>
    3e04:	eddf 7a17 	vldr	s15, [pc, #92]	; 3e64 <param3Hard+0x64>
    3e08:	ed9f 7a17 	vldr	s14, [pc, #92]	; 3e68 <param3Hard+0x68>
    3e0c:	eee0 7a26 	vfma.f32	s15, s0, s13
{
    3e10:	b538      	push	{r3, r4, r5, lr}
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    3e12:	4b16      	ldr	r3, [pc, #88]	; (3e6c <param3Hard+0x6c>)
    3e14:	0045      	lsls	r5, r0, #1
    3e16:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
    3e1a:	460c      	mov	r4, r1
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    3e1c:	ee27 0a87 	vmul.f32	s0, s15, s14
    3e20:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    3e24:	ed83 0a00 	vstr	s0, [r3]
	float tempDiv = arm_sin_f32(param3[v][string]);
    3e28:	f007 f9a6 	bl	b178 <__arm_sin_f32_veneer>
	if (tempDiv == 0.0f)
    3e2c:	eeb5 0a40 	vcmp.f32	s0, #0.0
    3e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3e34:	d00a      	beq.n	3e4c <param3Hard+0x4c>
	shapeDividerH[v][string] = 1.0f/tempDiv;
    3e36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    3e3a:	4b0d      	ldr	r3, [pc, #52]	; (3e70 <param3Hard+0x70>)
    3e3c:	4425      	add	r5, r4
    3e3e:	eec7 7a00 	vdiv.f32	s15, s14, s0
    3e42:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    3e46:	edc3 7a00 	vstr	s15, [r3]
}
    3e4a:	bd38      	pop	{r3, r4, r5, pc}
	shapeDividerH[v][string] = 1.0f/tempDiv;
    3e4c:	4b08      	ldr	r3, [pc, #32]	; (3e70 <param3Hard+0x70>)
    3e4e:	4425      	add	r5, r4
    3e50:	eddf 7a08 	vldr	s15, [pc, #32]	; 3e74 <param3Hard+0x74>
    3e54:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    3e58:	edc3 7a00 	vstr	s15, [r3]
}
    3e5c:	bd38      	pop	{r3, r4, r5, pc}
    3e5e:	bf00      	nop
    3e60:	3f7d70a4 	.word	0x3f7d70a4
    3e64:	3c23d70a 	.word	0x3c23d70a
    3e68:	3fc90fdb 	.word	0x3fc90fdb
    3e6c:	2000579c 	.word	0x2000579c
    3e70:	20005cfc 	.word	0x20005cfc
    3e74:	4479ffff 	.word	0x4479ffff
    3e78:	f3af 8000 	nop.w
    3e7c:	f3af 8000 	nop.w

00003e80 <param3Poly>:
	param3[v][string] = ((value * .99f) + 0.01f)* HALF_PI;
    3e80:	eddf 6a17 	vldr	s13, [pc, #92]	; 3ee0 <param3Poly+0x60>
    3e84:	eddf 7a17 	vldr	s15, [pc, #92]	; 3ee4 <param3Poly+0x64>
    3e88:	ed9f 7a17 	vldr	s14, [pc, #92]	; 3ee8 <param3Poly+0x68>
    3e8c:	eee0 7a26 	vfma.f32	s15, s0, s13
{
    3e90:	b538      	push	{r3, r4, r5, lr}
	param3[v][string] = ((value * .99f) + 0.01f)* HALF_PI;
    3e92:	4b16      	ldr	r3, [pc, #88]	; (3eec <param3Poly+0x6c>)
    3e94:	0045      	lsls	r5, r0, #1
    3e96:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
    3e9a:	460c      	mov	r4, r1
	param3[v][string] = ((value * .99f) + 0.01f)* HALF_PI;
    3e9c:	ee27 0a87 	vmul.f32	s0, s15, s14
    3ea0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    3ea4:	ed83 0a00 	vstr	s0, [r3]
    float tempDiv = fastSine(param3[v][string]);
    3ea8:	f007 f942 	bl	b130 <__fastSine_veneer>
    if (tempDiv == 0.0f)
    3eac:	eeb5 0a40 	vcmp.f32	s0, #0.0
    3eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3eb4:	d00a      	beq.n	3ecc <param3Poly+0x4c>
    polyDivider[v][string] = 1.0f/tempDiv;
    3eb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    3eba:	4b0d      	ldr	r3, [pc, #52]	; (3ef0 <param3Poly+0x70>)
    3ebc:	4425      	add	r5, r4
    3ebe:	eec7 7a00 	vdiv.f32	s15, s14, s0
    3ec2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    3ec6:	edc3 7a00 	vstr	s15, [r3]
}
    3eca:	bd38      	pop	{r3, r4, r5, pc}
    polyDivider[v][string] = 1.0f/tempDiv;
    3ecc:	4b08      	ldr	r3, [pc, #32]	; (3ef0 <param3Poly+0x70>)
    3ece:	4425      	add	r5, r4
    3ed0:	eddf 7a08 	vldr	s15, [pc, #32]	; 3ef4 <param3Poly+0x74>
    3ed4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    3ed8:	edc3 7a00 	vstr	s15, [r3]
}
    3edc:	bd38      	pop	{r3, r4, r5, pc}
    3ede:	bf00      	nop
    3ee0:	3f7d70a4 	.word	0x3f7d70a4
    3ee4:	3c23d70a 	.word	0x3c23d70a
    3ee8:	3fc90fdb 	.word	0x3fc90fdb
    3eec:	2000579c 	.word	0x2000579c
    3ef0:	20005864 	.word	0x20005864
    3ef4:	4479ffff 	.word	0x4479ffff
    3ef8:	f3af 8000 	nop.w
    3efc:	f3af 8000 	nop.w

00003f00 <param4Linear>:
	param4[v][string] = value;
    3f00:	4b03      	ldr	r3, [pc, #12]	; (3f10 <param4Linear+0x10>)
    3f02:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3f06:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    3f0a:	ed83 0a00 	vstr	s0, [r3]
}
    3f0e:	4770      	bx	lr
    3f10:	200057bc 	.word	0x200057bc
    3f14:	f3af 8000 	nop.w
    3f18:	f3af 8000 	nop.w
    3f1c:	f3af 8000 	nop.w

00003f20 <param5Linear>:
	param5[v][string] = value;
    3f20:	4b03      	ldr	r3, [pc, #12]	; (3f30 <param5Linear+0x10>)
    3f22:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3f26:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    3f2a:	ed83 0a00 	vstr	s0, [r3]
}
    3f2e:	4770      	bx	lr
    3f30:	200057dc 	.word	0x200057dc
    3f34:	f3af 8000 	nop.w
    3f38:	f3af 8000 	nop.w
    3f3c:	f3af 8000 	nop.w

00003f40 <param2BC>:
	tCrusher_setQuality (&bc[v][string],value);
    3f40:	4b03      	ldr	r3, [pc, #12]	; (3f50 <param2BC+0x10>)
    3f42:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3f46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3f4a:	f007 b875 	b.w	b038 <__tCrusher_setQuality_veneer>
    3f4e:	bf00      	nop
    3f50:	20000ab0 	.word	0x20000ab0
    3f54:	f3af 8000 	nop.w
    3f58:	f3af 8000 	nop.w
    3f5c:	f3af 8000 	nop.w

00003f60 <param3BC>:
	value = (value * inv_oversample) + 0.01f;
    3f60:	4a07      	ldr	r2, [pc, #28]	; (3f80 <param3BC+0x20>)
	tCrusher_setSamplingRatio (&bc[v][string], value);
    3f62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * inv_oversample) + 0.01f;
    3f66:	eddf 7a07 	vldr	s15, [pc, #28]	; 3f84 <param3BC+0x24>
    3f6a:	ed92 7a00 	vldr	s14, [r2]
	tCrusher_setSamplingRatio (&bc[v][string], value);
    3f6e:	4b06      	ldr	r3, [pc, #24]	; (3f88 <param3BC+0x28>)
    3f70:	eee7 7a00 	vfma.f32	s15, s14, s0
    3f74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3f78:	eeb0 0a67 	vmov.f32	s0, s15
    3f7c:	f007 b994 	b.w	b2a8 <__tCrusher_setSamplingRatio_veneer>
    3f80:	20000008 	.word	0x20000008
    3f84:	3c23d70a 	.word	0x3c23d70a
    3f88:	20000ab0 	.word	0x20000ab0
    3f8c:	f3af 8000 	nop.w
    3f90:	f3af 8000 	nop.w
    3f94:	f3af 8000 	nop.w
    3f98:	f3af 8000 	nop.w
    3f9c:	f3af 8000 	nop.w

00003fa0 <param4BC>:
	tCrusher_setRound(&bc[v][string], value);
    3fa0:	4b03      	ldr	r3, [pc, #12]	; (3fb0 <param4BC+0x10>)
    3fa2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3fa6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3faa:	f007 b871 	b.w	b090 <__tCrusher_setRound_veneer>
    3fae:	bf00      	nop
    3fb0:	20000ab0 	.word	0x20000ab0
    3fb4:	f3af 8000 	nop.w
    3fb8:	f3af 8000 	nop.w
    3fbc:	f3af 8000 	nop.w

00003fc0 <param5BC>:
	tCrusher_setOperation(&bc[v][string], value);
    3fc0:	4b03      	ldr	r3, [pc, #12]	; (3fd0 <param5BC+0x10>)
    3fc2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3fc6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3fca:	f006 bf9d 	b.w	af08 <__tCrusher_setOperation_veneer>
    3fce:	bf00      	nop
    3fd0:	20000ab0 	.word	0x20000ab0
    3fd4:	f3af 8000 	nop.w
    3fd8:	f3af 8000 	nop.w
    3fdc:	f3af 8000 	nop.w

00003fe0 <fxMixSet>:
	fxMix[v][string] = value;
    3fe0:	4b03      	ldr	r3, [pc, #12]	; (3ff0 <fxMixSet+0x10>)
    3fe2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3fe6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    3fea:	ed83 0a00 	vstr	s0, [r3]
}
    3fee:	4770      	bx	lr
    3ff0:	2000527c 	.word	0x2000527c
    3ff4:	f3af 8000 	nop.w
    3ff8:	f3af 8000 	nop.w
    3ffc:	f3af 8000 	nop.w

00004000 <fxPostGainSet>:
	fxPostGain[v][string] = dbToATableLookup((value * 24.0f) - 12.0f);
    4000:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    4004:	4a1e      	ldr	r2, [pc, #120]	; (4080 <fxPostGainSet+0x80>)
	fxPostGain[v][string] = dbToATableLookup((value * 24.0f) - 12.0f);
    4006:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    400a:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 4084 <fxPostGainSet+0x84>
{
    400e:	b538      	push	{r3, r4, r5, lr}
	fxPostGain[v][string] = dbToATableLookup((value * 24.0f) - 12.0f);
    4010:	eee0 7a07 	vfma.f32	s15, s0, s14
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    4014:	4b1c      	ldr	r3, [pc, #112]	; (4088 <fxPostGainSet+0x88>)
    4016:	ed92 7a00 	vldr	s14, [r2]
{
    401a:	460c      	mov	r4, r1
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    401c:	edd3 0a00 	vldr	s1, [r3]
{
    4020:	4605      	mov	r5, r0
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    4022:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 408c <fxPostGainSet+0x8c>
    4026:	eed7 0a87 	vfnms.f32	s1, s15, s14
    402a:	f005 fc39 	bl	98a0 <LEAF_clip>
    uint32_t inDBIndex = (uint32_t) floatIndex;
    402e:	eebc 7ac0 	vcvt.u32.f32	s14, s0
	fxPostGain[v][string] = dbToATableLookup((value * 24.0f) - 12.0f);
    4032:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    4036:	4a16      	ldr	r2, [pc, #88]	; (4090 <fxPostGainSet+0x90>)
	fxPostGain[v][string] = dbToATableLookup((value * 24.0f) - 12.0f);
    4038:	4916      	ldr	r1, [pc, #88]	; (4094 <fxPostGainSet+0x94>)
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    403a:	f643 74ff 	movw	r4, #16383	; 0x3fff
    uint32_t inDBIndex = (uint32_t) floatIndex;
    403e:	ee17 3a10 	vmov	r3, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    4042:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	fxPostGain[v][string] = dbToATableLookup((value * 24.0f) - 12.0f);
    4046:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    float alpha = floatIndex - (float)inDBIndex;
    404a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    404e:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    uint32_t inDBIndexPlusOne = inDBIndex + 1;
    4052:	3301      	adds	r3, #1
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    4054:	ee77 7ac0 	vsub.f32	s15, s15, s0
    4058:	42a3      	cmp	r3, r4
    float alpha = floatIndex - (float)inDBIndex;
    405a:	ee30 0a47 	vsub.f32	s0, s0, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    405e:	edd0 6a00 	vldr	s13, [r0]
    4062:	bf28      	it	cs
    4064:	4623      	movcs	r3, r4
    4066:	ee77 7a87 	vadd.f32	s15, s15, s14
    406a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    406e:	ed92 7a00 	vldr	s14, [r2]
    4072:	ee20 0a07 	vmul.f32	s0, s0, s14
    4076:	eea6 0aa7 	vfma.f32	s0, s13, s15
	fxPostGain[v][string] = dbToATableLookup((value * 24.0f) - 12.0f);
    407a:	ed81 0a00 	vstr	s0, [r1]
}
    407e:	bd38      	pop	{r3, r4, r5, pc}
    4080:	20000e74 	.word	0x20000e74
    4084:	467ffc00 	.word	0x467ffc00
    4088:	20000e70 	.word	0x20000e70
    408c:	00000000 	.word	0x00000000
    4090:	30002000 	.word	0x30002000
    4094:	2000529c 	.word	0x2000529c
    4098:	f3af 8000 	nop.w
    409c:	f3af 8000 	nop.w

000040a0 <wavefolderTick>:
{
    40a0:	b538      	push	{r3, r4, r5, lr}
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    40a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    float fbSample = wfState[v][string];
    40a6:	4d36      	ldr	r5, [pc, #216]	; (4180 <wavefolderTick+0xe0>)
    40a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    40ac:	4b35      	ldr	r3, [pc, #212]	; (4184 <wavefolderTick+0xe4>)
    float fbSample = wfState[v][string];
    40ae:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    40b2:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    40b6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    40ba:	4a33      	ldr	r2, [pc, #204]	; (4188 <wavefolderTick+0xe8>)
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    40bc:	eddf 3a33 	vldr	s7, [pc, #204]	; 418c <wavefolderTick+0xec>
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    40c0:	0084      	lsls	r4, r0, #2
    40c2:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    float fb = curFB * fbSample;
    40c6:	ed9f 3a32 	vldr	s6, [pc, #200]	; 4190 <wavefolderTick+0xf0>
{
    40ca:	ed2d 8b02 	vpush	{d8}
    40ce:	ed95 6a00 	vldr	s12, [r5]
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    40d2:	edd3 7a00 	vldr	s15, [r3]
    40d6:	fe86 6a66 	vminnm.f32	s12, s12, s13
    40da:	fe86 6a24 	vmaxnm.f32	s12, s12, s9
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    40de:	ee26 7a06 	vmul.f32	s14, s12, s12
    float curFB = param3[v][string];
    40e2:	4b2c      	ldr	r3, [pc, #176]	; (4194 <wavefolderTick+0xf4>)
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    40e4:	ee30 0a27 	vadd.f32	s0, s0, s15
    40e8:	edd2 5a00 	vldr	s11, [r2]
    float curFB = param3[v][string];
    40ec:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    float curFF = param4[v][string];
    40f0:	4a29      	ldr	r2, [pc, #164]	; (4198 <wavefolderTick+0xf8>)
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    40f2:	ee67 7a23 	vmul.f32	s15, s14, s7
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    40f6:	ee20 7a25 	vmul.f32	s14, s0, s11
    float fb = curFB * fbSample;
    40fa:	ed93 4a00 	vldr	s8, [r3]
    float curFF = param4[v][string];
    40fe:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    4102:	4b26      	ldr	r3, [pc, #152]	; (419c <wavefolderTick+0xfc>)
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    4104:	ee76 7ae7 	vsub.f32	s15, s13, s15
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    4108:	ed9f 0a25 	vldr	s0, [pc, #148]	; 41a0 <wavefolderTick+0x100>
    410c:	fec7 5a66 	vminnm.f32	s11, s14, s13
    float fb = curFB * fbSample;
    4110:	ee24 4a03 	vmul.f32	s8, s8, s6
    4114:	fec5 5aa4 	vmaxnm.f32	s11, s11, s9
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    4118:	ee65 4aa5 	vmul.f32	s9, s11, s11
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    411c:	ee67 7a86 	vmul.f32	s15, s15, s12
    float curFF = param4[v][string];
    4120:	ed92 5a00 	vldr	s10, [r2]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    4124:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    4128:	ee27 0a00 	vmul.f32	s0, s14, s0
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);
    412c:	ee76 2ac5 	vsub.f32	s5, s13, s10
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    4130:	ee24 6aa3 	vmul.f32	s12, s9, s7
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    4134:	edd3 8a00 	vldr	s17, [r3]
    float fb = curFB * fbSample;
    4138:	ee67 7a84 	vmul.f32	s15, s15, s8
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    413c:	ee25 5a03 	vmul.f32	s10, s10, s6
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    4140:	ee76 6ac6 	vsub.f32	s13, s13, s12
    4144:	eee2 7a87 	vfma.f32	s15, s5, s14
    4148:	ee66 6aa5 	vmul.f32	s13, s13, s11
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    414c:	eee6 7a85 	vfma.f32	s15, s13, s10
    4150:	eeb0 8a67 	vmov.f32	s16, s15
    4154:	f007 f810 	bl	b178 <__arm_sin_f32_veneer>
    sample = wfState[v][string] * invCurFB[v][string];
    4158:	4b12      	ldr	r3, [pc, #72]	; (41a4 <wavefolderTick+0x104>)
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    415a:	4813      	ldr	r0, [pc, #76]	; (41a8 <wavefolderTick+0x108>)
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    415c:	eef0 7a48 	vmov.f32	s15, s16
    sample = wfState[v][string] * invCurFB[v][string];
    4160:	4423      	add	r3, r4
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    4162:	4420      	add	r0, r4
    sample = wfState[v][string] * invCurFB[v][string];
    4164:	ed93 7a00 	vldr	s14, [r3]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    4168:	eee8 7ac0 	vfms.f32	s15, s17, s0
    416c:	edc5 7a00 	vstr	s15, [r5]
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    4170:	ee27 0a87 	vmul.f32	s0, s15, s14
}
    4174:	ecbd 8b02 	vpop	{d8}
    4178:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    417c:	f007 b824 	b.w	b1c8 <__tHighpass_tick_veneer>
    4180:	20014a78 	.word	0x20014a78
    4184:	2000577c 	.word	0x2000577c
    4188:	2000575c 	.word	0x2000575c
    418c:	3eaaaaaa 	.word	0x3eaaaaaa
    4190:	3fbffff8 	.word	0x3fbffff8
    4194:	2000579c 	.word	0x2000579c
    4198:	200057bc 	.word	0x200057bc
    419c:	200057dc 	.word	0x200057dc
    41a0:	40c90fdb 	.word	0x40c90fdb
    41a4:	2000537c 	.word	0x2000537c
    41a8:	20000e78 	.word	0x20000e78
    41ac:	f3af 8000 	nop.w
    41b0:	f3af 8000 	nop.w
    41b4:	f3af 8000 	nop.w
    41b8:	f3af 8000 	nop.w
    41bc:	f3af 8000 	nop.w

000041c0 <chorusParam1>:
	param1[v][string] = value * 5780.0f + 10.0f;
    41c0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    41c4:	ed9f 7a05 	vldr	s14, [pc, #20]	; 41dc <chorusParam1+0x1c>
    41c8:	4b05      	ldr	r3, [pc, #20]	; (41e0 <chorusParam1+0x20>)
    41ca:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    41ce:	eee0 7a07 	vfma.f32	s15, s0, s14
    41d2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    41d6:	edc3 7a00 	vstr	s15, [r3]
}
    41da:	4770      	bx	lr
    41dc:	45b4a000 	.word	0x45b4a000
    41e0:	2000575c 	.word	0x2000575c
    41e4:	f3af 8000 	nop.w
    41e8:	f3af 8000 	nop.w
    41ec:	f3af 8000 	nop.w
    41f0:	f3af 8000 	nop.w
    41f4:	f3af 8000 	nop.w
    41f8:	f3af 8000 	nop.w
    41fc:	f3af 8000 	nop.w

00004200 <chorusParam2>:
	param2[v][string] = value * 0.1f;
    4200:	eddf 7a05 	vldr	s15, [pc, #20]	; 4218 <chorusParam2+0x18>
    4204:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    4208:	4b04      	ldr	r3, [pc, #16]	; (421c <chorusParam2+0x1c>)
    420a:	ee20 0a27 	vmul.f32	s0, s0, s15
    420e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    4212:	ed83 0a00 	vstr	s0, [r3]
}
    4216:	4770      	bx	lr
    4218:	3dcccccd 	.word	0x3dcccccd
    421c:	2000577c 	.word	0x2000577c

00004220 <chorusParam3>:
    tCycle_setFreq(&mod1[v][string], (value * 0.4f) + 0.01f);
    4220:	ed9f 7a07 	vldr	s14, [pc, #28]	; 4240 <chorusParam3+0x20>
    4224:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    4228:	eddf 7a06 	vldr	s15, [pc, #24]	; 4244 <chorusParam3+0x24>
    422c:	4b06      	ldr	r3, [pc, #24]	; (4248 <chorusParam3+0x28>)
    422e:	eee0 7a07 	vfma.f32	s15, s0, s14
    4232:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4236:	eeb0 0a67 	vmov.f32	s0, s15
    423a:	f006 bfed 	b.w	b218 <__tCycle_setFreq_veneer>
    423e:	bf00      	nop
    4240:	3ecccccd 	.word	0x3ecccccd
    4244:	3c23d70a 	.word	0x3c23d70a
    4248:	2000566c 	.word	0x2000566c
    424c:	f3af 8000 	nop.w
    4250:	f3af 8000 	nop.w
    4254:	f3af 8000 	nop.w
    4258:	f3af 8000 	nop.w
    425c:	f3af 8000 	nop.w

00004260 <chorusParam4>:
    tCycle_setFreq(&mod2[v][string], (value * 0.4444444f) + 0.011f);
    4260:	ed9f 7a07 	vldr	s14, [pc, #28]	; 4280 <chorusParam4+0x20>
    4264:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    4268:	eddf 7a06 	vldr	s15, [pc, #24]	; 4284 <chorusParam4+0x24>
    426c:	4b06      	ldr	r3, [pc, #24]	; (4288 <chorusParam4+0x28>)
    426e:	eee0 7a07 	vfma.f32	s15, s0, s14
    4272:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4276:	eeb0 0a67 	vmov.f32	s0, s15
    427a:	f006 bfcd 	b.w	b218 <__tCycle_setFreq_veneer>
    427e:	bf00      	nop
    4280:	3ee38e37 	.word	0x3ee38e37
    4284:	3c343958 	.word	0x3c343958
    4288:	2000568c 	.word	0x2000568c
    428c:	f3af 8000 	nop.w
    4290:	f3af 8000 	nop.w
    4294:	f3af 8000 	nop.w
    4298:	f3af 8000 	nop.w
    429c:	f3af 8000 	nop.w

000042a0 <delayParam1>:
    tTapeDelay_setDelay(&tapeDelay[v][string], value * 30000.0f + 1.0f);
    42a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    42a4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 42c0 <delayParam1+0x20>
    42a8:	4b06      	ldr	r3, [pc, #24]	; (42c4 <delayParam1+0x24>)
    42aa:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    42ae:	eee0 7a07 	vfma.f32	s15, s0, s14
    42b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    42b6:	eeb0 0a67 	vmov.f32	s0, s15
    42ba:	f006 be9d 	b.w	aff8 <__tTapeDelay_setDelay_veneer>
    42be:	bf00      	nop
    42c0:	46ea6000 	.word	0x46ea6000
    42c4:	200149bc 	.word	0x200149bc
    42c8:	f3af 8000 	nop.w
    42cc:	f3af 8000 	nop.w
    42d0:	f3af 8000 	nop.w
    42d4:	f3af 8000 	nop.w
    42d8:	f3af 8000 	nop.w
    42dc:	f3af 8000 	nop.w

000042e0 <delayParam2>:
	param2[v][string] = LEAF_clip(0.0f, value * 1.1f, 1.1f);
    42e0:	ed9f 1a09 	vldr	s2, [pc, #36]	; 4308 <delayParam2+0x28>
{
    42e4:	b538      	push	{r3, r4, r5, lr}
    42e6:	4605      	mov	r5, r0
    42e8:	460c      	mov	r4, r1
	param2[v][string] = LEAF_clip(0.0f, value * 1.1f, 1.1f);
    42ea:	ee60 0a01 	vmul.f32	s1, s0, s2
    42ee:	ed9f 0a07 	vldr	s0, [pc, #28]	; 430c <delayParam2+0x2c>
    42f2:	f005 fad5 	bl	98a0 <LEAF_clip>
    42f6:	4b06      	ldr	r3, [pc, #24]	; (4310 <delayParam2+0x30>)
    42f8:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    42fc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    4300:	ed83 0a00 	vstr	s0, [r3]
}
    4304:	bd38      	pop	{r3, r4, r5, pc}
    4306:	bf00      	nop
    4308:	3f8ccccd 	.word	0x3f8ccccd
    430c:	00000000 	.word	0x00000000
    4310:	2000577c 	.word	0x2000577c
    4314:	f3af 8000 	nop.w
    4318:	f3af 8000 	nop.w
    431c:	f3af 8000 	nop.w

00004320 <delayParam3>:
    tSVF_setFreqFast(&FXlowpass[v][string], (value * 127.0f));
    4320:	eddf 7a05 	vldr	s15, [pc, #20]	; 4338 <delayParam3+0x18>
    4324:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    4328:	4b04      	ldr	r3, [pc, #16]	; (433c <delayParam3+0x1c>)
    432a:	ee20 0a27 	vmul.f32	s0, s0, s15
    432e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4332:	f006 be19 	b.w	af68 <__tSVF_setFreqFast_veneer>
    4336:	bf00      	nop
    4338:	42fe0000 	.word	0x42fe0000
    433c:	200008dc 	.word	0x200008dc

00004340 <delayParam4>:
    tSVF_setFreqFast(&FXhighpass[v][string], (value * 127.0f));
    4340:	eddf 7a05 	vldr	s15, [pc, #20]	; 4358 <delayParam4+0x18>
    4344:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    4348:	4b04      	ldr	r3, [pc, #16]	; (435c <delayParam4+0x1c>)
    434a:	ee20 0a27 	vmul.f32	s0, s0, s15
    434e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4352:	f006 be09 	b.w	af68 <__tSVF_setFreqFast_veneer>
    4356:	bf00      	nop
    4358:	42fe0000 	.word	0x42fe0000
    435c:	200008bc 	.word	0x200008bc

00004360 <delayParam5>:
	param5[v][string] = (value * 1.5f) + 1.0f;
    4360:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
    4364:	4b05      	ldr	r3, [pc, #20]	; (437c <delayParam5+0x1c>)
    4366:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    436a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    436e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    4372:	eee0 7a07 	vfma.f32	s15, s0, s14
    4376:	edc3 7a00 	vstr	s15, [r3]
}
    437a:	4770      	bx	lr
    437c:	200057dc 	.word	0x200057dc

00004380 <chorusTick>:

float __ATTR_ITCMRAM chorusTick(float sample, int v, int string)
{
    4380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4382:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    4386:	4f2b      	ldr	r7, [pc, #172]	; (4434 <chorusTick+0xb4>)
    4388:	4d2b      	ldr	r5, [pc, #172]	; (4438 <chorusTick+0xb8>)
    438a:	482c      	ldr	r0, [pc, #176]	; (443c <chorusTick+0xbc>)
    438c:	eb07 0781 	add.w	r7, r7, r1, lsl #2
    4390:	eb05 0581 	add.w	r5, r5, r1, lsl #2
    4394:	4e2a      	ldr	r6, [pc, #168]	; (4440 <chorusTick+0xc0>)
    4396:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    439a:	008c      	lsls	r4, r1, #2
    439c:	eb06 0681 	add.w	r6, r6, r1, lsl #2
{
    43a0:	ed2d 8b04 	vpush	{d8-d9}
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    43a4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    43a8:	edd5 9a00 	vldr	s19, [r5]
{
    43ac:	eef0 8a40 	vmov.f32	s17, s0
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    43b0:	ed97 9a00 	vldr	s18, [r7]
    43b4:	f006 ff50 	bl	b258 <__tCycle_tick_veneer>
    43b8:	ed9f 7a22 	vldr	s14, [pc, #136]	; 4444 <chorusTick+0xc4>
    43bc:	eef0 7a48 	vmov.f32	s15, s16
    43c0:	4630      	mov	r0, r6
    43c2:	ee29 9a07 	vmul.f32	s18, s18, s14
    43c6:	eee9 7a80 	vfma.f32	s15, s19, s0
    43ca:	ee29 0a27 	vmul.f32	s0, s18, s15
    43ce:	f006 fea3 	bl	b118 <__tLinearDelay_setDelay_veneer>
    tLinearDelay_setDelay(&delay2[v][string], param1[v][string] * .5f * (1.0f - param2[v][string] * tCycle_tick(&mod2[v][string])));
    43d2:	481d      	ldr	r0, [pc, #116]	; (4448 <chorusTick+0xc8>)
    43d4:	edd5 9a00 	vldr	s19, [r5]
    43d8:	4420      	add	r0, r4
    43da:	ed97 9a00 	vldr	s18, [r7]
    43de:	f006 ff3b 	bl	b258 <__tCycle_tick_veneer>
    43e2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    43e6:	eea9 8ac0 	vfms.f32	s16, s19, s0
    43ea:	4d18      	ldr	r5, [pc, #96]	; (444c <chorusTick+0xcc>)
    43ec:	ee29 0a27 	vmul.f32	s0, s18, s15
    43f0:	4425      	add	r5, r4
    43f2:	4628      	mov	r0, r5
    43f4:	ee20 0a08 	vmul.f32	s0, s0, s16
    43f8:	f006 fe8e 	bl	b118 <__tLinearDelay_setDelay_veneer>
    float temp = tLinearDelay_tick(&delay1[v][string], sample) - sample;
    43fc:	eeb0 0a68 	vmov.f32	s0, s17
    4400:	4630      	mov	r0, r6
    4402:	f006 fef9 	bl	b1f8 <__tLinearDelay_tick_veneer>
    4406:	eeb0 8a40 	vmov.f32	s16, s0
    temp += tLinearDelay_tick(&delay2[v][string], sample) - sample;
    440a:	4628      	mov	r0, r5
    440c:	eeb0 0a68 	vmov.f32	s0, s17
    4410:	f006 fef2 	bl	b1f8 <__tLinearDelay_tick_veneer>
    4414:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
    4418:	ee38 0a00 	vadd.f32	s0, s16, s0
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    441c:	480c      	ldr	r0, [pc, #48]	; (4450 <chorusTick+0xd0>)
    441e:	4420      	add	r0, r4
    4420:	eea8 0ae7 	vfms.f32	s0, s17, s15
    4424:	f006 fed0 	bl	b1c8 <__tHighpass_tick_veneer>
	//float temp = 0.0f;
    return -temp;
}
    4428:	eeb1 0a40 	vneg.f32	s0, s0
    442c:	ecbd 8b04 	vpop	{d8-d9}
    4430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4432:	bf00      	nop
    4434:	2000575c 	.word	0x2000575c
    4438:	2000577c 	.word	0x2000577c
    443c:	2000566c 	.word	0x2000566c
    4440:	2000509c 	.word	0x2000509c
    4444:	3f34fdf4 	.word	0x3f34fdf4
    4448:	2000568c 	.word	0x2000568c
    444c:	200050bc 	.word	0x200050bc
    4450:	20000e78 	.word	0x20000e78
    4454:	f3af 8000 	nop.w
    4458:	f3af 8000 	nop.w
    445c:	f3af 8000 	nop.w

00004460 <shaperTick>:

float __ATTR_ITCMRAM shaperTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    4460:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    4464:	4a0e      	ldr	r2, [pc, #56]	; (44a0 <shaperTick+0x40>)
    sample = sample * param1[v][string];
    4466:	4b0f      	ldr	r3, [pc, #60]	; (44a4 <shaperTick+0x44>)
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    4468:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    sample = sample * param1[v][string];
    446c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
    4470:	b510      	push	{r4, lr}
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    4472:	edd2 7a00 	vldr	s15, [r2]
    4476:	008c      	lsls	r4, r1, #2
    4478:	ee30 0a27 	vadd.f32	s0, s0, s15
    447c:	edd3 7a00 	vldr	s15, [r3]
    4480:	4b09      	ldr	r3, [pc, #36]	; (44a8 <shaperTick+0x48>)
    4482:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    4486:	ee20 0a27 	vmul.f32	s0, s0, s15
    448a:	edd3 0a00 	vldr	s1, [r3]
    448e:	f006 fd77 	bl	af80 <__LEAF_shaper_veneer>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    4492:	4806      	ldr	r0, [pc, #24]	; (44ac <shaperTick+0x4c>)
    4494:	4420      	add	r0, r4
    return temp;
}
    4496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    449a:	f006 be95 	b.w	b1c8 <__tHighpass_tick_veneer>
    449e:	bf00      	nop
    44a0:	2000577c 	.word	0x2000577c
    44a4:	2000575c 	.word	0x2000575c
    44a8:	2000579c 	.word	0x2000579c
    44ac:	20000e78 	.word	0x20000e78
    44b0:	f3af 8000 	nop.w
    44b4:	f3af 8000 	nop.w
    44b8:	f3af 8000 	nop.w
    44bc:	f3af 8000 	nop.w

000044c0 <blankTick>:

float __ATTR_ITCMRAM blankTick(float sample, int v, int string)
{
    return sample;
}
    44c0:	4770      	bx	lr
    44c2:	bf00      	nop
    44c4:	f3af 8000 	nop.w
    44c8:	f3af 8000 	nop.w
    44cc:	f3af 8000 	nop.w
    44d0:	f3af 8000 	nop.w
    44d4:	f3af 8000 	nop.w
    44d8:	f3af 8000 	nop.w
    44dc:	f3af 8000 	nop.w

000044e0 <tiltFilterTick>:

float __ATTR_ITCMRAM tiltFilterTick(float sample, int v, int string)
{
    sample = tVZFilterLS_tick(&shelf1[v][string], sample);
    44e0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    44e4:	4b08      	ldr	r3, [pc, #32]	; (4508 <tiltFilterTick+0x28>)
{
    44e6:	b510      	push	{r4, lr}
    sample = tVZFilterLS_tick(&shelf1[v][string], sample);
    44e8:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    44ec:	008c      	lsls	r4, r1, #2
    44ee:	f006 fcf3 	bl	aed8 <__tVZFilterLS_tick_veneer>
    sample = tVZFilterHS_tick(&shelf2[v][string], sample);
    44f2:	4806      	ldr	r0, [pc, #24]	; (450c <tiltFilterTick+0x2c>)
    44f4:	4420      	add	r0, r4
    44f6:	f006 fe1f 	bl	b138 <__tVZFilterHS_tick_veneer>
    sample = tVZFilterBell_tick(&bell1[v][string], sample);
    44fa:	4805      	ldr	r0, [pc, #20]	; (4510 <tiltFilterTick+0x30>)
    44fc:	4420      	add	r0, r4
    return sample;
}
    44fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sample = tVZFilterBell_tick(&bell1[v][string], sample);
    4502:	f006 be11 	b.w	b128 <__tVZFilterBell_tick_veneer>
    4506:	bf00      	nop
    4508:	20005d48 	.word	0x20005d48
    450c:	20005d68 	.word	0x20005d68
    4510:	20000ad0 	.word	0x20000ad0
    4514:	f3af 8000 	nop.w
    4518:	f3af 8000 	nop.w
    451c:	f3af 8000 	nop.w

00004520 <tanhTick>:

float __ATTR_ITCMRAM tanhTick(float sample, int v, int string)
{
    float gain = param1[v][string];
    4520:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	sample = sample * gain;
    gain = gain * 0.5f;
    //need to do something with shape param
    float temp = tanhf(sample + (param2[v][string]*gain));
    4524:	4a0d      	ldr	r2, [pc, #52]	; (455c <tanhTick+0x3c>)
    4526:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    float gain = param1[v][string];
    452a:	4b0d      	ldr	r3, [pc, #52]	; (4560 <tanhTick+0x40>)
    float temp = tanhf(sample + (param2[v][string]*gain));
    452c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    float gain = param1[v][string];
    4530:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
    4534:	b510      	push	{r4, lr}
    4536:	edd2 6a00 	vldr	s13, [r2]
    float gain = param1[v][string];
    453a:	008c      	lsls	r4, r1, #2
    453c:	edd3 7a00 	vldr	s15, [r3]
    float temp = tanhf(sample + (param2[v][string]*gain));
    4540:	eea6 0a87 	vfma.f32	s0, s13, s14
    4544:	ee27 0a80 	vmul.f32	s0, s15, s0
    4548:	f006 fea2 	bl	b290 <__tanhf_veneer>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    454c:	4805      	ldr	r0, [pc, #20]	; (4564 <tanhTick+0x44>)
    454e:	4420      	add	r0, r4
    4550:	f006 fe3a 	bl	b1c8 <__tHighpass_tick_veneer>
    //temp *= param4[v][string];
    temp = tanhf(temp);
    //temp = tHighpass_tick(&dcBlock2, temp);
    return temp;
}
    4554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tanhf(temp);
    4558:	f006 be9a 	b.w	b290 <__tanhf_veneer>
    455c:	2000577c 	.word	0x2000577c
    4560:	2000575c 	.word	0x2000575c
    4564:	20000e78 	.word	0x20000e78
    4568:	f3af 8000 	nop.w
    456c:	f3af 8000 	nop.w
    4570:	f3af 8000 	nop.w
    4574:	f3af 8000 	nop.w
    4578:	f3af 8000 	nop.w
    457c:	f3af 8000 	nop.w

00004580 <softClipTick>:


float __ATTR_ITCMRAM softClipTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    4580:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    4584:	4a10      	ldr	r2, [pc, #64]	; (45c8 <softClipTick+0x48>)
    sample = sample + param2[v][string];
    4586:	4b11      	ldr	r3, [pc, #68]	; (45cc <softClipTick+0x4c>)
    4588:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string];
    458c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4590:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
    sample = sample + param2[v][string];
    4594:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    4598:	eddf 6a0d 	vldr	s13, [pc, #52]	; 45d0 <softClipTick+0x50>
    459c:	edd2 5a00 	vldr	s11, [r2]
    45a0:	edd3 7a00 	vldr	s15, [r3]
    {
        sample = (sample) - (((sample * sample * sample))* 0.3333333f);
        //sample = sample * shapeDividerS[v][string];
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    45a4:	480b      	ldr	r0, [pc, #44]	; (45d4 <softClipTick+0x54>)
    sample = sample + param2[v][string];
    45a6:	eee5 7a80 	vfma.f32	s15, s11, s0
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    45aa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    45ae:	fec7 7ac7 	vminnm.f32	s15, s15, s14
    45b2:	fec7 7a86 	vmaxnm.f32	s15, s15, s12
        sample = (sample) - (((sample * sample * sample))* 0.3333333f);
    45b6:	ee27 6ae7 	vnmul.f32	s12, s15, s15
    45ba:	eea6 7a26 	vfma.f32	s14, s12, s13
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    45be:	ee27 0a27 	vmul.f32	s0, s14, s15
    45c2:	f006 be01 	b.w	b1c8 <__tHighpass_tick_veneer>
    45c6:	bf00      	nop
    45c8:	2000575c 	.word	0x2000575c
    45cc:	2000577c 	.word	0x2000577c
    45d0:	3eaaaaaa 	.word	0x3eaaaaaa
    45d4:	20000e78 	.word	0x20000e78
    45d8:	f3af 8000 	nop.w
    45dc:	f3af 8000 	nop.w

000045e0 <hardClipTick>:


float __ATTR_ITCMRAM hardClipTick(float sample, int v, int string)
{

    sample = sample * param1[v][string];
    45e0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    45e4:	4a1a      	ldr	r2, [pc, #104]	; (4650 <hardClipTick+0x70>)
    sample = sample + param2[v][string];
    45e6:	4b1b      	ldr	r3, [pc, #108]	; (4654 <hardClipTick+0x74>)
    } else if (sample >= 1.0f)
    {
        sample = 1.0f;
    }
    {
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    45e8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string];
    45ec:	eb02 0281 	add.w	r2, r2, r1, lsl #2
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    45f0:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    sample = sample + param2[v][string];
    45f4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
    45f8:	b570      	push	{r4, r5, r6, lr}
    sample = sample + param2[v][string];
    45fa:	edd2 5a00 	vldr	s11, [r2]
    sample = sample * param1[v][string];
    45fe:	008c      	lsls	r4, r1, #2
    sample = sample + param2[v][string];
    4600:	edd3 7a00 	vldr	s15, [r3]
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    4604:	4e14      	ldr	r6, [pc, #80]	; (4658 <hardClipTick+0x78>)
    sample = sample + param2[v][string];
    4606:	eee5 7a80 	vfma.f32	s15, s11, s0
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    460a:	4d14      	ldr	r5, [pc, #80]	; (465c <hardClipTick+0x7c>)
    460c:	eb06 0681 	add.w	r6, r6, r1, lsl #2
    4610:	4425      	add	r5, r4
    4612:	ed96 7a00 	vldr	s14, [r6]
    4616:	fec7 7ac6 	vminnm.f32	s15, s15, s12
    461a:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
    461e:	ee27 0a87 	vmul.f32	s0, s15, s14
    4622:	f006 fda9 	bl	b178 <__arm_sin_f32_veneer>
    4626:	ed96 7a00 	vldr	s14, [r6]
    462a:	edd5 7a00 	vldr	s15, [r5]
    462e:	ee67 7a87 	vmul.f32	s15, s15, s14
    4632:	ee27 0a80 	vmul.f32	s0, s15, s0
    4636:	f006 fd9f 	bl	b178 <__arm_sin_f32_veneer>
        sample = sample * shapeDividerH[v][string];
    463a:	edd5 7a00 	vldr	s15, [r5]
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    463e:	4808      	ldr	r0, [pc, #32]	; (4660 <hardClipTick+0x80>)
    4640:	ee20 0a27 	vmul.f32	s0, s0, s15
    4644:	4420      	add	r0, r4
    return sample;
}
    4646:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    464a:	f006 bdbd 	b.w	b1c8 <__tHighpass_tick_veneer>
    464e:	bf00      	nop
    4650:	2000575c 	.word	0x2000575c
    4654:	2000577c 	.word	0x2000577c
    4658:	2000579c 	.word	0x2000579c
    465c:	20005cfc 	.word	0x20005cfc
    4660:	20000e78 	.word	0x20000e78
    4664:	f3af 8000 	nop.w
    4668:	f3af 8000 	nop.w
    466c:	f3af 8000 	nop.w
    4670:	f3af 8000 	nop.w
    4674:	f3af 8000 	nop.w
    4678:	f3af 8000 	nop.w
    467c:	f3af 8000 	nop.w

00004680 <polynomialShaperTick>:


float __ATTR_ITCMRAM polynomialShaperTick(float sample, int v, int string)
{

    sample = sample * param1[v][string];
    4680:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    4684:	4a1a      	ldr	r2, [pc, #104]	; (46f0 <polynomialShaperTick+0x70>)
    sample = sample + param2[v][string];
    4686:	4b1b      	ldr	r3, [pc, #108]	; (46f4 <polynomialShaperTick+0x74>)
    } else if (sample >= 1.0f)
    {
        sample = 1.0f;
    }

	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    4688:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string];
    468c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    4690:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    sample = sample + param2[v][string];
    4694:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
    4698:	b570      	push	{r4, r5, r6, lr}
    sample = sample + param2[v][string];
    469a:	edd2 5a00 	vldr	s11, [r2]
    sample = sample * param1[v][string];
    469e:	008c      	lsls	r4, r1, #2
    sample = sample + param2[v][string];
    46a0:	edd3 7a00 	vldr	s15, [r3]
	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    46a4:	4e14      	ldr	r6, [pc, #80]	; (46f8 <polynomialShaperTick+0x78>)
    sample = sample + param2[v][string];
    46a6:	eee5 7a80 	vfma.f32	s15, s11, s0
	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    46aa:	4d14      	ldr	r5, [pc, #80]	; (46fc <polynomialShaperTick+0x7c>)
    46ac:	eb06 0681 	add.w	r6, r6, r1, lsl #2
    46b0:	4425      	add	r5, r4
    46b2:	ed96 7a00 	vldr	s14, [r6]
    46b6:	fec7 7ac6 	vminnm.f32	s15, s15, s12
    46ba:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
    46be:	ee27 0a87 	vmul.f32	s0, s15, s14
    46c2:	f006 fd35 	bl	b130 <__fastSine_veneer>
    46c6:	ed96 7a00 	vldr	s14, [r6]
    46ca:	edd5 7a00 	vldr	s15, [r5]
    46ce:	ee67 7a87 	vmul.f32	s15, s15, s14
    46d2:	ee27 0a80 	vmul.f32	s0, s15, s0
    46d6:	f006 fd2b 	bl	b130 <__fastSine_veneer>
	sample = sample * polyDivider[v][string];
    46da:	edd5 7a00 	vldr	s15, [r5]


    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    46de:	4808      	ldr	r0, [pc, #32]	; (4700 <polynomialShaperTick+0x80>)
    46e0:	ee20 0a27 	vmul.f32	s0, s0, s15
    46e4:	4420      	add	r0, r4
    return sample;
}
    46e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    46ea:	f006 bd6d 	b.w	b1c8 <__tHighpass_tick_veneer>
    46ee:	bf00      	nop
    46f0:	2000575c 	.word	0x2000575c
    46f4:	2000577c 	.word	0x2000577c
    46f8:	2000579c 	.word	0x2000579c
    46fc:	20005864 	.word	0x20005864
    4700:	20000e78 	.word	0x20000e78
    4704:	f3af 8000 	nop.w
    4708:	f3af 8000 	nop.w
    470c:	f3af 8000 	nop.w
    4710:	f3af 8000 	nop.w
    4714:	f3af 8000 	nop.w
    4718:	f3af 8000 	nop.w
    471c:	f3af 8000 	nop.w

00004720 <satTick>:
float __ATTR_ITCMRAM satTick(float sample, int v, int string)
{;
    sample = sample * param1[v][string];
    4720:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    4724:	4b17      	ldr	r3, [pc, #92]	; (4784 <satTick+0x64>)
    sample = sample * param1[v][string];
    4726:	4a18      	ldr	r2, [pc, #96]	; (4788 <satTick+0x68>)
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    4728:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    472c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    4730:	4816      	ldr	r0, [pc, #88]	; (478c <satTick+0x6c>)
    sample = sample * param1[v][string];
    4732:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    4736:	eb00 0081 	add.w	r0, r0, r1, lsl #2
{;
    473a:	b510      	push	{r4, lr}
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    473c:	ed93 7a00 	vldr	s14, [r3]
    sample = sample * param1[v][string];
    4740:	008c      	lsls	r4, r1, #2
    4742:	edd2 7a00 	vldr	s15, [r2]
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    4746:	eeb0 6a47 	vmov.f32	s12, s14
    474a:	ee27 7a87 	vmul.f32	s14, s15, s14
    474e:	eea7 6a80 	vfma.f32	s12, s15, s0
    4752:	eea7 7a80 	vfma.f32	s14, s15, s0
    4756:	eeb0 6ac6 	vabs.f32	s12, s12
    475a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    475e:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    4762:	ee36 6b05 	vadd.f64	d6, d6, d5
    4766:	ee87 0b06 	vdiv.f64	d0, d7, d6
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    476a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    476e:	f006 fd2b 	bl	b1c8 <__tHighpass_tick_veneer>
    temp = tHighpass_tick(&dcBlock2[v][string], temp);
    4772:	4807      	ldr	r0, [pc, #28]	; (4790 <satTick+0x70>)
    4774:	4420      	add	r0, r4
    4776:	f006 fd27 	bl	b1c8 <__tHighpass_tick_veneer>
    temp = LEAF_tanh(temp);
    return temp;
}
    477a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = LEAF_tanh(temp);
    477e:	f006 bc3f 	b.w	b000 <__LEAF_tanh_veneer>
    4782:	bf00      	nop
    4784:	2000577c 	.word	0x2000577c
    4788:	2000575c 	.word	0x2000575c
    478c:	20000e78 	.word	0x20000e78
    4790:	20000e98 	.word	0x20000e98
    4794:	f3af 8000 	nop.w
    4798:	f3af 8000 	nop.w
    479c:	f3af 8000 	nop.w

000047a0 <bcTick>:



float __ATTR_ITCMRAM bcTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    47a0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    47a4:	4b05      	ldr	r3, [pc, #20]	; (47bc <bcTick+0x1c>)
    return tCrusher_tick(&bc[v][string], sample);
    47a6:	4806      	ldr	r0, [pc, #24]	; (47c0 <bcTick+0x20>)
    sample = sample * param1[v][string];
    47a8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    return tCrusher_tick(&bc[v][string], sample);
    47ac:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    sample = sample * param1[v][string];
    47b0:	edd3 7a00 	vldr	s15, [r3]
    return tCrusher_tick(&bc[v][string], sample);
    47b4:	ee20 0a27 	vmul.f32	s0, s0, s15
    47b8:	f006 bc7a 	b.w	b0b0 <__tCrusher_tick_veneer>
    47bc:	2000575c 	.word	0x2000575c
    47c0:	20000ab0 	.word	0x20000ab0
    47c4:	f3af 8000 	nop.w
    47c8:	f3af 8000 	nop.w
    47cc:	f3af 8000 	nop.w
    47d0:	f3af 8000 	nop.w
    47d4:	f3af 8000 	nop.w
    47d8:	f3af 8000 	nop.w
    47dc:	f3af 8000 	nop.w

000047e0 <compressorTick>:


float __ATTR_ITCMRAM compressorTick(float sample, int v, int string)
{
    //return tCompressor_tickWithTableHardKnee(&comp[v][string], sample);
	return tCompressor_tick(&comp[v][string], sample);
    47e0:	4b03      	ldr	r3, [pc, #12]	; (47f0 <compressorTick+0x10>)
    47e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    47e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    47ea:	f006 bd21 	b.w	b230 <__tCompressor_tick_veneer>
    47ee:	bf00      	nop
    47f0:	20000af0 	.word	0x20000af0
    47f4:	f3af 8000 	nop.w
    47f8:	f3af 8000 	nop.w
    47fc:	f3af 8000 	nop.w

00004800 <FXlowpassTick>:
}

float __ATTR_ITCMRAM  FXlowpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXlowpass[v][string], sample);
    4800:	4b03      	ldr	r3, [pc, #12]	; (4810 <FXlowpassTick+0x10>)
    4802:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    4806:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    480a:	f006 bc21 	b.w	b050 <__tSVF_tick_veneer>
    480e:	bf00      	nop
    4810:	200008dc 	.word	0x200008dc
    4814:	f3af 8000 	nop.w
    4818:	f3af 8000 	nop.w
    481c:	f3af 8000 	nop.w

00004820 <FXhighpassTick>:
}

float __ATTR_ITCMRAM  FXhighpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXhighpass[v][string], sample);
    4820:	4b03      	ldr	r3, [pc, #12]	; (4830 <FXhighpassTick+0x10>)
    4822:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    4826:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    482a:	f006 bc11 	b.w	b050 <__tSVF_tick_veneer>
    482e:	bf00      	nop
    4830:	200008bc 	.word	0x200008bc
    4834:	f3af 8000 	nop.w
    4838:	f3af 8000 	nop.w
    483c:	f3af 8000 	nop.w

00004840 <FXbandpassTick>:
}

float __ATTR_ITCMRAM  FXbandpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXbandpass[v][string], sample);
    4840:	4b03      	ldr	r3, [pc, #12]	; (4850 <FXbandpassTick+0x10>)
    4842:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    4846:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    484a:	f006 bc01 	b.w	b050 <__tSVF_tick_veneer>
    484e:	bf00      	nop
    4850:	2000087c 	.word	0x2000087c
    4854:	f3af 8000 	nop.w
    4858:	f3af 8000 	nop.w
    485c:	f3af 8000 	nop.w

00004860 <FXdiodeLowpassTick>:
}

float __ATTR_ITCMRAM  FXdiodeLowpassTick(float sample, int v, int string)
{
	return tDiodeFilter_tick(&FXdiodeFilters[v][string], sample);
    4860:	4b03      	ldr	r3, [pc, #12]	; (4870 <FXdiodeLowpassTick+0x10>)
    4862:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    4866:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    486a:	f006 bcdd 	b.w	b228 <__tDiodeFilter_tick_veneer>
    486e:	bf00      	nop
    4870:	2000089c 	.word	0x2000089c
    4874:	f3af 8000 	nop.w
    4878:	f3af 8000 	nop.w
    487c:	f3af 8000 	nop.w

00004880 <FXVZpeakTick>:
}

float __ATTR_ITCMRAM  FXVZpeakTick(float sample, int v, int string)
{
	return tVZFilterBell_tick(&FXVZfilterPeak[v][string], sample);
    4880:	4b03      	ldr	r3, [pc, #12]	; (4890 <FXVZpeakTick+0x10>)
    4882:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    4886:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    488a:	f006 bc4d 	b.w	b128 <__tVZFilterBell_tick_veneer>
    488e:	bf00      	nop
    4890:	2000085c 	.word	0x2000085c
    4894:	f3af 8000 	nop.w
    4898:	f3af 8000 	nop.w
    489c:	f3af 8000 	nop.w

000048a0 <FXVZlowshelfTick>:
}

float __ATTR_ITCMRAM  FXVZlowshelfTick(float sample, int v, int string)
{
	return tVZFilterLS_tick(&FXVZfilterLS[v][string], sample);
    48a0:	4b03      	ldr	r3, [pc, #12]	; (48b0 <FXVZlowshelfTick+0x10>)
    48a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    48a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    48aa:	f006 bb15 	b.w	aed8 <__tVZFilterLS_tick_veneer>
    48ae:	bf00      	nop
    48b0:	2000083c 	.word	0x2000083c
    48b4:	f3af 8000 	nop.w
    48b8:	f3af 8000 	nop.w
    48bc:	f3af 8000 	nop.w

000048c0 <FXVZhighshelfTick>:
}
float __ATTR_ITCMRAM  FXVZhighshelfTick(float sample, int v, int string)
{
	return tVZFilterHS_tick(&FXVZfilterHS[v][string], sample);
    48c0:	4b03      	ldr	r3, [pc, #12]	; (48d0 <FXVZhighshelfTick+0x10>)
    48c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    48c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    48ca:	f006 bc35 	b.w	b138 <__tVZFilterHS_tick_veneer>
    48ce:	bf00      	nop
    48d0:	2000081c 	.word	0x2000081c
    48d4:	f3af 8000 	nop.w
    48d8:	f3af 8000 	nop.w
    48dc:	f3af 8000 	nop.w

000048e0 <FXVZbandrejectTick>:
}
float __ATTR_ITCMRAM  FXVZbandrejectTick(float sample, int v, int string)
{
	return  tVZFilter_tickEfficient(&FXVZfilterBR[v][string], sample);
    48e0:	4b03      	ldr	r3, [pc, #12]	; (48f0 <FXVZbandrejectTick+0x10>)
    48e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    48e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    48ea:	f006 baf9 	b.w	aee0 <__tVZFilter_tickEfficient_veneer>
    48ee:	bf00      	nop
    48f0:	200007fc 	.word	0x200007fc
    48f4:	f3af 8000 	nop.w
    48f8:	f3af 8000 	nop.w
    48fc:	f3af 8000 	nop.w

00004900 <FXLadderLowpassTick>:
}

float __ATTR_ITCMRAM  FXLadderLowpassTick(float sample, int v, int string)
{
	return tLadderFilter_tick(&FXLadderfilter[v][string], sample);
    4900:	4b03      	ldr	r3, [pc, #12]	; (4910 <FXLadderLowpassTick+0x10>)
    4902:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    4906:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    490a:	f006 bc1d 	b.w	b148 <__tLadderFilter_tick_veneer>
    490e:	bf00      	nop
    4910:	200007dc 	.word	0x200007dc
    4914:	f3af 8000 	nop.w
    4918:	f3af 8000 	nop.w
    491c:	f3af 8000 	nop.w

00004920 <FXLowpassParam1>:
}
//cutoffparams

void  __ATTR_ITCMRAM FXLowpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    4920:	ed9f 7a07 	vldr	s14, [pc, #28]	; 4940 <FXLowpassParam1+0x20>
	tSVF_setFreqFast(&FXlowpass[v][string], value);
    4924:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    4928:	eddf 7a06 	vldr	s15, [pc, #24]	; 4944 <FXLowpassParam1+0x24>
	tSVF_setFreqFast(&FXlowpass[v][string], value);
    492c:	4b06      	ldr	r3, [pc, #24]	; (4948 <FXLowpassParam1+0x28>)
    492e:	eee0 7a07 	vfma.f32	s15, s0, s14
    4932:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4936:	eeb0 0a67 	vmov.f32	s0, s15
    493a:	f006 bb15 	b.w	af68 <__tSVF_setFreqFast_veneer>
    493e:	bf00      	nop
    4940:	429a0000 	.word	0x429a0000
    4944:	42280000 	.word	0x42280000
    4948:	200008dc 	.word	0x200008dc
    494c:	f3af 8000 	nop.w
    4950:	f3af 8000 	nop.w
    4954:	f3af 8000 	nop.w
    4958:	f3af 8000 	nop.w
    495c:	f3af 8000 	nop.w

00004960 <FXHighpassParam1>:
}
void __ATTR_ITCMRAM FXHighpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    4960:	ed9f 7a07 	vldr	s14, [pc, #28]	; 4980 <FXHighpassParam1+0x20>
	tSVF_setFreqFast(&FXhighpass[v][string], value);
    4964:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    4968:	eddf 7a06 	vldr	s15, [pc, #24]	; 4984 <FXHighpassParam1+0x24>
	tSVF_setFreqFast(&FXhighpass[v][string], value);
    496c:	4b06      	ldr	r3, [pc, #24]	; (4988 <FXHighpassParam1+0x28>)
    496e:	eee0 7a07 	vfma.f32	s15, s0, s14
    4972:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4976:	eeb0 0a67 	vmov.f32	s0, s15
    497a:	f006 baf5 	b.w	af68 <__tSVF_setFreqFast_veneer>
    497e:	bf00      	nop
    4980:	429a0000 	.word	0x429a0000
    4984:	42280000 	.word	0x42280000
    4988:	200008bc 	.word	0x200008bc
    498c:	f3af 8000 	nop.w
    4990:	f3af 8000 	nop.w
    4994:	f3af 8000 	nop.w
    4998:	f3af 8000 	nop.w
    499c:	f3af 8000 	nop.w

000049a0 <FXBandpassParam1>:
}

void __ATTR_ITCMRAM FXBandpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    49a0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 49c0 <FXBandpassParam1+0x20>
    tSVF_setFreqFast(&FXbandpass[v][string], value);
    49a4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    49a8:	eddf 7a06 	vldr	s15, [pc, #24]	; 49c4 <FXBandpassParam1+0x24>
    tSVF_setFreqFast(&FXbandpass[v][string], value);
    49ac:	4b06      	ldr	r3, [pc, #24]	; (49c8 <FXBandpassParam1+0x28>)
    49ae:	eee0 7a07 	vfma.f32	s15, s0, s14
    49b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    49b6:	eeb0 0a67 	vmov.f32	s0, s15
    49ba:	f006 bad5 	b.w	af68 <__tSVF_setFreqFast_veneer>
    49be:	bf00      	nop
    49c0:	429a0000 	.word	0x429a0000
    49c4:	42280000 	.word	0x42280000
    49c8:	2000087c 	.word	0x2000087c
    49cc:	f3af 8000 	nop.w
    49d0:	f3af 8000 	nop.w
    49d4:	f3af 8000 	nop.w
    49d8:	f3af 8000 	nop.w
    49dc:	f3af 8000 	nop.w

000049e0 <FXDiodeParam1>:
}

void __ATTR_ITCMRAM FXDiodeParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    49e0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 4a00 <FXDiodeParam1+0x20>
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
    49e4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    49e8:	eddf 7a06 	vldr	s15, [pc, #24]	; 4a04 <FXDiodeParam1+0x24>
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
    49ec:	4b06      	ldr	r3, [pc, #24]	; (4a08 <FXDiodeParam1+0x28>)
    49ee:	eee0 7a07 	vfma.f32	s15, s0, s14
    49f2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    49f6:	eeb0 0a67 	vmov.f32	s0, s15
    49fa:	f006 bb91 	b.w	b120 <__tDiodeFilter_setFreqFast_veneer>
    49fe:	bf00      	nop
    4a00:	429a0000 	.word	0x429a0000
    4a04:	42280000 	.word	0x42280000
    4a08:	2000089c 	.word	0x2000089c
    4a0c:	f3af 8000 	nop.w
    4a10:	f3af 8000 	nop.w
    4a14:	f3af 8000 	nop.w
    4a18:	f3af 8000 	nop.w
    4a1c:	f3af 8000 	nop.w

00004a20 <FXPeakParam1>:
}
void __ATTR_ITCMRAM FXPeakParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    4a20:	ed9f 7a07 	vldr	s14, [pc, #28]	; 4a40 <FXPeakParam1+0x20>
	tVZFilterBell_setFreq(&FXVZfilterPeak[v][string], value);
    4a24:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    4a28:	eddf 7a06 	vldr	s15, [pc, #24]	; 4a44 <FXPeakParam1+0x24>
	tVZFilterBell_setFreq(&FXVZfilterPeak[v][string], value);
    4a2c:	4b06      	ldr	r3, [pc, #24]	; (4a48 <FXPeakParam1+0x28>)
    4a2e:	eee0 7a07 	vfma.f32	s15, s0, s14
    4a32:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4a36:	eeb0 0a67 	vmov.f32	s0, s15
    4a3a:	f006 bac5 	b.w	afc8 <__tVZFilterBell_setFreq_veneer>
    4a3e:	bf00      	nop
    4a40:	429a0000 	.word	0x429a0000
    4a44:	42280000 	.word	0x42280000
    4a48:	2000085c 	.word	0x2000085c
    4a4c:	f3af 8000 	nop.w
    4a50:	f3af 8000 	nop.w
    4a54:	f3af 8000 	nop.w
    4a58:	f3af 8000 	nop.w
    4a5c:	f3af 8000 	nop.w

00004a60 <FXLowShelfParam1>:
}
void __ATTR_ITCMRAM FXLowShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    4a60:	ed9f 7a07 	vldr	s14, [pc, #28]	; 4a80 <FXLowShelfParam1+0x20>
    tVZFilterLS_setFreqFast(&FXVZfilterLS[v][string], value);
    4a64:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    4a68:	eddf 7a06 	vldr	s15, [pc, #24]	; 4a84 <FXLowShelfParam1+0x24>
    tVZFilterLS_setFreqFast(&FXVZfilterLS[v][string], value);
    4a6c:	4b06      	ldr	r3, [pc, #24]	; (4a88 <FXLowShelfParam1+0x28>)
    4a6e:	eee0 7a07 	vfma.f32	s15, s0, s14
    4a72:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4a76:	eeb0 0a67 	vmov.f32	s0, s15
    4a7a:	f006 bbfd 	b.w	b278 <__tVZFilterLS_setFreqFast_veneer>
    4a7e:	bf00      	nop
    4a80:	429a0000 	.word	0x429a0000
    4a84:	42280000 	.word	0x42280000
    4a88:	2000083c 	.word	0x2000083c
    4a8c:	f3af 8000 	nop.w
    4a90:	f3af 8000 	nop.w
    4a94:	f3af 8000 	nop.w
    4a98:	f3af 8000 	nop.w
    4a9c:	f3af 8000 	nop.w

00004aa0 <FXHighShelfParam1>:
}
void __ATTR_ITCMRAM FXHighShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    4aa0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 4ac0 <FXHighShelfParam1+0x20>
	tVZFilterHS_setFreqFast(&FXVZfilterHS[v][string], value);
    4aa4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    4aa8:	eddf 7a06 	vldr	s15, [pc, #24]	; 4ac4 <FXHighShelfParam1+0x24>
	tVZFilterHS_setFreqFast(&FXVZfilterHS[v][string], value);
    4aac:	4b06      	ldr	r3, [pc, #24]	; (4ac8 <FXHighShelfParam1+0x28>)
    4aae:	eee0 7a07 	vfma.f32	s15, s0, s14
    4ab2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4ab6:	eeb0 0a67 	vmov.f32	s0, s15
    4aba:	f006 bb55 	b.w	b168 <__tVZFilterHS_setFreqFast_veneer>
    4abe:	bf00      	nop
    4ac0:	429a0000 	.word	0x429a0000
    4ac4:	42280000 	.word	0x42280000
    4ac8:	2000081c 	.word	0x2000081c
    4acc:	f3af 8000 	nop.w
    4ad0:	f3af 8000 	nop.w
    4ad4:	f3af 8000 	nop.w
    4ad8:	f3af 8000 	nop.w
    4adc:	f3af 8000 	nop.w

00004ae0 <FXNotchParam1>:
}
void __ATTR_ITCMRAM FXNotchParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    4ae0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 4b00 <FXNotchParam1+0x20>
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
    4ae4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    4ae8:	eddf 7a06 	vldr	s15, [pc, #24]	; 4b04 <FXNotchParam1+0x24>
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
    4aec:	4b06      	ldr	r3, [pc, #24]	; (4b08 <FXNotchParam1+0x28>)
    4aee:	eee0 7a07 	vfma.f32	s15, s0, s14
    4af2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4af6:	eeb0 0a67 	vmov.f32	s0, s15
    4afa:	f006 bb01 	b.w	b100 <__tVZFilter_setFreqFast_veneer>
    4afe:	bf00      	nop
    4b00:	429a0000 	.word	0x429a0000
    4b04:	42280000 	.word	0x42280000
    4b08:	200007fc 	.word	0x200007fc
    4b0c:	f3af 8000 	nop.w
    4b10:	f3af 8000 	nop.w
    4b14:	f3af 8000 	nop.w
    4b18:	f3af 8000 	nop.w
    4b1c:	f3af 8000 	nop.w

00004b20 <FXLadderParam1>:
}
void __ATTR_ITCMRAM FXLadderParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    4b20:	ed9f 7a07 	vldr	s14, [pc, #28]	; 4b40 <FXLadderParam1+0x20>
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
    4b24:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    4b28:	eddf 7a06 	vldr	s15, [pc, #24]	; 4b44 <FXLadderParam1+0x24>
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
    4b2c:	4b06      	ldr	r3, [pc, #24]	; (4b48 <FXLadderParam1+0x28>)
    4b2e:	eee0 7a07 	vfma.f32	s15, s0, s14
    4b32:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4b36:	eeb0 0a67 	vmov.f32	s0, s15
    4b3a:	f006 ba01 	b.w	af40 <__tLadderFilter_setFreqFast_veneer>
    4b3e:	bf00      	nop
    4b40:	429a0000 	.word	0x429a0000
    4b44:	42280000 	.word	0x42280000
    4b48:	200007dc 	.word	0x200007dc
    4b4c:	f3af 8000 	nop.w
    4b50:	f3af 8000 	nop.w
    4b54:	f3af 8000 	nop.w
    4b58:	f3af 8000 	nop.w
    4b5c:	f3af 8000 	nop.w

00004b60 <FXPeakParam2>:

//gain params

void __ATTR_ITCMRAM FXPeakParam2(float value, int v, int string)
{
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    4b60:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    4b64:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 4be4 <FXPeakParam2+0x84>
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    4b68:	4a1f      	ldr	r2, [pc, #124]	; (4be8 <FXPeakParam2+0x88>)
    4b6a:	ed9f 1a20 	vldr	s2, [pc, #128]	; 4bec <FXPeakParam2+0x8c>
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    4b6e:	eee0 7a07 	vfma.f32	s15, s0, s14
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    4b72:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 4bf0 <FXPeakParam2+0x90>
{
    4b76:	b538      	push	{r3, r4, r5, lr}
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    4b78:	4b1e      	ldr	r3, [pc, #120]	; (4bf4 <FXPeakParam2+0x94>)
{
    4b7a:	460c      	mov	r4, r1
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    4b7c:	ed92 7a00 	vldr	s14, [r2]
{
    4b80:	4605      	mov	r5, r0
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    4b82:	edd3 0a00 	vldr	s1, [r3]
    4b86:	eed7 0a87 	vfnms.f32	s1, s15, s14
    4b8a:	f004 fe89 	bl	98a0 <LEAF_clip>
    uint32_t inDBIndex = (uint32_t) floatIndex;
    4b8e:	eebc 7ac0 	vcvt.u32.f32	s14, s0
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    4b92:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    4b96:	4a18      	ldr	r2, [pc, #96]	; (4bf8 <FXPeakParam2+0x98>)
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    4b98:	4c18      	ldr	r4, [pc, #96]	; (4bfc <FXPeakParam2+0x9c>)
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    4b9a:	f643 71ff 	movw	r1, #16383	; 0x3fff
    uint32_t inDBIndex = (uint32_t) floatIndex;
    4b9e:	ee17 3a10 	vmov	r3, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    4ba2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    4ba6:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    float alpha = floatIndex - (float)inDBIndex;
    4baa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    4bae:	eb02 0483 	add.w	r4, r2, r3, lsl #2
    uint32_t inDBIndexPlusOne = inDBIndex + 1;
    4bb2:	3301      	adds	r3, #1
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    4bb4:	ee77 7ac0 	vsub.f32	s15, s15, s0
    4bb8:	428b      	cmp	r3, r1
    float alpha = floatIndex - (float)inDBIndex;
    4bba:	ee30 0a47 	vsub.f32	s0, s0, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    4bbe:	edd4 6a00 	vldr	s13, [r4]
    4bc2:	bf28      	it	cs
    4bc4:	460b      	movcs	r3, r1
    4bc6:	ee77 7a87 	vadd.f32	s15, s15, s14
    4bca:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    4bce:	ed92 7a00 	vldr	s14, [r2]
    4bd2:	ee20 0a07 	vmul.f32	s0, s0, s14
}
    4bd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    4bda:	eea6 0aa7 	vfma.f32	s0, s13, s15
    4bde:	f006 ba6f 	b.w	b0c0 <__tVZFilterBell_setGain_veneer>
    4be2:	bf00      	nop
    4be4:	42480000 	.word	0x42480000
    4be8:	20000e74 	.word	0x20000e74
    4bec:	467ffc00 	.word	0x467ffc00
    4bf0:	00000000 	.word	0x00000000
    4bf4:	20000e70 	.word	0x20000e70
    4bf8:	30002000 	.word	0x30002000
    4bfc:	2000085c 	.word	0x2000085c

00004c00 <FXLowShelfParam2>:

void __ATTR_ITCMRAM FXLowShelfParam2(float value, int v, int string)
{
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    4c00:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    4c04:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 4c84 <FXLowShelfParam2+0x84>
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    4c08:	4a1f      	ldr	r2, [pc, #124]	; (4c88 <FXLowShelfParam2+0x88>)
    4c0a:	ed9f 1a20 	vldr	s2, [pc, #128]	; 4c8c <FXLowShelfParam2+0x8c>
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    4c0e:	eee0 7a07 	vfma.f32	s15, s0, s14
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    4c12:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 4c90 <FXLowShelfParam2+0x90>
{
    4c16:	b538      	push	{r3, r4, r5, lr}
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    4c18:	4b1e      	ldr	r3, [pc, #120]	; (4c94 <FXLowShelfParam2+0x94>)
{
    4c1a:	460c      	mov	r4, r1
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    4c1c:	ed92 7a00 	vldr	s14, [r2]
{
    4c20:	4605      	mov	r5, r0
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    4c22:	edd3 0a00 	vldr	s1, [r3]
    4c26:	eed7 0a87 	vfnms.f32	s1, s15, s14
    4c2a:	f004 fe39 	bl	98a0 <LEAF_clip>
    uint32_t inDBIndex = (uint32_t) floatIndex;
    4c2e:	eebc 7ac0 	vcvt.u32.f32	s14, s0
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    4c32:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    4c36:	4a18      	ldr	r2, [pc, #96]	; (4c98 <FXLowShelfParam2+0x98>)
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    4c38:	4c18      	ldr	r4, [pc, #96]	; (4c9c <FXLowShelfParam2+0x9c>)
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    4c3a:	f643 71ff 	movw	r1, #16383	; 0x3fff
    uint32_t inDBIndex = (uint32_t) floatIndex;
    4c3e:	ee17 3a10 	vmov	r3, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    4c42:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    4c46:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    float alpha = floatIndex - (float)inDBIndex;
    4c4a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    4c4e:	eb02 0483 	add.w	r4, r2, r3, lsl #2
    uint32_t inDBIndexPlusOne = inDBIndex + 1;
    4c52:	3301      	adds	r3, #1
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    4c54:	ee77 7ac0 	vsub.f32	s15, s15, s0
    4c58:	428b      	cmp	r3, r1
    float alpha = floatIndex - (float)inDBIndex;
    4c5a:	ee30 0a47 	vsub.f32	s0, s0, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    4c5e:	edd4 6a00 	vldr	s13, [r4]
    4c62:	bf28      	it	cs
    4c64:	460b      	movcs	r3, r1
    4c66:	ee77 7a87 	vadd.f32	s15, s15, s14
    4c6a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    4c6e:	ed92 7a00 	vldr	s14, [r2]
    4c72:	ee20 0a07 	vmul.f32	s0, s0, s14
}
    4c76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    4c7a:	eea6 0aa7 	vfma.f32	s0, s13, s15
    4c7e:	f006 badf 	b.w	b240 <__tVZFilterLS_setGain_veneer>
    4c82:	bf00      	nop
    4c84:	42480000 	.word	0x42480000
    4c88:	20000e74 	.word	0x20000e74
    4c8c:	467ffc00 	.word	0x467ffc00
    4c90:	00000000 	.word	0x00000000
    4c94:	20000e70 	.word	0x20000e70
    4c98:	30002000 	.word	0x30002000
    4c9c:	2000083c 	.word	0x2000083c

00004ca0 <FXHighShelfParam2>:

void __ATTR_ITCMRAM FXHighShelfParam2(float value, int v, int string)
{
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    4ca0:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    4ca4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 4d24 <FXHighShelfParam2+0x84>
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    4ca8:	4a1f      	ldr	r2, [pc, #124]	; (4d28 <FXHighShelfParam2+0x88>)
    4caa:	ed9f 1a20 	vldr	s2, [pc, #128]	; 4d2c <FXHighShelfParam2+0x8c>
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    4cae:	eee0 7a07 	vfma.f32	s15, s0, s14
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    4cb2:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 4d30 <FXHighShelfParam2+0x90>
{
    4cb6:	b538      	push	{r3, r4, r5, lr}
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    4cb8:	4b1e      	ldr	r3, [pc, #120]	; (4d34 <FXHighShelfParam2+0x94>)
{
    4cba:	460c      	mov	r4, r1
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    4cbc:	ed92 7a00 	vldr	s14, [r2]
{
    4cc0:	4605      	mov	r5, r0
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    4cc2:	edd3 0a00 	vldr	s1, [r3]
    4cc6:	eed7 0a87 	vfnms.f32	s1, s15, s14
    4cca:	f004 fde9 	bl	98a0 <LEAF_clip>
    uint32_t inDBIndex = (uint32_t) floatIndex;
    4cce:	eebc 7ac0 	vcvt.u32.f32	s14, s0
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    4cd2:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    4cd6:	4a18      	ldr	r2, [pc, #96]	; (4d38 <FXHighShelfParam2+0x98>)
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    4cd8:	4c18      	ldr	r4, [pc, #96]	; (4d3c <FXHighShelfParam2+0x9c>)
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    4cda:	f643 71ff 	movw	r1, #16383	; 0x3fff
    uint32_t inDBIndex = (uint32_t) floatIndex;
    4cde:	ee17 3a10 	vmov	r3, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    4ce2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    4ce6:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    float alpha = floatIndex - (float)inDBIndex;
    4cea:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    4cee:	eb02 0483 	add.w	r4, r2, r3, lsl #2
    uint32_t inDBIndexPlusOne = inDBIndex + 1;
    4cf2:	3301      	adds	r3, #1
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    4cf4:	ee77 7ac0 	vsub.f32	s15, s15, s0
    4cf8:	428b      	cmp	r3, r1
    float alpha = floatIndex - (float)inDBIndex;
    4cfa:	ee30 0a47 	vsub.f32	s0, s0, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    4cfe:	edd4 6a00 	vldr	s13, [r4]
    4d02:	bf28      	it	cs
    4d04:	460b      	movcs	r3, r1
    4d06:	ee77 7a87 	vadd.f32	s15, s15, s14
    4d0a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    4d0e:	ed92 7a00 	vldr	s14, [r2]
    4d12:	ee20 0a07 	vmul.f32	s0, s0, s14
}
    4d16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    4d1a:	eea6 0aa7 	vfma.f32	s0, s13, s15
    4d1e:	f006 b963 	b.w	afe8 <__tVZFilterHS_setGain_veneer>
    4d22:	bf00      	nop
    4d24:	42480000 	.word	0x42480000
    4d28:	20000e74 	.word	0x20000e74
    4d2c:	467ffc00 	.word	0x467ffc00
    4d30:	00000000 	.word	0x00000000
    4d34:	20000e70 	.word	0x20000e70
    4d38:	30002000 	.word	0x30002000
    4d3c:	2000081c 	.word	0x2000081c

00004d40 <FXNotchParam2>:

void __ATTR_ITCMRAM FXNotchParam2(float value, int v, int string)
{
	tVZFilter_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    4d40:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    4d44:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 4dc4 <FXNotchParam2+0x84>
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    4d48:	4a1f      	ldr	r2, [pc, #124]	; (4dc8 <FXNotchParam2+0x88>)
    4d4a:	ed9f 1a20 	vldr	s2, [pc, #128]	; 4dcc <FXNotchParam2+0x8c>
	tVZFilter_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    4d4e:	eee0 7a07 	vfma.f32	s15, s0, s14
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    4d52:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 4dd0 <FXNotchParam2+0x90>
{
    4d56:	b538      	push	{r3, r4, r5, lr}
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    4d58:	4b1e      	ldr	r3, [pc, #120]	; (4dd4 <FXNotchParam2+0x94>)
{
    4d5a:	460c      	mov	r4, r1
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    4d5c:	ed92 7a00 	vldr	s14, [r2]
{
    4d60:	4605      	mov	r5, r0
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    4d62:	edd3 0a00 	vldr	s1, [r3]
    4d66:	eed7 0a87 	vfnms.f32	s1, s15, s14
    4d6a:	f004 fd99 	bl	98a0 <LEAF_clip>
    uint32_t inDBIndex = (uint32_t) floatIndex;
    4d6e:	eebc 7ac0 	vcvt.u32.f32	s14, s0
	tVZFilter_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    4d72:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    4d76:	4a18      	ldr	r2, [pc, #96]	; (4dd8 <FXNotchParam2+0x98>)
	tVZFilter_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    4d78:	4c18      	ldr	r4, [pc, #96]	; (4ddc <FXNotchParam2+0x9c>)
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    4d7a:	f643 71ff 	movw	r1, #16383	; 0x3fff
    uint32_t inDBIndex = (uint32_t) floatIndex;
    4d7e:	ee17 3a10 	vmov	r3, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    4d82:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	tVZFilter_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    4d86:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    float alpha = floatIndex - (float)inDBIndex;
    4d8a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    4d8e:	eb02 0483 	add.w	r4, r2, r3, lsl #2
    uint32_t inDBIndexPlusOne = inDBIndex + 1;
    4d92:	3301      	adds	r3, #1
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    4d94:	ee77 7ac0 	vsub.f32	s15, s15, s0
    4d98:	428b      	cmp	r3, r1
    float alpha = floatIndex - (float)inDBIndex;
    4d9a:	ee30 0a47 	vsub.f32	s0, s0, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    4d9e:	edd4 6a00 	vldr	s13, [r4]
    4da2:	bf28      	it	cs
    4da4:	460b      	movcs	r3, r1
    4da6:	ee77 7a87 	vadd.f32	s15, s15, s14
    4daa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    4dae:	ed92 7a00 	vldr	s14, [r2]
    4db2:	ee20 0a07 	vmul.f32	s0, s0, s14

}
    4db6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    4dba:	eea6 0aa7 	vfma.f32	s0, s13, s15
    4dbe:	f006 b953 	b.w	b068 <__tVZFilter_setGain_veneer>
    4dc2:	bf00      	nop
    4dc4:	42480000 	.word	0x42480000
    4dc8:	20000e74 	.word	0x20000e74
    4dcc:	467ffc00 	.word	0x467ffc00
    4dd0:	00000000 	.word	0x00000000
    4dd4:	20000e70 	.word	0x20000e70
    4dd8:	30002000 	.word	0x30002000
    4ddc:	200007fc 	.word	0x200007fc

00004de0 <FXLowpassParam3>:
//resonance params
void __ATTR_ITCMRAM FXLowpassParam3(float value, int v, int string)
{
	tSVF_setQ(&FXlowpass[v][string], value);
    4de0:	4b03      	ldr	r3, [pc, #12]	; (4df0 <FXLowpassParam3+0x10>)
    4de2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    4de6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4dea:	f006 b89d 	b.w	af28 <__tSVF_setQ_veneer>
    4dee:	bf00      	nop
    4df0:	200008dc 	.word	0x200008dc
    4df4:	f3af 8000 	nop.w
    4df8:	f3af 8000 	nop.w
    4dfc:	f3af 8000 	nop.w

00004e00 <FXHighpassParam3>:
}

void __ATTR_ITCMRAM FXHighpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXhighpass[v][string], value);
    4e00:	4b03      	ldr	r3, [pc, #12]	; (4e10 <FXHighpassParam3+0x10>)
    4e02:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    4e06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4e0a:	f006 b88d 	b.w	af28 <__tSVF_setQ_veneer>
    4e0e:	bf00      	nop
    4e10:	200008bc 	.word	0x200008bc
    4e14:	f3af 8000 	nop.w
    4e18:	f3af 8000 	nop.w
    4e1c:	f3af 8000 	nop.w

00004e20 <FXBandpassParam3>:
}

void __ATTR_ITCMRAM FXBandpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXbandpass[v][string], value);
    4e20:	4b03      	ldr	r3, [pc, #12]	; (4e30 <FXBandpassParam3+0x10>)
    4e22:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    4e26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4e2a:	f006 b87d 	b.w	af28 <__tSVF_setQ_veneer>
    4e2e:	bf00      	nop
    4e30:	2000087c 	.word	0x2000087c
    4e34:	f3af 8000 	nop.w
    4e38:	f3af 8000 	nop.w
    4e3c:	f3af 8000 	nop.w

00004e40 <FXDiodeParam3>:
}

void __ATTR_ITCMRAM FXDiodeParam3(float value, int v, int string)
{
	tDiodeFilter_setQ(&FXdiodeFilters[v][string], value);
    4e40:	4b03      	ldr	r3, [pc, #12]	; (4e50 <FXDiodeParam3+0x10>)
    4e42:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    4e46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4e4a:	f006 b999 	b.w	b180 <__tDiodeFilter_setQ_veneer>
    4e4e:	bf00      	nop
    4e50:	2000089c 	.word	0x2000089c
    4e54:	f3af 8000 	nop.w
    4e58:	f3af 8000 	nop.w
    4e5c:	f3af 8000 	nop.w

00004e60 <FXPeakParam3>:
}


void __ATTR_ITCMRAM FXPeakParam3(float value, int v, int string)
{
	tVZFilterBell_setBandwidth(&FXVZfilterPeak[v][string], value);
    4e60:	4b03      	ldr	r3, [pc, #12]	; (4e70 <FXPeakParam3+0x10>)
    4e62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    4e66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4e6a:	f006 b841 	b.w	aef0 <__tVZFilterBell_setBandwidth_veneer>
    4e6e:	bf00      	nop
    4e70:	2000085c 	.word	0x2000085c
    4e74:	f3af 8000 	nop.w
    4e78:	f3af 8000 	nop.w
    4e7c:	f3af 8000 	nop.w

00004e80 <FXLowShelfParam3>:
}


void __ATTR_ITCMRAM FXLowShelfParam3(float value, int v, int string)
{
	tVZFilterLS_setResonance(&FXVZfilterLS[v][string], value);
    4e80:	4b03      	ldr	r3, [pc, #12]	; (4e90 <FXLowShelfParam3+0x10>)
    4e82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    4e86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4e8a:	f006 b8e5 	b.w	b058 <__tVZFilterLS_setResonance_veneer>
    4e8e:	bf00      	nop
    4e90:	2000083c 	.word	0x2000083c
    4e94:	f3af 8000 	nop.w
    4e98:	f3af 8000 	nop.w
    4e9c:	f3af 8000 	nop.w

00004ea0 <FXHighShelfParam3>:
}


void __ATTR_ITCMRAM FXHighShelfParam3(float value, int v, int string)
{
	tVZFilterHS_setResonance(&FXVZfilterHS[v][string], value);
    4ea0:	4b03      	ldr	r3, [pc, #12]	; (4eb0 <FXHighShelfParam3+0x10>)
    4ea2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    4ea6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4eaa:	f006 b96d 	b.w	b188 <__tVZFilterHS_setResonance_veneer>
    4eae:	bf00      	nop
    4eb0:	2000081c 	.word	0x2000081c
    4eb4:	f3af 8000 	nop.w
    4eb8:	f3af 8000 	nop.w
    4ebc:	f3af 8000 	nop.w

00004ec0 <FXNotchParam3>:
}


void __ATTR_ITCMRAM FXNotchParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterBR[v][string], value);
    4ec0:	4b03      	ldr	r3, [pc, #12]	; (4ed0 <FXNotchParam3+0x10>)
    4ec2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    4ec6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4eca:	f006 b989 	b.w	b1e0 <__tVZFilter_setResonance_veneer>
    4ece:	bf00      	nop
    4ed0:	200007fc 	.word	0x200007fc
    4ed4:	f3af 8000 	nop.w
    4ed8:	f3af 8000 	nop.w
    4edc:	f3af 8000 	nop.w

00004ee0 <FXLadderParam3>:
}


void __ATTR_ITCMRAM FXLadderParam3(float value, int v, int string)
{
	tLadderFilter_setQ(&FXLadderfilter[v][string], value);
    4ee0:	4b03      	ldr	r3, [pc, #12]	; (4ef0 <FXLadderParam3+0x10>)
    4ee2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    4ee6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4eea:	f006 b9a5 	b.w	b238 <__tLadderFilter_setQ_veneer>
    4eee:	bf00      	nop
    4ef0:	200007dc 	.word	0x200007dc
    4ef4:	f3af 8000 	nop.w
    4ef8:	f3af 8000 	nop.w
    4efc:	f3af 8000 	nop.w

00004f00 <noiseSetTilt>:


/////NOISE///

void __ATTR_ITCMRAM noiseSetTilt(float value, int v, int string)
{
    4f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	tVZFilterLS_setGain(&noiseShelf1[string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    4f04:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    4f08:	4f3b      	ldr	r7, [pc, #236]	; (4ff8 <noiseSetTilt+0xf8>)
    4f0a:	f8df 8104 	ldr.w	r8, [pc, #260]	; 5010 <noiseSetTilt+0x110>
    4f0e:	008d      	lsls	r5, r1, #2
    4f10:	ed97 7a00 	vldr	s14, [r7]
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    4f14:	f643 76ff 	movw	r6, #16383	; 0x3fff
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    4f18:	edd8 0a00 	vldr	s1, [r8]
    4f1c:	ed9f 1a37 	vldr	s2, [pc, #220]	; 4ffc <noiseSetTilt+0xfc>
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    4f20:	4c37      	ldr	r4, [pc, #220]	; (5000 <noiseSetTilt+0x100>)
{
    4f22:	ed2d 8b04 	vpush	{d8-d9}
	tVZFilterLS_setGain(&noiseShelf1[string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    4f26:	eeb3 9a0e 	vmov.f32	s18, #62	; 0x41f00000  30.0
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    4f2a:	eddf 9a36 	vldr	s19, [pc, #216]	; 5004 <noiseSetTilt+0x104>
{
    4f2e:	b082      	sub	sp, #8
    4f30:	eef0 8a40 	vmov.f32	s17, s0
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    4f34:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
	tVZFilterLS_setGain(&noiseShelf1[string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    4f38:	eee0 7a49 	vfms.f32	s15, s0, s18
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    4f3c:	ed8d 1a01 	vstr	s2, [sp, #4]
    4f40:	eeb0 0a69 	vmov.f32	s0, s19
    4f44:	eed7 0a87 	vfnms.f32	s1, s15, s14
    4f48:	f004 fcaa 	bl	98a0 <LEAF_clip>
    uint32_t inDBIndex = (uint32_t) floatIndex;
    4f4c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    4f50:	ee38 7a40 	vsub.f32	s14, s16, s0
	tVZFilterLS_setGain(&noiseShelf1[string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    4f54:	482c      	ldr	r0, [pc, #176]	; (5008 <noiseSetTilt+0x108>)
    uint32_t inDBIndex = (uint32_t) floatIndex;
    4f56:	ee17 3a90 	vmov	r3, s15
    float alpha = floatIndex - (float)inDBIndex;
    4f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
	tVZFilterLS_setGain(&noiseShelf1[string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    4f5e:	4428      	add	r0, r5
    uint32_t inDBIndexPlusOne = inDBIndex + 1;
    4f60:	1c5a      	adds	r2, r3, #1
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    4f62:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    float alpha = floatIndex - (float)inDBIndex;
    4f66:	ee70 7a66 	vsub.f32	s15, s0, s13
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    4f6a:	42b2      	cmp	r2, r6
    4f6c:	ee37 7a26 	vadd.f32	s14, s14, s13
    4f70:	edd3 6a00 	vldr	s13, [r3]
    4f74:	bf28      	it	cs
    4f76:	4632      	movcs	r2, r6
    4f78:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    4f7c:	ed92 6a00 	vldr	s12, [r2]
    4f80:	ee27 0a86 	vmul.f32	s0, s15, s12
	tVZFilterLS_setGain(&noiseShelf1[string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    4f84:	eea6 0a87 	vfma.f32	s0, s13, s14
    4f88:	f006 f95a 	bl	b240 <__tVZFilterLS_setGain_veneer>
	tVZFilterHS_setGain(&noiseShelf2[string], dbToATableLookup((value * 30.0f) - 15.0f));
    4f8c:	eefa 7a0e 	vmov.f32	s15, #174	; 0xc1700000 -15.0
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    4f90:	ed97 7a00 	vldr	s14, [r7]
    4f94:	eeb0 0a69 	vmov.f32	s0, s19
    4f98:	edd8 0a00 	vldr	s1, [r8]
	tVZFilterHS_setGain(&noiseShelf2[string], dbToATableLookup((value * 30.0f) - 15.0f));
    4f9c:	eee8 7a89 	vfma.f32	s15, s17, s18
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    4fa0:	ed9d 1a01 	vldr	s2, [sp, #4]
    4fa4:	eed7 0a87 	vfnms.f32	s1, s15, s14
    4fa8:	f004 fc7a 	bl	98a0 <LEAF_clip>
    uint32_t inDBIndex = (uint32_t) floatIndex;
    4fac:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    4fb0:	ee38 8a40 	vsub.f32	s16, s16, s0
	tVZFilterHS_setGain(&noiseShelf2[string], dbToATableLookup((value * 30.0f) - 15.0f));
    4fb4:	4815      	ldr	r0, [pc, #84]	; (500c <noiseSetTilt+0x10c>)
    uint32_t inDBIndex = (uint32_t) floatIndex;
    4fb6:	ee17 3a90 	vmov	r3, s15
    float alpha = floatIndex - (float)inDBIndex;
    4fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
	tVZFilterHS_setGain(&noiseShelf2[string], dbToATableLookup((value * 30.0f) - 15.0f));
    4fbe:	4428      	add	r0, r5
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    4fc0:	eb04 0283 	add.w	r2, r4, r3, lsl #2
    uint32_t inDBIndexPlusOne = inDBIndex + 1;
    4fc4:	3301      	adds	r3, #1
    float alpha = floatIndex - (float)inDBIndex;
    4fc6:	ee30 0a67 	vsub.f32	s0, s0, s15
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    4fca:	42b3      	cmp	r3, r6
    4fcc:	ee38 8a27 	vadd.f32	s16, s16, s15
    4fd0:	ed92 7a00 	vldr	s14, [r2]
    4fd4:	bf28      	it	cs
    4fd6:	4633      	movcs	r3, r6
    4fd8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    4fdc:	edd4 7a00 	vldr	s15, [r4]
    4fe0:	ee20 0a27 	vmul.f32	s0, s0, s15
	tVZFilterHS_setGain(&noiseShelf2[string], dbToATableLookup((value * 30.0f) - 15.0f));
    4fe4:	eea7 0a08 	vfma.f32	s0, s14, s16
}
    4fe8:	b002      	add	sp, #8
    4fea:	ecbd 8b04 	vpop	{d8-d9}
    4fee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	tVZFilterHS_setGain(&noiseShelf2[string], dbToATableLookup((value * 30.0f) - 15.0f));
    4ff2:	f005 bff9 	b.w	afe8 <__tVZFilterHS_setGain_veneer>
    4ff6:	bf00      	nop
    4ff8:	20000e74 	.word	0x20000e74
    4ffc:	467ffc00 	.word	0x467ffc00
    5000:	30002000 	.word	0x30002000
    5004:	00000000 	.word	0x00000000
    5008:	200056d8 	.word	0x200056d8
    500c:	200056e0 	.word	0x200056e0
    5010:	20000e70 	.word	0x20000e70
    5014:	f3af 8000 	nop.w
    5018:	f3af 8000 	nop.w
    501c:	f3af 8000 	nop.w

00005020 <noiseSetGain>:


void __ATTR_ITCMRAM noiseSetGain(float value, int v, int string)
{
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    5020:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
    5024:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 509c <noiseSetGain+0x7c>
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    5028:	4a1d      	ldr	r2, [pc, #116]	; (50a0 <noiseSetGain+0x80>)
    502a:	4b1e      	ldr	r3, [pc, #120]	; (50a4 <noiseSetGain+0x84>)
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    502c:	eee0 7a07 	vfma.f32	s15, s0, s14
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    5030:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 50a8 <noiseSetGain+0x88>
    5034:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 50ac <noiseSetGain+0x8c>
{
    5038:	b510      	push	{r4, lr}
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    503a:	ed92 7a00 	vldr	s14, [r2]
{
    503e:	460c      	mov	r4, r1
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
    5040:	edd3 0a00 	vldr	s1, [r3]
    5044:	eed7 0a87 	vfnms.f32	s1, s15, s14
    5048:	f004 fc2a 	bl	98a0 <LEAF_clip>
    uint32_t inDBIndex = (uint32_t) floatIndex;
    504c:	eebc 7ac0 	vcvt.u32.f32	s14, s0
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    5050:	f643 70ff 	movw	r0, #16383	; 0x3fff
    5054:	4a16      	ldr	r2, [pc, #88]	; (50b0 <noiseSetGain+0x90>)
    5056:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    uint32_t inDBIndex = (uint32_t) floatIndex;
    505a:	ee17 3a10 	vmov	r3, s14
    float alpha = floatIndex - (float)inDBIndex;
    505e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    uint32_t inDBIndexPlusOne = inDBIndex + 1;
    5062:	1c59      	adds	r1, r3, #1
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    5064:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5068:	ee77 7ac0 	vsub.f32	s15, s15, s0
    506c:	4281      	cmp	r1, r0
    float alpha = floatIndex - (float)inDBIndex;
    506e:	ee30 0a47 	vsub.f32	s0, s0, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    5072:	bf28      	it	cs
    5074:	4601      	movcs	r1, r0
    5076:	ee77 7a87 	vadd.f32	s15, s15, s14
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    507a:	480e      	ldr	r0, [pc, #56]	; (50b4 <noiseSetGain+0x94>)
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    507c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    5080:	ed93 7a00 	vldr	s14, [r3]
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    5084:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
    5088:	edd2 6a00 	vldr	s13, [r2]
    508c:	ee20 0a26 	vmul.f32	s0, s0, s13
}
    5090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    5094:	eea7 0a27 	vfma.f32	s0, s14, s15
    5098:	f006 b812 	b.w	b0c0 <__tVZFilterBell_setGain_veneer>
    509c:	42080000 	.word	0x42080000
    50a0:	20000e74 	.word	0x20000e74
    50a4:	20000e70 	.word	0x20000e70
    50a8:	467ffc00 	.word	0x467ffc00
    50ac:	00000000 	.word	0x00000000
    50b0:	30002000 	.word	0x30002000
    50b4:	200056b4 	.word	0x200056b4
    50b8:	f3af 8000 	nop.w
    50bc:	f3af 8000 	nop.w

000050c0 <noiseSetFreq>:

void __ATTR_ITCMRAM noiseSetFreq(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    50c0:	ed9f 7a09 	vldr	s14, [pc, #36]	; 50e8 <noiseSetFreq+0x28>
    50c4:	eddf 7a09 	vldr	s15, [pc, #36]	; 50ec <noiseSetFreq+0x2c>
	tVZFilterBell_setFreq(&noiseBell1[string], faster_mtof(value));
    50c8:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    50cc:	b510      	push	{r4, lr}
    50ce:	460c      	mov	r4, r1
	tVZFilterBell_setFreq(&noiseBell1[string], faster_mtof(value));
    50d0:	eeb0 0a67 	vmov.f32	s0, s15
    50d4:	f006 f8b8 	bl	b248 <__faster_mtof_veneer>
    50d8:	4805      	ldr	r0, [pc, #20]	; (50f0 <noiseSetFreq+0x30>)
    50da:	eb00 0084 	add.w	r0, r0, r4, lsl #2
	//value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);

}
    50de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilterBell_setFreq(&noiseBell1[string], faster_mtof(value));
    50e2:	f005 bf71 	b.w	afc8 <__tVZFilterBell_setFreq_veneer>
    50e6:	bf00      	nop
    50e8:	429a0000 	.word	0x429a0000
    50ec:	42280000 	.word	0x42280000
    50f0:	200056b4 	.word	0x200056b4
    50f4:	f3af 8000 	nop.w
    50f8:	f3af 8000 	nop.w
    50fc:	f3af 8000 	nop.w

00005100 <noise_tick>:


void __ATTR_ITCMRAM noise_tick(int string)
{
    5100:	b538      	push	{r3, r4, r5, lr}
	float enabled = params[Noise].realVal[string];
    5102:	4b25      	ldr	r3, [pc, #148]	; (5198 <noise_tick+0x98>)
{
    5104:	4604      	mov	r4, r0
	float amp = params[NoiseAmp].realVal[string];
	float filterSend = params[NoiseFilterSend].realVal[string];
	amp = amp < 0.f ? 0.f : amp;
	float sample = random_values[randomValPointer++];
    5106:	4d25      	ldr	r5, [pc, #148]	; (519c <noise_tick+0x9c>)
	float enabled = params[Noise].realVal[string];
    5108:	eb03 0280 	add.w	r2, r3, r0, lsl #2
	float sample = random_values[randomValPointer++];
    510c:	4924      	ldr	r1, [pc, #144]	; (51a0 <noise_tick+0xa0>)
	sample = tVZFilterLS_tick(&noiseShelf1[string], sample);
    510e:	4825      	ldr	r0, [pc, #148]	; (51a4 <noise_tick+0xa4>)
	float filterSend = params[NoiseFilterSend].realVal[string];
    5110:	4613      	mov	r3, r2
	sample = tVZFilterLS_tick(&noiseShelf1[string], sample);
    5112:	eb00 0084 	add.w	r0, r0, r4, lsl #2
{
    5116:	ed2d 8b04 	vpush	{d8-d9}
	float enabled = params[Noise].realVal[string];
    511a:	ed92 9a80 	vldr	s18, [r2, #512]	; 0x200
	float amp = params[NoiseAmp].realVal[string];
    511e:	edd2 8a9c 	vldr	s17, [r2, #624]	; 0x270
	float sample = random_values[randomValPointer++];
    5122:	782a      	ldrb	r2, [r5, #0]
	float filterSend = params[NoiseFilterSend].realVal[string];
    5124:	ed93 8aa3 	vldr	s16, [r3, #652]	; 0x28c
	float sample = random_values[randomValPointer++];
    5128:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    512c:	3201      	adds	r2, #1
	sample = tVZFilterLS_tick(&noiseShelf1[string], sample);
    512e:	ed91 0a00 	vldr	s0, [r1]
	float sample = random_values[randomValPointer++];
    5132:	702a      	strb	r2, [r5, #0]
	sample = tVZFilterLS_tick(&noiseShelf1[string], sample);
    5134:	f005 fed0 	bl	aed8 <__tVZFilterLS_tick_veneer>
	sample = tVZFilterHS_tick(&noiseShelf2[string], sample);
    5138:	00a5      	lsls	r5, r4, #2
    513a:	481b      	ldr	r0, [pc, #108]	; (51a8 <noise_tick+0xa8>)
    513c:	4428      	add	r0, r5
    513e:	f005 fffb 	bl	b138 <__tVZFilterHS_tick_veneer>
	sample = tVZFilterBell_tick(&noiseBell1[string], sample);
    5142:	481a      	ldr	r0, [pc, #104]	; (51ac <noise_tick+0xac>)
    5144:	4428      	add	r0, r5
    5146:	f005 ffef 	bl	b128 <__tVZFilterBell_tick_veneer>
	sample = sample * amp;
	float normSample = (sample + 1.f) * 0.5f;
    514a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	amp = amp < 0.f ? 0.f : amp;
    514e:	ed9f 6a18 	vldr	s12, [pc, #96]	; 51b0 <noise_tick+0xb0>
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
	noiseOuts[0][string] = sample * filterSend *  enabled;
    5152:	ee29 7a08 	vmul.f32	s14, s18, s16
	float normSample = (sample + 1.f) * 0.5f;
    5156:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	noiseOuts[0][string] = sample * filterSend *  enabled;
    515a:	4b16      	ldr	r3, [pc, #88]	; (51b4 <noise_tick+0xb4>)
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    515c:	ee37 8ac8 	vsub.f32	s16, s15, s16
	amp = amp < 0.f ? 0.f : amp;
    5160:	fec8 8a86 	vmaxnm.f32	s17, s17, s12
	sample = sample * amp;
    5164:	ee28 0a80 	vmul.f32	s0, s17, s0
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    5168:	4a13      	ldr	r2, [pc, #76]	; (51b8 <noise_tick+0xb8>)
	noiseOuts[0][string] = sample * filterSend *  enabled;
    516a:	441d      	add	r5, r3
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    516c:	ee28 8a09 	vmul.f32	s16, s16, s18
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    5170:	eb02 0284 	add.w	r2, r2, r4, lsl #2
	float normSample = (sample + 1.f) * 0.5f;
    5174:	ee70 7a27 	vadd.f32	s15, s0, s15
	noiseOuts[0][string] = sample * filterSend *  enabled;
    5178:	ee27 7a00 	vmul.f32	s14, s14, s0
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    517c:	ee28 0a00 	vmul.f32	s0, s16, s0
	float normSample = (sample + 1.f) * 0.5f;
    5180:	ee67 7aa6 	vmul.f32	s15, s15, s13
	noiseOuts[0][string] = sample * filterSend *  enabled;
    5184:	ed85 7a00 	vstr	s14, [r5]
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    5188:	ed85 0a02 	vstr	s0, [r5, #8]
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    518c:	edc2 7a06 	vstr	s15, [r2, #24]
}
    5190:	ecbd 8b04 	vpop	{d8-d9}
    5194:	bd38      	pop	{r3, r4, r5, pc}
    5196:	bf00      	nop
    5198:	20019ad0 	.word	0x20019ad0
    519c:	20005cc4 	.word	0x20005cc4
    51a0:	2001ac14 	.word	0x2001ac14
    51a4:	200056d8 	.word	0x200056d8
    51a8:	200056e0 	.word	0x200056e0
    51ac:	200056b4 	.word	0x200056b4
    51b0:	00000000 	.word	0x00000000
    51b4:	200056c8 	.word	0x200056c8
    51b8:	20014818 	.word	0x20014818
    51bc:	f3af 8000 	nop.w

000051c0 <audioTickSynth>:
{
    51c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tempCountTick = DWT->CYCCNT;
    51c4:	4cbe      	ldr	r4, [pc, #760]	; (54c0 <audioTickSynth+0x300>)
    51c6:	4dbf      	ldr	r5, [pc, #764]	; (54c4 <audioTickSynth+0x304>)
    51c8:	f8df a37c 	ldr.w	sl, [pc, #892]	; 5548 <audioTickSynth+0x388>
    51cc:	f8df b37c 	ldr.w	fp, [pc, #892]	; 554c <audioTickSynth+0x38c>
    51d0:	f10a 0830 	add.w	r8, sl, #48	; 0x30
    51d4:	f8df 9378 	ldr.w	r9, [pc, #888]	; 5550 <audioTickSynth+0x390>
{
    51d8:	ed2d 8b06 	vpush	{d8-d10}
    51dc:	b091      	sub	sp, #68	; 0x44
    51de:	af00      	add	r7, sp, #0
	uint32_t tempCountTick = DWT->CYCCNT;
    51e0:	6863      	ldr	r3, [r4, #4]
    51e2:	60bb      	str	r3, [r7, #8]
	uint32_t tempCountMap = DWT->CYCCNT;
    51e4:	6866      	ldr	r6, [r4, #4]
	tickMappings();
    51e6:	f7fe f8eb 	bl	33c0 <tickMappings>
	timeMap = DWT->CYCCNT - tempCountMap;
    51ea:	6863      	ldr	r3, [r4, #4]
    51ec:	4ab6      	ldr	r2, [pc, #728]	; (54c8 <audioTickSynth+0x308>)
    51ee:	1b9b      	subs	r3, r3, r6
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    51f0:	48b6      	ldr	r0, [pc, #728]	; (54cc <audioTickSynth+0x30c>)
    51f2:	462e      	mov	r6, r5
	timeMap = DWT->CYCCNT - tempCountMap;
    51f4:	6013      	str	r3, [r2, #0]
	uint32_t tempSmoothing = DWT->CYCCNT;
    51f6:	6863      	ldr	r3, [r4, #4]
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    51f8:	462c      	mov	r4, r5
	uint32_t tempSmoothing = DWT->CYCCNT;
    51fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    51fc:	f003 ff50 	bl	90a0 <tExpSmooth_tick>
    5200:	eef0 8a40 	vmov.f32	s17, s0
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    5204:	4658      	mov	r0, fp
    5206:	f003 ff4b 	bl	90a0 <tExpSmooth_tick>
		for (int v = 0; v < numStringsThisBoard; v++)
    520a:	f899 3000 	ldrb.w	r3, [r9]
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    520e:	ecaa 0a01 	vstmia	sl!, {s0}
		for (int v = 0; v < numStringsThisBoard; v++)
    5212:	b12b      	cbz	r3, 5220 <audioTickSynth+0x60>
    5214:	2b01      	cmp	r3, #1
			sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    5216:	ed84 0a08 	vstr	s0, [r4, #32]
		for (int v = 0; v < numStringsThisBoard; v++)
    521a:	d001      	beq.n	5220 <audioTickSynth+0x60>
			sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    521c:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
	for (int i = 0; i < 12; i++)
    5220:	45c2      	cmp	sl, r8
    5222:	f10b 0b04 	add.w	fp, fp, #4
    5226:	f104 0408 	add.w	r4, r4, #8
    522a:	d1eb      	bne.n	5204 <audioTickSynth+0x44>
    522c:	f8df 8324 	ldr.w	r8, [pc, #804]	; 5554 <audioTickSynth+0x394>
    5230:	f8df a324 	ldr.w	sl, [pc, #804]	; 5558 <audioTickSynth+0x398>
    5234:	f108 0428 	add.w	r4, r8, #40	; 0x28
		pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    5238:	4650      	mov	r0, sl
    523a:	f003 ff31 	bl	90a0 <tExpSmooth_tick>
		for (int v = 0; v < numStringsThisBoard; v++)
    523e:	f899 3000 	ldrb.w	r3, [r9]
		pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    5242:	eca8 0a01 	vstmia	r8!, {s0}
		for (int v = 0; v < numStringsThisBoard; v++)
    5246:	b12b      	cbz	r3, 5254 <audioTickSynth+0x94>
    5248:	2b01      	cmp	r3, #1
			sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    524a:	ed85 0a38 	vstr	s0, [r5, #224]	; 0xe0
		for (int v = 0; v < numStringsThisBoard; v++)
    524e:	d001      	beq.n	5254 <audioTickSynth+0x94>
			sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    5250:	ed85 0a39 	vstr	s0, [r5, #228]	; 0xe4
	for (int i = 0; i < 10; i++)
    5254:	45a0      	cmp	r8, r4
    5256:	f10a 0a04 	add.w	sl, sl, #4
    525a:	f105 0508 	add.w	r5, r5, #8
    525e:	d1eb      	bne.n	5238 <audioTickSynth+0x78>
	for (int v = 0; v < numStringsThisBoard; v++)
    5260:	2b00      	cmp	r3, #0
    5262:	f000 828d 	beq.w	5780 <audioTickSynth+0x5c0>
		sourceValues[EXPRESSION_PEDAL_SOURCE_OFFSET][v] = volumePedal;
    5266:	4a9a      	ldr	r2, [pc, #616]	; (54d0 <audioTickSynth+0x310>)
	for (int v = 0; v < numStringsThisBoard; v++)
    5268:	2b01      	cmp	r3, #1
		sourceValues[EXPRESSION_PEDAL_SOURCE_OFFSET][v] = volumePedal;
    526a:	6812      	ldr	r2, [r2, #0]
    526c:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
	for (int v = 0; v < numStringsThisBoard; v++)
    5270:	d001      	beq.n	5276 <audioTickSynth+0xb6>
		sourceValues[EXPRESSION_PEDAL_SOURCE_OFFSET][v] = volumePedal;
    5272:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	float note[numStringsThisBoard];
    5276:	009b      	lsls	r3, r3, #2
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    5278:	f8df b244 	ldr.w	fp, [pc, #580]	; 54c0 <audioTickSynth+0x300>
    527c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
	float note[numStringsThisBoard];
    527e:	3307      	adds	r3, #7
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    5280:	f8db 2004 	ldr.w	r2, [fp, #4]
	uint32_t tempPerStringTick = DWT->CYCCNT;
    5284:	ed9f 9a93 	vldr	s18, [pc, #588]	; 54d4 <audioTickSynth+0x314>
	float note[numStringsThisBoard];
    5288:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    528c:	1a52      	subs	r2, r2, r1
		float sample = 0.0f;
    528e:	eef0 9a49 	vmov.f32	s19, s18
    5292:	ed9f aa91 	vldr	s20, [pc, #580]	; 54d8 <audioTickSynth+0x318>
	float note[numStringsThisBoard];
    5296:	ebad 0d03 	sub.w	sp, sp, r3
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    529a:	4b90      	ldr	r3, [pc, #576]	; (54dc <audioTickSynth+0x31c>)
    529c:	601a      	str	r2, [r3, #0]
	uint32_t tempPerStringTick = DWT->CYCCNT;
    529e:	4b90      	ldr	r3, [pc, #576]	; (54e0 <audioTickSynth+0x320>)
    52a0:	4a90      	ldr	r2, [pc, #576]	; (54e4 <audioTickSynth+0x324>)
    52a2:	62bb      	str	r3, [r7, #40]	; 0x28
    52a4:	f8db 3004 	ldr.w	r3, [fp, #4]
    52a8:	623a      	str	r2, [r7, #32]
    52aa:	4a8f      	ldr	r2, [pc, #572]	; (54e8 <audioTickSynth+0x328>)
    52ac:	607b      	str	r3, [r7, #4]
    52ae:	2300      	movs	r3, #0
    52b0:	61ba      	str	r2, [r7, #24]
    52b2:	4a8e      	ldr	r2, [pc, #568]	; (54ec <audioTickSynth+0x32c>)
    52b4:	469a      	mov	sl, r3
    52b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    52b8:	627a      	str	r2, [r7, #36]	; 0x24
    52ba:	4a8d      	ldr	r2, [pc, #564]	; (54f0 <audioTickSynth+0x330>)
    52bc:	f8c7 d014 	str.w	sp, [r7, #20]
    52c0:	61fa      	str	r2, [r7, #28]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    52c2:	4b8c      	ldr	r3, [pc, #560]	; (54f4 <audioTickSynth+0x334>)
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    52c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    52c6:	edd3 7a00 	vldr	s15, [r3]
    52ca:	4b8b      	ldr	r3, [pc, #556]	; (54f8 <audioTickSynth+0x338>)
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    52cc:	4a8b      	ldr	r2, [pc, #556]	; (54fc <audioTickSynth+0x33c>)
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    52ce:	ed93 7a00 	vldr	s14, [r3]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    52d2:	4b8b      	ldr	r3, [pc, #556]	; (5500 <audioTickSynth+0x340>)
    52d4:	440a      	add	r2, r1
		float sample = 0.0f;
    52d6:	edc7 9a0d 	vstr	s19, [r7, #52]	; 0x34
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    52da:	eb03 038a 	add.w	r3, r3, sl, lsl #2
    52de:	edd2 6a00 	vldr	s13, [r2]
		uint32_t tempCountGettingNote = DWT->CYCCNT;
    52e2:	f8db 2004 	ldr.w	r2, [fp, #4]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    52e6:	ed93 8a00 	vldr	s16, [r3]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    52ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    52ec:	ee38 8a26 	vadd.f32	s16, s16, s13
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    52f0:	697b      	ldr	r3, [r7, #20]
    52f2:	460d      	mov	r5, r1
    52f4:	ee78 7a67 	vsub.f32	s15, s16, s15
    52f8:	fe88 8a4a 	vminnm.f32	s16, s16, s20
    52fc:	fe88 8a29 	vmaxnm.f32	s16, s16, s19
    5300:	eca3 8a01 	vstmia	r3!, {s16}
    5304:	617b      	str	r3, [r7, #20]
    5306:	ee67 7a87 	vmul.f32	s15, s15, s14
    530a:	edc1 7a00 	vstr	s15, [r1]
		timeGettingNote = DWT->CYCCNT - tempCountGettingNote;
    530e:	f8db 3004 	ldr.w	r3, [fp, #4]
    5312:	1a9b      	subs	r3, r3, r2
    5314:	4a7b      	ldr	r2, [pc, #492]	; (5504 <audioTickSynth+0x344>)
    5316:	6013      	str	r3, [r2, #0]
    5318:	1d0a      	adds	r2, r1, #4
		if (envOn[v])
    531a:	4b7b      	ldr	r3, [pc, #492]	; (5508 <audioTickSynth+0x348>)
    531c:	62ba      	str	r2, [r7, #40]	; 0x28
    531e:	781b      	ldrb	r3, [r3, #0]
		uint32_t tempCountEnv = DWT->CYCCNT;
    5320:	f8db 4004 	ldr.w	r4, [fp, #4]
		if (envOn[v])
    5324:	2b00      	cmp	r3, #0
    5326:	f040 8206 	bne.w	5736 <audioTickSynth+0x576>
    532a:	4b77      	ldr	r3, [pc, #476]	; (5508 <audioTickSynth+0x348>)
    532c:	785b      	ldrb	r3, [r3, #1]
    532e:	2b00      	cmp	r3, #0
    5330:	f040 81f8 	bne.w	5724 <audioTickSynth+0x564>
    5334:	4b74      	ldr	r3, [pc, #464]	; (5508 <audioTickSynth+0x348>)
    5336:	789b      	ldrb	r3, [r3, #2]
    5338:	2b00      	cmp	r3, #0
    533a:	f040 81ea 	bne.w	5712 <audioTickSynth+0x552>
    533e:	4b72      	ldr	r3, [pc, #456]	; (5508 <audioTickSynth+0x348>)
    5340:	78db      	ldrb	r3, [r3, #3]
    5342:	2b00      	cmp	r3, #0
    5344:	f040 81dc 	bne.w	5700 <audioTickSynth+0x540>
		timeEnv = DWT->CYCCNT - tempCountEnv;
    5348:	f8db 3004 	ldr.w	r3, [fp, #4]
    534c:	3d88      	subs	r5, #136	; 0x88
    534e:	4a6f      	ldr	r2, [pc, #444]	; (550c <audioTickSynth+0x34c>)
    5350:	1b1b      	subs	r3, r3, r4
    5352:	f8df 8208 	ldr.w	r8, [pc, #520]	; 555c <audioTickSynth+0x39c>
		uint32_t tempCountLFO = DWT->CYCCNT;
    5356:	4c6e      	ldr	r4, [pc, #440]	; (5510 <audioTickSynth+0x350>)
		timeEnv = DWT->CYCCNT - tempCountEnv;
    5358:	6013      	str	r3, [r2, #0]
		uint32_t tempCountLFO = DWT->CYCCNT;
    535a:	f8db 6004 	ldr.w	r6, [fp, #4]
			float sample = 0.0f;
    535e:	4b6c      	ldr	r3, [pc, #432]	; (5510 <audioTickSynth+0x350>)
			lfoShapeTick[i](&sample,i, string);
    5360:	4652      	mov	r2, sl
    5362:	f107 0038 	add.w	r0, r7, #56	; 0x38
    5366:	1ae1      	subs	r1, r4, r3
		if (lfoOn[i])
    5368:	f814 3b01 	ldrb.w	r3, [r4], #1
    536c:	b13b      	cbz	r3, 537e <audioTickSynth+0x1be>
			lfoShapeTick[i](&sample,i, string);
    536e:	f8d8 3000 	ldr.w	r3, [r8]
			float sample = 0.0f;
    5372:	edc7 9a0e 	vstr	s19, [r7, #56]	; 0x38
			lfoShapeTick[i](&sample,i, string);
    5376:	4798      	blx	r3
			sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    5378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    537a:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
	for (int i = 0; i < NUM_LFOS; i++)
    537e:	4b65      	ldr	r3, [pc, #404]	; (5514 <audioTickSynth+0x354>)
    5380:	f108 0804 	add.w	r8, r8, #4
    5384:	3508      	adds	r5, #8
    5386:	429c      	cmp	r4, r3
    5388:	d1e9      	bne.n	535e <audioTickSynth+0x19e>
		timeLFO = DWT->CYCCNT - tempCountLFO;
    538a:	f8db 3004 	ldr.w	r3, [fp, #4]
		oscillator_tick(note[v], v);
    538e:	eeb0 0a48 	vmov.f32	s0, s16
		timeLFO = DWT->CYCCNT - tempCountLFO;
    5392:	4a61      	ldr	r2, [pc, #388]	; (5518 <audioTickSynth+0x358>)
		oscillator_tick(note[v], v);
    5394:	4650      	mov	r0, sl
		timeLFO = DWT->CYCCNT - tempCountLFO;
    5396:	1b9b      	subs	r3, r3, r6
    5398:	6013      	str	r3, [r2, #0]
		uint32_t tempCountOsc = DWT->CYCCNT;
    539a:	f8db 4004 	ldr.w	r4, [fp, #4]
		oscillator_tick(note[v], v);
    539e:	f7fc fd6f 	bl	1e80 <oscillator_tick>
		timeOsc = DWT->CYCCNT - tempCountOsc;
    53a2:	f8db 3004 	ldr.w	r3, [fp, #4]
    53a6:	4a5d      	ldr	r2, [pc, #372]	; (551c <audioTickSynth+0x35c>)
    53a8:	1b1b      	subs	r3, r3, r4
    53aa:	6013      	str	r3, [r2, #0]
		if (noiseOn)
    53ac:	4b5c      	ldr	r3, [pc, #368]	; (5520 <audioTickSynth+0x360>)
		uint32_t tempCountNoise = DWT->CYCCNT;
    53ae:	f8db 4004 	ldr.w	r4, [fp, #4]
		if (noiseOn)
    53b2:	781b      	ldrb	r3, [r3, #0]
    53b4:	2b00      	cmp	r3, #0
    53b6:	f040 819f 	bne.w	56f8 <audioTickSynth+0x538>
		timeNoise = DWT->CYCCNT - tempCountNoise;
    53ba:	f8db 3004 	ldr.w	r3, [fp, #4]
    53be:	4a59      	ldr	r2, [pc, #356]	; (5524 <audioTickSynth+0x364>)
    53c0:	1b1b      	subs	r3, r3, r4
    53c2:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < oscToTick; i++)
    53c4:	4b58      	ldr	r3, [pc, #352]	; (5528 <audioTickSynth+0x368>)
    53c6:	781b      	ldrb	r3, [r3, #0]
    53c8:	2b00      	cmp	r3, #0
    53ca:	f000 81c9 	beq.w	5760 <audioTickSynth+0x5a0>
			filterSamps[0] += oscOuts[0][i][v];
    53ce:	69fa      	ldr	r2, [r7, #28]
		for (int i = 0; i < oscToTick; i++)
    53d0:	2b01      	cmp	r3, #1
			filterSamps[0] += oscOuts[0][i][v];
    53d2:	ed92 6a00 	vldr	s12, [r2]
			filterSamps[1] += oscOuts[1][i][v];
    53d6:	edd2 7a06 	vldr	s15, [r2, #24]
		for (int i = 0; i < oscToTick; i++)
    53da:	d011      	beq.n	5400 <audioTickSynth+0x240>
			filterSamps[0] += oscOuts[0][i][v];
    53dc:	edd2 6a02 	vldr	s13, [r2, #8]
		for (int i = 0; i < oscToTick; i++)
    53e0:	2b02      	cmp	r3, #2
			filterSamps[1] += oscOuts[1][i][v];
    53e2:	ed92 7a08 	vldr	s14, [r2, #32]
			filterSamps[0] += oscOuts[0][i][v];
    53e6:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
    53ea:	ee77 7a87 	vadd.f32	s15, s15, s14
		for (int i = 0; i < oscToTick; i++)
    53ee:	d007      	beq.n	5400 <audioTickSynth+0x240>
			filterSamps[0] += oscOuts[0][i][v];
    53f0:	edd2 6a04 	vldr	s13, [r2, #16]
			filterSamps[1] += oscOuts[1][i][v];
    53f4:	ed92 7a0a 	vldr	s14, [r2, #40]	; 0x28
			filterSamps[0] += oscOuts[0][i][v];
    53f8:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
    53fc:	ee77 7a87 	vadd.f32	s15, s15, s14
		filterSamps[0] += noiseOuts[0][v];
    5400:	69bb      	ldr	r3, [r7, #24]
		sample = filter_tick(&filterSamps[0], note[v], v);
    5402:	eeb0 0a48 	vmov.f32	s0, s16
    5406:	4651      	mov	r1, sl
    5408:	f107 0038 	add.w	r0, r7, #56	; 0x38
		filterSamps[0] += noiseOuts[0][v];
    540c:	ecf3 6a01 	vldmia	r3!, {s13}
		filterSamps[1] += noiseOuts[1][v];
    5410:	ed93 7a01 	vldr	s14, [r3, #4]
		filterSamps[0] += noiseOuts[0][v];
    5414:	ee76 6a86 	vadd.f32	s13, s13, s12
    5418:	61bb      	str	r3, [r7, #24]
		filterSamps[1] += noiseOuts[1][v];
    541a:	ee77 7a27 	vadd.f32	s15, s14, s15
		filterSamps[0] += noiseOuts[0][v];
    541e:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
		filterSamps[1] += noiseOuts[1][v];
    5422:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		uint32_t tempCountFilt = DWT->CYCCNT;
    5426:	f8db 4004 	ldr.w	r4, [fp, #4]
		sample = filter_tick(&filterSamps[0], note[v], v);
    542a:	f7fd f899 	bl	2560 <filter_tick>
    542e:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    5432:	eeb0 8a40 	vmov.f32	s16, s0
		timeFilt = DWT->CYCCNT - tempCountFilt;
    5436:	f8db 3004 	ldr.w	r3, [fp, #4]
    543a:	4a3c      	ldr	r2, [pc, #240]	; (552c <audioTickSynth+0x36c>)
    543c:	1b1b      	subs	r3, r3, r4
    543e:	6013      	str	r3, [r2, #0]
		if (fxPre)
    5440:	4b3b      	ldr	r3, [pc, #236]	; (5530 <audioTickSynth+0x370>)
    5442:	781b      	ldrb	r3, [r3, #0]
    5444:	b133      	cbz	r3, 5454 <audioTickSynth+0x294>
			sample *= amplitude[v];
    5446:	6a3b      	ldr	r3, [r7, #32]
    5448:	edd3 7a00 	vldr	s15, [r3]
    544c:	ee20 8a27 	vmul.f32	s16, s0, s15
    5450:	ed87 8a0d 	vstr	s16, [r7, #52]	; 0x34
		if (overSampled)
    5454:	4b37      	ldr	r3, [pc, #220]	; (5534 <audioTickSynth+0x374>)
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    5456:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
		if (overSampled)
    545a:	681c      	ldr	r4, [r3, #0]
		uint32_t tempCountOS = DWT->CYCCNT;
    545c:	f8db 3004 	ldr.w	r3, [fp, #4]
    5460:	613b      	str	r3, [r7, #16]
		if (overSampled)
    5462:	2c00      	cmp	r4, #0
    5464:	f040 80fe 	bne.w	5664 <audioTickSynth+0x4a4>
    5468:	4a33      	ldr	r2, [pc, #204]	; (5538 <audioTickSynth+0x378>)
    546a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    546c:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 5560 <audioTickSynth+0x3a0>
    5470:	18d6      	adds	r6, r2, r3
    5472:	4a32      	ldr	r2, [pc, #200]	; (553c <audioTickSynth+0x37c>)
    5474:	18d5      	adds	r5, r2, r3
				if (effectsActive[i])
    5476:	f818 3b01 	ldrb.w	r3, [r8], #1
					sample = effectTick[i](sample, i, v); //run the effect
    547a:	eeb0 0a48 	vmov.f32	s0, s16
    547e:	4620      	mov	r0, r4
    5480:	4651      	mov	r1, sl
				if (effectsActive[i])
    5482:	b18b      	cbz	r3, 54a8 <audioTickSynth+0x2e8>
					sample = effectTick[i](sample, i, v); //run the effect
    5484:	4b2e      	ldr	r3, [pc, #184]	; (5540 <audioTickSynth+0x380>)
    5486:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    548a:	4798      	blx	r3
					sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
    548c:	edd6 7a00 	vldr	s15, [r6]
					sample *= fxPostGain[i][v];
    5490:	ed95 7a00 	vldr	s14, [r5]
					sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
    5494:	ee7a 6ae7 	vsub.f32	s13, s21, s15
    5498:	ee60 7a27 	vmul.f32	s15, s0, s15
    549c:	eee6 7a88 	vfma.f32	s15, s13, s16
					sample *= fxPostGain[i][v];
    54a0:	ee27 8a87 	vmul.f32	s16, s15, s14
    54a4:	ed87 8a0d 	vstr	s16, [r7, #52]	; 0x34
			for (int i = 0; i < NUM_EFFECT; i++)
    54a8:	3401      	adds	r4, #1
    54aa:	3608      	adds	r6, #8
    54ac:	3508      	adds	r5, #8
    54ae:	2c04      	cmp	r4, #4
    54b0:	d1e1      	bne.n	5476 <audioTickSynth+0x2b6>
		timeOS = DWT->CYCCNT - tempCountOS;
    54b2:	f8db 3004 	ldr.w	r3, [fp, #4]
    54b6:	693a      	ldr	r2, [r7, #16]
    54b8:	1a9b      	subs	r3, r3, r2
    54ba:	4a22      	ldr	r2, [pc, #136]	; (5544 <audioTickSynth+0x384>)
    54bc:	6013      	str	r3, [r2, #0]
    54be:	e051      	b.n	5564 <audioTickSynth+0x3a4>
    54c0:	e0001000 	.word	0xe0001000
    54c4:	20014818 	.word	0x20014818
    54c8:	200149f4 	.word	0x200149f4
    54cc:	20014a74 	.word	0x20014a74
    54d0:	20014a6c 	.word	0x20014a6c
    54d4:	00000000 	.word	0x00000000
    54d8:	42fe0000 	.word	0x42fe0000
    54dc:	20014a08 	.word	0x20014a08
    54e0:	200148a0 	.word	0x200148a0
    54e4:	20000a6c 	.word	0x20000a6c
    54e8:	200056c8 	.word	0x200056c8
    54ec:	200051d8 	.word	0x200051d8
    54f0:	20005724 	.word	0x20005724
    54f4:	20019ab8 	.word	0x20019ab8
    54f8:	20019ab4 	.word	0x20019ab4
    54fc:	20014998 	.word	0x20014998
    5500:	20014990 	.word	0x20014990
    5504:	200149ec 	.word	0x200149ec
    5508:	200051d4 	.word	0x200051d4
    550c:	200149e0 	.word	0x200149e0
    5510:	20005460 	.word	0x20005460
    5514:	20005464 	.word	0x20005464
    5518:	200149f0 	.word	0x200149f0
    551c:	20014a00 	.word	0x20014a00
    5520:	200056c4 	.word	0x200056c4
    5524:	200149f8 	.word	0x200149f8
    5528:	2000002c 	.word	0x2000002c
    552c:	200149e4 	.word	0x200149e4
    5530:	20016e41 	.word	0x20016e41
    5534:	20000030 	.word	0x20000030
    5538:	2000527c 	.word	0x2000527c
    553c:	2000529c 	.word	0x2000529c
    5540:	200051c4 	.word	0x200051c4
    5544:	200149fc 	.word	0x200149fc
    5548:	200053ac 	.word	0x200053ac
    554c:	200053dc 	.word	0x200053dc
    5550:	20000015 	.word	0x20000015
    5554:	200057fc 	.word	0x200057fc
    5558:	20005824 	.word	0x20005824
    555c:	200054c4 	.word	0x200054c4
    5560:	20014d14 	.word	0x20014d14
		if (!fxPre)
    5564:	4b8c      	ldr	r3, [pc, #560]	; (5798 <audioTickSynth+0x5d8>)
    5566:	781b      	ldrb	r3, [r3, #0]
    5568:	b933      	cbnz	r3, 5578 <audioTickSynth+0x3b8>
			sample *= amplitude[v];
    556a:	6a3b      	ldr	r3, [r7, #32]
    556c:	edd3 7a00 	vldr	s15, [r3]
    5570:	ee28 8a27 	vmul.f32	s16, s16, s15
    5574:	ed87 8a0d 	vstr	s16, [r7, #52]	; 0x34
	for (int v = 0; v < numStringsThisBoard; v++)
    5578:	6a3b      	ldr	r3, [r7, #32]
		sample = tSVF_tick(&finalLowpass[v], sample) * masterVolFromBrainForSynth;
    557a:	eeb0 0a48 	vmov.f32	s0, s16
    557e:	6afc      	ldr	r4, [r7, #44]	; 0x2c
	for (int v = 0; v < numStringsThisBoard; v++)
    5580:	f10a 0a01 	add.w	sl, sl, #1
    5584:	3304      	adds	r3, #4
    5586:	623b      	str	r3, [r7, #32]
    5588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    558a:	3304      	adds	r3, #4
    558c:	627b      	str	r3, [r7, #36]	; 0x24
    558e:	69fb      	ldr	r3, [r7, #28]
    5590:	3304      	adds	r3, #4
    5592:	61fb      	str	r3, [r7, #28]
		sample = tSVF_tick(&finalLowpass[v], sample) * masterVolFromBrainForSynth;
    5594:	4b81      	ldr	r3, [pc, #516]	; (579c <audioTickSynth+0x5dc>)
    5596:	1918      	adds	r0, r3, r4
    5598:	f005 fd5a 	bl	b050 <__tSVF_tick_veneer>
		masterSample += sample;// * finalMaster[v];
    559c:	4b80      	ldr	r3, [pc, #512]	; (57a0 <audioTickSynth+0x5e0>)
    559e:	edd3 7a00 	vldr	s15, [r3]
	for (int v = 0; v < numStringsThisBoard; v++)
    55a2:	1d23      	adds	r3, r4, #4
    55a4:	62fb      	str	r3, [r7, #44]	; 0x2c
		masterSample += sample;// * finalMaster[v];
    55a6:	eea0 9a27 	vfma.f32	s18, s0, s15
	for (int v = 0; v < numStringsThisBoard; v++)
    55aa:	f899 3000 	ldrb.w	r3, [r9]
    55ae:	4553      	cmp	r3, sl
    55b0:	f73f ae87 	bgt.w	52c2 <audioTickSynth+0x102>
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    55b4:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 57a4 <audioTickSynth+0x5e4>
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    55b8:	4b7b      	ldr	r3, [pc, #492]	; (57a8 <audioTickSynth+0x5e8>)
    55ba:	6879      	ldr	r1, [r7, #4]
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    55bc:	eef0 0a40 	vmov.f32	s1, s0
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    55c0:	685b      	ldr	r3, [r3, #4]
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    55c2:	eddf 7a7a 	vldr	s15, [pc, #488]	; 57ac <audioTickSynth+0x5ec>
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    55c6:	1a5b      	subs	r3, r3, r1
    55c8:	4a79      	ldr	r2, [pc, #484]	; (57b0 <audioTickSynth+0x5f0>)
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    55ca:	eee8 0aa7 	vfma.f32	s1, s17, s15
    55ce:	ed9f 1a79 	vldr	s2, [pc, #484]	; 57b4 <audioTickSynth+0x5f4>
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    55d2:	6013      	str	r3, [r2, #0]
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    55d4:	f004 f964 	bl	98a0 <LEAF_clip>
	int volIdxInt = (int) volIdx;
    55d8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	if (pedalControlsMaster)
    55dc:	4a76      	ldr	r2, [pc, #472]	; (57b8 <audioTickSynth+0x5f8>)
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    55de:	4b77      	ldr	r3, [pc, #476]	; (57bc <audioTickSynth+0x5fc>)
	if (pedalControlsMaster)
    55e0:	7810      	ldrb	r0, [r2, #0]
	int volIdxInt = (int) volIdx;
    55e2:	ee17 2a90 	vmov	r2, s15
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    55e6:	1c51      	adds	r1, r2, #1
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    55e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    55ec:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    55f0:	ed94 6a00 	vldr	s12, [r4]
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    55f4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    55f8:	edd3 6a00 	vldr	s13, [r3]
	if (pedalControlsMaster)
    55fc:	b178      	cbz	r0, 561e <audioTickSynth+0x45e>
	float omAlpha = 1.0f - alpha;
    55fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	float alpha = volIdx-volIdxInt;
    5602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	float omAlpha = 1.0f - alpha;
    5606:	ee37 7a40 	vsub.f32	s14, s14, s0
	float alpha = volIdx-volIdxInt;
    560a:	ee30 0a67 	vsub.f32	s0, s0, s15
	float omAlpha = 1.0f - alpha;
    560e:	ee77 7a27 	vadd.f32	s15, s14, s15
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    5612:	ee67 7a86 	vmul.f32	s15, s15, s12
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    5616:	eee6 7a80 	vfma.f32	s15, s13, s0
		masterSample *= outVol;
    561a:	ee29 9a27 	vmul.f32	s18, s18, s15
	if (masterSample  > .999999f)
    561e:	eddf 7a68 	vldr	s15, [pc, #416]	; 57c0 <audioTickSynth+0x600>
    5622:	eeb4 9ae7 	vcmpe.f32	s18, s15
    5626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    562a:	f340 808b 	ble.w	5744 <audioTickSynth+0x584>
		masterSample  = .999999f;
    562e:	eeb0 9a67 	vmov.f32	s18, s15
		sampleClippedCountdown = 65535;
    5632:	4b64      	ldr	r3, [pc, #400]	; (57c4 <audioTickSynth+0x604>)
    5634:	f64f 72ff 	movw	r2, #65535	; 0xffff
    5638:	801a      	strh	r2, [r3, #0]
	return masterSample * audioMasterLevel * 0.98f;
    563a:	4963      	ldr	r1, [pc, #396]	; (57c8 <audioTickSynth+0x608>)
	timeTick = DWT->CYCCNT - tempCountTick;
    563c:	4b5a      	ldr	r3, [pc, #360]	; (57a8 <audioTickSynth+0x5e8>)
	return masterSample * audioMasterLevel * 0.98f;
    563e:	eddf 7a63 	vldr	s15, [pc, #396]	; 57cc <audioTickSynth+0x60c>
	timeTick = DWT->CYCCNT - tempCountTick;
    5642:	685b      	ldr	r3, [r3, #4]
	return masterSample * audioMasterLevel * 0.98f;
    5644:	ed91 0a00 	vldr	s0, [r1]
	timeTick = DWT->CYCCNT - tempCountTick;
    5648:	68b9      	ldr	r1, [r7, #8]
}
    564a:	3744      	adds	r7, #68	; 0x44
	return masterSample * audioMasterLevel * 0.98f;
    564c:	ee20 0a27 	vmul.f32	s0, s0, s15
	timeTick = DWT->CYCCNT - tempCountTick;
    5650:	4a5f      	ldr	r2, [pc, #380]	; (57d0 <audioTickSynth+0x610>)
    5652:	1a5b      	subs	r3, r3, r1
	return masterSample * audioMasterLevel * 0.98f;
    5654:	ee20 0a09 	vmul.f32	s0, s0, s18
	timeTick = DWT->CYCCNT - tempCountTick;
    5658:	6013      	str	r3, [r2, #0]
}
    565a:	46bd      	mov	sp, r7
    565c:	ecbd 8b06 	vpop	{d8-d10}
    5660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			arm_fir_interpolate_f32(&osI[v], &sample, (float*)&oversamplerArray, 1);
    5664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5666:	f107 0134 	add.w	r1, r7, #52	; 0x34
    566a:	485a      	ldr	r0, [pc, #360]	; (57d4 <audioTickSynth+0x614>)
			for (int i = 0; i < 4; i++)
    566c:	2400      	movs	r4, #0
    566e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    5672:	f8df 818c 	ldr.w	r8, [pc, #396]	; 5800 <audioTickSynth+0x640>
			arm_fir_interpolate_f32(&osI[v], &sample, (float*)&oversamplerArray, 1);
    5676:	4410      	add	r0, r2
    5678:	603a      	str	r2, [r7, #0]
    567a:	4a57      	ldr	r2, [pc, #348]	; (57d8 <audioTickSynth+0x618>)
    567c:	18d6      	adds	r6, r2, r3
    567e:	4a57      	ldr	r2, [pc, #348]	; (57dc <audioTickSynth+0x61c>)
    5680:	18d5      	adds	r5, r2, r3
    5682:	2301      	movs	r3, #1
    5684:	4a56      	ldr	r2, [pc, #344]	; (57e0 <audioTickSynth+0x620>)
    5686:	f005 fcc3 	bl	b010 <__arm_fir_interpolate_f32_veneer>
    568a:	4651      	mov	r1, sl
    568c:	46b2      	mov	sl, r6
    568e:	462e      	mov	r6, r5
				if (effectsActive[i])
    5690:	f818 3b01 	ldrb.w	r3, [r8], #1
    5694:	b993      	cbnz	r3, 56bc <audioTickSynth+0x4fc>
			for (int i = 0; i < 4; i++)
    5696:	3401      	adds	r4, #1
    5698:	f10a 0a08 	add.w	sl, sl, #8
    569c:	3608      	adds	r6, #8
    569e:	2c04      	cmp	r4, #4
    56a0:	d1f6      	bne.n	5690 <audioTickSynth+0x4d0>
			arm_fir_decimate_f32(&osD[v], (float*)&oversamplerArray, &sample, 2);
    56a2:	683b      	ldr	r3, [r7, #0]
    56a4:	468a      	mov	sl, r1
    56a6:	484f      	ldr	r0, [pc, #316]	; (57e4 <audioTickSynth+0x624>)
    56a8:	f107 0234 	add.w	r2, r7, #52	; 0x34
    56ac:	494c      	ldr	r1, [pc, #304]	; (57e0 <audioTickSynth+0x620>)
    56ae:	4418      	add	r0, r3
    56b0:	2302      	movs	r3, #2
    56b2:	f005 fd79 	bl	b1a8 <__arm_fir_decimate_f32_veneer>
			sample *= amplitude[v];
    56b6:	ed97 8a0d 	vldr	s16, [r7, #52]	; 0x34
    56ba:	e6fa      	b.n	54b2 <audioTickSynth+0x2f2>
    56bc:	4d48      	ldr	r5, [pc, #288]	; (57e0 <audioTickSynth+0x620>)
						float dry = oversamplerArray[j]; //store the dry value to mix later
    56be:	ed95 8a00 	vldr	s16, [r5]
						oversamplerArray[j] = effectTick[i](oversamplerArray[j], i, v); //run the effect
    56c2:	4620      	mov	r0, r4
    56c4:	4b48      	ldr	r3, [pc, #288]	; (57e8 <audioTickSynth+0x628>)
    56c6:	eeb0 0a48 	vmov.f32	s0, s16
    56ca:	60f9      	str	r1, [r7, #12]
    56cc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    56d0:	4798      	blx	r3
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    56d2:	edda 7a00 	vldr	s15, [sl]
						oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
    56d6:	ed96 7a00 	vldr	s14, [r6]
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    56da:	ee20 0a27 	vmul.f32	s0, s0, s15
					for (int j = 0; j < OVERSAMPLE; j++)
    56de:	4b43      	ldr	r3, [pc, #268]	; (57ec <audioTickSynth+0x62c>)
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    56e0:	ee7a 7ae7 	vsub.f32	s15, s21, s15
					for (int j = 0; j < OVERSAMPLE; j++)
    56e4:	68f9      	ldr	r1, [r7, #12]
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    56e6:	eea7 0a88 	vfma.f32	s0, s15, s16
						oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
    56ea:	ee67 7a00 	vmul.f32	s15, s14, s0
    56ee:	ece5 7a01 	vstmia	r5!, {s15}
					for (int j = 0; j < OVERSAMPLE; j++)
    56f2:	42ab      	cmp	r3, r5
    56f4:	d1e3      	bne.n	56be <audioTickSynth+0x4fe>
    56f6:	e7ce      	b.n	5696 <audioTickSynth+0x4d6>
			noise_tick(v);
    56f8:	4650      	mov	r0, sl
    56fa:	f7ff fd01 	bl	5100 <noise_tick>
    56fe:	e65c      	b.n	53ba <audioTickSynth+0x1fa>
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
    5700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5702:	f103 0018 	add.w	r0, r3, #24
    5706:	f003 ff2b 	bl	9560 <tADSRT_tickNoInterp>
    570a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    570c:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
    5710:	e61a      	b.n	5348 <audioTickSynth+0x188>
    5712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5714:	f103 0010 	add.w	r0, r3, #16
    5718:	f003 ff22 	bl	9560 <tADSRT_tickNoInterp>
    571c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    571e:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    5722:	e60c      	b.n	533e <audioTickSynth+0x17e>
    5724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5726:	f103 0008 	add.w	r0, r3, #8
    572a:	f003 ff19 	bl	9560 <tADSRT_tickNoInterp>
    572e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5730:	ed83 0a07 	vstr	s0, [r3, #28]
    5734:	e5fe      	b.n	5334 <audioTickSynth+0x174>
    5736:	6a78      	ldr	r0, [r7, #36]	; 0x24
    5738:	f003 ff12 	bl	9560 <tADSRT_tickNoInterp>
    573c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    573e:	ed83 0a05 	vstr	s0, [r3, #20]
    5742:	e5f2      	b.n	532a <audioTickSynth+0x16a>
	else if (masterSample < -.999999f)
    5744:	eddf 7a2a 	vldr	s15, [pc, #168]	; 57f0 <audioTickSynth+0x630>
    5748:	eeb4 9ae7 	vcmpe.f32	s18, s15
    574c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5750:	d50b      	bpl.n	576a <audioTickSynth+0x5aa>
		sampleClippedCountdown = 65535;
    5752:	4b1c      	ldr	r3, [pc, #112]	; (57c4 <audioTickSynth+0x604>)
    5754:	f64f 72ff 	movw	r2, #65535	; 0xffff
		masterSample = -.9999999f;
    5758:	ed9f 9a26 	vldr	s18, [pc, #152]	; 57f4 <audioTickSynth+0x634>
		sampleClippedCountdown = 65535;
    575c:	801a      	strh	r2, [r3, #0]
    575e:	e76c      	b.n	563a <audioTickSynth+0x47a>
		for (int i = 0; i < oscToTick; i++)
    5760:	eddf 7a25 	vldr	s15, [pc, #148]	; 57f8 <audioTickSynth+0x638>
    5764:	eeb0 6a67 	vmov.f32	s12, s15
    5768:	e64a      	b.n	5400 <audioTickSynth+0x240>
		if (sampleClippedCountdown > 0)
    576a:	4a16      	ldr	r2, [pc, #88]	; (57c4 <audioTickSynth+0x604>)
    576c:	8813      	ldrh	r3, [r2, #0]
    576e:	b29b      	uxth	r3, r3
    5770:	2b00      	cmp	r3, #0
    5772:	f43f af62 	beq.w	563a <audioTickSynth+0x47a>
			sampleClippedCountdown--;
    5776:	8813      	ldrh	r3, [r2, #0]
    5778:	3b01      	subs	r3, #1
    577a:	b29b      	uxth	r3, r3
    577c:	8013      	strh	r3, [r2, #0]
    577e:	e75c      	b.n	563a <audioTickSynth+0x47a>
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    5780:	4a09      	ldr	r2, [pc, #36]	; (57a8 <audioTickSynth+0x5e8>)
    5782:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    5784:	6853      	ldr	r3, [r2, #4]
    5786:	491d      	ldr	r1, [pc, #116]	; (57fc <audioTickSynth+0x63c>)
    5788:	1a1b      	subs	r3, r3, r0
	float masterSample = 0.0f;
    578a:	ed9f 9a1b 	vldr	s18, [pc, #108]	; 57f8 <audioTickSynth+0x638>
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    578e:	600b      	str	r3, [r1, #0]
	uint32_t tempPerStringTick = DWT->CYCCNT;
    5790:	6853      	ldr	r3, [r2, #4]
    5792:	607b      	str	r3, [r7, #4]
	for (int v = 0; v < numStringsThisBoard; v++)
    5794:	e70e      	b.n	55b4 <audioTickSynth+0x3f4>
    5796:	bf00      	nop
    5798:	20016e41 	.word	0x20016e41
    579c:	20005248 	.word	0x20005248
    57a0:	20000010 	.word	0x20000010
    57a4:	423c0000 	.word	0x423c0000
    57a8:	e0001000 	.word	0xe0001000
    57ac:	42a00000 	.word	0x42a00000
    57b0:	20014a04 	.word	0x20014a04
    57b4:	42fe0000 	.word	0x42fe0000
    57b8:	2001abe0 	.word	0x2001abe0
    57bc:	20000540 	.word	0x20000540
    57c0:	3f7fffef 	.word	0x3f7fffef
    57c4:	20005cc8 	.word	0x20005cc8
    57c8:	20000740 	.word	0x20000740
    57cc:	3f7ae148 	.word	0x3f7ae148
    57d0:	20014a0c 	.word	0x20014a0c
    57d4:	20005708 	.word	0x20005708
    57d8:	2000527c 	.word	0x2000527c
    57dc:	2000529c 	.word	0x2000529c
    57e0:	20005754 	.word	0x20005754
    57e4:	200056f0 	.word	0x200056f0
    57e8:	200051c4 	.word	0x200051c4
    57ec:	2000575c 	.word	0x2000575c
    57f0:	bf7fffef 	.word	0xbf7fffef
    57f4:	bf7ffffe 	.word	0xbf7ffffe
    57f8:	00000000 	.word	0x00000000
    57fc:	20014a08 	.word	0x20014a08
    5800:	20014d14 	.word	0x20014d14
    5804:	f3af 8000 	nop.w
    5808:	f3af 8000 	nop.w
    580c:	f3af 8000 	nop.w
    5810:	f3af 8000 	nop.w
    5814:	f3af 8000 	nop.w
    5818:	f3af 8000 	nop.w
    581c:	f3af 8000 	nop.w

00005820 <audioFrameSynth>:
{
    5820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
    5824:	2201      	movs	r2, #1
{
    5826:	4607      	mov	r7, r0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
    5828:	2108      	movs	r1, #8
    582a:	48a5      	ldr	r0, [pc, #660]	; (5ac0 <audioFrameSynth+0x2a0>)
	if (resetStringInputs)
    582c:	f8df a2f8 	ldr.w	sl, [pc, #760]	; 5b28 <audioFrameSynth+0x308>
{
    5830:	ed2d 8b04 	vpush	{d8-d9}
    5834:	b085      	sub	sp, #20
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
    5836:	f005 fbfb 	bl	b030 <__HAL_GPIO_WritePin_veneer>
	uint32_t tempCountFrame = DWT->CYCCNT;
    583a:	4ba2      	ldr	r3, [pc, #648]	; (5ac4 <audioFrameSynth+0x2a4>)
    583c:	685b      	ldr	r3, [r3, #4]
    583e:	9300      	str	r3, [sp, #0]
	if (resetStringInputs)
    5840:	f89a 3000 	ldrb.w	r3, [sl]
    5844:	b1db      	cbz	r3, 587e <audioFrameSynth+0x5e>
		for (int i = 0; i < numStringsThisBoard; i++)
    5846:	4ea0      	ldr	r6, [pc, #640]	; (5ac8 <audioFrameSynth+0x2a8>)
    5848:	7833      	ldrb	r3, [r6, #0]
    584a:	b1ab      	cbz	r3, 5878 <audioFrameSynth+0x58>
    584c:	2500      	movs	r5, #0
    584e:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 5b2c <audioFrameSynth+0x30c>
    5852:	4c9e      	ldr	r4, [pc, #632]	; (5acc <audioFrameSynth+0x2ac>)
				previousStringInputs[i] = 0;
    5854:	46a9      	mov	r9, r5
    5856:	f1a8 0b20 	sub.w	fp, r8, #32
				tADSRT_clear(&envs[v][i]);
    585a:	4658      	mov	r0, fp
			for (int v = 0; v < NUM_ENV; v++)
    585c:	f10b 0b08 	add.w	fp, fp, #8
				tADSRT_clear(&envs[v][i]);
    5860:	f003 fcfe 	bl	9260 <tADSRT_clear>
				previousStringInputs[i] = 0;
    5864:	f824 9015 	strh.w	r9, [r4, r5, lsl #1]
			for (int v = 0; v < NUM_ENV; v++)
    5868:	45c3      	cmp	fp, r8
    586a:	d1f6      	bne.n	585a <audioFrameSynth+0x3a>
		for (int i = 0; i < numStringsThisBoard; i++)
    586c:	3501      	adds	r5, #1
    586e:	7833      	ldrb	r3, [r6, #0]
    5870:	f108 0804 	add.w	r8, r8, #4
    5874:	42ab      	cmp	r3, r5
    5876:	dcee      	bgt.n	5856 <audioFrameSynth+0x36>
		resetStringInputs = 0;
    5878:	2300      	movs	r3, #0
    587a:	f88a 3000 	strb.w	r3, [sl]
	if (newPluck)
    587e:	4b94      	ldr	r3, [pc, #592]	; (5ad0 <audioFrameSynth+0x2b0>)
    5880:	681b      	ldr	r3, [r3, #0]
    5882:	2b00      	cmp	r3, #0
    5884:	d037      	beq.n	58f6 <audioFrameSynth+0xd6>
		for (int i = 0; i < numStringsThisBoard; i++)
    5886:	4e90      	ldr	r6, [pc, #576]	; (5ac8 <audioFrameSynth+0x2a8>)
    5888:	7833      	ldrb	r3, [r6, #0]
    588a:	b38b      	cbz	r3, 58f0 <audioFrameSynth+0xd0>
    588c:	4a91      	ldr	r2, [pc, #580]	; (5ad4 <audioFrameSynth+0x2b4>)
    588e:	2500      	movs	r5, #0
    5890:	9601      	str	r6, [sp, #4]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    5892:	eddf 8a91 	vldr	s17, [pc, #580]	; 5ad8 <audioFrameSynth+0x2b8>
    5896:	4616      	mov	r6, r2
    5898:	f8df 9294 	ldr.w	r9, [pc, #660]	; 5b30 <audioFrameSynth+0x310>
    589c:	f8df 8294 	ldr.w	r8, [pc, #660]	; 5b34 <audioFrameSynth+0x314>
    58a0:	f8df b294 	ldr.w	fp, [pc, #660]	; 5b38 <audioFrameSynth+0x318>
    58a4:	4c89      	ldr	r4, [pc, #548]	; (5acc <audioFrameSynth+0x2ac>)
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    58a6:	f834 2015 	ldrh.w	r2, [r4, r5, lsl #1]
    58aa:	b292      	uxth	r2, r2
    58ac:	b92a      	cbnz	r2, 58ba <audioFrameSynth+0x9a>
    58ae:	4a8b      	ldr	r2, [pc, #556]	; (5adc <audioFrameSynth+0x2bc>)
    58b0:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    58b4:	b292      	uxth	r2, r2
    58b6:	2a00      	cmp	r2, #0
    58b8:	d173      	bne.n	59a2 <audioFrameSynth+0x182>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    58ba:	f834 2015 	ldrh.w	r2, [r4, r5, lsl #1]
    58be:	b292      	uxth	r2, r2
    58c0:	b132      	cbz	r2, 58d0 <audioFrameSynth+0xb0>
    58c2:	4a86      	ldr	r2, [pc, #536]	; (5adc <audioFrameSynth+0x2bc>)
    58c4:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    58c8:	b292      	uxth	r2, r2
    58ca:	2a00      	cmp	r2, #0
    58cc:	f000 80d6 	beq.w	5a7c <audioFrameSynth+0x25c>
			previousStringInputs[i] = stringInputs[i];
    58d0:	4a82      	ldr	r2, [pc, #520]	; (5adc <audioFrameSynth+0x2bc>)
		for (int i = 0; i < numStringsThisBoard; i++)
    58d2:	f109 0904 	add.w	r9, r9, #4
    58d6:	f108 0804 	add.w	r8, r8, #4
    58da:	f10b 0b04 	add.w	fp, fp, #4
			previousStringInputs[i] = stringInputs[i];
    58de:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    58e2:	3604      	adds	r6, #4
			previousStringInputs[i] = stringInputs[i];
    58e4:	b292      	uxth	r2, r2
    58e6:	f824 2015 	strh.w	r2, [r4, r5, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    58ea:	3501      	adds	r5, #1
    58ec:	42ab      	cmp	r3, r5
    58ee:	dcda      	bgt.n	58a6 <audioFrameSynth+0x86>
		newPluck = 0;
    58f0:	2300      	movs	r3, #0
    58f2:	4a77      	ldr	r2, [pc, #476]	; (5ad0 <audioFrameSynth+0x2b0>)
    58f4:	6013      	str	r3, [r2, #0]
    58f6:	4c7a      	ldr	r4, [pc, #488]	; (5ae0 <audioFrameSynth+0x2c0>)
		current_sample = (int32_t)(audioTickSynth() * TWO_TO_23);
    58f8:	ed9f 8a7a 	vldr	s16, [pc, #488]	; 5ae4 <audioFrameSynth+0x2c4>
    58fc:	f504 7500 	add.w	r5, r4, #512	; 0x200
    5900:	eb04 0487 	add.w	r4, r4, r7, lsl #2
    5904:	eb05 0587 	add.w	r5, r5, r7, lsl #2
    5908:	f7ff fc5a 	bl	51c0 <audioTickSynth>
    590c:	ee20 0a08 	vmul.f32	s0, s0, s16
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    5910:	3408      	adds	r4, #8
		current_sample = (int32_t)(audioTickSynth() * TWO_TO_23);
    5912:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    5916:	42ac      	cmp	r4, r5
		current_sample = (int32_t)(audioTickSynth() * TWO_TO_23);
    5918:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[buffer_offset + i + 1] = current_sample;
    591c:	e944 3302 	strd	r3, r3, [r4, #-8]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    5920:	d1f2      	bne.n	5908 <audioFrameSynth+0xe8>
	if (switchStrings)
    5922:	4c71      	ldr	r4, [pc, #452]	; (5ae8 <audioFrameSynth+0x2c8>)
    5924:	6823      	ldr	r3, [r4, #0]
    5926:	2b00      	cmp	r3, #0
    5928:	d133      	bne.n	5992 <audioFrameSynth+0x172>
	switchStrings = 0;
    592a:	2000      	movs	r0, #0
	timeFrame = DWT->CYCCNT - tempCountFrame;
    592c:	4b65      	ldr	r3, [pc, #404]	; (5ac4 <audioFrameSynth+0x2a4>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    592e:	4a6f      	ldr	r2, [pc, #444]	; (5aec <audioFrameSynth+0x2cc>)
	switchStrings = 0;
    5930:	6020      	str	r0, [r4, #0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    5932:	9c00      	ldr	r4, [sp, #0]
    5934:	685b      	ldr	r3, [r3, #4]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    5936:	edd2 6a00 	vldr	s13, [r2]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    593a:	1b1b      	subs	r3, r3, r4
	if (frameLoadPercentage > .99f)
    593c:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 5af0 <audioFrameSynth+0x2d0>
	timeFrame = DWT->CYCCNT - tempCountFrame;
    5940:	496c      	ldr	r1, [pc, #432]	; (5af4 <audioFrameSynth+0x2d4>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    5942:	ee07 3a90 	vmov	s15, r3
    5946:	4a6c      	ldr	r2, [pc, #432]	; (5af8 <audioFrameSynth+0x2d8>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
    5948:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    594a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    594e:	ee67 7aa6 	vmul.f32	s15, s15, s13
	if (frameLoadPercentage > .99f)
    5952:	eef4 7ac7 	vcmpe.f32	s15, s14
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    5956:	edc2 7a00 	vstr	s15, [r2]
	if (frameLoadPercentage > .99f)
    595a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    595e:	dd0e      	ble.n	597e <audioFrameSynth+0x15e>
		frameLoadOverCount++;
    5960:	4a66      	ldr	r2, [pc, #408]	; (5afc <audioFrameSynth+0x2dc>)
    5962:	6813      	ldr	r3, [r2, #0]
    5964:	3301      	adds	r3, #1
		if (frameLoadOverCount > 3)
    5966:	2b03      	cmp	r3, #3
		frameLoadOverCount++;
    5968:	6013      	str	r3, [r2, #0]
		if (frameLoadOverCount > 3)
    596a:	d908      	bls.n	597e <audioFrameSynth+0x15e>
			if (overSampled == 1)
    596c:	4b64      	ldr	r3, [pc, #400]	; (5b00 <audioFrameSynth+0x2e0>)
    596e:	681a      	ldr	r2, [r3, #0]
    5970:	2a01      	cmp	r2, #1
    5972:	d012      	beq.n	599a <audioFrameSynth+0x17a>
			else if (oscToTick > 0)
    5974:	4a63      	ldr	r2, [pc, #396]	; (5b04 <audioFrameSynth+0x2e4>)
    5976:	7813      	ldrb	r3, [r2, #0]
    5978:	b10b      	cbz	r3, 597e <audioFrameSynth+0x15e>
				oscToTick--;
    597a:	3b01      	subs	r3, #1
    597c:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
    597e:	2200      	movs	r2, #0
    5980:	2108      	movs	r1, #8
    5982:	484f      	ldr	r0, [pc, #316]	; (5ac0 <audioFrameSynth+0x2a0>)
}
    5984:	b005      	add	sp, #20
    5986:	ecbd 8b04 	vpop	{d8-d9}
    598a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
    598e:	f005 bb4f 	b.w	b030 <__HAL_GPIO_WritePin_veneer>
		switchStringModel(switchStrings);
    5992:	6820      	ldr	r0, [r4, #0]
    5994:	f7fa fdd4 	bl	540 <switchStringModel>
    5998:	e7c7      	b.n	592a <audioFrameSynth+0x10a>
				overSampled = 0;
    599a:	6018      	str	r0, [r3, #0]
				changeOversampling(overSampled);
    599c:	f005 fac0 	bl	af20 <__changeOversampling_veneer>
    59a0:	e7ed      	b.n	597e <audioFrameSynth+0x15e>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    59a2:	4b4e      	ldr	r3, [pc, #312]	; (5adc <audioFrameSynth+0x2bc>)
    59a4:	f5ab 7213 	sub.w	r2, fp, #588	; 0x24c
    59a8:	f8df a178 	ldr.w	sl, [pc, #376]	; 5b24 <audioFrameSynth+0x304>
						if (useVelocity == 0) envVel = 1.f;
    59ac:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
				float amplitz = stringInputs[i] * 0.000015259021897f;
    59b0:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
    59b4:	f10a 0104 	add.w	r1, sl, #4
						voiceSounding = 1;
    59b8:	9502      	str	r5, [sp, #8]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    59ba:	b29b      	uxth	r3, r3
						voiceSounding = 1;
    59bc:	4655      	mov	r5, sl
    59be:	9403      	str	r4, [sp, #12]
    59c0:	46c2      	mov	sl, r8
				float amplitz = stringInputs[i] * 0.000015259021897f;
    59c2:	ee08 3a10 	vmov	s16, r3
				stringOctave[i] = octave;
    59c6:	4b50      	ldr	r3, [pc, #320]	; (5b08 <audioFrameSynth+0x2e8>)
						voiceSounding = 1;
    59c8:	4614      	mov	r4, r2
				float amplitz = stringInputs[i] * 0.000015259021897f;
    59ca:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
				stringOctave[i] = octave;
    59ce:	681b      	ldr	r3, [r3, #0]
    59d0:	6033      	str	r3, [r6, #0]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    59d2:	ee28 8a28 	vmul.f32	s16, s16, s17
					if (envOn[v])
    59d6:	f815 3b01 	ldrb.w	r3, [r5], #1
						tADSRT_on(&envs[v][i], envVel);
    59da:	4650      	mov	r0, sl
					if (envOn[v])
    59dc:	b16b      	cbz	r3, 59fa <audioFrameSynth+0x1da>
						if (useVelocity == 0) envVel = 1.f;
    59de:	edd4 7a00 	vldr	s15, [r4]
    59e2:	eef5 7a40 	vcmp.f32	s15, #0.0
    59e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
						tADSRT_on(&envs[v][i], envVel);
    59ea:	fe09 0a08 	vseleq.f32	s0, s18, s16
    59ee:	f003 fc07 	bl	9200 <tADSRT_on>
						voiceSounding = 1;
    59f2:	2001      	movs	r0, #1
    59f4:	4b45      	ldr	r3, [pc, #276]	; (5b0c <audioFrameSynth+0x2ec>)
    59f6:	4946      	ldr	r1, [pc, #280]	; (5b10 <audioFrameSynth+0x2f0>)
    59f8:	7018      	strb	r0, [r3, #0]
				for (int v = 0; v < NUM_ENV; v++)
    59fa:	42a9      	cmp	r1, r5
    59fc:	f10a 0a08 	add.w	sl, sl, #8
    5a00:	f104 04a8 	add.w	r4, r4, #168	; 0xa8
    5a04:	d1e7      	bne.n	59d6 <audioFrameSynth+0x1b6>
						if (noteOnSync > 0.5f)
    5a06:	9d02      	ldr	r5, [sp, #8]
    5a08:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
				for (int v = 0; v < NUM_ENV; v++)
    5a0c:	f8df a104 	ldr.w	sl, [pc, #260]	; 5b14 <audioFrameSynth+0x2f4>
    5a10:	465c      	mov	r4, fp
    5a12:	ebc5 7385 	rsb	r3, r5, r5, lsl #30
    5a16:	009b      	lsls	r3, r3, #2
    5a18:	330c      	adds	r3, #12
    5a1a:	9302      	str	r3, [sp, #8]
						if (noteOnSync > 0.5f)
    5a1c:	4b3d      	ldr	r3, [pc, #244]	; (5b14 <audioFrameSynth+0x2f4>)
    5a1e:	ebaa 0003 	sub.w	r0, sl, r3
					if (lfoOn[v])
    5a22:	f81a 3b01 	ldrb.w	r3, [sl], #1
    5a26:	b163      	cbz	r3, 5a42 <audioFrameSynth+0x222>
						if (noteOnSync > 0.5f)
    5a28:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
    5a2c:	eef4 7ac9 	vcmpe.f32	s15, s18
    5a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5a34:	dd05      	ble.n	5a42 <audioFrameSynth+0x222>
							lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal[i], v, i);
    5a36:	9b02      	ldr	r3, [sp, #8]
    5a38:	4629      	mov	r1, r5
    5a3a:	ed94 0a00 	vldr	s0, [r4]
    5a3e:	58e3      	ldr	r3, [r4, r3]
    5a40:	4798      	blx	r3
				for (int v = 0; v < NUM_LFOS; v++)
    5a42:	4b35      	ldr	r3, [pc, #212]	; (5b18 <audioFrameSynth+0x2f8>)
    5a44:	348c      	adds	r4, #140	; 0x8c
    5a46:	4553      	cmp	r3, sl
    5a48:	d1e8      	bne.n	5a1c <audioFrameSynth+0x1fc>
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    5a4a:	4834      	ldr	r0, [pc, #208]	; (5b1c <audioFrameSynth+0x2fc>)
    5a4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    5a50:	4933      	ldr	r1, [pc, #204]	; (5b20 <audioFrameSynth+0x300>)
    5a52:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    5a56:	7802      	ldrb	r2, [r0, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    5a58:	9b01      	ldr	r3, [sp, #4]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    5a5a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    5a5e:	3201      	adds	r2, #1
    5a60:	9c03      	ldr	r4, [sp, #12]
    5a62:	edd1 7a00 	vldr	s15, [r1]
		for (int i = 0; i < numStringsThisBoard; i++)
    5a66:	781b      	ldrb	r3, [r3, #0]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    5a68:	ee77 7aa6 	vadd.f32	s15, s15, s13
				sourceValues[VELOCITY_SOURCE_OFFSET][i] = amplitz;
    5a6c:	ed89 8a00 	vstr	s16, [r9]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    5a70:	7002      	strb	r2, [r0, #0]
    5a72:	ee67 7a87 	vmul.f32	s15, s15, s14
    5a76:	edc9 7a02 	vstr	s15, [r9, #8]
			{
    5a7a:	e729      	b.n	58d0 <audioFrameSynth+0xb0>
					if (envOn[v])
    5a7c:	4b29      	ldr	r3, [pc, #164]	; (5b24 <audioFrameSynth+0x304>)
    5a7e:	781b      	ldrb	r3, [r3, #0]
    5a80:	b95b      	cbnz	r3, 5a9a <audioFrameSynth+0x27a>
    5a82:	4b28      	ldr	r3, [pc, #160]	; (5b24 <audioFrameSynth+0x304>)
    5a84:	785b      	ldrb	r3, [r3, #1]
    5a86:	b9b3      	cbnz	r3, 5ab6 <audioFrameSynth+0x296>
    5a88:	4b26      	ldr	r3, [pc, #152]	; (5b24 <audioFrameSynth+0x304>)
    5a8a:	789b      	ldrb	r3, [r3, #2]
    5a8c:	b973      	cbnz	r3, 5aac <audioFrameSynth+0x28c>
    5a8e:	4b25      	ldr	r3, [pc, #148]	; (5b24 <audioFrameSynth+0x304>)
    5a90:	78db      	ldrb	r3, [r3, #3]
    5a92:	b933      	cbnz	r3, 5aa2 <audioFrameSynth+0x282>
		for (int i = 0; i < numStringsThisBoard; i++)
    5a94:	9b01      	ldr	r3, [sp, #4]
    5a96:	781b      	ldrb	r3, [r3, #0]
    5a98:	e71a      	b.n	58d0 <audioFrameSynth+0xb0>
						tADSRT_off(&envs[v][i]);
    5a9a:	4640      	mov	r0, r8
    5a9c:	f003 fbd0 	bl	9240 <tADSRT_off>
    5aa0:	e7ef      	b.n	5a82 <audioFrameSynth+0x262>
    5aa2:	f108 0018 	add.w	r0, r8, #24
    5aa6:	f003 fbcb 	bl	9240 <tADSRT_off>
    5aaa:	e7f3      	b.n	5a94 <audioFrameSynth+0x274>
    5aac:	f108 0010 	add.w	r0, r8, #16
    5ab0:	f003 fbc6 	bl	9240 <tADSRT_off>
    5ab4:	e7eb      	b.n	5a8e <audioFrameSynth+0x26e>
    5ab6:	f108 0008 	add.w	r0, r8, #8
    5aba:	f003 fbc1 	bl	9240 <tADSRT_off>
    5abe:	e7e3      	b.n	5a88 <audioFrameSynth+0x268>
    5ac0:	58020000 	.word	0x58020000
    5ac4:	e0001000 	.word	0xe0001000
    5ac8:	20000015 	.word	0x20000015
    5acc:	20005894 	.word	0x20005894
    5ad0:	200056b0 	.word	0x200056b0
    5ad4:	20014998 	.word	0x20014998
    5ad8:	37800080 	.word	0x37800080
    5adc:	20014978 	.word	0x20014978
    5ae0:	30000000 	.word	0x30000000
    5ae4:	4b000000 	.word	0x4b000000
    5ae8:	200149b8 	.word	0x200149b8
    5aec:	20000004 	.word	0x20000004
    5af0:	3f7d70a4 	.word	0x3f7d70a4
    5af4:	200149e8 	.word	0x200149e8
    5af8:	20005260 	.word	0x20005260
    5afc:	2000525c 	.word	0x2000525c
    5b00:	20000030 	.word	0x20000030
    5b04:	2000002c 	.word	0x2000002c
    5b08:	200056e8 	.word	0x200056e8
    5b0c:	20014a68 	.word	0x20014a68
    5b10:	200051d8 	.word	0x200051d8
    5b14:	20005460 	.word	0x20005460
    5b18:	20005464 	.word	0x20005464
    5b1c:	20005cc4 	.word	0x20005cc4
    5b20:	2001ac14 	.word	0x2001ac14
    5b24:	200051d4 	.word	0x200051d4
    5b28:	20005cc6 	.word	0x20005cc6
    5b2c:	200051f8 	.word	0x200051f8
    5b30:	200148a8 	.word	0x200148a8
    5b34:	200051d8 	.word	0x200051d8
    5b38:	2001a980 	.word	0x2001a980
    5b3c:	f3af 8000 	nop.w

00005b40 <HAL_SAI_TxCpltCallback>:




void __ATTR_ITCMRAM HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
    5b40:	b538      	push	{r3, r4, r5, lr}
	if ((!diskBusy)&& (presetReady))
    5b42:	4c44      	ldr	r4, [pc, #272]	; (5c54 <HAL_SAI_TxCpltCallback+0x114>)
    5b44:	7823      	ldrb	r3, [r4, #0]
    5b46:	b91b      	cbnz	r3, 5b50 <HAL_SAI_TxCpltCallback+0x10>
    5b48:	4b43      	ldr	r3, [pc, #268]	; (5c58 <HAL_SAI_TxCpltCallback+0x118>)
    5b4a:	681b      	ldr	r3, [r3, #0]
    5b4c:	2b00      	cmp	r3, #0
    5b4e:	d159      	bne.n	5c04 <HAL_SAI_TxCpltCallback+0xc4>
	}
	else
	{
		for (int i = 0; i < HALF_BUFFER_SIZE; i++)
		{
			audioOutBuffer[HALF_BUFFER_SIZE+i] = 0;
    5b50:	f44f 7200 	mov.w	r2, #512	; 0x200
    5b54:	2100      	movs	r1, #0
    5b56:	4841      	ldr	r0, [pc, #260]	; (5c5c <HAL_SAI_TxCpltCallback+0x11c>)
    5b58:	f005 fb96 	bl	b288 <__memset_veneer>
		}
	}
	if (voice != prevVoice)
    5b5c:	4b40      	ldr	r3, [pc, #256]	; (5c60 <HAL_SAI_TxCpltCallback+0x120>)
    5b5e:	4a41      	ldr	r2, [pc, #260]	; (5c64 <HAL_SAI_TxCpltCallback+0x124>)
    5b60:	6818      	ldr	r0, [r3, #0]
    5b62:	6811      	ldr	r1, [r2, #0]
    5b64:	4288      	cmp	r0, r1
    5b66:	d020      	beq.n	5baa <HAL_SAI_TxCpltCallback+0x6a>
	{
		if (voice == 63)
    5b68:	6819      	ldr	r1, [r3, #0]
    5b6a:	293f      	cmp	r1, #63	; 0x3f
    5b6c:	d04f      	beq.n	5c0e <HAL_SAI_TxCpltCallback+0xce>

			switchStrings = 1;
			diskBusy = 0;
			resetStringInputs = 1;
		}
		else if (voice == 62)
    5b6e:	6819      	ldr	r1, [r3, #0]
    5b70:	293e      	cmp	r1, #62	; 0x3e
    5b72:	d063      	beq.n	5c3c <HAL_SAI_TxCpltCallback+0xfc>

			switchStrings = 2;
			diskBusy = 0;
			resetStringInputs = 1;
		}
		else if (voice == 61)
    5b74:	6819      	ldr	r1, [r3, #0]
    5b76:	293d      	cmp	r1, #61	; 0x3d
    5b78:	d051      	beq.n	5c1e <HAL_SAI_TxCpltCallback+0xde>
			currentActivePreset = voice;
			diskBusy = 0;
			presetReady = 1;
			resetStringInputs = 1;
		}
		else if (voice == 60)
    5b7a:	6819      	ldr	r1, [r3, #0]
    5b7c:	293c      	cmp	r1, #60	; 0x3c
    5b7e:	d066      	beq.n	5c4e <HAL_SAI_TxCpltCallback+0x10e>
			resetStringInputs = 1;
		}
		else
		{
			audioFrameFunction = audioFrameSynth;
			presetWaitingToLoad = 1;
    5b80:	4939      	ldr	r1, [pc, #228]	; (5c68 <HAL_SAI_TxCpltCallback+0x128>)
    5b82:	2001      	movs	r0, #1
			presetNumberToLoad = voice;
    5b84:	4d39      	ldr	r5, [pc, #228]	; (5c6c <HAL_SAI_TxCpltCallback+0x12c>)
			presetWaitingToLoad = 1;
    5b86:	6008      	str	r0, [r1, #0]
			presetNumberToLoad = voice;
    5b88:	6819      	ldr	r1, [r3, #0]
			audioFrameFunction = audioFrameSynth;
    5b8a:	4c39      	ldr	r4, [pc, #228]	; (5c70 <HAL_SAI_TxCpltCallback+0x130>)
			presetNumberToLoad = voice;
    5b8c:	b2c9      	uxtb	r1, r1
    5b8e:	7029      	strb	r1, [r5, #0]
			audioFrameFunction = audioFrameSynth;
    5b90:	4d38      	ldr	r5, [pc, #224]	; (5c74 <HAL_SAI_TxCpltCallback+0x134>)
			presetReady = 0;
    5b92:	4931      	ldr	r1, [pc, #196]	; (5c58 <HAL_SAI_TxCpltCallback+0x118>)
			audioFrameFunction = audioFrameSynth;
    5b94:	6025      	str	r5, [r4, #0]
			presetReady = 0;
    5b96:	2400      	movs	r4, #0
    5b98:	600c      	str	r4, [r1, #0]
			if (prevVoice > 60)
    5b9a:	6811      	ldr	r1, [r2, #0]
    5b9c:	293c      	cmp	r1, #60	; 0x3c
    5b9e:	dd01      	ble.n	5ba4 <HAL_SAI_TxCpltCallback+0x64>
			{
				resetStringInputs = 1;
    5ba0:	4935      	ldr	r1, [pc, #212]	; (5c78 <HAL_SAI_TxCpltCallback+0x138>)
    5ba2:	7008      	strb	r0, [r1, #0]
			}
			frameLoadOverCount = 0;
    5ba4:	4935      	ldr	r1, [pc, #212]	; (5c7c <HAL_SAI_TxCpltCallback+0x13c>)
    5ba6:	2000      	movs	r0, #0
    5ba8:	6008      	str	r0, [r1, #0]
		}
	}
	prevVoice = voice;
    5baa:	6819      	ldr	r1, [r3, #0]
	SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)audioOutBuffer) & ~(uint32_t)0x1F), AUDIO_BUFFER_SIZE+32);
    5bac:	4b34      	ldr	r3, [pc, #208]	; (5c80 <HAL_SAI_TxCpltCallback+0x140>)
	prevVoice = voice;
    5bae:	6011      	str	r1, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    5bb0:	f3bf 8f4f 	dsb	sy
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    5bb4:	4a33      	ldr	r2, [pc, #204]	; (5c84 <HAL_SAI_TxCpltCallback+0x144>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    5bb6:	f103 0420 	add.w	r4, r3, #32
    5bba:	f103 0140 	add.w	r1, r3, #64	; 0x40
    5bbe:	f103 0060 	add.w	r0, r3, #96	; 0x60
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    5bc2:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
    5bc6:	f8c2 4268 	str.w	r4, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    5bca:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    5bce:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    5bd2:	f103 0180 	add.w	r1, r3, #128	; 0x80
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    5bd6:	f8c2 0268 	str.w	r0, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    5bda:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    5bde:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    5be2:	f103 01e0 	add.w	r1, r3, #224	; 0xe0
    5be6:	f503 7380 	add.w	r3, r3, #256	; 0x100
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    5bea:	f8c2 4268 	str.w	r4, [r2, #616]	; 0x268
    5bee:	f8c2 0268 	str.w	r0, [r2, #616]	; 0x268
    5bf2:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
    5bf6:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
    5bfa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5bfe:	f3bf 8f6f 	isb	sy
}
    5c02:	bd38      	pop	{r3, r4, r5, pc}
		audioFrameFunction(HALF_BUFFER_SIZE);
    5c04:	4b1a      	ldr	r3, [pc, #104]	; (5c70 <HAL_SAI_TxCpltCallback+0x130>)
    5c06:	2080      	movs	r0, #128	; 0x80
    5c08:	681b      	ldr	r3, [r3, #0]
    5c0a:	4798      	blx	r3
    5c0c:	e7a6      	b.n	5b5c <HAL_SAI_TxCpltCallback+0x1c>
			switchStrings = 1;
    5c0e:	2101      	movs	r1, #1
    5c10:	481d      	ldr	r0, [pc, #116]	; (5c88 <HAL_SAI_TxCpltCallback+0x148>)
    5c12:	6001      	str	r1, [r0, #0]
			diskBusy = 0;
    5c14:	2000      	movs	r0, #0
    5c16:	7020      	strb	r0, [r4, #0]
			resetStringInputs = 1;
    5c18:	4817      	ldr	r0, [pc, #92]	; (5c78 <HAL_SAI_TxCpltCallback+0x138>)
    5c1a:	7001      	strb	r1, [r0, #0]
    5c1c:	e7c5      	b.n	5baa <HAL_SAI_TxCpltCallback+0x6a>
			audioFrameFunction = audioFrameAdditive;
    5c1e:	4914      	ldr	r1, [pc, #80]	; (5c70 <HAL_SAI_TxCpltCallback+0x130>)
    5c20:	481a      	ldr	r0, [pc, #104]	; (5c8c <HAL_SAI_TxCpltCallback+0x14c>)
			audioFrameFunction = audioFrameVocal;
    5c22:	6008      	str	r0, [r1, #0]
			currentActivePreset = voice;
    5c24:	6819      	ldr	r1, [r3, #0]
    5c26:	481a      	ldr	r0, [pc, #104]	; (5c90 <HAL_SAI_TxCpltCallback+0x150>)
    5c28:	b2c9      	uxtb	r1, r1
    5c2a:	7001      	strb	r1, [r0, #0]
			diskBusy = 0;
    5c2c:	2000      	movs	r0, #0
			presetReady = 1;
    5c2e:	2101      	movs	r1, #1
			diskBusy = 0;
    5c30:	7020      	strb	r0, [r4, #0]
			presetReady = 1;
    5c32:	4c09      	ldr	r4, [pc, #36]	; (5c58 <HAL_SAI_TxCpltCallback+0x118>)
			resetStringInputs = 1;
    5c34:	4810      	ldr	r0, [pc, #64]	; (5c78 <HAL_SAI_TxCpltCallback+0x138>)
			presetReady = 1;
    5c36:	6021      	str	r1, [r4, #0]
			resetStringInputs = 1;
    5c38:	7001      	strb	r1, [r0, #0]
    5c3a:	e7b6      	b.n	5baa <HAL_SAI_TxCpltCallback+0x6a>
			switchStrings = 2;
    5c3c:	4912      	ldr	r1, [pc, #72]	; (5c88 <HAL_SAI_TxCpltCallback+0x148>)
    5c3e:	2002      	movs	r0, #2
    5c40:	6008      	str	r0, [r1, #0]
			diskBusy = 0;
    5c42:	2000      	movs	r0, #0
			resetStringInputs = 1;
    5c44:	490c      	ldr	r1, [pc, #48]	; (5c78 <HAL_SAI_TxCpltCallback+0x138>)
			diskBusy = 0;
    5c46:	7020      	strb	r0, [r4, #0]
			resetStringInputs = 1;
    5c48:	2001      	movs	r0, #1
    5c4a:	7008      	strb	r0, [r1, #0]
    5c4c:	e7ad      	b.n	5baa <HAL_SAI_TxCpltCallback+0x6a>
			audioFrameFunction = audioFrameVocal;
    5c4e:	4908      	ldr	r1, [pc, #32]	; (5c70 <HAL_SAI_TxCpltCallback+0x130>)
    5c50:	4810      	ldr	r0, [pc, #64]	; (5c94 <HAL_SAI_TxCpltCallback+0x154>)
    5c52:	e7e6      	b.n	5c22 <HAL_SAI_TxCpltCallback+0xe2>
    5c54:	20014cc0 	.word	0x20014cc0
    5c58:	20005884 	.word	0x20005884
    5c5c:	30000200 	.word	0x30000200
    5c60:	20014a64 	.word	0x20014a64
    5c64:	20000158 	.word	0x20000158
    5c68:	2001abfc 	.word	0x2001abfc
    5c6c:	2001abfa 	.word	0x2001abfa
    5c70:	20000a7c 	.word	0x20000a7c
    5c74:	00005821 	.word	0x00005821
    5c78:	20005cc6 	.word	0x20005cc6
    5c7c:	2000525c 	.word	0x2000525c
    5c80:	30000000 	.word	0x30000000
    5c84:	e000ed00 	.word	0xe000ed00
    5c88:	200149b8 	.word	0x200149b8
    5c8c:	00001521 	.word	0x00001521
    5c90:	20000744 	.word	0x20000744
    5c94:	00001c41 	.word	0x00001c41
    5c98:	f3af 8000 	nop.w
    5c9c:	f3af 8000 	nop.w

00005ca0 <HAL_SAI_TxHalfCpltCallback>:

void __ATTR_ITCMRAM HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
    5ca0:	b538      	push	{r3, r4, r5, lr}
	if ((!diskBusy)&& (presetReady))
    5ca2:	4c44      	ldr	r4, [pc, #272]	; (5db4 <HAL_SAI_TxHalfCpltCallback+0x114>)
    5ca4:	7820      	ldrb	r0, [r4, #0]
    5ca6:	b918      	cbnz	r0, 5cb0 <HAL_SAI_TxHalfCpltCallback+0x10>
    5ca8:	4b43      	ldr	r3, [pc, #268]	; (5db8 <HAL_SAI_TxHalfCpltCallback+0x118>)
    5caa:	681b      	ldr	r3, [r3, #0]
    5cac:	2b00      	cmp	r3, #0
    5cae:	d159      	bne.n	5d64 <HAL_SAI_TxHalfCpltCallback+0xc4>
	}
	else
	{
		for (int i = 0; i < HALF_BUFFER_SIZE; i++)
		{
			audioOutBuffer[i] = 0;
    5cb0:	f44f 7200 	mov.w	r2, #512	; 0x200
    5cb4:	2100      	movs	r1, #0
    5cb6:	4841      	ldr	r0, [pc, #260]	; (5dbc <HAL_SAI_TxHalfCpltCallback+0x11c>)
    5cb8:	f005 fae6 	bl	b288 <__memset_veneer>
		}
	}
	if (voice != prevVoice)
    5cbc:	4b40      	ldr	r3, [pc, #256]	; (5dc0 <HAL_SAI_TxHalfCpltCallback+0x120>)
    5cbe:	4a41      	ldr	r2, [pc, #260]	; (5dc4 <HAL_SAI_TxHalfCpltCallback+0x124>)
    5cc0:	6818      	ldr	r0, [r3, #0]
    5cc2:	6811      	ldr	r1, [r2, #0]
    5cc4:	4288      	cmp	r0, r1
    5cc6:	d020      	beq.n	5d0a <HAL_SAI_TxHalfCpltCallback+0x6a>
	{
		if (voice == 63)
    5cc8:	6819      	ldr	r1, [r3, #0]
    5cca:	293f      	cmp	r1, #63	; 0x3f
    5ccc:	d04e      	beq.n	5d6c <HAL_SAI_TxHalfCpltCallback+0xcc>

			switchStrings = 1;
			diskBusy = 0;
			resetStringInputs = 1;
		}
		else if (voice == 62)
    5cce:	6819      	ldr	r1, [r3, #0]
    5cd0:	293e      	cmp	r1, #62	; 0x3e
    5cd2:	d062      	beq.n	5d9a <HAL_SAI_TxHalfCpltCallback+0xfa>

			switchStrings = 2;
			diskBusy = 0;
			resetStringInputs = 1;
		}
		else if (voice == 61)
    5cd4:	6819      	ldr	r1, [r3, #0]
    5cd6:	293d      	cmp	r1, #61	; 0x3d
    5cd8:	d050      	beq.n	5d7c <HAL_SAI_TxHalfCpltCallback+0xdc>
			currentActivePreset = voice;
			diskBusy = 0;
			presetReady = 1;
			resetStringInputs = 1;
		}
		else if (voice == 60)
    5cda:	6819      	ldr	r1, [r3, #0]
    5cdc:	293c      	cmp	r1, #60	; 0x3c
    5cde:	d065      	beq.n	5dac <HAL_SAI_TxHalfCpltCallback+0x10c>
			resetStringInputs = 1;
		}
		else
		{
			audioFrameFunction = audioFrameSynth;
			presetWaitingToLoad = 1;
    5ce0:	4939      	ldr	r1, [pc, #228]	; (5dc8 <HAL_SAI_TxHalfCpltCallback+0x128>)
    5ce2:	2001      	movs	r0, #1
			presetNumberToLoad = voice;
    5ce4:	4d39      	ldr	r5, [pc, #228]	; (5dcc <HAL_SAI_TxHalfCpltCallback+0x12c>)
			presetWaitingToLoad = 1;
    5ce6:	6008      	str	r0, [r1, #0]
			presetNumberToLoad = voice;
    5ce8:	6819      	ldr	r1, [r3, #0]
			audioFrameFunction = audioFrameSynth;
    5cea:	4c39      	ldr	r4, [pc, #228]	; (5dd0 <HAL_SAI_TxHalfCpltCallback+0x130>)
			presetNumberToLoad = voice;
    5cec:	b2c9      	uxtb	r1, r1
    5cee:	7029      	strb	r1, [r5, #0]
			audioFrameFunction = audioFrameSynth;
    5cf0:	4d38      	ldr	r5, [pc, #224]	; (5dd4 <HAL_SAI_TxHalfCpltCallback+0x134>)
			presetReady = 0;
    5cf2:	4931      	ldr	r1, [pc, #196]	; (5db8 <HAL_SAI_TxHalfCpltCallback+0x118>)
			audioFrameFunction = audioFrameSynth;
    5cf4:	6025      	str	r5, [r4, #0]
			presetReady = 0;
    5cf6:	2400      	movs	r4, #0
    5cf8:	600c      	str	r4, [r1, #0]
			if (prevVoice > 60)
    5cfa:	6811      	ldr	r1, [r2, #0]
    5cfc:	293c      	cmp	r1, #60	; 0x3c
    5cfe:	dd01      	ble.n	5d04 <HAL_SAI_TxHalfCpltCallback+0x64>
			{
				resetStringInputs = 1;
    5d00:	4935      	ldr	r1, [pc, #212]	; (5dd8 <HAL_SAI_TxHalfCpltCallback+0x138>)
    5d02:	7008      	strb	r0, [r1, #0]
			}
			frameLoadOverCount = 0;
    5d04:	4935      	ldr	r1, [pc, #212]	; (5ddc <HAL_SAI_TxHalfCpltCallback+0x13c>)
    5d06:	2000      	movs	r0, #0
    5d08:	6008      	str	r0, [r1, #0]
		}
	}
	prevVoice = voice;
    5d0a:	6819      	ldr	r1, [r3, #0]
	SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)audioOutBuffer) & ~(uint32_t)0x1F), AUDIO_BUFFER_SIZE+32);
    5d0c:	4b2b      	ldr	r3, [pc, #172]	; (5dbc <HAL_SAI_TxHalfCpltCallback+0x11c>)
	prevVoice = voice;
    5d0e:	6011      	str	r1, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    5d10:	f3bf 8f4f 	dsb	sy
    5d14:	4a32      	ldr	r2, [pc, #200]	; (5de0 <HAL_SAI_TxHalfCpltCallback+0x140>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    5d16:	f103 0420 	add.w	r4, r3, #32
    5d1a:	f103 0140 	add.w	r1, r3, #64	; 0x40
    5d1e:	f103 0060 	add.w	r0, r3, #96	; 0x60
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    5d22:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
    5d26:	f8c2 4268 	str.w	r4, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    5d2a:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    5d2e:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    5d32:	f103 0180 	add.w	r1, r3, #128	; 0x80
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    5d36:	f8c2 0268 	str.w	r0, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    5d3a:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    5d3e:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    5d42:	f103 01e0 	add.w	r1, r3, #224	; 0xe0
    5d46:	f503 7380 	add.w	r3, r3, #256	; 0x100
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    5d4a:	f8c2 4268 	str.w	r4, [r2, #616]	; 0x268
    5d4e:	f8c2 0268 	str.w	r0, [r2, #616]	; 0x268
    5d52:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
    5d56:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
    5d5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5d5e:	f3bf 8f6f 	isb	sy
}
    5d62:	bd38      	pop	{r3, r4, r5, pc}
		audioFrameFunction(0);
    5d64:	4b1a      	ldr	r3, [pc, #104]	; (5dd0 <HAL_SAI_TxHalfCpltCallback+0x130>)
    5d66:	681b      	ldr	r3, [r3, #0]
    5d68:	4798      	blx	r3
    5d6a:	e7a7      	b.n	5cbc <HAL_SAI_TxHalfCpltCallback+0x1c>
			switchStrings = 1;
    5d6c:	2101      	movs	r1, #1
    5d6e:	481d      	ldr	r0, [pc, #116]	; (5de4 <HAL_SAI_TxHalfCpltCallback+0x144>)
    5d70:	6001      	str	r1, [r0, #0]
			diskBusy = 0;
    5d72:	2000      	movs	r0, #0
    5d74:	7020      	strb	r0, [r4, #0]
			resetStringInputs = 1;
    5d76:	4818      	ldr	r0, [pc, #96]	; (5dd8 <HAL_SAI_TxHalfCpltCallback+0x138>)
    5d78:	7001      	strb	r1, [r0, #0]
    5d7a:	e7c6      	b.n	5d0a <HAL_SAI_TxHalfCpltCallback+0x6a>
			audioFrameFunction = audioFrameAdditive;
    5d7c:	4914      	ldr	r1, [pc, #80]	; (5dd0 <HAL_SAI_TxHalfCpltCallback+0x130>)
    5d7e:	481a      	ldr	r0, [pc, #104]	; (5de8 <HAL_SAI_TxHalfCpltCallback+0x148>)
			audioFrameFunction = audioFrameVocal;
    5d80:	6008      	str	r0, [r1, #0]
			currentActivePreset = voice;
    5d82:	6819      	ldr	r1, [r3, #0]
    5d84:	4819      	ldr	r0, [pc, #100]	; (5dec <HAL_SAI_TxHalfCpltCallback+0x14c>)
    5d86:	b2c9      	uxtb	r1, r1
    5d88:	7001      	strb	r1, [r0, #0]
			diskBusy = 0;
    5d8a:	2000      	movs	r0, #0
			presetReady = 1;
    5d8c:	2101      	movs	r1, #1
			diskBusy = 0;
    5d8e:	7020      	strb	r0, [r4, #0]
			presetReady = 1;
    5d90:	4c09      	ldr	r4, [pc, #36]	; (5db8 <HAL_SAI_TxHalfCpltCallback+0x118>)
			resetStringInputs = 1;
    5d92:	4811      	ldr	r0, [pc, #68]	; (5dd8 <HAL_SAI_TxHalfCpltCallback+0x138>)
			presetReady = 1;
    5d94:	6021      	str	r1, [r4, #0]
			resetStringInputs = 1;
    5d96:	7001      	strb	r1, [r0, #0]
    5d98:	e7b7      	b.n	5d0a <HAL_SAI_TxHalfCpltCallback+0x6a>
			switchStrings = 2;
    5d9a:	4912      	ldr	r1, [pc, #72]	; (5de4 <HAL_SAI_TxHalfCpltCallback+0x144>)
    5d9c:	2002      	movs	r0, #2
    5d9e:	6008      	str	r0, [r1, #0]
			diskBusy = 0;
    5da0:	2000      	movs	r0, #0
			resetStringInputs = 1;
    5da2:	490d      	ldr	r1, [pc, #52]	; (5dd8 <HAL_SAI_TxHalfCpltCallback+0x138>)
			diskBusy = 0;
    5da4:	7020      	strb	r0, [r4, #0]
			resetStringInputs = 1;
    5da6:	2001      	movs	r0, #1
    5da8:	7008      	strb	r0, [r1, #0]
    5daa:	e7ae      	b.n	5d0a <HAL_SAI_TxHalfCpltCallback+0x6a>
			audioFrameFunction = audioFrameVocal;
    5dac:	4908      	ldr	r1, [pc, #32]	; (5dd0 <HAL_SAI_TxHalfCpltCallback+0x130>)
    5dae:	4810      	ldr	r0, [pc, #64]	; (5df0 <HAL_SAI_TxHalfCpltCallback+0x150>)
    5db0:	e7e6      	b.n	5d80 <HAL_SAI_TxHalfCpltCallback+0xe0>
    5db2:	bf00      	nop
    5db4:	20014cc0 	.word	0x20014cc0
    5db8:	20005884 	.word	0x20005884
    5dbc:	30000000 	.word	0x30000000
    5dc0:	20014a64 	.word	0x20014a64
    5dc4:	20000158 	.word	0x20000158
    5dc8:	2001abfc 	.word	0x2001abfc
    5dcc:	2001abfa 	.word	0x2001abfa
    5dd0:	20000a7c 	.word	0x20000a7c
    5dd4:	00005821 	.word	0x00005821
    5dd8:	20005cc6 	.word	0x20005cc6
    5ddc:	2000525c 	.word	0x2000525c
    5de0:	e000ed00 	.word	0xe000ed00
    5de4:	200149b8 	.word	0x200149b8
    5de8:	00001521 	.word	0x00001521
    5dec:	20000744 	.word	0x20000744
    5df0:	00001c41 	.word	0x00001c41
    5df4:	f3af 8000 	nop.w
    5df8:	f3af 8000 	nop.w
    5dfc:	f3af 8000 	nop.w

00005e00 <HAL_SAI_ErrorCallback>:

void __ATTR_ITCMRAM HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
}
    5e00:	4770      	bx	lr
    5e02:	bf00      	nop
	...

00005e20 <scaleDefault>:
}
    5e20:	4770      	bx	lr
    5e22:	bf00      	nop
    5e24:	f3af 8000 	nop.w
    5e28:	f3af 8000 	nop.w
    5e2c:	f3af 8000 	nop.w
    5e30:	f3af 8000 	nop.w
    5e34:	f3af 8000 	nop.w
    5e38:	f3af 8000 	nop.w
    5e3c:	f3af 8000 	nop.w

00005e40 <scaleOscPitch>:
	return ((input * 2.0f) - 1.0f);
    5e40:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    5e44:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
    5e48:	eee0 7a07 	vfma.f32	s15, s0, s14
    5e4c:	eeb0 0a67 	vmov.f32	s0, s15
    5e50:	4770      	bx	lr
    5e52:	bf00      	nop
    5e54:	f3af 8000 	nop.w
    5e58:	f3af 8000 	nop.w
    5e5c:	f3af 8000 	nop.w

00005e60 <scaleOscFine>:
	return (input * 200.0f) - 100.0f;
    5e60:	ed9f 7a04 	vldr	s14, [pc, #16]	; 5e74 <scaleOscFine+0x14>
    5e64:	eddf 7a04 	vldr	s15, [pc, #16]	; 5e78 <scaleOscFine+0x18>
}
    5e68:	eee0 7a07 	vfma.f32	s15, s0, s14
    5e6c:	eeb0 0a67 	vmov.f32	s0, s15
    5e70:	4770      	bx	lr
    5e72:	bf00      	nop
    5e74:	43480000 	.word	0x43480000
    5e78:	c2c80000 	.word	0xc2c80000
    5e7c:	f3af 8000 	nop.w

00005e80 <scaleOscFreq>:
	return (input * 4000.0f) - 2000.0f;
    5e80:	ed9f 7a04 	vldr	s14, [pc, #16]	; 5e94 <scaleOscFreq+0x14>
    5e84:	eddf 7a04 	vldr	s15, [pc, #16]	; 5e98 <scaleOscFreq+0x18>
}
    5e88:	eee0 7a07 	vfma.f32	s15, s0, s14
    5e8c:	eeb0 0a67 	vmov.f32	s0, s15
    5e90:	4770      	bx	lr
    5e92:	bf00      	nop
    5e94:	457a0000 	.word	0x457a0000
    5e98:	c4fa0000 	.word	0xc4fa0000
    5e9c:	f3af 8000 	nop.w

00005ea0 <scaleFilterCutoff>:
	return (input * 127.0f);
    5ea0:	eddf 7a02 	vldr	s15, [pc, #8]	; 5eac <scaleFilterCutoff+0xc>
}
    5ea4:	ee20 0a27 	vmul.f32	s0, s0, s15
    5ea8:	4770      	bx	lr
    5eaa:	bf00      	nop
    5eac:	42fe0000 	.word	0x42fe0000
    5eb0:	f3af 8000 	nop.w
    5eb4:	f3af 8000 	nop.w
    5eb8:	f3af 8000 	nop.w
    5ebc:	f3af 8000 	nop.w

00005ec0 <scaleFinalLowpass>:
	return ((input * 70.0f) + 58.0f);
    5ec0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 5ed4 <scaleFinalLowpass+0x14>
    5ec4:	eddf 7a04 	vldr	s15, [pc, #16]	; 5ed8 <scaleFinalLowpass+0x18>
}
    5ec8:	eee0 7a07 	vfma.f32	s15, s0, s14
    5ecc:	eeb0 0a67 	vmov.f32	s0, s15
    5ed0:	4770      	bx	lr
    5ed2:	bf00      	nop
    5ed4:	428c0000 	.word	0x428c0000
    5ed8:	42680000 	.word	0x42680000
    5edc:	f3af 8000 	nop.w

00005ee0 <blankFunction>:
}
    5ee0:	4770      	bx	lr
    5ee2:	bf00      	nop
    5ee4:	f3af 8000 	nop.w
    5ee8:	f3af 8000 	nop.w
    5eec:	f3af 8000 	nop.w
    5ef0:	f3af 8000 	nop.w
    5ef4:	f3af 8000 	nop.w
    5ef8:	f3af 8000 	nop.w
    5efc:	f3af 8000 	nop.w

00005f00 <scaleTranspose>:
{
    5f00:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.f);
    5f04:	ed9f 0a07 	vldr	s0, [pc, #28]	; 5f24 <scaleTranspose+0x24>
    5f08:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
    5f0c:	b508      	push	{r3, lr}
	input = LEAF_clip(0.0f, input, 1.f);
    5f0e:	f003 fcc7 	bl	98a0 <LEAF_clip>
	return (input * 96.0f) - 48.0f;
    5f12:	ed9f 7a05 	vldr	s14, [pc, #20]	; 5f28 <scaleTranspose+0x28>
    5f16:	eddf 7a05 	vldr	s15, [pc, #20]	; 5f2c <scaleTranspose+0x2c>
}
    5f1a:	eee0 7a07 	vfma.f32	s15, s0, s14
    5f1e:	eeb0 0a67 	vmov.f32	s0, s15
    5f22:	bd08      	pop	{r3, pc}
    5f24:	00000000 	.word	0x00000000
    5f28:	42c00000 	.word	0x42c00000
    5f2c:	c2400000 	.word	0xc2400000
    5f30:	f3af 8000 	nop.w
    5f34:	f3af 8000 	nop.w
    5f38:	f3af 8000 	nop.w
    5f3c:	f3af 8000 	nop.w

00005f40 <scalePitchBend>:
{
    5f40:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
    5f44:	ed9f 0a05 	vldr	s0, [pc, #20]	; 5f5c <scalePitchBend+0x1c>
    5f48:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
    5f4c:	b508      	push	{r3, lr}
	input = LEAF_clip(0.f, input, 1.f);
    5f4e:	f003 fca7 	bl	98a0 <LEAF_clip>
	return (input * 48.0f);
    5f52:	eddf 7a03 	vldr	s15, [pc, #12]	; 5f60 <scalePitchBend+0x20>
}
    5f56:	ee20 0a27 	vmul.f32	s0, s0, s15
    5f5a:	bd08      	pop	{r3, pc}
    5f5c:	00000000 	.word	0x00000000
    5f60:	42400000 	.word	0x42400000
    5f64:	f3af 8000 	nop.w
    5f68:	f3af 8000 	nop.w
    5f6c:	f3af 8000 	nop.w
    5f70:	f3af 8000 	nop.w
    5f74:	f3af 8000 	nop.w
    5f78:	f3af 8000 	nop.w
    5f7c:	f3af 8000 	nop.w

00005f80 <scaleFilterResonance>:
{
    5f80:	b510      	push	{r4, lr}
    5f82:	ed2d 8b02 	vpush	{d8}
    5f86:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    5f8a:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 5ff8 <scaleFilterResonance+0x78>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    5f8e:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 5ffc <scaleFilterResonance+0x7c>
	input *= 2047.0f;
    5f92:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    5f96:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    5f9a:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    5f9e:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    5fa2:	1c63      	adds	r3, r4, #1
    5fa4:	ee00 3a90 	vmov	s1, r3
    5fa8:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    5fac:	f003 fc78 	bl	98a0 <LEAF_clip>
    5fb0:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    5fb4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    5fb8:	4b11      	ldr	r3, [pc, #68]	; (6000 <scaleFilterResonance+0x80>)
	float inputFloat = (float)inputInt - input;
    5fba:	ee78 0ac8 	vsub.f32	s1, s17, s16
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    5fbe:	ed9f 0a11 	vldr	s0, [pc, #68]	; 6004 <scaleFilterResonance+0x84>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    5fc2:	ee17 2a10 	vmov	r2, s14
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    5fc6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    5fca:	ee38 8a27 	vadd.f32	s16, s16, s15
    5fce:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5fd2:	edd4 7a00 	vldr	s15, [r4]
    5fd6:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
    5fda:	ed93 7a00 	vldr	s14, [r3]
    5fde:	ee38 8a68 	vsub.f32	s16, s16, s17
    5fe2:	ee60 0a87 	vmul.f32	s1, s1, s14
    5fe6:	eee7 0a88 	vfma.f32	s1, s15, s16
}
    5fea:	ecbd 8b02 	vpop	{d8}
    5fee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    5ff2:	f003 bc55 	b.w	98a0 <LEAF_clip>
    5ff6:	bf00      	nop
    5ff8:	44ffe000 	.word	0x44ffe000
    5ffc:	00000000 	.word	0x00000000
    6000:	2001b018 	.word	0x2001b018
    6004:	3dcccccd 	.word	0x3dcccccd
    6008:	f3af 8000 	nop.w
    600c:	f3af 8000 	nop.w
    6010:	f3af 8000 	nop.w
    6014:	f3af 8000 	nop.w
    6018:	f3af 8000 	nop.w
    601c:	f3af 8000 	nop.w

00006020 <scaleEnvTimes>:
{
    6020:	b510      	push	{r4, lr}
    6022:	ed2d 8b02 	vpush	{d8}
    6026:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    602a:	ed9f 1a17 	vldr	s2, [pc, #92]	; 6088 <scaleEnvTimes+0x68>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    602e:	ed9f 0a17 	vldr	s0, [pc, #92]	; 608c <scaleEnvTimes+0x6c>
	input *= 2047.0f;
    6032:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    6036:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    603a:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    603e:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    6042:	1c63      	adds	r3, r4, #1
    6044:	ee00 3a90 	vmov	s1, r3
    6048:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    604c:	f003 fc28 	bl	98a0 <LEAF_clip>
    6050:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    6054:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    6058:	4b0d      	ldr	r3, [pc, #52]	; (6090 <scaleEnvTimes+0x70>)
	float inputFloat = (float)inputInt - input;
    605a:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    605e:	ee10 2a10 	vmov	r2, s0
    6062:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    6066:	ee38 8a07 	vadd.f32	s16, s16, s14
    606a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    606e:	ed94 7a00 	vldr	s14, [r4]
    6072:	edd3 6a00 	vldr	s13, [r3]
    6076:	ee38 8a68 	vsub.f32	s16, s16, s17
    607a:	ee27 0aa6 	vmul.f32	s0, s15, s13
}
    607e:	eea7 0a08 	vfma.f32	s0, s14, s16
    6082:	ecbd 8b02 	vpop	{d8}
    6086:	bd10      	pop	{r4, pc}
    6088:	44ffe000 	.word	0x44ffe000
    608c:	00000000 	.word	0x00000000
    6090:	20014d18 	.word	0x20014d18
    6094:	f3af 8000 	nop.w
    6098:	f3af 8000 	nop.w
    609c:	f3af 8000 	nop.w

000060a0 <scaleLFORates>:
{
    60a0:	b510      	push	{r4, lr}
    60a2:	ed2d 8b02 	vpush	{d8}
    60a6:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    60aa:	ed9f 1a17 	vldr	s2, [pc, #92]	; 6108 <scaleLFORates+0x68>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    60ae:	ed9f 0a17 	vldr	s0, [pc, #92]	; 610c <scaleLFORates+0x6c>
	input *= 2047.0f;
    60b2:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    60b6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    60ba:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    60be:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    60c2:	1c63      	adds	r3, r4, #1
    60c4:	ee00 3a90 	vmov	s1, r3
    60c8:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    60cc:	f003 fbe8 	bl	98a0 <LEAF_clip>
    60d0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    60d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    60d8:	4b0d      	ldr	r3, [pc, #52]	; (6110 <scaleLFORates+0x70>)
	float inputFloat = (float)inputInt - input;
    60da:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    60de:	ee10 2a10 	vmov	r2, s0
    60e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    60e6:	ee38 8a07 	vadd.f32	s16, s16, s14
    60ea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    60ee:	ed94 7a00 	vldr	s14, [r4]
    60f2:	edd3 6a00 	vldr	s13, [r3]
    60f6:	ee38 8a68 	vsub.f32	s16, s16, s17
    60fa:	ee27 0aa6 	vmul.f32	s0, s15, s13
}
    60fe:	eea7 0a08 	vfma.f32	s0, s14, s16
    6102:	ecbd 8b02 	vpop	{d8}
    6106:	bd10      	pop	{r4, pc}
    6108:	44ffe000 	.word	0x44ffe000
    610c:	00000000 	.word	0x00000000
    6110:	20016e44 	.word	0x20016e44
    6114:	f3af 8000 	nop.w
    6118:	f3af 8000 	nop.w
    611c:	f3af 8000 	nop.w

00006120 <randomNumber>:
float __ATTR_ITCMRAM randomNumber(void) {
    6120:	b500      	push	{lr}
    6122:	b083      	sub	sp, #12
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
    6124:	4807      	ldr	r0, [pc, #28]	; (6144 <randomNumber+0x24>)
    6126:	a901      	add	r1, sp, #4
    6128:	f004 fef6 	bl	af18 <__HAL_RNG_GenerateRandomNumber_veneer>
	float num = (float)rand * INV_TWO_TO_32;
    612c:	eddd 7a01 	vldr	s15, [sp, #4]
    6130:	ed9f 0a05 	vldr	s0, [pc, #20]	; 6148 <randomNumber+0x28>
    6134:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
    6138:	ee27 0a80 	vmul.f32	s0, s15, s0
    613c:	b003      	add	sp, #12
    613e:	f85d fb04 	ldr.w	pc, [sp], #4
    6142:	bf00      	nop
    6144:	2001d0b8 	.word	0x2001d0b8
    6148:	2f80000d 	.word	0x2f80000d
    614c:	f3af 8000 	nop.w
    6150:	f3af 8000 	nop.w
    6154:	f3af 8000 	nop.w
    6158:	f3af 8000 	nop.w
    615c:	f3af 8000 	nop.w

00006160 <scaleTwo>:
}
    6160:	ee30 0a00 	vadd.f32	s0, s0, s0
    6164:	4770      	bx	lr
    6166:	bf00      	nop
    6168:	f3af 8000 	nop.w
    616c:	f3af 8000 	nop.w
    6170:	f3af 8000 	nop.w
    6174:	f3af 8000 	nop.w
    6178:	f3af 8000 	nop.w
    617c:	f3af 8000 	nop.w

00006180 <parsePreset>:
{
    6180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6184:	460b      	mov	r3, r1
    6186:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
    6188:	2200      	movs	r2, #0
    618a:	2101      	movs	r1, #1
    618c:	48f0      	ldr	r0, [pc, #960]	; (6550 <parsePreset+0x3d0>)
{
    618e:	ed2d 8b02 	vpush	{d8}
    6192:	b08f      	sub	sp, #60	; 0x3c
    6194:	e9cd 4301 	strd	r4, r3, [sp, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
    6198:	f004 ff4a 	bl	b030 <__HAL_GPIO_WritePin_veneer>
  __ASM volatile ("cpsid i" : : : "memory");
    619c:	b672      	cpsid	i
	 presetReady = 0;
    619e:	2500      	movs	r5, #0
    61a0:	4bec      	ldr	r3, [pc, #944]	; (6554 <parsePreset+0x3d4>)
	if (buffer[bufferIndex] == 17)
    61a2:	f8df a3c8 	ldr.w	sl, [pc, #968]	; 656c <parsePreset+0x3ec>
		 audioOutBuffer[i] = 0;
    61a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    61aa:	4629      	mov	r1, r5
    61ac:	48ea      	ldr	r0, [pc, #936]	; (6558 <parsePreset+0x3d8>)
	 presetReady = 0;
    61ae:	601d      	str	r5, [r3, #0]
		 audioOutBuffer[i] = 0;
    61b0:	f005 f86a 	bl	b288 <__memset_veneer>
	if (buffer[bufferIndex] == 17)
    61b4:	f89a 4000 	ldrb.w	r4, [sl]
	audioMasterLevel = 0.0f;
    61b8:	2300      	movs	r3, #0
    61ba:	4ae8      	ldr	r2, [pc, #928]	; (655c <parsePreset+0x3dc>)
	if (buffer[bufferIndex] == 17)
    61bc:	2c11      	cmp	r4, #17
	audioMasterLevel = 0.0f;
    61be:	6013      	str	r3, [r2, #0]
	if (buffer[bufferIndex] == 17)
    61c0:	f000 844c 	beq.w	6a5c <parsePreset+0x8dc>
	uint16_t bufferIndex = 0;
    61c4:	462b      	mov	r3, r5
	uint16_t presetVersionNumber = 0;
    61c6:	9506      	str	r5, [sp, #24]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    61c8:	9a02      	ldr	r2, [sp, #8]
    61ca:	ebc2 00c2 	rsb	r0, r2, r2, lsl #3
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    61ce:	1c5a      	adds	r2, r3, #1
    61d0:	f81a 9002 	ldrb.w	r9, [sl, r2]
    61d4:	1c9a      	adds	r2, r3, #2
    61d6:	f81a 8002 	ldrb.w	r8, [sl, r2]
    61da:	1cda      	adds	r2, r3, #3
    61dc:	f81a e002 	ldrb.w	lr, [sl, r2]
    61e0:	1d1a      	adds	r2, r3, #4
    61e2:	f81a 1002 	ldrb.w	r1, [sl, r2]
    61e6:	1d5a      	adds	r2, r3, #5
    61e8:	f81a 5002 	ldrb.w	r5, [sl, r2]
    61ec:	1d9a      	adds	r2, r3, #6
    61ee:	9103      	str	r1, [sp, #12]
    61f0:	f81a c002 	ldrb.w	ip, [sl, r2]
    61f4:	1dda      	adds	r2, r3, #7
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    61f6:	49da      	ldr	r1, [pc, #872]	; (6560 <parsePreset+0x3e0>)
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    61f8:	f81a b002 	ldrb.w	fp, [sl, r2]
    61fc:	f103 0208 	add.w	r2, r3, #8
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    6200:	460e      	mov	r6, r1
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    6202:	9504      	str	r5, [sp, #16]
    6204:	f81a 7002 	ldrb.w	r7, [sl, r2]
    6208:	f103 0209 	add.w	r2, r3, #9
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    620c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    6210:	f81a 2002 	ldrb.w	r2, [sl, r2]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    6214:	0040      	lsls	r0, r0, #1
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    6216:	9205      	str	r2, [sp, #20]
    6218:	f103 020a 	add.w	r2, r3, #10
    621c:	f81a 5002 	ldrb.w	r5, [sl, r2]
		presetName[i] = buffer[bufferIndex];
    6220:	4ad0      	ldr	r2, [pc, #832]	; (6564 <parsePreset+0x3e4>)
    6222:	7014      	strb	r4, [r2, #0]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    6224:	5434      	strb	r4, [r6, r0]
		presetName[i] = buffer[bufferIndex];
    6226:	9c03      	ldr	r4, [sp, #12]
    6228:	f882 9001 	strb.w	r9, [r2, #1]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    622c:	f881 9001 	strb.w	r9, [r1, #1]
		presetName[i] = buffer[bufferIndex];
    6230:	f882 8002 	strb.w	r8, [r2, #2]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    6234:	f881 8002 	strb.w	r8, [r1, #2]
		presetName[i] = buffer[bufferIndex];
    6238:	f882 e003 	strb.w	lr, [r2, #3]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    623c:	f881 e003 	strb.w	lr, [r1, #3]
		presetName[i] = buffer[bufferIndex];
    6240:	7114      	strb	r4, [r2, #4]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    6242:	710c      	strb	r4, [r1, #4]
		presetName[i] = buffer[bufferIndex];
    6244:	9c04      	ldr	r4, [sp, #16]
    6246:	7154      	strb	r4, [r2, #5]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    6248:	714c      	strb	r4, [r1, #5]
		presetName[i] = buffer[bufferIndex];
    624a:	f882 c006 	strb.w	ip, [r2, #6]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    624e:	f881 c006 	strb.w	ip, [r1, #6]
		presetName[i] = buffer[bufferIndex];
    6252:	f882 b007 	strb.w	fp, [r2, #7]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    6256:	f881 b007 	strb.w	fp, [r1, #7]
		presetName[i] = buffer[bufferIndex];
    625a:	7217      	strb	r7, [r2, #8]
    625c:	9805      	ldr	r0, [sp, #20]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    625e:	720f      	strb	r7, [r1, #8]
		presetName[i] = buffer[bufferIndex];
    6260:	7250      	strb	r0, [r2, #9]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    6262:	7248      	strb	r0, [r1, #9]
		presetName[i] = buffer[bufferIndex];
    6264:	7295      	strb	r5, [r2, #10]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    6266:	728d      	strb	r5, [r1, #10]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    6268:	f103 050b 	add.w	r5, r3, #11
    626c:	9802      	ldr	r0, [sp, #8]
    626e:	f81a 5005 	ldrb.w	r5, [sl, r5]
    6272:	4cbd      	ldr	r4, [pc, #756]	; (6568 <parsePreset+0x3e8>)
    6274:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
		presetName[i] = buffer[bufferIndex];
    6278:	72d5      	strb	r5, [r2, #11]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    627a:	72cd      	strb	r5, [r1, #11]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    627c:	f103 050c 	add.w	r5, r3, #12
    6280:	f81a 5005 	ldrb.w	r5, [sl, r5]
		presetName[i] = buffer[bufferIndex];
    6284:	7315      	strb	r5, [r2, #12]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    6286:	730d      	strb	r5, [r1, #12]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    6288:	f103 050d 	add.w	r5, r3, #13
    628c:	f81a 5005 	ldrb.w	r5, [sl, r5]
		presetName[i] = buffer[bufferIndex];
    6290:	7355      	strb	r5, [r2, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    6292:	f103 020e 	add.w	r2, r3, #14
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    6296:	734d      	strb	r5, [r1, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    6298:	f81a 2002 	ldrb.w	r2, [sl, r2]
    629c:	4611      	mov	r1, r2
    629e:	f103 020f 	add.w	r2, r3, #15
    62a2:	f81a 9002 	ldrb.w	r9, [sl, r2]
    62a6:	f103 0210 	add.w	r2, r3, #16
    62aa:	f81a 8002 	ldrb.w	r8, [sl, r2]
    62ae:	f103 0211 	add.w	r2, r3, #17
    62b2:	f81a b002 	ldrb.w	fp, [sl, r2]
    62b6:	f103 0212 	add.w	r2, r3, #18
    62ba:	f81a 5002 	ldrb.w	r5, [sl, r2]
    62be:	f103 0213 	add.w	r2, r3, #19
    62c2:	f81a 6002 	ldrb.w	r6, [sl, r2]
    62c6:	f103 0214 	add.w	r2, r3, #20
    62ca:	9505      	str	r5, [sp, #20]
    62cc:	f81a e002 	ldrb.w	lr, [sl, r2]
    62d0:	f103 0215 	add.w	r2, r3, #21
    62d4:	9604      	str	r6, [sp, #16]
    62d6:	f81a c002 	ldrb.w	ip, [sl, r2]
    62da:	f103 0216 	add.w	r2, r3, #22
    62de:	f81a 7002 	ldrb.w	r7, [sl, r2]
    62e2:	f103 0217 	add.w	r2, r3, #23
    62e6:	f81a 6002 	ldrb.w	r6, [sl, r2]
    62ea:	f103 0218 	add.w	r2, r3, #24
    62ee:	f81a 5002 	ldrb.w	r5, [sl, r2]
    62f2:	f103 0219 	add.w	r2, r3, #25
    62f6:	f81a 2002 	ldrb.w	r2, [sl, r2]
    62fa:	9203      	str	r2, [sp, #12]
    62fc:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    6300:	00c0      	lsls	r0, r0, #3
    6302:	5421      	strb	r1, [r4, r0]
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    6304:	f103 007e 	add.w	r0, r3, #126	; 0x7e
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    6308:	f882 9001 	strb.w	r9, [r2, #1]
    630c:	9905      	ldr	r1, [sp, #20]
    630e:	f882 8002 	strb.w	r8, [r2, #2]
    6312:	f882 b003 	strb.w	fp, [r2, #3]
    6316:	7111      	strb	r1, [r2, #4]
    6318:	9904      	ldr	r1, [sp, #16]
    631a:	7151      	strb	r1, [r2, #5]
    631c:	9903      	ldr	r1, [sp, #12]
    631e:	f882 e006 	strb.w	lr, [r2, #6]
    6322:	f882 c007 	strb.w	ip, [r2, #7]
    6326:	7217      	strb	r7, [r2, #8]
    6328:	7296      	strb	r6, [r2, #10]
    632a:	72d5      	strb	r5, [r2, #11]
    632c:	7311      	strb	r1, [r2, #12]
    632e:	f103 011a 	add.w	r1, r3, #26
    6332:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6336:	7351      	strb	r1, [r2, #13]
    6338:	f103 011b 	add.w	r1, r3, #27
    633c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6340:	7391      	strb	r1, [r2, #14]
    6342:	f103 011c 	add.w	r1, r3, #28
    6346:	f81a 1001 	ldrb.w	r1, [sl, r1]
    634a:	73d1      	strb	r1, [r2, #15]
    634c:	f103 011d 	add.w	r1, r3, #29
    6350:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6354:	7411      	strb	r1, [r2, #16]
    6356:	f103 011e 	add.w	r1, r3, #30
    635a:	f81a 1001 	ldrb.w	r1, [sl, r1]
    635e:	7451      	strb	r1, [r2, #17]
    6360:	f103 011f 	add.w	r1, r3, #31
    6364:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6368:	7491      	strb	r1, [r2, #18]
    636a:	f103 0120 	add.w	r1, r3, #32
    636e:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6372:	7511      	strb	r1, [r2, #20]
    6374:	f103 0121 	add.w	r1, r3, #33	; 0x21
    6378:	f81a 1001 	ldrb.w	r1, [sl, r1]
    637c:	7551      	strb	r1, [r2, #21]
    637e:	f103 0122 	add.w	r1, r3, #34	; 0x22
    6382:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6386:	7591      	strb	r1, [r2, #22]
    6388:	f103 0123 	add.w	r1, r3, #35	; 0x23
    638c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6390:	75d1      	strb	r1, [r2, #23]
    6392:	f103 0124 	add.w	r1, r3, #36	; 0x24
    6396:	f81a 1001 	ldrb.w	r1, [sl, r1]
    639a:	7611      	strb	r1, [r2, #24]
    639c:	f103 0125 	add.w	r1, r3, #37	; 0x25
    63a0:	f81a 1001 	ldrb.w	r1, [sl, r1]
    63a4:	7651      	strb	r1, [r2, #25]
    63a6:	f103 0126 	add.w	r1, r3, #38	; 0x26
    63aa:	f81a 1001 	ldrb.w	r1, [sl, r1]
    63ae:	7691      	strb	r1, [r2, #26]
    63b0:	f103 0127 	add.w	r1, r3, #39	; 0x27
    63b4:	f81a 1001 	ldrb.w	r1, [sl, r1]
    63b8:	76d1      	strb	r1, [r2, #27]
    63ba:	f103 0128 	add.w	r1, r3, #40	; 0x28
    63be:	f81a 1001 	ldrb.w	r1, [sl, r1]
    63c2:	7711      	strb	r1, [r2, #28]
    63c4:	f103 0129 	add.w	r1, r3, #41	; 0x29
    63c8:	f81a 1001 	ldrb.w	r1, [sl, r1]
    63cc:	7791      	strb	r1, [r2, #30]
    63ce:	f103 012a 	add.w	r1, r3, #42	; 0x2a
    63d2:	f81a 1001 	ldrb.w	r1, [sl, r1]
    63d6:	77d1      	strb	r1, [r2, #31]
    63d8:	f103 012b 	add.w	r1, r3, #43	; 0x2b
    63dc:	f81a 1001 	ldrb.w	r1, [sl, r1]
    63e0:	f882 1020 	strb.w	r1, [r2, #32]
    63e4:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    63e8:	f81a 1001 	ldrb.w	r1, [sl, r1]
    63ec:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
    63f0:	f103 012d 	add.w	r1, r3, #45	; 0x2d
    63f4:	f81a 1001 	ldrb.w	r1, [sl, r1]
    63f8:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    63fc:	f103 012e 	add.w	r1, r3, #46	; 0x2e
    6400:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6404:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    6408:	f103 012f 	add.w	r1, r3, #47	; 0x2f
    640c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6410:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
    6414:	f103 0130 	add.w	r1, r3, #48	; 0x30
    6418:	f81a 1001 	ldrb.w	r1, [sl, r1]
    641c:	f882 1025 	strb.w	r1, [r2, #37]	; 0x25
    6420:	f103 0131 	add.w	r1, r3, #49	; 0x31
    6424:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6428:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
    642c:	f103 0132 	add.w	r1, r3, #50	; 0x32
    6430:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6434:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    6438:	f103 0133 	add.w	r1, r3, #51	; 0x33
    643c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6440:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
    6444:	f103 0134 	add.w	r1, r3, #52	; 0x34
    6448:	f81a 1001 	ldrb.w	r1, [sl, r1]
    644c:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
    6450:	f103 0135 	add.w	r1, r3, #53	; 0x35
    6454:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6458:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    645c:	f103 0136 	add.w	r1, r3, #54	; 0x36
    6460:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6464:	f882 102c 	strb.w	r1, [r2, #44]	; 0x2c
    6468:	f103 0137 	add.w	r1, r3, #55	; 0x37
    646c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6470:	f882 102d 	strb.w	r1, [r2, #45]	; 0x2d
    6474:	f103 0138 	add.w	r1, r3, #56	; 0x38
    6478:	f81a 1001 	ldrb.w	r1, [sl, r1]
    647c:	f882 102e 	strb.w	r1, [r2, #46]	; 0x2e
    6480:	f103 0139 	add.w	r1, r3, #57	; 0x39
    6484:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6488:	f882 102f 	strb.w	r1, [r2, #47]	; 0x2f
    648c:	f103 013a 	add.w	r1, r3, #58	; 0x3a
    6490:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6494:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    6498:	f103 013b 	add.w	r1, r3, #59	; 0x3b
    649c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    64a0:	f882 1032 	strb.w	r1, [r2, #50]	; 0x32
    64a4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    64a8:	f81a 1001 	ldrb.w	r1, [sl, r1]
    64ac:	f882 1033 	strb.w	r1, [r2, #51]	; 0x33
    64b0:	f103 013d 	add.w	r1, r3, #61	; 0x3d
    64b4:	f81a 1001 	ldrb.w	r1, [sl, r1]
    64b8:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
    64bc:	f103 013e 	add.w	r1, r3, #62	; 0x3e
    64c0:	f81a 1001 	ldrb.w	r1, [sl, r1]
    64c4:	f882 1035 	strb.w	r1, [r2, #53]	; 0x35
    64c8:	f103 013f 	add.w	r1, r3, #63	; 0x3f
    64cc:	f81a 1001 	ldrb.w	r1, [sl, r1]
    64d0:	f882 1036 	strb.w	r1, [r2, #54]	; 0x36
    64d4:	f103 0140 	add.w	r1, r3, #64	; 0x40
    64d8:	f81a 1001 	ldrb.w	r1, [sl, r1]
    64dc:	f882 1037 	strb.w	r1, [r2, #55]	; 0x37
    64e0:	f103 0141 	add.w	r1, r3, #65	; 0x41
    64e4:	f81a 1001 	ldrb.w	r1, [sl, r1]
    64e8:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
    64ec:	f103 0142 	add.w	r1, r3, #66	; 0x42
    64f0:	f81a 1001 	ldrb.w	r1, [sl, r1]
    64f4:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39
    64f8:	f103 0143 	add.w	r1, r3, #67	; 0x43
    64fc:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6500:	f882 103a 	strb.w	r1, [r2, #58]	; 0x3a
    6504:	f103 0144 	add.w	r1, r3, #68	; 0x44
    6508:	f81a 1001 	ldrb.w	r1, [sl, r1]
    650c:	f8df a05c 	ldr.w	sl, [pc, #92]	; 656c <parsePreset+0x3ec>
    6510:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
    6514:	f103 0145 	add.w	r1, r3, #69	; 0x45
    6518:	f81a 1001 	ldrb.w	r1, [sl, r1]
    651c:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    6520:	f103 0146 	add.w	r1, r3, #70	; 0x46
    6524:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6528:	f882 103e 	strb.w	r1, [r2, #62]	; 0x3e
    652c:	f103 0147 	add.w	r1, r3, #71	; 0x47
    6530:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6534:	f882 103f 	strb.w	r1, [r2, #63]	; 0x3f
    6538:	f103 0148 	add.w	r1, r3, #72	; 0x48
    653c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6540:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    6544:	f103 0149 	add.w	r1, r3, #73	; 0x49
    6548:	f81a 1001 	ldrb.w	r1, [sl, r1]
    654c:	e010      	b.n	6570 <parsePreset+0x3f0>
    654e:	bf00      	nop
    6550:	58020000 	.word	0x58020000
    6554:	20005884 	.word	0x20005884
    6558:	30000000 	.word	0x30000000
    655c:	20000740 	.word	0x20000740
    6560:	30042000 	.word	0x30042000
    6564:	2001abec 	.word	0x2001abec
    6568:	30043380 	.word	0x30043380
    656c:	30042380 	.word	0x30042380
    6570:	f882 1041 	strb.w	r1, [r2, #65]	; 0x41
    6574:	f103 014a 	add.w	r1, r3, #74	; 0x4a
    6578:	f81a 1001 	ldrb.w	r1, [sl, r1]
    657c:	f882 1042 	strb.w	r1, [r2, #66]	; 0x42
    6580:	f103 014b 	add.w	r1, r3, #75	; 0x4b
    6584:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6588:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    658c:	f103 014c 	add.w	r1, r3, #76	; 0x4c
    6590:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6594:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
    6598:	f103 014d 	add.w	r1, r3, #77	; 0x4d
    659c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    65a0:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
    65a4:	f103 014e 	add.w	r1, r3, #78	; 0x4e
    65a8:	f81a 1001 	ldrb.w	r1, [sl, r1]
    65ac:	f882 1047 	strb.w	r1, [r2, #71]	; 0x47
    65b0:	f103 014f 	add.w	r1, r3, #79	; 0x4f
    65b4:	f81a 1001 	ldrb.w	r1, [sl, r1]
    65b8:	f882 1048 	strb.w	r1, [r2, #72]	; 0x48
    65bc:	f103 0150 	add.w	r1, r3, #80	; 0x50
    65c0:	f81a 1001 	ldrb.w	r1, [sl, r1]
    65c4:	f882 1049 	strb.w	r1, [r2, #73]	; 0x49
    65c8:	f103 0151 	add.w	r1, r3, #81	; 0x51
    65cc:	f81a 1001 	ldrb.w	r1, [sl, r1]
    65d0:	f882 104a 	strb.w	r1, [r2, #74]	; 0x4a
    65d4:	f103 0152 	add.w	r1, r3, #82	; 0x52
    65d8:	f81a 1001 	ldrb.w	r1, [sl, r1]
    65dc:	f882 104b 	strb.w	r1, [r2, #75]	; 0x4b
    65e0:	f103 0153 	add.w	r1, r3, #83	; 0x53
    65e4:	f81a 1001 	ldrb.w	r1, [sl, r1]
    65e8:	f882 104c 	strb.w	r1, [r2, #76]	; 0x4c
    65ec:	f103 0154 	add.w	r1, r3, #84	; 0x54
    65f0:	f81a 1001 	ldrb.w	r1, [sl, r1]
    65f4:	f882 104d 	strb.w	r1, [r2, #77]	; 0x4d
    65f8:	f103 0155 	add.w	r1, r3, #85	; 0x55
    65fc:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6600:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    6604:	f103 0156 	add.w	r1, r3, #86	; 0x56
    6608:	f81a 1001 	ldrb.w	r1, [sl, r1]
    660c:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50
    6610:	f103 0157 	add.w	r1, r3, #87	; 0x57
    6614:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6618:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
    661c:	f103 0158 	add.w	r1, r3, #88	; 0x58
    6620:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6624:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
    6628:	f103 0159 	add.w	r1, r3, #89	; 0x59
    662c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6630:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
    6634:	f103 015a 	add.w	r1, r3, #90	; 0x5a
    6638:	f81a 1001 	ldrb.w	r1, [sl, r1]
    663c:	f882 1054 	strb.w	r1, [r2, #84]	; 0x54
    6640:	f103 015b 	add.w	r1, r3, #91	; 0x5b
    6644:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6648:	f882 1055 	strb.w	r1, [r2, #85]	; 0x55
    664c:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    6650:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6654:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
    6658:	f103 015d 	add.w	r1, r3, #93	; 0x5d
    665c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6660:	f882 1057 	strb.w	r1, [r2, #87]	; 0x57
    6664:	f103 015e 	add.w	r1, r3, #94	; 0x5e
    6668:	f81a 1001 	ldrb.w	r1, [sl, r1]
    666c:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
    6670:	f103 015f 	add.w	r1, r3, #95	; 0x5f
    6674:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6678:	f882 1059 	strb.w	r1, [r2, #89]	; 0x59
    667c:	f103 0160 	add.w	r1, r3, #96	; 0x60
    6680:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6684:	f882 105a 	strb.w	r1, [r2, #90]	; 0x5a
    6688:	f103 0161 	add.w	r1, r3, #97	; 0x61
    668c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6690:	f882 105b 	strb.w	r1, [r2, #91]	; 0x5b
    6694:	f103 0162 	add.w	r1, r3, #98	; 0x62
    6698:	f81a 1001 	ldrb.w	r1, [sl, r1]
    669c:	f882 105c 	strb.w	r1, [r2, #92]	; 0x5c
    66a0:	f103 0163 	add.w	r1, r3, #99	; 0x63
    66a4:	f81a 1001 	ldrb.w	r1, [sl, r1]
    66a8:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    66ac:	f103 0164 	add.w	r1, r3, #100	; 0x64
    66b0:	f81a 1001 	ldrb.w	r1, [sl, r1]
    66b4:	f882 105e 	strb.w	r1, [r2, #94]	; 0x5e
    66b8:	f103 0165 	add.w	r1, r3, #101	; 0x65
    66bc:	f81a 1001 	ldrb.w	r1, [sl, r1]
    66c0:	f882 105f 	strb.w	r1, [r2, #95]	; 0x5f
    66c4:	f103 0166 	add.w	r1, r3, #102	; 0x66
    66c8:	f81a 1001 	ldrb.w	r1, [sl, r1]
    66cc:	f882 1060 	strb.w	r1, [r2, #96]	; 0x60
    66d0:	f103 0167 	add.w	r1, r3, #103	; 0x67
    66d4:	f81a 1001 	ldrb.w	r1, [sl, r1]
    66d8:	f882 1061 	strb.w	r1, [r2, #97]	; 0x61
    66dc:	f103 0168 	add.w	r1, r3, #104	; 0x68
    66e0:	f81a 1001 	ldrb.w	r1, [sl, r1]
    66e4:	f882 1062 	strb.w	r1, [r2, #98]	; 0x62
    66e8:	f103 0169 	add.w	r1, r3, #105	; 0x69
    66ec:	f81a 1001 	ldrb.w	r1, [sl, r1]
    66f0:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
    66f4:	f103 016a 	add.w	r1, r3, #106	; 0x6a
    66f8:	f81a 1001 	ldrb.w	r1, [sl, r1]
    66fc:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
    6700:	f103 016b 	add.w	r1, r3, #107	; 0x6b
    6704:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6708:	f882 1065 	strb.w	r1, [r2, #101]	; 0x65
    670c:	f103 016c 	add.w	r1, r3, #108	; 0x6c
    6710:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6714:	f882 1066 	strb.w	r1, [r2, #102]	; 0x66
    6718:	f103 016d 	add.w	r1, r3, #109	; 0x6d
    671c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6720:	f882 1067 	strb.w	r1, [r2, #103]	; 0x67
    6724:	f103 016e 	add.w	r1, r3, #110	; 0x6e
    6728:	f81a 1001 	ldrb.w	r1, [sl, r1]
    672c:	f882 1068 	strb.w	r1, [r2, #104]	; 0x68
    6730:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    6734:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6738:	f882 1069 	strb.w	r1, [r2, #105]	; 0x69
    673c:	f103 0170 	add.w	r1, r3, #112	; 0x70
    6740:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6744:	f882 106a 	strb.w	r1, [r2, #106]	; 0x6a
    6748:	f103 0171 	add.w	r1, r3, #113	; 0x71
    674c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6750:	f882 106b 	strb.w	r1, [r2, #107]	; 0x6b
    6754:	f103 0172 	add.w	r1, r3, #114	; 0x72
    6758:	f81a 1001 	ldrb.w	r1, [sl, r1]
    675c:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
    6760:	f103 0173 	add.w	r1, r3, #115	; 0x73
    6764:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6768:	f882 106d 	strb.w	r1, [r2, #109]	; 0x6d
    676c:	f103 0174 	add.w	r1, r3, #116	; 0x74
    6770:	f81a 1001 	ldrb.w	r1, [sl, r1]
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    6774:	f81a 4000 	ldrb.w	r4, [sl, r0]
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    6778:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
    677c:	f103 0175 	add.w	r1, r3, #117	; 0x75
    6780:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6784:	f882 106f 	strb.w	r1, [r2, #111]	; 0x6f
    6788:	f103 0176 	add.w	r1, r3, #118	; 0x76
    678c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    6790:	f882 1070 	strb.w	r1, [r2, #112]	; 0x70
    6794:	f103 0177 	add.w	r1, r3, #119	; 0x77
    6798:	f81a 1001 	ldrb.w	r1, [sl, r1]
    679c:	f882 1071 	strb.w	r1, [r2, #113]	; 0x71
    67a0:	f103 0178 	add.w	r1, r3, #120	; 0x78
    67a4:	f81a 1001 	ldrb.w	r1, [sl, r1]
    67a8:	f882 1072 	strb.w	r1, [r2, #114]	; 0x72
    67ac:	f103 0179 	add.w	r1, r3, #121	; 0x79
    67b0:	f81a 1001 	ldrb.w	r1, [sl, r1]
    67b4:	f882 1073 	strb.w	r1, [r2, #115]	; 0x73
    67b8:	f103 017a 	add.w	r1, r3, #122	; 0x7a
    67bc:	f81a 1001 	ldrb.w	r1, [sl, r1]
    67c0:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    67c4:	eb0a 0100 	add.w	r1, sl, r0
    67c8:	7849      	ldrb	r1, [r1, #1]
    67ca:	eb01 2104 	add.w	r1, r1, r4, lsl #8
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    67ce:	f103 047b 	add.w	r4, r3, #123	; 0x7b
    67d2:	f81a 4004 	ldrb.w	r4, [sl, r4]
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    67d6:	b289      	uxth	r1, r1
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    67d8:	f882 4075 	strb.w	r4, [r2, #117]	; 0x75
    67dc:	f103 047c 	add.w	r4, r3, #124	; 0x7c
    67e0:	f81a 4004 	ldrb.w	r4, [sl, r4]
    67e4:	f882 4076 	strb.w	r4, [r2, #118]	; 0x76
    67e8:	f103 047d 	add.w	r4, r3, #125	; 0x7d
    67ec:	f81a 4004 	ldrb.w	r4, [sl, r4]
    67f0:	f882 4077 	strb.w	r4, [r2, #119]	; 0x77
	if (paramCount > size)
    67f4:	9a01      	ldr	r2, [sp, #4]
    67f6:	4291      	cmp	r1, r2
    67f8:	dc0c      	bgt.n	6814 <parsePreset+0x694>
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
    67fa:	eb00 0241 	add.w	r2, r0, r1, lsl #1
	if (paramEndCheck != 0xefef)
    67fe:	f64e 75ef 	movw	r5, #61423	; 0xefef
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
    6802:	004c      	lsls	r4, r1, #1
    6804:	4452      	add	r2, sl
    6806:	7896      	ldrb	r6, [r2, #2]
    6808:	78d0      	ldrb	r0, [r2, #3]
    680a:	eb00 2006 	add.w	r0, r0, r6, lsl #8
	if (paramEndCheck != 0xefef)
    680e:	b280      	uxth	r0, r0
    6810:	42a8      	cmp	r0, r5
    6812:	d00c      	beq.n	682e <parsePreset+0x6ae>
		audioMasterLevel = 1.0f;
    6814:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
		presetWaitingToParse = 0;
    6818:	4bb9      	ldr	r3, [pc, #740]	; (6b00 <parsePreset+0x980>)
    681a:	2200      	movs	r2, #0
		audioMasterLevel = 1.0f;
    681c:	48b9      	ldr	r0, [pc, #740]	; (6b04 <parsePreset+0x984>)
    681e:	6001      	str	r1, [r0, #0]
		presetWaitingToParse = 0;
    6820:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
    6822:	b662      	cpsie	i
}
    6824:	b00f      	add	sp, #60	; 0x3c
    6826:	ecbd 8b02 	vpop	{d8}
    682a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
    682e:	7910      	ldrb	r0, [r2, #4]
    6830:	7952      	ldrb	r2, [r2, #5]
    6832:	eb02 2200 	add.w	r2, r2, r0, lsl #8
    6836:	b290      	uxth	r0, r2
	if (presetVersionNumber == 0)
    6838:	9a06      	ldr	r2, [sp, #24]
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
    683a:	9007      	str	r0, [sp, #28]
	if (presetVersionNumber == 0)
    683c:	2a00      	cmp	r2, #0
    683e:	f000 8117 	beq.w	6a70 <parsePreset+0x8f0>
		mappingEndLocation = (paramCount * 2) + (mappingCount * 6) + bufferIndex+6;
    6842:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    6846:	f103 0284 	add.w	r2, r3, #132	; 0x84
    684a:	4408      	add	r0, r1
    684c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
    6850:	b292      	uxth	r2, r2
	if (mappingEndLocation > size)
    6852:	9801      	ldr	r0, [sp, #4]
    6854:	4282      	cmp	r2, r0
    6856:	dcdd      	bgt.n	6814 <parsePreset+0x694>
	uint16_t mappingEndCheck = (buffer[mappingEndLocation] << 8) + buffer[mappingEndLocation+1];
    6858:	eb0a 0502 	add.w	r5, sl, r2
    685c:	f81a 0002 	ldrb.w	r0, [sl, r2]
    6860:	786a      	ldrb	r2, [r5, #1]
    6862:	eb02 2200 	add.w	r2, r2, r0, lsl #8
	if (mappingEndCheck != 0xfefe) //this check value is 0xfefe
    6866:	f64f 60fe 	movw	r0, #65278	; 0xfefe
    686a:	b292      	uxth	r2, r2
    686c:	4282      	cmp	r2, r0
    686e:	d1d1      	bne.n	6814 <parsePreset+0x694>
	bufferIndex = bufferIndex + 2;
    6870:	f103 0780 	add.w	r7, r3, #128	; 0x80
    6874:	463d      	mov	r5, r7
	for (int i = 0; i < paramCount; i++)
    6876:	2900      	cmp	r1, #0
    6878:	f000 86e6 	beq.w	7648 <parsePreset+0x14c8>
    687c:	4427      	add	r7, r4
    687e:	48a2      	ldr	r0, [pc, #648]	; (6b08 <parsePreset+0x988>)
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    6880:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 6b0c <parsePreset+0x98c>
    6884:	b2bf      	uxth	r7, r7
	for (int i = 0; i < paramCount; i++)
    6886:	4681      	mov	r9, r0
    6888:	4604      	mov	r4, r0
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    688a:	eb0a 0205 	add.w	r2, sl, r5
    688e:	f81a 6005 	ldrb.w	r6, [sl, r5]
		bufferIndex += 2;
    6892:	3502      	adds	r5, #2
	for (int i = 0; i < paramCount; i++)
    6894:	341c      	adds	r4, #28
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    6896:	7852      	ldrb	r2, [r2, #1]
		bufferIndex += 2;
    6898:	b2ad      	uxth	r5, r5
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    689a:	eb02 2206 	add.w	r2, r2, r6, lsl #8
	for (int i = 0; i < paramCount; i++)
    689e:	42af      	cmp	r7, r5
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    68a0:	ee07 2a90 	vmov	s15, r2
    68a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    68a8:	ee67 7a87 	vmul.f32	s15, s15, s14
    68ac:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
    68b0:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
	for (int i = 0; i < paramCount; i++)
    68b4:	d1e9      	bne.n	688a <parsePreset+0x70a>
    68b6:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
    68ba:	4a93      	ldr	r2, [pc, #588]	; (6b08 <parsePreset+0x988>)
    68bc:	4e94      	ldr	r6, [pc, #592]	; (6b10 <parsePreset+0x990>)
    68be:	eb00 0484 	add.w	r4, r0, r4, lsl #2
		params[i].setParam = &blankFunction;
    68c2:	6156      	str	r6, [r2, #20]
	for (int i = 0; i < paramCount; i++)
    68c4:	321c      	adds	r2, #28
    68c6:	4294      	cmp	r4, r2
    68c8:	d1fb      	bne.n	68c2 <parsePreset+0x742>
    68ca:	4a92      	ldr	r2, [pc, #584]	; (6b14 <parsePreset+0x994>)
		params[i].scaleFunc = &scaleDefault;
    68cc:	6102      	str	r2, [r0, #16]
	for (int i = 0; i < paramCount; i++)
    68ce:	301c      	adds	r0, #28
    68d0:	42a0      	cmp	r0, r4
    68d2:	d1fb      	bne.n	68cc <parsePreset+0x74c>
		bufferIndex += 2;
    68d4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    68d8:	3380      	adds	r3, #128	; 0x80
    68da:	b29d      	uxth	r5, r3
	for (int i = paramCount; i < NUM_PARAMS; i++)
    68dc:	299c      	cmp	r1, #156	; 0x9c
    68de:	f000 86b0 	beq.w	7642 <parsePreset+0x14c2>
    68e2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    68e6:	4c8c      	ldr	r4, [pc, #560]	; (6b18 <parsePreset+0x998>)
    68e8:	4e89      	ldr	r6, [pc, #548]	; (6b10 <parsePreset+0x990>)
    68ea:	eb09 0381 	add.w	r3, r9, r1, lsl #2
    68ee:	4a89      	ldr	r2, [pc, #548]	; (6b14 <parsePreset+0x994>)
			params[i].zeroToOneVal[v] = 0.0f;
    68f0:	2100      	movs	r1, #0
    68f2:	6019      	str	r1, [r3, #0]
    68f4:	6059      	str	r1, [r3, #4]
		params[i].setParam = &blankFunction;
    68f6:	e9c3 2604 	strd	r2, r6, [r3, #16]
	for (int i = paramCount; i < NUM_PARAMS; i++)
    68fa:	331c      	adds	r3, #28
    68fc:	429c      	cmp	r4, r3
    68fe:	d1f8      	bne.n	68f2 <parsePreset+0x772>
	params[Osc1Fine].scaleFunc = &scaleOscFine;
    6900:	4a86      	ldr	r2, [pc, #536]	; (6b1c <parsePreset+0x99c>)
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    6902:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
    6906:	4b86      	ldr	r3, [pc, #536]	; (6b20 <parsePreset+0x9a0>)
	for (int i = 0; i < NUM_EFFECT; i++)
    6908:	2700      	movs	r7, #0
	params[Osc1Fine].scaleFunc = &scaleOscFine;
    690a:	f8c9 22e8 	str.w	r2, [r9, #744]	; 0x2e8
	params[Osc2Fine].scaleFunc = &scaleOscFine;
    690e:	f8c9 2454 	str.w	r2, [r9, #1108]	; 0x454
	params[Osc3Fine].scaleFunc = &scaleOscFine;
    6912:	f8c9 25c0 	str.w	r2, [r9, #1472]	; 0x5c0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
    6916:	4a83      	ldr	r2, [pc, #524]	; (6b24 <parsePreset+0x9a4>)
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
    6918:	f8c9 3be0 	str.w	r3, [r9, #3040]	; 0xbe0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
    691c:	f8c9 2304 	str.w	r2, [r9, #772]	; 0x304
	params[Osc2Freq].scaleFunc = &scaleOscFreq;
    6920:	f8c9 2470 	str.w	r2, [r9, #1136]	; 0x470
	params[Osc3Freq].scaleFunc = &scaleOscFreq;
    6924:	f8c9 25dc 	str.w	r2, [r9, #1500]	; 0x5dc
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
    6928:	4a7f      	ldr	r2, [pc, #508]	; (6b28 <parsePreset+0x9a8>)
	params[Envelope1Decay].scaleFunc = &scaleEnvTimes;
    692a:	f8c9 3bfc 	str.w	r3, [r9, #3068]	; 0xbfc
	params[Envelope1Release].scaleFunc = &scaleEnvTimes;
    692e:	f8c9 3c34 	str.w	r3, [r9, #3124]	; 0xc34
	params[Envelope2Attack].scaleFunc = &scaleEnvTimes;
    6932:	f8c9 3c88 	str.w	r3, [r9, #3208]	; 0xc88
	params[Envelope2Decay].scaleFunc = &scaleEnvTimes;
    6936:	f8c9 3ca4 	str.w	r3, [r9, #3236]	; 0xca4
	params[Envelope2Release].scaleFunc = &scaleEnvTimes;
    693a:	f8c9 3cdc 	str.w	r3, [r9, #3292]	; 0xcdc
	params[Envelope3Attack].scaleFunc = &scaleEnvTimes;
    693e:	f8c9 3d30 	str.w	r3, [r9, #3376]	; 0xd30
	params[Envelope3Decay].scaleFunc = &scaleEnvTimes;
    6942:	f8c9 3d4c 	str.w	r3, [r9, #3404]	; 0xd4c
	params[Envelope3Release].scaleFunc = &scaleEnvTimes;
    6946:	f8c9 3d84 	str.w	r3, [r9, #3460]	; 0xd84
	params[Envelope4Attack].scaleFunc = &scaleEnvTimes;
    694a:	f8c9 3dd8 	str.w	r3, [r9, #3544]	; 0xdd8
	params[Envelope4Decay].scaleFunc = &scaleEnvTimes;
    694e:	f8c9 3df4 	str.w	r3, [r9, #3572]	; 0xdf4
	params[Envelope4Release].scaleFunc = &scaleEnvTimes;
    6952:	f8c9 3e2c 	str.w	r3, [r9, #3628]	; 0xe2c
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
    6956:	f8c9 2aac 	str.w	r2, [r9, #2732]	; 0xaac
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    695a:	4b74      	ldr	r3, [pc, #464]	; (6b2c <parsePreset+0x9ac>)
	params[Filter2Cutoff].scaleFunc = &scaleFilterCutoff;
    695c:	f8c9 2b54 	str.w	r2, [r9, #2900]	; 0xb54
	params[Transpose].scaleFunc = &scaleTranspose;
    6960:	4a73      	ldr	r2, [pc, #460]	; (6b30 <parsePreset+0x9b0>)
	params[LFO4Rate].scaleFunc = &scaleLFORates;
    6962:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 6b58 <parsePreset+0x9d8>
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    6966:	4e73      	ldr	r6, [pc, #460]	; (6b34 <parsePreset+0x9b4>)
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    6968:	f8c9 32cc 	str.w	r3, [r9, #716]	; 0x2cc
    696c:	f6ab 181c 	subw	r8, fp, #2332	; 0x91c
	params[Osc1Harmonics].scaleFunc = &scaleOscPitch;
    6970:	f8c9 3358 	str.w	r3, [r9, #856]	; 0x358
	params[Osc2Pitch].scaleFunc = &scaleOscPitch;
    6974:	f8c9 3438 	str.w	r3, [r9, #1080]	; 0x438
	params[Osc2Harmonics].scaleFunc = &scaleOscPitch;
    6978:	f8c9 34c4 	str.w	r3, [r9, #1220]	; 0x4c4
	params[Osc3Pitch].scaleFunc = &scaleOscPitch;
    697c:	f8c9 35a4 	str.w	r3, [r9, #1444]	; 0x5a4
	params[Osc3Harmonics].scaleFunc = &scaleOscPitch;
    6980:	f8c9 3630 	str.w	r3, [r9, #1584]	; 0x630
	params[Transpose].scaleFunc = &scaleTranspose;
    6984:	f8c9 21d0 	str.w	r2, [r9, #464]	; 0x1d0
	params[LFO1Rate].scaleFunc = &scaleLFORates;
    6988:	4b6b      	ldr	r3, [pc, #428]	; (6b38 <parsePreset+0x9b8>)
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    698a:	4a6c      	ldr	r2, [pc, #432]	; (6b3c <parsePreset+0x9bc>)
	params[LFO1Rate].scaleFunc = &scaleLFORates;
    698c:	f8c9 3e80 	str.w	r3, [r9, #3712]	; 0xe80
	params[LFO2Rate].scaleFunc = &scaleLFORates;
    6990:	f8c9 3f0c 	str.w	r3, [r9, #3852]	; 0xf0c
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    6994:	f8c9 6ae4 	str.w	r6, [r9, #2788]	; 0xae4
	params[Filter2Resonance].scaleFunc = &scaleFilterResonance;
    6998:	f8c9 6b8c 	str.w	r6, [r9, #2956]	; 0xb8c
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    699c:	f8c9 21ec 	str.w	r2, [r9, #492]	; 0x1ec
	params[LFO3Rate].scaleFunc = &scaleLFORates;
    69a0:	f8c9 3f98 	str.w	r3, [r9, #3992]	; 0xf98
	params[LFO4Rate].scaleFunc = &scaleLFORates;
    69a4:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
    69a8:	4b65      	ldr	r3, [pc, #404]	; (6b40 <parsePreset+0x9c0>)
    69aa:	f8cb 30cc 	str.w	r3, [fp, #204]	; 0xcc
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    69ae:	edd8 7a00 	vldr	s15, [r8]
			setEffectsFunctions(effectType, i);
    69b2:	4639      	mov	r1, r7
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    69b4:	ee67 7a87 	vmul.f32	s15, s15, s14
    69b8:	fef8 7a67 	vrinta.f32	s15, s15
    69bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    69c0:	edcd 7a01 	vstr	s15, [sp, #4]
    69c4:	f89d 0004 	ldrb.w	r0, [sp, #4]
			if (effectType > FXLowpass) // this assumes filters are the last effects
    69c8:	280d      	cmp	r0, #13
				FXAlias[2].scaleFunc = &scaleFilterResonance;
    69ca:	bf88      	it	hi
    69cc:	f8c8 6064 	strhi.w	r6, [r8, #100]	; 0x64
			setEffectsFunctions(effectType, i);
    69d0:	f004 fabe 	bl	af50 <__setEffectsFunctions_veneer>
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    69d4:	edd8 7a01 	vldr	s15, [r8, #4]
			setEffectsFunctions(effectType, i);
    69d8:	4639      	mov	r1, r7
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    69da:	ee67 7a87 	vmul.f32	s15, s15, s14
    69de:	fef8 7a67 	vrinta.f32	s15, s15
    69e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    69e6:	edcd 7a01 	vstr	s15, [sp, #4]
    69ea:	f89d 0004 	ldrb.w	r0, [sp, #4]
			if (effectType > FXLowpass) // this assumes filters are the last effects
    69ee:	280d      	cmp	r0, #13
    69f0:	d946      	bls.n	6a80 <parsePreset+0x900>
	for (int i = 0; i < NUM_EFFECT; i++)
    69f2:	3701      	adds	r7, #1
				FXAlias[2].scaleFunc = &scaleFilterResonance;
    69f4:	f8c8 6064 	str.w	r6, [r8, #100]	; 0x64
			setEffectsFunctions(effectType, i);
    69f8:	f004 faaa 	bl	af50 <__setEffectsFunctions_veneer>
	for (int i = 0; i < NUM_EFFECT; i++)
    69fc:	f108 08e0 	add.w	r8, r8, #224	; 0xe0
    6a00:	2f04      	cmp	r7, #4
    6a02:	d1d4      	bne.n	69ae <parsePreset+0x82e>
    6a04:	4f40      	ldr	r7, [pc, #256]	; (6b08 <parsePreset+0x988>)
    6a06:	46b9      	mov	r9, r7
    6a08:	463e      	mov	r6, r7
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    6a0a:	6933      	ldr	r3, [r6, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
    6a0c:	361c      	adds	r6, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    6a0e:	ed16 0a07 	vldr	s0, [r6, #-28]	; 0xffffffe4
    6a12:	4798      	blx	r3
    6a14:	ed06 0a05 	vstr	s0, [r6, #-20]	; 0xffffffec
		for (int i = 0; i < NUM_PARAMS; i++)
    6a18:	42a6      	cmp	r6, r4
    6a1a:	d1f6      	bne.n	6a0a <parsePreset+0x88a>
    6a1c:	4e3a      	ldr	r6, [pc, #232]	; (6b08 <parsePreset+0x988>)
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    6a1e:	6933      	ldr	r3, [r6, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
    6a20:	361c      	adds	r6, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    6a22:	ed16 0a06 	vldr	s0, [r6, #-24]	; 0xffffffe8
    6a26:	4798      	blx	r3
    6a28:	ed06 0a04 	vstr	s0, [r6, #-16]
		for (int i = 0; i < NUM_PARAMS; i++)
    6a2c:	42a6      	cmp	r6, r4
    6a2e:	d1f6      	bne.n	6a1e <parsePreset+0x89e>
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    6a30:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    6a34:	edd9 7af7 	vldr	s15, [r9, #988]	; 0x3dc
    6a38:	ee67 7a87 	vmul.f32	s15, s15, s14
    6a3c:	fef8 7a67 	vrinta.f32	s15, s15
    6a40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    6a44:	ee17 3a90 	vmov	r3, s15
	switch (oscshape)
    6a48:	2b05      	cmp	r3, #5
    6a4a:	d832      	bhi.n	6ab2 <parsePreset+0x932>
    6a4c:	e8df f013 	tbh	[pc, r3, lsl #1]
    6a50:	002e05f4 	.word	0x002e05f4
    6a54:	05ea05ef 	.word	0x05ea05ef
    6a58:	05e005e5 	.word	0x05e005e5
		if (buffer[bufferIndex + 1] == 18)
    6a5c:	f89a 3001 	ldrb.w	r3, [sl, #1]
    6a60:	2b12      	cmp	r3, #18
    6a62:	d016      	beq.n	6a92 <parsePreset+0x912>
		presetName[i] = buffer[bufferIndex];
    6a64:	f89a 4004 	ldrb.w	r4, [sl, #4]
		bufferIndex = 4;
    6a68:	2304      	movs	r3, #4
	uint16_t presetVersionNumber = 0;
    6a6a:	9506      	str	r5, [sp, #24]
    6a6c:	f7ff bbac 	b.w	61c8 <parsePreset+0x48>
		mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
    6a70:	f103 0284 	add.w	r2, r3, #132	; 0x84
    6a74:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    6a78:	4422      	add	r2, r4
    6a7a:	4402      	add	r2, r0
    6a7c:	b292      	uxth	r2, r2
    6a7e:	e6e8      	b.n	6852 <parsePreset+0x6d2>
			setEffectsFunctions(effectType, i);
    6a80:	4639      	mov	r1, r7
	for (int i = 0; i < NUM_EFFECT; i++)
    6a82:	3701      	adds	r7, #1
			setEffectsFunctions(effectType, i);
    6a84:	f004 fa64 	bl	af50 <__setEffectsFunctions_veneer>
	for (int i = 0; i < NUM_EFFECT; i++)
    6a88:	f108 08e0 	add.w	r8, r8, #224	; 0xe0
    6a8c:	2f04      	cmp	r7, #4
    6a8e:	d18e      	bne.n	69ae <parsePreset+0x82e>
    6a90:	e7b8      	b.n	6a04 <parsePreset+0x884>
			presetVersionNumber = ((buffer[bufferIndex + 2] << 8) + buffer[bufferIndex + 3]);
    6a92:	f89a 2002 	ldrb.w	r2, [sl, #2]
    6a96:	f89a 3003 	ldrb.w	r3, [sl, #3]
		presetName[i] = buffer[bufferIndex];
    6a9a:	f89a 4004 	ldrb.w	r4, [sl, #4]
			presetVersionNumber = ((buffer[bufferIndex + 2] << 8) + buffer[bufferIndex + 3]);
    6a9e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    6aa2:	b29b      	uxth	r3, r3
    6aa4:	9306      	str	r3, [sp, #24]
		bufferIndex = 4;
    6aa6:	2304      	movs	r3, #4
    6aa8:	f7ff bb8e 	b.w	61c8 <parsePreset+0x48>
			  shapeTick[i] = &sineTriTick;
    6aac:	4b25      	ldr	r3, [pc, #148]	; (6b44 <parsePreset+0x9c4>)
    6aae:	4a26      	ldr	r2, [pc, #152]	; (6b48 <parsePreset+0x9c8>)
    6ab0:	601a      	str	r2, [r3, #0]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    6ab2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    6ab6:	ed99 7aaa 	vldr	s14, [r9, #680]	; 0x2a8
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    6aba:	4a24      	ldr	r2, [pc, #144]	; (6b4c <parsePreset+0x9cc>)
    6abc:	4924      	ldr	r1, [pc, #144]	; (6b50 <parsePreset+0x9d0>)
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    6abe:	eeb4 7ae7 	vcmpe.f32	s14, s15
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    6ac2:	edd2 7a00 	vldr	s15, [r2]
    6ac6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    6aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    6ace:	ee67 7a87 	vmul.f32	s15, s15, s14
			oscsEnabled[i] = 0;
    6ad2:	bfd4      	ite	le
    6ad4:	2000      	movle	r0, #0
			oscsEnabled[i] = 1;
    6ad6:	2001      	movgt	r0, #1
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    6ad8:	fef8 7a67 	vrinta.f32	s15, s15
    6adc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    6ae0:	7008      	strb	r0, [r1, #0]
			enabledCount++;
    6ae2:	4603      	mov	r3, r0
    6ae4:	491b      	ldr	r1, [pc, #108]	; (6b54 <parsePreset+0x9d4>)
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    6ae6:	ee17 2a90 	vmov	r2, s15
    6aea:	6008      	str	r0, [r1, #0]
	switch (oscshape)
    6aec:	2a05      	cmp	r2, #5
    6aee:	d838      	bhi.n	6b62 <parsePreset+0x9e2>
    6af0:	e8df f012 	tbh	[pc, r2, lsl #1]
    6af4:	00340589 	.word	0x00340589
    6af8:	057f0584 	.word	0x057f0584
    6afc:	0575057a 	.word	0x0575057a
    6b00:	2001ac00 	.word	0x2001ac00
    6b04:	20000740 	.word	0x20000740
    6b08:	20019ad0 	.word	0x20019ad0
    6b0c:	377ffff6 	.word	0x377ffff6
    6b10:	00005ee1 	.word	0x00005ee1
    6b14:	00005e21 	.word	0x00005e21
    6b18:	2001abe0 	.word	0x2001abe0
    6b1c:	00005e61 	.word	0x00005e61
    6b20:	00006021 	.word	0x00006021
    6b24:	00005e81 	.word	0x00005e81
    6b28:	00005ea1 	.word	0x00005ea1
    6b2c:	00005e41 	.word	0x00005e41
    6b30:	00005f01 	.word	0x00005f01
    6b34:	00005f81 	.word	0x00005f81
    6b38:	000060a1 	.word	0x000060a1
    6b3c:	00005f41 	.word	0x00005f41
    6b40:	00005ec1 	.word	0x00005ec1
    6b44:	20005d3c 	.word	0x20005d3c
    6b48:	000023a1 	.word	0x000023a1
    6b4c:	2001a018 	.word	0x2001a018
    6b50:	20005720 	.word	0x20005720
    6b54:	20019ac4 	.word	0x20019ac4
    6b58:	2001aad0 	.word	0x2001aad0
			  shapeTick[i] = &sineTriTick;
    6b5c:	4a15      	ldr	r2, [pc, #84]	; (6bb4 <parsePreset+0xa34>)
    6b5e:	4816      	ldr	r0, [pc, #88]	; (6bb8 <parsePreset+0xa38>)
    6b60:	6050      	str	r0, [r2, #4]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    6b62:	4a16      	ldr	r2, [pc, #88]	; (6bbc <parsePreset+0xa3c>)
    6b64:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    6b68:	ed92 7a00 	vldr	s14, [r2]
    6b6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
    6b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6b74:	f340 850d 	ble.w	7592 <parsePreset+0x1412>
			enabledCount++;
    6b78:	3301      	adds	r3, #1
			oscOn[i] = 1;
    6b7a:	2201      	movs	r2, #1
			enabledCount++;
    6b7c:	b2db      	uxtb	r3, r3
			oscsEnabled[i] = 1;
    6b7e:	4610      	mov	r0, r2
    6b80:	4c0f      	ldr	r4, [pc, #60]	; (6bc0 <parsePreset+0xa40>)
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    6b82:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    6b86:	6048      	str	r0, [r1, #4]
    6b88:	7062      	strb	r2, [r4, #1]
    6b8a:	4a0e      	ldr	r2, [pc, #56]	; (6bc4 <parsePreset+0xa44>)
    6b8c:	edd2 7a00 	vldr	s15, [r2]
    6b90:	ee67 7a87 	vmul.f32	s15, s15, s14
    6b94:	fef8 7a67 	vrinta.f32	s15, s15
    6b98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    6b9c:	ee17 2a90 	vmov	r2, s15
	switch (oscshape)
    6ba0:	2a05      	cmp	r2, #5
    6ba2:	d814      	bhi.n	6bce <parsePreset+0xa4e>
    6ba4:	e8df f012 	tbh	[pc, r2, lsl #1]
    6ba8:	05110516 	.word	0x05110516
    6bac:	0507050c 	.word	0x0507050c
    6bb0:	05020010 	.word	0x05020010
    6bb4:	20005d3c 	.word	0x20005d3c
    6bb8:	000023a1 	.word	0x000023a1
    6bbc:	20019ee4 	.word	0x20019ee4
    6bc0:	20005720 	.word	0x20005720
    6bc4:	2001a184 	.word	0x2001a184
			  shapeTick[i] = &sineTick;
    6bc8:	4a9a      	ldr	r2, [pc, #616]	; (6e34 <parsePreset+0xcb4>)
    6bca:	489b      	ldr	r0, [pc, #620]	; (6e38 <parsePreset+0xcb8>)
    6bcc:	6090      	str	r0, [r2, #8]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    6bce:	4a9b      	ldr	r2, [pc, #620]	; (6e3c <parsePreset+0xcbc>)
    6bd0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    6bd4:	ed92 7a00 	vldr	s14, [r2]
    6bd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
    6bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6be0:	f340 84d3 	ble.w	758a <parsePreset+0x140a>
			enabledCount++;
    6be4:	3301      	adds	r3, #1
			oscOn[i] = 1;
    6be6:	2201      	movs	r2, #1
			enabledCount++;
    6be8:	b2db      	uxtb	r3, r3
			oscsEnabled[i] = 1;
    6bea:	4610      	mov	r0, r2
	if (params[Noise].realVal[0]  > 0.5f)
    6bec:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    6bf0:	4e93      	ldr	r6, [pc, #588]	; (6e40 <parsePreset+0xcc0>)
	if (params[Noise].realVal[0]  > 0.5f)
    6bf2:	ed99 6a80 	vldr	s12, [r9, #512]	; 0x200
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    6bf6:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
    6bfa:	6088      	str	r0, [r1, #8]
	oscAmpMult = oscAmpMultArray[enabledCount];
    6bfc:	f206 4444 	addw	r4, r6, #1092	; 0x444
    6c00:	4990      	ldr	r1, [pc, #576]	; (6e44 <parsePreset+0xcc4>)
	if (params[Noise].realVal[0]  > 0.5f)
    6c02:	eeb4 6ae7 	vcmpe.f32	s12, s15
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    6c06:	edd6 7a00 	vldr	s15, [r6]
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    6c0a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    6c0e:	708a      	strb	r2, [r1, #2]
	oscAmpMult = oscAmpMultArray[enabledCount];
    6c10:	4a8d      	ldr	r2, [pc, #564]	; (6e48 <parsePreset+0xcc8>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    6c12:	ee67 7aa6 	vmul.f32	s15, s15, s13
	if (params[Noise].realVal[0]  > 0.5f)
    6c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	oscAmpMult = oscAmpMultArray[enabledCount];
    6c1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    6c1e:	4a8b      	ldr	r2, [pc, #556]	; (6e4c <parsePreset+0xccc>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    6c20:	fef8 7a67 	vrinta.f32	s15, s15
		setFilterTypes(filterType, i);
    6c24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	oscAmpMult = oscAmpMultArray[enabledCount];
    6c28:	6819      	ldr	r1, [r3, #0]
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    6c2a:	4633      	mov	r3, r6
	if (params[Noise].realVal[0]  > 0.5f)
    6c2c:	bfcc      	ite	gt
    6c2e:	2301      	movgt	r3, #1
    6c30:	2300      	movle	r3, #0
	oscAmpMult = oscAmpMultArray[enabledCount];
    6c32:	6011      	str	r1, [r2, #0]
		setFilterTypes(filterType, i);
    6c34:	ee17 0a90 	vmov	r0, s15
	if (params[Noise].realVal[0]  > 0.5f)
    6c38:	4a85      	ldr	r2, [pc, #532]	; (6e50 <parsePreset+0xcd0>)
		setFilterTypes(filterType, i);
    6c3a:	2100      	movs	r1, #0
	if (params[Noise].realVal[0]  > 0.5f)
    6c3c:	7013      	strb	r3, [r2, #0]
		setFilterTypes(filterType, i);
    6c3e:	f004 faaf 	bl	b1a0 <__setFilterTypes_veneer>
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    6c42:	edd6 7a2a 	vldr	s15, [r6, #168]	; 0xa8
	for (int i = 0; i < NUM_LFOS; i++)
    6c46:	460e      	mov	r6, r1
		setFilterTypes(filterType, i);
    6c48:	2101      	movs	r1, #1
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    6c4a:	ee67 7aa6 	vmul.f32	s15, s15, s13
    6c4e:	fef8 7a67 	vrinta.f32	s15, s15
		setFilterTypes(filterType, i);
    6c52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    6c56:	ee17 0a90 	vmov	r0, s15
    6c5a:	f004 faa1 	bl	b1a0 <__setFilterTypes_veneer>
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    6c5e:	4623      	mov	r3, r4
		setLFOShapes(LFOShape, i);
    6c60:	4631      	mov	r1, r6
	for (int i = 0; i < NUM_LFOS; i++)
    6c62:	3601      	adds	r6, #1
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    6c64:	348c      	adds	r4, #140	; 0x8c
    6c66:	edd3 7a00 	vldr	s15, [r3]
    6c6a:	ee67 7a87 	vmul.f32	s15, s15, s14
    6c6e:	fef8 7a67 	vrinta.f32	s15, s15
		setLFOShapes(LFOShape, i);
    6c72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    6c76:	ee17 0a90 	vmov	r0, s15
    6c7a:	f004 f98d 	bl	af98 <__setLFOShapes_veneer>
	for (int i = 0; i < NUM_LFOS; i++)
    6c7e:	2e04      	cmp	r6, #4
    6c80:	d1ed      	bne.n	6c5e <parsePreset+0xade>
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    6c82:	4874      	ldr	r0, [pc, #464]	; (6e54 <parsePreset+0xcd4>)
	for (int i = 0; i < NUM_PARAMS; i++)
    6c84:	f04f 0800 	mov.w	r8, #0
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    6c88:	4b73      	ldr	r3, [pc, #460]	; (6e58 <parsePreset+0xcd8>)
			params[i].objectNumber = 1;
    6c8a:	2601      	movs	r6, #1
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    6c8c:	f8c9 02d0 	str.w	r0, [r9, #720]	; 0x2d0
	params[Osc2Pitch].setParam = &setFreqMultPitch;
    6c90:	f8c9 043c 	str.w	r0, [r9, #1084]	; 0x43c
	params[Osc3Pitch].setParam = &setFreqMultPitch;
    6c94:	f8c9 05a8 	str.w	r0, [r9, #1448]	; 0x5a8
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    6c98:	4870      	ldr	r0, [pc, #448]	; (6e5c <parsePreset+0xcdc>)
	params[Effect1Mix].setParam = &fxMixSet;
    6c9a:	4971      	ldr	r1, [pc, #452]	; (6e60 <parsePreset+0xce0>)
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    6c9c:	f8c9 035c 	str.w	r0, [r9, #860]	; 0x35c
	params[Osc2Harmonics].setParam = &setFreqMultHarm;
    6ca0:	f8c9 04c8 	str.w	r0, [r9, #1224]	; 0x4c8
	params[Osc3Harmonics].setParam = &setFreqMultHarm;
    6ca4:	f8c9 0634 	str.w	r0, [r9, #1588]	; 0x634
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    6ca8:	6818      	ldr	r0, [r3, #0]
	params[Effect1PostGain].setParam = &fxPostGainSet;
    6caa:	4c6e      	ldr	r4, [pc, #440]	; (6e64 <parsePreset+0xce4>)
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    6cac:	f8c9 0714 	str.w	r0, [r9, #1812]	; 0x714
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    6cb0:	6858      	ldr	r0, [r3, #4]
	params[Effect1Mix].setParam = &fxMixSet;
    6cb2:	f8c9 17a0 	str.w	r1, [r9, #1952]	; 0x7a0
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    6cb6:	f8c9 0730 	str.w	r0, [r9, #1840]	; 0x730
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    6cba:	6898      	ldr	r0, [r3, #8]
	params[Effect1PostGain].setParam = &fxPostGainSet;
    6cbc:	f8c9 47bc 	str.w	r4, [r9, #1980]	; 0x7bc
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    6cc0:	f8c9 074c 	str.w	r0, [r9, #1868]	; 0x74c
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
    6cc4:	68d8      	ldr	r0, [r3, #12]
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    6cc6:	4a68      	ldr	r2, [pc, #416]	; (6e68 <parsePreset+0xce8>)
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
    6cc8:	f8c9 0768 	str.w	r0, [r9, #1896]	; 0x768
	params[Effect1Param5].setParam = effectSetters[0].setParam5;
    6ccc:	6918      	ldr	r0, [r3, #16]
    6cce:	f8c9 0784 	str.w	r0, [r9, #1924]	; 0x784
	params[Effect2Param1].setParam = effectSetters[1].setParam1;
    6cd2:	6958      	ldr	r0, [r3, #20]
    6cd4:	f8c9 07f4 	str.w	r0, [r9, #2036]	; 0x7f4
	params[Effect2Param2].setParam = effectSetters[1].setParam2;
    6cd8:	6998      	ldr	r0, [r3, #24]
    6cda:	f8c9 0810 	str.w	r0, [r9, #2064]	; 0x810
	params[Effect2Param3].setParam = effectSetters[1].setParam3;
    6cde:	69d8      	ldr	r0, [r3, #28]
    6ce0:	f8c9 082c 	str.w	r0, [r9, #2092]	; 0x82c
	params[NoiseTilt].setParam = &noiseSetTilt;
    6ce4:	4861      	ldr	r0, [pc, #388]	; (6e6c <parsePreset+0xcec>)
    6ce6:	f8c9 0228 	str.w	r0, [r9, #552]	; 0x228
	params[NoisePeakFreq].setParam = &noiseSetFreq;
    6cea:	4861      	ldr	r0, [pc, #388]	; (6e70 <parsePreset+0xcf0>)
    6cec:	f8c9 0260 	str.w	r0, [r9, #608]	; 0x260
	params[NoisePeakGain].setParam  = &noiseSetGain;
    6cf0:	4860      	ldr	r0, [pc, #384]	; (6e74 <parsePreset+0xcf4>)
    6cf2:	f8c9 0244 	str.w	r0, [r9, #580]	; 0x244
	params[Master].setParam = &setMaster;
    6cf6:	4860      	ldr	r0, [pc, #384]	; (6e78 <parsePreset+0xcf8>)
    6cf8:	f8c9 004c 	str.w	r0, [r9, #76]	; 0x4c
	params[Transpose].setParam = &setTranspose;
    6cfc:	485f      	ldr	r0, [pc, #380]	; (6e7c <parsePreset+0xcfc>)
    6cfe:	f8c9 01d4 	str.w	r0, [r9, #468]	; 0x1d4
	params[PitchBendRange].setParam = &setPitchBendRange;
    6d02:	485f      	ldr	r0, [pc, #380]	; (6e80 <parsePreset+0xd00>)
    6d04:	f8c9 01f0 	str.w	r0, [r9, #496]	; 0x1f0
	params[OutputTone].setParam = &setFinalLowpass;
    6d08:	485e      	ldr	r0, [pc, #376]	; (6e84 <parsePreset+0xd04>)
    6d0a:	f8cb 00d0 	str.w	r0, [fp, #208]	; 0xd0
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
    6d0e:	6a18      	ldr	r0, [r3, #32]
    6d10:	f8c9 0848 	str.w	r0, [r9, #2120]	; 0x848
	params[Effect2Mix].setParam = &fxMixSet;
    6d14:	f8c9 1880 	str.w	r1, [r9, #2176]	; 0x880
	params[Effect3Mix].setParam = &fxMixSet;
    6d18:	f8c9 1960 	str.w	r1, [r9, #2400]	; 0x960
	params[Effect4Mix].setParam = &fxMixSet;
    6d1c:	f8c9 1a40 	str.w	r1, [r9, #2624]	; 0xa40
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    6d20:	6a59      	ldr	r1, [r3, #36]	; 0x24
	params[Effect2PostGain].setParam = &fxPostGainSet;
    6d22:	f8c9 489c 	str.w	r4, [r9, #2204]	; 0x89c
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    6d26:	f8c9 1864 	str.w	r1, [r9, #2148]	; 0x864
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    6d2a:	6a99      	ldr	r1, [r3, #40]	; 0x28
	params[Effect3PostGain].setParam = &fxPostGainSet;
    6d2c:	f8c9 497c 	str.w	r4, [r9, #2428]	; 0x97c
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    6d30:	f8c9 18d4 	str.w	r1, [r9, #2260]	; 0x8d4
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    6d34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
	params[Effect4PostGain].setParam = &fxPostGainSet;
    6d36:	f8c9 4a5c 	str.w	r4, [r9, #2652]	; 0xa5c
		params[i].objectNumber = 0;
    6d3a:	4644      	mov	r4, r8
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    6d3c:	f8c9 18f0 	str.w	r1, [r9, #2288]	; 0x8f0
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    6d40:	6b19      	ldr	r1, [r3, #48]	; 0x30
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
    6d42:	4851      	ldr	r0, [pc, #324]	; (6e88 <parsePreset+0xd08>)
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    6d44:	f8c9 190c 	str.w	r1, [r9, #2316]	; 0x90c
	params[Effect3Param4].setParam = effectSetters[2].setParam4;
    6d48:	6b59      	ldr	r1, [r3, #52]	; 0x34
    6d4a:	f8c9 1928 	str.w	r1, [r9, #2344]	; 0x928
	params[Effect3Param5].setParam = effectSetters[2].setParam5;
    6d4e:	6b99      	ldr	r1, [r3, #56]	; 0x38
    6d50:	f8c9 1944 	str.w	r1, [r9, #2372]	; 0x944
	params[Effect4Param1].setParam = effectSetters[3].setParam1;
    6d54:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    6d56:	f8c9 19b4 	str.w	r1, [r9, #2484]	; 0x9b4
	params[Effect4Param2].setParam = effectSetters[3].setParam2;
    6d5a:	6c19      	ldr	r1, [r3, #64]	; 0x40
    6d5c:	f8c9 19d0 	str.w	r1, [r9, #2512]	; 0x9d0
	params[Effect4Param3].setParam = effectSetters[3].setParam3;
    6d60:	6c59      	ldr	r1, [r3, #68]	; 0x44
    6d62:	f8c9 19ec 	str.w	r1, [r9, #2540]	; 0x9ec
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
    6d66:	6c99      	ldr	r1, [r3, #72]	; 0x48
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
    6d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
    6d6a:	f8c9 1a08 	str.w	r1, [r9, #2568]	; 0xa08
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
    6d6e:	f8c9 3a24 	str.w	r3, [r9, #2596]	; 0xa24
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    6d72:	6813      	ldr	r3, [r2, #0]
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    6d74:	4945      	ldr	r1, [pc, #276]	; (6e8c <parsePreset+0xd0c>)
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    6d76:	f8c9 3ae8 	str.w	r3, [r9, #2792]	; 0xae8
	params[Filter1Gain].setParam = filterSetters[0].setGain;
    6d7a:	6853      	ldr	r3, [r2, #4]
    6d7c:	f8c9 3acc 	str.w	r3, [r9, #2764]	; 0xacc
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    6d80:	6893      	ldr	r3, [r2, #8]
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    6d82:	f8c9 1be4 	str.w	r1, [r9, #3044]	; 0xbe4
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    6d86:	f8c9 3b90 	str.w	r3, [r9, #2960]	; 0xb90
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    6d8a:	68d3      	ldr	r3, [r2, #12]
	params[Envelope2Attack].setParam = &setEnvelopeAttack;
    6d8c:	f8c9 1c8c 	str.w	r1, [r9, #3212]	; 0xc8c
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    6d90:	f8c9 3b74 	str.w	r3, [r9, #2932]	; 0xb74
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    6d94:	4b3e      	ldr	r3, [pc, #248]	; (6e90 <parsePreset+0xd10>)
	params[Envelope3Attack].setParam = &setEnvelopeAttack;
    6d96:	f8c9 1d34 	str.w	r1, [r9, #3380]	; 0xd34
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    6d9a:	f8c9 3c00 	str.w	r3, [r9, #3072]	; 0xc00
	params[Envelope2Decay].setParam = &setEnvelopeDecay;
    6d9e:	f8c9 3ca8 	str.w	r3, [r9, #3240]	; 0xca8
	params[Envelope3Decay].setParam = &setEnvelopeDecay;
    6da2:	f8c9 3d50 	str.w	r3, [r9, #3408]	; 0xd50
	params[Envelope4Decay].setParam = &setEnvelopeDecay;
    6da6:	f8c9 3df8 	str.w	r3, [r9, #3576]	; 0xdf8
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
    6daa:	4b3a      	ldr	r3, [pc, #232]	; (6e94 <parsePreset+0xd14>)
	params[Envelope4Attack].setParam = &setEnvelopeAttack;
    6dac:	f8c9 1ddc 	str.w	r1, [r9, #3548]	; 0xddc
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
    6db0:	f8c9 3c1c 	str.w	r3, [r9, #3100]	; 0xc1c
	params[Envelope2Sustain].setParam = &setEnvelopeSustain;
    6db4:	f8c9 3cc4 	str.w	r3, [r9, #3268]	; 0xcc4
	params[Envelope3Sustain].setParam = &setEnvelopeSustain;
    6db8:	f8c9 3d6c 	str.w	r3, [r9, #3436]	; 0xd6c
	params[Envelope4Sustain].setParam = &setEnvelopeSustain;
    6dbc:	f8c9 3e14 	str.w	r3, [r9, #3604]	; 0xe14
	params[Envelope1Release].setParam = &setEnvelopeRelease;
    6dc0:	4b35      	ldr	r3, [pc, #212]	; (6e98 <parsePreset+0xd18>)
    6dc2:	f8c9 3c38 	str.w	r3, [r9, #3128]	; 0xc38
	params[Envelope2Release].setParam = &setEnvelopeRelease;
    6dc6:	f8c9 3ce0 	str.w	r3, [r9, #3296]	; 0xce0
	params[Envelope3Release].setParam = &setEnvelopeRelease;
    6dca:	f8c9 3d88 	str.w	r3, [r9, #3464]	; 0xd88
	params[Envelope4Release].setParam = &setEnvelopeRelease;
    6dce:	f8c9 3e30 	str.w	r3, [r9, #3632]	; 0xe30
	params[Envelope1Leak].setParam = &setEnvelopeLeak;
    6dd2:	4b32      	ldr	r3, [pc, #200]	; (6e9c <parsePreset+0xd1c>)
    6dd4:	f8c9 3c54 	str.w	r3, [r9, #3156]	; 0xc54
	params[Envelope2Leak].setParam = &setEnvelopeLeak;
    6dd8:	f8c9 3cfc 	str.w	r3, [r9, #3324]	; 0xcfc
	params[Envelope3Leak].setParam = &setEnvelopeLeak;
    6ddc:	f8c9 3da4 	str.w	r3, [r9, #3492]	; 0xda4
	params[Envelope4Leak].setParam = &setEnvelopeLeak;
    6de0:	f8c9 3e4c 	str.w	r3, [r9, #3660]	; 0xe4c
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
    6de4:	6803      	ldr	r3, [r0, #0]
    6de6:	f8c9 3e84 	str.w	r3, [r9, #3716]	; 0xe84
	params[LFO2Rate].setParam = lfoSetters[1].setRate;
    6dea:	68c3      	ldr	r3, [r0, #12]
    6dec:	f8c9 3f10 	str.w	r3, [r9, #3856]	; 0xf10
	params[LFO3Rate].setParam = lfoSetters[2].setRate;
    6df0:	6983      	ldr	r3, [r0, #24]
    6df2:	f8c9 3f9c 	str.w	r3, [r9, #3996]	; 0xf9c
	params[LFO4Rate].setParam = lfoSetters[3].setRate;
    6df6:	6a43      	ldr	r3, [r0, #36]	; 0x24
    6df8:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
	params[LFO1Shape].setParam = lfoSetters[0].setShape;
    6dfc:	6843      	ldr	r3, [r0, #4]
    6dfe:	f8c9 3ea0 	str.w	r3, [r9, #3744]	; 0xea0
	params[LFO2Shape].setParam = lfoSetters[1].setShape;
    6e02:	6903      	ldr	r3, [r0, #16]
    6e04:	f8c9 3f2c 	str.w	r3, [r9, #3884]	; 0xf2c
	params[LFO3Shape].setParam = lfoSetters[2].setShape;
    6e08:	69c3      	ldr	r3, [r0, #28]
    6e0a:	f8c9 3fb8 	str.w	r3, [r9, #4024]	; 0xfb8
	params[LFO4Shape].setParam = lfoSetters[3].setShape;
    6e0e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    6e10:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
	params[LFO1Phase].setParam = lfoSetters[0].setPhase;
    6e14:	6883      	ldr	r3, [r0, #8]
    6e16:	f8c9 3ebc 	str.w	r3, [r9, #3772]	; 0xebc
	params[LFO2Phase].setParam = lfoSetters[1].setPhase;
    6e1a:	6943      	ldr	r3, [r0, #20]
    6e1c:	f8c9 3f48 	str.w	r3, [r9, #3912]	; 0xf48
	params[LFO3Phase].setParam = lfoSetters[2].setPhase;
    6e20:	6a03      	ldr	r3, [r0, #32]
    6e22:	f8c9 3fd4 	str.w	r3, [r9, #4052]	; 0xfd4
	params[LFO4Phase].setParam = lfoSetters[3].setPhase;
    6e26:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    6e28:	f8cb 3060 	str.w	r3, [fp, #96]	; 0x60
	params[OutputAmp].setParam = &setAmp;
    6e2c:	4b1c      	ldr	r3, [pc, #112]	; (6ea0 <parsePreset+0xd20>)
    6e2e:	f8cb 30b4 	str.w	r3, [fp, #180]	; 0xb4
    6e32:	e03b      	b.n	6eac <parsePreset+0xd2c>
    6e34:	20005d3c 	.word	0x20005d3c
    6e38:	000024a1 	.word	0x000024a1
    6e3c:	2001a050 	.word	0x2001a050
    6e40:	2001a558 	.word	0x2001a558
    6e44:	20005720 	.word	0x20005720
    6e48:	2000001c 	.word	0x2000001c
    6e4c:	20000018 	.word	0x20000018
    6e50:	200056c4 	.word	0x200056c4
    6e54:	000029c1 	.word	0x000029c1
    6e58:	20014cc4 	.word	0x20014cc4
    6e5c:	00002a21 	.word	0x00002a21
    6e60:	00003fe1 	.word	0x00003fe1
    6e64:	00004001 	.word	0x00004001
    6e68:	20016d18 	.word	0x20016d18
    6e6c:	00004f01 	.word	0x00004f01
    6e70:	000050c1 	.word	0x000050c1
    6e74:	00005021 	.word	0x00005021
    6e78:	00003341 	.word	0x00003341
    6e7c:	00003361 	.word	0x00003361
    6e80:	00003381 	.word	0x00003381
    6e84:	000033a1 	.word	0x000033a1
    6e88:	20018e44 	.word	0x20018e44
    6e8c:	00003261 	.word	0x00003261
    6e90:	00003281 	.word	0x00003281
    6e94:	000032a1 	.word	0x000032a1
    6e98:	000032c1 	.word	0x000032c1
    6e9c:	000032e1 	.word	0x000032e1
    6ea0:	00003321 	.word	0x00003321
    6ea4:	3c010204 	.word	0x3c010204
    6ea8:	42fe0000 	.word	0x42fe0000
		if ((i >= Osc1) && (i < Osc2))
    6eac:	f1a8 0318 	sub.w	r3, r8, #24
		params[i].objectNumber = 0;
    6eb0:	763c      	strb	r4, [r7, #24]
		if ((i >= Osc1) && (i < Osc2))
    6eb2:	2b0c      	cmp	r3, #12
    6eb4:	f240 8278 	bls.w	73a8 <parsePreset+0x1228>
		else if ((i >= Osc2) && (i < Osc3))
    6eb8:	f1a8 0325 	sub.w	r3, r8, #37	; 0x25
    6ebc:	2b72      	cmp	r3, #114	; 0x72
    6ebe:	f200 8273 	bhi.w	73a8 <parsePreset+0x1228>
    6ec2:	e8df f013 	tbh	[pc, r3, lsl #1]
    6ec6:	0073      	.short	0x0073
    6ec8:	00730073 	.word	0x00730073
    6ecc:	00730073 	.word	0x00730073
    6ed0:	00730073 	.word	0x00730073
    6ed4:	00730073 	.word	0x00730073
    6ed8:	00730073 	.word	0x00730073
    6edc:	00730073 	.word	0x00730073
    6ee0:	026b026b 	.word	0x026b026b
    6ee4:	026b026b 	.word	0x026b026b
    6ee8:	026b026b 	.word	0x026b026b
    6eec:	026b026b 	.word	0x026b026b
    6ef0:	026b026b 	.word	0x026b026b
    6ef4:	026b026b 	.word	0x026b026b
    6ef8:	0271026b 	.word	0x0271026b
    6efc:	02710271 	.word	0x02710271
    6f00:	02710271 	.word	0x02710271
    6f04:	02710271 	.word	0x02710271
    6f08:	00730271 	.word	0x00730271
    6f0c:	00730073 	.word	0x00730073
    6f10:	00730073 	.word	0x00730073
    6f14:	00730073 	.word	0x00730073
    6f18:	026b0073 	.word	0x026b0073
    6f1c:	026b026b 	.word	0x026b026b
    6f20:	026b026b 	.word	0x026b026b
    6f24:	026b026b 	.word	0x026b026b
    6f28:	026e026b 	.word	0x026e026b
    6f2c:	026e026e 	.word	0x026e026e
    6f30:	026e026e 	.word	0x026e026e
    6f34:	026e026e 	.word	0x026e026e
    6f38:	0271026e 	.word	0x0271026e
    6f3c:	02710271 	.word	0x02710271
    6f40:	02710271 	.word	0x02710271
    6f44:	00730271 	.word	0x00730271
    6f48:	00730073 	.word	0x00730073
    6f4c:	00730073 	.word	0x00730073
    6f50:	00730073 	.word	0x00730073
    6f54:	02710271 	.word	0x02710271
    6f58:	02710271 	.word	0x02710271
    6f5c:	02710271 	.word	0x02710271
    6f60:	00730073 	.word	0x00730073
    6f64:	00730073 	.word	0x00730073
    6f68:	00730073 	.word	0x00730073
    6f6c:	026b026b 	.word	0x026b026b
    6f70:	026b026b 	.word	0x026b026b
    6f74:	026b026b 	.word	0x026b026b
    6f78:	026e026e 	.word	0x026e026e
    6f7c:	026e026e 	.word	0x026e026e
    6f80:	026e026e 	.word	0x026e026e
    6f84:	02710271 	.word	0x02710271
    6f88:	02710271 	.word	0x02710271
    6f8c:	00730271 	.word	0x00730271
    6f90:	00730073 	.word	0x00730073
    6f94:	00730073 	.word	0x00730073
    6f98:	026b026b 	.word	0x026b026b
    6f9c:	026b026b 	.word	0x026b026b
    6fa0:	026e026b 	.word	0x026e026b
    6fa4:	026e026e 	.word	0x026e026e
    6fa8:	026e026e 	.word	0x026e026e
			params[i].objectNumber = 1;
    6fac:	2001      	movs	r0, #1
    6fae:	763e      	strb	r6, [r7, #24]
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    6fb0:	ed97 0a02 	vldr	s0, [r7, #8]
    6fb4:	2100      	movs	r1, #0
    6fb6:	697b      	ldr	r3, [r7, #20]
	for (int i = 0; i < NUM_PARAMS; i++)
    6fb8:	f108 0801 	add.w	r8, r8, #1
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    6fbc:	4798      	blx	r3
    6fbe:	ed97 0a03 	vldr	s0, [r7, #12]
    6fc2:	697b      	ldr	r3, [r7, #20]
    6fc4:	2101      	movs	r1, #1
    6fc6:	7e38      	ldrb	r0, [r7, #24]
	for (int i = 0; i < NUM_PARAMS; i++)
    6fc8:	371c      	adds	r7, #28
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    6fca:	4798      	blx	r3
	for (int i = 0; i < NUM_PARAMS; i++)
    6fcc:	f1b8 0f9c 	cmp.w	r8, #156	; 0x9c
    6fd0:	f47f af6c 	bne.w	6eac <parsePreset+0xd2c>
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    6fd4:	edd9 7a09 	vldr	s15, [r9, #36]	; 0x24
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    6fd8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    6fdc:	ed99 7a02 	vldr	s14, [r9, #8]
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    6fe0:	ed9b 6a38 	vldr	s12, [fp, #224]	; 0xe0
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    6fe4:	ee37 7a67 	vsub.f32	s14, s14, s15
    6fe8:	ed1f 5a52 	vldr	s10, [pc, #-328]	; 6ea4 <parsePreset+0xd24>
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    6fec:	eeb4 6ae6 	vcmpe.f32	s12, s13
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    6ff0:	ed5f 5a53 	vldr	s11, [pc, #-332]	; 6ea8 <parsePreset+0xd28>
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    6ff4:	4baa      	ldr	r3, [pc, #680]	; (72a0 <parsePreset+0x1120>)
    6ff6:	ee85 6a07 	vdiv.f32	s12, s10, s14
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    6ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    6ffe:	ee67 7aa5 	vmul.f32	s15, s15, s11
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    7002:	bfcc      	ite	gt
    7004:	2201      	movgt	r2, #1
    7006:	2200      	movle	r2, #0
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    7008:	ed83 6a00 	vstr	s12, [r3]
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    700c:	4ba5      	ldr	r3, [pc, #660]	; (72a4 <parsePreset+0x1124>)
    700e:	edc3 7a00 	vstr	s15, [r3]
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    7012:	4ba5      	ldr	r3, [pc, #660]	; (72a8 <parsePreset+0x1128>)
    7014:	701a      	strb	r2, [r3, #0]
	if (presetVersionNumber > 0)
    7016:	9b06      	ldr	r3, [sp, #24]
    7018:	2b00      	cmp	r3, #0
    701a:	f000 82be 	beq.w	759a <parsePreset+0x141a>
		pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    701e:	eddb 7a3f 	vldr	s15, [fp, #252]	; 0xfc
    7022:	eef4 7ae6 	vcmpe.f32	s15, s13
    7026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    702a:	bfcc      	ite	gt
    702c:	2301      	movgt	r3, #1
    702e:	2300      	movle	r3, #0
	bufferIndex += 2;
    7030:	3504      	adds	r5, #4
		knobFrozen[i] = 0;
    7032:	499e      	ldr	r1, [pc, #632]	; (72ac <parsePreset+0x112c>)
    7034:	f8df b2a4 	ldr.w	fp, [pc, #676]	; 72dc <parsePreset+0x115c>
	bufferIndex += 2;
    7038:	b2aa      	uxth	r2, r5
    703a:	f50b 6018 	add.w	r0, fp, #2432	; 0x980
    703e:	4614      	mov	r4, r2
	numMappings = 0;
    7040:	2200      	movs	r2, #0
		knobFrozen[i] = 0;
    7042:	700a      	strb	r2, [r1, #0]
    7044:	704a      	strb	r2, [r1, #1]
    7046:	708a      	strb	r2, [r1, #2]
    7048:	70ca      	strb	r2, [r1, #3]
    704a:	710a      	strb	r2, [r1, #4]
    704c:	714a      	strb	r2, [r1, #5]
    704e:	718a      	strb	r2, [r1, #6]
    7050:	71ca      	strb	r2, [r1, #7]
    7052:	720a      	strb	r2, [r1, #8]
    7054:	724a      	strb	r2, [r1, #9]
    7056:	728a      	strb	r2, [r1, #10]
    7058:	72ca      	strb	r2, [r1, #11]
    705a:	4995      	ldr	r1, [pc, #596]	; (72b0 <parsePreset+0x1130>)
    705c:	700b      	strb	r3, [r1, #0]
		mappings[i].destNumber = 255;
    705e:	21ff      	movs	r1, #255	; 0xff
	numMappings = 0;
    7060:	4b94      	ldr	r3, [pc, #592]	; (72b4 <parsePreset+0x1134>)
    7062:	701a      	strb	r2, [r3, #0]
		lfoOn[i] = 0;
    7064:	4b94      	ldr	r3, [pc, #592]	; (72b8 <parsePreset+0x1138>)
    7066:	601a      	str	r2, [r3, #0]
		envOn[i] = 0;
    7068:	4b94      	ldr	r3, [pc, #592]	; (72bc <parsePreset+0x113c>)
    706a:	601a      	str	r2, [r3, #0]
		knobFrozen[i] = 0;
    706c:	465b      	mov	r3, fp
		mappings[i].destNumber = 255;
    706e:	7019      	strb	r1, [r3, #0]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    7070:	334c      	adds	r3, #76	; 0x4c
		mappings[i].hookActive[0] = 0;
    7072:	f843 2c04 	str.w	r2, [r3, #-4]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    7076:	4298      	cmp	r0, r3
    7078:	d1f9      	bne.n	706e <parsePreset+0xeee>
	for (int i = 0; i < mappingCount; i++)
    707a:	9b07      	ldr	r3, [sp, #28]
    707c:	2b00      	cmp	r3, #0
    707e:	f000 8251 	beq.w	7524 <parsePreset+0x13a4>
    7082:	2300      	movs	r3, #0
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    7084:	f8cd a004 	str.w	sl, [sp, #4]
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    7088:	ed9f 8a8d 	vldr	s16, [pc, #564]	; 72c0 <parsePreset+0x1140>
				foundOne = 1;
    708c:	f04f 0801 	mov.w	r8, #1
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    7090:	9e06      	ldr	r6, [sp, #24]
    7092:	46a2      	mov	sl, r4
	for (int i = 0; i < mappingCount; i++)
    7094:	9303      	str	r3, [sp, #12]
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    7096:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
		uint8_t destNumber = buffer[bufferIndex+1];
    709a:	9b01      	ldr	r3, [sp, #4]
    709c:	4453      	add	r3, sl
    709e:	7858      	ldrb	r0, [r3, #1]
		if (presetVersionNumber > 0)
    70a0:	2e00      	cmp	r6, #0
    70a2:	f000 8192 	beq.w	73ca <parsePreset+0x124a>
			whichHook = buffer[bufferIndex+5]; //slotID sent as last bit of data in new preset sending versions
    70a6:	795d      	ldrb	r5, [r3, #5]
		uint8_t whichHook = 0;
    70a8:	2300      	movs	r3, #0
    70aa:	465a      	mov	r2, fp
    70ac:	461f      	mov	r7, r3
    70ae:	461c      	mov	r4, r3
    70b0:	e003      	b.n	70ba <parsePreset+0xf3a>
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    70b2:	3301      	adds	r3, #1
    70b4:	324c      	adds	r2, #76	; 0x4c
    70b6:	2b20      	cmp	r3, #32
    70b8:	d00c      	beq.n	70d4 <parsePreset+0xf54>
			if (mappings[j].destNumber == destNumber)
    70ba:	7811      	ldrb	r1, [r2, #0]
    70bc:	4281      	cmp	r1, r0
    70be:	d1f8      	bne.n	70b2 <parsePreset+0xf32>
				foundOne = 1;
    70c0:	2701      	movs	r7, #1
    70c2:	b2dc      	uxtb	r4, r3
				if (presetVersionNumber == 0)
    70c4:	2e00      	cmp	r6, #0
    70c6:	d1f4      	bne.n	70b2 <parsePreset+0xf32>
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    70c8:	3301      	adds	r3, #1
					whichHook = mappings[j].numHooks;
    70ca:	f892 504b 	ldrb.w	r5, [r2, #75]	; 0x4b
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    70ce:	324c      	adds	r2, #76	; 0x4c
    70d0:	2b20      	cmp	r3, #32
    70d2:	d1f2      	bne.n	70ba <parsePreset+0xf3a>
		if (foundOne == 0)
    70d4:	b99f      	cbnz	r7, 70fe <parsePreset+0xf7e>
			whichMapping = numMappings;
    70d6:	4977      	ldr	r1, [pc, #476]	; (72b4 <parsePreset+0x1134>)
			mappings[whichMapping].dest = &params[destNumber];
    70d8:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
    70dc:	9c09      	ldr	r4, [sp, #36]	; 0x24
			if (presetVersionNumber == 0)
    70de:	2e00      	cmp	r6, #0
			whichMapping = numMappings;
    70e0:	780b      	ldrb	r3, [r1, #0]
			mappings[whichMapping].dest = &params[destNumber];
    70e2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
			if (presetVersionNumber == 0)
    70e6:	bf08      	it	eq
    70e8:	2500      	moveq	r5, #0
			mappings[whichMapping].destNumber = destNumber;
    70ea:	461c      	mov	r4, r3
			numMappings++;
    70ec:	3301      	adds	r3, #1
    70ee:	700b      	strb	r3, [r1, #0]
			mappings[whichMapping].destNumber = destNumber;
    70f0:	234c      	movs	r3, #76	; 0x4c
    70f2:	fb03 f304 	mul.w	r3, r3, r4
    70f6:	f80b 0003 	strb.w	r0, [fp, r3]
    70fa:	445b      	add	r3, fp
			mappings[whichMapping].dest = &params[destNumber];
    70fc:	605a      	str	r2, [r3, #4]
		int source = buffer[bufferIndex];
    70fe:	9b01      	ldr	r3, [sp, #4]
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    7100:	1c6a      	adds	r2, r5, #1
    7102:	4870      	ldr	r0, [pc, #448]	; (72c4 <parsePreset+0x1144>)
		int source = buffer[bufferIndex];
    7104:	f813 700a 	ldrb.w	r7, [r3, sl]
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    7108:	234c      	movs	r3, #76	; 0x4c
    710a:	fb03 f304 	mul.w	r3, r3, r4
    710e:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
		if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    7112:	2f03      	cmp	r7, #3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    7114:	eb03 01c5 	add.w	r1, r3, r5, lsl #3
    7118:	f100 0004 	add.w	r0, r0, #4
    711c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    7120:	445b      	add	r3, fp
    7122:	4459      	add	r1, fp
    7124:	442b      	add	r3, r5
    7126:	60c8      	str	r0, [r1, #12]
    7128:	4866      	ldr	r0, [pc, #408]	; (72c4 <parsePreset+0x1144>)
    712a:	eb00 01c7 	add.w	r1, r0, r7, lsl #3
    712e:	f84b 1002 	str.w	r1, [fp, r2]
		if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    7132:	bfd4      	ite	le
    7134:	2200      	movle	r2, #0
    7136:	2201      	movgt	r2, #1
    7138:	f883 2020 	strb.w	r2, [r3, #32]
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    713c:	b23a      	sxth	r2, r7
    713e:	f1a7 0318 	sub.w	r3, r7, #24
    7142:	920a      	str	r2, [sp, #40]	; 0x28
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    7144:	00ea      	lsls	r2, r5, #3
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    7146:	2b03      	cmp	r3, #3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    7148:	9204      	str	r2, [sp, #16]
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    714a:	f200 8134 	bhi.w	73b6 <parsePreset+0x1236>
			lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    714e:	4b5a      	ldr	r3, [pc, #360]	; (72b8 <parsePreset+0x1138>)
    7150:	443b      	add	r3, r7
    7152:	f803 8c18 	strb.w	r8, [r3, #-24]
		if ((source >= OSC_SOURCE_OFFSET) && (source < (OSC_SOURCE_OFFSET+NUM_OSC)))
    7156:	2f02      	cmp	r7, #2
    7158:	d802      	bhi.n	7160 <parsePreset+0xfe0>
			oscOn[source - OSC_SOURCE_OFFSET] = 1;
    715a:	4b5b      	ldr	r3, [pc, #364]	; (72c8 <parsePreset+0x1148>)
    715c:	f803 8007 	strb.w	r8, [r3, r7]
		if ((source >= NOISE_SOURCE_OFFSET) && (source < (NOISE_SOURCE_OFFSET+1)))
    7160:	2f03      	cmp	r7, #3
    7162:	f000 8142 	beq.w	73ea <parsePreset+0x126a>
		if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    7166:	3f04      	subs	r7, #4
    7168:	2f0b      	cmp	r7, #11
    716a:	f240 815a 	bls.w	7422 <parsePreset+0x12a2>
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    716e:	b2fb      	uxtb	r3, r7
    7170:	4a56      	ldr	r2, [pc, #344]	; (72cc <parsePreset+0x114c>)
    7172:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7176:	930b      	str	r3, [sp, #44]	; 0x2c
			uint8_t whichMacro = source - MACRO_SOURCE_OFFSET;
    7178:	b2fb      	uxtb	r3, r7
    717a:	9304      	str	r3, [sp, #16]
		int scalar = buffer[bufferIndex+2];
    717c:	9b01      	ldr	r3, [sp, #4]
    717e:	4453      	add	r3, sl
    7180:	f893 9002 	ldrb.w	r9, [r3, #2]
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    7184:	ea4f 0349 	mov.w	r3, r9, lsl #1
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    7188:	f1a9 0018 	sub.w	r0, r9, #24
			if (scalar == 0xff)
    718c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    7190:	fa0f f289 	sxth.w	r2, r9
    7194:	9306      	str	r3, [sp, #24]
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    7196:	f1a9 0314 	sub.w	r3, r9, #20
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    719a:	9005      	str	r0, [sp, #20]
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    719c:	9308      	str	r3, [sp, #32]
			if (scalar == 0xff)
    719e:	f000 8116 	beq.w	73ce <parsePreset+0x124e>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    71a2:	4b48      	ldr	r3, [pc, #288]	; (72c4 <parsePreset+0x1144>)
    71a4:	1d29      	adds	r1, r5, #4
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    71a6:	2803      	cmp	r0, #3
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    71a8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    71ac:	f04f 034c 	mov.w	r3, #76	; 0x4c
    71b0:	fb03 f304 	mul.w	r3, r3, r4
    71b4:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    71b8:	445b      	add	r3, fp
    71ba:	605a      	str	r2, [r3, #4]
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    71bc:	f200 811f 	bhi.w	73fe <parsePreset+0x127e>
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    71c0:	4b3d      	ldr	r3, [pc, #244]	; (72b8 <parsePreset+0x1138>)
    71c2:	444b      	add	r3, r9
    71c4:	f803 8c18 	strb.w	r8, [r3, #-24]
				if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    71c8:	f1b9 0f02 	cmp.w	r9, #2
    71cc:	d802      	bhi.n	71d4 <parsePreset+0x1054>
					oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    71ce:	4b3e      	ldr	r3, [pc, #248]	; (72c8 <parsePreset+0x1148>)
    71d0:	f803 8009 	strb.w	r8, [r3, r9]
				if ((scalar >= NOISE_SOURCE_OFFSET) && (scalar < (NOISE_SOURCE_OFFSET + 1)))
    71d4:	f1b9 0f03 	cmp.w	r9, #3
    71d8:	d102      	bne.n	71e0 <parsePreset+0x1060>
					noiseOn = 1;
    71da:	4b3d      	ldr	r3, [pc, #244]	; (72d0 <parsePreset+0x1150>)
    71dc:	f883 8000 	strb.w	r8, [r3]
				if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    71e0:	2f0b      	cmp	r7, #11
    71e2:	f240 814f 	bls.w	7484 <parsePreset+0x1304>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    71e6:	224c      	movs	r2, #76	; 0x4c
    71e8:	00eb      	lsls	r3, r5, #3
    71ea:	4936      	ldr	r1, [pc, #216]	; (72c4 <parsePreset+0x1144>)
    71ec:	fb02 3304 	mla	r3, r2, r4, r3
    71f0:	9a06      	ldr	r2, [sp, #24]
    71f2:	3201      	adds	r2, #1
    71f4:	445b      	add	r3, fp
    71f6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    71fa:	629a      	str	r2, [r3, #40]	; 0x28
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    71fc:	9b05      	ldr	r3, [sp, #20]
    71fe:	2b03      	cmp	r3, #3
    7200:	f200 8106 	bhi.w	7410 <parsePreset+0x1290>
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    7204:	4b2c      	ldr	r3, [pc, #176]	; (72b8 <parsePreset+0x1138>)
    7206:	444b      	add	r3, r9
    7208:	f803 8c18 	strb.w	r8, [r3, #-24]
				if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    720c:	f1b9 0f02 	cmp.w	r9, #2
    7210:	d802      	bhi.n	7218 <parsePreset+0x1098>
					oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    7212:	4b2d      	ldr	r3, [pc, #180]	; (72c8 <parsePreset+0x1148>)
    7214:	f803 8009 	strb.w	r8, [r3, r9]
				if ((scalar >= NOISE_SOURCE_OFFSET) && (scalar < (NOISE_SOURCE_OFFSET + 1)))
    7218:	f1b9 0f03 	cmp.w	r9, #3
    721c:	d102      	bne.n	7224 <parsePreset+0x10a4>
					noiseOn = 1;
    721e:	4b2c      	ldr	r3, [pc, #176]	; (72d0 <parsePreset+0x1150>)
    7220:	f883 8000 	strb.w	r8, [r3]
				if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    7224:	2f0b      	cmp	r7, #11
    7226:	f240 8158 	bls.w	74da <parsePreset+0x135a>
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    722a:	9b01      	ldr	r3, [sp, #4]
		mappings[whichMapping].hookActive[whichHook] = 1;
    722c:	214c      	movs	r1, #76	; 0x4c
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    722e:	eb03 020a 	add.w	r2, r3, sl
		mappings[whichMapping].amount[whichHook] = amountFloat;
    7232:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    7236:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		mappings[whichMapping].hookActive[whichHook] = 1;
    723a:	fb01 b404 	mla	r4, r1, r4, fp
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    723e:	78d1      	ldrb	r1, [r2, #3]
    7240:	7912      	ldrb	r2, [r2, #4]
		mappings[whichMapping].amount[whichHook] = amountFloat;
    7242:	442b      	add	r3, r5
		mappings[whichMapping].hookActive[whichHook] = 1;
    7244:	4425      	add	r5, r4
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    7246:	eb02 2201 	add.w	r2, r2, r1, lsl #8
		mappings[whichMapping].amount[whichHook] = amountFloat;
    724a:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		mappings[whichMapping].hookActive[whichHook] = 1;
    724e:	f885 8048 	strb.w	r8, [r5, #72]	; 0x48
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    7252:	b212      	sxth	r2, r2
    7254:	ee07 2a90 	vmov	s15, r2
    7258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    725c:	ee67 7a88 	vmul.f32	s15, s15, s16
		mappings[whichMapping].amount[whichHook] = amountFloat;
    7260:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		mappings[whichMapping].numHooks++;
    7264:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
    7268:	3301      	adds	r3, #1
    726a:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
		if (presetVersionNumber > 0)
    726e:	2e00      	cmp	r6, #0
    7270:	f000 809c 	beq.w	73ac <parsePreset+0x122c>
			bufferIndex += 6;
    7274:	f10a 0306 	add.w	r3, sl, #6
    7278:	fa1f fa83 	uxth.w	sl, r3
	for (int i = 0; i < mappingCount; i++)
    727c:	9b03      	ldr	r3, [sp, #12]
    727e:	9a07      	ldr	r2, [sp, #28]
    7280:	3301      	adds	r3, #1
    7282:	4293      	cmp	r3, r2
    7284:	9303      	str	r3, [sp, #12]
    7286:	f47f af08 	bne.w	709a <parsePreset+0xf1a>
	for (int i = 0; i < numMappings; i++)
    728a:	4b0a      	ldr	r3, [pc, #40]	; (72b4 <parsePreset+0x1134>)
    728c:	781a      	ldrb	r2, [r3, #0]
    728e:	2a00      	cmp	r2, #0
    7290:	f000 8148 	beq.w	7524 <parsePreset+0x13a4>
    7294:	4c0f      	ldr	r4, [pc, #60]	; (72d4 <parsePreset+0x1154>)
    7296:	f04f 0800 	mov.w	r8, #0
			for (int v = 0; v < numStringsThisBoard; v++)
    729a:	4f0f      	ldr	r7, [pc, #60]	; (72d8 <parsePreset+0x1158>)
    729c:	e028      	b.n	72f0 <parsePreset+0x1170>
    729e:	bf00      	nop
    72a0:	20019ab4 	.word	0x20019ab4
    72a4:	20019ab8 	.word	0x20019ab8
    72a8:	20016e41 	.word	0x20016e41
    72ac:	200053a0 	.word	0x200053a0
    72b0:	2001abe0 	.word	0x2001abe0
    72b4:	20019ac0 	.word	0x20019ac0
    72b8:	20005460 	.word	0x20005460
    72bc:	200051d4 	.word	0x200051d4
    72c0:	37fffffc 	.word	0x37fffffc
    72c4:	20014818 	.word	0x20014818
    72c8:	20005720 	.word	0x20005720
    72cc:	200053dc 	.word	0x200053dc
    72d0:	200056c4 	.word	0x200056c4
    72d4:	20018e80 	.word	0x20018e80
    72d8:	20000015 	.word	0x20000015
    72dc:	20018e78 	.word	0x20018e78
    72e0:	00000000 	.word	0x00000000
	for (int i = 0; i < numMappings; i++)
    72e4:	f108 0801 	add.w	r8, r8, #1
    72e8:	344c      	adds	r4, #76	; 0x4c
    72ea:	4542      	cmp	r2, r8
    72ec:	f340 811a 	ble.w	7524 <parsePreset+0x13a4>
		if (mappings[i].destNumber != 255)
    72f0:	f814 3c08 	ldrb.w	r3, [r4, #-8]
    72f4:	2bff      	cmp	r3, #255	; 0xff
    72f6:	d0f5      	beq.n	72e4 <parsePreset+0x1164>
			for (int v = 0; v < numStringsThisBoard; v++)
    72f8:	783b      	ldrb	r3, [r7, #0]
    72fa:	2b00      	cmp	r3, #0
    72fc:	d0f2      	beq.n	72e4 <parsePreset+0x1164>
    72fe:	4626      	mov	r6, r4
    7300:	2500      	movs	r5, #0
					if (mappings[i].hookActive[j])
    7302:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
				float unsmoothedValue = 0.0f;
    7306:	ed5f 7a0a 	vldr	s15, [pc, #-40]	; 72e0 <parsePreset+0x1160>
					if (mappings[i].hookActive[j])
    730a:	b15b      	cbz	r3, 7324 <parsePreset+0x11a4>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    730c:	6832      	ldr	r2, [r6, #0]
    730e:	69f3      	ldr	r3, [r6, #28]
    7310:	edd2 7a00 	vldr	s15, [r2]
    7314:	edd3 6a00 	vldr	s13, [r3]
    7318:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
    731c:	ee67 7aa6 	vmul.f32	s15, s15, s13
    7320:	ee67 7a87 	vmul.f32	s15, s15, s14
					if (mappings[i].hookActive[j])
    7324:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    7328:	b15b      	cbz	r3, 7342 <parsePreset+0x11c2>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    732a:	68b2      	ldr	r2, [r6, #8]
    732c:	6a73      	ldr	r3, [r6, #36]	; 0x24
						unsmoothedValue += sum;
    732e:	ed92 7a00 	vldr	s14, [r2]
    7332:	ed93 6a00 	vldr	s12, [r3]
    7336:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
    733a:	ee27 7a06 	vmul.f32	s14, s14, s12
    733e:	eee6 7a87 	vfma.f32	s15, s13, s14
					if (mappings[i].hookActive[j])
    7342:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    7346:	b15b      	cbz	r3, 7360 <parsePreset+0x11e0>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    7348:	6932      	ldr	r2, [r6, #16]
    734a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
						unsmoothedValue += sum;
    734c:	ed92 7a00 	vldr	s14, [r2]
    7350:	ed93 6a00 	vldr	s12, [r3]
    7354:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    7358:	ee27 7a06 	vmul.f32	s14, s14, s12
    735c:	eee6 7a87 	vfma.f32	s15, s13, s14
				float finalVal = unsmoothedValue + mappings[i].dest->zeroToOneVal[v];
    7360:	f854 3c04 	ldr.w	r3, [r4, #-4]
			for (int v = 0; v < numStringsThisBoard; v++)
    7364:	3604      	adds	r6, #4
    7366:	eb03 0985 	add.w	r9, r3, r5, lsl #2
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    736a:	691b      	ldr	r3, [r3, #16]
				float finalVal = unsmoothedValue + mappings[i].dest->zeroToOneVal[v];
    736c:	ed99 0a00 	vldr	s0, [r9]
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    7370:	ee37 0a80 	vadd.f32	s0, s15, s0
    7374:	4798      	blx	r3
    7376:	ed89 0a02 	vstr	s0, [r9, #8]
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    737a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    737e:	4629      	mov	r1, r5
    7380:	eb03 0285 	add.w	r2, r3, r5, lsl #2
    7384:	7e18      	ldrb	r0, [r3, #24]
			for (int v = 0; v < numStringsThisBoard; v++)
    7386:	3501      	adds	r5, #1
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    7388:	ed92 0a02 	vldr	s0, [r2, #8]
    738c:	695a      	ldr	r2, [r3, #20]
    738e:	4790      	blx	r2
			for (int v = 0; v < numStringsThisBoard; v++)
    7390:	783b      	ldrb	r3, [r7, #0]
    7392:	42ab      	cmp	r3, r5
    7394:	dcb5      	bgt.n	7302 <parsePreset+0x1182>
	for (int i = 0; i < numMappings; i++)
    7396:	4bae      	ldr	r3, [pc, #696]	; (7650 <parsePreset+0x14d0>)
    7398:	781a      	ldrb	r2, [r3, #0]
    739a:	e7a3      	b.n	72e4 <parsePreset+0x1164>
			params[i].objectNumber = 2;
    739c:	2002      	movs	r0, #2
    739e:	7638      	strb	r0, [r7, #24]
    73a0:	e606      	b.n	6fb0 <parsePreset+0xe30>
			params[i].objectNumber = 3;
    73a2:	2003      	movs	r0, #3
    73a4:	7638      	strb	r0, [r7, #24]
    73a6:	e603      	b.n	6fb0 <parsePreset+0xe30>
		if ((i >= Osc1) && (i < Osc2))
    73a8:	2000      	movs	r0, #0
    73aa:	e601      	b.n	6fb0 <parsePreset+0xe30>
			bufferIndex += 5;
    73ac:	f10a 0305 	add.w	r3, sl, #5
    73b0:	fa1f fa83 	uxth.w	sl, r3
    73b4:	e762      	b.n	727c <parsePreset+0x10fc>
		if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    73b6:	f1a7 0314 	sub.w	r3, r7, #20
    73ba:	2b03      	cmp	r3, #3
    73bc:	f63f aecb 	bhi.w	7156 <parsePreset+0xfd6>
			envOn[source - ENV_SOURCE_OFFSET] = 1;
    73c0:	4ba4      	ldr	r3, [pc, #656]	; (7654 <parsePreset+0x14d4>)
    73c2:	443b      	add	r3, r7
    73c4:	f803 8c14 	strb.w	r8, [r3, #-20]
    73c8:	e6c5      	b.n	7156 <parsePreset+0xfd6>
		uint8_t whichHook = 0;
    73ca:	4635      	mov	r5, r6
    73cc:	e66c      	b.n	70a8 <parsePreset+0xf28>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &defaultScaling;
    73ce:	234c      	movs	r3, #76	; 0x4c
    73d0:	1d29      	adds	r1, r5, #4
    73d2:	00ea      	lsls	r2, r5, #3
    73d4:	fb03 f304 	mul.w	r3, r3, r4
    73d8:	441a      	add	r2, r3
    73da:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    73de:	499e      	ldr	r1, [pc, #632]	; (7658 <parsePreset+0x14d8>)
    73e0:	445a      	add	r2, fp
    73e2:	445b      	add	r3, fp
    73e4:	6291      	str	r1, [r2, #40]	; 0x28
    73e6:	6059      	str	r1, [r3, #4]
    73e8:	e71f      	b.n	722a <parsePreset+0x10aa>
			noiseOn = 1;
    73ea:	4b9c      	ldr	r3, [pc, #624]	; (765c <parsePreset+0x14dc>)
		if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    73ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
			noiseOn = 1;
    73f0:	f883 8000 	strb.w	r8, [r3]
    73f4:	4b9a      	ldr	r3, [pc, #616]	; (7660 <parsePreset+0x14e0>)
    73f6:	930b      	str	r3, [sp, #44]	; 0x2c
    73f8:	23ff      	movs	r3, #255	; 0xff
    73fa:	9304      	str	r3, [sp, #16]
    73fc:	e6be      	b.n	717c <parsePreset+0xffc>
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    73fe:	9b08      	ldr	r3, [sp, #32]
    7400:	2b03      	cmp	r3, #3
    7402:	f63f aee1 	bhi.w	71c8 <parsePreset+0x1048>
					envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    7406:	4b93      	ldr	r3, [pc, #588]	; (7654 <parsePreset+0x14d4>)
    7408:	444b      	add	r3, r9
    740a:	f803 8c14 	strb.w	r8, [r3, #-20]
    740e:	e6db      	b.n	71c8 <parsePreset+0x1048>
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    7410:	9b08      	ldr	r3, [sp, #32]
    7412:	2b03      	cmp	r3, #3
    7414:	f63f aefa 	bhi.w	720c <parsePreset+0x108c>
					envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    7418:	4b8e      	ldr	r3, [pc, #568]	; (7654 <parsePreset+0x14d4>)
    741a:	444b      	add	r3, r9
    741c:	f803 8c14 	strb.w	r8, [r3, #-20]
    7420:	e6f4      	b.n	720c <parsePreset+0x108c>
			for (int v = 0; v < numStringsThisBoard; v++)
    7422:	4b90      	ldr	r3, [pc, #576]	; (7664 <parsePreset+0x14e4>)
			uint8_t whichMacro = source - MACRO_SOURCE_OFFSET;
    7424:	fa5f f987 	uxtb.w	r9, r7
			for (int v = 0; v < numStringsThisBoard; v++)
    7428:	781a      	ldrb	r2, [r3, #0]
    742a:	2a00      	cmp	r2, #0
    742c:	f000 809f 	beq.w	756e <parsePreset+0x13ee>
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    7430:	f109 0c03 	add.w	ip, r9, #3
				sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    7434:	498c      	ldr	r1, [pc, #560]	; (7668 <parsePreset+0x14e8>)
    7436:	980a      	ldr	r0, [sp, #40]	; 0x28
    7438:	0092      	lsls	r2, r2, #2
    743a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    743c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    7440:	f8cd 9010 	str.w	r9, [sp, #16]
				sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    7444:	ebcc 01cc 	rsb	r1, ip, ip, lsl #3
    7448:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    744c:	ea4f 03cc 	mov.w	r3, ip, lsl #3
    7450:	3108      	adds	r1, #8
    7452:	e9cd 3c05 	strd	r3, ip, [sp, #20]
    7456:	f003 fe23 	bl	b0a0 <__memcpy_veneer>
    745a:	f8dd c018 	ldr.w	ip, [sp, #24]
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    745e:	9a05      	ldr	r2, [sp, #20]
    7460:	eba2 030c 	sub.w	r3, r2, ip
    7464:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7466:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    746a:	ed93 0a02 	vldr	s0, [r3, #8]
    746e:	4b7f      	ldr	r3, [pc, #508]	; (766c <parsePreset+0x14ec>)
    7470:	eb03 0389 	add.w	r3, r3, r9, lsl #2
    7474:	4618      	mov	r0, r3
    7476:	930b      	str	r3, [sp, #44]	; 0x2c
    7478:	f003 fe62 	bl	b140 <__tExpSmooth_setValAndDest_veneer>
			knobFrozen[whichMacro] = 1;
    747c:	4b7c      	ldr	r3, [pc, #496]	; (7670 <parsePreset+0x14f0>)
    747e:	f803 8009 	strb.w	r8, [r3, r9]
    7482:	e67b      	b.n	717c <parsePreset+0xffc>
					for (int v = 0; v < numStringsThisBoard; v++)
    7484:	4b77      	ldr	r3, [pc, #476]	; (7664 <parsePreset+0x14e4>)
    7486:	781a      	ldrb	r2, [r3, #0]
    7488:	2a00      	cmp	r2, #0
    748a:	f000 8088 	beq.w	759e <parsePreset+0x141e>
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    748e:	9b04      	ldr	r3, [sp, #16]
						sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    7490:	0092      	lsls	r2, r2, #2
    7492:	4975      	ldr	r1, [pc, #468]	; (7668 <parsePreset+0x14e8>)
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    7494:	f103 0c03 	add.w	ip, r3, #3
						sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    7498:	980a      	ldr	r0, [sp, #40]	; 0x28
    749a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    749c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    74a0:	ebcc 01cc 	rsb	r1, ip, ip, lsl #3
    74a4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    74a8:	ea4f 03cc 	mov.w	r3, ip, lsl #3
    74ac:	3108      	adds	r1, #8
    74ae:	e9cd 3c0c 	strd	r3, ip, [sp, #48]	; 0x30
    74b2:	f003 fdf5 	bl	b0a0 <__memcpy_veneer>
    74b6:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    74ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    74bc:	980b      	ldr	r0, [sp, #44]	; 0x2c
    74be:	eba2 030c 	sub.w	r3, r2, ip
    74c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    74c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    74c8:	ed93 0a02 	vldr	s0, [r3, #8]
    74cc:	f003 fe38 	bl	b140 <__tExpSmooth_setValAndDest_veneer>
					knobFrozen[whichMacro] = 1;
    74d0:	4b67      	ldr	r3, [pc, #412]	; (7670 <parsePreset+0x14f0>)
    74d2:	9a04      	ldr	r2, [sp, #16]
    74d4:	f803 8002 	strb.w	r8, [r3, r2]
    74d8:	e685      	b.n	71e6 <parsePreset+0x1066>
					for (int v = 0; v < numStringsThisBoard; v++)
    74da:	4b62      	ldr	r3, [pc, #392]	; (7664 <parsePreset+0x14e4>)
    74dc:	781a      	ldrb	r2, [r3, #0]
    74de:	2a00      	cmp	r2, #0
    74e0:	d04d      	beq.n	757e <parsePreset+0x13fe>
						sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    74e2:	4b61      	ldr	r3, [pc, #388]	; (7668 <parsePreset+0x14e8>)
    74e4:	0092      	lsls	r2, r2, #2
    74e6:	990a      	ldr	r1, [sp, #40]	; 0x28
    74e8:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    74ec:	9b04      	ldr	r3, [sp, #16]
    74ee:	f103 0903 	add.w	r9, r3, #3
						sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    74f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    74f4:	ebc9 01c9 	rsb	r1, r9, r9, lsl #3
    74f8:	ea4f 07c9 	mov.w	r7, r9, lsl #3
    74fc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    7500:	3108      	adds	r1, #8
    7502:	f003 fdcd 	bl	b0a0 <__memcpy_veneer>
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    7506:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7508:	eba7 0309 	sub.w	r3, r7, r9
    750c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    750e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7512:	ed93 0a02 	vldr	s0, [r3, #8]
    7516:	f003 fe13 	bl	b140 <__tExpSmooth_setValAndDest_veneer>
					knobFrozen[whichMacro] = 1;
    751a:	4b55      	ldr	r3, [pc, #340]	; (7670 <parsePreset+0x14f0>)
    751c:	9a04      	ldr	r2, [sp, #16]
    751e:	f803 8002 	strb.w	r8, [r3, r2]
    7522:	e682      	b.n	722a <parsePreset+0x10aa>
	presetWaitingToParse = 0;
    7524:	4b53      	ldr	r3, [pc, #332]	; (7674 <parsePreset+0x14f4>)
    7526:	2400      	movs	r4, #0
	currentActivePreset = presetNumber;
    7528:	f89d 2008 	ldrb.w	r2, [sp, #8]
	presetWaitingToParse = 0;
    752c:	601c      	str	r4, [r3, #0]
	currentActivePreset = presetNumber;
    752e:	4b52      	ldr	r3, [pc, #328]	; (7678 <parsePreset+0x14f8>)
	audioMasterLevel = 1.0f;
    7530:	4952      	ldr	r1, [pc, #328]	; (767c <parsePreset+0x14fc>)
	currentActivePreset = presetNumber;
    7532:	701a      	strb	r2, [r3, #0]
	audioMasterLevel = 1.0f;
    7534:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
	overSampled = 1;
    7538:	2201      	movs	r2, #1
	audioMasterLevel = 1.0f;
    753a:	600b      	str	r3, [r1, #0]
	oscToTick = NUM_OSC;
    753c:	2103      	movs	r1, #3
    753e:	4b50      	ldr	r3, [pc, #320]	; (7680 <parsePreset+0x1500>)
	changeOversampling(overSampled);
    7540:	4610      	mov	r0, r2
	oscToTick = NUM_OSC;
    7542:	7019      	strb	r1, [r3, #0]
	overSampled = 1;
    7544:	4b4f      	ldr	r3, [pc, #316]	; (7684 <parsePreset+0x1504>)
    7546:	601a      	str	r2, [r3, #0]
	changeOversampling(overSampled);
    7548:	f003 fcea 	bl	af20 <__changeOversampling_veneer>
    754c:	b662      	cpsie	i
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
    754e:	2201      	movs	r2, #1
	presetReady = 1;
    7550:	4b4d      	ldr	r3, [pc, #308]	; (7688 <parsePreset+0x1508>)
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
    7552:	484e      	ldr	r0, [pc, #312]	; (768c <parsePreset+0x150c>)
    7554:	4611      	mov	r1, r2
	presetReady = 1;
    7556:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
    7558:	f003 fd6a 	bl	b030 <__HAL_GPIO_WritePin_veneer>
	diskBusy = 0;
    755c:	4a4c      	ldr	r2, [pc, #304]	; (7690 <parsePreset+0x1510>)
	receivingI2C = 0;
    755e:	4b4d      	ldr	r3, [pc, #308]	; (7694 <parsePreset+0x1514>)
	diskBusy = 0;
    7560:	7014      	strb	r4, [r2, #0]
	receivingI2C = 0;
    7562:	701c      	strb	r4, [r3, #0]
}
    7564:	b00f      	add	sp, #60	; 0x3c
    7566:	ecbd 8b02 	vpop	{d8}
    756a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    756e:	f109 0c03 	add.w	ip, r9, #3
    7572:	f8cd 9010 	str.w	r9, [sp, #16]
    7576:	ea4f 03cc 	mov.w	r3, ip, lsl #3
    757a:	9305      	str	r3, [sp, #20]
    757c:	e76f      	b.n	745e <parsePreset+0x12de>
    757e:	9b04      	ldr	r3, [sp, #16]
    7580:	f103 0903 	add.w	r9, r3, #3
    7584:	ea4f 07c9 	mov.w	r7, r9, lsl #3
    7588:	e7bd      	b.n	7506 <parsePreset+0x1386>
			oscOn[i] = 0;
    758a:	2200      	movs	r2, #0
			oscsEnabled[i] = 0;
    758c:	4610      	mov	r0, r2
    758e:	f7ff bb2d 	b.w	6bec <parsePreset+0xa6c>
			oscOn[i] = 0;
    7592:	2200      	movs	r2, #0
			oscsEnabled[i] = 0;
    7594:	4610      	mov	r0, r2
    7596:	f7ff baf3 	b.w	6b80 <parsePreset+0xa00>
		pedalControlsMaster = 1;
    759a:	2301      	movs	r3, #1
    759c:	e548      	b.n	7030 <parsePreset+0xeb0>
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    759e:	9b04      	ldr	r3, [sp, #16]
    75a0:	f103 0c03 	add.w	ip, r3, #3
    75a4:	ea4f 02cc 	mov.w	r2, ip, lsl #3
    75a8:	920c      	str	r2, [sp, #48]	; 0x30
    75aa:	e786      	b.n	74ba <parsePreset+0x133a>
			  shapeTick[i] = &triTick;
    75ac:	4a3a      	ldr	r2, [pc, #232]	; (7698 <parsePreset+0x1518>)
    75ae:	483b      	ldr	r0, [pc, #236]	; (769c <parsePreset+0x151c>)
    75b0:	6090      	str	r0, [r2, #8]
			  break;
    75b2:	f7ff bb0c 	b.w	6bce <parsePreset+0xa4e>
			  shapeTick[i] = &pulseTick;
    75b6:	4a38      	ldr	r2, [pc, #224]	; (7698 <parsePreset+0x1518>)
    75b8:	4839      	ldr	r0, [pc, #228]	; (76a0 <parsePreset+0x1520>)
    75ba:	6090      	str	r0, [r2, #8]
			  break;
    75bc:	f7ff bb07 	b.w	6bce <parsePreset+0xa4e>
			  shapeTick[i] = &sawTick;
    75c0:	4a35      	ldr	r2, [pc, #212]	; (7698 <parsePreset+0x1518>)
    75c2:	4838      	ldr	r0, [pc, #224]	; (76a4 <parsePreset+0x1524>)
    75c4:	6090      	str	r0, [r2, #8]
			  break;
    75c6:	f7ff bb02 	b.w	6bce <parsePreset+0xa4e>
			  shapeTick[i] = &sineTriTick;
    75ca:	4a33      	ldr	r2, [pc, #204]	; (7698 <parsePreset+0x1518>)
    75cc:	4836      	ldr	r0, [pc, #216]	; (76a8 <parsePreset+0x1528>)
    75ce:	6090      	str	r0, [r2, #8]
			  break;
    75d0:	f7ff bafd 	b.w	6bce <parsePreset+0xa4e>
			  shapeTick[i] = &sawSquareTick;
    75d4:	4a30      	ldr	r2, [pc, #192]	; (7698 <parsePreset+0x1518>)
    75d6:	4835      	ldr	r0, [pc, #212]	; (76ac <parsePreset+0x152c>)
    75d8:	6090      	str	r0, [r2, #8]
			  break;
    75da:	f7ff baf8 	b.w	6bce <parsePreset+0xa4e>
			  shapeTick[i] = &triTick;
    75de:	4a2e      	ldr	r2, [pc, #184]	; (7698 <parsePreset+0x1518>)
    75e0:	482e      	ldr	r0, [pc, #184]	; (769c <parsePreset+0x151c>)
    75e2:	6050      	str	r0, [r2, #4]
			  break;
    75e4:	f7ff babd 	b.w	6b62 <parsePreset+0x9e2>
			  shapeTick[i] = &sineTick;
    75e8:	4a2b      	ldr	r2, [pc, #172]	; (7698 <parsePreset+0x1518>)
    75ea:	4831      	ldr	r0, [pc, #196]	; (76b0 <parsePreset+0x1530>)
    75ec:	6050      	str	r0, [r2, #4]
			  break;
    75ee:	f7ff bab8 	b.w	6b62 <parsePreset+0x9e2>
			  shapeTick[i] = &pulseTick;
    75f2:	4a29      	ldr	r2, [pc, #164]	; (7698 <parsePreset+0x1518>)
    75f4:	482a      	ldr	r0, [pc, #168]	; (76a0 <parsePreset+0x1520>)
    75f6:	6050      	str	r0, [r2, #4]
			  break;
    75f8:	f7ff bab3 	b.w	6b62 <parsePreset+0x9e2>
			  shapeTick[i] = &sawTick;
    75fc:	4a26      	ldr	r2, [pc, #152]	; (7698 <parsePreset+0x1518>)
    75fe:	4829      	ldr	r0, [pc, #164]	; (76a4 <parsePreset+0x1524>)
    7600:	6050      	str	r0, [r2, #4]
			  break;
    7602:	f7ff baae 	b.w	6b62 <parsePreset+0x9e2>
			  shapeTick[i] = &sawSquareTick;
    7606:	4a24      	ldr	r2, [pc, #144]	; (7698 <parsePreset+0x1518>)
    7608:	4828      	ldr	r0, [pc, #160]	; (76ac <parsePreset+0x152c>)
    760a:	6050      	str	r0, [r2, #4]
			  break;
    760c:	f7ff baa9 	b.w	6b62 <parsePreset+0x9e2>
			  shapeTick[i] = &triTick;
    7610:	4b21      	ldr	r3, [pc, #132]	; (7698 <parsePreset+0x1518>)
    7612:	4a22      	ldr	r2, [pc, #136]	; (769c <parsePreset+0x151c>)
    7614:	601a      	str	r2, [r3, #0]
			  break;
    7616:	f7ff ba4c 	b.w	6ab2 <parsePreset+0x932>
			  shapeTick[i] = &sineTick;
    761a:	4b1f      	ldr	r3, [pc, #124]	; (7698 <parsePreset+0x1518>)
    761c:	4a24      	ldr	r2, [pc, #144]	; (76b0 <parsePreset+0x1530>)
    761e:	601a      	str	r2, [r3, #0]
			  break;
    7620:	f7ff ba47 	b.w	6ab2 <parsePreset+0x932>
			  shapeTick[i] = &pulseTick;
    7624:	4b1c      	ldr	r3, [pc, #112]	; (7698 <parsePreset+0x1518>)
    7626:	4a1e      	ldr	r2, [pc, #120]	; (76a0 <parsePreset+0x1520>)
    7628:	601a      	str	r2, [r3, #0]
			  break;
    762a:	f7ff ba42 	b.w	6ab2 <parsePreset+0x932>
			  shapeTick[i] = &sawTick;
    762e:	4b1a      	ldr	r3, [pc, #104]	; (7698 <parsePreset+0x1518>)
    7630:	4a1c      	ldr	r2, [pc, #112]	; (76a4 <parsePreset+0x1524>)
    7632:	601a      	str	r2, [r3, #0]
			  break;
    7634:	f7ff ba3d 	b.w	6ab2 <parsePreset+0x932>
			  shapeTick[i] = &sawSquareTick;
    7638:	4b17      	ldr	r3, [pc, #92]	; (7698 <parsePreset+0x1518>)
    763a:	4a1c      	ldr	r2, [pc, #112]	; (76ac <parsePreset+0x152c>)
    763c:	601a      	str	r2, [r3, #0]
			  break;
    763e:	f7ff ba38 	b.w	6ab2 <parsePreset+0x932>
    7642:	4c1c      	ldr	r4, [pc, #112]	; (76b4 <parsePreset+0x1534>)
    7644:	f7ff b95c 	b.w	6900 <parsePreset+0x780>
    7648:	f8df 906c 	ldr.w	r9, [pc, #108]	; 76b8 <parsePreset+0x1538>
    764c:	f7ff b946 	b.w	68dc <parsePreset+0x75c>
    7650:	20019ac0 	.word	0x20019ac0
    7654:	200051d4 	.word	0x200051d4
    7658:	20000748 	.word	0x20000748
    765c:	200056c4 	.word	0x200056c4
    7660:	200057d8 	.word	0x200057d8
    7664:	20000015 	.word	0x20000015
    7668:	20014818 	.word	0x20014818
    766c:	200053dc 	.word	0x200053dc
    7670:	200053a0 	.word	0x200053a0
    7674:	2001ac00 	.word	0x2001ac00
    7678:	20000744 	.word	0x20000744
    767c:	20000740 	.word	0x20000740
    7680:	2000002c 	.word	0x2000002c
    7684:	20000030 	.word	0x20000030
    7688:	20005884 	.word	0x20005884
    768c:	58020000 	.word	0x58020000
    7690:	20014cc0 	.word	0x20014cc0
    7694:	2001b014 	.word	0x2001b014
    7698:	20005d3c 	.word	0x20005d3c
    769c:	000024e1 	.word	0x000024e1
    76a0:	00002441 	.word	0x00002441
    76a4:	00002401 	.word	0x00002401
    76a8:	000023a1 	.word	0x000023a1
    76ac:	00002341 	.word	0x00002341
    76b0:	000024a1 	.word	0x000024a1
    76b4:	2001abe0 	.word	0x2001abe0
    76b8:	20019ad0 	.word	0x20019ad0
    76bc:	f3af 8000 	nop.w

000076c0 <handleSPI>:
	if (foundBrainFirmware)
    76c0:	4974      	ldr	r1, [pc, #464]	; (7894 <handleSPI+0x1d4>)
	interruptChecker = 1;
    76c2:	4b75      	ldr	r3, [pc, #468]	; (7898 <handleSPI+0x1d8>)
{
    76c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	interruptChecker = 1;
    76c8:	2501      	movs	r5, #1
{
    76ca:	4604      	mov	r4, r0
    76cc:	ed2d 8b02 	vpush	{d8}
	if (foundBrainFirmware)
    76d0:	780a      	ldrb	r2, [r1, #0]
{
    76d2:	b085      	sub	sp, #20
	interruptChecker = 1;
    76d4:	701d      	strb	r5, [r3, #0]
	if (foundBrainFirmware)
    76d6:	b37a      	cbz	r2, 7738 <handleSPI+0x78>
		if (brainFirmwareEndSignal)
    76d8:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 78b4 <handleSPI+0x1f4>
    76dc:	f8d9 0000 	ldr.w	r0, [r9]
    76e0:	2800      	cmp	r0, #0
    76e2:	d045      	beq.n	7770 <handleSPI+0xb0>
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    76e4:	4b6d      	ldr	r3, [pc, #436]	; (789c <handleSPI+0x1dc>)
    76e6:	20f9      	movs	r0, #249	; 0xf9
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    76e8:	4a6d      	ldr	r2, [pc, #436]	; (78a0 <handleSPI+0x1e0>)
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    76ea:	4423      	add	r3, r4
			brainFirmwareSendInProgress = 0;
    76ec:	4c6d      	ldr	r4, [pc, #436]	; (78a4 <handleSPI+0x1e4>)
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    76ee:	6812      	ldr	r2, [r2, #0]
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    76f0:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
			brainFirmwareEndSignal = 0;
    76f4:	2000      	movs	r0, #0
			foundBrainFirmware = 0;
    76f6:	7008      	strb	r0, [r1, #0]
			SPI_LEVERS_TX[offset+2] = brainFirmwareSize >> 16;
    76f8:	0c11      	lsrs	r1, r2, #16
			brainFirmwareSendInProgress = 0;
    76fa:	6020      	str	r0, [r4, #0]
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    76fc:	0e14      	lsrs	r4, r2, #24
			brainFirmwareEndSignal = 0;
    76fe:	f8c9 0000 	str.w	r0, [r9]
			SPI_LEVERS_TX[offset+3] = brainFirmwareSize >> 8;
    7702:	0a10      	lsrs	r0, r2, #8
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    7704:	3a00      	subs	r2, #0
			SPI_LEVERS_TX[offset+2] = brainFirmwareSize >> 16;
    7706:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
			SPI_LEVERS_TX[offset+31] = 254;
    770a:	f04f 01fe 	mov.w	r1, #254	; 0xfe
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    770e:	f883 4041 	strb.w	r4, [r3, #65]	; 0x41
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    7712:	bf18      	it	ne
    7714:	2201      	movne	r2, #1
			SPI_LEVERS_TX[offset+3] = brainFirmwareSize >> 8;
    7716:	f883 0043 	strb.w	r0, [r3, #67]	; 0x43
			SPI_LEVERS_TX[offset+31] = 254;
    771a:	f883 105f 	strb.w	r1, [r3, #95]	; 0x5f
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    771e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
    7722:	2200      	movs	r2, #0
    7724:	f44f 6100 	mov.w	r1, #2048	; 0x800
    7728:	485f      	ldr	r0, [pc, #380]	; (78a8 <handleSPI+0x1e8>)
}
    772a:	b005      	add	sp, #20
    772c:	ecbd 8b02 	vpop	{d8}
    7730:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
    7734:	f003 bc7c 	b.w	b030 <__HAL_GPIO_WritePin_veneer>
		if (SPI_LEVERS_RX[offset] == ReceivingPitches)
    7738:	4d58      	ldr	r5, [pc, #352]	; (789c <handleSPI+0x1dc>)
    773a:	5c2b      	ldrb	r3, [r5, r0]
    773c:	2b01      	cmp	r3, #1
    773e:	f000 80bd 	beq.w	78bc <handleSPI+0x1fc>
		else if (SPI_LEVERS_RX[offset] == ReceivingPreset)
    7742:	2b0c      	cmp	r3, #12
    7744:	f200 8275 	bhi.w	7c32 <handleSPI+0x572>
    7748:	2b01      	cmp	r3, #1
    774a:	f240 8151 	bls.w	79f0 <handleSPI+0x330>
    774e:	3b02      	subs	r3, #2
    7750:	2b0a      	cmp	r3, #10
    7752:	f200 814d 	bhi.w	79f0 <handleSPI+0x330>
    7756:	e8df f013 	tbh	[pc, r3, lsl #1]
    775a:	02c0      	.short	0x02c0
    775c:	014b031f 	.word	0x014b031f
    7760:	0429014b 	.word	0x0429014b
    7764:	014b04af 	.word	0x014b04af
    7768:	053b014b 	.word	0x053b014b
    776c:	055102f3 	.word	0x055102f3
		else if (brainFirmwareSendInProgress)
    7770:	4a4c      	ldr	r2, [pc, #304]	; (78a4 <handleSPI+0x1e4>)
    7772:	6813      	ldr	r3, [r2, #0]
    7774:	2b00      	cmp	r3, #0
    7776:	f000 8274 	beq.w	7c62 <handleSPI+0x5a2>
			SPI_LEVERS_TX[offset] = 251; //special byte that says it's a firmware chunk
    777a:	4d48      	ldr	r5, [pc, #288]	; (789c <handleSPI+0x1dc>)
    777c:	23fb      	movs	r3, #251	; 0xfb
    777e:	f8df b138 	ldr.w	fp, [pc, #312]	; 78b8 <handleSPI+0x1f8>
    7782:	eb05 0a04 	add.w	sl, r5, r4
    7786:	4f49      	ldr	r7, [pc, #292]	; (78ac <handleSPI+0x1ec>)
    7788:	f8db 2000 	ldr.w	r2, [fp]
    778c:	f88a 3040 	strb.w	r3, [sl, #64]	; 0x40
			for (int i = 0; i < 30; i++)
    7790:	4b47      	ldr	r3, [pc, #284]	; (78b0 <handleSPI+0x1f0>)
    7792:	8819      	ldrh	r1, [r3, #0]
    7794:	e032      	b.n	77fc <handleSPI+0x13c>
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    7796:	2e3a      	cmp	r6, #58	; 0x3a
    7798:	f000 829a 	beq.w	7cd0 <handleSPI+0x610>
    779c:	f1be 0f3a 	cmp.w	lr, #58	; 0x3a
					positionInRowLine = 0;
    77a0:	f04f 0100 	mov.w	r1, #0
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    77a4:	bf08      	it	eq
    77a6:	3202      	addeq	r2, #2
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    77a8:	18bb      	adds	r3, r7, r2
    77aa:	789b      	ldrb	r3, [r3, #2]
    77ac:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    77ae:	bf08      	it	eq
    77b0:	3203      	addeq	r2, #3
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    77b2:	18bb      	adds	r3, r7, r2
    77b4:	78db      	ldrb	r3, [r3, #3]
    77b6:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    77b8:	bf08      	it	eq
    77ba:	3204      	addeq	r2, #4
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    77bc:	18bb      	adds	r3, r7, r2
    77be:	791b      	ldrb	r3, [r3, #4]
    77c0:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    77c2:	bf08      	it	eq
    77c4:	3205      	addeq	r2, #5
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    77c6:	18bb      	adds	r3, r7, r2
    77c8:	795b      	ldrb	r3, [r3, #5]
    77ca:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    77cc:	bf08      	it	eq
    77ce:	3206      	addeq	r2, #6
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    77d0:	18bb      	adds	r3, r7, r2
    77d2:	799b      	ldrb	r3, [r3, #6]
    77d4:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    77d6:	bf08      	it	eq
    77d8:	3207      	addeq	r2, #7
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    77da:	18bb      	adds	r3, r7, r2
    77dc:	79db      	ldrb	r3, [r3, #7]
    77de:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    77e0:	bf08      	it	eq
    77e2:	3208      	addeq	r2, #8
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    77e4:	18bb      	adds	r3, r7, r2
    77e6:	7a1b      	ldrb	r3, [r3, #8]
    77e8:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    77ea:	bf08      	it	eq
    77ec:	3209      	addeq	r2, #9
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    77ee:	18bb      	adds	r3, r7, r2
    77f0:	7a5b      	ldrb	r3, [r3, #9]
    77f2:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    77f4:	bf08      	it	eq
    77f6:	320a      	addeq	r2, #10
			for (int i = 0; i < 30; i++)
    77f8:	281e      	cmp	r0, #30
    77fa:	d03a      	beq.n	7872 <handleSPI+0x1b2>
				uint8_t val1 = brainFirmwareBuffer[brainFirmwareBufferIndex];
    77fc:	5cbe      	ldrb	r6, [r7, r2]
				uint8_t val2 = brainFirmwareBuffer[brainFirmwareBufferIndex+1];
    77fe:	f102 0c01 	add.w	ip, r2, #1
	if (('0' <= value) && (value <= '9'))
    7802:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
				uint8_t val2 = brainFirmwareBuffer[brainFirmwareBufferIndex+1];
    7806:	f817 e00c 	ldrb.w	lr, [r7, ip]
	if (('0' <= value) && (value <= '9'))
    780a:	b2db      	uxtb	r3, r3
    780c:	2b09      	cmp	r3, #9
    780e:	f240 824a 	bls.w	7ca6 <handleSPI+0x5e6>
	if (('a' <= value) && (value <= 'f'))
    7812:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
    7816:	2b05      	cmp	r3, #5
    7818:	f240 8248 	bls.w	7cac <handleSPI+0x5ec>
	if (('A' <= value) && (value <= 'F'))
    781c:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
    7820:	2b05      	cmp	r3, #5
    7822:	f240 824f 	bls.w	7cc4 <handleSPI+0x604>
    7826:	2300      	movs	r3, #0
	if (('0' <= value) && (value <= '9'))
    7828:	f1ae 0830 	sub.w	r8, lr, #48	; 0x30
    782c:	fa5f f888 	uxtb.w	r8, r8
    7830:	f1b8 0f09 	cmp.w	r8, #9
    7834:	f240 8234 	bls.w	7ca0 <handleSPI+0x5e0>
	if (('a' <= value) && (value <= 'f'))
    7838:	f1ae 0861 	sub.w	r8, lr, #97	; 0x61
    783c:	f1b8 0f05 	cmp.w	r8, #5
    7840:	f240 823a 	bls.w	7cb8 <handleSPI+0x5f8>
	if (('A' <= value) && (value <= 'F'))
    7844:	f1ae 0841 	sub.w	r8, lr, #65	; 0x41
    7848:	f1b8 0f05 	cmp.w	r8, #5
    784c:	d804      	bhi.n	7858 <handleSPI+0x198>
		return (uint8_t) (10 + value - 'A');
    784e:	f1ae 0837 	sub.w	r8, lr, #55	; 0x37
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    7852:	ea43 0308 	orr.w	r3, r3, r8
    7856:	b2db      	uxtb	r3, r3
				if (positionInRowLine < 294)
    7858:	f5b1 7f93 	cmp.w	r1, #294	; 0x126
    785c:	d29b      	bcs.n	7796 <handleSPI+0xd6>
					SPI_LEVERS_TX[offset+i+1] = valToSend;
    785e:	eb0a 0600 	add.w	r6, sl, r0
			for (int i = 0; i < 30; i++)
    7862:	3001      	adds	r0, #1
				positionInRowLine++;
    7864:	3101      	adds	r1, #1
					brainFirmwareBufferIndex += 2;
    7866:	3202      	adds	r2, #2
			for (int i = 0; i < 30; i++)
    7868:	281e      	cmp	r0, #30
					SPI_LEVERS_TX[offset+i+1] = valToSend;
    786a:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
				positionInRowLine++;
    786e:	b289      	uxth	r1, r1
			for (int i = 0; i < 30; i++)
    7870:	d1c4      	bne.n	77fc <handleSPI+0x13c>
    7872:	4b0f      	ldr	r3, [pc, #60]	; (78b0 <handleSPI+0x1f0>)
			SPI_LEVERS_TX[offset+31] = 254;
    7874:	442c      	add	r4, r5
    7876:	f8cb 2000 	str.w	r2, [fp]
    787a:	8019      	strh	r1, [r3, #0]
    787c:	23fe      	movs	r3, #254	; 0xfe
    787e:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
			if (brainFirmwareBufferIndex >= brainFirmwareSize)
    7882:	4b07      	ldr	r3, [pc, #28]	; (78a0 <handleSPI+0x1e0>)
    7884:	681b      	ldr	r3, [r3, #0]
    7886:	4293      	cmp	r3, r2
    7888:	f63f af4b 	bhi.w	7722 <handleSPI+0x62>
				brainFirmwareEndSignal = 1;
    788c:	2301      	movs	r3, #1
    788e:	f8c9 3000 	str.w	r3, [r9]
    7892:	e746      	b.n	7722 <handleSPI+0x62>
    7894:	20016e40 	.word	0x20016e40
    7898:	20016e43 	.word	0x20016e43
    789c:	30000800 	.word	0x30000800
    78a0:	20014c7c 	.word	0x20014c7c
    78a4:	20014c78 	.word	0x20014c78
    78a8:	58020c00 	.word	0x58020c00
    78ac:	c3c00000 	.word	0xc3c00000
    78b0:	2001abe8 	.word	0x2001abe8
    78b4:	20014c74 	.word	0x20014c74
    78b8:	20014c70 	.word	0x20014c70
			 for (int i = 0; i < numStringsThisBoard; i++)
    78bc:	4bca      	ldr	r3, [pc, #808]	; (7be8 <handleSPI+0x528>)
    78be:	7818      	ldrb	r0, [r3, #0]
    78c0:	2800      	cmp	r0, #0
    78c2:	f000 8083 	beq.w	79cc <handleSPI+0x30c>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    78c6:	49c9      	ldr	r1, [pc, #804]	; (7bec <handleSPI+0x52c>)
			 uint8_t currentByte = offset+1;
    78c8:	1c63      	adds	r3, r4, #1
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    78ca:	ed9f 6ac9 	vldr	s12, [pc, #804]	; 7bf0 <handleSPI+0x530>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    78ce:	680a      	ldr	r2, [r1, #0]
    78d0:	b2db      	uxtb	r3, r3
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    78d2:	eddf 6ac8 	vldr	s13, [pc, #800]	; 7bf4 <handleSPI+0x534>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    78d6:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    78da:	5cd2      	ldrb	r2, [r2, r3]
    78dc:	0212      	lsls	r2, r2, #8
    78de:	ee07 2a90 	vmov	s15, r2
    78e2:	680a      	ldr	r2, [r1, #0]
    78e4:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    78e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    78ec:	441a      	add	r2, r3
    78ee:	7852      	ldrb	r2, [r2, #1]
    78f0:	ee07 2a90 	vmov	s15, r2
    78f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    78f8:	ee77 7a87 	vadd.f32	s15, s15, s14
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    78fc:	eef4 7a46 	vcmp.f32	s15, s12
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    7900:	ee27 7aa6 	vmul.f32	s14, s15, s13
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    7904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7908:	d507      	bpl.n	791a <handleSPI+0x25a>
    790a:	eeb5 7a40 	vcmp.f32	s14, #0.0
    790e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7912:	dd02      	ble.n	791a <handleSPI+0x25a>
					stringMIDIPitches[i] = myPitch;
    7914:	4ab8      	ldr	r2, [pc, #736]	; (7bf8 <handleSPI+0x538>)
    7916:	ed82 7a00 	vstr	s14, [r2]
			 for (int i = 0; i < numStringsThisBoard; i++)
    791a:	2801      	cmp	r0, #1
    791c:	d056      	beq.n	79cc <handleSPI+0x30c>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    791e:	680a      	ldr	r2, [r1, #0]
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    7920:	ed9f 6ab3 	vldr	s12, [pc, #716]	; 7bf0 <handleSPI+0x530>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    7924:	3201      	adds	r2, #1
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    7926:	eddf 6ab3 	vldr	s13, [pc, #716]	; 7bf4 <handleSPI+0x534>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    792a:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    792e:	5cd2      	ldrb	r2, [r2, r3]
    7930:	0212      	lsls	r2, r2, #8
    7932:	ee07 2a90 	vmov	s15, r2
    7936:	680a      	ldr	r2, [r1, #0]
    7938:	3201      	adds	r2, #1
    793a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    793e:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    7942:	441a      	add	r2, r3
    7944:	7852      	ldrb	r2, [r2, #1]
    7946:	ee07 2a90 	vmov	s15, r2
    794a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    794e:	ee77 7a87 	vadd.f32	s15, s15, s14
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    7952:	eef4 7a46 	vcmp.f32	s15, s12
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    7956:	ee27 7aa6 	vmul.f32	s14, s15, s13
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    795a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    795e:	d507      	bpl.n	7970 <handleSPI+0x2b0>
    7960:	eeb5 7a40 	vcmp.f32	s14, #0.0
    7964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7968:	dd02      	ble.n	7970 <handleSPI+0x2b0>
					stringMIDIPitches[i] = myPitch;
    796a:	4aa3      	ldr	r2, [pc, #652]	; (7bf8 <handleSPI+0x538>)
    796c:	ed82 7a01 	vstr	s14, [r2, #4]
			 for (int i = 0; i < numStringsThisBoard; i++)
    7970:	2802      	cmp	r0, #2
    7972:	d02b      	beq.n	79cc <handleSPI+0x30c>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    7974:	680a      	ldr	r2, [r1, #0]
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    7976:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 7bf4 <handleSPI+0x534>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    797a:	3202      	adds	r2, #2
    797c:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    7980:	5cd2      	ldrb	r2, [r2, r3]
    7982:	0212      	lsls	r2, r2, #8
    7984:	ee07 2a90 	vmov	s15, r2
    7988:	680a      	ldr	r2, [r1, #0]
    798a:	3202      	adds	r2, #2
    798c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    7990:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    7994:	441a      	add	r2, r3
    7996:	7852      	ldrb	r2, [r2, #1]
    7998:	ee06 2a90 	vmov	s13, r2
    799c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    79a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    79a4:	ee27 7a87 	vmul.f32	s14, s15, s14
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    79a8:	eeb5 7a40 	vcmp.f32	s14, #0.0
    79ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    79b0:	dd09      	ble.n	79c6 <handleSPI+0x306>
    79b2:	eddf 6a8f 	vldr	s13, [pc, #572]	; 7bf0 <handleSPI+0x530>
    79b6:	eef4 7a66 	vcmp.f32	s15, s13
    79ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    79be:	d502      	bpl.n	79c6 <handleSPI+0x306>
					stringMIDIPitches[i] = myPitch;
    79c0:	4a8d      	ldr	r2, [pc, #564]	; (7bf8 <handleSPI+0x538>)
    79c2:	ed82 7a02 	vstr	s14, [r2, #8]
			 for (int i = 0; i < numStringsThisBoard; i++)
    79c6:	2803      	cmp	r0, #3
    79c8:	f040 8422 	bne.w	8210 <_Min_Stack_Size+0x210>
			 HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
    79cc:	488b      	ldr	r0, [pc, #556]	; (7bfc <handleSPI+0x53c>)
    79ce:	f44f 7100 	mov.w	r1, #512	; 0x200
    79d2:	2201      	movs	r2, #1
			 whichBar = 0;
    79d4:	2600      	movs	r6, #0
			 HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
    79d6:	f003 fb2b 	bl	b030 <__HAL_GPIO_WritePin_veneer>
			 whichBar = 0;
    79da:	4b89      	ldr	r3, [pc, #548]	; (7c00 <handleSPI+0x540>)
			 updateStateFromSPIMessage(offset);
    79dc:	4620      	mov	r0, r4
			 whichBar = 0;
    79de:	701e      	strb	r6, [r3, #0]
			updateStateFromSPIMessage(offset);
    79e0:	f7f8 fd0e 	bl	400 <updateStateFromSPIMessage>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
    79e4:	2200      	movs	r2, #0
    79e6:	f44f 7100 	mov.w	r1, #512	; 0x200
    79ea:	4884      	ldr	r0, [pc, #528]	; (7bfc <handleSPI+0x53c>)
    79ec:	f003 fb20 	bl	b030 <__HAL_GPIO_WritePin_veneer>
			if (boardNumber == 0)
    79f0:	4b84      	ldr	r3, [pc, #528]	; (7c04 <handleSPI+0x544>)
    79f2:	781b      	ldrb	r3, [r3, #0]
    79f4:	2b00      	cmp	r3, #0
    79f6:	f47f ae94 	bne.w	7722 <handleSPI+0x62>
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    79fa:	4b83      	ldr	r3, [pc, #524]	; (7c08 <handleSPI+0x548>)
				SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    79fc:	442c      	add	r4, r5
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    79fe:	4a83      	ldr	r2, [pc, #524]	; (7c0c <handleSPI+0x54c>)
				SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    7a00:	20fd      	movs	r0, #253	; 0xfd
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    7a02:	7819      	ldrb	r1, [r3, #0]
				SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    7a04:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    7a08:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    7a0c:	7819      	ldrb	r1, [r3, #0]
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    7a0e:	4d80      	ldr	r5, [pc, #512]	; (7c10 <handleSPI+0x550>)
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    7a10:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    7a14:	0049      	lsls	r1, r1, #1
    7a16:	5c50      	ldrb	r0, [r2, r1]
				SPI_LEVERS_TX[offset+3] = presetNamesArray[whichPresetToSendName][1];
    7a18:	7819      	ldrb	r1, [r3, #0]
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    7a1a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
				SPI_LEVERS_TX[offset+3] = presetNamesArray[whichPresetToSendName][1];
    7a1e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    7a22:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    7a26:	7849      	ldrb	r1, [r1, #1]
    7a28:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
				SPI_LEVERS_TX[offset+4] = presetNamesArray[whichPresetToSendName][2];
    7a2c:	7819      	ldrb	r1, [r3, #0]
    7a2e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    7a32:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    7a36:	7889      	ldrb	r1, [r1, #2]
    7a38:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
				SPI_LEVERS_TX[offset+5] = presetNamesArray[whichPresetToSendName][3];
    7a3c:	7819      	ldrb	r1, [r3, #0]
    7a3e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    7a42:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    7a46:	78c9      	ldrb	r1, [r1, #3]
    7a48:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
				SPI_LEVERS_TX[offset+6] = presetNamesArray[whichPresetToSendName][4];
    7a4c:	7819      	ldrb	r1, [r3, #0]
    7a4e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    7a52:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    7a56:	7909      	ldrb	r1, [r1, #4]
    7a58:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
				SPI_LEVERS_TX[offset+7] = presetNamesArray[whichPresetToSendName][5];
    7a5c:	7819      	ldrb	r1, [r3, #0]
    7a5e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    7a62:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    7a66:	7949      	ldrb	r1, [r1, #5]
    7a68:	f884 1047 	strb.w	r1, [r4, #71]	; 0x47
				SPI_LEVERS_TX[offset+8] = presetNamesArray[whichPresetToSendName][6];
    7a6c:	7819      	ldrb	r1, [r3, #0]
    7a6e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    7a72:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    7a76:	7989      	ldrb	r1, [r1, #6]
    7a78:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
				SPI_LEVERS_TX[offset+9] = presetNamesArray[whichPresetToSendName][7];
    7a7c:	7819      	ldrb	r1, [r3, #0]
    7a7e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    7a82:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    7a86:	79c9      	ldrb	r1, [r1, #7]
    7a88:	f884 1049 	strb.w	r1, [r4, #73]	; 0x49
				SPI_LEVERS_TX[offset+10] = presetNamesArray[whichPresetToSendName][8];
    7a8c:	7819      	ldrb	r1, [r3, #0]
    7a8e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    7a92:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    7a96:	7a09      	ldrb	r1, [r1, #8]
    7a98:	f884 104a 	strb.w	r1, [r4, #74]	; 0x4a
				SPI_LEVERS_TX[offset+11] = presetNamesArray[whichPresetToSendName][9];
    7a9c:	7819      	ldrb	r1, [r3, #0]
    7a9e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    7aa2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    7aa6:	7a49      	ldrb	r1, [r1, #9]
    7aa8:	f884 104b 	strb.w	r1, [r4, #75]	; 0x4b
				SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    7aac:	7819      	ldrb	r1, [r3, #0]
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    7aae:	782e      	ldrb	r6, [r5, #0]
				SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    7ab0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    7ab4:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
				SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    7ab8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    7abc:	7a89      	ldrb	r1, [r1, #10]
    7abe:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
				SPI_LEVERS_TX[offset+13] = presetNamesArray[whichPresetToSendName][11];
    7ac2:	7819      	ldrb	r1, [r3, #0]
    7ac4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    7ac8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    7acc:	7ac9      	ldrb	r1, [r1, #11]
    7ace:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
				SPI_LEVERS_TX[offset+14] = presetNamesArray[whichPresetToSendName][12];
    7ad2:	7819      	ldrb	r1, [r3, #0]
    7ad4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    7ad8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    7adc:	7b09      	ldrb	r1, [r1, #12]
    7ade:	f884 104e 	strb.w	r1, [r4, #78]	; 0x4e
				SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    7ae2:	7819      	ldrb	r1, [r3, #0]
    7ae4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    7ae8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    7aec:	eb06 0186 	add.w	r1, r6, r6, lsl #2
				whichMacroToSendName = (whichMacroToSendName + 1);
    7af0:	3601      	adds	r6, #1
				SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    7af2:	7b52      	ldrb	r2, [r2, #13]
				whichMacroToSendName = (whichMacroToSendName + 1);
    7af4:	b2f6      	uxtb	r6, r6
				SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    7af6:	f884 204f 	strb.w	r2, [r4, #79]	; 0x4f
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    7afa:	781a      	ldrb	r2, [r3, #0]
    7afc:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    7b00:	00d0      	lsls	r0, r2, #3
    7b02:	4a44      	ldr	r2, [pc, #272]	; (7c14 <handleSPI+0x554>)
    7b04:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    7b08:	5c10      	ldrb	r0, [r2, r0]
    7b0a:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
				SPI_LEVERS_TX[offset+18] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][1];
    7b0e:	7818      	ldrb	r0, [r3, #0]
    7b10:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    7b14:	00c0      	lsls	r0, r0, #3
    7b16:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    7b1a:	4410      	add	r0, r2
    7b1c:	7840      	ldrb	r0, [r0, #1]
    7b1e:	f884 0052 	strb.w	r0, [r4, #82]	; 0x52
				SPI_LEVERS_TX[offset+19] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][2];
    7b22:	7818      	ldrb	r0, [r3, #0]
    7b24:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    7b28:	00c0      	lsls	r0, r0, #3
    7b2a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    7b2e:	4410      	add	r0, r2
    7b30:	7880      	ldrb	r0, [r0, #2]
    7b32:	f884 0053 	strb.w	r0, [r4, #83]	; 0x53
				SPI_LEVERS_TX[offset+20] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][3];
    7b36:	7818      	ldrb	r0, [r3, #0]
    7b38:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    7b3c:	00c0      	lsls	r0, r0, #3
    7b3e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    7b42:	4410      	add	r0, r2
    7b44:	78c0      	ldrb	r0, [r0, #3]
    7b46:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
				SPI_LEVERS_TX[offset+21] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][4];
    7b4a:	7818      	ldrb	r0, [r3, #0]
    7b4c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    7b50:	00c0      	lsls	r0, r0, #3
    7b52:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    7b56:	4410      	add	r0, r2
    7b58:	7900      	ldrb	r0, [r0, #4]
    7b5a:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
				SPI_LEVERS_TX[offset+22] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][5];
    7b5e:	7818      	ldrb	r0, [r3, #0]
    7b60:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    7b64:	00c0      	lsls	r0, r0, #3
    7b66:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    7b6a:	4410      	add	r0, r2
    7b6c:	7940      	ldrb	r0, [r0, #5]
    7b6e:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
				SPI_LEVERS_TX[offset+23] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][6];
    7b72:	7818      	ldrb	r0, [r3, #0]
    7b74:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    7b78:	00c0      	lsls	r0, r0, #3
    7b7a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    7b7e:	4410      	add	r0, r2
    7b80:	7980      	ldrb	r0, [r0, #6]
    7b82:	f884 0057 	strb.w	r0, [r4, #87]	; 0x57
				SPI_LEVERS_TX[offset+24] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][7];
    7b86:	7818      	ldrb	r0, [r3, #0]
    7b88:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    7b8c:	00c0      	lsls	r0, r0, #3
    7b8e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    7b92:	4410      	add	r0, r2
    7b94:	79c0      	ldrb	r0, [r0, #7]
    7b96:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
				SPI_LEVERS_TX[offset+25] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][8];
    7b9a:	7818      	ldrb	r0, [r3, #0]
    7b9c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    7ba0:	00c0      	lsls	r0, r0, #3
    7ba2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    7ba6:	4410      	add	r0, r2
    7ba8:	7a00      	ldrb	r0, [r0, #8]
    7baa:	f884 0059 	strb.w	r0, [r4, #89]	; 0x59
				SPI_LEVERS_TX[offset+26] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][9];
    7bae:	7818      	ldrb	r0, [r3, #0]
    7bb0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    7bb4:	00c0      	lsls	r0, r0, #3
    7bb6:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    7bba:	440a      	add	r2, r1
    7bbc:	7a52      	ldrb	r2, [r2, #9]
    7bbe:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
				SPI_LEVERS_TX[offset+27] = 13;
    7bc2:	220d      	movs	r2, #13
    7bc4:	f884 205b 	strb.w	r2, [r4, #91]	; 0x5b
				SPI_LEVERS_TX[offset+28] = 13;
    7bc8:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
				SPI_LEVERS_TX[offset+29] = 13;
    7bcc:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
				SPI_LEVERS_TX[offset+30] = (sampleClippedCountdown > 0); //report whether there was a clip on the first board in the last 65535 samples
    7bd0:	4a11      	ldr	r2, [pc, #68]	; (7c18 <handleSPI+0x558>)
    7bd2:	8812      	ldrh	r2, [r2, #0]
    7bd4:	b292      	uxth	r2, r2
    7bd6:	3a00      	subs	r2, #0
    7bd8:	bf18      	it	ne
    7bda:	2201      	movne	r2, #1
				if (whichMacroToSendName >= 12)
    7bdc:	2e0b      	cmp	r6, #11
				SPI_LEVERS_TX[offset+30] = (sampleClippedCountdown > 0); //report whether there was a clip on the first board in the last 65535 samples
    7bde:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
				SPI_LEVERS_TX[offset+31] = 254;
    7be2:	f04f 02fe 	mov.w	r2, #254	; 0xfe
    7be6:	e019      	b.n	7c1c <handleSPI+0x55c>
    7be8:	20000015 	.word	0x20000015
    7bec:	20005258 	.word	0x20005258
    7bf0:	478bff74 	.word	0x478bff74
    7bf4:	3b000080 	.word	0x3b000080
    7bf8:	20014990 	.word	0x20014990
    7bfc:	58021800 	.word	0x58021800
    7c00:	20014a98 	.word	0x20014a98
    7c04:	20014c6d 	.word	0x20014c6d
    7c08:	2001d0b5 	.word	0x2001d0b5
    7c0c:	30042000 	.word	0x30042000
    7c10:	2001d0b4 	.word	0x2001d0b4
    7c14:	30043380 	.word	0x30043380
    7c18:	20005cc8 	.word	0x20005cc8
    7c1c:	f884 205f 	strb.w	r2, [r4, #95]	; 0x5f
				if (whichMacroToSendName >= 12)
    7c20:	d93c      	bls.n	7c9c <handleSPI+0x5dc>
					whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    7c22:	781a      	ldrb	r2, [r3, #0]
					whichMacroToSendName = 0;
    7c24:	2100      	movs	r1, #0
					whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    7c26:	3201      	adds	r2, #1
					whichMacroToSendName = 0;
    7c28:	7029      	strb	r1, [r5, #0]
					whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    7c2a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    7c2e:	701a      	strb	r2, [r3, #0]
    7c30:	e577      	b.n	7722 <handleSPI+0x62>
    7c32:	2bfd      	cmp	r3, #253	; 0xfd
    7c34:	f47f aedc 	bne.w	79f0 <handleSPI+0x330>
			if(writingState == ReceivingPreset)
    7c38:	4b46      	ldr	r3, [pc, #280]	; (7d54 <handleSPI+0x694>)
    7c3a:	7819      	ldrb	r1, [r3, #0]
    7c3c:	2902      	cmp	r1, #2
    7c3e:	f47f aed7 	bne.w	79f0 <handleSPI+0x330>
				 presetNumberToLoad = presetNumberToSave;
    7c42:	4845      	ldr	r0, [pc, #276]	; (7d58 <handleSPI+0x698>)
				 writingState = 0;
    7c44:	701a      	strb	r2, [r3, #0]
				 presetNumberToLoad = presetNumberToSave;
    7c46:	7803      	ldrb	r3, [r0, #0]
				 presetWaitingToParse = bufferPos;
    7c48:	4a44      	ldr	r2, [pc, #272]	; (7d5c <handleSPI+0x69c>)
				 presetNumberToLoad = presetNumberToSave;
    7c4a:	4945      	ldr	r1, [pc, #276]	; (7d60 <handleSPI+0x6a0>)
    7c4c:	b2db      	uxtb	r3, r3
    7c4e:	700b      	strb	r3, [r1, #0]
				 presetWaitingToParse = bufferPos;
    7c50:	8813      	ldrh	r3, [r2, #0]
    7c52:	4944      	ldr	r1, [pc, #272]	; (7d64 <handleSPI+0x6a4>)
    7c54:	b29b      	uxth	r3, r3
    7c56:	600b      	str	r3, [r1, #0]
				 presetWaitingToWrite = bufferPos;
    7c58:	8813      	ldrh	r3, [r2, #0]
    7c5a:	4a43      	ldr	r2, [pc, #268]	; (7d68 <handleSPI+0x6a8>)
    7c5c:	b29b      	uxth	r3, r3
    7c5e:	6013      	str	r3, [r2, #0]
    7c60:	e6c6      	b.n	79f0 <handleSPI+0x330>
			SPI_LEVERS_TX[offset] = 252; //special byte that says I'm gonna send you new firmware so reboot into bootloader;
    7c62:	4b42      	ldr	r3, [pc, #264]	; (7d6c <handleSPI+0x6ac>)
    7c64:	20fc      	movs	r0, #252	; 0xfc
    7c66:	4942      	ldr	r1, [pc, #264]	; (7d70 <handleSPI+0x6b0>)
    7c68:	f8df b128 	ldr.w	fp, [pc, #296]	; 7d94 <handleSPI+0x6d4>
			brainFirmwareSendInProgress = 1;
    7c6c:	6015      	str	r5, [r2, #0]
			SPI_LEVERS_TX[offset] = 252; //special byte that says I'm gonna send you new firmware so reboot into bootloader;
    7c6e:	190a      	adds	r2, r1, r4
    7c70:	1c5d      	adds	r5, r3, #1
    7c72:	f8db 1000 	ldr.w	r1, [fp]
    7c76:	f103 0464 	add.w	r4, r3, #100	; 0x64
    7c7a:	f882 0040 	strb.w	r0, [r2, #64]	; 0x40
			for (uint8_t i = 0; i<100; i++)
    7c7e:	461a      	mov	r2, r3
				if (brainFirmwareBuffer[i] ==  0x3a)
    7c80:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    7c84:	283a      	cmp	r0, #58	; 0x3a
    7c86:	d101      	bne.n	7c8c <handleSPI+0x5cc>
					brainFirmwareBufferIndex = i+1; // start after the header, so it's the first real byte after the ":"
    7c88:	3202      	adds	r2, #2
    7c8a:	1b51      	subs	r1, r2, r5
			for (uint8_t i = 0; i<100; i++)
    7c8c:	429c      	cmp	r4, r3
    7c8e:	d1f6      	bne.n	7c7e <handleSPI+0x5be>
			positionInRowLine = 0;
    7c90:	4b38      	ldr	r3, [pc, #224]	; (7d74 <handleSPI+0x6b4>)
    7c92:	2200      	movs	r2, #0
    7c94:	f8cb 1000 	str.w	r1, [fp]
    7c98:	801a      	strh	r2, [r3, #0]
    7c9a:	e542      	b.n	7722 <handleSPI+0x62>
				whichMacroToSendName = (whichMacroToSendName + 1);
    7c9c:	702e      	strb	r6, [r5, #0]
    7c9e:	e540      	b.n	7722 <handleSPI+0x62>
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    7ca0:	ea48 0303 	orr.w	r3, r8, r3
    7ca4:	e5d8      	b.n	7858 <handleSPI+0x198>
    7ca6:	011b      	lsls	r3, r3, #4
    7ca8:	b2db      	uxtb	r3, r3
    7caa:	e5bd      	b.n	7828 <handleSPI+0x168>
		return (uint8_t) (10 + value - 'a');
    7cac:	f1a6 0357 	sub.w	r3, r6, #87	; 0x57
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    7cb0:	011b      	lsls	r3, r3, #4
    7cb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
		return (uint8_t) (10 + value - 'a');
    7cb6:	e5b7      	b.n	7828 <handleSPI+0x168>
    7cb8:	f1ae 0857 	sub.w	r8, lr, #87	; 0x57
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    7cbc:	ea43 0308 	orr.w	r3, r3, r8
    7cc0:	b2db      	uxtb	r3, r3
		return (uint8_t) (10 + value - 'a');
    7cc2:	e5c9      	b.n	7858 <handleSPI+0x198>
		return (uint8_t) (10 + value - 'A');
    7cc4:	f1a6 0337 	sub.w	r3, r6, #55	; 0x37
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    7cc8:	011b      	lsls	r3, r3, #4
    7cca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
		return (uint8_t) (10 + value - 'A');
    7cce:	e5ab      	b.n	7828 <handleSPI+0x168>
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    7cd0:	18bb      	adds	r3, r7, r2
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    7cd2:	4662      	mov	r2, ip
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    7cd4:	f893 e002 	ldrb.w	lr, [r3, #2]
    7cd8:	e560      	b.n	779c <handleSPI+0xdc>
			 if (writingState != ReceivingPreset)
    7cda:	4a1e      	ldr	r2, [pc, #120]	; (7d54 <handleSPI+0x694>)
    7cdc:	7813      	ldrb	r3, [r2, #0]
    7cde:	2b02      	cmp	r3, #2
    7ce0:	f000 82c9 	beq.w	8276 <_Min_Stack_Size+0x276>
				 writingState = ReceivingPreset; // set the flag to let the mcu know that a preset write is in progress
    7ce4:	4b24      	ldr	r3, [pc, #144]	; (7d78 <handleSPI+0x6b8>)
    7ce6:	2102      	movs	r1, #2
    7ce8:	0758      	lsls	r0, r3, #29
    7cea:	7011      	strb	r1, [r2, #0]
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    7cec:	f040 85d1 	bne.w	8892 <_Min_Stack_Size+0x892>
    7cf0:	f503 6280 	add.w	r2, r3, #1024	; 0x400
						audioOutBuffer[i] = 0;
    7cf4:	2000      	movs	r0, #0
    7cf6:	2100      	movs	r1, #0
    7cf8:	e8e3 0102 	strd	r0, r1, [r3], #8
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    7cfc:	429a      	cmp	r2, r3
    7cfe:	d1fb      	bne.n	7cf8 <handleSPI+0x638>
				 diskBusy = 1;
    7d00:	4a1e      	ldr	r2, [pc, #120]	; (7d7c <handleSPI+0x6bc>)
    7d02:	2101      	movs	r1, #1
				 audioMasterLevel = 0.0f;
    7d04:	4b1e      	ldr	r3, [pc, #120]	; (7d80 <handleSPI+0x6c0>)
				 diskBusy = 1;
    7d06:	7011      	strb	r1, [r2, #0]
				 audioMasterLevel = 0.0f;
    7d08:	2200      	movs	r2, #0
				 bufferPos = 0;
    7d0a:	4914      	ldr	r1, [pc, #80]	; (7d5c <handleSPI+0x69c>)
				 audioMasterLevel = 0.0f;
    7d0c:	601a      	str	r2, [r3, #0]
				 bufferPos = 0;
    7d0e:	2300      	movs	r3, #0
    7d10:	800b      	strh	r3, [r1, #0]
			 presetNumberToSave = SPI_LEVERS_RX[offset + 1];
    7d12:	192b      	adds	r3, r5, r4
    7d14:	4a10      	ldr	r2, [pc, #64]	; (7d58 <handleSPI+0x698>)
    7d16:	4e1b      	ldr	r6, [pc, #108]	; (7d84 <handleSPI+0x6c4>)
    7d18:	785b      	ldrb	r3, [r3, #1]
    7d1a:	4f1b      	ldr	r7, [pc, #108]	; (7d88 <handleSPI+0x6c8>)
    7d1c:	7013      	strb	r3, [r2, #0]
			 uint8_t currentByte = offset+2; // first number says what it is 2nd number says which number it is
    7d1e:	1ca3      	adds	r3, r4, #2
    7d20:	b2db      	uxtb	r3, r3
    7d22:	1e5a      	subs	r2, r3, #1
    7d24:	441e      	add	r6, r3
    7d26:	442a      	add	r2, r5
				 buffer[bufferPos++] = SPI_LEVERS_RX[currentByte + i];
    7d28:	880b      	ldrh	r3, [r1, #0]
    7d2a:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    7d2e:	b29b      	uxth	r3, r3
			 for (int i = 0; i < 28; i++)
    7d30:	4296      	cmp	r6, r2
				 buffer[bufferPos++] = SPI_LEVERS_RX[currentByte + i];
    7d32:	54f8      	strb	r0, [r7, r3]
    7d34:	f103 0301 	add.w	r3, r3, #1
    7d38:	b29b      	uxth	r3, r3
    7d3a:	800b      	strh	r3, [r1, #0]
			 for (int i = 0; i < 28; i++)
    7d3c:	d1f4      	bne.n	7d28 <handleSPI+0x668>
    7d3e:	e657      	b.n	79f0 <handleSPI+0x330>
			if (boardNumber == 0)
    7d40:	4b12      	ldr	r3, [pc, #72]	; (7d8c <handleSPI+0x6cc>)
    7d42:	781b      	ldrb	r3, [r3, #0]
    7d44:	2b00      	cmp	r3, #0
    7d46:	f47f acec 	bne.w	7722 <handleSPI+0x62>
				brainFirmwareUpdateRequested = 1;
    7d4a:	4b11      	ldr	r3, [pc, #68]	; (7d90 <handleSPI+0x6d0>)
    7d4c:	2201      	movs	r2, #1
    7d4e:	601a      	str	r2, [r3, #0]
    7d50:	e653      	b.n	79fa <handleSPI+0x33a>
    7d52:	bf00      	nop
    7d54:	2001d0b6 	.word	0x2001d0b6
    7d58:	2001abfb 	.word	0x2001abfb
    7d5c:	20014c84 	.word	0x20014c84
    7d60:	2001abfa 	.word	0x2001abfa
    7d64:	2001ac00 	.word	0x2001ac00
    7d68:	2001ac04 	.word	0x2001ac04
    7d6c:	c3bfffff 	.word	0xc3bfffff
    7d70:	30000800 	.word	0x30000800
    7d74:	2001abe8 	.word	0x2001abe8
    7d78:	30000000 	.word	0x30000000
    7d7c:	20014cc0 	.word	0x20014cc0
    7d80:	20000740 	.word	0x20000740
    7d84:	3000081b 	.word	0x3000081b
    7d88:	30042380 	.word	0x30042380
    7d8c:	20014c6d 	.word	0x20014c6d
    7d90:	20014c80 	.word	0x20014c80
    7d94:	20014c70 	.word	0x20014c70
			 uint8_t currentByte = offset+1;
    7d98:	f100 0801 	add.w	r8, r0, #1
				if (knobFrozen[i])
    7d9c:	4fbb      	ldr	r7, [pc, #748]	; (808c <_Min_Stack_Size+0x8c>)
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    7d9e:	fa5f f888 	uxtb.w	r8, r8
				if (knobFrozen[i])
    7da2:	783b      	ldrb	r3, [r7, #0]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    7da4:	f815 9008 	ldrb.w	r9, [r5, r8]
				if (knobFrozen[i])
    7da8:	2b00      	cmp	r3, #0
    7daa:	f000 8274 	beq.w	8296 <_Min_Stack_Size+0x296>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    7dae:	4eb8      	ldr	r6, [pc, #736]	; (8090 <_Min_Stack_Size+0x90>)
    7db0:	7833      	ldrb	r3, [r6, #0]
    7db2:	1c9a      	adds	r2, r3, #2
    7db4:	4591      	cmp	r9, r2
    7db6:	dc02      	bgt.n	7dbe <handleSPI+0x6fe>
    7db8:	3b02      	subs	r3, #2
    7dba:	4599      	cmp	r9, r3
    7dbc:	da03      	bge.n	7dc6 <handleSPI+0x706>
						knobFrozen[i] = 0;
    7dbe:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    7dc0:	f886 9000 	strb.w	r9, [r6]
						knobFrozen[i] = 0;
    7dc4:	703b      	strb	r3, [r7, #0]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    7dc6:	eb05 0308 	add.w	r3, r5, r8
    7dca:	f893 9001 	ldrb.w	r9, [r3, #1]
				if (knobFrozen[i])
    7dce:	787b      	ldrb	r3, [r7, #1]
    7dd0:	2b00      	cmp	r3, #0
    7dd2:	f000 827d 	beq.w	82d0 <_Min_Stack_Size+0x2d0>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    7dd6:	7873      	ldrb	r3, [r6, #1]
    7dd8:	1c9a      	adds	r2, r3, #2
    7dda:	454a      	cmp	r2, r9
    7ddc:	db02      	blt.n	7de4 <handleSPI+0x724>
    7dde:	3b02      	subs	r3, #2
    7de0:	454b      	cmp	r3, r9
    7de2:	dd03      	ble.n	7dec <handleSPI+0x72c>
						knobFrozen[i] = 0;
    7de4:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    7de6:	f886 9001 	strb.w	r9, [r6, #1]
						knobFrozen[i] = 0;
    7dea:	707b      	strb	r3, [r7, #1]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    7dec:	eb05 0308 	add.w	r3, r5, r8
    7df0:	f893 9002 	ldrb.w	r9, [r3, #2]
				if (knobFrozen[i])
    7df4:	78bb      	ldrb	r3, [r7, #2]
    7df6:	2b00      	cmp	r3, #0
    7df8:	f000 825c 	beq.w	82b4 <_Min_Stack_Size+0x2b4>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    7dfc:	78b3      	ldrb	r3, [r6, #2]
    7dfe:	1c9a      	adds	r2, r3, #2
    7e00:	454a      	cmp	r2, r9
    7e02:	db02      	blt.n	7e0a <handleSPI+0x74a>
    7e04:	3b02      	subs	r3, #2
    7e06:	4599      	cmp	r9, r3
    7e08:	da03      	bge.n	7e12 <handleSPI+0x752>
						knobFrozen[i] = 0;
    7e0a:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    7e0c:	f886 9002 	strb.w	r9, [r6, #2]
						knobFrozen[i] = 0;
    7e10:	70bb      	strb	r3, [r7, #2]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    7e12:	eb05 0308 	add.w	r3, r5, r8
    7e16:	f893 9003 	ldrb.w	r9, [r3, #3]
				if (knobFrozen[i])
    7e1a:	78fb      	ldrb	r3, [r7, #3]
    7e1c:	2b00      	cmp	r3, #0
    7e1e:	f000 82c7 	beq.w	83b0 <_Min_Stack_Size+0x3b0>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    7e22:	78f3      	ldrb	r3, [r6, #3]
    7e24:	1c9a      	adds	r2, r3, #2
    7e26:	454a      	cmp	r2, r9
    7e28:	db02      	blt.n	7e30 <handleSPI+0x770>
    7e2a:	3b02      	subs	r3, #2
    7e2c:	454b      	cmp	r3, r9
    7e2e:	dd03      	ble.n	7e38 <handleSPI+0x778>
						knobFrozen[i] = 0;
    7e30:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    7e32:	f886 9003 	strb.w	r9, [r6, #3]
						knobFrozen[i] = 0;
    7e36:	70fb      	strb	r3, [r7, #3]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    7e38:	eb05 0308 	add.w	r3, r5, r8
    7e3c:	f893 9004 	ldrb.w	r9, [r3, #4]
				if (knobFrozen[i])
    7e40:	793b      	ldrb	r3, [r7, #4]
    7e42:	2b00      	cmp	r3, #0
    7e44:	f000 82a6 	beq.w	8394 <_Min_Stack_Size+0x394>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    7e48:	7933      	ldrb	r3, [r6, #4]
    7e4a:	1c9a      	adds	r2, r3, #2
    7e4c:	4591      	cmp	r9, r2
    7e4e:	dc02      	bgt.n	7e56 <handleSPI+0x796>
    7e50:	3b02      	subs	r3, #2
    7e52:	4599      	cmp	r9, r3
    7e54:	da03      	bge.n	7e5e <handleSPI+0x79e>
						knobFrozen[i] = 0;
    7e56:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    7e58:	f886 9004 	strb.w	r9, [r6, #4]
						knobFrozen[i] = 0;
    7e5c:	713b      	strb	r3, [r7, #4]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    7e5e:	eb05 0308 	add.w	r3, r5, r8
    7e62:	f893 9005 	ldrb.w	r9, [r3, #5]
				if (knobFrozen[i])
    7e66:	797b      	ldrb	r3, [r7, #5]
    7e68:	2b00      	cmp	r3, #0
    7e6a:	f000 8285 	beq.w	8378 <_Min_Stack_Size+0x378>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    7e6e:	7973      	ldrb	r3, [r6, #5]
    7e70:	1c9a      	adds	r2, r3, #2
    7e72:	4591      	cmp	r9, r2
    7e74:	dc02      	bgt.n	7e7c <handleSPI+0x7bc>
    7e76:	3b02      	subs	r3, #2
    7e78:	4599      	cmp	r9, r3
    7e7a:	da03      	bge.n	7e84 <handleSPI+0x7c4>
						knobFrozen[i] = 0;
    7e7c:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    7e7e:	f886 9005 	strb.w	r9, [r6, #5]
						knobFrozen[i] = 0;
    7e82:	717b      	strb	r3, [r7, #5]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    7e84:	eb05 0308 	add.w	r3, r5, r8
    7e88:	f893 9006 	ldrb.w	r9, [r3, #6]
				if (knobFrozen[i])
    7e8c:	79bb      	ldrb	r3, [r7, #6]
    7e8e:	2b00      	cmp	r3, #0
    7e90:	f000 8264 	beq.w	835c <_Min_Stack_Size+0x35c>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    7e94:	79b3      	ldrb	r3, [r6, #6]
    7e96:	1c9a      	adds	r2, r3, #2
    7e98:	4591      	cmp	r9, r2
    7e9a:	dc02      	bgt.n	7ea2 <handleSPI+0x7e2>
    7e9c:	3b02      	subs	r3, #2
    7e9e:	4599      	cmp	r9, r3
    7ea0:	da03      	bge.n	7eaa <handleSPI+0x7ea>
						knobFrozen[i] = 0;
    7ea2:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    7ea4:	f886 9006 	strb.w	r9, [r6, #6]
						knobFrozen[i] = 0;
    7ea8:	71bb      	strb	r3, [r7, #6]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    7eaa:	eb05 0308 	add.w	r3, r5, r8
    7eae:	f893 9007 	ldrb.w	r9, [r3, #7]
				if (knobFrozen[i])
    7eb2:	79fb      	ldrb	r3, [r7, #7]
    7eb4:	2b00      	cmp	r3, #0
    7eb6:	f000 8243 	beq.w	8340 <_Min_Stack_Size+0x340>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    7eba:	79f3      	ldrb	r3, [r6, #7]
    7ebc:	1c9a      	adds	r2, r3, #2
    7ebe:	4591      	cmp	r9, r2
    7ec0:	dc02      	bgt.n	7ec8 <handleSPI+0x808>
    7ec2:	3b02      	subs	r3, #2
    7ec4:	4599      	cmp	r9, r3
    7ec6:	da03      	bge.n	7ed0 <handleSPI+0x810>
						knobFrozen[i] = 0;
    7ec8:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    7eca:	f886 9007 	strb.w	r9, [r6, #7]
						knobFrozen[i] = 0;
    7ece:	71fb      	strb	r3, [r7, #7]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    7ed0:	eb05 0308 	add.w	r3, r5, r8
    7ed4:	f893 9008 	ldrb.w	r9, [r3, #8]
				if (knobFrozen[i])
    7ed8:	7a3b      	ldrb	r3, [r7, #8]
    7eda:	2b00      	cmp	r3, #0
    7edc:	f000 8222 	beq.w	8324 <_Min_Stack_Size+0x324>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    7ee0:	7a33      	ldrb	r3, [r6, #8]
    7ee2:	1c9a      	adds	r2, r3, #2
    7ee4:	4591      	cmp	r9, r2
    7ee6:	dc02      	bgt.n	7eee <handleSPI+0x82e>
    7ee8:	3b02      	subs	r3, #2
    7eea:	4599      	cmp	r9, r3
    7eec:	da03      	bge.n	7ef6 <handleSPI+0x836>
						knobFrozen[i] = 0;
    7eee:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    7ef0:	f886 9008 	strb.w	r9, [r6, #8]
						knobFrozen[i] = 0;
    7ef4:	723b      	strb	r3, [r7, #8]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    7ef6:	eb05 0308 	add.w	r3, r5, r8
    7efa:	f893 9009 	ldrb.w	r9, [r3, #9]
				if (knobFrozen[i])
    7efe:	7a7b      	ldrb	r3, [r7, #9]
    7f00:	2b00      	cmp	r3, #0
    7f02:	f000 8201 	beq.w	8308 <_Min_Stack_Size+0x308>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    7f06:	7a73      	ldrb	r3, [r6, #9]
    7f08:	1c9a      	adds	r2, r3, #2
    7f0a:	4591      	cmp	r9, r2
    7f0c:	dc02      	bgt.n	7f14 <handleSPI+0x854>
    7f0e:	3b02      	subs	r3, #2
    7f10:	4599      	cmp	r9, r3
    7f12:	da03      	bge.n	7f1c <handleSPI+0x85c>
						knobFrozen[i] = 0;
    7f14:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    7f16:	f886 9009 	strb.w	r9, [r6, #9]
						knobFrozen[i] = 0;
    7f1a:	727b      	strb	r3, [r7, #9]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    7f1c:	eb05 0308 	add.w	r3, r5, r8
    7f20:	f893 900a 	ldrb.w	r9, [r3, #10]
				if (knobFrozen[i])
    7f24:	7abb      	ldrb	r3, [r7, #10]
    7f26:	2b00      	cmp	r3, #0
    7f28:	f000 81e0 	beq.w	82ec <_Min_Stack_Size+0x2ec>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    7f2c:	7ab3      	ldrb	r3, [r6, #10]
    7f2e:	1c9a      	adds	r2, r3, #2
    7f30:	4591      	cmp	r9, r2
    7f32:	dc02      	bgt.n	7f3a <handleSPI+0x87a>
    7f34:	3b02      	subs	r3, #2
    7f36:	4599      	cmp	r9, r3
    7f38:	da03      	bge.n	7f42 <handleSPI+0x882>
						knobFrozen[i] = 0;
    7f3a:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    7f3c:	f886 900a 	strb.w	r9, [r6, #10]
						knobFrozen[i] = 0;
    7f40:	72bb      	strb	r3, [r7, #10]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    7f42:	44a8      	add	r8, r5
				if (knobFrozen[i])
    7f44:	7afb      	ldrb	r3, [r7, #11]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    7f46:	f898 800b 	ldrb.w	r8, [r8, #11]
				if (knobFrozen[i])
    7f4a:	2b00      	cmp	r3, #0
    7f4c:	f000 8195 	beq.w	827a <_Min_Stack_Size+0x27a>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    7f50:	7af3      	ldrb	r3, [r6, #11]
    7f52:	1c9a      	adds	r2, r3, #2
    7f54:	4590      	cmp	r8, r2
    7f56:	dc02      	bgt.n	7f5e <handleSPI+0x89e>
    7f58:	3b02      	subs	r3, #2
    7f5a:	4598      	cmp	r8, r3
    7f5c:	da03      	bge.n	7f66 <handleSPI+0x8a6>
						knobFrozen[i] = 0;
    7f5e:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    7f60:	f886 800b 	strb.w	r8, [r6, #11]
						knobFrozen[i] = 0;
    7f64:	72fb      	strb	r3, [r7, #11]
			currentByte += 12;
    7f66:	f104 070d 	add.w	r7, r4, #13
    7f6a:	4e4a      	ldr	r6, [pc, #296]	; (8094 <_Min_Stack_Size+0x94>)
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS_RX[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    7f6c:	ed9f 8a4a 	vldr	s16, [pc, #296]	; 8098 <_Min_Stack_Size+0x98>
    7f70:	b2ff      	uxtb	r7, r7
    7f72:	f106 0828 	add.w	r8, r6, #40	; 0x28
    7f76:	3f01      	subs	r7, #1
    7f78:	442f      	add	r7, r5
    7f7a:	f817 3f01 	ldrb.w	r3, [r7, #1]!
    7f7e:	4630      	mov	r0, r6
			for (int i = 0; i < 10; i++)
    7f80:	3604      	adds	r6, #4
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS_RX[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    7f82:	ee00 3a10 	vmov	s0, r3
    7f86:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    7f8a:	ee20 0a08 	vmul.f32	s0, s0, s16
    7f8e:	f001 f897 	bl	90c0 <tExpSmooth_setDest>
			for (int i = 0; i < 10; i++)
    7f92:	45b0      	cmp	r8, r6
    7f94:	d1f1      	bne.n	7f7a <handleSPI+0x8ba>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
    7f96:	2201      	movs	r2, #1
    7f98:	4840      	ldr	r0, [pc, #256]	; (809c <_Min_Stack_Size+0x9c>)
    7f9a:	f44f 7100 	mov.w	r1, #512	; 0x200
    7f9e:	f003 f847 	bl	b030 <__HAL_GPIO_WritePin_veneer>
			whichBar = 1;
    7fa2:	4b3f      	ldr	r3, [pc, #252]	; (80a0 <_Min_Stack_Size+0xa0>)
    7fa4:	2201      	movs	r2, #1
			updateStateFromSPIMessage(offset);
    7fa6:	4620      	mov	r0, r4
			whichBar = 1;
    7fa8:	701a      	strb	r2, [r3, #0]
    7faa:	e519      	b.n	79e0 <handleSPI+0x320>
			if (presetReady)
    7fac:	4b3d      	ldr	r3, [pc, #244]	; (80a4 <_Min_Stack_Size+0xa4>)
    7fae:	681b      	ldr	r3, [r3, #0]
    7fb0:	2b00      	cmp	r3, #0
    7fb2:	f43f ad1d 	beq.w	79f0 <handleSPI+0x330>
				uint8_t currentByte = offset+1;
    7fb6:	1c43      	adds	r3, r0, #1
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS_RX[currentByte] << 8) + SPI_LEVERS_RX[currentByte+1]);
    7fb8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80a8 <_Min_Stack_Size+0xa8>
    7fbc:	4f3b      	ldr	r7, [pc, #236]	; (80ac <_Min_Stack_Size+0xac>)
				uint16_t whichParam = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    7fbe:	b2db      	uxtb	r3, r3
    7fc0:	18ea      	adds	r2, r5, r3
    7fc2:	5ceb      	ldrb	r3, [r5, r3]
    7fc4:	7856      	ldrb	r6, [r2, #1]
    7fc6:	eb06 2603 	add.w	r6, r6, r3, lsl #8
				currentByte = currentByte + 2;
    7fca:	1cc3      	adds	r3, r0, #3
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS_RX[currentByte] << 8) + SPI_LEVERS_RX[currentByte+1]);
    7fcc:	b2db      	uxtb	r3, r3
				uint16_t whichParam = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    7fce:	b2b6      	uxth	r6, r6
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS_RX[currentByte] << 8) + SPI_LEVERS_RX[currentByte+1]);
    7fd0:	18e9      	adds	r1, r5, r3
    7fd2:	5cea      	ldrb	r2, [r5, r3]
    7fd4:	f1a6 083f 	sub.w	r8, r6, #63	; 0x3f
    7fd8:	784b      	ldrb	r3, [r1, #1]
    7fda:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    7fde:	fa1f f288 	uxth.w	r2, r8
    7fe2:	ee07 3a90 	vmov	s15, r3
    7fe6:	00f3      	lsls	r3, r6, #3
    7fe8:	2a18      	cmp	r2, #24
    7fea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    7fee:	9301      	str	r3, [sp, #4]
    7ff0:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    7ff4:	ee67 7a87 	vmul.f32	s15, s15, s14
    7ff8:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    7ffc:	edc3 7a00 	vstr	s15, [r3]
    8000:	edc3 7a01 	vstr	s15, [r3, #4]
				if ((whichParam == Effect1FXType) || (whichParam == Effect2FXType) || (whichParam == Effect3FXType) || (whichParam == Effect4FXType))
    8004:	d805      	bhi.n	8012 <_Min_Stack_Size+0x12>
    8006:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
    800a:	40d3      	lsrs	r3, r2
    800c:	07d9      	lsls	r1, r3, #31
    800e:	f100 8262 	bmi.w	84d6 <_Min_Stack_Size+0x4d6>
    8012:	00f3      	lsls	r3, r6, #3
			 for (int i = 0; i < numStringsThisBoard; i++)
    8014:	f04f 0b00 	mov.w	fp, #0
    8018:	46a1      	mov	r9, r4
    801a:	eba3 0806 	sub.w	r8, r3, r6
    801e:	465c      	mov	r4, fp
    8020:	eb07 0888 	add.w	r8, r7, r8, lsl #2
					params[whichParam].realVal[v] = params[whichParam].scaleFunc(params[whichParam].zeroToOneVal[v]);
    8024:	46c2      	mov	sl, r8
    8026:	ecb8 0a01 	vldmia	r8!, {s0}
    802a:	f8da 3010 	ldr.w	r3, [sl, #16]
    802e:	4798      	blx	r3
					params[whichParam].setParam(params[whichParam].realVal[v], params[whichParam].objectNumber, v);
    8030:	4621      	mov	r1, r4
					params[whichParam].realVal[v] = params[whichParam].scaleFunc(params[whichParam].zeroToOneVal[v]);
    8032:	ed88 0a01 	vstr	s0, [r8, #4]
					params[whichParam].setParam(params[whichParam].realVal[v], params[whichParam].objectNumber, v);
    8036:	f8da 3014 	ldr.w	r3, [sl, #20]
    803a:	f89a 0018 	ldrb.w	r0, [sl, #24]
    803e:	4798      	blx	r3
				for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    8040:	2c00      	cmp	r4, #0
    8042:	f000 8116 	beq.w	8272 <_Min_Stack_Size+0x272>
    8046:	f1a6 0323 	sub.w	r3, r6, #35	; 0x23
    804a:	464c      	mov	r4, r9
				if ((whichParam == Osc1ShapeSet) || (whichParam == Osc2ShapeSet) || (whichParam == Osc3ShapeSet))
    804c:	b299      	uxth	r1, r3
    804e:	291a      	cmp	r1, #26
    8050:	d804      	bhi.n	805c <_Min_Stack_Size+0x5c>
    8052:	4a17      	ldr	r2, [pc, #92]	; (80b0 <_Min_Stack_Size+0xb0>)
    8054:	40ca      	lsrs	r2, r1
    8056:	07d2      	lsls	r2, r2, #31
    8058:	f100 8348 	bmi.w	86ec <_Min_Stack_Size+0x6ec>
				if ((whichParam == Osc1) || (whichParam == Osc2) ||(whichParam == Osc3))
    805c:	f1a6 0218 	sub.w	r2, r6, #24
    8060:	b291      	uxth	r1, r2
    8062:	291a      	cmp	r1, #26
    8064:	f240 826e 	bls.w	8544 <_Min_Stack_Size+0x544>
				if ((whichParam == Noise))
    8068:	2e12      	cmp	r6, #18
    806a:	f040 83ad 	bne.w	87c8 <_Min_Stack_Size+0x7c8>
					if (params[whichParam].realVal[0]  > 0.5f)
    806e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    8072:	ed97 7a80 	vldr	s14, [r7, #512]	; 0x200
    8076:	eeb4 7ae7 	vcmpe.f32	s14, s15
    807a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    807e:	f77f acb7 	ble.w	79f0 <handleSPI+0x330>
						noiseOn = 1;
    8082:	4b0c      	ldr	r3, [pc, #48]	; (80b4 <_Min_Stack_Size+0xb4>)
    8084:	2201      	movs	r2, #1
    8086:	701a      	strb	r2, [r3, #0]
    8088:	e4b2      	b.n	79f0 <handleSPI+0x330>
    808a:	bf00      	nop
    808c:	200053a0 	.word	0x200053a0
    8090:	2001ac08 	.word	0x2001ac08
    8094:	20005824 	.word	0x20005824
    8098:	3b808081 	.word	0x3b808081
    809c:	58021800 	.word	0x58021800
    80a0:	20014a98 	.word	0x20014a98
    80a4:	20005884 	.word	0x20005884
    80a8:	377ffff6 	.word	0x377ffff6
    80ac:	20019ad0 	.word	0x20019ad0
    80b0:	04002001 	.word	0x04002001
    80b4:	200056c4 	.word	0x200056c4
			if (presetReady)
    80b8:	4bc4      	ldr	r3, [pc, #784]	; (83cc <_Min_Stack_Size+0x3cc>)
    80ba:	681b      	ldr	r3, [r3, #0]
    80bc:	2b00      	cmp	r3, #0
    80be:	f43f ac97 	beq.w	79f0 <handleSPI+0x330>
				uint8_t currentByte = offset+1;
    80c2:	1c43      	adds	r3, r0, #1
    80c4:	f8df 9378 	ldr.w	r9, [pc, #888]	; 8440 <_Min_Stack_Size+0x440>
				uint8_t foundOne = 0;
    80c8:	f04f 0e00 	mov.w	lr, #0
				uint8_t lowestEmptyMapping = MAX_NUM_MAPPINGS;
    80cc:	f04f 0c20 	mov.w	ip, #32
				uint16_t destNumber = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    80d0:	b2db      	uxtb	r3, r3
    80d2:	5ce9      	ldrb	r1, [r5, r3]
    80d4:	442b      	add	r3, r5
    80d6:	785e      	ldrb	r6, [r3, #1]
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    80d8:	795f      	ldrb	r7, [r3, #5]
				uint16_t destNumber = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    80da:	eb06 2601 	add.w	r6, r6, r1, lsl #8
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    80de:	7919      	ldrb	r1, [r3, #4]
				uint8_t whichSlot = (SPI_LEVERS_RX[currentByte+2]);
    80e0:	f893 8002 	ldrb.w	r8, [r3, #2]
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    80e4:	eb07 2701 	add.w	r7, r7, r1, lsl #8
				uint8_t mappingChangeType = (SPI_LEVERS_RX[currentByte+3]);
    80e8:	f893 a003 	ldrb.w	sl, [r3, #3]
				uint16_t destNumber = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    80ec:	b2b6      	uxth	r6, r6
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    80ee:	4649      	mov	r1, r9
    80f0:	b23f      	sxth	r7, r7
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    80f2:	4673      	mov	r3, lr
					if (mappings[j].destNumber == destNumber)
    80f4:	7808      	ldrb	r0, [r1, #0]
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    80f6:	314c      	adds	r1, #76	; 0x4c
					if (mappings[j].destNumber == destNumber)
    80f8:	42b0      	cmp	r0, r6
    80fa:	d102      	bne.n	8102 <_Min_Stack_Size+0x102>
						whichMapping = j;
    80fc:	b2da      	uxtb	r2, r3
						foundOne = 1;
    80fe:	f04f 0e01 	mov.w	lr, #1
					if ((mappings[j].destNumber == 255) && (j < lowestEmptyMapping))
    8102:	28ff      	cmp	r0, #255	; 0xff
    8104:	d103      	bne.n	810e <_Min_Stack_Size+0x10e>
    8106:	459c      	cmp	ip, r3
    8108:	bfc8      	it	gt
    810a:	fa5f fc83 	uxtbgt.w	ip, r3
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    810e:	3301      	adds	r3, #1
    8110:	2b20      	cmp	r3, #32
    8112:	d1ef      	bne.n	80f4 <_Min_Stack_Size+0xf4>
				if (foundOne == 0)
    8114:	f1be 0f00 	cmp.w	lr, #0
    8118:	d110      	bne.n	813c <_Min_Stack_Size+0x13c>
					numMappings++;
    811a:	49ad      	ldr	r1, [pc, #692]	; (83d0 <_Min_Stack_Size+0x3d0>)
					mappings[whichMapping].destNumber = destNumber;
    811c:	234c      	movs	r3, #76	; 0x4c
					mappings[whichMapping].dest = &params[destNumber];
    811e:	4662      	mov	r2, ip
					numMappings++;
    8120:	7808      	ldrb	r0, [r1, #0]
					mappings[whichMapping].destNumber = destNumber;
    8122:	fb03 f30c 	mul.w	r3, r3, ip
					numMappings++;
    8126:	3001      	adds	r0, #1
					mappings[whichMapping].destNumber = destNumber;
    8128:	f809 6003 	strb.w	r6, [r9, r3]
					mappings[whichMapping].dest = &params[destNumber];
    812c:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
					mappings[whichMapping].destNumber = destNumber;
    8130:	444b      	add	r3, r9
					numMappings++;
    8132:	7008      	strb	r0, [r1, #0]
					mappings[whichMapping].dest = &params[destNumber];
    8134:	49a7      	ldr	r1, [pc, #668]	; (83d4 <_Min_Stack_Size+0x3d4>)
    8136:	eb01 0186 	add.w	r1, r1, r6, lsl #2
    813a:	6059      	str	r1, [r3, #4]
				if (mappingChangeType == SourceID)
    813c:	f1ba 0f00 	cmp.w	sl, #0
    8140:	f040 8182 	bne.w	8448 <_Min_Stack_Size+0x448>
					mappings[whichMapping].sourceSmoothed[whichSlot] = 1;
    8144:	234c      	movs	r3, #76	; 0x4c
    8146:	2001      	movs	r0, #1
					if (source == 255)
    8148:	2fff      	cmp	r7, #255	; 0xff
					mappings[whichMapping].sourceSmoothed[whichSlot] = 1;
    814a:	fb02 f303 	mul.w	r3, r2, r3
    814e:	eb09 0b03 	add.w	fp, r9, r3
    8152:	eb0b 0608 	add.w	r6, fp, r8
    8156:	f886 0020 	strb.w	r0, [r6, #32]
					if (source == 255)
    815a:	f000 83a4 	beq.w	88a6 <_Min_Stack_Size+0x8a6>
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    815e:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 843c <_Min_Stack_Size+0x43c>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    8162:	f108 0104 	add.w	r1, r8, #4
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    8166:	f108 0e01 	add.w	lr, r8, #1
						if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    816a:	2f03      	cmp	r7, #3
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    816c:	eb0c 0bc7 	add.w	fp, ip, r7, lsl #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    8170:	f8df c2d0 	ldr.w	ip, [pc, #720]	; 8444 <_Min_Stack_Size+0x444>
    8174:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
						mappings[whichMapping].hookActive[whichSlot] = 1;
    8178:	f886 0048 	strb.w	r0, [r6, #72]	; 0x48
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    817c:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
    8180:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    8184:	4449      	add	r1, r9
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    8186:	f849 b00e 	str.w	fp, [r9, lr]
    818a:	f10b 0b04 	add.w	fp, fp, #4
    818e:	444b      	add	r3, r9
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    8190:	f8c1 c004 	str.w	ip, [r1, #4]
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    8194:	f8c3 b00c 	str.w	fp, [r3, #12]
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    8198:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
						if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    819c:	f340 836d 	ble.w	887a <_Min_Stack_Size+0x87a>
						if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    81a0:	f1a7 0318 	sub.w	r3, r7, #24
    81a4:	2b03      	cmp	r3, #3
    81a6:	f200 83e4 	bhi.w	8972 <_Min_Stack_Size+0x972>
							lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    81aa:	4b8b      	ldr	r3, [pc, #556]	; (83d8 <_Min_Stack_Size+0x3d8>)
    81ac:	443b      	add	r3, r7
    81ae:	f803 0c18 	strb.w	r0, [r3, #-24]
						if ((source >= NOISE_SOURCE_OFFSET) && (source < (NOISE_SOURCE_OFFSET+1)))
    81b2:	2f03      	cmp	r7, #3
    81b4:	d102      	bne.n	81bc <_Min_Stack_Size+0x1bc>
							noiseOn = 1;
    81b6:	4b89      	ldr	r3, [pc, #548]	; (83dc <_Min_Stack_Size+0x3dc>)
    81b8:	2101      	movs	r1, #1
    81ba:	7019      	strb	r1, [r3, #0]
						mappings[whichMapping].amount[whichSlot] = 0.0f;
    81bc:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    81c0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    81c4:	2200      	movs	r2, #0
    81c6:	4443      	add	r3, r8
    81c8:	eb09 0383 	add.w	r3, r9, r3, lsl #2
    81cc:	63da      	str	r2, [r3, #60]	; 0x3c
    81ce:	e40f      	b.n	79f0 <handleSPI+0x330>
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    81d0:	182b      	adds	r3, r5, r0
    81d2:	eddf 6a83 	vldr	s13, [pc, #524]	; 83e0 <_Min_Stack_Size+0x3e0>
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    81d6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    81da:	4a82      	ldr	r2, [pc, #520]	; (83e4 <_Min_Stack_Size+0x3e4>)
    81dc:	785b      	ldrb	r3, [r3, #1]
    81de:	ee07 3a90 	vmov	s15, r3
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    81e2:	4b81      	ldr	r3, [pc, #516]	; (83e8 <_Min_Stack_Size+0x3e8>)
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    81e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    81e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    81ec:	ee27 7a87 	vmul.f32	s14, s15, s14
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    81f0:	edc2 7a00 	vstr	s15, [r2]
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    81f4:	ed83 7a00 	vstr	s14, [r3]
    81f8:	f7ff bbfa 	b.w	79f0 <handleSPI+0x330>
			if (boardNumber == 0)
    81fc:	4b7b      	ldr	r3, [pc, #492]	; (83ec <_Min_Stack_Size+0x3ec>)
    81fe:	781b      	ldrb	r3, [r3, #0]
    8200:	2b00      	cmp	r3, #0
    8202:	f47f aa8e 	bne.w	7722 <handleSPI+0x62>
				pluckFirmwareUpdateRequested = 1;
    8206:	4b7a      	ldr	r3, [pc, #488]	; (83f0 <_Min_Stack_Size+0x3f0>)
    8208:	2201      	movs	r2, #1
    820a:	601a      	str	r2, [r3, #0]
    820c:	f7ff bbf5 	b.w	79fa <handleSPI+0x33a>
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    8210:	ed9f 6a78 	vldr	s12, [pc, #480]	; 83f4 <_Min_Stack_Size+0x3f4>
			 for (int i = 0; i < numStringsThisBoard; i++)
    8214:	2603      	movs	r6, #3
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    8216:	eddf 6a78 	vldr	s13, [pc, #480]	; 83f8 <_Min_Stack_Size+0x3f8>
					stringMIDIPitches[i] = myPitch;
    821a:	4f78      	ldr	r7, [pc, #480]	; (83fc <_Min_Stack_Size+0x3fc>)
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    821c:	680a      	ldr	r2, [r1, #0]
					stringMIDIPitches[i] = myPitch;
    821e:	eb07 0c86 	add.w	ip, r7, r6, lsl #2
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    8222:	4432      	add	r2, r6
    8224:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    8228:	5cd2      	ldrb	r2, [r2, r3]
    822a:	0212      	lsls	r2, r2, #8
    822c:	ee07 2a90 	vmov	s15, r2
    8230:	680a      	ldr	r2, [r1, #0]
    8232:	4432      	add	r2, r6
    8234:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    8238:	3601      	adds	r6, #1
    823a:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    823e:	441a      	add	r2, r3
    8240:	7852      	ldrb	r2, [r2, #1]
    8242:	ee07 2a10 	vmov	s14, r2
    8246:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    824a:	ee77 7a87 	vadd.f32	s15, s15, s14
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    824e:	ee27 7a86 	vmul.f32	s14, s15, s12
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    8252:	eeb5 7a40 	vcmp.f32	s14, #0.0
    8256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    825a:	dd06      	ble.n	826a <_Min_Stack_Size+0x26a>
    825c:	eef4 7a66 	vcmp.f32	s15, s13
    8260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8264:	d501      	bpl.n	826a <_Min_Stack_Size+0x26a>
					stringMIDIPitches[i] = myPitch;
    8266:	ed8c 7a00 	vstr	s14, [ip]
			 for (int i = 0; i < numStringsThisBoard; i++)
    826a:	42b0      	cmp	r0, r6
    826c:	dcd6      	bgt.n	821c <_Min_Stack_Size+0x21c>
    826e:	f7ff bbad 	b.w	79cc <handleSPI+0x30c>
    8272:	2401      	movs	r4, #1
    8274:	e6d7      	b.n	8026 <_Min_Stack_Size+0x26>
    8276:	4962      	ldr	r1, [pc, #392]	; (8400 <_Min_Stack_Size+0x400>)
    8278:	e54b      	b.n	7d12 <handleSPI+0x652>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    827a:	ee07 8a90 	vmov	s15, r8
    827e:	4861      	ldr	r0, [pc, #388]	; (8404 <_Min_Stack_Size+0x404>)
    8280:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    8284:	eddf 7a60 	vldr	s15, [pc, #384]	; 8408 <_Min_Stack_Size+0x408>
    8288:	ee20 0a27 	vmul.f32	s0, s0, s15
    828c:	f000 ff18 	bl	90c0 <tExpSmooth_setDest>
					prevKnobByte[i] = newByte;
    8290:	f886 800b 	strb.w	r8, [r6, #11]
    8294:	e667      	b.n	7f66 <handleSPI+0x8a6>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    8296:	ee07 9a90 	vmov	s15, r9
					prevKnobByte[i] = newByte;
    829a:	4e5c      	ldr	r6, [pc, #368]	; (840c <_Min_Stack_Size+0x40c>)
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    829c:	485c      	ldr	r0, [pc, #368]	; (8410 <_Min_Stack_Size+0x410>)
    829e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    82a2:	eddf 7a59 	vldr	s15, [pc, #356]	; 8408 <_Min_Stack_Size+0x408>
    82a6:	ee20 0a27 	vmul.f32	s0, s0, s15
    82aa:	f000 ff09 	bl	90c0 <tExpSmooth_setDest>
					prevKnobByte[i] = newByte;
    82ae:	f886 9000 	strb.w	r9, [r6]
    82b2:	e588      	b.n	7dc6 <handleSPI+0x706>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    82b4:	ee07 9a90 	vmov	s15, r9
    82b8:	4856      	ldr	r0, [pc, #344]	; (8414 <_Min_Stack_Size+0x414>)
    82ba:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    82be:	eddf 7a52 	vldr	s15, [pc, #328]	; 8408 <_Min_Stack_Size+0x408>
    82c2:	ee20 0a27 	vmul.f32	s0, s0, s15
    82c6:	f000 fefb 	bl	90c0 <tExpSmooth_setDest>
					prevKnobByte[i] = newByte;
    82ca:	f886 9002 	strb.w	r9, [r6, #2]
    82ce:	e5a0      	b.n	7e12 <handleSPI+0x752>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    82d0:	ee07 9a90 	vmov	s15, r9
    82d4:	4850      	ldr	r0, [pc, #320]	; (8418 <_Min_Stack_Size+0x418>)
    82d6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    82da:	eddf 7a4b 	vldr	s15, [pc, #300]	; 8408 <_Min_Stack_Size+0x408>
    82de:	ee20 0a27 	vmul.f32	s0, s0, s15
    82e2:	f000 feed 	bl	90c0 <tExpSmooth_setDest>
					prevKnobByte[i] = newByte;
    82e6:	f886 9001 	strb.w	r9, [r6, #1]
    82ea:	e57f      	b.n	7dec <handleSPI+0x72c>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    82ec:	ee07 9a90 	vmov	s15, r9
    82f0:	484a      	ldr	r0, [pc, #296]	; (841c <_Min_Stack_Size+0x41c>)
    82f2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    82f6:	eddf 7a44 	vldr	s15, [pc, #272]	; 8408 <_Min_Stack_Size+0x408>
    82fa:	ee20 0a27 	vmul.f32	s0, s0, s15
    82fe:	f000 fedf 	bl	90c0 <tExpSmooth_setDest>
					prevKnobByte[i] = newByte;
    8302:	f886 900a 	strb.w	r9, [r6, #10]
    8306:	e61c      	b.n	7f42 <handleSPI+0x882>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    8308:	ee07 9a90 	vmov	s15, r9
    830c:	4844      	ldr	r0, [pc, #272]	; (8420 <_Min_Stack_Size+0x420>)
    830e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    8312:	eddf 7a3d 	vldr	s15, [pc, #244]	; 8408 <_Min_Stack_Size+0x408>
    8316:	ee20 0a27 	vmul.f32	s0, s0, s15
    831a:	f000 fed1 	bl	90c0 <tExpSmooth_setDest>
					prevKnobByte[i] = newByte;
    831e:	f886 9009 	strb.w	r9, [r6, #9]
    8322:	e5fb      	b.n	7f1c <handleSPI+0x85c>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    8324:	ee07 9a90 	vmov	s15, r9
    8328:	483e      	ldr	r0, [pc, #248]	; (8424 <_Min_Stack_Size+0x424>)
    832a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    832e:	eddf 7a36 	vldr	s15, [pc, #216]	; 8408 <_Min_Stack_Size+0x408>
    8332:	ee20 0a27 	vmul.f32	s0, s0, s15
    8336:	f000 fec3 	bl	90c0 <tExpSmooth_setDest>
					prevKnobByte[i] = newByte;
    833a:	f886 9008 	strb.w	r9, [r6, #8]
    833e:	e5da      	b.n	7ef6 <handleSPI+0x836>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    8340:	ee07 9a90 	vmov	s15, r9
    8344:	4838      	ldr	r0, [pc, #224]	; (8428 <_Min_Stack_Size+0x428>)
    8346:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    834a:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8408 <_Min_Stack_Size+0x408>
    834e:	ee20 0a27 	vmul.f32	s0, s0, s15
    8352:	f000 feb5 	bl	90c0 <tExpSmooth_setDest>
					prevKnobByte[i] = newByte;
    8356:	f886 9007 	strb.w	r9, [r6, #7]
    835a:	e5b9      	b.n	7ed0 <handleSPI+0x810>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    835c:	ee07 9a90 	vmov	s15, r9
    8360:	4832      	ldr	r0, [pc, #200]	; (842c <_Min_Stack_Size+0x42c>)
    8362:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    8366:	eddf 7a28 	vldr	s15, [pc, #160]	; 8408 <_Min_Stack_Size+0x408>
    836a:	ee20 0a27 	vmul.f32	s0, s0, s15
    836e:	f000 fea7 	bl	90c0 <tExpSmooth_setDest>
					prevKnobByte[i] = newByte;
    8372:	f886 9006 	strb.w	r9, [r6, #6]
    8376:	e598      	b.n	7eaa <handleSPI+0x7ea>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    8378:	ee07 9a90 	vmov	s15, r9
    837c:	482c      	ldr	r0, [pc, #176]	; (8430 <_Min_Stack_Size+0x430>)
    837e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    8382:	eddf 7a21 	vldr	s15, [pc, #132]	; 8408 <_Min_Stack_Size+0x408>
    8386:	ee20 0a27 	vmul.f32	s0, s0, s15
    838a:	f000 fe99 	bl	90c0 <tExpSmooth_setDest>
					prevKnobByte[i] = newByte;
    838e:	f886 9005 	strb.w	r9, [r6, #5]
    8392:	e577      	b.n	7e84 <handleSPI+0x7c4>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    8394:	ee07 9a90 	vmov	s15, r9
    8398:	4826      	ldr	r0, [pc, #152]	; (8434 <_Min_Stack_Size+0x434>)
    839a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    839e:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8408 <_Min_Stack_Size+0x408>
    83a2:	ee20 0a27 	vmul.f32	s0, s0, s15
    83a6:	f000 fe8b 	bl	90c0 <tExpSmooth_setDest>
					prevKnobByte[i] = newByte;
    83aa:	f886 9004 	strb.w	r9, [r6, #4]
    83ae:	e556      	b.n	7e5e <handleSPI+0x79e>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    83b0:	ee07 9a90 	vmov	s15, r9
    83b4:	4820      	ldr	r0, [pc, #128]	; (8438 <_Min_Stack_Size+0x438>)
    83b6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    83ba:	eddf 7a13 	vldr	s15, [pc, #76]	; 8408 <_Min_Stack_Size+0x408>
    83be:	ee20 0a27 	vmul.f32	s0, s0, s15
    83c2:	f000 fe7d 	bl	90c0 <tExpSmooth_setDest>
					prevKnobByte[i] = newByte;
    83c6:	f886 9003 	strb.w	r9, [r6, #3]
    83ca:	e535      	b.n	7e38 <handleSPI+0x778>
    83cc:	20005884 	.word	0x20005884
    83d0:	20019ac0 	.word	0x20019ac0
    83d4:	20019ad0 	.word	0x20019ad0
    83d8:	20005460 	.word	0x20005460
    83dc:	200056c4 	.word	0x200056c4
    83e0:	3c23d70a 	.word	0x3c23d70a
    83e4:	2000000c 	.word	0x2000000c
    83e8:	20000010 	.word	0x20000010
    83ec:	20014c6d 	.word	0x20014c6d
    83f0:	2001abe4 	.word	0x2001abe4
    83f4:	3b000080 	.word	0x3b000080
    83f8:	478bff74 	.word	0x478bff74
    83fc:	20014990 	.word	0x20014990
    8400:	20014c84 	.word	0x20014c84
    8404:	20005408 	.word	0x20005408
    8408:	3b808081 	.word	0x3b808081
    840c:	2001ac08 	.word	0x2001ac08
    8410:	200053dc 	.word	0x200053dc
    8414:	200053e4 	.word	0x200053e4
    8418:	200053e0 	.word	0x200053e0
    841c:	20005404 	.word	0x20005404
    8420:	20005400 	.word	0x20005400
    8424:	200053fc 	.word	0x200053fc
    8428:	200053f8 	.word	0x200053f8
    842c:	200053f4 	.word	0x200053f4
    8430:	200053f0 	.word	0x200053f0
    8434:	200053ec 	.word	0x200053ec
    8438:	200053e8 	.word	0x200053e8
    843c:	20014818 	.word	0x20014818
    8440:	20018e78 	.word	0x20018e78
    8444:	20000748 	.word	0x20000748
				else if (mappingChangeType == Amount)
    8448:	f1ba 0f01 	cmp.w	sl, #1
    844c:	f000 824f 	beq.w	88ee <_Min_Stack_Size+0x8ee>
				else if (mappingChangeType == ScalarID)
    8450:	f1ba 0f02 	cmp.w	sl, #2
    8454:	f47f aacc 	bne.w	79f0 <handleSPI+0x330>
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    8458:	48c0      	ldr	r0, [pc, #768]	; (875c <_Min_Stack_Size+0x75c>)
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    845a:	234c      	movs	r3, #76	; 0x4c
						if (scalar == 0xff)
    845c:	2fff      	cmp	r7, #255	; 0xff
    845e:	ea4f 0a47 	mov.w	sl, r7, lsl #1
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    8462:	f1a7 0e18 	sub.w	lr, r7, #24
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    8466:	f1a7 0c14 	sub.w	ip, r7, #20
    846a:	7801      	ldrb	r1, [r0, #0]
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    846c:	fb02 f303 	mul.w	r3, r2, r3
    8470:	f108 0604 	add.w	r6, r8, #4
						if (scalar == 0xff)
    8474:	f000 824e 	beq.w	8914 <_Min_Stack_Size+0x914>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    8478:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    847c:	4eb8      	ldr	r6, [pc, #736]	; (8760 <_Min_Stack_Size+0x760>)
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    847e:	f1be 0f03 	cmp.w	lr, #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    8482:	444b      	add	r3, r9
    8484:	eb06 0bc7 	add.w	fp, r6, r7, lsl #3
    8488:	f8c3 b004 	str.w	fp, [r3, #4]
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    848c:	f200 8257 	bhi.w	893e <_Min_Stack_Size+0x93e>
								lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    8490:	4bb4      	ldr	r3, [pc, #720]	; (8764 <_Min_Stack_Size+0x764>)
    8492:	f04f 0b01 	mov.w	fp, #1
    8496:	443b      	add	r3, r7
    8498:	f803 bc18 	strb.w	fp, [r3, #-24]
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    849c:	234c      	movs	r3, #76	; 0x4c
								noiseOn = 1;
    849e:	2f03      	cmp	r7, #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    84a0:	f10a 0a01 	add.w	sl, sl, #1
    84a4:	fb02 f303 	mul.w	r3, r2, r3
								noiseOn = 1;
    84a8:	bf08      	it	eq
    84aa:	2101      	moveq	r1, #1
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    84ac:	eb06 068a 	add.w	r6, r6, sl, lsl #2
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    84b0:	f1be 0f03 	cmp.w	lr, #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    84b4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
    84b8:	444b      	add	r3, r9
    84ba:	629e      	str	r6, [r3, #40]	; 0x28
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    84bc:	f200 8236 	bhi.w	892c <_Min_Stack_Size+0x92c>
								lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    84c0:	4ba8      	ldr	r3, [pc, #672]	; (8764 <_Min_Stack_Size+0x764>)
    84c2:	2201      	movs	r2, #1
    84c4:	443b      	add	r3, r7
    84c6:	f803 2c18 	strb.w	r2, [r3, #-24]
								noiseOn = 1;
    84ca:	2f03      	cmp	r7, #3
    84cc:	bf08      	it	eq
    84ce:	2101      	moveq	r1, #1
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    84d0:	7001      	strb	r1, [r0, #0]
    84d2:	f7ff ba8d 	b.w	79f0 <handleSPI+0x330>
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    84d6:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
					param *FXAlias = &params[whichParam + 1];
    84da:	f106 0901 	add.w	r9, r6, #1
					uint8_t whichEffect = (whichParam - Effect1FXType) / EffectParamsNum;
    84de:	ea4f 08e8 	mov.w	r8, r8, asr #3
					param *FXAlias = &params[whichParam + 1];
    84e2:	ebc9 0ac9 	rsb	sl, r9, r9, lsl #3
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    84e6:	ee67 7a87 	vmul.f32	s15, s15, s14
					param *FXAlias = &params[whichParam + 1];
    84ea:	ea4f 0bc9 	mov.w	fp, r9, lsl #3
    84ee:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    84f2:	fef8 7a67 	vrinta.f32	s15, s15
    84f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    84fa:	edcd 7a02 	vstr	s15, [sp, #8]
    84fe:	f89d 0008 	ldrb.w	r0, [sp, #8]
					if (effectType > FXLowpass)
    8502:	280d      	cmp	r0, #13
    8504:	d902      	bls.n	850c <_Min_Stack_Size+0x50c>
						FXAlias[2].scaleFunc = &scaleFilterResonance;
    8506:	4a98      	ldr	r2, [pc, #608]	; (8768 <_Min_Stack_Size+0x768>)
    8508:	f8ca 2048 	str.w	r2, [sl, #72]	; 0x48
					setEffectsFunctions(effectType, whichEffect);
    850c:	4641      	mov	r1, r8
					FXAlias[0].setParam = effectSetters[whichEffect].setParam1;
    850e:	eb08 0888 	add.w	r8, r8, r8, lsl #2
					setEffectsFunctions(effectType, whichEffect);
    8512:	f002 fd1d 	bl	af50 <__setEffectsFunctions_veneer>
					FXAlias[0].setParam = effectSetters[whichEffect].setParam1;
    8516:	4a95      	ldr	r2, [pc, #596]	; (876c <_Min_Stack_Size+0x76c>)
    8518:	ebab 0309 	sub.w	r3, fp, r9
    851c:	eb02 0188 	add.w	r1, r2, r8, lsl #2
    8520:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
    8524:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    8528:	615a      	str	r2, [r3, #20]
					FXAlias[1].setParam = effectSetters[whichEffect].setParam2;
    852a:	684b      	ldr	r3, [r1, #4]
    852c:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
					FXAlias[2].setParam = effectSetters[whichEffect].setParam3;
    8530:	688b      	ldr	r3, [r1, #8]
    8532:	f8ca 304c 	str.w	r3, [sl, #76]	; 0x4c
					FXAlias[3].setParam = effectSetters[whichEffect].setParam4;
    8536:	68cb      	ldr	r3, [r1, #12]
    8538:	f8ca 3068 	str.w	r3, [sl, #104]	; 0x68
					FXAlias[4].setParam = effectSetters[whichEffect].setParam5;
    853c:	690b      	ldr	r3, [r1, #16]
    853e:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84
    8542:	e566      	b.n	8012 <_Min_Stack_Size+0x12>
				if ((whichParam == Osc1) || (whichParam == Osc2) ||(whichParam == Osc3))
    8544:	4b8a      	ldr	r3, [pc, #552]	; (8770 <_Min_Stack_Size+0x770>)
    8546:	410b      	asrs	r3, r1
    8548:	f013 0301 	ands.w	r3, r3, #1
    854c:	d123      	bne.n	8596 <_Min_Stack_Size+0x596>
					if (params[whichParam].realVal[0]  > 0.5f)
    854e:	9901      	ldr	r1, [sp, #4]
    8550:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    8554:	1b89      	subs	r1, r1, r6
    8556:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    855a:	ed91 7a02 	vldr	s14, [r1, #8]
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    855e:	4985      	ldr	r1, [pc, #532]	; (8774 <_Min_Stack_Size+0x774>)
					if (params[whichParam].realVal[0]  > 0.5f)
    8560:	eeb4 7ae7 	vcmpe.f32	s14, s15
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    8564:	fb81 0102 	smull	r0, r1, r1, r2
    8568:	17d2      	asrs	r2, r2, #31
					if (params[whichParam].realVal[0]  > 0.5f)
    856a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    856e:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
					if (params[whichParam].realVal[0]  > 0.5f)
    8572:	dd02      	ble.n	857a <_Min_Stack_Size+0x57a>
						oscOn[whichOsc] = 1;
    8574:	2301      	movs	r3, #1
    8576:	4980      	ldr	r1, [pc, #512]	; (8778 <_Min_Stack_Size+0x778>)
    8578:	548b      	strb	r3, [r1, r2]
    857a:	4980      	ldr	r1, [pc, #512]	; (877c <_Min_Stack_Size+0x77c>)
    857c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
						enabledCount += oscsEnabled[j];
    8580:	e9d1 3200 	ldrd	r3, r2, [r1]
    8584:	4413      	add	r3, r2
					oscAmpMult = oscAmpMultArray[enabledCount];
    8586:	688a      	ldr	r2, [r1, #8]
    8588:	4413      	add	r3, r2
    858a:	4a7d      	ldr	r2, [pc, #500]	; (8780 <_Min_Stack_Size+0x780>)
    858c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8590:	681a      	ldr	r2, [r3, #0]
    8592:	4b7c      	ldr	r3, [pc, #496]	; (8784 <_Min_Stack_Size+0x784>)
    8594:	601a      	str	r2, [r3, #0]
				if ((whichParam == LFO1ShapeSet) || (whichParam == LFO2ShapeSet) || (whichParam == LFO3ShapeSet) || (whichParam == LFO4ShapeSet))
    8596:	2e87      	cmp	r6, #135	; 0x87
    8598:	d005      	beq.n	85a6 <_Min_Stack_Size+0x5a6>
    859a:	2e8c      	cmp	r6, #140	; 0x8c
    859c:	d003      	beq.n	85a6 <_Min_Stack_Size+0x5a6>
    859e:	2e91      	cmp	r6, #145	; 0x91
    85a0:	d001      	beq.n	85a6 <_Min_Stack_Size+0x5a6>
    85a2:	2e96      	cmp	r6, #150	; 0x96
    85a4:	d16b      	bne.n	867e <_Min_Stack_Size+0x67e>
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    85a6:	9b01      	ldr	r3, [sp, #4]
    85a8:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    85ac:	4a76      	ldr	r2, [pc, #472]	; (8788 <_Min_Stack_Size+0x788>)
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    85ae:	f04f 0a00 	mov.w	sl, #0
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    85b2:	1b9b      	subs	r3, r3, r6
    85b4:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    85b8:	edd3 7a02 	vldr	s15, [r3, #8]
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    85bc:	f1a6 0387 	sub.w	r3, r6, #135	; 0x87
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    85c0:	ee67 7a87 	vmul.f32	s15, s15, s14
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    85c4:	fb82 1203 	smull	r1, r2, r2, r3
    85c8:	17db      	asrs	r3, r3, #31
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    85ca:	fef8 7a67 	vrinta.f32	s15, s15
					setLFOShapes(LFOShape, whichLFO);
    85ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    85d2:	ebc3 0862 	rsb	r8, r3, r2, asr #1
					setLFOShapes(LFOShape, whichLFO);
    85d6:	ee17 0a90 	vmov	r0, s15
    85da:	4641      	mov	r1, r8
    85dc:	f002 fcdc 	bl	af98 <__setLFOShapes_veneer>
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    85e0:	496a      	ldr	r1, [pc, #424]	; (878c <_Min_Stack_Size+0x78c>)
					int rateParamNum = LFO1Rate + (whichLFO * LFOParamsNum);
    85e2:	eb08 0388 	add.w	r3, r8, r8, lsl #2
    85e6:	9503      	str	r5, [sp, #12]
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    85e8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
					int rateParamNum = LFO1Rate + (whichLFO * LFOParamsNum);
    85ec:	f103 0984 	add.w	r9, r3, #132	; 0x84
					int shapeParamNum = LFO1Shape + (whichLFO * LFOParamsNum);
    85f0:	f103 0285 	add.w	r2, r3, #133	; 0x85
					int phaseParamNum = LFO1Phase + (whichLFO * LFOParamsNum);
    85f4:	3386      	adds	r3, #134	; 0x86
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    85f6:	eb01 0088 	add.w	r0, r1, r8, lsl #2
    85fa:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
    85fe:	f851 1028 	ldr.w	r1, [r1, r8, lsl #2]
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    8602:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    8606:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    860a:	eb07 0b82 	add.w	fp, r7, r2, lsl #2
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    860e:	eb07 0283 	add.w	r2, r7, r3, lsl #2
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    8612:	ea4f 0389 	mov.w	r3, r9, lsl #2
    8616:	eb07 0989 	add.w	r9, r7, r9, lsl #2
    861a:	f103 0840 	add.w	r8, r3, #64	; 0x40
    861e:	f8c9 1014 	str.w	r1, [r9, #20]
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    8622:	6841      	ldr	r1, [r0, #4]
    8624:	44b8      	add	r8, r7
    8626:	f8cb 1014 	str.w	r1, [fp, #20]
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    862a:	6881      	ldr	r1, [r0, #8]
    862c:	4610      	mov	r0, r2
    862e:	6151      	str	r1, [r2, #20]
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    8630:	f103 0108 	add.w	r1, r3, #8
    8634:	187a      	adds	r2, r7, r1
    8636:	f103 0124 	add.w	r1, r3, #36	; 0x24
    863a:	187b      	adds	r3, r7, r1
    863c:	4615      	mov	r5, r2
    863e:	e9cd 6401 	strd	r6, r4, [sp, #4]
    8642:	461c      	mov	r4, r3
    8644:	4606      	mov	r6, r0
						params[rateParamNum].setParam(params[rateParamNum].realVal[v], params[rateParamNum].objectNumber, v);
    8646:	ecb5 0a01 	vldmia	r5!, {s0}
    864a:	4651      	mov	r1, sl
    864c:	f899 0018 	ldrb.w	r0, [r9, #24]
    8650:	f8d9 3014 	ldr.w	r3, [r9, #20]
    8654:	4798      	blx	r3
						params[shapeParamNum].setParam(params[shapeParamNum].realVal[v], params[shapeParamNum].objectNumber, v);
    8656:	ecb4 0a01 	vldmia	r4!, {s0}
    865a:	4651      	mov	r1, sl
    865c:	f89b 0018 	ldrb.w	r0, [fp, #24]
    8660:	f8db 3014 	ldr.w	r3, [fp, #20]
    8664:	4798      	blx	r3
						params[phaseParamNum].setParam(params[phaseParamNum].realVal[v], params[phaseParamNum].objectNumber, v);
    8666:	ecb8 0a01 	vldmia	r8!, {s0}
    866a:	4651      	mov	r1, sl
    866c:	6973      	ldr	r3, [r6, #20]
    866e:	7e30      	ldrb	r0, [r6, #24]
    8670:	4798      	blx	r3
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    8672:	f1ba 0f00 	cmp.w	sl, #0
    8676:	d016      	beq.n	86a6 <_Min_Stack_Size+0x6a6>
    8678:	9d03      	ldr	r5, [sp, #12]
    867a:	e9dd 6401 	ldrd	r6, r4, [sp, #4]
				if ((whichParam == MIDIKeyMax) || (whichParam == MIDIKeyMin))
    867e:	2e01      	cmp	r6, #1
    8680:	d914      	bls.n	86ac <_Min_Stack_Size+0x6ac>
				if (whichParam == FXOrder)
    8682:	2e9a      	cmp	r6, #154	; 0x9a
    8684:	d128      	bne.n	86d8 <_Min_Stack_Size+0x6d8>
					fxPre = params[FXOrder].realVal[0] > 0.5f;
    8686:	4a42      	ldr	r2, [pc, #264]	; (8790 <_Min_Stack_Size+0x790>)
    8688:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    868c:	4b41      	ldr	r3, [pc, #260]	; (8794 <_Min_Stack_Size+0x794>)
    868e:	ed92 7a38 	vldr	s14, [r2, #224]	; 0xe0
					pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    8692:	eeb4 7ae7 	vcmpe.f32	s14, s15
    8696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    869a:	bfcc      	ite	gt
    869c:	2201      	movgt	r2, #1
    869e:	2200      	movle	r2, #0
    86a0:	701a      	strb	r2, [r3, #0]
    86a2:	f7ff b9a5 	b.w	79f0 <handleSPI+0x330>
    86a6:	f04f 0a01 	mov.w	sl, #1
    86aa:	e7cc      	b.n	8646 <_Min_Stack_Size+0x646>
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    86ac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
    86b0:	ed97 7a02 	vldr	s14, [r7, #8]
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    86b4:	eddf 6a38 	vldr	s13, [pc, #224]	; 8798 <_Min_Stack_Size+0x798>
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    86b8:	ee37 7a67 	vsub.f32	s14, s14, s15
    86bc:	ed9f 6a37 	vldr	s12, [pc, #220]	; 879c <_Min_Stack_Size+0x79c>
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    86c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    86c4:	4b36      	ldr	r3, [pc, #216]	; (87a0 <_Min_Stack_Size+0x7a0>)
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    86c6:	4a37      	ldr	r2, [pc, #220]	; (87a4 <_Min_Stack_Size+0x7a4>)
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    86c8:	eec6 6a07 	vdiv.f32	s13, s12, s14
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    86cc:	edc2 7a00 	vstr	s15, [r2]
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    86d0:	edc3 6a00 	vstr	s13, [r3]
				if (whichParam == PedalControlsMaster)
    86d4:	f7ff b98c 	b.w	79f0 <handleSPI+0x330>
    86d8:	2e9b      	cmp	r6, #155	; 0x9b
    86da:	f47f a989 	bne.w	79f0 <handleSPI+0x330>
					pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    86de:	4a2c      	ldr	r2, [pc, #176]	; (8790 <_Min_Stack_Size+0x790>)
    86e0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    86e4:	4b30      	ldr	r3, [pc, #192]	; (87a8 <_Min_Stack_Size+0x7a8>)
    86e6:	ed92 7a3f 	vldr	s14, [r2, #252]	; 0xfc
    86ea:	e7d2      	b.n	8692 <_Min_Stack_Size+0x692>
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    86ec:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    86f0:	edda 7a02 	vldr	s15, [sl, #8]
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    86f4:	4a1f      	ldr	r2, [pc, #124]	; (8774 <_Min_Stack_Size+0x774>)
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    86f6:	ee67 7a87 	vmul.f32	s15, s15, s14
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    86fa:	fb82 1203 	smull	r1, r2, r2, r3
    86fe:	17db      	asrs	r3, r3, #31
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    8700:	fef8 7a67 	vrinta.f32	s15, s15
    8704:	eefd 7ae7 	vcvt.s32.f32	s15, s15
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    8708:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    870c:	ee17 2a90 	vmov	r2, s15
	switch (oscshape)
    8710:	2a05      	cmp	r2, #5
    8712:	f63f aca3 	bhi.w	805c <_Min_Stack_Size+0x5c>
    8716:	e8df f002 	tbb	[pc, r2]
    871a:	171c      	.short	0x171c
    871c:	03080d12 	.word	0x03080d12
			  shapeTick[i] = &triTick;
    8720:	4a22      	ldr	r2, [pc, #136]	; (87ac <_Min_Stack_Size+0x7ac>)
    8722:	4923      	ldr	r1, [pc, #140]	; (87b0 <_Min_Stack_Size+0x7b0>)
    8724:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    8728:	e498      	b.n	805c <_Min_Stack_Size+0x5c>
			  shapeTick[i] = &sineTick;
    872a:	4a20      	ldr	r2, [pc, #128]	; (87ac <_Min_Stack_Size+0x7ac>)
    872c:	4921      	ldr	r1, [pc, #132]	; (87b4 <_Min_Stack_Size+0x7b4>)
    872e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    8732:	e493      	b.n	805c <_Min_Stack_Size+0x5c>
			  shapeTick[i] = &pulseTick;
    8734:	4a1d      	ldr	r2, [pc, #116]	; (87ac <_Min_Stack_Size+0x7ac>)
    8736:	4920      	ldr	r1, [pc, #128]	; (87b8 <_Min_Stack_Size+0x7b8>)
    8738:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    873c:	e48e      	b.n	805c <_Min_Stack_Size+0x5c>
			  shapeTick[i] = &sawTick;
    873e:	4a1b      	ldr	r2, [pc, #108]	; (87ac <_Min_Stack_Size+0x7ac>)
    8740:	491e      	ldr	r1, [pc, #120]	; (87bc <_Min_Stack_Size+0x7bc>)
    8742:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    8746:	e489      	b.n	805c <_Min_Stack_Size+0x5c>
			  shapeTick[i] = &sineTriTick;
    8748:	4a18      	ldr	r2, [pc, #96]	; (87ac <_Min_Stack_Size+0x7ac>)
    874a:	491d      	ldr	r1, [pc, #116]	; (87c0 <_Min_Stack_Size+0x7c0>)
    874c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    8750:	e484      	b.n	805c <_Min_Stack_Size+0x5c>
			  shapeTick[i] = &sawSquareTick;
    8752:	4a16      	ldr	r2, [pc, #88]	; (87ac <_Min_Stack_Size+0x7ac>)
    8754:	491b      	ldr	r1, [pc, #108]	; (87c4 <_Min_Stack_Size+0x7c4>)
    8756:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    875a:	e47f      	b.n	805c <_Min_Stack_Size+0x5c>
    875c:	200056c4 	.word	0x200056c4
    8760:	20014818 	.word	0x20014818
    8764:	20005460 	.word	0x20005460
    8768:	00005f81 	.word	0x00005f81
    876c:	20014cc4 	.word	0x20014cc4
    8770:	fbffdffe 	.word	0xfbffdffe
    8774:	4ec4ec4f 	.word	0x4ec4ec4f
    8778:	20005720 	.word	0x20005720
    877c:	20019ac4 	.word	0x20019ac4
    8780:	2000001c 	.word	0x2000001c
    8784:	20000018 	.word	0x20000018
    8788:	66666667 	.word	0x66666667
    878c:	20018e44 	.word	0x20018e44
    8790:	2001aad0 	.word	0x2001aad0
    8794:	20016e41 	.word	0x20016e41
    8798:	42fe0000 	.word	0x42fe0000
    879c:	3c010204 	.word	0x3c010204
    87a0:	20019ab4 	.word	0x20019ab4
    87a4:	20019ab8 	.word	0x20019ab8
    87a8:	2001abe0 	.word	0x2001abe0
    87ac:	20005d3c 	.word	0x20005d3c
    87b0:	000024e1 	.word	0x000024e1
    87b4:	000024a1 	.word	0x000024a1
    87b8:	00002441 	.word	0x00002441
    87bc:	00002401 	.word	0x00002401
    87c0:	000023a1 	.word	0x000023a1
    87c4:	00002341 	.word	0x00002341
				if ((whichParam == Filter1Type) || (whichParam == Filter2Type))
    87c8:	2e60      	cmp	r6, #96	; 0x60
    87ca:	d002      	beq.n	87d2 <_Min_Stack_Size+0x7d2>
    87cc:	2e66      	cmp	r6, #102	; 0x66
    87ce:	f47f aee2 	bne.w	8596 <_Min_Stack_Size+0x596>
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    87d2:	9b01      	ldr	r3, [sp, #4]
    87d4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
					int whichFilter = (whichParam - Filter1Type) / FilterParamsNum;
    87d8:	4968      	ldr	r1, [pc, #416]	; (897c <_Min_Stack_Size+0x97c>)
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    87da:	f04f 0900 	mov.w	r9, #0
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    87de:	1b9b      	subs	r3, r3, r6
    87e0:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    87e4:	edd3 7a02 	vldr	s15, [r3, #8]
					int whichFilter = (whichParam - Filter1Type) / FilterParamsNum;
    87e8:	f1a6 0360 	sub.w	r3, r6, #96	; 0x60
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    87ec:	ee67 7a87 	vmul.f32	s15, s15, s14
					int whichFilter = (whichParam - Filter1Type) / FilterParamsNum;
    87f0:	fb81 2103 	smull	r2, r1, r1, r3
    87f4:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    87f8:	fef8 7a67 	vrinta.f32	s15, s15
					setFilterTypes(filterType, whichFilter);
    87fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    8800:	ee17 0a90 	vmov	r0, s15
    8804:	f002 fccc 	bl	b1a0 <__setFilterTypes_veneer>
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    8808:	485d      	ldr	r0, [pc, #372]	; (8980 <_Min_Stack_Size+0x980>)
					int filterResParamNum = Filter1Resonance + (whichFilter * FilterParamsNum);
    880a:	eb01 0341 	add.w	r3, r1, r1, lsl #1
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    880e:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    8812:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
					int filterResParamNum = Filter1Resonance + (whichFilter * FilterParamsNum);
    8816:	005b      	lsls	r3, r3, #1
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    8818:	f8dc 0004 	ldr.w	r0, [ip, #4]
					int filterResParamNum = Filter1Resonance + (whichFilter * FilterParamsNum);
    881c:	f103 0863 	add.w	r8, r3, #99	; 0x63
					int filterGainParamNum = Filter1Gain + (whichFilter * FilterParamsNum);
    8820:	3362      	adds	r3, #98	; 0x62
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    8822:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    8826:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    882a:	ea4f 0a88 	mov.w	sl, r8, lsl #2
    882e:	eb07 0888 	add.w	r8, r7, r8, lsl #2
    8832:	f10a 0b08 	add.w	fp, sl, #8
    8836:	f1aa 0a14 	sub.w	sl, sl, #20
    883a:	f8c8 1014 	str.w	r1, [r8, #20]
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    883e:	eb07 0183 	add.w	r1, r7, r3, lsl #2
    8842:	44bb      	add	fp, r7
    8844:	009b      	lsls	r3, r3, #2
    8846:	44ba      	add	sl, r7
    8848:	6148      	str	r0, [r1, #20]
    884a:	9302      	str	r3, [sp, #8]
						params[filterResParamNum].setParam(params[filterResParamNum].realVal[v], params[filterResParamNum].objectNumber, v);
    884c:	ecbb 0a01 	vldmia	fp!, {s0}
    8850:	4649      	mov	r1, r9
    8852:	f898 0018 	ldrb.w	r0, [r8, #24]
    8856:	f8d8 3014 	ldr.w	r3, [r8, #20]
    885a:	4798      	blx	r3
						params[filterGainParamNum].setParam(params[filterGainParamNum].realVal[v], params[filterGainParamNum].objectNumber, v);
    885c:	9b02      	ldr	r3, [sp, #8]
    885e:	ecba 0a01 	vldmia	sl!, {s0}
    8862:	4649      	mov	r1, r9
    8864:	18fb      	adds	r3, r7, r3
    8866:	695a      	ldr	r2, [r3, #20]
    8868:	7e18      	ldrb	r0, [r3, #24]
    886a:	4790      	blx	r2
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    886c:	f1b9 0f00 	cmp.w	r9, #0
    8870:	f47f ae91 	bne.w	8596 <_Min_Stack_Size+0x596>
    8874:	f04f 0901 	mov.w	r9, #1
    8878:	e7e8      	b.n	884c <_Min_Stack_Size+0x84c>
						if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    887a:	f1a7 0314 	sub.w	r3, r7, #20
    887e:	f886 a020 	strb.w	sl, [r6, #32]
    8882:	2b03      	cmp	r3, #3
    8884:	d82d      	bhi.n	88e2 <_Min_Stack_Size+0x8e2>
							envOn[source - ENV_SOURCE_OFFSET] = 1;
    8886:	4b3f      	ldr	r3, [pc, #252]	; (8984 <_Min_Stack_Size+0x984>)
    8888:	2101      	movs	r1, #1
    888a:	443b      	add	r3, r7
    888c:	f803 1c14 	strb.w	r1, [r3, #-20]
						if ((source >= OSC_SOURCE_OFFSET) && (source < (OSC_SOURCE_OFFSET+NUM_OSC)))
    8890:	e48f      	b.n	81b2 <_Min_Stack_Size+0x1b2>
						audioOutBuffer[i] = 0;
    8892:	2200      	movs	r2, #0
    8894:	f503 6180 	add.w	r1, r3, #1024	; 0x400
						audioOutBuffer[i + 1] = 0;
    8898:	e9c3 2200 	strd	r2, r2, [r3]
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    889c:	3308      	adds	r3, #8
    889e:	4299      	cmp	r1, r3
    88a0:	d1fa      	bne.n	8898 <_Min_Stack_Size+0x898>
    88a2:	f7ff ba2d 	b.w	7d00 <handleSPI+0x640>
						mappings[whichMapping].hookActive[whichSlot] = 0;
    88a6:	f886 a048 	strb.w	sl, [r6, #72]	; 0x48
							for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    88aa:	4656      	mov	r6, sl
							mappings[whichMapping].destNumber = 255;
    88ac:	f809 7003 	strb.w	r7, [r9, r3]
								float finalVal = mappings[whichMapping].dest->zeroToOneVal[v];
    88b0:	f8db 3004 	ldr.w	r3, [fp, #4]
    88b4:	eb03 0786 	add.w	r7, r3, r6, lsl #2
								mappings[whichMapping].dest->realVal[v] = mappings[whichMapping].dest->scaleFunc(finalVal);
    88b8:	691b      	ldr	r3, [r3, #16]
    88ba:	ed97 0a00 	vldr	s0, [r7]
    88be:	4798      	blx	r3
    88c0:	ed87 0a02 	vstr	s0, [r7, #8]
								mappings[whichMapping].dest->setParam(mappings[whichMapping].dest->realVal[v], mappings[whichMapping].dest->objectNumber, v);
    88c4:	f8db 3004 	ldr.w	r3, [fp, #4]
    88c8:	4631      	mov	r1, r6
    88ca:	eb03 0786 	add.w	r7, r3, r6, lsl #2
    88ce:	695a      	ldr	r2, [r3, #20]
    88d0:	7e18      	ldrb	r0, [r3, #24]
    88d2:	ed97 0a02 	vldr	s0, [r7, #8]
    88d6:	4790      	blx	r2
							for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    88d8:	2e00      	cmp	r6, #0
    88da:	f47f a889 	bne.w	79f0 <handleSPI+0x330>
    88de:	2601      	movs	r6, #1
    88e0:	e7e6      	b.n	88b0 <_Min_Stack_Size+0x8b0>
						if ((source >= OSC_SOURCE_OFFSET) && (source < (OSC_SOURCE_OFFSET+NUM_OSC)))
    88e2:	2f02      	cmp	r7, #2
    88e4:	f63f ac65 	bhi.w	81b2 <_Min_Stack_Size+0x1b2>
							oscOn[source - OSC_SOURCE_OFFSET] = 1;
    88e8:	4b27      	ldr	r3, [pc, #156]	; (8988 <_Min_Stack_Size+0x988>)
    88ea:	55d8      	strb	r0, [r3, r7]
    88ec:	e461      	b.n	81b2 <_Min_Stack_Size+0x1b2>
					mappings[whichMapping].amount[whichSlot] = (float)mappingChangeValue * INV_TWO_TO_15;
    88ee:	ee07 7a90 	vmov	s15, r7
    88f2:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    88f6:	ed9f 7a25 	vldr	s14, [pc, #148]	; 898c <_Min_Stack_Size+0x98c>
    88fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    88fe:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    8902:	4443      	add	r3, r8
    8904:	ee67 7a87 	vmul.f32	s15, s15, s14
    8908:	eb09 0383 	add.w	r3, r9, r3, lsl #2
    890c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    8910:	f7ff b86e 	b.w	79f0 <handleSPI+0x330>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    8914:	eb03 02c8 	add.w	r2, r3, r8, lsl #3
    8918:	7001      	strb	r1, [r0, #0]
    891a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    891e:	4e1c      	ldr	r6, [pc, #112]	; (8990 <_Min_Stack_Size+0x990>)
    8920:	444a      	add	r2, r9
    8922:	444b      	add	r3, r9
    8924:	6296      	str	r6, [r2, #40]	; 0x28
    8926:	605e      	str	r6, [r3, #4]
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    8928:	f7ff b862 	b.w	79f0 <handleSPI+0x330>
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    892c:	f1bc 0f03 	cmp.w	ip, #3
    8930:	d811      	bhi.n	8956 <_Min_Stack_Size+0x956>
								envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    8932:	4b14      	ldr	r3, [pc, #80]	; (8984 <_Min_Stack_Size+0x984>)
    8934:	2201      	movs	r2, #1
    8936:	443b      	add	r3, r7
    8938:	f803 2c14 	strb.w	r2, [r3, #-20]
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    893c:	e5c5      	b.n	84ca <_Min_Stack_Size+0x4ca>
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    893e:	f1bc 0f03 	cmp.w	ip, #3
    8942:	d90f      	bls.n	8964 <_Min_Stack_Size+0x964>
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    8944:	2f02      	cmp	r7, #2
    8946:	f63f ada9 	bhi.w	849c <_Min_Stack_Size+0x49c>
								oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    894a:	4b0f      	ldr	r3, [pc, #60]	; (8988 <_Min_Stack_Size+0x988>)
    894c:	f04f 0b01 	mov.w	fp, #1
    8950:	f803 b007 	strb.w	fp, [r3, r7]
    8954:	e5a2      	b.n	849c <_Min_Stack_Size+0x49c>
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    8956:	2f02      	cmp	r7, #2
    8958:	f63f adb7 	bhi.w	84ca <_Min_Stack_Size+0x4ca>
								oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    895c:	4b0a      	ldr	r3, [pc, #40]	; (8988 <_Min_Stack_Size+0x988>)
    895e:	2201      	movs	r2, #1
    8960:	55da      	strb	r2, [r3, r7]
    8962:	e5b2      	b.n	84ca <_Min_Stack_Size+0x4ca>
								envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    8964:	4b07      	ldr	r3, [pc, #28]	; (8984 <_Min_Stack_Size+0x984>)
    8966:	f04f 0b01 	mov.w	fp, #1
    896a:	443b      	add	r3, r7
    896c:	f803 bc14 	strb.w	fp, [r3, #-20]
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    8970:	e594      	b.n	849c <_Min_Stack_Size+0x49c>
						if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    8972:	f1a7 0314 	sub.w	r3, r7, #20
    8976:	2b03      	cmp	r3, #3
    8978:	d985      	bls.n	8886 <_Min_Stack_Size+0x886>
    897a:	e41a      	b.n	81b2 <_Min_Stack_Size+0x1b2>
    897c:	2aaaaaab 	.word	0x2aaaaaab
    8980:	20016d18 	.word	0x20016d18
    8984:	200051d4 	.word	0x200051d4
    8988:	20005720 	.word	0x20005720
    898c:	37fffffc 	.word	0x37fffffc
    8990:	20000748 	.word	0x20000748
    8994:	f3af 8000 	nop.w
    8998:	f3af 8000 	nop.w
    899c:	f3af 8000 	nop.w

000089a0 <HAL_I2C_SlaveRxCpltCallback>:
	presetWaitingToParse = 4096;
    89a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    89a4:	4b02      	ldr	r3, [pc, #8]	; (89b0 <HAL_I2C_SlaveRxCpltCallback+0x10>)
	HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 4096);
    89a6:	4903      	ldr	r1, [pc, #12]	; (89b4 <HAL_I2C_SlaveRxCpltCallback+0x14>)
    89a8:	4803      	ldr	r0, [pc, #12]	; (89b8 <HAL_I2C_SlaveRxCpltCallback+0x18>)
	presetWaitingToParse = 4096;
    89aa:	601a      	str	r2, [r3, #0]
	HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 4096);
    89ac:	f002 bacc 	b.w	af48 <__HAL_I2C_Slave_Receive_IT_veneer>
    89b0:	2001ac00 	.word	0x2001ac00
    89b4:	30042380 	.word	0x30042380
    89b8:	20014bc4 	.word	0x20014bc4
    89bc:	f3af 8000 	nop.w

000089c0 <HAL_I2C_MasterTxCpltCallback>:
	i2cSending = 0;
    89c0:	4b01      	ldr	r3, [pc, #4]	; (89c8 <HAL_I2C_MasterTxCpltCallback+0x8>)
    89c2:	2200      	movs	r2, #0
    89c4:	701a      	strb	r2, [r3, #0]
}
    89c6:	4770      	bx	lr
    89c8:	20016e42 	.word	0x20016e42
    89cc:	f3af 8000 	nop.w
    89d0:	f3af 8000 	nop.w
    89d4:	f3af 8000 	nop.w
    89d8:	f3af 8000 	nop.w
    89dc:	f3af 8000 	nop.w

000089e0 <HAL_I2C_ErrorCallback>:
	i2cSending = 0;
    89e0:	2100      	movs	r1, #0
	I2CErrors++;
    89e2:	4a05      	ldr	r2, [pc, #20]	; (89f8 <HAL_I2C_ErrorCallback+0x18>)
	i2cSending = 0;
    89e4:	4b05      	ldr	r3, [pc, #20]	; (89fc <HAL_I2C_ErrorCallback+0x1c>)
	receivingI2C = 0;
    89e6:	4806      	ldr	r0, [pc, #24]	; (8a00 <HAL_I2C_ErrorCallback+0x20>)
	i2cSending = 0;
    89e8:	7019      	strb	r1, [r3, #0]
	I2CErrors++;
    89ea:	7813      	ldrb	r3, [r2, #0]
	receivingI2C = 0;
    89ec:	7001      	strb	r1, [r0, #0]
	I2CErrors++;
    89ee:	3301      	adds	r3, #1
    89f0:	b2db      	uxtb	r3, r3
    89f2:	7013      	strb	r3, [r2, #0]
}
    89f4:	4770      	bx	lr
    89f6:	bf00      	nop
    89f8:	20014c6c 	.word	0x20014c6c
    89fc:	20016e42 	.word	0x20016e42
    8a00:	2001b014 	.word	0x2001b014
    8a04:	f3af 8000 	nop.w
    8a08:	f3af 8000 	nop.w
    8a0c:	f3af 8000 	nop.w
    8a10:	f3af 8000 	nop.w
    8a14:	f3af 8000 	nop.w
    8a18:	f3af 8000 	nop.w
    8a1c:	f3af 8000 	nop.w

00008a20 <HAL_SPI_TxRxCpltCallback>:
{
    8a20:	b570      	push	{r4, r5, r6, lr}
	if (hspi == &hspi6)
    8a22:	4cbb      	ldr	r4, [pc, #748]	; (8d10 <HAL_SPI_TxRxCpltCallback+0x2f0>)
	interrupted = 1;
    8a24:	2201      	movs	r2, #1
    8a26:	4bbb      	ldr	r3, [pc, #748]	; (8d14 <HAL_SPI_TxRxCpltCallback+0x2f4>)
	if (hspi == &hspi6)
    8a28:	4284      	cmp	r4, r0
	interrupted = 1;
    8a2a:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi6)
    8a2c:	d05b      	beq.n	8ae6 <HAL_SPI_TxRxCpltCallback+0xc6>
		SCB_InvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_LEVERS_RX) & ~(uint32_t )0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    8a2e:	4cba      	ldr	r4, [pc, #744]	; (8d18 <HAL_SPI_TxRxCpltCallback+0x2f8>)
  __ASM volatile ("dsb 0xF":::"memory");
    8a30:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    8a34:	4bb9      	ldr	r3, [pc, #740]	; (8d1c <HAL_SPI_TxRxCpltCallback+0x2fc>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    8a36:	f104 0120 	add.w	r1, r4, #32
    8a3a:	f104 0540 	add.w	r5, r4, #64	; 0x40
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    8a3e:	f8c3 425c 	str.w	r4, [r3, #604]	; 0x25c
    8a42:	f8c3 125c 	str.w	r1, [r3, #604]	; 0x25c
    8a46:	f8c3 525c 	str.w	r5, [r3, #604]	; 0x25c
    8a4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8a4e:	f3bf 8f6f 	isb	sy
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
    8a52:	2110      	movs	r1, #16
    8a54:	48b2      	ldr	r0, [pc, #712]	; (8d20 <HAL_SPI_TxRxCpltCallback+0x300>)
    8a56:	f002 faeb 	bl	b030 <__HAL_GPIO_WritePin_veneer>
		if ((SPI_LEVERS_RX[62] == 254) && (SPI_LEVERS_RX[63] == 253))
    8a5a:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
    8a5e:	2bfe      	cmp	r3, #254	; 0xfe
    8a60:	d103      	bne.n	8a6a <HAL_SPI_TxRxCpltCallback+0x4a>
    8a62:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
    8a66:	2bfd      	cmp	r3, #253	; 0xfd
    8a68:	d039      	beq.n	8ade <HAL_SPI_TxRxCpltCallback+0xbe>
			HAL_SPI_Abort(&hspi1);
    8a6a:	4cae      	ldr	r4, [pc, #696]	; (8d24 <HAL_SPI_TxRxCpltCallback+0x304>)
    8a6c:	4620      	mov	r0, r4
    8a6e:	f002 fb07 	bl	b080 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI1_FORCE_RESET();
    8a72:	4bad      	ldr	r3, [pc, #692]	; (8d28 <HAL_SPI_TxRxCpltCallback+0x308>)
    8a74:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    8a78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    8a7c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			__HAL_RCC_SPI1_RELEASE_RESET();
    8a80:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    8a84:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    8a88:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			MX_SPI1_Init();
    8a8c:	f002 fb20 	bl	b0d0 <__MX_SPI1_Init_veneer>
			__HAL_SPI_ENABLE(&hspi1);
    8a90:	6826      	ldr	r6, [r4, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    8a92:	4aa1      	ldr	r2, [pc, #644]	; (8d18 <HAL_SPI_TxRxCpltCallback+0x2f8>)
    8a94:	2340      	movs	r3, #64	; 0x40
			__HAL_SPI_ENABLE(&hspi1);
    8a96:	6831      	ldr	r1, [r6, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    8a98:	4620      	mov	r0, r4
			__HAL_SPI_ENABLE(&hspi1);
    8a9a:	f041 0101 	orr.w	r1, r1, #1
    8a9e:	6031      	str	r1, [r6, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    8aa0:	18d1      	adds	r1, r2, r3
    8aa2:	f002 fb8d 	bl	b1c0 <__HAL_SPI_TransmitReceive_DMA_veneer>
			numResets++;
    8aa6:	4aa1      	ldr	r2, [pc, #644]	; (8d2c <HAL_SPI_TxRxCpltCallback+0x30c>)
    8aa8:	7813      	ldrb	r3, [r2, #0]
    8aaa:	3301      	adds	r3, #1
    8aac:	b2db      	uxtb	r3, r3
    8aae:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    8ab0:	f3bf 8f4f 	dsb	sy
        op_addr += __SCB_DCACHE_LINE_SIZE;
    8ab4:	4a9e      	ldr	r2, [pc, #632]	; (8d30 <HAL_SPI_TxRxCpltCallback+0x310>)
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    8ab6:	4b99      	ldr	r3, [pc, #612]	; (8d1c <HAL_SPI_TxRxCpltCallback+0x2fc>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    8ab8:	f102 0120 	add.w	r1, r2, #32
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    8abc:	f8c3 5268 	str.w	r5, [r3, #616]	; 0x268
    8ac0:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    8ac4:	f8c3 1268 	str.w	r1, [r3, #616]	; 0x268
    8ac8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8acc:	f3bf 8f6f 	isb	sy
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
    8ad0:	2200      	movs	r2, #0
    8ad2:	2110      	movs	r1, #16
    8ad4:	4892      	ldr	r0, [pc, #584]	; (8d20 <HAL_SPI_TxRxCpltCallback+0x300>)
}
    8ad6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
    8ada:	f002 baa9 	b.w	b030 <__HAL_GPIO_WritePin_veneer>
			handleSPI(LEVER_BUFFER_SIZE);
    8ade:	2020      	movs	r0, #32
    8ae0:	f7fe fdee 	bl	76c0 <handleSPI>
    8ae4:	e7e4      	b.n	8ab0 <HAL_SPI_TxRxCpltCallback+0x90>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
    8ae6:	2102      	movs	r1, #2
    8ae8:	488d      	ldr	r0, [pc, #564]	; (8d20 <HAL_SPI_TxRxCpltCallback+0x300>)
    8aea:	f002 faa1 	bl	b030 <__HAL_GPIO_WritePin_veneer>
		SCB_InvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_PLUCK_RX) & ~(uint32_t )0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    8aee:	4b91      	ldr	r3, [pc, #580]	; (8d34 <HAL_SPI_TxRxCpltCallback+0x314>)
    8af0:	f103 0040 	add.w	r0, r3, #64	; 0x40
  __ASM volatile ("dsb 0xF":::"memory");
    8af4:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    8af8:	4a88      	ldr	r2, [pc, #544]	; (8d1c <HAL_SPI_TxRxCpltCallback+0x2fc>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    8afa:	f103 0160 	add.w	r1, r3, #96	; 0x60
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    8afe:	f8c2 025c 	str.w	r0, [r2, #604]	; 0x25c
    8b02:	f8c2 125c 	str.w	r1, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
    8b06:	f103 0180 	add.w	r1, r3, #128	; 0x80
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    8b0a:	f8c2 125c 	str.w	r1, [r2, #604]	; 0x25c
    8b0e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8b12:	f3bf 8f6f 	isb	sy
		if ((SPI_PLUCK_RX[32] == 254) && (SPI_PLUCK_RX[63] == 253))
    8b16:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
    8b1a:	2afe      	cmp	r2, #254	; 0xfe
    8b1c:	d103      	bne.n	8b26 <HAL_SPI_TxRxCpltCallback+0x106>
    8b1e:	f893 207f 	ldrb.w	r2, [r3, #127]	; 0x7f
    8b22:	2afd      	cmp	r2, #253	; 0xfd
    8b24:	d023      	beq.n	8b6e <HAL_SPI_TxRxCpltCallback+0x14e>
			HAL_SPI_Abort(&hspi6);
    8b26:	487a      	ldr	r0, [pc, #488]	; (8d10 <HAL_SPI_TxRxCpltCallback+0x2f0>)
    8b28:	f002 faaa 	bl	b080 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI6_FORCE_RESET();
    8b2c:	4b7e      	ldr	r3, [pc, #504]	; (8d28 <HAL_SPI_TxRxCpltCallback+0x308>)
    8b2e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    8b32:	f042 0220 	orr.w	r2, r2, #32
    8b36:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
			__HAL_RCC_SPI6_RELEASE_RESET();
    8b3a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    8b3e:	f022 0220 	bic.w	r2, r2, #32
    8b42:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
			MX_SPI6_Init();
    8b46:	f002 fb53 	bl	b1f0 <__MX_SPI6_Init_veneer>
			__HAL_SPI_ENABLE(&hspi6);
    8b4a:	6825      	ldr	r5, [r4, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi6, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    8b4c:	4a7a      	ldr	r2, [pc, #488]	; (8d38 <HAL_SPI_TxRxCpltCallback+0x318>)
    8b4e:	2340      	movs	r3, #64	; 0x40
			__HAL_SPI_ENABLE(&hspi6);
    8b50:	682c      	ldr	r4, [r5, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi6, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    8b52:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
    8b56:	486e      	ldr	r0, [pc, #440]	; (8d10 <HAL_SPI_TxRxCpltCallback+0x2f0>)
			__HAL_SPI_ENABLE(&hspi6);
    8b58:	f044 0401 	orr.w	r4, r4, #1
    8b5c:	602c      	str	r4, [r5, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi6, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    8b5e:	f002 fb2f 	bl	b1c0 <__HAL_SPI_TransmitReceive_DMA_veneer>
			numResets++;
    8b62:	4a72      	ldr	r2, [pc, #456]	; (8d2c <HAL_SPI_TxRxCpltCallback+0x30c>)
    8b64:	7813      	ldrb	r3, [r2, #0]
    8b66:	3301      	adds	r3, #1
    8b68:	b2db      	uxtb	r3, r3
    8b6a:	7013      	strb	r3, [r2, #0]
}
    8b6c:	bd70      	pop	{r4, r5, r6, pc}
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8b6e:	4a73      	ldr	r2, [pc, #460]	; (8d3c <HAL_SPI_TxRxCpltCallback+0x31c>)
    8b70:	7811      	ldrb	r1, [r2, #0]
    8b72:	2900      	cmp	r1, #0
    8b74:	f000 80c8 	beq.w	8d08 <HAL_SPI_TxRxCpltCallback+0x2e8>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    8b78:	4a71      	ldr	r2, [pc, #452]	; (8d40 <HAL_SPI_TxRxCpltCallback+0x320>)
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8b7a:	2901      	cmp	r1, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    8b7c:	6814      	ldr	r4, [r2, #0]
    8b7e:	6810      	ldr	r0, [r2, #0]
    8b80:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    8b84:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    8b88:	f894 5061 	ldrb.w	r5, [r4, #97]	; 0x61
    8b8c:	f890 4062 	ldrb.w	r4, [r0, #98]	; 0x62
    8b90:	486c      	ldr	r0, [pc, #432]	; (8d44 <HAL_SPI_TxRxCpltCallback+0x324>)
    8b92:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    8b96:	b2a4      	uxth	r4, r4
    8b98:	8004      	strh	r4, [r0, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8b9a:	f000 80b5 	beq.w	8d08 <HAL_SPI_TxRxCpltCallback+0x2e8>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    8b9e:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8ba0:	2902      	cmp	r1, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    8ba2:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    8ba6:	f894 5063 	ldrb.w	r5, [r4, #99]	; 0x63
    8baa:	6814      	ldr	r4, [r2, #0]
    8bac:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    8bb0:	f894 4064 	ldrb.w	r4, [r4, #100]	; 0x64
    8bb4:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    8bb8:	b2a4      	uxth	r4, r4
    8bba:	8044      	strh	r4, [r0, #2]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8bbc:	f000 80a4 	beq.w	8d08 <HAL_SPI_TxRxCpltCallback+0x2e8>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    8bc0:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8bc2:	2903      	cmp	r1, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    8bc4:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    8bc8:	f894 5065 	ldrb.w	r5, [r4, #101]	; 0x65
    8bcc:	6814      	ldr	r4, [r2, #0]
    8bce:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    8bd2:	f894 4066 	ldrb.w	r4, [r4, #102]	; 0x66
    8bd6:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    8bda:	b2a4      	uxth	r4, r4
    8bdc:	8084      	strh	r4, [r0, #4]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8bde:	f000 8093 	beq.w	8d08 <HAL_SPI_TxRxCpltCallback+0x2e8>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    8be2:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8be4:	2904      	cmp	r1, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    8be6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    8bea:	f894 5067 	ldrb.w	r5, [r4, #103]	; 0x67
    8bee:	6814      	ldr	r4, [r2, #0]
    8bf0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    8bf4:	f894 4068 	ldrb.w	r4, [r4, #104]	; 0x68
    8bf8:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    8bfc:	b2a4      	uxth	r4, r4
    8bfe:	80c4      	strh	r4, [r0, #6]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8c00:	f000 8082 	beq.w	8d08 <HAL_SPI_TxRxCpltCallback+0x2e8>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    8c04:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8c06:	2905      	cmp	r1, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    8c08:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    8c0c:	f894 5069 	ldrb.w	r5, [r4, #105]	; 0x69
    8c10:	6814      	ldr	r4, [r2, #0]
    8c12:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    8c16:	f894 406a 	ldrb.w	r4, [r4, #106]	; 0x6a
    8c1a:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    8c1e:	b2a4      	uxth	r4, r4
    8c20:	8104      	strh	r4, [r0, #8]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8c22:	d071      	beq.n	8d08 <HAL_SPI_TxRxCpltCallback+0x2e8>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    8c24:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8c26:	2906      	cmp	r1, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    8c28:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    8c2c:	f894 506b 	ldrb.w	r5, [r4, #107]	; 0x6b
    8c30:	6814      	ldr	r4, [r2, #0]
    8c32:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    8c36:	f894 406c 	ldrb.w	r4, [r4, #108]	; 0x6c
    8c3a:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    8c3e:	b2a4      	uxth	r4, r4
    8c40:	8144      	strh	r4, [r0, #10]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8c42:	d061      	beq.n	8d08 <HAL_SPI_TxRxCpltCallback+0x2e8>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    8c44:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8c46:	2907      	cmp	r1, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    8c48:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    8c4c:	f894 506d 	ldrb.w	r5, [r4, #109]	; 0x6d
    8c50:	6814      	ldr	r4, [r2, #0]
    8c52:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    8c56:	f894 406e 	ldrb.w	r4, [r4, #110]	; 0x6e
    8c5a:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    8c5e:	b2a4      	uxth	r4, r4
    8c60:	8184      	strh	r4, [r0, #12]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8c62:	d051      	beq.n	8d08 <HAL_SPI_TxRxCpltCallback+0x2e8>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    8c64:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8c66:	2908      	cmp	r1, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    8c68:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    8c6c:	f894 506f 	ldrb.w	r5, [r4, #111]	; 0x6f
    8c70:	6814      	ldr	r4, [r2, #0]
    8c72:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    8c76:	f894 4070 	ldrb.w	r4, [r4, #112]	; 0x70
    8c7a:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    8c7e:	b2a4      	uxth	r4, r4
    8c80:	81c4      	strh	r4, [r0, #14]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8c82:	d041      	beq.n	8d08 <HAL_SPI_TxRxCpltCallback+0x2e8>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    8c84:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8c86:	2909      	cmp	r1, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    8c88:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    8c8c:	f894 5071 	ldrb.w	r5, [r4, #113]	; 0x71
    8c90:	6814      	ldr	r4, [r2, #0]
    8c92:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    8c96:	f894 4072 	ldrb.w	r4, [r4, #114]	; 0x72
    8c9a:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    8c9e:	b2a4      	uxth	r4, r4
    8ca0:	8204      	strh	r4, [r0, #16]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8ca2:	d031      	beq.n	8d08 <HAL_SPI_TxRxCpltCallback+0x2e8>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    8ca4:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8ca6:	290a      	cmp	r1, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    8ca8:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    8cac:	f894 5073 	ldrb.w	r5, [r4, #115]	; 0x73
    8cb0:	6814      	ldr	r4, [r2, #0]
    8cb2:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    8cb6:	f894 4074 	ldrb.w	r4, [r4, #116]	; 0x74
    8cba:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    8cbe:	b2a4      	uxth	r4, r4
    8cc0:	8244      	strh	r4, [r0, #18]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8cc2:	d021      	beq.n	8d08 <HAL_SPI_TxRxCpltCallback+0x2e8>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    8cc4:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8cc6:	290b      	cmp	r1, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    8cc8:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    8ccc:	f894 5075 	ldrb.w	r5, [r4, #117]	; 0x75
    8cd0:	6814      	ldr	r4, [r2, #0]
    8cd2:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    8cd6:	f894 4076 	ldrb.w	r4, [r4, #118]	; 0x76
    8cda:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    8cde:	b2a4      	uxth	r4, r4
    8ce0:	8284      	strh	r4, [r0, #20]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8ce2:	d011      	beq.n	8d08 <HAL_SPI_TxRxCpltCallback+0x2e8>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    8ce4:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8ce6:	290c      	cmp	r1, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    8ce8:	6815      	ldr	r5, [r2, #0]
    8cea:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    8cee:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    8cf2:	f894 4077 	ldrb.w	r4, [r4, #119]	; 0x77
    8cf6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    8cfa:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    8cfe:	b29b      	uxth	r3, r3
    8d00:	82c3      	strh	r3, [r0, #22]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8d02:	d001      	beq.n	8d08 <HAL_SPI_TxRxCpltCallback+0x2e8>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    8d04:	6813      	ldr	r3, [r2, #0]
    8d06:	6813      	ldr	r3, [r2, #0]
			newPluck = 1;
    8d08:	4b0f      	ldr	r3, [pc, #60]	; (8d48 <HAL_SPI_TxRxCpltCallback+0x328>)
    8d0a:	2201      	movs	r2, #1
    8d0c:	601a      	str	r2, [r3, #0]
}
    8d0e:	bd70      	pop	{r4, r5, r6, pc}
    8d10:	2001d5f0 	.word	0x2001d5f0
    8d14:	20005378 	.word	0x20005378
    8d18:	30000800 	.word	0x30000800
    8d1c:	e000ed00 	.word	0xe000ed00
    8d20:	58020800 	.word	0x58020800
    8d24:	2001d550 	.word	0x2001d550
    8d28:	58024400 	.word	0x58024400
    8d2c:	20019ac1 	.word	0x20019ac1
    8d30:	30000860 	.word	0x30000860
    8d34:	38000000 	.word	0x38000000
    8d38:	38000040 	.word	0x38000040
    8d3c:	20000015 	.word	0x20000015
    8d40:	20005258 	.word	0x20005258
    8d44:	20014978 	.word	0x20014978
    8d48:	200056b0 	.word	0x200056b0
    8d4c:	f3af 8000 	nop.w
    8d50:	f3af 8000 	nop.w
    8d54:	f3af 8000 	nop.w
    8d58:	f3af 8000 	nop.w
    8d5c:	f3af 8000 	nop.w

00008d60 <HAL_SPI_TxRxHalfCpltCallback>:
{
    8d60:	b570      	push	{r4, r5, r6, lr}
	if (hspi == &hspi6)
    8d62:	4dbd      	ldr	r5, [pc, #756]	; (9058 <HAL_SPI_TxRxHalfCpltCallback+0x2f8>)
	interrupted = 1;
    8d64:	2201      	movs	r2, #1
    8d66:	4bbd      	ldr	r3, [pc, #756]	; (905c <HAL_SPI_TxRxHalfCpltCallback+0x2fc>)
	if (hspi == &hspi6)
    8d68:	4285      	cmp	r5, r0
	interrupted = 1;
    8d6a:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi6)
    8d6c:	d056      	beq.n	8e1c <HAL_SPI_TxRxHalfCpltCallback+0xbc>
		SCB_InvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_LEVERS_RX) & ~(uint32_t )0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    8d6e:	4cbc      	ldr	r4, [pc, #752]	; (9060 <HAL_SPI_TxRxHalfCpltCallback+0x300>)
  __ASM volatile ("dsb 0xF":::"memory");
    8d70:	f3bf 8f4f 	dsb	sy
    8d74:	4bbb      	ldr	r3, [pc, #748]	; (9064 <HAL_SPI_TxRxHalfCpltCallback+0x304>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    8d76:	f104 0120 	add.w	r1, r4, #32
    8d7a:	f104 0540 	add.w	r5, r4, #64	; 0x40
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    8d7e:	f8c3 425c 	str.w	r4, [r3, #604]	; 0x25c
    8d82:	f8c3 125c 	str.w	r1, [r3, #604]	; 0x25c
    8d86:	f8c3 525c 	str.w	r5, [r3, #604]	; 0x25c
    8d8a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8d8e:	f3bf 8f6f 	isb	sy
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
    8d92:	2110      	movs	r1, #16
    8d94:	48b4      	ldr	r0, [pc, #720]	; (9068 <HAL_SPI_TxRxHalfCpltCallback+0x308>)
    8d96:	f002 f94b 	bl	b030 <__HAL_GPIO_WritePin_veneer>
		if ((SPI_LEVERS_RX[30] == 254) && (SPI_LEVERS_RX[31] == 253))
    8d9a:	7fa3      	ldrb	r3, [r4, #30]
    8d9c:	2bfe      	cmp	r3, #254	; 0xfe
    8d9e:	d103      	bne.n	8da8 <HAL_SPI_TxRxHalfCpltCallback+0x48>
    8da0:	7fe3      	ldrb	r3, [r4, #31]
    8da2:	2bfd      	cmp	r3, #253	; 0xfd
    8da4:	f000 814f 	beq.w	9046 <HAL_SPI_TxRxHalfCpltCallback+0x2e6>
			HAL_SPI_Abort(&hspi1);
    8da8:	4cb0      	ldr	r4, [pc, #704]	; (906c <HAL_SPI_TxRxHalfCpltCallback+0x30c>)
    8daa:	4620      	mov	r0, r4
    8dac:	f002 f968 	bl	b080 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI1_FORCE_RESET();
    8db0:	4baf      	ldr	r3, [pc, #700]	; (9070 <HAL_SPI_TxRxHalfCpltCallback+0x310>)
    8db2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    8db6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    8dba:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			__HAL_RCC_SPI1_RELEASE_RESET();
    8dbe:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    8dc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    8dc6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			MX_SPI1_Init();
    8dca:	f002 f981 	bl	b0d0 <__MX_SPI1_Init_veneer>
			__HAL_SPI_ENABLE(&hspi1);
    8dce:	6826      	ldr	r6, [r4, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    8dd0:	4aa3      	ldr	r2, [pc, #652]	; (9060 <HAL_SPI_TxRxHalfCpltCallback+0x300>)
    8dd2:	2340      	movs	r3, #64	; 0x40
			__HAL_SPI_ENABLE(&hspi1);
    8dd4:	6831      	ldr	r1, [r6, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    8dd6:	4620      	mov	r0, r4
			__HAL_SPI_ENABLE(&hspi1);
    8dd8:	f041 0101 	orr.w	r1, r1, #1
    8ddc:	6031      	str	r1, [r6, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    8dde:	18d1      	adds	r1, r2, r3
    8de0:	f002 f9ee 	bl	b1c0 <__HAL_SPI_TransmitReceive_DMA_veneer>
			numResets++;
    8de4:	4aa3      	ldr	r2, [pc, #652]	; (9074 <HAL_SPI_TxRxHalfCpltCallback+0x314>)
    8de6:	7813      	ldrb	r3, [r2, #0]
    8de8:	3301      	adds	r3, #1
    8dea:	b2db      	uxtb	r3, r3
    8dec:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    8dee:	f3bf 8f4f 	dsb	sy
        op_addr += __SCB_DCACHE_LINE_SIZE;
    8df2:	4aa1      	ldr	r2, [pc, #644]	; (9078 <HAL_SPI_TxRxHalfCpltCallback+0x318>)
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    8df4:	4b9b      	ldr	r3, [pc, #620]	; (9064 <HAL_SPI_TxRxHalfCpltCallback+0x304>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    8df6:	f102 0120 	add.w	r1, r2, #32
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    8dfa:	f8c3 5268 	str.w	r5, [r3, #616]	; 0x268
    8dfe:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    8e02:	f8c3 1268 	str.w	r1, [r3, #616]	; 0x268
    8e06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8e0a:	f3bf 8f6f 	isb	sy
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
    8e0e:	2200      	movs	r2, #0
    8e10:	2110      	movs	r1, #16
    8e12:	4895      	ldr	r0, [pc, #596]	; (9068 <HAL_SPI_TxRxHalfCpltCallback+0x308>)
}
    8e14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
    8e18:	f002 b90a 	b.w	b030 <__HAL_GPIO_WritePin_veneer>
		SCB_InvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_PLUCK_RX) & ~(uint32_t )0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    8e1c:	4c97      	ldr	r4, [pc, #604]	; (907c <HAL_SPI_TxRxHalfCpltCallback+0x31c>)
    8e1e:	f104 0140 	add.w	r1, r4, #64	; 0x40
  __ASM volatile ("dsb 0xF":::"memory");
    8e22:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    8e26:	4b8f      	ldr	r3, [pc, #572]	; (9064 <HAL_SPI_TxRxHalfCpltCallback+0x304>)
    8e28:	f8c3 125c 	str.w	r1, [r3, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
    8e2c:	f104 0160 	add.w	r1, r4, #96	; 0x60
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    8e30:	f8c3 125c 	str.w	r1, [r3, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
    8e34:	f104 0180 	add.w	r1, r4, #128	; 0x80
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    8e38:	f8c3 125c 	str.w	r1, [r3, #604]	; 0x25c
    8e3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8e40:	f3bf 8f6f 	isb	sy
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
    8e44:	2102      	movs	r1, #2
    8e46:	4888      	ldr	r0, [pc, #544]	; (9068 <HAL_SPI_TxRxHalfCpltCallback+0x308>)
    8e48:	f002 f8f2 	bl	b030 <__HAL_GPIO_WritePin_veneer>
		if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[31] == 253))
    8e4c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    8e50:	2bfe      	cmp	r3, #254	; 0xfe
    8e52:	f040 80d4 	bne.w	8ffe <HAL_SPI_TxRxHalfCpltCallback+0x29e>
    8e56:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
    8e5a:	2bfd      	cmp	r3, #253	; 0xfd
    8e5c:	f040 80cf 	bne.w	8ffe <HAL_SPI_TxRxHalfCpltCallback+0x29e>
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8e60:	4b87      	ldr	r3, [pc, #540]	; (9080 <HAL_SPI_TxRxHalfCpltCallback+0x320>)
    8e62:	781a      	ldrb	r2, [r3, #0]
    8e64:	2a00      	cmp	r2, #0
    8e66:	f000 80f2 	beq.w	904e <HAL_SPI_TxRxHalfCpltCallback+0x2ee>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8e6a:	4b86      	ldr	r3, [pc, #536]	; (9084 <HAL_SPI_TxRxHalfCpltCallback+0x324>)
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8e6c:	2a01      	cmp	r2, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8e6e:	6818      	ldr	r0, [r3, #0]
    8e70:	6819      	ldr	r1, [r3, #0]
    8e72:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    8e76:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    8e7a:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
    8e7e:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    8e82:	4981      	ldr	r1, [pc, #516]	; (9088 <HAL_SPI_TxRxHalfCpltCallback+0x328>)
    8e84:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    8e88:	b280      	uxth	r0, r0
    8e8a:	8008      	strh	r0, [r1, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8e8c:	f000 80df 	beq.w	904e <HAL_SPI_TxRxHalfCpltCallback+0x2ee>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8e90:	6818      	ldr	r0, [r3, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8e92:	2a02      	cmp	r2, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8e94:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    8e98:	f890 5043 	ldrb.w	r5, [r0, #67]	; 0x43
    8e9c:	6818      	ldr	r0, [r3, #0]
    8e9e:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    8ea2:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
    8ea6:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    8eaa:	b280      	uxth	r0, r0
    8eac:	8048      	strh	r0, [r1, #2]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8eae:	f000 80ce 	beq.w	904e <HAL_SPI_TxRxHalfCpltCallback+0x2ee>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8eb2:	6818      	ldr	r0, [r3, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8eb4:	2a03      	cmp	r2, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8eb6:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    8eba:	f890 5045 	ldrb.w	r5, [r0, #69]	; 0x45
    8ebe:	6818      	ldr	r0, [r3, #0]
    8ec0:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    8ec4:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    8ec8:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    8ecc:	b280      	uxth	r0, r0
    8ece:	8088      	strh	r0, [r1, #4]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8ed0:	f000 80bd 	beq.w	904e <HAL_SPI_TxRxHalfCpltCallback+0x2ee>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8ed4:	6818      	ldr	r0, [r3, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8ed6:	2a04      	cmp	r2, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8ed8:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    8edc:	f890 5047 	ldrb.w	r5, [r0, #71]	; 0x47
    8ee0:	6818      	ldr	r0, [r3, #0]
    8ee2:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    8ee6:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    8eea:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    8eee:	b280      	uxth	r0, r0
    8ef0:	80c8      	strh	r0, [r1, #6]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8ef2:	f000 80ac 	beq.w	904e <HAL_SPI_TxRxHalfCpltCallback+0x2ee>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8ef6:	6818      	ldr	r0, [r3, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8ef8:	2a05      	cmp	r2, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8efa:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    8efe:	f890 5049 	ldrb.w	r5, [r0, #73]	; 0x49
    8f02:	6818      	ldr	r0, [r3, #0]
    8f04:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    8f08:	f890 004a 	ldrb.w	r0, [r0, #74]	; 0x4a
    8f0c:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    8f10:	b280      	uxth	r0, r0
    8f12:	8108      	strh	r0, [r1, #8]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8f14:	f000 809b 	beq.w	904e <HAL_SPI_TxRxHalfCpltCallback+0x2ee>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8f18:	6818      	ldr	r0, [r3, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8f1a:	2a06      	cmp	r2, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8f1c:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    8f20:	f890 504b 	ldrb.w	r5, [r0, #75]	; 0x4b
    8f24:	6818      	ldr	r0, [r3, #0]
    8f26:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    8f2a:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
    8f2e:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    8f32:	b280      	uxth	r0, r0
    8f34:	8148      	strh	r0, [r1, #10]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8f36:	f000 808a 	beq.w	904e <HAL_SPI_TxRxHalfCpltCallback+0x2ee>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8f3a:	6818      	ldr	r0, [r3, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8f3c:	2a07      	cmp	r2, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8f3e:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    8f42:	f890 504d 	ldrb.w	r5, [r0, #77]	; 0x4d
    8f46:	6818      	ldr	r0, [r3, #0]
    8f48:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    8f4c:	f890 004e 	ldrb.w	r0, [r0, #78]	; 0x4e
    8f50:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    8f54:	b280      	uxth	r0, r0
    8f56:	8188      	strh	r0, [r1, #12]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8f58:	d079      	beq.n	904e <HAL_SPI_TxRxHalfCpltCallback+0x2ee>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8f5a:	6818      	ldr	r0, [r3, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8f5c:	2a08      	cmp	r2, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8f5e:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    8f62:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
    8f66:	6818      	ldr	r0, [r3, #0]
    8f68:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    8f6c:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
    8f70:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    8f74:	b280      	uxth	r0, r0
    8f76:	81c8      	strh	r0, [r1, #14]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8f78:	d069      	beq.n	904e <HAL_SPI_TxRxHalfCpltCallback+0x2ee>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8f7a:	6818      	ldr	r0, [r3, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8f7c:	2a09      	cmp	r2, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8f7e:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    8f82:	f890 5051 	ldrb.w	r5, [r0, #81]	; 0x51
    8f86:	6818      	ldr	r0, [r3, #0]
    8f88:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    8f8c:	f890 0052 	ldrb.w	r0, [r0, #82]	; 0x52
    8f90:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    8f94:	b280      	uxth	r0, r0
    8f96:	8208      	strh	r0, [r1, #16]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8f98:	d059      	beq.n	904e <HAL_SPI_TxRxHalfCpltCallback+0x2ee>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8f9a:	6818      	ldr	r0, [r3, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8f9c:	2a0a      	cmp	r2, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8f9e:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    8fa2:	f890 5053 	ldrb.w	r5, [r0, #83]	; 0x53
    8fa6:	6818      	ldr	r0, [r3, #0]
    8fa8:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    8fac:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
    8fb0:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    8fb4:	b280      	uxth	r0, r0
    8fb6:	8248      	strh	r0, [r1, #18]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8fb8:	d049      	beq.n	904e <HAL_SPI_TxRxHalfCpltCallback+0x2ee>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8fba:	6818      	ldr	r0, [r3, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8fbc:	2a0b      	cmp	r2, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8fbe:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    8fc2:	f890 5055 	ldrb.w	r5, [r0, #85]	; 0x55
    8fc6:	6818      	ldr	r0, [r3, #0]
    8fc8:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    8fcc:	f890 0056 	ldrb.w	r0, [r0, #86]	; 0x56
    8fd0:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    8fd4:	b280      	uxth	r0, r0
    8fd6:	8288      	strh	r0, [r1, #20]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8fd8:	d039      	beq.n	904e <HAL_SPI_TxRxHalfCpltCallback+0x2ee>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8fda:	6818      	ldr	r0, [r3, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8fdc:	2a0c      	cmp	r2, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8fde:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    8fe2:	f890 5057 	ldrb.w	r5, [r0, #87]	; 0x57
    8fe6:	6818      	ldr	r0, [r3, #0]
    8fe8:	eb04 0440 	add.w	r4, r4, r0, lsl #1
    8fec:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    8ff0:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    8ff4:	b280      	uxth	r0, r0
    8ff6:	82c8      	strh	r0, [r1, #22]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8ff8:	d029      	beq.n	904e <HAL_SPI_TxRxHalfCpltCallback+0x2ee>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8ffa:	681a      	ldr	r2, [r3, #0]
    8ffc:	681b      	ldr	r3, [r3, #0]
			HAL_SPI_Abort(&hspi6);
    8ffe:	4816      	ldr	r0, [pc, #88]	; (9058 <HAL_SPI_TxRxHalfCpltCallback+0x2f8>)
    9000:	f002 f83e 	bl	b080 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI6_FORCE_RESET();
    9004:	4b1a      	ldr	r3, [pc, #104]	; (9070 <HAL_SPI_TxRxHalfCpltCallback+0x310>)
    9006:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    900a:	f042 0220 	orr.w	r2, r2, #32
    900e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
			__HAL_RCC_SPI6_RELEASE_RESET();
    9012:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    9016:	f022 0220 	bic.w	r2, r2, #32
    901a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
			MX_SPI6_Init();
    901e:	f002 f8e7 	bl	b1f0 <__MX_SPI6_Init_veneer>
			__HAL_SPI_ENABLE(&hspi6);
    9022:	682d      	ldr	r5, [r5, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi6, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    9024:	4a19      	ldr	r2, [pc, #100]	; (908c <HAL_SPI_TxRxHalfCpltCallback+0x32c>)
    9026:	2340      	movs	r3, #64	; 0x40
			__HAL_SPI_ENABLE(&hspi6);
    9028:	682c      	ldr	r4, [r5, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi6, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    902a:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
    902e:	480a      	ldr	r0, [pc, #40]	; (9058 <HAL_SPI_TxRxHalfCpltCallback+0x2f8>)
			__HAL_SPI_ENABLE(&hspi6);
    9030:	f044 0401 	orr.w	r4, r4, #1
    9034:	602c      	str	r4, [r5, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi6, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    9036:	f002 f8c3 	bl	b1c0 <__HAL_SPI_TransmitReceive_DMA_veneer>
			numResets++;
    903a:	4a0e      	ldr	r2, [pc, #56]	; (9074 <HAL_SPI_TxRxHalfCpltCallback+0x314>)
    903c:	7813      	ldrb	r3, [r2, #0]
    903e:	3301      	adds	r3, #1
    9040:	b2db      	uxtb	r3, r3
    9042:	7013      	strb	r3, [r2, #0]
}
    9044:	bd70      	pop	{r4, r5, r6, pc}
			handleSPI(0);
    9046:	2000      	movs	r0, #0
    9048:	f7fe fb3a 	bl	76c0 <handleSPI>
    904c:	e6cf      	b.n	8dee <HAL_SPI_TxRxHalfCpltCallback+0x8e>
			newPluck = 1;
    904e:	4b10      	ldr	r3, [pc, #64]	; (9090 <HAL_SPI_TxRxHalfCpltCallback+0x330>)
    9050:	2201      	movs	r2, #1
    9052:	601a      	str	r2, [r3, #0]
}
    9054:	bd70      	pop	{r4, r5, r6, pc}
    9056:	bf00      	nop
    9058:	2001d5f0 	.word	0x2001d5f0
    905c:	20005378 	.word	0x20005378
    9060:	30000800 	.word	0x30000800
    9064:	e000ed00 	.word	0xe000ed00
    9068:	58020800 	.word	0x58020800
    906c:	2001d550 	.word	0x2001d550
    9070:	58024400 	.word	0x58024400
    9074:	20019ac1 	.word	0x20019ac1
    9078:	30000860 	.word	0x30000860
    907c:	38000000 	.word	0x38000000
    9080:	20000015 	.word	0x20000015
    9084:	20005258 	.word	0x20005258
    9088:	20014978 	.word	0x20014978
    908c:	38000040 	.word	0x38000040
    9090:	200056b0 	.word	0x200056b0
	...

000090a0 <tExpSmooth_tick>:
Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tExpSmooth_tick(tExpSmooth* const expsmooth)
#else
Lfloat   tExpSmooth_tick(tExpSmooth* const expsmooth)
#endif
{
    _tExpSmooth* smooth = *expsmooth;
    90a0:	6803      	ldr	r3, [r0, #0]
    smooth->curr = smooth->factor * smooth->dest + smooth->oneminusfactor * smooth->curr;
    90a2:	edd3 6a04 	vldr	s13, [r3, #16]
    90a6:	ed93 0a03 	vldr	s0, [r3, #12]
    90aa:	ed93 7a02 	vldr	s14, [r3, #8]
    90ae:	ee20 0a26 	vmul.f32	s0, s0, s13
    90b2:	edd3 7a05 	vldr	s15, [r3, #20]
    90b6:	eea7 0a27 	vfma.f32	s0, s14, s15
    90ba:	ed83 0a04 	vstr	s0, [r3, #16]
    return smooth->curr;
}
    90be:	4770      	bx	lr

000090c0 <tExpSmooth_setDest>:
    _tExpSmooth* smooth = *expsmooth;
    90c0:	6803      	ldr	r3, [r0, #0]
    smooth->dest=dest;
    90c2:	ed83 0a05 	vstr	s0, [r3, #20]
}
    90c6:	4770      	bx	lr
    90c8:	f3af 8000 	nop.w
    90cc:	f3af 8000 	nop.w
    90d0:	f3af 8000 	nop.w
    90d4:	f3af 8000 	nop.w
    90d8:	f3af 8000 	nop.w
    90dc:	f3af 8000 	nop.w

000090e0 <tADSRT_setAttack>:
    if (attack < 0.0f)
    90e0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
    90e4:	6803      	ldr	r3, [r0, #0]
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
    90e6:	ed93 7a05 	vldr	s14, [r3, #20]
    if (attack < 0.0f)
    90ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        attack = 0.01f;
    90ee:	bf48      	it	mi
    90f0:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 9104 <tADSRT_setAttack+0x24>
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
    90f4:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->attack = attack;
    90f8:	ed83 0a08 	vstr	s0, [r3, #32]
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
    90fc:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
    9100:	4770      	bx	lr
    9102:	bf00      	nop
    9104:	3c23d70a 	.word	0x3c23d70a
    9108:	f3af 8000 	nop.w
    910c:	f3af 8000 	nop.w
    9110:	f3af 8000 	nop.w
    9114:	f3af 8000 	nop.w
    9118:	f3af 8000 	nop.w
    911c:	f3af 8000 	nop.w

00009120 <tADSRT_setDecay>:
    if (decay < 0.0f)
    9120:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
    9124:	6803      	ldr	r3, [r0, #0]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
    9126:	ed93 7a05 	vldr	s14, [r3, #20]
    if (decay < 0.0f)
    912a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        decay = 0.01f;
    912e:	bf48      	it	mi
    9130:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 9144 <tADSRT_setDecay+0x24>
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
    9134:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->decay = decay;
    9138:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
    913c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
    9140:	4770      	bx	lr
    9142:	bf00      	nop
    9144:	3c23d70a 	.word	0x3c23d70a
    9148:	f3af 8000 	nop.w
    914c:	f3af 8000 	nop.w
    9150:	f3af 8000 	nop.w
    9154:	f3af 8000 	nop.w
    9158:	f3af 8000 	nop.w
    915c:	f3af 8000 	nop.w

00009160 <tADSRT_setSustain>:
    if (sustain > 1.0f)      adsr->sustain = 1.0f;
    9160:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    9164:	ed9f 7a04 	vldr	s14, [pc, #16]	; 9178 <tADSRT_setSustain+0x18>
    _tADSRT* adsr = *adsrenv;
    9168:	6803      	ldr	r3, [r0, #0]
    if (sustain > 1.0f)      adsr->sustain = 1.0f;
    916a:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
    916e:	fe80 0a67 	vminnm.f32	s0, s0, s15
    9172:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
}
    9176:	4770      	bx	lr
    9178:	00000000 	.word	0x00000000
    917c:	f3af 8000 	nop.w

00009180 <tADSRT_setRelease>:
    if (release < 0.0f)
    9180:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
    9184:	6803      	ldr	r3, [r0, #0]
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
    9186:	ed93 7a05 	vldr	s14, [r3, #20]
    if (release < 0.0f)
    918a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        release = 0.01f;
    918e:	bf48      	it	mi
    9190:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 91a4 <tADSRT_setRelease+0x24>
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
    9194:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->release = release;
    9198:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
    919c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
    91a0:	4770      	bx	lr
    91a2:	bf00      	nop
    91a4:	3c23d70a 	.word	0x3c23d70a
    91a8:	f3af 8000 	nop.w
    91ac:	f3af 8000 	nop.w
    91b0:	f3af 8000 	nop.w
    91b4:	f3af 8000 	nop.w
    91b8:	f3af 8000 	nop.w
    91bc:	f3af 8000 	nop.w

000091c0 <tADSRT_setLeakFactor>:
{
    91c0:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
    91c2:	6804      	ldr	r4, [r0, #0]
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
    91c4:	eddf 7a06 	vldr	s15, [pc, #24]	; 91e0 <tADSRT_setLeakFactor+0x20>
    91c8:	edd4 0a1a 	vldr	s1, [r4, #104]	; 0x68
    adsr->baseLeakFactor = leakFactor;
    91cc:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
    91d0:	ee60 0aa7 	vmul.f32	s1, s1, s15
    91d4:	f001 ff58 	bl	b088 <__powf_veneer>
    91d8:	ed84 0a19 	vstr	s0, [r4, #100]	; 0x64
}
    91dc:	bd10      	pop	{r4, pc}
    91de:	bf00      	nop
    91e0:	472c4400 	.word	0x472c4400
    91e4:	f3af 8000 	nop.w
    91e8:	f3af 8000 	nop.w
    91ec:	f3af 8000 	nop.w
    91f0:	f3af 8000 	nop.w
    91f4:	f3af 8000 	nop.w
    91f8:	f3af 8000 	nop.w
    91fc:	f3af 8000 	nop.w

00009200 <tADSRT_on>:
    _tADSRT* adsr = *adsrenv;
    9200:	6803      	ldr	r3, [r0, #0]
    if (adsr->whichStage != env_idle) // In case ADSR retriggered while it is still happening.
    9202:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    9204:	b162      	cbz	r2, 9220 <tADSRT_on+0x20>
        adsr->rampPhase = 0;
    9206:	2000      	movs	r0, #0
        adsr->rampPeak = adsr->next;
    9208:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_ramp;
    920a:	2105      	movs	r1, #5
        adsr->rampPhase = 0;
    920c:	65d8      	str	r0, [r3, #92]	; 0x5c
        adsr->rampPeak = adsr->next;
    920e:	649a      	str	r2, [r3, #72]	; 0x48
    adsr->attackPhase = 0;
    9210:	2200      	movs	r2, #0
    9212:	63d9      	str	r1, [r3, #60]	; 0x3c
    adsr->gain = velocity;
    9214:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    adsr->attackPhase = 0;
    9218:	651a      	str	r2, [r3, #80]	; 0x50
    adsr->decayPhase = 0;
    921a:	655a      	str	r2, [r3, #84]	; 0x54
    adsr->releasePhase = 0;
    921c:	659a      	str	r2, [r3, #88]	; 0x58
}
    921e:	4770      	bx	lr
        adsr->whichStage = env_attack;
    9220:	2101      	movs	r1, #1
    9222:	e7f5      	b.n	9210 <tADSRT_on+0x10>
    9224:	f3af 8000 	nop.w
    9228:	f3af 8000 	nop.w
    922c:	f3af 8000 	nop.w
    9230:	f3af 8000 	nop.w
    9234:	f3af 8000 	nop.w
    9238:	f3af 8000 	nop.w
    923c:	f3af 8000 	nop.w

00009240 <tADSRT_off>:
    _tADSRT* adsr = *adsrenv;
    9240:	6803      	ldr	r3, [r0, #0]
    if (adsr->whichStage == env_idle)
    9242:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    9244:	b11a      	cbz	r2, 924e <tADSRT_off+0xe>
        adsr->whichStage = env_release;
    9246:	2104      	movs	r1, #4
        adsr->releasePeak = adsr->next;
    9248:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_release;
    924a:	63d9      	str	r1, [r3, #60]	; 0x3c
        adsr->releasePeak = adsr->next;
    924c:	64da      	str	r2, [r3, #76]	; 0x4c
}
    924e:	4770      	bx	lr
    9250:	f3af 8000 	nop.w
    9254:	f3af 8000 	nop.w
    9258:	f3af 8000 	nop.w
    925c:	f3af 8000 	nop.w

00009260 <tADSRT_clear>:
    _tADSRT* adsr = *adsrenv;
    9260:	6803      	ldr	r3, [r0, #0]
    adsr->whichStage = env_idle;
    9262:	2100      	movs	r1, #0
    adsr->next = 0.0f;
    9264:	2200      	movs	r2, #0
    adsr->whichStage = env_idle;
    9266:	63d9      	str	r1, [r3, #60]	; 0x3c
    adsr->next = 0.0f;
    9268:	619a      	str	r2, [r3, #24]
}
    926a:	4770      	bx	lr
    926c:	f3af 8000 	nop.w
    9270:	f3af 8000 	nop.w
    9274:	f3af 8000 	nop.w
    9278:	f3af 8000 	nop.w
    927c:	f3af 8000 	nop.w

00009280 <tADSRT_tick>:
{
    9280:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
    9282:	6804      	ldr	r4, [r0, #0]
{
    9284:	ed2d 8b02 	vpush	{d8}
    switch (adsr->whichStage)
    9288:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    928a:	3b01      	subs	r3, #1
    928c:	2b04      	cmp	r3, #4
    928e:	f200 8154 	bhi.w	953a <tADSRT_tick+0x2ba>
    9292:	e8df f003 	tbb	[pc, r3]
    9296:	4d1f      	.short	0x4d1f
    9298:	6f3a      	.short	0x6f3a
    929a:	03          	.byte	0x03
    929b:	00          	.byte	0x00
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
    929c:	edd4 7a03 	vldr	s15, [r4, #12]
    92a0:	ed94 1a17 	vldr	s2, [r4, #92]	; 0x5c
    92a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
    92a8:	eeb4 1ae7 	vcmpe.f32	s2, s15
    92ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    92b0:	dd7d      	ble.n	93ae <tADSRT_tick+0x12e>
                adsr->next = 0.0f;
    92b2:	eddf 7aa3 	vldr	s15, [pc, #652]	; 9540 <tADSRT_tick+0x2c0>
                adsr->whichStage = env_attack;
    92b6:	2301      	movs	r3, #1
    92b8:	eeb0 0a67 	vmov.f32	s0, s15
    92bc:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = 0.0f;
    92be:	edc4 7a06 	vstr	s15, [r4, #24]
            adsr->rampPhase += adsr->rampInc;
    92c2:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
    92c6:	ee77 7a81 	vadd.f32	s15, s15, s2
    92ca:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
}
    92ce:	ecbd 8b02 	vpop	{d8}
    92d2:	bd10      	pop	{r4, pc}
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
    92d4:	edd4 7a03 	vldr	s15, [r4, #12]
    92d8:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
    92dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
    92e0:	eeb4 1ae7 	vcmpe.f32	s2, s15
    92e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    92e8:	f340 808b 	ble.w	9402 <tADSRT_tick+0x182>
                adsr->whichStage = env_decay;
    92ec:	2302      	movs	r3, #2
                adsr->next = adsr->gain;
    92ee:	ed94 0a11 	vldr	s0, [r4, #68]	; 0x44
                adsr->whichStage = env_decay;
    92f2:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = adsr->gain;
    92f4:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->attackPhase += adsr->attackInc;
    92f8:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
    92fc:	ee77 7a81 	vadd.f32	s15, s15, s2
    9300:	edc4 7a14 	vstr	s15, [r4, #80]	; 0x50
}
    9304:	ecbd 8b02 	vpop	{d8}
    9308:	bd10      	pop	{r4, pc}
        	 adsr->next = adsr->sustain * adsr->gain * (adsr->leakFactor * adsr->sustainWithLeak);
    930a:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
    930e:	edd4 6a11 	vldr	s13, [r4, #68]	; 0x44
    9312:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
    9316:	ee20 0a26 	vmul.f32	s0, s0, s13
    931a:	edd4 7a07 	vldr	s15, [r4, #28]
    931e:	ee20 0a07 	vmul.f32	s0, s0, s14
    9322:	ee20 0a27 	vmul.f32	s0, s0, s15
    9326:	ed84 0a06 	vstr	s0, [r4, #24]
}
    932a:	ecbd 8b02 	vpop	{d8}
    932e:	bd10      	pop	{r4, pc}
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
    9330:	edd4 7a03 	vldr	s15, [r4, #12]
    9334:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
    9338:	eef8 7a67 	vcvt.f32.u32	s15, s15
    933c:	eeb4 1ae7 	vcmpe.f32	s2, s15
    9340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9344:	f340 808b 	ble.w	945e <tADSRT_tick+0x1de>
                adsr->next = adsr->gain * adsr->sustain;
    9348:	ed94 0a11 	vldr	s0, [r4, #68]	; 0x44
                adsr->sustainWithLeak = 1.0f;
    934c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
                adsr->next = adsr->gain * adsr->sustain;
    9350:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
                adsr->whichStage = env_sustain;
    9354:	2203      	movs	r2, #3
                adsr->sustainWithLeak = 1.0f;
    9356:	61e3      	str	r3, [r4, #28]
                adsr->next = adsr->gain * adsr->sustain;
    9358:	ee20 0a27 	vmul.f32	s0, s0, s15
                adsr->whichStage = env_sustain;
    935c:	63e2      	str	r2, [r4, #60]	; 0x3c
                adsr->next = adsr->gain * adsr->sustain;
    935e:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->decayPhase += adsr->decayInc;
    9362:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
    9366:	ee77 7a81 	vadd.f32	s15, s15, s2
    936a:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
}
    936e:	ecbd 8b02 	vpop	{d8}
    9372:	bd10      	pop	{r4, pc}
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
    9374:	edd4 7a03 	vldr	s15, [r4, #12]
    9378:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
    937c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    9380:	eeb4 1ae7 	vcmpe.f32	s2, s15
    9384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9388:	f340 809e 	ble.w	94c8 <tADSRT_tick+0x248>
                adsr->next = 0.0f;
    938c:	eddf 7a6c 	vldr	s15, [pc, #432]	; 9540 <tADSRT_tick+0x2c0>
                adsr->whichStage = env_idle;
    9390:	2300      	movs	r3, #0
    9392:	eeb0 0a67 	vmov.f32	s0, s15
    9396:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = 0.0f;
    9398:	edc4 7a06 	vstr	s15, [r4, #24]
            adsr->releasePhase += adsr->releaseInc;
    939c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    93a0:	ee77 7a81 	vadd.f32	s15, s15, s2
    93a4:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58
}
    93a8:	ecbd 8b02 	vpop	{d8}
    93ac:	bd10      	pop	{r4, pc}
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
    93ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->rampPhase;
    93b2:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
    93b6:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->rampPhase - intPart;
    93ba:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
    93be:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->rampPhase - intPart;
    93c2:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
    93c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    93ca:	f100 80b2 	bmi.w	9532 <tADSRT_tick+0x2b2>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
    93ce:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    93d2:	6862      	ldr	r2, [r4, #4]
    93d4:	ee17 3a90 	vmov	r3, s15
    93d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    93dc:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
    93e0:	ee16 3a90 	vmov	r3, s13
    93e4:	ed94 8a12 	vldr	s16, [r4, #72]	; 0x48
    93e8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    93ec:	ed92 0a00 	vldr	s0, [r2]
    93f0:	f001 fde2 	bl	afb8 <__LEAF_interpolation_linear_veneer>
    93f4:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->rampPhase += adsr->rampInc;
    93f8:	ed94 1a17 	vldr	s2, [r4, #92]	; 0x5c
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
    93fc:	ed84 0a06 	vstr	s0, [r4, #24]
    9400:	e75f      	b.n	92c2 <tADSRT_tick+0x42>
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
    9402:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->attackPhase;
    9406:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
    940a:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->attackPhase - intPart;
    940e:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
    9412:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->attackPhase - intPart;
    9416:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
    941a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    941e:	f100 8084 	bmi.w	952a <tADSRT_tick+0x2aa>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->attackPhase)+1)];
    9422:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    9426:	6862      	ldr	r2, [r4, #4]
    9428:	ee17 3a90 	vmov	r3, s15
    942c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9430:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // inverted and backwards to get proper rising exponential shape/perception
    9434:	ee16 3a90 	vmov	r3, s13
    9438:	ed94 8a11 	vldr	s16, [r4, #68]	; 0x44
    943c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    9440:	ed92 0a00 	vldr	s0, [r2]
    9444:	f001 fdb8 	bl	afb8 <__LEAF_interpolation_linear_veneer>
    9448:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            adsr->attackPhase += adsr->attackInc;
    944c:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // inverted and backwards to get proper rising exponential shape/perception
    9450:	ee37 0ac0 	vsub.f32	s0, s15, s0
    9454:	ee20 0a08 	vmul.f32	s0, s0, s16
    9458:	ed84 0a06 	vstr	s0, [r4, #24]
    945c:	e74c      	b.n	92f8 <tADSRT_tick+0x78>
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
    945e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->decayPhase;
    9462:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
    9466:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->decayPhase - intPart;
    946a:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
    946e:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->decayPhase - intPart;
    9472:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
    9476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    947a:	d452      	bmi.n	9522 <tADSRT_tick+0x2a2>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->decayPhase)+1)];
    947c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    9480:	6862      	ldr	r2, [r4, #4]
    9482:	ee17 3a90 	vmov	r3, s15
    9486:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    948a:	edd3 0a00 	vldr	s1, [r3]
                Lfloat interpValue = (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart));
    948e:	ee16 3a90 	vmov	r3, s13
    9492:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    9496:	ed92 0a00 	vldr	s0, [r2]
    949a:	f001 fd8d 	bl	afb8 <__LEAF_interpolation_linear_veneer>
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
    949e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    94a2:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
    94a6:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
    94aa:	ee76 6ac7 	vsub.f32	s13, s13, s14
    94ae:	ed94 6a19 	vldr	s12, [r4, #100]	; 0x64
            adsr->decayPhase += adsr->decayInc;
    94b2:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
    94b6:	ee67 7a86 	vmul.f32	s15, s15, s12
    94ba:	eea6 7a80 	vfma.f32	s14, s13, s0
    94be:	ee27 0a87 	vmul.f32	s0, s15, s14
    94c2:	ed84 0a06 	vstr	s0, [r4, #24]
    94c6:	e74c      	b.n	9362 <tADSRT_tick+0xe2>
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
    94c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->releasePhase;
    94cc:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
    94d0:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->releasePhase - intPart;
    94d4:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
    94d8:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->releasePhase - intPart;
    94dc:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
    94e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    94e4:	d419      	bmi.n	951a <tADSRT_tick+0x29a>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->releasePhase)+1)];
    94e6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    94ea:	6862      	ldr	r2, [r4, #4]
    94ec:	ee17 3a90 	vmov	r3, s15
    94f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    94f4:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // do interpolation !
    94f8:	ee16 3a90 	vmov	r3, s13
    94fc:	ed94 8a13 	vldr	s16, [r4, #76]	; 0x4c
    9500:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    9504:	ed92 0a00 	vldr	s0, [r2]
    9508:	f001 fd56 	bl	afb8 <__LEAF_interpolation_linear_veneer>
    950c:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->releasePhase += adsr->releaseInc;
    9510:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // do interpolation !
    9514:	ed84 0a06 	vstr	s0, [r4, #24]
    9518:	e740      	b.n	939c <tADSRT_tick+0x11c>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
    951a:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
    951c:	eddf 0a08 	vldr	s1, [pc, #32]	; 9540 <tADSRT_tick+0x2c0>
    9520:	e7ea      	b.n	94f8 <tADSRT_tick+0x278>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
    9522:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
    9524:	eddf 0a06 	vldr	s1, [pc, #24]	; 9540 <tADSRT_tick+0x2c0>
    9528:	e7b1      	b.n	948e <tADSRT_tick+0x20e>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
    952a:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
    952c:	eddf 0a04 	vldr	s1, [pc, #16]	; 9540 <tADSRT_tick+0x2c0>
    9530:	e780      	b.n	9434 <tADSRT_tick+0x1b4>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
    9532:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
    9534:	eddf 0a02 	vldr	s1, [pc, #8]	; 9540 <tADSRT_tick+0x2c0>
    9538:	e752      	b.n	93e0 <tADSRT_tick+0x160>
    return adsr->next;
    953a:	ed94 0a06 	vldr	s0, [r4, #24]
    953e:	e6c6      	b.n	92ce <tADSRT_tick+0x4e>
    9540:	00000000 	.word	0x00000000
    9544:	f3af 8000 	nop.w
    9548:	f3af 8000 	nop.w
    954c:	f3af 8000 	nop.w
    9550:	f3af 8000 	nop.w
    9554:	f3af 8000 	nop.w
    9558:	f3af 8000 	nop.w
    955c:	f3af 8000 	nop.w

00009560 <tADSRT_tickNoInterp>:
    _tADSRT* adsr = *adsrenv;
    9560:	6803      	ldr	r3, [r0, #0]
    switch (adsr->whichStage)
    9562:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    9564:	3a01      	subs	r2, #1
    9566:	2a04      	cmp	r2, #4
    9568:	f200 80c7 	bhi.w	96fa <tADSRT_tickNoInterp+0x19a>
    956c:	e8df f002 	tbb	[pc, r2]
    9570:	6533461b 	.word	0x6533461b
    9574:	03          	.byte	0x03
    9575:	00          	.byte	0x00
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
    9576:	edd3 7a03 	vldr	s15, [r3, #12]
    957a:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
    957e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    9582:	eeb4 7ae7 	vcmpe.f32	s14, s15
    9586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    958a:	dd6e      	ble.n	966a <tADSRT_tickNoInterp+0x10a>
                adsr->whichStage = env_attack;
    958c:	2201      	movs	r2, #1
                adsr->next = 0.0f;
    958e:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 9700 <tADSRT_tickNoInterp+0x1a0>
                adsr->whichStage = env_attack;
    9592:	63da      	str	r2, [r3, #60]	; 0x3c
            adsr->rampPhase += adsr->rampInc;
    9594:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
    9598:	ed83 0a06 	vstr	s0, [r3, #24]
    959c:	ee77 7a87 	vadd.f32	s15, s15, s14
    95a0:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
            break;
    95a4:	4770      	bx	lr
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
    95a6:	edd3 7a03 	vldr	s15, [r3, #12]
    95aa:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
    95ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
    95b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
    95b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    95ba:	dd64      	ble.n	9686 <tADSRT_tickNoInterp+0x126>
                adsr->whichStage = env_decay;
    95bc:	2202      	movs	r2, #2
                adsr->next = adsr->gain;
    95be:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
                adsr->whichStage = env_decay;
    95c2:	63da      	str	r2, [r3, #60]	; 0x3c
            adsr->attackPhase += adsr->attackInc;
    95c4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
    95c8:	ed83 0a06 	vstr	s0, [r3, #24]
    95cc:	ee77 7a87 	vadd.f32	s15, s15, s14
    95d0:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            break;
    95d4:	4770      	bx	lr
            adsr->sustainWithLeak *= adsr->leakFactor;
    95d6:	edd3 7a07 	vldr	s15, [r3, #28]
    95da:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
    95de:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
    95e2:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
            adsr->sustainWithLeak *= adsr->leakFactor;
    95e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
    95ea:	ee20 0a07 	vmul.f32	s0, s0, s14
            adsr->sustainWithLeak *= adsr->leakFactor;
    95ee:	edc3 7a07 	vstr	s15, [r3, #28]
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
    95f2:	ee20 0a27 	vmul.f32	s0, s0, s15
    95f6:	ed83 0a06 	vstr	s0, [r3, #24]
            break;
    95fa:	4770      	bx	lr
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
    95fc:	edd3 7a03 	vldr	s15, [r3, #12]
    9600:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
    9604:	eef8 7a67 	vcvt.f32.u32	s15, s15
    9608:	eeb4 7ae7 	vcmpe.f32	s14, s15
    960c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9610:	dd4b      	ble.n	96aa <tADSRT_tickNoInterp+0x14a>
                adsr->next = adsr->gain * adsr->sustain;
    9612:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
                adsr->sustainWithLeak = 1.0f;
    9616:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
                adsr->next = adsr->gain * adsr->sustain;
    961a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
                adsr->whichStage = env_sustain;
    961e:	2103      	movs	r1, #3
                adsr->sustainWithLeak = 1.0f;
    9620:	61da      	str	r2, [r3, #28]
                adsr->next = adsr->gain * adsr->sustain;
    9622:	ee20 0a27 	vmul.f32	s0, s0, s15
                adsr->whichStage = env_sustain;
    9626:	63d9      	str	r1, [r3, #60]	; 0x3c
            adsr->decayPhase += adsr->decayInc;
    9628:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
    962c:	ed83 0a06 	vstr	s0, [r3, #24]
    9630:	ee77 7a87 	vadd.f32	s15, s15, s14
    9634:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
            break;
    9638:	4770      	bx	lr
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
    963a:	edd3 7a03 	vldr	s15, [r3, #12]
    963e:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
    9642:	eef8 7a67 	vcvt.f32.u32	s15, s15
    9646:	eeb4 7ae7 	vcmpe.f32	s14, s15
    964a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    964e:	dd46      	ble.n	96de <tADSRT_tickNoInterp+0x17e>
                adsr->whichStage = env_idle;
    9650:	2200      	movs	r2, #0
                adsr->next = 0.0f;
    9652:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 9700 <tADSRT_tickNoInterp+0x1a0>
                adsr->whichStage = env_idle;
    9656:	63da      	str	r2, [r3, #60]	; 0x3c
            adsr->releasePhase += adsr->releaseInc;
    9658:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    965c:	ed83 0a06 	vstr	s0, [r3, #24]
    9660:	ee77 7a87 	vadd.f32	s15, s15, s14
    9664:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
}
    9668:	4770      	bx	lr
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
    966a:	eefc 6ac7 	vcvt.u32.f32	s13, s14
    966e:	685a      	ldr	r2, [r3, #4]
    9670:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
    9674:	ee16 1a90 	vmov	r1, s13
    9678:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    967c:	ed92 0a00 	vldr	s0, [r2]
    9680:	ee20 0a27 	vmul.f32	s0, s0, s15
    9684:	e786      	b.n	9594 <tADSRT_tickNoInterp+0x34>
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
    9686:	eefc 6ac7 	vcvt.u32.f32	s13, s14
    968a:	685a      	ldr	r2, [r3, #4]
    968c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    9690:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
    9694:	ee16 1a90 	vmov	r1, s13
    9698:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    969c:	edd2 6a00 	vldr	s13, [r2]
    96a0:	ee30 0a66 	vsub.f32	s0, s0, s13
    96a4:	ee20 0a27 	vmul.f32	s0, s0, s15
    96a8:	e78c      	b.n	95c4 <tADSRT_tickNoInterp+0x64>
                adsr->next = (adsr->gain * (adsr->sustain + (adsr->exp_buff[(uint32_t)adsr->decayPhase] * (1.0f - adsr->sustain)))) * adsr->leakFactor;
    96aa:	eefc 5ac7 	vcvt.u32.f32	s11, s14
    96ae:	685a      	ldr	r2, [r3, #4]
    96b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    96b4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
    96b8:	ed93 6a19 	vldr	s12, [r3, #100]	; 0x64
    96bc:	ee15 1a90 	vmov	r1, s11
    96c0:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
    96c4:	ee76 6ae7 	vsub.f32	s13, s13, s15
    96c8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    96cc:	ee20 0a06 	vmul.f32	s0, s0, s12
    96d0:	ed92 6a00 	vldr	s12, [r2]
    96d4:	eee6 7a26 	vfma.f32	s15, s12, s13
    96d8:	ee20 0a27 	vmul.f32	s0, s0, s15
    96dc:	e7a4      	b.n	9628 <tADSRT_tickNoInterp+0xc8>
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
    96de:	eefc 6ac7 	vcvt.u32.f32	s13, s14
    96e2:	685a      	ldr	r2, [r3, #4]
    96e4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
    96e8:	ee16 1a90 	vmov	r1, s13
    96ec:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    96f0:	ed92 0a00 	vldr	s0, [r2]
    96f4:	ee20 0a27 	vmul.f32	s0, s0, s15
    96f8:	e7ae      	b.n	9658 <tADSRT_tickNoInterp+0xf8>
    return adsr->next;
    96fa:	ed93 0a06 	vldr	s0, [r3, #24]
    96fe:	4770      	bx	lr
    9700:	00000000 	.word	0x00000000
    9704:	f3af 8000 	nop.w
    9708:	f3af 8000 	nop.w
    970c:	f3af 8000 	nop.w
    9710:	f3af 8000 	nop.w
    9714:	f3af 8000 	nop.w
    9718:	f3af 8000 	nop.w
    971c:	f3af 8000 	nop.w

00009720 <tADSRT_setSampleRate>:
{
    9720:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
    9722:	6804      	ldr	r4, [r0, #0]
{
    9724:	eeb0 7a40 	vmov.f32	s14, s0
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
    9728:	eddf 7a1b 	vldr	s15, [pc, #108]	; 9798 <tADSRT_setSampleRate+0x78>
    adsr->invSampleRate = 1.0f/sr;
    972c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
    9730:	edd4 6a02 	vldr	s13, [r4, #8]
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
    9734:	eeb4 6a00 	vmov.f32	s12, #64	; 0x3e000000  0.125
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / adsr->attack;
    9738:	ed94 4a08 	vldr	s8, [r4, #32]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
    973c:	eef8 6a66 	vcvt.f32.u32	s13, s13
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / adsr->decay;
    9740:	edd4 4a09 	vldr	s9, [r4, #36]	; 0x24
    adsr->invSampleRate = 1.0f/sr;
    9744:	eec3 5a80 	vdiv.f32	s11, s7, s0
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / adsr->release;
    9748:	ed94 5a0a 	vldr	s10, [r4, #40]	; 0x28
    adsr->leakFactor = powf(adsr->baseLeakFactor, 44100.0f * adsr->invSampleRate);
    974c:	eddf 0a13 	vldr	s1, [pc, #76]	; 979c <tADSRT_setSampleRate+0x7c>
    adsr->sampleRate = sr;
    9750:	ed84 7a04 	vstr	s14, [r4, #16]
    adsr->leakFactor = powf(adsr->baseLeakFactor, 44100.0f * adsr->invSampleRate);
    9754:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
    9758:	ee66 6aa7 	vmul.f32	s13, s13, s15
    975c:	eec6 7a87 	vdiv.f32	s15, s13, s14
    adsr->leakFactor = powf(adsr->baseLeakFactor, 44100.0f * adsr->invSampleRate);
    9760:	ee65 0aa0 	vmul.f32	s1, s11, s1
    adsr->invSampleRate = 1.0f/sr;
    9764:	edc4 5a1a 	vstr	s11, [r4, #104]	; 0x68
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / adsr->decay;
    9768:	eec7 6aa4 	vdiv.f32	s13, s15, s9
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
    976c:	edc4 7a05 	vstr	s15, [r4, #20]
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / adsr->attack;
    9770:	eec7 5a84 	vdiv.f32	s11, s15, s8
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / adsr->release;
    9774:	ee87 7a85 	vdiv.f32	s14, s15, s10
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
    9778:	ee27 6a86 	vmul.f32	s12, s15, s12
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / adsr->decay;
    977c:	edc4 6a0c 	vstr	s13, [r4, #48]	; 0x30
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
    9780:	ed84 6a0e 	vstr	s12, [r4, #56]	; 0x38
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / adsr->attack;
    9784:	edc4 5a0b 	vstr	s11, [r4, #44]	; 0x2c
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / adsr->release;
    9788:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
    adsr->leakFactor = powf(adsr->baseLeakFactor, 44100.0f * adsr->invSampleRate);
    978c:	f001 fc7c 	bl	b088 <__powf_veneer>
    9790:	ed84 0a19 	vstr	s0, [r4, #100]	; 0x64
}
    9794:	bd10      	pop	{r4, pc}
    9796:	bf00      	nop
    9798:	4479ffff 	.word	0x4479ffff
    979c:	472c4400 	.word	0x472c4400

000097a0 <place_step_dd>:
#endif
{
	Lfloat r;
	long i;

	r = MINBLEP_PHASES * phase / w;
    97a0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 980c <place_step_dd+0x6c>
	i = lrintf(r - 0.5f);
    97a4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	r = MINBLEP_PHASES * phase / w;
    97a8:	ee20 0a07 	vmul.f32	s0, s0, s14
{
    97ac:	b538      	push	{r3, r4, r5, lr}
    97ae:	ed2d 8b02 	vpush	{d8}
	r = MINBLEP_PHASES * phase / w;
    97b2:	ee80 8a20 	vdiv.f32	s16, s0, s1
{
    97b6:	460d      	mov	r5, r1
    97b8:	4604      	mov	r4, r0
    97ba:	eef0 8a41 	vmov.f32	s17, s2
	i = lrintf(r - 0.5f);
    97be:	ee38 0a67 	vsub.f32	s0, s16, s15
    97c2:	f001 fc89 	bl	b0d8 <__lrintf_veneer>
	r -= (Lfloat)i;
    97c6:	ee07 0a90 	vmov	s15, r0
    97ca:	eb04 0285 	add.w	r2, r4, r5, lsl #2
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    97ce:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (Lfloat)i;
    97d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    97d6:	4b0e      	ldr	r3, [pc, #56]	; (9810 <place_step_dd+0x70>)
    97d8:	f502 7190 	add.w	r1, r2, #288	; 0x120
    97dc:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    97e0:	ee38 6a67 	vsub.f32	s12, s16, s15

	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
		buffer[index] += scale * (step_dd_table[i].value + r * step_dd_table[i].delta);
    97e4:	edd3 6a01 	vldr	s13, [r3, #4]
    97e8:	ed93 7a00 	vldr	s14, [r3]
	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
    97ec:	f503 7300 	add.w	r3, r3, #512	; 0x200
		buffer[index] += scale * (step_dd_table[i].value + r * step_dd_table[i].delta);
    97f0:	edd2 7a00 	vldr	s15, [r2]
    97f4:	eea6 7a86 	vfma.f32	s14, s13, s12
    97f8:	eee7 7a28 	vfma.f32	s15, s14, s17
    97fc:	ece2 7a01 	vstmia	r2!, {s15}
	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
    9800:	4291      	cmp	r1, r2
    9802:	d1ef      	bne.n	97e4 <place_step_dd+0x44>
		i += MINBLEP_PHASES;
		index++;
	}
}
    9804:	ecbd 8b02 	vpop	{d8}
    9808:	bd38      	pop	{r3, r4, r5, pc}
    980a:	bf00      	nop
    980c:	42800000 	.word	0x42800000
    9810:	24028d4c 	.word	0x24028d4c
    9814:	f3af 8000 	nop.w
    9818:	f3af 8000 	nop.w
    981c:	f3af 8000 	nop.w

00009820 <place_slope_dd>:
#endif
{
	Lfloat r;
	long i;

	r = MINBLEP_PHASES * phase / w;
    9820:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 9898 <place_slope_dd+0x78>
	i = lrintf(r - 0.5f);
    9824:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	r = MINBLEP_PHASES * phase / w;
    9828:	ee20 0a07 	vmul.f32	s0, s0, s14
{
    982c:	b538      	push	{r3, r4, r5, lr}
    982e:	ed2d 8b04 	vpush	{d8-d9}
	r = MINBLEP_PHASES * phase / w;
    9832:	eec0 8a20 	vdiv.f32	s17, s0, s1
{
    9836:	460d      	mov	r5, r1
    9838:	4604      	mov	r4, r0
    983a:	eeb0 8a60 	vmov.f32	s16, s1
    983e:	eeb0 9a41 	vmov.f32	s18, s2
	i = lrintf(r - 0.5f);
    9842:	ee38 0ae7 	vsub.f32	s0, s17, s15
    9846:	f001 fc47 	bl	b0d8 <__lrintf_veneer>
	r -= (Lfloat)i;
    984a:	ee07 0a90 	vmov	s15, r0
    984e:	eb04 0285 	add.w	r2, r4, r5, lsl #2
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    9852:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (Lfloat)i;
    9856:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    985a:	4b10      	ldr	r3, [pc, #64]	; (989c <place_slope_dd+0x7c>)

	slope_delta *= w;
    985c:	ee68 0a09 	vmul.f32	s1, s16, s18
    9860:	f502 718e 	add.w	r1, r2, #284	; 0x11c
    9864:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	r -= (Lfloat)i;
    9868:	ee38 6ae7 	vsub.f32	s12, s17, s15

	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
		buffer[index] += slope_delta * (slope_dd_table[i] + r * (slope_dd_table[i + 1] - slope_dd_table[i]));
    986c:	edd3 7a00 	vldr	s15, [r3]
	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
    9870:	f503 7380 	add.w	r3, r3, #256	; 0x100
		buffer[index] += slope_delta * (slope_dd_table[i] + r * (slope_dd_table[i + 1] - slope_dd_table[i]));
    9874:	ed53 6a3f 	vldr	s13, [r3, #-252]	; 0xffffff04
    9878:	ed92 7a00 	vldr	s14, [r2]
    987c:	ee76 6ae7 	vsub.f32	s13, s13, s15
    9880:	eee6 7a86 	vfma.f32	s15, s13, s12
    9884:	eea7 7aa0 	vfma.f32	s14, s15, s1
    9888:	eca2 7a01 	vstmia	r2!, {s14}
	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
    988c:	4291      	cmp	r1, r2
    988e:	d1ed      	bne.n	986c <place_slope_dd+0x4c>
		i += MINBLEP_PHASES;
		index++;
	}
}
    9890:	ecbd 8b04 	vpop	{d8-d9}
    9894:	bd38      	pop	{r3, r4, r5, pc}
    9896:	bf00      	nop
    9898:	42800000 	.word	0x42800000
    989c:	24024648 	.word	0x24024648

000098a0 <LEAF_clip>:
    if (val < min)
    98a0:	eef4 0ac0 	vcmpe.f32	s1, s0
    98a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    98a8:	d401      	bmi.n	98ae <LEAF_clip+0xe>
    else if (val > max)
    98aa:	fe80 0ac1 	vminnm.f32	s0, s1, s2
}
    98ae:	4770      	bx	lr
	...

000098c0 <tPBSineTriangle_tick>:
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
    98c0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
    98c4:	b510      	push	{r4, lr}
    98c6:	ed2d 8b06 	vpush	{d8-d10}
    _tPBSineTriangle* c = *osc;
    98ca:	6804      	ldr	r4, [r0, #0]
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
    98cc:	eeb0 9a00 	vmov.f32	s18, #0	; 0x40000000  2.0
    98d0:	eeb0 7a67 	vmov.f32	s14, s15
{
    98d4:	b082      	sub	sp, #8
    Lfloat t = c->phase;
    98d6:	edd4 9a01 	vldr	s19, [r4, #4]
    v += LEAF_poly_blamp(1.0f - t,  dt);
    98da:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    98de:	edd4 0a02 	vldr	s1, [r4, #8]
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
    98e2:	eea9 7a89 	vfma.f32	s14, s19, s18
    98e6:	eef0 0ae0 	vabs.f32	s1, s1
    v += LEAF_poly_blamp(t,  dt);
    98ea:	eeb0 0a69 	vmov.f32	s0, s19
    98ee:	eef1 0a60 	vneg.f32	s1, s1
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
    98f2:	eeb0 7ac7 	vabs.f32	s14, s14
    v += LEAF_poly_blamp(t,  dt);
    98f6:	edcd 0a01 	vstr	s1, [sp, #4]
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
    98fa:	eee7 7a09 	vfma.f32	s15, s14, s18
    98fe:	eeb0 8a67 	vmov.f32	s16, s15
    v += LEAF_poly_blamp(t,  dt);
    9902:	f001 faf1 	bl	aee8 <__LEAF_poly_blamp_veneer>
    9906:	eef0 7a40 	vmov.f32	s15, s0
    v += LEAF_poly_blamp(1.0f - t,  dt);
    990a:	eddd 0a01 	vldr	s1, [sp, #4]
    990e:	ee38 0ae9 	vsub.f32	s0, s17, s19
    v += LEAF_poly_blamp(t,  dt);
    9912:	ee38 8a27 	vadd.f32	s16, s16, s15
    v += LEAF_poly_blamp(1.0f - t,  dt);
    9916:	f001 fae7 	bl	aee8 <__LEAF_poly_blamp_veneer>
    t += 0.5f;
    991a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    v -= LEAF_poly_blamp(t, dt);
    991e:	eddd 0a01 	vldr	s1, [sp, #4]
    v += LEAF_poly_blamp(1.0f - t,  dt);
    9922:	ee38 8a00 	vadd.f32	s16, s16, s0
    t += 0.5f;
    9926:	ee79 9aa7 	vadd.f32	s19, s19, s15
    t -= (int)(t);
    992a:	eebd aae9 	vcvt.s32.f32	s20, s19
    992e:	eeb8 aaca 	vcvt.f32.s32	s20, s20
    v -= LEAF_poly_blamp(t, dt);
    9932:	ee39 0aca 	vsub.f32	s0, s19, s20
    v -= LEAF_poly_blamp(1.0f - t,  dt);
    9936:	ee78 9ae9 	vsub.f32	s19, s17, s19
    v -= LEAF_poly_blamp(t, dt);
    993a:	f001 fad5 	bl	aee8 <__LEAF_poly_blamp_veneer>
    v -= LEAF_poly_blamp(1.0f - t,  dt);
    993e:	eddd 0a01 	vldr	s1, [sp, #4]
    v -= LEAF_poly_blamp(t, dt);
    9942:	ee38 8a40 	vsub.f32	s16, s16, s0
    v -= LEAF_poly_blamp(1.0f - t,  dt);
    9946:	ee39 0a8a 	vadd.f32	s0, s19, s20
    994a:	f001 facd 	bl	aee8 <__LEAF_poly_blamp_veneer>
    c->phase += c->inc - (int)c->inc;
    994e:	edd4 7a02 	vldr	s15, [r4, #8]
    9952:	edd4 6a01 	vldr	s13, [r4, #4]
    v -= LEAF_poly_blamp(1.0f - t,  dt);
    9956:	ee38 8a40 	vsub.f32	s16, s16, s0
    c->phase += c->inc - (int)c->inc;
    995a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    995e:	ee77 7aa6 	vadd.f32	s15, s15, s13
    9962:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    9966:	ee77 7ac7 	vsub.f32	s15, s15, s14
    while (c->phase >= 1.0f) c->phase -= 1.0f;
    996a:	eef4 7ae8 	vcmpe.f32	s15, s17
    c->phase += c->inc - (int)c->inc;
    996e:	edc4 7a01 	vstr	s15, [r4, #4]
    while (c->phase >= 1.0f) c->phase -= 1.0f;
    9972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9976:	db0a      	blt.n	998e <tPBSineTriangle_tick+0xce>
    9978:	eeb0 7a67 	vmov.f32	s14, s15
    997c:	ee77 7ae8 	vsub.f32	s15, s15, s17
    9980:	eeb4 7ac9 	vcmpe.f32	s14, s18
    9984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9988:	daf6      	bge.n	9978 <tPBSineTriangle_tick+0xb8>
    998a:	edc4 7a01 	vstr	s15, [r4, #4]
    while (c->phase < 0.0f) c->phase += 1.0f;
    998e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    9992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9996:	d50e      	bpl.n	99b6 <tPBSineTriangle_tick+0xf6>
    9998:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    999c:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    99a0:	eeb0 7a67 	vmov.f32	s14, s15
    99a4:	ee77 7a86 	vadd.f32	s15, s15, s12
    99a8:	eeb4 7ae6 	vcmpe.f32	s14, s13
    99ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    99b0:	d4f6      	bmi.n	99a0 <tPBSineTriangle_tick+0xe0>
    99b2:	edc4 7a01 	vstr	s15, [r4, #4]
    _tCycle* c = *cy;
    99b6:	69e0      	ldr	r0, [r4, #28]
    out = v * c->shape; // shape handles the inversion so it's in phase with sine (already * -1.0f)
    99b8:	edd4 6a04 	vldr	s13, [r4, #16]
    samp0 = __leaf_table_sinewave[idx];
    99bc:	4a14      	ldr	r2, [pc, #80]	; (9a10 <tPBSineTriangle_tick+0x150>)
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
    99be:	ed9f 7a15 	vldr	s14, [pc, #84]	; 9a14 <tPBSineTriangle_tick+0x154>
    c->phase += c->inc;
    99c2:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
    99c6:	440b      	add	r3, r1
    99c8:	6043      	str	r3, [r0, #4]
    idx = c->phase >> 21; //11 bit table 
    99ca:	0d59      	lsrs	r1, r3, #21
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
    99cc:	f3c3 0314 	ubfx	r3, r3, #0, #21
    idx = (idx + 1) & c->mask;
    99d0:	6940      	ldr	r0, [r0, #20]
    out = out + (tCycle_tick(&c->sine) * c->oneMinusShape);
    99d2:	ed94 6a08 	vldr	s12, [r4, #32]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
    99d6:	ee07 3a90 	vmov	s15, r3
    idx = (idx + 1) & c->mask;
    99da:	1c4b      	adds	r3, r1, #1
    samp0 = __leaf_table_sinewave[idx];
    99dc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    idx = (idx + 1) & c->mask;
    99e0:	4003      	ands	r3, r0
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
    99e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    samp0 = __leaf_table_sinewave[idx];
    99e6:	ed91 0a00 	vldr	s0, [r1]
    samp1 = __leaf_table_sinewave[idx];
    99ea:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
    99ee:	ee67 7a87 	vmul.f32	s15, s15, s14
    99f2:	ed92 7a00 	vldr	s14, [r2]
    99f6:	ee37 7a40 	vsub.f32	s14, s14, s0
    99fa:	eea7 0a87 	vfma.f32	s0, s15, s14
    out = out + (tCycle_tick(&c->sine) * c->oneMinusShape);
    99fe:	ee20 0a06 	vmul.f32	s0, s0, s12
}
    9a02:	eea6 0a88 	vfma.f32	s0, s13, s16
    9a06:	b002      	add	sp, #8
    9a08:	ecbd 8b06 	vpop	{d8-d10}
    9a0c:	bd10      	pop	{r4, pc}
    9a0e:	bf00      	nop
    9a10:	24022648 	.word	0x24022648
    9a14:	35000004 	.word	0x35000004
    9a18:	f3af 8000 	nop.w
    9a1c:	f3af 8000 	nop.w

00009a20 <tPBSineTriangle_setFreq>:
    _tPBSineTriangle* c = *osc;
    9a20:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRate;
    9a22:	edd3 7a06 	vldr	s15, [r3, #24]
    _tCycle* c = *cy;
    9a26:	69da      	ldr	r2, [r3, #28]
    c->inc = freq * c->invSampleRate;
    9a28:	ee67 7a80 	vmul.f32	s15, s15, s0
    c->freq  = freq;
    9a2c:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRate;
    9a30:	edc3 7a02 	vstr	s15, [r3, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
    9a34:	edd2 7a04 	vldr	s15, [r2, #16]
    c->freq  = freq;
    9a38:	ed82 0a03 	vstr	s0, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
    9a3c:	ee20 0a27 	vmul.f32	s0, s0, s15
    9a40:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    9a44:	ed82 0a02 	vstr	s0, [r2, #8]
}
    9a48:	4770      	bx	lr
    9a4a:	bf00      	nop
    9a4c:	f3af 8000 	nop.w
    9a50:	f3af 8000 	nop.w
    9a54:	f3af 8000 	nop.w
    9a58:	f3af 8000 	nop.w
    9a5c:	f3af 8000 	nop.w

00009a60 <tPBTriangle_tick>:
{
    9a60:	b510      	push	{r4, lr}
    _tPBTriangle* c = *osc;
    9a62:	6804      	ldr	r4, [r0, #0]
{
    9a64:	ed2d 8b08 	vpush	{d8-d11}
    Lfloat t = c->phase;
    9a68:	ed94 8a01 	vldr	s16, [r4, #4]
{
    9a6c:	b082      	sub	sp, #8
    if (t < c->skew)
    9a6e:	edd4 7a04 	vldr	s15, [r4, #16]
    9a72:	edd4 0a02 	vldr	s1, [r4, #8]
    9a76:	eef4 7ac8 	vcmpe.f32	s15, s16
    9a7a:	eef0 0ae0 	vabs.f32	s1, s1
    9a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9a82:	eef1 0a60 	vneg.f32	s1, s1
    9a86:	dd71      	ble.n	9b6c <tPBTriangle_tick+0x10c>
        v = 2.0f * t / c->skew - 1.0f;
    9a88:	ee38 7a08 	vadd.f32	s14, s16, s16
    9a8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    9a90:	ee87 aa27 	vdiv.f32	s20, s14, s15
    9a94:	ee3a aa66 	vsub.f32	s20, s20, s13
    v += LEAF_poly_blamp(1.0f - t,  dt);
    9a98:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    v += LEAF_poly_blamp(t,  dt);
    9a9c:	edcd 0a01 	vstr	s1, [sp, #4]
    9aa0:	eeb0 0a48 	vmov.f32	s0, s16
    9aa4:	f001 fa20 	bl	aee8 <__LEAF_poly_blamp_veneer>
    v += LEAF_poly_blamp(1.0f - t,  dt);
    9aa8:	eddd 0a01 	vldr	s1, [sp, #4]
    v += LEAF_poly_blamp(t,  dt);
    9aac:	eeb0 ba40 	vmov.f32	s22, s0
    v += LEAF_poly_blamp(1.0f - t,  dt);
    9ab0:	ee38 0ac8 	vsub.f32	s0, s17, s16
    9ab4:	f001 fa18 	bl	aee8 <__LEAF_poly_blamp_veneer>
    t += 0.5f;
    9ab8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    v += LEAF_poly_blamp(1.0f - t,  dt);
    9abc:	eef0 aa40 	vmov.f32	s21, s0
    v -= LEAF_poly_blamp(t, dt);
    9ac0:	eddd 0a01 	vldr	s1, [sp, #4]
    t += 0.5f;
    9ac4:	ee38 8a27 	vadd.f32	s16, s16, s15
    t -= (int)(t);
    9ac8:	eefd 9ac8 	vcvt.s32.f32	s19, s16
    9acc:	eef8 9ae9 	vcvt.f32.s32	s19, s19
    v -= LEAF_poly_blamp(t, dt);
    9ad0:	ee38 0a69 	vsub.f32	s0, s16, s19
    v -= LEAF_poly_blamp(1.0f - t,  dt);
    9ad4:	ee38 8ac8 	vsub.f32	s16, s17, s16
    v -= LEAF_poly_blamp(t, dt);
    9ad8:	f001 fa06 	bl	aee8 <__LEAF_poly_blamp_veneer>
    v -= LEAF_poly_blamp(1.0f - t,  dt);
    9adc:	eddd 0a01 	vldr	s1, [sp, #4]
    v -= LEAF_poly_blamp(t, dt);
    9ae0:	eeb0 9a40 	vmov.f32	s18, s0
    v -= LEAF_poly_blamp(1.0f - t,  dt);
    9ae4:	ee38 0a29 	vadd.f32	s0, s16, s19
    9ae8:	f001 f9fe 	bl	aee8 <__LEAF_poly_blamp_veneer>
    c->phase += c->inc - (int)c->inc;
    9aec:	edd4 7a02 	vldr	s15, [r4, #8]
    9af0:	edd4 6a01 	vldr	s13, [r4, #4]
    9af4:	ee39 9a00 	vadd.f32	s18, s18, s0
    9af8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    9afc:	ee77 7aa6 	vadd.f32	s15, s15, s13
    9b00:	ee39 9a4a 	vsub.f32	s18, s18, s20
    9b04:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    9b08:	ee77 7ac7 	vsub.f32	s15, s15, s14
	while (c->phase >= 1.0f) c->phase -= 1.0f;
    9b0c:	eef4 7ae8 	vcmpe.f32	s15, s17
    c->phase += c->inc - (int)c->inc;
    9b10:	edc4 7a01 	vstr	s15, [r4, #4]
	while (c->phase >= 1.0f) c->phase -= 1.0f;
    9b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9b18:	db0c      	blt.n	9b34 <tPBTriangle_tick+0xd4>
    9b1a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
    9b1e:	eeb0 7a67 	vmov.f32	s14, s15
    9b22:	ee77 7ae8 	vsub.f32	s15, s15, s17
    9b26:	eeb4 7ae6 	vcmpe.f32	s14, s13
    9b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9b2e:	daf6      	bge.n	9b1e <tPBTriangle_tick+0xbe>
    9b30:	edc4 7a01 	vstr	s15, [r4, #4]
	while (c->phase < 0.0f) c->phase += 1.0f;
    9b34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    9b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9b3c:	d50e      	bpl.n	9b5c <tPBTriangle_tick+0xfc>
    9b3e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    9b42:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    9b46:	eeb0 7a67 	vmov.f32	s14, s15
    9b4a:	ee77 7a86 	vadd.f32	s15, s15, s12
    9b4e:	eeb4 7ae6 	vcmpe.f32	s14, s13
    9b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9b56:	d4f6      	bmi.n	9b46 <tPBTriangle_tick+0xe6>
    9b58:	edc4 7a01 	vstr	s15, [r4, #4]
	return -v;
    9b5c:	ee39 9a4b 	vsub.f32	s18, s18, s22
    9b60:	ee39 0a6a 	vsub.f32	s0, s18, s21
}
    9b64:	b002      	add	sp, #8
    9b66:	ecbd 8b08 	vpop	{d8-d11}
    9b6a:	bd10      	pop	{r4, pc}
        v = -2.0f * (t - c->skew) / c->oneMinusSkew + 1.0f;
    9b6c:	ee78 7a67 	vsub.f32	s15, s16, s15
    9b70:	edd4 6a05 	vldr	s13, [r4, #20]
    9b74:	eeb8 6a00 	vmov.f32	s12, #128	; 0xc0000000 -2.0
    9b78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    9b7c:	ee67 7a86 	vmul.f32	s15, s15, s12
    9b80:	ee87 aaa6 	vdiv.f32	s20, s15, s13
    9b84:	ee3a aa07 	vadd.f32	s20, s20, s14
    9b88:	e786      	b.n	9a98 <tPBTriangle_tick+0x38>
    9b8a:	bf00      	nop
    9b8c:	f3af 8000 	nop.w
    9b90:	f3af 8000 	nop.w
    9b94:	f3af 8000 	nop.w
    9b98:	f3af 8000 	nop.w
    9b9c:	f3af 8000 	nop.w

00009ba0 <tPBTriangle_setFreq>:
    _tPBTriangle* c = *osc;
    9ba0:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRate;
    9ba2:	edd3 7a07 	vldr	s15, [r3, #28]
    c->freq  = freq;
    9ba6:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRate;
    9baa:	ee67 7a80 	vmul.f32	s15, s15, s0
    9bae:	edc3 7a02 	vstr	s15, [r3, #8]
}
    9bb2:	4770      	bx	lr
    9bb4:	f3af 8000 	nop.w
    9bb8:	f3af 8000 	nop.w
    9bbc:	f3af 8000 	nop.w

00009bc0 <tPBPulse_tick>:
{
    9bc0:	b510      	push	{r4, lr}
    _tPBPulse* c = *osc;
    9bc2:	6804      	ldr	r4, [r0, #0]
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
    9bc4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
    9bc8:	eddf 7a1c 	vldr	s15, [pc, #112]	; 9c3c <tPBPulse_tick+0x7c>
{
    9bcc:	ed2d 8b02 	vpush	{d8}
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
    9bd0:	6862      	ldr	r2, [r4, #4]
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
    9bd2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
    9bd6:	edd4 6a02 	vldr	s13, [r4, #8]
{
    9bda:	b082      	sub	sp, #8
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
    9bdc:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
    9be0:	eef8 0ae6 	vcvt.f32.s32	s1, s13
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
    9be4:	ee06 2a90 	vmov	s13, r2
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
    9be8:	18d3      	adds	r3, r2, r3
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
    9bea:	428a      	cmp	r2, r1
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
    9bec:	eeb8 0a66 	vcvt.f32.u32	s0, s13
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
    9bf0:	ee08 3a10 	vmov	s16, r3
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
    9bf4:	ee60 0aa7 	vmul.f32	s1, s1, s15
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
    9bf8:	bf28      	it	cs
    9bfa:	eef0 8a47 	vmovcs.f32	s17, s14
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
    9bfe:	eeb8 8a48 	vcvt.f32.u32	s16, s16
    out += LEAF_poly_blep(phaseFloat,incFloat);
    9c02:	ee20 0a27 	vmul.f32	s0, s0, s15
    9c06:	edcd 0a01 	vstr	s1, [sp, #4]
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
    9c0a:	ee28 8a27 	vmul.f32	s16, s16, s15
    out += LEAF_poly_blep(phaseFloat,incFloat);
    9c0e:	f001 f9a7 	bl	af60 <__LEAF_poly_blep_veneer>
    9c12:	eef0 7a40 	vmov.f32	s15, s0
    out -= LEAF_poly_blep(backwardsPhaseFloat, incFloat);
    9c16:	eddd 0a01 	vldr	s1, [sp, #4]
    9c1a:	eeb0 0a48 	vmov.f32	s0, s16
    out += LEAF_poly_blep(phaseFloat,incFloat);
    9c1e:	ee78 8aa7 	vadd.f32	s17, s17, s15
    out -= LEAF_poly_blep(backwardsPhaseFloat, incFloat);
    9c22:	f001 f99d 	bl	af60 <__LEAF_poly_blep_veneer>
    c->phase += c->inc;
    9c26:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
}
    9c2a:	ee38 0ac0 	vsub.f32	s0, s17, s0
    c->phase += c->inc;
    9c2e:	4413      	add	r3, r2
    9c30:	6063      	str	r3, [r4, #4]
}
    9c32:	b002      	add	sp, #8
    9c34:	ecbd 8b02 	vpop	{d8}
    9c38:	bd10      	pop	{r4, pc}
    9c3a:	bf00      	nop
    9c3c:	2f80000d 	.word	0x2f80000d

00009c40 <tPBPulse_setFreq>:
    _tPBPulse* c = *osc;
    9c40:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
    9c42:	edd3 7a07 	vldr	s15, [r3, #28]
    c->freq  = freq;
    9c46:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
    9c4a:	ee20 0a27 	vmul.f32	s0, s0, s15
    9c4e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    9c52:	ed83 0a02 	vstr	s0, [r3, #8]
}
    9c56:	4770      	bx	lr
    9c58:	f3af 8000 	nop.w
    9c5c:	f3af 8000 	nop.w

00009c60 <tPBSaw_tick>:
{
    9c60:	b510      	push	{r4, lr}
    _tPBSaw* c = *osc;
    9c62:	6804      	ldr	r4, [r0, #0]
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
    9c64:	eddf 0a10 	vldr	s1, [pc, #64]	; 9ca8 <tPBSaw_tick+0x48>
{
    9c68:	ed2d 8b02 	vpush	{d8}
    Lfloat out = (c->phase * INV_TWO_TO_31) - 1.0f;
    9c6c:	edd4 7a01 	vldr	s15, [r4, #4]
    9c70:	eeb8 8a67 	vcvt.f32.u32	s16, s15
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
    9c74:	edd4 7a02 	vldr	s15, [r4, #8]
    9c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    out -= LEAF_poly_blep(phaseFloat, incFloat);
    9c7c:	ee28 0a20 	vmul.f32	s0, s16, s1
    9c80:	ee67 0aa0 	vmul.f32	s1, s15, s1
    9c84:	f001 f96c 	bl	af60 <__LEAF_poly_blep_veneer>
    c->phase += c->inc;
    9c88:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    9c8c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 9cac <tPBSaw_tick+0x4c>
    9c90:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    9c94:	eee8 7a47 	vfms.f32	s15, s16, s14
    9c98:	4413      	add	r3, r2
    9c9a:	6063      	str	r3, [r4, #4]
}
    9c9c:	ecbd 8b02 	vpop	{d8}
    9ca0:	ee30 0a27 	vadd.f32	s0, s0, s15
    9ca4:	bd10      	pop	{r4, pc}
    9ca6:	bf00      	nop
    9ca8:	2f80000d 	.word	0x2f80000d
    9cac:	2ffffff6 	.word	0x2ffffff6
    9cb0:	f3af 8000 	nop.w
    9cb4:	f3af 8000 	nop.w
    9cb8:	f3af 8000 	nop.w
    9cbc:	f3af 8000 	nop.w

00009cc0 <tPBSaw_setFreq>:
    _tPBSaw* c = *osc;
    9cc0:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
    9cc2:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
    9cc6:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
    9cca:	ee20 0a27 	vmul.f32	s0, s0, s15
    9cce:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    9cd2:	ed83 0a02 	vstr	s0, [r3, #8]
}
    9cd6:	4770      	bx	lr
    9cd8:	f3af 8000 	nop.w
    9cdc:	f3af 8000 	nop.w

00009ce0 <tPBSawSquare_tick>:
{
    9ce0:	b530      	push	{r4, r5, lr}
    _tPBSawSquare* c = *osc;
    9ce2:	6804      	ldr	r4, [r0, #0]
{
    9ce4:	ed2d 8b06 	vpush	{d8-d10}
    Lfloat squareOut = ((c->phase < 2147483648u) * 2.0f) - 1.0f;
    9ce8:	6865      	ldr	r5, [r4, #4]
    9cea:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
    9cee:	edd4 7a02 	vldr	s15, [r4, #8]
    Lfloat squareOut = ((c->phase < 2147483648u) * 2.0f) - 1.0f;
    9cf2:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
    9cf6:	eddf 9a1f 	vldr	s19, [pc, #124]	; 9d74 <tPBSawSquare_tick+0x94>
{
    9cfa:	b083      	sub	sp, #12
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
    9cfc:	eef8 0ae7 	vcvt.f32.s32	s1, s15
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
    9d00:	ee07 5a90 	vmov	s15, r5
    Lfloat squareOut = ((c->phase < 2147483648u) * 2.0f) - 1.0f;
    9d04:	2d00      	cmp	r5, #0
    Lfloat backwardsPhaseFloat = (c->phase + 2147483648u) * INV_TWO_TO_32;
    9d06:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
    9d0a:	eeb8 aa67 	vcvt.f32.u32	s20, s15
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
    9d0e:	ee60 0aa9 	vmul.f32	s1, s1, s19
    Lfloat squareOut = ((c->phase < 2147483648u) * 2.0f) - 1.0f;
    9d12:	fe28 8a88 	vselge.f32	s16, s17, s16
    Lfloat resetBlep = LEAF_poly_blep(phaseFloat,incFloat);
    9d16:	ee2a 0a29 	vmul.f32	s0, s20, s19
    9d1a:	edcd 0a01 	vstr	s1, [sp, #4]
    9d1e:	f001 f91f 	bl	af60 <__LEAF_poly_blep_veneer>
    Lfloat backwardsPhaseFloat = (c->phase + 2147483648u) * INV_TWO_TO_32;
    9d22:	ee07 5a90 	vmov	s15, r5
    Lfloat resetBlep = LEAF_poly_blep(phaseFloat,incFloat);
    9d26:	eeb0 9a40 	vmov.f32	s18, s0
    Lfloat midBlep = LEAF_poly_blep(backwardsPhaseFloat, incFloat);
    9d2a:	eddd 0a01 	vldr	s1, [sp, #4]
    Lfloat backwardsPhaseFloat = (c->phase + 2147483648u) * INV_TWO_TO_32;
    9d2e:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    squareOut += resetBlep;
    9d32:	ee38 8a09 	vadd.f32	s16, s16, s18
    Lfloat midBlep = LEAF_poly_blep(backwardsPhaseFloat, incFloat);
    9d36:	ee20 0a29 	vmul.f32	s0, s0, s19
    9d3a:	f001 f911 	bl	af60 <__LEAF_poly_blep_veneer>
    squareOut -= midBlep;
    9d3e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 9d78 <tPBSawSquare_tick+0x98>
    9d42:	ee38 8a40 	vsub.f32	s16, s16, s0
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
    9d46:	ed94 7a08 	vldr	s14, [r4, #32]
    9d4a:	eeea 8a67 	vfms.f32	s17, s20, s15
    9d4e:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    c->phase += c->inc;
    9d52:	6863      	ldr	r3, [r4, #4]
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
    9d54:	ee28 8a07 	vmul.f32	s16, s16, s14
    c->phase += c->inc;
    9d58:	68a2      	ldr	r2, [r4, #8]
    9d5a:	4413      	add	r3, r2
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
    9d5c:	ee38 0a89 	vadd.f32	s0, s17, s18
    c->phase += c->inc;
    9d60:	6063      	str	r3, [r4, #4]
}
    9d62:	eea0 8a27 	vfma.f32	s16, s0, s15
    9d66:	eeb0 0a48 	vmov.f32	s0, s16
    9d6a:	b003      	add	sp, #12
    9d6c:	ecbd 8b06 	vpop	{d8-d10}
    9d70:	bd30      	pop	{r4, r5, pc}
    9d72:	bf00      	nop
    9d74:	2f80000d 	.word	0x2f80000d
    9d78:	3000000d 	.word	0x3000000d
    9d7c:	f3af 8000 	nop.w

00009d80 <tPBSawSquare_setFreq>:
    _tPBSawSquare* c = *osc;
    9d80:	6803      	ldr	r3, [r0, #0]
    c->inc = (uint32_t)(freq * c->invSampleRateTimesTwoTo32);
    9d82:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
    9d86:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = (uint32_t)(freq * c->invSampleRateTimesTwoTo32);
    9d8a:	ee20 0a27 	vmul.f32	s0, s0, s15
    9d8e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    9d92:	ed83 0a02 	vstr	s0, [r3, #8]
}
    9d96:	4770      	bx	lr
    9d98:	f3af 8000 	nop.w
    9d9c:	f3af 8000 	nop.w

00009da0 <tMBPulse_place_step_dd_noBuffer>:
	_tMBPulse* c = *osc;
    9da0:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 9e10 <tMBPulse_place_step_dd_noBuffer+0x70>
	i = lrintf(r - 0.5f);
    9da4:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
{
    9da8:	b510      	push	{r4, lr}
    9daa:	ed2d 8b04 	vpush	{d8-d9}
    9dae:	ee20 8a87 	vmul.f32	s16, s1, s14
	_tMBPulse* c = *osc;
    9db2:	6804      	ldr	r4, [r0, #0]
{
    9db4:	eef0 8a40 	vmov.f32	s17, s0
    9db8:	eeb0 9a41 	vmov.f32	s18, s2
	i = lrintf(r - 0.5f);
    9dbc:	eee0 7a08 	vfma.f32	s15, s0, s16
    9dc0:	eeb0 0a67 	vmov.f32	s0, s15
    9dc4:	f001 f988 	bl	b0d8 <__lrintf_veneer>
	r -= (Lfloat)i;
    9dc8:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9dcc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    9dd0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (Lfloat)i;
    9dd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9dd8:	3301      	adds	r3, #1
	r -= (Lfloat)i;
    9dda:	eed8 7a88 	vfnms.f32	s15, s17, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9dde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    9de2:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9de6:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
    9dea:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    9dee:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    9df2:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    9df6:	ed82 9a3b 	vstr	s18, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    9dfa:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    9dfe:	3301      	adds	r3, #1
    9e00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9e04:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
}
    9e08:	ecbd 8b04 	vpop	{d8-d9}
    9e0c:	bd10      	pop	{r4, pc}
    9e0e:	bf00      	nop
    9e10:	42800000 	.word	0x42800000
    9e14:	f3af 8000 	nop.w
    9e18:	f3af 8000 	nop.w
    9e1c:	f3af 8000 	nop.w

00009e20 <tMBTriangle_place_dd_noBuffer>:
	_tMBTriangle* c = *osc;
    9e20:	ed9f 7a20 	vldr	s14, [pc, #128]	; 9ea4 <tMBTriangle_place_dd_noBuffer+0x84>
	i = lrintf(r - 0.5f);
    9e24:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
{
    9e28:	b510      	push	{r4, lr}
    9e2a:	ed2d 8b06 	vpush	{d8-d10}
    9e2e:	ee60 8a87 	vmul.f32	s17, s1, s14
	_tMBTriangle* c = *osc;
    9e32:	6804      	ldr	r4, [r0, #0]
{
    9e34:	eeb0 9a40 	vmov.f32	s18, s0
    9e38:	eeb0 8a41 	vmov.f32	s16, s2
	i = lrintf(r - 0.5f);
    9e3c:	eee0 7a28 	vfma.f32	s15, s0, s17
{
    9e40:	eef0 9a61 	vmov.f32	s19, s3
    9e44:	eeb0 aa42 	vmov.f32	s20, s4
	i = lrintf(r - 0.5f);
    9e48:	eeb0 0a67 	vmov.f32	s0, s15
    9e4c:	f001 f944 	bl	b0d8 <__lrintf_veneer>
	r -= (Lfloat)i;
    9e50:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9e54:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
	scale *= w;
    9e58:	ee28 2a0a 	vmul.f32	s4, s16, s20
	r -= (Lfloat)i;
    9e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    9e60:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9e64:	3301      	adds	r3, #1
	r -= (Lfloat)i;
    9e66:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9e6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9e6e:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
    9e72:	eb04 0243 	add.w	r2, r4, r3, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    9e76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
    9e7a:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    9e7e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    9e82:	ed83 2a3c 	vstr	s4, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    9e86:	edc3 9a3d 	vstr	s19, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    9e8a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    9e8e:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    9e92:	3301      	adds	r3, #1
    9e94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9e98:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
}
    9e9c:	ecbd 8b06 	vpop	{d8-d10}
    9ea0:	bd10      	pop	{r4, pc}
    9ea2:	bf00      	nop
    9ea4:	42800000 	.word	0x42800000
    9ea8:	f3af 8000 	nop.w
    9eac:	f3af 8000 	nop.w
    9eb0:	f3af 8000 	nop.w
    9eb4:	f3af 8000 	nop.w
    9eb8:	f3af 8000 	nop.w
    9ebc:	f3af 8000 	nop.w

00009ec0 <tMBSineTri_place_dd_noBuffer>:
	_tMBSineTri* c = *osc;
    9ec0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 9f44 <tMBSineTri_place_dd_noBuffer+0x84>
	i = lrintf(r - 0.5f);
    9ec4:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
{
    9ec8:	b510      	push	{r4, lr}
    9eca:	ed2d 8b06 	vpush	{d8-d10}
    9ece:	ee60 8a87 	vmul.f32	s17, s1, s14
	_tMBSineTri* c = *osc;
    9ed2:	6804      	ldr	r4, [r0, #0]
{
    9ed4:	eeb0 9a40 	vmov.f32	s18, s0
    9ed8:	eeb0 8a41 	vmov.f32	s16, s2
	i = lrintf(r - 0.5f);
    9edc:	eee0 7a28 	vfma.f32	s15, s0, s17
{
    9ee0:	eef0 9a61 	vmov.f32	s19, s3
    9ee4:	eeb0 aa42 	vmov.f32	s20, s4
	i = lrintf(r - 0.5f);
    9ee8:	eeb0 0a67 	vmov.f32	s0, s15
    9eec:	f001 f8f4 	bl	b0d8 <__lrintf_veneer>
	r -= (Lfloat)i;
    9ef0:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9ef4:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
	scale *= w;
    9ef8:	ee28 2a0a 	vmul.f32	s4, s16, s20
	r -= (Lfloat)i;
    9efc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    9f00:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9f04:	3301      	adds	r3, #1
	r -= (Lfloat)i;
    9f06:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9f0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9f0e:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
    9f12:	eb04 0243 	add.w	r2, r4, r3, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    9f16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
    9f1a:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    9f1e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    9f22:	ed83 2a3c 	vstr	s4, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    9f26:	edc3 9a3d 	vstr	s19, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    9f2a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    9f2e:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    9f32:	3301      	adds	r3, #1
    9f34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9f38:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
}
    9f3c:	ecbd 8b06 	vpop	{d8-d10}
    9f40:	bd10      	pop	{r4, pc}
    9f42:	bf00      	nop
    9f44:	42800000 	.word	0x42800000
    9f48:	f3af 8000 	nop.w
    9f4c:	f3af 8000 	nop.w
    9f50:	f3af 8000 	nop.w
    9f54:	f3af 8000 	nop.w
    9f58:	f3af 8000 	nop.w
    9f5c:	f3af 8000 	nop.w

00009f60 <tMBSawPulse_place_step_dd_noBuffer>:
{
    9f60:	b510      	push	{r4, lr}
    9f62:	ed2d 8b04 	vpush	{d8-d9}
    _tMBSawPulse* c = *osc;
    9f66:	6804      	ldr	r4, [r0, #0]
    if (c->active)
    9f68:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
    9f6c:	b36b      	cbz	r3, 9fca <tMBSawPulse_place_step_dd_noBuffer+0x6a>
		r = MINBLEP_PHASES * phase * inv_w;
    9f6e:	eddf 7a18 	vldr	s15, [pc, #96]	; 9fd0 <tMBSawPulse_place_step_dd_noBuffer+0x70>
    9f72:	eef0 8a40 	vmov.f32	s17, s0
		i = lrintf(r - 0.5f);
    9f76:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    9f7a:	ee20 8aa7 	vmul.f32	s16, s1, s15
    9f7e:	eeb0 9a41 	vmov.f32	s18, s2
    9f82:	eea8 0a88 	vfma.f32	s0, s17, s16
    9f86:	f001 f8a7 	bl	b0d8 <__lrintf_veneer>
		r -= (Lfloat)i;
    9f8a:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9f8e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    9f92:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    9f96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9f9a:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    9f9c:	eed8 7a88 	vfnms.f32	s15, s17, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9fa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    9fa4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9fa8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    9fac:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    9fb0:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    9fb4:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    9fb8:	ed82 9a3d 	vstr	s18, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    9fbc:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    9fc0:	3301      	adds	r3, #1
    9fc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9fc6:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
    9fca:	ecbd 8b04 	vpop	{d8-d9}
    9fce:	bd10      	pop	{r4, pc}
    9fd0:	42800000 	.word	0x42800000
    9fd4:	f3af 8000 	nop.w
    9fd8:	f3af 8000 	nop.w
    9fdc:	f3af 8000 	nop.w

00009fe0 <tMBSawPulse_tick>:
{
    9fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9fe4:	ed2d 8b0e 	vpush	{d8-d14}
    _tMBSawPulse* c = *osc;
    9fe8:	6804      	ldr	r4, [r0, #0]
    Lfloat sawShape = 1.0f - c->shape;
    9fea:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
{
    9fee:	b082      	sub	sp, #8
    9ff0:	4607      	mov	r7, r0
    sync = c->sync;
    9ff2:	ed94 8a04 	vldr	s16, [r4, #16]
    Lfloat shape = c->shape;
    9ff6:	ed94 ca11 	vldr	s24, [r4, #68]	; 0x44
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    9ffa:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    9ffe:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
    Lfloat sawShape = 1.0f - c->shape;
    a002:	ee39 dacc 	vsub.f32	s26, s19, s24
    p = c->_p;  /* phase [0, 1) */
    a006:	ed94 7a08 	vldr	s14, [r4, #32]
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    a00a:	eefd cae5 	vcvt.s32.f32	s25, s11
    w = c->_w;  /* phase increment */
    a00e:	edd4 ba09 	vldr	s23, [r4, #36]	; 0x24
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    a012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b = c->_b;  /* duty cycle (0, 1) */
    a016:	ed94 ba0a 	vldr	s22, [r4, #40]	; 0x28
    x = c->_x;  /* temporary output variable */
    a01a:	edd4 aa0b 	vldr	s21, [r4, #44]	; 0x2c
    z = c->_z;  /* low pass filter state */
    a01e:	ed94 aa0c 	vldr	s20, [r4, #48]	; 0x30
    j = c->_j;  /* index into buffer _f */
    a022:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    a024:	f340 80d6 	ble.w	a1d4 <tMBSawPulse_tick+0x1f4>
    a028:	f8d4 8018 	ldr.w	r8, [r4, #24]
    a02c:	f1b8 0f00 	cmp.w	r8, #0
    a030:	dd65      	ble.n	a0fe <tMBSawPulse_tick+0x11e>
    a032:	edd4 6a05 	vldr	s13, [r4, #20]
    Lfloat inv_sw = c->_inv_w * c->syncdir;
    a036:	ed94 9a0f 	vldr	s18, [r4, #60]	; 0x3c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    a03a:	eef1 6a66 	vneg.f32	s13, s13
    sw = w * c->syncdir;
    a03e:	ee66 7aab 	vmul.f32	s15, s13, s23
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    a042:	edc4 6a05 	vstr	s13, [r4, #20]
    Lfloat inv_sw = c->_inv_w * c->syncdir;
    a046:	ee26 9a89 	vmul.f32	s18, s13, s18
    p += sw - (int)sw;
    a04a:	eebd 8ae7 	vcvt.s32.f32	s16, s15
    a04e:	ee37 7a87 	vadd.f32	s14, s15, s14
    a052:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    a056:	ee37 8a48 	vsub.f32	s16, s14, s16
    else if (!k)
    a05a:	ee1c 3a90 	vmov	r3, s25
		if (sw > 0)
    a05e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    else if (!k)
    a062:	2b00      	cmp	r3, #0
    a064:	f040 80cd 	bne.w	a202 <tMBSawPulse_tick+0x222>
		if (sw > 0)
    a068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a06c:	f340 8258 	ble.w	a520 <tMBSawPulse_tick+0x540>
			if (p >= b) {
    a070:	eeb4 8acb 	vcmpe.f32	s16, s22
    a074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a078:	f280 81ca 	bge.w	a410 <tMBSawPulse_tick+0x430>
    a07c:	eddf 5ae2 	vldr	s11, [pc, #904]	; a408 <tMBSawPulse_tick+0x428>
			if (p >= 1.0f) {
    a080:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    a084:	eeb4 8ae8 	vcmpe.f32	s16, s17
    a088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a08c:	f2c0 80c7 	blt.w	a21e <tMBSawPulse_tick+0x23e>
    _tMBSawPulse* c = *osc;
    a090:	683d      	ldr	r5, [r7, #0]
				p -= 1.0f;
    a092:	ee38 8a68 	vsub.f32	s16, s16, s17
    if (c->active)
    a096:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    a09a:	2b00      	cmp	r3, #0
    a09c:	f000 81f1 	beq.w	a482 <tMBSawPulse_tick+0x4a2>
		r = MINBLEP_PHASES * phase * inv_w;
    a0a0:	eddf 7ada 	vldr	s15, [pc, #872]	; a40c <tMBSawPulse_tick+0x42c>
		i = lrintf(r - 0.5f);
    a0a4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				x = 0.5f;
    a0a8:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    a0ac:	ee29 9a27 	vmul.f32	s18, s18, s15
		i = lrintf(r - 0.5f);
    a0b0:	eea9 0a08 	vfma.f32	s0, s18, s16
    a0b4:	f001 f810 	bl	b0d8 <__lrintf_veneer>
		r -= (Lfloat)i;
    a0b8:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a0bc:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    a0c0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    a0c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    a0c8:	eddf 5acf 	vldr	s11, [pc, #828]	; a408 <tMBSawPulse_tick+0x428>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a0cc:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    a0ce:	eed9 7a08 	vfnms.f32	s15, s18, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a0d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    a0d6:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a0da:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    a0de:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    a0e2:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    a0e6:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    a0ea:	edc2 8a3d 	vstr	s17, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    a0ee:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    a0f2:	3301      	adds	r3, #1
    a0f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a0f8:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    a0fc:	e08f      	b.n	a21e <tMBSawPulse_tick+0x23e>
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    a0fe:	ed94 9a05 	vldr	s18, [r4, #20]
    Lfloat inv_sw = c->_inv_w * c->syncdir;
    a102:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
    a106:	ee6b 7a89 	vmul.f32	s15, s23, s18
    Lfloat inv_sw = c->_inv_w * c->syncdir;
    a10a:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
    a10e:	eefd 6ae7 	vcvt.s32.f32	s13, s15
    a112:	ee37 7a87 	vadd.f32	s14, s15, s14
    a116:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    a11a:	ee77 8a66 	vsub.f32	s17, s14, s13
    if (sync > 0.0f && c->softsync == 0)
    a11e:	f040 864c 	bne.w	adba <tMBSawPulse_tick+0xdda>
        if (sw > 0) p = eof_offset;
    a122:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    a126:	4625      	mov	r5, r4
        Lfloat eof_offset = sync * sw;
    a128:	ee27 8a88 	vmul.f32	s16, s15, s16
        if (sw > 0) p = eof_offset;
    a12c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        Lfloat p_at_reset = p - eof_offset;
    a130:	ee78 dac8 	vsub.f32	s27, s17, s16
        if (sw > 0) p = eof_offset;
    a134:	f340 8113 	ble.w	a35e <tMBSawPulse_tick+0x37e>
		 if (!k)
    a138:	ee1c 3a90 	vmov	r3, s25
    a13c:	2b00      	cmp	r3, #0
    a13e:	f040 8202 	bne.w	a546 <tMBSawPulse_tick+0x566>
				 if (p_at_reset >= b)
    a142:	eeb4 baed 	vcmpe.f32	s22, s27
    a146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a14a:	f240 835b 	bls.w	a804 <tMBSawPulse_tick+0x824>
    _tMBSawPulse* c = *osc;
    a14e:	46a1      	mov	r9, r4
    if (c->active)
    a150:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
				 if (p_at_reset >= 1.0f)
    a154:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    a158:	eef4 dae8 	vcmpe.f32	s27, s17
    a15c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a160:	f280 823d 	bge.w	a5de <tMBSawPulse_tick+0x5fe>
    if (c->active)
    a164:	b35b      	cbz	r3, a1be <tMBSawPulse_tick+0x1de>
		r = MINBLEP_PHASES * phase * inv_w;
    a166:	eddf 8aa9 	vldr	s17, [pc, #676]	; a40c <tMBSawPulse_tick+0x42c>
		i = lrintf(r - 0.5f);
    a16a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
			tMBSawPulse_place_step_dd_noBuffer(osc, j, p, inv_sw, p_at_reset * sawShape);
    a16e:	ee6d da2d 	vmul.f32	s27, s26, s27
    a172:	ee69 8a28 	vmul.f32	s17, s18, s17
		i = lrintf(r - 0.5f);
    a176:	eea8 0a28 	vfma.f32	s0, s16, s17
    a17a:	f000 ffad 	bl	b0d8 <__lrintf_veneer>
		r -= (Lfloat)i;
    a17e:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a182:	f8b9 306a 	ldrh.w	r3, [r9, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    a186:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    a18a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a18e:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    a190:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a194:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    a198:	eb09 0243 	add.w	r2, r9, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a19c:	f8a9 306a 	strh.w	r3, [r9, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    a1a0:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    a1a4:	eb09 02c3 	add.w	r2, r9, r3, lsl #3
    a1a8:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    a1ac:	edc2 da3d 	vstr	s27, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    a1b0:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
    a1b4:	3301      	adds	r3, #1
    a1b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a1ba:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
            if (k) {
    a1be:	f1b8 0f00 	cmp.w	r8, #0
    a1c2:	f040 83c0 	bne.w	a946 <tMBSawPulse_tick+0x966>
			if (p >= b) {
    a1c6:	eeb4 bac8 	vcmpe.f32	s22, s16
    a1ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a1ce:	f200 81b2 	bhi.w	a536 <tMBSawPulse_tick+0x556>
    a1d2:	e0db      	b.n	a38c <tMBSawPulse_tick+0x3ac>
    sw = w * c->syncdir;
    a1d4:	ed94 9a05 	vldr	s18, [r4, #20]
    else if (!k)
    a1d8:	ee1c 3a90 	vmov	r3, s25
    Lfloat inv_sw = c->_inv_w * c->syncdir;
    a1dc:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
    a1e0:	ee6b 7a89 	vmul.f32	s15, s23, s18
    Lfloat inv_sw = c->_inv_w * c->syncdir;
    a1e4:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
    a1e8:	eebd 8ae7 	vcvt.s32.f32	s16, s15
    a1ec:	ee37 7a27 	vadd.f32	s14, s14, s15
		if (sw > 0)
    a1f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    p += sw - (int)sw;
    a1f4:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    a1f8:	ee37 8a48 	vsub.f32	s16, s14, s16
    else if (!k)
    a1fc:	2b00      	cmp	r3, #0
    a1fe:	f43f af33 	beq.w	a068 <tMBSawPulse_tick+0x88>
		if (sw > 0)
    a202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a206:	f340 8141 	ble.w	a48c <tMBSawPulse_tick+0x4ac>
			if (p >= 1.0f) {
    a20a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    a20e:	eeb4 8ae8 	vcmpe.f32	s16, s17
    a212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a216:	f280 80ac 	bge.w	a372 <tMBSawPulse_tick+0x392>
    c->_k = k;
    a21a:	eef8 5aec 	vcvt.f32.s32	s11, s25
    c->_f[currentSamp] = ((0.5f - p) * sawShape); //saw
    a21e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
    a222:	1d33      	adds	r3, r6, #4
    c->_f[currentSamp] += (x * shape);//pulse
    a224:	ee2a 7a8c 	vmul.f32	s14, s21, s24
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
    a228:	f003 0307 	and.w	r3, r3, #7
    c->_f[currentSamp] = ((0.5f - p) * sawShape); //saw
    a22c:	ee76 6ac8 	vsub.f32	s13, s13, s16
    c->_f[currentSamp] += (x * shape);//pulse
    a230:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    a234:	eea6 7a8d 	vfma.f32	s14, s13, s26
    a238:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
    a23c:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    a240:	f88d 3005 	strb.w	r3, [sp, #5]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    a244:	f89d 3005 	ldrb.w	r3, [sp, #5]
    a248:	2b00      	cmp	r3, #0
    a24a:	f000 8177 	beq.w	a53c <tMBSawPulse_tick+0x55c>
    a24e:	eb04 0786 	add.w	r7, r4, r6, lsl #2
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
    a252:	f8b4 e06a 	ldrh.w	lr, [r4, #106]	; 0x6a
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    a256:	f8b4 c06c 	ldrh.w	ip, [r4, #108]	; 0x6c
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    a25a:	2000      	movs	r0, #0
    a25c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
    a260:	4d68      	ldr	r5, [pc, #416]	; (a404 <tMBSawPulse_tick+0x424>)
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
    a262:	ebae 0300 	sub.w	r3, lr, r0
    a266:	b29b      	uxth	r3, r3
    a268:	f8ad 3006 	strh.w	r3, [sp, #6]
    	whichBLEP &= 63;
    a26c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a274:	f8ad 3006 	strh.w	r3, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    a278:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    a27c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a280:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    a284:	b289      	uxth	r1, r1
    a286:	f8bd 9006 	ldrh.w	r9, [sp, #6]
    a28a:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    a28c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    a290:	fa1f f888 	uxth.w	r8, r8
    a294:	fa1f f989 	uxth.w	r9, r9
    a298:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    a29c:	eb04 0949 	add.w	r9, r4, r9, lsl #1
    a2a0:	f8b2 a06e 	ldrh.w	sl, [r2, #110]	; 0x6e
    a2a4:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
    a2a8:	f8b9 906e 	ldrh.w	r9, [r9, #110]	; 0x6e
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    a2ac:	b29b      	uxth	r3, r3
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    a2ae:	ed98 6a3c 	vldr	s12, [r8, #240]	; 0xf0
    a2b2:	eb05 08ca 	add.w	r8, r5, sl, lsl #3
    a2b6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    a2ba:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    a2be:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
    a2c2:	edd8 7a00 	vldr	s15, [r8]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    a2c6:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    a2c8:	f8b3 806e 	ldrh.w	r8, [r3, #110]	; 0x6e
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    a2cc:	edd9 6a01 	vldr	s13, [r9, #4]
    a2d0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    a2d4:	f108 0840 	add.w	r8, r8, #64	; 0x40
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    a2d8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    a2dc:	eee6 7a26 	vfma.f32	s15, s12, s13
    a2e0:	edd1 6a3d 	vldr	s13, [r1, #244]	; 0xf4
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    a2e4:	f8a3 806e 	strh.w	r8, [r3, #110]	; 0x6e
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    a2e8:	f8b2 306e 	ldrh.w	r3, [r2, #110]	; 0x6e
    a2ec:	4563      	cmp	r3, ip
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    a2ee:	eea6 7aa7 	vfma.f32	s14, s13, s15
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    a2f2:	d32e      	bcc.n	a352 <tMBSawPulse_tick+0x372>
			c->numBLEPs--;
    a2f4:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    a2f8:	3001      	adds	r0, #1
    a2fa:	f89d 2005 	ldrb.w	r2, [sp, #5]
			c->numBLEPs--;
    a2fe:	3b01      	subs	r3, #1
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    a300:	4282      	cmp	r2, r0
			c->numBLEPs--;
    a302:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    a306:	dcac      	bgt.n	a262 <tMBSawPulse_tick+0x282>
    a308:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
    z += 0.5f * (c->_f[j] - z); // LP filtering
    a30c:	ee37 7a4a 	vsub.f32	s14, s14, s20
    return -c->out * c->gain;
    a310:	ed94 0abc 	vldr	s0, [r4, #752]	; 0x2f0
    z += 0.5f * (c->_f[j] - z); // LP filtering
    a314:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    j = (j+1) & 7;
    a318:	3601      	adds	r6, #1
    z += 0.5f * (c->_f[j] - z); // LP filtering
    a31a:	eef0 7a4a 	vmov.f32	s15, s20
    c->_p = p;
    a31e:	ed84 8a08 	vstr	s16, [r4, #32]
    j = (j+1) & 7;
    a322:	f006 0607 	and.w	r6, r6, #7
    c->_w = w;
    a326:	edc4 ba09 	vstr	s23, [r4, #36]	; 0x24
    c->_b = b;
    a32a:	ed84 ba0a 	vstr	s22, [r4, #40]	; 0x28
    z += 0.5f * (c->_f[j] - z); // LP filtering
    a32e:	eee7 7a26 	vfma.f32	s15, s14, s13
    c->_x = x;
    a332:	edc4 aa0b 	vstr	s21, [r4, #44]	; 0x2c
    c->_j = j;
    a336:	63a6      	str	r6, [r4, #56]	; 0x38
    c->_k = k;
    a338:	edc4 5a0d 	vstr	s11, [r4, #52]	; 0x34
    return -c->out * c->gain;
    a33c:	ee20 0a67 	vnmul.f32	s0, s0, s15
    c->out = z;
    a340:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
    a344:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
}
    a348:	b002      	add	sp, #8
    a34a:	ecbd 8b0e 	vpop	{d8-d14}
    a34e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    a352:	f89d 3005 	ldrb.w	r3, [sp, #5]
    a356:	3001      	adds	r0, #1
    a358:	4283      	cmp	r3, r0
    a35a:	dc82      	bgt.n	a262 <tMBSawPulse_tick+0x282>
    a35c:	e7d4      	b.n	a308 <tMBSawPulse_tick+0x328>
        else if (sw < 0) p = 1.0f - eof_offset;
    a35e:	f100 81b4 	bmi.w	a6ca <tMBSawPulse_tick+0x6ea>
		 if (!k)
    a362:	ee1c 3a90 	vmov	r3, s25
    a366:	2b00      	cmp	r3, #0
    a368:	f040 8129 	bne.w	a5be <tMBSawPulse_tick+0x5de>
    p += sw - (int)sw;
    a36c:	eeb0 8a68 	vmov.f32	s16, s17
    a370:	e0e1      	b.n	a536 <tMBSawPulse_tick+0x556>
    _tMBSawPulse* c = *osc;
    a372:	683d      	ldr	r5, [r7, #0]
				p -= 1.0f;
    a374:	ee38 8a68 	vsub.f32	s16, s16, s17
    if (c->active)
    a378:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    a37c:	2b00      	cmp	r3, #0
    a37e:	f040 80f3 	bne.w	a568 <tMBSawPulse_tick+0x588>
			if (!k && p >= b) {
    a382:	eeb4 bac8 	vcmpe.f32	s22, s16
    a386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a38a:	d87a      	bhi.n	a482 <tMBSawPulse_tick+0x4a2>
    _tMBSawPulse* c = *osc;
    a38c:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    a38e:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    a392:	2b00      	cmp	r3, #0
    a394:	f000 80e3 	beq.w	a55e <tMBSawPulse_tick+0x57e>
		r = MINBLEP_PHASES * phase * inv_w;
    a398:	eddf 8a1c 	vldr	s17, [pc, #112]	; a40c <tMBSawPulse_tick+0x42c>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    a39c:	ee78 7a4b 	vsub.f32	s15, s16, s22
		i = lrintf(r - 0.5f);
    a3a0:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    a3a4:	ee69 8a28 	vmul.f32	s17, s18, s17
    a3a8:	eeb0 9a67 	vmov.f32	s18, s15
				x = -0.5f;
    a3ac:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
    a3b0:	eea7 0aa8 	vfma.f32	s0, s15, s17
    a3b4:	f000 fe90 	bl	b0d8 <__lrintf_veneer>
		r -= (Lfloat)i;
    a3b8:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a3bc:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    a3c0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    a3c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a3c8:	3301      	adds	r3, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    a3ca:	eef1 7a4c 	vneg.f32	s15, s24
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    a3ce:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a3d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (Lfloat)i;
    a3d6:	ee99 7a28 	vfnms.f32	s14, s18, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
    a3da:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a3de:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    a3e2:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    a3e6:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    a3ea:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    a3ee:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    a3f2:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    a3f6:	3301      	adds	r3, #1
    a3f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a3fc:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    a400:	e70d      	b.n	a21e <tMBSawPulse_tick+0x23e>
    a402:	bf00      	nop
    a404:	24028d4c 	.word	0x24028d4c
    a408:	00000000 	.word	0x00000000
    a40c:	42800000 	.word	0x42800000
    _tMBSawPulse* c = *osc;
    a410:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    a412:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    a416:	2b00      	cmp	r3, #0
    a418:	f000 80dc 	beq.w	a5d4 <tMBSawPulse_tick+0x5f4>
		r = MINBLEP_PHASES * phase * inv_w;
    a41c:	ed5f 9a05 	vldr	s19, [pc, #-20]	; a40c <tMBSawPulse_tick+0x42c>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    a420:	ee78 8a4b 	vsub.f32	s17, s16, s22
		i = lrintf(r - 0.5f);
    a424:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    a428:	ee69 9a29 	vmul.f32	s19, s18, s19
				x = -0.5f;
    a42c:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
    a430:	eea9 0aa8 	vfma.f32	s0, s19, s17
    a434:	f000 fe50 	bl	b0d8 <__lrintf_veneer>
		r -= (Lfloat)i;
    a438:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a43c:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    a440:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    a444:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a448:	3301      	adds	r3, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    a44a:	eef1 7a4c 	vneg.f32	s15, s24
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    a44e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a452:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (Lfloat)i;
    a456:	ee99 7aa8 	vfnms.f32	s14, s19, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
    a45a:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a45e:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    a462:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    a466:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    a46a:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    a46e:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    a472:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    a476:	3301      	adds	r3, #1
    a478:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a47c:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    a480:	e5fe      	b.n	a080 <tMBSawPulse_tick+0xa0>
				x = 0.5f;
    a482:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
			if (p < b) {
    a486:	ed5f 5a20 	vldr	s11, [pc, #-128]	; a408 <tMBSawPulse_tick+0x428>
    a48a:	e6c8      	b.n	a21e <tMBSawPulse_tick+0x23e>
		else if (sw < 0)
    a48c:	f57f aec5 	bpl.w	a21a <tMBSawPulse_tick+0x23a>
			if (p < b) {
    a490:	eeb4 8acb 	vcmpe.f32	s16, s22
    a494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a498:	f100 80de 	bmi.w	a658 <tMBSawPulse_tick+0x678>
			if (p < 0.0f) {
    a49c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    a4a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a4a4:	f57f aeb9 	bpl.w	a21a <tMBSawPulse_tick+0x23a>
    _tMBSawPulse* c = *osc;
    a4a8:	683d      	ldr	r5, [r7, #0]
				p += 1.0f;
    a4aa:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    if (c->active)
    a4ae:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				p += 1.0f;
    a4b2:	ee78 7a28 	vadd.f32	s15, s16, s17
    if (c->active)
    a4b6:	2b00      	cmp	r3, #0
    a4b8:	f000 83c7 	beq.w	ac4a <tMBSawPulse_tick+0xc6a>
		i = lrintf(r - 0.5f);
    a4bc:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    a4c0:	ed5f 9a2e 	vldr	s19, [pc, #-184]	; a40c <tMBSawPulse_tick+0x42c>
		r = MINBLEP_PHASES * phase * inv_w;
    a4c4:	ee29 9a08 	vmul.f32	s18, s18, s16
				p += 1.0f;
    a4c8:	eeb0 8a67 	vmov.f32	s16, s15
		i = lrintf(r - 0.5f);
    a4cc:	eeb0 0a6a 	vmov.f32	s0, s21
    a4d0:	eea9 0a29 	vfma.f32	s0, s18, s19
    a4d4:	f000 fe00 	bl	b0d8 <__lrintf_veneer>
		r -= (Lfloat)i;
    a4d8:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a4dc:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    a4e0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    a4e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    a4e8:	4acd      	ldr	r2, [pc, #820]	; (a820 <tMBSawPulse_tick+0x840>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a4ea:	3301      	adds	r3, #1
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    a4ec:	eef0 5a68 	vmov.f32	s11, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a4f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (Lfloat)i;
    a4f4:	eed9 7a29 	vfnms.f32	s15, s18, s19
		c->BLEPindices[c->mostRecentBLEP] = i;
    a4f8:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a4fc:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    a500:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    a504:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
    a508:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    a50c:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    a510:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    a514:	3301      	adds	r3, #1
    a516:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a51a:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    a51e:	e67e      	b.n	a21e <tMBSawPulse_tick+0x23e>
			if (p < 0.0f) {
    a520:	eeb5 8a40 	vcmp.f32	s16, #0.0
    a524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a528:	d505      	bpl.n	a536 <tMBSawPulse_tick+0x556>
    a52a:	eef5 7a40 	vcmp.f32	s15, #0.0
    a52e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a532:	f100 8280 	bmi.w	aa36 <tMBSawPulse_tick+0xa56>
		 if (!k)
    a536:	eddf 5abb 	vldr	s11, [pc, #748]	; a824 <tMBSawPulse_tick+0x844>
    a53a:	e670      	b.n	a21e <tMBSawPulse_tick+0x23e>
    a53c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
    a540:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
    a544:	e6e2      	b.n	a30c <tMBSawPulse_tick+0x32c>
				 if (p_at_reset >= 1.0f)
    a546:	eef4 dae9 	vcmpe.f32	s27, s19
    a54a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a54e:	f280 8171 	bge.w	a834 <tMBSawPulse_tick+0x854>
    _tMBSawPulse* c = *osc;
    a552:	46a1      	mov	r9, r4
    if (c->active)
    a554:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
    a558:	ee1c 8a90 	vmov	r8, s25
    a55c:	e602      	b.n	a164 <tMBSawPulse_tick+0x184>
    a55e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
				x = -0.5f;
    a562:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    a566:	e65a      	b.n	a21e <tMBSawPulse_tick+0x23e>
		r = MINBLEP_PHASES * phase * inv_w;
    a568:	eddf 9ab1 	vldr	s19, [pc, #708]	; a830 <tMBSawPulse_tick+0x850>
		i = lrintf(r - 0.5f);
    a56c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    a570:	ee69 9a29 	vmul.f32	s19, s18, s19
    a574:	eea9 0a88 	vfma.f32	s0, s19, s16
    a578:	f000 fdae 	bl	b0d8 <__lrintf_veneer>
		r -= (Lfloat)i;
    a57c:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a580:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    a584:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    a588:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a58c:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    a58e:	eed9 7a88 	vfnms.f32	s15, s19, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a592:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    a596:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a59a:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    a59e:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    a5a2:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    a5a6:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    a5aa:	edc2 8a3d 	vstr	s17, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    a5ae:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    a5b2:	3301      	adds	r3, #1
    a5b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a5b8:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    a5bc:	e6e1      	b.n	a382 <tMBSawPulse_tick+0x3a2>
			 else if (sw < 0)
    a5be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    a5c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a5c6:	f100 8172 	bmi.w	a8ae <tMBSawPulse_tick+0x8ce>
    c->_k = k;
    a5ca:	eef8 5aec 	vcvt.f32.s32	s11, s25
    p += sw - (int)sw;
    a5ce:	eeb0 8a68 	vmov.f32	s16, s17
    a5d2:	e624      	b.n	a21e <tMBSawPulse_tick+0x23e>
    a5d4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
				x = -0.5f;
    a5d8:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    a5dc:	e550      	b.n	a080 <tMBSawPulse_tick+0xa0>
					 p_at_reset -= 1.0f;
    a5de:	ee7d dae8 	vsub.f32	s27, s27, s17
    if (c->active)
    a5e2:	2b00      	cmp	r3, #0
    a5e4:	f000 8118 	beq.w	a818 <tMBSawPulse_tick+0x838>
		r = MINBLEP_PHASES * phase * inv_w;
    a5e8:	eddf 9a91 	vldr	s19, [pc, #580]	; a830 <tMBSawPulse_tick+0x850>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
    a5ec:	ee78 aa2d 	vadd.f32	s21, s16, s27
		i = lrintf(r - 0.5f);
    a5f0:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    a5f4:	ee69 9a29 	vmul.f32	s19, s18, s19
    a5f8:	eeaa 0aa9 	vfma.f32	s0, s21, s19
    a5fc:	f000 fd6c 	bl	b0d8 <__lrintf_veneer>
		r -= (Lfloat)i;
    a600:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a604:	f8b9 306a 	ldrh.w	r3, [r9, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    a608:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    a60c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a610:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    a612:	eeda 7aa9 	vfnms.f32	s15, s21, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a616:	f003 033f 	and.w	r3, r3, #63	; 0x3f
					 x = 0.5f;
    a61a:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		c->BLEPindices[c->mostRecentBLEP] = i;
    a61e:	eb09 0243 	add.w	r2, r9, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a622:	f8a9 306a 	strh.w	r3, [r9, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    a626:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    a62a:	eb09 02c3 	add.w	r2, r9, r3, lsl #3
    a62e:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    a632:	edc2 8a3d 	vstr	s17, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    a636:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
    a63a:	3301      	adds	r3, #1
    a63c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a640:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    a644:	f8d7 9000 	ldr.w	r9, [r7]
    if (c->active)
    a648:	f8d9 32f4 	ldr.w	r3, [r9, #756]	; 0x2f4
    a64c:	2b00      	cmp	r3, #0
    a64e:	f43f adba 	beq.w	a1c6 <tMBSawPulse_tick+0x1e6>
					 k = 0;
    a652:	f04f 0800 	mov.w	r8, #0
    a656:	e586      	b.n	a166 <tMBSawPulse_tick+0x186>
    _tMBSawPulse* c = *osc;
    a658:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    a65a:	edd5 cabd 	vldr	s25, [r5, #756]	; 0x2f4
    a65e:	ee1c 3a90 	vmov	r3, s25
    a662:	2b00      	cmp	r3, #0
    a664:	f000 8280 	beq.w	ab68 <tMBSawPulse_tick+0xb88>
		r = MINBLEP_PHASES * phase * inv_w;
    a668:	eddf 9a71 	vldr	s19, [pc, #452]	; a830 <tMBSawPulse_tick+0x850>
    a66c:	ee78 8a4b 	vsub.f32	s17, s16, s22
		i = lrintf(r - 0.5f);
    a670:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				k = 0;
    a674:	eddf ca6c 	vldr	s25, [pc, #432]	; a828 <tMBSawPulse_tick+0x848>
    a678:	ee69 9a29 	vmul.f32	s19, s18, s19
				x = 0.5f;
    a67c:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
    a680:	eea9 0aa8 	vfma.f32	s0, s19, s17
    a684:	f000 fd28 	bl	b0d8 <__lrintf_veneer>
		r -= (Lfloat)i;
    a688:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a68c:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    a690:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    a694:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a698:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    a69a:	eed9 7aa8 	vfnms.f32	s15, s19, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a69e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    a6a2:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a6a6:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    a6aa:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    a6ae:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    a6b2:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    a6b6:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    a6ba:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    a6be:	3301      	adds	r3, #1
    a6c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a6c4:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    a6c8:	e6e8      	b.n	a49c <tMBSawPulse_tick+0x4bc>
		 if (!k)
    a6ca:	ee1c 3a90 	vmov	r3, s25
        else if (sw < 0) p = 1.0f - eof_offset;
    a6ce:	ee39 eac8 	vsub.f32	s28, s19, s16
		 if (!k)
    a6d2:	2b00      	cmp	r3, #0
    a6d4:	f040 80ed 	bne.w	a8b2 <tMBSawPulse_tick+0x8d2>
				 if (p_at_reset < 0.0f)
    a6d8:	eef5 da40 	vcmp.f32	s27, #0.0
    a6dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a6e0:	f140 8085 	bpl.w	a7ee <tMBSawPulse_tick+0x80e>
    if (c->active)
    a6e4:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
					 p_at_reset += 1.0f;
    a6e8:	ee7d daa9 	vadd.f32	s27, s27, s19
    if (c->active)
    a6ec:	2b00      	cmp	r3, #0
    a6ee:	f040 82b4 	bne.w	ac5a <tMBSawPulse_tick+0xc7a>
				 if (k && p_at_reset < b)
    a6f2:	eeb4 baed 	vcmpe.f32	s22, s27
    a6f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a6fa:	f340 8354 	ble.w	ada6 <tMBSawPulse_tick+0xdc6>
        else if (sw < 0) p = 1.0f - eof_offset;
    a6fe:	eeb0 8a4e 	vmov.f32	s16, s28
    if (c->active)
    a702:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    a706:	2b00      	cmp	r3, #0
    a708:	f000 8252 	beq.w	abb0 <tMBSawPulse_tick+0xbd0>
		r = MINBLEP_PHASES * phase * inv_w;
    a70c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    a710:	eddf 9a47 	vldr	s19, [pc, #284]	; a830 <tMBSawPulse_tick+0x850>
		i = lrintf(r - 0.5f);
    a714:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				k = 1;
    a718:	eddf ca44 	vldr	s25, [pc, #272]	; a82c <tMBSawPulse_tick+0x84c>
    a71c:	ee69 9a29 	vmul.f32	s19, s18, s19
    a720:	ee7e 8a68 	vsub.f32	s17, s28, s17
				x = -0.5f;
    a724:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
    a728:	eea9 0aa8 	vfma.f32	s0, s19, s17
    a72c:	f000 fcd4 	bl	b0d8 <__lrintf_veneer>
		r -= (Lfloat)i;
    a730:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a734:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    a738:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    a73c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a740:	3301      	adds	r3, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -1.0f * shape);
    a742:	eef1 7a4c 	vneg.f32	s15, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a746:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (Lfloat)i;
    a74a:	ee99 7aa8 	vfnms.f32	s14, s19, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
    a74e:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a752:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    a756:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    a75a:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    a75e:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    a762:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    a766:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    a76a:	3301      	adds	r3, #1
    a76c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a770:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
			if (p < b) {
    a774:	eeb4 bace 	vcmpe.f32	s22, s28
    a778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a77c:	f77f ad4d 	ble.w	a21a <tMBSawPulse_tick+0x23a>
    _tMBSawPulse* c = *osc;
    a780:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    a782:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    a786:	2b00      	cmp	r3, #0
    a788:	f43f ae7b 	beq.w	a482 <tMBSawPulse_tick+0x4a2>
		r = MINBLEP_PHASES * phase * inv_w;
    a78c:	eddf 8a28 	vldr	s17, [pc, #160]	; a830 <tMBSawPulse_tick+0x850>
    a790:	ee3e ea4b 	vsub.f32	s28, s28, s22
		i = lrintf(r - 0.5f);
    a794:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    a798:	ee69 8a28 	vmul.f32	s17, s18, s17
				x = 0.5f;
    a79c:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
    a7a0:	eea8 0a8e 	vfma.f32	s0, s17, s28
    a7a4:	f000 fc98 	bl	b0d8 <__lrintf_veneer>
		r -= (Lfloat)i;
    a7a8:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a7ac:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    a7b0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    a7b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    a7b8:	eddf 5a1a 	vldr	s11, [pc, #104]	; a824 <tMBSawPulse_tick+0x844>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a7bc:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    a7be:	eed8 7a8e 	vfnms.f32	s15, s17, s28
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a7c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    a7c6:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a7ca:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    a7ce:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    a7d2:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    a7d6:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    a7da:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    a7de:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    a7e2:	3301      	adds	r3, #1
    a7e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a7e8:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    a7ec:	e517      	b.n	a21e <tMBSawPulse_tick+0x23e>
		else if (sw < 0)
    a7ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    a7f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a7f6:	f100 81b4 	bmi.w	ab62 <tMBSawPulse_tick+0xb82>
        else if (sw < 0) p = 1.0f - eof_offset;
    a7fa:	eeb0 8a4e 	vmov.f32	s16, s28
    a7fe:	eddf 5a09 	vldr	s11, [pc, #36]	; a824 <tMBSawPulse_tick+0x844>
    a802:	e50c      	b.n	a21e <tMBSawPulse_tick+0x23e>
    if (c->active)
    a804:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
    a808:	2b00      	cmp	r3, #0
    a80a:	f040 8172 	bne.w	aaf2 <tMBSawPulse_tick+0xb12>
				 if (p_at_reset >= 1.0f)
    a80e:	eef4 dae9 	vcmpe.f32	s27, s19
    a812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a816:	db19      	blt.n	a84c <tMBSawPulse_tick+0x86c>
				x = 0.5f;
    a818:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    a81c:	e4d3      	b.n	a1c6 <tMBSawPulse_tick+0x1e6>
    a81e:	bf00      	nop
    a820:	bf800000 	.word	0xbf800000
	...
    a82c:	00000001 	.word	0x00000001
    a830:	42800000 	.word	0x42800000
    if (c->active)
    a834:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
					 p_at_reset -= 1.0f;
    a838:	ee7d dae9 	vsub.f32	s27, s27, s19
    if (c->active)
    a83c:	2b00      	cmp	r3, #0
    a83e:	f040 8084 	bne.w	a94a <tMBSawPulse_tick+0x96a>
				 if (!k && p_at_reset >= b)
    a842:	eeb4 baed 	vcmpe.f32	s22, s27
    a846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a84a:	d8e5      	bhi.n	a818 <tMBSawPulse_tick+0x838>
    if (c->active)
    a84c:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    a850:	2b00      	cmp	r3, #0
    a852:	d0e1      	beq.n	a818 <tMBSawPulse_tick+0x838>
		r = MINBLEP_PHASES * phase * inv_w;
    a854:	ed5f 8a0a 	vldr	s17, [pc, #-40]	; a830 <tMBSawPulse_tick+0x850>
		i = lrintf(r - 0.5f);
    a858:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				x = 0.5f;
    a85c:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    a860:	ee69 8a28 	vmul.f32	s17, s18, s17
		i = lrintf(r - 0.5f);
    a864:	eea8 0a28 	vfma.f32	s0, s16, s17
    a868:	f000 fc36 	bl	b0d8 <__lrintf_veneer>
		r -= (Lfloat)i;
    a86c:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a870:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    a874:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    a878:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a87c:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    a87e:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a882:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    a886:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a88a:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    a88e:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    a892:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    a896:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    a89a:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    a89e:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    a8a2:	3301      	adds	r3, #1
    a8a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a8a8:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    a8ac:	e48b      	b.n	a1c6 <tMBSawPulse_tick+0x1e6>
    p += sw - (int)sw;
    a8ae:	eeb0 ea68 	vmov.f32	s28, s17
				 if (p_at_reset < b)
    a8b2:	eeb4 baed 	vcmpe.f32	s22, s27
    a8b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a8ba:	f300 8167 	bgt.w	ab8c <tMBSawPulse_tick+0xbac>
				 if (p_at_reset < 0.0f)
    a8be:	eef5 dac0 	vcmpe.f32	s27, #0.0
    if (c->active)
    a8c2:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				 if (p_at_reset < 0.0f)
    a8c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a8ca:	f100 8184 	bmi.w	abd6 <tMBSawPulse_tick+0xbf6>
        else if (sw < 0) p = 1.0f - eof_offset;
    a8ce:	eeb0 8a4e 	vmov.f32	s16, s28
    if (c->active)
    a8d2:	b38b      	cbz	r3, a938 <tMBSawPulse_tick+0x958>
		r = MINBLEP_PHASES * phase * inv_w;
    a8d4:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    a8d8:	ed5f 9a2b 	vldr	s19, [pc, #-172]	; a830 <tMBSawPulse_tick+0x850>
		i = lrintf(r - 0.5f);
    a8dc:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    a8e0:	ee69 9a29 	vmul.f32	s19, s18, s19
    a8e4:	ee7e ea68 	vsub.f32	s29, s28, s17
    a8e8:	eea9 0aae 	vfma.f32	s0, s19, s29
    a8ec:	f000 fbf4 	bl	b0d8 <__lrintf_veneer>
		r -= (Lfloat)i;
    a8f0:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a8f4:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
			tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset * sawShape);
    a8f8:	ee7c 7a68 	vsub.f32	s15, s24, s17
		r -= (Lfloat)i;
    a8fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    a900:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a904:	3301      	adds	r3, #1
			tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset * sawShape);
    a906:	ee67 7aad 	vmul.f32	s15, s15, s27
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a90a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (Lfloat)i;
    a90e:	ee99 7aae 	vfnms.f32	s14, s19, s29
		c->BLEPindices[c->mostRecentBLEP] = i;
    a912:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a916:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    a91a:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    a91e:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    a922:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    a926:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    a92a:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    a92e:	3301      	adds	r3, #1
    a930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a934:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
			if (!k) {
    a938:	ee1c 3a90 	vmov	r3, s25
    a93c:	2b00      	cmp	r3, #0
    a93e:	f47f af19 	bne.w	a774 <tMBSawPulse_tick+0x794>
    a942:	683d      	ldr	r5, [r7, #0]
    a944:	e6dd      	b.n	a702 <tMBSawPulse_tick+0x722>
    a946:	683d      	ldr	r5, [r7, #0]
    a948:	e780      	b.n	a84c <tMBSawPulse_tick+0x86c>
		i = lrintf(r - 0.5f);
    a94a:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
    a94e:	ed5f 8a48 	vldr	s17, [pc, #-288]	; a830 <tMBSawPulse_tick+0x850>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
    a952:	ee78 aa2d 	vadd.f32	s21, s16, s27
    a956:	ee69 8a28 	vmul.f32	s17, s18, s17
		i = lrintf(r - 0.5f);
    a95a:	eeb0 0a6c 	vmov.f32	s0, s25
    a95e:	eeaa 0aa8 	vfma.f32	s0, s21, s17
    a962:	f000 fbb9 	bl	b0d8 <__lrintf_veneer>
		r -= (Lfloat)i;
    a966:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a96a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    a96e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    a972:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a976:	3301      	adds	r3, #1
				 if (!k && p_at_reset >= b)
    a978:	eeb4 baed 	vcmpe.f32	s22, s27
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a97c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (Lfloat)i;
    a980:	eeda 7aa8 	vfnms.f32	s15, s21, s17
				 if (!k && p_at_reset >= b)
    a984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->BLEPindices[c->mostRecentBLEP] = i;
    a988:	eb04 0243 	add.w	r2, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a98c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    a990:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    a994:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    a998:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    a99c:	edc2 9a3d 	vstr	s19, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    a9a0:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    a9a4:	f103 0301 	add.w	r3, r3, #1
    a9a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a9ac:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    a9b0:	f8d7 9000 	ldr.w	r9, [r7]
    a9b4:	464d      	mov	r5, r9
    if (c->active)
    a9b6:	f8d9 32f4 	ldr.w	r3, [r9, #756]	; 0x2f4
				 if (!k && p_at_reset >= b)
    a9ba:	f200 8105 	bhi.w	abc8 <tMBSawPulse_tick+0xbe8>
    if (c->active)
    a9be:	2b00      	cmp	r3, #0
    a9c0:	f43f af44 	beq.w	a84c <tMBSawPulse_tick+0x86c>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    a9c4:	ee78 9a4b 	vsub.f32	s19, s16, s22
		i = lrintf(r - 0.5f);
    a9c8:	eeb0 0a6c 	vmov.f32	s0, s25
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    a9cc:	ee79 9aad 	vadd.f32	s19, s19, s27
		i = lrintf(r - 0.5f);
    a9d0:	eea9 0aa8 	vfma.f32	s0, s19, s17
    a9d4:	f000 fb80 	bl	b0d8 <__lrintf_veneer>
		r -= (Lfloat)i;
    a9d8:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a9dc:	f8b9 306a 	ldrh.w	r3, [r9, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    a9e0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    a9e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a9e8:	3301      	adds	r3, #1
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    a9ea:	eef1 7a4c 	vneg.f32	s15, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a9ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (Lfloat)i;
    a9f2:	ee99 7aa8 	vfnms.f32	s14, s19, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
    a9f6:	eb09 0243 	add.w	r2, r9, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a9fa:	f8a9 306a 	strh.w	r3, [r9, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    a9fe:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    aa02:	eb09 02c3 	add.w	r2, r9, r3, lsl #3
    aa06:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    aa0a:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    aa0e:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
    aa12:	3301      	adds	r3, #1
    aa14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    aa18:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    aa1c:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    aa1e:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    _tMBSawPulse* c = *osc;
    aa22:	46a9      	mov	r9, r5
    if (c->active)
    aa24:	2b00      	cmp	r3, #0
    aa26:	f43f af11 	beq.w	a84c <tMBSawPulse_tick+0x86c>
					 x = -0.5f;
    aa2a:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
					 k = 1;
    aa2e:	f04f 0801 	mov.w	r8, #1
    aa32:	f7ff bb98 	b.w	a166 <tMBSawPulse_tick+0x186>
    _tMBSawPulse* c = *osc;
    aa36:	683d      	ldr	r5, [r7, #0]
				p += 1.0f;
    aa38:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    if (c->active)
    aa3c:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				p += 1.0f;
    aa40:	ee78 8a28 	vadd.f32	s17, s16, s17
    if (c->active)
    aa44:	b353      	cbz	r3, aa9c <tMBSawPulse_tick+0xabc>
		r = MINBLEP_PHASES * phase * inv_w;
    aa46:	ee29 8a08 	vmul.f32	s16, s18, s16
		i = lrintf(r - 0.5f);
    aa4a:	ed5f 9a87 	vldr	s19, [pc, #-540]	; a830 <tMBSawPulse_tick+0x850>
    aa4e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    aa52:	eea8 0a29 	vfma.f32	s0, s16, s19
    aa56:	f000 fb3f 	bl	b0d8 <__lrintf_veneer>
		r -= (Lfloat)i;
    aa5a:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    aa5e:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    aa62:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    aa66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    aa6a:	4ad6      	ldr	r2, [pc, #856]	; (adc4 <tMBSawPulse_tick+0xde4>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    aa6c:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    aa6e:	eed8 7a29 	vfnms.f32	s15, s16, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    aa72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    aa76:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    aa7a:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    aa7e:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    aa82:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
    aa86:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    aa8a:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    aa8e:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    aa92:	3301      	adds	r3, #1
    aa94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    aa98:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
			if (k && p < b) {
    aa9c:	eeb4 bae8 	vcmpe.f32	s22, s17
    aaa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    aaa4:	f340 8177 	ble.w	ad96 <tMBSawPulse_tick+0xdb6>
    _tMBSawPulse* c = *osc;
    aaa8:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    aaaa:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    aaae:	2b00      	cmp	r3, #0
    aab0:	d064      	beq.n	ab7c <tMBSawPulse_tick+0xb9c>
		r = MINBLEP_PHASES * phase * inv_w;
    aab2:	eddf 7ac5 	vldr	s15, [pc, #788]	; adc8 <tMBSawPulse_tick+0xde8>
    aab6:	ee78 9acb 	vsub.f32	s19, s17, s22
		i = lrintf(r - 0.5f);
    aaba:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    aabe:	ee29 9a27 	vmul.f32	s18, s18, s15
				x = 0.5f;
    aac2:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    aac6:	eeb0 8a68 	vmov.f32	s16, s17
		i = lrintf(r - 0.5f);
    aaca:	eea9 0a29 	vfma.f32	s0, s18, s19
    aace:	f000 fb03 	bl	b0d8 <__lrintf_veneer>
		r -= (Lfloat)i;
    aad2:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    aad6:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    aada:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    aade:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    aae2:	eddf 5aba 	vldr	s11, [pc, #744]	; adcc <tMBSawPulse_tick+0xdec>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    aae6:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    aae8:	eed9 7a29 	vfnms.f32	s15, s18, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    aaec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    aaf0:	e669      	b.n	a7c6 <tMBSawPulse_tick+0x7e6>
		r = MINBLEP_PHASES * phase * inv_w;
    aaf2:	eddf 9ab5 	vldr	s19, [pc, #724]	; adc8 <tMBSawPulse_tick+0xde8>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    aaf6:	ee78 8acb 	vsub.f32	s17, s17, s22
		i = lrintf(r - 0.5f);
    aafa:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 1;
    aafe:	f04f 0801 	mov.w	r8, #1
    ab02:	ee69 9a29 	vmul.f32	s19, s18, s19
					 x = -0.5f;
    ab06:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
    ab0a:	eea8 0aa9 	vfma.f32	s0, s17, s19
    ab0e:	f000 fae3 	bl	b0d8 <__lrintf_veneer>
		r -= (Lfloat)i;
    ab12:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    ab16:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    ab1a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    ab1e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    ab22:	4443      	add	r3, r8
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    ab24:	eef1 7a4c 	vneg.f32	s15, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    ab28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (Lfloat)i;
    ab2c:	ee98 7aa9 	vfnms.f32	s14, s17, s19
		c->BLEPindices[c->mostRecentBLEP] = i;
    ab30:	eb04 0243 	add.w	r2, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    ab34:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    ab38:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    ab3c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    ab40:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    ab44:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    ab48:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    ab4c:	4443      	add	r3, r8
    ab4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ab52:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    ab56:	f8d7 9000 	ldr.w	r9, [r7]
    if (c->active)
    ab5a:	f8d9 32f4 	ldr.w	r3, [r9, #756]	; 0x2f4
    ab5e:	f7ff baf9 	b.w	a154 <tMBSawPulse_tick+0x174>
    ab62:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    ab66:	e6b2      	b.n	a8ce <tMBSawPulse_tick+0x8ee>
			if (p < 0.0f) {
    ab68:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    ab6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ab70:	f100 8109 	bmi.w	ad86 <tMBSawPulse_tick+0xda6>
				x = 0.5f;
    ab74:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    ab78:	f7ff bb4f 	b.w	a21a <tMBSawPulse_tick+0x23a>
				x = 0.5f;
    ab7c:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    ab80:	eddf 5a92 	vldr	s11, [pc, #584]	; adcc <tMBSawPulse_tick+0xdec>
    ab84:	eeb0 8a68 	vmov.f32	s16, s17
    ab88:	f7ff bb49 	b.w	a21e <tMBSawPulse_tick+0x23e>
    if (c->active)
    ab8c:	edd5 cabd 	vldr	s25, [r5, #756]	; 0x2f4
    ab90:	ee1c 3a90 	vmov	r3, s25
    ab94:	2b00      	cmp	r3, #0
    ab96:	f040 80bd 	bne.w	ad14 <tMBSawPulse_tick+0xd34>
				 if (p_at_reset < 0.0f)
    ab9a:	eef5 dac0 	vcmpe.f32	s27, #0.0
    ab9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    aba2:	f100 80e9 	bmi.w	ad78 <tMBSawPulse_tick+0xd98>
					 x = 0.5f;
    aba6:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
        else if (sw < 0) p = 1.0f - eof_offset;
    abaa:	eeb0 8a4e 	vmov.f32	s16, s28
    abae:	e6c3      	b.n	a938 <tMBSawPulse_tick+0x958>
			if (p < b) {
    abb0:	eeb4 bace 	vcmpe.f32	s22, s28
    abb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    abb8:	f73f ac63 	bgt.w	a482 <tMBSawPulse_tick+0x4a2>
				x = -0.5f;
    abbc:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				k = 1;
    abc0:	eddf ca83 	vldr	s25, [pc, #524]	; add0 <tMBSawPulse_tick+0xdf0>
    abc4:	f7ff bb29 	b.w	a21a <tMBSawPulse_tick+0x23a>
    if (c->active)
    abc8:	2b00      	cmp	r3, #0
    abca:	f43f ae25 	beq.w	a818 <tMBSawPulse_tick+0x838>
    abce:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    abd2:	f7ff bac8 	b.w	a166 <tMBSawPulse_tick+0x186>
					 p_at_reset += 1.0f;
    abd6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    abda:	ee7d daa7 	vadd.f32	s27, s27, s15
    if (c->active)
    abde:	2b00      	cmp	r3, #0
    abe0:	f000 80ca 	beq.w	ad78 <tMBSawPulse_tick+0xd98>
		r = MINBLEP_PHASES * phase * inv_w;
    abe4:	ed9f 8a78 	vldr	s16, [pc, #480]	; adc8 <tMBSawPulse_tick+0xde8>
		i = lrintf(r - 0.5f);
    abe8:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 1;
    abec:	eddf ca78 	vldr	s25, [pc, #480]	; add0 <tMBSawPulse_tick+0xdf0>
    abf0:	ee29 8a08 	vmul.f32	s16, s18, s16
					 x = -0.5f;
    abf4:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
    abf8:	eea8 0a28 	vfma.f32	s0, s16, s17
    abfc:	f000 fa6c 	bl	b0d8 <__lrintf_veneer>
		r -= (Lfloat)i;
    ac00:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    ac04:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    ac08:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    ac0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    ac10:	4a6c      	ldr	r2, [pc, #432]	; (adc4 <tMBSawPulse_tick+0xde4>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    ac12:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    ac14:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    ac18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    ac1c:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    ac20:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    ac24:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    ac28:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
    ac2c:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    ac30:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    ac34:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    ac38:	3301      	adds	r3, #1
    ac3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ac3e:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    ac42:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    ac44:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    ac48:	e641      	b.n	a8ce <tMBSawPulse_tick+0x8ee>
				x = -0.5f;
    ac4a:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				p += 1.0f;
    ac4e:	eeb0 8a67 	vmov.f32	s16, s15
    ac52:	eef0 5a68 	vmov.f32	s11, s17
    ac56:	f7ff bae2 	b.w	a21e <tMBSawPulse_tick+0x23e>
		r = MINBLEP_PHASES * phase * inv_w;
    ac5a:	eddf 9a5b 	vldr	s19, [pc, #364]	; adc8 <tMBSawPulse_tick+0xde8>
		i = lrintf(r - 0.5f);
    ac5e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    ac62:	ee69 9a29 	vmul.f32	s19, s18, s19
    ac66:	eea9 0aa8 	vfma.f32	s0, s19, s17
    ac6a:	f000 fa35 	bl	b0d8 <__lrintf_veneer>
		r -= (Lfloat)i;
    ac6e:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    ac72:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    ac76:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    ac7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    ac7e:	4a51      	ldr	r2, [pc, #324]	; (adc4 <tMBSawPulse_tick+0xde4>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    ac80:	3301      	adds	r3, #1
				 if (k && p_at_reset < b)
    ac82:	eeb4 baed 	vcmpe.f32	s22, s27
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    ac86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (Lfloat)i;
    ac8a:	eed9 7aa8 	vfnms.f32	s15, s19, s17
				 if (k && p_at_reset < b)
    ac8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->BLEPindices[c->mostRecentBLEP] = i;
    ac92:	eb04 0143 	add.w	r1, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    ac96:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    ac9a:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    ac9e:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    aca2:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    aca6:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    acaa:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    acae:	f103 0301 	add.w	r3, r3, #1
    acb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    acb6:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    acba:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    acbc:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				 if (k && p_at_reset < b)
    acc0:	dd76      	ble.n	adb0 <tMBSawPulse_tick+0xdd0>
    if (c->active)
    acc2:	2b00      	cmp	r3, #0
    acc4:	f43f ad1b 	beq.w	a6fe <tMBSawPulse_tick+0x71e>
		r = MINBLEP_PHASES * phase * inv_w;
    acc8:	ee38 8a4b 	vsub.f32	s16, s16, s22
		i = lrintf(r - 0.5f);
    accc:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 x = 0.5f;
    acd0:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    acd4:	ee38 8a2d 	vadd.f32	s16, s16, s27
		i = lrintf(r - 0.5f);
    acd8:	eea8 0a29 	vfma.f32	s0, s16, s19
    acdc:	f000 f9fc 	bl	b0d8 <__lrintf_veneer>
		r -= (Lfloat)i;
    ace0:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    ace4:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    ace8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    acec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    acf0:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    acf2:	eed8 7a29 	vfnms.f32	s15, s16, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    acf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    acfa:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    acfe:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    ad02:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    ad06:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    ad0a:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    ad0e:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    ad12:	e78f      	b.n	ac34 <tMBSawPulse_tick+0xc54>
		r = MINBLEP_PHASES * phase * inv_w;
    ad14:	ed9f 8a2c 	vldr	s16, [pc, #176]	; adc8 <tMBSawPulse_tick+0xde8>
    ad18:	ee78 9acb 	vsub.f32	s19, s17, s22
		i = lrintf(r - 0.5f);
    ad1c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 0;
    ad20:	ee0c 8a90 	vmov	s25, r8
    ad24:	ee29 8a08 	vmul.f32	s16, s18, s16
					 x = 0.5f;
    ad28:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
    ad2c:	eea9 0a88 	vfma.f32	s0, s19, s16
    ad30:	f000 f9d2 	bl	b0d8 <__lrintf_veneer>
		r -= (Lfloat)i;
    ad34:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    ad38:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    ad3c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    ad40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    ad44:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    ad46:	eed9 7a88 	vfnms.f32	s15, s19, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    ad4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    ad4e:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    ad52:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    ad56:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    ad5a:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    ad5e:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    ad62:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    ad66:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    ad6a:	3301      	adds	r3, #1
    ad6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ad70:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    ad74:	683d      	ldr	r5, [r7, #0]
    ad76:	e5a2      	b.n	a8be <tMBSawPulse_tick+0x8de>
				k = 1;
    ad78:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    ad7c:	eddf ca14 	vldr	s25, [pc, #80]	; add0 <tMBSawPulse_tick+0xdf0>
    ad80:	eeb0 8a4e 	vmov.f32	s16, s28
    ad84:	e4f6      	b.n	a774 <tMBSawPulse_tick+0x794>
				p += 1.0f;
    ad86:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
				x = -0.5f;
    ad8a:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				p += 1.0f;
    ad8e:	ee38 8a25 	vadd.f32	s16, s16, s11
    if (c->active)
    ad92:	f7ff ba44 	b.w	a21e <tMBSawPulse_tick+0x23e>
    ad96:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    ad9a:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    ad9e:	eeb0 8a68 	vmov.f32	s16, s17
    ada2:	f7ff ba3c 	b.w	a21e <tMBSawPulse_tick+0x23e>
				 if (k && p_at_reset < b)
    ada6:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    adaa:	eddf ca09 	vldr	s25, [pc, #36]	; add0 <tMBSawPulse_tick+0xdf0>
    adae:	e6fc      	b.n	abaa <tMBSawPulse_tick+0xbca>
    adb0:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    adb4:	eddf ca06 	vldr	s25, [pc, #24]	; add0 <tMBSawPulse_tick+0xdf0>
		else if (sw < 0)
    adb8:	e589      	b.n	a8ce <tMBSawPulse_tick+0x8ee>
    p += sw - (int)sw;
    adba:	eeb0 8a68 	vmov.f32	s16, s17
    adbe:	f7ff b94c 	b.w	a05a <tMBSawPulse_tick+0x7a>
    adc2:	bf00      	nop
    adc4:	bf800000 	.word	0xbf800000
    adc8:	42800000 	.word	0x42800000
    adcc:	00000000 	.word	0x00000000
    add0:	00000001 	.word	0x00000001
    add4:	f3af 8000 	nop.w
    add8:	f3af 8000 	nop.w
    addc:	f3af 8000 	nop.w

0000ade0 <tMBSawPulse_setFreq>:
    _tMBSawPulse* c = *osc;
    ade0:	6803      	ldr	r3, [r0, #0]
    c->_inv_w = 1.0f / c->_w;
    ade2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    if ((f > 6000.0f) || (f < -6000.0f))
    ade6:	eddf 6a14 	vldr	s13, [pc, #80]	; ae38 <tMBSawPulse_setFreq+0x58>
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    adea:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
    if ((f > 6000.0f) || (f < -6000.0f))
    adee:	eeb4 0ae6 	vcmpe.f32	s0, s13
    c->freq = f;
    adf2:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    adf6:	ee60 7a27 	vmul.f32	s15, s0, s15
    if ((f > 6000.0f) || (f < -6000.0f))
    adfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->_inv_w = 1.0f / c->_w;
    adfe:	ee87 6a27 	vdiv.f32	s12, s14, s15
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    ae02:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
    ae06:	ed83 6a0f 	vstr	s12, [r3, #60]	; 0x3c
    if ((f > 6000.0f) || (f < -6000.0f))
    ae0a:	dc0c      	bgt.n	ae26 <tMBSawPulse_setFreq+0x46>
    ae0c:	eddf 7a0b 	vldr	s15, [pc, #44]	; ae3c <tMBSawPulse_setFreq+0x5c>
    ae10:	eeb4 0ae7 	vcmpe.f32	s0, s15
    ae14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ae18:	d405      	bmi.n	ae26 <tMBSawPulse_setFreq+0x46>
    	c->active = 1;
    ae1a:	2201      	movs	r2, #1
    ae1c:	ed83 7abc 	vstr	s14, [r3, #752]	; 0x2f0
    ae20:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
}
    ae24:	4770      	bx	lr
    	c->gain = 0.0f;
    ae26:	ed9f 7a06 	vldr	s14, [pc, #24]	; ae40 <tMBSawPulse_setFreq+0x60>
    	c->active = 0;
    ae2a:	2200      	movs	r2, #0
    ae2c:	ed83 7abc 	vstr	s14, [r3, #752]	; 0x2f0
    ae30:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
}
    ae34:	4770      	bx	lr
    ae36:	bf00      	nop
    ae38:	45bb8000 	.word	0x45bb8000
    ae3c:	c5bb8000 	.word	0xc5bb8000
    ae40:	00000000 	.word	0x00000000
    ae44:	f3af 8000 	nop.w
    ae48:	f3af 8000 	nop.w
    ae4c:	f3af 8000 	nop.w
    ae50:	f3af 8000 	nop.w
    ae54:	f3af 8000 	nop.w
    ae58:	f3af 8000 	nop.w
    ae5c:	f3af 8000 	nop.w

0000ae60 <tMBSawPulse_sync>:
    _tMBSawPulse* c = *osc;
    ae60:	6803      	ldr	r3, [r0, #0]
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
    ae62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    Lfloat last = c->lastsyncin;
    ae66:	edd3 7a03 	vldr	s15, [r3, #12]
    c->lastsyncin = value;
    ae6a:	ed83 0a03 	vstr	s0, [r3, #12]
    Lfloat delta = value - last;
    ae6e:	ee30 6a67 	vsub.f32	s12, s0, s15
    Lfloat crossing = -last / delta;
    ae72:	eef1 7a67 	vneg.f32	s15, s15
    ae76:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
    ae7a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
    ae7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ae82:	eef4 6ac7 	vcmpe.f32	s13, s14
    ae86:	bfcc      	ite	gt
    ae88:	2201      	movgt	r2, #1
    ae8a:	2200      	movle	r2, #0
    ae8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ae90:	f002 0201 	and.w	r2, r2, #1
    ae94:	bf88      	it	hi
    ae96:	2200      	movhi	r2, #0
    ae98:	b122      	cbz	r2, aea4 <tMBSawPulse_sync+0x44>
    ae9a:	eeb5 0a40 	vcmp.f32	s0, #0.0
    ae9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    aea2:	da04      	bge.n	aeae <tMBSawPulse_sync+0x4e>
    else c->sync = 0.f;
    aea4:	ed9f 7a05 	vldr	s14, [pc, #20]	; aebc <tMBSawPulse_sync+0x5c>
    aea8:	ed83 7a04 	vstr	s14, [r3, #16]
}
    aeac:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
    aeae:	ee37 7a66 	vsub.f32	s14, s14, s13
    aeb2:	ee27 7a06 	vmul.f32	s14, s14, s12
    aeb6:	ed83 7a04 	vstr	s14, [r3, #16]
}
    aeba:	4770      	bx	lr
    aebc:	00000000 	.word	0x00000000

0000aec0 <__tSimpleLivingString3_setLevStrength_veneer>:
    aec0:	f85f f000 	ldr.w	pc, [pc]	; aec4 <__tSimpleLivingString3_setLevStrength_veneer+0x4>
    aec4:	24014ff5 	.word	0x24014ff5

0000aec8 <__tSimpleLivingString5_setPickupPoint_veneer>:
    aec8:	f85f f000 	ldr.w	pc, [pc]	; aecc <__tSimpleLivingString5_setPickupPoint_veneer+0x4>
    aecc:	24015ce9 	.word	0x24015ce9

0000aed0 <__tSimpleLivingString5_tick_veneer>:
    aed0:	f85f f000 	ldr.w	pc, [pc]	; aed4 <__tSimpleLivingString5_tick_veneer+0x4>
    aed4:	240159b5 	.word	0x240159b5

0000aed8 <__tVZFilterLS_tick_veneer>:
    aed8:	f85f f000 	ldr.w	pc, [pc]	; aedc <__tVZFilterLS_tick_veneer+0x4>
    aedc:	24012169 	.word	0x24012169

0000aee0 <__tVZFilter_tickEfficient_veneer>:
    aee0:	f85f f000 	ldr.w	pc, [pc]	; aee4 <__tVZFilter_tickEfficient_veneer+0x4>
    aee4:	24011801 	.word	0x24011801

0000aee8 <__LEAF_poly_blamp_veneer>:
    aee8:	f85f f000 	ldr.w	pc, [pc]	; aeec <__LEAF_poly_blamp_veneer+0x4>
    aeec:	24013c91 	.word	0x24013c91

0000aef0 <__tVZFilterBell_setBandwidth_veneer>:
    aef0:	f85f f000 	ldr.w	pc, [pc]	; aef4 <__tVZFilterBell_setBandwidth_veneer+0x4>
    aef4:	240127d5 	.word	0x240127d5

0000aef8 <__tVoc_set_tenseness_veneer>:
    aef8:	f85f f000 	ldr.w	pc, [pc]	; aefc <__tVoc_set_tenseness_veneer+0x4>
    aefc:	24016ccd 	.word	0x24016ccd

0000af00 <__tSimpleLivingString5_setFFAmount_veneer>:
    af00:	f85f f000 	ldr.w	pc, [pc]	; af04 <__tSimpleLivingString5_setFFAmount_veneer+0x4>
    af04:	24015d19 	.word	0x24015d19

0000af08 <__tCrusher_setOperation_veneer>:
    af08:	f85f f000 	ldr.w	pc, [pc]	; af0c <__tCrusher_setOperation_veneer+0x4>
    af0c:	24010dc1 	.word	0x24010dc1

0000af10 <__tSquareLFO_setFreq_veneer>:
    af10:	f85f f000 	ldr.w	pc, [pc]	; af14 <__tSquareLFO_setFreq_veneer+0x4>
    af14:	24014789 	.word	0x24014789

0000af18 <__HAL_RNG_GenerateRandomNumber_veneer>:
    af18:	f85f f000 	ldr.w	pc, [pc]	; af1c <__HAL_RNG_GenerateRandomNumber_veneer+0x4>
    af1c:	24009e15 	.word	0x24009e15

0000af20 <__changeOversampling_veneer>:
    af20:	f85f f000 	ldr.w	pc, [pc]	; af24 <__changeOversampling_veneer+0x4>
    af24:	24000661 	.word	0x24000661

0000af28 <__tSVF_setQ_veneer>:
    af28:	f85f f000 	ldr.w	pc, [pc]	; af2c <__tSVF_setQ_veneer+0x4>
    af2c:	240116cd 	.word	0x240116cd

0000af30 <__tSimpleLivingString5_setFBAmount_veneer>:
    af30:	f85f f000 	ldr.w	pc, [pc]	; af34 <__tSimpleLivingString5_setFBAmount_veneer+0x4>
    af34:	24015cf1 	.word	0x24015cf1

0000af38 <__tSimpleLivingString5_setDampFreq_veneer>:
    af38:	f85f f000 	ldr.w	pc, [pc]	; af3c <__tSimpleLivingString5_setDampFreq_veneer+0x4>
    af3c:	240157b5 	.word	0x240157b5

0000af40 <__tLadderFilter_setFreqFast_veneer>:
    af40:	f85f f000 	ldr.w	pc, [pc]	; af44 <__tLadderFilter_setFreqFast_veneer+0x4>
    af44:	24013685 	.word	0x24013685

0000af48 <__HAL_I2C_Slave_Receive_IT_veneer>:
    af48:	f85f f000 	ldr.w	pc, [pc]	; af4c <__HAL_I2C_Slave_Receive_IT_veneer+0x4>
    af4c:	240073e5 	.word	0x240073e5

0000af50 <__setEffectsFunctions_veneer>:
    af50:	f85f f000 	ldr.w	pc, [pc]	; af54 <__setEffectsFunctions_veneer+0x4>
    af54:	24002eb1 	.word	0x24002eb1

0000af58 <__tSimpleLivingString3_free_veneer>:
    af58:	f85f f000 	ldr.w	pc, [pc]	; af5c <__tSimpleLivingString3_free_veneer+0x4>
    af5c:	24014eb1 	.word	0x24014eb1

0000af60 <__LEAF_poly_blep_veneer>:
    af60:	f85f f000 	ldr.w	pc, [pc]	; af64 <__LEAF_poly_blep_veneer+0x4>
    af64:	24013c39 	.word	0x24013c39

0000af68 <__tSVF_setFreqFast_veneer>:
    af68:	f85f f000 	ldr.w	pc, [pc]	; af6c <__tSVF_setFreqFast_veneer+0x4>
    af6c:	24011649 	.word	0x24011649

0000af70 <__tSquareLFO_setPulseWidth_veneer>:
    af70:	f85f f000 	ldr.w	pc, [pc]	; af74 <__tSquareLFO_setPulseWidth_veneer+0x4>
    af74:	240147b9 	.word	0x240147b9

0000af78 <__tSimpleLivingString3_initToPool_veneer>:
    af78:	f85f f000 	ldr.w	pc, [pc]	; af7c <__tSimpleLivingString3_initToPool_veneer+0x4>
    af7c:	24014c31 	.word	0x24014c31

0000af80 <__LEAF_shaper_veneer>:
    af80:	f85f f000 	ldr.w	pc, [pc]	; af84 <__LEAF_shaper_veneer+0x4>
    af84:	240138b9 	.word	0x240138b9

0000af88 <__tSimpleLivingString5_setPrepPosition_veneer>:
    af88:	f85f f000 	ldr.w	pc, [pc]	; af8c <__tSimpleLivingString5_setPrepPosition_veneer+0x4>
    af8c:	240157e9 	.word	0x240157e9

0000af90 <__tEnvelopeFollower_tick_veneer>:
    af90:	f85f f000 	ldr.w	pc, [pc]	; af94 <__tEnvelopeFollower_tick_veneer+0x4>
    af94:	24010685 	.word	0x24010685

0000af98 <__setLFOShapes_veneer>:
    af98:	f85f f000 	ldr.w	pc, [pc]	; af9c <__setLFOShapes_veneer+0x4>
    af9c:	24003515 	.word	0x24003515

0000afa0 <__tSimpleLivingString3_setLevMode_veneer>:
    afa0:	f85f f000 	ldr.w	pc, [pc]	; afa4 <__tSimpleLivingString3_setLevMode_veneer+0x4>
    afa4:	24014ffd 	.word	0x24014ffd

0000afa8 <__tSimpleLivingString5_initToPool_veneer>:
    afa8:	f85f f000 	ldr.w	pc, [pc]	; afac <__tSimpleLivingString5_initToPool_veneer+0x4>
    afac:	24015329 	.word	0x24015329

0000afb0 <__tSimpleLivingString5_setPrepIndex_veneer>:
    afb0:	f85f f000 	ldr.w	pc, [pc]	; afb4 <__tSimpleLivingString5_setPrepIndex_veneer+0x4>
    afb4:	240157f1 	.word	0x240157f1

0000afb8 <__LEAF_interpolation_linear_veneer>:
    afb8:	f85f f000 	ldr.w	pc, [pc]	; afbc <__LEAF_interpolation_linear_veneer+0x4>
    afbc:	24013d55 	.word	0x24013d55

0000afc0 <__mtof_veneer>:
    afc0:	f85f f000 	ldr.w	pc, [pc]	; afc4 <__mtof_veneer+0x4>
    afc4:	24013d7d 	.word	0x24013d7d

0000afc8 <__tVZFilterBell_setFreq_veneer>:
    afc8:	f85f f000 	ldr.w	pc, [pc]	; afcc <__tVZFilterBell_setFreq_veneer+0x4>
    afcc:	24012861 	.word	0x24012861

0000afd0 <__tIntPhasor_setFreq_veneer>:
    afd0:	f85f f000 	ldr.w	pc, [pc]	; afd4 <__tIntPhasor_setFreq_veneer+0x4>
    afd4:	240145bd 	.word	0x240145bd

0000afd8 <__tSimpleLivingString3_tick_veneer>:
    afd8:	f85f f000 	ldr.w	pc, [pc]	; afdc <__tSimpleLivingString3_tick_veneer+0x4>
    afdc:	24015169 	.word	0x24015169

0000afe0 <__LEAF_map_veneer>:
    afe0:	f85f f000 	ldr.w	pc, [pc]	; afe4 <__LEAF_map_veneer+0x4>
    afe4:	2401373d 	.word	0x2401373d

0000afe8 <__tVZFilterHS_setGain_veneer>:
    afe8:	f85f f000 	ldr.w	pc, [pc]	; afec <__tVZFilterHS_setGain_veneer+0x4>
    afec:	24012531 	.word	0x24012531

0000aff0 <__tPBTriangle_setSkew_veneer>:
    aff0:	f85f f000 	ldr.w	pc, [pc]	; aff4 <__tPBTriangle_setSkew_veneer+0x4>
    aff4:	240142c5 	.word	0x240142c5

0000aff8 <__tTapeDelay_setDelay_veneer>:
    aff8:	f85f f000 	ldr.w	pc, [pc]	; affc <__tTapeDelay_setDelay_veneer+0x4>
    affc:	24010b81 	.word	0x24010b81

0000b000 <__LEAF_tanh_veneer>:
    b000:	f85f f000 	ldr.w	pc, [pc]	; b004 <__LEAF_tanh_veneer+0x4>
    b004:	2401397d 	.word	0x2401397d

0000b008 <__tPBSawSquare_setShape_veneer>:
    b008:	f85f f000 	ldr.w	pc, [pc]	; b00c <__tPBSawSquare_setShape_veneer+0x4>
    b00c:	24014475 	.word	0x24014475

0000b010 <__arm_fir_interpolate_f32_veneer>:
    b010:	f85f f000 	ldr.w	pc, [pc]	; b014 <__arm_fir_interpolate_f32_veneer+0x4>
    b014:	2401710d 	.word	0x2401710d

0000b018 <__tSimpleLivingString3_setDampFreq_veneer>:
    b018:	f85f f000 	ldr.w	pc, [pc]	; b01c <__tSimpleLivingString3_setDampFreq_veneer+0x4>
    b01c:	24014f91 	.word	0x24014f91

0000b020 <__tVoc_setFreq_veneer>:
    b020:	f85f f000 	ldr.w	pc, [pc]	; b024 <__tVoc_setFreq_veneer+0x4>
    b024:	24016cc1 	.word	0x24016cc1

0000b028 <__tPBSineTriangle_setShape_veneer>:
    b028:	f85f f000 	ldr.w	pc, [pc]	; b02c <__tPBSineTriangle_setShape_veneer+0x4>
    b02c:	24014369 	.word	0x24014369

0000b030 <__HAL_GPIO_WritePin_veneer>:
    b030:	f85f f000 	ldr.w	pc, [pc]	; b034 <__HAL_GPIO_WritePin_veneer+0x4>
    b034:	24006df1 	.word	0x24006df1

0000b038 <__tCrusher_setQuality_veneer>:
    b038:	f85f f000 	ldr.w	pc, [pc]	; b03c <__tCrusher_setQuality_veneer+0x4>
    b03c:	24010dd5 	.word	0x24010dd5

0000b040 <__tPBPulse_setWidth_veneer>:
    b040:	f85f f000 	ldr.w	pc, [pc]	; b044 <__tPBPulse_setWidth_veneer+0x4>
    b044:	240143c1 	.word	0x240143c1

0000b048 <__tVoc_set_velum_veneer>:
    b048:	f85f f000 	ldr.w	pc, [pc]	; b04c <__tVoc_set_velum_veneer+0x4>
    b04c:	24016cd9 	.word	0x24016cd9

0000b050 <__tSVF_tick_veneer>:
    b050:	f85f f000 	ldr.w	pc, [pc]	; b054 <__tSVF_tick_veneer+0x4>
    b054:	240115dd 	.word	0x240115dd

0000b058 <__tVZFilterLS_setResonance_veneer>:
    b058:	f85f f000 	ldr.w	pc, [pc]	; b05c <__tVZFilterLS_setResonance_veneer+0x4>
    b05c:	240122a9 	.word	0x240122a9

0000b060 <__tSineTriLFO_setShape_veneer>:
    b060:	f85f f000 	ldr.w	pc, [pc]	; b064 <__tSineTriLFO_setShape_veneer+0x4>
    b064:	24014c25 	.word	0x24014c25

0000b068 <__tVZFilter_setGain_veneer>:
    b068:	f85f f000 	ldr.w	pc, [pc]	; b06c <__tVZFilter_setGain_veneer+0x4>
    b06c:	24011f45 	.word	0x24011f45

0000b070 <__tSquareLFO_setPhase_veneer>:
    b070:	f85f f000 	ldr.w	pc, [pc]	; b074 <__tSquareLFO_setPhase_veneer+0x4>
    b074:	240147f9 	.word	0x240147f9

0000b078 <__tSimpleLivingString5_setFreq_veneer>:
    b078:	f85f f000 	ldr.w	pc, [pc]	; b07c <__tSimpleLivingString5_setFreq_veneer+0x4>
    b07c:	24015751 	.word	0x24015751

0000b080 <__HAL_SPI_Abort_veneer>:
    b080:	f85f f000 	ldr.w	pc, [pc]	; b084 <__HAL_SPI_Abort_veneer+0x4>
    b084:	2400ba19 	.word	0x2400ba19

0000b088 <__powf_veneer>:
    b088:	f85f f000 	ldr.w	pc, [pc]	; b08c <__powf_veneer+0x4>
    b08c:	24017f31 	.word	0x24017f31

0000b090 <__tCrusher_setRound_veneer>:
    b090:	f85f f000 	ldr.w	pc, [pc]	; b094 <__tCrusher_setRound_veneer+0x4>
    b094:	24010e21 	.word	0x24010e21

0000b098 <__tSimpleLivingString3_pluck_veneer>:
    b098:	f85f f000 	ldr.w	pc, [pc]	; b09c <__tSimpleLivingString3_pluck_veneer+0x4>
    b09c:	24015011 	.word	0x24015011

0000b0a0 <__memcpy_veneer>:
    b0a0:	f85f f000 	ldr.w	pc, [pc]	; b0a4 <__memcpy_veneer+0x4>
    b0a4:	24017aa5 	.word	0x24017aa5

0000b0a8 <__tIntPhasor_setPhase_veneer>:
    b0a8:	f85f f000 	ldr.w	pc, [pc]	; b0ac <__tIntPhasor_setPhase_veneer+0x4>
    b0ac:	240145d5 	.word	0x240145d5

0000b0b0 <__tCrusher_tick_veneer>:
    b0b0:	f85f f000 	ldr.w	pc, [pc]	; b0b4 <__tCrusher_tick_veneer+0x4>
    b0b4:	24010d41 	.word	0x24010d41

0000b0b8 <__tTriLFO_setFreq_veneer>:
    b0b8:	f85f f000 	ldr.w	pc, [pc]	; b0bc <__tTriLFO_setFreq_veneer+0x4>
    b0bc:	24014a65 	.word	0x24014a65

0000b0c0 <__tVZFilterBell_setGain_veneer>:
    b0c0:	f85f f000 	ldr.w	pc, [pc]	; b0c4 <__tVZFilterBell_setGain_veneer+0x4>
    b0c4:	24012a2d 	.word	0x24012a2d

0000b0c8 <__tSimpleLivingString3_setDecay_veneer>:
    b0c8:	f85f f000 	ldr.w	pc, [pc]	; b0cc <__tSimpleLivingString3_setDecay_veneer+0x4>
    b0cc:	24014f99 	.word	0x24014f99

0000b0d0 <__MX_SPI1_Init_veneer>:
    b0d0:	f85f f000 	ldr.w	pc, [pc]	; b0d4 <__MX_SPI1_Init_veneer+0x4>
    b0d4:	240046d9 	.word	0x240046d9

0000b0d8 <__lrintf_veneer>:
    b0d8:	f85f f000 	ldr.w	pc, [pc]	; b0dc <__lrintf_veneer+0x4>
    b0dc:	24018899 	.word	0x24018899

0000b0e0 <__tSineTriLFO_setPhase_veneer>:
    b0e0:	f85f f000 	ldr.w	pc, [pc]	; b0e4 <__tSineTriLFO_setPhase_veneer+0x4>
    b0e4:	24014bf5 	.word	0x24014bf5

0000b0e8 <__tNoise_tick_veneer>:
    b0e8:	f85f f000 	ldr.w	pc, [pc]	; b0ec <__tNoise_tick_veneer+0x4>
    b0ec:	240144c9 	.word	0x240144c9

0000b0f0 <__tSawSquareLFO_tick_veneer>:
    b0f0:	f85f f000 	ldr.w	pc, [pc]	; b0f4 <__tSawSquareLFO_tick_veneer+0x4>
    b0f4:	240148a5 	.word	0x240148a5

0000b0f8 <__tSimpleLivingString5_setTargetLev_veneer>:
    b0f8:	f85f f000 	ldr.w	pc, [pc]	; b0fc <__tSimpleLivingString5_setTargetLev_veneer+0x4>
    b0fc:	240157f9 	.word	0x240157f9

0000b100 <__tVZFilter_setFreqFast_veneer>:
    b100:	f85f f000 	ldr.w	pc, [pc]	; b104 <__tVZFilter_setFreqFast_veneer+0x4>
    b104:	24011c71 	.word	0x24011c71

0000b108 <__tTriLFO_tick_veneer>:
    b108:	f85f f000 	ldr.w	pc, [pc]	; b10c <__tTriLFO_tick_veneer+0x4>
    b10c:	24014a31 	.word	0x24014a31

0000b110 <__tSimpleLivingString5_setPluckPosition_veneer>:
    b110:	f85f f000 	ldr.w	pc, [pc]	; b114 <__tSimpleLivingString5_setPluckPosition_veneer+0x4>
    b114:	2401583d 	.word	0x2401583d

0000b118 <__tLinearDelay_setDelay_veneer>:
    b118:	f85f f000 	ldr.w	pc, [pc]	; b11c <__tLinearDelay_setDelay_veneer+0x4>
    b11c:	24010971 	.word	0x24010971

0000b120 <__tDiodeFilter_setFreqFast_veneer>:
    b120:	f85f f000 	ldr.w	pc, [pc]	; b124 <__tDiodeFilter_setFreqFast_veneer+0x4>
    b124:	240132c1 	.word	0x240132c1

0000b128 <__tVZFilterBell_tick_veneer>:
    b128:	f85f f000 	ldr.w	pc, [pc]	; b12c <__tVZFilterBell_tick_veneer+0x4>
    b12c:	2401277d 	.word	0x2401277d

0000b130 <__fastSine_veneer>:
    b130:	f85f f000 	ldr.w	pc, [pc]	; b134 <__fastSine_veneer+0x4>
    b134:	240139f9 	.word	0x240139f9

0000b138 <__tVZFilterHS_tick_veneer>:
    b138:	f85f f000 	ldr.w	pc, [pc]	; b13c <__tVZFilterHS_tick_veneer+0x4>
    b13c:	24012451 	.word	0x24012451

0000b140 <__tExpSmooth_setValAndDest_veneer>:
    b140:	f85f f000 	ldr.w	pc, [pc]	; b144 <__tExpSmooth_setValAndDest_veneer+0x4>
    b144:	24011299 	.word	0x24011299

0000b148 <__tLadderFilter_tick_veneer>:
    b148:	f85f f000 	ldr.w	pc, [pc]	; b14c <__tLadderFilter_tick_veneer+0x4>
    b14c:	24013435 	.word	0x24013435

0000b150 <__tCycle_setPhase_veneer>:
    b150:	f85f f000 	ldr.w	pc, [pc]	; b154 <__tCycle_setPhase_veneer+0x4>
    b154:	24014241 	.word	0x24014241

0000b158 <__tDiodeFilter_tickEfficient_veneer>:
    b158:	f85f f000 	ldr.w	pc, [pc]	; b15c <__tDiodeFilter_tickEfficient_veneer+0x4>
    b15c:	24012f29 	.word	0x24012f29

0000b160 <__tSquareLFO_tick_veneer>:
    b160:	f85f f000 	ldr.w	pc, [pc]	; b164 <__tSquareLFO_tick_veneer+0x4>
    b164:	24014741 	.word	0x24014741

0000b168 <__tVZFilterHS_setFreqFast_veneer>:
    b168:	f85f f000 	ldr.w	pc, [pc]	; b16c <__tVZFilterHS_setFreqFast_veneer+0x4>
    b16c:	240124a5 	.word	0x240124a5

0000b170 <__tSimpleLivingString3_setTargetLev_veneer>:
    b170:	f85f f000 	ldr.w	pc, [pc]	; b174 <__tSimpleLivingString3_setTargetLev_veneer+0x4>
    b174:	24014fe5 	.word	0x24014fe5

0000b178 <__arm_sin_f32_veneer>:
    b178:	f85f f000 	ldr.w	pc, [pc]	; b17c <__arm_sin_f32_veneer+0x4>
    b17c:	240178fd 	.word	0x240178fd

0000b180 <__tDiodeFilter_setQ_veneer>:
    b180:	f85f f000 	ldr.w	pc, [pc]	; b184 <__tDiodeFilter_setQ_veneer+0x4>
    b184:	2401331d 	.word	0x2401331d

0000b188 <__tVZFilterHS_setResonance_veneer>:
    b188:	f85f f000 	ldr.w	pc, [pc]	; b18c <__tVZFilterHS_setResonance_veneer+0x4>
    b18c:	2401258d 	.word	0x2401258d

0000b190 <__tSawSquareLFO_setShape_veneer>:
    b190:	f85f f000 	ldr.w	pc, [pc]	; b194 <__tSawSquareLFO_setShape_veneer+0x4>
    b194:	240149d5 	.word	0x240149d5

0000b198 <__tVZFilter_setFreq_veneer>:
    b198:	f85f f000 	ldr.w	pc, [pc]	; b19c <__tVZFilter_setFreq_veneer+0x4>
    b19c:	24011c41 	.word	0x24011c41

0000b1a0 <__setFilterTypes_veneer>:
    b1a0:	f85f f000 	ldr.w	pc, [pc]	; b1a4 <__setFilterTypes_veneer+0x4>
    b1a4:	2400337d 	.word	0x2400337d

0000b1a8 <__arm_fir_decimate_f32_veneer>:
    b1a8:	f85f f000 	ldr.w	pc, [pc]	; b1ac <__arm_fir_decimate_f32_veneer+0x4>
    b1ac:	2401758d 	.word	0x2401758d

0000b1b0 <__tSimpleLivingString5_pluck_veneer>:
    b1b0:	f85f f000 	ldr.w	pc, [pc]	; b1b4 <__tSimpleLivingString5_pluck_veneer+0x4>
    b1b4:	24015845 	.word	0x24015845

0000b1b8 <__tSimpleLivingString5_setFoldDepth_veneer>:
    b1b8:	f85f f000 	ldr.w	pc, [pc]	; b1bc <__tSimpleLivingString5_setFoldDepth_veneer+0x4>
    b1bc:	24015d41 	.word	0x24015d41

0000b1c0 <__HAL_SPI_TransmitReceive_DMA_veneer>:
    b1c0:	f85f f000 	ldr.w	pc, [pc]	; b1c4 <__HAL_SPI_TransmitReceive_DMA_veneer+0x4>
    b1c4:	2400b7dd 	.word	0x2400b7dd

0000b1c8 <__tHighpass_tick_veneer>:
    b1c8:	f85f f000 	ldr.w	pc, [pc]	; b1cc <__tHighpass_tick_veneer+0x4>
    b1cc:	240117bd 	.word	0x240117bd

0000b1d0 <__tSimpleLivingString3_setFreq_veneer>:
    b1d0:	f85f f000 	ldr.w	pc, [pc]	; b1d4 <__tSimpleLivingString3_setFreq_veneer+0x4>
    b1d4:	24014ef1 	.word	0x24014ef1

0000b1d8 <__tSawSquareLFO_setFreq_veneer>:
    b1d8:	f85f f000 	ldr.w	pc, [pc]	; b1dc <__tSawSquareLFO_setFreq_veneer+0x4>
    b1dc:	24014929 	.word	0x24014929

0000b1e0 <__tVZFilter_setResonance_veneer>:
    b1e0:	f85f f000 	ldr.w	pc, [pc]	; b1e4 <__tVZFilter_setResonance_veneer+0x4>
    b1e4:	24011f7d 	.word	0x24011f7d

0000b1e8 <__tSimpleLivingString3_setPickupPoint_veneer>:
    b1e8:	f85f f000 	ldr.w	pc, [pc]	; b1ec <__tSimpleLivingString3_setPickupPoint_veneer+0x4>
    b1ec:	2401531d 	.word	0x2401531d

0000b1f0 <__MX_SPI6_Init_veneer>:
    b1f0:	f85f f000 	ldr.w	pc, [pc]	; b1f4 <__MX_SPI6_Init_veneer+0x4>
    b1f4:	24004731 	.word	0x24004731

0000b1f8 <__tLinearDelay_tick_veneer>:
    b1f8:	f85f f000 	ldr.w	pc, [pc]	; b1fc <__tLinearDelay_tick_veneer+0x4>
    b1fc:	24010879 	.word	0x24010879

0000b200 <__tIntPhasor_tick_veneer>:
    b200:	f85f f000 	ldr.w	pc, [pc]	; b204 <__tIntPhasor_tick_veneer+0x4>
    b204:	2401459d 	.word	0x2401459d

0000b208 <__tSimpleLivingString5_free_veneer>:
    b208:	f85f f000 	ldr.w	pc, [pc]	; b20c <__tSimpleLivingString5_free_veneer+0x4>
    b20c:	240156b5 	.word	0x240156b5

0000b210 <__tTriLFO_setPhase_veneer>:
    b210:	f85f f000 	ldr.w	pc, [pc]	; b214 <__tTriLFO_setPhase_veneer+0x4>
    b214:	24014a7d 	.word	0x24014a7d

0000b218 <__tCycle_setFreq_veneer>:
    b218:	f85f f000 	ldr.w	pc, [pc]	; b21c <__tCycle_setFreq_veneer+0x4>
    b21c:	24014229 	.word	0x24014229

0000b220 <__tSimpleLivingString5_setDecay_veneer>:
    b220:	f85f f000 	ldr.w	pc, [pc]	; b224 <__tSimpleLivingString5_setDecay_veneer+0x4>
    b224:	240157dd 	.word	0x240157dd

0000b228 <__tDiodeFilter_tick_veneer>:
    b228:	f85f f000 	ldr.w	pc, [pc]	; b22c <__tDiodeFilter_tick_veneer+0x4>
    b22c:	24012b91 	.word	0x24012b91

0000b230 <__tCompressor_tick_veneer>:
    b230:	f85f f000 	ldr.w	pc, [pc]	; b234 <__tCompressor_tick_veneer+0x4>
    b234:	24010ed9 	.word	0x24010ed9

0000b238 <__tLadderFilter_setQ_veneer>:
    b238:	f85f f000 	ldr.w	pc, [pc]	; b23c <__tLadderFilter_setQ_veneer+0x4>
    b23c:	240136e9 	.word	0x240136e9

0000b240 <__tVZFilterLS_setGain_veneer>:
    b240:	f85f f000 	ldr.w	pc, [pc]	; b244 <__tVZFilterLS_setGain_veneer+0x4>
    b244:	24012249 	.word	0x24012249

0000b248 <__faster_mtof_veneer>:
    b248:	f85f f000 	ldr.w	pc, [pc]	; b24c <__faster_mtof_veneer+0x4>
    b24c:	24013dd1 	.word	0x24013dd1

0000b250 <__tSimpleLivingString5_setLevMode_veneer>:
    b250:	f85f f000 	ldr.w	pc, [pc]	; b254 <__tSimpleLivingString5_setLevMode_veneer+0x4>
    b254:	24015821 	.word	0x24015821

0000b258 <__tCycle_tick_veneer>:
    b258:	f85f f000 	ldr.w	pc, [pc]	; b25c <__tCycle_tick_veneer+0x4>
    b25c:	240141dd 	.word	0x240141dd

0000b260 <__tVoc_set_tongue_shape_and_touch_veneer>:
    b260:	f85f f000 	ldr.w	pc, [pc]	; b264 <__tVoc_set_tongue_shape_and_touch_veneer+0x4>
    b264:	24016fc9 	.word	0x24016fc9

0000b268 <__fasterexpf_veneer>:
    b268:	f85f f000 	ldr.w	pc, [pc]	; b26c <__fasterexpf_veneer+0x4>
    b26c:	240137d5 	.word	0x240137d5

0000b270 <__tSineTriLFO_setFreq_veneer>:
    b270:	f85f f000 	ldr.w	pc, [pc]	; b274 <__tSineTriLFO_setFreq_veneer+0x4>
    b274:	24014bc5 	.word	0x24014bc5

0000b278 <__tVZFilterLS_setFreqFast_veneer>:
    b278:	f85f f000 	ldr.w	pc, [pc]	; b27c <__tVZFilterLS_setFreqFast_veneer+0x4>
    b27c:	240121bd 	.word	0x240121bd

0000b280 <__tSimpleLivingString3_setLevSmoothFactor_veneer>:
    b280:	f85f f000 	ldr.w	pc, [pc]	; b284 <__tSimpleLivingString3_setLevSmoothFactor_veneer+0x4>
    b284:	24014fed 	.word	0x24014fed

0000b288 <__memset_veneer>:
    b288:	f85f f000 	ldr.w	pc, [pc]	; b28c <__memset_veneer+0x4>
    b28c:	24017a41 	.word	0x24017a41

0000b290 <__tanhf_veneer>:
    b290:	f85f f000 	ldr.w	pc, [pc]	; b294 <__tanhf_veneer+0x4>
    b294:	240184ed 	.word	0x240184ed

0000b298 <__tVoc_tick_veneer>:
    b298:	f85f f000 	ldr.w	pc, [pc]	; b29c <__tVoc_tick_veneer+0x4>
    b29c:	24016c6d 	.word	0x24016c6d

0000b2a0 <__tSineTriLFO_tick_veneer>:
    b2a0:	f85f f000 	ldr.w	pc, [pc]	; b2a4 <__tSineTriLFO_tick_veneer+0x4>
    b2a4:	24014b29 	.word	0x24014b29

0000b2a8 <__tCrusher_setSamplingRatio_veneer>:
    b2a8:	f85f f000 	ldr.w	pc, [pc]	; b2ac <__tCrusher_setSamplingRatio_veneer+0x4>
    b2ac:	24010e29 	.word	0x24010e29

0000b2b0 <__tSawSquareLFO_setPhase_veneer>:
    b2b0:	f85f f000 	ldr.w	pc, [pc]	; b2b4 <__tSawSquareLFO_setPhase_veneer+0x4>
    b2b4:	24014971 	.word	0x24014971
