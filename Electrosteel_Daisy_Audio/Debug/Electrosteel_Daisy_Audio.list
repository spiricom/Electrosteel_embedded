
Electrosteel_Daisy_Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  24000000  24000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00027da8  24000298  24000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab    00000000  24028040  24028040  00059790  2**0
                  CONTENTS
  3 .exidx        00000000  24028040  24028040  00059790  2**0
                  CONTENTS
  4 .ARM.attributes 0000002e  24028040  24028040  00059790  2**0
                  CONTENTS, READONLY
  5 .init_array   00000004  24028040  24028040  00038040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  24028044  24028044  00038044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .sram1_bss    00040000  24040000  24040000  00060000  2**5
                  ALLOC
  8 .sram2_dma_bss 00000880  30000000  30000000  00060000  2**5
                  ALLOC
  9 .sram2_bss    00043180  30002000  30002000  00062000  2**5
                  ALLOC
 10 .sram3_bss    00000080  38000000  38000000  00060000  2**5
                  ALLOC
 11 .userflash    00000020  38800000  38800000  00060000  2**5
                  ALLOC
 12 .data         00000928  20000000  24028048  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          0001d630  20000928  24028970  00060928  2**3
                  ALLOC
 14 .itcmram      00009390  00000400  24028970  00050400  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .sdram_bss    02000000  c0000000  c0000000  00060000  2**5
                  ALLOC
 16 .qspiflash_text 00000000  90040000  90040000  000597be  2**0
                  CONTENTS
 17 .qspiflash_data 00000000  90040000  90040000  000597be  2**0
                  CONTENTS
 18 .qspiflash_bss 00000000  90040000  90040000  000597be  2**0
                  CONTENTS
 19 .heap         00000000  2001df58  2001df58  000597be  2**0
                  CONTENTS
 20 .reserved_for_stack 00000000  2001df58  2001df58  000597be  2**0
                  CONTENTS
 21 DISCARD       000000ac  2001df58  2001df58  000597c0  2**2
                  CONTENTS, READONLY
 22 .comment      00000043  00000000  00000000  0005986c  2**0
                  CONTENTS, READONLY
 23 .debug_info   0009873e  00000000  00000000  000598af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_abbrev 0000bc55  00000000  00000000  000f1fed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_loclists 0005c47a  00000000  00000000  000fdc42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_aranges 00004360  00000000  00000000  0015a0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_rnglists 00009c96  00000000  00000000  0015e41c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_macro  00046dd7  00000000  00000000  001680b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_line   000865e3  00000000  00000000  001aee89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_str    001771a9  00000000  00000000  0023546c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 31 .debug_frame  0000ed28  00000000  00000000  003ac618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

24000298 <__do_global_dtors_aux>:
24000298:	b510      	push	{r4, lr}
2400029a:	4c05      	ldr	r4, [pc, #20]	; (240002b0 <__do_global_dtors_aux+0x18>)
2400029c:	7823      	ldrb	r3, [r4, #0]
2400029e:	b933      	cbnz	r3, 240002ae <__do_global_dtors_aux+0x16>
240002a0:	4b04      	ldr	r3, [pc, #16]	; (240002b4 <__do_global_dtors_aux+0x1c>)
240002a2:	b113      	cbz	r3, 240002aa <__do_global_dtors_aux+0x12>
240002a4:	4804      	ldr	r0, [pc, #16]	; (240002b8 <__do_global_dtors_aux+0x20>)
240002a6:	f3af 8000 	nop.w
240002aa:	2301      	movs	r3, #1
240002ac:	7023      	strb	r3, [r4, #0]
240002ae:	bd10      	pop	{r4, pc}
240002b0:	20000928 	.word	0x20000928
240002b4:	00000000 	.word	0x00000000
240002b8:	00009790 	.word	0x00009790

240002bc <frame_dummy>:
240002bc:	b508      	push	{r3, lr}
240002be:	4b03      	ldr	r3, [pc, #12]	; (240002cc <frame_dummy+0x10>)
240002c0:	b11b      	cbz	r3, 240002ca <frame_dummy+0xe>
240002c2:	4903      	ldr	r1, [pc, #12]	; (240002d0 <frame_dummy+0x14>)
240002c4:	4803      	ldr	r0, [pc, #12]	; (240002d4 <frame_dummy+0x18>)
240002c6:	f3af 8000 	nop.w
240002ca:	bd08      	pop	{r3, pc}
240002cc:	00000000 	.word	0x00000000
240002d0:	2000092c 	.word	0x2000092c
240002d4:	00009790 	.word	0x00009790

240002d8 <strlen>:
240002d8:	4603      	mov	r3, r0
240002da:	f813 2b01 	ldrb.w	r2, [r3], #1
240002de:	2a00      	cmp	r2, #0
240002e0:	d1fb      	bne.n	240002da <strlen+0x2>
240002e2:	1a18      	subs	r0, r3, r0
240002e4:	3801      	subs	r0, #1
240002e6:	4770      	bx	lr

240002e8 <__aeabi_drsub>:
240002e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
240002ec:	e002      	b.n	240002f4 <__adddf3>
240002ee:	bf00      	nop

240002f0 <__aeabi_dsub>:
240002f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

240002f4 <__adddf3>:
240002f4:	b530      	push	{r4, r5, lr}
240002f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
240002fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
240002fe:	ea94 0f05 	teq	r4, r5
24000302:	bf08      	it	eq
24000304:	ea90 0f02 	teqeq	r0, r2
24000308:	bf1f      	itttt	ne
2400030a:	ea54 0c00 	orrsne.w	ip, r4, r0
2400030e:	ea55 0c02 	orrsne.w	ip, r5, r2
24000312:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
24000316:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
2400031a:	f000 80e2 	beq.w	240004e2 <__adddf3+0x1ee>
2400031e:	ea4f 5454 	mov.w	r4, r4, lsr #21
24000322:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
24000326:	bfb8      	it	lt
24000328:	426d      	neglt	r5, r5
2400032a:	dd0c      	ble.n	24000346 <__adddf3+0x52>
2400032c:	442c      	add	r4, r5
2400032e:	ea80 0202 	eor.w	r2, r0, r2
24000332:	ea81 0303 	eor.w	r3, r1, r3
24000336:	ea82 0000 	eor.w	r0, r2, r0
2400033a:	ea83 0101 	eor.w	r1, r3, r1
2400033e:	ea80 0202 	eor.w	r2, r0, r2
24000342:	ea81 0303 	eor.w	r3, r1, r3
24000346:	2d36      	cmp	r5, #54	; 0x36
24000348:	bf88      	it	hi
2400034a:	bd30      	pophi	{r4, r5, pc}
2400034c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
24000350:	ea4f 3101 	mov.w	r1, r1, lsl #12
24000354:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
24000358:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
2400035c:	d002      	beq.n	24000364 <__adddf3+0x70>
2400035e:	4240      	negs	r0, r0
24000360:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
24000364:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
24000368:	ea4f 3303 	mov.w	r3, r3, lsl #12
2400036c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
24000370:	d002      	beq.n	24000378 <__adddf3+0x84>
24000372:	4252      	negs	r2, r2
24000374:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
24000378:	ea94 0f05 	teq	r4, r5
2400037c:	f000 80a7 	beq.w	240004ce <__adddf3+0x1da>
24000380:	f1a4 0401 	sub.w	r4, r4, #1
24000384:	f1d5 0e20 	rsbs	lr, r5, #32
24000388:	db0d      	blt.n	240003a6 <__adddf3+0xb2>
2400038a:	fa02 fc0e 	lsl.w	ip, r2, lr
2400038e:	fa22 f205 	lsr.w	r2, r2, r5
24000392:	1880      	adds	r0, r0, r2
24000394:	f141 0100 	adc.w	r1, r1, #0
24000398:	fa03 f20e 	lsl.w	r2, r3, lr
2400039c:	1880      	adds	r0, r0, r2
2400039e:	fa43 f305 	asr.w	r3, r3, r5
240003a2:	4159      	adcs	r1, r3
240003a4:	e00e      	b.n	240003c4 <__adddf3+0xd0>
240003a6:	f1a5 0520 	sub.w	r5, r5, #32
240003aa:	f10e 0e20 	add.w	lr, lr, #32
240003ae:	2a01      	cmp	r2, #1
240003b0:	fa03 fc0e 	lsl.w	ip, r3, lr
240003b4:	bf28      	it	cs
240003b6:	f04c 0c02 	orrcs.w	ip, ip, #2
240003ba:	fa43 f305 	asr.w	r3, r3, r5
240003be:	18c0      	adds	r0, r0, r3
240003c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
240003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
240003c8:	d507      	bpl.n	240003da <__adddf3+0xe6>
240003ca:	f04f 0e00 	mov.w	lr, #0
240003ce:	f1dc 0c00 	rsbs	ip, ip, #0
240003d2:	eb7e 0000 	sbcs.w	r0, lr, r0
240003d6:	eb6e 0101 	sbc.w	r1, lr, r1
240003da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
240003de:	d31b      	bcc.n	24000418 <__adddf3+0x124>
240003e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
240003e4:	d30c      	bcc.n	24000400 <__adddf3+0x10c>
240003e6:	0849      	lsrs	r1, r1, #1
240003e8:	ea5f 0030 	movs.w	r0, r0, rrx
240003ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
240003f0:	f104 0401 	add.w	r4, r4, #1
240003f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
240003f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
240003fc:	f080 809a 	bcs.w	24000534 <__adddf3+0x240>
24000400:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
24000404:	bf08      	it	eq
24000406:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
2400040a:	f150 0000 	adcs.w	r0, r0, #0
2400040e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
24000412:	ea41 0105 	orr.w	r1, r1, r5
24000416:	bd30      	pop	{r4, r5, pc}
24000418:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
2400041c:	4140      	adcs	r0, r0
2400041e:	eb41 0101 	adc.w	r1, r1, r1
24000422:	3c01      	subs	r4, #1
24000424:	bf28      	it	cs
24000426:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
2400042a:	d2e9      	bcs.n	24000400 <__adddf3+0x10c>
2400042c:	f091 0f00 	teq	r1, #0
24000430:	bf04      	itt	eq
24000432:	4601      	moveq	r1, r0
24000434:	2000      	moveq	r0, #0
24000436:	fab1 f381 	clz	r3, r1
2400043a:	bf08      	it	eq
2400043c:	3320      	addeq	r3, #32
2400043e:	f1a3 030b 	sub.w	r3, r3, #11
24000442:	f1b3 0220 	subs.w	r2, r3, #32
24000446:	da0c      	bge.n	24000462 <__adddf3+0x16e>
24000448:	320c      	adds	r2, #12
2400044a:	dd08      	ble.n	2400045e <__adddf3+0x16a>
2400044c:	f102 0c14 	add.w	ip, r2, #20
24000450:	f1c2 020c 	rsb	r2, r2, #12
24000454:	fa01 f00c 	lsl.w	r0, r1, ip
24000458:	fa21 f102 	lsr.w	r1, r1, r2
2400045c:	e00c      	b.n	24000478 <__adddf3+0x184>
2400045e:	f102 0214 	add.w	r2, r2, #20
24000462:	bfd8      	it	le
24000464:	f1c2 0c20 	rsble	ip, r2, #32
24000468:	fa01 f102 	lsl.w	r1, r1, r2
2400046c:	fa20 fc0c 	lsr.w	ip, r0, ip
24000470:	bfdc      	itt	le
24000472:	ea41 010c 	orrle.w	r1, r1, ip
24000476:	4090      	lslle	r0, r2
24000478:	1ae4      	subs	r4, r4, r3
2400047a:	bfa2      	ittt	ge
2400047c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
24000480:	4329      	orrge	r1, r5
24000482:	bd30      	popge	{r4, r5, pc}
24000484:	ea6f 0404 	mvn.w	r4, r4
24000488:	3c1f      	subs	r4, #31
2400048a:	da1c      	bge.n	240004c6 <__adddf3+0x1d2>
2400048c:	340c      	adds	r4, #12
2400048e:	dc0e      	bgt.n	240004ae <__adddf3+0x1ba>
24000490:	f104 0414 	add.w	r4, r4, #20
24000494:	f1c4 0220 	rsb	r2, r4, #32
24000498:	fa20 f004 	lsr.w	r0, r0, r4
2400049c:	fa01 f302 	lsl.w	r3, r1, r2
240004a0:	ea40 0003 	orr.w	r0, r0, r3
240004a4:	fa21 f304 	lsr.w	r3, r1, r4
240004a8:	ea45 0103 	orr.w	r1, r5, r3
240004ac:	bd30      	pop	{r4, r5, pc}
240004ae:	f1c4 040c 	rsb	r4, r4, #12
240004b2:	f1c4 0220 	rsb	r2, r4, #32
240004b6:	fa20 f002 	lsr.w	r0, r0, r2
240004ba:	fa01 f304 	lsl.w	r3, r1, r4
240004be:	ea40 0003 	orr.w	r0, r0, r3
240004c2:	4629      	mov	r1, r5
240004c4:	bd30      	pop	{r4, r5, pc}
240004c6:	fa21 f004 	lsr.w	r0, r1, r4
240004ca:	4629      	mov	r1, r5
240004cc:	bd30      	pop	{r4, r5, pc}
240004ce:	f094 0f00 	teq	r4, #0
240004d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
240004d6:	bf06      	itte	eq
240004d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
240004dc:	3401      	addeq	r4, #1
240004de:	3d01      	subne	r5, #1
240004e0:	e74e      	b.n	24000380 <__adddf3+0x8c>
240004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
240004e6:	bf18      	it	ne
240004e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
240004ec:	d029      	beq.n	24000542 <__adddf3+0x24e>
240004ee:	ea94 0f05 	teq	r4, r5
240004f2:	bf08      	it	eq
240004f4:	ea90 0f02 	teqeq	r0, r2
240004f8:	d005      	beq.n	24000506 <__adddf3+0x212>
240004fa:	ea54 0c00 	orrs.w	ip, r4, r0
240004fe:	bf04      	itt	eq
24000500:	4619      	moveq	r1, r3
24000502:	4610      	moveq	r0, r2
24000504:	bd30      	pop	{r4, r5, pc}
24000506:	ea91 0f03 	teq	r1, r3
2400050a:	bf1e      	ittt	ne
2400050c:	2100      	movne	r1, #0
2400050e:	2000      	movne	r0, #0
24000510:	bd30      	popne	{r4, r5, pc}
24000512:	ea5f 5c54 	movs.w	ip, r4, lsr #21
24000516:	d105      	bne.n	24000524 <__adddf3+0x230>
24000518:	0040      	lsls	r0, r0, #1
2400051a:	4149      	adcs	r1, r1
2400051c:	bf28      	it	cs
2400051e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
24000522:	bd30      	pop	{r4, r5, pc}
24000524:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
24000528:	bf3c      	itt	cc
2400052a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
2400052e:	bd30      	popcc	{r4, r5, pc}
24000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
24000534:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
24000538:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
2400053c:	f04f 0000 	mov.w	r0, #0
24000540:	bd30      	pop	{r4, r5, pc}
24000542:	ea7f 5c64 	mvns.w	ip, r4, asr #21
24000546:	bf1a      	itte	ne
24000548:	4619      	movne	r1, r3
2400054a:	4610      	movne	r0, r2
2400054c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
24000550:	bf1c      	itt	ne
24000552:	460b      	movne	r3, r1
24000554:	4602      	movne	r2, r0
24000556:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
2400055a:	bf06      	itte	eq
2400055c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
24000560:	ea91 0f03 	teqeq	r1, r3
24000564:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
24000568:	bd30      	pop	{r4, r5, pc}
2400056a:	bf00      	nop

2400056c <__aeabi_ui2d>:
2400056c:	f090 0f00 	teq	r0, #0
24000570:	bf04      	itt	eq
24000572:	2100      	moveq	r1, #0
24000574:	4770      	bxeq	lr
24000576:	b530      	push	{r4, r5, lr}
24000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
2400057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
24000580:	f04f 0500 	mov.w	r5, #0
24000584:	f04f 0100 	mov.w	r1, #0
24000588:	e750      	b.n	2400042c <__adddf3+0x138>
2400058a:	bf00      	nop

2400058c <__aeabi_i2d>:
2400058c:	f090 0f00 	teq	r0, #0
24000590:	bf04      	itt	eq
24000592:	2100      	moveq	r1, #0
24000594:	4770      	bxeq	lr
24000596:	b530      	push	{r4, r5, lr}
24000598:	f44f 6480 	mov.w	r4, #1024	; 0x400
2400059c:	f104 0432 	add.w	r4, r4, #50	; 0x32
240005a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
240005a4:	bf48      	it	mi
240005a6:	4240      	negmi	r0, r0
240005a8:	f04f 0100 	mov.w	r1, #0
240005ac:	e73e      	b.n	2400042c <__adddf3+0x138>
240005ae:	bf00      	nop

240005b0 <__aeabi_f2d>:
240005b0:	0042      	lsls	r2, r0, #1
240005b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
240005b6:	ea4f 0131 	mov.w	r1, r1, rrx
240005ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
240005be:	bf1f      	itttt	ne
240005c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
240005c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
240005c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
240005cc:	4770      	bxne	lr
240005ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
240005d2:	bf08      	it	eq
240005d4:	4770      	bxeq	lr
240005d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
240005da:	bf04      	itt	eq
240005dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
240005e0:	4770      	bxeq	lr
240005e2:	b530      	push	{r4, r5, lr}
240005e4:	f44f 7460 	mov.w	r4, #896	; 0x380
240005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
240005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
240005f0:	e71c      	b.n	2400042c <__adddf3+0x138>
240005f2:	bf00      	nop

240005f4 <__aeabi_ul2d>:
240005f4:	ea50 0201 	orrs.w	r2, r0, r1
240005f8:	bf08      	it	eq
240005fa:	4770      	bxeq	lr
240005fc:	b530      	push	{r4, r5, lr}
240005fe:	f04f 0500 	mov.w	r5, #0
24000602:	e00a      	b.n	2400061a <__aeabi_l2d+0x16>

24000604 <__aeabi_l2d>:
24000604:	ea50 0201 	orrs.w	r2, r0, r1
24000608:	bf08      	it	eq
2400060a:	4770      	bxeq	lr
2400060c:	b530      	push	{r4, r5, lr}
2400060e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
24000612:	d502      	bpl.n	2400061a <__aeabi_l2d+0x16>
24000614:	4240      	negs	r0, r0
24000616:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
2400061a:	f44f 6480 	mov.w	r4, #1024	; 0x400
2400061e:	f104 0432 	add.w	r4, r4, #50	; 0x32
24000622:	ea5f 5c91 	movs.w	ip, r1, lsr #22
24000626:	f43f aed8 	beq.w	240003da <__adddf3+0xe6>
2400062a:	f04f 0203 	mov.w	r2, #3
2400062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
24000632:	bf18      	it	ne
24000634:	3203      	addne	r2, #3
24000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
2400063a:	bf18      	it	ne
2400063c:	3203      	addne	r2, #3
2400063e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
24000642:	f1c2 0320 	rsb	r3, r2, #32
24000646:	fa00 fc03 	lsl.w	ip, r0, r3
2400064a:	fa20 f002 	lsr.w	r0, r0, r2
2400064e:	fa01 fe03 	lsl.w	lr, r1, r3
24000652:	ea40 000e 	orr.w	r0, r0, lr
24000656:	fa21 f102 	lsr.w	r1, r1, r2
2400065a:	4414      	add	r4, r2
2400065c:	e6bd      	b.n	240003da <__adddf3+0xe6>
2400065e:	bf00      	nop

24000660 <arm_atan2_f32>:
*/


arm_status arm_atan2_f32(float32_t y,float32_t x,float32_t *result)
{
    if (x > 0.0f)
24000660:	eef5 0ac0 	vcmpe.f32	s1, #0.0
{
24000664:	4603      	mov	r3, r0
    if (x > 0.0f)
24000666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400066a:	dc12      	bgt.n	24000692 <arm_atan2_f32+0x32>
    {
        *result=arm_atan_f32(y/x);
        return(ARM_MATH_SUCCESS);
    }
    if (x < 0.0f)
2400066c:	d450      	bmi.n	24000710 <arm_atan2_f32+0xb0>
               *result= PI;
            }
        }
        return(ARM_MATH_SUCCESS);
    }
    if (x == 0.0f)
2400066e:	eef5 0a40 	vcmp.f32	s1, #0.0
24000672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24000676:	f040 8135 	bne.w	240008e4 <arm_atan2_f32+0x284>
    {
        if (y > 0.0f)
2400067a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2400067e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24000682:	f300 808e 	bgt.w	240007a2 <arm_atan2_f32+0x142>
        {
            *result=PIHALFF32;
            return(ARM_MATH_SUCCESS);
        }
        if (y < 0.0f)
24000686:	f140 812d 	bpl.w	240008e4 <arm_atan2_f32+0x284>
        {
            *result=-PIHALFF32;
2400068a:	4aac      	ldr	r2, [pc, #688]	; (2400093c <arm_atan2_f32+0x2dc>)
            return(ARM_MATH_SUCCESS);
2400068c:	2000      	movs	r0, #0
            *result=-PIHALFF32;
2400068e:	601a      	str	r2, [r3, #0]
            return(ARM_MATH_SUCCESS);
24000690:	4770      	bx	lr
        *result=arm_atan_f32(y/x);
24000692:	eec0 7a20 	vdiv.f32	s15, s0, s1
   if (x < 0.0f)
24000696:	eef5 7ac0 	vcmpe.f32	s15, #0.0
2400069a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400069e:	f100 80a9 	bmi.w	240007f4 <arm_atan2_f32+0x194>
   int sign=0;
240006a2:	2200      	movs	r2, #0
   if (x > 1.0f)
240006a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240006a8:	eef4 7ae6 	vcmpe.f32	s15, s13
240006ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240006b0:	dd7b      	ble.n	240007aa <arm_atan2_f32+0x14a>
      x = 1.0f / x;
240006b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
240006b6:	eddf 2aa2 	vldr	s5, [pc, #648]	; 24000940 <arm_atan2_f32+0x2e0>
240006ba:	ed9f 3aa2 	vldr	s6, [pc, #648]	; 24000944 <arm_atan2_f32+0x2e4>
240006be:	eddf 3aa2 	vldr	s7, [pc, #648]	; 24000948 <arm_atan2_f32+0x2e8>
240006c2:	ed9f 4aa2 	vldr	s8, [pc, #648]	; 2400094c <arm_atan2_f32+0x2ec>
240006c6:	eddf 4aa2 	vldr	s9, [pc, #648]	; 24000950 <arm_atan2_f32+0x2f0>
240006ca:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 24000954 <arm_atan2_f32+0x2f4>
240006ce:	eddf 5aa2 	vldr	s11, [pc, #648]	; 24000958 <arm_atan2_f32+0x2f8>
240006d2:	ed9f 6aa2 	vldr	s12, [pc, #648]	; 2400095c <arm_atan2_f32+0x2fc>
240006d6:	eddf 6aa2 	vldr	s13, [pc, #648]	; 24000960 <arm_atan2_f32+0x300>
      res = PIHALFF32 - arm_atan_limited_f32(x);
240006da:	eddf 7aa2 	vldr	s15, [pc, #648]	; 24000964 <arm_atan2_f32+0x304>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
240006de:	eea7 3a22 	vfma.f32	s6, s14, s5
240006e2:	eee7 3a03 	vfma.f32	s7, s14, s6
240006e6:	eea7 4a23 	vfma.f32	s8, s14, s7
240006ea:	eee7 4a04 	vfma.f32	s9, s14, s8
240006ee:	eea7 5a24 	vfma.f32	s10, s14, s9
240006f2:	eee5 5a07 	vfma.f32	s11, s10, s14
240006f6:	eea7 6a25 	vfma.f32	s12, s14, s11
240006fa:	eee7 6a06 	vfma.f32	s13, s14, s12
      res = PIHALFF32 - arm_atan_limited_f32(x);
240006fe:	eee7 7a66 	vfms.f32	s15, s14, s13
   if (sign)
24000702:	b10a      	cbz	r2, 24000708 <arm_atan2_f32+0xa8>
     res = -res;
24000704:	eef1 7a67 	vneg.f32	s15, s15
        return(ARM_MATH_SUCCESS);
24000708:	2000      	movs	r0, #0
        *result=arm_atan_f32(y/x);
2400070a:	edc3 7a00 	vstr	s15, [r3]
        return(ARM_MATH_SUCCESS);
2400070e:	4770      	bx	lr
        if (y > 0.0f)
24000710:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24000714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24000718:	dd70      	ble.n	240007fc <arm_atan2_f32+0x19c>
           *result=arm_atan_f32(y/x) + PI;
2400071a:	eec0 7a20 	vdiv.f32	s15, s0, s1
   if (x < 0.0f)
2400071e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24000722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24000726:	f100 80d9 	bmi.w	240008dc <arm_atan2_f32+0x27c>
   int sign=0;
2400072a:	2200      	movs	r2, #0
   if (x > 1.0f)
2400072c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24000730:	eef4 7ae6 	vcmpe.f32	s15, s13
24000734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24000738:	f340 80a8 	ble.w	2400088c <arm_atan2_f32+0x22c>
      x = 1.0f / x;
2400073c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
24000740:	eddf 2a7f 	vldr	s5, [pc, #508]	; 24000940 <arm_atan2_f32+0x2e0>
24000744:	ed9f 3a7f 	vldr	s6, [pc, #508]	; 24000944 <arm_atan2_f32+0x2e4>
24000748:	eddf 3a7f 	vldr	s7, [pc, #508]	; 24000948 <arm_atan2_f32+0x2e8>
2400074c:	ed9f 4a7f 	vldr	s8, [pc, #508]	; 2400094c <arm_atan2_f32+0x2ec>
24000750:	eddf 4a7f 	vldr	s9, [pc, #508]	; 24000950 <arm_atan2_f32+0x2f0>
24000754:	ed9f 5a7f 	vldr	s10, [pc, #508]	; 24000954 <arm_atan2_f32+0x2f4>
24000758:	eddf 5a7f 	vldr	s11, [pc, #508]	; 24000958 <arm_atan2_f32+0x2f8>
2400075c:	ed9f 6a7f 	vldr	s12, [pc, #508]	; 2400095c <arm_atan2_f32+0x2fc>
24000760:	eddf 6a7f 	vldr	s13, [pc, #508]	; 24000960 <arm_atan2_f32+0x300>
      res = PIHALFF32 - arm_atan_limited_f32(x);
24000764:	eddf 7a7f 	vldr	s15, [pc, #508]	; 24000964 <arm_atan2_f32+0x304>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
24000768:	eea7 3a22 	vfma.f32	s6, s14, s5
2400076c:	eee7 3a03 	vfma.f32	s7, s14, s6
24000770:	eea7 4a23 	vfma.f32	s8, s14, s7
24000774:	eee7 4a04 	vfma.f32	s9, s14, s8
24000778:	eea7 5a24 	vfma.f32	s10, s14, s9
2400077c:	eee7 5a05 	vfma.f32	s11, s14, s10
24000780:	eea7 6a25 	vfma.f32	s12, s14, s11
24000784:	eee7 6a06 	vfma.f32	s13, s14, s12
      res = PIHALFF32 - arm_atan_limited_f32(x);
24000788:	eee7 7a66 	vfms.f32	s15, s14, s13
   if (sign)
2400078c:	b10a      	cbz	r2, 24000792 <arm_atan2_f32+0x132>
     res = -res;
2400078e:	eef1 7a67 	vneg.f32	s15, s15
           *result=arm_atan_f32(y/x) + PI;
24000792:	ed9f 7a75 	vldr	s14, [pc, #468]	; 24000968 <arm_atan2_f32+0x308>
        return(ARM_MATH_SUCCESS);
24000796:	2000      	movs	r0, #0
           *result=arm_atan_f32(y/x) + PI;
24000798:	ee77 7a87 	vadd.f32	s15, s15, s14
2400079c:	edc3 7a00 	vstr	s15, [r3]
240007a0:	4770      	bx	lr
            *result=PIHALFF32;
240007a2:	4a72      	ldr	r2, [pc, #456]	; (2400096c <arm_atan2_f32+0x30c>)
            return(ARM_MATH_SUCCESS);
240007a4:	2000      	movs	r0, #0
            *result=PIHALFF32;
240007a6:	601a      	str	r2, [r3, #0]
            return(ARM_MATH_SUCCESS);
240007a8:	4770      	bx	lr
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
240007aa:	ed9f 7a65 	vldr	s14, [pc, #404]	; 24000940 <arm_atan2_f32+0x2e0>
240007ae:	eddf 3a65 	vldr	s7, [pc, #404]	; 24000944 <arm_atan2_f32+0x2e4>
240007b2:	ed9f 4a65 	vldr	s8, [pc, #404]	; 24000948 <arm_atan2_f32+0x2e8>
240007b6:	eee7 3a87 	vfma.f32	s7, s15, s14
240007ba:	eddf 4a64 	vldr	s9, [pc, #400]	; 2400094c <arm_atan2_f32+0x2ec>
240007be:	ed9f 5a64 	vldr	s10, [pc, #400]	; 24000950 <arm_atan2_f32+0x2f0>
240007c2:	eddf 5a64 	vldr	s11, [pc, #400]	; 24000954 <arm_atan2_f32+0x2f4>
240007c6:	ed9f 6a64 	vldr	s12, [pc, #400]	; 24000958 <arm_atan2_f32+0x2f8>
240007ca:	eddf 6a64 	vldr	s13, [pc, #400]	; 2400095c <arm_atan2_f32+0x2fc>
240007ce:	ed9f 7a64 	vldr	s14, [pc, #400]	; 24000960 <arm_atan2_f32+0x300>
240007d2:	eea7 4aa3 	vfma.f32	s8, s15, s7
240007d6:	eee7 4a84 	vfma.f32	s9, s15, s8
240007da:	eea7 5aa4 	vfma.f32	s10, s15, s9
240007de:	eee7 5a85 	vfma.f32	s11, s15, s10
240007e2:	eea7 6aa5 	vfma.f32	s12, s15, s11
240007e6:	eee7 6a86 	vfma.f32	s13, s15, s12
240007ea:	eea7 7aa6 	vfma.f32	s14, s15, s13
240007ee:	ee67 7a87 	vmul.f32	s15, s15, s14
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
240007f2:	e786      	b.n	24000702 <arm_atan2_f32+0xa2>
      x=-x;
240007f4:	eef1 7a67 	vneg.f32	s15, s15
      sign=1;
240007f8:	2201      	movs	r2, #1
240007fa:	e753      	b.n	240006a4 <arm_atan2_f32+0x44>
        else if (y < 0.0f)
240007fc:	d403      	bmi.n	24000806 <arm_atan2_f32+0x1a6>
               *result= PI;
240007fe:	4a5c      	ldr	r2, [pc, #368]	; (24000970 <arm_atan2_f32+0x310>)
        return(ARM_MATH_SUCCESS);
24000800:	2000      	movs	r0, #0
               *result= PI;
24000802:	601a      	str	r2, [r3, #0]
24000804:	4770      	bx	lr
           *result=arm_atan_f32(y/x) - PI;
24000806:	eec0 7a20 	vdiv.f32	s15, s0, s1
   if (x < 0.0f)
2400080a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
2400080e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24000812:	f100 808f 	bmi.w	24000934 <arm_atan2_f32+0x2d4>
   int sign=0;
24000816:	2200      	movs	r2, #0
   if (x > 1.0f)
24000818:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2400081c:	eef4 7ae6 	vcmpe.f32	s15, s13
24000820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24000824:	dd61      	ble.n	240008ea <arm_atan2_f32+0x28a>
      x = 1.0f / x;
24000826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
2400082a:	eddf 2a45 	vldr	s5, [pc, #276]	; 24000940 <arm_atan2_f32+0x2e0>
2400082e:	ed9f 3a45 	vldr	s6, [pc, #276]	; 24000944 <arm_atan2_f32+0x2e4>
24000832:	eddf 3a45 	vldr	s7, [pc, #276]	; 24000948 <arm_atan2_f32+0x2e8>
24000836:	ed9f 4a45 	vldr	s8, [pc, #276]	; 2400094c <arm_atan2_f32+0x2ec>
2400083a:	eddf 4a45 	vldr	s9, [pc, #276]	; 24000950 <arm_atan2_f32+0x2f0>
2400083e:	ed9f 5a45 	vldr	s10, [pc, #276]	; 24000954 <arm_atan2_f32+0x2f4>
24000842:	eddf 5a45 	vldr	s11, [pc, #276]	; 24000958 <arm_atan2_f32+0x2f8>
24000846:	ed9f 6a45 	vldr	s12, [pc, #276]	; 2400095c <arm_atan2_f32+0x2fc>
2400084a:	eddf 6a45 	vldr	s13, [pc, #276]	; 24000960 <arm_atan2_f32+0x300>
      res = PIHALFF32 - arm_atan_limited_f32(x);
2400084e:	eddf 7a45 	vldr	s15, [pc, #276]	; 24000964 <arm_atan2_f32+0x304>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
24000852:	eea7 3a22 	vfma.f32	s6, s14, s5
24000856:	eee7 3a03 	vfma.f32	s7, s14, s6
2400085a:	eea7 4a23 	vfma.f32	s8, s14, s7
2400085e:	eee7 4a04 	vfma.f32	s9, s14, s8
24000862:	eea7 5a24 	vfma.f32	s10, s14, s9
24000866:	eee7 5a05 	vfma.f32	s11, s14, s10
2400086a:	eea7 6a25 	vfma.f32	s12, s14, s11
2400086e:	eee7 6a06 	vfma.f32	s13, s14, s12
      res = PIHALFF32 - arm_atan_limited_f32(x);
24000872:	eee7 7a66 	vfms.f32	s15, s14, s13
   if (sign)
24000876:	b10a      	cbz	r2, 2400087c <arm_atan2_f32+0x21c>
     res = -res;
24000878:	eef1 7a67 	vneg.f32	s15, s15
           *result=arm_atan_f32(y/x) - PI;
2400087c:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 24000968 <arm_atan2_f32+0x308>
        return(ARM_MATH_SUCCESS);
24000880:	2000      	movs	r0, #0
           *result=arm_atan_f32(y/x) - PI;
24000882:	ee77 7ac7 	vsub.f32	s15, s15, s14
24000886:	edc3 7a00 	vstr	s15, [r3]
2400088a:	4770      	bx	lr
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
2400088c:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 24000940 <arm_atan2_f32+0x2e0>
24000890:	eddf 3a2c 	vldr	s7, [pc, #176]	; 24000944 <arm_atan2_f32+0x2e4>
24000894:	ed9f 4a2c 	vldr	s8, [pc, #176]	; 24000948 <arm_atan2_f32+0x2e8>
24000898:	eee7 3a87 	vfma.f32	s7, s15, s14
2400089c:	eddf 4a2b 	vldr	s9, [pc, #172]	; 2400094c <arm_atan2_f32+0x2ec>
240008a0:	ed9f 5a2b 	vldr	s10, [pc, #172]	; 24000950 <arm_atan2_f32+0x2f0>
240008a4:	eddf 5a2b 	vldr	s11, [pc, #172]	; 24000954 <arm_atan2_f32+0x2f4>
240008a8:	ed9f 6a2b 	vldr	s12, [pc, #172]	; 24000958 <arm_atan2_f32+0x2f8>
240008ac:	eddf 6a2b 	vldr	s13, [pc, #172]	; 2400095c <arm_atan2_f32+0x2fc>
240008b0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 24000960 <arm_atan2_f32+0x300>
240008b4:	eea7 4aa3 	vfma.f32	s8, s15, s7
240008b8:	eee7 4a84 	vfma.f32	s9, s15, s8
240008bc:	eea7 5aa4 	vfma.f32	s10, s15, s9
240008c0:	eee7 5a85 	vfma.f32	s11, s15, s10
240008c4:	eea7 6aa5 	vfma.f32	s12, s15, s11
240008c8:	eee7 6a86 	vfma.f32	s13, s15, s12
240008cc:	eea7 7aa6 	vfma.f32	s14, s15, s13
240008d0:	ee67 7a87 	vmul.f32	s15, s15, s14
   if (sign)
240008d4:	2a00      	cmp	r2, #0
240008d6:	f43f af5c 	beq.w	24000792 <arm_atan2_f32+0x132>
240008da:	e758      	b.n	2400078e <arm_atan2_f32+0x12e>
      x=-x;
240008dc:	eef1 7a67 	vneg.f32	s15, s15
      sign=1;
240008e0:	2201      	movs	r2, #1
240008e2:	e723      	b.n	2400072c <arm_atan2_f32+0xcc>
        }
    }
    

    return(ARM_MATH_NANINF);
240008e4:	f06f 0003 	mvn.w	r0, #3

}
240008e8:	4770      	bx	lr
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
240008ea:	ed9f 7a15 	vldr	s14, [pc, #84]	; 24000940 <arm_atan2_f32+0x2e0>
240008ee:	eddf 3a15 	vldr	s7, [pc, #84]	; 24000944 <arm_atan2_f32+0x2e4>
240008f2:	ed9f 4a15 	vldr	s8, [pc, #84]	; 24000948 <arm_atan2_f32+0x2e8>
240008f6:	eee7 3a87 	vfma.f32	s7, s15, s14
240008fa:	eddf 4a14 	vldr	s9, [pc, #80]	; 2400094c <arm_atan2_f32+0x2ec>
240008fe:	ed9f 5a14 	vldr	s10, [pc, #80]	; 24000950 <arm_atan2_f32+0x2f0>
24000902:	eddf 5a14 	vldr	s11, [pc, #80]	; 24000954 <arm_atan2_f32+0x2f4>
24000906:	ed9f 6a14 	vldr	s12, [pc, #80]	; 24000958 <arm_atan2_f32+0x2f8>
2400090a:	eddf 6a14 	vldr	s13, [pc, #80]	; 2400095c <arm_atan2_f32+0x2fc>
2400090e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 24000960 <arm_atan2_f32+0x300>
24000912:	eea7 4aa3 	vfma.f32	s8, s15, s7
24000916:	eee7 4a84 	vfma.f32	s9, s15, s8
2400091a:	eea7 5aa4 	vfma.f32	s10, s15, s9
2400091e:	eee7 5a85 	vfma.f32	s11, s15, s10
24000922:	eea7 6aa5 	vfma.f32	s12, s15, s11
24000926:	eee7 6a86 	vfma.f32	s13, s15, s12
2400092a:	eea7 7aa6 	vfma.f32	s14, s15, s13
2400092e:	ee67 7a87 	vmul.f32	s15, s15, s14
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
24000932:	e7a0      	b.n	24000876 <arm_atan2_f32+0x216>
      x=-x;
24000934:	eef1 7a67 	vneg.f32	s15, s15
      sign=1;
24000938:	2201      	movs	r2, #1
2400093a:	e76d      	b.n	24000818 <arm_atan2_f32+0x1b8>
2400093c:	bfc90fdb 	.word	0xbfc90fdb
24000940:	bd0492a5 	.word	0xbd0492a5
24000944:	3e0945e7 	.word	0x3e0945e7
24000948:	be32b708 	.word	0xbe32b708
2400094c:	bca9fceb 	.word	0xbca9fceb
24000950:	3e5d693c 	.word	0x3e5d693c
24000954:	bb905643 	.word	0xbb905643
24000958:	beaa65e5 	.word	0xbeaa65e5
2400095c:	b7c00cc9 	.word	0xb7c00cc9
24000960:	3f800001 	.word	0x3f800001
24000964:	3fc90fdb 	.word	0x3fc90fdb
24000968:	40490fdb 	.word	0x40490fdb
2400096c:	3fc90fdb 	.word	0x3fc90fdb
24000970:	40490fdb 	.word	0x40490fdb

24000974 <arm_cos_f32>:
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
24000974:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
24000978:	ed9f 7a22 	vldr	s14, [pc, #136]	; 24000a04 <arm_cos_f32+0x90>

  /* Calculation of floor value of input */
  n = (int32_t) in;

  /* Make negative values towards -infinity */
  if (in < 0.0f)
2400097c:	eddf 6a22 	vldr	s13, [pc, #136]	; 24000a08 <arm_cos_f32+0x94>
  in = x * 0.159154943092f + 0.25f;
24000980:	eee0 7a07 	vfma.f32	s15, s0, s14
  if (in < 0.0f)
24000984:	eeb4 0ae6 	vcmpe.f32	s0, s13
24000988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  n = (int32_t) in;
2400098c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
  if (in < 0.0f)
24000990:	d504      	bpl.n	2400099c <arm_cos_f32+0x28>
  {
    n--;
24000992:	ee17 3a10 	vmov	r3, s14
24000996:	3b01      	subs	r3, #1
24000998:	ee07 3a10 	vmov	s14, r3
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
2400099c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
240009a0:	eddf 6a1a 	vldr	s13, [pc, #104]	; 24000a0c <arm_cos_f32+0x98>
  in = in - (float32_t) n;
240009a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
240009a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
  index = (uint16_t)findex;
240009ac:	eebc 7ae7 	vcvt.u32.f32	s14, s15
240009b0:	ee17 3a10 	vmov	r3, s14
240009b4:	b29b      	uxth	r3, r3

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
240009b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
240009ba:	d21a      	bcs.n	240009f2 <arm_cos_f32+0x7e>
    index = 0;
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
240009bc:	ee07 3a10 	vmov	s14, r3

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
  b = sinTable_f32[index+1];
240009c0:	1c59      	adds	r1, r3, #1
  fract = findex - (float32_t) index;
240009c2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
240009c6:	ee37 0ac7 	vsub.f32	s0, s15, s14

  /* Linear interpolation process */
  cosVal = (1.0f - fract) * a + fract * b;
240009ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
  a = sinTable_f32[index];
240009ce:	4a10      	ldr	r2, [pc, #64]	; (24000a10 <arm_cos_f32+0x9c>)
  b = sinTable_f32[index+1];
240009d0:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  cosVal = (1.0f - fract) * a + fract * b;
240009d4:	ee37 7a26 	vadd.f32	s14, s14, s13
  a = sinTable_f32[index];
240009d8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  cosVal = (1.0f - fract) * a + fract * b;
240009dc:	ed91 6a00 	vldr	s12, [r1]
240009e0:	edd2 6a00 	vldr	s13, [r2]
240009e4:	ee37 7a67 	vsub.f32	s14, s14, s15
240009e8:	ee20 0a06 	vmul.f32	s0, s0, s12

  /* Return output value */
  return (cosVal);
}
240009ec:	eea7 0a26 	vfma.f32	s0, s14, s13
240009f0:	4770      	bx	lr
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
240009f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
240009f6:	2101      	movs	r1, #1
240009f8:	2300      	movs	r3, #0
240009fa:	ed9f 7a06 	vldr	s14, [pc, #24]	; 24000a14 <arm_cos_f32+0xa0>
240009fe:	eeb0 0a67 	vmov.f32	s0, s15
24000a02:	e7e2      	b.n	240009ca <arm_cos_f32+0x56>
24000a04:	3e22f983 	.word	0x3e22f983
24000a08:	bfc90fdb 	.word	0xbfc90fdb
24000a0c:	44000000 	.word	0x44000000
24000a10:	2401bcf4 	.word	0x2401bcf4
24000a14:	00000000 	.word	0x00000000

24000a18 <arm_fir_decimate_f32>:
void arm_fir_decimate_f32(
  const arm_fir_decimate_instance_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
24000a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        float32_t *px0;                                /* Temporary pointer for state buffer */
  const float32_t *pb;                                 /* Temporary pointer for coefficient buffer */
        float32_t x0, c0;                              /* Temporary variables to hold state and coefficient values */
        float32_t acc0;                                /* Accumulator */
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
        uint32_t i, tapCnt, blkCnt, outBlockSize = blockSize / S->M;  /* Loop counters */
24000a1c:	7805      	ldrb	r5, [r0, #0]
{
24000a1e:	b08d      	sub	sp, #52	; 0x34
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
24000a20:	8846      	ldrh	r6, [r0, #2]
        float32_t *pState = S->pState;                 /* State pointer */
24000a22:	6884      	ldr	r4, [r0, #8]
{
24000a24:	9000      	str	r0, [sp, #0]
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
24000a26:	6840      	ldr	r0, [r0, #4]
{
24000a28:	9207      	str	r2, [sp, #28]
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
24000a2a:	9609      	str	r6, [sp, #36]	; 0x24
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
24000a2c:	9008      	str	r0, [sp, #32]
        uint32_t i, tapCnt, blkCnt, outBlockSize = blockSize / S->M;  /* Loop counters */
24000a2e:	fbb3 f7f5 	udiv	r7, r3, r5
        float32_t acc1, acc2, acc3;
#endif

  /* S->pState buffer contains previous frame (numTaps - 1) samples */
  /* pStateCur points to the location where the new input data should be written */
  pStateCur = S->pState + (numTaps - 1U);
24000a32:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
        uint32_t i, tapCnt, blkCnt, outBlockSize = blockSize / S->M;  /* Loop counters */
24000a36:	970a      	str	r7, [sp, #40]	; 0x28

    /* Loop unrolling: Compute 4 samples at a time */
  blkCnt = outBlockSize >> 2U;

  /* Samples loop unrolled by 4 */
  while (blkCnt > 0U)
24000a38:	08bf      	lsrs	r7, r7, #2
  pStateCur = S->pState + (numTaps - 1U);
24000a3a:	4433      	add	r3, r6
  while (blkCnt > 0U)
24000a3c:	970b      	str	r7, [sp, #44]	; 0x2c
  pStateCur = S->pState + (numTaps - 1U);
24000a3e:	eb04 0b83 	add.w	fp, r4, r3, lsl #2
  while (blkCnt > 0U)
24000a42:	f000 80cd 	beq.w	24000be0 <arm_fir_decimate_f32+0x1c8>

    /* Initialize coeff pointer */
    pb = pCoeffs;

    /* Loop unrolling: Compute 4 taps at a time */
    tapCnt = numTaps >> 2U;
24000a46:	08b3      	lsrs	r3, r6, #2
24000a48:	4694      	mov	ip, r2
24000a4a:	f100 0210 	add.w	r2, r0, #16
24000a4e:	f006 0603 	and.w	r6, r6, #3
24000a52:	ea4f 1a03 	mov.w	sl, r3, lsl #4
24000a56:	9305      	str	r3, [sp, #20]
24000a58:	eb02 1803 	add.w	r8, r2, r3, lsl #4
24000a5c:	f10c 0910 	add.w	r9, ip, #16
      acc1 += x1 * c0;
      acc2 += x2 * c0;
      acc3 += x3 * c0;

      /* Read the b[numTaps-4] coefficient */
      c0 = *(pb++);
24000a60:	eb00 1303 	add.w	r3, r0, r3, lsl #4
24000a64:	9203      	str	r2, [sp, #12]
24000a66:	9604      	str	r6, [sp, #16]
24000a68:	9306      	str	r3, [sp, #24]
24000a6a:	9701      	str	r7, [sp, #4]
    i = S->M * 4;
24000a6c:	00ad      	lsls	r5, r5, #2
24000a6e:	4658      	mov	r0, fp
24000a70:	460a      	mov	r2, r1
24000a72:	462b      	mov	r3, r5
      *pStateCur++ = *pSrc++;
24000a74:	f852 6b04 	ldr.w	r6, [r2], #4
    } while (--i);
24000a78:	3b01      	subs	r3, #1
      *pStateCur++ = *pSrc++;
24000a7a:	f840 6b04 	str.w	r6, [r0], #4
    } while (--i);
24000a7e:	d1f9      	bne.n	24000a74 <arm_fir_decimate_f32+0x5c>
    px1 = pState + S->M;
24000a80:	9b00      	ldr	r3, [sp, #0]
      *pStateCur++ = *pSrc++;
24000a82:	eb01 0185 	add.w	r1, r1, r5, lsl #2
    acc3 = 0.0f;
24000a86:	eddf 4aa7 	vldr	s9, [pc, #668]	; 24000d24 <arm_fir_decimate_f32+0x30c>
      *pStateCur++ = *pSrc++;
24000a8a:	eb0b 0b85 	add.w	fp, fp, r5, lsl #2
    px1 = pState + S->M;
24000a8e:	f893 e000 	ldrb.w	lr, [r3]
    acc2 = 0.0f;
24000a92:	eeb0 4a64 	vmov.f32	s8, s9
    px1 = pState + S->M;
24000a96:	ea4f 038e 	mov.w	r3, lr, lsl #2
    acc1 = 0.0f;
24000a9a:	eef0 3a64 	vmov.f32	s7, s9
    px2 = pState + 2 * S->M;
24000a9e:	eb04 07ce 	add.w	r7, r4, lr, lsl #3
    acc0 = 0.0f;
24000aa2:	eeb0 3a64 	vmov.f32	s6, s9
    px1 = pState + S->M;
24000aa6:	9302      	str	r3, [sp, #8]
24000aa8:	eb04 0c8e 	add.w	ip, r4, lr, lsl #2
    while (tapCnt > 0U)
24000aac:	9b05      	ldr	r3, [sp, #20]
    px3 = pState + 3 * S->M;
24000aae:	eb07 0e8e 	add.w	lr, r7, lr, lsl #2
    while (tapCnt > 0U)
24000ab2:	2b00      	cmp	r3, #0
24000ab4:	f000 8130 	beq.w	24000d18 <arm_fir_decimate_f32+0x300>
24000ab8:	9b03      	ldr	r3, [sp, #12]
24000aba:	f104 0610 	add.w	r6, r4, #16
24000abe:	f10c 0510 	add.w	r5, ip, #16
24000ac2:	f107 0010 	add.w	r0, r7, #16
24000ac6:	f10e 0210 	add.w	r2, lr, #16
      c0 = *(pb++);
24000aca:	ed53 7a03 	vldr	s15, [r3, #-12]
    while (tapCnt > 0U)
24000ace:	3310      	adds	r3, #16
      acc3 += x3 * c0;
24000ad0:	ed52 5a03 	vldr	s11, [r2, #-12]
    while (tapCnt > 0U)
24000ad4:	3610      	adds	r6, #16
      acc1 += x1 * c0;
24000ad6:	ed55 6a03 	vldr	s13, [r5, #-12]
    while (tapCnt > 0U)
24000ada:	3010      	adds	r0, #16
      acc0 += x0 * c0;
24000adc:	ed16 6a07 	vldr	s12, [r6, #-28]	; 0xffffffe4
    while (tapCnt > 0U)
24000ae0:	3510      	adds	r5, #16
      acc2 += x2 * c0;
24000ae2:	ed10 7a07 	vldr	s14, [r0, #-28]	; 0xffffffe4
      acc1 += x1 * c0;
24000ae6:	ee67 6aa6 	vmul.f32	s13, s15, s13
      acc0 += x0 * c0;
24000aea:	ee27 6a86 	vmul.f32	s12, s15, s12
24000aee:	ed12 5a04 	vldr	s10, [r2, #-16]
      acc2 += x2 * c0;
24000af2:	ee27 7a87 	vmul.f32	s14, s15, s14
24000af6:	ed56 1a08 	vldr	s3, [r6, #-32]	; 0xffffffe0
      acc3 += x3 * c0;
24000afa:	ee67 7aa5 	vmul.f32	s15, s15, s11
24000afe:	ed15 2a08 	vldr	s4, [r5, #-32]	; 0xffffffe0
      c0 = *(pb++);
24000b02:	ed53 5a08 	vldr	s11, [r3, #-32]	; 0xffffffe0
    while (tapCnt > 0U)
24000b06:	3210      	adds	r2, #16
24000b08:	ed50 2a08 	vldr	s5, [r0, #-32]	; 0xffffffe0
24000b0c:	eea5 6aa1 	vfma.f32	s12, s11, s3
      acc1 += x1 * c0;
24000b10:	ed16 0a06 	vldr	s0, [r6, #-24]	; 0xffffffe8
24000b14:	eee5 6a82 	vfma.f32	s13, s11, s4
      acc2 += x2 * c0;
24000b18:	ed55 0a06 	vldr	s1, [r5, #-24]	; 0xffffffe8
24000b1c:	eea5 7aa2 	vfma.f32	s14, s11, s5
      acc3 += x3 * c0;
24000b20:	ed10 1a06 	vldr	s2, [r0, #-24]	; 0xffffffe8
24000b24:	eee5 7a85 	vfma.f32	s15, s11, s10
      c0 = *(pb++);
24000b28:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
24000b2c:	ed13 5a06 	vldr	s10, [r3, #-24]	; 0xffffffe8
      c0 = *(pb++);
24000b30:	ed53 5a05 	vldr	s11, [r3, #-20]	; 0xffffffec
    while (tapCnt > 0U)
24000b34:	4598      	cmp	r8, r3
24000b36:	eea5 6a00 	vfma.f32	s12, s10, s0
      acc1 += x1 * c0;
24000b3a:	ed56 1a05 	vldr	s3, [r6, #-20]	; 0xffffffec
24000b3e:	eee5 6a20 	vfma.f32	s13, s10, s1
      acc2 += x2 * c0;
24000b42:	ed15 2a05 	vldr	s4, [r5, #-20]	; 0xffffffec
24000b46:	eea5 7a01 	vfma.f32	s14, s10, s2
      acc3 += x3 * c0;
24000b4a:	eee5 7a22 	vfma.f32	s15, s10, s5
      x1 = *(px1++);
      x2 = *(px2++);
      x3 = *(px3++);

      /* Perform the multiply-accumulate */
      acc0 += x0 * c0;
24000b4e:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
24000b52:	ed12 5a05 	vldr	s10, [r2, #-20]	; 0xffffffec
24000b56:	eea5 6aa1 	vfma.f32	s12, s11, s3
24000b5a:	eee5 6a82 	vfma.f32	s13, s11, s4
24000b5e:	eea5 7aa2 	vfma.f32	s14, s11, s5
24000b62:	eee5 7a85 	vfma.f32	s15, s11, s10
24000b66:	ee33 3a06 	vadd.f32	s6, s6, s12
      acc1 += x1 * c0;
24000b6a:	ee73 3aa6 	vadd.f32	s7, s7, s13
      acc2 += x2 * c0;
24000b6e:	ee34 4a07 	vadd.f32	s8, s8, s14
      acc3 += x3 * c0;
24000b72:	ee74 4aa7 	vadd.f32	s9, s9, s15
    while (tapCnt > 0U)
24000b76:	d1a8      	bne.n	24000aca <arm_fir_decimate_f32+0xb2>
      x0 = *(px0++);
24000b78:	4454      	add	r4, sl
      x1 = *(px1++);
24000b7a:	44d4      	add	ip, sl
      x2 = *(px2++);
24000b7c:	4457      	add	r7, sl
      x3 = *(px3++);
24000b7e:	eb0e 000a 	add.w	r0, lr, sl
      c0 = *(pb++);
24000b82:	9a06      	ldr	r2, [sp, #24]
    }

    /* Loop unrolling: Compute remaining taps */
    tapCnt = numTaps % 0x4U;

    while (tapCnt > 0U)
24000b84:	9b04      	ldr	r3, [sp, #16]
24000b86:	b19b      	cbz	r3, 24000bb0 <arm_fir_decimate_f32+0x198>
    {
      /* Read coefficients */
      c0 = *(pb++);
24000b88:	ecf2 7a01 	vldmia	r2!, {s15}
    while (tapCnt > 0U)
24000b8c:	3b01      	subs	r3, #1
      x1 = *(px1++);
      x2 = *(px2++);
      x3 = *(px3++);

      /* Perform the multiply-accumulate */
      acc0 += x0 * c0;
24000b8e:	ecf4 5a01 	vldmia	r4!, {s11}
      acc1 += x1 * c0;
24000b92:	ecbc 6a01 	vldmia	ip!, {s12}
      acc2 += x2 * c0;
24000b96:	ecf7 6a01 	vldmia	r7!, {s13}
      acc0 += x0 * c0;
24000b9a:	eea7 3aa5 	vfma.f32	s6, s15, s11
      acc3 += x3 * c0;
24000b9e:	ecb0 7a01 	vldmia	r0!, {s14}
      acc1 += x1 * c0;
24000ba2:	eee7 3a86 	vfma.f32	s7, s15, s12
      acc2 += x2 * c0;
24000ba6:	eea7 4aa6 	vfma.f32	s8, s15, s13
      acc3 += x3 * c0;
24000baa:	eee7 4a87 	vfma.f32	s9, s15, s14
    while (tapCnt > 0U)
24000bae:	d1eb      	bne.n	24000b88 <arm_fir_decimate_f32+0x170>
  while (blkCnt > 0U)
24000bb0:	9b01      	ldr	r3, [sp, #4]
24000bb2:	f109 0910 	add.w	r9, r9, #16
      tapCnt--;
    }

    /* Advance the state pointer by the decimation factor
     * to process the next group of decimation factor number samples */
    pState = pState + S->M * 4;
24000bb6:	9c02      	ldr	r4, [sp, #8]
  while (blkCnt > 0U)
24000bb8:	3b01      	subs	r3, #1

    /* The result is in the accumulator, store in the destination buffer. */
    *pDst++ = acc0;
24000bba:	ed09 3a08 	vstr	s6, [r9, #-32]	; 0xffffffe0
    *pDst++ = acc1;
24000bbe:	ed49 3a07 	vstr	s7, [r9, #-28]	; 0xffffffe4
    pState = pState + S->M * 4;
24000bc2:	4474      	add	r4, lr
    *pDst++ = acc2;
24000bc4:	ed09 4a06 	vstr	s8, [r9, #-24]	; 0xffffffe8
    *pDst++ = acc3;
24000bc8:	ed49 4a05 	vstr	s9, [r9, #-20]	; 0xffffffec
  while (blkCnt > 0U)
24000bcc:	9301      	str	r3, [sp, #4]
24000bce:	d002      	beq.n	24000bd6 <arm_fir_decimate_f32+0x1be>
    i = S->M * 4;
24000bd0:	9b00      	ldr	r3, [sp, #0]
24000bd2:	781d      	ldrb	r5, [r3, #0]
24000bd4:	e74a      	b.n	24000a6c <arm_fir_decimate_f32+0x54>
    *pDst++ = acc3;
24000bd6:	9b07      	ldr	r3, [sp, #28]
24000bd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
24000bda:	eb03 1302 	add.w	r3, r3, r2, lsl #4
24000bde:	9307      	str	r3, [sp, #28]
  /* Initialize blkCnt with number of samples */
  blkCnt = outBlockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
24000be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
24000be2:	f013 0703 	ands.w	r7, r3, #3
24000be6:	d063      	beq.n	24000cb0 <arm_fir_decimate_f32+0x298>
24000be8:	9b07      	ldr	r3, [sp, #28]
    pb = pCoeffs;

#if defined (ARM_MATH_LOOPUNROLL)

    /* Loop unrolling: Compute 4 taps at a time */
    tapCnt = numTaps >> 2U;
24000bea:	9a09      	ldr	r2, [sp, #36]	; 0x24
24000bec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
24000bf0:	9808      	ldr	r0, [sp, #32]
24000bf2:	ea4f 0e92 	mov.w	lr, r2, lsr #2
24000bf6:	f002 0c03 	and.w	ip, r2, #3
24000bfa:	f100 0510 	add.w	r5, r0, #16
24000bfe:	463a      	mov	r2, r7
24000c00:	ea4f 180e 	mov.w	r8, lr, lsl #4
24000c04:	4667      	mov	r7, ip

      /* Perform the multiply-accumulate */
      acc0 += x0 * c0;

      /* Read the b[numTaps-4] coefficient */
      c0 = *pb++;
24000c06:	eb00 190e 	add.w	r9, r0, lr, lsl #4
24000c0a:	9503      	str	r5, [sp, #12]
24000c0c:	f8cd e004 	str.w	lr, [sp, #4]
24000c10:	eb05 150e 	add.w	r5, r5, lr, lsl #4
24000c14:	469a      	mov	sl, r3
24000c16:	f8dd e000 	ldr.w	lr, [sp]
24000c1a:	4694      	mov	ip, r2
    i = S->M;
24000c1c:	f89e 6000 	ldrb.w	r6, [lr]
24000c20:	4658      	mov	r0, fp
24000c22:	460a      	mov	r2, r1
24000c24:	4633      	mov	r3, r6
      *pStateCur++ = *pSrc++;
24000c26:	ecf2 7a01 	vldmia	r2!, {s15}
    } while (--i);
24000c2a:	3b01      	subs	r3, #1
      *pStateCur++ = *pSrc++;
24000c2c:	ece0 7a01 	vstmia	r0!, {s15}
    } while (--i);
24000c30:	d1f9      	bne.n	24000c26 <arm_fir_decimate_f32+0x20e>
    while (tapCnt > 0U)
24000c32:	9b01      	ldr	r3, [sp, #4]
      *pStateCur++ = *pSrc++;
24000c34:	eb01 0186 	add.w	r1, r1, r6, lsl #2
24000c38:	eb0b 0b86 	add.w	fp, fp, r6, lsl #2
    acc0 = 0.0f;
24000c3c:	ed9f 7a39 	vldr	s14, [pc, #228]	; 24000d24 <arm_fir_decimate_f32+0x30c>
    while (tapCnt > 0U)
24000c40:	2b00      	cmp	r3, #0
24000c42:	d06c      	beq.n	24000d1e <arm_fir_decimate_f32+0x306>
24000c44:	9b03      	ldr	r3, [sp, #12]
24000c46:	f104 0210 	add.w	r2, r4, #16
      acc0 += x0 * c0;
24000c4a:	ed53 7a03 	vldr	s15, [r3, #-12]
    while (tapCnt > 0U)
24000c4e:	3310      	adds	r3, #16
      acc0 += x0 * c0;
24000c50:	ed52 6a03 	vldr	s13, [r2, #-12]
    while (tapCnt > 0U)
24000c54:	3210      	adds	r2, #16
24000c56:	ed13 4a08 	vldr	s8, [r3, #-32]	; 0xffffffe0
      acc0 += x0 * c0;
24000c5a:	ee67 7aa6 	vmul.f32	s15, s15, s13
24000c5e:	ed52 4a08 	vldr	s9, [r2, #-32]	; 0xffffffe0
24000c62:	ed13 5a06 	vldr	s10, [r3, #-24]	; 0xffffffe8
24000c66:	ed52 5a06 	vldr	s11, [r2, #-24]	; 0xffffffe8
24000c6a:	eee4 7a24 	vfma.f32	s15, s8, s9
      acc0 += x0 * c0;
24000c6e:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
24000c72:	ed52 6a05 	vldr	s13, [r2, #-20]	; 0xffffffec
    while (tapCnt > 0U)
24000c76:	429d      	cmp	r5, r3
24000c78:	eee5 7a25 	vfma.f32	s15, s10, s11

      /* Read x[n-numTaps-4] sample */
      x0 = *px0++;

      /* Perform the multiply-accumulate */
      acc0 += x0 * c0;
24000c7c:	eee6 7a26 	vfma.f32	s15, s12, s13
24000c80:	ee37 7a27 	vadd.f32	s14, s14, s15
    while (tapCnt > 0U)
24000c84:	d1e1      	bne.n	24000c4a <arm_fir_decimate_f32+0x232>
      x0 = *px0++;
24000c86:	eb04 0008 	add.w	r0, r4, r8
      c0 = *pb++;
24000c8a:	464a      	mov	r2, r9
    /* Initialize tapCnt with number of taps */
    tapCnt = numTaps;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (tapCnt > 0U)
24000c8c:	b147      	cbz	r7, 24000ca0 <arm_fir_decimate_f32+0x288>
24000c8e:	463b      	mov	r3, r7

      /* Fetch 1 state variable */
      x0 = *px0++;

      /* Perform the multiply-accumulate */
      acc0 += x0 * c0;
24000c90:	ecf2 6a01 	vldmia	r2!, {s13}
    while (tapCnt > 0U)
24000c94:	3b01      	subs	r3, #1
      acc0 += x0 * c0;
24000c96:	ecf0 7a01 	vldmia	r0!, {s15}
24000c9a:	eea6 7aa7 	vfma.f32	s14, s13, s15
    while (tapCnt > 0U)
24000c9e:	d1f7      	bne.n	24000c90 <arm_fir_decimate_f32+0x278>
      tapCnt--;
    }

    /* Advance the state pointer by the decimation factor
     * to process the next group of decimation factor number samples */
    pState = pState + S->M;
24000ca0:	f89e 3000 	ldrb.w	r3, [lr]

    /* The result is in the accumulator, store in the destination buffer. */
    *pDst++ = acc0;
24000ca4:	ecaa 7a01 	vstmia	sl!, {s14}
  while (blkCnt > 0U)
24000ca8:	45e2      	cmp	sl, ip
    pState = pState + S->M;
24000caa:	eb04 0483 	add.w	r4, r4, r3, lsl #2
  while (blkCnt > 0U)
24000cae:	d1b5      	bne.n	24000c1c <arm_fir_decimate_f32+0x204>
  pStateCur = S->pState;

#if defined (ARM_MATH_LOOPUNROLL)

  /* Loop unrolling: Compute 4 taps at a time */
  tapCnt = (numTaps - 1U) >> 2U;
24000cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
24000cb2:	1e5d      	subs	r5, r3, #1
  pStateCur = S->pState;
24000cb4:	9b00      	ldr	r3, [sp, #0]

  /* Copy data */
  while (tapCnt > 0U)
24000cb6:	08af      	lsrs	r7, r5, #2
  pStateCur = S->pState;
24000cb8:	689e      	ldr	r6, [r3, #8]
  while (tapCnt > 0U)
24000cba:	d01d      	beq.n	24000cf8 <arm_fir_decimate_f32+0x2e0>
24000cbc:	f104 0210 	add.w	r2, r4, #16
24000cc0:	f106 0310 	add.w	r3, r6, #16
24000cc4:	4639      	mov	r1, r7
  {
    *pStateCur++ = *pState++;
24000cc6:	f852 0c10 	ldr.w	r0, [r2, #-16]
  while (tapCnt > 0U)
24000cca:	3210      	adds	r2, #16
24000ccc:	3901      	subs	r1, #1
24000cce:	f103 0310 	add.w	r3, r3, #16
    *pStateCur++ = *pState++;
24000cd2:	f843 0c20 	str.w	r0, [r3, #-32]
    *pStateCur++ = *pState++;
24000cd6:	f852 0c1c 	ldr.w	r0, [r2, #-28]
24000cda:	f843 0c1c 	str.w	r0, [r3, #-28]
    *pStateCur++ = *pState++;
24000cde:	f852 0c18 	ldr.w	r0, [r2, #-24]
24000ce2:	f843 0c18 	str.w	r0, [r3, #-24]
    *pStateCur++ = *pState++;
24000ce6:	f852 0c14 	ldr.w	r0, [r2, #-20]
24000cea:	f843 0c14 	str.w	r0, [r3, #-20]
  while (tapCnt > 0U)
24000cee:	d1ea      	bne.n	24000cc6 <arm_fir_decimate_f32+0x2ae>
    *pStateCur++ = *pState++;
24000cf0:	eb04 1407 	add.w	r4, r4, r7, lsl #4
24000cf4:	eb06 1607 	add.w	r6, r6, r7, lsl #4
  tapCnt = (numTaps - 1U);

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy data */
  while (tapCnt > 0U)
24000cf8:	f015 0503 	ands.w	r5, r5, #3
24000cfc:	d009      	beq.n	24000d12 <arm_fir_decimate_f32+0x2fa>
  {
    *pStateCur++ = *pState++;
24000cfe:	6823      	ldr	r3, [r4, #0]
  while (tapCnt > 0U)
24000d00:	3d01      	subs	r5, #1
    *pStateCur++ = *pState++;
24000d02:	6033      	str	r3, [r6, #0]
  while (tapCnt > 0U)
24000d04:	d005      	beq.n	24000d12 <arm_fir_decimate_f32+0x2fa>
    *pStateCur++ = *pState++;
24000d06:	6863      	ldr	r3, [r4, #4]
  while (tapCnt > 0U)
24000d08:	2d01      	cmp	r5, #1
    *pStateCur++ = *pState++;
24000d0a:	6073      	str	r3, [r6, #4]
  while (tapCnt > 0U)
24000d0c:	d001      	beq.n	24000d12 <arm_fir_decimate_f32+0x2fa>
    *pStateCur++ = *pState++;
24000d0e:	68a3      	ldr	r3, [r4, #8]
24000d10:	60b3      	str	r3, [r6, #8]

    /* Decrement loop counter */
    tapCnt--;
  }

}
24000d12:	b00d      	add	sp, #52	; 0x34
24000d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    px3 = pState + 3 * S->M;
24000d18:	4670      	mov	r0, lr
    pb = pCoeffs;
24000d1a:	9a08      	ldr	r2, [sp, #32]
24000d1c:	e732      	b.n	24000b84 <arm_fir_decimate_f32+0x16c>
    pb = pCoeffs;
24000d1e:	9a08      	ldr	r2, [sp, #32]
    while (tapCnt > 0U)
24000d20:	4620      	mov	r0, r4
24000d22:	e7b3      	b.n	24000c8c <arm_fir_decimate_f32+0x274>
24000d24:	00000000 	.word	0x00000000

24000d28 <arm_fir_decimate_init_f32>:
        uint16_t numTaps,
        uint8_t M,
  const float32_t * pCoeffs,
        float32_t * pState,
        uint32_t blockSize)
{
24000d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24000d2a:	4616      	mov	r6, r2
24000d2c:	e9dd 7206 	ldrd	r7, r2, [sp, #24]
  arm_status status;

  /* The size of the input block must be a multiple of the decimation factor */
  if ((blockSize % M) != 0U)
24000d30:	fbb2 f4f6 	udiv	r4, r2, r6
24000d34:	fb06 2414 	mls	r4, r6, r4, r2
24000d38:	b96c      	cbnz	r4, 24000d56 <arm_fir_decimate_init_f32+0x2e>
  {
    /* Assign filter taps */
    S->numTaps = numTaps;

    /* Assign coefficient pointer */
    S->pCoeffs = pCoeffs;
24000d3a:	6043      	str	r3, [r0, #4]

    /* Clear the state buffer. The size is always (blockSize + numTaps - 1) */
    memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
24000d3c:	1e4b      	subs	r3, r1, #1
24000d3e:	4605      	mov	r5, r0
    S->numTaps = numTaps;
24000d40:	8041      	strh	r1, [r0, #2]
    memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
24000d42:	441a      	add	r2, r3
24000d44:	4621      	mov	r1, r4
24000d46:	4638      	mov	r0, r7
24000d48:	0092      	lsls	r2, r2, #2
24000d4a:	f018 fceb 	bl	24019724 <memset>
    S->pState = pState;

    /* Assign Decimation Factor */
    S->M = M;

    status = ARM_MATH_SUCCESS;
24000d4e:	4620      	mov	r0, r4
    S->pState = pState;
24000d50:	60af      	str	r7, [r5, #8]
    S->M = M;
24000d52:	702e      	strb	r6, [r5, #0]
  }

  return (status);

}
24000d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    status = ARM_MATH_LENGTH_ERROR;
24000d56:	f06f 0001 	mvn.w	r0, #1
}
24000d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

24000d5c <arm_fir_interpolate_f32>:
void arm_fir_interpolate_f32(
  const arm_fir_interpolate_instance_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
24000d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24000d60:	4605      	mov	r5, r0
24000d62:	461e      	mov	r6, r3
24000d64:	ed2d 8b02 	vpush	{d8}
24000d68:	b08d      	sub	sp, #52	; 0x34
#if (1)
//#if !defined(ARM_MATH_CM0_FAMILY)

        float32_t *pState = S->pState;                 /* State pointer */
24000d6a:	6880      	ldr	r0, [r0, #8]
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
24000d6c:	f8d5 b004 	ldr.w	fp, [r5, #4]
{
24000d70:	930b      	str	r3, [sp, #44]	; 0x2c
        float32_t c0, c1, c2, c3;
#endif

  /* S->pState buffer contains previous frame (phaseLen - 1) samples */
  /* pStateCur points to the location where the new input data should be written */
  pStateCur = S->pState + (phaseLen - 1U);
24000d72:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
{
24000d76:	9200      	str	r2, [sp, #0]
        uint32_t phaseLen = S->phaseLength;            /* Length of each polyphase filter component */
24000d78:	886a      	ldrh	r2, [r5, #2]
{
24000d7a:	9105      	str	r1, [sp, #20]
  pStateCur = S->pState + (phaseLen - 1U);
24000d7c:	4413      	add	r3, r2
        float32_t *pState = S->pState;                 /* State pointer */
24000d7e:	9007      	str	r0, [sp, #28]
        uint32_t phaseLen = S->phaseLength;            /* Length of each polyphase filter component */
24000d80:	9209      	str	r2, [sp, #36]	; 0x24
  pStateCur = S->pState + (phaseLen - 1U);
24000d82:	eb00 0483 	add.w	r4, r0, r3, lsl #2
#if defined (ARM_MATH_LOOPUNROLL)

  /* Loop unrolling: Compute 4 outputs at a time */
  blkCnt = blockSize >> 2U;

  while (blkCnt > 0U)
24000d86:	08b3      	lsrs	r3, r6, #2
  pStateCur = S->pState + (phaseLen - 1U);
24000d88:	9408      	str	r4, [sp, #32]
  while (blkCnt > 0U)
24000d8a:	930a      	str	r3, [sp, #40]	; 0x28
24000d8c:	f000 810d 	beq.w	24000faa <arm_fir_interpolate_f32+0x24e>
      /* Initialize coefficient pointer */
      ptr2 = pCoeffs + (S->L - j);

      /* Loop over the polyPhase length. Unroll by a factor of 4.
         Repeat until we've computed numTaps-(4*S->L) coefficients. */
      tapCnt = phaseLen >> 2U;
24000d90:	ea4f 0892 	mov.w	r8, r2, lsr #2
24000d94:	f002 0903 	and.w	r9, r2, #3
24000d98:	460a      	mov	r2, r1
24000d9a:	f100 0c1c 	add.w	ip, r0, #28
24000d9e:	f104 0110 	add.w	r1, r4, #16
        /* Decrement loop counter */
        tapCnt--;
      }

      /* If the polyPhase length is not a multiple of 4, compute the remaining filter taps */
      tapCnt = phaseLen % 0x4U;
24000da2:	f8cd b018 	str.w	fp, [sp, #24]
24000da6:	3210      	adds	r2, #16
24000da8:	eb0c 1408 	add.w	r4, ip, r8, lsl #4
24000dac:	9101      	str	r1, [sp, #4]
24000dae:	4693      	mov	fp, r2
24000db0:	9302      	str	r3, [sp, #8]
    *pStateCur++ = *pSrc++;
24000db2:	f85b 3c10 	ldr.w	r3, [fp, #-16]
24000db6:	9a01      	ldr	r2, [sp, #4]
24000db8:	f842 3c10 	str.w	r3, [r2, #-16]
    *pStateCur++ = *pSrc++;
24000dbc:	f85b 3c0c 	ldr.w	r3, [fp, #-12]
24000dc0:	f842 3c0c 	str.w	r3, [r2, #-12]
    *pStateCur++ = *pSrc++;
24000dc4:	f85b 3c08 	ldr.w	r3, [fp, #-8]
24000dc8:	f842 3c08 	str.w	r3, [r2, #-8]
    *pStateCur++ = *pSrc++;
24000dcc:	f85b 3c04 	ldr.w	r3, [fp, #-4]
24000dd0:	f842 3c04 	str.w	r3, [r2, #-4]
    i = (S->L);
24000dd4:	f895 a000 	ldrb.w	sl, [r5]
24000dd8:	4653      	mov	r3, sl
    while (i > 0U)
24000dda:	f1ba 0f00 	cmp.w	sl, #0
24000dde:	f000 80c3 	beq.w	24000f68 <arm_fir_interpolate_f32+0x20c>
24000de2:	f1ac 0310 	sub.w	r3, ip, #16
    j = 1U;
24000de6:	f8cd b010 	str.w	fp, [sp, #16]
    while (i > 0U)
24000dea:	4657      	mov	r7, sl
24000dec:	9e00      	ldr	r6, [sp, #0]
    j = 1U;
24000dee:	f04f 0e01 	mov.w	lr, #1
24000df2:	f8dd b018 	ldr.w	fp, [sp, #24]
24000df6:	9303      	str	r3, [sp, #12]
      acc3 = 0.0f;
24000df8:	eddf 1ab6 	vldr	s3, [pc, #728]	; 240010d4 <arm_fir_interpolate_f32+0x378>
      ptr2 = pCoeffs + (S->L - j);
24000dfc:	eba7 000e 	sub.w	r0, r7, lr
      x0 = *(ptr1++);
24000e00:	ed1c 5a07 	vldr	s10, [ip, #-28]	; 0xffffffe4
      acc2 = 0.0f;
24000e04:	eeb0 1a61 	vmov.f32	s2, s3
      x1 = *(ptr1++);
24000e08:	ed5c 4a06 	vldr	s9, [ip, #-24]	; 0xffffffe8
      acc1 = 0.0f;
24000e0c:	eef0 0a61 	vmov.f32	s1, s3
      x2 = *(ptr1++);
24000e10:	ed5c 7a05 	vldr	s15, [ip, #-20]	; 0xffffffec
      acc0 = 0.0f;
24000e14:	eeb0 0a61 	vmov.f32	s0, s3
      ptr2 = pCoeffs + (S->L - j);
24000e18:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
      while (tapCnt > 0U)
24000e1c:	f1b8 0f00 	cmp.w	r8, #0
24000e20:	f000 8156 	beq.w	240010d0 <arm_fir_interpolate_f32+0x374>
        c1 = *(ptr2 + S->L);
24000e24:	00b9      	lsls	r1, r7, #2
24000e26:	4662      	mov	r2, ip
      ptr2 = pCoeffs + (S->L - j);
24000e28:	4603      	mov	r3, r0
        c0 = *(ptr2);
24000e2a:	ed93 3a00 	vldr	s6, [r3]
24000e2e:	440b      	add	r3, r1
        x3 = *(ptr1++);
24000e30:	ed52 3a04 	vldr	s7, [r2, #-16]
        c1 = *(ptr2 + S->L);
24000e34:	eef0 8a45 	vmov.f32	s17, s10
24000e38:	ed93 2a00 	vldr	s4, [r3]
        x0 = *(ptr1++);
24000e3c:	440b      	add	r3, r1
24000e3e:	ed12 5a03 	vldr	s10, [r2, #-12]
        acc3 += x0 * c1;
24000e42:	eeb0 8a64 	vmov.f32	s16, s9
        c2 = *(ptr2 + S->L * 2);
24000e46:	edd3 2a00 	vldr	s5, [r3]
24000e4a:	440b      	add	r3, r1
        acc3 += x0 * c1;
24000e4c:	ee62 5a05 	vmul.f32	s11, s4, s10
        x1 = *(ptr1++);
24000e50:	ed52 4a02 	vldr	s9, [r2, #-8]
        acc0 += x2 * c2;
24000e54:	ee22 6aa7 	vmul.f32	s12, s5, s15
        c3 = *(ptr2 + S->L * 3);
24000e58:	ed93 4a00 	vldr	s8, [r3]
        acc1 += x3 * c2;
24000e5c:	ee63 6aa2 	vmul.f32	s13, s7, s5
      while (tapCnt > 0U)
24000e60:	3210      	adds	r2, #16
        acc2 += x0 * c2;
24000e62:	ee25 7a22 	vmul.f32	s14, s10, s5
        ptr2 += 4 * S->L;
24000e66:	440b      	add	r3, r1
24000e68:	eee3 5a83 	vfma.f32	s11, s7, s6
24000e6c:	eee2 6a27 	vfma.f32	s13, s4, s15
24000e70:	eea2 6a08 	vfma.f32	s12, s4, s16
24000e74:	eea3 7a82 	vfma.f32	s14, s7, s4
24000e78:	eee2 5aa4 	vfma.f32	s11, s5, s9
24000e7c:	eee3 6a08 	vfma.f32	s13, s6, s16
24000e80:	eea3 6a28 	vfma.f32	s12, s6, s17
        acc2 += x0 * c2;
24000e84:	eea3 7a27 	vfma.f32	s14, s6, s15
        x2 = *(ptr1++);
24000e88:	ed52 7a05 	vldr	s15, [r2, #-20]	; 0xffffffec
      while (tapCnt > 0U)
24000e8c:	4294      	cmp	r4, r2
24000e8e:	eee4 5a27 	vfma.f32	s11, s8, s15
24000e92:	eee5 6a04 	vfma.f32	s13, s10, s8
24000e96:	eea3 6a84 	vfma.f32	s12, s7, s8
24000e9a:	eea4 7a84 	vfma.f32	s14, s9, s8
        acc3 += x2 * c3;
24000e9e:	ee71 1aa5 	vadd.f32	s3, s3, s11
        acc1 += x0 * c3;
24000ea2:	ee70 0aa6 	vadd.f32	s1, s1, s13
        acc0 += x3 * c3;
24000ea6:	ee30 0a06 	vadd.f32	s0, s0, s12
        acc2 += x1 * c3;
24000eaa:	ee31 1a07 	vadd.f32	s2, s2, s14
      while (tapCnt > 0U)
24000eae:	d1bc      	bne.n	24000e2a <arm_fir_interpolate_f32+0xce>
        ptr2 += 4 * S->L;
24000eb0:	fb08 f307 	mul.w	r3, r8, r7
24000eb4:	eb00 1003 	add.w	r0, r0, r3, lsl #4
24000eb8:	f1a4 0310 	sub.w	r3, r4, #16

      while (tapCnt > 0U)
24000ebc:	f1b9 0f00 	cmp.w	r9, #0
24000ec0:	d019      	beq.n	24000ef6 <arm_fir_interpolate_f32+0x19a>
24000ec2:	2f01      	cmp	r7, #1
        acc1 += x1 * c0;
        acc2 += x2 * c0;
        acc3 += x3 * c0;

        /* Increment the coefficient pointer by interpolation factor times. */
        ptr2 += S->L;
24000ec4:	ea4f 0287 	mov.w	r2, r7, lsl #2
24000ec8:	4649      	mov	r1, r9
24000eca:	d130      	bne.n	24000f2e <arm_fir_interpolate_f32+0x1d2>
        c0 = *(ptr2);
24000ecc:	ed90 7a00 	vldr	s14, [r0]
      while (tapCnt > 0U)
24000ed0:	3901      	subs	r1, #1
        x3 = *(ptr1++);
24000ed2:	ecf3 6a01 	vldmia	r3!, {s13}
        ptr2 += S->L;
24000ed6:	4410      	add	r0, r2
        acc0 += x0 * c0;
24000ed8:	eea7 0a05 	vfma.f32	s0, s14, s10
        acc1 += x1 * c0;
24000edc:	eee7 0a24 	vfma.f32	s1, s14, s9
        acc2 += x2 * c0;
24000ee0:	eea7 1a27 	vfma.f32	s2, s14, s15
        acc3 += x3 * c0;
24000ee4:	eeb0 5a64 	vmov.f32	s10, s9
24000ee8:	eee7 1a26 	vfma.f32	s3, s14, s13
      while (tapCnt > 0U)
24000eec:	eef0 4a67 	vmov.f32	s9, s15
        x3 = *(ptr1++);
24000ef0:	eef0 7a66 	vmov.f32	s15, s13
      while (tapCnt > 0U)
24000ef4:	d1ea      	bne.n	24000ecc <arm_fir_interpolate_f32+0x170>
        /* Decrement loop counter */
        tapCnt--;
      }

      /* The result is in the accumulator, store in the destination buffer. */
      *(pDst           ) = acc0;
24000ef6:	ed86 0a00 	vstr	s0, [r6]
    while (i > 0U)
24000efa:	45f2      	cmp	sl, lr
      *(pDst +     S->L) = acc1;
24000efc:	782b      	ldrb	r3, [r5, #0]
24000efe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
24000f02:	edc3 0a00 	vstr	s1, [r3]
      *(pDst + 2 * S->L) = acc2;
24000f06:	782b      	ldrb	r3, [r5, #0]
24000f08:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
24000f0c:	ed83 1a00 	vstr	s2, [r3]
      *(pDst + 3 * S->L) = acc3;
24000f10:	782b      	ldrb	r3, [r5, #0]
24000f12:	eb03 0343 	add.w	r3, r3, r3, lsl #1
24000f16:	eb06 0383 	add.w	r3, r6, r3, lsl #2

      pDst++;
24000f1a:	f106 0604 	add.w	r6, r6, #4
      *(pDst + 3 * S->L) = acc3;
24000f1e:	edc3 1a00 	vstr	s3, [r3]

      /* Increment the address modifier index of coefficient buffer */
      j++;
24000f22:	f10e 0301 	add.w	r3, lr, #1
    while (i > 0U)
24000f26:	d018      	beq.n	24000f5a <arm_fir_interpolate_f32+0x1fe>

    /* Advance the state pointer by 1
     * to process the next group of interpolation factor number samples */
    pState = pState + 4;

    pDst += S->L * 3;
24000f28:	469e      	mov	lr, r3
24000f2a:	782f      	ldrb	r7, [r5, #0]
24000f2c:	e764      	b.n	24000df8 <arm_fir_interpolate_f32+0x9c>
        c0 = *(ptr2);
24000f2e:	ed90 7a00 	vldr	s14, [r0]
      while (tapCnt > 0U)
24000f32:	3901      	subs	r1, #1
        x3 = *(ptr1++);
24000f34:	ecf3 6a01 	vldmia	r3!, {s13}
        ptr2 += S->L;
24000f38:	4410      	add	r0, r2
        acc0 += x0 * c0;
24000f3a:	eea7 0a05 	vfma.f32	s0, s14, s10
        acc1 += x1 * c0;
24000f3e:	eee7 0a24 	vfma.f32	s1, s14, s9
        acc2 += x2 * c0;
24000f42:	eea7 1a27 	vfma.f32	s2, s14, s15
        acc3 += x3 * c0;
24000f46:	eeb0 5a64 	vmov.f32	s10, s9
24000f4a:	eee6 1a87 	vfma.f32	s3, s13, s14
      while (tapCnt > 0U)
24000f4e:	eef0 4a67 	vmov.f32	s9, s15
        x3 = *(ptr1++);
24000f52:	eef0 7a66 	vmov.f32	s15, s13
      while (tapCnt > 0U)
24000f56:	d1ea      	bne.n	24000f2e <arm_fir_interpolate_f32+0x1d2>
24000f58:	e7cd      	b.n	24000ef6 <arm_fir_interpolate_f32+0x19a>
      pDst++;
24000f5a:	9b00      	ldr	r3, [sp, #0]
24000f5c:	f8dd b010 	ldr.w	fp, [sp, #16]
24000f60:	eb03 038a 	add.w	r3, r3, sl, lsl #2
24000f64:	9300      	str	r3, [sp, #0]
    pDst += S->L * 3;
24000f66:	782b      	ldrb	r3, [r5, #0]
24000f68:	9a00      	ldr	r2, [sp, #0]
24000f6a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  while (blkCnt > 0U)
24000f6e:	f10b 0b10 	add.w	fp, fp, #16
24000f72:	f10c 0c10 	add.w	ip, ip, #16
    pDst += S->L * 3;
24000f76:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  while (blkCnt > 0U)
24000f7a:	3410      	adds	r4, #16
    pDst += S->L * 3;
24000f7c:	9300      	str	r3, [sp, #0]
  while (blkCnt > 0U)
24000f7e:	9b01      	ldr	r3, [sp, #4]
24000f80:	3310      	adds	r3, #16
24000f82:	9301      	str	r3, [sp, #4]
24000f84:	9b02      	ldr	r3, [sp, #8]
24000f86:	3b01      	subs	r3, #1
24000f88:	9302      	str	r3, [sp, #8]
24000f8a:	f47f af12 	bne.w	24000db2 <arm_fir_interpolate_f32+0x56>
    *pStateCur++ = *pSrc++;
24000f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
24000f90:	e9dd 2b05 	ldrd	r2, fp, [sp, #20]
24000f94:	eb02 1203 	add.w	r2, r2, r3, lsl #4
24000f98:	9205      	str	r2, [sp, #20]
24000f9a:	9a08      	ldr	r2, [sp, #32]
24000f9c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
24000fa0:	9208      	str	r2, [sp, #32]
    pState = pState + 4;
24000fa2:	9a07      	ldr	r2, [sp, #28]
24000fa4:	eb02 1303 	add.w	r3, r2, r3, lsl #4
24000fa8:	9307      	str	r3, [sp, #28]
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
24000faa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
24000fac:	f013 0303 	ands.w	r3, r3, #3
24000fb0:	f000 80a4 	beq.w	240010fc <arm_fir_interpolate_f32+0x3a0>
24000fb4:	9a08      	ldr	r2, [sp, #32]
         Repeat until we've computed numTaps-(4*S->L) coefficients. */

#if defined (ARM_MATH_LOOPUNROLL)

     /* Loop unrolling: Compute 4 outputs at a time */
      tapCnt = phaseLen >> 2U;
24000fb6:	9909      	ldr	r1, [sp, #36]	; 0x24
24000fb8:	9204      	str	r2, [sp, #16]
24000fba:	088a      	lsrs	r2, r1, #2
24000fbc:	f001 0a03 	and.w	sl, r1, #3
24000fc0:	9907      	ldr	r1, [sp, #28]
24000fc2:	1c56      	adds	r6, r2, #1
24000fc4:	4691      	mov	r9, r2
24000fc6:	f101 0010 	add.w	r0, r1, #16
24000fca:	f8cd b00c 	str.w	fp, [sp, #12]
24000fce:	eb01 1606 	add.w	r6, r1, r6, lsl #4
24000fd2:	9502      	str	r5, [sp, #8]
24000fd4:	0099      	lsls	r1, r3, #2
24000fd6:	9001      	str	r0, [sp, #4]
24000fd8:	910a      	str	r1, [sp, #40]	; 0x28
24000fda:	9905      	ldr	r1, [sp, #20]
24000fdc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
24000fe0:	9308      	str	r3, [sp, #32]
    *pStateCur++ = *pSrc++;
24000fe2:	9a05      	ldr	r2, [sp, #20]
24000fe4:	f852 3b04 	ldr.w	r3, [r2], #4
24000fe8:	9205      	str	r2, [sp, #20]
24000fea:	9a04      	ldr	r2, [sp, #16]
24000fec:	f842 3b04 	str.w	r3, [r2], #4
    i = S->L;
24000ff0:	9b02      	ldr	r3, [sp, #8]
    *pStateCur++ = *pSrc++;
24000ff2:	9204      	str	r2, [sp, #16]
    i = S->L;
24000ff4:	f893 b000 	ldrb.w	fp, [r3]
24000ff8:	9b01      	ldr	r3, [sp, #4]
24000ffa:	3b10      	subs	r3, #16
24000ffc:	9306      	str	r3, [sp, #24]
    while (i > 0U)
24000ffe:	f1bb 0f00 	cmp.w	fp, #0
24001002:	d06d      	beq.n	240010e0 <arm_fir_interpolate_f32+0x384>
24001004:	46dc      	mov	ip, fp
24001006:	f8dd 8000 	ldr.w	r8, [sp]
    j = 1U;
2400100a:	f04f 0e01 	mov.w	lr, #1
      ptr2 = pCoeffs + (S->L - j);
2400100e:	ebac 000e 	sub.w	r0, ip, lr
24001012:	9b03      	ldr	r3, [sp, #12]
      sum0 = 0.0f;
24001014:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 240010d4 <arm_fir_interpolate_f32+0x378>
      ptr2 = pCoeffs + (S->L - j);
24001018:	eb03 0080 	add.w	r0, r3, r0, lsl #2

      while (tapCnt > 0U)
2400101c:	f1b9 0f00 	cmp.w	r9, #0
24001020:	f000 80a5 	beq.w	2400116e <arm_fir_interpolate_f32+0x412>
        sum0 += *ptr1++ * *ptr2;

        /* Upsampling is done by stuffing L-1 zeros between each sample.
         * So instead of multiplying zeros with coefficients,
         * Increment the coefficient pointer by interpolation factor times. */
        ptr2 += S->L;
24001024:	ea4f 048c 	mov.w	r4, ip, lsl #2
24001028:	9b01      	ldr	r3, [sp, #4]
2400102a:	ea4f 150c 	mov.w	r5, ip, lsl #4
      ptr2 = pCoeffs + (S->L - j);
2400102e:	4602      	mov	r2, r0
24001030:	eb00 01cc 	add.w	r1, r0, ip, lsl #3

        sum0 += *ptr1++ * *ptr2;
24001034:	1917      	adds	r7, r2, r4
24001036:	ed13 4a03 	vldr	s8, [r3, #-12]
2400103a:	ed53 4a04 	vldr	s9, [r3, #-16]
      while (tapCnt > 0U)
2400103e:	3310      	adds	r3, #16
        sum0 += *ptr1++ * *ptr2;
24001040:	edd7 7a00 	vldr	s15, [r7]
        ptr2 += S->L;

        sum0 += *ptr1++ * *ptr2;
        ptr2 += S->L;

        sum0 += *ptr1++ * *ptr2;
24001044:	190f      	adds	r7, r1, r4
24001046:	ed92 5a00 	vldr	s10, [r2]
2400104a:	442a      	add	r2, r5
        sum0 += *ptr1++ * *ptr2;
2400104c:	ee67 7a84 	vmul.f32	s15, s15, s8
24001050:	edd1 6a00 	vldr	s13, [r1]
24001054:	ed53 5a06 	vldr	s11, [r3, #-24]	; 0xffffffe8
      while (tapCnt > 0U)
24001058:	4429      	add	r1, r5
2400105a:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
2400105e:	429e      	cmp	r6, r3
24001060:	eee4 7a85 	vfma.f32	s15, s9, s10
        sum0 += *ptr1++ * *ptr2;
24001064:	eee5 7aa6 	vfma.f32	s15, s11, s13
        sum0 += *ptr1++ * *ptr2;
24001068:	edd7 6a00 	vldr	s13, [r7]
2400106c:	eee6 7a26 	vfma.f32	s15, s12, s13
24001070:	ee37 7a27 	vadd.f32	s14, s14, s15
      while (tapCnt > 0U)
24001074:	d1de      	bne.n	24001034 <arm_fir_interpolate_f32+0x2d8>
        ptr2 += S->L;
24001076:	fb09 f404 	mul.w	r4, r9, r4
2400107a:	f1a6 0210 	sub.w	r2, r6, #16
2400107e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
      /* Initialize tapCnt with number of samples */
      tapCnt = phaseLen;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (tapCnt > 0U)
24001082:	f1ba 0f00 	cmp.w	sl, #0
24001086:	d00e      	beq.n	240010a6 <arm_fir_interpolate_f32+0x34a>
24001088:	f1bc 0f01 	cmp.w	ip, #1
        sum0 += *ptr1++ * *ptr2;

        /* Upsampling is done by stuffing L-1 zeros between each sample.
         * So instead of multiplying zeros with coefficients,
         * Increment the coefficient pointer by interpolation factor times. */
        ptr2 += S->L;
2400108c:	ea4f 018c 	mov.w	r1, ip, lsl #2
24001090:	4653      	mov	r3, sl
24001092:	d113      	bne.n	240010bc <arm_fir_interpolate_f32+0x360>
        sum0 += *ptr1++ * *ptr2;
24001094:	edd0 6a00 	vldr	s13, [r0]
      while (tapCnt > 0U)
24001098:	3b01      	subs	r3, #1
        sum0 += *ptr1++ * *ptr2;
2400109a:	ecf2 7a01 	vldmia	r2!, {s15}
        ptr2 += S->L;
2400109e:	4408      	add	r0, r1
        sum0 += *ptr1++ * *ptr2;
240010a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
      while (tapCnt > 0U)
240010a4:	d1f6      	bne.n	24001094 <arm_fir_interpolate_f32+0x338>
    while (i > 0U)
240010a6:	45f3      	cmp	fp, lr

      /* The result is in the accumulator, store in the destination buffer. */
      *pDst++ = sum0;

      /* Increment the address modifier index of coefficient buffer */
      j++;
240010a8:	f10e 0301 	add.w	r3, lr, #1
      *pDst++ = sum0;
240010ac:	eca8 7a01 	vstmia	r8!, {s14}
    while (i > 0U)
240010b0:	d012      	beq.n	240010d8 <arm_fir_interpolate_f32+0x37c>
      ptr2 = pCoeffs + (S->L - j);
240010b2:	469e      	mov	lr, r3
240010b4:	9b02      	ldr	r3, [sp, #8]
240010b6:	f893 c000 	ldrb.w	ip, [r3]
240010ba:	e7a8      	b.n	2400100e <arm_fir_interpolate_f32+0x2b2>
        sum0 += *ptr1++ * *ptr2;
240010bc:	edd0 7a00 	vldr	s15, [r0]
      while (tapCnt > 0U)
240010c0:	3b01      	subs	r3, #1
        sum0 += *ptr1++ * *ptr2;
240010c2:	ecf2 6a01 	vldmia	r2!, {s13}
        ptr2 += S->L;
240010c6:	4408      	add	r0, r1
        sum0 += *ptr1++ * *ptr2;
240010c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
      while (tapCnt > 0U)
240010cc:	d1f6      	bne.n	240010bc <arm_fir_interpolate_f32+0x360>
240010ce:	e7ea      	b.n	240010a6 <arm_fir_interpolate_f32+0x34a>
      x2 = *(ptr1++);
240010d0:	9b03      	ldr	r3, [sp, #12]
240010d2:	e6f3      	b.n	24000ebc <arm_fir_interpolate_f32+0x160>
240010d4:	00000000 	.word	0x00000000
      *pDst++ = sum0;
240010d8:	9b00      	ldr	r3, [sp, #0]
240010da:	eb03 038b 	add.w	r3, r3, fp, lsl #2
240010de:	9300      	str	r3, [sp, #0]
  while (blkCnt > 0U)
240010e0:	9b01      	ldr	r3, [sp, #4]
240010e2:	3604      	adds	r6, #4
240010e4:	9a08      	ldr	r2, [sp, #32]
240010e6:	3304      	adds	r3, #4
240010e8:	9301      	str	r3, [sp, #4]
240010ea:	9b05      	ldr	r3, [sp, #20]
240010ec:	4293      	cmp	r3, r2
240010ee:	f47f af78 	bne.w	24000fe2 <arm_fir_interpolate_f32+0x286>
      i--;
    }

    /* Advance the state pointer by 1
     * to process the next group of interpolation factor number samples */
    pState = pState + 1;
240010f2:	9b07      	ldr	r3, [sp, #28]
240010f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
240010f6:	9d02      	ldr	r5, [sp, #8]
240010f8:	4413      	add	r3, r2
240010fa:	9307      	str	r3, [sp, #28]
  pStateCur = S->pState;

#if defined (ARM_MATH_LOOPUNROLL)

  /* Loop unrolling: Compute 4 outputs at a time */
  tapCnt = (phaseLen - 1U) >> 2U;
240010fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  pStateCur = S->pState;
240010fe:	68ad      	ldr	r5, [r5, #8]
  tapCnt = (phaseLen - 1U) >> 2U;
24001100:	1e5c      	subs	r4, r3, #1

  /* copy data */
  while (tapCnt > 0U)
24001102:	08a6      	lsrs	r6, r4, #2
24001104:	d020      	beq.n	24001148 <arm_fir_interpolate_f32+0x3ec>
24001106:	9b07      	ldr	r3, [sp, #28]
24001108:	4631      	mov	r1, r6
2400110a:	f103 0210 	add.w	r2, r3, #16
2400110e:	f105 0310 	add.w	r3, r5, #16
  {
    *pStateCur++ = *pState++;
24001112:	f852 0c10 	ldr.w	r0, [r2, #-16]
  while (tapCnt > 0U)
24001116:	3210      	adds	r2, #16
24001118:	3901      	subs	r1, #1
2400111a:	f103 0310 	add.w	r3, r3, #16
    *pStateCur++ = *pState++;
2400111e:	f843 0c20 	str.w	r0, [r3, #-32]
    *pStateCur++ = *pState++;
24001122:	f852 0c1c 	ldr.w	r0, [r2, #-28]
24001126:	f843 0c1c 	str.w	r0, [r3, #-28]
    *pStateCur++ = *pState++;
2400112a:	f852 0c18 	ldr.w	r0, [r2, #-24]
2400112e:	f843 0c18 	str.w	r0, [r3, #-24]
    *pStateCur++ = *pState++;
24001132:	f852 0c14 	ldr.w	r0, [r2, #-20]
24001136:	f843 0c14 	str.w	r0, [r3, #-20]
  while (tapCnt > 0U)
2400113a:	d1ea      	bne.n	24001112 <arm_fir_interpolate_f32+0x3b6>
    *pStateCur++ = *pState++;
2400113c:	9b07      	ldr	r3, [sp, #28]
2400113e:	eb05 1506 	add.w	r5, r5, r6, lsl #4
24001142:	eb03 1306 	add.w	r3, r3, r6, lsl #4
24001146:	9307      	str	r3, [sp, #28]
    tapCnt = (phaseLen - 1U);

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy data */
  while (tapCnt > 0U)
24001148:	f014 0403 	ands.w	r4, r4, #3
2400114c:	d00a      	beq.n	24001164 <arm_fir_interpolate_f32+0x408>
  {
    *pStateCur++ = *pState++;
2400114e:	9a07      	ldr	r2, [sp, #28]
  while (tapCnt > 0U)
24001150:	3c01      	subs	r4, #1
    *pStateCur++ = *pState++;
24001152:	6813      	ldr	r3, [r2, #0]
24001154:	602b      	str	r3, [r5, #0]
  while (tapCnt > 0U)
24001156:	d005      	beq.n	24001164 <arm_fir_interpolate_f32+0x408>
    *pStateCur++ = *pState++;
24001158:	6853      	ldr	r3, [r2, #4]
  while (tapCnt > 0U)
2400115a:	2c01      	cmp	r4, #1
    *pStateCur++ = *pState++;
2400115c:	606b      	str	r3, [r5, #4]
  while (tapCnt > 0U)
2400115e:	d001      	beq.n	24001164 <arm_fir_interpolate_f32+0x408>
    *pStateCur++ = *pState++;
24001160:	6893      	ldr	r3, [r2, #8]
24001162:	60ab      	str	r3, [r5, #8]
    tapCnt--;
  }

#endif /* #if !defined(ARM_MATH_CM0_FAMILY) */

}
24001164:	b00d      	add	sp, #52	; 0x34
24001166:	ecbd 8b02 	vpop	{d8}
2400116a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      while (tapCnt > 0U)
2400116e:	9a06      	ldr	r2, [sp, #24]
24001170:	e787      	b.n	24001082 <arm_fir_interpolate_f32+0x326>
24001172:	bf00      	nop

24001174 <arm_fir_interpolate_init_f32>:
        uint8_t L,
        uint16_t numTaps,
  const float32_t * pCoeffs,
        float32_t * pState,
        uint32_t blockSize)
{
24001174:	b570      	push	{r4, r5, r6, lr}
24001176:	4605      	mov	r5, r0
24001178:	9e04      	ldr	r6, [sp, #16]
  arm_status status;

  /* The filter length must be a multiple of the interpolation factor */
  if ((numTaps % L) != 0U)
2400117a:	fbb2 f0f1 	udiv	r0, r2, r1
2400117e:	fb01 2410 	mls	r4, r1, r0, r2
24001182:	b96c      	cbnz	r4, 240011a0 <arm_fir_interpolate_init_f32+0x2c>
    status = ARM_MATH_LENGTH_ERROR;
  }
  else
  {
    /* Assign coefficient pointer */
    S->pCoeffs = pCoeffs;
24001184:	606b      	str	r3, [r5, #4]

    /* Assign polyPhaseLength */
    S->phaseLength = numTaps / L;

    /* Clear state buffer and size of buffer is always phaseLength + blockSize - 1 */
    memset(pState, 0, (blockSize + ((uint32_t) S->phaseLength - 1U)) * sizeof(float32_t));
24001186:	9b05      	ldr	r3, [sp, #20]
    S->L = L;
24001188:	7029      	strb	r1, [r5, #0]
    memset(pState, 0, (blockSize + ((uint32_t) S->phaseLength - 1U)) * sizeof(float32_t));
2400118a:	4621      	mov	r1, r4
2400118c:	1e5a      	subs	r2, r3, #1
    S->phaseLength = numTaps / L;
2400118e:	8068      	strh	r0, [r5, #2]
    memset(pState, 0, (blockSize + ((uint32_t) S->phaseLength - 1U)) * sizeof(float32_t));
24001190:	4402      	add	r2, r0
24001192:	4630      	mov	r0, r6
24001194:	0092      	lsls	r2, r2, #2
24001196:	f018 fac5 	bl	24019724 <memset>

    /* Assign state pointer */
    S->pState = pState;

    status = ARM_MATH_SUCCESS;
2400119a:	4620      	mov	r0, r4
    S->pState = pState;
2400119c:	60ae      	str	r6, [r5, #8]
  }

  return (status);
}
2400119e:	bd70      	pop	{r4, r5, r6, pc}
    status = ARM_MATH_LENGTH_ERROR;
240011a0:	f06f 0001 	mvn.w	r0, #1
}
240011a4:	bd70      	pop	{r4, r5, r6, pc}
240011a6:	bf00      	nop

240011a8 <arm_sin_f32>:
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
240011a8:	eddf 7a21 	vldr	s15, [pc, #132]	; 24001230 <arm_sin_f32+0x88>
240011ac:	ee20 0a27 	vmul.f32	s0, s0, s15

  /* Calculation of floor value of input */
  n = (int32_t) in;

  /* Make negative values towards -infinity */
  if (in < 0.0f)
240011b0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
  n = (int32_t) in;
240011b4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
  if (in < 0.0f)
240011b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240011bc:	d504      	bpl.n	240011c8 <arm_sin_f32+0x20>
  {
    n--;
240011be:	ee17 3a90 	vmov	r3, s15
240011c2:	3b01      	subs	r3, #1
240011c4:	ee07 3a90 	vmov	s15, r3
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
240011c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
240011cc:	eddf 6a19 	vldr	s13, [pc, #100]	; 24001234 <arm_sin_f32+0x8c>
  in = in - (float32_t) n;
240011d0:	ee30 0a67 	vsub.f32	s0, s0, s15
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
240011d4:	ee60 7a26 	vmul.f32	s15, s0, s13
  index = (uint16_t)findex;
240011d8:	eebc 7ae7 	vcvt.u32.f32	s14, s15
240011dc:	ee17 3a10 	vmov	r3, s14
240011e0:	b29b      	uxth	r3, r3

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
240011e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
240011e6:	d21a      	bcs.n	2400121e <arm_sin_f32+0x76>
    index = 0;
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
240011e8:	ee07 3a10 	vmov	s14, r3

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
  b = sinTable_f32[index+1];
240011ec:	1c59      	adds	r1, r3, #1
  fract = findex - (float32_t) index;
240011ee:	eeb8 7a47 	vcvt.f32.u32	s14, s14
240011f2:	ee37 0ac7 	vsub.f32	s0, s15, s14

  /* Linear interpolation process */
  sinVal = (1.0f - fract) * a + fract * b;
240011f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
  a = sinTable_f32[index];
240011fa:	4a0f      	ldr	r2, [pc, #60]	; (24001238 <arm_sin_f32+0x90>)
  b = sinTable_f32[index+1];
240011fc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  sinVal = (1.0f - fract) * a + fract * b;
24001200:	ee37 7a26 	vadd.f32	s14, s14, s13
  a = sinTable_f32[index];
24001204:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  sinVal = (1.0f - fract) * a + fract * b;
24001208:	ed91 6a00 	vldr	s12, [r1]
2400120c:	edd2 6a00 	vldr	s13, [r2]
24001210:	ee37 7a67 	vsub.f32	s14, s14, s15
24001214:	ee20 0a06 	vmul.f32	s0, s0, s12

  /* Return output value */
  return (sinVal);
}
24001218:	eea7 0a26 	vfma.f32	s0, s14, s13
2400121c:	4770      	bx	lr
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
2400121e:	ee77 7ae6 	vsub.f32	s15, s15, s13
24001222:	2101      	movs	r1, #1
24001224:	2300      	movs	r3, #0
24001226:	ed9f 7a05 	vldr	s14, [pc, #20]	; 2400123c <arm_sin_f32+0x94>
2400122a:	eeb0 0a67 	vmov.f32	s0, s15
2400122e:	e7e2      	b.n	240011f6 <arm_sin_f32+0x4e>
24001230:	3e22f983 	.word	0x3e22f983
24001234:	44000000 	.word	0x44000000
24001238:	2401bcf4 	.word	0x2401bcf4
2400123c:	00000000 	.word	0x00000000

24001240 <dbToATableLookup>:
    uint32_t inAmpIndex = LEAF_clip (0, (in * atodbTableScalar) - atodbTableOffset, ATODB_TABLE_SIZE_MINUS_ONE);
    return atoDbTable[inAmpIndex];
}

float FORCE_INLINE dbToATableLookup(float in)
{
24001240:	b508      	push	{r3, lr}
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
24001242:	4a19      	ldr	r2, [pc, #100]	; (240012a8 <dbToATableLookup+0x68>)
{
24001244:	eef0 7a40 	vmov.f32	s15, s0
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
24001248:	4b18      	ldr	r3, [pc, #96]	; (240012ac <dbToATableLookup+0x6c>)
2400124a:	edd2 0a00 	vldr	s1, [r2]
2400124e:	ed93 7a00 	vldr	s14, [r3]
24001252:	ed9f 1a17 	vldr	s2, [pc, #92]	; 240012b0 <dbToATableLookup+0x70>
24001256:	eed7 0a27 	vfnms.f32	s1, s14, s15
2400125a:	ed9f 0a16 	vldr	s0, [pc, #88]	; 240012b4 <dbToATableLookup+0x74>
2400125e:	f013 fceb 	bl	24014c38 <LEAF_clip>
    uint32_t inDBIndex = (uint32_t) floatIndex;
24001262:	eebc 7ac0 	vcvt.u32.f32	s14, s0
    if (inDBIndexPlusOne > DBTOA_TABLE_SIZE_MINUS_ONE)
    {
    	inDBIndexPlusOne = DBTOA_TABLE_SIZE_MINUS_ONE;
    }
    float alpha = floatIndex - (float)inDBIndex;
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
24001266:	f643 70ff 	movw	r0, #16383	; 0x3fff
2400126a:	4a13      	ldr	r2, [pc, #76]	; (240012b8 <dbToATableLookup+0x78>)
2400126c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    uint32_t inDBIndex = (uint32_t) floatIndex;
24001270:	ee17 3a10 	vmov	r3, s14
    float alpha = floatIndex - (float)inDBIndex;
24001274:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    uint32_t inDBIndexPlusOne = inDBIndex + 1;
24001278:	1c59      	adds	r1, r3, #1
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
2400127a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
2400127e:	ee77 7ac0 	vsub.f32	s15, s15, s0
24001282:	4281      	cmp	r1, r0
    float alpha = floatIndex - (float)inDBIndex;
24001284:	ee30 0a47 	vsub.f32	s0, s0, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
24001288:	bf28      	it	cs
2400128a:	4601      	movcs	r1, r0
2400128c:	ee77 7a87 	vadd.f32	s15, s15, s14
24001290:	ed93 7a00 	vldr	s14, [r3]
24001294:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24001298:	edd2 6a00 	vldr	s13, [r2]
2400129c:	ee20 0a26 	vmul.f32	s0, s0, s13
}
240012a0:	eea7 0a27 	vfma.f32	s0, s14, s15
240012a4:	bd08      	pop	{r3, pc}
240012a6:	bf00      	nop
240012a8:	20000f1c 	.word	0x20000f1c
240012ac:	20000f20 	.word	0x20000f20
240012b0:	467ffc00 	.word	0x467ffc00
240012b4:	00000000 	.word	0x00000000
240012b8:	30002000 	.word	0x30002000

240012bc <mtofTableLookup>:
}



float FORCE_INLINE mtofTableLookup(float tempMIDI)
{
240012bc:	eef0 0a40 	vmov.f32	s1, s0
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
240012c0:	ed9f 1a16 	vldr	s2, [pc, #88]	; 2400131c <mtofTableLookup+0x60>
240012c4:	ed9f 0a16 	vldr	s0, [pc, #88]	; 24001320 <mtofTableLookup+0x64>
{
240012c8:	b508      	push	{r3, lr}
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
240012ca:	f013 fcb5 	bl	24014c38 <LEAF_clip>
240012ce:	eddf 6a15 	vldr	s13, [pc, #84]	; 24001324 <mtofTableLookup+0x68>
240012d2:	eddf 7a15 	vldr	s15, [pc, #84]	; 24001328 <mtofTableLookup+0x6c>
	int tempIndexI = (int)tempIndexF;
	tempIndexF = tempIndexF -tempIndexI;
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
240012d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
240012da:	4a14      	ldr	r2, [pc, #80]	; (2400132c <mtofTableLookup+0x70>)
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
240012dc:	eee0 7a26 	vfma.f32	s15, s0, s13
	int tempIndexI = (int)tempIndexF;
240012e0:	eefd 6ae7 	vcvt.s32.f32	s13, s15
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
240012e4:	ee37 7a67 	vsub.f32	s14, s14, s15
	int tempIndexI = (int)tempIndexF;
240012e8:	ee16 3a90 	vmov	r3, s13
	tempIndexF = tempIndexF -tempIndexI;
240012ec:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
240012f0:	1c59      	adds	r1, r3, #1
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
240012f2:	f3c3 030e 	ubfx	r3, r3, #0, #15
	tempIndexF = tempIndexF -tempIndexI;
240012f6:	ee37 0ae6 	vsub.f32	s0, s15, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
240012fa:	f3c1 010e 	ubfx	r1, r1, #0, #15
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
240012fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
24001302:	ee37 7a26 	vadd.f32	s14, s14, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
24001306:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
2400130a:	edd3 7a00 	vldr	s15, [r3]
2400130e:	edd2 6a00 	vldr	s13, [r2]
24001312:	ee20 0a26 	vmul.f32	s0, s0, s13
}
24001316:	eea7 0a27 	vfma.f32	s0, s14, s15
2400131a:	bd08      	pop	{r3, pc}
2400131c:	43230000 	.word	0x43230000
24001320:	c3230000 	.word	0xc3230000
24001324:	42c80000 	.word	0x42c80000
24001328:	46800000 	.word	0x46800000
2400132c:	30022000 	.word	0x30022000

24001330 <audioInit>:


void audioInit()
{
24001330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
24001334:	4da3      	ldr	r5, [pc, #652]	; (240015c4 <audioInit+0x294>)
24001336:	f64e 2260 	movw	r2, #60000	; 0xea60
2400133a:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 240015c8 <audioInit+0x298>
2400133e:	4628      	mov	r0, r5
24001340:	49a2      	ldr	r1, [pc, #648]	; (240015cc <audioInit+0x29c>)
24001342:	4ba3      	ldr	r3, [pc, #652]	; (240015d0 <audioInit+0x2a0>)
24001344:	4ca3      	ldr	r4, [pc, #652]	; (240015d4 <audioInit+0x2a4>)
{
24001346:	ed2d 8b04 	vpush	{d8-d9}
	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
2400134a:	f018 f95b 	bl	24019604 <LEAF_init>

	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
2400134e:	462b      	mov	r3, r5
24001350:	f44f 2280 	mov.w	r2, #262144	; 0x40000
24001354:	49a0      	ldr	r1, [pc, #640]	; (240015d8 <audioInit+0x2a8>)
24001356:	48a1      	ldr	r0, [pc, #644]	; (240015dc <audioInit+0x2ac>)
24001358:	f014 f896 	bl	24015488 <tMempool_init>
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);
2400135c:	462b      	mov	r3, r5
2400135e:	f04f 72f0 	mov.w	r2, #31457280	; 0x1e00000
24001362:	499f      	ldr	r1, [pc, #636]	; (240015e0 <audioInit+0x2b0>)
24001364:	489f      	ldr	r0, [pc, #636]	; (240015e4 <audioInit+0x2b4>)
24001366:	f014 f88f 	bl	24015488 <tMempool_init>

	leaf.clearOnAllocation = 1;
2400136a:	2301      	movs	r3, #1
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
2400136c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24001370:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24001374:	eddf 1a9c 	vldr	s3, [pc, #624]	; 240015e8 <audioInit+0x2b8>
24001378:	eddf 0a9c 	vldr	s1, [pc, #624]	; 240015ec <audioInit+0x2bc>
2400137c:	ed9f 0a9c 	vldr	s0, [pc, #624]	; 240015f0 <audioInit+0x2c0>
24001380:	489c      	ldr	r0, [pc, #624]	; (240015f4 <audioInit+0x2c4>)
	leaf.clearOnAllocation = 1;
24001382:	616b      	str	r3, [r5, #20]
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
24001384:	f013 fce4 	bl	24014d50 <LEAF_generate_exp>
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;

	for (int i = 0; i < 12; i++)
	{
		previousStringInputs[i]	= 0;
24001388:	4b9b      	ldr	r3, [pc, #620]	; (240015f8 <audioInit+0x2c8>)
2400138a:	2200      	movs	r2, #0
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
2400138c:	499b      	ldr	r1, [pc, #620]	; (240015fc <audioInit+0x2cc>)
2400138e:	f504 6580 	add.w	r5, r4, #1024	; 0x400
		previousStringInputs[i]	= 0;
24001392:	801a      	strh	r2, [r3, #0]



	for (int i = 0; i < 256; i++)
	{
		randomFactors[i] = (randomNumber() * 0.4f) + 0.8f;
24001394:	eddf 8a9a 	vldr	s17, [pc, #616]	; 24001600 <audioInit+0x2d0>
		previousStringInputs[i]	= 0;
24001398:	805a      	strh	r2, [r3, #2]
		randomFactors[i] = (randomNumber() * 0.4f) + 0.8f;
2400139a:	ed9f 8a9a 	vldr	s16, [pc, #616]	; 24001604 <audioInit+0x2d4>
		previousStringInputs[i]	= 0;
2400139e:	809a      	strh	r2, [r3, #4]
240013a0:	80da      	strh	r2, [r3, #6]
240013a2:	811a      	strh	r2, [r3, #8]
240013a4:	815a      	strh	r2, [r3, #10]
240013a6:	819a      	strh	r2, [r3, #12]
240013a8:	81da      	strh	r2, [r3, #14]
240013aa:	821a      	strh	r2, [r3, #16]
240013ac:	825a      	strh	r2, [r3, #18]
240013ae:	829a      	strh	r2, [r3, #20]
240013b0:	82da      	strh	r2, [r3, #22]
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
240013b2:	4b95      	ldr	r3, [pc, #596]	; (24001608 <audioInit+0x2d8>)
240013b4:	600b      	str	r3, [r1, #0]
		randomFactors[i] = (randomNumber() * 0.4f) + 0.8f;
240013b6:	f026 fe23 	bl	24028000 <__randomNumber_veneer>
240013ba:	eef0 7a48 	vmov.f32	s15, s16
240013be:	eee0 7a28 	vfma.f32	s15, s0, s17
240013c2:	ece4 7a01 	vstmia	r4!, {s15}
	for (int i = 0; i < 256; i++)
240013c6:	42ac      	cmp	r4, r5
240013c8:	d1f5      	bne.n	240013b6 <audioInit+0x86>
	}
	LEAF_generate_atodb(atoDbTable, ATODB_TABLE_SIZE, 0.00001f, 1.0f);
240013ca:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240013ce:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 2400160c <audioInit+0x2dc>
240013d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
240013d6:	488e      	ldr	r0, [pc, #568]	; (24001610 <audioInit+0x2e0>)
240013d8:	f013 fd24 	bl	24014e24 <LEAF_generate_atodb>
	LEAF_generate_dbtoa(dbtoATable, DBTOA_TABLE_SIZE, -90.0f, 50.0f);
240013dc:	eddf 0a8d 	vldr	s1, [pc, #564]	; 24001614 <audioInit+0x2e4>
240013e0:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 24001618 <audioInit+0x2e8>
240013e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
240013e8:	488c      	ldr	r0, [pc, #560]	; (2400161c <audioInit+0x2ec>)
240013ea:	f013 fd3f 	bl	24014e6c <LEAF_generate_dbtoa>

	atodbTableScalar = ATODB_TABLE_SIZE_MINUS_ONE/(1.0f-0.00001f);
240013ee:	4b8c      	ldr	r3, [pc, #560]	; (24001620 <audioInit+0x2f0>)
240013f0:	498c      	ldr	r1, [pc, #560]	; (24001624 <audioInit+0x2f4>)
	atodbTableOffset = 0.00001f * atodbTableScalar;
	dbtoaTableScalar = DBTOA_TABLE_SIZE_MINUS_ONE/(50.0f+90.0f);
240013f2:	4a8d      	ldr	r2, [pc, #564]	; (24001628 <audioInit+0x2f8>)
	atodbTableScalar = ATODB_TABLE_SIZE_MINUS_ONE/(1.0f-0.00001f);
240013f4:	6019      	str	r1, [r3, #0]
	dbtoaTableScalar = DBTOA_TABLE_SIZE_MINUS_ONE/(50.0f+90.0f);
240013f6:	498d      	ldr	r1, [pc, #564]	; (2400162c <audioInit+0x2fc>)
	atodbTableOffset = 0.00001f * atodbTableScalar;
240013f8:	488d      	ldr	r0, [pc, #564]	; (24001630 <audioInit+0x300>)
240013fa:	4c8e      	ldr	r4, [pc, #568]	; (24001634 <audioInit+0x304>)
	dbtoaTableOffset = -90.0f * dbtoaTableScalar;
240013fc:	4b8e      	ldr	r3, [pc, #568]	; (24001638 <audioInit+0x308>)
	dbtoaTableScalar = DBTOA_TABLE_SIZE_MINUS_ONE/(50.0f+90.0f);
240013fe:	6011      	str	r1, [r2, #0]

	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
24001400:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	dbtoaTableOffset = -90.0f * dbtoaTableScalar;
24001404:	4a8d      	ldr	r2, [pc, #564]	; (2400163c <audioInit+0x30c>)
	atodbTableOffset = 0.00001f * atodbTableScalar;
24001406:	6004      	str	r4, [r0, #0]
	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
24001408:	eddf 0a8d 	vldr	s1, [pc, #564]	; 24001640 <audioInit+0x310>
2400140c:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 24001644 <audioInit+0x314>
24001410:	488d      	ldr	r0, [pc, #564]	; (24001648 <audioInit+0x318>)
	dbtoaTableOffset = -90.0f * dbtoaTableScalar;
24001412:	601a      	str	r2, [r3, #0]
	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
24001414:	f013 fd54 	bl	24014ec0 <LEAF_generate_mtof>

	if (numStrings == 6)
24001418:	4b8c      	ldr	r3, [pc, #560]	; (2400164c <audioInit+0x31c>)
2400141a:	781b      	ldrb	r3, [r3, #0]
2400141c:	2b06      	cmp	r3, #6
2400141e:	f000 80c4 	beq.w	240015aa <audioInit+0x27a>
	{
		firstString = boardNumber;
		numStringsThisBoard = 1;
	}

	else if (numStrings == 10)
24001422:	2b0a      	cmp	r3, #10
24001424:	f000 80b6 	beq.w	24001594 <audioInit+0x264>
	}

	else //otherwise 12-string version
	{

		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
24001428:	4a89      	ldr	r2, [pc, #548]	; (24001650 <audioInit+0x320>)
2400142a:	2302      	movs	r3, #2
2400142c:	4989      	ldr	r1, [pc, #548]	; (24001654 <audioInit+0x324>)
2400142e:	7812      	ldrb	r2, [r2, #0]
24001430:	0052      	lsls	r2, r2, #1
24001432:	600a      	str	r2, [r1, #0]


	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
	for (int i = 0; i < 12; i++)
	{
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
24001434:	4e63      	ldr	r6, [pc, #396]	; (240015c4 <audioInit+0x294>)
24001436:	eddf 8a88 	vldr	s17, [pc, #544]	; 24001658 <audioInit+0x328>
2400143a:	4c88      	ldr	r4, [pc, #544]	; (2400165c <audioInit+0x32c>)
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
2400143c:	4631      	mov	r1, r6
		numStringsThisBoard = 1;
2400143e:	4a88      	ldr	r2, [pc, #544]	; (24001660 <audioInit+0x330>)
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
24001440:	eef0 0a68 	vmov.f32	s1, s17
24001444:	ed9f 0a69 	vldr	s0, [pc, #420]	; 240015ec <audioInit+0x2bc>
24001448:	f104 0530 	add.w	r5, r4, #48	; 0x30
2400144c:	4885      	ldr	r0, [pc, #532]	; (24001664 <audioInit+0x334>)
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
2400144e:	eeb0 8a40 	vmov.f32	s16, s0
		numStringsThisBoard = 1;
24001452:	7013      	strb	r3, [r2, #0]
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
24001454:	f010 fc98 	bl	24011d88 <tExpSmooth_init>
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
24001458:	4620      	mov	r0, r4
	for (int i = 0; i < 12; i++)
2400145a:	3404      	adds	r4, #4
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
2400145c:	eef0 0a68 	vmov.f32	s1, s17
24001460:	4631      	mov	r1, r6
24001462:	eeb0 0a48 	vmov.f32	s0, s16
24001466:	f010 fc8f 	bl	24011d88 <tExpSmooth_init>
	for (int i = 0; i < 12; i++)
2400146a:	42ac      	cmp	r4, r5
2400146c:	d1f4      	bne.n	24001458 <audioInit+0x128>
2400146e:	4c7e      	ldr	r4, [pc, #504]	; (24001668 <audioInit+0x338>)
	}
	for (int i = 0; i < 10; i++)
	{
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
24001470:	4e54      	ldr	r6, [pc, #336]	; (240015c4 <audioInit+0x294>)
24001472:	eddf 8a79 	vldr	s17, [pc, #484]	; 24001658 <audioInit+0x328>
24001476:	f104 0528 	add.w	r5, r4, #40	; 0x28
2400147a:	ed9f 8a5c 	vldr	s16, [pc, #368]	; 240015ec <audioInit+0x2bc>
2400147e:	4620      	mov	r0, r4
	for (int i = 0; i < 10; i++)
24001480:	3404      	adds	r4, #4
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
24001482:	eef0 0a68 	vmov.f32	s1, s17
24001486:	4631      	mov	r1, r6
24001488:	eeb0 0a48 	vmov.f32	s0, s16
2400148c:	f010 fc7c 	bl	24011d88 <tExpSmooth_init>
	for (int i = 0; i < 10; i++)
24001490:	42ac      	cmp	r4, r5
24001492:	d1f4      	bne.n	2400147e <audioInit+0x14e>
	}

	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
	{
		tExpSmooth_init(&barSlideSmoother[i],0.000f, 0.01f, &leaf);
24001494:	494b      	ldr	r1, [pc, #300]	; (240015c4 <audioInit+0x294>)
24001496:	eddf 0a75 	vldr	s1, [pc, #468]	; 2400166c <audioInit+0x33c>
2400149a:	ed9f 0a54 	vldr	s0, [pc, #336]	; 240015ec <audioInit+0x2bc>
2400149e:	4874      	ldr	r0, [pc, #464]	; (24001670 <audioInit+0x340>)
240014a0:	f010 fc72 	bl	24011d88 <tExpSmooth_init>
		tEnvelopeFollower_init(&barNoiseSmoother[i],0.0001f, 0.9993f, &leaf);
240014a4:	4947      	ldr	r1, [pc, #284]	; (240015c4 <audioInit+0x294>)
240014a6:	eddf 0a73 	vldr	s1, [pc, #460]	; 24001674 <audioInit+0x344>
240014aa:	ed9f 0a73 	vldr	s0, [pc, #460]	; 24001678 <audioInit+0x348>
240014ae:	4873      	ldr	r0, [pc, #460]	; (2400167c <audioInit+0x34c>)
240014b0:	f00f fb46 	bl	24010b40 <tEnvelopeFollower_init>
		tExpSmooth_init(&barSlideSmoother[i],0.000f, 0.01f, &leaf);
240014b4:	4943      	ldr	r1, [pc, #268]	; (240015c4 <audioInit+0x294>)
240014b6:	4c72      	ldr	r4, [pc, #456]	; (24001680 <audioInit+0x350>)

	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
	{


		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
240014b8:	460d      	mov	r5, r1
		tExpSmooth_init(&barSlideSmoother[i],0.000f, 0.01f, &leaf);
240014ba:	eddf 0a6c 	vldr	s1, [pc, #432]	; 2400166c <audioInit+0x33c>
240014be:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 240015ec <audioInit+0x2bc>
240014c2:	f104 0808 	add.w	r8, r4, #8
240014c6:	486f      	ldr	r0, [pc, #444]	; (24001684 <audioInit+0x354>)
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
240014c8:	ed9f 9a6f 	vldr	s18, [pc, #444]	; 24001688 <audioInit+0x358>
		tExpSmooth_init(&barSlideSmoother[i],0.000f, 0.01f, &leaf);
240014cc:	f010 fc5c 	bl	24011d88 <tExpSmooth_init>
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
240014d0:	eddf 8a46 	vldr	s17, [pc, #280]	; 240015ec <audioInit+0x2bc>
		tEnvelopeFollower_init(&barNoiseSmoother[i],0.0001f, 0.9993f, &leaf);
240014d4:	4629      	mov	r1, r5
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
240014d6:	ed9f 8a4f 	vldr	s16, [pc, #316]	; 24001614 <audioInit+0x2e4>


		tVZFilter_init(&noiseFilt, BandpassPeak, 1500.0f, 1.5f, &leaf);
240014da:	4f6c      	ldr	r7, [pc, #432]	; (2400168c <audioInit+0x35c>)
		tVZFilter_init(&noiseFilt2, Lowpass, 800.0f, 0.9f, &leaf);
240014dc:	4e6c      	ldr	r6, [pc, #432]	; (24001690 <audioInit+0x360>)
		tEnvelopeFollower_init(&barNoiseSmoother[i],0.0001f, 0.9993f, &leaf);
240014de:	eddf 0a65 	vldr	s1, [pc, #404]	; 24001674 <audioInit+0x344>
240014e2:	ed9f 0a65 	vldr	s0, [pc, #404]	; 24001678 <audioInit+0x348>
240014e6:	486b      	ldr	r0, [pc, #428]	; (24001694 <audioInit+0x364>)
240014e8:	f00f fb2a 	bl	24010b40 <tEnvelopeFollower_init>
	audioInitAdditive();
240014ec:	f026 fd98 	bl	24028020 <__audioInitAdditive_veneer>
	audioInitString1();
240014f0:	f026 fd9a 	bl	24028028 <__audioInitString1_veneer>
	audioInitVocal();
240014f4:	f026 fd7c 	bl	24027ff0 <__audioInitVocal_veneer>
	audioInitSynth();
240014f8:	f003 f8f8 	bl	240046ec <audioInitSynth>
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
240014fc:	eef0 1a49 	vmov.f32	s3, s18
24001500:	462b      	mov	r3, r5
24001502:	eeb0 1a68 	vmov.f32	s2, s17
24001506:	4620      	mov	r0, r4
24001508:	eef0 0a48 	vmov.f32	s1, s16
2400150c:	ed9f 0a37 	vldr	s0, [pc, #220]	; 240015ec <audioInit+0x2bc>
24001510:	4938      	ldr	r1, [pc, #224]	; (240015f4 <audioInit+0x2c4>)
24001512:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24001516:	f010 f923 	bl	24011760 <tADSRT_init>
		tVZFilter_init(&noiseFilt, BandpassPeak, 1500.0f, 1.5f, &leaf);
2400151a:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
2400151e:	462a      	mov	r2, r5
24001520:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 24001698 <audioInit+0x368>
24001524:	2103      	movs	r1, #3
24001526:	4638      	mov	r0, r7
24001528:	f011 fc50 	bl	24012dcc <tVZFilter_init>
		tVZFilter_init(&noiseFilt2, Lowpass, 800.0f, 0.9f, &leaf);
2400152c:	462a      	mov	r2, r5
2400152e:	eddf 0a5b 	vldr	s1, [pc, #364]	; 2400169c <audioInit+0x36c>
24001532:	2101      	movs	r1, #1
24001534:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 240016a0 <audioInit+0x370>
24001538:	4630      	mov	r0, r6
2400153a:	f011 fc47 	bl	24012dcc <tVZFilter_init>
		tVZFilter_setFreq(&noiseFilt2, 3332.0f); //based on testing with knob values
2400153e:	4630      	mov	r0, r6
24001540:	ed9f 0a58 	vldr	s0, [pc, #352]	; 240016a4 <audioInit+0x374>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24001544:	3404      	adds	r4, #4
		tVZFilter_setFreq(&noiseFilt2, 3332.0f); //based on testing with knob values
24001546:	f011 fc45 	bl	24012dd4 <tVZFilter_setFreq>


		tVZFilter_setFreq(&noiseFilt, faster_mtof(0.9f * 128.0f));
2400154a:	ed9f 0a57 	vldr	s0, [pc, #348]	; 240016a8 <audioInit+0x378>
2400154e:	f013 fdd1 	bl	240150f4 <faster_mtof>
24001552:	4638      	mov	r0, r7
24001554:	f011 fc3e 	bl	24012dd4 <tVZFilter_setFreq>
		tVZFilter_setFreq(&noiseFilt2,faster_mtof(0.8f * 128.0f));
24001558:	ed9f 0a54 	vldr	s0, [pc, #336]	; 240016ac <audioInit+0x37c>
2400155c:	f013 fdca 	bl	240150f4 <faster_mtof>
24001560:	4630      	mov	r0, r6
24001562:	f011 fc37 	bl	24012dd4 <tVZFilter_setFreq>

		tNoise_init(&myNoise, WhiteNoise, &leaf);
24001566:	462a      	mov	r2, r5
24001568:	2100      	movs	r1, #0
2400156a:	4851      	ldr	r0, [pc, #324]	; (240016b0 <audioInit+0x380>)
2400156c:	f014 fb7a 	bl	24015c64 <tNoise_init>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24001570:	45a0      	cmp	r8, r4
24001572:	d1c3      	bne.n	240014fc <audioInit+0x1cc>
	}

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
	{

			audioOutBuffer[ i] = (int32_t)(0.0f * TWO_TO_23);
24001574:	f44f 6280 	mov.w	r2, #1024	; 0x400
24001578:	2100      	movs	r1, #0
2400157a:	484e      	ldr	r0, [pc, #312]	; (240016b4 <audioInit+0x384>)
2400157c:	f018 f8d2 	bl	24019724 <memset>
	}

	audioFrameFunction = audioFrameSynth;
24001580:	4b4d      	ldr	r3, [pc, #308]	; (240016b8 <audioInit+0x388>)
24001582:	4a4e      	ldr	r2, [pc, #312]	; (240016bc <audioInit+0x38c>)
	HAL_Delay(1);
24001584:	2001      	movs	r0, #1
	audioFrameFunction = audioFrameSynth;
24001586:	601a      	str	r2, [r3, #0]

}
24001588:	ecbd 8b04 	vpop	{d8-d9}
2400158c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_Delay(1);
24001590:	f003 be82 	b.w	24005298 <HAL_Delay>
		if (boardNumber == 0)
24001594:	4b2e      	ldr	r3, [pc, #184]	; (24001650 <audioInit+0x320>)
24001596:	781b      	ldrb	r3, [r3, #0]
24001598:	b16b      	cbz	r3, 240015b6 <audioInit+0x286>
		else if (boardNumber == 1)
2400159a:	2b01      	cmp	r3, #1
2400159c:	d00f      	beq.n	240015be <audioInit+0x28e>
			firstString = (boardNumber - 1) * NUM_STRINGS_PER_BOARD;
2400159e:	1e5a      	subs	r2, r3, #1
240015a0:	492c      	ldr	r1, [pc, #176]	; (24001654 <audioInit+0x324>)
240015a2:	2302      	movs	r3, #2
240015a4:	0052      	lsls	r2, r2, #1
240015a6:	600a      	str	r2, [r1, #0]
			numStringsThisBoard = 2;
240015a8:	e744      	b.n	24001434 <audioInit+0x104>
		firstString = boardNumber;
240015aa:	4929      	ldr	r1, [pc, #164]	; (24001650 <audioInit+0x320>)
240015ac:	2301      	movs	r3, #1
240015ae:	4a29      	ldr	r2, [pc, #164]	; (24001654 <audioInit+0x324>)
240015b0:	7809      	ldrb	r1, [r1, #0]
240015b2:	6011      	str	r1, [r2, #0]
		numStringsThisBoard = 1;
240015b4:	e73e      	b.n	24001434 <audioInit+0x104>
			firstString = 0;
240015b6:	4a27      	ldr	r2, [pc, #156]	; (24001654 <audioInit+0x324>)
240015b8:	6013      	str	r3, [r2, #0]
			numStringsThisBoard = 1;
240015ba:	2301      	movs	r3, #1
240015bc:	e73a      	b.n	24001434 <audioInit+0x104>
			firstString = 1;
240015be:	4a25      	ldr	r2, [pc, #148]	; (24001654 <audioInit+0x324>)
240015c0:	6013      	str	r3, [r2, #0]
			numStringsThisBoard = 1;
240015c2:	e737      	b.n	24001434 <audioInit+0x104>
240015c4:	20004fb8 	.word	0x20004fb8
240015c8:	473b8000 	.word	0x473b8000
240015cc:	200054a0 	.word	0x200054a0
240015d0:	00001c81 	.word	0x00001c81
240015d4:	2000509c 	.word	0x2000509c
240015d8:	24040000 	.word	0x24040000
240015dc:	2000500c 	.word	0x2000500c
240015e0:	c0000000 	.word	0xc0000000
240015e4:	20004fb4 	.word	0x20004fb4
240015e8:	ba51b717 	.word	0xba51b717
240015ec:	00000000 	.word	0x00000000
240015f0:	3a83126f 	.word	0x3a83126f
240015f4:	20000f24 	.word	0x20000f24
240015f8:	20005084 	.word	0x20005084
240015fc:	20004f24 	.word	0x20004f24
24001600:	3ecccccd 	.word	0x3ecccccd
24001604:	3f4ccccd 	.word	0x3f4ccccd
24001608:	457ff000 	.word	0x457ff000
2400160c:	3727c5ac 	.word	0x3727c5ac
24001610:	30012000 	.word	0x30012000
24001614:	42480000 	.word	0x42480000
24001618:	c2b40000 	.word	0xc2b40000
2400161c:	30002000 	.word	0x30002000
24001620:	20000efc 	.word	0x20000efc
24001624:	467ffca8 	.word	0x467ffca8
24001628:	20000f20 	.word	0x20000f20
2400162c:	42ea0af9 	.word	0x42ea0af9
24001630:	20000ef8 	.word	0x20000ef8
24001634:	3e27c37b 	.word	0x3e27c37b
24001638:	20000f1c 	.word	0x20000f1c
2400163c:	c6248fb7 	.word	0xc6248fb7
24001640:	4323d666 	.word	0x4323d666
24001644:	c323d666 	.word	0xc323d666
24001648:	30022000 	.word	0x30022000
2400164c:	200004b0 	.word	0x200004b0
24001650:	20014159 	.word	0x20014159
24001654:	20004f38 	.word	0x20004f38
24001658:	3a03126f 	.word	0x3a03126f
2400165c:	20004f84 	.word	0x20004f84
24001660:	200004b1 	.word	0x200004b1
24001664:	20013f80 	.word	0x20013f80
24001668:	20005050 	.word	0x20005050
2400166c:	3c23d70a 	.word	0x3c23d70a
24001670:	20000f14 	.word	0x20000f14
24001674:	3f7fd220 	.word	0x3f7fd220
24001678:	38d1b717 	.word	0x38d1b717
2400167c:	20000f0c 	.word	0x20000f0c
24001680:	20004f30 	.word	0x20004f30
24001684:	20000f18 	.word	0x20000f18
24001688:	43480000 	.word	0x43480000
2400168c:	20005018 	.word	0x20005018
24001690:	2000501c 	.word	0x2000501c
24001694:	20000f10 	.word	0x20000f10
24001698:	44bb8000 	.word	0x44bb8000
2400169c:	3f666666 	.word	0x3f666666
240016a0:	44480000 	.word	0x44480000
240016a4:	45504000 	.word	0x45504000
240016a8:	42e66666 	.word	0x42e66666
240016ac:	42cccccd 	.word	0x42cccccd
240016b0:	20005010 	.word	0x20005010
240016b4:	30000000 	.word	0x30000000
240016b8:	20000f00 	.word	0x20000f00
240016bc:	00008b01 	.word	0x00008b01

240016c0 <audioStart>:

void audioStart(SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
240016c0:	b570      	push	{r4, r5, r6, lr}
240016c2:	4605      	mov	r5, r0
	HAL_Delay(1);
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
240016c4:	4e0b      	ldr	r6, [pc, #44]	; (240016f4 <audioStart+0x34>)
	HAL_Delay(1);
240016c6:	2001      	movs	r0, #1
{
240016c8:	460c      	mov	r4, r1
	HAL_Delay(1);
240016ca:	f003 fde5 	bl	24005298 <HAL_Delay>
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
240016ce:	f44f 7280 	mov.w	r2, #256	; 0x100
240016d2:	4631      	mov	r1, r6
240016d4:	4628      	mov	r0, r5
240016d6:	f009 f8db 	bl	2400a890 <HAL_SAI_Transmit_DMA>
240016da:	4b07      	ldr	r3, [pc, #28]	; (240016f8 <audioStart+0x38>)
240016dc:	4605      	mov	r5, r0
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
240016de:	f44f 7280 	mov.w	r2, #256	; 0x100
240016e2:	f506 6180 	add.w	r1, r6, #1024	; 0x400
240016e6:	4620      	mov	r0, r4
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
240016e8:	701d      	strb	r5, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
240016ea:	f009 f96d 	bl	2400a9c8 <HAL_SAI_Receive_DMA>
240016ee:	4b03      	ldr	r3, [pc, #12]	; (240016fc <audioStart+0x3c>)
240016f0:	7018      	strb	r0, [r3, #0]
}
240016f2:	bd70      	pop	{r4, r5, r6, pc}
240016f4:	30000000 	.word	0x30000000
240016f8:	20013f70 	.word	0x20013f70
240016fc:	2000549c 	.word	0x2000549c

24001700 <MX_BDMA_Init>:
  */
void MX_BDMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
24001700:	4b10      	ldr	r3, [pc, #64]	; (24001744 <MX_BDMA_Init+0x44>)

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 9, 0);
24001702:	2200      	movs	r2, #0
24001704:	2109      	movs	r1, #9
24001706:	2081      	movs	r0, #129	; 0x81
{
24001708:	b510      	push	{r4, lr}
  __HAL_RCC_BDMA_CLK_ENABLE();
2400170a:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
{
2400170e:	b082      	sub	sp, #8
  __HAL_RCC_BDMA_CLK_ENABLE();
24001710:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
24001714:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
24001718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
2400171c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
24001720:	9301      	str	r3, [sp, #4]
24001722:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 9, 0);
24001724:	f003 fde2 	bl	240052ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
24001728:	2081      	movs	r0, #129	; 0x81
2400172a:	f003 fe1d 	bl	24005368 <HAL_NVIC_EnableIRQ>
  /* BDMA_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel1_IRQn, 10, 0);
2400172e:	2082      	movs	r0, #130	; 0x82
24001730:	2200      	movs	r2, #0
24001732:	210a      	movs	r1, #10
24001734:	f003 fdda 	bl	240052ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
24001738:	2082      	movs	r0, #130	; 0x82

}
2400173a:	b002      	add	sp, #8
2400173c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
24001740:	f003 be12 	b.w	24005368 <HAL_NVIC_EnableIRQ>
24001744:	58024400 	.word	0x58024400

24001748 <codec_init>:
    CODEC_RATE_44K_44K = 0x08 << 2,
};


void codec_init(I2C_HandleTypeDef* i2c)
{
24001748:	b570      	push	{r4, r5, r6, lr}

int WriteControlRegister(I2C_HandleTypeDef* i2c, uint8_t address, uint16_t data)
{
    uint8_t byte_1  = ((address << 1) & 0xfe) | ((data >> 8) & 0x01);
    uint8_t byte_2  = data & 0xff;
    uint8_t buff[2] = {byte_1, byte_2};
2400174a:	231e      	movs	r3, #30
{
2400174c:	b084      	sub	sp, #16
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400174e:	25fa      	movs	r5, #250	; 0xfa
24001750:	2134      	movs	r1, #52	; 0x34
24001752:	aa03      	add	r2, sp, #12
    uint8_t buff[2] = {byte_1, byte_2};
24001754:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001758:	9500      	str	r5, [sp, #0]
2400175a:	2302      	movs	r3, #2
{
2400175c:	4604      	mov	r4, r0
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400175e:	f005 feeb 	bl	24007538 <HAL_I2C_Master_Transmit>
                                              2, 250);

    HAL_Delay(10);
24001762:	200a      	movs	r0, #10
    uint8_t buff[2] = {byte_1, byte_2};
24001764:	260a      	movs	r6, #10
    HAL_Delay(10);
24001766:	f003 fd97 	bl	24005298 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
2400176a:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400176e:	2302      	movs	r3, #2
24001770:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24001772:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001776:	4620      	mov	r0, r4
24001778:	aa03      	add	r2, sp, #12
2400177a:	9500      	str	r5, [sp, #0]
2400177c:	f005 fedc 	bl	24007538 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24001780:	200a      	movs	r0, #10
24001782:	f003 fd89 	bl	24005298 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24001786:	f241 7202 	movw	r2, #5890	; 0x1702
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400178a:	2302      	movs	r3, #2
2400178c:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
2400178e:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001792:	4620      	mov	r0, r4
24001794:	aa03      	add	r2, sp, #12
24001796:	9500      	str	r5, [sp, #0]
24001798:	f005 fece 	bl	24007538 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
2400179c:	200a      	movs	r0, #10
2400179e:	f003 fd7b 	bl	24005298 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
240017a2:	2204      	movs	r2, #4
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240017a4:	2302      	movs	r3, #2
240017a6:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
240017a8:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240017ac:	4620      	mov	r0, r4
240017ae:	aa03      	add	r2, sp, #12
240017b0:	9500      	str	r5, [sp, #0]
240017b2:	f005 fec1 	bl	24007538 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
240017b6:	200a      	movs	r0, #10
240017b8:	f003 fd6e 	bl	24005298 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
240017bc:	2206      	movs	r2, #6
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240017be:	2302      	movs	r3, #2
240017c0:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
240017c2:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240017c6:	4620      	mov	r0, r4
240017c8:	aa03      	add	r2, sp, #12
240017ca:	9500      	str	r5, [sp, #0]
240017cc:	f005 feb4 	bl	24007538 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
240017d0:	200a      	movs	r0, #10
240017d2:	f003 fd61 	bl	24005298 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
240017d6:	f241 2208 	movw	r2, #4616	; 0x1208
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240017da:	2302      	movs	r3, #2
240017dc:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
240017de:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240017e2:	4620      	mov	r0, r4
240017e4:	aa03      	add	r2, sp, #12
240017e6:	9500      	str	r5, [sp, #0]
240017e8:	f005 fea6 	bl	24007538 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
240017ec:	4630      	mov	r0, r6
240017ee:	f003 fd53 	bl	24005298 <HAL_Delay>
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240017f2:	aa03      	add	r2, sp, #12
240017f4:	2302      	movs	r3, #2
240017f6:	2134      	movs	r1, #52	; 0x34
240017f8:	4620      	mov	r0, r4
240017fa:	9500      	str	r5, [sp, #0]
    uint8_t buff[2] = {byte_1, byte_2};
240017fc:	f8ad 600c 	strh.w	r6, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001800:	f005 fe9a 	bl	24007538 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24001804:	4630      	mov	r0, r6
24001806:	f003 fd47 	bl	24005298 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
2400180a:	f246 230c 	movw	r3, #25100	; 0x620c
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400180e:	aa03      	add	r2, sp, #12
24001810:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24001812:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001816:	4620      	mov	r0, r4
24001818:	2302      	movs	r3, #2
2400181a:	9500      	str	r5, [sp, #0]
2400181c:	f005 fe8c 	bl	24007538 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24001820:	4630      	mov	r0, r6
24001822:	f003 fd39 	bl	24005298 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24001826:	f640 130e 	movw	r3, #2318	; 0x90e
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400182a:	aa03      	add	r2, sp, #12
2400182c:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
2400182e:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001832:	4620      	mov	r0, r4
24001834:	2302      	movs	r3, #2
24001836:	9500      	str	r5, [sp, #0]
24001838:	f005 fe7e 	bl	24007538 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
2400183c:	4630      	mov	r0, r6
2400183e:	f003 fd2b 	bl	24005298 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24001842:	2310      	movs	r3, #16
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001844:	aa03      	add	r2, sp, #12
24001846:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24001848:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400184c:	4620      	mov	r0, r4
2400184e:	2302      	movs	r3, #2
24001850:	9500      	str	r5, [sp, #0]
24001852:	f005 fe71 	bl	24007538 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24001856:	4630      	mov	r0, r6
24001858:	f003 fd1e 	bl	24005298 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
2400185c:	2312      	movs	r3, #18
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400185e:	aa03      	add	r2, sp, #12
24001860:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24001862:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001866:	4620      	mov	r0, r4
24001868:	2302      	movs	r3, #2
2400186a:	9500      	str	r5, [sp, #0]
2400186c:	f005 fe64 	bl	24007538 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24001870:	4630      	mov	r0, r6
24001872:	f003 fd11 	bl	24005298 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24001876:	f44f 7189 	mov.w	r1, #274	; 0x112
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400187a:	aa03      	add	r2, sp, #12
2400187c:	2302      	movs	r3, #2
    uint8_t buff[2] = {byte_1, byte_2};
2400187e:	f8ad 100c 	strh.w	r1, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001882:	4620      	mov	r0, r4
24001884:	2134      	movs	r1, #52	; 0x34
24001886:	9500      	str	r5, [sp, #0]
24001888:	f005 fe56 	bl	24007538 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
2400188c:	4630      	mov	r0, r6
2400188e:	f003 fd03 	bl	24005298 <HAL_Delay>
}
24001892:	b004      	add	sp, #16
24001894:	bd70      	pop	{r4, r5, r6, pc}
24001896:	bf00      	nop

24001898 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
24001898:	4b24      	ldr	r3, [pc, #144]	; (2400192c <MX_DMA_Init+0x94>)

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 2, 0);
2400189a:	2200      	movs	r2, #0
2400189c:	2102      	movs	r1, #2
2400189e:	200b      	movs	r0, #11
{
240018a0:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
240018a2:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
240018a6:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
240018a8:	f044 0401 	orr.w	r4, r4, #1
240018ac:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
240018b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
240018b4:	f003 0301 	and.w	r3, r3, #1
240018b8:	9301      	str	r3, [sp, #4]
240018ba:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 2, 0);
240018bc:	f003 fd16 	bl	240052ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
240018c0:	200b      	movs	r0, #11
240018c2:	f003 fd51 	bl	24005368 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
240018c6:	2200      	movs	r2, #0
240018c8:	2105      	movs	r1, #5
240018ca:	200c      	movs	r0, #12
240018cc:	f003 fd0e 	bl	240052ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
240018d0:	200c      	movs	r0, #12
240018d2:	f003 fd49 	bl	24005368 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 6, 0);
240018d6:	2200      	movs	r2, #0
240018d8:	2106      	movs	r1, #6
240018da:	200d      	movs	r0, #13
240018dc:	f003 fd06 	bl	240052ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
240018e0:	200d      	movs	r0, #13
240018e2:	f003 fd41 	bl	24005368 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 4, 0);
240018e6:	2200      	movs	r2, #0
240018e8:	2104      	movs	r1, #4
240018ea:	200e      	movs	r0, #14
240018ec:	f003 fcfe 	bl	240052ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
240018f0:	200e      	movs	r0, #14
240018f2:	f003 fd39 	bl	24005368 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 3, 0);
240018f6:	2200      	movs	r2, #0
240018f8:	2103      	movs	r1, #3
240018fa:	200f      	movs	r0, #15
240018fc:	f003 fcf6 	bl	240052ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
24001900:	200f      	movs	r0, #15
24001902:	f003 fd31 	bl	24005368 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 1, 0);
24001906:	2200      	movs	r2, #0
24001908:	2101      	movs	r1, #1
2400190a:	2011      	movs	r0, #17
2400190c:	f003 fcee 	bl	240052ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
24001910:	2011      	movs	r0, #17
24001912:	f003 fd29 	bl	24005368 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 8, 0);
24001916:	2066      	movs	r0, #102	; 0x66
24001918:	2200      	movs	r2, #0
2400191a:	2108      	movs	r1, #8
2400191c:	f003 fce6 	bl	240052ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
24001920:	2066      	movs	r0, #102	; 0x66

}
24001922:	b002      	add	sp, #8
24001924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
24001928:	f003 bd1e 	b.w	24005368 <HAL_NVIC_EnableIRQ>
2400192c:	58024400 	.word	0x58024400

24001930 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
24001930:	b530      	push	{r4, r5, lr}

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
24001932:	4818      	ldr	r0, [pc, #96]	; (24001994 <MX_FMC_Init+0x64>)
{
24001934:	b089      	sub	sp, #36	; 0x24
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
24001936:	2308      	movs	r3, #8
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
24001938:	2202      	movs	r2, #2
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
2400193a:	2100      	movs	r1, #0
  hsdram1.Instance = FMC_SDRAM_DEVICE;
2400193c:	4d16      	ldr	r5, [pc, #88]	; (24001998 <MX_FMC_Init+0x68>)
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
2400193e:	60c3      	str	r3, [r0, #12]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
24001940:	f44f 6400 	mov.w	r4, #2048	; 0x800
  SdramTiming.LoadToActiveDelay = 2;
24001944:	9200      	str	r2, [sp, #0]
  SdramTiming.ExitSelfRefreshDelay = 8;
  SdramTiming.SelfRefreshTime = 5;
  SdramTiming.RowCycleDelay = 6;
  SdramTiming.WriteRecoveryTime = 3;
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;
24001946:	9206      	str	r2, [sp, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
24001948:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  SdramTiming.ExitSelfRefreshDelay = 8;
2400194c:	9301      	str	r3, [sp, #4]
  SdramTiming.SelfRefreshTime = 5;
2400194e:	2305      	movs	r3, #5
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
24001950:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
24001952:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  SdramTiming.SelfRefreshTime = 5;
24001956:	9302      	str	r3, [sp, #8]
  SdramTiming.RowCycleDelay = 6;
24001958:	2306      	movs	r3, #6
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
2400195a:	6282      	str	r2, [r0, #40]	; 0x28
  SdramTiming.WriteRecoveryTime = 3;
2400195c:	2203      	movs	r2, #3
  SdramTiming.RowCycleDelay = 6;
2400195e:	9303      	str	r3, [sp, #12]
  SdramTiming.WriteRecoveryTime = 3;
24001960:	2302      	movs	r3, #2
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
24001962:	6041      	str	r1, [r0, #4]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
24001964:	61c1      	str	r1, [r0, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
24001966:	4669      	mov	r1, sp
  hsdram1.Instance = FMC_SDRAM_DEVICE;
24001968:	6005      	str	r5, [r0, #0]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
2400196a:	6204      	str	r4, [r0, #32]
  SdramTiming.WriteRecoveryTime = 3;
2400196c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
24001970:	2201      	movs	r2, #1
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
24001972:	2320      	movs	r3, #32
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
24001974:	6082      	str	r2, [r0, #8]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
24001976:	2240      	movs	r2, #64	; 0x40
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
24001978:	6103      	str	r3, [r0, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
2400197a:	f44f 7380 	mov.w	r3, #256	; 0x100
2400197e:	e9c0 2305 	strd	r2, r3, [r0, #20]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
24001982:	f009 ffd5 	bl	2400b930 <HAL_SDRAM_Init>
24001986:	b908      	cbnz	r0, 2400198c <MX_FMC_Init+0x5c>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
24001988:	b009      	add	sp, #36	; 0x24
2400198a:	bd30      	pop	{r4, r5, pc}
    Error_Handler( );
2400198c:	f002 fa32 	bl	24003df4 <Error_Handler>
}
24001990:	b009      	add	sp, #36	; 0x24
24001992:	bd30      	pop	{r4, r5, pc}
24001994:	20013f8c 	.word	0x20013f8c
24001998:	52004140 	.word	0x52004140

2400199c <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
2400199c:	4b2e      	ldr	r3, [pc, #184]	; (24001a58 <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
2400199e:	2200      	movs	r2, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
240019a0:	b5f0      	push	{r4, r5, r6, r7, lr}
240019a2:	b089      	sub	sp, #36	; 0x24
  if (FMC_Initialized) {
240019a4:	681c      	ldr	r4, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
240019a6:	9204      	str	r2, [sp, #16]
  if (FMC_Initialized) {
240019a8:	2c00      	cmp	r4, #0
240019aa:	d153      	bne.n	24001a54 <HAL_SDRAM_MspInit+0xb8>
  __HAL_RCC_FMC_CLK_ENABLE();
240019ac:	4a2b      	ldr	r2, [pc, #172]	; (24001a5c <HAL_SDRAM_MspInit+0xc0>)
  FMC_Initialized = 1;
240019ae:	2101      	movs	r1, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
240019b0:	2603      	movs	r6, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
240019b2:	250c      	movs	r5, #12
  FMC_Initialized = 1;
240019b4:	6019      	str	r1, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240019b6:	2702      	movs	r7, #2
  __HAL_RCC_FMC_CLK_ENABLE();
240019b8:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
240019bc:	4828      	ldr	r0, [pc, #160]	; (24001a60 <HAL_SDRAM_MspInit+0xc4>)
  __HAL_RCC_FMC_CLK_ENABLE();
240019be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
240019c2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
240019c6:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
240019ca:	f64f 7283 	movw	r2, #65411	; 0xff83
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
240019ce:	9605      	str	r6, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
240019d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
240019d4:	9506      	str	r5, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
240019d6:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
240019d8:	2302      	movs	r3, #2
  __HAL_RCC_FMC_CLK_ENABLE();
240019da:	9901      	ldr	r1, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
240019dc:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
240019de:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
240019e2:	f005 fb2b 	bl	2400703c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
240019e6:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
240019ea:	a902      	add	r1, sp, #8
240019ec:	481d      	ldr	r0, [pc, #116]	; (24001a64 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
240019ee:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
240019f0:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240019f2:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
240019f4:	e9cd 4604 	strd	r4, r6, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
240019f8:	f005 fb20 	bl	2400703c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
240019fc:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24001a00:	a902      	add	r1, sp, #8
24001a02:	4819      	ldr	r0, [pc, #100]	; (24001a68 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
24001a04:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001a06:	e9cd 7403 	strd	r7, r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24001a0a:	e9cd 6505 	strd	r6, r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24001a0e:	f005 fb15 	bl	2400703c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
24001a12:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
24001a16:	a902      	add	r1, sp, #8
24001a18:	4814      	ldr	r0, [pc, #80]	; (24001a6c <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
24001a1a:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001a1c:	e9cd 7403 	strd	r7, r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24001a20:	e9cd 6505 	strd	r6, r5, [sp, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
24001a24:	f005 fb0a 	bl	2400703c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
24001a28:	f64f 732c 	movw	r3, #65324	; 0xff2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24001a2c:	a902      	add	r1, sp, #8
24001a2e:	4810      	ldr	r0, [pc, #64]	; (24001a70 <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
24001a30:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001a32:	e9cd 7403 	strd	r7, r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24001a36:	e9cd 6505 	strd	r6, r5, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24001a3a:	f005 faff 	bl	2400703c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
24001a3e:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24001a42:	a902      	add	r1, sp, #8
24001a44:	480b      	ldr	r0, [pc, #44]	; (24001a74 <HAL_SDRAM_MspInit+0xd8>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24001a46:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24001a48:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
24001a4a:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24001a4c:	e9cd 4604 	strd	r4, r6, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24001a50:	f005 faf4 	bl	2400703c <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
24001a54:	b009      	add	sp, #36	; 0x24
24001a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
24001a58:	20013f88 	.word	0x20013f88
24001a5c:	58024400 	.word	0x58024400
24001a60:	58021000 	.word	0x58021000
24001a64:	58021800 	.word	0x58021800
24001a68:	58020c00 	.word	0x58020c00
24001a6c:	58022000 	.word	0x58022000
24001a70:	58021c00 	.word	0x58021c00
24001a74:	58021400 	.word	0x58021400

24001a78 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
24001a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
24001a7c:	4bad      	ldr	r3, [pc, #692]	; (24001d34 <MX_GPIO_Init+0x2bc>)
{
24001a7e:	b090      	sub	sp, #64	; 0x40
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001a80:	2400      	movs	r4, #0
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
24001a82:	4ead      	ldr	r6, [pc, #692]	; (24001d38 <MX_GPIO_Init+0x2c0>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
24001a84:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 24001d4c <MX_GPIO_Init+0x2d4>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
24001a88:	2182      	movs	r1, #130	; 0x82
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001a8a:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
24001a8c:	4630      	mov	r0, r6

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
24001a8e:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 24001d50 <MX_GPIO_Init+0x2d8>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB7 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
24001a92:	2501      	movs	r5, #1
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_3, GPIO_PIN_RESET);
24001a94:	4fa9      	ldr	r7, [pc, #676]	; (24001d3c <MX_GPIO_Init+0x2c4>)
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
24001a96:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 24001d54 <MX_GPIO_Init+0x2dc>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001a9a:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
24001a9e:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
24001aa2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001aa6:	f042 0210 	orr.w	r2, r2, #16
24001aaa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24001aae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001ab2:	f002 0210 	and.w	r2, r2, #16
24001ab6:	9201      	str	r2, [sp, #4]
24001ab8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
24001aba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001abe:	f042 0202 	orr.w	r2, r2, #2
24001ac2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24001ac6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001aca:	f002 0202 	and.w	r2, r2, #2
24001ace:	9202      	str	r2, [sp, #8]
24001ad0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
24001ad2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001ad6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
24001ada:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24001ade:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001ae2:	f002 0240 	and.w	r2, r2, #64	; 0x40
24001ae6:	9203      	str	r2, [sp, #12]
24001ae8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
24001aea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001aee:	f042 0208 	orr.w	r2, r2, #8
24001af2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24001af6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001afa:	f002 0208 	and.w	r2, r2, #8
24001afe:	9204      	str	r2, [sp, #16]
24001b00:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
24001b02:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001b06:	f042 0204 	orr.w	r2, r2, #4
24001b0a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24001b0e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001b12:	f002 0204 	and.w	r2, r2, #4
24001b16:	9205      	str	r2, [sp, #20]
24001b18:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
24001b1a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001b1e:	f042 0201 	orr.w	r2, r2, #1
24001b22:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24001b26:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001b2a:	f002 0201 	and.w	r2, r2, #1
24001b2e:	9206      	str	r2, [sp, #24]
24001b30:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
24001b32:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001b36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
24001b3a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24001b3e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001b42:	f402 7280 	and.w	r2, r2, #256	; 0x100
24001b46:	9207      	str	r2, [sp, #28]
24001b48:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
24001b4a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001b4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
24001b52:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24001b56:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001b5a:	f002 0280 	and.w	r2, r2, #128	; 0x80
24001b5e:	9208      	str	r2, [sp, #32]
24001b60:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
24001b62:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001b66:	f042 0220 	orr.w	r2, r2, #32
24001b6a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
24001b6e:	4622      	mov	r2, r4
  __HAL_RCC_GPIOF_CLK_ENABLE();
24001b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24001b74:	f003 0320 	and.w	r3, r3, #32
24001b78:	9309      	str	r3, [sp, #36]	; 0x24
24001b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
24001b7c:	f005 fbae 	bl	240072dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
24001b80:	4622      	mov	r2, r4
24001b82:	4640      	mov	r0, r8
24001b84:	f44f 7100 	mov.w	r1, #512	; 0x200
24001b88:	f005 fba8 	bl	240072dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
24001b8c:	4622      	mov	r2, r4
24001b8e:	4650      	mov	r0, sl
24001b90:	2193      	movs	r1, #147	; 0x93
24001b92:	f005 fba3 	bl	240072dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_3, GPIO_PIN_RESET);
24001b96:	4622      	mov	r2, r4
24001b98:	4638      	mov	r0, r7
24001b9a:	2109      	movs	r1, #9
24001b9c:	f005 fb9e 	bl	240072dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
24001ba0:	4622      	mov	r2, r4
24001ba2:	4648      	mov	r0, r9
24001ba4:	f44f 6100 	mov.w	r1, #2048	; 0x800
24001ba8:	f005 fb98 	bl	240072dc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_7
24001bac:	f247 02c0 	movw	r2, #28864	; 0x70c0
24001bb0:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24001bb2:	a90a      	add	r1, sp, #40	; 0x28
24001bb4:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001bb6:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_7
24001bb8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24001bbc:	f005 fa3e 	bl	2400703c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
24001bc0:	f243 02f8 	movw	r2, #12536	; 0x30f8
24001bc4:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24001bc6:	a90a      	add	r1, sp, #40	; 0x28
24001bc8:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001bca:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
24001bcc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24001bd0:	f005 fa34 	bl	2400703c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
24001bd4:	f44f 421f 	mov.w	r2, #40704	; 0x9f00
24001bd8:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001bda:	a90a      	add	r1, sp, #40	; 0x28
24001bdc:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001bde:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
24001be0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001be4:	f005 fa2a 	bl	2400703c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1;
24001be8:	2382      	movs	r3, #130	; 0x82
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001bea:	a90a      	add	r1, sp, #40	; 0x28
24001bec:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1;
24001bee:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24001bf0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001bf2:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001bf6:	f005 fa21 	bl	2400703c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
24001bfa:	2240      	movs	r2, #64	; 0x40
24001bfc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001c00:	a90a      	add	r1, sp, #40	; 0x28
24001c02:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24001c04:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_6;
24001c06:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001c0a:	f005 fa17 	bl	2400703c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
24001c0e:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24001c12:	a90a      	add	r1, sp, #40	; 0x28
24001c14:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_9;
24001c16:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24001c18:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001c1a:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24001c1e:	f005 fa0d 	bl	2400703c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC6
                           PC2 PC3 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
24001c22:	f24e 026c 	movw	r2, #57452	; 0xe06c
24001c26:	2303      	movs	r3, #3
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24001c28:	a90a      	add	r1, sp, #40	; 0x28
24001c2a:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001c2c:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
24001c2e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24001c32:	f005 fa03 	bl	2400703c <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
24001c36:	f44f 6210 	mov.w	r2, #2304	; 0x900
24001c3a:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
24001c3c:	a90a      	add	r1, sp, #40	; 0x28
24001c3e:	4840      	ldr	r0, [pc, #256]	; (24001d40 <MX_GPIO_Init+0x2c8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001c40:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
24001c42:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
24001c46:	f005 f9f9 	bl	2400703c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC0 PC1 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
24001c4a:	2393      	movs	r3, #147	; 0x93
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24001c4c:	4650      	mov	r0, sl
24001c4e:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
24001c50:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24001c52:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001c54:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24001c58:	f005 f9f0 	bl	2400703c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF6 PF10 PF9
                           PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
24001c5c:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
24001c60:	2303      	movs	r3, #3
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24001c62:	a90a      	add	r1, sp, #40	; 0x28
24001c64:	4837      	ldr	r0, [pc, #220]	; (24001d44 <MX_GPIO_Init+0x2cc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001c66:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
24001c68:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24001c6c:	f005 f9e6 	bl	2400703c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
24001c70:	2208      	movs	r2, #8
24001c72:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24001c76:	4640      	mov	r0, r8
24001c78:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001c7a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_3;
24001c7c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24001c80:	f005 f9dc 	bl	2400703c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB0 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_10;
24001c84:	f242 4205 	movw	r2, #9221	; 0x2405
24001c88:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001c8a:	a90a      	add	r1, sp, #40	; 0x28
24001c8c:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001c8e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_10;
24001c90:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001c94:	f005 f9d2 	bl	2400703c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH6 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
24001c98:	22c0      	movs	r2, #192	; 0xc0
24001c9a:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24001c9c:	a90a      	add	r1, sp, #40	; 0x28
24001c9e:	482a      	ldr	r0, [pc, #168]	; (24001d48 <MX_GPIO_Init+0x2d0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001ca0:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
24001ca2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24001ca6:	f005 f9c9 	bl	2400703c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
24001caa:	2202      	movs	r2, #2
24001cac:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001cae:	a90a      	add	r1, sp, #40	; 0x28
24001cb0:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001cb2:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_1;
24001cb4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001cb8:	f005 f9c0 	bl	2400703c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
24001cbc:	2309      	movs	r3, #9
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001cbe:	a90a      	add	r1, sp, #40	; 0x28
24001cc0:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
24001cc2:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24001cc4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001cc6:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001cca:	f005 f9b7 	bl	2400703c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
24001cce:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24001cd2:	4648      	mov	r0, r9
24001cd4:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_11;
24001cd6:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24001cd8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001cda:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24001cde:	f005 f9ad 	bl	2400703c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
24001ce2:	2204      	movs	r2, #4
24001ce4:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001ce6:	4638      	mov	r0, r7
24001ce8:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24001cea:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_2;
24001cec:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001cf0:	f005 f9a4 	bl	2400703c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
24001cf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24001cf8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001cfc:	a90a      	add	r1, sp, #40	; 0x28
24001cfe:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001d00:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_12;
24001d02:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001d06:	f005 f999 	bl	2400703c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
24001d0a:	2300      	movs	r3, #0
24001d0c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001d10:	4630      	mov	r0, r6
24001d12:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24001d14:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
24001d16:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001d1a:	f005 f98f 	bl	2400703c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
24001d1e:	4622      	mov	r2, r4
24001d20:	4621      	mov	r1, r4
24001d22:	2017      	movs	r0, #23
24001d24:	f003 fae2 	bl	240052ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
24001d28:	2017      	movs	r0, #23
24001d2a:	f003 fb1d 	bl	24005368 <HAL_NVIC_EnableIRQ>

}
24001d2e:	b010      	add	sp, #64	; 0x40
24001d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
24001d34:	58024400 	.word	0x58024400
24001d38:	58020400 	.word	0x58020400
24001d3c:	58020000 	.word	0x58020000
24001d40:	58022000 	.word	0x58022000
24001d44:	58021400 	.word	0x58021400
24001d48:	58021c00 	.word	0x58021c00
24001d4c:	58021800 	.word	0x58021800
24001d50:	58020800 	.word	0x58020800
24001d54:	58020c00 	.word	0x58020c00

24001d58 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
24001d58:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
24001d5a:	481c      	ldr	r0, [pc, #112]	; (24001dcc <MX_I2C1_Init+0x74>)
  hi2c1.Init.Timing = 0x0050174F;
  hi2c1.Init.OwnAddress1 = 68;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
24001d5c:	2300      	movs	r3, #0
  hi2c1.Init.Timing = 0x0050174F;
24001d5e:	4a1c      	ldr	r2, [pc, #112]	; (24001dd0 <MX_I2C1_Init+0x78>)
  hi2c1.Init.OwnAddress1 = 68;
24001d60:	2144      	movs	r1, #68	; 0x44
  hi2c1.Instance = I2C1;
24001d62:	4c1c      	ldr	r4, [pc, #112]	; (24001dd4 <MX_I2C1_Init+0x7c>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
24001d64:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress1 = 68;
24001d66:	6081      	str	r1, [r0, #8]
  hi2c1.Init.OwnAddress2 = 0;
24001d68:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
24001d6a:	6203      	str	r3, [r0, #32]
  hi2c1.Init.Timing = 0x0050174F;
24001d6c:	e9c0 4200 	strd	r4, r2, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
24001d70:	2201      	movs	r2, #1
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
24001d72:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
24001d76:	60c2      	str	r2, [r0, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
24001d78:	f005 fb80 	bl	2400747c <HAL_I2C_Init>
24001d7c:	b970      	cbnz	r0, 24001d9c <MX_I2C1_Init+0x44>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
24001d7e:	2100      	movs	r1, #0
24001d80:	4812      	ldr	r0, [pc, #72]	; (24001dcc <MX_I2C1_Init+0x74>)
24001d82:	f006 f921 	bl	24007fc8 <HAL_I2CEx_ConfigAnalogFilter>
24001d86:	b988      	cbnz	r0, 24001dac <MX_I2C1_Init+0x54>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
24001d88:	2100      	movs	r1, #0
24001d8a:	4810      	ldr	r0, [pc, #64]	; (24001dcc <MX_I2C1_Init+0x74>)
24001d8c:	f006 f950 	bl	24008030 <HAL_I2CEx_ConfigDigitalFilter>
24001d90:	b9a0      	cbnz	r0, 24001dbc <MX_I2C1_Init+0x64>
    Error_Handler();
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
24001d92:	2001      	movs	r0, #1
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
24001d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
24001d98:	f006 b976 	b.w	24008088 <HAL_I2CEx_EnableFastModePlus>
    Error_Handler();
24001d9c:	f002 f82a 	bl	24003df4 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
24001da0:	2100      	movs	r1, #0
24001da2:	480a      	ldr	r0, [pc, #40]	; (24001dcc <MX_I2C1_Init+0x74>)
24001da4:	f006 f910 	bl	24007fc8 <HAL_I2CEx_ConfigAnalogFilter>
24001da8:	2800      	cmp	r0, #0
24001daa:	d0ed      	beq.n	24001d88 <MX_I2C1_Init+0x30>
    Error_Handler();
24001dac:	f002 f822 	bl	24003df4 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
24001db0:	2100      	movs	r1, #0
24001db2:	4806      	ldr	r0, [pc, #24]	; (24001dcc <MX_I2C1_Init+0x74>)
24001db4:	f006 f93c 	bl	24008030 <HAL_I2CEx_ConfigDigitalFilter>
24001db8:	2800      	cmp	r0, #0
24001dba:	d0ea      	beq.n	24001d92 <MX_I2C1_Init+0x3a>
    Error_Handler();
24001dbc:	f002 f81a 	bl	24003df4 <Error_Handler>
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
24001dc0:	2001      	movs	r0, #1
}
24001dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
24001dc6:	f006 b95f 	b.w	24008088 <HAL_I2CEx_EnableFastModePlus>
24001dca:	bf00      	nop
24001dcc:	200140b0 	.word	0x200140b0
24001dd0:	0050174f 	.word	0x0050174f
24001dd4:	40005400 	.word	0x40005400

24001dd8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
24001dd8:	b510      	push	{r4, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
24001dda:	4817      	ldr	r0, [pc, #92]	; (24001e38 <MX_I2C2_Init+0x60>)
  hi2c2.Init.Timing = 0x00B03FDB;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
24001ddc:	2300      	movs	r3, #0
24001dde:	4917      	ldr	r1, [pc, #92]	; (24001e3c <MX_I2C2_Init+0x64>)
24001de0:	2401      	movs	r4, #1
24001de2:	4a17      	ldr	r2, [pc, #92]	; (24001e40 <MX_I2C2_Init+0x68>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
24001de4:	6203      	str	r3, [r0, #32]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
24001de6:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
  hi2c2.Init.OwnAddress2 = 0;
24001dea:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
24001dee:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
24001df2:	f005 fb43 	bl	2400747c <HAL_I2C_Init>
24001df6:	b950      	cbnz	r0, 24001e0e <MX_I2C2_Init+0x36>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
24001df8:	2100      	movs	r1, #0
24001dfa:	480f      	ldr	r0, [pc, #60]	; (24001e38 <MX_I2C2_Init+0x60>)
24001dfc:	f006 f8e4 	bl	24007fc8 <HAL_I2CEx_ConfigAnalogFilter>
24001e00:	b968      	cbnz	r0, 24001e1e <MX_I2C2_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
24001e02:	2100      	movs	r1, #0
24001e04:	480c      	ldr	r0, [pc, #48]	; (24001e38 <MX_I2C2_Init+0x60>)
24001e06:	f006 f913 	bl	24008030 <HAL_I2CEx_ConfigDigitalFilter>
24001e0a:	b980      	cbnz	r0, 24001e2e <MX_I2C2_Init+0x56>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
24001e0c:	bd10      	pop	{r4, pc}
    Error_Handler();
24001e0e:	f001 fff1 	bl	24003df4 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
24001e12:	2100      	movs	r1, #0
24001e14:	4808      	ldr	r0, [pc, #32]	; (24001e38 <MX_I2C2_Init+0x60>)
24001e16:	f006 f8d7 	bl	24007fc8 <HAL_I2CEx_ConfigAnalogFilter>
24001e1a:	2800      	cmp	r0, #0
24001e1c:	d0f1      	beq.n	24001e02 <MX_I2C2_Init+0x2a>
    Error_Handler();
24001e1e:	f001 ffe9 	bl	24003df4 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
24001e22:	2100      	movs	r1, #0
24001e24:	4804      	ldr	r0, [pc, #16]	; (24001e38 <MX_I2C2_Init+0x60>)
24001e26:	f006 f903 	bl	24008030 <HAL_I2CEx_ConfigDigitalFilter>
24001e2a:	2800      	cmp	r0, #0
24001e2c:	d0ee      	beq.n	24001e0c <MX_I2C2_Init+0x34>
}
24001e2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
24001e32:	f001 bfdf 	b.w	24003df4 <Error_Handler>
24001e36:	bf00      	nop
24001e38:	20014104 	.word	0x20014104
24001e3c:	40005800 	.word	0x40005800
24001e40:	00b03fdb 	.word	0x00b03fdb

24001e44 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
24001e44:	b5f0      	push	{r4, r5, r6, r7, lr}
24001e46:	b0bd      	sub	sp, #244	; 0xf4

  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001e48:	2100      	movs	r1, #0
{
24001e4a:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24001e4c:	22c0      	movs	r2, #192	; 0xc0
24001e4e:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001e50:	910a      	str	r1, [sp, #40]	; 0x28
24001e52:	e9cd 1106 	strd	r1, r1, [sp, #24]
24001e56:	e9cd 1108 	strd	r1, r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24001e5a:	f017 fc63 	bl	24019724 <memset>
  if(i2cHandle->Instance==I2C1)
24001e5e:	6823      	ldr	r3, [r4, #0]
24001e60:	4a79      	ldr	r2, [pc, #484]	; (24002048 <HAL_I2C_MspInit+0x204>)
24001e62:	4293      	cmp	r3, r2
24001e64:	d005      	beq.n	24001e72 <HAL_I2C_MspInit+0x2e>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
24001e66:	4a79      	ldr	r2, [pc, #484]	; (2400204c <HAL_I2C_MspInit+0x208>)
24001e68:	4293      	cmp	r3, r2
24001e6a:	f000 8087 	beq.w	24001f7c <HAL_I2C_MspInit+0x138>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
24001e6e:	b03d      	add	sp, #244	; 0xf4
24001e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
24001e72:	2208      	movs	r2, #8
24001e74:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24001e76:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
24001e78:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24001e7c:	f007 f80a 	bl	24008e94 <HAL_RCCEx_PeriphCLKConfig>
24001e80:	2800      	cmp	r0, #0
24001e82:	f040 80db 	bne.w	2400203c <HAL_I2C_MspInit+0x1f8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
24001e86:	4d72      	ldr	r5, [pc, #456]	; (24002050 <HAL_I2C_MspInit+0x20c>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
24001e88:	f44f 7240 	mov.w	r2, #768	; 0x300
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
24001e8c:	2704      	movs	r7, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001e8e:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOB_CLK_ENABLE();
24001e90:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    hdma_i2c1_rx.Instance = DMA1_Stream3;
24001e94:	4e6f      	ldr	r6, [pc, #444]	; (24002054 <HAL_I2C_MspInit+0x210>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
24001e96:	f043 0302 	orr.w	r3, r3, #2
24001e9a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
24001e9e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
24001ea2:	970a      	str	r7, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
24001ea4:	f003 0302 	and.w	r3, r3, #2
24001ea8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
24001eaa:	2312      	movs	r3, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
24001eac:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001eae:	486a      	ldr	r0, [pc, #424]	; (24002058 <HAL_I2C_MspInit+0x214>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
24001eb0:	e9cd 2306 	strd	r2, r3, [sp, #24]
24001eb4:	2200      	movs	r2, #0
24001eb6:	2302      	movs	r3, #2
24001eb8:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001ebc:	f005 f8be 	bl	2400703c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
24001ec0:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24001ec4:	2201      	movs	r2, #1
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
24001ec6:	6277      	str	r7, [r6, #36]	; 0x24
    __HAL_RCC_I2C1_CLK_ENABLE();
24001ec8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
24001ecc:	4630      	mov	r0, r6
    __HAL_RCC_I2C1_CLK_ENABLE();
24001ece:	f8c5 30e8 	str.w	r3, [r5, #232]	; 0xe8
24001ed2:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24001ed6:	62b2      	str	r2, [r6, #40]	; 0x28
    hdma_i2c1_rx.Instance = DMA1_Stream3;
24001ed8:	4a60      	ldr	r2, [pc, #384]	; (2400205c <HAL_I2C_MspInit+0x218>)
    __HAL_RCC_I2C1_CLK_ENABLE();
24001eda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    hdma_i2c1_rx.Instance = DMA1_Stream3;
24001ede:	6032      	str	r2, [r6, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
24001ee0:	2221      	movs	r2, #33	; 0x21
    __HAL_RCC_I2C1_CLK_ENABLE();
24001ee2:	9302      	str	r3, [sp, #8]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
24001ee4:	2300      	movs	r3, #0
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
24001ee6:	6072      	str	r2, [r6, #4]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
24001ee8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_I2C1_CLK_ENABLE();
24001eec:	9902      	ldr	r1, [sp, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
24001eee:	6132      	str	r2, [r6, #16]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24001ef0:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
24001ef4:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
24001ef8:	e9c6 3305 	strd	r3, r3, [r6, #20]
    hdma_i2c1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
24001efc:	e9c6 330b 	strd	r3, r3, [r6, #44]	; 0x2c
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24001f00:	f44f 3340 	mov.w	r3, #196608	; 0x30000
24001f04:	e9c6 2307 	strd	r2, r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
24001f08:	f003 fb82 	bl	24005610 <HAL_DMA_Init>
24001f0c:	2800      	cmp	r0, #0
24001f0e:	f040 8092 	bne.w	24002036 <HAL_I2C_MspInit+0x1f2>
    hdma_i2c1_tx.Instance = DMA1_Stream4;
24001f12:	4d53      	ldr	r5, [pc, #332]	; (24002060 <HAL_I2C_MspInit+0x21c>)
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
24001f14:	2222      	movs	r2, #34	; 0x22
    hdma_i2c1_tx.Instance = DMA1_Stream4;
24001f16:	4953      	ldr	r1, [pc, #332]	; (24002064 <HAL_I2C_MspInit+0x220>)
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
24001f18:	2300      	movs	r3, #0
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
24001f1a:	606a      	str	r2, [r5, #4]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
24001f1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_tx.Instance = DMA1_Stream4;
24001f20:	6029      	str	r1, [r5, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
24001f22:	2140      	movs	r1, #64	; 0x40
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
24001f24:	612a      	str	r2, [r5, #16]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24001f26:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
24001f2a:	60eb      	str	r3, [r5, #12]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
24001f2c:	4628      	mov	r0, r5
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
24001f2e:	616b      	str	r3, [r5, #20]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
24001f30:	60a9      	str	r1, [r5, #8]
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
24001f32:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
24001f36:	61ab      	str	r3, [r5, #24]
    hdma_i2c1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
24001f38:	62eb      	str	r3, [r5, #44]	; 0x2c
    hdma_i2c1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
24001f3a:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24001f3c:	2301      	movs	r3, #1
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24001f3e:	622a      	str	r2, [r5, #32]
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24001f40:	2204      	movs	r2, #4
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
24001f42:	63e6      	str	r6, [r4, #60]	; 0x3c
24001f44:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
24001f46:	61e9      	str	r1, [r5, #28]
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24001f48:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
24001f4c:	f003 fb60 	bl	24005610 <HAL_DMA_Init>
24001f50:	2800      	cmp	r0, #0
24001f52:	d16d      	bne.n	24002030 <HAL_I2C_MspInit+0x1ec>
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
24001f54:	2200      	movs	r2, #0
24001f56:	2101      	movs	r1, #1
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
24001f58:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
24001f5a:	201f      	movs	r0, #31
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
24001f5c:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
24001f5e:	f003 f9c5 	bl	240052ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
24001f62:	201f      	movs	r0, #31
24001f64:	f003 fa00 	bl	24005368 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 1, 0);
24001f68:	2200      	movs	r2, #0
24001f6a:	2101      	movs	r1, #1
24001f6c:	2020      	movs	r0, #32
24001f6e:	f003 f9bd 	bl	240052ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
24001f72:	2020      	movs	r0, #32
24001f74:	f003 f9f8 	bl	24005368 <HAL_NVIC_EnableIRQ>
}
24001f78:	b03d      	add	sp, #244	; 0xf4
24001f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
24001f7c:	2208      	movs	r2, #8
24001f7e:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24001f80:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
24001f82:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24001f86:	f006 ff85 	bl	24008e94 <HAL_RCCEx_PeriphCLKConfig>
24001f8a:	2800      	cmp	r0, #0
24001f8c:	d159      	bne.n	24002042 <HAL_I2C_MspInit+0x1fe>
    __HAL_RCC_GPIOH_CLK_ENABLE();
24001f8e:	4c30      	ldr	r4, [pc, #192]	; (24002050 <HAL_I2C_MspInit+0x20c>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
24001f90:	2010      	movs	r0, #16
24001f92:	2112      	movs	r1, #18
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
24001f94:	2504      	movs	r5, #4
    __HAL_RCC_GPIOH_CLK_ENABLE();
24001f96:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
24001f9a:	2600      	movs	r6, #0
24001f9c:	2703      	movs	r7, #3
    __HAL_RCC_GPIOH_CLK_ENABLE();
24001f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
24001fa2:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
24001fa6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
24001faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
24001fae:	9303      	str	r3, [sp, #12]
24001fb0:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
24001fb2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
24001fb6:	f043 0302 	orr.w	r3, r3, #2
24001fba:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
24001fbe:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
24001fc2:	950a      	str	r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
24001fc4:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_4;
24001fc8:	e9cd 0106 	strd	r0, r1, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
24001fcc:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24001fce:	a906      	add	r1, sp, #24
24001fd0:	4825      	ldr	r0, [pc, #148]	; (24002068 <HAL_I2C_MspInit+0x224>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
24001fd2:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
24001fd4:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24001fd8:	f005 f830 	bl	2400703c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
24001fdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
24001fe0:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001fe2:	a906      	add	r1, sp, #24
24001fe4:	481c      	ldr	r0, [pc, #112]	; (24002058 <HAL_I2C_MspInit+0x214>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
24001fe6:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_11;
24001fe8:	e9cd 2306 	strd	r2, r3, [sp, #24]
24001fec:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001ff0:	f005 f824 	bl	2400703c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
24001ff4:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
24001ff8:	2200      	movs	r2, #0
24001ffa:	2101      	movs	r1, #1
    __HAL_RCC_I2C2_CLK_ENABLE();
24001ffc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
24002000:	2021      	movs	r0, #33	; 0x21
    __HAL_RCC_I2C2_CLK_ENABLE();
24002002:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
24002006:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
2400200a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2400200e:	9305      	str	r3, [sp, #20]
24002010:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
24002012:	f003 f96b 	bl	240052ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
24002016:	2021      	movs	r0, #33	; 0x21
24002018:	f003 f9a6 	bl	24005368 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 1, 0);
2400201c:	2200      	movs	r2, #0
2400201e:	2101      	movs	r1, #1
24002020:	2022      	movs	r0, #34	; 0x22
24002022:	f003 f963 	bl	240052ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
24002026:	2022      	movs	r0, #34	; 0x22
24002028:	f003 f99e 	bl	24005368 <HAL_NVIC_EnableIRQ>
}
2400202c:	b03d      	add	sp, #244	; 0xf4
2400202e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
24002030:	f001 fee0 	bl	24003df4 <Error_Handler>
24002034:	e78e      	b.n	24001f54 <HAL_I2C_MspInit+0x110>
      Error_Handler();
24002036:	f001 fedd 	bl	24003df4 <Error_Handler>
2400203a:	e76a      	b.n	24001f12 <HAL_I2C_MspInit+0xce>
      Error_Handler();
2400203c:	f001 feda 	bl	24003df4 <Error_Handler>
24002040:	e721      	b.n	24001e86 <HAL_I2C_MspInit+0x42>
      Error_Handler();
24002042:	f001 fed7 	bl	24003df4 <Error_Handler>
24002046:	e7a2      	b.n	24001f8e <HAL_I2C_MspInit+0x14a>
24002048:	40005400 	.word	0x40005400
2400204c:	40005800 	.word	0x40005800
24002050:	58024400 	.word	0x58024400
24002054:	20013fc0 	.word	0x20013fc0
24002058:	58020400 	.word	0x58020400
2400205c:	40020058 	.word	0x40020058
24002060:	20014038 	.word	0x20014038
24002064:	40020070 	.word	0x40020070
24002068:	58021c00 	.word	0x58021c00

2400206c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
2400206c:	b530      	push	{r4, r5, lr}
2400206e:	b0a1      	sub	sp, #132	; 0x84
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
24002070:	224c      	movs	r2, #76	; 0x4c
24002072:	2100      	movs	r1, #0
24002074:	a80c      	add	r0, sp, #48	; 0x30
24002076:	f017 fb55 	bl	24019724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
2400207a:	2220      	movs	r2, #32
2400207c:	2100      	movs	r1, #0
2400207e:	a804      	add	r0, sp, #16
24002080:	f017 fb50 	bl	24019724 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
24002084:	2002      	movs	r0, #2
24002086:	f006 f817 	bl	240080b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
2400208a:	4b35      	ldr	r3, [pc, #212]	; (24002160 <SystemClock_Config+0xf4>)
2400208c:	2100      	movs	r1, #0
2400208e:	4a35      	ldr	r2, [pc, #212]	; (24002164 <SystemClock_Config+0xf8>)
24002090:	9101      	str	r1, [sp, #4]
24002092:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
24002094:	f021 0101 	bic.w	r1, r1, #1
24002098:	62d9      	str	r1, [r3, #44]	; 0x2c
2400209a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400209c:	f003 0301 	and.w	r3, r3, #1
240020a0:	9301      	str	r3, [sp, #4]
240020a2:	6993      	ldr	r3, [r2, #24]
240020a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
240020a8:	6193      	str	r3, [r2, #24]
240020aa:	6993      	ldr	r3, [r2, #24]
240020ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
240020b0:	9301      	str	r3, [sp, #4]
240020b2:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
240020b4:	6993      	ldr	r3, [r2, #24]
240020b6:	0499      	lsls	r1, r3, #18
240020b8:	d5fc      	bpl.n	240020b4 <SystemClock_Config+0x48>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
240020ba:	4b2b      	ldr	r3, [pc, #172]	; (24002168 <SystemClock_Config+0xfc>)
240020bc:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
240020c0:	f041 0102 	orr.w	r1, r1, #2
240020c4:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
240020c8:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
240020ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
240020ce:	f003 0302 	and.w	r3, r3, #2
240020d2:	9302      	str	r3, [sp, #8]
240020d4:	9b02      	ldr	r3, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
240020d6:	9103      	str	r1, [sp, #12]
240020d8:	6991      	ldr	r1, [r2, #24]
240020da:	4b21      	ldr	r3, [pc, #132]	; (24002160 <SystemClock_Config+0xf4>)
240020dc:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
240020e0:	6191      	str	r1, [r2, #24]
240020e2:	6992      	ldr	r2, [r2, #24]
240020e4:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
240020e8:	9203      	str	r2, [sp, #12]
240020ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
240020ec:	4a1d      	ldr	r2, [pc, #116]	; (24002164 <SystemClock_Config+0xf8>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
240020ee:	f041 0101 	orr.w	r1, r1, #1
240020f2:	62d9      	str	r1, [r3, #44]	; 0x2c
240020f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240020f6:	f003 0301 	and.w	r3, r3, #1
240020fa:	9303      	str	r3, [sp, #12]
240020fc:	9b03      	ldr	r3, [sp, #12]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
240020fe:	6993      	ldr	r3, [r2, #24]
24002100:	049b      	lsls	r3, r3, #18
24002102:	d5fc      	bpl.n	240020fe <SystemClock_Config+0x92>
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
24002104:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
24002106:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 60;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 6;
  RCC_OscInitStruct.PLL.PLLR = 8;
24002108:	2508      	movs	r5, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
2400210a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLP = 2;
2400210e:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
24002110:	2021      	movs	r0, #33	; 0x21
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
24002112:	2400      	movs	r4, #0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
24002114:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
24002116:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 60;
24002118:	223c      	movs	r2, #60	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
2400211a:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 6;
2400211e:	2306      	movs	r3, #6
  RCC_OscInitStruct.PLL.PLLN = 60;
24002120:	9218      	str	r2, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 6;
24002122:	e9cd 351a 	strd	r3, r5, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
24002126:	230c      	movs	r3, #12
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
24002128:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
2400212c:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
2400212e:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
24002130:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
24002134:	f006 f86a 	bl	2400820c <HAL_RCC_OscConfig>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
24002138:	213f      	movs	r1, #63	; 0x3f
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
2400213a:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
2400213c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
24002140:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
24002142:	2103      	movs	r1, #3
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
24002144:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
24002146:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
24002148:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
2400214a:	2104      	movs	r1, #4
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
2400214c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
2400214e:	e9cd 5307 	strd	r5, r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
24002152:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
24002156:	f006 fbed 	bl	24008934 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
2400215a:	b021      	add	sp, #132	; 0x84
2400215c:	bd30      	pop	{r4, r5, pc}
2400215e:	bf00      	nop
24002160:	58000400 	.word	0x58000400
24002164:	58024800 	.word	0x58024800
24002168:	58024400 	.word	0x58024400
2400216c:	00000000 	.word	0x00000000

24002170 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
24002170:	b510      	push	{r4, lr}
24002172:	b0b0      	sub	sp, #192	; 0xc0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24002174:	22a0      	movs	r2, #160	; 0xa0
24002176:	2100      	movs	r1, #0
  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_SAI1;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
  PeriphClkInitStruct.PLL2.PLL2N = 37;
24002178:	2425      	movs	r4, #37	; 0x25
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
2400217a:	a808      	add	r0, sp, #32
2400217c:	f017 fad2 	bl	24019724 <memset>
  PeriphClkInitStruct.PLL2.PLL2M = 1;
24002180:	2101      	movs	r1, #1
  PeriphClkInitStruct.PLL2.PLL2P = 8;
24002182:	2208      	movs	r2, #8
  PeriphClkInitStruct.PLL2.PLL2R = 3;
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
  PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
  PeriphClkInitStruct.PLL3.PLL3N = 12;
24002184:	200c      	movs	r0, #12
  PeriphClkInitStruct.PLL2.PLL2M = 1;
24002186:	9102      	str	r1, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
24002188:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL3.PLL3M = 1;
2400218a:	910a      	str	r1, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3P = 4;
2400218c:	2104      	movs	r1, #4
  PeriphClkInitStruct.PLL2.PLL2N = 37;
2400218e:	9403      	str	r4, [sp, #12]
  PeriphClkInitStruct.PLL3.PLL3Q = 8;
  PeriphClkInitStruct.PLL3.PLL3R = 16;
24002190:	2410      	movs	r4, #16
  PeriphClkInitStruct.PLL3.PLL3N = 12;
24002192:	900b      	str	r0, [sp, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
24002194:	f44f 6040 	mov.w	r0, #3072	; 0xc00
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
24002198:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
2400219a:	9204      	str	r2, [sp, #16]
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2360;
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
2400219c:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
2400219e:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 240021d8 <PeriphCommonClock_Config+0x68>
  PeriphClkInitStruct.PLL3.PLL3Q = 8;
240021a2:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2360;
240021a6:	f640 1138 	movw	r1, #2360	; 0x938
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
240021aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
240021ae:	ed8d 7b00 	vstr	d7, [sp]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
240021b2:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 240021e0 <PeriphCommonClock_Config+0x70>
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
240021b6:	e9cd 1311 	strd	r1, r3, [sp, #68]	; 0x44
  PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
240021ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
240021be:	9214      	str	r2, [sp, #80]	; 0x50
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
240021c0:	e9cd 400e 	strd	r4, r0, [sp, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240021c4:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
240021c6:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLL2.PLL2R = 3;
240021c8:	ed8d 7b06 	vstr	d7, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240021cc:	f006 fe62 	bl	24008e94 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
240021d0:	b030      	add	sp, #192	; 0xc0
240021d2:	bd10      	pop	{r4, pc}
240021d4:	f3af 8000 	nop.w
240021d8:	01010100 	.word	0x01010100
240021dc:	00000000 	.word	0x00000000
240021e0:	00000003 	.word	0x00000003
240021e4:	000000c0 	.word	0x000000c0

240021e8 <BSP_SD_IsDetected>:
}



uint8_t BSP_SD_IsDetected(void)
{
240021e8:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
240021ea:	2301      	movs	r3, #1
240021ec:	f88d 3007 	strb.w	r3, [sp, #7]
  //if (BSP_PlatformIsDetected() == 0x0)
  //{
  //  status = SD_NOT_PRESENT;
  //}

  return status;
240021f0:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
240021f4:	b002      	add	sp, #8
240021f6:	4770      	bx	lr

240021f8 <getPresetNamesFromSDCard>:

void getPresetNamesFromSDCard(void)
{
240021f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint8_t status = SD_PRESENT;
240021fc:	2301      	movs	r3, #1
{
240021fe:	b089      	sub	sp, #36	; 0x24
  __IO uint8_t status = SD_PRESENT;
24002200:	f88d 3003 	strb.w	r3, [sp, #3]
  return status;
24002204:	f89d 3003 	ldrb.w	r3, [sp, #3]
	if(BSP_SD_IsDetected())
24002208:	b93b      	cbnz	r3, 2400221a <getPresetNamesFromSDCard+0x22>
2400220a:	f8df a078 	ldr.w	sl, [pc, #120]	; 24002284 <getPresetNamesFromSDCard+0x8c>
			}

		}

	}
	diskBusy = 0;
2400220e:	2300      	movs	r3, #0
24002210:	f88a 3000 	strb.w	r3, [sl]
	return;
}
24002214:	b009      	add	sp, #36	; 0x24
24002216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2400221a:	4b14      	ldr	r3, [pc, #80]	; (2400226c <getPresetNamesFromSDCard+0x74>)
2400221c:	075a      	lsls	r2, r3, #29
2400221e:	f040 82ed 	bne.w	240027fc <getPresetNamesFromSDCard+0x604>
			audioOutBuffer[i] = 0;
24002222:	2000      	movs	r0, #0
24002224:	2100      	movs	r1, #0
24002226:	f503 6280 	add.w	r2, r3, #1024	; 0x400
2400222a:	e8e3 0102 	strd	r0, r1, [r3], #8
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
2400222e:	429a      	cmp	r2, r3
24002230:	d1fb      	bne.n	2400222a <getPresetNamesFromSDCard+0x32>
		loadFailed = 0;
24002232:	2400      	movs	r4, #0
24002234:	4b0e      	ldr	r3, [pc, #56]	; (24002270 <getPresetNamesFromSDCard+0x78>)
		diskBusy = 1;
24002236:	2501      	movs	r5, #1
24002238:	f8df a048 	ldr.w	sl, [pc, #72]	; 24002284 <getPresetNamesFromSDCard+0x8c>
		disk_initialize(0);
2400223c:	4620      	mov	r0, r4
		loadFailed = 0;
2400223e:	701c      	strb	r4, [r3, #0]
		diskBusy = 1;
24002240:	f88a 5000 	strb.w	r5, [sl]
		disk_initialize(0);
24002244:	f00b fcb6 	bl	2400dbb4 <disk_initialize>
	    disk_status(0);
24002248:	4620      	mov	r0, r4
2400224a:	f00b fca9 	bl	2400dba0 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
2400224e:	462a      	mov	r2, r5
24002250:	4908      	ldr	r1, [pc, #32]	; (24002274 <getPresetNamesFromSDCard+0x7c>)
24002252:	4809      	ldr	r0, [pc, #36]	; (24002278 <getPresetNamesFromSDCard+0x80>)
24002254:	f00d fe82 	bl	2400ff5c <f_mount>
24002258:	2800      	cmp	r0, #0
2400225a:	d1d8      	bne.n	2400220e <getPresetNamesFromSDCard+0x16>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
2400225c:	4605      	mov	r5, r0
2400225e:	4e07      	ldr	r6, [pc, #28]	; (2400227c <getPresetNamesFromSDCard+0x84>)
				res = f_findfirst(&dir, &fno, SDPath, finalString);
24002260:	f8df 9010 	ldr.w	r9, [pc, #16]	; 24002274 <getPresetNamesFromSDCard+0x7c>
24002264:	f8df 8020 	ldr.w	r8, [pc, #32]	; 24002288 <getPresetNamesFromSDCard+0x90>
24002268:	4f05      	ldr	r7, [pc, #20]	; (24002280 <getPresetNamesFromSDCard+0x88>)
2400226a:	e027      	b.n	240022bc <getPresetNamesFromSDCard+0xc4>
2400226c:	30000000 	.word	0x30000000
24002270:	20018360 	.word	0x20018360
24002274:	2001dbe4 	.word	0x2001dbe4
24002278:	2001d784 	.word	0x2001d784
2400227c:	2401c4f8 	.word	0x2401c4f8
24002280:	20014174 	.word	0x20014174
24002284:	200141ac 	.word	0x200141ac
24002288:	20016214 	.word	0x20016214
					strcat(charBuf, "*.ebp");
2400228c:	aa02      	add	r2, sp, #8
2400228e:	6830      	ldr	r0, [r6, #0]
24002290:	88b1      	ldrh	r1, [r6, #4]
24002292:	f10d 0c08 	add.w	ip, sp, #8
24002296:	18d4      	adds	r4, r2, r3
					strcpy(finalString, charBuf);
24002298:	1d9a      	adds	r2, r3, #6
					strcat(charBuf, "*.ebp");
2400229a:	f84c 0003 	str.w	r0, [ip, r3]
					strcpy(finalString, charBuf);
2400229e:	a805      	add	r0, sp, #20
					strcat(charBuf, "*.ebp");
240022a0:	80a1      	strh	r1, [r4, #4]
					strcpy(finalString, charBuf);
240022a2:	4661      	mov	r1, ip
240022a4:	f017 fa70 	bl	24019788 <memcpy>
				res = f_findfirst(&dir, &fno, SDPath, finalString);
240022a8:	ab05      	add	r3, sp, #20
240022aa:	464a      	mov	r2, r9
240022ac:	4641      	mov	r1, r8
240022ae:	4638      	mov	r0, r7
240022b0:	f00e fb6c 	bl	2401098c <f_findfirst>
				if(res == FR_OK)
240022b4:	b358      	cbz	r0, 2400230e <getPresetNamesFromSDCard+0x116>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
240022b6:	3501      	adds	r5, #1
240022b8:	2d40      	cmp	r5, #64	; 0x40
240022ba:	d0a8      	beq.n	2400220e <getPresetNamesFromSDCard+0x16>
				itoa(i, charBuf, 10);
240022bc:	220a      	movs	r2, #10
240022be:	a902      	add	r1, sp, #8
240022c0:	4628      	mov	r0, r5
240022c2:	f017 f9eb 	bl	2401969c <itoa>
				int len = ((strlen(charBuf)));
240022c6:	a802      	add	r0, sp, #8
240022c8:	f7fe f806 	bl	240002d8 <strlen>
				if (len == 1)
240022cc:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
240022ce:	4603      	mov	r3, r0
				if (len == 1)
240022d0:	d1dc      	bne.n	2400228c <getPresetNamesFromSDCard+0x94>
					finalString[2] = charBuf[1];
240022d2:	f89d 1009 	ldrb.w	r1, [sp, #9]
					finalString[0] = '0';
240022d6:	2330      	movs	r3, #48	; 0x30
					finalString[1] = charBuf[0];
240022d8:	f89d 2008 	ldrb.w	r2, [sp, #8]
					strcat(finalString, "*.ebp");
240022dc:	a805      	add	r0, sp, #20
					finalString[2] = charBuf[1];
240022de:	f88d 1016 	strb.w	r1, [sp, #22]
					strcat(finalString, "*.ebp");
240022e2:	ac05      	add	r4, sp, #20
					finalString[1] = charBuf[0];
240022e4:	f88d 2015 	strb.w	r2, [sp, #21]
					finalString[0] = '0';
240022e8:	f88d 3014 	strb.w	r3, [sp, #20]
					strcat(finalString, "*.ebp");
240022ec:	f7fd fff4 	bl	240002d8 <strlen>
240022f0:	a905      	add	r1, sp, #20
240022f2:	4603      	mov	r3, r0
240022f4:	88b2      	ldrh	r2, [r6, #4]
240022f6:	4419      	add	r1, r3
240022f8:	6830      	ldr	r0, [r6, #0]
240022fa:	50e0      	str	r0, [r4, r3]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
240022fc:	ab05      	add	r3, sp, #20
					strcat(finalString, "*.ebp");
240022fe:	808a      	strh	r2, [r1, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
24002300:	4638      	mov	r0, r7
24002302:	464a      	mov	r2, r9
24002304:	4641      	mov	r1, r8
24002306:	f00e fb41 	bl	2401098c <f_findfirst>
				if(res == FR_OK)
2400230a:	2800      	cmp	r0, #0
2400230c:	d1d3      	bne.n	240022b6 <getPresetNamesFromSDCard+0xbe>
					if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
2400230e:	f8df b354 	ldr.w	fp, [pc, #852]	; 24002664 <getPresetNamesFromSDCard+0x46c>
24002312:	2211      	movs	r2, #17
24002314:	49d0      	ldr	r1, [pc, #832]	; (24002658 <getPresetNamesFromSDCard+0x460>)
24002316:	4658      	mov	r0, fp
24002318:	f00d fe6c 	bl	2400fff4 <f_open>
2400231c:	2800      	cmp	r0, #0
2400231e:	d1ca      	bne.n	240022b6 <getPresetNamesFromSDCard+0xbe>
						f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
24002320:	4cce      	ldr	r4, [pc, #824]	; (2400265c <getPresetNamesFromSDCard+0x464>)
24002322:	ab01      	add	r3, sp, #4
24002324:	f8db 200c 	ldr.w	r2, [fp, #12]
24002328:	4658      	mov	r0, fp
2400232a:	4621      	mov	r1, r4
2400232c:	f00d ffc4 	bl	240102b8 <f_read>
						f_close(&SDFile);
24002330:	4658      	mov	r0, fp
24002332:	f00e fa2b 	bl	2401078c <f_close>
						if (buffer[bufferIndex] == 17)
24002336:	7820      	ldrb	r0, [r4, #0]
							presetNamesArray[i][j] = buffer[bufferIndex];
24002338:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
2400233c:	49c8      	ldr	r1, [pc, #800]	; (24002660 <getPresetNamesFromSDCard+0x468>)
						if (buffer[bufferIndex] == 17)
2400233e:	f1a0 0011 	sub.w	r0, r0, #17
								macroNamesArray[i][j][k] = buffer[bufferIndex];
24002342:	f8df c324 	ldr.w	ip, [pc, #804]	; 24002668 <getPresetNamesFromSDCard+0x470>
						if (buffer[bufferIndex] == 17)
24002346:	fab0 f080 	clz	r0, r0
2400234a:	0940      	lsrs	r0, r0, #5
2400234c:	0083      	lsls	r3, r0, #2
							presetNamesArray[i][j] = buffer[bufferIndex];
2400234e:	f814 0020 	ldrb.w	r0, [r4, r0, lsl #2]
24002352:	f801 0012 	strb.w	r0, [r1, r2, lsl #1]
24002356:	1c58      	adds	r0, r3, #1
24002358:	eb01 0142 	add.w	r1, r1, r2, lsl #1
2400235c:	5c20      	ldrb	r0, [r4, r0]
								macroNamesArray[i][j][k] = buffer[bufferIndex];
2400235e:	ebc5 1205 	rsb	r2, r5, r5, lsl #4
							presetNamesArray[i][j] = buffer[bufferIndex];
24002362:	7048      	strb	r0, [r1, #1]
24002364:	1c98      	adds	r0, r3, #2
24002366:	5c20      	ldrb	r0, [r4, r0]
24002368:	7088      	strb	r0, [r1, #2]
2400236a:	1cd8      	adds	r0, r3, #3
2400236c:	5c20      	ldrb	r0, [r4, r0]
2400236e:	70c8      	strb	r0, [r1, #3]
24002370:	1d18      	adds	r0, r3, #4
24002372:	5c20      	ldrb	r0, [r4, r0]
24002374:	7108      	strb	r0, [r1, #4]
24002376:	1d58      	adds	r0, r3, #5
24002378:	5c20      	ldrb	r0, [r4, r0]
2400237a:	7148      	strb	r0, [r1, #5]
2400237c:	1d98      	adds	r0, r3, #6
2400237e:	5c20      	ldrb	r0, [r4, r0]
24002380:	7188      	strb	r0, [r1, #6]
24002382:	1dd8      	adds	r0, r3, #7
24002384:	5c20      	ldrb	r0, [r4, r0]
24002386:	71c8      	strb	r0, [r1, #7]
24002388:	f103 0008 	add.w	r0, r3, #8
2400238c:	5c20      	ldrb	r0, [r4, r0]
2400238e:	7208      	strb	r0, [r1, #8]
24002390:	f103 0009 	add.w	r0, r3, #9
24002394:	5c20      	ldrb	r0, [r4, r0]
24002396:	7248      	strb	r0, [r1, #9]
24002398:	f103 000a 	add.w	r0, r3, #10
2400239c:	5c20      	ldrb	r0, [r4, r0]
2400239e:	7288      	strb	r0, [r1, #10]
240023a0:	f103 000b 	add.w	r0, r3, #11
240023a4:	5c20      	ldrb	r0, [r4, r0]
240023a6:	72c8      	strb	r0, [r1, #11]
240023a8:	f103 000c 	add.w	r0, r3, #12
240023ac:	5c20      	ldrb	r0, [r4, r0]
240023ae:	7308      	strb	r0, [r1, #12]
240023b0:	f103 000d 	add.w	r0, r3, #13
240023b4:	5c20      	ldrb	r0, [r4, r0]
240023b6:	7348      	strb	r0, [r1, #13]
								macroNamesArray[i][j][k] = buffer[bufferIndex];
240023b8:	f103 010e 	add.w	r1, r3, #14
240023bc:	5c61      	ldrb	r1, [r4, r1]
240023be:	f80c 1032 	strb.w	r1, [ip, r2, lsl #3]
240023c2:	f103 010f 	add.w	r1, r3, #15
240023c6:	eb0c 02c2 	add.w	r2, ip, r2, lsl #3
240023ca:	5c61      	ldrb	r1, [r4, r1]
240023cc:	7051      	strb	r1, [r2, #1]
240023ce:	f103 0110 	add.w	r1, r3, #16
240023d2:	5c61      	ldrb	r1, [r4, r1]
240023d4:	7091      	strb	r1, [r2, #2]
240023d6:	f103 0111 	add.w	r1, r3, #17
240023da:	5c61      	ldrb	r1, [r4, r1]
240023dc:	70d1      	strb	r1, [r2, #3]
240023de:	f103 0112 	add.w	r1, r3, #18
240023e2:	5c61      	ldrb	r1, [r4, r1]
240023e4:	7111      	strb	r1, [r2, #4]
240023e6:	f103 0113 	add.w	r1, r3, #19
240023ea:	5c61      	ldrb	r1, [r4, r1]
240023ec:	7151      	strb	r1, [r2, #5]
240023ee:	f103 0114 	add.w	r1, r3, #20
240023f2:	5c61      	ldrb	r1, [r4, r1]
240023f4:	7191      	strb	r1, [r2, #6]
240023f6:	f103 0115 	add.w	r1, r3, #21
240023fa:	5c61      	ldrb	r1, [r4, r1]
240023fc:	71d1      	strb	r1, [r2, #7]
240023fe:	f103 0116 	add.w	r1, r3, #22
24002402:	5c61      	ldrb	r1, [r4, r1]
24002404:	7211      	strb	r1, [r2, #8]
24002406:	f103 0117 	add.w	r1, r3, #23
2400240a:	5c61      	ldrb	r1, [r4, r1]
2400240c:	7291      	strb	r1, [r2, #10]
2400240e:	f103 0118 	add.w	r1, r3, #24
24002412:	5c61      	ldrb	r1, [r4, r1]
24002414:	72d1      	strb	r1, [r2, #11]
24002416:	f103 0119 	add.w	r1, r3, #25
2400241a:	5c61      	ldrb	r1, [r4, r1]
2400241c:	7311      	strb	r1, [r2, #12]
2400241e:	f103 011a 	add.w	r1, r3, #26
24002422:	5c61      	ldrb	r1, [r4, r1]
24002424:	7351      	strb	r1, [r2, #13]
24002426:	f103 011b 	add.w	r1, r3, #27
2400242a:	5c61      	ldrb	r1, [r4, r1]
2400242c:	7391      	strb	r1, [r2, #14]
2400242e:	f103 011c 	add.w	r1, r3, #28
24002432:	5c61      	ldrb	r1, [r4, r1]
24002434:	73d1      	strb	r1, [r2, #15]
24002436:	f103 011d 	add.w	r1, r3, #29
2400243a:	5c61      	ldrb	r1, [r4, r1]
2400243c:	7411      	strb	r1, [r2, #16]
2400243e:	f103 011e 	add.w	r1, r3, #30
24002442:	5c61      	ldrb	r1, [r4, r1]
24002444:	7451      	strb	r1, [r2, #17]
24002446:	f103 011f 	add.w	r1, r3, #31
2400244a:	5c61      	ldrb	r1, [r4, r1]
2400244c:	7491      	strb	r1, [r2, #18]
2400244e:	f103 0120 	add.w	r1, r3, #32
24002452:	5c61      	ldrb	r1, [r4, r1]
24002454:	7511      	strb	r1, [r2, #20]
24002456:	f103 0121 	add.w	r1, r3, #33	; 0x21
2400245a:	5c61      	ldrb	r1, [r4, r1]
2400245c:	7551      	strb	r1, [r2, #21]
2400245e:	f103 0122 	add.w	r1, r3, #34	; 0x22
24002462:	5c61      	ldrb	r1, [r4, r1]
24002464:	7591      	strb	r1, [r2, #22]
24002466:	f103 0123 	add.w	r1, r3, #35	; 0x23
2400246a:	5c61      	ldrb	r1, [r4, r1]
2400246c:	75d1      	strb	r1, [r2, #23]
2400246e:	f103 0124 	add.w	r1, r3, #36	; 0x24
24002472:	5c61      	ldrb	r1, [r4, r1]
24002474:	7611      	strb	r1, [r2, #24]
24002476:	f103 0125 	add.w	r1, r3, #37	; 0x25
2400247a:	5c61      	ldrb	r1, [r4, r1]
2400247c:	7651      	strb	r1, [r2, #25]
2400247e:	f103 0126 	add.w	r1, r3, #38	; 0x26
24002482:	5c61      	ldrb	r1, [r4, r1]
24002484:	7691      	strb	r1, [r2, #26]
24002486:	f103 0127 	add.w	r1, r3, #39	; 0x27
2400248a:	5c61      	ldrb	r1, [r4, r1]
2400248c:	76d1      	strb	r1, [r2, #27]
2400248e:	f103 0128 	add.w	r1, r3, #40	; 0x28
24002492:	5c61      	ldrb	r1, [r4, r1]
24002494:	7711      	strb	r1, [r2, #28]
24002496:	f103 0129 	add.w	r1, r3, #41	; 0x29
2400249a:	5c61      	ldrb	r1, [r4, r1]
2400249c:	7791      	strb	r1, [r2, #30]
2400249e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
240024a2:	5c61      	ldrb	r1, [r4, r1]
240024a4:	77d1      	strb	r1, [r2, #31]
240024a6:	f103 012b 	add.w	r1, r3, #43	; 0x2b
240024aa:	5c61      	ldrb	r1, [r4, r1]
240024ac:	f882 1020 	strb.w	r1, [r2, #32]
240024b0:	f103 012c 	add.w	r1, r3, #44	; 0x2c
240024b4:	5c61      	ldrb	r1, [r4, r1]
240024b6:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
240024ba:	f103 012d 	add.w	r1, r3, #45	; 0x2d
240024be:	5c61      	ldrb	r1, [r4, r1]
240024c0:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
240024c4:	f103 012e 	add.w	r1, r3, #46	; 0x2e
240024c8:	5c61      	ldrb	r1, [r4, r1]
240024ca:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
240024ce:	f103 012f 	add.w	r1, r3, #47	; 0x2f
240024d2:	5c61      	ldrb	r1, [r4, r1]
240024d4:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
240024d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
240024dc:	5c61      	ldrb	r1, [r4, r1]
240024de:	f882 1025 	strb.w	r1, [r2, #37]	; 0x25
240024e2:	f103 0131 	add.w	r1, r3, #49	; 0x31
240024e6:	5c61      	ldrb	r1, [r4, r1]
240024e8:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
240024ec:	f103 0132 	add.w	r1, r3, #50	; 0x32
240024f0:	5c61      	ldrb	r1, [r4, r1]
240024f2:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
240024f6:	f103 0133 	add.w	r1, r3, #51	; 0x33
240024fa:	5c61      	ldrb	r1, [r4, r1]
240024fc:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
24002500:	f103 0134 	add.w	r1, r3, #52	; 0x34
24002504:	5c61      	ldrb	r1, [r4, r1]
24002506:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
2400250a:	f103 0135 	add.w	r1, r3, #53	; 0x35
2400250e:	5c61      	ldrb	r1, [r4, r1]
24002510:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
24002514:	f103 0136 	add.w	r1, r3, #54	; 0x36
24002518:	5c61      	ldrb	r1, [r4, r1]
2400251a:	f882 102c 	strb.w	r1, [r2, #44]	; 0x2c
2400251e:	f103 0137 	add.w	r1, r3, #55	; 0x37
24002522:	5c61      	ldrb	r1, [r4, r1]
24002524:	f882 102d 	strb.w	r1, [r2, #45]	; 0x2d
24002528:	f103 0138 	add.w	r1, r3, #56	; 0x38
2400252c:	5c61      	ldrb	r1, [r4, r1]
2400252e:	f882 102e 	strb.w	r1, [r2, #46]	; 0x2e
24002532:	f103 0139 	add.w	r1, r3, #57	; 0x39
24002536:	5c61      	ldrb	r1, [r4, r1]
24002538:	f882 102f 	strb.w	r1, [r2, #47]	; 0x2f
2400253c:	f103 013a 	add.w	r1, r3, #58	; 0x3a
24002540:	5c61      	ldrb	r1, [r4, r1]
24002542:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
24002546:	f103 013b 	add.w	r1, r3, #59	; 0x3b
2400254a:	5c61      	ldrb	r1, [r4, r1]
2400254c:	f882 1032 	strb.w	r1, [r2, #50]	; 0x32
24002550:	f103 013c 	add.w	r1, r3, #60	; 0x3c
24002554:	5c61      	ldrb	r1, [r4, r1]
24002556:	f882 1033 	strb.w	r1, [r2, #51]	; 0x33
2400255a:	f103 013d 	add.w	r1, r3, #61	; 0x3d
2400255e:	5c61      	ldrb	r1, [r4, r1]
24002560:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
24002564:	f103 013e 	add.w	r1, r3, #62	; 0x3e
24002568:	5c61      	ldrb	r1, [r4, r1]
2400256a:	f882 1035 	strb.w	r1, [r2, #53]	; 0x35
2400256e:	f103 013f 	add.w	r1, r3, #63	; 0x3f
24002572:	5c61      	ldrb	r1, [r4, r1]
24002574:	f882 1036 	strb.w	r1, [r2, #54]	; 0x36
24002578:	f103 0140 	add.w	r1, r3, #64	; 0x40
2400257c:	5c61      	ldrb	r1, [r4, r1]
2400257e:	f882 1037 	strb.w	r1, [r2, #55]	; 0x37
24002582:	f103 0141 	add.w	r1, r3, #65	; 0x41
24002586:	5c61      	ldrb	r1, [r4, r1]
24002588:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
2400258c:	f103 0142 	add.w	r1, r3, #66	; 0x42
24002590:	5c61      	ldrb	r1, [r4, r1]
24002592:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39
24002596:	f103 0143 	add.w	r1, r3, #67	; 0x43
2400259a:	5c61      	ldrb	r1, [r4, r1]
2400259c:	f882 103a 	strb.w	r1, [r2, #58]	; 0x3a
240025a0:	f103 0144 	add.w	r1, r3, #68	; 0x44
240025a4:	5c61      	ldrb	r1, [r4, r1]
240025a6:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
240025aa:	f103 0145 	add.w	r1, r3, #69	; 0x45
240025ae:	5c61      	ldrb	r1, [r4, r1]
240025b0:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
240025b4:	f103 0146 	add.w	r1, r3, #70	; 0x46
240025b8:	5c61      	ldrb	r1, [r4, r1]
240025ba:	f882 103e 	strb.w	r1, [r2, #62]	; 0x3e
240025be:	f103 0147 	add.w	r1, r3, #71	; 0x47
240025c2:	5c61      	ldrb	r1, [r4, r1]
240025c4:	f882 103f 	strb.w	r1, [r2, #63]	; 0x3f
240025c8:	f103 0148 	add.w	r1, r3, #72	; 0x48
240025cc:	5c61      	ldrb	r1, [r4, r1]
240025ce:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
240025d2:	f103 0149 	add.w	r1, r3, #73	; 0x49
240025d6:	5c61      	ldrb	r1, [r4, r1]
240025d8:	f882 1041 	strb.w	r1, [r2, #65]	; 0x41
240025dc:	f103 014a 	add.w	r1, r3, #74	; 0x4a
240025e0:	5c61      	ldrb	r1, [r4, r1]
240025e2:	f882 1042 	strb.w	r1, [r2, #66]	; 0x42
240025e6:	f103 014b 	add.w	r1, r3, #75	; 0x4b
240025ea:	5c61      	ldrb	r1, [r4, r1]
240025ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
240025f0:	f103 014c 	add.w	r1, r3, #76	; 0x4c
240025f4:	5c61      	ldrb	r1, [r4, r1]
240025f6:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
240025fa:	f103 014d 	add.w	r1, r3, #77	; 0x4d
240025fe:	5c61      	ldrb	r1, [r4, r1]
24002600:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
24002604:	f103 014e 	add.w	r1, r3, #78	; 0x4e
24002608:	5c61      	ldrb	r1, [r4, r1]
2400260a:	f882 1047 	strb.w	r1, [r2, #71]	; 0x47
2400260e:	f103 014f 	add.w	r1, r3, #79	; 0x4f
24002612:	5c61      	ldrb	r1, [r4, r1]
24002614:	f882 1048 	strb.w	r1, [r2, #72]	; 0x48
24002618:	f103 0150 	add.w	r1, r3, #80	; 0x50
2400261c:	5c61      	ldrb	r1, [r4, r1]
2400261e:	f882 1049 	strb.w	r1, [r2, #73]	; 0x49
24002622:	f103 0151 	add.w	r1, r3, #81	; 0x51
24002626:	5c61      	ldrb	r1, [r4, r1]
24002628:	f882 104a 	strb.w	r1, [r2, #74]	; 0x4a
2400262c:	f103 0152 	add.w	r1, r3, #82	; 0x52
24002630:	5c61      	ldrb	r1, [r4, r1]
24002632:	f882 104b 	strb.w	r1, [r2, #75]	; 0x4b
24002636:	f103 0153 	add.w	r1, r3, #83	; 0x53
2400263a:	5c61      	ldrb	r1, [r4, r1]
2400263c:	f882 104c 	strb.w	r1, [r2, #76]	; 0x4c
24002640:	f103 0154 	add.w	r1, r3, #84	; 0x54
24002644:	5c61      	ldrb	r1, [r4, r1]
24002646:	f882 104d 	strb.w	r1, [r2, #77]	; 0x4d
2400264a:	f103 0155 	add.w	r1, r3, #85	; 0x55
2400264e:	5c61      	ldrb	r1, [r4, r1]
24002650:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
24002654:	e00a      	b.n	2400266c <getPresetNamesFromSDCard+0x474>
24002656:	bf00      	nop
24002658:	2001622a 	.word	0x2001622a
2400265c:	30042380 	.word	0x30042380
24002660:	30042000 	.word	0x30042000
24002664:	2001d9b8 	.word	0x2001d9b8
24002668:	30043380 	.word	0x30043380
								macroNamesArray[i][j+8][k] = buffer[bufferIndex];
2400266c:	f103 0156 	add.w	r1, r3, #86	; 0x56
24002670:	5c61      	ldrb	r1, [r4, r1]
24002672:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50
24002676:	f103 0157 	add.w	r1, r3, #87	; 0x57
2400267a:	5c61      	ldrb	r1, [r4, r1]
2400267c:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
24002680:	f103 0158 	add.w	r1, r3, #88	; 0x58
24002684:	5c61      	ldrb	r1, [r4, r1]
24002686:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
2400268a:	f103 0159 	add.w	r1, r3, #89	; 0x59
2400268e:	5c61      	ldrb	r1, [r4, r1]
24002690:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
24002694:	f103 015a 	add.w	r1, r3, #90	; 0x5a
24002698:	5c61      	ldrb	r1, [r4, r1]
2400269a:	f882 1054 	strb.w	r1, [r2, #84]	; 0x54
2400269e:	f103 015b 	add.w	r1, r3, #91	; 0x5b
240026a2:	5c61      	ldrb	r1, [r4, r1]
240026a4:	f882 1055 	strb.w	r1, [r2, #85]	; 0x55
240026a8:	f103 015c 	add.w	r1, r3, #92	; 0x5c
240026ac:	5c61      	ldrb	r1, [r4, r1]
240026ae:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
240026b2:	f103 015d 	add.w	r1, r3, #93	; 0x5d
240026b6:	5c61      	ldrb	r1, [r4, r1]
240026b8:	f882 1057 	strb.w	r1, [r2, #87]	; 0x57
240026bc:	f103 015e 	add.w	r1, r3, #94	; 0x5e
240026c0:	5c61      	ldrb	r1, [r4, r1]
240026c2:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
240026c6:	f103 015f 	add.w	r1, r3, #95	; 0x5f
240026ca:	5c61      	ldrb	r1, [r4, r1]
240026cc:	f882 1059 	strb.w	r1, [r2, #89]	; 0x59
240026d0:	f103 0160 	add.w	r1, r3, #96	; 0x60
240026d4:	5c61      	ldrb	r1, [r4, r1]
240026d6:	f882 105a 	strb.w	r1, [r2, #90]	; 0x5a
240026da:	f103 0161 	add.w	r1, r3, #97	; 0x61
240026de:	5c61      	ldrb	r1, [r4, r1]
240026e0:	f882 105b 	strb.w	r1, [r2, #91]	; 0x5b
240026e4:	f103 0162 	add.w	r1, r3, #98	; 0x62
240026e8:	5c61      	ldrb	r1, [r4, r1]
240026ea:	f882 105c 	strb.w	r1, [r2, #92]	; 0x5c
240026ee:	f103 0163 	add.w	r1, r3, #99	; 0x63
240026f2:	5c61      	ldrb	r1, [r4, r1]
240026f4:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
240026f8:	f103 0164 	add.w	r1, r3, #100	; 0x64
240026fc:	5c61      	ldrb	r1, [r4, r1]
240026fe:	f882 105e 	strb.w	r1, [r2, #94]	; 0x5e
24002702:	f103 0165 	add.w	r1, r3, #101	; 0x65
24002706:	5c61      	ldrb	r1, [r4, r1]
24002708:	f882 105f 	strb.w	r1, [r2, #95]	; 0x5f
2400270c:	f103 0166 	add.w	r1, r3, #102	; 0x66
24002710:	5c61      	ldrb	r1, [r4, r1]
24002712:	f882 1060 	strb.w	r1, [r2, #96]	; 0x60
24002716:	f103 0167 	add.w	r1, r3, #103	; 0x67
2400271a:	5c61      	ldrb	r1, [r4, r1]
2400271c:	f882 1061 	strb.w	r1, [r2, #97]	; 0x61
24002720:	f103 0168 	add.w	r1, r3, #104	; 0x68
24002724:	5c61      	ldrb	r1, [r4, r1]
24002726:	f882 1062 	strb.w	r1, [r2, #98]	; 0x62
2400272a:	f103 0169 	add.w	r1, r3, #105	; 0x69
2400272e:	5c61      	ldrb	r1, [r4, r1]
24002730:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
24002734:	f103 016a 	add.w	r1, r3, #106	; 0x6a
24002738:	5c61      	ldrb	r1, [r4, r1]
2400273a:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
2400273e:	f103 016b 	add.w	r1, r3, #107	; 0x6b
24002742:	5c61      	ldrb	r1, [r4, r1]
24002744:	f882 1065 	strb.w	r1, [r2, #101]	; 0x65
24002748:	f103 016c 	add.w	r1, r3, #108	; 0x6c
2400274c:	5c61      	ldrb	r1, [r4, r1]
2400274e:	f882 1066 	strb.w	r1, [r2, #102]	; 0x66
24002752:	f103 016d 	add.w	r1, r3, #109	; 0x6d
24002756:	5c61      	ldrb	r1, [r4, r1]
24002758:	f882 1067 	strb.w	r1, [r2, #103]	; 0x67
2400275c:	f103 016e 	add.w	r1, r3, #110	; 0x6e
24002760:	5c61      	ldrb	r1, [r4, r1]
24002762:	f882 1068 	strb.w	r1, [r2, #104]	; 0x68
24002766:	f103 016f 	add.w	r1, r3, #111	; 0x6f
2400276a:	5c61      	ldrb	r1, [r4, r1]
2400276c:	f882 1069 	strb.w	r1, [r2, #105]	; 0x69
24002770:	f103 0170 	add.w	r1, r3, #112	; 0x70
24002774:	5c61      	ldrb	r1, [r4, r1]
24002776:	f882 106a 	strb.w	r1, [r2, #106]	; 0x6a
2400277a:	f103 0171 	add.w	r1, r3, #113	; 0x71
2400277e:	5c61      	ldrb	r1, [r4, r1]
24002780:	f882 106b 	strb.w	r1, [r2, #107]	; 0x6b
24002784:	f103 0172 	add.w	r1, r3, #114	; 0x72
24002788:	5c61      	ldrb	r1, [r4, r1]
2400278a:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
2400278e:	f103 0173 	add.w	r1, r3, #115	; 0x73
24002792:	5c61      	ldrb	r1, [r4, r1]
24002794:	f882 106d 	strb.w	r1, [r2, #109]	; 0x6d
24002798:	f103 0174 	add.w	r1, r3, #116	; 0x74
2400279c:	5c61      	ldrb	r1, [r4, r1]
2400279e:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
240027a2:	f103 0175 	add.w	r1, r3, #117	; 0x75
240027a6:	5c61      	ldrb	r1, [r4, r1]
240027a8:	f882 106f 	strb.w	r1, [r2, #111]	; 0x6f
240027ac:	f103 0176 	add.w	r1, r3, #118	; 0x76
240027b0:	5c61      	ldrb	r1, [r4, r1]
240027b2:	f882 1070 	strb.w	r1, [r2, #112]	; 0x70
240027b6:	f103 0177 	add.w	r1, r3, #119	; 0x77
240027ba:	5c61      	ldrb	r1, [r4, r1]
240027bc:	f882 1071 	strb.w	r1, [r2, #113]	; 0x71
240027c0:	f103 0178 	add.w	r1, r3, #120	; 0x78
240027c4:	5c61      	ldrb	r1, [r4, r1]
240027c6:	f882 1072 	strb.w	r1, [r2, #114]	; 0x72
240027ca:	f103 0179 	add.w	r1, r3, #121	; 0x79
240027ce:	5c61      	ldrb	r1, [r4, r1]
240027d0:	f882 1073 	strb.w	r1, [r2, #115]	; 0x73
240027d4:	f103 017a 	add.w	r1, r3, #122	; 0x7a
240027d8:	5c61      	ldrb	r1, [r4, r1]
240027da:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
240027de:	f103 017b 	add.w	r1, r3, #123	; 0x7b
240027e2:	5c61      	ldrb	r1, [r4, r1]
240027e4:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
240027e8:	f103 017c 	add.w	r1, r3, #124	; 0x7c
240027ec:	337d      	adds	r3, #125	; 0x7d
240027ee:	5c61      	ldrb	r1, [r4, r1]
240027f0:	5ce3      	ldrb	r3, [r4, r3]
240027f2:	f882 1076 	strb.w	r1, [r2, #118]	; 0x76
240027f6:	f882 3077 	strb.w	r3, [r2, #119]	; 0x77
						for (int j = 0; j < 4; j++)
240027fa:	e55c      	b.n	240022b6 <getPresetNamesFromSDCard+0xbe>
			audioOutBuffer[i] = 0;
240027fc:	2200      	movs	r2, #0
240027fe:	f503 6180 	add.w	r1, r3, #1024	; 0x400
			audioOutBuffer[i + 1] = 0;
24002802:	e9c3 2200 	strd	r2, r2, [r3]
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
24002806:	3308      	adds	r3, #8
24002808:	4299      	cmp	r1, r3
2400280a:	d1fa      	bne.n	24002802 <getPresetNamesFromSDCard+0x60a>
2400280c:	e511      	b.n	24002232 <getPresetNamesFromSDCard+0x3a>
2400280e:	bf00      	nop

24002810 <SDRAM_init>:
#define SDRAM_MODEREG_WRITEBURST_MODE_PROG_BURST ((0 << 9))

#define SDRAM_MODEREG_OPERATING_MODE_STANDARD ((0 << 13)|(0 << 14))

void SDRAM_init()
{
24002810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 1;
	        Command.ModeRegisterDefinition = 0;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002814:	4c21      	ldr	r4, [pc, #132]	; (2400289c <SDRAM_init+0x8c>)
{
24002816:	b086      	sub	sp, #24
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
24002818:	2501      	movs	r5, #1
	        __IO uint32_t tmpmrd = 0;
2400281a:	2600      	movs	r6, #0
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
2400281c:	2710      	movs	r7, #16
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
2400281e:	a902      	add	r1, sp, #8
24002820:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24002824:	4620      	mov	r0, r4
	        /* Step 4: Insert 100 us delay */
	        HAL_Delay(1);


	        /* Step 5: Configure a PALL (precharge all) command */
	        Command.CommandMode            = FMC_SDRAM_CMD_PALL;
24002826:	f04f 0802 	mov.w	r8, #2
	        __IO uint32_t tmpmrd = 0;
2400282a:	9601      	str	r6, [sp, #4]
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
2400282c:	e9cd 5702 	strd	r5, r7, [sp, #8]
	        Command.ModeRegisterDefinition = 0;
24002830:	e9cd 5604 	strd	r5, r6, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002834:	f009 f8a6 	bl	2400b984 <HAL_SDRAM_SendCommand>
	        HAL_Delay(1);
24002838:	4628      	mov	r0, r5
2400283a:	f002 fd2d 	bl	24005298 <HAL_Delay>
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 1;
	        Command.ModeRegisterDefinition = 0;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
2400283e:	a902      	add	r1, sp, #8
24002840:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24002844:	4620      	mov	r0, r4
	        Command.ModeRegisterDefinition = 0;
24002846:	9605      	str	r6, [sp, #20]
	        Command.CommandMode            = FMC_SDRAM_CMD_PALL;
24002848:	f8cd 8008 	str.w	r8, [sp, #8]
	        Command.AutoRefreshNumber      = 1;
2400284c:	e9cd 7503 	strd	r7, r5, [sp, #12]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002850:	f009 f898 	bl	2400b984 <HAL_SDRAM_SendCommand>

	        /* Step 6 : Configure a Auto-Refresh command */
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
24002854:	2303      	movs	r3, #3
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 2;
	        Command.ModeRegisterDefinition = 0;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002856:	a902      	add	r1, sp, #8
24002858:	f44f 5280 	mov.w	r2, #4096	; 0x1000
2400285c:	4620      	mov	r0, r4
	        Command.ModeRegisterDefinition = 0;
2400285e:	9605      	str	r6, [sp, #20]
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
24002860:	9302      	str	r3, [sp, #8]
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
	                 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL | SDRAM_MODEREG_CAS_LATENCY_2
	                 | SDRAM_MODEREG_WRITEBURST_MODE_SINGLE | SDRAM_MODEREG_OPERATING_MODE_STANDARD;
	        // // Used in example, but can't find reference except for "Test Mode"

	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
24002862:	2604      	movs	r6, #4
	        Command.AutoRefreshNumber      = 2;
24002864:	e9cd 7803 	strd	r7, r8, [sp, #12]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002868:	f009 f88c 	bl	2400b984 <HAL_SDRAM_SendCommand>
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
2400286c:	f240 2322 	movw	r3, #546	; 0x222
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
24002870:	2710      	movs	r7, #16
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 1;
	        Command.ModeRegisterDefinition = tmpmrd;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002872:	a902      	add	r1, sp, #8
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
24002874:	9301      	str	r3, [sp, #4]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002876:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.ModeRegisterDefinition = tmpmrd;
2400287a:	9b01      	ldr	r3, [sp, #4]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
2400287c:	4620      	mov	r0, r4
	        Command.AutoRefreshNumber      = 1;
2400287e:	9504      	str	r5, [sp, #16]
	        Command.ModeRegisterDefinition = tmpmrd;
24002880:	9305      	str	r3, [sp, #20]
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
24002882:	e9cd 6702 	strd	r6, r7, [sp, #8]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002886:	f009 f87d 	bl	2400b984 <HAL_SDRAM_SendCommand>

	        //HAL_SDRAM_ProgramRefreshRate(hsdram, 0x56A - 20);
	        HAL_SDRAM_ProgramRefreshRate(&hsdram1, 762); // ((64ms / 8192) * 100MHz) - 20
2400288a:	f240 21fa 	movw	r1, #762	; 0x2fa
2400288e:	4620      	mov	r0, r4
24002890:	f009 f898 	bl	2400b9c4 <HAL_SDRAM_ProgramRefreshRate>
	        //8192 is 2^numberofrows (which is 13 in the case of the sdram)

}
24002894:	b006      	add	sp, #24
24002896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
2400289a:	bf00      	nop
2400289c:	20013f8c 	.word	0x20013f8c

240028a0 <setEffectsFunctions>:
	;
}

void setEffectsFunctions(FXType effectType, int i)
{
	effectsActive[i] = 1;
240028a0:	4ba1      	ldr	r3, [pc, #644]	; (24002b28 <setEffectsFunctions+0x288>)
240028a2:	2201      	movs	r2, #1
{
240028a4:	b410      	push	{r4}
	effectsActive[i] = 1;
240028a6:	545a      	strb	r2, [r3, r1]
	switch (effectType)
240028a8:	2815      	cmp	r0, #21
240028aa:	d82b      	bhi.n	24002904 <setEffectsFunctions+0x64>
240028ac:	e8df f010 	tbh	[pc, r0, lsl #1]
240028b0:	0217022b 	.word	0x0217022b
240028b4:	01ef0203 	.word	0x01ef0203
240028b8:	01d601e9 	.word	0x01d601e9
240028bc:	012601c2 	.word	0x012601c2
240028c0:	01010111 	.word	0x01010111
240028c4:	001600f1 	.word	0x001600f1
240028c8:	00c900dc 	.word	0x00c900dc
240028cc:	00a300b6 	.word	0x00a300b6
240028d0:	007c0090 	.word	0x007c0090
240028d4:	00540068 	.word	0x00540068
240028d8:	002d0040 	.word	0x002d0040
			  effectSetters[i].setParam3 = &tiltParam3;
			  effectSetters[i].setParam4 = &tiltParam4;
			  effectSetters[i].setParam5 = &param5Linear;
			  break;
		  case Wavefolder:
			  effectTick[i] = &wavefolderTick;
240028dc:	4b93      	ldr	r3, [pc, #588]	; (24002b2c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &wavefolderParam1;
240028de:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &wavefolderTick;
240028e2:	4c93      	ldr	r4, [pc, #588]	; (24002b30 <setEffectsFunctions+0x290>)
			  effectSetters[i].setParam1 = &wavefolderParam1;
240028e4:	4a93      	ldr	r2, [pc, #588]	; (24002b34 <setEffectsFunctions+0x294>)
			  effectTick[i] = &wavefolderTick;
240028e6:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &wavefolderParam1;
240028ea:	4993      	ldr	r1, [pc, #588]	; (24002b38 <setEffectsFunctions+0x298>)
240028ec:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &offsetParam2;
240028f0:	4c92      	ldr	r4, [pc, #584]	; (24002b3c <setEffectsFunctions+0x29c>)
			  effectSetters[i].setParam1 = &wavefolderParam1;
240028f2:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &wavefolderParam3;
240028f6:	4892      	ldr	r0, [pc, #584]	; (24002b40 <setEffectsFunctions+0x2a0>)
			  effectSetters[i].setParam4 = &param4Linear;
240028f8:	4992      	ldr	r1, [pc, #584]	; (24002b44 <setEffectsFunctions+0x2a4>)
			  effectSetters[i].setParam5 = &param5Linear;
240028fa:	4a93      	ldr	r2, [pc, #588]	; (24002b48 <setEffectsFunctions+0x2a8>)
			  effectSetters[i].setParam3 = &tiltParam3;
240028fc:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &param5Linear;
24002900:	e9c3 1203 	strd	r1, r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
			  break;
		  default:
			  break;
	}
}
24002904:	f85d 4b04 	ldr.w	r4, [sp], #4
24002908:	4770      	bx	lr
			  effectTick[i] = &FXLadderLowpassTick;
2400290a:	4b88      	ldr	r3, [pc, #544]	; (24002b2c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXLadderParam1;;
2400290c:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXLadderLowpassTick;
24002910:	4a8e      	ldr	r2, [pc, #568]	; (24002b4c <setEffectsFunctions+0x2ac>)
			  effectSetters[i].setParam1 = &FXLadderParam1;;
24002912:	4888      	ldr	r0, [pc, #544]	; (24002b34 <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXLadderLowpassTick;
24002914:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLadderParam1;;
24002918:	498d      	ldr	r1, [pc, #564]	; (24002b50 <setEffectsFunctions+0x2b0>)
2400291a:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;;
2400291e:	4a8d      	ldr	r2, [pc, #564]	; (24002b54 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXLadderParam1;;
24002920:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXLadderParam3;;
24002924:	498c      	ldr	r1, [pc, #560]	; (24002b58 <setEffectsFunctions+0x2b8>)
			  effectSetters[i].setParam2 = &blankFunction;;
24002926:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXLadderParam3;;
24002928:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;;
2400292a:	e9c3 2203 	strd	r2, r2, [r3, #12]
}
2400292e:	e7e9      	b.n	24002904 <setEffectsFunctions+0x64>
			  effectTick[i] = FXVZbandrejectTick;
24002930:	4b7e      	ldr	r3, [pc, #504]	; (24002b2c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXNotchParam1;;
24002932:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = FXVZbandrejectTick;
24002936:	4a89      	ldr	r2, [pc, #548]	; (24002b5c <setEffectsFunctions+0x2bc>)
			  effectSetters[i].setParam1 = &FXNotchParam1;;
24002938:	487e      	ldr	r0, [pc, #504]	; (24002b34 <setEffectsFunctions+0x294>)
			  effectTick[i] = FXVZbandrejectTick;
2400293a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXNotchParam1;;
2400293e:	4988      	ldr	r1, [pc, #544]	; (24002b60 <setEffectsFunctions+0x2c0>)
24002940:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;;
24002944:	4a83      	ldr	r2, [pc, #524]	; (24002b54 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXNotchParam1;;
24002946:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &FXNotchParam2;;
2400294a:	4886      	ldr	r0, [pc, #536]	; (24002b64 <setEffectsFunctions+0x2c4>)
			  effectSetters[i].setParam3 = &FXNotchParam3;;
2400294c:	4986      	ldr	r1, [pc, #536]	; (24002b68 <setEffectsFunctions+0x2c8>)
			  effectSetters[i].setParam4 = &blankFunction;;
2400294e:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
24002950:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXNotchParam3;;
24002952:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
24002956:	e7d5      	b.n	24002904 <setEffectsFunctions+0x64>
			  effectTick[i] = FXVZhighshelfTick;
24002958:	4b74      	ldr	r3, [pc, #464]	; (24002b2c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
2400295a:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = FXVZhighshelfTick;
2400295e:	4a83      	ldr	r2, [pc, #524]	; (24002b6c <setEffectsFunctions+0x2cc>)
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
24002960:	4874      	ldr	r0, [pc, #464]	; (24002b34 <setEffectsFunctions+0x294>)
			  effectTick[i] = FXVZhighshelfTick;
24002962:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
24002966:	4982      	ldr	r1, [pc, #520]	; (24002b70 <setEffectsFunctions+0x2d0>)
24002968:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;;
2400296c:	4a79      	ldr	r2, [pc, #484]	; (24002b54 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
2400296e:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &FXHighShelfParam2;;
24002972:	4880      	ldr	r0, [pc, #512]	; (24002b74 <setEffectsFunctions+0x2d4>)
			  effectSetters[i].setParam3 = &FXHighShelfParam3;;
24002974:	4980      	ldr	r1, [pc, #512]	; (24002b78 <setEffectsFunctions+0x2d8>)
			  effectSetters[i].setParam4 = &blankFunction;;
24002976:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
24002978:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXHighShelfParam3;;
2400297a:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
2400297e:	e7c1      	b.n	24002904 <setEffectsFunctions+0x64>
			  effectTick[i] = &FXVZlowshelfTick;
24002980:	4b6a      	ldr	r3, [pc, #424]	; (24002b2c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
24002982:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXVZlowshelfTick;
24002986:	4a7d      	ldr	r2, [pc, #500]	; (24002b7c <setEffectsFunctions+0x2dc>)
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
24002988:	486a      	ldr	r0, [pc, #424]	; (24002b34 <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXVZlowshelfTick;
2400298a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
2400298e:	497c      	ldr	r1, [pc, #496]	; (24002b80 <setEffectsFunctions+0x2e0>)
24002990:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
24002994:	4a6f      	ldr	r2, [pc, #444]	; (24002b54 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
24002996:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &FXLowShelfParam2;
2400299a:	487a      	ldr	r0, [pc, #488]	; (24002b84 <setEffectsFunctions+0x2e4>)
			  effectSetters[i].setParam3 = &FXLowShelfParam3;
2400299c:	497a      	ldr	r1, [pc, #488]	; (24002b88 <setEffectsFunctions+0x2e8>)
			  effectSetters[i].setParam4 = &blankFunction;
2400299e:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
240029a0:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXLowShelfParam3;
240029a2:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
240029a6:	e7ad      	b.n	24002904 <setEffectsFunctions+0x64>
			  effectTick[i] = &FXVZpeakTick;
240029a8:	4b60      	ldr	r3, [pc, #384]	; (24002b2c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXPeakParam1;
240029aa:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXVZpeakTick;
240029ae:	4a77      	ldr	r2, [pc, #476]	; (24002b8c <setEffectsFunctions+0x2ec>)
			  effectSetters[i].setParam1 = &FXPeakParam1;
240029b0:	4860      	ldr	r0, [pc, #384]	; (24002b34 <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXVZpeakTick;
240029b2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXPeakParam1;
240029b6:	4976      	ldr	r1, [pc, #472]	; (24002b90 <setEffectsFunctions+0x2f0>)
240029b8:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
240029bc:	4a65      	ldr	r2, [pc, #404]	; (24002b54 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXPeakParam1;
240029be:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &FXPeakParam2;
240029c2:	4874      	ldr	r0, [pc, #464]	; (24002b94 <setEffectsFunctions+0x2f4>)
			  effectSetters[i].setParam3 = &FXPeakParam3;
240029c4:	4974      	ldr	r1, [pc, #464]	; (24002b98 <setEffectsFunctions+0x2f8>)
			  effectSetters[i].setParam4 = &blankFunction;
240029c6:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
240029c8:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXPeakParam3;
240029ca:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
240029ce:	e799      	b.n	24002904 <setEffectsFunctions+0x64>
			  effectTick[i] = &FXdiodeLowpassTick;
240029d0:	4b56      	ldr	r3, [pc, #344]	; (24002b2c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXDiodeParam1;
240029d2:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXdiodeLowpassTick;
240029d6:	4a71      	ldr	r2, [pc, #452]	; (24002b9c <setEffectsFunctions+0x2fc>)
			  effectSetters[i].setParam1 = &FXDiodeParam1;
240029d8:	4856      	ldr	r0, [pc, #344]	; (24002b34 <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXdiodeLowpassTick;
240029da:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXDiodeParam1;
240029de:	4970      	ldr	r1, [pc, #448]	; (24002ba0 <setEffectsFunctions+0x300>)
240029e0:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
240029e4:	4a5b      	ldr	r2, [pc, #364]	; (24002b54 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXDiodeParam1;
240029e6:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXDiodeParam3;
240029ea:	496e      	ldr	r1, [pc, #440]	; (24002ba4 <setEffectsFunctions+0x304>)
			  effectSetters[i].setParam2 = &blankFunction;
240029ec:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXDiodeParam3;
240029ee:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;
240029f0:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
240029f4:	e786      	b.n	24002904 <setEffectsFunctions+0x64>
			  effectTick[i] = &FXbandpassTick;
240029f6:	4b4d      	ldr	r3, [pc, #308]	; (24002b2c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXBandpassParam1;
240029f8:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXbandpassTick;
240029fc:	4a6a      	ldr	r2, [pc, #424]	; (24002ba8 <setEffectsFunctions+0x308>)
			  effectSetters[i].setParam1 = &FXBandpassParam1;
240029fe:	484d      	ldr	r0, [pc, #308]	; (24002b34 <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXbandpassTick;
24002a00:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXBandpassParam1;
24002a04:	4969      	ldr	r1, [pc, #420]	; (24002bac <setEffectsFunctions+0x30c>)
24002a06:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
24002a0a:	4a52      	ldr	r2, [pc, #328]	; (24002b54 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXBandpassParam1;
24002a0c:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXBandpassParam3;
24002a10:	4967      	ldr	r1, [pc, #412]	; (24002bb0 <setEffectsFunctions+0x310>)
			  effectSetters[i].setParam2 = &blankFunction;
24002a12:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXBandpassParam3;
24002a14:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;
24002a16:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
24002a1a:	e773      	b.n	24002904 <setEffectsFunctions+0x64>
			  effectTick[i] = &FXhighpassTick;
24002a1c:	4b43      	ldr	r3, [pc, #268]	; (24002b2c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXHighpassParam1;
24002a1e:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXhighpassTick;
24002a22:	4a64      	ldr	r2, [pc, #400]	; (24002bb4 <setEffectsFunctions+0x314>)
			  effectSetters[i].setParam1 = &FXHighpassParam1;
24002a24:	4843      	ldr	r0, [pc, #268]	; (24002b34 <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXhighpassTick;
24002a26:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXHighpassParam1;
24002a2a:	4963      	ldr	r1, [pc, #396]	; (24002bb8 <setEffectsFunctions+0x318>)
24002a2c:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
24002a30:	4a48      	ldr	r2, [pc, #288]	; (24002b54 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXHighpassParam1;
24002a32:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXHighpassParam3;
24002a36:	4961      	ldr	r1, [pc, #388]	; (24002bbc <setEffectsFunctions+0x31c>)
			  effectSetters[i].setParam2 = &blankFunction;
24002a38:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXHighpassParam3;
24002a3a:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;
24002a3c:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
24002a40:	e760      	b.n	24002904 <setEffectsFunctions+0x64>
			  effectTick[i] = &FXlowpassTick;
24002a42:	4b3a      	ldr	r3, [pc, #232]	; (24002b2c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXLowpassParam1;
24002a44:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXlowpassTick;
24002a48:	4a5d      	ldr	r2, [pc, #372]	; (24002bc0 <setEffectsFunctions+0x320>)
			  effectSetters[i].setParam1 = &FXLowpassParam1;
24002a4a:	483a      	ldr	r0, [pc, #232]	; (24002b34 <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXlowpassTick;
24002a4c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLowpassParam1;
24002a50:	495c      	ldr	r1, [pc, #368]	; (24002bc4 <setEffectsFunctions+0x324>)
24002a52:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
24002a56:	4a3f      	ldr	r2, [pc, #252]	; (24002b54 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXLowpassParam1;
24002a58:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXLowpassParam3;
24002a5c:	495a      	ldr	r1, [pc, #360]	; (24002bc8 <setEffectsFunctions+0x328>)
			  effectSetters[i].setParam2 = &blankFunction;
24002a5e:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXLowpassParam3;
24002a60:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;;
24002a62:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
24002a66:	e74d      	b.n	24002904 <setEffectsFunctions+0x64>
			  effectTick[i] = &delayTick;
24002a68:	4b30      	ldr	r3, [pc, #192]	; (24002b2c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &delayParam1;
24002a6a:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &delayTick;
24002a6e:	4c57      	ldr	r4, [pc, #348]	; (24002bcc <setEffectsFunctions+0x32c>)
			  effectSetters[i].setParam1 = &delayParam1;
24002a70:	4a30      	ldr	r2, [pc, #192]	; (24002b34 <setEffectsFunctions+0x294>)
			  effectTick[i] = &delayTick;
24002a72:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &delayParam1;
24002a76:	4956      	ldr	r1, [pc, #344]	; (24002bd0 <setEffectsFunctions+0x330>)
24002a78:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &delayParam2;
24002a7c:	4c55      	ldr	r4, [pc, #340]	; (24002bd4 <setEffectsFunctions+0x334>)
			  effectSetters[i].setParam1 = &delayParam1;
24002a7e:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &delayParam3;
24002a82:	4855      	ldr	r0, [pc, #340]	; (24002bd8 <setEffectsFunctions+0x338>)
			  effectSetters[i].setParam4 = &delayParam4;
24002a84:	4955      	ldr	r1, [pc, #340]	; (24002bdc <setEffectsFunctions+0x33c>)
			  effectSetters[i].setParam5 = &delayParam5;
24002a86:	4a56      	ldr	r2, [pc, #344]	; (24002be0 <setEffectsFunctions+0x340>)
			  effectSetters[i].setParam3 = &delayParam3;
24002a88:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &delayParam5;
24002a8c:	e9c3 1203 	strd	r1, r2, [r3, #12]
			  break;
24002a90:	e738      	b.n	24002904 <setEffectsFunctions+0x64>
			  effectTick[i] = &tiltFilterTick;
24002a92:	4b26      	ldr	r3, [pc, #152]	; (24002b2c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &tiltParam1;
24002a94:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &tiltFilterTick;
24002a98:	4c52      	ldr	r4, [pc, #328]	; (24002be4 <setEffectsFunctions+0x344>)
			  effectSetters[i].setParam1 = &tiltParam1;
24002a9a:	4a26      	ldr	r2, [pc, #152]	; (24002b34 <setEffectsFunctions+0x294>)
			  effectTick[i] = &tiltFilterTick;
24002a9c:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &tiltParam1;
24002aa0:	4951      	ldr	r1, [pc, #324]	; (24002be8 <setEffectsFunctions+0x348>)
24002aa2:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &tiltParam2;
24002aa6:	4c51      	ldr	r4, [pc, #324]	; (24002bec <setEffectsFunctions+0x34c>)
			  effectSetters[i].setParam1 = &tiltParam1;
24002aa8:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &tiltParam3;
24002aac:	4850      	ldr	r0, [pc, #320]	; (24002bf0 <setEffectsFunctions+0x350>)
			  effectSetters[i].setParam4 = &tiltParam4;
24002aae:	4951      	ldr	r1, [pc, #324]	; (24002bf4 <setEffectsFunctions+0x354>)
24002ab0:	e723      	b.n	240028fa <setEffectsFunctions+0x5a>
			  effectTick[i] = &bcTick;
24002ab2:	4b1e      	ldr	r3, [pc, #120]	; (24002b2c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002ab4:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &bcTick;
24002ab8:	4c4f      	ldr	r4, [pc, #316]	; (24002bf8 <setEffectsFunctions+0x358>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002aba:	4a1e      	ldr	r2, [pc, #120]	; (24002b34 <setEffectsFunctions+0x294>)
			  effectTick[i] = &bcTick;
24002abc:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
24002ac0:	494e      	ldr	r1, [pc, #312]	; (24002bfc <setEffectsFunctions+0x35c>)
24002ac2:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &param2Linear;
24002ac6:	4c4e      	ldr	r4, [pc, #312]	; (24002c00 <setEffectsFunctions+0x360>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002ac8:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &param3BC;
24002acc:	484d      	ldr	r0, [pc, #308]	; (24002c04 <setEffectsFunctions+0x364>)
			  effectSetters[i].setParam4 = &param4Linear;
24002ace:	491d      	ldr	r1, [pc, #116]	; (24002b44 <setEffectsFunctions+0x2a4>)
24002ad0:	e713      	b.n	240028fa <setEffectsFunctions+0x5a>
			  effectTick[i] = &chorusTick;
24002ad2:	4b16      	ldr	r3, [pc, #88]	; (24002b2c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &chorusParam1;
24002ad4:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &chorusTick;
24002ad8:	4c4b      	ldr	r4, [pc, #300]	; (24002c08 <setEffectsFunctions+0x368>)
			  effectSetters[i].setParam1 = &chorusParam1;
24002ada:	4a16      	ldr	r2, [pc, #88]	; (24002b34 <setEffectsFunctions+0x294>)
			  effectTick[i] = &chorusTick;
24002adc:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &chorusParam1;
24002ae0:	494a      	ldr	r1, [pc, #296]	; (24002c0c <setEffectsFunctions+0x36c>)
24002ae2:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &chorusParam2;
24002ae6:	4c4a      	ldr	r4, [pc, #296]	; (24002c10 <setEffectsFunctions+0x370>)
			  effectSetters[i].setParam1 = &chorusParam1;
24002ae8:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &chorusParam3;
24002aec:	4849      	ldr	r0, [pc, #292]	; (24002c14 <setEffectsFunctions+0x374>)
			  effectSetters[i].setParam4 = &chorusParam4;
24002aee:	494a      	ldr	r1, [pc, #296]	; (24002c18 <setEffectsFunctions+0x378>)
			  effectSetters[i].setParam5 = &blankFunction;
24002af0:	4a18      	ldr	r2, [pc, #96]	; (24002b54 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam3 = &chorusParam3;
24002af2:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &blankFunction;
24002af6:	e9c3 1203 	strd	r1, r2, [r3, #12]
			  break;
24002afa:	e703      	b.n	24002904 <setEffectsFunctions+0x64>
			  effectTick[i] = &compressorTick;
24002afc:	4b0b      	ldr	r3, [pc, #44]	; (24002b2c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &compressorParam1;
24002afe:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &compressorTick;
24002b02:	4c46      	ldr	r4, [pc, #280]	; (24002c1c <setEffectsFunctions+0x37c>)
			  effectSetters[i].setParam1 = &compressorParam1;
24002b04:	4a0b      	ldr	r2, [pc, #44]	; (24002b34 <setEffectsFunctions+0x294>)
			  effectTick[i] = &compressorTick;
24002b06:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &compressorParam1;
24002b0a:	4945      	ldr	r1, [pc, #276]	; (24002c20 <setEffectsFunctions+0x380>)
24002b0c:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &compressorParam2;
24002b10:	4c44      	ldr	r4, [pc, #272]	; (24002c24 <setEffectsFunctions+0x384>)
			  effectSetters[i].setParam1 = &compressorParam1;
24002b12:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &compressorParam3;
24002b16:	4844      	ldr	r0, [pc, #272]	; (24002c28 <setEffectsFunctions+0x388>)
			  effectSetters[i].setParam4 = &compressorParam4;
24002b18:	4944      	ldr	r1, [pc, #272]	; (24002c2c <setEffectsFunctions+0x38c>)
			  effectSetters[i].setParam5 = &compressorParam5;
24002b1a:	4a45      	ldr	r2, [pc, #276]	; (24002c30 <setEffectsFunctions+0x390>)
			  effectSetters[i].setParam3 = &compressorParam3;
24002b1c:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &compressorParam5;
24002b20:	e9c3 1203 	strd	r1, r2, [r3, #12]
			  break;
24002b24:	e6ee      	b.n	24002904 <setEffectsFunctions+0x64>
24002b26:	bf00      	nop
24002b28:	20014200 	.word	0x20014200
24002b2c:	2001cf70 	.word	0x2001cf70
24002b30:	00007621 	.word	0x00007621
24002b34:	200141b0 	.word	0x200141b0
24002b38:	00007061 	.word	0x00007061
24002b3c:	00007321 	.word	0x00007321
24002b40:	000070a1 	.word	0x000070a1
24002b44:	000074e1 	.word	0x000074e1
24002b48:	00007501 	.word	0x00007501
24002b4c:	00007e81 	.word	0x00007e81
24002b50:	000080a1 	.word	0x000080a1
24002b54:	00001a41 	.word	0x00001a41
24002b58:	000082e1 	.word	0x000082e1
24002b5c:	00007e61 	.word	0x00007e61
24002b60:	00008061 	.word	0x00008061
24002b64:	000081a1 	.word	0x000081a1
24002b68:	000082c1 	.word	0x000082c1
24002b6c:	00007e41 	.word	0x00007e41
24002b70:	00008021 	.word	0x00008021
24002b74:	00008161 	.word	0x00008161
24002b78:	000082a1 	.word	0x000082a1
24002b7c:	00007e21 	.word	0x00007e21
24002b80:	00007fe1 	.word	0x00007fe1
24002b84:	00008121 	.word	0x00008121
24002b88:	00008281 	.word	0x00008281
24002b8c:	00007e01 	.word	0x00007e01
24002b90:	00007fa1 	.word	0x00007fa1
24002b94:	000080e1 	.word	0x000080e1
24002b98:	00008261 	.word	0x00008261
24002b9c:	00007de1 	.word	0x00007de1
24002ba0:	00007f61 	.word	0x00007f61
24002ba4:	00008241 	.word	0x00008241
24002ba8:	00007dc1 	.word	0x00007dc1
24002bac:	00007f21 	.word	0x00007f21
24002bb0:	00008221 	.word	0x00008221
24002bb4:	00007da1 	.word	0x00007da1
24002bb8:	00007ee1 	.word	0x00007ee1
24002bbc:	00008201 	.word	0x00008201
24002bc0:	00007d81 	.word	0x00007d81
24002bc4:	00007ea1 	.word	0x00007ea1
24002bc8:	000081e1 	.word	0x000081e1
24002bcc:	24005055 	.word	0x24005055
24002bd0:	00007821 	.word	0x00007821
24002bd4:	00007861 	.word	0x00007861
24002bd8:	000078a1 	.word	0x000078a1
24002bdc:	000078c1 	.word	0x000078c1
24002be0:	000078e1 	.word	0x000078e1
24002be4:	00007a61 	.word	0x00007a61
24002be8:	000070e1 	.word	0x000070e1
24002bec:	00007141 	.word	0x00007141
24002bf0:	000071a1 	.word	0x000071a1
24002bf4:	000071e1 	.word	0x000071e1
24002bf8:	00007d21 	.word	0x00007d21
24002bfc:	00007021 	.word	0x00007021
24002c00:	00007341 	.word	0x00007341
24002c04:	00007541 	.word	0x00007541
24002c08:	00007901 	.word	0x00007901
24002c0c:	00007741 	.word	0x00007741
24002c10:	00007781 	.word	0x00007781
24002c14:	000077a1 	.word	0x000077a1
24002c18:	000077e1 	.word	0x000077e1
24002c1c:	00007d61 	.word	0x00007d61
24002c20:	00007221 	.word	0x00007221
24002c24:	00007241 	.word	0x00007241
24002c28:	00007281 	.word	0x00007281
24002c2c:	000072a1 	.word	0x000072a1
24002c30:	000072e1 	.word	0x000072e1
			  effectTick[i] = &shaperTick;
24002c34:	4b3d      	ldr	r3, [pc, #244]	; (24002d2c <setEffectsFunctions+0x48c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002c36:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &shaperTick;
24002c3a:	4a3d      	ldr	r2, [pc, #244]	; (24002d30 <setEffectsFunctions+0x490>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002c3c:	483d      	ldr	r0, [pc, #244]	; (24002d34 <setEffectsFunctions+0x494>)
			  effectTick[i] = &shaperTick;
24002c3e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
24002c42:	493d      	ldr	r1, [pc, #244]	; (24002d38 <setEffectsFunctions+0x498>)
24002c44:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
24002c48:	4a3c      	ldr	r2, [pc, #240]	; (24002d3c <setEffectsFunctions+0x49c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002c4a:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
24002c4e:	483c      	ldr	r0, [pc, #240]	; (24002d40 <setEffectsFunctions+0x4a0>)
			  effectSetters[i].setParam3 = &param3Linear;
24002c50:	493c      	ldr	r1, [pc, #240]	; (24002d44 <setEffectsFunctions+0x4a4>)
			  effectSetters[i].setParam4 = &blankFunction;
24002c52:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
24002c54:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &param3Linear;
24002c56:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
24002c5a:	e653      	b.n	24002904 <setEffectsFunctions+0x64>
			  effectSetters[i].setParam1 = &clipperGainSet;
24002c5c:	4835      	ldr	r0, [pc, #212]	; (24002d34 <setEffectsFunctions+0x494>)
24002c5e:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &tanhTick;
24002c62:	4b32      	ldr	r3, [pc, #200]	; (24002d2c <setEffectsFunctions+0x48c>)
24002c64:	4a38      	ldr	r2, [pc, #224]	; (24002d48 <setEffectsFunctions+0x4a8>)
24002c66:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
24002c6a:	eb00 038c 	add.w	r3, r0, ip, lsl #2
24002c6e:	4932      	ldr	r1, [pc, #200]	; (24002d38 <setEffectsFunctions+0x498>)
			  effectSetters[i].setParam3 = &blankFunction;
24002c70:	4a32      	ldr	r2, [pc, #200]	; (24002d3c <setEffectsFunctions+0x49c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002c72:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
24002c76:	4932      	ldr	r1, [pc, #200]	; (24002d40 <setEffectsFunctions+0x4a0>)
			  effectSetters[i].setParam3 = &blankFunction;
24002c78:	609a      	str	r2, [r3, #8]
			  effectSetters[i].setParam2 = &offsetParam2;
24002c7a:	6059      	str	r1, [r3, #4]
			  effectSetters[i].setParam5 = &blankFunction;
24002c7c:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
24002c80:	e640      	b.n	24002904 <setEffectsFunctions+0x64>
			  effectSetters[i].setParam1 = &clipperGainSet;
24002c82:	482c      	ldr	r0, [pc, #176]	; (24002d34 <setEffectsFunctions+0x494>)
24002c84:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &satTick;
24002c88:	4b28      	ldr	r3, [pc, #160]	; (24002d2c <setEffectsFunctions+0x48c>)
24002c8a:	4a30      	ldr	r2, [pc, #192]	; (24002d4c <setEffectsFunctions+0x4ac>)
24002c8c:	e7eb      	b.n	24002c66 <setEffectsFunctions+0x3c6>
			  effectTick[i] = &polynomialShaperTick;
24002c8e:	4b27      	ldr	r3, [pc, #156]	; (24002d2c <setEffectsFunctions+0x48c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002c90:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &polynomialShaperTick;
24002c94:	4a2e      	ldr	r2, [pc, #184]	; (24002d50 <setEffectsFunctions+0x4b0>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002c96:	4827      	ldr	r0, [pc, #156]	; (24002d34 <setEffectsFunctions+0x494>)
			  effectTick[i] = &polynomialShaperTick;
24002c98:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
24002c9c:	4926      	ldr	r1, [pc, #152]	; (24002d38 <setEffectsFunctions+0x498>)
24002c9e:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
24002ca2:	4a26      	ldr	r2, [pc, #152]	; (24002d3c <setEffectsFunctions+0x49c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002ca4:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
24002ca8:	4825      	ldr	r0, [pc, #148]	; (24002d40 <setEffectsFunctions+0x4a0>)
			  effectSetters[i].setParam3 = &param3Poly;
24002caa:	492a      	ldr	r1, [pc, #168]	; (24002d54 <setEffectsFunctions+0x4b4>)
			  effectSetters[i].setParam4 = &blankFunction;
24002cac:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
24002cae:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &param3Poly;
24002cb0:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
24002cb4:	e626      	b.n	24002904 <setEffectsFunctions+0x64>
			  effectTick[i] = &hardClipTick;
24002cb6:	4b1d      	ldr	r3, [pc, #116]	; (24002d2c <setEffectsFunctions+0x48c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002cb8:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &hardClipTick;
24002cbc:	4a26      	ldr	r2, [pc, #152]	; (24002d58 <setEffectsFunctions+0x4b8>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002cbe:	481d      	ldr	r0, [pc, #116]	; (24002d34 <setEffectsFunctions+0x494>)
			  effectTick[i] = &hardClipTick;
24002cc0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
24002cc4:	491c      	ldr	r1, [pc, #112]	; (24002d38 <setEffectsFunctions+0x498>)
24002cc6:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
24002cca:	4a1c      	ldr	r2, [pc, #112]	; (24002d3c <setEffectsFunctions+0x49c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002ccc:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
24002cd0:	481b      	ldr	r0, [pc, #108]	; (24002d40 <setEffectsFunctions+0x4a0>)
			  effectSetters[i].setParam3 = &param3Hard;
24002cd2:	4922      	ldr	r1, [pc, #136]	; (24002d5c <setEffectsFunctions+0x4bc>)
			  effectSetters[i].setParam4 = &blankFunction;
24002cd4:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
24002cd6:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &param3Hard;
24002cd8:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
24002cdc:	e612      	b.n	24002904 <setEffectsFunctions+0x64>
			  effectTick[i] = &softClipTick;
24002cde:	4b13      	ldr	r3, [pc, #76]	; (24002d2c <setEffectsFunctions+0x48c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002ce0:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &softClipTick;
24002ce4:	4a1e      	ldr	r2, [pc, #120]	; (24002d60 <setEffectsFunctions+0x4c0>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002ce6:	4813      	ldr	r0, [pc, #76]	; (24002d34 <setEffectsFunctions+0x494>)
			  effectTick[i] = &softClipTick;
24002ce8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
24002cec:	4912      	ldr	r1, [pc, #72]	; (24002d38 <setEffectsFunctions+0x498>)
24002cee:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
24002cf2:	4a12      	ldr	r2, [pc, #72]	; (24002d3c <setEffectsFunctions+0x49c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002cf4:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
24002cf8:	4811      	ldr	r0, [pc, #68]	; (24002d40 <setEffectsFunctions+0x4a0>)
			  effectSetters[i].setParam3 = &param3Soft;
24002cfa:	491a      	ldr	r1, [pc, #104]	; (24002d64 <setEffectsFunctions+0x4c4>)
			  effectSetters[i].setParam4 = &blankFunction;
24002cfc:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
24002cfe:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &param3Soft;
24002d00:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
24002d04:	e5fe      	b.n	24002904 <setEffectsFunctions+0x64>
			  effectSetters[i].setParam1 = &blankFunction;
24002d06:	480d      	ldr	r0, [pc, #52]	; (24002d3c <setEffectsFunctions+0x49c>)
24002d08:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
24002d0c:	4a09      	ldr	r2, [pc, #36]	; (24002d34 <setEffectsFunctions+0x494>)
			  effectTick[i] = &blankTick;
24002d0e:	4c07      	ldr	r4, [pc, #28]	; (24002d2c <setEffectsFunctions+0x48c>)
			  effectSetters[i].setParam1 = &blankFunction;
24002d10:	f842 002c 	str.w	r0, [r2, ip, lsl #2]
24002d14:	eb02 028c 	add.w	r2, r2, ip, lsl #2
			  effectSetters[i].setParam3 = &blankFunction;
24002d18:	e9c2 0001 	strd	r0, r0, [r2, #4]
			  effectSetters[i].setParam5 = &blankFunction;
24002d1c:	e9c2 0003 	strd	r0, r0, [r2, #12]
			  effectsActive[i] = 0;
24002d20:	2200      	movs	r2, #0
24002d22:	545a      	strb	r2, [r3, r1]
			  effectTick[i] = &blankTick;
24002d24:	4b10      	ldr	r3, [pc, #64]	; (24002d68 <setEffectsFunctions+0x4c8>)
24002d26:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
			  break;
24002d2a:	e5eb      	b.n	24002904 <setEffectsFunctions+0x64>
24002d2c:	2001cf70 	.word	0x2001cf70
24002d30:	000079e1 	.word	0x000079e1
24002d34:	200141b0 	.word	0x200141b0
24002d38:	00007021 	.word	0x00007021
24002d3c:	00001a41 	.word	0x00001a41
24002d40:	00007321 	.word	0x00007321
24002d44:	00007361 	.word	0x00007361
24002d48:	00007aa1 	.word	0x00007aa1
24002d4c:	00007ca1 	.word	0x00007ca1
24002d50:	00007c01 	.word	0x00007c01
24002d54:	00007461 	.word	0x00007461
24002d58:	00007b61 	.word	0x00007b61
24002d5c:	000073e1 	.word	0x000073e1
24002d60:	00007b01 	.word	0x00007b01
24002d64:	00007381 	.word	0x00007381
24002d68:	00007a41 	.word	0x00007a41

24002d6c <setFilterTypes>:
		  default:
			  break;
	}
}
void setFilterTypes(int filterType, int i)
{
24002d6c:	b410      	push	{r4}
	switch (filterType)
24002d6e:	2808      	cmp	r0, #8
24002d70:	d812      	bhi.n	24002d98 <setFilterTypes+0x2c>
24002d72:	e8df f000 	tbb	[pc, r0]
24002d76:	3223      	.short	0x3223
24002d78:	6e5f5041 	.word	0x6e5f5041
24002d7c:	057d      	.short	0x057d
24002d7e:	14          	.byte	0x14
24002d7f:	00          	.byte	0x00
				  filterSetters[i].setQ = &VZhighshelfSetQ;
				  filterSetters[i].setGain = &VZhighshelfSetGain;
				  break;
			  case 7:
				  filterTick[i] = &VZbandrejectTick;
				  filterSetters[i].setQ = &VZbandrejectSetQ;
24002d80:	4b43      	ldr	r3, [pc, #268]	; (24002e90 <setFilterTypes+0x124>)
				  filterTick[i] = &VZbandrejectTick;
24002d82:	4a44      	ldr	r2, [pc, #272]	; (24002e94 <setFilterTypes+0x128>)
24002d84:	4844      	ldr	r0, [pc, #272]	; (24002e98 <setFilterTypes+0x12c>)
				  filterSetters[i].setQ = &VZbandrejectSetQ;
24002d86:	4c45      	ldr	r4, [pc, #276]	; (24002e9c <setFilterTypes+0x130>)
				  filterTick[i] = &VZbandrejectTick;
24002d88:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
24002d8c:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002d90:	4843      	ldr	r0, [pc, #268]	; (24002ea0 <setFilterTypes+0x134>)
				  filterSetters[i].setQ = &VZbandrejectSetQ;
24002d92:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
24002d96:	6050      	str	r0, [r2, #4]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
				  break;
			  default:
				  break;
		}
}
24002d98:	f85d 4b04 	ldr.w	r4, [sp], #4
24002d9c:	4770      	bx	lr
				  filterSetters[i].setQ = &LadderLowpassSetQ;
24002d9e:	4b3c      	ldr	r3, [pc, #240]	; (24002e90 <setFilterTypes+0x124>)
				  filterTick[i] = &LadderLowpassTick;
24002da0:	4a3c      	ldr	r2, [pc, #240]	; (24002e94 <setFilterTypes+0x128>)
24002da2:	4840      	ldr	r0, [pc, #256]	; (24002ea4 <setFilterTypes+0x138>)
				  filterSetters[i].setQ = &LadderLowpassSetQ;
24002da4:	4c40      	ldr	r4, [pc, #256]	; (24002ea8 <setFilterTypes+0x13c>)
				  filterTick[i] = &LadderLowpassTick;
24002da6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
24002daa:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002dae:	483f      	ldr	r0, [pc, #252]	; (24002eac <setFilterTypes+0x140>)
				  filterSetters[i].setQ = &LadderLowpassSetQ;
24002db0:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
24002db4:	6050      	str	r0, [r2, #4]
}
24002db6:	f85d 4b04 	ldr.w	r4, [sp], #4
24002dba:	4770      	bx	lr
				  filterSetters[i].setQ = &lowpassSetQ;
24002dbc:	4b34      	ldr	r3, [pc, #208]	; (24002e90 <setFilterTypes+0x124>)
				  filterTick[i] = &lowpassTick;
24002dbe:	4a35      	ldr	r2, [pc, #212]	; (24002e94 <setFilterTypes+0x128>)
24002dc0:	483b      	ldr	r0, [pc, #236]	; (24002eb0 <setFilterTypes+0x144>)
				  filterSetters[i].setQ = &lowpassSetQ;
24002dc2:	4c3c      	ldr	r4, [pc, #240]	; (24002eb4 <setFilterTypes+0x148>)
				  filterTick[i] = &lowpassTick;
24002dc4:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &lowpassSetGain;
24002dc8:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002dcc:	483a      	ldr	r0, [pc, #232]	; (24002eb8 <setFilterTypes+0x14c>)
				  filterSetters[i].setQ = &lowpassSetQ;
24002dce:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &lowpassSetGain;
24002dd2:	6050      	str	r0, [r2, #4]
}
24002dd4:	f85d 4b04 	ldr.w	r4, [sp], #4
24002dd8:	4770      	bx	lr
				  filterSetters[i].setQ = &highpassSetQ;
24002dda:	4b2d      	ldr	r3, [pc, #180]	; (24002e90 <setFilterTypes+0x124>)
				  filterTick[i] = &highpassTick;
24002ddc:	4a2d      	ldr	r2, [pc, #180]	; (24002e94 <setFilterTypes+0x128>)
24002dde:	4837      	ldr	r0, [pc, #220]	; (24002ebc <setFilterTypes+0x150>)
				  filterSetters[i].setQ = &highpassSetQ;
24002de0:	4c37      	ldr	r4, [pc, #220]	; (24002ec0 <setFilterTypes+0x154>)
				  filterTick[i] = &highpassTick;
24002de2:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &highpassSetGain;
24002de6:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002dea:	4836      	ldr	r0, [pc, #216]	; (24002ec4 <setFilterTypes+0x158>)
				  filterSetters[i].setQ = &highpassSetQ;
24002dec:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &highpassSetGain;
24002df0:	6050      	str	r0, [r2, #4]
}
24002df2:	f85d 4b04 	ldr.w	r4, [sp], #4
24002df6:	4770      	bx	lr
				  filterSetters[i].setQ = &bandpassSetQ;
24002df8:	4b25      	ldr	r3, [pc, #148]	; (24002e90 <setFilterTypes+0x124>)
				  filterTick[i] = &bandpassTick;
24002dfa:	4a26      	ldr	r2, [pc, #152]	; (24002e94 <setFilterTypes+0x128>)
24002dfc:	4832      	ldr	r0, [pc, #200]	; (24002ec8 <setFilterTypes+0x15c>)
				  filterSetters[i].setQ = &bandpassSetQ;
24002dfe:	4c33      	ldr	r4, [pc, #204]	; (24002ecc <setFilterTypes+0x160>)
				  filterTick[i] = &bandpassTick;
24002e00:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &bandpassSetGain;
24002e04:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002e08:	4831      	ldr	r0, [pc, #196]	; (24002ed0 <setFilterTypes+0x164>)
				  filterSetters[i].setQ = &bandpassSetQ;
24002e0a:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &bandpassSetGain;
24002e0e:	6050      	str	r0, [r2, #4]
}
24002e10:	f85d 4b04 	ldr.w	r4, [sp], #4
24002e14:	4770      	bx	lr
				  filterSetters[i].setQ = &diodeLowpassSetQ;
24002e16:	4b1e      	ldr	r3, [pc, #120]	; (24002e90 <setFilterTypes+0x124>)
				  filterTick[i] = &diodeLowpassTick;
24002e18:	4a1e      	ldr	r2, [pc, #120]	; (24002e94 <setFilterTypes+0x128>)
24002e1a:	482e      	ldr	r0, [pc, #184]	; (24002ed4 <setFilterTypes+0x168>)
				  filterSetters[i].setQ = &diodeLowpassSetQ;
24002e1c:	4c2e      	ldr	r4, [pc, #184]	; (24002ed8 <setFilterTypes+0x16c>)
				  filterTick[i] = &diodeLowpassTick;
24002e1e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
24002e22:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002e26:	482d      	ldr	r0, [pc, #180]	; (24002edc <setFilterTypes+0x170>)
				  filterSetters[i].setQ = &diodeLowpassSetQ;
24002e28:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
24002e2c:	6050      	str	r0, [r2, #4]
}
24002e2e:	f85d 4b04 	ldr.w	r4, [sp], #4
24002e32:	4770      	bx	lr
				  filterSetters[i].setQ = &VZpeakSetQ;
24002e34:	4b16      	ldr	r3, [pc, #88]	; (24002e90 <setFilterTypes+0x124>)
				  filterTick[i] = &VZpeakTick;
24002e36:	4a17      	ldr	r2, [pc, #92]	; (24002e94 <setFilterTypes+0x128>)
24002e38:	4829      	ldr	r0, [pc, #164]	; (24002ee0 <setFilterTypes+0x174>)
				  filterSetters[i].setQ = &VZpeakSetQ;
24002e3a:	4c2a      	ldr	r4, [pc, #168]	; (24002ee4 <setFilterTypes+0x178>)
				  filterTick[i] = &VZpeakTick;
24002e3c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZpeakSetGain;
24002e40:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002e44:	4828      	ldr	r0, [pc, #160]	; (24002ee8 <setFilterTypes+0x17c>)
				  filterSetters[i].setQ = &VZpeakSetQ;
24002e46:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZpeakSetGain;
24002e4a:	6050      	str	r0, [r2, #4]
}
24002e4c:	f85d 4b04 	ldr.w	r4, [sp], #4
24002e50:	4770      	bx	lr
				  filterSetters[i].setQ = &VZlowshelfSetQ;
24002e52:	4b0f      	ldr	r3, [pc, #60]	; (24002e90 <setFilterTypes+0x124>)
				  filterTick[i] = &VZlowshelfTick;
24002e54:	4a0f      	ldr	r2, [pc, #60]	; (24002e94 <setFilterTypes+0x128>)
24002e56:	4825      	ldr	r0, [pc, #148]	; (24002eec <setFilterTypes+0x180>)
				  filterSetters[i].setQ = &VZlowshelfSetQ;
24002e58:	4c25      	ldr	r4, [pc, #148]	; (24002ef0 <setFilterTypes+0x184>)
				  filterTick[i] = &VZlowshelfTick;
24002e5a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
24002e5e:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002e62:	4824      	ldr	r0, [pc, #144]	; (24002ef4 <setFilterTypes+0x188>)
				  filterSetters[i].setQ = &VZlowshelfSetQ;
24002e64:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
24002e68:	6050      	str	r0, [r2, #4]
}
24002e6a:	f85d 4b04 	ldr.w	r4, [sp], #4
24002e6e:	4770      	bx	lr
				  filterSetters[i].setQ = &VZhighshelfSetQ;
24002e70:	4b07      	ldr	r3, [pc, #28]	; (24002e90 <setFilterTypes+0x124>)
				  filterTick[i] = &VZhighshelfTick;
24002e72:	4a08      	ldr	r2, [pc, #32]	; (24002e94 <setFilterTypes+0x128>)
24002e74:	4820      	ldr	r0, [pc, #128]	; (24002ef8 <setFilterTypes+0x18c>)
				  filterSetters[i].setQ = &VZhighshelfSetQ;
24002e76:	4c21      	ldr	r4, [pc, #132]	; (24002efc <setFilterTypes+0x190>)
				  filterTick[i] = &VZhighshelfTick;
24002e78:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
24002e7c:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002e80:	481f      	ldr	r0, [pc, #124]	; (24002f00 <setFilterTypes+0x194>)
				  filterSetters[i].setQ = &VZhighshelfSetQ;
24002e82:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
24002e86:	6050      	str	r0, [r2, #4]
}
24002e88:	f85d 4b04 	ldr.w	r4, [sp], #4
24002e8c:	4770      	bx	lr
24002e8e:	bf00      	nop
24002e90:	20016204 	.word	0x20016204
24002e94:	2001cfe4 	.word	0x2001cfe4
24002e98:	00006421 	.word	0x00006421
24002e9c:	000066a1 	.word	0x000066a1
24002ea0:	000068a1 	.word	0x000068a1
24002ea4:	00006481 	.word	0x00006481
24002ea8:	000066c1 	.word	0x000066c1
24002eac:	000068e1 	.word	0x000068e1
24002eb0:	000061e1 	.word	0x000061e1
24002eb4:	000065c1 	.word	0x000065c1
24002eb8:	000066e1 	.word	0x000066e1
24002ebc:	00006241 	.word	0x00006241
24002ec0:	000065e1 	.word	0x000065e1
24002ec4:	00006721 	.word	0x00006721
24002ec8:	000062a1 	.word	0x000062a1
24002ecc:	00006601 	.word	0x00006601
24002ed0:	00006761 	.word	0x00006761
24002ed4:	00006301 	.word	0x00006301
24002ed8:	00006621 	.word	0x00006621
24002edc:	000067a1 	.word	0x000067a1
24002ee0:	00006361 	.word	0x00006361
24002ee4:	00006641 	.word	0x00006641
24002ee8:	000067e1 	.word	0x000067e1
24002eec:	000063a1 	.word	0x000063a1
24002ef0:	00006661 	.word	0x00006661
24002ef4:	00006821 	.word	0x00006821
24002ef8:	000063e1 	.word	0x000063e1
24002efc:	00006681 	.word	0x00006681
24002f00:	00006861 	.word	0x00006861

24002f04 <setLFOShapes>:

void setLFOShapes(int LFOShape, int i)
{
24002f04:	b410      	push	{r4}
	switch(LFOShape)
24002f06:	2805      	cmp	r0, #5
24002f08:	d814      	bhi.n	24002f34 <setLFOShapes+0x30>
24002f0a:	e8df f000 	tbb	[pc, r0]
24002f0e:	3c29      	.short	0x3c29
24002f10:	1603624f 	.word	0x1603624f
			lfoSetters[i].setRate = &lfoTriSetRate;
			lfoSetters[i].setShape = &lfoTriSetShape;
			lfoSetters[i].setPhase = &lfoTriSetPhase;
			break;
		case SawLFOShapeSet:
			lfoShapeTick[i] = &lfoSawTick;
24002f14:	4b38      	ldr	r3, [pc, #224]	; (24002ff8 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSawSetRate;
24002f16:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSawTick;
24002f1a:	4c38      	ldr	r4, [pc, #224]	; (24002ffc <setLFOShapes+0xf8>)
			lfoSetters[i].setRate = &lfoSawSetRate;
24002f1c:	4a38      	ldr	r2, [pc, #224]	; (24003000 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSawTick;
24002f1e:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSawSetRate;
24002f22:	4c38      	ldr	r4, [pc, #224]	; (24003004 <setLFOShapes+0x100>)
24002f24:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSawSetShape;
24002f28:	4937      	ldr	r1, [pc, #220]	; (24003008 <setLFOShapes+0x104>)
			lfoSetters[i].setRate = &lfoSawSetRate;
24002f2a:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSawSetPhase;
24002f2e:	4a37      	ldr	r2, [pc, #220]	; (2400300c <setLFOShapes+0x108>)
24002f30:	e9c3 1201 	strd	r1, r2, [r3, #4]
			lfoSetters[i].setRate = &lfoPulseSetRate;
			lfoSetters[i].setShape = &lfoPulseSetShape;
			lfoSetters[i].setPhase = &lfoPulseSetPhase;
			break;
	}
}
24002f34:	f85d 4b04 	ldr.w	r4, [sp], #4
24002f38:	4770      	bx	lr
			lfoShapeTick[i] = &lfoPulseTick;
24002f3a:	4b2f      	ldr	r3, [pc, #188]	; (24002ff8 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoPulseSetRate;
24002f3c:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoPulseTick;
24002f40:	4c33      	ldr	r4, [pc, #204]	; (24003010 <setLFOShapes+0x10c>)
			lfoSetters[i].setRate = &lfoPulseSetRate;
24002f42:	4a2f      	ldr	r2, [pc, #188]	; (24003000 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoPulseTick;
24002f44:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoPulseSetRate;
24002f48:	4c32      	ldr	r4, [pc, #200]	; (24003014 <setLFOShapes+0x110>)
24002f4a:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoPulseSetShape;
24002f4e:	4932      	ldr	r1, [pc, #200]	; (24003018 <setLFOShapes+0x114>)
			lfoSetters[i].setRate = &lfoPulseSetRate;
24002f50:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoPulseSetPhase;
24002f54:	4a31      	ldr	r2, [pc, #196]	; (2400301c <setLFOShapes+0x118>)
24002f56:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
24002f5a:	f85d 4b04 	ldr.w	r4, [sp], #4
24002f5e:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSineTriTick;
24002f60:	4b25      	ldr	r3, [pc, #148]	; (24002ff8 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSineTriSetRate;
24002f62:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSineTriTick;
24002f66:	4c2e      	ldr	r4, [pc, #184]	; (24003020 <setLFOShapes+0x11c>)
			lfoSetters[i].setRate = &lfoSineTriSetRate;
24002f68:	4a25      	ldr	r2, [pc, #148]	; (24003000 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSineTriTick;
24002f6a:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSineTriSetRate;
24002f6e:	4c2d      	ldr	r4, [pc, #180]	; (24003024 <setLFOShapes+0x120>)
24002f70:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSineTriSetShape;
24002f74:	492c      	ldr	r1, [pc, #176]	; (24003028 <setLFOShapes+0x124>)
			lfoSetters[i].setRate = &lfoSineTriSetRate;
24002f76:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSineTriSetPhase;
24002f7a:	4a2c      	ldr	r2, [pc, #176]	; (2400302c <setLFOShapes+0x128>)
24002f7c:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
24002f80:	f85d 4b04 	ldr.w	r4, [sp], #4
24002f84:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSawSquareTick;
24002f86:	4b1c      	ldr	r3, [pc, #112]	; (24002ff8 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
24002f88:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSawSquareTick;
24002f8c:	4c28      	ldr	r4, [pc, #160]	; (24003030 <setLFOShapes+0x12c>)
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
24002f8e:	4a1c      	ldr	r2, [pc, #112]	; (24003000 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSawSquareTick;
24002f90:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
24002f94:	4c27      	ldr	r4, [pc, #156]	; (24003034 <setLFOShapes+0x130>)
24002f96:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSawSquareSetShape;
24002f9a:	4927      	ldr	r1, [pc, #156]	; (24003038 <setLFOShapes+0x134>)
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
24002f9c:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
24002fa0:	4a26      	ldr	r2, [pc, #152]	; (2400303c <setLFOShapes+0x138>)
24002fa2:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
24002fa6:	f85d 4b04 	ldr.w	r4, [sp], #4
24002faa:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSineTick;
24002fac:	4b12      	ldr	r3, [pc, #72]	; (24002ff8 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSineSetRate;
24002fae:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSineTick;
24002fb2:	4c23      	ldr	r4, [pc, #140]	; (24003040 <setLFOShapes+0x13c>)
			lfoSetters[i].setRate = &lfoSineSetRate;
24002fb4:	4a12      	ldr	r2, [pc, #72]	; (24003000 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSineTick;
24002fb6:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSineSetRate;
24002fba:	4c22      	ldr	r4, [pc, #136]	; (24003044 <setLFOShapes+0x140>)
24002fbc:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSineSetShape;
24002fc0:	4921      	ldr	r1, [pc, #132]	; (24003048 <setLFOShapes+0x144>)
			lfoSetters[i].setRate = &lfoSineSetRate;
24002fc2:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSineSetPhase;
24002fc6:	4a21      	ldr	r2, [pc, #132]	; (2400304c <setLFOShapes+0x148>)
24002fc8:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
24002fcc:	f85d 4b04 	ldr.w	r4, [sp], #4
24002fd0:	4770      	bx	lr
			lfoShapeTick[i] = &lfoTriTick;
24002fd2:	4b09      	ldr	r3, [pc, #36]	; (24002ff8 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoTriSetRate;
24002fd4:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoTriTick;
24002fd8:	4c1d      	ldr	r4, [pc, #116]	; (24003050 <setLFOShapes+0x14c>)
			lfoSetters[i].setRate = &lfoTriSetRate;
24002fda:	4a09      	ldr	r2, [pc, #36]	; (24003000 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoTriTick;
24002fdc:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoTriSetRate;
24002fe0:	4c1c      	ldr	r4, [pc, #112]	; (24003054 <setLFOShapes+0x150>)
24002fe2:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoTriSetShape;
24002fe6:	491c      	ldr	r1, [pc, #112]	; (24003058 <setLFOShapes+0x154>)
			lfoSetters[i].setRate = &lfoTriSetRate;
24002fe8:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoTriSetPhase;
24002fec:	4a1b      	ldr	r2, [pc, #108]	; (2400305c <setLFOShapes+0x158>)
24002fee:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
24002ff2:	f85d 4b04 	ldr.w	r4, [sp], #4
24002ff6:	4770      	bx	lr
24002ff8:	2001d168 	.word	0x2001d168
24002ffc:	00006d81 	.word	0x00006d81
24003000:	20018330 	.word	0x20018330
24003004:	00006e61 	.word	0x00006e61
24003008:	00006fe1 	.word	0x00006fe1
2400300c:	00006f21 	.word	0x00006f21
24003010:	00006dc1 	.word	0x00006dc1
24003014:	00006e81 	.word	0x00006e81
24003018:	00007001 	.word	0x00007001
2400301c:	00006f41 	.word	0x00006f41
24003020:	00006d21 	.word	0x00006d21
24003024:	00006e01 	.word	0x00006e01
24003028:	00006f81 	.word	0x00006f81
2400302c:	00006ec1 	.word	0x00006ec1
24003030:	00006d01 	.word	0x00006d01
24003034:	00006de1 	.word	0x00006de1
24003038:	00006f61 	.word	0x00006f61
2400303c:	00006ea1 	.word	0x00006ea1
24003040:	00006d41 	.word	0x00006d41
24003044:	00006e21 	.word	0x00006e21
24003048:	00006fa1 	.word	0x00006fa1
2400304c:	00006ee1 	.word	0x00006ee1
24003050:	00006d61 	.word	0x00006d61
24003054:	00006e41 	.word	0x00006e41
24003058:	00006fc1 	.word	0x00006fc1
2400305c:	00006f01 	.word	0x00006f01

24003060 <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
24003060:	4bd1      	ldr	r3, [pc, #836]	; (240033a8 <main+0x348>)
{
24003062:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24003066:	ed2d 8b02 	vpush	{d8}
2400306a:	695a      	ldr	r2, [r3, #20]
2400306c:	b091      	sub	sp, #68	; 0x44
2400306e:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
24003072:	d111      	bne.n	24003098 <main+0x38>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
24003074:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24003078:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
2400307c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
24003080:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24003084:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
24003088:	695a      	ldr	r2, [r3, #20]
2400308a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
2400308e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
24003090:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24003094:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
24003098:	48c3      	ldr	r0, [pc, #780]	; (240033a8 <main+0x348>)
2400309a:	6943      	ldr	r3, [r0, #20]
2400309c:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
240030a0:	d124      	bne.n	240030ec <main+0x8c>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
240030a2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
240030a6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
240030aa:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
240030ae:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
240030b2:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
240030b6:	f3c5 05c9 	ubfx	r5, r5, #3, #10
240030ba:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
240030bc:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
240030c0:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
240030c2:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
240030c6:	3b01      	subs	r3, #1
240030c8:	1c5f      	adds	r7, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
240030ca:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
240030ce:	d1f8      	bne.n	240030c2 <main+0x62>
    } while(sets-- != 0U);
240030d0:	3c20      	subs	r4, #32
240030d2:	f114 0f20 	cmn.w	r4, #32
240030d6:	d1f1      	bne.n	240030bc <main+0x5c>
240030d8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
240030dc:	6943      	ldr	r3, [r0, #20]
240030de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
240030e2:	6143      	str	r3, [r0, #20]
240030e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
240030e8:	f3bf 8f6f 	isb	sy

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
240030ec:	2400      	movs	r4, #0
  HAL_Init();
240030ee:	f002 f891 	bl	24005214 <HAL_Init>
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
240030f2:	2501      	movs	r5, #1

  HAL_MPU_ConfigRegion(&MPU_InitStruct);

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
240030f4:	2704      	movs	r7, #4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
240030f6:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
240030fa:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_MPU_Disable();
240030fe:	f002 f957 	bl	240053b0 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
24003102:	f248 721f 	movw	r2, #34591	; 0x871f
24003106:	f240 1301 	movw	r3, #257	; 0x101
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
2400310a:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
2400310c:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
24003110:	930e      	str	r3, [sp, #56]	; 0x38
24003112:	e9cd 420c 	strd	r4, r2, [sp, #48]	; 0x30
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003116:	f002 f969 	bl	240053ec <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x024000000;
2400311a:	f04f 5210 	mov.w	r2, #603979776	; 0x24000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
2400311e:	4ba3      	ldr	r3, [pc, #652]	; (240033ac <main+0x34c>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003120:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
24003122:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
24003126:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
2400312a:	4ba1      	ldr	r3, [pc, #644]	; (240033b0 <main+0x350>)
2400312c:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
2400312e:	f002 f95d 	bl	240053ec <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
24003132:	2202      	movs	r2, #2
  MPU_InitStruct.BaseAddress = 0x24040000;
24003134:	4b9f      	ldr	r3, [pc, #636]	; (240033b4 <main+0x354>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003136:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
24003138:	f88d 5038 	strb.w	r5, [sp, #56]	; 0x38
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
2400313c:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
  MPU_InitStruct.BaseAddress = 0x24040000;
24003140:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003142:	f002 f953 	bl	240053ec <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
24003146:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003148:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
2400314a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
  MPU_InitStruct.BaseAddress = 0x30000000;
2400314e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
24003152:	930c      	str	r3, [sp, #48]	; 0x30
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
24003154:	2312      	movs	r3, #18
24003156:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
2400315a:	f002 f947 	bl	240053ec <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
2400315e:	230c      	movs	r3, #12
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003160:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
24003162:	f88d 702d 	strb.w	r7, [sp, #45]	; 0x2d
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
24003166:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
2400316a:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
2400316e:	f8ad 5039 	strh.w	r5, [sp, #57]	; 0x39
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
24003172:	f88d 403b 	strb.w	r4, [sp, #59]	; 0x3b
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003176:	f002 f939 	bl	240053ec <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
  MPU_InitStruct.BaseAddress = 0x38000000;
2400317a:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
2400317e:	2205      	movs	r2, #5
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003180:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.BaseAddress = 0x38000000;
24003182:	930c      	str	r3, [sp, #48]	; 0x30
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
24003184:	230f      	movs	r3, #15
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
24003186:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
2400318a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
2400318e:	f002 f92d 	bl	240053ec <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER6;
  MPU_InitStruct.BaseAddress = 0x38800000;
24003192:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
  MPU_InitStruct.Number = MPU_REGION_NUMBER6;
24003196:	2206      	movs	r2, #6
  MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003198:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.BaseAddress = 0x38800000;
2400319a:	930c      	str	r3, [sp, #48]	; 0x30
  MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
2400319c:	230b      	movs	r3, #11
  MPU_InitStruct.Number = MPU_REGION_NUMBER6;
2400319e:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
  MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
240031a2:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240031a6:	f002 f921 	bl	240053ec <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER7;
  MPU_InitStruct.BaseAddress = 0xc0000000;
240031aa:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER7;
240031ae:	2207      	movs	r2, #7
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240031b0:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.BaseAddress = 0xc0000000;
240031b2:	930c      	str	r3, [sp, #48]	; 0x30
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
240031b4:	2319      	movs	r3, #25
  MPU_InitStruct.Number = MPU_REGION_NUMBER7;
240031b6:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
240031ba:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240031be:	f002 f915 	bl	240053ec <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER8;
240031c2:	2208      	movs	r2, #8
  MPU_InitStruct.BaseAddress = 0x90040000;
240031c4:	4b7c      	ldr	r3, [pc, #496]	; (240033b8 <main+0x358>)

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240031c6:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.Number = MPU_REGION_NUMBER8;
240031c8:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
  MPU_InitStruct.BaseAddress = 0x90040000;
240031cc:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240031ce:	f002 f90d 	bl	240053ec <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
240031d2:	4638      	mov	r0, r7
240031d4:	f002 f8fa 	bl	240053cc <HAL_MPU_Enable>
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
240031d8:	b662      	cpsie	i
  SystemClock_Config();
240031da:	f7fe ff47 	bl	2400206c <SystemClock_Config>
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
240031de:	f8df 8244 	ldr.w	r8, [pc, #580]	; 24003424 <main+0x3c4>
  PeriphCommonClock_Config();
240031e2:	f7fe ffc5 	bl	24002170 <PeriphCommonClock_Config>
  MX_GPIO_Init();
240031e6:	f7fe fc47 	bl	24001a78 <MX_GPIO_Init>
  MX_DMA_Init();
240031ea:	f7fe fb55 	bl	24001898 <MX_DMA_Init>
  MX_BDMA_Init();
240031ee:	f7fe fa87 	bl	24001700 <MX_BDMA_Init>
  MX_I2C2_Init();
240031f2:	f7fe fdf1 	bl	24001dd8 <MX_I2C2_Init>
  MX_SAI1_Init();
240031f6:	f000 fe3f 	bl	24003e78 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
240031fa:	f000 ff3f 	bl	2400407c <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
240031fe:	f000 ffa7 	bl	24004150 <MX_SPI1_Init>
  MX_I2C1_Init();
24003202:	f7fe fda9 	bl	24001d58 <MX_I2C1_Init>
  MX_FMC_Init();
24003206:	f7fe fb93 	bl	24001930 <MX_FMC_Init>
  MX_FATFS_Init();
2400320a:	f00a fbe9 	bl	2400d9e0 <MX_FATFS_Init>
  MX_SPI6_Init();
2400320e:	f000 ffcb 	bl	240041a8 <MX_SPI6_Init>
  MX_RNG_Init();
24003212:	f000 fdf1 	bl	24003df8 <MX_RNG_Init>
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
24003216:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400321a:	4868      	ldr	r0, [pc, #416]	; (240033bc <main+0x35c>)
2400321c:	f004 f858 	bl	240072d0 <HAL_GPIO_ReadPin>
	int bit1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
24003220:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
24003224:	4606      	mov	r6, r0
	int bit1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
24003226:	4865      	ldr	r0, [pc, #404]	; (240033bc <main+0x35c>)
24003228:	f004 f852 	bl	240072d0 <HAL_GPIO_ReadPin>
2400322c:	4604      	mov	r4, r0
	int bit2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
2400322e:	4639      	mov	r1, r7
24003230:	4863      	ldr	r0, [pc, #396]	; (240033c0 <main+0x360>)
24003232:	f004 f84d 	bl	240072d0 <HAL_GPIO_ReadPin>
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
24003236:	00a3      	lsls	r3, r4, #2
24003238:	eb03 0346 	add.w	r3, r3, r6, lsl #1
2400323c:	4418      	add	r0, r3
2400323e:	b2c4      	uxtb	r4, r0
24003240:	f888 4000 	strb.w	r4, [r8]
	if (boardNumber == 0)
24003244:	2c00      	cmp	r4, #0
24003246:	f000 8591 	beq.w	24003d6c <main+0xd0c>
	HAL_Delay(500);
2400324a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
2400324e:	f002 f823 	bl	24005298 <HAL_Delay>
    if (boardNumber !=0)
24003252:	f898 3000 	ldrb.w	r3, [r8]
24003256:	2b00      	cmp	r3, #0
24003258:	f040 8580 	bne.w	24003d5c <main+0xcfc>
   PWR->CR1 |= PWR_CR1_DBP;
2400325c:	4a59      	ldr	r2, [pc, #356]	; (240033c4 <main+0x364>)
2400325e:	6813      	ldr	r3, [r2, #0]
24003260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24003264:	6013      	str	r3, [r2, #0]
   while((PWR->CR1 & PWR_CR1_DBP) == RESET)
24003266:	6813      	ldr	r3, [r2, #0]
24003268:	05d9      	lsls	r1, r3, #23
2400326a:	d5fc      	bpl.n	24003266 <main+0x206>
   __HAL_RCC_BKPRAM_CLK_ENABLE();
2400326c:	4b56      	ldr	r3, [pc, #344]	; (240033c8 <main+0x368>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
2400326e:	2200      	movs	r2, #0
24003270:	2180      	movs	r1, #128	; 0x80
   __HAL_RCC_BKPRAM_CLK_ENABLE();
24003272:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
24003276:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
2400327a:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
2400327e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
24003282:	4852      	ldr	r0, [pc, #328]	; (240033cc <main+0x36c>)
   __HAL_RCC_BKPRAM_CLK_ENABLE();
24003284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
24003288:	9306      	str	r3, [sp, #24]
2400328a:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
2400328c:	f004 f826 	bl	240072dc <HAL_GPIO_WritePin>
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_get_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  return __builtin_arm_get_fpscr();
24003290:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register  // this makes checking for denormals not necessary as they are automatically set to zero by the hardware
24003294:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
24003298:	eee1 3a10 	vmsr	fpscr, r3
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
2400329c:	4942      	ldr	r1, [pc, #264]	; (240033a8 <main+0x348>)
  if ((*(uint32_t*)0xE0001FB4) & 1)
2400329e:	4a4c      	ldr	r2, [pc, #304]	; (240033d0 <main+0x370>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
240032a0:	f8d1 30fc 	ldr.w	r3, [r1, #252]	; 0xfc
240032a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
240032a8:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
240032ac:	f8d2 3fb4 	ldr.w	r3, [r2, #4020]	; 0xfb4
240032b0:	07db      	lsls	r3, r3, #31
240032b2:	d502      	bpl.n	240032ba <main+0x25a>
    *(uint32_t*)0xE0001FB0 = 0xC5ACCE55;
240032b4:	4b47      	ldr	r3, [pc, #284]	; (240033d4 <main+0x374>)
240032b6:	f8c2 3fb0 	str.w	r3, [r2, #4016]	; 0xfb0
  DWT->CYCCNT = 0;
240032ba:	4b45      	ldr	r3, [pc, #276]	; (240033d0 <main+0x370>)
240032bc:	2100      	movs	r1, #0
  DWT->CTRL = 0x40000001;
240032be:	4a46      	ldr	r2, [pc, #280]	; (240033d8 <main+0x378>)
	  buffer[i] = 0;
240032c0:	4c46      	ldr	r4, [pc, #280]	; (240033dc <main+0x37c>)
  DWT->CYCCNT = 0;
240032c2:	6059      	str	r1, [r3, #4]
	  SPI_PLUCK_TX[i] = 0;
240032c4:	4846      	ldr	r0, [pc, #280]	; (240033e0 <main+0x380>)
  DWT->CTRL = 0x40000001;
240032c6:	601a      	str	r2, [r3, #0]
	  SPI_PLUCK_TX[i] = 0;
240032c8:	2240      	movs	r2, #64	; 0x40
240032ca:	f016 fa2b 	bl	24019724 <memset>
	  buffer[i] = 0;
240032ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
240032d2:	2100      	movs	r1, #0
240032d4:	4620      	mov	r0, r4
240032d6:	f016 fa25 	bl	24019724 <memset>
  buffer[15+112] = NUM_PARAMS;
240032da:	239c      	movs	r3, #156	; 0x9c
  buffer[NUM_PARAMS*2+16+112] = 0xef;
240032dc:	f64e 72ef 	movw	r2, #61423	; 0xefef
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
240032e0:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
  buffer[15+112] = NUM_PARAMS;
240032e4:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
  buffer[NUM_PARAMS*2+19+112] = 1;
240032e8:	2301      	movs	r3, #1
  buffer[NUM_PARAMS*2+16+112] = 0xef;
240032ea:	f8a4 21b8 	strh.w	r2, [r4, #440]	; 0x1b8
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
240032ee:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
  buffer[NUM_PARAMS*2+19+112] = 1;
240032f2:	f884 31bb 	strb.w	r3, [r4, #443]	; 0x1bb
  buffer[NUM_PARAMS*2+25+112] = 0xfe;
240032f6:	f64f 63fe 	movw	r3, #65278	; 0xfefe
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
240032fa:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 240033e4 <main+0x384>
240032fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
  buffer[NUM_PARAMS*2+25+112] = 0xfe;
24003302:	f8a4 31c1 	strh.w	r3, [r4, #449]	; 0x1c1
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
24003306:	2403      	movs	r4, #3
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
24003308:	4837      	ldr	r0, [pc, #220]	; (240033e8 <main+0x388>)
2400330a:	f011 fd49 	bl	24014da0 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(envTimeTable, 0.0f, 20000.0f, 4000.0f, SCALE_TABLE_SIZE);
2400330e:	f44f 6100 	mov.w	r1, #2048	; 0x800
24003312:	ed9f 1a36 	vldr	s2, [pc, #216]	; 240033ec <main+0x38c>
24003316:	eddf 0a36 	vldr	s1, [pc, #216]	; 240033f0 <main+0x390>
2400331a:	ed9f 0a36 	vldr	s0, [pc, #216]	; 240033f4 <main+0x394>
2400331e:	4836      	ldr	r0, [pc, #216]	; (240033f8 <main+0x398>)
24003320:	f011 fd3e 	bl	24014da0 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
24003324:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
24003328:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
2400332c:	f44f 6100 	mov.w	r1, #2048	; 0x800
24003330:	ed9f 0a30 	vldr	s0, [pc, #192]	; 240033f4 <main+0x394>
24003334:	4831      	ldr	r0, [pc, #196]	; (240033fc <main+0x39c>)
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
24003336:	4d22      	ldr	r5, [pc, #136]	; (240033c0 <main+0x360>)
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
24003338:	f011 fd32 	bl	24014da0 <LEAF_generate_table_skew_non_sym>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
2400333c:	2201      	movs	r2, #1
2400333e:	4628      	mov	r0, r5
24003340:	4611      	mov	r1, r2
24003342:	f003 ffcb 	bl	240072dc <HAL_GPIO_WritePin>
	  HAL_Delay(10);
24003346:	200a      	movs	r0, #10
24003348:	f001 ffa6 	bl	24005298 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
2400334c:	4628      	mov	r0, r5
2400334e:	2200      	movs	r2, #0
24003350:	2101      	movs	r1, #1
24003352:	f003 ffc3 	bl	240072dc <HAL_GPIO_WritePin>
	  HAL_Delay(10);
24003356:	200a      	movs	r0, #10
24003358:	f001 ff9e 	bl	24005298 <HAL_Delay>
  for (int i = 0; i < 3; i++)
2400335c:	3c01      	subs	r4, #1
2400335e:	d1ed      	bne.n	2400333c <main+0x2dc>
  if (boardNumber == 0)
24003360:	f898 3000 	ldrb.w	r3, [r8]
24003364:	2b00      	cmp	r3, #0
24003366:	f000 84f5 	beq.w	24003d54 <main+0xcf4>
	  diskBusy = 1;
2400336a:	2301      	movs	r3, #1
2400336c:	4a24      	ldr	r2, [pc, #144]	; (24003400 <main+0x3a0>)
  specialModeNames[0] = "PHYS STR1     ";
2400336e:	4d25      	ldr	r5, [pc, #148]	; (24003404 <main+0x3a4>)
	  diskBusy = 1;
24003370:	7013      	strb	r3, [r2, #0]
  SDRAM_init();
24003372:	f7ff fa4d 	bl	24002810 <SDRAM_init>
  codec_init(&hi2c2);
24003376:	4824      	ldr	r0, [pc, #144]	; (24003408 <main+0x3a8>)
24003378:	f7fe f9e6 	bl	24001748 <codec_init>
  specialModeMacroNames[0][0] = "Feedback  ";
2400337c:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 24003428 <main+0x3c8>
  audioInit();
24003380:	f7fd ffd6 	bl	24001330 <audioInit>
  specialModeNames[0] = "PHYS STR1     ";
24003384:	4b21      	ldr	r3, [pc, #132]	; (2400340c <main+0x3ac>)
  specialModeMacroNames[0][5] = "          ";
24003386:	4a22      	ldr	r2, [pc, #136]	; (24003410 <main+0x3b0>)
  specialModeNames[0] = "PHYS STR1     ";
24003388:	602b      	str	r3, [r5, #0]
  specialModeMacroNames[0][0] = "Feedback  ";
2400338a:	4b22      	ldr	r3, [pc, #136]	; (24003414 <main+0x3b4>)
  specialModeMacroNames[1][3] = "Decay     ";
2400338c:	4822      	ldr	r0, [pc, #136]	; (24003418 <main+0x3b8>)
  specialModeMacroNames[0][0] = "Feedback  ";
2400338e:	f8c3 a000 	str.w	sl, [r3]
  specialModeMacroNames[0][1] = "SlideNois ";
24003392:	f8df a098 	ldr.w	sl, [pc, #152]	; 2400342c <main+0x3cc>
  specialModeMacroNames[0][10] = "         ";
24003396:	4921      	ldr	r1, [pc, #132]	; (2400341c <main+0x3bc>)
  specialModeMacroNames[0][1] = "SlideNois ";
24003398:	f8c3 a004 	str.w	sl, [r3, #4]
  specialModeMacroNames[0][2] = "PluckWidt ";
2400339c:	f8df a090 	ldr.w	sl, [pc, #144]	; 24003430 <main+0x3d0>
  specialModeMacroNames[2][5] = "RandDecy  ";
240033a0:	4f1f      	ldr	r7, [pc, #124]	; (24003420 <main+0x3c0>)
  specialModeMacroNames[0][2] = "PluckWidt ";
240033a2:	f8c3 a008 	str.w	sl, [r3, #8]
240033a6:	e045      	b.n	24003434 <main+0x3d4>
240033a8:	e000ed00 	.word	0xe000ed00
240033ac:	03010011 	.word	0x03010011
240033b0:	01010000 	.word	0x01010000
240033b4:	24040000 	.word	0x24040000
240033b8:	90040000 	.word	0x90040000
240033bc:	58020400 	.word	0x58020400
240033c0:	58020000 	.word	0x58020000
240033c4:	58024800 	.word	0x58024800
240033c8:	58024400 	.word	0x58024400
240033cc:	58020800 	.word	0x58020800
240033d0:	e0001000 	.word	0xe0001000
240033d4:	c5acce55 	.word	0xc5acce55
240033d8:	40000001 	.word	0x40000001
240033dc:	30042380 	.word	0x30042380
240033e0:	38000000 	.word	0x38000000
240033e4:	3c23d70a 	.word	0x3c23d70a
240033e8:	2001a504 	.word	0x2001a504
240033ec:	457a0000 	.word	0x457a0000
240033f0:	469c4000 	.word	0x469c4000
240033f4:	00000000 	.word	0x00000000
240033f8:	20014204 	.word	0x20014204
240033fc:	20016330 	.word	0x20016330
24003400:	200141ac 	.word	0x200141ac
24003404:	2001c5c4 	.word	0x2001c5c4
24003408:	20014104 	.word	0x20014104
2400340c:	2401c500 	.word	0x2401c500
24003410:	2401c54c 	.word	0x2401c54c
24003414:	2001c504 	.word	0x2001c504
24003418:	2401c598 	.word	0x2401c598
2400341c:	2401c558 	.word	0x2401c558
24003420:	2401c644 	.word	0x2401c644
24003424:	20014159 	.word	0x20014159
24003428:	2401c510 	.word	0x2401c510
2400342c:	2401c51c 	.word	0x2401c51c
24003430:	2401c528 	.word	0x2401c528
  specialModeMacroNames[0][3] = "PickNoise ";
24003434:	f8df a104 	ldr.w	sl, [pc, #260]	; 2400353c <main+0x4dc>
  specialModeMacroNames[2][1] = "Noise2    ";
24003438:	f8df 9104 	ldr.w	r9, [pc, #260]	; 24003540 <main+0x4e0>
  specialModeMacroNames[0][3] = "PickNoise ";
2400343c:	f8c3 a00c 	str.w	sl, [r3, #12]
  specialModeMacroNames[0][4] = "PickupSim";
24003440:	f8df a100 	ldr.w	sl, [pc, #256]	; 24003544 <main+0x4e4>
  specialModeMacroNames[2][2] = "Tone      ";
24003444:	f8df e100 	ldr.w	lr, [pc, #256]	; 24003548 <main+0x4e8>
  specialModeMacroNames[0][4] = "PickupSim";
24003448:	f8c3 a010 	str.w	sl, [r3, #16]
  specialModeNames[1] = "PHYS STR2     ";
2400344c:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 2400354c <main+0x4ec>
  specialModeMacroNames[2][4] = "Stretch   ";
24003450:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 24003550 <main+0x4f0>
  specialModeNames[1] = "PHYS STR2     ";
24003454:	f8c5 a004 	str.w	sl, [r5, #4]
  specialModeMacroNames[1][0] = "PrepIndex ";
24003458:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 24003554 <main+0x4f4>
  specialModeMacroNames[0][9] = "          ";
2400345c:	625a      	str	r2, [r3, #36]	; 0x24
  specialModeMacroNames[1][0] = "PrepIndex ";
2400345e:	f8c3 a030 	str.w	sl, [r3, #48]	; 0x30
  specialModeMacroNames[1][1] = "SlideNoise";
24003462:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 24003558 <main+0x4f8>
  specialModeMacroNames[1][3] = "Decay     ";
24003466:	63d8      	str	r0, [r3, #60]	; 0x3c
  specialModeMacroNames[1][1] = "SlideNoise";
24003468:	f8c3 a034 	str.w	sl, [r3, #52]	; 0x34
  specialModeMacroNames[1][2] = "PluckPos  ";
2400346c:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 2400355c <main+0x4fc>
  specialModeMacroNames[2][3] = "Decay     ";
24003470:	66d8      	str	r0, [r3, #108]	; 0x6c
  specialModeMacroNames[1][2] = "PluckPos  ";
24003472:	f8c3 a038 	str.w	sl, [r3, #56]	; 0x38
  specialModeMacroNames[1][4] = "Touch     ";
24003476:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 24003560 <main+0x500>
  specialModeMacroNames[2][1] = "Noise2    ";
2400347a:	f8c3 9064 	str.w	r9, [r3, #100]	; 0x64
  specialModeMacroNames[1][4] = "Touch     ";
2400347e:	f8c3 a040 	str.w	sl, [r3, #64]	; 0x40
  specialModeMacroNames[1][5] = "PickupPos ";
24003482:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 24003564 <main+0x504>
  specialModeMacroNames[2][2] = "Tone      ";
24003486:	f8c3 e068 	str.w	lr, [r3, #104]	; 0x68
  specialModeMacroNames[1][5] = "PickupPos ";
2400348a:	f8c3 a044 	str.w	sl, [r3, #68]	; 0x44
  specialModeMacroNames[1][6] = "DampFreq  ";
2400348e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 24003568 <main+0x508>
  specialModeMacroNames[2][4] = "Stretch   ";
24003492:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
  specialModeMacroNames[1][6] = "DampFreq  ";
24003496:	f8c3 a048 	str.w	sl, [r3, #72]	; 0x48
  specialModeMacroNames[1][7] = "FFAmount  ";
2400349a:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 2400356c <main+0x50c>
  specialModeMacroNames[2][6] = "RandGain  ";
2400349e:	4e21      	ldr	r6, [pc, #132]	; (24003524 <main+0x4c4>)
  specialModeMacroNames[1][7] = "FFAmount  ";
240034a0:	f8c3 a04c 	str.w	sl, [r3, #76]	; 0x4c
  specialModeMacroNames[1][8] = "FBAmount  ";
240034a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 24003570 <main+0x510>
  specialModeMacroNames[2][7] = "NoiseVol  ";
240034a8:	4c1f      	ldr	r4, [pc, #124]	; (24003528 <main+0x4c8>)
  specialModeMacroNames[1][8] = "FBAmount  ";
240034aa:	f8c3 a050 	str.w	sl, [r3, #80]	; 0x50
  specialModeMacroNames[1][9] = "foldDepth ";
240034ae:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 24003574 <main+0x514>
240034b2:	f8c3 a054 	str.w	sl, [r3, #84]	; 0x54
  specialModeMacroNames[1][10] = "prepPosX ";
240034b6:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 24003578 <main+0x518>
240034ba:	f8c3 a058 	str.w	sl, [r3, #88]	; 0x58
  specialModeMacroNames[1][11] = "prepPosY ";
240034be:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 2400357c <main+0x51c>
240034c2:	f8c3 a05c 	str.w	sl, [r3, #92]	; 0x5c
  specialModeNames[2] = "ADDITIVE      ";
240034c6:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 24003580 <main+0x520>
240034ca:	f8c5 a008 	str.w	sl, [r5, #8]
  specialModeMacroNames[2][0] = "Noise1    ";
240034ce:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 24003584 <main+0x524>
  specialModeMacroNames[0][6] = "          ";
240034d2:	e9c3 2205 	strd	r2, r2, [r3, #20]
  specialModeMacroNames[0][8] = "          ";
240034d6:	e9c3 2207 	strd	r2, r2, [r3, #28]
  specialModeMacroNames[0][11] = "         ";
240034da:	e9c3 110a 	strd	r1, r1, [r3, #40]	; 0x28
  specialModeMacroNames[2][0] = "Noise1    ";
240034de:	f8c3 a060 	str.w	sl, [r3, #96]	; 0x60
  specialModeMacroNames[2][5] = "RandDecy  ";
240034e2:	675f      	str	r7, [r3, #116]	; 0x74
  specialModeMacroNames[3][5] = "RandDecy  ";
240034e4:	f8c3 70a4 	str.w	r7, [r3, #164]	; 0xa4
  specialModeMacroNames[2][6] = "RandGain  ";
240034e8:	679e      	str	r6, [r3, #120]	; 0x78
  specialModeMacroNames[3][6] = "RandGain  ";
240034ea:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
  specialModeMacroNames[2][7] = "NoiseVol  ";
240034ee:	67dc      	str	r4, [r3, #124]	; 0x7c
  specialModeMacroNames[3][7] = "NoiseVol  ";
240034f0:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  specialModeMacroNames[3][11] = "         ";
240034f4:	243f      	movs	r4, #63	; 0x3f
240034f6:	4f0d      	ldr	r7, [pc, #52]	; (2400352c <main+0x4cc>)
240034f8:	4e0d      	ldr	r6, [pc, #52]	; (24003530 <main+0x4d0>)
  specialModeMacroNames[2][9] = "          ";
240034fa:	e9c3 2220 	strd	r2, r2, [r3, #128]	; 0x80
  specialModeMacroNames[3][9] = "          ";
240034fe:	e9c3 222c 	strd	r2, r2, [r3, #176]	; 0xb0
  specialModeNames[3] = "VOCAL      ";
24003502:	4a0c      	ldr	r2, [pc, #48]	; (24003534 <main+0x4d4>)
24003504:	60ea      	str	r2, [r5, #12]
  specialModeMacroNames[3][0] = "BLAH      ";
24003506:	4a0c      	ldr	r2, [pc, #48]	; (24003538 <main+0x4d8>)
  specialModeMacroNames[3][4] = "Stretch   ";
24003508:	e9c3 0c27 	strd	r0, ip, [r3, #156]	; 0x9c
  specialModeMacroNames[3][0] = "BLAH      ";
2400350c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  specialModeMacroNames[3][11] = "         ";
24003510:	2050      	movs	r0, #80	; 0x50
24003512:	461a      	mov	r2, r3
  specialModeMacroNames[3][2] = "Tone      ";
24003514:	e9c3 9e25 	strd	r9, lr, [r3, #148]	; 0x94
  specialModeMacroNames[2][11] = "         ";
24003518:	e9c3 1122 	strd	r1, r1, [r3, #136]	; 0x88
  specialModeMacroNames[3][11] = "         ";
2400351c:	e9c3 112e 	strd	r1, r1, [r3, #184]	; 0xb8
24003520:	e032      	b.n	24003588 <main+0x528>
24003522:	bf00      	nop
24003524:	2401c650 	.word	0x2401c650
24003528:	2401c65c 	.word	0x2401c65c
2400352c:	30042000 	.word	0x30042000
24003530:	30043380 	.word	0x30043380
24003534:	2401c668 	.word	0x2401c668
24003538:	2401c674 	.word	0x2401c674
2400353c:	2401c534 	.word	0x2401c534
24003540:	2401c620 	.word	0x2401c620
24003544:	2401c540 	.word	0x2401c540
24003548:	2401c62c 	.word	0x2401c62c
2400354c:	2401c564 	.word	0x2401c564
24003550:	2401c638 	.word	0x2401c638
24003554:	2401c574 	.word	0x2401c574
24003558:	2401c580 	.word	0x2401c580
2400355c:	2401c58c 	.word	0x2401c58c
24003560:	2401c5a4 	.word	0x2401c5a4
24003564:	2401c5b0 	.word	0x2401c5b0
24003568:	2401c5bc 	.word	0x2401c5bc
2400356c:	2401c5c8 	.word	0x2401c5c8
24003570:	2401c5d4 	.word	0x2401c5d4
24003574:	2401c5e0 	.word	0x2401c5e0
24003578:	2401c5ec 	.word	0x2401c5ec
2400357c:	2401c5f8 	.word	0x2401c5f8
24003580:	2401c604 	.word	0x2401c604
24003584:	2401c614 	.word	0x2401c614
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
24003588:	f855 1b04 	ldr.w	r1, [r5], #4
2400358c:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
24003590:	f8d2 c000 	ldr.w	ip, [r2]
  for (int i = 0; i < 4; i++)
24003594:	3230      	adds	r2, #48	; 0x30
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
24003596:	f807 0013 	strb.w	r0, [r7, r3, lsl #1]
2400359a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
2400359e:	7848      	ldrb	r0, [r1, #1]
240035a0:	7058      	strb	r0, [r3, #1]
240035a2:	7888      	ldrb	r0, [r1, #2]
240035a4:	7098      	strb	r0, [r3, #2]
240035a6:	78c8      	ldrb	r0, [r1, #3]
240035a8:	70d8      	strb	r0, [r3, #3]
240035aa:	7908      	ldrb	r0, [r1, #4]
240035ac:	7118      	strb	r0, [r3, #4]
240035ae:	7948      	ldrb	r0, [r1, #5]
240035b0:	7158      	strb	r0, [r3, #5]
240035b2:	7988      	ldrb	r0, [r1, #6]
240035b4:	7198      	strb	r0, [r3, #6]
240035b6:	79c8      	ldrb	r0, [r1, #7]
240035b8:	71d8      	strb	r0, [r3, #7]
240035ba:	7a08      	ldrb	r0, [r1, #8]
240035bc:	7218      	strb	r0, [r3, #8]
240035be:	7a48      	ldrb	r0, [r1, #9]
240035c0:	7258      	strb	r0, [r3, #9]
240035c2:	7a88      	ldrb	r0, [r1, #10]
240035c4:	7298      	strb	r0, [r3, #10]
240035c6:	7ac8      	ldrb	r0, [r1, #11]
240035c8:	72d8      	strb	r0, [r3, #11]
240035ca:	7b08      	ldrb	r0, [r1, #12]
240035cc:	7318      	strb	r0, [r3, #12]
240035ce:	7b49      	ldrb	r1, [r1, #13]
240035d0:	7359      	strb	r1, [r3, #13]
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
240035d2:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
240035d6:	f89c 1000 	ldrb.w	r1, [ip]
  for (int i = 0; i < 4; i++)
240035da:	3c01      	subs	r4, #1
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
240035dc:	f806 1033 	strb.w	r1, [r6, r3, lsl #3]
240035e0:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
240035e4:	f89c 1001 	ldrb.w	r1, [ip, #1]
  for (int i = 0; i < 4; i++)
240035e8:	2c3b      	cmp	r4, #59	; 0x3b
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
240035ea:	7059      	strb	r1, [r3, #1]
240035ec:	f89c 1002 	ldrb.w	r1, [ip, #2]
240035f0:	f852 0c2c 	ldr.w	r0, [r2, #-44]
240035f4:	7099      	strb	r1, [r3, #2]
240035f6:	f89c 1003 	ldrb.w	r1, [ip, #3]
240035fa:	70d9      	strb	r1, [r3, #3]
240035fc:	f89c 1004 	ldrb.w	r1, [ip, #4]
24003600:	7119      	strb	r1, [r3, #4]
24003602:	f89c 1005 	ldrb.w	r1, [ip, #5]
24003606:	7159      	strb	r1, [r3, #5]
24003608:	f89c 1006 	ldrb.w	r1, [ip, #6]
2400360c:	7199      	strb	r1, [r3, #6]
2400360e:	f89c 1007 	ldrb.w	r1, [ip, #7]
24003612:	71d9      	strb	r1, [r3, #7]
24003614:	f89c 1008 	ldrb.w	r1, [ip, #8]
24003618:	7219      	strb	r1, [r3, #8]
2400361a:	f89c 1009 	ldrb.w	r1, [ip, #9]
2400361e:	7259      	strb	r1, [r3, #9]
24003620:	7801      	ldrb	r1, [r0, #0]
24003622:	7299      	strb	r1, [r3, #10]
24003624:	7841      	ldrb	r1, [r0, #1]
24003626:	72d9      	strb	r1, [r3, #11]
24003628:	7881      	ldrb	r1, [r0, #2]
2400362a:	7319      	strb	r1, [r3, #12]
2400362c:	78c1      	ldrb	r1, [r0, #3]
2400362e:	7359      	strb	r1, [r3, #13]
24003630:	7901      	ldrb	r1, [r0, #4]
24003632:	7399      	strb	r1, [r3, #14]
24003634:	7941      	ldrb	r1, [r0, #5]
24003636:	73d9      	strb	r1, [r3, #15]
24003638:	7981      	ldrb	r1, [r0, #6]
2400363a:	7419      	strb	r1, [r3, #16]
2400363c:	79c1      	ldrb	r1, [r0, #7]
2400363e:	7459      	strb	r1, [r3, #17]
24003640:	7a01      	ldrb	r1, [r0, #8]
24003642:	7499      	strb	r1, [r3, #18]
24003644:	f852 1c28 	ldr.w	r1, [r2, #-40]
24003648:	7a40      	ldrb	r0, [r0, #9]
2400364a:	74d8      	strb	r0, [r3, #19]
2400364c:	7808      	ldrb	r0, [r1, #0]
2400364e:	7518      	strb	r0, [r3, #20]
24003650:	7848      	ldrb	r0, [r1, #1]
24003652:	7558      	strb	r0, [r3, #21]
24003654:	7888      	ldrb	r0, [r1, #2]
24003656:	7598      	strb	r0, [r3, #22]
24003658:	78c8      	ldrb	r0, [r1, #3]
2400365a:	75d8      	strb	r0, [r3, #23]
2400365c:	7908      	ldrb	r0, [r1, #4]
2400365e:	7618      	strb	r0, [r3, #24]
24003660:	7948      	ldrb	r0, [r1, #5]
24003662:	7658      	strb	r0, [r3, #25]
24003664:	7988      	ldrb	r0, [r1, #6]
24003666:	7698      	strb	r0, [r3, #26]
24003668:	79c8      	ldrb	r0, [r1, #7]
2400366a:	76d8      	strb	r0, [r3, #27]
2400366c:	7a08      	ldrb	r0, [r1, #8]
2400366e:	7718      	strb	r0, [r3, #28]
24003670:	f852 0c24 	ldr.w	r0, [r2, #-36]
24003674:	7a49      	ldrb	r1, [r1, #9]
24003676:	7759      	strb	r1, [r3, #29]
24003678:	7801      	ldrb	r1, [r0, #0]
2400367a:	7799      	strb	r1, [r3, #30]
2400367c:	7841      	ldrb	r1, [r0, #1]
2400367e:	77d9      	strb	r1, [r3, #31]
24003680:	7881      	ldrb	r1, [r0, #2]
24003682:	f883 1020 	strb.w	r1, [r3, #32]
24003686:	78c1      	ldrb	r1, [r0, #3]
24003688:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
2400368c:	7901      	ldrb	r1, [r0, #4]
2400368e:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
24003692:	7941      	ldrb	r1, [r0, #5]
24003694:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
24003698:	7981      	ldrb	r1, [r0, #6]
2400369a:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
2400369e:	79c1      	ldrb	r1, [r0, #7]
240036a0:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
240036a4:	7a01      	ldrb	r1, [r0, #8]
240036a6:	f883 1026 	strb.w	r1, [r3, #38]	; 0x26
240036aa:	f852 1c20 	ldr.w	r1, [r2, #-32]
240036ae:	7a40      	ldrb	r0, [r0, #9]
240036b0:	f883 0027 	strb.w	r0, [r3, #39]	; 0x27
240036b4:	7808      	ldrb	r0, [r1, #0]
240036b6:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
240036ba:	7848      	ldrb	r0, [r1, #1]
240036bc:	f883 0029 	strb.w	r0, [r3, #41]	; 0x29
240036c0:	7888      	ldrb	r0, [r1, #2]
240036c2:	f883 002a 	strb.w	r0, [r3, #42]	; 0x2a
240036c6:	78c8      	ldrb	r0, [r1, #3]
240036c8:	f883 002b 	strb.w	r0, [r3, #43]	; 0x2b
240036cc:	7908      	ldrb	r0, [r1, #4]
240036ce:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
240036d2:	7948      	ldrb	r0, [r1, #5]
240036d4:	f883 002d 	strb.w	r0, [r3, #45]	; 0x2d
240036d8:	7988      	ldrb	r0, [r1, #6]
240036da:	f883 002e 	strb.w	r0, [r3, #46]	; 0x2e
240036de:	79c8      	ldrb	r0, [r1, #7]
240036e0:	f883 002f 	strb.w	r0, [r3, #47]	; 0x2f
240036e4:	7a08      	ldrb	r0, [r1, #8]
240036e6:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
240036ea:	7a48      	ldrb	r0, [r1, #9]
240036ec:	f852 1c1c 	ldr.w	r1, [r2, #-28]
240036f0:	f883 0031 	strb.w	r0, [r3, #49]	; 0x31
240036f4:	f891 c000 	ldrb.w	ip, [r1]
240036f8:	f852 0c18 	ldr.w	r0, [r2, #-24]
240036fc:	f883 c032 	strb.w	ip, [r3, #50]	; 0x32
24003700:	f891 c001 	ldrb.w	ip, [r1, #1]
24003704:	f883 c033 	strb.w	ip, [r3, #51]	; 0x33
24003708:	f891 c002 	ldrb.w	ip, [r1, #2]
2400370c:	f883 c034 	strb.w	ip, [r3, #52]	; 0x34
24003710:	f891 c003 	ldrb.w	ip, [r1, #3]
24003714:	f883 c035 	strb.w	ip, [r3, #53]	; 0x35
24003718:	f891 c004 	ldrb.w	ip, [r1, #4]
2400371c:	f883 c036 	strb.w	ip, [r3, #54]	; 0x36
24003720:	f891 c005 	ldrb.w	ip, [r1, #5]
24003724:	f883 c037 	strb.w	ip, [r3, #55]	; 0x37
24003728:	f891 c006 	ldrb.w	ip, [r1, #6]
2400372c:	f883 c038 	strb.w	ip, [r3, #56]	; 0x38
24003730:	f891 c007 	ldrb.w	ip, [r1, #7]
24003734:	f883 c039 	strb.w	ip, [r3, #57]	; 0x39
24003738:	f891 c008 	ldrb.w	ip, [r1, #8]
2400373c:	f883 c03a 	strb.w	ip, [r3, #58]	; 0x3a
24003740:	7a49      	ldrb	r1, [r1, #9]
24003742:	f883 103b 	strb.w	r1, [r3, #59]	; 0x3b
24003746:	7801      	ldrb	r1, [r0, #0]
24003748:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
2400374c:	7841      	ldrb	r1, [r0, #1]
2400374e:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
24003752:	7881      	ldrb	r1, [r0, #2]
24003754:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
24003758:	78c1      	ldrb	r1, [r0, #3]
2400375a:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
2400375e:	7901      	ldrb	r1, [r0, #4]
24003760:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
24003764:	7941      	ldrb	r1, [r0, #5]
24003766:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
2400376a:	7981      	ldrb	r1, [r0, #6]
2400376c:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
24003770:	79c1      	ldrb	r1, [r0, #7]
24003772:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
24003776:	7a01      	ldrb	r1, [r0, #8]
24003778:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
2400377c:	f852 1c14 	ldr.w	r1, [r2, #-20]
24003780:	7a40      	ldrb	r0, [r0, #9]
24003782:	f883 0045 	strb.w	r0, [r3, #69]	; 0x45
24003786:	7808      	ldrb	r0, [r1, #0]
24003788:	f883 0046 	strb.w	r0, [r3, #70]	; 0x46
2400378c:	7848      	ldrb	r0, [r1, #1]
2400378e:	f883 0047 	strb.w	r0, [r3, #71]	; 0x47
24003792:	7888      	ldrb	r0, [r1, #2]
24003794:	f883 0048 	strb.w	r0, [r3, #72]	; 0x48
24003798:	78c8      	ldrb	r0, [r1, #3]
2400379a:	f883 0049 	strb.w	r0, [r3, #73]	; 0x49
2400379e:	7908      	ldrb	r0, [r1, #4]
240037a0:	f883 004a 	strb.w	r0, [r3, #74]	; 0x4a
240037a4:	7948      	ldrb	r0, [r1, #5]
240037a6:	f883 004b 	strb.w	r0, [r3, #75]	; 0x4b
240037aa:	7988      	ldrb	r0, [r1, #6]
240037ac:	f883 004c 	strb.w	r0, [r3, #76]	; 0x4c
240037b0:	79c8      	ldrb	r0, [r1, #7]
240037b2:	f883 004d 	strb.w	r0, [r3, #77]	; 0x4d
240037b6:	7a08      	ldrb	r0, [r1, #8]
240037b8:	f883 004e 	strb.w	r0, [r3, #78]	; 0x4e
240037bc:	7a49      	ldrb	r1, [r1, #9]
240037be:	f883 104f 	strb.w	r1, [r3, #79]	; 0x4f
240037c2:	f852 0c10 	ldr.w	r0, [r2, #-16]
240037c6:	7801      	ldrb	r1, [r0, #0]
240037c8:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
240037cc:	7841      	ldrb	r1, [r0, #1]
240037ce:	f883 1051 	strb.w	r1, [r3, #81]	; 0x51
240037d2:	7881      	ldrb	r1, [r0, #2]
240037d4:	f883 1052 	strb.w	r1, [r3, #82]	; 0x52
240037d8:	78c1      	ldrb	r1, [r0, #3]
240037da:	f883 1053 	strb.w	r1, [r3, #83]	; 0x53
240037de:	7901      	ldrb	r1, [r0, #4]
240037e0:	f883 1054 	strb.w	r1, [r3, #84]	; 0x54
240037e4:	7941      	ldrb	r1, [r0, #5]
240037e6:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
240037ea:	7981      	ldrb	r1, [r0, #6]
240037ec:	f883 1056 	strb.w	r1, [r3, #86]	; 0x56
240037f0:	79c1      	ldrb	r1, [r0, #7]
240037f2:	f883 1057 	strb.w	r1, [r3, #87]	; 0x57
240037f6:	7a01      	ldrb	r1, [r0, #8]
240037f8:	f883 1058 	strb.w	r1, [r3, #88]	; 0x58
240037fc:	f852 1c0c 	ldr.w	r1, [r2, #-12]
24003800:	7a40      	ldrb	r0, [r0, #9]
24003802:	f883 0059 	strb.w	r0, [r3, #89]	; 0x59
24003806:	7808      	ldrb	r0, [r1, #0]
24003808:	f883 005a 	strb.w	r0, [r3, #90]	; 0x5a
2400380c:	7848      	ldrb	r0, [r1, #1]
2400380e:	f883 005b 	strb.w	r0, [r3, #91]	; 0x5b
24003812:	7888      	ldrb	r0, [r1, #2]
24003814:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
24003818:	78c8      	ldrb	r0, [r1, #3]
2400381a:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
2400381e:	7908      	ldrb	r0, [r1, #4]
24003820:	f883 005e 	strb.w	r0, [r3, #94]	; 0x5e
24003824:	7948      	ldrb	r0, [r1, #5]
24003826:	f883 005f 	strb.w	r0, [r3, #95]	; 0x5f
2400382a:	7988      	ldrb	r0, [r1, #6]
2400382c:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
24003830:	79c8      	ldrb	r0, [r1, #7]
24003832:	f883 0061 	strb.w	r0, [r3, #97]	; 0x61
24003836:	7a08      	ldrb	r0, [r1, #8]
24003838:	f883 0062 	strb.w	r0, [r3, #98]	; 0x62
2400383c:	f852 0c08 	ldr.w	r0, [r2, #-8]
24003840:	7a49      	ldrb	r1, [r1, #9]
24003842:	f883 1063 	strb.w	r1, [r3, #99]	; 0x63
24003846:	7801      	ldrb	r1, [r0, #0]
24003848:	f883 1064 	strb.w	r1, [r3, #100]	; 0x64
2400384c:	7841      	ldrb	r1, [r0, #1]
2400384e:	f883 1065 	strb.w	r1, [r3, #101]	; 0x65
24003852:	7881      	ldrb	r1, [r0, #2]
24003854:	f883 1066 	strb.w	r1, [r3, #102]	; 0x66
24003858:	78c1      	ldrb	r1, [r0, #3]
2400385a:	f883 1067 	strb.w	r1, [r3, #103]	; 0x67
2400385e:	7901      	ldrb	r1, [r0, #4]
24003860:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
24003864:	7941      	ldrb	r1, [r0, #5]
24003866:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
2400386a:	7981      	ldrb	r1, [r0, #6]
2400386c:	f883 106a 	strb.w	r1, [r3, #106]	; 0x6a
24003870:	79c1      	ldrb	r1, [r0, #7]
24003872:	f883 106b 	strb.w	r1, [r3, #107]	; 0x6b
24003876:	7a01      	ldrb	r1, [r0, #8]
24003878:	f883 106c 	strb.w	r1, [r3, #108]	; 0x6c
2400387c:	f852 1c04 	ldr.w	r1, [r2, #-4]
24003880:	7a40      	ldrb	r0, [r0, #9]
24003882:	f883 006d 	strb.w	r0, [r3, #109]	; 0x6d
24003886:	7808      	ldrb	r0, [r1, #0]
24003888:	f883 006e 	strb.w	r0, [r3, #110]	; 0x6e
2400388c:	7848      	ldrb	r0, [r1, #1]
2400388e:	f883 006f 	strb.w	r0, [r3, #111]	; 0x6f
24003892:	7888      	ldrb	r0, [r1, #2]
24003894:	f883 0070 	strb.w	r0, [r3, #112]	; 0x70
24003898:	78c8      	ldrb	r0, [r1, #3]
2400389a:	f883 0071 	strb.w	r0, [r3, #113]	; 0x71
2400389e:	7908      	ldrb	r0, [r1, #4]
240038a0:	f883 0072 	strb.w	r0, [r3, #114]	; 0x72
240038a4:	7948      	ldrb	r0, [r1, #5]
240038a6:	f883 0073 	strb.w	r0, [r3, #115]	; 0x73
240038aa:	7988      	ldrb	r0, [r1, #6]
240038ac:	f883 0074 	strb.w	r0, [r3, #116]	; 0x74
240038b0:	79c8      	ldrb	r0, [r1, #7]
240038b2:	f883 0075 	strb.w	r0, [r3, #117]	; 0x75
240038b6:	7a08      	ldrb	r0, [r1, #8]
240038b8:	f883 0076 	strb.w	r0, [r3, #118]	; 0x76
240038bc:	7a49      	ldrb	r1, [r1, #9]
240038be:	f883 1077 	strb.w	r1, [r3, #119]	; 0x77
  for (int i = 0; i < 4; i++)
240038c2:	d002      	beq.n	240038ca <main+0x86a>
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
240038c4:	682b      	ldr	r3, [r5, #0]
240038c6:	7818      	ldrb	r0, [r3, #0]
240038c8:	e65e      	b.n	24003588 <main+0x528>
  HAL_SPI_TransmitReceive_DMA(&hspi6, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
240038ca:	4a9e      	ldr	r2, [pc, #632]	; (24003b44 <main+0xae4>)
240038cc:	2340      	movs	r3, #64	; 0x40
240038ce:	489e      	ldr	r0, [pc, #632]	; (24003b48 <main+0xae8>)
240038d0:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
	  if (rand > TWO_TO_31)
240038d4:	eddf 8a9d 	vldr	s17, [pc, #628]	; 24003b4c <main+0xaec>
  HAL_SPI_TransmitReceive_DMA(&hspi6, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
240038d8:	f008 f9f6 	bl	2400bcc8 <HAL_SPI_TransmitReceive_DMA>
  HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
240038dc:	4a9c      	ldr	r2, [pc, #624]	; (24003b50 <main+0xaf0>)
240038de:	2340      	movs	r3, #64	; 0x40
240038e0:	489c      	ldr	r0, [pc, #624]	; (24003b54 <main+0xaf4>)
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
240038e2:	ed9f 8a9d 	vldr	s16, [pc, #628]	; 24003b58 <main+0xaf8>
  HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
240038e6:	18d1      	adds	r1, r2, r3
240038e8:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 24003bb4 <main+0xb54>
240038ec:	f008 f9ec 	bl	2400bcc8 <HAL_SPI_TransmitReceive_DMA>
    audioStart(&hsai_BlockB1, &hsai_BlockA1);
240038f0:	4b9a      	ldr	r3, [pc, #616]	; (24003b5c <main+0xafc>)
240038f2:	499b      	ldr	r1, [pc, #620]	; (24003b60 <main+0xb00>)
240038f4:	f003 0207 	and.w	r2, r3, #7
240038f8:	489a      	ldr	r0, [pc, #616]	; (24003b64 <main+0xb04>)
240038fa:	f503 6480 	add.w	r4, r3, #1024	; 0x400
240038fe:	4f9a      	ldr	r7, [pc, #616]	; (24003b68 <main+0xb08>)
24003900:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 24003bb8 <main+0xb58>
24003904:	4d99      	ldr	r5, [pc, #612]	; (24003b6c <main+0xb0c>)
24003906:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 24003bbc <main+0xb5c>
2400390a:	9202      	str	r2, [sp, #8]
2400390c:	f7fd fed8 	bl	240016c0 <audioStart>
24003910:	e02a      	b.n	24003968 <main+0x908>
	  if ((stringInputs[0] == 0) && (stringInputs[1] == 0))
24003912:	883b      	ldrh	r3, [r7, #0]
24003914:	b29b      	uxth	r3, r3
24003916:	b913      	cbnz	r3, 2400391e <main+0x8be>
24003918:	887a      	ldrh	r2, [r7, #2]
2400391a:	b292      	uxth	r2, r2
2400391c:	b102      	cbz	r2, 24003920 <main+0x8c0>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
2400391e:	2201      	movs	r2, #1
24003920:	2180      	movs	r1, #128	; 0x80
24003922:	4893      	ldr	r0, [pc, #588]	; (24003b70 <main+0xb10>)
24003924:	f003 fcda 	bl	240072dc <HAL_GPIO_WritePin>
	  if (brainFirmwareUpdateRequested)
24003928:	f8da 3000 	ldr.w	r3, [sl]
2400392c:	2b00      	cmp	r3, #0
2400392e:	d13e      	bne.n	240039ae <main+0x94e>
	  HAL_RNG_GenerateRandomNumber(&hrng, &rand);
24003930:	a90b      	add	r1, sp, #44	; 0x2c
24003932:	4890      	ldr	r0, [pc, #576]	; (24003b74 <main+0xb14>)
24003934:	f006 fce4 	bl	2400a300 <HAL_RNG_GenerateRandomNumber>
	  if (rand > TWO_TO_31)
24003938:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
2400393c:	eef8 7a67 	vcvt.f32.u32	s15, s15
24003940:	eef4 7ae8 	vcmpe.f32	s15, s17
24003944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24003948:	dd03      	ble.n	24003952 <main+0x8f2>
		  myTestInt++;
2400394a:	4a8b      	ldr	r2, [pc, #556]	; (24003b78 <main+0xb18>)
2400394c:	6813      	ldr	r3, [r2, #0]
2400394e:	3301      	adds	r3, #1
24003950:	6013      	str	r3, [r2, #0]
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
24003952:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
24003956:	782b      	ldrb	r3, [r5, #0]
24003958:	1c5a      	adds	r2, r3, #1
2400395a:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
2400395e:	eea7 7a88 	vfma.f32	s14, s15, s16
24003962:	702a      	strb	r2, [r5, #0]
24003964:	ed83 7a00 	vstr	s14, [r3]
	  if (boardNumber == 0)
24003968:	f898 3000 	ldrb.w	r3, [r8]
2400396c:	b953      	cbnz	r3, 24003984 <main+0x924>
		  if (presetWaitingToLoad > 0)
2400396e:	4b83      	ldr	r3, [pc, #524]	; (24003b7c <main+0xb1c>)
24003970:	681e      	ldr	r6, [r3, #0]
24003972:	2e00      	cmp	r6, #0
24003974:	d053      	beq.n	24003a1e <main+0x9be>
			  if (!i2cSending)
24003976:	4b82      	ldr	r3, [pc, #520]	; (24003b80 <main+0xb20>)
24003978:	781b      	ldrb	r3, [r3, #0]
2400397a:	f003 06ff 	and.w	r6, r3, #255	; 0xff
2400397e:	2b00      	cmp	r3, #0
24003980:	f000 809e 	beq.w	24003ac0 <main+0xa60>
	  if (presetWaitingToParse > 0)
24003984:	f8d9 3000 	ldr.w	r3, [r9]
24003988:	2b00      	cmp	r3, #0
2400398a:	d0c2      	beq.n	24003912 <main+0x8b2>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
2400398c:	2201      	movs	r2, #1
2400398e:	2180      	movs	r1, #128	; 0x80
24003990:	487c      	ldr	r0, [pc, #496]	; (24003b84 <main+0xb24>)
24003992:	f003 fca3 	bl	240072dc <HAL_GPIO_WritePin>
		  parsePreset(presetWaitingToParse, presetNumberToLoad);
24003996:	4b7c      	ldr	r3, [pc, #496]	; (24003b88 <main+0xb28>)
24003998:	f8d9 0000 	ldr.w	r0, [r9]
2400399c:	7819      	ldrb	r1, [r3, #0]
2400399e:	f024 fb1f 	bl	24027fe0 <__parsePreset_veneer>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
240039a2:	2200      	movs	r2, #0
240039a4:	2180      	movs	r1, #128	; 0x80
240039a6:	4877      	ldr	r0, [pc, #476]	; (24003b84 <main+0xb24>)
240039a8:	f003 fc98 	bl	240072dc <HAL_GPIO_WritePin>
240039ac:	e7b1      	b.n	24003912 <main+0x8b2>
	if (boardNumber == 0)
240039ae:	f898 6000 	ldrb.w	r6, [r8]
240039b2:	2e00      	cmp	r6, #0
240039b4:	d1bc      	bne.n	24003930 <main+0x8d0>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
240039b6:	2201      	movs	r2, #1
240039b8:	486d      	ldr	r0, [pc, #436]	; (24003b70 <main+0xb10>)
240039ba:	4611      	mov	r1, r2
240039bc:	f003 fc8e 	bl	240072dc <HAL_GPIO_WritePin>
  __IO uint8_t status = SD_PRESENT;
240039c0:	2301      	movs	r3, #1
240039c2:	f88d 3017 	strb.w	r3, [sp, #23]
  return status;
240039c6:	f89d 3017 	ldrb.w	r3, [sp, #23]
		if(BSP_SD_IsDetected())
240039ca:	b1f3      	cbz	r3, 24003a0a <main+0x9aa>
240039cc:	9b02      	ldr	r3, [sp, #8]
240039ce:	2b00      	cmp	r3, #0
240039d0:	f040 8194 	bne.w	24003cfc <main+0xc9c>
240039d4:	4b61      	ldr	r3, [pc, #388]	; (24003b5c <main+0xafc>)
				audioOutBuffer[i] = 0;
240039d6:	2000      	movs	r0, #0
240039d8:	2100      	movs	r1, #0
240039da:	e8e3 0102 	strd	r0, r1, [r3], #8
			for (uint_fast16_t i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
240039de:	429c      	cmp	r4, r3
240039e0:	d1fb      	bne.n	240039da <main+0x97a>
			loadFailed = 0;
240039e2:	2600      	movs	r6, #0
240039e4:	4b69      	ldr	r3, [pc, #420]	; (24003b8c <main+0xb2c>)
			diskBusy = 1;
240039e6:	2201      	movs	r2, #1
			loadFailed = 0;
240039e8:	701e      	strb	r6, [r3, #0]
			disk_initialize(0);
240039ea:	4630      	mov	r0, r6
			diskBusy = 1;
240039ec:	4b68      	ldr	r3, [pc, #416]	; (24003b90 <main+0xb30>)
240039ee:	701a      	strb	r2, [r3, #0]
			disk_initialize(0);
240039f0:	f00a f8e0 	bl	2400dbb4 <disk_initialize>
			disk_status(0);
240039f4:	4630      	mov	r0, r6
240039f6:	f00a f8d3 	bl	2400dba0 <disk_status>
			if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
240039fa:	2201      	movs	r2, #1
240039fc:	4965      	ldr	r1, [pc, #404]	; (24003b94 <main+0xb34>)
240039fe:	4866      	ldr	r0, [pc, #408]	; (24003b98 <main+0xb38>)
24003a00:	f00c faac 	bl	2400ff5c <f_mount>
24003a04:	2800      	cmp	r0, #0
24003a06:	f000 80db 	beq.w	24003bc0 <main+0xb60>
		brainFirmwareUpdateRequested = 0;
24003a0a:	2200      	movs	r2, #0
		diskBusy = 0;
24003a0c:	4b60      	ldr	r3, [pc, #384]	; (24003b90 <main+0xb30>)
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
24003a0e:	2101      	movs	r1, #1
24003a10:	4857      	ldr	r0, [pc, #348]	; (24003b70 <main+0xb10>)
		brainFirmwareUpdateRequested = 0;
24003a12:	f8ca 2000 	str.w	r2, [sl]
		diskBusy = 0;
24003a16:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
24003a18:	f003 fc60 	bl	240072dc <HAL_GPIO_WritePin>
24003a1c:	e788      	b.n	24003930 <main+0x8d0>
		  else if (presetWaitingToWrite > 0)
24003a1e:	4b5f      	ldr	r3, [pc, #380]	; (24003b9c <main+0xb3c>)
24003a20:	681b      	ldr	r3, [r3, #0]
24003a22:	2b00      	cmp	r3, #0
24003a24:	d0ae      	beq.n	24003984 <main+0x924>
				  writePresetToSDCard(presetWaitingToWrite);
24003a26:	4b5d      	ldr	r3, [pc, #372]	; (24003b9c <main+0xb3c>)
24003a28:	681b      	ldr	r3, [r3, #0]
24003a2a:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
24003a2c:	b672      	cpsid	i
		 audioOutBuffer[i] = 0;
24003a2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
24003a32:	4631      	mov	r1, r6
24003a34:	4849      	ldr	r0, [pc, #292]	; (24003b5c <main+0xafc>)
24003a36:	f015 fe75 	bl	24019724 <memset>
  __IO uint8_t status = SD_PRESENT;
24003a3a:	2301      	movs	r3, #1
24003a3c:	f88d 3016 	strb.w	r3, [sp, #22]
  return status;
24003a40:	f89d 3016 	ldrb.w	r3, [sp, #22]
	if(BSP_SD_IsDetected())
24003a44:	2b00      	cmp	r3, #0
24003a46:	d034      	beq.n	24003ab2 <main+0xa52>
24003a48:	9b02      	ldr	r3, [sp, #8]
24003a4a:	2b00      	cmp	r3, #0
24003a4c:	f040 815d 	bne.w	24003d0a <main+0xcaa>
24003a50:	4b42      	ldr	r3, [pc, #264]	; (24003b5c <main+0xafc>)
					audioOutBuffer[i] = 0;
24003a52:	2000      	movs	r0, #0
24003a54:	2100      	movs	r1, #0
24003a56:	e8e3 0102 	strd	r0, r1, [r3], #8
				for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
24003a5a:	42a3      	cmp	r3, r4
24003a5c:	d1fb      	bne.n	24003a56 <main+0x9f6>
				diskBusy = 1;
24003a5e:	2301      	movs	r3, #1
24003a60:	4a4b      	ldr	r2, [pc, #300]	; (24003b90 <main+0xb30>)
24003a62:	7013      	strb	r3, [r2, #0]
			    if (presetNumberToSave > 99)
24003a64:	4a4e      	ldr	r2, [pc, #312]	; (24003ba0 <main+0xb40>)
24003a66:	7813      	ldrb	r3, [r2, #0]
24003a68:	2b63      	cmp	r3, #99	; 0x63
24003a6a:	d901      	bls.n	24003a70 <main+0xa10>
			        presetNumberToSave = 99;
24003a6c:	2363      	movs	r3, #99	; 0x63
24003a6e:	7013      	strb	r3, [r2, #0]
				itoa(presetNumberToSave, charBuf, 10);
24003a70:	4b4b      	ldr	r3, [pc, #300]	; (24003ba0 <main+0xb40>)
24003a72:	220a      	movs	r2, #10
24003a74:	a908      	add	r1, sp, #32
24003a76:	7818      	ldrb	r0, [r3, #0]
24003a78:	f015 fe10 	bl	2401969c <itoa>
				int len = ((strlen(charBuf)));
24003a7c:	a808      	add	r0, sp, #32
24003a7e:	f7fc fc2b 	bl	240002d8 <strlen>
				if (len == 1)
24003a82:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
24003a84:	4602      	mov	r2, r0
				if (len == 1)
24003a86:	f000 80d0 	beq.w	24003c2a <main+0xbca>
					strcat(charBuf, ".ebp");
24003a8a:	4946      	ldr	r1, [pc, #280]	; (24003ba4 <main+0xb44>)
24003a8c:	ab08      	add	r3, sp, #32
24003a8e:	6808      	ldr	r0, [r1, #0]
24003a90:	7909      	ldrb	r1, [r1, #4]
24003a92:	5098      	str	r0, [r3, r2]
24003a94:	4413      	add	r3, r2
					strcpy(finalString, charBuf);
24003a96:	a80b      	add	r0, sp, #44	; 0x2c
24003a98:	3205      	adds	r2, #5
					strcat(charBuf, ".ebp");
24003a9a:	7119      	strb	r1, [r3, #4]
					strcpy(finalString, charBuf);
24003a9c:	a908      	add	r1, sp, #32
24003a9e:	f015 fe73 	bl	24019788 <memcpy>
				if(f_open(&SDFile, finalString, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
24003aa2:	220a      	movs	r2, #10
24003aa4:	a90b      	add	r1, sp, #44	; 0x2c
24003aa6:	4840      	ldr	r0, [pc, #256]	; (24003ba8 <main+0xb48>)
24003aa8:	f00c faa4 	bl	2400fff4 <f_open>
24003aac:	2800      	cmp	r0, #0
24003aae:	f000 80d3 	beq.w	24003c58 <main+0xbf8>
	presetWaitingToWrite = 0;
24003ab2:	2300      	movs	r3, #0
24003ab4:	4a39      	ldr	r2, [pc, #228]	; (24003b9c <main+0xb3c>)
24003ab6:	6013      	str	r3, [r2, #0]
	diskBusy = 0;
24003ab8:	4a35      	ldr	r2, [pc, #212]	; (24003b90 <main+0xb30>)
24003aba:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
24003abc:	b662      	cpsie	i
}
24003abe:	e761      	b.n	24003984 <main+0x924>
				  checkForSDCardPreset(presetNumberToLoad);
24003ac0:	4b31      	ldr	r3, [pc, #196]	; (24003b88 <main+0xb28>)
	prevVoice = numberToLoad;
24003ac2:	4a3a      	ldr	r2, [pc, #232]	; (24003bac <main+0xb4c>)
				  checkForSDCardPreset(presetNumberToLoad);
24003ac4:	781b      	ldrb	r3, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
24003ac6:	482a      	ldr	r0, [pc, #168]	; (24003b70 <main+0xb10>)
				  checkForSDCardPreset(presetNumberToLoad);
24003ac8:	b2db      	uxtb	r3, r3
	prevVoice = numberToLoad;
24003aca:	6013      	str	r3, [r2, #0]
	voice = numberToLoad;
24003acc:	4a38      	ldr	r2, [pc, #224]	; (24003bb0 <main+0xb50>)
24003ace:	9303      	str	r3, [sp, #12]
24003ad0:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
24003ad2:	2201      	movs	r2, #1
24003ad4:	4611      	mov	r1, r2
24003ad6:	f003 fc01 	bl	240072dc <HAL_GPIO_WritePin>
  __IO uint8_t status = SD_PRESENT;
24003ada:	2201      	movs	r2, #1
24003adc:	f88d 2015 	strb.w	r2, [sp, #21]
  return status;
24003ae0:	f89d 2015 	ldrb.w	r2, [sp, #21]
	if(BSP_SD_IsDetected())
24003ae4:	b31a      	cbz	r2, 24003b2e <main+0xace>
24003ae6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
24003aea:	2a00      	cmp	r2, #0
24003aec:	f040 8114 	bne.w	24003d18 <main+0xcb8>
24003af0:	4a1a      	ldr	r2, [pc, #104]	; (24003b5c <main+0xafc>)
			audioOutBuffer[i] = 0;
24003af2:	2000      	movs	r0, #0
24003af4:	2100      	movs	r1, #0
24003af6:	e8e2 0102 	strd	r0, r1, [r2], #8
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
24003afa:	42a2      	cmp	r2, r4
24003afc:	d1fb      	bne.n	24003af6 <main+0xa96>
		loadFailed = 0;
24003afe:	2600      	movs	r6, #0
24003b00:	9303      	str	r3, [sp, #12]
24003b02:	4b22      	ldr	r3, [pc, #136]	; (24003b8c <main+0xb2c>)
		diskBusy = 1;
24003b04:	2201      	movs	r2, #1
		disk_initialize(0);
24003b06:	4630      	mov	r0, r6
		loadFailed = 0;
24003b08:	701e      	strb	r6, [r3, #0]
		presetWaitingToLoad = 0;
24003b0a:	4b1c      	ldr	r3, [pc, #112]	; (24003b7c <main+0xb1c>)
24003b0c:	601e      	str	r6, [r3, #0]
		diskBusy = 1;
24003b0e:	4b20      	ldr	r3, [pc, #128]	; (24003b90 <main+0xb30>)
24003b10:	701a      	strb	r2, [r3, #0]
		disk_initialize(0);
24003b12:	f00a f84f 	bl	2400dbb4 <disk_initialize>
	    disk_status(0);
24003b16:	4630      	mov	r0, r6
24003b18:	f00a f842 	bl	2400dba0 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
24003b1c:	2201      	movs	r2, #1
24003b1e:	491d      	ldr	r1, [pc, #116]	; (24003b94 <main+0xb34>)
24003b20:	481d      	ldr	r0, [pc, #116]	; (24003b98 <main+0xb38>)
24003b22:	f00c fa1b 	bl	2400ff5c <f_mount>
24003b26:	9b03      	ldr	r3, [sp, #12]
24003b28:	2800      	cmp	r0, #0
24003b2a:	f000 809f 	beq.w	24003c6c <main+0xc0c>
		loadFailed = 1;
24003b2e:	2301      	movs	r3, #1
24003b30:	4a16      	ldr	r2, [pc, #88]	; (24003b8c <main+0xb2c>)
24003b32:	7013      	strb	r3, [r2, #0]
	diskBusy = 0;
24003b34:	2200      	movs	r2, #0
24003b36:	4b16      	ldr	r3, [pc, #88]	; (24003b90 <main+0xb30>)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
24003b38:	2101      	movs	r1, #1
24003b3a:	480d      	ldr	r0, [pc, #52]	; (24003b70 <main+0xb10>)
	diskBusy = 0;
24003b3c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
24003b3e:	f003 fbcd 	bl	240072dc <HAL_GPIO_WritePin>
	return found;
24003b42:	e71f      	b.n	24003984 <main+0x924>
24003b44:	38000040 	.word	0x38000040
24003b48:	2001cb10 	.word	0x2001cb10
24003b4c:	4f000000 	.word	0x4f000000
24003b50:	30000800 	.word	0x30000800
24003b54:	2001ca70 	.word	0x2001ca70
24003b58:	3000000d 	.word	0x3000000d
24003b5c:	30000000 	.word	0x30000000
24003b60:	2001c6e0 	.word	0x2001c6e0
24003b64:	2001c778 	.word	0x2001c778
24003b68:	20013f30 	.word	0x20013f30
24003b6c:	20014172 	.word	0x20014172
24003b70:	58020800 	.word	0x58020800
24003b74:	2001c5d8 	.word	0x2001c5d8
24003b78:	20018fa8 	.word	0x20018fa8
24003b7c:	2001a0e8 	.word	0x2001a0e8
24003b80:	2001632e 	.word	0x2001632e
24003b84:	58020400 	.word	0x58020400
24003b88:	2001a0e6 	.word	0x2001a0e6
24003b8c:	20018360 	.word	0x20018360
24003b90:	200141ac 	.word	0x200141ac
24003b94:	2001dbe4 	.word	0x2001dbe4
24003b98:	2001d784 	.word	0x2001d784
24003b9c:	2001a0f0 	.word	0x2001a0f0
24003ba0:	2001a0e7 	.word	0x2001a0e7
24003ba4:	2401c680 	.word	0x2401c680
24003ba8:	2001d9b8 	.word	0x2001d9b8
24003bac:	200004b8 	.word	0x200004b8
24003bb0:	20013f74 	.word	0x20013f74
24003bb4:	2001a0ec 	.word	0x2001a0ec
24003bb8:	2001416c 	.word	0x2001416c
24003bbc:	2001a100 	.word	0x2001a100
				char finalString[10] = "brain.bin";
24003bc0:	4a73      	ldr	r2, [pc, #460]	; (24003d90 <main+0xd30>)
24003bc2:	ae0b      	add	r6, sp, #44	; 0x2c
24003bc4:	ca07      	ldmia	r2, {r0, r1, r2}
				res = f_findfirst(&dir, &fno, SDPath, finalString);
24003bc6:	4633      	mov	r3, r6
				char finalString[10] = "brain.bin";
24003bc8:	c603      	stmia	r6!, {r0, r1}
				res = f_findfirst(&dir, &fno, SDPath, finalString);
24003bca:	4972      	ldr	r1, [pc, #456]	; (24003d94 <main+0xd34>)
				char finalString[10] = "brain.bin";
24003bcc:	8032      	strh	r2, [r6, #0]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
24003bce:	4872      	ldr	r0, [pc, #456]	; (24003d98 <main+0xd38>)
24003bd0:	4a72      	ldr	r2, [pc, #456]	; (24003d9c <main+0xd3c>)
24003bd2:	f00c fedb 	bl	2401098c <f_findfirst>
				if(res == FR_OK)
24003bd6:	2800      	cmp	r0, #0
24003bd8:	f47f af17 	bne.w	24003a0a <main+0x9aa>
					if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
24003bdc:	2211      	movs	r2, #17
24003bde:	4970      	ldr	r1, [pc, #448]	; (24003da0 <main+0xd40>)
24003be0:	4870      	ldr	r0, [pc, #448]	; (24003da4 <main+0xd44>)
24003be2:	f00c fa07 	bl	2400fff4 <f_open>
24003be6:	2800      	cmp	r0, #0
24003be8:	f47f af0f 	bne.w	24003a0a <main+0x9aa>
						brainFirmwareSize = f_size(&SDFile);
24003bec:	4b6d      	ldr	r3, [pc, #436]	; (24003da4 <main+0xd44>)
						f_read(&SDFile, &brainFirmwareBuffer, brainFirmwareSize, &bytesRead);
24003bee:	496e      	ldr	r1, [pc, #440]	; (24003da8 <main+0xd48>)
						brainFirmwareSize = f_size(&SDFile);
24003bf0:	68da      	ldr	r2, [r3, #12]
24003bf2:	4b6e      	ldr	r3, [pc, #440]	; (24003dac <main+0xd4c>)
						f_read(&SDFile, &brainFirmwareBuffer, brainFirmwareSize, &bytesRead);
24003bf4:	486b      	ldr	r0, [pc, #428]	; (24003da4 <main+0xd44>)
						brainFirmwareSize = f_size(&SDFile);
24003bf6:	601a      	str	r2, [r3, #0]
						f_read(&SDFile, &brainFirmwareBuffer, brainFirmwareSize, &bytesRead);
24003bf8:	ab08      	add	r3, sp, #32
24003bfa:	f00c fb5d 	bl	240102b8 <f_read>
						f_close(&SDFile);
24003bfe:	4869      	ldr	r0, [pc, #420]	; (24003da4 <main+0xd44>)
24003c00:	f00c fdc4 	bl	2401078c <f_close>
						for (uint_fast16_t i = 0; i< 700; i++)
24003c04:	4b6a      	ldr	r3, [pc, #424]	; (24003db0 <main+0xd50>)
24003c06:	1c5a      	adds	r2, r3, #1
24003c08:	f1c2 0001 	rsb	r0, r2, #1
24003c0c:	18c2      	adds	r2, r0, r3
							memoryTest[i] = brainFirmwareBuffer[i];
24003c0e:	4e69      	ldr	r6, [pc, #420]	; (24003db4 <main+0xd54>)
24003c10:	f813 1f01 	ldrb.w	r1, [r3, #1]!
24003c14:	54b1      	strb	r1, [r6, r2]
						for (uint_fast16_t i = 0; i< 700; i++)
24003c16:	4a68      	ldr	r2, [pc, #416]	; (24003db8 <main+0xd58>)
24003c18:	4293      	cmp	r3, r2
24003c1a:	d1f7      	bne.n	24003c0c <main+0xbac>
						foundBrainFirmware = 1;
24003c1c:	2301      	movs	r3, #1
24003c1e:	4a67      	ldr	r2, [pc, #412]	; (24003dbc <main+0xd5c>)
24003c20:	7013      	strb	r3, [r2, #0]
						brainFirmwareBufferIndex = 0;
24003c22:	2300      	movs	r3, #0
24003c24:	4a66      	ldr	r2, [pc, #408]	; (24003dc0 <main+0xd60>)
24003c26:	6013      	str	r3, [r2, #0]
24003c28:	e6ef      	b.n	24003a0a <main+0x9aa>
					finalString[2] = charBuf[1];
24003c2a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
					strcat(finalString, ".ebp");
24003c2e:	a80b      	add	r0, sp, #44	; 0x2c
					finalString[2] = charBuf[1];
24003c30:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
					finalString[1] = charBuf[0];
24003c34:	f89d 3020 	ldrb.w	r3, [sp, #32]
24003c38:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
					finalString[0] = '0';
24003c3c:	2330      	movs	r3, #48	; 0x30
24003c3e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
					strcat(finalString, ".ebp");
24003c42:	f7fc fb49 	bl	240002d8 <strlen>
24003c46:	4a5f      	ldr	r2, [pc, #380]	; (24003dc4 <main+0xd64>)
24003c48:	4603      	mov	r3, r0
24003c4a:	a90b      	add	r1, sp, #44	; 0x2c
24003c4c:	6810      	ldr	r0, [r2, #0]
24003c4e:	7912      	ldrb	r2, [r2, #4]
24003c50:	50c8      	str	r0, [r1, r3]
24003c52:	440b      	add	r3, r1
24003c54:	711a      	strb	r2, [r3, #4]
24003c56:	e724      	b.n	24003aa2 <main+0xa42>
					f_write(&SDFile, &buffer, fileSize, &bytesRead);
24003c58:	9a03      	ldr	r2, [sp, #12]
24003c5a:	ab07      	add	r3, sp, #28
24003c5c:	495a      	ldr	r1, [pc, #360]	; (24003dc8 <main+0xd68>)
24003c5e:	4851      	ldr	r0, [pc, #324]	; (24003da4 <main+0xd44>)
24003c60:	f00c fc50 	bl	24010504 <f_write>
					f_close(&SDFile);
24003c64:	484f      	ldr	r0, [pc, #316]	; (24003da4 <main+0xd44>)
24003c66:	f00c fd91 	bl	2401078c <f_close>
24003c6a:	e722      	b.n	24003ab2 <main+0xa52>
			itoa(numberToLoad, charBuf, 10);
24003c6c:	220a      	movs	r2, #10
24003c6e:	4618      	mov	r0, r3
24003c70:	a908      	add	r1, sp, #32
24003c72:	f015 fd13 	bl	2401969c <itoa>
			int len = ((strlen(charBuf)));
24003c76:	a808      	add	r0, sp, #32
24003c78:	f7fc fb2e 	bl	240002d8 <strlen>
			if (len == 1)
24003c7c:	2801      	cmp	r0, #1
			int len = ((strlen(charBuf)));
24003c7e:	4602      	mov	r2, r0
			if (len == 1)
24003c80:	d051      	beq.n	24003d26 <main+0xcc6>
				strcat(charBuf, "*.ebp");
24003c82:	4952      	ldr	r1, [pc, #328]	; (24003dcc <main+0xd6c>)
24003c84:	ab08      	add	r3, sp, #32
24003c86:	6808      	ldr	r0, [r1, #0]
24003c88:	8889      	ldrh	r1, [r1, #4]
24003c8a:	5098      	str	r0, [r3, r2]
24003c8c:	4413      	add	r3, r2
				strcpy(finalString, charBuf);
24003c8e:	a80b      	add	r0, sp, #44	; 0x2c
24003c90:	3206      	adds	r2, #6
				strcat(charBuf, "*.ebp");
24003c92:	8099      	strh	r1, [r3, #4]
				strcpy(finalString, charBuf);
24003c94:	a908      	add	r1, sp, #32
24003c96:	f015 fd77 	bl	24019788 <memcpy>
			res = f_findfirst(&dir, &fno, SDPath, finalString);
24003c9a:	ab0b      	add	r3, sp, #44	; 0x2c
24003c9c:	4a3f      	ldr	r2, [pc, #252]	; (24003d9c <main+0xd3c>)
24003c9e:	493d      	ldr	r1, [pc, #244]	; (24003d94 <main+0xd34>)
24003ca0:	483d      	ldr	r0, [pc, #244]	; (24003d98 <main+0xd38>)
24003ca2:	f00c fe73 	bl	2401098c <f_findfirst>
			if(res == FR_OK)
24003ca6:	2800      	cmp	r0, #0
24003ca8:	f47f af41 	bne.w	24003b2e <main+0xace>
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
24003cac:	2211      	movs	r2, #17
24003cae:	493c      	ldr	r1, [pc, #240]	; (24003da0 <main+0xd40>)
24003cb0:	483c      	ldr	r0, [pc, #240]	; (24003da4 <main+0xd44>)
24003cb2:	f00c f99f 	bl	2400fff4 <f_open>
24003cb6:	4606      	mov	r6, r0
24003cb8:	2800      	cmp	r0, #0
24003cba:	f47f af38 	bne.w	24003b2e <main+0xace>
					f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
24003cbe:	4a39      	ldr	r2, [pc, #228]	; (24003da4 <main+0xd44>)
24003cc0:	ab07      	add	r3, sp, #28
24003cc2:	4941      	ldr	r1, [pc, #260]	; (24003dc8 <main+0xd68>)
24003cc4:	68d2      	ldr	r2, [r2, #12]
24003cc6:	4837      	ldr	r0, [pc, #220]	; (24003da4 <main+0xd44>)
24003cc8:	f00c faf6 	bl	240102b8 <f_read>
					presetWaitingToParse = bytesRead;
24003ccc:	9b07      	ldr	r3, [sp, #28]
					f_close(&SDFile);
24003cce:	4835      	ldr	r0, [pc, #212]	; (24003da4 <main+0xd44>)
					presetWaitingToParse = bytesRead;
24003cd0:	f8c9 3000 	str.w	r3, [r9]
					f_close(&SDFile);
24003cd4:	f00c fd5a 	bl	2401078c <f_close>
	  	  i2cSending = 1;
24003cd8:	2301      	movs	r3, #1
24003cda:	4a3d      	ldr	r2, [pc, #244]	; (24003dd0 <main+0xd70>)
24003cdc:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
24003cde:	b672      	cpsid	i
	  	  HAL_I2C_Master_Transmit(&hi2c1, 34<<1, buffer, 4096, 10000);
24003ce0:	f242 7310 	movw	r3, #10000	; 0x2710
24003ce4:	4a38      	ldr	r2, [pc, #224]	; (24003dc8 <main+0xd68>)
24003ce6:	2144      	movs	r1, #68	; 0x44
24003ce8:	483a      	ldr	r0, [pc, #232]	; (24003dd4 <main+0xd74>)
24003cea:	9300      	str	r3, [sp, #0]
24003cec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
24003cf0:	f003 fc22 	bl	24007538 <HAL_I2C_Master_Transmit>
  __ASM volatile ("cpsie i" : : : "memory");
24003cf4:	b662      	cpsie	i
	  	i2cSending = 0;
24003cf6:	4a36      	ldr	r2, [pc, #216]	; (24003dd0 <main+0xd70>)
24003cf8:	7016      	strb	r6, [r2, #0]
24003cfa:	e71b      	b.n	24003b34 <main+0xad4>
24003cfc:	4b36      	ldr	r3, [pc, #216]	; (24003dd8 <main+0xd78>)
				audioOutBuffer[i + 1] = 0;
24003cfe:	e9c3 6600 	strd	r6, r6, [r3]
			for (uint_fast16_t i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
24003d02:	3308      	adds	r3, #8
24003d04:	429c      	cmp	r4, r3
24003d06:	d1fa      	bne.n	24003cfe <main+0xc9e>
24003d08:	e66b      	b.n	240039e2 <main+0x982>
24003d0a:	4b33      	ldr	r3, [pc, #204]	; (24003dd8 <main+0xd78>)
					audioOutBuffer[i + 1] = 0;
24003d0c:	e9c3 6600 	strd	r6, r6, [r3]
				for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
24003d10:	3308      	adds	r3, #8
24003d12:	42a3      	cmp	r3, r4
24003d14:	d1fa      	bne.n	24003d0c <main+0xcac>
24003d16:	e6a2      	b.n	24003a5e <main+0x9fe>
24003d18:	4a2f      	ldr	r2, [pc, #188]	; (24003dd8 <main+0xd78>)
			audioOutBuffer[i + 1] = 0;
24003d1a:	e9c2 6600 	strd	r6, r6, [r2]
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
24003d1e:	3208      	adds	r2, #8
24003d20:	42a2      	cmp	r2, r4
24003d22:	d1fa      	bne.n	24003d1a <main+0xcba>
24003d24:	e6eb      	b.n	24003afe <main+0xa9e>
				finalString[2] = charBuf[1];
24003d26:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
				strcat(finalString, "*.ebp");
24003d2a:	a80b      	add	r0, sp, #44	; 0x2c
				finalString[2] = charBuf[1];
24003d2c:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
				finalString[1] = charBuf[0];
24003d30:	f89d 3020 	ldrb.w	r3, [sp, #32]
24003d34:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
				finalString[0] = '0';
24003d38:	2330      	movs	r3, #48	; 0x30
24003d3a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
				strcat(finalString, "*.ebp");
24003d3e:	f7fc facb 	bl	240002d8 <strlen>
24003d42:	4a22      	ldr	r2, [pc, #136]	; (24003dcc <main+0xd6c>)
24003d44:	4603      	mov	r3, r0
24003d46:	a90b      	add	r1, sp, #44	; 0x2c
24003d48:	6810      	ldr	r0, [r2, #0]
24003d4a:	8892      	ldrh	r2, [r2, #4]
24003d4c:	50c8      	str	r0, [r1, r3]
24003d4e:	440b      	add	r3, r1
24003d50:	809a      	strh	r2, [r3, #4]
24003d52:	e7a2      	b.n	24003c9a <main+0xc3a>
	  getPresetNamesFromSDCard();
24003d54:	f7fe fa50 	bl	240021f8 <getPresetNamesFromSDCard>
	  diskBusy = 1;
24003d58:	f7ff bb07 	b.w	2400336a <main+0x30a>
    	HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 4096);
24003d5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24003d60:	4919      	ldr	r1, [pc, #100]	; (24003dc8 <main+0xd68>)
24003d62:	481c      	ldr	r0, [pc, #112]	; (24003dd4 <main+0xd74>)
24003d64:	f003 fdb4 	bl	240078d0 <HAL_I2C_Slave_Receive_IT>
24003d68:	f7ff ba78 	b.w	2400325c <main+0x1fc>
	  	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
24003d6c:	950c      	str	r5, [sp, #48]	; 0x30
	  	  GPIO_InitStruct.Pin = GPIO_PIN_12;
24003d6e:	f44f 5580 	mov.w	r5, #4096	; 0x1000
	  	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24003d72:	a90b      	add	r1, sp, #44	; 0x2c
24003d74:	4819      	ldr	r0, [pc, #100]	; (24003ddc <main+0xd7c>)
		GPIO_InitTypeDef GPIO_InitStruct = {0};
24003d76:	940f      	str	r4, [sp, #60]	; 0x3c
	  	  GPIO_InitStruct.Pin = GPIO_PIN_12;
24003d78:	950b      	str	r5, [sp, #44]	; 0x2c
		GPIO_InitTypeDef GPIO_InitStruct = {0};
24003d7a:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
	  	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24003d7e:	f003 f95d 	bl	2400703c <HAL_GPIO_Init>
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24003d82:	4622      	mov	r2, r4
24003d84:	4629      	mov	r1, r5
24003d86:	4815      	ldr	r0, [pc, #84]	; (24003ddc <main+0xd7c>)
24003d88:	f003 faa8 	bl	240072dc <HAL_GPIO_WritePin>
24003d8c:	f7ff ba5d 	b.w	2400324a <main+0x1ea>
24003d90:	2401c688 	.word	0x2401c688
24003d94:	20016214 	.word	0x20016214
24003d98:	20014174 	.word	0x20014174
24003d9c:	2001dbe4 	.word	0x2001dbe4
24003da0:	2001622a 	.word	0x2001622a
24003da4:	2001d9b8 	.word	0x2001d9b8
24003da8:	c1e00000 	.word	0xc1e00000
24003dac:	20014168 	.word	0x20014168
24003db0:	c1dfffff 	.word	0xc1dfffff
24003db4:	20018ce4 	.word	0x20018ce4
24003db8:	c1e002bb 	.word	0xc1e002bb
24003dbc:	2001632c 	.word	0x2001632c
24003dc0:	2001415c 	.word	0x2001415c
24003dc4:	2401c680 	.word	0x2401c680
24003dc8:	30042380 	.word	0x30042380
24003dcc:	2401c4f8 	.word	0x2401c4f8
24003dd0:	2001632e 	.word	0x2001632e
24003dd4:	200140b0 	.word	0x200140b0
24003dd8:	30000000 	.word	0x30000000
24003ddc:	58020400 	.word	0x58020400

24003de0 <HAL_GPIO_EXTI_Callback>:
  if(GPIO_Pin == GPIO_PIN_6) {
24003de0:	2840      	cmp	r0, #64	; 0x40
24003de2:	d000      	beq.n	24003de6 <HAL_GPIO_EXTI_Callback+0x6>
}
24003de4:	4770      	bx	lr
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0)
24003de6:	4601      	mov	r1, r0
24003de8:	4801      	ldr	r0, [pc, #4]	; (24003df0 <HAL_GPIO_EXTI_Callback+0x10>)
24003dea:	f003 ba71 	b.w	240072d0 <HAL_GPIO_ReadPin>
24003dee:	bf00      	nop
24003df0:	58020400 	.word	0x58020400

24003df4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
24003df4:	4770      	bx	lr
24003df6:	bf00      	nop

24003df8 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
24003df8:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
24003dfa:	4806      	ldr	r0, [pc, #24]	; (24003e14 <MX_RNG_Init+0x1c>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
24003dfc:	2300      	movs	r3, #0
24003dfe:	4a06      	ldr	r2, [pc, #24]	; (24003e18 <MX_RNG_Init+0x20>)
24003e00:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
24003e04:	f006 fa3a 	bl	2400a27c <HAL_RNG_Init>
24003e08:	b900      	cbnz	r0, 24003e0c <MX_RNG_Init+0x14>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
24003e0a:	bd08      	pop	{r3, pc}
24003e0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
24003e10:	f7ff bff0 	b.w	24003df4 <Error_Handler>
24003e14:	2001c5d8 	.word	0x2001c5d8
24003e18:	48021800 	.word	0x48021800

24003e1c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
24003e1c:	b510      	push	{r4, lr}
24003e1e:	b0b2      	sub	sp, #200	; 0xc8
24003e20:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24003e22:	22c0      	movs	r2, #192	; 0xc0
24003e24:	2100      	movs	r1, #0
24003e26:	a802      	add	r0, sp, #8
24003e28:	f015 fc7c 	bl	24019724 <memset>
  if(rngHandle->Instance==RNG)
24003e2c:	4b10      	ldr	r3, [pc, #64]	; (24003e70 <HAL_RNG_MspInit+0x54>)
24003e2e:	6822      	ldr	r2, [r4, #0]
24003e30:	429a      	cmp	r2, r3
24003e32:	d001      	beq.n	24003e38 <HAL_RNG_MspInit+0x1c>
    __HAL_RCC_RNG_CLK_ENABLE();
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
24003e34:	b032      	add	sp, #200	; 0xc8
24003e36:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
24003e38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
24003e3c:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24003e3e:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
24003e40:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24003e44:	f005 f826 	bl	24008e94 <HAL_RCCEx_PeriphCLKConfig>
24003e48:	b970      	cbnz	r0, 24003e68 <HAL_RNG_MspInit+0x4c>
    __HAL_RCC_RNG_CLK_ENABLE();
24003e4a:	4b0a      	ldr	r3, [pc, #40]	; (24003e74 <HAL_RNG_MspInit+0x58>)
24003e4c:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
24003e50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
24003e54:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
24003e58:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
24003e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
24003e60:	9301      	str	r3, [sp, #4]
24003e62:	9b01      	ldr	r3, [sp, #4]
}
24003e64:	b032      	add	sp, #200	; 0xc8
24003e66:	bd10      	pop	{r4, pc}
      Error_Handler();
24003e68:	f7ff ffc4 	bl	24003df4 <Error_Handler>
24003e6c:	e7ed      	b.n	24003e4a <HAL_RNG_MspInit+0x2e>
24003e6e:	bf00      	nop
24003e70:	48021800 	.word	0x48021800
24003e74:	58024400 	.word	0x58024400

24003e78 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
24003e78:	b510      	push	{r4, lr}

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
24003e7a:	4817      	ldr	r0, [pc, #92]	; (24003ed8 <MX_SAI1_Init+0x60>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
24003e7c:	2200      	movs	r2, #0
  hsai_BlockA1.Instance = SAI1_Block_A;
24003e7e:	4c17      	ldr	r4, [pc, #92]	; (24003edc <MX_SAI1_Init+0x64>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
24003e80:	2101      	movs	r1, #1
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
24003e82:	2302      	movs	r3, #2
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
24003e84:	61c2      	str	r2, [r0, #28]
  hsai_BlockA1.Instance = SAI1_Block_A;
24003e86:	6004      	str	r4, [r0, #0]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
24003e88:	f64b 3480 	movw	r4, #48000	; 0xbb80
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
24003e8c:	60c2      	str	r2, [r0, #12]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
24003e8e:	6204      	str	r4, [r0, #32]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
24003e90:	e9c0 1201 	strd	r1, r2, [r0, #4]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
24003e94:	e9c0 2205 	strd	r2, r2, [r0, #20]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
24003e98:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
24003e9c:	461a      	mov	r2, r3
24003e9e:	f006 fc3d 	bl	2400a71c <HAL_SAI_InitProtocol>
24003ea2:	b990      	cbnz	r0, 24003eca <MX_SAI1_Init+0x52>
  {
    Error_Handler();
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
24003ea4:	480e      	ldr	r0, [pc, #56]	; (24003ee0 <MX_SAI1_Init+0x68>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
24003ea6:	2200      	movs	r2, #0
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
24003ea8:	2302      	movs	r3, #2
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
24003eaa:	2101      	movs	r1, #1
  hsai_BlockB1.Instance = SAI1_Block_B;
24003eac:	4c0d      	ldr	r4, [pc, #52]	; (24003ee4 <MX_SAI1_Init+0x6c>)
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
24003eae:	6142      	str	r2, [r0, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
24003eb0:	61c2      	str	r2, [r0, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
24003eb2:	60c2      	str	r2, [r0, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
24003eb4:	6342      	str	r2, [r0, #52]	; 0x34
  hsai_BlockB1.Instance = SAI1_Block_B;
24003eb6:	6004      	str	r4, [r0, #0]
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
24003eb8:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
24003ebc:	461a      	mov	r2, r3
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
24003ebe:	e9c0 3101 	strd	r3, r1, [r0, #4]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
24003ec2:	f006 fc2b 	bl	2400a71c <HAL_SAI_InitProtocol>
24003ec6:	b918      	cbnz	r0, 24003ed0 <MX_SAI1_Init+0x58>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
24003ec8:	bd10      	pop	{r4, pc}
    Error_Handler();
24003eca:	f7ff ff93 	bl	24003df4 <Error_Handler>
24003ece:	e7e9      	b.n	24003ea4 <MX_SAI1_Init+0x2c>
}
24003ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
24003ed4:	f7ff bf8e 	b.w	24003df4 <Error_Handler>
24003ed8:	2001c6e0 	.word	0x2001c6e0
24003edc:	40015804 	.word	0x40015804
24003ee0:	2001c778 	.word	0x2001c778
24003ee4:	40015824 	.word	0x40015824

24003ee8 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
24003ee8:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
24003eea:	4a5b      	ldr	r2, [pc, #364]	; (24004058 <HAL_SAI_MspInit+0x170>)
{
24003eec:	b08c      	sub	sp, #48	; 0x30
    if(saiHandle->Instance==SAI1_Block_A)
24003eee:	6803      	ldr	r3, [r0, #0]
{
24003ef0:	4604      	mov	r4, r0
    if(saiHandle->Instance==SAI1_Block_A)
24003ef2:	4293      	cmp	r3, r2
24003ef4:	d004      	beq.n	24003f00 <HAL_SAI_MspInit+0x18>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
    }
    if(saiHandle->Instance==SAI1_Block_B)
24003ef6:	4a59      	ldr	r2, [pc, #356]	; (2400405c <HAL_SAI_MspInit+0x174>)
24003ef8:	4293      	cmp	r3, r2
24003efa:	d04d      	beq.n	24003f98 <HAL_SAI_MspInit+0xb0>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
    }
}
24003efc:	b00c      	add	sp, #48	; 0x30
24003efe:	bd70      	pop	{r4, r5, r6, pc}
    if (SAI1_client == 0)
24003f00:	4b57      	ldr	r3, [pc, #348]	; (24004060 <HAL_SAI_MspInit+0x178>)
24003f02:	681a      	ldr	r2, [r3, #0]
24003f04:	2a00      	cmp	r2, #0
24003f06:	f000 808f 	beq.w	24004028 <HAL_SAI_MspInit+0x140>
    SAI1_client ++;
24003f0a:	3201      	adds	r2, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24003f0c:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24003f0e:	2102      	movs	r1, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
24003f10:	2074      	movs	r0, #116	; 0x74
    SAI1_client ++;
24003f12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
24003f14:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
24003f16:	9007      	str	r0, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
24003f18:	910a      	str	r1, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24003f1a:	4852      	ldr	r0, [pc, #328]	; (24004064 <HAL_SAI_MspInit+0x17c>)
    hdma_sai1_a.Instance = DMA1_Stream1;
24003f1c:	4d52      	ldr	r5, [pc, #328]	; (24004068 <HAL_SAI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
24003f1e:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24003f20:	e9cd 1608 	strd	r1, r6, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24003f24:	a907      	add	r1, sp, #28
24003f26:	f003 f889 	bl	2400703c <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
24003f2a:	4a50      	ldr	r2, [pc, #320]	; (2400406c <HAL_SAI_MspInit+0x184>)
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
24003f2c:	2357      	movs	r3, #87	; 0x57
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
24003f2e:	4628      	mov	r0, r5
    hdma_sai1_a.Instance = DMA1_Stream1;
24003f30:	602a      	str	r2, [r5, #0]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
24003f32:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
24003f36:	606b      	str	r3, [r5, #4]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
24003f38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
24003f3c:	612a      	str	r2, [r5, #16]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
24003f3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
24003f42:	616b      	str	r3, [r5, #20]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
24003f44:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
24003f48:	60ae      	str	r6, [r5, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
24003f4a:	60ee      	str	r6, [r5, #12]
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
24003f4c:	62ae      	str	r6, [r5, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
24003f4e:	62ee      	str	r6, [r5, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
24003f50:	632e      	str	r6, [r5, #48]	; 0x30
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
24003f52:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
24003f56:	f44f 3240 	mov.w	r2, #196608	; 0x30000
24003f5a:	2304      	movs	r3, #4
24003f5c:	e9c5 2308 	strd	r2, r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
24003f60:	f001 fb56 	bl	24005610 <HAL_DMA_Init>
24003f64:	2800      	cmp	r0, #0
24003f66:	d173      	bne.n	24004050 <HAL_SAI_MspInit+0x168>
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
24003f68:	2106      	movs	r1, #6
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
24003f6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    pSyncConfig.SyncEnable = DISABLE;
24003f6e:	f44f 7280 	mov.w	r2, #256	; 0x100
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_a, &pSyncConfig) != HAL_OK)
24003f72:	483d      	ldr	r0, [pc, #244]	; (24004068 <HAL_SAI_MspInit+0x180>)
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
24003f74:	e9cd 1303 	strd	r1, r3, [sp, #12]
    pSyncConfig.RequestNumber = 1;
24003f78:	2301      	movs	r3, #1
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_a, &pSyncConfig) != HAL_OK)
24003f7a:	a903      	add	r1, sp, #12
    pSyncConfig.SyncEnable = DISABLE;
24003f7c:	f8ad 2014 	strh.w	r2, [sp, #20]
    pSyncConfig.RequestNumber = 1;
24003f80:	9306      	str	r3, [sp, #24]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_a, &pSyncConfig) != HAL_OK)
24003f82:	f002 fff1 	bl	24006f68 <HAL_DMAEx_ConfigMuxSync>
24003f86:	2800      	cmp	r0, #0
24003f88:	d15f      	bne.n	2400404a <HAL_SAI_MspInit+0x162>
    if(saiHandle->Instance==SAI1_Block_B)
24003f8a:	4a34      	ldr	r2, [pc, #208]	; (2400405c <HAL_SAI_MspInit+0x174>)
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
24003f8c:	63ac      	str	r4, [r5, #56]	; 0x38
    if(saiHandle->Instance==SAI1_Block_B)
24003f8e:	6823      	ldr	r3, [r4, #0]
24003f90:	4293      	cmp	r3, r2
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
24003f92:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
    if(saiHandle->Instance==SAI1_Block_B)
24003f96:	d1b1      	bne.n	24003efc <HAL_SAI_MspInit+0x14>
      if (SAI1_client == 0)
24003f98:	4b31      	ldr	r3, [pc, #196]	; (24004060 <HAL_SAI_MspInit+0x178>)
24003f9a:	681a      	ldr	r2, [r3, #0]
24003f9c:	2a00      	cmp	r2, #0
24003f9e:	d035      	beq.n	2400400c <HAL_SAI_MspInit+0x124>
    SAI1_client ++;
24003fa0:	3201      	adds	r2, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24003fa2:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24003fa4:	2102      	movs	r1, #2
    GPIO_InitStruct.Pin = GPIO_PIN_3;
24003fa6:	2008      	movs	r0, #8
    SAI1_client ++;
24003fa8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
24003faa:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_3;
24003fac:	9007      	str	r0, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
24003fae:	910a      	str	r1, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24003fb0:	482c      	ldr	r0, [pc, #176]	; (24004064 <HAL_SAI_MspInit+0x17c>)
    hdma_sai1_b.Instance = DMA1_Stream2;
24003fb2:	4d2f      	ldr	r5, [pc, #188]	; (24004070 <HAL_SAI_MspInit+0x188>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
24003fb4:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24003fb6:	e9cd 1608 	strd	r1, r6, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24003fba:	a907      	add	r1, sp, #28
24003fbc:	f003 f83e 	bl	2400703c <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
24003fc0:	4a2c      	ldr	r2, [pc, #176]	; (24004074 <HAL_SAI_MspInit+0x18c>)
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
24003fc2:	2358      	movs	r3, #88	; 0x58
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
24003fc4:	4628      	mov	r0, r5
    hdma_sai1_b.Instance = DMA1_Stream2;
24003fc6:	602a      	str	r2, [r5, #0]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
24003fc8:	2240      	movs	r2, #64	; 0x40
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
24003fca:	606b      	str	r3, [r5, #4]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
24003fcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
24003fd0:	60aa      	str	r2, [r5, #8]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
24003fd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
24003fd6:	612b      	str	r3, [r5, #16]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
24003fd8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
24003fdc:	60ee      	str	r6, [r5, #12]
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
24003fde:	62ae      	str	r6, [r5, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
24003fe0:	62ee      	str	r6, [r5, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
24003fe2:	632e      	str	r6, [r5, #48]	; 0x30
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
24003fe4:	e9c5 2305 	strd	r2, r3, [r5, #20]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24003fe8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
24003fec:	f44f 7280 	mov.w	r2, #256	; 0x100
24003ff0:	e9c5 2307 	strd	r2, r3, [r5, #28]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
24003ff4:	2304      	movs	r3, #4
24003ff6:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
24003ff8:	f001 fb0a 	bl	24005610 <HAL_DMA_Init>
24003ffc:	bb10      	cbnz	r0, 24004044 <HAL_SAI_MspInit+0x15c>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
24003ffe:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
24004002:	63ac      	str	r4, [r5, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
24004004:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
24004008:	b00c      	add	sp, #48	; 0x30
2400400a:	bd70      	pop	{r4, r5, r6, pc}
       __HAL_RCC_SAI1_CLK_ENABLE();
2400400c:	491a      	ldr	r1, [pc, #104]	; (24004078 <HAL_SAI_MspInit+0x190>)
2400400e:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
24004012:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
24004016:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
2400401a:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
2400401e:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
24004022:	9102      	str	r1, [sp, #8]
24004024:	9902      	ldr	r1, [sp, #8]
24004026:	e7bb      	b.n	24003fa0 <HAL_SAI_MspInit+0xb8>
       __HAL_RCC_SAI1_CLK_ENABLE();
24004028:	4913      	ldr	r1, [pc, #76]	; (24004078 <HAL_SAI_MspInit+0x190>)
2400402a:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
2400402e:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
24004032:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
24004036:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
2400403a:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
2400403e:	9101      	str	r1, [sp, #4]
24004040:	9901      	ldr	r1, [sp, #4]
24004042:	e762      	b.n	24003f0a <HAL_SAI_MspInit+0x22>
      Error_Handler();
24004044:	f7ff fed6 	bl	24003df4 <Error_Handler>
24004048:	e7d9      	b.n	24003ffe <HAL_SAI_MspInit+0x116>
      Error_Handler();
2400404a:	f7ff fed3 	bl	24003df4 <Error_Handler>
2400404e:	e79c      	b.n	24003f8a <HAL_SAI_MspInit+0xa2>
      Error_Handler();
24004050:	f7ff fed0 	bl	24003df4 <Error_Handler>
24004054:	e788      	b.n	24003f68 <HAL_SAI_MspInit+0x80>
24004056:	bf00      	nop
24004058:	40015804 	.word	0x40015804
2400405c:	40015824 	.word	0x40015824
24004060:	2001c5ec 	.word	0x2001c5ec
24004064:	58021000 	.word	0x58021000
24004068:	2001c5f0 	.word	0x2001c5f0
2400406c:	40020028 	.word	0x40020028
24004070:	2001c668 	.word	0x2001c668
24004074:	40020040 	.word	0x40020040
24004078:	58024400 	.word	0x58024400

2400407c <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
2400407c:	b410      	push	{r4}
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
2400407e:	4b07      	ldr	r3, [pc, #28]	; (2400409c <MX_SDMMC1_SD_Init+0x20>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
24004080:	2200      	movs	r2, #0
  hsd1.Instance = SDMMC1;
24004082:	4c07      	ldr	r4, [pc, #28]	; (240040a0 <MX_SDMMC1_SD_Init+0x24>)
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
24004084:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 25;
24004088:	2119      	movs	r1, #25
  hsd1.Instance = SDMMC1;
2400408a:	e9c3 4200 	strd	r4, r2, [r3]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
2400408e:	e9c3 2002 	strd	r2, r0, [r3, #8]
  hsd1.Init.ClockDiv = 25;
24004092:	e9c3 2104 	strd	r2, r1, [r3, #16]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
24004096:	f85d 4b04 	ldr.w	r4, [sp], #4
2400409a:	4770      	bx	lr
2400409c:	2001c810 	.word	0x2001c810
240040a0:	52007000 	.word	0x52007000

240040a4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
240040a4:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
240040a6:	4b25      	ldr	r3, [pc, #148]	; (2400413c <HAL_SD_MspInit+0x98>)
{
240040a8:	b08a      	sub	sp, #40	; 0x28
  if(sdHandle->Instance==SDMMC1)
240040aa:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
240040ac:	2400      	movs	r4, #0
  if(sdHandle->Instance==SDMMC1)
240040ae:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
240040b0:	9408      	str	r4, [sp, #32]
240040b2:	e9cd 4404 	strd	r4, r4, [sp, #16]
240040b6:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(sdHandle->Instance==SDMMC1)
240040ba:	d001      	beq.n	240040c0 <HAL_SD_MspInit+0x1c>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
240040bc:	b00a      	add	sp, #40	; 0x28
240040be:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
240040c0:	4b1f      	ldr	r3, [pc, #124]	; (24004140 <HAL_SD_MspInit+0x9c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
240040c2:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
240040c4:	260c      	movs	r6, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
240040c6:	a904      	add	r1, sp, #16
    __HAL_RCC_SDMMC1_CLK_ENABLE();
240040c8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
240040cc:	481d      	ldr	r0, [pc, #116]	; (24004144 <HAL_SD_MspInit+0xa0>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
240040ce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
240040d2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
240040d6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
240040da:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
240040de:	9201      	str	r2, [sp, #4]
240040e0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
240040e2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240040e6:	f042 0204 	orr.w	r2, r2, #4
240040ea:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
240040ee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240040f2:	f002 0204 	and.w	r2, r2, #4
240040f6:	9202      	str	r2, [sp, #8]
240040f8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
240040fa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240040fe:	f042 0208 	orr.w	r2, r2, #8
24004102:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
24004106:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
    __HAL_RCC_GPIOD_CLK_ENABLE();
2400410a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
2400410e:	f003 0308 	and.w	r3, r3, #8
24004112:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
24004114:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
24004116:	e9cd 5607 	strd	r5, r6, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
2400411a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
2400411e:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24004120:	f002 ff8c 	bl	2400703c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
24004124:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24004126:	a904      	add	r1, sp, #16
24004128:	4807      	ldr	r0, [pc, #28]	; (24004148 <HAL_SD_MspInit+0xa4>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
2400412a:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
2400412c:	e9cd 3504 	strd	r3, r5, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
24004130:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24004134:	f002 ff82 	bl	2400703c <HAL_GPIO_Init>
}
24004138:	b00a      	add	sp, #40	; 0x28
2400413a:	bd70      	pop	{r4, r5, r6, pc}
2400413c:	52007000 	.word	0x52007000
24004140:	58024400 	.word	0x58024400
24004144:	58020800 	.word	0x58020800
24004148:	58020c00 	.word	0x58020c00
2400414c:	00000000 	.word	0x00000000

24004150 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
24004150:	4813      	ldr	r0, [pc, #76]	; (240041a0 <MX_SPI1_Init+0x50>)
24004152:	4a14      	ldr	r2, [pc, #80]	; (240041a4 <MX_SPI1_Init+0x54>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
24004154:	ed9f 7b10 	vldr	d7, [pc, #64]	; 24004198 <MX_SPI1_Init+0x48>
{
24004158:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_SLAVE;
2400415a:	2300      	movs	r3, #0
  hspi1.Instance = SPI1;
2400415c:	6002      	str	r2, [r0, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
2400415e:	2207      	movs	r2, #7
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
24004160:	6183      	str	r3, [r0, #24]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
24004162:	60c2      	str	r2, [r0, #12]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
24004164:	ed80 7b08 	vstr	d7, [r0, #32]
24004168:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
2400416c:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
24004170:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
24004174:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
24004178:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
2400417c:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
24004180:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
24004184:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
24004188:	f007 fcd2 	bl	2400bb30 <HAL_SPI_Init>
2400418c:	b900      	cbnz	r0, 24004190 <MX_SPI1_Init+0x40>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
2400418e:	bd08      	pop	{r3, pc}
24004190:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
24004194:	f7ff be2e 	b.w	24003df4 <Error_Handler>
	...
240041a0:	2001ca70 	.word	0x2001ca70
240041a4:	40013000 	.word	0x40013000

240041a8 <MX_SPI6_Init>:
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
240041a8:	4813      	ldr	r0, [pc, #76]	; (240041f8 <MX_SPI6_Init+0x50>)
240041aa:	4a14      	ldr	r2, [pc, #80]	; (240041fc <MX_SPI6_Init+0x54>)
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi6.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
240041ac:	ed9f 7b10 	vldr	d7, [pc, #64]	; 240041f0 <MX_SPI6_Init+0x48>
{
240041b0:	b508      	push	{r3, lr}
  hspi6.Init.Mode = SPI_MODE_SLAVE;
240041b2:	2300      	movs	r3, #0
  hspi6.Instance = SPI6;
240041b4:	6002      	str	r2, [r0, #0]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
240041b6:	2207      	movs	r2, #7
  hspi6.Init.NSS = SPI_NSS_HARD_INPUT;
240041b8:	6183      	str	r3, [r0, #24]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
240041ba:	60c2      	str	r2, [r0, #12]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
240041bc:	ed80 7b08 	vstr	d7, [r0, #32]
240041c0:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
240041c4:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
240041c8:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi6.Init.CRCPolynomial = 0x0;
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
240041cc:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
240041d0:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
240041d4:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
240041d8:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
240041dc:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
240041e0:	f007 fca6 	bl	2400bb30 <HAL_SPI_Init>
240041e4:	b900      	cbnz	r0, 240041e8 <MX_SPI6_Init+0x40>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
240041e6:	bd08      	pop	{r3, pc}
240041e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
240041ec:	f7ff be02 	b.w	24003df4 <Error_Handler>
	...
240041f8:	2001cb10 	.word	0x2001cb10
240041fc:	58001400 	.word	0x58001400

24004200 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
24004200:	b5f0      	push	{r4, r5, r6, r7, lr}
24004202:	b0bd      	sub	sp, #244	; 0xf4

  GPIO_InitTypeDef GPIO_InitStruct = {0};
24004204:	2100      	movs	r1, #0
{
24004206:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24004208:	22c0      	movs	r2, #192	; 0xc0
2400420a:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
2400420c:	910a      	str	r1, [sp, #40]	; 0x28
2400420e:	e9cd 1106 	strd	r1, r1, [sp, #24]
24004212:	e9cd 1108 	strd	r1, r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24004216:	f015 fa85 	bl	24019724 <memset>
  if(spiHandle->Instance==SPI1)
2400421a:	6823      	ldr	r3, [r4, #0]
2400421c:	4a8f      	ldr	r2, [pc, #572]	; (2400445c <HAL_SPI_MspInit+0x25c>)
2400421e:	4293      	cmp	r3, r2
24004220:	d005      	beq.n	2400422e <HAL_SPI_MspInit+0x2e>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI6)
24004222:	4a8f      	ldr	r2, [pc, #572]	; (24004460 <HAL_SPI_MspInit+0x260>)
24004224:	4293      	cmp	r3, r2
24004226:	f000 8097 	beq.w	24004358 <HAL_SPI_MspInit+0x158>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
2400422a:	b03d      	add	sp, #244	; 0xf4
2400422c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
2400422e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24004232:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24004234:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
24004236:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400423a:	f004 fe2b 	bl	24008e94 <HAL_RCCEx_PeriphCLKConfig>
2400423e:	2800      	cmp	r0, #0
24004240:	f040 80ff 	bne.w	24004442 <HAL_SPI_MspInit+0x242>
    __HAL_RCC_SPI1_CLK_ENABLE();
24004244:	4b87      	ldr	r3, [pc, #540]	; (24004464 <HAL_SPI_MspInit+0x264>)
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
24004246:	2600      	movs	r6, #0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
24004248:	2505      	movs	r5, #5
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
2400424a:	2703      	movs	r7, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
2400424c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24004250:	4885      	ldr	r0, [pc, #532]	; (24004468 <HAL_SPI_MspInit+0x268>)
    __HAL_RCC_SPI1_CLK_ENABLE();
24004252:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
24004256:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
2400425a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
2400425e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
24004262:	9201      	str	r2, [sp, #4]
24004264:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
24004266:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
2400426a:	f042 0202 	orr.w	r2, r2, #2
2400426e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24004272:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24004276:	f002 0202 	and.w	r2, r2, #2
2400427a:	9202      	str	r2, [sp, #8]
2400427c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
2400427e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24004282:	f042 0240 	orr.w	r2, r2, #64	; 0x40
24004286:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
2400428a:	2230      	movs	r2, #48	; 0x30
    __HAL_RCC_GPIOG_CLK_ENABLE();
2400428c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
24004290:	950a      	str	r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
24004292:	f003 0340 	and.w	r3, r3, #64	; 0x40
24004296:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
24004298:	2302      	movs	r3, #2
    __HAL_RCC_GPIOG_CLK_ENABLE();
2400429a:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2400429c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
2400429e:	e9cd 2306 	strd	r2, r3, [sp, #24]
240042a2:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240042a6:	f002 fec9 	bl	2400703c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
240042aa:	f44f 6240 	mov.w	r2, #3072	; 0xc00
240042ae:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
240042b0:	a906      	add	r1, sp, #24
240042b2:	486e      	ldr	r0, [pc, #440]	; (2400446c <HAL_SPI_MspInit+0x26c>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
240042b4:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
240042b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
240042ba:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
240042be:	f002 febd 	bl	2400703c <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Stream6;
240042c2:	4e6b      	ldr	r6, [pc, #428]	; (24004470 <HAL_SPI_MspInit+0x270>)
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
240042c4:	2300      	movs	r3, #0
    hdma_spi1_rx.Instance = DMA1_Stream6;
240042c6:	496b      	ldr	r1, [pc, #428]	; (24004474 <HAL_SPI_MspInit+0x274>)
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
240042c8:	2225      	movs	r2, #37	; 0x25
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
240042ca:	4630      	mov	r0, r6
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
240042cc:	e886 000e 	stmia.w	r6, {r1, r2, r3}
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
240042d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
240042d4:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
240042d8:	e9c6 3103 	strd	r3, r1, [r6, #12]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
240042dc:	e9c6 3305 	strd	r3, r3, [r6, #20]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
240042e0:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
240042e4:	61f2      	str	r2, [r6, #28]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
240042e6:	2204      	movs	r2, #4
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
240042e8:	e9c6 330b 	strd	r3, r3, [r6, #44]	; 0x2c
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
240042ec:	2301      	movs	r3, #1
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
240042ee:	e9c6 1208 	strd	r1, r2, [r6, #32]
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
240042f2:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
240042f4:	f001 f98c 	bl	24005610 <HAL_DMA_Init>
240042f8:	2800      	cmp	r0, #0
240042fa:	f040 809f 	bne.w	2400443c <HAL_SPI_MspInit+0x23c>
    hdma_spi1_tx.Instance = DMA1_Stream0;
240042fe:	4d5e      	ldr	r5, [pc, #376]	; (24004478 <HAL_SPI_MspInit+0x278>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
24004300:	2226      	movs	r2, #38	; 0x26
    hdma_spi1_tx.Instance = DMA1_Stream0;
24004302:	495e      	ldr	r1, [pc, #376]	; (2400447c <HAL_SPI_MspInit+0x27c>)
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
24004304:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
24004306:	606a      	str	r2, [r5, #4]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
24004308:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Instance = DMA1_Stream0;
2400430c:	6029      	str	r1, [r5, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
2400430e:	2140      	movs	r1, #64	; 0x40
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
24004310:	612a      	str	r2, [r5, #16]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24004312:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
24004316:	60eb      	str	r3, [r5, #12]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
24004318:	4628      	mov	r0, r5
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
2400431a:	616b      	str	r3, [r5, #20]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
2400431c:	60a9      	str	r1, [r5, #8]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
2400431e:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
24004322:	61ab      	str	r3, [r5, #24]
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
24004324:	62eb      	str	r3, [r5, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
24004326:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24004328:	2301      	movs	r3, #1
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
2400432a:	622a      	str	r2, [r5, #32]
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
2400432c:	2204      	movs	r2, #4
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
2400432e:	67e6      	str	r6, [r4, #124]	; 0x7c
24004330:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
24004332:	61e9      	str	r1, [r5, #28]
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24004334:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
24004338:	f001 f96a 	bl	24005610 <HAL_DMA_Init>
2400433c:	2800      	cmp	r0, #0
2400433e:	d17a      	bne.n	24004436 <HAL_SPI_MspInit+0x236>
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
24004340:	2200      	movs	r2, #0
24004342:	2101      	movs	r1, #1
24004344:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
24004346:	67a5      	str	r5, [r4, #120]	; 0x78
24004348:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
2400434a:	f000 ffcf 	bl	240052ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
2400434e:	2023      	movs	r0, #35	; 0x23
24004350:	f001 f80a 	bl	24005368 <HAL_NVIC_EnableIRQ>
}
24004354:	b03d      	add	sp, #244	; 0xf4
24004356:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
24004358:	f44f 4280 	mov.w	r2, #16384	; 0x4000
2400435c:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400435e:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
24004360:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24004364:	f004 fd96 	bl	24008e94 <HAL_RCCEx_PeriphCLKConfig>
24004368:	2800      	cmp	r0, #0
2400436a:	d16d      	bne.n	24004448 <HAL_SPI_MspInit+0x248>
    __HAL_RCC_SPI6_CLK_ENABLE();
2400436c:	4b3d      	ldr	r3, [pc, #244]	; (24004464 <HAL_SPI_MspInit+0x264>)
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
2400436e:	2008      	movs	r0, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24004370:	a906      	add	r1, sp, #24
    hdma_spi6_rx.Instance = BDMA_Channel0;
24004372:	4e43      	ldr	r6, [pc, #268]	; (24004480 <HAL_SPI_MspInit+0x280>)
    __HAL_RCC_SPI6_CLK_ENABLE();
24004374:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
24004378:	f042 0220 	orr.w	r2, r2, #32
2400437c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
24004380:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
24004384:	f002 0220 	and.w	r2, r2, #32
24004388:	9204      	str	r2, [sp, #16]
2400438a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
2400438c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24004390:	f042 0201 	orr.w	r2, r2, #1
24004394:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
24004398:	22f0      	movs	r2, #240	; 0xf0
    __HAL_RCC_GPIOA_CLK_ENABLE();
2400439a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
2400439e:	900a      	str	r0, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
240043a0:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
240043a4:	4837      	ldr	r0, [pc, #220]	; (24004484 <HAL_SPI_MspInit+0x284>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
240043a6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
240043a8:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
240043aa:	9d05      	ldr	r5, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
240043ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
240043b0:	2200      	movs	r2, #0
240043b2:	2302      	movs	r3, #2
240043b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
240043b8:	f002 fe40 	bl	2400703c <HAL_GPIO_Init>
    hdma_spi6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
240043bc:	2300      	movs	r3, #0
    hdma_spi6_rx.Instance = BDMA_Channel0;
240043be:	4932      	ldr	r1, [pc, #200]	; (24004488 <HAL_SPI_MspInit+0x288>)
    hdma_spi6_rx.Init.Request = BDMA_REQUEST_SPI6_RX;
240043c0:	220b      	movs	r2, #11
    if (HAL_DMA_Init(&hdma_spi6_rx) != HAL_OK)
240043c2:	4630      	mov	r0, r6
    hdma_spi6_rx.Init.Request = BDMA_REQUEST_SPI6_RX;
240043c4:	e9c6 1200 	strd	r1, r2, [r6]
    hdma_spi6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
240043c8:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
240043cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi6_rx.Init.Mode = DMA_CIRCULAR;
240043d0:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_spi6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
240043d4:	e9c6 3305 	strd	r3, r3, [r6, #20]
    hdma_spi6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
240043d8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
240043dc:	6131      	str	r1, [r6, #16]
    hdma_spi6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
240043de:	e9c6 2307 	strd	r2, r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_spi6_rx) != HAL_OK)
240043e2:	f001 f915 	bl	24005610 <HAL_DMA_Init>
240043e6:	2800      	cmp	r0, #0
240043e8:	d134      	bne.n	24004454 <HAL_SPI_MspInit+0x254>
    hdma_spi6_tx.Instance = BDMA_Channel1;
240043ea:	4d28      	ldr	r5, [pc, #160]	; (2400448c <HAL_SPI_MspInit+0x28c>)
    hdma_spi6_tx.Init.Request = BDMA_REQUEST_SPI6_TX;
240043ec:	220c      	movs	r2, #12
    hdma_spi6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
240043ee:	2300      	movs	r3, #0
    hdma_spi6_tx.Instance = BDMA_Channel1;
240043f0:	4927      	ldr	r1, [pc, #156]	; (24004490 <HAL_SPI_MspInit+0x290>)
    hdma_spi6_tx.Init.Request = BDMA_REQUEST_SPI6_TX;
240043f2:	606a      	str	r2, [r5, #4]
    hdma_spi6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
240043f4:	2240      	movs	r2, #64	; 0x40
    hdma_spi6_tx.Instance = BDMA_Channel1;
240043f6:	6029      	str	r1, [r5, #0]
    hdma_spi6_tx.Init.MemInc = DMA_MINC_ENABLE;
240043f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
240043fc:	60eb      	str	r3, [r5, #12]
    if (HAL_DMA_Init(&hdma_spi6_tx) != HAL_OK)
240043fe:	4628      	mov	r0, r5
    hdma_spi6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
24004400:	616b      	str	r3, [r5, #20]
    hdma_spi6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
24004402:	60aa      	str	r2, [r5, #8]
    hdma_spi6_tx.Init.Mode = DMA_CIRCULAR;
24004404:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_spi6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
24004408:	61ab      	str	r3, [r5, #24]
    hdma_spi6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
2400440a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi6_rx);
2400440e:	67e6      	str	r6, [r4, #124]	; 0x7c
24004410:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_spi6_tx.Init.MemInc = DMA_MINC_ENABLE;
24004412:	6129      	str	r1, [r5, #16]
    hdma_spi6_tx.Init.Mode = DMA_CIRCULAR;
24004414:	61ea      	str	r2, [r5, #28]
    hdma_spi6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24004416:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_spi6_tx) != HAL_OK)
24004418:	f001 f8fa 	bl	24005610 <HAL_DMA_Init>
2400441c:	b9b8      	cbnz	r0, 2400444e <HAL_SPI_MspInit+0x24e>
    HAL_NVIC_SetPriority(SPI6_IRQn, 7, 0);
2400441e:	2200      	movs	r2, #0
24004420:	2107      	movs	r1, #7
24004422:	2056      	movs	r0, #86	; 0x56
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi6_tx);
24004424:	67a5      	str	r5, [r4, #120]	; 0x78
24004426:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI6_IRQn, 7, 0);
24004428:	f000 ff60 	bl	240052ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
2400442c:	2056      	movs	r0, #86	; 0x56
2400442e:	f000 ff9b 	bl	24005368 <HAL_NVIC_EnableIRQ>
}
24004432:	b03d      	add	sp, #244	; 0xf4
24004434:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
24004436:	f7ff fcdd 	bl	24003df4 <Error_Handler>
2400443a:	e781      	b.n	24004340 <HAL_SPI_MspInit+0x140>
      Error_Handler();
2400443c:	f7ff fcda 	bl	24003df4 <Error_Handler>
24004440:	e75d      	b.n	240042fe <HAL_SPI_MspInit+0xfe>
      Error_Handler();
24004442:	f7ff fcd7 	bl	24003df4 <Error_Handler>
24004446:	e6fd      	b.n	24004244 <HAL_SPI_MspInit+0x44>
      Error_Handler();
24004448:	f7ff fcd4 	bl	24003df4 <Error_Handler>
2400444c:	e78e      	b.n	2400436c <HAL_SPI_MspInit+0x16c>
      Error_Handler();
2400444e:	f7ff fcd1 	bl	24003df4 <Error_Handler>
24004452:	e7e4      	b.n	2400441e <HAL_SPI_MspInit+0x21e>
      Error_Handler();
24004454:	f7ff fcce 	bl	24003df4 <Error_Handler>
24004458:	e7c7      	b.n	240043ea <HAL_SPI_MspInit+0x1ea>
2400445a:	bf00      	nop
2400445c:	40013000 	.word	0x40013000
24004460:	58001400 	.word	0x58001400
24004464:	58024400 	.word	0x58024400
24004468:	58020400 	.word	0x58020400
2400446c:	58021800 	.word	0x58021800
24004470:	2001c88c 	.word	0x2001c88c
24004474:	400200a0 	.word	0x400200a0
24004478:	2001c904 	.word	0x2001c904
2400447c:	40020010 	.word	0x40020010
24004480:	2001c97c 	.word	0x2001c97c
24004484:	58020000 	.word	0x58020000
24004488:	58025408 	.word	0x58025408
2400448c:	2001c9f4 	.word	0x2001c9f4
24004490:	5802541c 	.word	0x5802541c

24004494 <Default_Handler>:
void __attribute__((naked, noreturn)) Default_Handler()
{
	//If you get stuck here, your code is missing a handler for some interrupt.
	//Define a 'DEBUG_DEFAULT_INTERRUPT_HANDLERS' macro via VisualGDB Project Properties and rebuild your project.
	//This will pinpoint a specific missing vector.
	for (;;) ;
24004494:	e7fe      	b.n	24004494 <Default_Handler>
24004496:	bf00      	nop

24004498 <Reset_Handler>:
	asm ("ldr sp, =_estack");
24004498:	f8df d0c0 	ldr.w	sp, [pc, #192]	; 2400455c <Reset_Handler+0xc4>
	for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
2400449c:	481f      	ldr	r0, [pc, #124]	; (2400451c <Reset_Handler+0x84>)
2400449e:	4a20      	ldr	r2, [pc, #128]	; (24004520 <Reset_Handler+0x88>)
240044a0:	4290      	cmp	r0, r2
240044a2:	d003      	beq.n	240044ac <Reset_Handler+0x14>
		*pDest = *pSource;
240044a4:	1a12      	subs	r2, r2, r0
240044a6:	491f      	ldr	r1, [pc, #124]	; (24004524 <Reset_Handler+0x8c>)
240044a8:	f015 f96e 	bl	24019788 <memcpy>
	for (pDest = &_sbss; pDest != &_ebss; pDest++)
240044ac:	481e      	ldr	r0, [pc, #120]	; (24004528 <Reset_Handler+0x90>)
240044ae:	4a1f      	ldr	r2, [pc, #124]	; (2400452c <Reset_Handler+0x94>)
240044b0:	4290      	cmp	r0, r2
240044b2:	d003      	beq.n	240044bc <Reset_Handler+0x24>
		*pDest = 0;
240044b4:	1a12      	subs	r2, r2, r0
240044b6:	2100      	movs	r1, #0
240044b8:	f015 f934 	bl	24019724 <memset>
	for (pDest = &_ssram1_bss; pDest != &_esram1_bss; pDest++)
240044bc:	481c      	ldr	r0, [pc, #112]	; (24004530 <Reset_Handler+0x98>)
240044be:	4a1d      	ldr	r2, [pc, #116]	; (24004534 <Reset_Handler+0x9c>)
240044c0:	4290      	cmp	r0, r2
240044c2:	d003      	beq.n	240044cc <Reset_Handler+0x34>
		*pDest = 0;
240044c4:	1a12      	subs	r2, r2, r0
240044c6:	2100      	movs	r1, #0
240044c8:	f015 f92c 	bl	24019724 <memset>
	for (pDest = &_ssram2_dma_bss; pDest != &_esram2_dma_bss; pDest++)
240044cc:	481a      	ldr	r0, [pc, #104]	; (24004538 <Reset_Handler+0xa0>)
240044ce:	4a1b      	ldr	r2, [pc, #108]	; (2400453c <Reset_Handler+0xa4>)
240044d0:	4290      	cmp	r0, r2
240044d2:	d003      	beq.n	240044dc <Reset_Handler+0x44>
		*pDest = 0;
240044d4:	1a12      	subs	r2, r2, r0
240044d6:	2100      	movs	r1, #0
240044d8:	f015 f924 	bl	24019724 <memset>
	for (pDest = &_ssram2_bss; pDest != &_esram2_bss; pDest++)
240044dc:	4818      	ldr	r0, [pc, #96]	; (24004540 <Reset_Handler+0xa8>)
240044de:	4a19      	ldr	r2, [pc, #100]	; (24004544 <Reset_Handler+0xac>)
240044e0:	4290      	cmp	r0, r2
240044e2:	d003      	beq.n	240044ec <Reset_Handler+0x54>
		*pDest = 0;
240044e4:	1a12      	subs	r2, r2, r0
240044e6:	2100      	movs	r1, #0
240044e8:	f015 f91c 	bl	24019724 <memset>
	for (pDest = &_ssram3_bss; pDest != &_esram3_bss; pDest++)
240044ec:	4816      	ldr	r0, [pc, #88]	; (24004548 <Reset_Handler+0xb0>)
240044ee:	4a17      	ldr	r2, [pc, #92]	; (2400454c <Reset_Handler+0xb4>)
240044f0:	4290      	cmp	r0, r2
240044f2:	d003      	beq.n	240044fc <Reset_Handler+0x64>
		*pDest = 0;
240044f4:	1a12      	subs	r2, r2, r0
240044f6:	2100      	movs	r1, #0
240044f8:	f015 f914 	bl	24019724 <memset>
	for (pSource = &_siitcmram, pDest = &_sitcmram; pDest != &_eitcmram; pSource++, pDest++)
240044fc:	4814      	ldr	r0, [pc, #80]	; (24004550 <Reset_Handler+0xb8>)
240044fe:	4a15      	ldr	r2, [pc, #84]	; (24004554 <Reset_Handler+0xbc>)
24004500:	4290      	cmp	r0, r2
24004502:	d003      	beq.n	2400450c <Reset_Handler+0x74>
		*pDest = *pSource;
24004504:	1a12      	subs	r2, r2, r0
24004506:	4914      	ldr	r1, [pc, #80]	; (24004558 <Reset_Handler+0xc0>)
24004508:	f015 f93e 	bl	24019788 <memcpy>
	SystemInit();
2400450c:	f000 fde4 	bl	240050d8 <SystemInit>
	__libc_init_array();
24004510:	f015 f916 	bl	24019740 <__libc_init_array>
	(void)main();
24004514:	f7fe fda4 	bl	24003060 <main>
	for (;;) ;
24004518:	e7fe      	b.n	24004518 <Reset_Handler+0x80>
2400451a:	bf00      	nop
2400451c:	20000000 	.word	0x20000000
24004520:	20000928 	.word	0x20000928
24004524:	24028048 	.word	0x24028048
24004528:	20000928 	.word	0x20000928
2400452c:	2001df58 	.word	0x2001df58
24004530:	24040000 	.word	0x24040000
24004534:	24080000 	.word	0x24080000
24004538:	30000000 	.word	0x30000000
2400453c:	30000880 	.word	0x30000880
24004540:	30002000 	.word	0x30002000
24004544:	30045180 	.word	0x30045180
24004548:	38000000 	.word	0x38000000
2400454c:	38000080 	.word	0x38000080
24004550:	00000400 	.word	0x00000400
24004554:	00009790 	.word	0x00009790
24004558:	24028970 	.word	0x24028970
2400455c:	20020000 	.word	0x20020000

24004560 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
24004560:	4b07      	ldr	r3, [pc, #28]	; (24004580 <HAL_MspInit+0x20>)
{
24004562:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
24004564:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
24004568:	f042 0202 	orr.w	r2, r2, #2
2400456c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
24004570:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
24004574:	f003 0302 	and.w	r3, r3, #2
24004578:	9301      	str	r3, [sp, #4]
2400457a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
2400457c:	b002      	add	sp, #8
2400457e:	4770      	bx	lr
24004580:	58024400 	.word	0x58024400

24004584 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
24004584:	e7fe      	b.n	24004584 <NMI_Handler>
24004586:	bf00      	nop

24004588 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
24004588:	e7fe      	b.n	24004588 <HardFault_Handler>
2400458a:	bf00      	nop

2400458c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
2400458c:	e7fe      	b.n	2400458c <MemManage_Handler>
2400458e:	bf00      	nop

24004590 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
24004590:	e7fe      	b.n	24004590 <BusFault_Handler>
24004592:	bf00      	nop

24004594 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
24004594:	e7fe      	b.n	24004594 <UsageFault_Handler>
24004596:	bf00      	nop

24004598 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
24004598:	4770      	bx	lr
2400459a:	bf00      	nop

2400459c <DebugMon_Handler>:
2400459c:	4770      	bx	lr
2400459e:	bf00      	nop

240045a0 <PendSV_Handler>:
240045a0:	4770      	bx	lr
240045a2:	bf00      	nop

240045a4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
240045a4:	f000 be66 	b.w	24005274 <HAL_IncTick>

240045a8 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
240045a8:	4801      	ldr	r0, [pc, #4]	; (240045b0 <DMA1_Stream0_IRQHandler+0x8>)
240045aa:	f002 b89d 	b.w	240066e8 <HAL_DMA_IRQHandler>
240045ae:	bf00      	nop
240045b0:	2001c904 	.word	0x2001c904

240045b4 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
240045b4:	4801      	ldr	r0, [pc, #4]	; (240045bc <DMA1_Stream1_IRQHandler+0x8>)
240045b6:	f002 b897 	b.w	240066e8 <HAL_DMA_IRQHandler>
240045ba:	bf00      	nop
240045bc:	2001c5f0 	.word	0x2001c5f0

240045c0 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
240045c0:	4801      	ldr	r0, [pc, #4]	; (240045c8 <DMA1_Stream2_IRQHandler+0x8>)
240045c2:	f002 b891 	b.w	240066e8 <HAL_DMA_IRQHandler>
240045c6:	bf00      	nop
240045c8:	2001c668 	.word	0x2001c668

240045cc <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
240045cc:	4801      	ldr	r0, [pc, #4]	; (240045d4 <DMA1_Stream3_IRQHandler+0x8>)
240045ce:	f002 b88b 	b.w	240066e8 <HAL_DMA_IRQHandler>
240045d2:	bf00      	nop
240045d4:	20013fc0 	.word	0x20013fc0

240045d8 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
240045d8:	4801      	ldr	r0, [pc, #4]	; (240045e0 <DMA1_Stream4_IRQHandler+0x8>)
240045da:	f002 b885 	b.w	240066e8 <HAL_DMA_IRQHandler>
240045de:	bf00      	nop
240045e0:	20014038 	.word	0x20014038

240045e4 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
240045e4:	4801      	ldr	r0, [pc, #4]	; (240045ec <DMA1_Stream6_IRQHandler+0x8>)
240045e6:	f002 b87f 	b.w	240066e8 <HAL_DMA_IRQHandler>
240045ea:	bf00      	nop
240045ec:	2001c88c 	.word	0x2001c88c

240045f0 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
240045f0:	2040      	movs	r0, #64	; 0x40
240045f2:	f002 be77 	b.w	240072e4 <HAL_GPIO_EXTI_IRQHandler>
240045f6:	bf00      	nop

240045f8 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
240045f8:	4801      	ldr	r0, [pc, #4]	; (24004600 <I2C1_EV_IRQHandler+0x8>)
240045fa:	f003 b99d 	b.w	24007938 <HAL_I2C_EV_IRQHandler>
240045fe:	bf00      	nop
24004600:	200140b0 	.word	0x200140b0

24004604 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
24004604:	4801      	ldr	r0, [pc, #4]	; (2400460c <I2C1_ER_IRQHandler+0x8>)
24004606:	f003 bb0f 	b.w	24007c28 <HAL_I2C_ER_IRQHandler>
2400460a:	bf00      	nop
2400460c:	200140b0 	.word	0x200140b0

24004610 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
24004610:	4801      	ldr	r0, [pc, #4]	; (24004618 <I2C2_EV_IRQHandler+0x8>)
24004612:	f003 b991 	b.w	24007938 <HAL_I2C_EV_IRQHandler>
24004616:	bf00      	nop
24004618:	20014104 	.word	0x20014104

2400461c <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
2400461c:	4801      	ldr	r0, [pc, #4]	; (24004624 <I2C2_ER_IRQHandler+0x8>)
2400461e:	f003 bb03 	b.w	24007c28 <HAL_I2C_ER_IRQHandler>
24004622:	bf00      	nop
24004624:	20014104 	.word	0x20014104

24004628 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
24004628:	4801      	ldr	r0, [pc, #4]	; (24004630 <SPI1_IRQHandler+0x8>)
2400462a:	f007 bdaf 	b.w	2400c18c <HAL_SPI_IRQHandler>
2400462e:	bf00      	nop
24004630:	2001ca70 	.word	0x2001ca70

24004634 <SPI6_IRQHandler>:
void SPI6_IRQHandler(void)
{
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
24004634:	4801      	ldr	r0, [pc, #4]	; (2400463c <SPI6_IRQHandler+0x8>)
24004636:	f007 bda9 	b.w	2400c18c <HAL_SPI_IRQHandler>
2400463a:	bf00      	nop
2400463c:	2001cb10 	.word	0x2001cb10

24004640 <DMAMUX1_OVR_IRQHandler>:
{
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_a);
24004640:	4801      	ldr	r0, [pc, #4]	; (24004648 <DMAMUX1_OVR_IRQHandler+0x8>)
24004642:	f002 bccb 	b.w	24006fdc <HAL_DMAEx_MUX_IRQHandler>
24004646:	bf00      	nop
24004648:	2001c5f0 	.word	0x2001c5f0

2400464c <BDMA_Channel0_IRQHandler>:
void BDMA_Channel0_IRQHandler(void)
{
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi6_rx);
2400464c:	4801      	ldr	r0, [pc, #4]	; (24004654 <BDMA_Channel0_IRQHandler+0x8>)
2400464e:	f002 b84b 	b.w	240066e8 <HAL_DMA_IRQHandler>
24004652:	bf00      	nop
24004654:	2001c97c 	.word	0x2001c97c

24004658 <BDMA_Channel1_IRQHandler>:
void BDMA_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN BDMA_Channel1_IRQn 0 */

  /* USER CODE END BDMA_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi6_tx);
24004658:	4801      	ldr	r0, [pc, #4]	; (24004660 <BDMA_Channel1_IRQHandler+0x8>)
2400465a:	f002 b845 	b.w	240066e8 <HAL_DMA_IRQHandler>
2400465e:	bf00      	nop
24004660:	2001c9f4 	.word	0x2001c9f4

24004664 <audioInitString2>:
};



void audioInitString2()
{
24004664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	for (int v = 0; v < numStringsThisBoard; v++)
24004666:	4e19      	ldr	r6, [pc, #100]	; (240046cc <audioInitString2+0x68>)
24004668:	7833      	ldrb	r3, [r6, #0]
{
2400466a:	ed2d 8b04 	vpush	{d8-d9}
	for (int v = 0; v < numStringsThisBoard; v++)
2400466e:	b33b      	cbz	r3, 240046c0 <audioInitString2+0x5c>
24004670:	4c17      	ldr	r4, [pc, #92]	; (240046d0 <audioInitString2+0x6c>)
24004672:	2500      	movs	r5, #0
	{
		 tTString_initToPool(&strings[v], 1, 15.0f, &mediumPool);
24004674:	4f17      	ldr	r7, [pc, #92]	; (240046d4 <audioInitString2+0x70>)
		 tTString_setHarmonicity(&strings[v], 0.00001f, 100.0f);
24004676:	eddf 9a18 	vldr	s19, [pc, #96]	; 240046d8 <audioInitString2+0x74>
2400467a:	ed9f 9a18 	vldr	s18, [pc, #96]	; 240046dc <audioInitString2+0x78>
		 tTString_setTensionSpeed(&strings[v],0.7f);
2400467e:	eddf 8a18 	vldr	s17, [pc, #96]	; 240046e0 <audioInitString2+0x7c>
		 tTString_setTensionGain(&strings[v],0.99f);
24004682:	ed9f 8a18 	vldr	s16, [pc, #96]	; 240046e4 <audioInitString2+0x80>
		 tTString_initToPool(&strings[v], 1, 15.0f, &mediumPool);
24004686:	463a      	mov	r2, r7
24004688:	2101      	movs	r1, #1
2400468a:	4620      	mov	r0, r4
2400468c:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
24004690:	f012 fa78 	bl	24016b84 <tTString_initToPool>
		 tTString_setHarmonicity(&strings[v], 0.00001f, 100.0f);
24004694:	eef0 0a69 	vmov.f32	s1, s19
24004698:	4620      	mov	r0, r4
2400469a:	eeb0 0a49 	vmov.f32	s0, s18
2400469e:	f013 fd59 	bl	24018154 <tTString_setHarmonicity>
		 tTString_setTensionSpeed(&strings[v],0.7f);
240046a2:	4620      	mov	r0, r4
240046a4:	eeb0 0a68 	vmov.f32	s0, s17
	for (int v = 0; v < numStringsThisBoard; v++)
240046a8:	3501      	adds	r5, #1
		 tTString_setTensionSpeed(&strings[v],0.7f);
240046aa:	f013 fb4b 	bl	24017d44 <tTString_setTensionSpeed>
		 tTString_setTensionGain(&strings[v],0.99f);
240046ae:	4620      	mov	r0, r4
240046b0:	eeb0 0a48 	vmov.f32	s0, s16
	for (int v = 0; v < numStringsThisBoard; v++)
240046b4:	3404      	adds	r4, #4
		 tTString_setTensionGain(&strings[v],0.99f);
240046b6:	f013 fb29 	bl	24017d0c <tTString_setTensionGain>
	for (int v = 0; v < numStringsThisBoard; v++)
240046ba:	7833      	ldrb	r3, [r6, #0]
240046bc:	42ab      	cmp	r3, r5
240046be:	dce2      	bgt.n	24004686 <audioInitString2+0x22>
	}
	whichStringModelLoaded = String2Loaded;
240046c0:	4b09      	ldr	r3, [pc, #36]	; (240046e8 <audioInitString2+0x84>)
240046c2:	2201      	movs	r2, #1
240046c4:	701a      	strb	r2, [r3, #0]
}
240046c6:	ecbd 8b04 	vpop	{d8-d9}
240046ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
240046cc:	200004b1 	.word	0x200004b1
240046d0:	2001cbc4 	.word	0x2001cbc4
240046d4:	2000500c 	.word	0x2000500c
240046d8:	42c80000 	.word	0x42c80000
240046dc:	3727c5ac 	.word	0x3727c5ac
240046e0:	3f333333 	.word	0x3f333333
240046e4:	3f7d70a4 	.word	0x3f7d70a4
240046e8:	20013f85 	.word	0x20013f85

240046ec <audioInitSynth>:
 float polyDivider[NUM_EFFECT][NUM_STRINGS_PER_BOARD];
 float wfState[NUM_EFFECT][NUM_STRINGS_PER_BOARD];
 float invCurFB[NUM_EFFECT][NUM_STRINGS_PER_BOARD];

void audioInitSynth()
{
240046ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
240046f0:	ed2d 8b0a 	vpush	{d8-d12}

			tPBSineTriangle_init(&sinePaired[i][v],&leaf);

			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.005f, &leaf);

			freqMult[i][v] = 1.0f;
240046f4:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
{
240046f8:	b087      	sub	sp, #28
240046fa:	2600      	movs	r6, #0
240046fc:	4be1      	ldr	r3, [pc, #900]	; (24004a84 <audioInitSynth+0x398>)
240046fe:	f8df b46c 	ldr.w	fp, [pc, #1132]	; 24004b6c <audioInitSynth+0x480>
			tPBSaw_init(&saw[i][v], &leaf);
24004702:	4ce1      	ldr	r4, [pc, #900]	; (24004a88 <audioInitSynth+0x39c>)
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.005f, &leaf);
24004704:	ed9f 9ae1 	vldr	s18, [pc, #900]	; 24004a8c <audioInitSynth+0x3a0>
24004708:	eddf bae1 	vldr	s23, [pc, #900]	; 24004a90 <audioInitSynth+0x3a4>
		{
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
			tSVF_init(&highpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
			tSVF_init(&bandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
			tDiodeFilter_init(&diodeFilters[i][v], 2000.f, 0.5f, &leaf);
			tVZFilterBell_init(&VZfilterPeak[i][v], 2000.f, 1.9f, 1.0f, &leaf);
2400470c:	ed9f bae1 	vldr	s22, [pc, #900]	; 24004a94 <audioInitSynth+0x3a8>
		}


		for (int i = 0; i < NUM_ENV; i++)
		{
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24004710:	ed9f aae1 	vldr	s20, [pc, #900]	; 24004a98 <audioInitSynth+0x3ac>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24004714:	e9cd 3602 	strd	r3, r6, [sp, #8]
		for(int i = 0; i < NUM_OSC; i++)
24004718:	4be0      	ldr	r3, [pc, #896]	; (24004a9c <audioInitSynth+0x3b0>)
{
2400471a:	4635      	mov	r5, r6
2400471c:	f106 0818 	add.w	r8, r6, #24
			midiAdd[i][v] = 0.0f;
24004720:	f04f 0a00 	mov.w	sl, #0
24004724:	eb03 0906 	add.w	r9, r3, r6
24004728:	4bdd      	ldr	r3, [pc, #884]	; (24004aa0 <audioInitSynth+0x3b4>)
2400472a:	199f      	adds	r7, r3, r6
			tPBSaw_init(&saw[i][v], &leaf);
2400472c:	4648      	mov	r0, r9
2400472e:	4621      	mov	r1, r4
24004730:	f011 f9c8 	bl	24015ac4 <tPBSaw_init>
			tPBPulse_init(&pulse[i][v], &leaf);
24004734:	4638      	mov	r0, r7
24004736:	4621      	mov	r1, r4
		for(int i = 0; i < NUM_OSC; i++)
24004738:	f109 0908 	add.w	r9, r9, #8
			tPBPulse_init(&pulse[i][v], &leaf);
2400473c:	f011 f934 	bl	240159a8 <tPBPulse_init>
			tCycle_init(&sine[i][v],  &leaf);
24004740:	4bd8      	ldr	r3, [pc, #864]	; (24004aa4 <audioInitSynth+0x3b8>)
24004742:	4621      	mov	r1, r4
		for(int i = 0; i < NUM_OSC; i++)
24004744:	3708      	adds	r7, #8
			tCycle_init(&sine[i][v],  &leaf);
24004746:	1958      	adds	r0, r3, r5
24004748:	f010 febe 	bl	240154c8 <tCycle_init>
			tPBTriangle_init(&tri[i][v],  &leaf);
2400474c:	4bd6      	ldr	r3, [pc, #856]	; (24004aa8 <audioInitSynth+0x3bc>)
2400474e:	4621      	mov	r1, r4
24004750:	1958      	adds	r0, r3, r5
24004752:	f010 ff51 	bl	240155f8 <tPBTriangle_init>
			tPBSawSquare_init(&sawPaired[i][v], &leaf);
24004756:	4bd5      	ldr	r3, [pc, #852]	; (24004aac <audioInitSynth+0x3c0>)
24004758:	4621      	mov	r1, r4
2400475a:	1958      	adds	r0, r3, r5
2400475c:	f011 fa02 	bl	24015b64 <tPBSawSquare_init>
			tPBSineTriangle_init(&sinePaired[i][v],&leaf);
24004760:	4bd3      	ldr	r3, [pc, #844]	; (24004ab0 <audioInitSynth+0x3c4>)
24004762:	4621      	mov	r1, r4
24004764:	1958      	adds	r0, r3, r5
24004766:	f011 f81d 	bl	240157a4 <tPBSineTriangle_init>
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.005f, &leaf);
2400476a:	4bd2      	ldr	r3, [pc, #840]	; (24004ab4 <audioInitSynth+0x3c8>)
2400476c:	eef0 0a49 	vmov.f32	s1, s18
24004770:	4621      	mov	r1, r4
24004772:	1958      	adds	r0, r3, r5
24004774:	eeb0 0a6b 	vmov.f32	s0, s23
24004778:	f00d fb06 	bl	24011d88 <tExpSmooth_init>
			freqMult[i][v] = 1.0f;
2400477c:	4bce      	ldr	r3, [pc, #824]	; (24004ab8 <audioInitSynth+0x3cc>)
2400477e:	442b      	add	r3, r5
24004780:	ed83 ca00 	vstr	s24, [r3]
			midiAdd[i][v] = 0.0f;
24004784:	4bcd      	ldr	r3, [pc, #820]	; (24004abc <audioInitSynth+0x3d0>)
24004786:	442b      	add	r3, r5
		for(int i = 0; i < NUM_OSC; i++)
24004788:	3508      	adds	r5, #8
2400478a:	4545      	cmp	r5, r8
			midiAdd[i][v] = 0.0f;
2400478c:	f8c3 a000 	str.w	sl, [r3]
		for(int i = 0; i < NUM_OSC; i++)
24004790:	d1cc      	bne.n	2400472c <audioInitSynth+0x40>
24004792:	4635      	mov	r5, r6
24004794:	f106 0710 	add.w	r7, r6, #16
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
24004798:	eddf 8ac9 	vldr	s17, [pc, #804]	; 24004ac0 <audioInitSynth+0x3d4>
2400479c:	ed9f 8ac9 	vldr	s16, [pc, #804]	; 24004ac4 <audioInitSynth+0x3d8>
			tVZFilterLS_init(&VZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
240047a0:	eddf 9ac9 	vldr	s19, [pc, #804]	; 24004ac8 <audioInitSynth+0x3dc>
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
240047a4:	4bc9      	ldr	r3, [pc, #804]	; (24004acc <audioInitSynth+0x3e0>)
240047a6:	eef0 0a68 	vmov.f32	s1, s17
240047aa:	eeb0 0a48 	vmov.f32	s0, s16
240047ae:	2101      	movs	r1, #1
240047b0:	1958      	adds	r0, r3, r5
240047b2:	4622      	mov	r2, r4
240047b4:	f00d fe90 	bl	240124d8 <tSVF_init>
			tSVF_init(&highpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
240047b8:	4bc5      	ldr	r3, [pc, #788]	; (24004ad0 <audioInitSynth+0x3e4>)
240047ba:	eef0 0a68 	vmov.f32	s1, s17
240047be:	4622      	mov	r2, r4
240047c0:	1958      	adds	r0, r3, r5
240047c2:	eeb0 0a48 	vmov.f32	s0, s16
240047c6:	2100      	movs	r1, #0
240047c8:	f00d fe86 	bl	240124d8 <tSVF_init>
			tSVF_init(&bandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
240047cc:	4bc1      	ldr	r3, [pc, #772]	; (24004ad4 <audioInitSynth+0x3e8>)
240047ce:	4622      	mov	r2, r4
240047d0:	eef0 0a68 	vmov.f32	s1, s17
240047d4:	1958      	adds	r0, r3, r5
240047d6:	eeb0 0a48 	vmov.f32	s0, s16
240047da:	2102      	movs	r1, #2
240047dc:	f00d fe7c 	bl	240124d8 <tSVF_init>
			tDiodeFilter_init(&diodeFilters[i][v], 2000.f, 0.5f, &leaf);
240047e0:	4bbd      	ldr	r3, [pc, #756]	; (24004ad8 <audioInitSynth+0x3ec>)
240047e2:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
240047e6:	4621      	mov	r1, r4
240047e8:	1958      	adds	r0, r3, r5
240047ea:	eeb0 0a48 	vmov.f32	s0, s16
240047ee:	f00f fa25 	bl	24013c3c <tDiodeFilter_init>
			tVZFilterBell_init(&VZfilterPeak[i][v], 2000.f, 1.9f, 1.0f, &leaf);
240047f2:	4bba      	ldr	r3, [pc, #744]	; (24004adc <audioInitSynth+0x3f0>)
240047f4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240047f8:	4621      	mov	r1, r4
240047fa:	1958      	adds	r0, r3, r5
240047fc:	eef0 0a4b 	vmov.f32	s1, s22
24004800:	eeb0 0a48 	vmov.f32	s0, s16
24004804:	f00f f85c 	bl	240138c0 <tVZFilterBell_init>
			tVZFilterLS_init(&VZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
24004808:	4bb5      	ldr	r3, [pc, #724]	; (24004ae0 <audioInitSynth+0x3f4>)
2400480a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
2400480e:	4621      	mov	r1, r4
24004810:	1958      	adds	r0, r3, r5
24004812:	eef0 0a69 	vmov.f32	s1, s19
24004816:	eeb0 0a48 	vmov.f32	s0, s16
2400481a:	f00e fd47 	bl	240132ac <tVZFilterLS_init>
			tVZFilterHS_init(&VZfilterHS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
2400481e:	4bb1      	ldr	r3, [pc, #708]	; (24004ae4 <audioInitSynth+0x3f8>)
24004820:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24004824:	4621      	mov	r1, r4
24004826:	1958      	adds	r0, r3, r5
24004828:	eef0 0a69 	vmov.f32	s1, s19
2400482c:	eeb0 0a48 	vmov.f32	s0, s16
24004830:	f00e feb0 	bl	24013594 <tVZFilterHS_init>
			tVZFilter_init(&VZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
24004834:	4bac      	ldr	r3, [pc, #688]	; (24004ae8 <audioInitSynth+0x3fc>)
24004836:	4622      	mov	r2, r4
24004838:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
2400483c:	1958      	adds	r0, r3, r5
2400483e:	eeb0 0a48 	vmov.f32	s0, s16
24004842:	2104      	movs	r1, #4
24004844:	f00e fac2 	bl	24012dcc <tVZFilter_init>
			tLadderFilter_init(&Ladderfilter[i][v], 2000.f, 1.0f, &leaf);
24004848:	4ba8      	ldr	r3, [pc, #672]	; (24004aec <audioInitSynth+0x400>)
2400484a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
2400484e:	4621      	mov	r1, r4
24004850:	1958      	adds	r0, r3, r5
24004852:	eeb0 0a48 	vmov.f32	s0, s16
24004856:	f00f fea1 	bl	2401459c <tLadderFilter_init>
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
2400485a:	4ba5      	ldr	r3, [pc, #660]	; (24004af0 <audioInitSynth+0x404>)
2400485c:	eeb0 0a6b 	vmov.f32	s0, s23
24004860:	4621      	mov	r1, r4
24004862:	1958      	adds	r0, r3, r5
		for (int i = 0; i < NUM_FILT; i++)
24004864:	3508      	adds	r5, #8
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
24004866:	eddf 0aa3 	vldr	s1, [pc, #652]	; 24004af4 <audioInitSynth+0x408>
2400486a:	f00d fa8d 	bl	24011d88 <tExpSmooth_init>
		for (int i = 0; i < NUM_FILT; i++)
2400486e:	42bd      	cmp	r5, r7
24004870:	d198      	bne.n	240047a4 <audioInitSynth+0xb8>
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
24004872:	4ba1      	ldr	r3, [pc, #644]	; (24004af8 <audioInitSynth+0x40c>)
24004874:	2500      	movs	r5, #0
24004876:	eb03 0806 	add.w	r8, r3, r6
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
2400487a:	4ba0      	ldr	r3, [pc, #640]	; (24004afc <audioInitSynth+0x410>)
2400487c:	199f      	adds	r7, r3, r6
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
2400487e:	eb08 0005 	add.w	r0, r8, r5
24004882:	4621      	mov	r1, r4
24004884:	f011 fa64 	bl	24015d50 <tIntPhasor_init>
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
24004888:	1978      	adds	r0, r7, r5
2400488a:	4621      	mov	r1, r4
2400488c:	f011 faa6 	bl	24015ddc <tSquareLFO_init>
			tCycle_init(&lfoSine[i][v], &leaf);
24004890:	4b9b      	ldr	r3, [pc, #620]	; (24004b00 <audioInitSynth+0x414>)
24004892:	4621      	mov	r1, r4
24004894:	1998      	adds	r0, r3, r6
24004896:	4428      	add	r0, r5
24004898:	f010 fe16 	bl	240154c8 <tCycle_init>
			tTriLFO_init(&lfoTri[i][v], &leaf);
2400489c:	4b99      	ldr	r3, [pc, #612]	; (24004b04 <audioInitSynth+0x418>)
2400489e:	4621      	mov	r1, r4
240048a0:	1998      	adds	r0, r3, r6
240048a2:	4428      	add	r0, r5
240048a4:	f011 fc8c 	bl	240161c0 <tTriLFO_init>
			tSineTriLFO_init(&lfoSineTri[i][v], &leaf);
240048a8:	4b97      	ldr	r3, [pc, #604]	; (24004b08 <audioInitSynth+0x41c>)
240048aa:	4621      	mov	r1, r4
240048ac:	1998      	adds	r0, r3, r6
240048ae:	4428      	add	r0, r5
240048b0:	f011 fce2 	bl	24016278 <tSineTriLFO_init>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
240048b4:	4b95      	ldr	r3, [pc, #596]	; (24004b0c <audioInitSynth+0x420>)
240048b6:	4621      	mov	r1, r4
240048b8:	1998      	adds	r0, r3, r6
240048ba:	4428      	add	r0, r5
		for (int i = 0; i < NUM_LFOS; i++)
240048bc:	3508      	adds	r5, #8
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
240048be:	f011 fbbb 	bl	24016038 <tSawSquareLFO_init>
		for (int i = 0; i < NUM_LFOS; i++)
240048c2:	2d20      	cmp	r5, #32
240048c4:	d1db      	bne.n	2400487e <audioInitSynth+0x192>
240048c6:	9f02      	ldr	r7, [sp, #8]
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
240048c8:	eddf 8a91 	vldr	s17, [pc, #580]	; 24004b10 <audioInitSynth+0x424>
240048cc:	f1a7 0520 	sub.w	r5, r7, #32
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
240048d0:	ed9f 8a90 	vldr	s16, [pc, #576]	; 24004b14 <audioInitSynth+0x428>
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
240048d4:	4628      	mov	r0, r5
240048d6:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
240048da:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
240048de:	4623      	mov	r3, r4
240048e0:	eef0 0a4a 	vmov.f32	s1, s20
240048e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
240048e8:	eeb0 0a68 	vmov.f32	s0, s17
240048ec:	498a      	ldr	r1, [pc, #552]	; (24004b18 <audioInitSynth+0x42c>)
240048ee:	f00c ff37 	bl	24011760 <tADSRT_init>
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
240048f2:	4628      	mov	r0, r5
		for (int i = 0; i < NUM_ENV; i++)
240048f4:	3508      	adds	r5, #8
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
240048f6:	eeb0 0a48 	vmov.f32	s0, s16
240048fa:	f00c ffdf 	bl	240118bc <tADSRT_setLeakFactor>
		for (int i = 0; i < NUM_ENV; i++)
240048fe:	42bd      	cmp	r5, r7
24004900:	d1e8      	bne.n	240048d4 <audioInitSynth+0x1e8>
		}

		//noise
		tVZFilterLS_init(&noiseShelf1[v], 80.0f, 0.5f, 1.0f, &leaf);
24004902:	4b86      	ldr	r3, [pc, #536]	; (24004b1c <audioInitSynth+0x430>)
24004904:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24004908:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
2400490c:	ed9f 0a84 	vldr	s0, [pc, #528]	; 24004b20 <audioInitSynth+0x434>
24004910:	1998      	adds	r0, r3, r6
24004912:	4621      	mov	r1, r4
24004914:	f00e fcca 	bl	240132ac <tVZFilterLS_init>
		tVZFilterHS_init(&noiseShelf2[v], 12000.0f, 0.5f, 1.0f, &leaf);
24004918:	4b82      	ldr	r3, [pc, #520]	; (24004b24 <audioInitSynth+0x438>)
2400491a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
2400491e:	4621      	mov	r1, r4
24004920:	1998      	adds	r0, r3, r6
24004922:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
24004926:	ed9f 0a80 	vldr	s0, [pc, #512]	; 24004b28 <audioInitSynth+0x43c>
		tVZFilterBell_init(&noiseBell1[v],1000.0f, 1.9f, 1.09f, &leaf);
2400492a:	4635      	mov	r5, r6
		tVZFilterHS_init(&noiseShelf2[v], 12000.0f, 0.5f, 1.0f, &leaf);
2400492c:	f00e fe32 	bl	24013594 <tVZFilterHS_init>
		tVZFilterBell_init(&noiseBell1[v],1000.0f, 1.9f, 1.09f, &leaf);
24004930:	4b7e      	ldr	r3, [pc, #504]	; (24004b2c <audioInitSynth+0x440>)
24004932:	4a7f      	ldr	r2, [pc, #508]	; (24004b30 <audioInitSynth+0x444>)
24004934:	eef0 0a4b 	vmov.f32	s1, s22
24004938:	eb03 0a06 	add.w	sl, r3, r6
2400493c:	4b7d      	ldr	r3, [pc, #500]	; (24004b34 <audioInitSynth+0x448>)
2400493e:	1990      	adds	r0, r2, r6
24004940:	eeb0 0a4a 	vmov.f32	s0, s20
24004944:	199f      	adds	r7, r3, r6
24004946:	f106 0320 	add.w	r3, r6, #32
2400494a:	4621      	mov	r1, r4
2400494c:	ed9f 1a7a 	vldr	s2, [pc, #488]	; 24004b38 <audioInitSynth+0x44c>
24004950:	9304      	str	r3, [sp, #16]
24004952:	f00e ffb5 	bl	240138c0 <tVZFilterBell_init>

		for (int i = 0; i < NUM_EFFECT; i++)
		{
			tCrusher_init(&bc[i][v],&leaf);
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
			tHighpass_setSampleRate(&dcBlock1[i][v], SAMPLE_RATE * OVERSAMPLE);
24004956:	ed9f 8a79 	vldr	s16, [pc, #484]	; 24004b3c <audioInitSynth+0x450>
		tVZFilterBell_init(&noiseBell1[v],1000.0f, 1.9f, 1.09f, &leaf);
2400495a:	9605      	str	r6, [sp, #20]

	        //tTapeDelay_initToPool(&tapeDelay[i][v], 15000.0f, 30000, &largePool);
	        tFeedbackLeveler_init(&feedbackControl[i][v], .99f, 0.01f, 0.125f, 0, &leaf);

			//filters
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
2400495c:	eddf 9a58 	vldr	s19, [pc, #352]	; 24004ac0 <audioInitSynth+0x3d4>
24004960:	eddf 8a58 	vldr	s17, [pc, #352]	; 24004ac4 <audioInitSynth+0x3d8>
			tSVF_setSampleRate(&FXbandpass[i][v],SAMPLE_RATE * OVERSAMPLE);
			tDiodeFilter_init(&FXdiodeFilters[i][v], 2000.f, 1.0f, &leaf);
			tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], SAMPLE_RATE * OVERSAMPLE);
			tVZFilterBell_init(&FXVZfilterPeak[i][v], 2000.f, 1.6f, 1.0f, &leaf);
			tVZFilterBell_setSampleRate(&FXVZfilterPeak[i][v], SAMPLE_RATE * OVERSAMPLE);
			tVZFilterLS_init(&FXVZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
24004964:	eddf aa58 	vldr	s21, [pc, #352]	; 24004ac8 <audioInitSynth+0x3dc>
		tVZFilterBell_init(&noiseBell1[v],1000.0f, 1.9f, 1.09f, &leaf);
24004968:	9e04      	ldr	r6, [sp, #16]
			tCrusher_init(&bc[i][v],&leaf);
2400496a:	4650      	mov	r0, sl
2400496c:	4621      	mov	r1, r4
2400496e:	f00c fcd9 	bl	24011324 <tCrusher_init>
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
24004972:	4b73      	ldr	r3, [pc, #460]	; (24004b40 <audioInitSynth+0x454>)
24004974:	4621      	mov	r1, r4
24004976:	4638      	mov	r0, r7
24004978:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
2400497c:	eb03 0905 	add.w	r9, r3, r5
24004980:	f00d ff96 	bl	240128b0 <tHighpass_init>
			tHighpass_setSampleRate(&dcBlock1[i][v], SAMPLE_RATE * OVERSAMPLE);
24004984:	4638      	mov	r0, r7
24004986:	eeb0 0a48 	vmov.f32	s0, s16
		for (int i = 0; i < NUM_EFFECT; i++)
2400498a:	f10a 0a08 	add.w	sl, sl, #8
			tHighpass_setSampleRate(&dcBlock1[i][v], SAMPLE_RATE * OVERSAMPLE);
2400498e:	f00d ffef 	bl	24012970 <tHighpass_setSampleRate>
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
24004992:	4b6c      	ldr	r3, [pc, #432]	; (24004b44 <audioInitSynth+0x458>)
24004994:	4621      	mov	r1, r4
24004996:	4648      	mov	r0, r9
24004998:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
2400499c:	eb03 0805 	add.w	r8, r3, r5
240049a0:	f00d ff86 	bl	240128b0 <tHighpass_init>
			tHighpass_setSampleRate(&dcBlock2[i][v], SAMPLE_RATE * OVERSAMPLE);
240049a4:	4648      	mov	r0, r9
240049a6:	eeb0 0a48 	vmov.f32	s0, s16
		for (int i = 0; i < NUM_EFFECT; i++)
240049aa:	3708      	adds	r7, #8
			tHighpass_setSampleRate(&dcBlock2[i][v], SAMPLE_RATE * OVERSAMPLE);
240049ac:	f00d ffe0 	bl	24012970 <tHighpass_setSampleRate>
			tVZFilterLS_init(&shelf1[i][v], 80.0f, 0.5f, 1.0f,&leaf);
240049b0:	4b65      	ldr	r3, [pc, #404]	; (24004b48 <audioInitSynth+0x45c>)
240049b2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240049b6:	4621      	mov	r1, r4
240049b8:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
240049bc:	4640      	mov	r0, r8
240049be:	ed9f 0a58 	vldr	s0, [pc, #352]	; 24004b20 <audioInitSynth+0x434>
240049c2:	eb03 0905 	add.w	r9, r3, r5
240049c6:	f00e fc71 	bl	240132ac <tVZFilterLS_init>
			tVZFilterLS_setSampleRate(&shelf1[i][v], SAMPLE_RATE * OVERSAMPLE);
240049ca:	4640      	mov	r0, r8
240049cc:	eeb0 0a48 	vmov.f32	s0, s16
240049d0:	f00e fc70 	bl	240132b4 <tVZFilterLS_setSampleRate>
			tVZFilterHS_init(&shelf2[i][v], 12000.0f, 0.5f, 1.0f, &leaf);
240049d4:	4b5d      	ldr	r3, [pc, #372]	; (24004b4c <audioInitSynth+0x460>)
240049d6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240049da:	4621      	mov	r1, r4
240049dc:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
240049e0:	4648      	mov	r0, r9
240049e2:	ed9f 0a51 	vldr	s0, [pc, #324]	; 24004b28 <audioInitSynth+0x43c>
240049e6:	eb03 0805 	add.w	r8, r3, r5
240049ea:	f00e fdd3 	bl	24013594 <tVZFilterHS_init>
			tVZFilterHS_setSampleRate(&shelf2[i][v], SAMPLE_RATE * OVERSAMPLE);
240049ee:	4648      	mov	r0, r9
240049f0:	eeb0 0a48 	vmov.f32	s0, s16
240049f4:	f00e fdd2 	bl	2401359c <tVZFilterHS_setSampleRate>
			tVZFilterBell_init(&bell1[i][v], 1000.0f, 1.9f, 1.0f, &leaf);
240049f8:	4b55      	ldr	r3, [pc, #340]	; (24004b50 <audioInitSynth+0x464>)
240049fa:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240049fe:	4621      	mov	r1, r4
24004a00:	eb03 0905 	add.w	r9, r3, r5
24004a04:	eef0 0a4b 	vmov.f32	s1, s22
24004a08:	4640      	mov	r0, r8
24004a0a:	eeb0 0a4a 	vmov.f32	s0, s20
24004a0e:	f00e ff57 	bl	240138c0 <tVZFilterBell_init>
			tVZFilterBell_setSampleRate(&bell1[i][v], SAMPLE_RATE * OVERSAMPLE);
24004a12:	eeb0 0a48 	vmov.f32	s0, s16
24004a16:	4640      	mov	r0, r8
24004a18:	f00e ff56 	bl	240138c8 <tVZFilterBell_setSampleRate>
			tCompressor_init(&comp[i][v], &leaf);
24004a1c:	4648      	mov	r0, r9
24004a1e:	4621      	mov	r1, r4
24004a20:	f00c fd3c 	bl	2401149c <tCompressor_init>
			tCompressor_setTables(&comp[i][v], atoDbTable, dbtoATable, 0.00001f, 4.0f, -90.0f, 30.0f, ATODB_TABLE_SIZE, DBTOA_TABLE_SIZE);
24004a24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
24004a28:	494a      	ldr	r1, [pc, #296]	; (24004b54 <audioInitSynth+0x468>)
24004a2a:	eef3 1a0e 	vmov.f32	s3, #62	; 0x41f00000  30.0
24004a2e:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
24004a32:	ed9f 1a49 	vldr	s2, [pc, #292]	; 24004b58 <audioInitSynth+0x46c>
24004a36:	4a49      	ldr	r2, [pc, #292]	; (24004b5c <audioInitSynth+0x470>)
24004a38:	eb01 0805 	add.w	r8, r1, r5
24004a3c:	4648      	mov	r0, r9
24004a3e:	4948      	ldr	r1, [pc, #288]	; (24004b60 <audioInitSynth+0x474>)
24004a40:	9300      	str	r3, [sp, #0]
24004a42:	ed9f 0a48 	vldr	s0, [pc, #288]	; 24004b64 <audioInitSynth+0x478>
24004a46:	f00c fdd1 	bl	240115ec <tCompressor_setTables>
			tCompressor_setSampleRate(&comp[i][v], SAMPLE_RATE * OVERSAMPLE);
24004a4a:	eeb0 0a48 	vmov.f32	s0, s16
24004a4e:	4648      	mov	r0, r9
24004a50:	f00c fdf2 	bl	24011638 <tCompressor_setSampleRate>
			tCycle_init(&mod1[i][v], &leaf);
24004a54:	4b44      	ldr	r3, [pc, #272]	; (24004b68 <audioInitSynth+0x47c>)
24004a56:	4621      	mov	r1, r4
24004a58:	4640      	mov	r0, r8
24004a5a:	eb03 0905 	add.w	r9, r3, r5
24004a5e:	f010 fd33 	bl	240154c8 <tCycle_init>
			tCycle_setSampleRate(&mod1[i][v], SAMPLE_RATE * OVERSAMPLE);
24004a62:	eeb0 0a48 	vmov.f32	s0, s16
24004a66:	4640      	mov	r0, r8
24004a68:	f010 fdae 	bl	240155c8 <tCycle_setSampleRate>
			tCycle_init(&mod2[i][v], &leaf);
24004a6c:	4621      	mov	r1, r4
24004a6e:	4648      	mov	r0, r9
24004a70:	f010 fd2a 	bl	240154c8 <tCycle_init>
			tCycle_setSampleRate(&mod2[i][v], SAMPLE_RATE * OVERSAMPLE);
24004a74:	4648      	mov	r0, r9
24004a76:	eeb0 0a48 	vmov.f32	s0, s16
24004a7a:	f010 fda5 	bl	240155c8 <tCycle_setSampleRate>
			tCycle_setFreq(&mod1[i][v], 0.2f);
24004a7e:	4640      	mov	r0, r8
24004a80:	e07a      	b.n	24004b78 <audioInitSynth+0x48c>
24004a82:	bf00      	nop
24004a84:	2001cfa4 	.word	0x2001cfa4
24004a88:	20004fb8 	.word	0x20004fb8
24004a8c:	3ba3d70a 	.word	0x3ba3d70a
24004a90:	42800000 	.word	0x42800000
24004a94:	3ff33333 	.word	0x3ff33333
24004a98:	447a0000 	.word	0x447a0000
24004a9c:	2001d4d0 	.word	0x2001d4d0
24004aa0:	2001d4b4 	.word	0x2001d4b4
24004aa4:	2001d58c 	.word	0x2001d58c
24004aa8:	2001d73c 	.word	0x2001d73c
24004aac:	2001d4e8 	.word	0x2001d4e8
24004ab0:	2001d5a4 	.word	0x2001d5a4
24004ab4:	2001d478 	.word	0x2001d478
24004ab8:	2001cffc 	.word	0x2001cffc
24004abc:	2001d2e8 	.word	0x2001d2e8
24004ac0:	3f333333 	.word	0x3f333333
24004ac4:	44fa0000 	.word	0x44fa0000
24004ac8:	3f19999a 	.word	0x3f19999a
24004acc:	2001d1d8 	.word	0x2001d1d8
24004ad0:	2001d054 	.word	0x2001d054
24004ad4:	2001cd48 	.word	0x2001cd48
24004ad8:	2001cf60 	.word	0x2001cf60
24004adc:	2001cd30 	.word	0x2001cd30
24004ae0:	2001cd20 	.word	0x2001cd20
24004ae4:	2001cd10 	.word	0x2001cd10
24004ae8:	2001cd00 	.word	0x2001cd00
24004aec:	2001ccf0 	.word	0x2001ccf0
24004af0:	2001cfc4 	.word	0x2001cfc4
24004af4:	3c23d70a 	.word	0x3c23d70a
24004af8:	2001d128 	.word	0x2001d128
24004afc:	2001d108 	.word	0x2001d108
24004b00:	2001d178 	.word	0x2001d178
24004b04:	2001d1b8 	.word	0x2001d1b8
24004b08:	2001d198 	.word	0x2001d198
24004b0c:	2001d148 	.word	0x2001d148
24004b10:	3dcccccd 	.word	0x3dcccccd
24004b14:	3f7fffac 	.word	0x3f7fffac
24004b18:	20000f24 	.word	0x20000f24
24004b1c:	2001d35c 	.word	0x2001d35c
24004b20:	42a00000 	.word	0x42a00000
24004b24:	2001d364 	.word	0x2001d364
24004b28:	463b8000 	.word	0x463b8000
24004b2c:	2001cd58 	.word	0x2001cd58
24004b30:	2001d340 	.word	0x2001d340
24004b34:	2001cdb8 	.word	0x2001cdb8
24004b38:	3f8b851f 	.word	0x3f8b851f
24004b3c:	47bb8000 	.word	0x47bb8000
24004b40:	2001cdd8 	.word	0x2001cdd8
24004b44:	2001d54c 	.word	0x2001d54c
24004b48:	2001d56c 	.word	0x2001d56c
24004b4c:	2001cd78 	.word	0x2001cd78
24004b50:	2001cd98 	.word	0x2001cd98
24004b54:	2001d300 	.word	0x2001d300
24004b58:	c2b40000 	.word	0xc2b40000
24004b5c:	30002000 	.word	0x30002000
24004b60:	30012000 	.word	0x30012000
24004b64:	3727c5ac 	.word	0x3727c5ac
24004b68:	2001d320 	.word	0x2001d320
24004b6c:	2001d2e8 	.word	0x2001d2e8
24004b70:	3e4ccccd 	.word	0x3e4ccccd
24004b74:	3e638e39 	.word	0x3e638e39
24004b78:	ed1f 0a03 	vldr	s0, [pc, #-12]	; 24004b70 <audioInitSynth+0x484>
24004b7c:	f010 fd06 	bl	2401558c <tCycle_setFreq>
			tCycle_setFreq(&mod2[i][v], 0.22222222222f);
24004b80:	4648      	mov	r0, r9
24004b82:	ed1f 0a04 	vldr	s0, [pc, #-16]	; 24004b74 <audioInitSynth+0x488>
24004b86:	f010 fd01 	bl	2401558c <tCycle_setFreq>
	        tFeedbackLeveler_init(&feedbackControl[i][v], .99f, 0.01f, 0.125f, 0, &leaf);
24004b8a:	4b78      	ldr	r3, [pc, #480]	; (24004d6c <audioInitSynth+0x680>)
24004b8c:	eeb4 1a00 	vmov.f32	s2, #64	; 0x3e000000  0.125
24004b90:	4622      	mov	r2, r4
24004b92:	eb03 0805 	add.w	r8, r3, r5
24004b96:	4b76      	ldr	r3, [pc, #472]	; (24004d70 <audioInitSynth+0x684>)
24004b98:	eddf 0a76 	vldr	s1, [pc, #472]	; 24004d74 <audioInitSynth+0x688>
24004b9c:	2100      	movs	r1, #0
24004b9e:	1958      	adds	r0, r3, r5
24004ba0:	ed9f 0a75 	vldr	s0, [pc, #468]	; 24004d78 <audioInitSynth+0x68c>
24004ba4:	f00c fd4c 	bl	24011640 <tFeedbackLeveler_init>
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
24004ba8:	4b74      	ldr	r3, [pc, #464]	; (24004d7c <audioInitSynth+0x690>)
24004baa:	eef0 0a69 	vmov.f32	s1, s19
24004bae:	4622      	mov	r2, r4
24004bb0:	2101      	movs	r1, #1
24004bb2:	4640      	mov	r0, r8
24004bb4:	eeb0 0a68 	vmov.f32	s0, s17
24004bb8:	eb03 0905 	add.w	r9, r3, r5
24004bbc:	f00d fc8c 	bl	240124d8 <tSVF_init>
			tSVF_setSampleRate(&FXlowpass[i][v],SAMPLE_RATE * OVERSAMPLE);
24004bc0:	4640      	mov	r0, r8
24004bc2:	eeb0 0a48 	vmov.f32	s0, s16
24004bc6:	f00d fe69 	bl	2401289c <tSVF_setSampleRate>
			tSVF_init(&FXhighpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
24004bca:	4b6d      	ldr	r3, [pc, #436]	; (24004d80 <audioInitSynth+0x694>)
24004bcc:	eef0 0a69 	vmov.f32	s1, s19
24004bd0:	4622      	mov	r2, r4
24004bd2:	2100      	movs	r1, #0
24004bd4:	4648      	mov	r0, r9
24004bd6:	eeb0 0a68 	vmov.f32	s0, s17
24004bda:	eb03 0805 	add.w	r8, r3, r5
24004bde:	f00d fc7b 	bl	240124d8 <tSVF_init>
			tSVF_setSampleRate(&FXhighpass[i][v],SAMPLE_RATE * OVERSAMPLE);
24004be2:	4648      	mov	r0, r9
24004be4:	eeb0 0a48 	vmov.f32	s0, s16
24004be8:	f00d fe58 	bl	2401289c <tSVF_setSampleRate>
			tSVF_init(&FXbandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
24004bec:	4b65      	ldr	r3, [pc, #404]	; (24004d84 <audioInitSynth+0x698>)
24004bee:	4622      	mov	r2, r4
24004bf0:	eef0 0a69 	vmov.f32	s1, s19
24004bf4:	2102      	movs	r1, #2
24004bf6:	4640      	mov	r0, r8
24004bf8:	eeb0 0a68 	vmov.f32	s0, s17
24004bfc:	eb03 0905 	add.w	r9, r3, r5
24004c00:	f00d fc6a 	bl	240124d8 <tSVF_init>
			tSVF_setSampleRate(&FXbandpass[i][v],SAMPLE_RATE * OVERSAMPLE);
24004c04:	4640      	mov	r0, r8
24004c06:	eeb0 0a48 	vmov.f32	s0, s16
24004c0a:	f00d fe47 	bl	2401289c <tSVF_setSampleRate>
			tDiodeFilter_init(&FXdiodeFilters[i][v], 2000.f, 1.0f, &leaf);
24004c0e:	4b5e      	ldr	r3, [pc, #376]	; (24004d88 <audioInitSynth+0x69c>)
24004c10:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24004c14:	4621      	mov	r1, r4
24004c16:	4648      	mov	r0, r9
24004c18:	eeb0 0a68 	vmov.f32	s0, s17
24004c1c:	eb03 0805 	add.w	r8, r3, r5
24004c20:	f00f f80c 	bl	24013c3c <tDiodeFilter_init>
			tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], SAMPLE_RATE * OVERSAMPLE);
24004c24:	4648      	mov	r0, r9
24004c26:	eeb0 0a48 	vmov.f32	s0, s16
24004c2a:	f00f fc9d 	bl	24014568 <tDiodeFilter_setSampleRate>
			tVZFilterBell_init(&FXVZfilterPeak[i][v], 2000.f, 1.6f, 1.0f, &leaf);
24004c2e:	4b57      	ldr	r3, [pc, #348]	; (24004d8c <audioInitSynth+0x6a0>)
24004c30:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24004c34:	eddf 0a56 	vldr	s1, [pc, #344]	; 24004d90 <audioInitSynth+0x6a4>
24004c38:	4621      	mov	r1, r4
24004c3a:	4640      	mov	r0, r8
24004c3c:	eeb0 0a68 	vmov.f32	s0, s17
24004c40:	eb03 0905 	add.w	r9, r3, r5
24004c44:	f00e fe3c 	bl	240138c0 <tVZFilterBell_init>
			tVZFilterBell_setSampleRate(&FXVZfilterPeak[i][v], SAMPLE_RATE * OVERSAMPLE);
24004c48:	4640      	mov	r0, r8
24004c4a:	eeb0 0a48 	vmov.f32	s0, s16
24004c4e:	f00e fe3b 	bl	240138c8 <tVZFilterBell_setSampleRate>
			tVZFilterLS_init(&FXVZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
24004c52:	4b50      	ldr	r3, [pc, #320]	; (24004d94 <audioInitSynth+0x6a8>)
24004c54:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24004c58:	4621      	mov	r1, r4
24004c5a:	eef0 0a6a 	vmov.f32	s1, s21
24004c5e:	4648      	mov	r0, r9
24004c60:	eeb0 0a68 	vmov.f32	s0, s17
24004c64:	eb03 0805 	add.w	r8, r3, r5
24004c68:	f00e fb20 	bl	240132ac <tVZFilterLS_init>
			tVZFilterLS_setSampleRate(&FXVZfilterLS[i][v], SAMPLE_RATE * OVERSAMPLE);
24004c6c:	4648      	mov	r0, r9
24004c6e:	eeb0 0a48 	vmov.f32	s0, s16
24004c72:	f00e fb1f 	bl	240132b4 <tVZFilterLS_setSampleRate>
			tVZFilterHS_init(&FXVZfilterHS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
24004c76:	4b48      	ldr	r3, [pc, #288]	; (24004d98 <audioInitSynth+0x6ac>)
24004c78:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24004c7c:	4621      	mov	r1, r4
24004c7e:	eef0 0a6a 	vmov.f32	s1, s21
24004c82:	4640      	mov	r0, r8
24004c84:	eeb0 0a68 	vmov.f32	s0, s17
24004c88:	eb03 0905 	add.w	r9, r3, r5
24004c8c:	f00e fc82 	bl	24013594 <tVZFilterHS_init>
			tVZFilterHS_setSampleRate(&FXVZfilterHS[i][v], SAMPLE_RATE * OVERSAMPLE);
24004c90:	4640      	mov	r0, r8
24004c92:	eeb0 0a48 	vmov.f32	s0, s16
24004c96:	f00e fc81 	bl	2401359c <tVZFilterHS_setSampleRate>
			tVZFilter_init(&FXVZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
24004c9a:	4b40      	ldr	r3, [pc, #256]	; (24004d9c <audioInitSynth+0x6b0>)
24004c9c:	4622      	mov	r2, r4
24004c9e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24004ca2:	eb03 0805 	add.w	r8, r3, r5
24004ca6:	2104      	movs	r1, #4
24004ca8:	eeb0 0a68 	vmov.f32	s0, s17
24004cac:	4648      	mov	r0, r9
24004cae:	f00e f88d 	bl	24012dcc <tVZFilter_init>
			tVZFilter_setSampleRate(&FXVZfilterBR[i][v], SAMPLE_RATE * OVERSAMPLE);
24004cb2:	eeb0 0a48 	vmov.f32	s0, s16
24004cb6:	4648      	mov	r0, r9
		for (int i = 0; i < NUM_EFFECT; i++)
24004cb8:	3508      	adds	r5, #8
			tVZFilter_setSampleRate(&FXVZfilterBR[i][v], SAMPLE_RATE * OVERSAMPLE);
24004cba:	f00e fa45 	bl	24013148 <tVZFilter_setSampleRate>
			tLadderFilter_init(&FXLadderfilter[i][v], 2000.f, 1.0f, &leaf);
24004cbe:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24004cc2:	eeb0 0a68 	vmov.f32	s0, s17
24004cc6:	4621      	mov	r1, r4
24004cc8:	4640      	mov	r0, r8
24004cca:	f00f fc67 	bl	2401459c <tLadderFilter_init>
			tLadderFilter_setSampleRate(&FXLadderfilter[i][v], SAMPLE_RATE * OVERSAMPLE);
24004cce:	eeb0 0a48 	vmov.f32	s0, s16
24004cd2:	4640      	mov	r0, r8
24004cd4:	f00f fe2a 	bl	2401492c <tLadderFilter_setSampleRate>
		for (int i = 0; i < NUM_EFFECT; i++)
24004cd8:	42ae      	cmp	r6, r5
24004cda:	f47f ae46 	bne.w	2400496a <audioInitSynth+0x27e>
24004cde:	9e05      	ldr	r6, [sp, #20]
24004ce0:	f5ab 7580 	sub.w	r5, fp, #256	; 0x100
		}

		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
		{
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.005f, &leaf);
24004ce4:	ed9f 8a2e 	vldr	s16, [pc, #184]	; 24004da0 <audioInitSynth+0x6b4>
24004ce8:	4628      	mov	r0, r5
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
24004cea:	3508      	adds	r5, #8
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.005f, &leaf);
24004cec:	eef0 0a49 	vmov.f32	s1, s18
24004cf0:	4621      	mov	r1, r4
24004cf2:	eeb0 0a48 	vmov.f32	s0, s16
24004cf6:	f00d f847 	bl	24011d88 <tExpSmooth_init>
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
24004cfa:	45ab      	cmp	fp, r5
24004cfc:	d1f4      	bne.n	24004ce8 <audioInitSynth+0x5fc>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24004cfe:	9b02      	ldr	r3, [sp, #8]
24004d00:	eb06 0746 	add.w	r7, r6, r6, lsl #1
		}

		arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
24004d04:	4a27      	ldr	r2, [pc, #156]	; (24004da4 <audioInitSynth+0x6b8>)
24004d06:	2501      	movs	r5, #1
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24004d08:	3304      	adds	r3, #4
		arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
24004d0a:	4827      	ldr	r0, [pc, #156]	; (24004da8 <audioInitSynth+0x6bc>)
24004d0c:	2102      	movs	r1, #2
24004d0e:	9501      	str	r5, [sp, #4]
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24004d10:	9302      	str	r3, [sp, #8]
		arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
24004d12:	4438      	add	r0, r7
24004d14:	9b03      	ldr	r3, [sp, #12]
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24004d16:	f10b 0b04 	add.w	fp, fp, #4
		arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
24004d1a:	eb02 1383 	add.w	r3, r2, r3, lsl #6
24004d1e:	2220      	movs	r2, #32
24004d20:	9300      	str	r3, [sp, #0]
24004d22:	4b22      	ldr	r3, [pc, #136]	; (24004dac <audioInitSynth+0x6c0>)
24004d24:	f7fc fa26 	bl	24001174 <arm_fir_interpolate_init_f32>
		arm_fir_decimate_init_f32(&osD[v],32, 2,__leaf_table_fir2XLow, decState[v],2);
24004d28:	4a21      	ldr	r2, [pc, #132]	; (24004db0 <audioInitSynth+0x6c4>)
24004d2a:	eb06 1346 	add.w	r3, r6, r6, lsl #5
24004d2e:	2120      	movs	r1, #32
24004d30:	19d0      	adds	r0, r2, r7
24004d32:	4a20      	ldr	r2, [pc, #128]	; (24004db4 <audioInitSynth+0x6c8>)
24004d34:	4413      	add	r3, r2
24004d36:	2202      	movs	r2, #2
24004d38:	9300      	str	r3, [sp, #0]
24004d3a:	9201      	str	r2, [sp, #4]
24004d3c:	4b1b      	ldr	r3, [pc, #108]	; (24004dac <audioInitSynth+0x6c0>)
24004d3e:	f7fb fff3 	bl	24000d28 <arm_fir_decimate_init_f32>

		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
24004d42:	491d      	ldr	r1, [pc, #116]	; (24004db8 <audioInitSynth+0x6cc>)
24004d44:	4622      	mov	r2, r4
24004d46:	eddf 0a1d 	vldr	s1, [pc, #116]	; 24004dbc <audioInitSynth+0x6d0>
24004d4a:	1988      	adds	r0, r1, r6
24004d4c:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 24004dc0 <audioInitSynth+0x6d4>
24004d50:	4629      	mov	r1, r5
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24004d52:	3604      	adds	r6, #4
		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
24004d54:	f00d fbc0 	bl	240124d8 <tSVF_init>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24004d58:	9b03      	ldr	r3, [sp, #12]
24004d5a:	b90b      	cbnz	r3, 24004d60 <audioInitSynth+0x674>
24004d5c:	9503      	str	r5, [sp, #12]
24004d5e:	e4db      	b.n	24004718 <audioInitSynth+0x2c>
	}

}
24004d60:	b007      	add	sp, #28
24004d62:	ecbd 8b0a 	vpop	{d8-d12}
24004d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24004d6a:	bf00      	nop
24004d6c:	2001ccd0 	.word	0x2001ccd0
24004d70:	2001cfa4 	.word	0x2001cfa4
24004d74:	3c23d70a 	.word	0x3c23d70a
24004d78:	3f7d70a4 	.word	0x3f7d70a4
24004d7c:	2001ccb0 	.word	0x2001ccb0
24004d80:	2001cc70 	.word	0x2001cc70
24004d84:	2001cc90 	.word	0x2001cc90
24004d88:	2001cc50 	.word	0x2001cc50
24004d8c:	2001cc30 	.word	0x2001cc30
24004d90:	3fcccccd 	.word	0x3fcccccd
24004d94:	2001cc10 	.word	0x2001cc10
24004d98:	2001cbf0 	.word	0x2001cbf0
24004d9c:	2001cbd0 	.word	0x2001cbd0
24004da0:	00000000 	.word	0x00000000
24004da4:	2001d064 	.word	0x2001d064
24004da8:	2001d384 	.word	0x2001d384
24004dac:	24024b14 	.word	0x24024b14
24004db0:	2001d36c 	.word	0x2001d36c
24004db4:	2001cdf8 	.word	0x2001cdf8
24004db8:	2001cfec 	.word	0x2001cfec
24004dbc:	3e99999a 	.word	0x3e99999a
24004dc0:	46947000 	.word	0x46947000

24004dc4 <changeOversampling>:



void changeOversampling(uint32_t newOS)
{
	if (newOS != prevOversample)
24004dc4:	4b8f      	ldr	r3, [pc, #572]	; (24005004 <changeOversampling+0x240>)
{
24004dc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24004dca:	ed2d 8b02 	vpush	{d8}
	if (newOS != prevOversample)
24004dce:	681b      	ldr	r3, [r3, #0]
{
24004dd0:	b089      	sub	sp, #36	; 0x24
	if (newOS != prevOversample)
24004dd2:	4283      	cmp	r3, r0
{
24004dd4:	9007      	str	r0, [sp, #28]
	if (newOS != prevOversample)
24004dd6:	f000 810c 	beq.w	24004ff2 <changeOversampling+0x22e>
	{
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
		for (int v = 0; v < numStringsThisBoard; v++)
24004dda:	4b8b      	ldr	r3, [pc, #556]	; (24005008 <changeOversampling+0x244>)
24004ddc:	781b      	ldrb	r3, [r3, #0]
24004dde:	2b00      	cmp	r3, #0
24004de0:	f000 8107 	beq.w	24004ff2 <changeOversampling+0x22e>
24004de4:	4603      	mov	r3, r0
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
24004de6:	eddf 7a89 	vldr	s15, [pc, #548]	; 2400500c <changeOversampling+0x248>
		{
			for (int i = 0; i < NUM_EFFECT; i++)
			{
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
24004dea:	2200      	movs	r2, #0
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
24004dec:	3301      	adds	r3, #1
		for (int v = 0; v < numStringsThisBoard; v++)
24004dee:	9205      	str	r2, [sp, #20]
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
24004df0:	ee07 3a10 	vmov	s14, r3
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
24004df4:	2320      	movs	r3, #32
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
24004df6:	eeb8 8a47 	vcvt.f32.u32	s16, s14
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
24004dfa:	9304      	str	r3, [sp, #16]
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
24004dfc:	ee28 8a27 	vmul.f32	s16, s16, s15
24004e00:	eebc 8ac8 	vcvt.u32.f32	s16, s16
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
24004e04:	eeb8 8a48 	vcvt.f32.u32	s16, s16
24004e08:	4b81      	ldr	r3, [pc, #516]	; (24005010 <changeOversampling+0x24c>)
		for (int v = 0; v < numStringsThisBoard; v++)
24004e0a:	4614      	mov	r4, r2
24004e0c:	9904      	ldr	r1, [sp, #16]
24004e0e:	9206      	str	r2, [sp, #24]
24004e10:	eb03 0a01 	add.w	sl, r3, r1
24004e14:	4b7f      	ldr	r3, [pc, #508]	; (24005014 <changeOversampling+0x250>)
24004e16:	eb03 0902 	add.w	r9, r3, r2
24004e1a:	4b7f      	ldr	r3, [pc, #508]	; (24005018 <changeOversampling+0x254>)
24004e1c:	eb03 0802 	add.w	r8, r3, r2
24004e20:	4b7e      	ldr	r3, [pc, #504]	; (2400501c <changeOversampling+0x258>)
24004e22:	189f      	adds	r7, r3, r2
24004e24:	4b7e      	ldr	r3, [pc, #504]	; (24005020 <changeOversampling+0x25c>)
24004e26:	189e      	adds	r6, r3, r2
24004e28:	4b7e      	ldr	r3, [pc, #504]	; (24005024 <changeOversampling+0x260>)
24004e2a:	189d      	adds	r5, r3, r2
24004e2c:	4b7e      	ldr	r3, [pc, #504]	; (24005028 <changeOversampling+0x264>)
24004e2e:	4413      	add	r3, r2
24004e30:	469b      	mov	fp, r3
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
24004e32:	4b7e      	ldr	r3, [pc, #504]	; (2400502c <changeOversampling+0x268>)
24004e34:	eeb0 0a48 	vmov.f32	s0, s16
24004e38:	1918      	adds	r0, r3, r4
24004e3a:	f00d fd99 	bl	24012970 <tHighpass_setSampleRate>
				tHighpass_setSampleRate(&dcBlock2[i][v], osMult);
24004e3e:	4b7c      	ldr	r3, [pc, #496]	; (24005030 <changeOversampling+0x26c>)
24004e40:	eeb0 0a48 	vmov.f32	s0, s16
24004e44:	1918      	adds	r0, r3, r4
24004e46:	f00d fd93 	bl	24012970 <tHighpass_setSampleRate>
				tVZFilterLS_setSampleRate(&shelf1[i][v], osMult);
24004e4a:	4650      	mov	r0, sl
24004e4c:	eeb0 0a48 	vmov.f32	s0, s16
24004e50:	f00e fa30 	bl	240132b4 <tVZFilterLS_setSampleRate>
				tVZFilterLS_setFreqFast(&shelf1[i][v], shelf1[i][v]->cutoffMIDI);
24004e54:	f8da 3000 	ldr.w	r3, [sl]
24004e58:	4650      	mov	r0, sl
			for (int i = 0; i < NUM_EFFECT; i++)
24004e5a:	f10a 0a08 	add.w	sl, sl, #8
				tVZFilterLS_setFreqFast(&shelf1[i][v], shelf1[i][v]->cutoffMIDI);
24004e5e:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
24004e62:	f00e fa75 	bl	24013350 <tVZFilterLS_setFreqFast>
				tVZFilterHS_setSampleRate(&shelf2[i][v], osMult);
24004e66:	4648      	mov	r0, r9
24004e68:	eeb0 0a48 	vmov.f32	s0, s16
24004e6c:	f00e fb96 	bl	2401359c <tVZFilterHS_setSampleRate>
				tVZFilterHS_setFreqFast(&shelf2[i][v], shelf2[i][v]->cutoffMIDI);
24004e70:	f8d9 3000 	ldr.w	r3, [r9]
24004e74:	4648      	mov	r0, r9
			for (int i = 0; i < NUM_EFFECT; i++)
24004e76:	f109 0908 	add.w	r9, r9, #8
				tVZFilterHS_setFreqFast(&shelf2[i][v], shelf2[i][v]->cutoffMIDI);
24004e7a:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
24004e7e:	f00e fbdb 	bl	24013638 <tVZFilterHS_setFreqFast>
				tVZFilterBell_setSampleRate(&bell1[i][v], osMult);
24004e82:	4640      	mov	r0, r8
24004e84:	eeb0 0a48 	vmov.f32	s0, s16
24004e88:	f00e fd1e 	bl	240138c8 <tVZFilterBell_setSampleRate>
				tVZFilterBell_setFreqFast(&bell1[i][v], bell1[i][v]->cutoffMIDI);
24004e8c:	f8d8 3000 	ldr.w	r3, [r8]
24004e90:	4640      	mov	r0, r8
			for (int i = 0; i < NUM_EFFECT; i++)
24004e92:	f108 0808 	add.w	r8, r8, #8
				tVZFilterBell_setFreqFast(&bell1[i][v], bell1[i][v]->cutoffMIDI);
24004e96:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
24004e9a:	f00e fe07 	bl	24013aac <tVZFilterBell_setFreqFast>
				tCompressor_setSampleRate(&comp[i][v], osMult);
24004e9e:	4b65      	ldr	r3, [pc, #404]	; (24005034 <changeOversampling+0x270>)
24004ea0:	eeb0 0a48 	vmov.f32	s0, s16
24004ea4:	1918      	adds	r0, r3, r4
24004ea6:	f00c fbc7 	bl	24011638 <tCompressor_setSampleRate>
				tCycle_setSampleRate(&mod1[i][v], osMult);
24004eaa:	4b63      	ldr	r3, [pc, #396]	; (24005038 <changeOversampling+0x274>)
24004eac:	eeb0 0a48 	vmov.f32	s0, s16
24004eb0:	1918      	adds	r0, r3, r4
24004eb2:	f010 fb89 	bl	240155c8 <tCycle_setSampleRate>
				tCycle_setSampleRate(&mod2[i][v], osMult);
24004eb6:	4b61      	ldr	r3, [pc, #388]	; (2400503c <changeOversampling+0x278>)
24004eb8:	eeb0 0a48 	vmov.f32	s0, s16
24004ebc:	1918      	adds	r0, r3, r4
24004ebe:	f010 fb83 	bl	240155c8 <tCycle_setSampleRate>
				tSVF_setSampleRate(&FXlowpass[i][v],osMult);
24004ec2:	4638      	mov	r0, r7
24004ec4:	eeb0 0a48 	vmov.f32	s0, s16
24004ec8:	f00d fce8 	bl	2401289c <tSVF_setSampleRate>
				tSVF_setFreqFast(&FXlowpass[i][v], FXlowpass[i][v]->cutoffMIDI);
24004ecc:	683b      	ldr	r3, [r7, #0]
24004ece:	4638      	mov	r0, r7
			for (int i = 0; i < NUM_EFFECT; i++)
24004ed0:	3708      	adds	r7, #8
				tSVF_setFreqFast(&FXlowpass[i][v], FXlowpass[i][v]->cutoffMIDI);
24004ed2:	ed93 0a04 	vldr	s0, [r3, #16]
24004ed6:	f00d fc81 	bl	240127dc <tSVF_setFreqFast>
				tSVF_setSampleRate(&FXhighpass[i][v],osMult);
24004eda:	4630      	mov	r0, r6
24004edc:	eeb0 0a48 	vmov.f32	s0, s16
24004ee0:	f00d fcdc 	bl	2401289c <tSVF_setSampleRate>
				tSVF_setFreqFast(&FXhighpass[i][v], FXhighpass[i][v]->cutoffMIDI);
24004ee4:	6833      	ldr	r3, [r6, #0]
24004ee6:	4630      	mov	r0, r6
			for (int i = 0; i < NUM_EFFECT; i++)
24004ee8:	3608      	adds	r6, #8
				tSVF_setFreqFast(&FXhighpass[i][v], FXhighpass[i][v]->cutoffMIDI);
24004eea:	ed93 0a04 	vldr	s0, [r3, #16]
24004eee:	f00d fc75 	bl	240127dc <tSVF_setFreqFast>
				tSVF_setSampleRate(&FXbandpass[i][v],osMult);
24004ef2:	4628      	mov	r0, r5
24004ef4:	eeb0 0a48 	vmov.f32	s0, s16
24004ef8:	f00d fcd0 	bl	2401289c <tSVF_setSampleRate>
				tSVF_setFreqFast(&FXbandpass[i][v], FXbandpass[i][v]->cutoffMIDI);
24004efc:	682b      	ldr	r3, [r5, #0]
24004efe:	4628      	mov	r0, r5
			for (int i = 0; i < NUM_EFFECT; i++)
24004f00:	3508      	adds	r5, #8
				tSVF_setFreqFast(&FXbandpass[i][v], FXbandpass[i][v]->cutoffMIDI);
24004f02:	ed93 0a04 	vldr	s0, [r3, #16]
24004f06:	f00d fc69 	bl	240127dc <tSVF_setFreqFast>
				tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], osMult);
24004f0a:	4658      	mov	r0, fp
24004f0c:	eeb0 0a48 	vmov.f32	s0, s16
24004f10:	f00f fb2a 	bl	24014568 <tDiodeFilter_setSampleRate>
				tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], FXdiodeFilters[i][v]->cutoffMIDI);
24004f14:	f8db 3000 	ldr.w	r3, [fp]
24004f18:	4658      	mov	r0, fp
			for (int i = 0; i < NUM_EFFECT; i++)
24004f1a:	f10b 0b08 	add.w	fp, fp, #8
				tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], FXdiodeFilters[i][v]->cutoffMIDI);
24004f1e:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
24004f22:	4b47      	ldr	r3, [pc, #284]	; (24005040 <changeOversampling+0x27c>)
24004f24:	4423      	add	r3, r4
24004f26:	9300      	str	r3, [sp, #0]
24004f28:	f00f fb1e 	bl	24014568 <tDiodeFilter_setSampleRate>
				tVZFilterBell_setSampleRate(&FXVZfilterPeak[i][v], osMult);
24004f2c:	9b00      	ldr	r3, [sp, #0]
24004f2e:	eeb0 0a48 	vmov.f32	s0, s16
24004f32:	4618      	mov	r0, r3
24004f34:	f00e fcc8 	bl	240138c8 <tVZFilterBell_setSampleRate>
				tVZFilterBell_setFreqFast(&FXVZfilterPeak[i][v], FXVZfilterPeak[i][v]->cutoffMIDI);
24004f38:	9b00      	ldr	r3, [sp, #0]
24004f3a:	4618      	mov	r0, r3
24004f3c:	4b40      	ldr	r3, [pc, #256]	; (24005040 <changeOversampling+0x27c>)
24004f3e:	591b      	ldr	r3, [r3, r4]
24004f40:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
24004f44:	f00e fdb2 	bl	24013aac <tVZFilterBell_setFreqFast>
				tVZFilterLS_setSampleRate(&FXVZfilterLS[i][v], osMult);
24004f48:	4a3e      	ldr	r2, [pc, #248]	; (24005044 <changeOversampling+0x280>)
24004f4a:	4b3f      	ldr	r3, [pc, #252]	; (24005048 <changeOversampling+0x284>)
24004f4c:	eeb0 0a48 	vmov.f32	s0, s16
24004f50:	1911      	adds	r1, r2, r4
24004f52:	1918      	adds	r0, r3, r4
24004f54:	4b3d      	ldr	r3, [pc, #244]	; (2400504c <changeOversampling+0x288>)
24004f56:	9103      	str	r1, [sp, #12]
24004f58:	493d      	ldr	r1, [pc, #244]	; (24005050 <changeOversampling+0x28c>)
24004f5a:	4423      	add	r3, r4
24004f5c:	190a      	adds	r2, r1, r4
24004f5e:	e9cd 0300 	strd	r0, r3, [sp]
24004f62:	9202      	str	r2, [sp, #8]
24004f64:	f00e f9a6 	bl	240132b4 <tVZFilterLS_setSampleRate>
				tVZFilterLS_setFreqFast(&FXVZfilterLS[i][v], FXVZfilterLS[i][v]->cutoffMIDI);
24004f68:	4b37      	ldr	r3, [pc, #220]	; (24005048 <changeOversampling+0x284>)
24004f6a:	9800      	ldr	r0, [sp, #0]
24004f6c:	591b      	ldr	r3, [r3, r4]
24004f6e:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
24004f72:	f00e f9ed 	bl	24013350 <tVZFilterLS_setFreqFast>
				tVZFilterHS_setSampleRate(&FXVZfilterHS[i][v], osMult);
24004f76:	9903      	ldr	r1, [sp, #12]
24004f78:	eeb0 0a48 	vmov.f32	s0, s16
24004f7c:	4608      	mov	r0, r1
24004f7e:	9100      	str	r1, [sp, #0]
24004f80:	f00e fb0c 	bl	2401359c <tVZFilterHS_setSampleRate>
				tVZFilterHS_setFreqFast(&FXVZfilterHS[i][v], FXVZfilterHS[i][v]->cutoffMIDI);
24004f84:	9900      	ldr	r1, [sp, #0]
24004f86:	4a2f      	ldr	r2, [pc, #188]	; (24005044 <changeOversampling+0x280>)
24004f88:	4608      	mov	r0, r1
24004f8a:	5911      	ldr	r1, [r2, r4]
24004f8c:	ed91 0a11 	vldr	s0, [r1, #68]	; 0x44
24004f90:	f00e fb52 	bl	24013638 <tVZFilterHS_setFreqFast>
				tVZFilter_setSampleRate(&FXVZfilterBR[i][v], osMult);
24004f94:	9a02      	ldr	r2, [sp, #8]
24004f96:	eeb0 0a48 	vmov.f32	s0, s16
24004f9a:	4610      	mov	r0, r2
24004f9c:	9200      	str	r2, [sp, #0]
24004f9e:	f00e f8d3 	bl	24013148 <tVZFilter_setSampleRate>
				tVZFilter_setFreq(&FXVZfilterBR[i][v], FXVZfilterBR[i][v]->fc);
24004fa2:	492b      	ldr	r1, [pc, #172]	; (24005050 <changeOversampling+0x28c>)
24004fa4:	9a00      	ldr	r2, [sp, #0]
24004fa6:	4610      	mov	r0, r2
24004fa8:	590a      	ldr	r2, [r1, r4]
24004faa:	ed92 0a0a 	vldr	s0, [r2, #40]	; 0x28
24004fae:	f00d ff11 	bl	24012dd4 <tVZFilter_setFreq>
				tLadderFilter_setSampleRate(&FXLadderfilter[i][v], osMult);
24004fb2:	9b01      	ldr	r3, [sp, #4]
24004fb4:	eeb0 0a48 	vmov.f32	s0, s16
24004fb8:	4618      	mov	r0, r3
24004fba:	9300      	str	r3, [sp, #0]
24004fbc:	f00f fcb6 	bl	2401492c <tLadderFilter_setSampleRate>
				tLadderFilter_setFreqFast(&FXLadderfilter[i][v], FXLadderfilter[i][v]->cutoffMIDI);
24004fc0:	9b00      	ldr	r3, [sp, #0]
24004fc2:	4618      	mov	r0, r3
24004fc4:	4b21      	ldr	r3, [pc, #132]	; (2400504c <changeOversampling+0x288>)
24004fc6:	591b      	ldr	r3, [r3, r4]
			for (int i = 0; i < NUM_EFFECT; i++)
24004fc8:	3408      	adds	r4, #8
				tLadderFilter_setFreqFast(&FXLadderfilter[i][v], FXLadderfilter[i][v]->cutoffMIDI);
24004fca:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
24004fce:	f00f fc6b 	bl	240148a8 <tLadderFilter_setFreqFast>
			for (int i = 0; i < NUM_EFFECT; i++)
24004fd2:	9b04      	ldr	r3, [sp, #16]
24004fd4:	429c      	cmp	r4, r3
24004fd6:	f47f af2c 	bne.w	24004e32 <changeOversampling+0x6e>
		for (int v = 0; v < numStringsThisBoard; v++)
24004fda:	3304      	adds	r3, #4
24004fdc:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
24004fe0:	9304      	str	r3, [sp, #16]
24004fe2:	4b09      	ldr	r3, [pc, #36]	; (24005008 <changeOversampling+0x244>)
24004fe4:	3101      	adds	r1, #1
24004fe6:	3204      	adds	r2, #4
24004fe8:	781b      	ldrb	r3, [r3, #0]
24004fea:	9105      	str	r1, [sp, #20]
24004fec:	428b      	cmp	r3, r1
24004fee:	f73f af0b 	bgt.w	24004e08 <changeOversampling+0x44>
			}
		}
	}
	prevOversample = newOS;
24004ff2:	4b04      	ldr	r3, [pc, #16]	; (24005004 <changeOversampling+0x240>)
24004ff4:	9a07      	ldr	r2, [sp, #28]
24004ff6:	601a      	str	r2, [r3, #0]
}
24004ff8:	b009      	add	sp, #36	; 0x24
24004ffa:	ecbd 8b02 	vpop	{d8}
24004ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24005002:	bf00      	nop
24005004:	2001d4b0 	.word	0x2001d4b0
24005008:	200004b1 	.word	0x200004b1
2400500c:	473b8000 	.word	0x473b8000
24005010:	2001d52c 	.word	0x2001d52c
24005014:	2001d56c 	.word	0x2001d56c
24005018:	2001cd78 	.word	0x2001cd78
2400501c:	2001ccd0 	.word	0x2001ccd0
24005020:	2001ccb0 	.word	0x2001ccb0
24005024:	2001cc70 	.word	0x2001cc70
24005028:	2001cc90 	.word	0x2001cc90
2400502c:	2001cdb8 	.word	0x2001cdb8
24005030:	2001cdd8 	.word	0x2001cdd8
24005034:	2001cd98 	.word	0x2001cd98
24005038:	2001d300 	.word	0x2001d300
2400503c:	2001d320 	.word	0x2001d320
24005040:	2001cc50 	.word	0x2001cc50
24005044:	2001cc10 	.word	0x2001cc10
24005048:	2001cc30 	.word	0x2001cc30
2400504c:	2001cbd0 	.word	0x2001cbd0
24005050:	2001cbf0 	.word	0x2001cbf0

24005054 <delayTick>:
{
	param5[v][string] = (value * 1.5f) + 1.0f;
}

float delayTick(float sample, int v, int string)
{
24005054:	b538      	push	{r3, r4, r5, lr}
    sample *= param5[v][string];
24005056:	eb01 0140 	add.w	r1, r1, r0, lsl #1

    sample = sample + (delayFB[v][string] * param2[v][string]);
2400505a:	4d18      	ldr	r5, [pc, #96]	; (240050bc <delayTick+0x68>)
2400505c:	4a18      	ldr	r2, [pc, #96]	; (240050c0 <delayTick+0x6c>)
2400505e:	eb05 0581 	add.w	r5, r5, r1, lsl #2
    sample *= param5[v][string];
24005062:	4b18      	ldr	r3, [pc, #96]	; (240050c4 <delayTick+0x70>)
    sample = sample + (delayFB[v][string] * param2[v][string]);
24005064:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24005068:	edd5 7a00 	vldr	s15, [r5]
    sample *= param5[v][string];
2400506c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    sample = sample + (delayFB[v][string] * param2[v][string]);
24005070:	ed92 7a00 	vldr	s14, [r2]
    sample *= param5[v][string];
24005074:	008c      	lsls	r4, r1, #2
    sample = sample + (delayFB[v][string] * param2[v][string]);
24005076:	ee67 7a87 	vmul.f32	s15, s15, s14
2400507a:	ed93 7a00 	vldr	s14, [r3]

    sample = fast_tanh5(sample);
2400507e:	eee7 7a00 	vfma.f32	s15, s14, s0
24005082:	eeb0 0a67 	vmov.f32	s0, s15
24005086:	f00f fe2f 	bl	24014ce8 <fast_tanh5>

    sample = tFeedbackLeveler_tick(&feedbackControl[v][string], sample);
2400508a:	480f      	ldr	r0, [pc, #60]	; (240050c8 <delayTick+0x74>)
2400508c:	4420      	add	r0, r4
2400508e:	f00c fb3f 	bl	24011710 <tFeedbackLeveler_tick>

    delayFB[v][string] = tTapeDelay_tick(&tapeDelay[v][string], sample);
24005092:	480e      	ldr	r0, [pc, #56]	; (240050cc <delayTick+0x78>)
24005094:	4420      	add	r0, r4
24005096:	f00c f8b9 	bl	2401120c <tTapeDelay_tick>
    delayFB[v][string] = tSVF_tick(&FXlowpass[v][string], delayFB[v][string]);
2400509a:	480d      	ldr	r0, [pc, #52]	; (240050d0 <delayTick+0x7c>)
    delayFB[v][string] = tTapeDelay_tick(&tapeDelay[v][string], sample);
2400509c:	ed85 0a00 	vstr	s0, [r5]
    delayFB[v][string] = tSVF_tick(&FXlowpass[v][string], delayFB[v][string]);
240050a0:	4420      	add	r0, r4
240050a2:	f00d fb2d 	bl	24012700 <tSVF_tick>
    sample = tSVF_tick(&FXhighpass[v][string], delayFB[v][string]);
240050a6:	480b      	ldr	r0, [pc, #44]	; (240050d4 <delayTick+0x80>)
    delayFB[v][string] = tSVF_tick(&FXlowpass[v][string], delayFB[v][string]);
240050a8:	ed85 0a00 	vstr	s0, [r5]
    sample = tSVF_tick(&FXhighpass[v][string], delayFB[v][string]);
240050ac:	4420      	add	r0, r4
240050ae:	f00d fb27 	bl	24012700 <tSVF_tick>
    sample = fast_tanh5(sample);
240050b2:	f00f fe19 	bl	24014ce8 <fast_tanh5>
    delayFB[v][string] = sample;
240050b6:	ed85 0a00 	vstr	s0, [r5]
    return sample;
}
240050ba:	bd38      	pop	{r3, r4, r5, pc}
240050bc:	2001cf40 	.word	0x2001cf40
240050c0:	2001d3f8 	.word	0x2001d3f8
240050c4:	2001d458 	.word	0x2001d458
240050c8:	2001cfa4 	.word	0x2001cfa4
240050cc:	2001d6ec 	.word	0x2001d6ec
240050d0:	2001ccd0 	.word	0x2001ccd0
240050d4:	2001ccb0 	.word	0x2001ccb0

240050d8 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
240050d8:	4930      	ldr	r1, [pc, #192]	; (2400519c <SystemInit+0xc4>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
240050da:	4a31      	ldr	r2, [pc, #196]	; (240051a0 <SystemInit+0xc8>)
{
240050dc:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
240050de:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
{
240050e2:	b083      	sub	sp, #12
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
240050e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
240050e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
240050ec:	6813      	ldr	r3, [r2, #0]
240050ee:	f003 030f 	and.w	r3, r3, #15
240050f2:	2b06      	cmp	r3, #6
240050f4:	d805      	bhi.n	24005102 <SystemInit+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
240050f6:	6813      	ldr	r3, [r2, #0]
240050f8:	f023 030f 	bic.w	r3, r3, #15
240050fc:	f043 0307 	orr.w	r3, r3, #7
24005100:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
24005102:	4b28      	ldr	r3, [pc, #160]	; (240051a4 <SystemInit+0xcc>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
24005104:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
24005106:	4a28      	ldr	r2, [pc, #160]	; (240051a8 <SystemInit+0xd0>)
  RCC->CR |= RCC_CR_HSION;
24005108:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
2400510a:	4825      	ldr	r0, [pc, #148]	; (240051a0 <SystemInit+0xc8>)
  RCC->CR |= RCC_CR_HSION;
2400510c:	f041 0101 	orr.w	r1, r1, #1
24005110:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
24005112:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
24005114:	6819      	ldr	r1, [r3, #0]
24005116:	400a      	ands	r2, r1
24005118:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
2400511a:	6803      	ldr	r3, [r0, #0]
2400511c:	071b      	lsls	r3, r3, #28
2400511e:	d505      	bpl.n	2400512c <SystemInit+0x54>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
24005120:	6803      	ldr	r3, [r0, #0]
24005122:	f023 030f 	bic.w	r3, r3, #15
24005126:	f043 0307 	orr.w	r3, r3, #7
2400512a:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
2400512c:	4b1d      	ldr	r3, [pc, #116]	; (240051a4 <SystemInit+0xcc>)
2400512e:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
24005130:	491e      	ldr	r1, [pc, #120]	; (240051ac <SystemInit+0xd4>)
  RCC->PLLCKSELR = 0x02020200;
24005132:	4c1f      	ldr	r4, [pc, #124]	; (240051b0 <SystemInit+0xd8>)
  RCC->PLLCFGR = 0x01FF0000;
24005134:	481f      	ldr	r0, [pc, #124]	; (240051b4 <SystemInit+0xdc>)
  RCC->D1CFGR = 0x00000000;
24005136:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
24005138:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
2400513a:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
2400513c:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
2400513e:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
24005140:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
24005142:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
24005144:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
24005146:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
24005148:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
2400514a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
2400514c:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
2400514e:	4c1a      	ldr	r4, [pc, #104]	; (240051b8 <SystemInit+0xe0>)
  RCC->CR &= 0xFFFBFFFFU;
24005150:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
24005154:	4919      	ldr	r1, [pc, #100]	; (240051bc <SystemInit+0xe4>)
  RCC->CR &= 0xFFFBFFFFU;
24005156:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
24005158:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
2400515a:	6823      	ldr	r3, [r4, #0]
2400515c:	4019      	ands	r1, r3
2400515e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
24005162:	d203      	bcs.n	2400516c <SystemInit+0x94>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
24005164:	4b16      	ldr	r3, [pc, #88]	; (240051c0 <SystemInit+0xe8>)
24005166:	2201      	movs	r2, #1
24005168:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
2400516c:	4b0d      	ldr	r3, [pc, #52]	; (240051a4 <SystemInit+0xcc>)
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
2400516e:	f243 04d2 	movw	r4, #12498	; 0x30d2
24005172:	4814      	ldr	r0, [pc, #80]	; (240051c4 <SystemInit+0xec>)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
24005174:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
24005178:	4908      	ldr	r1, [pc, #32]	; (2400519c <SystemInit+0xc4>)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
2400517a:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
2400517e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  tmpreg = RCC->AHB2ENR;
24005182:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
24005186:	9301      	str	r3, [sp, #4]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
24005188:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
  (void) tmpreg;
2400518c:	9a01      	ldr	r2, [sp, #4]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
2400518e:	6004      	str	r4, [r0, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
24005190:	608b      	str	r3, [r1, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
24005192:	b003      	add	sp, #12
24005194:	f85d 4b04 	ldr.w	r4, [sp], #4
24005198:	4770      	bx	lr
2400519a:	bf00      	nop
2400519c:	e000ed00 	.word	0xe000ed00
240051a0:	52002000 	.word	0x52002000
240051a4:	58024400 	.word	0x58024400
240051a8:	eaf6ed7f 	.word	0xeaf6ed7f
240051ac:	01010280 	.word	0x01010280
240051b0:	02020200 	.word	0x02020200
240051b4:	01ff0000 	.word	0x01ff0000
240051b8:	5c001000 	.word	0x5c001000
240051bc:	ffff0000 	.word	0xffff0000
240051c0:	51008000 	.word	0x51008000
240051c4:	52004000 	.word	0x52004000

240051c8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
240051c8:	4b0f      	ldr	r3, [pc, #60]	; (24005208 <HAL_InitTick+0x40>)
240051ca:	781b      	ldrb	r3, [r3, #0]
240051cc:	b90b      	cbnz	r3, 240051d2 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
240051ce:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
240051d0:	4770      	bx	lr
{
240051d2:	b510      	push	{r4, lr}
240051d4:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
240051d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
240051da:	4a0c      	ldr	r2, [pc, #48]	; (2400520c <HAL_InitTick+0x44>)
240051dc:	fbb0 f3f3 	udiv	r3, r0, r3
240051e0:	6810      	ldr	r0, [r2, #0]
240051e2:	fbb0 f0f3 	udiv	r0, r0, r3
240051e6:	f000 f8cd 	bl	24005384 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
240051ea:	2c0f      	cmp	r4, #15
240051ec:	d800      	bhi.n	240051f0 <HAL_InitTick+0x28>
240051ee:	b108      	cbz	r0, 240051f4 <HAL_InitTick+0x2c>
    return HAL_ERROR;
240051f0:	2001      	movs	r0, #1
}
240051f2:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
240051f4:	2200      	movs	r2, #0
240051f6:	4621      	mov	r1, r4
240051f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
240051fc:	f000 f876 	bl	240052ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
24005200:	4b03      	ldr	r3, [pc, #12]	; (24005210 <HAL_InitTick+0x48>)
24005202:	2000      	movs	r0, #0
24005204:	601c      	str	r4, [r3, #0]
}
24005206:	bd10      	pop	{r4, pc}
24005208:	200008c0 	.word	0x200008c0
2400520c:	200008b4 	.word	0x200008b4
24005210:	200008c4 	.word	0x200008c4

24005214 <HAL_Init>:
{
24005214:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
24005216:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24005218:	4c12      	ldr	r4, [pc, #72]	; (24005264 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
2400521a:	f000 f855 	bl	240052c8 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
2400521e:	f003 fae7 	bl	240087f0 <HAL_RCC_GetSysClockFreq>
24005222:	4b11      	ldr	r3, [pc, #68]	; (24005268 <HAL_Init+0x54>)
24005224:	4911      	ldr	r1, [pc, #68]	; (2400526c <HAL_Init+0x58>)
24005226:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24005228:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
2400522a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400522e:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24005232:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24005234:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24005236:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
2400523a:	490d      	ldr	r1, [pc, #52]	; (24005270 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400523c:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24005240:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24005242:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
24005246:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
24005248:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400524a:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
2400524c:	f7ff ffbc 	bl	240051c8 <HAL_InitTick>
24005250:	b110      	cbz	r0, 24005258 <HAL_Init+0x44>
    return HAL_ERROR;
24005252:	2401      	movs	r4, #1
}
24005254:	4620      	mov	r0, r4
24005256:	bd10      	pop	{r4, pc}
24005258:	4604      	mov	r4, r0
  HAL_MspInit();
2400525a:	f7ff f981 	bl	24004560 <HAL_MspInit>
}
2400525e:	4620      	mov	r0, r4
24005260:	bd10      	pop	{r4, pc}
24005262:	bf00      	nop
24005264:	200008b8 	.word	0x200008b8
24005268:	58024400 	.word	0x58024400
2400526c:	2401c694 	.word	0x2401c694
24005270:	200008b4 	.word	0x200008b4

24005274 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
24005274:	4a03      	ldr	r2, [pc, #12]	; (24005284 <HAL_IncTick+0x10>)
24005276:	4b04      	ldr	r3, [pc, #16]	; (24005288 <HAL_IncTick+0x14>)
24005278:	6811      	ldr	r1, [r2, #0]
2400527a:	781b      	ldrb	r3, [r3, #0]
2400527c:	440b      	add	r3, r1
2400527e:	6013      	str	r3, [r2, #0]
}
24005280:	4770      	bx	lr
24005282:	bf00      	nop
24005284:	2001d780 	.word	0x2001d780
24005288:	200008c0 	.word	0x200008c0

2400528c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
2400528c:	4b01      	ldr	r3, [pc, #4]	; (24005294 <HAL_GetTick+0x8>)
2400528e:	6818      	ldr	r0, [r3, #0]
}
24005290:	4770      	bx	lr
24005292:	bf00      	nop
24005294:	2001d780 	.word	0x2001d780

24005298 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
24005298:	b538      	push	{r3, r4, r5, lr}
2400529a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
2400529c:	f7ff fff6 	bl	2400528c <HAL_GetTick>
240052a0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
240052a2:	1c63      	adds	r3, r4, #1
240052a4:	d002      	beq.n	240052ac <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
240052a6:	4b04      	ldr	r3, [pc, #16]	; (240052b8 <HAL_Delay+0x20>)
240052a8:	781b      	ldrb	r3, [r3, #0]
240052aa:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
240052ac:	f7ff ffee 	bl	2400528c <HAL_GetTick>
240052b0:	1b43      	subs	r3, r0, r5
240052b2:	42a3      	cmp	r3, r4
240052b4:	d3fa      	bcc.n	240052ac <HAL_Delay+0x14>
  {
  }
}
240052b6:	bd38      	pop	{r3, r4, r5, pc}
240052b8:	200008c0 	.word	0x200008c0

240052bc <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
240052bc:	4b01      	ldr	r3, [pc, #4]	; (240052c4 <HAL_GetREVID+0x8>)
240052be:	6818      	ldr	r0, [r3, #0]
}
240052c0:	0c00      	lsrs	r0, r0, #16
240052c2:	4770      	bx	lr
240052c4:	5c001000 	.word	0x5c001000

240052c8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
240052c8:	4906      	ldr	r1, [pc, #24]	; (240052e4 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
240052ca:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
240052ce:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
240052d0:	4b05      	ldr	r3, [pc, #20]	; (240052e8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
240052d2:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
240052d4:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
240052d8:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
240052dc:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
240052de:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
240052e0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
240052e2:	4770      	bx	lr
240052e4:	e000ed00 	.word	0xe000ed00
240052e8:	05fa0000 	.word	0x05fa0000

240052ec <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
240052ec:	4b1b      	ldr	r3, [pc, #108]	; (2400535c <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
240052ee:	b500      	push	{lr}
240052f0:	68db      	ldr	r3, [r3, #12]
240052f2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
240052f6:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
240052fa:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
240052fe:	f1be 0f04 	cmp.w	lr, #4
24005302:	bf28      	it	cs
24005304:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24005308:	f1bc 0f06 	cmp.w	ip, #6
2400530c:	d91a      	bls.n	24005344 <HAL_NVIC_SetPriority+0x58>
2400530e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
24005310:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
24005314:	fa0c fc03 	lsl.w	ip, ip, r3
24005318:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
2400531c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
24005320:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24005322:	fa0c fc0e 	lsl.w	ip, ip, lr
24005326:	ea21 010c 	bic.w	r1, r1, ip
2400532a:	fa01 f103 	lsl.w	r1, r1, r3
2400532e:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
24005332:	db0a      	blt.n	2400534a <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24005334:	0109      	lsls	r1, r1, #4
24005336:	4b0a      	ldr	r3, [pc, #40]	; (24005360 <HAL_NVIC_SetPriority+0x74>)
24005338:	b2c9      	uxtb	r1, r1
2400533a:	4403      	add	r3, r0
2400533c:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
24005340:	f85d fb04 	ldr.w	pc, [sp], #4
24005344:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24005346:	4613      	mov	r3, r2
24005348:	e7e8      	b.n	2400531c <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2400534a:	f000 000f 	and.w	r0, r0, #15
2400534e:	0109      	lsls	r1, r1, #4
24005350:	4b04      	ldr	r3, [pc, #16]	; (24005364 <HAL_NVIC_SetPriority+0x78>)
24005352:	b2c9      	uxtb	r1, r1
24005354:	4403      	add	r3, r0
24005356:	7619      	strb	r1, [r3, #24]
24005358:	f85d fb04 	ldr.w	pc, [sp], #4
2400535c:	e000ed00 	.word	0xe000ed00
24005360:	e000e100 	.word	0xe000e100
24005364:	e000ecfc 	.word	0xe000ecfc

24005368 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
24005368:	2800      	cmp	r0, #0
2400536a:	db07      	blt.n	2400537c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
2400536c:	2301      	movs	r3, #1
2400536e:	f000 011f 	and.w	r1, r0, #31
24005372:	4a03      	ldr	r2, [pc, #12]	; (24005380 <HAL_NVIC_EnableIRQ+0x18>)
24005374:	0940      	lsrs	r0, r0, #5
24005376:	408b      	lsls	r3, r1
24005378:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
2400537c:	4770      	bx	lr
2400537e:	bf00      	nop
24005380:	e000e100 	.word	0xe000e100

24005384 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
24005384:	1e43      	subs	r3, r0, #1
24005386:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
2400538a:	d20c      	bcs.n	240053a6 <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
2400538c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
24005390:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24005392:	4906      	ldr	r1, [pc, #24]	; (240053ac <HAL_SYSTICK_Config+0x28>)
24005394:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
24005398:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
2400539a:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2400539c:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
240053a0:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
240053a2:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
240053a4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
240053a6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
240053a8:	4770      	bx	lr
240053aa:	bf00      	nop
240053ac:	e000ed00 	.word	0xe000ed00

240053b0 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
240053b0:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
240053b4:	4b04      	ldr	r3, [pc, #16]	; (240053c8 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
240053b6:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
240053b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
240053ba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
240053be:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
240053c0:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
240053c4:	4770      	bx	lr
240053c6:	bf00      	nop
240053c8:	e000ed00 	.word	0xe000ed00

240053cc <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
240053cc:	4b06      	ldr	r3, [pc, #24]	; (240053e8 <HAL_MPU_Enable+0x1c>)
240053ce:	f040 0001 	orr.w	r0, r0, #1
240053d2:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
240053d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
240053d8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
240053dc:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
240053de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
240053e2:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
240053e6:	4770      	bx	lr
240053e8:	e000ed00 	.word	0xe000ed00

240053ec <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
240053ec:	7843      	ldrb	r3, [r0, #1]
240053ee:	4a16      	ldr	r2, [pc, #88]	; (24005448 <HAL_MPU_ConfigRegion+0x5c>)
240053f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
240053f4:	7803      	ldrb	r3, [r0, #0]
240053f6:	b313      	cbz	r3, 2400543e <HAL_MPU_ConfigRegion+0x52>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
240053f8:	6843      	ldr	r3, [r0, #4]
240053fa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
240053fe:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24005400:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
24005404:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
24005406:	7801      	ldrb	r1, [r0, #0]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24005408:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
2400540c:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24005410:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
24005412:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24005414:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
24005418:	f890 c00e 	ldrb.w	ip, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
2400541c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
24005420:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24005422:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
24005426:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
2400542a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
2400542e:	7a01      	ldrb	r1, [r0, #8]
24005430:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
24005434:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24005438:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
2400543c:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
2400543e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
24005442:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  }
}
24005446:	4770      	bx	lr
24005448:	e000ed00 	.word	0xe000ed00

2400544c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
2400544c:	4b33      	ldr	r3, [pc, #204]	; (2400551c <DMA_CalcBaseAndBitshift+0xd0>)
{
2400544e:	4601      	mov	r1, r0
24005450:	b470      	push	{r4, r5, r6}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24005452:	4e33      	ldr	r6, [pc, #204]	; (24005520 <DMA_CalcBaseAndBitshift+0xd4>)
24005454:	6802      	ldr	r2, [r0, #0]
24005456:	4d33      	ldr	r5, [pc, #204]	; (24005524 <DMA_CalcBaseAndBitshift+0xd8>)
24005458:	42b2      	cmp	r2, r6
2400545a:	bf18      	it	ne
2400545c:	429a      	cmpne	r2, r3
2400545e:	4c32      	ldr	r4, [pc, #200]	; (24005528 <DMA_CalcBaseAndBitshift+0xdc>)
24005460:	4832      	ldr	r0, [pc, #200]	; (2400552c <DMA_CalcBaseAndBitshift+0xe0>)
24005462:	bf0c      	ite	eq
24005464:	2301      	moveq	r3, #1
24005466:	2300      	movne	r3, #0
24005468:	42aa      	cmp	r2, r5
2400546a:	bf08      	it	eq
2400546c:	f043 0301 	orreq.w	r3, r3, #1
24005470:	42a2      	cmp	r2, r4
24005472:	bf08      	it	eq
24005474:	f043 0301 	orreq.w	r3, r3, #1
24005478:	3430      	adds	r4, #48	; 0x30
2400547a:	4282      	cmp	r2, r0
2400547c:	bf08      	it	eq
2400547e:	f043 0301 	orreq.w	r3, r3, #1
24005482:	3030      	adds	r0, #48	; 0x30
24005484:	42a2      	cmp	r2, r4
24005486:	bf08      	it	eq
24005488:	f043 0301 	orreq.w	r3, r3, #1
2400548c:	3430      	adds	r4, #48	; 0x30
2400548e:	4282      	cmp	r2, r0
24005490:	bf08      	it	eq
24005492:	f043 0301 	orreq.w	r3, r3, #1
24005496:	f500 705c 	add.w	r0, r0, #880	; 0x370
2400549a:	42a2      	cmp	r2, r4
2400549c:	bf08      	it	eq
2400549e:	f043 0301 	orreq.w	r3, r3, #1
240054a2:	f504 745c 	add.w	r4, r4, #880	; 0x370
240054a6:	4282      	cmp	r2, r0
240054a8:	bf08      	it	eq
240054aa:	f043 0301 	orreq.w	r3, r3, #1
240054ae:	3030      	adds	r0, #48	; 0x30
240054b0:	42a2      	cmp	r2, r4
240054b2:	bf08      	it	eq
240054b4:	f043 0301 	orreq.w	r3, r3, #1
240054b8:	3430      	adds	r4, #48	; 0x30
240054ba:	4282      	cmp	r2, r0
240054bc:	bf08      	it	eq
240054be:	f043 0301 	orreq.w	r3, r3, #1
240054c2:	3030      	adds	r0, #48	; 0x30
240054c4:	42a2      	cmp	r2, r4
240054c6:	bf08      	it	eq
240054c8:	f043 0301 	orreq.w	r3, r3, #1
240054cc:	3430      	adds	r4, #48	; 0x30
240054ce:	4282      	cmp	r2, r0
240054d0:	bf08      	it	eq
240054d2:	f043 0301 	orreq.w	r3, r3, #1
240054d6:	3030      	adds	r0, #48	; 0x30
240054d8:	42a2      	cmp	r2, r4
240054da:	bf08      	it	eq
240054dc:	f043 0301 	orreq.w	r3, r3, #1
240054e0:	4282      	cmp	r2, r0
240054e2:	bf08      	it	eq
240054e4:	f043 0301 	orreq.w	r3, r3, #1
240054e8:	b913      	cbnz	r3, 240054f0 <DMA_CalcBaseAndBitshift+0xa4>
240054ea:	4b11      	ldr	r3, [pc, #68]	; (24005530 <DMA_CalcBaseAndBitshift+0xe4>)
240054ec:	429a      	cmp	r2, r3
240054ee:	d112      	bne.n	24005516 <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
240054f0:	b2d3      	uxtb	r3, r2
240054f2:	4810      	ldr	r0, [pc, #64]	; (24005534 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
240054f4:	4c10      	ldr	r4, [pc, #64]	; (24005538 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
240054f6:	3b10      	subs	r3, #16
240054f8:	fba0 5003 	umull	r5, r0, r0, r3

    if (stream_number > 3U)
240054fc:	2b5f      	cmp	r3, #95	; 0x5f
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
240054fe:	ea4f 1010 	mov.w	r0, r0, lsr #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
24005502:	5c20      	ldrb	r0, [r4, r0]
24005504:	65c8      	str	r0, [r1, #92]	; 0x5c
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
24005506:	480d      	ldr	r0, [pc, #52]	; (2400553c <DMA_CalcBaseAndBitshift+0xf0>)
24005508:	ea00 0002 	and.w	r0, r0, r2
2400550c:	bf88      	it	hi
2400550e:	3004      	addhi	r0, #4
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
24005510:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
24005512:	bc70      	pop	{r4, r5, r6}
24005514:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
24005516:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
2400551a:	e7f9      	b.n	24005510 <DMA_CalcBaseAndBitshift+0xc4>
2400551c:	40020010 	.word	0x40020010
24005520:	40020028 	.word	0x40020028
24005524:	40020040 	.word	0x40020040
24005528:	40020058 	.word	0x40020058
2400552c:	40020070 	.word	0x40020070
24005530:	400204b8 	.word	0x400204b8
24005534:	aaaaaaab 	.word	0xaaaaaaab
24005538:	2401c6a4 	.word	0x2401c6a4
2400553c:	fffffc00 	.word	0xfffffc00

24005540 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
24005540:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24005542:	4a27      	ldr	r2, [pc, #156]	; (240055e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
24005544:	4927      	ldr	r1, [pc, #156]	; (240055e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
{
24005546:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24005548:	4d27      	ldr	r5, [pc, #156]	; (240055e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
2400554a:	4c28      	ldr	r4, [pc, #160]	; (240055ec <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
2400554c:	42ab      	cmp	r3, r5
2400554e:	bf18      	it	ne
24005550:	4293      	cmpne	r3, r2
24005552:	bf0c      	ite	eq
24005554:	2201      	moveq	r2, #1
24005556:	2200      	movne	r2, #0
24005558:	428b      	cmp	r3, r1
2400555a:	bf08      	it	eq
2400555c:	f042 0201 	orreq.w	r2, r2, #1
24005560:	3128      	adds	r1, #40	; 0x28
24005562:	42a3      	cmp	r3, r4
24005564:	bf08      	it	eq
24005566:	f042 0201 	orreq.w	r2, r2, #1
2400556a:	3428      	adds	r4, #40	; 0x28
2400556c:	428b      	cmp	r3, r1
2400556e:	bf08      	it	eq
24005570:	f042 0201 	orreq.w	r2, r2, #1
24005574:	3128      	adds	r1, #40	; 0x28
24005576:	42a3      	cmp	r3, r4
24005578:	bf08      	it	eq
2400557a:	f042 0201 	orreq.w	r2, r2, #1
2400557e:	428b      	cmp	r3, r1
24005580:	bf08      	it	eq
24005582:	f042 0201 	orreq.w	r2, r2, #1
24005586:	b912      	cbnz	r2, 2400558e <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
24005588:	4a19      	ldr	r2, [pc, #100]	; (240055f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
2400558a:	4293      	cmp	r3, r2
2400558c:	d113      	bne.n	240055b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
2400558e:	b2db      	uxtb	r3, r3
24005590:	4918      	ldr	r1, [pc, #96]	; (240055f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
24005592:	4a19      	ldr	r2, [pc, #100]	; (240055f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
24005594:	3b08      	subs	r3, #8
24005596:	4c19      	ldr	r4, [pc, #100]	; (240055fc <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
24005598:	fba1 1303 	umull	r1, r3, r1, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
2400559c:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
2400559e:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
240055a2:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
240055a6:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
240055a8:	fa01 f303 	lsl.w	r3, r1, r3
240055ac:	6683      	str	r3, [r0, #104]	; 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
240055ae:	e9c0 2418 	strd	r2, r4, [r0, #96]	; 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
240055b2:	bc30      	pop	{r4, r5}
240055b4:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
240055b6:	b2d9      	uxtb	r1, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
240055b8:	4a11      	ldr	r2, [pc, #68]	; (24005600 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
240055ba:	4c12      	ldr	r4, [pc, #72]	; (24005604 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
240055bc:	3910      	subs	r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
240055be:	441a      	add	r2, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
240055c0:	fba4 4101 	umull	r4, r1, r4, r1
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
240055c4:	2aa8      	cmp	r2, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
240055c6:	ea4f 1111 	mov.w	r1, r1, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
240055ca:	d800      	bhi.n	240055ce <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
240055cc:	3108      	adds	r1, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
240055ce:	4a0e      	ldr	r2, [pc, #56]	; (24005608 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
240055d0:	f001 041f 	and.w	r4, r1, #31
240055d4:	2301      	movs	r3, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
240055d6:	440a      	add	r2, r1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
240055d8:	40a3      	lsls	r3, r4
240055da:	4c0c      	ldr	r4, [pc, #48]	; (2400560c <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
240055dc:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
240055de:	e7e5      	b.n	240055ac <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>
240055e0:	58025408 	.word	0x58025408
240055e4:	58025430 	.word	0x58025430
240055e8:	5802541c 	.word	0x5802541c
240055ec:	58025444 	.word	0x58025444
240055f0:	58025494 	.word	0x58025494
240055f4:	cccccccd 	.word	0xcccccccd
240055f8:	16009600 	.word	0x16009600
240055fc:	58025880 	.word	0x58025880
24005600:	bffdfbf0 	.word	0xbffdfbf0
24005604:	aaaaaaab 	.word	0xaaaaaaab
24005608:	10008200 	.word	0x10008200
2400560c:	40020880 	.word	0x40020880

24005610 <HAL_DMA_Init>:
{
24005610:	b538      	push	{r3, r4, r5, lr}
24005612:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
24005614:	f7ff fe3a 	bl	2400528c <HAL_GetTick>
  if(hdma == NULL)
24005618:	2c00      	cmp	r4, #0
2400561a:	f000 816a 	beq.w	240058f2 <HAL_DMA_Init+0x2e2>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
2400561e:	6822      	ldr	r2, [r4, #0]
24005620:	4605      	mov	r5, r0
24005622:	4ba3      	ldr	r3, [pc, #652]	; (240058b0 <HAL_DMA_Init+0x2a0>)
24005624:	429a      	cmp	r2, r3
24005626:	d048      	beq.n	240056ba <HAL_DMA_Init+0xaa>
24005628:	3318      	adds	r3, #24
2400562a:	429a      	cmp	r2, r3
2400562c:	d045      	beq.n	240056ba <HAL_DMA_Init+0xaa>
2400562e:	3330      	adds	r3, #48	; 0x30
24005630:	49a0      	ldr	r1, [pc, #640]	; (240058b4 <HAL_DMA_Init+0x2a4>)
24005632:	428a      	cmp	r2, r1
24005634:	bf18      	it	ne
24005636:	429a      	cmpne	r2, r3
24005638:	f101 0130 	add.w	r1, r1, #48	; 0x30
2400563c:	bf0c      	ite	eq
2400563e:	2301      	moveq	r3, #1
24005640:	2300      	movne	r3, #0
24005642:	428a      	cmp	r2, r1
24005644:	bf08      	it	eq
24005646:	f043 0301 	orreq.w	r3, r3, #1
2400564a:	3118      	adds	r1, #24
2400564c:	428a      	cmp	r2, r1
2400564e:	bf08      	it	eq
24005650:	f043 0301 	orreq.w	r3, r3, #1
24005654:	3118      	adds	r1, #24
24005656:	428a      	cmp	r2, r1
24005658:	bf08      	it	eq
2400565a:	f043 0301 	orreq.w	r3, r3, #1
2400565e:	3118      	adds	r1, #24
24005660:	428a      	cmp	r2, r1
24005662:	bf08      	it	eq
24005664:	f043 0301 	orreq.w	r3, r3, #1
24005668:	f501 7156 	add.w	r1, r1, #856	; 0x358
2400566c:	428a      	cmp	r2, r1
2400566e:	bf08      	it	eq
24005670:	f043 0301 	orreq.w	r3, r3, #1
24005674:	3118      	adds	r1, #24
24005676:	428a      	cmp	r2, r1
24005678:	bf08      	it	eq
2400567a:	f043 0301 	orreq.w	r3, r3, #1
2400567e:	3118      	adds	r1, #24
24005680:	428a      	cmp	r2, r1
24005682:	bf08      	it	eq
24005684:	f043 0301 	orreq.w	r3, r3, #1
24005688:	3118      	adds	r1, #24
2400568a:	428a      	cmp	r2, r1
2400568c:	bf08      	it	eq
2400568e:	f043 0301 	orreq.w	r3, r3, #1
24005692:	3118      	adds	r1, #24
24005694:	428a      	cmp	r2, r1
24005696:	bf08      	it	eq
24005698:	f043 0301 	orreq.w	r3, r3, #1
2400569c:	3118      	adds	r1, #24
2400569e:	428a      	cmp	r2, r1
240056a0:	bf08      	it	eq
240056a2:	f043 0301 	orreq.w	r3, r3, #1
240056a6:	3118      	adds	r1, #24
240056a8:	428a      	cmp	r2, r1
240056aa:	bf08      	it	eq
240056ac:	f043 0301 	orreq.w	r3, r3, #1
240056b0:	b91b      	cbnz	r3, 240056ba <HAL_DMA_Init+0xaa>
240056b2:	4b81      	ldr	r3, [pc, #516]	; (240058b8 <HAL_DMA_Init+0x2a8>)
240056b4:	429a      	cmp	r2, r3
240056b6:	f040 8184 	bne.w	240059c2 <HAL_DMA_Init+0x3b2>
    hdma->State = HAL_DMA_STATE_BUSY;
240056ba:	2302      	movs	r3, #2
240056bc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
240056c0:	2300      	movs	r3, #0
240056c2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
240056c6:	6813      	ldr	r3, [r2, #0]
240056c8:	f023 0301 	bic.w	r3, r3, #1
240056cc:	6013      	str	r3, [r2, #0]
240056ce:	e005      	b.n	240056dc <HAL_DMA_Init+0xcc>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
240056d0:	f7ff fddc 	bl	2400528c <HAL_GetTick>
240056d4:	1b43      	subs	r3, r0, r5
240056d6:	2b05      	cmp	r3, #5
240056d8:	f200 80fe 	bhi.w	240058d8 <HAL_DMA_Init+0x2c8>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
240056dc:	6823      	ldr	r3, [r4, #0]
240056de:	681a      	ldr	r2, [r3, #0]
240056e0:	07d0      	lsls	r0, r2, #31
240056e2:	d4f5      	bmi.n	240056d0 <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
240056e4:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
240056e8:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
240056ea:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
240056ec:	681d      	ldr	r5, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
240056ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
240056f0:	430a      	orrs	r2, r1
240056f2:	6961      	ldr	r1, [r4, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
240056f4:	2804      	cmp	r0, #4
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
240056f6:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
240056fa:	69a1      	ldr	r1, [r4, #24]
240056fc:	ea42 0201 	orr.w	r2, r2, r1
24005700:	69e1      	ldr	r1, [r4, #28]
24005702:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
24005706:	6a21      	ldr	r1, [r4, #32]
24005708:	ea42 0201 	orr.w	r2, r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
2400570c:	496b      	ldr	r1, [pc, #428]	; (240058bc <HAL_DMA_Init+0x2ac>)
2400570e:	ea01 0105 	and.w	r1, r1, r5
    registerValue |=  hdma->Init.Direction           |
24005712:	ea42 0201 	orr.w	r2, r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24005716:	d103      	bne.n	24005720 <HAL_DMA_Init+0x110>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
24005718:	e9d4 100b 	ldrd	r1, r0, [r4, #44]	; 0x2c
2400571c:	4301      	orrs	r1, r0
2400571e:	430a      	orrs	r2, r1
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
24005720:	4867      	ldr	r0, [pc, #412]	; (240058c0 <HAL_DMA_Init+0x2b0>)
24005722:	4968      	ldr	r1, [pc, #416]	; (240058c4 <HAL_DMA_Init+0x2b4>)
24005724:	6800      	ldr	r0, [r0, #0]
24005726:	4001      	ands	r1, r0
24005728:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
2400572c:	d30a      	bcc.n	24005744 <HAL_DMA_Init+0x134>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
2400572e:	6861      	ldr	r1, [r4, #4]
24005730:	f1a1 0029 	sub.w	r0, r1, #41	; 0x29
24005734:	281f      	cmp	r0, #31
24005736:	f240 80d6 	bls.w	240058e6 <HAL_DMA_Init+0x2d6>
2400573a:	394f      	subs	r1, #79	; 0x4f
2400573c:	2903      	cmp	r1, #3
2400573e:	d801      	bhi.n	24005744 <HAL_DMA_Init+0x134>
        registerValue |= DMA_SxCR_TRBUFF;
24005740:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
24005744:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
24005746:	6821      	ldr	r1, [r4, #0]
    registerValue |= hdma->Init.FIFOMode;
24005748:	6a62      	ldr	r2, [r4, #36]	; 0x24
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
2400574a:	694b      	ldr	r3, [r1, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
2400574c:	2a04      	cmp	r2, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
2400574e:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
24005752:	ea43 0302 	orr.w	r3, r3, r2
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24005756:	d10e      	bne.n	24005776 <HAL_DMA_Init+0x166>
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
24005758:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
      registerValue |= hdma->Init.FIFOThreshold;
2400575c:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
2400575e:	b150      	cbz	r0, 24005776 <HAL_DMA_Init+0x166>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
24005760:	69a5      	ldr	r5, [r4, #24]
24005762:	2d00      	cmp	r5, #0
24005764:	f040 8107 	bne.w	24005976 <HAL_DMA_Init+0x366>
    switch (hdma->Init.FIFOThreshold)
24005768:	2a01      	cmp	r2, #1
2400576a:	f000 8125 	beq.w	240059b8 <HAL_DMA_Init+0x3a8>
2400576e:	f032 0202 	bics.w	r2, r2, #2
24005772:	f000 8108 	beq.w	24005986 <HAL_DMA_Init+0x376>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
24005776:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24005778:	4620      	mov	r0, r4
2400577a:	f7ff fe67 	bl	2400544c <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
2400577e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
24005780:	233f      	movs	r3, #63	; 0x3f
24005782:	f002 021f 	and.w	r2, r2, #31
24005786:	4093      	lsls	r3, r2
24005788:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2400578a:	6822      	ldr	r2, [r4, #0]
2400578c:	4b48      	ldr	r3, [pc, #288]	; (240058b0 <HAL_DMA_Init+0x2a0>)
2400578e:	484e      	ldr	r0, [pc, #312]	; (240058c8 <HAL_DMA_Init+0x2b8>)
24005790:	4948      	ldr	r1, [pc, #288]	; (240058b4 <HAL_DMA_Init+0x2a4>)
24005792:	4282      	cmp	r2, r0
24005794:	bf18      	it	ne
24005796:	429a      	cmpne	r2, r3
24005798:	f100 0030 	add.w	r0, r0, #48	; 0x30
2400579c:	bf0c      	ite	eq
2400579e:	2301      	moveq	r3, #1
240057a0:	2300      	movne	r3, #0
240057a2:	428a      	cmp	r2, r1
240057a4:	bf08      	it	eq
240057a6:	f043 0301 	orreq.w	r3, r3, #1
240057aa:	3130      	adds	r1, #48	; 0x30
240057ac:	4282      	cmp	r2, r0
240057ae:	bf08      	it	eq
240057b0:	f043 0301 	orreq.w	r3, r3, #1
240057b4:	3030      	adds	r0, #48	; 0x30
240057b6:	428a      	cmp	r2, r1
240057b8:	bf08      	it	eq
240057ba:	f043 0301 	orreq.w	r3, r3, #1
240057be:	3130      	adds	r1, #48	; 0x30
240057c0:	4282      	cmp	r2, r0
240057c2:	bf08      	it	eq
240057c4:	f043 0301 	orreq.w	r3, r3, #1
240057c8:	3030      	adds	r0, #48	; 0x30
240057ca:	428a      	cmp	r2, r1
240057cc:	bf08      	it	eq
240057ce:	f043 0301 	orreq.w	r3, r3, #1
240057d2:	f501 715c 	add.w	r1, r1, #880	; 0x370
240057d6:	4282      	cmp	r2, r0
240057d8:	bf08      	it	eq
240057da:	f043 0301 	orreq.w	r3, r3, #1
240057de:	f500 705c 	add.w	r0, r0, #880	; 0x370
240057e2:	428a      	cmp	r2, r1
240057e4:	bf08      	it	eq
240057e6:	f043 0301 	orreq.w	r3, r3, #1
240057ea:	3130      	adds	r1, #48	; 0x30
240057ec:	4282      	cmp	r2, r0
240057ee:	bf08      	it	eq
240057f0:	f043 0301 	orreq.w	r3, r3, #1
240057f4:	3030      	adds	r0, #48	; 0x30
240057f6:	428a      	cmp	r2, r1
240057f8:	bf08      	it	eq
240057fa:	f043 0301 	orreq.w	r3, r3, #1
240057fe:	3130      	adds	r1, #48	; 0x30
24005800:	4282      	cmp	r2, r0
24005802:	bf08      	it	eq
24005804:	f043 0301 	orreq.w	r3, r3, #1
24005808:	3030      	adds	r0, #48	; 0x30
2400580a:	428a      	cmp	r2, r1
2400580c:	bf08      	it	eq
2400580e:	f043 0301 	orreq.w	r3, r3, #1
24005812:	3130      	adds	r1, #48	; 0x30
24005814:	4282      	cmp	r2, r0
24005816:	bf08      	it	eq
24005818:	f043 0301 	orreq.w	r3, r3, #1
2400581c:	3030      	adds	r0, #48	; 0x30
2400581e:	428a      	cmp	r2, r1
24005820:	bf08      	it	eq
24005822:	f043 0301 	orreq.w	r3, r3, #1
24005826:	4929      	ldr	r1, [pc, #164]	; (240058cc <HAL_DMA_Init+0x2bc>)
24005828:	4282      	cmp	r2, r0
2400582a:	bf08      	it	eq
2400582c:	f043 0301 	orreq.w	r3, r3, #1
24005830:	4827      	ldr	r0, [pc, #156]	; (240058d0 <HAL_DMA_Init+0x2c0>)
24005832:	428a      	cmp	r2, r1
24005834:	bf08      	it	eq
24005836:	f043 0301 	orreq.w	r3, r3, #1
2400583a:	3128      	adds	r1, #40	; 0x28
2400583c:	4282      	cmp	r2, r0
2400583e:	bf08      	it	eq
24005840:	f043 0301 	orreq.w	r3, r3, #1
24005844:	3028      	adds	r0, #40	; 0x28
24005846:	428a      	cmp	r2, r1
24005848:	bf08      	it	eq
2400584a:	f043 0301 	orreq.w	r3, r3, #1
2400584e:	3128      	adds	r1, #40	; 0x28
24005850:	4282      	cmp	r2, r0
24005852:	bf08      	it	eq
24005854:	f043 0301 	orreq.w	r3, r3, #1
24005858:	3028      	adds	r0, #40	; 0x28
2400585a:	428a      	cmp	r2, r1
2400585c:	bf08      	it	eq
2400585e:	f043 0301 	orreq.w	r3, r3, #1
24005862:	3128      	adds	r1, #40	; 0x28
24005864:	4282      	cmp	r2, r0
24005866:	bf08      	it	eq
24005868:	f043 0301 	orreq.w	r3, r3, #1
2400586c:	428a      	cmp	r2, r1
2400586e:	bf08      	it	eq
24005870:	f043 0301 	orreq.w	r3, r3, #1
24005874:	b913      	cbnz	r3, 2400587c <HAL_DMA_Init+0x26c>
24005876:	4b17      	ldr	r3, [pc, #92]	; (240058d4 <HAL_DMA_Init+0x2c4>)
24005878:	429a      	cmp	r2, r3
2400587a:	d113      	bne.n	240058a4 <HAL_DMA_Init+0x294>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
2400587c:	4620      	mov	r0, r4
2400587e:	f7ff fe5f 	bl	24005540 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
24005882:	68a3      	ldr	r3, [r4, #8]
24005884:	2b80      	cmp	r3, #128	; 0x80
24005886:	d036      	beq.n	240058f6 <HAL_DMA_Init+0x2e6>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
24005888:	7922      	ldrb	r2, [r4, #4]
2400588a:	6e23      	ldr	r3, [r4, #96]	; 0x60
2400588c:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
2400588e:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	; 0x64
24005892:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
24005894:	6861      	ldr	r1, [r4, #4]
24005896:	1e4b      	subs	r3, r1, #1
24005898:	2b07      	cmp	r3, #7
2400589a:	d930      	bls.n	240058fe <HAL_DMA_Init+0x2ee>
      hdma->DMAmuxRequestGen = 0U;
2400589c:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
2400589e:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
240058a2:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
240058a4:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
240058a6:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
240058a8:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
240058aa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
240058ae:	bd38      	pop	{r3, r4, r5, pc}
240058b0:	40020010 	.word	0x40020010
240058b4:	40020040 	.word	0x40020040
240058b8:	400204b8 	.word	0x400204b8
240058bc:	fe10803f 	.word	0xfe10803f
240058c0:	5c001000 	.word	0x5c001000
240058c4:	ffff0000 	.word	0xffff0000
240058c8:	40020028 	.word	0x40020028
240058cc:	58025408 	.word	0x58025408
240058d0:	5802541c 	.word	0x5802541c
240058d4:	58025494 	.word	0x58025494
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
240058d8:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
240058da:	2303      	movs	r3, #3
        return HAL_ERROR;
240058dc:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
240058de:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
240058e0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
240058e4:	bd38      	pop	{r3, r4, r5, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
240058e6:	496b      	ldr	r1, [pc, #428]	; (24005a94 <HAL_DMA_Init+0x484>)
240058e8:	40c1      	lsrs	r1, r0
240058ea:	07c9      	lsls	r1, r1, #31
240058ec:	f57f af2a 	bpl.w	24005744 <HAL_DMA_Init+0x134>
240058f0:	e726      	b.n	24005740 <HAL_DMA_Init+0x130>
    return HAL_ERROR;
240058f2:	2001      	movs	r0, #1
}
240058f4:	bd38      	pop	{r3, r4, r5, pc}
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
240058f6:	2300      	movs	r3, #0
240058f8:	461a      	mov	r2, r3
240058fa:	6063      	str	r3, [r4, #4]
240058fc:	e7c5      	b.n	2400588a <HAL_DMA_Init+0x27a>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
240058fe:	6820      	ldr	r0, [r4, #0]
24005900:	4a65      	ldr	r2, [pc, #404]	; (24005a98 <HAL_DMA_Init+0x488>)
24005902:	4d66      	ldr	r5, [pc, #408]	; (24005a9c <HAL_DMA_Init+0x48c>)
24005904:	42a8      	cmp	r0, r5
24005906:	bf18      	it	ne
24005908:	4290      	cmpne	r0, r2
2400590a:	f105 0514 	add.w	r5, r5, #20
2400590e:	bf0c      	ite	eq
24005910:	2201      	moveq	r2, #1
24005912:	2200      	movne	r2, #0
24005914:	42a8      	cmp	r0, r5
24005916:	bf08      	it	eq
24005918:	f042 0201 	orreq.w	r2, r2, #1
2400591c:	3514      	adds	r5, #20
2400591e:	42a8      	cmp	r0, r5
24005920:	bf08      	it	eq
24005922:	f042 0201 	orreq.w	r2, r2, #1
24005926:	3514      	adds	r5, #20
24005928:	42a8      	cmp	r0, r5
2400592a:	bf08      	it	eq
2400592c:	f042 0201 	orreq.w	r2, r2, #1
24005930:	3514      	adds	r5, #20
24005932:	42a8      	cmp	r0, r5
24005934:	bf08      	it	eq
24005936:	f042 0201 	orreq.w	r2, r2, #1
2400593a:	3514      	adds	r5, #20
2400593c:	42a8      	cmp	r0, r5
2400593e:	bf08      	it	eq
24005940:	f042 0201 	orreq.w	r2, r2, #1
24005944:	b93a      	cbnz	r2, 24005956 <HAL_DMA_Init+0x346>
24005946:	4a56      	ldr	r2, [pc, #344]	; (24005aa0 <HAL_DMA_Init+0x490>)
24005948:	4290      	cmp	r0, r2
2400594a:	d004      	beq.n	24005956 <HAL_DMA_Init+0x346>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
2400594c:	4a55      	ldr	r2, [pc, #340]	; (24005aa4 <HAL_DMA_Init+0x494>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
2400594e:	4856      	ldr	r0, [pc, #344]	; (24005aa8 <HAL_DMA_Init+0x498>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
24005950:	440a      	add	r2, r1
24005952:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
24005954:	e003      	b.n	2400595e <HAL_DMA_Init+0x34e>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
24005956:	4a55      	ldr	r2, [pc, #340]	; (24005aac <HAL_DMA_Init+0x49c>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
24005958:	4855      	ldr	r0, [pc, #340]	; (24005ab0 <HAL_DMA_Init+0x4a0>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
2400595a:	440a      	add	r2, r1
2400595c:	0092      	lsls	r2, r2, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
2400595e:	2101      	movs	r1, #1
24005960:	fa01 f303 	lsl.w	r3, r1, r3
      hdma->DMAmuxRequestGen->RGCR = 0U;
24005964:	2100      	movs	r1, #0
24005966:	e9c4 201b 	strd	r2, r0, [r4, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
2400596a:	6763      	str	r3, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
2400596c:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
2400596e:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
24005972:	605a      	str	r2, [r3, #4]
24005974:	e796      	b.n	240058a4 <HAL_DMA_Init+0x294>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
24005976:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
2400597a:	d00e      	beq.n	2400599a <HAL_DMA_Init+0x38a>
    switch (hdma->Init.FIFOThreshold)
2400597c:	2a02      	cmp	r2, #2
2400597e:	d905      	bls.n	2400598c <HAL_DMA_Init+0x37c>
24005980:	2a03      	cmp	r2, #3
24005982:	f47f aef8 	bne.w	24005776 <HAL_DMA_Init+0x166>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
24005986:	01c2      	lsls	r2, r0, #7
24005988:	f57f aef5 	bpl.w	24005776 <HAL_DMA_Init+0x166>
          hdma->State = HAL_DMA_STATE_READY;
2400598c:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
2400598e:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
24005990:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24005992:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
24005994:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
24005998:	bd38      	pop	{r3, r4, r5, pc}
    switch (hdma->Init.FIFOThreshold)
2400599a:	2a03      	cmp	r2, #3
2400599c:	f63f aeeb 	bhi.w	24005776 <HAL_DMA_Init+0x166>
240059a0:	a501      	add	r5, pc, #4	; (adr r5, 240059a8 <HAL_DMA_Init+0x398>)
240059a2:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
240059a6:	bf00      	nop
240059a8:	2400598d 	.word	0x2400598d
240059ac:	24005987 	.word	0x24005987
240059b0:	2400598d 	.word	0x2400598d
240059b4:	240059b9 	.word	0x240059b9
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
240059b8:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
240059bc:	f47f aedb 	bne.w	24005776 <HAL_DMA_Init+0x166>
240059c0:	e7e4      	b.n	2400598c <HAL_DMA_Init+0x37c>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
240059c2:	4b35      	ldr	r3, [pc, #212]	; (24005a98 <HAL_DMA_Init+0x488>)
240059c4:	4835      	ldr	r0, [pc, #212]	; (24005a9c <HAL_DMA_Init+0x48c>)
240059c6:	493b      	ldr	r1, [pc, #236]	; (24005ab4 <HAL_DMA_Init+0x4a4>)
240059c8:	4282      	cmp	r2, r0
240059ca:	bf18      	it	ne
240059cc:	429a      	cmpne	r2, r3
240059ce:	f100 0028 	add.w	r0, r0, #40	; 0x28
240059d2:	bf0c      	ite	eq
240059d4:	2301      	moveq	r3, #1
240059d6:	2300      	movne	r3, #0
240059d8:	428a      	cmp	r2, r1
240059da:	bf08      	it	eq
240059dc:	f043 0301 	orreq.w	r3, r3, #1
240059e0:	3128      	adds	r1, #40	; 0x28
240059e2:	4282      	cmp	r2, r0
240059e4:	bf08      	it	eq
240059e6:	f043 0301 	orreq.w	r3, r3, #1
240059ea:	3028      	adds	r0, #40	; 0x28
240059ec:	428a      	cmp	r2, r1
240059ee:	bf08      	it	eq
240059f0:	f043 0301 	orreq.w	r3, r3, #1
240059f4:	3128      	adds	r1, #40	; 0x28
240059f6:	4282      	cmp	r2, r0
240059f8:	bf08      	it	eq
240059fa:	f043 0301 	orreq.w	r3, r3, #1
240059fe:	428a      	cmp	r2, r1
24005a00:	bf08      	it	eq
24005a02:	f043 0301 	orreq.w	r3, r3, #1
24005a06:	b913      	cbnz	r3, 24005a0e <HAL_DMA_Init+0x3fe>
24005a08:	4b25      	ldr	r3, [pc, #148]	; (24005aa0 <HAL_DMA_Init+0x490>)
24005a0a:	429a      	cmp	r2, r3
24005a0c:	d13a      	bne.n	24005a84 <HAL_DMA_Init+0x474>
    __HAL_UNLOCK(hdma);
24005a0e:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
24005a10:	2002      	movs	r0, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
24005a12:	4929      	ldr	r1, [pc, #164]	; (24005ab8 <HAL_DMA_Init+0x4a8>)
    hdma->State = HAL_DMA_STATE_BUSY;
24005a14:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
24005a18:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
24005a1c:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
24005a1e:	4019      	ands	r1, r3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
24005a20:	68a3      	ldr	r3, [r4, #8]
24005a22:	2b40      	cmp	r3, #64	; 0x40
24005a24:	d02c      	beq.n	24005a80 <HAL_DMA_Init+0x470>
24005a26:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
24005a2a:	fab3 f383 	clz	r3, r3
24005a2e:	095b      	lsrs	r3, r3, #5
24005a30:	0398      	lsls	r0, r3, #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
24005a32:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
24005a36:	08db      	lsrs	r3, r3, #3
24005a38:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
24005a3c:	6965      	ldr	r5, [r4, #20]
24005a3e:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
24005a42:	69a5      	ldr	r5, [r4, #24]
24005a44:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
24005a48:	69e5      	ldr	r5, [r4, #28]
24005a4a:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
24005a4e:	6a25      	ldr	r5, [r4, #32]
24005a50:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
24005a54:	430b      	orrs	r3, r1
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
24005a56:	4919      	ldr	r1, [pc, #100]	; (24005abc <HAL_DMA_Init+0x4ac>)
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
24005a58:	4318      	orrs	r0, r3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
24005a5a:	4b19      	ldr	r3, [pc, #100]	; (24005ac0 <HAL_DMA_Init+0x4b0>)
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
24005a5c:	6010      	str	r0, [r2, #0]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24005a5e:	4620      	mov	r0, r4
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
24005a60:	6822      	ldr	r2, [r4, #0]
24005a62:	4411      	add	r1, r2
24005a64:	fba3 2301 	umull	r2, r3, r3, r1
24005a68:	091b      	lsrs	r3, r3, #4
24005a6a:	009b      	lsls	r3, r3, #2
24005a6c:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24005a6e:	f7ff fced 	bl	2400544c <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24005a72:	6de2      	ldr	r2, [r4, #92]	; 0x5c
24005a74:	2301      	movs	r3, #1
24005a76:	f002 021f 	and.w	r2, r2, #31
24005a7a:	4093      	lsls	r3, r2
24005a7c:	6043      	str	r3, [r0, #4]
24005a7e:	e684      	b.n	2400578a <HAL_DMA_Init+0x17a>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
24005a80:	2010      	movs	r0, #16
24005a82:	e7d6      	b.n	24005a32 <HAL_DMA_Init+0x422>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24005a84:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
24005a86:	2303      	movs	r3, #3
    return HAL_ERROR;
24005a88:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24005a8a:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
24005a8c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
24005a90:	bd38      	pop	{r3, r4, r5, pc}
24005a92:	bf00      	nop
24005a94:	c3c0003f 	.word	0xc3c0003f
24005a98:	58025408 	.word	0x58025408
24005a9c:	5802541c 	.word	0x5802541c
24005aa0:	58025494 	.word	0x58025494
24005aa4:	1000823f 	.word	0x1000823f
24005aa8:	40020940 	.word	0x40020940
24005aac:	1600963f 	.word	0x1600963f
24005ab0:	58025940 	.word	0x58025940
24005ab4:	58025430 	.word	0x58025430
24005ab8:	fffe000f 	.word	0xfffe000f
24005abc:	a7fdabf8 	.word	0xa7fdabf8
24005ac0:	cccccccd 	.word	0xcccccccd

24005ac4 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
24005ac4:	2800      	cmp	r0, #0
24005ac6:	f000 8270 	beq.w	24005faa <HAL_DMA_Start_IT+0x4e6>
24005aca:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
24005acc:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
24005ad0:	2801      	cmp	r0, #1
24005ad2:	f000 826c 	beq.w	24005fae <HAL_DMA_Start_IT+0x4ea>
24005ad6:	2001      	movs	r0, #1
{
24005ad8:	b470      	push	{r4, r5, r6}
  if(HAL_DMA_STATE_READY == hdma->State)
24005ada:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
24005ade:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
24005ae2:	4284      	cmp	r4, r0
24005ae4:	d008      	beq.n	24005af8 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24005ae6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
24005aea:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24005aec:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
24005af0:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
24005af4:	bc70      	pop	{r4, r5, r6}
24005af6:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
24005af8:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
24005afa:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24005afe:	4ea2      	ldr	r6, [pc, #648]	; (24005d88 <HAL_DMA_Start_IT+0x2c4>)
    hdma->State = HAL_DMA_STATE_BUSY;
24005b00:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24005b04:	2000      	movs	r0, #0
24005b06:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
24005b0a:	6820      	ldr	r0, [r4, #0]
24005b0c:	f020 0001 	bic.w	r0, r0, #1
24005b10:	6020      	str	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24005b12:	489e      	ldr	r0, [pc, #632]	; (24005d8c <HAL_DMA_Start_IT+0x2c8>)
24005b14:	f8dc 4000 	ldr.w	r4, [ip]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
24005b18:	f8dc 5058 	ldr.w	r5, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24005b1c:	42b4      	cmp	r4, r6
24005b1e:	bf18      	it	ne
24005b20:	4284      	cmpne	r4, r0
24005b22:	f106 0618 	add.w	r6, r6, #24
24005b26:	bf0c      	ite	eq
24005b28:	2001      	moveq	r0, #1
24005b2a:	2000      	movne	r0, #0
24005b2c:	42b4      	cmp	r4, r6
24005b2e:	bf08      	it	eq
24005b30:	f040 0001 	orreq.w	r0, r0, #1
24005b34:	3618      	adds	r6, #24
24005b36:	42b4      	cmp	r4, r6
24005b38:	bf08      	it	eq
24005b3a:	f040 0001 	orreq.w	r0, r0, #1
24005b3e:	3618      	adds	r6, #24
24005b40:	42b4      	cmp	r4, r6
24005b42:	bf08      	it	eq
24005b44:	f040 0001 	orreq.w	r0, r0, #1
24005b48:	3618      	adds	r6, #24
24005b4a:	42b4      	cmp	r4, r6
24005b4c:	bf08      	it	eq
24005b4e:	f040 0001 	orreq.w	r0, r0, #1
24005b52:	3618      	adds	r6, #24
24005b54:	42b4      	cmp	r4, r6
24005b56:	bf08      	it	eq
24005b58:	f040 0001 	orreq.w	r0, r0, #1
24005b5c:	3618      	adds	r6, #24
24005b5e:	42b4      	cmp	r4, r6
24005b60:	bf08      	it	eq
24005b62:	f040 0001 	orreq.w	r0, r0, #1
24005b66:	f506 7656 	add.w	r6, r6, #856	; 0x358
24005b6a:	42b4      	cmp	r4, r6
24005b6c:	bf08      	it	eq
24005b6e:	f040 0001 	orreq.w	r0, r0, #1
24005b72:	3618      	adds	r6, #24
24005b74:	42b4      	cmp	r4, r6
24005b76:	bf08      	it	eq
24005b78:	f040 0001 	orreq.w	r0, r0, #1
24005b7c:	3618      	adds	r6, #24
24005b7e:	42b4      	cmp	r4, r6
24005b80:	bf08      	it	eq
24005b82:	f040 0001 	orreq.w	r0, r0, #1
24005b86:	3618      	adds	r6, #24
24005b88:	42b4      	cmp	r4, r6
24005b8a:	bf08      	it	eq
24005b8c:	f040 0001 	orreq.w	r0, r0, #1
24005b90:	3618      	adds	r6, #24
24005b92:	42b4      	cmp	r4, r6
24005b94:	bf08      	it	eq
24005b96:	f040 0001 	orreq.w	r0, r0, #1
24005b9a:	3618      	adds	r6, #24
24005b9c:	42b4      	cmp	r4, r6
24005b9e:	bf08      	it	eq
24005ba0:	f040 0001 	orreq.w	r0, r0, #1
24005ba4:	3618      	adds	r6, #24
24005ba6:	42b4      	cmp	r4, r6
24005ba8:	bf08      	it	eq
24005baa:	f040 0001 	orreq.w	r0, r0, #1
24005bae:	3618      	adds	r6, #24
24005bb0:	42b4      	cmp	r4, r6
24005bb2:	bf08      	it	eq
24005bb4:	f040 0001 	orreq.w	r0, r0, #1
24005bb8:	4e75      	ldr	r6, [pc, #468]	; (24005d90 <HAL_DMA_Start_IT+0x2cc>)
24005bba:	42b4      	cmp	r4, r6
24005bbc:	bf08      	it	eq
24005bbe:	f040 0001 	orreq.w	r0, r0, #1
24005bc2:	3614      	adds	r6, #20
24005bc4:	42b4      	cmp	r4, r6
24005bc6:	bf08      	it	eq
24005bc8:	f040 0001 	orreq.w	r0, r0, #1
24005bcc:	3614      	adds	r6, #20
24005bce:	42b4      	cmp	r4, r6
24005bd0:	bf08      	it	eq
24005bd2:	f040 0001 	orreq.w	r0, r0, #1
24005bd6:	3614      	adds	r6, #20
24005bd8:	42b4      	cmp	r4, r6
24005bda:	bf08      	it	eq
24005bdc:	f040 0001 	orreq.w	r0, r0, #1
24005be0:	3614      	adds	r6, #20
24005be2:	42b4      	cmp	r4, r6
24005be4:	bf08      	it	eq
24005be6:	f040 0001 	orreq.w	r0, r0, #1
24005bea:	3614      	adds	r6, #20
24005bec:	42b4      	cmp	r4, r6
24005bee:	bf08      	it	eq
24005bf0:	f040 0001 	orreq.w	r0, r0, #1
24005bf4:	3614      	adds	r6, #20
24005bf6:	42b4      	cmp	r4, r6
24005bf8:	bf08      	it	eq
24005bfa:	f040 0001 	orreq.w	r0, r0, #1
24005bfe:	b910      	cbnz	r0, 24005c06 <HAL_DMA_Start_IT+0x142>
24005c00:	4864      	ldr	r0, [pc, #400]	; (24005d94 <HAL_DMA_Start_IT+0x2d0>)
24005c02:	4284      	cmp	r4, r0
24005c04:	d10a      	bne.n	24005c1c <HAL_DMA_Start_IT+0x158>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24005c06:	e9dc 0419 	ldrd	r0, r4, [ip, #100]	; 0x64
24005c0a:	6044      	str	r4, [r0, #4]
    if(hdma->DMAmuxRequestGen != 0U)
24005c0c:	f8dc 006c 	ldr.w	r0, [ip, #108]	; 0x6c
24005c10:	b110      	cbz	r0, 24005c18 <HAL_DMA_Start_IT+0x154>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24005c12:	e9dc 041c 	ldrd	r0, r4, [ip, #112]	; 0x70
24005c16:	6044      	str	r4, [r0, #4]
24005c18:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24005c1c:	485b      	ldr	r0, [pc, #364]	; (24005d8c <HAL_DMA_Start_IT+0x2c8>)
24005c1e:	4e5a      	ldr	r6, [pc, #360]	; (24005d88 <HAL_DMA_Start_IT+0x2c4>)
24005c20:	42b4      	cmp	r4, r6
24005c22:	bf18      	it	ne
24005c24:	4284      	cmpne	r4, r0
24005c26:	f106 0618 	add.w	r6, r6, #24
24005c2a:	bf0c      	ite	eq
24005c2c:	2001      	moveq	r0, #1
24005c2e:	2000      	movne	r0, #0
24005c30:	42b4      	cmp	r4, r6
24005c32:	bf08      	it	eq
24005c34:	f040 0001 	orreq.w	r0, r0, #1
24005c38:	3618      	adds	r6, #24
24005c3a:	42b4      	cmp	r4, r6
24005c3c:	bf08      	it	eq
24005c3e:	f040 0001 	orreq.w	r0, r0, #1
24005c42:	3618      	adds	r6, #24
24005c44:	42b4      	cmp	r4, r6
24005c46:	bf08      	it	eq
24005c48:	f040 0001 	orreq.w	r0, r0, #1
24005c4c:	3618      	adds	r6, #24
24005c4e:	42b4      	cmp	r4, r6
24005c50:	bf08      	it	eq
24005c52:	f040 0001 	orreq.w	r0, r0, #1
24005c56:	3618      	adds	r6, #24
24005c58:	42b4      	cmp	r4, r6
24005c5a:	bf08      	it	eq
24005c5c:	f040 0001 	orreq.w	r0, r0, #1
24005c60:	3618      	adds	r6, #24
24005c62:	42b4      	cmp	r4, r6
24005c64:	bf08      	it	eq
24005c66:	f040 0001 	orreq.w	r0, r0, #1
24005c6a:	f506 7656 	add.w	r6, r6, #856	; 0x358
24005c6e:	42b4      	cmp	r4, r6
24005c70:	bf08      	it	eq
24005c72:	f040 0001 	orreq.w	r0, r0, #1
24005c76:	3618      	adds	r6, #24
24005c78:	42b4      	cmp	r4, r6
24005c7a:	bf08      	it	eq
24005c7c:	f040 0001 	orreq.w	r0, r0, #1
24005c80:	3618      	adds	r6, #24
24005c82:	42b4      	cmp	r4, r6
24005c84:	bf08      	it	eq
24005c86:	f040 0001 	orreq.w	r0, r0, #1
24005c8a:	3618      	adds	r6, #24
24005c8c:	42b4      	cmp	r4, r6
24005c8e:	bf08      	it	eq
24005c90:	f040 0001 	orreq.w	r0, r0, #1
24005c94:	3618      	adds	r6, #24
24005c96:	42b4      	cmp	r4, r6
24005c98:	bf08      	it	eq
24005c9a:	f040 0001 	orreq.w	r0, r0, #1
24005c9e:	3618      	adds	r6, #24
24005ca0:	42b4      	cmp	r4, r6
24005ca2:	bf08      	it	eq
24005ca4:	f040 0001 	orreq.w	r0, r0, #1
24005ca8:	3618      	adds	r6, #24
24005caa:	42b4      	cmp	r4, r6
24005cac:	bf08      	it	eq
24005cae:	f040 0001 	orreq.w	r0, r0, #1
24005cb2:	b918      	cbnz	r0, 24005cbc <HAL_DMA_Start_IT+0x1f8>
24005cb4:	4838      	ldr	r0, [pc, #224]	; (24005d98 <HAL_DMA_Start_IT+0x2d4>)
24005cb6:	4284      	cmp	r4, r0
24005cb8:	f040 817b 	bne.w	24005fb2 <HAL_DMA_Start_IT+0x4ee>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24005cbc:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
24005cc0:	f000 041f 	and.w	r4, r0, #31
24005cc4:	203f      	movs	r0, #63	; 0x3f
24005cc6:	40a0      	lsls	r0, r4
24005cc8:	60a8      	str	r0, [r5, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
24005cca:	f8dc 4000 	ldr.w	r4, [ip]
24005cce:	6820      	ldr	r0, [r4, #0]
24005cd0:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
24005cd4:	6020      	str	r0, [r4, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
24005cd6:	f8dc 0000 	ldr.w	r0, [ip]
24005cda:	6043      	str	r3, [r0, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
24005cdc:	f8dc 3008 	ldr.w	r3, [ip, #8]
24005ce0:	2b40      	cmp	r3, #64	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
24005ce2:	f8dc 3000 	ldr.w	r3, [ip]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
24005ce6:	f000 815b 	beq.w	24005fa0 <HAL_DMA_Start_IT+0x4dc>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
24005cea:	6099      	str	r1, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
24005cec:	f8dc 3000 	ldr.w	r3, [ip]
24005cf0:	60da      	str	r2, [r3, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24005cf2:	f8dc 4000 	ldr.w	r4, [ip]
24005cf6:	4b25      	ldr	r3, [pc, #148]	; (24005d8c <HAL_DMA_Start_IT+0x2c8>)
24005cf8:	4923      	ldr	r1, [pc, #140]	; (24005d88 <HAL_DMA_Start_IT+0x2c4>)
24005cfa:	4a28      	ldr	r2, [pc, #160]	; (24005d9c <HAL_DMA_Start_IT+0x2d8>)
24005cfc:	428c      	cmp	r4, r1
24005cfe:	bf18      	it	ne
24005d00:	429c      	cmpne	r4, r3
24005d02:	f101 0130 	add.w	r1, r1, #48	; 0x30
24005d06:	bf0c      	ite	eq
24005d08:	2301      	moveq	r3, #1
24005d0a:	2300      	movne	r3, #0
24005d0c:	4294      	cmp	r4, r2
24005d0e:	bf08      	it	eq
24005d10:	f043 0301 	orreq.w	r3, r3, #1
24005d14:	3230      	adds	r2, #48	; 0x30
24005d16:	428c      	cmp	r4, r1
24005d18:	bf08      	it	eq
24005d1a:	f043 0301 	orreq.w	r3, r3, #1
24005d1e:	3130      	adds	r1, #48	; 0x30
24005d20:	4294      	cmp	r4, r2
24005d22:	bf08      	it	eq
24005d24:	f043 0301 	orreq.w	r3, r3, #1
24005d28:	3230      	adds	r2, #48	; 0x30
24005d2a:	428c      	cmp	r4, r1
24005d2c:	bf08      	it	eq
24005d2e:	f043 0301 	orreq.w	r3, r3, #1
24005d32:	3130      	adds	r1, #48	; 0x30
24005d34:	4294      	cmp	r4, r2
24005d36:	bf08      	it	eq
24005d38:	f043 0301 	orreq.w	r3, r3, #1
24005d3c:	f502 725c 	add.w	r2, r2, #880	; 0x370
24005d40:	428c      	cmp	r4, r1
24005d42:	bf08      	it	eq
24005d44:	f043 0301 	orreq.w	r3, r3, #1
24005d48:	f501 715c 	add.w	r1, r1, #880	; 0x370
24005d4c:	4294      	cmp	r4, r2
24005d4e:	bf08      	it	eq
24005d50:	f043 0301 	orreq.w	r3, r3, #1
24005d54:	3230      	adds	r2, #48	; 0x30
24005d56:	428c      	cmp	r4, r1
24005d58:	bf08      	it	eq
24005d5a:	f043 0301 	orreq.w	r3, r3, #1
24005d5e:	3130      	adds	r1, #48	; 0x30
24005d60:	4294      	cmp	r4, r2
24005d62:	bf08      	it	eq
24005d64:	f043 0301 	orreq.w	r3, r3, #1
24005d68:	3230      	adds	r2, #48	; 0x30
24005d6a:	428c      	cmp	r4, r1
24005d6c:	bf08      	it	eq
24005d6e:	f043 0301 	orreq.w	r3, r3, #1
24005d72:	3130      	adds	r1, #48	; 0x30
24005d74:	4294      	cmp	r4, r2
24005d76:	bf08      	it	eq
24005d78:	f043 0301 	orreq.w	r3, r3, #1
24005d7c:	3230      	adds	r2, #48	; 0x30
24005d7e:	428c      	cmp	r4, r1
24005d80:	bf08      	it	eq
24005d82:	f043 0301 	orreq.w	r3, r3, #1
24005d86:	e00b      	b.n	24005da0 <HAL_DMA_Start_IT+0x2dc>
24005d88:	40020028 	.word	0x40020028
24005d8c:	40020010 	.word	0x40020010
24005d90:	58025408 	.word	0x58025408
24005d94:	58025494 	.word	0x58025494
24005d98:	400204b8 	.word	0x400204b8
24005d9c:	40020040 	.word	0x40020040
24005da0:	4294      	cmp	r4, r2
24005da2:	bf08      	it	eq
24005da4:	f043 0301 	orreq.w	r3, r3, #1
24005da8:	b91b      	cbnz	r3, 24005db2 <HAL_DMA_Start_IT+0x2ee>
24005daa:	4b9b      	ldr	r3, [pc, #620]	; (24006018 <HAL_DMA_Start_IT+0x554>)
24005dac:	429c      	cmp	r4, r3
24005dae:	f040 8143 	bne.w	24006038 <HAL_DMA_Start_IT+0x574>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
24005db2:	6823      	ldr	r3, [r4, #0]
24005db4:	f023 031e 	bic.w	r3, r3, #30
24005db8:	f043 0316 	orr.w	r3, r3, #22
24005dbc:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
24005dbe:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
24005dc2:	b12b      	cbz	r3, 24005dd0 <HAL_DMA_Start_IT+0x30c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
24005dc4:	f8dc 2000 	ldr.w	r2, [ip]
24005dc8:	6813      	ldr	r3, [r2, #0]
24005dca:	f043 0308 	orr.w	r3, r3, #8
24005dce:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24005dd0:	f8dc 4000 	ldr.w	r4, [ip]
24005dd4:	4b91      	ldr	r3, [pc, #580]	; (2400601c <HAL_DMA_Start_IT+0x558>)
24005dd6:	4992      	ldr	r1, [pc, #584]	; (24006020 <HAL_DMA_Start_IT+0x55c>)
24005dd8:	4a92      	ldr	r2, [pc, #584]	; (24006024 <HAL_DMA_Start_IT+0x560>)
24005dda:	428c      	cmp	r4, r1
24005ddc:	bf18      	it	ne
24005dde:	429c      	cmpne	r4, r3
24005de0:	f101 0130 	add.w	r1, r1, #48	; 0x30
24005de4:	bf0c      	ite	eq
24005de6:	2301      	moveq	r3, #1
24005de8:	2300      	movne	r3, #0
24005dea:	4294      	cmp	r4, r2
24005dec:	bf08      	it	eq
24005dee:	f043 0301 	orreq.w	r3, r3, #1
24005df2:	3230      	adds	r2, #48	; 0x30
24005df4:	428c      	cmp	r4, r1
24005df6:	bf08      	it	eq
24005df8:	f043 0301 	orreq.w	r3, r3, #1
24005dfc:	3130      	adds	r1, #48	; 0x30
24005dfe:	4294      	cmp	r4, r2
24005e00:	bf08      	it	eq
24005e02:	f043 0301 	orreq.w	r3, r3, #1
24005e06:	3230      	adds	r2, #48	; 0x30
24005e08:	428c      	cmp	r4, r1
24005e0a:	bf08      	it	eq
24005e0c:	f043 0301 	orreq.w	r3, r3, #1
24005e10:	3130      	adds	r1, #48	; 0x30
24005e12:	4294      	cmp	r4, r2
24005e14:	bf08      	it	eq
24005e16:	f043 0301 	orreq.w	r3, r3, #1
24005e1a:	f502 725c 	add.w	r2, r2, #880	; 0x370
24005e1e:	428c      	cmp	r4, r1
24005e20:	bf08      	it	eq
24005e22:	f043 0301 	orreq.w	r3, r3, #1
24005e26:	f501 715c 	add.w	r1, r1, #880	; 0x370
24005e2a:	4294      	cmp	r4, r2
24005e2c:	bf08      	it	eq
24005e2e:	f043 0301 	orreq.w	r3, r3, #1
24005e32:	3230      	adds	r2, #48	; 0x30
24005e34:	428c      	cmp	r4, r1
24005e36:	bf08      	it	eq
24005e38:	f043 0301 	orreq.w	r3, r3, #1
24005e3c:	3130      	adds	r1, #48	; 0x30
24005e3e:	4294      	cmp	r4, r2
24005e40:	bf08      	it	eq
24005e42:	f043 0301 	orreq.w	r3, r3, #1
24005e46:	3230      	adds	r2, #48	; 0x30
24005e48:	428c      	cmp	r4, r1
24005e4a:	bf08      	it	eq
24005e4c:	f043 0301 	orreq.w	r3, r3, #1
24005e50:	3130      	adds	r1, #48	; 0x30
24005e52:	4294      	cmp	r4, r2
24005e54:	bf08      	it	eq
24005e56:	f043 0301 	orreq.w	r3, r3, #1
24005e5a:	3230      	adds	r2, #48	; 0x30
24005e5c:	428c      	cmp	r4, r1
24005e5e:	bf08      	it	eq
24005e60:	f043 0301 	orreq.w	r3, r3, #1
24005e64:	3130      	adds	r1, #48	; 0x30
24005e66:	4294      	cmp	r4, r2
24005e68:	bf08      	it	eq
24005e6a:	f043 0301 	orreq.w	r3, r3, #1
24005e6e:	4a6e      	ldr	r2, [pc, #440]	; (24006028 <HAL_DMA_Start_IT+0x564>)
24005e70:	428c      	cmp	r4, r1
24005e72:	bf08      	it	eq
24005e74:	f043 0301 	orreq.w	r3, r3, #1
24005e78:	496c      	ldr	r1, [pc, #432]	; (2400602c <HAL_DMA_Start_IT+0x568>)
24005e7a:	4294      	cmp	r4, r2
24005e7c:	bf08      	it	eq
24005e7e:	f043 0301 	orreq.w	r3, r3, #1
24005e82:	3228      	adds	r2, #40	; 0x28
24005e84:	428c      	cmp	r4, r1
24005e86:	bf08      	it	eq
24005e88:	f043 0301 	orreq.w	r3, r3, #1
24005e8c:	3128      	adds	r1, #40	; 0x28
24005e8e:	4294      	cmp	r4, r2
24005e90:	bf08      	it	eq
24005e92:	f043 0301 	orreq.w	r3, r3, #1
24005e96:	3228      	adds	r2, #40	; 0x28
24005e98:	428c      	cmp	r4, r1
24005e9a:	bf08      	it	eq
24005e9c:	f043 0301 	orreq.w	r3, r3, #1
24005ea0:	3128      	adds	r1, #40	; 0x28
24005ea2:	4294      	cmp	r4, r2
24005ea4:	bf08      	it	eq
24005ea6:	f043 0301 	orreq.w	r3, r3, #1
24005eaa:	3228      	adds	r2, #40	; 0x28
24005eac:	428c      	cmp	r4, r1
24005eae:	bf08      	it	eq
24005eb0:	f043 0301 	orreq.w	r3, r3, #1
24005eb4:	4294      	cmp	r4, r2
24005eb6:	bf08      	it	eq
24005eb8:	f043 0301 	orreq.w	r3, r3, #1
24005ebc:	b913      	cbnz	r3, 24005ec4 <HAL_DMA_Start_IT+0x400>
24005ebe:	4b5c      	ldr	r3, [pc, #368]	; (24006030 <HAL_DMA_Start_IT+0x56c>)
24005ec0:	429c      	cmp	r4, r3
24005ec2:	d111      	bne.n	24005ee8 <HAL_DMA_Start_IT+0x424>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
24005ec4:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
24005ec8:	681a      	ldr	r2, [r3, #0]
24005eca:	03d2      	lsls	r2, r2, #15
24005ecc:	d503      	bpl.n	24005ed6 <HAL_DMA_Start_IT+0x412>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
24005ece:	681a      	ldr	r2, [r3, #0]
24005ed0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
24005ed4:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
24005ed6:	f8dc 306c 	ldr.w	r3, [ip, #108]	; 0x6c
24005eda:	b11b      	cbz	r3, 24005ee4 <HAL_DMA_Start_IT+0x420>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
24005edc:	681a      	ldr	r2, [r3, #0]
24005ede:	f442 7280 	orr.w	r2, r2, #256	; 0x100
24005ee2:	601a      	str	r2, [r3, #0]
24005ee4:	f8dc 4000 	ldr.w	r4, [ip]
    __HAL_DMA_ENABLE(hdma);
24005ee8:	4b4c      	ldr	r3, [pc, #304]	; (2400601c <HAL_DMA_Start_IT+0x558>)
24005eea:	494d      	ldr	r1, [pc, #308]	; (24006020 <HAL_DMA_Start_IT+0x55c>)
24005eec:	4a4d      	ldr	r2, [pc, #308]	; (24006024 <HAL_DMA_Start_IT+0x560>)
24005eee:	428c      	cmp	r4, r1
24005ef0:	bf18      	it	ne
24005ef2:	429c      	cmpne	r4, r3
24005ef4:	484f      	ldr	r0, [pc, #316]	; (24006034 <HAL_DMA_Start_IT+0x570>)
24005ef6:	f101 0160 	add.w	r1, r1, #96	; 0x60
24005efa:	bf0c      	ite	eq
24005efc:	2301      	moveq	r3, #1
24005efe:	2300      	movne	r3, #0
24005f00:	4294      	cmp	r4, r2
24005f02:	bf08      	it	eq
24005f04:	f043 0301 	orreq.w	r3, r3, #1
24005f08:	3230      	adds	r2, #48	; 0x30
24005f0a:	4284      	cmp	r4, r0
24005f0c:	bf08      	it	eq
24005f0e:	f043 0301 	orreq.w	r3, r3, #1
24005f12:	3060      	adds	r0, #96	; 0x60
24005f14:	4294      	cmp	r4, r2
24005f16:	bf08      	it	eq
24005f18:	f043 0301 	orreq.w	r3, r3, #1
24005f1c:	3230      	adds	r2, #48	; 0x30
24005f1e:	428c      	cmp	r4, r1
24005f20:	bf08      	it	eq
24005f22:	f043 0301 	orreq.w	r3, r3, #1
24005f26:	f501 7168 	add.w	r1, r1, #928	; 0x3a0
24005f2a:	4294      	cmp	r4, r2
24005f2c:	bf08      	it	eq
24005f2e:	f043 0301 	orreq.w	r3, r3, #1
24005f32:	f502 725c 	add.w	r2, r2, #880	; 0x370
24005f36:	4284      	cmp	r4, r0
24005f38:	bf08      	it	eq
24005f3a:	f043 0301 	orreq.w	r3, r3, #1
24005f3e:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
24005f42:	4294      	cmp	r4, r2
24005f44:	bf08      	it	eq
24005f46:	f043 0301 	orreq.w	r3, r3, #1
24005f4a:	3230      	adds	r2, #48	; 0x30
24005f4c:	428c      	cmp	r4, r1
24005f4e:	bf08      	it	eq
24005f50:	f043 0301 	orreq.w	r3, r3, #1
24005f54:	3160      	adds	r1, #96	; 0x60
24005f56:	4294      	cmp	r4, r2
24005f58:	bf08      	it	eq
24005f5a:	f043 0301 	orreq.w	r3, r3, #1
24005f5e:	3230      	adds	r2, #48	; 0x30
24005f60:	4284      	cmp	r4, r0
24005f62:	bf08      	it	eq
24005f64:	f043 0301 	orreq.w	r3, r3, #1
24005f68:	4294      	cmp	r4, r2
24005f6a:	bf08      	it	eq
24005f6c:	f043 0301 	orreq.w	r3, r3, #1
24005f70:	3230      	adds	r2, #48	; 0x30
24005f72:	428c      	cmp	r4, r1
24005f74:	bf08      	it	eq
24005f76:	f043 0301 	orreq.w	r3, r3, #1
24005f7a:	4294      	cmp	r4, r2
24005f7c:	bf08      	it	eq
24005f7e:	f043 0301 	orreq.w	r3, r3, #1
24005f82:	b933      	cbnz	r3, 24005f92 <HAL_DMA_Start_IT+0x4ce>
24005f84:	3060      	adds	r0, #96	; 0x60
24005f86:	1a20      	subs	r0, r4, r0
24005f88:	fab0 f080 	clz	r0, r0
24005f8c:	0940      	lsrs	r0, r0, #5
24005f8e:	2800      	cmp	r0, #0
24005f90:	d03d      	beq.n	2400600e <HAL_DMA_Start_IT+0x54a>
24005f92:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
24005f94:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
24005f96:	f043 0301 	orr.w	r3, r3, #1
24005f9a:	6023      	str	r3, [r4, #0]
}
24005f9c:	bc70      	pop	{r4, r5, r6}
24005f9e:	4770      	bx	lr
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
24005fa0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
24005fa2:	f8dc 3000 	ldr.w	r3, [ip]
24005fa6:	60d9      	str	r1, [r3, #12]
24005fa8:	e6a3      	b.n	24005cf2 <HAL_DMA_Start_IT+0x22e>
    return HAL_ERROR;
24005faa:	2001      	movs	r0, #1
24005fac:	4770      	bx	lr
  __HAL_LOCK(hdma);
24005fae:	2002      	movs	r0, #2
}
24005fb0:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
24005fb2:	481d      	ldr	r0, [pc, #116]	; (24006028 <HAL_DMA_Start_IT+0x564>)
24005fb4:	4e1d      	ldr	r6, [pc, #116]	; (2400602c <HAL_DMA_Start_IT+0x568>)
24005fb6:	42b4      	cmp	r4, r6
24005fb8:	bf18      	it	ne
24005fba:	4284      	cmpne	r4, r0
24005fbc:	f106 0614 	add.w	r6, r6, #20
24005fc0:	bf0c      	ite	eq
24005fc2:	2001      	moveq	r0, #1
24005fc4:	2000      	movne	r0, #0
24005fc6:	42b4      	cmp	r4, r6
24005fc8:	bf08      	it	eq
24005fca:	f040 0001 	orreq.w	r0, r0, #1
24005fce:	3614      	adds	r6, #20
24005fd0:	42b4      	cmp	r4, r6
24005fd2:	bf08      	it	eq
24005fd4:	f040 0001 	orreq.w	r0, r0, #1
24005fd8:	3614      	adds	r6, #20
24005fda:	42b4      	cmp	r4, r6
24005fdc:	bf08      	it	eq
24005fde:	f040 0001 	orreq.w	r0, r0, #1
24005fe2:	3614      	adds	r6, #20
24005fe4:	42b4      	cmp	r4, r6
24005fe6:	bf08      	it	eq
24005fe8:	f040 0001 	orreq.w	r0, r0, #1
24005fec:	3614      	adds	r6, #20
24005fee:	42b4      	cmp	r4, r6
24005ff0:	bf08      	it	eq
24005ff2:	f040 0001 	orreq.w	r0, r0, #1
24005ff6:	b910      	cbnz	r0, 24005ffe <HAL_DMA_Start_IT+0x53a>
24005ff8:	480d      	ldr	r0, [pc, #52]	; (24006030 <HAL_DMA_Start_IT+0x56c>)
24005ffa:	4284      	cmp	r4, r0
24005ffc:	d11c      	bne.n	24006038 <HAL_DMA_Start_IT+0x574>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24005ffe:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
24006002:	f000 041f 	and.w	r4, r0, #31
24006006:	2001      	movs	r0, #1
24006008:	40a0      	lsls	r0, r4
2400600a:	6068      	str	r0, [r5, #4]
2400600c:	e663      	b.n	24005cd6 <HAL_DMA_Start_IT+0x212>
    __HAL_DMA_ENABLE(hdma);
2400600e:	6823      	ldr	r3, [r4, #0]
24006010:	f043 0301 	orr.w	r3, r3, #1
24006014:	6023      	str	r3, [r4, #0]
24006016:	e56d      	b.n	24005af4 <HAL_DMA_Start_IT+0x30>
24006018:	400204b8 	.word	0x400204b8
2400601c:	40020010 	.word	0x40020010
24006020:	40020028 	.word	0x40020028
24006024:	40020040 	.word	0x40020040
24006028:	58025408 	.word	0x58025408
2400602c:	5802541c 	.word	0x5802541c
24006030:	58025494 	.word	0x58025494
24006034:	40020058 	.word	0x40020058
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
24006038:	6823      	ldr	r3, [r4, #0]
2400603a:	f023 030e 	bic.w	r3, r3, #14
2400603e:	f043 030a 	orr.w	r3, r3, #10
24006042:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
24006044:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
24006048:	2b00      	cmp	r3, #0
2400604a:	f43f aec1 	beq.w	24005dd0 <HAL_DMA_Start_IT+0x30c>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
2400604e:	f8dc 2000 	ldr.w	r2, [ip]
24006052:	6813      	ldr	r3, [r2, #0]
24006054:	f043 0304 	orr.w	r3, r3, #4
24006058:	6013      	str	r3, [r2, #0]
2400605a:	e6b9      	b.n	24005dd0 <HAL_DMA_Start_IT+0x30c>

2400605c <HAL_DMA_Abort>:
{
2400605c:	b570      	push	{r4, r5, r6, lr}
2400605e:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
24006060:	f7ff f914 	bl	2400528c <HAL_GetTick>
  if(hdma == NULL)
24006064:	2e00      	cmp	r6, #0
24006066:	f000 81ef 	beq.w	24006448 <HAL_DMA_Abort+0x3ec>
  if(hdma->State != HAL_DMA_STATE_BUSY)
2400606a:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
2400606e:	2b02      	cmp	r3, #2
24006070:	f040 81d9 	bne.w	24006426 <HAL_DMA_Abort+0x3ca>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24006074:	6832      	ldr	r2, [r6, #0]
24006076:	4604      	mov	r4, r0
24006078:	4b6e      	ldr	r3, [pc, #440]	; (24006234 <HAL_DMA_Abort+0x1d8>)
2400607a:	496f      	ldr	r1, [pc, #444]	; (24006238 <HAL_DMA_Abort+0x1dc>)
2400607c:	428a      	cmp	r2, r1
2400607e:	bf18      	it	ne
24006080:	429a      	cmpne	r2, r3
24006082:	f101 0118 	add.w	r1, r1, #24
24006086:	bf0c      	ite	eq
24006088:	2301      	moveq	r3, #1
2400608a:	2300      	movne	r3, #0
2400608c:	428a      	cmp	r2, r1
2400608e:	bf08      	it	eq
24006090:	f043 0301 	orreq.w	r3, r3, #1
24006094:	3118      	adds	r1, #24
24006096:	428a      	cmp	r2, r1
24006098:	bf08      	it	eq
2400609a:	f043 0301 	orreq.w	r3, r3, #1
2400609e:	3118      	adds	r1, #24
240060a0:	428a      	cmp	r2, r1
240060a2:	bf08      	it	eq
240060a4:	f043 0301 	orreq.w	r3, r3, #1
240060a8:	3118      	adds	r1, #24
240060aa:	428a      	cmp	r2, r1
240060ac:	bf08      	it	eq
240060ae:	f043 0301 	orreq.w	r3, r3, #1
240060b2:	3118      	adds	r1, #24
240060b4:	428a      	cmp	r2, r1
240060b6:	bf08      	it	eq
240060b8:	f043 0301 	orreq.w	r3, r3, #1
240060bc:	3118      	adds	r1, #24
240060be:	428a      	cmp	r2, r1
240060c0:	bf08      	it	eq
240060c2:	f043 0301 	orreq.w	r3, r3, #1
240060c6:	f501 7156 	add.w	r1, r1, #856	; 0x358
240060ca:	428a      	cmp	r2, r1
240060cc:	bf08      	it	eq
240060ce:	f043 0301 	orreq.w	r3, r3, #1
240060d2:	3118      	adds	r1, #24
240060d4:	428a      	cmp	r2, r1
240060d6:	bf08      	it	eq
240060d8:	f043 0301 	orreq.w	r3, r3, #1
240060dc:	3118      	adds	r1, #24
240060de:	428a      	cmp	r2, r1
240060e0:	bf08      	it	eq
240060e2:	f043 0301 	orreq.w	r3, r3, #1
240060e6:	3118      	adds	r1, #24
240060e8:	428a      	cmp	r2, r1
240060ea:	bf08      	it	eq
240060ec:	f043 0301 	orreq.w	r3, r3, #1
240060f0:	3118      	adds	r1, #24
240060f2:	428a      	cmp	r2, r1
240060f4:	bf08      	it	eq
240060f6:	f043 0301 	orreq.w	r3, r3, #1
240060fa:	3118      	adds	r1, #24
240060fc:	428a      	cmp	r2, r1
240060fe:	bf08      	it	eq
24006100:	f043 0301 	orreq.w	r3, r3, #1
24006104:	3118      	adds	r1, #24
24006106:	428a      	cmp	r2, r1
24006108:	bf08      	it	eq
2400610a:	f043 0301 	orreq.w	r3, r3, #1
2400610e:	b91b      	cbnz	r3, 24006118 <HAL_DMA_Abort+0xbc>
24006110:	4b4a      	ldr	r3, [pc, #296]	; (2400623c <HAL_DMA_Abort+0x1e0>)
24006112:	429a      	cmp	r2, r3
24006114:	f040 81a2 	bne.w	2400645c <HAL_DMA_Abort+0x400>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
24006118:	6813      	ldr	r3, [r2, #0]
2400611a:	f023 031e 	bic.w	r3, r3, #30
2400611e:	6013      	str	r3, [r2, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
24006120:	6832      	ldr	r2, [r6, #0]
24006122:	6953      	ldr	r3, [r2, #20]
24006124:	f023 0380 	bic.w	r3, r3, #128	; 0x80
24006128:	6153      	str	r3, [r2, #20]
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
2400612a:	6832      	ldr	r2, [r6, #0]
2400612c:	4615      	mov	r5, r2
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2400612e:	4b41      	ldr	r3, [pc, #260]	; (24006234 <HAL_DMA_Abort+0x1d8>)
24006130:	4941      	ldr	r1, [pc, #260]	; (24006238 <HAL_DMA_Abort+0x1dc>)
24006132:	428a      	cmp	r2, r1
24006134:	bf18      	it	ne
24006136:	429a      	cmpne	r2, r3
24006138:	f101 0118 	add.w	r1, r1, #24
2400613c:	bf0c      	ite	eq
2400613e:	2301      	moveq	r3, #1
24006140:	2300      	movne	r3, #0
24006142:	428a      	cmp	r2, r1
24006144:	bf08      	it	eq
24006146:	f043 0301 	orreq.w	r3, r3, #1
2400614a:	3118      	adds	r1, #24
2400614c:	428a      	cmp	r2, r1
2400614e:	bf08      	it	eq
24006150:	f043 0301 	orreq.w	r3, r3, #1
24006154:	3118      	adds	r1, #24
24006156:	428a      	cmp	r2, r1
24006158:	bf08      	it	eq
2400615a:	f043 0301 	orreq.w	r3, r3, #1
2400615e:	3118      	adds	r1, #24
24006160:	428a      	cmp	r2, r1
24006162:	bf08      	it	eq
24006164:	f043 0301 	orreq.w	r3, r3, #1
24006168:	3118      	adds	r1, #24
2400616a:	428a      	cmp	r2, r1
2400616c:	bf08      	it	eq
2400616e:	f043 0301 	orreq.w	r3, r3, #1
24006172:	3118      	adds	r1, #24
24006174:	428a      	cmp	r2, r1
24006176:	bf08      	it	eq
24006178:	f043 0301 	orreq.w	r3, r3, #1
2400617c:	f501 7156 	add.w	r1, r1, #856	; 0x358
24006180:	428a      	cmp	r2, r1
24006182:	bf08      	it	eq
24006184:	f043 0301 	orreq.w	r3, r3, #1
24006188:	3118      	adds	r1, #24
2400618a:	428a      	cmp	r2, r1
2400618c:	bf08      	it	eq
2400618e:	f043 0301 	orreq.w	r3, r3, #1
24006192:	3118      	adds	r1, #24
24006194:	428a      	cmp	r2, r1
24006196:	bf08      	it	eq
24006198:	f043 0301 	orreq.w	r3, r3, #1
2400619c:	3118      	adds	r1, #24
2400619e:	428a      	cmp	r2, r1
240061a0:	bf08      	it	eq
240061a2:	f043 0301 	orreq.w	r3, r3, #1
240061a6:	3118      	adds	r1, #24
240061a8:	428a      	cmp	r2, r1
240061aa:	bf08      	it	eq
240061ac:	f043 0301 	orreq.w	r3, r3, #1
240061b0:	3118      	adds	r1, #24
240061b2:	428a      	cmp	r2, r1
240061b4:	bf08      	it	eq
240061b6:	f043 0301 	orreq.w	r3, r3, #1
240061ba:	3118      	adds	r1, #24
240061bc:	428a      	cmp	r2, r1
240061be:	bf08      	it	eq
240061c0:	f043 0301 	orreq.w	r3, r3, #1
240061c4:	3118      	adds	r1, #24
240061c6:	428a      	cmp	r2, r1
240061c8:	bf08      	it	eq
240061ca:	f043 0301 	orreq.w	r3, r3, #1
240061ce:	491c      	ldr	r1, [pc, #112]	; (24006240 <HAL_DMA_Abort+0x1e4>)
240061d0:	428a      	cmp	r2, r1
240061d2:	bf08      	it	eq
240061d4:	f043 0301 	orreq.w	r3, r3, #1
240061d8:	3114      	adds	r1, #20
240061da:	428a      	cmp	r2, r1
240061dc:	bf08      	it	eq
240061de:	f043 0301 	orreq.w	r3, r3, #1
240061e2:	3114      	adds	r1, #20
240061e4:	428a      	cmp	r2, r1
240061e6:	bf08      	it	eq
240061e8:	f043 0301 	orreq.w	r3, r3, #1
240061ec:	3114      	adds	r1, #20
240061ee:	428a      	cmp	r2, r1
240061f0:	bf08      	it	eq
240061f2:	f043 0301 	orreq.w	r3, r3, #1
240061f6:	3114      	adds	r1, #20
240061f8:	428a      	cmp	r2, r1
240061fa:	bf08      	it	eq
240061fc:	f043 0301 	orreq.w	r3, r3, #1
24006200:	3114      	adds	r1, #20
24006202:	428a      	cmp	r2, r1
24006204:	bf08      	it	eq
24006206:	f043 0301 	orreq.w	r3, r3, #1
2400620a:	3114      	adds	r1, #20
2400620c:	428a      	cmp	r2, r1
2400620e:	bf08      	it	eq
24006210:	f043 0301 	orreq.w	r3, r3, #1
24006214:	b913      	cbnz	r3, 2400621c <HAL_DMA_Abort+0x1c0>
24006216:	4b0b      	ldr	r3, [pc, #44]	; (24006244 <HAL_DMA_Abort+0x1e8>)
24006218:	429a      	cmp	r2, r3
2400621a:	d105      	bne.n	24006228 <HAL_DMA_Abort+0x1cc>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
2400621c:	6e32      	ldr	r2, [r6, #96]	; 0x60
2400621e:	6813      	ldr	r3, [r2, #0]
24006220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
24006224:	6013      	str	r3, [r2, #0]
24006226:	6832      	ldr	r2, [r6, #0]
    __HAL_DMA_DISABLE(hdma);
24006228:	6813      	ldr	r3, [r2, #0]
2400622a:	f023 0301 	bic.w	r3, r3, #1
2400622e:	6013      	str	r3, [r2, #0]
24006230:	e010      	b.n	24006254 <HAL_DMA_Abort+0x1f8>
24006232:	bf00      	nop
24006234:	40020010 	.word	0x40020010
24006238:	40020028 	.word	0x40020028
2400623c:	400204b8 	.word	0x400204b8
24006240:	58025408 	.word	0x58025408
24006244:	58025494 	.word	0x58025494
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
24006248:	f7ff f820 	bl	2400528c <HAL_GetTick>
2400624c:	1b00      	subs	r0, r0, r4
2400624e:	2805      	cmp	r0, #5
24006250:	f200 80f0 	bhi.w	24006434 <HAL_DMA_Abort+0x3d8>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
24006254:	682b      	ldr	r3, [r5, #0]
24006256:	07db      	lsls	r3, r3, #31
24006258:	d4f6      	bmi.n	24006248 <HAL_DMA_Abort+0x1ec>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
2400625a:	6832      	ldr	r2, [r6, #0]
2400625c:	4b83      	ldr	r3, [pc, #524]	; (2400646c <HAL_DMA_Abort+0x410>)
2400625e:	4884      	ldr	r0, [pc, #528]	; (24006470 <HAL_DMA_Abort+0x414>)
24006260:	4984      	ldr	r1, [pc, #528]	; (24006474 <HAL_DMA_Abort+0x418>)
24006262:	4282      	cmp	r2, r0
24006264:	bf18      	it	ne
24006266:	429a      	cmpne	r2, r3
24006268:	f100 0030 	add.w	r0, r0, #48	; 0x30
2400626c:	bf0c      	ite	eq
2400626e:	2301      	moveq	r3, #1
24006270:	2300      	movne	r3, #0
24006272:	428a      	cmp	r2, r1
24006274:	bf08      	it	eq
24006276:	f043 0301 	orreq.w	r3, r3, #1
2400627a:	3130      	adds	r1, #48	; 0x30
2400627c:	4282      	cmp	r2, r0
2400627e:	bf08      	it	eq
24006280:	f043 0301 	orreq.w	r3, r3, #1
24006284:	3030      	adds	r0, #48	; 0x30
24006286:	428a      	cmp	r2, r1
24006288:	bf08      	it	eq
2400628a:	f043 0301 	orreq.w	r3, r3, #1
2400628e:	3130      	adds	r1, #48	; 0x30
24006290:	4282      	cmp	r2, r0
24006292:	bf08      	it	eq
24006294:	f043 0301 	orreq.w	r3, r3, #1
24006298:	3030      	adds	r0, #48	; 0x30
2400629a:	428a      	cmp	r2, r1
2400629c:	bf08      	it	eq
2400629e:	f043 0301 	orreq.w	r3, r3, #1
240062a2:	f501 715c 	add.w	r1, r1, #880	; 0x370
240062a6:	4282      	cmp	r2, r0
240062a8:	bf08      	it	eq
240062aa:	f043 0301 	orreq.w	r3, r3, #1
240062ae:	f500 705c 	add.w	r0, r0, #880	; 0x370
240062b2:	428a      	cmp	r2, r1
240062b4:	bf08      	it	eq
240062b6:	f043 0301 	orreq.w	r3, r3, #1
240062ba:	3130      	adds	r1, #48	; 0x30
240062bc:	4282      	cmp	r2, r0
240062be:	bf08      	it	eq
240062c0:	f043 0301 	orreq.w	r3, r3, #1
240062c4:	3030      	adds	r0, #48	; 0x30
240062c6:	428a      	cmp	r2, r1
240062c8:	bf08      	it	eq
240062ca:	f043 0301 	orreq.w	r3, r3, #1
240062ce:	3130      	adds	r1, #48	; 0x30
240062d0:	4282      	cmp	r2, r0
240062d2:	bf08      	it	eq
240062d4:	f043 0301 	orreq.w	r3, r3, #1
240062d8:	3030      	adds	r0, #48	; 0x30
240062da:	428a      	cmp	r2, r1
240062dc:	bf08      	it	eq
240062de:	f043 0301 	orreq.w	r3, r3, #1
240062e2:	3130      	adds	r1, #48	; 0x30
240062e4:	4282      	cmp	r2, r0
240062e6:	bf08      	it	eq
240062e8:	f043 0301 	orreq.w	r3, r3, #1
240062ec:	428a      	cmp	r2, r1
240062ee:	bf08      	it	eq
240062f0:	f043 0301 	orreq.w	r3, r3, #1
240062f4:	b91b      	cbnz	r3, 240062fe <HAL_DMA_Abort+0x2a2>
240062f6:	4b60      	ldr	r3, [pc, #384]	; (24006478 <HAL_DMA_Abort+0x41c>)
240062f8:	429a      	cmp	r2, r3
240062fa:	f040 80a7 	bne.w	2400644c <HAL_DMA_Abort+0x3f0>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
240062fe:	6df2      	ldr	r2, [r6, #92]	; 0x5c
24006300:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
24006302:	6db1      	ldr	r1, [r6, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24006304:	f002 021f 	and.w	r2, r2, #31
24006308:	4093      	lsls	r3, r2
2400630a:	608b      	str	r3, [r1, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2400630c:	6832      	ldr	r2, [r6, #0]
2400630e:	4b57      	ldr	r3, [pc, #348]	; (2400646c <HAL_DMA_Abort+0x410>)
24006310:	4857      	ldr	r0, [pc, #348]	; (24006470 <HAL_DMA_Abort+0x414>)
24006312:	4958      	ldr	r1, [pc, #352]	; (24006474 <HAL_DMA_Abort+0x418>)
24006314:	4282      	cmp	r2, r0
24006316:	bf18      	it	ne
24006318:	429a      	cmpne	r2, r3
2400631a:	f100 0030 	add.w	r0, r0, #48	; 0x30
2400631e:	bf0c      	ite	eq
24006320:	2301      	moveq	r3, #1
24006322:	2300      	movne	r3, #0
24006324:	428a      	cmp	r2, r1
24006326:	bf08      	it	eq
24006328:	f043 0301 	orreq.w	r3, r3, #1
2400632c:	3130      	adds	r1, #48	; 0x30
2400632e:	4282      	cmp	r2, r0
24006330:	bf08      	it	eq
24006332:	f043 0301 	orreq.w	r3, r3, #1
24006336:	3030      	adds	r0, #48	; 0x30
24006338:	428a      	cmp	r2, r1
2400633a:	bf08      	it	eq
2400633c:	f043 0301 	orreq.w	r3, r3, #1
24006340:	3130      	adds	r1, #48	; 0x30
24006342:	4282      	cmp	r2, r0
24006344:	bf08      	it	eq
24006346:	f043 0301 	orreq.w	r3, r3, #1
2400634a:	3030      	adds	r0, #48	; 0x30
2400634c:	428a      	cmp	r2, r1
2400634e:	bf08      	it	eq
24006350:	f043 0301 	orreq.w	r3, r3, #1
24006354:	f501 715c 	add.w	r1, r1, #880	; 0x370
24006358:	4282      	cmp	r2, r0
2400635a:	bf08      	it	eq
2400635c:	f043 0301 	orreq.w	r3, r3, #1
24006360:	f500 705c 	add.w	r0, r0, #880	; 0x370
24006364:	428a      	cmp	r2, r1
24006366:	bf08      	it	eq
24006368:	f043 0301 	orreq.w	r3, r3, #1
2400636c:	3130      	adds	r1, #48	; 0x30
2400636e:	4282      	cmp	r2, r0
24006370:	bf08      	it	eq
24006372:	f043 0301 	orreq.w	r3, r3, #1
24006376:	3030      	adds	r0, #48	; 0x30
24006378:	428a      	cmp	r2, r1
2400637a:	bf08      	it	eq
2400637c:	f043 0301 	orreq.w	r3, r3, #1
24006380:	3130      	adds	r1, #48	; 0x30
24006382:	4282      	cmp	r2, r0
24006384:	bf08      	it	eq
24006386:	f043 0301 	orreq.w	r3, r3, #1
2400638a:	3030      	adds	r0, #48	; 0x30
2400638c:	428a      	cmp	r2, r1
2400638e:	bf08      	it	eq
24006390:	f043 0301 	orreq.w	r3, r3, #1
24006394:	3130      	adds	r1, #48	; 0x30
24006396:	4282      	cmp	r2, r0
24006398:	bf08      	it	eq
2400639a:	f043 0301 	orreq.w	r3, r3, #1
2400639e:	3030      	adds	r0, #48	; 0x30
240063a0:	428a      	cmp	r2, r1
240063a2:	bf08      	it	eq
240063a4:	f043 0301 	orreq.w	r3, r3, #1
240063a8:	4934      	ldr	r1, [pc, #208]	; (2400647c <HAL_DMA_Abort+0x420>)
240063aa:	4282      	cmp	r2, r0
240063ac:	bf08      	it	eq
240063ae:	f043 0301 	orreq.w	r3, r3, #1
240063b2:	4833      	ldr	r0, [pc, #204]	; (24006480 <HAL_DMA_Abort+0x424>)
240063b4:	428a      	cmp	r2, r1
240063b6:	bf08      	it	eq
240063b8:	f043 0301 	orreq.w	r3, r3, #1
240063bc:	3128      	adds	r1, #40	; 0x28
240063be:	4282      	cmp	r2, r0
240063c0:	bf08      	it	eq
240063c2:	f043 0301 	orreq.w	r3, r3, #1
240063c6:	3028      	adds	r0, #40	; 0x28
240063c8:	428a      	cmp	r2, r1
240063ca:	bf08      	it	eq
240063cc:	f043 0301 	orreq.w	r3, r3, #1
240063d0:	3128      	adds	r1, #40	; 0x28
240063d2:	4282      	cmp	r2, r0
240063d4:	bf08      	it	eq
240063d6:	f043 0301 	orreq.w	r3, r3, #1
240063da:	3028      	adds	r0, #40	; 0x28
240063dc:	428a      	cmp	r2, r1
240063de:	bf08      	it	eq
240063e0:	f043 0301 	orreq.w	r3, r3, #1
240063e4:	3128      	adds	r1, #40	; 0x28
240063e6:	4282      	cmp	r2, r0
240063e8:	bf08      	it	eq
240063ea:	f043 0301 	orreq.w	r3, r3, #1
240063ee:	428a      	cmp	r2, r1
240063f0:	bf08      	it	eq
240063f2:	f043 0301 	orreq.w	r3, r3, #1
240063f6:	b913      	cbnz	r3, 240063fe <HAL_DMA_Abort+0x3a2>
240063f8:	4b22      	ldr	r3, [pc, #136]	; (24006484 <HAL_DMA_Abort+0x428>)
240063fa:	429a      	cmp	r2, r3
240063fc:	d10b      	bne.n	24006416 <HAL_DMA_Abort+0x3ba>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240063fe:	e9d6 3219 	ldrd	r3, r2, [r6, #100]	; 0x64
24006402:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
24006404:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
24006406:	b133      	cbz	r3, 24006416 <HAL_DMA_Abort+0x3ba>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
24006408:	681a      	ldr	r2, [r3, #0]
2400640a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
2400640e:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24006410:	e9d6 321c 	ldrd	r3, r2, [r6, #112]	; 0x70
24006414:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
24006416:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
24006418:	2201      	movs	r2, #1
  return HAL_OK;
2400641a:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
2400641c:	f886 2035 	strb.w	r2, [r6, #53]	; 0x35
    __HAL_UNLOCK(hdma);
24006420:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
}
24006424:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
24006426:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
24006428:	2300      	movs	r3, #0
    return HAL_ERROR;
2400642a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
2400642c:	6572      	str	r2, [r6, #84]	; 0x54
    __HAL_UNLOCK(hdma);
2400642e:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
}
24006432:	bd70      	pop	{r4, r5, r6, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24006434:	2120      	movs	r1, #32
        hdma->State = HAL_DMA_STATE_ERROR;
24006436:	2203      	movs	r2, #3
        __HAL_UNLOCK(hdma);
24006438:	2300      	movs	r3, #0
        return HAL_ERROR;
2400643a:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
2400643c:	6571      	str	r1, [r6, #84]	; 0x54
        __HAL_UNLOCK(hdma);
2400643e:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
24006442:	f886 2035 	strb.w	r2, [r6, #53]	; 0x35
}
24006446:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
24006448:	2001      	movs	r0, #1
}
2400644a:	bd70      	pop	{r4, r5, r6, pc}
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
2400644c:	6df2      	ldr	r2, [r6, #92]	; 0x5c
2400644e:	2301      	movs	r3, #1
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
24006450:	6db1      	ldr	r1, [r6, #88]	; 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24006452:	f002 021f 	and.w	r2, r2, #31
24006456:	4093      	lsls	r3, r2
24006458:	604b      	str	r3, [r1, #4]
2400645a:	e757      	b.n	2400630c <HAL_DMA_Abort+0x2b0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
2400645c:	6813      	ldr	r3, [r2, #0]
2400645e:	f023 030e 	bic.w	r3, r3, #14
24006462:	6013      	str	r3, [r2, #0]
      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
24006464:	6832      	ldr	r2, [r6, #0]
24006466:	4615      	mov	r5, r2
24006468:	e661      	b.n	2400612e <HAL_DMA_Abort+0xd2>
2400646a:	bf00      	nop
2400646c:	40020010 	.word	0x40020010
24006470:	40020028 	.word	0x40020028
24006474:	40020040 	.word	0x40020040
24006478:	400204b8 	.word	0x400204b8
2400647c:	58025408 	.word	0x58025408
24006480:	5802541c 	.word	0x5802541c
24006484:	58025494 	.word	0x58025494

24006488 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
24006488:	2800      	cmp	r0, #0
2400648a:	d065      	beq.n	24006558 <HAL_DMA_Abort_IT+0xd0>
{
2400648c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
24006490:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
24006494:	4603      	mov	r3, r0
24006496:	2a02      	cmp	r2, #2
24006498:	d159      	bne.n	2400654e <HAL_DMA_Abort_IT+0xc6>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
2400649a:	6801      	ldr	r1, [r0, #0]
2400649c:	4883      	ldr	r0, [pc, #524]	; (240066ac <HAL_DMA_Abort_IT+0x224>)
2400649e:	4281      	cmp	r1, r0
240064a0:	d04b      	beq.n	2400653a <HAL_DMA_Abort_IT+0xb2>
240064a2:	4c83      	ldr	r4, [pc, #524]	; (240066b0 <HAL_DMA_Abort_IT+0x228>)
240064a4:	42a1      	cmp	r1, r4
240064a6:	d048      	beq.n	2400653a <HAL_DMA_Abort_IT+0xb2>
240064a8:	f8df a228 	ldr.w	sl, [pc, #552]	; 240066d4 <HAL_DMA_Abort_IT+0x24c>
240064ac:	f8df b214 	ldr.w	fp, [pc, #532]	; 240066c4 <HAL_DMA_Abort_IT+0x23c>
240064b0:	f8df 9224 	ldr.w	r9, [pc, #548]	; 240066d8 <HAL_DMA_Abort_IT+0x250>
240064b4:	4559      	cmp	r1, fp
240064b6:	bf18      	it	ne
240064b8:	4551      	cmpne	r1, sl
240064ba:	f8df 8220 	ldr.w	r8, [pc, #544]	; 240066dc <HAL_DMA_Abort_IT+0x254>
240064be:	f8df e220 	ldr.w	lr, [pc, #544]	; 240066e0 <HAL_DMA_Abort_IT+0x258>
240064c2:	bf0c      	ite	eq
240064c4:	2201      	moveq	r2, #1
240064c6:	2200      	movne	r2, #0
240064c8:	f8df c218 	ldr.w	ip, [pc, #536]	; 240066e4 <HAL_DMA_Abort_IT+0x25c>
240064cc:	4549      	cmp	r1, r9
240064ce:	bf08      	it	eq
240064d0:	f042 0201 	orreq.w	r2, r2, #1
240064d4:	4d77      	ldr	r5, [pc, #476]	; (240066b4 <HAL_DMA_Abort_IT+0x22c>)
240064d6:	4f78      	ldr	r7, [pc, #480]	; (240066b8 <HAL_DMA_Abort_IT+0x230>)
240064d8:	4541      	cmp	r1, r8
240064da:	bf08      	it	eq
240064dc:	f042 0201 	orreq.w	r2, r2, #1
240064e0:	4e76      	ldr	r6, [pc, #472]	; (240066bc <HAL_DMA_Abort_IT+0x234>)
240064e2:	4571      	cmp	r1, lr
240064e4:	bf08      	it	eq
240064e6:	f042 0201 	orreq.w	r2, r2, #1
240064ea:	4561      	cmp	r1, ip
240064ec:	bf08      	it	eq
240064ee:	f042 0201 	orreq.w	r2, r2, #1
240064f2:	42a9      	cmp	r1, r5
240064f4:	bf08      	it	eq
240064f6:	f042 0201 	orreq.w	r2, r2, #1
240064fa:	3518      	adds	r5, #24
240064fc:	42a9      	cmp	r1, r5
240064fe:	bf08      	it	eq
24006500:	f042 0201 	orreq.w	r2, r2, #1
24006504:	3518      	adds	r5, #24
24006506:	42a9      	cmp	r1, r5
24006508:	bf08      	it	eq
2400650a:	f042 0201 	orreq.w	r2, r2, #1
2400650e:	3518      	adds	r5, #24
24006510:	42a9      	cmp	r1, r5
24006512:	bf08      	it	eq
24006514:	f042 0201 	orreq.w	r2, r2, #1
24006518:	3548      	adds	r5, #72	; 0x48
2400651a:	42b9      	cmp	r1, r7
2400651c:	bf08      	it	eq
2400651e:	f042 0201 	orreq.w	r2, r2, #1
24006522:	42b1      	cmp	r1, r6
24006524:	bf08      	it	eq
24006526:	f042 0201 	orreq.w	r2, r2, #1
2400652a:	42a9      	cmp	r1, r5
2400652c:	bf08      	it	eq
2400652e:	f042 0201 	orreq.w	r2, r2, #1
24006532:	b912      	cbnz	r2, 2400653a <HAL_DMA_Abort_IT+0xb2>
24006534:	4a62      	ldr	r2, [pc, #392]	; (240066c0 <HAL_DMA_Abort_IT+0x238>)
24006536:	4291      	cmp	r1, r2
24006538:	d110      	bne.n	2400655c <HAL_DMA_Abort_IT+0xd4>
      hdma->State = HAL_DMA_STATE_ABORT;
2400653a:	2204      	movs	r2, #4
  return HAL_OK;
2400653c:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
2400653e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
24006542:	680b      	ldr	r3, [r1, #0]
24006544:	f023 0301 	bic.w	r3, r3, #1
24006548:	600b      	str	r3, [r1, #0]
}
2400654a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
2400654e:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
24006550:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
24006552:	655a      	str	r2, [r3, #84]	; 0x54
}
24006554:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
24006558:	2001      	movs	r0, #1
}
2400655a:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
2400655c:	680a      	ldr	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2400655e:	4c54      	ldr	r4, [pc, #336]	; (240066b0 <HAL_DMA_Abort_IT+0x228>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
24006560:	f022 020e 	bic.w	r2, r2, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24006564:	4857      	ldr	r0, [pc, #348]	; (240066c4 <HAL_DMA_Abort_IT+0x23c>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
24006566:	600a      	str	r2, [r1, #0]
      __HAL_DMA_DISABLE(hdma);
24006568:	6819      	ldr	r1, [r3, #0]
2400656a:	680a      	ldr	r2, [r1, #0]
2400656c:	f022 0201 	bic.w	r2, r2, #1
24006570:	600a      	str	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24006572:	4a4e      	ldr	r2, [pc, #312]	; (240066ac <HAL_DMA_Abort_IT+0x224>)
24006574:	6819      	ldr	r1, [r3, #0]
24006576:	42a1      	cmp	r1, r4
24006578:	bf18      	it	ne
2400657a:	4291      	cmpne	r1, r2
2400657c:	f104 0430 	add.w	r4, r4, #48	; 0x30
24006580:	bf0c      	ite	eq
24006582:	2201      	moveq	r2, #1
24006584:	2200      	movne	r2, #0
24006586:	4281      	cmp	r1, r0
24006588:	bf08      	it	eq
2400658a:	f042 0201 	orreq.w	r2, r2, #1
2400658e:	3030      	adds	r0, #48	; 0x30
24006590:	42a1      	cmp	r1, r4
24006592:	bf08      	it	eq
24006594:	f042 0201 	orreq.w	r2, r2, #1
24006598:	3430      	adds	r4, #48	; 0x30
2400659a:	4281      	cmp	r1, r0
2400659c:	bf08      	it	eq
2400659e:	f042 0201 	orreq.w	r2, r2, #1
240065a2:	3030      	adds	r0, #48	; 0x30
240065a4:	42a1      	cmp	r1, r4
240065a6:	bf08      	it	eq
240065a8:	f042 0201 	orreq.w	r2, r2, #1
240065ac:	3430      	adds	r4, #48	; 0x30
240065ae:	4281      	cmp	r1, r0
240065b0:	bf08      	it	eq
240065b2:	f042 0201 	orreq.w	r2, r2, #1
240065b6:	f500 705c 	add.w	r0, r0, #880	; 0x370
240065ba:	42a1      	cmp	r1, r4
240065bc:	bf08      	it	eq
240065be:	f042 0201 	orreq.w	r2, r2, #1
240065c2:	f504 745c 	add.w	r4, r4, #880	; 0x370
240065c6:	4281      	cmp	r1, r0
240065c8:	bf08      	it	eq
240065ca:	f042 0201 	orreq.w	r2, r2, #1
240065ce:	3030      	adds	r0, #48	; 0x30
240065d0:	42a1      	cmp	r1, r4
240065d2:	bf08      	it	eq
240065d4:	f042 0201 	orreq.w	r2, r2, #1
240065d8:	3430      	adds	r4, #48	; 0x30
240065da:	4281      	cmp	r1, r0
240065dc:	bf08      	it	eq
240065de:	f042 0201 	orreq.w	r2, r2, #1
240065e2:	3030      	adds	r0, #48	; 0x30
240065e4:	42a1      	cmp	r1, r4
240065e6:	bf08      	it	eq
240065e8:	f042 0201 	orreq.w	r2, r2, #1
240065ec:	3430      	adds	r4, #48	; 0x30
240065ee:	4281      	cmp	r1, r0
240065f0:	bf08      	it	eq
240065f2:	f042 0201 	orreq.w	r2, r2, #1
240065f6:	3030      	adds	r0, #48	; 0x30
240065f8:	42a1      	cmp	r1, r4
240065fa:	bf08      	it	eq
240065fc:	f042 0201 	orreq.w	r2, r2, #1
24006600:	3430      	adds	r4, #48	; 0x30
24006602:	4281      	cmp	r1, r0
24006604:	bf08      	it	eq
24006606:	f042 0201 	orreq.w	r2, r2, #1
2400660a:	482f      	ldr	r0, [pc, #188]	; (240066c8 <HAL_DMA_Abort_IT+0x240>)
2400660c:	42a1      	cmp	r1, r4
2400660e:	bf08      	it	eq
24006610:	f042 0201 	orreq.w	r2, r2, #1
24006614:	4c2d      	ldr	r4, [pc, #180]	; (240066cc <HAL_DMA_Abort_IT+0x244>)
24006616:	4281      	cmp	r1, r0
24006618:	bf08      	it	eq
2400661a:	f042 0201 	orreq.w	r2, r2, #1
2400661e:	3028      	adds	r0, #40	; 0x28
24006620:	42a1      	cmp	r1, r4
24006622:	bf08      	it	eq
24006624:	f042 0201 	orreq.w	r2, r2, #1
24006628:	3428      	adds	r4, #40	; 0x28
2400662a:	4281      	cmp	r1, r0
2400662c:	bf08      	it	eq
2400662e:	f042 0201 	orreq.w	r2, r2, #1
24006632:	3028      	adds	r0, #40	; 0x28
24006634:	42a1      	cmp	r1, r4
24006636:	bf08      	it	eq
24006638:	f042 0201 	orreq.w	r2, r2, #1
2400663c:	3428      	adds	r4, #40	; 0x28
2400663e:	4281      	cmp	r1, r0
24006640:	bf08      	it	eq
24006642:	f042 0201 	orreq.w	r2, r2, #1
24006646:	3028      	adds	r0, #40	; 0x28
24006648:	42a1      	cmp	r1, r4
2400664a:	bf08      	it	eq
2400664c:	f042 0201 	orreq.w	r2, r2, #1
24006650:	4281      	cmp	r1, r0
24006652:	bf08      	it	eq
24006654:	f042 0201 	orreq.w	r2, r2, #1
24006658:	b912      	cbnz	r2, 24006660 <HAL_DMA_Abort_IT+0x1d8>
2400665a:	4a1d      	ldr	r2, [pc, #116]	; (240066d0 <HAL_DMA_Abort_IT+0x248>)
2400665c:	4291      	cmp	r1, r2
2400665e:	d117      	bne.n	24006690 <HAL_DMA_Abort_IT+0x208>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24006660:	6e18      	ldr	r0, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24006662:	2201      	movs	r2, #1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24006664:	6801      	ldr	r1, [r0, #0]
24006666:	f421 7180 	bic.w	r1, r1, #256	; 0x100
2400666a:	6001      	str	r1, [r0, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
2400666c:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24006670:	f001 011f 	and.w	r1, r1, #31
24006674:	408a      	lsls	r2, r1
24006676:	6042      	str	r2, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24006678:	e9d3 2119 	ldrd	r2, r1, [r3, #100]	; 0x64
2400667c:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
2400667e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
24006680:	b132      	cbz	r2, 24006690 <HAL_DMA_Abort_IT+0x208>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
24006682:	6811      	ldr	r1, [r2, #0]
24006684:	f421 7180 	bic.w	r1, r1, #256	; 0x100
24006688:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
2400668a:	e9d3 211c 	ldrd	r2, r1, [r3, #112]	; 0x70
2400668e:	6051      	str	r1, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY;
24006690:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
24006692:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
24006694:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
24006696:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
2400669a:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
2400669e:	b11a      	cbz	r2, 240066a8 <HAL_DMA_Abort_IT+0x220>
        hdma->XferAbortCallback(hdma);
240066a0:	4618      	mov	r0, r3
240066a2:	4790      	blx	r2
  return HAL_OK;
240066a4:	4620      	mov	r0, r4
240066a6:	e755      	b.n	24006554 <HAL_DMA_Abort_IT+0xcc>
240066a8:	4610      	mov	r0, r2
240066aa:	e753      	b.n	24006554 <HAL_DMA_Abort_IT+0xcc>
240066ac:	40020010 	.word	0x40020010
240066b0:	40020028 	.word	0x40020028
240066b4:	40020410 	.word	0x40020410
240066b8:	40020470 	.word	0x40020470
240066bc:	40020488 	.word	0x40020488
240066c0:	400204b8 	.word	0x400204b8
240066c4:	40020040 	.word	0x40020040
240066c8:	58025408 	.word	0x58025408
240066cc:	5802541c 	.word	0x5802541c
240066d0:	58025494 	.word	0x58025494
240066d4:	40020058 	.word	0x40020058
240066d8:	40020070 	.word	0x40020070
240066dc:	40020088 	.word	0x40020088
240066e0:	400200a0 	.word	0x400200a0
240066e4:	400200b8 	.word	0x400200b8

240066e8 <HAL_DMA_IRQHandler>:
{
240066e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
240066ea:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
240066ec:	4b9a      	ldr	r3, [pc, #616]	; (24006958 <HAL_DMA_IRQHandler+0x270>)
{
240066ee:	b083      	sub	sp, #12
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
240066f0:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
240066f2:	681f      	ldr	r7, [r3, #0]
{
240066f4:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
240066f6:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
240066f8:	6803      	ldr	r3, [r0, #0]
240066fa:	4a98      	ldr	r2, [pc, #608]	; (2400695c <HAL_DMA_IRQHandler+0x274>)
  tmpisr_dma  = regs_dma->ISR;
240066fc:	6835      	ldr	r5, [r6, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
240066fe:	4293      	cmp	r3, r2
  tmpisr_bdma = regs_bdma->ISR;
24006700:	6831      	ldr	r1, [r6, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
24006702:	d048      	beq.n	24006796 <HAL_DMA_IRQHandler+0xae>
24006704:	3218      	adds	r2, #24
24006706:	4293      	cmp	r3, r2
24006708:	d045      	beq.n	24006796 <HAL_DMA_IRQHandler+0xae>
2400670a:	3218      	adds	r2, #24
2400670c:	4894      	ldr	r0, [pc, #592]	; (24006960 <HAL_DMA_IRQHandler+0x278>)
2400670e:	4283      	cmp	r3, r0
24006710:	bf18      	it	ne
24006712:	4293      	cmpne	r3, r2
24006714:	f100 0018 	add.w	r0, r0, #24
24006718:	bf0c      	ite	eq
2400671a:	2201      	moveq	r2, #1
2400671c:	2200      	movne	r2, #0
2400671e:	4283      	cmp	r3, r0
24006720:	bf08      	it	eq
24006722:	f042 0201 	orreq.w	r2, r2, #1
24006726:	3018      	adds	r0, #24
24006728:	4283      	cmp	r3, r0
2400672a:	bf08      	it	eq
2400672c:	f042 0201 	orreq.w	r2, r2, #1
24006730:	3018      	adds	r0, #24
24006732:	4283      	cmp	r3, r0
24006734:	bf08      	it	eq
24006736:	f042 0201 	orreq.w	r2, r2, #1
2400673a:	3018      	adds	r0, #24
2400673c:	4283      	cmp	r3, r0
2400673e:	bf08      	it	eq
24006740:	f042 0201 	orreq.w	r2, r2, #1
24006744:	f500 7056 	add.w	r0, r0, #856	; 0x358
24006748:	4283      	cmp	r3, r0
2400674a:	bf08      	it	eq
2400674c:	f042 0201 	orreq.w	r2, r2, #1
24006750:	3018      	adds	r0, #24
24006752:	4283      	cmp	r3, r0
24006754:	bf08      	it	eq
24006756:	f042 0201 	orreq.w	r2, r2, #1
2400675a:	3018      	adds	r0, #24
2400675c:	4283      	cmp	r3, r0
2400675e:	bf08      	it	eq
24006760:	f042 0201 	orreq.w	r2, r2, #1
24006764:	3018      	adds	r0, #24
24006766:	4283      	cmp	r3, r0
24006768:	bf08      	it	eq
2400676a:	f042 0201 	orreq.w	r2, r2, #1
2400676e:	3018      	adds	r0, #24
24006770:	4283      	cmp	r3, r0
24006772:	bf08      	it	eq
24006774:	f042 0201 	orreq.w	r2, r2, #1
24006778:	3018      	adds	r0, #24
2400677a:	4283      	cmp	r3, r0
2400677c:	bf08      	it	eq
2400677e:	f042 0201 	orreq.w	r2, r2, #1
24006782:	3018      	adds	r0, #24
24006784:	4283      	cmp	r3, r0
24006786:	bf08      	it	eq
24006788:	f042 0201 	orreq.w	r2, r2, #1
2400678c:	b91a      	cbnz	r2, 24006796 <HAL_DMA_IRQHandler+0xae>
2400678e:	4a75      	ldr	r2, [pc, #468]	; (24006964 <HAL_DMA_IRQHandler+0x27c>)
24006790:	4293      	cmp	r3, r2
24006792:	f040 8294 	bne.w	24006cbe <HAL_DMA_IRQHandler+0x5d6>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006796:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
2400679a:	2208      	movs	r2, #8
2400679c:	f00e 011f 	and.w	r1, lr, #31
240067a0:	408a      	lsls	r2, r1
240067a2:	422a      	tst	r2, r5
240067a4:	f040 8193 	bne.w	24006ace <HAL_DMA_IRQHandler+0x3e6>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240067a8:	fa25 f201 	lsr.w	r2, r5, r1
240067ac:	07d2      	lsls	r2, r2, #31
240067ae:	d50e      	bpl.n	240067ce <HAL_DMA_IRQHandler+0xe6>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
240067b0:	695a      	ldr	r2, [r3, #20]
240067b2:	0612      	lsls	r2, r2, #24
240067b4:	f140 824d 	bpl.w	24006c52 <HAL_DMA_IRQHandler+0x56a>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
240067b8:	2301      	movs	r3, #1
240067ba:	408b      	lsls	r3, r1
240067bc:	60b3      	str	r3, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
240067be:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240067c0:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
240067c4:	f043 0302 	orr.w	r3, r3, #2
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240067c8:	f00e 011f 	and.w	r1, lr, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
240067cc:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240067ce:	f04f 0c04 	mov.w	ip, #4
240067d2:	fa0c fc01 	lsl.w	ip, ip, r1
240067d6:	ea1c 0f05 	tst.w	ip, r5
240067da:	d05f      	beq.n	2400689c <HAL_DMA_IRQHandler+0x1b4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
240067dc:	6822      	ldr	r2, [r4, #0]
240067de:	485f      	ldr	r0, [pc, #380]	; (2400695c <HAL_DMA_IRQHandler+0x274>)
240067e0:	4b61      	ldr	r3, [pc, #388]	; (24006968 <HAL_DMA_IRQHandler+0x280>)
240067e2:	429a      	cmp	r2, r3
240067e4:	bf18      	it	ne
240067e6:	4282      	cmpne	r2, r0
240067e8:	f103 0318 	add.w	r3, r3, #24
240067ec:	bf0c      	ite	eq
240067ee:	2001      	moveq	r0, #1
240067f0:	2000      	movne	r0, #0
240067f2:	429a      	cmp	r2, r3
240067f4:	bf08      	it	eq
240067f6:	f040 0001 	orreq.w	r0, r0, #1
240067fa:	3318      	adds	r3, #24
240067fc:	429a      	cmp	r2, r3
240067fe:	bf08      	it	eq
24006800:	f040 0001 	orreq.w	r0, r0, #1
24006804:	3318      	adds	r3, #24
24006806:	429a      	cmp	r2, r3
24006808:	bf08      	it	eq
2400680a:	f040 0001 	orreq.w	r0, r0, #1
2400680e:	3318      	adds	r3, #24
24006810:	429a      	cmp	r2, r3
24006812:	bf08      	it	eq
24006814:	f040 0001 	orreq.w	r0, r0, #1
24006818:	3318      	adds	r3, #24
2400681a:	429a      	cmp	r2, r3
2400681c:	bf08      	it	eq
2400681e:	f040 0001 	orreq.w	r0, r0, #1
24006822:	3318      	adds	r3, #24
24006824:	429a      	cmp	r2, r3
24006826:	bf08      	it	eq
24006828:	f040 0001 	orreq.w	r0, r0, #1
2400682c:	f503 7356 	add.w	r3, r3, #856	; 0x358
24006830:	429a      	cmp	r2, r3
24006832:	bf08      	it	eq
24006834:	f040 0001 	orreq.w	r0, r0, #1
24006838:	3318      	adds	r3, #24
2400683a:	429a      	cmp	r2, r3
2400683c:	bf08      	it	eq
2400683e:	f040 0001 	orreq.w	r0, r0, #1
24006842:	3318      	adds	r3, #24
24006844:	429a      	cmp	r2, r3
24006846:	bf08      	it	eq
24006848:	f040 0001 	orreq.w	r0, r0, #1
2400684c:	3318      	adds	r3, #24
2400684e:	429a      	cmp	r2, r3
24006850:	bf08      	it	eq
24006852:	f040 0001 	orreq.w	r0, r0, #1
24006856:	3318      	adds	r3, #24
24006858:	429a      	cmp	r2, r3
2400685a:	bf08      	it	eq
2400685c:	f040 0001 	orreq.w	r0, r0, #1
24006860:	3318      	adds	r3, #24
24006862:	429a      	cmp	r2, r3
24006864:	bf08      	it	eq
24006866:	f040 0001 	orreq.w	r0, r0, #1
2400686a:	3318      	adds	r3, #24
2400686c:	429a      	cmp	r2, r3
2400686e:	bf08      	it	eq
24006870:	f040 0001 	orreq.w	r0, r0, #1
24006874:	4613      	mov	r3, r2
24006876:	b918      	cbnz	r0, 24006880 <HAL_DMA_IRQHandler+0x198>
24006878:	483a      	ldr	r0, [pc, #232]	; (24006964 <HAL_DMA_IRQHandler+0x27c>)
2400687a:	4282      	cmp	r2, r0
2400687c:	f040 825a 	bne.w	24006d34 <HAL_DMA_IRQHandler+0x64c>
24006880:	681a      	ldr	r2, [r3, #0]
24006882:	0790      	lsls	r0, r2, #30
24006884:	f140 81f1 	bpl.w	24006c6a <HAL_DMA_IRQHandler+0x582>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
24006888:	f8c6 c008 	str.w	ip, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
2400688c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
2400688e:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
24006892:	f043 0304 	orr.w	r3, r3, #4
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006896:	f00e 011f 	and.w	r1, lr, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
2400689a:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
2400689c:	f04f 0c10 	mov.w	ip, #16
240068a0:	fa0c fc01 	lsl.w	ip, ip, r1
240068a4:	ea1c 0f05 	tst.w	ip, r5
240068a8:	d075      	beq.n	24006996 <HAL_DMA_IRQHandler+0x2ae>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
240068aa:	6822      	ldr	r2, [r4, #0]
240068ac:	482b      	ldr	r0, [pc, #172]	; (2400695c <HAL_DMA_IRQHandler+0x274>)
240068ae:	4b2e      	ldr	r3, [pc, #184]	; (24006968 <HAL_DMA_IRQHandler+0x280>)
240068b0:	429a      	cmp	r2, r3
240068b2:	bf18      	it	ne
240068b4:	4282      	cmpne	r2, r0
240068b6:	f103 0318 	add.w	r3, r3, #24
240068ba:	bf0c      	ite	eq
240068bc:	2001      	moveq	r0, #1
240068be:	2000      	movne	r0, #0
240068c0:	429a      	cmp	r2, r3
240068c2:	bf08      	it	eq
240068c4:	f040 0001 	orreq.w	r0, r0, #1
240068c8:	3318      	adds	r3, #24
240068ca:	429a      	cmp	r2, r3
240068cc:	bf08      	it	eq
240068ce:	f040 0001 	orreq.w	r0, r0, #1
240068d2:	3318      	adds	r3, #24
240068d4:	429a      	cmp	r2, r3
240068d6:	bf08      	it	eq
240068d8:	f040 0001 	orreq.w	r0, r0, #1
240068dc:	3318      	adds	r3, #24
240068de:	429a      	cmp	r2, r3
240068e0:	bf08      	it	eq
240068e2:	f040 0001 	orreq.w	r0, r0, #1
240068e6:	3318      	adds	r3, #24
240068e8:	429a      	cmp	r2, r3
240068ea:	bf08      	it	eq
240068ec:	f040 0001 	orreq.w	r0, r0, #1
240068f0:	3318      	adds	r3, #24
240068f2:	429a      	cmp	r2, r3
240068f4:	bf08      	it	eq
240068f6:	f040 0001 	orreq.w	r0, r0, #1
240068fa:	f503 7356 	add.w	r3, r3, #856	; 0x358
240068fe:	429a      	cmp	r2, r3
24006900:	bf08      	it	eq
24006902:	f040 0001 	orreq.w	r0, r0, #1
24006906:	3318      	adds	r3, #24
24006908:	429a      	cmp	r2, r3
2400690a:	bf08      	it	eq
2400690c:	f040 0001 	orreq.w	r0, r0, #1
24006910:	3318      	adds	r3, #24
24006912:	429a      	cmp	r2, r3
24006914:	bf08      	it	eq
24006916:	f040 0001 	orreq.w	r0, r0, #1
2400691a:	3318      	adds	r3, #24
2400691c:	429a      	cmp	r2, r3
2400691e:	bf08      	it	eq
24006920:	f040 0001 	orreq.w	r0, r0, #1
24006924:	3318      	adds	r3, #24
24006926:	429a      	cmp	r2, r3
24006928:	bf08      	it	eq
2400692a:	f040 0001 	orreq.w	r0, r0, #1
2400692e:	3318      	adds	r3, #24
24006930:	429a      	cmp	r2, r3
24006932:	bf08      	it	eq
24006934:	f040 0001 	orreq.w	r0, r0, #1
24006938:	3318      	adds	r3, #24
2400693a:	429a      	cmp	r2, r3
2400693c:	bf08      	it	eq
2400693e:	f040 0001 	orreq.w	r0, r0, #1
24006942:	4613      	mov	r3, r2
24006944:	b918      	cbnz	r0, 2400694e <HAL_DMA_IRQHandler+0x266>
24006946:	4807      	ldr	r0, [pc, #28]	; (24006964 <HAL_DMA_IRQHandler+0x27c>)
24006948:	4282      	cmp	r2, r0
2400694a:	f040 813c 	bne.w	24006bc6 <HAL_DMA_IRQHandler+0x4de>
2400694e:	681a      	ldr	r2, [r3, #0]
24006950:	0712      	lsls	r2, r2, #28
24006952:	f140 8177 	bpl.w	24006c44 <HAL_DMA_IRQHandler+0x55c>
24006956:	e009      	b.n	2400696c <HAL_DMA_IRQHandler+0x284>
24006958:	200008b4 	.word	0x200008b4
2400695c:	40020010 	.word	0x40020010
24006960:	40020058 	.word	0x40020058
24006964:	400204b8 	.word	0x400204b8
24006968:	40020028 	.word	0x40020028
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
2400696c:	f8c6 c008 	str.w	ip, [r6, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
24006970:	6823      	ldr	r3, [r4, #0]
24006972:	681a      	ldr	r2, [r3, #0]
24006974:	0350      	lsls	r0, r2, #13
24006976:	f100 8181 	bmi.w	24006c7c <HAL_DMA_IRQHandler+0x594>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
2400697a:	681a      	ldr	r2, [r3, #0]
2400697c:	05d2      	lsls	r2, r2, #23
2400697e:	d403      	bmi.n	24006988 <HAL_DMA_IRQHandler+0x2a0>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
24006980:	681a      	ldr	r2, [r3, #0]
24006982:	f022 0208 	bic.w	r2, r2, #8
24006986:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
24006988:	6c23      	ldr	r3, [r4, #64]	; 0x40
2400698a:	b10b      	cbz	r3, 24006990 <HAL_DMA_IRQHandler+0x2a8>
            hdma->XferHalfCpltCallback(hdma);
2400698c:	4620      	mov	r0, r4
2400698e:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006990:	6de1      	ldr	r1, [r4, #92]	; 0x5c
24006992:	f001 011f 	and.w	r1, r1, #31
24006996:	2320      	movs	r3, #32
24006998:	fa03 f101 	lsl.w	r1, r3, r1
2400699c:	4229      	tst	r1, r5
2400699e:	d066      	beq.n	24006a6e <HAL_DMA_IRQHandler+0x386>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
240069a0:	6823      	ldr	r3, [r4, #0]
240069a2:	4a92      	ldr	r2, [pc, #584]	; (24006bec <HAL_DMA_IRQHandler+0x504>)
240069a4:	4892      	ldr	r0, [pc, #584]	; (24006bf0 <HAL_DMA_IRQHandler+0x508>)
240069a6:	4283      	cmp	r3, r0
240069a8:	bf18      	it	ne
240069aa:	4293      	cmpne	r3, r2
240069ac:	f100 0018 	add.w	r0, r0, #24
240069b0:	bf0c      	ite	eq
240069b2:	2201      	moveq	r2, #1
240069b4:	2200      	movne	r2, #0
240069b6:	4283      	cmp	r3, r0
240069b8:	bf08      	it	eq
240069ba:	f042 0201 	orreq.w	r2, r2, #1
240069be:	3018      	adds	r0, #24
240069c0:	4283      	cmp	r3, r0
240069c2:	bf08      	it	eq
240069c4:	f042 0201 	orreq.w	r2, r2, #1
240069c8:	3018      	adds	r0, #24
240069ca:	4283      	cmp	r3, r0
240069cc:	bf08      	it	eq
240069ce:	f042 0201 	orreq.w	r2, r2, #1
240069d2:	3018      	adds	r0, #24
240069d4:	4283      	cmp	r3, r0
240069d6:	bf08      	it	eq
240069d8:	f042 0201 	orreq.w	r2, r2, #1
240069dc:	3018      	adds	r0, #24
240069de:	4283      	cmp	r3, r0
240069e0:	bf08      	it	eq
240069e2:	f042 0201 	orreq.w	r2, r2, #1
240069e6:	3018      	adds	r0, #24
240069e8:	4283      	cmp	r3, r0
240069ea:	bf08      	it	eq
240069ec:	f042 0201 	orreq.w	r2, r2, #1
240069f0:	f500 7056 	add.w	r0, r0, #856	; 0x358
240069f4:	4283      	cmp	r3, r0
240069f6:	bf08      	it	eq
240069f8:	f042 0201 	orreq.w	r2, r2, #1
240069fc:	3018      	adds	r0, #24
240069fe:	4283      	cmp	r3, r0
24006a00:	bf08      	it	eq
24006a02:	f042 0201 	orreq.w	r2, r2, #1
24006a06:	3018      	adds	r0, #24
24006a08:	4283      	cmp	r3, r0
24006a0a:	bf08      	it	eq
24006a0c:	f042 0201 	orreq.w	r2, r2, #1
24006a10:	3018      	adds	r0, #24
24006a12:	4283      	cmp	r3, r0
24006a14:	bf08      	it	eq
24006a16:	f042 0201 	orreq.w	r2, r2, #1
24006a1a:	3018      	adds	r0, #24
24006a1c:	4283      	cmp	r3, r0
24006a1e:	bf08      	it	eq
24006a20:	f042 0201 	orreq.w	r2, r2, #1
24006a24:	3018      	adds	r0, #24
24006a26:	4283      	cmp	r3, r0
24006a28:	bf08      	it	eq
24006a2a:	f042 0201 	orreq.w	r2, r2, #1
24006a2e:	3018      	adds	r0, #24
24006a30:	4283      	cmp	r3, r0
24006a32:	bf08      	it	eq
24006a34:	f042 0201 	orreq.w	r2, r2, #1
24006a38:	b91a      	cbnz	r2, 24006a42 <HAL_DMA_IRQHandler+0x35a>
24006a3a:	4a6e      	ldr	r2, [pc, #440]	; (24006bf4 <HAL_DMA_IRQHandler+0x50c>)
24006a3c:	4293      	cmp	r3, r2
24006a3e:	f040 80cf 	bne.w	24006be0 <HAL_DMA_IRQHandler+0x4f8>
24006a42:	681b      	ldr	r3, [r3, #0]
24006a44:	06dd      	lsls	r5, r3, #27
24006a46:	d512      	bpl.n	24006a6e <HAL_DMA_IRQHandler+0x386>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
24006a48:	60b1      	str	r1, [r6, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
24006a4a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
24006a4e:	2b04      	cmp	r3, #4
24006a50:	f000 80d4 	beq.w	24006bfc <HAL_DMA_IRQHandler+0x514>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
24006a54:	6823      	ldr	r3, [r4, #0]
24006a56:	681a      	ldr	r2, [r3, #0]
24006a58:	0352      	lsls	r2, r2, #13
24006a5a:	f140 8118 	bpl.w	24006c8e <HAL_DMA_IRQHandler+0x5a6>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
24006a5e:	681b      	ldr	r3, [r3, #0]
24006a60:	031e      	lsls	r6, r3, #12
24006a62:	f140 8123 	bpl.w	24006cac <HAL_DMA_IRQHandler+0x5c4>
          if(hdma->XferCpltCallback != NULL)
24006a66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
24006a68:	b10b      	cbz	r3, 24006a6e <HAL_DMA_IRQHandler+0x386>
            hdma->XferCpltCallback(hdma);
24006a6a:	4620      	mov	r0, r4
24006a6c:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
24006a6e:	6d63      	ldr	r3, [r4, #84]	; 0x54
24006a70:	2b00      	cmp	r3, #0
24006a72:	f000 80e5 	beq.w	24006c40 <HAL_DMA_IRQHandler+0x558>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
24006a76:	6d63      	ldr	r3, [r4, #84]	; 0x54
24006a78:	07dd      	lsls	r5, r3, #31
24006a7a:	d51f      	bpl.n	24006abc <HAL_DMA_IRQHandler+0x3d4>
        __HAL_DMA_DISABLE(hdma);
24006a7c:	6822      	ldr	r2, [r4, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
24006a7e:	2104      	movs	r1, #4
24006a80:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
24006a84:	6813      	ldr	r3, [r2, #0]
24006a86:	f023 0301 	bic.w	r3, r3, #1
24006a8a:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
24006a8c:	4a5a      	ldr	r2, [pc, #360]	; (24006bf8 <HAL_DMA_IRQHandler+0x510>)
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
24006a8e:	6821      	ldr	r1, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
24006a90:	fba2 7207 	umull	r7, r2, r2, r7
24006a94:	0a92      	lsrs	r2, r2, #10
24006a96:	e002      	b.n	24006a9e <HAL_DMA_IRQHandler+0x3b6>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
24006a98:	680b      	ldr	r3, [r1, #0]
24006a9a:	07d8      	lsls	r0, r3, #31
24006a9c:	d504      	bpl.n	24006aa8 <HAL_DMA_IRQHandler+0x3c0>
          if (++count > timeout)
24006a9e:	9b01      	ldr	r3, [sp, #4]
24006aa0:	3301      	adds	r3, #1
24006aa2:	4293      	cmp	r3, r2
24006aa4:	9301      	str	r3, [sp, #4]
24006aa6:	d9f7      	bls.n	24006a98 <HAL_DMA_IRQHandler+0x3b0>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
24006aa8:	680b      	ldr	r3, [r1, #0]
24006aaa:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
24006aac:	bf4c      	ite	mi
24006aae:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
24006ab0:	2301      	movpl	r3, #1
24006ab2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
24006ab6:	2300      	movs	r3, #0
24006ab8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
24006abc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
24006abe:	2b00      	cmp	r3, #0
24006ac0:	f000 80be 	beq.w	24006c40 <HAL_DMA_IRQHandler+0x558>
        hdma->XferErrorCallback(hdma);
24006ac4:	4620      	mov	r0, r4
}
24006ac6:	b003      	add	sp, #12
24006ac8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        hdma->XferErrorCallback(hdma);
24006acc:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
24006ace:	681a      	ldr	r2, [r3, #0]
24006ad0:	0752      	lsls	r2, r2, #29
24006ad2:	d511      	bpl.n	24006af8 <HAL_DMA_IRQHandler+0x410>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
24006ad4:	681a      	ldr	r2, [r3, #0]
24006ad6:	f022 0204 	bic.w	r2, r2, #4
24006ada:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
24006adc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
24006ade:	f003 021f 	and.w	r2, r3, #31
24006ae2:	2308      	movs	r3, #8
24006ae4:	4093      	lsls	r3, r2
24006ae6:	60b3      	str	r3, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
24006ae8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006aea:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
24006aee:	f043 0301 	orr.w	r3, r3, #1
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006af2:	f00e 011f 	and.w	r1, lr, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
24006af6:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006af8:	fa25 f301 	lsr.w	r3, r5, r1
24006afc:	07d8      	lsls	r0, r3, #31
24006afe:	f57f ae66 	bpl.w	240067ce <HAL_DMA_IRQHandler+0xe6>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
24006b02:	6822      	ldr	r2, [r4, #0]
24006b04:	4839      	ldr	r0, [pc, #228]	; (24006bec <HAL_DMA_IRQHandler+0x504>)
24006b06:	4b3a      	ldr	r3, [pc, #232]	; (24006bf0 <HAL_DMA_IRQHandler+0x508>)
24006b08:	429a      	cmp	r2, r3
24006b0a:	bf18      	it	ne
24006b0c:	4282      	cmpne	r2, r0
24006b0e:	f103 0318 	add.w	r3, r3, #24
24006b12:	bf0c      	ite	eq
24006b14:	2001      	moveq	r0, #1
24006b16:	2000      	movne	r0, #0
24006b18:	429a      	cmp	r2, r3
24006b1a:	bf08      	it	eq
24006b1c:	f040 0001 	orreq.w	r0, r0, #1
24006b20:	3318      	adds	r3, #24
24006b22:	429a      	cmp	r2, r3
24006b24:	bf08      	it	eq
24006b26:	f040 0001 	orreq.w	r0, r0, #1
24006b2a:	3318      	adds	r3, #24
24006b2c:	429a      	cmp	r2, r3
24006b2e:	bf08      	it	eq
24006b30:	f040 0001 	orreq.w	r0, r0, #1
24006b34:	3318      	adds	r3, #24
24006b36:	429a      	cmp	r2, r3
24006b38:	bf08      	it	eq
24006b3a:	f040 0001 	orreq.w	r0, r0, #1
24006b3e:	3318      	adds	r3, #24
24006b40:	429a      	cmp	r2, r3
24006b42:	bf08      	it	eq
24006b44:	f040 0001 	orreq.w	r0, r0, #1
24006b48:	3318      	adds	r3, #24
24006b4a:	429a      	cmp	r2, r3
24006b4c:	bf08      	it	eq
24006b4e:	f040 0001 	orreq.w	r0, r0, #1
24006b52:	f503 7356 	add.w	r3, r3, #856	; 0x358
24006b56:	429a      	cmp	r2, r3
24006b58:	bf08      	it	eq
24006b5a:	f040 0001 	orreq.w	r0, r0, #1
24006b5e:	3318      	adds	r3, #24
24006b60:	429a      	cmp	r2, r3
24006b62:	bf08      	it	eq
24006b64:	f040 0001 	orreq.w	r0, r0, #1
24006b68:	3318      	adds	r3, #24
24006b6a:	429a      	cmp	r2, r3
24006b6c:	bf08      	it	eq
24006b6e:	f040 0001 	orreq.w	r0, r0, #1
24006b72:	3318      	adds	r3, #24
24006b74:	429a      	cmp	r2, r3
24006b76:	bf08      	it	eq
24006b78:	f040 0001 	orreq.w	r0, r0, #1
24006b7c:	3318      	adds	r3, #24
24006b7e:	429a      	cmp	r2, r3
24006b80:	bf08      	it	eq
24006b82:	f040 0001 	orreq.w	r0, r0, #1
24006b86:	3318      	adds	r3, #24
24006b88:	429a      	cmp	r2, r3
24006b8a:	bf08      	it	eq
24006b8c:	f040 0001 	orreq.w	r0, r0, #1
24006b90:	3318      	adds	r3, #24
24006b92:	429a      	cmp	r2, r3
24006b94:	bf08      	it	eq
24006b96:	f040 0001 	orreq.w	r0, r0, #1
24006b9a:	4613      	mov	r3, r2
24006b9c:	2800      	cmp	r0, #0
24006b9e:	f47f ae07 	bne.w	240067b0 <HAL_DMA_IRQHandler+0xc8>
24006ba2:	4814      	ldr	r0, [pc, #80]	; (24006bf4 <HAL_DMA_IRQHandler+0x50c>)
24006ba4:	4282      	cmp	r2, r0
24006ba6:	f43f ae03 	beq.w	240067b0 <HAL_DMA_IRQHandler+0xc8>
24006baa:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006bac:	2304      	movs	r3, #4
24006bae:	408b      	lsls	r3, r1
24006bb0:	422b      	tst	r3, r5
24006bb2:	f040 80bf 	bne.w	24006d34 <HAL_DMA_IRQHandler+0x64c>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006bb6:	f04f 0c10 	mov.w	ip, #16
24006bba:	fa0c fc01 	lsl.w	ip, ip, r1
24006bbe:	ea15 0f0c 	tst.w	r5, ip
24006bc2:	f43f aee8 	beq.w	24006996 <HAL_DMA_IRQHandler+0x2ae>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
24006bc6:	6813      	ldr	r3, [r2, #0]
24006bc8:	075b      	lsls	r3, r3, #29
24006bca:	f53f aecf 	bmi.w	2400696c <HAL_DMA_IRQHandler+0x284>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006bce:	f00e 0e1f 	and.w	lr, lr, #31
24006bd2:	2120      	movs	r1, #32
24006bd4:	fa01 f10e 	lsl.w	r1, r1, lr
24006bd8:	420d      	tst	r5, r1
24006bda:	f43f af48 	beq.w	24006a6e <HAL_DMA_IRQHandler+0x386>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
24006bde:	4613      	mov	r3, r2
24006be0:	681b      	ldr	r3, [r3, #0]
24006be2:	0798      	lsls	r0, r3, #30
24006be4:	f57f af43 	bpl.w	24006a6e <HAL_DMA_IRQHandler+0x386>
24006be8:	e72e      	b.n	24006a48 <HAL_DMA_IRQHandler+0x360>
24006bea:	bf00      	nop
24006bec:	40020010 	.word	0x40020010
24006bf0:	40020028 	.word	0x40020028
24006bf4:	400204b8 	.word	0x400204b8
24006bf8:	1b4e81b5 	.word	0x1b4e81b5
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
24006bfc:	6822      	ldr	r2, [r4, #0]
24006bfe:	6813      	ldr	r3, [r2, #0]
24006c00:	f023 0316 	bic.w	r3, r3, #22
24006c04:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
24006c06:	6822      	ldr	r2, [r4, #0]
24006c08:	6953      	ldr	r3, [r2, #20]
24006c0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
24006c0e:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
24006c10:	6c23      	ldr	r3, [r4, #64]	; 0x40
24006c12:	2b00      	cmp	r3, #0
24006c14:	d04f      	beq.n	24006cb6 <HAL_DMA_IRQHandler+0x5ce>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
24006c16:	6822      	ldr	r2, [r4, #0]
24006c18:	6813      	ldr	r3, [r2, #0]
24006c1a:	f023 0308 	bic.w	r3, r3, #8
24006c1e:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24006c20:	6de2      	ldr	r2, [r4, #92]	; 0x5c
24006c22:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
24006c24:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24006c26:	f002 021f 	and.w	r2, r2, #31
24006c2a:	4093      	lsls	r3, r2
          __HAL_UNLOCK(hdma);
24006c2c:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24006c2e:	60b3      	str	r3, [r6, #8]
          if(hdma->XferAbortCallback != NULL)
24006c30:	6d23      	ldr	r3, [r4, #80]	; 0x50
          hdma->State = HAL_DMA_STATE_READY;
24006c32:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
24006c36:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
24006c3a:	2b00      	cmp	r3, #0
24006c3c:	f47f af42 	bne.w	24006ac4 <HAL_DMA_IRQHandler+0x3dc>
}
24006c40:	b003      	add	sp, #12
24006c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006c44:	2220      	movs	r2, #32
24006c46:	fa02 f101 	lsl.w	r1, r2, r1
24006c4a:	420d      	tst	r5, r1
24006c4c:	f47f aef9 	bne.w	24006a42 <HAL_DMA_IRQHandler+0x35a>
24006c50:	e70d      	b.n	24006a6e <HAL_DMA_IRQHandler+0x386>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006c52:	f04f 0c04 	mov.w	ip, #4
24006c56:	fa0c fc01 	lsl.w	ip, ip, r1
24006c5a:	ea15 0f0c 	tst.w	r5, ip
24006c5e:	f43f ae1d 	beq.w	2400689c <HAL_DMA_IRQHandler+0x1b4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
24006c62:	681a      	ldr	r2, [r3, #0]
24006c64:	0790      	lsls	r0, r2, #30
24006c66:	f53f ae0f 	bmi.w	24006888 <HAL_DMA_IRQHandler+0x1a0>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006c6a:	f04f 0c10 	mov.w	ip, #16
24006c6e:	fa0c fc01 	lsl.w	ip, ip, r1
24006c72:	ea15 0f0c 	tst.w	r5, ip
24006c76:	f47f ae6a 	bne.w	2400694e <HAL_DMA_IRQHandler+0x266>
24006c7a:	e68c      	b.n	24006996 <HAL_DMA_IRQHandler+0x2ae>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
24006c7c:	681b      	ldr	r3, [r3, #0]
24006c7e:	0319      	lsls	r1, r3, #12
24006c80:	f57f ae82 	bpl.w	24006988 <HAL_DMA_IRQHandler+0x2a0>
            if(hdma->XferM1HalfCpltCallback != NULL)
24006c84:	6ca3      	ldr	r3, [r4, #72]	; 0x48
24006c86:	2b00      	cmp	r3, #0
24006c88:	f47f ae80 	bne.w	2400698c <HAL_DMA_IRQHandler+0x2a4>
24006c8c:	e680      	b.n	24006990 <HAL_DMA_IRQHandler+0x2a8>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
24006c8e:	681a      	ldr	r2, [r3, #0]
24006c90:	f412 7280 	ands.w	r2, r2, #256	; 0x100
24006c94:	f47f aee7 	bne.w	24006a66 <HAL_DMA_IRQHandler+0x37e>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
24006c98:	6819      	ldr	r1, [r3, #0]
24006c9a:	f021 0110 	bic.w	r1, r1, #16
24006c9e:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
24006ca0:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
24006ca2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
24006ca6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
            __HAL_UNLOCK(hdma);
24006caa:	e6dc      	b.n	24006a66 <HAL_DMA_IRQHandler+0x37e>
            if(hdma->XferM1CpltCallback != NULL)
24006cac:	6c63      	ldr	r3, [r4, #68]	; 0x44
24006cae:	2b00      	cmp	r3, #0
24006cb0:	f47f aedb 	bne.w	24006a6a <HAL_DMA_IRQHandler+0x382>
24006cb4:	e6db      	b.n	24006a6e <HAL_DMA_IRQHandler+0x386>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
24006cb6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
24006cb8:	2b00      	cmp	r3, #0
24006cba:	d1ac      	bne.n	24006c16 <HAL_DMA_IRQHandler+0x52e>
24006cbc:	e7b0      	b.n	24006c20 <HAL_DMA_IRQHandler+0x538>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
24006cbe:	4a9b      	ldr	r2, [pc, #620]	; (24006f2c <HAL_DMA_IRQHandler+0x844>)
24006cc0:	489b      	ldr	r0, [pc, #620]	; (24006f30 <HAL_DMA_IRQHandler+0x848>)
24006cc2:	4283      	cmp	r3, r0
24006cc4:	bf18      	it	ne
24006cc6:	4293      	cmpne	r3, r2
24006cc8:	f100 0014 	add.w	r0, r0, #20
24006ccc:	bf0c      	ite	eq
24006cce:	2201      	moveq	r2, #1
24006cd0:	2200      	movne	r2, #0
24006cd2:	4283      	cmp	r3, r0
24006cd4:	bf08      	it	eq
24006cd6:	f042 0201 	orreq.w	r2, r2, #1
24006cda:	3014      	adds	r0, #20
24006cdc:	4283      	cmp	r3, r0
24006cde:	bf08      	it	eq
24006ce0:	f042 0201 	orreq.w	r2, r2, #1
24006ce4:	3014      	adds	r0, #20
24006ce6:	4283      	cmp	r3, r0
24006ce8:	bf08      	it	eq
24006cea:	f042 0201 	orreq.w	r2, r2, #1
24006cee:	3014      	adds	r0, #20
24006cf0:	4283      	cmp	r3, r0
24006cf2:	bf08      	it	eq
24006cf4:	f042 0201 	orreq.w	r2, r2, #1
24006cf8:	3014      	adds	r0, #20
24006cfa:	4283      	cmp	r3, r0
24006cfc:	bf08      	it	eq
24006cfe:	f042 0201 	orreq.w	r2, r2, #1
24006d02:	b912      	cbnz	r2, 24006d0a <HAL_DMA_IRQHandler+0x622>
24006d04:	4a8b      	ldr	r2, [pc, #556]	; (24006f34 <HAL_DMA_IRQHandler+0x84c>)
24006d06:	4293      	cmp	r3, r2
24006d08:	d19a      	bne.n	24006c40 <HAL_DMA_IRQHandler+0x558>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
24006d0a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
24006d0c:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
24006d0e:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
24006d10:	f000 001f 	and.w	r0, r0, #31
24006d14:	4085      	lsls	r5, r0
24006d16:	420d      	tst	r5, r1
24006d18:	d018      	beq.n	24006d4c <HAL_DMA_IRQHandler+0x664>
24006d1a:	0757      	lsls	r7, r2, #29
24006d1c:	d516      	bpl.n	24006d4c <HAL_DMA_IRQHandler+0x664>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24006d1e:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
24006d20:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24006d22:	d544      	bpl.n	24006dae <HAL_DMA_IRQHandler+0x6c6>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
24006d24:	03d2      	lsls	r2, r2, #15
24006d26:	f100 8099 	bmi.w	24006e5c <HAL_DMA_IRQHandler+0x774>
          if(hdma->XferM1HalfCpltCallback != NULL)
24006d2a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
24006d2c:	2b00      	cmp	r3, #0
24006d2e:	f47f aec9 	bne.w	24006ac4 <HAL_DMA_IRQHandler+0x3dc>
24006d32:	e785      	b.n	24006c40 <HAL_DMA_IRQHandler+0x558>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006d34:	f00e 011f 	and.w	r1, lr, #31
24006d38:	f04f 0c10 	mov.w	ip, #16
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
24006d3c:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006d3e:	fa0c fc01 	lsl.w	ip, ip, r1
24006d42:	ea15 0f0c 	tst.w	r5, ip
24006d46:	f47f af3e 	bne.w	24006bc6 <HAL_DMA_IRQHandler+0x4de>
24006d4a:	e624      	b.n	24006996 <HAL_DMA_IRQHandler+0x2ae>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
24006d4c:	2502      	movs	r5, #2
24006d4e:	4085      	lsls	r5, r0
24006d50:	420d      	tst	r5, r1
24006d52:	d00d      	beq.n	24006d70 <HAL_DMA_IRQHandler+0x688>
24006d54:	0797      	lsls	r7, r2, #30
24006d56:	d50b      	bpl.n	24006d70 <HAL_DMA_IRQHandler+0x688>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
24006d58:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24006d5a:	0416      	lsls	r6, r2, #16
24006d5c:	f140 8083 	bpl.w	24006e66 <HAL_DMA_IRQHandler+0x77e>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
24006d60:	03d5      	lsls	r5, r2, #15
24006d62:	f100 80dd 	bmi.w	24006f20 <HAL_DMA_IRQHandler+0x838>
          if(hdma->XferM1CpltCallback != NULL)
24006d66:	6c63      	ldr	r3, [r4, #68]	; 0x44
24006d68:	2b00      	cmp	r3, #0
24006d6a:	f47f aeab 	bne.w	24006ac4 <HAL_DMA_IRQHandler+0x3dc>
24006d6e:	e767      	b.n	24006c40 <HAL_DMA_IRQHandler+0x558>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
24006d70:	2508      	movs	r5, #8
24006d72:	fa05 f000 	lsl.w	r0, r5, r0
24006d76:	4208      	tst	r0, r1
24006d78:	f43f af62 	beq.w	24006c40 <HAL_DMA_IRQHandler+0x558>
24006d7c:	0711      	lsls	r1, r2, #28
24006d7e:	f57f af5f 	bpl.w	24006c40 <HAL_DMA_IRQHandler+0x558>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
24006d82:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24006d84:	2201      	movs	r2, #1
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
24006d86:	f021 010e 	bic.w	r1, r1, #14
24006d8a:	6019      	str	r1, [r3, #0]
      __HAL_UNLOCK(hdma);
24006d8c:	2100      	movs	r1, #0
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24006d8e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
24006d90:	f003 031f 	and.w	r3, r3, #31
24006d94:	fa02 f303 	lsl.w	r3, r2, r3
24006d98:	6073      	str	r3, [r6, #4]
      if (hdma->XferErrorCallback != NULL)
24006d9a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
24006d9c:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hdma);
24006d9e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
24006da2:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
24006da6:	2b00      	cmp	r3, #0
24006da8:	f47f ae8c 	bne.w	24006ac4 <HAL_DMA_IRQHandler+0x3dc>
24006dac:	e748      	b.n	24006c40 <HAL_DMA_IRQHandler+0x558>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
24006dae:	0693      	lsls	r3, r2, #26
24006db0:	d454      	bmi.n	24006e5c <HAL_DMA_IRQHandler+0x774>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
24006db2:	6822      	ldr	r2, [r4, #0]
24006db4:	4b60      	ldr	r3, [pc, #384]	; (24006f38 <HAL_DMA_IRQHandler+0x850>)
24006db6:	4861      	ldr	r0, [pc, #388]	; (24006f3c <HAL_DMA_IRQHandler+0x854>)
24006db8:	4961      	ldr	r1, [pc, #388]	; (24006f40 <HAL_DMA_IRQHandler+0x858>)
24006dba:	4282      	cmp	r2, r0
24006dbc:	bf18      	it	ne
24006dbe:	429a      	cmpne	r2, r3
24006dc0:	f100 0030 	add.w	r0, r0, #48	; 0x30
24006dc4:	bf0c      	ite	eq
24006dc6:	2301      	moveq	r3, #1
24006dc8:	2300      	movne	r3, #0
24006dca:	428a      	cmp	r2, r1
24006dcc:	bf08      	it	eq
24006dce:	f043 0301 	orreq.w	r3, r3, #1
24006dd2:	3130      	adds	r1, #48	; 0x30
24006dd4:	4282      	cmp	r2, r0
24006dd6:	bf08      	it	eq
24006dd8:	f043 0301 	orreq.w	r3, r3, #1
24006ddc:	3030      	adds	r0, #48	; 0x30
24006dde:	428a      	cmp	r2, r1
24006de0:	bf08      	it	eq
24006de2:	f043 0301 	orreq.w	r3, r3, #1
24006de6:	3130      	adds	r1, #48	; 0x30
24006de8:	4282      	cmp	r2, r0
24006dea:	bf08      	it	eq
24006dec:	f043 0301 	orreq.w	r3, r3, #1
24006df0:	3030      	adds	r0, #48	; 0x30
24006df2:	428a      	cmp	r2, r1
24006df4:	bf08      	it	eq
24006df6:	f043 0301 	orreq.w	r3, r3, #1
24006dfa:	f501 715c 	add.w	r1, r1, #880	; 0x370
24006dfe:	4282      	cmp	r2, r0
24006e00:	bf08      	it	eq
24006e02:	f043 0301 	orreq.w	r3, r3, #1
24006e06:	f500 705c 	add.w	r0, r0, #880	; 0x370
24006e0a:	428a      	cmp	r2, r1
24006e0c:	bf08      	it	eq
24006e0e:	f043 0301 	orreq.w	r3, r3, #1
24006e12:	3130      	adds	r1, #48	; 0x30
24006e14:	4282      	cmp	r2, r0
24006e16:	bf08      	it	eq
24006e18:	f043 0301 	orreq.w	r3, r3, #1
24006e1c:	3030      	adds	r0, #48	; 0x30
24006e1e:	428a      	cmp	r2, r1
24006e20:	bf08      	it	eq
24006e22:	f043 0301 	orreq.w	r3, r3, #1
24006e26:	3130      	adds	r1, #48	; 0x30
24006e28:	4282      	cmp	r2, r0
24006e2a:	bf08      	it	eq
24006e2c:	f043 0301 	orreq.w	r3, r3, #1
24006e30:	3030      	adds	r0, #48	; 0x30
24006e32:	428a      	cmp	r2, r1
24006e34:	bf08      	it	eq
24006e36:	f043 0301 	orreq.w	r3, r3, #1
24006e3a:	3130      	adds	r1, #48	; 0x30
24006e3c:	4282      	cmp	r2, r0
24006e3e:	bf08      	it	eq
24006e40:	f043 0301 	orreq.w	r3, r3, #1
24006e44:	428a      	cmp	r2, r1
24006e46:	bf08      	it	eq
24006e48:	f043 0301 	orreq.w	r3, r3, #1
24006e4c:	b913      	cbnz	r3, 24006e54 <HAL_DMA_IRQHandler+0x76c>
24006e4e:	4b3d      	ldr	r3, [pc, #244]	; (24006f44 <HAL_DMA_IRQHandler+0x85c>)
24006e50:	429a      	cmp	r2, r3
24006e52:	d179      	bne.n	24006f48 <HAL_DMA_IRQHandler+0x860>
24006e54:	6813      	ldr	r3, [r2, #0]
24006e56:	f023 0308 	bic.w	r3, r3, #8
24006e5a:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
24006e5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
24006e5e:	2b00      	cmp	r3, #0
24006e60:	f47f ae30 	bne.w	24006ac4 <HAL_DMA_IRQHandler+0x3dc>
24006e64:	e6ec      	b.n	24006c40 <HAL_DMA_IRQHandler+0x558>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
24006e66:	0690      	lsls	r0, r2, #26
24006e68:	d45a      	bmi.n	24006f20 <HAL_DMA_IRQHandler+0x838>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
24006e6a:	6822      	ldr	r2, [r4, #0]
24006e6c:	4b32      	ldr	r3, [pc, #200]	; (24006f38 <HAL_DMA_IRQHandler+0x850>)
24006e6e:	4833      	ldr	r0, [pc, #204]	; (24006f3c <HAL_DMA_IRQHandler+0x854>)
24006e70:	4933      	ldr	r1, [pc, #204]	; (24006f40 <HAL_DMA_IRQHandler+0x858>)
24006e72:	4282      	cmp	r2, r0
24006e74:	bf18      	it	ne
24006e76:	429a      	cmpne	r2, r3
24006e78:	f100 0030 	add.w	r0, r0, #48	; 0x30
24006e7c:	bf0c      	ite	eq
24006e7e:	2301      	moveq	r3, #1
24006e80:	2300      	movne	r3, #0
24006e82:	428a      	cmp	r2, r1
24006e84:	bf08      	it	eq
24006e86:	f043 0301 	orreq.w	r3, r3, #1
24006e8a:	3130      	adds	r1, #48	; 0x30
24006e8c:	4282      	cmp	r2, r0
24006e8e:	bf08      	it	eq
24006e90:	f043 0301 	orreq.w	r3, r3, #1
24006e94:	3030      	adds	r0, #48	; 0x30
24006e96:	428a      	cmp	r2, r1
24006e98:	bf08      	it	eq
24006e9a:	f043 0301 	orreq.w	r3, r3, #1
24006e9e:	3130      	adds	r1, #48	; 0x30
24006ea0:	4282      	cmp	r2, r0
24006ea2:	bf08      	it	eq
24006ea4:	f043 0301 	orreq.w	r3, r3, #1
24006ea8:	3030      	adds	r0, #48	; 0x30
24006eaa:	428a      	cmp	r2, r1
24006eac:	bf08      	it	eq
24006eae:	f043 0301 	orreq.w	r3, r3, #1
24006eb2:	f501 715c 	add.w	r1, r1, #880	; 0x370
24006eb6:	4282      	cmp	r2, r0
24006eb8:	bf08      	it	eq
24006eba:	f043 0301 	orreq.w	r3, r3, #1
24006ebe:	f500 705c 	add.w	r0, r0, #880	; 0x370
24006ec2:	428a      	cmp	r2, r1
24006ec4:	bf08      	it	eq
24006ec6:	f043 0301 	orreq.w	r3, r3, #1
24006eca:	3130      	adds	r1, #48	; 0x30
24006ecc:	4282      	cmp	r2, r0
24006ece:	bf08      	it	eq
24006ed0:	f043 0301 	orreq.w	r3, r3, #1
24006ed4:	3030      	adds	r0, #48	; 0x30
24006ed6:	428a      	cmp	r2, r1
24006ed8:	bf08      	it	eq
24006eda:	f043 0301 	orreq.w	r3, r3, #1
24006ede:	3130      	adds	r1, #48	; 0x30
24006ee0:	4282      	cmp	r2, r0
24006ee2:	bf08      	it	eq
24006ee4:	f043 0301 	orreq.w	r3, r3, #1
24006ee8:	3030      	adds	r0, #48	; 0x30
24006eea:	428a      	cmp	r2, r1
24006eec:	bf08      	it	eq
24006eee:	f043 0301 	orreq.w	r3, r3, #1
24006ef2:	3130      	adds	r1, #48	; 0x30
24006ef4:	4282      	cmp	r2, r0
24006ef6:	bf08      	it	eq
24006ef8:	f043 0301 	orreq.w	r3, r3, #1
24006efc:	428a      	cmp	r2, r1
24006efe:	bf08      	it	eq
24006f00:	f043 0301 	orreq.w	r3, r3, #1
24006f04:	b913      	cbnz	r3, 24006f0c <HAL_DMA_IRQHandler+0x824>
24006f06:	4b0f      	ldr	r3, [pc, #60]	; (24006f44 <HAL_DMA_IRQHandler+0x85c>)
24006f08:	429a      	cmp	r2, r3
24006f0a:	d122      	bne.n	24006f52 <HAL_DMA_IRQHandler+0x86a>
24006f0c:	6813      	ldr	r3, [r2, #0]
24006f0e:	f023 0314 	bic.w	r3, r3, #20
24006f12:	6013      	str	r3, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
24006f14:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
24006f16:	2300      	movs	r3, #0
          hdma->State = HAL_DMA_STATE_READY;
24006f18:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
24006f1c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
24006f20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
24006f22:	2b00      	cmp	r3, #0
24006f24:	f47f adce 	bne.w	24006ac4 <HAL_DMA_IRQHandler+0x3dc>
24006f28:	e68a      	b.n	24006c40 <HAL_DMA_IRQHandler+0x558>
24006f2a:	bf00      	nop
24006f2c:	58025408 	.word	0x58025408
24006f30:	5802541c 	.word	0x5802541c
24006f34:	58025494 	.word	0x58025494
24006f38:	40020010 	.word	0x40020010
24006f3c:	40020028 	.word	0x40020028
24006f40:	40020040 	.word	0x40020040
24006f44:	400204b8 	.word	0x400204b8
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
24006f48:	6813      	ldr	r3, [r2, #0]
24006f4a:	f023 0304 	bic.w	r3, r3, #4
24006f4e:	6013      	str	r3, [r2, #0]
24006f50:	e784      	b.n	24006e5c <HAL_DMA_IRQHandler+0x774>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
24006f52:	6813      	ldr	r3, [r2, #0]
24006f54:	f023 030a 	bic.w	r3, r3, #10
24006f58:	6013      	str	r3, [r2, #0]
24006f5a:	e7db      	b.n	24006f14 <HAL_DMA_IRQHandler+0x82c>

24006f5c <HAL_DMA_GetState>:
  return hdma->State;
24006f5c:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
24006f60:	4770      	bx	lr
24006f62:	bf00      	nop

24006f64 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
24006f64:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
24006f66:	4770      	bx	lr

24006f68 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
24006f68:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
24006f6a:	7a0a      	ldrb	r2, [r1, #8]
{
24006f6c:	4603      	mov	r3, r0
  if(pSyncConfig->SyncEnable == ENABLE)
24006f6e:	2a01      	cmp	r2, #1
24006f70:	d02e      	beq.n	24006fd0 <HAL_DMAEx_ConfigMuxSync+0x68>
  uint32_t syncPolarity = 0;
24006f72:	2400      	movs	r4, #0
  uint32_t syncSignalID = 0;
24006f74:	4625      	mov	r5, r4
    syncSignalID = pSyncConfig->SyncSignalID;
    syncPolarity = pSyncConfig->SyncPolarity;
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
24006f76:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
24006f7a:	2a01      	cmp	r2, #1
24006f7c:	b2d0      	uxtb	r0, r2
24006f7e:	d122      	bne.n	24006fc6 <HAL_DMAEx_ConfigMuxSync+0x5e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
24006f80:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
24006f84:	2a01      	cmp	r2, #1
24006f86:	d026      	beq.n	24006fd6 <HAL_DMAEx_ConfigMuxSync+0x6e>
24006f88:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
24006f8c:	f04f 0c00 	mov.w	ip, #0
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
24006f90:	6e18      	ldr	r0, [r3, #96]	; 0x60
24006f92:	6802      	ldr	r2, [r0, #0]
24006f94:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
24006f98:	6002      	str	r2, [r0, #0]
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
24006f9a:	68ca      	ldr	r2, [r1, #12]
24006f9c:	6e1e      	ldr	r6, [r3, #96]	; 0x60
24006f9e:	1e50      	subs	r0, r2, #1
24006fa0:	7a0a      	ldrb	r2, [r1, #8]
24006fa2:	f891 e009 	ldrb.w	lr, [r1, #9]
24006fa6:	0412      	lsls	r2, r2, #16
24006fa8:	6831      	ldr	r1, [r6, #0]
24006faa:	ea42 42c0 	orr.w	r2, r2, r0, lsl #19

    return HAL_OK;
24006fae:	4660      	mov	r0, ip
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
24006fb0:	b2c9      	uxtb	r1, r1
24006fb2:	430a      	orrs	r2, r1
24006fb4:	ea42 224e 	orr.w	r2, r2, lr, lsl #9
24006fb8:	4322      	orrs	r2, r4
24006fba:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
24006fbe:	6032      	str	r2, [r6, #0]
    __HAL_UNLOCK(hdma);
24006fc0:	f883 c034 	strb.w	ip, [r3, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;

    /* Return error status */
    return HAL_ERROR;
  }
}
24006fc4:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24006fc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    return HAL_ERROR;
24006fca:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24006fcc:	655a      	str	r2, [r3, #84]	; 0x54
}
24006fce:	bd70      	pop	{r4, r5, r6, pc}
    syncPolarity = pSyncConfig->SyncPolarity;
24006fd0:	e9d1 5400 	ldrd	r5, r4, [r1]
24006fd4:	e7cf      	b.n	24006f76 <HAL_DMAEx_ConfigMuxSync+0xe>
    __HAL_LOCK(hdma);
24006fd6:	2002      	movs	r0, #2
}
24006fd8:	bd70      	pop	{r4, r5, r6, pc}
24006fda:	bf00      	nop

24006fdc <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
24006fdc:	b510      	push	{r4, lr}
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
24006fde:	e9d0 2319 	ldrd	r2, r3, [r0, #100]	; 0x64
{
24006fe2:	4604      	mov	r4, r0
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
24006fe4:	6812      	ldr	r2, [r2, #0]
24006fe6:	421a      	tst	r2, r3
24006fe8:	d00e      	beq.n	24007008 <HAL_DMAEx_MUX_IRQHandler+0x2c>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24006fea:	6e02      	ldr	r2, [r0, #96]	; 0x60
24006fec:	6813      	ldr	r3, [r2, #0]
24006fee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
24006ff2:	6013      	str	r3, [r2, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24006ff4:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	; 0x64
24006ff8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
24006ffa:	6d43      	ldr	r3, [r0, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
24006ffc:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
24006ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
24007002:	6543      	str	r3, [r0, #84]	; 0x54
    if(hdma->XferErrorCallback != NULL)
24007004:	b102      	cbz	r2, 24007008 <HAL_DMAEx_MUX_IRQHandler+0x2c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
24007006:	4790      	blx	r2
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
24007008:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
2400700a:	b1ab      	cbz	r3, 24007038 <HAL_DMAEx_MUX_IRQHandler+0x5c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
2400700c:	e9d4 121c 	ldrd	r1, r2, [r4, #112]	; 0x70
24007010:	6809      	ldr	r1, [r1, #0]
24007012:	4211      	tst	r1, r2
24007014:	d010      	beq.n	24007038 <HAL_DMAEx_MUX_IRQHandler+0x5c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
24007016:	681a      	ldr	r2, [r3, #0]
24007018:	f422 7280 	bic.w	r2, r2, #256	; 0x100
2400701c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
2400701e:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
24007022:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
24007024:	6d63      	ldr	r3, [r4, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
24007026:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
24007028:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2400702c:	6563      	str	r3, [r4, #84]	; 0x54
      if(hdma->XferErrorCallback != NULL)
2400702e:	b11a      	cbz	r2, 24007038 <HAL_DMAEx_MUX_IRQHandler+0x5c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
24007030:	4620      	mov	r0, r4
      }
    }
  }
}
24007032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        hdma->XferErrorCallback(hdma);
24007036:	4710      	bx	r2
}
24007038:	bd10      	pop	{r4, pc}
2400703a:	bf00      	nop

2400703c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
2400703c:	680b      	ldr	r3, [r1, #0]
2400703e:	2b00      	cmp	r3, #0
24007040:	f000 8119 	beq.w	24007276 <HAL_GPIO_Init+0x23a>
24007044:	f04f 0c00 	mov.w	ip, #0
{
24007048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
2400704c:	4662      	mov	r2, ip
{
2400704e:	b083      	sub	sp, #12
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24007050:	4d94      	ldr	r5, [pc, #592]	; (240072a4 <HAL_GPIO_Init+0x268>)

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
24007052:	4f95      	ldr	r7, [pc, #596]	; (240072a8 <HAL_GPIO_Init+0x26c>)
24007054:	f8df 8268 	ldr.w	r8, [pc, #616]	; 240072c0 <HAL_GPIO_Init+0x284>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
24007058:	f04f 0901 	mov.w	r9, #1
2400705c:	fa09 f902 	lsl.w	r9, r9, r2
    if (iocurrent != 0x00U)
24007060:	ea19 0e03 	ands.w	lr, r9, r3
24007064:	f000 80c1 	beq.w	240071ea <HAL_GPIO_Init+0x1ae>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
24007068:	684b      	ldr	r3, [r1, #4]
2400706a:	f003 0303 	and.w	r3, r3, #3
2400706e:	1e5c      	subs	r4, r3, #1
24007070:	2c01      	cmp	r4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24007072:	f04f 0403 	mov.w	r4, #3
24007076:	fa04 f40c 	lsl.w	r4, r4, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
2400707a:	f240 80c0 	bls.w	240071fe <HAL_GPIO_Init+0x1c2>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
2400707e:	43e4      	mvns	r4, r4
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
24007080:	2b03      	cmp	r3, #3
24007082:	d026      	beq.n	240070d2 <HAL_GPIO_Init+0x96>
      temp = GPIOx->PUPDR;
24007084:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
24007086:	ea03 0904 	and.w	r9, r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
2400708a:	688b      	ldr	r3, [r1, #8]
2400708c:	fa03 f30c 	lsl.w	r3, r3, ip
24007090:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
24007094:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
24007096:	684b      	ldr	r3, [r1, #4]
24007098:	f003 0303 	and.w	r3, r3, #3
2400709c:	2b02      	cmp	r3, #2
2400709e:	d118      	bne.n	240070d2 <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3U];
240070a0:	ea4f 09d2 	mov.w	r9, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
240070a4:	f002 0b07 	and.w	fp, r2, #7
240070a8:	230f      	movs	r3, #15
240070aa:	eb00 0989 	add.w	r9, r0, r9, lsl #2
240070ae:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
240070b2:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
240070b6:	fa03 f30b 	lsl.w	r3, r3, fp
240070ba:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
240070be:	690b      	ldr	r3, [r1, #16]
240070c0:	fa03 f30b 	lsl.w	r3, r3, fp
240070c4:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
240070c8:	f8c9 3020 	str.w	r3, [r9, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
240070cc:	684b      	ldr	r3, [r1, #4]
240070ce:	f003 0303 	and.w	r3, r3, #3
      temp = GPIOx->MODER;
240070d2:	f8d0 9000 	ldr.w	r9, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
240070d6:	fa03 f30c 	lsl.w	r3, r3, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
240070da:	ea09 0404 	and.w	r4, r9, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
240070de:	4323      	orrs	r3, r4
      GPIOx->MODER = temp;
240070e0:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
240070e2:	684b      	ldr	r3, [r1, #4]
240070e4:	f413 3f40 	tst.w	r3, #196608	; 0x30000
240070e8:	d07e      	beq.n	240071e8 <HAL_GPIO_Init+0x1ac>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
240070ea:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
240070ee:	f022 0403 	bic.w	r4, r2, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
240070f2:	f002 0903 	and.w	r9, r2, #3
240070f6:	f04f 0a0f 	mov.w	sl, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
240070fa:	f043 0302 	orr.w	r3, r3, #2
240070fe:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
24007102:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
24007106:	42b8      	cmp	r0, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24007108:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
2400710c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
24007110:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
24007114:	fa0a fa09 	lsl.w	sl, sl, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24007118:	f003 0302 	and.w	r3, r3, #2
2400711c:	9301      	str	r3, [sp, #4]
2400711e:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
24007120:	68a3      	ldr	r3, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
24007122:	ea23 030a 	bic.w	r3, r3, sl
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
24007126:	d02b      	beq.n	24007180 <HAL_GPIO_Init+0x144>
24007128:	4540      	cmp	r0, r8
2400712a:	f000 8088 	beq.w	2400723e <HAL_GPIO_Init+0x202>
2400712e:	4e5f      	ldr	r6, [pc, #380]	; (240072ac <HAL_GPIO_Init+0x270>)
24007130:	42b0      	cmp	r0, r6
24007132:	f000 808b 	beq.w	2400724c <HAL_GPIO_Init+0x210>
24007136:	4e5e      	ldr	r6, [pc, #376]	; (240072b0 <HAL_GPIO_Init+0x274>)
24007138:	42b0      	cmp	r0, r6
2400713a:	d079      	beq.n	24007230 <HAL_GPIO_Init+0x1f4>
2400713c:	4e5d      	ldr	r6, [pc, #372]	; (240072b4 <HAL_GPIO_Init+0x278>)
2400713e:	42b0      	cmp	r0, r6
24007140:	f000 8092 	beq.w	24007268 <HAL_GPIO_Init+0x22c>
24007144:	4e5c      	ldr	r6, [pc, #368]	; (240072b8 <HAL_GPIO_Init+0x27c>)
24007146:	42b0      	cmp	r0, r6
24007148:	f000 8096 	beq.w	24007278 <HAL_GPIO_Init+0x23c>
2400714c:	4e5b      	ldr	r6, [pc, #364]	; (240072bc <HAL_GPIO_Init+0x280>)
2400714e:	42b0      	cmp	r0, r6
24007150:	f000 8083 	beq.w	2400725a <HAL_GPIO_Init+0x21e>
24007154:	f8df a16c 	ldr.w	sl, [pc, #364]	; 240072c4 <HAL_GPIO_Init+0x288>
24007158:	4550      	cmp	r0, sl
2400715a:	f000 8094 	beq.w	24007286 <HAL_GPIO_Init+0x24a>
2400715e:	f8df a168 	ldr.w	sl, [pc, #360]	; 240072c8 <HAL_GPIO_Init+0x28c>
24007162:	4550      	cmp	r0, sl
24007164:	f000 8096 	beq.w	24007294 <HAL_GPIO_Init+0x258>
24007168:	f8df a160 	ldr.w	sl, [pc, #352]	; 240072cc <HAL_GPIO_Init+0x290>
2400716c:	4550      	cmp	r0, sl
2400716e:	bf0c      	ite	eq
24007170:	f04f 0a09 	moveq.w	sl, #9
24007174:	f04f 0a0a 	movne.w	sl, #10
24007178:	fa0a f909 	lsl.w	r9, sl, r9
2400717c:	ea43 0309 	orr.w	r3, r3, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
24007180:	60a3      	str	r3, [r4, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
24007182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
24007186:	684e      	ldr	r6, [r1, #4]
        temp &= ~(iocurrent);
24007188:	ea6f 040e 	mvn.w	r4, lr
        temp = EXTI->RTSR1;
2400718c:	681b      	ldr	r3, [r3, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
2400718e:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
24007192:	02f6      	lsls	r6, r6, #11
        temp &= ~(iocurrent);
24007194:	bf54      	ite	pl
24007196:	4023      	andpl	r3, r4
          temp |= iocurrent;
24007198:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->RTSR1 = temp;
2400719c:	f8c9 3000 	str.w	r3, [r9]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
240071a0:	684e      	ldr	r6, [r1, #4]
        temp = EXTI->FTSR1;
240071a2:	f8d9 3004 	ldr.w	r3, [r9, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
240071a6:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
240071aa:	02b6      	lsls	r6, r6, #10
        temp &= ~(iocurrent);
240071ac:	bf54      	ite	pl
240071ae:	4023      	andpl	r3, r4
          temp |= iocurrent;
240071b0:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->FTSR1 = temp;
240071b4:	f8c9 3004 	str.w	r3, [r9, #4]

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
240071b8:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->EMR1;
240071ba:	f8d9 3084 	ldr.w	r3, [r9, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
240071be:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
240071c2:	03b6      	lsls	r6, r6, #14
        temp &= ~(iocurrent);
240071c4:	bf54      	ite	pl
240071c6:	4023      	andpl	r3, r4
          temp |= iocurrent;
240071c8:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI_CurrentCPU->EMR1 = temp;
240071cc:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
240071d0:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->IMR1;
240071d2:	f8d9 3080 	ldr.w	r3, [r9, #128]	; 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
240071d6:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
240071d8:	bf54      	ite	pl
240071da:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
240071dc:	ea4e 0303 	orrmi.w	r3, lr, r3
        }
        EXTI_CurrentCPU->IMR1 = temp;
240071e0:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
240071e4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  while (((GPIO_Init->Pin) >> position) != 0x00U)
240071e8:	680b      	ldr	r3, [r1, #0]
      }
    }

    position++;
240071ea:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
240071ec:	f10c 0c02 	add.w	ip, ip, #2
240071f0:	fa33 f402 	lsrs.w	r4, r3, r2
240071f4:	f47f af30 	bne.w	24007058 <HAL_GPIO_Init+0x1c>
  }
}
240071f8:	b003      	add	sp, #12
240071fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
240071fe:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24007200:	ea23 0a04 	bic.w	sl, r3, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
24007204:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24007206:	43e4      	mvns	r4, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
24007208:	fa03 f30c 	lsl.w	r3, r3, ip
2400720c:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
24007210:	6083      	str	r3, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
24007212:	684b      	ldr	r3, [r1, #4]
        temp = GPIOx->OTYPER;
24007214:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
24007218:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
2400721c:	ea2a 0909 	bic.w	r9, sl, r9
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
24007220:	4093      	lsls	r3, r2
24007222:	ea43 0309 	orr.w	r3, r3, r9
        GPIOx->OTYPER = temp;
24007226:	6043      	str	r3, [r0, #4]
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
24007228:	684b      	ldr	r3, [r1, #4]
2400722a:	f003 0303 	and.w	r3, r3, #3
2400722e:	e727      	b.n	24007080 <HAL_GPIO_Init+0x44>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
24007230:	f04f 0a03 	mov.w	sl, #3
24007234:	fa0a f909 	lsl.w	r9, sl, r9
24007238:	ea43 0309 	orr.w	r3, r3, r9
2400723c:	e7a0      	b.n	24007180 <HAL_GPIO_Init+0x144>
2400723e:	f04f 0a01 	mov.w	sl, #1
24007242:	fa0a f909 	lsl.w	r9, sl, r9
24007246:	ea43 0309 	orr.w	r3, r3, r9
2400724a:	e799      	b.n	24007180 <HAL_GPIO_Init+0x144>
2400724c:	f04f 0a02 	mov.w	sl, #2
24007250:	fa0a f909 	lsl.w	r9, sl, r9
24007254:	ea43 0309 	orr.w	r3, r3, r9
24007258:	e792      	b.n	24007180 <HAL_GPIO_Init+0x144>
2400725a:	f04f 0a06 	mov.w	sl, #6
2400725e:	fa0a f909 	lsl.w	r9, sl, r9
24007262:	ea43 0309 	orr.w	r3, r3, r9
24007266:	e78b      	b.n	24007180 <HAL_GPIO_Init+0x144>
24007268:	f04f 0a04 	mov.w	sl, #4
2400726c:	fa0a f909 	lsl.w	r9, sl, r9
24007270:	ea43 0309 	orr.w	r3, r3, r9
24007274:	e784      	b.n	24007180 <HAL_GPIO_Init+0x144>
24007276:	4770      	bx	lr
24007278:	f04f 0a05 	mov.w	sl, #5
2400727c:	fa0a f909 	lsl.w	r9, sl, r9
24007280:	ea43 0309 	orr.w	r3, r3, r9
24007284:	e77c      	b.n	24007180 <HAL_GPIO_Init+0x144>
24007286:	f04f 0a07 	mov.w	sl, #7
2400728a:	fa0a f909 	lsl.w	r9, sl, r9
2400728e:	ea43 0309 	orr.w	r3, r3, r9
24007292:	e775      	b.n	24007180 <HAL_GPIO_Init+0x144>
24007294:	f04f 0a08 	mov.w	sl, #8
24007298:	fa0a f909 	lsl.w	r9, sl, r9
2400729c:	ea43 0309 	orr.w	r3, r3, r9
240072a0:	e76e      	b.n	24007180 <HAL_GPIO_Init+0x144>
240072a2:	bf00      	nop
240072a4:	58024400 	.word	0x58024400
240072a8:	58020000 	.word	0x58020000
240072ac:	58020800 	.word	0x58020800
240072b0:	58020c00 	.word	0x58020c00
240072b4:	58021000 	.word	0x58021000
240072b8:	58021400 	.word	0x58021400
240072bc:	58021800 	.word	0x58021800
240072c0:	58020400 	.word	0x58020400
240072c4:	58021c00 	.word	0x58021c00
240072c8:	58022000 	.word	0x58022000
240072cc:	58022400 	.word	0x58022400

240072d0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
240072d0:	6903      	ldr	r3, [r0, #16]
240072d2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
240072d4:	bf14      	ite	ne
240072d6:	2001      	movne	r0, #1
240072d8:	2000      	moveq	r0, #0
240072da:	4770      	bx	lr

240072dc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
240072dc:	b902      	cbnz	r2, 240072e0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
240072de:	0409      	lsls	r1, r1, #16
240072e0:	6181      	str	r1, [r0, #24]
  }
}
240072e2:	4770      	bx	lr

240072e4 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
240072e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240072e8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
240072ec:	4201      	tst	r1, r0
240072ee:	d100      	bne.n	240072f2 <HAL_GPIO_EXTI_IRQHandler+0xe>
240072f0:	4770      	bx	lr
{
240072f2:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
240072f4:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
240072f8:	f7fc fd72 	bl	24003de0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
240072fc:	bd08      	pop	{r3, pc}
240072fe:	bf00      	nop

24007300 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
24007300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24007304:	6803      	ldr	r3, [r0, #0]
{
24007306:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24007308:	699a      	ldr	r2, [r3, #24]
2400730a:	0694      	lsls	r4, r2, #26
2400730c:	d46d      	bmi.n	240073ea <I2C_WaitOnSTOPFlagUntilTimeout+0xea>
2400730e:	4605      	mov	r5, r0
24007310:	460f      	mov	r7, r1
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24007312:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
24007316:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
24007318:	f014 0410 	ands.w	r4, r4, #16
2400731c:	d068      	beq.n	240073f0 <I2C_WaitOnSTOPFlagUntilTimeout+0xf0>
  uint32_t error_code = 0;
2400731e:	2600      	movs	r6, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24007320:	f8c3 901c 	str.w	r9, [r3, #28]
  uint32_t tickstart = Tickstart;
24007324:	4644      	mov	r4, r8

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24007326:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
24007328:	46b2      	mov	sl, r6
2400732a:	1c79      	adds	r1, r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
2400732c:	699a      	ldr	r2, [r3, #24]
2400732e:	d161      	bne.n	240073f4 <I2C_WaitOnSTOPFlagUntilTimeout+0xf4>
24007330:	0690      	lsls	r0, r2, #26
24007332:	f100 8085 	bmi.w	24007440 <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
24007336:	f1ba 0f00 	cmp.w	sl, #0
2400733a:	d105      	bne.n	24007348 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
2400733c:	699c      	ldr	r4, [r3, #24]
2400733e:	06a1      	lsls	r1, r4, #26
24007340:	d5fc      	bpl.n	2400733c <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24007342:	2220      	movs	r2, #32
24007344:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
24007346:	682b      	ldr	r3, [r5, #0]
    error_code |= HAL_I2C_ERROR_AF;
24007348:	f046 0404 	orr.w	r4, r6, #4
    status = HAL_ERROR;
2400734c:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
2400734e:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
24007350:	05d0      	lsls	r0, r2, #23
24007352:	d535      	bpl.n	240073c0 <I2C_WaitOnSTOPFlagUntilTimeout+0xc0>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24007354:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24007358:	0556      	lsls	r6, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
2400735a:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
2400735e:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24007360:	682b      	ldr	r3, [r5, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24007362:	d505      	bpl.n	24007370 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24007364:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
24007368:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
2400736c:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
2400736e:	682b      	ldr	r3, [r5, #0]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
24007370:	0597      	lsls	r7, r2, #22
24007372:	d505      	bpl.n	24007380 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24007374:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
24007378:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
2400737c:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
2400737e:	682b      	ldr	r3, [r5, #0]
24007380:	699a      	ldr	r2, [r3, #24]
24007382:	0790      	lsls	r0, r2, #30
24007384:	d502      	bpl.n	2400738c <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    hi2c->Instance->TXDR = 0x00U;
24007386:	2200      	movs	r2, #0
24007388:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
2400738a:	682b      	ldr	r3, [r5, #0]
2400738c:	699a      	ldr	r2, [r3, #24]
2400738e:	07d1      	lsls	r1, r2, #31
24007390:	d404      	bmi.n	2400739c <I2C_WaitOnSTOPFlagUntilTimeout+0x9c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
24007392:	699a      	ldr	r2, [r3, #24]
24007394:	f042 0201 	orr.w	r2, r2, #1
24007398:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
2400739a:	682b      	ldr	r3, [r5, #0]
2400739c:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
2400739e:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
240073a0:	4835      	ldr	r0, [pc, #212]	; (24007478 <I2C_WaitOnSTOPFlagUntilTimeout+0x178>)
    hi2c->State = HAL_I2C_STATE_READY;
240073a2:	2620      	movs	r6, #32
    I2C_RESET_CR2(hi2c);
240073a4:	4002      	ands	r2, r0
      return HAL_ERROR;
240073a6:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
240073a8:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
240073aa:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
240073ac:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
240073b0:	4323      	orrs	r3, r4
240073b2:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
240073b4:	f885 6041 	strb.w	r6, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
240073b8:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
240073bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
240073c0:	0550      	lsls	r0, r2, #21
240073c2:	d4cf      	bmi.n	24007364 <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
240073c4:	0596      	lsls	r6, r2, #22
240073c6:	d4d5      	bmi.n	24007374 <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
  if (status != HAL_OK)
240073c8:	2900      	cmp	r1, #0
240073ca:	d1d9      	bne.n	24007380 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
240073cc:	f7fd ff5e 	bl	2400528c <HAL_GetTick>
240073d0:	eba0 0008 	sub.w	r0, r0, r8
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
240073d4:	682b      	ldr	r3, [r5, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
240073d6:	42b8      	cmp	r0, r7
240073d8:	d800      	bhi.n	240073dc <I2C_WaitOnSTOPFlagUntilTimeout+0xdc>
240073da:	b91f      	cbnz	r7, 240073e4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe4>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
240073dc:	699a      	ldr	r2, [r3, #24]
240073de:	f012 0220 	ands.w	r2, r2, #32
240073e2:	d032      	beq.n	2400744a <I2C_WaitOnSTOPFlagUntilTimeout+0x14a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
240073e4:	699a      	ldr	r2, [r3, #24]
240073e6:	0692      	lsls	r2, r2, #26
240073e8:	d595      	bpl.n	24007316 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
240073ea:	2000      	movs	r0, #0
}
240073ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
240073f0:	4621      	mov	r1, r4
240073f2:	e7ac      	b.n	2400734e <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
240073f4:	0692      	lsls	r2, r2, #26
240073f6:	d423      	bmi.n	24007440 <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
240073f8:	f1ba 0f00 	cmp.w	sl, #0
240073fc:	d1a4      	bne.n	24007348 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
240073fe:	f7fd ff45 	bl	2400528c <HAL_GetTick>
24007402:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
24007404:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24007406:	4287      	cmp	r7, r0
24007408:	d301      	bcc.n	2400740e <I2C_WaitOnSTOPFlagUntilTimeout+0x10e>
2400740a:	2f00      	cmp	r7, #0
2400740c:	d18d      	bne.n	2400732a <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
2400740e:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
24007410:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
24007414:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
24007416:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
24007418:	0409      	lsls	r1, r1, #16
2400741a:	d503      	bpl.n	24007424 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
              (tmp1 != I2C_CR2_STOP) && \
2400741c:	0441      	lsls	r1, r0, #17
2400741e:	d401      	bmi.n	24007424 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
24007420:	2a20      	cmp	r2, #32
24007422:	d11f      	bne.n	24007464 <I2C_WaitOnSTOPFlagUntilTimeout+0x164>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24007424:	699a      	ldr	r2, [r3, #24]
24007426:	0690      	lsls	r0, r2, #26
24007428:	f53f af7f 	bmi.w	2400732a <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
2400742c:	f7fd ff2e 	bl	2400528c <HAL_GetTick>
24007430:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24007432:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
24007434:	2819      	cmp	r0, #25
24007436:	d9f5      	bls.n	24007424 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
24007438:	2620      	movs	r6, #32
              status = HAL_ERROR;
2400743a:	f04f 0a01 	mov.w	sl, #1
2400743e:	e774      	b.n	2400732a <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
    if (status == HAL_OK)
24007440:	f1ba 0f00 	cmp.w	sl, #0
24007444:	f43f af7d 	beq.w	24007342 <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
24007448:	e77e      	b.n	24007348 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400744a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
2400744c:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
2400744e:	2001      	movs	r0, #1
24007450:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24007454:	430b      	orrs	r3, r1
24007456:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24007458:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
2400745c:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
24007460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
24007464:	685a      	ldr	r2, [r3, #4]
24007466:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400746a:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
2400746c:	f7fd ff0e 	bl	2400528c <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24007470:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
24007472:	4604      	mov	r4, r0
24007474:	e7d6      	b.n	24007424 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
24007476:	bf00      	nop
24007478:	fe00e800 	.word	0xfe00e800

2400747c <HAL_I2C_Init>:
  if (hi2c == NULL)
2400747c:	2800      	cmp	r0, #0
2400747e:	d056      	beq.n	2400752e <HAL_I2C_Init+0xb2>
{
24007480:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
24007482:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24007486:	4604      	mov	r4, r0
24007488:	f003 02ff 	and.w	r2, r3, #255	; 0xff
2400748c:	2b00      	cmp	r3, #0
2400748e:	d049      	beq.n	24007524 <HAL_I2C_Init+0xa8>
  __HAL_I2C_DISABLE(hi2c);
24007490:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
24007492:	2324      	movs	r3, #36	; 0x24
24007494:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
24007498:	6813      	ldr	r3, [r2, #0]
2400749a:	f023 0301 	bic.w	r3, r3, #1
2400749e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
240074a0:	e9d4 2300 	ldrd	r2, r3, [r4]
240074a4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
240074a8:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
240074aa:	6822      	ldr	r2, [r4, #0]
240074ac:	6893      	ldr	r3, [r2, #8]
240074ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
240074b2:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
240074b4:	68e3      	ldr	r3, [r4, #12]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
240074b6:	6822      	ldr	r2, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
240074b8:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
240074ba:	68a3      	ldr	r3, [r4, #8]
240074bc:	bf0c      	ite	eq
240074be:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
240074c2:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
240074c6:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
240074c8:	68e3      	ldr	r3, [r4, #12]
240074ca:	2b02      	cmp	r3, #2
240074cc:	d103      	bne.n	240074d6 <HAL_I2C_Init+0x5a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
240074ce:	6823      	ldr	r3, [r4, #0]
240074d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
240074d4:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
240074d6:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_READY;
240074d8:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
240074dc:	4b15      	ldr	r3, [pc, #84]	; (24007534 <HAL_I2C_Init+0xb8>)
240074de:	6851      	ldr	r1, [r2, #4]
240074e0:	430b      	orrs	r3, r1
240074e2:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
240074e4:	6822      	ldr	r2, [r4, #0]
240074e6:	68d3      	ldr	r3, [r2, #12]
240074e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
240074ec:	60d3      	str	r3, [r2, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
240074ee:	69a0      	ldr	r0, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
240074f0:	6821      	ldr	r1, [r4, #0]
240074f2:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
240074f6:	4313      	orrs	r3, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
240074f8:	2200      	movs	r2, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
240074fa:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
240074fe:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
24007500:	6821      	ldr	r1, [r4, #0]
24007502:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
24007506:	4303      	orrs	r3, r0
  return HAL_OK;
24007508:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
2400750a:	600b      	str	r3, [r1, #0]
  __HAL_I2C_ENABLE(hi2c);
2400750c:	6821      	ldr	r1, [r4, #0]
2400750e:	680b      	ldr	r3, [r1, #0]
24007510:	f043 0301 	orr.w	r3, r3, #1
24007514:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
24007516:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
24007518:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
2400751c:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
2400751e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
24007522:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
24007524:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
24007528:	f7fa fc8c 	bl	24001e44 <HAL_I2C_MspInit>
2400752c:	e7b0      	b.n	24007490 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
2400752e:	2001      	movs	r0, #1
}
24007530:	4770      	bx	lr
24007532:	bf00      	nop
24007534:	02008000 	.word	0x02008000

24007538 <HAL_I2C_Master_Transmit>:
{
24007538:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400753c:	461c      	mov	r4, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
2400753e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
24007542:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
24007544:	2b20      	cmp	r3, #32
24007546:	d12c      	bne.n	240075a2 <HAL_I2C_Master_Transmit+0x6a>
    __HAL_LOCK(hi2c);
24007548:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
2400754c:	4683      	mov	fp, r0
2400754e:	2b01      	cmp	r3, #1
24007550:	d027      	beq.n	240075a2 <HAL_I2C_Master_Transmit+0x6a>
24007552:	2301      	movs	r3, #1
24007554:	468a      	mov	sl, r1
24007556:	4616      	mov	r6, r2
24007558:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
2400755c:	f7fd fe96 	bl	2400528c <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
24007560:	f8db 3000 	ldr.w	r3, [fp]
    tickstart = HAL_GetTick();
24007564:	4680      	mov	r8, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
24007566:	699a      	ldr	r2, [r3, #24]
24007568:	0417      	lsls	r7, r2, #16
2400756a:	d51d      	bpl.n	240075a8 <HAL_I2C_Master_Transmit+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2400756c:	f7fd fe8e 	bl	2400528c <HAL_GetTick>
24007570:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
24007574:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24007578:	2819      	cmp	r0, #25
2400757a:	d9f4      	bls.n	24007566 <HAL_I2C_Master_Transmit+0x2e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
2400757c:	699a      	ldr	r2, [r3, #24]
2400757e:	0410      	lsls	r0, r2, #16
24007580:	d5f1      	bpl.n	24007566 <HAL_I2C_Master_Transmit+0x2e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24007582:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24007586:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
24007588:	2200      	movs	r2, #0
      return HAL_ERROR;
2400758a:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400758c:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
2400758e:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24007592:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24007596:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
2400759a:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
}
2400759e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
240075a2:	2002      	movs	r0, #2
}
240075a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
240075a8:	2121      	movs	r1, #33	; 0x21
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
240075aa:	2200      	movs	r2, #0
    hi2c->pBuffPtr  = pData;
240075ac:	f8cb 6024 	str.w	r6, [fp, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
240075b0:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
240075b4:	2110      	movs	r1, #16
    hi2c->XferISR   = NULL;
240075b6:	f8cb 2034 	str.w	r2, [fp, #52]	; 0x34
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
240075ba:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
240075be:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
    hi2c->XferCount = Size;
240075c2:	f8ab 402a 	strh.w	r4, [fp, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
240075c6:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
240075ca:	b292      	uxth	r2, r2
240075cc:	2aff      	cmp	r2, #255	; 0xff
240075ce:	d87e      	bhi.n	240076ce <HAL_I2C_Master_Transmit+0x196>
      hi2c->XferSize = hi2c->XferCount;
240075d0:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
240075d4:	49ad      	ldr	r1, [pc, #692]	; (2400788c <HAL_I2C_Master_Transmit+0x354>)
      hi2c->XferSize = hi2c->XferCount;
240075d6:	b292      	uxth	r2, r2
240075d8:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
240075dc:	b2d2      	uxtb	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
240075de:	6858      	ldr	r0, [r3, #4]
240075e0:	4008      	ands	r0, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
240075e2:	f3ca 0109 	ubfx	r1, sl, #0, #10
240075e6:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
240075ea:	4301      	orrs	r1, r0
240075ec:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
240075f0:	49a7      	ldr	r1, [pc, #668]	; (24007890 <HAL_I2C_Master_Transmit+0x358>)
240075f2:	4311      	orrs	r1, r2
240075f4:	6059      	str	r1, [r3, #4]
              error_code |= HAL_I2C_ERROR_TIMEOUT;
240075f6:	f04f 0920 	mov.w	r9, #32
    while (hi2c->XferCount > 0U)
240075fa:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
240075fe:	b29b      	uxth	r3, r3
24007600:	2b00      	cmp	r3, #0
24007602:	f000 8107 	beq.w	24007814 <HAL_I2C_Master_Transmit+0x2dc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
24007606:	f8db 3000 	ldr.w	r3, [fp]
2400760a:	699c      	ldr	r4, [r3, #24]
2400760c:	f014 0402 	ands.w	r4, r4, #2
24007610:	f040 80c5 	bne.w	2400779e <HAL_I2C_Master_Transmit+0x266>
  uint32_t itflag   = hi2c->Instance->ISR;
24007614:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
24007616:	f012 0210 	ands.w	r2, r2, #16
2400761a:	f000 808d 	beq.w	24007738 <HAL_I2C_Master_Transmit+0x200>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400761e:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
24007620:	4646      	mov	r6, r8
  HAL_StatusTypeDef status = HAL_OK;
24007622:	4627      	mov	r7, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24007624:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24007626:	f8db 3000 	ldr.w	r3, [fp]
2400762a:	1c69      	adds	r1, r5, #1
2400762c:	699a      	ldr	r2, [r3, #24]
2400762e:	f040 8085 	bne.w	2400773c <HAL_I2C_Master_Transmit+0x204>
24007632:	0690      	lsls	r0, r2, #26
24007634:	f100 8106 	bmi.w	24007844 <HAL_I2C_Master_Transmit+0x30c>
24007638:	b937      	cbnz	r7, 24007648 <HAL_I2C_Master_Transmit+0x110>
2400763a:	699a      	ldr	r2, [r3, #24]
2400763c:	0691      	lsls	r1, r2, #26
2400763e:	d5fc      	bpl.n	2400763a <HAL_I2C_Master_Transmit+0x102>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24007640:	f8c3 901c 	str.w	r9, [r3, #28]
  itflag = hi2c->Instance->ISR;
24007644:	f8db 3000 	ldr.w	r3, [fp]
    error_code |= HAL_I2C_ERROR_AF;
24007648:	f044 0204 	orr.w	r2, r4, #4
    status = HAL_ERROR;
2400764c:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
2400764e:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
24007650:	05ce      	lsls	r6, r1, #23
24007652:	d54b      	bpl.n	240076ec <HAL_I2C_Master_Transmit+0x1b4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24007654:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24007658:	054d      	lsls	r5, r1, #21
    error_code |= HAL_I2C_ERROR_BERR;
2400765a:	f042 0201 	orr.w	r2, r2, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
2400765e:	61d8      	str	r0, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24007660:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24007664:	d506      	bpl.n	24007674 <HAL_I2C_Master_Transmit+0x13c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24007666:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
2400766a:	f042 0208 	orr.w	r2, r2, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
2400766e:	61d8      	str	r0, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24007670:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
24007674:	0589      	lsls	r1, r1, #22
24007676:	d506      	bpl.n	24007686 <HAL_I2C_Master_Transmit+0x14e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24007678:	f44f 7100 	mov.w	r1, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
2400767c:	f042 0202 	orr.w	r2, r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24007680:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24007682:	f8db 3000 	ldr.w	r3, [fp]
24007686:	6999      	ldr	r1, [r3, #24]
24007688:	078e      	lsls	r6, r1, #30
2400768a:	d503      	bpl.n	24007694 <HAL_I2C_Master_Transmit+0x15c>
    hi2c->Instance->TXDR = 0x00U;
2400768c:	2100      	movs	r1, #0
2400768e:	6299      	str	r1, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
24007690:	f8db 3000 	ldr.w	r3, [fp]
24007694:	6999      	ldr	r1, [r3, #24]
24007696:	07cd      	lsls	r5, r1, #31
24007698:	d405      	bmi.n	240076a6 <HAL_I2C_Master_Transmit+0x16e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
2400769a:	6999      	ldr	r1, [r3, #24]
2400769c:	f041 0101 	orr.w	r1, r1, #1
240076a0:	6199      	str	r1, [r3, #24]
    I2C_RESET_CR2(hi2c);
240076a2:	f8db 3000 	ldr.w	r3, [fp]
240076a6:	6859      	ldr	r1, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
240076a8:	2400      	movs	r4, #0
    I2C_RESET_CR2(hi2c);
240076aa:	487a      	ldr	r0, [pc, #488]	; (24007894 <HAL_I2C_Master_Transmit+0x35c>)
    hi2c->State = HAL_I2C_STATE_READY;
240076ac:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
240076ae:	4001      	ands	r1, r0
        return HAL_ERROR;
240076b0:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
240076b2:	6059      	str	r1, [r3, #4]
    hi2c->ErrorCode |= error_code;
240076b4:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
240076b8:	f88b 4040 	strb.w	r4, [fp, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
240076bc:	4313      	orrs	r3, r2
240076be:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
240076c2:	f88b 5041 	strb.w	r5, [fp, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
240076c6:	f88b 4042 	strb.w	r4, [fp, #66]	; 0x42
}
240076ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
240076ce:	22ff      	movs	r2, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
240076d0:	496e      	ldr	r1, [pc, #440]	; (2400788c <HAL_I2C_Master_Transmit+0x354>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
240076d2:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
240076d6:	685a      	ldr	r2, [r3, #4]
240076d8:	400a      	ands	r2, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
240076da:	f3ca 0109 	ubfx	r1, sl, #0, #10
240076de:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
240076e2:	4311      	orrs	r1, r2
240076e4:	4a6c      	ldr	r2, [pc, #432]	; (24007898 <HAL_I2C_Master_Transmit+0x360>)
240076e6:	430a      	orrs	r2, r1
240076e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
240076ea:	e784      	b.n	240075f6 <HAL_I2C_Master_Transmit+0xbe>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
240076ec:	054c      	lsls	r4, r1, #21
240076ee:	d4ba      	bmi.n	24007666 <HAL_I2C_Master_Transmit+0x12e>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
240076f0:	058f      	lsls	r7, r1, #22
240076f2:	d4c1      	bmi.n	24007678 <HAL_I2C_Master_Transmit+0x140>
  if (status != HAL_OK)
240076f4:	2800      	cmp	r0, #0
240076f6:	d1c6      	bne.n	24007686 <HAL_I2C_Master_Transmit+0x14e>
    if (Timeout != HAL_MAX_DELAY)
240076f8:	1c6c      	adds	r4, r5, #1
240076fa:	d086      	beq.n	2400760a <HAL_I2C_Master_Transmit+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
240076fc:	f7fd fdc6 	bl	2400528c <HAL_GetTick>
24007700:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
24007704:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24007708:	4285      	cmp	r5, r0
2400770a:	d302      	bcc.n	24007712 <HAL_I2C_Master_Transmit+0x1da>
2400770c:	2d00      	cmp	r5, #0
2400770e:	f47f af7c 	bne.w	2400760a <HAL_I2C_Master_Transmit+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
24007712:	699a      	ldr	r2, [r3, #24]
24007714:	f012 0202 	ands.w	r2, r2, #2
24007718:	f47f af77 	bne.w	2400760a <HAL_I2C_Master_Transmit+0xd2>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400771c:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24007720:	2120      	movs	r1, #32
        return HAL_ERROR;
24007722:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
24007724:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24007728:	430b      	orrs	r3, r1
2400772a:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
2400772e:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
24007732:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
          return HAL_ERROR;
24007736:	e735      	b.n	240075a4 <HAL_I2C_Master_Transmit+0x6c>
  HAL_StatusTypeDef status = HAL_OK;
24007738:	4610      	mov	r0, r2
2400773a:	e788      	b.n	2400764e <HAL_I2C_Master_Transmit+0x116>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
2400773c:	0692      	lsls	r2, r2, #26
2400773e:	f100 8081 	bmi.w	24007844 <HAL_I2C_Master_Transmit+0x30c>
24007742:	2f00      	cmp	r7, #0
24007744:	d180      	bne.n	24007648 <HAL_I2C_Master_Transmit+0x110>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24007746:	f7fd fda1 	bl	2400528c <HAL_GetTick>
2400774a:	1b80      	subs	r0, r0, r6
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
2400774c:	f8db 3000 	ldr.w	r3, [fp]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24007750:	4285      	cmp	r5, r0
24007752:	d302      	bcc.n	2400775a <HAL_I2C_Master_Transmit+0x222>
24007754:	2d00      	cmp	r5, #0
24007756:	f47f af68 	bne.w	2400762a <HAL_I2C_Master_Transmit+0xf2>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
2400775a:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
2400775c:	f89b 2042 	ldrb.w	r2, [fp, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
24007760:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
24007762:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
24007764:	0409      	lsls	r1, r1, #16
24007766:	d50c      	bpl.n	24007782 <HAL_I2C_Master_Transmit+0x24a>
              (tmp1 != I2C_CR2_STOP) && \
24007768:	0441      	lsls	r1, r0, #17
2400776a:	d40a      	bmi.n	24007782 <HAL_I2C_Master_Transmit+0x24a>
2400776c:	2a20      	cmp	r2, #32
2400776e:	d008      	beq.n	24007782 <HAL_I2C_Master_Transmit+0x24a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
24007770:	685a      	ldr	r2, [r3, #4]
24007772:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
24007776:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
24007778:	f7fd fd88 	bl	2400528c <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
2400777c:	f8db 3000 	ldr.w	r3, [fp]
            tickstart = HAL_GetTick();
24007780:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24007782:	699a      	ldr	r2, [r3, #24]
24007784:	0690      	lsls	r0, r2, #26
24007786:	f53f af50 	bmi.w	2400762a <HAL_I2C_Master_Transmit+0xf2>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
2400778a:	f7fd fd7f 	bl	2400528c <HAL_GetTick>
2400778e:	1b80      	subs	r0, r0, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24007790:	f8db 3000 	ldr.w	r3, [fp]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
24007794:	2819      	cmp	r0, #25
24007796:	d9f4      	bls.n	24007782 <HAL_I2C_Master_Transmit+0x24a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
24007798:	2420      	movs	r4, #32
              status = HAL_ERROR;
2400779a:	2701      	movs	r7, #1
2400779c:	e745      	b.n	2400762a <HAL_I2C_Master_Transmit+0xf2>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400779e:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
240077a2:	7812      	ldrb	r2, [r2, #0]
240077a4:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
240077a6:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
240077aa:	f8bb 3028 	ldrh.w	r3, [fp, #40]	; 0x28
      hi2c->XferCount--;
240077ae:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
240077b0:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
      hi2c->XferSize--;
240077b4:	3b01      	subs	r3, #1
      hi2c->XferCount--;
240077b6:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
240077b8:	3101      	adds	r1, #1
      hi2c->XferSize--;
240077ba:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
240077bc:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
240077c0:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->pBuffPtr++;
240077c4:	f8cb 1024 	str.w	r1, [fp, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
240077c8:	b292      	uxth	r2, r2
      hi2c->XferSize--;
240077ca:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
240077ce:	2b00      	cmp	r3, #0
240077d0:	f47f af13 	bne.w	240075fa <HAL_I2C_Master_Transmit+0xc2>
240077d4:	2a00      	cmp	r2, #0
240077d6:	f43f af10 	beq.w	240075fa <HAL_I2C_Master_Transmit+0xc2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
240077da:	f8db 2000 	ldr.w	r2, [fp]
240077de:	1c68      	adds	r0, r5, #1
240077e0:	d134      	bne.n	2400784c <HAL_I2C_Master_Transmit+0x314>
240077e2:	6993      	ldr	r3, [r2, #24]
240077e4:	0619      	lsls	r1, r3, #24
240077e6:	d5fc      	bpl.n	240077e2 <HAL_I2C_Master_Transmit+0x2aa>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
240077e8:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
240077ec:	b29b      	uxth	r3, r3
240077ee:	2bff      	cmp	r3, #255	; 0xff
240077f0:	d958      	bls.n	240078a4 <HAL_I2C_Master_Transmit+0x36c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
240077f2:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
240077f4:	4929      	ldr	r1, [pc, #164]	; (2400789c <HAL_I2C_Master_Transmit+0x364>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
240077f6:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
240077fa:	6853      	ldr	r3, [r2, #4]
240077fc:	400b      	ands	r3, r1
240077fe:	4928      	ldr	r1, [pc, #160]	; (240078a0 <HAL_I2C_Master_Transmit+0x368>)
24007800:	ea4a 0303 	orr.w	r3, sl, r3
24007804:	4319      	orrs	r1, r3
24007806:	6051      	str	r1, [r2, #4]
    while (hi2c->XferCount > 0U)
24007808:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
2400780c:	b29b      	uxth	r3, r3
2400780e:	2b00      	cmp	r3, #0
24007810:	f47f aef9 	bne.w	24007606 <HAL_I2C_Master_Transmit+0xce>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
24007814:	4642      	mov	r2, r8
24007816:	4629      	mov	r1, r5
24007818:	4658      	mov	r0, fp
2400781a:	f7ff fd71 	bl	24007300 <I2C_WaitOnSTOPFlagUntilTimeout>
2400781e:	2800      	cmp	r0, #0
24007820:	d151      	bne.n	240078c6 <HAL_I2C_Master_Transmit+0x38e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24007822:	f8db 3000 	ldr.w	r3, [fp]
24007826:	2220      	movs	r2, #32
    I2C_RESET_CR2(hi2c);
24007828:	4c1a      	ldr	r4, [pc, #104]	; (24007894 <HAL_I2C_Master_Transmit+0x35c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400782a:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
2400782c:	f8db 1000 	ldr.w	r1, [fp]
24007830:	684b      	ldr	r3, [r1, #4]
24007832:	4023      	ands	r3, r4
24007834:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
24007836:	f88b 2041 	strb.w	r2, [fp, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
2400783a:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2400783e:	f88b 0042 	strb.w	r0, [fp, #66]	; 0x42
    return HAL_OK;
24007842:	e6af      	b.n	240075a4 <HAL_I2C_Master_Transmit+0x6c>
    if (status == HAL_OK)
24007844:	2f00      	cmp	r7, #0
24007846:	f43f aefb 	beq.w	24007640 <HAL_I2C_Master_Transmit+0x108>
2400784a:	e6fd      	b.n	24007648 <HAL_I2C_Master_Transmit+0x110>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
2400784c:	6993      	ldr	r3, [r2, #24]
2400784e:	061b      	lsls	r3, r3, #24
24007850:	d4ca      	bmi.n	240077e8 <HAL_I2C_Master_Transmit+0x2b0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24007852:	f7fd fd1b 	bl	2400528c <HAL_GetTick>
24007856:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
2400785a:	f8db 2000 	ldr.w	r2, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2400785e:	4285      	cmp	r5, r0
24007860:	d301      	bcc.n	24007866 <HAL_I2C_Master_Transmit+0x32e>
24007862:	2d00      	cmp	r5, #0
24007864:	d1bb      	bne.n	240077de <HAL_I2C_Master_Transmit+0x2a6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
24007866:	6993      	ldr	r3, [r2, #24]
24007868:	f013 0380 	ands.w	r3, r3, #128	; 0x80
2400786c:	d1b7      	bne.n	240077de <HAL_I2C_Master_Transmit+0x2a6>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400786e:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24007872:	2120      	movs	r1, #32
          return HAL_ERROR;
24007874:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
24007876:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400787a:	430a      	orrs	r2, r1
2400787c:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24007880:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
24007884:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
          return HAL_ERROR;
24007888:	e68c      	b.n	240075a4 <HAL_I2C_Master_Transmit+0x6c>
2400788a:	bf00      	nop
2400788c:	fc009800 	.word	0xfc009800
24007890:	02002000 	.word	0x02002000
24007894:	fe00e800 	.word	0xfe00e800
24007898:	01ff2000 	.word	0x01ff2000
2400789c:	fc009c00 	.word	0xfc009c00
240078a0:	01ff0000 	.word	0x01ff0000
          hi2c->XferSize = hi2c->XferCount;
240078a4:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
240078a8:	4808      	ldr	r0, [pc, #32]	; (240078cc <HAL_I2C_Master_Transmit+0x394>)
          hi2c->XferSize = hi2c->XferCount;
240078aa:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
240078ac:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
240078ae:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
240078b2:	6853      	ldr	r3, [r2, #4]
240078b4:	4003      	ands	r3, r0
240078b6:	ea4a 0303 	orr.w	r3, sl, r3
240078ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
240078be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
240078c2:	6053      	str	r3, [r2, #4]
}
240078c4:	e699      	b.n	240075fa <HAL_I2C_Master_Transmit+0xc2>
      return HAL_ERROR;
240078c6:	2001      	movs	r0, #1
240078c8:	e66c      	b.n	240075a4 <HAL_I2C_Master_Transmit+0x6c>
240078ca:	bf00      	nop
240078cc:	fc009c00 	.word	0xfc009c00

240078d0 <HAL_I2C_Slave_Receive_IT>:
  if (hi2c->State == HAL_I2C_STATE_READY)
240078d0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
240078d4:	2b20      	cmp	r3, #32
240078d6:	d126      	bne.n	24007926 <HAL_I2C_Slave_Receive_IT+0x56>
{
240078d8:	b4f0      	push	{r4, r5, r6, r7}
240078da:	b2dc      	uxtb	r4, r3
    __HAL_LOCK(hi2c);
240078dc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
240078e0:	2b01      	cmp	r3, #1
240078e2:	d022      	beq.n	2400792a <HAL_I2C_Slave_Receive_IT+0x5a>
240078e4:	2301      	movs	r3, #1
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
240078e6:	6805      	ldr	r5, [r0, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
240078e8:	4e11      	ldr	r6, [pc, #68]	; (24007930 <HAL_I2C_Slave_Receive_IT+0x60>)
    __HAL_LOCK(hi2c);
240078ea:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
240078ee:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR     = I2C_Slave_ISR_IT;
240078f0:	4f10      	ldr	r7, [pc, #64]	; (24007934 <HAL_I2C_Slave_Receive_IT+0x64>)
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
240078f2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
240078f6:	2300      	movs	r3, #0
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
240078f8:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
240078fc:	6443      	str	r3, [r0, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
240078fe:	686c      	ldr	r4, [r5, #4]
24007900:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
24007904:	606c      	str	r4, [r5, #4]
    hi2c->XferCount   = Size;
24007906:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
24007908:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
2400790a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
2400790c:	6801      	ldr	r1, [r0, #0]
    hi2c->XferISR     = I2C_Slave_ISR_IT;
2400790e:	6347      	str	r7, [r0, #52]	; 0x34
    hi2c->XferSize    = hi2c->XferCount;
24007910:	8502      	strh	r2, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24007912:	62c6      	str	r6, [r0, #44]	; 0x2c
    __HAL_UNLOCK(hi2c);
24007914:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
24007918:	4618      	mov	r0, r3
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
2400791a:	680a      	ldr	r2, [r1, #0]
2400791c:	f042 02fc 	orr.w	r2, r2, #252	; 0xfc
24007920:	600a      	str	r2, [r1, #0]
}
24007922:	bcf0      	pop	{r4, r5, r6, r7}
24007924:	4770      	bx	lr
    return HAL_BUSY;
24007926:	2002      	movs	r0, #2
}
24007928:	4770      	bx	lr
    return HAL_BUSY;
2400792a:	2002      	movs	r0, #2
}
2400792c:	bcf0      	pop	{r4, r5, r6, r7}
2400792e:	4770      	bx	lr
24007930:	ffff0000 	.word	0xffff0000
24007934:	24007e21 	.word	0x24007e21

24007938 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
24007938:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
2400793a:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
2400793c:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
2400793e:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
24007940:	b103      	cbz	r3, 24007944 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
24007942:	4718      	bx	r3
}
24007944:	4770      	bx	lr
24007946:	bf00      	nop

24007948 <HAL_I2C_SlaveTxCpltCallback>:
24007948:	4770      	bx	lr
2400794a:	bf00      	nop

2400794c <I2C_ITSlaveSeqCplt>:
{
2400794c:	b508      	push	{r3, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
2400794e:	6803      	ldr	r3, [r0, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
24007950:	2100      	movs	r1, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
24007952:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
24007954:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
24007958:	0451      	lsls	r1, r2, #17
2400795a:	d526      	bpl.n	240079aa <I2C_ITSlaveSeqCplt+0x5e>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400795c:	681a      	ldr	r2, [r3, #0]
2400795e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
24007962:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
24007964:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24007968:	2b29      	cmp	r3, #41	; 0x29
2400796a:	d028      	beq.n	240079be <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
2400796c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24007970:	2b2a      	cmp	r3, #42	; 0x2a
24007972:	d000      	beq.n	24007976 <I2C_ITSlaveSeqCplt+0x2a>
}
24007974:	bd08      	pop	{r3, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24007976:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
24007978:	2322      	movs	r3, #34	; 0x22
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2400797a:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
2400797c:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24007980:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
24007984:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24007986:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2400798a:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2400798c:	f002 0228 	and.w	r2, r2, #40	; 0x28
24007990:	2a28      	cmp	r2, #40	; 0x28
24007992:	bf0c      	ite	eq
24007994:	f06f 0244 	mvneq.w	r2, #68	; 0x44
24007998:	f06f 02f4 	mvnne.w	r2, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2400799c:	4013      	ands	r3, r2
2400799e:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
240079a0:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
240079a4:	f020 fb48 	bl	24028038 <__HAL_I2C_SlaveRxCpltCallback_veneer>
}
240079a8:	bd08      	pop	{r3, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
240079aa:	0412      	lsls	r2, r2, #16
240079ac:	d5da      	bpl.n	24007964 <I2C_ITSlaveSeqCplt+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
240079ae:	681a      	ldr	r2, [r3, #0]
240079b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
240079b4:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
240079b6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
240079ba:	2b29      	cmp	r3, #41	; 0x29
240079bc:	d1d6      	bne.n	2400796c <I2C_ITSlaveSeqCplt+0x20>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
240079be:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
240079c0:	2321      	movs	r3, #33	; 0x21
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240079c2:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
240079c4:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
240079c8:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
240079cc:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240079ce:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240079d2:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240079d4:	f002 0228 	and.w	r2, r2, #40	; 0x28
240079d8:	2a28      	cmp	r2, #40	; 0x28
240079da:	bf0c      	ite	eq
240079dc:	f06f 0242 	mvneq.w	r2, #66	; 0x42
240079e0:	f06f 02f2 	mvnne.w	r2, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240079e4:	4013      	ands	r3, r2
240079e6:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
240079e8:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
240079ec:	f7ff ffac 	bl	24007948 <HAL_I2C_SlaveTxCpltCallback>
}
240079f0:	bd08      	pop	{r3, pc}
240079f2:	bf00      	nop

240079f4 <HAL_I2C_AddrCallback>:
}
240079f4:	4770      	bx	lr
240079f6:	bf00      	nop

240079f8 <I2C_ITAddrCplt.part.0>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
240079f8:	b570      	push	{r4, r5, r6, lr}
    transferdirection = I2C_GET_DIR(hi2c);
240079fa:	6804      	ldr	r4, [r0, #0]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
240079fc:	4684      	mov	ip, r0
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
240079fe:	68c3      	ldr	r3, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
24007a00:	69a1      	ldr	r1, [r4, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
24007a02:	69a2      	ldr	r2, [r4, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
24007a04:	2b02      	cmp	r3, #2
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
24007a06:	68a5      	ldr	r5, [r4, #8]
    transferdirection = I2C_GET_DIR(hi2c);
24007a08:	f3c1 4100 	ubfx	r1, r1, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
24007a0c:	ea4f 4212 	mov.w	r2, r2, lsr #16
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
24007a10:	68e6      	ldr	r6, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
24007a12:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
24007a16:	d10f      	bne.n	24007a38 <I2C_ITAddrCplt.part.0+0x40>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
24007a18:	ea82 13d5 	eor.w	r3, r2, r5, lsr #7
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
24007a1c:	f3c5 0209 	ubfx	r2, r5, #0, #10
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
24007a20:	f013 0306 	ands.w	r3, r3, #6
24007a24:	d106      	bne.n	24007a34 <I2C_ITAddrCplt.part.0+0x3c>
        hi2c->AddrEventCount++;
24007a26:	6c85      	ldr	r5, [r0, #72]	; 0x48
24007a28:	3501      	adds	r5, #1
24007a2a:	6485      	str	r5, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
24007a2c:	6c85      	ldr	r5, [r0, #72]	; 0x48
24007a2e:	2d02      	cmp	r5, #2
24007a30:	d00c      	beq.n	24007a4c <I2C_ITAddrCplt.part.0+0x54>
}
24007a32:	bd70      	pop	{r4, r5, r6, pc}
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
24007a34:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24007a38:	6823      	ldr	r3, [r4, #0]
24007a3a:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
24007a3e:	6023      	str	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);
24007a40:	2300      	movs	r3, #0
24007a42:	f88c 3040 	strb.w	r3, [ip, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
24007a46:	f7ff ffd5 	bl	240079f4 <HAL_I2C_AddrCallback>
}
24007a4a:	bd70      	pop	{r4, r5, r6, pc}
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
24007a4c:	2508      	movs	r5, #8
          hi2c->AddrEventCount = 0U;
24007a4e:	6483      	str	r3, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
24007a50:	61e5      	str	r5, [r4, #28]
          __HAL_UNLOCK(hi2c);
24007a52:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
24007a56:	f7ff ffcd 	bl	240079f4 <HAL_I2C_AddrCallback>
}
24007a5a:	bd70      	pop	{r4, r5, r6, pc}

24007a5c <HAL_I2C_ListenCpltCallback>:
24007a5c:	4770      	bx	lr
24007a5e:	bf00      	nop

24007a60 <HAL_I2C_AbortCpltCallback>:
24007a60:	4770      	bx	lr
24007a62:	bf00      	nop

24007a64 <I2C_DMAAbort>:
{
24007a64:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
24007a66:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
24007a68:	6b83      	ldr	r3, [r0, #56]	; 0x38
24007a6a:	b10b      	cbz	r3, 24007a70 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
24007a6c:	2200      	movs	r2, #0
24007a6e:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
24007a70:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
24007a72:	b10b      	cbz	r3, 24007a78 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
24007a74:	2200      	movs	r2, #0
24007a76:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
24007a78:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24007a7c:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
24007a7e:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
24007a82:	d005      	beq.n	24007a90 <I2C_DMAAbort+0x2c>
    hi2c->PreviousState = I2C_STATE_NONE;
24007a84:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
24007a86:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
24007a8a:	f020 fad1 	bl	24028030 <__HAL_I2C_ErrorCallback_veneer>
}
24007a8e:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
24007a90:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
24007a92:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
24007a96:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
24007a9a:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
24007a9c:	f7ff ffe0 	bl	24007a60 <HAL_I2C_AbortCpltCallback>
}
24007aa0:	bd08      	pop	{r3, pc}
24007aa2:	bf00      	nop

24007aa4 <I2C_ITError>:
{
24007aa4:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
24007aa6:	4a5d      	ldr	r2, [pc, #372]	; (24007c1c <I2C_ITError+0x178>)
  hi2c->Mode          = HAL_I2C_MODE_NONE;
24007aa8:	2500      	movs	r5, #0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
24007aaa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
24007aae:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
24007ab0:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
24007ab4:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
24007ab6:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
24007ab8:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
24007aba:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
24007abc:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
24007abe:	ea41 0102 	orr.w	r1, r1, r2
24007ac2:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
24007ac4:	d874      	bhi.n	24007bb0 <I2C_ITError+0x10c>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24007ac6:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24007aca:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24007ace:	f002 0228 	and.w	r2, r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24007ad2:	6800      	ldr	r0, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24007ad4:	f001 0128 	and.w	r1, r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24007ad8:	2a28      	cmp	r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24007ada:	6803      	ldr	r3, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24007adc:	bf14      	ite	ne
24007ade:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
24007ae2:	f06f 0246 	mvneq.w	r2, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24007ae6:	2928      	cmp	r1, #40	; 0x28
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24007ae8:	f04f 0128 	mov.w	r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24007aec:	bf18      	it	ne
24007aee:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24007af2:	4013      	ands	r3, r2
24007af4:	4a4a      	ldr	r2, [pc, #296]	; (24007c20 <I2C_ITError+0x17c>)
24007af6:	6003      	str	r3, [r0, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24007af8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
24007afc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  tmppreviousstate = hi2c->PreviousState;
24007afe:	6b23      	ldr	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
24007b00:	6362      	str	r2, [r4, #52]	; 0x34
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
24007b02:	b118      	cbz	r0, 24007b0c <I2C_ITError+0x68>
24007b04:	2b11      	cmp	r3, #17
24007b06:	d01e      	beq.n	24007b46 <I2C_ITError+0xa2>
24007b08:	2b21      	cmp	r3, #33	; 0x21
24007b0a:	d01c      	beq.n	24007b46 <I2C_ITError+0xa2>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
24007b0c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
24007b0e:	b118      	cbz	r0, 24007b18 <I2C_ITError+0x74>
24007b10:	2b12      	cmp	r3, #18
24007b12:	d030      	beq.n	24007b76 <I2C_ITError+0xd2>
24007b14:	2b22      	cmp	r3, #34	; 0x22
24007b16:	d02e      	beq.n	24007b76 <I2C_ITError+0xd2>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
24007b18:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24007b1c:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
24007b1e:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
24007b22:	d006      	beq.n	24007b32 <I2C_ITError+0x8e>
    HAL_I2C_ErrorCallback(hi2c);
24007b24:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
24007b26:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
24007b28:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
24007b2c:	f020 fa80 	bl	24028030 <__HAL_I2C_ErrorCallback_veneer>
}
24007b30:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
24007b32:	2220      	movs	r2, #32
    HAL_I2C_AbortCpltCallback(hi2c);
24007b34:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
24007b36:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
24007b3a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
24007b3e:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
24007b40:	f7ff ff8e 	bl	24007a60 <HAL_I2C_AbortCpltCallback>
}
24007b44:	bd70      	pop	{r4, r5, r6, pc}
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
24007b46:	6823      	ldr	r3, [r4, #0]
24007b48:	681a      	ldr	r2, [r3, #0]
24007b4a:	0451      	lsls	r1, r2, #17
24007b4c:	d45f      	bmi.n	24007c0e <I2C_ITError+0x16a>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
24007b4e:	f7ff fa05 	bl	24006f5c <HAL_DMA_GetState>
24007b52:	2801      	cmp	r0, #1
24007b54:	d0e0      	beq.n	24007b18 <I2C_ITError+0x74>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
24007b56:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
24007b58:	2300      	movs	r3, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
24007b5a:	4932      	ldr	r1, [pc, #200]	; (24007c24 <I2C_ITError+0x180>)
24007b5c:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
24007b5e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
24007b62:	6ba0      	ldr	r0, [r4, #56]	; 0x38
24007b64:	f7fe fc90 	bl	24006488 <HAL_DMA_Abort_IT>
24007b68:	2800      	cmp	r0, #0
24007b6a:	d0e1      	beq.n	24007b30 <I2C_ITError+0x8c>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
24007b6c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
24007b6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
24007b72:	6d03      	ldr	r3, [r0, #80]	; 0x50
24007b74:	4718      	bx	r3
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
24007b76:	6823      	ldr	r3, [r4, #0]
24007b78:	681a      	ldr	r2, [r3, #0]
24007b7a:	0412      	lsls	r2, r2, #16
24007b7c:	d504      	bpl.n	24007b88 <I2C_ITError+0xe4>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
24007b7e:	681a      	ldr	r2, [r3, #0]
24007b80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
24007b84:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
24007b86:	6be0      	ldr	r0, [r4, #60]	; 0x3c
24007b88:	f7ff f9e8 	bl	24006f5c <HAL_DMA_GetState>
24007b8c:	2801      	cmp	r0, #1
24007b8e:	d0c3      	beq.n	24007b18 <I2C_ITError+0x74>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
24007b90:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hi2c);
24007b92:	2300      	movs	r3, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
24007b94:	4923      	ldr	r1, [pc, #140]	; (24007c24 <I2C_ITError+0x180>)
24007b96:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
24007b98:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
24007b9c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
24007b9e:	f7fe fc73 	bl	24006488 <HAL_DMA_Abort_IT>
24007ba2:	2800      	cmp	r0, #0
24007ba4:	d0c4      	beq.n	24007b30 <I2C_ITError+0x8c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
24007ba6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
24007ba8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
24007bac:	6d03      	ldr	r3, [r0, #80]	; 0x50
24007bae:	4718      	bx	r3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24007bb0:	6802      	ldr	r2, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24007bb2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24007bb6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24007bba:	6813      	ldr	r3, [r2, #0]
24007bbc:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
24007bc0:	6013      	str	r3, [r2, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24007bc2:	6803      	ldr	r3, [r0, #0]
24007bc4:	699a      	ldr	r2, [r3, #24]
24007bc6:	0792      	lsls	r2, r2, #30
24007bc8:	d501      	bpl.n	24007bce <I2C_ITError+0x12a>
    hi2c->Instance->TXDR = 0x00U;
24007bca:	629d      	str	r5, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
24007bcc:	6803      	ldr	r3, [r0, #0]
24007bce:	699a      	ldr	r2, [r3, #24]
24007bd0:	07d6      	lsls	r6, r2, #31
24007bd2:	d403      	bmi.n	24007bdc <I2C_ITError+0x138>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
24007bd4:	699a      	ldr	r2, [r3, #24]
24007bd6:	f042 0201 	orr.w	r2, r2, #1
24007bda:	619a      	str	r2, [r3, #24]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
24007bdc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24007be0:	2b60      	cmp	r3, #96	; 0x60
24007be2:	d012      	beq.n	24007c0a <I2C_ITError+0x166>
      hi2c->State         = HAL_I2C_STATE_READY;
24007be4:	2220      	movs	r2, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
24007be6:	6823      	ldr	r3, [r4, #0]
      hi2c->State         = HAL_I2C_STATE_READY;
24007be8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
24007bec:	699a      	ldr	r2, [r3, #24]
24007bee:	0695      	lsls	r5, r2, #26
24007bf0:	d50b      	bpl.n	24007c0a <I2C_ITError+0x166>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
24007bf2:	699a      	ldr	r2, [r3, #24]
24007bf4:	06d0      	lsls	r0, r2, #27
24007bf6:	d506      	bpl.n	24007c06 <I2C_ITError+0x162>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24007bf8:	2210      	movs	r2, #16
24007bfa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24007bfc:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24007bfe:	6823      	ldr	r3, [r4, #0]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24007c00:	f042 0204 	orr.w	r2, r2, #4
24007c04:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24007c06:	2220      	movs	r2, #32
24007c08:	61da      	str	r2, [r3, #28]
    hi2c->XferISR       = NULL;
24007c0a:	2200      	movs	r2, #0
24007c0c:	e776      	b.n	24007afc <I2C_ITError+0x58>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
24007c0e:	681a      	ldr	r2, [r3, #0]
24007c10:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
24007c14:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
24007c16:	6ba0      	ldr	r0, [r4, #56]	; 0x38
24007c18:	e799      	b.n	24007b4e <I2C_ITError+0xaa>
24007c1a:	bf00      	nop
24007c1c:	ffff0000 	.word	0xffff0000
24007c20:	24007e21 	.word	0x24007e21
24007c24:	24007a65 	.word	0x24007a65

24007c28 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
24007c28:	6803      	ldr	r3, [r0, #0]
{
24007c2a:	b410      	push	{r4}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
24007c2c:	699a      	ldr	r2, [r3, #24]
24007c2e:	461c      	mov	r4, r3
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
24007c30:	6819      	ldr	r1, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
24007c32:	f412 7f80 	tst.w	r2, #256	; 0x100
24007c36:	d032      	beq.n	24007c9e <HAL_I2C_ER_IRQHandler+0x76>
24007c38:	f011 0f80 	tst.w	r1, #128	; 0x80
24007c3c:	d021      	beq.n	24007c82 <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
24007c3e:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24007c40:	f44f 7480 	mov.w	r4, #256	; 0x100
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
24007c44:	f041 0101 	orr.w	r1, r1, #1
24007c48:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24007c4a:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
24007c4c:	0553      	lsls	r3, r2, #21
24007c4e:	d507      	bpl.n	24007c60 <HAL_I2C_ER_IRQHandler+0x38>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24007c50:	6803      	ldr	r3, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
24007c52:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24007c54:	f44f 6480 	mov.w	r4, #1024	; 0x400
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
24007c58:	f041 0108 	orr.w	r1, r1, #8
24007c5c:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24007c5e:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
24007c60:	0592      	lsls	r2, r2, #22
24007c62:	d507      	bpl.n	24007c74 <HAL_I2C_ER_IRQHandler+0x4c>
24007c64:	6804      	ldr	r4, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
24007c66:	6c43      	ldr	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24007c68:	f44f 7200 	mov.w	r2, #512	; 0x200
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
24007c6c:	f043 0302 	orr.w	r3, r3, #2
24007c70:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24007c72:	61e2      	str	r2, [r4, #28]
  tmperror = hi2c->ErrorCode;
24007c74:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
24007c76:	f011 0f0b 	tst.w	r1, #11
24007c7a:	d10c      	bne.n	24007c96 <HAL_I2C_ER_IRQHandler+0x6e>
}
24007c7c:	f85d 4b04 	ldr.w	r4, [sp], #4
24007c80:	4770      	bx	lr
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
24007c82:	0553      	lsls	r3, r2, #21
24007c84:	d4f6      	bmi.n	24007c74 <HAL_I2C_ER_IRQHandler+0x4c>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
24007c86:	0593      	lsls	r3, r2, #22
24007c88:	d5f4      	bpl.n	24007c74 <HAL_I2C_ER_IRQHandler+0x4c>
24007c8a:	060a      	lsls	r2, r1, #24
24007c8c:	d4eb      	bmi.n	24007c66 <HAL_I2C_ER_IRQHandler+0x3e>
  tmperror = hi2c->ErrorCode;
24007c8e:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
24007c90:	f011 0f0b 	tst.w	r1, #11
24007c94:	d0f2      	beq.n	24007c7c <HAL_I2C_ER_IRQHandler+0x54>
}
24007c96:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
24007c9a:	f7ff bf03 	b.w	24007aa4 <I2C_ITError>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
24007c9e:	f412 6f80 	tst.w	r2, #1024	; 0x400
24007ca2:	d0f0      	beq.n	24007c86 <HAL_I2C_ER_IRQHandler+0x5e>
24007ca4:	0609      	lsls	r1, r1, #24
24007ca6:	d5e5      	bpl.n	24007c74 <HAL_I2C_ER_IRQHandler+0x4c>
24007ca8:	e7d3      	b.n	24007c52 <HAL_I2C_ER_IRQHandler+0x2a>
24007caa:	bf00      	nop

24007cac <I2C_ITSlaveCplt.constprop.0>:
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
24007cac:	b570      	push	{r4, r5, r6, lr}
24007cae:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
24007cb0:	6802      	ldr	r2, [r0, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24007cb2:	2520      	movs	r5, #32
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
24007cb4:	6810      	ldr	r0, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
24007cb6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24007cba:	61d5      	str	r5, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
24007cbc:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
24007cc0:	2b21      	cmp	r3, #33	; 0x21
24007cc2:	d16d      	bne.n	24007da0 <I2C_ITSlaveCplt.constprop.0+0xf4>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24007cc4:	6825      	ldr	r5, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24007cc6:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24007cca:	682a      	ldr	r2, [r5, #0]
24007ccc:	f022 02fa 	bic.w	r2, r2, #250	; 0xfa
24007cd0:	602a      	str	r2, [r5, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
24007cd2:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
24007cd4:	6822      	ldr	r2, [r4, #0]
  I2C_RESET_CR2(hi2c);
24007cd6:	4d50      	ldr	r5, [pc, #320]	; (24007e18 <I2C_ITSlaveCplt.constprop.0+0x16c>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
24007cd8:	6853      	ldr	r3, [r2, #4]
24007cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
24007cde:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
24007ce0:	6822      	ldr	r2, [r4, #0]
24007ce2:	6853      	ldr	r3, [r2, #4]
24007ce4:	402b      	ands	r3, r5
24007ce6:	6053      	str	r3, [r2, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24007ce8:	6823      	ldr	r3, [r4, #0]
24007cea:	699a      	ldr	r2, [r3, #24]
24007cec:	0792      	lsls	r2, r2, #30
24007cee:	d502      	bpl.n	24007cf6 <I2C_ITSlaveCplt.constprop.0+0x4a>
    hi2c->Instance->TXDR = 0x00U;
24007cf0:	2200      	movs	r2, #0
24007cf2:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
24007cf4:	6823      	ldr	r3, [r4, #0]
24007cf6:	699a      	ldr	r2, [r3, #24]
24007cf8:	07d6      	lsls	r6, r2, #31
24007cfa:	d403      	bmi.n	24007d04 <I2C_ITSlaveCplt.constprop.0+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
24007cfc:	699a      	ldr	r2, [r3, #24]
24007cfe:	f042 0201 	orr.w	r2, r2, #1
24007d02:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
24007d04:	0445      	lsls	r5, r0, #17
24007d06:	d556      	bpl.n	24007db6 <I2C_ITSlaveCplt.constprop.0+0x10a>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
24007d08:	6822      	ldr	r2, [r4, #0]
24007d0a:	6813      	ldr	r3, [r2, #0]
24007d0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
24007d10:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
24007d12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
24007d14:	b11b      	cbz	r3, 24007d1e <I2C_ITSlaveCplt.constprop.0+0x72>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
24007d16:	681a      	ldr	r2, [r3, #0]
24007d18:	6853      	ldr	r3, [r2, #4]
24007d1a:	b29b      	uxth	r3, r3
24007d1c:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
24007d1e:	074b      	lsls	r3, r1, #29
24007d20:	d508      	bpl.n	24007d34 <I2C_ITSlaveCplt.constprop.0+0x88>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
24007d22:	6822      	ldr	r2, [r4, #0]
24007d24:	6a63      	ldr	r3, [r4, #36]	; 0x24
24007d26:	6a52      	ldr	r2, [r2, #36]	; 0x24
24007d28:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
24007d2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24007d2c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
24007d2e:	3301      	adds	r3, #1
24007d30:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24007d32:	bb72      	cbnz	r2, 24007d92 <I2C_ITSlaveCplt.constprop.0+0xe6>
  if (hi2c->XferCount != 0U)
24007d34:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24007d36:	b29b      	uxth	r3, r3
24007d38:	b11b      	cbz	r3, 24007d42 <I2C_ITSlaveCplt.constprop.0+0x96>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24007d3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
24007d3c:	f043 0304 	orr.w	r3, r3, #4
24007d40:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
24007d42:	2600      	movs	r6, #0
24007d44:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
24007d48:	6c65      	ldr	r5, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
24007d4a:	6366      	str	r6, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
24007d4c:	2d00      	cmp	r5, #0
24007d4e:	d13d      	bne.n	24007dcc <I2C_ITSlaveCplt.constprop.0+0x120>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
24007d50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24007d52:	4e32      	ldr	r6, [pc, #200]	; (24007e1c <I2C_ITSlaveCplt.constprop.0+0x170>)
24007d54:	42b3      	cmp	r3, r6
24007d56:	d10e      	bne.n	24007d76 <I2C_ITSlaveCplt.constprop.0+0xca>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
24007d58:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
24007d5c:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
24007d5e:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
24007d62:	2b22      	cmp	r3, #34	; 0x22
    hi2c->State = HAL_I2C_STATE_READY;
24007d64:	f04f 0320 	mov.w	r3, #32
24007d68:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
24007d6c:	6325      	str	r5, [r4, #48]	; 0x30
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
24007d6e:	d050      	beq.n	24007e12 <I2C_ITSlaveCplt.constprop.0+0x166>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
24007d70:	f7ff fdea 	bl	24007948 <HAL_I2C_SlaveTxCpltCallback>
}
24007d74:	bd70      	pop	{r4, r5, r6, pc}
    I2C_ITSlaveSeqCplt(hi2c);
24007d76:	4620      	mov	r0, r4
24007d78:	f7ff fde8 	bl	2400794c <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
24007d7c:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24007d7e:	62e6      	str	r6, [r4, #44]	; 0x2c
    HAL_I2C_ListenCpltCallback(hi2c);
24007d80:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
24007d82:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
24007d86:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
24007d8a:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
24007d8c:	f7ff fe66 	bl	24007a5c <HAL_I2C_ListenCpltCallback>
}
24007d90:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->XferCount--;
24007d92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
24007d94:	3a01      	subs	r2, #1
      hi2c->XferCount--;
24007d96:	3b01      	subs	r3, #1
      hi2c->XferSize--;
24007d98:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24007d9a:	b29b      	uxth	r3, r3
24007d9c:	8563      	strh	r3, [r4, #42]	; 0x2a
24007d9e:	e7c9      	b.n	24007d34 <I2C_ITSlaveCplt.constprop.0+0x88>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
24007da0:	2b22      	cmp	r3, #34	; 0x22
24007da2:	d197      	bne.n	24007cd4 <I2C_ITSlaveCplt.constprop.0+0x28>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24007da4:	6825      	ldr	r5, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24007da6:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24007daa:	682a      	ldr	r2, [r5, #0]
24007dac:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
24007db0:	602a      	str	r2, [r5, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
24007db2:	6323      	str	r3, [r4, #48]	; 0x30
24007db4:	e78e      	b.n	24007cd4 <I2C_ITSlaveCplt.constprop.0+0x28>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
24007db6:	0402      	lsls	r2, r0, #16
24007db8:	d5b1      	bpl.n	24007d1e <I2C_ITSlaveCplt.constprop.0+0x72>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
24007dba:	6822      	ldr	r2, [r4, #0]
24007dbc:	6813      	ldr	r3, [r2, #0]
24007dbe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
24007dc2:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
24007dc4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
24007dc6:	2b00      	cmp	r3, #0
24007dc8:	d1a5      	bne.n	24007d16 <I2C_ITSlaveCplt.constprop.0+0x6a>
24007dca:	e7a8      	b.n	24007d1e <I2C_ITSlaveCplt.constprop.0+0x72>
    I2C_ITError(hi2c, hi2c->ErrorCode);
24007dcc:	6c61      	ldr	r1, [r4, #68]	; 0x44
24007dce:	4620      	mov	r0, r4
24007dd0:	f7ff fe68 	bl	24007aa4 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
24007dd4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24007dd8:	2b28      	cmp	r3, #40	; 0x28
24007dda:	d1cb      	bne.n	24007d74 <I2C_ITSlaveCplt.constprop.0+0xc8>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24007ddc:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_READY;
24007dde:	2320      	movs	r3, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24007de0:	490e      	ldr	r1, [pc, #56]	; (24007e1c <I2C_ITSlaveCplt.constprop.0+0x170>)
  HAL_I2C_ListenCpltCallback(hi2c);
24007de2:	4620      	mov	r0, r4
  hi2c->XferISR = NULL;
24007de4:	6366      	str	r6, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24007de6:	62e1      	str	r1, [r4, #44]	; 0x2c
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24007de8:	2110      	movs	r1, #16
  hi2c->PreviousState = I2C_STATE_NONE;
24007dea:	6326      	str	r6, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
24007dec:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
24007df0:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24007df4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24007df8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24007dfc:	6813      	ldr	r3, [r2, #0]
24007dfe:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
24007e02:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24007e04:	6823      	ldr	r3, [r4, #0]
24007e06:	61d9      	str	r1, [r3, #28]
  __HAL_UNLOCK(hi2c);
24007e08:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
24007e0c:	f7ff fe26 	bl	24007a5c <HAL_I2C_ListenCpltCallback>
}
24007e10:	bd70      	pop	{r4, r5, r6, pc}
    HAL_I2C_SlaveRxCpltCallback(hi2c);
24007e12:	f020 f911 	bl	24028038 <__HAL_I2C_SlaveRxCpltCallback_veneer>
}
24007e16:	bd70      	pop	{r4, r5, r6, pc}
24007e18:	fe00e800 	.word	0xfe00e800
24007e1c:	ffff0000 	.word	0xffff0000

24007e20 <I2C_Slave_ISR_IT>:
{
24007e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
24007e22:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
24007e26:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
24007e28:	2b01      	cmp	r3, #1
24007e2a:	f000 8081 	beq.w	24007f30 <I2C_Slave_ISR_IT+0x110>
24007e2e:	4617      	mov	r7, r2
24007e30:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
24007e32:	068a      	lsls	r2, r1, #26
24007e34:	4604      	mov	r4, r0
24007e36:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
24007e38:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
24007e3c:	d501      	bpl.n	24007e42 <I2C_Slave_ISR_IT+0x22>
24007e3e:	06bb      	lsls	r3, r7, #26
24007e40:	d462      	bmi.n	24007f08 <I2C_Slave_ISR_IT+0xe8>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
24007e42:	06ea      	lsls	r2, r5, #27
24007e44:	d51c      	bpl.n	24007e80 <I2C_Slave_ISR_IT+0x60>
24007e46:	06fb      	lsls	r3, r7, #27
24007e48:	d51a      	bpl.n	24007e80 <I2C_Slave_ISR_IT+0x60>
    if (hi2c->XferCount == 0U)
24007e4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24007e4c:	b29b      	uxth	r3, r3
24007e4e:	2b00      	cmp	r3, #0
24007e50:	d15f      	bne.n	24007f12 <I2C_Slave_ISR_IT+0xf2>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
24007e52:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
24007e56:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
24007e5a:	b2d2      	uxtb	r2, r2
24007e5c:	d101      	bne.n	24007e62 <I2C_Slave_ISR_IT+0x42>
24007e5e:	2a28      	cmp	r2, #40	; 0x28
24007e60:	d07f      	beq.n	24007f62 <I2C_Slave_ISR_IT+0x142>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
24007e62:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24007e66:	2210      	movs	r2, #16
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
24007e68:	2b29      	cmp	r3, #41	; 0x29
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24007e6a:	6823      	ldr	r3, [r4, #0]
24007e6c:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
24007e6e:	d102      	bne.n	24007e76 <I2C_Slave_ISR_IT+0x56>
24007e70:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
24007e74:	d162      	bne.n	24007f3c <I2C_Slave_ISR_IT+0x11c>
  __HAL_UNLOCK(hi2c);
24007e76:	2300      	movs	r3, #0
  return HAL_OK;
24007e78:	4618      	mov	r0, r3
  __HAL_UNLOCK(hi2c);
24007e7a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
24007e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
24007e80:	076a      	lsls	r2, r5, #29
24007e82:	d40d      	bmi.n	24007ea0 <I2C_Slave_ISR_IT+0x80>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
24007e84:	0728      	lsls	r0, r5, #28
24007e86:	d529      	bpl.n	24007edc <I2C_Slave_ISR_IT+0xbc>
24007e88:	0739      	lsls	r1, r7, #28
24007e8a:	d527      	bpl.n	24007edc <I2C_Slave_ISR_IT+0xbc>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
24007e8c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24007e90:	f003 0328 	and.w	r3, r3, #40	; 0x28
24007e94:	2b28      	cmp	r3, #40	; 0x28
24007e96:	d060      	beq.n	24007f5a <I2C_Slave_ISR_IT+0x13a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
24007e98:	6823      	ldr	r3, [r4, #0]
24007e9a:	2208      	movs	r2, #8
24007e9c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
24007e9e:	e7ea      	b.n	24007e76 <I2C_Slave_ISR_IT+0x56>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
24007ea0:	077b      	lsls	r3, r7, #29
24007ea2:	d5ef      	bpl.n	24007e84 <I2C_Slave_ISR_IT+0x64>
    if (hi2c->XferCount > 0U)
24007ea4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24007ea6:	b29b      	uxth	r3, r3
24007ea8:	b16b      	cbz	r3, 24007ec6 <I2C_Slave_ISR_IT+0xa6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
24007eaa:	6822      	ldr	r2, [r4, #0]
24007eac:	6a63      	ldr	r3, [r4, #36]	; 0x24
24007eae:	6a52      	ldr	r2, [r2, #36]	; 0x24
24007eb0:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
24007eb2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
24007eb4:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
24007eb6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24007eb8:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
24007eba:	3101      	adds	r1, #1
      hi2c->XferSize--;
24007ebc:	3a01      	subs	r2, #1
      hi2c->XferCount--;
24007ebe:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
24007ec0:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
24007ec2:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24007ec4:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
24007ec6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24007ec8:	b29b      	uxth	r3, r3
24007eca:	2b00      	cmp	r3, #0
24007ecc:	d1d3      	bne.n	24007e76 <I2C_Slave_ISR_IT+0x56>
24007ece:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
24007ed2:	d0d0      	beq.n	24007e76 <I2C_Slave_ISR_IT+0x56>
        I2C_ITSlaveSeqCplt(hi2c);
24007ed4:	4620      	mov	r0, r4
24007ed6:	f7ff fd39 	bl	2400794c <I2C_ITSlaveSeqCplt>
24007eda:	e7cc      	b.n	24007e76 <I2C_Slave_ISR_IT+0x56>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
24007edc:	07aa      	lsls	r2, r5, #30
24007ede:	d5ca      	bpl.n	24007e76 <I2C_Slave_ISR_IT+0x56>
24007ee0:	07bb      	lsls	r3, r7, #30
24007ee2:	d5c8      	bpl.n	24007e76 <I2C_Slave_ISR_IT+0x56>
    if (hi2c->XferCount > 0U)
24007ee4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24007ee6:	b29b      	uxth	r3, r3
24007ee8:	b323      	cbz	r3, 24007f34 <I2C_Slave_ISR_IT+0x114>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
24007eea:	6a62      	ldr	r2, [r4, #36]	; 0x24
24007eec:	6823      	ldr	r3, [r4, #0]
24007eee:	7812      	ldrb	r2, [r2, #0]
24007ef0:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
24007ef2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
24007ef4:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
24007ef6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24007ef8:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
24007efa:	3101      	adds	r1, #1
      hi2c->XferSize--;
24007efc:	3a01      	subs	r2, #1
      hi2c->XferCount--;
24007efe:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
24007f00:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
24007f02:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24007f04:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
24007f06:	e7b6      	b.n	24007e76 <I2C_Slave_ISR_IT+0x56>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
24007f08:	f7ff fed0 	bl	24007cac <I2C_ITSlaveCplt.constprop.0>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
24007f0c:	06ea      	lsls	r2, r5, #27
24007f0e:	d5b7      	bpl.n	24007e80 <I2C_Slave_ISR_IT+0x60>
24007f10:	e799      	b.n	24007e46 <I2C_Slave_ISR_IT+0x26>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24007f12:	6823      	ldr	r3, [r4, #0]
24007f14:	2210      	movs	r2, #16
24007f16:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24007f18:	6c63      	ldr	r3, [r4, #68]	; 0x44
24007f1a:	f043 0304 	orr.w	r3, r3, #4
24007f1e:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
24007f20:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
24007f24:	d1a7      	bne.n	24007e76 <I2C_Slave_ISR_IT+0x56>
        I2C_ITError(hi2c, hi2c->ErrorCode);
24007f26:	6c61      	ldr	r1, [r4, #68]	; 0x44
24007f28:	4620      	mov	r0, r4
24007f2a:	f7ff fdbb 	bl	24007aa4 <I2C_ITError>
24007f2e:	e7a2      	b.n	24007e76 <I2C_Slave_ISR_IT+0x56>
  __HAL_LOCK(hi2c);
24007f30:	2002      	movs	r0, #2
}
24007f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
24007f34:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
24007f38:	d19d      	bne.n	24007e76 <I2C_Slave_ISR_IT+0x56>
24007f3a:	e7cb      	b.n	24007ed4 <I2C_Slave_ISR_IT+0xb4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24007f3c:	6823      	ldr	r3, [r4, #0]
24007f3e:	699a      	ldr	r2, [r3, #24]
24007f40:	0790      	lsls	r0, r2, #30
24007f42:	d502      	bpl.n	24007f4a <I2C_Slave_ISR_IT+0x12a>
    hi2c->Instance->TXDR = 0x00U;
24007f44:	2200      	movs	r2, #0
24007f46:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
24007f48:	6823      	ldr	r3, [r4, #0]
24007f4a:	699a      	ldr	r2, [r3, #24]
24007f4c:	07d1      	lsls	r1, r2, #31
24007f4e:	d4c1      	bmi.n	24007ed4 <I2C_Slave_ISR_IT+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
24007f50:	699a      	ldr	r2, [r3, #24]
24007f52:	f042 0201 	orr.w	r2, r2, #1
24007f56:	619a      	str	r2, [r3, #24]
24007f58:	e7bc      	b.n	24007ed4 <I2C_Slave_ISR_IT+0xb4>
24007f5a:	4620      	mov	r0, r4
24007f5c:	f7ff fd4c 	bl	240079f8 <I2C_ITAddrCplt.part.0>
24007f60:	e789      	b.n	24007e76 <I2C_Slave_ISR_IT+0x56>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24007f62:	4918      	ldr	r1, [pc, #96]	; (24007fc4 <I2C_Slave_ISR_IT+0x1a4>)
  hi2c->State = HAL_I2C_STATE_READY;
24007f64:	2220      	movs	r2, #32
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
24007f66:	076d      	lsls	r5, r5, #29
  hi2c->XferISR = NULL;
24007f68:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24007f6a:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
24007f6c:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
24007f6e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
24007f72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
24007f76:	d512      	bpl.n	24007f9e <I2C_Slave_ISR_IT+0x17e>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
24007f78:	6822      	ldr	r2, [r4, #0]
24007f7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
24007f7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
24007f7e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
24007f80:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24007f82:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
24007f84:	3301      	adds	r3, #1
24007f86:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24007f88:	b14a      	cbz	r2, 24007f9e <I2C_Slave_ISR_IT+0x17e>
      hi2c->XferCount--;
24007f8a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
24007f8c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
24007f8e:	3b01      	subs	r3, #1
      hi2c->XferSize--;
24007f90:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24007f92:	b29b      	uxth	r3, r3
24007f94:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24007f96:	6c63      	ldr	r3, [r4, #68]	; 0x44
24007f98:	f043 0304 	orr.w	r3, r3, #4
24007f9c:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24007f9e:	6822      	ldr	r2, [r4, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24007fa0:	2010      	movs	r0, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24007fa2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
24007fa6:	2100      	movs	r1, #0
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24007fa8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24007fac:	6813      	ldr	r3, [r2, #0]
24007fae:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
24007fb2:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24007fb4:	6823      	ldr	r3, [r4, #0]
24007fb6:	61d8      	str	r0, [r3, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
24007fb8:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
24007fba:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
24007fbe:	f7ff fd4d 	bl	24007a5c <HAL_I2C_ListenCpltCallback>
}
24007fc2:	e758      	b.n	24007e76 <I2C_Slave_ISR_IT+0x56>
24007fc4:	ffff0000 	.word	0xffff0000

24007fc8 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
24007fc8:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
24007fcc:	2a20      	cmp	r2, #32
24007fce:	d129      	bne.n	24008024 <HAL_I2CEx_ConfigAnalogFilter+0x5c>
24007fd0:	4603      	mov	r3, r0
{
24007fd2:	b500      	push	{lr}
24007fd4:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
24007fd8:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
24007fdc:	2a01      	cmp	r2, #1
24007fde:	d023      	beq.n	24008028 <HAL_I2CEx_ConfigAnalogFilter+0x60>
24007fe0:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
24007fe2:	6800      	ldr	r0, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
24007fe4:	f04f 0c00 	mov.w	ip, #0
    __HAL_LOCK(hi2c);
24007fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
24007fec:	2224      	movs	r2, #36	; 0x24
24007fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
24007ff2:	6802      	ldr	r2, [r0, #0]
24007ff4:	f022 0201 	bic.w	r2, r2, #1
24007ff8:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
24007ffa:	6818      	ldr	r0, [r3, #0]
24007ffc:	6802      	ldr	r2, [r0, #0]
24007ffe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
24008002:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
24008004:	6818      	ldr	r0, [r3, #0]
24008006:	6802      	ldr	r2, [r0, #0]
24008008:	4311      	orrs	r1, r2
2400800a:	6001      	str	r1, [r0, #0]

    return HAL_OK;
2400800c:	4660      	mov	r0, ip
    __HAL_I2C_ENABLE(hi2c);
2400800e:	6819      	ldr	r1, [r3, #0]
24008010:	680a      	ldr	r2, [r1, #0]
24008012:	f042 0201 	orr.w	r2, r2, #1
24008016:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
24008018:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
2400801c:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
24008020:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
24008024:	2002      	movs	r0, #2
}
24008026:	4770      	bx	lr
    return HAL_BUSY;
24008028:	2002      	movs	r0, #2
}
2400802a:	f85d fb04 	ldr.w	pc, [sp], #4
2400802e:	bf00      	nop

24008030 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
24008030:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
{
24008034:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
24008036:	2a20      	cmp	r2, #32
24008038:	fa5f fc82 	uxtb.w	ip, r2
2400803c:	d121      	bne.n	24008082 <HAL_I2CEx_ConfigDigitalFilter+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400803e:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
24008042:	2a01      	cmp	r2, #1
24008044:	d01d      	beq.n	24008082 <HAL_I2CEx_ConfigDigitalFilter+0x52>
24008046:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
24008048:	6800      	ldr	r0, [r0, #0]
    __HAL_LOCK(hi2c);
2400804a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
2400804e:	2224      	movs	r2, #36	; 0x24
24008050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
24008054:	6802      	ldr	r2, [r0, #0]
24008056:	f022 0201 	bic.w	r2, r2, #1
2400805a:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
2400805c:	6818      	ldr	r0, [r3, #0]
2400805e:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
24008060:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
24008064:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
24008068:	2100      	movs	r1, #0
    hi2c->Instance->CR1 = tmpreg;
2400806a:	6002      	str	r2, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);
2400806c:	6818      	ldr	r0, [r3, #0]
2400806e:	6802      	ldr	r2, [r0, #0]
24008070:	f042 0201 	orr.w	r2, r2, #1
24008074:	6002      	str	r2, [r0, #0]

    return HAL_OK;
24008076:	4608      	mov	r0, r1
    hi2c->State = HAL_I2C_STATE_READY;
24008078:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
2400807c:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    return HAL_OK;
24008080:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
24008082:	2002      	movs	r0, #2
  }
}
24008084:	4770      	bx	lr
24008086:	bf00      	nop

24008088 <HAL_I2CEx_EnableFastModePlus>:
{
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
24008088:	4b09      	ldr	r3, [pc, #36]	; (240080b0 <HAL_I2CEx_EnableFastModePlus+0x28>)
{
2400808a:	b082      	sub	sp, #8

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
2400808c:	4909      	ldr	r1, [pc, #36]	; (240080b4 <HAL_I2CEx_EnableFastModePlus+0x2c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
2400808e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
24008092:	f042 0202 	orr.w	r2, r2, #2
24008096:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
2400809a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
2400809e:	f003 0302 	and.w	r3, r3, #2
240080a2:	9301      	str	r3, [sp, #4]
240080a4:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
240080a6:	684b      	ldr	r3, [r1, #4]
240080a8:	4318      	orrs	r0, r3
240080aa:	6048      	str	r0, [r1, #4]
}
240080ac:	b002      	add	sp, #8
240080ae:	4770      	bx	lr
240080b0:	58024400 	.word	0x58024400
240080b4:	58000400 	.word	0x58000400

240080b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
240080b8:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
240080ba:	4c10      	ldr	r4, [pc, #64]	; (240080fc <HAL_PWREx_ConfigSupply+0x44>)
240080bc:	68e3      	ldr	r3, [r4, #12]
240080be:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
240080c2:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
240080c4:	d105      	bne.n	240080d2 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
240080c6:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
240080ca:	1a18      	subs	r0, r3, r0
240080cc:	bf18      	it	ne
240080ce:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
240080d0:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
240080d2:	f023 0307 	bic.w	r3, r3, #7
240080d6:	4303      	orrs	r3, r0
240080d8:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
240080da:	f7fd f8d7 	bl	2400528c <HAL_GetTick>
240080de:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
240080e0:	e005      	b.n	240080ee <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
240080e2:	f7fd f8d3 	bl	2400528c <HAL_GetTick>
240080e6:	1b40      	subs	r0, r0, r5
240080e8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
240080ec:	d804      	bhi.n	240080f8 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
240080ee:	6863      	ldr	r3, [r4, #4]
240080f0:	049b      	lsls	r3, r3, #18
240080f2:	d5f6      	bpl.n	240080e2 <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
240080f4:	2000      	movs	r0, #0
}
240080f6:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
240080f8:	2001      	movs	r0, #1
}
240080fa:	bd38      	pop	{r3, r4, r5, pc}
240080fc:	58024800 	.word	0x58024800

24008100 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24008100:	4b3c      	ldr	r3, [pc, #240]	; (240081f4 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
uint32_t HAL_RCC_GetSysClockFreq(void)
24008102:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24008104:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
24008106:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
24008108:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
2400810a:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
2400810e:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
24008110:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
24008114:	d038      	beq.n	24008188 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24008116:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
2400811a:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400811e:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24008122:	fb05 f101 	mul.w	r1, r5, r1
24008126:	2a01      	cmp	r2, #1
24008128:	ee07 1a90 	vmov	s15, r1
2400812c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
24008130:	d002      	beq.n	24008138 <HAL_RCC_GetSysClockFreq.part.0+0x38>
24008132:	2a02      	cmp	r2, #2
24008134:	d050      	beq.n	240081d8 <HAL_RCC_GetSysClockFreq.part.0+0xd8>
24008136:	b34a      	cbz	r2, 2400818c <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008138:	ee07 0a90 	vmov	s15, r0
2400813c:	ed9f 5a2e 	vldr	s10, [pc, #184]	; 240081f8 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
24008140:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24008146:	eec5 6a27 	vdiv.f32	s13, s10, s15
2400814a:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 240081fc <HAL_RCC_GetSysClockFreq.part.0+0xfc>
2400814e:	f3c3 0308 	ubfx	r3, r3, #0, #9
24008152:	ee07 3a90 	vmov	s15, r3
24008156:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
2400815a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400815e:	ee77 7aa5 	vadd.f32	s15, s15, s11
24008162:	eee7 7a06 	vfma.f32	s15, s14, s12
24008166:	ee66 6aa7 	vmul.f32	s13, s13, s15
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
2400816a:	4b22      	ldr	r3, [pc, #136]	; (240081f4 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
2400816c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400816e:	f3c3 2346 	ubfx	r3, r3, #9, #7
24008172:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
24008174:	ee07 3a90 	vmov	s15, r3
24008178:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
2400817c:	eec6 7a87 	vdiv.f32	s15, s13, s14
24008180:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24008184:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
24008188:	bc30      	pop	{r4, r5}
2400818a:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2400818c:	681a      	ldr	r2, [r3, #0]
2400818e:	0692      	lsls	r2, r2, #26
24008190:	d529      	bpl.n	240081e6 <HAL_RCC_GetSysClockFreq.part.0+0xe6>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008192:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008194:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008198:	4a19      	ldr	r2, [pc, #100]	; (24008200 <HAL_RCC_GetSysClockFreq.part.0+0x100>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400819a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2400819e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240081a0:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240081a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240081a8:	ed9f 5a14 	vldr	s10, [pc, #80]	; 240081fc <HAL_RCC_GetSysClockFreq.part.0+0xfc>
240081ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240081b0:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240081b2:	ee06 3a10 	vmov	s12, r3
240081b6:	ee05 2a90 	vmov	s11, r2
240081ba:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
240081be:	eef8 5ae5 	vcvt.f32.s32	s11, s11
240081c2:	ee36 6a26 	vadd.f32	s12, s12, s13
240081c6:	eec5 6aa7 	vdiv.f32	s13, s11, s15
240081ca:	eef0 7a46 	vmov.f32	s15, s12
240081ce:	eee7 7a05 	vfma.f32	s15, s14, s10
240081d2:	ee66 6aa7 	vmul.f32	s13, s13, s15
240081d6:	e7c8      	b.n	2400816a <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240081d8:	ee07 0a90 	vmov	s15, r0
240081dc:	ed9f 5a09 	vldr	s10, [pc, #36]	; 24008204 <HAL_RCC_GetSysClockFreq.part.0+0x104>
240081e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240081e4:	e7ae      	b.n	24008144 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240081e6:	ee07 0a90 	vmov	s15, r0
240081ea:	ed9f 5a07 	vldr	s10, [pc, #28]	; 24008208 <HAL_RCC_GetSysClockFreq.part.0+0x108>
240081ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240081f2:	e7a7      	b.n	24008144 <HAL_RCC_GetSysClockFreq.part.0+0x44>
240081f4:	58024400 	.word	0x58024400
240081f8:	4a742400 	.word	0x4a742400
240081fc:	39000000 	.word	0x39000000
24008200:	03d09000 	.word	0x03d09000
24008204:	4b742400 	.word	0x4b742400
24008208:	4c742400 	.word	0x4c742400

2400820c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
2400820c:	2800      	cmp	r0, #0
2400820e:	f000 81ef 	beq.w	240085f0 <HAL_RCC_OscConfig+0x3e4>
{
24008212:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
24008214:	6803      	ldr	r3, [r0, #0]
24008216:	4604      	mov	r4, r0
24008218:	07d9      	lsls	r1, r3, #31
2400821a:	d52e      	bpl.n	2400827a <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
2400821c:	49a4      	ldr	r1, [pc, #656]	; (240084b0 <HAL_RCC_OscConfig+0x2a4>)
2400821e:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24008220:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24008222:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
24008226:	2a10      	cmp	r2, #16
24008228:	f000 8107 	beq.w	2400843a <HAL_RCC_OscConfig+0x22e>
2400822c:	2a18      	cmp	r2, #24
2400822e:	f000 80ff 	beq.w	24008430 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
24008232:	6863      	ldr	r3, [r4, #4]
24008234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24008238:	f000 812a 	beq.w	24008490 <HAL_RCC_OscConfig+0x284>
2400823c:	2b00      	cmp	r3, #0
2400823e:	f040 8188 	bne.w	24008552 <HAL_RCC_OscConfig+0x346>
24008242:	4b9b      	ldr	r3, [pc, #620]	; (240084b0 <HAL_RCC_OscConfig+0x2a4>)
24008244:	681a      	ldr	r2, [r3, #0]
24008246:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
2400824a:	601a      	str	r2, [r3, #0]
2400824c:	681a      	ldr	r2, [r3, #0]
2400824e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
24008252:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
24008254:	6863      	ldr	r3, [r4, #4]
24008256:	2b00      	cmp	r3, #0
24008258:	f000 815c 	beq.w	24008514 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
2400825c:	f7fd f816 	bl	2400528c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24008260:	4e93      	ldr	r6, [pc, #588]	; (240084b0 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
24008262:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24008264:	e005      	b.n	24008272 <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
24008266:	f7fd f811 	bl	2400528c <HAL_GetTick>
2400826a:	1b40      	subs	r0, r0, r5
2400826c:	2864      	cmp	r0, #100	; 0x64
2400826e:	f200 814f 	bhi.w	24008510 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24008272:	6833      	ldr	r3, [r6, #0]
24008274:	039b      	lsls	r3, r3, #14
24008276:	d5f6      	bpl.n	24008266 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
24008278:	6823      	ldr	r3, [r4, #0]
2400827a:	079d      	lsls	r5, r3, #30
2400827c:	f100 808a 	bmi.w	24008394 <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
24008280:	06d9      	lsls	r1, r3, #27
24008282:	d533      	bpl.n	240082ec <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24008284:	4a8a      	ldr	r2, [pc, #552]	; (240084b0 <HAL_RCC_OscConfig+0x2a4>)
24008286:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24008288:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
2400828a:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
2400828e:	2b08      	cmp	r3, #8
24008290:	f000 80e3 	beq.w	2400845a <HAL_RCC_OscConfig+0x24e>
24008294:	2b18      	cmp	r3, #24
24008296:	f000 80db 	beq.w	24008450 <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
2400829a:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
2400829c:	4d84      	ldr	r5, [pc, #528]	; (240084b0 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
2400829e:	2b00      	cmp	r3, #0
240082a0:	f000 8176 	beq.w	24008590 <HAL_RCC_OscConfig+0x384>
        __HAL_RCC_CSI_ENABLE();
240082a4:	682b      	ldr	r3, [r5, #0]
240082a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
240082aa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
240082ac:	f7fc ffee 	bl	2400528c <HAL_GetTick>
240082b0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
240082b2:	e005      	b.n	240082c0 <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
240082b4:	f7fc ffea 	bl	2400528c <HAL_GetTick>
240082b8:	1b80      	subs	r0, r0, r6
240082ba:	2802      	cmp	r0, #2
240082bc:	f200 8128 	bhi.w	24008510 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
240082c0:	682b      	ldr	r3, [r5, #0]
240082c2:	05db      	lsls	r3, r3, #23
240082c4:	d5f6      	bpl.n	240082b4 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
240082c6:	f7fc fff9 	bl	240052bc <HAL_GetREVID>
240082ca:	f241 0303 	movw	r3, #4099	; 0x1003
240082ce:	4298      	cmp	r0, r3
240082d0:	f200 8266 	bhi.w	240087a0 <HAL_RCC_OscConfig+0x594>
240082d4:	6a22      	ldr	r2, [r4, #32]
240082d6:	686b      	ldr	r3, [r5, #4]
240082d8:	2a20      	cmp	r2, #32
240082da:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
240082de:	bf0c      	ite	eq
240082e0:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
240082e4:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
240082e8:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
240082ea:	6823      	ldr	r3, [r4, #0]
240082ec:	071d      	lsls	r5, r3, #28
240082ee:	d516      	bpl.n	2400831e <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
240082f0:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
240082f2:	4d6f      	ldr	r5, [pc, #444]	; (240084b0 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
240082f4:	2b00      	cmp	r3, #0
240082f6:	f000 811b 	beq.w	24008530 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_LSI_ENABLE();
240082fa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
240082fc:	f043 0301 	orr.w	r3, r3, #1
24008300:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
24008302:	f7fc ffc3 	bl	2400528c <HAL_GetTick>
24008306:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
24008308:	e005      	b.n	24008316 <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
2400830a:	f7fc ffbf 	bl	2400528c <HAL_GetTick>
2400830e:	1b80      	subs	r0, r0, r6
24008310:	2802      	cmp	r0, #2
24008312:	f200 80fd 	bhi.w	24008510 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
24008316:	6f6b      	ldr	r3, [r5, #116]	; 0x74
24008318:	0798      	lsls	r0, r3, #30
2400831a:	d5f6      	bpl.n	2400830a <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
2400831c:	6823      	ldr	r3, [r4, #0]
2400831e:	069a      	lsls	r2, r3, #26
24008320:	d516      	bpl.n	24008350 <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
24008322:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
24008324:	4d62      	ldr	r5, [pc, #392]	; (240084b0 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
24008326:	2b00      	cmp	r3, #0
24008328:	f000 8121 	beq.w	2400856e <HAL_RCC_OscConfig+0x362>
      __HAL_RCC_HSI48_ENABLE();
2400832c:	682b      	ldr	r3, [r5, #0]
2400832e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
24008332:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
24008334:	f7fc ffaa 	bl	2400528c <HAL_GetTick>
24008338:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
2400833a:	e005      	b.n	24008348 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
2400833c:	f7fc ffa6 	bl	2400528c <HAL_GetTick>
24008340:	1b80      	subs	r0, r0, r6
24008342:	2802      	cmp	r0, #2
24008344:	f200 80e4 	bhi.w	24008510 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
24008348:	682b      	ldr	r3, [r5, #0]
2400834a:	049f      	lsls	r7, r3, #18
2400834c:	d5f6      	bpl.n	2400833c <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
2400834e:	6823      	ldr	r3, [r4, #0]
24008350:	0759      	lsls	r1, r3, #29
24008352:	f100 80a3 	bmi.w	2400849c <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
24008356:	6a60      	ldr	r0, [r4, #36]	; 0x24
24008358:	b1d0      	cbz	r0, 24008390 <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
2400835a:	4d55      	ldr	r5, [pc, #340]	; (240084b0 <HAL_RCC_OscConfig+0x2a4>)
2400835c:	692b      	ldr	r3, [r5, #16]
2400835e:	f003 0338 	and.w	r3, r3, #56	; 0x38
24008362:	2b18      	cmp	r3, #24
24008364:	f000 81b6 	beq.w	240086d4 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_PLL_DISABLE();
24008368:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
2400836a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
2400836c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
24008370:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
24008372:	f000 8149 	beq.w	24008608 <HAL_RCC_OscConfig+0x3fc>
        tickstart = HAL_GetTick();
24008376:	f7fc ff89 	bl	2400528c <HAL_GetTick>
2400837a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
2400837c:	e005      	b.n	2400838a <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
2400837e:	f7fc ff85 	bl	2400528c <HAL_GetTick>
24008382:	1b00      	subs	r0, r0, r4
24008384:	2802      	cmp	r0, #2
24008386:	f200 80c3 	bhi.w	24008510 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
2400838a:	682b      	ldr	r3, [r5, #0]
2400838c:	019b      	lsls	r3, r3, #6
2400838e:	d4f6      	bmi.n	2400837e <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
24008390:	2000      	movs	r0, #0
}
24008392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24008394:	4a46      	ldr	r2, [pc, #280]	; (240084b0 <HAL_RCC_OscConfig+0x2a4>)
24008396:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24008398:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
2400839a:	f013 0338 	ands.w	r3, r3, #56	; 0x38
2400839e:	d12d      	bne.n	240083fc <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
240083a0:	4b43      	ldr	r3, [pc, #268]	; (240084b0 <HAL_RCC_OscConfig+0x2a4>)
240083a2:	68e2      	ldr	r2, [r4, #12]
240083a4:	681b      	ldr	r3, [r3, #0]
240083a6:	0759      	lsls	r1, r3, #29
240083a8:	d501      	bpl.n	240083ae <HAL_RCC_OscConfig+0x1a2>
240083aa:	2a00      	cmp	r2, #0
240083ac:	d04e      	beq.n	2400844c <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
240083ae:	4d40      	ldr	r5, [pc, #256]	; (240084b0 <HAL_RCC_OscConfig+0x2a4>)
240083b0:	682b      	ldr	r3, [r5, #0]
240083b2:	f023 0319 	bic.w	r3, r3, #25
240083b6:	4313      	orrs	r3, r2
240083b8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
240083ba:	f7fc ff67 	bl	2400528c <HAL_GetTick>
240083be:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
240083c0:	e005      	b.n	240083ce <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
240083c2:	f7fc ff63 	bl	2400528c <HAL_GetTick>
240083c6:	1b80      	subs	r0, r0, r6
240083c8:	2802      	cmp	r0, #2
240083ca:	f200 80a1 	bhi.w	24008510 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
240083ce:	682b      	ldr	r3, [r5, #0]
240083d0:	075b      	lsls	r3, r3, #29
240083d2:	d5f6      	bpl.n	240083c2 <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
240083d4:	f7fc ff72 	bl	240052bc <HAL_GetREVID>
240083d8:	f241 0303 	movw	r3, #4099	; 0x1003
240083dc:	4298      	cmp	r0, r3
240083de:	f200 80fe 	bhi.w	240085de <HAL_RCC_OscConfig+0x3d2>
240083e2:	6922      	ldr	r2, [r4, #16]
240083e4:	686b      	ldr	r3, [r5, #4]
240083e6:	2a40      	cmp	r2, #64	; 0x40
240083e8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
240083ec:	bf0c      	ite	eq
240083ee:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
240083f2:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
240083f6:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
240083f8:	6823      	ldr	r3, [r4, #0]
240083fa:	e741      	b.n	24008280 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
240083fc:	2b18      	cmp	r3, #24
240083fe:	f000 80ea 	beq.w	240085d6 <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24008402:	4d2b      	ldr	r5, [pc, #172]	; (240084b0 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
24008404:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24008406:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
24008408:	2a00      	cmp	r2, #0
2400840a:	f000 80d3 	beq.w	240085b4 <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
2400840e:	f023 0319 	bic.w	r3, r3, #25
24008412:	4313      	orrs	r3, r2
24008414:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24008416:	f7fc ff39 	bl	2400528c <HAL_GetTick>
2400841a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
2400841c:	e004      	b.n	24008428 <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
2400841e:	f7fc ff35 	bl	2400528c <HAL_GetTick>
24008422:	1b80      	subs	r0, r0, r6
24008424:	2802      	cmp	r0, #2
24008426:	d873      	bhi.n	24008510 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24008428:	682b      	ldr	r3, [r5, #0]
2400842a:	075f      	lsls	r7, r3, #29
2400842c:	d5f7      	bpl.n	2400841e <HAL_RCC_OscConfig+0x212>
2400842e:	e7d1      	b.n	240083d4 <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
24008430:	f001 0103 	and.w	r1, r1, #3
24008434:	2902      	cmp	r1, #2
24008436:	f47f aefc 	bne.w	24008232 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
2400843a:	4a1d      	ldr	r2, [pc, #116]	; (240084b0 <HAL_RCC_OscConfig+0x2a4>)
2400843c:	6812      	ldr	r2, [r2, #0]
2400843e:	0392      	lsls	r2, r2, #14
24008440:	f57f af1b 	bpl.w	2400827a <HAL_RCC_OscConfig+0x6e>
24008444:	6862      	ldr	r2, [r4, #4]
24008446:	2a00      	cmp	r2, #0
24008448:	f47f af17 	bne.w	2400827a <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
2400844c:	2001      	movs	r0, #1
}
2400844e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
24008450:	f002 0203 	and.w	r2, r2, #3
24008454:	2a01      	cmp	r2, #1
24008456:	f47f af20 	bne.w	2400829a <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
2400845a:	4b15      	ldr	r3, [pc, #84]	; (240084b0 <HAL_RCC_OscConfig+0x2a4>)
2400845c:	681b      	ldr	r3, [r3, #0]
2400845e:	05da      	lsls	r2, r3, #23
24008460:	d502      	bpl.n	24008468 <HAL_RCC_OscConfig+0x25c>
24008462:	69e3      	ldr	r3, [r4, #28]
24008464:	2b80      	cmp	r3, #128	; 0x80
24008466:	d1f1      	bne.n	2400844c <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24008468:	f7fc ff28 	bl	240052bc <HAL_GetREVID>
2400846c:	f241 0303 	movw	r3, #4099	; 0x1003
24008470:	4298      	cmp	r0, r3
24008472:	f200 80bf 	bhi.w	240085f4 <HAL_RCC_OscConfig+0x3e8>
24008476:	6a22      	ldr	r2, [r4, #32]
24008478:	2a20      	cmp	r2, #32
2400847a:	f000 81ad 	beq.w	240087d8 <HAL_RCC_OscConfig+0x5cc>
2400847e:	490c      	ldr	r1, [pc, #48]	; (240084b0 <HAL_RCC_OscConfig+0x2a4>)
24008480:	684b      	ldr	r3, [r1, #4]
24008482:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
24008486:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
2400848a:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
2400848c:	6823      	ldr	r3, [r4, #0]
2400848e:	e72d      	b.n	240082ec <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
24008490:	4a07      	ldr	r2, [pc, #28]	; (240084b0 <HAL_RCC_OscConfig+0x2a4>)
24008492:	6813      	ldr	r3, [r2, #0]
24008494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24008498:	6013      	str	r3, [r2, #0]
2400849a:	e6db      	b.n	24008254 <HAL_RCC_OscConfig+0x48>
    PWR->CR1 |= PWR_CR1_DBP;
2400849c:	4d05      	ldr	r5, [pc, #20]	; (240084b4 <HAL_RCC_OscConfig+0x2a8>)
2400849e:	682b      	ldr	r3, [r5, #0]
240084a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
240084a4:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
240084a6:	f7fc fef1 	bl	2400528c <HAL_GetTick>
240084aa:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
240084ac:	e009      	b.n	240084c2 <HAL_RCC_OscConfig+0x2b6>
240084ae:	bf00      	nop
240084b0:	58024400 	.word	0x58024400
240084b4:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
240084b8:	f7fc fee8 	bl	2400528c <HAL_GetTick>
240084bc:	1b80      	subs	r0, r0, r6
240084be:	2864      	cmp	r0, #100	; 0x64
240084c0:	d826      	bhi.n	24008510 <HAL_RCC_OscConfig+0x304>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
240084c2:	682b      	ldr	r3, [r5, #0]
240084c4:	05da      	lsls	r2, r3, #23
240084c6:	d5f7      	bpl.n	240084b8 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
240084c8:	68a3      	ldr	r3, [r4, #8]
240084ca:	2b01      	cmp	r3, #1
240084cc:	f000 8171 	beq.w	240087b2 <HAL_RCC_OscConfig+0x5a6>
240084d0:	2b00      	cmp	r3, #0
240084d2:	f040 8174 	bne.w	240087be <HAL_RCC_OscConfig+0x5b2>
240084d6:	4baa      	ldr	r3, [pc, #680]	; (24008780 <HAL_RCC_OscConfig+0x574>)
240084d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
240084da:	f022 0201 	bic.w	r2, r2, #1
240084de:	671a      	str	r2, [r3, #112]	; 0x70
240084e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
240084e2:	f022 0204 	bic.w	r2, r2, #4
240084e6:	671a      	str	r2, [r3, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
240084e8:	68a3      	ldr	r3, [r4, #8]
240084ea:	2b00      	cmp	r3, #0
240084ec:	f000 8140 	beq.w	24008770 <HAL_RCC_OscConfig+0x564>
      tickstart = HAL_GetTick();
240084f0:	f7fc fecc 	bl	2400528c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
240084f4:	4ea2      	ldr	r6, [pc, #648]	; (24008780 <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
240084f6:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
240084fa:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
240084fc:	e004      	b.n	24008508 <HAL_RCC_OscConfig+0x2fc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
240084fe:	f7fc fec5 	bl	2400528c <HAL_GetTick>
24008502:	1b40      	subs	r0, r0, r5
24008504:	42b8      	cmp	r0, r7
24008506:	d803      	bhi.n	24008510 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24008508:	6f33      	ldr	r3, [r6, #112]	; 0x70
2400850a:	079b      	lsls	r3, r3, #30
2400850c:	d5f7      	bpl.n	240084fe <HAL_RCC_OscConfig+0x2f2>
2400850e:	e722      	b.n	24008356 <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
24008510:	2003      	movs	r0, #3
}
24008512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
24008514:	f7fc feba 	bl	2400528c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
24008518:	4e99      	ldr	r6, [pc, #612]	; (24008780 <HAL_RCC_OscConfig+0x574>)
        tickstart = HAL_GetTick();
2400851a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
2400851c:	e004      	b.n	24008528 <HAL_RCC_OscConfig+0x31c>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
2400851e:	f7fc feb5 	bl	2400528c <HAL_GetTick>
24008522:	1b40      	subs	r0, r0, r5
24008524:	2864      	cmp	r0, #100	; 0x64
24008526:	d8f3      	bhi.n	24008510 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
24008528:	6833      	ldr	r3, [r6, #0]
2400852a:	039f      	lsls	r7, r3, #14
2400852c:	d4f7      	bmi.n	2400851e <HAL_RCC_OscConfig+0x312>
2400852e:	e6a3      	b.n	24008278 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
24008530:	6f6b      	ldr	r3, [r5, #116]	; 0x74
24008532:	f023 0301 	bic.w	r3, r3, #1
24008536:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
24008538:	f7fc fea8 	bl	2400528c <HAL_GetTick>
2400853c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
2400853e:	e004      	b.n	2400854a <HAL_RCC_OscConfig+0x33e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
24008540:	f7fc fea4 	bl	2400528c <HAL_GetTick>
24008544:	1b80      	subs	r0, r0, r6
24008546:	2802      	cmp	r0, #2
24008548:	d8e2      	bhi.n	24008510 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
2400854a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
2400854c:	0799      	lsls	r1, r3, #30
2400854e:	d4f7      	bmi.n	24008540 <HAL_RCC_OscConfig+0x334>
24008550:	e6e4      	b.n	2400831c <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
24008552:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
24008556:	4b8a      	ldr	r3, [pc, #552]	; (24008780 <HAL_RCC_OscConfig+0x574>)
24008558:	681a      	ldr	r2, [r3, #0]
2400855a:	f47f ae74 	bne.w	24008246 <HAL_RCC_OscConfig+0x3a>
2400855e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
24008562:	601a      	str	r2, [r3, #0]
24008564:	681a      	ldr	r2, [r3, #0]
24008566:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
2400856a:	601a      	str	r2, [r3, #0]
2400856c:	e672      	b.n	24008254 <HAL_RCC_OscConfig+0x48>
      __HAL_RCC_HSI48_DISABLE();
2400856e:	682b      	ldr	r3, [r5, #0]
24008570:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
24008574:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
24008576:	f7fc fe89 	bl	2400528c <HAL_GetTick>
2400857a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
2400857c:	e004      	b.n	24008588 <HAL_RCC_OscConfig+0x37c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
2400857e:	f7fc fe85 	bl	2400528c <HAL_GetTick>
24008582:	1b80      	subs	r0, r0, r6
24008584:	2802      	cmp	r0, #2
24008586:	d8c3      	bhi.n	24008510 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
24008588:	682b      	ldr	r3, [r5, #0]
2400858a:	0498      	lsls	r0, r3, #18
2400858c:	d4f7      	bmi.n	2400857e <HAL_RCC_OscConfig+0x372>
2400858e:	e6de      	b.n	2400834e <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
24008590:	682b      	ldr	r3, [r5, #0]
24008592:	f023 0380 	bic.w	r3, r3, #128	; 0x80
24008596:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24008598:	f7fc fe78 	bl	2400528c <HAL_GetTick>
2400859c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
2400859e:	e004      	b.n	240085aa <HAL_RCC_OscConfig+0x39e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
240085a0:	f7fc fe74 	bl	2400528c <HAL_GetTick>
240085a4:	1b80      	subs	r0, r0, r6
240085a6:	2802      	cmp	r0, #2
240085a8:	d8b2      	bhi.n	24008510 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
240085aa:	682b      	ldr	r3, [r5, #0]
240085ac:	05df      	lsls	r7, r3, #23
240085ae:	d4f7      	bmi.n	240085a0 <HAL_RCC_OscConfig+0x394>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
240085b0:	6823      	ldr	r3, [r4, #0]
240085b2:	e69b      	b.n	240082ec <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
240085b4:	f023 0301 	bic.w	r3, r3, #1
240085b8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
240085ba:	f7fc fe67 	bl	2400528c <HAL_GetTick>
240085be:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
240085c0:	e004      	b.n	240085cc <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
240085c2:	f7fc fe63 	bl	2400528c <HAL_GetTick>
240085c6:	1b80      	subs	r0, r0, r6
240085c8:	2802      	cmp	r0, #2
240085ca:	d8a1      	bhi.n	24008510 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
240085cc:	682b      	ldr	r3, [r5, #0]
240085ce:	0758      	lsls	r0, r3, #29
240085d0:	d4f7      	bmi.n	240085c2 <HAL_RCC_OscConfig+0x3b6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
240085d2:	6823      	ldr	r3, [r4, #0]
240085d4:	e654      	b.n	24008280 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
240085d6:	0790      	lsls	r0, r2, #30
240085d8:	f47f af13 	bne.w	24008402 <HAL_RCC_OscConfig+0x1f6>
240085dc:	e6e0      	b.n	240083a0 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
240085de:	686b      	ldr	r3, [r5, #4]
240085e0:	6922      	ldr	r2, [r4, #16]
240085e2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
240085e6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
240085ea:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
240085ec:	6823      	ldr	r3, [r4, #0]
240085ee:	e647      	b.n	24008280 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
240085f0:	2001      	movs	r0, #1
}
240085f2:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
240085f4:	4a62      	ldr	r2, [pc, #392]	; (24008780 <HAL_RCC_OscConfig+0x574>)
240085f6:	6a21      	ldr	r1, [r4, #32]
240085f8:	68d3      	ldr	r3, [r2, #12]
240085fa:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
240085fe:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
24008602:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24008604:	6823      	ldr	r3, [r4, #0]
24008606:	e671      	b.n	240082ec <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
24008608:	f7fc fe40 	bl	2400528c <HAL_GetTick>
2400860c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
2400860e:	e005      	b.n	2400861c <HAL_RCC_OscConfig+0x410>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24008610:	f7fc fe3c 	bl	2400528c <HAL_GetTick>
24008614:	1b80      	subs	r0, r0, r6
24008616:	2802      	cmp	r0, #2
24008618:	f63f af7a 	bhi.w	24008510 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
2400861c:	682b      	ldr	r3, [r5, #0]
2400861e:	0199      	lsls	r1, r3, #6
24008620:	d4f6      	bmi.n	24008610 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
24008622:	6aa9      	ldr	r1, [r5, #40]	; 0x28
24008624:	4b57      	ldr	r3, [pc, #348]	; (24008784 <HAL_RCC_OscConfig+0x578>)
24008626:	6aa2      	ldr	r2, [r4, #40]	; 0x28
24008628:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
2400862a:	4957      	ldr	r1, [pc, #348]	; (24008788 <HAL_RCC_OscConfig+0x57c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
2400862c:	4e54      	ldr	r6, [pc, #336]	; (24008780 <HAL_RCC_OscConfig+0x574>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
2400862e:	4313      	orrs	r3, r2
24008630:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
24008632:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
24008636:	62ab      	str	r3, [r5, #40]	; 0x28
24008638:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
2400863c:	3b01      	subs	r3, #1
2400863e:	3a01      	subs	r2, #1
24008640:	025b      	lsls	r3, r3, #9
24008642:	0412      	lsls	r2, r2, #16
24008644:	b29b      	uxth	r3, r3
24008646:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
2400864a:	4313      	orrs	r3, r2
2400864c:	6b22      	ldr	r2, [r4, #48]	; 0x30
2400864e:	3a01      	subs	r2, #1
24008650:	f3c2 0208 	ubfx	r2, r2, #0, #9
24008654:	4313      	orrs	r3, r2
24008656:	6be2      	ldr	r2, [r4, #60]	; 0x3c
24008658:	3a01      	subs	r2, #1
2400865a:	0612      	lsls	r2, r2, #24
2400865c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
24008660:	4313      	orrs	r3, r2
24008662:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
24008664:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24008666:	f023 0301 	bic.w	r3, r3, #1
2400866a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
2400866c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
2400866e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
24008670:	4011      	ands	r1, r2
24008672:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
24008676:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
24008678:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
2400867a:	6c22      	ldr	r2, [r4, #64]	; 0x40
2400867c:	f023 030c 	bic.w	r3, r3, #12
24008680:	4313      	orrs	r3, r2
24008682:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
24008684:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24008686:	6c62      	ldr	r2, [r4, #68]	; 0x44
24008688:	f023 0302 	bic.w	r3, r3, #2
2400868c:	4313      	orrs	r3, r2
2400868e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
24008690:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24008692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24008696:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008698:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
2400869a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400869e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
240086a0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
240086a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
240086a6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
240086a8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
240086aa:	f043 0301 	orr.w	r3, r3, #1
240086ae:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
240086b0:	682b      	ldr	r3, [r5, #0]
240086b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
240086b6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
240086b8:	f7fc fde8 	bl	2400528c <HAL_GetTick>
240086bc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
240086be:	e005      	b.n	240086cc <HAL_RCC_OscConfig+0x4c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
240086c0:	f7fc fde4 	bl	2400528c <HAL_GetTick>
240086c4:	1b00      	subs	r0, r0, r4
240086c6:	2802      	cmp	r0, #2
240086c8:	f63f af22 	bhi.w	24008510 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
240086cc:	6833      	ldr	r3, [r6, #0]
240086ce:	019a      	lsls	r2, r3, #6
240086d0:	d5f6      	bpl.n	240086c0 <HAL_RCC_OscConfig+0x4b4>
240086d2:	e65d      	b.n	24008390 <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
240086d4:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
240086d6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
240086d8:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
240086da:	f43f ae5a 	beq.w	24008392 <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
240086de:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
240086e2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
240086e4:	428b      	cmp	r3, r1
240086e6:	f47f aeb1 	bne.w	2400844c <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
240086ea:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
240086ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
240086f0:	429a      	cmp	r2, r3
240086f2:	f47f aeab 	bne.w	2400844c <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
240086f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
240086f8:	f3c6 0208 	ubfx	r2, r6, #0, #9
240086fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
240086fe:	429a      	cmp	r2, r3
24008700:	f47f aea4 	bne.w	2400844c <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
24008704:	6b63      	ldr	r3, [r4, #52]	; 0x34
24008706:	f3c6 2246 	ubfx	r2, r6, #9, #7
2400870a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
2400870c:	429a      	cmp	r2, r3
2400870e:	f47f ae9d 	bne.w	2400844c <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
24008712:	6ba3      	ldr	r3, [r4, #56]	; 0x38
24008714:	f3c6 4206 	ubfx	r2, r6, #16, #7
24008718:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
2400871a:	429a      	cmp	r2, r3
2400871c:	f47f ae96 	bne.w	2400844c <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
24008720:	6be3      	ldr	r3, [r4, #60]	; 0x3c
24008722:	f3c6 6606 	ubfx	r6, r6, #24, #7
24008726:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
24008728:	429e      	cmp	r6, r3
2400872a:	f47f ae8f 	bne.w	2400844c <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
2400872e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
24008730:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
24008732:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
24008736:	429a      	cmp	r2, r3
24008738:	f43f ae2a 	beq.w	24008390 <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
2400873c:	4a10      	ldr	r2, [pc, #64]	; (24008780 <HAL_RCC_OscConfig+0x574>)
2400873e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008740:	f023 0301 	bic.w	r3, r3, #1
24008744:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
24008746:	f7fc fda1 	bl	2400528c <HAL_GetTick>
2400874a:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
2400874c:	f7fc fd9e 	bl	2400528c <HAL_GetTick>
24008750:	42a8      	cmp	r0, r5
24008752:	d0fb      	beq.n	2400874c <HAL_RCC_OscConfig+0x540>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
24008754:	4a0a      	ldr	r2, [pc, #40]	; (24008780 <HAL_RCC_OscConfig+0x574>)
  return HAL_OK;
24008756:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
24008758:	6ca1      	ldr	r1, [r4, #72]	; 0x48
2400875a:	4b0b      	ldr	r3, [pc, #44]	; (24008788 <HAL_RCC_OscConfig+0x57c>)
2400875c:	6b54      	ldr	r4, [r2, #52]	; 0x34
2400875e:	4023      	ands	r3, r4
24008760:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
24008764:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
24008766:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008768:	f043 0301 	orr.w	r3, r3, #1
2400876c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
2400876e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tickstart = HAL_GetTick();
24008770:	f7fc fd8c 	bl	2400528c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
24008774:	4e02      	ldr	r6, [pc, #8]	; (24008780 <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24008776:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
2400877a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
2400877c:	e00c      	b.n	24008798 <HAL_RCC_OscConfig+0x58c>
2400877e:	bf00      	nop
24008780:	58024400 	.word	0x58024400
24008784:	fffffc0c 	.word	0xfffffc0c
24008788:	ffff0007 	.word	0xffff0007
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2400878c:	f7fc fd7e 	bl	2400528c <HAL_GetTick>
24008790:	1b40      	subs	r0, r0, r5
24008792:	42b8      	cmp	r0, r7
24008794:	f63f aebc 	bhi.w	24008510 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
24008798:	6f33      	ldr	r3, [r6, #112]	; 0x70
2400879a:	0798      	lsls	r0, r3, #30
2400879c:	d4f6      	bmi.n	2400878c <HAL_RCC_OscConfig+0x580>
2400879e:	e5da      	b.n	24008356 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
240087a0:	68eb      	ldr	r3, [r5, #12]
240087a2:	6a22      	ldr	r2, [r4, #32]
240087a4:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
240087a8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
240087ac:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
240087ae:	6823      	ldr	r3, [r4, #0]
240087b0:	e59c      	b.n	240082ec <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
240087b2:	4a0e      	ldr	r2, [pc, #56]	; (240087ec <HAL_RCC_OscConfig+0x5e0>)
240087b4:	6f13      	ldr	r3, [r2, #112]	; 0x70
240087b6:	f043 0301 	orr.w	r3, r3, #1
240087ba:	6713      	str	r3, [r2, #112]	; 0x70
240087bc:	e694      	b.n	240084e8 <HAL_RCC_OscConfig+0x2dc>
240087be:	2b05      	cmp	r3, #5
240087c0:	4b0a      	ldr	r3, [pc, #40]	; (240087ec <HAL_RCC_OscConfig+0x5e0>)
240087c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
240087c4:	f47f ae89 	bne.w	240084da <HAL_RCC_OscConfig+0x2ce>
240087c8:	f042 0204 	orr.w	r2, r2, #4
240087cc:	671a      	str	r2, [r3, #112]	; 0x70
240087ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
240087d0:	f042 0201 	orr.w	r2, r2, #1
240087d4:	671a      	str	r2, [r3, #112]	; 0x70
240087d6:	e687      	b.n	240084e8 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
240087d8:	4a04      	ldr	r2, [pc, #16]	; (240087ec <HAL_RCC_OscConfig+0x5e0>)
240087da:	6853      	ldr	r3, [r2, #4]
240087dc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
240087e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
240087e4:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
240087e6:	6823      	ldr	r3, [r4, #0]
240087e8:	e580      	b.n	240082ec <HAL_RCC_OscConfig+0xe0>
240087ea:	bf00      	nop
240087ec:	58024400 	.word	0x58024400

240087f0 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
240087f0:	4a48      	ldr	r2, [pc, #288]	; (24008914 <HAL_RCC_GetSysClockFreq+0x124>)
240087f2:	6913      	ldr	r3, [r2, #16]
240087f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
240087f8:	2b10      	cmp	r3, #16
240087fa:	d004      	beq.n	24008806 <HAL_RCC_GetSysClockFreq+0x16>
240087fc:	2b18      	cmp	r3, #24
240087fe:	d00d      	beq.n	2400881c <HAL_RCC_GetSysClockFreq+0x2c>
24008800:	b11b      	cbz	r3, 2400880a <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
24008802:	4845      	ldr	r0, [pc, #276]	; (24008918 <HAL_RCC_GetSysClockFreq+0x128>)
24008804:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
24008806:	4845      	ldr	r0, [pc, #276]	; (2400891c <HAL_RCC_GetSysClockFreq+0x12c>)
24008808:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2400880a:	6813      	ldr	r3, [r2, #0]
2400880c:	0699      	lsls	r1, r3, #26
2400880e:	d54a      	bpl.n	240088a6 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008810:	6813      	ldr	r3, [r2, #0]
24008812:	4843      	ldr	r0, [pc, #268]	; (24008920 <HAL_RCC_GetSysClockFreq+0x130>)
24008814:	f3c3 03c1 	ubfx	r3, r3, #3, #2
24008818:	40d8      	lsrs	r0, r3
2400881a:	4770      	bx	lr
{
2400881c:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400881e:	6a93      	ldr	r3, [r2, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
24008820:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
24008822:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
24008824:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24008828:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
2400882a:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
2400882e:	d038      	beq.n	240088a2 <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24008830:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
24008834:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24008838:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
2400883c:	fb05 f101 	mul.w	r1, r5, r1
24008840:	2b01      	cmp	r3, #1
24008842:	ee07 1a90 	vmov	s15, r1
24008846:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
2400884a:	d002      	beq.n	24008852 <HAL_RCC_GetSysClockFreq+0x62>
2400884c:	2b02      	cmp	r3, #2
2400884e:	d02c      	beq.n	240088aa <HAL_RCC_GetSysClockFreq+0xba>
24008850:	b393      	cbz	r3, 240088b8 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008852:	ee07 0a90 	vmov	s15, r0
24008856:	ed9f 5a33 	vldr	s10, [pc, #204]	; 24008924 <HAL_RCC_GetSysClockFreq+0x134>
2400885a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400885e:	6b13      	ldr	r3, [r2, #48]	; 0x30
24008860:	eec5 6a27 	vdiv.f32	s13, s10, s15
24008864:	ed9f 6a30 	vldr	s12, [pc, #192]	; 24008928 <HAL_RCC_GetSysClockFreq+0x138>
24008868:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400886c:	ee07 3a90 	vmov	s15, r3
24008870:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24008874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008878:	ee77 7aa5 	vadd.f32	s15, s15, s11
2400887c:	eee7 7a06 	vfma.f32	s15, s14, s12
24008880:	ee66 6aa7 	vmul.f32	s13, s13, s15
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
24008884:	4b23      	ldr	r3, [pc, #140]	; (24008914 <HAL_RCC_GetSysClockFreq+0x124>)
24008886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24008888:	f3c3 2346 	ubfx	r3, r3, #9, #7
2400888c:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
2400888e:	ee07 3a90 	vmov	s15, r3
24008892:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
24008896:	eec6 7a87 	vdiv.f32	s15, s13, s14
2400889a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2400889e:	ee17 0a90 	vmov	r0, s15
}
240088a2:	bc30      	pop	{r4, r5}
240088a4:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
240088a6:	481e      	ldr	r0, [pc, #120]	; (24008920 <HAL_RCC_GetSysClockFreq+0x130>)
}
240088a8:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240088aa:	ee07 0a90 	vmov	s15, r0
240088ae:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 2400892c <HAL_RCC_GetSysClockFreq+0x13c>
240088b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240088b6:	e7d2      	b.n	2400885e <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
240088b8:	6813      	ldr	r3, [r2, #0]
240088ba:	069b      	lsls	r3, r3, #26
240088bc:	d522      	bpl.n	24008904 <HAL_RCC_GetSysClockFreq+0x114>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240088be:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240088c0:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240088c4:	4916      	ldr	r1, [pc, #88]	; (24008920 <HAL_RCC_GetSysClockFreq+0x130>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240088c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240088ca:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240088cc:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240088d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240088d4:	ed9f 5a14 	vldr	s10, [pc, #80]	; 24008928 <HAL_RCC_GetSysClockFreq+0x138>
240088d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240088dc:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240088de:	ee06 3a10 	vmov	s12, r3
240088e2:	ee05 1a90 	vmov	s11, r1
240088e6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
240088ea:	eef8 5ae5 	vcvt.f32.s32	s11, s11
240088ee:	ee36 6a26 	vadd.f32	s12, s12, s13
240088f2:	eec5 6aa7 	vdiv.f32	s13, s11, s15
240088f6:	eef0 7a46 	vmov.f32	s15, s12
240088fa:	eee7 7a05 	vfma.f32	s15, s14, s10
240088fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
24008902:	e7bf      	b.n	24008884 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008904:	ee07 0a90 	vmov	s15, r0
24008908:	ed9f 5a09 	vldr	s10, [pc, #36]	; 24008930 <HAL_RCC_GetSysClockFreq+0x140>
2400890c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008910:	e7a5      	b.n	2400885e <HAL_RCC_GetSysClockFreq+0x6e>
24008912:	bf00      	nop
24008914:	58024400 	.word	0x58024400
24008918:	003d0900 	.word	0x003d0900
2400891c:	00f42400 	.word	0x00f42400
24008920:	03d09000 	.word	0x03d09000
24008924:	4a742400 	.word	0x4a742400
24008928:	39000000 	.word	0x39000000
2400892c:	4b742400 	.word	0x4b742400
24008930:	4c742400 	.word	0x4c742400

24008934 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
24008934:	2800      	cmp	r0, #0
24008936:	f000 811a 	beq.w	24008b6e <HAL_RCC_ClockConfig+0x23a>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
2400893a:	4a92      	ldr	r2, [pc, #584]	; (24008b84 <HAL_RCC_ClockConfig+0x250>)
{
2400893c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
24008940:	6813      	ldr	r3, [r2, #0]
24008942:	4604      	mov	r4, r0
24008944:	460d      	mov	r5, r1
24008946:	f003 030f 	and.w	r3, r3, #15
2400894a:	428b      	cmp	r3, r1
2400894c:	d20c      	bcs.n	24008968 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
2400894e:	6813      	ldr	r3, [r2, #0]
24008950:	f023 030f 	bic.w	r3, r3, #15
24008954:	430b      	orrs	r3, r1
24008956:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
24008958:	6813      	ldr	r3, [r2, #0]
2400895a:	f003 030f 	and.w	r3, r3, #15
2400895e:	428b      	cmp	r3, r1
24008960:	d002      	beq.n	24008968 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
24008962:	2001      	movs	r0, #1
}
24008964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
24008968:	6823      	ldr	r3, [r4, #0]
2400896a:	075f      	lsls	r7, r3, #29
2400896c:	d50c      	bpl.n	24008988 <HAL_RCC_ClockConfig+0x54>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
2400896e:	4986      	ldr	r1, [pc, #536]	; (24008b88 <HAL_RCC_ClockConfig+0x254>)
24008970:	6920      	ldr	r0, [r4, #16]
24008972:	698a      	ldr	r2, [r1, #24]
24008974:	f002 0270 	and.w	r2, r2, #112	; 0x70
24008978:	4290      	cmp	r0, r2
2400897a:	d905      	bls.n	24008988 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
2400897c:	698b      	ldr	r3, [r1, #24]
2400897e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24008982:	4303      	orrs	r3, r0
24008984:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
24008986:	6823      	ldr	r3, [r4, #0]
24008988:	071e      	lsls	r6, r3, #28
2400898a:	d50c      	bpl.n	240089a6 <HAL_RCC_ClockConfig+0x72>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
2400898c:	497e      	ldr	r1, [pc, #504]	; (24008b88 <HAL_RCC_ClockConfig+0x254>)
2400898e:	6960      	ldr	r0, [r4, #20]
24008990:	69ca      	ldr	r2, [r1, #28]
24008992:	f002 0270 	and.w	r2, r2, #112	; 0x70
24008996:	4290      	cmp	r0, r2
24008998:	d905      	bls.n	240089a6 <HAL_RCC_ClockConfig+0x72>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
2400899a:	69cb      	ldr	r3, [r1, #28]
2400899c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
240089a0:	4303      	orrs	r3, r0
240089a2:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
240089a4:	6823      	ldr	r3, [r4, #0]
240089a6:	06d8      	lsls	r0, r3, #27
240089a8:	d50c      	bpl.n	240089c4 <HAL_RCC_ClockConfig+0x90>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
240089aa:	4977      	ldr	r1, [pc, #476]	; (24008b88 <HAL_RCC_ClockConfig+0x254>)
240089ac:	69a0      	ldr	r0, [r4, #24]
240089ae:	69ca      	ldr	r2, [r1, #28]
240089b0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
240089b4:	4290      	cmp	r0, r2
240089b6:	d905      	bls.n	240089c4 <HAL_RCC_ClockConfig+0x90>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
240089b8:	69cb      	ldr	r3, [r1, #28]
240089ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
240089be:	4303      	orrs	r3, r0
240089c0:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
240089c2:	6823      	ldr	r3, [r4, #0]
240089c4:	0699      	lsls	r1, r3, #26
240089c6:	d50c      	bpl.n	240089e2 <HAL_RCC_ClockConfig+0xae>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
240089c8:	496f      	ldr	r1, [pc, #444]	; (24008b88 <HAL_RCC_ClockConfig+0x254>)
240089ca:	69e0      	ldr	r0, [r4, #28]
240089cc:	6a0a      	ldr	r2, [r1, #32]
240089ce:	f002 0270 	and.w	r2, r2, #112	; 0x70
240089d2:	4290      	cmp	r0, r2
240089d4:	d905      	bls.n	240089e2 <HAL_RCC_ClockConfig+0xae>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
240089d6:	6a0b      	ldr	r3, [r1, #32]
240089d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
240089dc:	4303      	orrs	r3, r0
240089de:	620b      	str	r3, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
240089e0:	6823      	ldr	r3, [r4, #0]
240089e2:	079a      	lsls	r2, r3, #30
240089e4:	f140 8083 	bpl.w	24008aee <HAL_RCC_ClockConfig+0x1ba>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
240089e8:	4867      	ldr	r0, [pc, #412]	; (24008b88 <HAL_RCC_ClockConfig+0x254>)
240089ea:	68e1      	ldr	r1, [r4, #12]
240089ec:	6982      	ldr	r2, [r0, #24]
240089ee:	f002 020f 	and.w	r2, r2, #15
240089f2:	4291      	cmp	r1, r2
240089f4:	f240 80a9 	bls.w	24008b4a <HAL_RCC_ClockConfig+0x216>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
240089f8:	6983      	ldr	r3, [r0, #24]
240089fa:	f023 030f 	bic.w	r3, r3, #15
240089fe:	430b      	orrs	r3, r1
24008a00:	6183      	str	r3, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
24008a02:	6823      	ldr	r3, [r4, #0]
24008a04:	07df      	lsls	r7, r3, #31
24008a06:	d474      	bmi.n	24008af2 <HAL_RCC_ClockConfig+0x1be>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
24008a08:	079f      	lsls	r7, r3, #30
24008a0a:	d507      	bpl.n	24008a1c <HAL_RCC_ClockConfig+0xe8>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
24008a0c:	4a5e      	ldr	r2, [pc, #376]	; (24008b88 <HAL_RCC_ClockConfig+0x254>)
24008a0e:	68e1      	ldr	r1, [r4, #12]
24008a10:	6993      	ldr	r3, [r2, #24]
24008a12:	f003 030f 	and.w	r3, r3, #15
24008a16:	428b      	cmp	r3, r1
24008a18:	f200 80a0 	bhi.w	24008b5c <HAL_RCC_ClockConfig+0x228>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
24008a1c:	4a59      	ldr	r2, [pc, #356]	; (24008b84 <HAL_RCC_ClockConfig+0x250>)
24008a1e:	6813      	ldr	r3, [r2, #0]
24008a20:	f003 030f 	and.w	r3, r3, #15
24008a24:	42ab      	cmp	r3, r5
24008a26:	d909      	bls.n	24008a3c <HAL_RCC_ClockConfig+0x108>
    __HAL_FLASH_SET_LATENCY(FLatency);
24008a28:	6813      	ldr	r3, [r2, #0]
24008a2a:	f023 030f 	bic.w	r3, r3, #15
24008a2e:	432b      	orrs	r3, r5
24008a30:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
24008a32:	6813      	ldr	r3, [r2, #0]
24008a34:	f003 030f 	and.w	r3, r3, #15
24008a38:	42ab      	cmp	r3, r5
24008a3a:	d192      	bne.n	24008962 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
24008a3c:	6823      	ldr	r3, [r4, #0]
24008a3e:	075e      	lsls	r6, r3, #29
24008a40:	d50c      	bpl.n	24008a5c <HAL_RCC_ClockConfig+0x128>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
24008a42:	4951      	ldr	r1, [pc, #324]	; (24008b88 <HAL_RCC_ClockConfig+0x254>)
24008a44:	6920      	ldr	r0, [r4, #16]
24008a46:	698a      	ldr	r2, [r1, #24]
24008a48:	f002 0270 	and.w	r2, r2, #112	; 0x70
24008a4c:	4290      	cmp	r0, r2
24008a4e:	d205      	bcs.n	24008a5c <HAL_RCC_ClockConfig+0x128>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
24008a50:	698b      	ldr	r3, [r1, #24]
24008a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24008a56:	4303      	orrs	r3, r0
24008a58:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
24008a5a:	6823      	ldr	r3, [r4, #0]
24008a5c:	071d      	lsls	r5, r3, #28
24008a5e:	d50c      	bpl.n	24008a7a <HAL_RCC_ClockConfig+0x146>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
24008a60:	4949      	ldr	r1, [pc, #292]	; (24008b88 <HAL_RCC_ClockConfig+0x254>)
24008a62:	6960      	ldr	r0, [r4, #20]
24008a64:	69ca      	ldr	r2, [r1, #28]
24008a66:	f002 0270 	and.w	r2, r2, #112	; 0x70
24008a6a:	4290      	cmp	r0, r2
24008a6c:	d205      	bcs.n	24008a7a <HAL_RCC_ClockConfig+0x146>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
24008a6e:	69cb      	ldr	r3, [r1, #28]
24008a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24008a74:	4303      	orrs	r3, r0
24008a76:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
24008a78:	6823      	ldr	r3, [r4, #0]
24008a7a:	06d8      	lsls	r0, r3, #27
24008a7c:	d50c      	bpl.n	24008a98 <HAL_RCC_ClockConfig+0x164>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
24008a7e:	4942      	ldr	r1, [pc, #264]	; (24008b88 <HAL_RCC_ClockConfig+0x254>)
24008a80:	69a0      	ldr	r0, [r4, #24]
24008a82:	69ca      	ldr	r2, [r1, #28]
24008a84:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
24008a88:	4290      	cmp	r0, r2
24008a8a:	d205      	bcs.n	24008a98 <HAL_RCC_ClockConfig+0x164>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
24008a8c:	69cb      	ldr	r3, [r1, #28]
24008a8e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
24008a92:	4303      	orrs	r3, r0
24008a94:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
24008a96:	6823      	ldr	r3, [r4, #0]
24008a98:	0699      	lsls	r1, r3, #26
24008a9a:	d50b      	bpl.n	24008ab4 <HAL_RCC_ClockConfig+0x180>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
24008a9c:	4a3a      	ldr	r2, [pc, #232]	; (24008b88 <HAL_RCC_ClockConfig+0x254>)
24008a9e:	69e1      	ldr	r1, [r4, #28]
24008aa0:	6a13      	ldr	r3, [r2, #32]
24008aa2:	f003 0370 	and.w	r3, r3, #112	; 0x70
24008aa6:	4299      	cmp	r1, r3
24008aa8:	d204      	bcs.n	24008ab4 <HAL_RCC_ClockConfig+0x180>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
24008aaa:	6a13      	ldr	r3, [r2, #32]
24008aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24008ab0:	430b      	orrs	r3, r1
24008ab2:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24008ab4:	f7ff fe9c 	bl	240087f0 <HAL_RCC_GetSysClockFreq>
24008ab8:	4a33      	ldr	r2, [pc, #204]	; (24008b88 <HAL_RCC_ClockConfig+0x254>)
24008aba:	4603      	mov	r3, r0
24008abc:	4833      	ldr	r0, [pc, #204]	; (24008b8c <HAL_RCC_ClockConfig+0x258>)
24008abe:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24008ac0:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24008ac2:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
24008ac6:	4d32      	ldr	r5, [pc, #200]	; (24008b90 <HAL_RCC_ClockConfig+0x25c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24008ac8:	f002 020f 	and.w	r2, r2, #15
24008acc:	4c31      	ldr	r4, [pc, #196]	; (24008b94 <HAL_RCC_ClockConfig+0x260>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24008ace:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24008ad0:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24008ad2:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
24008ad6:	4830      	ldr	r0, [pc, #192]	; (24008b98 <HAL_RCC_ClockConfig+0x264>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24008ad8:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24008adc:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
24008ade:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
24008ae0:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24008ae2:	40d3      	lsrs	r3, r2
24008ae4:	6023      	str	r3, [r4, #0]
}
24008ae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
24008aea:	f7fc bb6d 	b.w	240051c8 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
24008aee:	07db      	lsls	r3, r3, #31
24008af0:	d594      	bpl.n	24008a1c <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
24008af2:	4a25      	ldr	r2, [pc, #148]	; (24008b88 <HAL_RCC_ClockConfig+0x254>)
24008af4:	68a1      	ldr	r1, [r4, #8]
24008af6:	6993      	ldr	r3, [r2, #24]
24008af8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
24008afc:	430b      	orrs	r3, r1
24008afe:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
24008b00:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24008b02:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
24008b04:	2902      	cmp	r1, #2
24008b06:	d034      	beq.n	24008b72 <HAL_RCC_ClockConfig+0x23e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
24008b08:	2903      	cmp	r1, #3
24008b0a:	d02d      	beq.n	24008b68 <HAL_RCC_ClockConfig+0x234>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
24008b0c:	2901      	cmp	r1, #1
24008b0e:	d035      	beq.n	24008b7c <HAL_RCC_ClockConfig+0x248>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24008b10:	075b      	lsls	r3, r3, #29
24008b12:	f57f af26 	bpl.w	24008962 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
24008b16:	4e1c      	ldr	r6, [pc, #112]	; (24008b88 <HAL_RCC_ClockConfig+0x254>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
24008b18:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
24008b1c:	6933      	ldr	r3, [r6, #16]
24008b1e:	f023 0307 	bic.w	r3, r3, #7
24008b22:	430b      	orrs	r3, r1
24008b24:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
24008b26:	f7fc fbb1 	bl	2400528c <HAL_GetTick>
24008b2a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
24008b2c:	e004      	b.n	24008b38 <HAL_RCC_ClockConfig+0x204>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
24008b2e:	f7fc fbad 	bl	2400528c <HAL_GetTick>
24008b32:	1bc0      	subs	r0, r0, r7
24008b34:	4540      	cmp	r0, r8
24008b36:	d81f      	bhi.n	24008b78 <HAL_RCC_ClockConfig+0x244>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
24008b38:	6933      	ldr	r3, [r6, #16]
24008b3a:	6862      	ldr	r2, [r4, #4]
24008b3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
24008b40:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
24008b44:	d1f3      	bne.n	24008b2e <HAL_RCC_ClockConfig+0x1fa>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
24008b46:	6823      	ldr	r3, [r4, #0]
24008b48:	e75e      	b.n	24008a08 <HAL_RCC_ClockConfig+0xd4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
24008b4a:	07da      	lsls	r2, r3, #31
24008b4c:	d4d1      	bmi.n	24008af2 <HAL_RCC_ClockConfig+0x1be>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
24008b4e:	4a0e      	ldr	r2, [pc, #56]	; (24008b88 <HAL_RCC_ClockConfig+0x254>)
24008b50:	6993      	ldr	r3, [r2, #24]
24008b52:	f003 030f 	and.w	r3, r3, #15
24008b56:	428b      	cmp	r3, r1
24008b58:	f67f af60 	bls.w	24008a1c <HAL_RCC_ClockConfig+0xe8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
24008b5c:	6993      	ldr	r3, [r2, #24]
24008b5e:	f023 030f 	bic.w	r3, r3, #15
24008b62:	430b      	orrs	r3, r1
24008b64:	6193      	str	r3, [r2, #24]
24008b66:	e759      	b.n	24008a1c <HAL_RCC_ClockConfig+0xe8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24008b68:	0198      	lsls	r0, r3, #6
24008b6a:	d4d4      	bmi.n	24008b16 <HAL_RCC_ClockConfig+0x1e2>
24008b6c:	e6f9      	b.n	24008962 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
24008b6e:	2001      	movs	r0, #1
}
24008b70:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24008b72:	039e      	lsls	r6, r3, #14
24008b74:	d4cf      	bmi.n	24008b16 <HAL_RCC_ClockConfig+0x1e2>
24008b76:	e6f4      	b.n	24008962 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
24008b78:	2003      	movs	r0, #3
24008b7a:	e6f3      	b.n	24008964 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
24008b7c:	05da      	lsls	r2, r3, #23
24008b7e:	d4ca      	bmi.n	24008b16 <HAL_RCC_ClockConfig+0x1e2>
24008b80:	e6ef      	b.n	24008962 <HAL_RCC_ClockConfig+0x2e>
24008b82:	bf00      	nop
24008b84:	52002000 	.word	0x52002000
24008b88:	58024400 	.word	0x58024400
24008b8c:	2401c694 	.word	0x2401c694
24008b90:	200008b4 	.word	0x200008b4
24008b94:	200008b8 	.word	0x200008b8
24008b98:	200008c4 	.word	0x200008c4

24008b9c <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
24008b9c:	4a18      	ldr	r2, [pc, #96]	; (24008c00 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
24008b9e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
24008ba0:	6913      	ldr	r3, [r2, #16]
24008ba2:	f003 0338 	and.w	r3, r3, #56	; 0x38
24008ba6:	2b10      	cmp	r3, #16
24008ba8:	d01a      	beq.n	24008be0 <HAL_RCC_GetHCLKFreq+0x44>
24008baa:	2b18      	cmp	r3, #24
24008bac:	d023      	beq.n	24008bf6 <HAL_RCC_GetHCLKFreq+0x5a>
24008bae:	b1cb      	cbz	r3, 24008be4 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
24008bb0:	4814      	ldr	r0, [pc, #80]	; (24008c04 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24008bb2:	4b13      	ldr	r3, [pc, #76]	; (24008c00 <HAL_RCC_GetHCLKFreq+0x64>)
24008bb4:	4914      	ldr	r1, [pc, #80]	; (24008c08 <HAL_RCC_GetHCLKFreq+0x6c>)
24008bb6:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24008bb8:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24008bba:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24008bbe:	4c13      	ldr	r4, [pc, #76]	; (24008c0c <HAL_RCC_GetHCLKFreq+0x70>)
24008bc0:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
24008bc4:	4d12      	ldr	r5, [pc, #72]	; (24008c10 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24008bc6:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24008bc8:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24008bca:	f002 021f 	and.w	r2, r2, #31
24008bce:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24008bd2:	f003 001f 	and.w	r0, r3, #31
24008bd6:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
24008bda:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24008bdc:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
24008bde:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
24008be0:	480c      	ldr	r0, [pc, #48]	; (24008c14 <HAL_RCC_GetHCLKFreq+0x78>)
24008be2:	e7e6      	b.n	24008bb2 <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24008be4:	6813      	ldr	r3, [r2, #0]
24008be6:	069b      	lsls	r3, r3, #26
24008be8:	d508      	bpl.n	24008bfc <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008bea:	6813      	ldr	r3, [r2, #0]
24008bec:	480a      	ldr	r0, [pc, #40]	; (24008c18 <HAL_RCC_GetHCLKFreq+0x7c>)
24008bee:	f3c3 03c1 	ubfx	r3, r3, #3, #2
24008bf2:	40d8      	lsrs	r0, r3
24008bf4:	e7dd      	b.n	24008bb2 <HAL_RCC_GetHCLKFreq+0x16>
24008bf6:	f7ff fa83 	bl	24008100 <HAL_RCC_GetSysClockFreq.part.0>
24008bfa:	e7da      	b.n	24008bb2 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
24008bfc:	4806      	ldr	r0, [pc, #24]	; (24008c18 <HAL_RCC_GetHCLKFreq+0x7c>)
24008bfe:	e7d8      	b.n	24008bb2 <HAL_RCC_GetHCLKFreq+0x16>
24008c00:	58024400 	.word	0x58024400
24008c04:	003d0900 	.word	0x003d0900
24008c08:	2401c694 	.word	0x2401c694
24008c0c:	200008b8 	.word	0x200008b8
24008c10:	200008b4 	.word	0x200008b4
24008c14:	00f42400 	.word	0x00f42400
24008c18:	03d09000 	.word	0x03d09000

24008c1c <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
24008c1c:	4a1c      	ldr	r2, [pc, #112]	; (24008c90 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
24008c1e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
24008c20:	6913      	ldr	r3, [r2, #16]
24008c22:	f003 0338 	and.w	r3, r3, #56	; 0x38
24008c26:	2b10      	cmp	r3, #16
24008c28:	d021      	beq.n	24008c6e <HAL_RCC_GetPCLK1Freq+0x52>
24008c2a:	2b18      	cmp	r3, #24
24008c2c:	d02a      	beq.n	24008c84 <HAL_RCC_GetPCLK1Freq+0x68>
24008c2e:	b303      	cbz	r3, 24008c72 <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
24008c30:	4818      	ldr	r0, [pc, #96]	; (24008c94 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24008c32:	4a17      	ldr	r2, [pc, #92]	; (24008c90 <HAL_RCC_GetPCLK1Freq+0x74>)
24008c34:	4918      	ldr	r1, [pc, #96]	; (24008c98 <HAL_RCC_GetPCLK1Freq+0x7c>)
24008c36:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24008c38:	4c18      	ldr	r4, [pc, #96]	; (24008c9c <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24008c3a:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
24008c3e:	4d18      	ldr	r5, [pc, #96]	; (24008ca0 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24008c40:	5ccb      	ldrb	r3, [r1, r3]
24008c42:	f003 031f 	and.w	r3, r3, #31
24008c46:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24008c48:	6993      	ldr	r3, [r2, #24]
24008c4a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
24008c4e:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24008c50:	5ccb      	ldrb	r3, [r1, r3]
24008c52:	f003 031f 	and.w	r3, r3, #31
24008c56:	fa20 f303 	lsr.w	r3, r0, r3
24008c5a:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
24008c5c:	69d2      	ldr	r2, [r2, #28]
24008c5e:	f3c2 1202 	ubfx	r2, r2, #4, #3
24008c62:	5c88      	ldrb	r0, [r1, r2]
24008c64:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
24008c68:	fa23 f000 	lsr.w	r0, r3, r0
24008c6c:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
24008c6e:	480d      	ldr	r0, [pc, #52]	; (24008ca4 <HAL_RCC_GetPCLK1Freq+0x88>)
24008c70:	e7df      	b.n	24008c32 <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24008c72:	6813      	ldr	r3, [r2, #0]
24008c74:	069b      	lsls	r3, r3, #26
24008c76:	d508      	bpl.n	24008c8a <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008c78:	6813      	ldr	r3, [r2, #0]
24008c7a:	480b      	ldr	r0, [pc, #44]	; (24008ca8 <HAL_RCC_GetPCLK1Freq+0x8c>)
24008c7c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
24008c80:	40d8      	lsrs	r0, r3
24008c82:	e7d6      	b.n	24008c32 <HAL_RCC_GetPCLK1Freq+0x16>
24008c84:	f7ff fa3c 	bl	24008100 <HAL_RCC_GetSysClockFreq.part.0>
24008c88:	e7d3      	b.n	24008c32 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
24008c8a:	4807      	ldr	r0, [pc, #28]	; (24008ca8 <HAL_RCC_GetPCLK1Freq+0x8c>)
24008c8c:	e7d1      	b.n	24008c32 <HAL_RCC_GetPCLK1Freq+0x16>
24008c8e:	bf00      	nop
24008c90:	58024400 	.word	0x58024400
24008c94:	003d0900 	.word	0x003d0900
24008c98:	2401c694 	.word	0x2401c694
24008c9c:	200008b8 	.word	0x200008b8
24008ca0:	200008b4 	.word	0x200008b4
24008ca4:	00f42400 	.word	0x00f42400
24008ca8:	03d09000 	.word	0x03d09000

24008cac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
24008cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
24008cae:	4c3a      	ldr	r4, [pc, #232]	; (24008d98 <RCCEx_PLL2_Config+0xec>)
24008cb0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
24008cb2:	f003 0303 	and.w	r3, r3, #3
24008cb6:	2b03      	cmp	r3, #3
24008cb8:	d067      	beq.n	24008d8a <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
24008cba:	6823      	ldr	r3, [r4, #0]
24008cbc:	4606      	mov	r6, r0
24008cbe:	460f      	mov	r7, r1
24008cc0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
24008cc4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24008cc6:	f7fc fae1 	bl	2400528c <HAL_GetTick>
24008cca:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
24008ccc:	e004      	b.n	24008cd8 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
24008cce:	f7fc fadd 	bl	2400528c <HAL_GetTick>
24008cd2:	1b43      	subs	r3, r0, r5
24008cd4:	2b02      	cmp	r3, #2
24008cd6:	d856      	bhi.n	24008d86 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
24008cd8:	6823      	ldr	r3, [r4, #0]
24008cda:	011a      	lsls	r2, r3, #4
24008cdc:	d4f7      	bmi.n	24008cce <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
24008cde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
24008ce0:	6832      	ldr	r2, [r6, #0]
24008ce2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
24008ce6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
24008cea:	62a3      	str	r3, [r4, #40]	; 0x28
24008cec:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
24008cf0:	3b01      	subs	r3, #1
24008cf2:	3a01      	subs	r2, #1
24008cf4:	025b      	lsls	r3, r3, #9
24008cf6:	0412      	lsls	r2, r2, #16
24008cf8:	b29b      	uxth	r3, r3
24008cfa:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
24008cfe:	4313      	orrs	r3, r2
24008d00:	6872      	ldr	r2, [r6, #4]
24008d02:	3a01      	subs	r2, #1
24008d04:	f3c2 0208 	ubfx	r2, r2, #0, #9
24008d08:	4313      	orrs	r3, r2
24008d0a:	6932      	ldr	r2, [r6, #16]
24008d0c:	3a01      	subs	r2, #1
24008d0e:	0612      	lsls	r2, r2, #24
24008d10:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
24008d14:	4313      	orrs	r3, r2
24008d16:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
24008d18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24008d1a:	6972      	ldr	r2, [r6, #20]
24008d1c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
24008d20:	4313      	orrs	r3, r2
24008d22:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
24008d24:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
24008d26:	69b3      	ldr	r3, [r6, #24]
24008d28:	f022 0220 	bic.w	r2, r2, #32
24008d2c:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
24008d2e:	4b1b      	ldr	r3, [pc, #108]	; (24008d9c <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
24008d30:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
24008d32:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
24008d34:	f022 0210 	bic.w	r2, r2, #16
24008d38:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
24008d3a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
24008d3c:	69f2      	ldr	r2, [r6, #28]
24008d3e:	400b      	ands	r3, r1
24008d40:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
24008d44:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
24008d46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24008d48:	f043 0310 	orr.w	r3, r3, #16
24008d4c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
24008d4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
24008d50:	b1ef      	cbz	r7, 24008d8e <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
24008d52:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
24008d54:	bf0c      	ite	eq
24008d56:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
24008d5a:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
24008d5e:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
24008d60:	4c0d      	ldr	r4, [pc, #52]	; (24008d98 <RCCEx_PLL2_Config+0xec>)
24008d62:	6823      	ldr	r3, [r4, #0]
24008d64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
24008d68:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24008d6a:	f7fc fa8f 	bl	2400528c <HAL_GetTick>
24008d6e:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
24008d70:	e004      	b.n	24008d7c <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
24008d72:	f7fc fa8b 	bl	2400528c <HAL_GetTick>
24008d76:	1b40      	subs	r0, r0, r5
24008d78:	2802      	cmp	r0, #2
24008d7a:	d804      	bhi.n	24008d86 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
24008d7c:	6823      	ldr	r3, [r4, #0]
24008d7e:	011b      	lsls	r3, r3, #4
24008d80:	d5f7      	bpl.n	24008d72 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
24008d82:	2000      	movs	r0, #0
}
24008d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
24008d86:	2003      	movs	r0, #3
}
24008d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
24008d8a:	2001      	movs	r0, #1
}
24008d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
24008d8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
24008d92:	62e3      	str	r3, [r4, #44]	; 0x2c
24008d94:	e7e4      	b.n	24008d60 <RCCEx_PLL2_Config+0xb4>
24008d96:	bf00      	nop
24008d98:	58024400 	.word	0x58024400
24008d9c:	ffff0007 	.word	0xffff0007

24008da0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
24008da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
24008da2:	4c3a      	ldr	r4, [pc, #232]	; (24008e8c <RCCEx_PLL3_Config+0xec>)
24008da4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
24008da6:	f003 0303 	and.w	r3, r3, #3
24008daa:	2b03      	cmp	r3, #3
24008dac:	d067      	beq.n	24008e7e <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
24008dae:	6823      	ldr	r3, [r4, #0]
24008db0:	4606      	mov	r6, r0
24008db2:	460f      	mov	r7, r1
24008db4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
24008db8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24008dba:	f7fc fa67 	bl	2400528c <HAL_GetTick>
24008dbe:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
24008dc0:	e004      	b.n	24008dcc <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
24008dc2:	f7fc fa63 	bl	2400528c <HAL_GetTick>
24008dc6:	1b43      	subs	r3, r0, r5
24008dc8:	2b02      	cmp	r3, #2
24008dca:	d856      	bhi.n	24008e7a <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
24008dcc:	6823      	ldr	r3, [r4, #0]
24008dce:	009a      	lsls	r2, r3, #2
24008dd0:	d4f7      	bmi.n	24008dc2 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
24008dd2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
24008dd4:	6832      	ldr	r2, [r6, #0]
24008dd6:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
24008dda:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
24008dde:	62a3      	str	r3, [r4, #40]	; 0x28
24008de0:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
24008de4:	3b01      	subs	r3, #1
24008de6:	3a01      	subs	r2, #1
24008de8:	025b      	lsls	r3, r3, #9
24008dea:	0412      	lsls	r2, r2, #16
24008dec:	b29b      	uxth	r3, r3
24008dee:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
24008df2:	4313      	orrs	r3, r2
24008df4:	6872      	ldr	r2, [r6, #4]
24008df6:	3a01      	subs	r2, #1
24008df8:	f3c2 0208 	ubfx	r2, r2, #0, #9
24008dfc:	4313      	orrs	r3, r2
24008dfe:	6932      	ldr	r2, [r6, #16]
24008e00:	3a01      	subs	r2, #1
24008e02:	0612      	lsls	r2, r2, #24
24008e04:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
24008e08:	4313      	orrs	r3, r2
24008e0a:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
24008e0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24008e0e:	6972      	ldr	r2, [r6, #20]
24008e10:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
24008e14:	4313      	orrs	r3, r2
24008e16:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
24008e18:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
24008e1a:	69b3      	ldr	r3, [r6, #24]
24008e1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
24008e20:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
24008e22:	4b1b      	ldr	r3, [pc, #108]	; (24008e90 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
24008e24:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
24008e26:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
24008e28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24008e2c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
24008e2e:	6c61      	ldr	r1, [r4, #68]	; 0x44
24008e30:	69f2      	ldr	r2, [r6, #28]
24008e32:	400b      	ands	r3, r1
24008e34:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
24008e38:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
24008e3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24008e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24008e40:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
24008e42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
24008e44:	b1ef      	cbz	r7, 24008e82 <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
24008e46:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
24008e48:	bf0c      	ite	eq
24008e4a:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
24008e4e:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
24008e52:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
24008e54:	4c0d      	ldr	r4, [pc, #52]	; (24008e8c <RCCEx_PLL3_Config+0xec>)
24008e56:	6823      	ldr	r3, [r4, #0]
24008e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
24008e5c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24008e5e:	f7fc fa15 	bl	2400528c <HAL_GetTick>
24008e62:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
24008e64:	e004      	b.n	24008e70 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
24008e66:	f7fc fa11 	bl	2400528c <HAL_GetTick>
24008e6a:	1b40      	subs	r0, r0, r5
24008e6c:	2802      	cmp	r0, #2
24008e6e:	d804      	bhi.n	24008e7a <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
24008e70:	6823      	ldr	r3, [r4, #0]
24008e72:	009b      	lsls	r3, r3, #2
24008e74:	d5f7      	bpl.n	24008e66 <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
24008e76:	2000      	movs	r0, #0
}
24008e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
24008e7a:	2003      	movs	r0, #3
}
24008e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
24008e7e:	2001      	movs	r0, #1
}
24008e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
24008e82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
24008e86:	62e3      	str	r3, [r4, #44]	; 0x2c
24008e88:	e7e4      	b.n	24008e54 <RCCEx_PLL3_Config+0xb4>
24008e8a:	bf00      	nop
24008e8c:	58024400 	.word	0x58024400
24008e90:	ffff0007 	.word	0xffff0007

24008e94 <HAL_RCCEx_PeriphCLKConfig>:
{
24008e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
24008e98:	e9d0 3200 	ldrd	r3, r2, [r0]
{
24008e9c:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
24008e9e:	011d      	lsls	r5, r3, #4
24008ea0:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
24008ea4:	d521      	bpl.n	24008eea <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch (PeriphClkInit->SpdifrxClockSelection)
24008ea6:	6e81      	ldr	r1, [r0, #104]	; 0x68
24008ea8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
24008eac:	f000 8577 	beq.w	2400999e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
24008eb0:	d80e      	bhi.n	24008ed0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
24008eb2:	2900      	cmp	r1, #0
24008eb4:	f000 85d2 	beq.w	24009a5c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
24008eb8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
24008ebc:	f040 85cb 	bne.w	24009a56 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24008ec0:	2102      	movs	r1, #2
24008ec2:	3008      	adds	r0, #8
24008ec4:	f7ff fef2 	bl	24008cac <RCCEx_PLL2_Config>
24008ec8:	4606      	mov	r6, r0
    if (ret == HAL_OK)
24008eca:	b966      	cbnz	r6, 24008ee6 <HAL_RCCEx_PeriphCLKConfig+0x52>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
24008ecc:	6ea1      	ldr	r1, [r4, #104]	; 0x68
24008ece:	e003      	b.n	24008ed8 <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch (PeriphClkInit->SpdifrxClockSelection)
24008ed0:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
24008ed4:	f040 85bf 	bne.w	24009a56 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
24008ed8:	4aa3      	ldr	r2, [pc, #652]	; (24009168 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24008eda:	2600      	movs	r6, #0
24008edc:	6d13      	ldr	r3, [r2, #80]	; 0x50
24008ede:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
24008ee2:	430b      	orrs	r3, r1
24008ee4:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
24008ee6:	e9d4 3200 	ldrd	r3, r2, [r4]
24008eea:	05d8      	lsls	r0, r3, #23
24008eec:	d50a      	bpl.n	24008f04 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch (PeriphClkInit->Sai1ClockSelection)
24008eee:	6da1      	ldr	r1, [r4, #88]	; 0x58
24008ef0:	2904      	cmp	r1, #4
24008ef2:	d806      	bhi.n	24008f02 <HAL_RCCEx_PeriphCLKConfig+0x6e>
24008ef4:	e8df f011 	tbh	[pc, r1, lsl #1]
24008ef8:	0564055d 	.word	0x0564055d
24008efc:	0310057b 	.word	0x0310057b
24008f00:	0310      	.short	0x0310
24008f02:	2601      	movs	r6, #1
24008f04:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
24008f06:	0599      	lsls	r1, r3, #22
24008f08:	d517      	bpl.n	24008f3a <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai23ClockSelection)
24008f0a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
24008f0c:	2980      	cmp	r1, #128	; 0x80
24008f0e:	f000 8575 	beq.w	240099fc <HAL_RCCEx_PeriphCLKConfig+0xb68>
24008f12:	f200 80e1 	bhi.w	240090d8 <HAL_RCCEx_PeriphCLKConfig+0x244>
24008f16:	2900      	cmp	r1, #0
24008f18:	f000 8446 	beq.w	240097a8 <HAL_RCCEx_PeriphCLKConfig+0x914>
24008f1c:	2940      	cmp	r1, #64	; 0x40
24008f1e:	f040 80e2 	bne.w	240090e6 <HAL_RCCEx_PeriphCLKConfig+0x252>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008f22:	2100      	movs	r1, #0
24008f24:	f104 0008 	add.w	r0, r4, #8
24008f28:	f7ff fec0 	bl	24008cac <RCCEx_PLL2_Config>
24008f2c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008f2e:	2d00      	cmp	r5, #0
24008f30:	f000 83f6 	beq.w	24009720 <HAL_RCCEx_PeriphCLKConfig+0x88c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
24008f34:	462e      	mov	r6, r5
24008f36:	e9d4 3200 	ldrd	r3, r2, [r4]
24008f3a:	055f      	lsls	r7, r3, #21
24008f3c:	d51a      	bpl.n	24008f74 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4AClockSelection)
24008f3e:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
24008f42:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
24008f46:	f000 8522 	beq.w	2400998e <HAL_RCCEx_PeriphCLKConfig+0xafa>
24008f4a:	f200 80cf 	bhi.w	240090ec <HAL_RCCEx_PeriphCLKConfig+0x258>
24008f4e:	2900      	cmp	r1, #0
24008f50:	f000 8431 	beq.w	240097b6 <HAL_RCCEx_PeriphCLKConfig+0x922>
24008f54:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
24008f58:	f040 80d0 	bne.w	240090fc <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008f5c:	2100      	movs	r1, #0
24008f5e:	f104 0008 	add.w	r0, r4, #8
24008f62:	f7ff fea3 	bl	24008cac <RCCEx_PLL2_Config>
24008f66:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008f68:	2d00      	cmp	r5, #0
24008f6a:	f000 83f8 	beq.w	2400975e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
24008f6e:	462e      	mov	r6, r5
24008f70:	e9d4 3200 	ldrd	r3, r2, [r4]
24008f74:	0518      	lsls	r0, r3, #20
24008f76:	d51a      	bpl.n	24008fae <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->Sai4BClockSelection)
24008f78:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
24008f7c:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
24008f80:	f000 852d 	beq.w	240099de <HAL_RCCEx_PeriphCLKConfig+0xb4a>
24008f84:	f200 80bd 	bhi.w	24009102 <HAL_RCCEx_PeriphCLKConfig+0x26e>
24008f88:	2900      	cmp	r1, #0
24008f8a:	f000 8406 	beq.w	2400979a <HAL_RCCEx_PeriphCLKConfig+0x906>
24008f8e:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
24008f92:	f040 80be 	bne.w	24009112 <HAL_RCCEx_PeriphCLKConfig+0x27e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008f96:	2100      	movs	r1, #0
24008f98:	f104 0008 	add.w	r0, r4, #8
24008f9c:	f7ff fe86 	bl	24008cac <RCCEx_PLL2_Config>
24008fa0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008fa2:	2d00      	cmp	r5, #0
24008fa4:	f000 83b1 	beq.w	2400970a <HAL_RCCEx_PeriphCLKConfig+0x876>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
24008fa8:	462e      	mov	r6, r5
24008faa:	e9d4 3200 	ldrd	r3, r2, [r4]
24008fae:	0199      	lsls	r1, r3, #6
24008fb0:	d51a      	bpl.n	24008fe8 <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->QspiClockSelection)
24008fb2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
24008fb4:	2920      	cmp	r1, #32
24008fb6:	f000 84b4 	beq.w	24009922 <HAL_RCCEx_PeriphCLKConfig+0xa8e>
24008fba:	f200 80ad 	bhi.w	24009118 <HAL_RCCEx_PeriphCLKConfig+0x284>
24008fbe:	b139      	cbz	r1, 24008fd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
24008fc0:	2910      	cmp	r1, #16
24008fc2:	f040 80ac 	bne.w	2400911e <HAL_RCCEx_PeriphCLKConfig+0x28a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008fc6:	4a68      	ldr	r2, [pc, #416]	; (24009168 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24008fc8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008fca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008fce:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
24008fd0:	2d00      	cmp	r5, #0
24008fd2:	f040 8418 	bne.w	24009806 <HAL_RCCEx_PeriphCLKConfig+0x972>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
24008fd6:	4a64      	ldr	r2, [pc, #400]	; (24009168 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24008fd8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
24008fda:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
24008fdc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
24008fe0:	430b      	orrs	r3, r1
24008fe2:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
24008fe4:	e9d4 3200 	ldrd	r3, r2, [r4]
24008fe8:	04df      	lsls	r7, r3, #19
24008fea:	d519      	bpl.n	24009020 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi123ClockSelection)
24008fec:	6e21      	ldr	r1, [r4, #96]	; 0x60
24008fee:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
24008ff2:	f000 84ec 	beq.w	240099ce <HAL_RCCEx_PeriphCLKConfig+0xb3a>
24008ff6:	f200 8095 	bhi.w	24009124 <HAL_RCCEx_PeriphCLKConfig+0x290>
24008ffa:	2900      	cmp	r1, #0
24008ffc:	f000 83c7 	beq.w	2400978e <HAL_RCCEx_PeriphCLKConfig+0x8fa>
24009000:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
24009004:	f040 8096 	bne.w	24009134 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24009008:	2100      	movs	r1, #0
2400900a:	f104 0008 	add.w	r0, r4, #8
2400900e:	f7ff fe4d 	bl	24008cac <RCCEx_PLL2_Config>
24009012:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24009014:	2d00      	cmp	r5, #0
24009016:	f000 838d 	beq.w	24009734 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
2400901a:	462e      	mov	r6, r5
2400901c:	e9d4 3200 	ldrd	r3, r2, [r4]
24009020:	0498      	lsls	r0, r3, #18
24009022:	d51d      	bpl.n	24009060 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi45ClockSelection)
24009024:	6e61      	ldr	r1, [r4, #100]	; 0x64
24009026:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
2400902a:	f000 8466 	beq.w	240098fa <HAL_RCCEx_PeriphCLKConfig+0xa66>
2400902e:	f200 8084 	bhi.w	2400913a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
24009032:	b149      	cbz	r1, 24009048 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
24009034:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
24009038:	f040 8088 	bne.w	2400914c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2400903c:	2101      	movs	r1, #1
2400903e:	f104 0008 	add.w	r0, r4, #8
24009042:	f7ff fe33 	bl	24008cac <RCCEx_PLL2_Config>
24009046:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24009048:	2d00      	cmp	r5, #0
2400904a:	f040 83eb 	bne.w	24009824 <HAL_RCCEx_PeriphCLKConfig+0x990>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
2400904e:	4a46      	ldr	r2, [pc, #280]	; (24009168 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24009050:	6e61      	ldr	r1, [r4, #100]	; 0x64
24009052:	6d13      	ldr	r3, [r2, #80]	; 0x50
24009054:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
24009058:	430b      	orrs	r3, r1
2400905a:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
2400905c:	e9d4 3200 	ldrd	r3, r2, [r4]
24009060:	0459      	lsls	r1, r3, #17
24009062:	d51d      	bpl.n	240090a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch (PeriphClkInit->Spi6ClockSelection)
24009064:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
24009068:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
2400906c:	f000 844f 	beq.w	2400990e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
24009070:	d86f      	bhi.n	24009152 <HAL_RCCEx_PeriphCLKConfig+0x2be>
24009072:	b141      	cbz	r1, 24009086 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
24009074:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
24009078:	d173      	bne.n	24009162 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2400907a:	2101      	movs	r1, #1
2400907c:	f104 0008 	add.w	r0, r4, #8
24009080:	f7ff fe14 	bl	24008cac <RCCEx_PLL2_Config>
24009084:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24009086:	2d00      	cmp	r5, #0
24009088:	f040 83d4 	bne.w	24009834 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
2400908c:	4a36      	ldr	r2, [pc, #216]	; (24009168 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
2400908e:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
24009092:	6d93      	ldr	r3, [r2, #88]	; 0x58
24009094:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
24009098:	430b      	orrs	r3, r1
2400909a:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
2400909c:	e9d4 3200 	ldrd	r3, r2, [r4]
240090a0:	041f      	lsls	r7, r3, #16
240090a2:	d50d      	bpl.n	240090c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    switch (PeriphClkInit->FdcanClockSelection)
240090a4:	6f21      	ldr	r1, [r4, #112]	; 0x70
240090a6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
240090aa:	f000 841d 	beq.w	240098e8 <HAL_RCCEx_PeriphCLKConfig+0xa54>
240090ae:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
240090b2:	f000 8239 	beq.w	24009528 <HAL_RCCEx_PeriphCLKConfig+0x694>
240090b6:	2900      	cmp	r1, #0
240090b8:	f000 823c 	beq.w	24009534 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
240090bc:	2601      	movs	r6, #1
240090be:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
240090c0:	01d8      	lsls	r0, r3, #7
240090c2:	d55e      	bpl.n	24009182 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    switch (PeriphClkInit->FmcClockSelection)
240090c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
240090c6:	2903      	cmp	r1, #3
240090c8:	f200 84f3 	bhi.w	24009ab2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
240090cc:	e8df f011 	tbh	[pc, r1, lsl #1]
240090d0:	004e0053 	.word	0x004e0053
240090d4:	0053043d 	.word	0x0053043d
    switch (PeriphClkInit->Sai23ClockSelection)
240090d8:	29c0      	cmp	r1, #192	; 0xc0
240090da:	f43f af28 	beq.w	24008f2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
240090de:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
240090e2:	f43f af24 	beq.w	24008f2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
240090e6:	2601      	movs	r6, #1
240090e8:	4635      	mov	r5, r6
240090ea:	e726      	b.n	24008f3a <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai4AClockSelection)
240090ec:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
240090f0:	f43f af3a 	beq.w	24008f68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
240090f4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
240090f8:	f43f af36 	beq.w	24008f68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
240090fc:	2601      	movs	r6, #1
240090fe:	4635      	mov	r5, r6
24009100:	e738      	b.n	24008f74 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4BClockSelection)
24009102:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
24009106:	f43f af4c 	beq.w	24008fa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
2400910a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
2400910e:	f43f af48 	beq.w	24008fa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
24009112:	2601      	movs	r6, #1
24009114:	4635      	mov	r5, r6
24009116:	e74a      	b.n	24008fae <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->QspiClockSelection)
24009118:	2930      	cmp	r1, #48	; 0x30
2400911a:	f43f af59 	beq.w	24008fd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
2400911e:	2601      	movs	r6, #1
24009120:	4635      	mov	r5, r6
24009122:	e761      	b.n	24008fe8 <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->Spi123ClockSelection)
24009124:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
24009128:	f43f af74 	beq.w	24009014 <HAL_RCCEx_PeriphCLKConfig+0x180>
2400912c:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
24009130:	f43f af70 	beq.w	24009014 <HAL_RCCEx_PeriphCLKConfig+0x180>
24009134:	2601      	movs	r6, #1
24009136:	4635      	mov	r5, r6
24009138:	e772      	b.n	24009020 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi45ClockSelection)
2400913a:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
2400913e:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
24009142:	d081      	beq.n	24009048 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
24009144:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
24009148:	f43f af7e 	beq.w	24009048 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
2400914c:	2601      	movs	r6, #1
2400914e:	4635      	mov	r5, r6
24009150:	e786      	b.n	24009060 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi6ClockSelection)
24009152:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
24009156:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
2400915a:	d094      	beq.n	24009086 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
2400915c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
24009160:	d091      	beq.n	24009086 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
24009162:	2601      	movs	r6, #1
24009164:	4635      	mov	r5, r6
24009166:	e79b      	b.n	240090a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
24009168:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400916c:	4a34      	ldr	r2, [pc, #208]	; (24009240 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
2400916e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24009170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24009174:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
24009176:	2d00      	cmp	r5, #0
24009178:	f000 834a 	beq.w	24009810 <HAL_RCCEx_PeriphCLKConfig+0x97c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
2400917c:	462e      	mov	r6, r5
2400917e:	e9d4 3200 	ldrd	r3, r2, [r4]
24009182:	0259      	lsls	r1, r3, #9
24009184:	f100 826f 	bmi.w	24009666 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
24009188:	07d8      	lsls	r0, r3, #31
2400918a:	d52f      	bpl.n	240091ec <HAL_RCCEx_PeriphCLKConfig+0x358>
    switch (PeriphClkInit->Usart16ClockSelection)
2400918c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
2400918e:	2928      	cmp	r1, #40	; 0x28
24009190:	d82a      	bhi.n	240091e8 <HAL_RCCEx_PeriphCLKConfig+0x354>
24009192:	e8df f011 	tbh	[pc, r1, lsl #1]
24009196:	020d      	.short	0x020d
24009198:	00290029 	.word	0x00290029
2400919c:	00290029 	.word	0x00290029
240091a0:	00290029 	.word	0x00290029
240091a4:	02070029 	.word	0x02070029
240091a8:	00290029 	.word	0x00290029
240091ac:	00290029 	.word	0x00290029
240091b0:	00290029 	.word	0x00290029
240091b4:	04500029 	.word	0x04500029
240091b8:	00290029 	.word	0x00290029
240091bc:	00290029 	.word	0x00290029
240091c0:	00290029 	.word	0x00290029
240091c4:	020d0029 	.word	0x020d0029
240091c8:	00290029 	.word	0x00290029
240091cc:	00290029 	.word	0x00290029
240091d0:	00290029 	.word	0x00290029
240091d4:	020d0029 	.word	0x020d0029
240091d8:	00290029 	.word	0x00290029
240091dc:	00290029 	.word	0x00290029
240091e0:	00290029 	.word	0x00290029
240091e4:	020d0029 	.word	0x020d0029
240091e8:	2601      	movs	r6, #1
240091ea:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
240091ec:	0799      	lsls	r1, r3, #30
240091ee:	d517      	bpl.n	24009220 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    switch (PeriphClkInit->Usart234578ClockSelection)
240091f0:	6fa1      	ldr	r1, [r4, #120]	; 0x78
240091f2:	2905      	cmp	r1, #5
240091f4:	f200 8465 	bhi.w	24009ac2 <HAL_RCCEx_PeriphCLKConfig+0xc2e>
240091f8:	e8df f011 	tbh	[pc, r1, lsl #1]
240091fc:	0006000c 	.word	0x0006000c
24009200:	000c0412 	.word	0x000c0412
24009204:	000c000c 	.word	0x000c000c
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24009208:	2101      	movs	r1, #1
2400920a:	f104 0008 	add.w	r0, r4, #8
2400920e:	f7ff fd4d 	bl	24008cac <RCCEx_PLL2_Config>
24009212:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24009214:	2d00      	cmp	r5, #0
24009216:	f000 82dd 	beq.w	240097d4 <HAL_RCCEx_PeriphCLKConfig+0x940>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
2400921a:	462e      	mov	r6, r5
2400921c:	e9d4 3200 	ldrd	r3, r2, [r4]
24009220:	075f      	lsls	r7, r3, #29
24009222:	d51b      	bpl.n	2400925c <HAL_RCCEx_PeriphCLKConfig+0x3c8>
    switch (PeriphClkInit->Lpuart1ClockSelection)
24009224:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
24009228:	2905      	cmp	r1, #5
2400922a:	f200 8446 	bhi.w	24009aba <HAL_RCCEx_PeriphCLKConfig+0xc26>
2400922e:	e8df f011 	tbh	[pc, r1, lsl #1]
24009232:	000f      	.short	0x000f
24009234:	03ed0009 	.word	0x03ed0009
24009238:	000f000f 	.word	0x000f000f
2400923c:	000f      	.short	0x000f
2400923e:	bf00      	nop
24009240:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24009244:	2101      	movs	r1, #1
24009246:	f104 0008 	add.w	r0, r4, #8
2400924a:	f7ff fd2f 	bl	24008cac <RCCEx_PLL2_Config>
2400924e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24009250:	2d00      	cmp	r5, #0
24009252:	f000 82c9 	beq.w	240097e8 <HAL_RCCEx_PeriphCLKConfig+0x954>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
24009256:	462e      	mov	r6, r5
24009258:	e9d4 3200 	ldrd	r3, r2, [r4]
2400925c:	0698      	lsls	r0, r3, #26
2400925e:	d51f      	bpl.n	240092a0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    switch (PeriphClkInit->Lptim1ClockSelection)
24009260:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
24009264:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
24009268:	f000 8365 	beq.w	24009936 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
2400926c:	f200 811c 	bhi.w	240094a8 <HAL_RCCEx_PeriphCLKConfig+0x614>
24009270:	b149      	cbz	r1, 24009286 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
24009272:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
24009276:	f040 8121 	bne.w	240094bc <HAL_RCCEx_PeriphCLKConfig+0x628>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2400927a:	2100      	movs	r1, #0
2400927c:	f104 0008 	add.w	r0, r4, #8
24009280:	f7ff fd14 	bl	24008cac <RCCEx_PLL2_Config>
24009284:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24009286:	2d00      	cmp	r5, #0
24009288:	f040 82b9 	bne.w	240097fe <HAL_RCCEx_PeriphCLKConfig+0x96a>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
2400928c:	4ab0      	ldr	r2, [pc, #704]	; (24009550 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
2400928e:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
24009292:	6d53      	ldr	r3, [r2, #84]	; 0x54
24009294:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
24009298:	430b      	orrs	r3, r1
2400929a:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
2400929c:	e9d4 3200 	ldrd	r3, r2, [r4]
240092a0:	0659      	lsls	r1, r3, #25
240092a2:	d51f      	bpl.n	240092e4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch (PeriphClkInit->Lptim2ClockSelection)
240092a4:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
240092a8:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
240092ac:	f000 8308 	beq.w	240098c0 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
240092b0:	f200 8107 	bhi.w	240094c2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
240092b4:	b149      	cbz	r1, 240092ca <HAL_RCCEx_PeriphCLKConfig+0x436>
240092b6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
240092ba:	f040 810c 	bne.w	240094d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240092be:	2100      	movs	r1, #0
240092c0:	f104 0008 	add.w	r0, r4, #8
240092c4:	f7ff fcf2 	bl	24008cac <RCCEx_PLL2_Config>
240092c8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240092ca:	2d00      	cmp	r5, #0
240092cc:	f040 82b6 	bne.w	2400983c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
240092d0:	4a9f      	ldr	r2, [pc, #636]	; (24009550 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
240092d2:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
240092d6:	6d93      	ldr	r3, [r2, #88]	; 0x58
240092d8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
240092dc:	430b      	orrs	r3, r1
240092de:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
240092e0:	e9d4 3200 	ldrd	r3, r2, [r4]
240092e4:	061f      	lsls	r7, r3, #24
240092e6:	d51f      	bpl.n	24009328 <HAL_RCCEx_PeriphCLKConfig+0x494>
    switch (PeriphClkInit->Lptim345ClockSelection)
240092e8:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
240092ec:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
240092f0:	f000 82f0 	beq.w	240098d4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
240092f4:	f200 80f2 	bhi.w	240094dc <HAL_RCCEx_PeriphCLKConfig+0x648>
240092f8:	b149      	cbz	r1, 2400930e <HAL_RCCEx_PeriphCLKConfig+0x47a>
240092fa:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
240092fe:	f040 80f7 	bne.w	240094f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24009302:	2100      	movs	r1, #0
24009304:	f104 0008 	add.w	r0, r4, #8
24009308:	f7ff fcd0 	bl	24008cac <RCCEx_PLL2_Config>
2400930c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400930e:	2d00      	cmp	r5, #0
24009310:	f040 828c 	bne.w	2400982c <HAL_RCCEx_PeriphCLKConfig+0x998>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
24009314:	4a8e      	ldr	r2, [pc, #568]	; (24009550 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
24009316:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
2400931a:	6d93      	ldr	r3, [r2, #88]	; 0x58
2400931c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
24009320:	430b      	orrs	r3, r1
24009322:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
24009324:	e9d4 3200 	ldrd	r3, r2, [r4]
24009328:	0718      	lsls	r0, r3, #28
2400932a:	d50d      	bpl.n	24009348 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
2400932c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
24009330:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
24009334:	f000 8313 	beq.w	2400995e <HAL_RCCEx_PeriphCLKConfig+0xaca>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
24009338:	4985      	ldr	r1, [pc, #532]	; (24009550 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
2400933a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
2400933c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
24009340:	4313      	orrs	r3, r2
24009342:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
24009344:	e9d4 3200 	ldrd	r3, r2, [r4]
24009348:	06d9      	lsls	r1, r3, #27
2400934a:	d50d      	bpl.n	24009368 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
2400934c:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
24009350:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
24009354:	f000 830f 	beq.w	24009976 <HAL_RCCEx_PeriphCLKConfig+0xae2>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
24009358:	497d      	ldr	r1, [pc, #500]	; (24009550 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
2400935a:	6d8b      	ldr	r3, [r1, #88]	; 0x58
2400935c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
24009360:	4313      	orrs	r3, r2
24009362:	658b      	str	r3, [r1, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
24009364:	e9d4 3200 	ldrd	r3, r2, [r4]
24009368:	031f      	lsls	r7, r3, #12
2400936a:	d50e      	bpl.n	2400938a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
    switch (PeriphClkInit->AdcClockSelection)
2400936c:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
24009370:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
24009374:	f000 8102 	beq.w	2400957c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
24009378:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
2400937c:	f000 8104 	beq.w	24009588 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
24009380:	2900      	cmp	r1, #0
24009382:	f000 8292 	beq.w	240098aa <HAL_RCCEx_PeriphCLKConfig+0xa16>
24009386:	2601      	movs	r6, #1
24009388:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
2400938a:	0358      	lsls	r0, r3, #13
2400938c:	d50f      	bpl.n	240093ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
    switch (PeriphClkInit->UsbClockSelection)
2400938e:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
24009392:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
24009396:	f000 80dd 	beq.w	24009554 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
2400939a:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
2400939e:	f000 80df 	beq.w	24009560 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
240093a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
240093a6:	f000 8277 	beq.w	24009898 <HAL_RCCEx_PeriphCLKConfig+0xa04>
240093aa:	2601      	movs	r6, #1
240093ac:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
240093ae:	03d9      	lsls	r1, r3, #15
240093b0:	d509      	bpl.n	240093c6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    switch (PeriphClkInit->SdmmcClockSelection)
240093b2:	6d21      	ldr	r1, [r4, #80]	; 0x50
240093b4:	2900      	cmp	r1, #0
240093b6:	f000 825a 	beq.w	2400986e <HAL_RCCEx_PeriphCLKConfig+0x9da>
240093ba:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
240093be:	f000 81da 	beq.w	24009776 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
240093c2:	2601      	movs	r6, #1
240093c4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
240093c6:	009f      	lsls	r7, r3, #2
240093c8:	f100 80ff 	bmi.w	240095ca <HAL_RCCEx_PeriphCLKConfig+0x736>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
240093cc:	0398      	lsls	r0, r3, #14
240093ce:	d50e      	bpl.n	240093ee <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->RngClockSelection)
240093d0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
240093d4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
240093d8:	f000 8240 	beq.w	2400985c <HAL_RCCEx_PeriphCLKConfig+0x9c8>
240093dc:	f240 808b 	bls.w	240094f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
240093e0:	f421 7180 	bic.w	r1, r1, #256	; 0x100
240093e4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
240093e8:	f000 8088 	beq.w	240094fc <HAL_RCCEx_PeriphCLKConfig+0x668>
240093ec:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
240093ee:	02d9      	lsls	r1, r3, #11
240093f0:	d508      	bpl.n	24009404 <HAL_RCCEx_PeriphCLKConfig+0x570>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
240093f2:	4a57      	ldr	r2, [pc, #348]	; (24009550 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
240093f4:	6f61      	ldr	r1, [r4, #116]	; 0x74
240093f6:	6d13      	ldr	r3, [r2, #80]	; 0x50
240093f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
240093fc:	430b      	orrs	r3, r1
240093fe:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
24009400:	e9d4 3200 	ldrd	r3, r2, [r4]
24009404:	00df      	lsls	r7, r3, #3
24009406:	d509      	bpl.n	2400941c <HAL_RCCEx_PeriphCLKConfig+0x588>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
24009408:	4a51      	ldr	r2, [pc, #324]	; (24009550 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
2400940a:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
2400940e:	6913      	ldr	r3, [r2, #16]
24009410:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
24009414:	430b      	orrs	r3, r1
24009416:	6113      	str	r3, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
24009418:	e9d4 3200 	ldrd	r3, r2, [r4]
2400941c:	029d      	lsls	r5, r3, #10
2400941e:	d508      	bpl.n	24009432 <HAL_RCCEx_PeriphCLKConfig+0x59e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
24009420:	4a4b      	ldr	r2, [pc, #300]	; (24009550 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
24009422:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
24009424:	6d13      	ldr	r3, [r2, #80]	; 0x50
24009426:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
2400942a:	430b      	orrs	r3, r1
2400942c:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
2400942e:	e9d4 3200 	ldrd	r3, r2, [r4]
24009432:	0058      	lsls	r0, r3, #1
24009434:	d50b      	bpl.n	2400944e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
24009436:	4b46      	ldr	r3, [pc, #280]	; (24009550 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
24009438:	691a      	ldr	r2, [r3, #16]
2400943a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400943e:	611a      	str	r2, [r3, #16]
24009440:	691a      	ldr	r2, [r3, #16]
24009442:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
24009446:	430a      	orrs	r2, r1
24009448:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
2400944a:	e9d4 3200 	ldrd	r3, r2, [r4]
2400944e:	2b00      	cmp	r3, #0
24009450:	da08      	bge.n	24009464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
24009452:	4a3f      	ldr	r2, [pc, #252]	; (24009550 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
24009454:	6d61      	ldr	r1, [r4, #84]	; 0x54
24009456:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
24009458:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
2400945c:	430b      	orrs	r3, r1
2400945e:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
24009460:	e9d4 3200 	ldrd	r3, r2, [r4]
24009464:	0219      	lsls	r1, r3, #8
24009466:	d508      	bpl.n	2400947a <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
24009468:	4a39      	ldr	r2, [pc, #228]	; (24009550 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
2400946a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
2400946e:	6d53      	ldr	r3, [r2, #84]	; 0x54
24009470:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
24009474:	430b      	orrs	r3, r1
24009476:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
24009478:	6862      	ldr	r2, [r4, #4]
2400947a:	07d3      	lsls	r3, r2, #31
2400947c:	f100 80b1 	bmi.w	240095e2 <HAL_RCCEx_PeriphCLKConfig+0x74e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
24009480:	0797      	lsls	r7, r2, #30
24009482:	f100 80bb 	bmi.w	240095fc <HAL_RCCEx_PeriphCLKConfig+0x768>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
24009486:	0755      	lsls	r5, r2, #29
24009488:	f100 80c5 	bmi.w	24009616 <HAL_RCCEx_PeriphCLKConfig+0x782>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
2400948c:	0710      	lsls	r0, r2, #28
2400948e:	f100 80cf 	bmi.w	24009630 <HAL_RCCEx_PeriphCLKConfig+0x79c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
24009492:	06d1      	lsls	r1, r2, #27
24009494:	f100 80d9 	bmi.w	2400964a <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
24009498:	0692      	lsls	r2, r2, #26
2400949a:	f100 812a 	bmi.w	240096f2 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    return HAL_OK;
2400949e:	1e30      	subs	r0, r6, #0
240094a0:	bf18      	it	ne
240094a2:	2001      	movne	r0, #1
}
240094a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
240094a8:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
240094ac:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
240094b0:	f43f aee9 	beq.w	24009286 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
240094b4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
240094b8:	f43f aee5 	beq.w	24009286 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
240094bc:	2601      	movs	r6, #1
240094be:	4635      	mov	r5, r6
240094c0:	e6ee      	b.n	240092a0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    switch (PeriphClkInit->Lptim2ClockSelection)
240094c2:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
240094c6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
240094ca:	f43f aefe 	beq.w	240092ca <HAL_RCCEx_PeriphCLKConfig+0x436>
240094ce:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
240094d2:	f43f aefa 	beq.w	240092ca <HAL_RCCEx_PeriphCLKConfig+0x436>
240094d6:	2601      	movs	r6, #1
240094d8:	4635      	mov	r5, r6
240094da:	e703      	b.n	240092e4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch (PeriphClkInit->Lptim345ClockSelection)
240094dc:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
240094e0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
240094e4:	f43f af13 	beq.w	2400930e <HAL_RCCEx_PeriphCLKConfig+0x47a>
240094e8:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
240094ec:	f43f af0f 	beq.w	2400930e <HAL_RCCEx_PeriphCLKConfig+0x47a>
240094f0:	2601      	movs	r6, #1
240094f2:	4635      	mov	r5, r6
240094f4:	e718      	b.n	24009328 <HAL_RCCEx_PeriphCLKConfig+0x494>
    switch (PeriphClkInit->RngClockSelection)
240094f6:	2900      	cmp	r1, #0
240094f8:	f47f af78 	bne.w	240093ec <HAL_RCCEx_PeriphCLKConfig+0x558>
    if (ret == HAL_OK)
240094fc:	2d00      	cmp	r5, #0
240094fe:	f040 81c7 	bne.w	24009890 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
24009502:	4a13      	ldr	r2, [pc, #76]	; (24009550 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
24009504:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
24009508:	6d53      	ldr	r3, [r2, #84]	; 0x54
2400950a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
2400950e:	430b      	orrs	r3, r1
24009510:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
24009512:	e9d4 3200 	ldrd	r3, r2, [r4]
24009516:	e76a      	b.n	240093ee <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->Sai1ClockSelection)
24009518:	4635      	mov	r5, r6
    if (ret == HAL_OK)
2400951a:	2d00      	cmp	r5, #0
2400951c:	f000 8114 	beq.w	24009748 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
24009520:	462e      	mov	r6, r5
24009522:	e9d4 3200 	ldrd	r3, r2, [r4]
24009526:	e4ee      	b.n	24008f06 <HAL_RCCEx_PeriphCLKConfig+0x72>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24009528:	2101      	movs	r1, #1
2400952a:	f104 0008 	add.w	r0, r4, #8
2400952e:	f7ff fbbd 	bl	24008cac <RCCEx_PLL2_Config>
24009532:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24009534:	2d00      	cmp	r5, #0
24009536:	f040 8149 	bne.w	240097cc <HAL_RCCEx_PeriphCLKConfig+0x938>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
2400953a:	4a05      	ldr	r2, [pc, #20]	; (24009550 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
2400953c:	6f21      	ldr	r1, [r4, #112]	; 0x70
2400953e:	6d13      	ldr	r3, [r2, #80]	; 0x50
24009540:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
24009544:	430b      	orrs	r3, r1
24009546:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
24009548:	e9d4 3200 	ldrd	r3, r2, [r4]
2400954c:	e5b8      	b.n	240090c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
2400954e:	bf00      	nop
24009550:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24009554:	2101      	movs	r1, #1
24009556:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400955a:	f7ff fc21 	bl	24008da0 <RCCEx_PLL3_Config>
2400955e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24009560:	2d00      	cmp	r5, #0
24009562:	f040 8173 	bne.w	2400984c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
24009566:	4abb      	ldr	r2, [pc, #748]	; (24009854 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
24009568:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
2400956c:	6d53      	ldr	r3, [r2, #84]	; 0x54
2400956e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
24009572:	430b      	orrs	r3, r1
24009574:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
24009576:	e9d4 3200 	ldrd	r3, r2, [r4]
2400957a:	e718      	b.n	240093ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2400957c:	2102      	movs	r1, #2
2400957e:	f104 0028 	add.w	r0, r4, #40	; 0x28
24009582:	f7ff fc0d 	bl	24008da0 <RCCEx_PLL3_Config>
24009586:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24009588:	2d00      	cmp	r5, #0
2400958a:	f040 815b 	bne.w	24009844 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
2400958e:	4ab1      	ldr	r2, [pc, #708]	; (24009854 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
24009590:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
24009594:	6d93      	ldr	r3, [r2, #88]	; 0x58
24009596:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
2400959a:	430b      	orrs	r3, r1
2400959c:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
2400959e:	e9d4 3200 	ldrd	r3, r2, [r4]
240095a2:	e6f2      	b.n	2400938a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
240095a4:	2101      	movs	r1, #1
240095a6:	f104 0008 	add.w	r0, r4, #8
240095aa:	f7ff fb7f 	bl	24008cac <RCCEx_PLL2_Config>
240095ae:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240095b0:	2d00      	cmp	r5, #0
240095b2:	f040 8107 	bne.w	240097c4 <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
240095b6:	4aa7      	ldr	r2, [pc, #668]	; (24009854 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
240095b8:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
240095ba:	6d53      	ldr	r3, [r2, #84]	; 0x54
240095bc:	f023 0338 	bic.w	r3, r3, #56	; 0x38
240095c0:	430b      	orrs	r3, r1
240095c2:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
240095c4:	e9d4 3200 	ldrd	r3, r2, [r4]
240095c8:	e610      	b.n	240091ec <HAL_RCCEx_PeriphCLKConfig+0x358>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
240095ca:	2102      	movs	r1, #2
240095cc:	f104 0028 	add.w	r0, r4, #40	; 0x28
240095d0:	f7ff fbe6 	bl	24008da0 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
240095d4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
240095d8:	2800      	cmp	r0, #0
240095da:	f43f aef7 	beq.w	240093cc <HAL_RCCEx_PeriphCLKConfig+0x538>
      status = HAL_ERROR;
240095de:	2601      	movs	r6, #1
240095e0:	e6f4      	b.n	240093cc <HAL_RCCEx_PeriphCLKConfig+0x538>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240095e2:	2100      	movs	r1, #0
240095e4:	f104 0008 	add.w	r0, r4, #8
240095e8:	f7ff fb60 	bl	24008cac <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
240095ec:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
240095ee:	2800      	cmp	r0, #0
240095f0:	f43f af46 	beq.w	24009480 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
240095f4:	0797      	lsls	r7, r2, #30
240095f6:	4606      	mov	r6, r0
240095f8:	f57f af45 	bpl.w	24009486 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
240095fc:	2101      	movs	r1, #1
240095fe:	f104 0008 	add.w	r0, r4, #8
24009602:	f7ff fb53 	bl	24008cac <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
24009606:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
24009608:	2800      	cmp	r0, #0
2400960a:	f43f af3c 	beq.w	24009486 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
2400960e:	0755      	lsls	r5, r2, #29
24009610:	4606      	mov	r6, r0
24009612:	f57f af3b 	bpl.w	2400948c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24009616:	2102      	movs	r1, #2
24009618:	f104 0008 	add.w	r0, r4, #8
2400961c:	f7ff fb46 	bl	24008cac <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
24009620:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
24009622:	2800      	cmp	r0, #0
24009624:	f43f af32 	beq.w	2400948c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
24009628:	4606      	mov	r6, r0
2400962a:	0710      	lsls	r0, r2, #28
2400962c:	f57f af31 	bpl.w	24009492 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24009630:	2100      	movs	r1, #0
24009632:	f104 0028 	add.w	r0, r4, #40	; 0x28
24009636:	f7ff fbb3 	bl	24008da0 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
2400963a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
2400963c:	2800      	cmp	r0, #0
2400963e:	f43f af28 	beq.w	24009492 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
24009642:	06d1      	lsls	r1, r2, #27
24009644:	4606      	mov	r6, r0
24009646:	f57f af27 	bpl.w	24009498 <HAL_RCCEx_PeriphCLKConfig+0x604>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400964a:	f104 0528 	add.w	r5, r4, #40	; 0x28
2400964e:	2101      	movs	r1, #1
24009650:	4628      	mov	r0, r5
24009652:	f7ff fba5 	bl	24008da0 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
24009656:	2800      	cmp	r0, #0
24009658:	f000 8130 	beq.w	240098bc <HAL_RCCEx_PeriphCLKConfig+0xa28>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
2400965c:	6863      	ldr	r3, [r4, #4]
2400965e:	069b      	lsls	r3, r3, #26
24009660:	d550      	bpl.n	24009704 <HAL_RCCEx_PeriphCLKConfig+0x870>
24009662:	4606      	mov	r6, r0
24009664:	e047      	b.n	240096f6 <HAL_RCCEx_PeriphCLKConfig+0x862>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
24009666:	4f7c      	ldr	r7, [pc, #496]	; (24009858 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
24009668:	683b      	ldr	r3, [r7, #0]
2400966a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400966e:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
24009670:	f7fb fe0c 	bl	2400528c <HAL_GetTick>
24009674:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
24009676:	e006      	b.n	24009686 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
24009678:	f7fb fe08 	bl	2400528c <HAL_GetTick>
2400967c:	eba0 0008 	sub.w	r0, r0, r8
24009680:	2864      	cmp	r0, #100	; 0x64
24009682:	f200 81e2 	bhi.w	24009a4a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
24009686:	683b      	ldr	r3, [r7, #0]
24009688:	05da      	lsls	r2, r3, #23
2400968a:	d5f5      	bpl.n	24009678 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    if (ret == HAL_OK)
2400968c:	2d00      	cmp	r5, #0
2400968e:	f040 820b 	bne.w	24009aa8 <HAL_RCCEx_PeriphCLKConfig+0xc14>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
24009692:	4b70      	ldr	r3, [pc, #448]	; (24009854 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
24009694:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
24009698:	6f19      	ldr	r1, [r3, #112]	; 0x70
2400969a:	4051      	eors	r1, r2
2400969c:	f411 7f40 	tst.w	r1, #768	; 0x300
240096a0:	d00d      	beq.n	240096be <HAL_RCCEx_PeriphCLKConfig+0x82a>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
240096a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
240096a4:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
240096a6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
240096aa:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
240096ae:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
240096b0:	6f19      	ldr	r1, [r3, #112]	; 0x70
240096b2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
240096b6:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
240096b8:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
240096ba:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
240096be:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
240096c2:	f000 81d3 	beq.w	24009a6c <HAL_RCCEx_PeriphCLKConfig+0xbd8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
240096c6:	f402 7340 	and.w	r3, r2, #768	; 0x300
240096ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
240096ce:	f000 81e1 	beq.w	24009a94 <HAL_RCCEx_PeriphCLKConfig+0xc00>
240096d2:	4a60      	ldr	r2, [pc, #384]	; (24009854 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
240096d4:	6913      	ldr	r3, [r2, #16]
240096d6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
240096da:	6113      	str	r3, [r2, #16]
240096dc:	4a5d      	ldr	r2, [pc, #372]	; (24009854 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
240096de:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
240096e2:	6f11      	ldr	r1, [r2, #112]	; 0x70
240096e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
240096e8:	430b      	orrs	r3, r1
240096ea:	6713      	str	r3, [r2, #112]	; 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
240096ec:	e9d4 3200 	ldrd	r3, r2, [r4]
240096f0:	e54a      	b.n	24009188 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
240096f2:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
240096f6:	2102      	movs	r1, #2
240096f8:	4628      	mov	r0, r5
240096fa:	f7ff fb51 	bl	24008da0 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
240096fe:	2800      	cmp	r0, #0
24009700:	f43f aecd 	beq.w	2400949e <HAL_RCCEx_PeriphCLKConfig+0x60a>
  return HAL_ERROR;
24009704:	2001      	movs	r0, #1
}
24009706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
2400970a:	4a52      	ldr	r2, [pc, #328]	; (24009854 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
2400970c:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
24009710:	6d93      	ldr	r3, [r2, #88]	; 0x58
24009712:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
24009716:	430b      	orrs	r3, r1
24009718:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
2400971a:	e9d4 3200 	ldrd	r3, r2, [r4]
2400971e:	e446      	b.n	24008fae <HAL_RCCEx_PeriphCLKConfig+0x11a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
24009720:	4a4c      	ldr	r2, [pc, #304]	; (24009854 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
24009722:	6de1      	ldr	r1, [r4, #92]	; 0x5c
24009724:	6d13      	ldr	r3, [r2, #80]	; 0x50
24009726:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
2400972a:	430b      	orrs	r3, r1
2400972c:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
2400972e:	e9d4 3200 	ldrd	r3, r2, [r4]
24009732:	e402      	b.n	24008f3a <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
24009734:	4a47      	ldr	r2, [pc, #284]	; (24009854 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
24009736:	6e21      	ldr	r1, [r4, #96]	; 0x60
24009738:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400973a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
2400973e:	430b      	orrs	r3, r1
24009740:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
24009742:	e9d4 3200 	ldrd	r3, r2, [r4]
24009746:	e46b      	b.n	24009020 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
24009748:	4a42      	ldr	r2, [pc, #264]	; (24009854 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
2400974a:	6da1      	ldr	r1, [r4, #88]	; 0x58
2400974c:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400974e:	f023 0307 	bic.w	r3, r3, #7
24009752:	430b      	orrs	r3, r1
24009754:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
24009756:	e9d4 3200 	ldrd	r3, r2, [r4]
2400975a:	f7ff bbd4 	b.w	24008f06 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
2400975e:	4a3d      	ldr	r2, [pc, #244]	; (24009854 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
24009760:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
24009764:	6d93      	ldr	r3, [r2, #88]	; 0x58
24009766:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
2400976a:	430b      	orrs	r3, r1
2400976c:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
2400976e:	e9d4 3200 	ldrd	r3, r2, [r4]
24009772:	f7ff bbff 	b.w	24008f74 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24009776:	2102      	movs	r1, #2
24009778:	f104 0008 	add.w	r0, r4, #8
2400977c:	f7ff fa96 	bl	24008cac <RCCEx_PLL2_Config>
24009780:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24009782:	2d00      	cmp	r5, #0
24009784:	d07a      	beq.n	2400987c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
24009786:	462e      	mov	r6, r5
24009788:	e9d4 3200 	ldrd	r3, r2, [r4]
2400978c:	e61b      	b.n	240093c6 <HAL_RCCEx_PeriphCLKConfig+0x532>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400978e:	4a31      	ldr	r2, [pc, #196]	; (24009854 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
24009790:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24009792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24009796:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
24009798:	e43c      	b.n	24009014 <HAL_RCCEx_PeriphCLKConfig+0x180>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400979a:	4a2e      	ldr	r2, [pc, #184]	; (24009854 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
2400979c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
2400979e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240097a2:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
240097a4:	f7ff bbfd 	b.w	24008fa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240097a8:	4a2a      	ldr	r2, [pc, #168]	; (24009854 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
240097aa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
240097ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240097b0:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
240097b2:	f7ff bbbc 	b.w	24008f2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240097b6:	4a27      	ldr	r2, [pc, #156]	; (24009854 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
240097b8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
240097ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240097be:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
240097c0:	f7ff bbd2 	b.w	24008f68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
240097c4:	e9d4 3200 	ldrd	r3, r2, [r4]
240097c8:	462e      	mov	r6, r5
240097ca:	e50f      	b.n	240091ec <HAL_RCCEx_PeriphCLKConfig+0x358>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
240097cc:	e9d4 3200 	ldrd	r3, r2, [r4]
240097d0:	462e      	mov	r6, r5
240097d2:	e475      	b.n	240090c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
240097d4:	4a1f      	ldr	r2, [pc, #124]	; (24009854 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
240097d6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
240097d8:	6d53      	ldr	r3, [r2, #84]	; 0x54
240097da:	f023 0307 	bic.w	r3, r3, #7
240097de:	430b      	orrs	r3, r1
240097e0:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
240097e2:	e9d4 3200 	ldrd	r3, r2, [r4]
240097e6:	e51b      	b.n	24009220 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
240097e8:	4a1a      	ldr	r2, [pc, #104]	; (24009854 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
240097ea:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
240097ee:	6d93      	ldr	r3, [r2, #88]	; 0x58
240097f0:	f023 0307 	bic.w	r3, r3, #7
240097f4:	430b      	orrs	r3, r1
240097f6:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
240097f8:	e9d4 3200 	ldrd	r3, r2, [r4]
240097fc:	e52e      	b.n	2400925c <HAL_RCCEx_PeriphCLKConfig+0x3c8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
240097fe:	e9d4 3200 	ldrd	r3, r2, [r4]
24009802:	462e      	mov	r6, r5
24009804:	e54c      	b.n	240092a0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
24009806:	e9d4 3200 	ldrd	r3, r2, [r4]
2400980a:	462e      	mov	r6, r5
2400980c:	f7ff bbec 	b.w	24008fe8 <HAL_RCCEx_PeriphCLKConfig+0x154>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
24009810:	4a10      	ldr	r2, [pc, #64]	; (24009854 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
24009812:	6ca1      	ldr	r1, [r4, #72]	; 0x48
24009814:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
24009816:	f023 0303 	bic.w	r3, r3, #3
2400981a:	430b      	orrs	r3, r1
2400981c:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
2400981e:	e9d4 3200 	ldrd	r3, r2, [r4]
24009822:	e4ae      	b.n	24009182 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
24009824:	e9d4 3200 	ldrd	r3, r2, [r4]
24009828:	462e      	mov	r6, r5
2400982a:	e419      	b.n	24009060 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
2400982c:	e9d4 3200 	ldrd	r3, r2, [r4]
24009830:	462e      	mov	r6, r5
24009832:	e579      	b.n	24009328 <HAL_RCCEx_PeriphCLKConfig+0x494>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
24009834:	e9d4 3200 	ldrd	r3, r2, [r4]
24009838:	462e      	mov	r6, r5
2400983a:	e431      	b.n	240090a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
2400983c:	e9d4 3200 	ldrd	r3, r2, [r4]
24009840:	462e      	mov	r6, r5
24009842:	e54f      	b.n	240092e4 <HAL_RCCEx_PeriphCLKConfig+0x450>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
24009844:	e9d4 3200 	ldrd	r3, r2, [r4]
24009848:	462e      	mov	r6, r5
2400984a:	e59e      	b.n	2400938a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
2400984c:	e9d4 3200 	ldrd	r3, r2, [r4]
24009850:	462e      	mov	r6, r5
24009852:	e5ac      	b.n	240093ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
24009854:	58024400 	.word	0x58024400
24009858:	58024800 	.word	0x58024800
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400985c:	4a9b      	ldr	r2, [pc, #620]	; (24009acc <HAL_RCCEx_PeriphCLKConfig+0xc38>)
2400985e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24009860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24009864:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
24009866:	2d00      	cmp	r5, #0
24009868:	f43f ae4b 	beq.w	24009502 <HAL_RCCEx_PeriphCLKConfig+0x66e>
2400986c:	e010      	b.n	24009890 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400986e:	4a97      	ldr	r2, [pc, #604]	; (24009acc <HAL_RCCEx_PeriphCLKConfig+0xc38>)
24009870:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24009872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24009876:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
24009878:	2d00      	cmp	r5, #0
2400987a:	d184      	bne.n	24009786 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
2400987c:	4a93      	ldr	r2, [pc, #588]	; (24009acc <HAL_RCCEx_PeriphCLKConfig+0xc38>)
2400987e:	6d21      	ldr	r1, [r4, #80]	; 0x50
24009880:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
24009882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24009886:	430b      	orrs	r3, r1
24009888:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
2400988a:	e9d4 3200 	ldrd	r3, r2, [r4]
2400988e:	e59a      	b.n	240093c6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
24009890:	e9d4 3200 	ldrd	r3, r2, [r4]
24009894:	462e      	mov	r6, r5
24009896:	e5aa      	b.n	240093ee <HAL_RCCEx_PeriphCLKConfig+0x55a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24009898:	4a8c      	ldr	r2, [pc, #560]	; (24009acc <HAL_RCCEx_PeriphCLKConfig+0xc38>)
2400989a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
2400989c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240098a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
240098a2:	2d00      	cmp	r5, #0
240098a4:	f43f ae5f 	beq.w	24009566 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
240098a8:	e7d0      	b.n	2400984c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240098aa:	f104 0008 	add.w	r0, r4, #8
240098ae:	f7ff f9fd 	bl	24008cac <RCCEx_PLL2_Config>
240098b2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240098b4:	2d00      	cmp	r5, #0
240098b6:	f43f ae6a 	beq.w	2400958e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
240098ba:	e7c3      	b.n	24009844 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
240098bc:	6862      	ldr	r2, [r4, #4]
240098be:	e5eb      	b.n	24009498 <HAL_RCCEx_PeriphCLKConfig+0x604>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
240098c0:	2102      	movs	r1, #2
240098c2:	f104 0028 	add.w	r0, r4, #40	; 0x28
240098c6:	f7ff fa6b 	bl	24008da0 <RCCEx_PLL3_Config>
240098ca:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240098cc:	2d00      	cmp	r5, #0
240098ce:	f43f acff 	beq.w	240092d0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
240098d2:	e7b3      	b.n	2400983c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
240098d4:	2102      	movs	r1, #2
240098d6:	f104 0028 	add.w	r0, r4, #40	; 0x28
240098da:	f7ff fa61 	bl	24008da0 <RCCEx_PLL3_Config>
240098de:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240098e0:	2d00      	cmp	r5, #0
240098e2:	f43f ad17 	beq.w	24009314 <HAL_RCCEx_PeriphCLKConfig+0x480>
240098e6:	e7a1      	b.n	2400982c <HAL_RCCEx_PeriphCLKConfig+0x998>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240098e8:	4a78      	ldr	r2, [pc, #480]	; (24009acc <HAL_RCCEx_PeriphCLKConfig+0xc38>)
240098ea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
240098ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240098f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
240098f2:	2d00      	cmp	r5, #0
240098f4:	f43f ae21 	beq.w	2400953a <HAL_RCCEx_PeriphCLKConfig+0x6a6>
240098f8:	e768      	b.n	240097cc <HAL_RCCEx_PeriphCLKConfig+0x938>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
240098fa:	2101      	movs	r1, #1
240098fc:	f104 0028 	add.w	r0, r4, #40	; 0x28
24009900:	f7ff fa4e 	bl	24008da0 <RCCEx_PLL3_Config>
24009904:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24009906:	2d00      	cmp	r5, #0
24009908:	f43f aba1 	beq.w	2400904e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
2400990c:	e78a      	b.n	24009824 <HAL_RCCEx_PeriphCLKConfig+0x990>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400990e:	2101      	movs	r1, #1
24009910:	f104 0028 	add.w	r0, r4, #40	; 0x28
24009914:	f7ff fa44 	bl	24008da0 <RCCEx_PLL3_Config>
24009918:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400991a:	2d00      	cmp	r5, #0
2400991c:	f43f abb6 	beq.w	2400908c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
24009920:	e788      	b.n	24009834 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24009922:	2102      	movs	r1, #2
24009924:	f104 0008 	add.w	r0, r4, #8
24009928:	f7ff f9c0 	bl	24008cac <RCCEx_PLL2_Config>
2400992c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400992e:	2d00      	cmp	r5, #0
24009930:	f43f ab51 	beq.w	24008fd6 <HAL_RCCEx_PeriphCLKConfig+0x142>
24009934:	e767      	b.n	24009806 <HAL_RCCEx_PeriphCLKConfig+0x972>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24009936:	2102      	movs	r1, #2
24009938:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400993c:	f7ff fa30 	bl	24008da0 <RCCEx_PLL3_Config>
24009940:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24009942:	2d00      	cmp	r5, #0
24009944:	f43f aca2 	beq.w	2400928c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
24009948:	e759      	b.n	240097fe <HAL_RCCEx_PeriphCLKConfig+0x96a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2400994a:	2102      	movs	r1, #2
2400994c:	f104 0008 	add.w	r0, r4, #8
24009950:	f7ff f9ac 	bl	24008cac <RCCEx_PLL2_Config>
24009954:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24009956:	2d00      	cmp	r5, #0
24009958:	f43f af5a 	beq.w	24009810 <HAL_RCCEx_PeriphCLKConfig+0x97c>
2400995c:	e40e      	b.n	2400917c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
2400995e:	2102      	movs	r1, #2
24009960:	f104 0028 	add.w	r0, r4, #40	; 0x28
24009964:	f7ff fa1c 	bl	24008da0 <RCCEx_PLL3_Config>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
24009968:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
2400996c:	2800      	cmp	r0, #0
2400996e:	f43f ace3 	beq.w	24009338 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        status = HAL_ERROR;
24009972:	2601      	movs	r6, #1
24009974:	e4e0      	b.n	24009338 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24009976:	2102      	movs	r1, #2
24009978:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400997c:	f7ff fa10 	bl	24008da0 <RCCEx_PLL3_Config>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
24009980:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24009984:	2800      	cmp	r0, #0
24009986:	f43f ace7 	beq.w	24009358 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
        status = HAL_ERROR;
2400998a:	2601      	movs	r6, #1
2400998c:	e4e4      	b.n	24009358 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2400998e:	2100      	movs	r1, #0
24009990:	f104 0028 	add.w	r0, r4, #40	; 0x28
24009994:	f7ff fa04 	bl	24008da0 <RCCEx_PLL3_Config>
24009998:	4605      	mov	r5, r0
        break;
2400999a:	f7ff bae5 	b.w	24008f68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2400999e:	2102      	movs	r1, #2
240099a0:	3028      	adds	r0, #40	; 0x28
240099a2:	f7ff f9fd 	bl	24008da0 <RCCEx_PLL3_Config>
240099a6:	4606      	mov	r6, r0
    if (ret == HAL_OK)
240099a8:	2e00      	cmp	r6, #0
240099aa:	f43f aa8f 	beq.w	24008ecc <HAL_RCCEx_PeriphCLKConfig+0x38>
240099ae:	f7ff ba9a 	b.w	24008ee6 <HAL_RCCEx_PeriphCLKConfig+0x52>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240099b2:	4a46      	ldr	r2, [pc, #280]	; (24009acc <HAL_RCCEx_PeriphCLKConfig+0xc38>)
        break;
240099b4:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240099b6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
240099b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240099bc:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
240099be:	e5ac      	b.n	2400951a <HAL_RCCEx_PeriphCLKConfig+0x686>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240099c0:	2100      	movs	r1, #0
240099c2:	f104 0008 	add.w	r0, r4, #8
240099c6:	f7ff f971 	bl	24008cac <RCCEx_PLL2_Config>
240099ca:	4605      	mov	r5, r0
        break;
240099cc:	e5a5      	b.n	2400951a <HAL_RCCEx_PeriphCLKConfig+0x686>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
240099ce:	2100      	movs	r1, #0
240099d0:	f104 0028 	add.w	r0, r4, #40	; 0x28
240099d4:	f7ff f9e4 	bl	24008da0 <RCCEx_PLL3_Config>
240099d8:	4605      	mov	r5, r0
        break;
240099da:	f7ff bb1b 	b.w	24009014 <HAL_RCCEx_PeriphCLKConfig+0x180>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
240099de:	2100      	movs	r1, #0
240099e0:	f104 0028 	add.w	r0, r4, #40	; 0x28
240099e4:	f7ff f9dc 	bl	24008da0 <RCCEx_PLL3_Config>
240099e8:	4605      	mov	r5, r0
        break;
240099ea:	f7ff bada 	b.w	24008fa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
240099ee:	2100      	movs	r1, #0
240099f0:	f104 0028 	add.w	r0, r4, #40	; 0x28
240099f4:	f7ff f9d4 	bl	24008da0 <RCCEx_PLL3_Config>
240099f8:	4605      	mov	r5, r0
        break;
240099fa:	e58e      	b.n	2400951a <HAL_RCCEx_PeriphCLKConfig+0x686>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
240099fc:	2100      	movs	r1, #0
240099fe:	f104 0028 	add.w	r0, r4, #40	; 0x28
24009a02:	f7ff f9cd 	bl	24008da0 <RCCEx_PLL3_Config>
24009a06:	4605      	mov	r5, r0
        break;
24009a08:	f7ff ba91 	b.w	24008f2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24009a0c:	2101      	movs	r1, #1
24009a0e:	f104 0028 	add.w	r0, r4, #40	; 0x28
24009a12:	f7ff f9c5 	bl	24008da0 <RCCEx_PLL3_Config>
24009a16:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24009a18:	2d00      	cmp	r5, #0
24009a1a:	f43f aee5 	beq.w	240097e8 <HAL_RCCEx_PeriphCLKConfig+0x954>
24009a1e:	e41a      	b.n	24009256 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24009a20:	2101      	movs	r1, #1
24009a22:	f104 0028 	add.w	r0, r4, #40	; 0x28
24009a26:	f7ff f9bb 	bl	24008da0 <RCCEx_PLL3_Config>
24009a2a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24009a2c:	2d00      	cmp	r5, #0
24009a2e:	f43f aed1 	beq.w	240097d4 <HAL_RCCEx_PeriphCLKConfig+0x940>
24009a32:	f7ff bbf2 	b.w	2400921a <HAL_RCCEx_PeriphCLKConfig+0x386>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24009a36:	2101      	movs	r1, #1
24009a38:	f104 0028 	add.w	r0, r4, #40	; 0x28
24009a3c:	f7ff f9b0 	bl	24008da0 <RCCEx_PLL3_Config>
24009a40:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24009a42:	2d00      	cmp	r5, #0
24009a44:	f43f adb7 	beq.w	240095b6 <HAL_RCCEx_PeriphCLKConfig+0x722>
24009a48:	e6bc      	b.n	240097c4 <HAL_RCCEx_PeriphCLKConfig+0x930>
        status = ret;
24009a4a:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
24009a4c:	e9d4 3200 	ldrd	r3, r2, [r4]
24009a50:	4635      	mov	r5, r6
24009a52:	f7ff bb99 	b.w	24009188 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    switch (PeriphClkInit->SpdifrxClockSelection)
24009a56:	2601      	movs	r6, #1
24009a58:	f7ff ba47 	b.w	24008eea <HAL_RCCEx_PeriphCLKConfig+0x56>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24009a5c:	4a1b      	ldr	r2, [pc, #108]	; (24009acc <HAL_RCCEx_PeriphCLKConfig+0xc38>)
24009a5e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24009a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24009a64:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
24009a66:	6e81      	ldr	r1, [r0, #104]	; 0x68
24009a68:	f7ff ba36 	b.w	24008ed8 <HAL_RCCEx_PeriphCLKConfig+0x44>
        tickstart = HAL_GetTick();
24009a6c:	f7fb fc0e 	bl	2400528c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24009a70:	f8df 8058 	ldr.w	r8, [pc, #88]	; 24009acc <HAL_RCCEx_PeriphCLKConfig+0xc38>
        tickstart = HAL_GetTick();
24009a74:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24009a76:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24009a7a:	e004      	b.n	24009a86 <HAL_RCCEx_PeriphCLKConfig+0xbf2>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24009a7c:	f7fb fc06 	bl	2400528c <HAL_GetTick>
24009a80:	1bc0      	subs	r0, r0, r7
24009a82:	4548      	cmp	r0, r9
24009a84:	d8e1      	bhi.n	24009a4a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24009a86:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
24009a8a:	079b      	lsls	r3, r3, #30
24009a8c:	d5f6      	bpl.n	24009a7c <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
24009a8e:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
24009a92:	e618      	b.n	240096c6 <HAL_RCCEx_PeriphCLKConfig+0x832>
24009a94:	490d      	ldr	r1, [pc, #52]	; (24009acc <HAL_RCCEx_PeriphCLKConfig+0xc38>)
24009a96:	4b0e      	ldr	r3, [pc, #56]	; (24009ad0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>)
24009a98:	ea03 1312 	and.w	r3, r3, r2, lsr #4
24009a9c:	690a      	ldr	r2, [r1, #16]
24009a9e:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
24009aa2:	4313      	orrs	r3, r2
24009aa4:	610b      	str	r3, [r1, #16]
24009aa6:	e619      	b.n	240096dc <HAL_RCCEx_PeriphCLKConfig+0x848>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
24009aa8:	e9d4 3200 	ldrd	r3, r2, [r4]
24009aac:	462e      	mov	r6, r5
24009aae:	f7ff bb6b 	b.w	24009188 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    switch (PeriphClkInit->FmcClockSelection)
24009ab2:	2601      	movs	r6, #1
24009ab4:	4635      	mov	r5, r6
24009ab6:	f7ff bb64 	b.w	24009182 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    switch (PeriphClkInit->Lpuart1ClockSelection)
24009aba:	2601      	movs	r6, #1
24009abc:	4635      	mov	r5, r6
24009abe:	f7ff bbcd 	b.w	2400925c <HAL_RCCEx_PeriphCLKConfig+0x3c8>
    switch (PeriphClkInit->Usart234578ClockSelection)
24009ac2:	2601      	movs	r6, #1
24009ac4:	4635      	mov	r5, r6
24009ac6:	f7ff bbab 	b.w	24009220 <HAL_RCCEx_PeriphCLKConfig+0x38c>
24009aca:	bf00      	nop
24009acc:	58024400 	.word	0x58024400
24009ad0:	00ffffcf 	.word	0x00ffffcf

24009ad4 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24009ad4:	4a50      	ldr	r2, [pc, #320]	; (24009c18 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
{
24009ad6:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24009ad8:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
24009ada:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
24009adc:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll2m != 0U)
24009ade:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
24009ae2:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
24009ae6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
  if (pll2m != 0U)
24009ae8:	d05d      	beq.n	24009ba6 <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
24009aea:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
24009aee:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24009af2:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
24009af6:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
24009afa:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
24009afc:	ee07 4a90 	vmov	s15, r4
24009b00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
24009b04:	d003      	beq.n	24009b0e <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
24009b06:	2902      	cmp	r1, #2
24009b08:	d078      	beq.n	24009bfc <HAL_RCCEx_GetPLL2ClockFreq+0x128>
24009b0a:	2900      	cmp	r1, #0
24009b0c:	d050      	beq.n	24009bb0 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24009b0e:	ee07 3a90 	vmov	s15, r3
24009b12:	ed9f 5a42 	vldr	s10, [pc, #264]	; 24009c1c <HAL_RCCEx_GetPLL2ClockFreq+0x148>
24009b16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009b1a:	6b93      	ldr	r3, [r2, #56]	; 0x38
24009b1c:	eec5 6a27 	vdiv.f32	s13, s10, s15
24009b20:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 24009c20 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
24009b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
24009b28:	ee07 3a90 	vmov	s15, r3
24009b2c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24009b30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009b34:	ee77 7aa5 	vadd.f32	s15, s15, s11
24009b38:	eee7 7a06 	vfma.f32	s15, s14, s12
24009b3c:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
24009b40:	4a35      	ldr	r2, [pc, #212]	; (24009c18 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
24009b42:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24009b46:	6b93      	ldr	r3, [r2, #56]	; 0x38
24009b48:	f3c3 2346 	ubfx	r3, r3, #9, #7
24009b4c:	ee07 3a90 	vmov	s15, r3
24009b50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
24009b54:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
24009b56:	ee77 7a86 	vadd.f32	s15, s15, s12
24009b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24009b5e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
24009b62:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
24009b66:	6b93      	ldr	r3, [r2, #56]	; 0x38
24009b68:	f3c3 4306 	ubfx	r3, r3, #16, #7
24009b6c:	ee07 3a90 	vmov	s15, r3
24009b70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009b74:	ee77 7a86 	vadd.f32	s15, s15, s12
24009b78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24009b7c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
24009b80:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
24009b84:	6b93      	ldr	r3, [r2, #56]	; 0x38
24009b86:	f3c3 6306 	ubfx	r3, r3, #24, #7
24009b8a:	ee07 3a10 	vmov	s14, r3
24009b8e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24009b92:	ee37 7a06 	vadd.f32	s14, s14, s12
24009b96:	eec6 7a87 	vdiv.f32	s15, s13, s14
24009b9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24009b9e:	ee17 3a90 	vmov	r3, s15
24009ba2:	6083      	str	r3, [r0, #8]
}
24009ba4:	4770      	bx	lr
24009ba6:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
24009ba8:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
24009bac:	6083      	str	r3, [r0, #8]
}
24009bae:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24009bb0:	6811      	ldr	r1, [r2, #0]
24009bb2:	0689      	lsls	r1, r1, #26
24009bb4:	d529      	bpl.n	24009c0a <HAL_RCCEx_GetPLL2ClockFreq+0x136>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009bb6:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24009bb8:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009bbc:	4919      	ldr	r1, [pc, #100]	; (24009c24 <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24009bbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24009bc2:	6b93      	ldr	r3, [r2, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009bc4:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24009bc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009bcc:	ed9f 5a14 	vldr	s10, [pc, #80]	; 24009c20 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
24009bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009bd4:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24009bd6:	ee06 3a10 	vmov	s12, r3
24009bda:	ee05 1a90 	vmov	s11, r1
24009bde:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
24009be2:	eef8 5ae5 	vcvt.f32.s32	s11, s11
24009be6:	ee36 6a26 	vadd.f32	s12, s12, s13
24009bea:	eec5 6aa7 	vdiv.f32	s13, s11, s15
24009bee:	eef0 7a46 	vmov.f32	s15, s12
24009bf2:	eee7 7a05 	vfma.f32	s15, s14, s10
24009bf6:	ee66 6aa7 	vmul.f32	s13, s13, s15
24009bfa:	e7a1      	b.n	24009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24009bfc:	ee07 3a90 	vmov	s15, r3
24009c00:	ed9f 5a09 	vldr	s10, [pc, #36]	; 24009c28 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
24009c04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009c08:	e787      	b.n	24009b1a <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24009c0a:	ee07 3a90 	vmov	s15, r3
24009c0e:	ed9f 5a07 	vldr	s10, [pc, #28]	; 24009c2c <HAL_RCCEx_GetPLL2ClockFreq+0x158>
24009c12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009c16:	e780      	b.n	24009b1a <HAL_RCCEx_GetPLL2ClockFreq+0x46>
24009c18:	58024400 	.word	0x58024400
24009c1c:	4a742400 	.word	0x4a742400
24009c20:	39000000 	.word	0x39000000
24009c24:	03d09000 	.word	0x03d09000
24009c28:	4b742400 	.word	0x4b742400
24009c2c:	4c742400 	.word	0x4c742400

24009c30 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24009c30:	4a50      	ldr	r2, [pc, #320]	; (24009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
{
24009c32:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24009c34:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
24009c36:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
24009c38:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll3m != 0U)
24009c3a:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
24009c3e:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
24009c42:	6c54      	ldr	r4, [r2, #68]	; 0x44
  if (pll3m != 0U)
24009c44:	d05d      	beq.n	24009d02 <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
24009c46:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
24009c4a:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24009c4e:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
24009c52:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
24009c56:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
24009c58:	ee07 4a90 	vmov	s15, r4
24009c5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
24009c60:	d003      	beq.n	24009c6a <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
24009c62:	2902      	cmp	r1, #2
24009c64:	d078      	beq.n	24009d58 <HAL_RCCEx_GetPLL3ClockFreq+0x128>
24009c66:	2900      	cmp	r1, #0
24009c68:	d050      	beq.n	24009d0c <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24009c6a:	ee07 3a90 	vmov	s15, r3
24009c6e:	ed9f 5a42 	vldr	s10, [pc, #264]	; 24009d78 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
24009c72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009c76:	6c13      	ldr	r3, [r2, #64]	; 0x40
24009c78:	eec5 6a27 	vdiv.f32	s13, s10, s15
24009c7c:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 24009d7c <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
24009c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
24009c84:	ee07 3a90 	vmov	s15, r3
24009c88:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24009c8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009c90:	ee77 7aa5 	vadd.f32	s15, s15, s11
24009c94:	eee7 7a06 	vfma.f32	s15, s14, s12
24009c98:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
24009c9c:	4a35      	ldr	r2, [pc, #212]	; (24009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
24009c9e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24009ca2:	6c13      	ldr	r3, [r2, #64]	; 0x40
24009ca4:	f3c3 2346 	ubfx	r3, r3, #9, #7
24009ca8:	ee07 3a90 	vmov	s15, r3
24009cac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
24009cb0:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
24009cb2:	ee77 7a86 	vadd.f32	s15, s15, s12
24009cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24009cba:	eebc 7ac7 	vcvt.u32.f32	s14, s14
24009cbe:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
24009cc2:	6c13      	ldr	r3, [r2, #64]	; 0x40
24009cc4:	f3c3 4306 	ubfx	r3, r3, #16, #7
24009cc8:	ee07 3a90 	vmov	s15, r3
24009ccc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009cd0:	ee77 7a86 	vadd.f32	s15, s15, s12
24009cd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24009cd8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
24009cdc:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
24009ce0:	6c13      	ldr	r3, [r2, #64]	; 0x40
24009ce2:	f3c3 6306 	ubfx	r3, r3, #24, #7
24009ce6:	ee07 3a10 	vmov	s14, r3
24009cea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24009cee:	ee37 7a06 	vadd.f32	s14, s14, s12
24009cf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
24009cf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24009cfa:	ee17 3a90 	vmov	r3, s15
24009cfe:	6083      	str	r3, [r0, #8]
}
24009d00:	4770      	bx	lr
24009d02:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
24009d04:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
24009d08:	6083      	str	r3, [r0, #8]
}
24009d0a:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24009d0c:	6811      	ldr	r1, [r2, #0]
24009d0e:	0689      	lsls	r1, r1, #26
24009d10:	d529      	bpl.n	24009d66 <HAL_RCCEx_GetPLL3ClockFreq+0x136>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009d12:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24009d14:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009d18:	4919      	ldr	r1, [pc, #100]	; (24009d80 <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24009d1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24009d1e:	6c13      	ldr	r3, [r2, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009d20:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24009d24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009d28:	ed9f 5a14 	vldr	s10, [pc, #80]	; 24009d7c <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
24009d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009d30:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24009d32:	ee06 3a10 	vmov	s12, r3
24009d36:	ee05 1a90 	vmov	s11, r1
24009d3a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
24009d3e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
24009d42:	ee36 6a26 	vadd.f32	s12, s12, s13
24009d46:	eec5 6aa7 	vdiv.f32	s13, s11, s15
24009d4a:	eef0 7a46 	vmov.f32	s15, s12
24009d4e:	eee7 7a05 	vfma.f32	s15, s14, s10
24009d52:	ee66 6aa7 	vmul.f32	s13, s13, s15
24009d56:	e7a1      	b.n	24009c9c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24009d58:	ee07 3a90 	vmov	s15, r3
24009d5c:	ed9f 5a09 	vldr	s10, [pc, #36]	; 24009d84 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
24009d60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009d64:	e787      	b.n	24009c76 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24009d66:	ee07 3a90 	vmov	s15, r3
24009d6a:	ed9f 5a07 	vldr	s10, [pc, #28]	; 24009d88 <HAL_RCCEx_GetPLL3ClockFreq+0x158>
24009d6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009d72:	e780      	b.n	24009c76 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
24009d74:	58024400 	.word	0x58024400
24009d78:	4a742400 	.word	0x4a742400
24009d7c:	39000000 	.word	0x39000000
24009d80:	03d09000 	.word	0x03d09000
24009d84:	4b742400 	.word	0x4b742400
24009d88:	4c742400 	.word	0x4c742400

24009d8c <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24009d8c:	4a51      	ldr	r2, [pc, #324]	; (24009ed4 <HAL_RCCEx_GetPLL1ClockFreq+0x148>)
{
24009d8e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24009d90:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
24009d92:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
24009d94:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll1m != 0U)
24009d96:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
24009d9a:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24009d9e:	6b54      	ldr	r4, [r2, #52]	; 0x34
  if (pll1m != 0U)
24009da0:	d05e      	beq.n	24009e60 <HAL_RCCEx_GetPLL1ClockFreq+0xd4>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24009da2:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
24009da6:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24009daa:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24009dae:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
24009db2:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24009db4:	ee07 4a90 	vmov	s15, r4
24009db8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
24009dbc:	f000 8082 	beq.w	24009ec4 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
24009dc0:	2902      	cmp	r1, #2
24009dc2:	d078      	beq.n	24009eb6 <HAL_RCCEx_GetPLL1ClockFreq+0x12a>
24009dc4:	2900      	cmp	r1, #0
24009dc6:	d050      	beq.n	24009e6a <HAL_RCCEx_GetPLL1ClockFreq+0xde>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24009dc8:	ee07 3a90 	vmov	s15, r3
24009dcc:	ed9f 5a42 	vldr	s10, [pc, #264]	; 24009ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
24009dd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009dd4:	6b13      	ldr	r3, [r2, #48]	; 0x30
24009dd6:	eec5 6a27 	vdiv.f32	s13, s10, s15
24009dda:	ed9f 6a40 	vldr	s12, [pc, #256]	; 24009edc <HAL_RCCEx_GetPLL1ClockFreq+0x150>
24009dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
24009de2:	ee07 3a90 	vmov	s15, r3
24009de6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24009dea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009dee:	ee77 7aa5 	vadd.f32	s15, s15, s11
24009df2:	eee7 7a06 	vfma.f32	s15, s14, s12
24009df6:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
24009dfa:	4a36      	ldr	r2, [pc, #216]	; (24009ed4 <HAL_RCCEx_GetPLL1ClockFreq+0x148>)
24009dfc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24009e00:	6b13      	ldr	r3, [r2, #48]	; 0x30
24009e02:	f3c3 2346 	ubfx	r3, r3, #9, #7
24009e06:	ee07 3a90 	vmov	s15, r3
24009e0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
24009e0e:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
24009e10:	ee77 7a86 	vadd.f32	s15, s15, s12
24009e14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24009e18:	eebc 7ac7 	vcvt.u32.f32	s14, s14
24009e1c:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
24009e20:	6b13      	ldr	r3, [r2, #48]	; 0x30
24009e22:	f3c3 4306 	ubfx	r3, r3, #16, #7
24009e26:	ee07 3a90 	vmov	s15, r3
24009e2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009e2e:	ee77 7a86 	vadd.f32	s15, s15, s12
24009e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24009e36:	eebc 7ac7 	vcvt.u32.f32	s14, s14
24009e3a:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
24009e3e:	6b13      	ldr	r3, [r2, #48]	; 0x30
24009e40:	f3c3 6306 	ubfx	r3, r3, #24, #7
24009e44:	ee07 3a10 	vmov	s14, r3
24009e48:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24009e4c:	ee37 7a06 	vadd.f32	s14, s14, s12
24009e50:	eec6 7a87 	vdiv.f32	s15, s13, s14
24009e54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24009e58:	ee17 3a90 	vmov	r3, s15
24009e5c:	6083      	str	r3, [r0, #8]
}
24009e5e:	4770      	bx	lr
24009e60:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
24009e62:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
24009e66:	6083      	str	r3, [r0, #8]
}
24009e68:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24009e6a:	6811      	ldr	r1, [r2, #0]
24009e6c:	0689      	lsls	r1, r1, #26
24009e6e:	d5ab      	bpl.n	24009dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x3c>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009e70:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24009e72:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009e76:	491a      	ldr	r1, [pc, #104]	; (24009ee0 <HAL_RCCEx_GetPLL1ClockFreq+0x154>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24009e78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24009e7c:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009e7e:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24009e82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009e86:	ed9f 5a15 	vldr	s10, [pc, #84]	; 24009edc <HAL_RCCEx_GetPLL1ClockFreq+0x150>
24009e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009e8e:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24009e90:	ee06 3a10 	vmov	s12, r3
24009e94:	ee05 1a90 	vmov	s11, r1
24009e98:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
24009e9c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
24009ea0:	ee36 6a26 	vadd.f32	s12, s12, s13
24009ea4:	eec5 6aa7 	vdiv.f32	s13, s11, s15
24009ea8:	eef0 7a46 	vmov.f32	s15, s12
24009eac:	eee7 7a05 	vfma.f32	s15, s14, s10
24009eb0:	ee66 6aa7 	vmul.f32	s13, s13, s15
24009eb4:	e7a1      	b.n	24009dfa <HAL_RCCEx_GetPLL1ClockFreq+0x6e>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24009eb6:	ee07 3a90 	vmov	s15, r3
24009eba:	ed9f 5a0a 	vldr	s10, [pc, #40]	; 24009ee4 <HAL_RCCEx_GetPLL1ClockFreq+0x158>
24009ebe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009ec2:	e787      	b.n	24009dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x48>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24009ec4:	ee07 3a90 	vmov	s15, r3
24009ec8:	ed9f 5a07 	vldr	s10, [pc, #28]	; 24009ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x15c>
24009ecc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009ed0:	e780      	b.n	24009dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x48>
24009ed2:	bf00      	nop
24009ed4:	58024400 	.word	0x58024400
24009ed8:	4c742400 	.word	0x4c742400
24009edc:	39000000 	.word	0x39000000
24009ee0:	03d09000 	.word	0x03d09000
24009ee4:	4b742400 	.word	0x4b742400
24009ee8:	4a742400 	.word	0x4a742400

24009eec <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
24009eec:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
24009ef0:	430b      	orrs	r3, r1
{
24009ef2:	b500      	push	{lr}
24009ef4:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
24009ef6:	f000 8083 	beq.w	2400a000 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
24009efa:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
24009efe:	430b      	orrs	r3, r1
24009f00:	d038      	beq.n	24009f74 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
24009f02:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
24009f06:	430b      	orrs	r3, r1
24009f08:	f000 80e6 	beq.w	2400a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
24009f0c:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
24009f10:	430b      	orrs	r3, r1
24009f12:	f000 8089 	beq.w	2400a028 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
24009f16:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
24009f1a:	430b      	orrs	r3, r1
24009f1c:	d060      	beq.n	24009fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
24009f1e:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
24009f22:	430b      	orrs	r3, r1
24009f24:	f000 8112 	beq.w	2400a14c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
24009f28:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
24009f2c:	430b      	orrs	r3, r1
24009f2e:	f000 80a3 	beq.w	2400a078 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
24009f32:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
24009f36:	430b      	orrs	r3, r1
24009f38:	f000 80fa 	beq.w	2400a130 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
24009f3c:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
24009f40:	430b      	orrs	r3, r1
24009f42:	f000 8143 	beq.w	2400a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
24009f46:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
24009f4a:	4308      	orrs	r0, r1
24009f4c:	d137      	bne.n	24009fbe <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
24009f4e:	4a9a      	ldr	r2, [pc, #616]	; (2400a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009f50:	6d13      	ldr	r3, [r2, #80]	; 0x50
24009f52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
24009f56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24009f5a:	f000 8084 	beq.w	2400a066 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
24009f5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24009f62:	f000 8157 	beq.w	2400a214 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
24009f66:	bb53      	cbnz	r3, 24009fbe <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
24009f68:	6810      	ldr	r0, [r2, #0]
24009f6a:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
24009f6e:	d044      	beq.n	24009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = HSE_VALUE;
24009f70:	4892      	ldr	r0, [pc, #584]	; (2400a1bc <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
24009f72:	e042      	b.n	24009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
24009f74:	4a90      	ldr	r2, [pc, #576]	; (2400a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009f76:	6d13      	ldr	r3, [r2, #80]	; 0x50
24009f78:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
24009f7c:	2b80      	cmp	r3, #128	; 0x80
24009f7e:	f000 80a6 	beq.w	2400a0ce <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
24009f82:	d920      	bls.n	24009fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
24009f84:	2bc0      	cmp	r3, #192	; 0xc0
24009f86:	d037      	beq.n	24009ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
24009f88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24009f8c:	d117      	bne.n	24009fbe <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24009f8e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24009f90:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24009f92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24009f96:	0749      	lsls	r1, r1, #29
24009f98:	d502      	bpl.n	24009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
24009f9a:	2b00      	cmp	r3, #0
24009f9c:	f000 80c2 	beq.w	2400a124 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
24009fa0:	4a85      	ldr	r2, [pc, #532]	; (2400a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009fa2:	6812      	ldr	r2, [r2, #0]
24009fa4:	05d0      	lsls	r0, r2, #23
24009fa6:	d503      	bpl.n	24009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
24009fa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24009fac:	f000 8102 	beq.w	2400a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
24009fb0:	4a81      	ldr	r2, [pc, #516]	; (2400a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009fb2:	6812      	ldr	r2, [r2, #0]
24009fb4:	0391      	lsls	r1, r2, #14
24009fb6:	d502      	bpl.n	24009fbe <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
24009fb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24009fbc:	d0d8      	beq.n	24009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
24009fbe:	2000      	movs	r0, #0
}
24009fc0:	b005      	add	sp, #20
24009fc2:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
24009fc6:	2b00      	cmp	r3, #0
24009fc8:	d04d      	beq.n	2400a066 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
24009fca:	2b40      	cmp	r3, #64	; 0x40
24009fcc:	d1f7      	bne.n	24009fbe <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24009fce:	6810      	ldr	r0, [r2, #0]
24009fd0:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
24009fd4:	d011      	beq.n	24009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24009fd6:	a801      	add	r0, sp, #4
24009fd8:	f7ff fd7c 	bl	24009ad4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
24009fdc:	9801      	ldr	r0, [sp, #4]
24009fde:	e00c      	b.n	24009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
24009fe0:	4a75      	ldr	r2, [pc, #468]	; (2400a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009fe2:	6d13      	ldr	r3, [r2, #80]	; 0x50
24009fe4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
24009fe8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24009fec:	d06f      	beq.n	2400a0ce <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
24009fee:	d938      	bls.n	2400a062 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
24009ff0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
24009ff4:	f040 8088 	bne.w	2400a108 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
24009ff8:	4871      	ldr	r0, [pc, #452]	; (2400a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
24009ffa:	b005      	add	sp, #20
24009ffc:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
2400a000:	4b6d      	ldr	r3, [pc, #436]	; (2400a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400a002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400a004:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
2400a008:	2b04      	cmp	r3, #4
2400a00a:	d8d8      	bhi.n	24009fbe <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
2400a00c:	a201      	add	r2, pc, #4	; (adr r2, 2400a014 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
2400a00e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2400a012:	bf00      	nop
2400a014:	2400a0b7 	.word	0x2400a0b7
2400a018:	2400a093 	.word	0x2400a093
2400a01c:	2400a0a3 	.word	0x2400a0a3
2400a020:	24009ff9 	.word	0x24009ff9
2400a024:	2400a09f 	.word	0x2400a09f
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
2400a028:	4a63      	ldr	r2, [pc, #396]	; (2400a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400a02a:	6d93      	ldr	r3, [r2, #88]	; 0x58
2400a02c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
2400a030:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2400a034:	d04b      	beq.n	2400a0ce <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
2400a036:	d944      	bls.n	2400a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
2400a038:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
2400a03c:	d0dc      	beq.n	24009ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
2400a03e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
2400a042:	d1bc      	bne.n	24009fbe <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2400a044:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2400a046:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2400a048:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2400a04c:	0752      	lsls	r2, r2, #29
2400a04e:	d5a7      	bpl.n	24009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
2400a050:	2b00      	cmp	r3, #0
2400a052:	d1a5      	bne.n	24009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400a054:	4b58      	ldr	r3, [pc, #352]	; (2400a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400a056:	485b      	ldr	r0, [pc, #364]	; (2400a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
2400a058:	681b      	ldr	r3, [r3, #0]
2400a05a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
2400a05e:	40d8      	lsrs	r0, r3
2400a060:	e7cb      	b.n	24009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
2400a062:	2b00      	cmp	r3, #0
2400a064:	d154      	bne.n	2400a110 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2400a066:	6810      	ldr	r0, [r2, #0]
2400a068:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
2400a06c:	d0c5      	beq.n	24009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
2400a06e:	a801      	add	r0, sp, #4
2400a070:	f7ff fe8c 	bl	24009d8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
2400a074:	9802      	ldr	r0, [sp, #8]
2400a076:	e7c0      	b.n	24009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
2400a078:	4a4f      	ldr	r2, [pc, #316]	; (2400a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400a07a:	6d93      	ldr	r3, [r2, #88]	; 0x58
2400a07c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
2400a080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2400a084:	f000 80d0 	beq.w	2400a228 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
2400a088:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2400a08c:	d0da      	beq.n	2400a044 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
2400a08e:	2b00      	cmp	r3, #0
2400a090:	d195      	bne.n	24009fbe <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2400a092:	4b49      	ldr	r3, [pc, #292]	; (2400a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400a094:	6818      	ldr	r0, [r3, #0]
2400a096:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
2400a09a:	d0ae      	beq.n	24009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
2400a09c:	e79b      	b.n	24009fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2400a09e:	4a46      	ldr	r2, [pc, #280]	; (2400a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400a0a0:	e775      	b.n	24009f8e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2400a0a2:	4b45      	ldr	r3, [pc, #276]	; (2400a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400a0a4:	6818      	ldr	r0, [r3, #0]
2400a0a6:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
2400a0aa:	d0a6      	beq.n	24009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2400a0ac:	a801      	add	r0, sp, #4
2400a0ae:	f7ff fdbf 	bl	24009c30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
2400a0b2:	9801      	ldr	r0, [sp, #4]
2400a0b4:	e7a1      	b.n	24009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2400a0b6:	4b40      	ldr	r3, [pc, #256]	; (2400a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400a0b8:	6818      	ldr	r0, [r3, #0]
2400a0ba:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
2400a0be:	d09c      	beq.n	24009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
2400a0c0:	e7d5      	b.n	2400a06e <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
2400a0c2:	2b00      	cmp	r3, #0
2400a0c4:	d0cf      	beq.n	2400a066 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
2400a0c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
2400a0ca:	d080      	beq.n	24009fce <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
2400a0cc:	e777      	b.n	24009fbe <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2400a0ce:	6810      	ldr	r0, [r2, #0]
2400a0d0:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
2400a0d4:	d091      	beq.n	24009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
2400a0d6:	e7e9      	b.n	2400a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
2400a0d8:	4a37      	ldr	r2, [pc, #220]	; (2400a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400a0da:	6d93      	ldr	r3, [r2, #88]	; 0x58
2400a0dc:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
2400a0e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2400a0e4:	d0f3      	beq.n	2400a0ce <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
2400a0e6:	d806      	bhi.n	2400a0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
2400a0e8:	2b00      	cmp	r3, #0
2400a0ea:	d0bc      	beq.n	2400a066 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
2400a0ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
2400a0f0:	f43f af6d 	beq.w	24009fce <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
2400a0f4:	e763      	b.n	24009fbe <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
2400a0f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
2400a0fa:	f43f af7d 	beq.w	24009ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
2400a0fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
2400a102:	f43f af44 	beq.w	24009f8e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
2400a106:	e75a      	b.n	24009fbe <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    switch (srcclk)
2400a108:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400a10c:	d09a      	beq.n	2400a044 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
2400a10e:	e756      	b.n	24009fbe <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
2400a110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
2400a114:	f43f af5b 	beq.w	24009fce <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
2400a118:	e751      	b.n	24009fbe <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
2400a11a:	6810      	ldr	r0, [r2, #0]
2400a11c:	f010 0004 	ands.w	r0, r0, #4
2400a120:	f43f af6b 	beq.w	24009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400a124:	6813      	ldr	r3, [r2, #0]
2400a126:	4827      	ldr	r0, [pc, #156]	; (2400a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
2400a128:	f3c3 03c1 	ubfx	r3, r3, #3, #2
2400a12c:	40d8      	lsrs	r0, r3
2400a12e:	e764      	b.n	24009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
2400a130:	4b21      	ldr	r3, [pc, #132]	; (2400a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400a132:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
2400a134:	03d2      	lsls	r2, r2, #15
2400a136:	d5bf      	bpl.n	2400a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2400a138:	6818      	ldr	r0, [r3, #0]
2400a13a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
2400a13e:	f43f af5c 	beq.w	24009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2400a142:	a801      	add	r0, sp, #4
2400a144:	f7ff fcc6 	bl	24009ad4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
2400a148:	9803      	ldr	r0, [sp, #12]
2400a14a:	e756      	b.n	24009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
2400a14c:	4a1a      	ldr	r2, [pc, #104]	; (2400a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400a14e:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400a150:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
2400a154:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
2400a158:	d0df      	beq.n	2400a11a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
2400a15a:	d810      	bhi.n	2400a17e <HAL_RCCEx_GetPeriphCLKFreq+0x292>
2400a15c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2400a160:	d058      	beq.n	2400a214 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
2400a162:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2400a166:	d118      	bne.n	2400a19a <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2400a168:	4b13      	ldr	r3, [pc, #76]	; (2400a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400a16a:	6818      	ldr	r0, [r3, #0]
2400a16c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
2400a170:	f43f af43 	beq.w	24009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2400a174:	a801      	add	r0, sp, #4
2400a176:	f7ff fd5b 	bl	24009c30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
2400a17a:	9802      	ldr	r0, [sp, #8]
2400a17c:	e73d      	b.n	24009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
2400a17e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
2400a182:	d012      	beq.n	2400a1aa <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
2400a184:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
2400a188:	f47f af19 	bne.w	24009fbe <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
2400a18c:	4b0a      	ldr	r3, [pc, #40]	; (2400a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400a18e:	6818      	ldr	r0, [r3, #0]
2400a190:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
2400a194:	f43f af31 	beq.w	24009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
2400a198:	e6ea      	b.n	24009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
2400a19a:	2b00      	cmp	r3, #0
2400a19c:	f47f af0f 	bne.w	24009fbe <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
}
2400a1a0:	b005      	add	sp, #20
2400a1a2:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
2400a1a6:	f7fe bd39 	b.w	24008c1c <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
2400a1aa:	6810      	ldr	r0, [r2, #0]
2400a1ac:	f410 7080 	ands.w	r0, r0, #256	; 0x100
2400a1b0:	f43f af23 	beq.w	24009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = CSI_VALUE;
2400a1b4:	4804      	ldr	r0, [pc, #16]	; (2400a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
2400a1b6:	e720      	b.n	24009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
2400a1b8:	58024400 	.word	0x58024400
2400a1bc:	00f42400 	.word	0x00f42400
2400a1c0:	00bb8000 	.word	0x00bb8000
2400a1c4:	03d09000 	.word	0x03d09000
2400a1c8:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
2400a1cc:	4b28      	ldr	r3, [pc, #160]	; (2400a270 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
2400a1ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2400a1d0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
2400a1d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
2400a1d8:	d037      	beq.n	2400a24a <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
2400a1da:	d814      	bhi.n	2400a206 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
2400a1dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2400a1e0:	d03f      	beq.n	2400a262 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
2400a1e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2400a1e6:	d0bf      	beq.n	2400a168 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
2400a1e8:	2b00      	cmp	r3, #0
2400a1ea:	f47f aee8 	bne.w	24009fbe <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
2400a1ee:	f7fe fcd5 	bl	24008b9c <HAL_RCC_GetHCLKFreq>
2400a1f2:	4b1f      	ldr	r3, [pc, #124]	; (2400a270 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
2400a1f4:	4a1f      	ldr	r2, [pc, #124]	; (2400a274 <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
2400a1f6:	6a1b      	ldr	r3, [r3, #32]
2400a1f8:	f3c3 1302 	ubfx	r3, r3, #4, #3
2400a1fc:	5cd3      	ldrb	r3, [r2, r3]
2400a1fe:	f003 031f 	and.w	r3, r3, #31
2400a202:	40d8      	lsrs	r0, r3
        break;
2400a204:	e6f9      	b.n	24009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
2400a206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2400a20a:	d017      	beq.n	2400a23c <HAL_RCCEx_GetPeriphCLKFreq+0x350>
2400a20c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
2400a210:	d0bc      	beq.n	2400a18c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
2400a212:	e6d4      	b.n	24009fbe <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2400a214:	6810      	ldr	r0, [r2, #0]
2400a216:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
2400a21a:	f43f aeee 	beq.w	24009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2400a21e:	a801      	add	r0, sp, #4
2400a220:	f7ff fc58 	bl	24009ad4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
2400a224:	9802      	ldr	r0, [sp, #8]
2400a226:	e6e8      	b.n	24009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2400a228:	6810      	ldr	r0, [r2, #0]
2400a22a:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
2400a22e:	f43f aee4 	beq.w	24009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2400a232:	a801      	add	r0, sp, #4
2400a234:	f7ff fcfc 	bl	24009c30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
2400a238:	9803      	ldr	r0, [sp, #12]
2400a23a:	e6de      	b.n	24009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
2400a23c:	4b0c      	ldr	r3, [pc, #48]	; (2400a270 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
2400a23e:	6818      	ldr	r0, [r3, #0]
2400a240:	f410 7080 	ands.w	r0, r0, #256	; 0x100
2400a244:	f43f aed9 	beq.w	24009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
2400a248:	e7b4      	b.n	2400a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
2400a24a:	4b09      	ldr	r3, [pc, #36]	; (2400a270 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
2400a24c:	6818      	ldr	r0, [r3, #0]
2400a24e:	f010 0004 	ands.w	r0, r0, #4
2400a252:	f43f aed2 	beq.w	24009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400a256:	681b      	ldr	r3, [r3, #0]
2400a258:	4807      	ldr	r0, [pc, #28]	; (2400a278 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
2400a25a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
2400a25e:	40d8      	lsrs	r0, r3
2400a260:	e6cb      	b.n	24009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2400a262:	4b03      	ldr	r3, [pc, #12]	; (2400a270 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
2400a264:	6818      	ldr	r0, [r3, #0]
2400a266:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
2400a26a:	f43f aec6 	beq.w	24009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
2400a26e:	e7d6      	b.n	2400a21e <HAL_RCCEx_GetPeriphCLKFreq+0x332>
2400a270:	58024400 	.word	0x58024400
2400a274:	2401c694 	.word	0x2401c694
2400a278:	03d09000 	.word	0x03d09000

2400a27c <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
2400a27c:	2800      	cmp	r0, #0
2400a27e:	d03c      	beq.n	2400a2fa <HAL_RNG_Init+0x7e>
{
2400a280:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
2400a282:	7a43      	ldrb	r3, [r0, #9]
2400a284:	4604      	mov	r4, r0
2400a286:	f003 02ff 	and.w	r2, r3, #255	; 0xff
2400a28a:	2b00      	cmp	r3, #0
2400a28c:	d031      	beq.n	2400a2f2 <HAL_RNG_Init+0x76>
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
2400a28e:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
2400a290:	2302      	movs	r3, #2
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
2400a292:	6861      	ldr	r1, [r4, #4]
  hrng->State = HAL_RNG_STATE_BUSY;
2400a294:	7263      	strb	r3, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
2400a296:	6813      	ldr	r3, [r2, #0]
2400a298:	f023 0320 	bic.w	r3, r3, #32
2400a29c:	430b      	orrs	r3, r1
2400a29e:	6013      	str	r3, [r2, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
2400a2a0:	6822      	ldr	r2, [r4, #0]
2400a2a2:	6813      	ldr	r3, [r2, #0]
2400a2a4:	f043 0304 	orr.w	r3, r3, #4
2400a2a8:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
2400a2aa:	6823      	ldr	r3, [r4, #0]
2400a2ac:	685b      	ldr	r3, [r3, #4]
2400a2ae:	0658      	lsls	r0, r3, #25
2400a2b0:	d503      	bpl.n	2400a2ba <HAL_RNG_Init+0x3e>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
2400a2b2:	2304      	movs	r3, #4
    return HAL_ERROR;
2400a2b4:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
2400a2b6:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
2400a2b8:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
2400a2ba:	f7fa ffe7 	bl	2400528c <HAL_GetTick>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
2400a2be:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
2400a2c0:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
2400a2c2:	685b      	ldr	r3, [r3, #4]
2400a2c4:	0759      	lsls	r1, r3, #29
2400a2c6:	d50e      	bpl.n	2400a2e6 <HAL_RNG_Init+0x6a>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
2400a2c8:	f7fa ffe0 	bl	2400528c <HAL_GetTick>
2400a2cc:	1b43      	subs	r3, r0, r5
2400a2ce:	2b02      	cmp	r3, #2
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
2400a2d0:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
2400a2d2:	d9f6      	bls.n	2400a2c2 <HAL_RNG_Init+0x46>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
2400a2d4:	685a      	ldr	r2, [r3, #4]
2400a2d6:	0752      	lsls	r2, r2, #29
2400a2d8:	d5f3      	bpl.n	2400a2c2 <HAL_RNG_Init+0x46>
        hrng->State = HAL_RNG_STATE_ERROR;
2400a2da:	2204      	movs	r2, #4
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
2400a2dc:	2302      	movs	r3, #2
        return HAL_ERROR;
2400a2de:	2001      	movs	r0, #1
        hrng->State = HAL_RNG_STATE_ERROR;
2400a2e0:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
2400a2e2:	60e3      	str	r3, [r4, #12]
}
2400a2e4:	bd38      	pop	{r3, r4, r5, pc}
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
2400a2e6:	2300      	movs	r3, #0
  hrng->State = HAL_RNG_STATE_READY;
2400a2e8:	2201      	movs	r2, #1
  return HAL_OK;
2400a2ea:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
2400a2ec:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
2400a2ee:	60e3      	str	r3, [r4, #12]
}
2400a2f0:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
2400a2f2:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
2400a2f4:	f7f9 fd92 	bl	24003e1c <HAL_RNG_MspInit>
2400a2f8:	e7c9      	b.n	2400a28e <HAL_RNG_Init+0x12>
    return HAL_ERROR;
2400a2fa:	2001      	movs	r0, #1
}
2400a2fc:	4770      	bx	lr
2400a2fe:	bf00      	nop

2400a300 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
2400a300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
2400a302:	7a03      	ldrb	r3, [r0, #8]
2400a304:	2b01      	cmp	r3, #1
2400a306:	d027      	beq.n	2400a358 <HAL_RNG_GenerateRandomNumber+0x58>

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
2400a308:	7a43      	ldrb	r3, [r0, #9]
  __HAL_LOCK(hrng);
2400a30a:	2201      	movs	r2, #1
2400a30c:	4604      	mov	r4, r0
  if (hrng->State == HAL_RNG_STATE_READY)
2400a30e:	4293      	cmp	r3, r2
2400a310:	b2de      	uxtb	r6, r3
  __HAL_LOCK(hrng);
2400a312:	7202      	strb	r2, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
2400a314:	d006      	beq.n	2400a324 <HAL_RNG_GenerateRandomNumber+0x24>
#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
2400a316:	2304      	movs	r3, #4
    status = HAL_ERROR;
2400a318:	4616      	mov	r6, r2
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
2400a31a:	60c3      	str	r3, [r0, #12]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
2400a31c:	2300      	movs	r3, #0
2400a31e:	7223      	strb	r3, [r4, #8]

  return status;
}
2400a320:	4630      	mov	r0, r6
2400a322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
2400a324:	2302      	movs	r3, #2
2400a326:	460d      	mov	r5, r1
2400a328:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
2400a32a:	f7fa ffaf 	bl	2400528c <HAL_GetTick>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
2400a32e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
2400a330:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
2400a332:	685a      	ldr	r2, [r3, #4]
2400a334:	07d2      	lsls	r2, r2, #31
2400a336:	d412      	bmi.n	2400a35e <HAL_RNG_GenerateRandomNumber+0x5e>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
2400a338:	f7fa ffa8 	bl	2400528c <HAL_GetTick>
2400a33c:	1bc0      	subs	r0, r0, r7
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
2400a33e:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
2400a340:	2802      	cmp	r0, #2
2400a342:	d9f6      	bls.n	2400a332 <HAL_RNG_GenerateRandomNumber+0x32>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
2400a344:	685a      	ldr	r2, [r3, #4]
2400a346:	f012 0201 	ands.w	r2, r2, #1
2400a34a:	d1f2      	bne.n	2400a332 <HAL_RNG_GenerateRandomNumber+0x32>
          hrng->State = HAL_RNG_STATE_READY;
2400a34c:	2101      	movs	r1, #1
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
2400a34e:	2302      	movs	r3, #2
          __HAL_UNLOCK(hrng);
2400a350:	7222      	strb	r2, [r4, #8]
          hrng->State = HAL_RNG_STATE_READY;
2400a352:	7261      	strb	r1, [r4, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
2400a354:	60e3      	str	r3, [r4, #12]
          return HAL_ERROR;
2400a356:	e7e3      	b.n	2400a320 <HAL_RNG_GenerateRandomNumber+0x20>
  __HAL_LOCK(hrng);
2400a358:	2602      	movs	r6, #2
}
2400a35a:	4630      	mov	r0, r6
2400a35c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->RandomNumber = hrng->Instance->DR;
2400a35e:	689b      	ldr	r3, [r3, #8]
    hrng->State = HAL_RNG_STATE_READY;
2400a360:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
2400a362:	2600      	movs	r6, #0
    hrng->RandomNumber = hrng->Instance->DR;
2400a364:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
2400a366:	602b      	str	r3, [r5, #0]
    hrng->State = HAL_RNG_STATE_READY;
2400a368:	7262      	strb	r2, [r4, #9]
2400a36a:	e7d7      	b.n	2400a31c <HAL_RNG_GenerateRandomNumber+0x1c>

2400a36c <HAL_SAI_Init.part.0>:
  *         in the SAI_InitTypeDef structure and initialize the associated handle.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
2400a36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
2400a36e:	4ba3      	ldr	r3, [pc, #652]	; (2400a5fc <HAL_SAI_Init.part.0+0x290>)
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
2400a370:	4605      	mov	r5, r0
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
2400a372:	6802      	ldr	r2, [r0, #0]
2400a374:	429a      	cmp	r2, r3
2400a376:	d01c      	beq.n	2400a3b2 <HAL_SAI_Init.part.0+0x46>
2400a378:	3320      	adds	r3, #32
2400a37a:	429a      	cmp	r2, r3
2400a37c:	d019      	beq.n	2400a3b2 <HAL_SAI_Init.part.0+0x46>
  {
    SaiBaseAddress = SAI1;
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
2400a37e:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
2400a382:	429a      	cmp	r2, r3
2400a384:	d04d      	beq.n	2400a422 <HAL_SAI_Init.part.0+0xb6>
2400a386:	3320      	adds	r3, #32
2400a388:	429a      	cmp	r2, r3
2400a38a:	d04a      	beq.n	2400a422 <HAL_SAI_Init.part.0+0xb6>
  {
    SaiBaseAddress = SAI2;
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
2400a38c:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
2400a390:	429a      	cmp	r2, r3
2400a392:	f000 812f 	beq.w	2400a5f4 <HAL_SAI_Init.part.0+0x288>
2400a396:	3320      	adds	r3, #32
2400a398:	429a      	cmp	r2, r3
2400a39a:	f000 812b 	beq.w	2400a5f4 <HAL_SAI_Init.part.0+0x288>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
2400a39e:	4b98      	ldr	r3, [pc, #608]	; (2400a600 <HAL_SAI_Init.part.0+0x294>)
2400a3a0:	429a      	cmp	r2, r3
2400a3a2:	f000 8129 	beq.w	2400a5f8 <HAL_SAI_Init.part.0+0x28c>
2400a3a6:	3320      	adds	r3, #32
2400a3a8:	429a      	cmp	r2, r3
2400a3aa:	f000 8125 	beq.w	2400a5f8 <HAL_SAI_Init.part.0+0x28c>
    SaiBaseAddress = SAI4;
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
2400a3ae:	2001      	movs	r0, #1

  /* Release Lock */
  __HAL_UNLOCK(hsai);

  return HAL_OK;
}
2400a3b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SaiBaseAddress = SAI1;
2400a3b2:	4c94      	ldr	r4, [pc, #592]	; (2400a604 <HAL_SAI_Init.part.0+0x298>)
  if (hsai->State == HAL_SAI_STATE_RESET)
2400a3b4:	f895 3091 	ldrb.w	r3, [r5, #145]	; 0x91
2400a3b8:	f003 01ff 	and.w	r1, r3, #255	; 0xff
2400a3bc:	2b00      	cmp	r3, #0
2400a3be:	d037      	beq.n	2400a430 <HAL_SAI_Init.part.0+0xc4>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400a3c0:	4b91      	ldr	r3, [pc, #580]	; (2400a608 <HAL_SAI_Init.part.0+0x29c>)
2400a3c2:	4992      	ldr	r1, [pc, #584]	; (2400a60c <HAL_SAI_Init.part.0+0x2a0>)
2400a3c4:	681b      	ldr	r3, [r3, #0]
2400a3c6:	fba1 1303 	umull	r1, r3, r1, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
2400a3ca:	6811      	ldr	r1, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400a3cc:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
2400a3ce:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400a3d2:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
2400a3d4:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
2400a3d6:	2b00      	cmp	r3, #0
2400a3d8:	d031      	beq.n	2400a43e <HAL_SAI_Init.part.0+0xd2>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
2400a3da:	682a      	ldr	r2, [r5, #0]
    count--;
2400a3dc:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
2400a3de:	6812      	ldr	r2, [r2, #0]
2400a3e0:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
2400a3e4:	d1f7      	bne.n	2400a3d6 <HAL_SAI_Init.part.0+0x6a>
  switch (hsai->Init.SynchroExt)
2400a3e6:	68eb      	ldr	r3, [r5, #12]
  hsai->State = HAL_SAI_STATE_BUSY;
2400a3e8:	2102      	movs	r1, #2
  switch (hsai->Init.SynchroExt)
2400a3ea:	2b01      	cmp	r3, #1
  hsai->State = HAL_SAI_STATE_BUSY;
2400a3ec:	f885 1091 	strb.w	r1, [r5, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
2400a3f0:	f000 8150 	beq.w	2400a694 <HAL_SAI_Init.part.0+0x328>
2400a3f4:	428b      	cmp	r3, r1
2400a3f6:	bf19      	ittee	ne
2400a3f8:	460e      	movne	r6, r1
2400a3fa:	2003      	movne	r0, #3
2400a3fc:	2023      	moveq	r0, #35	; 0x23
2400a3fe:	2622      	moveq	r6, #34	; 0x22
2400a400:	bf15      	itete	ne
2400a402:	2701      	movne	r7, #1
2400a404:	2721      	moveq	r7, #33	; 0x21
2400a406:	2100      	movne	r1, #0
2400a408:	2120      	moveq	r1, #32
  switch (hsai->Init.Synchro)
2400a40a:	68ab      	ldr	r3, [r5, #8]
2400a40c:	3b01      	subs	r3, #1
2400a40e:	2b04      	cmp	r3, #4
2400a410:	f200 8180 	bhi.w	2400a714 <HAL_SAI_Init.part.0+0x3a8>
2400a414:	e8df f013 	tbh	[pc, r3, lsl #1]
2400a418:	001c00e3 	.word	0x001c00e3
2400a41c:	001b00ea 	.word	0x001b00ea
2400a420:	00e6      	.short	0x00e6
  if (hsai->State == HAL_SAI_STATE_RESET)
2400a422:	f895 3091 	ldrb.w	r3, [r5, #145]	; 0x91
    SaiBaseAddress = SAI2;
2400a426:	4c7a      	ldr	r4, [pc, #488]	; (2400a610 <HAL_SAI_Init.part.0+0x2a4>)
  if (hsai->State == HAL_SAI_STATE_RESET)
2400a428:	f003 01ff 	and.w	r1, r3, #255	; 0xff
2400a42c:	2b00      	cmp	r3, #0
2400a42e:	d1c7      	bne.n	2400a3c0 <HAL_SAI_Init.part.0+0x54>
    HAL_SAI_MspInit(hsai);
2400a430:	4628      	mov	r0, r5
    hsai->Lock = HAL_UNLOCKED;
2400a432:	f885 1090 	strb.w	r1, [r5, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
2400a436:	f7f9 fd57 	bl	24003ee8 <HAL_SAI_MspInit>
  __HAL_SAI_DISABLE(hsai);
2400a43a:	682a      	ldr	r2, [r5, #0]
2400a43c:	e7c0      	b.n	2400a3c0 <HAL_SAI_Init.part.0+0x54>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400a43e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    return HAL_ERROR;
2400a442:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400a444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400a448:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
}
2400a44c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
2400a44e:	4631      	mov	r1, r6
      syncen_bits = SAI_xCR1_SYNCEN_1;
2400a450:	f44f 6600 	mov.w	r6, #2048	; 0x800
  SaiBaseAddress->GCR = tmpregisterGCR;
2400a454:	6021      	str	r1, [r4, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
2400a456:	6a2b      	ldr	r3, [r5, #32]
2400a458:	2b00      	cmp	r3, #0
2400a45a:	d046      	beq.n	2400a4ea <HAL_SAI_Init.part.0+0x17e>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
2400a45c:	682b      	ldr	r3, [r5, #0]
2400a45e:	4967      	ldr	r1, [pc, #412]	; (2400a5fc <HAL_SAI_Init.part.0+0x290>)
2400a460:	428b      	cmp	r3, r1
2400a462:	f000 812b 	beq.w	2400a6bc <HAL_SAI_Init.part.0+0x350>
2400a466:	3120      	adds	r1, #32
2400a468:	428b      	cmp	r3, r1
2400a46a:	f000 8127 	beq.w	2400a6bc <HAL_SAI_Init.part.0+0x350>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
2400a46e:	4969      	ldr	r1, [pc, #420]	; (2400a614 <HAL_SAI_Init.part.0+0x2a8>)
2400a470:	428b      	cmp	r3, r1
2400a472:	f000 8133 	beq.w	2400a6dc <HAL_SAI_Init.part.0+0x370>
2400a476:	3120      	adds	r1, #32
2400a478:	428b      	cmp	r3, r1
2400a47a:	f000 812f 	beq.w	2400a6dc <HAL_SAI_Init.part.0+0x370>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
2400a47e:	4966      	ldr	r1, [pc, #408]	; (2400a618 <HAL_SAI_Init.part.0+0x2ac>)
2400a480:	428b      	cmp	r3, r1
2400a482:	f000 8123 	beq.w	2400a6cc <HAL_SAI_Init.part.0+0x360>
2400a486:	3120      	adds	r1, #32
2400a488:	428b      	cmp	r3, r1
2400a48a:	f000 811f 	beq.w	2400a6cc <HAL_SAI_Init.part.0+0x360>
    if (hsai->Instance == SAI4_Block_A)
2400a48e:	495c      	ldr	r1, [pc, #368]	; (2400a600 <HAL_SAI_Init.part.0+0x294>)
2400a490:	428b      	cmp	r3, r1
2400a492:	f000 8135 	beq.w	2400a700 <HAL_SAI_Init.part.0+0x394>
    if (hsai->Instance == SAI4_Block_B)
2400a496:	4961      	ldr	r1, [pc, #388]	; (2400a61c <HAL_SAI_Init.part.0+0x2b0>)
2400a498:	428b      	cmp	r3, r1
2400a49a:	f000 812a 	beq.w	2400a6f2 <HAL_SAI_Init.part.0+0x386>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
2400a49e:	69ab      	ldr	r3, [r5, #24]
2400a4a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
2400a4a4:	f000 80fb 	beq.w	2400a69e <HAL_SAI_Init.part.0+0x332>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
2400a4a8:	6aab      	ldr	r3, [r5, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
2400a4aa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
2400a4ae:	6a29      	ldr	r1, [r5, #32]
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
2400a4b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
2400a4b4:	ea4f 0342 	mov.w	r3, r2, lsl #1
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
2400a4b8:	bf0c      	ite	eq
2400a4ba:	2202      	moveq	r2, #2
2400a4bc:	2201      	movne	r2, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
2400a4be:	fb01 f202 	mul.w	r2, r1, r2
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
2400a4c2:	6c69      	ldr	r1, [r5, #68]	; 0x44
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
2400a4c4:	0212      	lsls	r2, r2, #8
2400a4c6:	fbb3 f3f2 	udiv	r3, r3, r2
    hsai->Init.Mckdiv = tmpval / 10U;
2400a4ca:	4a55      	ldr	r2, [pc, #340]	; (2400a620 <HAL_SAI_Init.part.0+0x2b4>)
2400a4cc:	fba2 0203 	umull	r0, r2, r2, r3
2400a4d0:	08d2      	lsrs	r2, r2, #3
    if ((tmpval % 10U) > 8U)
2400a4d2:	eb02 0082 	add.w	r0, r2, r2, lsl #2
2400a4d6:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
2400a4da:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
2400a4dc:	bf08      	it	eq
2400a4de:	3201      	addeq	r2, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
2400a4e0:	2904      	cmp	r1, #4
      hsai->Init.Mckdiv += 1U;
2400a4e2:	626a      	str	r2, [r5, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
2400a4e4:	d101      	bne.n	2400a4ea <HAL_SAI_Init.part.0+0x17e>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
2400a4e6:	0852      	lsrs	r2, r2, #1
2400a4e8:	626a      	str	r2, [r5, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400a4ea:	686b      	ldr	r3, [r5, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
2400a4ec:	6d2f      	ldr	r7, [r5, #80]	; 0x50
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400a4ee:	f033 0302 	bics.w	r3, r3, #2
2400a4f2:	f040 80c8 	bne.w	2400a686 <HAL_SAI_Init.part.0+0x31a>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
2400a4f6:	3f01      	subs	r7, #1
2400a4f8:	bf18      	it	ne
2400a4fa:	2701      	movne	r7, #1
2400a4fc:	027f      	lsls	r7, r7, #9
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
2400a4fe:	f7fa fedd 	bl	240052bc <HAL_GetREVID>
2400a502:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
2400a506:	682a      	ldr	r2, [r5, #0]
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
2400a508:	f0c0 80a9 	bcc.w	2400a65e <HAL_SAI_Init.part.0+0x2f2>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
2400a50c:	6811      	ldr	r1, [r2, #0]
2400a50e:	4b45      	ldr	r3, [pc, #276]	; (2400a624 <HAL_SAI_Init.part.0+0x2b8>)
2400a510:	400b      	ands	r3, r1
2400a512:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2400a514:	6c69      	ldr	r1, [r5, #68]	; 0x44
2400a516:	e9d5 2300 	ldrd	r2, r3, [r5]
2400a51a:	430b      	orrs	r3, r1
2400a51c:	6ca9      	ldr	r1, [r5, #72]	; 0x48
2400a51e:	430b      	orrs	r3, r1
2400a520:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
2400a522:	430b      	orrs	r3, r1
2400a524:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
2400a526:	430b      	orrs	r3, r1
2400a528:	6969      	ldr	r1, [r5, #20]
2400a52a:	430b      	orrs	r3, r1
2400a52c:	69a9      	ldr	r1, [r5, #24]
2400a52e:	430b      	orrs	r3, r1
2400a530:	6aa9      	ldr	r1, [r5, #40]	; 0x28
2400a532:	430b      	orrs	r3, r1
2400a534:	6929      	ldr	r1, [r5, #16]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2400a536:	430b      	orrs	r3, r1
2400a538:	6811      	ldr	r1, [r2, #0]
2400a53a:	430b      	orrs	r3, r1
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
2400a53c:	6a69      	ldr	r1, [r5, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2400a53e:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
2400a542:	4333      	orrs	r3, r6
2400a544:	433b      	orrs	r3, r7
2400a546:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
2400a548:	682a      	ldr	r2, [r5, #0]
2400a54a:	4b37      	ldr	r3, [pc, #220]	; (2400a628 <HAL_SAI_Init.part.0+0x2bc>)
2400a54c:	6851      	ldr	r1, [r2, #4]
2400a54e:	400b      	ands	r3, r1
2400a550:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
2400a552:	6b29      	ldr	r1, [r5, #48]	; 0x30
2400a554:	69eb      	ldr	r3, [r5, #28]
2400a556:	682a      	ldr	r2, [r5, #0]
2400a558:	430b      	orrs	r3, r1
2400a55a:	6b69      	ldr	r1, [r5, #52]	; 0x34
2400a55c:	430b      	orrs	r3, r1
2400a55e:	6851      	ldr	r1, [r2, #4]
2400a560:	430b      	orrs	r3, r1
2400a562:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
2400a564:	682a      	ldr	r2, [r5, #0]
2400a566:	4b31      	ldr	r3, [pc, #196]	; (2400a62c <HAL_SAI_Init.part.0+0x2c0>)
2400a568:	6891      	ldr	r1, [r2, #8]
2400a56a:	400b      	ands	r3, r1
2400a56c:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
2400a56e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
2400a570:	6e6b      	ldr	r3, [r5, #100]	; 0x64
2400a572:	6829      	ldr	r1, [r5, #0]
2400a574:	4313      	orrs	r3, r2
2400a576:	6e2a      	ldr	r2, [r5, #96]	; 0x60
2400a578:	6888      	ldr	r0, [r1, #8]
2400a57a:	4313      	orrs	r3, r2
2400a57c:	6d6a      	ldr	r2, [r5, #84]	; 0x54
2400a57e:	4303      	orrs	r3, r0
2400a580:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
2400a582:	f24f 0020 	movw	r0, #61472	; 0xf020
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
2400a586:	4313      	orrs	r3, r2
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
2400a588:	6daa      	ldr	r2, [r5, #88]	; 0x58
2400a58a:	3a01      	subs	r2, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
2400a58c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
2400a590:	608b      	str	r3, [r1, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
2400a592:	682a      	ldr	r2, [r5, #0]
2400a594:	68d3      	ldr	r3, [r2, #12]
2400a596:	4003      	ands	r3, r0
2400a598:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
2400a59a:	6829      	ldr	r1, [r5, #0]
2400a59c:	e9d5 301a 	ldrd	r3, r0, [r5, #104]	; 0x68
2400a5a0:	68ca      	ldr	r2, [r1, #12]
2400a5a2:	4303      	orrs	r3, r0
2400a5a4:	4313      	orrs	r3, r2
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
2400a5a6:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
2400a5a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
2400a5ac:	6f2a      	ldr	r2, [r5, #112]	; 0x70
2400a5ae:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
2400a5b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
2400a5b4:	4a11      	ldr	r2, [pc, #68]	; (2400a5fc <HAL_SAI_Init.part.0+0x290>)
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
2400a5b6:	60cb      	str	r3, [r1, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
2400a5b8:	682b      	ldr	r3, [r5, #0]
2400a5ba:	4293      	cmp	r3, r2
2400a5bc:	d03c      	beq.n	2400a638 <HAL_SAI_Init.part.0+0x2cc>
2400a5be:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
2400a5c2:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
2400a5c6:	4293      	cmp	r3, r2
2400a5c8:	d036      	beq.n	2400a638 <HAL_SAI_Init.part.0+0x2cc>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
2400a5ca:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
2400a5cc:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
2400a5ce:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  return HAL_OK;
2400a5d2:	4618      	mov	r0, r3
  hsai->State = HAL_SAI_STATE_READY;
2400a5d4:	f885 2091 	strb.w	r2, [r5, #145]	; 0x91
  __HAL_UNLOCK(hsai);
2400a5d8:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
}
2400a5dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (hsai->Init.Synchro)
2400a5de:	f44f 6680 	mov.w	r6, #1024	; 0x400
2400a5e2:	e737      	b.n	2400a454 <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
2400a5e4:	4601      	mov	r1, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
2400a5e6:	f44f 6600 	mov.w	r6, #2048	; 0x800
      break;
2400a5ea:	e733      	b.n	2400a454 <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
2400a5ec:	4639      	mov	r1, r7
      syncen_bits = SAI_xCR1_SYNCEN_1;
2400a5ee:	f44f 6600 	mov.w	r6, #2048	; 0x800
      break;
2400a5f2:	e72f      	b.n	2400a454 <HAL_SAI_Init.part.0+0xe8>
    SaiBaseAddress = SAI3;
2400a5f4:	4c0e      	ldr	r4, [pc, #56]	; (2400a630 <HAL_SAI_Init.part.0+0x2c4>)
2400a5f6:	e6dd      	b.n	2400a3b4 <HAL_SAI_Init.part.0+0x48>
    SaiBaseAddress = SAI4;
2400a5f8:	4c0e      	ldr	r4, [pc, #56]	; (2400a634 <HAL_SAI_Init.part.0+0x2c8>)
2400a5fa:	e6db      	b.n	2400a3b4 <HAL_SAI_Init.part.0+0x48>
2400a5fc:	40015804 	.word	0x40015804
2400a600:	58005404 	.word	0x58005404
2400a604:	40015800 	.word	0x40015800
2400a608:	200008b4 	.word	0x200008b4
2400a60c:	95cbec1b 	.word	0x95cbec1b
2400a610:	40015c00 	.word	0x40015c00
2400a614:	40015c04 	.word	0x40015c04
2400a618:	40016004 	.word	0x40016004
2400a61c:	58005424 	.word	0x58005424
2400a620:	cccccccd 	.word	0xcccccccd
2400a624:	f005c010 	.word	0xf005c010
2400a628:	ffff1ff0 	.word	0xffff1ff0
2400a62c:	fff88000 	.word	0xfff88000
2400a630:	40016000 	.word	0x40016000
2400a634:	58005400 	.word	0x58005400
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
2400a638:	6c63      	ldr	r3, [r4, #68]	; 0x44
2400a63a:	f023 0301 	bic.w	r3, r3, #1
2400a63e:	6463      	str	r3, [r4, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
2400a640:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
2400a644:	2b01      	cmp	r3, #1
2400a646:	d1c0      	bne.n	2400a5ca <HAL_SAI_Init.part.0+0x25e>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
2400a648:	e9d5 230f 	ldrd	r2, r3, [r5, #60]	; 0x3c
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
2400a64c:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
2400a64e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
2400a652:	6463      	str	r3, [r4, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
2400a654:	6c63      	ldr	r3, [r4, #68]	; 0x44
2400a656:	f043 0301 	orr.w	r3, r3, #1
2400a65a:	6463      	str	r3, [r4, #68]	; 0x44
2400a65c:	e7b5      	b.n	2400a5ca <HAL_SAI_Init.part.0+0x25e>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
2400a65e:	6811      	ldr	r1, [r2, #0]
2400a660:	4b2d      	ldr	r3, [pc, #180]	; (2400a718 <HAL_SAI_Init.part.0+0x3ac>)
2400a662:	400b      	ands	r3, r1
2400a664:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2400a666:	6c69      	ldr	r1, [r5, #68]	; 0x44
2400a668:	e9d5 2300 	ldrd	r2, r3, [r5]
2400a66c:	430b      	orrs	r3, r1
2400a66e:	6ca9      	ldr	r1, [r5, #72]	; 0x48
2400a670:	430b      	orrs	r3, r1
2400a672:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
2400a674:	430b      	orrs	r3, r1
2400a676:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
2400a678:	430b      	orrs	r3, r1
2400a67a:	6969      	ldr	r1, [r5, #20]
2400a67c:	430b      	orrs	r3, r1
2400a67e:	69a9      	ldr	r1, [r5, #24]
2400a680:	430b      	orrs	r3, r1
2400a682:	6aa9      	ldr	r1, [r5, #40]	; 0x28
2400a684:	e757      	b.n	2400a536 <HAL_SAI_Init.part.0+0x1ca>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
2400a686:	f1a7 0701 	sub.w	r7, r7, #1
2400a68a:	fab7 f787 	clz	r7, r7
2400a68e:	097f      	lsrs	r7, r7, #5
2400a690:	027f      	lsls	r7, r7, #9
2400a692:	e734      	b.n	2400a4fe <HAL_SAI_Init.part.0+0x192>
  switch (hsai->Init.SynchroExt)
2400a694:	2013      	movs	r0, #19
2400a696:	2612      	movs	r6, #18
2400a698:	2711      	movs	r7, #17
2400a69a:	2110      	movs	r1, #16
2400a69c:	e6b5      	b.n	2400a40a <HAL_SAI_Init.part.0+0x9e>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
2400a69e:	6c69      	ldr	r1, [r5, #68]	; 0x44
2400a6a0:	2904      	cmp	r1, #4
2400a6a2:	d035      	beq.n	2400a710 <HAL_SAI_Init.part.0+0x3a4>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
2400a6a4:	2908      	cmp	r1, #8
2400a6a6:	d021      	beq.n	2400a6ec <HAL_SAI_Init.part.0+0x380>
        tmpframelength = hsai->FrameInit.FrameLength;
2400a6a8:	6d68      	ldr	r0, [r5, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
2400a6aa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
2400a6ae:	0053      	lsls	r3, r2, #1
2400a6b0:	6a2a      	ldr	r2, [r5, #32]
2400a6b2:	fb00 f202 	mul.w	r2, r0, r2
2400a6b6:	fbb3 f3f2 	udiv	r3, r3, r2
2400a6ba:	e706      	b.n	2400a4ca <HAL_SAI_Init.part.0+0x15e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
2400a6bc:	f44f 7080 	mov.w	r0, #256	; 0x100
2400a6c0:	2100      	movs	r1, #0
2400a6c2:	f7ff fc13 	bl	24009eec <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
2400a6c6:	682b      	ldr	r3, [r5, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
2400a6c8:	4602      	mov	r2, r0
2400a6ca:	e6d0      	b.n	2400a46e <HAL_SAI_Init.part.0+0x102>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
2400a6cc:	f44f 7000 	mov.w	r0, #512	; 0x200
2400a6d0:	2100      	movs	r1, #0
2400a6d2:	f7ff fc0b 	bl	24009eec <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_A)
2400a6d6:	682b      	ldr	r3, [r5, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
2400a6d8:	4602      	mov	r2, r0
2400a6da:	e6d8      	b.n	2400a48e <HAL_SAI_Init.part.0+0x122>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
2400a6dc:	f44f 7000 	mov.w	r0, #512	; 0x200
2400a6e0:	2100      	movs	r1, #0
2400a6e2:	f7ff fc03 	bl	24009eec <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
2400a6e6:	682b      	ldr	r3, [r5, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
2400a6e8:	4602      	mov	r2, r0
2400a6ea:	e6c8      	b.n	2400a47e <HAL_SAI_Init.part.0+0x112>
        tmpframelength = SAI_AC97_FRAME_LENGTH;
2400a6ec:	f44f 7080 	mov.w	r0, #256	; 0x100
2400a6f0:	e7db      	b.n	2400a6aa <HAL_SAI_Init.part.0+0x33e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
2400a6f2:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400a6f6:	2100      	movs	r1, #0
2400a6f8:	f7ff fbf8 	bl	24009eec <HAL_RCCEx_GetPeriphCLKFreq>
2400a6fc:	4602      	mov	r2, r0
2400a6fe:	e6ce      	b.n	2400a49e <HAL_SAI_Init.part.0+0x132>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
2400a700:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400a704:	2100      	movs	r1, #0
2400a706:	f7ff fbf1 	bl	24009eec <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_B)
2400a70a:	682b      	ldr	r3, [r5, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
2400a70c:	4602      	mov	r2, r0
2400a70e:	e6c2      	b.n	2400a496 <HAL_SAI_Init.part.0+0x12a>
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
2400a710:	2040      	movs	r0, #64	; 0x40
2400a712:	e7ca      	b.n	2400a6aa <HAL_SAI_Init.part.0+0x33e>
      syncen_bits = 0;
2400a714:	2600      	movs	r6, #0
2400a716:	e69d      	b.n	2400a454 <HAL_SAI_Init.part.0+0xe8>
2400a718:	f805c010 	.word	0xf805c010

2400a71c <HAL_SAI_InitProtocol>:
  switch (protocol)
2400a71c:	2902      	cmp	r1, #2
{
2400a71e:	b538      	push	{r3, r4, r5, lr}
2400a720:	4604      	mov	r4, r0
  switch (protocol)
2400a722:	d935      	bls.n	2400a790 <HAL_SAI_InitProtocol+0x74>
2400a724:	1ec8      	subs	r0, r1, #3
2400a726:	2801      	cmp	r0, #1
2400a728:	d830      	bhi.n	2400a78c <HAL_SAI_InitProtocol+0x70>
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
2400a72a:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
2400a72c:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
2400a72e:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
2400a730:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
2400a732:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.FirstBitOffset  = 0;
2400a734:	66a0      	str	r0, [r4, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
2400a736:	f64f 70ff 	movw	r0, #65535	; 0xffff
2400a73a:	6760      	str	r0, [r4, #116]	; 0x74
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400a73c:	6860      	ldr	r0, [r4, #4]
2400a73e:	f030 0002 	bics.w	r0, r0, #2
2400a742:	bf0c      	ite	eq
2400a744:	2501      	moveq	r5, #1
2400a746:	2500      	movne	r5, #0
      hsai->FrameInit.ActiveFrameLength = 13;
2400a748:	2904      	cmp	r1, #4
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
2400a74a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
2400a74e:	6525      	str	r5, [r4, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 13;
2400a750:	bf0c      	ite	eq
2400a752:	2001      	moveq	r0, #1
2400a754:	200d      	movne	r0, #13
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
2400a756:	6621      	str	r1, [r4, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
2400a758:	f44f 2180 	mov.w	r1, #262144	; 0x40000
2400a75c:	65a0      	str	r0, [r4, #88]	; 0x58
2400a75e:	6661      	str	r1, [r4, #100]	; 0x64
  switch (datasize)
2400a760:	2a03      	cmp	r2, #3
2400a762:	d813      	bhi.n	2400a78c <HAL_SAI_InitProtocol+0x70>
2400a764:	e8df f002 	tbb	[pc, r2]
2400a768:	5c554f3e 	.word	0x5c554f3e
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
2400a76c:	6823      	ldr	r3, [r4, #0]
2400a76e:	4a47      	ldr	r2, [pc, #284]	; (2400a88c <HAL_SAI_InitProtocol+0x170>)
2400a770:	4293      	cmp	r3, r2
2400a772:	d005      	beq.n	2400a780 <HAL_SAI_InitProtocol+0x64>
2400a774:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
2400a778:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
2400a77c:	4293      	cmp	r3, r2
2400a77e:	d105      	bne.n	2400a78c <HAL_SAI_InitProtocol+0x70>
2400a780:	6863      	ldr	r3, [r4, #4]
2400a782:	2b01      	cmp	r3, #1
2400a784:	d102      	bne.n	2400a78c <HAL_SAI_InitProtocol+0x70>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
2400a786:	6c63      	ldr	r3, [r4, #68]	; 0x44
2400a788:	2b00      	cmp	r3, #0
2400a78a:	d037      	beq.n	2400a7fc <HAL_SAI_InitProtocol+0xe0>
}
2400a78c:	2001      	movs	r0, #1
2400a78e:	bd38      	pop	{r3, r4, r5, pc}
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
2400a790:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
2400a792:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
2400a794:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
2400a796:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->SlotInit.FirstBitOffset  = 0;
2400a798:	66a0      	str	r0, [r4, #104]	; 0x68
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400a79a:	6860      	ldr	r0, [r4, #4]
2400a79c:	f030 0002 	bics.w	r0, r0, #2
2400a7a0:	bf14      	ite	ne
2400a7a2:	2001      	movne	r0, #1
2400a7a4:	2000      	moveq	r0, #0
2400a7a6:	6520      	str	r0, [r4, #80]	; 0x50
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
2400a7a8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
2400a7ac:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
2400a7ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
2400a7b2:	6760      	str	r0, [r4, #116]	; 0x74
  if ((nbslot & 0x1U) != 0U)
2400a7b4:	f013 0001 	ands.w	r0, r3, #1
2400a7b8:	d1e8      	bne.n	2400a78c <HAL_SAI_InitProtocol+0x70>
  if (protocol == SAI_I2S_STANDARD)
2400a7ba:	b949      	cbnz	r1, 2400a7d0 <HAL_SAI_InitProtocol+0xb4>
2400a7bc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400a7c0:	e9c4 1018 	strd	r1, r0, [r4, #96]	; 0x60
  switch (datasize)
2400a7c4:	2a03      	cmp	r2, #3
2400a7c6:	d8e1      	bhi.n	2400a78c <HAL_SAI_InitProtocol+0x70>
2400a7c8:	e8df f002 	tbb	[pc, r2]
2400a7cc:	2c364655 	.word	0x2c364655
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
2400a7d0:	6660      	str	r0, [r4, #100]	; 0x64
2400a7d2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400a7d6:	6620      	str	r0, [r4, #96]	; 0x60
  switch (datasize)
2400a7d8:	2a03      	cmp	r2, #3
2400a7da:	d8d7      	bhi.n	2400a78c <HAL_SAI_InitProtocol+0x70>
2400a7dc:	e8df f002 	tbb	[pc, r2]
2400a7e0:	222c3c4b 	.word	0x222c3c4b
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400a7e4:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 16U * nbslot;
2400a7e6:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
2400a7e8:	2240      	movs	r2, #64	; 0x40
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400a7ea:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
2400a7ec:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
2400a7ee:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
2400a7f0:	f7fa fd64 	bl	240052bc <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
2400a7f4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
2400a7f8:	2b01      	cmp	r3, #1
2400a7fa:	d0b7      	beq.n	2400a76c <HAL_SAI_InitProtocol+0x50>
2400a7fc:	4620      	mov	r0, r4
}
2400a7fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
2400a802:	f7ff bdb3 	b.w	2400a36c <HAL_SAI_Init.part.0>
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400a806:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
2400a808:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400a80a:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
2400a80c:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400a80e:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
2400a810:	e7ee      	b.n	2400a7f0 <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_24;
2400a812:	21c0      	movs	r1, #192	; 0xc0
      hsai->FrameInit.FrameLength = 32U * nbslot;
2400a814:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400a816:	2280      	movs	r2, #128	; 0x80
      hsai->Init.DataSize = SAI_DATASIZE_32;
2400a818:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
2400a81a:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400a81c:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
2400a81e:	e7e7      	b.n	2400a7f0 <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_32;
2400a820:	21e0      	movs	r1, #224	; 0xe0
2400a822:	e7f7      	b.n	2400a814 <HAL_SAI_InitProtocol+0xf8>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400a824:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_32;
2400a826:	20e0      	movs	r0, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400a828:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400a82a:	019a      	lsls	r2, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
2400a82c:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400a82e:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400a830:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400a832:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2400a836:	e7db      	b.n	2400a7f0 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400a838:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
2400a83a:	22c0      	movs	r2, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400a83c:	2580      	movs	r5, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2400a83e:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400a840:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
2400a844:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400a846:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400a84a:	66e5      	str	r5, [r4, #108]	; 0x6c
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400a84c:	6560      	str	r0, [r4, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400a84e:	65a3      	str	r3, [r4, #88]	; 0x58
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2400a850:	d1ce      	bne.n	2400a7f0 <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 8;
2400a852:	2308      	movs	r3, #8
2400a854:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
2400a856:	e7cb      	b.n	2400a7f0 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400a858:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400a85a:	2280      	movs	r2, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2400a85c:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400a85e:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400a862:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400a864:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400a868:	66e2      	str	r2, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400a86a:	e9c4 0315 	strd	r0, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2400a86e:	d1bf      	bne.n	2400a7f0 <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 16;
2400a870:	2310      	movs	r3, #16
2400a872:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
2400a874:	e7bc      	b.n	2400a7f0 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
2400a876:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400a878:	2080      	movs	r0, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
2400a87a:	2140      	movs	r1, #64	; 0x40
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
2400a87c:	015a      	lsls	r2, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400a87e:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
2400a880:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
2400a882:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
2400a884:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2400a888:	e7b2      	b.n	2400a7f0 <HAL_SAI_InitProtocol+0xd4>
2400a88a:	bf00      	nop
2400a88c:	40015804 	.word	0x40015804

2400a890 <HAL_SAI_Transmit_DMA>:
{
2400a890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2400a894:	4615      	mov	r5, r2
2400a896:	f04f 0800 	mov.w	r8, #0
2400a89a:	460f      	mov	r7, r1
2400a89c:	4604      	mov	r4, r0
2400a89e:	f365 080f 	bfi	r8, r5, #0, #16
  uint32_t tickstart = HAL_GetTick();
2400a8a2:	f7fa fcf3 	bl	2400528c <HAL_GetTick>
2400a8a6:	f365 481f 	bfi	r8, r5, #16, #16
  if ((pData == NULL) || (Size == 0U))
2400a8aa:	2f00      	cmp	r7, #0
2400a8ac:	d066      	beq.n	2400a97c <HAL_SAI_Transmit_DMA+0xec>
2400a8ae:	fab5 f985 	clz	r9, r5
2400a8b2:	ea4f 1959 	mov.w	r9, r9, lsr #5
2400a8b6:	2d00      	cmp	r5, #0
2400a8b8:	d060      	beq.n	2400a97c <HAL_SAI_Transmit_DMA+0xec>
  if (hsai->State == HAL_SAI_STATE_READY)
2400a8ba:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
2400a8be:	2b01      	cmp	r3, #1
2400a8c0:	fa5f fa83 	uxtb.w	sl, r3
2400a8c4:	d155      	bne.n	2400a972 <HAL_SAI_Transmit_DMA+0xe2>
    __HAL_LOCK(hsai);
2400a8c6:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
2400a8ca:	2b01      	cmp	r3, #1
2400a8cc:	d051      	beq.n	2400a972 <HAL_SAI_Transmit_DMA+0xe2>
    hsai->State = HAL_SAI_STATE_BUSY_TX;
2400a8ce:	2312      	movs	r3, #18
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
2400a8d0:	f8c4 9094 	str.w	r9, [r4, #148]	; 0x94
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
2400a8d4:	4a39      	ldr	r2, [pc, #228]	; (2400a9bc <HAL_SAI_Transmit_DMA+0x12c>)
2400a8d6:	4606      	mov	r6, r0
    hsai->State = HAL_SAI_STATE_BUSY_TX;
2400a8d8:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
2400a8dc:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    __HAL_LOCK(hsai);
2400a8e0:	f884 a090 	strb.w	sl, [r4, #144]	; 0x90
    hsai->XferSize = Size;
2400a8e4:	e9c4 781e 	strd	r7, r8, [r4, #120]	; 0x78
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
2400a8e8:	641a      	str	r2, [r3, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
2400a8ea:	4a35      	ldr	r2, [pc, #212]	; (2400a9c0 <HAL_SAI_Transmit_DMA+0x130>)
2400a8ec:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
2400a8f0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
2400a8f2:	4a34      	ldr	r2, [pc, #208]	; (2400a9c4 <HAL_SAI_Transmit_DMA+0x134>)
2400a8f4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
2400a8f8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
2400a8fa:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
2400a8fe:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
2400a902:	6822      	ldr	r2, [r4, #0]
2400a904:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
2400a908:	321c      	adds	r2, #28
2400a90a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
2400a90c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
2400a910:	f7fb f8d8 	bl	24005ac4 <HAL_DMA_Start_IT>
2400a914:	2800      	cmp	r0, #0
2400a916:	d13f      	bne.n	2400a998 <HAL_SAI_Transmit_DMA+0x108>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a918:	6c63      	ldr	r3, [r4, #68]	; 0x44
2400a91a:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400a91c:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a91e:	d032      	beq.n	2400a986 <HAL_SAI_Transmit_DMA+0xf6>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400a920:	2205      	movs	r2, #5
2400a922:	2161      	movs	r1, #97	; 0x61
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400a924:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
2400a926:	2b01      	cmp	r3, #1
2400a928:	bf98      	it	ls
2400a92a:	460a      	movls	r2, r1
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400a92c:	6821      	ldr	r1, [r4, #0]
2400a92e:	690b      	ldr	r3, [r1, #16]
2400a930:	4313      	orrs	r3, r2
2400a932:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
2400a934:	6822      	ldr	r2, [r4, #0]
2400a936:	6813      	ldr	r3, [r2, #0]
2400a938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400a93c:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
2400a93e:	e005      	b.n	2400a94c <HAL_SAI_Transmit_DMA+0xbc>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
2400a940:	f7fa fca4 	bl	2400528c <HAL_GetTick>
2400a944:	1b83      	subs	r3, r0, r6
2400a946:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2400a94a:	d82a      	bhi.n	2400a9a2 <HAL_SAI_Transmit_DMA+0x112>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
2400a94c:	6822      	ldr	r2, [r4, #0]
2400a94e:	6955      	ldr	r5, [r2, #20]
2400a950:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
2400a954:	d0f4      	beq.n	2400a940 <HAL_SAI_Transmit_DMA+0xb0>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
2400a956:	6813      	ldr	r3, [r2, #0]
2400a958:	03db      	lsls	r3, r3, #15
2400a95a:	d403      	bmi.n	2400a964 <HAL_SAI_Transmit_DMA+0xd4>
      __HAL_SAI_ENABLE(hsai);
2400a95c:	6813      	ldr	r3, [r2, #0]
2400a95e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2400a962:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
2400a964:	2300      	movs	r3, #0
    return HAL_OK;
2400a966:	469a      	mov	sl, r3
    __HAL_UNLOCK(hsai);
2400a968:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
2400a96c:	4650      	mov	r0, sl
2400a96e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
2400a972:	f04f 0a02 	mov.w	sl, #2
}
2400a976:	4650      	mov	r0, sl
2400a978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return  HAL_ERROR;
2400a97c:	f04f 0a01 	mov.w	sl, #1
}
2400a980:	4650      	mov	r0, sl
2400a982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400a986:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a98a:	2a01      	cmp	r2, #1
2400a98c:	bf0b      	itete	eq
2400a98e:	2215      	moveq	r2, #21
2400a990:	2205      	movne	r2, #5
2400a992:	2171      	moveq	r1, #113	; 0x71
2400a994:	2161      	movne	r1, #97	; 0x61
2400a996:	e7c5      	b.n	2400a924 <HAL_SAI_Transmit_DMA+0x94>
}
2400a998:	4650      	mov	r0, sl
      __HAL_UNLOCK(hsai);
2400a99a:	f884 9090 	strb.w	r9, [r4, #144]	; 0x90
}
2400a99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400a9a2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
2400a9a6:	f04f 0a03 	mov.w	sl, #3
        __HAL_UNLOCK(hsai);
2400a9aa:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400a9ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
2400a9b2:	4650      	mov	r0, sl
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400a9b4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
2400a9b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2400a9bc:	2400ab15 	.word	0x2400ab15
2400a9c0:	2400aab1 	.word	0x2400aab1
2400a9c4:	2400ab99 	.word	0x2400ab99

2400a9c8 <HAL_SAI_Receive_DMA>:
{
2400a9c8:	2300      	movs	r3, #0
2400a9ca:	f362 030f 	bfi	r3, r2, #0, #16
2400a9ce:	b570      	push	{r4, r5, r6, lr}
2400a9d0:	f362 431f 	bfi	r3, r2, #16, #16
  if ((pData == NULL) || (Size == 0U))
2400a9d4:	2900      	cmp	r1, #0
2400a9d6:	d054      	beq.n	2400aa82 <HAL_SAI_Receive_DMA+0xba>
2400a9d8:	fab2 f582 	clz	r5, r2
2400a9dc:	096d      	lsrs	r5, r5, #5
2400a9de:	2a00      	cmp	r2, #0
2400a9e0:	d04f      	beq.n	2400aa82 <HAL_SAI_Receive_DMA+0xba>
  if (hsai->State == HAL_SAI_STATE_READY)
2400a9e2:	f890 2091 	ldrb.w	r2, [r0, #145]	; 0x91
2400a9e6:	4604      	mov	r4, r0
2400a9e8:	2a01      	cmp	r2, #1
2400a9ea:	b2d6      	uxtb	r6, r2
2400a9ec:	d146      	bne.n	2400aa7c <HAL_SAI_Receive_DMA+0xb4>
    __HAL_LOCK(hsai);
2400a9ee:	f890 2090 	ldrb.w	r2, [r0, #144]	; 0x90
2400a9f2:	2a01      	cmp	r2, #1
2400a9f4:	d042      	beq.n	2400aa7c <HAL_SAI_Receive_DMA+0xb4>
    hsai->pBuffPtr = pData;
2400a9f6:	6781      	str	r1, [r0, #120]	; 0x78
    hsai->State = HAL_SAI_STATE_BUSY_RX;
2400a9f8:	2122      	movs	r1, #34	; 0x22
    hsai->XferSize = Size;
2400a9fa:	67c3      	str	r3, [r0, #124]	; 0x7c
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
2400a9fc:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
2400aa00:	4b28      	ldr	r3, [pc, #160]	; (2400aaa4 <HAL_SAI_Receive_DMA+0xdc>)
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
2400aa02:	f8c0 5094 	str.w	r5, [r0, #148]	; 0x94
    __HAL_LOCK(hsai);
2400aa06:	f880 6090 	strb.w	r6, [r0, #144]	; 0x90
    hsai->State = HAL_SAI_STATE_BUSY_RX;
2400aa0a:	f880 1091 	strb.w	r1, [r0, #145]	; 0x91
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
2400aa0e:	6413      	str	r3, [r2, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
2400aa10:	4a25      	ldr	r2, [pc, #148]	; (2400aaa8 <HAL_SAI_Receive_DMA+0xe0>)
2400aa12:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
2400aa16:	63da      	str	r2, [r3, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
2400aa18:	4a24      	ldr	r2, [pc, #144]	; (2400aaac <HAL_SAI_Receive_DMA+0xe4>)
2400aa1a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
2400aa1e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
2400aa20:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
2400aa24:	651d      	str	r5, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
2400aa26:	6801      	ldr	r1, [r0, #0]
2400aa28:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
2400aa2c:	6f82      	ldr	r2, [r0, #120]	; 0x78
2400aa2e:	311c      	adds	r1, #28
2400aa30:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
2400aa34:	f7fb f846 	bl	24005ac4 <HAL_DMA_Start_IT>
2400aa38:	bb30      	cbnz	r0, 2400aa88 <HAL_SAI_Receive_DMA+0xc0>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400aa3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
2400aa3c:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400aa3e:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400aa40:	d026      	beq.n	2400aa90 <HAL_SAI_Receive_DMA+0xc8>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400aa42:	2205      	movs	r2, #5
2400aa44:	2061      	movs	r0, #97	; 0x61
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400aa46:	6821      	ldr	r1, [r4, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400aa48:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
2400aa4a:	2b01      	cmp	r3, #1
2400aa4c:	bf98      	it	ls
2400aa4e:	4602      	movls	r2, r0
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400aa50:	690b      	ldr	r3, [r1, #16]
2400aa52:	4313      	orrs	r3, r2
2400aa54:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
2400aa56:	6822      	ldr	r2, [r4, #0]
2400aa58:	6813      	ldr	r3, [r2, #0]
2400aa5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400aa5e:	6013      	str	r3, [r2, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
2400aa60:	6823      	ldr	r3, [r4, #0]
2400aa62:	681a      	ldr	r2, [r3, #0]
2400aa64:	03d2      	lsls	r2, r2, #15
2400aa66:	d403      	bmi.n	2400aa70 <HAL_SAI_Receive_DMA+0xa8>
      __HAL_SAI_ENABLE(hsai);
2400aa68:	681a      	ldr	r2, [r3, #0]
2400aa6a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
2400aa6e:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
2400aa70:	2300      	movs	r3, #0
    return HAL_OK;
2400aa72:	461e      	mov	r6, r3
    __HAL_UNLOCK(hsai);
2400aa74:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
2400aa78:	4630      	mov	r0, r6
2400aa7a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
2400aa7c:	2602      	movs	r6, #2
}
2400aa7e:	4630      	mov	r0, r6
2400aa80:	bd70      	pop	{r4, r5, r6, pc}
    return  HAL_ERROR;
2400aa82:	2601      	movs	r6, #1
}
2400aa84:	4630      	mov	r0, r6
2400aa86:	bd70      	pop	{r4, r5, r6, pc}
2400aa88:	4630      	mov	r0, r6
      __HAL_UNLOCK(hsai);
2400aa8a:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
}
2400aa8e:	bd70      	pop	{r4, r5, r6, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400aa90:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400aa94:	2a01      	cmp	r2, #1
2400aa96:	bf0b      	itete	eq
2400aa98:	2215      	moveq	r2, #21
2400aa9a:	2205      	movne	r2, #5
2400aa9c:	2071      	moveq	r0, #113	; 0x71
2400aa9e:	2061      	movne	r0, #97	; 0x61
2400aaa0:	e7d1      	b.n	2400aa46 <HAL_SAI_Receive_DMA+0x7e>
2400aaa2:	bf00      	nop
2400aaa4:	2400ab8d 	.word	0x2400ab8d
2400aaa8:	2400ab25 	.word	0x2400ab25
2400aaac:	2400ab99 	.word	0x2400ab99

2400aab0 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
2400aab0:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
2400aab2:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400aab4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
2400aab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400aaba:	d01b      	beq.n	2400aaf4 <SAI_DMATxCplt+0x44>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
2400aabc:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
2400aabe:	2300      	movs	r3, #0
2400aac0:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
2400aac4:	6813      	ldr	r3, [r2, #0]
2400aac6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
2400aaca:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400aacc:	6c43      	ldr	r3, [r0, #68]	; 0x44
2400aace:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400aad0:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400aad2:	d012      	beq.n	2400aafa <SAI_DMATxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400aad4:	f06f 0c61 	mvn.w	ip, #97	; 0x61
2400aad8:	f06f 0205 	mvn.w	r2, #5

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400aadc:	6801      	ldr	r1, [r0, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400aade:	3b02      	subs	r3, #2
2400aae0:	2b01      	cmp	r3, #1
2400aae2:	bf98      	it	ls
2400aae4:	4662      	movls	r2, ip
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400aae6:	690b      	ldr	r3, [r1, #16]

    hsai->State = HAL_SAI_STATE_READY;
2400aae8:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400aaec:	4013      	ands	r3, r2
2400aaee:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
2400aaf0:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
2400aaf4:	f01d fa78 	bl	24027fe8 <__HAL_SAI_TxCpltCallback_veneer>
#endif
}
2400aaf8:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400aafa:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400aafe:	2a01      	cmp	r2, #1
2400ab00:	bf0b      	itete	eq
2400ab02:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
2400ab06:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
2400ab0a:	f06f 0215 	mvneq.w	r2, #21
2400ab0e:	f06f 0205 	mvnne.w	r2, #5
2400ab12:	e7e3      	b.n	2400aadc <SAI_DMATxCplt+0x2c>

2400ab14 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
2400ab14:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
2400ab16:	6b80      	ldr	r0, [r0, #56]	; 0x38
2400ab18:	f01d fa6e 	bl	24027ff8 <__HAL_SAI_TxHalfCpltCallback_veneer>
#endif
}
2400ab1c:	bd08      	pop	{r3, pc}
2400ab1e:	bf00      	nop

2400ab20 <HAL_SAI_RxCpltCallback>:
2400ab20:	4770      	bx	lr
2400ab22:	bf00      	nop

2400ab24 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
2400ab24:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
2400ab26:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400ab28:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
2400ab2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400ab2e:	d01b      	beq.n	2400ab68 <SAI_DMARxCplt+0x44>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
2400ab30:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
2400ab32:	2100      	movs	r1, #0
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
2400ab34:	6813      	ldr	r3, [r2, #0]
2400ab36:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
2400ab3a:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400ab3c:	6c43      	ldr	r3, [r0, #68]	; 0x44
    hsai->XferCount = 0;
2400ab3e:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400ab42:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400ab44:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400ab46:	d012      	beq.n	2400ab6e <SAI_DMARxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400ab48:	f06f 0c61 	mvn.w	ip, #97	; 0x61
2400ab4c:	f06f 0205 	mvn.w	r2, #5

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400ab50:	6801      	ldr	r1, [r0, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400ab52:	3b02      	subs	r3, #2
2400ab54:	2b01      	cmp	r3, #1
2400ab56:	bf98      	it	ls
2400ab58:	4662      	movls	r2, ip
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400ab5a:	690b      	ldr	r3, [r1, #16]

    hsai->State = HAL_SAI_STATE_READY;
2400ab5c:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400ab60:	4013      	ands	r3, r2
2400ab62:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
2400ab64:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
2400ab68:	f7ff ffda 	bl	2400ab20 <HAL_SAI_RxCpltCallback>
#endif
}
2400ab6c:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400ab6e:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400ab72:	2a01      	cmp	r2, #1
2400ab74:	bf0b      	itete	eq
2400ab76:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
2400ab7a:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
2400ab7e:	f06f 0215 	mvneq.w	r2, #21
2400ab82:	f06f 0205 	mvnne.w	r2, #5
2400ab86:	e7e3      	b.n	2400ab50 <SAI_DMARxCplt+0x2c>

2400ab88 <HAL_SAI_RxHalfCpltCallback>:
2400ab88:	4770      	bx	lr
2400ab8a:	bf00      	nop

2400ab8c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
2400ab8c:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
2400ab8e:	6b80      	ldr	r0, [r0, #56]	; 0x38
2400ab90:	f7ff fffa 	bl	2400ab88 <HAL_SAI_RxHalfCpltCallback>
#endif
}
2400ab94:	bd08      	pop	{r3, pc}
2400ab96:	bf00      	nop

2400ab98 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
2400ab98:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400ab9a:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
2400ab9c:	f7fc f9e2 	bl	24006f64 <HAL_DMA_GetError>
2400aba0:	2802      	cmp	r0, #2
2400aba2:	d025      	beq.n	2400abf0 <SAI_DMAError+0x58>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400aba4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
2400aba8:	6821      	ldr	r1, [r4, #0]
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400abaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400abae:	4814      	ldr	r0, [pc, #80]	; (2400ac00 <SAI_DMAError+0x68>)
2400abb0:	4a14      	ldr	r2, [pc, #80]	; (2400ac04 <SAI_DMAError+0x6c>)
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400abb2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
2400abb6:	680b      	ldr	r3, [r1, #0]
2400abb8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
2400abbc:	600b      	str	r3, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400abbe:	6803      	ldr	r3, [r0, #0]
  __HAL_SAI_DISABLE(hsai);
2400abc0:	6821      	ldr	r1, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400abc2:	fba2 2303 	umull	r2, r3, r2, r3
  __HAL_SAI_DISABLE(hsai);
2400abc6:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400abc8:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
2400abca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400abce:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
2400abd0:	600a      	str	r2, [r1, #0]
    if (count == 0U)
2400abd2:	b173      	cbz	r3, 2400abf2 <SAI_DMAError+0x5a>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
2400abd4:	6822      	ldr	r2, [r4, #0]
    count--;
2400abd6:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
2400abd8:	6812      	ldr	r2, [r2, #0]
2400abda:	03d2      	lsls	r2, r2, #15
2400abdc:	d4f9      	bmi.n	2400abd2 <SAI_DMAError+0x3a>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
2400abde:	2201      	movs	r2, #1

    /* Initialize XferCount */
    hsai->XferCount = 0U;
2400abe0:	2300      	movs	r3, #0

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
2400abe2:	4620      	mov	r0, r4
    hsai->State = HAL_SAI_STATE_READY;
2400abe4:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
2400abe8:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
2400abec:	f01d fa14 	bl	24028018 <__HAL_SAI_ErrorCallback_veneer>
#endif
  }
}
2400abf0:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400abf2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
2400abf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400abfa:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      break;
2400abfe:	e7ee      	b.n	2400abde <SAI_DMAError+0x46>
2400ac00:	200008b4 	.word	0x200008b4
2400ac04:	95cbec1b 	.word	0x95cbec1b

2400ac08 <HAL_SD_GetCardStatus.part.0>:
  * @param  hsd: Pointer to SD handle
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
2400ac08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2400ac0c:	4604      	mov	r4, r0
2400ac0e:	b096      	sub	sp, #88	; 0x58
2400ac10:	460d      	mov	r5, r1
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
2400ac12:	f7fa fb3b 	bl	2400528c <HAL_GetTick>
  uint32_t count;
  uint32_t *pData = pSDstatus;

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400ac16:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
2400ac18:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400ac1a:	6820      	ldr	r0, [r4, #0]
2400ac1c:	f001 fcca 	bl	2400c5b4 <SDMMC_GetResponse>
2400ac20:	0181      	lsls	r1, r0, #6
2400ac22:	d45a      	bmi.n	2400acda <HAL_SD_GetCardStatus.part.0+0xd2>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
2400ac24:	2140      	movs	r1, #64	; 0x40
2400ac26:	6820      	ldr	r0, [r4, #0]
2400ac28:	f001 fcde 	bl	2400c5e8 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400ac2c:	b1e8      	cbz	r0, 2400ac6a <HAL_SD_GetCardStatus.part.0+0x62>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
  if (errorstate != HAL_SD_ERROR_NONE)
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
2400ac2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400ac30:	6363      	str	r3, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ac32:	6823      	ldr	r3, [r4, #0]
2400ac34:	4955      	ldr	r1, [pc, #340]	; (2400ad8c <HAL_SD_GetCardStatus.part.0+0x184>)
    hsd->State = HAL_SD_STATE_READY;
2400ac36:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ac38:	6399      	str	r1, [r3, #56]	; 0x38
    status = HAL_ERROR;
2400ac3a:	4616      	mov	r6, r2
    hsd->ErrorCode |= errorstate;
2400ac3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400ac3e:	4303      	orrs	r3, r0
2400ac40:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
2400ac42:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
2400ac46:	f44f 7100 	mov.w	r1, #512	; 0x200
2400ac4a:	6820      	ldr	r0, [r4, #0]
2400ac4c:	f001 fccc 	bl	2400c5e8 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400ac50:	b138      	cbz	r0, 2400ac62 <HAL_SD_GetCardStatus.part.0+0x5a>
    hsd->State = HAL_SD_STATE_READY;
2400ac52:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ac54:	6822      	ldr	r2, [r4, #0]
2400ac56:	494d      	ldr	r1, [pc, #308]	; (2400ad8c <HAL_SD_GetCardStatus.part.0+0x184>)
    status = HAL_ERROR;
2400ac58:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ac5a:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
2400ac5c:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
2400ac5e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
2400ac62:	4630      	mov	r0, r6
2400ac64:	b016      	add	sp, #88	; 0x58
2400ac66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400ac6a:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400ac6c:	6820      	ldr	r0, [r4, #0]
2400ac6e:	0409      	lsls	r1, r1, #16
2400ac70:	f002 fa42 	bl	2400d0f8 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
2400ac74:	2800      	cmp	r0, #0
2400ac76:	d1da      	bne.n	2400ac2e <HAL_SD_GetCardStatus.part.0+0x26>
  config.DataLength    = 64U;
2400ac78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2400ac7c:	2340      	movs	r3, #64	; 0x40
  (void)SDMMC_ConfigData(hsd->Instance, &config);
2400ac7e:	4669      	mov	r1, sp
2400ac80:	6820      	ldr	r0, [r4, #0]
  config.DataLength    = 64U;
2400ac82:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
2400ac86:	2260      	movs	r2, #96	; 0x60
2400ac88:	2302      	movs	r3, #2
2400ac8a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
2400ac8e:	2200      	movs	r2, #0
2400ac90:	2301      	movs	r3, #1
2400ac92:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
2400ac96:	f001 fc91 	bl	2400c5bc <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
2400ac9a:	6820      	ldr	r0, [r4, #0]
2400ac9c:	f002 fdf8 	bl	2400d890 <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
2400aca0:	2800      	cmp	r0, #0
2400aca2:	d1c4      	bne.n	2400ac2e <HAL_SD_GetCardStatus.part.0+0x26>
  uint32_t *pData = pSDstatus;
2400aca4:	ae06      	add	r6, sp, #24
2400aca6:	e004      	b.n	2400acb2 <HAL_SD_GetCardStatus.part.0+0xaa>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
        pData++;
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
2400aca8:	f7fa faf0 	bl	2400528c <HAL_GetTick>
2400acac:	1bc0      	subs	r0, r0, r7
2400acae:	3001      	adds	r0, #1
2400acb0:	d017      	beq.n	2400ace2 <HAL_SD_GetCardStatus.part.0+0xda>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
2400acb2:	6823      	ldr	r3, [r4, #0]
2400acb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2400acb6:	f412 7f95 	tst.w	r2, #298	; 0x12a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
2400acba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
2400acbc:	d114      	bne.n	2400ace8 <HAL_SD_GetCardStatus.part.0+0xe0>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
2400acbe:	0412      	lsls	r2, r2, #16
2400acc0:	d5f2      	bpl.n	2400aca8 <HAL_SD_GetCardStatus.part.0+0xa0>
2400acc2:	f106 0820 	add.w	r8, r6, #32
2400acc6:	e000      	b.n	2400acca <HAL_SD_GetCardStatus.part.0+0xc2>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
2400acc8:	6823      	ldr	r3, [r4, #0]
2400acca:	4618      	mov	r0, r3
2400accc:	f001 fc5c 	bl	2400c588 <SDMMC_ReadFIFO>
2400acd0:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
2400acd4:	4546      	cmp	r6, r8
2400acd6:	d1f7      	bne.n	2400acc8 <HAL_SD_GetCardStatus.part.0+0xc0>
2400acd8:	e7e6      	b.n	2400aca8 <HAL_SD_GetCardStatus.part.0+0xa0>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
2400acda:	6823      	ldr	r3, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
2400acdc:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400ace0:	e7a8      	b.n	2400ac34 <HAL_SD_GetCardStatus.part.0+0x2c>
    {
      return HAL_SD_ERROR_TIMEOUT;
2400ace2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400ace6:	e7a4      	b.n	2400ac32 <HAL_SD_GetCardStatus.part.0+0x2a>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
2400ace8:	0710      	lsls	r0, r2, #28
2400acea:	d449      	bmi.n	2400ad80 <HAL_SD_GetCardStatus.part.0+0x178>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
2400acec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2400acee:	0791      	lsls	r1, r2, #30
2400acf0:	d448      	bmi.n	2400ad84 <HAL_SD_GetCardStatus.part.0+0x17c>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
2400acf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2400acf4:	0692      	lsls	r2, r2, #26
2400acf6:	d50a      	bpl.n	2400ad0e <HAL_SD_GetCardStatus.part.0+0x106>
2400acf8:	e046      	b.n	2400ad88 <HAL_SD_GetCardStatus.part.0+0x180>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
2400acfa:	f001 fc45 	bl	2400c588 <SDMMC_ReadFIFO>
2400acfe:	f846 0b04 	str.w	r0, [r6], #4
    pData++;

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
2400ad02:	f7fa fac3 	bl	2400528c <HAL_GetTick>
2400ad06:	1bc0      	subs	r0, r0, r7
2400ad08:	3001      	adds	r0, #1
2400ad0a:	d0ea      	beq.n	2400ace2 <HAL_SD_GetCardStatus.part.0+0xda>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ad0c:	6823      	ldr	r3, [r4, #0]
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
2400ad0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    *pData = SDMMC_ReadFIFO(hsd->Instance);
2400ad10:	4618      	mov	r0, r3
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
2400ad12:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
2400ad16:	d1f0      	bne.n	2400acfa <HAL_SD_GetCardStatus.part.0+0xf2>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400ad18:	491d      	ldr	r1, [pc, #116]	; (2400ad90 <HAL_SD_GetCardStatus.part.0+0x188>)
  HAL_StatusTypeDef status = HAL_OK;
2400ad1a:	4616      	mov	r6, r2
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400ad1c:	6399      	str	r1, [r3, #56]	; 0x38
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
2400ad1e:	9b06      	ldr	r3, [sp, #24]
2400ad20:	f3c3 1281 	ubfx	r2, r3, #6, #2
2400ad24:	702a      	strb	r2, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
2400ad26:	f3c3 1240 	ubfx	r2, r3, #5, #1
2400ad2a:	706a      	strb	r2, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
2400ad2c:	0a1a      	lsrs	r2, r3, #8
2400ad2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
2400ad32:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
2400ad36:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
2400ad3a:	b292      	uxth	r2, r2
2400ad3c:	ba09      	rev	r1, r1
2400ad3e:	806a      	strh	r2, [r5, #2]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
2400ad40:	b2da      	uxtb	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
2400ad42:	6069      	str	r1, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
2400ad44:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
2400ad46:	f3c3 2207 	ubfx	r2, r3, #8, #8
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
2400ad4a:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
2400ad4e:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
2400ad50:	f3c3 5203 	ubfx	r2, r3, #20, #4
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
2400ad54:	0c1b      	lsrs	r3, r3, #16
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
2400ad56:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
2400ad58:	9a09      	ldr	r2, [sp, #36]	; 0x24
2400ad5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
2400ad5e:	b2d0      	uxtb	r0, r2
2400ad60:	4303      	orrs	r3, r0
2400ad62:	81ab      	strh	r3, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
2400ad64:	f3c2 2385 	ubfx	r3, r2, #10, #6
2400ad68:	73ab      	strb	r3, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
2400ad6a:	f3c2 2301 	ubfx	r3, r2, #8, #2
2400ad6e:	73eb      	strb	r3, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
2400ad70:	f3c2 1303 	ubfx	r3, r2, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
2400ad74:	f002 020f 	and.w	r2, r2, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
2400ad78:	742b      	strb	r3, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
2400ad7a:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
2400ad7c:	74a9      	strb	r1, [r5, #18]
2400ad7e:	e762      	b.n	2400ac46 <HAL_SD_GetCardStatus.part.0+0x3e>
    return HAL_SD_ERROR_DATA_TIMEOUT;
2400ad80:	2008      	movs	r0, #8
2400ad82:	e757      	b.n	2400ac34 <HAL_SD_GetCardStatus.part.0+0x2c>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
2400ad84:	2002      	movs	r0, #2
2400ad86:	e755      	b.n	2400ac34 <HAL_SD_GetCardStatus.part.0+0x2c>
    return HAL_SD_ERROR_RX_OVERRUN;
2400ad88:	2020      	movs	r0, #32
2400ad8a:	e753      	b.n	2400ac34 <HAL_SD_GetCardStatus.part.0+0x2c>
2400ad8c:	1fe00fff 	.word	0x1fe00fff
2400ad90:	18000f3a 	.word	0x18000f3a

2400ad94 <SD_FindSCR.constprop.0>:
  * @brief  Finds the SD card SCR register value.
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
2400ad94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2400ad98:	4605      	mov	r5, r0
2400ad9a:	b086      	sub	sp, #24
2400ad9c:	460f      	mov	r7, r1
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
2400ad9e:	f7fa fa75 	bl	2400528c <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
2400ada2:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
2400ada4:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
2400ada6:	6828      	ldr	r0, [r5, #0]
2400ada8:	f001 fc1e 	bl	2400c5e8 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400adac:	4604      	mov	r4, r0
2400adae:	b118      	cbz	r0, 2400adb8 <SD_FindSCR.constprop.0+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
2400adb0:	4620      	mov	r0, r4
2400adb2:	b006      	add	sp, #24
2400adb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
2400adb8:	6c69      	ldr	r1, [r5, #68]	; 0x44
2400adba:	6828      	ldr	r0, [r5, #0]
2400adbc:	0409      	lsls	r1, r1, #16
2400adbe:	f002 f99b 	bl	2400d0f8 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
2400adc2:	4604      	mov	r4, r0
2400adc4:	2800      	cmp	r0, #0
2400adc6:	d1f3      	bne.n	2400adb0 <SD_FindSCR.constprop.0+0x1c>
  config.DataLength    = 8U;
2400adc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2400adcc:	2308      	movs	r3, #8
  (void)SDMMC_ConfigData(hsd->Instance, &config);
2400adce:	4669      	mov	r1, sp
2400add0:	6828      	ldr	r0, [r5, #0]
  config.DataLength    = 8U;
2400add2:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
2400add6:	2230      	movs	r2, #48	; 0x30
2400add8:	2302      	movs	r3, #2
2400adda:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
2400adde:	2200      	movs	r2, #0
2400ade0:	2301      	movs	r3, #1
2400ade2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
2400ade6:	f001 fbe9 	bl	2400c5bc <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
2400adea:	6828      	ldr	r0, [r5, #0]
2400adec:	f002 fb1c 	bl	2400d428 <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
2400adf0:	4604      	mov	r4, r0
2400adf2:	2800      	cmp	r0, #0
2400adf4:	d1dc      	bne.n	2400adb0 <SD_FindSCR.constprop.0+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
2400adf6:	4682      	mov	sl, r0
2400adf8:	4681      	mov	r9, r0
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
2400adfa:	f240 582a 	movw	r8, #1322	; 0x52a
2400adfe:	e004      	b.n	2400ae0a <SD_FindSCR.constprop.0+0x76>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
2400ae00:	f7fa fa44 	bl	2400528c <HAL_GetTick>
2400ae04:	1b83      	subs	r3, r0, r6
2400ae06:	3301      	adds	r3, #1
2400ae08:	d024      	beq.n	2400ae54 <SD_FindSCR.constprop.0+0xc0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
2400ae0a:	6828      	ldr	r0, [r5, #0]
2400ae0c:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400ae0e:	ea13 0f08 	tst.w	r3, r8
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
2400ae12:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
2400ae14:	d10c      	bne.n	2400ae30 <SD_FindSCR.constprop.0+0x9c>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
2400ae16:	0319      	lsls	r1, r3, #12
2400ae18:	d4f2      	bmi.n	2400ae00 <SD_FindSCR.constprop.0+0x6c>
2400ae1a:	2c00      	cmp	r4, #0
2400ae1c:	d1f0      	bne.n	2400ae00 <SD_FindSCR.constprop.0+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
2400ae1e:	f001 fbb3 	bl	2400c588 <SDMMC_ReadFIFO>
2400ae22:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
2400ae24:	6828      	ldr	r0, [r5, #0]
      index++;
2400ae26:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
2400ae28:	f001 fbae 	bl	2400c588 <SDMMC_ReadFIFO>
2400ae2c:	4682      	mov	sl, r0
      index++;
2400ae2e:	e7e7      	b.n	2400ae00 <SD_FindSCR.constprop.0+0x6c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
2400ae30:	071a      	lsls	r2, r3, #28
2400ae32:	d416      	bmi.n	2400ae62 <SD_FindSCR.constprop.0+0xce>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
2400ae34:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400ae36:	079b      	lsls	r3, r3, #30
2400ae38:	d40f      	bmi.n	2400ae5a <SD_FindSCR.constprop.0+0xc6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
2400ae3a:	6b44      	ldr	r4, [r0, #52]	; 0x34
2400ae3c:	f014 0420 	ands.w	r4, r4, #32
2400ae40:	d113      	bne.n	2400ae6a <SD_FindSCR.constprop.0+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400ae42:	fa9a f28a 	rev.w	r2, sl
2400ae46:	fa99 f389 	rev.w	r3, r9
2400ae4a:	490a      	ldr	r1, [pc, #40]	; (2400ae74 <SD_FindSCR.constprop.0+0xe0>)
2400ae4c:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
2400ae4e:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
2400ae52:	e7ad      	b.n	2400adb0 <SD_FindSCR.constprop.0+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
2400ae54:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
2400ae58:	e7aa      	b.n	2400adb0 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
2400ae5a:	2302      	movs	r3, #2
    return HAL_SD_ERROR_DATA_CRC_FAIL;
2400ae5c:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
2400ae5e:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
2400ae60:	e7a6      	b.n	2400adb0 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
2400ae62:	2308      	movs	r3, #8
    return HAL_SD_ERROR_DATA_TIMEOUT;
2400ae64:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
2400ae66:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
2400ae68:	e7a2      	b.n	2400adb0 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
2400ae6a:	2320      	movs	r3, #32
    return HAL_SD_ERROR_RX_OVERRUN;
2400ae6c:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
2400ae6e:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
2400ae70:	e79e      	b.n	2400adb0 <SD_FindSCR.constprop.0+0x1c>
2400ae72:	bf00      	nop
2400ae74:	18000f3a 	.word	0x18000f3a

2400ae78 <HAL_SD_ReadBlocks>:
{
2400ae78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400ae7c:	460d      	mov	r5, r1
2400ae7e:	b087      	sub	sp, #28
2400ae80:	4604      	mov	r4, r0
2400ae82:	4692      	mov	sl, r2
2400ae84:	461f      	mov	r7, r3
2400ae86:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
2400ae8a:	f7fa f9ff 	bl	2400528c <HAL_GetTick>
  if (NULL == pData)
2400ae8e:	2d00      	cmp	r5, #0
2400ae90:	d069      	beq.n	2400af66 <HAL_SD_ReadBlocks+0xee>
  if (hsd->State == HAL_SD_STATE_READY)
2400ae92:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
2400ae96:	2b01      	cmp	r3, #1
2400ae98:	fa5f f983 	uxtb.w	r9, r3
2400ae9c:	d152      	bne.n	2400af44 <HAL_SD_ReadBlocks+0xcc>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400ae9e:	eb0a 0307 	add.w	r3, sl, r7
2400aea2:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400aea4:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400aea6:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400aea8:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400aeaa:	d866      	bhi.n	2400af7a <HAL_SD_ReadBlocks+0x102>
    hsd->State = HAL_SD_STATE_BUSY;
2400aeac:	2303      	movs	r3, #3
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
2400aeae:	f04f 0b02 	mov.w	fp, #2
2400aeb2:	4606      	mov	r6, r0
    hsd->State = HAL_SD_STATE_BUSY;
2400aeb4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
2400aeb8:	6823      	ldr	r3, [r4, #0]
2400aeba:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400aebc:	4669      	mov	r1, sp
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
2400aebe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400aec0:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
2400aec2:	2b01      	cmp	r3, #1
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
2400aec4:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
2400aec8:	e9cd 3304 	strd	r3, r3, [sp, #16]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400aecc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
2400aed0:	bf18      	it	ne
2400aed2:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400aed6:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
2400aed8:	027b      	lsls	r3, r7, #9
2400aeda:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
2400aedc:	2390      	movs	r3, #144	; 0x90
2400aede:	e9cd 3b02 	strd	r3, fp, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400aee2:	f001 fb6b 	bl	2400c5bc <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
2400aee6:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
2400aee8:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
2400aeea:	68d3      	ldr	r3, [r2, #12]
2400aeec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400aef0:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
2400aef2:	d931      	bls.n	2400af58 <HAL_SD_ReadBlocks+0xe0>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
2400aef4:	4651      	mov	r1, sl
2400aef6:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
2400aef8:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
2400aefc:	f001 fcd0 	bl	2400c8a0 <SDMMC_CmdReadMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
2400af00:	2800      	cmp	r0, #0
2400af02:	d142      	bne.n	2400af8a <HAL_SD_ReadBlocks+0x112>
    dataremaining = config.DataLength;
2400af04:	f8dd b004 	ldr.w	fp, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
2400af08:	e004      	b.n	2400af14 <HAL_SD_ReadBlocks+0x9c>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
2400af0a:	f7fa f9bf 	bl	2400528c <HAL_GetTick>
2400af0e:	1b80      	subs	r0, r0, r6
2400af10:	4540      	cmp	r0, r8
2400af12:	d267      	bcs.n	2400afe4 <HAL_SD_ReadBlocks+0x16c>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
2400af14:	6820      	ldr	r0, [r4, #0]
2400af16:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400af18:	f413 7f95 	tst.w	r3, #298	; 0x12a
2400af1c:	d141      	bne.n	2400afa2 <HAL_SD_ReadBlocks+0x12a>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
2400af1e:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400af20:	041a      	lsls	r2, r3, #16
2400af22:	d5f2      	bpl.n	2400af0a <HAL_SD_ReadBlocks+0x92>
2400af24:	f1bb 0f1f 	cmp.w	fp, #31
2400af28:	d9ef      	bls.n	2400af0a <HAL_SD_ReadBlocks+0x92>
2400af2a:	f105 0a20 	add.w	sl, r5, #32
2400af2e:	e000      	b.n	2400af32 <HAL_SD_ReadBlocks+0xba>
          data = SDMMC_ReadFIFO(hsd->Instance);
2400af30:	6820      	ldr	r0, [r4, #0]
2400af32:	f001 fb29 	bl	2400c588 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
2400af36:	f845 0b04 	str.w	r0, [r5], #4
        for (count = 0U; count < 8U; count++)
2400af3a:	45aa      	cmp	sl, r5
2400af3c:	d1f8      	bne.n	2400af30 <HAL_SD_ReadBlocks+0xb8>
        dataremaining -= 32U;
2400af3e:	f1ab 0b20 	sub.w	fp, fp, #32
2400af42:	e7e2      	b.n	2400af0a <HAL_SD_ReadBlocks+0x92>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400af44:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
2400af46:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400af4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
2400af4e:	6363      	str	r3, [r4, #52]	; 0x34
}
2400af50:	4648      	mov	r0, r9
2400af52:	b007      	add	sp, #28
2400af54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
2400af58:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
2400af5a:	4651      	mov	r1, sl
2400af5c:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
2400af5e:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
2400af60:	f001 fbf0 	bl	2400c744 <SDMMC_CmdReadSingleBlock>
2400af64:	e7cc      	b.n	2400af00 <HAL_SD_ReadBlocks+0x88>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400af66:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
2400af68:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400af6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
2400af70:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400af72:	6363      	str	r3, [r4, #52]	; 0x34
}
2400af74:	b007      	add	sp, #28
2400af76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400af7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
2400af7c:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400af7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
2400af82:	6363      	str	r3, [r4, #52]	; 0x34
}
2400af84:	b007      	add	sp, #28
2400af86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400af8a:	6823      	ldr	r3, [r4, #0]
2400af8c:	4a30      	ldr	r2, [pc, #192]	; (2400b050 <HAL_SD_ReadBlocks+0x1d8>)
2400af8e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
2400af90:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
2400af92:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400af94:	4303      	orrs	r3, r0
2400af96:	6363      	str	r3, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
2400af98:	2300      	movs	r3, #0
          hsd->State = HAL_SD_STATE_READY;
2400af9a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
2400af9e:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
2400afa0:	e7d6      	b.n	2400af50 <HAL_SD_ReadBlocks+0xd8>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
2400afa2:	68c3      	ldr	r3, [r0, #12]
2400afa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400afa8:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
2400afaa:	6820      	ldr	r0, [r4, #0]
2400afac:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400afae:	05db      	lsls	r3, r3, #23
2400afb0:	d501      	bpl.n	2400afb6 <HAL_SD_ReadBlocks+0x13e>
2400afb2:	2f01      	cmp	r7, #1
2400afb4:	d825      	bhi.n	2400b002 <HAL_SD_ReadBlocks+0x18a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
2400afb6:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400afb8:	f013 0308 	ands.w	r3, r3, #8
2400afbc:	d135      	bne.n	2400b02a <HAL_SD_ReadBlocks+0x1b2>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
2400afbe:	6b42      	ldr	r2, [r0, #52]	; 0x34
2400afc0:	f012 0202 	ands.w	r2, r2, #2
2400afc4:	d126      	bne.n	2400b014 <HAL_SD_ReadBlocks+0x19c>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
2400afc6:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400afc8:	f013 0320 	ands.w	r3, r3, #32
2400afcc:	d039      	beq.n	2400b042 <HAL_SD_ReadBlocks+0x1ca>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400afce:	4b20      	ldr	r3, [pc, #128]	; (2400b050 <HAL_SD_ReadBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
2400afd0:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400afd2:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
2400afd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400afd6:	f043 0320 	orr.w	r3, r3, #32
2400afda:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400afdc:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400afe0:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400afe2:	e7b5      	b.n	2400af50 <HAL_SD_ReadBlocks+0xd8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400afe4:	6823      	ldr	r3, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
2400afe6:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400afe8:	4819      	ldr	r0, [pc, #100]	; (2400b050 <HAL_SD_ReadBlocks+0x1d8>)
        hsd->Context = SD_CONTEXT_NONE;
2400afea:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
2400afec:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400aff0:	6398      	str	r0, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
2400aff2:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400aff4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
2400aff8:	6363      	str	r3, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
2400affa:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
2400affe:	62e2      	str	r2, [r4, #44]	; 0x2c
        return HAL_TIMEOUT;
2400b000:	e7a6      	b.n	2400af50 <HAL_SD_ReadBlocks+0xd8>
      if (hsd->SdCard.CardType != CARD_SECURED)
2400b002:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400b004:	2b03      	cmp	r3, #3
2400b006:	d0d6      	beq.n	2400afb6 <HAL_SD_ReadBlocks+0x13e>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
2400b008:	f001 fe54 	bl	2400ccb4 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
2400b00c:	2800      	cmp	r0, #0
2400b00e:	d1bc      	bne.n	2400af8a <HAL_SD_ReadBlocks+0x112>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b010:	6820      	ldr	r0, [r4, #0]
2400b012:	e7d0      	b.n	2400afb6 <HAL_SD_ReadBlocks+0x13e>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b014:	4a0e      	ldr	r2, [pc, #56]	; (2400b050 <HAL_SD_ReadBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
2400b016:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b018:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
2400b01a:	6b62      	ldr	r2, [r4, #52]	; 0x34
2400b01c:	f042 0202 	orr.w	r2, r2, #2
2400b020:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400b022:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400b026:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400b028:	e792      	b.n	2400af50 <HAL_SD_ReadBlocks+0xd8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b02a:	4b09      	ldr	r3, [pc, #36]	; (2400b050 <HAL_SD_ReadBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
2400b02c:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b02e:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
2400b030:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400b032:	f043 0308 	orr.w	r3, r3, #8
2400b036:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
2400b038:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
2400b03a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400b03e:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400b040:	e786      	b.n	2400af50 <HAL_SD_ReadBlocks+0xd8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400b042:	4904      	ldr	r1, [pc, #16]	; (2400b054 <HAL_SD_ReadBlocks+0x1dc>)
    hsd->State = HAL_SD_STATE_READY;
2400b044:	2201      	movs	r2, #1
    return HAL_OK;
2400b046:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400b048:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
2400b04a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
2400b04e:	e77f      	b.n	2400af50 <HAL_SD_ReadBlocks+0xd8>
2400b050:	1fe00fff 	.word	0x1fe00fff
2400b054:	18000f3a 	.word	0x18000f3a

2400b058 <HAL_SD_WriteBlocks>:
{
2400b058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400b05c:	460d      	mov	r5, r1
2400b05e:	b089      	sub	sp, #36	; 0x24
2400b060:	4604      	mov	r4, r0
2400b062:	4692      	mov	sl, r2
2400b064:	461f      	mov	r7, r3
2400b066:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
2400b06a:	f7fa f90f 	bl	2400528c <HAL_GetTick>
  if (NULL == pData)
2400b06e:	2d00      	cmp	r5, #0
2400b070:	d068      	beq.n	2400b144 <HAL_SD_WriteBlocks+0xec>
  if (hsd->State == HAL_SD_STATE_READY)
2400b072:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
2400b076:	2b01      	cmp	r3, #1
2400b078:	fa5f f983 	uxtb.w	r9, r3
2400b07c:	d152      	bne.n	2400b124 <HAL_SD_WriteBlocks+0xcc>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400b07e:	eb0a 0307 	add.w	r3, sl, r7
2400b082:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400b084:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400b086:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400b088:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400b08a:	d865      	bhi.n	2400b158 <HAL_SD_WriteBlocks+0x100>
    hsd->State = HAL_SD_STATE_BUSY;
2400b08c:	2303      	movs	r3, #3
2400b08e:	4606      	mov	r6, r0
2400b090:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
2400b094:	6823      	ldr	r3, [r4, #0]
2400b096:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400b098:	a902      	add	r1, sp, #8
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
2400b09a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400b09c:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
2400b09e:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
2400b0a0:	f04f 0300 	mov.w	r3, #0
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
2400b0a4:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DPSM          = SDMMC_DPSM_DISABLE;
2400b0a8:	9307      	str	r3, [sp, #28]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400b0aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
2400b0ae:	bf18      	it	ne
2400b0b0:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400b0b4:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
2400b0b6:	027b      	lsls	r3, r7, #9
2400b0b8:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
2400b0ba:	2390      	movs	r3, #144	; 0x90
2400b0bc:	9304      	str	r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400b0be:	f001 fa7d 	bl	2400c5bc <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
2400b0c2:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
2400b0c4:	2f01      	cmp	r7, #1
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
2400b0c6:	4651      	mov	r1, sl
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
2400b0c8:	68d3      	ldr	r3, [r2, #12]
2400b0ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400b0ce:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
2400b0d0:	d932      	bls.n	2400b138 <HAL_SD_WriteBlocks+0xe0>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
2400b0d2:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
2400b0d4:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
2400b0d6:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
2400b0d8:	f001 fd3e 	bl	2400cb58 <SDMMC_CmdWriteMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
2400b0dc:	2800      	cmp	r0, #0
2400b0de:	d143      	bne.n	2400b168 <HAL_SD_WriteBlocks+0x110>
    dataremaining = config.DataLength;
2400b0e0:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
2400b0e4:	e004      	b.n	2400b0f0 <HAL_SD_WriteBlocks+0x98>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
2400b0e6:	f7fa f8d1 	bl	2400528c <HAL_GetTick>
2400b0ea:	1b80      	subs	r0, r0, r6
2400b0ec:	4540      	cmp	r0, r8
2400b0ee:	d268      	bcs.n	2400b1c2 <HAL_SD_WriteBlocks+0x16a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
2400b0f0:	6820      	ldr	r0, [r4, #0]
2400b0f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400b0f4:	f413 7f8d 	tst.w	r3, #282	; 0x11a
2400b0f8:	d142      	bne.n	2400b180 <HAL_SD_WriteBlocks+0x128>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
2400b0fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400b0fc:	045a      	lsls	r2, r3, #17
2400b0fe:	d5f2      	bpl.n	2400b0e6 <HAL_SD_WriteBlocks+0x8e>
2400b100:	f1bb 0f1f 	cmp.w	fp, #31
2400b104:	d9ef      	bls.n	2400b0e6 <HAL_SD_WriteBlocks+0x8e>
2400b106:	f105 0a20 	add.w	sl, r5, #32
2400b10a:	e000      	b.n	2400b10e <HAL_SD_WriteBlocks+0xb6>
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
2400b10c:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
2400b10e:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
2400b112:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
2400b114:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
2400b116:	f001 fa3b 	bl	2400c590 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
2400b11a:	4555      	cmp	r5, sl
2400b11c:	d1f6      	bne.n	2400b10c <HAL_SD_WriteBlocks+0xb4>
        dataremaining -= 32U;
2400b11e:	f1ab 0b20 	sub.w	fp, fp, #32
2400b122:	e7e0      	b.n	2400b0e6 <HAL_SD_WriteBlocks+0x8e>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400b124:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
2400b126:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400b12a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
2400b12e:	6363      	str	r3, [r4, #52]	; 0x34
}
2400b130:	4648      	mov	r0, r9
2400b132:	b009      	add	sp, #36	; 0x24
2400b134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
2400b138:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
2400b13a:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
2400b13c:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
2400b13e:	f001 fc5d 	bl	2400c9fc <SDMMC_CmdWriteSingleBlock>
2400b142:	e7cb      	b.n	2400b0dc <HAL_SD_WriteBlocks+0x84>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400b144:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
2400b146:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400b14a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
2400b14e:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400b150:	6363      	str	r3, [r4, #52]	; 0x34
}
2400b152:	b009      	add	sp, #36	; 0x24
2400b154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400b158:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
2400b15a:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400b15c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
2400b160:	6363      	str	r3, [r4, #52]	; 0x34
}
2400b162:	b009      	add	sp, #36	; 0x24
2400b164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b168:	6823      	ldr	r3, [r4, #0]
2400b16a:	4a30      	ldr	r2, [pc, #192]	; (2400b22c <HAL_SD_WriteBlocks+0x1d4>)
2400b16c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
2400b16e:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
2400b170:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400b172:	4303      	orrs	r3, r0
2400b174:	6363      	str	r3, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
2400b176:	2300      	movs	r3, #0
          hsd->State = HAL_SD_STATE_READY;
2400b178:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
2400b17c:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
2400b17e:	e7d7      	b.n	2400b130 <HAL_SD_WriteBlocks+0xd8>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
2400b180:	68c3      	ldr	r3, [r0, #12]
2400b182:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400b186:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
2400b188:	6820      	ldr	r0, [r4, #0]
2400b18a:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400b18c:	05db      	lsls	r3, r3, #23
2400b18e:	d501      	bpl.n	2400b194 <HAL_SD_WriteBlocks+0x13c>
2400b190:	2f01      	cmp	r7, #1
2400b192:	d823      	bhi.n	2400b1dc <HAL_SD_WriteBlocks+0x184>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
2400b194:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400b196:	f013 0308 	ands.w	r3, r3, #8
2400b19a:	d133      	bne.n	2400b204 <HAL_SD_WriteBlocks+0x1ac>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
2400b19c:	6b42      	ldr	r2, [r0, #52]	; 0x34
2400b19e:	f012 0202 	ands.w	r2, r2, #2
2400b1a2:	d124      	bne.n	2400b1ee <HAL_SD_WriteBlocks+0x196>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
2400b1a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400b1a6:	f013 0310 	ands.w	r3, r3, #16
2400b1aa:	d037      	beq.n	2400b21c <HAL_SD_WriteBlocks+0x1c4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b1ac:	4b1f      	ldr	r3, [pc, #124]	; (2400b22c <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
2400b1ae:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b1b0:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
2400b1b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400b1b4:	f043 0310 	orr.w	r3, r3, #16
2400b1b8:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400b1ba:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400b1be:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400b1c0:	e7b6      	b.n	2400b130 <HAL_SD_WriteBlocks+0xd8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b1c2:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
2400b1c4:	2201      	movs	r2, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b1c6:	4819      	ldr	r0, [pc, #100]	; (2400b22c <HAL_SD_WriteBlocks+0x1d4>)
        hsd->Context = SD_CONTEXT_NONE;
2400b1c8:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
2400b1ca:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b1ce:	6388      	str	r0, [r1, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
2400b1d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
2400b1d2:	6361      	str	r1, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
2400b1d4:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
2400b1d8:	62e3      	str	r3, [r4, #44]	; 0x2c
        return HAL_TIMEOUT;
2400b1da:	e7a9      	b.n	2400b130 <HAL_SD_WriteBlocks+0xd8>
      if (hsd->SdCard.CardType != CARD_SECURED)
2400b1dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400b1de:	2b03      	cmp	r3, #3
2400b1e0:	d0d8      	beq.n	2400b194 <HAL_SD_WriteBlocks+0x13c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
2400b1e2:	f001 fd67 	bl	2400ccb4 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
2400b1e6:	2800      	cmp	r0, #0
2400b1e8:	d1be      	bne.n	2400b168 <HAL_SD_WriteBlocks+0x110>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b1ea:	6820      	ldr	r0, [r4, #0]
2400b1ec:	e7d2      	b.n	2400b194 <HAL_SD_WriteBlocks+0x13c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b1ee:	4a0f      	ldr	r2, [pc, #60]	; (2400b22c <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
2400b1f0:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b1f2:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
2400b1f4:	6b62      	ldr	r2, [r4, #52]	; 0x34
2400b1f6:	f042 0202 	orr.w	r2, r2, #2
2400b1fa:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400b1fc:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400b200:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400b202:	e795      	b.n	2400b130 <HAL_SD_WriteBlocks+0xd8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b204:	4b09      	ldr	r3, [pc, #36]	; (2400b22c <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
2400b206:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b208:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
2400b20a:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400b20c:	f043 0308 	orr.w	r3, r3, #8
2400b210:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
2400b212:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
2400b214:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400b218:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400b21a:	e789      	b.n	2400b130 <HAL_SD_WriteBlocks+0xd8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400b21c:	4904      	ldr	r1, [pc, #16]	; (2400b230 <HAL_SD_WriteBlocks+0x1d8>)
    hsd->State = HAL_SD_STATE_READY;
2400b21e:	2201      	movs	r2, #1
    return HAL_OK;
2400b220:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400b222:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
2400b224:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
2400b228:	e782      	b.n	2400b130 <HAL_SD_WriteBlocks+0xd8>
2400b22a:	bf00      	nop
2400b22c:	1fe00fff 	.word	0x1fe00fff
2400b230:	18000f3a 	.word	0x18000f3a

2400b234 <HAL_SD_GetCardCSD>:
{
2400b234:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
2400b236:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  pCSD->Reserved2 = 0U; /*!< Reserved */
2400b238:	f04f 0c00 	mov.w	ip, #0
{
2400b23c:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
2400b23e:	0f92      	lsrs	r2, r2, #30
2400b240:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
2400b242:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
2400b244:	f3c2 6283 	ubfx	r2, r2, #26, #4
2400b248:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
2400b24a:	f890 205f 	ldrb.w	r2, [r0, #95]	; 0x5f
2400b24e:	f002 0203 	and.w	r2, r2, #3
2400b252:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
2400b254:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
2400b258:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
2400b25a:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
2400b25e:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
2400b260:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
2400b264:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
2400b266:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400b268:	0d12      	lsrs	r2, r2, #20
2400b26a:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
2400b26c:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
2400b270:	f002 020f 	and.w	r2, r2, #15
2400b274:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
2400b276:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400b278:	f3c2 32c0 	ubfx	r2, r2, #15, #1
2400b27c:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
2400b27e:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400b280:	f3c2 3280 	ubfx	r2, r2, #14, #1
2400b284:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
2400b286:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400b288:	f3c2 3240 	ubfx	r2, r2, #13, #1
2400b28c:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
2400b28e:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400b290:	f3c2 3200 	ubfx	r2, r2, #12, #1
2400b294:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
2400b296:	f881 c00d 	strb.w	ip, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
2400b29a:	6b82      	ldr	r2, [r0, #56]	; 0x38
2400b29c:	2a00      	cmp	r2, #0
2400b29e:	f040 808a 	bne.w	2400b3b6 <HAL_SD_GetCardCSD+0x182>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
2400b2a2:	6e04      	ldr	r4, [r0, #96]	; 0x60
2400b2a4:	f640 72fc 	movw	r2, #4092	; 0xffc
2400b2a8:	6e40      	ldr	r0, [r0, #100]	; 0x64
2400b2aa:	ea02 0284 	and.w	r2, r2, r4, lsl #2
2400b2ae:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
2400b2b2:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
2400b2b4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400b2b6:	f3c2 62c2 	ubfx	r2, r2, #27, #3
2400b2ba:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
2400b2bc:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
2400b2c0:	f002 0207 	and.w	r2, r2, #7
2400b2c4:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
2400b2c6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400b2c8:	f3c2 5242 	ubfx	r2, r2, #21, #3
2400b2cc:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
2400b2ce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400b2d0:	f3c2 4282 	ubfx	r2, r2, #18, #3
2400b2d4:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
2400b2d6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400b2d8:	f3c2 32c2 	ubfx	r2, r2, #15, #3
2400b2dc:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
2400b2de:	690a      	ldr	r2, [r1, #16]
2400b2e0:	3201      	adds	r2, #1
2400b2e2:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
2400b2e4:	7e08      	ldrb	r0, [r1, #24]
2400b2e6:	f000 0007 	and.w	r0, r0, #7
2400b2ea:	3002      	adds	r0, #2
2400b2ec:	4082      	lsls	r2, r0
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
2400b2ee:	2001      	movs	r0, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
2400b2f0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
2400b2f2:	f891 c008 	ldrb.w	ip, [r1, #8]
2400b2f6:	f00c 0c0f 	and.w	ip, ip, #15
2400b2fa:	fa00 f00c 	lsl.w	r0, r0, ip
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
2400b2fe:	ea4f 2c50 	mov.w	ip, r0, lsr #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
2400b302:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
2400b304:	fb02 f20c 	mul.w	r2, r2, ip
2400b308:	651a      	str	r2, [r3, #80]	; 0x50
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
2400b30a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    hsd->SdCard.LogBlockSize = 512U;
2400b30c:	f44f 7400 	mov.w	r4, #512	; 0x200
  pCSD->Reserved3 = 0;
2400b310:	2000      	movs	r0, #0
  pCSD->Reserved4 = 1;
2400b312:	f04f 0c01 	mov.w	ip, #1
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
2400b316:	f3c2 3280 	ubfx	r2, r2, #14, #1
    hsd->SdCard.LogBlockSize = 512U;
2400b31a:	655c      	str	r4, [r3, #84]	; 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
2400b31c:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
2400b31e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400b320:	f3c2 12c6 	ubfx	r2, r2, #7, #7
2400b324:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
2400b326:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400b328:	f002 027f 	and.w	r2, r2, #127	; 0x7f
2400b32c:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
2400b32e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400b330:	0fd2      	lsrs	r2, r2, #31
2400b332:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
2400b334:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400b336:	f3c2 7241 	ubfx	r2, r2, #29, #2
2400b33a:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
2400b33c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400b33e:	f3c2 6282 	ubfx	r2, r2, #26, #3
2400b342:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
2400b344:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400b346:	f3c2 5283 	ubfx	r2, r2, #22, #4
2400b34a:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
2400b34c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400b34e:	f3c2 5240 	ubfx	r2, r2, #21, #1
2400b352:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
2400b356:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
2400b35a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
2400b35e:	ea02 020c 	and.w	r2, r2, ip
2400b362:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
2400b366:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400b368:	f3c2 32c0 	ubfx	r2, r2, #15, #1
2400b36c:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
2400b370:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400b372:	f3c2 3280 	ubfx	r2, r2, #14, #1
2400b376:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
2400b37a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400b37c:	f3c2 3240 	ubfx	r2, r2, #13, #1
2400b380:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
2400b384:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400b386:	f3c2 3200 	ubfx	r2, r2, #12, #1
2400b38a:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
2400b38e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400b390:	f3c2 2281 	ubfx	r2, r2, #10, #2
2400b394:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
2400b398:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400b39a:	f3c2 2201 	ubfx	r2, r2, #8, #2
2400b39e:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
2400b3a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2400b3a4:	f3c3 0346 	ubfx	r3, r3, #1, #7
2400b3a8:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
2400b3ac:	f881 c02a 	strb.w	ip, [r1, #42]	; 0x2a
}
2400b3b0:	f85d 4b04 	ldr.w	r4, [sp], #4
2400b3b4:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
2400b3b6:	2a01      	cmp	r2, #1
2400b3b8:	d110      	bne.n	2400b3dc <HAL_SD_GetCardCSD+0x1a8>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
2400b3ba:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400b3bc:	f8b0 4066 	ldrh.w	r4, [r0, #102]	; 0x66
    hsd->SdCard.BlockSize = 512U;
2400b3c0:	f44f 7000 	mov.w	r0, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
2400b3c4:	0412      	lsls	r2, r2, #16
2400b3c6:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
2400b3ca:	4322      	orrs	r2, r4
2400b3cc:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
2400b3ce:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
2400b3d0:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
2400b3d2:	3201      	adds	r2, #1
2400b3d4:	0292      	lsls	r2, r2, #10
2400b3d6:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
2400b3d8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
2400b3da:	e796      	b.n	2400b30a <HAL_SD_GetCardCSD+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b3dc:	6802      	ldr	r2, [r0, #0]
    hsd->State = HAL_SD_STATE_READY;
2400b3de:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b3e0:	4805      	ldr	r0, [pc, #20]	; (2400b3f8 <HAL_SD_GetCardCSD+0x1c4>)
2400b3e2:	6390      	str	r0, [r2, #56]	; 0x38
    return HAL_ERROR;
2400b3e4:	4608      	mov	r0, r1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400b3e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2400b3e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
2400b3ec:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
2400b3ee:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
}
2400b3f2:	f85d 4b04 	ldr.w	r4, [sp], #4
2400b3f6:	4770      	bx	lr
2400b3f8:	1fe00fff 	.word	0x1fe00fff

2400b3fc <HAL_SD_InitCard>:
{
2400b3fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
2400b3fe:	2200      	movs	r2, #0
{
2400b400:	b095      	sub	sp, #84	; 0x54
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
2400b402:	2300      	movs	r3, #0
{
2400b404:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
2400b406:	2100      	movs	r1, #0
2400b408:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
2400b40c:	e9cd 2304 	strd	r2, r3, [sp, #16]
2400b410:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
2400b414:	f7fe fd6a 	bl	24009eec <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
2400b418:	b940      	cbnz	r0, 2400b42c <HAL_SD_InitCard+0x30>
    hsd->State = HAL_SD_STATE_READY;
2400b41a:	2601      	movs	r6, #1
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
2400b41c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hsd->State = HAL_SD_STATE_READY;
2400b420:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
2400b424:	6363      	str	r3, [r4, #52]	; 0x34
}
2400b426:	4630      	mov	r0, r6
2400b428:	b015      	add	sp, #84	; 0x54
2400b42a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
2400b42c:	0a06      	lsrs	r6, r0, #8
2400b42e:	4b8e      	ldr	r3, [pc, #568]	; (2400b668 <HAL_SD_InitCard+0x26c>)
  (void)SDMMC_Init(hsd->Instance, Init);
2400b430:	aa07      	add	r2, sp, #28
2400b432:	4605      	mov	r5, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
2400b434:	fba3 3606 	umull	r3, r6, r3, r6
  (void)SDMMC_Init(hsd->Instance, Init);
2400b438:	ab04      	add	r3, sp, #16
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
2400b43a:	0936      	lsrs	r6, r6, #4
  (void)SDMMC_Init(hsd->Instance, Init);
2400b43c:	9608      	str	r6, [sp, #32]
2400b43e:	e892 0003 	ldmia.w	r2, {r0, r1}
2400b442:	e88d 0003 	stmia.w	sp, {r0, r1}
2400b446:	cb0e      	ldmia	r3, {r1, r2, r3}
2400b448:	6820      	ldr	r0, [r4, #0]
2400b44a:	f001 f881 	bl	2400c550 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
2400b44e:	6820      	ldr	r0, [r4, #0]
2400b450:	f001 f8a4 	bl	2400c59c <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
2400b454:	4b85      	ldr	r3, [pc, #532]	; (2400b66c <HAL_SD_InitCard+0x270>)
2400b456:	429d      	cmp	r5, r3
2400b458:	d902      	bls.n	2400b460 <HAL_SD_InitCard+0x64>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
2400b45a:	0076      	lsls	r6, r6, #1
2400b45c:	fbb5 f5f6 	udiv	r5, r5, r6
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
2400b460:	4883      	ldr	r0, [pc, #524]	; (2400b670 <HAL_SD_InitCard+0x274>)
2400b462:	fbb0 f0f5 	udiv	r0, r0, r5
2400b466:	3001      	adds	r0, #1
2400b468:	f7f9 ff16 	bl	24005298 <HAL_Delay>
  __IO uint32_t count = 0U;
2400b46c:	2300      	movs	r3, #0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
2400b46e:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
2400b470:	9303      	str	r3, [sp, #12]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
2400b472:	f001 fdd5 	bl	2400d020 <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
2400b476:	4605      	mov	r5, r0
2400b478:	b140      	cbz	r0, 2400b48c <HAL_SD_InitCard+0x90>
    hsd->State = HAL_SD_STATE_READY;
2400b47a:	2601      	movs	r6, #1
2400b47c:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
}
2400b480:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
2400b482:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400b484:	432b      	orrs	r3, r5
2400b486:	6363      	str	r3, [r4, #52]	; 0x34
}
2400b488:	b015      	add	sp, #84	; 0x54
2400b48a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
2400b48c:	6820      	ldr	r0, [r4, #0]
2400b48e:	f001 fdf3 	bl	2400d078 <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
2400b492:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
2400b496:	f000 80ce 	beq.w	2400b636 <HAL_SD_InitCard+0x23a>
    hsd->SdCard.CardVersion = CARD_V2_X;
2400b49a:	2301      	movs	r3, #1
2400b49c:	63e3      	str	r3, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
2400b49e:	2100      	movs	r1, #0
2400b4a0:	6820      	ldr	r0, [r4, #0]
2400b4a2:	f001 fe29 	bl	2400d0f8 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400b4a6:	bb08      	cbnz	r0, 2400b4ec <HAL_SD_InitCard+0xf0>
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
2400b4a8:	9b03      	ldr	r3, [sp, #12]
2400b4aa:	f64f 76fe 	movw	r6, #65534	; 0xfffe
2400b4ae:	42b3      	cmp	r3, r6
2400b4b0:	f200 80d3 	bhi.w	2400b65a <HAL_SD_InitCard+0x25e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
2400b4b4:	4f6f      	ldr	r7, [pc, #444]	; (2400b674 <HAL_SD_InitCard+0x278>)
2400b4b6:	e010      	b.n	2400b4da <HAL_SD_InitCard+0xde>
2400b4b8:	6820      	ldr	r0, [r4, #0]
2400b4ba:	f001 fecb 	bl	2400d254 <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400b4be:	4601      	mov	r1, r0
2400b4c0:	b9a0      	cbnz	r0, 2400b4ec <HAL_SD_InitCard+0xf0>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400b4c2:	6820      	ldr	r0, [r4, #0]
2400b4c4:	f001 f876 	bl	2400c5b4 <SDMMC_GetResponse>
    count++;
2400b4c8:	9b03      	ldr	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
2400b4ca:	2800      	cmp	r0, #0
    count++;
2400b4cc:	f103 0301 	add.w	r3, r3, #1
2400b4d0:	9303      	str	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
2400b4d2:	9b03      	ldr	r3, [sp, #12]
2400b4d4:	db0d      	blt.n	2400b4f2 <HAL_SD_InitCard+0xf6>
2400b4d6:	42b3      	cmp	r3, r6
2400b4d8:	d80b      	bhi.n	2400b4f2 <HAL_SD_InitCard+0xf6>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
2400b4da:	2100      	movs	r1, #0
2400b4dc:	6820      	ldr	r0, [r4, #0]
2400b4de:	f001 fe0b 	bl	2400d0f8 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
2400b4e2:	4639      	mov	r1, r7
    if (errorstate != HAL_SD_ERROR_NONE)
2400b4e4:	2800      	cmp	r0, #0
2400b4e6:	d0e7      	beq.n	2400b4b8 <HAL_SD_InitCard+0xbc>
2400b4e8:	4605      	mov	r5, r0
2400b4ea:	e7c6      	b.n	2400b47a <HAL_SD_InitCard+0x7e>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400b4ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
2400b4f0:	e7c3      	b.n	2400b47a <HAL_SD_InitCard+0x7e>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
2400b4f2:	9a03      	ldr	r2, [sp, #12]
2400b4f4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
2400b4f8:	429a      	cmp	r2, r3
2400b4fa:	f200 80b2 	bhi.w	2400b662 <HAL_SD_InitCard+0x266>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
2400b4fe:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  hsd->SdCard.CardType = CARD_SDSC;
2400b502:	f04f 0300 	mov.w	r3, #0
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
2400b506:	bf18      	it	ne
2400b508:	2501      	movne	r5, #1
  hsd->SdCard.CardType = CARD_SDSC;
2400b50a:	63a3      	str	r3, [r4, #56]	; 0x38
  uint16_t sd_rca = 0U;
2400b50c:	2300      	movs	r3, #0
2400b50e:	63a5      	str	r5, [r4, #56]	; 0x38
2400b510:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint32_t tickstart = HAL_GetTick();
2400b514:	f7f9 feba 	bl	2400528c <HAL_GetTick>
2400b518:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
2400b51a:	6820      	ldr	r0, [r4, #0]
2400b51c:	f001 f846 	bl	2400c5ac <SDMMC_GetPowerState>
2400b520:	b350      	cbz	r0, 2400b578 <HAL_SD_InitCard+0x17c>
  if (hsd->SdCard.CardType != CARD_SECURED)
2400b522:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400b524:	2b03      	cmp	r3, #3
2400b526:	d132      	bne.n	2400b58e <HAL_SD_InitCard+0x192>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
2400b528:	2104      	movs	r1, #4
2400b52a:	6820      	ldr	r0, [r4, #0]
2400b52c:	f001 f842 	bl	2400c5b4 <SDMMC_GetResponse>
2400b530:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
2400b532:	a909      	add	r1, sp, #36	; 0x24
2400b534:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
2400b536:	0d1b      	lsrs	r3, r3, #20
2400b538:	6423      	str	r3, [r4, #64]	; 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
2400b53a:	f7ff fe7b 	bl	2400b234 <HAL_SD_GetCardCSD>
2400b53e:	4606      	mov	r6, r0
2400b540:	2800      	cmp	r0, #0
2400b542:	f040 8084 	bne.w	2400b64e <HAL_SD_InitCard+0x252>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
2400b546:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400b548:	6820      	ldr	r0, [r4, #0]
2400b54a:	0409      	lsls	r1, r1, #16
2400b54c:	f001 fcba 	bl	2400cec4 <SDMMC_CmdSelDesel>
  if (errorstate != HAL_SD_ERROR_NONE)
2400b550:	b9a0      	cbnz	r0, 2400b57c <HAL_SD_InitCard+0x180>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
2400b552:	f44f 7100 	mov.w	r1, #512	; 0x200
2400b556:	6820      	ldr	r0, [r4, #0]
2400b558:	f001 f846 	bl	2400c5e8 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400b55c:	2800      	cmp	r0, #0
2400b55e:	f43f af62 	beq.w	2400b426 <HAL_SD_InitCard+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b562:	6822      	ldr	r2, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
2400b564:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b566:	4944      	ldr	r1, [pc, #272]	; (2400b678 <HAL_SD_InitCard+0x27c>)
    return HAL_ERROR;
2400b568:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b56a:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
2400b56c:	6b62      	ldr	r2, [r4, #52]	; 0x34
2400b56e:	4310      	orrs	r0, r2
2400b570:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
2400b572:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    return HAL_ERROR;
2400b576:	e756      	b.n	2400b426 <HAL_SD_InitCard+0x2a>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
2400b578:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
2400b57c:	2601      	movs	r6, #1
2400b57e:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
2400b582:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400b584:	4303      	orrs	r3, r0
}
2400b586:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
2400b588:	6363      	str	r3, [r4, #52]	; 0x34
}
2400b58a:	b015      	add	sp, #84	; 0x54
2400b58c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
2400b58e:	6820      	ldr	r0, [r4, #0]
2400b590:	f001 fff2 	bl	2400d578 <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
2400b594:	2800      	cmp	r0, #0
2400b596:	d1f1      	bne.n	2400b57c <HAL_SD_InitCard+0x180>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400b598:	4601      	mov	r1, r0
2400b59a:	6820      	ldr	r0, [r4, #0]
2400b59c:	f001 f80a 	bl	2400c5b4 <SDMMC_GetResponse>
2400b5a0:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400b5a2:	2104      	movs	r1, #4
2400b5a4:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400b5a6:	66e3      	str	r3, [r4, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400b5a8:	f001 f804 	bl	2400c5b4 <SDMMC_GetResponse>
2400b5ac:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400b5ae:	2108      	movs	r1, #8
2400b5b0:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400b5b2:	6723      	str	r3, [r4, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400b5b4:	f000 fffe 	bl	2400c5b4 <SDMMC_GetResponse>
2400b5b8:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400b5ba:	210c      	movs	r1, #12
2400b5bc:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400b5be:	6763      	str	r3, [r4, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400b5c0:	f000 fff8 	bl	2400c5b4 <SDMMC_GetResponse>
  if (hsd->SdCard.CardType != CARD_SECURED)
2400b5c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400b5c6:	67a0      	str	r0, [r4, #120]	; 0x78
  if (hsd->SdCard.CardType != CARD_SECURED)
2400b5c8:	2b03      	cmp	r3, #3
2400b5ca:	d0ad      	beq.n	2400b528 <HAL_SD_InitCard+0x12c>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
2400b5cc:	f241 3687 	movw	r6, #4999	; 0x1387
2400b5d0:	e009      	b.n	2400b5e6 <HAL_SD_InitCard+0x1ea>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
2400b5d2:	6820      	ldr	r0, [r4, #0]
2400b5d4:	f002 f84e 	bl	2400d674 <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
2400b5d8:	2800      	cmp	r0, #0
2400b5da:	d1cf      	bne.n	2400b57c <HAL_SD_InitCard+0x180>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
2400b5dc:	f7f9 fe56 	bl	2400528c <HAL_GetTick>
2400b5e0:	1b43      	subs	r3, r0, r5
2400b5e2:	42b3      	cmp	r3, r6
2400b5e4:	d836      	bhi.n	2400b654 <HAL_SD_InitCard+0x258>
    while (sd_rca == 0U)
2400b5e6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
2400b5ea:	f10d 010a 	add.w	r1, sp, #10
    while (sd_rca == 0U)
2400b5ee:	2b00      	cmp	r3, #0
2400b5f0:	d0ef      	beq.n	2400b5d2 <HAL_SD_InitCard+0x1d6>
  if (hsd->SdCard.CardType != CARD_SECURED)
2400b5f2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
2400b5f4:	2a03      	cmp	r2, #3
2400b5f6:	d097      	beq.n	2400b528 <HAL_SD_InitCard+0x12c>
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400b5f8:	0419      	lsls	r1, r3, #16
2400b5fa:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
2400b5fc:	6463      	str	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400b5fe:	f001 fff9 	bl	2400d5f4 <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
2400b602:	2800      	cmp	r0, #0
2400b604:	d1ba      	bne.n	2400b57c <HAL_SD_InitCard+0x180>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400b606:	4601      	mov	r1, r0
2400b608:	6820      	ldr	r0, [r4, #0]
2400b60a:	f000 ffd3 	bl	2400c5b4 <SDMMC_GetResponse>
2400b60e:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400b610:	2104      	movs	r1, #4
2400b612:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400b614:	65e3      	str	r3, [r4, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400b616:	f000 ffcd 	bl	2400c5b4 <SDMMC_GetResponse>
2400b61a:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400b61c:	2108      	movs	r1, #8
2400b61e:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400b620:	6623      	str	r3, [r4, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400b622:	f000 ffc7 	bl	2400c5b4 <SDMMC_GetResponse>
2400b626:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400b628:	210c      	movs	r1, #12
2400b62a:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400b62c:	6663      	str	r3, [r4, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400b62e:	f000 ffc1 	bl	2400c5b4 <SDMMC_GetResponse>
2400b632:	66a0      	str	r0, [r4, #104]	; 0x68
2400b634:	e778      	b.n	2400b528 <HAL_SD_InitCard+0x12c>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
2400b636:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
2400b638:	63e5      	str	r5, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
2400b63a:	f001 fcf1 	bl	2400d020 <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
2400b63e:	2800      	cmp	r0, #0
2400b640:	f47f af52 	bne.w	2400b4e8 <HAL_SD_InitCard+0xec>
  if (hsd->SdCard.CardVersion == CARD_V2_X)
2400b644:	6be3      	ldr	r3, [r4, #60]	; 0x3c
2400b646:	2b01      	cmp	r3, #1
2400b648:	f47f af2e 	bne.w	2400b4a8 <HAL_SD_InitCard+0xac>
2400b64c:	e727      	b.n	2400b49e <HAL_SD_InitCard+0xa2>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400b64e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
2400b652:	e793      	b.n	2400b57c <HAL_SD_InitCard+0x180>
        return HAL_SD_ERROR_TIMEOUT;
2400b654:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  if (errorstate != HAL_SD_ERROR_NONE)
2400b658:	e790      	b.n	2400b57c <HAL_SD_InitCard+0x180>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
2400b65a:	9b03      	ldr	r3, [sp, #12]
2400b65c:	42b3      	cmp	r3, r6
2400b65e:	f67f af55 	bls.w	2400b50c <HAL_SD_InitCard+0x110>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
2400b662:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
2400b666:	e708      	b.n	2400b47a <HAL_SD_InitCard+0x7e>
2400b668:	014f8b59 	.word	0x014f8b59
2400b66c:	000c34ff 	.word	0x000c34ff
2400b670:	00012110 	.word	0x00012110
2400b674:	c1100000 	.word	0xc1100000
2400b678:	1fe00fff 	.word	0x1fe00fff

2400b67c <HAL_SD_GetCardInfo>:
{
2400b67c:	4603      	mov	r3, r0
}
2400b67e:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
2400b680:	6b9a      	ldr	r2, [r3, #56]	; 0x38
2400b682:	600a      	str	r2, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
2400b684:	6bda      	ldr	r2, [r3, #60]	; 0x3c
2400b686:	604a      	str	r2, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
2400b688:	6c1a      	ldr	r2, [r3, #64]	; 0x40
2400b68a:	608a      	str	r2, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
2400b68c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
2400b68e:	60ca      	str	r2, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
2400b690:	6c9a      	ldr	r2, [r3, #72]	; 0x48
2400b692:	610a      	str	r2, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
2400b694:	6cda      	ldr	r2, [r3, #76]	; 0x4c
2400b696:	614a      	str	r2, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
2400b698:	6d1a      	ldr	r2, [r3, #80]	; 0x50
2400b69a:	618a      	str	r2, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
2400b69c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2400b69e:	61cb      	str	r3, [r1, #28]
}
2400b6a0:	4770      	bx	lr
2400b6a2:	bf00      	nop

2400b6a4 <HAL_SD_ConfigWideBusOperation>:
{
2400b6a4:	b530      	push	{r4, r5, lr}
  hsd->State = HAL_SD_STATE_BUSY;
2400b6a6:	2203      	movs	r2, #3
  if (hsd->SdCard.CardType != CARD_SECURED)
2400b6a8:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
2400b6aa:	b089      	sub	sp, #36	; 0x24
2400b6ac:	4604      	mov	r4, r0
  if (hsd->SdCard.CardType != CARD_SECURED)
2400b6ae:	4293      	cmp	r3, r2
{
2400b6b0:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
2400b6b2:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
2400b6b6:	d040      	beq.n	2400b73a <HAL_SD_ConfigWideBusOperation+0x96>
    if (WideMode == SDMMC_BUS_WIDE_8B)
2400b6b8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
2400b6bc:	d03d      	beq.n	2400b73a <HAL_SD_ConfigWideBusOperation+0x96>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
2400b6be:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
2400b6c2:	d07d      	beq.n	2400b7c0 <HAL_SD_ConfigWideBusOperation+0x11c>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
2400b6c4:	2900      	cmp	r1, #0
2400b6c6:	d05c      	beq.n	2400b782 <HAL_SD_ConfigWideBusOperation+0xde>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400b6c8:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400b6ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
2400b6ce:	6343      	str	r3, [r0, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
2400b6d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400b6d2:	2b00      	cmp	r3, #0
2400b6d4:	d138      	bne.n	2400b748 <HAL_SD_ConfigWideBusOperation+0xa4>
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
2400b6d6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
2400b6da:	2100      	movs	r1, #0
2400b6dc:	f7fe fc06 	bl	24009eec <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
2400b6e0:	2800      	cmp	r0, #0
2400b6e2:	d048      	beq.n	2400b776 <HAL_SD_ConfigWideBusOperation+0xd2>
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
2400b6e4:	6922      	ldr	r2, [r4, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400b6e6:	4b50      	ldr	r3, [pc, #320]	; (2400b828 <HAL_SD_ConfigWideBusOperation+0x184>)
      Init.ClockEdge           = hsd->Init.ClockEdge;
2400b6e8:	6861      	ldr	r1, [r4, #4]
      Init.BusWide             = WideMode;
2400b6ea:	9504      	str	r5, [sp, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
2400b6ec:	9205      	str	r2, [sp, #20]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400b6ee:	fba3 5300 	umull	r5, r3, r3, r0
2400b6f2:	6962      	ldr	r2, [r4, #20]
      Init.ClockEdge           = hsd->Init.ClockEdge;
2400b6f4:	9102      	str	r1, [sp, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400b6f6:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
2400b6fa:	68a1      	ldr	r1, [r4, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400b6fc:	ea4f 6513 	mov.w	r5, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
2400b700:	9103      	str	r1, [sp, #12]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400b702:	d20e      	bcs.n	2400b722 <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
2400b704:	6da1      	ldr	r1, [r4, #88]	; 0x58
2400b706:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
2400b70a:	d00a      	beq.n	2400b722 <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
2400b70c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
2400b710:	d078      	beq.n	2400b804 <HAL_SD_ConfigWideBusOperation+0x160>
        if (hsd->Init.ClockDiv == 0U)
2400b712:	b112      	cbz	r2, 2400b71a <HAL_SD_ConfigWideBusOperation+0x76>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
2400b714:	0053      	lsls	r3, r2, #1
2400b716:	fbb0 f0f3 	udiv	r0, r0, r3
2400b71a:	4b44      	ldr	r3, [pc, #272]	; (2400b82c <HAL_SD_ConfigWideBusOperation+0x188>)
2400b71c:	4298      	cmp	r0, r3
2400b71e:	bf88      	it	hi
2400b720:	462a      	movhi	r2, r5
      (void)SDMMC_Init(hsd->Instance, Init);
2400b722:	a905      	add	r1, sp, #20
        Init.ClockDiv = hsd->Init.ClockDiv;
2400b724:	9206      	str	r2, [sp, #24]
      (void)SDMMC_Init(hsd->Instance, Init);
2400b726:	ab02      	add	r3, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
2400b728:	2500      	movs	r5, #0
      (void)SDMMC_Init(hsd->Instance, Init);
2400b72a:	c903      	ldmia	r1, {r0, r1}
2400b72c:	e88d 0003 	stmia.w	sp, {r0, r1}
2400b730:	cb0e      	ldmia	r3, {r1, r2, r3}
2400b732:	6820      	ldr	r0, [r4, #0]
2400b734:	f000 ff0c 	bl	2400c550 <SDMMC_Init>
2400b738:	e00a      	b.n	2400b750 <HAL_SD_ConfigWideBusOperation+0xac>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400b73a:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400b73c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2400b740:	6363      	str	r3, [r4, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
2400b742:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400b744:	2b00      	cmp	r3, #0
2400b746:	d0c6      	beq.n	2400b6d6 <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b748:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
2400b74a:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b74c:	4a38      	ldr	r2, [pc, #224]	; (2400b830 <HAL_SD_ConfigWideBusOperation+0x18c>)
2400b74e:	639a      	str	r2, [r3, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
2400b750:	f44f 7100 	mov.w	r1, #512	; 0x200
2400b754:	6820      	ldr	r0, [r4, #0]
2400b756:	f000 ff47 	bl	2400c5e8 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400b75a:	b130      	cbz	r0, 2400b76a <HAL_SD_ConfigWideBusOperation+0xc6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b75c:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
2400b75e:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b760:	4a33      	ldr	r2, [pc, #204]	; (2400b830 <HAL_SD_ConfigWideBusOperation+0x18c>)
2400b762:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
2400b764:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400b766:	4303      	orrs	r3, r0
2400b768:	6363      	str	r3, [r4, #52]	; 0x34
  hsd->State = HAL_SD_STATE_READY;
2400b76a:	2301      	movs	r3, #1
}
2400b76c:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
2400b76e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
2400b772:	b009      	add	sp, #36	; 0x24
2400b774:	bd30      	pop	{r4, r5, pc}
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
2400b776:	6b63      	ldr	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
2400b778:	2501      	movs	r5, #1
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
2400b77a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
2400b77e:	6363      	str	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
2400b780:	e7e6      	b.n	2400b750 <HAL_SD_ConfigWideBusOperation+0xac>
  uint32_t scr[2U] = {0UL, 0UL};
2400b782:	2200      	movs	r2, #0
2400b784:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400b786:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
2400b788:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400b78c:	f000 ff12 	bl	2400c5b4 <SDMMC_GetResponse>
2400b790:	0182      	lsls	r2, r0, #6
2400b792:	d434      	bmi.n	2400b7fe <HAL_SD_ConfigWideBusOperation+0x15a>
  errorstate = SD_FindSCR(hsd, scr);
2400b794:	a902      	add	r1, sp, #8
2400b796:	4620      	mov	r0, r4
2400b798:	f7ff fafc 	bl	2400ad94 <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
2400b79c:	b960      	cbnz	r0, 2400b7b8 <HAL_SD_ConfigWideBusOperation+0x114>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
2400b79e:	9b03      	ldr	r3, [sp, #12]
2400b7a0:	03db      	lsls	r3, r3, #15
2400b7a2:	d535      	bpl.n	2400b810 <HAL_SD_ConfigWideBusOperation+0x16c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400b7a4:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400b7a6:	6820      	ldr	r0, [r4, #0]
2400b7a8:	0409      	lsls	r1, r1, #16
2400b7aa:	f001 fca5 	bl	2400d0f8 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400b7ae:	b918      	cbnz	r0, 2400b7b8 <HAL_SD_ConfigWideBusOperation+0x114>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
2400b7b0:	4601      	mov	r1, r0
2400b7b2:	6820      	ldr	r0, [r4, #0]
2400b7b4:	f001 fd8a 	bl	2400d2cc <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
2400b7b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400b7ba:	4303      	orrs	r3, r0
2400b7bc:	6363      	str	r3, [r4, #52]	; 0x34
2400b7be:	e7c0      	b.n	2400b742 <HAL_SD_ConfigWideBusOperation+0x9e>
  uint32_t scr[2U] = {0UL, 0UL};
2400b7c0:	2200      	movs	r2, #0
2400b7c2:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400b7c4:	2100      	movs	r1, #0
2400b7c6:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
2400b7c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400b7cc:	f000 fef2 	bl	2400c5b4 <SDMMC_GetResponse>
2400b7d0:	0180      	lsls	r0, r0, #6
2400b7d2:	d414      	bmi.n	2400b7fe <HAL_SD_ConfigWideBusOperation+0x15a>
  errorstate = SD_FindSCR(hsd, scr);
2400b7d4:	a902      	add	r1, sp, #8
2400b7d6:	4620      	mov	r0, r4
2400b7d8:	f7ff fadc 	bl	2400ad94 <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
2400b7dc:	2800      	cmp	r0, #0
2400b7de:	d1eb      	bne.n	2400b7b8 <HAL_SD_ConfigWideBusOperation+0x114>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
2400b7e0:	9b03      	ldr	r3, [sp, #12]
2400b7e2:	0359      	lsls	r1, r3, #13
2400b7e4:	d514      	bpl.n	2400b810 <HAL_SD_ConfigWideBusOperation+0x16c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400b7e6:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400b7e8:	6820      	ldr	r0, [r4, #0]
2400b7ea:	0409      	lsls	r1, r1, #16
2400b7ec:	f001 fc84 	bl	2400d0f8 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400b7f0:	2800      	cmp	r0, #0
2400b7f2:	d1e1      	bne.n	2400b7b8 <HAL_SD_ConfigWideBusOperation+0x114>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
2400b7f4:	2102      	movs	r1, #2
2400b7f6:	6820      	ldr	r0, [r4, #0]
2400b7f8:	f001 fd68 	bl	2400d2cc <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
2400b7fc:	e7dc      	b.n	2400b7b8 <HAL_SD_ConfigWideBusOperation+0x114>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
2400b7fe:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400b802:	e7d9      	b.n	2400b7b8 <HAL_SD_ConfigWideBusOperation+0x114>
        if (hsd->Init.ClockDiv == 0U)
2400b804:	b93a      	cbnz	r2, 2400b816 <HAL_SD_ConfigWideBusOperation+0x172>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
2400b806:	490b      	ldr	r1, [pc, #44]	; (2400b834 <HAL_SD_ConfigWideBusOperation+0x190>)
2400b808:	4288      	cmp	r0, r1
2400b80a:	d98a      	bls.n	2400b722 <HAL_SD_ConfigWideBusOperation+0x7e>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
2400b80c:	0e5a      	lsrs	r2, r3, #25
2400b80e:	e788      	b.n	2400b722 <HAL_SD_ConfigWideBusOperation+0x7e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
2400b810:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
2400b814:	e7d0      	b.n	2400b7b8 <HAL_SD_ConfigWideBusOperation+0x114>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
2400b816:	0051      	lsls	r1, r2, #1
2400b818:	fbb0 f1f1 	udiv	r1, r0, r1
2400b81c:	4805      	ldr	r0, [pc, #20]	; (2400b834 <HAL_SD_ConfigWideBusOperation+0x190>)
2400b81e:	4281      	cmp	r1, r0
2400b820:	f67f af7f 	bls.w	2400b722 <HAL_SD_ConfigWideBusOperation+0x7e>
2400b824:	e7f2      	b.n	2400b80c <HAL_SD_ConfigWideBusOperation+0x168>
2400b826:	bf00      	nop
2400b828:	55e63b89 	.word	0x55e63b89
2400b82c:	017d7840 	.word	0x017d7840
2400b830:	1fe00fff 	.word	0x1fe00fff
2400b834:	02faf080 	.word	0x02faf080

2400b838 <HAL_SD_Init>:
{
2400b838:	b5f0      	push	{r4, r5, r6, r7, lr}
2400b83a:	b087      	sub	sp, #28
  if (hsd == NULL)
2400b83c:	2800      	cmp	r0, #0
2400b83e:	d045      	beq.n	2400b8cc <HAL_SD_Init+0x94>
  if (hsd->State == HAL_SD_STATE_RESET)
2400b840:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
2400b844:	4604      	mov	r4, r0
2400b846:	f003 02ff 	and.w	r2, r3, #255	; 0xff
2400b84a:	2b00      	cmp	r3, #0
2400b84c:	d042      	beq.n	2400b8d4 <HAL_SD_Init+0x9c>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
2400b84e:	2304      	movs	r3, #4
  if (HAL_SD_InitCard(hsd) != HAL_OK)
2400b850:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_PROGRAMMING;
2400b852:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
2400b856:	f7ff fdd1 	bl	2400b3fc <HAL_SD_InitCard>
2400b85a:	2800      	cmp	r0, #0
2400b85c:	d136      	bne.n	2400b8cc <HAL_SD_Init+0x94>
  if (hsd->State == HAL_SD_STATE_BUSY)
2400b85e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
2400b862:	2b03      	cmp	r3, #3
2400b864:	d032      	beq.n	2400b8cc <HAL_SD_Init+0x94>
2400b866:	a901      	add	r1, sp, #4
2400b868:	4620      	mov	r0, r4
2400b86a:	f7ff f9cd 	bl	2400ac08 <HAL_SD_GetCardStatus.part.0>
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
2400b86e:	bb68      	cbnz	r0, 2400b8cc <HAL_SD_Init+0x94>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400b870:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  speedgrade = CardStatus.UhsSpeedGrade;
2400b872:	f89d 3014 	ldrb.w	r3, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400b876:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
2400b878:	f89d 2015 	ldrb.w	r2, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
2400b87c:	b2db      	uxtb	r3, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
2400b87e:	b2d2      	uxtb	r2, r2
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400b880:	d02c      	beq.n	2400b8dc <HAL_SD_Init+0xa4>
2400b882:	4603      	mov	r3, r0
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
2400b884:	68e1      	ldr	r1, [r4, #12]
2400b886:	4620      	mov	r0, r4
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
2400b888:	65a3      	str	r3, [r4, #88]	; 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
2400b88a:	f7ff ff0b 	bl	2400b6a4 <HAL_SD_ConfigWideBusOperation>
2400b88e:	4606      	mov	r6, r0
2400b890:	b9e0      	cbnz	r0, 2400b8cc <HAL_SD_Init+0x94>
  tickstart = HAL_GetTick();
2400b892:	f7f9 fcfb 	bl	2400528c <HAL_GetTick>
2400b896:	4607      	mov	r7, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
2400b898:	e00c      	b.n	2400b8b4 <HAL_SD_Init+0x7c>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400b89a:	6820      	ldr	r0, [r4, #0]
2400b89c:	4629      	mov	r1, r5
2400b89e:	f000 fe89 	bl	2400c5b4 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
2400b8a2:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
2400b8a6:	2804      	cmp	r0, #4
2400b8a8:	d01f      	beq.n	2400b8ea <HAL_SD_Init+0xb2>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
2400b8aa:	f7f9 fcef 	bl	2400528c <HAL_GetTick>
2400b8ae:	1bc3      	subs	r3, r0, r7
2400b8b0:	3301      	adds	r3, #1
2400b8b2:	d020      	beq.n	2400b8f6 <HAL_SD_Init+0xbe>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400b8b4:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400b8b6:	6820      	ldr	r0, [r4, #0]
2400b8b8:	0409      	lsls	r1, r1, #16
2400b8ba:	f001 ff3b 	bl	2400d734 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
2400b8be:	4605      	mov	r5, r0
2400b8c0:	2800      	cmp	r0, #0
2400b8c2:	d0ea      	beq.n	2400b89a <HAL_SD_Init+0x62>
    hsd->ErrorCode |= errorstate;
2400b8c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400b8c6:	4303      	orrs	r3, r0
2400b8c8:	6363      	str	r3, [r4, #52]	; 0x34
  return (HAL_SD_CardStateTypeDef)cardstate;
2400b8ca:	e7ee      	b.n	2400b8aa <HAL_SD_Init+0x72>
    return HAL_ERROR;
2400b8cc:	2601      	movs	r6, #1
}
2400b8ce:	4630      	mov	r0, r6
2400b8d0:	b007      	add	sp, #28
2400b8d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->Lock = HAL_UNLOCKED;
2400b8d4:	7602      	strb	r2, [r0, #24]
    HAL_SD_MspInit(hsd);
2400b8d6:	f7f8 fbe5 	bl	240040a4 <HAL_SD_MspInit>
2400b8da:	e7b8      	b.n	2400b84e <HAL_SD_Init+0x16>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400b8dc:	4313      	orrs	r3, r2
2400b8de:	bf0c      	ite	eq
2400b8e0:	f44f 7380 	moveq.w	r3, #256	; 0x100
2400b8e4:	f44f 7300 	movne.w	r3, #512	; 0x200
2400b8e8:	e7cc      	b.n	2400b884 <HAL_SD_Init+0x4c>
  hsd->State = HAL_SD_STATE_READY;
2400b8ea:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400b8ec:	6365      	str	r5, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
2400b8ee:	62e5      	str	r5, [r4, #44]	; 0x2c
  hsd->State = HAL_SD_STATE_READY;
2400b8f0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return HAL_OK;
2400b8f4:	e7eb      	b.n	2400b8ce <HAL_SD_Init+0x96>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
2400b8f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State = HAL_SD_STATE_READY;
2400b8fa:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
2400b8fc:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
2400b8fe:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400b900:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      return HAL_TIMEOUT;
2400b904:	e7e3      	b.n	2400b8ce <HAL_SD_Init+0x96>
2400b906:	bf00      	nop

2400b908 <HAL_SD_GetCardState>:
{
2400b908:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400b90a:	6c41      	ldr	r1, [r0, #68]	; 0x44
{
2400b90c:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400b90e:	6800      	ldr	r0, [r0, #0]
2400b910:	0409      	lsls	r1, r1, #16
2400b912:	f001 ff0f 	bl	2400d734 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
2400b916:	4601      	mov	r1, r0
2400b918:	b120      	cbz	r0, 2400b924 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
2400b91a:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400b91c:	2000      	movs	r0, #0
2400b91e:	430b      	orrs	r3, r1
2400b920:	6363      	str	r3, [r4, #52]	; 0x34
}
2400b922:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400b924:	6820      	ldr	r0, [r4, #0]
2400b926:	f000 fe45 	bl	2400c5b4 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
2400b92a:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
2400b92e:	bd10      	pop	{r4, pc}

2400b930 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
2400b930:	b318      	cbz	r0, 2400b97a <HAL_SDRAM_Init+0x4a>
{
2400b932:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
2400b934:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
2400b938:	4604      	mov	r4, r0
2400b93a:	460d      	mov	r5, r1
2400b93c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
2400b940:	b1b3      	cbz	r3, 2400b970 <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
2400b942:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
2400b944:	2302      	movs	r3, #2
2400b946:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
2400b94a:	f851 0b04 	ldr.w	r0, [r1], #4
2400b94e:	f000 fd4d 	bl	2400c3ec <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
2400b952:	6862      	ldr	r2, [r4, #4]
2400b954:	4629      	mov	r1, r5
2400b956:	6820      	ldr	r0, [r4, #0]
2400b958:	f000 fd86 	bl	2400c468 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
2400b95c:	4a08      	ldr	r2, [pc, #32]	; (2400b980 <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
2400b95e:	2101      	movs	r1, #1

  return HAL_OK;
2400b960:	2000      	movs	r0, #0
  __FMC_ENABLE();
2400b962:	6813      	ldr	r3, [r2, #0]
2400b964:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
2400b968:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
2400b96a:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
2400b96e:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
2400b970:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
2400b974:	f7f6 f812 	bl	2400199c <HAL_SDRAM_MspInit>
2400b978:	e7e3      	b.n	2400b942 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
2400b97a:	2001      	movs	r0, #1
}
2400b97c:	4770      	bx	lr
2400b97e:	bf00      	nop
2400b980:	52004000 	.word	0x52004000

2400b984 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
2400b984:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
2400b986:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
2400b98a:	4604      	mov	r4, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
2400b98c:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
2400b98e:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
2400b990:	d004      	beq.n	2400b99c <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
2400b992:	f000 06fb 	and.w	r6, r0, #251	; 0xfb
2400b996:	2e01      	cmp	r6, #1
2400b998:	d001      	beq.n	2400b99e <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
2400b99a:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
2400b99c:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400b99e:	2302      	movs	r3, #2
2400b9a0:	460d      	mov	r5, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
2400b9a2:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400b9a4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
2400b9a8:	f000 fdac 	bl	2400c504 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
2400b9ac:	682b      	ldr	r3, [r5, #0]
2400b9ae:	2b02      	cmp	r3, #2
2400b9b0:	d003      	beq.n	2400b9ba <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
2400b9b2:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
2400b9b4:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
2400b9b8:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
2400b9ba:	2305      	movs	r3, #5
  return HAL_OK;
2400b9bc:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
2400b9be:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
2400b9c2:	bd70      	pop	{r4, r5, r6, pc}

2400b9c4 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
2400b9c4:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
2400b9c6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
2400b9ca:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
2400b9cc:	2b02      	cmp	r3, #2
2400b9ce:	b2d8      	uxtb	r0, r3
2400b9d0:	d005      	beq.n	2400b9de <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
2400b9d2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
2400b9d6:	2b01      	cmp	r3, #1
2400b9d8:	b2dd      	uxtb	r5, r3
2400b9da:	d001      	beq.n	2400b9e0 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
2400b9dc:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
2400b9de:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400b9e0:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
2400b9e2:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400b9e4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
2400b9e8:	f000 fda4 	bl	2400c534 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
2400b9ec:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
2400b9ee:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
2400b9f2:	bd38      	pop	{r3, r4, r5, pc}

2400b9f4 <SPI_AbortTransfer>:
  * @retval None
  */
static void SPI_AbortTransfer(SPI_HandleTypeDef *hspi)
{
  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
2400b9f4:	6801      	ldr	r1, [r0, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
2400b9f6:	4b1b      	ldr	r3, [pc, #108]	; (2400ba64 <SPI_AbortTransfer+0x70>)
  __HAL_SPI_DISABLE(hspi);
2400b9f8:	680a      	ldr	r2, [r1, #0]
2400b9fa:	f022 0201 	bic.w	r2, r2, #1
2400b9fe:	600a      	str	r2, [r1, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
2400ba00:	6802      	ldr	r2, [r0, #0]
2400ba02:	6911      	ldr	r1, [r2, #16]
2400ba04:	400b      	ands	r3, r1
2400ba06:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Clear the Status flags in the SR register */
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
2400ba08:	6802      	ldr	r2, [r0, #0]
2400ba0a:	6993      	ldr	r3, [r2, #24]
2400ba0c:	f043 0308 	orr.w	r3, r3, #8
2400ba10:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2400ba12:	6802      	ldr	r2, [r0, #0]
2400ba14:	6993      	ldr	r3, [r2, #24]
2400ba16:	f043 0310 	orr.w	r3, r3, #16
2400ba1a:	6193      	str	r3, [r2, #24]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400ba1c:	6802      	ldr	r2, [r0, #0]
2400ba1e:	6893      	ldr	r3, [r2, #8]
2400ba20:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
2400ba24:	6093      	str	r3, [r2, #8]

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400ba26:	6802      	ldr	r2, [r0, #0]
2400ba28:	6993      	ldr	r3, [r2, #24]
2400ba2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400ba2e:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400ba30:	6802      	ldr	r2, [r0, #0]
2400ba32:	6993      	ldr	r3, [r2, #24]
2400ba34:	f043 0320 	orr.w	r3, r3, #32
2400ba38:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
2400ba3a:	6802      	ldr	r2, [r0, #0]
2400ba3c:	6993      	ldr	r3, [r2, #24]
2400ba3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400ba42:	6193      	str	r3, [r2, #24]

#if (USE_SPI_CRC != 0U)
  __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
#endif /* USE_SPI_CRC */

  hspi->TxXferCount = (uint16_t)0UL;
2400ba44:	2200      	movs	r2, #0
  __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400ba46:	6801      	ldr	r1, [r0, #0]
2400ba48:	698b      	ldr	r3, [r1, #24]
2400ba4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400ba4e:	618b      	str	r3, [r1, #24]
  __HAL_SPI_CLEAR_SUSPFLAG(hspi);
2400ba50:	6801      	ldr	r1, [r0, #0]
2400ba52:	698b      	ldr	r3, [r1, #24]
2400ba54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400ba58:	618b      	str	r3, [r1, #24]
  hspi->TxXferCount = (uint16_t)0UL;
2400ba5a:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
2400ba5e:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
}
2400ba62:	4770      	bx	lr
2400ba64:	fffffc90 	.word	0xfffffc90

2400ba68 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
2400ba68:	6802      	ldr	r2, [r0, #0]
{
2400ba6a:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
2400ba6c:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
2400ba6e:	6991      	ldr	r1, [r2, #24]
2400ba70:	f041 0108 	orr.w	r1, r1, #8
2400ba74:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2400ba76:	6801      	ldr	r1, [r0, #0]
2400ba78:	698a      	ldr	r2, [r1, #24]
2400ba7a:	f042 0210 	orr.w	r2, r2, #16
2400ba7e:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
2400ba80:	6801      	ldr	r1, [r0, #0]
2400ba82:	680a      	ldr	r2, [r1, #0]
2400ba84:	f022 0201 	bic.w	r2, r2, #1
2400ba88:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
2400ba8a:	6801      	ldr	r1, [r0, #0]
2400ba8c:	4a27      	ldr	r2, [pc, #156]	; (2400bb2c <SPI_CloseTransfer+0xc4>)
2400ba8e:	690c      	ldr	r4, [r1, #16]
2400ba90:	4022      	ands	r2, r4
2400ba92:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400ba94:	6801      	ldr	r1, [r0, #0]
2400ba96:	688a      	ldr	r2, [r1, #8]
2400ba98:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
2400ba9c:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
2400ba9e:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
2400baa2:	2a04      	cmp	r2, #4
2400baa4:	d001      	beq.n	2400baaa <SPI_CloseTransfer+0x42>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
2400baa6:	069c      	lsls	r4, r3, #26
2400baa8:	d433      	bmi.n	2400bb12 <SPI_CloseTransfer+0xaa>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
2400baaa:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
2400baae:	2a03      	cmp	r2, #3
2400bab0:	d001      	beq.n	2400bab6 <SPI_CloseTransfer+0x4e>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
2400bab2:	0659      	lsls	r1, r3, #25
2400bab4:	d421      	bmi.n	2400bafa <SPI_CloseTransfer+0x92>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
2400bab6:	059a      	lsls	r2, r3, #22
2400bab8:	d50a      	bpl.n	2400bad0 <SPI_CloseTransfer+0x68>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400baba:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400babe:	6801      	ldr	r1, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400bac0:	f042 0201 	orr.w	r2, r2, #1
2400bac4:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400bac8:	698a      	ldr	r2, [r1, #24]
2400baca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
2400bace:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
2400bad0:	05db      	lsls	r3, r3, #23
2400bad2:	d50a      	bpl.n	2400baea <SPI_CloseTransfer+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400bad4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400bad8:	6802      	ldr	r2, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400bada:	f043 0308 	orr.w	r3, r3, #8
2400bade:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400bae2:	6993      	ldr	r3, [r2, #24]
2400bae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400bae8:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
2400baea:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
2400baec:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
2400baf0:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
2400baf4:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
2400baf8:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400bafa:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400bafe:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400bb00:	f042 0204 	orr.w	r2, r2, #4
2400bb04:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400bb08:	698a      	ldr	r2, [r1, #24]
2400bb0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2400bb0e:	618a      	str	r2, [r1, #24]
2400bb10:	e7d1      	b.n	2400bab6 <SPI_CloseTransfer+0x4e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400bb12:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400bb16:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400bb18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
2400bb1c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400bb20:	698a      	ldr	r2, [r1, #24]
2400bb22:	f042 0220 	orr.w	r2, r2, #32
2400bb26:	618a      	str	r2, [r1, #24]
2400bb28:	e7bf      	b.n	2400baaa <SPI_CloseTransfer+0x42>
2400bb2a:	bf00      	nop
2400bb2c:	fffffc90 	.word	0xfffffc90

2400bb30 <HAL_SPI_Init>:
  if (hspi == NULL)
2400bb30:	2800      	cmp	r0, #0
2400bb32:	f000 80be 	beq.w	2400bcb2 <HAL_SPI_Init+0x182>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
2400bb36:	4a62      	ldr	r2, [pc, #392]	; (2400bcc0 <HAL_SPI_Init+0x190>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
2400bb38:	2100      	movs	r1, #0
{
2400bb3a:	b538      	push	{r3, r4, r5, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
2400bb3c:	6803      	ldr	r3, [r0, #0]
2400bb3e:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
2400bb40:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
2400bb42:	4293      	cmp	r3, r2
2400bb44:	d015      	beq.n	2400bb72 <HAL_SPI_Init+0x42>
2400bb46:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
2400bb4a:	4293      	cmp	r3, r2
2400bb4c:	d011      	beq.n	2400bb72 <HAL_SPI_Init+0x42>
2400bb4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
2400bb52:	4293      	cmp	r3, r2
2400bb54:	68c2      	ldr	r2, [r0, #12]
2400bb56:	f000 80a5 	beq.w	2400bca4 <HAL_SPI_Init+0x174>
2400bb5a:	2a0f      	cmp	r2, #15
2400bb5c:	d807      	bhi.n	2400bb6e <HAL_SPI_Init+0x3e>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400bb5e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
2400bb60:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400bb62:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
2400bb64:	08d2      	lsrs	r2, r2, #3

  return data_size * fifo_threashold;
2400bb66:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
2400bb6a:	2a08      	cmp	r2, #8
2400bb6c:	d914      	bls.n	2400bb98 <HAL_SPI_Init+0x68>
    return HAL_ERROR;
2400bb6e:	2001      	movs	r0, #1
}
2400bb70:	bd38      	pop	{r3, r4, r5, pc}
  data_size = (data_size + 7UL) / 8UL;
2400bb72:	68e2      	ldr	r2, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400bb74:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
2400bb76:	3208      	adds	r2, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
2400bb78:	4851      	ldr	r0, [pc, #324]	; (2400bcc0 <HAL_SPI_Init+0x190>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400bb7a:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
2400bb7c:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
2400bb7e:	fb01 2202 	mla	r2, r1, r2, r2
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
2400bb82:	4950      	ldr	r1, [pc, #320]	; (2400bcc4 <HAL_SPI_Init+0x194>)
2400bb84:	428b      	cmp	r3, r1
2400bb86:	bf18      	it	ne
2400bb88:	4283      	cmpne	r3, r0
2400bb8a:	d003      	beq.n	2400bb94 <HAL_SPI_Init+0x64>
2400bb8c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
2400bb90:	428b      	cmp	r3, r1
2400bb92:	d101      	bne.n	2400bb98 <HAL_SPI_Init+0x68>
2400bb94:	2a10      	cmp	r2, #16
2400bb96:	d8ea      	bhi.n	2400bb6e <HAL_SPI_Init+0x3e>
  if (hspi->State == HAL_SPI_STATE_RESET)
2400bb98:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
2400bb9c:	f002 01ff 	and.w	r1, r2, #255	; 0xff
2400bba0:	2a00      	cmp	r2, #0
2400bba2:	d078      	beq.n	2400bc96 <HAL_SPI_Init+0x166>
  hspi->State = HAL_SPI_STATE_BUSY;
2400bba4:	2202      	movs	r2, #2
2400bba6:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
2400bbaa:	681a      	ldr	r2, [r3, #0]
2400bbac:	f022 0201 	bic.w	r2, r2, #1
2400bbb0:	601a      	str	r2, [r3, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400bbb2:	69a1      	ldr	r1, [r4, #24]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
2400bbb4:	6823      	ldr	r3, [r4, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400bbb6:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
2400bbba:	6861      	ldr	r1, [r4, #4]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
2400bbbc:	689a      	ldr	r2, [r3, #8]
2400bbbe:	f402 12f8 	and.w	r2, r2, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400bbc2:	d058      	beq.n	2400bc76 <HAL_SPI_Init+0x146>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
2400bbc4:	0249      	lsls	r1, r1, #9
2400bbc6:	d502      	bpl.n	2400bbce <HAL_SPI_Init+0x9e>
2400bbc8:	68e1      	ldr	r1, [r4, #12]
2400bbca:	2906      	cmp	r1, #6
2400bbcc:	d84c      	bhi.n	2400bc68 <HAL_SPI_Init+0x138>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
2400bbce:	6819      	ldr	r1, [r3, #0]
2400bbd0:	f421 7180 	bic.w	r1, r1, #256	; 0x100
2400bbd4:	6019      	str	r1, [r3, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
2400bbd6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
2400bbd8:	69e3      	ldr	r3, [r4, #28]
2400bbda:	6be0      	ldr	r0, [r4, #60]	; 0x3c
2400bbdc:	432b      	orrs	r3, r5
2400bbde:	6821      	ldr	r1, [r4, #0]
2400bbe0:	4303      	orrs	r3, r0
2400bbe2:	68e0      	ldr	r0, [r4, #12]
2400bbe4:	4303      	orrs	r3, r0
2400bbe6:	4313      	orrs	r3, r2
2400bbe8:	608b      	str	r3, [r1, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
2400bbea:	6a65      	ldr	r5, [r4, #36]	; 0x24
2400bbec:	69a0      	ldr	r0, [r4, #24]
2400bbee:	6822      	ldr	r2, [r4, #0]
2400bbf0:	e9d4 310d 	ldrd	r3, r1, [r4, #52]	; 0x34
2400bbf4:	432b      	orrs	r3, r5
2400bbf6:	430b      	orrs	r3, r1
2400bbf8:	6921      	ldr	r1, [r4, #16]
2400bbfa:	4303      	orrs	r3, r0
2400bbfc:	6960      	ldr	r0, [r4, #20]
2400bbfe:	430b      	orrs	r3, r1
2400bc00:	6a21      	ldr	r1, [r4, #32]
2400bc02:	4303      	orrs	r3, r0
2400bc04:	6860      	ldr	r0, [r4, #4]
2400bc06:	430b      	orrs	r3, r1
2400bc08:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
2400bc0a:	4303      	orrs	r3, r0
2400bc0c:	68a0      	ldr	r0, [r4, #8]
2400bc0e:	430b      	orrs	r3, r1
2400bc10:	6ca1      	ldr	r1, [r4, #72]	; 0x48
2400bc12:	4303      	orrs	r3, r0
2400bc14:	430b      	orrs	r3, r1
2400bc16:	6da1      	ldr	r1, [r4, #88]	; 0x58
2400bc18:	430b      	orrs	r3, r1
2400bc1a:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
2400bc1c:	6863      	ldr	r3, [r4, #4]
2400bc1e:	b96b      	cbnz	r3, 2400bc3c <HAL_SPI_Init+0x10c>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
2400bc20:	6822      	ldr	r2, [r4, #0]
2400bc22:	6893      	ldr	r3, [r2, #8]
2400bc24:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
2400bc28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400bc2c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
2400bc2e:	6822      	ldr	r2, [r4, #0]
2400bc30:	6893      	ldr	r3, [r2, #8]
2400bc32:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
2400bc36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2400bc3a:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
2400bc3c:	6822      	ldr	r2, [r4, #0]
2400bc3e:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400bc40:	f023 0301 	bic.w	r3, r3, #1
2400bc44:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
2400bc46:	6863      	ldr	r3, [r4, #4]
2400bc48:	025b      	lsls	r3, r3, #9
2400bc4a:	d506      	bpl.n	2400bc5a <HAL_SPI_Init+0x12a>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
2400bc4c:	6822      	ldr	r2, [r4, #0]
2400bc4e:	6d61      	ldr	r1, [r4, #84]	; 0x54
2400bc50:	68d3      	ldr	r3, [r2, #12]
2400bc52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
2400bc56:	430b      	orrs	r3, r1
2400bc58:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2400bc5a:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
2400bc5c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2400bc5e:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
2400bc62:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
2400bc66:	bd38      	pop	{r3, r4, r5, pc}
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
2400bc68:	6819      	ldr	r1, [r3, #0]
2400bc6a:	6d20      	ldr	r0, [r4, #80]	; 0x50
2400bc6c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
2400bc70:	4301      	orrs	r1, r0
2400bc72:	6019      	str	r1, [r3, #0]
2400bc74:	e7af      	b.n	2400bbd6 <HAL_SPI_Init+0xa6>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400bc76:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
2400bc7a:	d01c      	beq.n	2400bcb6 <HAL_SPI_Init+0x186>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
2400bc7c:	2900      	cmp	r1, #0
2400bc7e:	d1a1      	bne.n	2400bbc4 <HAL_SPI_Init+0x94>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
2400bc80:	6ba1      	ldr	r1, [r4, #56]	; 0x38
2400bc82:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
2400bc86:	d1a2      	bne.n	2400bbce <HAL_SPI_Init+0x9e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
2400bc88:	6819      	ldr	r1, [r3, #0]
2400bc8a:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
2400bc8e:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
2400bc90:	e9d4 3100 	ldrd	r3, r1, [r4]
2400bc94:	e796      	b.n	2400bbc4 <HAL_SPI_Init+0x94>
    HAL_SPI_MspInit(hspi);
2400bc96:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
2400bc98:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
2400bc9c:	f7f8 fab0 	bl	24004200 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
2400bca0:	6823      	ldr	r3, [r4, #0]
2400bca2:	e77f      	b.n	2400bba4 <HAL_SPI_Init+0x74>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400bca4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
2400bca6:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400bca8:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
2400bcaa:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
2400bcac:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
2400bcb0:	e770      	b.n	2400bb94 <HAL_SPI_Init+0x64>
    return HAL_ERROR;
2400bcb2:	2001      	movs	r0, #1
}
2400bcb4:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400bcb6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
2400bcb8:	2900      	cmp	r1, #0
2400bcba:	d0e5      	beq.n	2400bc88 <HAL_SPI_Init+0x158>
2400bcbc:	e784      	b.n	2400bbc8 <HAL_SPI_Init+0x98>
2400bcbe:	bf00      	nop
2400bcc0:	40013000 	.word	0x40013000
2400bcc4:	40003800 	.word	0x40003800

2400bcc8 <HAL_SPI_TransmitReceive_DMA>:
{
2400bcc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2400bccc:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
2400bcce:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
2400bcd2:	2b01      	cmp	r3, #1
2400bcd4:	f000 809a 	beq.w	2400be0c <HAL_SPI_TransmitReceive_DMA+0x144>
2400bcd8:	2301      	movs	r3, #1
2400bcda:	4604      	mov	r4, r0
2400bcdc:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
2400bce0:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
2400bce4:	2b01      	cmp	r3, #1
2400bce6:	b2de      	uxtb	r6, r3
2400bce8:	d158      	bne.n	2400bd9c <HAL_SPI_TransmitReceive_DMA+0xd4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
2400bcea:	2d00      	cmp	r5, #0
2400bcec:	bf18      	it	ne
2400bcee:	2a00      	cmpne	r2, #0
2400bcf0:	d04e      	beq.n	2400bd90 <HAL_SPI_TransmitReceive_DMA+0xc8>
2400bcf2:	fab1 f381 	clz	r3, r1
2400bcf6:	095b      	lsrs	r3, r3, #5
2400bcf8:	2900      	cmp	r1, #0
2400bcfa:	d049      	beq.n	2400bd90 <HAL_SPI_TransmitReceive_DMA+0xc8>
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
2400bcfc:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
2400bcfe:	2105      	movs	r1, #5
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
2400bd00:	6642      	str	r2, [r0, #100]	; 0x64
  SPI_2LINES(hspi);
2400bd02:	6802      	ldr	r2, [r0, #0]
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
2400bd04:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
  hspi->TxXferSize  = Size;
2400bd08:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
2400bd0c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->RxXferSize  = Size;
2400bd10:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->TxXferCount = Size;
2400bd14:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
  hspi->RxXferCount = Size;
2400bd18:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxISR       = NULL;
2400bd1c:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  SPI_2LINES(hspi);
2400bd20:	68d3      	ldr	r3, [r2, #12]
2400bd22:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
2400bd26:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400bd28:	6802      	ldr	r2, [r0, #0]
2400bd2a:	6893      	ldr	r3, [r2, #8]
2400bd2c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
2400bd30:	6093      	str	r3, [r2, #8]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
2400bd32:	68c3      	ldr	r3, [r0, #12]
2400bd34:	2b0f      	cmp	r3, #15
2400bd36:	d938      	bls.n	2400bdaa <HAL_SPI_TransmitReceive_DMA+0xe2>
2400bd38:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
2400bd3a:	699a      	ldr	r2, [r3, #24]
2400bd3c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400bd40:	d126      	bne.n	2400bd90 <HAL_SPI_TransmitReceive_DMA+0xc8>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
2400bd42:	4a6c      	ldr	r2, [pc, #432]	; (2400bef4 <HAL_SPI_TransmitReceive_DMA+0x22c>)
  hspi->hdmarx->XferAbortCallback = NULL;
2400bd44:	f04f 0800 	mov.w	r8, #0
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
2400bd48:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 2400bf00 <HAL_SPI_TransmitReceive_DMA+0x238>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
2400bd4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
2400bd4e:	4a6a      	ldr	r2, [pc, #424]	; (2400bef8 <HAL_SPI_TransmitReceive_DMA+0x230>)
2400bd50:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400bd52:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
2400bd54:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400bd56:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
2400bd5a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400bd5c:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
2400bd60:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
2400bd64:	6821      	ldr	r1, [r4, #0]
2400bd66:	b29b      	uxth	r3, r3
2400bd68:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400bd6a:	3130      	adds	r1, #48	; 0x30
2400bd6c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400bd6e:	f7f9 fea9 	bl	24005ac4 <HAL_DMA_Start_IT>
2400bd72:	4607      	mov	r7, r0
2400bd74:	2800      	cmp	r0, #0
2400bd76:	d04d      	beq.n	2400be14 <HAL_SPI_TransmitReceive_DMA+0x14c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400bd78:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400bd7c:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
2400bd7e:	f884 8080 	strb.w	r8, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400bd82:	f043 0310 	orr.w	r3, r3, #16
2400bd86:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400bd8a:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
2400bd8e:	e002      	b.n	2400bd96 <HAL_SPI_TransmitReceive_DMA+0xce>
    __HAL_UNLOCK(hspi);
2400bd90:	2300      	movs	r3, #0
2400bd92:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
2400bd96:	4630      	mov	r0, r6
2400bd98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_UNLOCK(hspi);
2400bd9c:	2300      	movs	r3, #0
    return errorcode;
2400bd9e:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
2400bda0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
2400bda4:	4630      	mov	r0, r6
2400bda6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
2400bdaa:	2b07      	cmp	r3, #7
2400bdac:	d87f      	bhi.n	2400beae <HAL_SPI_TransmitReceive_DMA+0x1e6>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
2400bdae:	6f82      	ldr	r2, [r0, #120]	; 0x78
2400bdb0:	6993      	ldr	r3, [r2, #24]
2400bdb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2400bdb6:	d107      	bne.n	2400bdc8 <HAL_SPI_TransmitReceive_DMA+0x100>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
2400bdb8:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
2400bdbc:	b29b      	uxth	r3, r3
2400bdbe:	3301      	adds	r3, #1
2400bdc0:	085b      	lsrs	r3, r3, #1
2400bdc2:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400bdc6:	6993      	ldr	r3, [r2, #24]
2400bdc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400bdcc:	d106      	bne.n	2400bddc <HAL_SPI_TransmitReceive_DMA+0x114>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
2400bdce:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
2400bdd2:	b29b      	uxth	r3, r3
2400bdd4:	3303      	adds	r3, #3
2400bdd6:	089b      	lsrs	r3, r3, #2
2400bdd8:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
2400bddc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400bdde:	699a      	ldr	r2, [r3, #24]
2400bde0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
2400bde4:	d107      	bne.n	2400bdf6 <HAL_SPI_TransmitReceive_DMA+0x12e>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
2400bde6:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400bdea:	b292      	uxth	r2, r2
2400bdec:	3201      	adds	r2, #1
2400bdee:	0852      	lsrs	r2, r2, #1
2400bdf0:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400bdf4:	699a      	ldr	r2, [r3, #24]
2400bdf6:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400bdfa:	d1a2      	bne.n	2400bd42 <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
2400bdfc:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400be00:	b292      	uxth	r2, r2
2400be02:	3203      	adds	r2, #3
2400be04:	0892      	lsrs	r2, r2, #2
2400be06:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
2400be0a:	e79a      	b.n	2400bd42 <HAL_SPI_TransmitReceive_DMA+0x7a>
  __HAL_LOCK(hspi);
2400be0c:	2602      	movs	r6, #2
}
2400be0e:	4630      	mov	r0, r6
2400be10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
2400be14:	6822      	ldr	r2, [r4, #0]
2400be16:	6893      	ldr	r3, [r2, #8]
2400be18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2400be1c:	6093      	str	r3, [r2, #8]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
2400be1e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400be20:	6418      	str	r0, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
2400be22:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400be24:	63d8      	str	r0, [r3, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
2400be26:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400be28:	6518      	str	r0, [r3, #80]	; 0x50
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
2400be2a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400be2c:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
                                 hspi->TxXferCount))
2400be30:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
2400be34:	6822      	ldr	r2, [r4, #0]
2400be36:	b29b      	uxth	r3, r3
2400be38:	6de1      	ldr	r1, [r4, #92]	; 0x5c
2400be3a:	3220      	adds	r2, #32
2400be3c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
2400be3e:	f7f9 fe41 	bl	24005ac4 <HAL_DMA_Start_IT>
2400be42:	bb40      	cbnz	r0, 2400be96 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400be44:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400be46:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400be48:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400be4a:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400be4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400be50:	4b2a      	ldr	r3, [pc, #168]	; (2400befc <HAL_SPI_TransmitReceive_DMA+0x234>)
2400be52:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
2400be56:	bf18      	it	ne
2400be58:	432b      	orrne	r3, r5
2400be5a:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
2400be5c:	6822      	ldr	r2, [r4, #0]
2400be5e:	6893      	ldr	r3, [r2, #8]
2400be60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
2400be64:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
2400be66:	6822      	ldr	r2, [r4, #0]
2400be68:	6913      	ldr	r3, [r2, #16]
2400be6a:	f443 7358 	orr.w	r3, r3, #864	; 0x360
2400be6e:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
2400be70:	6822      	ldr	r2, [r4, #0]
2400be72:	6813      	ldr	r3, [r2, #0]
2400be74:	f043 0301 	orr.w	r3, r3, #1
2400be78:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
2400be7a:	6863      	ldr	r3, [r4, #4]
2400be7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2400be80:	d104      	bne.n	2400be8c <HAL_SPI_TransmitReceive_DMA+0x1c4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
2400be82:	6822      	ldr	r2, [r4, #0]
2400be84:	6813      	ldr	r3, [r2, #0]
2400be86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400be8a:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
2400be8c:	2300      	movs	r3, #0
  return errorcode;
2400be8e:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
2400be90:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
2400be94:	e77f      	b.n	2400bd96 <HAL_SPI_TransmitReceive_DMA+0xce>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400be96:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400be9a:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
2400be9c:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400bea0:	f043 0310 	orr.w	r3, r3, #16
2400bea4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400bea8:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
2400beac:	e773      	b.n	2400bd96 <HAL_SPI_TransmitReceive_DMA+0xce>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
2400beae:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
2400beb0:	699a      	ldr	r2, [r3, #24]
2400beb2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
2400beb6:	d003      	beq.n	2400bec0 <HAL_SPI_TransmitReceive_DMA+0x1f8>
2400beb8:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400bebc:	f47f af68 	bne.w	2400bd90 <HAL_SPI_TransmitReceive_DMA+0xc8>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400bec0:	6fa1      	ldr	r1, [r4, #120]	; 0x78
2400bec2:	6989      	ldr	r1, [r1, #24]
2400bec4:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
2400bec8:	d107      	bne.n	2400beda <HAL_SPI_TransmitReceive_DMA+0x212>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
2400beca:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
2400bece:	b292      	uxth	r2, r2
2400bed0:	3201      	adds	r2, #1
2400bed2:	0852      	lsrs	r2, r2, #1
2400bed4:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400bed8:	699a      	ldr	r2, [r3, #24]
2400beda:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400bede:	f47f af30 	bne.w	2400bd42 <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
2400bee2:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400bee6:	b292      	uxth	r2, r2
2400bee8:	3201      	adds	r2, #1
2400beea:	0852      	lsrs	r2, r2, #1
2400beec:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
2400bef0:	e727      	b.n	2400bd42 <HAL_SPI_TransmitReceive_DMA+0x7a>
2400bef2:	bf00      	nop
2400bef4:	2400c075 	.word	0x2400c075
2400bef8:	2400c04d 	.word	0x2400c04d
2400befc:	ffff0000 	.word	0xffff0000
2400bf00:	2400c085 	.word	0x2400c085

2400bf04 <HAL_SPI_Abort>:
  __HAL_LOCK(hspi);
2400bf04:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
2400bf08:	2b01      	cmp	r3, #1
2400bf0a:	f000 8095 	beq.w	2400c038 <HAL_SPI_Abort+0x134>
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
2400bf0e:	4b4b      	ldr	r3, [pc, #300]	; (2400c03c <HAL_SPI_Abort+0x138>)
2400bf10:	2164      	movs	r1, #100	; 0x64
2400bf12:	4a4b      	ldr	r2, [pc, #300]	; (2400c040 <HAL_SPI_Abort+0x13c>)
{
2400bf14:	b510      	push	{r4, lr}
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
2400bf16:	681b      	ldr	r3, [r3, #0]
2400bf18:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
2400bf1a:	2001      	movs	r0, #1
{
2400bf1c:	b082      	sub	sp, #8
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
2400bf1e:	fba2 2303 	umull	r2, r3, r2, r3
  if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
2400bf22:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(hspi);
2400bf24:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_ABORT;
2400bf28:	2007      	movs	r0, #7
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
2400bf2a:	0a5b      	lsrs	r3, r3, #9
  hspi->State = HAL_SPI_STATE_ABORT;
2400bf2c:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
2400bf30:	fb01 f303 	mul.w	r3, r1, r3
2400bf34:	9301      	str	r3, [sp, #4]
  if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
2400bf36:	6813      	ldr	r3, [r2, #0]
2400bf38:	0598      	lsls	r0, r3, #22
2400bf3a:	d53e      	bpl.n	2400bfba <HAL_SPI_Abort+0xb6>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
2400bf3c:	6913      	ldr	r3, [r2, #16]
2400bf3e:	f023 0308 	bic.w	r3, r3, #8
2400bf42:	6113      	str	r3, [r2, #16]
    while (HAL_IS_BIT_SET(hspi->Instance->IER, SPI_IT_EOT));
2400bf44:	6822      	ldr	r2, [r4, #0]
2400bf46:	e002      	b.n	2400bf4e <HAL_SPI_Abort+0x4a>
2400bf48:	6913      	ldr	r3, [r2, #16]
2400bf4a:	0719      	lsls	r1, r3, #28
2400bf4c:	d50b      	bpl.n	2400bf66 <HAL_SPI_Abort+0x62>
      count--;
2400bf4e:	9b01      	ldr	r3, [sp, #4]
2400bf50:	3b01      	subs	r3, #1
2400bf52:	9301      	str	r3, [sp, #4]
      if (count == 0UL)
2400bf54:	9b01      	ldr	r3, [sp, #4]
2400bf56:	2b00      	cmp	r3, #0
2400bf58:	d1f6      	bne.n	2400bf48 <HAL_SPI_Abort+0x44>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2400bf5a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400bf5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400bf62:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSUSP);
2400bf66:	6813      	ldr	r3, [r2, #0]
2400bf68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2400bf6c:	6013      	str	r3, [r2, #0]
    while (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART));
2400bf6e:	6822      	ldr	r2, [r4, #0]
2400bf70:	e002      	b.n	2400bf78 <HAL_SPI_Abort+0x74>
2400bf72:	6813      	ldr	r3, [r2, #0]
2400bf74:	059b      	lsls	r3, r3, #22
2400bf76:	d50b      	bpl.n	2400bf90 <HAL_SPI_Abort+0x8c>
      count--;
2400bf78:	9b01      	ldr	r3, [sp, #4]
2400bf7a:	3b01      	subs	r3, #1
2400bf7c:	9301      	str	r3, [sp, #4]
      if (count == 0UL)
2400bf7e:	9b01      	ldr	r3, [sp, #4]
2400bf80:	2b00      	cmp	r3, #0
2400bf82:	d1f6      	bne.n	2400bf72 <HAL_SPI_Abort+0x6e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2400bf84:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400bf88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400bf8c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
2400bf90:	6993      	ldr	r3, [r2, #24]
2400bf92:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400bf96:	6193      	str	r3, [r2, #24]
    while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_SUSP));
2400bf98:	6822      	ldr	r2, [r4, #0]
2400bf9a:	e002      	b.n	2400bfa2 <HAL_SPI_Abort+0x9e>
2400bf9c:	6953      	ldr	r3, [r2, #20]
2400bf9e:	0518      	lsls	r0, r3, #20
2400bfa0:	d50b      	bpl.n	2400bfba <HAL_SPI_Abort+0xb6>
      count--;
2400bfa2:	9b01      	ldr	r3, [sp, #4]
2400bfa4:	3b01      	subs	r3, #1
2400bfa6:	9301      	str	r3, [sp, #4]
      if (count == 0UL)
2400bfa8:	9b01      	ldr	r3, [sp, #4]
2400bfaa:	2b00      	cmp	r3, #0
2400bfac:	d1f6      	bne.n	2400bf9c <HAL_SPI_Abort+0x98>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2400bfae:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400bfb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400bfb6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN))
2400bfba:	6893      	ldr	r3, [r2, #8]
2400bfbc:	0419      	lsls	r1, r3, #16
2400bfbe:	d508      	bpl.n	2400bfd2 <HAL_SPI_Abort+0xce>
    if (hspi->hdmatx != NULL)
2400bfc0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400bfc2:	b133      	cbz	r3, 2400bfd2 <HAL_SPI_Abort+0xce>
      hspi->hdmatx->XferAbortCallback = NULL;
2400bfc4:	2200      	movs	r2, #0
2400bfc6:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
2400bfc8:	6fa0      	ldr	r0, [r4, #120]	; 0x78
2400bfca:	f7fa f847 	bl	2400605c <HAL_DMA_Abort>
2400bfce:	bb00      	cbnz	r0, 2400c012 <HAL_SPI_Abort+0x10e>
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN))
2400bfd0:	6822      	ldr	r2, [r4, #0]
2400bfd2:	6893      	ldr	r3, [r2, #8]
2400bfd4:	045b      	lsls	r3, r3, #17
2400bfd6:	d507      	bpl.n	2400bfe8 <HAL_SPI_Abort+0xe4>
    if (hspi->hdmarx != NULL)
2400bfd8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400bfda:	b12b      	cbz	r3, 2400bfe8 <HAL_SPI_Abort+0xe4>
      hspi->hdmarx->XferAbortCallback = NULL;
2400bfdc:	2200      	movs	r2, #0
2400bfde:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
2400bfe0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400bfe2:	f7fa f83b 	bl	2400605c <HAL_DMA_Abort>
2400bfe6:	b9f0      	cbnz	r0, 2400c026 <HAL_SPI_Abort+0x122>
  SPI_AbortTransfer(hspi);
2400bfe8:	4620      	mov	r0, r4
2400bfea:	f7ff fd03 	bl	2400b9f4 <SPI_AbortTransfer>
  if (HAL_IS_BIT_SET(hspi->ErrorCode, HAL_SPI_ERROR_ABORT))
2400bfee:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400bff2:	f013 0340 	ands.w	r3, r3, #64	; 0x40
2400bff6:	d10a      	bne.n	2400c00e <HAL_SPI_Abort+0x10a>
  errorcode = HAL_OK;
2400bff8:	4618      	mov	r0, r3
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2400bffa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(hspi);
2400bffe:	2200      	movs	r2, #0
  hspi->State = HAL_SPI_STATE_READY;
2400c000:	2301      	movs	r3, #1
  __HAL_UNLOCK(hspi);
2400c002:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
2400c006:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
2400c00a:	b002      	add	sp, #8
2400c00c:	bd10      	pop	{r4, pc}
    errorcode = HAL_ERROR;
2400c00e:	2001      	movs	r0, #1
2400c010:	e7f5      	b.n	2400bffe <HAL_SPI_Abort+0xfa>
        if (HAL_DMA_GetError(hspi->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
2400c012:	6fa0      	ldr	r0, [r4, #120]	; 0x78
2400c014:	f7fa ffa6 	bl	24006f64 <HAL_DMA_GetError>
2400c018:	2820      	cmp	r0, #32
2400c01a:	d1d9      	bne.n	2400bfd0 <HAL_SPI_Abort+0xcc>
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
2400c01c:	2340      	movs	r3, #64	; 0x40
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN))
2400c01e:	6822      	ldr	r2, [r4, #0]
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
2400c020:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
2400c024:	e7d5      	b.n	2400bfd2 <HAL_SPI_Abort+0xce>
        if (HAL_DMA_GetError(hspi->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
2400c026:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400c028:	f7fa ff9c 	bl	24006f64 <HAL_DMA_GetError>
2400c02c:	2820      	cmp	r0, #32
2400c02e:	d1db      	bne.n	2400bfe8 <HAL_SPI_Abort+0xe4>
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
2400c030:	2340      	movs	r3, #64	; 0x40
2400c032:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
2400c036:	e7d7      	b.n	2400bfe8 <HAL_SPI_Abort+0xe4>
  __HAL_LOCK(hspi);
2400c038:	2002      	movs	r0, #2
}
2400c03a:	4770      	bx	lr
2400c03c:	200008b4 	.word	0x200008b4
2400c040:	057619f1 	.word	0x057619f1

2400c044 <HAL_SPI_TxCpltCallback>:
2400c044:	4770      	bx	lr
2400c046:	bf00      	nop

2400c048 <HAL_SPI_RxCpltCallback>:
2400c048:	4770      	bx	lr
2400c04a:	bf00      	nop

2400c04c <SPI_DMATransmitReceiveCplt>:
{
2400c04c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400c04e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
2400c050:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
2400c054:	2b07      	cmp	r3, #7
2400c056:	d009      	beq.n	2400c06c <SPI_DMATransmitReceiveCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400c058:	6f83      	ldr	r3, [r0, #120]	; 0x78
2400c05a:	69db      	ldr	r3, [r3, #28]
2400c05c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400c060:	d005      	beq.n	2400c06e <SPI_DMATransmitReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
2400c062:	6802      	ldr	r2, [r0, #0]
2400c064:	6913      	ldr	r3, [r2, #16]
2400c066:	f043 0308 	orr.w	r3, r3, #8
2400c06a:	6113      	str	r3, [r2, #16]
}
2400c06c:	bd08      	pop	{r3, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
2400c06e:	f01b ffcb 	bl	24028008 <__HAL_SPI_TxRxCpltCallback_veneer>
}
2400c072:	bd08      	pop	{r3, pc}

2400c074 <SPI_DMAHalfTransmitReceiveCplt>:
{
2400c074:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
2400c076:	6b80      	ldr	r0, [r0, #56]	; 0x38
2400c078:	f01b ffca 	bl	24028010 <__HAL_SPI_TxRxHalfCpltCallback_veneer>
}
2400c07c:	bd08      	pop	{r3, pc}
2400c07e:	bf00      	nop

2400c080 <HAL_SPI_ErrorCallback>:
2400c080:	4770      	bx	lr
2400c082:	bf00      	nop

2400c084 <SPI_DMAError>:
{
2400c084:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400c086:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
2400c088:	f7fa ff6c 	bl	24006f64 <HAL_DMA_GetError>
2400c08c:	2802      	cmp	r0, #2
2400c08e:	d100      	bne.n	2400c092 <SPI_DMAError+0xe>
}
2400c090:	bd10      	pop	{r4, pc}
  uint32_t itflag = hspi->Instance->SR;
2400c092:	6822      	ldr	r2, [r4, #0]
2400c094:	6953      	ldr	r3, [r2, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
2400c096:	6991      	ldr	r1, [r2, #24]
2400c098:	f041 0108 	orr.w	r1, r1, #8
2400c09c:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2400c09e:	6821      	ldr	r1, [r4, #0]
2400c0a0:	698a      	ldr	r2, [r1, #24]
2400c0a2:	f042 0210 	orr.w	r2, r2, #16
2400c0a6:	618a      	str	r2, [r1, #24]
  __HAL_SPI_DISABLE(hspi);
2400c0a8:	6821      	ldr	r1, [r4, #0]
2400c0aa:	680a      	ldr	r2, [r1, #0]
2400c0ac:	f022 0201 	bic.w	r2, r2, #1
2400c0b0:	600a      	str	r2, [r1, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
2400c0b2:	6821      	ldr	r1, [r4, #0]
2400c0b4:	4a2c      	ldr	r2, [pc, #176]	; (2400c168 <SPI_DMAError+0xe4>)
2400c0b6:	6908      	ldr	r0, [r1, #16]
2400c0b8:	4002      	ands	r2, r0
2400c0ba:	610a      	str	r2, [r1, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400c0bc:	6821      	ldr	r1, [r4, #0]
2400c0be:	688a      	ldr	r2, [r1, #8]
2400c0c0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
2400c0c4:	608a      	str	r2, [r1, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
2400c0c6:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
2400c0ca:	2a04      	cmp	r2, #4
2400c0cc:	d001      	beq.n	2400c0d2 <SPI_DMAError+0x4e>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
2400c0ce:	0698      	lsls	r0, r3, #26
2400c0d0:	d43d      	bmi.n	2400c14e <SPI_DMAError+0xca>
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
2400c0d2:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
2400c0d6:	2a03      	cmp	r2, #3
2400c0d8:	d001      	beq.n	2400c0de <SPI_DMAError+0x5a>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
2400c0da:	0659      	lsls	r1, r3, #25
2400c0dc:	d42b      	bmi.n	2400c136 <SPI_DMAError+0xb2>
  if ((itflag & SPI_FLAG_MODF) != 0UL)
2400c0de:	059a      	lsls	r2, r3, #22
2400c0e0:	d50a      	bpl.n	2400c0f8 <SPI_DMAError+0x74>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400c0e2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400c0e6:	6821      	ldr	r1, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400c0e8:	f042 0201 	orr.w	r2, r2, #1
2400c0ec:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400c0f0:	698a      	ldr	r2, [r1, #24]
2400c0f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
2400c0f6:	618a      	str	r2, [r1, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
2400c0f8:	05db      	lsls	r3, r3, #23
2400c0fa:	d50a      	bpl.n	2400c112 <SPI_DMAError+0x8e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400c0fc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400c100:	6822      	ldr	r2, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400c102:	f043 0308 	orr.w	r3, r3, #8
2400c106:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400c10a:	6993      	ldr	r3, [r2, #24]
2400c10c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400c110:	6193      	str	r3, [r2, #24]
  hspi->TxXferCount = (uint16_t)0UL;
2400c112:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
2400c114:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
2400c116:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
2400c118:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
2400c11c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400c120:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400c124:	f043 0310 	orr.w	r3, r3, #16
2400c128:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400c12c:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
2400c130:	f7ff ffa6 	bl	2400c080 <HAL_SPI_ErrorCallback>
}
2400c134:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400c136:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400c13a:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400c13c:	f042 0204 	orr.w	r2, r2, #4
2400c140:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400c144:	698a      	ldr	r2, [r1, #24]
2400c146:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2400c14a:	618a      	str	r2, [r1, #24]
2400c14c:	e7c7      	b.n	2400c0de <SPI_DMAError+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400c14e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400c152:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400c154:	f042 0280 	orr.w	r2, r2, #128	; 0x80
2400c158:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400c15c:	698a      	ldr	r2, [r1, #24]
2400c15e:	f042 0220 	orr.w	r2, r2, #32
2400c162:	618a      	str	r2, [r1, #24]
2400c164:	e7b5      	b.n	2400c0d2 <SPI_DMAError+0x4e>
2400c166:	bf00      	nop
2400c168:	fffffc90 	.word	0xfffffc90

2400c16c <SPI_DMAAbortOnError>:
{
2400c16c:	b508      	push	{r3, lr}
  hspi->State = HAL_SPI_STATE_READY;
2400c16e:	2201      	movs	r2, #1
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400c170:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
2400c172:	2300      	movs	r3, #0
2400c174:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
2400c178:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
2400c17c:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
2400c180:	f7ff ff7e 	bl	2400c080 <HAL_SPI_ErrorCallback>
}
2400c184:	bd08      	pop	{r3, pc}
2400c186:	bf00      	nop

2400c188 <HAL_SPI_SuspendCallback>:
2400c188:	4770      	bx	lr
2400c18a:	bf00      	nop

2400c18c <HAL_SPI_IRQHandler>:
{
2400c18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itsource = hspi->Instance->IER;
2400c190:	6805      	ldr	r5, [r0, #0]
{
2400c192:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
2400c194:	692a      	ldr	r2, [r5, #16]
  uint32_t itflag   = hspi->Instance->SR;
2400c196:	696b      	ldr	r3, [r5, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
2400c198:	f8d5 8008 	ldr.w	r8, [r5, #8]
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
2400c19c:	0519      	lsls	r1, r3, #20
  HAL_SPI_StateTypeDef State = hspi->State;
2400c19e:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  uint32_t trigger  = itsource & itflag;
2400c1a2:	ea02 0703 	and.w	r7, r2, r3
  HAL_SPI_StateTypeDef State = hspi->State;
2400c1a6:	b2f6      	uxtb	r6, r6
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
2400c1a8:	d502      	bpl.n	2400c1b0 <HAL_SPI_IRQHandler+0x24>
2400c1aa:	0713      	lsls	r3, r2, #28
2400c1ac:	f100 80fd 	bmi.w	2400c3aa <HAL_SPI_IRQHandler+0x21e>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
2400c1b0:	f007 0364 	and.w	r3, r7, #100	; 0x64
2400c1b4:	2b04      	cmp	r3, #4
2400c1b6:	d076      	beq.n	2400c2a6 <HAL_SPI_IRQHandler+0x11a>
  uint32_t handled  = 0UL;
2400c1b8:	2200      	movs	r2, #0
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
2400c1ba:	f007 0345 	and.w	r3, r7, #69	; 0x45
2400c1be:	2b01      	cmp	r3, #1
2400c1c0:	d045      	beq.n	2400c24e <HAL_SPI_IRQHandler+0xc2>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
2400c1c2:	f007 0326 	and.w	r3, r7, #38	; 0x26
2400c1c6:	2b02      	cmp	r3, #2
2400c1c8:	d048      	beq.n	2400c25c <HAL_SPI_IRQHandler+0xd0>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_TSERF))
2400c1ca:	0579      	lsls	r1, r7, #21
2400c1cc:	f100 80e4 	bmi.w	2400c398 <HAL_SPI_IRQHandler+0x20c>
  if (handled != 0UL)
2400c1d0:	2a00      	cmp	r2, #0
2400c1d2:	d150      	bne.n	2400c276 <HAL_SPI_IRQHandler+0xea>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
2400c1d4:	073b      	lsls	r3, r7, #28
2400c1d6:	d56e      	bpl.n	2400c2b6 <HAL_SPI_IRQHandler+0x12a>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
2400c1d8:	6822      	ldr	r2, [r4, #0]
2400c1da:	6993      	ldr	r3, [r2, #24]
2400c1dc:	f043 0308 	orr.w	r3, r3, #8
2400c1e0:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2400c1e2:	6822      	ldr	r2, [r4, #0]
2400c1e4:	6993      	ldr	r3, [r2, #24]
2400c1e6:	f043 0310 	orr.w	r3, r3, #16
2400c1ea:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
2400c1ec:	6822      	ldr	r2, [r4, #0]
2400c1ee:	6993      	ldr	r3, [r2, #24]
2400c1f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400c1f4:	6193      	str	r3, [r2, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
2400c1f6:	6822      	ldr	r2, [r4, #0]
2400c1f8:	6913      	ldr	r3, [r2, #16]
2400c1fa:	f023 0308 	bic.w	r3, r3, #8
2400c1fe:	6113      	str	r3, [r2, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400c200:	6823      	ldr	r3, [r4, #0]
2400c202:	689b      	ldr	r3, [r3, #8]
2400c204:	f413 4f40 	tst.w	r3, #49152	; 0xc000
2400c208:	d137      	bne.n	2400c27a <HAL_SPI_IRQHandler+0xee>
      while (hspi->RxXferCount != 0UL)
2400c20a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
2400c20e:	b29b      	uxth	r3, r3
2400c210:	2b00      	cmp	r3, #0
2400c212:	d032      	beq.n	2400c27a <HAL_SPI_IRQHandler+0xee>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
2400c214:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400c216:	e00f      	b.n	2400c238 <HAL_SPI_IRQHandler+0xac>
2400c218:	6823      	ldr	r3, [r4, #0]
2400c21a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400c21c:	6013      	str	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
2400c21e:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400c220:	3204      	adds	r2, #4
        hspi->RxXferCount--;
2400c222:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint32_t);
2400c226:	6662      	str	r2, [r4, #100]	; 0x64
        hspi->RxXferCount--;
2400c228:	3b01      	subs	r3, #1
2400c22a:	b29b      	uxth	r3, r3
2400c22c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
2400c230:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
2400c234:	b29b      	uxth	r3, r3
2400c236:	b303      	cbz	r3, 2400c27a <HAL_SPI_IRQHandler+0xee>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
2400c238:	68e3      	ldr	r3, [r4, #12]
2400c23a:	2b0f      	cmp	r3, #15
2400c23c:	d8ec      	bhi.n	2400c218 <HAL_SPI_IRQHandler+0x8c>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
2400c23e:	2b07      	cmp	r3, #7
2400c240:	f240 80c3 	bls.w	2400c3ca <HAL_SPI_IRQHandler+0x23e>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
2400c244:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
2400c246:	8013      	strh	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
2400c248:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400c24a:	3202      	adds	r2, #2
2400c24c:	e7e9      	b.n	2400c222 <HAL_SPI_IRQHandler+0x96>
    hspi->RxISR(hspi);
2400c24e:	6f23      	ldr	r3, [r4, #112]	; 0x70
2400c250:	4620      	mov	r0, r4
2400c252:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
2400c254:	f007 0326 	and.w	r3, r7, #38	; 0x26
2400c258:	2b02      	cmp	r3, #2
2400c25a:	d102      	bne.n	2400c262 <HAL_SPI_IRQHandler+0xd6>
    hspi->TxISR(hspi);
2400c25c:	6f63      	ldr	r3, [r4, #116]	; 0x74
2400c25e:	4620      	mov	r0, r4
2400c260:	4798      	blx	r3
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_TSERF))
2400c262:	0578      	lsls	r0, r7, #21
2400c264:	d507      	bpl.n	2400c276 <HAL_SPI_IRQHandler+0xea>
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400c266:	6822      	ldr	r2, [r4, #0]
    hspi->Reload.Requested = 0UL;
2400c268:	2300      	movs	r3, #0
2400c26a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400c26e:	6993      	ldr	r3, [r2, #24]
2400c270:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2400c274:	6193      	str	r3, [r2, #24]
}
2400c276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SPI_CloseTransfer(hspi);
2400c27a:	4620      	mov	r0, r4
2400c27c:	f7ff fbf4 	bl	2400ba68 <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
2400c280:	2301      	movs	r3, #1
2400c282:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2400c286:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400c28a:	2b00      	cmp	r3, #0
2400c28c:	f040 8099 	bne.w	2400c3c2 <HAL_SPI_IRQHandler+0x236>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
2400c290:	2e05      	cmp	r6, #5
2400c292:	f000 80a1 	beq.w	2400c3d8 <HAL_SPI_IRQHandler+0x24c>
    else if (State == HAL_SPI_STATE_BUSY_RX)
2400c296:	2e04      	cmp	r6, #4
2400c298:	f000 80a1 	beq.w	2400c3de <HAL_SPI_IRQHandler+0x252>
    else if (State == HAL_SPI_STATE_BUSY_TX)
2400c29c:	2e03      	cmp	r6, #3
2400c29e:	d1ea      	bne.n	2400c276 <HAL_SPI_IRQHandler+0xea>
      HAL_SPI_TxCpltCallback(hspi);
2400c2a0:	f7ff fed0 	bl	2400c044 <HAL_SPI_TxCpltCallback>
2400c2a4:	e7e7      	b.n	2400c276 <HAL_SPI_IRQHandler+0xea>
    hspi->TxISR(hspi);
2400c2a6:	4620      	mov	r0, r4
2400c2a8:	6f63      	ldr	r3, [r4, #116]	; 0x74
2400c2aa:	4798      	blx	r3
    hspi->RxISR(hspi);
2400c2ac:	6f23      	ldr	r3, [r4, #112]	; 0x70
2400c2ae:	4620      	mov	r0, r4
2400c2b0:	4798      	blx	r3
    handled = 1UL;
2400c2b2:	2201      	movs	r2, #1
2400c2b4:	e781      	b.n	2400c1ba <HAL_SPI_IRQHandler+0x2e>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
2400c2b6:	f417 7f58 	tst.w	r7, #864	; 0x360
2400c2ba:	d0dc      	beq.n	2400c276 <HAL_SPI_IRQHandler+0xea>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
2400c2bc:	0678      	lsls	r0, r7, #25
2400c2be:	d50a      	bpl.n	2400c2d6 <HAL_SPI_IRQHandler+0x14a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400c2c0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400c2c4:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400c2c6:	f043 0304 	orr.w	r3, r3, #4
2400c2ca:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400c2ce:	6993      	ldr	r3, [r2, #24]
2400c2d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400c2d4:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
2400c2d6:	05b9      	lsls	r1, r7, #22
2400c2d8:	d50a      	bpl.n	2400c2f0 <HAL_SPI_IRQHandler+0x164>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400c2da:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400c2de:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400c2e0:	f043 0301 	orr.w	r3, r3, #1
2400c2e4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400c2e8:	6993      	ldr	r3, [r2, #24]
2400c2ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400c2ee:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
2400c2f0:	05fa      	lsls	r2, r7, #23
2400c2f2:	d50a      	bpl.n	2400c30a <HAL_SPI_IRQHandler+0x17e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400c2f4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
2400c2f8:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400c2fa:	f043 0308 	orr.w	r3, r3, #8
2400c2fe:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
2400c302:	6993      	ldr	r3, [r2, #24]
2400c304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400c308:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
2400c30a:	06bb      	lsls	r3, r7, #26
2400c30c:	d50a      	bpl.n	2400c324 <HAL_SPI_IRQHandler+0x198>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400c30e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400c312:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400c314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2400c318:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400c31c:	6993      	ldr	r3, [r2, #24]
2400c31e:	f043 0320 	orr.w	r3, r3, #32
2400c322:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2400c324:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400c328:	2b00      	cmp	r3, #0
2400c32a:	d0a4      	beq.n	2400c276 <HAL_SPI_IRQHandler+0xea>
      __HAL_SPI_DISABLE(hspi);
2400c32c:	6822      	ldr	r2, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400c32e:	f408 4840 	and.w	r8, r8, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
2400c332:	6813      	ldr	r3, [r2, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400c334:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
2400c338:	f023 0301 	bic.w	r3, r3, #1
2400c33c:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
2400c33e:	6822      	ldr	r2, [r4, #0]
2400c340:	4b28      	ldr	r3, [pc, #160]	; (2400c3e4 <HAL_SPI_IRQHandler+0x258>)
2400c342:	6911      	ldr	r1, [r2, #16]
2400c344:	ea03 0301 	and.w	r3, r3, r1
2400c348:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400c34a:	d136      	bne.n	2400c3ba <HAL_SPI_IRQHandler+0x22e>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400c34c:	6822      	ldr	r2, [r4, #0]
2400c34e:	6893      	ldr	r3, [r2, #8]
2400c350:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
2400c354:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
2400c356:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400c358:	b15b      	cbz	r3, 2400c372 <HAL_SPI_IRQHandler+0x1e6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
2400c35a:	4a23      	ldr	r2, [pc, #140]	; (2400c3e8 <HAL_SPI_IRQHandler+0x25c>)
2400c35c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
2400c35e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400c360:	f7fa f892 	bl	24006488 <HAL_DMA_Abort_IT>
2400c364:	b128      	cbz	r0, 2400c372 <HAL_SPI_IRQHandler+0x1e6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2400c366:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400c36a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400c36e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
2400c372:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400c374:	2b00      	cmp	r3, #0
2400c376:	f43f af7e 	beq.w	2400c276 <HAL_SPI_IRQHandler+0xea>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
2400c37a:	4a1b      	ldr	r2, [pc, #108]	; (2400c3e8 <HAL_SPI_IRQHandler+0x25c>)
2400c37c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
2400c37e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
2400c380:	f7fa f882 	bl	24006488 <HAL_DMA_Abort_IT>
2400c384:	2800      	cmp	r0, #0
2400c386:	f43f af76 	beq.w	2400c276 <HAL_SPI_IRQHandler+0xea>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2400c38a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400c38e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400c392:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
2400c396:	e76e      	b.n	2400c276 <HAL_SPI_IRQHandler+0xea>
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400c398:	6821      	ldr	r1, [r4, #0]
    hspi->Reload.Requested = 0UL;
2400c39a:	2300      	movs	r3, #0
2400c39c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400c3a0:	698b      	ldr	r3, [r1, #24]
2400c3a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2400c3a6:	618b      	str	r3, [r1, #24]
2400c3a8:	e712      	b.n	2400c1d0 <HAL_SPI_IRQHandler+0x44>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
2400c3aa:	69ab      	ldr	r3, [r5, #24]
2400c3ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400c3b0:	61ab      	str	r3, [r5, #24]
    HAL_SPI_SuspendCallback(hspi);
2400c3b2:	f7ff fee9 	bl	2400c188 <HAL_SPI_SuspendCallback>
}
2400c3b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hspi->State = HAL_SPI_STATE_READY;
2400c3ba:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
2400c3bc:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
2400c3be:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
2400c3c2:	f7ff fe5d 	bl	2400c080 <HAL_SPI_ErrorCallback>
}
2400c3c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
2400c3ca:	6823      	ldr	r3, [r4, #0]
2400c3cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
2400c3d0:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
2400c3d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400c3d4:	3201      	adds	r2, #1
2400c3d6:	e724      	b.n	2400c222 <HAL_SPI_IRQHandler+0x96>
      HAL_SPI_TxRxCpltCallback(hspi);
2400c3d8:	f01b fe16 	bl	24028008 <__HAL_SPI_TxRxCpltCallback_veneer>
2400c3dc:	e74b      	b.n	2400c276 <HAL_SPI_IRQHandler+0xea>
      HAL_SPI_RxCpltCallback(hspi);
2400c3de:	f7ff fe33 	bl	2400c048 <HAL_SPI_RxCpltCallback>
2400c3e2:	e748      	b.n	2400c276 <HAL_SPI_IRQHandler+0xea>
2400c3e4:	fffffc94 	.word	0xfffffc94
2400c3e8:	2400c16d 	.word	0x2400c16d

2400c3ec <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
2400c3ec:	680b      	ldr	r3, [r1, #0]
{
2400c3ee:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
2400c3f0:	b9d3      	cbnz	r3, 2400c428 <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
2400c3f2:	6804      	ldr	r4, [r0, #0]
2400c3f4:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
2400c3f8:	684a      	ldr	r2, [r1, #4]
2400c3fa:	4023      	ands	r3, r4
2400c3fc:	4313      	orrs	r3, r2
2400c3fe:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
2400c402:	4323      	orrs	r3, r4
2400c404:	4313      	orrs	r3, r2
2400c406:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
2400c40a:	4323      	orrs	r3, r4
2400c40c:	4313      	orrs	r3, r2
2400c40e:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
2400c412:	4323      	orrs	r3, r4
2400c414:	4313      	orrs	r3, r2
2400c416:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
2400c41a:	4323      	orrs	r3, r4
2400c41c:	4313      	orrs	r3, r2
2400c41e:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
2400c420:	2000      	movs	r0, #0
2400c422:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c426:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
2400c428:	6802      	ldr	r2, [r0, #0]
2400c42a:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
2400c42e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
2400c432:	4322      	orrs	r2, r4
2400c434:	6a4c      	ldr	r4, [r1, #36]	; 0x24
2400c436:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
2400c438:	4b0a      	ldr	r3, [pc, #40]	; (2400c464 <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
2400c43a:	4322      	orrs	r2, r4
2400c43c:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
2400c43e:	6842      	ldr	r2, [r0, #4]
2400c440:	4013      	ands	r3, r2
2400c442:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
2400c446:	4323      	orrs	r3, r4
2400c448:	4313      	orrs	r3, r2
2400c44a:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
2400c44e:	4323      	orrs	r3, r4
2400c450:	4313      	orrs	r3, r2
2400c452:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
2400c456:	4323      	orrs	r3, r4
2400c458:	4313      	orrs	r3, r2
2400c45a:	6043      	str	r3, [r0, #4]
}
2400c45c:	2000      	movs	r0, #0
2400c45e:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c462:	4770      	bx	lr
2400c464:	ffff8000 	.word	0xffff8000

2400c468 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
2400c468:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
2400c46a:	bb0a      	cbnz	r2, 2400c4b0 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
2400c46c:	6883      	ldr	r3, [r0, #8]
2400c46e:	e9d1 2400 	ldrd	r2, r4, [r1]
2400c472:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
2400c476:	3c01      	subs	r4, #1
2400c478:	3a01      	subs	r2, #1
2400c47a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
2400c47e:	4313      	orrs	r3, r2
2400c480:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
2400c484:	3c01      	subs	r4, #1
2400c486:	3a01      	subs	r2, #1
2400c488:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
2400c48c:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
2400c490:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
2400c494:	698a      	ldr	r2, [r1, #24]
2400c496:	3d01      	subs	r5, #1
2400c498:	1e61      	subs	r1, r4, #1
2400c49a:	3a01      	subs	r2, #1
2400c49c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
2400c4a0:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
2400c4a4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
2400c4a8:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
2400c4aa:	2000      	movs	r0, #0
2400c4ac:	bc30      	pop	{r4, r5}
2400c4ae:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
2400c4b0:	6885      	ldr	r5, [r0, #8]
2400c4b2:	68ca      	ldr	r2, [r1, #12]
2400c4b4:	4b12      	ldr	r3, [pc, #72]	; (2400c500 <FMC_SDRAM_Timing_Init+0x98>)
2400c4b6:	1e54      	subs	r4, r2, #1
2400c4b8:	694a      	ldr	r2, [r1, #20]
2400c4ba:	402b      	ands	r3, r5
2400c4bc:	3a01      	subs	r2, #1
2400c4be:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
2400c4c2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
2400c4c6:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
2400c4c8:	68c3      	ldr	r3, [r0, #12]
2400c4ca:	688d      	ldr	r5, [r1, #8]
2400c4cc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
2400c4d0:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
2400c4d4:	e9d1 2400 	ldrd	r2, r4, [r1]
2400c4d8:	3c01      	subs	r4, #1
2400c4da:	3a01      	subs	r2, #1
2400c4dc:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
2400c4e0:	690c      	ldr	r4, [r1, #16]
2400c4e2:	4313      	orrs	r3, r2
2400c4e4:	698a      	ldr	r2, [r1, #24]
2400c4e6:	1e61      	subs	r1, r4, #1
2400c4e8:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
2400c4ec:	3a01      	subs	r2, #1
2400c4ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
2400c4f2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
2400c4f6:	60c3      	str	r3, [r0, #12]
}
2400c4f8:	2000      	movs	r0, #0
2400c4fa:	bc30      	pop	{r4, r5}
2400c4fc:	4770      	bx	lr
2400c4fe:	bf00      	nop
2400c500:	ff0f0fff 	.word	0xff0f0fff

2400c504 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
2400c504:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
2400c506:	e9d1 3400 	ldrd	r3, r4, [r1]
{
2400c50a:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
2400c50c:	6900      	ldr	r0, [r0, #16]
2400c50e:	4323      	orrs	r3, r4
2400c510:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
2400c514:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
2400c518:	4c05      	ldr	r4, [pc, #20]	; (2400c530 <FMC_SDRAM_SendCommand+0x2c>)
2400c51a:	3901      	subs	r1, #1
2400c51c:	4004      	ands	r4, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
2400c51e:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
2400c520:	4323      	orrs	r3, r4
2400c522:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
2400c526:	6113      	str	r3, [r2, #16]
}
2400c528:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c52c:	4770      	bx	lr
2400c52e:	bf00      	nop
2400c530:	ffc00000 	.word	0xffc00000

2400c534 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
2400c534:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
2400c536:	4b05      	ldr	r3, [pc, #20]	; (2400c54c <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
2400c538:	2000      	movs	r0, #0
{
2400c53a:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
2400c53c:	6954      	ldr	r4, [r2, #20]
2400c53e:	4023      	ands	r3, r4
2400c540:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
2400c544:	6151      	str	r1, [r2, #20]
}
2400c546:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c54a:	4770      	bx	lr
2400c54c:	ffffc001 	.word	0xffffc001

2400c550 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
2400c550:	b084      	sub	sp, #16
2400c552:	b410      	push	{r4}
2400c554:	f10d 0c08 	add.w	ip, sp, #8
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
2400c558:	4614      	mov	r4, r2
{
2400c55a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
2400c55e:	460b      	mov	r3, r1
             Init.ClockPowerSave      | \
2400c560:	9904      	ldr	r1, [sp, #16]
{
2400c562:	4602      	mov	r2, r0
             Init.BusWide             | \
2400c564:	9805      	ldr	r0, [sp, #20]
  tmpreg |= (Init.ClockEdge           | \
2400c566:	4323      	orrs	r3, r4
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
2400c568:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      | \
2400c56a:	430b      	orrs	r3, r1
             Init.HardwareFlowControl | \
2400c56c:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             | \
2400c56e:	4303      	orrs	r3, r0

  return HAL_OK;
}
2400c570:	2000      	movs	r0, #0
             Init.HardwareFlowControl | \
2400c572:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
2400c574:	4903      	ldr	r1, [pc, #12]	; (2400c584 <SDMMC_Init+0x34>)
2400c576:	4021      	ands	r1, r4
2400c578:	430b      	orrs	r3, r1
2400c57a:	6053      	str	r3, [r2, #4]
}
2400c57c:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c580:	b004      	add	sp, #16
2400c582:	4770      	bx	lr
2400c584:	ffc02c00 	.word	0xffc02c00

2400c588 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
2400c588:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
2400c58c:	4770      	bx	lr
2400c58e:	bf00      	nop

2400c590 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
2400c590:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
2400c592:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
2400c594:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
2400c596:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
2400c59a:	4770      	bx	lr

2400c59c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
2400c59c:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
2400c59e:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
2400c5a0:	681a      	ldr	r2, [r3, #0]
2400c5a2:	f042 0203 	orr.w	r2, r2, #3
2400c5a6:	601a      	str	r2, [r3, #0]
}
2400c5a8:	4770      	bx	lr
2400c5aa:	bf00      	nop

2400c5ac <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
2400c5ac:	6800      	ldr	r0, [r0, #0]
}
2400c5ae:	f000 0003 	and.w	r0, r0, #3
2400c5b2:	4770      	bx	lr

2400c5b4 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
2400c5b4:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
2400c5b6:	5840      	ldr	r0, [r0, r1]
}
2400c5b8:	4770      	bx	lr
2400c5ba:	bf00      	nop

2400c5bc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
2400c5bc:	b430      	push	{r4, r5}
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
2400c5be:	680b      	ldr	r3, [r1, #0]
{
2400c5c0:	4602      	mov	r2, r0
  SDMMCx->DTIMER = Data->DataTimeOut;
2400c5c2:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
2400c5c4:	684b      	ldr	r3, [r1, #4]
2400c5c6:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
                       Data->TransferDir   | \
2400c5c8:	690d      	ldr	r5, [r1, #16]
                       Data->TransferMode  | \
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
2400c5ca:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
2400c5cc:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
2400c5d0:	4323      	orrs	r3, r4
                       Data->TransferMode  | \
2400c5d2:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
2400c5d4:	f020 01ff 	bic.w	r1, r0, #255	; 0xff

  return HAL_OK;

}
2400c5d8:	2000      	movs	r0, #0
                       Data->TransferDir   | \
2400c5da:	432b      	orrs	r3, r5
                       Data->TransferMode  | \
2400c5dc:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
2400c5de:	430b      	orrs	r3, r1
2400c5e0:	62d3      	str	r3, [r2, #44]	; 0x2c
}
2400c5e2:	bc30      	pop	{r4, r5}
2400c5e4:	4770      	bx	lr
2400c5e6:	bf00      	nop

2400c5e8 <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c5e8:	4a50      	ldr	r2, [pc, #320]	; (2400c72c <SDMMC_CmdBlockLength+0x144>)
{
2400c5ea:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c5ec:	4b50      	ldr	r3, [pc, #320]	; (2400c730 <SDMMC_CmdBlockLength+0x148>)
2400c5ee:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c5f0:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c5f4:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c5f8:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400c5fc:	484d      	ldr	r0, [pc, #308]	; (2400c734 <SDMMC_CmdBlockLength+0x14c>)
2400c5fe:	f241 1310 	movw	r3, #4368	; 0x1110
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c602:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c604:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c606:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c60a:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c60c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c610:	f8cc 300c 	str.w	r3, [ip, #12]

  do
  {
    if (count-- == 0U)
2400c614:	1e53      	subs	r3, r2, #1
2400c616:	b14a      	cbz	r2, 2400c62c <SDMMC_CmdBlockLength+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c618:	4947      	ldr	r1, [pc, #284]	; (2400c738 <SDMMC_CmdBlockLength+0x150>)
    sta_reg = SDMMCx->STA;
2400c61a:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400c61e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c620:	420a      	tst	r2, r1
2400c622:	d001      	beq.n	2400c628 <SDMMC_CmdBlockLength+0x40>
2400c624:	0492      	lsls	r2, r2, #18
2400c626:	d504      	bpl.n	2400c632 <SDMMC_CmdBlockLength+0x4a>
    if (count-- == 0U)
2400c628:	1c58      	adds	r0, r3, #1
2400c62a:	d1f6      	bne.n	2400c61a <SDMMC_CmdBlockLength+0x32>
      return SDMMC_ERROR_TIMEOUT;
2400c62c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400c630:	4770      	bx	lr

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c632:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400c636:	0758      	lsls	r0, r3, #29
2400c638:	d445      	bmi.n	2400c6c6 <SDMMC_CmdBlockLength+0xde>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c63a:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400c63e:	f010 0001 	ands.w	r0, r0, #1
2400c642:	d137      	bne.n	2400c6b4 <SDMMC_CmdBlockLength+0xcc>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c644:	4b3d      	ldr	r3, [pc, #244]	; (2400c73c <SDMMC_CmdBlockLength+0x154>)
2400c646:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c64a:	f8dc 3010 	ldr.w	r3, [ip, #16]

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c64e:	b2db      	uxtb	r3, r3
2400c650:	2b10      	cmp	r3, #16
2400c652:	d136      	bne.n	2400c6c2 <SDMMC_CmdBlockLength+0xda>
  return (*(__IO uint32_t *) tmp);
2400c654:	f8dc 3014 	ldr.w	r3, [ip, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c658:	4839      	ldr	r0, [pc, #228]	; (2400c740 <SDMMC_CmdBlockLength+0x158>)
2400c65a:	4018      	ands	r0, r3
2400c65c:	2800      	cmp	r0, #0
2400c65e:	d02f      	beq.n	2400c6c0 <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_NONE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c660:	2b00      	cmp	r3, #0
2400c662:	db35      	blt.n	2400c6d0 <SDMMC_CmdBlockLength+0xe8>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c664:	0059      	lsls	r1, r3, #1
2400c666:	d436      	bmi.n	2400c6d6 <SDMMC_CmdBlockLength+0xee>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c668:	009a      	lsls	r2, r3, #2
2400c66a:	d436      	bmi.n	2400c6da <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c66c:	00d9      	lsls	r1, r3, #3
2400c66e:	d436      	bmi.n	2400c6de <SDMMC_CmdBlockLength+0xf6>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c670:	011a      	lsls	r2, r3, #4
2400c672:	d437      	bmi.n	2400c6e4 <SDMMC_CmdBlockLength+0xfc>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c674:	0159      	lsls	r1, r3, #5
2400c676:	d438      	bmi.n	2400c6ea <SDMMC_CmdBlockLength+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c678:	01da      	lsls	r2, r3, #7
2400c67a:	d439      	bmi.n	2400c6f0 <SDMMC_CmdBlockLength+0x108>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c67c:	0219      	lsls	r1, r3, #8
2400c67e:	d43a      	bmi.n	2400c6f6 <SDMMC_CmdBlockLength+0x10e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c680:	025a      	lsls	r2, r3, #9
2400c682:	d43b      	bmi.n	2400c6fc <SDMMC_CmdBlockLength+0x114>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c684:	0299      	lsls	r1, r3, #10
2400c686:	d445      	bmi.n	2400c714 <SDMMC_CmdBlockLength+0x12c>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c688:	02da      	lsls	r2, r3, #11
2400c68a:	d440      	bmi.n	2400c70e <SDMMC_CmdBlockLength+0x126>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c68c:	0359      	lsls	r1, r3, #13
2400c68e:	d43b      	bmi.n	2400c708 <SDMMC_CmdBlockLength+0x120>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c690:	039a      	lsls	r2, r3, #14
2400c692:	d436      	bmi.n	2400c702 <SDMMC_CmdBlockLength+0x11a>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c694:	03d9      	lsls	r1, r3, #15
2400c696:	d446      	bmi.n	2400c726 <SDMMC_CmdBlockLength+0x13e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c698:	041a      	lsls	r2, r3, #16
2400c69a:	d441      	bmi.n	2400c720 <SDMMC_CmdBlockLength+0x138>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c69c:	0459      	lsls	r1, r3, #17
2400c69e:	d43c      	bmi.n	2400c71a <SDMMC_CmdBlockLength+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c6a0:	049a      	lsls	r2, r3, #18
2400c6a2:	d40b      	bmi.n	2400c6bc <SDMMC_CmdBlockLength+0xd4>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c6a4:	f013 0f08 	tst.w	r3, #8
2400c6a8:	bf14      	ite	ne
2400c6aa:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400c6ae:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400c6b2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c6b4:	2301      	movs	r3, #1
2400c6b6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c6ba:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
2400c6bc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
2400c6c0:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c6c2:	2001      	movs	r0, #1
2400c6c4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c6c6:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c6c8:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c6ca:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c6ce:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c6d0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400c6d4:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c6d6:	2040      	movs	r0, #64	; 0x40
2400c6d8:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c6da:	2080      	movs	r0, #128	; 0x80
2400c6dc:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c6de:	f44f 7080 	mov.w	r0, #256	; 0x100
2400c6e2:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c6e4:	f44f 7000 	mov.w	r0, #512	; 0x200
2400c6e8:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c6ea:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400c6ee:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c6f0:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400c6f4:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c6f6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400c6fa:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c6fc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400c700:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c702:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400c706:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c708:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400c70c:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
2400c70e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400c712:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c714:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400c718:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c71a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400c71e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c720:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400c724:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c726:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400c72a:	4770      	bx	lr
2400c72c:	200008b4 	.word	0x200008b4
2400c730:	10624dd3 	.word	0x10624dd3
2400c734:	fffee0c0 	.word	0xfffee0c0
2400c738:	00200045 	.word	0x00200045
2400c73c:	002000c5 	.word	0x002000c5
2400c740:	fdffe008 	.word	0xfdffe008

2400c744 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c744:	4a50      	ldr	r2, [pc, #320]	; (2400c888 <SDMMC_CmdReadSingleBlock+0x144>)
{
2400c746:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c748:	4b50      	ldr	r3, [pc, #320]	; (2400c88c <SDMMC_CmdReadSingleBlock+0x148>)
2400c74a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c74c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c750:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c754:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400c758:	484d      	ldr	r0, [pc, #308]	; (2400c890 <SDMMC_CmdReadSingleBlock+0x14c>)
2400c75a:	f241 1311 	movw	r3, #4369	; 0x1111
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c75e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c760:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c762:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c766:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c768:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c76c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400c770:	1e53      	subs	r3, r2, #1
2400c772:	b14a      	cbz	r2, 2400c788 <SDMMC_CmdReadSingleBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c774:	4947      	ldr	r1, [pc, #284]	; (2400c894 <SDMMC_CmdReadSingleBlock+0x150>)
    sta_reg = SDMMCx->STA;
2400c776:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400c77a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c77c:	420a      	tst	r2, r1
2400c77e:	d001      	beq.n	2400c784 <SDMMC_CmdReadSingleBlock+0x40>
2400c780:	0492      	lsls	r2, r2, #18
2400c782:	d504      	bpl.n	2400c78e <SDMMC_CmdReadSingleBlock+0x4a>
    if (count-- == 0U)
2400c784:	1c58      	adds	r0, r3, #1
2400c786:	d1f6      	bne.n	2400c776 <SDMMC_CmdReadSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
2400c788:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400c78c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c78e:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400c792:	0758      	lsls	r0, r3, #29
2400c794:	d445      	bmi.n	2400c822 <SDMMC_CmdReadSingleBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c796:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400c79a:	f010 0001 	ands.w	r0, r0, #1
2400c79e:	d137      	bne.n	2400c810 <SDMMC_CmdReadSingleBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c7a0:	4b3d      	ldr	r3, [pc, #244]	; (2400c898 <SDMMC_CmdReadSingleBlock+0x154>)
2400c7a2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c7a6:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c7aa:	b2db      	uxtb	r3, r3
2400c7ac:	2b11      	cmp	r3, #17
2400c7ae:	d136      	bne.n	2400c81e <SDMMC_CmdReadSingleBlock+0xda>
  return (*(__IO uint32_t *) tmp);
2400c7b0:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c7b4:	4839      	ldr	r0, [pc, #228]	; (2400c89c <SDMMC_CmdReadSingleBlock+0x158>)
2400c7b6:	4018      	ands	r0, r3
2400c7b8:	2800      	cmp	r0, #0
2400c7ba:	d02f      	beq.n	2400c81c <SDMMC_CmdReadSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c7bc:	2b00      	cmp	r3, #0
2400c7be:	db35      	blt.n	2400c82c <SDMMC_CmdReadSingleBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c7c0:	0059      	lsls	r1, r3, #1
2400c7c2:	d436      	bmi.n	2400c832 <SDMMC_CmdReadSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c7c4:	009a      	lsls	r2, r3, #2
2400c7c6:	d436      	bmi.n	2400c836 <SDMMC_CmdReadSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c7c8:	00d9      	lsls	r1, r3, #3
2400c7ca:	d436      	bmi.n	2400c83a <SDMMC_CmdReadSingleBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c7cc:	011a      	lsls	r2, r3, #4
2400c7ce:	d437      	bmi.n	2400c840 <SDMMC_CmdReadSingleBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c7d0:	0159      	lsls	r1, r3, #5
2400c7d2:	d438      	bmi.n	2400c846 <SDMMC_CmdReadSingleBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c7d4:	01da      	lsls	r2, r3, #7
2400c7d6:	d439      	bmi.n	2400c84c <SDMMC_CmdReadSingleBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c7d8:	0219      	lsls	r1, r3, #8
2400c7da:	d43a      	bmi.n	2400c852 <SDMMC_CmdReadSingleBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c7dc:	025a      	lsls	r2, r3, #9
2400c7de:	d43b      	bmi.n	2400c858 <SDMMC_CmdReadSingleBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c7e0:	0299      	lsls	r1, r3, #10
2400c7e2:	d445      	bmi.n	2400c870 <SDMMC_CmdReadSingleBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c7e4:	02da      	lsls	r2, r3, #11
2400c7e6:	d440      	bmi.n	2400c86a <SDMMC_CmdReadSingleBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c7e8:	0359      	lsls	r1, r3, #13
2400c7ea:	d43b      	bmi.n	2400c864 <SDMMC_CmdReadSingleBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c7ec:	039a      	lsls	r2, r3, #14
2400c7ee:	d436      	bmi.n	2400c85e <SDMMC_CmdReadSingleBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c7f0:	03d9      	lsls	r1, r3, #15
2400c7f2:	d446      	bmi.n	2400c882 <SDMMC_CmdReadSingleBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c7f4:	041a      	lsls	r2, r3, #16
2400c7f6:	d441      	bmi.n	2400c87c <SDMMC_CmdReadSingleBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c7f8:	0459      	lsls	r1, r3, #17
2400c7fa:	d43c      	bmi.n	2400c876 <SDMMC_CmdReadSingleBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c7fc:	049a      	lsls	r2, r3, #18
2400c7fe:	d40b      	bmi.n	2400c818 <SDMMC_CmdReadSingleBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c800:	f013 0f08 	tst.w	r3, #8
2400c804:	bf14      	ite	ne
2400c806:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400c80a:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400c80e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c810:	2301      	movs	r3, #1
2400c812:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c816:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
2400c818:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
2400c81c:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c81e:	2001      	movs	r0, #1
2400c820:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c822:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c824:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c826:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c82a:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c82c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400c830:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c832:	2040      	movs	r0, #64	; 0x40
2400c834:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c836:	2080      	movs	r0, #128	; 0x80
2400c838:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c83a:	f44f 7080 	mov.w	r0, #256	; 0x100
2400c83e:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c840:	f44f 7000 	mov.w	r0, #512	; 0x200
2400c844:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c846:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400c84a:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c84c:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400c850:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c852:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400c856:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c858:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400c85c:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c85e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400c862:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c864:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400c868:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
2400c86a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400c86e:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c870:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400c874:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c876:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400c87a:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c87c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400c880:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c882:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400c886:	4770      	bx	lr
2400c888:	200008b4 	.word	0x200008b4
2400c88c:	10624dd3 	.word	0x10624dd3
2400c890:	fffee0c0 	.word	0xfffee0c0
2400c894:	00200045 	.word	0x00200045
2400c898:	002000c5 	.word	0x002000c5
2400c89c:	fdffe008 	.word	0xfdffe008

2400c8a0 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c8a0:	4a50      	ldr	r2, [pc, #320]	; (2400c9e4 <SDMMC_CmdReadMultiBlock+0x144>)
{
2400c8a2:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c8a4:	4b50      	ldr	r3, [pc, #320]	; (2400c9e8 <SDMMC_CmdReadMultiBlock+0x148>)
2400c8a6:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c8a8:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c8ac:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c8b0:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400c8b4:	484d      	ldr	r0, [pc, #308]	; (2400c9ec <SDMMC_CmdReadMultiBlock+0x14c>)
2400c8b6:	f241 1312 	movw	r3, #4370	; 0x1112
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c8ba:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c8bc:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c8be:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c8c2:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c8c4:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c8c8:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400c8cc:	1e53      	subs	r3, r2, #1
2400c8ce:	b14a      	cbz	r2, 2400c8e4 <SDMMC_CmdReadMultiBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c8d0:	4947      	ldr	r1, [pc, #284]	; (2400c9f0 <SDMMC_CmdReadMultiBlock+0x150>)
    sta_reg = SDMMCx->STA;
2400c8d2:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400c8d6:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c8d8:	420a      	tst	r2, r1
2400c8da:	d001      	beq.n	2400c8e0 <SDMMC_CmdReadMultiBlock+0x40>
2400c8dc:	0492      	lsls	r2, r2, #18
2400c8de:	d504      	bpl.n	2400c8ea <SDMMC_CmdReadMultiBlock+0x4a>
    if (count-- == 0U)
2400c8e0:	1c58      	adds	r0, r3, #1
2400c8e2:	d1f6      	bne.n	2400c8d2 <SDMMC_CmdReadMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
2400c8e4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400c8e8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c8ea:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400c8ee:	0758      	lsls	r0, r3, #29
2400c8f0:	d445      	bmi.n	2400c97e <SDMMC_CmdReadMultiBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c8f2:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400c8f6:	f010 0001 	ands.w	r0, r0, #1
2400c8fa:	d137      	bne.n	2400c96c <SDMMC_CmdReadMultiBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c8fc:	4b3d      	ldr	r3, [pc, #244]	; (2400c9f4 <SDMMC_CmdReadMultiBlock+0x154>)
2400c8fe:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c902:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c906:	b2db      	uxtb	r3, r3
2400c908:	2b12      	cmp	r3, #18
2400c90a:	d136      	bne.n	2400c97a <SDMMC_CmdReadMultiBlock+0xda>
  return (*(__IO uint32_t *) tmp);
2400c90c:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c910:	4839      	ldr	r0, [pc, #228]	; (2400c9f8 <SDMMC_CmdReadMultiBlock+0x158>)
2400c912:	4018      	ands	r0, r3
2400c914:	2800      	cmp	r0, #0
2400c916:	d02f      	beq.n	2400c978 <SDMMC_CmdReadMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c918:	2b00      	cmp	r3, #0
2400c91a:	db35      	blt.n	2400c988 <SDMMC_CmdReadMultiBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c91c:	0059      	lsls	r1, r3, #1
2400c91e:	d436      	bmi.n	2400c98e <SDMMC_CmdReadMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c920:	009a      	lsls	r2, r3, #2
2400c922:	d436      	bmi.n	2400c992 <SDMMC_CmdReadMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c924:	00d9      	lsls	r1, r3, #3
2400c926:	d436      	bmi.n	2400c996 <SDMMC_CmdReadMultiBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c928:	011a      	lsls	r2, r3, #4
2400c92a:	d437      	bmi.n	2400c99c <SDMMC_CmdReadMultiBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c92c:	0159      	lsls	r1, r3, #5
2400c92e:	d438      	bmi.n	2400c9a2 <SDMMC_CmdReadMultiBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c930:	01da      	lsls	r2, r3, #7
2400c932:	d439      	bmi.n	2400c9a8 <SDMMC_CmdReadMultiBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c934:	0219      	lsls	r1, r3, #8
2400c936:	d43a      	bmi.n	2400c9ae <SDMMC_CmdReadMultiBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c938:	025a      	lsls	r2, r3, #9
2400c93a:	d43b      	bmi.n	2400c9b4 <SDMMC_CmdReadMultiBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c93c:	0299      	lsls	r1, r3, #10
2400c93e:	d445      	bmi.n	2400c9cc <SDMMC_CmdReadMultiBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c940:	02da      	lsls	r2, r3, #11
2400c942:	d440      	bmi.n	2400c9c6 <SDMMC_CmdReadMultiBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c944:	0359      	lsls	r1, r3, #13
2400c946:	d43b      	bmi.n	2400c9c0 <SDMMC_CmdReadMultiBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c948:	039a      	lsls	r2, r3, #14
2400c94a:	d436      	bmi.n	2400c9ba <SDMMC_CmdReadMultiBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c94c:	03d9      	lsls	r1, r3, #15
2400c94e:	d446      	bmi.n	2400c9de <SDMMC_CmdReadMultiBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c950:	041a      	lsls	r2, r3, #16
2400c952:	d441      	bmi.n	2400c9d8 <SDMMC_CmdReadMultiBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c954:	0459      	lsls	r1, r3, #17
2400c956:	d43c      	bmi.n	2400c9d2 <SDMMC_CmdReadMultiBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c958:	049a      	lsls	r2, r3, #18
2400c95a:	d40b      	bmi.n	2400c974 <SDMMC_CmdReadMultiBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c95c:	f013 0f08 	tst.w	r3, #8
2400c960:	bf14      	ite	ne
2400c962:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400c966:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400c96a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c96c:	2301      	movs	r3, #1
2400c96e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c972:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
2400c974:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
2400c978:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c97a:	2001      	movs	r0, #1
2400c97c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c97e:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c980:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c982:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c986:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c988:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400c98c:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c98e:	2040      	movs	r0, #64	; 0x40
2400c990:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c992:	2080      	movs	r0, #128	; 0x80
2400c994:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c996:	f44f 7080 	mov.w	r0, #256	; 0x100
2400c99a:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c99c:	f44f 7000 	mov.w	r0, #512	; 0x200
2400c9a0:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c9a2:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400c9a6:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c9a8:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400c9ac:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c9ae:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400c9b2:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c9b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400c9b8:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c9ba:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400c9be:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c9c0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400c9c4:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
2400c9c6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400c9ca:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c9cc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400c9d0:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c9d2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400c9d6:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c9d8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400c9dc:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c9de:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400c9e2:	4770      	bx	lr
2400c9e4:	200008b4 	.word	0x200008b4
2400c9e8:	10624dd3 	.word	0x10624dd3
2400c9ec:	fffee0c0 	.word	0xfffee0c0
2400c9f0:	00200045 	.word	0x00200045
2400c9f4:	002000c5 	.word	0x002000c5
2400c9f8:	fdffe008 	.word	0xfdffe008

2400c9fc <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c9fc:	4a50      	ldr	r2, [pc, #320]	; (2400cb40 <SDMMC_CmdWriteSingleBlock+0x144>)
{
2400c9fe:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ca00:	4b50      	ldr	r3, [pc, #320]	; (2400cb44 <SDMMC_CmdWriteSingleBlock+0x148>)
2400ca02:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400ca04:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ca08:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ca0c:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400ca10:	484d      	ldr	r0, [pc, #308]	; (2400cb48 <SDMMC_CmdWriteSingleBlock+0x14c>)
2400ca12:	f241 1318 	movw	r3, #4376	; 0x1118
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ca16:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ca18:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ca1a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ca1e:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ca20:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ca24:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400ca28:	1e53      	subs	r3, r2, #1
2400ca2a:	b14a      	cbz	r2, 2400ca40 <SDMMC_CmdWriteSingleBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400ca2c:	4947      	ldr	r1, [pc, #284]	; (2400cb4c <SDMMC_CmdWriteSingleBlock+0x150>)
    sta_reg = SDMMCx->STA;
2400ca2e:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400ca32:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400ca34:	420a      	tst	r2, r1
2400ca36:	d001      	beq.n	2400ca3c <SDMMC_CmdWriteSingleBlock+0x40>
2400ca38:	0492      	lsls	r2, r2, #18
2400ca3a:	d504      	bpl.n	2400ca46 <SDMMC_CmdWriteSingleBlock+0x4a>
    if (count-- == 0U)
2400ca3c:	1c58      	adds	r0, r3, #1
2400ca3e:	d1f6      	bne.n	2400ca2e <SDMMC_CmdWriteSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
2400ca40:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400ca44:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400ca46:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400ca4a:	0758      	lsls	r0, r3, #29
2400ca4c:	d445      	bmi.n	2400cada <SDMMC_CmdWriteSingleBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400ca4e:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400ca52:	f010 0001 	ands.w	r0, r0, #1
2400ca56:	d137      	bne.n	2400cac8 <SDMMC_CmdWriteSingleBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400ca58:	4b3d      	ldr	r3, [pc, #244]	; (2400cb50 <SDMMC_CmdWriteSingleBlock+0x154>)
2400ca5a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400ca5e:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400ca62:	b2db      	uxtb	r3, r3
2400ca64:	2b18      	cmp	r3, #24
2400ca66:	d136      	bne.n	2400cad6 <SDMMC_CmdWriteSingleBlock+0xda>
  return (*(__IO uint32_t *) tmp);
2400ca68:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400ca6c:	4839      	ldr	r0, [pc, #228]	; (2400cb54 <SDMMC_CmdWriteSingleBlock+0x158>)
2400ca6e:	4018      	ands	r0, r3
2400ca70:	2800      	cmp	r0, #0
2400ca72:	d02f      	beq.n	2400cad4 <SDMMC_CmdWriteSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400ca74:	2b00      	cmp	r3, #0
2400ca76:	db35      	blt.n	2400cae4 <SDMMC_CmdWriteSingleBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400ca78:	0059      	lsls	r1, r3, #1
2400ca7a:	d436      	bmi.n	2400caea <SDMMC_CmdWriteSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400ca7c:	009a      	lsls	r2, r3, #2
2400ca7e:	d436      	bmi.n	2400caee <SDMMC_CmdWriteSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400ca80:	00d9      	lsls	r1, r3, #3
2400ca82:	d436      	bmi.n	2400caf2 <SDMMC_CmdWriteSingleBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400ca84:	011a      	lsls	r2, r3, #4
2400ca86:	d437      	bmi.n	2400caf8 <SDMMC_CmdWriteSingleBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400ca88:	0159      	lsls	r1, r3, #5
2400ca8a:	d438      	bmi.n	2400cafe <SDMMC_CmdWriteSingleBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400ca8c:	01da      	lsls	r2, r3, #7
2400ca8e:	d439      	bmi.n	2400cb04 <SDMMC_CmdWriteSingleBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400ca90:	0219      	lsls	r1, r3, #8
2400ca92:	d43a      	bmi.n	2400cb0a <SDMMC_CmdWriteSingleBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400ca94:	025a      	lsls	r2, r3, #9
2400ca96:	d43b      	bmi.n	2400cb10 <SDMMC_CmdWriteSingleBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400ca98:	0299      	lsls	r1, r3, #10
2400ca9a:	d445      	bmi.n	2400cb28 <SDMMC_CmdWriteSingleBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400ca9c:	02da      	lsls	r2, r3, #11
2400ca9e:	d440      	bmi.n	2400cb22 <SDMMC_CmdWriteSingleBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400caa0:	0359      	lsls	r1, r3, #13
2400caa2:	d43b      	bmi.n	2400cb1c <SDMMC_CmdWriteSingleBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400caa4:	039a      	lsls	r2, r3, #14
2400caa6:	d436      	bmi.n	2400cb16 <SDMMC_CmdWriteSingleBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400caa8:	03d9      	lsls	r1, r3, #15
2400caaa:	d446      	bmi.n	2400cb3a <SDMMC_CmdWriteSingleBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400caac:	041a      	lsls	r2, r3, #16
2400caae:	d441      	bmi.n	2400cb34 <SDMMC_CmdWriteSingleBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400cab0:	0459      	lsls	r1, r3, #17
2400cab2:	d43c      	bmi.n	2400cb2e <SDMMC_CmdWriteSingleBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400cab4:	049a      	lsls	r2, r3, #18
2400cab6:	d40b      	bmi.n	2400cad0 <SDMMC_CmdWriteSingleBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400cab8:	f013 0f08 	tst.w	r3, #8
2400cabc:	bf14      	ite	ne
2400cabe:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400cac2:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400cac6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400cac8:	2301      	movs	r3, #1
2400caca:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400cace:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
2400cad0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
2400cad4:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400cad6:	2001      	movs	r0, #1
2400cad8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400cada:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cadc:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400cade:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cae2:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400cae4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400cae8:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400caea:	2040      	movs	r0, #64	; 0x40
2400caec:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400caee:	2080      	movs	r0, #128	; 0x80
2400caf0:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400caf2:	f44f 7080 	mov.w	r0, #256	; 0x100
2400caf6:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400caf8:	f44f 7000 	mov.w	r0, #512	; 0x200
2400cafc:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400cafe:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400cb02:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400cb04:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400cb08:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
2400cb0a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400cb0e:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
2400cb10:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400cb14:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400cb16:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400cb1a:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400cb1c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400cb20:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
2400cb22:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400cb26:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400cb28:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400cb2c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400cb2e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400cb32:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400cb34:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400cb38:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400cb3a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400cb3e:	4770      	bx	lr
2400cb40:	200008b4 	.word	0x200008b4
2400cb44:	10624dd3 	.word	0x10624dd3
2400cb48:	fffee0c0 	.word	0xfffee0c0
2400cb4c:	00200045 	.word	0x00200045
2400cb50:	002000c5 	.word	0x002000c5
2400cb54:	fdffe008 	.word	0xfdffe008

2400cb58 <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cb58:	4a50      	ldr	r2, [pc, #320]	; (2400cc9c <SDMMC_CmdWriteMultiBlock+0x144>)
{
2400cb5a:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cb5c:	4b50      	ldr	r3, [pc, #320]	; (2400cca0 <SDMMC_CmdWriteMultiBlock+0x148>)
2400cb5e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400cb60:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cb64:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cb68:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400cb6c:	484d      	ldr	r0, [pc, #308]	; (2400cca4 <SDMMC_CmdWriteMultiBlock+0x14c>)
2400cb6e:	f241 1319 	movw	r3, #4377	; 0x1119
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cb72:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cb74:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cb76:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cb7a:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cb7c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cb80:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400cb84:	1e53      	subs	r3, r2, #1
2400cb86:	b14a      	cbz	r2, 2400cb9c <SDMMC_CmdWriteMultiBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400cb88:	4947      	ldr	r1, [pc, #284]	; (2400cca8 <SDMMC_CmdWriteMultiBlock+0x150>)
    sta_reg = SDMMCx->STA;
2400cb8a:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400cb8e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400cb90:	420a      	tst	r2, r1
2400cb92:	d001      	beq.n	2400cb98 <SDMMC_CmdWriteMultiBlock+0x40>
2400cb94:	0492      	lsls	r2, r2, #18
2400cb96:	d504      	bpl.n	2400cba2 <SDMMC_CmdWriteMultiBlock+0x4a>
    if (count-- == 0U)
2400cb98:	1c58      	adds	r0, r3, #1
2400cb9a:	d1f6      	bne.n	2400cb8a <SDMMC_CmdWriteMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
2400cb9c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400cba0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400cba2:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400cba6:	0758      	lsls	r0, r3, #29
2400cba8:	d445      	bmi.n	2400cc36 <SDMMC_CmdWriteMultiBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400cbaa:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400cbae:	f010 0001 	ands.w	r0, r0, #1
2400cbb2:	d137      	bne.n	2400cc24 <SDMMC_CmdWriteMultiBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400cbb4:	4b3d      	ldr	r3, [pc, #244]	; (2400ccac <SDMMC_CmdWriteMultiBlock+0x154>)
2400cbb6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400cbba:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400cbbe:	b2db      	uxtb	r3, r3
2400cbc0:	2b19      	cmp	r3, #25
2400cbc2:	d136      	bne.n	2400cc32 <SDMMC_CmdWriteMultiBlock+0xda>
  return (*(__IO uint32_t *) tmp);
2400cbc4:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400cbc8:	4839      	ldr	r0, [pc, #228]	; (2400ccb0 <SDMMC_CmdWriteMultiBlock+0x158>)
2400cbca:	4018      	ands	r0, r3
2400cbcc:	2800      	cmp	r0, #0
2400cbce:	d02f      	beq.n	2400cc30 <SDMMC_CmdWriteMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400cbd0:	2b00      	cmp	r3, #0
2400cbd2:	db35      	blt.n	2400cc40 <SDMMC_CmdWriteMultiBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400cbd4:	0059      	lsls	r1, r3, #1
2400cbd6:	d436      	bmi.n	2400cc46 <SDMMC_CmdWriteMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400cbd8:	009a      	lsls	r2, r3, #2
2400cbda:	d436      	bmi.n	2400cc4a <SDMMC_CmdWriteMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400cbdc:	00d9      	lsls	r1, r3, #3
2400cbde:	d436      	bmi.n	2400cc4e <SDMMC_CmdWriteMultiBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400cbe0:	011a      	lsls	r2, r3, #4
2400cbe2:	d437      	bmi.n	2400cc54 <SDMMC_CmdWriteMultiBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400cbe4:	0159      	lsls	r1, r3, #5
2400cbe6:	d438      	bmi.n	2400cc5a <SDMMC_CmdWriteMultiBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400cbe8:	01da      	lsls	r2, r3, #7
2400cbea:	d439      	bmi.n	2400cc60 <SDMMC_CmdWriteMultiBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400cbec:	0219      	lsls	r1, r3, #8
2400cbee:	d43a      	bmi.n	2400cc66 <SDMMC_CmdWriteMultiBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400cbf0:	025a      	lsls	r2, r3, #9
2400cbf2:	d43b      	bmi.n	2400cc6c <SDMMC_CmdWriteMultiBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400cbf4:	0299      	lsls	r1, r3, #10
2400cbf6:	d445      	bmi.n	2400cc84 <SDMMC_CmdWriteMultiBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400cbf8:	02da      	lsls	r2, r3, #11
2400cbfa:	d440      	bmi.n	2400cc7e <SDMMC_CmdWriteMultiBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400cbfc:	0359      	lsls	r1, r3, #13
2400cbfe:	d43b      	bmi.n	2400cc78 <SDMMC_CmdWriteMultiBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400cc00:	039a      	lsls	r2, r3, #14
2400cc02:	d436      	bmi.n	2400cc72 <SDMMC_CmdWriteMultiBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400cc04:	03d9      	lsls	r1, r3, #15
2400cc06:	d446      	bmi.n	2400cc96 <SDMMC_CmdWriteMultiBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400cc08:	041a      	lsls	r2, r3, #16
2400cc0a:	d441      	bmi.n	2400cc90 <SDMMC_CmdWriteMultiBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400cc0c:	0459      	lsls	r1, r3, #17
2400cc0e:	d43c      	bmi.n	2400cc8a <SDMMC_CmdWriteMultiBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400cc10:	049a      	lsls	r2, r3, #18
2400cc12:	d40b      	bmi.n	2400cc2c <SDMMC_CmdWriteMultiBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400cc14:	f013 0f08 	tst.w	r3, #8
2400cc18:	bf14      	ite	ne
2400cc1a:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400cc1e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400cc22:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400cc24:	2301      	movs	r3, #1
2400cc26:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400cc2a:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
2400cc2c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
2400cc30:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400cc32:	2001      	movs	r0, #1
2400cc34:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400cc36:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cc38:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400cc3a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cc3e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400cc40:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400cc44:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400cc46:	2040      	movs	r0, #64	; 0x40
2400cc48:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400cc4a:	2080      	movs	r0, #128	; 0x80
2400cc4c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400cc4e:	f44f 7080 	mov.w	r0, #256	; 0x100
2400cc52:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400cc54:	f44f 7000 	mov.w	r0, #512	; 0x200
2400cc58:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400cc5a:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400cc5e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400cc60:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400cc64:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
2400cc66:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400cc6a:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
2400cc6c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400cc70:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400cc72:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400cc76:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400cc78:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400cc7c:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
2400cc7e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400cc82:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400cc84:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400cc88:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400cc8a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400cc8e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400cc90:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400cc94:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400cc96:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400cc9a:	4770      	bx	lr
2400cc9c:	200008b4 	.word	0x200008b4
2400cca0:	10624dd3 	.word	0x10624dd3
2400cca4:	fffee0c0 	.word	0xfffee0c0
2400cca8:	00200045 	.word	0x00200045
2400ccac:	002000c5 	.word	0x002000c5
2400ccb0:	fdffe008 	.word	0xfdffe008

2400ccb4 <SDMMC_CmdStopTransfer>:
{
2400ccb4:	b430      	push	{r4, r5}
2400ccb6:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ccb8:	4b7b      	ldr	r3, [pc, #492]	; (2400cea8 <SDMMC_CmdStopTransfer+0x1f4>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
2400ccba:	68c0      	ldr	r0, [r0, #12]
  SDMMCx->ARG = Command->Argument;
2400ccbc:	2500      	movs	r5, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ccbe:	4c7b      	ldr	r4, [pc, #492]	; (2400ceac <SDMMC_CmdStopTransfer+0x1f8>)
2400ccc0:	681a      	ldr	r2, [r3, #0]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
2400ccc2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ccc6:	4b7a      	ldr	r3, [pc, #488]	; (2400ceb0 <SDMMC_CmdStopTransfer+0x1fc>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
2400ccc8:	60c8      	str	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ccca:	fba4 4202 	umull	r4, r2, r4, r2
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
2400ccce:	68c8      	ldr	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ccd0:	4c78      	ldr	r4, [pc, #480]	; (2400ceb4 <SDMMC_CmdStopTransfer+0x200>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
2400ccd2:	f020 0040 	bic.w	r0, r0, #64	; 0x40
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ccd6:	0a52      	lsrs	r2, r2, #9
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
2400ccd8:	60c8      	str	r0, [r1, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ccda:	f241 100c 	movw	r0, #4364	; 0x110c
  SDMMCx->ARG = Command->Argument;
2400ccde:	608d      	str	r5, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cce0:	fb04 f202 	mul.w	r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cce4:	68cc      	ldr	r4, [r1, #12]
2400cce6:	4023      	ands	r3, r4
2400cce8:	4318      	orrs	r0, r3
2400ccea:	60c8      	str	r0, [r1, #12]
    if (count-- == 0U)
2400ccec:	b14a      	cbz	r2, 2400cd02 <SDMMC_CmdStopTransfer+0x4e>
2400ccee:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400ccf0:	4871      	ldr	r0, [pc, #452]	; (2400ceb8 <SDMMC_CmdStopTransfer+0x204>)
    sta_reg = SDMMCx->STA;
2400ccf2:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
2400ccf4:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400ccf6:	4202      	tst	r2, r0
2400ccf8:	d001      	beq.n	2400ccfe <SDMMC_CmdStopTransfer+0x4a>
2400ccfa:	0492      	lsls	r2, r2, #18
2400ccfc:	d509      	bpl.n	2400cd12 <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
2400ccfe:	1c5c      	adds	r4, r3, #1
2400cd00:	d1f7      	bne.n	2400ccf2 <SDMMC_CmdStopTransfer+0x3e>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cd02:	68cb      	ldr	r3, [r1, #12]
2400cd04:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400cd08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400cd0c:	60cb      	str	r3, [r1, #12]
}
2400cd0e:	bc30      	pop	{r4, r5}
2400cd10:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400cd12:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400cd14:	075b      	lsls	r3, r3, #29
2400cd16:	d452      	bmi.n	2400cdbe <SDMMC_CmdStopTransfer+0x10a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400cd18:	6b48      	ldr	r0, [r1, #52]	; 0x34
2400cd1a:	f010 0001 	ands.w	r0, r0, #1
2400cd1e:	d13b      	bne.n	2400cd98 <SDMMC_CmdStopTransfer+0xe4>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400cd20:	4b66      	ldr	r3, [pc, #408]	; (2400cebc <SDMMC_CmdStopTransfer+0x208>)
2400cd22:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400cd24:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400cd26:	b2db      	uxtb	r3, r3
2400cd28:	2b0c      	cmp	r3, #12
2400cd2a:	d142      	bne.n	2400cdb2 <SDMMC_CmdStopTransfer+0xfe>
  return (*(__IO uint32_t *) tmp);
2400cd2c:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400cd2e:	4a64      	ldr	r2, [pc, #400]	; (2400cec0 <SDMMC_CmdStopTransfer+0x20c>)
2400cd30:	401a      	ands	r2, r3
2400cd32:	2a00      	cmp	r2, #0
2400cd34:	d037      	beq.n	2400cda6 <SDMMC_CmdStopTransfer+0xf2>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400cd36:	2b00      	cmp	r3, #0
2400cd38:	db35      	blt.n	2400cda6 <SDMMC_CmdStopTransfer+0xf2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400cd3a:	005d      	lsls	r5, r3, #1
2400cd3c:	d446      	bmi.n	2400cdcc <SDMMC_CmdStopTransfer+0x118>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400cd3e:	009c      	lsls	r4, r3, #2
2400cd40:	d44a      	bmi.n	2400cdd8 <SDMMC_CmdStopTransfer+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400cd42:	00d8      	lsls	r0, r3, #3
2400cd44:	d44e      	bmi.n	2400cde4 <SDMMC_CmdStopTransfer+0x130>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400cd46:	011a      	lsls	r2, r3, #4
2400cd48:	d453      	bmi.n	2400cdf2 <SDMMC_CmdStopTransfer+0x13e>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400cd4a:	015d      	lsls	r5, r3, #5
2400cd4c:	d458      	bmi.n	2400ce00 <SDMMC_CmdStopTransfer+0x14c>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400cd4e:	01dc      	lsls	r4, r3, #7
2400cd50:	d464      	bmi.n	2400ce1c <SDMMC_CmdStopTransfer+0x168>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400cd52:	0218      	lsls	r0, r3, #8
2400cd54:	d45b      	bmi.n	2400ce0e <SDMMC_CmdStopTransfer+0x15a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400cd56:	025a      	lsls	r2, r3, #9
2400cd58:	d46e      	bmi.n	2400ce38 <SDMMC_CmdStopTransfer+0x184>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400cd5a:	029d      	lsls	r5, r3, #10
2400cd5c:	d465      	bmi.n	2400ce2a <SDMMC_CmdStopTransfer+0x176>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400cd5e:	02dc      	lsls	r4, r3, #11
2400cd60:	d47f      	bmi.n	2400ce62 <SDMMC_CmdStopTransfer+0x1ae>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400cd62:	0358      	lsls	r0, r3, #13
2400cd64:	d476      	bmi.n	2400ce54 <SDMMC_CmdStopTransfer+0x1a0>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400cd66:	039a      	lsls	r2, r3, #14
2400cd68:	d46d      	bmi.n	2400ce46 <SDMMC_CmdStopTransfer+0x192>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400cd6a:	03dd      	lsls	r5, r3, #15
2400cd6c:	f100 8095 	bmi.w	2400ce9a <SDMMC_CmdStopTransfer+0x1e6>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400cd70:	041c      	lsls	r4, r3, #16
2400cd72:	f100 8084 	bmi.w	2400ce7e <SDMMC_CmdStopTransfer+0x1ca>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400cd76:	0458      	lsls	r0, r3, #17
2400cd78:	d47a      	bmi.n	2400ce70 <SDMMC_CmdStopTransfer+0x1bc>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400cd7a:	049a      	lsls	r2, r3, #18
2400cd7c:	f100 8086 	bmi.w	2400ce8c <SDMMC_CmdStopTransfer+0x1d8>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
2400cd80:	f013 0f08 	tst.w	r3, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cd84:	68cb      	ldr	r3, [r1, #12]
2400cd86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
2400cd8a:	bf14      	ite	ne
2400cd8c:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400cd90:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cd94:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400cd96:	e7ba      	b.n	2400cd0e <SDMMC_CmdStopTransfer+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400cd98:	2301      	movs	r3, #1
2400cd9a:	638b      	str	r3, [r1, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cd9c:	68cb      	ldr	r3, [r1, #12]
2400cd9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400cda2:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400cda4:	e7b3      	b.n	2400cd0e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cda6:	68cb      	ldr	r3, [r1, #12]
2400cda8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400cdac:	60cb      	str	r3, [r1, #12]
}
2400cdae:	bc30      	pop	{r4, r5}
2400cdb0:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cdb2:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400cdb4:	2001      	movs	r0, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cdb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400cdba:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400cdbc:	e7a7      	b.n	2400cd0e <SDMMC_CmdStopTransfer+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400cdbe:	2004      	movs	r0, #4
2400cdc0:	6388      	str	r0, [r1, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cdc2:	68cb      	ldr	r3, [r1, #12]
2400cdc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400cdc8:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400cdca:	e7a0      	b.n	2400cd0e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cdcc:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400cdce:	2040      	movs	r0, #64	; 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cdd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400cdd4:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400cdd6:	e79a      	b.n	2400cd0e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cdd8:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400cdda:	2080      	movs	r0, #128	; 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cddc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400cde0:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400cde2:	e794      	b.n	2400cd0e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cde4:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400cde6:	f44f 7080 	mov.w	r0, #256	; 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cdea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400cdee:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400cdf0:	e78d      	b.n	2400cd0e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cdf2:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400cdf4:	f44f 7000 	mov.w	r0, #512	; 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cdf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400cdfc:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400cdfe:	e786      	b.n	2400cd0e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ce00:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400ce02:	f44f 6080 	mov.w	r0, #1024	; 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ce06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400ce0a:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400ce0c:	e77f      	b.n	2400cd0e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ce0e:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
2400ce10:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ce14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400ce18:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400ce1a:	e778      	b.n	2400cd0e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ce1c:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400ce1e:	f44f 6000 	mov.w	r0, #2048	; 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ce22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400ce26:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400ce28:	e771      	b.n	2400cd0e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ce2a:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400ce2c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ce30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400ce34:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400ce36:	e76a      	b.n	2400cd0e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ce38:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
2400ce3a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ce3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400ce42:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400ce44:	e763      	b.n	2400cd0e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ce46:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400ce48:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ce4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400ce50:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400ce52:	e75c      	b.n	2400cd0e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ce54:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400ce56:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ce5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400ce5e:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400ce60:	e755      	b.n	2400cd0e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ce62:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CC_ERR;
2400ce64:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ce68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400ce6c:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400ce6e:	e74e      	b.n	2400cd0e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ce70:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400ce72:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ce76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400ce7a:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400ce7c:	e747      	b.n	2400cd0e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ce7e:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400ce80:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ce84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400ce88:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400ce8a:	e740      	b.n	2400cd0e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ce8c:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_RESET;
2400ce8e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ce92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400ce96:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400ce98:	e739      	b.n	2400cd0e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ce9a:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400ce9c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cea0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400cea4:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400cea6:	e732      	b.n	2400cd0e <SDMMC_CmdStopTransfer+0x5a>
2400cea8:	200008b4 	.word	0x200008b4
2400ceac:	10624dd3 	.word	0x10624dd3
2400ceb0:	fffee0c0 	.word	0xfffee0c0
2400ceb4:	05f5e100 	.word	0x05f5e100
2400ceb8:	00200045 	.word	0x00200045
2400cebc:	002000c5 	.word	0x002000c5
2400cec0:	fdffe008 	.word	0xfdffe008

2400cec4 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cec4:	4a50      	ldr	r2, [pc, #320]	; (2400d008 <SDMMC_CmdSelDesel+0x144>)
{
2400cec6:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cec8:	4b50      	ldr	r3, [pc, #320]	; (2400d00c <SDMMC_CmdSelDesel+0x148>)
2400ceca:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400cecc:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ced0:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ced4:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400ced8:	484d      	ldr	r0, [pc, #308]	; (2400d010 <SDMMC_CmdSelDesel+0x14c>)
2400ceda:	f241 1307 	movw	r3, #4359	; 0x1107
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cede:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cee0:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cee2:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cee6:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cee8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ceec:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400cef0:	1e53      	subs	r3, r2, #1
2400cef2:	b14a      	cbz	r2, 2400cf08 <SDMMC_CmdSelDesel+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400cef4:	4947      	ldr	r1, [pc, #284]	; (2400d014 <SDMMC_CmdSelDesel+0x150>)
    sta_reg = SDMMCx->STA;
2400cef6:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400cefa:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400cefc:	420a      	tst	r2, r1
2400cefe:	d001      	beq.n	2400cf04 <SDMMC_CmdSelDesel+0x40>
2400cf00:	0492      	lsls	r2, r2, #18
2400cf02:	d504      	bpl.n	2400cf0e <SDMMC_CmdSelDesel+0x4a>
    if (count-- == 0U)
2400cf04:	1c58      	adds	r0, r3, #1
2400cf06:	d1f6      	bne.n	2400cef6 <SDMMC_CmdSelDesel+0x32>
      return SDMMC_ERROR_TIMEOUT;
2400cf08:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400cf0c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400cf0e:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400cf12:	0758      	lsls	r0, r3, #29
2400cf14:	d445      	bmi.n	2400cfa2 <SDMMC_CmdSelDesel+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400cf16:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400cf1a:	f010 0001 	ands.w	r0, r0, #1
2400cf1e:	d137      	bne.n	2400cf90 <SDMMC_CmdSelDesel+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400cf20:	4b3d      	ldr	r3, [pc, #244]	; (2400d018 <SDMMC_CmdSelDesel+0x154>)
2400cf22:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400cf26:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400cf2a:	b2db      	uxtb	r3, r3
2400cf2c:	2b07      	cmp	r3, #7
2400cf2e:	d136      	bne.n	2400cf9e <SDMMC_CmdSelDesel+0xda>
  return (*(__IO uint32_t *) tmp);
2400cf30:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400cf34:	4839      	ldr	r0, [pc, #228]	; (2400d01c <SDMMC_CmdSelDesel+0x158>)
2400cf36:	4018      	ands	r0, r3
2400cf38:	2800      	cmp	r0, #0
2400cf3a:	d02f      	beq.n	2400cf9c <SDMMC_CmdSelDesel+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400cf3c:	2b00      	cmp	r3, #0
2400cf3e:	db35      	blt.n	2400cfac <SDMMC_CmdSelDesel+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400cf40:	0059      	lsls	r1, r3, #1
2400cf42:	d436      	bmi.n	2400cfb2 <SDMMC_CmdSelDesel+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400cf44:	009a      	lsls	r2, r3, #2
2400cf46:	d436      	bmi.n	2400cfb6 <SDMMC_CmdSelDesel+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400cf48:	00d9      	lsls	r1, r3, #3
2400cf4a:	d436      	bmi.n	2400cfba <SDMMC_CmdSelDesel+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400cf4c:	011a      	lsls	r2, r3, #4
2400cf4e:	d437      	bmi.n	2400cfc0 <SDMMC_CmdSelDesel+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400cf50:	0159      	lsls	r1, r3, #5
2400cf52:	d438      	bmi.n	2400cfc6 <SDMMC_CmdSelDesel+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400cf54:	01da      	lsls	r2, r3, #7
2400cf56:	d439      	bmi.n	2400cfcc <SDMMC_CmdSelDesel+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400cf58:	0219      	lsls	r1, r3, #8
2400cf5a:	d43a      	bmi.n	2400cfd2 <SDMMC_CmdSelDesel+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400cf5c:	025a      	lsls	r2, r3, #9
2400cf5e:	d43b      	bmi.n	2400cfd8 <SDMMC_CmdSelDesel+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400cf60:	0299      	lsls	r1, r3, #10
2400cf62:	d445      	bmi.n	2400cff0 <SDMMC_CmdSelDesel+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400cf64:	02da      	lsls	r2, r3, #11
2400cf66:	d440      	bmi.n	2400cfea <SDMMC_CmdSelDesel+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400cf68:	0359      	lsls	r1, r3, #13
2400cf6a:	d43b      	bmi.n	2400cfe4 <SDMMC_CmdSelDesel+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400cf6c:	039a      	lsls	r2, r3, #14
2400cf6e:	d436      	bmi.n	2400cfde <SDMMC_CmdSelDesel+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400cf70:	03d9      	lsls	r1, r3, #15
2400cf72:	d446      	bmi.n	2400d002 <SDMMC_CmdSelDesel+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400cf74:	041a      	lsls	r2, r3, #16
2400cf76:	d441      	bmi.n	2400cffc <SDMMC_CmdSelDesel+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400cf78:	0459      	lsls	r1, r3, #17
2400cf7a:	d43c      	bmi.n	2400cff6 <SDMMC_CmdSelDesel+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400cf7c:	049a      	lsls	r2, r3, #18
2400cf7e:	d40b      	bmi.n	2400cf98 <SDMMC_CmdSelDesel+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400cf80:	f013 0f08 	tst.w	r3, #8
2400cf84:	bf14      	ite	ne
2400cf86:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400cf8a:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400cf8e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400cf90:	2301      	movs	r3, #1
2400cf92:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400cf96:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
2400cf98:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
2400cf9c:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400cf9e:	2001      	movs	r0, #1
2400cfa0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400cfa2:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cfa4:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400cfa6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cfaa:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400cfac:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400cfb0:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400cfb2:	2040      	movs	r0, #64	; 0x40
2400cfb4:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400cfb6:	2080      	movs	r0, #128	; 0x80
2400cfb8:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400cfba:	f44f 7080 	mov.w	r0, #256	; 0x100
2400cfbe:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400cfc0:	f44f 7000 	mov.w	r0, #512	; 0x200
2400cfc4:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400cfc6:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400cfca:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400cfcc:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400cfd0:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
2400cfd2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400cfd6:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
2400cfd8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400cfdc:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400cfde:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400cfe2:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400cfe4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400cfe8:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
2400cfea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400cfee:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400cff0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400cff4:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400cff6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400cffa:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400cffc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400d000:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400d002:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400d006:	4770      	bx	lr
2400d008:	200008b4 	.word	0x200008b4
2400d00c:	10624dd3 	.word	0x10624dd3
2400d010:	fffee0c0 	.word	0xfffee0c0
2400d014:	00200045 	.word	0x00200045
2400d018:	002000c5 	.word	0x002000c5
2400d01c:	fdffe008 	.word	0xfdffe008

2400d020 <SDMMC_CmdGoIdleState>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d020:	4b11      	ldr	r3, [pc, #68]	; (2400d068 <SDMMC_CmdGoIdleState+0x48>)
{
2400d022:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d024:	4a11      	ldr	r2, [pc, #68]	; (2400d06c <SDMMC_CmdGoIdleState+0x4c>)
{
2400d026:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d028:	4c11      	ldr	r4, [pc, #68]	; (2400d070 <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
2400d02a:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d02c:	681b      	ldr	r3, [r3, #0]
  SDMMCx->ARG = Command->Argument;
2400d02e:	6085      	str	r5, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d030:	fba4 4303 	umull	r4, r3, r4, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d034:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d036:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d03a:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d03c:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d03e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d042:	fb00 f303 	mul.w	r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d046:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d048:	e002      	b.n	2400d050 <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
2400d04a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
2400d04c:	0612      	lsls	r2, r2, #24
2400d04e:	d405      	bmi.n	2400d05c <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
2400d050:	3b01      	subs	r3, #1
2400d052:	d2fa      	bcs.n	2400d04a <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
2400d054:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400d058:	bc30      	pop	{r4, r5}
2400d05a:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400d05c:	4b05      	ldr	r3, [pc, #20]	; (2400d074 <SDMMC_CmdGoIdleState+0x54>)

  return SDMMC_ERROR_NONE;
2400d05e:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400d060:	638b      	str	r3, [r1, #56]	; 0x38
}
2400d062:	bc30      	pop	{r4, r5}
2400d064:	4770      	bx	lr
2400d066:	bf00      	nop
2400d068:	200008b4 	.word	0x200008b4
2400d06c:	fffee0c0 	.word	0xfffee0c0
2400d070:	10624dd3 	.word	0x10624dd3
2400d074:	002000c5 	.word	0x002000c5

2400d078 <SDMMC_CmdOperCond>:
{
2400d078:	b410      	push	{r4}
2400d07a:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
2400d07c:	f44f 74d5 	mov.w	r4, #426	; 0x1aa
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d080:	4a1a      	ldr	r2, [pc, #104]	; (2400d0ec <SDMMC_CmdOperCond+0x74>)
2400d082:	4b1b      	ldr	r3, [pc, #108]	; (2400d0f0 <SDMMC_CmdOperCond+0x78>)
  SDMMCx->ARG = Command->Argument;
2400d084:	608c      	str	r4, [r1, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d086:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d088:	68cc      	ldr	r4, [r1, #12]
2400d08a:	481a      	ldr	r0, [pc, #104]	; (2400d0f4 <SDMMC_CmdOperCond+0x7c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d08c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d090:	f241 1308 	movw	r3, #4360	; 0x1108
2400d094:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d096:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d098:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d09a:	f241 3088 	movw	r0, #5000	; 0x1388
2400d09e:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d0a2:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
2400d0a4:	b14a      	cbz	r2, 2400d0ba <SDMMC_CmdOperCond+0x42>
2400d0a6:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400d0a8:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
2400d0aa:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400d0ac:	f012 0f45 	tst.w	r2, #69	; 0x45
2400d0b0:	d001      	beq.n	2400d0b6 <SDMMC_CmdOperCond+0x3e>
2400d0b2:	0490      	lsls	r0, r2, #18
2400d0b4:	d506      	bpl.n	2400d0c4 <SDMMC_CmdOperCond+0x4c>
    if (count-- == 0U)
2400d0b6:	1c5c      	adds	r4, r3, #1
2400d0b8:	d1f6      	bne.n	2400d0a8 <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
2400d0ba:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400d0be:	f85d 4b04 	ldr.w	r4, [sp], #4
2400d0c2:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400d0c4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400d0c6:	075a      	lsls	r2, r3, #29
2400d0c8:	d40c      	bmi.n	2400d0e4 <SDMMC_CmdOperCond+0x6c>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400d0ca:	6b48      	ldr	r0, [r1, #52]	; 0x34
2400d0cc:	f010 0001 	ands.w	r0, r0, #1
2400d0d0:	d105      	bne.n	2400d0de <SDMMC_CmdOperCond+0x66>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
2400d0d2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400d0d4:	065b      	lsls	r3, r3, #25
2400d0d6:	d5f2      	bpl.n	2400d0be <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
2400d0d8:	2340      	movs	r3, #64	; 0x40
2400d0da:	638b      	str	r3, [r1, #56]	; 0x38
2400d0dc:	e7ef      	b.n	2400d0be <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400d0de:	2301      	movs	r3, #1
2400d0e0:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d0e2:	e7ec      	b.n	2400d0be <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d0e4:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d0e6:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d0e8:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d0ea:	e7e8      	b.n	2400d0be <SDMMC_CmdOperCond+0x46>
2400d0ec:	200008b4 	.word	0x200008b4
2400d0f0:	10624dd3 	.word	0x10624dd3
2400d0f4:	fffee0c0 	.word	0xfffee0c0

2400d0f8 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d0f8:	4a50      	ldr	r2, [pc, #320]	; (2400d23c <SDMMC_CmdAppCommand+0x144>)
{
2400d0fa:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d0fc:	4b50      	ldr	r3, [pc, #320]	; (2400d240 <SDMMC_CmdAppCommand+0x148>)
2400d0fe:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400d100:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d104:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d108:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400d10c:	484d      	ldr	r0, [pc, #308]	; (2400d244 <SDMMC_CmdAppCommand+0x14c>)
2400d10e:	f241 1337 	movw	r3, #4407	; 0x1137
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d112:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d114:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d116:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d11a:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d11c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d120:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400d124:	1e53      	subs	r3, r2, #1
2400d126:	b14a      	cbz	r2, 2400d13c <SDMMC_CmdAppCommand+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400d128:	4947      	ldr	r1, [pc, #284]	; (2400d248 <SDMMC_CmdAppCommand+0x150>)
    sta_reg = SDMMCx->STA;
2400d12a:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400d12e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400d130:	420a      	tst	r2, r1
2400d132:	d001      	beq.n	2400d138 <SDMMC_CmdAppCommand+0x40>
2400d134:	0492      	lsls	r2, r2, #18
2400d136:	d504      	bpl.n	2400d142 <SDMMC_CmdAppCommand+0x4a>
    if (count-- == 0U)
2400d138:	1c58      	adds	r0, r3, #1
2400d13a:	d1f6      	bne.n	2400d12a <SDMMC_CmdAppCommand+0x32>
      return SDMMC_ERROR_TIMEOUT;
2400d13c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400d140:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400d142:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400d146:	0758      	lsls	r0, r3, #29
2400d148:	d445      	bmi.n	2400d1d6 <SDMMC_CmdAppCommand+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400d14a:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400d14e:	f010 0001 	ands.w	r0, r0, #1
2400d152:	d137      	bne.n	2400d1c4 <SDMMC_CmdAppCommand+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400d154:	4b3d      	ldr	r3, [pc, #244]	; (2400d24c <SDMMC_CmdAppCommand+0x154>)
2400d156:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400d15a:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400d15e:	b2db      	uxtb	r3, r3
2400d160:	2b37      	cmp	r3, #55	; 0x37
2400d162:	d136      	bne.n	2400d1d2 <SDMMC_CmdAppCommand+0xda>
  return (*(__IO uint32_t *) tmp);
2400d164:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400d168:	4839      	ldr	r0, [pc, #228]	; (2400d250 <SDMMC_CmdAppCommand+0x158>)
2400d16a:	4018      	ands	r0, r3
2400d16c:	2800      	cmp	r0, #0
2400d16e:	d02f      	beq.n	2400d1d0 <SDMMC_CmdAppCommand+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400d170:	2b00      	cmp	r3, #0
2400d172:	db35      	blt.n	2400d1e0 <SDMMC_CmdAppCommand+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400d174:	0059      	lsls	r1, r3, #1
2400d176:	d436      	bmi.n	2400d1e6 <SDMMC_CmdAppCommand+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400d178:	009a      	lsls	r2, r3, #2
2400d17a:	d436      	bmi.n	2400d1ea <SDMMC_CmdAppCommand+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400d17c:	00d9      	lsls	r1, r3, #3
2400d17e:	d436      	bmi.n	2400d1ee <SDMMC_CmdAppCommand+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400d180:	011a      	lsls	r2, r3, #4
2400d182:	d437      	bmi.n	2400d1f4 <SDMMC_CmdAppCommand+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400d184:	0159      	lsls	r1, r3, #5
2400d186:	d438      	bmi.n	2400d1fa <SDMMC_CmdAppCommand+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400d188:	01da      	lsls	r2, r3, #7
2400d18a:	d439      	bmi.n	2400d200 <SDMMC_CmdAppCommand+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400d18c:	0219      	lsls	r1, r3, #8
2400d18e:	d43a      	bmi.n	2400d206 <SDMMC_CmdAppCommand+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400d190:	025a      	lsls	r2, r3, #9
2400d192:	d43b      	bmi.n	2400d20c <SDMMC_CmdAppCommand+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400d194:	0299      	lsls	r1, r3, #10
2400d196:	d445      	bmi.n	2400d224 <SDMMC_CmdAppCommand+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400d198:	02da      	lsls	r2, r3, #11
2400d19a:	d440      	bmi.n	2400d21e <SDMMC_CmdAppCommand+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400d19c:	0359      	lsls	r1, r3, #13
2400d19e:	d43b      	bmi.n	2400d218 <SDMMC_CmdAppCommand+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400d1a0:	039a      	lsls	r2, r3, #14
2400d1a2:	d436      	bmi.n	2400d212 <SDMMC_CmdAppCommand+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400d1a4:	03d9      	lsls	r1, r3, #15
2400d1a6:	d446      	bmi.n	2400d236 <SDMMC_CmdAppCommand+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400d1a8:	041a      	lsls	r2, r3, #16
2400d1aa:	d441      	bmi.n	2400d230 <SDMMC_CmdAppCommand+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400d1ac:	0459      	lsls	r1, r3, #17
2400d1ae:	d43c      	bmi.n	2400d22a <SDMMC_CmdAppCommand+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400d1b0:	049a      	lsls	r2, r3, #18
2400d1b2:	d40b      	bmi.n	2400d1cc <SDMMC_CmdAppCommand+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400d1b4:	f013 0f08 	tst.w	r3, #8
2400d1b8:	bf14      	ite	ne
2400d1ba:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400d1be:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400d1c2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400d1c4:	2301      	movs	r3, #1
2400d1c6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d1ca:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
2400d1cc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
2400d1d0:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d1d2:	2001      	movs	r0, #1
2400d1d4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d1d6:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d1d8:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d1da:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d1de:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400d1e0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400d1e4:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400d1e6:	2040      	movs	r0, #64	; 0x40
2400d1e8:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400d1ea:	2080      	movs	r0, #128	; 0x80
2400d1ec:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400d1ee:	f44f 7080 	mov.w	r0, #256	; 0x100
2400d1f2:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400d1f4:	f44f 7000 	mov.w	r0, #512	; 0x200
2400d1f8:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400d1fa:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400d1fe:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400d200:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400d204:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
2400d206:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400d20a:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
2400d20c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400d210:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400d212:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400d216:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400d218:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400d21c:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
2400d21e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400d222:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400d224:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400d228:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400d22a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400d22e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400d230:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400d234:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400d236:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400d23a:	4770      	bx	lr
2400d23c:	200008b4 	.word	0x200008b4
2400d240:	10624dd3 	.word	0x10624dd3
2400d244:	fffee0c0 	.word	0xfffee0c0
2400d248:	00200045 	.word	0x00200045
2400d24c:	002000c5 	.word	0x002000c5
2400d250:	fdffe008 	.word	0xfdffe008

2400d254 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d254:	4a19      	ldr	r2, [pc, #100]	; (2400d2bc <SDMMC_CmdAppOperCommand+0x68>)
{
2400d256:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d258:	4b19      	ldr	r3, [pc, #100]	; (2400d2c0 <SDMMC_CmdAppOperCommand+0x6c>)
2400d25a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400d25c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d260:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d264:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400d268:	4816      	ldr	r0, [pc, #88]	; (2400d2c4 <SDMMC_CmdAppOperCommand+0x70>)
2400d26a:	f241 1329 	movw	r3, #4393	; 0x1129
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d26e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d270:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d272:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d276:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d278:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d27c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400d280:	1e53      	subs	r3, r2, #1
2400d282:	b14a      	cbz	r2, 2400d298 <SDMMC_CmdAppOperCommand+0x44>
    sta_reg = SDMMCx->STA;
2400d284:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400d288:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400d28a:	f012 0f45 	tst.w	r2, #69	; 0x45
2400d28e:	d001      	beq.n	2400d294 <SDMMC_CmdAppOperCommand+0x40>
2400d290:	0492      	lsls	r2, r2, #18
2400d292:	d504      	bpl.n	2400d29e <SDMMC_CmdAppOperCommand+0x4a>
    if (count-- == 0U)
2400d294:	1c59      	adds	r1, r3, #1
2400d296:	d1f5      	bne.n	2400d284 <SDMMC_CmdAppOperCommand+0x30>
      return SDMMC_ERROR_TIMEOUT;
2400d298:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400d29c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400d29e:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400d2a2:	f010 0004 	ands.w	r0, r0, #4
2400d2a6:	d103      	bne.n	2400d2b0 <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400d2a8:	4b07      	ldr	r3, [pc, #28]	; (2400d2c8 <SDMMC_CmdAppOperCommand+0x74>)
2400d2aa:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
2400d2ae:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d2b0:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d2b2:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d2b4:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d2b8:	4770      	bx	lr
2400d2ba:	bf00      	nop
2400d2bc:	200008b4 	.word	0x200008b4
2400d2c0:	10624dd3 	.word	0x10624dd3
2400d2c4:	fffee0c0 	.word	0xfffee0c0
2400d2c8:	002000c5 	.word	0x002000c5

2400d2cc <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d2cc:	4a50      	ldr	r2, [pc, #320]	; (2400d410 <SDMMC_CmdBusWidth+0x144>)
{
2400d2ce:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d2d0:	4b50      	ldr	r3, [pc, #320]	; (2400d414 <SDMMC_CmdBusWidth+0x148>)
2400d2d2:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400d2d4:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d2d8:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d2dc:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400d2e0:	484d      	ldr	r0, [pc, #308]	; (2400d418 <SDMMC_CmdBusWidth+0x14c>)
2400d2e2:	f241 1306 	movw	r3, #4358	; 0x1106
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d2e6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d2e8:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d2ea:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d2ee:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d2f0:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d2f4:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400d2f8:	1e53      	subs	r3, r2, #1
2400d2fa:	b14a      	cbz	r2, 2400d310 <SDMMC_CmdBusWidth+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400d2fc:	4947      	ldr	r1, [pc, #284]	; (2400d41c <SDMMC_CmdBusWidth+0x150>)
    sta_reg = SDMMCx->STA;
2400d2fe:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400d302:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400d304:	420a      	tst	r2, r1
2400d306:	d001      	beq.n	2400d30c <SDMMC_CmdBusWidth+0x40>
2400d308:	0492      	lsls	r2, r2, #18
2400d30a:	d504      	bpl.n	2400d316 <SDMMC_CmdBusWidth+0x4a>
    if (count-- == 0U)
2400d30c:	1c58      	adds	r0, r3, #1
2400d30e:	d1f6      	bne.n	2400d2fe <SDMMC_CmdBusWidth+0x32>
      return SDMMC_ERROR_TIMEOUT;
2400d310:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400d314:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400d316:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400d31a:	0758      	lsls	r0, r3, #29
2400d31c:	d445      	bmi.n	2400d3aa <SDMMC_CmdBusWidth+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400d31e:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400d322:	f010 0001 	ands.w	r0, r0, #1
2400d326:	d137      	bne.n	2400d398 <SDMMC_CmdBusWidth+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400d328:	4b3d      	ldr	r3, [pc, #244]	; (2400d420 <SDMMC_CmdBusWidth+0x154>)
2400d32a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400d32e:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400d332:	b2db      	uxtb	r3, r3
2400d334:	2b06      	cmp	r3, #6
2400d336:	d136      	bne.n	2400d3a6 <SDMMC_CmdBusWidth+0xda>
  return (*(__IO uint32_t *) tmp);
2400d338:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400d33c:	4839      	ldr	r0, [pc, #228]	; (2400d424 <SDMMC_CmdBusWidth+0x158>)
2400d33e:	4018      	ands	r0, r3
2400d340:	2800      	cmp	r0, #0
2400d342:	d02f      	beq.n	2400d3a4 <SDMMC_CmdBusWidth+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400d344:	2b00      	cmp	r3, #0
2400d346:	db35      	blt.n	2400d3b4 <SDMMC_CmdBusWidth+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400d348:	0059      	lsls	r1, r3, #1
2400d34a:	d436      	bmi.n	2400d3ba <SDMMC_CmdBusWidth+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400d34c:	009a      	lsls	r2, r3, #2
2400d34e:	d436      	bmi.n	2400d3be <SDMMC_CmdBusWidth+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400d350:	00d9      	lsls	r1, r3, #3
2400d352:	d436      	bmi.n	2400d3c2 <SDMMC_CmdBusWidth+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400d354:	011a      	lsls	r2, r3, #4
2400d356:	d437      	bmi.n	2400d3c8 <SDMMC_CmdBusWidth+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400d358:	0159      	lsls	r1, r3, #5
2400d35a:	d438      	bmi.n	2400d3ce <SDMMC_CmdBusWidth+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400d35c:	01da      	lsls	r2, r3, #7
2400d35e:	d439      	bmi.n	2400d3d4 <SDMMC_CmdBusWidth+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400d360:	0219      	lsls	r1, r3, #8
2400d362:	d43a      	bmi.n	2400d3da <SDMMC_CmdBusWidth+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400d364:	025a      	lsls	r2, r3, #9
2400d366:	d43b      	bmi.n	2400d3e0 <SDMMC_CmdBusWidth+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400d368:	0299      	lsls	r1, r3, #10
2400d36a:	d445      	bmi.n	2400d3f8 <SDMMC_CmdBusWidth+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400d36c:	02da      	lsls	r2, r3, #11
2400d36e:	d440      	bmi.n	2400d3f2 <SDMMC_CmdBusWidth+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400d370:	0359      	lsls	r1, r3, #13
2400d372:	d43b      	bmi.n	2400d3ec <SDMMC_CmdBusWidth+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400d374:	039a      	lsls	r2, r3, #14
2400d376:	d436      	bmi.n	2400d3e6 <SDMMC_CmdBusWidth+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400d378:	03d9      	lsls	r1, r3, #15
2400d37a:	d446      	bmi.n	2400d40a <SDMMC_CmdBusWidth+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400d37c:	041a      	lsls	r2, r3, #16
2400d37e:	d441      	bmi.n	2400d404 <SDMMC_CmdBusWidth+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400d380:	0459      	lsls	r1, r3, #17
2400d382:	d43c      	bmi.n	2400d3fe <SDMMC_CmdBusWidth+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400d384:	049a      	lsls	r2, r3, #18
2400d386:	d40b      	bmi.n	2400d3a0 <SDMMC_CmdBusWidth+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400d388:	f013 0f08 	tst.w	r3, #8
2400d38c:	bf14      	ite	ne
2400d38e:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400d392:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400d396:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400d398:	2301      	movs	r3, #1
2400d39a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d39e:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
2400d3a0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
2400d3a4:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d3a6:	2001      	movs	r0, #1
2400d3a8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d3aa:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d3ac:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d3ae:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d3b2:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400d3b4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400d3b8:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400d3ba:	2040      	movs	r0, #64	; 0x40
2400d3bc:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400d3be:	2080      	movs	r0, #128	; 0x80
2400d3c0:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400d3c2:	f44f 7080 	mov.w	r0, #256	; 0x100
2400d3c6:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400d3c8:	f44f 7000 	mov.w	r0, #512	; 0x200
2400d3cc:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400d3ce:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400d3d2:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400d3d4:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400d3d8:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
2400d3da:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400d3de:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
2400d3e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400d3e4:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400d3e6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400d3ea:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400d3ec:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400d3f0:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
2400d3f2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400d3f6:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400d3f8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400d3fc:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400d3fe:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400d402:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400d404:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400d408:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400d40a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400d40e:	4770      	bx	lr
2400d410:	200008b4 	.word	0x200008b4
2400d414:	10624dd3 	.word	0x10624dd3
2400d418:	fffee0c0 	.word	0xfffee0c0
2400d41c:	00200045 	.word	0x00200045
2400d420:	002000c5 	.word	0x002000c5
2400d424:	fdffe008 	.word	0xfdffe008

2400d428 <SDMMC_CmdSendSCR>:
{
2400d428:	b410      	push	{r4}
2400d42a:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
2400d42c:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d42e:	4a4c      	ldr	r2, [pc, #304]	; (2400d560 <SDMMC_CmdSendSCR+0x138>)
2400d430:	4b4c      	ldr	r3, [pc, #304]	; (2400d564 <SDMMC_CmdSendSCR+0x13c>)
  SDMMCx->ARG = Command->Argument;
2400d432:	608c      	str	r4, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d434:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d436:	68cc      	ldr	r4, [r1, #12]
2400d438:	484b      	ldr	r0, [pc, #300]	; (2400d568 <SDMMC_CmdSendSCR+0x140>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d43a:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d43e:	f241 1333 	movw	r3, #4403	; 0x1133
2400d442:	4020      	ands	r0, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d444:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d446:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d448:	f241 3088 	movw	r0, #5000	; 0x1388
2400d44c:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d450:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
2400d452:	b14a      	cbz	r2, 2400d468 <SDMMC_CmdSendSCR+0x40>
2400d454:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400d456:	4845      	ldr	r0, [pc, #276]	; (2400d56c <SDMMC_CmdSendSCR+0x144>)
    sta_reg = SDMMCx->STA;
2400d458:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
2400d45a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400d45c:	4202      	tst	r2, r0
2400d45e:	d001      	beq.n	2400d464 <SDMMC_CmdSendSCR+0x3c>
2400d460:	0494      	lsls	r4, r2, #18
2400d462:	d506      	bpl.n	2400d472 <SDMMC_CmdSendSCR+0x4a>
    if (count-- == 0U)
2400d464:	1c5a      	adds	r2, r3, #1
2400d466:	d1f7      	bne.n	2400d458 <SDMMC_CmdSendSCR+0x30>
      return SDMMC_ERROR_TIMEOUT;
2400d468:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400d46c:	f85d 4b04 	ldr.w	r4, [sp], #4
2400d470:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400d472:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400d474:	0758      	lsls	r0, r3, #29
2400d476:	d43d      	bmi.n	2400d4f4 <SDMMC_CmdSendSCR+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400d478:	6b48      	ldr	r0, [r1, #52]	; 0x34
2400d47a:	f010 0001 	ands.w	r0, r0, #1
2400d47e:	d134      	bne.n	2400d4ea <SDMMC_CmdSendSCR+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400d480:	4b3b      	ldr	r3, [pc, #236]	; (2400d570 <SDMMC_CmdSendSCR+0x148>)
2400d482:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400d484:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400d486:	b2db      	uxtb	r3, r3
2400d488:	2b33      	cmp	r3, #51	; 0x33
2400d48a:	d131      	bne.n	2400d4f0 <SDMMC_CmdSendSCR+0xc8>
  return (*(__IO uint32_t *) tmp);
2400d48c:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400d48e:	4839      	ldr	r0, [pc, #228]	; (2400d574 <SDMMC_CmdSendSCR+0x14c>)
2400d490:	4018      	ands	r0, r3
2400d492:	2800      	cmp	r0, #0
2400d494:	d0ea      	beq.n	2400d46c <SDMMC_CmdSendSCR+0x44>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400d496:	2b00      	cmp	r3, #0
2400d498:	db30      	blt.n	2400d4fc <SDMMC_CmdSendSCR+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400d49a:	005a      	lsls	r2, r3, #1
2400d49c:	d431      	bmi.n	2400d502 <SDMMC_CmdSendSCR+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400d49e:	009c      	lsls	r4, r3, #2
2400d4a0:	d431      	bmi.n	2400d506 <SDMMC_CmdSendSCR+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400d4a2:	00d9      	lsls	r1, r3, #3
2400d4a4:	d431      	bmi.n	2400d50a <SDMMC_CmdSendSCR+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400d4a6:	011a      	lsls	r2, r3, #4
2400d4a8:	d432      	bmi.n	2400d510 <SDMMC_CmdSendSCR+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400d4aa:	015c      	lsls	r4, r3, #5
2400d4ac:	d433      	bmi.n	2400d516 <SDMMC_CmdSendSCR+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400d4ae:	01d9      	lsls	r1, r3, #7
2400d4b0:	d434      	bmi.n	2400d51c <SDMMC_CmdSendSCR+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400d4b2:	021a      	lsls	r2, r3, #8
2400d4b4:	d435      	bmi.n	2400d522 <SDMMC_CmdSendSCR+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400d4b6:	025c      	lsls	r4, r3, #9
2400d4b8:	d436      	bmi.n	2400d528 <SDMMC_CmdSendSCR+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400d4ba:	0299      	lsls	r1, r3, #10
2400d4bc:	d440      	bmi.n	2400d540 <SDMMC_CmdSendSCR+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400d4be:	02da      	lsls	r2, r3, #11
2400d4c0:	d43b      	bmi.n	2400d53a <SDMMC_CmdSendSCR+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400d4c2:	035c      	lsls	r4, r3, #13
2400d4c4:	d436      	bmi.n	2400d534 <SDMMC_CmdSendSCR+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400d4c6:	0399      	lsls	r1, r3, #14
2400d4c8:	d431      	bmi.n	2400d52e <SDMMC_CmdSendSCR+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400d4ca:	03da      	lsls	r2, r3, #15
2400d4cc:	d444      	bmi.n	2400d558 <SDMMC_CmdSendSCR+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400d4ce:	041c      	lsls	r4, r3, #16
2400d4d0:	d43f      	bmi.n	2400d552 <SDMMC_CmdSendSCR+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400d4d2:	0459      	lsls	r1, r3, #17
2400d4d4:	d43a      	bmi.n	2400d54c <SDMMC_CmdSendSCR+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400d4d6:	049a      	lsls	r2, r3, #18
2400d4d8:	d435      	bmi.n	2400d546 <SDMMC_CmdSendSCR+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400d4da:	f013 0f08 	tst.w	r3, #8
2400d4de:	bf14      	ite	ne
2400d4e0:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400d4e4:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400d4e8:	e7c0      	b.n	2400d46c <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400d4ea:	2301      	movs	r3, #1
2400d4ec:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d4ee:	e7bd      	b.n	2400d46c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d4f0:	2001      	movs	r0, #1
2400d4f2:	e7bb      	b.n	2400d46c <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d4f4:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d4f6:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d4f8:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d4fa:	e7b7      	b.n	2400d46c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400d4fc:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400d500:	e7b4      	b.n	2400d46c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400d502:	2040      	movs	r0, #64	; 0x40
2400d504:	e7b2      	b.n	2400d46c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400d506:	2080      	movs	r0, #128	; 0x80
2400d508:	e7b0      	b.n	2400d46c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400d50a:	f44f 7080 	mov.w	r0, #256	; 0x100
2400d50e:	e7ad      	b.n	2400d46c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400d510:	f44f 7000 	mov.w	r0, #512	; 0x200
2400d514:	e7aa      	b.n	2400d46c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400d516:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400d51a:	e7a7      	b.n	2400d46c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400d51c:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400d520:	e7a4      	b.n	2400d46c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400d522:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400d526:	e7a1      	b.n	2400d46c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400d528:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400d52c:	e79e      	b.n	2400d46c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400d52e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400d532:	e79b      	b.n	2400d46c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400d534:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400d538:	e798      	b.n	2400d46c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CC_ERR;
2400d53a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400d53e:	e795      	b.n	2400d46c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400d540:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400d544:	e792      	b.n	2400d46c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_RESET;
2400d546:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
2400d54a:	e78f      	b.n	2400d46c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400d54c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400d550:	e78c      	b.n	2400d46c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400d552:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400d556:	e789      	b.n	2400d46c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400d558:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400d55c:	e786      	b.n	2400d46c <SDMMC_CmdSendSCR+0x44>
2400d55e:	bf00      	nop
2400d560:	200008b4 	.word	0x200008b4
2400d564:	10624dd3 	.word	0x10624dd3
2400d568:	fffee0c0 	.word	0xfffee0c0
2400d56c:	00200045 	.word	0x00200045
2400d570:	002000c5 	.word	0x002000c5
2400d574:	fdffe008 	.word	0xfdffe008

2400d578 <SDMMC_CmdSendCID>:
{
2400d578:	b410      	push	{r4}
2400d57a:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
2400d57c:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d57e:	4a19      	ldr	r2, [pc, #100]	; (2400d5e4 <SDMMC_CmdSendCID+0x6c>)
2400d580:	4b19      	ldr	r3, [pc, #100]	; (2400d5e8 <SDMMC_CmdSendCID+0x70>)
  SDMMCx->ARG = Command->Argument;
2400d582:	608c      	str	r4, [r1, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d584:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d586:	68cc      	ldr	r4, [r1, #12]
2400d588:	4818      	ldr	r0, [pc, #96]	; (2400d5ec <SDMMC_CmdSendCID+0x74>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d58a:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d58e:	f241 3302 	movw	r3, #4866	; 0x1302
2400d592:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d594:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d596:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d598:	f241 3088 	movw	r0, #5000	; 0x1388
2400d59c:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d5a0:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
2400d5a2:	b14a      	cbz	r2, 2400d5b8 <SDMMC_CmdSendCID+0x40>
2400d5a4:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400d5a6:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
2400d5a8:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400d5aa:	f012 0f45 	tst.w	r2, #69	; 0x45
2400d5ae:	d001      	beq.n	2400d5b4 <SDMMC_CmdSendCID+0x3c>
2400d5b0:	0492      	lsls	r2, r2, #18
2400d5b2:	d506      	bpl.n	2400d5c2 <SDMMC_CmdSendCID+0x4a>
    if (count-- == 0U)
2400d5b4:	1c58      	adds	r0, r3, #1
2400d5b6:	d1f6      	bne.n	2400d5a6 <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
2400d5b8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400d5bc:	f85d 4b04 	ldr.w	r4, [sp], #4
2400d5c0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400d5c2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400d5c4:	075b      	lsls	r3, r3, #29
2400d5c6:	d409      	bmi.n	2400d5dc <SDMMC_CmdSendCID+0x64>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400d5c8:	6b48      	ldr	r0, [r1, #52]	; 0x34
2400d5ca:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400d5ce:	bf14      	ite	ne
2400d5d0:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400d5d2:	4b07      	ldreq	r3, [pc, #28]	; (2400d5f0 <SDMMC_CmdSendCID+0x78>)
2400d5d4:	638b      	str	r3, [r1, #56]	; 0x38
}
2400d5d6:	f85d 4b04 	ldr.w	r4, [sp], #4
2400d5da:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d5dc:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d5de:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d5e0:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d5e2:	e7eb      	b.n	2400d5bc <SDMMC_CmdSendCID+0x44>
2400d5e4:	200008b4 	.word	0x200008b4
2400d5e8:	10624dd3 	.word	0x10624dd3
2400d5ec:	fffee0c0 	.word	0xfffee0c0
2400d5f0:	002000c5 	.word	0x002000c5

2400d5f4 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d5f4:	4a1b      	ldr	r2, [pc, #108]	; (2400d664 <SDMMC_CmdSendCSD+0x70>)
{
2400d5f6:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d5f8:	4b1b      	ldr	r3, [pc, #108]	; (2400d668 <SDMMC_CmdSendCSD+0x74>)
2400d5fa:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400d5fc:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d600:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d604:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400d608:	4818      	ldr	r0, [pc, #96]	; (2400d66c <SDMMC_CmdSendCSD+0x78>)
2400d60a:	f241 3309 	movw	r3, #4873	; 0x1309
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d60e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d610:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d612:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d616:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d618:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d61c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400d620:	1e53      	subs	r3, r2, #1
2400d622:	b14a      	cbz	r2, 2400d638 <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
2400d624:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400d628:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400d62a:	f012 0f45 	tst.w	r2, #69	; 0x45
2400d62e:	d001      	beq.n	2400d634 <SDMMC_CmdSendCSD+0x40>
2400d630:	0492      	lsls	r2, r2, #18
2400d632:	d504      	bpl.n	2400d63e <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
2400d634:	1c59      	adds	r1, r3, #1
2400d636:	d1f5      	bne.n	2400d624 <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
2400d638:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400d63c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400d63e:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400d642:	075b      	lsls	r3, r3, #29
2400d644:	d409      	bmi.n	2400d65a <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400d646:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400d64a:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400d64e:	bf14      	ite	ne
2400d650:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400d652:	4b07      	ldreq	r3, [pc, #28]	; (2400d670 <SDMMC_CmdSendCSD+0x7c>)
2400d654:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
2400d658:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d65a:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d65c:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d65e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d662:	4770      	bx	lr
2400d664:	200008b4 	.word	0x200008b4
2400d668:	10624dd3 	.word	0x10624dd3
2400d66c:	fffee0c0 	.word	0xfffee0c0
2400d670:	002000c5 	.word	0x002000c5

2400d674 <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
2400d674:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d676:	4a2b      	ldr	r2, [pc, #172]	; (2400d724 <SDMMC_CmdSetRelAdd+0xb0>)
{
2400d678:	4684      	mov	ip, r0
2400d67a:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
2400d67c:	6083      	str	r3, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d67e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d680:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d682:	4829      	ldr	r0, [pc, #164]	; (2400d728 <SDMMC_CmdSetRelAdd+0xb4>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d684:	4c29      	ldr	r4, [pc, #164]	; (2400d72c <SDMMC_CmdSetRelAdd+0xb8>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d686:	fba0 0202 	umull	r0, r2, r0, r2
2400d68a:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d68e:	401c      	ands	r4, r3
2400d690:	f241 1303 	movw	r3, #4355	; 0x1103
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d694:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d696:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d698:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d69c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400d6a0:	b152      	cbz	r2, 2400d6b8 <SDMMC_CmdSetRelAdd+0x44>
2400d6a2:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400d6a4:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400d6a8:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400d6aa:	f012 0f45 	tst.w	r2, #69	; 0x45
2400d6ae:	d001      	beq.n	2400d6b4 <SDMMC_CmdSetRelAdd+0x40>
2400d6b0:	0494      	lsls	r4, r2, #18
2400d6b2:	d506      	bpl.n	2400d6c2 <SDMMC_CmdSetRelAdd+0x4e>
    if (count-- == 0U)
2400d6b4:	1c5a      	adds	r2, r3, #1
2400d6b6:	d1f5      	bne.n	2400d6a4 <SDMMC_CmdSetRelAdd+0x30>
      return SDMMC_ERROR_TIMEOUT;
2400d6b8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400d6bc:	f85d 4b04 	ldr.w	r4, [sp], #4
2400d6c0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400d6c2:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400d6c6:	0758      	lsls	r0, r3, #29
2400d6c8:	d421      	bmi.n	2400d70e <SDMMC_CmdSetRelAdd+0x9a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400d6ca:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400d6ce:	f010 0001 	ands.w	r0, r0, #1
2400d6d2:	d116      	bne.n	2400d702 <SDMMC_CmdSetRelAdd+0x8e>
  return (uint8_t)(SDMMCx->RESPCMD);
2400d6d4:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400d6d8:	b2db      	uxtb	r3, r3
2400d6da:	2b03      	cmp	r3, #3
2400d6dc:	d115      	bne.n	2400d70a <SDMMC_CmdSetRelAdd+0x96>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400d6de:	4b14      	ldr	r3, [pc, #80]	; (2400d730 <SDMMC_CmdSetRelAdd+0xbc>)
2400d6e0:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
2400d6e4:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
2400d6e8:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
2400d6ec:	d017      	beq.n	2400d71e <SDMMC_CmdSetRelAdd+0xaa>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
2400d6ee:	045a      	lsls	r2, r3, #17
2400d6f0:	d412      	bmi.n	2400d718 <SDMMC_CmdSetRelAdd+0xa4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400d6f2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
2400d6f6:	bf14      	ite	ne
2400d6f8:	f44f 5080 	movne.w	r0, #4096	; 0x1000
2400d6fc:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400d700:	e7dc      	b.n	2400d6bc <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400d702:	2301      	movs	r3, #1
2400d704:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d708:	e7d8      	b.n	2400d6bc <SDMMC_CmdSetRelAdd+0x48>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d70a:	2001      	movs	r0, #1
2400d70c:	e7d6      	b.n	2400d6bc <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d70e:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d710:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d712:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d716:	e7d1      	b.n	2400d6bc <SDMMC_CmdSetRelAdd+0x48>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400d718:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400d71c:	e7ce      	b.n	2400d6bc <SDMMC_CmdSetRelAdd+0x48>
    *pRCA = (uint16_t)(response_r1 >> 16);
2400d71e:	0c1b      	lsrs	r3, r3, #16
2400d720:	800b      	strh	r3, [r1, #0]
    return SDMMC_ERROR_NONE;
2400d722:	e7cb      	b.n	2400d6bc <SDMMC_CmdSetRelAdd+0x48>
2400d724:	200008b4 	.word	0x200008b4
2400d728:	10624dd3 	.word	0x10624dd3
2400d72c:	fffee0c0 	.word	0xfffee0c0
2400d730:	002000c5 	.word	0x002000c5

2400d734 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d734:	4a50      	ldr	r2, [pc, #320]	; (2400d878 <SDMMC_CmdSendStatus+0x144>)
{
2400d736:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d738:	4b50      	ldr	r3, [pc, #320]	; (2400d87c <SDMMC_CmdSendStatus+0x148>)
2400d73a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400d73c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d740:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d744:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400d748:	484d      	ldr	r0, [pc, #308]	; (2400d880 <SDMMC_CmdSendStatus+0x14c>)
2400d74a:	f241 130d 	movw	r3, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d74e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d750:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d752:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d756:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d758:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d75c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400d760:	1e53      	subs	r3, r2, #1
2400d762:	b14a      	cbz	r2, 2400d778 <SDMMC_CmdSendStatus+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400d764:	4947      	ldr	r1, [pc, #284]	; (2400d884 <SDMMC_CmdSendStatus+0x150>)
    sta_reg = SDMMCx->STA;
2400d766:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400d76a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400d76c:	420a      	tst	r2, r1
2400d76e:	d001      	beq.n	2400d774 <SDMMC_CmdSendStatus+0x40>
2400d770:	0492      	lsls	r2, r2, #18
2400d772:	d504      	bpl.n	2400d77e <SDMMC_CmdSendStatus+0x4a>
    if (count-- == 0U)
2400d774:	1c58      	adds	r0, r3, #1
2400d776:	d1f6      	bne.n	2400d766 <SDMMC_CmdSendStatus+0x32>
      return SDMMC_ERROR_TIMEOUT;
2400d778:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400d77c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400d77e:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400d782:	0758      	lsls	r0, r3, #29
2400d784:	d445      	bmi.n	2400d812 <SDMMC_CmdSendStatus+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400d786:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400d78a:	f010 0001 	ands.w	r0, r0, #1
2400d78e:	d137      	bne.n	2400d800 <SDMMC_CmdSendStatus+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400d790:	4b3d      	ldr	r3, [pc, #244]	; (2400d888 <SDMMC_CmdSendStatus+0x154>)
2400d792:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400d796:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400d79a:	b2db      	uxtb	r3, r3
2400d79c:	2b0d      	cmp	r3, #13
2400d79e:	d136      	bne.n	2400d80e <SDMMC_CmdSendStatus+0xda>
  return (*(__IO uint32_t *) tmp);
2400d7a0:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400d7a4:	4839      	ldr	r0, [pc, #228]	; (2400d88c <SDMMC_CmdSendStatus+0x158>)
2400d7a6:	4018      	ands	r0, r3
2400d7a8:	2800      	cmp	r0, #0
2400d7aa:	d02f      	beq.n	2400d80c <SDMMC_CmdSendStatus+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400d7ac:	2b00      	cmp	r3, #0
2400d7ae:	db35      	blt.n	2400d81c <SDMMC_CmdSendStatus+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400d7b0:	0059      	lsls	r1, r3, #1
2400d7b2:	d436      	bmi.n	2400d822 <SDMMC_CmdSendStatus+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400d7b4:	009a      	lsls	r2, r3, #2
2400d7b6:	d436      	bmi.n	2400d826 <SDMMC_CmdSendStatus+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400d7b8:	00d9      	lsls	r1, r3, #3
2400d7ba:	d436      	bmi.n	2400d82a <SDMMC_CmdSendStatus+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400d7bc:	011a      	lsls	r2, r3, #4
2400d7be:	d437      	bmi.n	2400d830 <SDMMC_CmdSendStatus+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400d7c0:	0159      	lsls	r1, r3, #5
2400d7c2:	d438      	bmi.n	2400d836 <SDMMC_CmdSendStatus+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400d7c4:	01da      	lsls	r2, r3, #7
2400d7c6:	d439      	bmi.n	2400d83c <SDMMC_CmdSendStatus+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400d7c8:	0219      	lsls	r1, r3, #8
2400d7ca:	d43a      	bmi.n	2400d842 <SDMMC_CmdSendStatus+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400d7cc:	025a      	lsls	r2, r3, #9
2400d7ce:	d43b      	bmi.n	2400d848 <SDMMC_CmdSendStatus+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400d7d0:	0299      	lsls	r1, r3, #10
2400d7d2:	d445      	bmi.n	2400d860 <SDMMC_CmdSendStatus+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400d7d4:	02da      	lsls	r2, r3, #11
2400d7d6:	d440      	bmi.n	2400d85a <SDMMC_CmdSendStatus+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400d7d8:	0359      	lsls	r1, r3, #13
2400d7da:	d43b      	bmi.n	2400d854 <SDMMC_CmdSendStatus+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400d7dc:	039a      	lsls	r2, r3, #14
2400d7de:	d436      	bmi.n	2400d84e <SDMMC_CmdSendStatus+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400d7e0:	03d9      	lsls	r1, r3, #15
2400d7e2:	d446      	bmi.n	2400d872 <SDMMC_CmdSendStatus+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400d7e4:	041a      	lsls	r2, r3, #16
2400d7e6:	d441      	bmi.n	2400d86c <SDMMC_CmdSendStatus+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400d7e8:	0459      	lsls	r1, r3, #17
2400d7ea:	d43c      	bmi.n	2400d866 <SDMMC_CmdSendStatus+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400d7ec:	049a      	lsls	r2, r3, #18
2400d7ee:	d40b      	bmi.n	2400d808 <SDMMC_CmdSendStatus+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400d7f0:	f013 0f08 	tst.w	r3, #8
2400d7f4:	bf14      	ite	ne
2400d7f6:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400d7fa:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400d7fe:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400d800:	2301      	movs	r3, #1
2400d802:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d806:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
2400d808:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
2400d80c:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d80e:	2001      	movs	r0, #1
2400d810:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d812:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d814:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d816:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d81a:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400d81c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400d820:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400d822:	2040      	movs	r0, #64	; 0x40
2400d824:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400d826:	2080      	movs	r0, #128	; 0x80
2400d828:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400d82a:	f44f 7080 	mov.w	r0, #256	; 0x100
2400d82e:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400d830:	f44f 7000 	mov.w	r0, #512	; 0x200
2400d834:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400d836:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400d83a:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400d83c:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400d840:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
2400d842:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400d846:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
2400d848:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400d84c:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400d84e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400d852:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400d854:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400d858:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
2400d85a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400d85e:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400d860:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400d864:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400d866:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400d86a:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400d86c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400d870:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400d872:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400d876:	4770      	bx	lr
2400d878:	200008b4 	.word	0x200008b4
2400d87c:	10624dd3 	.word	0x10624dd3
2400d880:	fffee0c0 	.word	0xfffee0c0
2400d884:	00200045 	.word	0x00200045
2400d888:	002000c5 	.word	0x002000c5
2400d88c:	fdffe008 	.word	0xfdffe008

2400d890 <SDMMC_CmdStatusRegister>:
{
2400d890:	b410      	push	{r4}
2400d892:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
2400d894:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d896:	4a4c      	ldr	r2, [pc, #304]	; (2400d9c8 <SDMMC_CmdStatusRegister+0x138>)
2400d898:	4b4c      	ldr	r3, [pc, #304]	; (2400d9cc <SDMMC_CmdStatusRegister+0x13c>)
  SDMMCx->ARG = Command->Argument;
2400d89a:	608c      	str	r4, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d89c:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d89e:	68cc      	ldr	r4, [r1, #12]
2400d8a0:	484b      	ldr	r0, [pc, #300]	; (2400d9d0 <SDMMC_CmdStatusRegister+0x140>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d8a2:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d8a6:	f241 130d 	movw	r3, #4365	; 0x110d
2400d8aa:	4020      	ands	r0, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d8ac:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d8ae:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d8b0:	f241 3088 	movw	r0, #5000	; 0x1388
2400d8b4:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d8b8:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
2400d8ba:	b14a      	cbz	r2, 2400d8d0 <SDMMC_CmdStatusRegister+0x40>
2400d8bc:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400d8be:	4845      	ldr	r0, [pc, #276]	; (2400d9d4 <SDMMC_CmdStatusRegister+0x144>)
    sta_reg = SDMMCx->STA;
2400d8c0:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
2400d8c2:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400d8c4:	4202      	tst	r2, r0
2400d8c6:	d001      	beq.n	2400d8cc <SDMMC_CmdStatusRegister+0x3c>
2400d8c8:	0494      	lsls	r4, r2, #18
2400d8ca:	d506      	bpl.n	2400d8da <SDMMC_CmdStatusRegister+0x4a>
    if (count-- == 0U)
2400d8cc:	1c5a      	adds	r2, r3, #1
2400d8ce:	d1f7      	bne.n	2400d8c0 <SDMMC_CmdStatusRegister+0x30>
      return SDMMC_ERROR_TIMEOUT;
2400d8d0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400d8d4:	f85d 4b04 	ldr.w	r4, [sp], #4
2400d8d8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400d8da:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400d8dc:	0758      	lsls	r0, r3, #29
2400d8de:	d43d      	bmi.n	2400d95c <SDMMC_CmdStatusRegister+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400d8e0:	6b48      	ldr	r0, [r1, #52]	; 0x34
2400d8e2:	f010 0001 	ands.w	r0, r0, #1
2400d8e6:	d134      	bne.n	2400d952 <SDMMC_CmdStatusRegister+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400d8e8:	4b3b      	ldr	r3, [pc, #236]	; (2400d9d8 <SDMMC_CmdStatusRegister+0x148>)
2400d8ea:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400d8ec:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400d8ee:	b2db      	uxtb	r3, r3
2400d8f0:	2b0d      	cmp	r3, #13
2400d8f2:	d131      	bne.n	2400d958 <SDMMC_CmdStatusRegister+0xc8>
  return (*(__IO uint32_t *) tmp);
2400d8f4:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400d8f6:	4839      	ldr	r0, [pc, #228]	; (2400d9dc <SDMMC_CmdStatusRegister+0x14c>)
2400d8f8:	4018      	ands	r0, r3
2400d8fa:	2800      	cmp	r0, #0
2400d8fc:	d0ea      	beq.n	2400d8d4 <SDMMC_CmdStatusRegister+0x44>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400d8fe:	2b00      	cmp	r3, #0
2400d900:	db30      	blt.n	2400d964 <SDMMC_CmdStatusRegister+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400d902:	005a      	lsls	r2, r3, #1
2400d904:	d431      	bmi.n	2400d96a <SDMMC_CmdStatusRegister+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400d906:	009c      	lsls	r4, r3, #2
2400d908:	d431      	bmi.n	2400d96e <SDMMC_CmdStatusRegister+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400d90a:	00d9      	lsls	r1, r3, #3
2400d90c:	d431      	bmi.n	2400d972 <SDMMC_CmdStatusRegister+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400d90e:	011a      	lsls	r2, r3, #4
2400d910:	d432      	bmi.n	2400d978 <SDMMC_CmdStatusRegister+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400d912:	015c      	lsls	r4, r3, #5
2400d914:	d433      	bmi.n	2400d97e <SDMMC_CmdStatusRegister+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400d916:	01d9      	lsls	r1, r3, #7
2400d918:	d434      	bmi.n	2400d984 <SDMMC_CmdStatusRegister+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400d91a:	021a      	lsls	r2, r3, #8
2400d91c:	d435      	bmi.n	2400d98a <SDMMC_CmdStatusRegister+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400d91e:	025c      	lsls	r4, r3, #9
2400d920:	d436      	bmi.n	2400d990 <SDMMC_CmdStatusRegister+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400d922:	0299      	lsls	r1, r3, #10
2400d924:	d440      	bmi.n	2400d9a8 <SDMMC_CmdStatusRegister+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400d926:	02da      	lsls	r2, r3, #11
2400d928:	d43b      	bmi.n	2400d9a2 <SDMMC_CmdStatusRegister+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400d92a:	035c      	lsls	r4, r3, #13
2400d92c:	d436      	bmi.n	2400d99c <SDMMC_CmdStatusRegister+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400d92e:	0399      	lsls	r1, r3, #14
2400d930:	d431      	bmi.n	2400d996 <SDMMC_CmdStatusRegister+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400d932:	03da      	lsls	r2, r3, #15
2400d934:	d444      	bmi.n	2400d9c0 <SDMMC_CmdStatusRegister+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400d936:	041c      	lsls	r4, r3, #16
2400d938:	d43f      	bmi.n	2400d9ba <SDMMC_CmdStatusRegister+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400d93a:	0459      	lsls	r1, r3, #17
2400d93c:	d43a      	bmi.n	2400d9b4 <SDMMC_CmdStatusRegister+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400d93e:	049a      	lsls	r2, r3, #18
2400d940:	d435      	bmi.n	2400d9ae <SDMMC_CmdStatusRegister+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400d942:	f013 0f08 	tst.w	r3, #8
2400d946:	bf14      	ite	ne
2400d948:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400d94c:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400d950:	e7c0      	b.n	2400d8d4 <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400d952:	2301      	movs	r3, #1
2400d954:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d956:	e7bd      	b.n	2400d8d4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d958:	2001      	movs	r0, #1
2400d95a:	e7bb      	b.n	2400d8d4 <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d95c:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d95e:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d960:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d962:	e7b7      	b.n	2400d8d4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400d964:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400d968:	e7b4      	b.n	2400d8d4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400d96a:	2040      	movs	r0, #64	; 0x40
2400d96c:	e7b2      	b.n	2400d8d4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400d96e:	2080      	movs	r0, #128	; 0x80
2400d970:	e7b0      	b.n	2400d8d4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400d972:	f44f 7080 	mov.w	r0, #256	; 0x100
2400d976:	e7ad      	b.n	2400d8d4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400d978:	f44f 7000 	mov.w	r0, #512	; 0x200
2400d97c:	e7aa      	b.n	2400d8d4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400d97e:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400d982:	e7a7      	b.n	2400d8d4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400d984:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400d988:	e7a4      	b.n	2400d8d4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400d98a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400d98e:	e7a1      	b.n	2400d8d4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400d990:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400d994:	e79e      	b.n	2400d8d4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400d996:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400d99a:	e79b      	b.n	2400d8d4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400d99c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400d9a0:	e798      	b.n	2400d8d4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CC_ERR;
2400d9a2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400d9a6:	e795      	b.n	2400d8d4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400d9a8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400d9ac:	e792      	b.n	2400d8d4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_RESET;
2400d9ae:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
2400d9b2:	e78f      	b.n	2400d8d4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400d9b4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400d9b8:	e78c      	b.n	2400d8d4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400d9ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400d9be:	e789      	b.n	2400d8d4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400d9c0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400d9c4:	e786      	b.n	2400d8d4 <SDMMC_CmdStatusRegister+0x44>
2400d9c6:	bf00      	nop
2400d9c8:	200008b4 	.word	0x200008b4
2400d9cc:	10624dd3 	.word	0x10624dd3
2400d9d0:	fffee0c0 	.word	0xfffee0c0
2400d9d4:	00200045 	.word	0x00200045
2400d9d8:	002000c5 	.word	0x002000c5
2400d9dc:	fdffe008 	.word	0xfdffe008

2400d9e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
2400d9e0:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
2400d9e2:	4903      	ldr	r1, [pc, #12]	; (2400d9f0 <MX_FATFS_Init+0x10>)
2400d9e4:	4803      	ldr	r0, [pc, #12]	; (2400d9f4 <MX_FATFS_Init+0x14>)
2400d9e6:	f003 f81b 	bl	24010a20 <FATFS_LinkDriver>
2400d9ea:	4b03      	ldr	r3, [pc, #12]	; (2400d9f8 <MX_FATFS_Init+0x18>)
2400d9ec:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
2400d9ee:	bd08      	pop	{r3, pc}
2400d9f0:	2001dbe4 	.word	0x2001dbe4
2400d9f4:	2401c6ac 	.word	0x2401c6ac
2400d9f8:	2001dbe8 	.word	0x2001dbe8

2400d9fc <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
2400d9fc:	2000      	movs	r0, #0
2400d9fe:	4770      	bx	lr

2400da00 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
2400da00:	b510      	push	{r4, lr}
2400da02:	4694      	mov	ip, r2
2400da04:	b082      	sub	sp, #8
2400da06:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
2400da08:	460a      	mov	r2, r1
2400da0a:	4663      	mov	r3, ip
2400da0c:	4601      	mov	r1, r0
2400da0e:	9400      	str	r4, [sp, #0]
2400da10:	4803      	ldr	r0, [pc, #12]	; (2400da20 <BSP_SD_ReadBlocks+0x20>)
2400da12:	f7fd fa31 	bl	2400ae78 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
2400da16:	3800      	subs	r0, #0
2400da18:	bf18      	it	ne
2400da1a:	2001      	movne	r0, #1
2400da1c:	b002      	add	sp, #8
2400da1e:	bd10      	pop	{r4, pc}
2400da20:	2001c810 	.word	0x2001c810

2400da24 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
2400da24:	b510      	push	{r4, lr}
2400da26:	4694      	mov	ip, r2
2400da28:	b082      	sub	sp, #8
2400da2a:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
2400da2c:	460a      	mov	r2, r1
2400da2e:	4663      	mov	r3, ip
2400da30:	4601      	mov	r1, r0
2400da32:	9400      	str	r4, [sp, #0]
2400da34:	4803      	ldr	r0, [pc, #12]	; (2400da44 <BSP_SD_WriteBlocks+0x20>)
2400da36:	f7fd fb0f 	bl	2400b058 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
2400da3a:	3800      	subs	r0, #0
2400da3c:	bf18      	it	ne
2400da3e:	2001      	movne	r0, #1
2400da40:	b002      	add	sp, #8
2400da42:	bd10      	pop	{r4, pc}
2400da44:	2001c810 	.word	0x2001c810

2400da48 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
2400da48:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
2400da4a:	4803      	ldr	r0, [pc, #12]	; (2400da58 <BSP_SD_GetCardState+0x10>)
2400da4c:	f7fd ff5c 	bl	2400b908 <HAL_SD_GetCardState>
}
2400da50:	3804      	subs	r0, #4
2400da52:	bf18      	it	ne
2400da54:	2001      	movne	r0, #1
2400da56:	bd08      	pop	{r3, pc}
2400da58:	2001c810 	.word	0x2001c810

2400da5c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
2400da5c:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
2400da5e:	4801      	ldr	r0, [pc, #4]	; (2400da64 <BSP_SD_GetCardInfo+0x8>)
2400da60:	f7fd be0c 	b.w	2400b67c <HAL_SD_GetCardInfo>
2400da64:	2001c810 	.word	0x2001c810

2400da68 <BSP_SD_Init>:
{
2400da68:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
2400da6a:	f7f4 fbbd 	bl	240021e8 <BSP_SD_IsDetected>
2400da6e:	2801      	cmp	r0, #1
2400da70:	d001      	beq.n	2400da76 <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
2400da72:	2002      	movs	r0, #2
}
2400da74:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
2400da76:	4807      	ldr	r0, [pc, #28]	; (2400da94 <BSP_SD_Init+0x2c>)
2400da78:	f7fd fede 	bl	2400b838 <HAL_SD_Init>
  if (sd_state == MSD_OK)
2400da7c:	2800      	cmp	r0, #0
2400da7e:	d1f9      	bne.n	2400da74 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
2400da80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
2400da84:	4803      	ldr	r0, [pc, #12]	; (2400da94 <BSP_SD_Init+0x2c>)
2400da86:	f7fd fe0d 	bl	2400b6a4 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
2400da8a:	3800      	subs	r0, #0
2400da8c:	bf18      	it	ne
2400da8e:	2001      	movne	r0, #1
}
2400da90:	bd08      	pop	{r3, pc}
2400da92:	bf00      	nop
2400da94:	2001c810 	.word	0x2001c810

2400da98 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
2400da98:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
2400da9a:	4c0a      	ldr	r4, [pc, #40]	; (2400dac4 <SD_initialize+0x2c>)
2400da9c:	2501      	movs	r5, #1
2400da9e:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
2400daa0:	f7ff ffe2 	bl	2400da68 <BSP_SD_Init>
2400daa4:	b108      	cbz	r0, 2400daaa <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
2400daa6:	7820      	ldrb	r0, [r4, #0]
}
2400daa8:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
2400daaa:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
2400daac:	f7ff ffcc 	bl	2400da48 <BSP_SD_GetCardState>
2400dab0:	b918      	cbnz	r0, 2400daba <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
2400dab2:	7823      	ldrb	r3, [r4, #0]
2400dab4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
2400dab8:	7023      	strb	r3, [r4, #0]
  return Stat;
2400daba:	7823      	ldrb	r3, [r4, #0]
2400dabc:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
2400dabe:	7023      	strb	r3, [r4, #0]
  return Stat;
2400dac0:	7820      	ldrb	r0, [r4, #0]
}
2400dac2:	bd38      	pop	{r3, r4, r5, pc}
2400dac4:	200008c8 	.word	0x200008c8

2400dac8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
2400dac8:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
2400daca:	2301      	movs	r3, #1
2400dacc:	4c05      	ldr	r4, [pc, #20]	; (2400dae4 <SD_status+0x1c>)
2400dace:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
2400dad0:	f7ff ffba 	bl	2400da48 <BSP_SD_GetCardState>
2400dad4:	b918      	cbnz	r0, 2400dade <SD_status+0x16>
    Stat &= ~STA_NOINIT;
2400dad6:	7823      	ldrb	r3, [r4, #0]
2400dad8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
2400dadc:	7023      	strb	r3, [r4, #0]
  return Stat;
2400dade:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
2400dae0:	bd10      	pop	{r4, pc}
2400dae2:	bf00      	nop
2400dae4:	200008c8 	.word	0x200008c8

2400dae8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
2400dae8:	b508      	push	{r3, lr}
2400daea:	4608      	mov	r0, r1
2400daec:	4611      	mov	r1, r2
2400daee:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
2400daf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400daf4:	f7ff ff84 	bl	2400da00 <BSP_SD_ReadBlocks>
2400daf8:	b108      	cbz	r0, 2400dafe <SD_read+0x16>
  DRESULT res = RES_ERROR;
2400dafa:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }

  return res;
}
2400dafc:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
2400dafe:	f7ff ffa3 	bl	2400da48 <BSP_SD_GetCardState>
2400db02:	2800      	cmp	r0, #0
2400db04:	d0fa      	beq.n	2400dafc <SD_read+0x14>
2400db06:	f7ff ff9f 	bl	2400da48 <BSP_SD_GetCardState>
2400db0a:	2800      	cmp	r0, #0
2400db0c:	d1f7      	bne.n	2400dafe <SD_read+0x16>
2400db0e:	e7f5      	b.n	2400dafc <SD_read+0x14>

2400db10 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400db10:	4b18      	ldr	r3, [pc, #96]	; (2400db74 <SD_ioctl+0x64>)
{
2400db12:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400db14:	7818      	ldrb	r0, [r3, #0]
{
2400db16:	b08b      	sub	sp, #44	; 0x2c
  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400db18:	f010 0401 	ands.w	r4, r0, #1
2400db1c:	d106      	bne.n	2400db2c <SD_ioctl+0x1c>
2400db1e:	4615      	mov	r5, r2

  switch (cmd)
2400db20:	2903      	cmp	r1, #3
2400db22:	d824      	bhi.n	2400db6e <SD_ioctl+0x5e>
2400db24:	e8df f001 	tbb	[pc, r1]
2400db28:	1a120a06 	.word	0x1a120a06
  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400db2c:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
2400db2e:	4620      	mov	r0, r4
2400db30:	b00b      	add	sp, #44	; 0x2c
2400db32:	bd30      	pop	{r4, r5, pc}
    res = RES_OK;
2400db34:	460c      	mov	r4, r1
}
2400db36:	4620      	mov	r0, r4
2400db38:	b00b      	add	sp, #44	; 0x2c
2400db3a:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
2400db3c:	a801      	add	r0, sp, #4
2400db3e:	f7ff ff8d 	bl	2400da5c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
2400db42:	9b07      	ldr	r3, [sp, #28]
}
2400db44:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockNbr;
2400db46:	602b      	str	r3, [r5, #0]
}
2400db48:	b00b      	add	sp, #44	; 0x2c
2400db4a:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
2400db4c:	a801      	add	r0, sp, #4
2400db4e:	f7ff ff85 	bl	2400da5c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
2400db52:	9b08      	ldr	r3, [sp, #32]
}
2400db54:	4620      	mov	r0, r4
    *(WORD*)buff = CardInfo.LogBlockSize;
2400db56:	802b      	strh	r3, [r5, #0]
}
2400db58:	b00b      	add	sp, #44	; 0x2c
2400db5a:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
2400db5c:	a801      	add	r0, sp, #4
2400db5e:	f7ff ff7d 	bl	2400da5c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
2400db62:	9b08      	ldr	r3, [sp, #32]
}
2400db64:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
2400db66:	0a5b      	lsrs	r3, r3, #9
2400db68:	602b      	str	r3, [r5, #0]
}
2400db6a:	b00b      	add	sp, #44	; 0x2c
2400db6c:	bd30      	pop	{r4, r5, pc}
  switch (cmd)
2400db6e:	2404      	movs	r4, #4
2400db70:	e7dd      	b.n	2400db2e <SD_ioctl+0x1e>
2400db72:	bf00      	nop
2400db74:	200008c8 	.word	0x200008c8

2400db78 <SD_write>:
{
2400db78:	b508      	push	{r3, lr}
2400db7a:	4608      	mov	r0, r1
2400db7c:	4611      	mov	r1, r2
2400db7e:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
2400db80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400db84:	f7ff ff4e 	bl	2400da24 <BSP_SD_WriteBlocks>
2400db88:	b108      	cbz	r0, 2400db8e <SD_write+0x16>
  DRESULT res = RES_ERROR;
2400db8a:	2001      	movs	r0, #1
}
2400db8c:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
2400db8e:	f7ff ff5b 	bl	2400da48 <BSP_SD_GetCardState>
2400db92:	2800      	cmp	r0, #0
2400db94:	d0fa      	beq.n	2400db8c <SD_write+0x14>
2400db96:	f7ff ff57 	bl	2400da48 <BSP_SD_GetCardState>
2400db9a:	2800      	cmp	r0, #0
2400db9c:	d1f7      	bne.n	2400db8e <SD_write+0x16>
2400db9e:	e7f5      	b.n	2400db8c <SD_write+0x14>

2400dba0 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
2400dba0:	4b03      	ldr	r3, [pc, #12]	; (2400dbb0 <disk_status+0x10>)
2400dba2:	eb03 0280 	add.w	r2, r3, r0, lsl #2
2400dba6:	4418      	add	r0, r3
2400dba8:	6853      	ldr	r3, [r2, #4]
2400dbaa:	7a00      	ldrb	r0, [r0, #8]
2400dbac:	685b      	ldr	r3, [r3, #4]
2400dbae:	4718      	bx	r3
2400dbb0:	2001de14 	.word	0x2001de14

2400dbb4 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
2400dbb4:	4b07      	ldr	r3, [pc, #28]	; (2400dbd4 <disk_initialize+0x20>)
2400dbb6:	5c1a      	ldrb	r2, [r3, r0]
2400dbb8:	b952      	cbnz	r2, 2400dbd0 <disk_initialize+0x1c>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
2400dbba:	eb03 0280 	add.w	r2, r3, r0, lsl #2
2400dbbe:	1819      	adds	r1, r3, r0
    disk.is_initialized[pdrv] = 1;
2400dbc0:	f04f 0c01 	mov.w	ip, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
2400dbc4:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
2400dbc6:	f803 c000 	strb.w	ip, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
2400dbca:	7a08      	ldrb	r0, [r1, #8]
2400dbcc:	6813      	ldr	r3, [r2, #0]
2400dbce:	4718      	bx	r3
  }
  return stat;
}
2400dbd0:	2000      	movs	r0, #0
2400dbd2:	4770      	bx	lr
2400dbd4:	2001de14 	.word	0x2001de14

2400dbd8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
2400dbd8:	b410      	push	{r4}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
2400dbda:	4c06      	ldr	r4, [pc, #24]	; (2400dbf4 <disk_read+0x1c>)
2400dbdc:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
2400dbe0:	4420      	add	r0, r4
2400dbe2:	f8dc 4004 	ldr.w	r4, [ip, #4]
2400dbe6:	7a00      	ldrb	r0, [r0, #8]
2400dbe8:	68a4      	ldr	r4, [r4, #8]
2400dbea:	46a4      	mov	ip, r4
  return res;
}
2400dbec:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
2400dbf0:	4760      	bx	ip
2400dbf2:	bf00      	nop
2400dbf4:	2001de14 	.word	0x2001de14

2400dbf8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
2400dbf8:	b410      	push	{r4}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
2400dbfa:	4c06      	ldr	r4, [pc, #24]	; (2400dc14 <disk_write+0x1c>)
2400dbfc:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
2400dc00:	4420      	add	r0, r4
2400dc02:	f8dc 4004 	ldr.w	r4, [ip, #4]
2400dc06:	7a00      	ldrb	r0, [r0, #8]
2400dc08:	68e4      	ldr	r4, [r4, #12]
2400dc0a:	46a4      	mov	ip, r4
  return res;
}
2400dc0c:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
2400dc10:	4760      	bx	ip
2400dc12:	bf00      	nop
2400dc14:	2001de14 	.word	0x2001de14

2400dc18 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
2400dc18:	4b04      	ldr	r3, [pc, #16]	; (2400dc2c <disk_ioctl+0x14>)
2400dc1a:	eb03 0c00 	add.w	ip, r3, r0
2400dc1e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
2400dc22:	6843      	ldr	r3, [r0, #4]
2400dc24:	f89c 0008 	ldrb.w	r0, [ip, #8]
2400dc28:	691b      	ldr	r3, [r3, #16]
2400dc2a:	4718      	bx	r3
2400dc2c:	2001de14 	.word	0x2001de14

2400dc30 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
2400dc30:	4b2a      	ldr	r3, [pc, #168]	; (2400dcdc <inc_lock+0xac>)
{
2400dc32:	4684      	mov	ip, r0
2400dc34:	b470      	push	{r4, r5, r6}
		if (Files[i].fs == dp->obj.fs &&
2400dc36:	681a      	ldr	r2, [r3, #0]
2400dc38:	6804      	ldr	r4, [r0, #0]
2400dc3a:	4294      	cmp	r4, r2
2400dc3c:	d01c      	beq.n	2400dc78 <inc_lock+0x48>
2400dc3e:	6918      	ldr	r0, [r3, #16]
2400dc40:	42a0      	cmp	r0, r4
2400dc42:	d005      	beq.n	2400dc50 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400dc44:	b372      	cbz	r2, 2400dca4 <inc_lock+0x74>
2400dc46:	2800      	cmp	r0, #0
2400dc48:	d044      	beq.n	2400dcd4 <inc_lock+0xa4>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
2400dc4a:	2000      	movs	r0, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
2400dc4c:	bc70      	pop	{r4, r5, r6}
2400dc4e:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
2400dc50:	695d      	ldr	r5, [r3, #20]
2400dc52:	f8dc 6008 	ldr.w	r6, [ip, #8]
2400dc56:	42b5      	cmp	r5, r6
2400dc58:	d1f4      	bne.n	2400dc44 <inc_lock+0x14>
			Files[i].clu == dp->obj.sclust &&
2400dc5a:	f8dc 5014 	ldr.w	r5, [ip, #20]
2400dc5e:	699e      	ldr	r6, [r3, #24]
2400dc60:	42ae      	cmp	r6, r5
2400dc62:	d1ef      	bne.n	2400dc44 <inc_lock+0x14>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
2400dc64:	2201      	movs	r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400dc66:	b999      	cbnz	r1, 2400dc90 <inc_lock+0x60>
2400dc68:	eb03 1402 	add.w	r4, r3, r2, lsl #4
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
2400dc6c:	1c50      	adds	r0, r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400dc6e:	0111      	lsls	r1, r2, #4
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400dc70:	89a2      	ldrh	r2, [r4, #12]
2400dc72:	3201      	adds	r2, #1
2400dc74:	b292      	uxth	r2, r2
2400dc76:	e029      	b.n	2400dccc <inc_lock+0x9c>
		if (Files[i].fs == dp->obj.fs &&
2400dc78:	6880      	ldr	r0, [r0, #8]
2400dc7a:	685d      	ldr	r5, [r3, #4]
2400dc7c:	4285      	cmp	r5, r0
2400dc7e:	d1de      	bne.n	2400dc3e <inc_lock+0xe>
			Files[i].clu == dp->obj.sclust &&
2400dc80:	f8dc 5014 	ldr.w	r5, [ip, #20]
2400dc84:	6898      	ldr	r0, [r3, #8]
2400dc86:	4285      	cmp	r5, r0
2400dc88:	d1d9      	bne.n	2400dc3e <inc_lock+0xe>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
2400dc8a:	2200      	movs	r2, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400dc8c:	2900      	cmp	r1, #0
2400dc8e:	d0eb      	beq.n	2400dc68 <inc_lock+0x38>
2400dc90:	eb03 1002 	add.w	r0, r3, r2, lsl #4
2400dc94:	0111      	lsls	r1, r2, #4
2400dc96:	8980      	ldrh	r0, [r0, #12]
2400dc98:	2800      	cmp	r0, #0
2400dc9a:	d1d6      	bne.n	2400dc4a <inc_lock+0x1a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
2400dc9c:	1c50      	adds	r0, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400dc9e:	f44f 7280 	mov.w	r2, #256	; 0x100
2400dca2:	e013      	b.n	2400dccc <inc_lock+0x9c>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400dca4:	2001      	movs	r0, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400dca6:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
2400dca8:	ea4f 1102 	mov.w	r1, r2, lsl #4
2400dcac:	eb03 1202 	add.w	r2, r3, r2, lsl #4
2400dcb0:	505c      	str	r4, [r3, r1]
		Files[i].clu = dp->obj.sclust;
2400dcb2:	f8dc 4014 	ldr.w	r4, [ip, #20]
2400dcb6:	f8dc 5008 	ldr.w	r5, [ip, #8]
2400dcba:	e9c2 5401 	strd	r5, r4, [r2, #4]
		Files[i].ctr = 0;
2400dcbe:	f04f 0400 	mov.w	r4, #0
2400dcc2:	8194      	strh	r4, [r2, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400dcc4:	bf14      	ite	ne
2400dcc6:	f44f 7280 	movne.w	r2, #256	; 0x100
2400dcca:	2201      	moveq	r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400dccc:	440b      	add	r3, r1
2400dcce:	819a      	strh	r2, [r3, #12]
}
2400dcd0:	bc70      	pop	{r4, r5, r6}
2400dcd2:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400dcd4:	2002      	movs	r0, #2
2400dcd6:	2201      	movs	r2, #1
2400dcd8:	e7e5      	b.n	2400dca6 <inc_lock+0x76>
2400dcda:	bf00      	nop
2400dcdc:	2001dbf0 	.word	0x2001dbf0

2400dce0 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
2400dce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2400dce4:	440a      	add	r2, r1
2400dce6:	460d      	mov	r5, r1
2400dce8:	4606      	mov	r6, r0
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400dcea:	4f37      	ldr	r7, [pc, #220]	; (2400ddc8 <pattern_matching+0xe8>)
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
2400dcec:	42aa      	cmp	r2, r5
2400dcee:	d012      	beq.n	2400dd16 <pattern_matching+0x36>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400dcf0:	f815 cb01 	ldrb.w	ip, [r5], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400dcf4:	f1ac 0161 	sub.w	r1, ip, #97	; 0x61
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400dcf8:	eb07 000c 	add.w	r0, r7, ip
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400dcfc:	fa1f f48c 	uxth.w	r4, ip
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400dd00:	2919      	cmp	r1, #25
2400dd02:	d9f3      	bls.n	2400dcec <pattern_matching+0xc>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400dd04:	2c7f      	cmp	r4, #127	; 0x7f
2400dd06:	bf88      	it	hi
2400dd08:	f810 4c80 	ldrbhi.w	r4, [r0, #-128]
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
2400dd0c:	2c00      	cmp	r4, #0
2400dd0e:	d1ed      	bne.n	2400dcec <pattern_matching+0xc>
2400dd10:	2000      	movs	r0, #0
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
2400dd12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!*pat && inf) return 1;		/* (short circuit) */
2400dd16:	1e1f      	subs	r7, r3, #0
2400dd18:	f896 8000 	ldrb.w	r8, [r6]
2400dd1c:	bf18      	it	ne
2400dd1e:	2701      	movne	r7, #1
2400dd20:	f1b8 0f00 	cmp.w	r8, #0
2400dd24:	d100      	bne.n	2400dd28 <pattern_matching+0x48>
2400dd26:	bb8f      	cbnz	r7, 2400dd8c <pattern_matching+0xac>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400dd28:	4c27      	ldr	r4, [pc, #156]	; (2400ddc8 <pattern_matching+0xe8>)
		pp = pat; np = nam;			/* Top of pattern and name to match */
2400dd2a:	4630      	mov	r0, r6
{
2400dd2c:	4643      	mov	r3, r8
		pp = pat; np = nam;			/* Top of pattern and name to match */
2400dd2e:	46a9      	mov	r9, r5
2400dd30:	e010      	b.n	2400dd54 <pattern_matching+0x74>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400dd32:	3a20      	subs	r2, #32
2400dd34:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400dd36:	f819 1b01 	ldrb.w	r1, [r9], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400dd3a:	f1a1 0c61 	sub.w	ip, r1, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400dd3e:	b28b      	uxth	r3, r1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400dd40:	f1bc 0f19 	cmp.w	ip, #25
2400dd44:	d815      	bhi.n	2400dd72 <pattern_matching+0x92>
2400dd46:	3b20      	subs	r3, #32
2400dd48:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
2400dd4a:	4293      	cmp	r3, r2
2400dd4c:	d118      	bne.n	2400dd80 <pattern_matching+0xa0>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
2400dd4e:	b1eb      	cbz	r3, 2400dd8c <pattern_matching+0xac>
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
2400dd50:	f810 3f01 	ldrb.w	r3, [r0, #1]!
2400dd54:	2b3f      	cmp	r3, #63	; 0x3f
2400dd56:	d01c      	beq.n	2400dd92 <pattern_matching+0xb2>
2400dd58:	2b2a      	cmp	r3, #42	; 0x2a
2400dd5a:	d01a      	beq.n	2400dd92 <pattern_matching+0xb2>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400dd5c:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400dd60:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400dd62:	2919      	cmp	r1, #25
2400dd64:	d9e5      	bls.n	2400dd32 <pattern_matching+0x52>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400dd66:	2a7f      	cmp	r2, #127	; 0x7f
2400dd68:	d9e5      	bls.n	2400dd36 <pattern_matching+0x56>
2400dd6a:	4423      	add	r3, r4
2400dd6c:	f813 2c80 	ldrb.w	r2, [r3, #-128]
2400dd70:	e7e1      	b.n	2400dd36 <pattern_matching+0x56>
2400dd72:	2b7f      	cmp	r3, #127	; 0x7f
2400dd74:	d9e9      	bls.n	2400dd4a <pattern_matching+0x6a>
2400dd76:	4421      	add	r1, r4
2400dd78:	f811 3c80 	ldrb.w	r3, [r1, #-128]
			if (pc != nc) break;	/* Branch mismatched? */
2400dd7c:	4293      	cmp	r3, r2
2400dd7e:	d0e6      	beq.n	2400dd4e <pattern_matching+0x6e>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400dd80:	3501      	adds	r5, #1
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
2400dd82:	2b00      	cmp	r3, #0
2400dd84:	d0c4      	beq.n	2400dd10 <pattern_matching+0x30>
2400dd86:	2f00      	cmp	r7, #0
2400dd88:	d1cf      	bne.n	2400dd2a <pattern_matching+0x4a>
2400dd8a:	e7c1      	b.n	2400dd10 <pattern_matching+0x30>
	if (!*pat && inf) return 1;		/* (short circuit) */
2400dd8c:	2001      	movs	r0, #1
}
2400dd8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2400dd92:	4601      	mov	r1, r0
				nm = nx = 0;
2400dd94:	2300      	movs	r3, #0
2400dd96:	f811 cb01 	ldrb.w	ip, [r1], #1
2400dd9a:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
2400dd9c:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
2400dda0:	4608      	mov	r0, r1
				} while (*pp == '?' || *pp == '*');
2400dda2:	f811 cb01 	ldrb.w	ip, [r1], #1
					if (*pp++ == '?') nm++; else nx = 1;
2400dda6:	bf0c      	ite	eq
2400dda8:	3201      	addeq	r2, #1
2400ddaa:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
2400ddac:	f1bc 0f2a 	cmp.w	ip, #42	; 0x2a
2400ddb0:	d0f4      	beq.n	2400dd9c <pattern_matching+0xbc>
2400ddb2:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
2400ddb6:	d0f1      	beq.n	2400dd9c <pattern_matching+0xbc>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
2400ddb8:	4649      	mov	r1, r9
2400ddba:	f7ff ff91 	bl	2400dce0 <pattern_matching>
2400ddbe:	2800      	cmp	r0, #0
2400ddc0:	d1e4      	bne.n	2400dd8c <pattern_matching+0xac>
				nc = *np; break;	/* Branch mismatched */
2400ddc2:	f899 3000 	ldrb.w	r3, [r9]
2400ddc6:	e7db      	b.n	2400dd80 <pattern_matching+0xa0>
2400ddc8:	2401c6d4 	.word	0x2401c6d4

2400ddcc <get_fileinfo>:
	fno->fname[0] = 0;		/* Invaidate file info */
2400ddcc:	2300      	movs	r3, #0
{
2400ddce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
2400ddd2:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
2400ddd6:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
2400ddd8:	69c2      	ldr	r2, [r0, #28]
2400ddda:	2a00      	cmp	r2, #0
2400dddc:	d063      	beq.n	2400dea6 <get_fileinfo+0xda>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
2400ddde:	6b02      	ldr	r2, [r0, #48]	; 0x30
2400dde0:	4604      	mov	r4, r0
2400dde2:	460d      	mov	r5, r1
2400dde4:	3201      	adds	r2, #1
2400dde6:	d01f      	beq.n	2400de28 <get_fileinfo+0x5c>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2400dde8:	f8d8 300c 	ldr.w	r3, [r8, #12]
2400ddec:	8818      	ldrh	r0, [r3, #0]
2400ddee:	2800      	cmp	r0, #0
2400ddf0:	d063      	beq.n	2400deba <get_fileinfo+0xee>
2400ddf2:	f101 0715 	add.w	r7, r1, #21
2400ddf6:	2601      	movs	r6, #1
2400ddf8:	e000      	b.n	2400ddfc <get_fileinfo+0x30>
2400ddfa:	461e      	mov	r6, r3
				w = ff_convert(w, 0);		/* Unicode -> OEM */
2400ddfc:	2100      	movs	r1, #0
2400ddfe:	f002 fe35 	bl	24010a6c <ff_convert>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2400de02:	1c73      	adds	r3, r6, #1
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
2400de04:	2800      	cmp	r0, #0
2400de06:	d058      	beq.n	2400deba <get_fileinfo+0xee>
2400de08:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
2400de0c:	d055      	beq.n	2400deba <get_fileinfo+0xee>
				fno->fname[i++] = (TCHAR)w;
2400de0e:	f807 0f01 	strb.w	r0, [r7, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2400de12:	f8d8 200c 	ldr.w	r2, [r8, #12]
2400de16:	f832 0016 	ldrh.w	r0, [r2, r6, lsl #1]
2400de1a:	2800      	cmp	r0, #0
2400de1c:	d1ed      	bne.n	2400ddfa <get_fileinfo+0x2e>
			fno->fname[i] = 0;	/* Terminate the LFN */
2400de1e:	442e      	add	r6, r5
2400de20:	2300      	movs	r3, #0
2400de22:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
2400de24:	7da8      	ldrb	r0, [r5, #22]
2400de26:	e000      	b.n	2400de2a <get_fileinfo+0x5e>
2400de28:	4618      	mov	r0, r3
	i = j = 0;
2400de2a:	f04f 0c00 	mov.w	ip, #0
			fno->altname[j++] = '.';
2400de2e:	272e      	movs	r7, #46	; 0x2e
	i = j = 0;
2400de30:	4662      	mov	r2, ip
		c = (TCHAR)dp->dir[i++];
2400de32:	6a21      	ldr	r1, [r4, #32]
2400de34:	5c8b      	ldrb	r3, [r1, r2]
2400de36:	3201      	adds	r2, #1
		if (c == ' ') continue;				/* Skip padding spaces */
2400de38:	2b20      	cmp	r3, #32
2400de3a:	d01b      	beq.n	2400de74 <get_fileinfo+0xa8>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
2400de3c:	2b05      	cmp	r3, #5
2400de3e:	bf08      	it	eq
2400de40:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
2400de42:	2a09      	cmp	r2, #9
2400de44:	d031      	beq.n	2400deaa <get_fileinfo+0xde>
		fno->altname[j] = c;
2400de46:	eb05 010c 	add.w	r1, r5, ip
2400de4a:	724b      	strb	r3, [r1, #9]
		if (!lfv) {
2400de4c:	b980      	cbnz	r0, 2400de70 <get_fileinfo+0xa4>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
2400de4e:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
2400de52:	2e19      	cmp	r6, #25
2400de54:	d80b      	bhi.n	2400de6e <get_fileinfo+0xa2>
2400de56:	6a26      	ldr	r6, [r4, #32]
2400de58:	2a08      	cmp	r2, #8
2400de5a:	f896 e00c 	ldrb.w	lr, [r6, #12]
2400de5e:	bf8c      	ite	hi
2400de60:	2610      	movhi	r6, #16
2400de62:	2608      	movls	r6, #8
2400de64:	ea1e 0f06 	tst.w	lr, r6
2400de68:	d001      	beq.n	2400de6e <get_fileinfo+0xa2>
				c += 0x20;			/* To lower */
2400de6a:	3320      	adds	r3, #32
2400de6c:	b2db      	uxtb	r3, r3
			fno->fname[j] = c;
2400de6e:	758b      	strb	r3, [r1, #22]
		j++;
2400de70:	f10c 0c01 	add.w	ip, ip, #1
	while (i < 11) {		/* Copy name body and extension */
2400de74:	2a0b      	cmp	r2, #11
2400de76:	d1dc      	bne.n	2400de32 <get_fileinfo+0x66>
		fno->fname[j] = 0;
2400de78:	eb05 010c 	add.w	r1, r5, ip
	if (!lfv) {
2400de7c:	b928      	cbnz	r0, 2400de8a <get_fileinfo+0xbe>
		fno->fname[j] = 0;
2400de7e:	7588      	strb	r0, [r1, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
2400de80:	6a23      	ldr	r3, [r4, #32]
2400de82:	7b1b      	ldrb	r3, [r3, #12]
2400de84:	2b00      	cmp	r3, #0
2400de86:	bf08      	it	eq
2400de88:	4629      	moveq	r1, r5
	fno->altname[j] = 0;	/* Terminate the SFN */
2400de8a:	2300      	movs	r3, #0
2400de8c:	724b      	strb	r3, [r1, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
2400de8e:	6a23      	ldr	r3, [r4, #32]
2400de90:	7adb      	ldrb	r3, [r3, #11]
2400de92:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[0];
2400de94:	6a23      	ldr	r3, [r4, #32]
2400de96:	69db      	ldr	r3, [r3, #28]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
2400de98:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[0];
2400de9a:	6a23      	ldr	r3, [r4, #32]
2400de9c:	f8d3 3016 	ldr.w	r3, [r3, #22]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
2400dea0:	0c1a      	lsrs	r2, r3, #16
2400dea2:	80eb      	strh	r3, [r5, #6]
2400dea4:	80aa      	strh	r2, [r5, #4]
}
2400dea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!lfv) fno->fname[j] = '.';
2400deaa:	eb05 010c 	add.w	r1, r5, ip
2400deae:	b900      	cbnz	r0, 2400deb2 <get_fileinfo+0xe6>
2400deb0:	758f      	strb	r7, [r1, #22]
			fno->altname[j++] = '.';
2400deb2:	f10c 0c01 	add.w	ip, ip, #1
2400deb6:	724f      	strb	r7, [r1, #9]
2400deb8:	e7c5      	b.n	2400de46 <get_fileinfo+0x7a>
			i = j = 0;
2400deba:	2600      	movs	r6, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
2400debc:	2300      	movs	r3, #0
2400debe:	442e      	add	r6, r5
2400dec0:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
2400dec2:	7da8      	ldrb	r0, [r5, #22]
2400dec4:	e7b1      	b.n	2400de2a <get_fileinfo+0x5e>
2400dec6:	bf00      	nop

2400dec8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
2400dec8:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
2400deca:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
2400dece:	2300      	movs	r3, #0
{
2400ded0:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
2400ded2:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
2400ded4:	70c3      	strb	r3, [r0, #3]
2400ded6:	6306      	str	r6, [r0, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
2400ded8:	d00c      	beq.n	2400def4 <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400deda:	460d      	mov	r5, r1
2400dedc:	460a      	mov	r2, r1
2400dede:	2301      	movs	r3, #1
2400dee0:	f100 0134 	add.w	r1, r0, #52	; 0x34
2400dee4:	7840      	ldrb	r0, [r0, #1]
2400dee6:	f7ff fe77 	bl	2400dbd8 <disk_read>
2400deea:	b110      	cbz	r0, 2400def2 <check_fs+0x2a>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
2400deec:	2004      	movs	r0, #4
			fs->winsect = sector;
2400deee:	6326      	str	r6, [r4, #48]	; 0x30
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
2400def0:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
2400def2:	6325      	str	r5, [r4, #48]	; 0x30
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
2400def4:	f64a 2355 	movw	r3, #43605	; 0xaa55
2400def8:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
2400defc:	429a      	cmp	r2, r3
2400defe:	d11a      	bne.n	2400df36 <check_fs+0x6e>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
2400df00:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
2400df04:	2be9      	cmp	r3, #233	; 0xe9
2400df06:	d007      	beq.n	2400df18 <check_fs+0x50>
2400df08:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400df0a:	4a0d      	ldr	r2, [pc, #52]	; (2400df40 <check_fs+0x78>)
2400df0c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
2400df10:	4293      	cmp	r3, r2
2400df12:	d001      	beq.n	2400df18 <check_fs+0x50>
	return 2;
2400df14:	2002      	movs	r0, #2
}
2400df16:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
2400df18:	f8d4 306a 	ldr.w	r3, [r4, #106]	; 0x6a
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
2400df1c:	4a09      	ldr	r2, [pc, #36]	; (2400df44 <check_fs+0x7c>)
2400df1e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
2400df22:	4293      	cmp	r3, r2
2400df24:	d009      	beq.n	2400df3a <check_fs+0x72>
	rv = rv << 8 | ptr[0];
2400df26:	f8d4 0086 	ldr.w	r0, [r4, #134]	; 0x86
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
2400df2a:	4b07      	ldr	r3, [pc, #28]	; (2400df48 <check_fs+0x80>)
2400df2c:	1ac0      	subs	r0, r0, r3
2400df2e:	bf18      	it	ne
2400df30:	2001      	movne	r0, #1
2400df32:	0040      	lsls	r0, r0, #1
}
2400df34:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
2400df36:	2003      	movs	r0, #3
}
2400df38:	bd70      	pop	{r4, r5, r6, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
2400df3a:	2000      	movs	r0, #0
}
2400df3c:	bd70      	pop	{r4, r5, r6, pc}
2400df3e:	bf00      	nop
2400df40:	009000eb 	.word	0x009000eb
2400df44:	00544146 	.word	0x00544146
2400df48:	33544146 	.word	0x33544146

2400df4c <move_window>:
{
2400df4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
2400df4e:	6b06      	ldr	r6, [r0, #48]	; 0x30
{
2400df50:	b083      	sub	sp, #12
	if (sector != fs->winsect) {	/* Window offset changed? */
2400df52:	428e      	cmp	r6, r1
2400df54:	d024      	beq.n	2400dfa0 <move_window+0x54>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400df56:	78c3      	ldrb	r3, [r0, #3]
2400df58:	460d      	mov	r5, r1
2400df5a:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400df5c:	f100 0134 	add.w	r1, r0, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400df60:	b963      	cbnz	r3, 2400df7c <move_window+0x30>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400df62:	2301      	movs	r3, #1
2400df64:	462a      	mov	r2, r5
2400df66:	7860      	ldrb	r0, [r4, #1]
2400df68:	f7ff fe36 	bl	2400dbd8 <disk_read>
2400df6c:	b910      	cbnz	r0, 2400df74 <move_window+0x28>
			fs->winsect = sector;
2400df6e:	6325      	str	r5, [r4, #48]	; 0x30
}
2400df70:	b003      	add	sp, #12
2400df72:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = FR_DISK_ERR;
2400df74:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
2400df76:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
2400df7a:	e7f8      	b.n	2400df6e <move_window+0x22>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400df7c:	2301      	movs	r3, #1
2400df7e:	4632      	mov	r2, r6
2400df80:	7840      	ldrb	r0, [r0, #1]
2400df82:	9101      	str	r1, [sp, #4]
2400df84:	f7ff fe38 	bl	2400dbf8 <disk_write>
2400df88:	b9d0      	cbnz	r0, 2400dfc0 <move_window+0x74>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400df8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
2400df8c:	69e3      	ldr	r3, [r4, #28]
2400df8e:	1ab2      	subs	r2, r6, r2
2400df90:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
2400df92:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400df94:	429a      	cmp	r2, r3
2400df96:	d2e4      	bcs.n	2400df62 <move_window+0x16>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400df98:	78a7      	ldrb	r7, [r4, #2]
2400df9a:	2f01      	cmp	r7, #1
2400df9c:	d804      	bhi.n	2400dfa8 <move_window+0x5c>
2400df9e:	e7e0      	b.n	2400df62 <move_window+0x16>
	FRESULT res = FR_OK;
2400dfa0:	2000      	movs	r0, #0
}
2400dfa2:	b003      	add	sp, #12
2400dfa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					wsect += fs->fsize;
2400dfa6:	69e3      	ldr	r3, [r4, #28]
2400dfa8:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400dfaa:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400dfac:	2301      	movs	r3, #1
2400dfae:	7860      	ldrb	r0, [r4, #1]
2400dfb0:	4632      	mov	r2, r6
2400dfb2:	9101      	str	r1, [sp, #4]
2400dfb4:	f7ff fe20 	bl	2400dbf8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400dfb8:	2f01      	cmp	r7, #1
2400dfba:	9901      	ldr	r1, [sp, #4]
2400dfbc:	d1f3      	bne.n	2400dfa6 <move_window+0x5a>
2400dfbe:	e7d0      	b.n	2400df62 <move_window+0x16>
			res = FR_DISK_ERR;
2400dfc0:	2001      	movs	r0, #1
}
2400dfc2:	b003      	add	sp, #12
2400dfc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
2400dfc6:	bf00      	nop

2400dfc8 <find_volume>:
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
2400dfc8:	2300      	movs	r3, #0
{
2400dfca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*rfs = 0;
2400dfce:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
2400dfd0:	6804      	ldr	r4, [r0, #0]
2400dfd2:	b18c      	cbz	r4, 2400dff8 <find_volume+0x30>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400dfd4:	7825      	ldrb	r5, [r4, #0]
2400dfd6:	2d1f      	cmp	r5, #31
2400dfd8:	d912      	bls.n	2400e000 <find_volume+0x38>
2400dfda:	2d3a      	cmp	r5, #58	; 0x3a
2400dfdc:	d010      	beq.n	2400e000 <find_volume+0x38>
2400dfde:	46a4      	mov	ip, r4
2400dfe0:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
2400dfe4:	2b1f      	cmp	r3, #31
2400dfe6:	d90d      	bls.n	2400e004 <find_volume+0x3c>
2400dfe8:	2b3a      	cmp	r3, #58	; 0x3a
2400dfea:	d1f9      	bne.n	2400dfe0 <find_volume+0x18>
			i = *tp++ - '0';
2400dfec:	3401      	adds	r4, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
2400dfee:	45a4      	cmp	ip, r4
2400dff0:	d102      	bne.n	2400dff8 <find_volume+0x30>
2400dff2:	2d30      	cmp	r5, #48	; 0x30
2400dff4:	f000 80da 	beq.w	2400e1ac <find_volume+0x1e4>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
2400dff8:	240b      	movs	r4, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
2400dffa:	4620      	mov	r0, r4
2400dffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400e000:	462b      	mov	r3, r5
2400e002:	46a4      	mov	ip, r4
		if (*tt == ':') {	/* If a ':' is exist in the path name */
2400e004:	2b3a      	cmp	r3, #58	; 0x3a
2400e006:	d0f1      	beq.n	2400dfec <find_volume+0x24>
	fs = FatFs[vol];					/* Get pointer to the file system object */
2400e008:	4ba3      	ldr	r3, [pc, #652]	; (2400e298 <find_volume+0x2d0>)
2400e00a:	681d      	ldr	r5, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
2400e00c:	2d00      	cmp	r5, #0
2400e00e:	f000 80c9 	beq.w	2400e1a4 <find_volume+0x1dc>
	*rfs = fs;							/* Return pointer to the file system object */
2400e012:	600d      	str	r5, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
2400e014:	f002 04fe 	and.w	r4, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
2400e018:	782b      	ldrb	r3, [r5, #0]
2400e01a:	b17b      	cbz	r3, 2400e03c <find_volume+0x74>
		stat = disk_status(fs->drv);
2400e01c:	7868      	ldrb	r0, [r5, #1]
2400e01e:	f7ff fdbf 	bl	2400dba0 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
2400e022:	07c1      	lsls	r1, r0, #31
2400e024:	d40a      	bmi.n	2400e03c <find_volume+0x74>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
2400e026:	2c00      	cmp	r4, #0
2400e028:	f000 80ab 	beq.w	2400e182 <find_volume+0x1ba>
2400e02c:	f010 0404 	ands.w	r4, r0, #4
2400e030:	f000 80a7 	beq.w	2400e182 <find_volume+0x1ba>
				return FR_WRITE_PROTECTED;
2400e034:	240a      	movs	r4, #10
}
2400e036:	4620      	mov	r0, r4
2400e038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
2400e03c:	2000      	movs	r0, #0
2400e03e:	8028      	strh	r0, [r5, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
2400e040:	f7ff fdb8 	bl	2400dbb4 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
2400e044:	07c2      	lsls	r2, r0, #31
2400e046:	f100 809f 	bmi.w	2400e188 <find_volume+0x1c0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
2400e04a:	b10c      	cbz	r4, 2400e050 <find_volume+0x88>
2400e04c:	0743      	lsls	r3, r0, #29
2400e04e:	d4f1      	bmi.n	2400e034 <find_volume+0x6c>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
2400e050:	2100      	movs	r1, #0
2400e052:	4628      	mov	r0, r5
2400e054:	f7ff ff38 	bl	2400dec8 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
2400e058:	2802      	cmp	r0, #2
2400e05a:	d077      	beq.n	2400e14c <find_volume+0x184>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
2400e05c:	2804      	cmp	r0, #4
2400e05e:	f000 809f 	beq.w	2400e1a0 <find_volume+0x1d8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
2400e062:	2801      	cmp	r0, #1
2400e064:	f200 808c 	bhi.w	2400e180 <find_volume+0x1b8>
	bsect = 0;
2400e068:	2400      	movs	r4, #0
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
2400e06a:	f8b5 303f 	ldrh.w	r3, [r5, #63]	; 0x3f
2400e06e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2400e072:	f040 8085 	bne.w	2400e180 <find_volume+0x1b8>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
2400e076:	f8b5 204a 	ldrh.w	r2, [r5, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
2400e07a:	b902      	cbnz	r2, 2400e07e <find_volume+0xb6>
	rv = rv << 8 | ptr[0];
2400e07c:	6daa      	ldr	r2, [r5, #88]	; 0x58
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
2400e07e:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		fs->fsize = fasize;
2400e082:	61ea      	str	r2, [r5, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
2400e084:	1e59      	subs	r1, r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
2400e086:	70ab      	strb	r3, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
2400e088:	2901      	cmp	r1, #1
2400e08a:	d879      	bhi.n	2400e180 <find_volume+0x1b8>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
2400e08c:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
2400e090:	b288      	uxth	r0, r1
2400e092:	8168      	strh	r0, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
2400e094:	2800      	cmp	r0, #0
2400e096:	d073      	beq.n	2400e180 <find_volume+0x1b8>
2400e098:	1e48      	subs	r0, r1, #1
2400e09a:	4208      	tst	r0, r1
2400e09c:	d170      	bne.n	2400e180 <find_volume+0x1b8>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
2400e09e:	f8b5 c045 	ldrh.w	ip, [r5, #69]	; 0x45
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
2400e0a2:	f01c 0f0f 	tst.w	ip, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
2400e0a6:	f8a5 c008 	strh.w	ip, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
2400e0aa:	d169      	bne.n	2400e180 <find_volume+0x1b8>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
2400e0ac:	f8b5 0047 	ldrh.w	r0, [r5, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
2400e0b0:	b900      	cbnz	r0, 2400e0b4 <find_volume+0xec>
	rv = rv << 8 | ptr[0];
2400e0b2:	6d68      	ldr	r0, [r5, #84]	; 0x54
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
2400e0b4:	f8b5 7042 	ldrh.w	r7, [r5, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
2400e0b8:	2f00      	cmp	r7, #0
2400e0ba:	d061      	beq.n	2400e180 <find_volume+0x1b8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
2400e0bc:	fb02 f303 	mul.w	r3, r2, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
2400e0c0:	eb07 161c 	add.w	r6, r7, ip, lsr #4
2400e0c4:	441e      	add	r6, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
2400e0c6:	42b0      	cmp	r0, r6
2400e0c8:	d35a      	bcc.n	2400e180 <find_volume+0x1b8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
2400e0ca:	eba0 0e06 	sub.w	lr, r0, r6
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
2400e0ce:	458e      	cmp	lr, r1
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
2400e0d0:	fbbe f0f1 	udiv	r0, lr, r1
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
2400e0d4:	d354      	bcc.n	2400e180 <find_volume+0x1b8>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
2400e0d6:	f64f 71f5 	movw	r1, #65525	; 0xfff5
2400e0da:	4288      	cmp	r0, r1
2400e0dc:	f200 8084 	bhi.w	2400e1e8 <find_volume+0x220>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
2400e0e0:	f640 71f5 	movw	r1, #4085	; 0xff5
2400e0e4:	4288      	cmp	r0, r1
2400e0e6:	f200 80a3 	bhi.w	2400e230 <find_volume+0x268>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400e0ea:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400e0ec:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
2400e0ee:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
2400e0f0:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400e0f2:	61a8      	str	r0, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
2400e0f4:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400e0f6:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
2400e0f8:	f1bc 0f00 	cmp.w	ip, #0
2400e0fc:	d040      	beq.n	2400e180 <find_volume+0x1b8>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2400e0fe:	eb00 0140 	add.w	r1, r0, r0, lsl #1
2400e102:	f000 0001 	and.w	r0, r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400e106:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2400e108:	eb00 0151 	add.w	r1, r0, r1, lsr #1
2400e10c:	2001      	movs	r0, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400e10e:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400e112:	62ab      	str	r3, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400e114:	ebb2 2f51 	cmp.w	r2, r1, lsr #9
2400e118:	d332      	bcc.n	2400e180 <find_volume+0x1b8>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400e11a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
2400e11e:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400e120:	e9c5 3304 	strd	r3, r3, [r5, #16]
		fs->fsi_flag = 0x80;
2400e124:	712a      	strb	r2, [r5, #4]
	fs->id = ++Fsid;		/* File system mount ID */
2400e126:	495d      	ldr	r1, [pc, #372]	; (2400e29c <find_volume+0x2d4>)
	fs->fs_type = fmt;		/* FAT sub-type */
2400e128:	7028      	strb	r0, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
2400e12a:	880b      	ldrh	r3, [r1, #0]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
2400e12c:	485c      	ldr	r0, [pc, #368]	; (2400e2a0 <find_volume+0x2d8>)
		if (Files[i].fs == fs) Files[i].fs = 0;
2400e12e:	4a5d      	ldr	r2, [pc, #372]	; (2400e2a4 <find_volume+0x2dc>)
	fs->id = ++Fsid;		/* File system mount ID */
2400e130:	3301      	adds	r3, #1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
2400e132:	60e8      	str	r0, [r5, #12]
		if (Files[i].fs == fs) Files[i].fs = 0;
2400e134:	6810      	ldr	r0, [r2, #0]
	fs->id = ++Fsid;		/* File system mount ID */
2400e136:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
2400e138:	42a8      	cmp	r0, r5
	fs->id = ++Fsid;		/* File system mount ID */
2400e13a:	800b      	strh	r3, [r1, #0]
2400e13c:	80eb      	strh	r3, [r5, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
2400e13e:	f000 8085 	beq.w	2400e24c <find_volume+0x284>
2400e142:	6913      	ldr	r3, [r2, #16]
2400e144:	429d      	cmp	r5, r3
2400e146:	d06f      	beq.n	2400e228 <find_volume+0x260>
	return FR_OK;
2400e148:	2400      	movs	r4, #0
2400e14a:	e01a      	b.n	2400e182 <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400e14c:	f895 61f6 	ldrb.w	r6, [r5, #502]	; 0x1f6
2400e150:	b10e      	cbz	r6, 2400e156 <find_volume+0x18e>
	rv = rv << 8 | ptr[0];
2400e152:	f8d5 61fa 	ldr.w	r6, [r5, #506]	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400e156:	f895 4206 	ldrb.w	r4, [r5, #518]	; 0x206
2400e15a:	b10c      	cbz	r4, 2400e160 <find_volume+0x198>
	rv = rv << 8 | ptr[0];
2400e15c:	f8d5 420a 	ldr.w	r4, [r5, #522]	; 0x20a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400e160:	f895 3216 	ldrb.w	r3, [r5, #534]	; 0x216
2400e164:	b303      	cbz	r3, 2400e1a8 <find_volume+0x1e0>
	rv = rv << 8 | ptr[0];
2400e166:	f8d5 821a 	ldr.w	r8, [r5, #538]	; 0x21a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400e16a:	f895 7226 	ldrb.w	r7, [r5, #550]	; 0x226
2400e16e:	b10f      	cbz	r7, 2400e174 <find_volume+0x1ac>
	rv = rv << 8 | ptr[0];
2400e170:	f8d5 722a 	ldr.w	r7, [r5, #554]	; 0x22a
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400e174:	b9f6      	cbnz	r6, 2400e1b4 <find_volume+0x1ec>
2400e176:	bb2c      	cbnz	r4, 2400e1c4 <find_volume+0x1fc>
2400e178:	f1b8 0f00 	cmp.w	r8, #0
2400e17c:	d12c      	bne.n	2400e1d8 <find_volume+0x210>
2400e17e:	b93f      	cbnz	r7, 2400e190 <find_volume+0x1c8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
2400e180:	240d      	movs	r4, #13
}
2400e182:	4620      	mov	r0, r4
2400e184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
2400e188:	2403      	movs	r4, #3
}
2400e18a:	4620      	mov	r0, r4
2400e18c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400e190:	4639      	mov	r1, r7
2400e192:	4628      	mov	r0, r5
2400e194:	f7ff fe98 	bl	2400dec8 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400e198:	2801      	cmp	r0, #1
2400e19a:	d95a      	bls.n	2400e252 <find_volume+0x28a>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
2400e19c:	2804      	cmp	r0, #4
2400e19e:	d1ef      	bne.n	2400e180 <find_volume+0x1b8>
2400e1a0:	2401      	movs	r4, #1
2400e1a2:	e7ee      	b.n	2400e182 <find_volume+0x1ba>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
2400e1a4:	240c      	movs	r4, #12
2400e1a6:	e7ec      	b.n	2400e182 <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400e1a8:	4698      	mov	r8, r3
2400e1aa:	e7de      	b.n	2400e16a <find_volume+0x1a2>
					*path = ++tt;
2400e1ac:	f10c 0301 	add.w	r3, ip, #1
2400e1b0:	6003      	str	r3, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
2400e1b2:	e729      	b.n	2400e008 <find_volume+0x40>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400e1b4:	4631      	mov	r1, r6
2400e1b6:	4628      	mov	r0, r5
2400e1b8:	f7ff fe86 	bl	2400dec8 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400e1bc:	2801      	cmp	r0, #1
2400e1be:	d8da      	bhi.n	2400e176 <find_volume+0x1ae>
2400e1c0:	4634      	mov	r4, r6
2400e1c2:	e752      	b.n	2400e06a <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400e1c4:	4621      	mov	r1, r4
2400e1c6:	4628      	mov	r0, r5
2400e1c8:	f7ff fe7e 	bl	2400dec8 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400e1cc:	2801      	cmp	r0, #1
2400e1ce:	f67f af4c 	bls.w	2400e06a <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400e1d2:	f1b8 0f00 	cmp.w	r8, #0
2400e1d6:	d0d2      	beq.n	2400e17e <find_volume+0x1b6>
2400e1d8:	4641      	mov	r1, r8
2400e1da:	4628      	mov	r0, r5
2400e1dc:	f7ff fe74 	bl	2400dec8 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400e1e0:	2801      	cmp	r0, #1
2400e1e2:	d8cc      	bhi.n	2400e17e <find_volume+0x1b6>
2400e1e4:	4644      	mov	r4, r8
2400e1e6:	e740      	b.n	2400e06a <find_volume+0xa2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
2400e1e8:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400e1ec:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400e1ee:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
2400e1f0:	4426      	add	r6, r4
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
2400e1f2:	ea5c 0303 	orrs.w	r3, ip, r3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400e1f6:	61a8      	str	r0, [r5, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400e1f8:	626f      	str	r7, [r5, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
2400e1fa:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
2400e1fc:	622c      	str	r4, [r5, #32]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
2400e1fe:	d1bf      	bne.n	2400e180 <find_volume+0x1b8>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
2400e200:	0080      	lsls	r0, r0, #2
	rv = rv << 8 | ptr[0];
2400e202:	6e29      	ldr	r1, [r5, #96]	; 0x60
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400e204:	f200 13ff 	addw	r3, r0, #511	; 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
2400e208:	62a9      	str	r1, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400e20a:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
2400e20e:	d3b7      	bcc.n	2400e180 <find_volume+0x1b8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
2400e210:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400e214:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
2400e218:	2180      	movs	r1, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
2400e21a:	2a01      	cmp	r2, #1
		fs->fsi_flag = 0x80;
2400e21c:	7129      	strb	r1, [r5, #4]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400e21e:	e9c5 3304 	strd	r3, r3, [r5, #16]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
2400e222:	d018      	beq.n	2400e256 <find_volume+0x28e>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
2400e224:	2003      	movs	r0, #3
2400e226:	e77e      	b.n	2400e126 <find_volume+0x15e>
		if (Files[i].fs == fs) Files[i].fs = 0;
2400e228:	2300      	movs	r3, #0
	return FR_OK;
2400e22a:	461c      	mov	r4, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
2400e22c:	6113      	str	r3, [r2, #16]
2400e22e:	e7a8      	b.n	2400e182 <find_volume+0x1ba>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400e230:	1c81      	adds	r1, r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400e232:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
2400e234:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
2400e236:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400e238:	61a9      	str	r1, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
2400e23a:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400e23c:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
2400e23e:	f1bc 0f00 	cmp.w	ip, #0
2400e242:	d09d      	beq.n	2400e180 <find_volume+0x1b8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400e244:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2400e246:	0049      	lsls	r1, r1, #1
2400e248:	2002      	movs	r0, #2
2400e24a:	e760      	b.n	2400e10e <find_volume+0x146>
		if (Files[i].fs == fs) Files[i].fs = 0;
2400e24c:	2300      	movs	r3, #0
2400e24e:	6013      	str	r3, [r2, #0]
2400e250:	e777      	b.n	2400e142 <find_volume+0x17a>
2400e252:	463c      	mov	r4, r7
2400e254:	e709      	b.n	2400e06a <find_volume+0xa2>
			&& move_window(fs, bsect + 1) == FR_OK)
2400e256:	1c61      	adds	r1, r4, #1
2400e258:	4628      	mov	r0, r5
2400e25a:	f7ff fe77 	bl	2400df4c <move_window>
2400e25e:	2800      	cmp	r0, #0
2400e260:	d1e0      	bne.n	2400e224 <find_volume+0x25c>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
2400e262:	f64a 2355 	movw	r3, #43605	; 0xaa55
2400e266:	f8b5 2232 	ldrh.w	r2, [r5, #562]	; 0x232
			fs->fsi_flag = 0;
2400e26a:	7128      	strb	r0, [r5, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
2400e26c:	429a      	cmp	r2, r3
2400e26e:	d1d9      	bne.n	2400e224 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
2400e270:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
2400e272:	4b0d      	ldr	r3, [pc, #52]	; (2400e2a8 <find_volume+0x2e0>)
2400e274:	429a      	cmp	r2, r3
2400e276:	d1d5      	bne.n	2400e224 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
2400e278:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
	rv = rv << 8 | ptr[0];
2400e27c:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
2400e280:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
2400e284:	3320      	adds	r3, #32
2400e286:	429a      	cmp	r2, r3
2400e288:	d1cc      	bne.n	2400e224 <find_volume+0x25c>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
2400e28a:	2003      	movs	r0, #3
2400e28c:	e9d5 3287 	ldrd	r3, r2, [r5, #540]	; 0x21c
2400e290:	e9c5 2304 	strd	r2, r3, [r5, #16]
2400e294:	e747      	b.n	2400e126 <find_volume+0x15e>
2400e296:	bf00      	nop
2400e298:	2001dbec 	.word	0x2001dbec
2400e29c:	2001dc10 	.word	0x2001dc10
2400e2a0:	2001dc14 	.word	0x2001dc14
2400e2a4:	2001dbf0 	.word	0x2001dbf0
2400e2a8:	41615252 	.word	0x41615252

2400e2ac <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
2400e2ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		switch (fs->fs_type) {
2400e2b0:	7806      	ldrb	r6, [r0, #0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
2400e2b2:	4604      	mov	r4, r0
2400e2b4:	460d      	mov	r5, r1
2400e2b6:	4690      	mov	r8, r2
		switch (fs->fs_type) {
2400e2b8:	2e02      	cmp	r6, #2
2400e2ba:	d007      	beq.n	2400e2cc <put_fat.part.0+0x20>
2400e2bc:	2e03      	cmp	r6, #3
2400e2be:	d041      	beq.n	2400e344 <put_fat.part.0+0x98>
2400e2c0:	2e01      	cmp	r6, #1
2400e2c2:	d01b      	beq.n	2400e2fc <put_fat.part.0+0x50>
2400e2c4:	2702      	movs	r7, #2
}
2400e2c6:	4638      	mov	r0, r7
2400e2c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
2400e2cc:	6a41      	ldr	r1, [r0, #36]	; 0x24
2400e2ce:	eb01 2115 	add.w	r1, r1, r5, lsr #8
2400e2d2:	f7ff fe3b 	bl	2400df4c <move_window>
			if (res != FR_OK) break;
2400e2d6:	4607      	mov	r7, r0
2400e2d8:	2800      	cmp	r0, #0
2400e2da:	d1f4      	bne.n	2400e2c6 <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
2400e2dc:	006d      	lsls	r5, r5, #1
2400e2de:	f104 0334 	add.w	r3, r4, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
2400e2e2:	f3c8 2207 	ubfx	r2, r8, #8, #8
			fs->wflag = 1;
2400e2e6:	2101      	movs	r1, #1
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
2400e2e8:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
}
2400e2ec:	4638      	mov	r0, r7
	*ptr++ = (BYTE)val; val >>= 8;
2400e2ee:	f803 8005 	strb.w	r8, [r3, r5]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
2400e2f2:	442b      	add	r3, r5
	*ptr++ = (BYTE)val;
2400e2f4:	705a      	strb	r2, [r3, #1]
			fs->wflag = 1;
2400e2f6:	70e1      	strb	r1, [r4, #3]
}
2400e2f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400e2fc:	6a41      	ldr	r1, [r0, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
2400e2fe:	eb05 0955 	add.w	r9, r5, r5, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400e302:	eb01 2159 	add.w	r1, r1, r9, lsr #9
2400e306:	f7ff fe21 	bl	2400df4c <move_window>
			if (res != FR_OK) break;
2400e30a:	4607      	mov	r7, r0
2400e30c:	2800      	cmp	r0, #0
2400e30e:	d1da      	bne.n	2400e2c6 <put_fat.part.0+0x1a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400e310:	07eb      	lsls	r3, r5, #31
			p = fs->win + bc++ % SS(fs);
2400e312:	f109 0b01 	add.w	fp, r9, #1
2400e316:	f104 0a34 	add.w	sl, r4, #52	; 0x34
2400e31a:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400e31e:	d52a      	bpl.n	2400e376 <put_fat.part.0+0xca>
2400e320:	f81a 3009 	ldrb.w	r3, [sl, r9]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400e324:	4620      	mov	r0, r4
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400e326:	f003 030f 	and.w	r3, r3, #15
2400e32a:	ea43 1308 	orr.w	r3, r3, r8, lsl #4
2400e32e:	f80a 3009 	strb.w	r3, [sl, r9]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400e332:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
2400e334:	70e6      	strb	r6, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400e336:	eb01 215b 	add.w	r1, r1, fp, lsr #9
2400e33a:	f7ff fe07 	bl	2400df4c <move_window>
			if (res != FR_OK) break;
2400e33e:	b3a0      	cbz	r0, 2400e3aa <put_fat.part.0+0xfe>
2400e340:	4607      	mov	r7, r0
	return res;
2400e342:	e7c0      	b.n	2400e2c6 <put_fat.part.0+0x1a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
2400e344:	6a41      	ldr	r1, [r0, #36]	; 0x24
2400e346:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
2400e34a:	f7ff fdff 	bl	2400df4c <move_window>
			if (res != FR_OK) break;
2400e34e:	4607      	mov	r7, r0
2400e350:	2800      	cmp	r0, #0
2400e352:	d1b8      	bne.n	2400e2c6 <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400e354:	00ad      	lsls	r5, r5, #2
2400e356:	f104 0134 	add.w	r1, r4, #52	; 0x34
2400e35a:	f028 4270 	bic.w	r2, r8, #4026531840	; 0xf0000000
			fs->wflag = 1;
2400e35e:	2001      	movs	r0, #1
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400e360:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400e364:	594b      	ldr	r3, [r1, r5]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400e366:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
2400e36a:	4313      	orrs	r3, r2
	*ptr++ = (BYTE)val; val >>= 8;
2400e36c:	514b      	str	r3, [r1, r5]
			fs->wflag = 1;
2400e36e:	70e0      	strb	r0, [r4, #3]
}
2400e370:	4638      	mov	r0, r7
2400e372:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400e376:	f80a 8009 	strb.w	r8, [sl, r9]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400e37a:	4620      	mov	r0, r4
2400e37c:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
2400e37e:	70e6      	strb	r6, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400e380:	eb01 215b 	add.w	r1, r1, fp, lsr #9
2400e384:	f7ff fde2 	bl	2400df4c <move_window>
			if (res != FR_OK) break;
2400e388:	2800      	cmp	r0, #0
2400e38a:	d1d9      	bne.n	2400e340 <put_fat.part.0+0x94>
			p = fs->win + bc % SS(fs);
2400e38c:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400e390:	f3c8 2203 	ubfx	r2, r8, #8, #4
2400e394:	f81a 300b 	ldrb.w	r3, [sl, fp]
			p = fs->win + bc % SS(fs);
2400e398:	44da      	add	sl, fp
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400e39a:	f023 030f 	bic.w	r3, r3, #15
2400e39e:	4313      	orrs	r3, r2
			fs->wflag = 1;
2400e3a0:	2201      	movs	r2, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400e3a2:	f88a 3000 	strb.w	r3, [sl]
			fs->wflag = 1;
2400e3a6:	70e2      	strb	r2, [r4, #3]
			break;
2400e3a8:	e78d      	b.n	2400e2c6 <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
2400e3aa:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400e3ae:	f3c8 1307 	ubfx	r3, r8, #4, #8
			p = fs->win + bc % SS(fs);
2400e3b2:	44da      	add	sl, fp
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400e3b4:	e7f4      	b.n	2400e3a0 <put_fat.part.0+0xf4>
2400e3b6:	bf00      	nop

2400e3b8 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400e3b8:	2901      	cmp	r1, #1
2400e3ba:	d90e      	bls.n	2400e3da <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
2400e3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400e3be:	6983      	ldr	r3, [r0, #24]
2400e3c0:	460c      	mov	r4, r1
2400e3c2:	4605      	mov	r5, r0
2400e3c4:	4299      	cmp	r1, r3
2400e3c6:	d206      	bcs.n	2400e3d6 <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
2400e3c8:	7803      	ldrb	r3, [r0, #0]
2400e3ca:	2b02      	cmp	r3, #2
2400e3cc:	d021      	beq.n	2400e412 <get_fat.isra.0+0x5a>
2400e3ce:	2b03      	cmp	r3, #3
2400e3d0:	d010      	beq.n	2400e3f4 <get_fat.isra.0+0x3c>
2400e3d2:	2b01      	cmp	r3, #1
2400e3d4:	d003      	beq.n	2400e3de <get_fat.isra.0+0x26>
2400e3d6:	2001      	movs	r0, #1
}
2400e3d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
2400e3da:	2001      	movs	r0, #1
}
2400e3dc:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e3de:	6a41      	ldr	r1, [r0, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
2400e3e0:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e3e4:	eb01 2157 	add.w	r1, r1, r7, lsr #9
2400e3e8:	f7ff fdb0 	bl	2400df4c <move_window>
2400e3ec:	b1f0      	cbz	r0, 2400e42c <get_fat.isra.0+0x74>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
2400e3ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
2400e3f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400e3f4:	6a41      	ldr	r1, [r0, #36]	; 0x24
2400e3f6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
2400e3fa:	f7ff fda7 	bl	2400df4c <move_window>
2400e3fe:	2800      	cmp	r0, #0
2400e400:	d1f5      	bne.n	2400e3ee <get_fat.isra.0+0x36>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400e402:	00a4      	lsls	r4, r4, #2
2400e404:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400e408:	4425      	add	r5, r4
2400e40a:	6b68      	ldr	r0, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400e40c:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
2400e410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400e412:	6a41      	ldr	r1, [r0, #36]	; 0x24
2400e414:	eb01 2114 	add.w	r1, r1, r4, lsr #8
2400e418:	f7ff fd98 	bl	2400df4c <move_window>
2400e41c:	2800      	cmp	r0, #0
2400e41e:	d1e6      	bne.n	2400e3ee <get_fat.isra.0+0x36>
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400e420:	0063      	lsls	r3, r4, #1
2400e422:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
2400e426:	442b      	add	r3, r5
2400e428:	8e98      	ldrh	r0, [r3, #52]	; 0x34
}
2400e42a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
2400e42c:	f3c7 0308 	ubfx	r3, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e430:	6a69      	ldr	r1, [r5, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
2400e432:	3701      	adds	r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e434:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
2400e436:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e438:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400e43c:	f893 6034 	ldrb.w	r6, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e440:	f7ff fd84 	bl	2400df4c <move_window>
2400e444:	2800      	cmp	r0, #0
2400e446:	d1d2      	bne.n	2400e3ee <get_fat.isra.0+0x36>
			wc |= fs->win[bc % SS(fs)] << 8;
2400e448:	f3c7 0708 	ubfx	r7, r7, #0, #9
2400e44c:	442f      	add	r7, r5
2400e44e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
2400e452:	ea46 2003 	orr.w	r0, r6, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400e456:	07e3      	lsls	r3, r4, #31
2400e458:	bf4c      	ite	mi
2400e45a:	0900      	lsrmi	r0, r0, #4
2400e45c:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
}
2400e460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2400e462:	bf00      	nop

2400e464 <dir_read.constprop.0>:
FRESULT dir_read (
2400e464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
2400e468:	69c6      	ldr	r6, [r0, #28]
FRESULT dir_read (
2400e46a:	b083      	sub	sp, #12
2400e46c:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
2400e46e:	f8d0 8000 	ldr.w	r8, [r0]
	while (dp->sect) {
2400e472:	2e00      	cmp	r6, #0
2400e474:	d061      	beq.n	2400e53a <dir_read.constprop.0+0xd6>
	BYTE ord = 0xFF, sum = 0xFF;
2400e476:	f04f 0bff 	mov.w	fp, #255	; 0xff
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400e47a:	f108 0a34 	add.w	sl, r8, #52	; 0x34
	BYTE ord = 0xFF, sum = 0xFF;
2400e47e:	46d9      	mov	r9, fp
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e480:	f8d8 5030 	ldr.w	r5, [r8, #48]	; 0x30
2400e484:	42b5      	cmp	r5, r6
2400e486:	d018      	beq.n	2400e4ba <dir_read.constprop.0+0x56>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400e488:	f898 3003 	ldrb.w	r3, [r8, #3]
2400e48c:	2b00      	cmp	r3, #0
2400e48e:	f040 80c8 	bne.w	2400e622 <dir_read.constprop.0+0x1be>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400e492:	2301      	movs	r3, #1
2400e494:	4632      	mov	r2, r6
2400e496:	4651      	mov	r1, sl
2400e498:	f898 0001 	ldrb.w	r0, [r8, #1]
2400e49c:	f7ff fb9c 	bl	2400dbd8 <disk_read>
2400e4a0:	b148      	cbz	r0, 2400e4b6 <dir_read.constprop.0+0x52>
			fs->winsect = sector;
2400e4a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
2400e4a6:	2001      	movs	r0, #1
			fs->winsect = sector;
2400e4a8:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
2400e4ac:	2300      	movs	r3, #0
2400e4ae:	61e3      	str	r3, [r4, #28]
}
2400e4b0:	b003      	add	sp, #12
2400e4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
2400e4b6:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
		c = dp->dir[DIR_Name];	/* Test for the entry type */
2400e4ba:	6a21      	ldr	r1, [r4, #32]
2400e4bc:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
2400e4be:	2a00      	cmp	r2, #0
2400e4c0:	d03b      	beq.n	2400e53a <dir_read.constprop.0+0xd6>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
2400e4c2:	7acb      	ldrb	r3, [r1, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
2400e4c4:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
2400e4c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2400e4ca:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
2400e4cc:	d005      	beq.n	2400e4da <dir_read.constprop.0+0x76>
2400e4ce:	2a2e      	cmp	r2, #46	; 0x2e
2400e4d0:	d003      	beq.n	2400e4da <dir_read.constprop.0+0x76>
2400e4d2:	f023 0020 	bic.w	r0, r3, #32
2400e4d6:	2808      	cmp	r0, #8
2400e4d8:	d136      	bne.n	2400e548 <dir_read.constprop.0+0xe4>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400e4da:	f04f 09ff 	mov.w	r9, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400e4de:	6965      	ldr	r5, [r4, #20]
	FATFS *fs = dp->obj.fs;
2400e4e0:	6827      	ldr	r7, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400e4e2:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400e4e4:	69e6      	ldr	r6, [r4, #28]
2400e4e6:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2400e4ea:	d226      	bcs.n	2400e53a <dir_read.constprop.0+0xd6>
2400e4ec:	b32e      	cbz	r6, 2400e53a <dir_read.constprop.0+0xd6>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400e4ee:	f3c5 0308 	ubfx	r3, r5, #0, #9
2400e4f2:	bb23      	cbnz	r3, 2400e53e <dir_read.constprop.0+0xda>
		dp->sect++;				/* Next sector */
2400e4f4:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
2400e4f6:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
2400e4f8:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
2400e4fa:	b961      	cbnz	r1, 2400e516 <dir_read.constprop.0+0xb2>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
2400e4fc:	893b      	ldrh	r3, [r7, #8]
2400e4fe:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
2400e502:	d91a      	bls.n	2400e53a <dir_read.constprop.0+0xd6>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400e504:	3734      	adds	r7, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
2400e506:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400e508:	6227      	str	r7, [r4, #32]
	while (dp->sect) {
2400e50a:	2e00      	cmp	r6, #0
2400e50c:	d1b8      	bne.n	2400e480 <dir_read.constprop.0+0x1c>
		res = move_window(fs, dp->sect);
2400e50e:	2000      	movs	r0, #0
}
2400e510:	b003      	add	sp, #12
2400e512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2400e516:	897b      	ldrh	r3, [r7, #10]
2400e518:	3b01      	subs	r3, #1
2400e51a:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
2400e51e:	d1f1      	bne.n	2400e504 <dir_read.constprop.0+0xa0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400e520:	4638      	mov	r0, r7
2400e522:	9301      	str	r3, [sp, #4]
2400e524:	f7ff ff48 	bl	2400e3b8 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400e528:	2801      	cmp	r0, #1
2400e52a:	f240 80b2 	bls.w	2400e692 <dir_read.constprop.0+0x22e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400e52e:	1c43      	adds	r3, r0, #1
2400e530:	d07f      	beq.n	2400e632 <dir_read.constprop.0+0x1ce>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2400e532:	69ba      	ldr	r2, [r7, #24]
2400e534:	4290      	cmp	r0, r2
2400e536:	f0c0 809f 	bcc.w	2400e678 <dir_read.constprop.0+0x214>
	FRESULT res = FR_NO_FILE;
2400e53a:	2004      	movs	r0, #4
2400e53c:	e7b6      	b.n	2400e4ac <dir_read.constprop.0+0x48>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400e53e:	3734      	adds	r7, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
2400e540:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400e542:	441f      	add	r7, r3
2400e544:	6227      	str	r7, [r4, #32]
	while (dp->sect) {
2400e546:	e79b      	b.n	2400e480 <dir_read.constprop.0+0x1c>
				if (a == AM_LFN) {			/* An LFN entry is found */
2400e548:	2b0f      	cmp	r3, #15
2400e54a:	f040 80a9 	bne.w	2400e6a0 <dir_read.constprop.0+0x23c>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
2400e54e:	0650      	lsls	r0, r2, #25
2400e550:	d571      	bpl.n	2400e636 <dir_read.constprop.0+0x1d2>
						dp->blk_ofs = dp->dptr;
2400e552:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;
2400e554:	f002 09bf 	and.w	r9, r2, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
2400e558:	f891 b00d 	ldrb.w	fp, [r1, #13]
						dp->blk_ofs = dp->dptr;
2400e55c:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400e55e:	7b4b      	ldrb	r3, [r1, #13]
2400e560:	455b      	cmp	r3, fp
2400e562:	d1ba      	bne.n	2400e4da <dir_read.constprop.0+0x76>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
2400e564:	8b4b      	ldrh	r3, [r1, #26]
2400e566:	2b00      	cmp	r3, #0
2400e568:	d1b7      	bne.n	2400e4da <dir_read.constprop.0+0x76>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
2400e56a:	780b      	ldrb	r3, [r1, #0]
2400e56c:	f8b1 0001 	ldrh.w	r0, [r1, #1]
2400e570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400e574:	3b01      	subs	r3, #1
2400e576:	eb03 0243 	add.w	r2, r3, r3, lsl #1
2400e57a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e57e:	2bfe      	cmp	r3, #254	; 0xfe
2400e580:	d8ab      	bhi.n	2400e4da <dir_read.constprop.0+0x76>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400e582:	f8d8 500c 	ldr.w	r5, [r8, #12]
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e586:	1c5a      	adds	r2, r3, #1
2400e588:	f825 0013 	strh.w	r0, [r5, r3, lsl #1]
2400e58c:	f8b1 6003 	ldrh.w	r6, [r1, #3]
		if (wc) {
2400e590:	2800      	cmp	r0, #0
2400e592:	f040 808e 	bne.w	2400e6b2 <dir_read.constprop.0+0x24e>
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e596:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e59a:	429e      	cmp	r6, r3
2400e59c:	d19d      	bne.n	2400e4da <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400e59e:	f8b1 c005 	ldrh.w	ip, [r1, #5]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e5a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e5a6:	459c      	cmp	ip, r3
2400e5a8:	d197      	bne.n	2400e4da <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400e5aa:	f8b1 7007 	ldrh.w	r7, [r1, #7]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e5ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e5b2:	429f      	cmp	r7, r3
2400e5b4:	d191      	bne.n	2400e4da <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400e5b6:	f8b1 6009 	ldrh.w	r6, [r1, #9]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e5ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e5be:	429e      	cmp	r6, r3
2400e5c0:	d18b      	bne.n	2400e4da <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400e5c2:	89cf      	ldrh	r7, [r1, #14]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e5c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e5c8:	429f      	cmp	r7, r3
2400e5ca:	d186      	bne.n	2400e4da <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400e5cc:	f8b1 c010 	ldrh.w	ip, [r1, #16]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e5d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e5d4:	459c      	cmp	ip, r3
2400e5d6:	d180      	bne.n	2400e4da <dir_read.constprop.0+0x76>
	rv = rv << 8 | ptr[0];
2400e5d8:	8a4e      	ldrh	r6, [r1, #18]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e5da:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e5de:	429e      	cmp	r6, r3
2400e5e0:	f47f af7b 	bne.w	2400e4da <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400e5e4:	8a8f      	ldrh	r7, [r1, #20]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e5e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e5ea:	429f      	cmp	r7, r3
2400e5ec:	f47f af75 	bne.w	2400e4da <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400e5f0:	8ace      	ldrh	r6, [r1, #22]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e5f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e5f6:	429e      	cmp	r6, r3
2400e5f8:	f47f af6f 	bne.w	2400e4da <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400e5fc:	8b0f      	ldrh	r7, [r1, #24]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e5fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e602:	429f      	cmp	r7, r3
2400e604:	f47f af69 	bne.w	2400e4da <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400e608:	8b8e      	ldrh	r6, [r1, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e60a:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e60e:	429e      	cmp	r6, r3
2400e610:	f47f af63 	bne.w	2400e4da <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400e614:	8bcf      	ldrh	r7, [r1, #30]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e616:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e61a:	429f      	cmp	r7, r3
2400e61c:	f000 80bd 	beq.w	2400e79a <dir_read.constprop.0+0x336>
2400e620:	e75b      	b.n	2400e4da <dir_read.constprop.0+0x76>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400e622:	2301      	movs	r3, #1
2400e624:	462a      	mov	r2, r5
2400e626:	4651      	mov	r1, sl
2400e628:	f898 0001 	ldrb.w	r0, [r8, #1]
2400e62c:	f7ff fae4 	bl	2400dbf8 <disk_write>
2400e630:	b128      	cbz	r0, 2400e63e <dir_read.constprop.0+0x1da>
	FRESULT res = FR_NO_FILE;
2400e632:	2001      	movs	r0, #1
2400e634:	e73a      	b.n	2400e4ac <dir_read.constprop.0+0x48>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400e636:	454a      	cmp	r2, r9
2400e638:	f47f af4f 	bne.w	2400e4da <dir_read.constprop.0+0x76>
2400e63c:	e78f      	b.n	2400e55e <dir_read.constprop.0+0xfa>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400e63e:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
2400e642:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400e646:	1aea      	subs	r2, r5, r3
2400e648:	f8d8 301c 	ldr.w	r3, [r8, #28]
2400e64c:	429a      	cmp	r2, r3
2400e64e:	f4bf af20 	bcs.w	2400e492 <dir_read.constprop.0+0x2e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e652:	f898 7002 	ldrb.w	r7, [r8, #2]
2400e656:	2f01      	cmp	r7, #1
2400e658:	d802      	bhi.n	2400e660 <dir_read.constprop.0+0x1fc>
2400e65a:	e71a      	b.n	2400e492 <dir_read.constprop.0+0x2e>
					wsect += fs->fsize;
2400e65c:	f8d8 301c 	ldr.w	r3, [r8, #28]
2400e660:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e662:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400e664:	2301      	movs	r3, #1
2400e666:	4651      	mov	r1, sl
2400e668:	462a      	mov	r2, r5
2400e66a:	f898 0001 	ldrb.w	r0, [r8, #1]
2400e66e:	f7ff fac3 	bl	2400dbf8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e672:	2f01      	cmp	r7, #1
2400e674:	d1f2      	bne.n	2400e65c <dir_read.constprop.0+0x1f8>
2400e676:	e70c      	b.n	2400e492 <dir_read.constprop.0+0x2e>
				dp->clust = clst;		/* Initialize data for new cluster */
2400e678:	61a0      	str	r0, [r4, #24]
	clst -= 2;
2400e67a:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400e67c:	69ba      	ldr	r2, [r7, #24]
2400e67e:	9b01      	ldr	r3, [sp, #4]
2400e680:	3a02      	subs	r2, #2
2400e682:	4290      	cmp	r0, r2
2400e684:	d207      	bcs.n	2400e696 <dir_read.constprop.0+0x232>
	return clst * fs->csize + fs->database;
2400e686:	897b      	ldrh	r3, [r7, #10]
2400e688:	6afe      	ldr	r6, [r7, #44]	; 0x2c
2400e68a:	fb00 6603 	mla	r6, r0, r3, r6
				dp->sect = clust2sect(fs, clst);
2400e68e:	61e6      	str	r6, [r4, #28]
2400e690:	e738      	b.n	2400e504 <dir_read.constprop.0+0xa0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400e692:	2002      	movs	r0, #2
2400e694:	e70a      	b.n	2400e4ac <dir_read.constprop.0+0x48>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400e696:	3734      	adds	r7, #52	; 0x34
				dp->sect = clust2sect(fs, clst);
2400e698:	61e3      	str	r3, [r4, #28]
	dp->dptr = ofs;						/* Current entry */
2400e69a:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400e69c:	6227      	str	r7, [r4, #32]
	while (dp->sect) {
2400e69e:	e736      	b.n	2400e50e <dir_read.constprop.0+0xaa>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
2400e6a0:	f1b9 0f00 	cmp.w	r9, #0
2400e6a4:	f000 8086 	beq.w	2400e7b4 <dir_read.constprop.0+0x350>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
2400e6a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		res = move_window(fs, dp->sect);
2400e6ac:	2000      	movs	r0, #0
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
2400e6ae:	6323      	str	r3, [r4, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
2400e6b0:	e6fe      	b.n	2400e4b0 <dir_read.constprop.0+0x4c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e6b2:	2aff      	cmp	r2, #255	; 0xff
2400e6b4:	f000 80c8 	beq.w	2400e848 <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e6b8:	f825 6012 	strh.w	r6, [r5, r2, lsl #1]
2400e6bc:	0050      	lsls	r0, r2, #1
2400e6be:	f8b1 c005 	ldrh.w	ip, [r1, #5]
2400e6c2:	1c9a      	adds	r2, r3, #2
		if (wc) {
2400e6c4:	2e00      	cmp	r6, #0
2400e6c6:	f43f af6c 	beq.w	2400e5a2 <dir_read.constprop.0+0x13e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e6ca:	2aff      	cmp	r2, #255	; 0xff
2400e6cc:	f000 80bc 	beq.w	2400e848 <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e6d0:	4428      	add	r0, r5
2400e6d2:	1cda      	adds	r2, r3, #3
2400e6d4:	f8a0 c002 	strh.w	ip, [r0, #2]
2400e6d8:	f8b1 7007 	ldrh.w	r7, [r1, #7]
		if (wc) {
2400e6dc:	f1bc 0f00 	cmp.w	ip, #0
2400e6e0:	f43f af65 	beq.w	2400e5ae <dir_read.constprop.0+0x14a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e6e4:	2aff      	cmp	r2, #255	; 0xff
2400e6e6:	f000 80af 	beq.w	2400e848 <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e6ea:	8087      	strh	r7, [r0, #4]
2400e6ec:	1d1a      	adds	r2, r3, #4
	rv = ptr[1];
2400e6ee:	f8b1 6009 	ldrh.w	r6, [r1, #9]
		if (wc) {
2400e6f2:	2f00      	cmp	r7, #0
2400e6f4:	f43f af61 	beq.w	2400e5ba <dir_read.constprop.0+0x156>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e6f8:	2aff      	cmp	r2, #255	; 0xff
2400e6fa:	f000 80a5 	beq.w	2400e848 <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e6fe:	80c6      	strh	r6, [r0, #6]
2400e700:	1d5a      	adds	r2, r3, #5
	rv = ptr[1];
2400e702:	89cf      	ldrh	r7, [r1, #14]
		if (wc) {
2400e704:	2e00      	cmp	r6, #0
2400e706:	f43f af5d 	beq.w	2400e5c4 <dir_read.constprop.0+0x160>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e70a:	2aff      	cmp	r2, #255	; 0xff
2400e70c:	f000 809c 	beq.w	2400e848 <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e710:	8107      	strh	r7, [r0, #8]
2400e712:	1d9a      	adds	r2, r3, #6
	rv = ptr[1];
2400e714:	f8b1 c010 	ldrh.w	ip, [r1, #16]
		if (wc) {
2400e718:	2f00      	cmp	r7, #0
2400e71a:	f43f af59 	beq.w	2400e5d0 <dir_read.constprop.0+0x16c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e71e:	2aff      	cmp	r2, #255	; 0xff
2400e720:	f000 8092 	beq.w	2400e848 <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e724:	f8a0 c00a 	strh.w	ip, [r0, #10]
2400e728:	1dda      	adds	r2, r3, #7
	rv = ptr[1];
2400e72a:	8a4e      	ldrh	r6, [r1, #18]
		if (wc) {
2400e72c:	f1bc 0f00 	cmp.w	ip, #0
2400e730:	f43f af53 	beq.w	2400e5da <dir_read.constprop.0+0x176>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e734:	2aff      	cmp	r2, #255	; 0xff
2400e736:	f000 8087 	beq.w	2400e848 <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e73a:	8186      	strh	r6, [r0, #12]
2400e73c:	f103 0208 	add.w	r2, r3, #8
	rv = ptr[1];
2400e740:	8a8f      	ldrh	r7, [r1, #20]
		if (wc) {
2400e742:	2e00      	cmp	r6, #0
2400e744:	f43f af4f 	beq.w	2400e5e6 <dir_read.constprop.0+0x182>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e748:	2aff      	cmp	r2, #255	; 0xff
2400e74a:	d07d      	beq.n	2400e848 <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e74c:	81c7      	strh	r7, [r0, #14]
2400e74e:	f103 0209 	add.w	r2, r3, #9
	rv = ptr[1];
2400e752:	8ace      	ldrh	r6, [r1, #22]
		if (wc) {
2400e754:	2f00      	cmp	r7, #0
2400e756:	f43f af4c 	beq.w	2400e5f2 <dir_read.constprop.0+0x18e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e75a:	2aff      	cmp	r2, #255	; 0xff
2400e75c:	d074      	beq.n	2400e848 <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e75e:	8206      	strh	r6, [r0, #16]
2400e760:	f103 020a 	add.w	r2, r3, #10
	rv = ptr[1];
2400e764:	8b0f      	ldrh	r7, [r1, #24]
		if (wc) {
2400e766:	2e00      	cmp	r6, #0
2400e768:	f43f af49 	beq.w	2400e5fe <dir_read.constprop.0+0x19a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e76c:	2aff      	cmp	r2, #255	; 0xff
2400e76e:	d06b      	beq.n	2400e848 <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e770:	8247      	strh	r7, [r0, #18]
2400e772:	f103 020b 	add.w	r2, r3, #11
	rv = ptr[1];
2400e776:	8b8e      	ldrh	r6, [r1, #28]
		if (wc) {
2400e778:	2f00      	cmp	r7, #0
2400e77a:	f43f af46 	beq.w	2400e60a <dir_read.constprop.0+0x1a6>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e77e:	2aff      	cmp	r2, #255	; 0xff
2400e780:	d062      	beq.n	2400e848 <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e782:	8286      	strh	r6, [r0, #20]
2400e784:	f103 020c 	add.w	r2, r3, #12
	rv = ptr[1];
2400e788:	8bcf      	ldrh	r7, [r1, #30]
		if (wc) {
2400e78a:	2e00      	cmp	r6, #0
2400e78c:	f43f af43 	beq.w	2400e616 <dir_read.constprop.0+0x1b2>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e790:	2aff      	cmp	r2, #255	; 0xff
2400e792:	d059      	beq.n	2400e848 <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e794:	f103 020d 	add.w	r2, r3, #13
2400e798:	82c7      	strh	r7, [r0, #22]
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
2400e79a:	780b      	ldrb	r3, [r1, #0]
2400e79c:	0659      	lsls	r1, r3, #25
2400e79e:	d504      	bpl.n	2400e7aa <dir_read.constprop.0+0x346>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
2400e7a0:	2aff      	cmp	r2, #255	; 0xff
2400e7a2:	d051      	beq.n	2400e848 <dir_read.constprop.0+0x3e4>
		lfnbuf[i] = 0;
2400e7a4:	2300      	movs	r3, #0
2400e7a6:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400e7aa:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
2400e7ae:	fa5f f989 	uxtb.w	r9, r9
2400e7b2:	e694      	b.n	2400e4de <dir_read.constprop.0+0x7a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400e7b4:	780b      	ldrb	r3, [r1, #0]
2400e7b6:	01da      	lsls	r2, r3, #7
2400e7b8:	ea42 0253 	orr.w	r2, r2, r3, lsr #1
2400e7bc:	784b      	ldrb	r3, [r1, #1]
2400e7be:	441a      	add	r2, r3
2400e7c0:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400e7c4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400e7c8:	788a      	ldrb	r2, [r1, #2]
2400e7ca:	fa52 f383 	uxtab	r3, r2, r3
2400e7ce:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400e7d2:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400e7d6:	78cb      	ldrb	r3, [r1, #3]
2400e7d8:	fa53 f282 	uxtab	r2, r3, r2
2400e7dc:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400e7e0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400e7e4:	790a      	ldrb	r2, [r1, #4]
2400e7e6:	fa52 f383 	uxtab	r3, r2, r3
2400e7ea:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400e7ee:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400e7f2:	794b      	ldrb	r3, [r1, #5]
2400e7f4:	fa53 f282 	uxtab	r2, r3, r2
2400e7f8:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400e7fc:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400e800:	798a      	ldrb	r2, [r1, #6]
2400e802:	fa52 f383 	uxtab	r3, r2, r3
2400e806:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400e80a:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400e80e:	79cb      	ldrb	r3, [r1, #7]
2400e810:	fa53 f282 	uxtab	r2, r3, r2
2400e814:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400e818:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400e81c:	7a0a      	ldrb	r2, [r1, #8]
2400e81e:	fa52 f383 	uxtab	r3, r2, r3
2400e822:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400e826:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400e82a:	7a4b      	ldrb	r3, [r1, #9]
2400e82c:	7a89      	ldrb	r1, [r1, #10]
2400e82e:	fa53 f282 	uxtab	r2, r3, r2
2400e832:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400e836:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400e83a:	fa51 f383 	uxtab	r3, r1, r3
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
2400e83e:	b2db      	uxtb	r3, r3
2400e840:	455b      	cmp	r3, fp
2400e842:	f47f af31 	bne.w	2400e6a8 <dir_read.constprop.0+0x244>
2400e846:	e662      	b.n	2400e50e <dir_read.constprop.0+0xaa>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400e848:	4691      	mov	r9, r2
2400e84a:	e648      	b.n	2400e4de <dir_read.constprop.0+0x7a>

2400e84c <sync_fs>:
{
2400e84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400e84e:	78c3      	ldrb	r3, [r0, #3]
{
2400e850:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400e852:	b95b      	cbnz	r3, 2400e86c <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
2400e854:	7823      	ldrb	r3, [r4, #0]
2400e856:	2b03      	cmp	r3, #3
2400e858:	d029      	beq.n	2400e8ae <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
2400e85a:	2200      	movs	r2, #0
2400e85c:	7860      	ldrb	r0, [r4, #1]
2400e85e:	4611      	mov	r1, r2
2400e860:	f7ff f9da 	bl	2400dc18 <disk_ioctl>
			res = FR_DISK_ERR;
2400e864:	3800      	subs	r0, #0
2400e866:	bf18      	it	ne
2400e868:	2001      	movne	r0, #1
}
2400e86a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
2400e86c:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400e86e:	f100 0734 	add.w	r7, r0, #52	; 0x34
2400e872:	2301      	movs	r3, #1
2400e874:	7840      	ldrb	r0, [r0, #1]
2400e876:	462a      	mov	r2, r5
2400e878:	4639      	mov	r1, r7
2400e87a:	f7ff f9bd 	bl	2400dbf8 <disk_write>
2400e87e:	2800      	cmp	r0, #0
2400e880:	d13e      	bne.n	2400e900 <sync_fs+0xb4>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400e882:	6a62      	ldr	r2, [r4, #36]	; 0x24
2400e884:	69e3      	ldr	r3, [r4, #28]
2400e886:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
2400e888:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400e88a:	429a      	cmp	r2, r3
2400e88c:	d2e2      	bcs.n	2400e854 <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e88e:	78a6      	ldrb	r6, [r4, #2]
2400e890:	2e01      	cmp	r6, #1
2400e892:	d801      	bhi.n	2400e898 <sync_fs+0x4c>
2400e894:	e7de      	b.n	2400e854 <sync_fs+0x8>
					wsect += fs->fsize;
2400e896:	69e3      	ldr	r3, [r4, #28]
2400e898:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e89a:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400e89c:	2301      	movs	r3, #1
2400e89e:	4639      	mov	r1, r7
2400e8a0:	462a      	mov	r2, r5
2400e8a2:	7860      	ldrb	r0, [r4, #1]
2400e8a4:	f7ff f9a8 	bl	2400dbf8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e8a8:	2e01      	cmp	r6, #1
2400e8aa:	d1f4      	bne.n	2400e896 <sync_fs+0x4a>
2400e8ac:	e7d2      	b.n	2400e854 <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
2400e8ae:	7925      	ldrb	r5, [r4, #4]
2400e8b0:	2d01      	cmp	r5, #1
2400e8b2:	d1d2      	bne.n	2400e85a <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
2400e8b4:	f104 0634 	add.w	r6, r4, #52	; 0x34
		*d++ = (BYTE)val;
2400e8b8:	f44f 7200 	mov.w	r2, #512	; 0x200
2400e8bc:	2100      	movs	r1, #0
2400e8be:	4630      	mov	r0, r6
2400e8c0:	f00a ff30 	bl	24019724 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
2400e8c4:	480f      	ldr	r0, [pc, #60]	; (2400e904 <sync_fs+0xb8>)
	*ptr++ = (BYTE)val; val >>= 8;
2400e8c6:	f64a 2355 	movw	r3, #43605	; 0xaa55
	*ptr++ = (BYTE)val; val >>= 8;
2400e8ca:	6360      	str	r0, [r4, #52]	; 0x34
2400e8cc:	f100 50ff 	add.w	r0, r0, #534773760	; 0x1fe00000
	*ptr++ = (BYTE)val; val >>= 8;
2400e8d0:	f8a4 3232 	strh.w	r3, [r4, #562]	; 0x232
			disk_write(fs->drv, fs->win, fs->winsect, 1);
2400e8d4:	462b      	mov	r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
2400e8d6:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
2400e8da:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
2400e8de:	3020      	adds	r0, #32
2400e8e0:	f8c4 221c 	str.w	r2, [r4, #540]	; 0x21c
			fs->winsect = fs->volbase + 1;
2400e8e4:	6a22      	ldr	r2, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
2400e8e6:	f8c4 1220 	str.w	r1, [r4, #544]	; 0x220
			disk_write(fs->drv, fs->win, fs->winsect, 1);
2400e8ea:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;
2400e8ec:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
2400e8ee:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
			disk_write(fs->drv, fs->win, fs->winsect, 1);
2400e8f2:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
2400e8f4:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
2400e8f6:	f7ff f97f 	bl	2400dbf8 <disk_write>
			fs->fsi_flag = 0;
2400e8fa:	2300      	movs	r3, #0
2400e8fc:	7123      	strb	r3, [r4, #4]
2400e8fe:	e7ac      	b.n	2400e85a <sync_fs+0xe>
			res = FR_DISK_ERR;
2400e900:	2001      	movs	r0, #1
}
2400e902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2400e904:	41615252 	.word	0x41615252

2400e908 <create_chain>:
{
2400e908:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400e90c:	4681      	mov	r9, r0
	if (clst == 0) {	/* Create a new chain */
2400e90e:	460f      	mov	r7, r1
	FATFS *fs = obj->fs;
2400e910:	f8d0 8000 	ldr.w	r8, [r0]
	if (clst == 0) {	/* Create a new chain */
2400e914:	2900      	cmp	r1, #0
2400e916:	f040 80a7 	bne.w	2400ea68 <create_chain+0x160>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
2400e91a:	f8d8 6010 	ldr.w	r6, [r8, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
2400e91e:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400e922:	b9c6      	cbnz	r6, 2400e956 <create_chain+0x4e>
2400e924:	2601      	movs	r6, #1
2400e926:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
2400e928:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
2400e92a:	429c      	cmp	r4, r3
2400e92c:	d317      	bcc.n	2400e95e <create_chain+0x56>
				if (ncl > scl) return 0;	/* No free cluster */
2400e92e:	2e01      	cmp	r6, #1
2400e930:	f000 8096 	beq.w	2400ea60 <create_chain+0x158>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
2400e934:	f8d9 5000 	ldr.w	r5, [r9]
				ncl = 2;
2400e938:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400e93a:	69ab      	ldr	r3, [r5, #24]
2400e93c:	42a3      	cmp	r3, r4
2400e93e:	d906      	bls.n	2400e94e <create_chain+0x46>
		switch (fs->fs_type) {
2400e940:	782b      	ldrb	r3, [r5, #0]
2400e942:	2b02      	cmp	r3, #2
2400e944:	d07e      	beq.n	2400ea44 <create_chain+0x13c>
2400e946:	2b03      	cmp	r3, #3
2400e948:	d064      	beq.n	2400ea14 <create_chain+0x10c>
2400e94a:	2b01      	cmp	r3, #1
2400e94c:	d00c      	beq.n	2400e968 <create_chain+0x60>
2400e94e:	2401      	movs	r4, #1
}
2400e950:	4620      	mov	r0, r4
2400e952:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
2400e956:	42b3      	cmp	r3, r6
2400e958:	bf98      	it	ls
2400e95a:	2601      	movls	r6, #1
2400e95c:	e7e3      	b.n	2400e926 <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400e95e:	2c01      	cmp	r4, #1
2400e960:	f8d9 5000 	ldr.w	r5, [r9]
2400e964:	d9f3      	bls.n	2400e94e <create_chain+0x46>
2400e966:	e7e8      	b.n	2400e93a <create_chain+0x32>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e968:	6a69      	ldr	r1, [r5, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
2400e96a:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e96e:	4628      	mov	r0, r5
2400e970:	eb01 215b 	add.w	r1, r1, fp, lsr #9
2400e974:	f7ff faea 	bl	2400df4c <move_window>
2400e978:	2800      	cmp	r0, #0
2400e97a:	d146      	bne.n	2400ea0a <create_chain+0x102>
			wc = fs->win[bc++ % SS(fs)];
2400e97c:	f3cb 0308 	ubfx	r3, fp, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e980:	6a69      	ldr	r1, [r5, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
2400e982:	f10b 0b01 	add.w	fp, fp, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e986:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
2400e988:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e98a:	eb01 215b 	add.w	r1, r1, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400e98e:	f893 a034 	ldrb.w	sl, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e992:	f7ff fadb 	bl	2400df4c <move_window>
2400e996:	bbc0      	cbnz	r0, 2400ea0a <create_chain+0x102>
			wc |= fs->win[bc % SS(fs)] << 8;
2400e998:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400e99c:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
2400e99e:	44ab      	add	fp, r5
2400e9a0:	f89b 3034 	ldrb.w	r3, [fp, #52]	; 0x34
2400e9a4:	ea4a 2303 	orr.w	r3, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400e9a8:	bf4c      	ite	mi
2400e9aa:	091b      	lsrmi	r3, r3, #4
2400e9ac:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
			if (cs == 0) break;				/* Found a free cluster */
2400e9b0:	2b00      	cmp	r3, #0
2400e9b2:	d140      	bne.n	2400ea36 <create_chain+0x12e>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400e9b4:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400e9b8:	42a3      	cmp	r3, r4
2400e9ba:	d9c8      	bls.n	2400e94e <create_chain+0x46>
2400e9bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2400e9c0:	4621      	mov	r1, r4
2400e9c2:	4640      	mov	r0, r8
2400e9c4:	f7ff fc72 	bl	2400e2ac <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
2400e9c8:	b958      	cbnz	r0, 2400e9e2 <create_chain+0xda>
2400e9ca:	b157      	cbz	r7, 2400e9e2 <create_chain+0xda>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400e9cc:	2f01      	cmp	r7, #1
2400e9ce:	d0be      	beq.n	2400e94e <create_chain+0x46>
2400e9d0:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400e9d4:	429f      	cmp	r7, r3
2400e9d6:	d2ba      	bcs.n	2400e94e <create_chain+0x46>
2400e9d8:	4622      	mov	r2, r4
2400e9da:	4639      	mov	r1, r7
2400e9dc:	4640      	mov	r0, r8
2400e9de:	f7ff fc65 	bl	2400e2ac <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
2400e9e2:	b980      	cbnz	r0, 2400ea06 <create_chain+0xfe>
		fs->last_clst = ncl;
2400e9e4:	f8c8 4010 	str.w	r4, [r8, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
2400e9e8:	e9d8 2305 	ldrd	r2, r3, [r8, #20]
2400e9ec:	3b02      	subs	r3, #2
2400e9ee:	429a      	cmp	r2, r3
2400e9f0:	d802      	bhi.n	2400e9f8 <create_chain+0xf0>
2400e9f2:	3a01      	subs	r2, #1
2400e9f4:	f8c8 2014 	str.w	r2, [r8, #20]
		fs->fsi_flag |= 1;
2400e9f8:	f898 3004 	ldrb.w	r3, [r8, #4]
2400e9fc:	f043 0301 	orr.w	r3, r3, #1
2400ea00:	f888 3004 	strb.w	r3, [r8, #4]
2400ea04:	e7a4      	b.n	2400e950 <create_chain+0x48>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
2400ea06:	2801      	cmp	r0, #1
2400ea08:	d1a1      	bne.n	2400e94e <create_chain+0x46>
2400ea0a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
2400ea0e:	4620      	mov	r0, r4
2400ea10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400ea14:	6a69      	ldr	r1, [r5, #36]	; 0x24
2400ea16:	4628      	mov	r0, r5
2400ea18:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
2400ea1c:	f7ff fa96 	bl	2400df4c <move_window>
2400ea20:	2800      	cmp	r0, #0
2400ea22:	d1f2      	bne.n	2400ea0a <create_chain+0x102>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400ea24:	00a3      	lsls	r3, r4, #2
2400ea26:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400ea2a:	441d      	add	r5, r3
2400ea2c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400ea2e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
2400ea32:	2b00      	cmp	r3, #0
2400ea34:	d0be      	beq.n	2400e9b4 <create_chain+0xac>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
2400ea36:	2b01      	cmp	r3, #1
2400ea38:	d089      	beq.n	2400e94e <create_chain+0x46>
			if (ncl == scl) return 0;		/* No free cluster */
2400ea3a:	42a6      	cmp	r6, r4
2400ea3c:	d010      	beq.n	2400ea60 <create_chain+0x158>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400ea3e:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400ea42:	e771      	b.n	2400e928 <create_chain+0x20>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400ea44:	6a69      	ldr	r1, [r5, #36]	; 0x24
2400ea46:	4628      	mov	r0, r5
2400ea48:	eb01 2114 	add.w	r1, r1, r4, lsr #8
2400ea4c:	f7ff fa7e 	bl	2400df4c <move_window>
2400ea50:	2800      	cmp	r0, #0
2400ea52:	d1da      	bne.n	2400ea0a <create_chain+0x102>
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400ea54:	0063      	lsls	r3, r4, #1
2400ea56:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
2400ea5a:	442b      	add	r3, r5
2400ea5c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
			break;
2400ea5e:	e7a7      	b.n	2400e9b0 <create_chain+0xa8>
				if (ncl > scl) return 0;	/* No free cluster */
2400ea60:	2400      	movs	r4, #0
}
2400ea62:	4620      	mov	r0, r4
2400ea64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
2400ea68:	4640      	mov	r0, r8
2400ea6a:	f7ff fca5 	bl	2400e3b8 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
2400ea6e:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
2400ea70:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
2400ea72:	f67f af6c 	bls.w	2400e94e <create_chain+0x46>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
2400ea76:	1c41      	adds	r1, r0, #1
2400ea78:	d0c7      	beq.n	2400ea0a <create_chain+0x102>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
2400ea7a:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400ea7e:	4283      	cmp	r3, r0
2400ea80:	f63f af66 	bhi.w	2400e950 <create_chain+0x48>
2400ea84:	463e      	mov	r6, r7
2400ea86:	e74e      	b.n	2400e926 <create_chain+0x1e>

2400ea88 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
2400ea88:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
{
2400ea8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = dp->obj.fs;
2400ea90:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
2400ea94:	d24e      	bcs.n	2400eb34 <dir_sdi+0xac>
2400ea96:	06ca      	lsls	r2, r1, #27
2400ea98:	460c      	mov	r4, r1
2400ea9a:	d14b      	bne.n	2400eb34 <dir_sdi+0xac>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
2400ea9c:	6885      	ldr	r5, [r0, #8]
2400ea9e:	4606      	mov	r6, r0
	dp->dptr = ofs;				/* Set current offset */
2400eaa0:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
2400eaa2:	2d00      	cmp	r5, #0
2400eaa4:	d049      	beq.n	2400eb3a <dir_sdi+0xb2>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
2400eaa6:	f8b8 300a 	ldrh.w	r3, [r8, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
2400eaaa:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
2400eaae:	ea4f 2943 	mov.w	r9, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
2400eab2:	f0c0 8084 	bcc.w	2400ebbe <dir_sdi+0x136>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400eab6:	2d01      	cmp	r5, #1
2400eab8:	d03c      	beq.n	2400eb34 <dir_sdi+0xac>
2400eaba:	4647      	mov	r7, r8
2400eabc:	e037      	b.n	2400eb2e <dir_sdi+0xa6>
		switch (fs->fs_type) {
2400eabe:	783b      	ldrb	r3, [r7, #0]
2400eac0:	2b02      	cmp	r3, #2
2400eac2:	d06e      	beq.n	2400eba2 <dir_sdi+0x11a>
2400eac4:	2b03      	cmp	r3, #3
2400eac6:	d05c      	beq.n	2400eb82 <dir_sdi+0xfa>
2400eac8:	2b01      	cmp	r3, #1
2400eaca:	d133      	bne.n	2400eb34 <dir_sdi+0xac>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400eacc:	6a79      	ldr	r1, [r7, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
2400eace:	eb05 0a55 	add.w	sl, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400ead2:	4638      	mov	r0, r7
2400ead4:	eb01 215a 	add.w	r1, r1, sl, lsr #9
2400ead8:	f7ff fa38 	bl	2400df4c <move_window>
2400eadc:	2800      	cmp	r0, #0
2400eade:	d14d      	bne.n	2400eb7c <dir_sdi+0xf4>
			wc = fs->win[bc++ % SS(fs)];
2400eae0:	f3ca 0308 	ubfx	r3, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400eae4:	6a79      	ldr	r1, [r7, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
2400eae6:	f10a 0a01 	add.w	sl, sl, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400eaea:	4638      	mov	r0, r7
			wc = fs->win[bc++ % SS(fs)];
2400eaec:	443b      	add	r3, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400eaee:	eb01 215a 	add.w	r1, r1, sl, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400eaf2:	f893 b034 	ldrb.w	fp, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400eaf6:	f7ff fa29 	bl	2400df4c <move_window>
2400eafa:	2800      	cmp	r0, #0
2400eafc:	d13e      	bne.n	2400eb7c <dir_sdi+0xf4>
			wc |= fs->win[bc % SS(fs)] << 8;
2400eafe:	f3ca 0a08 	ubfx	sl, sl, #0, #9
2400eb02:	44ba      	add	sl, r7
2400eb04:	f89a 3034 	ldrb.w	r3, [sl, #52]	; 0x34
2400eb08:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400eb0c:	07eb      	lsls	r3, r5, #31
2400eb0e:	bf4c      	ite	mi
2400eb10:	ea4f 151b 	movmi.w	r5, fp, lsr #4
2400eb14:	f3cb 050b 	ubfxpl	r5, fp, #0, #12
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
2400eb18:	2d01      	cmp	r5, #1
2400eb1a:	d90b      	bls.n	2400eb34 <dir_sdi+0xac>
2400eb1c:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400eb20:	42ab      	cmp	r3, r5
2400eb22:	d907      	bls.n	2400eb34 <dir_sdi+0xac>
			ofs -= csz;
2400eb24:	eba4 0409 	sub.w	r4, r4, r9
		while (ofs >= csz) {				/* Follow cluster chain */
2400eb28:	45a1      	cmp	r9, r4
2400eb2a:	d84a      	bhi.n	2400ebc2 <dir_sdi+0x13a>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
2400eb2c:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400eb2e:	69bb      	ldr	r3, [r7, #24]
2400eb30:	42ab      	cmp	r3, r5
2400eb32:	d8c4      	bhi.n	2400eabe <dir_sdi+0x36>
		switch (fs->fs_type) {
2400eb34:	2002      	movs	r0, #2
}
2400eb36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
2400eb3a:	f898 3000 	ldrb.w	r3, [r8]
2400eb3e:	2b02      	cmp	r3, #2
2400eb40:	d816      	bhi.n	2400eb70 <dir_sdi+0xe8>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
2400eb42:	f8b8 3008 	ldrh.w	r3, [r8, #8]
2400eb46:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
2400eb4a:	d9f3      	bls.n	2400eb34 <dir_sdi+0xac>
		dp->sect = fs->dirbase;
2400eb4c:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	dp->clust = clst;					/* Current cluster# */
2400eb50:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
2400eb54:	2b00      	cmp	r3, #0
2400eb56:	d0ed      	beq.n	2400eb34 <dir_sdi+0xac>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
2400eb58:	f108 0834 	add.w	r8, r8, #52	; 0x34
2400eb5c:	f3c4 0108 	ubfx	r1, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
2400eb60:	eb03 2354 	add.w	r3, r3, r4, lsr #9
	return FR_OK;
2400eb64:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
2400eb66:	4441      	add	r1, r8
2400eb68:	e9c6 3107 	strd	r3, r1, [r6, #28]
}
2400eb6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		clst = fs->dirbase;
2400eb70:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
2400eb74:	2b00      	cmp	r3, #0
2400eb76:	d0e4      	beq.n	2400eb42 <dir_sdi+0xba>
2400eb78:	461d      	mov	r5, r3
2400eb7a:	e794      	b.n	2400eaa6 <dir_sdi+0x1e>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
2400eb7c:	2001      	movs	r0, #1
}
2400eb7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400eb82:	6a79      	ldr	r1, [r7, #36]	; 0x24
2400eb84:	4638      	mov	r0, r7
2400eb86:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
2400eb8a:	f7ff f9df 	bl	2400df4c <move_window>
2400eb8e:	2800      	cmp	r0, #0
2400eb90:	d1f4      	bne.n	2400eb7c <dir_sdi+0xf4>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400eb92:	00ab      	lsls	r3, r5, #2
2400eb94:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400eb98:	443b      	add	r3, r7
2400eb9a:	6b5d      	ldr	r5, [r3, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400eb9c:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			break;
2400eba0:	e7ba      	b.n	2400eb18 <dir_sdi+0x90>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400eba2:	6a79      	ldr	r1, [r7, #36]	; 0x24
2400eba4:	4638      	mov	r0, r7
2400eba6:	eb01 2115 	add.w	r1, r1, r5, lsr #8
2400ebaa:	f7ff f9cf 	bl	2400df4c <move_window>
2400ebae:	2800      	cmp	r0, #0
2400ebb0:	d1e4      	bne.n	2400eb7c <dir_sdi+0xf4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400ebb2:	006b      	lsls	r3, r5, #1
2400ebb4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
2400ebb8:	443b      	add	r3, r7
2400ebba:	8e9d      	ldrh	r5, [r3, #52]	; 0x34
			break;
2400ebbc:	e7ac      	b.n	2400eb18 <dir_sdi+0x90>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400ebbe:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400ebc2:	3b02      	subs	r3, #2
	clst -= 2;
2400ebc4:	1eaa      	subs	r2, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400ebc6:	429a      	cmp	r2, r3
2400ebc8:	d206      	bcs.n	2400ebd8 <dir_sdi+0x150>
	return clst * fs->csize + fs->database;
2400ebca:	f8b8 100a 	ldrh.w	r1, [r8, #10]
2400ebce:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
2400ebd2:	fb02 3301 	mla	r3, r2, r1, r3
2400ebd6:	e7bb      	b.n	2400eb50 <dir_sdi+0xc8>
		dp->sect = fs->dirbase;
2400ebd8:	2300      	movs	r3, #0
2400ebda:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
2400ebde:	e7a9      	b.n	2400eb34 <dir_sdi+0xac>

2400ebe0 <dir_find>:
{
2400ebe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
2400ebe4:	2100      	movs	r1, #0
{
2400ebe6:	b085      	sub	sp, #20
2400ebe8:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
2400ebea:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
2400ebee:	f7ff ff4b 	bl	2400ea88 <dir_sdi>
	if (res != FR_OK) return res;
2400ebf2:	4607      	mov	r7, r0
2400ebf4:	b9e8      	cbnz	r0, 2400ec32 <dir_find+0x52>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2400ebf6:	f04f 09ff 	mov.w	r9, #255	; 0xff
2400ebfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		res = move_window(fs, dp->sect);
2400ebfe:	69e6      	ldr	r6, [r4, #28]
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2400ec00:	464f      	mov	r7, r9
2400ec02:	6323      	str	r3, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
2400ec04:	f8d8 5030 	ldr.w	r5, [r8, #48]	; 0x30
2400ec08:	42b5      	cmp	r5, r6
2400ec0a:	d018      	beq.n	2400ec3e <dir_find+0x5e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400ec0c:	f898 3003 	ldrb.w	r3, [r8, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400ec10:	f108 0134 	add.w	r1, r8, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400ec14:	2b00      	cmp	r3, #0
2400ec16:	f040 8085 	bne.w	2400ed24 <dir_find+0x144>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400ec1a:	2301      	movs	r3, #1
2400ec1c:	4632      	mov	r2, r6
2400ec1e:	f898 0001 	ldrb.w	r0, [r8, #1]
2400ec22:	f7fe ffd9 	bl	2400dbd8 <disk_read>
2400ec26:	b140      	cbz	r0, 2400ec3a <dir_find+0x5a>
			fs->winsect = sector;
2400ec28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
2400ec2c:	2701      	movs	r7, #1
			fs->winsect = sector;
2400ec2e:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
}
2400ec32:	4638      	mov	r0, r7
2400ec34:	b005      	add	sp, #20
2400ec36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
2400ec3a:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
		c = dp->dir[DIR_Name];
2400ec3e:	6a25      	ldr	r5, [r4, #32]
2400ec40:	782e      	ldrb	r6, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2400ec42:	b346      	cbz	r6, 2400ec96 <dir_find+0xb6>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
2400ec44:	7aeb      	ldrb	r3, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
2400ec46:	2ee5      	cmp	r6, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
2400ec48:	f003 023f 	and.w	r2, r3, #63	; 0x3f
2400ec4c:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
2400ec4e:	d004      	beq.n	2400ec5a <dir_find+0x7a>
2400ec50:	071b      	lsls	r3, r3, #28
2400ec52:	d525      	bpl.n	2400eca0 <dir_find+0xc0>
2400ec54:	2a0f      	cmp	r2, #15
2400ec56:	f000 8093 	beq.w	2400ed80 <dir_find+0x1a0>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2400ec5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400ec5e:	27ff      	movs	r7, #255	; 0xff
2400ec60:	6323      	str	r3, [r4, #48]	; 0x30
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400ec62:	6965      	ldr	r5, [r4, #20]
	FATFS *fs = dp->obj.fs;
2400ec64:	6823      	ldr	r3, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400ec66:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400ec68:	69e6      	ldr	r6, [r4, #28]
2400ec6a:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2400ec6e:	d212      	bcs.n	2400ec96 <dir_find+0xb6>
2400ec70:	b18e      	cbz	r6, 2400ec96 <dir_find+0xb6>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400ec72:	f3c5 0208 	ubfx	r2, r5, #0, #9
2400ec76:	b94a      	cbnz	r2, 2400ec8c <dir_find+0xac>
		dp->sect++;				/* Next sector */
2400ec78:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
2400ec7a:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
2400ec7c:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
2400ec7e:	2900      	cmp	r1, #0
2400ec80:	d15c      	bne.n	2400ed3c <dir_find+0x15c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
2400ec82:	8919      	ldrh	r1, [r3, #8]
2400ec84:	ebb1 1f55 	cmp.w	r1, r5, lsr #5
2400ec88:	f240 813a 	bls.w	2400ef00 <dir_find+0x320>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400ec8c:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
2400ec8e:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400ec90:	4413      	add	r3, r2
2400ec92:	6223      	str	r3, [r4, #32]
	} while (res == FR_OK);
2400ec94:	e7b6      	b.n	2400ec04 <dir_find+0x24>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2400ec96:	2704      	movs	r7, #4
}
2400ec98:	4638      	mov	r0, r7
2400ec9a:	b005      	add	sp, #20
2400ec9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
2400eca0:	2a0f      	cmp	r2, #15
2400eca2:	d06d      	beq.n	2400ed80 <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
2400eca4:	2f00      	cmp	r7, #0
2400eca6:	f000 80d9 	beq.w	2400ee5c <dir_find+0x27c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
2400ecaa:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
2400ecae:	f017 0701 	ands.w	r7, r7, #1
2400ecb2:	d1d2      	bne.n	2400ec5a <dir_find+0x7a>
	} while (--cnt && r == 0);
2400ecb4:	782a      	ldrb	r2, [r5, #0]
2400ecb6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
2400ecba:	429a      	cmp	r2, r3
2400ecbc:	d1cd      	bne.n	2400ec5a <dir_find+0x7a>
2400ecbe:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
2400ecc2:	786b      	ldrb	r3, [r5, #1]
2400ecc4:	429a      	cmp	r2, r3
2400ecc6:	d1c8      	bne.n	2400ec5a <dir_find+0x7a>
2400ecc8:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
2400eccc:	78ab      	ldrb	r3, [r5, #2]
2400ecce:	429a      	cmp	r2, r3
2400ecd0:	d1c3      	bne.n	2400ec5a <dir_find+0x7a>
2400ecd2:	78ea      	ldrb	r2, [r5, #3]
2400ecd4:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
2400ecd8:	429a      	cmp	r2, r3
2400ecda:	d1be      	bne.n	2400ec5a <dir_find+0x7a>
2400ecdc:	792a      	ldrb	r2, [r5, #4]
2400ecde:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
2400ece2:	429a      	cmp	r2, r3
2400ece4:	d1b9      	bne.n	2400ec5a <dir_find+0x7a>
2400ece6:	796a      	ldrb	r2, [r5, #5]
2400ece8:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
2400ecec:	429a      	cmp	r2, r3
2400ecee:	d1b4      	bne.n	2400ec5a <dir_find+0x7a>
2400ecf0:	79aa      	ldrb	r2, [r5, #6]
2400ecf2:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
2400ecf6:	429a      	cmp	r2, r3
2400ecf8:	d1af      	bne.n	2400ec5a <dir_find+0x7a>
2400ecfa:	79ea      	ldrb	r2, [r5, #7]
2400ecfc:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
2400ed00:	429a      	cmp	r2, r3
2400ed02:	d1aa      	bne.n	2400ec5a <dir_find+0x7a>
2400ed04:	7a2a      	ldrb	r2, [r5, #8]
2400ed06:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
2400ed0a:	429a      	cmp	r2, r3
2400ed0c:	d1a5      	bne.n	2400ec5a <dir_find+0x7a>
2400ed0e:	7a6a      	ldrb	r2, [r5, #9]
2400ed10:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
2400ed14:	429a      	cmp	r2, r3
2400ed16:	d1a0      	bne.n	2400ec5a <dir_find+0x7a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
2400ed18:	7aaa      	ldrb	r2, [r5, #10]
2400ed1a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
2400ed1e:	429a      	cmp	r2, r3
2400ed20:	d19b      	bne.n	2400ec5a <dir_find+0x7a>
2400ed22:	e786      	b.n	2400ec32 <dir_find+0x52>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400ed24:	2301      	movs	r3, #1
2400ed26:	462a      	mov	r2, r5
2400ed28:	f898 0001 	ldrb.w	r0, [r8, #1]
2400ed2c:	9100      	str	r1, [sp, #0]
2400ed2e:	f7fe ff63 	bl	2400dbf8 <disk_write>
2400ed32:	9900      	ldr	r1, [sp, #0]
2400ed34:	2800      	cmp	r0, #0
2400ed36:	d06e      	beq.n	2400ee16 <dir_find+0x236>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2400ed38:	2701      	movs	r7, #1
2400ed3a:	e77a      	b.n	2400ec32 <dir_find+0x52>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2400ed3c:	8958      	ldrh	r0, [r3, #10]
2400ed3e:	3801      	subs	r0, #1
2400ed40:	ea10 2055 	ands.w	r0, r0, r5, lsr #9
2400ed44:	d1a2      	bne.n	2400ec8c <dir_find+0xac>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400ed46:	4618      	mov	r0, r3
2400ed48:	9201      	str	r2, [sp, #4]
2400ed4a:	9300      	str	r3, [sp, #0]
2400ed4c:	f7ff fb34 	bl	2400e3b8 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400ed50:	2801      	cmp	r0, #1
2400ed52:	f240 80d9 	bls.w	2400ef08 <dir_find+0x328>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400ed56:	1c43      	adds	r3, r0, #1
2400ed58:	d0ee      	beq.n	2400ed38 <dir_find+0x158>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2400ed5a:	9b00      	ldr	r3, [sp, #0]
2400ed5c:	6999      	ldr	r1, [r3, #24]
2400ed5e:	4288      	cmp	r0, r1
2400ed60:	f080 80ce 	bcs.w	2400ef00 <dir_find+0x320>
				dp->clust = clst;		/* Initialize data for new cluster */
2400ed64:	61a0      	str	r0, [r4, #24]
	clst -= 2;
2400ed66:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400ed68:	6999      	ldr	r1, [r3, #24]
2400ed6a:	9a01      	ldr	r2, [sp, #4]
2400ed6c:	3902      	subs	r1, #2
2400ed6e:	4288      	cmp	r0, r1
2400ed70:	f080 80cc 	bcs.w	2400ef0c <dir_find+0x32c>
	return clst * fs->csize + fs->database;
2400ed74:	8959      	ldrh	r1, [r3, #10]
2400ed76:	6ade      	ldr	r6, [r3, #44]	; 0x2c
2400ed78:	fb00 6601 	mla	r6, r0, r1, r6
				dp->sect = clust2sect(fs, clst);
2400ed7c:	61e6      	str	r6, [r4, #28]
2400ed7e:	e785      	b.n	2400ec8c <dir_find+0xac>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
2400ed80:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
2400ed84:	0658      	lsls	r0, r3, #25
2400ed86:	f53f af6c 	bmi.w	2400ec62 <dir_find+0x82>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
2400ed8a:	0671      	lsls	r1, r6, #25
2400ed8c:	f140 80b3 	bpl.w	2400eef6 <dir_find+0x316>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
2400ed90:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
2400ed92:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
2400ed96:	f895 900d 	ldrb.w	r9, [r5, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
2400ed9a:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400ed9c:	7b6b      	ldrb	r3, [r5, #13]
2400ed9e:	454b      	cmp	r3, r9
2400eda0:	f040 80ac 	bne.w	2400eefc <dir_find+0x31c>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
2400eda4:	8b6b      	ldrh	r3, [r5, #26]
2400eda6:	2b00      	cmp	r3, #0
2400eda8:	f040 80a8 	bne.w	2400eefc <dir_find+0x31c>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
2400edac:	782f      	ldrb	r7, [r5, #0]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
2400edae:	2101      	movs	r1, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400edb0:	f8d8 200c 	ldr.w	r2, [r8, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
2400edb4:	f007 073f 	and.w	r7, r7, #63	; 0x3f
2400edb8:	f8df a178 	ldr.w	sl, [pc, #376]	; 2400ef34 <dir_find+0x354>
2400edbc:	9602      	str	r6, [sp, #8]
2400edbe:	462e      	mov	r6, r5
2400edc0:	3f01      	subs	r7, #1
2400edc2:	f10a 0b0d 	add.w	fp, sl, #13
2400edc6:	4615      	mov	r5, r2
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400edc8:	9203      	str	r2, [sp, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
2400edca:	eb07 0347 	add.w	r3, r7, r7, lsl #1
2400edce:	f8cd 8000 	str.w	r8, [sp]
2400edd2:	9401      	str	r4, [sp, #4]
2400edd4:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
2400edd8:	e010      	b.n	2400edfc <dir_find+0x21c>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
2400edda:	2ffe      	cmp	r7, #254	; 0xfe
2400eddc:	4620      	mov	r0, r4
2400edde:	d816      	bhi.n	2400ee0e <dir_find+0x22e>
2400ede0:	f001 fe62 	bl	24010aa8 <ff_wtoupper>
2400ede4:	4680      	mov	r8, r0
2400ede6:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
2400edea:	3701      	adds	r7, #1
2400edec:	f001 fe5c 	bl	24010aa8 <ff_wtoupper>
2400edf0:	4580      	cmp	r8, r0
2400edf2:	4621      	mov	r1, r4
2400edf4:	d10b      	bne.n	2400ee0e <dir_find+0x22e>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
2400edf6:	45d3      	cmp	fp, sl
2400edf8:	f000 808a 	beq.w	2400ef10 <dir_find+0x330>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
2400edfc:	f81a 3b01 	ldrb.w	r3, [sl], #1
2400ee00:	5af4      	ldrh	r4, [r6, r3]
		if (wc) {
2400ee02:	2900      	cmp	r1, #0
2400ee04:	d1e9      	bne.n	2400edda <dir_find+0x1fa>
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400ee06:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400ee0a:	429c      	cmp	r4, r3
2400ee0c:	d0f3      	beq.n	2400edf6 <dir_find+0x216>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400ee0e:	e9dd 8400 	ldrd	r8, r4, [sp]
2400ee12:	27ff      	movs	r7, #255	; 0xff
2400ee14:	e725      	b.n	2400ec62 <dir_find+0x82>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400ee16:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
2400ee1a:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400ee1e:	1aea      	subs	r2, r5, r3
2400ee20:	f8d8 301c 	ldr.w	r3, [r8, #28]
2400ee24:	429a      	cmp	r2, r3
2400ee26:	f4bf aef8 	bcs.w	2400ec1a <dir_find+0x3a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400ee2a:	f898 a002 	ldrb.w	sl, [r8, #2]
2400ee2e:	f1ba 0f01 	cmp.w	sl, #1
2400ee32:	f67f aef2 	bls.w	2400ec1a <dir_find+0x3a>
2400ee36:	468b      	mov	fp, r1
2400ee38:	e001      	b.n	2400ee3e <dir_find+0x25e>
					wsect += fs->fsize;
2400ee3a:	f8d8 301c 	ldr.w	r3, [r8, #28]
2400ee3e:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400ee40:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
2400ee44:	2301      	movs	r3, #1
2400ee46:	4659      	mov	r1, fp
2400ee48:	462a      	mov	r2, r5
2400ee4a:	f898 0001 	ldrb.w	r0, [r8, #1]
2400ee4e:	f7fe fed3 	bl	2400dbf8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400ee52:	f1ba 0f01 	cmp.w	sl, #1
2400ee56:	d1f0      	bne.n	2400ee3a <dir_find+0x25a>
2400ee58:	4659      	mov	r1, fp
2400ee5a:	e6de      	b.n	2400ec1a <dir_find+0x3a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400ee5c:	782a      	ldrb	r2, [r5, #0]
2400ee5e:	7869      	ldrb	r1, [r5, #1]
2400ee60:	01d0      	lsls	r0, r2, #7
2400ee62:	78ae      	ldrb	r6, [r5, #2]
2400ee64:	78eb      	ldrb	r3, [r5, #3]
2400ee66:	ea40 0052 	orr.w	r0, r0, r2, lsr #1
2400ee6a:	792a      	ldrb	r2, [r5, #4]
2400ee6c:	f895 a005 	ldrb.w	sl, [r5, #5]
2400ee70:	4408      	add	r0, r1
2400ee72:	f895 e006 	ldrb.w	lr, [r5, #6]
2400ee76:	f895 c007 	ldrb.w	ip, [r5, #7]
2400ee7a:	f3c0 0146 	ubfx	r1, r0, #1, #7
2400ee7e:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
2400ee82:	7a68      	ldrb	r0, [r5, #9]
2400ee84:	fa56 f181 	uxtab	r1, r6, r1
2400ee88:	7a2e      	ldrb	r6, [r5, #8]
2400ee8a:	f3c1 0b46 	ubfx	fp, r1, #1, #7
2400ee8e:	ea4b 1bc1 	orr.w	fp, fp, r1, lsl #7
2400ee92:	7aa9      	ldrb	r1, [r5, #10]
2400ee94:	fa53 fb8b 	uxtab	fp, r3, fp
2400ee98:	f3cb 0346 	ubfx	r3, fp, #1, #7
2400ee9c:	ea43 13cb 	orr.w	r3, r3, fp, lsl #7
2400eea0:	fa52 f383 	uxtab	r3, r2, r3
2400eea4:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400eea8:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400eeac:	fa5a f282 	uxtab	r2, sl, r2
2400eeb0:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400eeb4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400eeb8:	fa5e f383 	uxtab	r3, lr, r3
2400eebc:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400eec0:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400eec4:	fa5c f282 	uxtab	r2, ip, r2
2400eec8:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400eecc:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400eed0:	fa56 f383 	uxtab	r3, r6, r3
2400eed4:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400eed8:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400eedc:	fa50 f282 	uxtab	r2, r0, r2
2400eee0:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400eee4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400eee8:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
2400eeec:	b2db      	uxtb	r3, r3
2400eeee:	4599      	cmp	r9, r3
2400eef0:	f47f aedb 	bne.w	2400ecaa <dir_find+0xca>
2400eef4:	e69d      	b.n	2400ec32 <dir_find+0x52>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400eef6:	42b7      	cmp	r7, r6
2400eef8:	f43f af50 	beq.w	2400ed9c <dir_find+0x1bc>
2400eefc:	27ff      	movs	r7, #255	; 0xff
2400eefe:	e6b0      	b.n	2400ec62 <dir_find+0x82>
				dp->sect = 0; return FR_NO_FILE;
2400ef00:	2300      	movs	r3, #0
2400ef02:	2704      	movs	r7, #4
2400ef04:	61e3      	str	r3, [r4, #28]
	} while (res == FR_OK);
2400ef06:	e694      	b.n	2400ec32 <dir_find+0x52>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400ef08:	2702      	movs	r7, #2
2400ef0a:	e692      	b.n	2400ec32 <dir_find+0x52>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400ef0c:	4616      	mov	r6, r2
2400ef0e:	e735      	b.n	2400ed7c <dir_find+0x19c>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
2400ef10:	4635      	mov	r5, r6
2400ef12:	f8dd 8000 	ldr.w	r8, [sp]
2400ef16:	782b      	ldrb	r3, [r5, #0]
2400ef18:	065a      	lsls	r2, r3, #25
2400ef1a:	e9dd 4601 	ldrd	r4, r6, [sp, #4]
2400ef1e:	d500      	bpl.n	2400ef22 <dir_find+0x342>
2400ef20:	b911      	cbnz	r1, 2400ef28 <dir_find+0x348>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400ef22:	3e01      	subs	r6, #1
2400ef24:	b2f7      	uxtb	r7, r6
2400ef26:	e69c      	b.n	2400ec62 <dir_find+0x82>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
2400ef28:	9b03      	ldr	r3, [sp, #12]
2400ef2a:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
2400ef2e:	2b00      	cmp	r3, #0
2400ef30:	d0f7      	beq.n	2400ef22 <dir_find+0x342>
2400ef32:	e7e3      	b.n	2400eefc <dir_find+0x31c>
2400ef34:	2401c754 	.word	0x2401c754

2400ef38 <follow_path>:
{
2400ef38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
2400ef3c:	780b      	ldrb	r3, [r1, #0]
{
2400ef3e:	b083      	sub	sp, #12
2400ef40:	4688      	mov	r8, r1
2400ef42:	4607      	mov	r7, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
2400ef44:	2b2f      	cmp	r3, #47	; 0x2f
	FATFS *fs = obj->fs;
2400ef46:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
2400ef4a:	d103      	bne.n	2400ef54 <follow_path+0x1c>
2400ef4c:	f818 3f01 	ldrb.w	r3, [r8, #1]!
2400ef50:	2b2f      	cmp	r3, #47	; 0x2f
2400ef52:	d0fb      	beq.n	2400ef4c <follow_path+0x14>
2400ef54:	2b5c      	cmp	r3, #92	; 0x5c
2400ef56:	d0f9      	beq.n	2400ef4c <follow_path+0x14>
		obj->sclust = 0;					/* Start from root directory */
2400ef58:	2100      	movs	r1, #0
2400ef5a:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
2400ef5c:	f898 3000 	ldrb.w	r3, [r8]
2400ef60:	2b1f      	cmp	r3, #31
2400ef62:	f240 8147 	bls.w	2400f1f4 <follow_path+0x2bc>
2400ef66:	465a      	mov	r2, fp
		if (w < ' ') break;				/* Break if end of the path name */
2400ef68:	2b1f      	cmp	r3, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
2400ef6a:	68d5      	ldr	r5, [r2, #12]
		w = p[si++];					/* Get a character */
2400ef6c:	b298      	uxth	r0, r3
		if (w < ' ') break;				/* Break if end of the path name */
2400ef6e:	d929      	bls.n	2400efc4 <follow_path+0x8c>
2400ef70:	f1a5 0902 	sub.w	r9, r5, #2
2400ef74:	4646      	mov	r6, r8
		w = p[si++];					/* Get a character */
2400ef76:	2401      	movs	r4, #1
2400ef78:	e008      	b.n	2400ef8c <follow_path+0x54>
		lfn[di++] = w;					/* Store the Unicode character */
2400ef7a:	f829 0f02 	strh.w	r0, [r9, #2]!
		w = p[si++];					/* Get a character */
2400ef7e:	1c63      	adds	r3, r4, #1
2400ef80:	f816 0f01 	ldrb.w	r0, [r6, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
2400ef84:	281f      	cmp	r0, #31
2400ef86:	f240 80f6 	bls.w	2400f176 <follow_path+0x23e>
		w = p[si++];					/* Get a character */
2400ef8a:	461c      	mov	r4, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
2400ef8c:	282f      	cmp	r0, #47	; 0x2f
2400ef8e:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
2400ef92:	d01d      	beq.n	2400efd0 <follow_path+0x98>
2400ef94:	285c      	cmp	r0, #92	; 0x5c
2400ef96:	d01b      	beq.n	2400efd0 <follow_path+0x98>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
2400ef98:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
2400ef9c:	d00e      	beq.n	2400efbc <follow_path+0x84>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
2400ef9e:	2101      	movs	r1, #1
2400efa0:	f001 fd64 	bl	24010a6c <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
2400efa4:	b150      	cbz	r0, 2400efbc <follow_path+0x84>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
2400efa6:	287f      	cmp	r0, #127	; 0x7f
2400efa8:	d8e7      	bhi.n	2400ef7a <follow_path+0x42>
	while (*str && *str != chr) str++;
2400efaa:	2322      	movs	r3, #34	; 0x22
2400efac:	4aa5      	ldr	r2, [pc, #660]	; (2400f244 <follow_path+0x30c>)
2400efae:	e003      	b.n	2400efb8 <follow_path+0x80>
2400efb0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
2400efb4:	2b00      	cmp	r3, #0
2400efb6:	d0e0      	beq.n	2400ef7a <follow_path+0x42>
2400efb8:	4298      	cmp	r0, r3
2400efba:	d1f9      	bne.n	2400efb0 <follow_path+0x78>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
2400efbc:	2006      	movs	r0, #6
}
2400efbe:	b003      	add	sp, #12
2400efc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lfn[di] = 0;						/* LFN is created */
2400efc4:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
2400efc6:	2006      	movs	r0, #6
	lfn[di] = 0;						/* LFN is created */
2400efc8:	802b      	strh	r3, [r5, #0]
}
2400efca:	b003      	add	sp, #12
2400efcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
2400efd0:	f818 3004 	ldrb.w	r3, [r8, r4]
2400efd4:	eb08 0204 	add.w	r2, r8, r4
2400efd8:	2b2f      	cmp	r3, #47	; 0x2f
2400efda:	d002      	beq.n	2400efe2 <follow_path+0xaa>
2400efdc:	2b5c      	cmp	r3, #92	; 0x5c
2400efde:	f040 811e 	bne.w	2400f21e <follow_path+0x2e6>
2400efe2:	1c63      	adds	r3, r4, #1
2400efe4:	4443      	add	r3, r8
2400efe6:	4698      	mov	r8, r3
2400efe8:	f813 2b01 	ldrb.w	r2, [r3], #1
2400efec:	2a2f      	cmp	r2, #47	; 0x2f
2400efee:	d0fa      	beq.n	2400efe6 <follow_path+0xae>
2400eff0:	2a5c      	cmp	r2, #92	; 0x5c
2400eff2:	d0f8      	beq.n	2400efe6 <follow_path+0xae>
	while (di) {						/* Snip off trailing spaces and dots if exist */
2400eff4:	f1ba 0f00 	cmp.w	sl, #0
2400eff8:	d0e4      	beq.n	2400efc4 <follow_path+0x8c>
2400effa:	2603      	movs	r6, #3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
2400effc:	2400      	movs	r4, #0
2400effe:	eb05 024a 	add.w	r2, r5, sl, lsl #1
2400f002:	e002      	b.n	2400f00a <follow_path+0xd2>
	while (di) {						/* Snip off trailing spaces and dots if exist */
2400f004:	f1ba 0a01 	subs.w	sl, sl, #1
2400f008:	d0dc      	beq.n	2400efc4 <follow_path+0x8c>
		w = lfn[di - 1];
2400f00a:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
2400f00e:	2b20      	cmp	r3, #32
2400f010:	d0f8      	beq.n	2400f004 <follow_path+0xcc>
2400f012:	2b2e      	cmp	r3, #46	; 0x2e
2400f014:	d0f6      	beq.n	2400f004 <follow_path+0xcc>
		*d++ = (BYTE)val;
2400f016:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
2400f01a:	2100      	movs	r1, #0
		*d++ = (BYTE)val;
2400f01c:	f242 0220 	movw	r2, #8224	; 0x2020
	lfn[di] = 0;						/* LFN is created */
2400f020:	f825 101a 	strh.w	r1, [r5, sl, lsl #1]
		*d++ = (BYTE)val;
2400f024:	627b      	str	r3, [r7, #36]	; 0x24
2400f026:	62bb      	str	r3, [r7, #40]	; 0x28
2400f028:	2320      	movs	r3, #32
2400f02a:	85ba      	strh	r2, [r7, #44]	; 0x2c
2400f02c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
2400f030:	8828      	ldrh	r0, [r5, #0]
2400f032:	282e      	cmp	r0, #46	; 0x2e
2400f034:	d002      	beq.n	2400f03c <follow_path+0x104>
2400f036:	4298      	cmp	r0, r3
2400f038:	f040 80e5 	bne.w	2400f206 <follow_path+0x2ce>
2400f03c:	462a      	mov	r2, r5
2400f03e:	2300      	movs	r3, #0
2400f040:	f832 0f02 	ldrh.w	r0, [r2, #2]!
2400f044:	461c      	mov	r4, r3
2400f046:	3301      	adds	r3, #1
2400f048:	2820      	cmp	r0, #32
2400f04a:	d0f9      	beq.n	2400f040 <follow_path+0x108>
2400f04c:	282e      	cmp	r0, #46	; 0x2e
2400f04e:	d0f7      	beq.n	2400f040 <follow_path+0x108>
		w = lfn[si++];					/* Get an LFN character */
2400f050:	3402      	adds	r4, #2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
2400f052:	eb05 034a 	add.w	r3, r5, sl, lsl #1
2400f056:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
2400f05a:	2a2e      	cmp	r2, #46	; 0x2e
2400f05c:	d002      	beq.n	2400f064 <follow_path+0x12c>
2400f05e:	f1ba 0a01 	subs.w	sl, sl, #1
2400f062:	d1f8      	bne.n	2400f056 <follow_path+0x11e>
		if (!w) break;					/* Break on end of the LFN */
2400f064:	b3b0      	cbz	r0, 2400f0d4 <follow_path+0x19c>
2400f066:	2208      	movs	r2, #8
2400f068:	4641      	mov	r1, r8
2400f06a:	2300      	movs	r3, #0
2400f06c:	46b8      	mov	r8, r7
2400f06e:	462f      	mov	r7, r5
2400f070:	4615      	mov	r5, r2
2400f072:	4699      	mov	r9, r3
2400f074:	460a      	mov	r2, r1
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
2400f076:	2820      	cmp	r0, #32
2400f078:	d003      	beq.n	2400f082 <follow_path+0x14a>
2400f07a:	282e      	cmp	r0, #46	; 0x2e
2400f07c:	d14d      	bne.n	2400f11a <follow_path+0x1e2>
2400f07e:	45a2      	cmp	sl, r4
2400f080:	d04b      	beq.n	2400f11a <follow_path+0x1e2>
			cf |= NS_LOSS | NS_LFN; continue;
2400f082:	f046 0603 	orr.w	r6, r6, #3
2400f086:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN character */
2400f088:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
2400f08c:	3401      	adds	r4, #1
		if (!w) break;					/* Break on end of the LFN */
2400f08e:	2800      	cmp	r0, #0
2400f090:	d1f1      	bne.n	2400f076 <follow_path+0x13e>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
2400f092:	4647      	mov	r7, r8
2400f094:	4690      	mov	r8, r2
2400f096:	462a      	mov	r2, r5
2400f098:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
2400f09c:	29e5      	cmp	r1, #229	; 0xe5
2400f09e:	d102      	bne.n	2400f0a6 <follow_path+0x16e>
2400f0a0:	2105      	movs	r1, #5
2400f0a2:	f887 1024 	strb.w	r1, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
2400f0a6:	2a08      	cmp	r2, #8
2400f0a8:	f000 8093 	beq.w	2400f1d2 <follow_path+0x29a>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2400f0ac:	f003 020c 	and.w	r2, r3, #12
2400f0b0:	2a0c      	cmp	r2, #12
2400f0b2:	d065      	beq.n	2400f180 <follow_path+0x248>
2400f0b4:	f003 0303 	and.w	r3, r3, #3
2400f0b8:	2b03      	cmp	r3, #3
2400f0ba:	d061      	beq.n	2400f180 <follow_path+0x248>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
2400f0bc:	07b1      	lsls	r1, r6, #30
2400f0be:	d409      	bmi.n	2400f0d4 <follow_path+0x19c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
2400f0c0:	2b01      	cmp	r3, #1
2400f0c2:	d102      	bne.n	2400f0ca <follow_path+0x192>
2400f0c4:	f046 0610 	orr.w	r6, r6, #16
2400f0c8:	b2f6      	uxtb	r6, r6
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
2400f0ca:	2a04      	cmp	r2, #4
2400f0cc:	d102      	bne.n	2400f0d4 <follow_path+0x19c>
2400f0ce:	f046 0608 	orr.w	r6, r6, #8
2400f0d2:	b2f6      	uxtb	r6, r6
			res = dir_find(dp);				/* Find an object with the segment name */
2400f0d4:	4638      	mov	r0, r7
	dp->fn[NSFLAG] = cf;	/* SFN is created */
2400f0d6:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
2400f0da:	f7ff fd81 	bl	2400ebe0 <dir_find>
			ns = dp->fn[NSFLAG];
2400f0de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
2400f0e2:	2800      	cmp	r0, #0
2400f0e4:	d158      	bne.n	2400f198 <follow_path+0x260>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
2400f0e6:	075a      	lsls	r2, r3, #29
2400f0e8:	f53f af69 	bmi.w	2400efbe <follow_path+0x86>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
2400f0ec:	79bb      	ldrb	r3, [r7, #6]
2400f0ee:	06db      	lsls	r3, r3, #27
2400f0f0:	f140 8097 	bpl.w	2400f222 <follow_path+0x2ea>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2400f0f4:	697a      	ldr	r2, [r7, #20]
2400f0f6:	f10b 0334 	add.w	r3, fp, #52	; 0x34
	if (fs->fs_type == FS_FAT32) {
2400f0fa:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2400f0fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
2400f102:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2400f104:	4413      	add	r3, r2
	cl = ld_word(dir + DIR_FstClusLO);
2400f106:	8b5a      	ldrh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
2400f108:	d102      	bne.n	2400f110 <follow_path+0x1d8>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
2400f10a:	8a9b      	ldrh	r3, [r3, #20]
2400f10c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2400f110:	60ba      	str	r2, [r7, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
2400f112:	683a      	ldr	r2, [r7, #0]
		w = p[si++];					/* Get a character */
2400f114:	f898 3000 	ldrb.w	r3, [r8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
2400f118:	e726      	b.n	2400ef68 <follow_path+0x30>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
2400f11a:	454d      	cmp	r5, r9
2400f11c:	d91c      	bls.n	2400f158 <follow_path+0x220>
2400f11e:	ebaa 0104 	sub.w	r1, sl, r4
2400f122:	fab1 f181 	clz	r1, r1
2400f126:	0949      	lsrs	r1, r1, #5
2400f128:	b9b1      	cbnz	r1, 2400f158 <follow_path+0x220>
		if (w >= 0x80) {				/* Non ASCII character */
2400f12a:	287f      	cmp	r0, #127	; 0x7f
2400f12c:	d83c      	bhi.n	2400f1a8 <follow_path+0x270>
	while (*str && *str != chr) str++;
2400f12e:	212b      	movs	r1, #43	; 0x2b
2400f130:	f8df c118 	ldr.w	ip, [pc, #280]	; 2400f24c <follow_path+0x314>
2400f134:	e003      	b.n	2400f13e <follow_path+0x206>
2400f136:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
2400f13a:	2900      	cmp	r1, #0
2400f13c:	d052      	beq.n	2400f1e4 <follow_path+0x2ac>
2400f13e:	4281      	cmp	r1, r0
2400f140:	d1f9      	bne.n	2400f136 <follow_path+0x1fe>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
2400f142:	f046 0603 	orr.w	r6, r6, #3
2400f146:	205f      	movs	r0, #95	; 0x5f
2400f148:	b2f6      	uxtb	r6, r6
		dp->fn[i++] = (BYTE)w;
2400f14a:	eb08 0109 	add.w	r1, r8, r9
2400f14e:	f109 0901 	add.w	r9, r9, #1
2400f152:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
2400f156:	e797      	b.n	2400f088 <follow_path+0x150>
			if (ni == 11) {				/* Long extension */
2400f158:	2d0b      	cmp	r5, #11
2400f15a:	d064      	beq.n	2400f226 <follow_path+0x2ee>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
2400f15c:	45a2      	cmp	sl, r4
2400f15e:	d003      	beq.n	2400f168 <follow_path+0x230>
2400f160:	f046 0603 	orr.w	r6, r6, #3
2400f164:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
2400f166:	d394      	bcc.n	2400f092 <follow_path+0x15a>
			b <<= 2; continue;
2400f168:	009b      	lsls	r3, r3, #2
2400f16a:	4654      	mov	r4, sl
			si = di; i = 8; ni = 11;	/* Enter extension section */
2400f16c:	250b      	movs	r5, #11
2400f16e:	f04f 0908 	mov.w	r9, #8
			b <<= 2; continue;
2400f172:	b2db      	uxtb	r3, r3
2400f174:	e788      	b.n	2400f088 <follow_path+0x150>
	*path = &p[si];						/* Return pointer to the next segment */
2400f176:	46a2      	mov	sl, r4
2400f178:	4498      	add	r8, r3
2400f17a:	2607      	movs	r6, #7
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
2400f17c:	2404      	movs	r4, #4
2400f17e:	e73e      	b.n	2400effe <follow_path+0xc6>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2400f180:	f046 0602 	orr.w	r6, r6, #2
			res = dir_find(dp);				/* Find an object with the segment name */
2400f184:	4638      	mov	r0, r7
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2400f186:	b2f6      	uxtb	r6, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
2400f188:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
2400f18c:	f7ff fd28 	bl	2400ebe0 <dir_find>
			ns = dp->fn[NSFLAG];
2400f190:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
2400f194:	2800      	cmp	r0, #0
2400f196:	d0a6      	beq.n	2400f0e6 <follow_path+0x1ae>
				if (res == FR_NO_FILE) {	/* Object is not found */
2400f198:	2804      	cmp	r0, #4
2400f19a:	f47f af10 	bne.w	2400efbe <follow_path+0x86>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
2400f19e:	f013 0f04 	tst.w	r3, #4
2400f1a2:	bf08      	it	eq
2400f1a4:	2005      	moveq	r0, #5
2400f1a6:	e70a      	b.n	2400efbe <follow_path+0x86>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
2400f1a8:	e9cd 3200 	strd	r3, r2, [sp]
2400f1ac:	f001 fc5e 	bl	24010a6c <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400f1b0:	e9dd 3200 	ldrd	r3, r2, [sp]
2400f1b4:	b918      	cbnz	r0, 2400f1be <follow_path+0x286>
			cf |= NS_LFN;				/* Force create LFN entry */
2400f1b6:	f046 0602 	orr.w	r6, r6, #2
2400f1ba:	b2f6      	uxtb	r6, r6
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
2400f1bc:	e7c1      	b.n	2400f142 <follow_path+0x20a>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400f1be:	4922      	ldr	r1, [pc, #136]	; (2400f248 <follow_path+0x310>)
			cf |= NS_LFN;				/* Force create LFN entry */
2400f1c0:	f046 0602 	orr.w	r6, r6, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400f1c4:	4408      	add	r0, r1
			cf |= NS_LFN;				/* Force create LFN entry */
2400f1c6:	b2f6      	uxtb	r6, r6
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400f1c8:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
2400f1cc:	2800      	cmp	r0, #0
2400f1ce:	d0b8      	beq.n	2400f142 <follow_path+0x20a>
2400f1d0:	e7ad      	b.n	2400f12e <follow_path+0x1f6>
	if (ni == 8) b <<= 2;
2400f1d2:	009a      	lsls	r2, r3, #2
2400f1d4:	f002 020c 	and.w	r2, r2, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2400f1d8:	2a0c      	cmp	r2, #12
2400f1da:	d0d1      	beq.n	2400f180 <follow_path+0x248>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
2400f1dc:	07b0      	lsls	r0, r6, #30
2400f1de:	f57f af74 	bpl.w	2400f0ca <follow_path+0x192>
2400f1e2:	e777      	b.n	2400f0d4 <follow_path+0x19c>
				if (IsUpper(w)) {		/* ASCII large capital */
2400f1e4:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
2400f1e8:	2919      	cmp	r1, #25
2400f1ea:	d80f      	bhi.n	2400f20c <follow_path+0x2d4>
					b |= 2;
2400f1ec:	f043 0302 	orr.w	r3, r3, #2
		dp->fn[i++] = (BYTE)w;
2400f1f0:	b2c0      	uxtb	r0, r0
2400f1f2:	e7aa      	b.n	2400f14a <follow_path+0x212>
		dp->fn[NSFLAG] = NS_NONAME;
2400f1f4:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
2400f1f6:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
2400f1f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
2400f1fc:	b003      	add	sp, #12
2400f1fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
2400f202:	f7ff bc41 	b.w	2400ea88 <dir_sdi>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
2400f206:	4626      	mov	r6, r4
2400f208:	2401      	movs	r4, #1
2400f20a:	e722      	b.n	2400f052 <follow_path+0x11a>
					if (IsLower(w)) {	/* ASCII small capital */
2400f20c:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
2400f210:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
2400f212:	bf9c      	itt	ls
2400f214:	3820      	subls	r0, #32
2400f216:	f043 0301 	orrls.w	r3, r3, #1
		dp->fn[i++] = (BYTE)w;
2400f21a:	b2c0      	uxtb	r0, r0
2400f21c:	e795      	b.n	2400f14a <follow_path+0x212>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
2400f21e:	4690      	mov	r8, r2
2400f220:	e6e8      	b.n	2400eff4 <follow_path+0xbc>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
2400f222:	2005      	movs	r0, #5
2400f224:	e6cb      	b.n	2400efbe <follow_path+0x86>
				cf |= NS_LOSS | NS_LFN; break;
2400f226:	4647      	mov	r7, r8
2400f228:	4690      	mov	r8, r2
2400f22a:	f046 0603 	orr.w	r6, r6, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
2400f22e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
				cf |= NS_LOSS | NS_LFN; break;
2400f232:	b2f6      	uxtb	r6, r6
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
2400f234:	2ae5      	cmp	r2, #229	; 0xe5
2400f236:	f47f af39 	bne.w	2400f0ac <follow_path+0x174>
2400f23a:	2205      	movs	r2, #5
2400f23c:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
2400f240:	e734      	b.n	2400f0ac <follow_path+0x174>
2400f242:	bf00      	nop
2400f244:	2401c6c0 	.word	0x2401c6c0
2400f248:	2401c6d4 	.word	0x2401c6d4
2400f24c:	2401c6cc 	.word	0x2401c6cc

2400f250 <dir_next>:
{
2400f250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400f254:	69c3      	ldr	r3, [r0, #28]
{
2400f256:	b085      	sub	sp, #20
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400f258:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400f25a:	2b00      	cmp	r3, #0
2400f25c:	d03d      	beq.n	2400f2da <dir_next+0x8a>
2400f25e:	3520      	adds	r5, #32
2400f260:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2400f264:	d239      	bcs.n	2400f2da <dir_next+0x8a>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400f266:	f3c5 0808 	ubfx	r8, r5, #0, #9
2400f26a:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
2400f26c:	6807      	ldr	r7, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400f26e:	f1b8 0f00 	cmp.w	r8, #0
2400f272:	d008      	beq.n	2400f286 <dir_next+0x36>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400f274:	f107 0634 	add.w	r6, r7, #52	; 0x34
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400f278:	4446      	add	r6, r8
	return FR_OK;
2400f27a:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
2400f27c:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400f27e:	6226      	str	r6, [r4, #32]
}
2400f280:	b005      	add	sp, #20
2400f282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->sect++;				/* Next sector */
2400f286:	460e      	mov	r6, r1
2400f288:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
2400f28a:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
2400f28c:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
2400f28e:	b341      	cbz	r1, 2400f2e2 <dir_next+0x92>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2400f290:	897b      	ldrh	r3, [r7, #10]
2400f292:	3b01      	subs	r3, #1
2400f294:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
2400f298:	9300      	str	r3, [sp, #0]
2400f29a:	d1eb      	bne.n	2400f274 <dir_next+0x24>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400f29c:	4638      	mov	r0, r7
2400f29e:	f7ff f88b 	bl	2400e3b8 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400f2a2:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400f2a4:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400f2a6:	d924      	bls.n	2400f2f2 <dir_next+0xa2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400f2a8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
2400f2ac:	d023      	beq.n	2400f2f6 <dir_next+0xa6>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2400f2ae:	69bb      	ldr	r3, [r7, #24]
2400f2b0:	4283      	cmp	r3, r0
2400f2b2:	d922      	bls.n	2400f2fa <dir_next+0xaa>
	clst -= 2;
2400f2b4:	1e83      	subs	r3, r0, #2
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400f2b6:	f107 0634 	add.w	r6, r7, #52	; 0x34
2400f2ba:	4619      	mov	r1, r3
	clst -= 2;
2400f2bc:	9301      	str	r3, [sp, #4]
				dp->clust = clst;		/* Initialize data for new cluster */
2400f2be:	f8c4 9018 	str.w	r9, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400f2c2:	69bb      	ldr	r3, [r7, #24]
2400f2c4:	3b02      	subs	r3, #2
2400f2c6:	428b      	cmp	r3, r1
2400f2c8:	d904      	bls.n	2400f2d4 <dir_next+0x84>
	return clst * fs->csize + fs->database;
2400f2ca:	897a      	ldrh	r2, [r7, #10]
2400f2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2400f2ce:	fb01 3302 	mla	r3, r1, r2, r3
2400f2d2:	9300      	str	r3, [sp, #0]
				dp->sect = clust2sect(fs, clst);
2400f2d4:	9b00      	ldr	r3, [sp, #0]
2400f2d6:	61e3      	str	r3, [r4, #28]
2400f2d8:	e7ce      	b.n	2400f278 <dir_next+0x28>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400f2da:	2004      	movs	r0, #4
}
2400f2dc:	b005      	add	sp, #20
2400f2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
2400f2e2:	893b      	ldrh	r3, [r7, #8]
2400f2e4:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
2400f2e8:	d8c4      	bhi.n	2400f274 <dir_next+0x24>
				dp->sect = 0; return FR_NO_FILE;
2400f2ea:	2300      	movs	r3, #0
2400f2ec:	2004      	movs	r0, #4
2400f2ee:	61e3      	str	r3, [r4, #28]
2400f2f0:	e7c6      	b.n	2400f280 <dir_next+0x30>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400f2f2:	2002      	movs	r0, #2
2400f2f4:	e7c4      	b.n	2400f280 <dir_next+0x30>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400f2f6:	2001      	movs	r0, #1
2400f2f8:	e7c2      	b.n	2400f280 <dir_next+0x30>
					if (!stretch) {								/* If no stretch, report EOT */
2400f2fa:	2e00      	cmp	r6, #0
2400f2fc:	d0f5      	beq.n	2400f2ea <dir_next+0x9a>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
2400f2fe:	69a1      	ldr	r1, [r4, #24]
2400f300:	4620      	mov	r0, r4
2400f302:	f7ff fb01 	bl	2400e908 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
2400f306:	4681      	mov	r9, r0
2400f308:	2800      	cmp	r0, #0
2400f30a:	d05a      	beq.n	2400f3c2 <dir_next+0x172>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
2400f30c:	2801      	cmp	r0, #1
2400f30e:	d0f0      	beq.n	2400f2f2 <dir_next+0xa2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
2400f310:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
2400f314:	d0ef      	beq.n	2400f2f6 <dir_next+0xa6>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400f316:	78fb      	ldrb	r3, [r7, #3]
2400f318:	2b00      	cmp	r3, #0
2400f31a:	d154      	bne.n	2400f3c6 <dir_next+0x176>
2400f31c:	f107 0b34 	add.w	fp, r7, #52	; 0x34
		*d++ = (BYTE)val;
2400f320:	f44f 7200 	mov.w	r2, #512	; 0x200
2400f324:	2100      	movs	r1, #0
2400f326:	4658      	mov	r0, fp
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
2400f328:	465e      	mov	r6, fp
		*d++ = (BYTE)val;
2400f32a:	f00a f9fb 	bl	24019724 <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400f32e:	69bb      	ldr	r3, [r7, #24]
	clst -= 2;
2400f330:	f1a9 0202 	sub.w	r2, r9, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400f334:	3b02      	subs	r3, #2
	clst -= 2;
2400f336:	9201      	str	r2, [sp, #4]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400f338:	429a      	cmp	r2, r3
2400f33a:	d267      	bcs.n	2400f40c <dir_next+0x1bc>
	return clst * fs->csize + fs->database;
2400f33c:	4611      	mov	r1, r2
2400f33e:	897b      	ldrh	r3, [r7, #10]
2400f340:	6afa      	ldr	r2, [r7, #44]	; 0x2c
2400f342:	fb01 2203 	mla	r2, r1, r3, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
2400f346:	633a      	str	r2, [r7, #48]	; 0x30
2400f348:	2b00      	cmp	r3, #0
2400f34a:	d036      	beq.n	2400f3ba <dir_next+0x16a>
2400f34c:	2300      	movs	r3, #0
						fs->wflag = 1;
2400f34e:	e9cd 6402 	strd	r6, r4, [sp, #8]
2400f352:	465e      	mov	r6, fp
2400f354:	461c      	mov	r4, r3
2400f356:	46ab      	mov	fp, r5
2400f358:	4615      	mov	r5, r2
2400f35a:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400f35e:	462a      	mov	r2, r5
2400f360:	4631      	mov	r1, r6
2400f362:	7878      	ldrb	r0, [r7, #1]
						fs->wflag = 1;
2400f364:	70fb      	strb	r3, [r7, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400f366:	2301      	movs	r3, #1
2400f368:	f7fe fc46 	bl	2400dbf8 <disk_write>
2400f36c:	2800      	cmp	r0, #0
2400f36e:	d1c2      	bne.n	2400f2f6 <dir_next+0xa6>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400f370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
2400f372:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400f374:	1aea      	subs	r2, r5, r3
2400f376:	69fb      	ldr	r3, [r7, #28]
2400f378:	429a      	cmp	r2, r3
2400f37a:	d212      	bcs.n	2400f3a2 <dir_next+0x152>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400f37c:	f897 a002 	ldrb.w	sl, [r7, #2]
2400f380:	f1ba 0f01 	cmp.w	sl, #1
2400f384:	d801      	bhi.n	2400f38a <dir_next+0x13a>
2400f386:	e00c      	b.n	2400f3a2 <dir_next+0x152>
					wsect += fs->fsize;
2400f388:	69fb      	ldr	r3, [r7, #28]
2400f38a:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400f38c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
2400f390:	2301      	movs	r3, #1
2400f392:	4631      	mov	r1, r6
2400f394:	462a      	mov	r2, r5
2400f396:	7878      	ldrb	r0, [r7, #1]
2400f398:	f7fe fc2e 	bl	2400dbf8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400f39c:	f1ba 0f01 	cmp.w	sl, #1
2400f3a0:	d1f2      	bne.n	2400f388 <dir_next+0x138>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
2400f3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2400f3a4:	3401      	adds	r4, #1
2400f3a6:	1c5d      	adds	r5, r3, #1
2400f3a8:	897b      	ldrh	r3, [r7, #10]
2400f3aa:	42a3      	cmp	r3, r4
2400f3ac:	633d      	str	r5, [r7, #48]	; 0x30
2400f3ae:	d8d4      	bhi.n	2400f35a <dir_next+0x10a>
2400f3b0:	462a      	mov	r2, r5
2400f3b2:	4623      	mov	r3, r4
2400f3b4:	465d      	mov	r5, fp
2400f3b6:	e9dd 6402 	ldrd	r6, r4, [sp, #8]
					fs->winsect -= n;							/* Restore window offset */
2400f3ba:	1ad2      	subs	r2, r2, r3
2400f3bc:	9901      	ldr	r1, [sp, #4]
2400f3be:	633a      	str	r2, [r7, #48]	; 0x30
2400f3c0:	e77d      	b.n	2400f2be <dir_next+0x6e>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
2400f3c2:	2007      	movs	r0, #7
2400f3c4:	e75c      	b.n	2400f280 <dir_next+0x30>
		wsect = fs->winsect;	/* Current sector number */
2400f3c6:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400f3ca:	f107 0b34 	add.w	fp, r7, #52	; 0x34
2400f3ce:	2301      	movs	r3, #1
2400f3d0:	7878      	ldrb	r0, [r7, #1]
2400f3d2:	4652      	mov	r2, sl
2400f3d4:	4659      	mov	r1, fp
2400f3d6:	f7fe fc0f 	bl	2400dbf8 <disk_write>
2400f3da:	2800      	cmp	r0, #0
2400f3dc:	d18b      	bne.n	2400f2f6 <dir_next+0xa6>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400f3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
2400f3e0:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400f3e2:	ebaa 0203 	sub.w	r2, sl, r3
2400f3e6:	69fb      	ldr	r3, [r7, #28]
2400f3e8:	429a      	cmp	r2, r3
2400f3ea:	d299      	bcs.n	2400f320 <dir_next+0xd0>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400f3ec:	78be      	ldrb	r6, [r7, #2]
2400f3ee:	2e01      	cmp	r6, #1
2400f3f0:	d801      	bhi.n	2400f3f6 <dir_next+0x1a6>
2400f3f2:	e795      	b.n	2400f320 <dir_next+0xd0>
2400f3f4:	69fb      	ldr	r3, [r7, #28]
					wsect += fs->fsize;
2400f3f6:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400f3f8:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400f3fa:	2301      	movs	r3, #1
2400f3fc:	4659      	mov	r1, fp
2400f3fe:	4652      	mov	r2, sl
2400f400:	7878      	ldrb	r0, [r7, #1]
2400f402:	f7fe fbf9 	bl	2400dbf8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400f406:	2e01      	cmp	r6, #1
2400f408:	d1f4      	bne.n	2400f3f4 <dir_next+0x1a4>
2400f40a:	e789      	b.n	2400f320 <dir_next+0xd0>
	return clst * fs->csize + fs->database;
2400f40c:	897b      	ldrh	r3, [r7, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400f40e:	2200      	movs	r2, #0
2400f410:	e799      	b.n	2400f346 <dir_next+0xf6>
2400f412:	bf00      	nop

2400f414 <dir_register>:
{
2400f414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2400f418:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
{
2400f41c:	b08d      	sub	sp, #52	; 0x34
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2400f41e:	f013 01a0 	ands.w	r1, r3, #160	; 0xa0
2400f422:	9304      	str	r3, [sp, #16]
2400f424:	f040 8312 	bne.w	2400fa4c <dir_register+0x638>
	FATFS *fs = dp->obj.fs;
2400f428:	6803      	ldr	r3, [r0, #0]
2400f42a:	4604      	mov	r4, r0
2400f42c:	9303      	str	r3, [sp, #12]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
2400f42e:	68db      	ldr	r3, [r3, #12]
2400f430:	881a      	ldrh	r2, [r3, #0]
2400f432:	2a00      	cmp	r2, #0
2400f434:	f000 8473 	beq.w	2400fd1e <dir_register+0x90a>
2400f438:	4689      	mov	r9, r1
2400f43a:	f833 2f02 	ldrh.w	r2, [r3, #2]!
2400f43e:	f109 0901 	add.w	r9, r9, #1
2400f442:	2a00      	cmp	r2, #0
2400f444:	d1f9      	bne.n	2400f43a <dir_register+0x26>
	mem_cpy(sn, dp->fn, 12);
2400f446:	f104 0624 	add.w	r6, r4, #36	; 0x24
			*d++ = *s++;
2400f44a:	ab0c      	add	r3, sp, #48	; 0x30
2400f44c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
2400f450:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
2400f454:	9b04      	ldr	r3, [sp, #16]
2400f456:	07dd      	lsls	r5, r3, #31
2400f458:	f140 8153 	bpl.w	2400f702 <dir_register+0x2ee>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
2400f45c:	2340      	movs	r3, #64	; 0x40
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f45e:	f8cd 9014 	str.w	r9, [sp, #20]
			*d++ = *s++;
2400f462:	f89d a02e 	ldrb.w	sl, [sp, #46]	; 0x2e
		for (n = 1; n < 100; n++) {
2400f466:	2701      	movs	r7, #1
			*d++ = *s++;
2400f468:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f46c:	f04f 0b20 	mov.w	fp, #32
				if (sr & 0x10000) sr ^= 0x11021;
2400f470:	4db1      	ldr	r5, [pc, #708]	; (2400f738 <dir_register+0x324>)
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f472:	f8dd 900c 	ldr.w	r9, [sp, #12]
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
2400f476:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
			*d++ = *s++;
2400f47a:	9002      	str	r0, [sp, #8]
2400f47c:	9101      	str	r1, [sp, #4]
2400f47e:	9b02      	ldr	r3, [sp, #8]
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
2400f480:	2f05      	cmp	r7, #5
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
2400f482:	f8d9 100c 	ldr.w	r1, [r9, #12]
			*d++ = *s++;
2400f486:	6263      	str	r3, [r4, #36]	; 0x24
2400f488:	9b01      	ldr	r3, [sp, #4]
2400f48a:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
2400f48e:	62a3      	str	r3, [r4, #40]	; 0x28
2400f490:	f884 a02e 	strb.w	sl, [r4, #46]	; 0x2e
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
2400f494:	f240 814e 	bls.w	2400f734 <dir_register+0x320>
		while (*lfn) {	/* Create a CRC */
2400f498:	880a      	ldrh	r2, [r1, #0]
2400f49a:	2a00      	cmp	r2, #0
2400f49c:	f000 814a 	beq.w	2400f734 <dir_register+0x320>
				sr = (sr << 1) + (wc & 1);
2400f4a0:	468c      	mov	ip, r1
2400f4a2:	f002 0101 	and.w	r1, r2, #1
				wc >>= 1;
2400f4a6:	0850      	lsrs	r0, r2, #1
				sr = (sr << 1) + (wc & 1);
2400f4a8:	eb01 0147 	add.w	r1, r1, r7, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f4ac:	e009      	b.n	2400f4c2 <dir_register+0xae>
				sr = (sr << 1) + (wc & 1);
2400f4ae:	f002 0101 	and.w	r1, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f4b2:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				wc >>= 1;
2400f4b6:	ea4f 0052 	mov.w	r0, r2, lsr #1
				sr = (sr << 1) + (wc & 1);
2400f4ba:	eb01 014e 	add.w	r1, r1, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f4be:	bf18      	it	ne
2400f4c0:	4069      	eorne	r1, r5
				sr = (sr << 1) + (wc & 1);
2400f4c2:	f000 0e01 	and.w	lr, r0, #1
				wc >>= 1;
2400f4c6:	0893      	lsrs	r3, r2, #2
2400f4c8:	08d0      	lsrs	r0, r2, #3
				sr = (sr << 1) + (wc & 1);
2400f4ca:	eb0e 0e41 	add.w	lr, lr, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f4ce:	0409      	lsls	r1, r1, #16
				sr = (sr << 1) + (wc & 1);
2400f4d0:	f003 0301 	and.w	r3, r3, #1
2400f4d4:	f000 0001 	and.w	r0, r0, #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f4d8:	bf48      	it	mi
2400f4da:	ea8e 0e05 	eormi.w	lr, lr, r5
				wc >>= 1;
2400f4de:	0911      	lsrs	r1, r2, #4
				sr = (sr << 1) + (wc & 1);
2400f4e0:	eb03 034e 	add.w	r3, r3, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f4e4:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				sr = (sr << 1) + (wc & 1);
2400f4e8:	f001 0101 	and.w	r1, r1, #1
				wc >>= 1;
2400f4ec:	ea4f 3ed2 	mov.w	lr, r2, lsr #15
				if (sr & 0x10000) sr ^= 0x11021;
2400f4f0:	bf18      	it	ne
2400f4f2:	406b      	eorne	r3, r5
				sr = (sr << 1) + (wc & 1);
2400f4f4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f4f8:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2400f4fa:	ea4f 1352 	mov.w	r3, r2, lsr #5
				if (sr & 0x10000) sr ^= 0x11021;
2400f4fe:	bf48      	it	mi
2400f500:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
2400f502:	f003 0301 	and.w	r3, r3, #1
2400f506:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f50a:	0400      	lsls	r0, r0, #16
				wc >>= 1;
2400f50c:	ea4f 1092 	mov.w	r0, r2, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
2400f510:	bf48      	it	mi
2400f512:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
2400f514:	f000 0001 	and.w	r0, r0, #1
2400f518:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f51c:	0409      	lsls	r1, r1, #16
				wc >>= 1;
2400f51e:	ea4f 11d2 	mov.w	r1, r2, lsr #7
				if (sr & 0x10000) sr ^= 0x11021;
2400f522:	bf48      	it	mi
2400f524:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
2400f526:	f001 0101 	and.w	r1, r1, #1
2400f52a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f52e:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2400f530:	ea4f 2312 	mov.w	r3, r2, lsr #8
				if (sr & 0x10000) sr ^= 0x11021;
2400f534:	bf48      	it	mi
2400f536:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
2400f538:	f003 0301 	and.w	r3, r3, #1
2400f53c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f540:	0400      	lsls	r0, r0, #16
				wc >>= 1;
2400f542:	ea4f 2052 	mov.w	r0, r2, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
2400f546:	bf48      	it	mi
2400f548:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
2400f54a:	f000 0001 	and.w	r0, r0, #1
2400f54e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f552:	0409      	lsls	r1, r1, #16
				wc >>= 1;
2400f554:	ea4f 2192 	mov.w	r1, r2, lsr #10
				if (sr & 0x10000) sr ^= 0x11021;
2400f558:	bf48      	it	mi
2400f55a:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
2400f55c:	f001 0101 	and.w	r1, r1, #1
2400f560:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f564:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2400f566:	ea4f 23d2 	mov.w	r3, r2, lsr #11
				if (sr & 0x10000) sr ^= 0x11021;
2400f56a:	bf48      	it	mi
2400f56c:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
2400f56e:	f003 0301 	and.w	r3, r3, #1
2400f572:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f576:	0400      	lsls	r0, r0, #16
				wc >>= 1;
2400f578:	ea4f 3012 	mov.w	r0, r2, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
2400f57c:	bf48      	it	mi
2400f57e:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
2400f580:	f000 0001 	and.w	r0, r0, #1
2400f584:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f588:	0409      	lsls	r1, r1, #16
				wc >>= 1;
2400f58a:	ea4f 3152 	mov.w	r1, r2, lsr #13
				if (sr & 0x10000) sr ^= 0x11021;
2400f58e:	bf48      	it	mi
2400f590:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
2400f592:	f001 0101 	and.w	r1, r1, #1
2400f596:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f59a:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2400f59c:	ea4f 3392 	mov.w	r3, r2, lsr #14
				if (sr & 0x10000) sr ^= 0x11021;
2400f5a0:	bf48      	it	mi
2400f5a2:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
2400f5a4:	f003 0301 	and.w	r3, r3, #1
2400f5a8:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f5ac:	0400      	lsls	r0, r0, #16
2400f5ae:	bf48      	it	mi
2400f5b0:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
2400f5b2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f5b6:	040a      	lsls	r2, r1, #16
		while (*lfn) {	/* Create a CRC */
2400f5b8:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
				if (sr & 0x10000) sr ^= 0x11021;
2400f5bc:	bf48      	it	mi
2400f5be:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
2400f5c0:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f5c4:	041b      	lsls	r3, r3, #16
2400f5c6:	bf48      	it	mi
2400f5c8:	ea8e 0e05 	eormi.w	lr, lr, r5
		while (*lfn) {	/* Create a CRC */
2400f5cc:	2a00      	cmp	r2, #0
2400f5ce:	f47f af6e 	bne.w	2400f4ae <dir_register+0x9a>
		c = (BYTE)((seq % 16) + '0');
2400f5d2:	f00e 010f 	and.w	r1, lr, #15
2400f5d6:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2400f5da:	2a39      	cmp	r2, #57	; 0x39
2400f5dc:	bf88      	it	hi
2400f5de:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2400f5e2:	f1be 0f0f 	cmp.w	lr, #15
		seq /= 16;
2400f5e6:	ea4f 111e 	mov.w	r1, lr, lsr #4
		ns[i--] = c;
2400f5ea:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	} while (seq);
2400f5ee:	f240 8191 	bls.w	2400f914 <dir_register+0x500>
		c = (BYTE)((seq % 16) + '0');
2400f5f2:	f001 000f 	and.w	r0, r1, #15
2400f5f6:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
2400f5fa:	2a39      	cmp	r2, #57	; 0x39
2400f5fc:	bf88      	it	hi
2400f5fe:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
2400f602:	290f      	cmp	r1, #15
		seq /= 16;
2400f604:	ea4f 201e 	mov.w	r0, lr, lsr #8
		ns[i--] = c;
2400f608:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
	} while (seq);
2400f60c:	f240 8188 	bls.w	2400f920 <dir_register+0x50c>
		c = (BYTE)((seq % 16) + '0');
2400f610:	f000 010f 	and.w	r1, r0, #15
2400f614:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2400f618:	2a39      	cmp	r2, #57	; 0x39
2400f61a:	bf88      	it	hi
2400f61c:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2400f620:	280f      	cmp	r0, #15
		seq /= 16;
2400f622:	ea4f 311e 	mov.w	r1, lr, lsr #12
		ns[i--] = c;
2400f626:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	} while (seq);
2400f62a:	f240 8188 	bls.w	2400f93e <dir_register+0x52a>
		c = (BYTE)((seq % 16) + '0');
2400f62e:	f001 000f 	and.w	r0, r1, #15
2400f632:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
2400f636:	2a39      	cmp	r2, #57	; 0x39
2400f638:	bf88      	it	hi
2400f63a:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
2400f63e:	290f      	cmp	r1, #15
		seq /= 16;
2400f640:	ea4f 401e 	mov.w	r0, lr, lsr #16
		ns[i--] = c;
2400f644:	f88d 2020 	strb.w	r2, [sp, #32]
	} while (seq);
2400f648:	f240 817f 	bls.w	2400f94a <dir_register+0x536>
		c = (BYTE)((seq % 16) + '0');
2400f64c:	f000 010f 	and.w	r1, r0, #15
2400f650:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2400f654:	2a39      	cmp	r2, #57	; 0x39
2400f656:	bf88      	it	hi
2400f658:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2400f65c:	280f      	cmp	r0, #15
		seq /= 16;
2400f65e:	ea4f 511e 	mov.w	r1, lr, lsr #20
		ns[i--] = c;
2400f662:	f88d 201f 	strb.w	r2, [sp, #31]
	} while (seq);
2400f666:	f240 8176 	bls.w	2400f956 <dir_register+0x542>
		c = (BYTE)((seq % 16) + '0');
2400f66a:	f001 000f 	and.w	r0, r1, #15
		seq /= 16;
2400f66e:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
		c = (BYTE)((seq % 16) + '0');
2400f672:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
2400f676:	2a39      	cmp	r2, #57	; 0x39
2400f678:	bf88      	it	hi
2400f67a:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
2400f67e:	290f      	cmp	r1, #15
		ns[i--] = c;
2400f680:	f88d 201e 	strb.w	r2, [sp, #30]
	} while (seq);
2400f684:	f240 816d 	bls.w	2400f962 <dir_register+0x54e>
		c = (BYTE)((seq % 16) + '0');
2400f688:	f00e 010f 	and.w	r1, lr, #15
2400f68c:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2400f690:	2a39      	cmp	r2, #57	; 0x39
2400f692:	bf88      	it	hi
2400f694:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2400f698:	f1be 0f0f 	cmp.w	lr, #15
		ns[i--] = c;
2400f69c:	f88d 201d 	strb.w	r2, [sp, #29]
	} while (seq);
2400f6a0:	f240 8144 	bls.w	2400f92c <dir_register+0x518>
		ns[i--] = c;
2400f6a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
2400f6a8:	f104 0123 	add.w	r1, r4, #35	; 0x23
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400f6ac:	2200      	movs	r2, #0
2400f6ae:	e002      	b.n	2400f6b6 <dir_register+0x2a2>
2400f6b0:	3201      	adds	r2, #1
2400f6b2:	4562      	cmp	r2, ip
2400f6b4:	d003      	beq.n	2400f6be <dir_register+0x2aa>
2400f6b6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
2400f6ba:	2b20      	cmp	r3, #32
2400f6bc:	d1f8      	bne.n	2400f6b0 <dir_register+0x29c>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f6be:	f1bc 0f07 	cmp.w	ip, #7
2400f6c2:	d93d      	bls.n	2400f740 <dir_register+0x32c>
2400f6c4:	1c50      	adds	r0, r2, #1
2400f6c6:	f806 b002 	strb.w	fp, [r6, r2]
	} while (j < 8);
2400f6ca:	2807      	cmp	r0, #7
2400f6cc:	d809      	bhi.n	2400f6e2 <dir_register+0x2ce>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f6ce:	1c42      	adds	r2, r0, #1
2400f6d0:	2120      	movs	r1, #32
2400f6d2:	2a08      	cmp	r2, #8
2400f6d4:	f1c0 0208 	rsb	r2, r0, #8
2400f6d8:	4430      	add	r0, r6
2400f6da:	bf88      	it	hi
2400f6dc:	2201      	movhi	r2, #1
2400f6de:	f00a f821 	bl	24019724 <memset>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2400f6e2:	4620      	mov	r0, r4
2400f6e4:	f7ff fa7c 	bl	2400ebe0 <dir_find>
2400f6e8:	4601      	mov	r1, r0
			if (res != FR_OK) break;
2400f6ea:	2800      	cmp	r0, #0
2400f6ec:	f040 80a6 	bne.w	2400f83c <dir_register+0x428>
		for (n = 1; n < 100; n++) {
2400f6f0:	3701      	adds	r7, #1
2400f6f2:	2f64      	cmp	r7, #100	; 0x64
2400f6f4:	f47f aec3 	bne.w	2400f47e <dir_register+0x6a>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
2400f6f8:	2107      	movs	r1, #7
}
2400f6fa:	4608      	mov	r0, r1
2400f6fc:	b00d      	add	sp, #52	; 0x34
2400f6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400f702:	f013 0802 	ands.w	r8, r3, #2
2400f706:	9d03      	ldr	r5, [sp, #12]
2400f708:	f000 80a5 	beq.w	2400f856 <dir_register+0x442>
2400f70c:	4a0b      	ldr	r2, [pc, #44]	; (2400f73c <dir_register+0x328>)
2400f70e:	f109 030c 	add.w	r3, r9, #12
	res = dir_sdi(dp, 0);
2400f712:	2100      	movs	r1, #0
2400f714:	4620      	mov	r0, r4
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400f716:	fba2 2303 	umull	r2, r3, r2, r3
2400f71a:	ea4f 0893 	mov.w	r8, r3, lsr #2
	res = dir_sdi(dp, 0);
2400f71e:	f7ff f9b3 	bl	2400ea88 <dir_sdi>
	if (res == FR_OK) {
2400f722:	4601      	mov	r1, r0
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400f724:	f108 0b01 	add.w	fp, r8, #1
	if (res == FR_OK) {
2400f728:	2800      	cmp	r0, #0
2400f72a:	f000 809e 	beq.w	2400f86a <dir_register+0x456>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
2400f72e:	2904      	cmp	r1, #4
2400f730:	d0e2      	beq.n	2400f6f8 <dir_register+0x2e4>
2400f732:	e7e2      	b.n	2400f6fa <dir_register+0x2e6>
2400f734:	46be      	mov	lr, r7
2400f736:	e74c      	b.n	2400f5d2 <dir_register+0x1be>
2400f738:	00011021 	.word	0x00011021
2400f73c:	4ec4ec4f 	.word	0x4ec4ec4f
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f740:	f10c 0330 	add.w	r3, ip, #48	; 0x30
2400f744:	f10c 0c01 	add.w	ip, ip, #1
2400f748:	eb0d 0103 	add.w	r1, sp, r3
2400f74c:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400f750:	54b1      	strb	r1, [r6, r2]
2400f752:	3201      	adds	r2, #1
	} while (j < 8);
2400f754:	2a07      	cmp	r2, #7
2400f756:	d8c4      	bhi.n	2400f6e2 <dir_register+0x2ce>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f758:	f1bc 0f08 	cmp.w	ip, #8
2400f75c:	f000 80a3 	beq.w	2400f8a6 <dir_register+0x492>
2400f760:	f10c 0330 	add.w	r3, ip, #48	; 0x30
	} while (j < 8);
2400f764:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f766:	f102 0001 	add.w	r0, r2, #1
2400f76a:	eb0d 0103 	add.w	r1, sp, r3
2400f76e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400f772:	54b1      	strb	r1, [r6, r2]
2400f774:	f10c 0101 	add.w	r1, ip, #1
	} while (j < 8);
2400f778:	d0b3      	beq.n	2400f6e2 <dir_register+0x2ce>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f77a:	2908      	cmp	r1, #8
2400f77c:	f000 809b 	beq.w	2400f8b6 <dir_register+0x4a2>
2400f780:	f10c 0331 	add.w	r3, ip, #49	; 0x31
	} while (j < 8);
2400f784:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f786:	eb0d 0103 	add.w	r1, sp, r3
2400f78a:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400f78e:	5431      	strb	r1, [r6, r0]
2400f790:	f10c 0102 	add.w	r1, ip, #2
2400f794:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
2400f798:	d0a3      	beq.n	2400f6e2 <dir_register+0x2ce>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f79a:	2908      	cmp	r1, #8
2400f79c:	f000 8093 	beq.w	2400f8c6 <dir_register+0x4b2>
2400f7a0:	f10c 0332 	add.w	r3, ip, #50	; 0x32
	} while (j < 8);
2400f7a4:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f7a6:	eb0d 0103 	add.w	r1, sp, r3
2400f7aa:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400f7ae:	5431      	strb	r1, [r6, r0]
2400f7b0:	f10c 0103 	add.w	r1, ip, #3
2400f7b4:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
2400f7b8:	d093      	beq.n	2400f6e2 <dir_register+0x2ce>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f7ba:	2908      	cmp	r1, #8
2400f7bc:	f000 808b 	beq.w	2400f8d6 <dir_register+0x4c2>
2400f7c0:	f10c 0333 	add.w	r3, ip, #51	; 0x33
	} while (j < 8);
2400f7c4:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f7c6:	eb0d 0103 	add.w	r1, sp, r3
2400f7ca:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400f7ce:	5431      	strb	r1, [r6, r0]
2400f7d0:	f10c 0104 	add.w	r1, ip, #4
2400f7d4:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
2400f7d8:	d083      	beq.n	2400f6e2 <dir_register+0x2ce>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f7da:	2908      	cmp	r1, #8
2400f7dc:	f000 8083 	beq.w	2400f8e6 <dir_register+0x4d2>
2400f7e0:	f10c 0334 	add.w	r3, ip, #52	; 0x34
	} while (j < 8);
2400f7e4:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f7e6:	eb0d 0103 	add.w	r1, sp, r3
2400f7ea:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400f7ee:	5431      	strb	r1, [r6, r0]
2400f7f0:	f10c 0105 	add.w	r1, ip, #5
2400f7f4:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
2400f7f8:	f43f af73 	beq.w	2400f6e2 <dir_register+0x2ce>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f7fc:	2908      	cmp	r1, #8
2400f7fe:	d07a      	beq.n	2400f8f6 <dir_register+0x4e2>
2400f800:	f10c 0335 	add.w	r3, ip, #53	; 0x35
	} while (j < 8);
2400f804:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f806:	eb0d 0103 	add.w	r1, sp, r3
2400f80a:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400f80e:	5431      	strb	r1, [r6, r0]
2400f810:	f102 0106 	add.w	r1, r2, #6
	} while (j < 8);
2400f814:	f43f af65 	beq.w	2400f6e2 <dir_register+0x2ce>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f818:	f1bc 0f01 	cmp.w	ip, #1
2400f81c:	d173      	bne.n	2400f906 <dir_register+0x4f2>
2400f81e:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
	} while (j < 8);
2400f822:	2906      	cmp	r1, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f824:	5472      	strb	r2, [r6, r1]
	} while (j < 8);
2400f826:	f47f af5c 	bne.w	2400f6e2 <dir_register+0x2ce>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2400f82a:	4620      	mov	r0, r4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f82c:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2400f830:	f7ff f9d6 	bl	2400ebe0 <dir_find>
2400f834:	4601      	mov	r1, r0
			if (res != FR_OK) break;
2400f836:	2800      	cmp	r0, #0
2400f838:	f43f af5a 	beq.w	2400f6f0 <dir_register+0x2dc>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
2400f83c:	2804      	cmp	r0, #4
2400f83e:	f8dd 9014 	ldr.w	r9, [sp, #20]
2400f842:	f47f af5a 	bne.w	2400f6fa <dir_register+0x2e6>
		dp->fn[NSFLAG] = sn[NSFLAG];
2400f846:	9b04      	ldr	r3, [sp, #16]
	FATFS *fs = dp->obj.fs;
2400f848:	6825      	ldr	r5, [r4, #0]
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400f84a:	f013 0802 	ands.w	r8, r3, #2
		dp->fn[NSFLAG] = sn[NSFLAG];
2400f84e:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400f852:	f47f af5b 	bne.w	2400f70c <dir_register+0x2f8>
	res = dir_sdi(dp, 0);
2400f856:	2100      	movs	r1, #0
2400f858:	4620      	mov	r0, r4
2400f85a:	f7ff f915 	bl	2400ea88 <dir_sdi>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400f85e:	f04f 0b01 	mov.w	fp, #1
	if (res == FR_OK) {
2400f862:	4601      	mov	r1, r0
2400f864:	2800      	cmp	r0, #0
2400f866:	f47f af62 	bne.w	2400f72e <dir_register+0x31a>
		n = 0;
2400f86a:	4607      	mov	r7, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400f86c:	f105 0a34 	add.w	sl, r5, #52	; 0x34
2400f870:	f8cd 8004 	str.w	r8, [sp, #4]
			res = move_window(fs, dp->sect);
2400f874:	69e6      	ldr	r6, [r4, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
2400f876:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
2400f87a:	4546      	cmp	r6, r8
2400f87c:	d078      	beq.n	2400f970 <dir_register+0x55c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400f87e:	78eb      	ldrb	r3, [r5, #3]
2400f880:	2b00      	cmp	r3, #0
2400f882:	f040 80bb 	bne.w	2400f9fc <dir_register+0x5e8>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400f886:	2301      	movs	r3, #1
2400f888:	4632      	mov	r2, r6
2400f88a:	4651      	mov	r1, sl
2400f88c:	7868      	ldrb	r0, [r5, #1]
2400f88e:	f7fe f9a3 	bl	2400dbd8 <disk_read>
2400f892:	2800      	cmp	r0, #0
2400f894:	d06b      	beq.n	2400f96e <dir_register+0x55a>
				res = FR_DISK_ERR;
2400f896:	2101      	movs	r1, #1
			fs->winsect = sector;
2400f898:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
2400f89c:	4608      	mov	r0, r1
			fs->winsect = sector;
2400f89e:	632b      	str	r3, [r5, #48]	; 0x30
}
2400f8a0:	b00d      	add	sp, #52	; 0x34
2400f8a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} while (j < 8);
2400f8a6:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f8a8:	f102 0001 	add.w	r0, r2, #1
2400f8ac:	f806 b002 	strb.w	fp, [r6, r2]
	} while (j < 8);
2400f8b0:	f47f af0d 	bne.w	2400f6ce <dir_register+0x2ba>
2400f8b4:	e715      	b.n	2400f6e2 <dir_register+0x2ce>
2400f8b6:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f8b8:	f806 b000 	strb.w	fp, [r6, r0]
2400f8bc:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
2400f8c0:	f47f af05 	bne.w	2400f6ce <dir_register+0x2ba>
2400f8c4:	e70d      	b.n	2400f6e2 <dir_register+0x2ce>
2400f8c6:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f8c8:	f806 b000 	strb.w	fp, [r6, r0]
2400f8cc:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
2400f8d0:	f47f aefd 	bne.w	2400f6ce <dir_register+0x2ba>
2400f8d4:	e705      	b.n	2400f6e2 <dir_register+0x2ce>
2400f8d6:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f8d8:	f806 b000 	strb.w	fp, [r6, r0]
2400f8dc:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
2400f8e0:	f47f aef5 	bne.w	2400f6ce <dir_register+0x2ba>
2400f8e4:	e6fd      	b.n	2400f6e2 <dir_register+0x2ce>
2400f8e6:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f8e8:	f806 b000 	strb.w	fp, [r6, r0]
2400f8ec:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
2400f8f0:	f47f aeed 	bne.w	2400f6ce <dir_register+0x2ba>
2400f8f4:	e6f5      	b.n	2400f6e2 <dir_register+0x2ce>
2400f8f6:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f8f8:	f806 b000 	strb.w	fp, [r6, r0]
2400f8fc:	f102 0006 	add.w	r0, r2, #6
	} while (j < 8);
2400f900:	f47f aee5 	bne.w	2400f6ce <dir_register+0x2ba>
2400f904:	e6ed      	b.n	2400f6e2 <dir_register+0x2ce>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f906:	f806 b001 	strb.w	fp, [r6, r1]
	} while (j < 8);
2400f90a:	2a00      	cmp	r2, #0
2400f90c:	f47f aee9 	bne.w	2400f6e2 <dir_register+0x2ce>
2400f910:	2007      	movs	r0, #7
2400f912:	e6dc      	b.n	2400f6ce <dir_register+0x2ba>
	ns[i] = '~';
2400f914:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400f916:	f04f 0c06 	mov.w	ip, #6
	ns[i] = '~';
2400f91a:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400f91e:	e6c3      	b.n	2400f6a8 <dir_register+0x294>
	ns[i] = '~';
2400f920:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400f922:	f04f 0c05 	mov.w	ip, #5
	ns[i] = '~';
2400f926:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400f92a:	e6bd      	b.n	2400f6a8 <dir_register+0x294>
	ns[i] = '~';
2400f92c:	227e      	movs	r2, #126	; 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f92e:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
2400f932:	f88d 201c 	strb.w	r2, [sp, #28]
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f936:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
2400f93a:	4662      	mov	r2, ip
2400f93c:	e710      	b.n	2400f760 <dir_register+0x34c>
	ns[i] = '~';
2400f93e:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400f940:	f04f 0c04 	mov.w	ip, #4
	ns[i] = '~';
2400f944:	f88d 2020 	strb.w	r2, [sp, #32]
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400f948:	e6ae      	b.n	2400f6a8 <dir_register+0x294>
	ns[i] = '~';
2400f94a:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400f94c:	f04f 0c03 	mov.w	ip, #3
	ns[i] = '~';
2400f950:	f88d 201f 	strb.w	r2, [sp, #31]
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400f954:	e6a8      	b.n	2400f6a8 <dir_register+0x294>
	ns[i] = '~';
2400f956:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400f958:	f04f 0c02 	mov.w	ip, #2
	ns[i] = '~';
2400f95c:	f88d 201e 	strb.w	r2, [sp, #30]
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400f960:	e6a2      	b.n	2400f6a8 <dir_register+0x294>
	ns[i] = '~';
2400f962:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400f964:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
2400f968:	f88d 201d 	strb.w	r2, [sp, #29]
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400f96c:	e69c      	b.n	2400f6a8 <dir_register+0x294>
			fs->winsect = sector;
2400f96e:	632e      	str	r6, [r5, #48]	; 0x30
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
2400f970:	6a23      	ldr	r3, [r4, #32]
2400f972:	781b      	ldrb	r3, [r3, #0]
2400f974:	2be5      	cmp	r3, #229	; 0xe5
2400f976:	d00d      	beq.n	2400f994 <dir_register+0x580>
2400f978:	fab3 f283 	clz	r2, r3
2400f97c:	0952      	lsrs	r2, r2, #5
2400f97e:	b14b      	cbz	r3, 2400f994 <dir_register+0x580>
				n = 0;					/* Not a blank entry. Restart to search */
2400f980:	4617      	mov	r7, r2
			res = dir_next(dp, 1);
2400f982:	2101      	movs	r1, #1
2400f984:	4620      	mov	r0, r4
2400f986:	f7ff fc63 	bl	2400f250 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
2400f98a:	2800      	cmp	r0, #0
2400f98c:	f43f af72 	beq.w	2400f874 <dir_register+0x460>
2400f990:	4601      	mov	r1, r0
2400f992:	e6cc      	b.n	2400f72e <dir_register+0x31a>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
2400f994:	3701      	adds	r7, #1
2400f996:	45bb      	cmp	fp, r7
2400f998:	d1f3      	bne.n	2400f982 <dir_register+0x56e>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
2400f99a:	f8dd 8004 	ldr.w	r8, [sp, #4]
2400f99e:	f1b8 0f00 	cmp.w	r8, #0
2400f9a2:	d155      	bne.n	2400fa50 <dir_register+0x63c>
		res = move_window(fs, dp->sect);
2400f9a4:	69e1      	ldr	r1, [r4, #28]
2400f9a6:	9803      	ldr	r0, [sp, #12]
2400f9a8:	f7fe fad0 	bl	2400df4c <move_window>
		if (res == FR_OK) {
2400f9ac:	4601      	mov	r1, r0
2400f9ae:	2800      	cmp	r0, #0
2400f9b0:	f47f aea3 	bne.w	2400f6fa <dir_register+0x2e6>
		*d++ = (BYTE)val;
2400f9b4:	2220      	movs	r2, #32
2400f9b6:	9001      	str	r0, [sp, #4]
2400f9b8:	6a20      	ldr	r0, [r4, #32]
2400f9ba:	f009 feb3 	bl	24019724 <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
2400f9be:	6a23      	ldr	r3, [r4, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
2400f9c0:	f104 0225 	add.w	r2, r4, #37	; 0x25
2400f9c4:	9901      	ldr	r1, [sp, #4]
2400f9c6:	1a9a      	subs	r2, r3, r2
2400f9c8:	2a02      	cmp	r2, #2
2400f9ca:	f240 81ab 	bls.w	2400fd24 <dir_register+0x910>
			*d++ = *s++;
2400f9ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
2400f9d0:	601a      	str	r2, [r3, #0]
2400f9d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
2400f9d4:	605a      	str	r2, [r3, #4]
2400f9d6:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
2400f9da:	721a      	strb	r2, [r3, #8]
2400f9dc:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
2400f9e0:	725a      	strb	r2, [r3, #9]
2400f9e2:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
2400f9e6:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
2400f9e8:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
2400f9ea:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
2400f9ee:	6a20      	ldr	r0, [r4, #32]
2400f9f0:	f003 0318 	and.w	r3, r3, #24
2400f9f4:	7303      	strb	r3, [r0, #12]
			fs->wflag = 1;
2400f9f6:	9b03      	ldr	r3, [sp, #12]
2400f9f8:	70da      	strb	r2, [r3, #3]
2400f9fa:	e67e      	b.n	2400f6fa <dir_register+0x2e6>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400f9fc:	2301      	movs	r3, #1
2400f9fe:	4642      	mov	r2, r8
2400fa00:	4651      	mov	r1, sl
2400fa02:	7868      	ldrb	r0, [r5, #1]
2400fa04:	f7fe f8f8 	bl	2400dbf8 <disk_write>
2400fa08:	b9d8      	cbnz	r0, 2400fa42 <dir_register+0x62e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400fa0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
			fs->wflag = 0;
2400fa0c:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400fa0e:	eba8 0103 	sub.w	r1, r8, r3
2400fa12:	69eb      	ldr	r3, [r5, #28]
2400fa14:	4299      	cmp	r1, r3
2400fa16:	f4bf af36 	bcs.w	2400f886 <dir_register+0x472>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400fa1a:	f895 9002 	ldrb.w	r9, [r5, #2]
2400fa1e:	f1b9 0f01 	cmp.w	r9, #1
2400fa22:	d801      	bhi.n	2400fa28 <dir_register+0x614>
2400fa24:	e72f      	b.n	2400f886 <dir_register+0x472>
					wsect += fs->fsize;
2400fa26:	69eb      	ldr	r3, [r5, #28]
2400fa28:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400fa2a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
2400fa2e:	2301      	movs	r3, #1
2400fa30:	4651      	mov	r1, sl
2400fa32:	4642      	mov	r2, r8
2400fa34:	7868      	ldrb	r0, [r5, #1]
2400fa36:	f7fe f8df 	bl	2400dbf8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400fa3a:	f1b9 0f01 	cmp.w	r9, #1
2400fa3e:	d1f2      	bne.n	2400fa26 <dir_register+0x612>
2400fa40:	e721      	b.n	2400f886 <dir_register+0x472>
2400fa42:	2101      	movs	r1, #1
}
2400fa44:	4608      	mov	r0, r1
2400fa46:	b00d      	add	sp, #52	; 0x34
2400fa48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2400fa4c:	2106      	movs	r1, #6
2400fa4e:	e654      	b.n	2400f6fa <dir_register+0x2e6>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
2400fa50:	6961      	ldr	r1, [r4, #20]
2400fa52:	4620      	mov	r0, r4
2400fa54:	eba1 1148 	sub.w	r1, r1, r8, lsl #5
2400fa58:	f7ff f816 	bl	2400ea88 <dir_sdi>
		if (res == FR_OK) {
2400fa5c:	4601      	mov	r1, r0
2400fa5e:	2800      	cmp	r0, #0
2400fa60:	f47f ae4b 	bne.w	2400f6fa <dir_register+0x2e6>
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400fa64:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
2400fa68:	260f      	movs	r6, #15
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fa6a:	f64f 77fd 	movw	r7, #65533	; 0xfffd
	*ptr++ = (BYTE)val; val >>= 8;
2400fa6e:	f64f 79ff 	movw	r9, #65535	; 0xffff
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400fa72:	01d3      	lsls	r3, r2, #7
	*ptr++ = (BYTE)val; val >>= 8;
2400fa74:	f8dd a00c 	ldr.w	sl, [sp, #12]
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400fa78:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
2400fa7c:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
2400fa80:	4413      	add	r3, r2
2400fa82:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400fa86:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400fa8a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
2400fa8e:	fa53 f282 	uxtab	r2, r3, r2
2400fa92:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400fa96:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400fa9a:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
2400fa9e:	fa52 f383 	uxtab	r3, r2, r3
2400faa2:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400faa6:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400faaa:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
2400faae:	fa53 f282 	uxtab	r2, r3, r2
2400fab2:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400fab6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400faba:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
2400fabe:	fa52 f383 	uxtab	r3, r2, r3
2400fac2:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400fac6:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400faca:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
2400face:	fa53 f282 	uxtab	r2, r3, r2
2400fad2:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400fad6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400fada:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
2400fade:	fa52 f383 	uxtab	r3, r2, r3
2400fae2:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400fae6:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400faea:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
2400faee:	fa53 f282 	uxtab	r2, r3, r2
2400faf2:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400faf6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400fafa:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
2400fafe:	fa52 f383 	uxtab	r3, r2, r3
2400fb02:	f3c3 0546 	ubfx	r5, r3, #1, #7
2400fb06:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
2400fb0a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
2400fb0e:	fa53 f585 	uxtab	r5, r3, r5
2400fb12:	b2ed      	uxtb	r5, r5
	} while (--n);
2400fb14:	e02a      	b.n	2400fb6c <dir_register+0x758>
	*ptr++ = (BYTE)val; val >>= 8;
2400fb16:	f8a3 9003 	strh.w	r9, [r3, #3]
2400fb1a:	f8a3 9005 	strh.w	r9, [r3, #5]
2400fb1e:	f8a3 9007 	strh.w	r9, [r3, #7]
2400fb22:	f8a3 9009 	strh.w	r9, [r3, #9]
2400fb26:	f8a3 900e 	strh.w	r9, [r3, #14]
2400fb2a:	f8a3 9010 	strh.w	r9, [r3, #16]
2400fb2e:	f8a3 9012 	strh.w	r9, [r3, #18]
2400fb32:	f8a3 9014 	strh.w	r9, [r3, #20]
2400fb36:	f8a3 9016 	strh.w	r9, [r3, #22]
2400fb3a:	f8a3 9018 	strh.w	r9, [r3, #24]
2400fb3e:	f8a3 901c 	strh.w	r9, [r3, #28]
2400fb42:	f8a3 901e 	strh.w	r9, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
2400fb46:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
2400fb4a:	f883 c000 	strb.w	ip, [r3]
				fs->wflag = 1;
2400fb4e:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
2400fb50:	2100      	movs	r1, #0
2400fb52:	4620      	mov	r0, r4
				fs->wflag = 1;
2400fb54:	f88a 3003 	strb.w	r3, [sl, #3]
				res = dir_next(dp, 0);	/* Next entry */
2400fb58:	f7ff fb7a 	bl	2400f250 <dir_next>
			} while (res == FR_OK && --nent);
2400fb5c:	4601      	mov	r1, r0
2400fb5e:	2800      	cmp	r0, #0
2400fb60:	f47f adcb 	bne.w	2400f6fa <dir_register+0x2e6>
2400fb64:	f1b8 0801 	subs.w	r8, r8, #1
2400fb68:	f43f af1c 	beq.w	2400f9a4 <dir_register+0x590>
				res = move_window(fs, dp->sect);
2400fb6c:	69e1      	ldr	r1, [r4, #28]
2400fb6e:	4650      	mov	r0, sl
2400fb70:	f7fe f9ec 	bl	2400df4c <move_window>
2400fb74:	4601      	mov	r1, r0
				if (res != FR_OK) break;
2400fb76:	2800      	cmp	r0, #0
2400fb78:	f47f adbf 	bne.w	2400f6fa <dir_register+0x2e6>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
2400fb7c:	fa5f fc88 	uxtb.w	ip, r8
2400fb80:	6a23      	ldr	r3, [r4, #32]
2400fb82:	f8da 100c 	ldr.w	r1, [sl, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
2400fb86:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400fb8a:	8358      	strh	r0, [r3, #26]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
2400fb8c:	735d      	strb	r5, [r3, #13]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
2400fb8e:	eb02 0042 	add.w	r0, r2, r2, lsl #1
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
2400fb92:	f8a3 600b 	strh.w	r6, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
2400fb96:	eb02 0280 	add.w	r2, r2, r0, lsl #2
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fb9a:	f831 0012 	ldrh.w	r0, [r1, r2, lsl #1]
2400fb9e:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400fba2:	7058      	strb	r0, [r3, #1]
2400fba4:	0a00      	lsrs	r0, r0, #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fba6:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
2400fbaa:	7098      	strb	r0, [r3, #2]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fbac:	0050      	lsls	r0, r2, #1
2400fbae:	45be      	cmp	lr, r7
2400fbb0:	d8b1      	bhi.n	2400fb16 <dir_register+0x702>
2400fbb2:	3201      	adds	r2, #1
2400fbb4:	f831 e012 	ldrh.w	lr, [r1, r2, lsl #1]
2400fbb8:	0052      	lsls	r2, r2, #1
2400fbba:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400fbbe:	f883 e003 	strb.w	lr, [r3, #3]
2400fbc2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fbc6:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400fbca:	f883 e004 	strb.w	lr, [r3, #4]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fbce:	45bb      	cmp	fp, r7
2400fbd0:	d8a3      	bhi.n	2400fb1a <dir_register+0x706>
2400fbd2:	440a      	add	r2, r1
2400fbd4:	f8b2 e002 	ldrh.w	lr, [r2, #2]
2400fbd8:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400fbdc:	f883 e005 	strb.w	lr, [r3, #5]
2400fbe0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fbe4:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400fbe8:	f883 e006 	strb.w	lr, [r3, #6]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fbec:	45bb      	cmp	fp, r7
2400fbee:	d896      	bhi.n	2400fb1e <dir_register+0x70a>
2400fbf0:	f8b2 e004 	ldrh.w	lr, [r2, #4]
2400fbf4:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400fbf8:	f883 e007 	strb.w	lr, [r3, #7]
2400fbfc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fc00:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400fc04:	f883 e008 	strb.w	lr, [r3, #8]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fc08:	45bb      	cmp	fp, r7
2400fc0a:	d88a      	bhi.n	2400fb22 <dir_register+0x70e>
2400fc0c:	f8b2 e006 	ldrh.w	lr, [r2, #6]
2400fc10:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400fc14:	f883 e009 	strb.w	lr, [r3, #9]
2400fc18:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fc1c:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400fc20:	f883 e00a 	strb.w	lr, [r3, #10]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fc24:	45bb      	cmp	fp, r7
2400fc26:	f63f af7e 	bhi.w	2400fb26 <dir_register+0x712>
2400fc2a:	f8b2 e008 	ldrh.w	lr, [r2, #8]
2400fc2e:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400fc32:	f883 e00e 	strb.w	lr, [r3, #14]
2400fc36:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fc3a:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400fc3e:	f883 e00f 	strb.w	lr, [r3, #15]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fc42:	45bb      	cmp	fp, r7
2400fc44:	f63f af71 	bhi.w	2400fb2a <dir_register+0x716>
2400fc48:	f8b2 e00a 	ldrh.w	lr, [r2, #10]
2400fc4c:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400fc50:	f883 e010 	strb.w	lr, [r3, #16]
2400fc54:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fc58:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400fc5c:	f883 e011 	strb.w	lr, [r3, #17]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fc60:	45bb      	cmp	fp, r7
2400fc62:	f63f af64 	bhi.w	2400fb2e <dir_register+0x71a>
2400fc66:	f8b2 e00c 	ldrh.w	lr, [r2, #12]
2400fc6a:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400fc6e:	f883 e012 	strb.w	lr, [r3, #18]
2400fc72:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fc76:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400fc7a:	f883 e013 	strb.w	lr, [r3, #19]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fc7e:	45bb      	cmp	fp, r7
2400fc80:	f63f af57 	bhi.w	2400fb32 <dir_register+0x71e>
2400fc84:	f8b2 e00e 	ldrh.w	lr, [r2, #14]
2400fc88:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400fc8c:	f883 e014 	strb.w	lr, [r3, #20]
2400fc90:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fc94:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400fc98:	f883 e015 	strb.w	lr, [r3, #21]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fc9c:	45bb      	cmp	fp, r7
2400fc9e:	f63f af4a 	bhi.w	2400fb36 <dir_register+0x722>
2400fca2:	f8b2 e010 	ldrh.w	lr, [r2, #16]
2400fca6:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400fcaa:	f883 e016 	strb.w	lr, [r3, #22]
2400fcae:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fcb2:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400fcb6:	f883 e017 	strb.w	lr, [r3, #23]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fcba:	45bb      	cmp	fp, r7
2400fcbc:	f63f af3d 	bhi.w	2400fb3a <dir_register+0x726>
2400fcc0:	f8b2 e012 	ldrh.w	lr, [r2, #18]
2400fcc4:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400fcc8:	f883 e018 	strb.w	lr, [r3, #24]
2400fccc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fcd0:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400fcd4:	f883 e019 	strb.w	lr, [r3, #25]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fcd8:	45bb      	cmp	fp, r7
2400fcda:	f63f af30 	bhi.w	2400fb3e <dir_register+0x72a>
2400fcde:	f8b2 e014 	ldrh.w	lr, [r2, #20]
2400fce2:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400fce6:	f883 e01c 	strb.w	lr, [r3, #28]
2400fcea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fcee:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400fcf2:	f883 e01d 	strb.w	lr, [r3, #29]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fcf6:	45bb      	cmp	fp, r7
2400fcf8:	f63f af23 	bhi.w	2400fb42 <dir_register+0x72e>
2400fcfc:	8ad2      	ldrh	r2, [r2, #22]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
2400fcfe:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400fd02:	779a      	strb	r2, [r3, #30]
2400fd04:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
2400fd06:	77da      	strb	r2, [r3, #31]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
2400fd08:	fa1f f28e 	uxth.w	r2, lr
2400fd0c:	42ba      	cmp	r2, r7
2400fd0e:	f63f af1a 	bhi.w	2400fb46 <dir_register+0x732>
2400fd12:	180a      	adds	r2, r1, r0
2400fd14:	8b52      	ldrh	r2, [r2, #26]
2400fd16:	2a00      	cmp	r2, #0
2400fd18:	f47f af17 	bne.w	2400fb4a <dir_register+0x736>
2400fd1c:	e713      	b.n	2400fb46 <dir_register+0x732>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
2400fd1e:	4691      	mov	r9, r2
2400fd20:	f7ff bb91 	b.w	2400f446 <dir_register+0x32>
			*d++ = *s++;
2400fd24:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
2400fd28:	701a      	strb	r2, [r3, #0]
2400fd2a:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
2400fd2e:	705a      	strb	r2, [r3, #1]
2400fd30:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
2400fd34:	709a      	strb	r2, [r3, #2]
2400fd36:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
2400fd3a:	70da      	strb	r2, [r3, #3]
2400fd3c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
2400fd40:	711a      	strb	r2, [r3, #4]
2400fd42:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
2400fd46:	715a      	strb	r2, [r3, #5]
2400fd48:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
2400fd4c:	719a      	strb	r2, [r3, #6]
2400fd4e:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
2400fd52:	71da      	strb	r2, [r3, #7]
2400fd54:	e63f      	b.n	2400f9d6 <dir_register+0x5c2>
2400fd56:	bf00      	nop

2400fd58 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
2400fd58:	2901      	cmp	r1, #1
{
2400fd5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400fd5e:	460c      	mov	r4, r1
2400fd60:	b083      	sub	sp, #12
	FATFS *fs = obj->fs;
2400fd62:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
2400fd64:	d914      	bls.n	2400fd90 <remove_chain+0x38>
2400fd66:	69ab      	ldr	r3, [r5, #24]
2400fd68:	428b      	cmp	r3, r1
2400fd6a:	d911      	bls.n	2400fd90 <remove_chain+0x38>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
2400fd6c:	4606      	mov	r6, r0
2400fd6e:	4611      	mov	r1, r2
2400fd70:	b992      	cbnz	r2, 2400fd98 <remove_chain+0x40>
2400fd72:	462f      	mov	r7, r5
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400fd74:	f105 0934 	add.w	r9, r5, #52	; 0x34
			fs->wflag = 1;
2400fd78:	f04f 0801 	mov.w	r8, #1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400fd7c:	429c      	cmp	r4, r3
2400fd7e:	d207      	bcs.n	2400fd90 <remove_chain+0x38>
		switch (fs->fs_type) {
2400fd80:	783b      	ldrb	r3, [r7, #0]
2400fd82:	2b02      	cmp	r3, #2
2400fd84:	f000 80a3 	beq.w	2400fece <remove_chain+0x176>
2400fd88:	2b03      	cmp	r3, #3
2400fd8a:	d022      	beq.n	2400fdd2 <remove_chain+0x7a>
2400fd8c:	2b01      	cmp	r3, #1
2400fd8e:	d011      	beq.n	2400fdb4 <remove_chain+0x5c>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
2400fd90:	2002      	movs	r0, #2
}
2400fd92:	b003      	add	sp, #12
2400fd94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400fd98:	4293      	cmp	r3, r2
2400fd9a:	d9f9      	bls.n	2400fd90 <remove_chain+0x38>
2400fd9c:	2a01      	cmp	r2, #1
2400fd9e:	d0f7      	beq.n	2400fd90 <remove_chain+0x38>
2400fda0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2400fda4:	4628      	mov	r0, r5
2400fda6:	f7fe fa81 	bl	2400e2ac <put_fat.part.0>
		if (res != FR_OK) return res;
2400fdaa:	2800      	cmp	r0, #0
2400fdac:	d1f1      	bne.n	2400fd92 <remove_chain+0x3a>
2400fdae:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400fdb0:	69bb      	ldr	r3, [r7, #24]
2400fdb2:	e7df      	b.n	2400fd74 <remove_chain+0x1c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400fdb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
2400fdb6:	eb04 0a54 	add.w	sl, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400fdba:	4638      	mov	r0, r7
2400fdbc:	eb01 215a 	add.w	r1, r1, sl, lsr #9
2400fdc0:	f7fe f8c4 	bl	2400df4c <move_window>
2400fdc4:	2800      	cmp	r0, #0
2400fdc6:	f000 80a9 	beq.w	2400ff1c <remove_chain+0x1c4>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
2400fdca:	2001      	movs	r0, #1
}
2400fdcc:	b003      	add	sp, #12
2400fdce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400fdd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
2400fdd4:	4638      	mov	r0, r7
2400fdd6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
2400fdda:	f7fe f8b7 	bl	2400df4c <move_window>
2400fdde:	2800      	cmp	r0, #0
2400fde0:	d1f3      	bne.n	2400fdca <remove_chain+0x72>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400fde2:	00a3      	lsls	r3, r4, #2
2400fde4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400fde8:	443b      	add	r3, r7
2400fdea:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400fdee:	f02a 4a70 	bic.w	sl, sl, #4026531840	; 0xf0000000
		if (nxt == 0) break;				/* Empty cluster? */
2400fdf2:	f1ba 0f00 	cmp.w	sl, #0
2400fdf6:	f000 80af 	beq.w	2400ff58 <remove_chain+0x200>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
2400fdfa:	f1ba 0f01 	cmp.w	sl, #1
2400fdfe:	d0c7      	beq.n	2400fd90 <remove_chain+0x38>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400fe00:	69ab      	ldr	r3, [r5, #24]
2400fe02:	42a3      	cmp	r3, r4
2400fe04:	d9c4      	bls.n	2400fd90 <remove_chain+0x38>
		switch (fs->fs_type) {
2400fe06:	782f      	ldrb	r7, [r5, #0]
2400fe08:	2f02      	cmp	r7, #2
2400fe0a:	d029      	beq.n	2400fe60 <remove_chain+0x108>
2400fe0c:	2f03      	cmp	r7, #3
2400fe0e:	d047      	beq.n	2400fea0 <remove_chain+0x148>
2400fe10:	2f01      	cmp	r7, #1
2400fe12:	d1bd      	bne.n	2400fd90 <remove_chain+0x38>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400fe14:	6a69      	ldr	r1, [r5, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
2400fe16:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400fe1a:	4628      	mov	r0, r5
2400fe1c:	eb01 215b 	add.w	r1, r1, fp, lsr #9
2400fe20:	f7fe f894 	bl	2400df4c <move_window>
			if (res != FR_OK) break;
2400fe24:	2800      	cmp	r0, #0
2400fe26:	d1b4      	bne.n	2400fd92 <remove_chain+0x3a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400fe28:	07e2      	lsls	r2, r4, #31
			p = fs->win + bc++ % SS(fs);
2400fe2a:	f10b 0301 	add.w	r3, fp, #1
2400fe2e:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400fe32:	d55c      	bpl.n	2400feee <remove_chain+0x196>
2400fe34:	f819 200b 	ldrb.w	r2, [r9, fp]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400fe38:	4628      	mov	r0, r5
2400fe3a:	9301      	str	r3, [sp, #4]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400fe3c:	f002 020f 	and.w	r2, r2, #15
2400fe40:	f809 200b 	strb.w	r2, [r9, fp]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400fe44:	6a69      	ldr	r1, [r5, #36]	; 0x24
			fs->wflag = 1;
2400fe46:	70ef      	strb	r7, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400fe48:	eb01 2153 	add.w	r1, r1, r3, lsr #9
2400fe4c:	f7fe f87e 	bl	2400df4c <move_window>
			if (res != FR_OK) break;
2400fe50:	9b01      	ldr	r3, [sp, #4]
2400fe52:	2800      	cmp	r0, #0
2400fe54:	d19d      	bne.n	2400fd92 <remove_chain+0x3a>
			p = fs->win + bc % SS(fs);
2400fe56:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400fe5a:	444b      	add	r3, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400fe5c:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) return res;
2400fe5e:	e00c      	b.n	2400fe7a <remove_chain+0x122>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
2400fe60:	6a69      	ldr	r1, [r5, #36]	; 0x24
2400fe62:	4628      	mov	r0, r5
2400fe64:	eb01 2114 	add.w	r1, r1, r4, lsr #8
2400fe68:	f7fe f870 	bl	2400df4c <move_window>
			if (res != FR_OK) break;
2400fe6c:	2800      	cmp	r0, #0
2400fe6e:	d190      	bne.n	2400fd92 <remove_chain+0x3a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
2400fe70:	0064      	lsls	r4, r4, #1
2400fe72:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
2400fe76:	442c      	add	r4, r5
2400fe78:	86a0      	strh	r0, [r4, #52]	; 0x34
			fs->wflag = 1;
2400fe7a:	f885 8003 	strb.w	r8, [r5, #3]
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
2400fe7e:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
2400fe82:	1e91      	subs	r1, r2, #2
2400fe84:	428b      	cmp	r3, r1
2400fe86:	d205      	bcs.n	2400fe94 <remove_chain+0x13c>
			fs->free_clst++;
2400fe88:	3301      	adds	r3, #1
2400fe8a:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
2400fe8c:	792b      	ldrb	r3, [r5, #4]
2400fe8e:	f043 0301 	orr.w	r3, r3, #1
2400fe92:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
2400fe94:	4552      	cmp	r2, sl
2400fe96:	d95f      	bls.n	2400ff58 <remove_chain+0x200>
		nxt = get_fat(obj, clst);			/* Get cluster status */
2400fe98:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400fe9a:	4654      	mov	r4, sl
2400fe9c:	69bb      	ldr	r3, [r7, #24]
2400fe9e:	e76d      	b.n	2400fd7c <remove_chain+0x24>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
2400fea0:	6a69      	ldr	r1, [r5, #36]	; 0x24
2400fea2:	4628      	mov	r0, r5
2400fea4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
2400fea8:	f7fe f850 	bl	2400df4c <move_window>
			if (res != FR_OK) break;
2400feac:	2800      	cmp	r0, #0
2400feae:	f47f af70 	bne.w	2400fd92 <remove_chain+0x3a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400feb2:	00a4      	lsls	r4, r4, #2
2400feb4:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400feb8:	f859 2004 	ldr.w	r2, [r9, r4]
	*ptr++ = (BYTE)val; val >>= 8;
2400febc:	f829 0004 	strh.w	r0, [r9, r4]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400fec0:	444c      	add	r4, r9
	*ptr++ = (BYTE)val; val >>= 8;
2400fec2:	0e13      	lsrs	r3, r2, #24
2400fec4:	70a0      	strb	r0, [r4, #2]
2400fec6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	*ptr++ = (BYTE)val;
2400feca:	70e3      	strb	r3, [r4, #3]
			if (res != FR_OK) return res;
2400fecc:	e7d5      	b.n	2400fe7a <remove_chain+0x122>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400fece:	6a79      	ldr	r1, [r7, #36]	; 0x24
2400fed0:	4638      	mov	r0, r7
2400fed2:	eb01 2114 	add.w	r1, r1, r4, lsr #8
2400fed6:	f7fe f839 	bl	2400df4c <move_window>
2400feda:	2800      	cmp	r0, #0
2400fedc:	f47f af75 	bne.w	2400fdca <remove_chain+0x72>
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400fee0:	0063      	lsls	r3, r4, #1
2400fee2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
2400fee6:	443b      	add	r3, r7
2400fee8:	f8b3 a034 	ldrh.w	sl, [r3, #52]	; 0x34
			break;
2400feec:	e781      	b.n	2400fdf2 <remove_chain+0x9a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400feee:	f809 000b 	strb.w	r0, [r9, fp]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400fef2:	4628      	mov	r0, r5
2400fef4:	6a69      	ldr	r1, [r5, #36]	; 0x24
			fs->wflag = 1;
2400fef6:	70ef      	strb	r7, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400fef8:	eb01 2153 	add.w	r1, r1, r3, lsr #9
2400fefc:	9301      	str	r3, [sp, #4]
2400fefe:	f7fe f825 	bl	2400df4c <move_window>
			if (res != FR_OK) break;
2400ff02:	2800      	cmp	r0, #0
2400ff04:	f47f af45 	bne.w	2400fd92 <remove_chain+0x3a>
			p = fs->win + bc % SS(fs);
2400ff08:	9b01      	ldr	r3, [sp, #4]
2400ff0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400ff0e:	f819 0003 	ldrb.w	r0, [r9, r3]
			p = fs->win + bc % SS(fs);
2400ff12:	444b      	add	r3, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400ff14:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
2400ff18:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) return res;
2400ff1a:	e7ae      	b.n	2400fe7a <remove_chain+0x122>
			wc = fs->win[bc++ % SS(fs)];
2400ff1c:	f3ca 0308 	ubfx	r3, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400ff20:	6a79      	ldr	r1, [r7, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
2400ff22:	f10a 0a01 	add.w	sl, sl, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400ff26:	4638      	mov	r0, r7
			wc = fs->win[bc++ % SS(fs)];
2400ff28:	443b      	add	r3, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400ff2a:	eb01 215a 	add.w	r1, r1, sl, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400ff2e:	f893 b034 	ldrb.w	fp, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400ff32:	f7fe f80b 	bl	2400df4c <move_window>
2400ff36:	2800      	cmp	r0, #0
2400ff38:	f47f af47 	bne.w	2400fdca <remove_chain+0x72>
			wc |= fs->win[bc % SS(fs)] << 8;
2400ff3c:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400ff40:	07e1      	lsls	r1, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
2400ff42:	44ba      	add	sl, r7
2400ff44:	f89a 3034 	ldrb.w	r3, [sl, #52]	; 0x34
2400ff48:	ea4b 2a03 	orr.w	sl, fp, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400ff4c:	bf4c      	ite	mi
2400ff4e:	ea4f 1a1a 	movmi.w	sl, sl, lsr #4
2400ff52:	f3ca 0a0b 	ubfxpl	sl, sl, #0, #12
2400ff56:	e74c      	b.n	2400fdf2 <remove_chain+0x9a>
	return FR_OK;
2400ff58:	2000      	movs	r0, #0
2400ff5a:	e71a      	b.n	2400fd92 <remove_chain+0x3a>

2400ff5c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
2400ff5c:	b510      	push	{r4, lr}
2400ff5e:	b082      	sub	sp, #8
2400ff60:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
2400ff64:	b1a1      	cbz	r1, 2400ff90 <f_mount+0x34>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400ff66:	f891 c000 	ldrb.w	ip, [r1]
2400ff6a:	f1bc 0f1f 	cmp.w	ip, #31
2400ff6e:	d912      	bls.n	2400ff96 <f_mount+0x3a>
2400ff70:	f1bc 0f3a 	cmp.w	ip, #58	; 0x3a
2400ff74:	d00f      	beq.n	2400ff96 <f_mount+0x3a>
2400ff76:	4608      	mov	r0, r1
2400ff78:	f810 3f01 	ldrb.w	r3, [r0, #1]!
2400ff7c:	2b1f      	cmp	r3, #31
2400ff7e:	d90c      	bls.n	2400ff9a <f_mount+0x3e>
2400ff80:	2b3a      	cmp	r3, #58	; 0x3a
2400ff82:	d1f9      	bne.n	2400ff78 <f_mount+0x1c>
			i = *tp++ - '0';
2400ff84:	3101      	adds	r1, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
2400ff86:	4288      	cmp	r0, r1
2400ff88:	d102      	bne.n	2400ff90 <f_mount+0x34>
2400ff8a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
2400ff8e:	d006      	beq.n	2400ff9e <f_mount+0x42>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
2400ff90:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
2400ff92:	b002      	add	sp, #8
2400ff94:	bd10      	pop	{r4, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400ff96:	4663      	mov	r3, ip
2400ff98:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
2400ff9a:	2b3a      	cmp	r3, #58	; 0x3a
2400ff9c:	d0f2      	beq.n	2400ff84 <f_mount+0x28>
	cfs = FatFs[vol];					/* Pointer to fs object */
2400ff9e:	4913      	ldr	r1, [pc, #76]	; (2400ffec <f_mount+0x90>)
2400ffa0:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
2400ffa2:	b143      	cbz	r3, 2400ffb6 <f_mount+0x5a>
		if (Files[i].fs == fs) Files[i].fs = 0;
2400ffa4:	4812      	ldr	r0, [pc, #72]	; (2400fff0 <f_mount+0x94>)
2400ffa6:	6804      	ldr	r4, [r0, #0]
2400ffa8:	42a3      	cmp	r3, r4
2400ffaa:	d019      	beq.n	2400ffe0 <f_mount+0x84>
2400ffac:	6904      	ldr	r4, [r0, #16]
2400ffae:	429c      	cmp	r4, r3
2400ffb0:	d013      	beq.n	2400ffda <f_mount+0x7e>
		cfs->fs_type = 0;				/* Clear old fs object */
2400ffb2:	2000      	movs	r0, #0
2400ffb4:	7018      	strb	r0, [r3, #0]
	if (fs) {
2400ffb6:	9b01      	ldr	r3, [sp, #4]
2400ffb8:	b15b      	cbz	r3, 2400ffd2 <f_mount+0x76>
		fs->fs_type = 0;				/* Clear new fs object */
2400ffba:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
2400ffbc:	2a01      	cmp	r2, #1
	FatFs[vol] = fs;					/* Register new fs object */
2400ffbe:	600b      	str	r3, [r1, #0]
		fs->fs_type = 0;				/* Clear new fs object */
2400ffc0:	7018      	strb	r0, [r3, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
2400ffc2:	d1e6      	bne.n	2400ff92 <f_mount+0x36>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
2400ffc4:	4602      	mov	r2, r0
2400ffc6:	a901      	add	r1, sp, #4
2400ffc8:	4668      	mov	r0, sp
2400ffca:	f7fd fffd 	bl	2400dfc8 <find_volume>
}
2400ffce:	b002      	add	sp, #8
2400ffd0:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
2400ffd2:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
2400ffd4:	600b      	str	r3, [r1, #0]
}
2400ffd6:	b002      	add	sp, #8
2400ffd8:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
2400ffda:	2400      	movs	r4, #0
2400ffdc:	6104      	str	r4, [r0, #16]
2400ffde:	e7e8      	b.n	2400ffb2 <f_mount+0x56>
2400ffe0:	2400      	movs	r4, #0
2400ffe2:	6004      	str	r4, [r0, #0]
2400ffe4:	6904      	ldr	r4, [r0, #16]
2400ffe6:	429c      	cmp	r4, r3
2400ffe8:	d1e3      	bne.n	2400ffb2 <f_mount+0x56>
2400ffea:	e7f6      	b.n	2400ffda <f_mount+0x7e>
2400ffec:	2001dbec 	.word	0x2001dbec
2400fff0:	2001dbf0 	.word	0x2001dbf0

2400fff4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
2400fff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2400fff8:	b092      	sub	sp, #72	; 0x48
2400fffa:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
2400fffc:	2800      	cmp	r0, #0
2400fffe:	f000 8096 	beq.w	2401012e <f_open+0x13a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
24010002:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
24010006:	4616      	mov	r6, r2
24010008:	4604      	mov	r4, r0
2401000a:	a903      	add	r1, sp, #12
2401000c:	a801      	add	r0, sp, #4
2401000e:	463a      	mov	r2, r7
24010010:	f7fd ffda 	bl	2400dfc8 <find_volume>
	if (res == FR_OK) {
24010014:	4605      	mov	r5, r0
24010016:	b128      	cbz	r0, 24010024 <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
24010018:	2300      	movs	r3, #0
2401001a:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
2401001c:	4628      	mov	r0, r5
2401001e:	b012      	add	sp, #72	; 0x48
24010020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
24010024:	f8dd 800c 	ldr.w	r8, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
24010028:	a804      	add	r0, sp, #16
2401002a:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
2401002c:	f8cd 8010 	str.w	r8, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
24010030:	f7fe ff82 	bl	2400ef38 <follow_path>
		if (res == FR_OK) {
24010034:	b9f0      	cbnz	r0, 24010074 <f_open+0x80>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
24010036:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
2401003a:	2b00      	cmp	r3, #0
2401003c:	db7e      	blt.n	2401013c <f_open+0x148>
		if (Files[i].fs) {	/* Existing entry */
2401003e:	4b9d      	ldr	r3, [pc, #628]	; (240102b4 <f_open+0x2c0>)
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
24010040:	f027 0001 	bic.w	r0, r7, #1
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
24010044:	9a04      	ldr	r2, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
24010046:	f8d3 9000 	ldr.w	r9, [r3]
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2401004a:	4601      	mov	r1, r0
				Files[i].clu == dp->obj.sclust &&
2401004c:	f8dd c018 	ldr.w	ip, [sp, #24]
				Files[i].ofs == dp->dptr) break;
24010050:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
		if (Files[i].fs) {	/* Existing entry */
24010054:	f1b9 0f00 	cmp.w	r9, #0
24010058:	f000 80d8 	beq.w	2401020c <f_open+0x218>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2401005c:	4591      	cmp	r9, r2
2401005e:	d06f      	beq.n	24010140 <f_open+0x14c>
		if (Files[i].fs) {	/* Existing entry */
24010060:	f8d3 9010 	ldr.w	r9, [r3, #16]
24010064:	f1b9 0f00 	cmp.w	r9, #0
24010068:	d071      	beq.n	2401014e <f_open+0x15a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2401006a:	454a      	cmp	r2, r9
2401006c:	f000 80e7 	beq.w	2401023e <f_open+0x24a>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
24010070:	2512      	movs	r5, #18
24010072:	e7d1      	b.n	24010018 <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
24010074:	f016 0f1c 	tst.w	r6, #28
24010078:	d05e      	beq.n	24010138 <f_open+0x144>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
2401007a:	2804      	cmp	r0, #4
2401007c:	d15c      	bne.n	24010138 <f_open+0x144>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2401007e:	4b8d      	ldr	r3, [pc, #564]	; (240102b4 <f_open+0x2c0>)
24010080:	681a      	ldr	r2, [r3, #0]
24010082:	b112      	cbz	r2, 2401008a <f_open+0x96>
24010084:	691b      	ldr	r3, [r3, #16]
24010086:	2b00      	cmp	r3, #0
24010088:	d1f2      	bne.n	24010070 <f_open+0x7c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
2401008a:	a804      	add	r0, sp, #16
				mode |= FA_CREATE_ALWAYS;		/* File is created */
2401008c:	f047 0708 	orr.w	r7, r7, #8
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
24010090:	f7ff f9c0 	bl	2400f414 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
24010094:	2800      	cmp	r0, #0
24010096:	d14f      	bne.n	24010138 <f_open+0x144>
				dw = GET_FATTIME();
24010098:	f7fd fcb0 	bl	2400d9fc <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
2401009c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
2401009e:	0a02      	lsrs	r2, r0, #8
240100a0:	f8c3 000e 	str.w	r0, [r3, #14]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
240100a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
240100a6:	75da      	strb	r2, [r3, #23]
240100a8:	0c02      	lsrs	r2, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
240100aa:	7598      	strb	r0, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
240100ac:	0e00      	lsrs	r0, r0, #24
240100ae:	761a      	strb	r2, [r3, #24]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
240100b0:	2220      	movs	r2, #32
	*ptr++ = (BYTE)val;
240100b2:	7658      	strb	r0, [r3, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
240100b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
240100b6:	72da      	strb	r2, [r3, #11]
	if (fs->fs_type == FS_FAT32) {
240100b8:	f898 2000 	ldrb.w	r2, [r8]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
240100bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
240100be:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
240100c0:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
240100c2:	d102      	bne.n	240100ca <f_open+0xd6>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
240100c4:	8a9a      	ldrh	r2, [r3, #20]
240100c6:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
240100ca:	2200      	movs	r2, #0
240100cc:	835a      	strh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
240100ce:	f898 1000 	ldrb.w	r1, [r8]
240100d2:	2903      	cmp	r1, #3
240100d4:	d100      	bne.n	240100d8 <f_open+0xe4>
	*ptr++ = (BYTE)val; val >>= 8;
240100d6:	829a      	strh	r2, [r3, #20]
					st_dword(dj.dir + DIR_FileSize, 0);
240100d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
240100da:	2200      	movs	r2, #0
240100dc:	61da      	str	r2, [r3, #28]
					fs->wflag = 1;
240100de:	2301      	movs	r3, #1
240100e0:	f888 3003 	strb.w	r3, [r8, #3]
					if (cl) {							/* Remove the cluster chain if exist */
240100e4:	b186      	cbz	r6, 24010108 <f_open+0x114>
						dw = fs->winsect;
240100e6:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
240100ea:	4631      	mov	r1, r6
240100ec:	a804      	add	r0, sp, #16
						dw = fs->winsect;
240100ee:	9300      	str	r3, [sp, #0]
						res = remove_chain(&dj.obj, cl, 0);
240100f0:	f7ff fe32 	bl	2400fd58 <remove_chain>
						if (res == FR_OK) {
240100f4:	9b00      	ldr	r3, [sp, #0]
240100f6:	b9f8      	cbnz	r0, 24010138 <f_open+0x144>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
240100f8:	3e01      	subs	r6, #1
							res = move_window(fs, dw);
240100fa:	4619      	mov	r1, r3
240100fc:	4640      	mov	r0, r8
240100fe:	f7fd ff25 	bl	2400df4c <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
24010102:	f8c8 6010 	str.w	r6, [r8, #16]
		if (res == FR_OK) {
24010106:	b9b8      	cbnz	r0, 24010138 <f_open+0x144>
				mode |= FA_MODIFIED;
24010108:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2401010c:	f027 0101 	bic.w	r1, r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
24010110:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
24010114:	3900      	subs	r1, #0
24010116:	a804      	add	r0, sp, #16
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
24010118:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2401011a:	bf18      	it	ne
2401011c:	2101      	movne	r1, #1
			fp->dir_ptr = dj.dir;
2401011e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
24010120:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
24010122:	f7fd fd85 	bl	2400dc30 <inc_lock>
24010126:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
24010128:	b9e8      	cbnz	r0, 24010166 <f_open+0x172>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
2401012a:	2502      	movs	r5, #2
2401012c:	e774      	b.n	24010018 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
2401012e:	2509      	movs	r5, #9
}
24010130:	4628      	mov	r0, r5
24010132:	b012      	add	sp, #72	; 0x48
24010134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
24010138:	4605      	mov	r5, r0
2401013a:	e76d      	b.n	24010018 <f_open+0x24>
				res = FR_INVALID_NAME;
2401013c:	2506      	movs	r5, #6
2401013e:	e76b      	b.n	24010018 <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
24010140:	685a      	ldr	r2, [r3, #4]
24010142:	4562      	cmp	r2, ip
24010144:	f000 8084 	beq.w	24010250 <f_open+0x25c>
		if (Files[i].fs) {	/* Existing entry */
24010148:	691a      	ldr	r2, [r3, #16]
2401014a:	2a00      	cmp	r2, #0
2401014c:	d18d      	bne.n	2401006a <f_open+0x76>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
2401014e:	f016 0f1c 	tst.w	r6, #28
24010152:	d048      	beq.n	240101e6 <f_open+0x1f2>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
24010154:	f89d 3016 	ldrb.w	r3, [sp, #22]
24010158:	f013 0f11 	tst.w	r3, #17
2401015c:	d154      	bne.n	24010208 <f_open+0x214>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
2401015e:	0773      	lsls	r3, r6, #29
24010160:	d54f      	bpl.n	24010202 <f_open+0x20e>
24010162:	2508      	movs	r5, #8
24010164:	e758      	b.n	24010018 <f_open+0x24>
	if (fs->fs_type == FS_FAT32) {
24010166:	f898 2000 	ldrb.w	r2, [r8]
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
2401016a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
2401016c:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
2401016e:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
24010170:	d102      	bne.n	24010178 <f_open+0x184>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
24010172:	8a9a      	ldrh	r2, [r3, #20]
24010174:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
24010178:	60a6      	str	r6, [r4, #8]
			fp->err = 0;			/* Clear error flag */
2401017a:	2100      	movs	r1, #0
	rv = rv << 8 | ptr[0];
2401017c:	f8d3 901c 	ldr.w	r9, [r3, #28]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
24010180:	f104 0a2c 	add.w	sl, r4, #44	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
24010184:	f8c4 8000 	str.w	r8, [r4]
		*d++ = (BYTE)val;
24010188:	f44f 7200 	mov.w	r2, #512	; 0x200
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
2401018c:	f8c4 900c 	str.w	r9, [r4, #12]
		*d++ = (BYTE)val;
24010190:	4650      	mov	r0, sl
			fp->obj.id = fs->id;
24010192:	f8b8 3006 	ldrh.w	r3, [r8, #6]
			fp->flag = mode;		/* Set file access mode */
24010196:	7527      	strb	r7, [r4, #20]
			fp->obj.id = fs->id;
24010198:	80a3      	strh	r3, [r4, #4]
			fp->err = 0;			/* Clear error flag */
2401019a:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
2401019c:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
2401019e:	61a1      	str	r1, [r4, #24]
		*d++ = (BYTE)val;
240101a0:	f009 fac0 	bl	24019724 <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
240101a4:	06bf      	lsls	r7, r7, #26
240101a6:	f57f af39 	bpl.w	2401001c <f_open+0x28>
240101aa:	f1b9 0f00 	cmp.w	r9, #0
240101ae:	f43f af35 	beq.w	2401001c <f_open+0x28>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
240101b2:	f8c4 9018 	str.w	r9, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
240101b6:	f8b8 300a 	ldrh.w	r3, [r8, #10]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
240101ba:	ebb9 2f43 	cmp.w	r9, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
240101be:	ea4f 2743 	mov.w	r7, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
240101c2:	d804      	bhi.n	240101ce <f_open+0x1da>
240101c4:	e04a      	b.n	2401025c <f_open+0x268>
240101c6:	1c70      	adds	r0, r6, #1
240101c8:	d06c      	beq.n	240102a4 <f_open+0x2b0>
240101ca:	454f      	cmp	r7, r9
240101cc:	d26a      	bcs.n	240102a4 <f_open+0x2b0>
					clst = get_fat(&fp->obj, clst);
240101ce:	4631      	mov	r1, r6
240101d0:	6820      	ldr	r0, [r4, #0]
240101d2:	f7fe f8f1 	bl	2400e3b8 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
240101d6:	2801      	cmp	r0, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
240101d8:	eba9 0907 	sub.w	r9, r9, r7
					clst = get_fat(&fp->obj, clst);
240101dc:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
240101de:	d8f2      	bhi.n	240101c6 <f_open+0x1d2>
240101e0:	2502      	movs	r5, #2
				fp->clust = clst;
240101e2:	61e0      	str	r0, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
240101e4:	e718      	b.n	24010018 <f_open+0x24>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
240101e6:	f89d 3016 	ldrb.w	r3, [sp, #22]
240101ea:	06da      	lsls	r2, r3, #27
240101ec:	d425      	bmi.n	2401023a <f_open+0x246>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
240101ee:	07b2      	lsls	r2, r6, #30
240101f0:	d501      	bpl.n	240101f6 <f_open+0x202>
240101f2:	07db      	lsls	r3, r3, #31
240101f4:	d408      	bmi.n	24010208 <f_open+0x214>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
240101f6:	f006 0608 	and.w	r6, r6, #8
240101fa:	2e00      	cmp	r6, #0
240101fc:	d184      	bne.n	24010108 <f_open+0x114>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
240101fe:	4601      	mov	r1, r0
24010200:	e786      	b.n	24010110 <f_open+0x11c>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
24010202:	0730      	lsls	r0, r6, #28
24010204:	d584      	bpl.n	24010110 <f_open+0x11c>
24010206:	e747      	b.n	24010098 <f_open+0xa4>
						res = FR_DENIED;
24010208:	2507      	movs	r5, #7
2401020a:	e705      	b.n	24010018 <f_open+0x24>
		if (Files[i].fs) {	/* Existing entry */
2401020c:	f8d3 9010 	ldr.w	r9, [r3, #16]
24010210:	f1b9 0f00 	cmp.w	r9, #0
24010214:	d09b      	beq.n	2401014e <f_open+0x15a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
24010216:	4591      	cmp	r9, r2
24010218:	d199      	bne.n	2401014e <f_open+0x15a>
2401021a:	695a      	ldr	r2, [r3, #20]
2401021c:	4562      	cmp	r2, ip
2401021e:	d196      	bne.n	2401014e <f_open+0x15a>
				Files[i].clu == dp->obj.sclust &&
24010220:	699a      	ldr	r2, [r3, #24]
24010222:	4572      	cmp	r2, lr
24010224:	d193      	bne.n	2401014e <f_open+0x15a>
	for (i = be = 0; i < _FS_LOCK; i++) {
24010226:	2201      	movs	r2, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
24010228:	b928      	cbnz	r0, 24010236 <f_open+0x242>
2401022a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
2401022e:	899b      	ldrh	r3, [r3, #12]
24010230:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24010234:	d18b      	bne.n	2401014e <f_open+0x15a>
24010236:	2510      	movs	r5, #16
24010238:	e6ee      	b.n	24010018 <f_open+0x24>
					res = FR_NO_FILE;
2401023a:	2504      	movs	r5, #4
2401023c:	e6ec      	b.n	24010018 <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2401023e:	695a      	ldr	r2, [r3, #20]
24010240:	4562      	cmp	r2, ip
24010242:	f47f af15 	bne.w	24010070 <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
24010246:	699a      	ldr	r2, [r3, #24]
24010248:	4572      	cmp	r2, lr
2401024a:	f47f af11 	bne.w	24010070 <f_open+0x7c>
2401024e:	e7ea      	b.n	24010226 <f_open+0x232>
24010250:	689a      	ldr	r2, [r3, #8]
24010252:	4572      	cmp	r2, lr
24010254:	f47f af78 	bne.w	24010148 <f_open+0x154>
	for (i = be = 0; i < _FS_LOCK; i++) {
24010258:	462a      	mov	r2, r5
2401025a:	e7e5      	b.n	24010228 <f_open+0x234>
				fp->clust = clst;
2401025c:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
2401025e:	f3c9 0308 	ubfx	r3, r9, #0, #9
24010262:	2b00      	cmp	r3, #0
24010264:	f43f aeda 	beq.w	2401001c <f_open+0x28>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
24010268:	f8d8 3018 	ldr.w	r3, [r8, #24]
	clst -= 2;
2401026c:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2401026e:	3b02      	subs	r3, #2
24010270:	429e      	cmp	r6, r3
24010272:	f4bf af5a 	bcs.w	2401012a <f_open+0x136>
	return clst * fs->csize + fs->database;
24010276:	f8b8 200a 	ldrh.w	r2, [r8, #10]
2401027a:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
2401027e:	fb06 3202 	mla	r2, r6, r2, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
24010282:	2a00      	cmp	r2, #0
24010284:	f43f af51 	beq.w	2401012a <f_open+0x136>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
24010288:	eb02 2259 	add.w	r2, r2, r9, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
2401028c:	4651      	mov	r1, sl
2401028e:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
24010290:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
24010292:	f898 0001 	ldrb.w	r0, [r8, #1]
24010296:	f7fd fc9f 	bl	2400dbd8 <disk_read>
2401029a:	2800      	cmp	r0, #0
2401029c:	f43f aebe 	beq.w	2401001c <f_open+0x28>
240102a0:	2501      	movs	r5, #1
240102a2:	e6b9      	b.n	24010018 <f_open+0x24>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
240102a4:	1c71      	adds	r1, r6, #1
				fp->clust = clst;
240102a6:	61e6      	str	r6, [r4, #28]
					if (clst <= 1) res = FR_INT_ERR;
240102a8:	bf0c      	ite	eq
240102aa:	2301      	moveq	r3, #1
240102ac:	2300      	movne	r3, #0
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
240102ae:	d1d6      	bne.n	2401025e <f_open+0x26a>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
240102b0:	461d      	mov	r5, r3
240102b2:	e6b1      	b.n	24010018 <f_open+0x24>
240102b4:	2001dbf0 	.word	0x2001dbf0

240102b8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
240102b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
240102bc:	461e      	mov	r6, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
240102be:	2300      	movs	r3, #0
{
240102c0:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
240102c2:	6033      	str	r3, [r6, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
240102c4:	b150      	cbz	r0, 240102dc <f_read+0x24>
240102c6:	6803      	ldr	r3, [r0, #0]
240102c8:	4604      	mov	r4, r0
240102ca:	b13b      	cbz	r3, 240102dc <f_read+0x24>
240102cc:	4691      	mov	r9, r2
240102ce:	781a      	ldrb	r2, [r3, #0]
240102d0:	b122      	cbz	r2, 240102dc <f_read+0x24>
240102d2:	460d      	mov	r5, r1
240102d4:	88da      	ldrh	r2, [r3, #6]
240102d6:	8881      	ldrh	r1, [r0, #4]
240102d8:	4291      	cmp	r1, r2
240102da:	d005      	beq.n	240102e8 <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
240102dc:	f04f 0809 	mov.w	r8, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
240102e0:	4640      	mov	r0, r8
240102e2:	b005      	add	sp, #20
240102e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
240102e8:	7858      	ldrb	r0, [r3, #1]
240102ea:	f7fd fc59 	bl	2400dba0 <disk_status>
240102ee:	07c2      	lsls	r2, r0, #31
240102f0:	d4f4      	bmi.n	240102dc <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
240102f2:	f894 8015 	ldrb.w	r8, [r4, #21]
240102f6:	f1b8 0f00 	cmp.w	r8, #0
240102fa:	d1f1      	bne.n	240102e0 <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
240102fc:	7d23      	ldrb	r3, [r4, #20]
240102fe:	f013 0301 	ands.w	r3, r3, #1
24010302:	9300      	str	r3, [sp, #0]
24010304:	f000 80cb 	beq.w	2401049e <f_read+0x1e6>
	remain = fp->obj.objsize - fp->fptr;
24010308:	69a3      	ldr	r3, [r4, #24]
2401030a:	68e7      	ldr	r7, [r4, #12]
2401030c:	1aff      	subs	r7, r7, r3
2401030e:	454f      	cmp	r7, r9
24010310:	bf28      	it	cs
24010312:	464f      	movcs	r7, r9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
24010314:	f8d4 9000 	ldr.w	r9, [r4]
	for ( ;  btr;								/* Repeat until all data read */
24010318:	2f00      	cmp	r7, #0
2401031a:	d0e1      	beq.n	240102e0 <f_read+0x28>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
2401031c:	f104 022d 	add.w	r2, r4, #45	; 0x2d
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
24010320:	f104 0a2c 	add.w	sl, r4, #44	; 0x2c
24010324:	e9cd 2801 	strd	r2, r8, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
24010328:	f3c3 0208 	ubfx	r2, r3, #0, #9
2401032c:	2a00      	cmp	r2, #0
2401032e:	d140      	bne.n	240103b2 <f_read+0xfa>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
24010330:	f8b9 200a 	ldrh.w	r2, [r9, #10]
24010334:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
24010336:	ea12 2253 	ands.w	r2, r2, r3, lsr #9
2401033a:	d06e      	beq.n	2401041a <f_read+0x162>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
2401033c:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2401033e:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
24010342:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
24010344:	3b02      	subs	r3, #2
24010346:	4298      	cmp	r0, r3
24010348:	d274      	bcs.n	24010434 <f_read+0x17c>
	return clst * fs->csize + fs->database;
2401034a:	f8b9 100a 	ldrh.w	r1, [r9, #10]
2401034e:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
24010352:	fb01 3300 	mla	r3, r1, r0, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
24010356:	2b00      	cmp	r3, #0
24010358:	d06c      	beq.n	24010434 <f_read+0x17c>
			if (cc) {							/* Read maximum contiguous sectors directly */
2401035a:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
2401035e:	eb02 0b03 	add.w	fp, r2, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
24010362:	d36e      	bcc.n	24010442 <f_read+0x18a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
24010364:	eb02 2057 	add.w	r0, r2, r7, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
24010368:	ea4f 2857 	mov.w	r8, r7, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
2401036c:	4288      	cmp	r0, r1
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
2401036e:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
24010372:	bf88      	it	hi
24010374:	eba1 0802 	subhi.w	r8, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
24010378:	465a      	mov	r2, fp
2401037a:	4629      	mov	r1, r5
2401037c:	4643      	mov	r3, r8
2401037e:	f7fd fc2b 	bl	2400dbd8 <disk_read>
24010382:	2800      	cmp	r0, #0
24010384:	d172      	bne.n	2401046c <f_read+0x1b4>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
24010386:	f994 2014 	ldrsb.w	r2, [r4, #20]
2401038a:	2a00      	cmp	r2, #0
2401038c:	f2c0 8097 	blt.w	240104be <f_read+0x206>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
24010390:	ea4f 2148 	mov.w	r1, r8, lsl #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
24010394:	69a3      	ldr	r3, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
24010396:	1a7f      	subs	r7, r7, r1
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
24010398:	440d      	add	r5, r1
2401039a:	440b      	add	r3, r1
2401039c:	61a3      	str	r3, [r4, #24]
2401039e:	6833      	ldr	r3, [r6, #0]
240103a0:	440b      	add	r3, r1
240103a2:	6033      	str	r3, [r6, #0]
	for ( ;  btr;								/* Repeat until all data read */
240103a4:	f000 80a1 	beq.w	240104ea <f_read+0x232>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
240103a8:	69a3      	ldr	r3, [r4, #24]
240103aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
240103ae:	2a00      	cmp	r2, #0
240103b0:	d0be      	beq.n	24010330 <f_read+0x78>
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
240103b2:	1c50      	adds	r0, r2, #1
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
240103b4:	f5c2 7100 	rsb	r1, r2, #512	; 0x200
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
240103b8:	eb0a 0302 	add.w	r3, sl, r2
240103bc:	4450      	add	r0, sl
240103be:	42b9      	cmp	r1, r7
240103c0:	eba5 0000 	sub.w	r0, r5, r0
240103c4:	bf28      	it	cs
240103c6:	4639      	movcs	r1, r7
void mem_cpy (void* dst, const void* src, UINT cnt) {
240103c8:	2802      	cmp	r0, #2
240103ca:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
240103ce:	d95c      	bls.n	2401048a <f_read+0x1d2>
240103d0:	f1bb 0f05 	cmp.w	fp, #5
240103d4:	d959      	bls.n	2401048a <f_read+0x1d2>
240103d6:	f021 0e03 	bic.w	lr, r1, #3
240103da:	461a      	mov	r2, r3
240103dc:	4628      	mov	r0, r5
240103de:	449e      	add	lr, r3
			*d++ = *s++;
240103e0:	f852 cb04 	ldr.w	ip, [r2], #4
240103e4:	4572      	cmp	r2, lr
240103e6:	f840 cb04 	str.w	ip, [r0], #4
		} while (--cnt);
240103ea:	d1f9      	bne.n	240103e0 <f_read+0x128>
240103ec:	f021 0203 	bic.w	r2, r1, #3
240103f0:	4291      	cmp	r1, r2
240103f2:	eb05 0002 	add.w	r0, r5, r2
240103f6:	eb03 0c02 	add.w	ip, r3, r2
240103fa:	d0cb      	beq.n	24010394 <f_read+0xdc>
			*d++ = *s++;
240103fc:	5c9b      	ldrb	r3, [r3, r2]
		} while (--cnt);
240103fe:	ebbb 0b02 	subs.w	fp, fp, r2
			*d++ = *s++;
24010402:	54ab      	strb	r3, [r5, r2]
		} while (--cnt);
24010404:	d0c6      	beq.n	24010394 <f_read+0xdc>
			*d++ = *s++;
24010406:	f89c 3001 	ldrb.w	r3, [ip, #1]
		} while (--cnt);
2401040a:	f1bb 0f01 	cmp.w	fp, #1
			*d++ = *s++;
2401040e:	7043      	strb	r3, [r0, #1]
		} while (--cnt);
24010410:	d0c0      	beq.n	24010394 <f_read+0xdc>
			*d++ = *s++;
24010412:	f89c 3002 	ldrb.w	r3, [ip, #2]
24010416:	7083      	strb	r3, [r0, #2]
		} while (--cnt);
24010418:	e7bc      	b.n	24010394 <f_read+0xdc>
				if (fp->fptr == 0) {			/* On the top of the file? */
2401041a:	bb7b      	cbnz	r3, 2401047c <f_read+0x1c4>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
2401041c:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
2401041e:	2801      	cmp	r0, #1
24010420:	d908      	bls.n	24010434 <f_read+0x17c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
24010422:	1c43      	adds	r3, r0, #1
24010424:	d022      	beq.n	2401046c <f_read+0x1b4>
				fp->clust = clst;				/* Update current cluster */
24010426:	61e0      	str	r0, [r4, #28]
	clst -= 2;
24010428:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2401042a:	f8d9 3018 	ldr.w	r3, [r9, #24]
2401042e:	3b02      	subs	r3, #2
24010430:	4298      	cmp	r0, r3
24010432:	d38a      	bcc.n	2401034a <f_read+0x92>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
24010434:	2302      	movs	r3, #2
24010436:	4698      	mov	r8, r3
24010438:	7563      	strb	r3, [r4, #21]
}
2401043a:	4640      	mov	r0, r8
2401043c:	b005      	add	sp, #20
2401043e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect) {			/* Load data sector if not in cache */
24010442:	6a22      	ldr	r2, [r4, #32]
24010444:	455a      	cmp	r2, fp
24010446:	d00b      	beq.n	24010460 <f_read+0x1a8>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
24010448:	f994 3014 	ldrsb.w	r3, [r4, #20]
2401044c:	2b00      	cmp	r3, #0
2401044e:	db29      	blt.n	240104a4 <f_read+0x1ec>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
24010450:	2301      	movs	r3, #1
24010452:	465a      	mov	r2, fp
24010454:	4651      	mov	r1, sl
24010456:	f899 0001 	ldrb.w	r0, [r9, #1]
2401045a:	f7fd fbbd 	bl	2400dbd8 <disk_read>
2401045e:	b928      	cbnz	r0, 2401046c <f_read+0x1b4>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
24010460:	69a3      	ldr	r3, [r4, #24]
			fp->sect = sect;
24010462:	f8c4 b020 	str.w	fp, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
24010466:	f3c3 0208 	ubfx	r2, r3, #0, #9
2401046a:	e7a2      	b.n	240103b2 <f_read+0xfa>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2401046c:	f8dd 8000 	ldr.w	r8, [sp]
24010470:	2301      	movs	r3, #1
}
24010472:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
24010474:	7563      	strb	r3, [r4, #21]
}
24010476:	b005      	add	sp, #20
24010478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
2401047c:	69e1      	ldr	r1, [r4, #28]
2401047e:	6820      	ldr	r0, [r4, #0]
24010480:	9203      	str	r2, [sp, #12]
24010482:	f7fd ff99 	bl	2400e3b8 <get_fat.isra.0>
24010486:	9a03      	ldr	r2, [sp, #12]
24010488:	e7c9      	b.n	2401041e <f_read+0x166>
2401048a:	1e6a      	subs	r2, r5, #1
2401048c:	eb03 0c01 	add.w	ip, r3, r1
			*d++ = *s++;
24010490:	f813 0b01 	ldrb.w	r0, [r3], #1
		} while (--cnt);
24010494:	4563      	cmp	r3, ip
			*d++ = *s++;
24010496:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
2401049a:	d1f9      	bne.n	24010490 <f_read+0x1d8>
2401049c:	e77a      	b.n	24010394 <f_read+0xdc>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
2401049e:	f04f 0807 	mov.w	r8, #7
240104a2:	e71d      	b.n	240102e0 <f_read+0x28>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
240104a4:	2301      	movs	r3, #1
240104a6:	4651      	mov	r1, sl
240104a8:	f899 0001 	ldrb.w	r0, [r9, #1]
240104ac:	f7fd fba4 	bl	2400dbf8 <disk_write>
240104b0:	2800      	cmp	r0, #0
240104b2:	d1db      	bne.n	2401046c <f_read+0x1b4>
					fp->flag &= (BYTE)~FA_DIRTY;
240104b4:	7d23      	ldrb	r3, [r4, #20]
240104b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
240104ba:	7523      	strb	r3, [r4, #20]
240104bc:	e7c8      	b.n	24010450 <f_read+0x198>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
240104be:	6a22      	ldr	r2, [r4, #32]
240104c0:	eba2 020b 	sub.w	r2, r2, fp
240104c4:	4542      	cmp	r2, r8
240104c6:	f4bf af63 	bcs.w	24010390 <f_read+0xd8>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
240104ca:	eb05 2242 	add.w	r2, r5, r2, lsl #9
240104ce:	9b01      	ldr	r3, [sp, #4]
240104d0:	4651      	mov	r1, sl
void mem_cpy (void* dst, const void* src, UINT cnt) {
240104d2:	1ad0      	subs	r0, r2, r3
240104d4:	2802      	cmp	r0, #2
240104d6:	d90b      	bls.n	240104f0 <f_read+0x238>
240104d8:	f502 7c00 	add.w	ip, r2, #512	; 0x200
			*d++ = *s++;
240104dc:	f851 3b04 	ldr.w	r3, [r1], #4
240104e0:	f842 3b04 	str.w	r3, [r2], #4
		} while (--cnt);
240104e4:	4562      	cmp	r2, ip
240104e6:	d1f9      	bne.n	240104dc <f_read+0x224>
240104e8:	e752      	b.n	24010390 <f_read+0xd8>
240104ea:	f8dd 8008 	ldr.w	r8, [sp, #8]
240104ee:	e6f7      	b.n	240102e0 <f_read+0x28>
240104f0:	3a01      	subs	r2, #1
240104f2:	f504 7c0b 	add.w	ip, r4, #556	; 0x22c
			*d++ = *s++;
240104f6:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
240104fa:	458c      	cmp	ip, r1
			*d++ = *s++;
240104fc:	f802 3f01 	strb.w	r3, [r2, #1]!
		} while (--cnt);
24010500:	d1f9      	bne.n	240104f6 <f_read+0x23e>
24010502:	e745      	b.n	24010390 <f_read+0xd8>

24010504 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
24010504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24010508:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
2401050a:	2300      	movs	r3, #0
{
2401050c:	b085      	sub	sp, #20
	*bw = 0;	/* Clear write byte counter */
2401050e:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
24010510:	b150      	cbz	r0, 24010528 <f_write+0x24>
24010512:	6803      	ldr	r3, [r0, #0]
24010514:	4604      	mov	r4, r0
24010516:	b13b      	cbz	r3, 24010528 <f_write+0x24>
24010518:	4616      	mov	r6, r2
2401051a:	781a      	ldrb	r2, [r3, #0]
2401051c:	b122      	cbz	r2, 24010528 <f_write+0x24>
2401051e:	460d      	mov	r5, r1
24010520:	88da      	ldrh	r2, [r3, #6]
24010522:	8881      	ldrh	r1, [r0, #4]
24010524:	4291      	cmp	r1, r2
24010526:	d005      	beq.n	24010534 <f_write+0x30>
	FRESULT res = FR_INVALID_OBJECT;
24010528:	f04f 0809 	mov.w	r8, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
2401052c:	4640      	mov	r0, r8
2401052e:	b005      	add	sp, #20
24010530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
24010534:	7858      	ldrb	r0, [r3, #1]
24010536:	f7fd fb33 	bl	2400dba0 <disk_status>
2401053a:	07c0      	lsls	r0, r0, #31
2401053c:	d4f4      	bmi.n	24010528 <f_write+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
2401053e:	f894 8015 	ldrb.w	r8, [r4, #21]
24010542:	f1b8 0f00 	cmp.w	r8, #0
24010546:	d1f1      	bne.n	2401052c <f_write+0x28>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
24010548:	7d22      	ldrb	r2, [r4, #20]
2401054a:	0791      	lsls	r1, r2, #30
2401054c:	f140 80e6 	bpl.w	2401071c <f_write+0x218>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
24010550:	69a3      	ldr	r3, [r4, #24]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
24010552:	f8d4 9000 	ldr.w	r9, [r4]
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
24010556:	42f3      	cmn	r3, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
24010558:	bf28      	it	cs
2401055a:	43de      	mvncs	r6, r3
	for ( ;  btw;							/* Repeat until all data written */
2401055c:	2e00      	cmp	r6, #0
2401055e:	f000 80cf 	beq.w	24010700 <f_write+0x1fc>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
24010562:	f504 720b 	add.w	r2, r4, #556	; 0x22c
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
24010566:	f104 0a2c 	add.w	sl, r4, #44	; 0x2c
2401056a:	9201      	str	r2, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
2401056c:	f3c3 0208 	ubfx	r2, r3, #0, #9
24010570:	2a00      	cmp	r2, #0
24010572:	d15e      	bne.n	24010632 <f_write+0x12e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
24010574:	f8b9 b00a 	ldrh.w	fp, [r9, #10]
24010578:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
			if (csect == 0) {				/* On the cluster boundary? */
2401057c:	ea1b 2b53 	ands.w	fp, fp, r3, lsr #9
24010580:	d110      	bne.n	240105a4 <f_write+0xa0>
				if (fp->fptr == 0) {		/* On the top of the file? */
24010582:	2b00      	cmp	r3, #0
24010584:	f040 80b4 	bne.w	240106f0 <f_write+0x1ec>
					clst = fp->obj.sclust;	/* Follow from the origin */
24010588:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
2401058a:	2800      	cmp	r0, #0
2401058c:	f000 80c9 	beq.w	24010722 <f_write+0x21e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
24010590:	2801      	cmp	r0, #1
24010592:	f000 8087 	beq.w	240106a4 <f_write+0x1a0>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
24010596:	1c43      	adds	r3, r0, #1
24010598:	f000 80a3 	beq.w	240106e2 <f_write+0x1de>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
2401059c:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
2401059e:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
240105a0:	b903      	cbnz	r3, 240105a4 <f_write+0xa0>
240105a2:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
240105a4:	f994 3014 	ldrsb.w	r3, [r4, #20]
240105a8:	2b00      	cmp	r3, #0
240105aa:	f2c0 808d 	blt.w	240106c8 <f_write+0x1c4>
	clst -= 2;
240105ae:	69e3      	ldr	r3, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
240105b0:	f8d9 2018 	ldr.w	r2, [r9, #24]
	clst -= 2;
240105b4:	3b02      	subs	r3, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
240105b6:	3a02      	subs	r2, #2
240105b8:	4293      	cmp	r3, r2
240105ba:	d273      	bcs.n	240106a4 <f_write+0x1a0>
	return clst * fs->csize + fs->database;
240105bc:	f8b9 100a 	ldrh.w	r1, [r9, #10]
240105c0:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
240105c4:	fb01 2203 	mla	r2, r1, r3, r2
			if (!sect) ABORT(fs, FR_INT_ERR);
240105c8:	2a00      	cmp	r2, #0
240105ca:	d06b      	beq.n	240106a4 <f_write+0x1a0>
			if (cc) {						/* Write maximum contiguous sectors directly */
240105cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
240105d0:	445a      	add	r2, fp
			if (cc) {						/* Write maximum contiguous sectors directly */
240105d2:	d36e      	bcc.n	240106b2 <f_write+0x1ae>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
240105d4:	eb0b 2056 	add.w	r0, fp, r6, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
240105d8:	0a73      	lsrs	r3, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
240105da:	4288      	cmp	r0, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
240105dc:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
240105e0:	bf88      	it	hi
240105e2:	eba1 030b 	subhi.w	r3, r1, fp
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
240105e6:	4629      	mov	r1, r5
240105e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
240105ec:	f7fd fb04 	bl	2400dbf8 <disk_write>
240105f0:	2800      	cmp	r0, #0
240105f2:	d176      	bne.n	240106e2 <f_write+0x1de>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
240105f4:	6a21      	ldr	r1, [r4, #32]
240105f6:	9a02      	ldr	r2, [sp, #8]
240105f8:	9b03      	ldr	r3, [sp, #12]
240105fa:	1a8a      	subs	r2, r1, r2
240105fc:	429a      	cmp	r2, r3
240105fe:	f0c0 80a4 	bcc.w	2401074a <f_write+0x246>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
24010602:	eb05 2243 	add.w	r2, r5, r3, lsl #9
24010606:	ea4f 2c43 	mov.w	ip, r3, lsl #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
2401060a:	69a3      	ldr	r3, [r4, #24]
2401060c:	4615      	mov	r5, r2
2401060e:	68e2      	ldr	r2, [r4, #12]
24010610:	4463      	add	r3, ip
24010612:	429a      	cmp	r2, r3
24010614:	61a3      	str	r3, [r4, #24]
24010616:	bf38      	it	cc
24010618:	461a      	movcc	r2, r3
	for ( ;  btw;							/* Repeat until all data written */
2401061a:	ebb6 060c 	subs.w	r6, r6, ip
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
2401061e:	60e2      	str	r2, [r4, #12]
24010620:	683b      	ldr	r3, [r7, #0]
24010622:	4463      	add	r3, ip
24010624:	603b      	str	r3, [r7, #0]
	for ( ;  btw;							/* Repeat until all data written */
24010626:	d06a      	beq.n	240106fe <f_write+0x1fa>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
24010628:	69a3      	ldr	r3, [r4, #24]
2401062a:	f3c3 0208 	ubfx	r2, r3, #0, #9
2401062e:	2a00      	cmp	r2, #0
24010630:	d0a0      	beq.n	24010574 <f_write+0x70>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
24010632:	f5c2 7c00 	rsb	ip, r2, #512	; 0x200
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
24010636:	eb0a 0302 	add.w	r3, sl, r2
2401063a:	1c6a      	adds	r2, r5, #1
2401063c:	45b4      	cmp	ip, r6
2401063e:	eba3 0202 	sub.w	r2, r3, r2
24010642:	bf28      	it	cs
24010644:	46b4      	movcs	ip, r6
void mem_cpy (void* dst, const void* src, UINT cnt) {
24010646:	2a02      	cmp	r2, #2
24010648:	f10c 3bff 	add.w	fp, ip, #4294967295	; 0xffffffff
2401064c:	d95c      	bls.n	24010708 <f_write+0x204>
2401064e:	f1bb 0f05 	cmp.w	fp, #5
24010652:	d959      	bls.n	24010708 <f_write+0x204>
24010654:	f02c 0e03 	bic.w	lr, ip, #3
24010658:	461a      	mov	r2, r3
2401065a:	4629      	mov	r1, r5
2401065c:	449e      	add	lr, r3
			*d++ = *s++;
2401065e:	f851 0b04 	ldr.w	r0, [r1], #4
24010662:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
24010666:	4596      	cmp	lr, r2
24010668:	d1f9      	bne.n	2401065e <f_write+0x15a>
2401066a:	f02c 0103 	bic.w	r1, ip, #3
2401066e:	458c      	cmp	ip, r1
24010670:	eb03 0001 	add.w	r0, r3, r1
24010674:	eb05 0201 	add.w	r2, r5, r1
24010678:	d00f      	beq.n	2401069a <f_write+0x196>
			*d++ = *s++;
2401067a:	f815 e001 	ldrb.w	lr, [r5, r1]
		} while (--cnt);
2401067e:	ebbb 0b01 	subs.w	fp, fp, r1
			*d++ = *s++;
24010682:	f803 e001 	strb.w	lr, [r3, r1]
		} while (--cnt);
24010686:	d006      	beq.n	24010696 <f_write+0x192>
			*d++ = *s++;
24010688:	7853      	ldrb	r3, [r2, #1]
		} while (--cnt);
2401068a:	f1bb 0f01 	cmp.w	fp, #1
			*d++ = *s++;
2401068e:	7043      	strb	r3, [r0, #1]
24010690:	bf1c      	itt	ne
24010692:	7893      	ldrbne	r3, [r2, #2]
24010694:	7083      	strbne	r3, [r0, #2]
		} while (--cnt);
24010696:	eb05 020c 	add.w	r2, r5, ip
		fp->flag |= FA_DIRTY;
2401069a:	7d23      	ldrb	r3, [r4, #20]
2401069c:	f063 037f 	orn	r3, r3, #127	; 0x7f
240106a0:	7523      	strb	r3, [r4, #20]
240106a2:	e7b2      	b.n	2401060a <f_write+0x106>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
240106a4:	2302      	movs	r3, #2
240106a6:	4698      	mov	r8, r3
240106a8:	7563      	strb	r3, [r4, #21]
}
240106aa:	4640      	mov	r0, r8
240106ac:	b005      	add	sp, #20
240106ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect && 		/* Fill sector cache with file data */
240106b2:	6a23      	ldr	r3, [r4, #32]
240106b4:	4293      	cmp	r3, r2
				fp->fptr < fp->obj.objsize &&
240106b6:	69a3      	ldr	r3, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
240106b8:	d002      	beq.n	240106c0 <f_write+0x1bc>
240106ba:	68e1      	ldr	r1, [r4, #12]
240106bc:	428b      	cmp	r3, r1
240106be:	d338      	bcc.n	24010732 <f_write+0x22e>
			fp->sect = sect;
240106c0:	6222      	str	r2, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
240106c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
240106c6:	e7b4      	b.n	24010632 <f_write+0x12e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
240106c8:	2301      	movs	r3, #1
240106ca:	6a22      	ldr	r2, [r4, #32]
240106cc:	4651      	mov	r1, sl
240106ce:	f899 0001 	ldrb.w	r0, [r9, #1]
240106d2:	f7fd fa91 	bl	2400dbf8 <disk_write>
240106d6:	b920      	cbnz	r0, 240106e2 <f_write+0x1de>
				fp->flag &= (BYTE)~FA_DIRTY;
240106d8:	7d23      	ldrb	r3, [r4, #20]
240106da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
240106de:	7523      	strb	r3, [r4, #20]
240106e0:	e765      	b.n	240105ae <f_write+0xaa>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
240106e2:	2301      	movs	r3, #1
240106e4:	4698      	mov	r8, r3
240106e6:	7563      	strb	r3, [r4, #21]
}
240106e8:	4640      	mov	r0, r8
240106ea:	b005      	add	sp, #20
240106ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
240106f0:	69e1      	ldr	r1, [r4, #28]
240106f2:	4620      	mov	r0, r4
240106f4:	f7fe f908 	bl	2400e908 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
240106f8:	2800      	cmp	r0, #0
240106fa:	f47f af49 	bne.w	24010590 <f_write+0x8c>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
240106fe:	7d22      	ldrb	r2, [r4, #20]
24010700:	f042 0240 	orr.w	r2, r2, #64	; 0x40
24010704:	7522      	strb	r2, [r4, #20]
	LEAVE_FF(fs, FR_OK);
24010706:	e711      	b.n	2401052c <f_write+0x28>
24010708:	3b01      	subs	r3, #1
2401070a:	eb05 020c 	add.w	r2, r5, ip
			*d++ = *s++;
2401070e:	f815 1b01 	ldrb.w	r1, [r5], #1
		} while (--cnt);
24010712:	4295      	cmp	r5, r2
			*d++ = *s++;
24010714:	f803 1f01 	strb.w	r1, [r3, #1]!
		} while (--cnt);
24010718:	d1f9      	bne.n	2401070e <f_write+0x20a>
2401071a:	e7be      	b.n	2401069a <f_write+0x196>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
2401071c:	f04f 0807 	mov.w	r8, #7
24010720:	e704      	b.n	2401052c <f_write+0x28>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
24010722:	4659      	mov	r1, fp
24010724:	4620      	mov	r0, r4
24010726:	f7fe f8ef 	bl	2400e908 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
2401072a:	2800      	cmp	r0, #0
2401072c:	f47f af30 	bne.w	24010590 <f_write+0x8c>
24010730:	e7e5      	b.n	240106fe <f_write+0x1fa>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
24010732:	2301      	movs	r3, #1
24010734:	4651      	mov	r1, sl
24010736:	f899 0001 	ldrb.w	r0, [r9, #1]
2401073a:	9202      	str	r2, [sp, #8]
2401073c:	f7fd fa4c 	bl	2400dbd8 <disk_read>
				fp->fptr < fp->obj.objsize &&
24010740:	2800      	cmp	r0, #0
24010742:	d1ce      	bne.n	240106e2 <f_write+0x1de>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
24010744:	69a3      	ldr	r3, [r4, #24]
24010746:	9a02      	ldr	r2, [sp, #8]
24010748:	e7ba      	b.n	240106c0 <f_write+0x1bc>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
2401074a:	eb05 2042 	add.w	r0, r5, r2, lsl #9
2401074e:	1c42      	adds	r2, r0, #1
24010750:	4601      	mov	r1, r0
void mem_cpy (void* dst, const void* src, UINT cnt) {
24010752:	ebaa 0202 	sub.w	r2, sl, r2
24010756:	2a02      	cmp	r2, #2
24010758:	d90d      	bls.n	24010776 <f_write+0x272>
2401075a:	4652      	mov	r2, sl
2401075c:	f8dd c004 	ldr.w	ip, [sp, #4]
			*d++ = *s++;
24010760:	f851 0b04 	ldr.w	r0, [r1], #4
24010764:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
24010768:	4562      	cmp	r2, ip
2401076a:	d1f9      	bne.n	24010760 <f_write+0x25c>
					fp->flag &= (BYTE)~FA_DIRTY;
2401076c:	7d22      	ldrb	r2, [r4, #20]
2401076e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
24010772:	7522      	strb	r2, [r4, #20]
24010774:	e745      	b.n	24010602 <f_write+0xfe>
24010776:	f104 022b 	add.w	r2, r4, #43	; 0x2b
2401077a:	f500 7c00 	add.w	ip, r0, #512	; 0x200
			*d++ = *s++;
2401077e:	f811 0b01 	ldrb.w	r0, [r1], #1
		} while (--cnt);
24010782:	458c      	cmp	ip, r1
			*d++ = *s++;
24010784:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
24010788:	d1f9      	bne.n	2401077e <f_write+0x27a>
2401078a:	e7ef      	b.n	2401076c <f_write+0x268>

2401078c <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2401078c:	b158      	cbz	r0, 240107a6 <f_close+0x1a>
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
2401078e:	b570      	push	{r4, r5, r6, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
24010790:	6803      	ldr	r3, [r0, #0]
24010792:	4604      	mov	r4, r0
24010794:	b12b      	cbz	r3, 240107a2 <f_close+0x16>
24010796:	781a      	ldrb	r2, [r3, #0]
24010798:	b11a      	cbz	r2, 240107a2 <f_close+0x16>
2401079a:	8881      	ldrh	r1, [r0, #4]
2401079c:	88da      	ldrh	r2, [r3, #6]
2401079e:	4291      	cmp	r1, r2
240107a0:	d003      	beq.n	240107aa <f_close+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
240107a2:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
240107a4:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_INVALID_OBJECT;
240107a6:	2009      	movs	r0, #9
}
240107a8:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
240107aa:	7858      	ldrb	r0, [r3, #1]
240107ac:	f7fd f9f8 	bl	2400dba0 <disk_status>
240107b0:	07c1      	lsls	r1, r0, #31
240107b2:	d4f6      	bmi.n	240107a2 <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
240107b4:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
240107b6:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
240107b8:	065a      	lsls	r2, r3, #25
240107ba:	d52e      	bpl.n	2401081a <f_close+0x8e>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
240107bc:	061b      	lsls	r3, r3, #24
240107be:	d451      	bmi.n	24010864 <f_close+0xd8>
			tm = GET_FATTIME();				/* Modified time */
240107c0:	f7fd f91c 	bl	2400d9fc <get_fattime>
				res = move_window(fs, fp->dir_sect);
240107c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
240107c6:	4606      	mov	r6, r0
				res = move_window(fs, fp->dir_sect);
240107c8:	4628      	mov	r0, r5
240107ca:	f7fd fbbf 	bl	2400df4c <move_window>
				if (res == FR_OK) {
240107ce:	2800      	cmp	r0, #0
240107d0:	d1e8      	bne.n	240107a4 <f_close+0x18>
					dir = fp->dir_ptr;
240107d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
240107d4:	7ada      	ldrb	r2, [r3, #11]
240107d6:	f042 0220 	orr.w	r2, r2, #32
240107da:	72da      	strb	r2, [r3, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
240107dc:	68a2      	ldr	r2, [r4, #8]
240107de:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
240107e0:	f3c2 2007 	ubfx	r0, r2, #8, #8
240107e4:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
240107e6:	76d8      	strb	r0, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
240107e8:	7809      	ldrb	r1, [r1, #0]
240107ea:	2903      	cmp	r1, #3
240107ec:	d103      	bne.n	240107f6 <f_close+0x6a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
240107ee:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
240107f0:	751a      	strb	r2, [r3, #20]
240107f2:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
240107f4:	755a      	strb	r2, [r3, #21]
	*ptr++ = (BYTE)val; val >>= 8;
240107f6:	68e1      	ldr	r1, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
240107f8:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
240107fa:	f8c3 6016 	str.w	r6, [r3, #22]
					res = sync_fs(fs);					/* Restore it to the directory */
240107fe:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
24010800:	61d9      	str	r1, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
24010802:	825a      	strh	r2, [r3, #18]
					fs->wflag = 1;
24010804:	2301      	movs	r3, #1
24010806:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
24010808:	f7fe f820 	bl	2400e84c <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
2401080c:	7d23      	ldrb	r3, [r4, #20]
2401080e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
24010812:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
24010814:	2800      	cmp	r0, #0
24010816:	d1c5      	bne.n	240107a4 <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
24010818:	6825      	ldr	r5, [r4, #0]
2401081a:	2d00      	cmp	r5, #0
2401081c:	d0c1      	beq.n	240107a2 <f_close+0x16>
2401081e:	782b      	ldrb	r3, [r5, #0]
24010820:	2b00      	cmp	r3, #0
24010822:	d0be      	beq.n	240107a2 <f_close+0x16>
24010824:	88a2      	ldrh	r2, [r4, #4]
24010826:	88eb      	ldrh	r3, [r5, #6]
24010828:	429a      	cmp	r2, r3
2401082a:	d1ba      	bne.n	240107a2 <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
2401082c:	7868      	ldrb	r0, [r5, #1]
2401082e:	f7fd f9b7 	bl	2400dba0 <disk_status>
24010832:	f010 0001 	ands.w	r0, r0, #1
24010836:	d1b4      	bne.n	240107a2 <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
24010838:	6923      	ldr	r3, [r4, #16]
2401083a:	3b01      	subs	r3, #1
2401083c:	2b01      	cmp	r3, #1
2401083e:	d81e      	bhi.n	2401087e <f_close+0xf2>
		n = Files[i].ctr;
24010840:	4912      	ldr	r1, [pc, #72]	; (2401088c <f_close+0x100>)
24010842:	011d      	lsls	r5, r3, #4
24010844:	eb01 1303 	add.w	r3, r1, r3, lsl #4
24010848:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
2401084a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
2401084e:	d01a      	beq.n	24010886 <f_close+0xfa>
		if (n > 0) n--;				/* Decrement read mode open count */
24010850:	b11a      	cbz	r2, 2401085a <f_close+0xce>
24010852:	3a01      	subs	r2, #1
24010854:	b292      	uxth	r2, r2
		Files[i].ctr = n;
24010856:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
24010858:	b90a      	cbnz	r2, 2401085e <f_close+0xd2>
2401085a:	2300      	movs	r3, #0
2401085c:	514b      	str	r3, [r1, r5]
				fp->obj.fs = 0;			/* Invalidate file object */
2401085e:	2300      	movs	r3, #0
24010860:	6023      	str	r3, [r4, #0]
}
24010862:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
24010864:	2301      	movs	r3, #1
24010866:	6a22      	ldr	r2, [r4, #32]
24010868:	f104 012c 	add.w	r1, r4, #44	; 0x2c
2401086c:	7868      	ldrb	r0, [r5, #1]
2401086e:	f7fd f9c3 	bl	2400dbf8 <disk_write>
24010872:	b930      	cbnz	r0, 24010882 <f_close+0xf6>
				fp->flag &= (BYTE)~FA_DIRTY;
24010874:	7d23      	ldrb	r3, [r4, #20]
24010876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2401087a:	7523      	strb	r3, [r4, #20]
2401087c:	e7a0      	b.n	240107c0 <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
2401087e:	2002      	movs	r0, #2
}
24010880:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
24010882:	2001      	movs	r0, #1
}
24010884:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
24010886:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
24010888:	e7e7      	b.n	2401085a <f_close+0xce>
2401088a:	bf00      	nop
2401088c:	2001dbf0 	.word	0x2001dbf0

24010890 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
24010890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
24010894:	b150      	cbz	r0, 240108ac <f_findnext+0x1c>
24010896:	4605      	mov	r5, r0
24010898:	460e      	mov	r6, r1
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2401089a:	4c3b      	ldr	r4, [pc, #236]	; (24010988 <f_findnext+0xf8>)
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2401089c:	682b      	ldr	r3, [r5, #0]
2401089e:	b12b      	cbz	r3, 240108ac <f_findnext+0x1c>
240108a0:	781a      	ldrb	r2, [r3, #0]
240108a2:	b11a      	cbz	r2, 240108ac <f_findnext+0x1c>
240108a4:	88a9      	ldrh	r1, [r5, #4]
240108a6:	88da      	ldrh	r2, [r3, #6]
240108a8:	4291      	cmp	r1, r2
240108aa:	d003      	beq.n	240108b4 <f_findnext+0x24>
	FRESULT res = FR_INVALID_OBJECT;
240108ac:	2709      	movs	r7, #9
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
240108ae:	4638      	mov	r0, r7
240108b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
240108b4:	7858      	ldrb	r0, [r3, #1]
240108b6:	f7fd f973 	bl	2400dba0 <disk_status>
240108ba:	07c3      	lsls	r3, r0, #31
240108bc:	d4f6      	bmi.n	240108ac <f_findnext+0x1c>
		if (!fno) {
240108be:	2e00      	cmp	r6, #0
240108c0:	d059      	beq.n	24010976 <f_findnext+0xe6>
			res = dir_read(dp, 0);			/* Read an item */
240108c2:	4628      	mov	r0, r5
240108c4:	f7fd fdce 	bl	2400e464 <dir_read.constprop.0>
			if (res == FR_OK) {				/* A valid entry is found */
240108c8:	f010 08fb 	ands.w	r8, r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
240108cc:	4607      	mov	r7, r0
			if (res == FR_OK) {				/* A valid entry is found */
240108ce:	d1ee      	bne.n	240108ae <f_findnext+0x1e>
				get_fileinfo(dp, fno);		/* Get the object information */
240108d0:	4631      	mov	r1, r6
240108d2:	4628      	mov	r0, r5
240108d4:	f7fd fa7a 	bl	2400ddcc <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
240108d8:	4641      	mov	r1, r8
240108da:	4628      	mov	r0, r5
240108dc:	f7fe fcb8 	bl	2400f250 <dir_next>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
240108e0:	f010 07fb 	ands.w	r7, r0, #251	; 0xfb
240108e4:	d14d      	bne.n	24010982 <f_findnext+0xf2>
240108e6:	7db3      	ldrb	r3, [r6, #22]
240108e8:	2b00      	cmp	r3, #0
240108ea:	d0e0      	beq.n	240108ae <f_findnext+0x1e>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
240108ec:	f106 0116 	add.w	r1, r6, #22
	if (!*pat && inf) return 1;		/* (short circuit) */
240108f0:	f8d5 c034 	ldr.w	ip, [r5, #52]	; 0x34
240108f4:	e00f      	b.n	24010916 <f_findnext+0x86>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
240108f6:	3a20      	subs	r2, #32
240108f8:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
240108fa:	f811 0b01 	ldrb.w	r0, [r1], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
240108fe:	f1a0 0e61 	sub.w	lr, r0, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
24010902:	b283      	uxth	r3, r0
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
24010904:	f1be 0f19 	cmp.w	lr, #25
24010908:	d817      	bhi.n	2401093a <f_findnext+0xaa>
2401090a:	3b20      	subs	r3, #32
2401090c:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
2401090e:	4293      	cmp	r3, r2
24010910:	d1c4      	bne.n	2401089c <f_findnext+0xc>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
24010912:	2b00      	cmp	r3, #0
24010914:	d0cb      	beq.n	240108ae <f_findnext+0x1e>
24010916:	4662      	mov	r2, ip
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
24010918:	f81c 3b01 	ldrb.w	r3, [ip], #1
2401091c:	2b3f      	cmp	r3, #63	; 0x3f
2401091e:	d012      	beq.n	24010946 <f_findnext+0xb6>
24010920:	2b2a      	cmp	r3, #42	; 0x2a
24010922:	d010      	beq.n	24010946 <f_findnext+0xb6>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
24010924:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
24010928:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2401092a:	2819      	cmp	r0, #25
2401092c:	d9e3      	bls.n	240108f6 <f_findnext+0x66>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2401092e:	2a7f      	cmp	r2, #127	; 0x7f
24010930:	d9e3      	bls.n	240108fa <f_findnext+0x6a>
24010932:	4423      	add	r3, r4
24010934:	f813 2c80 	ldrb.w	r2, [r3, #-128]
24010938:	e7df      	b.n	240108fa <f_findnext+0x6a>
2401093a:	2b7f      	cmp	r3, #127	; 0x7f
2401093c:	d9e7      	bls.n	2401090e <f_findnext+0x7e>
2401093e:	4420      	add	r0, r4
24010940:	f810 3c80 	ldrb.w	r3, [r0, #-128]
24010944:	e7e3      	b.n	2401090e <f_findnext+0x7e>
24010946:	4694      	mov	ip, r2
				nm = nx = 0;
24010948:	2300      	movs	r3, #0
2401094a:	f81c eb01 	ldrb.w	lr, [ip], #1
2401094e:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
24010950:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
24010954:	4660      	mov	r0, ip
				} while (*pp == '?' || *pp == '*');
24010956:	f81c eb01 	ldrb.w	lr, [ip], #1
					if (*pp++ == '?') nm++; else nx = 1;
2401095a:	bf0c      	ite	eq
2401095c:	3201      	addeq	r2, #1
2401095e:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
24010960:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
24010964:	d0f4      	beq.n	24010950 <f_findnext+0xc0>
24010966:	f1be 0f2a 	cmp.w	lr, #42	; 0x2a
2401096a:	d0f1      	beq.n	24010950 <f_findnext+0xc0>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
2401096c:	f7fd f9b8 	bl	2400dce0 <pattern_matching>
24010970:	2800      	cmp	r0, #0
24010972:	d093      	beq.n	2401089c <f_findnext+0xc>
24010974:	e79b      	b.n	240108ae <f_findnext+0x1e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
24010976:	4631      	mov	r1, r6
24010978:	4628      	mov	r0, r5
}
2401097a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
2401097e:	f7fe b883 	b.w	2400ea88 <dir_sdi>
24010982:	4607      	mov	r7, r0
24010984:	e793      	b.n	240108ae <f_findnext+0x1e>
24010986:	bf00      	nop
24010988:	2401c6d4 	.word	0x2401c6d4

2401098c <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
2401098c:	b570      	push	{r4, r5, r6, lr}
2401098e:	b082      	sub	sp, #8
24010990:	4615      	mov	r5, r2
24010992:	4604      	mov	r4, r0
24010994:	460e      	mov	r6, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
24010996:	6343      	str	r3, [r0, #52]	; 0x34
	res = find_volume(&path, &fs, 0);
24010998:	2200      	movs	r2, #0
2401099a:	a901      	add	r1, sp, #4
2401099c:	4668      	mov	r0, sp
2401099e:	9500      	str	r5, [sp, #0]
240109a0:	f7fd fb12 	bl	2400dfc8 <find_volume>
	if (res == FR_OK) {
240109a4:	b118      	cbz	r0, 240109ae <f_findfirst+0x22>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
240109a6:	2300      	movs	r3, #0
240109a8:	6023      	str	r3, [r4, #0]
	res = f_opendir(dp, path);		/* Open the target directory */
	if (res == FR_OK) {
		res = f_findnext(dp, fno);	/* Find the first item */
	}
	return res;
}
240109aa:	b002      	add	sp, #8
240109ac:	bd70      	pop	{r4, r5, r6, pc}
		res = follow_path(dp, path);			/* Follow the path to the directory */
240109ae:	e9dd 1500 	ldrd	r1, r5, [sp]
240109b2:	4620      	mov	r0, r4
		obj->fs = fs;
240109b4:	6025      	str	r5, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
240109b6:	f7fe fabf 	bl	2400ef38 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
240109ba:	bb00      	cbnz	r0, 240109fe <f_findfirst+0x72>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
240109bc:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
240109c0:	2b00      	cmp	r3, #0
240109c2:	db0b      	blt.n	240109dc <f_findfirst+0x50>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
240109c4:	79a3      	ldrb	r3, [r4, #6]
240109c6:	06db      	lsls	r3, r3, #27
240109c8:	d51f      	bpl.n	24010a0a <f_findfirst+0x7e>
	if (fs->fs_type == FS_FAT32) {
240109ca:	7829      	ldrb	r1, [r5, #0]
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
240109cc:	6a22      	ldr	r2, [r4, #32]
	if (fs->fs_type == FS_FAT32) {
240109ce:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
240109d0:	8b53      	ldrh	r3, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
240109d2:	d102      	bne.n	240109da <f_findfirst+0x4e>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
240109d4:	8a92      	ldrh	r2, [r2, #20]
240109d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
240109da:	60a3      	str	r3, [r4, #8]
				obj->id = fs->id;
240109dc:	88eb      	ldrh	r3, [r5, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
240109de:	2100      	movs	r1, #0
240109e0:	4620      	mov	r0, r4
				obj->id = fs->id;
240109e2:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
240109e4:	f7fe f850 	bl	2400ea88 <dir_sdi>
				if (res == FR_OK) {
240109e8:	b948      	cbnz	r0, 240109fe <f_findfirst+0x72>
					if (obj->sclust) {
240109ea:	68a3      	ldr	r3, [r4, #8]
240109ec:	b97b      	cbnz	r3, 24010a0e <f_findfirst+0x82>
						obj->lockid = 0;	/* Root directory need not to be locked */
240109ee:	6123      	str	r3, [r4, #16]
		res = f_findnext(dp, fno);	/* Find the first item */
240109f0:	4631      	mov	r1, r6
240109f2:	4620      	mov	r0, r4
}
240109f4:	b002      	add	sp, #8
240109f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		res = f_findnext(dp, fno);	/* Find the first item */
240109fa:	f7ff bf49 	b.w	24010890 <f_findnext>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
240109fe:	2804      	cmp	r0, #4
24010a00:	d1d1      	bne.n	240109a6 <f_findfirst+0x1a>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
24010a02:	2300      	movs	r3, #0
	res = f_opendir(dp, path);		/* Open the target directory */
24010a04:	2005      	movs	r0, #5
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
24010a06:	6023      	str	r3, [r4, #0]
	if (res == FR_OK) {
24010a08:	e7cf      	b.n	240109aa <f_findfirst+0x1e>
					res = FR_NO_PATH;
24010a0a:	2005      	movs	r0, #5
24010a0c:	e7cb      	b.n	240109a6 <f_findfirst+0x1a>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
24010a0e:	4601      	mov	r1, r0
24010a10:	4620      	mov	r0, r4
24010a12:	f7fd f90d 	bl	2400dc30 <inc_lock>
24010a16:	6120      	str	r0, [r4, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
24010a18:	2800      	cmp	r0, #0
24010a1a:	d1e9      	bne.n	240109f0 <f_findfirst+0x64>
24010a1c:	2012      	movs	r0, #18
24010a1e:	e7c2      	b.n	240109a6 <f_findfirst+0x1a>

24010a20 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
24010a20:	4b11      	ldr	r3, [pc, #68]	; (24010a68 <FATFS_LinkDriver+0x48>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
24010a22:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
24010a24:	7a5c      	ldrb	r4, [r3, #9]
24010a26:	b9cc      	cbnz	r4, 24010a5c <FATFS_LinkDriver+0x3c>
    disk.is_initialized[disk.nbr] = 0;
24010a28:	f004 02ff 	and.w	r2, r4, #255	; 0xff
24010a2c:	7a5c      	ldrb	r4, [r3, #9]
24010a2e:	551a      	strb	r2, [r3, r4]
    disk.drv[disk.nbr] = drv;
24010a30:	7a5c      	ldrb	r4, [r3, #9]
24010a32:	eb03 0484 	add.w	r4, r3, r4, lsl #2
24010a36:	6060      	str	r0, [r4, #4]
    disk.lun[disk.nbr] = lun;
24010a38:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
24010a3a:	7a58      	ldrb	r0, [r3, #9]
    disk.lun[disk.nbr] = lun;
24010a3c:	441c      	add	r4, r3
24010a3e:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
24010a40:	1c44      	adds	r4, r0, #1
    path[0] = DiskNum + '0';
24010a42:	3030      	adds	r0, #48	; 0x30
    DiskNum = disk.nbr++;
24010a44:	b2e4      	uxtb	r4, r4
24010a46:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
24010a48:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
24010a4a:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
24010a4c:	7008      	strb	r0, [r1, #0]
    path[1] = ':';
24010a4e:	704c      	strb	r4, [r1, #1]
  return FATFS_LinkDriverEx(drv, path, 0);
}
24010a50:	4610      	mov	r0, r2
24010a52:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[3] = 0;
24010a56:	70ca      	strb	r2, [r1, #3]
    path[2] = '/';
24010a58:	708b      	strb	r3, [r1, #2]
}
24010a5a:	4770      	bx	lr
  uint8_t ret = 1;
24010a5c:	2201      	movs	r2, #1
}
24010a5e:	f85d 4b04 	ldr.w	r4, [sp], #4
24010a62:	4610      	mov	r0, r2
24010a64:	4770      	bx	lr
24010a66:	bf00      	nop
24010a68:	2001de14 	.word	0x2001de14

24010a6c <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
24010a6c:	287f      	cmp	r0, #127	; 0x7f
24010a6e:	d913      	bls.n	24010a98 <ff_convert+0x2c>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
24010a70:	b979      	cbnz	r1, 24010a92 <ff_convert+0x26>
24010a72:	4b0c      	ldr	r3, [pc, #48]	; (24010aa4 <ff_convert+0x38>)
24010a74:	e001      	b.n	24010a7a <ff_convert+0xe>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
24010a76:	2980      	cmp	r1, #128	; 0x80
24010a78:	d00d      	beq.n	24010a96 <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
24010a7a:	f833 2b02 	ldrh.w	r2, [r3], #2
24010a7e:	fa1f fc81 	uxth.w	ip, r1
			for (c = 0; c < 0x80; c++) {
24010a82:	3101      	adds	r1, #1
				if (chr == Tbl[c]) break;
24010a84:	4282      	cmp	r2, r0
24010a86:	d1f6      	bne.n	24010a76 <ff_convert+0xa>
			}
			c = (c + 0x80) & 0xFF;
24010a88:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
24010a8c:	fa1f f08c 	uxth.w	r0, ip
24010a90:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
24010a92:	28ff      	cmp	r0, #255	; 0xff
24010a94:	d901      	bls.n	24010a9a <ff_convert+0x2e>
24010a96:	2000      	movs	r0, #0
		}
	}

	return c;
}
24010a98:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
24010a9a:	4b02      	ldr	r3, [pc, #8]	; (24010aa4 <ff_convert+0x38>)
24010a9c:	3880      	subs	r0, #128	; 0x80
24010a9e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
24010aa2:	4770      	bx	lr
24010aa4:	2401c764 	.word	0x2401c764

24010aa8 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
24010aa8:	4b23      	ldr	r3, [pc, #140]	; (24010b38 <ff_wtoupper+0x90>)
24010aaa:	4a24      	ldr	r2, [pc, #144]	; (24010b3c <ff_wtoupper+0x94>)
24010aac:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
24010ab0:	bf28      	it	cs
24010ab2:	4613      	movcs	r3, r2
{
24010ab4:	b510      	push	{r4, lr}
24010ab6:	3304      	adds	r3, #4
24010ab8:	e00a      	b.n	24010ad0 <ff_wtoupper+0x28>
	for (;;) {
		bc = *p++;								/* Get block base */
		if (!bc || chr < bc) break;
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
24010aba:	f833 2c02 	ldrh.w	r2, [r3, #-2]
24010abe:	fa5f fc82 	uxtb.w	ip, r2
24010ac2:	0a12      	lsrs	r2, r2, #8
		if (chr < bc + nc) {	/* In the block? */
24010ac4:	eb0c 0e01 	add.w	lr, ip, r1
24010ac8:	4570      	cmp	r0, lr
24010aca:	db09      	blt.n	24010ae0 <ff_wtoupper+0x38>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
24010acc:	3304      	adds	r3, #4
24010ace:	b182      	cbz	r2, 24010af2 <ff_wtoupper+0x4a>
		bc = *p++;								/* Get block base */
24010ad0:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		if (!bc || chr < bc) break;
24010ad4:	461c      	mov	r4, r3
24010ad6:	1e4a      	subs	r2, r1, #1
24010ad8:	b292      	uxth	r2, r2
24010ada:	4290      	cmp	r0, r2
24010adc:	d8ed      	bhi.n	24010aba <ff_wtoupper+0x12>
	}

	return chr;
}
24010ade:	bd10      	pop	{r4, pc}
			switch (cmd) {
24010ae0:	2a08      	cmp	r2, #8
24010ae2:	d8fc      	bhi.n	24010ade <ff_wtoupper+0x36>
24010ae4:	e8df f002 	tbb	[pc, r2]
24010ae8:	1916100c 	.word	0x1916100c
24010aec:	25221f1c 	.word	0x25221f1c
24010af0:	08          	.byte	0x08
24010af1:	00          	.byte	0x00
		if (!cmd) p += nc;
24010af2:	eb04 034c 	add.w	r3, r4, ip, lsl #1
24010af6:	e7de      	b.n	24010ab6 <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
24010af8:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
24010afc:	b280      	uxth	r0, r0
}
24010afe:	bd10      	pop	{r4, pc}
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
24010b00:	1a41      	subs	r1, r0, r1
24010b02:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
}
24010b06:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
24010b08:	1a43      	subs	r3, r0, r1
24010b0a:	f003 0301 	and.w	r3, r3, #1
24010b0e:	1ac3      	subs	r3, r0, r3
24010b10:	b298      	uxth	r0, r3
}
24010b12:	bd10      	pop	{r4, pc}
			case 2: chr -= 16; break;				/* Shift -16 */
24010b14:	3810      	subs	r0, #16
24010b16:	b280      	uxth	r0, r0
}
24010b18:	bd10      	pop	{r4, pc}
			case 3:	chr -= 32; break;				/* Shift -32 */
24010b1a:	3820      	subs	r0, #32
24010b1c:	b280      	uxth	r0, r0
}
24010b1e:	bd10      	pop	{r4, pc}
			case 4:	chr -= 48; break;				/* Shift -48 */
24010b20:	3830      	subs	r0, #48	; 0x30
24010b22:	b280      	uxth	r0, r0
}
24010b24:	bd10      	pop	{r4, pc}
			case 5:	chr -= 26; break;				/* Shift -26 */
24010b26:	381a      	subs	r0, #26
24010b28:	b280      	uxth	r0, r0
}
24010b2a:	bd10      	pop	{r4, pc}
			case 6:	chr += 8; break;				/* Shift +8 */
24010b2c:	3008      	adds	r0, #8
24010b2e:	b280      	uxth	r0, r0
}
24010b30:	bd10      	pop	{r4, pc}
			case 7: chr -= 80; break;				/* Shift -80 */
24010b32:	3850      	subs	r0, #80	; 0x50
24010b34:	b280      	uxth	r0, r0
}
24010b36:	bd10      	pop	{r4, pc}
24010b38:	2401c864 	.word	0x2401c864
24010b3c:	2401ca58 	.word	0x2401ca58

24010b40 <tEnvelopeFollower_init>:
//===========================================================================
/* Envelope Follower */
//===========================================================================

void    tEnvelopeFollower_init(tEnvelopeFollower* const ef, Lfloat attackThreshold, Lfloat decayCoeff, LEAF* const leaf)
{
24010b40:	b538      	push	{r3, r4, r5, lr}
24010b42:	ed2d 8b02 	vpush	{d8}
    tEnvelopeFollower_initToPool(ef, attackThreshold, decayCoeff, &leaf->mempool);
}

void    tEnvelopeFollower_initToPool    (tEnvelopeFollower* const ef, Lfloat attackThreshold, Lfloat decayCoeff, tMempool* const mp)
{
    _tMempool* m = *mp;
24010b46:	698d      	ldr	r5, [r1, #24]
{
24010b48:	eef0 8a40 	vmov.f32	s17, s0
24010b4c:	eeb0 8a60 	vmov.f32	s16, s1
24010b50:	4604      	mov	r4, r0
    _tEnvelopeFollower* e = *ef = (_tEnvelopeFollower*) mpool_alloc(sizeof(_tEnvelopeFollower), m);
24010b52:	4629      	mov	r1, r5
24010b54:	2010      	movs	r0, #16
24010b56:	f004 fb71 	bl	2401523c <mpool_alloc>
    e->mempool = m;
    
    e->y = 0.0f;
24010b5a:	2300      	movs	r3, #0
    _tEnvelopeFollower* e = *ef = (_tEnvelopeFollower*) mpool_alloc(sizeof(_tEnvelopeFollower), m);
24010b5c:	6020      	str	r0, [r4, #0]
    e->mempool = m;
24010b5e:	6005      	str	r5, [r0, #0]
    e->y = 0.0f;
24010b60:	6043      	str	r3, [r0, #4]
    e->a_thresh = attackThreshold;
24010b62:	edc0 8a02 	vstr	s17, [r0, #8]
    e->d_coeff = decayCoeff;
24010b66:	ed80 8a03 	vstr	s16, [r0, #12]
}
24010b6a:	ecbd 8b02 	vpop	{d8}
24010b6e:	bd38      	pop	{r3, r4, r5, pc}

24010b70 <tEnvelopeFollower_tick>:
    mpool_free((char*)e, e->mempool);
}

Lfloat   tEnvelopeFollower_tick(tEnvelopeFollower* const ef, Lfloat x)
{
    _tEnvelopeFollower* e = *ef;
24010b70:	6803      	ldr	r3, [r0, #0]
    
    if (x < 0.0f ) x = -x;  /* Absolute value. */
24010b72:	eeb0 0ac0 	vabs.f32	s0, s0
    
    if (isnan(x)) return 0.0f;
    if ((x >= e->y) && (x > e->a_thresh)) e->y = x; /* If we hit a peak, ride the peak to the top. */
24010b76:	edd3 7a01 	vldr	s15, [r3, #4]
24010b7a:	eef4 7ac0 	vcmpe.f32	s15, s0
24010b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010b82:	d810      	bhi.n	24010ba6 <tEnvelopeFollower_tick+0x36>
24010b84:	ed93 7a02 	vldr	s14, [r3, #8]
24010b88:	eeb4 7ac0 	vcmpe.f32	s14, s0
24010b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010b90:	d509      	bpl.n	24010ba6 <tEnvelopeFollower_tick+0x36>
    //ef->y = envelope_pow[(uint16_t)(ef->y * (Lfloat)UINT16_MAX)] * ef->d_coeff; //not quite the right behavior - too much loss of precision?
    //ef->y = powf(ef->y, 1.000009f) * ef->d_coeff;  // too expensive
    
#ifdef NO_DENORMAL_CHECK
#else
    if( e->y < VSF)   e->y = 0.0f;
24010b92:	eddf 7a0e 	vldr	s15, [pc, #56]	; 24010bcc <tEnvelopeFollower_tick+0x5c>
24010b96:	eeb4 0ae7 	vcmpe.f32	s0, s15
24010b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010b9e:	d40d      	bmi.n	24010bbc <tEnvelopeFollower_tick+0x4c>
24010ba0:	ed83 0a01 	vstr	s0, [r3, #4]
24010ba4:	4770      	bx	lr
    else e->y = e->y * e->d_coeff; /* Else, exponential decay of output. */
24010ba6:	ed93 0a03 	vldr	s0, [r3, #12]
24010baa:	ee27 0a80 	vmul.f32	s0, s15, s0
    if( e->y < VSF)   e->y = 0.0f;
24010bae:	eddf 7a07 	vldr	s15, [pc, #28]	; 24010bcc <tEnvelopeFollower_tick+0x5c>
24010bb2:	eeb4 0ae7 	vcmpe.f32	s0, s15
24010bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010bba:	d5f1      	bpl.n	24010ba0 <tEnvelopeFollower_tick+0x30>
24010bbc:	eddf 7a04 	vldr	s15, [pc, #16]	; 24010bd0 <tEnvelopeFollower_tick+0x60>
24010bc0:	eeb0 0a67 	vmov.f32	s0, s15
24010bc4:	edc3 7a01 	vstr	s15, [r3, #4]
#endif
    return e->y;
}
24010bc8:	4770      	bx	lr
24010bca:	bf00      	nop
24010bcc:	006ce3ee 	.word	0x006ce3ee
24010bd0:	00000000 	.word	0x00000000

24010bd4 <tPowerFollower_initToPool>:
{
    tPowerFollower_initToPool(pf, factor, &leaf->mempool);
}

void    tPowerFollower_initToPool   (tPowerFollower* const pf, Lfloat factor, tMempool* const mp)
{
24010bd4:	b538      	push	{r3, r4, r5, lr}
24010bd6:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
24010bda:	680d      	ldr	r5, [r1, #0]
{
24010bdc:	4604      	mov	r4, r0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
24010bde:	2010      	movs	r0, #16
{
24010be0:	eeb0 8a40 	vmov.f32	s16, s0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
24010be4:	4629      	mov	r1, r5
24010be6:	f004 fb29 	bl	2401523c <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
24010bea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    p->curr=0.0f;
24010bee:	2300      	movs	r3, #0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
24010bf0:	6020      	str	r0, [r4, #0]
    p->mempool = m;
24010bf2:	6005      	str	r5, [r0, #0]
    p->oneminusfactor=1.0f-factor;
24010bf4:	ee77 7ac8 	vsub.f32	s15, s15, s16
    p->curr=0.0f;
24010bf8:	60c3      	str	r3, [r0, #12]
    p->factor=factor;
24010bfa:	ed80 8a01 	vstr	s16, [r0, #4]
    p->oneminusfactor=1.0f-factor;
24010bfe:	edc0 7a02 	vstr	s15, [r0, #8]
}
24010c02:	ecbd 8b02 	vpop	{d8}
24010c06:	bd38      	pop	{r3, r4, r5, pc}

24010c08 <tPowerFollower_free>:

void    tPowerFollower_free (tPowerFollower* const pf)
{
    _tPowerFollower* p = *pf;
24010c08:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)p, p->mempool);
24010c0a:	6801      	ldr	r1, [r0, #0]
24010c0c:	f004 bbd8 	b.w	240153c0 <mpool_free>

24010c10 <tPowerFollower_setFactor>:
}

void tPowerFollower_setFactor(tPowerFollower* const pf, Lfloat factor)
{
    _tPowerFollower* p = *pf;
24010c10:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24010c14:	ed9f 7a06 	vldr	s14, [pc, #24]	; 24010c30 <tPowerFollower_setFactor+0x20>
24010c18:	6803      	ldr	r3, [r0, #0]
    
    if (factor<0.0f) factor=0.0f;
    if (factor>1.0f) factor=1.0f;
24010c1a:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
24010c1e:	fe80 0a67 	vminnm.f32	s0, s0, s15
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
24010c22:	ee77 7ac0 	vsub.f32	s15, s15, s0
    p->factor=factor;
24010c26:	ed83 0a01 	vstr	s0, [r3, #4]
    p->oneminusfactor=1.0f-factor;
24010c2a:	edc3 7a02 	vstr	s15, [r3, #8]
}
24010c2e:	4770      	bx	lr
24010c30:	00000000 	.word	0x00000000

24010c34 <tPowerFollower_tick>:

Lfloat tPowerFollower_tick(tPowerFollower* const pf, Lfloat input)
{
    _tPowerFollower* p = *pf;
24010c34:	6803      	ldr	r3, [r0, #0]
    p->curr = p->factor*input*input+p->oneminusfactor*p->curr;
24010c36:	ee60 7a00 	vmul.f32	s15, s0, s0
24010c3a:	edd3 6a03 	vldr	s13, [r3, #12]
24010c3e:	ed93 0a02 	vldr	s0, [r3, #8]
24010c42:	ed93 7a01 	vldr	s14, [r3, #4]
24010c46:	ee20 0a26 	vmul.f32	s0, s0, s13
24010c4a:	eea7 0a27 	vfma.f32	s0, s14, s15
24010c4e:	ed83 0a03 	vstr	s0, [r3, #12]
    return p->curr;
}
24010c52:	4770      	bx	lr

24010c54 <tLinearDelay_initToPool>:
{
    tLinearDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tLinearDelay_initToPool  (tLinearDelay* const dl, Lfloat delay, uint32_t maxDelay, tMempool* const mp)
{
24010c54:	b570      	push	{r4, r5, r6, lr}
24010c56:	460d      	mov	r5, r1
24010c58:	4606      	mov	r6, r0
    _tMempool* m = *mp;
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
24010c5a:	202c      	movs	r0, #44	; 0x2c
{
24010c5c:	ed2d 8b02 	vpush	{d8}
24010c60:	b082      	sub	sp, #8
    _tMempool* m = *mp;
24010c62:	6811      	ldr	r1, [r2, #0]
{
24010c64:	eeb0 8a40 	vmov.f32	s16, s0
    d->mempool = m;

    d->maxDelay = maxDelay;

    if (delay > maxDelay)   d->delay = maxDelay;
24010c68:	eddf 8a30 	vldr	s17, [pc, #192]	; 24010d2c <tLinearDelay_initToPool+0xd8>
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
24010c6c:	9101      	str	r1, [sp, #4]
24010c6e:	f004 fae5 	bl	2401523c <mpool_alloc>
    if (delay > maxDelay)   d->delay = maxDelay;
24010c72:	ee07 5a90 	vmov	s15, r5
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
24010c76:	4604      	mov	r4, r0
    else if (delay < 0.0f)  d->delay = 0.0f;
    else                    d->delay = delay;

    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
24010c78:	9901      	ldr	r1, [sp, #4]
    if (delay > maxDelay)   d->delay = maxDelay;
24010c7a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
24010c7e:	6030      	str	r0, [r6, #0]
    if (delay > maxDelay)   d->delay = maxDelay;
24010c80:	fec8 7a28 	vmaxnm.f32	s15, s16, s17
    d->mempool = m;
24010c84:	6001      	str	r1, [r0, #0]
    d->maxDelay = maxDelay;
24010c86:	61c5      	str	r5, [r0, #28]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
24010c88:	00a8      	lsls	r0, r5, #2
    if (delay > maxDelay)   d->delay = maxDelay;
24010c8a:	fec7 7ac7 	vminnm.f32	s15, s15, s14
24010c8e:	edc4 7a08 	vstr	s15, [r4, #32]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
24010c92:	f004 fad3 	bl	2401523c <mpool_alloc>

    d->gain = 1.0f;
24010c96:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000

    d->lastIn = 0.0f;
    d->lastOut = 0.0f;
    
    d->inPoint = 0;
24010c9a:	2300      	movs	r3, #0
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
24010c9c:	60a0      	str	r0, [r4, #8]
    d->gain = 1.0f;
24010c9e:	6062      	str	r2, [r4, #4]

void     tLinearDelay_setDelay (tLinearDelay* const dl, Lfloat delay)
{
    _tLinearDelay* d = *dl;

    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
24010ca0:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    d->lastIn = 0.0f;
24010ca4:	edc4 8a04 	vstr	s17, [r4, #16]
    d->lastOut = 0.0f;
24010ca8:	edc4 8a03 	vstr	s17, [r4, #12]
    d->inPoint = 0;
24010cac:	6163      	str	r3, [r4, #20]
    d->outPoint = 0;
24010cae:	61a3      	str	r3, [r4, #24]
    _tLinearDelay* d = *dl;
24010cb0:	6835      	ldr	r5, [r6, #0]
    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
24010cb2:	edd4 0a08 	vldr	s1, [r4, #32]
24010cb6:	edd5 7a07 	vldr	s15, [r5, #28]
24010cba:	eeb8 1a67 	vcvt.f32.u32	s2, s15
24010cbe:	f003 ffbb 	bl	24014c38 <LEAF_clip>

    Lfloat outPointer = d->inPoint - d->delay;
24010cc2:	edd5 7a05 	vldr	s15, [r5, #20]

    while ( outPointer < 0 )
        outPointer += d->maxDelay; // modulo maximum length
24010cc6:	69ea      	ldr	r2, [r5, #28]
    Lfloat outPointer = d->inPoint - d->delay;
24010cc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
24010ccc:	ed85 0a08 	vstr	s0, [r5, #32]
    Lfloat outPointer = d->inPoint - d->delay;
24010cd0:	ee77 7ac0 	vsub.f32	s15, s15, s0
    while ( outPointer < 0 )
24010cd4:	eef4 7ae8 	vcmpe.f32	s15, s17
24010cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010cdc:	d50a      	bpl.n	24010cf4 <tLinearDelay_initToPool+0xa0>
        outPointer += d->maxDelay; // modulo maximum length
24010cde:	ee07 2a10 	vmov	s14, r2
24010ce2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24010ce6:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
24010cea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24010cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010cf2:	d4f8      	bmi.n	24010ce6 <tLinearDelay_initToPool+0x92>

    d->outPoint = (uint32_t) outPointer;   // integer part
24010cf4:	eebc 7ae7 	vcvt.u32.f32	s14, s15
24010cf8:	ee17 3a10 	vmov	r3, s14

    d->alpha = outPointer - d->outPoint; // fractional part
    d->omAlpha = 1.0f - d->alpha;
24010cfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
24010d00:	ee06 3a90 	vmov	s13, r3

    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
24010d04:	4293      	cmp	r3, r2
24010d06:	bf08      	it	eq
24010d08:	2300      	moveq	r3, #0
    d->omAlpha = 1.0f - d->alpha;
24010d0a:	ee37 7a67 	vsub.f32	s14, s14, s15
    d->alpha = outPointer - d->outPoint; // fractional part
24010d0e:	eef8 6a66 	vcvt.f32.u32	s13, s13
24010d12:	61ab      	str	r3, [r5, #24]
24010d14:	ee77 7ae6 	vsub.f32	s15, s15, s13
    d->omAlpha = 1.0f - d->alpha;
24010d18:	ee37 7a26 	vadd.f32	s14, s14, s13
    d->alpha = outPointer - d->outPoint; // fractional part
24010d1c:	edc5 7a09 	vstr	s15, [r5, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
24010d20:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
}
24010d24:	b002      	add	sp, #8
24010d26:	ecbd 8b02 	vpop	{d8}
24010d2a:	bd70      	pop	{r4, r5, r6, pc}
24010d2c:	00000000 	.word	0x00000000

24010d30 <tLinearDelay_free>:
{
24010d30:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
24010d32:	6804      	ldr	r4, [r0, #0]
    mpool_free((char*)d->buff, d->mempool);
24010d34:	6821      	ldr	r1, [r4, #0]
24010d36:	68a0      	ldr	r0, [r4, #8]
24010d38:	f004 fb42 	bl	240153c0 <mpool_free>
    mpool_free((char*)d, d->mempool);
24010d3c:	6821      	ldr	r1, [r4, #0]
24010d3e:	4620      	mov	r0, r4
}
24010d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)d, d->mempool);
24010d44:	f004 bb3c 	b.w	240153c0 <mpool_free>

24010d48 <tLinearDelay_clear>:
    _tLinearDelay* d = *dl;
24010d48:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
24010d4a:	69cb      	ldr	r3, [r1, #28]
24010d4c:	b14b      	cbz	r3, 24010d62 <tLinearDelay_clear+0x1a>
24010d4e:	2300      	movs	r3, #0
        d->buff[i] = 0;
24010d50:	2000      	movs	r0, #0
24010d52:	688a      	ldr	r2, [r1, #8]
24010d54:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for (unsigned i = 0; i < d->maxDelay; i++)
24010d58:	3301      	adds	r3, #1
        d->buff[i] = 0;
24010d5a:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
24010d5c:	69ca      	ldr	r2, [r1, #28]
24010d5e:	429a      	cmp	r2, r3
24010d60:	d8f7      	bhi.n	24010d52 <tLinearDelay_clear+0xa>
}
24010d62:	4770      	bx	lr

24010d64 <tLinearDelay_tick>:
{
24010d64:	b410      	push	{r4}
    _tLinearDelay* d = *dl;
24010d66:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
24010d68:	edd3 7a01 	vldr	s15, [r3, #4]
24010d6c:	6959      	ldr	r1, [r3, #20]
24010d6e:	689a      	ldr	r2, [r3, #8]
24010d70:	ee27 0a80 	vmul.f32	s0, s15, s0
24010d74:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24010d78:	ed82 0a00 	vstr	s0, [r2]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
24010d7c:	69dc      	ldr	r4, [r3, #28]
    d->lastOut = d->buff[idx] * d->omAlpha;
24010d7e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
    uint32_t idx = (uint32_t) d->outPoint;
24010d82:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
24010d86:	3201      	adds	r2, #1
    if ((idx + 1) < d->maxDelay)
24010d88:	1c48      	adds	r0, r1, #1
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
24010d8a:	42a2      	cmp	r2, r4
24010d8c:	bf08      	it	eq
24010d8e:	2200      	moveq	r2, #0
    if ((idx + 1) < d->maxDelay)
24010d90:	4284      	cmp	r4, r0
24010d92:	615a      	str	r2, [r3, #20]
    d->lastOut = d->buff[idx] * d->omAlpha;
24010d94:	689a      	ldr	r2, [r3, #8]
24010d96:	eb02 0181 	add.w	r1, r2, r1, lsl #2
24010d9a:	ed91 0a00 	vldr	s0, [r1]
24010d9e:	ee20 0a27 	vmul.f32	s0, s0, s15
24010da2:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((idx + 1) < d->maxDelay)
24010da6:	d90b      	bls.n	24010dc0 <tLinearDelay_tick+0x5c>
        d->lastOut += d->buff[idx+1] * d->alpha;
24010da8:	ed91 7a01 	vldr	s14, [r1, #4]
24010dac:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
24010db0:	6198      	str	r0, [r3, #24]
        d->lastOut += d->buff[idx+1] * d->alpha;
24010db2:	eea7 0a27 	vfma.f32	s0, s14, s15
24010db6:	ed83 0a03 	vstr	s0, [r3, #12]
}
24010dba:	f85d 4b04 	ldr.w	r4, [sp], #4
24010dbe:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
24010dc0:	ed92 7a00 	vldr	s14, [r2]
24010dc4:	2000      	movs	r0, #0
24010dc6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
24010dca:	6198      	str	r0, [r3, #24]
        d->lastOut += d->buff[0] * d->alpha;
24010dcc:	eea7 0a27 	vfma.f32	s0, s14, s15
        d->lastOut += d->buff[idx+1] * d->alpha;
24010dd0:	ed83 0a03 	vstr	s0, [r3, #12]
}
24010dd4:	f85d 4b04 	ldr.w	r4, [sp], #4
24010dd8:	4770      	bx	lr
24010dda:	bf00      	nop

24010ddc <tLinearDelay_tickIn>:
    _tLinearDelay* d = *dl;
24010ddc:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
24010dde:	edd3 7a01 	vldr	s15, [r3, #4]
24010de2:	6959      	ldr	r1, [r3, #20]
24010de4:	689a      	ldr	r2, [r3, #8]
24010de6:	ee27 0a80 	vmul.f32	s0, s15, s0
24010dea:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24010dee:	ed82 0a00 	vstr	s0, [r2]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
24010df2:	695a      	ldr	r2, [r3, #20]
24010df4:	69d9      	ldr	r1, [r3, #28]
24010df6:	3201      	adds	r2, #1
24010df8:	428a      	cmp	r2, r1
24010dfa:	bf08      	it	eq
24010dfc:	2200      	moveq	r2, #0
24010dfe:	615a      	str	r2, [r3, #20]
}
24010e00:	4770      	bx	lr
24010e02:	bf00      	nop

24010e04 <tLinearDelay_tickOut>:
{
24010e04:	b410      	push	{r4}
    _tLinearDelay* d = *dl;
24010e06:	6803      	ldr	r3, [r0, #0]
    uint32_t idx = (uint32_t) d->outPoint;
24010e08:	699a      	ldr	r2, [r3, #24]
    d->lastOut = d->buff[idx] * d->omAlpha;
24010e0a:	6899      	ldr	r1, [r3, #8]
24010e0c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
24010e10:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    if ((idx + 1) < d->maxDelay)
24010e14:	69dc      	ldr	r4, [r3, #28]
24010e16:	3201      	adds	r2, #1
    d->lastOut = d->buff[idx] * d->omAlpha;
24010e18:	ed90 0a00 	vldr	s0, [r0]
    if ((idx + 1) < d->maxDelay)
24010e1c:	42a2      	cmp	r2, r4
    d->lastOut = d->buff[idx] * d->omAlpha;
24010e1e:	ee20 0a27 	vmul.f32	s0, s0, s15
24010e22:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((idx + 1) < d->maxDelay)
24010e26:	d20b      	bcs.n	24010e40 <tLinearDelay_tickOut+0x3c>
        d->lastOut += d->buff[idx+1] * d->alpha;
24010e28:	ed90 7a01 	vldr	s14, [r0, #4]
24010e2c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
24010e30:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[idx+1] * d->alpha;
24010e32:	eea7 0a27 	vfma.f32	s0, s14, s15
24010e36:	ed83 0a03 	vstr	s0, [r3, #12]
}
24010e3a:	f85d 4b04 	ldr.w	r4, [sp], #4
24010e3e:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
24010e40:	ed91 7a00 	vldr	s14, [r1]
24010e44:	2200      	movs	r2, #0
24010e46:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
24010e4a:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[0] * d->alpha;
24010e4c:	eea7 0a27 	vfma.f32	s0, s14, s15
        d->lastOut += d->buff[idx+1] * d->alpha;
24010e50:	ed83 0a03 	vstr	s0, [r3, #12]
}
24010e54:	f85d 4b04 	ldr.w	r4, [sp], #4
24010e58:	4770      	bx	lr
24010e5a:	bf00      	nop

24010e5c <tLinearDelay_setDelay>:
{
24010e5c:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
24010e5e:	6804      	ldr	r4, [r0, #0]
{
24010e60:	eef0 0a40 	vmov.f32	s1, s0
    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
24010e64:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
24010e68:	edd4 7a07 	vldr	s15, [r4, #28]
24010e6c:	eeb8 1a67 	vcvt.f32.u32	s2, s15
24010e70:	f003 fee2 	bl	24014c38 <LEAF_clip>
    Lfloat outPointer = d->inPoint - d->delay;
24010e74:	edd4 7a05 	vldr	s15, [r4, #20]
        outPointer += d->maxDelay; // modulo maximum length
24010e78:	69e2      	ldr	r2, [r4, #28]
    Lfloat outPointer = d->inPoint - d->delay;
24010e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
24010e7e:	ed84 0a08 	vstr	s0, [r4, #32]
    Lfloat outPointer = d->inPoint - d->delay;
24010e82:	ee77 7ac0 	vsub.f32	s15, s15, s0
    while ( outPointer < 0 )
24010e86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24010e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010e8e:	d50a      	bpl.n	24010ea6 <tLinearDelay_setDelay+0x4a>
        outPointer += d->maxDelay; // modulo maximum length
24010e90:	ee07 2a10 	vmov	s14, r2
24010e94:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24010e98:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
24010e9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24010ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010ea4:	d4f8      	bmi.n	24010e98 <tLinearDelay_setDelay+0x3c>
    d->outPoint = (uint32_t) outPointer;   // integer part
24010ea6:	eebc 7ae7 	vcvt.u32.f32	s14, s15
24010eaa:	ee17 3a10 	vmov	r3, s14
    d->omAlpha = 1.0f - d->alpha;
24010eae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
24010eb2:	ee06 3a90 	vmov	s13, r3
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
24010eb6:	4293      	cmp	r3, r2
24010eb8:	bf08      	it	eq
24010eba:	2300      	moveq	r3, #0
    d->omAlpha = 1.0f - d->alpha;
24010ebc:	ee37 7a67 	vsub.f32	s14, s14, s15
    d->alpha = outPointer - d->outPoint; // fractional part
24010ec0:	eef8 6a66 	vcvt.f32.u32	s13, s13
24010ec4:	61a3      	str	r3, [r4, #24]
24010ec6:	ee77 7ae6 	vsub.f32	s15, s15, s13
    d->omAlpha = 1.0f - d->alpha;
24010eca:	ee37 7a26 	vadd.f32	s14, s14, s13
    d->alpha = outPointer - d->outPoint; // fractional part
24010ece:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
24010ed2:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
}
24010ed6:	bd10      	pop	{r4, pc}

24010ed8 <tLinearDelay_addTo>:
    d->buff[tap] = value;
}

Lfloat tLinearDelay_addTo (tLinearDelay* const dl, Lfloat value, uint32_t tapDelay)
{
    _tLinearDelay* d = *dl;
24010ed8:	6802      	ldr	r2, [r0, #0]

    int32_t tap = d->inPoint - tapDelay - 1;
24010eda:	6953      	ldr	r3, [r2, #20]
24010edc:	1a59      	subs	r1, r3, r1

    // Check for wraparound.
    while ( tap < 0 )   tap += d->maxDelay;
24010ede:	3901      	subs	r1, #1
24010ee0:	d502      	bpl.n	24010ee8 <tLinearDelay_addTo+0x10>
24010ee2:	69d3      	ldr	r3, [r2, #28]
24010ee4:	18c9      	adds	r1, r1, r3
24010ee6:	d4fd      	bmi.n	24010ee4 <tLinearDelay_addTo+0xc>
    
    return (d->buff[tap] += value);
24010ee8:	6893      	ldr	r3, [r2, #8]
24010eea:	eb03 0381 	add.w	r3, r3, r1, lsl #2
24010eee:	edd3 7a00 	vldr	s15, [r3]
24010ef2:	ee30 0a27 	vadd.f32	s0, s0, s15
24010ef6:	ed83 0a00 	vstr	s0, [r3]
}
24010efa:	4770      	bx	lr

24010efc <tLagrangeDelay_free>:

    tLagrangeDelay_setDelay(dl, d->delay);
}

void tLagrangeDelay_free (tLagrangeDelay* const dl)
{
24010efc:	b510      	push	{r4, lr}
    _tLagrangeDelay* d = *dl;
24010efe:	6804      	ldr	r4, [r0, #0]

    mpool_free((char*)d->buff, d->mempool);
24010f00:	e9d4 1000 	ldrd	r1, r0, [r4]
24010f04:	f004 fa5c 	bl	240153c0 <mpool_free>
    mpool_free((char*)d, d->mempool);
24010f08:	6821      	ldr	r1, [r4, #0]
24010f0a:	4620      	mov	r0, r4
}
24010f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)d, d->mempool);
24010f10:	f004 ba56 	b.w	240153c0 <mpool_free>

24010f14 <tLagrangeDelay_clear>:


void    tLagrangeDelay_clear(tLagrangeDelay* const dl)
{
	_tLagrangeDelay* d = *dl;
24010f14:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
24010f16:	69cb      	ldr	r3, [r1, #28]
24010f18:	b14b      	cbz	r3, 24010f2e <tLagrangeDelay_clear+0x1a>
24010f1a:	2300      	movs	r3, #0
    {
        d->buff[i] = 0.0f;
24010f1c:	2000      	movs	r0, #0
24010f1e:	684a      	ldr	r2, [r1, #4]
24010f20:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for (unsigned i = 0; i < d->maxDelay; i++)
24010f24:	3301      	adds	r3, #1
        d->buff[i] = 0.0f;
24010f26:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
24010f28:	69ca      	ldr	r2, [r1, #28]
24010f2a:	429a      	cmp	r2, r3
24010f2c:	d8f7      	bhi.n	24010f1e <tLagrangeDelay_clear+0xa>
    }
}
24010f2e:	4770      	bx	lr

24010f30 <tLagrangeDelay_tickIn>:
    return d->lastOut;
}

void   tLagrangeDelay_tickIn (tLagrangeDelay* const dl, Lfloat input)
{
	_tLagrangeDelay* d = *dl;
24010f30:	6803      	ldr	r3, [r0, #0]

    d->buff[d->inPoint] = input;
24010f32:	6959      	ldr	r1, [r3, #20]
24010f34:	685a      	ldr	r2, [r3, #4]
24010f36:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24010f3a:	ed82 0a00 	vstr	s0, [r2]

    // Increment input pointer modulo length.
    d->inPoint = (d->inPoint + 1) & d->bufferMask;
24010f3e:	695a      	ldr	r2, [r3, #20]
24010f40:	6899      	ldr	r1, [r3, #8]
24010f42:	3201      	adds	r2, #1
24010f44:	400a      	ands	r2, r1
24010f46:	615a      	str	r2, [r3, #20]
}
24010f48:	4770      	bx	lr
24010f4a:	bf00      	nop

24010f4c <tLagrangeDelay_tickOut>:

Lfloat   tLagrangeDelay_tickOut (tLagrangeDelay* const dl)
{
24010f4c:	b430      	push	{r4, r5}
	_tLagrangeDelay* d = *dl;
24010f4e:	6803      	ldr	r3, [r0, #0]

    uint32_t idx = (uint32_t) d->outPoint;
24010f50:	6998      	ldr	r0, [r3, #24]
   uint32_t previdx =  ((idx - 1) + d->maxDelay) & d->bufferMask;

    d->lastOut =    (d->buff[previdx] * d->h0) +
    		(d->buff[idx] * d->h1) +
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
			(d->buff[(idx + 2) & d->bufferMask] * d->h3);
24010f52:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
24010f56:	1c82      	adds	r2, r0, #2
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
24010f58:	1c44      	adds	r4, r0, #1
24010f5a:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
24010f5e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
24010f62:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    d->lastOut =    (d->buff[previdx] * d->h0) +
24010f66:	e9d3 1501 	ldrd	r1, r5, [r3, #4]
			(d->buff[(idx + 2) & d->bufferMask] * d->h3);
24010f6a:	402a      	ands	r2, r5
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
24010f6c:	402c      	ands	r4, r5
			(d->buff[(idx + 2) & d->bufferMask] * d->h3);
24010f6e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
24010f72:	ed92 0a00 	vldr	s0, [r2]
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
24010f76:	eb01 0284 	add.w	r2, r1, r4, lsl #2
			(d->buff[(idx + 2) & d->bufferMask] * d->h3);
24010f7a:	ee20 0a06 	vmul.f32	s0, s0, s12
24010f7e:	ed92 6a00 	vldr	s12, [r2]
   uint32_t previdx =  ((idx - 1) + d->maxDelay) & d->bufferMask;
24010f82:	69da      	ldr	r2, [r3, #28]
24010f84:	eea6 0a26 	vfma.f32	s0, s12, s13
24010f88:	4402      	add	r2, r0
    		(d->buff[idx] * d->h1) +
24010f8a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   uint32_t previdx =  ((idx - 1) + d->maxDelay) & d->bufferMask;
24010f8e:	3a01      	subs	r2, #1
24010f90:	edd0 6a00 	vldr	s13, [r0]
24010f94:	402a      	ands	r2, r5
24010f96:	eea6 0a87 	vfma.f32	s0, s13, s14
    d->lastOut =    (d->buff[previdx] * d->h0) +
24010f9a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
24010f9e:	ed91 7a00 	vldr	s14, [r1]

    //d->buff[previdx] = 0.0f;
    // Increment output pointer modulo length
    d->outPoint = (d->outPoint + 1) & d->bufferMask;
24010fa2:	619c      	str	r4, [r3, #24]
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
24010fa4:	eea7 0a27 	vfma.f32	s0, s14, s15
    d->lastOut =    (d->buff[previdx] * d->h0) +
24010fa8:	ed83 0a03 	vstr	s0, [r3, #12]

    return d->lastOut;
}
24010fac:	bc30      	pop	{r4, r5}
24010fae:	4770      	bx	lr

24010fb0 <tLagrangeDelay_setDelay>:
void tLagrangeDelay_setDelay (tLagrangeDelay* const dl, Lfloat delay)
{
	_tLagrangeDelay* d = *dl;
    //d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
    d->delay = delay; // not safe but faster
    Lfloat outPointer = d->inPoint - d->delay - 1.0f; // minus 1 because interpolation needs value from 1->2 so lagrange interp will add the 1 back
24010fb0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
	_tLagrangeDelay* d = *dl;
24010fb4:	6803      	ldr	r3, [r0, #0]
    d->delay = delay; // not safe but faster
24010fb6:	ed83 0a08 	vstr	s0, [r3, #32]
    Lfloat outPointer = d->inPoint - d->delay - 1.0f; // minus 1 because interpolation needs value from 1->2 so lagrange interp will add the 1 back
24010fba:	ee37 7ac0 	vsub.f32	s14, s15, s0
24010fbe:	edd3 7a05 	vldr	s15, [r3, #20]
24010fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
24010fc6:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
24010fca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24010fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010fd2:	d50a      	bpl.n	24010fea <tLagrangeDelay_setDelay+0x3a>
        outPointer += d->maxDelay; // modulo maximum length
24010fd4:	ed93 7a07 	vldr	s14, [r3, #28]
24010fd8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24010fdc:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
24010fe0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24010fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010fe8:	d4f8      	bmi.n	24010fdc <tLagrangeDelay_setDelay+0x2c>

    d->outPoint = (uint32_t) outPointer;   // integer part
24010fea:	eebc 7ae7 	vcvt.u32.f32	s14, s15

	Lfloat pdp1d = dp1*alpha;
	Lfloat pddm1 = alpha*dm1;
	Lfloat pdm1dm2 = dm1*dm2;

	d->h0 = -0.166666666666667f * (pddm1 * dm2);
24010fee:	eddf 6a1d 	vldr	s13, [pc, #116]	; 24011064 <tLagrangeDelay_setDelay+0xb4>
	Lfloat dp1 = alpha+1.0f;
24010ff2:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
	d->h1 = 0.5f * (dp1 * pdm1dm2);
	d->h2 = -0.5f * (pdp1d * dm2);
	d->h3 = 0.166666666666667f * (pdp1d * dm1);
24010ff6:	eddf 3a1c 	vldr	s7, [pc, #112]	; 24011068 <tLagrangeDelay_setDelay+0xb8>
	Lfloat dm2 = alpha-2.0f;
24010ffa:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0

    d->outPoint &= d->bufferMask;
24010ffe:	689a      	ldr	r2, [r3, #8]
    Lfloat alpha = (outPointer - d->outPoint); // fractional part
24011000:	eeb8 6a47 	vcvt.f32.u32	s12, s14
    d->outPoint &= d->bufferMask;
24011004:	ee17 1a10 	vmov	r1, s14
	d->h1 = 0.5f * (dp1 * pdm1dm2);
24011008:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
	d->h2 = -0.5f * (pdp1d * dm2);
2401100c:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
    d->outPoint &= d->bufferMask;
24011010:	400a      	ands	r2, r1
    Lfloat alpha = (outPointer - d->outPoint); // fractional part
24011012:	ee77 7ac6 	vsub.f32	s15, s15, s12
    d->outPoint &= d->bufferMask;
24011016:	619a      	str	r2, [r3, #24]
	Lfloat dm1 = alpha-1.0f;
24011018:	ee37 7ae4 	vsub.f32	s14, s15, s9
	Lfloat dp1 = alpha+1.0f;
2401101c:	ee77 4aa4 	vadd.f32	s9, s15, s9
	Lfloat dm2 = alpha-2.0f;
24011020:	ee37 5ac5 	vsub.f32	s10, s15, s10
	d->h0 = -0.166666666666667f * (pddm1 * dm2);
24011024:	ee67 6aa6 	vmul.f32	s13, s15, s13
	d->h1 = 0.5f * (dp1 * pdm1dm2);
24011028:	ee24 6a87 	vmul.f32	s12, s9, s14
	Lfloat pdp1d = dp1*alpha;
2401102c:	ee67 7aa4 	vmul.f32	s15, s15, s9
	d->h0 = -0.166666666666667f * (pddm1 * dm2);
24011030:	ee66 6a87 	vmul.f32	s13, s13, s14
	d->h2 = -0.5f * (pdp1d * dm2);
24011034:	ee65 5a25 	vmul.f32	s11, s10, s11
	d->h3 = 0.166666666666667f * (pdp1d * dm1);
24011038:	ee27 7a23 	vmul.f32	s14, s14, s7
	d->h1 = 0.5f * (dp1 * pdm1dm2);
2401103c:	ee26 6a04 	vmul.f32	s12, s12, s8
	d->h2 = -0.5f * (pdp1d * dm2);
24011040:	ee65 5aa7 	vmul.f32	s11, s11, s15
	d->h3 = 0.166666666666667f * (pdp1d * dm1);
24011044:	ee27 7a27 	vmul.f32	s14, s14, s15
	d->h0 = -0.166666666666667f * (pddm1 * dm2);
24011048:	ee66 6a85 	vmul.f32	s13, s13, s10
	d->h1 = 0.5f * (dp1 * pdm1dm2);
2401104c:	ee66 7a05 	vmul.f32	s15, s12, s10
	d->h2 = -0.5f * (pdp1d * dm2);
24011050:	edc3 5a0b 	vstr	s11, [r3, #44]	; 0x2c
	d->h3 = 0.166666666666667f * (pdp1d * dm1);
24011054:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30
	d->h0 = -0.166666666666667f * (pddm1 * dm2);
24011058:	edc3 6a09 	vstr	s13, [r3, #36]	; 0x24
	d->h1 = 0.5f * (dp1 * pdm1dm2);
2401105c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
24011060:	4770      	bx	lr
24011062:	bf00      	nop
24011064:	be2aaaab 	.word	0xbe2aaaab
24011068:	3e2aaaab 	.word	0x3e2aaaab

2401106c <tLagrangeDelay_initToPool>:
{
2401106c:	b570      	push	{r4, r5, r6, lr}
2401106e:	460d      	mov	r5, r1
24011070:	4606      	mov	r6, r0
    _tLagrangeDelay* d = *dl = (_tLagrangeDelay*) mpool_alloc(sizeof(_tLagrangeDelay), m);
24011072:	2034      	movs	r0, #52	; 0x34
{
24011074:	ed2d 8b02 	vpush	{d8}
24011078:	b082      	sub	sp, #8
    _tMempool* m = *mp;
2401107a:	6811      	ldr	r1, [r2, #0]
{
2401107c:	eeb0 8a40 	vmov.f32	s16, s0
    _tLagrangeDelay* d = *dl = (_tLagrangeDelay*) mpool_alloc(sizeof(_tLagrangeDelay), m);
24011080:	9101      	str	r1, [sp, #4]
24011082:	f004 f8db 	bl	2401523c <mpool_alloc>
    if (delay > maxDelay)   d->delay = maxDelay;
24011086:	ee07 5a90 	vmov	s15, r5
2401108a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 240110fc <tLagrangeDelay_initToPool+0x90>
    d->mempool = m;
2401108e:	9901      	ldr	r1, [sp, #4]
    _tLagrangeDelay* d = *dl = (_tLagrangeDelay*) mpool_alloc(sizeof(_tLagrangeDelay), m);
24011090:	4604      	mov	r4, r0
    if (delay > maxDelay)   d->delay = maxDelay;
24011092:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tLagrangeDelay* d = *dl = (_tLagrangeDelay*) mpool_alloc(sizeof(_tLagrangeDelay), m);
24011096:	6030      	str	r0, [r6, #0]
    if (delay > maxDelay)   d->delay = maxDelay;
24011098:	fe88 0a07 	vmaxnm.f32	s0, s16, s14
    d->mempool = m;
2401109c:	6001      	str	r1, [r0, #0]
    d->maxDelay = maxDelay;
2401109e:	61c5      	str	r5, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
240110a0:	fe80 0a67 	vminnm.f32	s0, s0, s15
240110a4:	ed80 0a08 	vstr	s0, [r0, #32]
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
240110a8:	bb1d      	cbnz	r5, 240110f2 <tLagrangeDelay_initToPool+0x86>
240110aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        maxDelay |= maxDelay >> 1;
240110ae:	ea43 0353 	orr.w	r3, r3, r3, lsr #1
        maxDelay |= maxDelay >> 2;
240110b2:	ea43 0393 	orr.w	r3, r3, r3, lsr #2
        maxDelay |= maxDelay >> 4;
240110b6:	ea43 1313 	orr.w	r3, r3, r3, lsr #4
        maxDelay |= maxDelay >> 8;
240110ba:	ea43 2313 	orr.w	r3, r3, r3, lsr #8
        maxDelay |= maxDelay >> 16;
240110be:	ea43 4213 	orr.w	r2, r3, r3, lsr #16
        maxDelay++;
240110c2:	1c55      	adds	r5, r2, #1
        d->maxDelay = maxDelay;
240110c4:	61e5      	str	r5, [r4, #28]
        d->bufferMask = maxDelay - 1;
240110c6:	60a2      	str	r2, [r4, #8]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
240110c8:	00a8      	lsls	r0, r5, #2
240110ca:	f004 f8b7 	bl	2401523c <mpool_alloc>
    d->lastIn = 0.0f;
240110ce:	2200      	movs	r2, #0
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
240110d0:	4601      	mov	r1, r0
    d->inPoint = 0;
240110d2:	2300      	movs	r3, #0
    tLagrangeDelay_setDelay(dl, d->delay);
240110d4:	ed94 0a08 	vldr	s0, [r4, #32]
240110d8:	4630      	mov	r0, r6
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
240110da:	6061      	str	r1, [r4, #4]
    d->lastIn = 0.0f;
240110dc:	6122      	str	r2, [r4, #16]
    d->lastOut = 0.0f;
240110de:	60e2      	str	r2, [r4, #12]
    d->outPoint = 0;
240110e0:	e9c4 3305 	strd	r3, r3, [r4, #20]
}
240110e4:	b002      	add	sp, #8
240110e6:	ecbd 8b02 	vpop	{d8}
240110ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tLagrangeDelay_setDelay(dl, d->delay);
240110ee:	f7ff bf5f 	b.w	24010fb0 <tLagrangeDelay_setDelay>
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
240110f2:	1e6b      	subs	r3, r5, #1
240110f4:	422b      	tst	r3, r5
240110f6:	461a      	mov	r2, r3
240110f8:	d1d9      	bne.n	240110ae <tLagrangeDelay_initToPool+0x42>
240110fa:	e7e4      	b.n	240110c6 <tLagrangeDelay_initToPool+0x5a>
240110fc:	00000000 	.word	0x00000000

24011100 <tLagrangeDelay_tapOut>:

Lfloat tLagrangeDelay_tapOut (tLagrangeDelay* const dl, uint32_t tapDelay)
{
	_tLagrangeDelay* d = *dl;
24011100:	6802      	ldr	r2, [r0, #0]

    uint32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
24011102:	6953      	ldr	r3, [r2, #20]
24011104:	1a5b      	subs	r3, r3, r1

    return d->buff[tap];
24011106:	e9d2 2001 	ldrd	r2, r0, [r2, #4]
    uint32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
2401110a:	3b01      	subs	r3, #1
2401110c:	4003      	ands	r3, r0
    return d->buff[tap];
2401110e:	eb02 0283 	add.w	r2, r2, r3, lsl #2

}
24011112:	ed92 0a00 	vldr	s0, [r2]
24011116:	4770      	bx	lr

24011118 <tLagrangeDelay_tapOutInterpolated>:

Lfloat   tLagrangeDelay_tapOutInterpolated (tLagrangeDelay* const dl, uint32_t tapDelay, Lfloat alpha)
{
24011118:	b410      	push	{r4}
	_tLagrangeDelay* d = *dl;

    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;
2401111a:	f06f 0301 	mvn.w	r3, #1
	_tLagrangeDelay* d = *dl;
2401111e:	6802      	ldr	r2, [r0, #0]

    alpha = 1.0f - alpha;
24011120:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0

    Lfloat pdp1d = dp1*alpha;
    Lfloat pddm1 = alpha*dm1;
    Lfloat pdm1dm2 = dm1*dm2;

    Lfloat h0 = -0.166666666666667f * (pddm1 * dm2);
24011124:	eddf 4a27 	vldr	s9, [pc, #156]	; 240111c4 <tLagrangeDelay_tapOutInterpolated+0xac>
    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;
24011128:	1a59      	subs	r1, r3, r1
2401112a:	6953      	ldr	r3, [r2, #20]
2401112c:	6894      	ldr	r4, [r2, #8]
    Lfloat dp1 = alpha+1.0f;
2401112e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;
24011132:	4419      	add	r1, r3
    alpha = 1.0f - alpha;
24011134:	ee77 5ac0 	vsub.f32	s11, s15, s0
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
    Lfloat h2 = -0.5f * (pdp1d * dm2);
    Lfloat h3 = 0.166666666666667f * (pdp1d * dm1);
    
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
24011138:	69d3      	ldr	r3, [r2, #28]
    Lfloat dm2 = alpha-2.0f;
2401113a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;
2401113e:	4021      	ands	r1, r4
    Lfloat dp1 = alpha+1.0f;
24011140:	ee35 5a40 	vsub.f32	s10, s10, s0
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
24011144:	3b01      	subs	r3, #1
24011146:	6852      	ldr	r2, [r2, #4]
    		(d->buff[idx] * h1) +
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
			(d->buff[(idx + 2) & d->bufferMask] * h3);
24011148:	1c88      	adds	r0, r1, #2
    Lfloat dm2 = alpha-2.0f;
2401114a:	ee37 7a40 	vsub.f32	s14, s14, s0
    Lfloat h0 = -0.166666666666667f * (pddm1 * dm2);
2401114e:	ee30 6a67 	vsub.f32	s12, s0, s15
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
24011152:	440b      	add	r3, r1
    Lfloat pdp1d = dp1*alpha;
24011154:	ee65 5a85 	vmul.f32	s11, s11, s10
			(d->buff[(idx + 2) & d->bufferMask] * h3);
24011158:	4020      	ands	r0, r4
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
2401115a:	4023      	ands	r3, r4
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
2401115c:	ee70 7a27 	vadd.f32	s15, s0, s15
			(d->buff[(idx + 2) & d->bufferMask] * h3);
24011160:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    Lfloat h0 = -0.166666666666667f * (pddm1 * dm2);
24011164:	ee26 6a07 	vmul.f32	s12, s12, s14
			(d->buff[(idx + 2) & d->bufferMask] * h3);
24011168:	ee65 6aa4 	vmul.f32	s13, s11, s9
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
2401116c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
			(d->buff[(idx + 2) & d->bufferMask] * h3);
24011170:	ed90 4a00 	vldr	s8, [r0]
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
24011174:	ee67 7a85 	vmul.f32	s15, s15, s10
    Lfloat h0 = -0.166666666666667f * (pddm1 * dm2);
24011178:	ee26 6a24 	vmul.f32	s12, s12, s9
2401117c:	edd3 3a00 	vldr	s7, [r3]
			(d->buff[(idx + 2) & d->bufferMask] * h3);
24011180:	ee66 6a84 	vmul.f32	s13, s13, s8
    		(d->buff[idx] * h1) +
24011184:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
24011188:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
2401118c:	3101      	adds	r1, #1
2401118e:	ed93 5a00 	vldr	s10, [r3]
    Lfloat h2 = -0.5f * (pdp1d * dm2);
24011192:	eefe 4a00 	vmov.f32	s9, #224	; 0xbf000000 -0.5
24011196:	eee3 6a86 	vfma.f32	s13, s7, s12
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
2401119a:	4021      	ands	r1, r4
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
2401119c:	ee67 7a84 	vmul.f32	s15, s15, s8

}
240111a0:	f85d 4b04 	ldr.w	r4, [sp], #4
    Lfloat h2 = -0.5f * (pdp1d * dm2);
240111a4:	ee27 7a24 	vmul.f32	s14, s14, s9
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
240111a8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    Lfloat h2 = -0.5f * (pdp1d * dm2);
240111ac:	ee27 7a25 	vmul.f32	s14, s14, s11
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
240111b0:	eee5 6a27 	vfma.f32	s13, s10, s15
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
240111b4:	edd2 7a00 	vldr	s15, [r2]
240111b8:	ee20 0a26 	vmul.f32	s0, s0, s13
}
240111bc:	eea7 0a87 	vfma.f32	s0, s15, s14
240111c0:	4770      	bx	lr
240111c2:	bf00      	nop
240111c4:	be2aaaab 	.word	0xbe2aaaab

240111c8 <tLagrangeDelay_tapIn>:

void tLagrangeDelay_tapIn (tLagrangeDelay* const dl, Lfloat value, uint32_t tapDelay)
{
	_tLagrangeDelay* d = *dl;
240111c8:	6802      	ldr	r2, [r0, #0]

    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
240111ca:	6953      	ldr	r3, [r2, #20]
240111cc:	1a5b      	subs	r3, r3, r1

    d->buff[tap] = value;
240111ce:	e9d2 2001 	ldrd	r2, r0, [r2, #4]
    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
240111d2:	3b01      	subs	r3, #1
240111d4:	4003      	ands	r3, r0
    d->buff[tap] = value;
240111d6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
240111da:	ed82 0a00 	vstr	s0, [r2]
}
240111de:	4770      	bx	lr

240111e0 <tLagrangeDelay_addTo>:

Lfloat tLagrangeDelay_addTo (tLagrangeDelay* const dl, Lfloat value, uint32_t tapDelay)
{
	_tLagrangeDelay* d = *dl;
240111e0:	6802      	ldr	r2, [r0, #0]

    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
240111e2:	6953      	ldr	r3, [r2, #20]
240111e4:	1a5b      	subs	r3, r3, r1

    return (d->buff[tap] += value);
240111e6:	e9d2 2001 	ldrd	r2, r0, [r2, #4]
    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
240111ea:	3b01      	subs	r3, #1
240111ec:	4003      	ands	r3, r0
    return (d->buff[tap] += value);
240111ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
240111f2:	edd3 7a00 	vldr	s15, [r3]
240111f6:	ee30 0a27 	vadd.f32	s0, s0, s15
240111fa:	ed83 0a00 	vstr	s0, [r3]
}
240111fe:	4770      	bx	lr

24011200 <tLagrangeDelay_getMaxDelay>:


Lfloat   tLagrangeDelay_getMaxDelay (tLagrangeDelay* const dl)
{
	_tLagrangeDelay* d = *dl;
    return d->maxDelay;
24011200:	6803      	ldr	r3, [r0, #0]
24011202:	ed93 0a07 	vldr	s0, [r3, #28]
}
24011206:	eeb8 0a40 	vcvt.f32.u32	s0, s0
2401120a:	4770      	bx	lr

2401120c <tTapeDelay_tick>:
}

//#define SMOOTH_FACTOR 10.f

Lfloat   tTapeDelay_tick (tTapeDelay* const dl, Lfloat input)
{
2401120c:	b510      	push	{r4, lr}
    _tTapeDelay* d = *dl;
2401120e:	6804      	ldr	r4, [r0, #0]

    d->buff[d->inPoint] = input * d->gain;
24011210:	edd4 7a01 	vldr	s15, [r4, #4]
24011214:	6962      	ldr	r2, [r4, #20]
24011216:	68a3      	ldr	r3, [r4, #8]
24011218:	ee27 0a80 	vmul.f32	s0, s15, s0
2401121c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
24011220:	ed83 0a00 	vstr	s0, [r3]

    // Increment input pointer modulo length.
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;

    int idx =  (int) d->idx;
24011224:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    Lfloat alpha = d->idx - idx;

    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
24011228:	68a1      	ldr	r1, [r4, #8]
    int idx =  (int) d->idx;
2401122a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
2401122e:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
    int idx =  (int) d->idx;
24011232:	ee17 2a10 	vmov	r2, s14
    Lfloat alpha = d->idx - idx;
24011236:	eeb8 2ac7 	vcvt.f32.s32	s4, s14
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
2401123a:	3001      	adds	r0, #1
                                              d->buff[idx],
                                              d->buff[(idx + 1) % d->maxDelay],
                                              d->buff[(idx + 2) % d->maxDelay],
2401123c:	f102 0e02 	add.w	lr, r2, #2
                                              d->buff[(idx + 1) % d->maxDelay],
24011240:	f102 0c01 	add.w	ip, r2, #1
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
24011244:	4298      	cmp	r0, r3
24011246:	bf08      	it	eq
24011248:	2000      	moveq	r0, #0
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
2401124a:	ee37 2ac2 	vsub.f32	s4, s15, s4
2401124e:	6160      	str	r0, [r4, #20]
24011250:	1e58      	subs	r0, r3, #1
24011252:	4410      	add	r0, r2
24011254:	eb01 0282 	add.w	r2, r1, r2, lsl #2
24011258:	edd2 0a00 	vldr	s1, [r2]
                                              d->buff[(idx + 2) % d->maxDelay],
2401125c:	fbbe f2f3 	udiv	r2, lr, r3
24011260:	fb03 ee12 	mls	lr, r3, r2, lr
                                              d->buff[(idx + 1) % d->maxDelay],
24011264:	fbbc f2f3 	udiv	r2, ip, r3
24011268:	fb03 cc12 	mls	ip, r3, r2, ip
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
2401126c:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
24011270:	fbb0 f2f3 	udiv	r2, r0, r3
24011274:	fb03 0012 	mls	r0, r3, r2, r0
24011278:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
2401127c:	edde 1a00 	vldr	s3, [lr]
24011280:	eb01 0180 	add.w	r1, r1, r0, lsl #2
24011284:	ed9c 1a00 	vldr	s2, [ip]
24011288:	ed91 0a00 	vldr	s0, [r1]
2401128c:	f003 fed2 	bl	24015034 <LEAF_interpolate_hermite_x>
                                              alpha);

    Lfloat diff = (d->inPoint - d->idx);
24011290:	edd4 7a05 	vldr	s15, [r4, #20]
24011294:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
24011298:	eef8 7a67 	vcvt.f32.u32	s15, s15
    while (diff < 0.f) diff += d->maxDelay;
2401129c:	edd4 6a06 	vldr	s13, [r4, #24]
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
240112a0:	ed84 0a03 	vstr	s0, [r4, #12]
    while (diff < 0.f) diff += d->maxDelay;
240112a4:	eef8 6a66 	vcvt.f32.u32	s13, s13
    Lfloat diff = (d->inPoint - d->idx);
240112a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
    while (diff < 0.f) diff += d->maxDelay;
240112ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
240112b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240112b4:	d506      	bpl.n	240112c4 <tTapeDelay_tick+0xb8>
240112b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
240112ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
240112be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240112c2:	d4f8      	bmi.n	240112b6 <tTapeDelay_tick+0xaa>

    d->inc = 1.0f + (diff - d->delay) / d->delay; //* SMOOTH_FACTOR;
240112c4:	edd4 5a07 	vldr	s11, [r4, #28]
240112c8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
240112cc:	ee77 7ae5 	vsub.f32	s15, s15, s11
240112d0:	ee87 6aa5 	vdiv.f32	s12, s15, s11
240112d4:	ee36 6a05 	vadd.f32	s12, s12, s10

    d->idx += d->inc;
240112d8:	ee77 7a06 	vadd.f32	s15, s14, s12
    d->inc = 1.0f + (diff - d->delay) / d->delay; //* SMOOTH_FACTOR;
240112dc:	ed84 6a08 	vstr	s12, [r4, #32]

    while (d->idx >= d->maxDelay) d->idx -= d->maxDelay;
240112e0:	eef4 7ae6 	vcmpe.f32	s15, s13
    d->idx += d->inc;
240112e4:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    while (d->idx >= d->maxDelay) d->idx -= d->maxDelay;
240112e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240112ec:	db08      	blt.n	24011300 <tTapeDelay_tick+0xf4>
240112ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
240112f2:	eef4 7ae6 	vcmpe.f32	s15, s13
240112f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240112fa:	daf8      	bge.n	240112ee <tTapeDelay_tick+0xe2>
240112fc:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24

    if (d->lastOut)
        return d->lastOut;
    return 0.0f;
}
24011300:	bd10      	pop	{r4, pc}
24011302:	bf00      	nop

24011304 <tTapeDelay_setDelay>:
    _tTapeDelay* d = *dl;
    d->inc = rate;
}

void     tTapeDelay_setDelay (tTapeDelay* const dl, Lfloat delay)
{
24011304:	b510      	push	{r4, lr}
    _tTapeDelay* d = *dl;
24011306:	6804      	ldr	r4, [r0, #0]
{
24011308:	eef0 0a40 	vmov.f32	s1, s0
    d->delay = LEAF_clip(1.f, delay,  d->maxDelay);
2401130c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24011310:	edd4 7a06 	vldr	s15, [r4, #24]
24011314:	eeb8 1a67 	vcvt.f32.u32	s2, s15
24011318:	f003 fc8e 	bl	24014c38 <LEAF_clip>
2401131c:	ed84 0a07 	vstr	s0, [r4, #28]
}
24011320:	bd10      	pop	{r4, pc}
24011322:	bf00      	nop

24011324 <tCrusher_init>:
//============================================================================================================
#define SCALAR 5000.f
#define INV_SCALAR 0.0002f

void tCrusher_init (tCrusher* const cr, LEAF* const leaf)
{
24011324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tCrusher_initToPool(cr, &leaf->mempool);
}

void tCrusher_initToPool (tCrusher* const cr, tMempool* const mp)
{
    _tMempool* m = *mp;
24011326:	698f      	ldr	r7, [r1, #24]
{
24011328:	4606      	mov	r6, r0
2401132a:	460d      	mov	r5, r1
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
2401132c:	2020      	movs	r0, #32
2401132e:	4639      	mov	r1, r7
24011330:	f003 ff84 	bl	2401523c <mpool_alloc>
    c->mempool = m;
    
    c->op = 4;
    c->div = 1.0f / SCALAR;
    c->rnd = 0.25f;
24011334:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
    c->div = 1.0f / SCALAR;
24011338:	4a10      	ldr	r2, [pc, #64]	; (2401137c <tCrusher_init+0x58>)
    c->op = 4;
2401133a:	2104      	movs	r1, #4
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
2401133c:	6030      	str	r0, [r6, #0]
2401133e:	4604      	mov	r4, r0
    c->op = 4;
24011340:	6141      	str	r1, [r0, #20]
    c->rnd = 0.25f;
24011342:	6103      	str	r3, [r0, #16]
    c->srr = 0.25f;
24011344:	6043      	str	r3, [r0, #4]
    c->div = 1.0f / SCALAR;
24011346:	60c2      	str	r2, [r0, #12]
    c->mempool = m;
24011348:	6007      	str	r7, [r0, #0]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
2401134a:	2010      	movs	r0, #16
    _tMempool* m = *mp;
2401134c:	69ad      	ldr	r5, [r5, #24]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
2401134e:	4629      	mov	r1, r5
24011350:	f003 ff74 	bl	2401523c <mpool_alloc>
    s->invRatio = 1.0f;
24011354:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    s->hold = 0.0f;
24011358:	2200      	movs	r2, #0
    s->count = 0;
2401135a:	2300      	movs	r3, #0
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
2401135c:	61e0      	str	r0, [r4, #28]
    tSampleReducer_initToPool(&c->sReducer, mp);
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
2401135e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 24011380 <tCrusher_init+0x5c>
    s->mempool = m;
24011362:	6005      	str	r5, [r0, #0]
    s->invRatio = 1.0f;
24011364:	6041      	str	r1, [r0, #4]
    s->hold = 0.0f;
24011366:	6082      	str	r2, [r0, #8]
    s->count = 0;
24011368:	60c3      	str	r3, [r0, #12]
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
2401136a:	eddf 7a06 	vldr	s15, [pc, #24]	; 24011384 <tCrusher_init+0x60>
2401136e:	edd4 6a03 	vldr	s13, [r4, #12]
24011372:	eee6 7a87 	vfma.f32	s15, s13, s14
24011376:	edc4 7a06 	vstr	s15, [r4, #24]
}
2401137a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2401137c:	3951b717 	.word	0x3951b717
24011380:	3912ccf6 	.word	0x3912ccf6
24011384:	3e99999a 	.word	0x3e99999a

24011388 <tCrusher_tick>:
{
    _tCrusher* c = *cr;
    
    Lfloat sample = input;
    
    sample *= SCALAR; // SCALAR is 5000 by default
24011388:	eddf 7a1e 	vldr	s15, [pc, #120]	; 24011404 <tCrusher_tick+0x7c>
2401138c:	ee20 0a27 	vmul.f32	s0, s0, s15
{
24011390:	b510      	push	{r4, lr}
    
    sample = (int32_t) sample;
24011392:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    _tCrusher* c = *cr;
24011396:	6804      	ldr	r4, [r0, #0]
    
    sample *= c->div;
24011398:	edd4 7a03 	vldr	s15, [r4, #12]
    sample = (int32_t) sample;
2401139c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    
    sample = LEAF_bitwise_xor(sample, c->op << 23);
240113a0:	6960      	ldr	r0, [r4, #20]
240113a2:	05c0      	lsls	r0, r0, #23
240113a4:	ee20 0a27 	vmul.f32	s0, s0, s15
240113a8:	f003 fc40 	bl	24014c2c <LEAF_bitwise_xor>
    
    sample = LEAF_clip(-1.f, sample, 1.f);
240113ac:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    sample = LEAF_bitwise_xor(sample, c->op << 23);
240113b0:	eef0 0a40 	vmov.f32	s1, s0
    sample = LEAF_clip(-1.f, sample, 1.f);
240113b4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
240113b8:	f003 fc3e 	bl	24014c38 <LEAF_clip>
    
    sample = LEAF_round(sample, c->rnd);
240113bc:	edd4 0a04 	vldr	s1, [r4, #16]
240113c0:	f003 fc22 	bl	24014c08 <LEAF_round>
    _tSampleReducer* s = *sr;
240113c4:	69e3      	ldr	r3, [r4, #28]
    if (s->count > s->invRatio)
240113c6:	68da      	ldr	r2, [r3, #12]
240113c8:	edd3 7a01 	vldr	s15, [r3, #4]
240113cc:	ee07 2a10 	vmov	s14, r2
240113d0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
240113d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
240113d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240113dc:	dc08      	bgt.n	240113f0 <tCrusher_tick+0x68>
    s->count++;
240113de:	3201      	adds	r2, #1
    return s->hold;
240113e0:	ed93 0a02 	vldr	s0, [r3, #8]
    s->count++;
240113e4:	60da      	str	r2, [r3, #12]
    
    sample = tSampleReducer_tick(&c->sReducer, sample);
    
    return sample * c->gain;
240113e6:	edd4 7a06 	vldr	s15, [r4, #24]
    
}
240113ea:	ee20 0a27 	vmul.f32	s0, s0, s15
240113ee:	bd10      	pop	{r4, pc}
        s->hold = input;
240113f0:	2201      	movs	r2, #1
240113f2:	ed83 0a02 	vstr	s0, [r3, #8]
    s->count++;
240113f6:	60da      	str	r2, [r3, #12]
    return sample * c->gain;
240113f8:	edd4 7a06 	vldr	s15, [r4, #24]
}
240113fc:	ee20 0a27 	vmul.f32	s0, s0, s15
24011400:	bd10      	pop	{r4, pc}
24011402:	bf00      	nop
24011404:	459c4000 	.word	0x459c4000

24011408 <tCrusher_setOperation>:

void    tCrusher_setOperation (tCrusher* const cr, Lfloat op)
{
    _tCrusher* c = *cr;
    c->op = (uint32_t) (op * 8.0f);
24011408:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
    _tCrusher* c = *cr;
2401140c:	6803      	ldr	r3, [r0, #0]
    c->op = (uint32_t) (op * 8.0f);
2401140e:	ee20 0a27 	vmul.f32	s0, s0, s15
24011412:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24011416:	ed83 0a05 	vstr	s0, [r3, #20]
}
2401141a:	4770      	bx	lr

2401141c <tCrusher_setQuality>:

// 0.0 - 1.0
void    tCrusher_setQuality (tCrusher* const cr, Lfloat val)
{
2401141c:	eef0 0a40 	vmov.f32	s1, s0
    _tCrusher* c = *cr;
    
    val = LEAF_clip(0.0f, val, 1.0f);
24011420:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 24011454 <tCrusher_setQuality+0x38>
24011424:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
24011428:	b510      	push	{r4, lr}
    _tCrusher* c = *cr;
2401142a:	6804      	ldr	r4, [r0, #0]
    val = LEAF_clip(0.0f, val, 1.0f);
2401142c:	f003 fc04 	bl	24014c38 <LEAF_clip>
    
    c->div = 0.01f + val * SCALAR;
24011430:	ed9f 6a09 	vldr	s12, [pc, #36]	; 24011458 <tCrusher_setQuality+0x3c>
24011434:	eddf 7a09 	vldr	s15, [pc, #36]	; 2401145c <tCrusher_setQuality+0x40>
    
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
24011438:	eddf 6a09 	vldr	s13, [pc, #36]	; 24011460 <tCrusher_setQuality+0x44>
    c->div = 0.01f + val * SCALAR;
2401143c:	eee0 7a06 	vfma.f32	s15, s0, s12
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
24011440:	ed9f 7a08 	vldr	s14, [pc, #32]	; 24011464 <tCrusher_setQuality+0x48>
24011444:	eea7 7aa6 	vfma.f32	s14, s15, s13
    c->div = 0.01f + val * SCALAR;
24011448:	edc4 7a03 	vstr	s15, [r4, #12]
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
2401144c:	ed84 7a06 	vstr	s14, [r4, #24]
}
24011450:	bd10      	pop	{r4, pc}
24011452:	bf00      	nop
24011454:	00000000 	.word	0x00000000
24011458:	459c4000 	.word	0x459c4000
2401145c:	3c23d70a 	.word	0x3c23d70a
24011460:	3912ccf6 	.word	0x3912ccf6
24011464:	3e99999a 	.word	0x3e99999a

24011468 <tCrusher_setRound>:

// what decimal to round to
void    tCrusher_setRound (tCrusher* const cr, Lfloat rnd)
{
    _tCrusher* c = *cr;
24011468:	6803      	ldr	r3, [r0, #0]
    c->rnd = rnd;
2401146a:	ed83 0a04 	vstr	s0, [r3, #16]
}
2401146e:	4770      	bx	lr

24011470 <tCrusher_setSamplingRatio>:
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
24011470:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0

void    tCrusher_setSamplingRatio (tCrusher* const cr, Lfloat ratio)
{
    _tCrusher* c = *cr;
24011474:	6803      	ldr	r3, [r0, #0]
    c->srr = ratio;
24011476:	ed83 0a01 	vstr	s0, [r3, #4]
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
2401147a:	eeb4 0a67 	vcmp.f32	s0, s15
2401147e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011482:	d809      	bhi.n	24011498 <tCrusher_setSamplingRatio+0x28>
24011484:	eeb5 0a40 	vcmp.f32	s0, #0.0
24011488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401148c:	db04      	blt.n	24011498 <tCrusher_setSamplingRatio+0x28>
        s->invRatio = 1.0f / ratio;
2401148e:	ee87 7a80 	vdiv.f32	s14, s15, s0
    _tSampleReducer* s = *sr;
24011492:	69db      	ldr	r3, [r3, #28]
        s->invRatio = 1.0f / ratio;
24011494:	ed83 7a01 	vstr	s14, [r3, #4]
    tSampleReducer_setRatio(&c->sReducer, ratio);
}
24011498:	4770      	bx	lr
2401149a:	bf00      	nop

2401149c <tCompressor_init>:
 
 return c;
 }
 */
void tCompressor_init (tCompressor* const comp, LEAF* const leaf)
{
2401149c:	b570      	push	{r4, r5, r6, lr}
2401149e:	ed2d 8b02 	vpush	{d8}
    tCompressor_initToPool(comp, &leaf->mempool);
}

void tCompressor_initToPool (tCompressor* const comp, tMempool* const mp)
{
    _tMempool* m = *mp;
240114a2:	698d      	ldr	r5, [r1, #24]
{
240114a4:	4606      	mov	r6, r0
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
240114a6:	206c      	movs	r0, #108	; 0x6c
240114a8:	4629      	mov	r1, r5
240114aa:	f003 fec7 	bl	2401523c <mpool_alloc>
240114ae:	6030      	str	r0, [r6, #0]
    c->mempool = m;
240114b0:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    c->sampleRate = leaf->sampleRate;
    
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
240114b2:	eebb 0a04 	vmov.f32	s0, #180	; 0xc1a00000 -20.0
    c->sampleRate = leaf->sampleRate;
240114b6:	686b      	ldr	r3, [r5, #4]
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
240114b8:	4604      	mov	r4, r0
    c->sampleRate = leaf->sampleRate;
240114ba:	ed93 8a00 	vldr	s16, [r3]
240114be:	ed80 8a12 	vstr	s16, [r0, #72]	; 0x48
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
240114c2:	ee80 0a08 	vdiv.f32	s0, s0, s16
240114c6:	f008 f993 	bl	240197f0 <expf>
240114ca:	ed84 0a01 	vstr	s0, [r4, #4]
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
240114ce:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
240114d2:	ee87 0a88 	vdiv.f32	s0, s15, s16
240114d6:	f008 f98b 	bl	240197f0 <expf>
    c->x_T[0] = 0.0f;
    c->x_T[1] = 0.0f;
    c->y_T[0] = 0.0f;
    c->y_T[1] = 0.0f;
    c->T = 0.0f; // Threshold
    c->R = 0.5f; // compression Ratio
240114da:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->x_G[0] = 0.0f;
240114de:	2300      	movs	r3, #0
    c->invR = 2.0f; //inverse of ratio
240114e0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c->R = 0.5f; // compression Ratio
240114e4:	6122      	str	r2, [r4, #16]
    c->isActive = 0;
240114e6:	2200      	movs	r2, #0
    c->x_G[0] = 0.0f;
240114e8:	6263      	str	r3, [r4, #36]	; 0x24
    c->isActive = 0;
240114ea:	6462      	str	r2, [r4, #68]	; 0x44
    c->M = 3.0f; // decibel Make-up gain
    c->W = 1.5f; // decibel Width of knee transition
240114ec:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
    c->x_G[1] = 0.0f;
240114f0:	62a3      	str	r3, [r4, #40]	; 0x28
    c->y_G[0] = 0.0f;
240114f2:	62e3      	str	r3, [r4, #44]	; 0x2c
    c->y_G[1] = 0.0f;
240114f4:	6323      	str	r3, [r4, #48]	; 0x30
    c->x_T[0] = 0.0f;
240114f6:	6363      	str	r3, [r4, #52]	; 0x34
    c->x_T[1] = 0.0f;
240114f8:	63a3      	str	r3, [r4, #56]	; 0x38
    c->y_T[0] = 0.0f;
240114fa:	63e3      	str	r3, [r4, #60]	; 0x3c
    c->y_T[1] = 0.0f;
240114fc:	6423      	str	r3, [r4, #64]	; 0x40
    c->T = 0.0f; // Threshold
240114fe:	60e3      	str	r3, [r4, #12]
    c->M = 3.0f; // decibel Make-up gain
24011500:	4905      	ldr	r1, [pc, #20]	; (24011518 <tCompressor_init+0x7c>)
    c->inv4W = 1.0f / (4.0f * c->W) ;
24011502:	4b06      	ldr	r3, [pc, #24]	; (2401151c <tCompressor_init+0x80>)
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
24011504:	ed84 0a02 	vstr	s0, [r4, #8]
    c->invR = 2.0f; //inverse of ratio
24011508:	61e0      	str	r0, [r4, #28]
    c->M = 3.0f; // decibel Make-up gain
2401150a:	61a1      	str	r1, [r4, #24]
    c->W = 1.5f; // decibel Width of knee transition
2401150c:	6162      	str	r2, [r4, #20]
    c->inv4W = 1.0f / (4.0f * c->W) ;
2401150e:	6223      	str	r3, [r4, #32]
}
24011510:	ecbd 8b02 	vpop	{d8}
24011514:	bd70      	pop	{r4, r5, r6, pc}
24011516:	bf00      	nop
24011518:	40400000 	.word	0x40400000
2401151c:	3e2aaaab 	.word	0x3e2aaaab

24011520 <tCompressor_tick>:
    
    mpool_free((char*)c, c->mempool);
}

Lfloat tCompressor_tick(tCompressor* const comp, Lfloat in)
{
24011520:	b510      	push	{r4, lr}
24011522:	ed2d 8b02 	vpush	{d8}
    _tCompressor* c = *comp;
24011526:	6804      	ldr	r4, [r0, #0]
{
24011528:	eeb0 8a40 	vmov.f32	s16, s0
    
    Lfloat slope, overshoot;
    
    Lfloat in_db = LEAF_clip(-90.0f, fasteratodb(fastabsf(in)), 0.0f);
2401152c:	f003 fa6c 	bl	24014a08 <fastabsf>
24011530:	f003 fe1a 	bl	24015168 <fasteratodb>
24011534:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 240115e4 <tCompressor_tick+0xc4>
24011538:	eef0 0a40 	vmov.f32	s1, s0
2401153c:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 240115e8 <tCompressor_tick+0xc8>
24011540:	f003 fb7a 	bl	24014c38 <LEAF_clip>
    
    c->y_T[1] = c->y_T[0];
    
    slope = 1.0f - c->invR; // feed-forward topology;
    
    overshoot = in_db - c->T;
24011544:	edd4 7a03 	vldr	s15, [r4, #12]
    

    if (overshoot <= -(c->W))
24011548:	ed94 6a05 	vldr	s12, [r4, #20]
    overshoot = in_db - c->T;
2401154c:	ee70 7a67 	vsub.f32	s15, s0, s15
    c->y_T[1] = c->y_T[0];
24011550:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    if (overshoot <= -(c->W))
24011554:	eeb1 7a46 	vneg.f32	s14, s12
    c->y_T[1] = c->y_T[0];
24011558:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
    if (overshoot <= -(c->W))
2401155c:	eeb4 7ae7 	vcmpe.f32	s14, s15
24011560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011564:	da16      	bge.n	24011594 <tCompressor_tick+0x74>
    {
        out_db = in_db;
        c->isActive = 0;
    }
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
24011566:	eeb4 6ae7 	vcmpe.f32	s12, s15
    slope = 1.0f - c->invR; // feed-forward topology;
2401156a:	edd4 5a07 	vldr	s11, [r4, #28]
2401156e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
24011572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    slope = 1.0f - c->invR; // feed-forward topology;
24011576:	ee37 7a65 	vsub.f32	s14, s14, s11
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
2401157a:	dd2f      	ble.n	240115dc <tCompressor_tick+0xbc>
    {
        Lfloat squareit = (overshoot + c->W);
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
2401157c:	edd4 5a08 	vldr	s11, [r4, #32]
        Lfloat squareit = (overshoot + c->W);
24011580:	ee36 6a27 	vadd.f32	s12, s12, s15
    {
24011584:	2301      	movs	r3, #1
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
24011586:	ee27 7a25 	vmul.f32	s14, s14, s11
2401158a:	ee27 7a06 	vmul.f32	s14, s14, s12
2401158e:	ee27 7a06 	vmul.f32	s14, s14, s12
    {
24011592:	e002      	b.n	2401159a <tCompressor_tick+0x7a>
24011594:	2300      	movs	r3, #0
24011596:	ed9f 7a13 	vldr	s14, [pc, #76]	; 240115e4 <tCompressor_tick+0xc4>
        out_db = in_db + slope * overshoot;
        c->isActive = 1;
    }
    */
    c->x_T[0] = out_db - in_db;
    if (c->x_T[0] > c->y_T[1])
2401159a:	eef4 6ac7 	vcmpe.f32	s13, s14
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
    else
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
    Lfloat attenuation = fasterdbtoa(c->M - c->y_T[0]);
2401159e:	ed94 0a06 	vldr	s0, [r4, #24]
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
240115a2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        c->isActive = 0;
240115a6:	6463      	str	r3, [r4, #68]	; 0x44
    c->x_T[0] = out_db - in_db;
240115a8:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
    if (c->x_T[0] > c->y_T[1])
240115ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
240115b0:	bf4c      	ite	mi
240115b2:	ed94 6a01 	vldrmi	s12, [r4, #4]
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
240115b6:	ed94 6a02 	vldrpl	s12, [r4, #8]
240115ba:	ee77 7ac6 	vsub.f32	s15, s15, s12
240115be:	ee67 7a87 	vmul.f32	s15, s15, s14
240115c2:	eee6 7a86 	vfma.f32	s15, s13, s12
    Lfloat attenuation = fasterdbtoa(c->M - c->y_T[0]);
240115c6:	ee30 0a67 	vsub.f32	s0, s0, s15
240115ca:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
240115ce:	f003 fdf9 	bl	240151c4 <fasterdbtoa>
    return attenuation * in;
}
240115d2:	ee28 0a00 	vmul.f32	s0, s16, s0
240115d6:	ecbd 8b02 	vpop	{d8}
240115da:	bd10      	pop	{r4, pc}
        out_db = in_db + slope * overshoot;
240115dc:	ee27 7a27 	vmul.f32	s14, s14, s15
240115e0:	2301      	movs	r3, #1
240115e2:	e7da      	b.n	2401159a <tCompressor_tick+0x7a>
240115e4:	00000000 	.word	0x00000000
240115e8:	c2b40000 	.word	0xc2b40000

240115ec <tCompressor_setTables>:
{
    _tCompressor* c = *comp;
	c->atodbTable = atodb;
	c->dbtoaTable = dbtoa;

	c->atodbTableSizeMinus1 = atodbTableSize-1;
240115ec:	3b01      	subs	r3, #1
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;

	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
240115ee:	ee70 0ac0 	vsub.f32	s1, s1, s0
    _tCompressor* c = *comp;
240115f2:	6800      	ldr	r0, [r0, #0]
	c->atodbOffset = atodbMinIn * c->atodbScalar;


	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
240115f4:	ee71 1ac1 	vsub.f32	s3, s3, s2
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
240115f8:	ee07 3a90 	vmov	s15, r3
	c->atodbTableSizeMinus1 = atodbTableSize-1;
240115fc:	6643      	str	r3, [r0, #100]	; 0x64
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
240115fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
{
24011602:	9b00      	ldr	r3, [sp, #0]
	c->atodbTable = atodb;
24011604:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;
24011606:	3b01      	subs	r3, #1
	c->dbtoaTable = dbtoa;
24011608:	6502      	str	r2, [r0, #80]	; 0x50
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
2401160a:	eec7 7a20 	vdiv.f32	s15, s14, s1
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;
2401160e:	6683      	str	r3, [r0, #104]	; 0x68
	c->atodbOffset = atodbMinIn * c->atodbScalar;
24011610:	ee27 0a80 	vmul.f32	s0, s15, s0
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
24011614:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
24011618:	ee07 3a90 	vmov	s15, r3
2401161c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	c->atodbOffset = atodbMinIn * c->atodbScalar;
24011620:	ed80 0a17 	vstr	s0, [r0, #92]	; 0x5c
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
24011624:	eec7 7a21 	vdiv.f32	s15, s14, s3
	c->dbtoaOffset = dbtoaMinIn * c->dbtoaScalar;
24011628:	ee27 1a81 	vmul.f32	s2, s15, s2
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
2401162c:	edc0 7a16 	vstr	s15, [r0, #88]	; 0x58
	c->dbtoaOffset = dbtoaMinIn * c->dbtoaScalar;
24011630:	ed80 1a18 	vstr	s2, [r0, #96]	; 0x60

}
24011634:	4770      	bx	lr
24011636:	bf00      	nop

24011638 <tCompressor_setSampleRate>:
    c->tauRelease = fasterexpf(-1.0f/(0.001f * release * c->sampleRate));
}

void tCompressor_setSampleRate(tCompressor* const comp, Lfloat sampleRate)
{
    _tCompressor* c = *comp;
24011638:	6803      	ldr	r3, [r0, #0]
    c->sampleRate = sampleRate;
2401163a:	ed83 0a12 	vstr	s0, [r3, #72]	; 0x48
}
2401163e:	4770      	bx	lr

24011640 <tFeedbackLeveler_init>:
/* Feedback Leveler */

void tFeedbackLeveler_init (tFeedbackLeveler* const fb, Lfloat targetLevel, Lfloat factor, Lfloat strength, int mode, LEAF* const leaf)
{
24011640:	b5f0      	push	{r4, r5, r6, r7, lr}
    tFeedbackLeveler_initToPool(fb, targetLevel, factor, strength, mode, &leaf->mempool);
}

void tFeedbackLeveler_initToPool (tFeedbackLeveler* const fb, Lfloat targetLevel, Lfloat factor, Lfloat strength, int mode, tMempool* const mp)
{
    _tMempool* m = *mp;
24011642:	4614      	mov	r4, r2
{
24011644:	4606      	mov	r6, r0
24011646:	460d      	mov	r5, r1
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
24011648:	2018      	movs	r0, #24
{
2401164a:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
2401164e:	f854 7f18 	ldr.w	r7, [r4, #24]!
{
24011652:	b083      	sub	sp, #12
24011654:	eef0 8a40 	vmov.f32	s17, s0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
24011658:	4639      	mov	r1, r7
{
2401165a:	eeb0 8a41 	vmov.f32	s16, s2
2401165e:	edcd 0a01 	vstr	s1, [sp, #4]
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
24011662:	f003 fdeb 	bl	2401523c <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->targetLevel=targetLevel;
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
24011666:	4621      	mov	r1, r4
    p->curr=0.0f;
24011668:	2300      	movs	r3, #0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
2401166a:	4604      	mov	r4, r0
2401166c:	6030      	str	r0, [r6, #0]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
2401166e:	ed9d 0a01 	vldr	s0, [sp, #4]
24011672:	3014      	adds	r0, #20
    p->mempool = m;
24011674:	f840 7c14 	str.w	r7, [r0, #-20]
    p->targetLevel=targetLevel;
24011678:	ed40 8a04 	vstr	s17, [r0, #-16]
    p->curr=0.0f;
2401167c:	6123      	str	r3, [r4, #16]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
2401167e:	f7ff faa9 	bl	24010bd4 <tPowerFollower_initToPool>
    p->mode=mode;
24011682:	60e5      	str	r5, [r4, #12]
    p->strength=strength;
24011684:	ed84 8a02 	vstr	s16, [r4, #8]
}
24011688:	b003      	add	sp, #12
2401168a:	ecbd 8b02 	vpop	{d8}
2401168e:	bdf0      	pop	{r4, r5, r6, r7, pc}

24011690 <tFeedbackLeveler_initToPool>:
{
24011690:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
24011692:	6817      	ldr	r7, [r2, #0]
{
24011694:	4614      	mov	r4, r2
24011696:	4606      	mov	r6, r0
24011698:	460d      	mov	r5, r1
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
2401169a:	2018      	movs	r0, #24
2401169c:	4639      	mov	r1, r7
{
2401169e:	ed2d 8b02 	vpush	{d8}
240116a2:	eef0 8a40 	vmov.f32	s17, s0
240116a6:	b083      	sub	sp, #12
240116a8:	eeb0 8a41 	vmov.f32	s16, s2
240116ac:	edcd 0a01 	vstr	s1, [sp, #4]
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
240116b0:	f003 fdc4 	bl	2401523c <mpool_alloc>
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
240116b4:	4621      	mov	r1, r4
    p->curr=0.0f;
240116b6:	2300      	movs	r3, #0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
240116b8:	4604      	mov	r4, r0
240116ba:	6030      	str	r0, [r6, #0]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
240116bc:	ed9d 0a01 	vldr	s0, [sp, #4]
240116c0:	3014      	adds	r0, #20
    p->mempool = m;
240116c2:	f840 7c14 	str.w	r7, [r0, #-20]
    p->targetLevel=targetLevel;
240116c6:	ed40 8a04 	vstr	s17, [r0, #-16]
    p->curr=0.0f;
240116ca:	6123      	str	r3, [r4, #16]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
240116cc:	f7ff fa82 	bl	24010bd4 <tPowerFollower_initToPool>
    p->mode=mode;
240116d0:	60e5      	str	r5, [r4, #12]
    p->strength=strength;
240116d2:	ed84 8a02 	vstr	s16, [r4, #8]
}
240116d6:	b003      	add	sp, #12
240116d8:	ecbd 8b02 	vpop	{d8}
240116dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
240116de:	bf00      	nop

240116e0 <tFeedbackLeveler_free>:

void tFeedbackLeveler_free (tFeedbackLeveler* const fb)
{
240116e0:	b510      	push	{r4, lr}
    _tFeedbackLeveler* p = *fb;
240116e2:	6804      	ldr	r4, [r0, #0]
    
    tPowerFollower_free(&p->pwrFlw);
240116e4:	f104 0014 	add.w	r0, r4, #20
240116e8:	f7ff fa8e 	bl	24010c08 <tPowerFollower_free>
    mpool_free((char*)p, p->mempool);
240116ec:	6821      	ldr	r1, [r4, #0]
240116ee:	4620      	mov	r0, r4
}
240116f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)p, p->mempool);
240116f4:	f003 be64 	b.w	240153c0 <mpool_free>

240116f8 <tFeedbackLeveler_setStrength>:

void     tFeedbackLeveler_setStrength(tFeedbackLeveler* const fb, Lfloat strength)
{    // strength is how strongly level diff is affecting the amp ratio
    // try 0.125 for a start
    _tFeedbackLeveler* p = *fb;
240116f8:	6803      	ldr	r3, [r0, #0]
    p->strength=strength;
240116fa:	ed83 0a02 	vstr	s0, [r3, #8]
}
240116fe:	4770      	bx	lr

24011700 <tFeedbackLeveler_setFactor>:

void     tFeedbackLeveler_setFactor(tFeedbackLeveler* const fb, Lfloat factor)
{
    _tFeedbackLeveler* p = *fb;
    tPowerFollower_setFactor(&p->pwrFlw,factor);
24011700:	6800      	ldr	r0, [r0, #0]
24011702:	3014      	adds	r0, #20
24011704:	f7ff ba84 	b.w	24010c10 <tPowerFollower_setFactor>

24011708 <tFeedbackLeveler_setMode>:
}

void     tFeedbackLeveler_setMode(tFeedbackLeveler* const fb, int mode)
{    // 0 for decaying with upwards lev limiting, 1 for constrained absolute level (also downwards limiting)
    _tFeedbackLeveler* p = *fb;
24011708:	6803      	ldr	r3, [r0, #0]
    p->mode=mode;
2401170a:	60d9      	str	r1, [r3, #12]
}
2401170c:	4770      	bx	lr
2401170e:	bf00      	nop

24011710 <tFeedbackLeveler_tick>:

Lfloat   tFeedbackLeveler_tick(tFeedbackLeveler* const fb, Lfloat input)
{
24011710:	b510      	push	{r4, lr}
24011712:	ed2d 8b02 	vpush	{d8}
    _tFeedbackLeveler* p = *fb;
24011716:	6804      	ldr	r4, [r0, #0]
{
24011718:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
2401171c:	f104 0014 	add.w	r0, r4, #20
24011720:	f7ff fa88 	bl	24010c34 <tPowerFollower_tick>
24011724:	edd4 7a01 	vldr	s15, [r4, #4]
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
24011728:	68e3      	ldr	r3, [r4, #12]
    Lfloat levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
2401172a:	ee30 7a67 	vsub.f32	s14, s0, s15
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
2401172e:	b91b      	cbnz	r3, 24011738 <tFeedbackLeveler_tick+0x28>
24011730:	eddf 7a08 	vldr	s15, [pc, #32]	; 24011754 <tFeedbackLeveler_tick+0x44>
24011734:	fe87 7a27 	vmaxnm.f32	s14, s14, s15
    p->curr=input*(1.0f-p->strength*levdiff);
24011738:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2401173c:	edd4 6a02 	vldr	s13, [r4, #8]
24011740:	eee6 7ac7 	vfms.f32	s15, s13, s14
24011744:	ee27 0a88 	vmul.f32	s0, s15, s16
24011748:	ed84 0a04 	vstr	s0, [r4, #16]
    return p->curr;
}
2401174c:	ecbd 8b02 	vpop	{d8}
24011750:	bd10      	pop	{r4, pc}
24011752:	bf00      	nop
24011754:	00000000 	.word	0x00000000

24011758 <tFeedbackLeveler_setTargetLevel>:
}


void     tFeedbackLeveler_setTargetLevel   (tFeedbackLeveler* const fb, Lfloat TargetLevel)
{
    _tFeedbackLeveler* p = *fb;
24011758:	6803      	ldr	r3, [r0, #0]
    p->targetLevel=TargetLevel;
2401175a:	ed83 0a01 	vstr	s0, [r3, #4]
}
2401175e:	4770      	bx	lr

24011760 <tADSRT_init>:
//================================================================================

/* ADSR 4 */ // new version of our original table-based ADSR but with the table passed in by the user
// use this if the size of the big ADSR tables is too much.
void    tADSRT_init    (tADSRT* const adsrenv, Lfloat attack, Lfloat decay, Lfloat sustain, Lfloat release, Lfloat* expBuffer, int bufferSize, LEAF* const leaf)
{
24011760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24011762:	ed2d 8b04 	vpush	{d8-d9}

//initialize with an exponential function that decays -- i.e. a call to LEAF_generate_exp(expBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, EXP_BUFFER_SIZE);
//times are in ms
void    tADSRT_initToPool    (tADSRT* const adsrenv, Lfloat attack, Lfloat decay, Lfloat sustain, Lfloat release, Lfloat* expBuffer, int bufferSize, tMempool* const mp)
{
    _tMempool* m = *mp;
24011766:	699e      	ldr	r6, [r3, #24]
{
24011768:	4614      	mov	r4, r2
2401176a:	4607      	mov	r7, r0
2401176c:	460d      	mov	r5, r1
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
2401176e:	206c      	movs	r0, #108	; 0x6c
24011770:	4631      	mov	r1, r6
{
24011772:	eef0 9a40 	vmov.f32	s19, s0
24011776:	eeb0 9a60 	vmov.f32	s18, s1
2401177a:	eef0 8a61 	vmov.f32	s17, s3
2401177e:	eeb0 8a41 	vmov.f32	s16, s2
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
24011782:	f003 fd5b 	bl	2401523c <mpool_alloc>
    adsr->exp_buff = expBuffer;
    adsr->buff_size = bufferSize;
    adsr->buff_sizeMinusOne = bufferSize - 1;

    adsr->sampleRate = leaf->sampleRate;
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
24011786:	ee07 4a90 	vmov	s15, r4
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
2401178a:	6038      	str	r0, [r7, #0]
    adsr->buff_sizeMinusOne = bufferSize - 1;
2401178c:	1e62      	subs	r2, r4, #1
    adsr->mempool = m;
2401178e:	6006      	str	r6, [r0, #0]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
24011790:	eef8 5a67 	vcvt.f32.u32	s11, s15
24011794:	eddf 7a22 	vldr	s15, [pc, #136]	; 24011820 <tADSRT_init+0xc0>
    LEAF* leaf = adsr->mempool->leaf;
24011798:	6873      	ldr	r3, [r6, #4]

    adsr->next = 0.0f;

    adsr->whichStage = env_idle;

    adsr->sustain = sustain;
2401179a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    adsr->buff_sizeMinusOne = bufferSize - 1;
2401179e:	60c2      	str	r2, [r0, #12]
    adsr->decay = decay;
    adsr->release = release;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
240117a0:	eef4 6a00 	vmov.f32	s13, #64	; 0x3e000000  0.125
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
240117a4:	ee65 5aa7 	vmul.f32	s11, s11, s15
    adsr->exp_buff = expBuffer;
240117a8:	6045      	str	r5, [r0, #4]
    adsr->buff_size = bufferSize;
240117aa:	6084      	str	r4, [r0, #8]
    adsr->sustain = sustain;
240117ac:	fe88 8a46 	vminnm.f32	s16, s16, s12
    adsr->sampleRate = leaf->sampleRate;
240117b0:	ed93 5a00 	vldr	s10, [r3]
    adsr->whichStage = env_idle;
240117b4:	2200      	movs	r2, #0
240117b6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 24011824 <tADSRT_init+0xc4>
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
240117ba:	eec5 7a85 	vdiv.f32	s15, s11, s10
    adsr->sampleRate = leaf->sampleRate;
240117be:	ed80 5a04 	vstr	s10, [r0, #16]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
240117c2:	fe89 0a87 	vmaxnm.f32	s0, s19, s14
240117c6:	fec9 0a07 	vmaxnm.f32	s1, s18, s14
240117ca:	fec8 1a87 	vmaxnm.f32	s3, s17, s14

    adsr->baseLeakFactor = 1.0f;
240117ce:	ed80 6a18 	vstr	s12, [r0, #96]	; 0x60
    adsr->leakFactor = 1.0f;
240117d2:	ed80 6a19 	vstr	s12, [r0, #100]	; 0x64
    adsr->sustain = sustain;
240117d6:	fe88 8a07 	vmaxnm.f32	s16, s16, s14
    adsr->next = 0.0f;
240117da:	ed80 7a06 	vstr	s14, [r0, #24]
    adsr->whichStage = env_idle;
240117de:	63c2      	str	r2, [r0, #60]	; 0x3c
    adsr->attack = attack;
240117e0:	ed80 0a08 	vstr	s0, [r0, #32]
    adsr->decay = decay;
240117e4:	edc0 0a09 	vstr	s1, [r0, #36]	; 0x24
    adsr->sustain = sustain;
240117e8:	ed80 8a10 	vstr	s16, [r0, #64]	; 0x40
    adsr->release = release;
240117ec:	edc0 1a0a 	vstr	s3, [r0, #40]	; 0x28
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
240117f0:	ee87 5a80 	vdiv.f32	s10, s15, s0
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
240117f4:	edc0 7a05 	vstr	s15, [r0, #20]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
240117f8:	eec7 5aa0 	vdiv.f32	s11, s15, s1
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
240117fc:	ee87 6aa1 	vdiv.f32	s12, s15, s3
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
24011800:	ee27 7aa6 	vmul.f32	s14, s15, s13
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
24011804:	ed80 5a0b 	vstr	s10, [r0, #44]	; 0x2c
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
24011808:	ed80 7a0e 	vstr	s14, [r0, #56]	; 0x38
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
2401180c:	edc0 5a0c 	vstr	s11, [r0, #48]	; 0x30
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
24011810:	ed80 6a0d 	vstr	s12, [r0, #52]	; 0x34
    adsr->invSampleRate = leaf->invSampleRate;
24011814:	685b      	ldr	r3, [r3, #4]
24011816:	6683      	str	r3, [r0, #104]	; 0x68
}
24011818:	ecbd 8b04 	vpop	{d8-d9}
2401181c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2401181e:	bf00      	nop
24011820:	4479ffff 	.word	0x4479ffff
24011824:	00000000 	.word	0x00000000

24011828 <tADSRT_setAttack>:
void     tADSRT_setAttack(tADSRT* const adsrenv, Lfloat attack)
#endif
{
    _tADSRT* adsr = *adsrenv;

    if (attack < 0.0f)
24011828:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
2401182c:	6803      	ldr	r3, [r0, #0]
    {
        attack = 0.01f;
    }
    adsr->attack = attack;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
2401182e:	ed93 7a05 	vldr	s14, [r3, #20]
    if (attack < 0.0f)
24011832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        attack = 0.01f;
24011836:	bf48      	it	mi
24011838:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 2401184c <tADSRT_setAttack+0x24>
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
2401183c:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->attack = attack;
24011840:	ed83 0a08 	vstr	s0, [r3, #32]
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
24011844:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
24011848:	4770      	bx	lr
2401184a:	bf00      	nop
2401184c:	3c23d70a 	.word	0x3c23d70a

24011850 <tADSRT_setDecay>:
void     tADSRT_setDecay(tADSRT* const adsrenv, Lfloat decay)
#endif
{
    _tADSRT* adsr = *adsrenv;

    if (decay < 0.0f)
24011850:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
24011854:	6803      	ldr	r3, [r0, #0]
    {
        decay = 0.01f;
    }
    adsr->decay = decay;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
24011856:	ed93 7a05 	vldr	s14, [r3, #20]
    if (decay < 0.0f)
2401185a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        decay = 0.01f;
2401185e:	bf48      	it	mi
24011860:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 24011874 <tADSRT_setDecay+0x24>
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
24011864:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->decay = decay;
24011868:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
2401186c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
24011870:	4770      	bx	lr
24011872:	bf00      	nop
24011874:	3c23d70a 	.word	0x3c23d70a

24011878 <tADSRT_setSustain>:
void     tADSRT_setSustain(tADSRT* const adsrenv, Lfloat sustain)
#endif
{
    _tADSRT* adsr = *adsrenv;

    if (sustain > 1.0f)      adsr->sustain = 1.0f;
24011878:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2401187c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 24011890 <tADSRT_setSustain+0x18>
    _tADSRT* adsr = *adsrenv;
24011880:	6803      	ldr	r3, [r0, #0]
    if (sustain > 1.0f)      adsr->sustain = 1.0f;
24011882:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
24011886:	fe80 0a67 	vminnm.f32	s0, s0, s15
2401188a:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
    else if (sustain < 0.0f) adsr->sustain = 0.0f;
    else                     adsr->sustain = sustain;
}
2401188e:	4770      	bx	lr
24011890:	00000000 	.word	0x00000000

24011894 <tADSRT_setRelease>:
void     tADSRT_setRelease(tADSRT* const adsrenv, Lfloat release)
#endif
{
    _tADSRT* adsr = *adsrenv;

    if (release < 0.0f)
24011894:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
24011898:	6803      	ldr	r3, [r0, #0]
    {
        release = 0.01f;
    }
    adsr->release = release;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
2401189a:	ed93 7a05 	vldr	s14, [r3, #20]
    if (release < 0.0f)
2401189e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        release = 0.01f;
240118a2:	bf48      	it	mi
240118a4:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 240118b8 <tADSRT_setRelease+0x24>
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
240118a8:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->release = release;
240118ac:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
240118b0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
240118b4:	4770      	bx	lr
240118b6:	bf00      	nop
240118b8:	3c23d70a 	.word	0x3c23d70a

240118bc <tADSRT_setLeakFactor>:
#ifdef ITCMRAM
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_setLeakFactor(tADSRT* const adsrenv, Lfloat leakFactor)
#else
void     tADSRT_setLeakFactor(tADSRT* const adsrenv, Lfloat leakFactor)
#endif
{
240118bc:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
240118be:	6804      	ldr	r4, [r0, #0]
    adsr->baseLeakFactor = leakFactor;
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
240118c0:	eddf 7a06 	vldr	s15, [pc, #24]	; 240118dc <tADSRT_setLeakFactor+0x20>
240118c4:	edd4 0a1a 	vldr	s1, [r4, #104]	; 0x68
    adsr->baseLeakFactor = leakFactor;
240118c8:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
240118cc:	ee60 0aa7 	vmul.f32	s1, s1, s15
240118d0:	f008 fa06 	bl	24019ce0 <powf>
240118d4:	ed84 0a19 	vstr	s0, [r4, #100]	; 0x64
}
240118d8:	bd10      	pop	{r4, pc}
240118da:	bf00      	nop
240118dc:	472c4400 	.word	0x472c4400

240118e0 <tADSRT_on>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_on(tADSRT* const adsrenv, Lfloat velocity)
#else
void tADSRT_on(tADSRT* const adsrenv, Lfloat velocity)
#endif
{
    _tADSRT* adsr = *adsrenv;
240118e0:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage != env_idle) // In case ADSR retriggered while it is still happening.
240118e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
240118e4:	b162      	cbz	r2, 24011900 <tADSRT_on+0x20>
    {
        adsr->rampPhase = 0;
240118e6:	2000      	movs	r0, #0
        adsr->whichStage = env_ramp;
        adsr->rampPeak = adsr->next;
240118e8:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_ramp;
240118ea:	2105      	movs	r1, #5
        adsr->rampPhase = 0;
240118ec:	65d8      	str	r0, [r3, #92]	; 0x5c
        adsr->rampPeak = adsr->next;
240118ee:	649a      	str	r2, [r3, #72]	; 0x48
    else // Normal start.
    {
        adsr->whichStage = env_attack;
    }

    adsr->attackPhase = 0;
240118f0:	2200      	movs	r2, #0
240118f2:	63d9      	str	r1, [r3, #60]	; 0x3c
    adsr->decayPhase = 0;
    adsr->releasePhase = 0;
    adsr->gain = velocity;
240118f4:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    adsr->attackPhase = 0;
240118f8:	651a      	str	r2, [r3, #80]	; 0x50
    adsr->decayPhase = 0;
240118fa:	655a      	str	r2, [r3, #84]	; 0x54
    adsr->releasePhase = 0;
240118fc:	659a      	str	r2, [r3, #88]	; 0x58
}
240118fe:	4770      	bx	lr
        adsr->whichStage = env_attack;
24011900:	2101      	movs	r1, #1
24011902:	e7f5      	b.n	240118f0 <tADSRT_on+0x10>

24011904 <tADSRT_off>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_off(tADSRT* const adsrenv)
#else
    void tADSRT_off(tADSRT* const adsrenv)
#endif
{
    _tADSRT* adsr = *adsrenv;
24011904:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage == env_idle)
24011906:	6bda      	ldr	r2, [r3, #60]	; 0x3c
24011908:	b11a      	cbz	r2, 24011912 <tADSRT_off+0xe>
    {
        return;
    }
    else
    {
        adsr->whichStage = env_release;
2401190a:	2104      	movs	r1, #4
        adsr->releasePeak = adsr->next;
2401190c:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_release;
2401190e:	63d9      	str	r1, [r3, #60]	; 0x3c
        adsr->releasePeak = adsr->next;
24011910:	64da      	str	r2, [r3, #76]	; 0x4c
    }
}
24011912:	4770      	bx	lr

24011914 <tADSRT_clear>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_clear(tADSRT* const adsrenv)
#else
	void	tADSRT_clear(tADSRT* const adsrenv)
#endif
{
    _tADSRT* adsr = *adsrenv;
24011914:	6803      	ldr	r3, [r0, #0]

    adsr->whichStage = env_idle;
24011916:	2100      	movs	r1, #0
    adsr->next = 0.0f;
24011918:	2200      	movs	r2, #0
    adsr->whichStage = env_idle;
2401191a:	63d9      	str	r1, [r3, #60]	; 0x3c
    adsr->next = 0.0f;
2401191c:	619a      	str	r2, [r3, #24]
}
2401191e:	4770      	bx	lr

24011920 <tADSRT_tick>:
#ifdef ITCMRAM
    Lfloat  __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))   tADSRT_tick(tADSRT* const adsrenv)
#else
		Lfloat  tADSRT_tick(tADSRT* const adsrenv)
#endif
{
24011920:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
24011922:	6804      	ldr	r4, [r0, #0]
{
24011924:	ed2d 8b02 	vpush	{d8}

    switch (adsr->whichStage)
24011928:	6be3      	ldr	r3, [r4, #60]	; 0x3c
2401192a:	3b01      	subs	r3, #1
2401192c:	2b04      	cmp	r3, #4
2401192e:	f200 8154 	bhi.w	24011bda <tADSRT_tick+0x2ba>
24011932:	e8df f003 	tbb	[pc, r3]
24011936:	4d1f      	.short	0x4d1f
24011938:	6f3a      	.short	0x6f3a
2401193a:	03          	.byte	0x03
2401193b:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
2401193c:	edd4 7a03 	vldr	s15, [r4, #12]
24011940:	ed94 1a17 	vldr	s2, [r4, #92]	; 0x5c
24011944:	eef8 7a67 	vcvt.f32.u32	s15, s15
24011948:	eeb4 1ae7 	vcmpe.f32	s2, s15
2401194c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011950:	dd7d      	ble.n	24011a4e <tADSRT_tick+0x12e>
            {
                adsr->whichStage = env_attack;
                adsr->next = 0.0f;
24011952:	eddf 7aa3 	vldr	s15, [pc, #652]	; 24011be0 <tADSRT_tick+0x2c0>
                adsr->whichStage = env_attack;
24011956:	2301      	movs	r3, #1
24011958:	eeb0 0a67 	vmov.f32	s0, s15
2401195c:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = 0.0f;
2401195e:	edc4 7a06 	vstr	s15, [r4, #24]
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
                }
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
            }

            adsr->rampPhase += adsr->rampInc;
24011962:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
24011966:	ee77 7a81 	vadd.f32	s15, s15, s2
2401196a:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
            break;
    }
    return adsr->next;
}
2401196e:	ecbd 8b02 	vpop	{d8}
24011972:	bd10      	pop	{r4, pc}
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
24011974:	edd4 7a03 	vldr	s15, [r4, #12]
24011978:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
2401197c:	eef8 7a67 	vcvt.f32.u32	s15, s15
24011980:	eeb4 1ae7 	vcmpe.f32	s2, s15
24011984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011988:	f340 808b 	ble.w	24011aa2 <tADSRT_tick+0x182>
                adsr->whichStage = env_decay;
2401198c:	2302      	movs	r3, #2
                adsr->next = adsr->gain;
2401198e:	ed94 0a11 	vldr	s0, [r4, #68]	; 0x44
                adsr->whichStage = env_decay;
24011992:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = adsr->gain;
24011994:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->attackPhase += adsr->attackInc;
24011998:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
2401199c:	ee77 7a81 	vadd.f32	s15, s15, s2
240119a0:	edc4 7a14 	vstr	s15, [r4, #80]	; 0x50
}
240119a4:	ecbd 8b02 	vpop	{d8}
240119a8:	bd10      	pop	{r4, pc}
        	 adsr->next = adsr->sustain * adsr->gain * (adsr->leakFactor * adsr->sustainWithLeak);
240119aa:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
240119ae:	edd4 6a11 	vldr	s13, [r4, #68]	; 0x44
240119b2:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
240119b6:	ee20 0a26 	vmul.f32	s0, s0, s13
240119ba:	edd4 7a07 	vldr	s15, [r4, #28]
240119be:	ee20 0a07 	vmul.f32	s0, s0, s14
240119c2:	ee20 0a27 	vmul.f32	s0, s0, s15
240119c6:	ed84 0a06 	vstr	s0, [r4, #24]
}
240119ca:	ecbd 8b02 	vpop	{d8}
240119ce:	bd10      	pop	{r4, pc}
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
240119d0:	edd4 7a03 	vldr	s15, [r4, #12]
240119d4:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
240119d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
240119dc:	eeb4 1ae7 	vcmpe.f32	s2, s15
240119e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240119e4:	f340 808b 	ble.w	24011afe <tADSRT_tick+0x1de>
                adsr->next = adsr->gain * adsr->sustain;
240119e8:	ed94 0a11 	vldr	s0, [r4, #68]	; 0x44
                adsr->sustainWithLeak = 1.0f;
240119ec:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
                adsr->next = adsr->gain * adsr->sustain;
240119f0:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
                adsr->whichStage = env_sustain;
240119f4:	2203      	movs	r2, #3
                adsr->sustainWithLeak = 1.0f;
240119f6:	61e3      	str	r3, [r4, #28]
                adsr->next = adsr->gain * adsr->sustain;
240119f8:	ee20 0a27 	vmul.f32	s0, s0, s15
                adsr->whichStage = env_sustain;
240119fc:	63e2      	str	r2, [r4, #60]	; 0x3c
                adsr->next = adsr->gain * adsr->sustain;
240119fe:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->decayPhase += adsr->decayInc;
24011a02:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
24011a06:	ee77 7a81 	vadd.f32	s15, s15, s2
24011a0a:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
}
24011a0e:	ecbd 8b02 	vpop	{d8}
24011a12:	bd10      	pop	{r4, pc}
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
24011a14:	edd4 7a03 	vldr	s15, [r4, #12]
24011a18:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
24011a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
24011a20:	eeb4 1ae7 	vcmpe.f32	s2, s15
24011a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011a28:	f340 809e 	ble.w	24011b68 <tADSRT_tick+0x248>
                adsr->next = 0.0f;
24011a2c:	eddf 7a6c 	vldr	s15, [pc, #432]	; 24011be0 <tADSRT_tick+0x2c0>
                adsr->whichStage = env_idle;
24011a30:	2300      	movs	r3, #0
24011a32:	eeb0 0a67 	vmov.f32	s0, s15
24011a36:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = 0.0f;
24011a38:	edc4 7a06 	vstr	s15, [r4, #24]
            adsr->releasePhase += adsr->releaseInc;
24011a3c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
24011a40:	ee77 7a81 	vadd.f32	s15, s15, s2
24011a44:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58
}
24011a48:	ecbd 8b02 	vpop	{d8}
24011a4c:	bd10      	pop	{r4, pc}
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
24011a4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->rampPhase;
24011a52:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
24011a56:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->rampPhase - intPart;
24011a5a:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
24011a5e:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->rampPhase - intPart;
24011a62:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
24011a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011a6a:	f100 80b2 	bmi.w	24011bd2 <tADSRT_tick+0x2b2>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
24011a6e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
24011a72:	6862      	ldr	r2, [r4, #4]
24011a74:	ee17 3a90 	vmov	r3, s15
24011a78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
24011a7c:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
24011a80:	ee16 3a90 	vmov	r3, s13
24011a84:	ed94 8a12 	vldr	s16, [r4, #72]	; 0x48
24011a88:	eb02 0283 	add.w	r2, r2, r3, lsl #2
24011a8c:	ed92 0a00 	vldr	s0, [r2]
24011a90:	f003 faf2 	bl	24015078 <LEAF_interpolation_linear>
24011a94:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->rampPhase += adsr->rampInc;
24011a98:	ed94 1a17 	vldr	s2, [r4, #92]	; 0x5c
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
24011a9c:	ed84 0a06 	vstr	s0, [r4, #24]
24011aa0:	e75f      	b.n	24011962 <tADSRT_tick+0x42>
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
24011aa2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->attackPhase;
24011aa6:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
24011aaa:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->attackPhase - intPart;
24011aae:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
24011ab2:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->attackPhase - intPart;
24011ab6:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
24011aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011abe:	f100 8084 	bmi.w	24011bca <tADSRT_tick+0x2aa>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->attackPhase)+1)];
24011ac2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
24011ac6:	6862      	ldr	r2, [r4, #4]
24011ac8:	ee17 3a90 	vmov	r3, s15
24011acc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
24011ad0:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // inverted and backwards to get proper rising exponential shape/perception
24011ad4:	ee16 3a90 	vmov	r3, s13
24011ad8:	ed94 8a11 	vldr	s16, [r4, #68]	; 0x44
24011adc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
24011ae0:	ed92 0a00 	vldr	s0, [r2]
24011ae4:	f003 fac8 	bl	24015078 <LEAF_interpolation_linear>
24011ae8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            adsr->attackPhase += adsr->attackInc;
24011aec:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // inverted and backwards to get proper rising exponential shape/perception
24011af0:	ee37 0ac0 	vsub.f32	s0, s15, s0
24011af4:	ee20 0a08 	vmul.f32	s0, s0, s16
24011af8:	ed84 0a06 	vstr	s0, [r4, #24]
24011afc:	e74c      	b.n	24011998 <tADSRT_tick+0x78>
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
24011afe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->decayPhase;
24011b02:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
24011b06:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->decayPhase - intPart;
24011b0a:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
24011b0e:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->decayPhase - intPart;
24011b12:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
24011b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011b1a:	d452      	bmi.n	24011bc2 <tADSRT_tick+0x2a2>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->decayPhase)+1)];
24011b1c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
24011b20:	6862      	ldr	r2, [r4, #4]
24011b22:	ee17 3a90 	vmov	r3, s15
24011b26:	eb02 0383 	add.w	r3, r2, r3, lsl #2
24011b2a:	edd3 0a00 	vldr	s1, [r3]
                Lfloat interpValue = (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart));
24011b2e:	ee16 3a90 	vmov	r3, s13
24011b32:	eb02 0283 	add.w	r2, r2, r3, lsl #2
24011b36:	ed92 0a00 	vldr	s0, [r2]
24011b3a:	f003 fa9d 	bl	24015078 <LEAF_interpolation_linear>
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
24011b3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24011b42:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
24011b46:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
24011b4a:	ee76 6ac7 	vsub.f32	s13, s13, s14
24011b4e:	ed94 6a19 	vldr	s12, [r4, #100]	; 0x64
            adsr->decayPhase += adsr->decayInc;
24011b52:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
24011b56:	ee67 7a86 	vmul.f32	s15, s15, s12
24011b5a:	eea6 7a80 	vfma.f32	s14, s13, s0
24011b5e:	ee27 0a87 	vmul.f32	s0, s15, s14
24011b62:	ed84 0a06 	vstr	s0, [r4, #24]
24011b66:	e74c      	b.n	24011a02 <tADSRT_tick+0xe2>
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
24011b68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->releasePhase;
24011b6c:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
24011b70:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->releasePhase - intPart;
24011b74:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
24011b78:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->releasePhase - intPart;
24011b7c:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
24011b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011b84:	d419      	bmi.n	24011bba <tADSRT_tick+0x29a>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->releasePhase)+1)];
24011b86:	eefc 7ac7 	vcvt.u32.f32	s15, s14
24011b8a:	6862      	ldr	r2, [r4, #4]
24011b8c:	ee17 3a90 	vmov	r3, s15
24011b90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
24011b94:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // do interpolation !
24011b98:	ee16 3a90 	vmov	r3, s13
24011b9c:	ed94 8a13 	vldr	s16, [r4, #76]	; 0x4c
24011ba0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
24011ba4:	ed92 0a00 	vldr	s0, [r2]
24011ba8:	f003 fa66 	bl	24015078 <LEAF_interpolation_linear>
24011bac:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->releasePhase += adsr->releaseInc;
24011bb0:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // do interpolation !
24011bb4:	ed84 0a06 	vstr	s0, [r4, #24]
24011bb8:	e740      	b.n	24011a3c <tADSRT_tick+0x11c>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
24011bba:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
24011bbc:	eddf 0a08 	vldr	s1, [pc, #32]	; 24011be0 <tADSRT_tick+0x2c0>
24011bc0:	e7ea      	b.n	24011b98 <tADSRT_tick+0x278>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
24011bc2:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
24011bc4:	eddf 0a06 	vldr	s1, [pc, #24]	; 24011be0 <tADSRT_tick+0x2c0>
24011bc8:	e7b1      	b.n	24011b2e <tADSRT_tick+0x20e>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
24011bca:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
24011bcc:	eddf 0a04 	vldr	s1, [pc, #16]	; 24011be0 <tADSRT_tick+0x2c0>
24011bd0:	e780      	b.n	24011ad4 <tADSRT_tick+0x1b4>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
24011bd2:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
24011bd4:	eddf 0a02 	vldr	s1, [pc, #8]	; 24011be0 <tADSRT_tick+0x2c0>
24011bd8:	e752      	b.n	24011a80 <tADSRT_tick+0x160>
    return adsr->next;
24011bda:	ed94 0a06 	vldr	s0, [r4, #24]
24011bde:	e6c6      	b.n	2401196e <tADSRT_tick+0x4e>
24011be0:	00000000 	.word	0x00000000

24011be4 <tADSRT_tickNoInterp>:
    Lfloat  __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tADSRT_tickNoInterp(tADSRT* const adsrenv)
#else
Lfloat   tADSRT_tickNoInterp(tADSRT* const adsrenv)
#endif
{
    _tADSRT* adsr = *adsrenv;
24011be4:	6803      	ldr	r3, [r0, #0]

    switch (adsr->whichStage)
24011be6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
24011be8:	3a01      	subs	r2, #1
24011bea:	2a04      	cmp	r2, #4
24011bec:	f200 80c7 	bhi.w	24011d7e <tADSRT_tickNoInterp+0x19a>
24011bf0:	e8df f002 	tbb	[pc, r2]
24011bf4:	6533461b 	.word	0x6533461b
24011bf8:	03          	.byte	0x03
24011bf9:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
24011bfa:	edd3 7a03 	vldr	s15, [r3, #12]
24011bfe:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
24011c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
24011c06:	eeb4 7ae7 	vcmpe.f32	s14, s15
24011c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011c0e:	dd6e      	ble.n	24011cee <tADSRT_tickNoInterp+0x10a>
            {
                adsr->whichStage = env_attack;
24011c10:	2201      	movs	r2, #1
                adsr->next = 0.0f;
24011c12:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 24011d84 <tADSRT_tickNoInterp+0x1a0>
                adsr->whichStage = env_attack;
24011c16:	63da      	str	r2, [r3, #60]	; 0x3c
            else
            {
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
            }

            adsr->rampPhase += adsr->rampInc;
24011c18:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
24011c1c:	ed83 0a06 	vstr	s0, [r3, #24]
24011c20:	ee77 7a87 	vadd.f32	s15, s15, s14
24011c24:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
            break;
24011c28:	4770      	bx	lr


        case env_attack:

            // If attack done, time to turn around.
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
24011c2a:	edd3 7a03 	vldr	s15, [r3, #12]
24011c2e:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
24011c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
24011c36:	eeb4 7ae7 	vcmpe.f32	s14, s15
24011c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011c3e:	dd64      	ble.n	24011d0a <tADSRT_tickNoInterp+0x126>
            {
                adsr->whichStage = env_decay;
24011c40:	2202      	movs	r2, #2
                adsr->next = adsr->gain;
24011c42:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
                adsr->whichStage = env_decay;
24011c46:	63da      	str	r2, [r3, #60]	; 0x3c
            {
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
            }

            // Increment ADSR attack.
            adsr->attackPhase += adsr->attackInc;
24011c48:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
24011c4c:	ed83 0a06 	vstr	s0, [r3, #24]
24011c50:	ee77 7a87 	vadd.f32	s15, s15, s14
24011c54:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            break;
24011c58:	4770      	bx	lr
            // Increment ADSR decay.
            adsr->decayPhase += adsr->decayInc;
            break;

        case env_sustain:
            adsr->sustainWithLeak *= adsr->leakFactor;
24011c5a:	edd3 7a07 	vldr	s15, [r3, #28]
24011c5e:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
24011c62:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
24011c66:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
            adsr->sustainWithLeak *= adsr->leakFactor;
24011c6a:	ee67 7aa6 	vmul.f32	s15, s15, s13
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
24011c6e:	ee20 0a07 	vmul.f32	s0, s0, s14
            adsr->sustainWithLeak *= adsr->leakFactor;
24011c72:	edc3 7a07 	vstr	s15, [r3, #28]
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
24011c76:	ee20 0a27 	vmul.f32	s0, s0, s15
24011c7a:	ed83 0a06 	vstr	s0, [r3, #24]
            break;
24011c7e:	4770      	bx	lr
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
24011c80:	edd3 7a03 	vldr	s15, [r3, #12]
24011c84:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
24011c88:	eef8 7a67 	vcvt.f32.u32	s15, s15
24011c8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
24011c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011c94:	dd4b      	ble.n	24011d2e <tADSRT_tickNoInterp+0x14a>
                adsr->next = adsr->gain * adsr->sustain;
24011c96:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
                adsr->sustainWithLeak = 1.0f;
24011c9a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
                adsr->next = adsr->gain * adsr->sustain;
24011c9e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
                adsr->whichStage = env_sustain;
24011ca2:	2103      	movs	r1, #3
                adsr->sustainWithLeak = 1.0f;
24011ca4:	61da      	str	r2, [r3, #28]
                adsr->next = adsr->gain * adsr->sustain;
24011ca6:	ee20 0a27 	vmul.f32	s0, s0, s15
                adsr->whichStage = env_sustain;
24011caa:	63d9      	str	r1, [r3, #60]	; 0x3c
            adsr->decayPhase += adsr->decayInc;
24011cac:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
24011cb0:	ed83 0a06 	vstr	s0, [r3, #24]
24011cb4:	ee77 7a87 	vadd.f32	s15, s15, s14
24011cb8:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
            break;
24011cbc:	4770      	bx	lr

        case env_release:
            // If release done, finish.
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
24011cbe:	edd3 7a03 	vldr	s15, [r3, #12]
24011cc2:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
24011cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
24011cca:	eeb4 7ae7 	vcmpe.f32	s14, s15
24011cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011cd2:	dd46      	ble.n	24011d62 <tADSRT_tickNoInterp+0x17e>
            {
                adsr->whichStage = env_idle;
24011cd4:	2200      	movs	r2, #0
                adsr->next = 0.0f;
24011cd6:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 24011d84 <tADSRT_tickNoInterp+0x1a0>
                adsr->whichStage = env_idle;
24011cda:	63da      	str	r2, [r3, #60]	; 0x3c
            else {
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
            }

            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
24011cdc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
24011ce0:	ed83 0a06 	vstr	s0, [r3, #24]
24011ce4:	ee77 7a87 	vadd.f32	s15, s15, s14
24011ce8:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
            break;
    }
    return adsr->next;
}
24011cec:	4770      	bx	lr
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
24011cee:	eefc 6ac7 	vcvt.u32.f32	s13, s14
24011cf2:	685a      	ldr	r2, [r3, #4]
24011cf4:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
24011cf8:	ee16 1a90 	vmov	r1, s13
24011cfc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24011d00:	ed92 0a00 	vldr	s0, [r2]
24011d04:	ee20 0a27 	vmul.f32	s0, s0, s15
24011d08:	e786      	b.n	24011c18 <tADSRT_tickNoInterp+0x34>
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
24011d0a:	eefc 6ac7 	vcvt.u32.f32	s13, s14
24011d0e:	685a      	ldr	r2, [r3, #4]
24011d10:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24011d14:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
24011d18:	ee16 1a90 	vmov	r1, s13
24011d1c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24011d20:	edd2 6a00 	vldr	s13, [r2]
24011d24:	ee30 0a66 	vsub.f32	s0, s0, s13
24011d28:	ee20 0a27 	vmul.f32	s0, s0, s15
24011d2c:	e78c      	b.n	24011c48 <tADSRT_tickNoInterp+0x64>
                adsr->next = (adsr->gain * (adsr->sustain + (adsr->exp_buff[(uint32_t)adsr->decayPhase] * (1.0f - adsr->sustain)))) * adsr->leakFactor;
24011d2e:	eefc 5ac7 	vcvt.u32.f32	s11, s14
24011d32:	685a      	ldr	r2, [r3, #4]
24011d34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24011d38:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
24011d3c:	ed93 6a19 	vldr	s12, [r3, #100]	; 0x64
24011d40:	ee15 1a90 	vmov	r1, s11
24011d44:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
24011d48:	ee76 6ae7 	vsub.f32	s13, s13, s15
24011d4c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24011d50:	ee20 0a06 	vmul.f32	s0, s0, s12
24011d54:	ed92 6a00 	vldr	s12, [r2]
24011d58:	eee6 7a26 	vfma.f32	s15, s12, s13
24011d5c:	ee20 0a27 	vmul.f32	s0, s0, s15
24011d60:	e7a4      	b.n	24011cac <tADSRT_tickNoInterp+0xc8>
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
24011d62:	eefc 6ac7 	vcvt.u32.f32	s13, s14
24011d66:	685a      	ldr	r2, [r3, #4]
24011d68:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
24011d6c:	ee16 1a90 	vmov	r1, s13
24011d70:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24011d74:	ed92 0a00 	vldr	s0, [r2]
24011d78:	ee20 0a27 	vmul.f32	s0, s0, s15
24011d7c:	e7ae      	b.n	24011cdc <tADSRT_tickNoInterp+0xf8>
    return adsr->next;
24011d7e:	ed93 0a06 	vldr	s0, [r3, #24]
24011d82:	4770      	bx	lr
24011d84:	00000000 	.word	0x00000000

24011d88 <tExpSmooth_init>:



/* Exponential Smoother */
void    tExpSmooth_init(tExpSmooth* const expsmooth, Lfloat val, Lfloat factor, LEAF* const leaf)
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
24011d88:	b538      	push	{r3, r4, r5, lr}
24011d8a:	ed2d 8b02 	vpush	{d8}
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
}

void    tExpSmooth_initToPool   (tExpSmooth* const expsmooth, Lfloat val, Lfloat factor, tMempool* const mp)
{
    _tMempool* m = *mp;
24011d8e:	698c      	ldr	r4, [r1, #24]
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
24011d90:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24011d92:	201c      	movs	r0, #28
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
24011d94:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24011d98:	4621      	mov	r1, r4
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
24011d9a:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24011d9e:	f003 fa4d 	bl	2401523c <mpool_alloc>
24011da2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24011da6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 24011ddc <tExpSmooth_init+0x54>
24011daa:	6028      	str	r0, [r5, #0]
    smooth->mempool = m;
24011dac:	fec8 0a07 	vmaxnm.f32	s1, s16, s14
24011db0:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->dest = val;
    if (factor < 0.0f) factor = 0.0f;
    if (factor > 1.0f) factor = 1.0f;
    smooth->baseFactor = factor;
    smooth->factor = factor;
    smooth->oneminusfactor = 1.0f - factor;
24011db4:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
24011db8:	6004      	str	r4, [r0, #0]
    smooth->curr = val;
24011dba:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->dest = val;
24011dbe:	edc0 8a05 	vstr	s17, [r0, #20]
    smooth->baseFactor = factor;
24011dc2:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->factor = factor;
24011dc6:	edc0 0a02 	vstr	s1, [r0, #8]
    smooth->oneminusfactor = 1.0f - factor;
24011dca:	edc0 7a03 	vstr	s15, [r0, #12]
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
24011dce:	6863      	ldr	r3, [r4, #4]
24011dd0:	685b      	ldr	r3, [r3, #4]
24011dd2:	6183      	str	r3, [r0, #24]
}
24011dd4:	ecbd 8b02 	vpop	{d8}
24011dd8:	bd38      	pop	{r3, r4, r5, pc}
24011dda:	bf00      	nop
24011ddc:	00000000 	.word	0x00000000

24011de0 <tExpSmooth_initToPool>:
{
24011de0:	b538      	push	{r3, r4, r5, lr}
24011de2:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
24011de6:	680c      	ldr	r4, [r1, #0]
{
24011de8:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24011dea:	201c      	movs	r0, #28
{
24011dec:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24011df0:	4621      	mov	r1, r4
{
24011df2:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24011df6:	f003 fa21 	bl	2401523c <mpool_alloc>
24011dfa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24011dfe:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 24011e34 <tExpSmooth_initToPool+0x54>
24011e02:	6028      	str	r0, [r5, #0]
    smooth->mempool = m;
24011e04:	fec8 0a07 	vmaxnm.f32	s1, s16, s14
24011e08:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->oneminusfactor = 1.0f - factor;
24011e0c:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
24011e10:	6004      	str	r4, [r0, #0]
    smooth->curr = val;
24011e12:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->dest = val;
24011e16:	edc0 8a05 	vstr	s17, [r0, #20]
    smooth->baseFactor = factor;
24011e1a:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->factor = factor;
24011e1e:	edc0 0a02 	vstr	s1, [r0, #8]
    smooth->oneminusfactor = 1.0f - factor;
24011e22:	edc0 7a03 	vstr	s15, [r0, #12]
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
24011e26:	6863      	ldr	r3, [r4, #4]
24011e28:	685b      	ldr	r3, [r3, #4]
24011e2a:	6183      	str	r3, [r0, #24]
}
24011e2c:	ecbd 8b02 	vpop	{d8}
24011e30:	bd38      	pop	{r3, r4, r5, pc}
24011e32:	bf00      	nop
24011e34:	00000000 	.word	0x00000000

24011e38 <tExpSmooth_free>:

void    tExpSmooth_free (tExpSmooth* const expsmooth)
{
    _tExpSmooth* smooth = *expsmooth;
24011e38:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)smooth, smooth->mempool);
24011e3a:	6801      	ldr	r1, [r0, #0]
24011e3c:	f003 bac0 	b.w	240153c0 <mpool_free>

24011e40 <tExpSmooth_setFactor>:
}

void     tExpSmooth_setFactor(tExpSmooth* const expsmooth, Lfloat factor)
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
24011e40:	b510      	push	{r4, lr}
24011e42:	ed2d 8b02 	vpush	{d8}
24011e46:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    _tExpSmooth* smooth = *expsmooth;
24011e4a:	6804      	ldr	r4, [r0, #0]
    
    if (factor < 0.0f)
24011e4c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 24011e84 <tExpSmooth_setFactor+0x44>
        factor = 0.0f;
    else if (factor > 1.0f) factor = 1.0f;
    smooth->baseFactor = factor;
    smooth->factor = powf(factor, 44100.f * smooth->invSampleRate);
24011e50:	eddf 7a0d 	vldr	s15, [pc, #52]	; 24011e88 <tExpSmooth_setFactor+0x48>
24011e54:	fe80 8a68 	vminnm.f32	s16, s0, s17
24011e58:	edd4 0a06 	vldr	s1, [r4, #24]
24011e5c:	fe88 8a07 	vmaxnm.f32	s16, s16, s14
    smooth->oneminusfactor = 1.0f - factor;
24011e60:	ee78 8ac8 	vsub.f32	s17, s17, s16
    smooth->factor = powf(factor, 44100.f * smooth->invSampleRate);
24011e64:	eeb0 0a48 	vmov.f32	s0, s16
    smooth->baseFactor = factor;
24011e68:	ed84 8a01 	vstr	s16, [r4, #4]
    smooth->factor = powf(factor, 44100.f * smooth->invSampleRate);
24011e6c:	ee60 0aa7 	vmul.f32	s1, s1, s15
24011e70:	f007 ff36 	bl	24019ce0 <powf>
    smooth->oneminusfactor = 1.0f - factor;
24011e74:	edc4 8a03 	vstr	s17, [r4, #12]
    smooth->factor = powf(factor, 44100.f * smooth->invSampleRate);
24011e78:	ed84 0a02 	vstr	s0, [r4, #8]
}
24011e7c:	ecbd 8b02 	vpop	{d8}
24011e80:	bd10      	pop	{r4, pc}
24011e82:	bf00      	nop
24011e84:	00000000 	.word	0x00000000
24011e88:	472c4400 	.word	0x472c4400

24011e8c <tExpSmooth_setDest>:
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tExpSmooth_setDest(tExpSmooth* const expsmooth, Lfloat dest)
#else
void     tExpSmooth_setDest(tExpSmooth* const expsmooth, Lfloat dest)
#endif
{
    _tExpSmooth* smooth = *expsmooth;
24011e8c:	6803      	ldr	r3, [r0, #0]
    smooth->dest=dest;
24011e8e:	ed83 0a05 	vstr	s0, [r3, #20]
}
24011e92:	4770      	bx	lr

24011e94 <tExpSmooth_setVal>:

void     tExpSmooth_setVal(tExpSmooth* const expsmooth, Lfloat val)
{
    _tExpSmooth* smooth = *expsmooth;
24011e94:	6803      	ldr	r3, [r0, #0]
    smooth->curr=val;
24011e96:	ed83 0a04 	vstr	s0, [r3, #16]
}
24011e9a:	4770      	bx	lr

24011e9c <tExpSmooth_setValAndDest>:

void     tExpSmooth_setValAndDest(tExpSmooth* const expsmooth, Lfloat val)
{
    _tExpSmooth* smooth = *expsmooth;
24011e9c:	6803      	ldr	r3, [r0, #0]
    smooth->curr=val;
24011e9e:	ed83 0a04 	vstr	s0, [r3, #16]
    smooth->dest=val;
24011ea2:	ed83 0a05 	vstr	s0, [r3, #20]
}
24011ea6:	4770      	bx	lr

24011ea8 <tExpSmooth_tick>:
Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tExpSmooth_tick(tExpSmooth* const expsmooth)
#else
Lfloat   tExpSmooth_tick(tExpSmooth* const expsmooth)
#endif
{
    _tExpSmooth* smooth = *expsmooth;
24011ea8:	6803      	ldr	r3, [r0, #0]
    smooth->curr = smooth->factor * smooth->dest + smooth->oneminusfactor * smooth->curr;
24011eaa:	edd3 6a04 	vldr	s13, [r3, #16]
24011eae:	ed93 0a03 	vldr	s0, [r3, #12]
24011eb2:	ed93 7a02 	vldr	s14, [r3, #8]
24011eb6:	ee20 0a26 	vmul.f32	s0, s0, s13
24011eba:	edd3 7a05 	vldr	s15, [r3, #20]
24011ebe:	eea7 0a27 	vfma.f32	s0, s14, s15
24011ec2:	ed83 0a04 	vstr	s0, [r3, #16]
    return smooth->curr;
}
24011ec6:	4770      	bx	lr

24011ec8 <tSlide_initToPool>:
    tSlide_initToPool    (sl, upSlide, downSlide, &leaf->mempool);
}

//upslide and downslide are in samples
void    tSlide_initToPool    (tSlide* const sl, Lfloat upSlide, Lfloat downSlide, tMempool* const mp)
{
24011ec8:	b538      	push	{r3, r4, r5, lr}
24011eca:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
24011ece:	680d      	ldr	r5, [r1, #0]
{
24011ed0:	4604      	mov	r4, r0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
24011ed2:	201c      	movs	r0, #28
{
24011ed4:	eef0 8a40 	vmov.f32	s17, s0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
24011ed8:	4629      	mov	r1, r5
{
24011eda:	eeb0 8a60 	vmov.f32	s16, s1
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
24011ede:	f003 f9ad 	bl	2401523c <mpool_alloc>

    if (downSlide < 1.0f)
    {
        downSlide = 1.0f;
    }
    s->invUpSlide = 1.0f / upSlide;
24011ee2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    s->prevIn = 0.0f;
24011ee6:	2300      	movs	r3, #0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
24011ee8:	6020      	str	r0, [r4, #0]
    s->mempool = m;
24011eea:	6005      	str	r5, [r0, #0]
    s->invUpSlide = 1.0f / upSlide;
24011eec:	fe88 0aa7 	vmaxnm.f32	s0, s17, s15
    s->invDownSlide = 1.0f / downSlide;
24011ef0:	fec8 0a27 	vmaxnm.f32	s1, s16, s15
    s->invUpSlide = 1.0f / upSlide;
24011ef4:	eec7 6a80 	vdiv.f32	s13, s15, s0
    s->prevIn = 0.0f;
24011ef8:	60c3      	str	r3, [r0, #12]
    s->currentOut = 0.0f;
24011efa:	6083      	str	r3, [r0, #8]
    s->prevOut = 0.0f;
24011efc:	6043      	str	r3, [r0, #4]
    s->dest = 0.0f;
24011efe:	6183      	str	r3, [r0, #24]
    s->invDownSlide = 1.0f / downSlide;
24011f00:	ee87 7aa0 	vdiv.f32	s14, s15, s1
    s->invUpSlide = 1.0f / upSlide;
24011f04:	edc0 6a04 	vstr	s13, [r0, #16]
    s->invDownSlide = 1.0f / downSlide;
24011f08:	ed80 7a05 	vstr	s14, [r0, #20]
}
24011f0c:	ecbd 8b02 	vpop	{d8}
24011f10:	bd38      	pop	{r3, r4, r5, pc}
24011f12:	bf00      	nop

24011f14 <tSlide_free>:

void    tSlide_free  (tSlide* const sl)
{
    _tSlide* s = *sl;
24011f14:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)s, s->mempool);
24011f16:	6801      	ldr	r1, [r0, #0]
24011f18:	f003 ba52 	b.w	240153c0 <mpool_free>

24011f1c <tSlide_setDest>:
    s->invDownSlide = 1.0f / downSlide;
}

void tSlide_setDest(tSlide* const sl, Lfloat dest)
{
    _tSlide* s = *sl;
24011f1c:	6803      	ldr	r3, [r0, #0]
    s->dest = dest;
24011f1e:	ed83 0a06 	vstr	s0, [r3, #24]
}
24011f22:	4770      	bx	lr

24011f24 <tSlide_tickNoInput>:

Lfloat tSlide_tickNoInput(tSlide* const sl)
{
    _tSlide* s = *sl;
24011f24:	6803      	ldr	r3, [r0, #0]
    Lfloat in = s->dest;

    if (in >= s->prevOut)
24011f26:	ed93 0a01 	vldr	s0, [r3, #4]
    Lfloat in = s->dest;
24011f2a:	edd3 7a06 	vldr	s15, [r3, #24]
    if (in >= s->prevOut)
24011f2e:	eeb4 0ae7 	vcmpe.f32	s0, s15
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
24011f32:	ee77 6ac0 	vsub.f32	s13, s15, s0
    if (in >= s->prevOut)
24011f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
24011f3a:	bf94      	ite	ls
24011f3c:	ed93 7a04 	vldrls	s14, [r3, #16]
    }
    else
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
24011f40:	ed93 7a05 	vldrhi	s14, [r3, #20]
24011f44:	eea6 0a87 	vfma.f32	s0, s13, s14
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
24011f48:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 24011f7c <tSlide_tickNoInput+0x58>
24011f4c:	eeb4 0ac7 	vcmpe.f32	s0, s14
24011f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011f54:	d406      	bmi.n	24011f64 <tSlide_tickNoInput+0x40>
24011f56:	ed83 0a02 	vstr	s0, [r3, #8]
#endif
    s->prevIn = in;
24011f5a:	edc3 7a03 	vstr	s15, [r3, #12]
    s->prevOut = s->currentOut;
24011f5e:	ed83 0a01 	vstr	s0, [r3, #4]
    return s->currentOut;
}
24011f62:	4770      	bx	lr
    if (s->currentOut < VSF) s->currentOut = 0.0f;
24011f64:	ed9f 7a06 	vldr	s14, [pc, #24]	; 24011f80 <tSlide_tickNoInput+0x5c>
    s->prevIn = in;
24011f68:	edc3 7a03 	vstr	s15, [r3, #12]
    if (s->currentOut < VSF) s->currentOut = 0.0f;
24011f6c:	eeb0 0a47 	vmov.f32	s0, s14
24011f70:	ed83 7a02 	vstr	s14, [r3, #8]
    s->prevOut = s->currentOut;
24011f74:	ed83 0a01 	vstr	s0, [r3, #4]
}
24011f78:	4770      	bx	lr
24011f7a:	bf00      	nop
24011f7c:	006ce3ee 	.word	0x006ce3ee
24011f80:	00000000 	.word	0x00000000

24011f84 <tSlide_tick>:

Lfloat tSlide_tick(tSlide* const sl, Lfloat in)
{
    _tSlide* s = *sl;
24011f84:	6803      	ldr	r3, [r0, #0]


    if (in >= s->prevOut)
24011f86:	edd3 7a01 	vldr	s15, [r3, #4]
24011f8a:	eef4 7ac0 	vcmpe.f32	s15, s0
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
24011f8e:	ee70 6a67 	vsub.f32	s13, s0, s15
    if (in >= s->prevOut)
24011f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
24011f96:	bf94      	ite	ls
24011f98:	ed93 7a04 	vldrls	s14, [r3, #16]
    }
    else
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
24011f9c:	ed93 7a05 	vldrhi	s14, [r3, #20]
24011fa0:	eee6 7a87 	vfma.f32	s15, s13, s14
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
24011fa4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 24011fe0 <tSlide_tick+0x5c>
24011fa8:	eef4 7ac7 	vcmpe.f32	s15, s14
24011fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011fb0:	d408      	bmi.n	24011fc4 <tSlide_tick+0x40>
#endif
    s->prevIn = in;
24011fb2:	ed83 0a03 	vstr	s0, [r3, #12]
    s->prevOut = s->currentOut;
    return s->currentOut;
}
24011fb6:	eeb0 0a67 	vmov.f32	s0, s15
24011fba:	edc3 7a02 	vstr	s15, [r3, #8]
    s->prevOut = s->currentOut;
24011fbe:	edc3 7a01 	vstr	s15, [r3, #4]
}
24011fc2:	4770      	bx	lr
    if (s->currentOut < VSF) s->currentOut = 0.0f;
24011fc4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 24011fe4 <tSlide_tick+0x60>
    s->prevIn = in;
24011fc8:	ed83 0a03 	vstr	s0, [r3, #12]
    if (s->currentOut < VSF) s->currentOut = 0.0f;
24011fcc:	eef0 7a47 	vmov.f32	s15, s14
24011fd0:	ed83 7a02 	vstr	s14, [r3, #8]
}
24011fd4:	eeb0 0a67 	vmov.f32	s0, s15
    s->prevOut = s->currentOut;
24011fd8:	edc3 7a01 	vstr	s15, [r3, #4]
}
24011fdc:	4770      	bx	lr
24011fde:	bf00      	nop
24011fe0:	006ce3ee 	.word	0x006ce3ee
24011fe4:	00000000 	.word	0x00000000

24011fe8 <tThiranAllpassSOCascade_initToPool>:
{
    tThiranAllpassSOCascade_initToPool(ft, numFilts, &leaf->mempool);
}

void    tThiranAllpassSOCascade_initToPool     (tThiranAllpassSOCascade* const ft, int numFilts, tMempool* const mp)
{
24011fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
24011fec:	460f      	mov	r7, r1
24011fee:	b082      	sub	sp, #8
    _tMempool* m = *mp;
24011ff0:	6811      	ldr	r1, [r2, #0]
{
24011ff2:	4604      	mov	r4, r0
    _tThiranAllpassSOCascade* f = *ft = (_tThiranAllpassSOCascade*) mpool_alloc(sizeof(_tThiranAllpassSOCascade), m);
24011ff4:	2058      	movs	r0, #88	; 0x58
{
24011ff6:	4690      	mov	r8, r2
    _tThiranAllpassSOCascade* f = *ft = (_tThiranAllpassSOCascade*) mpool_alloc(sizeof(_tThiranAllpassSOCascade), m);
24011ff8:	9101      	str	r1, [sp, #4]
24011ffa:	f003 f91f 	bl	2401523c <mpool_alloc>
    f->mempool = m;
    f->numFilts = numFilts;
    f->filters = (tAllpassSO*) mpool_calloc(sizeof(tAllpassSO) * numFilts, m);
24011ffe:	9901      	ldr	r1, [sp, #4]
    _tThiranAllpassSOCascade* f = *ft = (_tThiranAllpassSOCascade*) mpool_alloc(sizeof(_tThiranAllpassSOCascade), m);
24012000:	4606      	mov	r6, r0
24012002:	6020      	str	r0, [r4, #0]
    f->k3[1] = -2.9018f;
    f->C1[1] = 0.071089f;
    f->C2[1] = 2.1074f;
    f->isHigh = 0;
    f->numFiltsMap[0] = numFilts;
    f->numFiltsMap[1] = 1;
24012004:	2400      	movs	r4, #0
    f->numFilts = numFilts;
24012006:	e9c0 1700 	strd	r1, r7, [r0]
    f->filters = (tAllpassSO*) mpool_calloc(sizeof(tAllpassSO) * numFilts, m);
2401200a:	00b8      	lsls	r0, r7, #2
2401200c:	f003 f97a 	bl	24015304 <mpool_calloc>
    f->k1[0] = -0.00050469f;
24012010:	4b1a      	ldr	r3, [pc, #104]	; (2401207c <tThiranAllpassSOCascade_initToPool+0x94>)
    f->numActiveFilters = numFilts;
    for (int i = 0; i < numFilts; i++)
24012012:	42a7      	cmp	r7, r4
    f->filters = (tAllpassSO*) mpool_calloc(sizeof(tAllpassSO) * numFilts, m);
24012014:	60b0      	str	r0, [r6, #8]
    f->k1[0] = -0.00050469f;
24012016:	61f3      	str	r3, [r6, #28]
    f->k2[0] = -0.0064264f;
24012018:	4b19      	ldr	r3, [pc, #100]	; (24012080 <tThiranAllpassSOCascade_initToPool+0x98>)
2401201a:	6273      	str	r3, [r6, #36]	; 0x24
    f->k3[0] = -2.8743f;
2401201c:	4b19      	ldr	r3, [pc, #100]	; (24012084 <tThiranAllpassSOCascade_initToPool+0x9c>)
2401201e:	62f3      	str	r3, [r6, #44]	; 0x2c
    f->C1[0] = 0.069618f;
24012020:	4b19      	ldr	r3, [pc, #100]	; (24012088 <tThiranAllpassSOCascade_initToPool+0xa0>)
24012022:	6373      	str	r3, [r6, #52]	; 0x34
    f->C2[0] = 2.0427f;
24012024:	4b19      	ldr	r3, [pc, #100]	; (2401208c <tThiranAllpassSOCascade_initToPool+0xa4>)
24012026:	63f3      	str	r3, [r6, #60]	; 0x3c
    f->k1[1] = -0.0026580f;
24012028:	4b19      	ldr	r3, [pc, #100]	; (24012090 <tThiranAllpassSOCascade_initToPool+0xa8>)
2401202a:	6233      	str	r3, [r6, #32]
    f->k2[1] = -0.014811f;
2401202c:	4b19      	ldr	r3, [pc, #100]	; (24012094 <tThiranAllpassSOCascade_initToPool+0xac>)
2401202e:	62b3      	str	r3, [r6, #40]	; 0x28
    f->k3[1] = -2.9018f;
24012030:	4b19      	ldr	r3, [pc, #100]	; (24012098 <tThiranAllpassSOCascade_initToPool+0xb0>)
24012032:	6333      	str	r3, [r6, #48]	; 0x30
    f->C1[1] = 0.071089f;
24012034:	4b19      	ldr	r3, [pc, #100]	; (2401209c <tThiranAllpassSOCascade_initToPool+0xb4>)
24012036:	63b3      	str	r3, [r6, #56]	; 0x38
    f->C2[1] = 2.1074f;
24012038:	4b19      	ldr	r3, [pc, #100]	; (240120a0 <tThiranAllpassSOCascade_initToPool+0xb8>)
2401203a:	6433      	str	r3, [r6, #64]	; 0x40
    f->numFiltsMap[1] = 1;
2401203c:	f04f 0301 	mov.w	r3, #1
    f->numActiveFilters = numFilts;
24012040:	e9c6 7711 	strd	r7, r7, [r6, #68]	; 0x44
    f->numFiltsMap[1] = 1;
24012044:	e9c6 3413 	strd	r3, r4, [r6, #76]	; 0x4c
    for (int i = 0; i < numFilts; i++)
24012048:	dd15      	ble.n	24012076 <tThiranAllpassSOCascade_initToPool+0x8e>
2401204a:	4682      	mov	sl, r0
    f->prevSamp = 0.0f;
2401204c:	2500      	movs	r5, #0
2401204e:	e001      	b.n	24012054 <tThiranAllpassSOCascade_initToPool+0x6c>
    {
        tAllpassSO_initToPool(&f->filters[i], mp);
24012050:	f8d6 a008 	ldr.w	sl, [r6, #8]
    _tMempool* m = *mp;
24012054:	f8d8 9000 	ldr.w	r9, [r8]
    _tAllpassSO* f = *ft = (_tAllpassSO*) mpool_alloc(sizeof(_tAllpassSO), m);
24012058:	201c      	movs	r0, #28
2401205a:	4649      	mov	r1, r9
2401205c:	f003 f8ee 	bl	2401523c <mpool_alloc>
24012060:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
    for (int i = 0; i < numFilts; i++)
24012064:	3401      	adds	r4, #1
    f->mempool = m;
24012066:	f8c0 9000 	str.w	r9, [r0]
    f->prevSamp = 0.0f;
2401206a:	6045      	str	r5, [r0, #4]
    for (int i = 0; i < numFilts; i++)
2401206c:	42a7      	cmp	r7, r4
    f->prevPrevSamp = 0.0f;
2401206e:	6085      	str	r5, [r0, #8]
    f->a1 = 0.0f;
24012070:	6145      	str	r5, [r0, #20]
    f->a2 = 0.0f;
24012072:	6185      	str	r5, [r0, #24]
    for (int i = 0; i < numFilts; i++)
24012074:	d1ec      	bne.n	24012050 <tThiranAllpassSOCascade_initToPool+0x68>
    }
}
24012076:	b002      	add	sp, #8
24012078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2401207c:	ba044d2c 	.word	0xba044d2c
24012080:	bbd2948d 	.word	0xbbd2948d
24012084:	c037f488 	.word	0xc037f488
24012088:	3d8e93e2 	.word	0x3d8e93e2
2401208c:	4002bb99 	.word	0x4002bb99
24012090:	bb2e31d7 	.word	0xbb2e31d7
24012094:	bc72a9d6 	.word	0xbc72a9d6
24012098:	c039b717 	.word	0xc039b717
2401209c:	3d91971c 	.word	0x3d91971c
240120a0:	4006dfa4 	.word	0x4006dfa4

240120a4 <tThiranAllpassSOCascade_free>:

void    tThiranAllpassSOCascade_free  (tThiranAllpassSOCascade* const ft)
{
240120a4:	b538      	push	{r3, r4, r5, lr}
    _tThiranAllpassSOCascade* f = *ft;
240120a6:	6805      	ldr	r5, [r0, #0]
    for (int i = 0; i < f->numFilts; i++)
240120a8:	686b      	ldr	r3, [r5, #4]
240120aa:	2b00      	cmp	r3, #0
240120ac:	dd0a      	ble.n	240120c4 <tThiranAllpassSOCascade_free+0x20>
240120ae:	2400      	movs	r4, #0
    _tAllpassSO* f = *ft;
240120b0:	68ab      	ldr	r3, [r5, #8]
240120b2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    for (int i = 0; i < f->numFilts; i++)
240120b6:	3401      	adds	r4, #1
    mpool_free((char*)f, f->mempool);
240120b8:	6801      	ldr	r1, [r0, #0]
240120ba:	f003 f981 	bl	240153c0 <mpool_free>
    for (int i = 0; i < f->numFilts; i++)
240120be:	686b      	ldr	r3, [r5, #4]
240120c0:	42a3      	cmp	r3, r4
240120c2:	dcf5      	bgt.n	240120b0 <tThiranAllpassSOCascade_free+0xc>
    {
        tAllpassSO_free(&f->filters[i]);
    }
    mpool_free((char*)f->filters, f->mempool); //do I need to free the pointers separately?
240120c4:	6829      	ldr	r1, [r5, #0]
240120c6:	68a8      	ldr	r0, [r5, #8]
240120c8:	f003 f97a 	bl	240153c0 <mpool_free>
    mpool_free((char*)f, f->mempool);
240120cc:	6829      	ldr	r1, [r5, #0]
240120ce:	4628      	mov	r0, r5
}
240120d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mpool_free((char*)f, f->mempool);
240120d4:	f003 b974 	b.w	240153c0 <mpool_free>

240120d8 <tThiranAllpassSOCascade_setCoeff>:

volatile Lfloat binTest;
float    tThiranAllpassSOCascade_setCoeff(tThiranAllpassSOCascade* const ft, Lfloat dispersionCoeff, Lfloat freq, Lfloat oversampling)
{
240120d8:	eef0 7a40 	vmov.f32	s15, s0
240120dc:	b510      	push	{r4, lr}
240120de:	ed2d 8b08 	vpush	{d8-d11}
    _tThiranAllpassSOCascade* f = *ft;

    f->B = dispersionCoeff;
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
240120e2:	eddf 9a68 	vldr	s19, [pc, #416]	; 24012284 <tThiranAllpassSOCascade_setCoeff+0x1ac>
240120e6:	eeb2 9a08 	vmov.f32	s18, #40	; 0x41400000  12.0
    _tThiranAllpassSOCascade* f = *ft;
240120ea:	6804      	ldr	r4, [r0, #0]
{
240120ec:	eef0 8a60 	vmov.f32	s17, s1
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
240120f0:	ee20 0aa9 	vmul.f32	s0, s1, s19
    f->B = dispersionCoeff;
240120f4:	edc4 7a03 	vstr	s15, [r4, #12]
{
240120f8:	eeb0 8a41 	vmov.f32	s16, s2
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
240120fc:	f007 fc52 	bl	240199a4 <log2f>
24012100:	eddf 7a61 	vldr	s15, [pc, #388]	; 24012288 <tThiranAllpassSOCascade_setCoeff+0x1b0>
    //f->iKey = logf((110.0f*twelfthRootOf2) / 27.5f)/ logf(twelfthRootOf2);
    //f->isHigh = freq > 400.0f;//switch to different coefficients for higher notes
    //Lfloat howHigh = LEAF_mapToZeroToOneOutput(iKey2, 16.0f, 76.0f);
    Lfloat howHigh = (iKey2 - 16.0f) * 0.03f;
    howHigh = LEAF_clip(0.0f, howHigh, 1.0f);
    Lfloat oneMinusHowHigh = 1.0f - howHigh;
24012104:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
24012108:	eee0 7a09 	vfma.f32	s15, s0, s18
    Lfloat iKey2 = (49.0f + 12.0f * log2f(freq * oversampling * INV_440));
2401210c:	ee28 8a29 	vmul.f32	s16, s16, s19
24012110:	ee28 0a28 	vmul.f32	s0, s16, s17
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
24012114:	edc4 7a04 	vstr	s15, [r4, #16]
    Lfloat iKey2 = (49.0f + 12.0f * log2f(freq * oversampling * INV_440));
24012118:	f007 fc44 	bl	240199a4 <log2f>
2401211c:	eeb0 7a40 	vmov.f32	s14, s0
    Lfloat howHigh = (iKey2 - 16.0f) * 0.03f;
24012120:	eddf 0a5a 	vldr	s1, [pc, #360]	; 2401228c <tThiranAllpassSOCascade_setCoeff+0x1b4>
    howHigh = LEAF_clip(0.0f, howHigh, 1.0f);
24012124:	eeb0 1a4b 	vmov.f32	s2, s22
    Lfloat howHigh = (iKey2 - 16.0f) * 0.03f;
24012128:	eddf 7a59 	vldr	s15, [pc, #356]	; 24012290 <tThiranAllpassSOCascade_setCoeff+0x1b8>
2401212c:	eee7 0a09 	vfma.f32	s1, s14, s18
    howHigh = LEAF_clip(0.0f, howHigh, 1.0f);
24012130:	ed9f 0a58 	vldr	s0, [pc, #352]	; 24012294 <tThiranAllpassSOCascade_setCoeff+0x1bc>
24012134:	ee60 0aa7 	vmul.f32	s1, s1, s15
24012138:	f002 fd7e 	bl	24014c38 <LEAF_clip>

    Lfloat k1 = (f->k1[0] * oneMinusHowHigh) + (f->k1[1] * howHigh);
2401213c:	edd4 aa08 	vldr	s21, [r4, #32]
    Lfloat k2 = (f->k2[0] * oneMinusHowHigh) + (f->k2[1] * howHigh);
24012140:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
    Lfloat oneMinusHowHigh = 1.0f - howHigh;
24012144:	ee7b 7a40 	vsub.f32	s15, s22, s0
    Lfloat k1 = (f->k1[0] * oneMinusHowHigh) + (f->k1[1] * howHigh);
24012148:	ee60 aa2a 	vmul.f32	s21, s0, s21
2401214c:	edd4 6a07 	vldr	s13, [r4, #28]
    Lfloat k2 = (f->k2[0] * oneMinusHowHigh) + (f->k2[1] * howHigh);
24012150:	ee60 8a28 	vmul.f32	s17, s0, s17
24012154:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
24012158:	ed94 aa0c 	vldr	s20, [r4, #48]	; 0x30
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
2401215c:	ed94 6a10 	vldr	s12, [r4, #64]	; 0x40
    Lfloat k1 = (f->k1[0] * oneMinusHowHigh) + (f->k1[1] * howHigh);
24012160:	eee6 aaa7 	vfma.f32	s21, s13, s15
    Lfloat k2 = (f->k2[0] * oneMinusHowHigh) + (f->k2[1] * howHigh);
24012164:	eee7 8a27 	vfma.f32	s17, s14, s15
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
24012168:	edd4 9a0e 	vldr	s19, [r4, #56]	; 0x38
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
2401216c:	ee20 aa0a 	vmul.f32	s20, s0, s20
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
24012170:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
24012174:	ee20 8a06 	vmul.f32	s16, s0, s12
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
24012178:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
2401217c:	ee60 9a29 	vmul.f32	s19, s0, s19
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
24012180:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
24012184:	eea6 aa27 	vfma.f32	s20, s12, s15
    Lfloat logB = logf(f->B);
24012188:	ed94 0a03 	vldr	s0, [r4, #12]
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
2401218c:	eea7 8a27 	vfma.f32	s16, s14, s15
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
24012190:	eee6 9aa7 	vfma.f32	s19, s13, s15
    Lfloat logB = logf(f->B);
24012194:	f007 fba0 	bl	240198d8 <logf>
    Lfloat temp = (k1*logB*logB)+(k2 * logB)+k3;
24012198:	eeea 8a80 	vfma.f32	s17, s21, s0
    Lfloat logB = logf(f->B);
2401219c:	eeb0 9a40 	vmov.f32	s18, s0
    Lfloat kd = fastExp3(temp);
240121a0:	eeb0 0a4a 	vmov.f32	s0, s20
240121a4:	eea8 0a89 	vfma.f32	s0, s17, s18
240121a8:	f002 fc50 	bl	24014a4c <fastExp3>
240121ac:	eef0 7a40 	vmov.f32	s15, s0
    Lfloat Cd = fastExp3((C1 * logB) + C2);
240121b0:	eeb0 0a48 	vmov.f32	s0, s16
    Lfloat kd = fastExp3(temp);
240121b4:	eeb0 8a67 	vmov.f32	s16, s15
    Lfloat Cd = fastExp3((C1 * logB) + C2);
240121b8:	eea9 0a89 	vfma.f32	s0, s19, s18
240121bc:	f002 fc46 	bl	24014a4c <fastExp3>
    Lfloat D = fastExp3(Cd-(f->iKey*kd));
240121c0:	edd4 7a04 	vldr	s15, [r4, #16]
240121c4:	eea7 0ac8 	vfms.f32	s0, s15, s16
240121c8:	f002 fc40 	bl	24014a4c <fastExp3>
    f->D = D;

	Lfloat a_k = -2.0f;

	a_k *= (D - 2.0f);
240121cc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
240121d0:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
	a_k *= D;
	a_k /= (D + 2.0f);

	f->a[1] = a_k;

	if (f->a[0] > 0.99f)
240121d4:	eddf 5a30 	vldr	s11, [pc, #192]	; 24012298 <tThiranAllpassSOCascade_setCoeff+0x1c0>
	a_k /= (D - 1.0f);
240121d8:	ee70 7a4b 	vsub.f32	s15, s0, s22
    f->D = D;
240121dc:	ed84 0a15 	vstr	s0, [r4, #84]	; 0x54
	a_k *= (D - 2.0f);
240121e0:	ee70 4a47 	vsub.f32	s9, s0, s14
	a_k /= (D + 1.0f);
240121e4:	ee30 5a0b 	vadd.f32	s10, s0, s22
	a_k /= (D + 2.0f);
240121e8:	ee30 7a07 	vadd.f32	s14, s0, s14
	a_k *= (D - 2.0f);
240121ec:	ee24 6aa6 	vmul.f32	s12, s9, s13
	a_k /= D;
240121f0:	eec4 6a80 	vdiv.f32	s13, s9, s0
	a_k /= (D - 1.0f);
240121f4:	eec6 4a27 	vdiv.f32	s9, s12, s15
	a_k *= (D - 1.0f);
240121f8:	ee67 6aa6 	vmul.f32	s13, s15, s13
	a_k /= (D + 1.0f);
240121fc:	ee86 6a85 	vdiv.f32	s12, s13, s10
	a_k *= (D - 1.0f);
24012200:	ee67 7aa4 	vmul.f32	s15, s15, s9
	a_k /= D;
24012204:	eec7 6a80 	vdiv.f32	s13, s15, s0
	a_k *= D;
24012208:	ee60 7a06 	vmul.f32	s15, s0, s12
	a_k /= (D + 2.0f);
2401220c:	ee87 6a87 	vdiv.f32	s12, s15, s14
	a_k *= D;
24012210:	ee60 6a26 	vmul.f32	s13, s0, s13
	a_k /= (D + 1.0f);
24012214:	eec6 7a85 	vdiv.f32	s15, s13, s10
	f->a[1] = a_k;
24012218:	ed84 6a06 	vstr	s12, [r4, #24]
	if (f->a[0] > 0.99f)
2401221c:	eef4 7ae5 	vcmpe.f32	s15, s11
	f->a[0] = a_k;
24012220:	edc4 7a05 	vstr	s15, [r4, #20]
	if (f->a[0] > 0.99f)
24012224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012228:	dd0b      	ble.n	24012242 <tThiranAllpassSOCascade_setCoeff+0x16a>
	{
		f->a[0] = 0.99f;
		f->a[1] = 0.01f;
2401222a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 2401229c <tThiranAllpassSOCascade_setCoeff+0x1c4>
2401222e:	eef0 7a65 	vmov.f32	s15, s11
		D = 1.0f;
24012232:	eeb0 0a4b 	vmov.f32	s0, s22
		f->a[0] = 0.99f;
24012236:	edc4 5a05 	vstr	s11, [r4, #20]
		f->a[1] = 0.01f;
2401223a:	eeb0 6a47 	vmov.f32	s12, s14
2401223e:	ed84 7a06 	vstr	s14, [r4, #24]
	}
	//f->a[0] = LEAF_clip(0.0f, f->a[0], 1.0f);
	//f->a[1] = LEAF_clip(-1.999999f, f->a[1], 2.0f);

    for (int i = 0; i < f->numActiveFilters; i++)
24012242:	6c62      	ldr	r2, [r4, #68]	; 0x44
24012244:	2a00      	cmp	r2, #0
24012246:	dd14      	ble.n	24012272 <tThiranAllpassSOCascade_setCoeff+0x19a>
    _tAllpassSO* f = *ft;
24012248:	68a3      	ldr	r3, [r4, #8]
2401224a:	681b      	ldr	r3, [r3, #0]
    f->a1 = a1;
2401224c:	edc3 7a05 	vstr	s15, [r3, #20]
    f->a2 = a2;
24012250:	ed83 6a06 	vstr	s12, [r3, #24]
    for (int i = 0; i < f->numActiveFilters; i++)
24012254:	6c62      	ldr	r2, [r4, #68]	; 0x44
24012256:	2a01      	cmp	r2, #1
24012258:	dd0b      	ble.n	24012272 <tThiranAllpassSOCascade_setCoeff+0x19a>
2401225a:	2301      	movs	r3, #1
    _tAllpassSO* f = *ft;
2401225c:	68a2      	ldr	r2, [r4, #8]
    {
        tAllpassSO_setCoeff(&f->filters[i], f->a[0], f->a[1]);
2401225e:	6960      	ldr	r0, [r4, #20]
    _tAllpassSO* f = *ft;
24012260:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    for (int i = 0; i < f->numActiveFilters; i++)
24012264:	3301      	adds	r3, #1
        tAllpassSO_setCoeff(&f->filters[i], f->a[0], f->a[1]);
24012266:	69a1      	ldr	r1, [r4, #24]
    f->a1 = a1;
24012268:	6150      	str	r0, [r2, #20]
    f->a2 = a2;
2401226a:	6191      	str	r1, [r2, #24]
    for (int i = 0; i < f->numActiveFilters; i++)
2401226c:	6c62      	ldr	r2, [r4, #68]	; 0x44
2401226e:	429a      	cmp	r2, r3
24012270:	dcf4      	bgt.n	2401225c <tThiranAllpassSOCascade_setCoeff+0x184>
        //f->filters[i]->prevSamp = 0.0f;
        //f->filters[i]->prevPrevSamp = 0.0f;
        //probably should adjust the gain of the internal state variables (prevSamp and prevPrevSamp) if the gain total of the two coefficients goes //up, since the internals of the allpass boosts gain and then attenuates it, so leaving super big values in there that won't be //attenuated enough can make it distort or nan.
    }
    return D*f->numActiveFilters;
24012272:	ee07 2a90 	vmov	s15, r2
24012276:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
2401227a:	ecbd 8b08 	vpop	{d8-d11}
2401227e:	ee27 0a80 	vmul.f32	s0, s15, s0
24012282:	bd10      	pop	{r4, pc}
24012284:	3b14f209 	.word	0x3b14f209
24012288:	42440000 	.word	0x42440000
2401228c:	42040000 	.word	0x42040000
24012290:	3cf5c28f 	.word	0x3cf5c28f
24012294:	00000000 	.word	0x00000000
24012298:	3f7d70a4 	.word	0x3f7d70a4
2401229c:	3c23d70a 	.word	0x3c23d70a

240122a0 <tThiranAllpassSOCascade_tick>:

Lfloat   tThiranAllpassSOCascade_tick(tThiranAllpassSOCascade* const ft, Lfloat input)
{
    _tThiranAllpassSOCascade* f = *ft;
240122a0:	6801      	ldr	r1, [r0, #0]
    Lfloat sample = input;
    for (int i = 0; i < f->numActiveFilters; i++)
240122a2:	6c4b      	ldr	r3, [r1, #68]	; 0x44
240122a4:	2b00      	cmp	r3, #0
240122a6:	dd27      	ble.n	240122f8 <tThiranAllpassSOCascade_tick+0x58>
240122a8:	2200      	movs	r2, #0
    _tAllpassSO* f = *ft;
240122aa:	688b      	ldr	r3, [r1, #8]
240122ac:	eef0 4a40 	vmov.f32	s9, s0
240122b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    for (int i = 0; i < f->numActiveFilters; i++)
240122b4:	3201      	adds	r2, #1
240122b6:	edd3 6a04 	vldr	s13, [r3, #16]
    Lfloat vn = input * f->a2 + (f->prevSamp * f->a1 + f->prevPrevSamp);
240122ba:	ed93 7a01 	vldr	s14, [r3, #4]
    Lfloat output = vn + (f->prevSamp2 * -f->a1) +  (f->prevPrevSamp2 * -f->a2);
240122be:	ee30 0a66 	vsub.f32	s0, s0, s13
240122c2:	edd3 7a03 	vldr	s15, [r3, #12]
240122c6:	ed93 5a06 	vldr	s10, [r3, #24]
240122ca:	ee37 6a67 	vsub.f32	s12, s14, s15
240122ce:	edd3 5a05 	vldr	s11, [r3, #20]
240122d2:	ee20 0a05 	vmul.f32	s0, s0, s10
240122d6:	edd3 6a02 	vldr	s13, [r3, #8]
    f->prevSamp = input;
240122da:	edc3 4a01 	vstr	s9, [r3, #4]
    f->prevPrevSamp = f->prevSamp;
240122de:	ed83 7a02 	vstr	s14, [r3, #8]
240122e2:	eea5 0a86 	vfma.f32	s0, s11, s12
    f->prevPrevSamp2 = f->prevSamp2;
240122e6:	edc3 7a04 	vstr	s15, [r3, #16]
    Lfloat output = vn + (f->prevSamp2 * -f->a1) +  (f->prevPrevSamp2 * -f->a2);
240122ea:	ee30 0a26 	vadd.f32	s0, s0, s13
    f->prevSamp2 = output;
240122ee:	ed83 0a03 	vstr	s0, [r3, #12]
    for (int i = 0; i < f->numActiveFilters; i++)
240122f2:	6c4b      	ldr	r3, [r1, #68]	; 0x44
240122f4:	4293      	cmp	r3, r2
240122f6:	dcd8      	bgt.n	240122aa <tThiranAllpassSOCascade_tick+0xa>
    {
        sample = tAllpassSO_tick(&f->filters[i], sample);
    }
    return sample;
}
240122f8:	4770      	bx	lr
240122fa:	bf00      	nop

240122fc <tThiranAllpassSOCascade_clear>:

void   tThiranAllpassSOCascade_clear(tThiranAllpassSOCascade* const ft)
{
    _tThiranAllpassSOCascade* f = *ft;
240122fc:	6802      	ldr	r2, [r0, #0]
    for (int i = 0; i < f->numFilts; i++)
240122fe:	6853      	ldr	r3, [r2, #4]
24012300:	2b00      	cmp	r3, #0
24012302:	dd0d      	ble.n	24012320 <tThiranAllpassSOCascade_clear+0x24>
24012304:	2300      	movs	r3, #0
    {
        //tAllpassSO_setCoeff(&f->filters[i], f->a[1], f->a[2]);
        f->filters[i]->prevSamp = 0.0f;
24012306:	2100      	movs	r1, #0
24012308:	6890      	ldr	r0, [r2, #8]
2401230a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
2401230e:	6041      	str	r1, [r0, #4]
        f->filters[i]->prevPrevSamp = 0.0f;
24012310:	6890      	ldr	r0, [r2, #8]
24012312:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    for (int i = 0; i < f->numFilts; i++)
24012316:	3301      	adds	r3, #1
        f->filters[i]->prevPrevSamp = 0.0f;
24012318:	6081      	str	r1, [r0, #8]
    for (int i = 0; i < f->numFilts; i++)
2401231a:	6850      	ldr	r0, [r2, #4]
2401231c:	4298      	cmp	r0, r3
2401231e:	dcf3      	bgt.n	24012308 <tThiranAllpassSOCascade_clear+0xc>

    }
}
24012320:	4770      	bx	lr
24012322:	bf00      	nop

24012324 <tOnePole_initToPool>:
{
    tOnePole_initToPool(ft, freq, &leaf->mempool);
}

void    tOnePole_initToPool     (tOnePole* const ft, Lfloat freq, tMempool* const mp)
{
24012324:	b538      	push	{r3, r4, r5, lr}
24012326:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
2401232a:	680d      	ldr	r5, [r1, #0]
{
2401232c:	4604      	mov	r4, r0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
    
    f->gain = 1.0f;
2401232e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
24012332:	2028      	movs	r0, #40	; 0x28
24012334:	4629      	mov	r1, r5
{
24012336:	eeb0 8a40 	vmov.f32	s16, s0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
2401233a:	f002 ff7f 	bl	2401523c <mpool_alloc>
    f->a0 = 1.0;
    
    f->lastIn = 0.0f;
2401233e:	ed9f 0a12 	vldr	s0, [pc, #72]	; 24012388 <tOnePole_initToPool+0x64>
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
24012342:	6020      	str	r0, [r4, #0]
{
    _tOnePole* f = *ft;
    
    f->freq = freq;
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
24012344:	eeb0 1a68 	vmov.f32	s2, s17
    f->mempool = m;
24012348:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
2401234a:	686b      	ldr	r3, [r5, #4]
    f->gain = 1.0f;
2401234c:	edc0 8a02 	vstr	s17, [r0, #8]
    f->a0 = 1.0;
24012350:	edc0 8a03 	vstr	s17, [r0, #12]
    f->lastIn = 0.0f;
24012354:	ed80 0a07 	vstr	s0, [r0, #28]
    f->lastOut = 0.0f;
24012358:	ed80 0a08 	vstr	s0, [r0, #32]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
2401235c:	68db      	ldr	r3, [r3, #12]
2401235e:	6243      	str	r3, [r0, #36]	; 0x24
    _tOnePole* f = *ft;
24012360:	6824      	ldr	r4, [r4, #0]
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
24012362:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    f->freq = freq;
24012366:	ed84 8a01 	vstr	s16, [r4, #4]
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
2401236a:	ee68 0a27 	vmul.f32	s1, s16, s15
2401236e:	edc4 0a04 	vstr	s1, [r4, #16]
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
24012372:	f002 fc61 	bl	24014c38 <LEAF_clip>
    f->b0 = 1.0f - f->a1;
24012376:	ee78 8ac0 	vsub.f32	s17, s17, s0
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
2401237a:	ed84 0a04 	vstr	s0, [r4, #16]
    f->b0 = 1.0f - f->a1;
2401237e:	edc4 8a05 	vstr	s17, [r4, #20]
}
24012382:	ecbd 8b02 	vpop	{d8}
24012386:	bd38      	pop	{r3, r4, r5, pc}
24012388:	00000000 	.word	0x00000000

2401238c <tOnePole_free>:
    _tOnePole* f = *ft;
2401238c:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
2401238e:	6801      	ldr	r1, [r0, #0]
24012390:	f003 b816 	b.w	240153c0 <mpool_free>

24012394 <tOnePole_setFreq>:
{
24012394:	b510      	push	{r4, lr}
    _tOnePole* f = *ft;
24012396:	6804      	ldr	r4, [r0, #0]
{
24012398:	eef0 0a40 	vmov.f32	s1, s0
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
2401239c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240123a0:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 240123cc <tOnePole_setFreq+0x38>
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
240123a4:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    f->freq = freq;
240123a8:	edc4 0a01 	vstr	s1, [r4, #4]
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
240123ac:	ee60 0aa7 	vmul.f32	s1, s1, s15
240123b0:	edc4 0a04 	vstr	s1, [r4, #16]
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
240123b4:	f002 fc40 	bl	24014c38 <LEAF_clip>
    f->b0 = 1.0f - f->a1;
240123b8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
240123bc:	ed84 0a04 	vstr	s0, [r4, #16]
    f->b0 = 1.0f - f->a1;
240123c0:	ee77 7ac0 	vsub.f32	s15, s15, s0
240123c4:	edc4 7a05 	vstr	s15, [r4, #20]
}
240123c8:	bd10      	pop	{r4, pc}
240123ca:	bf00      	nop
240123cc:	00000000 	.word	0x00000000

240123d0 <tOnePole_tick>:
    f->gain = gain;
}

Lfloat   tOnePole_tick(tOnePole* const ft, Lfloat input)
{
    _tOnePole* f = *ft;
240123d0:	6803      	ldr	r3, [r0, #0]
    
    Lfloat in = input * f->gain;
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
240123d2:	ed93 6a08 	vldr	s12, [r3, #32]
    Lfloat in = input * f->gain;
240123d6:	ed93 7a02 	vldr	s14, [r3, #8]
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
240123da:	edd3 7a04 	vldr	s15, [r3, #16]
    Lfloat in = input * f->gain;
240123de:	ee20 7a07 	vmul.f32	s14, s0, s14
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
240123e2:	edd3 6a05 	vldr	s13, [r3, #20]
240123e6:	ee27 0a86 	vmul.f32	s0, s15, s12
    
    f->lastIn = in;
240123ea:	ed83 7a07 	vstr	s14, [r3, #28]
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
240123ee:	eea6 0a87 	vfma.f32	s0, s13, s14
    f->lastOut = out;
240123f2:	ed83 0a08 	vstr	s0, [r3, #32]
    
    return out;
}
240123f6:	4770      	bx	lr

240123f8 <tOnePole_setSampleRate>:

void tOnePole_setSampleRate(tOnePole* const ft, Lfloat sr)
{
    _tOnePole* f = *ft;
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
240123f8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 24012434 <tOnePole_setSampleRate+0x3c>
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
240123fc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
24012400:	eec7 7a00 	vdiv.f32	s15, s14, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24012404:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 24012438 <tOnePole_setSampleRate+0x40>
{
24012408:	b510      	push	{r4, lr}
    _tOnePole* f = *ft;
2401240a:	6804      	ldr	r4, [r0, #0]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
2401240c:	edd4 0a01 	vldr	s1, [r4, #4]
24012410:	ee67 0aa0 	vmul.f32	s1, s15, s1
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
24012414:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
24012418:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
2401241c:	f002 fc0c 	bl	24014c38 <LEAF_clip>
    f->a1 = 1.0f - f->b0;
24012420:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24012424:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
24012428:	ee77 7ac0 	vsub.f32	s15, s15, s0
2401242c:	edc4 7a04 	vstr	s15, [r4, #16]
}
24012430:	bd10      	pop	{r4, pc}
24012432:	bf00      	nop
24012434:	40c90fdb 	.word	0x40c90fdb
24012438:	00000000 	.word	0x00000000

2401243c <tCookOnePole_initToPool>:
{
    tCookOnePole_initToPool(ft, &leaf->mempool);
}

void    tCookOnePole_initToPool     (tCookOnePole* const ft, tMempool* const mp)
{
2401243c:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
2401243e:	680c      	ldr	r4, [r1, #0]
{
24012440:	4605      	mov	r5, r0
    _tCookOnePole* f = *ft = (_tCookOnePole*) mpool_alloc(sizeof(_tCookOnePole), m);
24012442:	2018      	movs	r0, #24
24012444:	4621      	mov	r1, r4
24012446:	f002 fef9 	bl	2401523c <mpool_alloc>
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
    
    f->poleCoeff     = 0.9f;
2401244a:	4a06      	ldr	r2, [pc, #24]	; (24012464 <tCookOnePole_initToPool+0x28>)
    _tCookOnePole* f = *ft = (_tCookOnePole*) mpool_alloc(sizeof(_tCookOnePole), m);
2401244c:	6028      	str	r0, [r5, #0]
    f->sgain         = 0.1f;
2401244e:	4906      	ldr	r1, [pc, #24]	; (24012468 <tCookOnePole_initToPool+0x2c>)
    f->mempool = m;
24012450:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
24012452:	6863      	ldr	r3, [r4, #4]
    f->poleCoeff     = 0.9f;
24012454:	6042      	str	r2, [r0, #4]
    f->output         = 0.0f;
24012456:	2200      	movs	r2, #0
    f->sgain         = 0.1f;
24012458:	6081      	str	r1, [r0, #8]
    f->output         = 0.0f;
2401245a:	60c2      	str	r2, [r0, #12]
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
2401245c:	68db      	ldr	r3, [r3, #12]
2401245e:	6103      	str	r3, [r0, #16]
}
24012460:	bd38      	pop	{r3, r4, r5, pc}
24012462:	bf00      	nop
24012464:	3f666666 	.word	0x3f666666
24012468:	3dcccccd 	.word	0x3dcccccd

2401246c <tCookOnePole_free>:

void    tCookOnePole_free   (tCookOnePole* const ft)
{
    _tCookOnePole* f = *ft;
2401246c:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)f, f->mempool);
2401246e:	6801      	ldr	r1, [r0, #0]
24012470:	f002 bfa6 	b.w	240153c0 <mpool_free>

24012474 <tCookOnePole_setPole>:
void    tCookOnePole_setPole(tCookOnePole* const ft, Lfloat aValue)
{
    _tCookOnePole* onepole = *ft;
    
    onepole->poleCoeff = aValue;
      if (onepole->poleCoeff > 0.0f)                   // Normalize gain to 1.0 max
24012474:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tCookOnePole* onepole = *ft;
24012478:	6803      	ldr	r3, [r0, #0]
        onepole->sgain = (1.0f - onepole->poleCoeff);
2401247a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    onepole->poleCoeff = aValue;
2401247e:	ed83 0a01 	vstr	s0, [r3, #4]
      if (onepole->poleCoeff > 0.0f)                   // Normalize gain to 1.0 max
24012482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        onepole->sgain = (1.0f - onepole->poleCoeff);
24012486:	bfcc      	ite	gt
24012488:	ee37 0ac0 	vsubgt.f32	s0, s15, s0
      else
        onepole->sgain = (1.0f + onepole->poleCoeff);
2401248c:	ee30 0a27 	vaddle.f32	s0, s0, s15
24012490:	ed83 0a02 	vstr	s0, [r3, #8]
}
24012494:	4770      	bx	lr
24012496:	bf00      	nop

24012498 <tCookOnePole_setGainAndPole>:
        onepole->sgain = ((1.0f + onepole->poleCoeff) * gain);
}

void    tCookOnePole_setGainAndPole(tCookOnePole* const ft, Lfloat gain, Lfloat pole)
{
    _tCookOnePole* onepole = *ft;
24012498:	6803      	ldr	r3, [r0, #0]
    
    onepole->poleCoeff = pole;
2401249a:	edc3 0a01 	vstr	s1, [r3, #4]

    onepole->sgain = gain;
2401249e:	ed83 0a02 	vstr	s0, [r3, #8]
     
}
240124a2:	4770      	bx	lr

240124a4 <tCookOnePole_tick>:
    
Lfloat   tCookOnePole_tick(tCookOnePole* const ft, Lfloat sample)
{
    _tCookOnePole* onepole = *ft;
240124a4:	6803      	ldr	r3, [r0, #0]
    
    onepole->output = (onepole->sgain * sample) + (onepole->poleCoeff * onepole->output);
240124a6:	edd3 6a03 	vldr	s13, [r3, #12]
240124aa:	edd3 7a01 	vldr	s15, [r3, #4]
240124ae:	ed93 7a02 	vldr	s14, [r3, #8]
240124b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
240124b6:	eee7 7a00 	vfma.f32	s15, s14, s0
    return onepole->output;
}
240124ba:	eeb0 0a67 	vmov.f32	s0, s15
    onepole->output = (onepole->sgain * sample) + (onepole->poleCoeff * onepole->output);
240124be:	edc3 7a03 	vstr	s15, [r3, #12]
}
240124c2:	4770      	bx	lr

240124c4 <tCookOnePole_setSampleRate>:

void tCookOnePole_setSampleRate(tCookOnePole* const ft, Lfloat sr)
{
    _tCookOnePole* f = *ft;
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
240124c4:	ed9f 7a03 	vldr	s14, [pc, #12]	; 240124d4 <tCookOnePole_setSampleRate+0x10>
    _tCookOnePole* f = *ft;
240124c8:	6803      	ldr	r3, [r0, #0]
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
240124ca:	eec7 7a00 	vdiv.f32	s15, s14, s0
240124ce:	edc3 7a04 	vstr	s15, [r3, #16]
}
240124d2:	4770      	bx	lr
240124d4:	40c90fdb 	.word	0x40c90fdb

240124d8 <tSVF_init>:
}

// Less efficient, more accurate version of SVF, in which cutoff frequency is taken as Lfloating point Hz value and tanf
// is calculated when frequency changes.
void tSVF_init(tSVF* const svff, SVFType type, Lfloat freq, Lfloat Q, LEAF* const leaf)
{
240124d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
240124da:	ed2d 8b02 	vpush	{d8}
     */
}

void    tSVF_initToPool     (tSVF* const svff, SVFType type, Lfloat freq, Lfloat Q, tMempool* const mp)
{
    _tMempool* m = *mp;
240124de:	6995      	ldr	r5, [r2, #24]
{
240124e0:	4606      	mov	r6, r0
240124e2:	460f      	mov	r7, r1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
240124e4:	2050      	movs	r0, #80	; 0x50
240124e6:	4629      	mov	r1, r5
{
240124e8:	eef0 8a40 	vmov.f32	s17, s0
240124ec:	eeb0 8a60 	vmov.f32	s16, s1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
240124f0:	f002 fea4 	bl	2401523c <mpool_alloc>
240124f4:	6030      	str	r0, [r6, #0]
240124f6:	4604      	mov	r4, r0
    svf->mempool = m;
240124f8:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = svf->mempool->leaf;
240124fa:	686e      	ldr	r6, [r5, #4]
    svf->sampleRate = leaf->sampleRate;
    svf->invSampleRate = leaf->invSampleRate;
    
    svf->type = type;
    
    svf->ic1eq = 0;
240124fc:	2500      	movs	r5, #0
    svf->ic2eq = 0;
    svf->Q = Q;
    svf->cutoff = freq;
    svf->g = tanf(PI * freq * svf->invSampleRate);
240124fe:	ed9f 0a35 	vldr	s0, [pc, #212]	; 240125d4 <tSVF_init+0xfc>
    svf->sampleRate = leaf->sampleRate;
24012502:	6833      	ldr	r3, [r6, #0]
    svf->g = tanf(PI * freq * svf->invSampleRate);
24012504:	ee28 0a80 	vmul.f32	s0, s17, s0
    svf->sampleRate = leaf->sampleRate;
24012508:	6403      	str	r3, [r0, #64]	; 0x40
    svf->invSampleRate = leaf->invSampleRate;
2401250a:	edd6 7a01 	vldr	s15, [r6, #4]
    svf->type = type;
2401250e:	7107      	strb	r7, [r0, #4]
    svf->g = tanf(PI * freq * svf->invSampleRate);
24012510:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->invSampleRate = leaf->invSampleRate;
24012514:	edc0 7a11 	vstr	s15, [r0, #68]	; 0x44
    svf->ic1eq = 0;
24012518:	6145      	str	r5, [r0, #20]
    svf->ic2eq = 0;
2401251a:	6185      	str	r5, [r0, #24]
    svf->Q = Q;
2401251c:	ed80 8a03 	vstr	s16, [r0, #12]
    svf->cutoff = freq;
24012520:	edc0 8a02 	vstr	s17, [r0, #8]
    svf->g = tanf(PI * freq * svf->invSampleRate);
24012524:	f007 fe8e 	bl	2401a244 <tanf>
    svf->k = 1.0f/Q;
24012528:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    svf->g = tanf(PI * freq * svf->invSampleRate);
2401252c:	ed84 0a07 	vstr	s0, [r4, #28]
    svf->cH = 0.0f;
    svf->cB = 0.0f;
    svf->cBK = 0.0f;
    svf->cL = 1.0f;
    
    if (type == SVFTypeLowpass)
24012530:	2f01      	cmp	r7, #1
    svf->cH = 0.0f;
24012532:	6325      	str	r5, [r4, #48]	; 0x30
    svf->k = 1.0f/Q;
24012534:	ee87 7a88 	vdiv.f32	s14, s15, s16
    svf->cL = 1.0f;
24012538:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
    svf->cB = 0.0f;
2401253c:	6365      	str	r5, [r4, #52]	; 0x34
    svf->cBK = 0.0f;
2401253e:	63e5      	str	r5, [r4, #60]	; 0x3c
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24012540:	eef0 6a67 	vmov.f32	s13, s15
24012544:	ee30 6a07 	vadd.f32	s12, s0, s14
    svf->k = 1.0f/Q;
24012548:	ed84 7a08 	vstr	s14, [r4, #32]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
2401254c:	eee0 6a06 	vfma.f32	s13, s0, s12
24012550:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    svf->a2 = svf->g*svf->a1;
24012554:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24012558:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
2401255c:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g*svf->a1;
24012560:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    svf->a3 = svf->g*svf->a2;
24012564:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    if (type == SVFTypeLowpass)
24012568:	d00d      	beq.n	24012586 <tSVF_init+0xae>
        svf->cH = 0.0f;
        svf->cB = 0.0f;
        svf->cBK = 0.0f;
        svf->cL = 1.0f;
    }
    else if (type == SVFTypeBandpass)
2401256a:	2f04      	cmp	r7, #4
2401256c:	d80b      	bhi.n	24012586 <tSVF_init+0xae>
2401256e:	e8df f007 	tbb	[pc, r7]
24012572:	0a23      	.short	0x0a23
24012574:	032a      	.short	0x032a
24012576:	1a          	.byte	0x1a
24012577:	00          	.byte	0x00
        svf->cL = -1.0f;
    }
    
    else if (type == SVFTypeNotch)
    {
        svf->cH = 1.0f;
24012578:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
2401257c:	4a16      	ldr	r2, [pc, #88]	; (240125d8 <tSVF_init+0x100>)
        svf->cL = 0.0f;
2401257e:	2300      	movs	r3, #0
        svf->cH = 1.0f;
24012580:	6321      	str	r1, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
24012582:	63e2      	str	r2, [r4, #60]	; 0x3c
        svf->cL = 0.0f;
24012584:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cH = 1.0f;
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
        svf->cL = -2.0f;
    }
    if (leaf->sampleRate > 90000)
24012586:	ed96 7a00 	vldr	s14, [r6]
2401258a:	eddf 7a14 	vldr	s15, [pc, #80]	; 240125dc <tSVF_init+0x104>
    {
    	svf->table = __filterTanhTable_96000;
    }
    else
    {
    	svf->table = __filterTanhTable_48000;
2401258e:	4a14      	ldr	r2, [pc, #80]	; (240125e0 <tSVF_init+0x108>)
24012590:	eeb4 7ae7 	vcmpe.f32	s14, s15
24012594:	4b13      	ldr	r3, [pc, #76]	; (240125e4 <tSVF_init+0x10c>)
24012596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401259a:	bfd8      	it	le
2401259c:	4613      	movle	r3, r2
2401259e:	64e3      	str	r3, [r4, #76]	; 0x4c
}
240125a0:	ecbd 8b02 	vpop	{d8}
240125a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        svf->cH = 1.0f;
240125a6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
240125aa:	4a0b      	ldr	r2, [pc, #44]	; (240125d8 <tSVF_init+0x100>)
        svf->cL = -2.0f;
240125ac:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
        svf->cH = 1.0f;
240125b0:	6321      	str	r1, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
240125b2:	63e2      	str	r2, [r4, #60]	; 0x3c
        svf->cL = -2.0f;
240125b4:	63a3      	str	r3, [r4, #56]	; 0x38
240125b6:	e7e6      	b.n	24012586 <tSVF_init+0xae>
        svf->cBK = -1.0f;
240125b8:	4b07      	ldr	r3, [pc, #28]	; (240125d8 <tSVF_init+0x100>)
        svf->cH = 1.0f;
240125ba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
240125be:	63e3      	str	r3, [r4, #60]	; 0x3c
        svf->cH = 1.0f;
240125c0:	6322      	str	r2, [r4, #48]	; 0x30
        svf->cL = -1.0f;
240125c2:	63a3      	str	r3, [r4, #56]	; 0x38
240125c4:	e7df      	b.n	24012586 <tSVF_init+0xae>
        svf->cB = 1.0f;
240125c6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
        svf->cL = 0.0f;
240125ca:	2200      	movs	r2, #0
        svf->cB = 1.0f;
240125cc:	6363      	str	r3, [r4, #52]	; 0x34
        svf->cL = 0.0f;
240125ce:	63a2      	str	r2, [r4, #56]	; 0x38
240125d0:	e7d9      	b.n	24012586 <tSVF_init+0xae>
240125d2:	bf00      	nop
240125d4:	40490fdb 	.word	0x40490fdb
240125d8:	bf800000 	.word	0xbf800000
240125dc:	47afc800 	.word	0x47afc800
240125e0:	2401cb14 	.word	0x2401cb14
240125e4:	24020b14 	.word	0x24020b14

240125e8 <tSVF_initToPool>:
{
240125e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
240125ea:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
240125ee:	6815      	ldr	r5, [r2, #0]
{
240125f0:	4606      	mov	r6, r0
240125f2:	460f      	mov	r7, r1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
240125f4:	2050      	movs	r0, #80	; 0x50
240125f6:	4629      	mov	r1, r5
{
240125f8:	eef0 8a40 	vmov.f32	s17, s0
240125fc:	eeb0 8a60 	vmov.f32	s16, s1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
24012600:	f002 fe1c 	bl	2401523c <mpool_alloc>
24012604:	6030      	str	r0, [r6, #0]
24012606:	4604      	mov	r4, r0
    svf->mempool = m;
24012608:	6005      	str	r5, [r0, #0]
    LEAF* leaf = svf->mempool->leaf;
2401260a:	686e      	ldr	r6, [r5, #4]
    svf->ic1eq = 0;
2401260c:	2500      	movs	r5, #0
    svf->g = tanf(PI * freq * svf->invSampleRate);
2401260e:	ed9f 0a35 	vldr	s0, [pc, #212]	; 240126e4 <tSVF_initToPool+0xfc>
    svf->sampleRate = leaf->sampleRate;
24012612:	6833      	ldr	r3, [r6, #0]
    svf->g = tanf(PI * freq * svf->invSampleRate);
24012614:	ee28 0a80 	vmul.f32	s0, s17, s0
    svf->sampleRate = leaf->sampleRate;
24012618:	6403      	str	r3, [r0, #64]	; 0x40
    svf->invSampleRate = leaf->invSampleRate;
2401261a:	edd6 7a01 	vldr	s15, [r6, #4]
    svf->type = type;
2401261e:	7107      	strb	r7, [r0, #4]
    svf->g = tanf(PI * freq * svf->invSampleRate);
24012620:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->invSampleRate = leaf->invSampleRate;
24012624:	edc0 7a11 	vstr	s15, [r0, #68]	; 0x44
    svf->ic1eq = 0;
24012628:	6145      	str	r5, [r0, #20]
    svf->ic2eq = 0;
2401262a:	6185      	str	r5, [r0, #24]
    svf->Q = Q;
2401262c:	ed80 8a03 	vstr	s16, [r0, #12]
    svf->cutoff = freq;
24012630:	edc0 8a02 	vstr	s17, [r0, #8]
    svf->g = tanf(PI * freq * svf->invSampleRate);
24012634:	f007 fe06 	bl	2401a244 <tanf>
    svf->k = 1.0f/Q;
24012638:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    svf->g = tanf(PI * freq * svf->invSampleRate);
2401263c:	ed84 0a07 	vstr	s0, [r4, #28]
    if (type == SVFTypeLowpass)
24012640:	2f01      	cmp	r7, #1
    svf->cH = 0.0f;
24012642:	6325      	str	r5, [r4, #48]	; 0x30
    svf->k = 1.0f/Q;
24012644:	ee87 7a88 	vdiv.f32	s14, s15, s16
    svf->cL = 1.0f;
24012648:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
    svf->cB = 0.0f;
2401264c:	6365      	str	r5, [r4, #52]	; 0x34
    svf->cBK = 0.0f;
2401264e:	63e5      	str	r5, [r4, #60]	; 0x3c
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24012650:	eef0 6a67 	vmov.f32	s13, s15
24012654:	ee30 6a07 	vadd.f32	s12, s0, s14
    svf->k = 1.0f/Q;
24012658:	ed84 7a08 	vstr	s14, [r4, #32]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
2401265c:	eee0 6a06 	vfma.f32	s13, s0, s12
24012660:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    svf->a2 = svf->g*svf->a1;
24012664:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24012668:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
2401266c:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g*svf->a1;
24012670:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    svf->a3 = svf->g*svf->a2;
24012674:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    if (type == SVFTypeLowpass)
24012678:	d00b      	beq.n	24012692 <tSVF_initToPool+0xaa>
    else if (type == SVFTypeBandpass)
2401267a:	2f04      	cmp	r7, #4
2401267c:	d809      	bhi.n	24012692 <tSVF_initToPool+0xaa>
2401267e:	e8df f007 	tbb	[pc, r7]
24012682:	0821      	.short	0x0821
24012684:	2803      	.short	0x2803
24012686:	18          	.byte	0x18
24012687:	00          	.byte	0x00
        svf->cB = 1.0f;
24012688:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
        svf->cL = 0.0f;
2401268c:	2200      	movs	r2, #0
        svf->cB = 1.0f;
2401268e:	6363      	str	r3, [r4, #52]	; 0x34
        svf->cL = 0.0f;
24012690:	63a2      	str	r2, [r4, #56]	; 0x38
    if (leaf->sampleRate > 90000)
24012692:	ed96 7a00 	vldr	s14, [r6]
24012696:	eddf 7a14 	vldr	s15, [pc, #80]	; 240126e8 <tSVF_initToPool+0x100>
    	svf->table = __filterTanhTable_48000;
2401269a:	4a14      	ldr	r2, [pc, #80]	; (240126ec <tSVF_initToPool+0x104>)
2401269c:	eeb4 7ae7 	vcmpe.f32	s14, s15
240126a0:	4b13      	ldr	r3, [pc, #76]	; (240126f0 <tSVF_initToPool+0x108>)
240126a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240126a6:	bfd8      	it	le
240126a8:	4613      	movle	r3, r2
240126aa:	64e3      	str	r3, [r4, #76]	; 0x4c
    }
}
240126ac:	ecbd 8b02 	vpop	{d8}
240126b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        svf->cH = 1.0f;
240126b2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
240126b6:	4a0f      	ldr	r2, [pc, #60]	; (240126f4 <tSVF_initToPool+0x10c>)
        svf->cL = -2.0f;
240126b8:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
        svf->cH = 1.0f;
240126bc:	6321      	str	r1, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
240126be:	63e2      	str	r2, [r4, #60]	; 0x3c
        svf->cL = -2.0f;
240126c0:	63a3      	str	r3, [r4, #56]	; 0x38
240126c2:	e7e6      	b.n	24012692 <tSVF_initToPool+0xaa>
        svf->cBK = -1.0f;
240126c4:	4b0b      	ldr	r3, [pc, #44]	; (240126f4 <tSVF_initToPool+0x10c>)
        svf->cH = 1.0f;
240126c6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
240126ca:	63e3      	str	r3, [r4, #60]	; 0x3c
        svf->cH = 1.0f;
240126cc:	6322      	str	r2, [r4, #48]	; 0x30
        svf->cL = -1.0f;
240126ce:	63a3      	str	r3, [r4, #56]	; 0x38
240126d0:	e7df      	b.n	24012692 <tSVF_initToPool+0xaa>
        svf->cH = 1.0f;
240126d2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
240126d6:	4a07      	ldr	r2, [pc, #28]	; (240126f4 <tSVF_initToPool+0x10c>)
        svf->cL = 0.0f;
240126d8:	2300      	movs	r3, #0
        svf->cH = 1.0f;
240126da:	6321      	str	r1, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
240126dc:	63e2      	str	r2, [r4, #60]	; 0x3c
        svf->cL = 0.0f;
240126de:	63a3      	str	r3, [r4, #56]	; 0x38
240126e0:	e7d7      	b.n	24012692 <tSVF_initToPool+0xaa>
240126e2:	bf00      	nop
240126e4:	40490fdb 	.word	0x40490fdb
240126e8:	47afc800 	.word	0x47afc800
240126ec:	2401cb14 	.word	0x2401cb14
240126f0:	24020b14 	.word	0x24020b14
240126f4:	bf800000 	.word	0xbf800000

240126f8 <tSVF_free>:

void    tSVF_free   (tSVF* const svff)
{
    _tSVF* svf = *svff;
240126f8:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)svf, svf->mempool);
240126fa:	6801      	ldr	r1, [r0, #0]
240126fc:	f002 be60 	b.w	240153c0 <mpool_free>

24012700 <tSVF_tick>:
}

Lfloat   tSVF_tick(tSVF* const svff, Lfloat v0)
{
    _tSVF* svf = *svff;
24012700:	6803      	ldr	r3, [r0, #0]
#endif
    Lfloat v1,v2,v3;
    v3 = v0 - svf->ic2eq;
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
24012702:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
    v3 = v0 - svf->ic2eq;
24012706:	edd3 6a06 	vldr	s13, [r3, #24]
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
2401270a:	ed93 6a05 	vldr	s12, [r3, #20]
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
2401270e:	eef0 5a66 	vmov.f32	s11, s13
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
24012712:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
    v3 = v0 - svf->ic2eq;
24012716:	ee30 4a66 	vsub.f32	s8, s0, s13
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
2401271a:	ed93 3a0b 	vldr	s6, [r3, #44]	; 0x2c
2401271e:	edd3 3a0f 	vldr	s7, [r3, #60]	; 0x3c
24012722:	eee6 5a27 	vfma.f32	s11, s12, s15
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
24012726:	edd3 2a09 	vldr	s5, [r3, #36]	; 0x24
2401272a:	ee67 7a84 	vmul.f32	s15, s15, s8
2401272e:	ed93 2a08 	vldr	s4, [r3, #32]
24012732:	ed93 5a0d 	vldr	s10, [r3, #52]	; 0x34
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
    
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
24012736:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
2401273a:	eea2 5a23 	vfma.f32	s10, s4, s7
2401273e:	edd3 3a0c 	vldr	s7, [r3, #48]	; 0x30
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
24012742:	eee2 7a86 	vfma.f32	s15, s5, s12
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
24012746:	eee3 5a04 	vfma.f32	s11, s6, s8
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
2401274a:	ee97 6aa4 	vfnms.f32	s12, s15, s9
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
2401274e:	ee25 7a87 	vmul.f32	s14, s11, s14
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
24012752:	eed5 6aa4 	vfnms.f32	s13, s11, s9
24012756:	eea7 7a85 	vfma.f32	s14, s15, s10
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
2401275a:	ed83 6a05 	vstr	s12, [r3, #20]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
2401275e:	edc3 6a06 	vstr	s13, [r3, #24]
}
24012762:	eea3 7a80 	vfma.f32	s14, s7, s0
24012766:	eeb0 0a47 	vmov.f32	s0, s14
2401276a:	4770      	bx	lr

2401276c <tSVF_setFreq>:

void     tSVF_setFreq(tSVF* const svff, Lfloat freq)
{
2401276c:	b510      	push	{r4, lr}
    _tSVF* svf = *svff;
2401276e:	6804      	ldr	r4, [r0, #0]
    
    svf->cutoff = LEAF_clip(0.0f, freq, svf->sampleRate * 0.5f);
24012770:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
24012774:	eef0 0a40 	vmov.f32	s1, s0
    svf->cutoff = LEAF_clip(0.0f, freq, svf->sampleRate * 0.5f);
24012778:	ed9f 0a16 	vldr	s0, [pc, #88]	; 240127d4 <tSVF_setFreq+0x68>
2401277c:	ed94 1a10 	vldr	s2, [r4, #64]	; 0x40
24012780:	ee21 1a27 	vmul.f32	s2, s2, s15
24012784:	f002 fa58 	bl	24014c38 <LEAF_clip>
    svf->g = tanf(PI * svf->cutoff * svf->invSampleRate);
24012788:	ed9f 7a13 	vldr	s14, [pc, #76]	; 240127d8 <tSVF_setFreq+0x6c>
2401278c:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
    svf->cutoff = LEAF_clip(0.0f, freq, svf->sampleRate * 0.5f);
24012790:	ed84 0a02 	vstr	s0, [r4, #8]
    svf->g = tanf(PI * svf->cutoff * svf->invSampleRate);
24012794:	ee67 7a87 	vmul.f32	s15, s15, s14
24012798:	ee27 0a80 	vmul.f32	s0, s15, s0
2401279c:	f007 fd52 	bl	2401a244 <tanf>
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
240127a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240127a4:	edd4 7a08 	vldr	s15, [r4, #32]
    svf->g = tanf(PI * svf->cutoff * svf->invSampleRate);
240127a8:	ed84 0a07 	vstr	s0, [r4, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
240127ac:	ee70 7a27 	vadd.f32	s15, s0, s15
240127b0:	eeb0 6a66 	vmov.f32	s12, s13
240127b4:	eea0 6a27 	vfma.f32	s12, s0, s15
240127b8:	ee86 7a86 	vdiv.f32	s14, s13, s12
    svf->a2 = svf->g * svf->a1;
240127bc:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
240127c0:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
240127c4:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g * svf->a1;
240127c8:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    svf->a3 = svf->g * svf->a2;
240127cc:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
}
240127d0:	bd10      	pop	{r4, pc}
240127d2:	bf00      	nop
240127d4:	00000000 	.word	0x00000000
240127d8:	40490fdb 	.word	0x40490fdb

240127dc <tSVF_setFreqFast>:

void    tSVF_setFreqFast     (tSVF* const vf, Lfloat cutoff)
{
	_tSVF* svf = *vf;
	svf->cutoffMIDI = cutoff;
	cutoff *= 30.567164179104478f; //get 0-134 midi range to 0-4095
240127dc:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 2401285c <tSVF_setFreqFast+0x80>
240127e0:	f640 7cfe 	movw	ip, #4094	; 0xffe
	_tSVF* svf = *vf;
240127e4:	6803      	ldr	r3, [r0, #0]
    {
    	intVer = 0;
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;

    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
240127e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	cutoff *= 30.567164179104478f; //get 0-134 midi range to 0-4095
240127ea:	ee20 7a07 	vmul.f32	s14, s0, s14
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
240127ee:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
	svf->cutoffMIDI = cutoff;
240127f0:	ed83 0a04 	vstr	s0, [r3, #16]
    int32_t intVer = (int32_t)cutoff;
240127f4:	eefd 7ac7 	vcvt.s32.f32	s15, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
240127f8:	ed93 6a08 	vldr	s12, [r3, #32]
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
240127fc:	ee76 5ac7 	vsub.f32	s11, s13, s14
    int32_t intVer = (int32_t)cutoff;
24012800:	ee17 2a90 	vmov	r2, s15
24012804:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
24012808:	4562      	cmp	r2, ip
2401280a:	bfa8      	it	ge
2401280c:	4662      	movge	r2, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
2401280e:	ee07 2a90 	vmov	s15, r2
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
24012812:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24012816:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
2401281a:	ed92 4a01 	vldr	s8, [r2, #4]
2401281e:	edd2 4a00 	vldr	s9, [r2]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24012822:	ee77 7a45 	vsub.f32	s15, s14, s10
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
24012826:	ee35 7a85 	vadd.f32	s14, s11, s10
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
2401282a:	eef0 5a66 	vmov.f32	s11, s13
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
2401282e:	ee67 7a84 	vmul.f32	s15, s15, s8
24012832:	eee4 7a87 	vfma.f32	s15, s9, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24012836:	ee37 7a86 	vadd.f32	s14, s15, s12
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
2401283a:	edc3 7a07 	vstr	s15, [r3, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
2401283e:	eee7 5a87 	vfma.f32	s11, s15, s14
24012842:	ee86 6aa5 	vdiv.f32	s12, s13, s11
    svf->a2 = svf->g * svf->a1;
24012846:	ee27 7a86 	vmul.f32	s14, s15, s12
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
2401284a:	ed83 6a09 	vstr	s12, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
2401284e:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
24012852:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
    svf->a3 = svf->g * svf->a2;
24012856:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
2401285a:	4770      	bx	lr
2401285c:	41f4898d 	.word	0x41f4898d

24012860 <tSVF_setQ>:

void     tSVF_setQ(tSVF* const svff, Lfloat Q)
{
    _tSVF* svf = *svff;
    svf->Q = Q;
    svf->k = 1.0f/Q;
24012860:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    _tSVF* svf = *svff;
24012864:	6803      	ldr	r3, [r0, #0]
    
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24012866:	edd3 7a07 	vldr	s15, [r3, #28]
    svf->k = 1.0f/Q;
2401286a:	eec7 6a00 	vdiv.f32	s13, s14, s0
    svf->Q = Q;
2401286e:	ed83 0a03 	vstr	s0, [r3, #12]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24012872:	eeb0 6a47 	vmov.f32	s12, s14
24012876:	ee76 5aa7 	vadd.f32	s11, s13, s15
    svf->k = 1.0f/Q;
2401287a:	edc3 6a08 	vstr	s13, [r3, #32]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
2401287e:	eea7 6aa5 	vfma.f32	s12, s15, s11
24012882:	eec7 6a06 	vdiv.f32	s13, s14, s12
    svf->a2 = svf->g * svf->a1;
24012886:	ee27 7aa6 	vmul.f32	s14, s15, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
2401288a:	edc3 6a09 	vstr	s13, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
2401288e:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
24012892:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
    svf->a3 = svf->g * svf->a2;
24012896:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
2401289a:	4770      	bx	lr

2401289c <tSVF_setSampleRate>:

void    tSVF_setSampleRate  (tSVF* const svff, Lfloat sr)
{
    _tSVF* svf = *svff;
    svf->sampleRate = sr;
    svf->invSampleRate = 1.0f/svf->sampleRate;
2401289c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    _tSVF* svf = *svff;
240128a0:	6803      	ldr	r3, [r0, #0]
    svf->sampleRate = sr;
240128a2:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
    svf->invSampleRate = 1.0f/svf->sampleRate;
240128a6:	eec7 7a00 	vdiv.f32	s15, s14, s0
240128aa:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
240128ae:	4770      	bx	lr

240128b0 <tHighpass_init>:

#endif // LEAF_INCLUDE_FILTERTAN_TABLE

/* Highpass */
void tHighpass_init(tHighpass* const ft, Lfloat freq, LEAF* const leaf)
{
240128b0:	b538      	push	{r3, r4, r5, lr}
240128b2:	ed2d 8b02 	vpush	{d8}
    tHighpass_initToPool(ft, freq, &leaf->mempool);
}

void tHighpass_initToPool    (tHighpass* const ft, Lfloat freq, tMempool* const mp)
{
    _tMempool* m = *mp;
240128b6:	698c      	ldr	r4, [r1, #24]
{
240128b8:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
240128ba:	2018      	movs	r0, #24
{
240128bc:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
240128c0:	4621      	mov	r1, r4
240128c2:	f002 fd1f 	bl	24015304 <mpool_calloc>
240128c6:	6028      	str	r0, [r5, #0]
    f->mempool = m;
240128c8:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
240128ca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
240128ce:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
240128d0:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
240128d2:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
240128d6:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
240128d8:	eee8 7a47 	vfms.f32	s15, s16, s14
    f->xs = 0.0f;
240128dc:	6043      	str	r3, [r0, #4]
    
    f->frequency = freq;
240128de:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
240128e2:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
240128e6:	edc0 7a03 	vstr	s15, [r0, #12]
}
240128ea:	ecbd 8b02 	vpop	{d8}
240128ee:	bd38      	pop	{r3, r4, r5, pc}

240128f0 <tHighpass_initToPool>:
{
240128f0:	b538      	push	{r3, r4, r5, lr}
240128f2:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
240128f6:	680c      	ldr	r4, [r1, #0]
{
240128f8:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
240128fa:	2018      	movs	r0, #24
{
240128fc:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
24012900:	4621      	mov	r1, r4
24012902:	f002 fcff 	bl	24015304 <mpool_calloc>
24012906:	6028      	str	r0, [r5, #0]
    f->mempool = m;
24012908:	6004      	str	r4, [r0, #0]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
2401290a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
2401290e:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
24012910:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24012912:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
24012916:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
24012918:	eee7 7a48 	vfms.f32	s15, s14, s16
    f->xs = 0.0f;
2401291c:	6043      	str	r3, [r0, #4]
    f->frequency = freq;
2401291e:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24012922:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
24012926:	edc0 7a03 	vstr	s15, [r0, #12]
}
2401292a:	ecbd 8b02 	vpop	{d8}
2401292e:	bd38      	pop	{r3, r4, r5, pc}

24012930 <tHighpass_free>:

void tHighpass_free  (tHighpass* const ft)
{
    _tHighpass* f = *ft;
24012930:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
24012932:	6801      	ldr	r1, [r0, #0]
24012934:	f002 bd44 	b.w	240153c0 <mpool_free>

24012938 <tHighpass_setFreq>:
}

void tHighpass_setFreq(tHighpass* const ft, Lfloat freq)
{
    _tHighpass* f = *ft;
24012938:	6803      	ldr	r3, [r0, #0]
    
    f->frequency = freq;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
2401293a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2401293e:	ed93 7a05 	vldr	s14, [r3, #20]
    f->frequency = freq;
24012942:	ed83 0a04 	vstr	s0, [r3, #16]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
24012946:	eee7 7a40 	vfms.f32	s15, s14, s0
2401294a:	edc3 7a03 	vstr	s15, [r3, #12]
}
2401294e:	4770      	bx	lr

24012950 <tHighpass_tick>:
}

// From JOS DC Blocker
Lfloat tHighpass_tick(tHighpass* const ft, Lfloat x)
{
    _tHighpass* f = *ft;
24012950:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
24012952:	edd3 7a01 	vldr	s15, [r3, #4]
24012956:	ed93 7a02 	vldr	s14, [r3, #8]
2401295a:	edd3 6a03 	vldr	s13, [r3, #12]
    f->xs = x;
2401295e:	ed83 0a01 	vstr	s0, [r3, #4]
24012962:	eed6 7a87 	vfnms.f32	s15, s13, s14
    f->ys = x - f->xs + f->R * f->ys;
24012966:	ee30 0a27 	vadd.f32	s0, s0, s15
2401296a:	ed83 0a02 	vstr	s0, [r3, #8]
    return f->ys;
}
2401296e:	4770      	bx	lr

24012970 <tHighpass_setSampleRate>:

void tHighpass_setSampleRate(tHighpass* const ft, Lfloat sr)
{
    _tHighpass* f = *ft;
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
24012970:	eddf 6a07 	vldr	s13, [pc, #28]	; 24012990 <tHighpass_setSampleRate+0x20>
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
24012974:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tHighpass* f = *ft;
24012978:	6803      	ldr	r3, [r0, #0]
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
2401297a:	ee86 7a80 	vdiv.f32	s14, s13, s0
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
2401297e:	edd3 6a04 	vldr	s13, [r3, #16]
24012982:	eee7 7a66 	vfms.f32	s15, s14, s13
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
24012986:	ed83 7a05 	vstr	s14, [r3, #20]
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
2401298a:	edc3 7a03 	vstr	s15, [r3, #12]
}
2401298e:	4770      	bx	lr
24012990:	40c90fdb 	.word	0x40c90fdb

24012994 <tVZFilter_tickEfficient>:
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

Lfloat   tVZFilter_tickEfficient             (tVZFilter* const vf, Lfloat in)
{
    _tVZFilter* f = *vf;
24012994:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
24012996:	edd3 6a03 	vldr	s13, [r3, #12]
2401299a:	ed93 7a02 	vldr	s14, [r3, #8]
2401299e:	ee70 7a66 	vsub.f32	s15, s0, s13
240129a2:	ed93 4a10 	vldr	s8, [r3, #64]	; 0x40
240129a6:	ed93 5a06 	vldr	s10, [r3, #24]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
240129aa:	ed93 6a04 	vldr	s12, [r3, #16]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
240129ae:	eee4 7a47 	vfms.f32	s15, s8, s14
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
240129b2:	ed93 0a09 	vldr	s0, [r3, #36]	; 0x24
240129b6:	edd3 4a08 	vldr	s9, [r3, #32]
240129ba:	edd3 5a07 	vldr	s11, [r3, #28]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
240129be:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
240129c2:	eea6 7a27 	vfma.f32	s14, s12, s15
    return f->cL*yL + f->cB*yB + f->cH*yH;
240129c6:	ee27 0a80 	vmul.f32	s0, s15, s0
    yL = v2 + f->s2;
240129ca:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
240129ce:	eeb0 5a47 	vmov.f32	s10, s14
240129d2:	eea4 0a87 	vfma.f32	s0, s9, s14
240129d6:	eea6 5a27 	vfma.f32	s10, s12, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
240129da:	eef0 7a66 	vmov.f32	s15, s13
}
240129de:	eea5 0aa6 	vfma.f32	s0, s11, s13
    f->s2 = v2 + yL; // state update in 2nd integrator
240129e2:	eee6 7a07 	vfma.f32	s15, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
240129e6:	ed83 5a02 	vstr	s10, [r3, #8]
    f->s2 = v2 + yL; // state update in 2nd integrator
240129ea:	edc3 7a03 	vstr	s15, [r3, #12]
}
240129ee:	4770      	bx	lr

240129f0 <tVZFilter_calcCoeffs>:

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
240129f0:	b510      	push	{r4, lr}
    _tVZFilter* f = *vf;
240129f2:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
240129f4:	eddf 7a98 	vldr	s15, [pc, #608]	; 24012c58 <tVZFilter_calcCoeffs+0x268>
{
240129f8:	ed2d 8b02 	vpush	{d8}
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
240129fc:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
24012a00:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
24012a04:	ee68 8a87 	vmul.f32	s17, s17, s14
24012a08:	ee68 8aa7 	vmul.f32	s17, s17, s15
24012a0c:	eeb0 0a68 	vmov.f32	s0, s17
24012a10:	f007 fc18 	bl	2401a244 <tanf>
    
    switch( f->type )
24012a14:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24012a16:	eeb0 8a40 	vmov.f32	s16, s0
24012a1a:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
24012a1e:	2b0a      	cmp	r3, #10
24012a20:	f200 8117 	bhi.w	24012c52 <tVZFilter_calcCoeffs+0x262>
24012a24:	e8df f013 	tbh	[pc, r3, lsl #1]
24012a28:	002f0026 	.word	0x002f0026
24012a2c:	00410038 	.word	0x00410038
24012a30:	0056004d 	.word	0x0056004d
24012a34:	00a1008b 	.word	0x00a1008b
24012a38:	010a00b7 	.word	0x010a00b7
24012a3c:	000b      	.short	0x000b
        }
            break;
        case Allpass:
        {
            //f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B); if using bandwidth instead of Q
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
24012a3e:	edd4 7a05 	vldr	s15, [r4, #20]
24012a42:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24012a46:	eeb1 7a67 	vneg.f32	s14, s15
24012a4a:	61e3      	str	r3, [r4, #28]
24012a4c:	6263      	str	r3, [r4, #36]	; 0x24
24012a4e:	ed84 7a08 	vstr	s14, [r4, #32]
        }
        break;
            
    }
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24012a52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
24012a56:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24012a5a:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
24012a5e:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24012a62:	eee7 6a88 	vfma.f32	s13, s15, s16
24012a66:	eec7 7a26 	vdiv.f32	s15, s14, s13
24012a6a:	edc4 7a06 	vstr	s15, [r4, #24]
}
24012a6e:	ecbd 8b02 	vpop	{d8}
24012a72:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
24012a74:	2300      	movs	r3, #0
24012a76:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24012a7a:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
24012a7e:	61e3      	str	r3, [r4, #28]
24012a80:	6223      	str	r3, [r4, #32]
24012a82:	6262      	str	r2, [r4, #36]	; 0x24
            break;
24012a84:	e7e5      	b.n	24012a52 <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
24012a86:	2300      	movs	r3, #0
24012a88:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24012a8c:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
24012a90:	6223      	str	r3, [r4, #32]
24012a92:	6263      	str	r3, [r4, #36]	; 0x24
24012a94:	61e2      	str	r2, [r4, #28]
            break;
24012a96:	e7dc      	b.n	24012a52 <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
24012a98:	2300      	movs	r3, #0
24012a9a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24012a9e:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
24012aa2:	61e3      	str	r3, [r4, #28]
24012aa4:	6263      	str	r3, [r4, #36]	; 0x24
24012aa6:	6222      	str	r2, [r4, #32]
            break;
24012aa8:	e7d3      	b.n	24012a52 <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24012aaa:	edd4 7a05 	vldr	s15, [r4, #20]
24012aae:	2300      	movs	r3, #0
24012ab0:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
24012ab4:	61e3      	str	r3, [r4, #28]
24012ab6:	ee27 7a27 	vmul.f32	s14, s14, s15
24012aba:	6263      	str	r3, [r4, #36]	; 0x24
24012abc:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
24012ac0:	e7c7      	b.n	24012a52 <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
24012ac2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24012ac6:	2200      	movs	r2, #0
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24012ac8:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
24012acc:	6222      	str	r2, [r4, #32]
24012ace:	61e3      	str	r3, [r4, #28]
24012ad0:	6263      	str	r3, [r4, #36]	; 0x24
            break;
24012ad2:	e7be      	b.n	24012a52 <tVZFilter_calcCoeffs+0x62>
            Lfloat fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
24012ad4:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
24012ad8:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
24012adc:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
24012ae0:	ee60 0aa7 	vmul.f32	s1, s1, s15
24012ae4:	f007 f8fc 	bl	24019ce0 <powf>
            Lfloat wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
24012ae8:	ee28 0a80 	vmul.f32	s0, s17, s0
24012aec:	f007 fbaa 	bl	2401a244 <tanf>
            Lfloat r  = f->g/wl;
24012af0:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24012af4:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
24012af8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24012afc:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
24012b00:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24012b04:	ed84 7a07 	vstr	s14, [r4, #28]
24012b08:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
24012b0c:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24012b10:	eea7 7aa7 	vfma.f32	s14, s15, s15
24012b14:	eef0 6a47 	vmov.f32	s13, s14
24012b18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24012b1c:	ee77 7a45 	vsub.f32	s15, s14, s10
24012b20:	ee67 7aa5 	vmul.f32	s15, s15, s11
24012b24:	ee87 7a86 	vdiv.f32	s14, s15, s12
24012b28:	eef1 7ac7 	vsqrt.f32	s15, s14
24012b2c:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24012b30:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24012b34:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24012b38:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
24012b3c:	e789      	b.n	24012a52 <tVZFilter_calcCoeffs+0x62>
            Lfloat A = sqrtf(f->G);
24012b3e:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24012b42:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
24012b46:	edd4 7a05 	vldr	s15, [r4, #20]
24012b4a:	eef1 6ac7 	vsqrt.f32	s13, s14
24012b4e:	ed84 7a07 	vstr	s14, [r4, #28]
24012b52:	6263      	str	r3, [r4, #36]	; 0x24
24012b54:	ee27 6a27 	vmul.f32	s12, s14, s15
24012b58:	ed84 6a08 	vstr	s12, [r4, #32]
24012b5c:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24012b60:	ee80 8a07 	vdiv.f32	s16, s0, s14
24012b64:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
24012b68:	e773      	b.n	24012a52 <tVZFilter_calcCoeffs+0x62>
            Lfloat A = sqrtf(f->G);
24012b6a:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
24012b6e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24012b72:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24012b76:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
24012b7a:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
24012b7e:	61e3      	str	r3, [r4, #28]
24012b80:	ee27 6a27 	vmul.f32	s12, s14, s15
24012b84:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24012b88:	eeb1 7ae6 	vsqrt.f32	s14, s13
24012b8c:	ee20 8a07 	vmul.f32	s16, s0, s14
24012b90:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
24012b94:	e75d      	b.n	24012a52 <tVZFilter_calcCoeffs+0x62>
            Lfloat x  = (2.0f*f->m-1.0f);
24012b96:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
24012b9a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
24012b9e:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24012ba2:	eddf 0a2e 	vldr	s1, [pc, #184]	; 24012c5c <tVZFilter_calcCoeffs+0x26c>
24012ba6:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            Lfloat x  = (2.0f*f->m-1.0f);
24012baa:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24012bae:	eeb0 0a48 	vmov.f32	s0, s16
24012bb2:	eea7 0a67 	vfms.f32	s0, s14, s15
24012bb6:	f002 fb1f 	bl	240151f8 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24012bba:	eddf 0a28 	vldr	s1, [pc, #160]	; 24012c5c <tVZFilter_calcCoeffs+0x26c>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24012bbe:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24012bc2:	eeb0 0a68 	vmov.f32	s0, s17
24012bc6:	f002 fb1b 	bl	24015200 <minimum>
            f->cB = 1.0f-x*x;
24012bca:	eeb0 7a48 	vmov.f32	s14, s16
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24012bce:	edd4 7a05 	vldr	s15, [r4, #20]
24012bd2:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
24012bd6:	eea8 7ae8 	vfms.f32	s14, s17, s17
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24012bda:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
24012bde:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24012be2:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24012be6:	ee76 5a06 	vadd.f32	s11, s12, s12
24012bea:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
24012bee:	ed84 7a08 	vstr	s14, [r4, #32]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24012bf2:	eee6 7a06 	vfma.f32	s15, s12, s12
24012bf6:	eee0 7a00 	vfma.f32	s15, s0, s0
24012bfa:	eee0 7a65 	vfms.f32	s15, s0, s11
24012bfe:	ee86 0aa7 	vdiv.f32	s0, s13, s15
24012c02:	f001 fedf 	bl	240149c4 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
24012c06:	edd4 5a07 	vldr	s11, [r4, #28]
24012c0a:	ed94 6a08 	vldr	s12, [r4, #32]
24012c0e:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
24012c12:	edd4 7a05 	vldr	s15, [r4, #20]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24012c16:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
24012c1a:	ed94 8a04 	vldr	s16, [r4, #16]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24012c1e:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
24012c22:	ee65 5a80 	vmul.f32	s11, s11, s0
24012c26:	ee26 6a00 	vmul.f32	s12, s12, s0
24012c2a:	ee66 6a80 	vmul.f32	s13, s13, s0
24012c2e:	edc4 5a07 	vstr	s11, [r4, #28]
24012c32:	ed84 6a08 	vstr	s12, [r4, #32]
24012c36:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
        break;
24012c3a:	e70a      	b.n	24012a52 <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f;
24012c3c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
24012c40:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
24012c44:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
24012c46:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
24012c4a:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
24012c4e:	6263      	str	r3, [r4, #36]	; 0x24
            break;
24012c50:	e6ff      	b.n	24012a52 <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24012c52:	edd4 7a05 	vldr	s15, [r4, #20]
24012c56:	e6fc      	b.n	24012a52 <tVZFilter_calcCoeffs+0x62>
24012c58:	40490fdb 	.word	0x40490fdb
24012c5c:	00000000 	.word	0x00000000

24012c60 <tVZFilter_initToPool>:
{
24012c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24012c64:	ed2d 8b04 	vpush	{d8-d9}
    _tMempool* m = *mp;
24012c68:	6816      	ldr	r6, [r2, #0]
{
24012c6a:	b082      	sub	sp, #8
24012c6c:	4605      	mov	r5, r0
24012c6e:	460f      	mov	r7, r1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
24012c70:	2054      	movs	r0, #84	; 0x54
24012c72:	4631      	mov	r1, r6
{
24012c74:	eef0 8a60 	vmov.f32	s17, s1
24012c78:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
24012c7c:	f002 fade 	bl	2401523c <mpool_alloc>
24012c80:	6028      	str	r0, [r5, #0]
    f->mempool = m;
24012c82:	6006      	str	r6, [r0, #0]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24012c84:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
    LEAF* leaf = f->mempool->leaf;
24012c88:	6876      	ldr	r6, [r6, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
24012c8a:	4604      	mov	r4, r0
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24012c8c:	ed9f 8a47 	vldr	s16, [pc, #284]	; 24012dac <tVZFilter_initToPool+0x14c>
    f->sampleRate = leaf->sampleRate;
24012c90:	ed96 1a00 	vldr	s2, [r6]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24012c94:	eddd 0a01 	vldr	s1, [sp, #4]
24012c98:	eeb0 0a48 	vmov.f32	s0, s16
    f->sampleRate = leaf->sampleRate;
24012c9c:	ed80 1a11 	vstr	s2, [r0, #68]	; 0x44
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24012ca0:	ee21 1a29 	vmul.f32	s2, s2, s19
    f->invSampleRate = leaf->invSampleRate;
24012ca4:	6873      	ldr	r3, [r6, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24012ca6:	ed9f 9a42 	vldr	s18, [pc, #264]	; 24012db0 <tVZFilter_initToPool+0x150>
    f->invSampleRate = leaf->invSampleRate;
24012caa:	6483      	str	r3, [r0, #72]	; 0x48
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24012cac:	f001 ffc4 	bl	24014c38 <LEAF_clip>
24012cb0:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    f->cutoffMIDI = ftom(f->fc);
24012cb4:	f002 fa3e 	bl	24015134 <ftom>
    f->invG = 1.414213562373095f;
24012cb8:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 24012db4 <tVZFilter_initToPool+0x154>
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24012cbc:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
24012cc0:	ed94 6a12 	vldr	s12, [r4, #72]	; 0x48
    f->R2Plusg = f->R2 + f->g;
24012cc4:	edd4 7a04 	vldr	s15, [r4, #16]
    f->cutoffMIDI = ftom(f->fc);
24012cc8:	ed84 0a13 	vstr	s0, [r4, #76]	; 0x4c
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24012ccc:	ee26 0a86 	vmul.f32	s0, s13, s12
    f->R2Plusg = f->R2 + f->g;
24012cd0:	ee77 7a87 	vadd.f32	s15, s15, s14
    f->G    = INV_SQRT2;
24012cd4:	4b38      	ldr	r3, [pc, #224]	; (24012db8 <tVZFilter_initToPool+0x158>)
    f->invG = 1.414213562373095f;
24012cd6:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
    f->G    = INV_SQRT2;
24012cda:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24012cdc:	ee20 0a09 	vmul.f32	s0, s0, s18
    f->R2   = f->invG;
24012ce0:	ed84 7a05 	vstr	s14, [r4, #20]
    f->R2Plusg = f->R2 + f->g;
24012ce4:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->type = type;
24012ce8:	7127      	strb	r7, [r4, #4]
    f->B    = bandWidth;
24012cea:	edc4 8a0e 	vstr	s17, [r4, #56]	; 0x38
    f->m    = 0.0f;
24012cee:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
    f->Q    = 0.5f;
24012cf2:	edc4 9a0d 	vstr	s19, [r4, #52]	; 0x34
    f->s1    = 0.0f;
24012cf6:	ed84 8a02 	vstr	s16, [r4, #8]
    f->s2   = 0.0f;
24012cfa:	ed84 8a03 	vstr	s16, [r4, #12]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24012cfe:	f007 faa1 	bl	2401a244 <tanf>
}

void   tVZFilter_setBandwidth               (tVZFilter* const vf, Lfloat B)
{
    _tVZFilter* f = *vf;
    f->B = LEAF_clip(0.0f, B, 100.0f);
24012d02:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 24012dbc <tVZFilter_initToPool+0x15c>
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24012d06:	ed84 0a04 	vstr	s0, [r4, #16]
    f->B = LEAF_clip(0.0f, B, 100.0f);
24012d0a:	eef0 0a68 	vmov.f32	s1, s17
24012d0e:	eeb0 0a48 	vmov.f32	s0, s16
    _tVZFilter* f = *vf;
24012d12:	f8d5 8000 	ldr.w	r8, [r5]
    f->B = LEAF_clip(0.0f, B, 100.0f);
24012d16:	f001 ff8f 	bl	24014c38 <LEAF_clip>
24012d1a:	eef0 0a40 	vmov.f32	s1, s0
}

Lfloat tVZFilter_BandwidthToR(tVZFilter* const vf, Lfloat B)
{
    _tVZFilter* f = *vf;
    Lfloat fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
24012d1e:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
24012d22:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    f->B = LEAF_clip(0.0f, B, 100.0f);
24012d26:	edc8 0a0e 	vstr	s1, [r8, #56]	; 0x38
    _tVZFilter* f = *vf;
24012d2a:	682f      	ldr	r7, [r5, #0]
    Lfloat fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
24012d2c:	ee60 0aa7 	vmul.f32	s1, s1, s15
24012d30:	f006 ffd6 	bl	24019ce0 <powf>
    Lfloat gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
24012d34:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
24012d38:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
24012d3c:	ee67 7a87 	vmul.f32	s15, s15, s14
24012d40:	ee67 7a89 	vmul.f32	s15, s15, s18
24012d44:	ee27 0a80 	vmul.f32	s0, s15, s0
24012d48:	f007 fa7c 	bl	2401a244 <tanf>
    Lfloat r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
24012d4c:	ed97 6a04 	vldr	s12, [r7, #16]
    // unwarped: r = pow(2, -B/2) -> approximation for low
    // center-frequencies
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
24012d50:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
24012d54:	4628      	mov	r0, r5
    Lfloat r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
24012d56:	ee80 7a06 	vdiv.f32	s14, s0, s12
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
24012d5a:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
24012d5e:	ee27 7a07 	vmul.f32	s14, s14, s14
24012d62:	ee77 7ac7 	vsub.f32	s15, s15, s14
24012d66:	ee67 7aa7 	vmul.f32	s15, s15, s15
24012d6a:	ee67 7aa6 	vmul.f32	s15, s15, s13
24012d6e:	eec7 6a87 	vdiv.f32	s13, s15, s14
24012d72:	eef1 7ae6 	vsqrt.f32	s15, s13
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
24012d76:	ee77 7aa7 	vadd.f32	s15, s15, s15
24012d7a:	edc8 7a05 	vstr	s15, [r8, #20]
    tVZFilter_calcCoeffs(vf);
24012d7e:	f7ff fe37 	bl	240129f0 <tVZFilter_calcCoeffs>
    tVZFilter_calcCoeffs(vf);
24012d82:	4628      	mov	r0, r5
24012d84:	f7ff fe34 	bl	240129f0 <tVZFilter_calcCoeffs>
    if (leaf->sampleRate > 90000)
24012d88:	ed96 7a00 	vldr	s14, [r6]
24012d8c:	eddf 7a0c 	vldr	s15, [pc, #48]	; 24012dc0 <tVZFilter_initToPool+0x160>
    	f->table = __filterTanhTable_48000;
24012d90:	4a0c      	ldr	r2, [pc, #48]	; (24012dc4 <tVZFilter_initToPool+0x164>)
24012d92:	eeb4 7ae7 	vcmpe.f32	s14, s15
24012d96:	4b0c      	ldr	r3, [pc, #48]	; (24012dc8 <tVZFilter_initToPool+0x168>)
24012d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012d9c:	bfd8      	it	le
24012d9e:	4613      	movle	r3, r2
24012da0:	6523      	str	r3, [r4, #80]	; 0x50
}
24012da2:	b002      	add	sp, #8
24012da4:	ecbd 8b04 	vpop	{d8-d9}
24012da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
24012dac:	00000000 	.word	0x00000000
24012db0:	40490fdb 	.word	0x40490fdb
24012db4:	3fb504f3 	.word	0x3fb504f3
24012db8:	3f3504f3 	.word	0x3f3504f3
24012dbc:	42c80000 	.word	0x42c80000
24012dc0:	47afc800 	.word	0x47afc800
24012dc4:	2401cb14 	.word	0x2401cb14
24012dc8:	24020b14 	.word	0x24020b14

24012dcc <tVZFilter_init>:
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf->mempool);
24012dcc:	3218      	adds	r2, #24
24012dce:	f7ff bf47 	b.w	24012c60 <tVZFilter_initToPool>
24012dd2:	bf00      	nop

24012dd4 <tVZFilter_setFreq>:
{
24012dd4:	b538      	push	{r3, r4, r5, lr}
    _tVZFilter* f = *vf;
24012dd6:	6805      	ldr	r5, [r0, #0]
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24012dd8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
24012ddc:	4604      	mov	r4, r0
24012dde:	eef0 0a40 	vmov.f32	s1, s0
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24012de2:	ed95 1a11 	vldr	s2, [r5, #68]	; 0x44
24012de6:	ed9f 0a06 	vldr	s0, [pc, #24]	; 24012e00 <tVZFilter_setFreq+0x2c>
24012dea:	ee21 1a27 	vmul.f32	s2, s2, s15
24012dee:	f001 ff23 	bl	24014c38 <LEAF_clip>
    tVZFilter_calcCoeffs(vf);
24012df2:	4620      	mov	r0, r4
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24012df4:	ed85 0a0a 	vstr	s0, [r5, #40]	; 0x28
}
24012df8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
24012dfc:	f7ff bdf8 	b.w	240129f0 <tVZFilter_calcCoeffs>
24012e00:	00000000 	.word	0x00000000

24012e04 <tVZFilter_setFreqFast>:
	 cutoff *= 30.567164179104478f;
24012e04:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 240130cc <tVZFilter_setFreqFast+0x2c8>
24012e08:	f640 7cfe 	movw	ip, #4094	; 0xffe
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
24012e0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	 cutoff *= 30.567164179104478f;
24012e10:	ee20 7a07 	vmul.f32	s14, s0, s14
{
24012e14:	b510      	push	{r4, lr}
	    int32_t intVer = (int32_t)cutoff;
24012e16:	eefd 7ac7 	vcvt.s32.f32	s15, s14
	 _tVZFilter* f = *vf;
24012e1a:	6804      	ldr	r4, [r0, #0]
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
24012e1c:	ee76 6ac7 	vsub.f32	s13, s13, s14
	    int32_t intVer = (int32_t)cutoff;
24012e20:	ee17 3a90 	vmov	r3, s15
24012e24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
24012e28:	4563      	cmp	r3, ip
24012e2a:	bfa8      	it	ge
24012e2c:	4663      	movge	r3, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24012e2e:	ee07 3a90 	vmov	s15, r3
{
24012e32:	ed2d 8b02 	vpush	{d8}
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24012e36:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
24012e3a:	6d22      	ldr	r2, [r4, #80]	; 0x50
	 f->cutoffMIDI = cutoff;
24012e3c:	ed84 0a13 	vstr	s0, [r4, #76]	; 0x4c
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
24012e40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    switch( f->type )
24012e44:	7921      	ldrb	r1, [r4, #4]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24012e46:	ee77 7a46 	vsub.f32	s15, s14, s12
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
24012e4a:	ed93 5a01 	vldr	s10, [r3, #4]
24012e4e:	ee36 7a86 	vadd.f32	s14, s13, s12
24012e52:	edd3 5a00 	vldr	s11, [r3]
24012e56:	ee67 7a85 	vmul.f32	s15, s15, s10
24012e5a:	eee5 7a87 	vfma.f32	s15, s11, s14
24012e5e:	edc4 7a04 	vstr	s15, [r4, #16]
    switch( f->type )
24012e62:	290a      	cmp	r1, #10
24012e64:	f200 812f 	bhi.w	240130c6 <tVZFilter_setFreqFast+0x2c2>
24012e68:	e8df f011 	tbh	[pc, r1, lsl #1]
24012e6c:	002f0026 	.word	0x002f0026
24012e70:	00410038 	.word	0x00410038
24012e74:	0056004d 	.word	0x0056004d
24012e78:	00b5009b 	.word	0x00b5009b
24012e7c:	012200cf 	.word	0x012200cf
24012e80:	000b      	.short	0x000b
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
24012e82:	ed94 7a05 	vldr	s14, [r4, #20]
24012e86:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24012e8a:	eef1 6a47 	vneg.f32	s13, s14
24012e8e:	61e3      	str	r3, [r4, #28]
24012e90:	6263      	str	r3, [r4, #36]	; 0x24
24012e92:	edc4 6a08 	vstr	s13, [r4, #32]
    f->R2Plusg = f->R2+f->g;
24012e96:	ee37 0a27 	vadd.f32	s0, s14, s15
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24012e9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
24012e9e:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24012ea2:	eef0 6a47 	vmov.f32	s13, s14
24012ea6:	eee0 6a27 	vfma.f32	s13, s0, s15
24012eaa:	eec7 7a26 	vdiv.f32	s15, s14, s13
24012eae:	edc4 7a06 	vstr	s15, [r4, #24]
}
24012eb2:	ecbd 8b02 	vpop	{d8}
24012eb6:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
24012eb8:	2300      	movs	r3, #0
24012eba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24012ebe:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
24012ec2:	61e3      	str	r3, [r4, #28]
24012ec4:	6223      	str	r3, [r4, #32]
24012ec6:	6262      	str	r2, [r4, #36]	; 0x24
            break;
24012ec8:	e7e5      	b.n	24012e96 <tVZFilter_setFreqFast+0x92>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
24012eca:	2300      	movs	r3, #0
24012ecc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24012ed0:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
24012ed4:	6223      	str	r3, [r4, #32]
24012ed6:	6263      	str	r3, [r4, #36]	; 0x24
24012ed8:	61e2      	str	r2, [r4, #28]
            break;
24012eda:	e7dc      	b.n	24012e96 <tVZFilter_setFreqFast+0x92>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
24012edc:	2300      	movs	r3, #0
24012ede:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24012ee2:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
24012ee6:	61e3      	str	r3, [r4, #28]
24012ee8:	6263      	str	r3, [r4, #36]	; 0x24
24012eea:	6222      	str	r2, [r4, #32]
            break;
24012eec:	e7d3      	b.n	24012e96 <tVZFilter_setFreqFast+0x92>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24012eee:	ed94 7a05 	vldr	s14, [r4, #20]
24012ef2:	2300      	movs	r3, #0
24012ef4:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
24012ef8:	61e3      	str	r3, [r4, #28]
24012efa:	ee66 6a87 	vmul.f32	s13, s13, s14
24012efe:	6263      	str	r3, [r4, #36]	; 0x24
24012f00:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
24012f04:	e7c7      	b.n	24012e96 <tVZFilter_setFreqFast+0x92>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
24012f06:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24012f0a:	2200      	movs	r2, #0
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24012f0c:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
24012f10:	6222      	str	r2, [r4, #32]
24012f12:	61e3      	str	r3, [r4, #28]
24012f14:	6263      	str	r3, [r4, #36]	; 0x24
            break;
24012f16:	e7be      	b.n	24012e96 <tVZFilter_setFreqFast+0x92>
            Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
24012f18:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
24012f1c:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
24012f20:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
24012f24:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24012f28:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
            Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
24012f2c:	ee60 0aa7 	vmul.f32	s1, s1, s15
24012f30:	f001 fdf4 	bl	24014b1c <fastPowf>
            Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
24012f34:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
24012f38:	eddf 7a65 	vldr	s15, [pc, #404]	; 240130d0 <tVZFilter_setFreqFast+0x2cc>
24012f3c:	ee28 8a07 	vmul.f32	s16, s16, s14
24012f40:	ee28 8a27 	vmul.f32	s16, s16, s15
24012f44:	ee28 0a00 	vmul.f32	s0, s16, s0
24012f48:	f001 fd28 	bl	2401499c <fastertanf>
            Lfloat r  = f->g/wl;
24012f4c:	ed94 7a04 	vldr	s14, [r4, #16]
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24012f50:	eeb0 5a68 	vmov.f32	s10, s17
24012f54:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
            Lfloat r  = f->g/wl;
24012f58:	eec7 7a00 	vdiv.f32	s15, s14, s0
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24012f5c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
24012f60:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
24012f64:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24012f68:	eea7 5aa7 	vfma.f32	s10, s15, s15
24012f6c:	ee85 7a27 	vdiv.f32	s14, s10, s15
24012f70:	ee77 7a65 	vsub.f32	s15, s14, s11
24012f74:	ee67 7a86 	vmul.f32	s15, s15, s12
24012f78:	ee87 0aa6 	vdiv.f32	s0, s15, s13
24012f7c:	f001 fd22 	bl	240149c4 <fastsqrtf>
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24012f80:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
    f->R2Plusg = f->R2+f->g;
24012f84:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24012f88:	edc4 8a07 	vstr	s17, [r4, #28]
24012f8c:	edc4 8a09 	vstr	s17, [r4, #36]	; 0x24
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24012f90:	ee30 7a00 	vadd.f32	s14, s0, s0
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24012f94:	ee66 6a87 	vmul.f32	s13, s13, s14
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24012f98:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24012f9c:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
24012fa0:	e779      	b.n	24012e96 <tVZFilter_setFreqFast+0x92>
            Lfloat A = fastsqrtf(f->G);
24012fa2:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
24012fa6:	f001 fd0d 	bl	240149c4 <fastsqrtf>
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
24012faa:	f001 fd0b 	bl	240149c4 <fastsqrtf>
24012fae:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
24012fb2:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
24012fb6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
24012fba:	eec6 7a00 	vdiv.f32	s15, s12, s0
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
24012fbe:	ed94 7a05 	vldr	s14, [r4, #20]
24012fc2:	edc4 6a07 	vstr	s13, [r4, #28]
24012fc6:	6263      	str	r3, [r4, #36]	; 0x24
24012fc8:	ee66 6a87 	vmul.f32	s13, s13, s14
24012fcc:	edc4 6a08 	vstr	s13, [r4, #32]
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
24012fd0:	edc4 7a04 	vstr	s15, [r4, #16]
            break;
24012fd4:	e75f      	b.n	24012e96 <tVZFilter_setFreqFast+0x92>
            Lfloat A = fastsqrtf(f->G);
24012fd6:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
24012fda:	f001 fcf3 	bl	240149c4 <fastsqrtf>
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
24012fde:	f001 fcf1 	bl	240149c4 <fastsqrtf>
24012fe2:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
24012fe6:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
24012fea:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24012fee:	ed94 7a05 	vldr	s14, [r4, #20]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
24012ff2:	ee60 7a06 	vmul.f32	s15, s0, s12
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
24012ff6:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
24012ffa:	ee67 6a26 	vmul.f32	s13, s14, s13
24012ffe:	61e3      	str	r3, [r4, #28]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
24013000:	edc4 7a04 	vstr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
24013004:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
24013008:	e745      	b.n	24012e96 <tVZFilter_setFreqFast+0x92>
            Lfloat x  = (2.0f*f->m-1.0f);
2401300a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
2401300e:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
24013012:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24013016:	eddf 0a2f 	vldr	s1, [pc, #188]	; 240130d4 <tVZFilter_setFreqFast+0x2d0>
2401301a:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            Lfloat x  = (2.0f*f->m-1.0f);
2401301e:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24013022:	eeb0 0a48 	vmov.f32	s0, s16
24013026:	eea7 0a67 	vfms.f32	s0, s14, s15
2401302a:	f002 f8e5 	bl	240151f8 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
2401302e:	eddf 0a29 	vldr	s1, [pc, #164]	; 240130d4 <tVZFilter_setFreqFast+0x2d0>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24013032:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24013036:	eeb0 0a68 	vmov.f32	s0, s17
2401303a:	f002 f8e1 	bl	24015200 <minimum>
            f->cB = 1.0f-x*x;
2401303e:	eeb0 7a48 	vmov.f32	s14, s16
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24013042:	edd4 7a05 	vldr	s15, [r4, #20]
24013046:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
2401304a:	eea8 7ae8 	vfms.f32	s14, s17, s17
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2401304e:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
24013052:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24013056:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2401305a:	ee76 5a06 	vadd.f32	s11, s12, s12
2401305e:	ee38 8a08 	vadd.f32	s16, s16, s16
24013062:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
24013066:	ed84 7a08 	vstr	s14, [r4, #32]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2401306a:	eee6 7a06 	vfma.f32	s15, s12, s12
2401306e:	eee0 7a00 	vfma.f32	s15, s0, s0
24013072:	eee0 7a65 	vfms.f32	s15, s0, s11
24013076:	ee86 0aa7 	vdiv.f32	s0, s13, s15
2401307a:	f001 fca3 	bl	240149c4 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
2401307e:	edd4 5a07 	vldr	s11, [r4, #28]
24013082:	ed94 6a08 	vldr	s12, [r4, #32]
24013086:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
2401308a:	ed94 7a05 	vldr	s14, [r4, #20]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2401308e:	ee28 0a00 	vmul.f32	s0, s16, s0
    f->R2Plusg = f->R2+f->g;
24013092:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL *= s; f->cB *= s; f->cH *= s;
24013096:	ee65 5a80 	vmul.f32	s11, s11, s0
2401309a:	ee26 6a00 	vmul.f32	s12, s12, s0
2401309e:	ee66 6a80 	vmul.f32	s13, s13, s0
240130a2:	edc4 5a07 	vstr	s11, [r4, #28]
240130a6:	ed84 6a08 	vstr	s12, [r4, #32]
240130aa:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
        break;
240130ae:	e6f2      	b.n	24012e96 <tVZFilter_setFreqFast+0x92>
            f->cL = 1.0f;
240130b0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
240130b4:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
            f->cL = 1.0f;
240130b8:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
240130ba:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cB = f->R2;
240130be:	ed84 7a08 	vstr	s14, [r4, #32]
            f->cH = 1.0f;
240130c2:	6263      	str	r3, [r4, #36]	; 0x24
            break;
240130c4:	e6e7      	b.n	24012e96 <tVZFilter_setFreqFast+0x92>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
240130c6:	ed94 7a05 	vldr	s14, [r4, #20]
240130ca:	e6e4      	b.n	24012e96 <tVZFilter_setFreqFast+0x92>
240130cc:	41f4898d 	.word	0x41f4898d
240130d0:	40490fdb 	.word	0x40490fdb
240130d4:	00000000 	.word	0x00000000

240130d8 <tVZFilter_setGain>:
{
240130d8:	b538      	push	{r3, r4, r5, lr}
240130da:	eef0 0a40 	vmov.f32	s1, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
240130de:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 24013108 <tVZFilter_setGain+0x30>
240130e2:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 2401310c <tVZFilter_setGain+0x34>
{
240130e6:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
240130e8:	6805      	ldr	r5, [r0, #0]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
240130ea:	f001 fda5 	bl	24014c38 <LEAF_clip>
    f->invG = 1.0f/f->G;
240130ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
240130f2:	4620      	mov	r0, r4
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
240130f4:	ed85 0a0b 	vstr	s0, [r5, #44]	; 0x2c
    f->invG = 1.0f/f->G;
240130f8:	eec7 7a00 	vdiv.f32	s15, s14, s0
240130fc:	edc5 7a0c 	vstr	s15, [r5, #48]	; 0x30
}
24013100:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
24013104:	f7ff bc74 	b.w	240129f0 <tVZFilter_calcCoeffs>
24013108:	457a0000 	.word	0x457a0000
2401310c:	358637bd 	.word	0x358637bd

24013110 <tVZFilter_setResonance>:
{
24013110:	b538      	push	{r3, r4, r5, lr}
24013112:	eef0 0a40 	vmov.f32	s1, s0
    f->Q = LEAF_clip(0.01f, res, 100.0f);
24013116:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 24013140 <tVZFilter_setResonance+0x30>
2401311a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 24013144 <tVZFilter_setResonance+0x34>
{
2401311e:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
24013120:	6805      	ldr	r5, [r0, #0]
    f->Q = LEAF_clip(0.01f, res, 100.0f);
24013122:	f001 fd89 	bl	24014c38 <LEAF_clip>
    f->R2 = 1.0f / f->Q;
24013126:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
2401312a:	4620      	mov	r0, r4
    f->Q = LEAF_clip(0.01f, res, 100.0f);
2401312c:	ed85 0a0d 	vstr	s0, [r5, #52]	; 0x34
    f->R2 = 1.0f / f->Q;
24013130:	eec7 7a00 	vdiv.f32	s15, s14, s0
24013134:	edc5 7a05 	vstr	s15, [r5, #20]
}
24013138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
2401313c:	f7ff bc58 	b.w	240129f0 <tVZFilter_calcCoeffs>
24013140:	42c80000 	.word	0x42c80000
24013144:	3c23d70a 	.word	0x3c23d70a

24013148 <tVZFilter_setSampleRate>:

void    tVZFilter_setSampleRate  (tVZFilter* const vf, Lfloat sr)
{
    _tVZFilter* f = *vf;
    f->sampleRate = sr;
    f->invSampleRate = 1.0f/f->sampleRate;
24013148:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    if (sr > 90000)
2401314c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 24013174 <tVZFilter_setSampleRate+0x2c>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
24013150:	4909      	ldr	r1, [pc, #36]	; (24013178 <tVZFilter_setSampleRate+0x30>)
24013152:	eeb4 0ac7 	vcmpe.f32	s0, s14
    _tVZFilter* f = *vf;
24013156:	6803      	ldr	r3, [r0, #0]
    f->invSampleRate = 1.0f/f->sampleRate;
24013158:	eec6 7a80 	vdiv.f32	s15, s13, s0
    	f->table = __filterTanhTable_48000;
2401315c:	4a07      	ldr	r2, [pc, #28]	; (2401317c <tVZFilter_setSampleRate+0x34>)
    f->sampleRate = sr;
2401315e:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    	f->table = __filterTanhTable_48000;
24013162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013166:	bfd8      	it	le
24013168:	460a      	movle	r2, r1
2401316a:	651a      	str	r2, [r3, #80]	; 0x50
    f->invSampleRate = 1.0f/f->sampleRate;
2401316c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    }
}
24013170:	4770      	bx	lr
24013172:	bf00      	nop
24013174:	47afc800 	.word	0x47afc800
24013178:	2401cb14 	.word	0x2401cb14
2401317c:	24020b14 	.word	0x24020b14

24013180 <tVZFilterLS_initToPool>:
{
    tVZFilterLS_initToPool(vf, freq, Q, gain, &leaf->mempool);
}

void    tVZFilterLS_initToPool     (tVZFilterLS* const vf, Lfloat freq, Lfloat Q, Lfloat gain, tMempool* const mp)
{
24013180:	b570      	push	{r4, r5, r6, lr}
24013182:	ed2d 8b04 	vpush	{d8-d9}
    _tMempool* m = *mp;
24013186:	680d      	ldr	r5, [r1, #0]
{
24013188:	b082      	sub	sp, #8
2401318a:	4606      	mov	r6, r0
    _tVZFilterLS* f = *vf = (_tVZFilterLS*) mpool_alloc(sizeof(_tVZFilterLS), m);
2401318c:	2048      	movs	r0, #72	; 0x48
2401318e:	4629      	mov	r1, r5
{
24013190:	eef0 8a60 	vmov.f32	s17, s1
24013194:	eeb0 9a41 	vmov.f32	s18, s2
24013198:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilterLS* f = *vf = (_tVZFilterLS*) mpool_alloc(sizeof(_tVZFilterLS), m);
2401319c:	f002 f84e 	bl	2401523c <mpool_alloc>
240131a0:	6030      	str	r0, [r6, #0]
    f->mempool = m;
240131a2:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->sampleRate = leaf->sampleRate;
    f->sampRatio = 48000.0f / f->sampleRate;
    f->invSampleRate = leaf->invSampleRate;
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240131a4:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
    LEAF* leaf = f->mempool->leaf;
240131a8:	686d      	ldr	r5, [r5, #4]
    _tVZFilterLS* f = *vf = (_tVZFilterLS*) mpool_alloc(sizeof(_tVZFilterLS), m);
240131aa:	4604      	mov	r4, r0
    f->sampRatio = 48000.0f / f->sampleRate;
240131ac:	eddf 6a37 	vldr	s13, [pc, #220]	; 2401328c <tVZFilterLS_initToPool+0x10c>
    f->cutoffMIDI = ftom(f->fc);
    f->Q    = Q;
    f->R2 =    1.0f/Q;
240131b0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    f->sampleRate = leaf->sampleRate;
240131b4:	edd5 7a00 	vldr	s15, [r5]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240131b8:	eddf 9a35 	vldr	s19, [pc, #212]	; 24013290 <tVZFilterLS_initToPool+0x110>
    f->sampRatio = 48000.0f / f->sampleRate;
240131bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    f->sampleRate = leaf->sampleRate;
240131c0:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240131c4:	eddd 0a01 	vldr	s1, [sp, #4]
240131c8:	ee27 1a81 	vmul.f32	s2, s15, s2
240131cc:	eeb0 0a69 	vmov.f32	s0, s19
    f->sampRatio = 48000.0f / f->sampleRate;
240131d0:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
    f->invSampleRate = leaf->invSampleRate;
240131d4:	686b      	ldr	r3, [r5, #4]
240131d6:	6303      	str	r3, [r0, #48]	; 0x30
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240131d8:	f001 fd2e 	bl	24014c38 <LEAF_clip>
240131dc:	ed84 0a06 	vstr	s0, [r4, #24]
    f->cutoffMIDI = ftom(f->fc);
240131e0:	f001 ffa8 	bl	24015134 <ftom>
    f->R2 =    1.0f/Q;
240131e4:	ee88 7a28 	vdiv.f32	s14, s16, s17
    f->s1    = 0.0f;
    f->s2   = 0.0f;
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
240131e8:	ed94 6a0c 	vldr	s12, [r4, #48]	; 0x30
240131ec:	edd4 7a06 	vldr	s15, [r4, #24]
240131f0:	eddf 6a28 	vldr	s13, [pc, #160]	; 24013294 <tVZFilterLS_initToPool+0x114>
    f->cutoffMIDI = ftom(f->fc);
240131f4:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
240131f8:	ee67 7a86 	vmul.f32	s15, s15, s12
    f->Q    = Q;
240131fc:	edc4 8a08 	vstr	s17, [r4, #32]
    f->s1    = 0.0f;
24013200:	edc4 9a01 	vstr	s19, [r4, #4]
    f->s2   = 0.0f;
24013204:	edc4 9a02 	vstr	s19, [r4, #8]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
24013208:	ee27 0aa6 	vmul.f32	s0, s15, s13
    f->R2 =    1.0f/Q;
2401320c:	ed84 7a04 	vstr	s14, [r4, #16]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
24013210:	f007 f818 	bl	2401a244 <tanf>
24013214:	eef0 7a40 	vmov.f32	s15, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24013218:	eef0 0a49 	vmov.f32	s1, s18
2401321c:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 24013298 <tVZFilterLS_initToPool+0x118>
24013220:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 2401329c <tVZFilterLS_initToPool+0x11c>
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
24013224:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24013228:	f001 fd06 	bl	24014c38 <LEAF_clip>
2401322c:	ed84 0a07 	vstr	s0, [r4, #28]
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
24013230:	f001 fbc8 	bl	240149c4 <fastsqrtf>
24013234:	f001 fbc6 	bl	240149c4 <fastsqrtf>
24013238:	eec8 6a00 	vdiv.f32	s13, s16, s0
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
2401323c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
24013240:	ed94 7a04 	vldr	s14, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
    if (leaf->sampleRate > 90000)
24013244:	ed9f 6a16 	vldr	s12, [pc, #88]	; 240132a0 <tVZFilterLS_initToPool+0x120>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
24013248:	4a16      	ldr	r2, [pc, #88]	; (240132a4 <tVZFilterLS_initToPool+0x124>)
2401324a:	4b17      	ldr	r3, [pc, #92]	; (240132a8 <tVZFilterLS_initToPool+0x128>)
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
2401324c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
24013250:	edc4 6a0e 	vstr	s13, [r4, #56]	; 0x38
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24013254:	eef0 6a48 	vmov.f32	s13, s16
    f->R2Plusg = f->R2+f->g;
24013258:	ee37 7a87 	vadd.f32	s14, s15, s14
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
2401325c:	edc4 7a03 	vstr	s15, [r4, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24013260:	eee7 6a87 	vfma.f32	s13, s15, s14
    f->R2Plusg = f->R2+f->g;
24013264:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24013268:	eec8 7a26 	vdiv.f32	s15, s16, s13
2401326c:	edc4 7a05 	vstr	s15, [r4, #20]
    if (leaf->sampleRate > 90000)
24013270:	edd5 7a00 	vldr	s15, [r5]
    	f->table = __filterTanhTable_48000;
24013274:	eef4 7ac6 	vcmpe.f32	s15, s12
24013278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401327c:	bfd8      	it	le
2401327e:	4613      	movle	r3, r2
24013280:	6423      	str	r3, [r4, #64]	; 0x40
    }
}
24013282:	b002      	add	sp, #8
24013284:	ecbd 8b04 	vpop	{d8-d9}
24013288:	bd70      	pop	{r4, r5, r6, pc}
2401328a:	bf00      	nop
2401328c:	473b8000 	.word	0x473b8000
24013290:	00000000 	.word	0x00000000
24013294:	40490fdb 	.word	0x40490fdb
24013298:	457a0000 	.word	0x457a0000
2401329c:	358637bd 	.word	0x358637bd
240132a0:	47afc800 	.word	0x47afc800
240132a4:	2401cb14 	.word	0x2401cb14
240132a8:	24020b14 	.word	0x24020b14

240132ac <tVZFilterLS_init>:
    tVZFilterLS_initToPool(vf, freq, Q, gain, &leaf->mempool);
240132ac:	3118      	adds	r1, #24
240132ae:	f7ff bf67 	b.w	24013180 <tVZFilterLS_initToPool>
240132b2:	bf00      	nop

240132b4 <tVZFilterLS_setSampleRate>:

void    tVZFilterLS_setSampleRate  (tVZFilterLS* const vf, Lfloat sampleRate)
{
        _tVZFilterLS* f = *vf;
        f->sampleRate = sampleRate;
    f->invSampleRate = 1.0f / sampleRate;
240132b4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->sampRatio = 48000.0f / f->sampleRate;
240132b8:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 240132ec <tVZFilterLS_setSampleRate+0x38>
    if (sampleRate > 90000)
240132bc:	eddf 6a0c 	vldr	s13, [pc, #48]	; 240132f0 <tVZFilterLS_setSampleRate+0x3c>
       {
       	f->table = __filterTanhTable_96000;
       }
       else
       {
       	f->table = __filterTanhTable_48000;
240132c0:	490c      	ldr	r1, [pc, #48]	; (240132f4 <tVZFilterLS_setSampleRate+0x40>)
    f->invSampleRate = 1.0f / sampleRate;
240132c2:	ee87 7a80 	vdiv.f32	s14, s15, s0
        _tVZFilterLS* f = *vf;
240132c6:	6803      	ldr	r3, [r0, #0]
       	f->table = __filterTanhTable_48000;
240132c8:	4a0b      	ldr	r2, [pc, #44]	; (240132f8 <tVZFilterLS_setSampleRate+0x44>)
        f->sampleRate = sampleRate;
240132ca:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
    f->sampRatio = 48000.0f / f->sampleRate;
240132ce:	eec6 7a00 	vdiv.f32	s15, s12, s0
       	f->table = __filterTanhTable_48000;
240132d2:	eeb4 0ae6 	vcmpe.f32	s0, s13
240132d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240132da:	bfd8      	it	le
240132dc:	460a      	movle	r2, r1
    f->invSampleRate = 1.0f / sampleRate;
240132de:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30
    f->sampRatio = 48000.0f / f->sampleRate;
240132e2:	641a      	str	r2, [r3, #64]	; 0x40
240132e4:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
       }
}
240132e8:	4770      	bx	lr
240132ea:	bf00      	nop
240132ec:	473b8000 	.word	0x473b8000
240132f0:	47afc800 	.word	0x47afc800
240132f4:	2401cb14 	.word	0x2401cb14
240132f8:	24020b14 	.word	0x24020b14

240132fc <tVZFilterLS_tick>:
Lfloat   tVZFilterLS_tick               (tVZFilterLS* const vf, Lfloat input)
{
        _tVZFilterLS* f = *vf;
240132fc:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
240132fe:	edd3 7a02 	vldr	s15, [r3, #8]
24013302:	ed93 7a01 	vldr	s14, [r3, #4]
24013306:	ee30 0a67 	vsub.f32	s0, s0, s15
2401330a:	ed93 5a0a 	vldr	s10, [r3, #40]	; 0x28
2401330e:	edd3 5a05 	vldr	s11, [r3, #20]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
24013312:	edd3 6a03 	vldr	s13, [r3, #12]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
24013316:	eea5 0a47 	vfms.f32	s0, s10, s14
2401331a:	edd3 4a04 	vldr	s9, [r3, #16]
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return f->G*yL + f->R2*f->G*yB + yH;
2401331e:	ed93 6a07 	vldr	s12, [r3, #28]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
24013322:	ee20 0a25 	vmul.f32	s0, s0, s11
    yB = v1 + f->s1;
24013326:	eea6 7a80 	vfma.f32	s14, s13, s0
    yL = v2 + f->s2;
2401332a:	eee6 7a87 	vfma.f32	s15, s13, s14
    f->s1 = v1 + yB; // state update in 1st integrator
2401332e:	eeb0 5a47 	vmov.f32	s10, s14
24013332:	eea6 5a80 	vfma.f32	s10, s13, s0
    f->s2 = v2 + yL; // state update in 2nd integrator
24013336:	eef0 5a67 	vmov.f32	s11, s15
2401333a:	eee4 7a87 	vfma.f32	s15, s9, s14
2401333e:	eee6 5a87 	vfma.f32	s11, s13, s14
    f->s1 = v1 + yB; // state update in 1st integrator
24013342:	ed83 5a01 	vstr	s10, [r3, #4]
}
24013346:	eea6 0a27 	vfma.f32	s0, s12, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
2401334a:	edc3 5a02 	vstr	s11, [r3, #8]
}
2401334e:	4770      	bx	lr

24013350 <tVZFilterLS_setFreqFast>:

void    tVZFilterLS_setFreqFast           (tVZFilterLS* const vf, Lfloat cutoff)
{
        _tVZFilterLS* f = *vf;
        f->cutoffMIDI = cutoff;
        cutoff *= 30.567164179104478f;
24013350:	eddf 7a21 	vldr	s15, [pc, #132]	; 240133d8 <tVZFilterLS_setFreqFast+0x88>
24013354:	f640 7cfe 	movw	ip, #4094	; 0xffe
        if (intVer < 0)
        {
        	intVer = 0;
        }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
24013358:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
        _tVZFilterLS* f = *vf;
2401335c:	6803      	ldr	r3, [r0, #0]
        cutoff *= 30.567164179104478f;
2401335e:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
24013362:	6c19      	ldr	r1, [r3, #64]	; 0x40
24013364:	edd3 3a0f 	vldr	s7, [r3, #60]	; 0x3c
        int32_t intVer = (int32_t)cutoff;
24013368:	eefd 6ae7 	vcvt.s32.f32	s13, s15
        f->cutoffMIDI = cutoff;
2401336c:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
24013370:	ee76 5a67 	vsub.f32	s11, s12, s15

    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
24013374:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
        int32_t intVer = (int32_t)cutoff;
24013378:	ee16 2a90 	vmov	r2, s13
    f->R2Plusg = f->R2+f->g;
2401337c:	edd3 6a04 	vldr	s13, [r3, #16]
24013380:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
24013384:	4562      	cmp	r2, ip
24013386:	bfa8      	it	ge
24013388:	4662      	movge	r2, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
2401338a:	ee05 2a10 	vmov	s10, r2
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
2401338e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24013392:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
24013396:	ed92 4a01 	vldr	s8, [r2, #4]
2401339a:	edd2 4a00 	vldr	s9, [r2]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
2401339e:	ee77 7ac5 	vsub.f32	s15, s15, s10
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
240133a2:	ee75 5a85 	vadd.f32	s11, s11, s10
240133a6:	ee67 7aa3 	vmul.f32	s15, s15, s7
240133aa:	ee67 7a84 	vmul.f32	s15, s15, s8
240133ae:	eee4 7aa5 	vfma.f32	s15, s9, s11
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
240133b2:	ee27 7a87 	vmul.f32	s14, s15, s14
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
240133b6:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
240133ba:	ee77 7a26 	vadd.f32	s15, s14, s13
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
240133be:	ed83 7a03 	vstr	s14, [r3, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
240133c2:	eef0 6a46 	vmov.f32	s13, s12
    f->R2Plusg = f->R2+f->g;
240133c6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
240133ca:	eee7 6a27 	vfma.f32	s13, s14, s15
240133ce:	eec6 7a26 	vdiv.f32	s15, s12, s13
240133d2:	edc3 7a05 	vstr	s15, [r3, #20]
}
240133d6:	4770      	bx	lr
240133d8:	41f4898d 	.word	0x41f4898d

240133dc <tVZFilterLS_setGain>:
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
}

void    tVZFilterLS_setGain                  (tVZFilterLS* const vf, Lfloat gain)
{
240133dc:	b510      	push	{r4, lr}
        _tVZFilterLS* f = *vf;
240133de:	6804      	ldr	r4, [r0, #0]
{
240133e0:	eef0 0a40 	vmov.f32	s1, s0
        f->G = LEAF_clip(0.000001f, gain, 4000.0f);
240133e4:	ed9f 1a13 	vldr	s2, [pc, #76]	; 24013434 <tVZFilterLS_setGain+0x58>
240133e8:	ed9f 0a13 	vldr	s0, [pc, #76]	; 24013438 <tVZFilterLS_setGain+0x5c>
240133ec:	f001 fc24 	bl	24014c38 <LEAF_clip>
240133f0:	ed84 0a07 	vstr	s0, [r4, #28]
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
240133f4:	f001 fae6 	bl	240149c4 <fastsqrtf>
240133f8:	f001 fae4 	bl	240149c4 <fastsqrtf>
240133fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
24013400:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
24013404:	ed94 7a04 	vldr	s14, [r4, #16]
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
24013408:	ee86 6a80 	vdiv.f32	s12, s13, s0
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
2401340c:	ee66 7a27 	vmul.f32	s15, s12, s15
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
24013410:	ed84 6a0e 	vstr	s12, [r4, #56]	; 0x38
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24013414:	eeb0 6a66 	vmov.f32	s12, s13
    f->R2Plusg = f->R2+f->g;
24013418:	ee37 7a87 	vadd.f32	s14, s15, s14
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
2401341c:	edc4 7a03 	vstr	s15, [r4, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24013420:	eea7 6a87 	vfma.f32	s12, s15, s14
    f->R2Plusg = f->R2+f->g;
24013424:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24013428:	eec6 7a86 	vdiv.f32	s15, s13, s12
2401342c:	edc4 7a05 	vstr	s15, [r4, #20]
}
24013430:	bd10      	pop	{r4, pc}
24013432:	bf00      	nop
24013434:	457a0000 	.word	0x457a0000
24013438:	358637bd 	.word	0x358637bd

2401343c <tVZFilterLS_setResonance>:

void    tVZFilterLS_setResonance                (tVZFilterLS* const vf, Lfloat res)
{
        _tVZFilterLS* f = *vf;
        f->Q = res;
        f->R2 = 1.0f/res;
2401343c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        _tVZFilterLS* f = *vf;
24013440:	6803      	ldr	r3, [r0, #0]
        f->R2Plusg = f->R2+f->g;
24013442:	edd3 6a03 	vldr	s13, [r3, #12]
        f->R2 = 1.0f/res;
24013446:	ee87 6a80 	vdiv.f32	s12, s15, s0
        f->Q = res;
2401344a:	ed83 0a08 	vstr	s0, [r3, #32]
        f->R2Plusg = f->R2+f->g;
2401344e:	ee36 7a26 	vadd.f32	s14, s12, s13
        f->R2 = 1.0f/res;
24013452:	ed83 6a04 	vstr	s12, [r3, #16]
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24013456:	eeb0 6a67 	vmov.f32	s12, s15
        f->R2Plusg = f->R2+f->g;
2401345a:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
2401345e:	eea6 6a87 	vfma.f32	s12, s13, s14
24013462:	ee87 7a86 	vdiv.f32	s14, s15, s12
24013466:	ed83 7a05 	vstr	s14, [r3, #20]
}
2401346a:	4770      	bx	lr

2401346c <tVZFilterHS_initToPool>:
{
    tVZFilterHS_initToPool(vf, freq, Q, gain, &leaf->mempool);
}

void    tVZFilterHS_initToPool     (tVZFilterHS* const vf, Lfloat freq, Lfloat Q, Lfloat gain, tMempool* const mp)
{
2401346c:	b570      	push	{r4, r5, r6, lr}
2401346e:	ed2d 8b04 	vpush	{d8-d9}
    _tMempool* m = *mp;
24013472:	680d      	ldr	r5, [r1, #0]
{
24013474:	b082      	sub	sp, #8
24013476:	4606      	mov	r6, r0
    _tVZFilterHS* f = *vf = (_tVZFilterHS*) mpool_alloc(sizeof(_tVZFilterHS), m);
24013478:	2048      	movs	r0, #72	; 0x48
2401347a:	4629      	mov	r1, r5
{
2401347c:	eeb0 8a60 	vmov.f32	s16, s1
24013480:	eeb0 9a41 	vmov.f32	s18, s2
24013484:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilterHS* f = *vf = (_tVZFilterHS*) mpool_alloc(sizeof(_tVZFilterHS), m);
24013488:	f001 fed8 	bl	2401523c <mpool_alloc>
2401348c:	6030      	str	r0, [r6, #0]
    f->mempool = m;
2401348e:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->sampleRate = leaf->sampleRate;
    f->invSampleRate = leaf->invSampleRate;
    f->sampRatio = 48000.0f / f->sampleRate;
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24013490:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
    LEAF* leaf = f->mempool->leaf;
24013494:	686d      	ldr	r5, [r5, #4]
    _tVZFilterHS* f = *vf = (_tVZFilterHS*) mpool_alloc(sizeof(_tVZFilterHS), m);
24013496:	4604      	mov	r4, r0
    f->sampRatio = 48000.0f / f->sampleRate;
24013498:	eddf 6a36 	vldr	s13, [pc, #216]	; 24013574 <tVZFilterHS_initToPool+0x108>
    f->cutoffMIDI = ftom(f->fc);
    f->Q    = Q;
    f->R2 =    1.0f/Q;
2401349c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    f->sampleRate = leaf->sampleRate;
240134a0:	edd5 7a00 	vldr	s15, [r5]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240134a4:	eddf 9a34 	vldr	s19, [pc, #208]	; 24013578 <tVZFilterHS_initToPool+0x10c>
    f->sampRatio = 48000.0f / f->sampleRate;
240134a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    f->sampleRate = leaf->sampleRate;
240134ac:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
    f->invSampleRate = leaf->invSampleRate;
240134b0:	686b      	ldr	r3, [r5, #4]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240134b2:	eddd 0a01 	vldr	s1, [sp, #4]
    f->invSampleRate = leaf->invSampleRate;
240134b6:	6303      	str	r3, [r0, #48]	; 0x30
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240134b8:	ee27 1a81 	vmul.f32	s2, s15, s2
240134bc:	eeb0 0a69 	vmov.f32	s0, s19
    f->sampRatio = 48000.0f / f->sampleRate;
240134c0:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240134c4:	f001 fbb8 	bl	24014c38 <LEAF_clip>
240134c8:	ed84 0a06 	vstr	s0, [r4, #24]
    f->cutoffMIDI = ftom(f->fc);
240134cc:	f001 fe32 	bl	24015134 <ftom>
    f->R2 =    1.0f/Q;
240134d0:	ee88 7a88 	vdiv.f32	s14, s17, s16
    f->s1    = 0.0f;
    f->s2   = 0.0f;
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
240134d4:	ed94 6a0c 	vldr	s12, [r4, #48]	; 0x30
240134d8:	edd4 7a06 	vldr	s15, [r4, #24]
240134dc:	eddf 6a27 	vldr	s13, [pc, #156]	; 2401357c <tVZFilterHS_initToPool+0x110>
    f->cutoffMIDI = ftom(f->fc);
240134e0:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
240134e4:	ee67 7a86 	vmul.f32	s15, s15, s12
    f->Q    = Q;
240134e8:	ed84 8a08 	vstr	s16, [r4, #32]
    f->s1    = 0.0f;
240134ec:	edc4 9a01 	vstr	s19, [r4, #4]
    f->s2   = 0.0f;
240134f0:	edc4 9a02 	vstr	s19, [r4, #8]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
240134f4:	ee27 0aa6 	vmul.f32	s0, s15, s13
    f->R2 =    1.0f/Q;
240134f8:	ed84 7a04 	vstr	s14, [r4, #16]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
240134fc:	f006 fea2 	bl	2401a244 <tanf>
24013500:	eef0 7a40 	vmov.f32	s15, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24013504:	eef0 0a49 	vmov.f32	s1, s18
24013508:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 24013580 <tVZFilterHS_initToPool+0x114>
2401350c:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 24013584 <tVZFilterHS_initToPool+0x118>
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
24013510:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24013514:	f001 fb90 	bl	24014c38 <LEAF_clip>
24013518:	ed84 0a07 	vstr	s0, [r4, #28]
    f->sqrtA = (fastsqrtf(fastsqrtf(f->G)));
2401351c:	f001 fa52 	bl	240149c4 <fastsqrtf>
24013520:	f001 fa50 	bl	240149c4 <fastsqrtf>
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
24013524:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
24013528:	ed94 7a04 	vldr	s14, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
2401352c:	eeb0 6a68 	vmov.f32	s12, s17
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
24013530:	ee60 7a27 	vmul.f32	s15, s0, s15
    if (leaf->sampleRate > 90000)
24013534:	eddf 6a14 	vldr	s13, [pc, #80]	; 24013588 <tVZFilterHS_initToPool+0x11c>
    f->sqrtA = (fastsqrtf(fastsqrtf(f->G)));
24013538:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
2401353c:	4a13      	ldr	r2, [pc, #76]	; (2401358c <tVZFilterHS_initToPool+0x120>)
    f->R2Plusg = f->R2+f->g;
2401353e:	ee37 7a87 	vadd.f32	s14, s15, s14
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
24013542:	edc4 7a03 	vstr	s15, [r4, #12]
    	f->table = __filterTanhTable_48000;
24013546:	4b12      	ldr	r3, [pc, #72]	; (24013590 <tVZFilterHS_initToPool+0x124>)
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24013548:	eea7 6a87 	vfma.f32	s12, s15, s14
    f->R2Plusg = f->R2+f->g;
2401354c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24013550:	eec8 7a86 	vdiv.f32	s15, s17, s12
24013554:	edc4 7a05 	vstr	s15, [r4, #20]
    if (leaf->sampleRate > 90000)
24013558:	edd5 7a00 	vldr	s15, [r5]
    	f->table = __filterTanhTable_48000;
2401355c:	eef4 7ae6 	vcmpe.f32	s15, s13
24013560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013564:	bfd8      	it	le
24013566:	4613      	movle	r3, r2
24013568:	6423      	str	r3, [r4, #64]	; 0x40
    }
}
2401356a:	b002      	add	sp, #8
2401356c:	ecbd 8b04 	vpop	{d8-d9}
24013570:	bd70      	pop	{r4, r5, r6, pc}
24013572:	bf00      	nop
24013574:	473b8000 	.word	0x473b8000
24013578:	00000000 	.word	0x00000000
2401357c:	40490fdb 	.word	0x40490fdb
24013580:	457a0000 	.word	0x457a0000
24013584:	358637bd 	.word	0x358637bd
24013588:	47afc800 	.word	0x47afc800
2401358c:	2401cb14 	.word	0x2401cb14
24013590:	24020b14 	.word	0x24020b14

24013594 <tVZFilterHS_init>:
    tVZFilterHS_initToPool(vf, freq, Q, gain, &leaf->mempool);
24013594:	3118      	adds	r1, #24
24013596:	f7ff bf69 	b.w	2401346c <tVZFilterHS_initToPool>
2401359a:	bf00      	nop

2401359c <tVZFilterHS_setSampleRate>:

void    tVZFilterHS_setSampleRate  (tVZFilterHS* const vf, Lfloat sampleRate)
{
        _tVZFilterHS* f = *vf;
        f->sampleRate = sampleRate;
    f->invSampleRate = 1.0f / sampleRate;
2401359c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->sampRatio = 48000.0f / f->sampleRate;
240135a0:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 240135d4 <tVZFilterHS_setSampleRate+0x38>
    if (sampleRate > 90000)
240135a4:	eddf 6a0c 	vldr	s13, [pc, #48]	; 240135d8 <tVZFilterHS_setSampleRate+0x3c>
          {
          	f->table = __filterTanhTable_96000;
          }
          else
          {
          	f->table = __filterTanhTable_48000;
240135a8:	490c      	ldr	r1, [pc, #48]	; (240135dc <tVZFilterHS_setSampleRate+0x40>)
    f->invSampleRate = 1.0f / sampleRate;
240135aa:	ee87 7a80 	vdiv.f32	s14, s15, s0
        _tVZFilterHS* f = *vf;
240135ae:	6803      	ldr	r3, [r0, #0]
          	f->table = __filterTanhTable_48000;
240135b0:	4a0b      	ldr	r2, [pc, #44]	; (240135e0 <tVZFilterHS_setSampleRate+0x44>)
        f->sampleRate = sampleRate;
240135b2:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
    f->sampRatio = 48000.0f / f->sampleRate;
240135b6:	eec6 7a00 	vdiv.f32	s15, s12, s0
          	f->table = __filterTanhTable_48000;
240135ba:	eeb4 0ae6 	vcmpe.f32	s0, s13
240135be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240135c2:	bfd8      	it	le
240135c4:	460a      	movle	r2, r1
    f->invSampleRate = 1.0f / sampleRate;
240135c6:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30
    f->sampRatio = 48000.0f / f->sampleRate;
240135ca:	641a      	str	r2, [r3, #64]	; 0x40
240135cc:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
          }
}
240135d0:	4770      	bx	lr
240135d2:	bf00      	nop
240135d4:	473b8000 	.word	0x473b8000
240135d8:	47afc800 	.word	0x47afc800
240135dc:	2401cb14 	.word	0x2401cb14
240135e0:	24020b14 	.word	0x24020b14

240135e4 <tVZFilterHS_tick>:
Lfloat   tVZFilterHS_tick               (tVZFilterHS* const vf, Lfloat input)
{
        _tVZFilterHS* f = *vf;
240135e4:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
240135e6:	edd3 6a02 	vldr	s13, [r3, #8]
240135ea:	ed93 7a01 	vldr	s14, [r3, #4]
240135ee:	ee70 7a66 	vsub.f32	s15, s0, s13
240135f2:	ed93 4a0a 	vldr	s8, [r3, #40]	; 0x28
240135f6:	ed93 5a05 	vldr	s10, [r3, #20]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
240135fa:	ed93 6a03 	vldr	s12, [r3, #12]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
240135fe:	eee4 7a47 	vfms.f32	s15, s8, s14
24013602:	edd3 4a04 	vldr	s9, [r3, #16]
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return yL + f->R2*f->G*yB + f->G*yH;
24013606:	edd3 5a07 	vldr	s11, [r3, #28]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
2401360a:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
2401360e:	eea6 7a27 	vfma.f32	s14, s12, s15
    yL = v2 + f->s2;
24013612:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
24013616:	eeb0 5a47 	vmov.f32	s10, s14
2401361a:	eea6 5a27 	vfma.f32	s10, s12, s15
2401361e:	eee4 7a87 	vfma.f32	s15, s9, s14
    yL = v2 + f->s2;
24013622:	eeb0 0a66 	vmov.f32	s0, s13
    f->s2 = v2 + yL; // state update in 2nd integrator
24013626:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
2401362a:	ed83 5a01 	vstr	s10, [r3, #4]
}
2401362e:	eea5 0aa7 	vfma.f32	s0, s11, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
24013632:	edc3 6a02 	vstr	s13, [r3, #8]
}
24013636:	4770      	bx	lr

24013638 <tVZFilterHS_setFreqFast>:

void    tVZFilterHS_setFreqFast           (tVZFilterHS* const vf, Lfloat cutoff)
{
        _tVZFilterHS* f = *vf;
        f->cutoffMIDI = cutoff;
        cutoff *= 30.567164179104478f;
24013638:	eddf 7a21 	vldr	s15, [pc, #132]	; 240136c0 <tVZFilterHS_setFreqFast+0x88>
2401363c:	f640 7cfe 	movw	ip, #4094	; 0xffe
        if (intVer < 0)
        {
        	intVer = 0;
        }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
24013640:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
        _tVZFilterHS* f = *vf;
24013644:	6803      	ldr	r3, [r0, #0]
        cutoff *= 30.567164179104478f;
24013646:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
2401364a:	6c19      	ldr	r1, [r3, #64]	; 0x40
2401364c:	edd3 3a0f 	vldr	s7, [r3, #60]	; 0x3c
        int32_t intVer = (int32_t)cutoff;
24013650:	eefd 6ae7 	vcvt.s32.f32	s13, s15
        f->cutoffMIDI = cutoff;
24013654:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
24013658:	ee76 5a67 	vsub.f32	s11, s12, s15

    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
2401365c:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
        int32_t intVer = (int32_t)cutoff;
24013660:	ee16 2a90 	vmov	r2, s13
    
    f->R2Plusg = f->R2+f->g;
24013664:	edd3 6a04 	vldr	s13, [r3, #16]
24013668:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
2401366c:	4562      	cmp	r2, ip
2401366e:	bfa8      	it	ge
24013670:	4662      	movge	r2, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24013672:	ee05 2a10 	vmov	s10, r2
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
24013676:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
2401367a:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
2401367e:	ed92 4a01 	vldr	s8, [r2, #4]
24013682:	edd2 4a00 	vldr	s9, [r2]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24013686:	ee77 7ac5 	vsub.f32	s15, s15, s10
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
2401368a:	ee75 5a85 	vadd.f32	s11, s11, s10
2401368e:	ee67 7aa3 	vmul.f32	s15, s15, s7
24013692:	ee67 7a84 	vmul.f32	s15, s15, s8
24013696:	eee4 7aa5 	vfma.f32	s15, s9, s11
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
2401369a:	ee27 7a87 	vmul.f32	s14, s15, s14
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
2401369e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
240136a2:	ee77 7a26 	vadd.f32	s15, s14, s13
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
240136a6:	ed83 7a03 	vstr	s14, [r3, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
240136aa:	eef0 6a46 	vmov.f32	s13, s12
    f->R2Plusg = f->R2+f->g;
240136ae:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
240136b2:	eee7 6a27 	vfma.f32	s13, s14, s15
240136b6:	eec6 7a26 	vdiv.f32	s15, s12, s13
240136ba:	edc3 7a05 	vstr	s15, [r3, #20]
}
240136be:	4770      	bx	lr
240136c0:	41f4898d 	.word	0x41f4898d

240136c4 <tVZFilterHS_setGain>:
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
}

void    tVZFilterHS_setGain                  (tVZFilterHS* const vf, Lfloat gain)
{
240136c4:	b510      	push	{r4, lr}
        _tVZFilterHS* f = *vf;
240136c6:	6804      	ldr	r4, [r0, #0]
{
240136c8:	eef0 0a40 	vmov.f32	s1, s0
        f->G = LEAF_clip(0.000001f, gain, 4000.0f);
240136cc:	ed9f 1a12 	vldr	s2, [pc, #72]	; 24013718 <tVZFilterHS_setGain+0x54>
240136d0:	ed9f 0a12 	vldr	s0, [pc, #72]	; 2401371c <tVZFilterHS_setGain+0x58>
240136d4:	f001 fab0 	bl	24014c38 <LEAF_clip>
240136d8:	ed84 0a07 	vstr	s0, [r4, #28]
    f->sqrtA = fastsqrtf(fastsqrtf(f->G));
240136dc:	f001 f972 	bl	240149c4 <fastsqrtf>
240136e0:	f001 f970 	bl	240149c4 <fastsqrtf>
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
240136e4:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
240136e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
240136ec:	ed94 7a04 	vldr	s14, [r4, #16]
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
240136f0:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->sqrtA = fastsqrtf(fastsqrtf(f->G));
240136f4:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
240136f8:	eeb0 6a66 	vmov.f32	s12, s13
    f->R2Plusg = f->R2+f->g;
240136fc:	ee37 7a87 	vadd.f32	s14, s15, s14
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
24013700:	edc4 7a03 	vstr	s15, [r4, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24013704:	eea7 6a87 	vfma.f32	s12, s15, s14
    f->R2Plusg = f->R2+f->g;
24013708:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
2401370c:	eec6 7a86 	vdiv.f32	s15, s13, s12
24013710:	edc4 7a05 	vstr	s15, [r4, #20]
}
24013714:	bd10      	pop	{r4, pc}
24013716:	bf00      	nop
24013718:	457a0000 	.word	0x457a0000
2401371c:	358637bd 	.word	0x358637bd

24013720 <tVZFilterHS_setResonance>:

void    tVZFilterHS_setResonance                (tVZFilterHS* const vf, Lfloat res)
{
        _tVZFilterHS* f = *vf;
        f->Q = res;
        f->R2 = 1.0f/res;
24013720:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        _tVZFilterHS* f = *vf;
24013724:	6803      	ldr	r3, [r0, #0]
        f->R2Plusg = f->R2+f->g;
24013726:	edd3 6a03 	vldr	s13, [r3, #12]
        f->R2 = 1.0f/res;
2401372a:	ee87 6a80 	vdiv.f32	s12, s15, s0
        f->Q = res;
2401372e:	ed83 0a08 	vstr	s0, [r3, #32]
        f->R2Plusg = f->R2+f->g;
24013732:	ee36 7a26 	vadd.f32	s14, s12, s13
        f->R2 = 1.0f/res;
24013736:	ed83 6a04 	vstr	s12, [r3, #16]
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
2401373a:	eeb0 6a67 	vmov.f32	s12, s15
        f->R2Plusg = f->R2+f->g;
2401373e:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24013742:	eea6 6a87 	vfma.f32	s12, s13, s14
24013746:	ee87 7a86 	vdiv.f32	s14, s15, s12
2401374a:	ed83 7a05 	vstr	s14, [r3, #20]
}
2401374e:	4770      	bx	lr

24013750 <tVZFilterBell_initToPool>:
{
    tVZFilterBell_initToPool(vf, freq, BW, gain, &leaf->mempool);
}

void    tVZFilterBell_initToPool     (tVZFilterBell* const vf, Lfloat freq, Lfloat BW, Lfloat gain, tMempool* const mp)
{
24013750:	b570      	push	{r4, r5, r6, lr}
24013752:	ed2d 8b06 	vpush	{d8-d10}
    _tMempool* m = *mp;
24013756:	680d      	ldr	r5, [r1, #0]
{
24013758:	4606      	mov	r6, r0
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
2401375a:	2040      	movs	r0, #64	; 0x40
{
2401375c:	eeb0 8a40 	vmov.f32	s16, s0
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
24013760:	4629      	mov	r1, r5
{
24013762:	eef0 9a60 	vmov.f32	s19, s1
24013766:	eeb0 aa41 	vmov.f32	s20, s2
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
2401376a:	f001 fd67 	bl	2401523c <mpool_alloc>
2401376e:	6030      	str	r0, [r6, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->sampleRate = leaf->sampleRate;
    f->invSampleRate = leaf->invSampleRate;
    f->sampRatio = 48000.0f / f->sampleRate;
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24013770:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
    f->mempool = m;
24013774:	6005      	str	r5, [r0, #0]
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
24013776:	4604      	mov	r4, r0
    LEAF* leaf = f->mempool->leaf;
24013778:	686d      	ldr	r5, [r5, #4]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
2401377a:	eef0 0a48 	vmov.f32	s1, s16
    f->sampRatio = 48000.0f / f->sampleRate;
2401377e:	eddf 6a48 	vldr	s13, [pc, #288]	; 240138a0 <tVZFilterBell_initToPool+0x150>
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
    Lfloat r  = f->g/wl;
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
    // warped upper bandedge, wc the center
    f->rToUse = r;
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24013782:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    f->sampleRate = leaf->sampleRate;
24013786:	edd5 7a00 	vldr	s15, [r5]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
2401378a:	ed9f 9a46 	vldr	s18, [pc, #280]	; 240138a4 <tVZFilterBell_initToPool+0x154>
    f->sampRatio = 48000.0f / f->sampleRate;
2401378e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    f->sampleRate = leaf->sampleRate;
24013792:	edc0 7a0a 	vstr	s15, [r0, #40]	; 0x28
    f->invSampleRate = leaf->invSampleRate;
24013796:	686b      	ldr	r3, [r5, #4]
    f->g = tanf(PI * freq * f->invSampleRate);
24013798:	eddf aa43 	vldr	s21, [pc, #268]	; 240138a8 <tVZFilterBell_initToPool+0x158>
    f->invSampleRate = leaf->invSampleRate;
2401379c:	62c3      	str	r3, [r0, #44]	; 0x2c
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
2401379e:	ee27 1a81 	vmul.f32	s2, s15, s2
240137a2:	eeb0 0a49 	vmov.f32	s0, s18
    f->g = tanf(PI * freq * f->invSampleRate);
240137a6:	ee28 8a2a 	vmul.f32	s16, s16, s21
    f->sampRatio = 48000.0f / f->sampleRate;
240137aa:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240137ae:	f001 fa43 	bl	24014c38 <LEAF_clip>
240137b2:	ed84 0a06 	vstr	s0, [r4, #24]
    f->cutoffMIDI = ftom(f->fc);
240137b6:	f001 fcbd 	bl	24015134 <ftom>
240137ba:	eef0 7a40 	vmov.f32	s15, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
240137be:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 240138ac <tVZFilterBell_initToPool+0x15c>
240137c2:	eef0 0a4a 	vmov.f32	s1, s20
    f->B = BW;
240137c6:	edc4 9a08 	vstr	s19, [r4, #32]
    f->cutoffMIDI = ftom(f->fc);
240137ca:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
    f->s1    = 0.0f;
240137ce:	ed84 9a01 	vstr	s18, [r4, #4]
    f->s2   = 0.0f;
240137d2:	ed84 9a02 	vstr	s18, [r4, #8]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
240137d6:	ed9f 0a36 	vldr	s0, [pc, #216]	; 240138b0 <tVZFilterBell_initToPool+0x160>
240137da:	f001 fa2d 	bl	24014c38 <LEAF_clip>
    f->g = tanf(PI * freq * f->invSampleRate);
240137de:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
240137e2:	ed84 0a07 	vstr	s0, [r4, #28]
    f->g = tanf(PI * freq * f->invSampleRate);
240137e6:	ee28 0a27 	vmul.f32	s0, s16, s15
240137ea:	f006 fd2b 	bl	2401a244 <tanf>
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
240137ee:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
    f->g = tanf(PI * freq * f->invSampleRate);
240137f2:	eeb0 7a40 	vmov.f32	s14, s0
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
240137f6:	edd4 0a08 	vldr	s1, [r4, #32]
240137fa:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
240137fe:	ed94 8a06 	vldr	s16, [r4, #24]
24013802:	ee60 0aa7 	vmul.f32	s1, s1, s15
    f->g = tanf(PI * freq * f->invSampleRate);
24013806:	ed84 7a03 	vstr	s14, [r4, #12]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
2401380a:	f001 f987 	bl	24014b1c <fastPowf>
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
2401380e:	ee20 0a2a 	vmul.f32	s0, s0, s21
24013812:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
24013816:	ee20 0a08 	vmul.f32	s0, s0, s16
2401381a:	ee20 0a27 	vmul.f32	s0, s0, s15
2401381e:	f001 f8bd 	bl	2401499c <fastertanf>
    Lfloat r  = f->g/wl;
24013822:	ed94 7a03 	vldr	s14, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24013826:	eeb0 5a68 	vmov.f32	s10, s17
2401382a:	edd4 6a07 	vldr	s13, [r4, #28]
    Lfloat r  = f->g/wl;
2401382e:	eec7 7a00 	vdiv.f32	s15, s14, s0
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24013832:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
24013836:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
2401383a:	ee67 7aa7 	vmul.f32	s15, s15, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2401383e:	eea7 5aa7 	vfma.f32	s10, s15, s15
    f->rToUse = r;
24013842:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24013846:	ee85 7a27 	vdiv.f32	s14, s10, s15
2401384a:	ee77 7a65 	vsub.f32	s15, s14, s11
2401384e:	ee67 7a86 	vmul.f32	s15, s15, s12
24013852:	ee87 0aa6 	vdiv.f32	s0, s15, s13
24013856:	f001 f8b5 	bl	240149c4 <fastsqrtf>
    f->R2Plusg = f->R2+f->g;
2401385a:	ed94 7a03 	vldr	s14, [r4, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
    if (leaf->sampleRate > 90000)
2401385e:	eddf 6a15 	vldr	s13, [pc, #84]	; 240138b4 <tVZFilterBell_initToPool+0x164>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
24013862:	4a15      	ldr	r2, [pc, #84]	; (240138b8 <tVZFilterBell_initToPool+0x168>)
24013864:	4b15      	ldr	r3, [pc, #84]	; (240138bc <tVZFilterBell_initToPool+0x16c>)
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24013866:	ee30 0a00 	vadd.f32	s0, s0, s0
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
2401386a:	eeb0 6a68 	vmov.f32	s12, s17
    f->R2Plusg = f->R2+f->g;
2401386e:	ee70 7a07 	vadd.f32	s15, s0, s14
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24013872:	ed84 0a04 	vstr	s0, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24013876:	eea7 6a27 	vfma.f32	s12, s14, s15
    f->R2Plusg = f->R2+f->g;
2401387a:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
2401387e:	eec8 7a86 	vdiv.f32	s15, s17, s12
24013882:	edc4 7a05 	vstr	s15, [r4, #20]
    if (leaf->sampleRate > 90000)
24013886:	edd5 7a00 	vldr	s15, [r5]
    	f->table = __filterTanhTable_48000;
2401388a:	eef4 7ae6 	vcmpe.f32	s15, s13
2401388e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013892:	bfd8      	it	le
24013894:	4613      	movle	r3, r2
24013896:	63a3      	str	r3, [r4, #56]	; 0x38
    }
}
24013898:	ecbd 8b06 	vpop	{d8-d10}
2401389c:	bd70      	pop	{r4, r5, r6, pc}
2401389e:	bf00      	nop
240138a0:	473b8000 	.word	0x473b8000
240138a4:	00000000 	.word	0x00000000
240138a8:	40490fdb 	.word	0x40490fdb
240138ac:	457a0000 	.word	0x457a0000
240138b0:	358637bd 	.word	0x358637bd
240138b4:	47afc800 	.word	0x47afc800
240138b8:	2401cb14 	.word	0x2401cb14
240138bc:	24020b14 	.word	0x24020b14

240138c0 <tVZFilterBell_init>:
    tVZFilterBell_initToPool(vf, freq, BW, gain, &leaf->mempool);
240138c0:	3118      	adds	r1, #24
240138c2:	f7ff bf45 	b.w	24013750 <tVZFilterBell_initToPool>
240138c6:	bf00      	nop

240138c8 <tVZFilterBell_setSampleRate>:

void    tVZFilterBell_setSampleRate  (tVZFilterBell* const vf, Lfloat sampleRate)
{
        _tVZFilterBell* f = *vf;
        f->sampleRate = sampleRate;
    f->invSampleRate = 1.0f / sampleRate;
240138c8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->sampRatio = 48000.0f / f->sampleRate;
240138cc:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 24013900 <tVZFilterBell_setSampleRate+0x38>
    if (sampleRate > 90000)
240138d0:	eddf 6a0c 	vldr	s13, [pc, #48]	; 24013904 <tVZFilterBell_setSampleRate+0x3c>
          {
          	f->table = __filterTanhTable_96000;
          }
          else
          {
          	f->table = __filterTanhTable_48000;
240138d4:	490c      	ldr	r1, [pc, #48]	; (24013908 <tVZFilterBell_setSampleRate+0x40>)
    f->invSampleRate = 1.0f / sampleRate;
240138d6:	ee87 7a80 	vdiv.f32	s14, s15, s0
        _tVZFilterBell* f = *vf;
240138da:	6803      	ldr	r3, [r0, #0]
          	f->table = __filterTanhTable_48000;
240138dc:	4a0b      	ldr	r2, [pc, #44]	; (2401390c <tVZFilterBell_setSampleRate+0x44>)
        f->sampleRate = sampleRate;
240138de:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    f->sampRatio = 48000.0f / f->sampleRate;
240138e2:	eec6 7a00 	vdiv.f32	s15, s12, s0
          	f->table = __filterTanhTable_48000;
240138e6:	eeb4 0ae6 	vcmpe.f32	s0, s13
240138ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240138ee:	bfd8      	it	le
240138f0:	460a      	movle	r2, r1
    f->invSampleRate = 1.0f / sampleRate;
240138f2:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
    f->sampRatio = 48000.0f / f->sampleRate;
240138f6:	639a      	str	r2, [r3, #56]	; 0x38
240138f8:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
          }
}
240138fc:	4770      	bx	lr
240138fe:	bf00      	nop
24013900:	473b8000 	.word	0x473b8000
24013904:	47afc800 	.word	0x47afc800
24013908:	2401cb14 	.word	0x2401cb14
2401390c:	24020b14 	.word	0x24020b14

24013910 <tVZFilterBell_tick>:
Lfloat   tVZFilterBell_tick               (tVZFilterBell* const vf, Lfloat input)
{
        _tVZFilterBell* f = *vf;
24013910:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
24013912:	edd3 6a02 	vldr	s13, [r3, #8]
24013916:	ed93 7a01 	vldr	s14, [r3, #4]
2401391a:	ee70 7a66 	vsub.f32	s15, s0, s13
2401391e:	ed93 4a09 	vldr	s8, [r3, #36]	; 0x24
24013922:	ed93 5a05 	vldr	s10, [r3, #20]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
24013926:	ed93 6a03 	vldr	s12, [r3, #12]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
2401392a:	eee4 7a47 	vfms.f32	s15, s8, s14
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return yL + f->R2*f->G*yB + yH;
2401392e:	edd3 5a04 	vldr	s11, [r3, #16]
24013932:	edd3 4a07 	vldr	s9, [r3, #28]
24013936:	ee65 5aa4 	vmul.f32	s11, s11, s9
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
2401393a:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
2401393e:	eea6 7a27 	vfma.f32	s14, s12, s15
    yL = v2 + f->s2;
24013942:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
24013946:	eeb0 5a47 	vmov.f32	s10, s14
2401394a:	eea6 5a27 	vfma.f32	s10, s12, s15
2401394e:	eee5 7a87 	vfma.f32	s15, s11, s14
    f->s2 = v2 + yL; // state update in 2nd integrator
24013952:	eef0 5a66 	vmov.f32	s11, s13
24013956:	eee6 5a07 	vfma.f32	s11, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
2401395a:	ed83 5a01 	vstr	s10, [r3, #4]
}
2401395e:	ee36 0aa7 	vadd.f32	s0, s13, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
24013962:	edc3 5a02 	vstr	s11, [r3, #8]
}
24013966:	4770      	bx	lr

24013968 <tVZFilterBell_setBandwidth>:


               
void    tVZFilterBell_setBandwidth           (tVZFilterBell* const vf, Lfloat bandWidth)
{
24013968:	eef0 7a40 	vmov.f32	s15, s0
        _tVZFilterBell* f = *vf;
    f->B = bandWidth;
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
2401396c:	eefe 0a00 	vmov.f32	s1, #224	; 0xbf000000 -0.5
24013970:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
{
24013974:	b510      	push	{r4, lr}
        _tVZFilterBell* f = *vf;
24013976:	6804      	ldr	r4, [r0, #0]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
24013978:	ee67 0aa0 	vmul.f32	s1, s15, s1
{
2401397c:	ed2d 8b02 	vpush	{d8}
    f->B = bandWidth;
24013980:	edc4 7a08 	vstr	s15, [r4, #32]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
24013984:	ed94 8a06 	vldr	s16, [r4, #24]
24013988:	f001 f8c8 	bl	24014b1c <fastPowf>
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
2401398c:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
24013990:	eddf 7a17 	vldr	s15, [pc, #92]	; 240139f0 <tVZFilterBell_setBandwidth+0x88>
24013994:	ee28 8a07 	vmul.f32	s16, s16, s14
24013998:	ee28 8a27 	vmul.f32	s16, s16, s15
2401399c:	ee28 0a00 	vmul.f32	s0, s16, s0
240139a0:	f000 fffc 	bl	2401499c <fastertanf>
    Lfloat r  = f->g/wl;
240139a4:	edd4 6a03 	vldr	s13, [r4, #12]
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
    // warped upper bandedge, wc the center
    f->rToUse = r;
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240139a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    Lfloat r  = f->g/wl;
240139ac:	eec6 7a80 	vdiv.f32	s15, s13, s0
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240139b0:	ed94 0a07 	vldr	s0, [r4, #28]
240139b4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
240139b8:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
240139bc:	ee67 7aa7 	vmul.f32	s15, s15, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240139c0:	eea7 7aa7 	vfma.f32	s14, s15, s15
    f->rToUse = r;
240139c4:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240139c8:	eef0 6a47 	vmov.f32	s13, s14
240139cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240139d0:	ee77 7a65 	vsub.f32	s15, s14, s11
240139d4:	ee67 7a86 	vmul.f32	s15, s15, s12
240139d8:	ee87 0a80 	vdiv.f32	s0, s15, s0
240139dc:	f000 fff2 	bl	240149c4 <fastsqrtf>
240139e0:	ee30 0a00 	vadd.f32	s0, s0, s0
240139e4:	ed84 0a04 	vstr	s0, [r4, #16]
}
240139e8:	ecbd 8b02 	vpop	{d8}
240139ec:	bd10      	pop	{r4, pc}
240139ee:	bf00      	nop
240139f0:	40490fdb 	.word	0x40490fdb

240139f4 <tVZFilterBell_setFreq>:
void    tVZFilterBell_setFreq           (tVZFilterBell* const vf, Lfloat freq)
{
240139f4:	b510      	push	{r4, lr}
240139f6:	ed2d 8b02 	vpush	{d8}
240139fa:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 24013aa8 <tVZFilterBell_setFreq+0xb4>
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
    Lfloat r  = f->g/wl;
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
    // warped upper bandedge, wc the center
    f->rToUse = r;
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240139fe:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    _tVZFilterBell* f = *vf;
24013a02:	6804      	ldr	r4, [r0, #0]
    f->fc = freq;
24013a04:	ee20 8a08 	vmul.f32	s16, s0, s16
    f->g = tanf(PI * freq * f->invSampleRate);
24013a08:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
    f->fc = freq;
24013a0c:	ed84 0a06 	vstr	s0, [r4, #24]
    f->g = tanf(PI * freq * f->invSampleRate);
24013a10:	ee28 0a27 	vmul.f32	s0, s16, s15
24013a14:	f006 fc16 	bl	2401a244 <tanf>
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
24013a18:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
    f->g = tanf(PI * freq * f->invSampleRate);
24013a1c:	eeb0 7a40 	vmov.f32	s14, s0
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
24013a20:	edd4 0a08 	vldr	s1, [r4, #32]
24013a24:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
24013a28:	ee60 0aa7 	vmul.f32	s1, s1, s15
    f->g = tanf(PI * freq * f->invSampleRate);
24013a2c:	ed84 7a03 	vstr	s14, [r4, #12]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
24013a30:	f001 f874 	bl	24014b1c <fastPowf>
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
24013a34:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
24013a38:	ee28 8a27 	vmul.f32	s16, s16, s15
24013a3c:	ee28 0a00 	vmul.f32	s0, s16, s0
24013a40:	f000 ffac 	bl	2401499c <fastertanf>
    Lfloat r  = f->g/wl;
24013a44:	ed94 7a03 	vldr	s14, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24013a48:	eeb0 5a68 	vmov.f32	s10, s17
24013a4c:	edd4 6a07 	vldr	s13, [r4, #28]
    Lfloat r  = f->g/wl;
24013a50:	eec7 7a00 	vdiv.f32	s15, s14, s0
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24013a54:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
24013a58:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
24013a5c:	ee67 7aa7 	vmul.f32	s15, s15, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24013a60:	eea7 5aa7 	vfma.f32	s10, s15, s15
    f->rToUse = r;
24013a64:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24013a68:	ee85 7a27 	vdiv.f32	s14, s10, s15
24013a6c:	ee77 7a65 	vsub.f32	s15, s14, s11
24013a70:	ee67 7a86 	vmul.f32	s15, s15, s12
24013a74:	ee87 0aa6 	vdiv.f32	s0, s15, s13
24013a78:	f000 ffa4 	bl	240149c4 <fastsqrtf>
    f->R2Plusg = f->R2+f->g;
24013a7c:	ed94 7a03 	vldr	s14, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24013a80:	ee30 0a00 	vadd.f32	s0, s0, s0
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24013a84:	eef0 6a68 	vmov.f32	s13, s17
    f->R2Plusg = f->R2+f->g;
24013a88:	ee70 7a07 	vadd.f32	s15, s0, s14
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24013a8c:	ed84 0a04 	vstr	s0, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24013a90:	eee7 6a27 	vfma.f32	s13, s14, s15
    f->R2Plusg = f->R2+f->g;
24013a94:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24013a98:	eec8 7aa6 	vdiv.f32	s15, s17, s13
24013a9c:	edc4 7a05 	vstr	s15, [r4, #20]
}
24013aa0:	ecbd 8b02 	vpop	{d8}
24013aa4:	bd10      	pop	{r4, pc}
24013aa6:	bf00      	nop
24013aa8:	40490fdb 	.word	0x40490fdb

24013aac <tVZFilterBell_setFreqFast>:

void    tVZFilterBell_setFreqFast           (tVZFilterBell* const vf, Lfloat cutoff)
{
    _tVZFilterBell* f = *vf;
    f->cutoffMIDI = cutoff;
    cutoff *= 30.567164179104478f;
24013aac:	eddf 7a43 	vldr	s15, [pc, #268]	; 24013bbc <tVZFilterBell_setFreqFast+0x110>
	{
		intVer = 0;
	}
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
24013ab0:	eef9 6a08 	vmov.f32	s13, #152	; 0xc0c00000 -6.0
24013ab4:	f640 7cfe 	movw	ip, #4094	; 0xffe

    Lfloat r  = f->g/gLower;
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
    // warped upper bandedge, wc the center
    f->rToUse = r;
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24013ab8:	eeb0 4a00 	vmov.f32	s8, #0	; 0x40000000  2.0
    cutoff *= 30.567164179104478f;
24013abc:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24013ac0:	eef5 4a00 	vmov.f32	s9, #80	; 0x3e800000  0.250
	int32_t intVer = (int32_t)cutoff;
24013ac4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
{
24013ac8:	b510      	push	{r4, lr}
    _tVZFilterBell* f = *vf;
24013aca:	6804      	ldr	r4, [r0, #0]
	int32_t intVer = (int32_t)cutoff;
24013acc:	ee17 3a10 	vmov	r3, s14
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
24013ad0:	eeb0 7a67 	vmov.f32	s14, s15
24013ad4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
{
24013ad8:	ed2d 8b02 	vpush	{d8}
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
24013adc:	ed94 6a08 	vldr	s12, [r4, #32]
24013ae0:	4563      	cmp	r3, ip
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
24013ae2:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
24013ae6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
24013ae8:	eea6 7a26 	vfma.f32	s14, s12, s13
24013aec:	bfa8      	it	ge
24013aee:	4663      	movge	r3, ip
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
24013af0:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24013af4:	ee05 3a10 	vmov	s10, r3
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
24013af8:	ee38 6a67 	vsub.f32	s12, s16, s15
24013afc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    f->cutoffMIDI = cutoff;
24013b00:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24013b04:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24013b08:	ed94 0a07 	vldr	s0, [r4, #28]
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
24013b0c:	ed93 3a01 	vldr	s6, [r3, #4]
	intVer = (int32_t)fl;
24013b10:	eefd 6ac7 	vcvt.s32.f32	s13, s14
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
24013b14:	edd3 3a00 	vldr	s7, [r3]
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24013b18:	ee77 7ac5 	vsub.f32	s15, s15, s10
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
24013b1c:	ee36 6a05 	vadd.f32	s12, s12, s10
	intVer = (int32_t)fl;
24013b20:	ee16 2a90 	vmov	r2, s13
	Lfloat gLower = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
24013b24:	ee78 6a47 	vsub.f32	s13, s16, s14
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
24013b28:	ee67 7aa5 	vmul.f32	s15, s15, s11
24013b2c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
24013b30:	4562      	cmp	r2, ip
24013b32:	ee67 7a83 	vmul.f32	s15, s15, s6
24013b36:	bfa8      	it	ge
24013b38:	4662      	movge	r2, ip
24013b3a:	eee3 7a86 	vfma.f32	s15, s7, s12
	LfloatVer = fl - (Lfloat)intVer;
24013b3e:	ee05 2a10 	vmov	s10, r2
	Lfloat gLower = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
24013b42:	eb01 0382 	add.w	r3, r1, r2, lsl #2
	LfloatVer = fl - (Lfloat)intVer;
24013b46:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
24013b4a:	ee37 7a45 	vsub.f32	s14, s14, s10
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
24013b4e:	edc4 7a03 	vstr	s15, [r4, #12]
	Lfloat gLower = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
24013b52:	ee76 6a85 	vadd.f32	s13, s13, s10
24013b56:	ed93 6a00 	vldr	s12, [r3]
24013b5a:	ee27 7a25 	vmul.f32	s14, s14, s11
24013b5e:	edd3 5a01 	vldr	s11, [r3, #4]
24013b62:	ee27 7a25 	vmul.f32	s14, s14, s11
24013b66:	eea6 7a26 	vfma.f32	s14, s12, s13
    Lfloat r  = f->g/gLower;
24013b6a:	eec7 6a87 	vdiv.f32	s13, s15, s14
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
24013b6e:	ee66 7aa6 	vmul.f32	s15, s13, s13
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24013b72:	eef0 6a48 	vmov.f32	s13, s16
    f->rToUse = r;
24013b76:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24013b7a:	eee7 6aa7 	vfma.f32	s13, s15, s15
24013b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24013b82:	ee77 7a44 	vsub.f32	s15, s14, s8
24013b86:	ee67 7aa4 	vmul.f32	s15, s15, s9
24013b8a:	ee87 0a80 	vdiv.f32	s0, s15, s0
24013b8e:	f000 ff19 	bl	240149c4 <fastsqrtf>
    f->R2Plusg = f->R2+f->g;
24013b92:	ed94 7a03 	vldr	s14, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24013b96:	ee30 0a00 	vadd.f32	s0, s0, s0
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24013b9a:	eef0 6a48 	vmov.f32	s13, s16
    f->R2Plusg = f->R2+f->g;
24013b9e:	ee70 7a07 	vadd.f32	s15, s0, s14
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24013ba2:	ed84 0a04 	vstr	s0, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24013ba6:	eee7 6a27 	vfma.f32	s13, s14, s15
    f->R2Plusg = f->R2+f->g;
24013baa:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24013bae:	eec8 7a26 	vdiv.f32	s15, s16, s13
24013bb2:	edc4 7a05 	vstr	s15, [r4, #20]
}
24013bb6:	ecbd 8b02 	vpop	{d8}
24013bba:	bd10      	pop	{r4, pc}
24013bbc:	41f4898d 	.word	0x41f4898d

24013bc0 <tVZFilterBell_setGain>:

void    tVZFilterBell_setGain                  (tVZFilterBell* const vf, Lfloat gain)
{
24013bc0:	b510      	push	{r4, lr}
24013bc2:	ed2d 8b02 	vpush	{d8}
    _tVZFilterBell* f = *vf;
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
24013bc6:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    _tVZFilterBell* f = *vf;
24013bca:	6804      	ldr	r4, [r0, #0]
{
24013bcc:	eef0 0a40 	vmov.f32	s1, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24013bd0:	ed9f 1a18 	vldr	s2, [pc, #96]	; 24013c34 <tVZFilterBell_setGain+0x74>
24013bd4:	ed9f 0a18 	vldr	s0, [pc, #96]	; 24013c38 <tVZFilterBell_setGain+0x78>
24013bd8:	f001 f82e 	bl	24014c38 <LEAF_clip>
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
24013bdc:	eef0 5a48 	vmov.f32	s11, s16
24013be0:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
24013be4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
24013be8:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24013bec:	ed84 0a07 	vstr	s0, [r4, #28]
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
24013bf0:	eee7 5a07 	vfma.f32	s11, s14, s14
24013bf4:	eec5 7a87 	vdiv.f32	s15, s11, s14
24013bf8:	ee77 7ac6 	vsub.f32	s15, s15, s12
24013bfc:	ee67 7aa6 	vmul.f32	s15, s15, s13
24013c00:	ee87 0a80 	vdiv.f32	s0, s15, s0
24013c04:	f000 fede 	bl	240149c4 <fastsqrtf>
    f->R2Plusg = f->R2+f->g;
24013c08:	ed94 7a03 	vldr	s14, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
24013c0c:	ee30 0a00 	vadd.f32	s0, s0, s0
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24013c10:	eef0 6a48 	vmov.f32	s13, s16
    f->R2Plusg = f->R2+f->g;
24013c14:	ee70 7a07 	vadd.f32	s15, s0, s14
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
24013c18:	ed84 0a04 	vstr	s0, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24013c1c:	eee7 6a27 	vfma.f32	s13, s14, s15
    f->R2Plusg = f->R2+f->g;
24013c20:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24013c24:	eec8 7a26 	vdiv.f32	s15, s16, s13
24013c28:	edc4 7a05 	vstr	s15, [r4, #20]
}
24013c2c:	ecbd 8b02 	vpop	{d8}
24013c30:	bd10      	pop	{r4, pc}
24013c32:	bf00      	nop
24013c34:	457a0000 	.word	0x457a0000
24013c38:	358637bd 	.word	0x358637bd

24013c3c <tDiodeFilter_init>:

//taken from Ivan C's model of the EMS diode ladder, based on mystran's code from KVR forums
//https://www.kvraudio.com/forum/viewtopic.php?f=33&t=349859&start=255

void    tDiodeFilter_init           (tDiodeFilter* const vf, Lfloat cutoff, Lfloat resonance, LEAF* const leaf)
{
24013c3c:	b570      	push	{r4, r5, r6, lr}
24013c3e:	ed2d 8b02 	vpush	{d8}
    tDiodeFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tDiodeFilter_initToPool     (tDiodeFilter* const vf, Lfloat cutoff, Lfloat resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
24013c42:	698d      	ldr	r5, [r1, #24]
{
24013c44:	eeb0 8a40 	vmov.f32	s16, s0
24013c48:	4606      	mov	r6, r0
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
24013c4a:	2048      	movs	r0, #72	; 0x48
24013c4c:	4629      	mov	r1, r5
{
24013c4e:	eef0 8a60 	vmov.f32	s17, s1
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
24013c52:	f001 faf3 	bl	2401523c <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    // initialization (the resonance factor is between 0 and 8 according to the article)
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
24013c56:	ed9f 0a27 	vldr	s0, [pc, #156]	; 24013cf4 <tDiodeFilter_init+0xb8>
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
24013c5a:	6030      	str	r0, [r6, #0]
24013c5c:	4604      	mov	r4, r0
    f->mempool = m;
24013c5e:	6005      	str	r5, [r0, #0]
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
24013c60:	ee28 0a00 	vmul.f32	s0, s16, s0
    LEAF* leaf = f->mempool->leaf;
24013c64:	686d      	ldr	r5, [r5, #4]
    f->invSampleRate = leaf->invSampleRate;
24013c66:	edd5 7a01 	vldr	s15, [r5, #4]
    f->cutoff = cutoff;
24013c6a:	ed80 8a01 	vstr	s16, [r0, #4]
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
24013c6e:	ee20 0a27 	vmul.f32	s0, s0, s15
    f->invSampleRate = leaf->invSampleRate;
24013c72:	edc0 7a0f 	vstr	s15, [r0, #60]	; 0x3c
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
24013c76:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
24013c7a:	f006 fb79 	bl	2401a370 <tan>
24013c7e:	eef7 7bc0 	vcvt.f32.f64	s15, d0
    f->cutoffMIDI = ftom(cutoff);
24013c82:	eeb0 0a48 	vmov.f32	s0, s16
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
24013c86:	edc4 7a02 	vstr	s15, [r4, #8]
    f->cutoffMIDI = ftom(cutoff);
24013c8a:	f001 fa53 	bl	24015134 <ftom>
    f->r = (7.f * resonance + 0.5f);
24013c8e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24013c92:	eeb1 6a0c 	vmov.f32	s12, #28	; 0x40e00000  7.0
    f->Vt = 0.5f;
    f->n = 1.836f;
24013c96:	4b18      	ldr	r3, [pc, #96]	; (24013cf8 <tDiodeFilter_init+0xbc>)
    f->gamma = f->Vt*f->n;
    f->s0 = 0.01f;
    f->s1 = 0.02f;
    f->s2 = 0.03f;
    f->s3 = 0.04f;
    f->g0inv = 1.f/(2.f*f->Vt);
24013c98:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->zi = 0.0f; //previous input value
24013c9c:	2100      	movs	r1, #0
    f->r = (7.f * resonance + 0.5f);
24013c9e:	eef0 6a67 	vmov.f32	s13, s15
    f->n = 1.836f;
24013ca2:	6163      	str	r3, [r4, #20]
    f->gamma = f->Vt*f->n;
24013ca4:	4b15      	ldr	r3, [pc, #84]	; (24013cfc <tDiodeFilter_init+0xc0>)
    f->zi = 0.0f; //previous input value
24013ca6:	61e1      	str	r1, [r4, #28]
    f->r = (7.f * resonance + 0.5f);
24013ca8:	eee8 6a86 	vfma.f32	s13, s17, s12
    f->g0inv = 1.f/(2.f*f->Vt);
24013cac:	6222      	str	r2, [r4, #32]
    f->gamma = f->Vt*f->n;
24013cae:	61a3      	str	r3, [r4, #24]
    f->g1inv = 1.f/(2.f*f->gamma);
24013cb0:	4913      	ldr	r1, [pc, #76]	; (24013d00 <tDiodeFilter_init+0xc4>)
    f->g2inv = 1.f/(6.f*f->gamma);
24013cb2:	4a14      	ldr	r2, [pc, #80]	; (24013d04 <tDiodeFilter_init+0xc8>)
    f->s0 = 0.01f;
24013cb4:	4b14      	ldr	r3, [pc, #80]	; (24013d08 <tDiodeFilter_init+0xcc>)
    f->g1inv = 1.f/(2.f*f->gamma);
24013cb6:	6261      	str	r1, [r4, #36]	; 0x24
    f->g2inv = 1.f/(6.f*f->gamma);
24013cb8:	62a2      	str	r2, [r4, #40]	; 0x28
    f->s0 = 0.01f;
24013cba:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->s2 = 0.03f;
24013cbc:	4a13      	ldr	r2, [pc, #76]	; (24013d0c <tDiodeFilter_init+0xd0>)
    f->s3 = 0.04f;
24013cbe:	4b14      	ldr	r3, [pc, #80]	; (24013d10 <tDiodeFilter_init+0xd4>)
    f->s1 = 0.02f;
24013cc0:	4914      	ldr	r1, [pc, #80]	; (24013d14 <tDiodeFilter_init+0xd8>)
    f->s2 = 0.03f;
24013cc2:	6362      	str	r2, [r4, #52]	; 0x34
    f->s3 = 0.04f;
24013cc4:	63a3      	str	r3, [r4, #56]	; 0x38
    f->cutoffMIDI = ftom(cutoff);
24013cc6:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    f->Vt = 0.5f;
24013cca:	edc4 7a04 	vstr	s15, [r4, #16]
    f->r = (7.f * resonance + 0.5f);
24013cce:	edc4 6a03 	vstr	s13, [r4, #12]
    f->s1 = 0.02f;
24013cd2:	6321      	str	r1, [r4, #48]	; 0x30
    if (leaf->sampleRate > 90000)
24013cd4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 24013d18 <tDiodeFilter_init+0xdc>
24013cd8:	edd5 7a00 	vldr	s15, [r5]
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
24013cdc:	4a0f      	ldr	r2, [pc, #60]	; (24013d1c <tDiodeFilter_init+0xe0>)
24013cde:	eef4 7ac7 	vcmpe.f32	s15, s14
24013ce2:	4b0f      	ldr	r3, [pc, #60]	; (24013d20 <tDiodeFilter_init+0xe4>)
24013ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013ce8:	bfd8      	it	le
24013cea:	4613      	movle	r3, r2
24013cec:	6423      	str	r3, [r4, #64]	; 0x40
}
24013cee:	ecbd 8b02 	vpop	{d8}
24013cf2:	bd70      	pop	{r4, r5, r6, pc}
24013cf4:	40490fdb 	.word	0x40490fdb
24013cf8:	3feb020c 	.word	0x3feb020c
24013cfc:	3f6b020c 	.word	0x3f6b020c
24013d00:	3f0b6efd 	.word	0x3f0b6efd
24013d04:	3e39e952 	.word	0x3e39e952
24013d08:	3c23d70a 	.word	0x3c23d70a
24013d0c:	3cf5c28f 	.word	0x3cf5c28f
24013d10:	3d23d70a 	.word	0x3d23d70a
24013d14:	3ca3d70a 	.word	0x3ca3d70a
24013d18:	47afc800 	.word	0x47afc800
24013d1c:	2401cb14 	.word	0x2401cb14
24013d20:	24020b14 	.word	0x24020b14

24013d24 <tDiodeFilter_tick>:
}

volatile int errorCheckCheck = 0;
//#define SAFE_FILTER
Lfloat   tDiodeFilter_tick               (tDiodeFilter* const vf, Lfloat in)
{
24013d24:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
24013d26:	6804      	ldr	r4, [r0, #0]
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    Lfloat ih = 0.5f * (in + f->zi);
    
    // evaluate the non-linear factors
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24013d28:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013d2c:	eef2 4a0e 	vmov.f32	s9, #46	; 0x41700000  15.0
24013d30:	eddf 6aee 	vldr	s13, [pc, #952]	; 240140ec <tDiodeFilter_tick+0x3c8>
    if (testVal!= 0.0f)
24013d34:	eddf 5aee 	vldr	s11, [pc, #952]	; 240140f0 <tDiodeFilter_tick+0x3cc>
{
24013d38:	ed2d 8b06 	vpush	{d8-d10}
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24013d3c:	ed94 4a03 	vldr	s8, [r4, #12]
{
24013d40:	eeb0 9a40 	vmov.f32	s18, s0
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24013d44:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
    Lfloat ih = 0.5f * (in + f->zi);
24013d48:	ed94 6a07 	vldr	s12, [r4, #28]
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24013d4c:	ee67 7a44 	vnmul.f32	s15, s14, s8
24013d50:	ed94 5a08 	vldr	s10, [r4, #32]
    Lfloat ih = 0.5f * (in + f->zi);
24013d54:	ee30 6a06 	vadd.f32	s12, s0, s12
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24013d58:	ed94 2a02 	vldr	s4, [r4, #8]
24013d5c:	eee6 7a23 	vfma.f32	s15, s12, s7
24013d60:	ee67 7a85 	vmul.f32	s15, s15, s10
    Lfloat a = x*x;
24013d64:	ee67 7aa7 	vmul.f32	s15, s15, s15
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013d68:	eee7 6aa4 	vfma.f32	s13, s15, s9
24013d6c:	ee67 6aa6 	vmul.f32	s13, s15, s13
    if (testVal!= 0.0f)
24013d70:	eef4 6a65 	vcmp.f32	s13, s11
24013d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013d78:	f000 81aa 	beq.w	240140d0 <tDiodeFilter_tick+0x3ac>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013d7c:	ed9f 6add 	vldr	s12, [pc, #884]	; 240140f4 <tDiodeFilter_tick+0x3d0>
24013d80:	ee76 5a86 	vadd.f32	s11, s13, s12
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24013d84:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013d88:	eeb2 1a0e 	vmov.f32	s2, #46	; 0x41700000  15.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24013d8c:	edd4 3a0b 	vldr	s7, [r4, #44]	; 0x2c
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24013d90:	ee22 5a05 	vmul.f32	s10, s4, s10
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24013d94:	edd4 2a09 	vldr	s5, [r4, #36]	; 0x24
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
    
    // This formula gives the result for y3 thanks to MATLAB
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24013d98:	eef0 8a08 	vmov.f32	s17, #8	; 0x40400000  3.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24013d9c:	ee70 6a63 	vsub.f32	s13, s0, s7
    return ((a + 105.0f)*a + 945.0f) / output;
24013da0:	eddf 1ad4 	vldr	s3, [pc, #848]	; 240140f4 <tDiodeFilter_tick+0x3d0>
24013da4:	eddf 4ad4 	vldr	s9, [pc, #848]	; 240140f8 <tDiodeFilter_tick+0x3d4>
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24013da8:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
24013dac:	eef0 0a61 	vmov.f32	s1, s3
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013db0:	ed9f 6ace 	vldr	s12, [pc, #824]	; 240140ec <tDiodeFilter_tick+0x3c8>
    return ((a + 105.0f)*a + 945.0f) / output;
24013db4:	ee77 4aa4 	vadd.f32	s9, s15, s9
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24013db8:	ee66 6aa2 	vmul.f32	s13, s13, s5
    return ((a + 105.0f)*a + 945.0f) / output;
24013dbc:	eee7 0aa4 	vfma.f32	s1, s15, s9
    if (testVal!= 0.0f)
24013dc0:	eddf 4acb 	vldr	s9, [pc, #812]	; 240140f0 <tDiodeFilter_tick+0x3cc>
    Lfloat a = x*x;
24013dc4:	ee66 6aa6 	vmul.f32	s13, s13, s13
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013dc8:	eef0 7a46 	vmov.f32	s15, s12
24013dcc:	ed9f 6ac7 	vldr	s12, [pc, #796]	; 240140ec <tDiodeFilter_tick+0x3c8>
24013dd0:	eee6 7a81 	vfma.f32	s15, s13, s2
    return ((a + 105.0f)*a + 945.0f) / output;
24013dd4:	ed9f 1ac7 	vldr	s2, [pc, #796]	; 240140f4 <tDiodeFilter_tick+0x3d0>
24013dd8:	ee80 3aa5 	vdiv.f32	s6, s1, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013ddc:	ee66 7aa7 	vmul.f32	s15, s13, s15
24013de0:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
    return ((a + 105.0f)*a + 945.0f) / output;
24013de4:	eeb0 8a41 	vmov.f32	s16, s2
    if (testVal!= 0.0f)
24013de8:	eef4 7a64 	vcmp.f32	s15, s9
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24013dec:	edd4 4a0d 	vldr	s9, [r4, #52]	; 0x34
    if (testVal!= 0.0f)
24013df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013df4:	bf18      	it	ne
24013df6:	ee77 5aa1 	vaddne.f32	s11, s15, s3
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24013dfa:	ee74 7ac0 	vsub.f32	s15, s9, s0
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24013dfe:	ee23 3a05 	vmul.f32	s6, s6, s10
    return ((a + 105.0f)*a + 945.0f) / output;
24013e02:	ed9f 5abd 	vldr	s10, [pc, #756]	; 240140f8 <tDiodeFilter_tick+0x3d4>
    Lfloat output = 1.0f;
24013e06:	bf08      	it	eq
24013e08:	eef7 5a00 	vmoveq.f32	s11, #112	; 0x3f800000  1.0
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24013e0c:	ee67 7aa2 	vmul.f32	s15, s15, s5
    return ((a + 105.0f)*a + 945.0f) / output;
24013e10:	ee36 5a85 	vadd.f32	s10, s13, s10
24013e14:	ee62 1a22 	vmul.f32	s3, s4, s5
    Lfloat a = x*x;
24013e18:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return ((a + 105.0f)*a + 945.0f) / output;
24013e1c:	eea6 8a85 	vfma.f32	s16, s13, s10
24013e20:	ed9f 5ab5 	vldr	s10, [pc, #724]	; 240140f8 <tDiodeFilter_tick+0x3d4>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013e24:	eea7 6aa0 	vfma.f32	s12, s15, s1
    return ((a + 105.0f)*a + 945.0f) / output;
24013e28:	ee37 5a85 	vadd.f32	s10, s15, s10
24013e2c:	eec8 6a25 	vdiv.f32	s13, s16, s11
    if (testVal!= 0.0f)
24013e30:	eddf 5aaf 	vldr	s11, [pc, #700]	; 240140f0 <tDiodeFilter_tick+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013e34:	ee27 6a86 	vmul.f32	s12, s15, s12
    if (testVal!= 0.0f)
24013e38:	eeb4 6a65 	vcmp.f32	s12, s11
24013e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013e40:	bf18      	it	ne
24013e42:	ee76 5a01 	vaddne.f32	s11, s12, s2
    return ((a + 105.0f)*a + 945.0f) / output;
24013e46:	ed9f 1aab 	vldr	s2, [pc, #684]	; 240140f4 <tDiodeFilter_tick+0x3d0>
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
24013e4a:	ee37 6a64 	vsub.f32	s12, s14, s9
    return ((a + 105.0f)*a + 945.0f) / output;
24013e4e:	eef0 0a41 	vmov.f32	s1, s2
    Lfloat output = 1.0f;
24013e52:	bf08      	it	eq
24013e54:	eef7 5a00 	vmoveq.f32	s11, #112	; 0x3f800000  1.0
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
24013e58:	ee26 6a22 	vmul.f32	s12, s12, s5
    return ((a + 105.0f)*a + 945.0f) / output;
24013e5c:	eee7 0a85 	vfma.f32	s1, s15, s10
    if (testVal!= 0.0f)
24013e60:	ed9f 5aa3 	vldr	s10, [pc, #652]	; 240140f0 <tDiodeFilter_tick+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013e64:	eef2 2a0e 	vmov.f32	s5, #46	; 0x41700000  15.0
    Lfloat a = x*x;
24013e68:	ee26 6a06 	vmul.f32	s12, s12, s12
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24013e6c:	ee66 6aa1 	vmul.f32	s13, s13, s3
    return ((a + 105.0f)*a + 945.0f) / output;
24013e70:	eec0 7aa5 	vdiv.f32	s15, s1, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013e74:	eddf 5a9d 	vldr	s11, [pc, #628]	; 240140ec <tDiodeFilter_tick+0x3c8>
24013e78:	eee6 5a22 	vfma.f32	s11, s12, s5
    return ((a + 105.0f)*a + 945.0f) / output;
24013e7c:	eddf 2a9d 	vldr	s5, [pc, #628]	; 240140f4 <tDiodeFilter_tick+0x3d0>
24013e80:	eef0 0a62 	vmov.f32	s1, s5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013e84:	ee66 5a25 	vmul.f32	s11, s12, s11
    if (testVal!= 0.0f)
24013e88:	eef4 5a45 	vcmp.f32	s11, s10
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24013e8c:	ee67 7aa1 	vmul.f32	s15, s15, s3
    if (testVal!= 0.0f)
24013e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013e94:	bf18      	it	ne
24013e96:	ee35 5a81 	vaddne.f32	s10, s11, s2
    return ((a + 105.0f)*a + 945.0f) / output;
24013e9a:	eddf 5a97 	vldr	s11, [pc, #604]	; 240140f8 <tDiodeFilter_tick+0x3d4>
    Lfloat output = 1.0f;
24013e9e:	bf08      	it	eq
24013ea0:	eeb7 5a00 	vmoveq.f32	s10, #112	; 0x3f800000  1.0
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24013ea4:	ed94 1a0a 	vldr	s2, [r4, #40]	; 0x28
    return ((a + 105.0f)*a + 945.0f) / output;
24013ea8:	ee76 5a25 	vadd.f32	s11, s12, s11
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24013eac:	ee22 2a01 	vmul.f32	s4, s4, s2
    return ((a + 105.0f)*a + 945.0f) / output;
24013eb0:	eee6 0a25 	vfma.f32	s1, s12, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013eb4:	ed9f 6a8d 	vldr	s12, [pc, #564]	; 240140ec <tDiodeFilter_tick+0x3c8>
    return ((a + 105.0f)*a + 945.0f) / output;
24013eb8:	eec0 5a85 	vdiv.f32	s11, s1, s10
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24013ebc:	ee27 5a01 	vmul.f32	s10, s14, s2
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013ec0:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
24013ec4:	ee37 1a00 	vadd.f32	s2, s14, s0
    Lfloat a = x*x;
24013ec8:	ee25 5a05 	vmul.f32	s10, s10, s10
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013ecc:	eea5 6a20 	vfma.f32	s12, s10, s1
    return ((a + 105.0f)*a + 945.0f) / output;
24013ed0:	eddf 0a88 	vldr	s1, [pc, #544]	; 240140f4 <tDiodeFilter_tick+0x3d0>
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
24013ed4:	ee65 5aa1 	vmul.f32	s11, s11, s3
    if (testVal!= 0.0f)
24013ed8:	eddf 1a85 	vldr	s3, [pc, #532]	; 240140f0 <tDiodeFilter_tick+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013edc:	ee26 6a05 	vmul.f32	s12, s12, s10
    if (testVal!= 0.0f)
24013ee0:	eeb4 6a61 	vcmp.f32	s12, s3
    return ((a + 105.0f)*a + 945.0f) / output;
24013ee4:	eddf 1a84 	vldr	s3, [pc, #528]	; 240140f8 <tDiodeFilter_tick+0x3d4>
24013ee8:	ee75 1a21 	vadd.f32	s3, s10, s3
    if (testVal!= 0.0f)
24013eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    return ((a + 105.0f)*a + 945.0f) / output;
24013ef0:	eee5 0a21 	vfma.f32	s1, s10, s3
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013ef4:	bf14      	ite	ne
24013ef6:	ee76 2a22 	vaddne.f32	s5, s12, s5
    Lfloat output = 1.0f;
24013efa:	eef7 2a00 	vmoveq.f32	s5, #112	; 0x3f800000  1.0
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24013efe:	ee37 6a24 	vadd.f32	s12, s14, s9
24013f02:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
    return ((a + 105.0f)*a + 945.0f) / output;
24013f06:	ee80 5aa2 	vdiv.f32	s10, s1, s5
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24013f0a:	ee73 2aa4 	vadd.f32	s5, s7, s9
24013f0e:	ee74 0a81 	vadd.f32	s1, s9, s2
24013f12:	ee72 2a81 	vadd.f32	s5, s5, s2
24013f16:	eeb0 1a60 	vmov.f32	s2, s1
24013f1a:	eef0 0a61 	vmov.f32	s1, s3
24013f1e:	eee9 2a03 	vfma.f32	s5, s18, s6
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24013f22:	ee25 5a02 	vmul.f32	s10, s10, s4
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24013f26:	eea2 1aa6 	vfma.f32	s2, s5, s13
24013f2a:	ee76 2a06 	vadd.f32	s5, s12, s12
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24013f2e:	eeb1 2a00 	vmov.f32	s4, #16	; 0x40800000  4.0
24013f32:	ee35 8a28 	vadd.f32	s16, s10, s17
24013f36:	eea6 6aa2 	vfma.f32	s12, s13, s5
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24013f3a:	ee67 2a26 	vmul.f32	s5, s14, s13
24013f3e:	eee5 0a21 	vfma.f32	s1, s10, s3
24013f42:	eea1 6a27 	vfma.f32	s12, s2, s15
24013f46:	eeb0 1a47 	vmov.f32	s2, s14
24013f4a:	eea2 1aa1 	vfma.f32	s2, s5, s3
24013f4e:	ee62 2aa8 	vmul.f32	s5, s5, s17
24013f52:	eee7 2a21 	vfma.f32	s5, s14, s3
24013f56:	eea2 1aa7 	vfma.f32	s2, s5, s15
24013f5a:	eef0 2a41 	vmov.f32	s5, s2
24013f5e:	eeb0 1a42 	vmov.f32	s2, s4
24013f62:	eee6 2a25 	vfma.f32	s5, s12, s11
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24013f66:	eea4 1a03 	vfma.f32	s2, s8, s6
24013f6a:	eeb0 6a42 	vmov.f32	s12, s4
24013f6e:	eea5 6a21 	vfma.f32	s12, s10, s3
24013f72:	ee35 2a01 	vadd.f32	s4, s10, s2
24013f76:	ee35 1a29 	vadd.f32	s2, s10, s19
24013f7a:	eea2 8a26 	vfma.f32	s16, s4, s13
24013f7e:	ee35 2a21 	vadd.f32	s4, s10, s3
24013f82:	eea6 2a26 	vfma.f32	s4, s12, s13
24013f86:	eeb0 6a45 	vmov.f32	s12, s10
24013f8a:	eea8 2a27 	vfma.f32	s4, s16, s15
24013f8e:	ee21 8a26 	vmul.f32	s16, s2, s13
24013f92:	eee8 0a28 	vfma.f32	s1, s16, s17
24013f96:	eea8 6a21 	vfma.f32	s12, s16, s3
24013f9a:	eea0 6aa7 	vfma.f32	s12, s1, s15
24013f9e:	eea2 6a25 	vfma.f32	s12, s4, s11
    if (isnan(tempy3denom))
    {
        errorCheck = 2;
    }
#endif
    if (tempy3denom == 0.0f)
24013fa2:	eebf 2a00 	vmov.f32	s4, #240	; 0xbf800000 -1.0
24013fa6:	eeb4 6a42 	vcmp.f32	s12, s4
24013faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
24013fae:	eef5 6a40 	vcmp.f32	s13, #0.0
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24013fb2:	bf14      	ite	ne
24013fb4:	ee36 6a29 	vaddne.f32	s12, s12, s19
        tempy3denom = 0.000001f;
24013fb8:	ed9f 6a50 	vldreq	s12, [pc, #320]	; 240140fc <tDiodeFilter_tick+0x3d8>
    if (t1 == 0.0f)
24013fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
24013fc0:	ee82 2a86 	vdiv.f32	s4, s5, s12
    if (t1 == 0.0f)
24013fc4:	f000 808c 	beq.w	240140e0 <tDiodeFilter_tick+0x3bc>
24013fc8:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
24013fcc:	ee76 1aa1 	vadd.f32	s3, s13, s3
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
24013fd0:	eef5 7a40 	vcmp.f32	s15, #0.0
24013fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013fd8:	d07d      	beq.n	240140d6 <tDiodeFilter_tick+0x3b2>
24013fda:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
24013fde:	ee77 2aa2 	vadd.f32	s5, s15, s5
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
24013fe2:	eef5 5a40 	vcmp.f32	s11, #0.0
    }
    // Other outputs
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
    Lfloat xx = (in - f->r*y3);
24013fe6:	ee24 aa02 	vmul.f32	s20, s8, s4
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24013fea:	eeb0 4a47 	vmov.f32	s8, s14
    if (t3 == 0.0f)
24013fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013ff2:	eef0 0a64 	vmov.f32	s1, s9
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
24013ff6:	ee77 1aa1 	vadd.f32	s3, s15, s3
        t3 = 0.000001f;
24013ffa:	bf08      	it	eq
24013ffc:	eddf 5a3f 	vldreq	s11, [pc, #252]	; 240140fc <tDiodeFilter_tick+0x3d8>
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24014000:	ee31 1a25 	vadd.f32	s2, s2, s11
24014004:	eee5 0a82 	vfma.f32	s1, s11, s4
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
24014008:	ee75 2aa2 	vadd.f32	s5, s11, s5
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
2401400c:	ee91 4a02 	vfnms.f32	s8, s2, s4
24014010:	eeb0 1a40 	vmov.f32	s2, s0
24014014:	ee84 6a25 	vdiv.f32	s12, s8, s11
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
24014018:	eeb0 4a60 	vmov.f32	s8, s1
    Lfloat xx = (in - f->r*y3);
2401401c:	ee79 0a4a 	vsub.f32	s1, s18, s20
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
24014020:	ee92 4a86 	vfnms.f32	s8, s5, s12
24014024:	eea7 1a86 	vfma.f32	s2, s15, s12
24014028:	eec4 2a27 	vdiv.f32	s5, s8, s15
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
2401402c:	ee91 1aa2 	vfnms.f32	s2, s3, s5
24014030:	ee81 4a26 	vdiv.f32	s8, s2, s13
    
    // update state
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24014034:	ee32 4ac4 	vsub.f32	s8, s5, s8
    if (errorCheck != 0)
    {
        errorCheckCheck = errorCheck;
    }
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24014038:	ee76 2a62 	vsub.f32	s5, s12, s5
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
2401403c:	ee32 6a46 	vsub.f32	s12, s4, s12
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24014040:	ee64 6a26 	vmul.f32	s13, s8, s13
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24014044:	ee26 6a25 	vmul.f32	s12, s12, s11
24014048:	eef0 1a66 	vmov.f32	s3, s13
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
2401404c:	eee3 6a20 	vfma.f32	s13, s6, s1
24014050:	eeb0 4a46 	vmov.f32	s8, s12
24014054:	eed2 1aa7 	vfnms.f32	s3, s5, s15
24014058:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
2401405c:	eea2 4ae7 	vfms.f32	s8, s5, s15
24014060:	eea5 6a02 	vfma.f32	s12, s10, s4
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
    
    f->s0 = tanhf(f->s0);
24014064:	eee6 3aa5 	vfma.f32	s7, s13, s11
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24014068:	eea1 0aa5 	vfma.f32	s0, s3, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
2401406c:	eee4 4a25 	vfma.f32	s9, s8, s11
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
24014070:	eea6 7a65 	vfms.f32	s14, s12, s11
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24014074:	eef0 9a40 	vmov.f32	s19, s0
    f->s0 = tanhf(f->s0);
24014078:	eeb0 0a63 	vmov.f32	s0, s7
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
2401407c:	eef0 8a64 	vmov.f32	s17, s9
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
24014080:	eeb0 8a47 	vmov.f32	s16, s14
    f->s0 = tanhf(f->s0);
24014084:	f006 f90a 	bl	2401a29c <tanhf>
24014088:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    f->s1 = tanhf(f->s1);
2401408c:	eeb0 0a69 	vmov.f32	s0, s19
24014090:	f006 f904 	bl	2401a29c <tanhf>
24014094:	eef0 7a40 	vmov.f32	s15, s0
    f->s2 = tanhf(f->s2);
24014098:	eeb0 0a68 	vmov.f32	s0, s17
    f->s1 = tanhf(f->s1);
2401409c:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->s2 = tanhf(f->s2);
240140a0:	f006 f8fc 	bl	2401a29c <tanhf>
240140a4:	eef0 7a40 	vmov.f32	s15, s0
    f->s3 = tanhf(f->s3);
240140a8:	eeb0 0a48 	vmov.f32	s0, s16
    f->s2 = tanhf(f->s2);
240140ac:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    f->s3 = tanhf(f->s3);
240140b0:	f006 f8f4 	bl	2401a29c <tanhf>
240140b4:	eef0 7a40 	vmov.f32	s15, s0
    f->zi = in;
240140b8:	ed84 9a07 	vstr	s18, [r4, #28]
    return tanhf(y3*f->r);
240140bc:	eeb0 0a4a 	vmov.f32	s0, s20
    f->s3 = tanhf(f->s3);
240140c0:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
}
240140c4:	ecbd 8b06 	vpop	{d8-d10}
240140c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tanhf(y3*f->r);
240140cc:	f006 b8e6 	b.w	2401a29c <tanhf>
    Lfloat output = 1.0f;
240140d0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
240140d4:	e656      	b.n	24013d84 <tDiodeFilter_tick+0x60>
240140d6:	eddf 2a0a 	vldr	s5, [pc, #40]	; 24014100 <tDiodeFilter_tick+0x3dc>
        t2 = 0.000001f;
240140da:	eddf 7a08 	vldr	s15, [pc, #32]	; 240140fc <tDiodeFilter_tick+0x3d8>
240140de:	e780      	b.n	24013fe2 <tDiodeFilter_tick+0x2be>
240140e0:	eddf 1a07 	vldr	s3, [pc, #28]	; 24014100 <tDiodeFilter_tick+0x3dc>
        t1 = 0.000001f;
240140e4:	eddf 6a05 	vldr	s13, [pc, #20]	; 240140fc <tDiodeFilter_tick+0x3d8>
240140e8:	e772      	b.n	24013fd0 <tDiodeFilter_tick+0x2ac>
240140ea:	bf00      	nop
240140ec:	43d20000 	.word	0x43d20000
240140f0:	c46c4000 	.word	0xc46c4000
240140f4:	446c4000 	.word	0x446c4000
240140f8:	42d20000 	.word	0x42d20000
240140fc:	358637bd 	.word	0x358637bd
24014100:	3f800008 	.word	0x3f800008

24014104 <tDiodeFilter_tickEfficient>:

//#define SAFE_FILTER
Lfloat   tDiodeFilter_tickEfficient               (tDiodeFilter* const vf, Lfloat in)
{
24014104:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
24014106:	6804      	ldr	r4, [r0, #0]
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    Lfloat ih = 0.5f * (in + f->zi);

    // evaluate the non-linear factors
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24014108:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401410c:	eeb2 4a0e 	vmov.f32	s8, #46	; 0x41700000  15.0
24014110:	ed9f 7aee 	vldr	s14, [pc, #952]	; 240144cc <tDiodeFilter_tickEfficient+0x3c8>
    if (testVal!= 0.0f)
24014114:	eddf 5aee 	vldr	s11, [pc, #952]	; 240144d0 <tDiodeFilter_tickEfficient+0x3cc>
{
24014118:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
2401411c:	ed94 5a03 	vldr	s10, [r4, #12]
{
24014120:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24014124:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
    Lfloat ih = 0.5f * (in + f->zi);
24014128:	ed94 6a07 	vldr	s12, [r4, #28]
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
2401412c:	ee66 7ac5 	vnmul.f32	s15, s13, s10
24014130:	edd4 4a08 	vldr	s9, [r4, #32]
    Lfloat ih = 0.5f * (in + f->zi);
24014134:	ee30 6a06 	vadd.f32	s12, s0, s12
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24014138:	ed94 2a02 	vldr	s4, [r4, #8]
2401413c:	eee6 7a23 	vfma.f32	s15, s12, s7
24014140:	ee67 7aa4 	vmul.f32	s15, s15, s9
    Lfloat a = x*x;
24014144:	ee67 7aa7 	vmul.f32	s15, s15, s15
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24014148:	eea7 7a84 	vfma.f32	s14, s15, s8
2401414c:	ee27 7a87 	vmul.f32	s14, s15, s14
    if (testVal!= 0.0f)
24014150:	eeb4 7a65 	vcmp.f32	s14, s11
24014154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014158:	f000 81aa 	beq.w	240144b0 <tDiodeFilter_tickEfficient+0x3ac>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401415c:	ed9f 6add 	vldr	s12, [pc, #884]	; 240144d4 <tDiodeFilter_tickEfficient+0x3d0>
24014160:	ee77 5a06 	vadd.f32	s11, s14, s12
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24014164:	edd4 3a0c 	vldr	s7, [r4, #48]	; 0x30
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24014168:	eeb2 1a0e 	vmov.f32	s2, #46	; 0x41700000  15.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
2401416c:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24014170:	ee62 4a24 	vmul.f32	s9, s4, s9
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24014174:	edd4 2a09 	vldr	s5, [r4, #36]	; 0x24
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;

    // This formula gives the result for y3 thanks to MATLAB
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24014178:	eeb0 9a08 	vmov.f32	s18, #8	; 0x40400000  3.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
2401417c:	ee33 7ac0 	vsub.f32	s14, s7, s0
    return ((a + 105.0f)*a + 945.0f) / output;
24014180:	eddf 1ad4 	vldr	s3, [pc, #848]	; 240144d4 <tDiodeFilter_tickEfficient+0x3d0>
24014184:	ed9f 4ad4 	vldr	s8, [pc, #848]	; 240144d8 <tDiodeFilter_tickEfficient+0x3d4>
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24014188:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
2401418c:	eef0 0a61 	vmov.f32	s1, s3
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24014190:	ed9f 6ace 	vldr	s12, [pc, #824]	; 240144cc <tDiodeFilter_tickEfficient+0x3c8>
    return ((a + 105.0f)*a + 945.0f) / output;
24014194:	ee37 4a84 	vadd.f32	s8, s15, s8
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24014198:	ee27 7a22 	vmul.f32	s14, s14, s5
    return ((a + 105.0f)*a + 945.0f) / output;
2401419c:	eee7 0a84 	vfma.f32	s1, s15, s8
    if (testVal!= 0.0f)
240141a0:	ed9f 4acb 	vldr	s8, [pc, #812]	; 240144d0 <tDiodeFilter_tickEfficient+0x3cc>
    Lfloat a = x*x;
240141a4:	ee27 7a07 	vmul.f32	s14, s14, s14
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240141a8:	eef0 7a46 	vmov.f32	s15, s12
240141ac:	ed9f 6ac7 	vldr	s12, [pc, #796]	; 240144cc <tDiodeFilter_tickEfficient+0x3c8>
240141b0:	eee7 7a01 	vfma.f32	s15, s14, s2
    return ((a + 105.0f)*a + 945.0f) / output;
240141b4:	ed9f 1ac7 	vldr	s2, [pc, #796]	; 240144d4 <tDiodeFilter_tickEfficient+0x3d0>
240141b8:	ee80 3aa5 	vdiv.f32	s6, s1, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240141bc:	ee67 7a27 	vmul.f32	s15, s14, s15
240141c0:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
    return ((a + 105.0f)*a + 945.0f) / output;
240141c4:	eef0 8a41 	vmov.f32	s17, s2
    if (testVal!= 0.0f)
240141c8:	eef4 7a44 	vcmp.f32	s15, s8
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
240141cc:	ed94 4a0d 	vldr	s8, [r4, #52]	; 0x34
    if (testVal!= 0.0f)
240141d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240141d4:	bf18      	it	ne
240141d6:	ee77 5aa1 	vaddne.f32	s11, s15, s3
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
240141da:	ee74 7a63 	vsub.f32	s15, s8, s7
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
240141de:	ee23 3a24 	vmul.f32	s6, s6, s9
    return ((a + 105.0f)*a + 945.0f) / output;
240141e2:	eddf 4abd 	vldr	s9, [pc, #756]	; 240144d8 <tDiodeFilter_tickEfficient+0x3d4>
    Lfloat output = 1.0f;
240141e6:	bf08      	it	eq
240141e8:	eef7 5a00 	vmoveq.f32	s11, #112	; 0x3f800000  1.0
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
240141ec:	ee67 7aa2 	vmul.f32	s15, s15, s5
    return ((a + 105.0f)*a + 945.0f) / output;
240141f0:	ee77 4a24 	vadd.f32	s9, s14, s9
240141f4:	ee62 1a22 	vmul.f32	s3, s4, s5
    Lfloat a = x*x;
240141f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return ((a + 105.0f)*a + 945.0f) / output;
240141fc:	eee7 8a24 	vfma.f32	s17, s14, s9
24014200:	eddf 4ab5 	vldr	s9, [pc, #724]	; 240144d8 <tDiodeFilter_tickEfficient+0x3d4>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24014204:	eea7 6aa0 	vfma.f32	s12, s15, s1
    return ((a + 105.0f)*a + 945.0f) / output;
24014208:	ee77 4aa4 	vadd.f32	s9, s15, s9
2401420c:	ee88 7aa5 	vdiv.f32	s14, s17, s11
    if (testVal!= 0.0f)
24014210:	eddf 5aaf 	vldr	s11, [pc, #700]	; 240144d0 <tDiodeFilter_tickEfficient+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24014214:	ee27 6a86 	vmul.f32	s12, s15, s12
    if (testVal!= 0.0f)
24014218:	eeb4 6a65 	vcmp.f32	s12, s11
2401421c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24014220:	bf18      	it	ne
24014222:	ee76 5a01 	vaddne.f32	s11, s12, s2
    return ((a + 105.0f)*a + 945.0f) / output;
24014226:	ed9f 1aab 	vldr	s2, [pc, #684]	; 240144d4 <tDiodeFilter_tickEfficient+0x3d0>
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
2401422a:	ee36 6ac4 	vsub.f32	s12, s13, s8
    return ((a + 105.0f)*a + 945.0f) / output;
2401422e:	eef0 0a41 	vmov.f32	s1, s2
    Lfloat output = 1.0f;
24014232:	bf08      	it	eq
24014234:	eef7 5a00 	vmoveq.f32	s11, #112	; 0x3f800000  1.0
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
24014238:	ee26 6a22 	vmul.f32	s12, s12, s5
    return ((a + 105.0f)*a + 945.0f) / output;
2401423c:	eee7 0aa4 	vfma.f32	s1, s15, s9
    if (testVal!= 0.0f)
24014240:	eddf 4aa3 	vldr	s9, [pc, #652]	; 240144d0 <tDiodeFilter_tickEfficient+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24014244:	eef2 2a0e 	vmov.f32	s5, #46	; 0x41700000  15.0
    Lfloat a = x*x;
24014248:	ee26 6a06 	vmul.f32	s12, s12, s12
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
2401424c:	ee27 7a21 	vmul.f32	s14, s14, s3
    return ((a + 105.0f)*a + 945.0f) / output;
24014250:	eec0 7aa5 	vdiv.f32	s15, s1, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24014254:	eddf 5a9d 	vldr	s11, [pc, #628]	; 240144cc <tDiodeFilter_tickEfficient+0x3c8>
24014258:	eee6 5a22 	vfma.f32	s11, s12, s5
    return ((a + 105.0f)*a + 945.0f) / output;
2401425c:	eddf 2a9d 	vldr	s5, [pc, #628]	; 240144d4 <tDiodeFilter_tickEfficient+0x3d0>
24014260:	eef0 0a62 	vmov.f32	s1, s5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24014264:	ee66 5a25 	vmul.f32	s11, s12, s11
    if (testVal!= 0.0f)
24014268:	eef4 5a64 	vcmp.f32	s11, s9
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
2401426c:	ee67 7aa1 	vmul.f32	s15, s15, s3
    if (testVal!= 0.0f)
24014270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24014274:	bf18      	it	ne
24014276:	ee75 4a81 	vaddne.f32	s9, s11, s2
    return ((a + 105.0f)*a + 945.0f) / output;
2401427a:	eddf 5a97 	vldr	s11, [pc, #604]	; 240144d8 <tDiodeFilter_tickEfficient+0x3d4>
    Lfloat output = 1.0f;
2401427e:	bf08      	it	eq
24014280:	eef7 4a00 	vmoveq.f32	s9, #112	; 0x3f800000  1.0
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24014284:	ed94 1a0a 	vldr	s2, [r4, #40]	; 0x28
    return ((a + 105.0f)*a + 945.0f) / output;
24014288:	ee76 5a25 	vadd.f32	s11, s12, s11
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
2401428c:	ee22 2a01 	vmul.f32	s4, s4, s2
    return ((a + 105.0f)*a + 945.0f) / output;
24014290:	eee6 0a25 	vfma.f32	s1, s12, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24014294:	ed9f 6a8d 	vldr	s12, [pc, #564]	; 240144cc <tDiodeFilter_tickEfficient+0x3c8>
    return ((a + 105.0f)*a + 945.0f) / output;
24014298:	eec0 5aa4 	vdiv.f32	s11, s1, s9
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
2401429c:	ee66 4a81 	vmul.f32	s9, s13, s2
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240142a0:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
240142a4:	ee36 1aa3 	vadd.f32	s2, s13, s7
    Lfloat a = x*x;
240142a8:	ee64 4aa4 	vmul.f32	s9, s9, s9
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240142ac:	eea4 6aa0 	vfma.f32	s12, s9, s1
    return ((a + 105.0f)*a + 945.0f) / output;
240142b0:	eddf 0a88 	vldr	s1, [pc, #544]	; 240144d4 <tDiodeFilter_tickEfficient+0x3d0>
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
240142b4:	ee65 5aa1 	vmul.f32	s11, s11, s3
    if (testVal!= 0.0f)
240142b8:	eddf 1a85 	vldr	s3, [pc, #532]	; 240144d0 <tDiodeFilter_tickEfficient+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240142bc:	ee26 6a24 	vmul.f32	s12, s12, s9
    if (testVal!= 0.0f)
240142c0:	eeb4 6a61 	vcmp.f32	s12, s3
    return ((a + 105.0f)*a + 945.0f) / output;
240142c4:	eddf 1a84 	vldr	s3, [pc, #528]	; 240144d8 <tDiodeFilter_tickEfficient+0x3d4>
240142c8:	ee74 1aa1 	vadd.f32	s3, s9, s3
    if (testVal!= 0.0f)
240142cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    return ((a + 105.0f)*a + 945.0f) / output;
240142d0:	eee4 0aa1 	vfma.f32	s1, s9, s3
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240142d4:	bf14      	ite	ne
240142d6:	ee76 2a22 	vaddne.f32	s5, s12, s5
    Lfloat output = 1.0f;
240142da:	eef7 2a00 	vmoveq.f32	s5, #112	; 0x3f800000  1.0
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
240142de:	ee36 6a84 	vadd.f32	s12, s13, s8
240142e2:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
    return ((a + 105.0f)*a + 945.0f) / output;
240142e6:	eec0 4aa2 	vdiv.f32	s9, s1, s5
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
240142ea:	ee70 2a04 	vadd.f32	s5, s0, s8
240142ee:	ee74 0a01 	vadd.f32	s1, s8, s2
240142f2:	ee72 2a81 	vadd.f32	s5, s5, s2
240142f6:	eeb0 1a60 	vmov.f32	s2, s1
240142fa:	eef0 0a61 	vmov.f32	s1, s3
240142fe:	eee8 2a03 	vfma.f32	s5, s16, s6
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24014302:	ee64 4a82 	vmul.f32	s9, s9, s4
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24014306:	eea2 1a87 	vfma.f32	s2, s5, s14
2401430a:	ee76 2a06 	vadd.f32	s5, s12, s12
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
2401430e:	eeb1 2a00 	vmov.f32	s4, #16	; 0x40800000  4.0
24014312:	ee74 8a89 	vadd.f32	s17, s9, s18
24014316:	eea7 6a22 	vfma.f32	s12, s14, s5
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
2401431a:	ee66 2a87 	vmul.f32	s5, s13, s14
2401431e:	eee4 0aa1 	vfma.f32	s1, s9, s3
24014322:	eea1 6a27 	vfma.f32	s12, s2, s15
24014326:	eeb0 1a66 	vmov.f32	s2, s13
2401432a:	eea2 1aa1 	vfma.f32	s2, s5, s3
2401432e:	ee62 2a89 	vmul.f32	s5, s5, s18
24014332:	eee6 2aa1 	vfma.f32	s5, s13, s3
24014336:	eea2 1aa7 	vfma.f32	s2, s5, s15
2401433a:	eef0 2a41 	vmov.f32	s5, s2
2401433e:	eeb0 1a42 	vmov.f32	s2, s4
24014342:	eee6 2a25 	vfma.f32	s5, s12, s11
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24014346:	eea5 1a03 	vfma.f32	s2, s10, s6
2401434a:	eeb0 6a42 	vmov.f32	s12, s4
2401434e:	eea4 6aa1 	vfma.f32	s12, s9, s3
24014352:	ee34 2a81 	vadd.f32	s4, s9, s2
24014356:	ee34 1aa9 	vadd.f32	s2, s9, s19
2401435a:	eee2 8a07 	vfma.f32	s17, s4, s14
2401435e:	ee34 2aa1 	vadd.f32	s4, s9, s3
24014362:	eea6 2a07 	vfma.f32	s4, s12, s14
24014366:	eeb0 6a64 	vmov.f32	s12, s9
2401436a:	eea8 2aa7 	vfma.f32	s4, s17, s15
2401436e:	ee61 8a07 	vmul.f32	s17, s2, s14
24014372:	eee8 0a89 	vfma.f32	s1, s17, s18
24014376:	eea8 6aa1 	vfma.f32	s12, s17, s3
2401437a:	eea0 6aa7 	vfma.f32	s12, s1, s15
2401437e:	eea2 6a25 	vfma.f32	s12, s4, s11
    {
        errorCheck = 2;
    }

#endif
    if (tempy3denom == 0.0f)
24014382:	eebf 2a00 	vmov.f32	s4, #240	; 0xbf800000 -1.0
24014386:	eeb4 6a42 	vcmp.f32	s12, s4
2401438a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
2401438e:	eeb5 7a40 	vcmp.f32	s14, #0.0
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24014392:	bf14      	ite	ne
24014394:	ee36 6a29 	vaddne.f32	s12, s12, s19
        tempy3denom = 0.000001f;
24014398:	ed9f 6a50 	vldreq	s12, [pc, #320]	; 240144dc <tDiodeFilter_tickEfficient+0x3d8>
    if (t1 == 0.0f)
2401439c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
240143a0:	eec2 8a86 	vdiv.f32	s17, s5, s12
    if (t1 == 0.0f)
240143a4:	f000 808c 	beq.w	240144c0 <tDiodeFilter_tickEfficient+0x3bc>
240143a8:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
240143ac:	ee77 2a22 	vadd.f32	s5, s14, s5
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
240143b0:	eef5 7a40 	vcmp.f32	s15, #0.0
240143b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240143b8:	d07d      	beq.n	240144b6 <tDiodeFilter_tickEfficient+0x3b2>
240143ba:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
240143be:	ee37 2a82 	vadd.f32	s4, s15, s4
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
240143c2:	eef5 5a40 	vcmp.f32	s11, #0.0

    // Other outputs
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
    Lfloat xx = (in - f->r*y3);
240143c6:	eef0 0a48 	vmov.f32	s1, s16
240143ca:	eef0 1a44 	vmov.f32	s3, s8
    if (t3 == 0.0f)
240143ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat xx = (in - f->r*y3);
240143d2:	eee5 0a68 	vfms.f32	s1, s10, s17
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
240143d6:	eeb0 5a66 	vmov.f32	s10, s13
        t3 = 0.000001f;
240143da:	bf08      	it	eq
240143dc:	eddf 5a3f 	vldreq	s11, [pc, #252]	; 240144dc <tDiodeFilter_tickEfficient+0x3d8>
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
240143e0:	ee77 2aa2 	vadd.f32	s5, s15, s5
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
240143e4:	ee31 1a25 	vadd.f32	s2, s2, s11
240143e8:	eee5 1aa8 	vfma.f32	s3, s11, s17
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
240143ec:	ee35 2a82 	vadd.f32	s4, s11, s4
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
240143f0:	ee91 5a28 	vfnms.f32	s10, s2, s17
240143f4:	ee85 6a25 	vdiv.f32	s12, s10, s11
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
240143f8:	eed2 1a06 	vfnms.f32	s3, s4, s12
240143fc:	eeb0 2a63 	vmov.f32	s4, s7
24014400:	eea7 2a86 	vfma.f32	s4, s15, s12
24014404:	ee81 5aa7 	vdiv.f32	s10, s3, s15
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
24014408:	ee92 2a85 	vfnms.f32	s4, s5, s10
    if (errorCheck != 0)
    {
        errorCheckCheck = errorCheck;
    }
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
2401440c:	ee76 2a45 	vsub.f32	s5, s12, s10
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24014410:	ee38 6ac6 	vsub.f32	s12, s17, s12
24014414:	ee26 6a25 	vmul.f32	s12, s12, s11
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
24014418:	eec2 1a07 	vdiv.f32	s3, s4, s14
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
2401441c:	eeb0 2a46 	vmov.f32	s4, s12
24014420:	eea4 6aa8 	vfma.f32	s12, s9, s17
24014424:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
24014428:	eea2 2ae7 	vfms.f32	s4, s5, s15
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
2401442c:	eee6 6a65 	vfms.f32	s13, s12, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24014430:	eea2 4a25 	vfma.f32	s8, s4, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24014434:	ee35 5a61 	vsub.f32	s10, s10, s3
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
24014438:	edc4 6a0e 	vstr	s13, [r4, #56]	; 0x38
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
2401443c:	ee25 5a07 	vmul.f32	s10, s10, s14
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24014440:	ed84 4a0d 	vstr	s8, [r4, #52]	; 0x34
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24014444:	eeb0 7a45 	vmov.f32	s14, s10
24014448:	ee92 5aa7 	vfnms.f32	s10, s5, s15
2401444c:	eea3 7a20 	vfma.f32	s14, s6, s1
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24014450:	eee5 3a25 	vfma.f32	s7, s10, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24014454:	eea7 0a25 	vfma.f32	s0, s14, s11
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24014458:	edc4 3a0c 	vstr	s7, [r4, #48]	; 0x30
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
2401445c:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    f->s0 = fast_tanh4(f->s0);
24014460:	f000 fc16 	bl	24014c90 <fast_tanh4>
24014464:	eef0 7a40 	vmov.f32	s15, s0
    f->s1 = fast_tanh4(f->s1);
24014468:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
    f->s0 = fast_tanh4(f->s0);
2401446c:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
    f->s1 = fast_tanh4(f->s1);
24014470:	f000 fc0e 	bl	24014c90 <fast_tanh4>
24014474:	eef0 7a40 	vmov.f32	s15, s0
    f->s2 = fast_tanh4(f->s2);
24014478:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
    f->s1 = fast_tanh4(f->s1);
2401447c:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->s2 = fast_tanh4(f->s2);
24014480:	f000 fc06 	bl	24014c90 <fast_tanh4>
24014484:	eef0 7a40 	vmov.f32	s15, s0
    f->s3 = fast_tanh4(f->s3);
24014488:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
    f->s2 = fast_tanh4(f->s2);
2401448c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    f->s3 = fast_tanh4(f->s3);
24014490:	f000 fbfe 	bl	24014c90 <fast_tanh4>
    f->zi = in;
    return fast_tanh4(y3*f->r);
24014494:	edd4 7a03 	vldr	s15, [r4, #12]
    f->s3 = fast_tanh4(f->s3);
24014498:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
    f->zi = in;
2401449c:	ed84 8a07 	vstr	s16, [r4, #28]
    return fast_tanh4(y3*f->r);
240144a0:	ee28 0aa7 	vmul.f32	s0, s17, s15
}
240144a4:	ecbd 8b04 	vpop	{d8-d9}
240144a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return fast_tanh4(y3*f->r);
240144ac:	f000 bbf0 	b.w	24014c90 <fast_tanh4>
    Lfloat output = 1.0f;
240144b0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
240144b4:	e656      	b.n	24014164 <tDiodeFilter_tickEfficient+0x60>
240144b6:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 240144e0 <tDiodeFilter_tickEfficient+0x3dc>
        t2 = 0.000001f;
240144ba:	eddf 7a08 	vldr	s15, [pc, #32]	; 240144dc <tDiodeFilter_tickEfficient+0x3d8>
240144be:	e780      	b.n	240143c2 <tDiodeFilter_tickEfficient+0x2be>
240144c0:	eddf 2a07 	vldr	s5, [pc, #28]	; 240144e0 <tDiodeFilter_tickEfficient+0x3dc>
        t1 = 0.000001f;
240144c4:	ed9f 7a05 	vldr	s14, [pc, #20]	; 240144dc <tDiodeFilter_tickEfficient+0x3d8>
240144c8:	e772      	b.n	240143b0 <tDiodeFilter_tickEfficient+0x2ac>
240144ca:	bf00      	nop
240144cc:	43d20000 	.word	0x43d20000
240144d0:	c46c4000 	.word	0xc46c4000
240144d4:	446c4000 	.word	0x446c4000
240144d8:	42d20000 	.word	0x42d20000
240144dc:	358637bd 	.word	0x358637bd
240144e0:	3f800008 	.word	0x3f800008

240144e4 <tDiodeFilter_setFreqFast>:

void    tDiodeFilter_setFreqFast     (tDiodeFilter* const vf, Lfloat cutoff)
{
	_tDiodeFilter* f = *vf;
	f->cutoffMIDI = cutoff;
	cutoff *= 30.567164179104478f; // span of midinotes 0-134.0f (frequency range up to around 19000.0f)
240144e4:	eddf 7a15 	vldr	s15, [pc, #84]	; 2401453c <tDiodeFilter_setFreqFast+0x58>
240144e8:	f640 7cfe 	movw	ip, #4094	; 0xffe
	_tDiodeFilter* f = *vf;
240144ec:	6801      	ldr	r1, [r0, #0]
    if (intVer < 0)
    {
    	intVer = 0;
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
240144ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	cutoff *= 30.567164179104478f; // span of midinotes 0-134.0f (frequency range up to around 19000.0f)
240144f2:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
240144f6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
	f->cutoffMIDI = cutoff;
240144f8:	ed81 0a11 	vstr	s0, [r1, #68]	; 0x44
    int32_t intVer = (int32_t)cutoff;
240144fc:	eefd 6ae7 	vcvt.s32.f32	s13, s15
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
24014500:	ee37 7a67 	vsub.f32	s14, s14, s15
    int32_t intVer = (int32_t)cutoff;
24014504:	ee16 3a90 	vmov	r3, s13
24014508:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
2401450c:	4563      	cmp	r3, ip
2401450e:	bfa8      	it	ge
24014510:	4663      	movge	r3, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24014512:	ee06 3a90 	vmov	s13, r3
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
24014516:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
2401451a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
2401451e:	edd3 5a01 	vldr	s11, [r3, #4]
24014522:	ed93 6a00 	vldr	s12, [r3]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24014526:	ee77 7ae6 	vsub.f32	s15, s15, s13
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
2401452a:	ee37 7a26 	vadd.f32	s14, s14, s13
2401452e:	ee67 7aa5 	vmul.f32	s15, s15, s11
24014532:	eee6 7a07 	vfma.f32	s15, s12, s14
24014536:	edc1 7a02 	vstr	s15, [r1, #8]
}
2401453a:	4770      	bx	lr
2401453c:	41f4898d 	.word	0x41f4898d

24014540 <tDiodeFilter_setQ>:

void    tDiodeFilter_setQ     (tDiodeFilter* const vf, Lfloat resonance)
{
    _tDiodeFilter* f = *vf;
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
24014540:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24014544:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
24014548:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
2401454c:	eef0 0a67 	vmov.f32	s1, s15
{
24014550:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
24014552:	6804      	ldr	r4, [r0, #0]
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
24014554:	eee0 0a07 	vfma.f32	s1, s0, s14
24014558:	eeb0 0a67 	vmov.f32	s0, s15
2401455c:	f000 fb6c 	bl	24014c38 <LEAF_clip>
24014560:	ed84 0a03 	vstr	s0, [r4, #12]
}
24014564:	bd10      	pop	{r4, pc}
24014566:	bf00      	nop

24014568 <tDiodeFilter_setSampleRate>:

void    tDiodeFilter_setSampleRate(tDiodeFilter* const vf, Lfloat sr)
{
    _tDiodeFilter* f = *vf;
    
    f->invSampleRate = 1.0f/sr;
24014568:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    if (sr > 90000)
2401456c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 24014590 <tDiodeFilter_setSampleRate+0x28>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
24014570:	4908      	ldr	r1, [pc, #32]	; (24014594 <tDiodeFilter_setSampleRate+0x2c>)
24014572:	eeb4 0ac7 	vcmpe.f32	s0, s14
24014576:	4b08      	ldr	r3, [pc, #32]	; (24014598 <tDiodeFilter_setSampleRate+0x30>)
    f->invSampleRate = 1.0f/sr;
24014578:	eec6 7a80 	vdiv.f32	s15, s13, s0
    _tDiodeFilter* f = *vf;
2401457c:	6802      	ldr	r2, [r0, #0]
    	f->table = __filterTanhTable_48000;
2401457e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014582:	bfd8      	it	le
24014584:	460b      	movle	r3, r1
24014586:	6413      	str	r3, [r2, #64]	; 0x40
    f->invSampleRate = 1.0f/sr;
24014588:	edc2 7a0f 	vstr	s15, [r2, #60]	; 0x3c
    }
}
2401458c:	4770      	bx	lr
2401458e:	bf00      	nop
24014590:	47afc800 	.word	0x47afc800
24014594:	2401cb14 	.word	0x2401cb14
24014598:	24020b14 	.word	0x24020b14

2401459c <tLadderFilter_init>:


void    tLadderFilter_init           (tLadderFilter* const vf, Lfloat cutoff, Lfloat resonance, LEAF* const leaf)
{
2401459c:	b570      	push	{r4, r5, r6, lr}
2401459e:	ed2d 8b02 	vpush	{d8}
    tLadderFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tLadderFilter_initToPool     (tLadderFilter* const vf, Lfloat cutoff, Lfloat resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
240145a2:	698d      	ldr	r5, [r1, #24]
{
240145a4:	4606      	mov	r6, r0
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
240145a6:	2040      	movs	r0, #64	; 0x40
{
240145a8:	eeb0 8a40 	vmov.f32	s16, s0
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
240145ac:	4629      	mov	r1, r5
{
240145ae:	eef0 8a60 	vmov.f32	s17, s1
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
240145b2:	f000 fe43 	bl	2401523c <mpool_alloc>
240145b6:	6030      	str	r0, [r6, #0]
    f->mempool = m;
240145b8:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    f->cutoffMIDI = ftom(cutoff);
240145ba:	eeb0 0a48 	vmov.f32	s0, s16
    LEAF* leaf = f->mempool->leaf;
240145be:	686d      	ldr	r5, [r5, #4]
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
240145c0:	4604      	mov	r4, r0
    f->invSampleRate = leaf->invSampleRate;
240145c2:	686b      	ldr	r3, [r5, #4]
    f->cutoff = cutoff;
240145c4:	ed80 8a01 	vstr	s16, [r0, #4]
    f->invSampleRate = leaf->invSampleRate;
240145c8:	6083      	str	r3, [r0, #8]
    f->cutoffMIDI = ftom(cutoff);
240145ca:	f000 fdb3 	bl	24015134 <ftom>
    f->oversampling = 1;
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
240145ce:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 24014640 <tLadderFilter_init+0xa4>
    f->cutoffMIDI = ftom(cutoff);
240145d2:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
    f->oversampling = 1;
240145d6:	2301      	movs	r3, #1
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
240145d8:	ee28 0a07 	vmul.f32	s0, s16, s14
240145dc:	edd4 7a02 	vldr	s15, [r4, #8]
    f->oversampling = 1;
240145e0:	60e3      	str	r3, [r4, #12]
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
240145e2:	ee20 0a27 	vmul.f32	s0, s0, s15
240145e6:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
240145ea:	f005 fec1 	bl	2401a370 <tan>
    f->c2 = 2.0f * f->c;
    //resonance / feedback is from 0 to 4 for 100%, further "drives" feedback
    f->fb = (resonance * 8.0f);
240145ee:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
240145f2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0

    // shaper coefficients, offset, scale, shape
    // very quick approximation, close enough for me to tanh
    // yet far more flexible
    f->a = 2.0f;
240145f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f->s = 0.1f;
    f->d = 1.0f;
240145fa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->s = 0.1f;
240145fe:	4911      	ldr	r1, [pc, #68]	; (24014644 <tLadderFilter_init+0xa8>)
    f->fb = (resonance * 8.0f);
24014600:	ee68 8aa6 	vmul.f32	s17, s17, s13
    f->a = 2.0f;
24014604:	61e3      	str	r3, [r4, #28]
    f->c2 = 2.0f * f->c;
24014606:	ee30 7a00 	vadd.f32	s14, s0, s0
    
    
    f->b[0] = 0.01f;
    f->b[0] = 0.02f;
    f->b[0] = 0.03f;
    f->b[0] = 0.04f;
2401460a:	4b0f      	ldr	r3, [pc, #60]	; (24014648 <tLadderFilter_init+0xac>)
    f->d = 1.0f;
2401460c:	6262      	str	r2, [r4, #36]	; 0x24
    f->b[0] = 0.04f;
2401460e:	62a3      	str	r3, [r4, #40]	; 0x28
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
24014610:	ed84 0a04 	vstr	s0, [r4, #16]
    f->s = 0.1f;
24014614:	6221      	str	r1, [r4, #32]
    f->c2 = 2.0f * f->c;
24014616:	ed84 7a06 	vstr	s14, [r4, #24]
    f->fb = (resonance * 8.0f);
2401461a:	edc4 8a05 	vstr	s17, [r4, #20]
    if (leaf->sampleRate > 90000)
2401461e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 2401464c <tLadderFilter_init+0xb0>
24014622:	ed95 7a00 	vldr	s14, [r5]
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
24014626:	4a0a      	ldr	r2, [pc, #40]	; (24014650 <tLadderFilter_init+0xb4>)
24014628:	eeb4 7ae7 	vcmpe.f32	s14, s15
2401462c:	4b09      	ldr	r3, [pc, #36]	; (24014654 <tLadderFilter_init+0xb8>)
2401462e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014632:	bfd8      	it	le
24014634:	4613      	movle	r3, r2
24014636:	63a3      	str	r3, [r4, #56]	; 0x38
}
24014638:	ecbd 8b02 	vpop	{d8}
2401463c:	bd70      	pop	{r4, r5, r6, pc}
2401463e:	bf00      	nop
24014640:	40490fdb 	.word	0x40490fdb
24014644:	3dcccccd 	.word	0x3dcccccd
24014648:	3d23d70a 	.word	0x3d23d70a
2401464c:	47afc800 	.word	0x47afc800
24014650:	2401cb14 	.word	0x2401cb14
24014654:	24020b14 	.word	0x24020b14

24014658 <tLadderFilter_tick>:
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
}

Lfloat   tLadderFilter_tick               (tLadderFilter* const vf, Lfloat in)
{
    _tLadderFilter* f = *vf;
24014658:	6802      	ldr	r2, [r0, #0]
    
    Lfloat y3 = 0.0f;
    in += 0.015f;
2401465a:	eddf 7a90 	vldr	s15, [pc, #576]	; 2401489c <tLadderFilter_tick+0x244>
{
2401465e:	ed2d 8b10 	vpush	{d8-d15}
    // per-sample computation
    for (int i = 0; i < f->oversampling; i++) {
24014662:	68d1      	ldr	r1, [r2, #12]
    in += 0.015f;
24014664:	ee30 0a27 	vadd.f32	s0, s0, s15
    for (int i = 0; i < f->oversampling; i++) {
24014668:	2900      	cmp	r1, #0
2401466a:	f340 8112 	ble.w	24014892 <tLadderFilter_tick+0x23a>
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
2401466e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
        Lfloat t1 = tanhd(f->b[1] + f->a, f->d, f->s);
        Lfloat t2 = tanhd(f->b[2] + f->a, f->d, f->s);
        Lfloat t3 = tanhd(f->b[3] + f->a, f->d, f->s);
        
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
24014672:	ed92 5a04 	vldr	s10, [r2, #16]
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
24014676:	ed92 2a09 	vldr	s4, [r2, #36]	; 0x24
    Lfloat  x2 = smoothABS (x-b, 0.01f);
2401467a:	eebf aa00 	vmov.f32	s20, #240	; 0xbf800000 -1.0
        Lfloat z1 = f->c*t1 / (1.0f + f->c*t1);
        Lfloat z2 = f->c*t2 / (1.0f + f->c*t2);
        Lfloat z3 = f->c*t3 / (1.0f + f->c*t3);
        
        Lfloat f3 = f->c       * t2*g3;
        Lfloat f2 = f->c*f->c     * t1*g2 * t2*g3;
2401467e:	ee65 8a05 	vmul.f32	s17, s10, s10
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
24014682:	ed92 7a08 	vldr	s14, [r2, #32]
24014686:	ee72 2a27 	vadd.f32	s5, s4, s15
2401468a:	ed92 3a0a 	vldr	s6, [r2, #40]	; 0x28
        Lfloat estimate =
        g3 * f->b[3] +
        f3 * g2 * f->b[2] +
        f2 * g1 * f->b[1] +
        f1 * g0 * f->b[0] +
        f0 * in;
2401468e:	ee65 aa00 	vmul.f32	s21, s10, s0
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
24014692:	ed92 1a07 	vldr	s2, [r2, #28]
        // i believe in the original this is computed incorrectly?
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
        
        // clamp can be a hard clip, a diode + highpass is better
        // if you implement a highpass do not forget to include it in the computation of the gain coefficients!
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
24014696:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
2401469a:	edd2 3a0b 	vldr	s7, [r2, #44]	; 0x2c
        Lfloat f1 = f->c*f->c*f->c   * t0*g1 * t1*g2 * t2*g3;
2401469e:	ee25 9a28 	vmul.f32	s18, s10, s17
240146a2:	ed92 4a0c 	vldr	s8, [r2, #48]	; 0x30
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
240146a6:	ee62 2a87 	vmul.f32	s5, s5, s14
240146aa:	edd2 4a0d 	vldr	s9, [r2, #52]	; 0x34
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
240146ae:	edd2 0a05 	vldr	s1, [r2, #20]
    for (int i = 0; i < f->oversampling; i++) {
240146b2:	2300      	movs	r3, #0
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
        
        // update the stored state
        f->b[0] += f->c2 * (xx - y0);
240146b4:	edd2 1a06 	vldr	s3, [r2, #24]
		return (sqrtf((x * x)  + y)) - sqrtf(y);
240146b8:	ed9f 8a79 	vldr	s16, [pc, #484]	; 240148a0 <tLadderFilter_tick+0x248>
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
240146bc:	ee71 5a03 	vadd.f32	s11, s2, s6
    for (int i = 0; i < f->oversampling; i++) {
240146c0:	3301      	adds	r3, #1
        Lfloat t1 = tanhd(f->b[1] + f->a, f->d, f->s);
240146c2:	ee31 6a23 	vadd.f32	s12, s2, s7
        Lfloat t2 = tanhd(f->b[2] + f->a, f->d, f->s);
240146c6:	ee71 6a04 	vadd.f32	s13, s2, s8
    for (int i = 0; i < f->oversampling; i++) {
240146ca:	428b      	cmp	r3, r1
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
240146cc:	ee65 5aa5 	vmul.f32	s11, s11, s11
240146d0:	ee26 6a06 	vmul.f32	s12, s12, s12
240146d4:	ee66 6aa6 	vmul.f32	s13, s13, s13
240146d8:	ee22 baa5 	vmul.f32	s22, s5, s11
240146dc:	ee26 ca22 	vmul.f32	s24, s12, s5
240146e0:	ee72 5a25 	vadd.f32	s11, s4, s11
240146e4:	ee32 6a06 	vadd.f32	s12, s4, s12
240146e8:	ee66 baa2 	vmul.f32	s23, s13, s5
240146ec:	eecb ea25 	vdiv.f32	s29, s22, s11
240146f0:	eecc 5a06 	vdiv.f32	s11, s24, s12
240146f4:	ee72 6a26 	vadd.f32	s13, s4, s13
        Lfloat t3 = tanhd(f->b[3] + f->a, f->d, f->s);
240146f8:	ee31 7a24 	vadd.f32	s14, s2, s9
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
240146fc:	ee8b 6aa6 	vdiv.f32	s12, s23, s13
24014700:	ee27 7a07 	vmul.f32	s14, s14, s14
24014704:	ee77 eaee 	vsub.f32	s29, s15, s29
24014708:	ee77 6ae5 	vsub.f32	s13, s15, s11
2401470c:	ee22 ba87 	vmul.f32	s22, s5, s14
24014710:	ee32 7a07 	vadd.f32	s14, s4, s14
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
24014714:	ee65 5a2e 	vmul.f32	s11, s10, s29
        Lfloat g1 = 1.0f / (1.0f + f->c*t1);
24014718:	ee25 ea26 	vmul.f32	s28, s10, s13
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
2401471c:	eecb ca07 	vdiv.f32	s25, s22, s14
        Lfloat g1 = 1.0f / (1.0f + f->c*t1);
24014720:	ee7e da27 	vadd.f32	s27, s28, s15
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
24014724:	ee37 7ac6 	vsub.f32	s14, s15, s12
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
24014728:	ee35 6aa7 	vadd.f32	s12, s11, s15
        Lfloat g2 = 1.0f / (1.0f + f->c*t2);
2401472c:	ee25 da07 	vmul.f32	s26, s10, s14
        Lfloat z0 = f->c*t0 / (1.0f + f->c*t0);
24014730:	eec5 ba86 	vdiv.f32	s23, s11, s12
        Lfloat z1 = f->c*t1 / (1.0f + f->c*t1);
24014734:	eece 5a2d 	vdiv.f32	s11, s28, s27
        Lfloat g2 = 1.0f / (1.0f + f->c*t2);
24014738:	ee3d ca27 	vadd.f32	s24, s26, s15
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
2401473c:	ee77 caec 	vsub.f32	s25, s15, s25
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
24014740:	ee87 fa86 	vdiv.f32	s30, s15, s12
        Lfloat z2 = f->c*t2 / (1.0f + f->c*t2);
24014744:	ee8d ea0c 	vdiv.f32	s28, s26, s24
        Lfloat g3 = 1.0f / (1.0f + f->c*t3);
24014748:	ee25 ba2c 	vmul.f32	s22, s10, s25
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
2401474c:	ee6b baa5 	vmul.f32	s23, s23, s11
        Lfloat g1 = 1.0f / (1.0f + f->c*t1);
24014750:	ee87 6aad 	vdiv.f32	s12, s15, s27
        Lfloat g3 = 1.0f / (1.0f + f->c*t3);
24014754:	ee7b 5a27 	vadd.f32	s11, s22, s15
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
24014758:	ee6b baa0 	vmul.f32	s23, s23, s1
        Lfloat g2 = 1.0f / (1.0f + f->c*t2);
2401475c:	eec7 da8c 	vdiv.f32	s27, s15, s24
        Lfloat g3 = 1.0f / (1.0f + f->c*t3);
24014760:	ee87 caa5 	vdiv.f32	s24, s15, s11
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
24014764:	ee6b ba8e 	vmul.f32	s23, s23, s28
        Lfloat z3 = f->c*t3 / (1.0f + f->c*t3);
24014768:	ee8b ea25 	vdiv.f32	s28, s22, s11
        Lfloat estimate =
2401476c:	ee73 5a2a 	vadd.f32	s11, s6, s21
24014770:	ee27 ba26 	vmul.f32	s22, s14, s13
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
24014774:	ee66 6a26 	vmul.f32	s13, s12, s13
24014778:	ee65 5a89 	vmul.f32	s11, s11, s18
2401477c:	ee2b ba06 	vmul.f32	s22, s22, s12
        Lfloat y0 = t0 * g0 * (f->b[0] + f->c * xx);
24014780:	ee2f 6a2e 	vmul.f32	s12, s30, s29
24014784:	ee65 5aae 	vmul.f32	s11, s11, s29
24014788:	ee60 ea8c 	vmul.f32	s29, s1, s24
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
2401478c:	ee2c ca2c 	vmul.f32	s24, s24, s25
24014790:	ee65 5a8f 	vmul.f32	s11, s11, s30
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
24014794:	eef0 ca67 	vmov.f32	s25, s15
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
24014798:	ee2d 7a87 	vmul.f32	s14, s27, s14
2401479c:	eee3 5aa8 	vfma.f32	s11, s7, s17
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
240147a0:	eeeb ca8e 	vfma.f32	s25, s23, s28
240147a4:	ee6b 5a25 	vmul.f32	s11, s22, s11
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
240147a8:	eec9 baac 	vdiv.f32	s23, s19, s25
240147ac:	eeed 5a04 	vfma.f32	s11, s26, s8
240147b0:	eef0 ca64 	vmov.f32	s25, s9
    Lfloat  x1 = smoothABS (x-a, 0.01f);
240147b4:	eeb0 ba67 	vmov.f32	s22, s15
		return (sqrtf((x * x)  + y)) - sqrtf(y);
240147b8:	eeb0 da48 	vmov.f32	s26, s16
240147bc:	eeed caa5 	vfma.f32	s25, s27, s11
    Lfloat  x2 = smoothABS (x-b, 0.01f);
240147c0:	eef0 5a4a 	vmov.f32	s11, s20
    Lfloat  x1 = smoothABS (x-a, 0.01f);
240147c4:	eeac baae 	vfma.f32	s22, s25, s29
    Lfloat  x2 = smoothABS (x-b, 0.01f);
240147c8:	eeec 5aae 	vfma.f32	s11, s25, s29
		return (sqrtf((x * x)  + y)) - sqrtf(y);
240147cc:	eef0 ca48 	vmov.f32	s25, s16
240147d0:	eeab da0b 	vfma.f32	s26, s22, s22
240147d4:	eee5 caa5 	vfma.f32	s25, s11, s11
240147d8:	eef1 5acd 	vsqrt.f32	s11, s26
240147dc:	eeb1 baec 	vsqrt.f32	s22, s25
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
240147e0:	ee3b ba65 	vsub.f32	s22, s22, s11
240147e4:	eef0 5a40 	vmov.f32	s11, s0
240147e8:	eeeb 5a2b 	vfma.f32	s11, s22, s23
        Lfloat y0 = t0 * g0 * (f->b[0] + f->c * xx);
240147ec:	eeb0 ba43 	vmov.f32	s22, s6
240147f0:	eea5 ba25 	vfma.f32	s22, s10, s11
240147f4:	ee26 6a0b 	vmul.f32	s12, s12, s22
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
240147f8:	eeb0 ba63 	vmov.f32	s22, s7
        f->b[0] += f->c2 * (xx - y0);
240147fc:	ee75 5ac6 	vsub.f32	s11, s11, s12
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
24014800:	eea5 ba06 	vfma.f32	s22, s10, s12
        f->b[0] += f->c2 * (xx - y0);
24014804:	eea1 3aa5 	vfma.f32	s6, s3, s11
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
24014808:	eef0 5a44 	vmov.f32	s11, s8
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
2401480c:	ee66 6a8b 	vmul.f32	s13, s13, s22
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
24014810:	eee5 5a26 	vfma.f32	s11, s10, s13
        f->b[1] += f->c2 * (y0 - y1);
24014814:	ee36 6a66 	vsub.f32	s12, s12, s13
24014818:	eee1 3a86 	vfma.f32	s7, s3, s12
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
2401481c:	eeb0 6a64 	vmov.f32	s12, s9
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
24014820:	ee27 7a25 	vmul.f32	s14, s14, s11
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
24014824:	eea5 6a07 	vfma.f32	s12, s10, s14
        f->b[2] += f->c2 * (y1 - y2);
24014828:	ee76 6ac7 	vsub.f32	s13, s13, s14
2401482c:	eea1 4aa6 	vfma.f32	s8, s3, s13
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
24014830:	ee2c ca06 	vmul.f32	s24, s24, s12
        f->b[3] += f->c2 * (y2 - y3);
24014834:	ee37 7a4c 	vsub.f32	s14, s14, s24
24014838:	eee1 4a87 	vfma.f32	s9, s3, s14
    for (int i = 0; i < f->oversampling; i++) {
2401483c:	f47f af3e 	bne.w	240146bc <tLadderFilter_tick+0x64>
24014840:	ed82 3a0a 	vstr	s6, [r2, #40]	; 0x28
24014844:	edc2 3a0b 	vstr	s7, [r2, #44]	; 0x2c
24014848:	ed82 4a0c 	vstr	s8, [r2, #48]	; 0x30
2401484c:	edc2 4a0d 	vstr	s9, [r2, #52]	; 0x34
		return (sqrtf((x * x)  + y)) - sqrtf(y);
24014850:	eddf 7a13 	vldr	s15, [pc, #76]	; 240148a0 <tLadderFilter_tick+0x248>
    Lfloat  x2 = smoothABS (x-b, 0.01f);
24014854:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
    }
    
    // you must limit the compensation if feedback is clamped
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
24014858:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
		return (sqrtf((x * x)  + y)) - sqrtf(y);
2401485c:	eeb0 5a67 	vmov.f32	s10, s15
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
24014860:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
		return (sqrtf((x * x)  + y)) - sqrtf(y);
24014864:	eea0 5aa0 	vfma.f32	s10, s1, s1
    Lfloat  x2 = smoothABS (x-b, 0.01f);
24014868:	ee70 0ac6 	vsub.f32	s1, s1, s12
		return (sqrtf((x * x)  + y)) - sqrtf(y);
2401486c:	eee0 7aa0 	vfma.f32	s15, s1, s1
24014870:	eeb0 7a67 	vmov.f32	s14, s15
24014874:	eef1 7ac5 	vsqrt.f32	s15, s10
24014878:	eeb1 5ac7 	vsqrt.f32	s10, s14
    x = x - x2;
2401487c:	ee77 7a86 	vadd.f32	s15, s15, s12
24014880:	ee77 7ac5 	vsub.f32	s15, s15, s10
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
24014884:	eea7 0aa5 	vfma.f32	s0, s15, s11
    return y3 * compensation;
}
24014888:	ee20 0a0c 	vmul.f32	s0, s0, s24
2401488c:	ecbd 8b10 	vpop	{d8-d15}
24014890:	4770      	bx	lr
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
24014892:	edd2 0a05 	vldr	s1, [r2, #20]
    Lfloat y3 = 0.0f;
24014896:	ed9f ca03 	vldr	s24, [pc, #12]	; 240148a4 <tLadderFilter_tick+0x24c>
2401489a:	e7d9      	b.n	24014850 <tLadderFilter_tick+0x1f8>
2401489c:	3c75c28f 	.word	0x3c75c28f
240148a0:	3c23d70a 	.word	0x3c23d70a
240148a4:	00000000 	.word	0x00000000

240148a8 <tLadderFilter_setFreqFast>:

void    tLadderFilter_setFreqFast     (tLadderFilter* const vf, Lfloat cutoff)
{
    _tLadderFilter* f = *vf;
    f->cutoffMIDI = cutoff;
    cutoff *= 30.567164179104478f;
240148a8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 24014908 <tLadderFilter_setFreqFast+0x60>
240148ac:	f640 7cfe 	movw	ip, #4094	; 0xffe
    _tLadderFilter* f = *vf;
240148b0:	6802      	ldr	r2, [r0, #0]
    {
    	intVer = 0;
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;

    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
240148b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    cutoff *= 30.567164179104478f;
240148b6:	ee20 7a07 	vmul.f32	s14, s0, s14
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
240148ba:	6b91      	ldr	r1, [r2, #56]	; 0x38
    f->cutoffMIDI = cutoff;
240148bc:	ed82 0a0f 	vstr	s0, [r2, #60]	; 0x3c
    int32_t intVer = (int32_t)cutoff;
240148c0:	eefd 7ac7 	vcvt.s32.f32	s15, s14
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
240148c4:	ee76 6ac7 	vsub.f32	s13, s13, s14
    int32_t intVer = (int32_t)cutoff;
240148c8:	ee17 3a90 	vmov	r3, s15
240148cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
240148d0:	4563      	cmp	r3, ip
240148d2:	bfa8      	it	ge
240148d4:	4663      	movge	r3, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
240148d6:	ee07 3a90 	vmov	s15, r3
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
240148da:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
240148de:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
240148e2:	ed93 5a01 	vldr	s10, [r3, #4]
240148e6:	edd3 5a00 	vldr	s11, [r3]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
240148ea:	ee77 7a46 	vsub.f32	s15, s14, s12
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
240148ee:	ee36 7a86 	vadd.f32	s14, s13, s12
240148f2:	ee67 7a85 	vmul.f32	s15, s15, s10
240148f6:	eee5 7a87 	vfma.f32	s15, s11, s14
    f->c2 = 2.0f * f->c;
240148fa:	ee37 7aa7 	vadd.f32	s14, s15, s15
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
240148fe:	edc2 7a04 	vstr	s15, [r2, #16]
    f->c2 = 2.0f * f->c;
24014902:	ed82 7a06 	vstr	s14, [r2, #24]
}
24014906:	4770      	bx	lr
24014908:	41f4898d 	.word	0x41f4898d

2401490c <tLadderFilter_setQ>:

void    tLadderFilter_setQ     (tLadderFilter* const vf, Lfloat resonance)
{
2401490c:	b510      	push	{r4, lr}
    _tLadderFilter* f = *vf;
2401490e:	6804      	ldr	r4, [r0, #0]
{
24014910:	eef0 0a40 	vmov.f32	s1, s0
    f->fb = LEAF_clip(0.2f, resonance, 24.0f);
24014914:	eeb3 1a08 	vmov.f32	s2, #56	; 0x41c00000  24.0
24014918:	ed9f 0a03 	vldr	s0, [pc, #12]	; 24014928 <tLadderFilter_setQ+0x1c>
2401491c:	f000 f98c 	bl	24014c38 <LEAF_clip>
24014920:	ed84 0a05 	vstr	s0, [r4, #20]
}
24014924:	bd10      	pop	{r4, pc}
24014926:	bf00      	nop
24014928:	3e4ccccd 	.word	0x3e4ccccd

2401492c <tLadderFilter_setSampleRate>:

void    tLadderFilter_setSampleRate(tLadderFilter* const vf, Lfloat sr)
{
    _tLadderFilter* f = *vf;
    
    f->invSampleRate = 1.0f/sr;
2401492c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    if (sr > 90000)
24014930:	ed9f 7a08 	vldr	s14, [pc, #32]	; 24014954 <tLadderFilter_setSampleRate+0x28>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
24014934:	4908      	ldr	r1, [pc, #32]	; (24014958 <tLadderFilter_setSampleRate+0x2c>)
24014936:	eeb4 0ac7 	vcmpe.f32	s0, s14
2401493a:	4b08      	ldr	r3, [pc, #32]	; (2401495c <tLadderFilter_setSampleRate+0x30>)
    f->invSampleRate = 1.0f/sr;
2401493c:	eec6 7a80 	vdiv.f32	s15, s13, s0
    _tLadderFilter* f = *vf;
24014940:	6802      	ldr	r2, [r0, #0]
    	f->table = __filterTanhTable_48000;
24014942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014946:	bfd8      	it	le
24014948:	460b      	movle	r3, r1
2401494a:	6393      	str	r3, [r2, #56]	; 0x38
    f->invSampleRate = 1.0f/sr;
2401494c:	edc2 7a02 	vstr	s15, [r2, #8]
    }
}
24014950:	4770      	bx	lr
24014952:	bf00      	nop
24014954:	47afc800 	.word	0x47afc800
24014958:	2401cb14 	.word	0x2401cb14
2401495c:	24020b14 	.word	0x24020b14

24014960 <LEAF_map>:
    return(fraction);
}

inline float LEAF_map(float value, float istart, float istop, float ostart, float ostop)
{
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24014960:	ee70 7a60 	vsub.f32	s15, s0, s1
24014964:	ee31 1a60 	vsub.f32	s2, s2, s1
24014968:	ee32 2a61 	vsub.f32	s4, s4, s3
2401496c:	ee87 7a81 	vdiv.f32	s14, s15, s2
}
24014970:	eee2 1a07 	vfma.f32	s3, s4, s14
24014974:	eeb0 0a61 	vmov.f32	s0, s3
24014978:	4770      	bx	lr
2401497a:	bf00      	nop

2401497c <LEAF_mapFromZeroToOneInput>:

inline float LEAF_mapFromZeroToOneInput(float value, float ostart, float ostop)
{
    return ostart + (ostop - ostart) * value;
2401497c:	ee31 1a60 	vsub.f32	s2, s2, s1
}
24014980:	eee1 0a00 	vfma.f32	s1, s2, s0
24014984:	eeb0 0a60 	vmov.f32	s0, s1
24014988:	4770      	bx	lr
2401498a:	bf00      	nop

2401498c <LEAF_mapToZeroToOneOutput>:

inline float LEAF_mapToZeroToOneOutput(float value, float istart, float istop)
{
	return ((value - istart) / (istop - istart));
2401498c:	ee30 0a60 	vsub.f32	s0, s0, s1
24014990:	ee31 1a60 	vsub.f32	s2, s2, s1
}
24014994:	ee80 0a01 	vdiv.f32	s0, s0, s2
24014998:	4770      	bx	lr
2401499a:	bf00      	nop

2401499c <fastertanf>:
    return fResult;
}

inline Lfloat fastertanf(Lfloat fAngle)
{
    Lfloat fASqr = fAngle*fAngle;
2401499c:	ee60 6a00 	vmul.f32	s13, s0, s0
    Lfloat fResult = 2.033e-01f;
    fResult *= fASqr;
    fResult += 3.1755e-01f;
240149a0:	ed9f 6a06 	vldr	s12, [pc, #24]	; 240149bc <fastertanf+0x20>
240149a4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 240149c0 <fastertanf+0x24>
    fResult *= fASqr;
    fResult += 1.0f;
240149a8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    fResult += 3.1755e-01f;
240149ac:	eea6 7a86 	vfma.f32	s14, s13, s12
    fResult += 1.0f;
240149b0:	eee6 7a87 	vfma.f32	s15, s13, s14
    fResult *= fAngle;
    return fResult;
}
240149b4:	ee20 0a27 	vmul.f32	s0, s0, s15
240149b8:	4770      	bx	lr
240149ba:	bf00      	nop
240149bc:	3e502de0 	.word	0x3e502de0
240149c0:	3ea295ea 	.word	0x3ea295ea

240149c4 <fastsqrtf>:
// from Heng Li, a combination of inverse square root (see wiki) and inversion: https://bits.stephan-brumme.com/inverse.html
inline Lfloat fastsqrtf(Lfloat x)
{
	union { Lfloat f; uint32_t i; } z = { x };
	z.i  = 0x5f3759df - (z.i >> 1);
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
240149c4:	ee10 2a10 	vmov	r2, s0
240149c8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	z.i  = 0x5f3759df - (z.i >> 1);
240149cc:	4b0d      	ldr	r3, [pc, #52]	; (24014a04 <fastsqrtf+0x40>)
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
240149ce:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
240149d2:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
240149d6:	ee60 7a27 	vmul.f32	s15, s0, s15
240149da:	ee00 3a10 	vmov	s0, r3
240149de:	ee67 7a80 	vmul.f32	s15, s15, s0
240149e2:	eea0 7a67 	vfms.f32	s14, s0, s15
240149e6:	ee60 7a07 	vmul.f32	s15, s0, s14
240149ea:	ee17 3a90 	vmov	r3, s15
	z.i = 0x7EEEEEEE - z.i;
	return z.f;
240149ee:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
240149f2:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
240149f6:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
240149fa:	336e      	adds	r3, #110	; 0x6e
}
240149fc:	ee00 3a10 	vmov	s0, r3
24014a00:	4770      	bx	lr
24014a02:	bf00      	nop
24014a04:	5f3759df 	.word	0x5f3759df

24014a08 <fastabsf>:
        unsigned int ui;
    }alias;
    
    alias.f = f;
    alias.ui &= 0x7fffffff;
    return alias.f;
24014a08:	ee10 3a10 	vmov	r3, s0
24014a0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24014a10:	ee00 3a10 	vmov	s0, r3
}
24014a14:	4770      	bx	lr
24014a16:	bf00      	nop

24014a18 <fasterexpf>:
    x *= x; x *= x; x *= x; x *= x;
    return x;
}

inline Lfloat fasterexpf(Lfloat x) {
    x = 1.0f + (x * 0.00390625f);
24014a18:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24014a1c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 24014a48 <fasterexpf+0x30>
24014a20:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
24014a24:	ee27 0aa7 	vmul.f32	s0, s15, s15
24014a28:	ee20 0a00 	vmul.f32	s0, s0, s0
24014a2c:	ee20 0a00 	vmul.f32	s0, s0, s0
24014a30:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
24014a34:	ee20 0a00 	vmul.f32	s0, s0, s0
24014a38:	ee20 0a00 	vmul.f32	s0, s0, s0
24014a3c:	ee20 0a00 	vmul.f32	s0, s0, s0
    return x;
}
24014a40:	ee20 0a00 	vmul.f32	s0, s0, s0
24014a44:	4770      	bx	lr
24014a46:	bf00      	nop
24014a48:	3b800000 	.word	0x3b800000

24014a4c <fastExp3>:

inline Lfloat fastExp3(Lfloat x)  // cubic spline approximation
{
    union { Lfloat f; int32_t i; } reinterpreter;

    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
24014a4c:	eddf 7a10 	vldr	s15, [pc, #64]	; 24014a90 <fastExp3+0x44>
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
    // empirical values for small maximum relative error (8.34e-5):
    reinterpreter.i +=
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
24014a50:	f240 4cfd 	movw	ip, #1277	; 0x4fd
24014a54:	f643 11e9 	movw	r1, #14825	; 0x39e9
24014a58:	4b0e      	ldr	r3, [pc, #56]	; (24014a94 <fastExp3+0x48>)
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
24014a5a:	ee20 0a27 	vmul.f32	s0, s0, s15
24014a5e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
24014a62:	ee17 2a90 	vmov	r2, s15
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
24014a66:	f3c2 10cf 	ubfx	r0, r2, #7, #16
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
24014a6a:	f102 527e 	add.w	r2, r2, #1065353216	; 0x3f800000
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
24014a6e:	fb0c fc00 	mul.w	ip, ip, r0
24014a72:	eb01 31ac 	add.w	r1, r1, ip, asr #14
24014a76:	fb00 f101 	mul.w	r1, r0, r1
24014a7a:	eb03 33a1 	add.w	r3, r3, r1, asr #14
24014a7e:	fb00 f303 	mul.w	r3, r0, r3
24014a82:	12db      	asrs	r3, r3, #11
24014a84:	f2a3 2372 	subw	r3, r3, #626	; 0x272
    return reinterpreter.f;
24014a88:	4413      	add	r3, r2
24014a8a:	ee00 3a10 	vmov	s0, r3
}
24014a8e:	4770      	bx	lr
24014a90:	4b38aa3b 	.word	0x4b38aa3b
24014a94:	fffec87b 	.word	0xfffec87b

24014a98 <fast_sinf2>:
inline Lfloat fast_sinf2(Lfloat x)
{
	Lfloat invert = 1.0f;
	Lfloat out;

	x = x * INV_TWO_PI_TIMES_SINE_TABLE_SIZE;
24014a98:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 24014b10 <fast_sinf2+0x78>
24014a9c:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
24014aa0:	ee20 0b07 	vmul.f64	d0, d0, d7
24014aa4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0

	if (x < 0.0f)
24014aa8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24014aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014ab0:	d426      	bmi.n	24014b00 <fast_sinf2+0x68>
	Lfloat invert = 1.0f;
24014ab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	{
		x *= -1.0f;
		invert = -1.0f;
	}
	int intX = ((int)x) & 2047;
24014ab6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	int intXNext = (intX + 1) & 2047;
	Lfloat LfloatX = x-intX;

	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
24014aba:	4a17      	ldr	r2, [pc, #92]	; (24014b18 <fast_sinf2+0x80>)
	int intX = ((int)x) & 2047;
24014abc:	ee17 3a90 	vmov	r3, s15
	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
24014ac0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	int intX = ((int)x) & 2047;
24014ac4:	f3c3 030a 	ubfx	r3, r3, #0, #11
	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
24014ac8:	ee77 7ac0 	vsub.f32	s15, s15, s0
	int intXNext = (intX + 1) & 2047;
24014acc:	1c59      	adds	r1, r3, #1
	Lfloat LfloatX = x-intX;
24014ace:	ee07 3a10 	vmov	s14, r3
	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
24014ad2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	Lfloat LfloatX = x-intX;
24014ad6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	int intXNext = (intX + 1) & 2047;
24014ada:	f3c1 010a 	ubfx	r1, r1, #0, #11
	out += __leaf_table_sinewave[intXNext] * LfloatX;
24014ade:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	Lfloat LfloatX = x-intX;
24014ae2:	ee30 0a47 	vsub.f32	s0, s0, s14
	out += __leaf_table_sinewave[intXNext] * LfloatX;
24014ae6:	ed92 6a00 	vldr	s12, [r2]
	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
24014aea:	ee77 7a87 	vadd.f32	s15, s15, s14
	out += __leaf_table_sinewave[intXNext] * LfloatX;
24014aee:	ed93 7a00 	vldr	s14, [r3]
24014af2:	ee20 0a06 	vmul.f32	s0, s0, s12
24014af6:	eea7 0a27 	vfma.f32	s0, s14, s15
	out *= invert;
	return out;
}
24014afa:	ee26 0a80 	vmul.f32	s0, s13, s0
24014afe:	4770      	bx	lr
		x *= -1.0f;
24014b00:	eeb1 0a40 	vneg.f32	s0, s0
		invert = -1.0f;
24014b04:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
24014b08:	e7d5      	b.n	24014ab6 <fast_sinf2+0x1e>
24014b0a:	bf00      	nop
24014b0c:	f3af 8000 	nop.w
24014b10:	6dc9c883 	.word	0x6dc9c883
24014b14:	40745f30 	.word	0x40745f30
24014b18:	24024b94 	.word	0x24024b94

24014b1c <fastPowf>:
    { 
        Lfloat d; int x; 
    } 
    u = { a };

    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
24014b1c:	ee10 3a10 	vmov	r3, s0
24014b20:	ed9f 7a08 	vldr	s14, [pc, #32]	; 24014b44 <fastPowf+0x28>
24014b24:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
24014b28:	f503 0307 	add.w	r3, r3, #8847360	; 0x870000
24014b2c:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
24014b30:	330b      	adds	r3, #11
24014b32:	ee07 3a90 	vmov	s15, r3
24014b36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24014b3a:	eea7 7aa0 	vfma.f32	s14, s15, s1
    return u.d;
24014b3e:	eebd 0ac7 	vcvt.s32.f32	s0, s14
}
24014b42:	4770      	bx	lr
24014b44:	4e7de250 	.word	0x4e7de250

24014b48 <LEAF_crossfade>:
 when t = 0, volumes[0] = 0.707, volumes[1] = 0.707 (equal-power cross fade)
 when t = 1, volumes[0] = 1, volumes[1] = 0
 */

inline void LEAF_crossfade(Lfloat fade, Lfloat* volumes) {
    volumes[0] = sqrtf(0.5f * (1.0f + fade));
24014b48:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24014b4c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
24014b50:	ee30 7a27 	vadd.f32	s14, s0, s15
    volumes[1] = sqrtf(0.5f * (1.0f - fade));
24014b54:	ee37 0ac0 	vsub.f32	s0, s15, s0
    volumes[0] = sqrtf(0.5f * (1.0f + fade));
24014b58:	ee67 7a26 	vmul.f32	s15, s14, s13
    volumes[1] = sqrtf(0.5f * (1.0f - fade));
24014b5c:	ee20 0a26 	vmul.f32	s0, s0, s13
    volumes[0] = sqrtf(0.5f * (1.0f + fade));
24014b60:	eeb1 7ae7 	vsqrt.f32	s14, s15
    volumes[1] = sqrtf(0.5f * (1.0f - fade));
24014b64:	eef1 7ac0 	vsqrt.f32	s15, s0
    volumes[0] = sqrtf(0.5f * (1.0f + fade));
24014b68:	ed80 7a00 	vstr	s14, [r0]
    volumes[1] = sqrtf(0.5f * (1.0f - fade));
24014b6c:	edc0 7a01 	vstr	s15, [r0, #4]
}
24014b70:	4770      	bx	lr
24014b72:	bf00      	nop

24014b74 <LEAF_shaper>:
#else
		inline Lfloat LEAF_clip(Lfloat min, Lfloat val, Lfloat max)
#endif
{

    if (val < min)
24014b74:	eddf 7a1e 	vldr	s15, [pc, #120]	; 24014bf0 <LEAF_shaper+0x7c>
24014b78:	eeb4 0ae7 	vcmpe.f32	s0, s15
24014b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014b80:	d406      	bmi.n	24014b90 <LEAF_shaper+0x1c>
    {
        return min;
    }
    else if (val > max)
24014b82:	eddf 7a1c 	vldr	s15, [pc, #112]	; 24014bf4 <LEAF_shaper+0x80>
24014b86:	eeb4 0ae7 	vcmpe.f32	s0, s15
24014b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014b8e:	dd02      	ble.n	24014b96 <LEAF_shaper+0x22>
24014b90:	ed9f 0a19 	vldr	s0, [pc, #100]	; 24014bf8 <LEAF_shaper+0x84>
}
24014b94:	4770      	bx	lr
    Lfloat fx = input * 2.0f;    // prescale
24014b96:	ee30 0a00 	vadd.f32	s0, s0, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
24014b9a:	eddf 4a18 	vldr	s9, [pc, #96]	; 24014bfc <LEAF_shaper+0x88>
24014b9e:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
24014ba2:	eddf 3a17 	vldr	s7, [pc, #92]	; 24014c00 <LEAF_shaper+0x8c>
    c = 0.5f*fx*(3.0f - (xc2));
24014ba6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
    xc2 = xc*xc;
24014baa:	ee20 6a00 	vmul.f32	s12, s0, s0
    c = 0.5f*fx*(3.0f - (xc2));
24014bae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
24014bb2:	eeb6 5a08 	vmov.f32	s10, #104	; 0x3f400000  0.750
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
24014bb6:	ee26 4a06 	vmul.f32	s8, s12, s12
24014bba:	ee66 6ac6 	vnmul.f32	s13, s13, s12
    c = 0.5f*fx*(3.0f - (xc2));
24014bbe:	ee37 7a46 	vsub.f32	s14, s14, s12
24014bc2:	ee60 7a27 	vmul.f32	s15, s0, s15
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
24014bc6:	eee4 6a24 	vfma.f32	s13, s8, s9
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
24014bca:	ee70 0a85 	vadd.f32	s1, s1, s10
24014bce:	ed9f 5a0d 	vldr	s10, [pc, #52]	; 24014c04 <LEAF_shaper+0x90>
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
24014bd2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    c = 0.5f*fx*(3.0f - (xc2));
24014bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
24014bda:	ee20 0aa3 	vmul.f32	s0, s1, s7
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
24014bde:	eee6 7a05 	vfma.f32	s15, s12, s10
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
24014be2:	ee36 7aa5 	vadd.f32	s14, s13, s11
24014be6:	ee20 0a07 	vmul.f32	s0, s0, s14
    shaperOut *= 0.5f;    // post_scale
24014bea:	ee20 0a27 	vmul.f32	s0, s0, s15
    {
        return max;
    }
    else
    {
        return val;
24014bee:	4770      	bx	lr
24014bf0:	bfb504f3 	.word	0xbfb504f3
24014bf4:	3fb504f3 	.word	0x3fb504f3
24014bf8:	00000000 	.word	0x00000000
24014bfc:	3c800000 	.word	0x3c800000
24014c00:	3f272f05 	.word	0x3f272f05
24014c04:	3d4ccccd 	.word	0x3d4ccccd

24014c08 <LEAF_round>:
    rnd = fabsf(rnd);
24014c08:	eef0 0ae0 	vabs.f32	s1, s1
    if (rnd <= 0.0000001f) return input;
24014c0c:	eddf 7a06 	vldr	s15, [pc, #24]	; 24014c28 <LEAF_round+0x20>
24014c10:	eef4 0ae7 	vcmpe.f32	s1, s15
24014c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014c18:	d905      	bls.n	24014c26 <LEAF_round+0x1e>
    return roundf(input * scale) * rnd;
24014c1a:	eec0 7a20 	vdiv.f32	s15, s0, s1
24014c1e:	fef8 7a67 	vrinta.f32	s15, s15
24014c22:	ee27 0aa0 	vmul.f32	s0, s15, s1
}
24014c26:	4770      	bx	lr
24014c28:	33d6bf95 	.word	0x33d6bf95

24014c2c <LEAF_bitwise_xor>:
    return unholy.f;
24014c2c:	ee10 3a10 	vmov	r3, s0
24014c30:	4043      	eors	r3, r0
24014c32:	ee00 3a10 	vmov	s0, r3
}
24014c36:	4770      	bx	lr

24014c38 <LEAF_clip>:
    if (val < min)
24014c38:	eef4 0ac0 	vcmpe.f32	s1, s0
24014c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014c40:	d401      	bmi.n	24014c46 <LEAF_clip+0xe>
    else if (val > max)
24014c42:	fe80 0ac1 	vminnm.f32	s0, s1, s2
    }
}
24014c46:	4770      	bx	lr

24014c48 <LEAF_tanh>:

// Adapted from MusicDSP: http://www.musicdsp.org/showone.php?id=238
inline Lfloat LEAF_tanh(Lfloat x)
{
    
    if( x < -3.0f )
24014c48:	eef8 7a08 	vmov.f32	s15, #136	; 0xc0400000 -3.0
24014c4c:	eeb4 0ae7 	vcmpe.f32	s0, s15
24014c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014c54:	d418      	bmi.n	24014c88 <LEAF_tanh+0x40>
        return -1.0f;
    else if( x > 3.0f )
24014c56:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
24014c5a:	eeb4 0ae7 	vcmpe.f32	s0, s15
24014c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014c62:	dd02      	ble.n	24014c6a <LEAF_tanh+0x22>
        return 1.0f;
24014c64:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    else
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
}
24014c68:	4770      	bx	lr
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
24014c6a:	ee60 6a00 	vmul.f32	s13, s0, s0
24014c6e:	eef3 7a0b 	vmov.f32	s15, #59	; 0x41d80000  27.0
24014c72:	eeb2 6a02 	vmov.f32	s12, #34	; 0x41100000  9.0
24014c76:	ee36 7aa7 	vadd.f32	s14, s13, s15
24014c7a:	eee6 7a86 	vfma.f32	s15, s13, s12
24014c7e:	ee27 7a00 	vmul.f32	s14, s14, s0
24014c82:	ee87 0a27 	vdiv.f32	s0, s14, s15
24014c86:	4770      	bx	lr
        return -1.0f;
24014c88:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24014c8c:	4770      	bx	lr
24014c8e:	bf00      	nop

24014c90 <fast_tanh4>:

//from antto on KVR forum
inline Lfloat   fast_tanh4 (Lfloat x)
{
    Lfloat xa = fabsf(x);
    Lfloat x2 = xa * xa;
24014c90:	ee60 6a00 	vmul.f32	s13, s0, s0
24014c94:	ed9f 4a11 	vldr	s8, [pc, #68]	; 24014cdc <fast_tanh4+0x4c>
    Lfloat xa = fabsf(x);
24014c98:	eeb0 7ac0 	vabs.f32	s14, s0
    Lfloat x3 = xa * x2;
24014c9c:	eddf 4a10 	vldr	s9, [pc, #64]	; 24014ce0 <fast_tanh4+0x50>
24014ca0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24014ca4:	eddf 5a0f 	vldr	s11, [pc, #60]	; 24014ce4 <fast_tanh4+0x54>
    Lfloat x4 = x2 * x2;
24014ca8:	ee26 5aa6 	vmul.f32	s10, s13, s13
24014cac:	ee77 7a26 	vadd.f32	s15, s14, s13
    Lfloat x3 = xa * x2;
24014cb0:	ee27 7a26 	vmul.f32	s14, s14, s13
    Lfloat x7 = x3 * x4;
    Lfloat res = (1.0f - 1.0f / (1.0f + xa + x2 + 0.58576695f * x3 + 0.55442112f * x4 + 0.057481508f * x7));
24014cb4:	eee5 5a04 	vfma.f32	s11, s10, s8
24014cb8:	ee77 7a86 	vadd.f32	s15, s15, s12
    Lfloat   result = (x < 0) ? -res : res;
24014cbc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24014cc0:	eee5 7a24 	vfma.f32	s15, s10, s9
24014cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat res = (1.0f - 1.0f / (1.0f + xa + x2 + 0.58576695f * x3 + 0.55442112f * x4 + 0.057481508f * x7));
24014cc8:	eee7 7a25 	vfma.f32	s15, s14, s11
24014ccc:	ee86 7a27 	vdiv.f32	s14, s12, s15
24014cd0:	bf54      	ite	pl
24014cd2:	ee36 0a47 	vsubpl.f32	s0, s12, s14
    Lfloat   result = (x < 0) ? -res : res;
24014cd6:	ee37 0a46 	vsubmi.f32	s0, s14, s12

    return (result);
}
24014cda:	4770      	bx	lr
24014cdc:	3d6b71bb 	.word	0x3d6b71bb
24014ce0:	3f0dee8b 	.word	0x3f0dee8b
24014ce4:	3f15f4d3 	.word	0x3f15f4d3

24014ce8 <fast_tanh5>:

//from raphx on this post : https://www.kvraudio.com/forum/viewtopic.php?t=332930&start=30
inline Lfloat fast_tanh5(Lfloat x)
{
	Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
24014ce8:	ee60 7a00 	vmul.f32	s15, s0, s0
24014cec:	ed9f 6a09 	vldr	s12, [pc, #36]	; 24014d14 <fast_tanh5+0x2c>
24014cf0:	eddf 6a09 	vldr	s13, [pc, #36]	; 24014d18 <fast_tanh5+0x30>
	return a / sqrtf(1.0f + a * a);
24014cf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24014cf8:	eee7 6a86 	vfma.f32	s13, s15, s12
	Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
24014cfc:	ee67 7a80 	vmul.f32	s15, s15, s0
24014d00:	eea7 0aa6 	vfma.f32	s0, s15, s13
	return a / sqrtf(1.0f + a * a);
24014d04:	eea0 7a00 	vfma.f32	s14, s0, s0
24014d08:	eef1 7ac7 	vsqrt.f32	s15, s14
}
24014d0c:	ee80 0a27 	vdiv.f32	s0, s0, s15
24014d10:	4770      	bx	lr
24014d12:	bf00      	nop
24014d14:	3c217586 	.word	0x3c217586
24014d18:	3e28d927 	.word	0x3e28d927

24014d1c <fastSine>:
//from Olli Niemitalo
//https://dsp.stackexchange.com/questions/46629/finding-polynomial-approximations-of-a-sine-wave
Lfloat fastSine(Lfloat x)
{
	Lfloat term1 = x * 1.570034357f;
	Lfloat term2 = x * x * x * -0.6425216143f;
24014d1c:	ee60 7a00 	vmul.f32	s15, s0, s0
24014d20:	eddf 6a08 	vldr	s13, [pc, #32]	; 24014d44 <fastSine+0x28>
24014d24:	ed9f 7a08 	vldr	s14, [pc, #32]	; 24014d48 <fastSine+0x2c>
24014d28:	ee60 6a26 	vmul.f32	s13, s0, s13
	Lfloat term3 = x * x * x * x * x * 0.07248725712f;
	return term1+term2+term3;
24014d2c:	ed9f 6a07 	vldr	s12, [pc, #28]	; 24014d4c <fastSine+0x30>
	Lfloat term2 = x * x * x * -0.6425216143f;
24014d30:	ee67 7a80 	vmul.f32	s15, s15, s0
	Lfloat term3 = x * x * x * x * x * 0.07248725712f;
24014d34:	eea7 7aa6 	vfma.f32	s14, s15, s13
	return term1+term2+term3;
24014d38:	ee20 0a07 	vmul.f32	s0, s0, s14
}
24014d3c:	eea7 0a86 	vfma.f32	s0, s15, s12
24014d40:	4770      	bx	lr
24014d42:	bf00      	nop
24014d44:	3d947433 	.word	0x3d947433
24014d48:	3fc8f6e3 	.word	0x3fc8f6e3
24014d4c:	bf247c4c 	.word	0xbf247c4c

24014d50 <LEAF_generate_exp>:
}


//0.001 base gives a good curve that goes from 1 to near zero
void LEAF_generate_exp(Lfloat* buffer, Lfloat base, Lfloat start, Lfloat end, Lfloat offset, int size)
{
24014d50:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = (end - start) / (Lfloat)(size-1);
24014d52:	1e4b      	subs	r3, r1, #1
24014d54:	ee31 1a60 	vsub.f32	s2, s2, s1
    Lfloat x = start;
    for (int i = 0; i < size; i++)
24014d58:	2900      	cmp	r1, #0
    Lfloat increment = (end - start) / (Lfloat)(size-1);
24014d5a:	ee07 3a90 	vmov	s15, r3
24014d5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
24014d62:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat increment = (end - start) / (Lfloat)(size-1);
24014d66:	eec1 9a27 	vdiv.f32	s19, s2, s15
    for (int i = 0; i < size; i++)
24014d6a:	dd16      	ble.n	24014d9a <LEAF_generate_exp+0x4a>
24014d6c:	4604      	mov	r4, r0
24014d6e:	eb00 0581 	add.w	r5, r0, r1, lsl #2
24014d72:	eeb0 8a60 	vmov.f32	s16, s1
24014d76:	eef0 8a40 	vmov.f32	s17, s0
24014d7a:	eeb0 9a61 	vmov.f32	s18, s3
    {
        buffer[i] = powf(base, x) + offset;
24014d7e:	eef0 0a48 	vmov.f32	s1, s16
24014d82:	eeb0 0a68 	vmov.f32	s0, s17
24014d86:	f004 ffab 	bl	24019ce0 <powf>
24014d8a:	ee70 7a09 	vadd.f32	s15, s0, s18
        x += increment;
24014d8e:	ee38 8a29 	vadd.f32	s16, s16, s19
        buffer[i] = powf(base, x) + offset;
24014d92:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
24014d96:	42a5      	cmp	r5, r4
24014d98:	d1f1      	bne.n	24014d7e <LEAF_generate_exp+0x2e>
    }
}
24014d9a:	ecbd 8b04 	vpop	{d8-d9}
24014d9e:	bd38      	pop	{r3, r4, r5, pc}

24014da0 <LEAF_generate_table_skew_non_sym>:
    }
}


void LEAF_generate_table_skew_non_sym(Lfloat* buffer, Lfloat start, Lfloat end, Lfloat center, int size)
{
24014da0:	b538      	push	{r3, r4, r5, lr}
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
24014da2:	ee31 1a40 	vsub.f32	s2, s2, s0
{
24014da6:	460d      	mov	r5, r1
24014da8:	4604      	mov	r4, r0
24014daa:	ed2d 8b06 	vpush	{d8-d10}
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
24014dae:	ee70 9ac0 	vsub.f32	s19, s1, s0
{
24014db2:	eef0 8a40 	vmov.f32	s17, s0
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
24014db6:	ee81 0a29 	vdiv.f32	s0, s2, s19
24014dba:	f004 fd8d 	bl	240198d8 <logf>
    Lfloat increment = 1.0f / (Lfloat)(size-1);
24014dbe:	1e6b      	subs	r3, r5, #1
    Lfloat x = 0.0000000001f;
    Lfloat proportion = 0.0;
    for (int i = 0; i < size; i++)
24014dc0:	2d00      	cmp	r5, #0
    Lfloat increment = 1.0f / (Lfloat)(size-1);
24014dc2:	ee07 3a90 	vmov	s15, r3
24014dc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24014dca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24014dce:	ee87 aa27 	vdiv.f32	s20, s14, s15
    for (int i = 0; i < size; i++)
24014dd2:	dd1e      	ble.n	24014e12 <LEAF_generate_table_skew_non_sym+0x72>
24014dd4:	eddf 7a10 	vldr	s15, [pc, #64]	; 24014e18 <LEAF_generate_table_skew_non_sym+0x78>
24014dd8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    Lfloat x = 0.0000000001f;
24014ddc:	ed9f 8a0f 	vldr	s16, [pc, #60]	; 24014e1c <LEAF_generate_table_skew_non_sym+0x7c>
24014de0:	eeb0 9a40 	vmov.f32	s18, s0
    for (int i = 0; i < size; i++)
24014de4:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 24014e20 <LEAF_generate_table_skew_non_sym+0x80>
24014de8:	ee29 9a27 	vmul.f32	s18, s18, s15
24014dec:	e001      	b.n	24014df2 <LEAF_generate_table_skew_non_sym+0x52>
    {
        proportion = expf (logf(x) / skew);
24014dee:	f004 fd73 	bl	240198d8 <logf>
24014df2:	ee29 0a00 	vmul.f32	s0, s18, s0
24014df6:	f004 fcfb 	bl	240197f0 <expf>
        buffer[i] = (Lfloat)(start + (end - start) * proportion);
24014dfa:	eef0 7a68 	vmov.f32	s15, s17
        x += increment;
24014dfe:	ee38 8a0a 	vadd.f32	s16, s16, s20
        buffer[i] = (Lfloat)(start + (end - start) * proportion);
24014e02:	eee9 7a80 	vfma.f32	s15, s19, s0
        proportion = expf (logf(x) / skew);
24014e06:	eeb0 0a48 	vmov.f32	s0, s16
        buffer[i] = (Lfloat)(start + (end - start) * proportion);
24014e0a:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
24014e0e:	42a5      	cmp	r5, r4
24014e10:	d1ed      	bne.n	24014dee <LEAF_generate_table_skew_non_sym+0x4e>
    }
}
24014e12:	ecbd 8b06 	vpop	{d8-d10}
24014e16:	bd38      	pop	{r3, r4, r5, pc}
24014e18:	bfb8aa3b 	.word	0xbfb8aa3b
24014e1c:	2edbe6ff 	.word	0x2edbe6ff
24014e20:	c1b834f1 	.word	0xc1b834f1

24014e24 <LEAF_generate_atodb>:


void LEAF_generate_atodb(Lfloat* buffer, int size, Lfloat min, Lfloat max)
{
24014e24:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = (max-min) / (Lfloat)(size-1);
24014e26:	1e4b      	subs	r3, r1, #1
24014e28:	ee70 0ac0 	vsub.f32	s1, s1, s0
    Lfloat x = min;
    for (int i = 0; i < size; i++)
24014e2c:	2900      	cmp	r1, #0
    Lfloat increment = (max-min) / (Lfloat)(size-1);
24014e2e:	ee07 3a90 	vmov	s15, r3
24014e32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
24014e36:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat increment = (max-min) / (Lfloat)(size-1);
24014e3a:	eec0 8aa7 	vdiv.f32	s17, s1, s15
    for (int i = 0; i < size; i++)
24014e3e:	dd12      	ble.n	24014e66 <LEAF_generate_atodb+0x42>
24014e40:	4604      	mov	r4, r0
24014e42:	eb00 0581 	add.w	r5, r0, r1, lsl #2
24014e46:	eeb0 8a40 	vmov.f32	s16, s0
}


Lfloat atodb(Lfloat a)
{
    return 20.0f*log10f(a);
24014e4a:	eeb3 9a04 	vmov.f32	s18, #52	; 0x41a00000  20.0
24014e4e:	eeb0 0a48 	vmov.f32	s0, s16
24014e52:	f005 f9bb 	bl	2401a1cc <log10f>
24014e56:	ee20 0a09 	vmul.f32	s0, s0, s18
        x += increment;
24014e5a:	ee38 8a28 	vadd.f32	s16, s16, s17
        buffer[i] = atodb(x);
24014e5e:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
24014e62:	42a5      	cmp	r5, r4
24014e64:	d1f3      	bne.n	24014e4e <LEAF_generate_atodb+0x2a>
}
24014e66:	ecbd 8b04 	vpop	{d8-d9}
24014e6a:	bd38      	pop	{r3, r4, r5, pc}

24014e6c <LEAF_generate_dbtoa>:
{
24014e6c:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
24014e6e:	1e4b      	subs	r3, r1, #1
24014e70:	ee70 0ac0 	vsub.f32	s1, s1, s0
    for (int i = 0; i < size; i++)
24014e74:	2900      	cmp	r1, #0
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
24014e76:	ee07 3a90 	vmov	s15, r3
24014e7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
24014e7e:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
24014e82:	eec0 8aa7 	vdiv.f32	s17, s1, s15
    for (int i = 0; i < size; i++)
24014e86:	dd14      	ble.n	24014eb2 <LEAF_generate_dbtoa+0x46>
24014e88:	4604      	mov	r4, r0
	return 20.0f*log10f_fast(a);
}

inline Lfloat dbtoa(Lfloat db)
{
    return powf(10.0f, db * 0.05f);
24014e8a:	eddf 9a0b 	vldr	s19, [pc, #44]	; 24014eb8 <LEAF_generate_dbtoa+0x4c>
24014e8e:	ed9f 9a0b 	vldr	s18, [pc, #44]	; 24014ebc <LEAF_generate_dbtoa+0x50>
24014e92:	eb00 0581 	add.w	r5, r0, r1, lsl #2
24014e96:	eeb0 8a40 	vmov.f32	s16, s0
24014e9a:	ee28 0a29 	vmul.f32	s0, s16, s19
        x += increment;
24014e9e:	ee38 8a28 	vadd.f32	s16, s16, s17
    return powf(10.0f, db * 0.05f);
24014ea2:	ee20 0a09 	vmul.f32	s0, s0, s18
24014ea6:	f004 fca3 	bl	240197f0 <expf>
        buffer[i] = dbtoa(x);
24014eaa:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
24014eae:	42a5      	cmp	r5, r4
24014eb0:	d1f3      	bne.n	24014e9a <LEAF_generate_dbtoa+0x2e>
}
24014eb2:	ecbd 8b04 	vpop	{d8-d9}
24014eb6:	bd38      	pop	{r3, r4, r5, pc}
24014eb8:	3d4ccccd 	.word	0x3d4ccccd
24014ebc:	40135d8e 	.word	0x40135d8e

24014ec0 <LEAF_generate_mtof>:
{
24014ec0:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = 1.0f / (Lfloat)(size-1);
24014ec2:	1e4b      	subs	r3, r1, #1
24014ec4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    for (int i = 0; i < size; i++)
24014ec8:	2900      	cmp	r1, #0
    Lfloat increment = 1.0f / (Lfloat)(size-1);
24014eca:	ee07 3a90 	vmov	s15, r3
24014ece:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
24014ed2:	ed2d 8b0a 	vpush	{d8-d12}
    Lfloat increment = 1.0f / (Lfloat)(size-1);
24014ed6:	eec7 aa27 	vdiv.f32	s21, s14, s15
    Lfloat scalar = (endMIDI-startMIDI);
24014eda:	ee30 aac0 	vsub.f32	s20, s1, s0
    for (int i = 0; i < size; i++)
24014ede:	dd29      	ble.n	24014f34 <LEAF_generate_mtof+0x74>
    Lfloat x = 0.0f;
24014ee0:	ed9f 9a19 	vldr	s18, [pc, #100]	; 24014f48 <LEAF_generate_mtof+0x88>
24014ee4:	eef0 9a40 	vmov.f32	s19, s0
24014ee8:	4604      	mov	r4, r0
    if (f <= -1500.0f) return(0);
24014eea:	eddf 8a18 	vldr	s17, [pc, #96]	; 24014f4c <LEAF_generate_mtof+0x8c>
24014eee:	eeb0 ba49 	vmov.f32	s22, s18
    else if (f > 1499.0f) return(mtof(1499.0f));
24014ef2:	ed9f 8a17 	vldr	s16, [pc, #92]	; 24014f50 <LEAF_generate_mtof+0x90>
24014ef6:	eb00 0581 	add.w	r5, r0, r1, lsl #2
    else return (8.17579891564f * expf(0.0577622650f * f));
24014efa:	ed9f ca16 	vldr	s24, [pc, #88]	; 24014f54 <LEAF_generate_mtof+0x94>
24014efe:	eddf ba16 	vldr	s23, [pc, #88]	; 24014f58 <LEAF_generate_mtof+0x98>
        Lfloat midiVal = (x * scalar) + startMIDI;
24014f02:	eeb0 0a69 	vmov.f32	s0, s19
24014f06:	eeaa 0a09 	vfma.f32	s0, s20, s18
Lfloat mtof(Lfloat f)
24014f0a:	e006      	b.n	24014f1a <LEAF_generate_mtof+0x5a>
    else if (f > 1499.0f) return(mtof(1499.0f));
24014f0c:	eeb4 0ac8 	vcmpe.f32	s0, s16
24014f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014f14:	dd11      	ble.n	24014f3a <LEAF_generate_mtof+0x7a>
24014f16:	eeb0 0a48 	vmov.f32	s0, s16
    if (f <= -1500.0f) return(0);
24014f1a:	eeb4 0ae8 	vcmpe.f32	s0, s17
24014f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014f22:	d8f3      	bhi.n	24014f0c <LEAF_generate_mtof+0x4c>
24014f24:	eef0 7a4b 	vmov.f32	s15, s22
        buffer[i] = mtof(midiVal);
24014f28:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
24014f2c:	42ac      	cmp	r4, r5
        x += increment;
24014f2e:	ee39 9a2a 	vadd.f32	s18, s18, s21
    for (int i = 0; i < size; i++)
24014f32:	d1e6      	bne.n	24014f02 <LEAF_generate_mtof+0x42>
}
24014f34:	ecbd 8b0a 	vpop	{d8-d12}
24014f38:	bd38      	pop	{r3, r4, r5, pc}
    else return (8.17579891564f * expf(0.0577622650f * f));
24014f3a:	ee20 0a0c 	vmul.f32	s0, s0, s24
24014f3e:	f004 fc57 	bl	240197f0 <expf>
24014f42:	ee60 7a2b 	vmul.f32	s15, s0, s23
24014f46:	e7ef      	b.n	24014f28 <LEAF_generate_mtof+0x68>
24014f48:	00000000 	.word	0x00000000
24014f4c:	c4bb8000 	.word	0xc4bb8000
24014f50:	44bb6000 	.word	0x44bb6000
24014f54:	3d6c9820 	.word	0x3d6c9820
24014f58:	4102d013 	.word	0x4102d013

24014f5c <LEAF_poly_blep>:
    if (t < dt) {
24014f5c:	eeb4 0ae0 	vcmpe.f32	s0, s1
24014f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014f64:	d418      	bmi.n	24014f98 <LEAF_poly_blep+0x3c>
    else if (t > 1.0f - dt) {
24014f66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24014f6a:	ee77 7a60 	vsub.f32	s15, s14, s1
24014f6e:	eef4 7ac0 	vcmpe.f32	s15, s0
24014f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014f76:	d50c      	bpl.n	24014f92 <LEAF_poly_blep+0x36>
        t = (t - 1.0f) / dt;
24014f78:	ee70 7a47 	vsub.f32	s15, s0, s14
        return t*t + t+t + 1.0f;
24014f7c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
        t = (t - 1.0f) / dt;
24014f80:	ee87 6aa0 	vdiv.f32	s12, s15, s1
        return t*t + t+t + 1.0f;
24014f84:	ee76 7a26 	vadd.f32	s15, s12, s13
24014f88:	eea7 7a86 	vfma.f32	s14, s15, s12
24014f8c:	eeb0 0a47 	vmov.f32	s0, s14
24014f90:	4770      	bx	lr
    else return 0.0f;
24014f92:	ed9f 0a07 	vldr	s0, [pc, #28]	; 24014fb0 <LEAF_poly_blep+0x54>
}
24014f96:	4770      	bx	lr
        t /= dt;
24014f98:	ee80 7a20 	vdiv.f32	s14, s0, s1
        return t+t - t*t - 1.0f;
24014f9c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
24014fa0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24014fa4:	ee77 7ac7 	vsub.f32	s15, s15, s14
24014fa8:	eea7 0a87 	vfma.f32	s0, s15, s14
24014fac:	4770      	bx	lr
24014fae:	bf00      	nop
24014fb0:	00000000 	.word	0x00000000

24014fb4 <LEAF_poly_blamp>:
    if ((0 <= t) && (t < (2.0f * dt)))
24014fb4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24014fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014fbc:	db2c      	blt.n	24015018 <LEAF_poly_blamp+0x64>
24014fbe:	ee70 7aa0 	vadd.f32	s15, s1, s1
24014fc2:	eef4 7ac0 	vcmpe.f32	s15, s0
24014fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014fca:	dd25      	ble.n	24015018 <LEAF_poly_blamp+0x64>
        Lfloat x = (t / dt);
24014fcc:	eec0 6a20 	vdiv.f32	s13, s0, s1
        Lfloat u = 2.0f - x;
24014fd0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
        if (t < dt)
24014fd4:	eeb4 0ae0 	vcmpe.f32	s0, s1
24014fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        Lfloat u = 2.0f - x;
24014fdc:	ee37 7a66 	vsub.f32	s14, s14, s13
        Lfloat u2 = u * u;
24014fe0:	ee67 7a07 	vmul.f32	s15, s14, s14
        u *= u2 * u2;
24014fe4:	ee67 7aa7 	vmul.f32	s15, s15, s15
24014fe8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (t < dt)
24014fec:	d517      	bpl.n	2401501e <LEAF_poly_blamp+0x6a>
        	Lfloat v = 1.0f - x;
24014fee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    return y * dt / 0.066666666666667f; // divide by 15
24014ff2:	eddf 5a0e 	vldr	s11, [pc, #56]	; 2401502c <LEAF_poly_blamp+0x78>
24014ff6:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
24014ffa:	ee60 0aa5 	vmul.f32	s1, s1, s11
        	Lfloat v = 1.0f - x;
24014ffe:	ee37 7a66 	vsub.f32	s14, s14, s13
        	Lfloat v2 = v * v;
24015002:	ee67 6a07 	vmul.f32	s13, s14, s14
            y += 4.0f * v;
24015006:	ee27 7a06 	vmul.f32	s14, s14, s12
2401500a:	ee27 7a26 	vmul.f32	s14, s14, s13
2401500e:	eed6 7a87 	vfnms.f32	s15, s13, s14
    return y * dt / 0.066666666666667f; // divide by 15
24015012:	ee20 0aa7 	vmul.f32	s0, s1, s15
24015016:	4770      	bx	lr
24015018:	ed9f 0a05 	vldr	s0, [pc, #20]	; 24015030 <LEAF_poly_blamp+0x7c>
}
2401501c:	4770      	bx	lr
    return y * dt / 0.066666666666667f; // divide by 15
2401501e:	ed9f 7a03 	vldr	s14, [pc, #12]	; 2401502c <LEAF_poly_blamp+0x78>
24015022:	ee60 0a87 	vmul.f32	s1, s1, s14
24015026:	ee27 0ae0 	vnmul.f32	s0, s15, s1
2401502a:	4770      	bx	lr
2401502c:	416fffff 	.word	0x416fffff
24015030:	00000000 	.word	0x00000000

24015034 <LEAF_interpolate_hermite_x>:
    Lfloat c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
24015034:	ee71 1ac0 	vsub.f32	s3, s3, s0
    Lfloat c1 = 0.5f * (yy2 - yy0);
24015038:	ee31 6a40 	vsub.f32	s12, s2, s0
2401503c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    Lfloat c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
24015040:	ee71 1aa0 	vadd.f32	s3, s3, s1
24015044:	eef0 5a60 	vmov.f32	s11, s1
24015048:	ee30 7ac1 	vsub.f32	s14, s1, s2
2401504c:	ee31 1ac1 	vsub.f32	s2, s3, s2
24015050:	eed6 5a26 	vfnms.f32	s11, s12, s13
24015054:	eea1 7a26 	vfma.f32	s14, s2, s13
    Lfloat c2 = y0my1 + c1 - c3;
24015058:	ee70 7a25 	vadd.f32	s15, s0, s11
2401505c:	ee77 7ac7 	vsub.f32	s15, s15, s14
    return ((c3 * xx + c2) * xx + c1) * xx + c0;
24015060:	eee7 7a02 	vfma.f32	s15, s14, s4
24015064:	ee67 7a82 	vmul.f32	s15, s15, s4
24015068:	eee6 7a26 	vfma.f32	s15, s12, s13
}
2401506c:	eee7 0a82 	vfma.f32	s1, s15, s4
24015070:	eeb0 0a60 	vmov.f32	s0, s1
24015074:	4770      	bx	lr
24015076:	bf00      	nop

24015078 <LEAF_interpolation_linear>:
    alpha = LEAF_clip(0.0f, alpha, 1.0f);
24015078:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2401507c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 2401509c <LEAF_interpolation_linear+0x24>
24015080:	fe81 1a67 	vminnm.f32	s2, s2, s15
24015084:	fe81 1a07 	vmaxnm.f32	s2, s2, s14
    Lfloat omAlpha = 1.0f - alpha;
24015088:	ee77 7ac1 	vsub.f32	s15, s15, s2
    out += B * alpha;
2401508c:	ee61 0a20 	vmul.f32	s1, s2, s1
}
24015090:	eee7 0a80 	vfma.f32	s1, s15, s0
24015094:	eeb0 0a60 	vmov.f32	s0, s1
24015098:	4770      	bx	lr
2401509a:	bf00      	nop
2401509c:	00000000 	.word	0x00000000

240150a0 <mtof>:
    if (f <= -1500.0f) return(0);
240150a0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 240150e0 <mtof+0x40>
    else if (f > 1499.0f) return(mtof(1499.0f));
240150a4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 240150e4 <mtof+0x44>
240150a8:	e006      	b.n	240150b8 <mtof+0x18>
240150aa:	eeb4 0ae7 	vcmpe.f32	s0, s15
240150ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240150b2:	dd09      	ble.n	240150c8 <mtof+0x28>
240150b4:	eeb0 0a67 	vmov.f32	s0, s15
    if (f <= -1500.0f) return(0);
240150b8:	eeb4 0ac7 	vcmpe.f32	s0, s14
240150bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240150c0:	d8f3      	bhi.n	240150aa <mtof+0xa>
240150c2:	ed9f 0a09 	vldr	s0, [pc, #36]	; 240150e8 <mtof+0x48>
}
240150c6:	4770      	bx	lr
    else return (8.17579891564f * expf(0.0577622650f * f));
240150c8:	eddf 7a08 	vldr	s15, [pc, #32]	; 240150ec <mtof+0x4c>
{
240150cc:	b508      	push	{r3, lr}
    else return (8.17579891564f * expf(0.0577622650f * f));
240150ce:	ee20 0a27 	vmul.f32	s0, s0, s15
240150d2:	f004 fb8d 	bl	240197f0 <expf>
240150d6:	eddf 7a06 	vldr	s15, [pc, #24]	; 240150f0 <mtof+0x50>
240150da:	ee20 0a27 	vmul.f32	s0, s0, s15
}
240150de:	bd08      	pop	{r3, pc}
240150e0:	c4bb8000 	.word	0xc4bb8000
240150e4:	44bb6000 	.word	0x44bb6000
240150e8:	00000000 	.word	0x00000000
240150ec:	3d6c9820 	.word	0x3d6c9820
240150f0:	4102d013 	.word	0x4102d013

240150f4 <faster_mtof>:
    x = 1.0f + (x * 0.00390625f);
240150f4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240150f8:	eddf 6a0c 	vldr	s13, [pc, #48]	; 2401512c <faster_mtof+0x38>
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
240150fc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 24015130 <faster_mtof+0x3c>
    x = 1.0f + (x * 0.00390625f);
24015100:	eee0 7a26 	vfma.f32	s15, s0, s13
    x *= x; x *= x; x *= x; x *= x;
24015104:	ee67 7aa7 	vmul.f32	s15, s15, s15
24015108:	ee67 7aa7 	vmul.f32	s15, s15, s15
2401510c:	ee67 7aa7 	vmul.f32	s15, s15, s15
24015110:	ee67 7aa7 	vmul.f32	s15, s15, s15
    x *= x; x *= x; x *= x; x *= x;
24015114:	ee67 7aa7 	vmul.f32	s15, s15, s15
24015118:	ee67 7aa7 	vmul.f32	s15, s15, s15
2401511c:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
24015120:	ee67 7aa7 	vmul.f32	s15, s15, s15
}
24015124:	ee27 0a87 	vmul.f32	s0, s15, s14
24015128:	4770      	bx	lr
2401512a:	bf00      	nop
2401512c:	396c9820 	.word	0x396c9820
24015130:	4102d013 	.word	0x4102d013

24015134 <ftom>:
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
24015134:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24015138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401513c:	dd0b      	ble.n	24015156 <ftom+0x22>
2401513e:	eddf 7a07 	vldr	s15, [pc, #28]	; 2401515c <ftom+0x28>
{
24015142:	b508      	push	{r3, lr}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
24015144:	ee20 0a27 	vmul.f32	s0, s0, s15
24015148:	f004 fbc6 	bl	240198d8 <logf>
2401514c:	eddf 7a04 	vldr	s15, [pc, #16]	; 24015160 <ftom+0x2c>
24015150:	ee20 0a27 	vmul.f32	s0, s0, s15
}
24015154:	bd08      	pop	{r3, pc}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
24015156:	ed9f 0a03 	vldr	s0, [pc, #12]	; 24015164 <ftom+0x30>
}
2401515a:	4770      	bx	lr
2401515c:	3dfa7ed2 	.word	0x3dfa7ed2
24015160:	418a7fac 	.word	0x418a7fac
24015164:	c4bb8000 	.word	0xc4bb8000

24015168 <fasteratodb>:
{
24015168:	b500      	push	{lr}
2401516a:	b083      	sub	sp, #12
    F = frexpf(fabsf(X), &E);
2401516c:	eeb0 0ac0 	vabs.f32	s0, s0
24015170:	a801      	add	r0, sp, #4
24015172:	f004 fb17 	bl	240197a4 <frexpf>
    Y += -4.11852516267426f;
24015176:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 240151b0 <fasteratodb+0x48>
2401517a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 240151b4 <fasteratodb+0x4c>
    Y += 6.02197014179219f;
2401517e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 240151b8 <fasteratodb+0x50>
    Y += -4.11852516267426f;
24015182:	eee0 7a06 	vfma.f32	s15, s0, s12
    Y += E;
24015186:	eddf 5a0d 	vldr	s11, [pc, #52]	; 240151bc <fasteratodb+0x54>
	return 20.0f*log10f_fast(a);
2401518a:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 240151c0 <fasteratodb+0x58>
    Y += -4.11852516267426f;
2401518e:	eef0 6a67 	vmov.f32	s13, s15
    Y += E;
24015192:	eddd 7a01 	vldr	s15, [sp, #4]
24015196:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    Y += 6.02197014179219f;
2401519a:	eea0 7a26 	vfma.f32	s14, s0, s13
    Y += E;
2401519e:	ee77 7ae5 	vsub.f32	s15, s15, s11
240151a2:	eee0 7a07 	vfma.f32	s15, s0, s14
}
240151a6:	ee27 0a86 	vmul.f32	s0, s15, s12
240151aa:	b003      	add	sp, #12
240151ac:	f85d fb04 	ldr.w	pc, [sp], #4
240151b0:	3f9da1a8 	.word	0x3f9da1a8
240151b4:	c083caf5 	.word	0xc083caf5
240151b8:	40c0b3fb 	.word	0x40c0b3fb
240151bc:	404892e0 	.word	0x404892e0
240151c0:	40c0a8c2 	.word	0x40c0a8c2

240151c4 <fasterdbtoa>:
    x = 1.0f + (x * 0.00390625f);
240151c4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240151c8:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 240151f4 <fasterdbtoa+0x30>
240151cc:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
240151d0:	ee27 0aa7 	vmul.f32	s0, s15, s15
240151d4:	ee20 0a00 	vmul.f32	s0, s0, s0
240151d8:	ee20 0a00 	vmul.f32	s0, s0, s0
240151dc:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
240151e0:	ee20 0a00 	vmul.f32	s0, s0, s0
240151e4:	ee20 0a00 	vmul.f32	s0, s0, s0
240151e8:	ee20 0a00 	vmul.f32	s0, s0, s0

inline Lfloat fasterdbtoa(Lfloat db)
{
    //return powf(10.0f, db * 0.05f);
    return fasterexpf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
}
240151ec:	ee20 0a00 	vmul.f32	s0, s0, s0
240151f0:	4770      	bx	lr
240151f2:	bf00      	nop
240151f4:	39ebc8e3 	.word	0x39ebc8e3

240151f8 <maximum>:


inline Lfloat maximum (Lfloat num1, Lfloat num2)
{
    return (num1 > num2 ) ? num1 : num2;
}
240151f8:	fe80 0a80 	vmaxnm.f32	s0, s1, s0
240151fc:	4770      	bx	lr
240151fe:	bf00      	nop

24015200 <minimum>:

inline Lfloat minimum (Lfloat num1, Lfloat num2)
{
    return (num1 < num2 ) ? num1 : num2;
}
24015200:	fe80 0ac0 	vminnm.f32	s0, s1, s0
24015204:	4770      	bx	lr
24015206:	bf00      	nop

24015208 <leaf_pool_init>:
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
}


void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
24015208:	b430      	push	{r4, r5}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
2401520a:	6a03      	ldr	r3, [r0, #32]
2401520c:	2510      	movs	r5, #16
    pool->usize  = 0;
2401520e:	2400      	movs	r4, #0
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
24015210:	635d      	str	r5, [r3, #52]	; 0x34
    if (size < pool->leaf->header_size)
24015212:	6a03      	ldr	r3, [r0, #32]
    pool->usize  = 0;
24015214:	e9c0 1409 	strd	r1, r4, [r0, #36]	; 0x24
    if (size < pool->leaf->header_size)
24015218:	6b5d      	ldr	r5, [r3, #52]	; 0x34
2401521a:	42aa      	cmp	r2, r5
2401521c:	bf38      	it	cc
2401521e:	462a      	movcc	r2, r5
    pool->msize  = size;
24015220:	62c2      	str	r2, [r0, #44]	; 0x2c
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
24015222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24015224:	1ad2      	subs	r2, r2, r3
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
24015226:	440b      	add	r3, r1
24015228:	600b      	str	r3, [r1, #0]
    mpool_create(memory, size, &leaf->_internal_mempool);
2401522a:	f100 031c 	add.w	r3, r0, #28
    node->next = next;
    node->prev = prev;
    node->size = size;
2401522e:	60ca      	str	r2, [r1, #12]
    node->prev = prev;
24015230:	e9c1 4401 	strd	r4, r4, [r1, #4]
}
24015234:	bc30      	pop	{r4, r5}
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
24015236:	6301      	str	r1, [r0, #48]	; 0x30
    leaf->mempool = &leaf->_internal_mempool;
24015238:	6183      	str	r3, [r0, #24]
}
2401523a:	4770      	bx	lr

2401523c <mpool_alloc>:
{
2401523c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
2401523e:	684a      	ldr	r2, [r1, #4]
{
24015240:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
24015242:	6c93      	ldr	r3, [r2, #72]	; 0x48
24015244:	3301      	adds	r3, #1
24015246:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
24015248:	694b      	ldr	r3, [r1, #20]
2401524a:	2b00      	cmp	r3, #0
2401524c:	d04a      	beq.n	240152e4 <mpool_alloc+0xa8>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
2401524e:	1dc4      	adds	r4, r0, #7
24015250:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
24015254:	e002      	b.n	2401525c <mpool_alloc+0x20>
        node_to_alloc = node_to_alloc->next;
24015256:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
24015258:	2b00      	cmp	r3, #0
2401525a:	d043      	beq.n	240152e4 <mpool_alloc+0xa8>
    while (node_to_alloc->size < size_to_alloc)
2401525c:	68da      	ldr	r2, [r3, #12]
2401525e:	42a2      	cmp	r2, r4
24015260:	d3f9      	bcc.n	24015256 <mpool_alloc+0x1a>
    node_to_alloc->size = size_to_alloc;
24015262:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
24015264:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
24015266:	f8dc 1004 	ldr.w	r1, [ip, #4]
2401526a:	6b49      	ldr	r1, [r1, #52]	; 0x34
2401526c:	4281      	cmp	r1, r0
2401526e:	d246      	bcs.n	240152fe <mpool_alloc+0xc2>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24015270:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
24015274:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
24015276:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24015278:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
2401527a:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
2401527c:	1915      	adds	r5, r2, r4
                               node_to_alloc->prev,
2401527e:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
24015282:	4429      	add	r1, r5
24015284:	5111      	str	r1, [r2, r4]
    node->size = size;
24015286:	60e8      	str	r0, [r5, #12]
    node->prev = prev;
24015288:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
2401528c:	f8dc 2014 	ldr.w	r2, [ip, #20]
24015290:	429a      	cmp	r2, r3
        pool->head = new_node;
24015292:	bf08      	it	eq
24015294:	f8cc 5014 	streq.w	r5, [ip, #20]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
24015298:	685a      	ldr	r2, [r3, #4]
2401529a:	b10a      	cbz	r2, 240152a0 <mpool_alloc+0x64>
    {
        // Close the link
        node->next->prev = node->prev;
2401529c:	6899      	ldr	r1, [r3, #8]
2401529e:	6091      	str	r1, [r2, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
240152a0:	689a      	ldr	r2, [r3, #8]
240152a2:	b10a      	cbz	r2, 240152a8 <mpool_alloc+0x6c>
    {
        // Close the link
        node->prev->next = node->next;
240152a4:	6859      	ldr	r1, [r3, #4]
240152a6:	6051      	str	r1, [r2, #4]
    }
    
    node->next = NULL;
240152a8:	2500      	movs	r5, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
240152aa:	68d8      	ldr	r0, [r3, #12]
    node->prev = NULL;
240152ac:	e9c3 5501 	strd	r5, r5, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
240152b0:	f8dc 1004 	ldr.w	r1, [ip, #4]
240152b4:	f8dc 200c 	ldr.w	r2, [ip, #12]
240152b8:	6b4c      	ldr	r4, [r1, #52]	; 0x34
240152ba:	4422      	add	r2, r4
240152bc:	4402      	add	r2, r0
240152be:	f8cc 200c 	str.w	r2, [ip, #12]
    if (pool->leaf->clearOnAllocation > 0)
240152c2:	694a      	ldr	r2, [r1, #20]
240152c4:	42aa      	cmp	r2, r5
240152c6:	dd0b      	ble.n	240152e0 <mpool_alloc+0xa4>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
240152c8:	68da      	ldr	r2, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
240152ca:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
240152cc:	b14a      	cbz	r2, 240152e2 <mpool_alloc+0xa6>
240152ce:	1e41      	subs	r1, r0, #1
240152d0:	460a      	mov	r2, r1
240152d2:	f801 5f01 	strb.w	r5, [r1, #1]!
240152d6:	68dc      	ldr	r4, [r3, #12]
240152d8:	3202      	adds	r2, #2
240152da:	1a12      	subs	r2, r2, r0
240152dc:	42a2      	cmp	r2, r4
240152de:	d3f7      	bcc.n	240152d0 <mpool_alloc+0x94>
        char* new_pool = (char*)node_to_alloc->pool;
240152e0:	6818      	ldr	r0, [r3, #0]
}
240152e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
240152e4:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
240152e8:	1a9b      	subs	r3, r3, r2
240152ea:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
240152ec:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
240152f0:	bf8c      	ite	hi
240152f2:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
240152f4:	2100      	movls	r1, #0
240152f6:	f004 f9af 	bl	24019658 <LEAF_internalErrorCallback>
        return NULL;
240152fa:	2000      	movs	r0, #0
}
240152fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
240152fe:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
24015300:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
24015302:	e7c3      	b.n	2401528c <mpool_alloc+0x50>

24015304 <mpool_calloc>:
{
24015304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
24015306:	684a      	ldr	r2, [r1, #4]
{
24015308:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
2401530a:	6c93      	ldr	r3, [r2, #72]	; 0x48
2401530c:	3301      	adds	r3, #1
2401530e:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
24015310:	694b      	ldr	r3, [r1, #20]
24015312:	2b00      	cmp	r3, #0
24015314:	d044      	beq.n	240153a0 <mpool_calloc+0x9c>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
24015316:	1dc4      	adds	r4, r0, #7
24015318:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
2401531c:	e002      	b.n	24015324 <mpool_calloc+0x20>
        node_to_alloc = node_to_alloc->next;
2401531e:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
24015320:	2b00      	cmp	r3, #0
24015322:	d03d      	beq.n	240153a0 <mpool_calloc+0x9c>
    while (node_to_alloc->size < size_to_alloc)
24015324:	68da      	ldr	r2, [r3, #12]
24015326:	42a2      	cmp	r2, r4
24015328:	d3f9      	bcc.n	2401531e <mpool_calloc+0x1a>
    node_to_alloc->size = size_to_alloc;
2401532a:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
2401532c:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
2401532e:	f8dc 1004 	ldr.w	r1, [ip, #4]
24015332:	6b49      	ldr	r1, [r1, #52]	; 0x34
24015334:	4281      	cmp	r1, r0
24015336:	d240      	bcs.n	240153ba <mpool_calloc+0xb6>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24015338:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
2401533c:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
2401533e:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24015340:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
24015342:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
24015344:	1915      	adds	r5, r2, r4
                               node_to_alloc->prev,
24015346:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
2401534a:	4429      	add	r1, r5
2401534c:	5111      	str	r1, [r2, r4]
    node->size = size;
2401534e:	60e8      	str	r0, [r5, #12]
    node->prev = prev;
24015350:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
24015354:	f8dc 2014 	ldr.w	r2, [ip, #20]
24015358:	429a      	cmp	r2, r3
        pool->head = new_node;
2401535a:	bf08      	it	eq
2401535c:	f8cc 5014 	streq.w	r5, [ip, #20]
    if (node->next != NULL)
24015360:	685a      	ldr	r2, [r3, #4]
24015362:	b10a      	cbz	r2, 24015368 <mpool_calloc+0x64>
        node->next->prev = node->prev;
24015364:	6899      	ldr	r1, [r3, #8]
24015366:	6091      	str	r1, [r2, #8]
    if (node->prev != NULL)
24015368:	689a      	ldr	r2, [r3, #8]
2401536a:	b10a      	cbz	r2, 24015370 <mpool_calloc+0x6c>
        node->prev->next = node->next;
2401536c:	6859      	ldr	r1, [r3, #4]
2401536e:	6051      	str	r1, [r2, #4]
    node->next = NULL;
24015370:	2200      	movs	r2, #0
    node->prev = NULL;
24015372:	e9c3 2201 	strd	r2, r2, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
24015376:	f8dc 1004 	ldr.w	r1, [ip, #4]
2401537a:	f8dc 000c 	ldr.w	r0, [ip, #12]
2401537e:	6b49      	ldr	r1, [r1, #52]	; 0x34
24015380:	4401      	add	r1, r0
24015382:	68d8      	ldr	r0, [r3, #12]
24015384:	4401      	add	r1, r0
24015386:	f8cc 100c 	str.w	r1, [ip, #12]
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
2401538a:	68d9      	ldr	r1, [r3, #12]
2401538c:	b131      	cbz	r1, 2401539c <mpool_calloc+0x98>
2401538e:	4610      	mov	r0, r2
24015390:	6819      	ldr	r1, [r3, #0]
24015392:	5488      	strb	r0, [r1, r2]
24015394:	3201      	adds	r2, #1
24015396:	68d9      	ldr	r1, [r3, #12]
24015398:	4291      	cmp	r1, r2
2401539a:	d8f9      	bhi.n	24015390 <mpool_calloc+0x8c>
    return node_to_alloc->pool;
2401539c:	6818      	ldr	r0, [r3, #0]
}
2401539e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
240153a0:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
240153a4:	1a9b      	subs	r3, r3, r2
240153a6:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
240153a8:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
240153ac:	bf8c      	ite	hi
240153ae:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
240153b0:	2100      	movls	r1, #0
240153b2:	f004 f951 	bl	24019658 <LEAF_internalErrorCallback>
        return NULL;
240153b6:	2000      	movs	r0, #0
}
240153b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
240153ba:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
240153bc:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
240153be:	e7c9      	b.n	24015354 <mpool_calloc+0x50>

240153c0 <mpool_free>:
{
240153c0:	b470      	push	{r4, r5, r6}
    pool->leaf->freeCount++;
240153c2:	684a      	ldr	r2, [r1, #4]
240153c4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
240153c6:	3301      	adds	r3, #1
240153c8:	64d3      	str	r3, [r2, #76]	; 0x4c
    mpool_node_t* freed_node = (mpool_node_t*) (ptr - pool->leaf->header_size);
240153ca:	684e      	ldr	r6, [r1, #4]
    pool->usize -= pool->leaf->header_size + freed_node->size;
240153cc:	68cb      	ldr	r3, [r1, #12]
    mpool_node_t* freed_node = (mpool_node_t*) (ptr - pool->leaf->header_size);
240153ce:	6b72      	ldr	r2, [r6, #52]	; 0x34
240153d0:	1a84      	subs	r4, r0, r2
    pool->usize -= pool->leaf->header_size + freed_node->size;
240153d2:	1a9b      	subs	r3, r3, r2
240153d4:	68e2      	ldr	r2, [r4, #12]
240153d6:	1a9a      	subs	r2, r3, r2
    mpool_node_t* other_node = pool->head;
240153d8:	694b      	ldr	r3, [r1, #20]
    pool->usize -= pool->leaf->header_size + freed_node->size;
240153da:	60ca      	str	r2, [r1, #12]
    while (other_node != NULL)
240153dc:	2b00      	cmp	r3, #0
240153de:	d051      	beq.n	24015484 <mpool_free+0xc4>
        if ((long) other_node < (long) pool->mpool ||
240153e0:	688a      	ldr	r2, [r1, #8]
    node->next = NULL;
240153e2:	2000      	movs	r0, #0
        if ((long) other_node < (long) pool->mpool ||
240153e4:	429a      	cmp	r2, r3
240153e6:	dc17      	bgt.n	24015418 <mpool_free+0x58>
            (long) other_node >= (((long) pool->mpool) + pool->msize))
240153e8:	690d      	ldr	r5, [r1, #16]
240153ea:	442a      	add	r2, r5
        if ((long) other_node < (long) pool->mpool ||
240153ec:	429a      	cmp	r2, r3
240153ee:	d913      	bls.n	24015418 <mpool_free+0x58>
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
240153f0:	6b72      	ldr	r2, [r6, #52]	; 0x34
240153f2:	68e6      	ldr	r6, [r4, #12]
        next_node = other_node->next;
240153f4:	685d      	ldr	r5, [r3, #4]
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
240153f6:	eb02 0c06 	add.w	ip, r2, r6
240153fa:	eb0c 0604 	add.w	r6, ip, r4
240153fe:	42b3      	cmp	r3, r6
24015400:	d029      	beq.n	24015456 <mpool_free+0x96>
        else if (((long) other_node) + (pool->leaf->header_size + other_node->size) == (long) freed_node)
24015402:	68de      	ldr	r6, [r3, #12]
24015404:	441a      	add	r2, r3
24015406:	4432      	add	r2, r6
24015408:	4294      	cmp	r4, r2
2401540a:	d00a      	beq.n	24015422 <mpool_free+0x62>
    while (other_node != NULL)
2401540c:	b1e5      	cbz	r5, 24015448 <mpool_free+0x88>
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
2401540e:	462b      	mov	r3, r5
        if ((long) other_node < (long) pool->mpool ||
24015410:	688a      	ldr	r2, [r1, #8]
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
24015412:	684e      	ldr	r6, [r1, #4]
        if ((long) other_node < (long) pool->mpool ||
24015414:	429a      	cmp	r2, r3
24015416:	dde7      	ble.n	240153e8 <mpool_free+0x28>
            LEAF_internalErrorCallback(pool->leaf, LEAFInvalidFree);
24015418:	4630      	mov	r0, r6
2401541a:	2102      	movs	r1, #2
}
2401541c:	bc70      	pop	{r4, r5, r6}
            LEAF_internalErrorCallback(pool->leaf, LEAFInvalidFree);
2401541e:	f004 b91b 	b.w	24019658 <LEAF_internalErrorCallback>
            other_node->size += pool->leaf->header_size + freed_node->size;
24015422:	4466      	add	r6, ip
24015424:	60de      	str	r6, [r3, #12]
            if (other_node != pool->head)
24015426:	694a      	ldr	r2, [r1, #20]
24015428:	429a      	cmp	r2, r3
2401542a:	d028      	beq.n	2401547e <mpool_free+0xbe>
    if (node->next != NULL)
2401542c:	b10d      	cbz	r5, 24015432 <mpool_free+0x72>
        node->next->prev = node->prev;
2401542e:	689a      	ldr	r2, [r3, #8]
24015430:	60aa      	str	r2, [r5, #8]
    if (node->prev != NULL)
24015432:	689a      	ldr	r2, [r3, #8]
24015434:	b10a      	cbz	r2, 2401543a <mpool_free+0x7a>
        node->prev->next = node->next;
24015436:	685c      	ldr	r4, [r3, #4]
24015438:	6054      	str	r4, [r2, #4]
    node->next = NULL;
2401543a:	461c      	mov	r4, r3
    node->prev = NULL;
2401543c:	e9c3 0001 	strd	r0, r0, [r3, #4]
                other_node->next = pool->head;
24015440:	694a      	ldr	r2, [r1, #20]
24015442:	605a      	str	r2, [r3, #4]
    while (other_node != NULL)
24015444:	2d00      	cmp	r5, #0
24015446:	d1e2      	bne.n	2401540e <mpool_free+0x4e>
    freed_node->next = pool->head;
24015448:	694b      	ldr	r3, [r1, #20]
2401544a:	6063      	str	r3, [r4, #4]
    if (pool->head != NULL) pool->head->prev = freed_node;
2401544c:	b103      	cbz	r3, 24015450 <mpool_free+0x90>
2401544e:	609c      	str	r4, [r3, #8]
    pool->head = freed_node;
24015450:	614c      	str	r4, [r1, #20]
}
24015452:	bc70      	pop	{r4, r5, r6}
24015454:	4770      	bx	lr
            freed_node->size += pool->leaf->header_size + other_node->size;
24015456:	68da      	ldr	r2, [r3, #12]
24015458:	4462      	add	r2, ip
2401545a:	60e2      	str	r2, [r4, #12]
            if (other_node == pool->head) pool->head = pool->head->next;
2401545c:	694a      	ldr	r2, [r1, #20]
2401545e:	429a      	cmp	r2, r3
24015460:	d00a      	beq.n	24015478 <mpool_free+0xb8>
    if (node->next != NULL)
24015462:	685a      	ldr	r2, [r3, #4]
24015464:	b10a      	cbz	r2, 2401546a <mpool_free+0xaa>
        node->next->prev = node->prev;
24015466:	689e      	ldr	r6, [r3, #8]
24015468:	6096      	str	r6, [r2, #8]
    if (node->prev != NULL)
2401546a:	689a      	ldr	r2, [r3, #8]
2401546c:	b10a      	cbz	r2, 24015472 <mpool_free+0xb2>
        node->prev->next = node->next;
2401546e:	685e      	ldr	r6, [r3, #4]
24015470:	6056      	str	r6, [r2, #4]
    node->prev = NULL;
24015472:	e9c3 0001 	strd	r0, r0, [r3, #4]
}
24015476:	e7c9      	b.n	2401540c <mpool_free+0x4c>
            if (other_node == pool->head) pool->head = pool->head->next;
24015478:	685a      	ldr	r2, [r3, #4]
2401547a:	614a      	str	r2, [r1, #20]
2401547c:	e7f1      	b.n	24015462 <mpool_free+0xa2>
                pool->head = pool->head->next;
2401547e:	461c      	mov	r4, r3
24015480:	614d      	str	r5, [r1, #20]
                freed_node = other_node;
24015482:	e7c3      	b.n	2401540c <mpool_free+0x4c>
    freed_node->next = pool->head;
24015484:	6063      	str	r3, [r4, #4]
    if (pool->head != NULL) pool->head->prev = freed_node;
24015486:	e7e3      	b.n	24015450 <mpool_free+0x90>

24015488 <tMempool_init>:

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
24015488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
    _tMempool* mm = *mem;
2401548a:	699f      	ldr	r7, [r3, #24]
{
2401548c:	4606      	mov	r6, r0
2401548e:	460c      	mov	r4, r1
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
24015490:	2018      	movs	r0, #24
24015492:	4639      	mov	r1, r7
{
24015494:	4615      	mov	r5, r2
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
24015496:	f7ff fed1 	bl	2401523c <mpool_alloc>
2401549a:	6030      	str	r0, [r6, #0]
    m->leaf = mm->leaf;
2401549c:	687b      	ldr	r3, [r7, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
2401549e:	2210      	movs	r2, #16
    pool->usize  = 0;
240154a0:	2100      	movs	r1, #0
    m->leaf = mm->leaf;
240154a2:	6043      	str	r3, [r0, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
240154a4:	635a      	str	r2, [r3, #52]	; 0x34
    if (size < pool->leaf->header_size)
240154a6:	6843      	ldr	r3, [r0, #4]
    pool->usize  = 0;
240154a8:	e9c0 4102 	strd	r4, r1, [r0, #8]
    if (size < pool->leaf->header_size)
240154ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
240154ae:	42aa      	cmp	r2, r5
240154b0:	bf38      	it	cc
240154b2:	462a      	movcc	r2, r5
    pool->msize  = size;
240154b4:	6102      	str	r2, [r0, #16]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
240154b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240154b8:	1ad2      	subs	r2, r2, r3
    node->pool = block_location + header_size;
240154ba:	4423      	add	r3, r4
    node->prev = prev;
240154bc:	e9c4 1101 	strd	r1, r1, [r4, #4]
    node->pool = block_location + header_size;
240154c0:	6023      	str	r3, [r4, #0]
    node->size = size;
240154c2:	60e2      	str	r2, [r4, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
240154c4:	6144      	str	r4, [r0, #20]
}
240154c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

240154c8 <tCycle_init>:


#if LEAF_INCLUDE_SINE_TABLE
// Cycle
void    tCycle_init(tCycle* const cy, LEAF* const leaf)
{
240154c8:	b538      	push	{r3, r4, r5, lr}
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
240154ca:	698c      	ldr	r4, [r1, #24]
{
240154cc:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
240154ce:	2018      	movs	r0, #24
240154d0:	4621      	mov	r1, r4
240154d2:	f7ff feb3 	bl	2401523c <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
240154d6:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
240154d8:	6028      	str	r0, [r5, #0]
    c->phase    =  0;
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
    c->mask = SINE_TABLE_SIZE - 1;
240154da:	f240 72ff 	movw	r2, #2047	; 0x7ff
    c->mempool = m;
240154de:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
240154e0:	6861      	ldr	r1, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240154e2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 240154fc <tCycle_init+0x34>
    c->phase    =  0;
240154e6:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240154ea:	edd1 7a01 	vldr	s15, [r1, #4]
    c->mask = SINE_TABLE_SIZE - 1;
240154ee:	6142      	str	r2, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240154f0:	ee67 7a87 	vmul.f32	s15, s15, s14
240154f4:	edc0 7a04 	vstr	s15, [r0, #16]
}
240154f8:	bd38      	pop	{r3, r4, r5, pc}
240154fa:	bf00      	nop
240154fc:	4f800000 	.word	0x4f800000

24015500 <tCycle_initToPool>:
{
24015500:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
24015502:	680c      	ldr	r4, [r1, #0]
{
24015504:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
24015506:	2018      	movs	r0, #24
24015508:	4621      	mov	r1, r4
2401550a:	f7ff fe97 	bl	2401523c <mpool_alloc>
    c->inc      =  0;
2401550e:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
24015510:	6028      	str	r0, [r5, #0]
    c->mask = SINE_TABLE_SIZE - 1;
24015512:	f240 72ff 	movw	r2, #2047	; 0x7ff
    c->mempool = m;
24015516:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24015518:	6861      	ldr	r1, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2401551a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 24015534 <tCycle_initToPool+0x34>
    c->phase    =  0;
2401551e:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24015522:	edd1 7a01 	vldr	s15, [r1, #4]
    c->mask = SINE_TABLE_SIZE - 1;
24015526:	6142      	str	r2, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24015528:	ee67 7a87 	vmul.f32	s15, s15, s14
2401552c:	edc0 7a04 	vstr	s15, [r0, #16]
}
24015530:	bd38      	pop	{r3, r4, r5, pc}
24015532:	bf00      	nop
24015534:	4f800000 	.word	0x4f800000

24015538 <tCycle_free>:

void    tCycle_free (tCycle* const cy)
{
    _tCycle* c = *cy;
24015538:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)c, c->mempool);
2401553a:	6801      	ldr	r1, [r0, #0]
2401553c:	f7ff bf40 	b.w	240153c0 <mpool_free>

24015540 <tCycle_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
Lfloat   tCycle_tick(tCycle* const cy)
{
    _tCycle* c = *cy;
24015540:	6800      	ldr	r0, [r0, #0]
    c->phase += c->inc;
    // Wavetable synthesis
    idx = c->phase >> 21; //11 bit table 
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
    
    samp0 = __leaf_table_sinewave[idx];
24015542:	4910      	ldr	r1, [pc, #64]	; (24015584 <tCycle_tick+0x44>)
    idx = (idx + 1) & c->mask;
    samp1 = __leaf_table_sinewave[idx];
    
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24015544:	ed9f 7a10 	vldr	s14, [pc, #64]	; 24015588 <tCycle_tick+0x48>
    c->phase += c->inc;
24015548:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
2401554c:	4413      	add	r3, r2
    idx = c->phase >> 21; //11 bit table 
2401554e:	0d5a      	lsrs	r2, r3, #21
    c->phase += c->inc;
24015550:	6043      	str	r3, [r0, #4]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
24015552:	f3c3 0314 	ubfx	r3, r3, #0, #21
    idx = (idx + 1) & c->mask;
24015556:	6940      	ldr	r0, [r0, #20]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
24015558:	ee07 3a90 	vmov	s15, r3
    samp0 = __leaf_table_sinewave[idx];
2401555c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
    idx = (idx + 1) & c->mask;
24015560:	3201      	adds	r2, #1
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24015562:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    samp0 = __leaf_table_sinewave[idx];
24015566:	ed93 0a00 	vldr	s0, [r3]
    idx = (idx + 1) & c->mask;
2401556a:	4002      	ands	r2, r0
    samp1 = __leaf_table_sinewave[idx];
2401556c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24015570:	ee67 7a87 	vmul.f32	s15, s15, s14
24015574:	ed91 7a00 	vldr	s14, [r1]
24015578:	ee37 7a40 	vsub.f32	s14, s14, s0
}
2401557c:	eea7 0a27 	vfma.f32	s0, s14, s15
24015580:	4770      	bx	lr
24015582:	bf00      	nop
24015584:	24024b94 	.word	0x24024b94
24015588:	35000004 	.word	0x35000004

2401558c <tCycle_setFreq>:

void     tCycle_setFreq(tCycle* const cy, Lfloat freq)
{
    _tCycle* c = *cy;
2401558c:	6803      	ldr	r3, [r0, #0]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401558e:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
24015592:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015596:	ee20 0a27 	vmul.f32	s0, s0, s15
2401559a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
2401559e:	ed83 0a02 	vstr	s0, [r3, #8]
}
240155a2:	4770      	bx	lr

240155a4 <tCycle_setPhase>:

void    tCycle_setPhase(tCycle* const cy, Lfloat phase)
{
    _tCycle* c = *cy;
    
    int i = phase;
240155a4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
240155a8:	ed9f 7a06 	vldr	s14, [pc, #24]	; 240155c4 <tCycle_setPhase+0x20>
    _tCycle* c = *cy;
240155ac:	6803      	ldr	r3, [r0, #0]
    phase -= i;
240155ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240155b2:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
240155b6:	ee20 0a07 	vmul.f32	s0, s0, s14
240155ba:	eebc 0ac0 	vcvt.u32.f32	s0, s0
240155be:	ed83 0a01 	vstr	s0, [r3, #4]
}
240155c2:	4770      	bx	lr
240155c4:	4f800000 	.word	0x4f800000

240155c8 <tCycle_setSampleRate>:

void     tCycle_setSampleRate (tCycle* const cy, Lfloat sr)
{
    _tCycle* c = *cy;
    
    c->invSampleRateTimesTwoTo32 = (1.0f/sr) * TWO_TO_32;
240155c8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 240155f4 <tCycle_setSampleRate+0x2c>
    _tCycle* c = *cy;
240155cc:	6803      	ldr	r3, [r0, #0]
    c->invSampleRateTimesTwoTo32 = (1.0f/sr) * TWO_TO_32;
240155ce:	ee87 7a80 	vdiv.f32	s14, s15, s0
    tCycle_setFreq(cy, c->freq);
240155d2:	edd3 7a03 	vldr	s15, [r3, #12]
    c->invSampleRateTimesTwoTo32 = (1.0f/sr) * TWO_TO_32;
240155d6:	ed83 7a04 	vstr	s14, [r3, #16]
    _tCycle* c = *cy;
240155da:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240155dc:	ed93 7a04 	vldr	s14, [r3, #16]
    c->freq  = freq;
240155e0:	edc3 7a03 	vstr	s15, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240155e4:	ee67 7a87 	vmul.f32	s15, s15, s14
240155e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
240155ec:	edc3 7a02 	vstr	s15, [r3, #8]
}
240155f0:	4770      	bx	lr
240155f2:	bf00      	nop
240155f4:	4f800000 	.word	0x4f800000

240155f8 <tPBTriangle_init>:

//==============================================================================

/* tTri: Anti-aliased Triangle waveform. */
void    tPBTriangle_init          (tPBTriangle* const osc, LEAF* const leaf)
{
240155f8:	b538      	push	{r3, r4, r5, lr}
    tPBTriangle_initToPool(osc, &leaf->mempool);
}

void    tPBTriangle_initToPool    (tPBTriangle* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
240155fa:	698c      	ldr	r4, [r1, #24]
{
240155fc:	4605      	mov	r5, r0
    _tPBTriangle* c = *osc = (_tPBTriangle*) mpool_alloc(sizeof(_tPBTriangle), m);
240155fe:	2020      	movs	r0, #32
24015600:	4621      	mov	r1, r4
24015602:	f7ff fe1b 	bl	2401523c <mpool_alloc>
24015606:	6028      	str	r0, [r5, #0]
    c->mempool = m;
24015608:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;

    c->invSampleRate = leaf->invSampleRate;
    c->inc      =  0.0f;
    c->phase    =  0.25f;
    c->skew     =  0.5f;
2401560a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->invSampleRate = leaf->invSampleRate;
2401560e:	6861      	ldr	r1, [r4, #4]
    c->inc      =  0.0f;
24015610:	2300      	movs	r3, #0
    c->phase    =  0.25f;
24015612:	f04f 5c7a 	mov.w	ip, #1048576000	; 0x3e800000
    c->invSampleRate = leaf->invSampleRate;
24015616:	6849      	ldr	r1, [r1, #4]
    c->phase    =  0.25f;
24015618:	f8c0 c004 	str.w	ip, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
2401561c:	61c1      	str	r1, [r0, #28]
    c->inc      =  0.0f;
2401561e:	6083      	str	r3, [r0, #8]
    c->skew     =  0.5f;
24015620:	6102      	str	r2, [r0, #16]
    c->oneMinusSkew     =  0.5f;
24015622:	6142      	str	r2, [r0, #20]
    c->lastOut  =  0.0f;
24015624:	6183      	str	r3, [r0, #24]
}
24015626:	bd38      	pop	{r3, r4, r5, pc}

24015628 <tPBTriangle_tick>:
    Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBTriangle_tick          (tPBTriangle* const osc)
#else
Lfloat   tPBTriangle_tick          (tPBTriangle* const osc)
#endif

{
24015628:	b510      	push	{r4, lr}
    _tPBTriangle* c = *osc;
2401562a:	6804      	ldr	r4, [r0, #0]
{
2401562c:	ed2d 8b08 	vpush	{d8-d11}

    Lfloat t = c->phase;
24015630:	ed94 8a01 	vldr	s16, [r4, #4]
{
24015634:	b082      	sub	sp, #8
    //compute the naive waveform
    
    //Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
    Lfloat v = 0.0f;
    
    if (t < c->skew)
24015636:	edd4 7a04 	vldr	s15, [r4, #16]
2401563a:	edd4 0a02 	vldr	s1, [r4, #8]
2401563e:	eef4 7ac8 	vcmpe.f32	s15, s16
24015642:	eef0 0ae0 	vabs.f32	s1, s1
24015646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401564a:	eef1 0a60 	vneg.f32	s1, s1
2401564e:	dd71      	ble.n	24015734 <tPBTriangle_tick+0x10c>
    {
        v = 2.0f * t / c->skew - 1.0f;
24015650:	ee38 7a08 	vadd.f32	s14, s16, s16
24015654:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24015658:	ee87 aa27 	vdiv.f32	s20, s14, s15
2401565c:	ee3a aa66 	vsub.f32	s20, s20, s13
        v = -2.0f * (t - c->skew) / c->oneMinusSkew + 1.0f;
    }

    //add the blamps
    v += LEAF_poly_blamp(t,  dt);
    v += LEAF_poly_blamp(1.0f - t,  dt);
24015660:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    v += LEAF_poly_blamp(t,  dt);
24015664:	edcd 0a01 	vstr	s1, [sp, #4]
24015668:	eeb0 0a48 	vmov.f32	s0, s16
2401566c:	f7ff fca2 	bl	24014fb4 <LEAF_poly_blamp>
    v += LEAF_poly_blamp(1.0f - t,  dt);
24015670:	eddd 0a01 	vldr	s1, [sp, #4]
    v += LEAF_poly_blamp(t,  dt);
24015674:	eeb0 ba40 	vmov.f32	s22, s0
    v += LEAF_poly_blamp(1.0f - t,  dt);
24015678:	ee38 0ac8 	vsub.f32	s0, s17, s16
2401567c:	f7ff fc9a 	bl	24014fb4 <LEAF_poly_blamp>
    t += 0.5f;
24015680:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    v += LEAF_poly_blamp(1.0f - t,  dt);
24015684:	eef0 aa40 	vmov.f32	s21, s0
    t -= (int)(t);
    v -= LEAF_poly_blamp(t, dt);
24015688:	eddd 0a01 	vldr	s1, [sp, #4]
    t += 0.5f;
2401568c:	ee38 8a27 	vadd.f32	s16, s16, s15
    t -= (int)(t);
24015690:	eefd 9ac8 	vcvt.s32.f32	s19, s16
24015694:	eef8 9ae9 	vcvt.f32.s32	s19, s19
    v -= LEAF_poly_blamp(t, dt);
24015698:	ee38 0a69 	vsub.f32	s0, s16, s19
    v -= LEAF_poly_blamp(1.0f - t,  dt);
2401569c:	ee38 8ac8 	vsub.f32	s16, s17, s16
    v -= LEAF_poly_blamp(t, dt);
240156a0:	f7ff fc88 	bl	24014fb4 <LEAF_poly_blamp>
    v -= LEAF_poly_blamp(1.0f - t,  dt);
240156a4:	eddd 0a01 	vldr	s1, [sp, #4]
    v -= LEAF_poly_blamp(t, dt);
240156a8:	eeb0 9a40 	vmov.f32	s18, s0
    v -= LEAF_poly_blamp(1.0f - t,  dt);
240156ac:	ee38 0a29 	vadd.f32	s0, s16, s19
240156b0:	f7ff fc80 	bl	24014fb4 <LEAF_poly_blamp>

    //increment phase for next tick
    c->phase += c->inc - (int)c->inc;
240156b4:	edd4 7a02 	vldr	s15, [r4, #8]
240156b8:	edd4 6a01 	vldr	s13, [r4, #4]
240156bc:	ee39 9a00 	vadd.f32	s18, s18, s0
240156c0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
240156c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
240156c8:	ee39 9a4a 	vsub.f32	s18, s18, s20
240156cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
240156d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
	while (c->phase >= 1.0f) c->phase -= 1.0f;
240156d4:	eef4 7ae8 	vcmpe.f32	s15, s17
    c->phase += c->inc - (int)c->inc;
240156d8:	edc4 7a01 	vstr	s15, [r4, #4]
	while (c->phase >= 1.0f) c->phase -= 1.0f;
240156dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240156e0:	db0c      	blt.n	240156fc <tPBTriangle_tick+0xd4>
240156e2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
240156e6:	eeb0 7a67 	vmov.f32	s14, s15
240156ea:	ee77 7ae8 	vsub.f32	s15, s15, s17
240156ee:	eeb4 7ae6 	vcmpe.f32	s14, s13
240156f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240156f6:	daf6      	bge.n	240156e6 <tPBTriangle_tick+0xbe>
240156f8:	edc4 7a01 	vstr	s15, [r4, #4]
	while (c->phase < 0.0f) c->phase += 1.0f;
240156fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24015700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015704:	d50e      	bpl.n	24015724 <tPBTriangle_tick+0xfc>
24015706:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2401570a:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
2401570e:	eeb0 7a67 	vmov.f32	s14, s15
24015712:	ee77 7a86 	vadd.f32	s15, s15, s12
24015716:	eeb4 7ae6 	vcmpe.f32	s14, s13
2401571a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401571e:	d4f6      	bmi.n	2401570e <tPBTriangle_tick+0xe6>
24015720:	edc4 7a01 	vstr	s15, [r4, #4]
	return -v;
24015724:	ee39 9a4b 	vsub.f32	s18, s18, s22
24015728:	ee39 0a6a 	vsub.f32	s0, s18, s21
}
2401572c:	b002      	add	sp, #8
2401572e:	ecbd 8b08 	vpop	{d8-d11}
24015732:	bd10      	pop	{r4, pc}
        v = -2.0f * (t - c->skew) / c->oneMinusSkew + 1.0f;
24015734:	ee78 7a67 	vsub.f32	s15, s16, s15
24015738:	edd4 6a05 	vldr	s13, [r4, #20]
2401573c:	eeb8 6a00 	vmov.f32	s12, #128	; 0xc0000000 -2.0
24015740:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24015744:	ee67 7a86 	vmul.f32	s15, s15, s12
24015748:	ee87 aaa6 	vdiv.f32	s20, s15, s13
2401574c:	ee3a aa07 	vadd.f32	s20, s20, s14
24015750:	e786      	b.n	24015660 <tPBTriangle_tick+0x38>
24015752:	bf00      	nop

24015754 <tPBTriangle_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBTriangle_setFreq       (tPBTriangle* const osc, Lfloat freq)
#else
void    tPBTriangle_setFreq       (tPBTriangle* const osc, Lfloat freq)
#endif
{
    _tPBTriangle* c = *osc;
24015754:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRate;
24015756:	edd3 7a07 	vldr	s15, [r3, #28]
    c->freq  = freq;
2401575a:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRate;
2401575e:	ee67 7a80 	vmul.f32	s15, s15, s0
24015762:	edc3 7a02 	vstr	s15, [r3, #8]
}
24015766:	4770      	bx	lr

24015768 <tPBTriangle_setSkew>:

void    tPBTriangle_setSkew       (tPBTriangle* const osc, Lfloat mySkew)
{
24015768:	eef0 0a40 	vmov.f32	s1, s0
    _tPBTriangle* c = *osc;

    mySkew = LEAF_clip(0.01f, mySkew, 0.99f);
2401576c:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 2401579c <tPBTriangle_setSkew+0x34>
24015770:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 240157a0 <tPBTriangle_setSkew+0x38>
{
24015774:	b510      	push	{r4, lr}
    _tPBTriangle* c = *osc;
24015776:	6804      	ldr	r4, [r0, #0]
    mySkew = LEAF_clip(0.01f, mySkew, 0.99f);
24015778:	f7ff fa5e 	bl	24014c38 <LEAF_clip>
    c->skew = (mySkew + 1.0f) * 0.5f;
2401577c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24015780:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
24015784:	ee30 0a27 	vadd.f32	s0, s0, s15
24015788:	ee20 0a07 	vmul.f32	s0, s0, s14
    c->oneMinusSkew = 1.0f - c->skew;
2401578c:	ee77 7ac0 	vsub.f32	s15, s15, s0
    c->skew = (mySkew + 1.0f) * 0.5f;
24015790:	ed84 0a04 	vstr	s0, [r4, #16]
    c->oneMinusSkew = 1.0f - c->skew;
24015794:	edc4 7a05 	vstr	s15, [r4, #20]
}
24015798:	bd10      	pop	{r4, pc}
2401579a:	bf00      	nop
2401579c:	3f7d70a4 	.word	0x3f7d70a4
240157a0:	3c23d70a 	.word	0x3c23d70a

240157a4 <tPBSineTriangle_init>:

//==============================================================================

/* tPBSineTriangle: Anti-aliased Triangle waveform with sine wave, crossfaded between them with shape param. */
void    tPBSineTriangle_init          (tPBSineTriangle* const osc, LEAF* const leaf)
{
240157a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	tPBSineTriangle_initToPool(osc, &leaf->mempool);
}

void    tPBSineTriangle_initToPool    (tPBSineTriangle* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
240157a6:	698e      	ldr	r6, [r1, #24]
{
240157a8:	4607      	mov	r7, r0
240157aa:	460d      	mov	r5, r1
    _tPBSineTriangle* c = *osc = (_tPBSineTriangle*) mpool_alloc(sizeof(_tPBSineTriangle), m);
240157ac:	2028      	movs	r0, #40	; 0x28
240157ae:	4631      	mov	r1, r6
240157b0:	f7ff fd44 	bl	2401523c <mpool_alloc>
240157b4:	6038      	str	r0, [r7, #0]
    c->mempool = m;
240157b6:	6006      	str	r6, [r0, #0]
    _tPBSineTriangle* c = *osc = (_tPBSineTriangle*) mpool_alloc(sizeof(_tPBSineTriangle), m);
240157b8:	4604      	mov	r4, r0
    _tMempool* m = *mp;
240157ba:	69ad      	ldr	r5, [r5, #24]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
240157bc:	2018      	movs	r0, #24
    LEAF* leaf = c->mempool->leaf;
240157be:	6876      	ldr	r6, [r6, #4]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
240157c0:	4629      	mov	r1, r5
240157c2:	f7ff fd3b 	bl	2401523c <mpool_alloc>
    c->inc      =  0;
240157c6:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
240157c8:	61e0      	str	r0, [r4, #28]
    c->mask = SINE_TABLE_SIZE - 1;
240157ca:	f240 71ff 	movw	r1, #2047	; 0x7ff
    c->mempool = m;
240157ce:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
240157d0:	686a      	ldr	r2, [r5, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240157d2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 24015808 <tPBSineTriangle_init+0x64>
    c->phase    =  0;
240157d6:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240157da:	edd2 7a01 	vldr	s15, [r2, #4]
    tCycle_initToPool(&c->sine, mp);
    c->invSampleRate = leaf->invSampleRate;
    c->inc      =  0.0f;
    c->phase    =  0.25f;
240157de:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
    c->mask = SINE_TABLE_SIZE - 1;
240157e2:	6141      	str	r1, [r0, #20]
    c->inc      =  0.0f;
240157e4:	2300      	movs	r3, #0
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240157e6:	ee67 7a87 	vmul.f32	s15, s15, s14
    c->shape     =  0.0f;
    c->skew 	 = 0.5f;
240157ea:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240157ee:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRate = leaf->invSampleRate;
240157f2:	6870      	ldr	r0, [r6, #4]
    c->phase    =  0.25f;
240157f4:	6062      	str	r2, [r4, #4]
    c->oneMinusShape = 1.0f;
240157f6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->inc      =  0.0f;
240157fa:	60a3      	str	r3, [r4, #8]
    c->invSampleRate = leaf->invSampleRate;
240157fc:	61a0      	str	r0, [r4, #24]
    c->shape     =  0.0f;
240157fe:	6123      	str	r3, [r4, #16]
    c->lastOut  =  0.0f;
24015800:	6163      	str	r3, [r4, #20]
    c->skew 	 = 0.5f;
24015802:	6261      	str	r1, [r4, #36]	; 0x24
    c->oneMinusShape = 1.0f;
24015804:	6222      	str	r2, [r4, #32]
}
24015806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24015808:	4f800000 	.word	0x4f800000

2401580c <tPBSineTriangle_tick>:
    {
        dt = c->inc;
    }

    //compute the naive waveform
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
2401580c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
24015810:	b510      	push	{r4, lr}
24015812:	ed2d 8b06 	vpush	{d8-d10}
    _tPBSineTriangle* c = *osc;
24015816:	6804      	ldr	r4, [r0, #0]
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
24015818:	eeb0 9a00 	vmov.f32	s18, #0	; 0x40000000  2.0
2401581c:	eeb0 7a67 	vmov.f32	s14, s15
{
24015820:	b082      	sub	sp, #8
    Lfloat t = c->phase;
24015822:	edd4 9a01 	vldr	s19, [r4, #4]

    //add the blamps
    v += LEAF_poly_blamp(t,  dt);
    v += LEAF_poly_blamp(1.0f - t,  dt);
24015826:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
2401582a:	edd4 0a02 	vldr	s1, [r4, #8]
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
2401582e:	eea9 7a89 	vfma.f32	s14, s19, s18
24015832:	eef0 0ae0 	vabs.f32	s1, s1
    v += LEAF_poly_blamp(t,  dt);
24015836:	eeb0 0a69 	vmov.f32	s0, s19
2401583a:	eef1 0a60 	vneg.f32	s1, s1
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
2401583e:	eeb0 7ac7 	vabs.f32	s14, s14
    v += LEAF_poly_blamp(t,  dt);
24015842:	edcd 0a01 	vstr	s1, [sp, #4]
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
24015846:	eee7 7a09 	vfma.f32	s15, s14, s18
2401584a:	eeb0 8a67 	vmov.f32	s16, s15
    v += LEAF_poly_blamp(t,  dt);
2401584e:	f7ff fbb1 	bl	24014fb4 <LEAF_poly_blamp>
24015852:	eef0 7a40 	vmov.f32	s15, s0
    v += LEAF_poly_blamp(1.0f - t,  dt);
24015856:	eddd 0a01 	vldr	s1, [sp, #4]
2401585a:	ee38 0ae9 	vsub.f32	s0, s17, s19
    v += LEAF_poly_blamp(t,  dt);
2401585e:	ee38 8a27 	vadd.f32	s16, s16, s15
    v += LEAF_poly_blamp(1.0f - t,  dt);
24015862:	f7ff fba7 	bl	24014fb4 <LEAF_poly_blamp>
    t += 0.5f;
24015866:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    t -= (int)(t);
    v -= LEAF_poly_blamp(t, dt);
2401586a:	eddd 0a01 	vldr	s1, [sp, #4]
    v += LEAF_poly_blamp(1.0f - t,  dt);
2401586e:	ee38 8a00 	vadd.f32	s16, s16, s0
    t += 0.5f;
24015872:	ee79 9aa7 	vadd.f32	s19, s19, s15
    t -= (int)(t);
24015876:	eebd aae9 	vcvt.s32.f32	s20, s19
2401587a:	eeb8 aaca 	vcvt.f32.s32	s20, s20
    v -= LEAF_poly_blamp(t, dt);
2401587e:	ee39 0aca 	vsub.f32	s0, s19, s20
    v -= LEAF_poly_blamp(1.0f - t,  dt);
24015882:	ee78 9ae9 	vsub.f32	s19, s17, s19
    v -= LEAF_poly_blamp(t, dt);
24015886:	f7ff fb95 	bl	24014fb4 <LEAF_poly_blamp>
    v -= LEAF_poly_blamp(1.0f - t,  dt);
2401588a:	eddd 0a01 	vldr	s1, [sp, #4]
    v -= LEAF_poly_blamp(t, dt);
2401588e:	ee38 8a40 	vsub.f32	s16, s16, s0
    v -= LEAF_poly_blamp(1.0f - t,  dt);
24015892:	ee39 0a8a 	vadd.f32	s0, s19, s20
24015896:	f7ff fb8d 	bl	24014fb4 <LEAF_poly_blamp>

    //increment phase for next tick
    c->phase += c->inc - (int)c->inc;
2401589a:	edd4 7a02 	vldr	s15, [r4, #8]
2401589e:	edd4 6a01 	vldr	s13, [r4, #4]
    v -= LEAF_poly_blamp(1.0f - t,  dt);
240158a2:	ee38 8a40 	vsub.f32	s16, s16, s0
    c->phase += c->inc - (int)c->inc;
240158a6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
240158aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
240158ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
240158b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
    while (c->phase >= 1.0f) c->phase -= 1.0f;
240158b6:	eef4 7ae8 	vcmpe.f32	s15, s17
    c->phase += c->inc - (int)c->inc;
240158ba:	edc4 7a01 	vstr	s15, [r4, #4]
    while (c->phase >= 1.0f) c->phase -= 1.0f;
240158be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240158c2:	db0a      	blt.n	240158da <tPBSineTriangle_tick+0xce>
240158c4:	eeb0 7a67 	vmov.f32	s14, s15
240158c8:	ee77 7ae8 	vsub.f32	s15, s15, s17
240158cc:	eeb4 7ac9 	vcmpe.f32	s14, s18
240158d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240158d4:	daf6      	bge.n	240158c4 <tPBSineTriangle_tick+0xb8>
240158d6:	edc4 7a01 	vstr	s15, [r4, #4]
    while (c->phase < 0.0f) c->phase += 1.0f;
240158da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
240158de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240158e2:	d50e      	bpl.n	24015902 <tPBSineTriangle_tick+0xf6>
240158e4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
240158e8:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
240158ec:	eeb0 7a67 	vmov.f32	s14, s15
240158f0:	ee77 7a86 	vadd.f32	s15, s15, s12
240158f4:	eeb4 7ae6 	vcmpe.f32	s14, s13
240158f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240158fc:	d4f6      	bmi.n	240158ec <tPBSineTriangle_tick+0xe0>
240158fe:	edc4 7a01 	vstr	s15, [r4, #4]
    _tCycle* c = *cy;
24015902:	69e0      	ldr	r0, [r4, #28]
    out = v * c->shape; // shape handles the inversion so it's in phase with sine (already * -1.0f)
24015904:	edd4 6a04 	vldr	s13, [r4, #16]
    samp0 = __leaf_table_sinewave[idx];
24015908:	4a14      	ldr	r2, [pc, #80]	; (2401595c <tPBSineTriangle_tick+0x150>)
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
2401590a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 24015960 <tPBSineTriangle_tick+0x154>
    c->phase += c->inc;
2401590e:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
24015912:	440b      	add	r3, r1
24015914:	6043      	str	r3, [r0, #4]
    idx = c->phase >> 21; //11 bit table 
24015916:	0d59      	lsrs	r1, r3, #21
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
24015918:	f3c3 0314 	ubfx	r3, r3, #0, #21
    idx = (idx + 1) & c->mask;
2401591c:	6940      	ldr	r0, [r0, #20]

    out = out + (tCycle_tick(&c->sine) * c->oneMinusShape);
2401591e:	ed94 6a08 	vldr	s12, [r4, #32]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
24015922:	ee07 3a90 	vmov	s15, r3
    idx = (idx + 1) & c->mask;
24015926:	1c4b      	adds	r3, r1, #1
    samp0 = __leaf_table_sinewave[idx];
24015928:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    idx = (idx + 1) & c->mask;
2401592c:	4003      	ands	r3, r0
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
2401592e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    samp0 = __leaf_table_sinewave[idx];
24015932:	ed91 0a00 	vldr	s0, [r1]
    samp1 = __leaf_table_sinewave[idx];
24015936:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
2401593a:	ee67 7a87 	vmul.f32	s15, s15, s14
2401593e:	ed92 7a00 	vldr	s14, [r2]
24015942:	ee37 7a40 	vsub.f32	s14, s14, s0
24015946:	eea7 0a87 	vfma.f32	s0, s15, s14
    out = out + (tCycle_tick(&c->sine) * c->oneMinusShape);
2401594a:	ee20 0a06 	vmul.f32	s0, s0, s12
    return out;
}
2401594e:	eea6 0a88 	vfma.f32	s0, s13, s16
24015952:	b002      	add	sp, #8
24015954:	ecbd 8b06 	vpop	{d8-d10}
24015958:	bd10      	pop	{r4, pc}
2401595a:	bf00      	nop
2401595c:	24024b94 	.word	0x24024b94
24015960:	35000004 	.word	0x35000004

24015964 <tPBSineTriangle_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBSineTriangle_setFreq       (tPBSineTriangle* const osc, Lfloat freq)
#else
void    tPBSineTriangle_setFreq       (tPBSineTriangle* const osc, Lfloat freq)
#endif
{
    _tPBSineTriangle* c = *osc;
24015964:	6803      	ldr	r3, [r0, #0]

    c->freq  = freq;
    c->inc = freq * c->invSampleRate;
24015966:	edd3 7a06 	vldr	s15, [r3, #24]
    _tCycle* c = *cy;
2401596a:	69da      	ldr	r2, [r3, #28]
    c->inc = freq * c->invSampleRate;
2401596c:	ee67 7a80 	vmul.f32	s15, s15, s0
    c->freq  = freq;
24015970:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRate;
24015974:	edc3 7a02 	vstr	s15, [r3, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015978:	edd2 7a04 	vldr	s15, [r2, #16]
    c->freq  = freq;
2401597c:	ed82 0a03 	vstr	s0, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015980:	ee20 0a27 	vmul.f32	s0, s0, s15
24015984:	eebd 0ac0 	vcvt.s32.f32	s0, s0
24015988:	ed82 0a02 	vstr	s0, [r2, #8]
    tCycle_setFreq(&c->sine, freq);
}
2401598c:	4770      	bx	lr
2401598e:	bf00      	nop

24015990 <tPBSineTriangle_setShape>:

void    tPBSineTriangle_setShape       (tPBSineTriangle* const osc, Lfloat shape)
{
    _tPBSineTriangle* c = *osc;
    c->shape = -1.0f * shape; // inverted because triangle output is inverted
    c->oneMinusShape = 1.0f - shape;
24015990:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tPBSineTriangle* c = *osc;
24015994:	6803      	ldr	r3, [r0, #0]
    c->shape = -1.0f * shape; // inverted because triangle output is inverted
24015996:	eeb1 7a40 	vneg.f32	s14, s0
    c->oneMinusShape = 1.0f - shape;
2401599a:	ee77 7ac0 	vsub.f32	s15, s15, s0
    c->shape = -1.0f * shape; // inverted because triangle output is inverted
2401599e:	ed83 7a04 	vstr	s14, [r3, #16]
    c->oneMinusShape = 1.0f - shape;
240159a2:	edc3 7a08 	vstr	s15, [r3, #32]
}
240159a6:	4770      	bx	lr

240159a8 <tPBPulse_init>:
}
//==============================================================================

/* tPulse: Anti-aliased pulse waveform. */
void    tPBPulse_init        (tPBPulse* const osc, LEAF* const leaf)
{
240159a8:	b538      	push	{r3, r4, r5, lr}
    tPBPulse_initToPool(osc, &leaf->mempool);
}

void    tPBPulse_initToPool  (tPBPulse* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
240159aa:	698c      	ldr	r4, [r1, #24]
{
240159ac:	4605      	mov	r5, r0
    _tPBPulse* c = *osc = (_tPBPulse*) mpool_alloc(sizeof(_tPBPulse), m);
240159ae:	2020      	movs	r0, #32
240159b0:	4621      	mov	r1, r4
240159b2:	f7ff fc43 	bl	2401523c <mpool_alloc>
240159b6:	6028      	str	r0, [r5, #0]
    c->mempool = m;
240159b8:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
    c->inc      =  0;
240159ba:	2200      	movs	r2, #0
    c->invSampleRate = leaf->invSampleRate;
240159bc:	6861      	ldr	r1, [r4, #4]
    c->phase    =  0;
    c->width     =  (0.5f * TWO_TO_32);
240159be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
240159c2:	eddf 7a08 	vldr	s15, [pc, #32]	; 240159e4 <tPBPulse_init+0x3c>
    c->invSampleRate = leaf->invSampleRate;
240159c6:	ed91 7a01 	vldr	s14, [r1, #4]
    c->oneMinusWidth =  c->width;
    c->freq = 0.0f;
240159ca:	2100      	movs	r1, #0
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
240159cc:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->invSampleRate = leaf->invSampleRate;
240159d0:	ed80 7a06 	vstr	s14, [r0, #24]
    c->freq = 0.0f;
240159d4:	60c1      	str	r1, [r0, #12]
    c->phase    =  0;
240159d6:	e9c0 2201 	strd	r2, r2, [r0, #4]
    c->oneMinusWidth =  c->width;
240159da:	e9c0 3304 	strd	r3, r3, [r0, #16]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
240159de:	edc0 7a07 	vstr	s15, [r0, #28]
}
240159e2:	bd38      	pop	{r3, r4, r5, pc}
240159e4:	4f800000 	.word	0x4f800000

240159e8 <tPBPulse_tick>:
#ifdef ITCMRAM
    Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBPulse_tick        (tPBPulse* const osc)
#else
Lfloat   tPBPulse_tick        (tPBPulse* const osc)
#endif
{
240159e8:	b510      	push	{r4, lr}
    _tPBPulse* c = *osc;
240159ea:	6804      	ldr	r4, [r0, #0]
    

    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
240159ec:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
240159f0:	eddf 7a1c 	vldr	s15, [pc, #112]	; 24015a64 <tPBPulse_tick+0x7c>
{
240159f4:	ed2d 8b02 	vpush	{d8}
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
240159f8:	6862      	ldr	r2, [r4, #4]
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
240159fa:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
240159fe:	edd4 6a02 	vldr	s13, [r4, #8]
{
24015a02:	b082      	sub	sp, #8
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
24015a04:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
24015a08:	eef8 0ae6 	vcvt.f32.s32	s1, s13
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
24015a0c:	ee06 2a90 	vmov	s13, r2
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
24015a10:	18d3      	adds	r3, r2, r3
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
24015a12:	428a      	cmp	r2, r1
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
24015a14:	eeb8 0a66 	vcvt.f32.u32	s0, s13
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
24015a18:	ee08 3a10 	vmov	s16, r3
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
24015a1c:	ee60 0aa7 	vmul.f32	s1, s1, s15
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
24015a20:	bf28      	it	cs
24015a22:	eef0 8a47 	vmovcs.f32	s17, s14
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
24015a26:	eeb8 8a48 	vcvt.f32.u32	s16, s16
    out += LEAF_poly_blep(phaseFloat,incFloat);
24015a2a:	ee20 0a27 	vmul.f32	s0, s0, s15
24015a2e:	edcd 0a01 	vstr	s1, [sp, #4]
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
24015a32:	ee28 8a27 	vmul.f32	s16, s16, s15
    out += LEAF_poly_blep(phaseFloat,incFloat);
24015a36:	f7ff fa91 	bl	24014f5c <LEAF_poly_blep>
24015a3a:	eef0 7a40 	vmov.f32	s15, s0
    out -= LEAF_poly_blep(backwardsPhaseFloat, incFloat);
24015a3e:	eddd 0a01 	vldr	s1, [sp, #4]
24015a42:	eeb0 0a48 	vmov.f32	s0, s16
    out += LEAF_poly_blep(phaseFloat,incFloat);
24015a46:	ee78 8aa7 	vadd.f32	s17, s17, s15
    out -= LEAF_poly_blep(backwardsPhaseFloat, incFloat);
24015a4a:	f7ff fa87 	bl	24014f5c <LEAF_poly_blep>
    c->phase += c->inc;
24015a4e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    return out;
}
24015a52:	ee38 0ac0 	vsub.f32	s0, s17, s0
    c->phase += c->inc;
24015a56:	4413      	add	r3, r2
24015a58:	6063      	str	r3, [r4, #4]
}
24015a5a:	b002      	add	sp, #8
24015a5c:	ecbd 8b02 	vpop	{d8}
24015a60:	bd10      	pop	{r4, pc}
24015a62:	bf00      	nop
24015a64:	2f80000d 	.word	0x2f80000d

24015a68 <tPBPulse_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBPulse_setFreq     (tPBPulse* const osc, Lfloat freq)
#else
void    tPBPulse_setFreq     (tPBPulse* const osc, Lfloat freq)
#endif
{
    _tPBPulse* c = *osc;
24015a68:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015a6a:	edd3 7a07 	vldr	s15, [r3, #28]
    c->freq  = freq;
24015a6e:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015a72:	ee20 0a27 	vmul.f32	s0, s0, s15
24015a76:	eebd 0ac0 	vcvt.s32.f32	s0, s0
24015a7a:	ed83 0a02 	vstr	s0, [r3, #8]
}
24015a7e:	4770      	bx	lr

24015a80 <tPBPulse_setWidth>:
    }
    if (width > 0.95f)
    {
        width = 0.95f;
    }
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
24015a80:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24015a84:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 24015ab8 <tPBPulse_setWidth+0x38>
24015a88:	eddf 6a0c 	vldr	s13, [pc, #48]	; 24015abc <tPBPulse_setWidth+0x3c>
24015a8c:	fe80 0a06 	vmaxnm.f32	s0, s0, s12
24015a90:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 24015ac0 <tPBPulse_setWidth+0x40>
24015a94:	fe80 0a66 	vminnm.f32	s0, s0, s13
24015a98:	ee77 7ac0 	vsub.f32	s15, s15, s0
    c->width = width * TWO_TO_32;
24015a9c:	ee20 0a07 	vmul.f32	s0, s0, s14
    _tPBPulse* c = *osc;
24015aa0:	6803      	ldr	r3, [r0, #0]
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
24015aa2:	ee67 7a87 	vmul.f32	s15, s15, s14
    c->width = width * TWO_TO_32;
24015aa6:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
24015aaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    c->width = width * TWO_TO_32;
24015aae:	ed83 0a04 	vstr	s0, [r3, #16]
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
24015ab2:	edc3 7a05 	vstr	s15, [r3, #20]
}
24015ab6:	4770      	bx	lr
24015ab8:	3d4ccccd 	.word	0x3d4ccccd
24015abc:	3f733333 	.word	0x3f733333
24015ac0:	4f800000 	.word	0x4f800000

24015ac4 <tPBSaw_init>:

//==============================================================================

/* tSawtooth: Anti-aliased Sawtooth waveform. */
void    tPBSaw_init          (tPBSaw* const osc, LEAF* const leaf)
{
24015ac4:	b538      	push	{r3, r4, r5, lr}
    tPBSaw_initToPool(osc, &leaf->mempool);
}

void    tPBSaw_initToPool    (tPBSaw* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
24015ac6:	698c      	ldr	r4, [r1, #24]
{
24015ac8:	4605      	mov	r5, r0
    _tPBSaw* c = *osc = (_tPBSaw*) mpool_alloc(sizeof(_tPBSaw), m);
24015aca:	2020      	movs	r0, #32
24015acc:	4621      	mov	r1, r4
24015ace:	f7ff fbb5 	bl	2401523c <mpool_alloc>
24015ad2:	6028      	str	r0, [r5, #0]
    c->mempool = m;
24015ad4:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
    c->inc      =  0;
24015ad6:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
24015ad8:	6861      	ldr	r1, [r4, #4]
    c->phase    =  0;
    c->freq = 0.0f;
24015ada:	2200      	movs	r2, #0
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24015adc:	eddf 7a06 	vldr	s15, [pc, #24]	; 24015af8 <tPBSaw_init+0x34>
    c->invSampleRate = leaf->invSampleRate;
24015ae0:	ed91 7a01 	vldr	s14, [r1, #4]
    c->freq = 0.0f;
24015ae4:	60c2      	str	r2, [r0, #12]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24015ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->invSampleRate = leaf->invSampleRate;
24015aea:	ed80 7a04 	vstr	s14, [r0, #16]
    c->phase    =  0;
24015aee:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24015af2:	edc0 7a05 	vstr	s15, [r0, #20]
}
24015af6:	bd38      	pop	{r3, r4, r5, pc}
24015af8:	4f800000 	.word	0x4f800000

24015afc <tPBSaw_tick>:
#ifdef ITCMRAM
    Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBSaw_tick          (tPBSaw* const osc)
#else
Lfloat   tPBSaw_tick          (tPBSaw* const osc)
#endif
{
24015afc:	b510      	push	{r4, lr}
    _tPBSaw* c = *osc;
24015afe:	6804      	ldr	r4, [r0, #0]
    Lfloat out = (c->phase * INV_TWO_TO_31) - 1.0f;

    Lfloat phaseFloat = c->phase * INV_TWO_TO_32;
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
24015b00:	eddf 0a10 	vldr	s1, [pc, #64]	; 24015b44 <tPBSaw_tick+0x48>
{
24015b04:	ed2d 8b02 	vpush	{d8}
    Lfloat out = (c->phase * INV_TWO_TO_31) - 1.0f;
24015b08:	edd4 7a01 	vldr	s15, [r4, #4]
24015b0c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
24015b10:	edd4 7a02 	vldr	s15, [r4, #8]
24015b14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    out -= LEAF_poly_blep(phaseFloat, incFloat);
24015b18:	ee28 0a20 	vmul.f32	s0, s16, s1
24015b1c:	ee67 0aa0 	vmul.f32	s1, s15, s1
24015b20:	f7ff fa1c 	bl	24014f5c <LEAF_poly_blep>
    c->phase += c->inc;
24015b24:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24015b28:	ed9f 7a07 	vldr	s14, [pc, #28]	; 24015b48 <tPBSaw_tick+0x4c>
24015b2c:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
24015b30:	eee8 7a47 	vfms.f32	s15, s16, s14
24015b34:	4413      	add	r3, r2
24015b36:	6063      	str	r3, [r4, #4]
    return (-1.0f * out);
}
24015b38:	ecbd 8b02 	vpop	{d8}
24015b3c:	ee30 0a27 	vadd.f32	s0, s0, s15
24015b40:	bd10      	pop	{r4, pc}
24015b42:	bf00      	nop
24015b44:	2f80000d 	.word	0x2f80000d
24015b48:	2ffffff6 	.word	0x2ffffff6

24015b4c <tPBSaw_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tPBSaw_setFreq       (tPBSaw* const osc, Lfloat freq)
#else
void    tPBSaw_setFreq       (tPBSaw* const osc, Lfloat freq)
#endif
{
    _tPBSaw* c = *osc;
24015b4c:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015b4e:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
24015b52:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015b56:	ee20 0a27 	vmul.f32	s0, s0, s15
24015b5a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
24015b5e:	ed83 0a02 	vstr	s0, [r3, #8]
}
24015b62:	4770      	bx	lr

24015b64 <tPBSawSquare_init>:
//========================================================================


/* tSawtooth: Anti-aliased Sawtooth waveform. */
void    tPBSawSquare_init          (tPBSawSquare* const osc, LEAF* const leaf)
{
24015b64:	b538      	push	{r3, r4, r5, lr}
    tPBSawSquare_initToPool(osc, &leaf->mempool);
}

void    tPBSawSquare_initToPool    (tPBSawSquare* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
24015b66:	698c      	ldr	r4, [r1, #24]
{
24015b68:	4605      	mov	r5, r0
    _tPBSawSquare* c = *osc = (_tPBSawSquare*) mpool_alloc(sizeof(_tPBSawSquare), m);
24015b6a:	2028      	movs	r0, #40	; 0x28
24015b6c:	4621      	mov	r1, r4
24015b6e:	f7ff fb65 	bl	2401523c <mpool_alloc>
24015b72:	6028      	str	r0, [r5, #0]
    c->mempool = m;
24015b74:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
    c->inc      =  0;
24015b76:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
24015b78:	6861      	ldr	r1, [r4, #4]
    c->phase    =  0;
    c->freq = 0.0f;
24015b7a:	2200      	movs	r2, #0
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24015b7c:	eddf 7a06 	vldr	s15, [pc, #24]	; 24015b98 <tPBSawSquare_init+0x34>
    c->invSampleRate = leaf->invSampleRate;
24015b80:	ed91 7a01 	vldr	s14, [r1, #4]
    c->freq = 0.0f;
24015b84:	60c2      	str	r2, [r0, #12]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24015b86:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->invSampleRate = leaf->invSampleRate;
24015b8a:	ed80 7a04 	vstr	s14, [r0, #16]
    c->phase    =  0;
24015b8e:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24015b92:	edc0 7a05 	vstr	s15, [r0, #20]
}
24015b96:	bd38      	pop	{r3, r4, r5, pc}
24015b98:	4f800000 	.word	0x4f800000

24015b9c <tPBSawSquare_tick>:
#ifdef ITCMRAM
Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tPBSawSquare_tick          (tPBSawSquare* const osc)
#else
Lfloat   tPBSawSquare_tick          (tPBSawSquare* const osc)
#endif
{
24015b9c:	b530      	push	{r4, r5, lr}
    _tPBSawSquare* c = *osc;
24015b9e:	6804      	ldr	r4, [r0, #0]
{
24015ba0:	ed2d 8b06 	vpush	{d8-d10}

    Lfloat squareOut = ((c->phase < 2147483648u) * 2.0f) - 1.0f;
24015ba4:	6865      	ldr	r5, [r4, #4]
24015ba6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
    Lfloat phaseFloat = c->phase * INV_TWO_TO_32;
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
24015baa:	edd4 7a02 	vldr	s15, [r4, #8]
    Lfloat squareOut = ((c->phase < 2147483648u) * 2.0f) - 1.0f;
24015bae:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
24015bb2:	eddf 9a1f 	vldr	s19, [pc, #124]	; 24015c30 <tPBSawSquare_tick+0x94>
{
24015bb6:	b083      	sub	sp, #12
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
24015bb8:	eef8 0ae7 	vcvt.f32.s32	s1, s15
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
24015bbc:	ee07 5a90 	vmov	s15, r5
    Lfloat squareOut = ((c->phase < 2147483648u) * 2.0f) - 1.0f;
24015bc0:	2d00      	cmp	r5, #0
    Lfloat backwardsPhaseFloat = (c->phase + 2147483648u) * INV_TWO_TO_32;
24015bc2:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
24015bc6:	eeb8 aa67 	vcvt.f32.u32	s20, s15
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
24015bca:	ee60 0aa9 	vmul.f32	s1, s1, s19
    Lfloat squareOut = ((c->phase < 2147483648u) * 2.0f) - 1.0f;
24015bce:	fe28 8a88 	vselge.f32	s16, s17, s16
    Lfloat resetBlep = LEAF_poly_blep(phaseFloat,incFloat);
24015bd2:	ee2a 0a29 	vmul.f32	s0, s20, s19
24015bd6:	edcd 0a01 	vstr	s1, [sp, #4]
24015bda:	f7ff f9bf 	bl	24014f5c <LEAF_poly_blep>
    Lfloat backwardsPhaseFloat = (c->phase + 2147483648u) * INV_TWO_TO_32;
24015bde:	ee07 5a90 	vmov	s15, r5
    Lfloat resetBlep = LEAF_poly_blep(phaseFloat,incFloat);
24015be2:	eeb0 9a40 	vmov.f32	s18, s0
    Lfloat midBlep = LEAF_poly_blep(backwardsPhaseFloat, incFloat);
24015be6:	eddd 0a01 	vldr	s1, [sp, #4]
    Lfloat backwardsPhaseFloat = (c->phase + 2147483648u) * INV_TWO_TO_32;
24015bea:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    

    sawOut -= resetBlep;
    
    squareOut += resetBlep;
24015bee:	ee38 8a09 	vadd.f32	s16, s16, s18
    Lfloat midBlep = LEAF_poly_blep(backwardsPhaseFloat, incFloat);
24015bf2:	ee20 0a29 	vmul.f32	s0, s0, s19
24015bf6:	f7ff f9b1 	bl	24014f5c <LEAF_poly_blep>
    squareOut -= midBlep;
24015bfa:	eddf 7a0e 	vldr	s15, [pc, #56]	; 24015c34 <tPBSawSquare_tick+0x98>
24015bfe:	ee38 8a40 	vsub.f32	s16, s16, s0

    c->phase += c->inc;
    
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
24015c02:	ed94 7a08 	vldr	s14, [r4, #32]
24015c06:	eeea 8a67 	vfms.f32	s17, s20, s15
24015c0a:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    c->phase += c->inc;
24015c0e:	6863      	ldr	r3, [r4, #4]
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
24015c10:	ee28 8a07 	vmul.f32	s16, s16, s14
    c->phase += c->inc;
24015c14:	68a2      	ldr	r2, [r4, #8]
24015c16:	4413      	add	r3, r2
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
24015c18:	ee38 0a89 	vadd.f32	s0, s17, s18
    c->phase += c->inc;
24015c1c:	6063      	str	r3, [r4, #4]
}
24015c1e:	eea0 8a27 	vfma.f32	s16, s0, s15
24015c22:	eeb0 0a48 	vmov.f32	s0, s16
24015c26:	b003      	add	sp, #12
24015c28:	ecbd 8b06 	vpop	{d8-d10}
24015c2c:	bd30      	pop	{r4, r5, pc}
24015c2e:	bf00      	nop
24015c30:	2f80000d 	.word	0x2f80000d
24015c34:	3000000d 	.word	0x3000000d

24015c38 <tPBSawSquare_setFreq>:
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tPBSawSquare_setFreq       (tPBSawSquare* const osc, Lfloat freq)
#else
void    tPBSawSquare_setFreq       (tPBSawSquare* const osc, Lfloat freq)
#endif
{
    _tPBSawSquare* c = *osc;
24015c38:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = (uint32_t)(freq * c->invSampleRateTimesTwoTo32);
24015c3a:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
24015c3e:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = (uint32_t)(freq * c->invSampleRateTimesTwoTo32);
24015c42:	ee20 0a27 	vmul.f32	s0, s0, s15
24015c46:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24015c4a:	ed83 0a02 	vstr	s0, [r3, #8]

}
24015c4e:	4770      	bx	lr

24015c50 <tPBSawSquare_setShape>:
void    tPBSawSquare_setShape      (tPBSawSquare* const osc, Lfloat inputShape)
{
    _tPBSawSquare* c = *osc;
    
    c->shape  = inputShape;
    c->oneMinusShape = 1.0f - inputShape;
24015c50:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tPBSawSquare* c = *osc;
24015c54:	6803      	ldr	r3, [r0, #0]
    c->shape  = inputShape;
24015c56:	ed83 0a08 	vstr	s0, [r3, #32]
    c->oneMinusShape = 1.0f - inputShape;
24015c5a:	ee77 7ac0 	vsub.f32	s15, s15, s0
24015c5e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
24015c62:	4770      	bx	lr

24015c64 <tNoise_init>:
};

//========================================================================
/* Noise */
void    tNoise_init(tNoise* const ns, NoiseType type, LEAF* const leaf)
{
24015c64:	b570      	push	{r4, r5, r6, lr}
    tNoise_initToPool(ns, type, &leaf->mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
    _tMempool* m = *mp;
24015c66:	6995      	ldr	r5, [r2, #24]
{
24015c68:	4606      	mov	r6, r0
24015c6a:	460c      	mov	r4, r1
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
24015c6c:	2018      	movs	r0, #24
24015c6e:	4629      	mov	r1, r5
24015c70:	f7ff fae4 	bl	2401523c <mpool_alloc>
24015c74:	6030      	str	r0, [r6, #0]
    n->mempool = m;
24015c76:	6005      	str	r5, [r0, #0]
    LEAF* leaf = n->mempool->leaf;
24015c78:	686b      	ldr	r3, [r5, #4]
    
    n->type = type;
24015c7a:	7104      	strb	r4, [r0, #4]
    n->rand = leaf->random;
24015c7c:	691b      	ldr	r3, [r3, #16]
24015c7e:	6143      	str	r3, [r0, #20]
}
24015c80:	bd70      	pop	{r4, r5, r6, pc}
24015c82:	bf00      	nop

24015c84 <tNoise_initToPool>:
{
24015c84:	b570      	push	{r4, r5, r6, lr}
    _tMempool* m = *mp;
24015c86:	6815      	ldr	r5, [r2, #0]
{
24015c88:	4606      	mov	r6, r0
24015c8a:	460c      	mov	r4, r1
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
24015c8c:	2018      	movs	r0, #24
24015c8e:	4629      	mov	r1, r5
24015c90:	f7ff fad4 	bl	2401523c <mpool_alloc>
24015c94:	6030      	str	r0, [r6, #0]
    n->mempool = m;
24015c96:	6005      	str	r5, [r0, #0]
    LEAF* leaf = n->mempool->leaf;
24015c98:	686b      	ldr	r3, [r5, #4]
    n->type = type;
24015c9a:	7104      	strb	r4, [r0, #4]
    n->rand = leaf->random;
24015c9c:	691b      	ldr	r3, [r3, #16]
24015c9e:	6143      	str	r3, [r0, #20]
}
24015ca0:	bd70      	pop	{r4, r5, r6, pc}
24015ca2:	bf00      	nop

24015ca4 <tNoise_free>:

void    tNoise_free (tNoise* const ns)
{
    _tNoise* n = *ns;
24015ca4:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)n, n->mempool);
24015ca6:	6801      	ldr	r1, [r0, #0]
24015ca8:	f7ff bb8a 	b.w	240153c0 <mpool_free>

24015cac <tNoise_tick>:
}

Lfloat   tNoise_tick(tNoise* const ns)
{
24015cac:	b510      	push	{r4, lr}
    _tNoise* n = *ns;
24015cae:	6804      	ldr	r4, [r0, #0]
    
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
24015cb0:	6963      	ldr	r3, [r4, #20]
24015cb2:	4798      	blx	r3
    
    if (n->type == PinkNoise)
24015cb4:	7923      	ldrb	r3, [r4, #4]
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
24015cb6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
24015cba:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    if (n->type == PinkNoise)
24015cbe:	2b01      	cmp	r3, #1
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
24015cc0:	eee0 7a07 	vfma.f32	s15, s0, s14
    if (n->type == PinkNoise)
24015cc4:	d131      	bne.n	24015d2a <tNoise_tick+0x7e>
    {
        Lfloat tmp;
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
24015cc6:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 24015d30 <tNoise_tick+0x84>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24015cca:	eddf 6a1a 	vldr	s13, [pc, #104]	; 24015d34 <tNoise_tick+0x88>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
24015cce:	ee27 6a86 	vmul.f32	s12, s15, s12
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24015cd2:	ed94 5a03 	vldr	s10, [r4, #12]
24015cd6:	ee67 6aa6 	vmul.f32	s13, s15, s13
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
24015cda:	edd4 3a02 	vldr	s7, [r4, #8]
24015cde:	eddf 4a16 	vldr	s9, [pc, #88]	; 24015d38 <tNoise_tick+0x8c>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24015ce2:	eddf 5a16 	vldr	s11, [pc, #88]	; 24015d3c <tNoise_tick+0x90>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
24015ce6:	eea3 6aa4 	vfma.f32	s12, s7, s9
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
24015cea:	ed9f 7a15 	vldr	s14, [pc, #84]	; 24015d40 <tNoise_tick+0x94>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24015cee:	eee5 6a25 	vfma.f32	s13, s10, s11
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
24015cf2:	ed94 4a04 	vldr	s8, [r4, #16]
24015cf6:	ee27 7a87 	vmul.f32	s14, s15, s14
24015cfa:	eddf 5a12 	vldr	s11, [pc, #72]	; 24015d44 <tNoise_tick+0x98>
24015cfe:	eddf 4a12 	vldr	s9, [pc, #72]	; 24015d48 <tNoise_tick+0x9c>
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
        return (tmp * 0.05f);
24015d02:	ed9f 5a12 	vldr	s10, [pc, #72]	; 24015d4c <tNoise_tick+0xa0>
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
24015d06:	eea4 7a25 	vfma.f32	s14, s8, s11
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
24015d0a:	ed84 6a02 	vstr	s12, [r4, #8]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
24015d0e:	ee76 5a26 	vadd.f32	s11, s12, s13
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24015d12:	edc4 6a03 	vstr	s13, [r4, #12]
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
24015d16:	eef0 6a65 	vmov.f32	s13, s11
24015d1a:	ed84 7a04 	vstr	s14, [r4, #16]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
24015d1e:	eee7 6aa4 	vfma.f32	s13, s15, s9
24015d22:	ee37 7a26 	vadd.f32	s14, s14, s13
        return (tmp * 0.05f);
24015d26:	ee67 7a05 	vmul.f32	s15, s14, s10
    }
    else // WhiteNoise
    {
        return rand;
    }
}
24015d2a:	eeb0 0a67 	vmov.f32	s0, s15
24015d2e:	bd10      	pop	{r4, pc}
24015d30:	3dcad8a1 	.word	0x3dcad8a1
24015d34:	3e97d0ff 	.word	0x3e97d0ff
24015d38:	3f7f65fe 	.word	0x3f7f65fe
24015d3c:	3f76872b 	.word	0x3f76872b
24015d40:	3f86be97 	.word	0x3f86be97
24015d44:	3f11eb85 	.word	0x3f11eb85
24015d48:	3e3d3c36 	.word	0x3e3d3c36
24015d4c:	3d4ccccd 	.word	0x3d4ccccd

24015d50 <tIntPhasor_init>:


//beep boop adding intphasro
// Cycle
void    tIntPhasor_init(tIntPhasor* const cy, LEAF* const leaf)
{
24015d50:	b538      	push	{r3, r4, r5, lr}
    tIntPhasor_initToPool(cy, &leaf->mempool);
}

void    tIntPhasor_initToPool   (tIntPhasor* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
24015d52:	698c      	ldr	r4, [r1, #24]
{
24015d54:	4605      	mov	r5, r0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24015d56:	201c      	movs	r0, #28
24015d58:	4621      	mov	r1, r4
24015d5a:	f7ff fa6f 	bl	2401523c <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->phase    =  0;
24015d5e:	2300      	movs	r3, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24015d60:	6028      	str	r0, [r5, #0]
    c->mempool = m;
24015d62:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24015d64:	6862      	ldr	r2, [r4, #4]
    c->inc  = 0;
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24015d66:	ed9f 7a05 	vldr	s14, [pc, #20]	; 24015d7c <tIntPhasor_init+0x2c>
    c->inc  = 0;
24015d6a:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24015d6e:	edd2 7a01 	vldr	s15, [r2, #4]
24015d72:	ee67 7a87 	vmul.f32	s15, s15, s14
24015d76:	edc0 7a06 	vstr	s15, [r0, #24]
}
24015d7a:	bd38      	pop	{r3, r4, r5, pc}
24015d7c:	4f800000 	.word	0x4f800000

24015d80 <tIntPhasor_tick>:
}


Lfloat   tIntPhasor_tick(tIntPhasor* const cy)
{
    _tIntPhasor* c = *cy;
24015d80:	6802      	ldr	r2, [r0, #0]
    // Phasor increment
    c->phase = (c->phase + c->inc);
    
    return c->phase * INV_TWO_TO_32; 
24015d82:	eddf 7a06 	vldr	s15, [pc, #24]	; 24015d9c <tIntPhasor_tick+0x1c>
    c->phase = (c->phase + c->inc);
24015d86:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
24015d8a:	440b      	add	r3, r1
    return c->phase * INV_TWO_TO_32; 
24015d8c:	ee07 3a10 	vmov	s14, r3
    c->phase = (c->phase + c->inc);
24015d90:	6053      	str	r3, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
24015d92:	eeb8 0a47 	vcvt.f32.u32	s0, s14
}
24015d96:	ee20 0a27 	vmul.f32	s0, s0, s15
24015d9a:	4770      	bx	lr
24015d9c:	2f80000d 	.word	0x2f80000d

24015da0 <tIntPhasor_setFreq>:

void     tIntPhasor_setFreq(tIntPhasor* const cy, Lfloat freq)
{
    _tIntPhasor* c = *cy;
24015da0:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015da2:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
24015da6:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015daa:	ee20 0a27 	vmul.f32	s0, s0, s15
24015dae:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24015db2:	ed83 0a02 	vstr	s0, [r3, #8]
}
24015db6:	4770      	bx	lr

24015db8 <tIntPhasor_setPhase>:

void    tIntPhasor_setPhase(tIntPhasor* const cy, Lfloat phase)
{
    _tIntPhasor* c = *cy;
    
    int i = phase;
24015db8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
24015dbc:	ed9f 7a06 	vldr	s14, [pc, #24]	; 24015dd8 <tIntPhasor_setPhase+0x20>
    _tIntPhasor* c = *cy;
24015dc0:	6803      	ldr	r3, [r0, #0]
    phase -= i;
24015dc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24015dc6:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
24015dca:	ee20 0a07 	vmul.f32	s0, s0, s14
24015dce:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24015dd2:	ed83 0a01 	vstr	s0, [r3, #4]
}
24015dd6:	4770      	bx	lr
24015dd8:	4f800000 	.word	0x4f800000

24015ddc <tSquareLFO_init>:
    tIntPhasor_setFreq(cy, c->freq);
}

//////SQUARE(PUSHER)LFO
void    tSquareLFO_init(tSquareLFO* const cy, LEAF* const leaf)
{
24015ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24015dde:	ed2d 8b02 	vpush	{d8}
    tSquareLFO_initToPool(cy, &leaf->mempool);
}

void    tSquareLFO_initToPool   (tSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
24015de2:	698f      	ldr	r7, [r1, #24]
{
24015de4:	4606      	mov	r6, r0
24015de6:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24015de8:	2010      	movs	r0, #16
24015dea:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24015dec:	ed9f 8a22 	vldr	s16, [pc, #136]	; 24015e78 <tSquareLFO_init+0x9c>
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24015df0:	f7ff fa24 	bl	2401523c <mpool_alloc>
24015df4:	6030      	str	r0, [r6, #0]
    c->mempool = m;
24015df6:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24015df8:	4604      	mov	r4, r0
    _tMempool* m = *mp;
24015dfa:	69af      	ldr	r7, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24015dfc:	201c      	movs	r0, #28
24015dfe:	4639      	mov	r1, r7
24015e00:	f7ff fa1c 	bl	2401523c <mpool_alloc>
24015e04:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
24015e06:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24015e08:	687a      	ldr	r2, [r7, #4]
    c->phase    =  0;
24015e0a:	2700      	movs	r7, #0
    c->inc  = 0;
24015e0c:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24015e10:	edd2 7a01 	vldr	s15, [r2, #4]
24015e14:	ee67 7a88 	vmul.f32	s15, s15, s16
24015e18:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24015e1c:	201c      	movs	r0, #28
    _tMempool* m = *mp;
24015e1e:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24015e20:	4629      	mov	r1, r5
24015e22:	f7ff fa0b 	bl	2401523c <mpool_alloc>
24015e26:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
24015e28:	6005      	str	r5, [r0, #0]

void tSquareLFO_setPulseWidth(tSquareLFO* const cy, Lfloat pw)
{
    _tSquareLFO *c = *cy;

    c->pulsewidth = pw;
24015e2a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    LEAF* leaf = c->mempool->leaf;
24015e2e:	686a      	ldr	r2, [r5, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24015e30:	eddf 6a12 	vldr	s13, [pc, #72]	; 24015e7c <tSquareLFO_init+0xa0>
    c->inc  = 0;
24015e34:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24015e38:	ed92 7a01 	vldr	s14, [r2, #4]
24015e3c:	ee27 7a08 	vmul.f32	s14, s14, s16
24015e40:	ed80 7a06 	vstr	s14, [r0, #24]
    _tSquareLFO *c = *cy;
24015e44:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24015e46:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
24015e48:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24015e4c:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
24015e50:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24015e52:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24015e56:	eee7 7a26 	vfma.f32	s15, s14, s13
    int i = phase;
24015e5a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
24015e5e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24015e62:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
24015e66:	ee67 7a88 	vmul.f32	s15, s15, s16
24015e6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24015e6e:	edc3 7a01 	vstr	s15, [r3, #4]
}
24015e72:	ecbd 8b02 	vpop	{d8}
24015e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24015e78:	4f800000 	.word	0x4f800000
24015e7c:	2f80000d 	.word	0x2f80000d

24015e80 <tSquareLFO_initToPool>:
{
24015e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24015e82:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
24015e86:	680f      	ldr	r7, [r1, #0]
{
24015e88:	4606      	mov	r6, r0
24015e8a:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24015e8c:	2010      	movs	r0, #16
24015e8e:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24015e90:	ed9f 8a22 	vldr	s16, [pc, #136]	; 24015f1c <tSquareLFO_initToPool+0x9c>
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24015e94:	f7ff f9d2 	bl	2401523c <mpool_alloc>
24015e98:	6030      	str	r0, [r6, #0]
    c->mempool = m;
24015e9a:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24015e9c:	4604      	mov	r4, r0
    _tMempool* m = *mp;
24015e9e:	682f      	ldr	r7, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24015ea0:	201c      	movs	r0, #28
24015ea2:	4639      	mov	r1, r7
24015ea4:	f7ff f9ca 	bl	2401523c <mpool_alloc>
24015ea8:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
24015eaa:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24015eac:	687a      	ldr	r2, [r7, #4]
    c->phase    =  0;
24015eae:	2700      	movs	r7, #0
    c->inc  = 0;
24015eb0:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24015eb4:	edd2 7a01 	vldr	s15, [r2, #4]
24015eb8:	ee67 7a88 	vmul.f32	s15, s15, s16
24015ebc:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24015ec0:	201c      	movs	r0, #28
    _tMempool* m = *mp;
24015ec2:	682d      	ldr	r5, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24015ec4:	4629      	mov	r1, r5
24015ec6:	f7ff f9b9 	bl	2401523c <mpool_alloc>
24015eca:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
24015ecc:	6005      	str	r5, [r0, #0]
    c->pulsewidth = pw;
24015ece:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    LEAF* leaf = c->mempool->leaf;
24015ed2:	686a      	ldr	r2, [r5, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24015ed4:	eddf 6a12 	vldr	s13, [pc, #72]	; 24015f20 <tSquareLFO_initToPool+0xa0>
    c->inc  = 0;
24015ed8:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24015edc:	ed92 7a01 	vldr	s14, [r2, #4]
24015ee0:	ee27 7a08 	vmul.f32	s14, s14, s16
24015ee4:	ed80 7a06 	vstr	s14, [r0, #24]
    _tSquareLFO *c = *cy;
24015ee8:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24015eea:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
24015eec:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24015ef0:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
24015ef4:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24015ef6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24015efa:	eee7 7a26 	vfma.f32	s15, s14, s13
    int i = phase;
24015efe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
24015f02:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24015f06:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
24015f0a:	ee67 7a88 	vmul.f32	s15, s15, s16
24015f0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24015f12:	edc3 7a01 	vstr	s15, [r3, #4]
}
24015f16:	ecbd 8b02 	vpop	{d8}
24015f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24015f1c:	4f800000 	.word	0x4f800000
24015f20:	2f80000d 	.word	0x2f80000d

24015f24 <tSquareLFO_tick>:
    _tSquareLFO* c = *cy;
24015f24:	6802      	ldr	r2, [r0, #0]
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
24015f26:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
24015f2a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 24015f68 <tSquareLFO_tick+0x44>
    _tIntPhasor* c = *cy;
24015f2e:	6891      	ldr	r1, [r2, #8]
    c->phase = (c->phase + c->inc);
24015f30:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
24015f34:	4403      	add	r3, r0
24015f36:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
24015f38:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
24015f3c:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
24015f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
24015f42:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
24015f46:	4403      	add	r3, r0
    return c->phase * INV_TWO_TO_32; 
24015f48:	ee06 3a10 	vmov	s12, r3
    c->phase = (c->phase + c->inc);
24015f4c:	604b      	str	r3, [r1, #4]
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
24015f4e:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
24015f52:	eeb8 6a46 	vcvt.f32.u32	s12, s12
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
24015f56:	ee30 0a66 	vsub.f32	s0, s0, s13
24015f5a:	ee77 7ac6 	vsub.f32	s15, s15, s12
24015f5e:	eea7 0a87 	vfma.f32	s0, s15, s14
}
24015f62:	ee30 0a00 	vadd.f32	s0, s0, s0
24015f66:	4770      	bx	lr
24015f68:	2f80000d 	.word	0x2f80000d

24015f6c <tSquareLFO_setFreq>:
    _tSquareLFO* c = *cy;
24015f6c:	6802      	ldr	r2, [r0, #0]
    _tIntPhasor* c = *cy;
24015f6e:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015f70:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
24015f74:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015f78:	ee60 7a27 	vmul.f32	s15, s0, s15
24015f7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24015f80:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
24015f84:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015f86:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
24015f8a:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015f8e:	ee20 0a27 	vmul.f32	s0, s0, s15
24015f92:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24015f96:	ed83 0a02 	vstr	s0, [r3, #8]
}
24015f9a:	4770      	bx	lr

24015f9c <tSquareLFO_setPulseWidth>:
    _tSquareLFO *c = *cy;
24015f9c:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24015f9e:	eddf 6a0d 	vldr	s13, [pc, #52]	; 24015fd4 <tSquareLFO_setPulseWidth+0x38>
24015fa2:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
24015fa4:	ed83 0a01 	vstr	s0, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24015fa8:	edd2 7a01 	vldr	s15, [r2, #4]
    c->phase = phase * TWO_TO_32;
24015fac:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 24015fd8 <tSquareLFO_setPulseWidth+0x3c>
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24015fb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
24015fb4:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24015fb6:	eea7 0aa6 	vfma.f32	s0, s15, s13
    int i = phase;
24015fba:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
24015fbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24015fc2:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
24015fc6:	ee20 0a07 	vmul.f32	s0, s0, s14
24015fca:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24015fce:	ed83 0a01 	vstr	s0, [r3, #4]
}
24015fd2:	4770      	bx	lr
24015fd4:	2f80000d 	.word	0x2f80000d
24015fd8:	4f800000 	.word	0x4f800000

24015fdc <tSquareLFO_setPhase>:
    int i = phase;
24015fdc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
24015fe0:	eddf 6a13 	vldr	s13, [pc, #76]	; 24016030 <tSquareLFO_setPhase+0x54>

void tSquareLFO_setPhase(tSquareLFO* const cy, Lfloat phase)
{
    _tSquareLFO *c = *cy;
24015fe4:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->phasor, phase);
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24015fe6:	ed9f 6a13 	vldr	s12, [pc, #76]	; 24016034 <tSquareLFO_setPhase+0x58>
    phase -= i;
24015fea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tIntPhasor* c = *cy;
24015fee:	689a      	ldr	r2, [r3, #8]
    phase -= i;
24015ff0:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
24015ff4:	ee20 0a26 	vmul.f32	s0, s0, s13
24015ff8:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24015ffc:	ed82 0a01 	vstr	s0, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24016000:	689a      	ldr	r2, [r3, #8]
24016002:	edd3 7a01 	vldr	s15, [r3, #4]
24016006:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
2401600a:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
2401600c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24016010:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
24016014:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
24016018:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
2401601c:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
24016020:	ee67 7aa6 	vmul.f32	s15, s15, s13
24016024:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24016028:	edc3 7a01 	vstr	s15, [r3, #4]
}
2401602c:	4770      	bx	lr
2401602e:	bf00      	nop
24016030:	4f800000 	.word	0x4f800000
24016034:	2f80000d 	.word	0x2f80000d

24016038 <tSawSquareLFO_init>:

void    tSawSquareLFO_init        (tSawSquareLFO* const cy, LEAF* const leaf)
{
24016038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

}

void    tSawSquareLFO_initToPool  (tSawSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
2401603a:	460c      	mov	r4, r1
{
2401603c:	4606      	mov	r6, r0
2401603e:	460d      	mov	r5, r1
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
24016040:	2010      	movs	r0, #16
    _tMempool* m = *mp;
24016042:	f854 7f18 	ldr.w	r7, [r4, #24]!
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
24016046:	4639      	mov	r1, r7
24016048:	f7ff f8f8 	bl	2401523c <mpool_alloc>
    c->mempool = m;
    tSquareLFO_initToPool(&c->square,mp);
2401604c:	4621      	mov	r1, r4
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
2401604e:	6030      	str	r0, [r6, #0]
24016050:	4604      	mov	r4, r0
    c->mempool = m;
24016052:	f840 7b0c 	str.w	r7, [r0], #12
    tSquareLFO_initToPool(&c->square,mp);
24016056:	f7ff ff13 	bl	24015e80 <tSquareLFO_initToPool>
    _tMempool* m = *mp;
2401605a:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
2401605c:	201c      	movs	r0, #28
2401605e:	4629      	mov	r1, r5
24016060:	f7ff f8ec 	bl	2401523c <mpool_alloc>
    c->phase    =  0;
24016064:	2300      	movs	r3, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24016066:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
24016068:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
2401606a:	686a      	ldr	r2, [r5, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2401606c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 24016084 <tSawSquareLFO_init+0x4c>
    c->inc  = 0;
24016070:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24016074:	edd2 7a01 	vldr	s15, [r2, #4]
24016078:	ee67 7a87 	vmul.f32	s15, s15, s14
2401607c:	edc0 7a06 	vstr	s15, [r0, #24]
}
24016080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24016082:	bf00      	nop
24016084:	4f800000 	.word	0x4f800000

24016088 <tSawSquareLFO_tick>:
    tSquareLFO_free(&c->square);
    mpool_free((char*)c, c->mempool);
}
    
Lfloat   tSawSquareLFO_tick        (tSawSquareLFO* const cy)
{
24016088:	b410      	push	{r4}
    _tSawSquareLFO* c = *cy;
2401608a:	6802      	ldr	r2, [r0, #0]
    Lfloat a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
2401608c:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
24016090:	eddf 5a1d 	vldr	s11, [pc, #116]	; 24016108 <tSawSquareLFO_tick+0x80>
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
24016094:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
    _tIntPhasor* c = *cy;
24016098:	6891      	ldr	r1, [r2, #8]
    Lfloat b = tSquareLFO_tick(&c->square);
    return  (1 - c->shape) * a + c->shape * b; 
2401609a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->phase = (c->phase + c->inc);
2401609e:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
240160a2:	4403      	add	r3, r0
240160a4:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
240160a6:	ee07 3a90 	vmov	s15, r3
    _tSquareLFO* c = *cy;
240160aa:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
240160ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
240160b0:	6888      	ldr	r0, [r1, #8]
    c->phase = (c->phase + c->inc);
240160b2:	6843      	ldr	r3, [r0, #4]
    Lfloat a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
240160b4:	eea7 6aa5 	vfma.f32	s12, s15, s11
    c->phase = (c->phase + c->inc);
240160b8:	6884      	ldr	r4, [r0, #8]
240160ba:	4423      	add	r3, r4
240160bc:	6043      	str	r3, [r0, #4]
    return c->phase * INV_TWO_TO_32; 
240160be:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
240160c2:	68c8      	ldr	r0, [r1, #12]
    return c->phase * INV_TWO_TO_32; 
240160c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
240160c8:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
240160cc:	4423      	add	r3, r4
    return c->phase * INV_TWO_TO_32; 
240160ce:	ee06 3a90 	vmov	s13, r3
    c->phase = (c->phase + c->inc);
240160d2:	6043      	str	r3, [r0, #4]
    return  (1 - c->shape) * a + c->shape * b; 
240160d4:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
240160d8:	eef8 4a66 	vcvt.f32.u32	s9, s13
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
240160dc:	edd1 6a01 	vldr	s13, [r1, #4]
    return  (1 - c->shape) * a + c->shape * b; 
240160e0:	ee37 7a40 	vsub.f32	s14, s14, s0
}
240160e4:	f85d 4b04 	ldr.w	r4, [sp], #4
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
240160e8:	ee76 6ac5 	vsub.f32	s13, s13, s10
240160ec:	ee77 7ae4 	vsub.f32	s15, s15, s9
    return  (1 - c->shape) * a + c->shape * b; 
240160f0:	ee30 0a00 	vadd.f32	s0, s0, s0
240160f4:	ee37 7a07 	vadd.f32	s14, s14, s14
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
240160f8:	eee7 6aa5 	vfma.f32	s13, s15, s11
    return  (1 - c->shape) * a + c->shape * b; 
240160fc:	ee20 0a26 	vmul.f32	s0, s0, s13
}
24016100:	eea6 0a07 	vfma.f32	s0, s12, s14
24016104:	4770      	bx	lr
24016106:	bf00      	nop
24016108:	2f80000d 	.word	0x2f80000d

2401610c <tSawSquareLFO_setFreq>:
void    tSawSquareLFO_setFreq     (tSawSquareLFO* const cy, Lfloat freq)
{
    _tSawSquareLFO* c = *cy;
2401610c:	6802      	ldr	r2, [r0, #0]
    _tSquareLFO* c = *cy;
2401610e:	68d1      	ldr	r1, [r2, #12]
    _tIntPhasor* c = *cy;
24016110:	688b      	ldr	r3, [r1, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24016112:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
24016116:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401611a:	ee60 7a27 	vmul.f32	s15, s0, s15
2401611e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24016122:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
24016126:	68cb      	ldr	r3, [r1, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24016128:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
2401612c:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24016130:	ee60 7a27 	vmul.f32	s15, s0, s15
24016134:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24016138:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
2401613c:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401613e:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
24016142:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24016146:	ee20 0a27 	vmul.f32	s0, s0, s15
2401614a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
2401614e:	ed83 0a02 	vstr	s0, [r3, #8]
    tSquareLFO_setFreq(&c->square, freq);
    tIntPhasor_setFreq(&c->saw, freq);
}
24016152:	4770      	bx	lr

24016154 <tSawSquareLFO_setPhase>:
    int i = phase;
24016154:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
24016158:	eddf 6a15 	vldr	s13, [pc, #84]	; 240161b0 <tSawSquareLFO_setPhase+0x5c>
    tSquareLFO_setSampleRate(&c->square, sr);
    tIntPhasor_setSampleRate(&c->saw, sr);
}
void    tSawSquareLFO_setPhase (tSawSquareLFO* const cy, Lfloat phase)
{
    _tSawSquareLFO* c = *cy;
2401615c:	6801      	ldr	r1, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
2401615e:	ed9f 6a15 	vldr	s12, [pc, #84]	; 240161b4 <tSawSquareLFO_setPhase+0x60>
    phase -= i;
24016162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tSquareLFO *c = *cy;
24016166:	68ca      	ldr	r2, [r1, #12]
    _tIntPhasor* c = *cy;
24016168:	6890      	ldr	r0, [r2, #8]
    phase -= i;
2401616a:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
2401616e:	ee20 0a26 	vmul.f32	s0, s0, s13
24016172:	eefc 7ac0 	vcvt.u32.f32	s15, s0
24016176:	edc0 7a01 	vstr	s15, [r0, #4]
2401617a:	ee17 3a90 	vmov	r3, s15
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
2401617e:	6890      	ldr	r0, [r2, #8]
24016180:	edd2 7a01 	vldr	s15, [r2, #4]
24016184:	ed90 7a01 	vldr	s14, [r0, #4]
    _tIntPhasor* c = *cy;
24016188:	68d2      	ldr	r2, [r2, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
2401618a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2401618e:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
24016192:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
24016196:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
2401619a:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
2401619e:	ee67 7aa6 	vmul.f32	s15, s15, s13
240161a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240161a6:	edc2 7a01 	vstr	s15, [r2, #4]
    _tIntPhasor* c = *cy;
240161aa:	688a      	ldr	r2, [r1, #8]
    c->phase = phase * TWO_TO_32;
240161ac:	6053      	str	r3, [r2, #4]
    tSquareLFO_setPhase(&c->square, phase);
    tIntPhasor_setPhase(&c->saw, phase);
}
240161ae:	4770      	bx	lr
240161b0:	4f800000 	.word	0x4f800000
240161b4:	2f80000d 	.word	0x2f80000d

240161b8 <tSawSquareLFO_setShape>:


void    tSawSquareLFO_setShape (tSawSquareLFO* const cy, Lfloat shape)
{
    _tSawSquareLFO* c = *cy;
240161b8:	6803      	ldr	r3, [r0, #0]
    c->shape = shape; 
240161ba:	ed83 0a01 	vstr	s0, [r3, #4]
}
240161be:	4770      	bx	lr

240161c0 <tTriLFO_init>:



///tri
void    tTriLFO_init(tTriLFO* const cy, LEAF* const leaf)
{
240161c0:	b538      	push	{r3, r4, r5, lr}
    tTriLFO_initToPool(cy, &leaf->mempool);
}

void    tTriLFO_initToPool   (tTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
240161c2:	698d      	ldr	r5, [r1, #24]
{
240161c4:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
240161c6:	2018      	movs	r0, #24
240161c8:	4629      	mov	r1, r5
240161ca:	f7ff f837 	bl	2401523c <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
240161ce:	2300      	movs	r3, #0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
240161d0:	6020      	str	r0, [r4, #0]
    c->mempool = m;
240161d2:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
240161d4:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
240161d6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 2401620c <tTriLFO_init+0x4c>

void     tTriLFO_setFreq(tTriLFO* const cy, Lfloat freq)
{
    _tTriLFO* c = *cy;
    
    c->freq  = freq;
240161da:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 24016210 <tTriLFO_init+0x50>
    c->phase    =  0;
240161de:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
240161e2:	edd2 6a01 	vldr	s13, [r2, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
240161e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
    c->invSampleRate = leaf->invSampleRate;
240161ea:	edc0 6a04 	vstr	s13, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
240161ee:	edc0 7a05 	vstr	s15, [r0, #20]
    _tTriLFO* c = *cy;
240161f2:	6823      	ldr	r3, [r4, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240161f4:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
240161f8:	ed83 7a03 	vstr	s14, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240161fc:	ee67 7a87 	vmul.f32	s15, s15, s14
24016200:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24016204:	edc3 7a02 	vstr	s15, [r3, #8]
}
24016208:	bd38      	pop	{r3, r4, r5, pc}
2401620a:	bf00      	nop
2401620c:	4f800000 	.word	0x4f800000
24016210:	435c0000 	.word	0x435c0000

24016214 <tTriLFO_tick>:
    _tTriLFO* c = *cy;
24016214:	6801      	ldr	r1, [r0, #0]
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
24016216:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
2401621a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 24016244 <tTriLFO_tick+0x30>
    c->phase += c->inc;
2401621e:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
24016222:	4413      	add	r3, r2
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
24016224:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    c->phase += c->inc;
24016228:	604b      	str	r3, [r1, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
2401622a:	eb02 73e2 	add.w	r3, r2, r2, asr #31
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
2401622e:	ea83 73e2 	eor.w	r3, r3, r2, asr #31
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
24016232:	ee07 3a90 	vmov	s15, r3
24016236:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401623a:	eea7 0a87 	vfma.f32	s0, s15, s14
}
2401623e:	ee30 0a00 	vadd.f32	s0, s0, s0
24016242:	4770      	bx	lr
24016244:	2ffffff6 	.word	0x2ffffff6

24016248 <tTriLFO_setFreq>:
    _tTriLFO* c = *cy;
24016248:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401624a:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
2401624e:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24016252:	ee20 0a27 	vmul.f32	s0, s0, s15
24016256:	eebd 0ac0 	vcvt.s32.f32	s0, s0
2401625a:	ed83 0a02 	vstr	s0, [r3, #8]
}
2401625e:	4770      	bx	lr

24016260 <tTriLFO_setPhase>:

void    tTriLFO_setPhase(tTriLFO* const cy, Lfloat phase)
{
    _tTriLFO* c = *cy;
    int i = phase;
24016260:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    _tTriLFO* c = *cy;
24016264:	6803      	ldr	r3, [r0, #0]
    phase -= i;
24016266:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401626a:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
2401626e:	eebe 0ac0 	vcvt.s32.f32	s0, s0, #32
24016272:	ed83 0a01 	vstr	s0, [r3, #4]
}
24016276:	4770      	bx	lr

24016278 <tSineTriLFO_init>:
    tTriLFO_setFreq(cy, c->freq);
}
///sinetri

void    tSineTriLFO_init        (tSineTriLFO* const cy, LEAF* const leaf)
{
24016278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2401627a:	ed2d 8b02 	vpush	{d8}
    tSineTriLFO_initToPool(cy, &leaf->mempool);
}

void    tSineTriLFO_initToPool  (tSineTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
2401627e:	698f      	ldr	r7, [r1, #24]
{
24016280:	4606      	mov	r6, r0
24016282:	460d      	mov	r5, r1
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
24016284:	2010      	movs	r0, #16
24016286:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
24016288:	ed9f 8a1e 	vldr	s16, [pc, #120]	; 24016304 <tSineTriLFO_init+0x8c>
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
2401628c:	f7fe ffd6 	bl	2401523c <mpool_alloc>
24016290:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
24016292:	2018      	movs	r0, #24
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
24016294:	6034      	str	r4, [r6, #0]
    c->mempool = m;
24016296:	6027      	str	r7, [r4, #0]
    _tMempool* m = *mp;
24016298:	69ae      	ldr	r6, [r5, #24]
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
2401629a:	4631      	mov	r1, r6
2401629c:	f7fe ffce 	bl	2401523c <mpool_alloc>
240162a0:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
240162a2:	6006      	str	r6, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
240162a4:	6873      	ldr	r3, [r6, #4]
    c->inc      =  0;
240162a6:	2600      	movs	r6, #0
    c->freq  = freq;
240162a8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 24016308 <tSineTriLFO_init+0x90>
    c->phase    =  0;
240162ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
240162b0:	edd3 7a01 	vldr	s15, [r3, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
240162b4:	ee67 6a88 	vmul.f32	s13, s15, s16
    c->invSampleRate = leaf->invSampleRate;
240162b8:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
240162bc:	edc0 6a05 	vstr	s13, [r0, #20]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
240162c0:	2018      	movs	r0, #24
    _tTriLFO* c = *cy;
240162c2:	68a3      	ldr	r3, [r4, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240162c4:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
240162c8:	ed83 7a03 	vstr	s14, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240162cc:	ee67 7a87 	vmul.f32	s15, s15, s14
240162d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
240162d4:	edc3 7a02 	vstr	s15, [r3, #8]
    _tMempool* m = *mp;
240162d8:	69ad      	ldr	r5, [r5, #24]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
240162da:	4629      	mov	r1, r5
240162dc:	f7fe ffae 	bl	2401523c <mpool_alloc>
240162e0:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
240162e2:	6005      	str	r5, [r0, #0]
    c->mask = SINE_TABLE_SIZE - 1;
240162e4:	f240 73ff 	movw	r3, #2047	; 0x7ff
    LEAF* leaf = c->mempool->leaf;
240162e8:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
240162ea:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240162ee:	edd2 7a01 	vldr	s15, [r2, #4]
    c->mask = SINE_TABLE_SIZE - 1;
240162f2:	6143      	str	r3, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240162f4:	ee67 7a88 	vmul.f32	s15, s15, s16
240162f8:	edc0 7a04 	vstr	s15, [r0, #16]
}
240162fc:	ecbd 8b02 	vpop	{d8}
24016300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24016302:	bf00      	nop
24016304:	4f800000 	.word	0x4f800000
24016308:	435c0000 	.word	0x435c0000

2401630c <tSineTriLFO_tick>:
    tTriLFO_free(&c->tri);
    mpool_free((char*)c, c->mempool);
}
    
Lfloat   tSineTriLFO_tick        (tSineTriLFO* const cy)
{
2401630c:	b470      	push	{r4, r5, r6}
    _tSineTriLFO* c = *cy;
2401630e:	6804      	ldr	r4, [r0, #0]
    Lfloat a = tCycle_tick(&c->sine);
    Lfloat b = tTriLFO_tick(&c->tri);
    return  (1.0f - c->shape) * a + c->shape * b;
24016310:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    samp0 = __leaf_table_sinewave[idx];
24016314:	4a21      	ldr	r2, [pc, #132]	; (2401639c <tSineTriLFO_tick+0x90>)
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
24016316:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
    _tCycle* c = *cy;
2401631a:	68e0      	ldr	r0, [r4, #12]
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
2401631c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 240163a0 <tSineTriLFO_tick+0x94>
    idx = (idx + 1) & c->mask;
24016320:	6945      	ldr	r5, [r0, #20]
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
24016322:	eddf 4a20 	vldr	s9, [pc, #128]	; 240163a4 <tSineTriLFO_tick+0x98>
    c->phase += c->inc;
24016326:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
2401632a:	440b      	add	r3, r1
2401632c:	6043      	str	r3, [r0, #4]
    idx = c->phase >> 21; //11 bit table 
2401632e:	0d59      	lsrs	r1, r3, #21
    _tTriLFO* c = *cy;
24016330:	68a0      	ldr	r0, [r4, #8]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
24016332:	f3c3 0314 	ubfx	r3, r3, #0, #21
24016336:	ee07 3a90 	vmov	s15, r3
    c->phase += c->inc;
2401633a:	e9d0 3601 	ldrd	r3, r6, [r0, #4]
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
2401633e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->phase += c->inc;
24016342:	4433      	add	r3, r6
24016344:	6043      	str	r3, [r0, #4]
    idx = (idx + 1) & c->mask;
24016346:	1c48      	adds	r0, r1, #1
    samp0 = __leaf_table_sinewave[idx];
24016348:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
2401634c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    idx = (idx + 1) & c->mask;
24016350:	4028      	ands	r0, r5
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24016352:	ee67 7a87 	vmul.f32	s15, s15, s14
    samp0 = __leaf_table_sinewave[idx];
24016356:	edd1 6a00 	vldr	s13, [r1]
    samp1 = __leaf_table_sinewave[idx];
2401635a:	eb02 0180 	add.w	r1, r2, r0, lsl #2
    return  (1.0f - c->shape) * a + c->shape * b;
2401635e:	ed94 7a01 	vldr	s14, [r4, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
24016362:	eb03 72e3 	add.w	r2, r3, r3, asr #31
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24016366:	ed91 5a00 	vldr	s10, [r1]
    return  (1.0f - c->shape) * a + c->shape * b;
2401636a:	ee37 0a07 	vadd.f32	s0, s14, s14
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
2401636e:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
    return  (1.0f - c->shape) * a + c->shape * b;
24016372:	ee36 6a47 	vsub.f32	s12, s12, s14
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24016376:	ee35 5a66 	vsub.f32	s10, s10, s13
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
2401637a:	ee07 2a10 	vmov	s14, r2
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
2401637e:	eee7 6a85 	vfma.f32	s13, s15, s10
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
24016382:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24016386:	eef0 7a65 	vmov.f32	s15, s11
}
2401638a:	bc70      	pop	{r4, r5, r6}
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
2401638c:	eee7 7a24 	vfma.f32	s15, s14, s9
    return  (1.0f - c->shape) * a + c->shape * b;
24016390:	ee20 0a27 	vmul.f32	s0, s0, s15
}
24016394:	eea6 0a26 	vfma.f32	s0, s12, s13
24016398:	4770      	bx	lr
2401639a:	bf00      	nop
2401639c:	24024b94 	.word	0x24024b94
240163a0:	35000004 	.word	0x35000004
240163a4:	2ffffff6 	.word	0x2ffffff6

240163a8 <tSineTriLFO_setFreq>:
void    tSineTriLFO_setFreq     (tSineTriLFO* const cy, Lfloat freq)
{
    _tSineTriLFO* c = *cy;
240163a8:	6802      	ldr	r2, [r0, #0]
    _tTriLFO* c = *cy;
240163aa:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240163ac:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
240163b0:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240163b4:	ee60 7a27 	vmul.f32	s15, s0, s15
240163b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
240163bc:	edc3 7a02 	vstr	s15, [r3, #8]
    _tCycle* c = *cy;
240163c0:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240163c2:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
240163c6:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240163ca:	ee20 0a27 	vmul.f32	s0, s0, s15
240163ce:	eebd 0ac0 	vcvt.s32.f32	s0, s0
240163d2:	ed83 0a02 	vstr	s0, [r3, #8]
    tTriLFO_setFreq(&c->tri, freq);
    tCycle_setFreq(&c->sine, freq);
}
240163d6:	4770      	bx	lr

240163d8 <tSineTriLFO_setPhase>:
    int i = phase;
240163d8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32_INT;
240163dc:	ed9f 7a09 	vldr	s14, [pc, #36]	; 24016404 <tSineTriLFO_setPhase+0x2c>
    tTriLFO_setSampleRate(&c->tri, sr);
    tCycle_setSampleRate(&c->sine, sr);
}
void    tSineTriLFO_setPhase (tSineTriLFO* const cy, Lfloat phase)
{
    _tSineTriLFO* c = *cy;
240163e0:	6803      	ldr	r3, [r0, #0]
    phase -= i;
240163e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tTriLFO* c = *cy;
240163e6:	689a      	ldr	r2, [r3, #8]
    phase -= i;
240163e8:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
240163ec:	ee20 0a07 	vmul.f32	s0, s0, s14
240163f0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
240163f4:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    c->phase = phase * TWO_TO_32_INT;
240163f8:	edc2 7a01 	vstr	s15, [r2, #4]
    _tCycle* c = *cy;
240163fc:	68db      	ldr	r3, [r3, #12]
    c->phase = phase * TWO_TO_32;
240163fe:	ed83 0a01 	vstr	s0, [r3, #4]
    tTriLFO_setPhase(&c->tri, phase);
    tCycle_setPhase(&c->sine, phase);
}
24016402:	4770      	bx	lr
24016404:	4f800000 	.word	0x4f800000

24016408 <tSineTriLFO_setShape>:

 void    tSineTriLFO_setShape (tSineTriLFO* const cy, Lfloat shape)
 {
    _tSineTriLFO* c = *cy;
24016408:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
2401640a:	ed83 0a01 	vstr	s0, [r3, #4]

 }
2401640e:	4770      	bx	lr

24016410 <tPickupNonLinearity_init>:
	return out;
}


void   tPickupNonLinearity_init          (tPickupNonLinearity* const pl, LEAF* const leaf)
{
24016410:	b538      	push	{r3, r4, r5, lr}
	tPickupNonLinearity_initToPool(pl, &leaf->mempool);
}
void   tPickupNonLinearity_initToPool          (tPickupNonLinearity* const pl, tMempool* const mp)
{
    _tMempool* m = *mp;
24016412:	698d      	ldr	r5, [r1, #24]
{
24016414:	4604      	mov	r4, r0
    _tPickupNonLinearity* p = *pl = (_tPickupNonLinearity*) mpool_alloc(sizeof(_tPickupNonLinearity), m);
24016416:	2008      	movs	r0, #8
24016418:	4629      	mov	r1, r5
2401641a:	f7fe ff0f 	bl	2401523c <mpool_alloc>
    p->mempool = m;
    p->prev = 0.0f;
2401641e:	2300      	movs	r3, #0
    _tPickupNonLinearity* p = *pl = (_tPickupNonLinearity*) mpool_alloc(sizeof(_tPickupNonLinearity), m);
24016420:	6020      	str	r0, [r4, #0]
    p->mempool = m;
24016422:	6005      	str	r5, [r0, #0]
    p->prev = 0.0f;
24016424:	6043      	str	r3, [r0, #4]
}
24016426:	bd38      	pop	{r3, r4, r5, pc}

24016428 <tPickupNonLinearity_free>:
}
void   tPickupNonLinearity_free          (tPickupNonLinearity* const pl)
{
	_tPickupNonLinearity* p = *pl;
24016428:	6800      	ldr	r0, [r0, #0]
	mpool_free((char*)p, p->mempool);
2401642a:	6801      	ldr	r1, [r0, #0]
2401642c:	f7fe bfc8 	b.w	240153c0 <mpool_free>

24016430 <tPickupNonLinearity_tick>:
}
Lfloat   tPickupNonLinearity_tick          (tPickupNonLinearity* const pl, Lfloat x)
{
	_tPickupNonLinearity* p = *pl;
	x = x * 2.0f;
24016430:	ee70 7a00 	vadd.f32	s15, s0, s0
24016434:	ed9f 5a0f 	vldr	s10, [pc, #60]	; 24016474 <tPickupNonLinearity_tick+0x44>
24016438:	ed9f 6a0f 	vldr	s12, [pc, #60]	; 24016478 <tPickupNonLinearity_tick+0x48>
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
2401643c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 2401647c <tPickupNonLinearity_tick+0x4c>
24016440:	ee67 5aa7 	vmul.f32	s11, s15, s15
24016444:	ed9f 4a0e 	vldr	s8, [pc, #56]	; 24016480 <tPickupNonLinearity_tick+0x50>
24016448:	eea7 6a85 	vfma.f32	s12, s15, s10
2401644c:	eddf 6a0d 	vldr	s13, [pc, #52]	; 24016484 <tPickupNonLinearity_tick+0x54>
	out *= 4.366812227074236f;
	Lfloat y = out - p->prev;
24016450:	6803      	ldr	r3, [r0, #0]
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
24016452:	ee25 5aa7 	vmul.f32	s10, s11, s15
	Lfloat y = out - p->prev;
24016456:	eddf 4a0c 	vldr	s9, [pc, #48]	; 24016488 <tPickupNonLinearity_tick+0x58>
2401645a:	ed93 0a01 	vldr	s0, [r3, #4]
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
2401645e:	ee25 7a07 	vmul.f32	s14, s10, s14
24016462:	eee5 6a06 	vfma.f32	s13, s10, s12
24016466:	eea5 7a84 	vfma.f32	s14, s11, s8
2401646a:	eea7 7aa6 	vfma.f32	s14, s15, s13
	return y;
}
2401646e:	ee97 0a24 	vfnms.f32	s0, s14, s9
24016472:	4770      	bx	lr
24016474:	3a59d777 	.word	0x3a59d777
24016478:	39f9096c 	.word	0x39f9096c
2401647c:	3b0a47ed 	.word	0x3b0a47ed
24016480:	3bdd2f1b 	.word	0x3bdd2f1b
24016484:	3d99999a 	.word	0x3d99999a
24016488:	408bbced 	.word	0x408bbced
2401648c:	00000000 	.word	0x00000000

24016490 <tSimpleLivingString3_initToPool>:
}

void    tSimpleLivingString3_initToPool  (tSimpleLivingString3* const pl, int oversampling, Lfloat freq, Lfloat dampFreq,
                                         Lfloat decay, Lfloat targetLev, Lfloat levSmoothFactor,
                                         Lfloat levStrength, int levMode, tMempool* const mp)
{
24016490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24016494:	ed2d 8b0a 	vpush	{d8-d12}
    _tMempool* m = *mp;
24016498:	f8d3 9000 	ldr.w	r9, [r3]
{
2401649c:	b083      	sub	sp, #12
2401649e:	460e      	mov	r6, r1
240164a0:	4680      	mov	r8, r0
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
240164a2:	4649      	mov	r1, r9
240164a4:	2070      	movs	r0, #112	; 0x70
{
240164a6:	461d      	mov	r5, r3
240164a8:	eeb0 8a40 	vmov.f32	s16, s0
240164ac:	eeb0 9a41 	vmov.f32	s18, s2
240164b0:	4617      	mov	r7, r2
240164b2:	eef0 9a61 	vmov.f32	s19, s3
240164b6:	eeb0 aa42 	vmov.f32	s20, s4
240164ba:	eeb0 ba62 	vmov.f32	s22, s5
240164be:	eef0 8a60 	vmov.f32	s17, s1
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
240164c2:	f7fe febb 	bl	2401523c <mpool_alloc>
240164c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    p->mempool = m;
    LEAF* leaf = p->mempool->leaf;
    p->oversampling = oversampling;
    p->sampleRate = leaf->sampleRate * oversampling;
240164ca:	ee07 6a90 	vmov	s15, r6
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
240164ce:	f8c8 0000 	str.w	r0, [r8]
    p->curr=0.0f;
    p->maxLength = 2400 * oversampling;
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
240164d2:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    p->mempool = m;
240164d6:	f8c0 9000 	str.w	r9, [r0]
    p->sampleRate = leaf->sampleRate * oversampling;
240164da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240164de:	ee87 ca08 	vdiv.f32	s24, s14, s16
    LEAF* leaf = p->mempool->leaf;
240164e2:	f8d9 3004 	ldr.w	r3, [r9, #4]
    p->oversampling = oversampling;
240164e6:	65c6      	str	r6, [r0, #92]	; 0x5c
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
240164e8:	4604      	mov	r4, r0
    p->sampleRate = leaf->sampleRate * oversampling;
240164ea:	ed93 7a00 	vldr	s14, [r3]
    p->maxLength = 2400 * oversampling;
240164ee:	f44f 6316 	mov.w	r3, #2400	; 0x960
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
240164f2:	f100 0a58 	add.w	sl, r0, #88	; 0x58
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
240164f6:	f100 0b34 	add.w	fp, r0, #52	; 0x34
    p->maxLength = 2400 * oversampling;
240164fa:	fb03 f606 	mul.w	r6, r3, r6
    p->curr=0.0f;
240164fe:	2300      	movs	r3, #0
    p->sampleRate = leaf->sampleRate * oversampling;
24016500:	ee67 7a87 	vmul.f32	s15, s15, s14
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24016504:	eddf 0a7e 	vldr	s1, [pc, #504]	; 24016700 <tSimpleLivingString3_initToPool+0x270>
    p->curr=0.0f;
24016508:	6243      	str	r3, [r0, #36]	; 0x24
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
2401650a:	4629      	mov	r1, r5
    p->maxLength = 2400 * oversampling;
2401650c:	6306      	str	r6, [r0, #48]	; 0x30
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
2401650e:	f104 0938 	add.w	r9, r4, #56	; 0x38
    p->sampleRate = leaf->sampleRate * oversampling;
24016512:	edc0 7a18 	vstr	s15, [r0, #96]	; 0x60
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24016516:	4650      	mov	r0, sl
24016518:	ee2c 0a2a 	vmul.f32	s0, s24, s21
2401651c:	ee20 0a27 	vmul.f32	s0, s0, s15
24016520:	f7fb fc5e 	bl	24011de0 <tExpSmooth_initToPool>
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
24016524:	ed94 0a02 	vldr	s0, [r4, #8]
24016528:	462a      	mov	r2, r5
2401652a:	6b21      	ldr	r1, [r4, #48]	; 0x30
2401652c:	4658      	mov	r0, fp
2401652e:	f7fa fb91 	bl	24010c54 <tLinearDelay_initToPool>
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
24016532:	ed94 0a02 	vldr	s0, [r4, #8]
24016536:	462a      	mov	r2, r5
24016538:	6b21      	ldr	r1, [r4, #48]	; 0x30
2401653a:	4648      	mov	r0, r9
2401653c:	f7fa fb8a 	bl	24010c54 <tLinearDelay_initToPool>
    mpool_free((char*)p, p->mempool);
}

void     tSimpleLivingString3_setFreq(tSimpleLivingString3* const pl, Lfloat freq)
{
    _tSimpleLivingString3* p = *pl;
24016540:	f8d8 6000 	ldr.w	r6, [r8]
    p->freq = freq;
    Lfloat waveLength = (p->sampleRate/freq);
24016544:	ed96 7a18 	vldr	s14, [r6, #96]	; 0x60
    p->freq = freq;
24016548:	ed86 8a01 	vstr	s16, [r6, #4]
    Lfloat waveLength = (p->sampleRate/freq);
2401654c:	ee2c 7a07 	vmul.f32	s14, s24, s14
    if (waveLength<4.8) waveLength=4.8f;
24016550:	ed9f 6b67 	vldr	d6, [pc, #412]	; 240166f0 <tSimpleLivingString3_initToPool+0x260>
24016554:	eeb7 5ac7 	vcvt.f64.f32	d5, s14
24016558:	eeb4 5bc6 	vcmpe.f64	d5, d6
2401655c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016560:	f100 80bf 	bmi.w	240166e2 <tSimpleLivingString3_initToPool+0x252>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
24016564:	6b33      	ldr	r3, [r6, #48]	; 0x30
24016566:	005b      	lsls	r3, r3, #1
24016568:	ee07 3a90 	vmov	s15, r3
2401656c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    p->waveLengthInSamples =  waveLength * 0.5f;
24016570:	fec7 7ac7 	vminnm.f32	s15, s15, s14
24016574:	ee27 0aaa 	vmul.f32	s0, s15, s21
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24016578:	f106 0058 	add.w	r0, r6, #88	; 0x58
    //Lfloat decay = p->userDecay;

    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
2401657c:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
    p->waveLengthInSamples =  waveLength * 0.5f;
24016580:	ed86 0a02 	vstr	s0, [r6, #8]
    p->rippleDelay = 0.5f;
24016584:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24016588:	f7fb fc80 	bl	24011e8c <tExpSmooth_setDest>
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
2401658c:	ed96 7a05 	vldr	s14, [r6, #20]
24016590:	eddf 7a5c 	vldr	s15, [pc, #368]	; 24016704 <tSimpleLivingString3_initToPool+0x274>
24016594:	ee37 7a2b 	vadd.f32	s14, s14, s23
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24016598:	ed96 6a01 	vldr	s12, [r6, #4]
2401659c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
240165a0:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
240165a4:	ed9f 0b54 	vldr	d0, [pc, #336]	; 240166f8 <tSimpleLivingString3_initToPool+0x268>
240165a8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
240165ac:	ee27 7b06 	vmul.f64	d7, d7, d6
240165b0:	ee80 0b07 	vdiv.f64	d0, d0, d7
240165b4:	f003 fa5c 	bl	24019a70 <exp>
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
240165b8:	4658      	mov	r0, fp
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
240165ba:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
240165be:	ed86 0a04 	vstr	s0, [r6, #16]
    tHighpass_initToPool(&p->DCblocker,13, mp);
240165c2:	f104 0650 	add.w	r6, r4, #80	; 0x50
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
240165c6:	ed94 0a02 	vldr	s0, [r4, #8]
240165ca:	f7fa fc47 	bl	24010e5c <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, p->waveLengthInSamples);
240165ce:	ed94 0a02 	vldr	s0, [r4, #8]
240165d2:	4648      	mov	r0, r9
240165d4:	f7fa fc42 	bl	24010e5c <tLinearDelay_setDelay>
    tLinearDelay_clear(&p->delayLineU);
240165d8:	4658      	mov	r0, fp
240165da:	f7fa fbb5 	bl	24010d48 <tLinearDelay_clear>
    tLinearDelay_clear(&p->delayLineL);
240165de:	4648      	mov	r0, r9
240165e0:	f7fa fbb2 	bl	24010d48 <tLinearDelay_clear>
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
240165e4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
240165e8:	4629      	mov	r1, r5
240165ea:	eeb0 0a68 	vmov.f32	s0, s17
    p->dampFreq = dampFreq;
240165ee:	edc4 8a03 	vstr	s17, [r4, #12]
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
240165f2:	9001      	str	r0, [sp, #4]
240165f4:	f7fb fe96 	bl	24012324 <tOnePole_initToPool>
    tOnePole_setSampleRate(&p->bridgeFilter, p->sampleRate);
240165f8:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
240165fc:	9801      	ldr	r0, [sp, #4]
240165fe:	f7fb fefb 	bl	240123f8 <tOnePole_setSampleRate>
    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
24016602:	eeb0 0a68 	vmov.f32	s0, s17
24016606:	9801      	ldr	r0, [sp, #4]
24016608:	f7fb fec4 	bl	24012394 <tOnePole_setFreq>
    p->rippleGain = 0.0f;
2401660c:	2300      	movs	r3, #0
    tHighpass_initToPool(&p->DCblocker,13, mp);
2401660e:	4629      	mov	r1, r5
24016610:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
    p->rippleGain = 0.0f;
24016614:	6663      	str	r3, [r4, #100]	; 0x64
    tHighpass_initToPool(&p->DCblocker,13, mp);
24016616:	4630      	mov	r0, r6
    p->rippleDelay = 0.5f;
24016618:	edc4 aa1a 	vstr	s21, [r4, #104]	; 0x68
    p->invOnePlusr = 1.0f;
2401661c:	edc4 ba1b 	vstr	s23, [r4, #108]	; 0x6c
    tHighpass_initToPool(&p->DCblocker,13, mp);
24016620:	9601      	str	r6, [sp, #4]
24016622:	f7fc f965 	bl	240128f0 <tHighpass_initToPool>
    tHighpass_setSampleRate(&p->DCblocker,p->sampleRate);
24016626:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
2401662a:	9801      	ldr	r0, [sp, #4]
2401662c:	f7fc f9a0 	bl	24012970 <tHighpass_setSampleRate>
    tHighpass_setFreq(&p->DCblocker,13);
24016630:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
24016634:	9801      	ldr	r0, [sp, #4]
24016636:	f7fc f97f 	bl	24012938 <tHighpass_setFreq>
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
2401663a:	eeb0 1a4b 	vmov.f32	s2, s22
2401663e:	eef0 0a4a 	vmov.f32	s1, s20
24016642:	462a      	mov	r2, r5
24016644:	eeb0 0a69 	vmov.f32	s0, s19
24016648:	f104 0054 	add.w	r0, r4, #84	; 0x54
2401664c:	4639      	mov	r1, r7
    p->userDecay = decay;
2401664e:	ed84 9a05 	vstr	s18, [r4, #20]
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
24016652:	f7fb f81d 	bl	24011690 <tFeedbackLeveler_initToPool>
    Lfloat waveLength = (p->sampleRate/freq);
24016656:	edd4 6a18 	vldr	s13, [r4, #96]	; 0x60
    p->levMode=levMode;
2401665a:	6227      	str	r7, [r4, #32]
    Lfloat waveLength = (p->sampleRate/freq);
2401665c:	ee2c ca26 	vmul.f32	s24, s24, s13
    p->changeGainCompensator = 1.0f;
24016660:	edc4 ba07 	vstr	s23, [r4, #28]
    p->freq = freq;
24016664:	ed84 8a01 	vstr	s16, [r4, #4]
    if (waveLength<4.8) waveLength=4.8f;
24016668:	ed9f 7b21 	vldr	d7, [pc, #132]	; 240166f0 <tSimpleLivingString3_initToPool+0x260>
2401666c:	eeb7 6acc 	vcvt.f64.f32	d6, s24
24016670:	eeb4 6bc7 	vcmpe.f64	d6, d7
24016674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016678:	d436      	bmi.n	240166e8 <tSimpleLivingString3_initToPool+0x258>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
2401667a:	6b23      	ldr	r3, [r4, #48]	; 0x30
2401667c:	005b      	lsls	r3, r3, #1
2401667e:	ee00 3a10 	vmov	s0, r3
24016682:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->waveLengthInSamples =  waveLength * 0.5f;
24016686:	fe80 0a4c 	vminnm.f32	s0, s0, s24
2401668a:	ee20 0a2a 	vmul.f32	s0, s0, s21
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
2401668e:	4650      	mov	r0, sl
    p->waveLengthInSamples =  waveLength * 0.5f;
24016690:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24016694:	f7fb fbfa 	bl	24011e8c <tExpSmooth_setDest>
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24016698:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2401669c:	ed94 7a05 	vldr	s14, [r4, #20]
240166a0:	eddf 7a18 	vldr	s15, [pc, #96]	; 24016704 <tSimpleLivingString3_initToPool+0x274>
240166a4:	ee37 7a26 	vadd.f32	s14, s14, s13
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
240166a8:	ed94 6a01 	vldr	s12, [r4, #4]
240166ac:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
240166b0:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
240166b4:	ed9f 0b10 	vldr	d0, [pc, #64]	; 240166f8 <tSimpleLivingString3_initToPool+0x268>
240166b8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
240166bc:	ee27 7b06 	vmul.f64	d7, d7, d6
240166c0:	ee80 0b07 	vdiv.f64	d0, d0, d7
240166c4:	f003 f9d4 	bl	24019a70 <exp>
    p->pickupPoint = 0.9f;
240166c8:	4a0f      	ldr	r2, [pc, #60]	; (24016708 <tSimpleLivingString3_initToPool+0x278>)
    p->prevDelayLength = p->waveLengthInSamples;
240166ca:	68a3      	ldr	r3, [r4, #8]
    p->pickupPoint = 0.9f;
240166cc:	64e2      	str	r2, [r4, #76]	; 0x4c
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
240166ce:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    p->prevDelayLength = p->waveLengthInSamples;
240166d2:	61a3      	str	r3, [r4, #24]
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
240166d4:	ed84 0a04 	vstr	s0, [r4, #16]
}
240166d8:	b003      	add	sp, #12
240166da:	ecbd 8b0a 	vpop	{d8-d12}
240166de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
240166e2:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 2401670c <tSimpleLivingString3_initToPool+0x27c>
240166e6:	e747      	b.n	24016578 <tSimpleLivingString3_initToPool+0xe8>
240166e8:	ed9f 0a08 	vldr	s0, [pc, #32]	; 2401670c <tSimpleLivingString3_initToPool+0x27c>
240166ec:	e7cf      	b.n	2401668e <tSimpleLivingString3_initToPool+0x1fe>
240166ee:	bf00      	nop
240166f0:	33333333 	.word	0x33333333
240166f4:	40133333 	.word	0x40133333
240166f8:	0a3d70a4 	.word	0x0a3d70a4
240166fc:	c01ba3d7 	.word	0xc01ba3d7
24016700:	3c23d70a 	.word	0x3c23d70a
24016704:	3d8d78c4 	.word	0x3d8d78c4
24016708:	3f666666 	.word	0x3f666666
2401670c:	4019999a 	.word	0x4019999a

24016710 <tSimpleLivingString3_free>:
{
24016710:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
24016712:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_free(&p->fbLev);
24016714:	f104 0054 	add.w	r0, r4, #84	; 0x54
24016718:	f7fa ffe2 	bl	240116e0 <tFeedbackLeveler_free>
    tHighpass_free(&p->DCblocker);
2401671c:	f104 0050 	add.w	r0, r4, #80	; 0x50
24016720:	f7fc f906 	bl	24012930 <tHighpass_free>
    tOnePole_free(&p->bridgeFilter);
24016724:	f104 003c 	add.w	r0, r4, #60	; 0x3c
24016728:	f7fb fe30 	bl	2401238c <tOnePole_free>
    tLinearDelay_free(&p->delayLineL);
2401672c:	f104 0038 	add.w	r0, r4, #56	; 0x38
24016730:	f7fa fafe 	bl	24010d30 <tLinearDelay_free>
    tLinearDelay_free(&p->delayLineU);
24016734:	f104 0034 	add.w	r0, r4, #52	; 0x34
24016738:	f7fa fafa 	bl	24010d30 <tLinearDelay_free>
    tExpSmooth_free(&p->wlSmooth);
2401673c:	f104 0058 	add.w	r0, r4, #88	; 0x58
24016740:	f7fb fb7a 	bl	24011e38 <tExpSmooth_free>
    mpool_free((char*)p, p->mempool);
24016744:	6821      	ldr	r1, [r4, #0]
24016746:	4620      	mov	r0, r4
}
24016748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)p, p->mempool);
2401674c:	f7fe be38 	b.w	240153c0 <mpool_free>

24016750 <tSimpleLivingString3_setFreq>:
{
24016750:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
24016752:	6804      	ldr	r4, [r0, #0]
    Lfloat waveLength = (p->sampleRate/freq);
24016754:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
    p->freq = freq;
24016758:	ed84 0a01 	vstr	s0, [r4, #4]
    Lfloat waveLength = (p->sampleRate/freq);
2401675c:	eec7 7a00 	vdiv.f32	s15, s14, s0
    if (waveLength<4.8) waveLength=4.8f;
24016760:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 240167d8 <tSimpleLivingString3_setFreq+0x88>
24016764:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
24016768:	eeb4 5bc6 	vcmpe.f64	d5, d6
2401676c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016770:	d42e      	bmi.n	240167d0 <tSimpleLivingString3_setFreq+0x80>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
24016772:	6b23      	ldr	r3, [r4, #48]	; 0x30
    p->waveLengthInSamples =  waveLength * 0.5f;
24016774:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
24016778:	005b      	lsls	r3, r3, #1
2401677a:	ee00 3a10 	vmov	s0, r3
2401677e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->waveLengthInSamples =  waveLength * 0.5f;
24016782:	fe80 0a67 	vminnm.f32	s0, s0, s15
24016786:	ee20 0a07 	vmul.f32	s0, s0, s14
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
2401678a:	f104 0058 	add.w	r0, r4, #88	; 0x58
    p->waveLengthInSamples =  waveLength * 0.5f;
2401678e:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24016792:	f7fb fb7b 	bl	24011e8c <tExpSmooth_setDest>
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24016796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2401679a:	ed94 7a05 	vldr	s14, [r4, #20]
2401679e:	eddf 7a12 	vldr	s15, [pc, #72]	; 240167e8 <tSimpleLivingString3_setFreq+0x98>
240167a2:	ee37 7a26 	vadd.f32	s14, s14, s13
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
240167a6:	ed94 6a01 	vldr	s12, [r4, #4]
240167aa:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
240167ae:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
240167b2:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 240167e0 <tSimpleLivingString3_setFreq+0x90>
240167b6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
240167ba:	ee27 7b06 	vmul.f64	d7, d7, d6
240167be:	ee80 0b07 	vdiv.f64	d0, d0, d7
240167c2:	f003 f955 	bl	24019a70 <exp>
240167c6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
240167ca:	ed84 0a04 	vstr	s0, [r4, #16]
    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);

    //p->decay=powf(0.001f,1.0f/(p->freq*p->userDecay));
}
240167ce:	bd10      	pop	{r4, pc}
240167d0:	ed9f 0a06 	vldr	s0, [pc, #24]	; 240167ec <tSimpleLivingString3_setFreq+0x9c>
240167d4:	e7d9      	b.n	2401678a <tSimpleLivingString3_setFreq+0x3a>
240167d6:	bf00      	nop
240167d8:	33333333 	.word	0x33333333
240167dc:	40133333 	.word	0x40133333
240167e0:	0a3d70a4 	.word	0x0a3d70a4
240167e4:	c01ba3d7 	.word	0xc01ba3d7
240167e8:	3d8d78c4 	.word	0x3d8d78c4
240167ec:	4019999a 	.word	0x4019999a

240167f0 <tSimpleLivingString3_setDampFreq>:
    _tSimpleLivingString3* p = *pl;
    //p->temp1 = (1.0f - brightness) * 0.25f * p->decay;
    //p->temp2 = (1.0f + brightness) * 0.5f * p->decay;
    //tBiQuad_setCoefficients(&p->bridgeFilter2, p->temp1 , p->temp2, p->temp1 , 0.0f, 0.0f);

    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
240167f0:	6800      	ldr	r0, [r0, #0]
240167f2:	303c      	adds	r0, #60	; 0x3c
240167f4:	f7fb bdce 	b.w	24012394 <tOnePole_setFreq>

240167f8 <tSimpleLivingString3_setDecay>:
void     tSimpleLivingString3_setDecay(tSimpleLivingString3* const pl, Lfloat decay)
{
    _tSimpleLivingString3* p = *pl;
    p->userDecay = decay;

    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
240167f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
240167fc:	eddf 7a10 	vldr	s15, [pc, #64]	; 24016840 <tSimpleLivingString3_setDecay+0x48>
{
24016800:	b510      	push	{r4, lr}
    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
24016802:	ee30 7a07 	vadd.f32	s14, s0, s14
    _tSimpleLivingString3* p = *pl;
24016806:	6804      	ldr	r4, [r0, #0]
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
24016808:	ed94 6a01 	vldr	s12, [r4, #4]
    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
2401680c:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->userDecay = decay;
24016810:	ed84 0a05 	vstr	s0, [r4, #20]
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
24016814:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
24016818:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
2401681c:	ed9f 5b06 	vldr	d5, [pc, #24]	; 24016838 <tSimpleLivingString3_setDecay+0x40>
24016820:	ee27 7b06 	vmul.f64	d7, d7, d6
24016824:	ee85 0b07 	vdiv.f64	d0, d5, d7
24016828:	f003 f922 	bl	24019a70 <exp>
2401682c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24016830:	ed84 0a04 	vstr	s0, [r4, #16]


    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);
    //p->decay=powf(0.001f,1.0f/(p->freq*decay));
}
24016834:	bd10      	pop	{r4, pc}
24016836:	bf00      	nop
24016838:	52bd3c36 	.word	0x52bd3c36
2401683c:	c01ba196 	.word	0xc01ba196
24016840:	3d8d78c4 	.word	0x3d8d78c4

24016844 <tSimpleLivingString3_setTargetLev>:

void     tSimpleLivingString3_setTargetLev(tSimpleLivingString3* const pl, Lfloat targetLev)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setTargetLevel(&p->fbLev, targetLev);
24016844:	6800      	ldr	r0, [r0, #0]
24016846:	3054      	adds	r0, #84	; 0x54
24016848:	f7fa bf86 	b.w	24011758 <tFeedbackLeveler_setTargetLevel>

2401684c <tSimpleLivingString3_setLevSmoothFactor>:
}

void     tSimpleLivingString3_setLevSmoothFactor(tSimpleLivingString3* const pl, Lfloat levSmoothFactor)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setFactor(&p->fbLev, levSmoothFactor);
2401684c:	6800      	ldr	r0, [r0, #0]
2401684e:	3054      	adds	r0, #84	; 0x54
24016850:	f7fa bf56 	b.w	24011700 <tFeedbackLeveler_setFactor>

24016854 <tSimpleLivingString3_setLevStrength>:
}

void     tSimpleLivingString3_setLevStrength(tSimpleLivingString3* const pl, Lfloat levStrength)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setStrength(&p->fbLev, levStrength);
24016854:	6800      	ldr	r0, [r0, #0]
24016856:	3054      	adds	r0, #84	; 0x54
24016858:	f7fa bf4e 	b.w	240116f8 <tFeedbackLeveler_setStrength>

2401685c <tSimpleLivingString3_setLevMode>:
}

void     tSimpleLivingString3_setLevMode(tSimpleLivingString3* const pl, int levMode)
{
2401685c:	b538      	push	{r3, r4, r5, lr}
    _tSimpleLivingString3* p = *pl;
2401685e:	6805      	ldr	r5, [r0, #0]
{
24016860:	460c      	mov	r4, r1
    tFeedbackLeveler_setMode(&p->fbLev, levMode);
24016862:	f105 0054 	add.w	r0, r5, #84	; 0x54
24016866:	f7fa ff4f 	bl	24011708 <tFeedbackLeveler_setMode>
    p->levMode=levMode;
2401686a:	622c      	str	r4, [r5, #32]
}
2401686c:	bd38      	pop	{r3, r4, r5, pc}
2401686e:	bf00      	nop

24016870 <tSimpleLivingString3_pluck>:

void   tSimpleLivingString3_pluck(tSimpleLivingString3* const pl, Lfloat input, Lfloat position)
{
24016870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    _tSimpleLivingString3* p = *pl;
24016874:	6801      	ldr	r1, [r0, #0]
{
24016876:	b083      	sub	sp, #12
    int length = p->waveLengthInSamples;
24016878:	edd1 7a02 	vldr	s15, [r1, #8]
2401687c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24016880:	ee17 0a90 	vmov	r0, s15
    int pluckPoint = (int)(length * position);
24016884:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24016888:	ee67 0aa0 	vmul.f32	s1, s15, s1
2401688c:	eefd 7ae0 	vcvt.s32.f32	s15, s1
24016890:	ee17 6a90 	vmov	r6, s15
    if (pluckPoint < 1)
24016894:	2e00      	cmp	r6, #0
24016896:	f340 8085 	ble.w	240169a4 <tSimpleLivingString3_pluck+0x134>
    {
    	pluckPoint = 1;
    }
    else if (pluckPoint > (length-1))
2401689a:	42b0      	cmp	r0, r6
2401689c:	dc11      	bgt.n	240168c2 <tSimpleLivingString3_pluck+0x52>
    {
    	pluckPoint = length-1;
2401689e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    }
    int remainder = length-pluckPoint;
    for (int i = 0; i < length; i++)
240168a2:	2800      	cmp	r0, #0
    	pluckPoint = length-1;
240168a4:	4666      	mov	r6, ip
    for (int i = 0; i < length; i++)
240168a6:	dd7a      	ble.n	2401699e <tSimpleLivingString3_pluck+0x12e>
    {
        Lfloat val = 0.0f;
        if (i <= pluckPoint)
        {
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
240168a8:	ee07 ca90 	vmov	s15, ip
240168ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240168b0:	f1bc 0f00 	cmp.w	ip, #0
240168b4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
240168b8:	ee86 7a86 	vdiv.f32	s14, s13, s12
240168bc:	da10      	bge.n	240168e0 <tSimpleLivingString3_pluck+0x70>
240168be:	2300      	movs	r3, #0
240168c0:	e02d      	b.n	2401691e <tSimpleLivingString3_pluck+0xae>
    int remainder = length-pluckPoint;
240168c2:	1b83      	subs	r3, r0, r6
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
240168c4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
240168c8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
240168cc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
        }
        else
        {
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
240168d0:	ee07 3a90 	vmov	s15, r3
240168d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240168d8:	ee85 7a86 	vdiv.f32	s14, s11, s12
240168dc:	eec5 6aa7 	vdiv.f32	s13, s11, s15
240168e0:	4566      	cmp	r6, ip
    for (int i = 0; i < length; i++)
240168e2:	f04f 0300 	mov.w	r3, #0
240168e6:	bfa8      	it	ge
240168e8:	4666      	movge	r6, ip
240168ea:	ee20 7a07 	vmul.f32	s14, s0, s14
                                 
        }
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
240168ee:	6b4c      	ldr	r4, [r1, #52]	; 0x34
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
240168f0:	ee07 3a90 	vmov	s15, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
240168f4:	e9d4 2506 	ldrd	r2, r5, [r4, #24]
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
240168f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        p->delayLineU->buff[bufWritePoint] = val;
240168fc:	68a4      	ldr	r4, [r4, #8]
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
240168fe:	441a      	add	r2, r3
    for (int i = 0; i < length; i++)
24016900:	3301      	adds	r3, #1
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24016902:	fbb2 f7f5 	udiv	r7, r2, r5
24016906:	fb05 2217 	mls	r2, r5, r7, r2
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
2401690a:	ee67 7a87 	vmul.f32	s15, s15, s14
    for (int i = 0; i < length; i++)
2401690e:	42b3      	cmp	r3, r6
        p->delayLineU->buff[bufWritePoint] = val;
24016910:	eb04 0282 	add.w	r2, r4, r2, lsl #2
24016914:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < length; i++)
24016918:	dde9      	ble.n	240168ee <tSimpleLivingString3_pluck+0x7e>
2401691a:	4298      	cmp	r0, r3
2401691c:	dd1d      	ble.n	2401695a <tSimpleLivingString3_pluck+0xea>
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
2401691e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24016922:	ee07 3a90 	vmov	s15, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24016926:	6b4c      	ldr	r4, [r1, #52]	; 0x34
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
24016928:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
2401692c:	eef0 7a65 	vmov.f32	s15, s11
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24016930:	e9d4 2506 	ldrd	r2, r5, [r4, #24]
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
24016934:	ee36 7a47 	vsub.f32	s14, s12, s14
        p->delayLineU->buff[bufWritePoint] = val;
24016938:	68a4      	ldr	r4, [r4, #8]
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
2401693a:	441a      	add	r2, r3
    for (int i = 0; i < length; i++)
2401693c:	3301      	adds	r3, #1
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
2401693e:	eee6 7a87 	vfma.f32	s15, s13, s14
    for (int i = 0; i < length; i++)
24016942:	4298      	cmp	r0, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24016944:	fbb2 f6f5 	udiv	r6, r2, r5
24016948:	fb05 2216 	mls	r2, r5, r6, r2
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
2401694c:	ee60 7a27 	vmul.f32	s15, s0, s15
        p->delayLineU->buff[bufWritePoint] = val;
24016950:	eb04 0282 	add.w	r2, r4, r2, lsl #2
24016954:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < length; i++)
24016958:	dce3      	bgt.n	24016922 <tSimpleLivingString3_pluck+0xb2>
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
2401695a:	f04f 0e00 	mov.w	lr, #0
    }
    for (int i = 0; i < length; i++)
    {
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
        int currentBufReadPoint = ((length-1-i)+p->delayLineU->outPoint);
2401695e:	ebac 020e 	sub.w	r2, ip, lr
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24016962:	e9d1 540d 	ldrd	r5, r4, [r1, #52]	; 0x34
24016966:	69a3      	ldr	r3, [r4, #24]
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
24016968:	69ef      	ldr	r7, [r5, #28]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
2401696a:	9301      	str	r3, [sp, #4]
        int currentBufReadPoint = ((length-1-i)+p->delayLineU->outPoint);
2401696c:	69ab      	ldr	r3, [r5, #24]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
2401696e:	69e6      	ldr	r6, [r4, #28]
        int currentBufReadPoint = ((length-1-i)+p->delayLineU->outPoint);
24016970:	441a      	add	r2, r3
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24016972:	9b01      	ldr	r3, [sp, #4]
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
24016974:	68ad      	ldr	r5, [r5, #8]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24016976:	4473      	add	r3, lr
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
24016978:	68a4      	ldr	r4, [r4, #8]
    for (int i = 0; i < length; i++)
2401697a:	f10e 0e01 	add.w	lr, lr, #1
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
2401697e:	fbb2 f9f7 	udiv	r9, r2, r7
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24016982:	fbb3 f8f6 	udiv	r8, r3, r6
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
24016986:	fb07 2219 	mls	r2, r7, r9, r2
    for (int i = 0; i < length; i++)
2401698a:	4570      	cmp	r0, lr
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
2401698c:	fb06 3318 	mls	r3, r6, r8, r3
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
24016990:	eb05 0282 	add.w	r2, r5, r2, lsl #2
24016994:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24016998:	6812      	ldr	r2, [r2, #0]
2401699a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < length; i++)
2401699c:	d1df      	bne.n	2401695e <tSimpleLivingString3_pluck+0xee>
    }
}
2401699e:	b003      	add	sp, #12
240169a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    for (int i = 0; i < length; i++)
240169a4:	2800      	cmp	r0, #0
240169a6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
240169aa:	ddf8      	ble.n	2401699e <tSimpleLivingString3_pluck+0x12e>
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
240169ac:	ee07 ca10 	vmov	s14, ip
240169b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    	pluckPoint = 1;
240169b4:	2601      	movs	r6, #1
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
240169b6:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
240169ba:	eeb0 7a67 	vmov.f32	s14, s15
240169be:	eec7 6a86 	vdiv.f32	s13, s15, s12
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
240169c2:	eeb0 6a67 	vmov.f32	s12, s15
240169c6:	e78b      	b.n	240168e0 <tSimpleLivingString3_pluck+0x70>

240169c8 <tSimpleLivingString3_tick>:

Lfloat   tSimpleLivingString3_tick(tSimpleLivingString3* const pl, Lfloat input)
{
240169c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
240169cc:	ed2d 8b02 	vpush	{d8}
    _tSimpleLivingString3* p = *pl;
240169d0:	6804      	ldr	r4, [r0, #0]
{
240169d2:	eef0 8a40 	vmov.f32	s17, s0

    //p->changeGainCompensator = 1.0f;
    Lfloat wl = tExpSmooth_tick(&p->wlSmooth);
240169d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
    //Lfloat changeInDelayTime = wl - p->prevDelayLength;
    //if (changeInDelayTime < 0.0f)
    {
    //	p->changeGainCompensator = sqrtf(1.0f - changeInDelayTime);
    }
    tLinearDelay_setDelay(&p->delayLineU, wl);
240169da:	f104 0534 	add.w	r5, r4, #52	; 0x34
    Lfloat wl = tExpSmooth_tick(&p->wlSmooth);
240169de:	f7fb fa63 	bl	24011ea8 <tExpSmooth_tick>
240169e2:	eeb0 8a40 	vmov.f32	s16, s0
    tLinearDelay_setDelay(&p->delayLineL, wl);
240169e6:	f104 0738 	add.w	r7, r4, #56	; 0x38
    tLinearDelay_setDelay(&p->delayLineU, wl);
240169ea:	4628      	mov	r0, r5
240169ec:	f7fa fa36 	bl	24010e5c <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, wl);
240169f0:	eeb0 0a48 	vmov.f32	s0, s16
240169f4:	4638      	mov	r0, r7
240169f6:	f7fa fa31 	bl	24010e5c <tLinearDelay_setDelay>
    
    for (int i = 0; i < p->oversampling; i++)
240169fa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
240169fc:	2b00      	cmp	r3, #0
240169fe:	dd56      	ble.n	24016aae <tSimpleLivingString3_tick+0xe6>
    {
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay * p->invOnePlusr));
24016a00:	f104 0a50 	add.w	sl, r4, #80	; 0x50
24016a04:	f104 093c 	add.w	r9, r4, #60	; 0x3c
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
24016a08:	f104 0854 	add.w	r8, r4, #84	; 0x54
    for (int i = 0; i < p->oversampling; i++)
24016a0c:	2600      	movs	r6, #0
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay * p->invOnePlusr));
24016a0e:	4628      	mov	r0, r5
    for (int i = 0; i < p->oversampling; i++)
24016a10:	3601      	adds	r6, #1
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay * p->invOnePlusr));
24016a12:	f7fa f9f7 	bl	24010e04 <tLinearDelay_tickOut>
24016a16:	4648      	mov	r0, r9
24016a18:	f7fb fcda 	bl	240123d0 <tOnePole_tick>
24016a1c:	ed94 7a1b 	vldr	s14, [r4, #108]	; 0x6c
24016a20:	edd4 7a04 	vldr	s15, [r4, #16]
24016a24:	4650      	mov	r0, sl
24016a26:	ee67 7a87 	vmul.f32	s15, s15, s14
24016a2a:	ee27 0a80 	vmul.f32	s0, s15, s0
24016a2e:	f7fb ff8f 	bl	24012950 <tHighpass_tick>
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
24016a32:	4640      	mov	r0, r8
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay * p->invOnePlusr));
24016a34:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
24016a38:	f7fa fe6a 	bl	24011710 <tFeedbackLeveler_tick>
24016a3c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24016a40:	eef0 0a40 	vmov.f32	s1, s0
24016a44:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24016a48:	f7fe f8f6 	bl	24014c38 <LEAF_clip>
    	//p->Uout = tLinearDelay_tickOut(&p->delayLineU) * p->decay;
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
24016a4c:	4638      	mov	r0, r7
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
24016a4e:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
24016a52:	f7fa f9d7 	bl	24010e04 <tLinearDelay_tickOut>
24016a56:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24016a5a:	eef0 0a40 	vmov.f32	s1, s0
24016a5e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24016a62:	f7fe f8e9 	bl	24014c38 <LEAF_clip>
24016a66:	eef0 7a40 	vmov.f32	s15, s0

		tLinearDelay_tickIn(&p->delayLineU, (-1.0f * p->Lout) + input);
24016a6a:	4628      	mov	r0, r5
24016a6c:	ee38 0ac0 	vsub.f32	s0, s17, s0
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
24016a70:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
		tLinearDelay_tickIn(&p->delayLineU, (-1.0f * p->Lout) + input);
24016a74:	f7fa f9b2 	bl	24010ddc <tLinearDelay_tickIn>
		tLinearDelay_tickIn(&p->delayLineL, -1.0f * p->Uout);
24016a78:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
24016a7c:	4638      	mov	r0, r7
24016a7e:	eeb1 0a40 	vneg.f32	s0, s0
24016a82:	f7fa f9ab 	bl	24010ddc <tLinearDelay_tickIn>
		tLinearDelay_addTo (&p->delayLineU, p->Lout * p->rippleGain, p->rippleDelay*wl);
24016a86:	edd4 7a1a 	vldr	s15, [r4, #104]	; 0x68
24016a8a:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
24016a8e:	4628      	mov	r0, r5
24016a90:	ee68 7a27 	vmul.f32	s15, s16, s15
24016a94:	ed94 0a19 	vldr	s0, [r4, #100]	; 0x64
24016a98:	ee26 0a80 	vmul.f32	s0, s13, s0
24016a9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24016aa0:	ee17 1a90 	vmov	r1, s15
24016aa4:	f7fa fa18 	bl	24010ed8 <tLinearDelay_addTo>
    for (int i = 0; i < p->oversampling; i++)
24016aa8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
24016aaa:	42b3      	cmp	r3, r6
24016aac:	dcaf      	bgt.n	24016a0e <tSimpleLivingString3_tick+0x46>
    }
    
    //calculate pickup point
    Lfloat point = wl * p->pickupPoint;
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
24016aae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    Lfloat point = wl * p->pickupPoint;
24016ab2:	edd4 6a13 	vldr	s13, [r4, #76]	; 0x4c
    int32_t whichPoint = ((int32_t)roundf(point));
    Lfloat LfloatPart = point - whichPoint;

    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
24016ab6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);

    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
24016ab8:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
    Lfloat point = wl * p->pickupPoint;
24016abc:	ee66 5a88 	vmul.f32	s11, s13, s16
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
24016ac0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
24016ac2:	ee77 6ae6 	vsub.f32	s13, s15, s13
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
24016ac6:	689d      	ldr	r5, [r3, #8]
    int32_t whichPoint = ((int32_t)roundf(point));
24016ac8:	feb8 6a65 	vrinta.f32	s12, s11
24016acc:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
24016ad0:	ee66 6a88 	vmul.f32	s13, s13, s16
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
24016ad4:	ee37 5ae5 	vsub.f32	s10, s15, s11
    whichPoint = (int32_t)roundf(reversePoint);
24016ad8:	feb8 7a66 	vrinta.f32	s14, s13
24016adc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
24016ae0:	ee37 0ae6 	vsub.f32	s0, s15, s13
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
24016ae4:	e9d3 2706 	ldrd	r2, r7, [r3, #24]
    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
24016ae8:	ee16 3a10 	vmov	r3, s12
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
24016aec:	ee17 0a10 	vmov	r0, s14
    Lfloat LfloatPart = point - whichPoint;
24016af0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
24016af4:	441a      	add	r2, r3
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
24016af6:	698b      	ldr	r3, [r1, #24]
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
24016af8:	fb92 f6f7 	sdiv	r6, r2, r7
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
24016afc:	4418      	add	r0, r3
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
24016afe:	fb07 2216 	mls	r2, r7, r6, r2
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
24016b02:	ee75 7a06 	vadd.f32	s15, s10, s12
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
24016b06:	4603      	mov	r3, r0
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
24016b08:	69c8      	ldr	r0, [r1, #28]
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
24016b0a:	6889      	ldr	r1, [r1, #8]
    Lfloat LfloatPart = point - whichPoint;
24016b0c:	ee75 5ac6 	vsub.f32	s11, s11, s12
    LfloatPart = reversePoint - whichPoint;
24016b10:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
24016b14:	fb93 f6f0 	sdiv	r6, r3, r0
24016b18:	fb00 3316 	mls	r3, r0, r6, r3
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
24016b1c:	1c56      	adds	r6, r2, #1
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
24016b1e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
24016b22:	ee30 0a06 	vadd.f32	s0, s0, s12
    LfloatPart = reversePoint - whichPoint;
24016b26:	ee76 6ac6 	vsub.f32	s13, s13, s12
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
24016b2a:	ed92 7a00 	vldr	s14, [r2]
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
24016b2e:	eb01 0283 	add.w	r2, r1, r3, lsl #2
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
24016b32:	3301      	adds	r3, #1
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
24016b34:	ed92 6a00 	vldr	s12, [r2]
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
24016b38:	fb96 f2f7 	sdiv	r2, r6, r7
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
24016b3c:	ee20 0a06 	vmul.f32	s0, s0, s12
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
24016b40:	fb07 6612 	mls	r6, r7, r2, r6
    //p->curr = p->Uout;

    p->prevDelayLength = p->waveLengthInSamples;
24016b44:	68a2      	ldr	r2, [r4, #8]
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
24016b46:	eb05 0586 	add.w	r5, r5, r6, lsl #2
24016b4a:	eea7 0a27 	vfma.f32	s0, s14, s15
24016b4e:	edd5 7a00 	vldr	s15, [r5]
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
24016b52:	fb93 f5f0 	sdiv	r5, r3, r0
24016b56:	eea7 0aa5 	vfma.f32	s0, s15, s11
24016b5a:	fb00 3315 	mls	r3, r0, r5, r3
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
24016b5e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
24016b62:	edd1 7a00 	vldr	s15, [r1]
    p->prevDelayLength = p->waveLengthInSamples;
24016b66:	61a2      	str	r2, [r4, #24]
    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
24016b68:	eea7 0aa6 	vfma.f32	s0, s15, s13
24016b6c:	ee20 0a24 	vmul.f32	s0, s0, s9
24016b70:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    //Lfloat stringInput=tHighpass_tick(&p->DCblocker, tFeedbackLeveler_tick(&p->fbLev, (p->levMode==0?p->decay*stringOut:stringOut)+input));
    //tLinearDelay_tickIn(&p->delayLine, stringInput);
    //tLinearDelay_setDelay(&p->delayLine, tExpSmooth_tick(&p->wlSmooth));
    //p->curr = d1 + d2;
    return p->curr;
}
24016b74:	ecbd 8b02 	vpop	{d8}
24016b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

24016b7c <tSimpleLivingString3_setPickupPoint>:


void   tSimpleLivingString3_setPickupPoint(tSimpleLivingString3* const pl, Lfloat pickupPoint)
{
    _tSimpleLivingString3* p = *pl;
24016b7c:	6803      	ldr	r3, [r0, #0]
    p->pickupPoint = pickupPoint;
24016b7e:	ed83 0a13 	vstr	s0, [r3, #76]	; 0x4c
}
24016b82:	4770      	bx	lr

24016b84 <tTString_initToPool>:
void    tTString_init                  (tTString* const b, int oversampling, Lfloat lowestFreq, LEAF* const leaf)
{
    tTString_initToPool(b, oversampling, lowestFreq, &leaf->mempool);
}
void    tTString_initToPool            (tTString* const bw, int oversampling, Lfloat lowestFreq, tMempool* const mp)
{
24016b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24016b88:	ed2d 8b0a 	vpush	{d8-d12}
    _tMempool* m = *mp;
24016b8c:	6817      	ldr	r7, [r2, #0]
{
24016b8e:	460e      	mov	r6, r1
24016b90:	b085      	sub	sp, #20
24016b92:	4680      	mov	r8, r0
    _tTString* x = *bw = (_tTString*) mpool_alloc(sizeof(_tTString), m);
24016b94:	4639      	mov	r1, r7
24016b96:	f44f 70ca 	mov.w	r0, #404	; 0x194
{
24016b9a:	4615      	mov	r5, r2
24016b9c:	eeb0 9a40 	vmov.f32	s18, s0
    _tTString* x = *bw = (_tTString*) mpool_alloc(sizeof(_tTString), m);
24016ba0:	f7fe fb4c 	bl	2401523c <mpool_alloc>
    x->mempool = m;
    LEAF* leaf = x->mempool->leaf;
    
    x->oversampling = oversampling;
    x->invOversampling = 1.0f / oversampling;
24016ba4:	ee07 6a90 	vmov	s15, r6
24016ba8:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    _tTString* x = *bw = (_tTString*) mpool_alloc(sizeof(_tTString), m);
24016bac:	f8c8 0000 	str.w	r0, [r8]
    x->invOversampling = 1.0f / oversampling;
24016bb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    x->mempool = m;
24016bb4:	6007      	str	r7, [r0, #0]
    LEAF* leaf = x->mempool->leaf;
24016bb6:	687a      	ldr	r2, [r7, #4]

    x->pickupPos = 0.0f;
    x->slideGain = 0.4f;
    x->barDrive = 1.5f;
    x->wound = 1;
    x->barPulsePhasor = 0;
24016bb8:	f04f 0800 	mov.w	r8, #0
    x->oversampling = oversampling;
24016bbc:	6046      	str	r6, [r0, #4]
    Lfloat maxDelayTemp = x->sampleRate / lowestFreq;
    tLagrangeDelay_initToPool(&x->delay, 100.0f, maxDelayTemp, mp);
24016bbe:	f100 0714 	add.w	r7, r0, #20
    x->invOversampling = 1.0f / oversampling;
24016bc2:	ee88 7aa7 	vdiv.f32	s14, s17, s15
    x->invSampleRateTimesTwoPi = TWO_PI * x->invSampleRate;
24016bc6:	eddf baf7 	vldr	s23, [pc, #988]	; 24016fa4 <tTString_initToPool+0x420>
    x->decayInSeconds = 10.0f;
24016bca:	4bf7      	ldr	r3, [pc, #988]	; (24016fa8 <tTString_initToPool+0x424>)
    x->wound = 1;
24016bcc:	2601      	movs	r6, #1
    x->tensionGain = 0.0f;
24016bce:	ed9f 8af7 	vldr	s16, [pc, #988]	; 24016fac <tTString_initToPool+0x428>
    _tTString* x = *bw = (_tTString*) mpool_alloc(sizeof(_tTString), m);
24016bd2:	4604      	mov	r4, r0
    x->baseDelay = 100.0f;
24016bd4:	eddf 9af6 	vldr	s19, [pc, #984]	; 24016fb0 <tTString_initToPool+0x42c>
    x->actualLowestFreq = x->sampleRate / tLagrangeDelay_getMaxDelay (&x->delay); //adjusted to create a power-of-two size buffer

    tLagrangeDelay_clear(&x->delay);
    tLagrangeDelay_initToPool(&x->delayP, 100.0f, maxDelayTemp, mp);
24016bd8:	f104 0918 	add.w	r9, r4, #24
24016bdc:	eddf aaf5 	vldr	s21, [pc, #980]	; 24016fb4 <tTString_initToPool+0x430>
    tLagrangeDelay_initToPool(&x->delay, 100.0f, maxDelayTemp, mp);
24016be0:	eeb0 0a69 	vmov.f32	s0, s19
    tCookOnePole_setGainAndPole(&x->reflFilt,0.999f, -0.0014f);
    tCookOnePole_setGainAndPole(&x->reflFiltP,0.999f, -0.0014f);
   
    tTString_setFreq(&x, 440.0f);

    tExpSmooth_initToPool(&x->tensionSmoother, 0.0f, 0.004f * x->invOversampling, mp);
24016be4:	f104 0b4c 	add.w	fp, r4, #76	; 0x4c
24016be8:	ed9f baf3 	vldr	s22, [pc, #972]	; 24016fb8 <tTString_initToPool+0x434>
    tExpSmooth_setDest(&x->tensionSmoother, 0.0f);
    tExpSmooth_initToPool(&x->pitchSmoother, 100.0f, 0.04f * x->invOversampling, mp);
    tExpSmooth_setDest(&x->pitchSmoother, 100.0f);
    tExpSmooth_initToPool(&x->pickNoise, 0.0f, 0.09f * x->invOversampling, mp);
24016bec:	f504 7abe 	add.w	sl, r4, #380	; 0x17c
    x->invOversamplingTimesTwo = x->invOversampling * 2.0f;
24016bf0:	ee77 6a07 	vadd.f32	s13, s14, s14
    x->invOversampling = 1.0f / oversampling;
24016bf4:	ed80 7a02 	vstr	s14, [r0, #8]
    x->invOversamplingTimesTwo = x->invOversampling * 2.0f;
24016bf8:	edc0 6a03 	vstr	s13, [r0, #12]
    x->sampleRate          = leaf->sampleRate * oversampling;
24016bfc:	ed92 7a00 	vldr	s14, [r2]
    tLagrangeDelay_initToPool(&x->delay, 100.0f, maxDelayTemp, mp);
24016c00:	462a      	mov	r2, r5
    x->decayInSeconds = 10.0f;
24016c02:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    x->sampleRate          = leaf->sampleRate * oversampling;
24016c06:	ee67 7a87 	vmul.f32	s15, s15, s14
    x->slideGain = 0.4f;
24016c0a:	4bec      	ldr	r3, [pc, #944]	; (24016fbc <tTString_initToPool+0x438>)
    x->wound = 1;
24016c0c:	f8c0 60d8 	str.w	r6, [r0, #216]	; 0xd8
    x->slideGain = 0.4f;
24016c10:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
    x->barDrive = 1.5f;
24016c14:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    x->invSampleRate = 1.f / x->sampleRate;
24016c18:	eec8 6aa7 	vdiv.f32	s13, s17, s15
    x->sampleRate          = leaf->sampleRate * oversampling;
24016c1c:	edc0 7a0c 	vstr	s15, [r0, #48]	; 0x30
    x->barDrive = 1.5f;
24016c20:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
    x->barPulsePhasor = 0;
24016c24:	f8c0 80e4 	str.w	r8, [r0, #228]	; 0xe4
    x->tensionGain = 0.0f;
24016c28:	ed80 8a11 	vstr	s16, [r0, #68]	; 0x44
    x->allpassDelay = 0.f;
24016c2c:	ed80 8a17 	vstr	s16, [r0, #92]	; 0x5c
    Lfloat maxDelayTemp = x->sampleRate / lowestFreq;
24016c30:	ee87 7a89 	vdiv.f32	s14, s15, s18
    x->decayCoeff = 1.0f;
24016c34:	edc0 8a1d 	vstr	s17, [r0, #116]	; 0x74
    x->muteCoeff = 1.0f;
24016c38:	edc0 8a1e 	vstr	s17, [r0, #120]	; 0x78
    x->output = 0.0f;
24016c3c:	ed80 8a0f 	vstr	s16, [r0, #60]	; 0x3c
    x->outputP = 0.0f;
24016c40:	ed80 8a10 	vstr	s16, [r0, #64]	; 0x40
    x->rippleRate = 1.0f;
24016c44:	edc0 8a20 	vstr	s17, [r0, #128]	; 0x80
    x->r = 0.0f;
24016c48:	ed80 8a1f 	vstr	s16, [r0, #124]	; 0x7c
    x->invOnePlusr = 1.0f;
24016c4c:	edc0 8a23 	vstr	s17, [r0, #140]	; 0x8c
    x->harmonic = 1.0f;
24016c50:	edc0 8a21 	vstr	s17, [r0, #132]	; 0x84
    x->baseDelay = 100.0f;
24016c54:	edc0 9a0b 	vstr	s19, [r0, #44]	; 0x2c
    x->tensionAmount = 0.0f;
24016c58:	ed80 8a28 	vstr	s16, [r0, #160]	; 0xa0
    x->pickupPos = 0.0f;
24016c5c:	ed80 8a27 	vstr	s16, [r0, #156]	; 0x9c
    x->invSampleRateTimesTwoPi = TWO_PI * x->invSampleRate;
24016c60:	ee66 7aab 	vmul.f32	s15, s13, s23
    x->invSampleRate = 1.f / x->sampleRate;
24016c64:	edc0 6a0d 	vstr	s13, [r0, #52]	; 0x34
    x->invSampleRateTimesTwoPi = TWO_PI * x->invSampleRate;
24016c68:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
    tLagrangeDelay_initToPool(&x->delay, 100.0f, maxDelayTemp, mp);
24016c6c:	4638      	mov	r0, r7
24016c6e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
24016c72:	ee17 1a90 	vmov	r1, s15
24016c76:	edcd 7a01 	vstr	s15, [sp, #4]
24016c7a:	f7fa f9f7 	bl	2401106c <tLagrangeDelay_initToPool>
    x->actualLowestFreq = x->sampleRate / tLagrangeDelay_getMaxDelay (&x->delay); //adjusted to create a power-of-two size buffer
24016c7e:	ed94 9a0c 	vldr	s18, [r4, #48]	; 0x30
24016c82:	4638      	mov	r0, r7
24016c84:	f7fa fabc 	bl	24011200 <tLagrangeDelay_getMaxDelay>
24016c88:	eec9 7a00 	vdiv.f32	s15, s18, s0
    tLagrangeDelay_clear(&x->delay);
24016c8c:	4638      	mov	r0, r7
    x->actualLowestFreq = x->sampleRate / tLagrangeDelay_getMaxDelay (&x->delay); //adjusted to create a power-of-two size buffer
24016c8e:	edc4 7a24 	vstr	s15, [r4, #144]	; 0x90
    tLagrangeDelay_clear(&x->delay);
24016c92:	f7fa f93f 	bl	24010f14 <tLagrangeDelay_clear>
    tLagrangeDelay_initToPool(&x->delayP, 100.0f, maxDelayTemp, mp);
24016c96:	462a      	mov	r2, r5
24016c98:	9901      	ldr	r1, [sp, #4]
24016c9a:	eeb0 0a69 	vmov.f32	s0, s19
24016c9e:	4648      	mov	r0, r9
24016ca0:	f7fa f9e4 	bl	2401106c <tLagrangeDelay_initToPool>
    tLagrangeDelay_clear(&x->delayP);
24016ca4:	4648      	mov	r0, r9
24016ca6:	f7fa f935 	bl	24010f14 <tLagrangeDelay_clear>
    x->maxDelay = tLagrangeDelay_getMaxDelay (&x->delay);
24016caa:	4638      	mov	r0, r7
24016cac:	f7fa faa8 	bl	24011200 <tLagrangeDelay_getMaxDelay>
24016cb0:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    tCookOnePole_initToPool(&x->reflFilt, mp);
24016cb4:	f104 0924 	add.w	r9, r4, #36	; 0x24
    tCookOnePole_initToPool(&x->reflFiltP, mp);
24016cb8:	f104 0728 	add.w	r7, r4, #40	; 0x28
    tCookOnePole_initToPool(&x->reflFilt, mp);
24016cbc:	4629      	mov	r1, r5
24016cbe:	4648      	mov	r0, r9
    x->maxDelay = tLagrangeDelay_getMaxDelay (&x->delay);
24016cc0:	ed84 0a54 	vstr	s0, [r4, #336]	; 0x150
    tCookOnePole_initToPool(&x->reflFilt, mp);
24016cc4:	f7fb fbba 	bl	2401243c <tCookOnePole_initToPool>
    tCookOnePole_setSampleRate(&x->reflFilt, x->sampleRate);
24016cc8:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
24016ccc:	4648      	mov	r0, r9
24016cce:	f7fb fbf9 	bl	240124c4 <tCookOnePole_setSampleRate>
    tCookOnePole_initToPool(&x->reflFiltP, mp);
24016cd2:	4629      	mov	r1, r5
24016cd4:	4638      	mov	r0, r7
24016cd6:	f7fb fbb1 	bl	2401243c <tCookOnePole_initToPool>
    tCookOnePole_setSampleRate(&x->reflFiltP, x->sampleRate);
24016cda:	4638      	mov	r0, r7
24016cdc:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
24016ce0:	f7fb fbf0 	bl	240124c4 <tCookOnePole_setSampleRate>
    tCookOnePole_setGainAndPole(&x->reflFilt,0.999f, -0.0014f);
24016ce4:	4648      	mov	r0, r9
24016ce6:	eddf 0ab6 	vldr	s1, [pc, #728]	; 24016fc0 <tTString_initToPool+0x43c>
    tExpSmooth_setDest(&x->pickNoise, 0.0f);
    tThiranAllpassSOCascade_initToPool(&x->allpass, 4, mp);
24016cea:	f104 0954 	add.w	r9, r4, #84	; 0x54
    tCookOnePole_setGainAndPole(&x->reflFilt,0.999f, -0.0014f);
24016cee:	ed9f 0ab5 	vldr	s0, [pc, #724]	; 24016fc4 <tTString_initToPool+0x440>
24016cf2:	f7fb fbd1 	bl	24012498 <tCookOnePole_setGainAndPole>
    tCookOnePole_setGainAndPole(&x->reflFiltP,0.999f, -0.0014f);
24016cf6:	eddf 0ab2 	vldr	s1, [pc, #712]	; 24016fc0 <tTString_initToPool+0x43c>
24016cfa:	4638      	mov	r0, r7
24016cfc:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 24016fc4 <tTString_initToPool+0x440>
24016d00:	f7fb fbca 	bl	24012498 <tCookOnePole_setGainAndPole>
    x->freq = freq;

    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);

    //tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 1.0f);
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
24016d04:	ed94 6a0c 	vldr	s12, [r4, #48]	; 0x30
24016d08:	edd4 7a24 	vldr	s15, [r4, #144]	; 0x90
24016d0c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);
24016d10:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
24016d14:	f104 0750 	add.w	r7, r4, #80	; 0x50
24016d18:	fec7 7aaa 	vmaxnm.f32	s15, s15, s21
24016d1c:	ee86 0a27 	vdiv.f32	s0, s12, s15
24016d20:	4638      	mov	r0, r7
    x->freq = freq;
24016d22:	edc4 7a19 	vstr	s15, [r4, #100]	; 0x64
    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);
24016d26:	ee27 9a87 	vmul.f32	s18, s15, s14
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
24016d2a:	ee30 0a66 	vsub.f32	s0, s0, s13
24016d2e:	f7fb f8ad 	bl	24011e8c <tExpSmooth_setDest>

    //tCycle_setFreq(&x->tensionModOsc, freq * x->invOversamplingTimesTwo);
#ifdef ARM_MATH_CM7
    Lfloat result = 0.0f;
    arm_atan2_f32(x->poleCoeff *  arm_sin_f32(Fc) , 1.0f - (x->poleCoeff *  arm_cos_f32(Fc)), &result);
24016d32:	eeb0 0a49 	vmov.f32	s0, s18
24016d36:	ed94 aa50 	vldr	s20, [r4, #320]	; 0x140
    Lfloat result = 0.0f;
24016d3a:	ed8d 8a03 	vstr	s16, [sp, #12]
    arm_atan2_f32(x->poleCoeff *  arm_sin_f32(Fc) , 1.0f - (x->poleCoeff *  arm_cos_f32(Fc)), &result);
24016d3e:	f7ea fa33 	bl	240011a8 <arm_sin_f32>
24016d42:	eef0 7a40 	vmov.f32	s15, s0
24016d46:	ed94 ca50 	vldr	s24, [r4, #320]	; 0x140
24016d4a:	eeb0 0a49 	vmov.f32	s0, s18
24016d4e:	ee2a aa27 	vmul.f32	s20, s20, s15
24016d52:	f7e9 fe0f 	bl	24000974 <arm_cos_f32>
24016d56:	eef0 0a68 	vmov.f32	s1, s17
24016d5a:	a803      	add	r0, sp, #12
24016d5c:	eef0 7a40 	vmov.f32	s15, s0
24016d60:	eeb0 0a4a 	vmov.f32	s0, s20
24016d64:	eeec 0a67 	vfms.f32	s1, s24, s15
24016d68:	f7e9 fc7a 	bl	24000660 <arm_atan2_f32>
     x->phaseComp = result;
24016d6c:	9b03      	ldr	r3, [sp, #12]
    tExpSmooth_initToPool(&x->tensionSmoother, 0.0f, 0.004f * x->invOversampling, mp);
24016d6e:	edd4 0a02 	vldr	s1, [r4, #8]
24016d72:	4629      	mov	r1, r5
     x->phaseComp = result;
24016d74:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    tExpSmooth_initToPool(&x->tensionSmoother, 0.0f, 0.004f * x->invOversampling, mp);
24016d78:	eeb0 0a48 	vmov.f32	s0, s16
24016d7c:	ee60 0a8b 	vmul.f32	s1, s1, s22
24016d80:	4658      	mov	r0, fp
24016d82:	f7fb f82d 	bl	24011de0 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->tensionSmoother, 0.0f);
24016d86:	eeb0 0a48 	vmov.f32	s0, s16
24016d8a:	4658      	mov	r0, fp
24016d8c:	f7fb f87e 	bl	24011e8c <tExpSmooth_setDest>
    tExpSmooth_initToPool(&x->pitchSmoother, 100.0f, 0.04f * x->invOversampling, mp);
24016d90:	eddf 7a9e 	vldr	s15, [pc, #632]	; 2401700c <tTString_initToPool+0x488>
24016d94:	edd4 0a02 	vldr	s1, [r4, #8]
24016d98:	4629      	mov	r1, r5
24016d9a:	4638      	mov	r0, r7
24016d9c:	eeb0 0a69 	vmov.f32	s0, s19
24016da0:	ee60 0aa7 	vmul.f32	s1, s1, s15
24016da4:	f7fb f81c 	bl	24011de0 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->pitchSmoother, 100.0f);
24016da8:	4638      	mov	r0, r7
24016daa:	eeb0 0a69 	vmov.f32	s0, s19
    tThiranAllpassSOCascade_initToPool(&x->allpassP, 4, mp);
24016dae:	f104 0758 	add.w	r7, r4, #88	; 0x58
    tExpSmooth_setDest(&x->pitchSmoother, 100.0f);
24016db2:	f7fb f86b 	bl	24011e8c <tExpSmooth_setDest>
    tExpSmooth_initToPool(&x->pickNoise, 0.0f, 0.09f * x->invOversampling, mp);
24016db6:	eddf 7a84 	vldr	s15, [pc, #528]	; 24016fc8 <tTString_initToPool+0x444>
24016dba:	edd4 0a02 	vldr	s1, [r4, #8]
24016dbe:	4629      	mov	r1, r5
24016dc0:	eeb0 0a48 	vmov.f32	s0, s16
24016dc4:	4650      	mov	r0, sl
24016dc6:	ee60 0aa7 	vmul.f32	s1, s1, s15
24016dca:	f7fb f809 	bl	24011de0 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->pickNoise, 0.0f);
24016dce:	eeb0 0a48 	vmov.f32	s0, s16
24016dd2:	4650      	mov	r0, sl
24016dd4:	f7fb f85a 	bl	24011e8c <tExpSmooth_setDest>
    tThiranAllpassSOCascade_initToPool(&x->allpass, 4, mp);
24016dd8:	462a      	mov	r2, r5
24016dda:	2104      	movs	r1, #4
24016ddc:	4648      	mov	r0, r9
24016dde:	f7fb f903 	bl	24011fe8 <tThiranAllpassSOCascade_initToPool>
    tThiranAllpassSOCascade_initToPool(&x->allpassP, 4, mp);
24016de2:	462a      	mov	r2, r5
24016de4:	2104      	movs	r1, #4
24016de6:	4638      	mov	r0, r7
24016de8:	f7fb f8fe 	bl	24011fe8 <tThiranAllpassSOCascade_initToPool>
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, 0.0001f, 100.0f, x->invOversampling);
24016dec:	eef0 0a69 	vmov.f32	s1, s19
24016df0:	ed94 1a02 	vldr	s2, [r4, #8]
24016df4:	4648      	mov	r0, r9
24016df6:	ed9f 0a75 	vldr	s0, [pc, #468]	; 24016fcc <tTString_initToPool+0x448>
24016dfa:	f7fb f96d 	bl	240120d8 <tThiranAllpassSOCascade_setCoeff>
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, 0.000025f, 100.0f, x->invOversampling);
24016dfe:	ed94 1a02 	vldr	s2, [r4, #8]
24016e02:	4638      	mov	r0, r7
24016e04:	eef0 0a69 	vmov.f32	s1, s19
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, 0.0001f, 100.0f, x->invOversampling);
24016e08:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
    tSVF_initToPool(&x->highpassP, SVFTypeHighpass, 1800.0f, 0.8f, mp);
24016e0c:	f104 076c 	add.w	r7, r4, #108	; 0x6c
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, 0.000025f, 100.0f, x->invOversampling);
24016e10:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 24016fd0 <tTString_initToPool+0x44c>
24016e14:	f7fb f960 	bl	240120d8 <tThiranAllpassSOCascade_setCoeff>
    tSVF_initToPool(&x->lowpassP, SVFTypeLowpass, 5000.0f, 0.8f, mp);
24016e18:	f104 0068 	add.w	r0, r4, #104	; 0x68
24016e1c:	4631      	mov	r1, r6
24016e1e:	eddf 0a6d 	vldr	s1, [pc, #436]	; 24016fd4 <tTString_initToPool+0x450>
24016e22:	462a      	mov	r2, r5
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, 0.000025f, 100.0f, x->invOversampling);
24016e24:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
    tSVF_initToPool(&x->lowpassP, SVFTypeLowpass, 5000.0f, 0.8f, mp);
24016e28:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 24016fd8 <tTString_initToPool+0x454>
24016e2c:	9001      	str	r0, [sp, #4]
24016e2e:	f7fb fbdb 	bl	240125e8 <tSVF_initToPool>
    tSVF_setSampleRate(&x->lowpassP, x->sampleRate);
24016e32:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
24016e36:	9801      	ldr	r0, [sp, #4]
24016e38:	f7fb fd30 	bl	2401289c <tSVF_setSampleRate>
    tSVF_setFreq(&x->lowpassP, 6000.0f);
24016e3c:	ed9f 0a67 	vldr	s0, [pc, #412]	; 24016fdc <tTString_initToPool+0x458>
24016e40:	9801      	ldr	r0, [sp, #4]
24016e42:	f7fb fc93 	bl	2401276c <tSVF_setFreq>
    tSVF_initToPool(&x->highpassP, SVFTypeHighpass, 1800.0f, 0.8f, mp);
24016e46:	eddf 0a63 	vldr	s1, [pc, #396]	; 24016fd4 <tTString_initToPool+0x450>
24016e4a:	462a      	mov	r2, r5
24016e4c:	4641      	mov	r1, r8
24016e4e:	4638      	mov	r0, r7
24016e50:	ed9f 0a63 	vldr	s0, [pc, #396]	; 24016fe0 <tTString_initToPool+0x45c>
24016e54:	f7fb fbc8 	bl	240125e8 <tSVF_initToPool>
    tSVF_setSampleRate(&x->highpassP, x->sampleRate);
24016e58:	4638      	mov	r0, r7
24016e5a:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
    tSVF_initToPool(&x->pickupFilter2, SVFTypeLowpass, 3800.0f, 1.1f, mp);
24016e5e:	f104 08bc 	add.w	r8, r4, #188	; 0xbc
    tSVF_setSampleRate(&x->highpassP, x->sampleRate);
24016e62:	f7fb fd1b 	bl	2401289c <tSVF_setSampleRate>
    tSVF_setFreq(&x->highpassP, 1800.0f);
24016e66:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 24016fe0 <tTString_initToPool+0x45c>
24016e6a:	4638      	mov	r0, r7
    tSVF_initToPool(&x->pickupFilter, SVFTypeLowpass, 2900.0f, 1.0f, mp);
24016e6c:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
    tSVF_setFreq(&x->highpassP, 1800.0f);
24016e70:	f7fb fc7c 	bl	2401276c <tSVF_setFreq>
    x->twoPiTimesInvSampleRate = TWO_PI * x->invSampleRate;
24016e74:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    tCycle_initToPool(&x->tensionModOsc, mp);
24016e78:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
24016e7c:	4629      	mov	r1, r5
    x->twoPiTimesInvSampleRate = TWO_PI * x->invSampleRate;
24016e7e:	ee67 7aab 	vmul.f32	s15, s15, s23
    tCycle_initToPool(&x->tensionModOsc, mp);
24016e82:	9001      	str	r0, [sp, #4]
    x->twoPiTimesInvSampleRate = TWO_PI * x->invSampleRate;
24016e84:	edc4 7a04 	vstr	s15, [r4, #16]
    tCycle_initToPool(&x->tensionModOsc, mp);
24016e88:	f7fe fb3a 	bl	24015500 <tCycle_initToPool>
    tCycle_setSampleRate(&x->tensionModOsc, x->sampleRate);
24016e8c:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
24016e90:	9801      	ldr	r0, [sp, #4]
24016e92:	f7fe fb99 	bl	240155c8 <tCycle_setSampleRate>
    tCycle_initToPool(&x->pickupModOsc, mp);
24016e96:	f104 00ac 	add.w	r0, r4, #172	; 0xac
24016e9a:	4629      	mov	r1, r5
24016e9c:	9001      	str	r0, [sp, #4]
24016e9e:	f7fe fb2f 	bl	24015500 <tCycle_initToPool>
    tCycle_setSampleRate(&x->pickupModOsc, x->sampleRate);
24016ea2:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
24016ea6:	9801      	ldr	r0, [sp, #4]
24016ea8:	f7fe fb8e 	bl	240155c8 <tCycle_setSampleRate>
    tSVF_initToPool(&x->pickupFilter, SVFTypeLowpass, 2900.0f, 1.0f, mp);
24016eac:	4631      	mov	r1, r6
24016eae:	eef0 0a68 	vmov.f32	s1, s17
24016eb2:	462a      	mov	r2, r5
24016eb4:	4638      	mov	r0, r7
24016eb6:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 24016fe4 <tTString_initToPool+0x460>
    x->pickupModOscFreq = 440.0f;
24016eba:	edc4 aa2c 	vstr	s21, [r4, #176]	; 0xb0
    x->pickupModOscAmp = 1.0f;
24016ebe:	edc4 8a2d 	vstr	s17, [r4, #180]	; 0xb4
    tSVF_initToPool(&x->pickupFilter, SVFTypeLowpass, 2900.0f, 1.0f, mp);
24016ec2:	f7fb fb91 	bl	240125e8 <tSVF_initToPool>
    tSVF_setSampleRate(&x->pickupFilter, x->sampleRate);
24016ec6:	4638      	mov	r0, r7
24016ec8:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
24016ecc:	f7fb fce6 	bl	2401289c <tSVF_setSampleRate>
    tSVF_setFreq(&x->pickupFilter, 3900.0f);
24016ed0:	4638      	mov	r0, r7
24016ed2:	ed9f 0a45 	vldr	s0, [pc, #276]	; 24016fe8 <tTString_initToPool+0x464>
    tSVF_initToPool(&x->peakFilt, SVFTypePeak, 1000.0f, .9f, mp);
24016ed6:	f504 77c4 	add.w	r7, r4, #392	; 0x188
    tSVF_setFreq(&x->pickupFilter, 3900.0f);
24016eda:	f7fb fc47 	bl	2401276c <tSVF_setFreq>
    tSVF_initToPool(&x->pickupFilter2, SVFTypeLowpass, 3800.0f, 1.1f, mp);
24016ede:	4631      	mov	r1, r6
24016ee0:	eddf 0a42 	vldr	s1, [pc, #264]	; 24016fec <tTString_initToPool+0x468>
24016ee4:	462a      	mov	r2, r5
24016ee6:	ed9f 0a42 	vldr	s0, [pc, #264]	; 24016ff0 <tTString_initToPool+0x46c>
24016eea:	4640      	mov	r0, r8
24016eec:	f7fb fb7c 	bl	240125e8 <tSVF_initToPool>
    tSVF_setSampleRate(&x->pickupFilter2, x->sampleRate);
24016ef0:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
24016ef4:	4640      	mov	r0, r8
24016ef6:	f7fb fcd1 	bl	2401289c <tSVF_setSampleRate>
    tSVF_setFreq(&x->pickupFilter2, 4100.0f);
24016efa:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 24016ff4 <tTString_initToPool+0x470>
24016efe:	4640      	mov	r0, r8
24016f00:	f7fb fc34 	bl	2401276c <tSVF_setFreq>
    tSVF_initToPool(&x->peakFilt, SVFTypePeak, 1000.0f, .9f, mp);
24016f04:	eddf 0a43 	vldr	s1, [pc, #268]	; 24017014 <tTString_initToPool+0x490>
24016f08:	462a      	mov	r2, r5
24016f0a:	2104      	movs	r1, #4
24016f0c:	4638      	mov	r0, r7
24016f0e:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 24017004 <tTString_initToPool+0x480>
24016f12:	f7fb fb69 	bl	240125e8 <tSVF_initToPool>
    tSVF_setSampleRate(&x->peakFilt, x->sampleRate);
24016f16:	4638      	mov	r0, r7
24016f18:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
24016f1c:	f7fb fcbe 	bl	2401289c <tSVF_setSampleRate>
    tSVF_setFreq(&x->peakFilt, 1000.0f);
24016f20:	ed9f 0a38 	vldr	s0, [pc, #224]	; 24017004 <tTString_initToPool+0x480>
24016f24:	4638      	mov	r0, r7
    tHighpass_initToPool(&x->dcBlock, 1.0f, mp);
24016f26:	f104 071c 	add.w	r7, r4, #28
    tSVF_setFreq(&x->peakFilt, 1000.0f);
24016f2a:	f7fb fc1f 	bl	2401276c <tSVF_setFreq>
    tNoise_initToPool(&x->noise, PinkNoise, mp);
24016f2e:	462a      	mov	r2, r5
24016f30:	4631      	mov	r1, r6
24016f32:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
24016f36:	f7fe fea5 	bl	24015c84 <tNoise_initToPool>
    tHighpass_initToPool(&x->dcBlockP, 1.0f, mp);
24016f3a:	f104 0620 	add.w	r6, r4, #32
    tHighpass_initToPool(&x->dcBlock, 1.0f, mp);
24016f3e:	4629      	mov	r1, r5
24016f40:	eeb0 0a68 	vmov.f32	s0, s17
24016f44:	4638      	mov	r0, r7
24016f46:	f7fb fcd3 	bl	240128f0 <tHighpass_initToPool>
    tHighpass_setSampleRate(&x->dcBlock,x->sampleRate);
24016f4a:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
24016f4e:	4638      	mov	r0, r7
24016f50:	f7fb fd0e 	bl	24012970 <tHighpass_setSampleRate>
    tHighpass_initToPool(&x->dcBlockP, 1.0f, mp);
24016f54:	4629      	mov	r1, r5
24016f56:	eeb0 0a68 	vmov.f32	s0, s17
24016f5a:	4630      	mov	r0, r6
24016f5c:	f7fb fcc8 	bl	240128f0 <tHighpass_initToPool>
    tHighpass_setSampleRate(&x->dcBlockP,x->sampleRate);
24016f60:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
24016f64:	4630      	mov	r0, r6
24016f66:	f7fb fd03 	bl	24012970 <tHighpass_setSampleRate>
    tSlide_initToPool(&x->slide, 0, 3000, mp);//100 1400
24016f6a:	4629      	mov	r1, r5
24016f6c:	f104 0048 	add.w	r0, r4, #72	; 0x48
24016f70:	eeb0 0a48 	vmov.f32	s0, s16
24016f74:	eddf 0a20 	vldr	s1, [pc, #128]	; 24016ff8 <tTString_initToPool+0x474>
24016f78:	f7fa ffa6 	bl	24011ec8 <tSlide_initToPool>
    if (x->wound)
24016f7c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    	tExpSmooth_initToPool(&x->barSmooth2, 0.0f,0.0005f, mp); //was 0.0005
24016f80:	f504 708c 	add.w	r0, r4, #280	; 0x118
24016f84:	4629      	mov	r1, r5
    if (x->wound)
24016f86:	2b00      	cmp	r3, #0
24016f88:	f000 80e4 	beq.w	24017154 <tTString_initToPool+0x5d0>
    	tExpSmooth_initToPool(&x->barSmooth2, 0.0f,0.0005f, mp); //was 0.0005
24016f8c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 24016ffc <tTString_initToPool+0x478>
24016f90:	eeb0 0a48 	vmov.f32	s0, s16
24016f94:	9001      	str	r0, [sp, #4]
24016f96:	f7fa ff23 	bl	24011de0 <tExpSmooth_initToPool>
    	    tExpSmooth_setDest(&x->barSmooth2, 0.0f);
24016f9a:	eeb0 0a48 	vmov.f32	s0, s16
24016f9e:	9801      	ldr	r0, [sp, #4]
24016fa0:	e040      	b.n	24017024 <tTString_initToPool+0x4a0>
24016fa2:	bf00      	nop
24016fa4:	40c90fdb 	.word	0x40c90fdb
24016fa8:	41200000 	.word	0x41200000
24016fac:	00000000 	.word	0x00000000
24016fb0:	42c80000 	.word	0x42c80000
24016fb4:	43dc0000 	.word	0x43dc0000
24016fb8:	3b83126f 	.word	0x3b83126f
24016fbc:	3ecccccd 	.word	0x3ecccccd
24016fc0:	bab78034 	.word	0xbab78034
24016fc4:	3f7fbe77 	.word	0x3f7fbe77
24016fc8:	3db851ec 	.word	0x3db851ec
24016fcc:	38d1b717 	.word	0x38d1b717
24016fd0:	37d1b717 	.word	0x37d1b717
24016fd4:	3f4ccccd 	.word	0x3f4ccccd
24016fd8:	459c4000 	.word	0x459c4000
24016fdc:	45bb8000 	.word	0x45bb8000
24016fe0:	44e10000 	.word	0x44e10000
24016fe4:	45354000 	.word	0x45354000
24016fe8:	4573c000 	.word	0x4573c000
24016fec:	3f8ccccd 	.word	0x3f8ccccd
24016ff0:	456d8000 	.word	0x456d8000
24016ff4:	45802000 	.word	0x45802000
24016ff8:	453b8000 	.word	0x453b8000
24016ffc:	3a03126f 	.word	0x3a03126f
24017000:	3a51b717 	.word	0x3a51b717
24017004:	447a0000 	.word	0x447a0000
24017008:	00000000 	.word	0x00000000
2401700c:	3d23d70a 	.word	0x3d23d70a
24017010:	3d4ccccd 	.word	0x3d4ccccd
24017014:	3f666666 	.word	0x3f666666
24017018:	45dac000 	.word	0x45dac000
2401701c:	3dcccccd 	.word	0x3dcccccd
24017020:	3e7ae148 	.word	0x3e7ae148
24017024:	f7fa ff32 	bl	24011e8c <tExpSmooth_setDest>
    	    tExpSmooth_initToPool(&x->barSmoothVol, 0.0f,0.0008f, mp); //was 0.008
24017028:	f504 768e 	add.w	r6, r4, #284	; 0x11c
2401702c:	4629      	mov	r1, r5
2401702e:	ed5f 0a0c 	vldr	s1, [pc, #-48]	; 24017000 <tTString_initToPool+0x47c>
    	tExpSmooth_initToPool(&x->barSmoothVol, 0.0f,0.004f, mp); //was 0.008
24017032:	eeb0 0a48 	vmov.f32	s0, s16
24017036:	4630      	mov	r0, r6
24017038:	9601      	str	r6, [sp, #4]
2401703a:	f7fa fed1 	bl	24011de0 <tExpSmooth_initToPool>
    	tExpSmooth_setDest(&x->barSmoothVol, 0.0f);
2401703e:	eeb0 0a48 	vmov.f32	s0, s16
24017042:	9801      	ldr	r0, [sp, #4]
24017044:	f7fa ff22 	bl	24011e8c <tExpSmooth_setDest>
    tSlide_initToPool(&x->barSmooth, 1000, 1000, mp);//600 600
24017048:	ed5f 0a12 	vldr	s1, [pc, #-72]	; 24017004 <tTString_initToPool+0x480>
    tExpSmooth_initToPool(&x->barPulse, 0.0f,0.05f, mp); //was 0.05
2401704c:	ed1f 8a12 	vldr	s16, [pc, #-72]	; 24017008 <tTString_initToPool+0x484>
24017050:	f104 06dc 	add.w	r6, r4, #220	; 0xdc
    tSlide_initToPool(&x->barSmooth, 1000, 1000, mp);//600 600
24017054:	eeb0 0a60 	vmov.f32	s0, s1
24017058:	f504 7084 	add.w	r0, r4, #264	; 0x108
2401705c:	4629      	mov	r1, r5
    tFeedbackLeveler_initToPool(&x->feedback, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
2401705e:	ed5f 8a15 	vldr	s17, [pc, #-84]	; 2401700c <tTString_initToPool+0x488>
    tSlide_initToPool(&x->barSmooth, 1000, 1000, mp);//600 600
24017062:	f7fa ff31 	bl	24011ec8 <tSlide_initToPool>
    tSlide_initToPool(&x->barPulseSlide, 2, 30, mp);//100 1400 // 10 3000
24017066:	4629      	mov	r1, r5
24017068:	f504 708a 	add.w	r0, r4, #276	; 0x114
2401706c:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
24017070:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
24017074:	f7fa ff28 	bl	24011ec8 <tSlide_initToPool>
    tExpSmooth_initToPool(&x->barPulse, 0.0f,0.05f, mp); //was 0.05
24017078:	4629      	mov	r1, r5
2401707a:	eeb0 0a48 	vmov.f32	s0, s16
2401707e:	ed5f 0a1c 	vldr	s1, [pc, #-112]	; 24017010 <tTString_initToPool+0x48c>
24017082:	4630      	mov	r0, r6
24017084:	f7fa feac 	bl	24011de0 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->barPulse, 0.0f);
24017088:	eeb0 0a48 	vmov.f32	s0, s16
2401708c:	4630      	mov	r0, r6
    x->timeSinceLastBump = 1;
2401708e:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
    tExpSmooth_setDest(&x->barPulse, 0.0f);
24017092:	f7fa fefb 	bl	24011e8c <tExpSmooth_setDest>
    tSVF_initToPool(&x->barResonator, SVFTypeBandpass, 5.0f, 15.0f, mp);
24017096:	462a      	mov	r2, r5
24017098:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
2401709c:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
240170a0:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
240170a4:	2102      	movs	r1, #2
240170a6:	f7fb fa9f 	bl	240125e8 <tSVF_initToPool>
    tHighpass_initToPool(&x->barHP, 30.0f, mp);
240170aa:	4629      	mov	r1, r5
240170ac:	f504 7086 	add.w	r0, r4, #268	; 0x10c
240170b0:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
    x->timeSinceLastBump = 1;
240170b4:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
    tHighpass_initToPool(&x->barHP, 30.0f, mp);
240170b8:	f7fb fc1a 	bl	240128f0 <tHighpass_initToPool>
    tSVF_initToPool(&x->barLP, SVFTypeLowpass, 7000.0f, 0.9f, mp);
240170bc:	462a      	mov	r2, r5
240170be:	f504 7088 	add.w	r0, r4, #272	; 0x110
240170c2:	ed5f 0a2c 	vldr	s1, [pc, #-176]	; 24017014 <tTString_initToPool+0x490>
240170c6:	ed1f 0a2c 	vldr	s0, [pc, #-176]	; 24017018 <tTString_initToPool+0x494>
240170ca:	2101      	movs	r1, #1
240170cc:	f7fb fa8c 	bl	240125e8 <tSVF_initToPool>
    x->inharmonic = 1;
240170d0:	2101      	movs	r1, #1
    tFeedbackLeveler_initToPool(&x->feedback, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
240170d2:	edd4 0a02 	vldr	s1, [r4, #8]
240170d6:	462a      	mov	r2, r5
240170d8:	f504 70ac 	add.w	r0, r4, #344	; 0x158
    x->inharmonic = 1;
240170dc:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
    tFeedbackLeveler_initToPool(&x->feedback, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
240170e0:	ee60 0aa8 	vmul.f32	s1, s1, s17
240170e4:	ed1f 1a33 	vldr	s2, [pc, #-204]	; 2401701c <tTString_initToPool+0x498>
240170e8:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
    x->inharmonicMult = 1.0f;
240170ec:	f8c4 614c 	str.w	r6, [r4, #332]	; 0x14c
    tFeedbackLeveler_initToPool(&x->feedback, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
240170f0:	f7fa face 	bl	24011690 <tFeedbackLeveler_initToPool>
    tFeedbackLeveler_initToPool(&x->feedbackP, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
240170f4:	edd4 0a02 	vldr	s1, [r4, #8]
240170f8:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
240170fc:	ed1f 1a39 	vldr	s2, [pc, #-228]	; 2401701c <tTString_initToPool+0x498>
24017100:	ee60 0aa8 	vmul.f32	s1, s1, s17
24017104:	462a      	mov	r2, r5
24017106:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
2401710a:	2101      	movs	r1, #1
2401710c:	f7fa fac0 	bl	24011690 <tFeedbackLeveler_initToPool>
    x->quarterSampleRate = x->sampleRate * 0.245f; // a little less than a quarter because we want to compute filters with it ( normalized filter cutoff needs to be less than half pi to work with freq approximation)
24017110:	ed1f 7a3d 	vldr	s14, [pc, #-244]	; 24017020 <tTString_initToPool+0x49c>
24017114:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
    tNoise_initToPool(&x->pickNoiseSource, PinkNoise, mp);
24017118:	462a      	mov	r2, r5
    x->windingsPerInch = 70.0f;
2401711a:	4b17      	ldr	r3, [pc, #92]	; (24017178 <tTString_initToPool+0x5f4>)
    tNoise_initToPool(&x->pickNoiseSource, PinkNoise, mp);
2401711c:	f504 70c0 	add.w	r0, r4, #384	; 0x180
    x->quarterSampleRate = x->sampleRate * 0.245f; // a little less than a quarter because we want to compute filters with it ( normalized filter cutoff needs to be less than half pi to work with freq approximation)
24017120:	ee67 7a87 	vmul.f32	s15, s15, s14
    tNoise_initToPool(&x->pickNoiseSource, PinkNoise, mp);
24017124:	2101      	movs	r1, #1
    x->windingsPerInch = 70.0f;
24017126:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
    x->quarterSampleRate = x->sampleRate * 0.245f; // a little less than a quarter because we want to compute filters with it ( normalized filter cutoff needs to be less than half pi to work with freq approximation)
2401712a:	edc4 7a5a 	vstr	s15, [r4, #360]	; 0x168
    tNoise_initToPool(&x->pickNoiseSource, PinkNoise, mp);
2401712e:	f7fe fda9 	bl	24015c84 <tNoise_initToPool>
    x->pickupAmount = 0.0f;
24017132:	ed84 8a63 	vstr	s16, [r4, #396]	; 0x18c
    _tMempool* m = *mp;
24017136:	682d      	ldr	r5, [r5, #0]
    _tPickupNonLinearity* p = *pl = (_tPickupNonLinearity*) mpool_alloc(sizeof(_tPickupNonLinearity), m);
24017138:	2008      	movs	r0, #8
2401713a:	4629      	mov	r1, r5
2401713c:	f7fe f87e 	bl	2401523c <mpool_alloc>
24017140:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
    p->mempool = m;
24017144:	6005      	str	r5, [r0, #0]
    p->prev = 0.0f;
24017146:	ed80 8a01 	vstr	s16, [r0, #4]
}
2401714a:	b005      	add	sp, #20
2401714c:	ecbd 8b0a 	vpop	{d8-d12}
24017150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    	tExpSmooth_initToPool(&x->barSmooth2, 0.0f,0.005f, mp); //was 0.0005
24017154:	eddf 0a09 	vldr	s1, [pc, #36]	; 2401717c <tTString_initToPool+0x5f8>
24017158:	eeb0 0a48 	vmov.f32	s0, s16
2401715c:	9001      	str	r0, [sp, #4]
2401715e:	f7fa fe3f 	bl	24011de0 <tExpSmooth_initToPool>
    	tExpSmooth_setDest(&x->barSmooth2, 0.0f);
24017162:	eeb0 0a48 	vmov.f32	s0, s16
24017166:	9801      	ldr	r0, [sp, #4]
24017168:	f7fa fe90 	bl	24011e8c <tExpSmooth_setDest>
    	tExpSmooth_initToPool(&x->barSmoothVol, 0.0f,0.004f, mp); //was 0.008
2401716c:	f504 768e 	add.w	r6, r4, #284	; 0x11c
24017170:	eef0 0a4b 	vmov.f32	s1, s22
24017174:	4629      	mov	r1, r5
24017176:	e75c      	b.n	24017032 <tTString_initToPool+0x4ae>
24017178:	428c0000 	.word	0x428c0000
2401717c:	3ba3d70a 	.word	0x3ba3d70a

24017180 <tTString_free>:
{
24017180:	b510      	push	{r4, lr}
    _tTString* x = *bw;
24017182:	6804      	ldr	r4, [r0, #0]
	_tPickupNonLinearity* p = *pl;
24017184:	f8d4 0190 	ldr.w	r0, [r4, #400]	; 0x190
	mpool_free((char*)p, p->mempool);
24017188:	6801      	ldr	r1, [r0, #0]
2401718a:	f7fe f919 	bl	240153c0 <mpool_free>
    tNoise_free(&x->pickNoiseSource);
2401718e:	f504 70c0 	add.w	r0, r4, #384	; 0x180
24017192:	f7fe fd87 	bl	24015ca4 <tNoise_free>
    tFeedbackLeveler_free(&x->feedbackP);
24017196:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
2401719a:	f7fa faa1 	bl	240116e0 <tFeedbackLeveler_free>
    tFeedbackLeveler_free(&x->feedback);
2401719e:	f504 70ac 	add.w	r0, r4, #344	; 0x158
240171a2:	f7fa fa9d 	bl	240116e0 <tFeedbackLeveler_free>
    tSVF_free(&x->barLP);
240171a6:	f504 7088 	add.w	r0, r4, #272	; 0x110
240171aa:	f7fb faa5 	bl	240126f8 <tSVF_free>
    tHighpass_free(&x->barHP);
240171ae:	f504 7086 	add.w	r0, r4, #268	; 0x10c
240171b2:	f7fb fbbd 	bl	24012930 <tHighpass_free>
    tSVF_free(&x->barResonator);
240171b6:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
240171ba:	f7fb fa9d 	bl	240126f8 <tSVF_free>
    tExpSmooth_free(&x->barPulse);
240171be:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
240171c2:	f7fa fe39 	bl	24011e38 <tExpSmooth_free>
    tSlide_free(&x->barPulseSlide);
240171c6:	f504 708a 	add.w	r0, r4, #276	; 0x114
240171ca:	f7fa fea3 	bl	24011f14 <tSlide_free>
    tSlide_free(&x->barSmooth);
240171ce:	f504 7084 	add.w	r0, r4, #264	; 0x108
240171d2:	f7fa fe9f 	bl	24011f14 <tSlide_free>
	tExpSmooth_free(&x->barSmoothVol);
240171d6:	f504 708e 	add.w	r0, r4, #284	; 0x11c
240171da:	f7fa fe2d 	bl	24011e38 <tExpSmooth_free>
	tExpSmooth_free(&x->barSmooth2);
240171de:	f504 708c 	add.w	r0, r4, #280	; 0x118
240171e2:	f7fa fe29 	bl	24011e38 <tExpSmooth_free>
	tSlide_free(&x->slide);
240171e6:	f104 0048 	add.w	r0, r4, #72	; 0x48
240171ea:	f7fa fe93 	bl	24011f14 <tSlide_free>
    tHighpass_free(&x->dcBlockP);
240171ee:	f104 0020 	add.w	r0, r4, #32
240171f2:	f7fb fb9d 	bl	24012930 <tHighpass_free>
    tHighpass_free(&x->dcBlock);
240171f6:	f104 001c 	add.w	r0, r4, #28
240171fa:	f7fb fb99 	bl	24012930 <tHighpass_free>
    tNoise_free(&x->noise);
240171fe:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
24017202:	f7fe fd4f 	bl	24015ca4 <tNoise_free>
    tSVF_free(&x->peakFilt);
24017206:	f504 70c4 	add.w	r0, r4, #392	; 0x188
2401720a:	f7fb fa75 	bl	240126f8 <tSVF_free>
    tSVF_free(&x->pickupFilter2);
2401720e:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
24017212:	f7fb fa71 	bl	240126f8 <tSVF_free>
    tSVF_free(&x->pickupFilter);
24017216:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
2401721a:	f7fb fa6d 	bl	240126f8 <tSVF_free>
    tCycle_free(&x->pickupModOsc);
2401721e:	f104 00ac 	add.w	r0, r4, #172	; 0xac
24017222:	f7fe f989 	bl	24015538 <tCycle_free>
    tCycle_free(&x->tensionModOsc);
24017226:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
2401722a:	f7fe f985 	bl	24015538 <tCycle_free>
    tSVF_free(&x->highpassP);
2401722e:	f104 006c 	add.w	r0, r4, #108	; 0x6c
24017232:	f7fb fa61 	bl	240126f8 <tSVF_free>
    tSVF_free(&x->lowpassP),
24017236:	f104 0068 	add.w	r0, r4, #104	; 0x68
2401723a:	f7fb fa5d 	bl	240126f8 <tSVF_free>
    tThiranAllpassSOCascade_free(&x->allpassP);
2401723e:	f104 0058 	add.w	r0, r4, #88	; 0x58
24017242:	f7fa ff2f 	bl	240120a4 <tThiranAllpassSOCascade_free>
    tThiranAllpassSOCascade_free(&x->allpass);
24017246:	f104 0054 	add.w	r0, r4, #84	; 0x54
2401724a:	f7fa ff2b 	bl	240120a4 <tThiranAllpassSOCascade_free>
    tExpSmooth_free(&x->pickNoise);
2401724e:	f504 70be 	add.w	r0, r4, #380	; 0x17c
24017252:	f7fa fdf1 	bl	24011e38 <tExpSmooth_free>
    tExpSmooth_free(&x->pitchSmoother);
24017256:	f104 0050 	add.w	r0, r4, #80	; 0x50
2401725a:	f7fa fded 	bl	24011e38 <tExpSmooth_free>
    tExpSmooth_free(&x->tensionSmoother);
2401725e:	f104 004c 	add.w	r0, r4, #76	; 0x4c
24017262:	f7fa fde9 	bl	24011e38 <tExpSmooth_free>
    tCookOnePole_free(&x->reflFiltP);
24017266:	f104 0028 	add.w	r0, r4, #40	; 0x28
2401726a:	f7fb f8ff 	bl	2401246c <tCookOnePole_free>
    tCookOnePole_free(&x->reflFilt);
2401726e:	f104 0024 	add.w	r0, r4, #36	; 0x24
24017272:	f7fb f8fb 	bl	2401246c <tCookOnePole_free>
    tLagrangeDelay_free(&x->delayP);
24017276:	f104 0018 	add.w	r0, r4, #24
2401727a:	f7f9 fe3f 	bl	24010efc <tLagrangeDelay_free>
    tLagrangeDelay_free(&x->delay);
2401727e:	f104 0014 	add.w	r0, r4, #20
24017282:	f7f9 fe3b 	bl	24010efc <tLagrangeDelay_free>
    mpool_free((char*)x, x->mempool);
24017286:	6821      	ldr	r1, [r4, #0]
24017288:	4620      	mov	r0, r4
}
2401728a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)x, x->mempool);
2401728e:	f7fe b897 	b.w	240153c0 <mpool_free>
24017292:	bf00      	nop

24017294 <tTString_tick>:
{
24017294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24017298:	ed2d 8b10 	vpush	{d8-d15}
    _tTString* x = *bw;
2401729c:	6804      	ldr	r4, [r0, #0]
{
2401729e:	b093      	sub	sp, #76	; 0x4c
    x->feedbackNoise = tNoise_tick(&x->noise);
240172a0:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
240172a4:	f7fe fd02 	bl	24015cac <tNoise_tick>
    if ((barPos > (x->prevBarPosSmoothed + 3.0f)) || (barPos < (x->prevBarPosSmoothed - 3.0f)))
240172a8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
240172ac:	edd4 7a4a 	vldr	s15, [r4, #296]	; 0x128
    	tExpSmooth_setValAndDest(&x->barSmooth2,barPos);
240172b0:	f504 708c 	add.w	r0, r4, #280	; 0x118
    Lfloat barPos = x->barPosition;
240172b4:	ed94 8a3b 	vldr	s16, [r4, #236]	; 0xec
    if ((barPos > (x->prevBarPosSmoothed + 3.0f)) || (barPos < (x->prevBarPosSmoothed - 3.0f)))
240172b8:	ee77 6a87 	vadd.f32	s13, s15, s14
    x->feedbackNoise = tNoise_tick(&x->noise);
240172bc:	ed84 0a58 	vstr	s0, [r4, #352]	; 0x160
    	tExpSmooth_setValAndDest(&x->barSmooth2,barPos);
240172c0:	9000      	str	r0, [sp, #0]
240172c2:	eeb0 0a48 	vmov.f32	s0, s16
    if ((barPos > (x->prevBarPosSmoothed + 3.0f)) || (barPos < (x->prevBarPosSmoothed - 3.0f)))
240172c6:	eef4 6ac8 	vcmpe.f32	s13, s16
240172ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240172ce:	d407      	bmi.n	240172e0 <tTString_tick+0x4c>
240172d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
240172d4:	eef4 7ac8 	vcmpe.f32	s15, s16
240172d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240172dc:	f340 83d5 	ble.w	24017a8a <tTString_tick+0x7f6>
    	tExpSmooth_setValAndDest(&x->barSmooth2,barPos);
240172e0:	f7fa fddc 	bl	24011e9c <tExpSmooth_setValAndDest>
240172e4:	9800      	ldr	r0, [sp, #0]
    Lfloat barPosSmoothed = tExpSmooth_tick(&x->barSmooth2);
240172e6:	f7fa fddf 	bl	24011ea8 <tExpSmooth_tick>
    Lfloat barDifference = fastabsf(barPosSmoothed - x->prevBarPosSmoothed);
240172ea:	edd4 7a4a 	vldr	s15, [r4, #296]	; 0x128
    tExpSmooth_setDest(&x->barSmoothVol,barPos);
240172ee:	f504 758e 	add.w	r5, r4, #284	; 0x11c
    Lfloat barPosSmoothed = tExpSmooth_tick(&x->barSmooth2);
240172f2:	eef0 8a40 	vmov.f32	s17, s0
    Lfloat barDifference = fastabsf(barPosSmoothed - x->prevBarPosSmoothed);
240172f6:	ee30 0a67 	vsub.f32	s0, s0, s15
240172fa:	f7fd fb85 	bl	24014a08 <fastabsf>
    tExpSmooth_setDest(&x->barSmoothVol,barPos);
240172fe:	4628      	mov	r0, r5
    Lfloat barDifference = fastabsf(barPosSmoothed - x->prevBarPosSmoothed);
24017300:	eeb0 9a40 	vmov.f32	s18, s0
    tExpSmooth_setDest(&x->barSmoothVol,barPos);
24017304:	9500      	str	r5, [sp, #0]
24017306:	eeb0 0a48 	vmov.f32	s0, s16
2401730a:	f7fa fdbf 	bl	24011e8c <tExpSmooth_setDest>
        Lfloat barPosSmoothVol = tExpSmooth_tick(&x->barSmoothVol);
2401730e:	9800      	ldr	r0, [sp, #0]
24017310:	f7fa fdca 	bl	24011ea8 <tExpSmooth_tick>
        Lfloat differenceFastSmooth = fastabsf(barPosSmoothVol - x->prevBarPosSmoothVol);
24017314:	edd4 7a48 	vldr	s15, [r4, #288]	; 0x120
        Lfloat barPosSmoothVol = tExpSmooth_tick(&x->barSmoothVol);
24017318:	eeb0 8a40 	vmov.f32	s16, s0
        Lfloat differenceFastSmooth = fastabsf(barPosSmoothVol - x->prevBarPosSmoothVol);
2401731c:	ee30 0a67 	vsub.f32	s0, s0, s15
24017320:	f7fd fb72 	bl	24014a08 <fastabsf>
        if (differenceFastSmooth < 0.0001f)
24017324:	eddf 7ad3 	vldr	s15, [pc, #844]	; 24017674 <tTString_tick+0x3e0>
        x->prevBarPosSmoothVol = barPosSmoothVol;
24017328:	ed84 8a48 	vstr	s16, [r4, #288]	; 0x120
        if (differenceFastSmooth < 0.0001f)
2401732c:	eeb4 0ae7 	vcmpe.f32	s0, s15
24017330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017334:	f140 8359 	bpl.w	240179ea <tTString_tick+0x756>
        	volCut = ((differenceFastSmooth - 0.00001f) * 1111.111111111111111f);
24017338:	eddf 6acf 	vldr	s13, [pc, #828]	; 24017678 <tTString_tick+0x3e4>
2401733c:	ed9f 7acf 	vldr	s14, [pc, #828]	; 2401767c <tTString_tick+0x3e8>
24017340:	ee30 8a66 	vsub.f32	s16, s0, s13
24017344:	eddf 7ace 	vldr	s15, [pc, #824]	; 24017680 <tTString_tick+0x3ec>
24017348:	ee28 8a07 	vmul.f32	s16, s16, s14
2401734c:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
    Lfloat currentBump = barPosSmoothed * x->windingsPerInch;
24017350:	edd4 9a5b 	vldr	s19, [r4, #364]	; 0x16c
    Lfloat bumpDifference = fastabsf(currentBump - x->lastBump);
24017354:	ed94 0a3f 	vldr	s0, [r4, #252]	; 0xfc
    Lfloat currentBump = barPosSmoothed * x->windingsPerInch;
24017358:	ee68 9aa9 	vmul.f32	s19, s17, s19
    Lfloat bumpDifference = fastabsf(currentBump - x->lastBump);
2401735c:	ee39 0ac0 	vsub.f32	s0, s19, s0
24017360:	f7fd fb52 	bl	24014a08 <fastabsf>
24017364:	eef0 7a40 	vmov.f32	s15, s0
    barDifference = LEAF_clip(0.0f, barDifference*2.0f, 1.0f);
24017368:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    x->prevBarPosSmoothed = barPosSmoothed;
2401736c:	edc4 8a4a 	vstr	s17, [r4, #296]	; 0x128
    barDifference = LEAF_clip(0.0f, barDifference*2.0f, 1.0f);
24017370:	ee79 0a09 	vadd.f32	s1, s18, s18
24017374:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 24017680 <tTString_tick+0x3ec>
    Lfloat bumpDifference = fastabsf(currentBump - x->lastBump);
24017378:	eef0 8a67 	vmov.f32	s17, s15
    barDifference = LEAF_clip(0.0f, barDifference*2.0f, 1.0f);
2401737c:	f7fd fc5c 	bl	24014c38 <LEAF_clip>
    x->slideAmount = tSlide_tick(&x->slide, barDifference);
24017380:	f104 0048 	add.w	r0, r4, #72	; 0x48
24017384:	f7fa fdfe 	bl	24011f84 <tSlide_tick>
    if (x->wound)
24017388:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    x->slideAmount = tSlide_tick(&x->slide, barDifference);
2401738c:	ed84 0a30 	vstr	s0, [r4, #192]	; 0xc0
    if (x->wound)
24017390:	2b00      	cmp	r3, #0
24017392:	f000 83a9 	beq.w	24017ae8 <tTString_tick+0x854>
		if (bumpDifference > 1.0f)
24017396:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
2401739a:	eef4 8ac9 	vcmpe.f32	s17, s18
2401739e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240173a2:	f300 8325 	bgt.w	240179f0 <tTString_tick+0x75c>
			x->bumpOsc = 0;
240173a6:	2300      	movs	r3, #0
			tExpSmooth_setVal(&x->barPulse, 1.0f);
240173a8:	f104 07dc 	add.w	r7, r4, #220	; 0xdc
			tSlide_setDest(&x->barPulseSlide, 1.0f);
240173ac:	f504 768a 	add.w	r6, r4, #276	; 0x114
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
240173b0:	f504 7584 	add.w	r5, r4, #264	; 0x108
			x->bumpOsc = 0;
240173b4:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
		if (x->sampleCount < 3000)
240173b8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
240173bc:	f640 32b7 	movw	r2, #2999	; 0xbb7
240173c0:	4293      	cmp	r3, r2
240173c2:	f240 835e 	bls.w	24017a82 <tTString_tick+0x7ee>
			tSlide_setDest(&x->barSmooth, 5.0f);
240173c6:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
240173ca:	4628      	mov	r0, r5
240173cc:	f7fa fda6 	bl	24011f1c <tSlide_setDest>
		Lfloat barFreq = tSlide_tickNoInput(&x->barSmooth);
240173d0:	4628      	mov	r0, r5
		tSVF_setFreq(&x->barResonator, barFreq);
240173d2:	f104 05e8 	add.w	r5, r4, #232	; 0xe8
		Lfloat barFreq = tSlide_tickNoInput(&x->barSmooth);
240173d6:	f7fa fda5 	bl	24011f24 <tSlide_tickNoInput>
240173da:	eef0 9a40 	vmov.f32	s19, s0
		tSVF_setFreq(&x->barResonator, barFreq);
240173de:	4628      	mov	r0, r5
240173e0:	f7fb f9c4 	bl	2401276c <tSVF_setFreq>
		x->slideNoise = x->feedbackNoise;
240173e4:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
		Lfloat pulseVal = tSlide_tickNoInput(&x->barPulseSlide);
240173e8:	4630      	mov	r0, r6
		x->slideNoise = x->feedbackNoise;
240173ea:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
		Lfloat pulseVal = tSlide_tickNoInput(&x->barPulseSlide);
240173ee:	f7fa fd99 	bl	24011f24 <tSlide_tickNoInput>
		if (pulseVal > .99f)
240173f2:	eddf 7aa4 	vldr	s15, [pc, #656]	; 24017684 <tTString_tick+0x3f0>
		Lfloat pulseVal = tSlide_tickNoInput(&x->barPulseSlide);
240173f6:	eef0 8a40 	vmov.f32	s17, s0
		if (pulseVal > .99f)
240173fa:	eeb4 0ae7 	vcmpe.f32	s0, s15
240173fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017402:	f300 83ad 	bgt.w	24017b60 <tTString_tick+0x8cc>
		x->slideNoise *= pulseVal;
24017406:	edd4 7a34 	vldr	s15, [r4, #208]	; 0xd0
		x->slideNoise *= tExpSmooth_tick(&x->barPulse);
2401740a:	4638      	mov	r0, r7
		x->slideNoise *= pulseVal;
2401740c:	ee67 7aa8 	vmul.f32	s15, s15, s17
24017410:	edc4 7a34 	vstr	s15, [r4, #208]	; 0xd0
		x->slideNoise *= tExpSmooth_tick(&x->barPulse);
24017414:	f7fa fd48 	bl	24011ea8 <tExpSmooth_tick>
24017418:	edd4 7a34 	vldr	s15, [r4, #208]	; 0xd0
		Lfloat tempSlideNoise2 = fast_tanh5(tSVF_tick(&x->barResonator, tempSlideNoise1)*x->barDrive);
2401741c:	4628      	mov	r0, r5
		x->slideNoise *= tExpSmooth_tick(&x->barPulse);
2401741e:	ee60 8a27 	vmul.f32	s17, s0, s15
		Lfloat tempSlideNoise2 = fast_tanh5(tSVF_tick(&x->barResonator, tempSlideNoise1)*x->barDrive);
24017422:	eeb0 0a68 	vmov.f32	s0, s17
		x->slideNoise *= tExpSmooth_tick(&x->barPulse);
24017426:	edc4 8a34 	vstr	s17, [r4, #208]	; 0xd0
		Lfloat tempSlideNoise2 = fast_tanh5(tSVF_tick(&x->barResonator, tempSlideNoise1)*x->barDrive);
2401742a:	f7fb f969 	bl	24012700 <tSVF_tick>
2401742e:	edd4 7a4c 	vldr	s15, [r4, #304]	; 0x130
24017432:	ee20 0a27 	vmul.f32	s0, s0, s15
24017436:	f7fd fc57 	bl	24014ce8 <fast_tanh5>
		if (barFreq < 300.0f)
2401743a:	eddf 7a93 	vldr	s15, [pc, #588]	; 24017688 <tTString_tick+0x3f4>
		Lfloat tempSlideNoise2 = fast_tanh5(tSVF_tick(&x->barResonator, tempSlideNoise1)*x->barDrive);
2401743e:	eeb0 9a40 	vmov.f32	s18, s0
		if (barFreq < 300.0f)
24017442:	eef4 9ae7 	vcmpe.f32	s19, s15
24017446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401744a:	f100 837a 	bmi.w	24017b42 <tTString_tick+0x8ae>
		Lfloat filterFade = 1.0f;
2401744e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
		x->slideNoise = ((tempSlideNoise1 * dryAmount) + (tempSlideNoise2 * filterAmount * filterFade));// * x->slideAmount;
24017452:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
		x->slideNoise *= x->muted;
24017456:	edd4 7a51 	vldr	s15, [r4, #324]	; 0x144
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
2401745a:	f504 7086 	add.w	r0, r4, #268	; 0x10c
		x->slideNoise = ((tempSlideNoise1 * dryAmount) + (tempSlideNoise2 * filterAmount * filterFade));// * x->slideAmount;
2401745e:	ee29 9a07 	vmul.f32	s18, s18, s14
24017462:	eee9 8a00 	vfma.f32	s17, s18, s0
		x->slideNoise *= x->muted;
24017466:	ee28 0aa7 	vmul.f32	s0, s17, s15
2401746a:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
2401746e:	f7fb fa6f 	bl	24012950 <tHighpass_tick>
		x->slideNoise = tSVF_tick(&x->barLP, x->slideNoise * x->slideGain * volCut);
24017472:	edd4 7a35 	vldr	s15, [r4, #212]	; 0xd4
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
24017476:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = tSVF_tick(&x->barLP, x->slideNoise * x->slideGain * volCut);
2401747a:	f504 7088 	add.w	r0, r4, #272	; 0x110
2401747e:	ee68 7a27 	vmul.f32	s15, s16, s15
24017482:	ee27 0a80 	vmul.f32	s0, s15, s0
24017486:	f7fb f93b 	bl	24012700 <tSVF_tick>
		x->slideNoise = x->slideNoise * x->slideGain;
2401748a:	edd4 7a35 	vldr	s15, [r4, #212]	; 0xd4
    for (int i = 0; i < x->oversampling; i++)
2401748e:	6863      	ldr	r3, [r4, #4]
		x->slideNoise = x->slideNoise * x->slideGain;
24017490:	ee20 0a27 	vmul.f32	s0, s0, s15
    for (int i = 0; i < x->oversampling; i++)
24017494:	2b00      	cmp	r3, #0
		x->slideNoise = x->slideNoise * x->slideGain;
24017496:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
    for (int i = 0; i < x->oversampling; i++)
2401749a:	f340 834b 	ble.w	24017b34 <tTString_tick+0x8a0>
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
2401749e:	f104 0350 	add.w	r3, r4, #80	; 0x50
        x->output = LEAF_clip(-1.0f, (allpassOut * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
240174a2:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
        tLagrangeDelay_setDelay(&x->delay, currentDelay - x->tensionAmount - (x->allpassDelay * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
240174a6:	f104 0614 	add.w	r6, r4, #20
        tLagrangeDelay_setDelay(&x->delayP,currentDelay - x->tensionAmount - (x->allpassDelayP * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
240174aa:	f104 0518 	add.w	r5, r4, #24
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
240174ae:	9304      	str	r3, [sp, #16]
    	Lfloat tension = tExpSmooth_tick(&x->tensionSmoother) * x->tensionGain * x->baseDelay;
240174b0:	f104 034c 	add.w	r3, r4, #76	; 0x4c
240174b4:	ed9f 9a75 	vldr	s18, [pc, #468]	; 2401768c <tTString_tick+0x3f8>
        Lfloat prefilter4 = tSVF_tick(&x->peakFilt, prefilter3);// + x->slideNoise;
240174b8:	f04f 0900 	mov.w	r9, #0
    	Lfloat tension = tExpSmooth_tick(&x->tensionSmoother) * x->tensionGain * x->baseDelay;
240174bc:	9305      	str	r3, [sp, #20]
        Lfloat pickNoiseSound = tNoise_tick(&x->pickNoiseSource) * tExpSmooth_tick(&x->pickNoise);
240174be:	f504 73c0 	add.w	r3, r4, #384	; 0x180
240174c2:	9306      	str	r3, [sp, #24]
240174c4:	f504 73be 	add.w	r3, r4, #380	; 0x17c
240174c8:	9307      	str	r3, [sp, #28]
        Lfloat filterOut = tCookOnePole_tick(&x->reflFilt, x->output);
240174ca:	f104 0324 	add.w	r3, r4, #36	; 0x24
240174ce:	9300      	str	r3, [sp, #0]
        Lfloat filterOutP = tCookOnePole_tick(&x->reflFiltP, x->outputP);
240174d0:	f104 0328 	add.w	r3, r4, #40	; 0x28
240174d4:	9303      	str	r3, [sp, #12]
        Lfloat pickupInput = x->pickupPos + (tCycle_tick(&x->pickupModOsc) * x->pickupModOscAmp);
240174d6:	f104 03ac 	add.w	r3, r4, #172	; 0xac
240174da:	9301      	str	r3, [sp, #4]
		Lfloat inputSample = tFeedbackLeveler_tick(&x->feedback, tHighpass_tick(&x->dcBlock, filterOut + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
240174dc:	f504 73ac 	add.w	r3, r4, #344	; 0x158
240174e0:	9302      	str	r3, [sp, #8]
240174e2:	f104 031c 	add.w	r3, r4, #28
240174e6:	9308      	str	r3, [sp, #32]
		Lfloat inputSampleP = tFeedbackLeveler_tick(&x->feedbackP, tHighpass_tick(&x->dcBlockP, filterOutP + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
240174e8:	f504 73ae 	add.w	r3, r4, #348	; 0x15c
240174ec:	9309      	str	r3, [sp, #36]	; 0x24
240174ee:	f104 0320 	add.w	r3, r4, #32
240174f2:	930a      	str	r3, [sp, #40]	; 0x28
        Lfloat outputPfilt = tSVF_tick(&x->lowpassP, x->pickupOutP);
240174f4:	f104 0368 	add.w	r3, r4, #104	; 0x68
240174f8:	930b      	str	r3, [sp, #44]	; 0x2c
        outputPfilt = tSVF_tick(&x->highpassP, outputPfilt);
240174fa:	f104 036c 	add.w	r3, r4, #108	; 0x6c
240174fe:	930c      	str	r3, [sp, #48]	; 0x30
        Lfloat prefilter2 = tSVF_tick(&x->pickupFilter2, prefilter);// + x->slideNoise;
24017500:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
24017504:	930d      	str	r3, [sp, #52]	; 0x34
        Lfloat prefilter3 = tSVF_tick(&x->pickupFilter, prefilter2);// + x->slideNoise;
24017506:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
2401750a:	930e      	str	r3, [sp, #56]	; 0x38
        Lfloat prefilter4 = tSVF_tick(&x->peakFilt, prefilter3);// + x->slideNoise;
2401750c:	f504 73c4 	add.w	r3, r4, #392	; 0x188
24017510:	930f      	str	r3, [sp, #60]	; 0x3c
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
24017512:	9804      	ldr	r0, [sp, #16]
        Lfloat halfCurrentDelay = currentDelay * 0.5f;
24017514:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
24017518:	f7fa fcc6 	bl	24011ea8 <tExpSmooth_tick>
    	Lfloat tension = tExpSmooth_tick(&x->tensionSmoother) * x->tensionGain * x->baseDelay;
2401751c:	9805      	ldr	r0, [sp, #20]
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
2401751e:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    	Lfloat tension = tExpSmooth_tick(&x->tensionSmoother) * x->tensionGain * x->baseDelay;
24017522:	f7fa fcc1 	bl	24011ea8 <tExpSmooth_tick>
24017526:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
2401752a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
        tLagrangeDelay_setDelay(&x->delay, currentDelay - x->tensionAmount - (x->allpassDelay * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
2401752e:	4630      	mov	r0, r6
    	x->tensionAmount = tension * 0.01f;
24017530:	ed94 5a11 	vldr	s10, [r4, #68]	; 0x44
24017534:	fec7 6aa6 	vmaxnm.f32	s13, s15, s13
24017538:	edd4 5a17 	vldr	s11, [r4, #92]	; 0x5c
2401753c:	ee67 7a85 	vmul.f32	s15, s15, s10
24017540:	ed9f 5a53 	vldr	s10, [pc, #332]	; 24017690 <tTString_tick+0x3fc>
24017544:	ed94 6a53 	vldr	s12, [r4, #332]	; 0x14c
24017548:	ed94 7a4f 	vldr	s14, [r4, #316]	; 0x13c
2401754c:	ee67 7a85 	vmul.f32	s15, s15, s10
        if (currentDelay > x->maxDelay)
24017550:	ed94 5a54 	vldr	s10, [r4, #336]	; 0x150
24017554:	ee27 7a09 	vmul.f32	s14, s14, s18
24017558:	eeb8 da45 	vcvt.f32.u32	s26, s10
    	x->tensionAmount = tension * 0.01f;
2401755c:	ee67 7a80 	vmul.f32	s15, s15, s0
24017560:	fe8d da66 	vminnm.f32	s26, s26, s13
24017564:	eeb0 0a4d 	vmov.f32	s0, s26
24017568:	edc4 7a28 	vstr	s15, [r4, #160]	; 0xa0
        Lfloat halfCurrentDelay = currentDelay * 0.5f;
2401756c:	eef1 8a4d 	vneg.f32	s17, s26
24017570:	ee2d 8a08 	vmul.f32	s16, s26, s16
        tLagrangeDelay_setDelay(&x->delay, currentDelay - x->tensionAmount - (x->allpassDelay * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
24017574:	eea5 0ac6 	vfms.f32	s0, s11, s12
24017578:	eead 0a47 	vfms.f32	s0, s26, s14
2401757c:	ee30 0a67 	vsub.f32	s0, s0, s15
24017580:	f7f9 fd16 	bl	24010fb0 <tLagrangeDelay_setDelay>
        tLagrangeDelay_setDelay(&x->delayP,currentDelay - x->tensionAmount - (x->allpassDelayP * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
24017584:	eeb0 0a4d 	vmov.f32	s0, s26
24017588:	ed94 6a18 	vldr	s12, [r4, #96]	; 0x60
2401758c:	4628      	mov	r0, r5
2401758e:	edd4 6a53 	vldr	s13, [r4, #332]	; 0x14c
24017592:	ed94 7a28 	vldr	s14, [r4, #160]	; 0xa0
24017596:	eea6 0a66 	vfms.f32	s0, s12, s13
2401759a:	edd4 7a4f 	vldr	s15, [r4, #316]	; 0x13c
2401759e:	ee67 7a89 	vmul.f32	s15, s15, s18
240175a2:	ee30 0a47 	vsub.f32	s0, s0, s14
240175a6:	eea8 0aa7 	vfma.f32	s0, s17, s15
240175aa:	f7f9 fd01 	bl	24010fb0 <tLagrangeDelay_setDelay>
        Lfloat pickNoiseSound = tNoise_tick(&x->pickNoiseSource) * tExpSmooth_tick(&x->pickNoise);
240175ae:	9806      	ldr	r0, [sp, #24]
240175b0:	f7fe fb7c 	bl	24015cac <tNoise_tick>
240175b4:	eef0 8a40 	vmov.f32	s17, s0
240175b8:	9807      	ldr	r0, [sp, #28]
240175ba:	f7fa fc75 	bl	24011ea8 <tExpSmooth_tick>
        tLagrangeDelay_addTo(&x->delay,pickNoiseSound * 2.0f, (uint32_t)x->pluckPoint_forInput);
240175be:	edd4 7a61 	vldr	s15, [r4, #388]	; 0x184
        Lfloat pickNoiseSound = tNoise_tick(&x->pickNoiseSource) * tExpSmooth_tick(&x->pickNoise);
240175c2:	ee68 8a80 	vmul.f32	s17, s17, s0
        tLagrangeDelay_addTo(&x->delay,pickNoiseSound * 2.0f, (uint32_t)x->pluckPoint_forInput);
240175c6:	4630      	mov	r0, r6
240175c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240175cc:	ee78 8aa8 	vadd.f32	s17, s17, s17
240175d0:	ee17 1a90 	vmov	r1, s15
240175d4:	eeb0 0a68 	vmov.f32	s0, s17
240175d8:	f7f9 fe02 	bl	240111e0 <tLagrangeDelay_addTo>
        tLagrangeDelay_addTo(&x->delayP,pickNoiseSound * 2.0f, (uint32_t)x->pluckPoint_forInput);
240175dc:	edd4 7a61 	vldr	s15, [r4, #388]	; 0x184
240175e0:	eeb0 0a68 	vmov.f32	s0, s17
240175e4:	4628      	mov	r0, r5
240175e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240175ea:	ee17 1a90 	vmov	r1, s15
240175ee:	f7f9 fdf7 	bl	240111e0 <tLagrangeDelay_addTo>
        Lfloat filterOut = tCookOnePole_tick(&x->reflFilt, x->output);
240175f2:	9800      	ldr	r0, [sp, #0]
240175f4:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
240175f8:	f7fa ff54 	bl	240124a4 <tCookOnePole_tick>
        Lfloat filterOutP = tCookOnePole_tick(&x->reflFiltP, x->outputP);
240175fc:	9803      	ldr	r0, [sp, #12]
        Lfloat filterOut = tCookOnePole_tick(&x->reflFilt, x->output);
240175fe:	eef0 ca40 	vmov.f32	s25, s0
        Lfloat filterOutP = tCookOnePole_tick(&x->reflFiltP, x->outputP);
24017602:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
24017606:	f7fa ff4d 	bl	240124a4 <tCookOnePole_tick>
        Lfloat rippleLength = x->rippleRate *  currentDelay;
2401760a:	ed94 ca20 	vldr	s24, [r4, #128]	; 0x80
        Lfloat delayOut = tLagrangeDelay_tickOut(&x->delay);
2401760e:	4630      	mov	r0, r6
        Lfloat filterOutP = tCookOnePole_tick(&x->reflFiltP, x->outputP);
24017610:	eef0 8a40 	vmov.f32	s17, s0
        Lfloat rippleLength = x->rippleRate *  currentDelay;
24017614:	ee2d ca0c 	vmul.f32	s24, s26, s24
        uint32_t rippleLengthInt = (uint32_t) rippleLength;
24017618:	eebc aacc 	vcvt.u32.f32	s20, s24
        Lfloat rippleLengthAlpha = rippleLength - rippleLengthInt;
2401761c:	eef8 7a4a 	vcvt.f32.u32	s15, s20
24017620:	ee3c ca67 	vsub.f32	s24, s24, s15
        Lfloat delayOut = tLagrangeDelay_tickOut(&x->delay);
24017624:	f7f9 fc92 	bl	24010f4c <tLagrangeDelay_tickOut>
        Lfloat delayOutP = tLagrangeDelay_tickOut(&x->delayP);
24017628:	4628      	mov	r0, r5
        Lfloat delayOut = tLagrangeDelay_tickOut(&x->delay);
2401762a:	eeb0 ea40 	vmov.f32	s28, s0
        Lfloat delayOutP = tLagrangeDelay_tickOut(&x->delayP);
2401762e:	f7f9 fc8d 	bl	24010f4c <tLagrangeDelay_tickOut>
        Lfloat rippleOut1 = (tLagrangeDelay_tapOutInterpolated(&x->delay,rippleLengthInt,rippleLengthAlpha) * x->r);
24017632:	ee1a 1a10 	vmov	r1, s20
        Lfloat delayOutP = tLagrangeDelay_tickOut(&x->delayP);
24017636:	eef0 da40 	vmov.f32	s27, s0
        Lfloat rippleOut1 = (tLagrangeDelay_tapOutInterpolated(&x->delay,rippleLengthInt,rippleLengthAlpha) * x->r);
2401763a:	4630      	mov	r0, r6
2401763c:	eeb0 0a4c 	vmov.f32	s0, s24
24017640:	f7f9 fd6a 	bl	24011118 <tLagrangeDelay_tapOutInterpolated>
24017644:	eef0 7a40 	vmov.f32	s15, s0
24017648:	ed94 7a1f 	vldr	s14, [r4, #124]	; 0x7c
        Lfloat rippleOut1P = (tLagrangeDelay_tapOutInterpolated(&x->delayP,rippleLengthInt,rippleLengthAlpha) * x->r);
2401764c:	eeb0 0a4c 	vmov.f32	s0, s24
24017650:	ee1a 1a10 	vmov	r1, s20
24017654:	4628      	mov	r0, r5
        Lfloat rippleOut = delayOut + rippleOut1;
24017656:	eea7 ea87 	vfma.f32	s28, s15, s14
        Lfloat rippleOut1P = (tLagrangeDelay_tapOutInterpolated(&x->delayP,rippleLengthInt,rippleLengthAlpha) * x->r);
2401765a:	f7f9 fd5d 	bl	24011118 <tLagrangeDelay_tapOutInterpolated>
        Lfloat rippleOutP = delayOutP + rippleOut1P;
2401765e:	edd4 7a1f 	vldr	s15, [r4, #124]	; 0x7c
        if (x->inharmonic)
24017662:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        Lfloat rippleOutP = delayOutP + rippleOut1P;
24017666:	eee0 da27 	vfma.f32	s27, s0, s15
        if (x->inharmonic)
2401766a:	2b00      	cmp	r3, #0
2401766c:	f040 8224 	bne.w	24017ab8 <tTString_tick+0x824>
24017670:	e024      	b.n	240176bc <tTString_tick+0x428>
24017672:	bf00      	nop
24017674:	38d1b717 	.word	0x38d1b717
24017678:	3727c5ac 	.word	0x3727c5ac
2401767c:	448ae38e 	.word	0x448ae38e
24017680:	00000000 	.word	0x00000000
24017684:	3f7d70a4 	.word	0x3f7d70a4
24017688:	43960000 	.word	0x43960000
2401768c:	3e22f983 	.word	0x3e22f983
24017690:	3c23d70a 	.word	0x3c23d70a
24017694:	3cb17e4b 	.word	0x3cb17e4b
24017698:	3dd55555 	.word	0x3dd55555
2401769c:	3b0a47ed 	.word	0x3b0a47ed
240176a0:	3bdd2f1b 	.word	0x3bdd2f1b
240176a4:	39f9096c 	.word	0x39f9096c
240176a8:	3d99999a 	.word	0x3d99999a
240176ac:	3a59d777 	.word	0x3a59d777
240176b0:	408bbced 	.word	0x408bbced
240176b4:	3fa66666 	.word	0x3fa66666
240176b8:	42c80000 	.word	0x42c80000
        x->output = LEAF_clip(-1.0f, (allpassOut * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
240176bc:	ed94 7a23 	vldr	s14, [r4, #140]	; 0x8c
240176c0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240176c4:	edd4 0a1d 	vldr	s1, [r4, #116]	; 0x74
240176c8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
240176cc:	edd4 7a1e 	vldr	s15, [r4, #120]	; 0x78
240176d0:	ee60 0a87 	vmul.f32	s1, s1, s14
240176d4:	ee60 0aa7 	vmul.f32	s1, s1, s15
240176d8:	ee60 0a8e 	vmul.f32	s1, s1, s28
240176dc:	f7fd faac 	bl	24014c38 <LEAF_clip>
        x->outputP = LEAF_clip(-1.0f, (allpassOutP * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
240176e0:	ed94 7a23 	vldr	s14, [r4, #140]	; 0x8c
240176e4:	edd4 0a1d 	vldr	s1, [r4, #116]	; 0x74
240176e8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240176ec:	edd4 7a1e 	vldr	s15, [r4, #120]	; 0x78
240176f0:	ee60 0a87 	vmul.f32	s1, s1, s14
        x->output = LEAF_clip(-1.0f, (allpassOut * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
240176f4:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
        x->outputP = LEAF_clip(-1.0f, (allpassOutP * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
240176f8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
240176fc:	ee60 0aa7 	vmul.f32	s1, s1, s15
24017700:	ee60 0aad 	vmul.f32	s1, s1, s27
24017704:	f7fd fa98 	bl	24014c38 <LEAF_clip>
        Lfloat pickupInput = x->pickupPos + (tCycle_tick(&x->pickupModOsc) * x->pickupModOscAmp);
24017708:	9801      	ldr	r0, [sp, #4]
        x->outputP = LEAF_clip(-1.0f, (allpassOutP * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
2401770a:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
        Lfloat positionMin = (x->openStringLength * 0.104166666666667f);
2401770e:	ed94 ca3d 	vldr	s24, [r4, #244]	; 0xf4
        Lfloat pickupInput = x->pickupPos + (tCycle_tick(&x->pickupModOsc) * x->pickupModOscAmp);
24017712:	edd4 da27 	vldr	s27, [r4, #156]	; 0x9c
24017716:	f7fd ff13 	bl	24015540 <tCycle_tick>
2401771a:	edd4 7a2d 	vldr	s15, [r4, #180]	; 0xb4
        Lfloat pickupPos = LEAF_mapFromZeroToOneInput(pickupInput, positionMin, positionMax);
2401771e:	eee0 da27 	vfma.f32	s27, s0, s15
24017722:	ed5f 7a24 	vldr	s15, [pc, #-144]	; 24017694 <tTString_tick+0x400>
24017726:	ee2c 1a27 	vmul.f32	s2, s24, s15
2401772a:	ed5f 7a25 	vldr	s15, [pc, #-148]	; 24017698 <tTString_tick+0x404>
2401772e:	ee6c 0a27 	vmul.f32	s1, s24, s15
24017732:	eeb0 0a6d 	vmov.f32	s0, s27
24017736:	f7fd f921 	bl	2401497c <LEAF_mapFromZeroToOneInput>
        while (pickupPos > halfCurrentDelay)
2401773a:	eeb4 8ac0 	vcmpe.f32	s16, s0
        Lfloat pickupPos = LEAF_mapFromZeroToOneInput(pickupInput, positionMin, positionMax);
2401773e:	eef0 7a40 	vmov.f32	s15, s0
        while (pickupPos > halfCurrentDelay)
24017742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017746:	f140 81c8 	bpl.w	24017ada <tTString_tick+0x846>
        uint32_t backwards = 0;
2401774a:	2300      	movs	r3, #0
        	pickupPos = pickupPos - halfCurrentDelay;
2401774c:	ee77 7ac8 	vsub.f32	s15, s15, s16
        	backwards = !backwards;
24017750:	f083 0301 	eor.w	r3, r3, #1
        while (pickupPos > halfCurrentDelay)
24017754:	eeb4 8ae7 	vcmpe.f32	s16, s15
24017758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401775c:	d4f6      	bmi.n	2401774c <tTString_tick+0x4b8>
        while (pickupPos < 0.0f)
2401775e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24017762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017766:	d508      	bpl.n	2401777a <tTString_tick+0x4e6>
        	pickupPos = pickupPos + halfCurrentDelay;
24017768:	ee77 7a88 	vadd.f32	s15, s15, s16
        	backwards = !backwards;
2401776c:	f083 0301 	eor.w	r3, r3, #1
        while (pickupPos < 0.0f)
24017770:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24017774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017778:	d4f6      	bmi.n	24017768 <tTString_tick+0x4d4>
        if (backwards)
2401777a:	2b00      	cmp	r3, #0
2401777c:	f000 8189 	beq.w	24017a92 <tTString_tick+0x7fe>
        	pickupPosFinal = halfCurrentDelay - pickupPos;
24017780:	ee78 6a67 	vsub.f32	s13, s16, s15
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
24017784:	ee79 dac8 	vsub.f32	s27, s19, s16
        	inversePickupPos = halfCurrentDelay + pickupPos;
24017788:	ee38 da27 	vadd.f32	s26, s16, s15
        x->pickup_Ratio = pickupPosFinal / halfCurrentDelay;
2401778c:	ee86 7a88 	vdiv.f32	s14, s13, s16
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
24017790:	ee7d daa7 	vadd.f32	s27, s27, s15
        uint32_t pickupPosInt = (uint32_t) pickupPosFinal;
24017794:	eefc 7ae6 	vcvt.u32.f32	s15, s13
24017798:	ee17 7a90 	vmov	r7, s15
        Lfloat pickupPosAlpha = pickupPosFinal - pickupPosInt;
2401779c:	eef8 7a67 	vcvt.f32.u32	s15, s15
        uint32_t pickupPosIntPlusOne = pickupPosInt + 1;
240177a0:	f107 0a01 	add.w	sl, r7, #1
        Lfloat pickupPosAlpha = pickupPosFinal - pickupPosInt;
240177a4:	ee36 8ae7 	vsub.f32	s16, s13, s15
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
240177a8:	ee7d daa7 	vadd.f32	s27, s27, s15
        uint32_t inversePickupPosInt = (uint32_t) inversePickupPos;
240177ac:	eefc 7acd 	vcvt.u32.f32	s15, s26
240177b0:	ed84 7a5e 	vstr	s14, [r4, #376]	; 0x178
        Lfloat oneMinusinversePickupPosAlpha = 1.0f - inversePickupPosAlpha;
240177b4:	ee39 eacd 	vsub.f32	s28, s19, s26
        Lfloat rightgoing = tLagrangeDelay_tapOut(&x->delay, pickupPosInt) * oneMinusPickupPosAlpha;
240177b8:	4639      	mov	r1, r7
240177ba:	4630      	mov	r0, r6
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
240177bc:	ed1f fa49 	vldr	s30, [pc, #-292]	; 2401769c <tTString_tick+0x408>
        uint32_t inversePickupPosInt = (uint32_t) inversePickupPos;
240177c0:	ee17 8a90 	vmov	r8, s15
        Lfloat inversePickupPosAlpha = inversePickupPos - inversePickupPosInt;
240177c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
240177c8:	ed5f fa4b 	vldr	s31, [pc, #-300]	; 240176a0 <tTString_tick+0x40c>
    for (int i = 0; i < x->oversampling; i++)
240177cc:	f109 0901 	add.w	r9, r9, #1
        uint32_t inversePickupPosIntPlusOne = inversePickupPosInt + 1;
240177d0:	f108 0b01 	add.w	fp, r8, #1
240177d4:	ed5f ea4d 	vldr	s29, [pc, #-308]	; 240176a4 <tTString_tick+0x410>
        Lfloat inversePickupPosAlpha = inversePickupPos - inversePickupPosInt;
240177d8:	ee3d da67 	vsub.f32	s26, s26, s15
240177dc:	ed1f aa4e 	vldr	s20, [pc, #-312]	; 240176a8 <tTString_tick+0x414>
        Lfloat oneMinusinversePickupPosAlpha = 1.0f - inversePickupPosAlpha;
240177e0:	ee3e ea27 	vadd.f32	s28, s28, s15
        Lfloat rightgoing = tLagrangeDelay_tapOut(&x->delay, pickupPosInt) * oneMinusPickupPosAlpha;
240177e4:	f7f9 fc8c 	bl	24011100 <tLagrangeDelay_tapOut>
        rightgoing += tLagrangeDelay_tapOut(&x->delay, pickupPosIntPlusOne) * pickupPosAlpha;
240177e8:	4651      	mov	r1, sl
240177ea:	4630      	mov	r0, r6
        Lfloat rightgoing = tLagrangeDelay_tapOut(&x->delay, pickupPosInt) * oneMinusPickupPosAlpha;
240177ec:	eeb0 ba40 	vmov.f32	s22, s0
        rightgoing += tLagrangeDelay_tapOut(&x->delay, pickupPosIntPlusOne) * pickupPosAlpha;
240177f0:	f7f9 fc86 	bl	24011100 <tLagrangeDelay_tapOut>
240177f4:	ee60 5a08 	vmul.f32	s11, s0, s16
        Lfloat leftgoing = tLagrangeDelay_tapOut(&x->delay, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
240177f8:	4641      	mov	r1, r8
240177fa:	4630      	mov	r0, r6
240177fc:	ed5f aa55 	vldr	s21, [pc, #-340]	; 240176ac <tTString_tick+0x418>
        x->pickupOut =  (pickupNonLinearity(rightgoing) - pickupNonLinearity(leftgoing));
24017800:	ed1f ca55 	vldr	s24, [pc, #-340]	; 240176b0 <tTString_tick+0x41c>
        rightgoing += tLagrangeDelay_tapOut(&x->delay, pickupPosIntPlusOne) * pickupPosAlpha;
24017804:	eeeb 5a2d 	vfma.f32	s11, s22, s27
24017808:	eef0 ba65 	vmov.f32	s23, s11
        Lfloat leftgoing = tLagrangeDelay_tapOut(&x->delay, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
2401780c:	f7f9 fc78 	bl	24011100 <tLagrangeDelay_tapOut>
        leftgoing += tLagrangeDelay_tapOut(&x->delay, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
24017810:	4659      	mov	r1, fp
24017812:	4630      	mov	r0, r6
        Lfloat leftgoing = tLagrangeDelay_tapOut(&x->delay, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
24017814:	eeb0 ba40 	vmov.f32	s22, s0
        leftgoing += tLagrangeDelay_tapOut(&x->delay, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
24017818:	f7f9 fc72 	bl	24011100 <tLagrangeDelay_tapOut>
	x = x * 2.0f;
2401781c:	ee7b 5aab 	vadd.f32	s11, s23, s23
        rightgoing = tLagrangeDelay_tapOut(&x->delayP, pickupPosInt) * oneMinusPickupPosAlpha;
24017820:	4639      	mov	r1, r7
        leftgoing += tLagrangeDelay_tapOut(&x->delay, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
24017822:	ee20 6a0d 	vmul.f32	s12, s0, s26
        rightgoing = tLagrangeDelay_tapOut(&x->delayP, pickupPosInt) * oneMinusPickupPosAlpha;
24017826:	4628      	mov	r0, r5
24017828:	eeb0 3a4a 	vmov.f32	s6, s20
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
2401782c:	ee65 4aa5 	vmul.f32	s9, s11, s11
        leftgoing += tLagrangeDelay_tapOut(&x->delay, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
24017830:	eeab 6a0e 	vfma.f32	s12, s22, s28
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
24017834:	ee25 5aa4 	vmul.f32	s10, s11, s9
24017838:	ee65 7a0f 	vmul.f32	s15, s10, s30
2401783c:	ee25 5a85 	vmul.f32	s10, s11, s10
	x = x * 2.0f;
24017840:	ee36 6a06 	vadd.f32	s12, s12, s12
24017844:	eee4 7aaf 	vfma.f32	s15, s9, s31
24017848:	eea5 3a2a 	vfma.f32	s6, s10, s21
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
2401784c:	ee66 3a06 	vmul.f32	s7, s12, s12
24017850:	ee26 4a2a 	vmul.f32	s8, s12, s21
24017854:	ee66 4a23 	vmul.f32	s9, s12, s7
24017858:	eee5 7a2e 	vfma.f32	s15, s10, s29
	return out;
2401785c:	ee24 5ac6 	vnmul.f32	s10, s9, s12
24017860:	eee6 7a4a 	vfms.f32	s15, s12, s20
24017864:	eee5 7a83 	vfma.f32	s15, s11, s6
24017868:	eee3 7aef 	vfms.f32	s15, s7, s31
2401786c:	eee4 7acf 	vfms.f32	s15, s9, s30
24017870:	eee5 7a2e 	vfma.f32	s15, s10, s29
24017874:	eee5 7a04 	vfma.f32	s15, s10, s8
        x->pickupOut =  (pickupNonLinearity(rightgoing) - pickupNonLinearity(leftgoing));
24017878:	ee67 7a8c 	vmul.f32	s15, s15, s24
2401787c:	edc4 7a25 	vstr	s15, [r4, #148]	; 0x94
        rightgoing = tLagrangeDelay_tapOut(&x->delayP, pickupPosInt) * oneMinusPickupPosAlpha;
24017880:	f7f9 fc3e 	bl	24011100 <tLagrangeDelay_tapOut>
		rightgoing += tLagrangeDelay_tapOut(&x->delayP, pickupPosIntPlusOne) * pickupPosAlpha;
24017884:	4651      	mov	r1, sl
24017886:	4628      	mov	r0, r5
        rightgoing = tLagrangeDelay_tapOut(&x->delayP, pickupPosInt) * oneMinusPickupPosAlpha;
24017888:	eeb0 ba40 	vmov.f32	s22, s0
		rightgoing += tLagrangeDelay_tapOut(&x->delayP, pickupPosIntPlusOne) * pickupPosAlpha;
2401788c:	f7f9 fc38 	bl	24011100 <tLagrangeDelay_tapOut>
24017890:	ee60 5a08 	vmul.f32	s11, s0, s16
		leftgoing = tLagrangeDelay_tapOut(&x->delayP, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
24017894:	4641      	mov	r1, r8
24017896:	4628      	mov	r0, r5
		rightgoing += tLagrangeDelay_tapOut(&x->delayP, pickupPosIntPlusOne) * pickupPosAlpha;
24017898:	eeeb 5a2d 	vfma.f32	s11, s22, s27
2401789c:	eeb0 8a65 	vmov.f32	s16, s11
		leftgoing = tLagrangeDelay_tapOut(&x->delayP, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
240178a0:	f7f9 fc2e 	bl	24011100 <tLagrangeDelay_tapOut>
		leftgoing += tLagrangeDelay_tapOut(&x->delayP, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
240178a4:	4659      	mov	r1, fp
240178a6:	4628      	mov	r0, r5
		leftgoing = tLagrangeDelay_tapOut(&x->delayP, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
240178a8:	eef0 da40 	vmov.f32	s27, s0
		leftgoing += tLagrangeDelay_tapOut(&x->delayP, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
240178ac:	f7f9 fc28 	bl	24011100 <tLagrangeDelay_tapOut>
	x = x * 2.0f;
240178b0:	ee78 5a08 	vadd.f32	s11, s16, s16
240178b4:	ed94 4a58 	vldr	s8, [r4, #352]	; 0x160
240178b8:	ed94 5a59 	vldr	s10, [r4, #356]	; 0x164
		leftgoing += tLagrangeDelay_tapOut(&x->delayP, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
240178bc:	ee20 6a0d 	vmul.f32	s12, s0, s26
240178c0:	edd4 7a34 	vldr	s15, [r4, #208]	; 0xd0
240178c4:	eef0 3a4a 	vmov.f32	s7, s20
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
240178c8:	ee65 4aa5 	vmul.f32	s9, s11, s11
		Lfloat inputSample = tFeedbackLeveler_tick(&x->feedback, tHighpass_tick(&x->dcBlock, filterOut + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
240178cc:	9808      	ldr	r0, [sp, #32]
240178ce:	eee4 7a05 	vfma.f32	s15, s8, s10
		leftgoing += tLagrangeDelay_tapOut(&x->delayP, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
240178d2:	eead 6a8e 	vfma.f32	s12, s27, s28
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
240178d6:	ee25 5aa4 	vmul.f32	s10, s11, s9
240178da:	eeb0 0a67 	vmov.f32	s0, s15
240178de:	ee65 7a0f 	vmul.f32	s15, s10, s30
240178e2:	ee25 5a85 	vmul.f32	s10, s11, s10
	x = x * 2.0f;
240178e6:	ee36 6a06 	vadd.f32	s12, s12, s12
240178ea:	eee4 7aaf 	vfma.f32	s15, s9, s31
240178ee:	eee5 3a2a 	vfma.f32	s7, s10, s21
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
240178f2:	ee26 4a06 	vmul.f32	s8, s12, s12
240178f6:	ee66 6a2a 	vmul.f32	s13, s12, s21
		Lfloat inputSample = tFeedbackLeveler_tick(&x->feedback, tHighpass_tick(&x->dcBlock, filterOut + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
240178fa:	ee3c 0a80 	vadd.f32	s0, s25, s0
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
240178fe:	ee64 4a06 	vmul.f32	s9, s8, s12
24017902:	eee5 7a2e 	vfma.f32	s15, s10, s29
	return out;
24017906:	ee24 5ac6 	vnmul.f32	s10, s9, s12
2401790a:	eee6 7a4a 	vfms.f32	s15, s12, s20
2401790e:	eee5 7aa3 	vfma.f32	s15, s11, s7
24017912:	eee4 7a6f 	vfms.f32	s15, s8, s31
24017916:	eee4 7acf 	vfms.f32	s15, s9, s30
2401791a:	eee5 7a2e 	vfma.f32	s15, s10, s29
2401791e:	eee5 7a26 	vfma.f32	s15, s10, s13
		x->pickupOutP =  (pickupNonLinearity(rightgoing) - pickupNonLinearity(leftgoing));
24017922:	ee67 7a8c 	vmul.f32	s15, s15, s24
24017926:	edc4 7a26 	vstr	s15, [r4, #152]	; 0x98
		Lfloat inputSample = tFeedbackLeveler_tick(&x->feedback, tHighpass_tick(&x->dcBlock, filterOut + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
2401792a:	f7fb f811 	bl	24012950 <tHighpass_tick>
2401792e:	9802      	ldr	r0, [sp, #8]
24017930:	f7f9 feee 	bl	24011710 <tFeedbackLeveler_tick>
24017934:	edd4 6a58 	vldr	s13, [r4, #352]	; 0x160
24017938:	ed94 7a59 	vldr	s14, [r4, #356]	; 0x164
2401793c:	eeb0 aa40 	vmov.f32	s20, s0
		Lfloat inputSampleP = tFeedbackLeveler_tick(&x->feedbackP, tHighpass_tick(&x->dcBlockP, filterOutP + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
24017940:	edd4 7a34 	vldr	s15, [r4, #208]	; 0xd0
24017944:	980a      	ldr	r0, [sp, #40]	; 0x28
24017946:	eee6 7a87 	vfma.f32	s15, s13, s14
2401794a:	ee38 0aa7 	vadd.f32	s0, s17, s15
2401794e:	f7fa ffff 	bl	24012950 <tHighpass_tick>
24017952:	9809      	ldr	r0, [sp, #36]	; 0x24
24017954:	f7f9 fedc 	bl	24011710 <tFeedbackLeveler_tick>
24017958:	eeb0 8a40 	vmov.f32	s16, s0
        tLagrangeDelay_tickIn(&x->delay, inputSample);
2401795c:	4630      	mov	r0, r6
2401795e:	eeb0 0a4a 	vmov.f32	s0, s20
24017962:	f7f9 fae5 	bl	24010f30 <tLagrangeDelay_tickIn>
        tLagrangeDelay_tickIn(&x->delayP, inputSampleP);
24017966:	4628      	mov	r0, r5
24017968:	eeb0 0a48 	vmov.f32	s0, s16
2401796c:	f7f9 fae0 	bl	24010f30 <tLagrangeDelay_tickIn>
        Lfloat outputPfilt = tSVF_tick(&x->lowpassP, x->pickupOutP);
24017970:	980b      	ldr	r0, [sp, #44]	; 0x2c
24017972:	ed94 0a26 	vldr	s0, [r4, #152]	; 0x98
24017976:	f7fa fec3 	bl	24012700 <tSVF_tick>
        outputPfilt = tSVF_tick(&x->highpassP, outputPfilt);
2401797a:	980c      	ldr	r0, [sp, #48]	; 0x30
2401797c:	f7fa fec0 	bl	24012700 <tSVF_tick>
        LEAF_crossfade(x->pickupAmount * 2.0f - 1.0f,volumes);
24017980:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
        outputPfilt = tSVF_tick(&x->highpassP, outputPfilt);
24017984:	eeb0 8a40 	vmov.f32	s16, s0
        LEAF_crossfade(x->pickupAmount * 2.0f - 1.0f,volumes);
24017988:	ed94 7a63 	vldr	s14, [r4, #396]	; 0x18c
2401798c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24017990:	a810      	add	r0, sp, #64	; 0x40
24017992:	eea7 0a27 	vfma.f32	s0, s14, s15
24017996:	f7fd f8d7 	bl	24014b48 <LEAF_crossfade>
        Lfloat prefilter = (x->pickupOut + (outputPfilt * x->phantomGain)) * 2.0f;
2401799a:	ed94 7a2a 	vldr	s14, [r4, #168]	; 0xa8
2401799e:	edd4 7a25 	vldr	s15, [r4, #148]	; 0x94
        Lfloat prefilter2 = tSVF_tick(&x->pickupFilter2, prefilter);// + x->slideNoise;
240179a2:	980d      	ldr	r0, [sp, #52]	; 0x34
        Lfloat prefilter = (x->pickupOut + (outputPfilt * x->phantomGain)) * 2.0f;
240179a4:	eee7 7a08 	vfma.f32	s15, s14, s16
240179a8:	ee37 8aa7 	vadd.f32	s16, s15, s15
        Lfloat prefilter2 = tSVF_tick(&x->pickupFilter2, prefilter);// + x->slideNoise;
240179ac:	eeb0 0a48 	vmov.f32	s0, s16
240179b0:	f7fa fea6 	bl	24012700 <tSVF_tick>
        Lfloat prefilter3 = tSVF_tick(&x->pickupFilter, prefilter2);// + x->slideNoise;
240179b4:	980e      	ldr	r0, [sp, #56]	; 0x38
240179b6:	f7fa fea3 	bl	24012700 <tSVF_tick>
        Lfloat prefilter4 = tSVF_tick(&x->peakFilt, prefilter3);// + x->slideNoise;
240179ba:	980f      	ldr	r0, [sp, #60]	; 0x3c
240179bc:	f7fa fea0 	bl	24012700 <tSVF_tick>
    for (int i = 0; i < x->oversampling; i++)
240179c0:	6863      	ldr	r3, [r4, #4]
        theOutput = (prefilter4 * 1.3f* volumes[1]) + (prefilter * 1.3f * volumes[0]);
240179c2:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
    for (int i = 0; i < x->oversampling; i++)
240179c6:	454b      	cmp	r3, r9
        theOutput = (prefilter4 * 1.3f* volumes[1]) + (prefilter * 1.3f * volumes[0]);
240179c8:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
    for (int i = 0; i < x->oversampling; i++)
240179cc:	f73f ada1 	bgt.w	24017512 <tTString_tick+0x27e>
        theOutput = (prefilter4 * 1.3f* volumes[1]) + (prefilter * 1.3f * volumes[0]);
240179d0:	ee67 7a80 	vmul.f32	s15, s15, s0
240179d4:	ed5f 6ac9 	vldr	s13, [pc, #-804]	; 240176b4 <tTString_tick+0x420>
240179d8:	eee7 7a08 	vfma.f32	s15, s14, s16
240179dc:	ee27 0aa6 	vmul.f32	s0, s15, s13
}
240179e0:	b013      	add	sp, #76	; 0x4c
240179e2:	ecbd 8b10 	vpop	{d8-d15}
240179e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Lfloat volCut = 1.0f;
240179ea:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
240179ee:	e4af      	b.n	24017350 <tTString_tick+0xbc>
			tExpSmooth_setVal(&x->barPulse, 1.0f);
240179f0:	f104 07dc 	add.w	r7, r4, #220	; 0xdc
			tSlide_setDest(&x->barPulseSlide, 1.0f);
240179f4:	f504 768a 	add.w	r6, r4, #276	; 0x114
			tExpSmooth_setVal(&x->barPulse, 1.0f);
240179f8:	eeb0 0a49 	vmov.f32	s0, s18
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
240179fc:	f504 7584 	add.w	r5, r4, #264	; 0x108
			tExpSmooth_setVal(&x->barPulse, 1.0f);
24017a00:	4638      	mov	r0, r7
24017a02:	f7fa fa47 	bl	24011e94 <tExpSmooth_setVal>
			tSlide_setDest(&x->barPulseSlide, 1.0f);
24017a06:	eeb0 0a49 	vmov.f32	s0, s18
24017a0a:	4630      	mov	r0, r6
24017a0c:	f7fa fa86 	bl	24011f1c <tSlide_setDest>
			x->timeSinceLastBump = x->sampleCount+1 / bumpDifference;
24017a10:	eec9 6a28 	vdiv.f32	s13, s18, s17
24017a14:	edd4 7a41 	vldr	s15, [r4, #260]	; 0x104
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
24017a18:	4628      	mov	r0, r5
			if (x->timeSinceLastBump < 100)
24017a1a:	ed1f 7ad9 	vldr	s14, [pc, #-868]	; 240176b8 <tTString_tick+0x424>
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
24017a1e:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
24017a22:	ed94 6a02 	vldr	s12, [r4, #8]
			x->timeSinceLastBump = x->sampleCount+1 / bumpDifference;
24017a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
			x->lastBump = currentBump;
24017a2a:	edc4 9a3f 	vstr	s19, [r4, #252]	; 0xfc
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
24017a2e:	ee20 0a06 	vmul.f32	s0, s0, s12
			x->timeSinceLastBump = x->sampleCount+1 / bumpDifference;
24017a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
			if (x->timeSinceLastBump < 100)
24017a36:	eef4 7ac7 	vcmpe.f32	s15, s14
			x->timeSinceLastBump = x->sampleCount+1 / bumpDifference;
24017a3a:	edc4 7a40 	vstr	s15, [r4, #256]	; 0x100
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
24017a3e:	ee80 0a27 	vdiv.f32	s0, s0, s15
			if (x->timeSinceLastBump < 100)
24017a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017a46:	bf4c      	ite	mi
24017a48:	2301      	movmi	r3, #1
24017a4a:	2300      	movpl	r3, #0
24017a4c:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
24017a50:	f7fa fa64 	bl	24011f1c <tSlide_setDest>
			x->sampleCount = 0;
24017a54:	2200      	movs	r2, #0
		if (x->bumpOsc)
24017a56:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
			x->sampleCount = 0;
24017a5a:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
		if (x->bumpOsc)
24017a5e:	b183      	cbz	r3, 24017a82 <tTString_tick+0x7ee>
			if (x->bumpCount > x->timeSinceLastBump)
24017a60:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
24017a64:	edd4 7a40 	vldr	s15, [r4, #256]	; 0x100
24017a68:	ee07 3a10 	vmov	s14, r3
24017a6c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24017a70:	eeb4 7ae7 	vcmpe.f32	s14, s15
24017a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017a78:	dc78      	bgt.n	24017b6c <tTString_tick+0x8d8>
			x->bumpCount++;
24017a7a:	3301      	adds	r3, #1
24017a7c:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
24017a80:	4613      	mov	r3, r2
			x->sampleCount++;
24017a82:	3301      	adds	r3, #1
24017a84:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
24017a88:	e4a2      	b.n	240173d0 <tTString_tick+0x13c>
    	tExpSmooth_setDest(&x->barSmooth2,barPos);
24017a8a:	f7fa f9ff 	bl	24011e8c <tExpSmooth_setDest>
24017a8e:	9800      	ldr	r0, [sp, #0]
24017a90:	e429      	b.n	240172e6 <tTString_tick+0x52>
        uint32_t pickupPosInt = (uint32_t) pickupPosFinal;
24017a92:	eefc 6ae7 	vcvt.u32.f32	s13, s15
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
24017a96:	ee79 dae7 	vsub.f32	s27, s19, s15
        x->pickup_Ratio = pickupPosFinal / halfCurrentDelay;
24017a9a:	ee87 7a88 	vdiv.f32	s14, s15, s16
        uint32_t pickupPosInt = (uint32_t) pickupPosFinal;
24017a9e:	ee16 7a90 	vmov	r7, s13
        uint32_t pickupPosIntPlusOne = pickupPosInt + 1;
24017aa2:	f107 0a01 	add.w	sl, r7, #1
        Lfloat pickupPosAlpha = pickupPosFinal - pickupPosInt;
24017aa6:	eef8 6a66 	vcvt.f32.u32	s13, s13
        Lfloat inversePickupPos = currentDelay - pickupPos;
24017aaa:	ee3d da67 	vsub.f32	s26, s26, s15
        Lfloat pickupPosAlpha = pickupPosFinal - pickupPosInt;
24017aae:	ee37 8ae6 	vsub.f32	s16, s15, s13
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
24017ab2:	ee7d daa6 	vadd.f32	s27, s27, s13
        if (backwards)
24017ab6:	e679      	b.n	240177ac <tTString_tick+0x518>
        	allpassOut = tThiranAllpassSOCascade_tick(&x->allpass, rippleOut);
24017ab8:	eeb0 0a4e 	vmov.f32	s0, s28
24017abc:	f104 0054 	add.w	r0, r4, #84	; 0x54
24017ac0:	f7fa fbee 	bl	240122a0 <tThiranAllpassSOCascade_tick>
        	allpassOutP = tThiranAllpassSOCascade_tick(&x->allpassP, rippleOutP);
24017ac4:	f104 0058 	add.w	r0, r4, #88	; 0x58
        	allpassOut = tThiranAllpassSOCascade_tick(&x->allpass, rippleOut);
24017ac8:	eeb0 ea40 	vmov.f32	s28, s0
        	allpassOutP = tThiranAllpassSOCascade_tick(&x->allpassP, rippleOutP);
24017acc:	eeb0 0a6d 	vmov.f32	s0, s27
24017ad0:	f7fa fbe6 	bl	240122a0 <tThiranAllpassSOCascade_tick>
24017ad4:	eef0 da40 	vmov.f32	s27, s0
24017ad8:	e5f0      	b.n	240176bc <tTString_tick+0x428>
        while (pickupPos < 0.0f)
24017ada:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24017ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017ae2:	d5d6      	bpl.n	24017a92 <tTString_tick+0x7fe>
        uint32_t backwards = 0;
24017ae4:	2300      	movs	r3, #0
24017ae6:	e63f      	b.n	24017768 <tTString_tick+0x4d4>
		x->slideNoise *= x->muted;
24017ae8:	edd4 7a51 	vldr	s15, [r4, #324]	; 0x144
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
24017aec:	f504 7086 	add.w	r0, r4, #268	; 0x10c
		x->slideNoise *= x->muted;
24017af0:	ed94 0a58 	vldr	s0, [r4, #352]	; 0x160
24017af4:	ee20 0a27 	vmul.f32	s0, s0, s15
24017af8:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
24017afc:	f7fa ff28 	bl	24012950 <tHighpass_tick>
		x->slideNoise = tSVF_tick(&x->barLP, x->slideNoise * x->slideGain * 0.5f * volCut);
24017b00:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
24017b04:	edd4 7a35 	vldr	s15, [r4, #212]	; 0xd4
24017b08:	f504 7088 	add.w	r0, r4, #272	; 0x110
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
24017b0c:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = tSVF_tick(&x->barLP, x->slideNoise * x->slideGain * 0.5f * volCut);
24017b10:	ee67 7a87 	vmul.f32	s15, s15, s14
24017b14:	ee67 7a88 	vmul.f32	s15, s15, s16
24017b18:	ee27 0a80 	vmul.f32	s0, s15, s0
24017b1c:	f7fa fdf0 	bl	24012700 <tSVF_tick>
		x->slideNoise = x->slideNoise * x->slideGain;
24017b20:	edd4 7a35 	vldr	s15, [r4, #212]	; 0xd4
    for (int i = 0; i < x->oversampling; i++)
24017b24:	6863      	ldr	r3, [r4, #4]
		x->slideNoise = x->slideNoise * x->slideGain;
24017b26:	ee20 0a27 	vmul.f32	s0, s0, s15
    for (int i = 0; i < x->oversampling; i++)
24017b2a:	2b00      	cmp	r3, #0
		x->slideNoise = x->slideNoise * x->slideGain;
24017b2c:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
    for (int i = 0; i < x->oversampling; i++)
24017b30:	f73f acb5 	bgt.w	2401749e <tTString_tick+0x20a>
24017b34:	ed9f 0a15 	vldr	s0, [pc, #84]	; 24017b8c <tTString_tick+0x8f8>
}
24017b38:	b013      	add	sp, #76	; 0x4c
24017b3a:	ecbd 8b10 	vpop	{d8-d15}
24017b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			filterFade = (barFreq - 100.0f) * 0.005f;
24017b42:	eddf 7a13 	vldr	s15, [pc, #76]	; 24017b90 <tTString_tick+0x8fc>
			filterFade = LEAF_clip(0.0f, filterFade, 1.0f);
24017b46:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
			filterFade = (barFreq - 100.0f) * 0.005f;
24017b4a:	eddf 0a12 	vldr	s1, [pc, #72]	; 24017b94 <tTString_tick+0x900>
24017b4e:	ee79 9ae7 	vsub.f32	s19, s19, s15
			filterFade = LEAF_clip(0.0f, filterFade, 1.0f);
24017b52:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 24017b8c <tTString_tick+0x8f8>
24017b56:	ee69 0aa0 	vmul.f32	s1, s19, s1
24017b5a:	f7fd f86d 	bl	24014c38 <LEAF_clip>
24017b5e:	e478      	b.n	24017452 <tTString_tick+0x1be>
			tSlide_setDest(&x->barPulseSlide, 0.0f);
24017b60:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 24017b8c <tTString_tick+0x8f8>
24017b64:	4630      	mov	r0, r6
24017b66:	f7fa f9d9 	bl	24011f1c <tSlide_setDest>
24017b6a:	e44c      	b.n	24017406 <tTString_tick+0x172>
				tExpSmooth_setVal(&x->barPulse, 1.0f);
24017b6c:	eeb0 0a49 	vmov.f32	s0, s18
24017b70:	4638      	mov	r0, r7
24017b72:	f7fa f98f 	bl	24011e94 <tExpSmooth_setVal>
				tSlide_setDest(&x->barPulseSlide, 1.0f);
24017b76:	eeb0 0a49 	vmov.f32	s0, s18
24017b7a:	4630      	mov	r0, r6
24017b7c:	f7fa f9ce 	bl	24011f1c <tSlide_setDest>
			x->bumpCount++;
24017b80:	2201      	movs	r2, #1
		if (x->sampleCount < 3000)
24017b82:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
			x->bumpCount++;
24017b86:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
24017b8a:	e417      	b.n	240173bc <tTString_tick+0x128>
24017b8c:	00000000 	.word	0x00000000
24017b90:	42c80000 	.word	0x42c80000
24017b94:	3ba3d70a 	.word	0x3ba3d70a

24017b98 <tTString_setFreq>:
{
24017b98:	b510      	push	{r4, lr}
24017b9a:	ed2d 8b04 	vpush	{d8-d9}
    _tTString* x = *bw;
24017b9e:	6804      	ldr	r4, [r0, #0]
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
24017ba0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
{
24017ba4:	b082      	sub	sp, #8
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
24017ba6:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
24017baa:	f104 0050 	add.w	r0, r4, #80	; 0x50
24017bae:	edd4 7a24 	vldr	s15, [r4, #144]	; 0x90
    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);
24017bb2:	ed94 8a0e 	vldr	s16, [r4, #56]	; 0x38
24017bb6:	fec0 7a27 	vmaxnm.f32	s15, s0, s15
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
24017bba:	ee86 0aa7 	vdiv.f32	s0, s13, s15
    x->freq = freq;
24017bbe:	edc4 7a19 	vstr	s15, [r4, #100]	; 0x64
    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);
24017bc2:	ee27 8a88 	vmul.f32	s16, s15, s16
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
24017bc6:	ee30 0a47 	vsub.f32	s0, s0, s14
24017bca:	f7fa f95f 	bl	24011e8c <tExpSmooth_setDest>
    Lfloat result = 0.0f;
24017bce:	2300      	movs	r3, #0
    arm_atan2_f32(x->poleCoeff *  arm_sin_f32(Fc) , 1.0f - (x->poleCoeff *  arm_cos_f32(Fc)), &result);
24017bd0:	eeb0 0a48 	vmov.f32	s0, s16
24017bd4:	edd4 8a50 	vldr	s17, [r4, #320]	; 0x140
    Lfloat result = 0.0f;
24017bd8:	9301      	str	r3, [sp, #4]
    arm_atan2_f32(x->poleCoeff *  arm_sin_f32(Fc) , 1.0f - (x->poleCoeff *  arm_cos_f32(Fc)), &result);
24017bda:	f7e9 fae5 	bl	240011a8 <arm_sin_f32>
24017bde:	eef0 7a40 	vmov.f32	s15, s0
24017be2:	ed94 9a50 	vldr	s18, [r4, #320]	; 0x140
24017be6:	eeb0 0a48 	vmov.f32	s0, s16
24017bea:	ee68 8aa7 	vmul.f32	s17, s17, s15
24017bee:	f7e8 fec1 	bl	24000974 <arm_cos_f32>
24017bf2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24017bf6:	a801      	add	r0, sp, #4
24017bf8:	eef0 7a40 	vmov.f32	s15, s0
24017bfc:	eeb0 0a68 	vmov.f32	s0, s17
24017c00:	eee9 0a67 	vfms.f32	s1, s18, s15
24017c04:	f7e8 fd2c 	bl	24000660 <arm_atan2_f32>
     x->phaseComp = result;
24017c08:	9b01      	ldr	r3, [sp, #4]
24017c0a:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    //if I can figure out how to use a newer CMSIS DSP pack, the new version 1.15 has an atan2f approximation that's likely faster
#else
    x->phaseComp = atan2f((x->poleCoeff * sinf(Fc)) , (1.0f - (x->poleCoeff * cosf(Fc))));
#endif
}
24017c0e:	b002      	add	sp, #8
24017c10:	ecbd 8b04 	vpop	{d8-d9}
24017c14:	bd10      	pop	{r4, pc}
24017c16:	bf00      	nop

24017c18 <tTString_setDecayInSeconds>:

void    tTString_setDecayInSeconds               (tTString* const bw, Lfloat decay)
{
	 _tTString* x = *bw;
	 x->decayInSeconds = decay;
	 if (x->decayInSeconds > 20.0f)
24017c18:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
{
24017c1c:	b510      	push	{r4, lr}
	 if (x->decayInSeconds > 20.0f)
24017c1e:	eeb4 0ae7 	vcmpe.f32	s0, s15
	 _tTString* x = *bw;
24017c22:	6804      	ldr	r4, [r0, #0]
	 x->decayInSeconds = decay;
24017c24:	ed84 0a22 	vstr	s0, [r4, #136]	; 0x88
	 if (x->decayInSeconds > 20.0f)
24017c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017c2c:	dd04      	ble.n	24017c38 <tTString_setDecayInSeconds+0x20>
24017c2e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
	 {
		 x->decayCoeff = 1.0f;
24017c32:	ed84 0a1d 	vstr	s0, [r4, #116]	; 0x74
		 decay = fastExp3(-1.0f / (x->freq * x->decayInSeconds));
		 //decay = LEAF_map(decay, 0.0f, 1.0f, 0.99f, 1.01f);
		 decay = LEAF_clip(0.1f, decay, 1.0f);
		 x->decayCoeff = decay;
	 }
}
24017c36:	bd10      	pop	{r4, pc}
		 decay = fastExp3(-1.0f / (x->freq * x->decayInSeconds));
24017c38:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
24017c3c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
24017c40:	ee20 0a07 	vmul.f32	s0, s0, s14
24017c44:	ee87 0a80 	vdiv.f32	s0, s15, s0
24017c48:	f7fc ff00 	bl	24014a4c <fastExp3>
		 decay = LEAF_clip(0.1f, decay, 1.0f);
24017c4c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
		 decay = fastExp3(-1.0f / (x->freq * x->decayInSeconds));
24017c50:	eef0 0a40 	vmov.f32	s1, s0
		 decay = LEAF_clip(0.1f, decay, 1.0f);
24017c54:	ed9f 0a03 	vldr	s0, [pc, #12]	; 24017c64 <tTString_setDecayInSeconds+0x4c>
24017c58:	f7fc ffee 	bl	24014c38 <LEAF_clip>
		 x->decayCoeff = 1.0f;
24017c5c:	ed84 0a1d 	vstr	s0, [r4, #116]	; 0x74
}
24017c60:	bd10      	pop	{r4, pc}
24017c62:	bf00      	nop
24017c64:	3dcccccd 	.word	0x3dcccccd

24017c68 <tTString_setPickupPos>:

void    tTString_setPickupPos               (tTString* const bw, Lfloat pos)
{
	_tTString* x = *bw;
24017c68:	6803      	ldr	r3, [r0, #0]
	x->pickupPos = pos;
24017c6a:	ed83 0a27 	vstr	s0, [r3, #156]	; 0x9c
}
24017c6e:	4770      	bx	lr

24017c70 <tTString_setPickupModAmp>:
	x->pickupAmount = amount;
}

void    tTString_setPickupModAmp               (tTString* const bw, Lfloat amp)
{
	_tTString* x = *bw;
24017c70:	6803      	ldr	r3, [r0, #0]
	x->pickupModOscAmp = amp;
24017c72:	ed83 0a2d 	vstr	s0, [r3, #180]	; 0xb4
}
24017c76:	4770      	bx	lr

24017c78 <tTString_setPickupModFreq>:


void    tTString_setPickupModFreq               (tTString* const bw, Lfloat freq)
{
	_tTString* x = *bw;
24017c78:	6803      	ldr	r3, [r0, #0]
	x->pickupModOscFreq = freq;
	tCycle_setFreq(&x->pickupModOsc, freq);
24017c7a:	f103 00ac 	add.w	r0, r3, #172	; 0xac
	x->pickupModOscFreq = freq;
24017c7e:	ed83 0a2c 	vstr	s0, [r3, #176]	; 0xb0
	tCycle_setFreq(&x->pickupModOsc, freq);
24017c82:	f7fd bc83 	b.w	2401558c <tCycle_setFreq>
24017c86:	bf00      	nop

24017c88 <tTString_mute>:
}



void    tTString_mute              (tTString* const bw)
{
24017c88:	b510      	push	{r4, lr}
	 _tTString* x = *bw;
24017c8a:	6804      	ldr	r4, [r0, #0]
	 x->muteCoeff = fastExp3(-1.0f / (x->freq * 0.007f));;
24017c8c:	ed9f 0a08 	vldr	s0, [pc, #32]	; 24017cb0 <tTString_mute+0x28>
24017c90:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
24017c94:	ee80 0a27 	vdiv.f32	s0, s0, s15
24017c98:	f7fc fed8 	bl	24014a4c <fastExp3>
	 if (x->muteCoeff < 0.5f)
	 {
		 x->muteCoeff = 0.5f;
	 }
	 x->muted = 0.0f;
24017c9c:	2300      	movs	r3, #0
24017c9e:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
24017ca2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24017ca6:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
24017caa:	ed84 0a1e 	vstr	s0, [r4, #120]	; 0x78
}
24017cae:	bd10      	pop	{r4, pc}
24017cb0:	c30edb6d 	.word	0xc30edb6d

24017cb4 <tTString_setFilterFreqDirectly>:
	tCookOnePole_setPole(&x->reflFiltP,filter);
	x->poleCoeff = filter;
}

void    tTString_setFilterFreqDirectly              (tTString* const bw, Lfloat freq)
{
24017cb4:	b510      	push	{r4, lr}
24017cb6:	ed2d 8b02 	vpush	{d8}
	 _tTString* x = *bw;
24017cba:	6804      	ldr	r4, [r0, #0]
{
24017cbc:	eef0 0a40 	vmov.f32	s1, s0
	Lfloat freqToUse = LEAF_clip(10.0f, freq, x->quarterSampleRate);
24017cc0:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
24017cc4:	ed94 1a5a 	vldr	s2, [r4, #360]	; 0x168
	x->filterFreq = freqToUse;
#ifdef ARM_MATH_CM7
	freq = 1.0f - arm_sin_f32(freqToUse * x->twoPiTimesInvSampleRate);
24017cc8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
	Lfloat freqToUse = LEAF_clip(10.0f, freq, x->quarterSampleRate);
24017ccc:	f7fc ffb4 	bl	24014c38 <LEAF_clip>
24017cd0:	eef0 7a40 	vmov.f32	s15, s0
	freq = 1.0f - arm_sin_f32(freqToUse * x->twoPiTimesInvSampleRate);
24017cd4:	ed94 7a04 	vldr	s14, [r4, #16]
	x->filterFreq = freqToUse;
24017cd8:	edc4 7a1c 	vstr	s15, [r4, #112]	; 0x70
	freq = 1.0f - arm_sin_f32(freqToUse * x->twoPiTimesInvSampleRate);
24017cdc:	ee20 0a07 	vmul.f32	s0, s0, s14
24017ce0:	f7e9 fa62 	bl	240011a8 <arm_sin_f32>
24017ce4:	ee38 8a40 	vsub.f32	s16, s16, s0
	freq = 1.0f - sinf(freqToUse * x->twoPiTimesInvSampleRate);
#endif
	//volatile Lfloat normalizedFreq = (overtone * x->freq) * x->twoPiTimesInvSampleRate;
	//filter = 1.0f - normalizedFreq;

	tCookOnePole_setPole(&x->reflFilt,freq);
24017ce8:	f104 0024 	add.w	r0, r4, #36	; 0x24
24017cec:	eeb0 0a48 	vmov.f32	s0, s16
24017cf0:	f7fa fbc0 	bl	24012474 <tCookOnePole_setPole>
	tCookOnePole_setPole(&x->reflFiltP,freq);
24017cf4:	eeb0 0a48 	vmov.f32	s0, s16
24017cf8:	f104 0028 	add.w	r0, r4, #40	; 0x28
24017cfc:	f7fa fbba 	bl	24012474 <tCookOnePole_setPole>
	x->poleCoeff = freq;
24017d00:	ed84 8a50 	vstr	s16, [r4, #320]	; 0x140
}
24017d04:	ecbd 8b02 	vpop	{d8}
24017d08:	bd10      	pop	{r4, pc}
24017d0a:	bf00      	nop

24017d0c <tTString_setTensionGain>:

void   tTString_setTensionGain                  (tTString* const bw, Lfloat tensionGain)
{
	_tTString* x = *bw;
24017d0c:	6803      	ldr	r3, [r0, #0]
	x->tensionGain = tensionGain;
24017d0e:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
}
24017d12:	4770      	bx	lr

24017d14 <tTString_setBarPosition>:
	x->barDrive = drive + 1.0f;
}

void   tTString_setBarPosition                  (tTString* const bw, Lfloat barPosition)
{
	_tTString* x = *bw;
24017d14:	6803      	ldr	r3, [r0, #0]
	x->prevBarPosition = x->barPosition;
24017d16:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
	x->barPosition = barPosition;
24017d1a:	ed83 0a3b 	vstr	s0, [r3, #236]	; 0xec
	x->prevBarPosition = x->barPosition;
24017d1e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
}
24017d22:	4770      	bx	lr

24017d24 <tTString_setOpenStringFrequency>:

void   tTString_setOpenStringFrequency                  (tTString* const bw, Lfloat openStringFrequency)
{
	_tTString* x = *bw;
24017d24:	6803      	ldr	r3, [r0, #0]
	x->openStringLength = ((x->sampleRate / openStringFrequency) - 2.0f);
24017d26:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
24017d2a:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
24017d2e:	eec6 7a80 	vdiv.f32	s15, s13, s0
24017d32:	ee77 7ac7 	vsub.f32	s15, s15, s14
24017d36:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
}
24017d3a:	4770      	bx	lr

24017d3c <tTString_setPhantomHarmonicsGain>:
	x->pickupRatio = ratio;
}

void   tTString_setPhantomHarmonicsGain                  (tTString* const bw, Lfloat gain)
{
	_tTString* x = *bw;
24017d3c:	6803      	ldr	r3, [r0, #0]
	x->phantomGain = gain;
24017d3e:	ed83 0a2a 	vstr	s0, [r3, #168]	; 0xa8
}
24017d42:	4770      	bx	lr

24017d44 <tTString_setTensionSpeed>:
}

void   tTString_setTensionSpeed                  (tTString* const bw, Lfloat tensionSpeed)
{
	_tTString* x = *bw;
	tExpSmooth_setFactor(&x->tensionSmoother, 0.00064f * x->invOversampling * (1.0f - tensionSpeed) + 0.00001f); //0.5 is good
24017d44:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24017d48:	ed9f 6a08 	vldr	s12, [pc, #32]	; 24017d6c <tTString_setTensionSpeed+0x28>
	_tTString* x = *bw;
24017d4c:	6800      	ldr	r0, [r0, #0]
	tExpSmooth_setFactor(&x->tensionSmoother, 0.00064f * x->invOversampling * (1.0f - tensionSpeed) + 0.00001f); //0.5 is good
24017d4e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 24017d70 <tTString_setTensionSpeed+0x2c>
24017d52:	ee77 7ac0 	vsub.f32	s15, s15, s0
24017d56:	edd0 6a02 	vldr	s13, [r0, #8]
24017d5a:	304c      	adds	r0, #76	; 0x4c
24017d5c:	ee67 7a86 	vmul.f32	s15, s15, s12
24017d60:	eea6 7aa7 	vfma.f32	s14, s13, s15
24017d64:	eeb0 0a47 	vmov.f32	s0, s14
24017d68:	f7fa b86a 	b.w	24011e40 <tExpSmooth_setFactor>
24017d6c:	3a27c5ac 	.word	0x3a27c5ac
24017d70:	3727c5ac 	.word	0x3727c5ac

24017d74 <tTString_setRippleDepth>:
}


void   tTString_setRippleDepth                  (tTString* const bw, Lfloat depth)
{
24017d74:	b510      	push	{r4, lr}
24017d76:	ed2d 8b02 	vpush	{d8}
	_tTString* x = *bw;
24017d7a:	6804      	ldr	r4, [r0, #0]
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
24017d7c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
24017d80:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 24017df0 <tTString_setRippleDepth+0x7c>
{
24017d84:	eeb0 8a40 	vmov.f32	s16, s0
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
24017d88:	edd4 5a22 	vldr	s11, [r4, #136]	; 0x88
24017d8c:	eddf 7a19 	vldr	s15, [pc, #100]	; 24017df4 <tTString_setRippleDepth+0x80>
24017d90:	edd4 6a19 	vldr	s13, [r4, #100]	; 0x64
24017d94:	eee5 7a86 	vfma.f32	s15, s11, s12
24017d98:	ee67 7aa6 	vmul.f32	s15, s15, s13
24017d9c:	ee87 0a27 	vdiv.f32	s0, s14, s15
24017da0:	f7fc fe54 	bl	24014a4c <fastExp3>
	x->invOnePlusr = 1.0f / (1.0f + x->r);
	Lfloat highpassFreq = depth * 30.0f + 1.0f;
	tHighpass_setFreq(&x->dcBlock,highpassFreq);
24017da4:	f104 001c 	add.w	r0, r4, #28
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
24017da8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	x->invOnePlusr = 1.0f / (1.0f + x->r);
24017dac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	Lfloat highpassFreq = depth * 30.0f + 1.0f;
24017db0:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
24017db4:	ee68 7a27 	vmul.f32	s15, s16, s15
	Lfloat highpassFreq = depth * 30.0f + 1.0f;
24017db8:	eef0 8a47 	vmov.f32	s17, s14
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
24017dbc:	ee67 7a80 	vmul.f32	s15, s15, s0
	Lfloat highpassFreq = depth * 30.0f + 1.0f;
24017dc0:	eee8 8a26 	vfma.f32	s17, s16, s13
	x->invOnePlusr = 1.0f / (1.0f + x->r);
24017dc4:	ee77 6a87 	vadd.f32	s13, s15, s14
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
24017dc8:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
	x->invOnePlusr = 1.0f / (1.0f + x->r);
24017dcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tHighpass_setFreq(&x->dcBlock,highpassFreq);
24017dd0:	eeb0 0a68 	vmov.f32	s0, s17
	x->invOnePlusr = 1.0f / (1.0f + x->r);
24017dd4:	edc4 7a23 	vstr	s15, [r4, #140]	; 0x8c
	tHighpass_setFreq(&x->dcBlock,highpassFreq);
24017dd8:	f7fa fdae 	bl	24012938 <tHighpass_setFreq>
	tHighpass_setFreq(&x->dcBlockP,highpassFreq);
24017ddc:	eeb0 0a68 	vmov.f32	s0, s17
24017de0:	f104 0020 	add.w	r0, r4, #32
}
24017de4:	ecbd 8b02 	vpop	{d8}
24017de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tHighpass_setFreq(&x->dcBlockP,highpassFreq);
24017dec:	f7fa bda4 	b.w	24012938 <tHighpass_setFreq>
24017df0:	3ba3d70a 	.word	0x3ba3d70a
24017df4:	38d1b717 	.word	0x38d1b717

24017df8 <tTString_setHarmonic>:

void   tTString_setHarmonic                  (tTString* const bw, Lfloat harmonic)
{
	_tTString* x = *bw;
	x->harmonic = harmonic;
	x->rippleRate = 1.0f / harmonic;
24017df8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	_tTString* x = *bw;
24017dfc:	6803      	ldr	r3, [r0, #0]
	x->harmonic = harmonic;
24017dfe:	ed83 0a21 	vstr	s0, [r3, #132]	; 0x84
	x->rippleRate = 1.0f / harmonic;
24017e02:	eec7 7a00 	vdiv.f32	s15, s14, s0
24017e06:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
}
24017e0a:	4770      	bx	lr

24017e0c <tTString_setFeedbackStrength>:
void   tTString_setFeedbackStrength                  (tTString* const bw, Lfloat strength)
{
	_tTString* x = *bw;
	Lfloat strengthVal = 0.5f * strength;
24017e0c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
24017e10:	b510      	push	{r4, lr}
24017e12:	ed2d 8b02 	vpush	{d8}
24017e16:	eeb0 8a40 	vmov.f32	s16, s0
	_tTString* x = *bw;
24017e1a:	6804      	ldr	r4, [r0, #0]
	Lfloat strengthVal = 0.5f * strength;
24017e1c:	ee20 0a27 	vmul.f32	s0, s0, s15
{
24017e20:	b082      	sub	sp, #8
	tFeedbackLeveler_setStrength(&x->feedback, strengthVal);
24017e22:	f504 70ac 	add.w	r0, r4, #344	; 0x158
24017e26:	ed8d 0a01 	vstr	s0, [sp, #4]
24017e2a:	f7f9 fc65 	bl	240116f8 <tFeedbackLeveler_setStrength>
	tFeedbackLeveler_setStrength(&x->feedbackP, strengthVal);
24017e2e:	ed9d 0a01 	vldr	s0, [sp, #4]
24017e32:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
24017e36:	f7f9 fc5f 	bl	240116f8 <tFeedbackLeveler_setStrength>
	x->feedbackNoiseLevel = strength * 0.005f;
24017e3a:	eddf 7a05 	vldr	s15, [pc, #20]	; 24017e50 <tTString_setFeedbackStrength+0x44>
24017e3e:	ee28 8a27 	vmul.f32	s16, s16, s15
24017e42:	ed84 8a59 	vstr	s16, [r4, #356]	; 0x164

}
24017e46:	b002      	add	sp, #8
24017e48:	ecbd 8b02 	vpop	{d8}
24017e4c:	bd10      	pop	{r4, pc}
24017e4e:	bf00      	nop
24017e50:	3ba3d70a 	.word	0x3ba3d70a

24017e54 <tTString_setFeedbackReactionSpeed>:
void   tTString_setFeedbackReactionSpeed                  (tTString* const bw, Lfloat speed)
{
24017e54:	b510      	push	{r4, lr}
	_tTString* x = *bw;
	Lfloat speedVal = speed * 0.1f + 0.00001f;
24017e56:	eddf 7a0c 	vldr	s15, [pc, #48]	; 24017e88 <tTString_setFeedbackReactionSpeed+0x34>
{
24017e5a:	ed2d 8b02 	vpush	{d8}
	Lfloat speedVal = speed * 0.1f + 0.00001f;
24017e5e:	ed9f 8a0b 	vldr	s16, [pc, #44]	; 24017e8c <tTString_setFeedbackReactionSpeed+0x38>
	_tTString* x = *bw;
24017e62:	6804      	ldr	r4, [r0, #0]
	Lfloat speedVal = speed * 0.1f + 0.00001f;
24017e64:	eea0 8a27 	vfma.f32	s16, s0, s15
	tFeedbackLeveler_setFactor(&x->feedback, speedVal);
24017e68:	f504 70ac 	add.w	r0, r4, #344	; 0x158
24017e6c:	eeb0 0a48 	vmov.f32	s0, s16
24017e70:	f7f9 fc46 	bl	24011700 <tFeedbackLeveler_setFactor>
	tFeedbackLeveler_setFactor(&x->feedbackP, speedVal);
24017e74:	eeb0 0a48 	vmov.f32	s0, s16
24017e78:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
}
24017e7c:	ecbd 8b02 	vpop	{d8}
24017e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tFeedbackLeveler_setFactor(&x->feedbackP, speedVal);
24017e84:	f7f9 bc3c 	b.w	24011700 <tFeedbackLeveler_setFactor>
24017e88:	3dcccccd 	.word	0x3dcccccd
24017e8c:	3727c5ac 	.word	0x3727c5ac

24017e90 <tTString_pluck>:

void    tTString_pluck               (tTString* const bw, Lfloat position, Lfloat amplitude)
{
24017e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24017e94:	ed2d 8b06 	vpush	{d8-d10}
    _tTString* x = *bw;

    x->muted = 1.0f;
24017e98:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
    _tTString* x = *bw;
24017e9c:	f8d0 9000 	ldr.w	r9, [r0]
{
24017ea0:	b085      	sub	sp, #20
24017ea2:	eeb0 8a40 	vmov.f32	s16, s0
    tExpSmooth_setVal(&x->tensionSmoother, amplitude);
24017ea6:	f109 004c 	add.w	r0, r9, #76	; 0x4c
24017eaa:	eeb0 0a60 	vmov.f32	s0, s1
    x->muted = 1.0f;
24017eae:	edc9 aa51 	vstr	s21, [r9, #324]	; 0x144
{
24017eb2:	eef0 8a60 	vmov.f32	s17, s1
    tExpSmooth_setVal(&x->tensionSmoother, amplitude);
24017eb6:	f7f9 ffed 	bl	24011e94 <tExpSmooth_setVal>
    tFeedbackLeveler_setTargetLevel(&x->feedback, amplitude * 0.25f);
24017eba:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
24017ebe:	f509 70ac 	add.w	r0, r9, #344	; 0x158
    Lfloat currentDelay = x->baseDelay;// - x->allpassDelay;
    x->muteCoeff = 1.0f;
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
    uint32_t currentDelayInt = halfCurrentDelay * 2.0f;
    Lfloat positionMin = (x->openStringLength * 0.204166666666667f);
    Lfloat positionMax = (x->openStringLength * 0.001f);
24017ec2:	ed9f 9aa1 	vldr	s18, [pc, #644]	; 24018148 <tTString_pluck+0x2b8>
    //0.083335f; * position;//position * halfCurrentDelay;
    pluckPoint = LEAF_clip(0.0f, pluckPoint, halfCurrentDelay);
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
    Lfloat invPluckPointInt = (1.0f / ((Lfloat)pluckPointInt+.001f));
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
    tLagrangeDelay_clear(&x->delay);
24017ec6:	f109 0514 	add.w	r5, r9, #20
    tFeedbackLeveler_setTargetLevel(&x->feedback, amplitude * 0.25f);
24017eca:	ee28 0aa7 	vmul.f32	s0, s17, s15
24017ece:	ed8d 0a00 	vstr	s0, [sp]
24017ed2:	f7f9 fc41 	bl	24011758 <tFeedbackLeveler_setTargetLevel>
    tFeedbackLeveler_setTargetLevel(&x->feedbackP, amplitude * 0.25f);
24017ed6:	ed9d 0a00 	vldr	s0, [sp]
24017eda:	f509 70ae 	add.w	r0, r9, #348	; 0x15c
24017ede:	f7f9 fc3b 	bl	24011758 <tFeedbackLeveler_setTargetLevel>
    x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
24017ee2:	f109 0050 	add.w	r0, r9, #80	; 0x50
24017ee6:	f7f9 ffdf 	bl	24011ea8 <tExpSmooth_tick>
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
24017eea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
24017eee:	eef0 7a40 	vmov.f32	s15, s0
    Lfloat positionMin = (x->openStringLength * 0.204166666666667f);
24017ef2:	edd9 6a3d 	vldr	s13, [r9, #244]	; 0xf4
    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
24017ef6:	eeb0 0a48 	vmov.f32	s0, s16
    Lfloat positionMin = (x->openStringLength * 0.204166666666667f);
24017efa:	eddf 0a94 	vldr	s1, [pc, #592]	; 2401814c <tTString_pluck+0x2bc>
    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
24017efe:	ee26 1a89 	vmul.f32	s2, s13, s18
    x->muteCoeff = 1.0f;
24017f02:	edc9 aa1e 	vstr	s21, [r9, #120]	; 0x78
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
24017f06:	ee27 7a87 	vmul.f32	s14, s15, s14
    x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
24017f0a:	edc9 7a0b 	vstr	s15, [r9, #44]	; 0x2c
    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
24017f0e:	ee66 0aa0 	vmul.f32	s1, s13, s1
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
24017f12:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    uint32_t currentDelayInt = halfCurrentDelay * 2.0f;
24017f16:	eeb8 8a67 	vcvt.f32.u32	s16, s15
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
24017f1a:	edcd 7a00 	vstr	s15, [sp]
    uint32_t currentDelayInt = halfCurrentDelay * 2.0f;
24017f1e:	ee78 7a08 	vadd.f32	s15, s16, s16
24017f22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24017f26:	ee17 7a90 	vmov	r7, s15
    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
24017f2a:	f7fc fd27 	bl	2401497c <LEAF_mapFromZeroToOneInput>
24017f2e:	eef0 7a40 	vmov.f32	s15, s0
    pluckPoint = LEAF_clip(0.0f, pluckPoint, halfCurrentDelay);
24017f32:	ed9f 0a87 	vldr	s0, [pc, #540]	; 24018150 <tTString_pluck+0x2c0>
24017f36:	eeb0 1a48 	vmov.f32	s2, s16
    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
24017f3a:	edcd 7a02 	vstr	s15, [sp, #8]
    pluckPoint = LEAF_clip(0.0f, pluckPoint, halfCurrentDelay);
24017f3e:	eddd 0a02 	vldr	s1, [sp, #8]
24017f42:	f7fc fe79 	bl	24014c38 <LEAF_clip>
24017f46:	ed8d 0a02 	vstr	s0, [sp, #8]
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
24017f4a:	ed9d 7a02 	vldr	s14, [sp, #8]
    tLagrangeDelay_clear(&x->delay);
24017f4e:	4628      	mov	r0, r5
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
24017f50:	eddd 7a02 	vldr	s15, [sp, #8]
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
24017f54:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
24017f58:	ee79 7a67 	vsub.f32	s15, s18, s15
    Lfloat invPluckPointInt = (1.0f / ((Lfloat)pluckPointInt+.001f));
24017f5c:	eef8 9a47 	vcvt.f32.u32	s19, s14
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
24017f60:	ee17 4a10 	vmov	r4, s14
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
24017f64:	ee77 7a88 	vadd.f32	s15, s15, s16
    Lfloat invPluckPointInt = (1.0f / ((Lfloat)pluckPointInt+.001f));
24017f68:	ee39 9a89 	vadd.f32	s18, s19, s18
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
24017f6c:	ee8a 7aa7 	vdiv.f32	s14, s21, s15
    Lfloat invPluckPointInt = (1.0f / ((Lfloat)pluckPointInt+.001f));
24017f70:	ee8a aa89 	vdiv.f32	s20, s21, s18
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
24017f74:	ed8d 7a03 	vstr	s14, [sp, #12]
    tLagrangeDelay_clear(&x->delay);
24017f78:	f7f8 ffcc 	bl	24010f14 <tLagrangeDelay_clear>
    x->pluckRatio = pluckPoint / halfCurrentDelay;
24017f7c:	ed9d 7a02 	vldr	s14, [sp, #8]
    x->pluckPoint_forInput = pluckPoint;
24017f80:	9b02      	ldr	r3, [sp, #8]
    x->pluckRatio = pluckPoint / halfCurrentDelay;
24017f82:	eec7 7a08 	vdiv.f32	s15, s14, s16
    x->pluckPoint_forInput = pluckPoint;
24017f86:	f8c9 3184 	str.w	r3, [r9, #388]	; 0x184
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
24017f8a:	9b00      	ldr	r3, [sp, #0]
    x->pluckRatio = pluckPoint / halfCurrentDelay;
24017f8c:	edc9 7a5d 	vstr	s15, [r9, #372]	; 0x174
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
24017f90:	2b00      	cmp	r3, #0
24017f92:	f000 80c3 	beq.w	2401811c <tTString_pluck+0x28c>
            val = (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)*invRemainder));
        }
        val = LEAF_tanh(val*val) * amplitude;
        tLagrangeDelay_tapIn(&x->delay, val, i);
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
        tLagrangeDelay_tapIn(&x->delayP, val, i);
24017f96:	f109 0618 	add.w	r6, r9, #24
24017f9a:	2c00      	cmp	r4, #0
24017f9c:	f000 80d1 	beq.w	24018142 <tTString_pluck+0x2b2>
24017fa0:	42a3      	cmp	r3, r4
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
24017fa2:	f04f 0800 	mov.w	r8, #0
24017fa6:	eba7 0a04 	sub.w	sl, r7, r4
24017faa:	bf28      	it	cs
24017fac:	4623      	movcs	r3, r4
24017fae:	9301      	str	r3, [sp, #4]
            val = ((Lfloat)i * invPluckPointInt);
24017fb0:	ee07 8a90 	vmov	s15, r8
        if (i == pluckPointInt)
24017fb4:	4544      	cmp	r4, r8
24017fb6:	eba7 0b08 	sub.w	fp, r7, r8
            val = ((Lfloat)i * invPluckPointInt);
24017fba:	eeb8 0a67 	vcvt.f32.u32	s0, s15
24017fbe:	ee20 0a0a 	vmul.f32	s0, s0, s20
        if (i == pluckPointInt)
24017fc2:	f000 8081 	beq.w	240180c8 <tTString_pluck+0x238>
        val = LEAF_tanh(val*val) * amplitude;
24017fc6:	ee20 0a00 	vmul.f32	s0, s0, s0
24017fca:	f7fc fe3d 	bl	24014c48 <LEAF_tanh>
24017fce:	ee28 8a80 	vmul.f32	s16, s17, s0
        tLagrangeDelay_tapIn(&x->delay, val, i);
24017fd2:	4641      	mov	r1, r8
24017fd4:	4628      	mov	r0, r5
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
24017fd6:	eeb1 9a48 	vneg.f32	s18, s16
        tLagrangeDelay_tapIn(&x->delay, val, i);
24017fda:	eeb0 0a48 	vmov.f32	s0, s16
24017fde:	f7f9 f8f3 	bl	240111c8 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
24017fe2:	4659      	mov	r1, fp
24017fe4:	eeb0 0a49 	vmov.f32	s0, s18
24017fe8:	4628      	mov	r0, r5
24017fea:	f7f9 f8ed 	bl	240111c8 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, val, i);
24017fee:	4641      	mov	r1, r8
24017ff0:	eeb0 0a48 	vmov.f32	s0, s16
24017ff4:	4630      	mov	r0, r6
24017ff6:	f7f9 f8e7 	bl	240111c8 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, -val, currentDelayInt-i);
24017ffa:	eeb0 0a49 	vmov.f32	s0, s18
24017ffe:	4659      	mov	r1, fp
24018000:	4630      	mov	r0, r6
24018002:	f7f9 f8e1 	bl	240111c8 <tLagrangeDelay_tapIn>
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
24018006:	f108 0801 	add.w	r8, r8, #1
2401800a:	9b01      	ldr	r3, [sp, #4]
2401800c:	4543      	cmp	r3, r8
2401800e:	d8cf      	bhi.n	24017fb0 <tTString_pluck+0x120>
24018010:	9b00      	ldr	r3, [sp, #0]
24018012:	4543      	cmp	r3, r8
24018014:	f240 8082 	bls.w	2401811c <tTString_pluck+0x28c>
        val = LEAF_tanh(val*val) * amplitude;
24018018:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
2401801c:	eba7 0a04 	sub.w	sl, r7, r4
24018020:	e02a      	b.n	24018078 <tTString_pluck+0x1e8>
            val = (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)*invRemainder));
24018022:	eeb0 0a4a 	vmov.f32	s0, s20
24018026:	ed9d 7a03 	vldr	s14, [sp, #12]
2401802a:	eea7 0a27 	vfma.f32	s0, s14, s15
        val = LEAF_tanh(val*val) * amplitude;
2401802e:	ee20 0a00 	vmul.f32	s0, s0, s0
24018032:	f7fc fe09 	bl	24014c48 <LEAF_tanh>
24018036:	ee28 8a80 	vmul.f32	s16, s17, s0
        tLagrangeDelay_tapIn(&x->delay, val, i);
2401803a:	4641      	mov	r1, r8
2401803c:	4628      	mov	r0, r5
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
2401803e:	eeb1 9a48 	vneg.f32	s18, s16
        tLagrangeDelay_tapIn(&x->delay, val, i);
24018042:	eeb0 0a48 	vmov.f32	s0, s16
24018046:	f7f9 f8bf 	bl	240111c8 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
2401804a:	4659      	mov	r1, fp
2401804c:	eeb0 0a49 	vmov.f32	s0, s18
24018050:	4628      	mov	r0, r5
24018052:	f7f9 f8b9 	bl	240111c8 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, val, i);
24018056:	4641      	mov	r1, r8
24018058:	eeb0 0a48 	vmov.f32	s0, s16
2401805c:	4630      	mov	r0, r6
2401805e:	f7f9 f8b3 	bl	240111c8 <tLagrangeDelay_tapIn>
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
24018062:	f108 0801 	add.w	r8, r8, #1
        tLagrangeDelay_tapIn(&x->delayP, -val, currentDelayInt-i);
24018066:	4659      	mov	r1, fp
24018068:	eeb0 0a49 	vmov.f32	s0, s18
2401806c:	4630      	mov	r0, r6
2401806e:	f7f9 f8ab 	bl	240111c8 <tLagrangeDelay_tapIn>
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
24018072:	9b00      	ldr	r3, [sp, #0]
24018074:	4543      	cmp	r3, r8
24018076:	d951      	bls.n	2401811c <tTString_pluck+0x28c>
            val = (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)*invRemainder));
24018078:	ee07 8a90 	vmov	s15, r8
        if (i == pluckPointInt)
2401807c:	4544      	cmp	r4, r8
2401807e:	eba7 0b08 	sub.w	fp, r7, r8
            val = (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)*invRemainder));
24018082:	eef8 7a67 	vcvt.f32.u32	s15, s15
24018086:	ee79 7ae7 	vsub.f32	s15, s19, s15
        if (i == pluckPointInt)
2401808a:	d1ca      	bne.n	24018022 <tTString_pluck+0x192>
        val = LEAF_tanh(val*val) * amplitude;
2401808c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
24018090:	f104 0801 	add.w	r8, r4, #1
        val = LEAF_tanh(val*val) * amplitude;
24018094:	f7fc fdd8 	bl	24014c48 <LEAF_tanh>
24018098:	ee28 8a80 	vmul.f32	s16, s17, s0
        tLagrangeDelay_tapIn(&x->delay, val, i);
2401809c:	4621      	mov	r1, r4
2401809e:	4628      	mov	r0, r5
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
240180a0:	eeb1 9a48 	vneg.f32	s18, s16
        tLagrangeDelay_tapIn(&x->delay, val, i);
240180a4:	eeb0 0a48 	vmov.f32	s0, s16
240180a8:	f7f9 f88e 	bl	240111c8 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
240180ac:	4651      	mov	r1, sl
240180ae:	eeb0 0a49 	vmov.f32	s0, s18
240180b2:	4628      	mov	r0, r5
240180b4:	f7f9 f888 	bl	240111c8 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, val, i);
240180b8:	4621      	mov	r1, r4
240180ba:	eeb0 0a48 	vmov.f32	s0, s16
240180be:	4630      	mov	r0, r6
240180c0:	f7f9 f882 	bl	240111c8 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, -val, currentDelayInt-i);
240180c4:	4651      	mov	r1, sl
240180c6:	e7cf      	b.n	24018068 <tTString_pluck+0x1d8>
        val = LEAF_tanh(val*val) * amplitude;
240180c8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
240180cc:	f104 0801 	add.w	r8, r4, #1
        val = LEAF_tanh(val*val) * amplitude;
240180d0:	f7fc fdba 	bl	24014c48 <LEAF_tanh>
240180d4:	ee20 8a28 	vmul.f32	s16, s0, s17
        tLagrangeDelay_tapIn(&x->delay, val, i);
240180d8:	4621      	mov	r1, r4
240180da:	4628      	mov	r0, r5
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
240180dc:	eeb1 9a48 	vneg.f32	s18, s16
        tLagrangeDelay_tapIn(&x->delay, val, i);
240180e0:	eeb0 0a48 	vmov.f32	s0, s16
240180e4:	f7f9 f870 	bl	240111c8 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
240180e8:	4651      	mov	r1, sl
240180ea:	eeb0 0a49 	vmov.f32	s0, s18
240180ee:	4628      	mov	r0, r5
240180f0:	f7f9 f86a 	bl	240111c8 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, val, i);
240180f4:	eeb0 0a48 	vmov.f32	s0, s16
240180f8:	4621      	mov	r1, r4
240180fa:	4630      	mov	r0, r6
240180fc:	f7f9 f864 	bl	240111c8 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, -val, currentDelayInt-i);
24018100:	eeb0 0a49 	vmov.f32	s0, s18
24018104:	4651      	mov	r1, sl
24018106:	4630      	mov	r0, r6
24018108:	f7f9 f85e 	bl	240111c8 <tLagrangeDelay_tapIn>
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
2401810c:	9b01      	ldr	r3, [sp, #4]
2401810e:	4598      	cmp	r8, r3
24018110:	f4ff af4e 	bcc.w	24017fb0 <tTString_pluck+0x120>
24018114:	9b00      	ldr	r3, [sp, #0]
24018116:	4543      	cmp	r3, r8
24018118:	f63f af7e 	bhi.w	24018018 <tTString_pluck+0x188>

    }
    tThiranAllpassSOCascade_clear(&x->allpass);
2401811c:	f109 0054 	add.w	r0, r9, #84	; 0x54
24018120:	f7fa f8ec 	bl	240122fc <tThiranAllpassSOCascade_clear>
    tThiranAllpassSOCascade_clear(&x->allpassP);
24018124:	f109 0058 	add.w	r0, r9, #88	; 0x58
24018128:	f7fa f8e8 	bl	240122fc <tThiranAllpassSOCascade_clear>

    tExpSmooth_setVal(&x->pickNoise, amplitude);
2401812c:	eeb0 0a68 	vmov.f32	s0, s17
24018130:	f509 70be 	add.w	r0, r9, #380	; 0x17c
}
24018134:	b005      	add	sp, #20
24018136:	ecbd 8b06 	vpop	{d8-d10}
2401813a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    tExpSmooth_setVal(&x->pickNoise, amplitude);
2401813e:	f7f9 bea9 	b.w	24011e94 <tExpSmooth_setVal>
        tLagrangeDelay_tapIn(&x->delayP, val, i);
24018142:	46a0      	mov	r8, r4
24018144:	e768      	b.n	24018018 <tTString_pluck+0x188>
24018146:	bf00      	nop
24018148:	3a83126f 	.word	0x3a83126f
2401814c:	3e511111 	.word	0x3e511111
24018150:	00000000 	.word	0x00000000

24018154 <tTString_setHarmonicity>:
	x->wavelength = waveLength;
}
void    tTString_setSampleRate         (tTString* const, Lfloat sr);

void    tTString_setHarmonicity         (tTString* const bw, Lfloat B, Lfloat freq)
{
24018154:	b510      	push	{r4, lr}
24018156:	ed2d 8b02 	vpush	{d8}
    _tTString* x = *bw;
2401815a:	6804      	ldr	r4, [r0, #0]
{
2401815c:	eeb0 8a60 	vmov.f32	s16, s1
24018160:	eef0 8a40 	vmov.f32	s17, s0
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, B, freq * x->invOversampling, x->oversampling);
24018164:	edd4 7a01 	vldr	s15, [r4, #4]
24018168:	f104 0054 	add.w	r0, r4, #84	; 0x54
2401816c:	edd4 0a02 	vldr	s1, [r4, #8]
24018170:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
24018174:	ee68 0a20 	vmul.f32	s1, s16, s1
24018178:	f7f9 ffae 	bl	240120d8 <tThiranAllpassSOCascade_setCoeff>
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, B * 0.25f, freq * x->invOversampling, x->oversampling);
2401817c:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
24018180:	edd4 0a02 	vldr	s1, [r4, #8]
24018184:	f104 0058 	add.w	r0, r4, #88	; 0x58
24018188:	ed94 7a01 	vldr	s14, [r4, #4]
2401818c:	ee68 0a20 	vmul.f32	s1, s16, s1
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, B, freq * x->invOversampling, x->oversampling);
24018190:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, B * 0.25f, freq * x->invOversampling, x->oversampling);
24018194:	eeb8 1ac7 	vcvt.f32.s32	s2, s14
24018198:	ee28 0aa7 	vmul.f32	s0, s17, s15
2401819c:	f7f9 ff9c 	bl	240120d8 <tThiranAllpassSOCascade_setCoeff>
240181a0:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
}
240181a4:	ecbd 8b02 	vpop	{d8}
240181a8:	bd10      	pop	{r4, pc}
240181aa:	bf00      	nop

240181ac <tTString_setInharmonic>:

void    tTString_setInharmonic         (tTString* const bw, uint32_t onOrOff)
{
    _tTString* x = *bw;
    x->inharmonic = onOrOff;
    x->inharmonicMult = (Lfloat)onOrOff;
240181ac:	ee07 1a90 	vmov	s15, r1
    _tTString* x = *bw;
240181b0:	6803      	ldr	r3, [r0, #0]
    x->inharmonicMult = (Lfloat)onOrOff;
240181b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    x->inharmonic = onOrOff;
240181b6:	f8c3 1148 	str.w	r1, [r3, #328]	; 0x148
    x->inharmonicMult = (Lfloat)onOrOff;
240181ba:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
}
240181be:	4770      	bx	lr

240181c0 <glottis_setup_waveform>:




void glottis_setup_waveform(glottis* const glo)
{
240181c0:	b510      	push	{r4, lr}
	_glottis* glot = *glo;
240181c2:	6804      	ldr	r4, [r0, #0]

    Lfloat alpha;
    Lfloat E0;


    glot->Rd = 3.0f * (1.0f - glot->tenseness);
240181c4:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
240181c8:	eddf 3a53 	vldr	s7, [pc, #332]	; 24018318 <glottis_setup_waveform+0x158>
    if(Rd < 0.5f) Rd = 0.5f;
    if(Rd > 2.7f) Rd = 2.7f;


    Ra = -0.01f + 0.048f*Rd;
    Rk = 0.224f + 0.118f*Rd;
240181cc:	eddf 6a53 	vldr	s13, [pc, #332]	; 2401831c <glottis_setup_waveform+0x15c>
240181d0:	ed9f 6a53 	vldr	s12, [pc, #332]	; 24018320 <glottis_setup_waveform+0x160>
    Ra = -0.01f + 0.048f*Rd;
240181d4:	ed9f 4a53 	vldr	s8, [pc, #332]	; 24018324 <glottis_setup_waveform+0x164>
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
240181d8:	eddf 4a53 	vldr	s9, [pc, #332]	; 24018328 <glottis_setup_waveform+0x168>
240181dc:	eddf 5a53 	vldr	s11, [pc, #332]	; 2401832c <glottis_setup_waveform+0x16c>
{
240181e0:	ed2d 8b08 	vpush	{d8-d11}
    glot->Rd = 3.0f * (1.0f - glot->tenseness);
240181e4:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
240181e8:	edd4 7a02 	vldr	s15, [r4, #8]
240181ec:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
    glot->waveform_length = 1.0f / glot->freq;
240181f0:	ed94 7a01 	vldr	s14, [r4, #4]


    Ta = Ra;
    Tp = (Lfloat)1.0f / (2.0f*Rg);
    Te = Tp + Tp*Rk;
240181f4:	ed9f 8a4e 	vldr	s16, [pc, #312]	; 24018330 <glottis_setup_waveform+0x170>
    glot->Rd = 3.0f * (1.0f - glot->tenseness);
240181f8:	ee79 7a67 	vsub.f32	s15, s18, s15
    Ra = -0.01f + 0.048f*Rd;
240181fc:	eddf aa4d 	vldr	s21, [pc, #308]	; 24018334 <glottis_setup_waveform+0x174>
    glot->Rd = 3.0f * (1.0f - glot->tenseness);
24018200:	ee67 7a85 	vmul.f32	s15, s15, s10
    glot->waveform_length = 1.0f / glot->freq;
24018204:	ee89 5a07 	vdiv.f32	s10, s18, s14
24018208:	fe87 7a8b 	vmaxnm.f32	s14, s15, s22
2401820c:	fe87 7a63 	vminnm.f32	s14, s14, s7
    glot->Rd = 3.0f * (1.0f - glot->tenseness);
24018210:	edc4 7a03 	vstr	s15, [r4, #12]
    Rk = 0.224f + 0.118f*Rd;
24018214:	eea7 6a26 	vfma.f32	s12, s14, s13
    Te = Tp + Tp*Rk;
24018218:	eea7 8a26 	vfma.f32	s16, s14, s13
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
2401821c:	eef0 6a4b 	vmov.f32	s13, s22
    Ra = -0.01f + 0.048f*Rd;
24018220:	eee7 aa04 	vfma.f32	s21, s14, s8
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
24018224:	eee6 6a24 	vfma.f32	s13, s12, s9



    epsilon = (Lfloat)1.0f / Ta;
24018228:	eec9 ba2a 	vdiv.f32	s23, s18, s21
    glot->waveform_length = 1.0f / glot->freq;
2401822c:	ed84 5a04 	vstr	s10, [r4, #16]
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
24018230:	ee6a 7ae6 	vnmul.f32	s15, s21, s13
24018234:	ee66 6a86 	vmul.f32	s13, s13, s12
24018238:	eee7 7a25 	vfma.f32	s15, s14, s11
    Tp = (Lfloat)1.0f / (2.0f*Rg);
2401823c:	ee77 7aa7 	vadd.f32	s15, s15, s15
24018240:	ee87 aaa6 	vdiv.f32	s20, s15, s13
    Te = Tp + Tp*Rk;
24018244:	ee28 8a0a 	vmul.f32	s16, s16, s20
    shift = fasterexpf(-epsilon * (1.0f - Te));
24018248:	ee38 0a49 	vsub.f32	s0, s16, s18
2401824c:	ee20 0a2b 	vmul.f32	s0, s0, s23
24018250:	f7fc fbe2 	bl	24014a18 <fasterexpf>
    rhs_integral = rhs_integral / delta;
    lower_integral = - (Te - Tp) / 2.0f + rhs_integral;
    upper_integral = -lower_integral;


    omega = M_PI / Tp;
24018254:	eeb7 5aca 	vcvt.f64.f32	d5, s20
    rhs_integral = (Lfloat)(1.0f/epsilon) * (shift-1.0f) + (1.0f-Te)*shift;
24018258:	ee79 7a48 	vsub.f32	s15, s18, s16
    lower_integral = - (Te - Tp) / 2.0f + rhs_integral;
2401825c:	ee3a 7a48 	vsub.f32	s14, s20, s16
    shift = fasterexpf(-epsilon * (1.0f - Te));
24018260:	eef0 9a40 	vmov.f32	s19, s0
    rhs_integral = (Lfloat)(1.0f/epsilon) * (shift-1.0f) + (1.0f-Te)*shift;
24018264:	ee67 7a80 	vmul.f32	s15, s15, s0
    omega = M_PI / Tp;
24018268:	ed9f 4b27 	vldr	d4, [pc, #156]	; 24018308 <glottis_setup_waveform+0x148>
2401826c:	ee84 6b05 	vdiv.f64	d6, d4, d5
    rhs_integral = (Lfloat)(1.0f/epsilon) * (shift-1.0f) + (1.0f-Te)*shift;
24018270:	ee70 5a49 	vsub.f32	s11, s0, s18
    delta = 1.0f - shift;
24018274:	ee39 9a40 	vsub.f32	s18, s18, s0
    rhs_integral = (Lfloat)(1.0f/epsilon) * (shift-1.0f) + (1.0f-Te)*shift;
24018278:	eee5 7aaa 	vfma.f32	s15, s11, s21
    rhs_integral = rhs_integral / delta;
2401827c:	eec7 8a89 	vdiv.f32	s17, s15, s18
    lower_integral = - (Te - Tp) / 2.0f + rhs_integral;
24018280:	eee7 8a0b 	vfma.f32	s17, s14, s22
    omega = M_PI / Tp;
24018284:	eef7 abc6 	vcvt.f32.f64	s21, d6
    s = fast_sinf2(omega * Te);
24018288:	ee28 0a2a 	vmul.f32	s0, s16, s21
2401828c:	f7fc fc04 	bl	24014a98 <fast_sinf2>

    y = -M_PI * s * upper_integral / (Tp*2.0f);
24018290:	eeb7 5ac0 	vcvt.f64.f32	d5, s0
    upper_integral = -lower_integral;
24018294:	eeb1 7a68 	vneg.f32	s14, s17
    y = -M_PI * s * upper_integral / (Tp*2.0f);
24018298:	ee3a 6a0a 	vadd.f32	s12, s20, s20
    s = fast_sinf2(omega * Te);
2401829c:	eef0 8a40 	vmov.f32	s17, s0
    y = -M_PI * s * upper_integral / (Tp*2.0f);
240182a0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
240182a4:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
240182a8:	ed9f 4b19 	vldr	d4, [pc, #100]	; 24018310 <glottis_setup_waveform+0x150>
240182ac:	ee25 5b04 	vmul.f64	d5, d5, d4
240182b0:	ee27 7b05 	vmul.f64	d7, d7, d5
240182b4:	ee87 0b06 	vdiv.f64	d0, d7, d6
    z = logf(y);
240182b8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
240182bc:	f001 fb0c 	bl	240198d8 <logf>
    alpha = z / (Tp/2.0f - Te);
240182c0:	eef0 7a48 	vmov.f32	s15, s16
240182c4:	eeda 7a0b 	vfnms.f32	s15, s20, s22
240182c8:	ee80 aa27 	vdiv.f32	s20, s0, s15
    E0 = -1.0f / (s * fasterexpf(alpha*Te));
240182cc:	ee28 0a0a 	vmul.f32	s0, s16, s20
240182d0:	f7fc fba2 	bl	24014a18 <fasterexpf>
240182d4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
240182d8:	ee20 0a28 	vmul.f32	s0, s0, s17



    glot->alpha = alpha;
240182dc:	ed84 aa06 	vstr	s20, [r4, #24]
    glot->E0 = E0;
    glot->epsilon = epsilon;
240182e0:	edc4 ba08 	vstr	s23, [r4, #32]
    glot->shift = shift;
240182e4:	edc4 9a09 	vstr	s19, [r4, #36]	; 0x24
    E0 = -1.0f / (s * fasterexpf(alpha*Te));
240182e8:	eec7 7a00 	vdiv.f32	s15, s14, s0
    glot->delta = delta;
240182ec:	ed84 9a0a 	vstr	s18, [r4, #40]	; 0x28
    glot->Te = Te;
240182f0:	ed84 8a0b 	vstr	s16, [r4, #44]	; 0x2c
    glot->omega = omega;
240182f4:	edc4 aa0c 	vstr	s21, [r4, #48]	; 0x30
    glot->E0 = E0;
240182f8:	edc4 7a07 	vstr	s15, [r4, #28]
}
240182fc:	ecbd 8b08 	vpop	{d8-d11}
24018300:	bd10      	pop	{r4, pc}
24018302:	bf00      	nop
24018304:	f3af 8000 	nop.w
24018308:	54442d18 	.word	0x54442d18
2401830c:	400921fb 	.word	0x400921fb
24018310:	54442d18 	.word	0x54442d18
24018314:	c00921fb 	.word	0xc00921fb
24018318:	402ccccd 	.word	0x402ccccd
2401831c:	3df1a9fc 	.word	0x3df1a9fc
24018320:	3e656042 	.word	0x3e656042
24018324:	3d449ba6 	.word	0x3d449ba6
24018328:	3f99999a 	.word	0x3f99999a
2401832c:	3de147ae 	.word	0x3de147ae
24018330:	3f9cac08 	.word	0x3f9cac08
24018334:	bc23d70a 	.word	0xbc23d70a

24018338 <glottis_compute>:
	mpool_free((char*)glot, glot->mempool);
}


Lfloat glottis_compute(glottis* const glo)
{
24018338:	b530      	push	{r4, r5, lr}
2401833a:	ed2d 8b04 	vpush	{d8-d9}
	_glottis* glot = *glo;
2401833e:	6804      	ldr	r4, [r0, #0]
{
24018340:	b083      	sub	sp, #12
    Lfloat t;
    Lfloat intensity;

    out = 0.0f;
    intensity = 1.0f;
    glot->time_in_waveform += glot->T;
24018342:	edd4 7a05 	vldr	s15, [r4, #20]
24018346:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34

    if(glot->time_in_waveform > glot->waveform_length) {
2401834a:	ed94 7a04 	vldr	s14, [r4, #16]
    glot->time_in_waveform += glot->T;
2401834e:	ee77 7aa6 	vadd.f32	s15, s15, s13
	LEAF* leaf = glot->mempool->leaf;
24018352:	6823      	ldr	r3, [r4, #0]
	_glottis* glot = *glo;
24018354:	9401      	str	r4, [sp, #4]
	LEAF* leaf = glot->mempool->leaf;
24018356:	685d      	ldr	r5, [r3, #4]
    if(glot->time_in_waveform > glot->waveform_length) {
24018358:	eef4 7ac7 	vcmpe.f32	s15, s14
    glot->time_in_waveform += glot->T;
2401835c:	edc4 7a05 	vstr	s15, [r4, #20]
    if(glot->time_in_waveform > glot->waveform_length) {
24018360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018364:	dc4b      	bgt.n	240183fe <glottis_compute+0xc6>
        glot->time_in_waveform -= glot->waveform_length;
        glottis_setup_waveform(&glot);

    }

    t = (glot->time_in_waveform / glot->waveform_length);
24018366:	eec7 8a87 	vdiv.f32	s17, s15, s14

    if(t > glot->Te) {
2401836a:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
2401836e:	eeb4 0ae8 	vcmpe.f32	s0, s17
24018372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018376:	d52d      	bpl.n	240183d4 <glottis_compute+0x9c>
        out = (-fasterexpf(-glot->epsilon * (t-glot->Te)) + glot->shift) / glot->delta;
24018378:	ee30 0a68 	vsub.f32	s0, s0, s17
2401837c:	edd4 7a08 	vldr	s15, [r4, #32]
24018380:	ed94 8a09 	vldr	s16, [r4, #36]	; 0x24
24018384:	ee20 0a27 	vmul.f32	s0, s0, s15
24018388:	f7fc fb46 	bl	24014a18 <fasterexpf>
2401838c:	ee38 0a40 	vsub.f32	s0, s16, s0
24018390:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
24018394:	ee80 8a27 	vdiv.f32	s16, s0, s15
    } else {
        out = glot->E0 * fasterexpf(glot->alpha * t) * fast_sinf2(glot->omega * t);
    }

    noise = (2.0f * leaf->random()) - 1.0f;
24018398:	692b      	ldr	r3, [r5, #16]
2401839a:	4798      	blx	r3
2401839c:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
240183a0:	eeb0 7a40 	vmov.f32	s14, s0

    aspiration = intensity * (1.0f - fastsqrtf(glot->tenseness)) * 0.3f * noise;
240183a4:	ed94 0a02 	vldr	s0, [r4, #8]
    noise = (2.0f * leaf->random()) - 1.0f;
240183a8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
240183ac:	eee7 8a27 	vfma.f32	s17, s14, s15
    aspiration = intensity * (1.0f - fastsqrtf(glot->tenseness)) * 0.3f * noise;
240183b0:	f7fc fb08 	bl	240149c4 <fastsqrtf>
240183b4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0

    aspiration *= 0.2f;

    out += aspiration;
240183b8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 24018418 <glottis_compute+0xe0>
    aspiration = intensity * (1.0f - fastsqrtf(glot->tenseness)) * 0.3f * noise;
240183bc:	ee37 0ac0 	vsub.f32	s0, s15, s0
    out += aspiration;
240183c0:	ee20 0a28 	vmul.f32	s0, s0, s17

    return out;
}
240183c4:	eea0 8a07 	vfma.f32	s16, s0, s14
240183c8:	eeb0 0a48 	vmov.f32	s0, s16
240183cc:	b003      	add	sp, #12
240183ce:	ecbd 8b04 	vpop	{d8-d9}
240183d2:	bd30      	pop	{r4, r5, pc}
        out = glot->E0 * fasterexpf(glot->alpha * t) * fast_sinf2(glot->omega * t);
240183d4:	ed94 0a06 	vldr	s0, [r4, #24]
240183d8:	ed94 9a07 	vldr	s18, [r4, #28]
240183dc:	ee28 0a80 	vmul.f32	s0, s17, s0
240183e0:	f7fc fb1a 	bl	24014a18 <fasterexpf>
240183e4:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
240183e8:	eeb0 8a40 	vmov.f32	s16, s0
240183ec:	ee28 0aa7 	vmul.f32	s0, s17, s15
240183f0:	f7fc fb52 	bl	24014a98 <fast_sinf2>
240183f4:	ee28 8a00 	vmul.f32	s16, s16, s0
240183f8:	ee28 8a09 	vmul.f32	s16, s16, s18
240183fc:	e7cc      	b.n	24018398 <glottis_compute+0x60>
        glot->time_in_waveform -= glot->waveform_length;
240183fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
        glottis_setup_waveform(&glot);
24018402:	a801      	add	r0, sp, #4
        glot->time_in_waveform -= glot->waveform_length;
24018404:	edc4 7a05 	vstr	s15, [r4, #20]
        glottis_setup_waveform(&glot);
24018408:	f7ff feda 	bl	240181c0 <glottis_setup_waveform>
    t = (glot->time_in_waveform / glot->waveform_length);
2401840c:	9c01      	ldr	r4, [sp, #4]
2401840e:	edd4 7a05 	vldr	s15, [r4, #20]
24018412:	ed94 7a04 	vldr	s14, [r4, #16]
24018416:	e7a6      	b.n	24018366 <glottis_compute+0x2e>
24018418:	3d75c290 	.word	0x3d75c290

2401841c <tract_calculate_reflections>:
	mpool_free((char*)tr, tr->mempool);
}


void tract_calculate_reflections(tract* const t)
{
2401841c:	b500      	push	{lr}
	_tract* tr = *t;
2401841e:	6803      	ldr	r3, [r0, #0]
	int i;
    Lfloat  sum;

    for(i = 0; i < tr->n; i++) {
24018420:	685a      	ldr	r2, [r3, #4]
24018422:	2a00      	cmp	r2, #0
24018424:	dd30      	ble.n	24018488 <tract_calculate_reflections+0x6c>
24018426:	2200      	movs	r2, #0
        tr->A[i] = tr->diameter[i] * tr->diameter[i];
24018428:	68d8      	ldr	r0, [r3, #12]
2401842a:	6b59      	ldr	r1, [r3, #52]	; 0x34
2401842c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
24018430:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    for(i = 0; i < tr->n; i++) {
24018434:	3201      	adds	r2, #1
        tr->A[i] = tr->diameter[i] * tr->diameter[i];
24018436:	edd0 7a00 	vldr	s15, [r0]
2401843a:	ee67 7aa7 	vmul.f32	s15, s15, s15
2401843e:	edc1 7a00 	vstr	s15, [r1]
    for(i = 0; i < tr->n; i++) {
24018442:	6859      	ldr	r1, [r3, #4]
24018444:	4291      	cmp	r1, r2
24018446:	dcef      	bgt.n	24018428 <tract_calculate_reflections+0xc>
        /* Calculate area from diameter squared*/
    }

    for(i = 1; i < tr->n; i++) {
24018448:	2901      	cmp	r1, #1
2401844a:	dd1d      	ble.n	24018488 <tract_calculate_reflections+0x6c>
2401844c:	2204      	movs	r2, #4
2401844e:	f04f 0c01 	mov.w	ip, #1
        tr->reflection[i] = tr->new_reflection[i];
        if(tr->A[i] == 0) {
            tr->new_reflection[i] = 0.999f; /* to prevent bad behavior if 0 */
24018452:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 24018524 <tract_calculate_reflections+0x108>
        tr->reflection[i] = tr->new_reflection[i];
24018456:	e9d3 1009 	ldrd	r1, r0, [r3, #36]	; 0x24
2401845a:	4410      	add	r0, r2
2401845c:	4411      	add	r1, r2
2401845e:	6800      	ldr	r0, [r0, #0]
24018460:	6008      	str	r0, [r1, #0]
        if(tr->A[i] == 0) {
24018462:	6b59      	ldr	r1, [r3, #52]	; 0x34
24018464:	4411      	add	r1, r2
24018466:	edd1 7a00 	vldr	s15, [r1]
2401846a:	eef5 7a40 	vcmp.f32	s15, #0.0
2401846e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018472:	d143      	bne.n	240184fc <tract_calculate_reflections+0xe0>
            tr->new_reflection[i] = 0.999f; /* to prevent bad behavior if 0 */
24018474:	6a99      	ldr	r1, [r3, #40]	; 0x28
    for(i = 1; i < tr->n; i++) {
24018476:	f10c 0c01 	add.w	ip, ip, #1
            tr->new_reflection[i] = 0.999f; /* to prevent bad behavior if 0 */
2401847a:	4411      	add	r1, r2
2401847c:	3204      	adds	r2, #4
2401847e:	f8c1 e000 	str.w	lr, [r1]
    for(i = 1; i < tr->n; i++) {
24018482:	6859      	ldr	r1, [r3, #4]
24018484:	4561      	cmp	r1, ip
24018486:	dce6      	bgt.n	24018456 <tract_calculate_reflections+0x3a>
            tr->new_reflection[i] =
                (tr->A[i - 1] - tr->A[i]) / (tr->A[i - 1] + tr->A[i]);
        }
    }

    tr->reflection_left = tr->new_reflection_left;
24018488:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
    tr->reflection_right = tr->new_reflection_right;
    tr->reflection_nose = tr->new_reflection_nose;

    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
    Lfloat invSum = 1.0f / sum;
2401848a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    tr->reflection_right = tr->new_reflection_right;
2401848e:	f8d3 c080 	ldr.w	ip, [r3, #128]	; 0x80
    tr->new_reflection_left = (Lfloat)(2.0f * tr->A[tr->nose_start] - sum) * invSum;
24018492:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
    tr->reflection_left = tr->new_reflection_left;
24018496:	6719      	str	r1, [r3, #112]	; 0x70
    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
24018498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    tr->reflection_nose = tr->new_reflection_nose;
2401849a:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
2401849e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    tr->reflection_right = tr->new_reflection_right;
240184a0:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
    tr->reflection_nose = tr->new_reflection_nose;
240184a4:	6799      	str	r1, [r3, #120]	; 0x78
    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
240184a6:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
240184aa:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
240184ac:	eddc 5a00 	vldr	s11, [ip]
240184b0:	edd1 7a00 	vldr	s15, [r1]
240184b4:	ed9c 7a01 	vldr	s14, [ip, #4]
240184b8:	ee75 7aa7 	vadd.f32	s15, s11, s15
240184bc:	ee77 7a87 	vadd.f32	s15, s15, s14
    Lfloat invSum = 1.0f / sum;
240184c0:	ee86 7a27 	vdiv.f32	s14, s12, s15
    tr->new_reflection_left = (Lfloat)(2.0f * tr->A[tr->nose_start] - sum) * invSum;
240184c4:	eeb0 6a67 	vmov.f32	s12, s15
240184c8:	ee95 6aa6 	vfnms.f32	s12, s11, s13
240184cc:	ee26 6a07 	vmul.f32	s12, s12, s14
240184d0:	ed83 6a1f 	vstr	s12, [r3, #124]	; 0x7c
    tr->new_reflection_right = (Lfloat)(2.0f * tr->A[tr->nose_start + 1] - sum) * invSum;
240184d4:	eeb0 6a67 	vmov.f32	s12, s15
240184d8:	eddc 5a01 	vldr	s11, [ip, #4]
240184dc:	ee95 6aa6 	vfnms.f32	s12, s11, s13
240184e0:	ee26 6a07 	vmul.f32	s12, s12, s14
240184e4:	ed83 6a20 	vstr	s12, [r3, #128]	; 0x80
    tr->new_reflection_nose = (Lfloat)(2.0f * tr->noseA[0] - sum) * invSum;
240184e8:	ed91 6a00 	vldr	s12, [r1]
240184ec:	eed6 7a26 	vfnms.f32	s15, s12, s13
240184f0:	ee67 7a87 	vmul.f32	s15, s15, s14
240184f4:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
}
240184f8:	f85d fb04 	ldr.w	pc, [sp], #4
                (tr->A[i - 1] - tr->A[i]) / (tr->A[i - 1] + tr->A[i]);
240184fc:	ed11 7a01 	vldr	s14, [r1, #-4]
    for(i = 1; i < tr->n; i++) {
24018500:	f10c 0c01 	add.w	ip, ip, #1
            tr->new_reflection[i] =
24018504:	6a99      	ldr	r1, [r3, #40]	; 0x28
                (tr->A[i - 1] - tr->A[i]) / (tr->A[i - 1] + tr->A[i]);
24018506:	ee77 6a67 	vsub.f32	s13, s14, s15
2401850a:	ee77 7a87 	vadd.f32	s15, s15, s14
            tr->new_reflection[i] =
2401850e:	4411      	add	r1, r2
    for(i = 1; i < tr->n; i++) {
24018510:	3204      	adds	r2, #4
                (tr->A[i - 1] - tr->A[i]) / (tr->A[i - 1] + tr->A[i]);
24018512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
            tr->new_reflection[i] =
24018516:	ed81 7a00 	vstr	s14, [r1]
    for(i = 1; i < tr->n; i++) {
2401851a:	6859      	ldr	r1, [r3, #4]
2401851c:	4561      	cmp	r1, ip
2401851e:	dc9a      	bgt.n	24018456 <tract_calculate_reflections+0x3a>
24018520:	e7b2      	b.n	24018488 <tract_calculate_reflections+0x6c>
24018522:	bf00      	nop
24018524:	3f7fbe77 	.word	0x3f7fbe77

24018528 <tract_initToPool>:
{
24018528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2401852c:	ed2d 8b04 	vpush	{d8-d9}
24018530:	ee08 1a10 	vmov	s16, r1
	_tMempool* m = *mp;
24018534:	681b      	ldr	r3, [r3, #0]
{
24018536:	b082      	sub	sp, #8
24018538:	4605      	mov	r5, r0
    Lfloat n = numTractSections;
2401853a:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
2401853e:	4619      	mov	r1, r3
24018540:	20d4      	movs	r0, #212	; 0xd4
{
24018542:	4617      	mov	r7, r2
	_tMempool* m = *mp;
24018544:	9300      	str	r3, [sp, #0]
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
24018546:	f7fc fedd 	bl	24015304 <mpool_calloc>
    tr->nose_length = n*0.636363636363636f; //28
2401854a:	eddf 3acc 	vldr	s7, [pc, #816]	; 2401887c <tract_initToPool+0x354>
    tr->nose_start = (n - tr->nose_length) + 1; //17
2401854e:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
    tr->tip_start = n*0.727272727272727f;
24018552:	ed9f 7acb 	vldr	s14, [pc, #812]	; 24018880 <tract_initToPool+0x358>
	tr->turbuluencePointPosition[1] = n* 0.5f;
24018556:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    tr->blade_start = n*0.227272727272727f;
2401855a:	eddf 7aca 	vldr	s15, [pc, #808]	; 24018884 <tract_initToPool+0x35c>
    tr->nose_length = n*0.636363636363636f; //28
2401855e:	ee68 3a23 	vmul.f32	s7, s16, s7
    tr->tip_start = n*0.727272727272727f;
24018562:	ee28 7a07 	vmul.f32	s14, s16, s14
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
24018566:	eddf 1ac8 	vldr	s3, [pc, #800]	; 24018888 <tract_initToPool+0x360>
    tr->blade_start = n*0.227272727272727f;
2401856a:	ee68 7a27 	vmul.f32	s15, s16, s15
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
2401856e:	ed9f 5ac7 	vldr	s10, [pc, #796]	; 2401888c <tract_initToPool+0x364>
    tr->nose_length = n*0.636363636363636f; //28
24018572:	eefd 3ae3 	vcvt.s32.f32	s7, s7
    tr->lip_start = n*0.886363636363636f;
24018576:	eddf 6ac6 	vldr	s13, [pc, #792]	; 24018890 <tract_initToPool+0x368>
    tr->tip_start = n*0.727272727272727f;
2401857a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
	tr->mempool = m;
2401857e:	9b00      	ldr	r3, [sp, #0]
    tr->blade_start = n*0.227272727272727f;
24018580:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
24018584:	6028      	str	r0, [r5, #0]
    tr->nose_start = (n - tr->nose_length) + 1; //17
24018586:	eeb8 2ae3 	vcvt.f32.s32	s4, s7
	tr->mempool = m;
2401858a:	6003      	str	r3, [r0, #0]
    tr->nose_start = (n - tr->nose_length) + 1; //17
2401858c:	ee38 6a03 	vadd.f32	s12, s16, s6
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
24018590:	4604      	mov	r4, r0
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
24018592:	eeb8 4ac7 	vcvt.f32.s32	s8, s14
    tr->reflection_left = 0.0f;
24018596:	2300      	movs	r3, #0
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
24018598:	eef8 4ae7 	vcvt.f32.s32	s9, s15
    tr->glottal_reflection = 0.75f;
2401859c:	f04f 5e7d 	mov.w	lr, #1061158912	; 0x3f400000
    tr->nose_start = (n - tr->nose_length) + 1; //17
240185a0:	ee36 6a42 	vsub.f32	s12, s12, s4
    tr->lip_reflection = -0.85f;
240185a4:	f8df c31c 	ldr.w	ip, [pc, #796]	; 240188c4 <tract_initToPool+0x39c>
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
240185a8:	eea8 4a61 	vfms.f32	s8, s16, s3
    tr->movement_speed = 200.0f;
240185ac:	4ab9      	ldr	r2, [pc, #740]	; (24018894 <tract_initToPool+0x36c>)
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
240185ae:	eee8 4a05 	vfma.f32	s9, s16, s10
	tr->turbuluencePointPosition[0] = n* 0.45f;
240185b2:	ed9f 5ab9 	vldr	s10, [pc, #740]	; 24018898 <tract_initToPool+0x370>
    tr->lip_start = n*0.886363636363636f;
240185b6:	ee68 6a26 	vmul.f32	s13, s16, s13
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
240185ba:	00be      	lsls	r6, r7, #2
    tr->n = n; //44
240185bc:	eefd 2ac8 	vcvt.s32.f32	s5, s16
	LEAF* leaf = m->leaf;
240185c0:	9900      	ldr	r1, [sp, #0]
	tr->turbuluencePointPosition[1] = n* 0.5f;
240185c2:	ee68 5a25 	vmul.f32	s11, s16, s11
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
240185c6:	9001      	str	r0, [sp, #4]
    tr->nose_start = (n - tr->nose_length) + 1; //17
240185c8:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    tr->last_obstruction = -1;
240185cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    tr->lip_start = n*0.886363636363636f;
240185d0:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    tr->velum_target = 0.01f;
240185d4:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 240188c8 <tract_initToPool+0x3a0>
	tr->turbuluencePointPosition[0] = n* 0.45f;
240185d8:	ee28 5a05 	vmul.f32	s10, s16, s10
	LEAF* leaf = m->leaf;
240185dc:	684d      	ldr	r5, [r1, #4]
	tr->turbuluencePointDiameter[0] = 1.5f;
240185de:	eef7 9a08 	vmov.f32	s19, #120	; 0x3fc00000  1.5
    tr->nose_start = (n - tr->nose_length) + 1; //17
240185e2:	ed84 6a0f 	vstr	s12, [r4, #60]	; 0x3c
    Lfloat invN = 1.0f / tr->n;
240185e6:	eef8 1ae2 	vcvt.f32.s32	s3, s5
    tr->glottal_reflection = 0.75f;
240185ea:	f8c4 e08c 	str.w	lr, [r4, #140]	; 0x8c
    tr->lip_reflection = -0.85f;
240185ee:	f8c4 c090 	str.w	ip, [r4, #144]	; 0x90
    Lfloat invNoseLength = 1.0f / tr->nose_length;
240185f2:	ee83 9a02 	vdiv.f32	s18, s6, s4
    tr->movement_speed = 200.0f;
240185f6:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
    tr->lip_start = n*0.886363636363636f;
240185fa:	edc4 6a12 	vstr	s13, [r4, #72]	; 0x48
    tr->n = n; //44
240185fe:	edc4 2a01 	vstr	s5, [r4, #4]
    tr->nose_length = n*0.636363636363636f; //28
24018602:	edc4 3a0e 	vstr	s7, [r4, #56]	; 0x38
    tr->tip_start = n*0.727272727272727f;
24018606:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
    Lfloat invN = 1.0f / tr->n;
2401860a:	eec3 8a21 	vdiv.f32	s17, s6, s3
    tr->blade_start = n*0.227272727272727f;
2401860e:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
24018612:	ed84 4a13 	vstr	s8, [r4, #76]	; 0x4c
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
24018616:	edc4 4a14 	vstr	s9, [r4, #80]	; 0x50
	tr->turbuluencePointPosition[0] = n* 0.45f;
2401861a:	ed84 5a2f 	vstr	s10, [r4, #188]	; 0xbc
	tr->turbuluencePointPosition[1] = n* 0.5f;
2401861e:	edc4 5a30 	vstr	s11, [r4, #192]	; 0xc0
    tr->reflection_left = 0.0f;
24018622:	6723      	str	r3, [r4, #112]	; 0x70
    tr->reflection_right = 0.0f;
24018624:	6763      	str	r3, [r4, #116]	; 0x74
    tr->reflection_nose = 0.0f;
24018626:	67a3      	str	r3, [r4, #120]	; 0x78
    tr->new_reflection_left = 0.0f;
24018628:	67e3      	str	r3, [r4, #124]	; 0x7c
    tr->new_reflection_right= 0.0f;
2401862a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    tr->new_reflection_nose = 0.0f;
2401862e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    tr->lip_output = 0.0f;
24018632:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    tr->nose_output = 0.0f;
24018636:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    tr->maxNumTractSections = maxNumTractSections;
2401863a:	60a7      	str	r7, [r4, #8]
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
2401863c:	1d37      	adds	r7, r6, #4
    tr->last_obstruction = -1;
2401863e:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
24018642:	4630      	mov	r0, r6
    tr->velum_target = 0.01f;
24018644:	f8c4 8088 	str.w	r8, [r4, #136]	; 0x88
	tr->turbuluencePointDiameter[0] = 1.5f;
24018648:	edc4 9a31 	vstr	s19, [r4, #196]	; 0xc4
	tr->turbuluencePointDiameter[1] = 1.5f;
2401864c:	edc4 9a32 	vstr	s19, [r4, #200]	; 0xc8
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
24018650:	f7fc fe58 	bl	24015304 <mpool_calloc>
    tr->rest_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
24018654:	9900      	ldr	r1, [sp, #0]
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
24018656:	60e0      	str	r0, [r4, #12]
    tr->rest_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
24018658:	4630      	mov	r0, r6
2401865a:	f7fc fe53 	bl	24015304 <mpool_calloc>
    tr->target_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401865e:	9900      	ldr	r1, [sp, #0]
    tr->rest_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
24018660:	6120      	str	r0, [r4, #16]
    tr->target_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
24018662:	4630      	mov	r0, r6
24018664:	f7fc fe4e 	bl	24015304 <mpool_calloc>
    tr->new_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
24018668:	9900      	ldr	r1, [sp, #0]
    tr->target_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401866a:	6160      	str	r0, [r4, #20]
    tr->new_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401866c:	4630      	mov	r0, r6
2401866e:	f7fc fe49 	bl	24015304 <mpool_calloc>
    tr->L = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
24018672:	9900      	ldr	r1, [sp, #0]
    tr->new_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
24018674:	61a0      	str	r0, [r4, #24]
    tr->L = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
24018676:	4630      	mov	r0, r6
24018678:	f7fc fe44 	bl	24015304 <mpool_calloc>
    tr->R = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401867c:	9900      	ldr	r1, [sp, #0]
    tr->L = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401867e:	6220      	str	r0, [r4, #32]
    tr->R = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
24018680:	4630      	mov	r0, r6
24018682:	f7fc fe3f 	bl	24015304 <mpool_calloc>
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
24018686:	9900      	ldr	r1, [sp, #0]
    tr->R = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
24018688:	61e0      	str	r0, [r4, #28]
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
2401868a:	4638      	mov	r0, r7
2401868c:	f7fc fe3a 	bl	24015304 <mpool_calloc>
    tr->new_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
24018690:	9900      	ldr	r1, [sp, #0]
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
24018692:	6260      	str	r0, [r4, #36]	; 0x24
    tr->new_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
24018694:	4638      	mov	r0, r7
24018696:	f7fc fe35 	bl	24015304 <mpool_calloc>
    tr->junction_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
2401869a:	9900      	ldr	r1, [sp, #0]
    tr->new_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
2401869c:	62a0      	str	r0, [r4, #40]	; 0x28
    tr->junction_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
2401869e:	4638      	mov	r0, r7
240186a0:	f7fc fe30 	bl	24015304 <mpool_calloc>
    tr->junction_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
240186a4:	9900      	ldr	r1, [sp, #0]
    tr->junction_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
240186a6:	62e0      	str	r0, [r4, #44]	; 0x2c
    tr->junction_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
240186a8:	4638      	mov	r0, r7
240186aa:	f7fc fe2b 	bl	24015304 <mpool_calloc>
    tr->A = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
240186ae:	9900      	ldr	r1, [sp, #0]
    tr->junction_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
240186b0:	6320      	str	r0, [r4, #48]	; 0x30
    tr->A = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
240186b2:	4630      	mov	r0, r6
240186b4:	f7fc fe26 	bl	24015304 <mpool_calloc>
    tr->noseL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
240186b8:	9900      	ldr	r1, [sp, #0]
    tr->A = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
240186ba:	6360      	str	r0, [r4, #52]	; 0x34
    tr->noseL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
240186bc:	4630      	mov	r0, r6
240186be:	f7fc fe21 	bl	24015304 <mpool_calloc>
    tr->noseR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
240186c2:	9900      	ldr	r1, [sp, #0]
    tr->noseL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
240186c4:	6560      	str	r0, [r4, #84]	; 0x54
    tr->noseR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
240186c6:	4630      	mov	r0, r6
240186c8:	f7fc fe1c 	bl	24015304 <mpool_calloc>
    tr->nose_junc_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
240186cc:	9900      	ldr	r1, [sp, #0]
    tr->noseR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
240186ce:	65a0      	str	r0, [r4, #88]	; 0x58
    tr->nose_junc_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
240186d0:	4638      	mov	r0, r7
240186d2:	f7fc fe17 	bl	24015304 <mpool_calloc>
240186d6:	4603      	mov	r3, r0
    tr->nose_junc_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
240186d8:	9900      	ldr	r1, [sp, #0]
240186da:	4638      	mov	r0, r7
    tr->nose_junc_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
240186dc:	65e3      	str	r3, [r4, #92]	; 0x5c
    tr->nose_junc_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
240186de:	f7fc fe11 	bl	24015304 <mpool_calloc>
    tr->nose_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
240186e2:	9900      	ldr	r1, [sp, #0]
    tr->nose_junc_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
240186e4:	6620      	str	r0, [r4, #96]	; 0x60
    tr->nose_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
240186e6:	4630      	mov	r0, r6
240186e8:	f7fc fe0c 	bl	24015304 <mpool_calloc>
    tr->nose_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
240186ec:	9900      	ldr	r1, [sp, #0]
    tr->nose_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
240186ee:	66a0      	str	r0, [r4, #104]	; 0x68
    tr->nose_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
240186f0:	4630      	mov	r0, r6
240186f2:	f7fc fe07 	bl	24015304 <mpool_calloc>
240186f6:	4603      	mov	r3, r0
    tr->noseA = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
240186f8:	9900      	ldr	r1, [sp, #0]
240186fa:	4630      	mov	r0, r6
    tr->nose_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
240186fc:	6663      	str	r3, [r4, #100]	; 0x64
    tr->noseA = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
240186fe:	f7fc fe01 	bl	24015304 <mpool_calloc>
    for(i = 0; i < tr->n; i++) {
24018702:	6863      	ldr	r3, [r4, #4]
    tr->noseA = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
24018704:	66e0      	str	r0, [r4, #108]	; 0x6c
    for(i = 0; i < tr->n; i++) {
24018706:	2b00      	cmp	r3, #0
24018708:	dd43      	ble.n	24018792 <tract_initToPool+0x26a>
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
2401870a:	eebe 4a00 	vmov.f32	s8, #224	; 0xbf000000 -0.5
    for(i = 0; i < tr->n; i++) {
2401870e:	2200      	movs	r2, #0
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
24018710:	eddf 4a62 	vldr	s9, [pc, #392]	; 2401889c <tract_initToPool+0x374>
            diameter = 0.6f;
24018714:	ed9f 5a62 	vldr	s10, [pc, #392]	; 240188a0 <tract_initToPool+0x378>
        } else if( i < (int)((n*0.272727272727273f) * (Lfloat)tr->n * invN)) { //was 12
24018718:	eddf 5a62 	vldr	s11, [pc, #392]	; 240188a4 <tract_initToPool+0x37c>
            diameter = 1.1f;
2401871c:	eddf 3a62 	vldr	s7, [pc, #392]	; 240188a8 <tract_initToPool+0x380>
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
24018720:	ee07 3a90 	vmov	s15, r3
24018724:	eef0 6a44 	vmov.f32	s13, s8
            diameter = 0.6f;
24018728:	eeb0 7a45 	vmov.f32	s14, s10
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
2401872c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24018730:	ee27 6aa4 	vmul.f32	s12, s15, s9
        } else if( i < (int)((n*0.272727272727273f) * (Lfloat)tr->n * invN)) { //was 12
24018734:	ee67 7aa5 	vmul.f32	s15, s15, s11
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
24018738:	ee26 6a08 	vmul.f32	s12, s12, s16
        } else if( i < (int)((n*0.272727272727273f) * (Lfloat)tr->n * invN)) { //was 12
2401873c:	ee67 7a88 	vmul.f32	s15, s15, s16
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
24018740:	eee8 6a86 	vfma.f32	s13, s17, s12
        } else if( i < (int)((n*0.272727272727273f) * (Lfloat)tr->n * invN)) { //was 12
24018744:	ee67 7aa8 	vmul.f32	s15, s15, s17
24018748:	eefd 7ae7 	vcvt.s32.f32	s15, s15
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
2401874c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
24018750:	ee16 3a90 	vmov	r3, s13
24018754:	4293      	cmp	r3, r2
24018756:	dc04      	bgt.n	24018762 <tract_initToPool+0x23a>
            diameter = 1.1f;
24018758:	ee17 3a90 	vmov	r3, s15
2401875c:	4293      	cmp	r3, r2
2401875e:	fe33 7aa9 	vselgt.f32	s14, s7, s19
            tr->new_diameter[i] = diameter;
24018762:	69a3      	ldr	r3, [r4, #24]
24018764:	eb03 0382 	add.w	r3, r3, r2, lsl #2
24018768:	ed83 7a00 	vstr	s14, [r3]
            tr->target_diameter[i] =
2401876c:	6963      	ldr	r3, [r4, #20]
2401876e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
24018772:	ed83 7a00 	vstr	s14, [r3]
            tr->rest_diameter[i] =
24018776:	6923      	ldr	r3, [r4, #16]
24018778:	eb03 0382 	add.w	r3, r3, r2, lsl #2
2401877c:	ed83 7a00 	vstr	s14, [r3]
        tr->diameter[i] =
24018780:	68e3      	ldr	r3, [r4, #12]
24018782:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for(i = 0; i < tr->n; i++) {
24018786:	3201      	adds	r2, #1
        tr->diameter[i] =
24018788:	ed83 7a00 	vstr	s14, [r3]
    for(i = 0; i < tr->n; i++) {
2401878c:	6863      	ldr	r3, [r4, #4]
2401878e:	4293      	cmp	r3, r2
24018790:	dcc6      	bgt.n	24018720 <tract_initToPool+0x1f8>
	for(i = 0; i < tr->nose_length; i++) {
24018792:	6ba3      	ldr	r3, [r4, #56]	; 0x38
24018794:	2b00      	cmp	r3, #0
24018796:	dd2f      	ble.n	240187f8 <tract_initToPool+0x2d0>
		if(d < 1.0f) {
24018798:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
	for(i = 0; i < tr->nose_length; i++) {
2401879c:	2300      	movs	r3, #0
			diameter = 0.5f + 1.5f*(2.0f-d);
2401879e:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
		diameter = MIN(diameter, 1.9f);
240187a2:	ed9f 4a42 	vldr	s8, [pc, #264]	; 240188ac <tract_initToPool+0x384>
			diameter = 0.5f + 1.5f*(2.0f-d);
240187a6:	eef7 3a08 	vmov.f32	s7, #120	; 0x3fc00000  1.5
			diameter = 0.4f + 1.6f * d;
240187aa:	eddf 4a41 	vldr	s9, [pc, #260]	; 240188b0 <tract_initToPool+0x388>
240187ae:	ed9f 5a41 	vldr	s10, [pc, #260]	; 240188b4 <tract_initToPool+0x38c>
		d = 2.0f * ((Lfloat)i * invNoseLength);
240187b2:	ee07 3a90 	vmov	s15, r3
			diameter = 0.4f + 1.6f * d;
240187b6:	eef0 6a45 	vmov.f32	s13, s10
		tr->nose_diameter[i] = diameter;
240187ba:	6ea2      	ldr	r2, [r4, #104]	; 0x68
		d = 2.0f * ((Lfloat)i * invNoseLength);
240187bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240187c0:	ee67 7a89 	vmul.f32	s15, s15, s18
240187c4:	ee37 7aa7 	vadd.f32	s14, s15, s15
		if(d < 1.0f) {
240187c8:	eef4 7ac6 	vcmpe.f32	s15, s12
			diameter = 0.5f + 1.5f*(2.0f-d);
240187cc:	eef0 7a46 	vmov.f32	s15, s12
240187d0:	ee73 5a47 	vsub.f32	s11, s6, s14
		if(d < 1.0f) {
240187d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			diameter = 0.4f + 1.6f * d;
240187d8:	eee7 6a24 	vfma.f32	s13, s14, s9
			diameter = 0.5f + 1.5f*(2.0f-d);
240187dc:	eee5 7aa3 	vfma.f32	s15, s11, s7
		if(d < 1.0f) {
240187e0:	f140 80e0 	bpl.w	240189a4 <tract_initToPool+0x47c>
		tr->nose_diameter[i] = diameter;
240187e4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
		diameter = MIN(diameter, 1.9f);
240187e8:	fec6 6ac4 	vminnm.f32	s13, s13, s8
	for(i = 0; i < tr->nose_length; i++) {
240187ec:	3301      	adds	r3, #1
		tr->nose_diameter[i] = diameter;
240187ee:	edc2 6a00 	vstr	s13, [r2]
	for(i = 0; i < tr->nose_length; i++) {
240187f2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
240187f4:	429a      	cmp	r2, r3
240187f6:	dcdc      	bgt.n	240187b2 <tract_initToPool+0x28a>
	tSVF_initToPool(&tr->fricativeNoiseFilt[0], SVFTypeBandpass, 1010.0f, 0.5f, &m);
240187f8:	f104 00ac 	add.w	r0, r4, #172	; 0xac
240187fc:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
24018800:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 240188b8 <tract_initToPool+0x390>
24018804:	2102      	movs	r1, #2
24018806:	466a      	mov	r2, sp
24018808:	f7f9 feee 	bl	240125e8 <tSVF_initToPool>
	tSVF_initToPool(&tr->fricativeNoiseFilt[1], SVFTypeBandpass, 990.0f, 0.5f, &m);
2401880c:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
24018810:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
24018814:	466a      	mov	r2, sp
24018816:	ed9f 0a29 	vldr	s0, [pc, #164]	; 240188bc <tract_initToPool+0x394>
2401881a:	2102      	movs	r1, #2
2401881c:	f7f9 fee4 	bl	240125e8 <tSVF_initToPool>
	tSVF_initToPool(&tr->aspirationNoiseFilt, SVFTypeBandpass, 500.0f, 0.5f, &m);
24018820:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
24018824:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
24018828:	466a      	mov	r2, sp
2401882a:	ed9f 0a25 	vldr	s0, [pc, #148]	; 240188c0 <tract_initToPool+0x398>
2401882e:	2102      	movs	r1, #2
24018830:	f7f9 feda 	bl	240125e8 <tSVF_initToPool>
	tNoise_initToPool(&tr->whiteNoise, WhiteNoise, &m);
24018834:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
24018838:	466a      	mov	r2, sp
2401883a:	2100      	movs	r1, #0
2401883c:	f7fd fa22 	bl	24015c84 <tNoise_initToPool>
    tract_calculate_reflections(&tr);
24018840:	a801      	add	r0, sp, #4
24018842:	f7ff fdeb 	bl	2401841c <tract_calculate_reflections>

}

void tract_calculate_nose_reflections(tract* const t)
{
	_tract* tr = *t;
24018846:	9c01      	ldr	r4, [sp, #4]
	int i;

    for(i = 0; i < tr->nose_length; i++) {
24018848:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2401884a:	2b00      	cmp	r3, #0
2401884c:	dd59      	ble.n	24018902 <tract_initToPool+0x3da>
2401884e:	2300      	movs	r3, #0
        tr->noseA[i] = tr->nose_diameter[i] * tr->nose_diameter[i];
24018850:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
24018854:	eb01 0183 	add.w	r1, r1, r3, lsl #2
24018858:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for(i = 0; i < tr->nose_length; i++) {
2401885c:	3301      	adds	r3, #1
        tr->noseA[i] = tr->nose_diameter[i] * tr->nose_diameter[i];
2401885e:	edd1 7a00 	vldr	s15, [r1]
24018862:	ee67 7aa7 	vmul.f32	s15, s15, s15
24018866:	edc2 7a00 	vstr	s15, [r2]
    for(i = 0; i < tr->nose_length; i++) {
2401886a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
2401886c:	4293      	cmp	r3, r2
2401886e:	dbef      	blt.n	24018850 <tract_initToPool+0x328>
    }

    for(i = 1; i < tr->nose_length; i++) {
24018870:	2a01      	cmp	r2, #1
24018872:	dd46      	ble.n	24018902 <tract_initToPool+0x3da>
24018874:	2000      	movs	r0, #0
24018876:	2301      	movs	r3, #1
24018878:	e02a      	b.n	240188d0 <tract_initToPool+0x3a8>
2401887a:	bf00      	nop
2401887c:	3f22e8ba 	.word	0x3f22e8ba
24018880:	3f3a2e8c 	.word	0x3f3a2e8c
24018884:	3e68ba2f 	.word	0x3e68ba2f
24018888:	3d8ba2e9 	.word	0x3d8ba2e9
2401888c:	3d3a2e8c 	.word	0x3d3a2e8c
24018890:	3f62e8ba 	.word	0x3f62e8ba
24018894:	43480000 	.word	0x43480000
24018898:	3ee66666 	.word	0x3ee66666
2401889c:	3e22e8ba 	.word	0x3e22e8ba
240188a0:	3f19999a 	.word	0x3f19999a
240188a4:	3e8ba2e9 	.word	0x3e8ba2e9
240188a8:	3f8ccccd 	.word	0x3f8ccccd
240188ac:	3ff33333 	.word	0x3ff33333
240188b0:	3fcccccd 	.word	0x3fcccccd
240188b4:	3ecccccd 	.word	0x3ecccccd
240188b8:	447c8000 	.word	0x447c8000
240188bc:	44778000 	.word	0x44778000
240188c0:	43fa0000 	.word	0x43fa0000
240188c4:	bf59999a 	.word	0xbf59999a
240188c8:	3c23d70a 	.word	0x3c23d70a
240188cc:	42800000 	.word	0x42800000
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) /
240188d0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
240188d2:	6e61      	ldr	r1, [r4, #100]	; 0x64
240188d4:	eb02 0c00 	add.w	ip, r2, r0
240188d8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
240188dc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    for(i = 1; i < tr->nose_length; i++) {
240188e0:	3301      	adds	r3, #1
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) /
240188e2:	ed92 7a00 	vldr	s14, [r2]
    for(i = 1; i < tr->nose_length; i++) {
240188e6:	3004      	adds	r0, #4
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) /
240188e8:	eddc 7a00 	vldr	s15, [ip]
240188ec:	ee77 6ac7 	vsub.f32	s13, s15, s14
            (tr->noseA[i-1] + tr->noseA[i]);
240188f0:	ee77 7a87 	vadd.f32	s15, s15, s14
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) /
240188f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240188f8:	ed81 7a00 	vstr	s14, [r1]
    for(i = 1; i < tr->nose_length; i++) {
240188fc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
240188fe:	4293      	cmp	r3, r2
24018900:	dbe6      	blt.n	240188d0 <tract_initToPool+0x3a8>
    tr->nose_diameter[0] = tr->velum_target;
24018902:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    tr->T = 1.0f / leaf->sampleRate;
24018904:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    tr->nose_diameter[0] = tr->velum_target;
24018908:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
2401890c:	201c      	movs	r0, #28
    tr->block_time = 64.0f / leaf->sampleRate;
2401890e:	ed1f 6a11 	vldr	s12, [pc, #-68]	; 240188cc <tract_initToPool+0x3a4>
        tr->tpool->pool[i]->is_free = 1;
24018912:	2701      	movs	r7, #1
    tr->nose_diameter[0] = tr->velum_target;
24018914:	601a      	str	r2, [r3, #0]
        tr->tpool->pool[i]->time_alive = 0;
24018916:	2600      	movs	r6, #0
    tr->block_time = 64.0f / leaf->sampleRate;
24018918:	ed95 7a00 	vldr	s14, [r5]
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
2401891c:	9900      	ldr	r1, [sp, #0]
    tr->block_time = 64.0f / leaf->sampleRate;
2401891e:	eec6 7a07 	vdiv.f32	s15, s12, s14
24018922:	edc4 7a2a 	vstr	s15, [r4, #168]	; 0xa8
    tr->T = 1.0f / leaf->sampleRate;
24018926:	ed95 7a00 	vldr	s14, [r5]
2401892a:	eec6 7a87 	vdiv.f32	s15, s13, s14
2401892e:	edc4 7a34 	vstr	s15, [r4, #208]	; 0xd0
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
24018932:	f7fc fc83 	bl	2401523c <mpool_alloc>
    tr->tpool->size = 0;
24018936:	2300      	movs	r3, #0
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
24018938:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    for(i = 0; i < MAX_TRANSIENTS; i++) {
2401893c:	461d      	mov	r5, r3
    tr->tpool->size = 0;
2401893e:	6143      	str	r3, [r0, #20]
    tr->tpool->next_free = 0;
24018940:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
24018944:	6193      	str	r3, [r2, #24]
    	tr->tpool->pool[i] = (_transient*) mpool_alloc(sizeof(_transient), m);
24018946:	f8d4 80cc 	ldr.w	r8, [r4, #204]	; 0xcc
2401894a:	2020      	movs	r0, #32
2401894c:	9900      	ldr	r1, [sp, #0]
2401894e:	f7fc fc75 	bl	2401523c <mpool_alloc>
24018952:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
        tr->tpool->pool[i]->is_free = 1;
24018956:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
        tr->tpool->pool[i]->position = 0;
2401895a:	2200      	movs	r2, #0
        tr->tpool->pool[i]->is_free = 1;
2401895c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
24018960:	751f      	strb	r7, [r3, #20]
        tr->tpool->pool[i]->id = i;
24018962:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
24018966:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
2401896a:	619d      	str	r5, [r3, #24]
        tr->tpool->pool[i]->position = 0;
2401896c:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
24018970:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
24018974:	601a      	str	r2, [r3, #0]
        tr->tpool->pool[i]->time_alive = 0;
24018976:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
2401897a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
2401897e:	605e      	str	r6, [r3, #4]
        tr->tpool->pool[i]->strength = 0;
24018980:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
24018984:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
24018988:	60de      	str	r6, [r3, #12]
        tr->tpool->pool[i]->exponent = 0;
2401898a:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
2401898e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    for(i = 0; i < MAX_TRANSIENTS; i++) {
24018992:	3501      	adds	r5, #1
24018994:	2d04      	cmp	r5, #4
        tr->tpool->pool[i]->exponent = 0;
24018996:	611e      	str	r6, [r3, #16]
    for(i = 0; i < MAX_TRANSIENTS; i++) {
24018998:	d1d5      	bne.n	24018946 <tract_initToPool+0x41e>
}
2401899a:	b002      	add	sp, #8
2401899c:	ecbd 8b04 	vpop	{d8-d9}
240189a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tr->nose_diameter[i] = diameter;
240189a4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
		diameter = MIN(diameter, 1.9f);
240189a8:	fec7 7ac4 	vminnm.f32	s15, s15, s8
	for(i = 0; i < tr->nose_length; i++) {
240189ac:	3301      	adds	r3, #1
		tr->nose_diameter[i] = diameter;
240189ae:	edc2 7a00 	vstr	s15, [r2]
	for(i = 0; i < tr->nose_length; i++) {
240189b2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
240189b4:	429a      	cmp	r2, r3
240189b6:	f73f aefc 	bgt.w	240187b2 <tract_initToPool+0x28a>
240189ba:	e71d      	b.n	240187f8 <tract_initToPool+0x2d0>

240189bc <tract_newLength>:
	_tract* tr = *t;
240189bc:	6803      	ldr	r3, [r0, #0]
    tr->nose_start = (n - tr->nose_length) + 1; //17
240189be:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
    tr->tip_start = n*0.727272727272727f;
240189c2:	eddf 6a86 	vldr	s13, [pc, #536]	; 24018bdc <tract_newLength+0x220>
    tr->reflection_left = 0.0f;
240189c6:	2000      	movs	r0, #0
    if (numTractSections < tr->maxNumTractSections)
240189c8:	689a      	ldr	r2, [r3, #8]
	tr->turbuluencePointDiameter[0] = 1.5f;
240189ca:	eef7 2a08 	vmov.f32	s5, #120	; 0x3fc00000  1.5
    tr->blade_start = n*0.227272727272727f;
240189ce:	ed9f 7a84 	vldr	s14, [pc, #528]	; 24018be0 <tract_newLength+0x224>
    tr->glottal_reflection = 0.75f;
240189d2:	f04f 5c7d 	mov.w	ip, #1061158912	; 0x3f400000
    if (numTractSections < tr->maxNumTractSections)
240189d6:	428a      	cmp	r2, r1
    tr->lip_start = n*0.886363636363636f;
240189d8:	ed9f 6a82 	vldr	s12, [pc, #520]	; 24018be4 <tract_newLength+0x228>
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
240189dc:	ed9f 1a82 	vldr	s2, [pc, #520]	; 24018be8 <tract_newLength+0x22c>
    	n = numTractSections;
240189e0:	bfcc      	ite	gt
240189e2:	ee07 1a90 	vmovgt	s15, r1
    	n = tr->maxNumTractSections;
240189e6:	ee07 2a90 	vmovle	s15, r2
    tr->reflection_left = 0.0f;
240189ea:	6718      	str	r0, [r3, #112]	; 0x70
    	n = tr->maxNumTractSections;
240189ec:	eef8 5ae7 	vcvt.f32.s32	s11, s15
    tr->nose_length = n*0.636363636363636f; //28
240189f0:	eddf 7a7e 	vldr	s15, [pc, #504]	; 24018bec <tract_newLength+0x230>
    tr->reflection_right = 0.0f;
240189f4:	6758      	str	r0, [r3, #116]	; 0x74
    tr->reflection_nose = 0.0f;
240189f6:	6798      	str	r0, [r3, #120]	; 0x78
    tr->nose_length = n*0.636363636363636f; //28
240189f8:	ee65 7aa7 	vmul.f32	s15, s11, s15
    tr->new_reflection_left = 0.0f;
240189fc:	67d8      	str	r0, [r3, #124]	; 0x7c
    tr->tip_start = n*0.727272727272727f;
240189fe:	ee65 6aa6 	vmul.f32	s13, s11, s13
    tr->new_reflection_right= 0.0f;
24018a02:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
    tr->blade_start = n*0.227272727272727f;
24018a06:	ee25 7a87 	vmul.f32	s14, s11, s14
    tr->new_reflection_nose = 0.0f;
24018a0a:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
    tr->nose_length = n*0.636363636363636f; //28
24018a0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    tr->lip_output = 0.0f;
24018a12:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
    tr->n = n; //44
24018a16:	eefd 4ae5 	vcvt.s32.f32	s9, s11
    tr->nose_output = 0.0f;
24018a1a:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
    tr->tip_start = n*0.727272727272727f;
24018a1e:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    tr->lip_reflection = -0.85f;
24018a22:	4873      	ldr	r0, [pc, #460]	; (24018bf0 <tract_newLength+0x234>)
    tr->nose_length = n*0.636363636363636f; //28
24018a24:	ee17 2a90 	vmov	r2, s15
    tr->blade_start = n*0.227272727272727f;
24018a28:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    tr->n = n; //44
24018a2c:	ee14 1a90 	vmov	r1, s9
    tr->nose_start = (n - tr->nose_length) + 1; //17
24018a30:	ee35 5aa1 	vadd.f32	s10, s11, s3
24018a34:	ee04 2a90 	vmov	s9, r2
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
24018a38:	eeb8 3ae6 	vcvt.f32.s32	s6, s13
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
24018a3c:	eef8 3ac7 	vcvt.f32.s32	s7, s14
24018a40:	eddf 7a6c 	vldr	s15, [pc, #432]	; 24018bf4 <tract_newLength+0x238>
    tr->nose_start = (n - tr->nose_length) + 1; //17
24018a44:	eeb8 2ae4 	vcvt.f32.s32	s4, s9
    tr->lip_reflection = -0.85f;
24018a48:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
24018a4c:	eea5 3ac1 	vfms.f32	s6, s11, s2
    tr->last_obstruction = -1;
24018a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
24018a54:	eee5 3aa7 	vfma.f32	s7, s11, s15
	tr->turbuluencePointPosition[0] = n* 0.45f;
24018a58:	ed9f 4a67 	vldr	s8, [pc, #412]	; 24018bf8 <tract_newLength+0x23c>
    tr->lip_start = n*0.886363636363636f;
24018a5c:	ee25 6a86 	vmul.f32	s12, s11, s12
    Lfloat invN = 1.0f / tr->n;
24018a60:	ee07 1a90 	vmov	s15, r1
	tr->turbuluencePointPosition[1] = n* 0.5f;
24018a64:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
    tr->last_obstruction = -1;
24018a68:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    tr->nose_start = (n - tr->nose_length) + 1; //17
24018a6c:	ee35 5a42 	vsub.f32	s10, s10, s4
    tr->movement_speed = 200.0f;
24018a70:	4862      	ldr	r0, [pc, #392]	; (24018bfc <tract_newLength+0x240>)
	tr->turbuluencePointPosition[0] = n* 0.45f;
24018a72:	ee25 4a84 	vmul.f32	s8, s11, s8
    for(i = 0; i < tr->n; i++) {
24018a76:	2900      	cmp	r1, #0
	tr->turbuluencePointPosition[1] = n* 0.5f;
24018a78:	ee65 4aa4 	vmul.f32	s9, s11, s9
    tr->movement_speed = 200.0f;
24018a7c:	f8c3 009c 	str.w	r0, [r3, #156]	; 0x9c
    tr->nose_start = (n - tr->nose_length) + 1; //17
24018a80:	eebd 5ac5 	vcvt.s32.f32	s10, s10
    tr->velum_target = 0.01f;
24018a84:	485e      	ldr	r0, [pc, #376]	; (24018c00 <tract_newLength+0x244>)
    Lfloat invN = 1.0f / tr->n;
24018a86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    tr->n = n; //44
24018a8a:	6059      	str	r1, [r3, #4]
    tr->lip_start = n*0.886363636363636f;
24018a8c:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    tr->nose_length = n*0.636363636363636f; //28
24018a90:	639a      	str	r2, [r3, #56]	; 0x38
    tr->nose_start = (n - tr->nose_length) + 1; //17
24018a92:	ed83 5a0f 	vstr	s10, [r3, #60]	; 0x3c
    tr->tip_start = n*0.727272727272727f;
24018a96:	edc3 6a10 	vstr	s13, [r3, #64]	; 0x40
    Lfloat invN = 1.0f / tr->n;
24018a9a:	ee81 5aa7 	vdiv.f32	s10, s3, s15
    tr->blade_start = n*0.227272727272727f;
24018a9e:	ed83 7a11 	vstr	s14, [r3, #68]	; 0x44
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
24018aa2:	ed83 3a13 	vstr	s6, [r3, #76]	; 0x4c
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
24018aa6:	edc3 3a14 	vstr	s7, [r3, #80]	; 0x50
    tr->lip_start = n*0.886363636363636f;
24018aaa:	ed83 6a12 	vstr	s12, [r3, #72]	; 0x48
	tr->turbuluencePointPosition[0] = n* 0.45f;
24018aae:	ed83 4a2f 	vstr	s8, [r3, #188]	; 0xbc
	tr->turbuluencePointPosition[1] = n* 0.5f;
24018ab2:	edc3 4a30 	vstr	s9, [r3, #192]	; 0xc0
	tr->turbuluencePointDiameter[0] = 1.5f;
24018ab6:	edc3 2a31 	vstr	s5, [r3, #196]	; 0xc4
	tr->turbuluencePointDiameter[1] = 1.5f;
24018aba:	edc3 2a32 	vstr	s5, [r3, #200]	; 0xc8
    tr->glottal_reflection = 0.75f;
24018abe:	f8c3 c08c 	str.w	ip, [r3, #140]	; 0x8c
    tr->velum_target = 0.01f;
24018ac2:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
    for(i = 0; i < tr->n; i++) {
24018ac6:	dd48      	ble.n	24018b5a <tract_newLength+0x19e>
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
24018ac8:	eebe 3a00 	vmov.f32	s6, #224	; 0xbf000000 -0.5
    for(i = 0; i < tr->n; i++) {
24018acc:	2200      	movs	r2, #0
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
24018ace:	eddf 3a4d 	vldr	s7, [pc, #308]	; 24018c04 <tract_newLength+0x248>
            diameter = 0.6f;
24018ad2:	ed9f 4a4d 	vldr	s8, [pc, #308]	; 24018c08 <tract_newLength+0x24c>
        } else if( i < (int)((n*0.272727272727273f) * (Lfloat)tr->n * invN)) { //was 12
24018ad6:	eddf 4a4d 	vldr	s9, [pc, #308]	; 24018c0c <tract_newLength+0x250>
            diameter = 1.1f;
24018ada:	ed9f 2a4d 	vldr	s4, [pc, #308]	; 24018c10 <tract_newLength+0x254>
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
24018ade:	ee27 6aa3 	vmul.f32	s12, s15, s7
24018ae2:	eef0 6a43 	vmov.f32	s13, s6
        } else if( i < (int)((n*0.272727272727273f) * (Lfloat)tr->n * invN)) { //was 12
24018ae6:	ee67 7aa4 	vmul.f32	s15, s15, s9
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
24018aea:	ee26 6a25 	vmul.f32	s12, s12, s11
            diameter = 0.6f;
24018aee:	eeb0 7a44 	vmov.f32	s14, s8
        } else if( i < (int)((n*0.272727272727273f) * (Lfloat)tr->n * invN)) { //was 12
24018af2:	ee67 7aa5 	vmul.f32	s15, s15, s11
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
24018af6:	eee5 6a06 	vfma.f32	s13, s10, s12
        } else if( i < (int)((n*0.272727272727273f) * (Lfloat)tr->n * invN)) { //was 12
24018afa:	ee67 7a85 	vmul.f32	s15, s15, s10
24018afe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
24018b02:	eefd 6ae6 	vcvt.s32.f32	s13, s13
24018b06:	ee16 1a90 	vmov	r1, s13
24018b0a:	4291      	cmp	r1, r2
24018b0c:	dc04      	bgt.n	24018b18 <tract_newLength+0x15c>
            diameter = 1.1f;
24018b0e:	ee17 1a90 	vmov	r1, s15
24018b12:	4291      	cmp	r1, r2
24018b14:	fe32 7a22 	vselgt.f32	s14, s4, s5
            tr->new_diameter[i] = diameter;
24018b18:	6999      	ldr	r1, [r3, #24]
24018b1a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
24018b1e:	ed81 7a00 	vstr	s14, [r1]
            tr->target_diameter[i] =
24018b22:	6959      	ldr	r1, [r3, #20]
24018b24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
24018b28:	ed81 7a00 	vstr	s14, [r1]
            tr->rest_diameter[i] =
24018b2c:	6919      	ldr	r1, [r3, #16]
24018b2e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
24018b32:	ed81 7a00 	vstr	s14, [r1]
        tr->diameter[i] =
24018b36:	68d9      	ldr	r1, [r3, #12]
24018b38:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    for(i = 0; i < tr->n; i++) {
24018b3c:	3201      	adds	r2, #1
        tr->diameter[i] =
24018b3e:	ed81 7a00 	vstr	s14, [r1]
    for(i = 0; i < tr->n; i++) {
24018b42:	6859      	ldr	r1, [r3, #4]
24018b44:	ee07 1a90 	vmov	s15, r1
24018b48:	4291      	cmp	r1, r2
24018b4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24018b4e:	dcc6      	bgt.n	24018ade <tract_newLength+0x122>
    Lfloat invNoseLength = 1.0f / tr->nose_length;
24018b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
24018b52:	ee07 2a90 	vmov	s15, r2
24018b56:	eeb8 2ae7 	vcvt.f32.s32	s4, s15
24018b5a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	for(i = 0; i < tr->nose_length; i++) {
24018b5e:	2a00      	cmp	r2, #0
    Lfloat invNoseLength = 1.0f / tr->nose_length;
24018b60:	ee87 5a82 	vdiv.f32	s10, s15, s4
	for(i = 0; i < tr->nose_length; i++) {
24018b64:	dd39      	ble.n	24018bda <tract_newLength+0x21e>
24018b66:	2200      	movs	r2, #0
		diameter = MIN(diameter, 1.9f);
24018b68:	eddf 3a2a 	vldr	s7, [pc, #168]	; 24018c14 <tract_newLength+0x258>
			diameter = 0.4f + 1.6f * d;
24018b6c:	ed9f 4a2a 	vldr	s8, [pc, #168]	; 24018c18 <tract_newLength+0x25c>
24018b70:	eddf 4a2a 	vldr	s9, [pc, #168]	; 24018c1c <tract_newLength+0x260>
		if(d < 1.0f) {
24018b74:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
			diameter = 0.5f + 1.5f*(2.0f-d);
24018b78:	eef0 2a00 	vmov.f32	s5, #0	; 0x40000000  2.0
24018b7c:	eeb7 3a08 	vmov.f32	s6, #120	; 0x3fc00000  1.5
		d = 2.0f * ((Lfloat)i * invNoseLength);
24018b80:	ee07 2a90 	vmov	s15, r2
			diameter = 0.4f + 1.6f * d;
24018b84:	eef0 6a64 	vmov.f32	s13, s9
		tr->nose_diameter[i] = diameter;
24018b88:	6e99      	ldr	r1, [r3, #104]	; 0x68
		d = 2.0f * ((Lfloat)i * invNoseLength);
24018b8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24018b8e:	ee67 7a85 	vmul.f32	s15, s15, s10
24018b92:	ee37 7aa7 	vadd.f32	s14, s15, s15
		if(d < 1.0f) {
24018b96:	eef4 7ac6 	vcmpe.f32	s15, s12
			diameter = 0.5f + 1.5f*(2.0f-d);
24018b9a:	eef0 7a46 	vmov.f32	s15, s12
24018b9e:	ee72 5ac7 	vsub.f32	s11, s5, s14
		if(d < 1.0f) {
24018ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			diameter = 0.4f + 1.6f * d;
24018ba6:	eee7 6a04 	vfma.f32	s13, s14, s8
			diameter = 0.5f + 1.5f*(2.0f-d);
24018baa:	eee5 7a83 	vfma.f32	s15, s11, s6
		if(d < 1.0f) {
24018bae:	d50a      	bpl.n	24018bc6 <tract_newLength+0x20a>
		tr->nose_diameter[i] = diameter;
24018bb0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
		diameter = MIN(diameter, 1.9f);
24018bb4:	fec6 6ae3 	vminnm.f32	s13, s13, s7
	for(i = 0; i < tr->nose_length; i++) {
24018bb8:	3201      	adds	r2, #1
		tr->nose_diameter[i] = diameter;
24018bba:	edc1 6a00 	vstr	s13, [r1]
	for(i = 0; i < tr->nose_length; i++) {
24018bbe:	6b99      	ldr	r1, [r3, #56]	; 0x38
24018bc0:	4291      	cmp	r1, r2
24018bc2:	dcdd      	bgt.n	24018b80 <tract_newLength+0x1c4>
24018bc4:	4770      	bx	lr
		tr->nose_diameter[i] = diameter;
24018bc6:	eb01 0182 	add.w	r1, r1, r2, lsl #2
		diameter = MIN(diameter, 1.9f);
24018bca:	fec7 7ae3 	vminnm.f32	s15, s15, s7
	for(i = 0; i < tr->nose_length; i++) {
24018bce:	3201      	adds	r2, #1
		tr->nose_diameter[i] = diameter;
24018bd0:	edc1 7a00 	vstr	s15, [r1]
	for(i = 0; i < tr->nose_length; i++) {
24018bd4:	6b99      	ldr	r1, [r3, #56]	; 0x38
24018bd6:	428a      	cmp	r2, r1
24018bd8:	dbd2      	blt.n	24018b80 <tract_newLength+0x1c4>
}
24018bda:	4770      	bx	lr
24018bdc:	3f3a2e8c 	.word	0x3f3a2e8c
24018be0:	3e68ba2f 	.word	0x3e68ba2f
24018be4:	3f62e8ba 	.word	0x3f62e8ba
24018be8:	3d8ba2e9 	.word	0x3d8ba2e9
24018bec:	3f22e8ba 	.word	0x3f22e8ba
24018bf0:	bf59999a 	.word	0xbf59999a
24018bf4:	3d3a2e8c 	.word	0x3d3a2e8c
24018bf8:	3ee66666 	.word	0x3ee66666
24018bfc:	43480000 	.word	0x43480000
24018c00:	3c23d70a 	.word	0x3c23d70a
24018c04:	3e22e8ba 	.word	0x3e22e8ba
24018c08:	3f19999a 	.word	0x3f19999a
24018c0c:	3e8ba2e9 	.word	0x3e8ba2e9
24018c10:	3f8ccccd 	.word	0x3f8ccccd
24018c14:	3ff33333 	.word	0x3ff33333
24018c18:	3fcccccd 	.word	0x3fcccccd
24018c1c:	3ecccccd 	.word	0x3ecccccd

24018c20 <tract_reshape>:
{
24018c20:	b430      	push	{r4, r5}
	_tract* tr = *t;
24018c22:	6802      	ldr	r2, [r0, #0]
    for(i = 0; i < tr->n; i++) {
24018c24:	6853      	ldr	r3, [r2, #4]
    amount = tr->block_time * tr->movement_speed;
24018c26:	ed92 5a2a 	vldr	s10, [r2, #168]	; 0xa8
24018c2a:	edd2 7a27 	vldr	s15, [r2, #156]	; 0x9c
    for(i = 0; i < tr->n; i++) {
24018c2e:	2b00      	cmp	r3, #0
    amount = tr->block_time * tr->movement_speed;
24018c30:	ee25 5a27 	vmul.f32	s10, s10, s15
    for(i = 0; i < tr->n; i++) {
24018c34:	f340 80ab 	ble.w	24018d8e <tract_reshape+0x16e>
        tr->diameter[i] = move_towards(diameter, target_diameter,
24018c38:	eddf 2a5f 	vldr	s5, [pc, #380]	; 24018db8 <tract_reshape+0x198>
24018c3c:	ee75 3a05 	vadd.f32	s7, s10, s10
    current_obstruction = -1;
24018c40:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    for(i = 0; i < tr->n; i++) {
24018c44:	2300      	movs	r3, #0
        tr->diameter[i] = move_towards(diameter, target_diameter,
24018c46:	ee25 4a22 	vmul.f32	s8, s10, s5
        if(diameter < 0.001f) current_obstruction = i;
24018c4a:	eddf 4a5c 	vldr	s9, [pc, #368]	; 24018dbc <tract_reshape+0x19c>
                0.6f+0.4f*(i - tr->nose_start)/(tr->tip_start - tr->nose_start);
24018c4e:	ed9f 3a5c 	vldr	s6, [pc, #368]	; 24018dc0 <tract_reshape+0x1a0>
        diameter = tr->diameter[i];
24018c52:	68d1      	ldr	r1, [r2, #12]
        tr->diameter[i] = move_towards(diameter, target_diameter,
24018c54:	eef0 7a44 	vmov.f32	s15, s8
        if(i < tr->nose_start) slow_return = 0.6f;
24018c58:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
        diameter = tr->diameter[i];
24018c5a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
        target_diameter = tr->target_diameter[i];
24018c5e:	6955      	ldr	r5, [r2, #20]
        diameter = tr->diameter[i];
24018c60:	ed91 7a00 	vldr	s14, [r1]
        target_diameter = tr->target_diameter[i];
24018c64:	eb05 0c83 	add.w	ip, r5, r3, lsl #2
        if(diameter < 0.001f) current_obstruction = i;
24018c68:	eeb4 7a64 	vcmp.f32	s14, s9
        target_diameter = tr->target_diameter[i];
24018c6c:	ed9c 6a00 	vldr	s12, [ip]
        if(diameter < 0.001f) current_obstruction = i;
24018c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018c74:	bf48      	it	mi
24018c76:	461c      	movmi	r4, r3
        if(i < tr->nose_start) slow_return = 0.6f;
24018c78:	4298      	cmp	r0, r3
24018c7a:	dc16      	bgt.n	24018caa <tract_reshape+0x8a>
                0.6f+0.4f*(i - tr->nose_start)/(tr->tip_start - tr->nose_start);
24018c7c:	1a1d      	subs	r5, r3, r0
        else if(i >= tr->tip_start) slow_return = 1.0f;
24018c7e:	eef0 7a45 	vmov.f32	s15, s10
                0.6f+0.4f*(i - tr->nose_start)/(tr->tip_start - tr->nose_start);
24018c82:	ee05 5a90 	vmov	s11, r5
        else if(i >= tr->tip_start) slow_return = 1.0f;
24018c86:	6c15      	ldr	r5, [r2, #64]	; 0x40
                0.6f+0.4f*(i - tr->nose_start)/(tr->tip_start - tr->nose_start);
24018c88:	1a28      	subs	r0, r5, r0
24018c8a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
        else if(i >= tr->tip_start) slow_return = 1.0f;
24018c8e:	42ab      	cmp	r3, r5
                0.6f+0.4f*(i - tr->nose_start)/(tr->tip_start - tr->nose_start);
24018c90:	ee06 0a90 	vmov	s13, r0
24018c94:	ee65 5a83 	vmul.f32	s11, s11, s6
24018c98:	eef8 6ae6 	vcvt.f32.s32	s13, s13
        else if(i >= tr->tip_start) slow_return = 1.0f;
24018c9c:	da05      	bge.n	24018caa <tract_reshape+0x8a>
                0.6f+0.4f*(i - tr->nose_start)/(tr->tip_start - tr->nose_start);
24018c9e:	eec5 7aa6 	vdiv.f32	s15, s11, s13
            slow_return =
24018ca2:	ee77 7aa2 	vadd.f32	s15, s15, s5
        tr->diameter[i] = move_towards(diameter, target_diameter,
24018ca6:	ee67 7a85 	vmul.f32	s15, s15, s10

Lfloat move_towards(Lfloat current, Lfloat target,
        Lfloat amt_up, Lfloat amt_down)
{
    Lfloat tmp;
    if(current < target) {
24018caa:	eeb4 7ac6 	vcmpe.f32	s14, s12
        tmp = current + amt_up;
24018cae:	ee77 7a27 	vadd.f32	s15, s14, s15
        return MIN(tmp, target);
    } else {
        tmp = current - amt_down;
24018cb2:	ee77 6a63 	vsub.f32	s13, s14, s7
    if(current < target) {
24018cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return MIN(tmp, target);
24018cba:	fec7 7ac6 	vminnm.f32	s15, s15, s12
        return MAX(tmp, target);
24018cbe:	fec6 6a86 	vmaxnm.f32	s13, s13, s12
    if(current < target) {
24018cc2:	d52d      	bpl.n	24018d20 <tract_reshape+0x100>
    for(i = 0; i < tr->n; i++) {
24018cc4:	3301      	adds	r3, #1
        tr->diameter[i] = move_towards(diameter, target_diameter,
24018cc6:	edc1 7a00 	vstr	s15, [r1]
    for(i = 0; i < tr->n; i++) {
24018cca:	6851      	ldr	r1, [r2, #4]
24018ccc:	428b      	cmp	r3, r1
24018cce:	dbc0      	blt.n	24018c52 <tract_reshape+0x32>
    if(tr->last_obstruction > -1 && current_obstruction == -1 &&
24018cd0:	f1a4 31ff 	sub.w	r1, r4, #4294967295	; 0xffffffff
24018cd4:	fab1 f181 	clz	r1, r1
24018cd8:	0949      	lsrs	r1, r1, #5
24018cda:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
24018cde:	2b00      	cmp	r3, #0
24018ce0:	db00      	blt.n	24018ce4 <tract_reshape+0xc4>
24018ce2:	bb59      	cbnz	r1, 24018d3c <tract_reshape+0x11c>
    tr->nose_diameter[0] = move_towards(tr->nose_diameter[0], tr->velum_target,
24018ce4:	6e93      	ldr	r3, [r2, #104]	; 0x68
24018ce6:	edd2 7a22 	vldr	s15, [r2, #136]	; 0x88
    tr->last_obstruction = current_obstruction;
24018cea:	f8c2 4094 	str.w	r4, [r2, #148]	; 0x94
    tr->nose_diameter[0] = move_towards(tr->nose_diameter[0], tr->velum_target,
24018cee:	ed93 7a00 	vldr	s14, [r3]
    if(current < target) {
24018cf2:	eeb4 7ae7 	vcmpe.f32	s14, s15
24018cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018cfa:	d518      	bpl.n	24018d2e <tract_reshape+0x10e>
        tmp = current + amt_up;
24018cfc:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
24018d00:	eea5 7a26 	vfma.f32	s14, s10, s13
        return MIN(tmp, target);
24018d04:	fec7 7ac7 	vminnm.f32	s15, s15, s14
    tr->nose_diameter[0] = move_towards(tr->nose_diameter[0], tr->velum_target,
24018d08:	edc3 7a00 	vstr	s15, [r3]
    tr->noseA[0] = tr->nose_diameter[0] * tr->nose_diameter[0];
24018d0c:	e9d2 131a 	ldrd	r1, r3, [r2, #104]	; 0x68
24018d10:	edd1 7a00 	vldr	s15, [r1]
24018d14:	ee67 7aa7 	vmul.f32	s15, s15, s15
24018d18:	edc3 7a00 	vstr	s15, [r3]
}
24018d1c:	bc30      	pop	{r4, r5}
24018d1e:	4770      	bx	lr
    for(i = 0; i < tr->n; i++) {
24018d20:	3301      	adds	r3, #1
        tr->diameter[i] = move_towards(diameter, target_diameter,
24018d22:	edc1 6a00 	vstr	s13, [r1]
    for(i = 0; i < tr->n; i++) {
24018d26:	6851      	ldr	r1, [r2, #4]
24018d28:	4299      	cmp	r1, r3
24018d2a:	dc92      	bgt.n	24018c52 <tract_reshape+0x32>
24018d2c:	e7d0      	b.n	24018cd0 <tract_reshape+0xb0>
        tmp = current - amt_down;
24018d2e:	eddf 6a25 	vldr	s13, [pc, #148]	; 24018dc4 <tract_reshape+0x1a4>
24018d32:	eea5 7a66 	vfms.f32	s14, s10, s13
        return MAX(tmp, target);
24018d36:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
24018d3a:	e7e5      	b.n	24018d08 <tract_reshape+0xe8>
            tr->noseA[0] < 0.05f) {
24018d3c:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
    if(tr->last_obstruction > -1 && current_obstruction == -1 &&
24018d3e:	eddf 7a22 	vldr	s15, [pc, #136]	; 24018dc8 <tract_reshape+0x1a8>
24018d42:	ed91 7a00 	vldr	s14, [r1]
24018d46:	eeb4 7ae7 	vcmpe.f32	s14, s15
24018d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018d4e:	d5c9      	bpl.n	24018ce4 <tract_reshape+0xc4>
	_transient_pool* pool = *po;
24018d50:	f8d2 10cc 	ldr.w	r1, [r2, #204]	; 0xcc
    if(pool->size == MAX_TRANSIENTS) return 0;
24018d54:	6948      	ldr	r0, [r1, #20]
24018d56:	2804      	cmp	r0, #4
24018d58:	d0c4      	beq.n	24018ce4 <tract_reshape+0xc4>
    free_id = pool->next_free;
24018d5a:	6988      	ldr	r0, [r1, #24]
    if(free_id == -1) {
24018d5c:	1c45      	adds	r5, r0, #1
24018d5e:	d01a      	beq.n	24018d96 <tract_reshape+0x176>
    t = pool->pool[free_id];
24018d60:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    t->next = pool->root;
24018d64:	690d      	ldr	r5, [r1, #16]
24018d66:	61c5      	str	r5, [r0, #28]
    pool->size++;
24018d68:	694d      	ldr	r5, [r1, #20]
    pool->root = t;
24018d6a:	6108      	str	r0, [r1, #16]
    pool->size++;
24018d6c:	3501      	adds	r5, #1
24018d6e:	614d      	str	r5, [r1, #20]
    t->is_free = 0;
24018d70:	2500      	movs	r5, #0
    t->position = position;
24018d72:	6003      	str	r3, [r0, #0]
    pool->next_free = -1;
24018d74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    t->is_free = 0;
24018d78:	7505      	strb	r5, [r0, #20]
    t->time_alive = 0.0f;
24018d7a:	2500      	movs	r5, #0
24018d7c:	6045      	str	r5, [r0, #4]
    t->lifetime = 0.2f;
24018d7e:	4d13      	ldr	r5, [pc, #76]	; (24018dcc <tract_reshape+0x1ac>)
24018d80:	6085      	str	r5, [r0, #8]
    t->strength = 0.3f;
24018d82:	4d13      	ldr	r5, [pc, #76]	; (24018dd0 <tract_reshape+0x1b0>)
24018d84:	60c5      	str	r5, [r0, #12]
    t->exponent = 200.0f;
24018d86:	4d13      	ldr	r5, [pc, #76]	; (24018dd4 <tract_reshape+0x1b4>)
24018d88:	6105      	str	r5, [r0, #16]
    pool->next_free = -1;
24018d8a:	618b      	str	r3, [r1, #24]
    return 0;
24018d8c:	e7aa      	b.n	24018ce4 <tract_reshape+0xc4>
    for(i = 0; i < tr->n; i++) {
24018d8e:	2101      	movs	r1, #1
    current_obstruction = -1;
24018d90:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
24018d94:	e7a1      	b.n	24018cda <tract_reshape+0xba>
            if(pool->pool[i]->is_free) {
24018d96:	6808      	ldr	r0, [r1, #0]
24018d98:	7d05      	ldrb	r5, [r0, #20]
24018d9a:	2d00      	cmp	r5, #0
24018d9c:	d1e2      	bne.n	24018d64 <tract_reshape+0x144>
24018d9e:	6848      	ldr	r0, [r1, #4]
24018da0:	7d05      	ldrb	r5, [r0, #20]
24018da2:	2d00      	cmp	r5, #0
24018da4:	d1de      	bne.n	24018d64 <tract_reshape+0x144>
24018da6:	6888      	ldr	r0, [r1, #8]
24018da8:	7d05      	ldrb	r5, [r0, #20]
24018daa:	2d00      	cmp	r5, #0
24018dac:	d1da      	bne.n	24018d64 <tract_reshape+0x144>
24018dae:	68c8      	ldr	r0, [r1, #12]
24018db0:	7d05      	ldrb	r5, [r0, #20]
24018db2:	2d00      	cmp	r5, #0
24018db4:	d096      	beq.n	24018ce4 <tract_reshape+0xc4>
24018db6:	e7d5      	b.n	24018d64 <tract_reshape+0x144>
24018db8:	3f19999a 	.word	0x3f19999a
24018dbc:	3a83126f 	.word	0x3a83126f
24018dc0:	3ecccccd 	.word	0x3ecccccd
24018dc4:	3dcccccd 	.word	0x3dcccccd
24018dc8:	3d4ccccd 	.word	0x3d4ccccd
24018dcc:	3e4ccccd 	.word	0x3e4ccccd
24018dd0:	3e99999a 	.word	0x3e99999a
24018dd4:	43480000 	.word	0x43480000

24018dd8 <tract_addTurbulenceNoiseAtPosition>:
{
24018dd8:	b538      	push	{r3, r4, r5, lr}
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
24018dda:	eddf 7a36 	vldr	s15, [pc, #216]	; 24018eb4 <tract_addTurbulenceNoiseAtPosition+0xdc>
24018dde:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
	_tract* tr = *t;
24018de2:	6805      	ldr	r5, [r0, #0]
{
24018de4:	ed2d 8b06 	vpush	{d8-d10}
24018de8:	eef0 8a60 	vmov.f32	s17, s1
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
24018dec:	ee77 0ac1 	vsub.f32	s1, s15, s2
{
24018df0:	eeb0 9a41 	vmov.f32	s18, s2
	int i = (int)floorf(position);
24018df4:	fefb 7a68 	vrintm.f32	s15, s17
24018df8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
24018dfc:	ee60 0a87 	vmul.f32	s1, s1, s14
{
24018e00:	eeb0 8a40 	vmov.f32	s16, s0
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
24018e04:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 24018eb8 <tract_addTurbulenceNoiseAtPosition+0xe0>
24018e08:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	int i = (int)floorf(position);
24018e0c:	ee17 4a90 	vmov	r4, s15
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
24018e10:	f7fb ff12 	bl	24014c38 <LEAF_clip>
	Lfloat openness = LEAF_clip(0.0f, 30.0f * (diameter), 1.0f);
24018e14:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
	Lfloat delta = position - i;
24018e18:	ee07 4a90 	vmov	s15, r4
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
24018e1c:	eef0 9a40 	vmov.f32	s19, s0
	Lfloat openness = LEAF_clip(0.0f, 30.0f * (diameter), 1.0f);
24018e20:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24018e24:	ed9f 0a24 	vldr	s0, [pc, #144]	; 24018eb8 <tract_addTurbulenceNoiseAtPosition+0xe0>
24018e28:	ee69 0a20 	vmul.f32	s1, s18, s1
	Lfloat delta = position - i;
24018e2c:	eeb8 aae7 	vcvt.f32.s32	s20, s15
	Lfloat openness = LEAF_clip(0.0f, 30.0f * (diameter), 1.0f);
24018e30:	f7fb ff02 	bl	24014c38 <LEAF_clip>
	Lfloat noise0 = turbulenceNoise * (1.0f - delta) * thinness0 * openness * 0.5f;
24018e34:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	if ((i + 1) < tr->n) {
24018e38:	686b      	ldr	r3, [r5, #4]
24018e3a:	1c62      	adds	r2, r4, #1
24018e3c:	ee28 8a27 	vmul.f32	s16, s16, s15
24018e40:	429a      	cmp	r2, r3
24018e42:	ee28 8a29 	vmul.f32	s16, s16, s19
24018e46:	ee28 0a00 	vmul.f32	s0, s16, s0
24018e4a:	da18      	bge.n	24018e7e <tract_addTurbulenceNoiseAtPosition+0xa6>
	Lfloat noise0 = turbulenceNoise * (1.0f - delta) * thinness0 * openness * 0.5f;
24018e4c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
		tr->R[i + 1] += noise0;
24018e50:	69eb      	ldr	r3, [r5, #28]
24018e52:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	Lfloat noise0 = turbulenceNoise * (1.0f - delta) * thinness0 * openness * 0.5f;
24018e56:	ee77 7ae8 	vsub.f32	s15, s15, s17
		tr->R[i + 1] += noise0;
24018e5a:	ed93 7a00 	vldr	s14, [r3]
	Lfloat noise0 = turbulenceNoise * (1.0f - delta) * thinness0 * openness * 0.5f;
24018e5e:	ee77 7a8a 	vadd.f32	s15, s15, s20
		tr->R[i + 1] += noise0;
24018e62:	eea7 7a80 	vfma.f32	s14, s15, s0
24018e66:	ed83 7a00 	vstr	s14, [r3]
		tr->L[i + 1] += noise0;
24018e6a:	6a2b      	ldr	r3, [r5, #32]
24018e6c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
24018e70:	ed93 7a00 	vldr	s14, [r3]
24018e74:	eea7 7a80 	vfma.f32	s14, s15, s0
24018e78:	ed83 7a00 	vstr	s14, [r3]
	if ((i + 2) < tr->n) {
24018e7c:	686b      	ldr	r3, [r5, #4]
24018e7e:	3402      	adds	r4, #2
24018e80:	429c      	cmp	r4, r3
24018e82:	da13      	bge.n	24018eac <tract_addTurbulenceNoiseAtPosition+0xd4>
		tr->R[i + 2] += noise1;
24018e84:	69eb      	ldr	r3, [r5, #28]
	Lfloat delta = position - i;
24018e86:	ee78 8aca 	vsub.f32	s17, s17, s20
		tr->R[i + 2] += noise1;
24018e8a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
24018e8e:	edd3 7a00 	vldr	s15, [r3]
24018e92:	eee8 7a80 	vfma.f32	s15, s17, s0
24018e96:	edc3 7a00 	vstr	s15, [r3]
		tr->L[i + 2] += noise1;
24018e9a:	6a2b      	ldr	r3, [r5, #32]
24018e9c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
24018ea0:	edd3 7a00 	vldr	s15, [r3]
24018ea4:	eee8 7a80 	vfma.f32	s15, s17, s0
24018ea8:	edc3 7a00 	vstr	s15, [r3]
 }
24018eac:	ecbd 8b06 	vpop	{d8-d10}
24018eb0:	bd38      	pop	{r3, r4, r5, pc}
24018eb2:	bf00      	nop
24018eb4:	3db851ec 	.word	0x3db851ec
24018eb8:	00000000 	.word	0x00000000

24018ebc <tract_compute>:
{
24018ebc:	b530      	push	{r4, r5, lr}
24018ebe:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat oneMinusLambda = 1.0f - lambda;
24018ec2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
	_tract* tr = *t;
24018ec6:	6804      	ldr	r4, [r0, #0]
{
24018ec8:	b083      	sub	sp, #12
		Lfloat turbulenceNoise = tSVF_tick(&tr->fricativeNoiseFilt[i], tNoise_tick(&tr->whiteNoise) * 0.28f);
24018eca:	eddf 9ab2 	vldr	s19, [pc, #712]	; 24019194 <tract_compute+0x2d8>
24018ece:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
{
24018ed2:	eeb0 8a60 	vmov.f32	s16, s1
    Lfloat oneMinusLambda = 1.0f - lambda;
24018ed6:	ee78 8ae0 	vsub.f32	s17, s17, s1
	_tract* tr = *t;
24018eda:	9401      	str	r4, [sp, #4]
{
24018edc:	eeb0 9a40 	vmov.f32	s18, s0
		Lfloat turbulenceNoise = tSVF_tick(&tr->fricativeNoiseFilt[i], tNoise_tick(&tr->whiteNoise) * 0.28f);
24018ee0:	f7fc fee4 	bl	24015cac <tNoise_tick>
24018ee4:	f104 00ac 	add.w	r0, r4, #172	; 0xac
24018ee8:	ee20 0a29 	vmul.f32	s0, s0, s19
24018eec:	f7f9 fc08 	bl	24012700 <tSVF_tick>
		tract_addTurbulenceNoiseAtPosition(&tr, turbulenceNoise, tr->turbuluencePointPosition[i], tr->turbuluencePointDiameter[i]);
24018ef0:	ed94 1a31 	vldr	s2, [r4, #196]	; 0xc4
24018ef4:	edd4 0a2f 	vldr	s1, [r4, #188]	; 0xbc
24018ef8:	a801      	add	r0, sp, #4
24018efa:	f7ff ff6d 	bl	24018dd8 <tract_addTurbulenceNoiseAtPosition>
		Lfloat turbulenceNoise = tSVF_tick(&tr->fricativeNoiseFilt[i], tNoise_tick(&tr->whiteNoise) * 0.28f);
24018efe:	9d01      	ldr	r5, [sp, #4]
24018f00:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
24018f04:	f7fc fed2 	bl	24015cac <tNoise_tick>
24018f08:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
24018f0c:	ee20 0a29 	vmul.f32	s0, s0, s19
24018f10:	f7f9 fbf6 	bl	24012700 <tSVF_tick>
		tract_addTurbulenceNoiseAtPosition(&tr, turbulenceNoise, tr->turbuluencePointPosition[i], tr->turbuluencePointDiameter[i]);
24018f14:	ed95 1a32 	vldr	s2, [r5, #200]	; 0xc8
24018f18:	edd5 0a30 	vldr	s1, [r5, #192]	; 0xc0
24018f1c:	a801      	add	r0, sp, #4
24018f1e:	f7ff ff5b 	bl	24018dd8 <tract_addTurbulenceNoiseAtPosition>
    tr->junction_outR[0] = tr->L[0] * tr->glottal_reflection + in;
24018f22:	6a23      	ldr	r3, [r4, #32]
24018f24:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
24018f28:	ed93 7a00 	vldr	s14, [r3]
    tr->junction_outL[tr->n] = tr->R[tr->n - 1] * tr->lip_reflection;
24018f2c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
    tr->junction_outR[0] = tr->L[0] * tr->glottal_reflection + in;
24018f30:	6b22      	ldr	r2, [r4, #48]	; 0x30
24018f32:	eea7 9a27 	vfma.f32	s18, s14, s15
24018f36:	ed82 9a00 	vstr	s18, [r2]
    tr->junction_outL[tr->n] = tr->R[tr->n - 1] * tr->lip_reflection;
24018f3a:	6862      	ldr	r2, [r4, #4]
24018f3c:	69e1      	ldr	r1, [r4, #28]
24018f3e:	4413      	add	r3, r2
24018f40:	ed94 7a24 	vldr	s14, [r4, #144]	; 0x90
24018f44:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
24018f46:	eb01 0183 	add.w	r1, r1, r3, lsl #2
24018f4a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
24018f4e:	edd1 7a00 	vldr	s15, [r1]
24018f52:	ee67 7a87 	vmul.f32	s15, s15, s14
24018f56:	edc2 7a01 	vstr	s15, [r2, #4]
    for(i = 1; i < tr->n; i++) {
24018f5a:	6863      	ldr	r3, [r4, #4]
24018f5c:	2b01      	cmp	r3, #1
24018f5e:	dd2f      	ble.n	24018fc0 <tract_compute+0x104>
24018f60:	2304      	movs	r3, #4
24018f62:	f04f 0c01 	mov.w	ip, #1
        r = tr->reflection[i] * oneMinusLambda + tr->new_reflection[i] * lambda;
24018f66:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    for(i = 1; i < tr->n; i++) {
24018f68:	f10c 0c01 	add.w	ip, ip, #1
        r = tr->reflection[i] * oneMinusLambda + tr->new_reflection[i] * lambda;
24018f6c:	6a60      	ldr	r0, [r4, #36]	; 0x24
24018f6e:	eb05 0e03 	add.w	lr, r5, r3
24018f72:	4418      	add	r0, r3
24018f74:	edde 7a00 	vldr	s15, [lr]
24018f78:	ed90 6a00 	vldr	s12, [r0]
24018f7c:	ee68 7a27 	vmul.f32	s15, s16, s15
        w = r * (tr->R[i - 1] + tr->L[i]);
24018f80:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
        r = tr->reflection[i] * oneMinusLambda + tr->new_reflection[i] * lambda;
24018f84:	eee6 7a28 	vfma.f32	s15, s12, s17
        w = r * (tr->R[i - 1] + tr->L[i]);
24018f88:	4419      	add	r1, r3
24018f8a:	441a      	add	r2, r3
24018f8c:	ed51 6a01 	vldr	s13, [r1, #-4]
24018f90:	ed92 7a00 	vldr	s14, [r2]
        tr->junction_outR[i] = tr->R[i - 1] - w;
24018f94:	6b22      	ldr	r2, [r4, #48]	; 0x30
        w = r * (tr->R[i - 1] + tr->L[i]);
24018f96:	ee36 7a87 	vadd.f32	s14, s13, s14
        tr->junction_outR[i] = tr->R[i - 1] - w;
24018f9a:	441a      	add	r2, r3
24018f9c:	eee7 6a67 	vfms.f32	s13, s14, s15
24018fa0:	edc2 6a00 	vstr	s13, [r2]
        tr->junction_outL[i] = tr->L[i] + w;
24018fa4:	6a21      	ldr	r1, [r4, #32]
24018fa6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
24018fa8:	4419      	add	r1, r3
24018faa:	441a      	add	r2, r3
24018fac:	3304      	adds	r3, #4
24018fae:	edd1 6a00 	vldr	s13, [r1]
24018fb2:	eee7 6a27 	vfma.f32	s13, s14, s15
24018fb6:	edc2 6a00 	vstr	s13, [r2]
    for(i = 1; i < tr->n; i++) {
24018fba:	6862      	ldr	r2, [r4, #4]
24018fbc:	4562      	cmp	r2, ip
24018fbe:	dcd2      	bgt.n	24018f66 <tract_compute+0xaa>
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
24018fc0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
24018fc2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
    r = tr->new_reflection_left * oneMinusLambda + tr->reflection_left*lambda;
24018fc6:	ed94 7a1c 	vldr	s14, [r4, #112]	; 0x70
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
24018fca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24018fce:	4413      	add	r3, r2
    r = tr->new_reflection_left * oneMinusLambda + tr->reflection_left*lambda;
24018fd0:	edd4 7a1f 	vldr	s15, [r4, #124]	; 0x7c
24018fd4:	ee28 7a07 	vmul.f32	s14, s16, s14
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
24018fd8:	6d62      	ldr	r2, [r4, #84]	; 0x54
24018fda:	009b      	lsls	r3, r3, #2
24018fdc:	6a20      	ldr	r0, [r4, #32]
24018fde:	edd2 5a00 	vldr	s11, [r2]
    r = tr->new_reflection_left * oneMinusLambda + tr->reflection_left*lambda;
24018fe2:	eea7 7aa8 	vfma.f32	s14, s15, s17
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
24018fe6:	1d1a      	adds	r2, r3, #4
24018fe8:	69e5      	ldr	r5, [r4, #28]
24018fea:	4410      	add	r0, r2
24018fec:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
24018fee:	441d      	add	r5, r3
24018ff0:	edd0 7a00 	vldr	s15, [r0]
24018ff4:	4411      	add	r1, r2
24018ff6:	ed95 6a00 	vldr	s12, [r5]
24018ffa:	ee77 7aa5 	vadd.f32	s15, s15, s11
24018ffe:	ee77 5a26 	vadd.f32	s11, s14, s13
24019002:	ee67 7aa5 	vmul.f32	s15, s15, s11
24019006:	eee6 7a07 	vfma.f32	s15, s12, s14
2401900a:	edc1 7a00 	vstr	s15, [r1]
    r = tr->new_reflection_right * oneMinusLambda + tr->reflection_right * lambda;
2401900e:	ed94 7a1d 	vldr	s14, [r4, #116]	; 0x74
24019012:	edd4 7a20 	vldr	s15, [r4, #128]	; 0x80
24019016:	ee28 7a07 	vmul.f32	s14, s16, s14
    tr->junction_outR[i] = r*tr->L[i] + (1.0f+r)*(tr->R[i-1]+tr->noseL[0]);
2401901a:	6a20      	ldr	r0, [r4, #32]
2401901c:	69e1      	ldr	r1, [r4, #28]
2401901e:	4410      	add	r0, r2
    r = tr->new_reflection_right * oneMinusLambda + tr->reflection_right * lambda;
24019020:	eea7 7aa8 	vfma.f32	s14, s15, s17
    tr->junction_outR[i] = r*tr->L[i] + (1.0f+r)*(tr->R[i-1]+tr->noseL[0]);
24019024:	4419      	add	r1, r3
24019026:	ed90 6a00 	vldr	s12, [r0]
2401902a:	6d60      	ldr	r0, [r4, #84]	; 0x54
2401902c:	edd1 7a00 	vldr	s15, [r1]
24019030:	ed90 5a00 	vldr	s10, [r0]
24019034:	6b21      	ldr	r1, [r4, #48]	; 0x30
24019036:	ee77 5a26 	vadd.f32	s11, s14, s13
2401903a:	ee77 7a85 	vadd.f32	s15, s15, s10
2401903e:	4411      	add	r1, r2
24019040:	ee67 7aa5 	vmul.f32	s15, s15, s11
24019044:	eee6 7a07 	vfma.f32	s15, s12, s14
24019048:	edc1 7a00 	vstr	s15, [r1]
    r = tr->new_reflection_nose * oneMinusLambda + tr->reflection_nose * lambda;
2401904c:	ed94 7a1e 	vldr	s14, [r4, #120]	; 0x78
    tr->nose_junc_outR[0] = r * tr->noseL[0]+(1.0f+r)*(tr->L[i]+tr->R[i-1]);
24019050:	6d61      	ldr	r1, [r4, #84]	; 0x54
    r = tr->new_reflection_nose * oneMinusLambda + tr->reflection_nose * lambda;
24019052:	ee28 7a07 	vmul.f32	s14, s16, s14
24019056:	edd4 7a21 	vldr	s15, [r4, #132]	; 0x84
    tr->nose_junc_outR[0] = r * tr->noseL[0]+(1.0f+r)*(tr->L[i]+tr->R[i-1]);
2401905a:	ed91 6a00 	vldr	s12, [r1]
2401905e:	6a21      	ldr	r1, [r4, #32]
    r = tr->new_reflection_nose * oneMinusLambda + tr->reflection_nose * lambda;
24019060:	eea7 7aa8 	vfma.f32	s14, s15, s17
    tr->nose_junc_outR[0] = r * tr->noseL[0]+(1.0f+r)*(tr->L[i]+tr->R[i-1]);
24019064:	6e20      	ldr	r0, [r4, #96]	; 0x60
24019066:	4411      	add	r1, r2
24019068:	69e2      	ldr	r2, [r4, #28]
2401906a:	441a      	add	r2, r3
2401906c:	edd1 7a00 	vldr	s15, [r1]
24019070:	edd2 5a00 	vldr	s11, [r2]
24019074:	ee77 6a26 	vadd.f32	s13, s14, s13
24019078:	ee77 7aa5 	vadd.f32	s15, s15, s11
2401907c:	ee67 7aa6 	vmul.f32	s15, s15, s13
24019080:	eee6 7a07 	vfma.f32	s15, s12, s14
24019084:	edc0 7a00 	vstr	s15, [r0]
    for(i = 0; i < tr->n; i++) {
24019088:	6862      	ldr	r2, [r4, #4]
2401908a:	2a00      	cmp	r2, #0
2401908c:	dd1d      	ble.n	240190ca <tract_compute+0x20e>
2401908e:	2300      	movs	r3, #0
        tr->R[i] = tr->junction_outR[i]*0.999f;
24019090:	ed9f 7a41 	vldr	s14, [pc, #260]	; 24019198 <tract_compute+0x2dc>
    for(i = 0; i < tr->n; i++) {
24019094:	4618      	mov	r0, r3
        tr->R[i] = tr->junction_outR[i]*0.999f;
24019096:	6b21      	ldr	r1, [r4, #48]	; 0x30
24019098:	469c      	mov	ip, r3
2401909a:	69e2      	ldr	r2, [r4, #28]
    for(i = 0; i < tr->n; i++) {
2401909c:	3001      	adds	r0, #1
        tr->R[i] = tr->junction_outR[i]*0.999f;
2401909e:	4419      	add	r1, r3
240190a0:	441a      	add	r2, r3
240190a2:	3304      	adds	r3, #4
240190a4:	edd1 7a00 	vldr	s15, [r1]
240190a8:	ee67 7a87 	vmul.f32	s15, s15, s14
240190ac:	edc2 7a00 	vstr	s15, [r2]
        tr->L[i] = tr->junction_outL[i + 1]*0.999f;
240190b0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
240190b2:	6a22      	ldr	r2, [r4, #32]
240190b4:	4419      	add	r1, r3
240190b6:	4462      	add	r2, ip
240190b8:	edd1 7a00 	vldr	s15, [r1]
240190bc:	ee67 7a87 	vmul.f32	s15, s15, s14
240190c0:	edc2 7a00 	vstr	s15, [r2]
    for(i = 0; i < tr->n; i++) {
240190c4:	6862      	ldr	r2, [r4, #4]
240190c6:	4282      	cmp	r2, r0
240190c8:	dce5      	bgt.n	24019096 <tract_compute+0x1da>
    tr->lip_output = tr->R[tr->n - 1];
240190ca:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
240190ce:	69e0      	ldr	r0, [r4, #28]
        tr->noseR[tr->nose_length-1] * tr->lip_reflection;
240190d0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    tr->lip_output = tr->R[tr->n - 1];
240190d2:	441a      	add	r2, r3
        tr->noseR[tr->nose_length-1] * tr->lip_reflection;
240190d4:	ed94 7a24 	vldr	s14, [r4, #144]	; 0x90
240190d8:	440b      	add	r3, r1
    tr->nose_junc_outL[tr->nose_length] =
240190da:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    tr->lip_output = tr->R[tr->n - 1];
240190dc:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    tr->nose_junc_outL[tr->nose_length] =
240190e0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    tr->lip_output = tr->R[tr->n - 1];
240190e4:	6802      	ldr	r2, [r0, #0]
240190e6:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
        tr->noseR[tr->nose_length-1] * tr->lip_reflection;
240190ea:	6da2      	ldr	r2, [r4, #88]	; 0x58
240190ec:	eb02 0283 	add.w	r2, r2, r3, lsl #2
240190f0:	edd2 7a00 	vldr	s15, [r2]
240190f4:	ee67 7a87 	vmul.f32	s15, s15, s14
    tr->nose_junc_outL[tr->nose_length] =
240190f8:	edc1 7a01 	vstr	s15, [r1, #4]
    for(i = 1; i < tr->nose_length; i++) {
240190fc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
240190fe:	2a01      	cmp	r2, #1
24019100:	dd27      	ble.n	24019152 <tract_compute+0x296>
24019102:	2304      	movs	r3, #4
24019104:	f04f 0c01 	mov.w	ip, #1
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
24019108:	6d60      	ldr	r0, [r4, #84]	; 0x54
    for(i = 1; i < tr->nose_length; i++) {
2401910a:	f10c 0c01 	add.w	ip, ip, #1
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
2401910e:	6da5      	ldr	r5, [r4, #88]	; 0x58
24019110:	4418      	add	r0, r3
24019112:	eb05 0e03 	add.w	lr, r5, r3
24019116:	edd0 7a00 	vldr	s15, [r0]
2401911a:	ed1e 7a01 	vldr	s14, [lr, #-4]
        tr->nose_junc_outR[i] = tr->noseR[i - 1] - w;
2401911e:	e9d4 2118 	ldrd	r2, r1, [r4, #96]	; 0x60
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
24019122:	ee77 7a27 	vadd.f32	s15, s14, s15
24019126:	4419      	add	r1, r3
        tr->nose_junc_outR[i] = tr->noseR[i - 1] - w;
24019128:	441a      	add	r2, r3
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
2401912a:	edd1 6a00 	vldr	s13, [r1]
        tr->nose_junc_outR[i] = tr->noseR[i - 1] - w;
2401912e:	eea6 7ae7 	vfms.f32	s14, s13, s15
24019132:	ed82 7a00 	vstr	s14, [r2]
        tr->nose_junc_outL[i] = tr->noseL[i] + w;
24019136:	6d61      	ldr	r1, [r4, #84]	; 0x54
24019138:	6de2      	ldr	r2, [r4, #92]	; 0x5c
2401913a:	4419      	add	r1, r3
2401913c:	441a      	add	r2, r3
2401913e:	3304      	adds	r3, #4
24019140:	ed91 7a00 	vldr	s14, [r1]
24019144:	eea6 7aa7 	vfma.f32	s14, s13, s15
24019148:	ed82 7a00 	vstr	s14, [r2]
    for(i = 1; i < tr->nose_length; i++) {
2401914c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
2401914e:	4562      	cmp	r2, ip
24019150:	dcda      	bgt.n	24019108 <tract_compute+0x24c>
    for(i = 0; i < tr->nose_length; i++) {
24019152:	2a00      	cmp	r2, #0
24019154:	dd13      	ble.n	2401917e <tract_compute+0x2c2>
24019156:	2300      	movs	r3, #0
24019158:	4618      	mov	r0, r3
        tr->noseR[i] = tr->nose_junc_outR[i];
2401915a:	6e21      	ldr	r1, [r4, #96]	; 0x60
2401915c:	469c      	mov	ip, r3
2401915e:	6da2      	ldr	r2, [r4, #88]	; 0x58
    for(i = 0; i < tr->nose_length; i++) {
24019160:	3001      	adds	r0, #1
        tr->noseR[i] = tr->nose_junc_outR[i];
24019162:	4419      	add	r1, r3
24019164:	441a      	add	r2, r3
24019166:	3304      	adds	r3, #4
24019168:	6809      	ldr	r1, [r1, #0]
2401916a:	6011      	str	r1, [r2, #0]
        tr->noseL[i] = tr->nose_junc_outL[i + 1];
2401916c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
2401916e:	6d62      	ldr	r2, [r4, #84]	; 0x54
24019170:	4419      	add	r1, r3
24019172:	4462      	add	r2, ip
24019174:	6809      	ldr	r1, [r1, #0]
24019176:	6011      	str	r1, [r2, #0]
    for(i = 0; i < tr->nose_length; i++) {
24019178:	6ba2      	ldr	r2, [r4, #56]	; 0x38
2401917a:	4282      	cmp	r2, r0
2401917c:	dced      	bgt.n	2401915a <tract_compute+0x29e>
    tr->nose_output = tr->noseR[tr->nose_length - 1];
2401917e:	6da3      	ldr	r3, [r4, #88]	; 0x58
24019180:	eb03 0382 	add.w	r3, r3, r2, lsl #2
24019184:	f853 3c04 	ldr.w	r3, [r3, #-4]
24019188:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
}
2401918c:	b003      	add	sp, #12
2401918e:	ecbd 8b04 	vpop	{d8-d9}
24019192:	bd30      	pop	{r4, r5, pc}
24019194:	3e8f5c29 	.word	0x3e8f5c29
24019198:	3f7fbe77 	.word	0x3f7fbe77

2401919c <tVoc_init>:
}



void    tVoc_init         (tVoc* const voc, int numTractSections, int maxNumTractSections, LEAF* const leaf)
{
2401919c:	b5f0      	push	{r4, r5, r6, r7, lr}
	tVoc_initToPool   (voc, numTractSections, maxNumTractSections, &leaf->mempool);
}

void    tVoc_initToPool   (tVoc* const voc, int numTractSections, int maxNumTractSections, tMempool* const mp)
{
	_tMempool* m = *mp;
2401919e:	699d      	ldr	r5, [r3, #24]
{
240191a0:	b085      	sub	sp, #20
240191a2:	4607      	mov	r7, r0
240191a4:	460e      	mov	r6, r1
	_tVoc* v = *voc = (_tVoc*) mpool_alloc(sizeof(_tVoc), m);
240191a6:	2018      	movs	r0, #24
240191a8:	4629      	mov	r1, r5
{
240191aa:	9201      	str	r2, [sp, #4]
	_tMempool* m = *mp;
240191ac:	9502      	str	r5, [sp, #8]
	_tVoc* v = *voc = (_tVoc*) mpool_alloc(sizeof(_tVoc), m);
240191ae:	f7fc f845 	bl	2401523c <mpool_alloc>
240191b2:	4604      	mov	r4, r0
240191b4:	6038      	str	r0, [r7, #0]
	_glottis* glot = *glo = (_glottis*) mpool_calloc(sizeof(_glottis), m);
240191b6:	4629      	mov	r1, r5
	v->mempool = m;
240191b8:	6005      	str	r5, [r0, #0]
	_glottis* glot = *glo = (_glottis*) mpool_calloc(sizeof(_glottis), m);
240191ba:	2038      	movs	r0, #56	; 0x38
240191bc:	f7fc f8a2 	bl	24015304 <mpool_calloc>
240191c0:	6060      	str	r0, [r4, #4]
240191c2:	4603      	mov	r3, r0
	glot->mempool = m;
240191c4:	6005      	str	r5, [r0, #0]
	_glottis* glot = *glo = (_glottis*) mpool_calloc(sizeof(_glottis), m);
240191c6:	9003      	str	r0, [sp, #12]
    glot->T = 1.0f/leaf->sampleRate; /* big T */
240191c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	glot->freq = 140.0f; /* 140Hz frequency by default */
240191cc:	480d      	ldr	r0, [pc, #52]	; (24019204 <tVoc_init+0x68>)
	LEAF* leaf = glot->mempool->leaf;
240191ce:	6869      	ldr	r1, [r5, #4]
	glot->freq = 140.0f; /* 140Hz frequency by default */
240191d0:	6058      	str	r0, [r3, #4]
    glot->tenseness = 0.6f; /* value between 0 and 1 */
240191d2:	480d      	ldr	r0, [pc, #52]	; (24019208 <tVoc_init+0x6c>)
240191d4:	6098      	str	r0, [r3, #8]
    glottis_setup_waveform(&glot);
240191d6:	a803      	add	r0, sp, #12
    glot->T = 1.0f/leaf->sampleRate; /* big T */
240191d8:	ed91 7a00 	vldr	s14, [r1]
    glot->time_in_waveform = 0;
240191dc:	2100      	movs	r1, #0
    glot->T = 1.0f/leaf->sampleRate; /* big T */
240191de:	eec6 7a87 	vdiv.f32	s15, s13, s14
    glot->time_in_waveform = 0;
240191e2:	6159      	str	r1, [r3, #20]
    glot->T = 1.0f/leaf->sampleRate; /* big T */
240191e4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    glottis_setup_waveform(&glot);
240191e8:	f7fe ffea 	bl	240181c0 <glottis_setup_waveform>
	glottis_initToPool(&v->glot, &m); /* initialize glottis */
	tract_initToPool(&v->tr, numTractSections, maxNumTractSections, &m); /* initialize vocal tract */
240191ec:	ab02      	add	r3, sp, #8
240191ee:	9a01      	ldr	r2, [sp, #4]
240191f0:	4631      	mov	r1, r6
240191f2:	f104 0008 	add.w	r0, r4, #8
240191f6:	f7ff f997 	bl	24018528 <tract_initToPool>
	v->counter = 0;
240191fa:	2300      	movs	r3, #0
240191fc:	6123      	str	r3, [r4, #16]
}
240191fe:	b005      	add	sp, #20
24019200:	bdf0      	pop	{r4, r5, r6, r7, pc}
24019202:	bf00      	nop
24019204:	430c0000 	.word	0x430c0000
24019208:	3f19999a 	.word	0x3f19999a

2401920c <tVoc_tick>:
	//mpool_free((char*)v->buf, v->mempool);
	mpool_free((char*)v, v->mempool);
}

Lfloat   tVoc_tick         (tVoc* const voc)
{
2401920c:	b538      	push	{r3, r4, r5, lr}
2401920e:	ed2d 8b04 	vpush	{d8-d9}
	_tVoc* v = *voc;
24019212:	6804      	ldr	r4, [r0, #0]
	Lfloat vocal_output, glot;
	Lfloat lambda1,lambda2;

	if(v->counter == 0) {
24019214:	6923      	ldr	r3, [r4, #16]
		tract_reshape(&v->tr);
24019216:	f104 0508 	add.w	r5, r4, #8
	if(v->counter == 0) {
2401921a:	b323      	cbz	r3, 24019266 <tVoc_tick+0x5a>
		*/
	}

	//Lfloat finalOutput = v->buf[v->counter];
	vocal_output = 0.0f;
	lambda1 = ((Lfloat) v->counter) * 0.015625f;// /64
2401921c:	ee07 3a90 	vmov	s15, r3
24019220:	eddf 9a20 	vldr	s19, [pc, #128]	; 240192a4 <tVoc_tick+0x98>
	lambda2 = (Lfloat) (v->counter + 0.5f) * 0.015625f; //   /64
	glot = glottis_compute(&v->glot);
24019224:	1d20      	adds	r0, r4, #4
	lambda1 = ((Lfloat) v->counter) * 0.015625f;// /64
24019226:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
	glot = glottis_compute(&v->glot);
2401922a:	f7ff f885 	bl	24018338 <glottis_compute>

	tract_compute(&v->tr, glot, lambda1);
2401922e:	4628      	mov	r0, r5
	glot = glottis_compute(&v->glot);
24019230:	eeb0 9a40 	vmov.f32	s18, s0
	tract_compute(&v->tr, glot, lambda1);
24019234:	ee68 0a29 	vmul.f32	s1, s16, s19
24019238:	f7ff fe40 	bl	24018ebc <tract_compute>
	vocal_output += v->tr->lip_output + v->tr->nose_output;

	if (v->doubleCompute)
2401923c:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
	vocal_output += v->tr->lip_output + v->tr->nose_output;
24019240:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
24019244:	edd3 8a28 	vldr	s17, [r3, #160]	; 0xa0
24019248:	ee78 8aa7 	vadd.f32	s17, s17, s15
	lambda2 = (Lfloat) (v->counter + 0.5f) * 0.015625f; //   /64
2401924c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	if (v->doubleCompute)
24019250:	b98a      	cbnz	r2, 24019276 <tVoc_tick+0x6a>
		vocal_output += v->tr->lip_output + v->tr->nose_output;
		vocal_output *= 0.25f;
	}
	else
	{
		vocal_output *= 0.5f;
24019252:	ee28 0aa7 	vmul.f32	s0, s17, s15
	}
	//v->buf[i] = vocal_output * 0.125f;


	//vocal_output = glot;
	v->counter = (v->counter + 1) & 63;
24019256:	6923      	ldr	r3, [r4, #16]
24019258:	3301      	adds	r3, #1
2401925a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401925e:	6123      	str	r3, [r4, #16]
	return vocal_output;
}
24019260:	ecbd 8b04 	vpop	{d8-d9}
24019264:	bd38      	pop	{r3, r4, r5, pc}
		tract_reshape(&v->tr);
24019266:	4628      	mov	r0, r5
24019268:	f7ff fcda 	bl	24018c20 <tract_reshape>
		tract_calculate_reflections(&v->tr);
2401926c:	4628      	mov	r0, r5
2401926e:	f7ff f8d5 	bl	2401841c <tract_calculate_reflections>
	lambda1 = ((Lfloat) v->counter) * 0.015625f;// /64
24019272:	6923      	ldr	r3, [r4, #16]
24019274:	e7d2      	b.n	2401921c <tVoc_tick+0x10>
	lambda2 = (Lfloat) (v->counter + 0.5f) * 0.015625f; //   /64
24019276:	ee78 0a27 	vadd.f32	s1, s16, s15
		tract_compute(&v->tr, glot, lambda2);
2401927a:	4628      	mov	r0, r5
2401927c:	eeb0 0a49 	vmov.f32	s0, s18
24019280:	ee60 0aa9 	vmul.f32	s1, s1, s19
24019284:	f7ff fe1a 	bl	24018ebc <tract_compute>
		vocal_output += v->tr->lip_output + v->tr->nose_output;
24019288:	68a3      	ldr	r3, [r4, #8]
		vocal_output *= 0.25f;
2401928a:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
		vocal_output += v->tr->lip_output + v->tr->nose_output;
2401928e:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
24019292:	edd3 6a29 	vldr	s13, [r3, #164]	; 0xa4
24019296:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401929a:	ee77 7aa8 	vadd.f32	s15, s15, s17
		vocal_output *= 0.25f;
2401929e:	ee27 0a87 	vmul.f32	s0, s15, s14
240192a2:	e7d8      	b.n	24019256 <tVoc_tick+0x4a>
240192a4:	3c800000 	.word	0x3c800000

240192a8 <tVoc_setDoubleComputeFlag>:
    *out = vocal_output * 0.125;
    v->counter = (v->counter + 1) & 511;
}
void    tVoc_setDoubleComputeFlag(tVoc* const voc, int doubleCompute)
{
	_tVoc* v = *voc;
240192a8:	6803      	ldr	r3, [r0, #0]
	v->doubleCompute = doubleCompute;
240192aa:	60d9      	str	r1, [r3, #12]
}
240192ac:	4770      	bx	lr
240192ae:	bf00      	nop

240192b0 <tVoc_setFreq>:


void    tVoc_setFreq      (tVoc* const voc, Lfloat freq)
{
	_tVoc* v = *voc;
	v->glot->freq = freq;
240192b0:	6803      	ldr	r3, [r0, #0]
240192b2:	685b      	ldr	r3, [r3, #4]
240192b4:	ed83 0a01 	vstr	s0, [r3, #4]
}
240192b8:	4770      	bx	lr
240192ba:	bf00      	nop

240192bc <tVoc_set_tractLength>:
	v->tr->turbuluencePointDiameter[1] = touch_diameter;
}
void tVoc_set_tractLength(tVoc* const voc, int newLength)
{
	_tVoc* v = *voc;
	tract_newLength(&v->tr, newLength);
240192bc:	6800      	ldr	r0, [r0, #0]
240192be:	3008      	adds	r0, #8
240192c0:	f7ff bb7c 	b.w	240189bc <tract_newLength>

240192c4 <tVoc_set_tenseness>:
}

void tVoc_set_tenseness(tVoc* const voc, Lfloat tenseness)
{
	_tVoc* v = *voc;
	v->glot->tenseness = tenseness;
240192c4:	6803      	ldr	r3, [r0, #0]
240192c6:	685b      	ldr	r3, [r3, #4]
240192c8:	ed83 0a02 	vstr	s0, [r3, #8]
}
240192cc:	4770      	bx	lr
240192ce:	bf00      	nop

240192d0 <tVoc_set_velum>:
	return &v->glot->tenseness;
}
void tVoc_set_velum(tVoc* const voc, Lfloat velum)
{
	_tVoc* v = *voc;
	v->tr->velum_target = velum;
240192d0:	6803      	ldr	r3, [r0, #0]
240192d2:	689b      	ldr	r3, [r3, #8]
240192d4:	ed83 0a22 	vstr	s0, [r3, #136]	; 0x88
}
240192d8:	4770      	bx	lr
240192da:	bf00      	nop
240192dc:	0000      	movs	r0, r0
	...

240192e0 <tVoc_set_tongue_and_touch_diameters>:
	return &v->tr->velum_target;
}

//diameter and index are 0-1.0f
void tVoc_set_tongue_and_touch_diameters(tVoc* const voc, Lfloat tongue_index, Lfloat tongue_diameter, Lfloat touch_index, Lfloat touch_diameter, Lfloat *theDiameters)
{
240192e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
240192e4:	ed2d 8b0a 	vpush	{d8-d12}
	int i;

	_tVoc* v = *voc;
240192e8:	6807      	ldr	r7, [r0, #0]
{
240192ea:	460e      	mov	r6, r1

	Lfloat t;
	Lfloat curve;
	//do tongue position
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
240192ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
240192f0:	68bb      	ldr	r3, [r7, #8]
{
240192f2:	eeb0 9a40 	vmov.f32	s18, s0
240192f6:	eef0 aa41 	vmov.f32	s21, s2
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
240192fa:	6c5c      	ldr	r4, [r3, #68]	; 0x44
{
240192fc:	eeb0 ba61 	vmov.f32	s22, s3
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
24019300:	6c1a      	ldr	r2, [r3, #64]	; 0x40

	for (i = 0; i < v->tr->n; i++)
24019302:	6859      	ldr	r1, [r3, #4]
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
24019304:	1b12      	subs	r2, r2, r4
	for (i = 0; i < v->tr->n; i++)
24019306:	2900      	cmp	r1, #0
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
24019308:	ee07 2a90 	vmov	s15, r2
2401930c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24019310:	ee87 8a27 	vdiv.f32	s16, s14, s15
	for (i = 0; i < v->tr->n; i++)
24019314:	dd0d      	ble.n	24019332 <tVoc_set_tongue_and_touch_diameters+0x52>
24019316:	4630      	mov	r0, r6
24019318:	2200      	movs	r2, #0
	{
		theDiameters[i] = v->tr->rest_diameter[i];
2401931a:	691b      	ldr	r3, [r3, #16]
2401931c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	for (i = 0; i < v->tr->n; i++)
24019320:	3201      	adds	r2, #1
		theDiameters[i] = v->tr->rest_diameter[i];
24019322:	681b      	ldr	r3, [r3, #0]
24019324:	f840 3b04 	str.w	r3, [r0], #4
	for (i = 0; i < v->tr->n; i++)
24019328:	68bb      	ldr	r3, [r7, #8]
2401932a:	6859      	ldr	r1, [r3, #4]
2401932c:	4291      	cmp	r1, r2
2401932e:	dcf4      	bgt.n	2401931a <tVoc_set_tongue_and_touch_diameters+0x3a>
	}
	for(i = v->tr->blade_start; i < v->tr->lip_start; i++)
24019330:	6c5c      	ldr	r4, [r3, #68]	; 0x44
24019332:	6c9d      	ldr	r5, [r3, #72]	; 0x48
24019334:	42a5      	cmp	r5, r4
24019336:	dd48      	ble.n	240193ca <tVoc_set_tongue_and_touch_diameters+0xea>
	{
		t = 1.1f * M_PI * (Lfloat)(tongue_index - i) * alpha;
		Lfloat fixedTongueDiameter = 2.0f + ((tongue_diameter - 2.0f) * 0.66666666666667f);
24019338:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
		curve = (1.5f - fixedTongueDiameter + 1.7f) * cosf(t);
2401933c:	ed9f 7a80 	vldr	s14, [pc, #512]	; 24019540 <tVoc_set_tongue_and_touch_diameters+0x260>
		t = 1.1f * M_PI * (Lfloat)(tongue_index - i) * alpha;
24019340:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
		curve = (1.5f - fixedTongueDiameter + 1.7f) * cosf(t);
24019344:	eddf 9a7f 	vldr	s19, [pc, #508]	; 24019544 <tVoc_set_tongue_and_touch_diameters+0x264>
		}
		if(i == v->tr->blade_start || i == v->tr->lip_start - 2)
		{
			curve *= 0.94f;
		}
		theDiameters[i] = 1.5f - curve;
24019348:	eeb7 aa08 	vmov.f32	s20, #120	; 0x3fc00000  1.5
2401934c:	eb06 0984 	add.w	r9, r6, r4, lsl #2
		curve = (1.5f - fixedTongueDiameter + 1.7f) * cosf(t);
24019350:	ee77 7ae0 	vsub.f32	s15, s15, s1
			curve *= 0.8f;
24019354:	ed9f ca7c 	vldr	s24, [pc, #496]	; 24019548 <tVoc_set_tongue_and_touch_diameters+0x268>
			curve *= 0.94f;
24019358:	eddf ba7c 	vldr	s23, [pc, #496]	; 2401954c <tVoc_set_tongue_and_touch_diameters+0x26c>
		curve = (1.5f - fixedTongueDiameter + 1.7f) * cosf(t);
2401935c:	46a0      	mov	r8, r4
2401935e:	ed9f 6b74 	vldr	d6, [pc, #464]	; 24019530 <tVoc_set_tongue_and_touch_diameters+0x250>
24019362:	eee7 9a87 	vfma.f32	s19, s15, s14
24019366:	ee28 8b06 	vmul.f64	d8, d8, d6
2401936a:	e00c      	b.n	24019386 <tVoc_set_tongue_and_touch_diameters+0xa6>
		if(i == v->tr->blade_start || i == v->tr->lip_start - 2)
2401936c:	42a5      	cmp	r5, r4
2401936e:	d025      	beq.n	240193bc <tVoc_set_tongue_and_touch_diameters+0xdc>
		theDiameters[i] = 1.5f - curve;
24019370:	ee7a 7a40 	vsub.f32	s15, s20, s0
	for(i = v->tr->blade_start; i < v->tr->lip_start; i++)
24019374:	3401      	adds	r4, #1
		theDiameters[i] = 1.5f - curve;
24019376:	ece9 7a01 	vstmia	r9!, {s15}
	for(i = v->tr->blade_start; i < v->tr->lip_start; i++)
2401937a:	68bb      	ldr	r3, [r7, #8]
2401937c:	6c9d      	ldr	r5, [r3, #72]	; 0x48
2401937e:	42a5      	cmp	r5, r4
24019380:	dd22      	ble.n	240193c8 <tVoc_set_tongue_and_touch_diameters+0xe8>
		if(i == v->tr->blade_start - 2 || i == v->tr->lip_start - 1)
24019382:	f8d3 8044 	ldr.w	r8, [r3, #68]	; 0x44
		t = 1.1f * M_PI * (Lfloat)(tongue_index - i) * alpha;
24019386:	ee07 4a90 	vmov	s15, r4
2401938a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
2401938e:	ee39 7a47 	vsub.f32	s14, s18, s14
24019392:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
24019396:	ee27 7b08 	vmul.f64	d7, d7, d8
		curve = (1.5f - fixedTongueDiameter + 1.7f) * cosf(t);
2401939a:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
2401939e:	f000 fe27 	bl	24019ff0 <cosf>
		if(i == v->tr->blade_start - 2 || i == v->tr->lip_start - 1)
240193a2:	f1a8 0302 	sub.w	r3, r8, #2
240193a6:	1e6a      	subs	r2, r5, #1
		curve = (1.5f - fixedTongueDiameter + 1.7f) * cosf(t);
240193a8:	ee29 0a80 	vmul.f32	s0, s19, s0
		if(i == v->tr->blade_start - 2 || i == v->tr->lip_start - 1)
240193ac:	42a3      	cmp	r3, r4
		if(i == v->tr->blade_start || i == v->tr->lip_start - 2)
240193ae:	f1a5 0502 	sub.w	r5, r5, #2
		if(i == v->tr->blade_start - 2 || i == v->tr->lip_start - 1)
240193b2:	d006      	beq.n	240193c2 <tVoc_set_tongue_and_touch_diameters+0xe2>
240193b4:	42a2      	cmp	r2, r4
240193b6:	d004      	beq.n	240193c2 <tVoc_set_tongue_and_touch_diameters+0xe2>
		if(i == v->tr->blade_start || i == v->tr->lip_start - 2)
240193b8:	4544      	cmp	r4, r8
240193ba:	d1d7      	bne.n	2401936c <tVoc_set_tongue_and_touch_diameters+0x8c>
			curve *= 0.94f;
240193bc:	ee20 0a2b 	vmul.f32	s0, s0, s23
240193c0:	e7d6      	b.n	24019370 <tVoc_set_tongue_and_touch_diameters+0x90>
			curve *= 0.8f;
240193c2:	ee20 0a0c 	vmul.f32	s0, s0, s24
240193c6:	e7f7      	b.n	240193b8 <tVoc_set_tongue_and_touch_diameters+0xd8>
	}

	//now do additional constrictions (touch position)
	Lfloat width=2.0f;
	Lfloat tenwidth = v->tr->n*0.227272727272727f;
240193c8:	6859      	ldr	r1, [r3, #4]
240193ca:	ee07 1a90 	vmov	s15, r1
	Lfloat fivewidth = v->tr->n*0.113636363636364f;
	Lfloat twentyfivewidth = v->tr->n *0.568181818181818f;
240193ce:	ed9f 7a60 	vldr	s14, [pc, #384]	; 24019550 <tVoc_set_tongue_and_touch_diameters+0x270>
	Lfloat tenwidth = v->tr->n*0.227272727272727f;
240193d2:	ed9f 8a60 	vldr	s16, [pc, #384]	; 24019554 <tVoc_set_tongue_and_touch_diameters+0x274>
240193d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	Lfloat twentyfivewidth = v->tr->n *0.568181818181818f;
240193da:	ee27 7a87 	vmul.f32	s14, s15, s14
	Lfloat tenwidth = v->tr->n*0.227272727272727f;
240193de:	ee27 8a88 	vmul.f32	s16, s15, s16
	if (touch_index< (twentyfivewidth)) width = tenwidth; //25 in original code
240193e2:	eeb4 7aea 	vcmpe.f32	s14, s21
240193e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240193ea:	dc0f      	bgt.n	2401940c <tVoc_set_tongue_and_touch_diameters+0x12c>
	else if (touch_index>=v->tr->tip_start) width= fivewidth;
240193ec:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
	Lfloat fivewidth = v->tr->n*0.113636363636364f;
240193f0:	ed9f 6a59 	vldr	s12, [pc, #356]	; 24019558 <tVoc_set_tongue_and_touch_diameters+0x278>
	else if (touch_index>=v->tr->tip_start) width= fivewidth;
240193f4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	Lfloat fivewidth = v->tr->n*0.113636363636364f;
240193f8:	ee27 6a86 	vmul.f32	s12, s15, s12
	else if (touch_index>=v->tr->tip_start) width= fivewidth;
240193fc:	eef4 6aea 	vcmpe.f32	s13, s21
24019400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019404:	f200 8087 	bhi.w	24019516 <tVoc_set_tongue_and_touch_diameters+0x236>
24019408:	eeb0 8a46 	vmov.f32	s16, s12
	else width = tenwidth-fivewidth*(touch_index-twentyfivewidth)/(v->tr->tip_start-twentyfivewidth);
	Lfloat invWidth = 1.0f / width;
	if ((touch_index < v->tr->n) && (touch_diameter < 3.0f))
2401940c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
24019410:	eeb4 ba47 	vcmp.f32	s22, s14
24019414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019418:	d504      	bpl.n	24019424 <tVoc_set_tongue_and_touch_diameters+0x144>
2401941a:	eef4 7aea 	vcmpe.f32	s15, s21
2401941e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019422:	dc03      	bgt.n	2401942c <tVoc_set_tongue_and_touch_diameters+0x14c>
				theDiameters[intIndex+i] = touch_diameter + (theDiameters[intIndex+i]-touch_diameter)*shrink;
			}
		}
	}

}
24019424:	ecbd 8b0a 	vpop	{d8-d12}
24019428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
2401942c:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
24019430:	fefa 7a48 	vrintp.f32	s15, s16
		int intIndex = roundf(touch_index);
24019434:	feb8 7a6a 	vrinta.f32	s14, s21
24019438:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
2401943c:	ee77 7aa9 	vadd.f32	s15, s15, s19
24019440:	ee78 8a29 	vadd.f32	s17, s16, s19
		int intIndex = roundf(touch_index);
24019444:	ee17 5a10 	vmov	r5, s14
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
24019448:	eef1 7a67 	vneg.f32	s15, s15
2401944c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24019450:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
24019454:	eeb4 7ae8 	vcmpe.f32	s14, s17
24019458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401945c:	d5e2      	bpl.n	24019424 <tVoc_set_tongue_and_touch_diameters+0x144>
	Lfloat invWidth = 1.0f / width;
2401945e:	ee89 ca88 	vdiv.f32	s24, s19, s16
24019462:	ee17 4a90 	vmov	r4, s15
			if (relpos <= 0.0f) shrink = 0.0f;
24019466:	ed9f aa3d 	vldr	s20, [pc, #244]	; 2401955c <tVoc_set_tongue_and_touch_diameters+0x27c>
2401946a:	442c      	add	r4, r5
2401946c:	f1c5 0501 	rsb	r5, r5, #1
24019470:	eb06 0684 	add.w	r6, r6, r4, lsl #2
24019474:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
24019478:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 24019538 <tVoc_set_tongue_and_touch_diameters+0x258>
			else shrink = 0.5f*(1.0f-cosf(M_PI * relpos * invWidth));
2401947c:	eeb7 cacc 	vcvt.f64.f32	d12, s24
24019480:	ee2c cb06 	vmul.f64	d12, d12, d6
			Lfloat relpos = (intIndex+i) - touch_index;
24019484:	ee07 4a90 	vmov	s15, r4
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
24019488:	2c00      	cmp	r4, #0
			Lfloat relpos = (intIndex+i) - touch_index;
2401948a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
2401948e:	db32      	blt.n	240194f6 <tVoc_set_tongue_and_touch_diameters+0x216>
24019490:	68bb      	ldr	r3, [r7, #8]
			Lfloat relpos = (intIndex+i) - touch_index;
24019492:	ee77 7aea 	vsub.f32	s15, s15, s21
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
24019496:	685b      	ldr	r3, [r3, #4]
			relpos = fabsf(relpos)-0.5f;
24019498:	eef0 7ae7 	vabs.f32	s15, s15
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
2401949c:	429c      	cmp	r4, r3
2401949e:	da2a      	bge.n	240194f6 <tVoc_set_tongue_and_touch_diameters+0x216>
			if (relpos <= 0.0f) shrink = 0.0f;
240194a0:	eef4 7ac9 	vcmpe.f32	s15, s18
			relpos = fabsf(relpos)-0.5f;
240194a4:	ee37 7ac9 	vsub.f32	s14, s15, s18
			if (relpos <= 0.0f) shrink = 0.0f;
240194a8:	eef0 7a4a 	vmov.f32	s15, s20
240194ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240194b0:	d912      	bls.n	240194d8 <tVoc_set_tongue_and_touch_diameters+0x1f8>
			else if (relpos > width) shrink = 1.0f;
240194b2:	eeb4 8ac7 	vcmpe.f32	s16, s14
			else shrink = 0.5f*(1.0f-cosf(M_PI * relpos * invWidth));
240194b6:	eeb7 0ac7 	vcvt.f64.f32	d0, s14
			else if (relpos > width) shrink = 1.0f;
240194ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240194be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			else shrink = 0.5f*(1.0f-cosf(M_PI * relpos * invWidth));
240194c2:	ee20 0b0c 	vmul.f64	d0, d0, d12
			else if (relpos > width) shrink = 1.0f;
240194c6:	d407      	bmi.n	240194d8 <tVoc_set_tongue_and_touch_diameters+0x1f8>
			else shrink = 0.5f*(1.0f-cosf(M_PI * relpos * invWidth));
240194c8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
240194cc:	f000 fd90 	bl	24019ff0 <cosf>
240194d0:	ee39 0ac0 	vsub.f32	s0, s19, s0
240194d4:	ee60 7a09 	vmul.f32	s15, s0, s18
			if (touch_diameter < theDiameters[intIndex+i])
240194d8:	ed96 7a00 	vldr	s14, [r6]
				theDiameters[intIndex+i] = touch_diameter + (theDiameters[intIndex+i]-touch_diameter)*shrink;
240194dc:	ee77 6a4b 	vsub.f32	s13, s14, s22
			if (touch_diameter < theDiameters[intIndex+i])
240194e0:	eeb4 7acb 	vcmpe.f32	s14, s22
				theDiameters[intIndex+i] = touch_diameter + (theDiameters[intIndex+i]-touch_diameter)*shrink;
240194e4:	eeb0 7a4b 	vmov.f32	s14, s22
			if (touch_diameter < theDiameters[intIndex+i])
240194e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				theDiameters[intIndex+i] = touch_diameter + (theDiameters[intIndex+i]-touch_diameter)*shrink;
240194ec:	eea6 7aa7 	vfma.f32	s14, s13, s15
240194f0:	bfc8      	it	gt
240194f2:	ed86 7a00 	vstrgt	s14, [r6]
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
240194f6:	192b      	adds	r3, r5, r4
240194f8:	3604      	adds	r6, #4
240194fa:	3401      	adds	r4, #1
240194fc:	ee07 3a90 	vmov	s15, r3
24019500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24019504:	eef4 7ae8 	vcmpe.f32	s15, s17
24019508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401950c:	d4ba      	bmi.n	24019484 <tVoc_set_tongue_and_touch_diameters+0x1a4>
}
2401950e:	ecbd 8b0a 	vpop	{d8-d12}
24019512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	else width = tenwidth-fivewidth*(touch_index-twentyfivewidth)/(v->tr->tip_start-twentyfivewidth);
24019516:	ee7a 5ac7 	vsub.f32	s11, s21, s14
2401951a:	ee37 7a66 	vsub.f32	s14, s14, s13
2401951e:	ee65 6a86 	vmul.f32	s13, s11, s12
24019522:	ee86 6a87 	vdiv.f32	s12, s13, s14
24019526:	ee38 8a06 	vadd.f32	s16, s16, s12
2401952a:	e76f      	b.n	2401940c <tVoc_set_tongue_and_touch_diameters+0x12c>
2401952c:	f3af 8000 	nop.w
24019530:	4d2562ef 	.word	0x4d2562ef
24019534:	400ba561 	.word	0x400ba561
24019538:	54442d18 	.word	0x54442d18
2401953c:	400921fb 	.word	0x400921fb
24019540:	3f2aaaab 	.word	0x3f2aaaab
24019544:	3f99999a 	.word	0x3f99999a
24019548:	3f4ccccd 	.word	0x3f4ccccd
2401954c:	3f70a3d7 	.word	0x3f70a3d7
24019550:	3f11745d 	.word	0x3f11745d
24019554:	3e68ba2f 	.word	0x3e68ba2f
24019558:	3de8ba2f 	.word	0x3de8ba2f
2401955c:	00000000 	.word	0x00000000

24019560 <tVoc_set_tongue_shape_and_touch>:
{
24019560:	b500      	push	{lr}
	tongue_diameter += 2.05f;
24019562:	eddf 7a23 	vldr	s15, [pc, #140]	; 240195f0 <tVoc_set_tongue_shape_and_touch+0x90>
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
24019566:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
2401956a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 240195f4 <tVoc_set_tongue_shape_and_touch+0x94>
{
2401956e:	ed2d 8b04 	vpush	{d8-d9}
24019572:	fec1 1a87 	vmaxnm.f32	s3, s3, s14
24019576:	b083      	sub	sp, #12
	_tVoc* v = *voc;
24019578:	6803      	ldr	r3, [r0, #0]
	tongue_diameter += 2.05f;
2401957a:	eddf 9a1f 	vldr	s19, [pc, #124]	; 240195f8 <tVoc_set_tongue_shape_and_touch+0x98>
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
2401957e:	eeb0 9a00 	vmov.f32	s18, #0	; 0x40000000  2.0
	_tVoc* v = *voc;
24019582:	9301      	str	r3, [sp, #4]
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
24019584:	a801      	add	r0, sp, #4
	return v->tr->target_diameter;
24019586:	689b      	ldr	r3, [r3, #8]
	tongue_diameter += 2.05f;
24019588:	eee0 9aa7 	vfma.f32	s19, s1, s15
	touch_diameter *= 1.6f;
2401958c:	eddf 7a1b 	vldr	s15, [pc, #108]	; 240195fc <tVoc_set_tongue_shape_and_touch+0x9c>
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
24019590:	edd3 8a14 	vldr	s17, [r3, #80]	; 0x50
	touch_diameter *= 1.6f;
24019594:	ee21 8aa7 	vmul.f32	s16, s3, s15
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
24019598:	edd3 7a01 	vldr	s15, [r3, #4]
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
2401959c:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
240195a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
240195a4:	6959      	ldr	r1, [r3, #20]
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
240195a6:	ee37 7a68 	vsub.f32	s14, s14, s17
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
240195aa:	eef0 1a48 	vmov.f32	s3, s16
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
240195ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
240195b2:	eee7 8a00 	vfma.f32	s17, s14, s0
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
240195b6:	eef0 0a69 	vmov.f32	s1, s19
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
240195ba:	eea7 9a81 	vfma.f32	s18, s15, s2
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
240195be:	eeb0 0a68 	vmov.f32	s0, s17
240195c2:	eeb0 1a49 	vmov.f32	s2, s18
240195c6:	f7ff fe8b 	bl	240192e0 <tVoc_set_tongue_and_touch_diameters>
	v->tr->turbuluencePointPosition[0] = tongue_index;
240195ca:	9b01      	ldr	r3, [sp, #4]
240195cc:	689a      	ldr	r2, [r3, #8]
240195ce:	edc2 8a2f 	vstr	s17, [r2, #188]	; 0xbc
	v->tr->turbuluencePointDiameter[0] = tongue_diameter;
240195d2:	689a      	ldr	r2, [r3, #8]
240195d4:	edc2 9a31 	vstr	s19, [r2, #196]	; 0xc4
	v->tr->turbuluencePointPosition[1] = touch_index;
240195d8:	689a      	ldr	r2, [r3, #8]
240195da:	ed82 9a30 	vstr	s18, [r2, #192]	; 0xc0
	v->tr->turbuluencePointDiameter[1] = touch_diameter;
240195de:	689b      	ldr	r3, [r3, #8]
240195e0:	ed83 8a32 	vstr	s16, [r3, #200]	; 0xc8
}
240195e4:	b003      	add	sp, #12
240195e6:	ecbd 8b04 	vpop	{d8-d9}
240195ea:	f85d fb04 	ldr.w	pc, [sp], #4
240195ee:	bf00      	nop
240195f0:	3fb9999a 	.word	0x3fb9999a
240195f4:	00000000 	.word	0x00000000
240195f8:	40033333 	.word	0x40033333
240195fc:	3fcccccd 	.word	0x3fcccccd

24019600 <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
24019600:	4770      	bx	lr
24019602:	bf00      	nop

24019604 <LEAF_init>:
{
24019604:	b538      	push	{r3, r4, r5, lr}
    leaf->_internal_mempool.leaf = leaf;
24019606:	6200      	str	r0, [r0, #32]
{
24019608:	4604      	mov	r4, r0
2401960a:	461d      	mov	r5, r3
2401960c:	ed2d 8b02 	vpush	{d8}
24019610:	eeb0 8a40 	vmov.f32	s16, s0
    leaf_pool_init(leaf, memory, memorysize);
24019614:	f7fb fdf8 	bl	24015208 <leaf_pool_init>
    leaf->invSampleRate = 1.0f/sr;
24019618:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
2401961c:	eddf 7a0c 	vldr	s15, [pc, #48]	; 24019650 <LEAF_init+0x4c>
    leaf->clearOnAllocation = 0;
24019620:	2200      	movs	r2, #0
    leaf->errorCallback = &LEAF_defaultErrorCallback;
24019622:	4b0c      	ldr	r3, [pc, #48]	; (24019654 <LEAF_init+0x50>)
    leaf->sampleRate = sr;
24019624:	ed84 8a00 	vstr	s16, [r4]
    leaf->invSampleRate = 1.0f/sr;
24019628:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf->random = random;
2401962c:	6125      	str	r5, [r4, #16]
    leaf->clearOnAllocation = 0;
2401962e:	6162      	str	r2, [r4, #20]
        leaf->errorState[i] = 0;
24019630:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
24019634:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
    leaf->freeCount = 0;
24019638:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
2401963c:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf->invSampleRate = 1.0f/sr;
24019640:	ed84 7a01 	vstr	s14, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
24019644:	edc4 7a03 	vstr	s15, [r4, #12]
}
24019648:	ecbd 8b02 	vpop	{d8}
2401964c:	bd38      	pop	{r3, r4, r5, pc}
2401964e:	bf00      	nop
24019650:	40c90fdb 	.word	0x40c90fdb
24019654:	24019601 	.word	0x24019601

24019658 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
24019658:	b410      	push	{r4}
    leaf->errorState[whichone] = 1;
2401965a:	eb00 0281 	add.w	r2, r0, r1, lsl #2
2401965e:	2401      	movs	r4, #1
24019660:	63d4      	str	r4, [r2, #60]	; 0x3c
    leaf->errorCallback(leaf, whichone);
}
24019662:	f85d 4b04 	ldr.w	r4, [sp], #4
    leaf->errorCallback(leaf, whichone);
24019666:	6b83      	ldr	r3, [r0, #56]	; 0x38
24019668:	4718      	bx	r3
2401966a:	bf00      	nop

2401966c <__itoa>:
2401966c:	1e93      	subs	r3, r2, #2
2401966e:	2b22      	cmp	r3, #34	; 0x22
24019670:	b510      	push	{r4, lr}
24019672:	460c      	mov	r4, r1
24019674:	d904      	bls.n	24019680 <__itoa+0x14>
24019676:	2300      	movs	r3, #0
24019678:	700b      	strb	r3, [r1, #0]
2401967a:	461c      	mov	r4, r3
2401967c:	4620      	mov	r0, r4
2401967e:	bd10      	pop	{r4, pc}
24019680:	2a0a      	cmp	r2, #10
24019682:	d109      	bne.n	24019698 <__itoa+0x2c>
24019684:	2800      	cmp	r0, #0
24019686:	da07      	bge.n	24019698 <__itoa+0x2c>
24019688:	232d      	movs	r3, #45	; 0x2d
2401968a:	700b      	strb	r3, [r1, #0]
2401968c:	4240      	negs	r0, r0
2401968e:	2101      	movs	r1, #1
24019690:	4421      	add	r1, r4
24019692:	f000 f805 	bl	240196a0 <__utoa>
24019696:	e7f1      	b.n	2401967c <__itoa+0x10>
24019698:	2100      	movs	r1, #0
2401969a:	e7f9      	b.n	24019690 <__itoa+0x24>

2401969c <itoa>:
2401969c:	f7ff bfe6 	b.w	2401966c <__itoa>

240196a0 <__utoa>:
240196a0:	b5f0      	push	{r4, r5, r6, r7, lr}
240196a2:	4c1f      	ldr	r4, [pc, #124]	; (24019720 <__utoa+0x80>)
240196a4:	b08b      	sub	sp, #44	; 0x2c
240196a6:	4605      	mov	r5, r0
240196a8:	460b      	mov	r3, r1
240196aa:	466e      	mov	r6, sp
240196ac:	f104 0c20 	add.w	ip, r4, #32
240196b0:	6820      	ldr	r0, [r4, #0]
240196b2:	6861      	ldr	r1, [r4, #4]
240196b4:	4637      	mov	r7, r6
240196b6:	c703      	stmia	r7!, {r0, r1}
240196b8:	3408      	adds	r4, #8
240196ba:	4564      	cmp	r4, ip
240196bc:	463e      	mov	r6, r7
240196be:	d1f7      	bne.n	240196b0 <__utoa+0x10>
240196c0:	7921      	ldrb	r1, [r4, #4]
240196c2:	7139      	strb	r1, [r7, #4]
240196c4:	1e91      	subs	r1, r2, #2
240196c6:	6820      	ldr	r0, [r4, #0]
240196c8:	6038      	str	r0, [r7, #0]
240196ca:	2922      	cmp	r1, #34	; 0x22
240196cc:	f04f 0100 	mov.w	r1, #0
240196d0:	d904      	bls.n	240196dc <__utoa+0x3c>
240196d2:	7019      	strb	r1, [r3, #0]
240196d4:	460b      	mov	r3, r1
240196d6:	4618      	mov	r0, r3
240196d8:	b00b      	add	sp, #44	; 0x2c
240196da:	bdf0      	pop	{r4, r5, r6, r7, pc}
240196dc:	1e58      	subs	r0, r3, #1
240196de:	4684      	mov	ip, r0
240196e0:	fbb5 f7f2 	udiv	r7, r5, r2
240196e4:	fb02 5617 	mls	r6, r2, r7, r5
240196e8:	3628      	adds	r6, #40	; 0x28
240196ea:	446e      	add	r6, sp
240196ec:	460c      	mov	r4, r1
240196ee:	f816 6c28 	ldrb.w	r6, [r6, #-40]
240196f2:	f80c 6f01 	strb.w	r6, [ip, #1]!
240196f6:	462e      	mov	r6, r5
240196f8:	42b2      	cmp	r2, r6
240196fa:	f101 0101 	add.w	r1, r1, #1
240196fe:	463d      	mov	r5, r7
24019700:	d9ee      	bls.n	240196e0 <__utoa+0x40>
24019702:	2200      	movs	r2, #0
24019704:	545a      	strb	r2, [r3, r1]
24019706:	1919      	adds	r1, r3, r4
24019708:	1aa5      	subs	r5, r4, r2
2401970a:	42aa      	cmp	r2, r5
2401970c:	dae3      	bge.n	240196d6 <__utoa+0x36>
2401970e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
24019712:	780e      	ldrb	r6, [r1, #0]
24019714:	7006      	strb	r6, [r0, #0]
24019716:	3201      	adds	r2, #1
24019718:	f801 5901 	strb.w	r5, [r1], #-1
2401971c:	e7f4      	b.n	24019708 <__utoa+0x68>
2401971e:	bf00      	nop
24019720:	24026b94 	.word	0x24026b94

24019724 <memset>:
24019724:	4402      	add	r2, r0
24019726:	4603      	mov	r3, r0
24019728:	4293      	cmp	r3, r2
2401972a:	d100      	bne.n	2401972e <memset+0xa>
2401972c:	4770      	bx	lr
2401972e:	f803 1b01 	strb.w	r1, [r3], #1
24019732:	e7f9      	b.n	24019728 <memset+0x4>

24019734 <__errno>:
24019734:	4b01      	ldr	r3, [pc, #4]	; (2401973c <__errno+0x8>)
24019736:	6818      	ldr	r0, [r3, #0]
24019738:	4770      	bx	lr
2401973a:	bf00      	nop
2401973c:	20000918 	.word	0x20000918

24019740 <__libc_init_array>:
24019740:	b570      	push	{r4, r5, r6, lr}
24019742:	4d0d      	ldr	r5, [pc, #52]	; (24019778 <__libc_init_array+0x38>)
24019744:	4c0d      	ldr	r4, [pc, #52]	; (2401977c <__libc_init_array+0x3c>)
24019746:	1b64      	subs	r4, r4, r5
24019748:	10a4      	asrs	r4, r4, #2
2401974a:	2600      	movs	r6, #0
2401974c:	42a6      	cmp	r6, r4
2401974e:	d109      	bne.n	24019764 <__libc_init_array+0x24>
24019750:	4d0b      	ldr	r5, [pc, #44]	; (24019780 <__libc_init_array+0x40>)
24019752:	4c0c      	ldr	r4, [pc, #48]	; (24019784 <__libc_init_array+0x44>)
24019754:	f00e fc38 	bl	24027fc8 <_init>
24019758:	1b64      	subs	r4, r4, r5
2401975a:	10a4      	asrs	r4, r4, #2
2401975c:	2600      	movs	r6, #0
2401975e:	42a6      	cmp	r6, r4
24019760:	d105      	bne.n	2401976e <__libc_init_array+0x2e>
24019762:	bd70      	pop	{r4, r5, r6, pc}
24019764:	f855 3b04 	ldr.w	r3, [r5], #4
24019768:	4798      	blx	r3
2401976a:	3601      	adds	r6, #1
2401976c:	e7ee      	b.n	2401974c <__libc_init_array+0xc>
2401976e:	f855 3b04 	ldr.w	r3, [r5], #4
24019772:	4798      	blx	r3
24019774:	3601      	adds	r6, #1
24019776:	e7f2      	b.n	2401975e <__libc_init_array+0x1e>
24019778:	24028040 	.word	0x24028040
2401977c:	24028040 	.word	0x24028040
24019780:	24028040 	.word	0x24028040
24019784:	24028044 	.word	0x24028044

24019788 <memcpy>:
24019788:	440a      	add	r2, r1
2401978a:	4291      	cmp	r1, r2
2401978c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
24019790:	d100      	bne.n	24019794 <memcpy+0xc>
24019792:	4770      	bx	lr
24019794:	b510      	push	{r4, lr}
24019796:	f811 4b01 	ldrb.w	r4, [r1], #1
2401979a:	f803 4f01 	strb.w	r4, [r3, #1]!
2401979e:	4291      	cmp	r1, r2
240197a0:	d1f9      	bne.n	24019796 <memcpy+0xe>
240197a2:	bd10      	pop	{r4, pc}

240197a4 <frexpf>:
240197a4:	ee10 3a10 	vmov	r3, s0
240197a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
240197ac:	2100      	movs	r1, #0
240197ae:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
240197b2:	6001      	str	r1, [r0, #0]
240197b4:	da19      	bge.n	240197ea <frexpf+0x46>
240197b6:	b1c2      	cbz	r2, 240197ea <frexpf+0x46>
240197b8:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
240197bc:	d10a      	bne.n	240197d4 <frexpf+0x30>
240197be:	eddf 7a0b 	vldr	s15, [pc, #44]	; 240197ec <frexpf+0x48>
240197c2:	ee60 7a27 	vmul.f32	s15, s0, s15
240197c6:	f06f 0118 	mvn.w	r1, #24
240197ca:	ee17 3a90 	vmov	r3, s15
240197ce:	6001      	str	r1, [r0, #0]
240197d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
240197d4:	6801      	ldr	r1, [r0, #0]
240197d6:	15d2      	asrs	r2, r2, #23
240197d8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
240197dc:	3a7e      	subs	r2, #126	; 0x7e
240197de:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
240197e2:	4411      	add	r1, r2
240197e4:	ee00 3a10 	vmov	s0, r3
240197e8:	6001      	str	r1, [r0, #0]
240197ea:	4770      	bx	lr
240197ec:	4c000000 	.word	0x4c000000

240197f0 <expf>:
240197f0:	ee10 2a10 	vmov	r2, s0
240197f4:	f240 412a 	movw	r1, #1066	; 0x42a
240197f8:	f3c2 530a 	ubfx	r3, r2, #20, #11
240197fc:	428b      	cmp	r3, r1
240197fe:	b430      	push	{r4, r5}
24019800:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
24019804:	d92a      	bls.n	2401985c <expf+0x6c>
24019806:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
2401980a:	d058      	beq.n	240198be <expf+0xce>
2401980c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
24019810:	d303      	bcc.n	2401981a <expf+0x2a>
24019812:	ee30 0a00 	vadd.f32	s0, s0, s0
24019816:	bc30      	pop	{r4, r5}
24019818:	4770      	bx	lr
2401981a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 240198c4 <expf+0xd4>
2401981e:	eeb4 0ae7 	vcmpe.f32	s0, s15
24019822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019826:	dd03      	ble.n	24019830 <expf+0x40>
24019828:	bc30      	pop	{r4, r5}
2401982a:	2000      	movs	r0, #0
2401982c:	f000 bca6 	b.w	2401a17c <__math_oflowf>
24019830:	eddf 7a25 	vldr	s15, [pc, #148]	; 240198c8 <expf+0xd8>
24019834:	eeb4 0ae7 	vcmpe.f32	s0, s15
24019838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401983c:	d503      	bpl.n	24019846 <expf+0x56>
2401983e:	bc30      	pop	{r4, r5}
24019840:	2000      	movs	r0, #0
24019842:	f000 bc8f 	b.w	2401a164 <__math_uflowf>
24019846:	eddf 7a21 	vldr	s15, [pc, #132]	; 240198cc <expf+0xdc>
2401984a:	eeb4 0ae7 	vcmpe.f32	s0, s15
2401984e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019852:	d503      	bpl.n	2401985c <expf+0x6c>
24019854:	bc30      	pop	{r4, r5}
24019856:	2000      	movs	r0, #0
24019858:	f000 bc8a 	b.w	2401a170 <__math_may_uflowf>
2401985c:	4b1c      	ldr	r3, [pc, #112]	; (240198d0 <expf+0xe0>)
2401985e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
24019862:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
24019866:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
2401986a:	eeb0 7b44 	vmov.f64	d7, d4
2401986e:	eea5 7b06 	vfma.f64	d7, d5, d6
24019872:	ee17 0a10 	vmov	r0, s14
24019876:	ee37 7b44 	vsub.f64	d7, d7, d4
2401987a:	f000 021f 	and.w	r2, r0, #31
2401987e:	ee95 7b06 	vfnms.f64	d7, d5, d6
24019882:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
24019886:	ee27 4b07 	vmul.f64	d4, d7, d7
2401988a:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
2401988e:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
24019892:	eea5 6b07 	vfma.f64	d6, d5, d7
24019896:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
2401989a:	684d      	ldr	r5, [r1, #4]
2401989c:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
240198a0:	2100      	movs	r1, #0
240198a2:	190a      	adds	r2, r1, r4
240198a4:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
240198a8:	eea5 0b07 	vfma.f64	d0, d5, d7
240198ac:	ec43 2b17 	vmov	d7, r2, r3
240198b0:	eea6 0b04 	vfma.f64	d0, d6, d4
240198b4:	ee20 0b07 	vmul.f64	d0, d0, d7
240198b8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
240198bc:	e7ab      	b.n	24019816 <expf+0x26>
240198be:	ed9f 0a05 	vldr	s0, [pc, #20]	; 240198d4 <expf+0xe4>
240198c2:	e7a8      	b.n	24019816 <expf+0x26>
240198c4:	42b17217 	.word	0x42b17217
240198c8:	c2cff1b4 	.word	0xc2cff1b4
240198cc:	c2ce8ecf 	.word	0xc2ce8ecf
240198d0:	24026bc0 	.word	0x24026bc0
240198d4:	00000000 	.word	0x00000000

240198d8 <logf>:
240198d8:	ee10 3a10 	vmov	r3, s0
240198dc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
240198e0:	b410      	push	{r4}
240198e2:	d055      	beq.n	24019990 <logf+0xb8>
240198e4:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
240198e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
240198ec:	d31a      	bcc.n	24019924 <logf+0x4c>
240198ee:	005a      	lsls	r2, r3, #1
240198f0:	d104      	bne.n	240198fc <logf+0x24>
240198f2:	f85d 4b04 	ldr.w	r4, [sp], #4
240198f6:	2001      	movs	r0, #1
240198f8:	f000 bc46 	b.w	2401a188 <__math_divzerof>
240198fc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
24019900:	d043      	beq.n	2401998a <logf+0xb2>
24019902:	2b00      	cmp	r3, #0
24019904:	db02      	blt.n	2401990c <logf+0x34>
24019906:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
2401990a:	d303      	bcc.n	24019914 <logf+0x3c>
2401990c:	f85d 4b04 	ldr.w	r4, [sp], #4
24019910:	f000 bc4c 	b.w	2401a1ac <__math_invalidf>
24019914:	eddf 7a20 	vldr	s15, [pc, #128]	; 24019998 <logf+0xc0>
24019918:	ee20 0a27 	vmul.f32	s0, s0, s15
2401991c:	ee10 3a10 	vmov	r3, s0
24019920:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
24019924:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
24019928:	491c      	ldr	r1, [pc, #112]	; (2401999c <logf+0xc4>)
2401992a:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
2401992e:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
24019932:	f3c2 40c3 	ubfx	r0, r2, #19, #4
24019936:	0dd4      	lsrs	r4, r2, #23
24019938:	eb01 1000 	add.w	r0, r1, r0, lsl #4
2401993c:	05e4      	lsls	r4, r4, #23
2401993e:	ed90 6b00 	vldr	d6, [r0]
24019942:	1b1b      	subs	r3, r3, r4
24019944:	ee07 3a90 	vmov	s15, r3
24019948:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
2401994c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
24019950:	15d2      	asrs	r2, r2, #23
24019952:	eea6 0b07 	vfma.f64	d0, d6, d7
24019956:	ed90 6b02 	vldr	d6, [r0, #8]
2401995a:	ee20 4b00 	vmul.f64	d4, d0, d0
2401995e:	ee07 2a90 	vmov	s15, r2
24019962:	eeb8 7be7 	vcvt.f64.s32	d7, s15
24019966:	eea7 6b05 	vfma.f64	d6, d7, d5
2401996a:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
2401996e:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
24019972:	eea5 7b00 	vfma.f64	d7, d5, d0
24019976:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
2401997a:	ee30 0b06 	vadd.f64	d0, d0, d6
2401997e:	eea5 7b04 	vfma.f64	d7, d5, d4
24019982:	eea4 0b07 	vfma.f64	d0, d4, d7
24019986:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
2401998a:	f85d 4b04 	ldr.w	r4, [sp], #4
2401998e:	4770      	bx	lr
24019990:	ed9f 0a03 	vldr	s0, [pc, #12]	; 240199a0 <logf+0xc8>
24019994:	e7f9      	b.n	2401998a <logf+0xb2>
24019996:	bf00      	nop
24019998:	4b000000 	.word	0x4b000000
2401999c:	24026d08 	.word	0x24026d08
240199a0:	00000000 	.word	0x00000000

240199a4 <log2f>:
240199a4:	ee10 2a10 	vmov	r2, s0
240199a8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
240199ac:	b410      	push	{r4}
240199ae:	d055      	beq.n	24019a5c <log2f+0xb8>
240199b0:	f5a2 0300 	sub.w	r3, r2, #8388608	; 0x800000
240199b4:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
240199b8:	d31a      	bcc.n	240199f0 <log2f+0x4c>
240199ba:	0053      	lsls	r3, r2, #1
240199bc:	d104      	bne.n	240199c8 <log2f+0x24>
240199be:	f85d 4b04 	ldr.w	r4, [sp], #4
240199c2:	2001      	movs	r0, #1
240199c4:	f000 bbe0 	b.w	2401a188 <__math_divzerof>
240199c8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
240199cc:	d043      	beq.n	24019a56 <log2f+0xb2>
240199ce:	2a00      	cmp	r2, #0
240199d0:	db02      	blt.n	240199d8 <log2f+0x34>
240199d2:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
240199d6:	d303      	bcc.n	240199e0 <log2f+0x3c>
240199d8:	f85d 4b04 	ldr.w	r4, [sp], #4
240199dc:	f000 bbe6 	b.w	2401a1ac <__math_invalidf>
240199e0:	eddf 7a20 	vldr	s15, [pc, #128]	; 24019a64 <log2f+0xc0>
240199e4:	ee20 0a27 	vmul.f32	s0, s0, s15
240199e8:	ee10 3a10 	vmov	r3, s0
240199ec:	f1a3 6238 	sub.w	r2, r3, #192937984	; 0xb800000
240199f0:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
240199f4:	491c      	ldr	r1, [pc, #112]	; (24019a68 <log2f+0xc4>)
240199f6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
240199fa:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
240199fe:	f3c3 40c3 	ubfx	r0, r3, #19, #4
24019a02:	0ddc      	lsrs	r4, r3, #23
24019a04:	eb01 1000 	add.w	r0, r1, r0, lsl #4
24019a08:	05e4      	lsls	r4, r4, #23
24019a0a:	ed90 5b00 	vldr	d5, [r0]
24019a0e:	1b12      	subs	r2, r2, r4
24019a10:	ee07 2a90 	vmov	s15, r2
24019a14:	15db      	asrs	r3, r3, #23
24019a16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
24019a1a:	eea5 6b07 	vfma.f64	d6, d5, d7
24019a1e:	ed90 7b02 	vldr	d7, [r0, #8]
24019a22:	ee26 4b06 	vmul.f64	d4, d6, d6
24019a26:	ee00 3a10 	vmov	s0, r3
24019a2a:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
24019a2e:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
24019a32:	ee30 0b07 	vadd.f64	d0, d0, d7
24019a36:	ed91 7b44 	vldr	d7, [r1, #272]	; 0x110
24019a3a:	eea5 7b06 	vfma.f64	d7, d5, d6
24019a3e:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
24019a42:	eea5 7b04 	vfma.f64	d7, d5, d4
24019a46:	ed91 5b46 	vldr	d5, [r1, #280]	; 0x118
24019a4a:	eea5 0b06 	vfma.f64	d0, d5, d6
24019a4e:	eea4 0b07 	vfma.f64	d0, d4, d7
24019a52:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24019a56:	f85d 4b04 	ldr.w	r4, [sp], #4
24019a5a:	4770      	bx	lr
24019a5c:	ed9f 0a03 	vldr	s0, [pc, #12]	; 24019a6c <log2f+0xc8>
24019a60:	e7f9      	b.n	24019a56 <log2f+0xb2>
24019a62:	bf00      	nop
24019a64:	4b000000 	.word	0x4b000000
24019a68:	24027698 	.word	0x24027698
24019a6c:	00000000 	.word	0x00000000

24019a70 <exp>:
24019a70:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
24019a72:	ee10 3a90 	vmov	r3, s1
24019a76:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
24019a7a:	f3c3 540a 	ubfx	r4, r3, #20, #11
24019a7e:	18a2      	adds	r2, r4, r2
24019a80:	2a3e      	cmp	r2, #62	; 0x3e
24019a82:	ee10 1a10 	vmov	r1, s0
24019a86:	d922      	bls.n	24019ace <exp+0x5e>
24019a88:	2a00      	cmp	r2, #0
24019a8a:	da06      	bge.n	24019a9a <exp+0x2a>
24019a8c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
24019a90:	ee30 0b07 	vadd.f64	d0, d0, d7
24019a94:	b004      	add	sp, #16
24019a96:	bcf0      	pop	{r4, r5, r6, r7}
24019a98:	4770      	bx	lr
24019a9a:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
24019a9e:	f04f 0000 	mov.w	r0, #0
24019aa2:	d913      	bls.n	24019acc <exp+0x5c>
24019aa4:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
24019aa8:	bf08      	it	eq
24019aaa:	4281      	cmpeq	r1, r0
24019aac:	f000 80a0 	beq.w	24019bf0 <exp+0x180>
24019ab0:	f240 72ff 	movw	r2, #2047	; 0x7ff
24019ab4:	4294      	cmp	r4, r2
24019ab6:	d0e9      	beq.n	24019a8c <exp+0x1c>
24019ab8:	4283      	cmp	r3, r0
24019aba:	da03      	bge.n	24019ac4 <exp+0x54>
24019abc:	b004      	add	sp, #16
24019abe:	bcf0      	pop	{r4, r5, r6, r7}
24019ac0:	f000 b8c6 	b.w	24019c50 <__math_uflow>
24019ac4:	b004      	add	sp, #16
24019ac6:	bcf0      	pop	{r4, r5, r6, r7}
24019ac8:	f000 b8ca 	b.w	24019c60 <__math_oflow>
24019acc:	4604      	mov	r4, r0
24019ace:	4950      	ldr	r1, [pc, #320]	; (24019c10 <exp+0x1a0>)
24019ad0:	ed91 6b02 	vldr	d6, [r1, #8]
24019ad4:	ed91 5b00 	vldr	d5, [r1]
24019ad8:	eeb0 7b46 	vmov.f64	d7, d6
24019adc:	eea5 7b00 	vfma.f64	d7, d5, d0
24019ae0:	ee17 5a10 	vmov	r5, s14
24019ae4:	ee37 7b46 	vsub.f64	d7, d7, d6
24019ae8:	ed91 6b04 	vldr	d6, [r1, #16]
24019aec:	f005 037f 	and.w	r3, r5, #127	; 0x7f
24019af0:	eea6 0b07 	vfma.f64	d0, d6, d7
24019af4:	ed91 6b06 	vldr	d6, [r1, #24]
24019af8:	18d8      	adds	r0, r3, r3
24019afa:	f100 030f 	add.w	r3, r0, #15
24019afe:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
24019b02:	eea6 0b07 	vfma.f64	d0, d6, d7
24019b06:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
24019b0a:	ee20 7b00 	vmul.f64	d7, d0, d0
24019b0e:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
24019b12:	ed91 4b08 	vldr	d4, [r1, #32]
24019b16:	ee30 6b06 	vadd.f64	d6, d0, d6
24019b1a:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
24019b1e:	eea3 4b00 	vfma.f64	d4, d3, d0
24019b22:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
24019b26:	eea4 6b07 	vfma.f64	d6, d4, d7
24019b2a:	ee27 7b07 	vmul.f64	d7, d7, d7
24019b2e:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
24019b32:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
24019b36:	f8d2 c004 	ldr.w	ip, [r2, #4]
24019b3a:	eea3 4b00 	vfma.f64	d4, d3, d0
24019b3e:	2600      	movs	r6, #0
24019b40:	19f2      	adds	r2, r6, r7
24019b42:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
24019b46:	eea7 6b04 	vfma.f64	d6, d7, d4
24019b4a:	2c00      	cmp	r4, #0
24019b4c:	d14b      	bne.n	24019be6 <exp+0x176>
24019b4e:	42b5      	cmp	r5, r6
24019b50:	db10      	blt.n	24019b74 <exp+0x104>
24019b52:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
24019b56:	ed9f 7b28 	vldr	d7, [pc, #160]	; 24019bf8 <exp+0x188>
24019b5a:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
24019b5e:	4610      	mov	r0, r2
24019b60:	ec41 0b10 	vmov	d0, r0, r1
24019b64:	eea6 0b00 	vfma.f64	d0, d6, d0
24019b68:	ee20 0b07 	vmul.f64	d0, d0, d7
24019b6c:	b004      	add	sp, #16
24019b6e:	bcf0      	pop	{r4, r5, r6, r7}
24019b70:	f000 b88a 	b.w	24019c88 <__math_check_oflow>
24019b74:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
24019b78:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
24019b7c:	4610      	mov	r0, r2
24019b7e:	ec41 0b17 	vmov	d7, r0, r1
24019b82:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
24019b86:	ee26 6b07 	vmul.f64	d6, d6, d7
24019b8a:	ee37 5b06 	vadd.f64	d5, d7, d6
24019b8e:	eeb4 5bc4 	vcmpe.f64	d5, d4
24019b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019b96:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 24019c00 <exp+0x190>
24019b9a:	d51e      	bpl.n	24019bda <exp+0x16a>
24019b9c:	ee35 3b04 	vadd.f64	d3, d5, d4
24019ba0:	ee37 7b45 	vsub.f64	d7, d7, d5
24019ba4:	ee37 7b06 	vadd.f64	d7, d7, d6
24019ba8:	ee34 6b43 	vsub.f64	d6, d4, d3
24019bac:	ee36 6b05 	vadd.f64	d6, d6, d5
24019bb0:	ee36 6b07 	vadd.f64	d6, d6, d7
24019bb4:	ee36 6b03 	vadd.f64	d6, d6, d3
24019bb8:	ee36 5b44 	vsub.f64	d5, d6, d4
24019bbc:	eeb5 5b40 	vcmp.f64	d5, #0.0
24019bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019bc4:	d101      	bne.n	24019bca <exp+0x15a>
24019bc6:	ed9f 5b10 	vldr	d5, [pc, #64]	; 24019c08 <exp+0x198>
24019bca:	ed8d 0b00 	vstr	d0, [sp]
24019bce:	ed9d 7b00 	vldr	d7, [sp]
24019bd2:	ee27 7b00 	vmul.f64	d7, d7, d0
24019bd6:	ed8d 7b02 	vstr	d7, [sp, #8]
24019bda:	ee25 0b00 	vmul.f64	d0, d5, d0
24019bde:	b004      	add	sp, #16
24019be0:	bcf0      	pop	{r4, r5, r6, r7}
24019be2:	f000 b845 	b.w	24019c70 <__math_check_uflow>
24019be6:	ec43 2b10 	vmov	d0, r2, r3
24019bea:	eea6 0b00 	vfma.f64	d0, d6, d0
24019bee:	e751      	b.n	24019a94 <exp+0x24>
24019bf0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 24019c08 <exp+0x198>
24019bf4:	e74e      	b.n	24019a94 <exp+0x24>
24019bf6:	bf00      	nop
24019bf8:	00000000 	.word	0x00000000
24019bfc:	7f000000 	.word	0x7f000000
24019c00:	00000000 	.word	0x00000000
24019c04:	00100000 	.word	0x00100000
	...
24019c10:	24026e28 	.word	0x24026e28

24019c14 <with_errno>:
24019c14:	b513      	push	{r0, r1, r4, lr}
24019c16:	4604      	mov	r4, r0
24019c18:	ed8d 0b00 	vstr	d0, [sp]
24019c1c:	f7ff fd8a 	bl	24019734 <__errno>
24019c20:	ed9d 0b00 	vldr	d0, [sp]
24019c24:	6004      	str	r4, [r0, #0]
24019c26:	b002      	add	sp, #8
24019c28:	bd10      	pop	{r4, pc}

24019c2a <xflow>:
24019c2a:	b082      	sub	sp, #8
24019c2c:	b158      	cbz	r0, 24019c46 <xflow+0x1c>
24019c2e:	eeb1 7b40 	vneg.f64	d7, d0
24019c32:	ed8d 7b00 	vstr	d7, [sp]
24019c36:	ed9d 7b00 	vldr	d7, [sp]
24019c3a:	2022      	movs	r0, #34	; 0x22
24019c3c:	ee20 0b07 	vmul.f64	d0, d0, d7
24019c40:	b002      	add	sp, #8
24019c42:	f7ff bfe7 	b.w	24019c14 <with_errno>
24019c46:	eeb0 7b40 	vmov.f64	d7, d0
24019c4a:	e7f2      	b.n	24019c32 <xflow+0x8>
24019c4c:	0000      	movs	r0, r0
	...

24019c50 <__math_uflow>:
24019c50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 24019c58 <__math_uflow+0x8>
24019c54:	f7ff bfe9 	b.w	24019c2a <xflow>
24019c58:	00000000 	.word	0x00000000
24019c5c:	10000000 	.word	0x10000000

24019c60 <__math_oflow>:
24019c60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 24019c68 <__math_oflow+0x8>
24019c64:	f7ff bfe1 	b.w	24019c2a <xflow>
24019c68:	00000000 	.word	0x00000000
24019c6c:	70000000 	.word	0x70000000

24019c70 <__math_check_uflow>:
24019c70:	eeb5 0b40 	vcmp.f64	d0, #0.0
24019c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019c78:	d102      	bne.n	24019c80 <__math_check_uflow+0x10>
24019c7a:	2022      	movs	r0, #34	; 0x22
24019c7c:	f7ff bfca 	b.w	24019c14 <with_errno>
24019c80:	4770      	bx	lr
24019c82:	0000      	movs	r0, r0
24019c84:	0000      	movs	r0, r0
	...

24019c88 <__math_check_oflow>:
24019c88:	ed9f 6b07 	vldr	d6, [pc, #28]	; 24019ca8 <__math_check_oflow+0x20>
24019c8c:	eeb0 7bc0 	vabs.f64	d7, d0
24019c90:	eeb4 7b46 	vcmp.f64	d7, d6
24019c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019c98:	dd02      	ble.n	24019ca0 <__math_check_oflow+0x18>
24019c9a:	2022      	movs	r0, #34	; 0x22
24019c9c:	f7ff bfba 	b.w	24019c14 <with_errno>
24019ca0:	4770      	bx	lr
24019ca2:	bf00      	nop
24019ca4:	f3af 8000 	nop.w
24019ca8:	ffffffff 	.word	0xffffffff
24019cac:	7fefffff 	.word	0x7fefffff

24019cb0 <checkint>:
24019cb0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
24019cb4:	2b7e      	cmp	r3, #126	; 0x7e
24019cb6:	dd10      	ble.n	24019cda <checkint+0x2a>
24019cb8:	2b96      	cmp	r3, #150	; 0x96
24019cba:	dc0c      	bgt.n	24019cd6 <checkint+0x26>
24019cbc:	2201      	movs	r2, #1
24019cbe:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
24019cc2:	fa02 f303 	lsl.w	r3, r2, r3
24019cc6:	1e5a      	subs	r2, r3, #1
24019cc8:	4202      	tst	r2, r0
24019cca:	d106      	bne.n	24019cda <checkint+0x2a>
24019ccc:	4203      	tst	r3, r0
24019cce:	bf0c      	ite	eq
24019cd0:	2002      	moveq	r0, #2
24019cd2:	2001      	movne	r0, #1
24019cd4:	4770      	bx	lr
24019cd6:	2002      	movs	r0, #2
24019cd8:	4770      	bx	lr
24019cda:	2000      	movs	r0, #0
24019cdc:	4770      	bx	lr
	...

24019ce0 <powf>:
24019ce0:	b537      	push	{r0, r1, r2, r4, r5, lr}
24019ce2:	ee10 1a10 	vmov	r1, s0
24019ce6:	ee10 4a90 	vmov	r4, s1
24019cea:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
24019cee:	0062      	lsls	r2, r4, #1
24019cf0:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
24019cf4:	eef0 7a40 	vmov.f32	s15, s0
24019cf8:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
24019cfc:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
24019d00:	d252      	bcs.n	24019da8 <powf+0xc8>
24019d02:	4298      	cmp	r0, r3
24019d04:	d252      	bcs.n	24019dac <powf+0xcc>
24019d06:	2000      	movs	r0, #0
24019d08:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
24019d0c:	4a9e      	ldr	r2, [pc, #632]	; (24019f88 <powf+0x2a8>)
24019d0e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
24019d12:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
24019d16:	f3c3 44c3 	ubfx	r4, r3, #19, #4
24019d1a:	0ddb      	lsrs	r3, r3, #23
24019d1c:	eb02 1404 	add.w	r4, r2, r4, lsl #4
24019d20:	05db      	lsls	r3, r3, #23
24019d22:	ed94 5b00 	vldr	d5, [r4]
24019d26:	1ac9      	subs	r1, r1, r3
24019d28:	ee07 1a90 	vmov	s15, r1
24019d2c:	15db      	asrs	r3, r3, #23
24019d2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
24019d32:	eea5 6b07 	vfma.f64	d6, d5, d7
24019d36:	ed94 5b02 	vldr	d5, [r4, #8]
24019d3a:	ee26 2b06 	vmul.f64	d2, d6, d6
24019d3e:	ee22 1b02 	vmul.f64	d1, d2, d2
24019d42:	ee07 3a90 	vmov	s15, r3
24019d46:	ed92 3b42 	vldr	d3, [r2, #264]	; 0x108
24019d4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
24019d4e:	ee37 7b05 	vadd.f64	d7, d7, d5
24019d52:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
24019d56:	ed92 4b44 	vldr	d4, [r2, #272]	; 0x110
24019d5a:	eea6 3b05 	vfma.f64	d3, d6, d5
24019d5e:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
24019d62:	eea6 5b04 	vfma.f64	d5, d6, d4
24019d66:	ed92 4b48 	vldr	d4, [r2, #288]	; 0x120
24019d6a:	eea6 7b04 	vfma.f64	d7, d6, d4
24019d6e:	eeb7 6ae0 	vcvt.f64.f32	d6, s1
24019d72:	eea2 7b05 	vfma.f64	d7, d2, d5
24019d76:	eea3 7b01 	vfma.f64	d7, d3, d1
24019d7a:	ee26 6b07 	vmul.f64	d6, d6, d7
24019d7e:	ee16 3a90 	vmov	r3, s13
24019d82:	f3c3 32cf 	ubfx	r2, r3, #15, #16
24019d86:	f248 03bf 	movw	r3, #32959	; 0x80bf
24019d8a:	429a      	cmp	r2, r3
24019d8c:	f0c0 80b0 	bcc.w	24019ef0 <powf+0x210>
24019d90:	ed9f 7b75 	vldr	d7, [pc, #468]	; 24019f68 <powf+0x288>
24019d94:	eeb4 6bc7 	vcmpe.f64	d6, d7
24019d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019d9c:	dd78      	ble.n	24019e90 <powf+0x1b0>
24019d9e:	b003      	add	sp, #12
24019da0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
24019da4:	f000 b9ea 	b.w	2401a17c <__math_oflowf>
24019da8:	4298      	cmp	r0, r3
24019daa:	d32d      	bcc.n	24019e08 <powf+0x128>
24019dac:	b952      	cbnz	r2, 24019dc4 <powf+0xe4>
24019dae:	f481 0180 	eor.w	r1, r1, #4194304	; 0x400000
24019db2:	0049      	lsls	r1, r1, #1
24019db4:	f511 0f00 	cmn.w	r1, #8388608	; 0x800000
24019db8:	f240 80c8 	bls.w	24019f4c <powf+0x26c>
24019dbc:	ee37 0aa0 	vadd.f32	s0, s15, s1
24019dc0:	b003      	add	sp, #12
24019dc2:	bd30      	pop	{r4, r5, pc}
24019dc4:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
24019dc8:	d105      	bne.n	24019dd6 <powf+0xf6>
24019dca:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
24019dce:	0064      	lsls	r4, r4, #1
24019dd0:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
24019dd4:	e7f0      	b.n	24019db8 <powf+0xd8>
24019dd6:	0049      	lsls	r1, r1, #1
24019dd8:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
24019ddc:	d8ee      	bhi.n	24019dbc <powf+0xdc>
24019dde:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
24019de2:	d1eb      	bne.n	24019dbc <powf+0xdc>
24019de4:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
24019de8:	f000 80b0 	beq.w	24019f4c <powf+0x26c>
24019dec:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
24019df0:	ea6f 0404 	mvn.w	r4, r4
24019df4:	bf34      	ite	cc
24019df6:	2100      	movcc	r1, #0
24019df8:	2101      	movcs	r1, #1
24019dfa:	0fe4      	lsrs	r4, r4, #31
24019dfc:	42a1      	cmp	r1, r4
24019dfe:	f040 80a8 	bne.w	24019f52 <powf+0x272>
24019e02:	ee20 0aa0 	vmul.f32	s0, s1, s1
24019e06:	e7db      	b.n	24019dc0 <powf+0xe0>
24019e08:	004d      	lsls	r5, r1, #1
24019e0a:	1e6a      	subs	r2, r5, #1
24019e0c:	429a      	cmp	r2, r3
24019e0e:	d31c      	bcc.n	24019e4a <powf+0x16a>
24019e10:	2900      	cmp	r1, #0
24019e12:	ee20 0a00 	vmul.f32	s0, s0, s0
24019e16:	da0f      	bge.n	24019e38 <powf+0x158>
24019e18:	ee10 0a90 	vmov	r0, s1
24019e1c:	f7ff ff48 	bl	24019cb0 <checkint>
24019e20:	2801      	cmp	r0, #1
24019e22:	d109      	bne.n	24019e38 <powf+0x158>
24019e24:	eeb1 0a40 	vneg.f32	s0, s0
24019e28:	b945      	cbnz	r5, 24019e3c <powf+0x15c>
24019e2a:	2c00      	cmp	r4, #0
24019e2c:	dac8      	bge.n	24019dc0 <powf+0xe0>
24019e2e:	b003      	add	sp, #12
24019e30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
24019e34:	f000 b9a8 	b.w	2401a188 <__math_divzerof>
24019e38:	2000      	movs	r0, #0
24019e3a:	e7f5      	b.n	24019e28 <powf+0x148>
24019e3c:	2c00      	cmp	r4, #0
24019e3e:	dabf      	bge.n	24019dc0 <powf+0xe0>
24019e40:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24019e44:	ee87 0a80 	vdiv.f32	s0, s15, s0
24019e48:	e7ba      	b.n	24019dc0 <powf+0xe0>
24019e4a:	2900      	cmp	r1, #0
24019e4c:	da1e      	bge.n	24019e8c <powf+0x1ac>
24019e4e:	ee10 0a90 	vmov	r0, s1
24019e52:	f7ff ff2d 	bl	24019cb0 <checkint>
24019e56:	b920      	cbnz	r0, 24019e62 <powf+0x182>
24019e58:	b003      	add	sp, #12
24019e5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
24019e5e:	f000 b9a5 	b.w	2401a1ac <__math_invalidf>
24019e62:	1e43      	subs	r3, r0, #1
24019e64:	4258      	negs	r0, r3
24019e66:	4158      	adcs	r0, r3
24019e68:	0400      	lsls	r0, r0, #16
24019e6a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
24019e6e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
24019e72:	f4bf af49 	bcs.w	24019d08 <powf+0x28>
24019e76:	ed9f 7a45 	vldr	s14, [pc, #276]	; 24019f8c <powf+0x2ac>
24019e7a:	ee27 0a87 	vmul.f32	s0, s15, s14
24019e7e:	ee10 3a10 	vmov	r3, s0
24019e82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24019e86:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
24019e8a:	e73d      	b.n	24019d08 <powf+0x28>
24019e8c:	2000      	movs	r0, #0
24019e8e:	e7ee      	b.n	24019e6e <powf+0x18e>
24019e90:	ed9f 7b37 	vldr	d7, [pc, #220]	; 24019f70 <powf+0x290>
24019e94:	eeb4 6bc7 	vcmpe.f64	d6, d7
24019e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019e9c:	dd10      	ble.n	24019ec0 <powf+0x1e0>
24019e9e:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
24019ea2:	2800      	cmp	r0, #0
24019ea4:	d158      	bne.n	24019f58 <powf+0x278>
24019ea6:	9300      	str	r3, [sp, #0]
24019ea8:	eddd 7a00 	vldr	s15, [sp]
24019eac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24019eb0:	ee77 7a87 	vadd.f32	s15, s15, s14
24019eb4:	eef4 7a47 	vcmp.f32	s15, s14
24019eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019ebc:	f47f af6f 	bne.w	24019d9e <powf+0xbe>
24019ec0:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 24019f78 <powf+0x298>
24019ec4:	eeb4 6bc7 	vcmpe.f64	d6, d7
24019ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019ecc:	d804      	bhi.n	24019ed8 <powf+0x1f8>
24019ece:	b003      	add	sp, #12
24019ed0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
24019ed4:	f000 b946 	b.w	2401a164 <__math_uflowf>
24019ed8:	ed9f 7b29 	vldr	d7, [pc, #164]	; 24019f80 <powf+0x2a0>
24019edc:	eeb4 6bc7 	vcmpe.f64	d6, d7
24019ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019ee4:	d504      	bpl.n	24019ef0 <powf+0x210>
24019ee6:	b003      	add	sp, #12
24019ee8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
24019eec:	f000 b940 	b.w	2401a170 <__math_may_uflowf>
24019ef0:	4b27      	ldr	r3, [pc, #156]	; (24019f90 <powf+0x2b0>)
24019ef2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
24019ef6:	ed93 5b40 	vldr	d5, [r3, #256]	; 0x100
24019efa:	ee36 7b05 	vadd.f64	d7, d6, d5
24019efe:	ee17 2a10 	vmov	r2, s14
24019f02:	ee37 7b45 	vsub.f64	d7, d7, d5
24019f06:	f002 011f 	and.w	r1, r2, #31
24019f0a:	ee36 7b47 	vsub.f64	d7, d6, d7
24019f0e:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
24019f12:	ee27 4b07 	vmul.f64	d4, d7, d7
24019f16:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
24019f1a:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
24019f1e:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
24019f22:	eea7 6b05 	vfma.f64	d6, d7, d5
24019f26:	686d      	ldr	r5, [r5, #4]
24019f28:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
24019f2c:	1882      	adds	r2, r0, r2
24019f2e:	2300      	movs	r3, #0
24019f30:	1918      	adds	r0, r3, r4
24019f32:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
24019f36:	eea7 0b05 	vfma.f64	d0, d7, d5
24019f3a:	ec41 0b17 	vmov	d7, r0, r1
24019f3e:	eea6 0b04 	vfma.f64	d0, d6, d4
24019f42:	ee20 0b07 	vmul.f64	d0, d0, d7
24019f46:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24019f4a:	e739      	b.n	24019dc0 <powf+0xe0>
24019f4c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24019f50:	e736      	b.n	24019dc0 <powf+0xe0>
24019f52:	ed9f 0a10 	vldr	s0, [pc, #64]	; 24019f94 <powf+0x2b4>
24019f56:	e733      	b.n	24019dc0 <powf+0xe0>
24019f58:	9301      	str	r3, [sp, #4]
24019f5a:	eddd 7a01 	vldr	s15, [sp, #4]
24019f5e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
24019f62:	ee77 7a67 	vsub.f32	s15, s14, s15
24019f66:	e7a5      	b.n	24019eb4 <powf+0x1d4>
24019f68:	ffd1d571 	.word	0xffd1d571
24019f6c:	405fffff 	.word	0x405fffff
24019f70:	ffa3aae2 	.word	0xffa3aae2
24019f74:	405fffff 	.word	0x405fffff
24019f78:	00000000 	.word	0x00000000
24019f7c:	c062c000 	.word	0xc062c000
24019f80:	00000000 	.word	0x00000000
24019f84:	c062a000 	.word	0xc062a000
24019f88:	24027e18 	.word	0x24027e18
24019f8c:	4b000000 	.word	0x4b000000
24019f90:	24026bc0 	.word	0x24026bc0
24019f94:	00000000 	.word	0x00000000

24019f98 <sinf_poly>:
24019f98:	07cb      	lsls	r3, r1, #31
24019f9a:	d412      	bmi.n	24019fc2 <sinf_poly+0x2a>
24019f9c:	ee21 5b00 	vmul.f64	d5, d1, d0
24019fa0:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
24019fa4:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
24019fa8:	eea6 7b01 	vfma.f64	d7, d6, d1
24019fac:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
24019fb0:	ee21 1b05 	vmul.f64	d1, d1, d5
24019fb4:	eea6 0b05 	vfma.f64	d0, d6, d5
24019fb8:	eea7 0b01 	vfma.f64	d0, d7, d1
24019fbc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24019fc0:	4770      	bx	lr
24019fc2:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
24019fc6:	ee21 5b01 	vmul.f64	d5, d1, d1
24019fca:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
24019fce:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
24019fd2:	eea1 7b06 	vfma.f64	d7, d1, d6
24019fd6:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
24019fda:	eea1 0b06 	vfma.f64	d0, d1, d6
24019fde:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
24019fe2:	ee21 1b05 	vmul.f64	d1, d1, d5
24019fe6:	eea5 0b06 	vfma.f64	d0, d5, d6
24019fea:	e7e5      	b.n	24019fb8 <sinf_poly+0x20>
24019fec:	0000      	movs	r0, r0
	...

24019ff0 <cosf>:
24019ff0:	b538      	push	{r3, r4, r5, lr}
24019ff2:	ee10 4a10 	vmov	r4, s0
24019ff6:	f3c4 530a 	ubfx	r3, r4, #20, #11
24019ffa:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
24019ffe:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
2401a002:	d21f      	bcs.n	2401a044 <cosf+0x54>
2401a004:	ee27 7b07 	vmul.f64	d7, d7, d7
2401a008:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
2401a00c:	f0c0 8086 	bcc.w	2401a11c <cosf+0x12c>
2401a010:	ee27 4b07 	vmul.f64	d4, d7, d7
2401a014:	4b46      	ldr	r3, [pc, #280]	; (2401a130 <cosf+0x140>)
2401a016:	ed93 5b14 	vldr	d5, [r3, #80]	; 0x50
2401a01a:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
2401a01e:	ed93 0b0c 	vldr	d0, [r3, #48]	; 0x30
2401a022:	eea7 6b05 	vfma.f64	d6, d7, d5
2401a026:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
2401a02a:	eea7 0b05 	vfma.f64	d0, d7, d5
2401a02e:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
2401a032:	ee27 7b04 	vmul.f64	d7, d7, d4
2401a036:	eea4 0b05 	vfma.f64	d0, d4, d5
2401a03a:	eea6 0b07 	vfma.f64	d0, d6, d7
2401a03e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
2401a042:	bd38      	pop	{r3, r4, r5, pc}
2401a044:	f240 422e 	movw	r2, #1070	; 0x42e
2401a048:	4293      	cmp	r3, r2
2401a04a:	d829      	bhi.n	2401a0a0 <cosf+0xb0>
2401a04c:	4b38      	ldr	r3, [pc, #224]	; (2401a130 <cosf+0x140>)
2401a04e:	ed93 6b08 	vldr	d6, [r3, #32]
2401a052:	ee27 6b06 	vmul.f64	d6, d7, d6
2401a056:	eefd 6bc6 	vcvt.s32.f64	s13, d6
2401a05a:	f103 0070 	add.w	r0, r3, #112	; 0x70
2401a05e:	ee16 1a90 	vmov	r1, s13
2401a062:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
2401a066:	1609      	asrs	r1, r1, #24
2401a068:	ee06 1a90 	vmov	s13, r1
2401a06c:	f001 0203 	and.w	r2, r1, #3
2401a070:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
2401a074:	eeb8 5be6 	vcvt.f64.s32	d5, s13
2401a078:	ed92 0b00 	vldr	d0, [r2]
2401a07c:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
2401a080:	f011 0f02 	tst.w	r1, #2
2401a084:	bf08      	it	eq
2401a086:	4618      	moveq	r0, r3
2401a088:	f081 0101 	eor.w	r1, r1, #1
2401a08c:	eea5 7b46 	vfms.f64	d7, d5, d6
2401a090:	ee27 1b07 	vmul.f64	d1, d7, d7
2401a094:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
2401a098:	ee27 0b00 	vmul.f64	d0, d7, d0
2401a09c:	f7ff bf7c 	b.w	24019f98 <sinf_poly>
2401a0a0:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
2401a0a4:	d236      	bcs.n	2401a114 <cosf+0x124>
2401a0a6:	4a23      	ldr	r2, [pc, #140]	; (2401a134 <cosf+0x144>)
2401a0a8:	f3c4 6183 	ubfx	r1, r4, #26, #4
2401a0ac:	eb02 0581 	add.w	r5, r2, r1, lsl #2
2401a0b0:	f3c4 0316 	ubfx	r3, r4, #0, #23
2401a0b4:	f3c4 50c2 	ubfx	r0, r4, #23, #3
2401a0b8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
2401a0bc:	6a2a      	ldr	r2, [r5, #32]
2401a0be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
2401a0c2:	4083      	lsls	r3, r0
2401a0c4:	fba3 2002 	umull	r2, r0, r3, r2
2401a0c8:	692a      	ldr	r2, [r5, #16]
2401a0ca:	4359      	muls	r1, r3
2401a0cc:	fbe3 0102 	umlal	r0, r1, r3, r2
2401a0d0:	f101 5300 	add.w	r3, r1, #536870912	; 0x20000000
2401a0d4:	0f9d      	lsrs	r5, r3, #30
2401a0d6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
2401a0da:	1ac9      	subs	r1, r1, r3
2401a0dc:	f7e6 fa92 	bl	24000604 <__aeabi_l2d>
2401a0e0:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
2401a0e4:	4b12      	ldr	r3, [pc, #72]	; (2401a130 <cosf+0x140>)
2401a0e6:	ed9f 0b10 	vldr	d0, [pc, #64]	; 2401a128 <cosf+0x138>
2401a0ea:	ec41 0b17 	vmov	d7, r0, r1
2401a0ee:	f004 0203 	and.w	r2, r4, #3
2401a0f2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
2401a0f6:	f014 0f02 	tst.w	r4, #2
2401a0fa:	ee27 0b00 	vmul.f64	d0, d7, d0
2401a0fe:	f103 0070 	add.w	r0, r3, #112	; 0x70
2401a102:	ed92 7b00 	vldr	d7, [r2]
2401a106:	ee20 1b00 	vmul.f64	d1, d0, d0
2401a10a:	f085 0101 	eor.w	r1, r5, #1
2401a10e:	bf08      	it	eq
2401a110:	4618      	moveq	r0, r3
2401a112:	e7bf      	b.n	2401a094 <cosf+0xa4>
2401a114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
2401a118:	f000 b848 	b.w	2401a1ac <__math_invalidf>
2401a11c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2401a120:	e78f      	b.n	2401a042 <cosf+0x52>
2401a122:	bf00      	nop
2401a124:	f3af 8000 	nop.w
2401a128:	54442d18 	.word	0x54442d18
2401a12c:	3c1921fb 	.word	0x3c1921fb
2401a130:	24027818 	.word	0x24027818
2401a134:	240277b8 	.word	0x240277b8

2401a138 <with_errnof>:
2401a138:	b513      	push	{r0, r1, r4, lr}
2401a13a:	4604      	mov	r4, r0
2401a13c:	ed8d 0a01 	vstr	s0, [sp, #4]
2401a140:	f7ff faf8 	bl	24019734 <__errno>
2401a144:	ed9d 0a01 	vldr	s0, [sp, #4]
2401a148:	6004      	str	r4, [r0, #0]
2401a14a:	b002      	add	sp, #8
2401a14c:	bd10      	pop	{r4, pc}

2401a14e <xflowf>:
2401a14e:	b130      	cbz	r0, 2401a15e <xflowf+0x10>
2401a150:	eef1 7a40 	vneg.f32	s15, s0
2401a154:	ee27 0a80 	vmul.f32	s0, s15, s0
2401a158:	2022      	movs	r0, #34	; 0x22
2401a15a:	f7ff bfed 	b.w	2401a138 <with_errnof>
2401a15e:	eef0 7a40 	vmov.f32	s15, s0
2401a162:	e7f7      	b.n	2401a154 <xflowf+0x6>

2401a164 <__math_uflowf>:
2401a164:	ed9f 0a01 	vldr	s0, [pc, #4]	; 2401a16c <__math_uflowf+0x8>
2401a168:	f7ff bff1 	b.w	2401a14e <xflowf>
2401a16c:	10000000 	.word	0x10000000

2401a170 <__math_may_uflowf>:
2401a170:	ed9f 0a01 	vldr	s0, [pc, #4]	; 2401a178 <__math_may_uflowf+0x8>
2401a174:	f7ff bfeb 	b.w	2401a14e <xflowf>
2401a178:	1a200000 	.word	0x1a200000

2401a17c <__math_oflowf>:
2401a17c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 2401a184 <__math_oflowf+0x8>
2401a180:	f7ff bfe5 	b.w	2401a14e <xflowf>
2401a184:	70000000 	.word	0x70000000

2401a188 <__math_divzerof>:
2401a188:	ed9f 0a07 	vldr	s0, [pc, #28]	; 2401a1a8 <__math_divzerof+0x20>
2401a18c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
2401a190:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401a194:	2800      	cmp	r0, #0
2401a196:	f04f 0022 	mov.w	r0, #34	; 0x22
2401a19a:	fe47 7a27 	vseleq.f32	s15, s14, s15
2401a19e:	ee87 0a80 	vdiv.f32	s0, s15, s0
2401a1a2:	f7ff bfc9 	b.w	2401a138 <with_errnof>
2401a1a6:	bf00      	nop
2401a1a8:	00000000 	.word	0x00000000

2401a1ac <__math_invalidf>:
2401a1ac:	eef0 7a40 	vmov.f32	s15, s0
2401a1b0:	ee30 7a40 	vsub.f32	s14, s0, s0
2401a1b4:	eef4 7a67 	vcmp.f32	s15, s15
2401a1b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401a1bc:	ee87 0a07 	vdiv.f32	s0, s14, s14
2401a1c0:	d602      	bvs.n	2401a1c8 <__math_invalidf+0x1c>
2401a1c2:	2021      	movs	r0, #33	; 0x21
2401a1c4:	f7ff bfb8 	b.w	2401a138 <with_errnof>
2401a1c8:	4770      	bx	lr
	...

2401a1cc <log10f>:
2401a1cc:	b508      	push	{r3, lr}
2401a1ce:	ed2d 8b02 	vpush	{d8}
2401a1d2:	eeb0 8a40 	vmov.f32	s16, s0
2401a1d6:	f000 f9df 	bl	2401a598 <__ieee754_log10f>
2401a1da:	eeb4 8a48 	vcmp.f32	s16, s16
2401a1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401a1e2:	d60f      	bvs.n	2401a204 <log10f+0x38>
2401a1e4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
2401a1e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401a1ec:	d80a      	bhi.n	2401a204 <log10f+0x38>
2401a1ee:	eeb5 8a40 	vcmp.f32	s16, #0.0
2401a1f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401a1f6:	d108      	bne.n	2401a20a <log10f+0x3e>
2401a1f8:	f7ff fa9c 	bl	24019734 <__errno>
2401a1fc:	2322      	movs	r3, #34	; 0x22
2401a1fe:	ed9f 0a08 	vldr	s0, [pc, #32]	; 2401a220 <log10f+0x54>
2401a202:	6003      	str	r3, [r0, #0]
2401a204:	ecbd 8b02 	vpop	{d8}
2401a208:	bd08      	pop	{r3, pc}
2401a20a:	f7ff fa93 	bl	24019734 <__errno>
2401a20e:	ecbd 8b02 	vpop	{d8}
2401a212:	2321      	movs	r3, #33	; 0x21
2401a214:	6003      	str	r3, [r0, #0]
2401a216:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
2401a21a:	4802      	ldr	r0, [pc, #8]	; (2401a224 <log10f+0x58>)
2401a21c:	f000 b80c 	b.w	2401a238 <nanf>
2401a220:	ff800000 	.word	0xff800000
2401a224:	24026bb8 	.word	0x24026bb8

2401a228 <fabsf>:
2401a228:	ee10 3a10 	vmov	r3, s0
2401a22c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
2401a230:	ee00 3a10 	vmov	s0, r3
2401a234:	4770      	bx	lr
	...

2401a238 <nanf>:
2401a238:	ed9f 0a01 	vldr	s0, [pc, #4]	; 2401a240 <nanf+0x8>
2401a23c:	4770      	bx	lr
2401a23e:	bf00      	nop
2401a240:	7fc00000 	.word	0x7fc00000

2401a244 <tanf>:
2401a244:	ee10 3a10 	vmov	r3, s0
2401a248:	b507      	push	{r0, r1, r2, lr}
2401a24a:	4a12      	ldr	r2, [pc, #72]	; (2401a294 <tanf+0x50>)
2401a24c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
2401a250:	4293      	cmp	r3, r2
2401a252:	dc07      	bgt.n	2401a264 <tanf+0x20>
2401a254:	eddf 0a10 	vldr	s1, [pc, #64]	; 2401a298 <tanf+0x54>
2401a258:	2001      	movs	r0, #1
2401a25a:	b003      	add	sp, #12
2401a25c:	f85d eb04 	ldr.w	lr, [sp], #4
2401a260:	f000 b8ba 	b.w	2401a3d8 <__kernel_tanf>
2401a264:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
2401a268:	db04      	blt.n	2401a274 <tanf+0x30>
2401a26a:	ee30 0a40 	vsub.f32	s0, s0, s0
2401a26e:	b003      	add	sp, #12
2401a270:	f85d fb04 	ldr.w	pc, [sp], #4
2401a274:	4668      	mov	r0, sp
2401a276:	f000 f9e7 	bl	2401a648 <__ieee754_rem_pio2f>
2401a27a:	0040      	lsls	r0, r0, #1
2401a27c:	f000 0002 	and.w	r0, r0, #2
2401a280:	eddd 0a01 	vldr	s1, [sp, #4]
2401a284:	ed9d 0a00 	vldr	s0, [sp]
2401a288:	f1c0 0001 	rsb	r0, r0, #1
2401a28c:	f000 f8a4 	bl	2401a3d8 <__kernel_tanf>
2401a290:	e7ed      	b.n	2401a26e <tanf+0x2a>
2401a292:	bf00      	nop
2401a294:	3f490fda 	.word	0x3f490fda
2401a298:	00000000 	.word	0x00000000

2401a29c <tanhf>:
2401a29c:	b538      	push	{r3, r4, r5, lr}
2401a29e:	ee10 5a10 	vmov	r5, s0
2401a2a2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
2401a2a6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
2401a2aa:	ed2d 8b02 	vpush	{d8}
2401a2ae:	db0f      	blt.n	2401a2d0 <tanhf+0x34>
2401a2b0:	4b2a      	ldr	r3, [pc, #168]	; (2401a35c <tanhf+0xc0>)
2401a2b2:	ed93 6a00 	vldr	s12, [r3]
2401a2b6:	edd3 6a00 	vldr	s13, [r3]
2401a2ba:	eec6 7a00 	vdiv.f32	s15, s12, s0
2401a2be:	2d00      	cmp	r5, #0
2401a2c0:	bfac      	ite	ge
2401a2c2:	ee37 0aa6 	vaddge.f32	s0, s15, s13
2401a2c6:	ee37 0ae6 	vsublt.f32	s0, s15, s13
2401a2ca:	ecbd 8b02 	vpop	{d8}
2401a2ce:	bd38      	pop	{r3, r4, r5, pc}
2401a2d0:	4a23      	ldr	r2, [pc, #140]	; (2401a360 <tanhf+0xc4>)
2401a2d2:	4293      	cmp	r3, r2
2401a2d4:	dc39      	bgt.n	2401a34a <tanhf+0xae>
2401a2d6:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
2401a2da:	da07      	bge.n	2401a2ec <tanhf+0x50>
2401a2dc:	4b1f      	ldr	r3, [pc, #124]	; (2401a35c <tanhf+0xc0>)
2401a2de:	edd3 7a00 	vldr	s15, [r3]
2401a2e2:	ee77 7a80 	vadd.f32	s15, s15, s0
2401a2e6:	ee27 0a80 	vmul.f32	s0, s15, s0
2401a2ea:	e7ee      	b.n	2401a2ca <tanhf+0x2e>
2401a2ec:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
2401a2f0:	4c1c      	ldr	r4, [pc, #112]	; (2401a364 <tanhf+0xc8>)
2401a2f2:	db19      	blt.n	2401a328 <tanhf+0x8c>
2401a2f4:	f7ff ff98 	bl	2401a228 <fabsf>
2401a2f8:	edd4 7a00 	vldr	s15, [r4]
2401a2fc:	ee20 0a27 	vmul.f32	s0, s0, s15
2401a300:	f000 ffc2 	bl	2401b288 <expm1f>
2401a304:	4b15      	ldr	r3, [pc, #84]	; (2401a35c <tanhf+0xc0>)
2401a306:	edd3 7a00 	vldr	s15, [r3]
2401a30a:	edd4 6a00 	vldr	s13, [r4]
2401a30e:	ed94 7a00 	vldr	s14, [r4]
2401a312:	ee37 0a00 	vadd.f32	s0, s14, s0
2401a316:	ee86 7a80 	vdiv.f32	s14, s13, s0
2401a31a:	ee37 0ac7 	vsub.f32	s0, s15, s14
2401a31e:	2d00      	cmp	r5, #0
2401a320:	bfb8      	it	lt
2401a322:	eeb1 0a40 	vneglt.f32	s0, s0
2401a326:	e7d0      	b.n	2401a2ca <tanhf+0x2e>
2401a328:	ed94 8a00 	vldr	s16, [r4]
2401a32c:	f7ff ff7c 	bl	2401a228 <fabsf>
2401a330:	ee28 0a40 	vnmul.f32	s0, s16, s0
2401a334:	f000 ffa8 	bl	2401b288 <expm1f>
2401a338:	edd4 7a00 	vldr	s15, [r4]
2401a33c:	ee77 7a80 	vadd.f32	s15, s15, s0
2401a340:	eeb1 7a40 	vneg.f32	s14, s0
2401a344:	ee87 0a27 	vdiv.f32	s0, s14, s15
2401a348:	e7e9      	b.n	2401a31e <tanhf+0x82>
2401a34a:	4b04      	ldr	r3, [pc, #16]	; (2401a35c <tanhf+0xc0>)
2401a34c:	ed93 0a00 	vldr	s0, [r3]
2401a350:	4b05      	ldr	r3, [pc, #20]	; (2401a368 <tanhf+0xcc>)
2401a352:	edd3 7a00 	vldr	s15, [r3]
2401a356:	ee30 0a67 	vsub.f32	s0, s0, s15
2401a35a:	e7e0      	b.n	2401a31e <tanhf+0x82>
2401a35c:	2000091c 	.word	0x2000091c
2401a360:	41afffff 	.word	0x41afffff
2401a364:	20000924 	.word	0x20000924
2401a368:	20000920 	.word	0x20000920
2401a36c:	00000000 	.word	0x00000000

2401a370 <tan>:
2401a370:	b51f      	push	{r0, r1, r2, r3, r4, lr}
2401a372:	eeb0 7b40 	vmov.f64	d7, d0
2401a376:	ee17 3a90 	vmov	r3, s15
2401a37a:	4a15      	ldr	r2, [pc, #84]	; (2401a3d0 <tan+0x60>)
2401a37c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
2401a380:	4293      	cmp	r3, r2
2401a382:	dc07      	bgt.n	2401a394 <tan+0x24>
2401a384:	ed9f 1b10 	vldr	d1, [pc, #64]	; 2401a3c8 <tan+0x58>
2401a388:	2001      	movs	r0, #1
2401a38a:	b005      	add	sp, #20
2401a38c:	f85d eb04 	ldr.w	lr, [sp], #4
2401a390:	f000 be5e 	b.w	2401b050 <__kernel_tan>
2401a394:	4a0f      	ldr	r2, [pc, #60]	; (2401a3d4 <tan+0x64>)
2401a396:	4293      	cmp	r3, r2
2401a398:	dd04      	ble.n	2401a3a4 <tan+0x34>
2401a39a:	ee30 0b40 	vsub.f64	d0, d0, d0
2401a39e:	b005      	add	sp, #20
2401a3a0:	f85d fb04 	ldr.w	pc, [sp], #4
2401a3a4:	4668      	mov	r0, sp
2401a3a6:	f000 fa7b 	bl	2401a8a0 <__ieee754_rem_pio2>
2401a3aa:	0040      	lsls	r0, r0, #1
2401a3ac:	f000 0002 	and.w	r0, r0, #2
2401a3b0:	ed9d 1b02 	vldr	d1, [sp, #8]
2401a3b4:	ed9d 0b00 	vldr	d0, [sp]
2401a3b8:	f1c0 0001 	rsb	r0, r0, #1
2401a3bc:	f000 fe48 	bl	2401b050 <__kernel_tan>
2401a3c0:	e7ed      	b.n	2401a39e <tan+0x2e>
2401a3c2:	bf00      	nop
2401a3c4:	f3af 8000 	nop.w
	...
2401a3d0:	3fe921fb 	.word	0x3fe921fb
2401a3d4:	7fefffff 	.word	0x7fefffff

2401a3d8 <__kernel_tanf>:
2401a3d8:	b508      	push	{r3, lr}
2401a3da:	ee10 3a10 	vmov	r3, s0
2401a3de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
2401a3e2:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
2401a3e6:	eef0 7a40 	vmov.f32	s15, s0
2401a3ea:	da17      	bge.n	2401a41c <__kernel_tanf+0x44>
2401a3ec:	eebd 7ac0 	vcvt.s32.f32	s14, s0
2401a3f0:	ee17 1a10 	vmov	r1, s14
2401a3f4:	bb41      	cbnz	r1, 2401a448 <__kernel_tanf+0x70>
2401a3f6:	1c43      	adds	r3, r0, #1
2401a3f8:	4313      	orrs	r3, r2
2401a3fa:	d108      	bne.n	2401a40e <__kernel_tanf+0x36>
2401a3fc:	f7ff ff14 	bl	2401a228 <fabsf>
2401a400:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401a404:	eec7 7a00 	vdiv.f32	s15, s14, s0
2401a408:	eeb0 0a67 	vmov.f32	s0, s15
2401a40c:	bd08      	pop	{r3, pc}
2401a40e:	2801      	cmp	r0, #1
2401a410:	d0fa      	beq.n	2401a408 <__kernel_tanf+0x30>
2401a412:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
2401a416:	eec7 7a00 	vdiv.f32	s15, s14, s0
2401a41a:	e7f5      	b.n	2401a408 <__kernel_tanf+0x30>
2401a41c:	494c      	ldr	r1, [pc, #304]	; (2401a550 <__kernel_tanf+0x178>)
2401a41e:	428a      	cmp	r2, r1
2401a420:	db12      	blt.n	2401a448 <__kernel_tanf+0x70>
2401a422:	2b00      	cmp	r3, #0
2401a424:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 2401a554 <__kernel_tanf+0x17c>
2401a428:	bfb8      	it	lt
2401a42a:	eef1 7a40 	vneglt.f32	s15, s0
2401a42e:	ee37 7a67 	vsub.f32	s14, s14, s15
2401a432:	eddf 7a49 	vldr	s15, [pc, #292]	; 2401a558 <__kernel_tanf+0x180>
2401a436:	bfb8      	it	lt
2401a438:	eef1 0a60 	vneglt.f32	s1, s1
2401a43c:	ee77 7ae0 	vsub.f32	s15, s15, s1
2401a440:	eddf 0a46 	vldr	s1, [pc, #280]	; 2401a55c <__kernel_tanf+0x184>
2401a444:	ee77 7a87 	vadd.f32	s15, s15, s14
2401a448:	ee67 6aa7 	vmul.f32	s13, s15, s15
2401a44c:	eddf 5a44 	vldr	s11, [pc, #272]	; 2401a560 <__kernel_tanf+0x188>
2401a450:	ed9f 6a44 	vldr	s12, [pc, #272]	; 2401a564 <__kernel_tanf+0x18c>
2401a454:	ed9f 5a44 	vldr	s10, [pc, #272]	; 2401a568 <__kernel_tanf+0x190>
2401a458:	493d      	ldr	r1, [pc, #244]	; (2401a550 <__kernel_tanf+0x178>)
2401a45a:	ee26 7aa6 	vmul.f32	s14, s13, s13
2401a45e:	428a      	cmp	r2, r1
2401a460:	eea7 6a25 	vfma.f32	s12, s14, s11
2401a464:	eddf 5a41 	vldr	s11, [pc, #260]	; 2401a56c <__kernel_tanf+0x194>
2401a468:	eee6 5a07 	vfma.f32	s11, s12, s14
2401a46c:	ed9f 6a40 	vldr	s12, [pc, #256]	; 2401a570 <__kernel_tanf+0x198>
2401a470:	eea5 6a87 	vfma.f32	s12, s11, s14
2401a474:	eddf 5a3f 	vldr	s11, [pc, #252]	; 2401a574 <__kernel_tanf+0x19c>
2401a478:	eee6 5a07 	vfma.f32	s11, s12, s14
2401a47c:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 2401a578 <__kernel_tanf+0x1a0>
2401a480:	eea5 6a87 	vfma.f32	s12, s11, s14
2401a484:	eddf 5a3d 	vldr	s11, [pc, #244]	; 2401a57c <__kernel_tanf+0x1a4>
2401a488:	eee7 5a05 	vfma.f32	s11, s14, s10
2401a48c:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 2401a580 <__kernel_tanf+0x1a8>
2401a490:	eea5 5a87 	vfma.f32	s10, s11, s14
2401a494:	eddf 5a3b 	vldr	s11, [pc, #236]	; 2401a584 <__kernel_tanf+0x1ac>
2401a498:	eee5 5a07 	vfma.f32	s11, s10, s14
2401a49c:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 2401a588 <__kernel_tanf+0x1b0>
2401a4a0:	eea5 5a87 	vfma.f32	s10, s11, s14
2401a4a4:	eddf 5a39 	vldr	s11, [pc, #228]	; 2401a58c <__kernel_tanf+0x1b4>
2401a4a8:	eee5 5a07 	vfma.f32	s11, s10, s14
2401a4ac:	eeb0 7a46 	vmov.f32	s14, s12
2401a4b0:	eea5 7aa6 	vfma.f32	s14, s11, s13
2401a4b4:	ee27 5aa6 	vmul.f32	s10, s15, s13
2401a4b8:	eeb0 6a60 	vmov.f32	s12, s1
2401a4bc:	eea7 6a05 	vfma.f32	s12, s14, s10
2401a4c0:	ed9f 7a33 	vldr	s14, [pc, #204]	; 2401a590 <__kernel_tanf+0x1b8>
2401a4c4:	eee6 0a26 	vfma.f32	s1, s12, s13
2401a4c8:	eee5 0a07 	vfma.f32	s1, s10, s14
2401a4cc:	ee77 6aa0 	vadd.f32	s13, s15, s1
2401a4d0:	db1d      	blt.n	2401a50e <__kernel_tanf+0x136>
2401a4d2:	ee07 0a10 	vmov	s14, r0
2401a4d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
2401a4da:	ee66 5aa6 	vmul.f32	s11, s13, s13
2401a4de:	ee76 6a87 	vadd.f32	s13, s13, s14
2401a4e2:	179b      	asrs	r3, r3, #30
2401a4e4:	ee85 6aa6 	vdiv.f32	s12, s11, s13
2401a4e8:	f003 0302 	and.w	r3, r3, #2
2401a4ec:	f1c3 0301 	rsb	r3, r3, #1
2401a4f0:	ee76 6a60 	vsub.f32	s13, s12, s1
2401a4f4:	ee77 7ae6 	vsub.f32	s15, s15, s13
2401a4f8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
2401a4fc:	eea7 7ae6 	vfms.f32	s14, s15, s13
2401a500:	ee07 3a90 	vmov	s15, r3
2401a504:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401a508:	ee67 7a87 	vmul.f32	s15, s15, s14
2401a50c:	e77c      	b.n	2401a408 <__kernel_tanf+0x30>
2401a50e:	2801      	cmp	r0, #1
2401a510:	d01b      	beq.n	2401a54a <__kernel_tanf+0x172>
2401a512:	4b20      	ldr	r3, [pc, #128]	; (2401a594 <__kernel_tanf+0x1bc>)
2401a514:	ee16 2a90 	vmov	r2, s13
2401a518:	401a      	ands	r2, r3
2401a51a:	ee05 2a90 	vmov	s11, r2
2401a51e:	ee75 7ae7 	vsub.f32	s15, s11, s15
2401a522:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401a526:	ee70 0ae7 	vsub.f32	s1, s1, s15
2401a52a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
2401a52e:	ee87 6aa6 	vdiv.f32	s12, s15, s13
2401a532:	ee16 2a10 	vmov	r2, s12
2401a536:	4013      	ands	r3, r2
2401a538:	ee07 3a90 	vmov	s15, r3
2401a53c:	eea5 7aa7 	vfma.f32	s14, s11, s15
2401a540:	eea0 7aa7 	vfma.f32	s14, s1, s15
2401a544:	eee7 7a06 	vfma.f32	s15, s14, s12
2401a548:	e75e      	b.n	2401a408 <__kernel_tanf+0x30>
2401a54a:	eef0 7a66 	vmov.f32	s15, s13
2401a54e:	e75b      	b.n	2401a408 <__kernel_tanf+0x30>
2401a550:	3f2ca140 	.word	0x3f2ca140
2401a554:	3f490fda 	.word	0x3f490fda
2401a558:	33222168 	.word	0x33222168
2401a55c:	00000000 	.word	0x00000000
2401a560:	b79bae5f 	.word	0xb79bae5f
2401a564:	38a3f445 	.word	0x38a3f445
2401a568:	37d95384 	.word	0x37d95384
2401a56c:	3a1a26c8 	.word	0x3a1a26c8
2401a570:	3b6b6916 	.word	0x3b6b6916
2401a574:	3cb327a4 	.word	0x3cb327a4
2401a578:	3e088889 	.word	0x3e088889
2401a57c:	3895c07a 	.word	0x3895c07a
2401a580:	398137b9 	.word	0x398137b9
2401a584:	3abede48 	.word	0x3abede48
2401a588:	3c11371f 	.word	0x3c11371f
2401a58c:	3d5d0dd1 	.word	0x3d5d0dd1
2401a590:	3eaaaaab 	.word	0x3eaaaaab
2401a594:	fffff000 	.word	0xfffff000

2401a598 <__ieee754_log10f>:
2401a598:	b508      	push	{r3, lr}
2401a59a:	ee10 2a10 	vmov	r2, s0
2401a59e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
2401a5a2:	ed2d 8b02 	vpush	{d8}
2401a5a6:	d108      	bne.n	2401a5ba <__ieee754_log10f+0x22>
2401a5a8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 2401a630 <__ieee754_log10f+0x98>
2401a5ac:	eddf 7a21 	vldr	s15, [pc, #132]	; 2401a634 <__ieee754_log10f+0x9c>
2401a5b0:	ee87 0a27 	vdiv.f32	s0, s14, s15
2401a5b4:	ecbd 8b02 	vpop	{d8}
2401a5b8:	bd08      	pop	{r3, pc}
2401a5ba:	2a00      	cmp	r2, #0
2401a5bc:	da02      	bge.n	2401a5c4 <__ieee754_log10f+0x2c>
2401a5be:	ee30 7a40 	vsub.f32	s14, s0, s0
2401a5c2:	e7f3      	b.n	2401a5ac <__ieee754_log10f+0x14>
2401a5c4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
2401a5c8:	db02      	blt.n	2401a5d0 <__ieee754_log10f+0x38>
2401a5ca:	ee30 0a00 	vadd.f32	s0, s0, s0
2401a5ce:	e7f1      	b.n	2401a5b4 <__ieee754_log10f+0x1c>
2401a5d0:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
2401a5d4:	bfbf      	itttt	lt
2401a5d6:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 2401a638 <__ieee754_log10f+0xa0>
2401a5da:	ee60 7a27 	vmullt.f32	s15, s0, s15
2401a5de:	f06f 0118 	mvnlt.w	r1, #24
2401a5e2:	ee17 2a90 	vmovlt	r2, s15
2401a5e6:	ea4f 53e2 	mov.w	r3, r2, asr #23
2401a5ea:	bfa8      	it	ge
2401a5ec:	2100      	movge	r1, #0
2401a5ee:	3b7f      	subs	r3, #127	; 0x7f
2401a5f0:	440b      	add	r3, r1
2401a5f2:	0fd9      	lsrs	r1, r3, #31
2401a5f4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
2401a5f8:	ee07 3a90 	vmov	s15, r3
2401a5fc:	f3c2 0216 	ubfx	r2, r2, #0, #23
2401a600:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
2401a604:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
2401a608:	ee00 3a10 	vmov	s0, r3
2401a60c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
2401a610:	f7ff f962 	bl	240198d8 <logf>
2401a614:	eddf 7a09 	vldr	s15, [pc, #36]	; 2401a63c <__ieee754_log10f+0xa4>
2401a618:	ee20 0a27 	vmul.f32	s0, s0, s15
2401a61c:	eddf 7a08 	vldr	s15, [pc, #32]	; 2401a640 <__ieee754_log10f+0xa8>
2401a620:	eea8 0a27 	vfma.f32	s0, s16, s15
2401a624:	eddf 7a07 	vldr	s15, [pc, #28]	; 2401a644 <__ieee754_log10f+0xac>
2401a628:	eea8 0a27 	vfma.f32	s0, s16, s15
2401a62c:	e7c2      	b.n	2401a5b4 <__ieee754_log10f+0x1c>
2401a62e:	bf00      	nop
2401a630:	cc000000 	.word	0xcc000000
2401a634:	00000000 	.word	0x00000000
2401a638:	4c000000 	.word	0x4c000000
2401a63c:	3ede5bd9 	.word	0x3ede5bd9
2401a640:	355427db 	.word	0x355427db
2401a644:	3e9a2080 	.word	0x3e9a2080

2401a648 <__ieee754_rem_pio2f>:
2401a648:	b5f0      	push	{r4, r5, r6, r7, lr}
2401a64a:	ee10 6a10 	vmov	r6, s0
2401a64e:	4b86      	ldr	r3, [pc, #536]	; (2401a868 <__ieee754_rem_pio2f+0x220>)
2401a650:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
2401a654:	429d      	cmp	r5, r3
2401a656:	b087      	sub	sp, #28
2401a658:	4604      	mov	r4, r0
2401a65a:	dc05      	bgt.n	2401a668 <__ieee754_rem_pio2f+0x20>
2401a65c:	2300      	movs	r3, #0
2401a65e:	ed80 0a00 	vstr	s0, [r0]
2401a662:	6043      	str	r3, [r0, #4]
2401a664:	2000      	movs	r0, #0
2401a666:	e020      	b.n	2401a6aa <__ieee754_rem_pio2f+0x62>
2401a668:	4b80      	ldr	r3, [pc, #512]	; (2401a86c <__ieee754_rem_pio2f+0x224>)
2401a66a:	429d      	cmp	r5, r3
2401a66c:	dc38      	bgt.n	2401a6e0 <__ieee754_rem_pio2f+0x98>
2401a66e:	2e00      	cmp	r6, #0
2401a670:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 2401a870 <__ieee754_rem_pio2f+0x228>
2401a674:	4b7f      	ldr	r3, [pc, #508]	; (2401a874 <__ieee754_rem_pio2f+0x22c>)
2401a676:	f025 050f 	bic.w	r5, r5, #15
2401a67a:	dd18      	ble.n	2401a6ae <__ieee754_rem_pio2f+0x66>
2401a67c:	429d      	cmp	r5, r3
2401a67e:	ee70 7a47 	vsub.f32	s15, s0, s14
2401a682:	bf09      	itett	eq
2401a684:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 2401a878 <__ieee754_rem_pio2f+0x230>
2401a688:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 2401a87c <__ieee754_rem_pio2f+0x234>
2401a68c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
2401a690:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 2401a880 <__ieee754_rem_pio2f+0x238>
2401a694:	ee77 6ac7 	vsub.f32	s13, s15, s14
2401a698:	ee77 7ae6 	vsub.f32	s15, s15, s13
2401a69c:	edc0 6a00 	vstr	s13, [r0]
2401a6a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401a6a4:	edc0 7a01 	vstr	s15, [r0, #4]
2401a6a8:	2001      	movs	r0, #1
2401a6aa:	b007      	add	sp, #28
2401a6ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
2401a6ae:	429d      	cmp	r5, r3
2401a6b0:	ee70 7a07 	vadd.f32	s15, s0, s14
2401a6b4:	bf09      	itett	eq
2401a6b6:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 2401a878 <__ieee754_rem_pio2f+0x230>
2401a6ba:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 2401a87c <__ieee754_rem_pio2f+0x234>
2401a6be:	ee77 7a87 	vaddeq.f32	s15, s15, s14
2401a6c2:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 2401a880 <__ieee754_rem_pio2f+0x238>
2401a6c6:	ee77 6a87 	vadd.f32	s13, s15, s14
2401a6ca:	ee77 7ae6 	vsub.f32	s15, s15, s13
2401a6ce:	edc0 6a00 	vstr	s13, [r0]
2401a6d2:	ee77 7a87 	vadd.f32	s15, s15, s14
2401a6d6:	edc0 7a01 	vstr	s15, [r0, #4]
2401a6da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
2401a6de:	e7e4      	b.n	2401a6aa <__ieee754_rem_pio2f+0x62>
2401a6e0:	4b68      	ldr	r3, [pc, #416]	; (2401a884 <__ieee754_rem_pio2f+0x23c>)
2401a6e2:	429d      	cmp	r5, r3
2401a6e4:	dc71      	bgt.n	2401a7ca <__ieee754_rem_pio2f+0x182>
2401a6e6:	f7ff fd9f 	bl	2401a228 <fabsf>
2401a6ea:	ed9f 7a67 	vldr	s14, [pc, #412]	; 2401a888 <__ieee754_rem_pio2f+0x240>
2401a6ee:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2401a6f2:	eee0 7a07 	vfma.f32	s15, s0, s14
2401a6f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
2401a6fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
2401a6fe:	ee17 0a90 	vmov	r0, s15
2401a702:	eddf 7a5b 	vldr	s15, [pc, #364]	; 2401a870 <__ieee754_rem_pio2f+0x228>
2401a706:	eea7 0a67 	vfms.f32	s0, s14, s15
2401a70a:	281f      	cmp	r0, #31
2401a70c:	eddf 7a5b 	vldr	s15, [pc, #364]	; 2401a87c <__ieee754_rem_pio2f+0x234>
2401a710:	ee67 7a27 	vmul.f32	s15, s14, s15
2401a714:	eeb1 6a47 	vneg.f32	s12, s14
2401a718:	ee70 6a67 	vsub.f32	s13, s0, s15
2401a71c:	ee16 2a90 	vmov	r2, s13
2401a720:	dc1c      	bgt.n	2401a75c <__ieee754_rem_pio2f+0x114>
2401a722:	495a      	ldr	r1, [pc, #360]	; (2401a88c <__ieee754_rem_pio2f+0x244>)
2401a724:	1e47      	subs	r7, r0, #1
2401a726:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
2401a72a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
2401a72e:	428b      	cmp	r3, r1
2401a730:	d014      	beq.n	2401a75c <__ieee754_rem_pio2f+0x114>
2401a732:	6022      	str	r2, [r4, #0]
2401a734:	ed94 7a00 	vldr	s14, [r4]
2401a738:	ee30 0a47 	vsub.f32	s0, s0, s14
2401a73c:	2e00      	cmp	r6, #0
2401a73e:	ee30 0a67 	vsub.f32	s0, s0, s15
2401a742:	ed84 0a01 	vstr	s0, [r4, #4]
2401a746:	dab0      	bge.n	2401a6aa <__ieee754_rem_pio2f+0x62>
2401a748:	eeb1 7a47 	vneg.f32	s14, s14
2401a74c:	eeb1 0a40 	vneg.f32	s0, s0
2401a750:	ed84 7a00 	vstr	s14, [r4]
2401a754:	ed84 0a01 	vstr	s0, [r4, #4]
2401a758:	4240      	negs	r0, r0
2401a75a:	e7a6      	b.n	2401a6aa <__ieee754_rem_pio2f+0x62>
2401a75c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
2401a760:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
2401a764:	2908      	cmp	r1, #8
2401a766:	ea4f 53e5 	mov.w	r3, r5, asr #23
2401a76a:	dde2      	ble.n	2401a732 <__ieee754_rem_pio2f+0xea>
2401a76c:	eddf 5a42 	vldr	s11, [pc, #264]	; 2401a878 <__ieee754_rem_pio2f+0x230>
2401a770:	eef0 6a40 	vmov.f32	s13, s0
2401a774:	eee6 6a25 	vfma.f32	s13, s12, s11
2401a778:	ee70 7a66 	vsub.f32	s15, s0, s13
2401a77c:	eee6 7a25 	vfma.f32	s15, s12, s11
2401a780:	eddf 5a3f 	vldr	s11, [pc, #252]	; 2401a880 <__ieee754_rem_pio2f+0x238>
2401a784:	eed7 7a25 	vfnms.f32	s15, s14, s11
2401a788:	ee76 5ae7 	vsub.f32	s11, s13, s15
2401a78c:	ee15 2a90 	vmov	r2, s11
2401a790:	f3c2 51c7 	ubfx	r1, r2, #23, #8
2401a794:	1a5b      	subs	r3, r3, r1
2401a796:	2b19      	cmp	r3, #25
2401a798:	dc04      	bgt.n	2401a7a4 <__ieee754_rem_pio2f+0x15c>
2401a79a:	edc4 5a00 	vstr	s11, [r4]
2401a79e:	eeb0 0a66 	vmov.f32	s0, s13
2401a7a2:	e7c7      	b.n	2401a734 <__ieee754_rem_pio2f+0xec>
2401a7a4:	eddf 5a3a 	vldr	s11, [pc, #232]	; 2401a890 <__ieee754_rem_pio2f+0x248>
2401a7a8:	eeb0 0a66 	vmov.f32	s0, s13
2401a7ac:	eea6 0a25 	vfma.f32	s0, s12, s11
2401a7b0:	ee76 7ac0 	vsub.f32	s15, s13, s0
2401a7b4:	eddf 6a37 	vldr	s13, [pc, #220]	; 2401a894 <__ieee754_rem_pio2f+0x24c>
2401a7b8:	eee6 7a25 	vfma.f32	s15, s12, s11
2401a7bc:	eed7 7a26 	vfnms.f32	s15, s14, s13
2401a7c0:	ee30 7a67 	vsub.f32	s14, s0, s15
2401a7c4:	ed84 7a00 	vstr	s14, [r4]
2401a7c8:	e7b4      	b.n	2401a734 <__ieee754_rem_pio2f+0xec>
2401a7ca:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
2401a7ce:	db06      	blt.n	2401a7de <__ieee754_rem_pio2f+0x196>
2401a7d0:	ee70 7a40 	vsub.f32	s15, s0, s0
2401a7d4:	edc0 7a01 	vstr	s15, [r0, #4]
2401a7d8:	edc0 7a00 	vstr	s15, [r0]
2401a7dc:	e742      	b.n	2401a664 <__ieee754_rem_pio2f+0x1c>
2401a7de:	15ea      	asrs	r2, r5, #23
2401a7e0:	3a86      	subs	r2, #134	; 0x86
2401a7e2:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
2401a7e6:	ee07 3a90 	vmov	s15, r3
2401a7ea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
2401a7ee:	eddf 6a2a 	vldr	s13, [pc, #168]	; 2401a898 <__ieee754_rem_pio2f+0x250>
2401a7f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
2401a7f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401a7fa:	ed8d 7a03 	vstr	s14, [sp, #12]
2401a7fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
2401a802:	eebd 7ae7 	vcvt.s32.f32	s14, s15
2401a806:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
2401a80a:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401a80e:	ed8d 7a04 	vstr	s14, [sp, #16]
2401a812:	ee67 7aa6 	vmul.f32	s15, s15, s13
2401a816:	eef5 7a40 	vcmp.f32	s15, #0.0
2401a81a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401a81e:	edcd 7a05 	vstr	s15, [sp, #20]
2401a822:	d11e      	bne.n	2401a862 <__ieee754_rem_pio2f+0x21a>
2401a824:	eeb5 7a40 	vcmp.f32	s14, #0.0
2401a828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401a82c:	bf14      	ite	ne
2401a82e:	2302      	movne	r3, #2
2401a830:	2301      	moveq	r3, #1
2401a832:	491a      	ldr	r1, [pc, #104]	; (2401a89c <__ieee754_rem_pio2f+0x254>)
2401a834:	9101      	str	r1, [sp, #4]
2401a836:	2102      	movs	r1, #2
2401a838:	9100      	str	r1, [sp, #0]
2401a83a:	a803      	add	r0, sp, #12
2401a83c:	4621      	mov	r1, r4
2401a83e:	f000 fec9 	bl	2401b5d4 <__kernel_rem_pio2f>
2401a842:	2e00      	cmp	r6, #0
2401a844:	f6bf af31 	bge.w	2401a6aa <__ieee754_rem_pio2f+0x62>
2401a848:	edd4 7a00 	vldr	s15, [r4]
2401a84c:	eef1 7a67 	vneg.f32	s15, s15
2401a850:	edc4 7a00 	vstr	s15, [r4]
2401a854:	edd4 7a01 	vldr	s15, [r4, #4]
2401a858:	eef1 7a67 	vneg.f32	s15, s15
2401a85c:	edc4 7a01 	vstr	s15, [r4, #4]
2401a860:	e77a      	b.n	2401a758 <__ieee754_rem_pio2f+0x110>
2401a862:	2303      	movs	r3, #3
2401a864:	e7e5      	b.n	2401a832 <__ieee754_rem_pio2f+0x1ea>
2401a866:	bf00      	nop
2401a868:	3f490fd8 	.word	0x3f490fd8
2401a86c:	4016cbe3 	.word	0x4016cbe3
2401a870:	3fc90f80 	.word	0x3fc90f80
2401a874:	3fc90fd0 	.word	0x3fc90fd0
2401a878:	37354400 	.word	0x37354400
2401a87c:	37354443 	.word	0x37354443
2401a880:	2e85a308 	.word	0x2e85a308
2401a884:	43490f80 	.word	0x43490f80
2401a888:	3f22f984 	.word	0x3f22f984
2401a88c:	240278f8 	.word	0x240278f8
2401a890:	2e85a300 	.word	0x2e85a300
2401a894:	248d3132 	.word	0x248d3132
2401a898:	43800000 	.word	0x43800000
2401a89c:	24027978 	.word	0x24027978

2401a8a0 <__ieee754_rem_pio2>:
2401a8a0:	b570      	push	{r4, r5, r6, lr}
2401a8a2:	eeb0 7b40 	vmov.f64	d7, d0
2401a8a6:	ee17 5a90 	vmov	r5, s15
2401a8aa:	4b99      	ldr	r3, [pc, #612]	; (2401ab10 <__ieee754_rem_pio2+0x270>)
2401a8ac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
2401a8b0:	429e      	cmp	r6, r3
2401a8b2:	b088      	sub	sp, #32
2401a8b4:	4604      	mov	r4, r0
2401a8b6:	dc07      	bgt.n	2401a8c8 <__ieee754_rem_pio2+0x28>
2401a8b8:	2200      	movs	r2, #0
2401a8ba:	2300      	movs	r3, #0
2401a8bc:	ed84 0b00 	vstr	d0, [r4]
2401a8c0:	e9c0 2302 	strd	r2, r3, [r0, #8]
2401a8c4:	2000      	movs	r0, #0
2401a8c6:	e01b      	b.n	2401a900 <__ieee754_rem_pio2+0x60>
2401a8c8:	4b92      	ldr	r3, [pc, #584]	; (2401ab14 <__ieee754_rem_pio2+0x274>)
2401a8ca:	429e      	cmp	r6, r3
2401a8cc:	dc3b      	bgt.n	2401a946 <__ieee754_rem_pio2+0xa6>
2401a8ce:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
2401a8d2:	2d00      	cmp	r5, #0
2401a8d4:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 2401aad0 <__ieee754_rem_pio2+0x230>
2401a8d8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
2401a8dc:	dd19      	ble.n	2401a912 <__ieee754_rem_pio2+0x72>
2401a8de:	ee30 7b46 	vsub.f64	d7, d0, d6
2401a8e2:	429e      	cmp	r6, r3
2401a8e4:	d00e      	beq.n	2401a904 <__ieee754_rem_pio2+0x64>
2401a8e6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 2401aad8 <__ieee754_rem_pio2+0x238>
2401a8ea:	ee37 5b46 	vsub.f64	d5, d7, d6
2401a8ee:	ee37 7b45 	vsub.f64	d7, d7, d5
2401a8f2:	ed84 5b00 	vstr	d5, [r4]
2401a8f6:	ee37 7b46 	vsub.f64	d7, d7, d6
2401a8fa:	ed84 7b02 	vstr	d7, [r4, #8]
2401a8fe:	2001      	movs	r0, #1
2401a900:	b008      	add	sp, #32
2401a902:	bd70      	pop	{r4, r5, r6, pc}
2401a904:	ed9f 6b76 	vldr	d6, [pc, #472]	; 2401aae0 <__ieee754_rem_pio2+0x240>
2401a908:	ee37 7b46 	vsub.f64	d7, d7, d6
2401a90c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 2401aae8 <__ieee754_rem_pio2+0x248>
2401a910:	e7eb      	b.n	2401a8ea <__ieee754_rem_pio2+0x4a>
2401a912:	429e      	cmp	r6, r3
2401a914:	ee30 7b06 	vadd.f64	d7, d0, d6
2401a918:	d00e      	beq.n	2401a938 <__ieee754_rem_pio2+0x98>
2401a91a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 2401aad8 <__ieee754_rem_pio2+0x238>
2401a91e:	ee37 5b06 	vadd.f64	d5, d7, d6
2401a922:	ee37 7b45 	vsub.f64	d7, d7, d5
2401a926:	ed84 5b00 	vstr	d5, [r4]
2401a92a:	ee37 7b06 	vadd.f64	d7, d7, d6
2401a92e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
2401a932:	ed84 7b02 	vstr	d7, [r4, #8]
2401a936:	e7e3      	b.n	2401a900 <__ieee754_rem_pio2+0x60>
2401a938:	ed9f 6b69 	vldr	d6, [pc, #420]	; 2401aae0 <__ieee754_rem_pio2+0x240>
2401a93c:	ee37 7b06 	vadd.f64	d7, d7, d6
2401a940:	ed9f 6b69 	vldr	d6, [pc, #420]	; 2401aae8 <__ieee754_rem_pio2+0x248>
2401a944:	e7eb      	b.n	2401a91e <__ieee754_rem_pio2+0x7e>
2401a946:	4b74      	ldr	r3, [pc, #464]	; (2401ab18 <__ieee754_rem_pio2+0x278>)
2401a948:	429e      	cmp	r6, r3
2401a94a:	dc70      	bgt.n	2401aa2e <__ieee754_rem_pio2+0x18e>
2401a94c:	f000 fdb8 	bl	2401b4c0 <fabs>
2401a950:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
2401a954:	ed9f 6b66 	vldr	d6, [pc, #408]	; 2401aaf0 <__ieee754_rem_pio2+0x250>
2401a958:	eea0 7b06 	vfma.f64	d7, d0, d6
2401a95c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
2401a960:	eeb8 5be7 	vcvt.f64.s32	d5, s15
2401a964:	ee17 0a90 	vmov	r0, s15
2401a968:	eeb1 4b45 	vneg.f64	d4, d5
2401a96c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 2401aad0 <__ieee754_rem_pio2+0x230>
2401a970:	eea5 0b47 	vfms.f64	d0, d5, d7
2401a974:	ed9f 7b58 	vldr	d7, [pc, #352]	; 2401aad8 <__ieee754_rem_pio2+0x238>
2401a978:	281f      	cmp	r0, #31
2401a97a:	ee25 7b07 	vmul.f64	d7, d5, d7
2401a97e:	ee30 6b47 	vsub.f64	d6, d0, d7
2401a982:	dc08      	bgt.n	2401a996 <__ieee754_rem_pio2+0xf6>
2401a984:	4b65      	ldr	r3, [pc, #404]	; (2401ab1c <__ieee754_rem_pio2+0x27c>)
2401a986:	1e42      	subs	r2, r0, #1
2401a988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2401a98c:	42b3      	cmp	r3, r6
2401a98e:	d002      	beq.n	2401a996 <__ieee754_rem_pio2+0xf6>
2401a990:	ed84 6b00 	vstr	d6, [r4]
2401a994:	e024      	b.n	2401a9e0 <__ieee754_rem_pio2+0x140>
2401a996:	ee16 3a90 	vmov	r3, s13
2401a99a:	f3c3 530a 	ubfx	r3, r3, #20, #11
2401a99e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
2401a9a2:	2b10      	cmp	r3, #16
2401a9a4:	ea4f 5226 	mov.w	r2, r6, asr #20
2401a9a8:	ddf2      	ble.n	2401a990 <__ieee754_rem_pio2+0xf0>
2401a9aa:	eeb0 6b40 	vmov.f64	d6, d0
2401a9ae:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 2401aae0 <__ieee754_rem_pio2+0x240>
2401a9b2:	eea4 6b03 	vfma.f64	d6, d4, d3
2401a9b6:	ee30 7b46 	vsub.f64	d7, d0, d6
2401a9ba:	eea4 7b03 	vfma.f64	d7, d4, d3
2401a9be:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 2401aae8 <__ieee754_rem_pio2+0x248>
2401a9c2:	ee95 7b03 	vfnms.f64	d7, d5, d3
2401a9c6:	ee36 3b47 	vsub.f64	d3, d6, d7
2401a9ca:	ee13 3a90 	vmov	r3, s7
2401a9ce:	f3c3 530a 	ubfx	r3, r3, #20, #11
2401a9d2:	1ad3      	subs	r3, r2, r3
2401a9d4:	2b31      	cmp	r3, #49	; 0x31
2401a9d6:	dc17      	bgt.n	2401aa08 <__ieee754_rem_pio2+0x168>
2401a9d8:	eeb0 0b46 	vmov.f64	d0, d6
2401a9dc:	ed84 3b00 	vstr	d3, [r4]
2401a9e0:	ed94 6b00 	vldr	d6, [r4]
2401a9e4:	2d00      	cmp	r5, #0
2401a9e6:	ee30 0b46 	vsub.f64	d0, d0, d6
2401a9ea:	ee30 0b47 	vsub.f64	d0, d0, d7
2401a9ee:	ed84 0b02 	vstr	d0, [r4, #8]
2401a9f2:	da85      	bge.n	2401a900 <__ieee754_rem_pio2+0x60>
2401a9f4:	eeb1 6b46 	vneg.f64	d6, d6
2401a9f8:	eeb1 0b40 	vneg.f64	d0, d0
2401a9fc:	ed84 6b00 	vstr	d6, [r4]
2401aa00:	ed84 0b02 	vstr	d0, [r4, #8]
2401aa04:	4240      	negs	r0, r0
2401aa06:	e77b      	b.n	2401a900 <__ieee754_rem_pio2+0x60>
2401aa08:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 2401aaf8 <__ieee754_rem_pio2+0x258>
2401aa0c:	eeb0 0b46 	vmov.f64	d0, d6
2401aa10:	eea4 0b07 	vfma.f64	d0, d4, d7
2401aa14:	ee36 6b40 	vsub.f64	d6, d6, d0
2401aa18:	eea4 6b07 	vfma.f64	d6, d4, d7
2401aa1c:	ed9f 4b38 	vldr	d4, [pc, #224]	; 2401ab00 <__ieee754_rem_pio2+0x260>
2401aa20:	eeb0 7b46 	vmov.f64	d7, d6
2401aa24:	ee95 7b04 	vfnms.f64	d7, d5, d4
2401aa28:	ee30 6b47 	vsub.f64	d6, d0, d7
2401aa2c:	e7b0      	b.n	2401a990 <__ieee754_rem_pio2+0xf0>
2401aa2e:	4b3c      	ldr	r3, [pc, #240]	; (2401ab20 <__ieee754_rem_pio2+0x280>)
2401aa30:	429e      	cmp	r6, r3
2401aa32:	dd06      	ble.n	2401aa42 <__ieee754_rem_pio2+0x1a2>
2401aa34:	ee30 7b40 	vsub.f64	d7, d0, d0
2401aa38:	ed80 7b02 	vstr	d7, [r0, #8]
2401aa3c:	ed80 7b00 	vstr	d7, [r0]
2401aa40:	e740      	b.n	2401a8c4 <__ieee754_rem_pio2+0x24>
2401aa42:	1532      	asrs	r2, r6, #20
2401aa44:	ee10 0a10 	vmov	r0, s0
2401aa48:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
2401aa4c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
2401aa50:	ec41 0b17 	vmov	d7, r0, r1
2401aa54:	eebd 6bc7 	vcvt.s32.f64	s12, d7
2401aa58:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 2401ab08 <__ieee754_rem_pio2+0x268>
2401aa5c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
2401aa60:	ee37 7b46 	vsub.f64	d7, d7, d6
2401aa64:	ed8d 6b02 	vstr	d6, [sp, #8]
2401aa68:	ee27 7b05 	vmul.f64	d7, d7, d5
2401aa6c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
2401aa70:	a808      	add	r0, sp, #32
2401aa72:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
2401aa76:	ee37 7b46 	vsub.f64	d7, d7, d6
2401aa7a:	ed8d 6b04 	vstr	d6, [sp, #16]
2401aa7e:	ee27 7b05 	vmul.f64	d7, d7, d5
2401aa82:	ed8d 7b06 	vstr	d7, [sp, #24]
2401aa86:	2103      	movs	r1, #3
2401aa88:	ed30 7b02 	vldmdb	r0!, {d7}
2401aa8c:	eeb5 7b40 	vcmp.f64	d7, #0.0
2401aa90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401aa94:	460b      	mov	r3, r1
2401aa96:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
2401aa9a:	d0f5      	beq.n	2401aa88 <__ieee754_rem_pio2+0x1e8>
2401aa9c:	4921      	ldr	r1, [pc, #132]	; (2401ab24 <__ieee754_rem_pio2+0x284>)
2401aa9e:	9101      	str	r1, [sp, #4]
2401aaa0:	2102      	movs	r1, #2
2401aaa2:	9100      	str	r1, [sp, #0]
2401aaa4:	a802      	add	r0, sp, #8
2401aaa6:	4621      	mov	r1, r4
2401aaa8:	f000 f83e 	bl	2401ab28 <__kernel_rem_pio2>
2401aaac:	2d00      	cmp	r5, #0
2401aaae:	f6bf af27 	bge.w	2401a900 <__ieee754_rem_pio2+0x60>
2401aab2:	ed94 7b00 	vldr	d7, [r4]
2401aab6:	eeb1 7b47 	vneg.f64	d7, d7
2401aaba:	ed84 7b00 	vstr	d7, [r4]
2401aabe:	ed94 7b02 	vldr	d7, [r4, #8]
2401aac2:	eeb1 7b47 	vneg.f64	d7, d7
2401aac6:	ed84 7b02 	vstr	d7, [r4, #8]
2401aaca:	e79b      	b.n	2401aa04 <__ieee754_rem_pio2+0x164>
2401aacc:	f3af 8000 	nop.w
2401aad0:	54400000 	.word	0x54400000
2401aad4:	3ff921fb 	.word	0x3ff921fb
2401aad8:	1a626331 	.word	0x1a626331
2401aadc:	3dd0b461 	.word	0x3dd0b461
2401aae0:	1a600000 	.word	0x1a600000
2401aae4:	3dd0b461 	.word	0x3dd0b461
2401aae8:	2e037073 	.word	0x2e037073
2401aaec:	3ba3198a 	.word	0x3ba3198a
2401aaf0:	6dc9c883 	.word	0x6dc9c883
2401aaf4:	3fe45f30 	.word	0x3fe45f30
2401aaf8:	2e000000 	.word	0x2e000000
2401aafc:	3ba3198a 	.word	0x3ba3198a
2401ab00:	252049c1 	.word	0x252049c1
2401ab04:	397b839a 	.word	0x397b839a
2401ab08:	00000000 	.word	0x00000000
2401ab0c:	41700000 	.word	0x41700000
2401ab10:	3fe921fb 	.word	0x3fe921fb
2401ab14:	4002d97b 	.word	0x4002d97b
2401ab18:	413921fb 	.word	0x413921fb
2401ab1c:	24027c90 	.word	0x24027c90
2401ab20:	7fefffff 	.word	0x7fefffff
2401ab24:	24027d10 	.word	0x24027d10

2401ab28 <__kernel_rem_pio2>:
2401ab28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2401ab2c:	ed2d 8b06 	vpush	{d8-d10}
2401ab30:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
2401ab34:	460f      	mov	r7, r1
2401ab36:	9002      	str	r0, [sp, #8]
2401ab38:	49c3      	ldr	r1, [pc, #780]	; (2401ae48 <__kernel_rem_pio2+0x320>)
2401ab3a:	98a2      	ldr	r0, [sp, #648]	; 0x288
2401ab3c:	9301      	str	r3, [sp, #4]
2401ab3e:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
2401ab42:	9901      	ldr	r1, [sp, #4]
2401ab44:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
2401ab46:	f112 0f14 	cmn.w	r2, #20
2401ab4a:	bfa8      	it	ge
2401ab4c:	1ed0      	subge	r0, r2, #3
2401ab4e:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
2401ab52:	bfaa      	itet	ge
2401ab54:	2418      	movge	r4, #24
2401ab56:	2000      	movlt	r0, #0
2401ab58:	fb90 f0f4 	sdivge	r0, r0, r4
2401ab5c:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 2401ae30 <__kernel_rem_pio2+0x308>
2401ab60:	f06f 0417 	mvn.w	r4, #23
2401ab64:	fb00 4404 	mla	r4, r0, r4, r4
2401ab68:	eba0 060a 	sub.w	r6, r0, sl
2401ab6c:	4414      	add	r4, r2
2401ab6e:	eb09 0c0a 	add.w	ip, r9, sl
2401ab72:	ad1a      	add	r5, sp, #104	; 0x68
2401ab74:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
2401ab78:	2200      	movs	r2, #0
2401ab7a:	4562      	cmp	r2, ip
2401ab7c:	dd10      	ble.n	2401aba0 <__kernel_rem_pio2+0x78>
2401ab7e:	9a01      	ldr	r2, [sp, #4]
2401ab80:	a91a      	add	r1, sp, #104	; 0x68
2401ab82:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
2401ab86:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
2401ab8a:	f04f 0c00 	mov.w	ip, #0
2401ab8e:	45cc      	cmp	ip, r9
2401ab90:	dc26      	bgt.n	2401abe0 <__kernel_rem_pio2+0xb8>
2401ab92:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 2401ae30 <__kernel_rem_pio2+0x308>
2401ab96:	f8dd e008 	ldr.w	lr, [sp, #8]
2401ab9a:	4616      	mov	r6, r2
2401ab9c:	2500      	movs	r5, #0
2401ab9e:	e015      	b.n	2401abcc <__kernel_rem_pio2+0xa4>
2401aba0:	42d6      	cmn	r6, r2
2401aba2:	d409      	bmi.n	2401abb8 <__kernel_rem_pio2+0x90>
2401aba4:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
2401aba8:	ee07 1a90 	vmov	s15, r1
2401abac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
2401abb0:	eca5 7b02 	vstmia	r5!, {d7}
2401abb4:	3201      	adds	r2, #1
2401abb6:	e7e0      	b.n	2401ab7a <__kernel_rem_pio2+0x52>
2401abb8:	eeb0 7b46 	vmov.f64	d7, d6
2401abbc:	e7f8      	b.n	2401abb0 <__kernel_rem_pio2+0x88>
2401abbe:	ecbe 5b02 	vldmia	lr!, {d5}
2401abc2:	ed96 6b00 	vldr	d6, [r6]
2401abc6:	3501      	adds	r5, #1
2401abc8:	eea5 7b06 	vfma.f64	d7, d5, d6
2401abcc:	4555      	cmp	r5, sl
2401abce:	f1a6 0608 	sub.w	r6, r6, #8
2401abd2:	ddf4      	ble.n	2401abbe <__kernel_rem_pio2+0x96>
2401abd4:	eca8 7b02 	vstmia	r8!, {d7}
2401abd8:	f10c 0c01 	add.w	ip, ip, #1
2401abdc:	3208      	adds	r2, #8
2401abde:	e7d6      	b.n	2401ab8e <__kernel_rem_pio2+0x66>
2401abe0:	aa06      	add	r2, sp, #24
2401abe2:	ed9f 9b95 	vldr	d9, [pc, #596]	; 2401ae38 <__kernel_rem_pio2+0x310>
2401abe6:	ed9f ab96 	vldr	d10, [pc, #600]	; 2401ae40 <__kernel_rem_pio2+0x318>
2401abea:	eb02 0289 	add.w	r2, r2, r9, lsl #2
2401abee:	eb03 0380 	add.w	r3, r3, r0, lsl #2
2401abf2:	9204      	str	r2, [sp, #16]
2401abf4:	9303      	str	r3, [sp, #12]
2401abf6:	464d      	mov	r5, r9
2401abf8:	00eb      	lsls	r3, r5, #3
2401abfa:	9305      	str	r3, [sp, #20]
2401abfc:	ab92      	add	r3, sp, #584	; 0x248
2401abfe:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
2401ac02:	f10d 0b18 	add.w	fp, sp, #24
2401ac06:	ab6a      	add	r3, sp, #424	; 0x1a8
2401ac08:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
2401ac0c:	465e      	mov	r6, fp
2401ac0e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
2401ac12:	4628      	mov	r0, r5
2401ac14:	2800      	cmp	r0, #0
2401ac16:	f1a2 0208 	sub.w	r2, r2, #8
2401ac1a:	dc48      	bgt.n	2401acae <__kernel_rem_pio2+0x186>
2401ac1c:	4620      	mov	r0, r4
2401ac1e:	f000 fc5b 	bl	2401b4d8 <scalbn>
2401ac22:	eeb0 8b40 	vmov.f64	d8, d0
2401ac26:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
2401ac2a:	ee28 0b00 	vmul.f64	d0, d8, d0
2401ac2e:	f000 ff43 	bl	2401bab8 <floor>
2401ac32:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
2401ac36:	eea0 8b47 	vfms.f64	d8, d0, d7
2401ac3a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
2401ac3e:	2c00      	cmp	r4, #0
2401ac40:	ee17 8a90 	vmov	r8, s15
2401ac44:	eeb8 7be7 	vcvt.f64.s32	d7, s15
2401ac48:	ee38 8b47 	vsub.f64	d8, d8, d7
2401ac4c:	dd41      	ble.n	2401acd2 <__kernel_rem_pio2+0x1aa>
2401ac4e:	1e68      	subs	r0, r5, #1
2401ac50:	ab06      	add	r3, sp, #24
2401ac52:	f1c4 0c18 	rsb	ip, r4, #24
2401ac56:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
2401ac5a:	fa46 f20c 	asr.w	r2, r6, ip
2401ac5e:	4490      	add	r8, r2
2401ac60:	fa02 f20c 	lsl.w	r2, r2, ip
2401ac64:	1ab6      	subs	r6, r6, r2
2401ac66:	f1c4 0217 	rsb	r2, r4, #23
2401ac6a:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
2401ac6e:	4116      	asrs	r6, r2
2401ac70:	2e00      	cmp	r6, #0
2401ac72:	dd3d      	ble.n	2401acf0 <__kernel_rem_pio2+0x1c8>
2401ac74:	f04f 0c00 	mov.w	ip, #0
2401ac78:	f108 0801 	add.w	r8, r8, #1
2401ac7c:	4660      	mov	r0, ip
2401ac7e:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
2401ac82:	4565      	cmp	r5, ip
2401ac84:	dc6a      	bgt.n	2401ad5c <__kernel_rem_pio2+0x234>
2401ac86:	2c00      	cmp	r4, #0
2401ac88:	dd04      	ble.n	2401ac94 <__kernel_rem_pio2+0x16c>
2401ac8a:	2c01      	cmp	r4, #1
2401ac8c:	d07b      	beq.n	2401ad86 <__kernel_rem_pio2+0x25e>
2401ac8e:	2c02      	cmp	r4, #2
2401ac90:	f000 8083 	beq.w	2401ad9a <__kernel_rem_pio2+0x272>
2401ac94:	2e02      	cmp	r6, #2
2401ac96:	d12b      	bne.n	2401acf0 <__kernel_rem_pio2+0x1c8>
2401ac98:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
2401ac9c:	ee30 8b48 	vsub.f64	d8, d0, d8
2401aca0:	b330      	cbz	r0, 2401acf0 <__kernel_rem_pio2+0x1c8>
2401aca2:	4620      	mov	r0, r4
2401aca4:	f000 fc18 	bl	2401b4d8 <scalbn>
2401aca8:	ee38 8b40 	vsub.f64	d8, d8, d0
2401acac:	e020      	b.n	2401acf0 <__kernel_rem_pio2+0x1c8>
2401acae:	ee20 7b09 	vmul.f64	d7, d0, d9
2401acb2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
2401acb6:	3801      	subs	r0, #1
2401acb8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
2401acbc:	eea7 0b4a 	vfms.f64	d0, d7, d10
2401acc0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
2401acc4:	eca6 0a01 	vstmia	r6!, {s0}
2401acc8:	ed92 0b00 	vldr	d0, [r2]
2401accc:	ee37 0b00 	vadd.f64	d0, d7, d0
2401acd0:	e7a0      	b.n	2401ac14 <__kernel_rem_pio2+0xec>
2401acd2:	d105      	bne.n	2401ace0 <__kernel_rem_pio2+0x1b8>
2401acd4:	1e6a      	subs	r2, r5, #1
2401acd6:	ab06      	add	r3, sp, #24
2401acd8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
2401acdc:	15f6      	asrs	r6, r6, #23
2401acde:	e7c7      	b.n	2401ac70 <__kernel_rem_pio2+0x148>
2401ace0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
2401ace4:	eeb4 8bc7 	vcmpe.f64	d8, d7
2401ace8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401acec:	da34      	bge.n	2401ad58 <__kernel_rem_pio2+0x230>
2401acee:	2600      	movs	r6, #0
2401acf0:	eeb5 8b40 	vcmp.f64	d8, #0.0
2401acf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401acf8:	f040 80aa 	bne.w	2401ae50 <__kernel_rem_pio2+0x328>
2401acfc:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
2401ad00:	4658      	mov	r0, fp
2401ad02:	2200      	movs	r2, #0
2401ad04:	4548      	cmp	r0, r9
2401ad06:	da50      	bge.n	2401adaa <__kernel_rem_pio2+0x282>
2401ad08:	2a00      	cmp	r2, #0
2401ad0a:	d06b      	beq.n	2401ade4 <__kernel_rem_pio2+0x2bc>
2401ad0c:	ab06      	add	r3, sp, #24
2401ad0e:	3c18      	subs	r4, #24
2401ad10:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
2401ad14:	2b00      	cmp	r3, #0
2401ad16:	f000 8087 	beq.w	2401ae28 <__kernel_rem_pio2+0x300>
2401ad1a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
2401ad1e:	4620      	mov	r0, r4
2401ad20:	f000 fbda 	bl	2401b4d8 <scalbn>
2401ad24:	ed9f 6b44 	vldr	d6, [pc, #272]	; 2401ae38 <__kernel_rem_pio2+0x310>
2401ad28:	f10b 0201 	add.w	r2, fp, #1
2401ad2c:	a96a      	add	r1, sp, #424	; 0x1a8
2401ad2e:	00d3      	lsls	r3, r2, #3
2401ad30:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
2401ad34:	465a      	mov	r2, fp
2401ad36:	2a00      	cmp	r2, #0
2401ad38:	f280 80b8 	bge.w	2401aeac <__kernel_rem_pio2+0x384>
2401ad3c:	465a      	mov	r2, fp
2401ad3e:	2a00      	cmp	r2, #0
2401ad40:	f2c0 80d6 	blt.w	2401aef0 <__kernel_rem_pio2+0x3c8>
2401ad44:	a96a      	add	r1, sp, #424	; 0x1a8
2401ad46:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
2401ad4a:	ed9f 7b39 	vldr	d7, [pc, #228]	; 2401ae30 <__kernel_rem_pio2+0x308>
2401ad4e:	4d3f      	ldr	r5, [pc, #252]	; (2401ae4c <__kernel_rem_pio2+0x324>)
2401ad50:	2000      	movs	r0, #0
2401ad52:	ebab 0102 	sub.w	r1, fp, r2
2401ad56:	e0c0      	b.n	2401aeda <__kernel_rem_pio2+0x3b2>
2401ad58:	2602      	movs	r6, #2
2401ad5a:	e78b      	b.n	2401ac74 <__kernel_rem_pio2+0x14c>
2401ad5c:	f8db 2000 	ldr.w	r2, [fp]
2401ad60:	b958      	cbnz	r0, 2401ad7a <__kernel_rem_pio2+0x252>
2401ad62:	b122      	cbz	r2, 2401ad6e <__kernel_rem_pio2+0x246>
2401ad64:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
2401ad68:	f8cb 2000 	str.w	r2, [fp]
2401ad6c:	2201      	movs	r2, #1
2401ad6e:	f10c 0c01 	add.w	ip, ip, #1
2401ad72:	f10b 0b04 	add.w	fp, fp, #4
2401ad76:	4610      	mov	r0, r2
2401ad78:	e783      	b.n	2401ac82 <__kernel_rem_pio2+0x15a>
2401ad7a:	ebae 0202 	sub.w	r2, lr, r2
2401ad7e:	f8cb 2000 	str.w	r2, [fp]
2401ad82:	4602      	mov	r2, r0
2401ad84:	e7f3      	b.n	2401ad6e <__kernel_rem_pio2+0x246>
2401ad86:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
2401ad8a:	ab06      	add	r3, sp, #24
2401ad8c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
2401ad90:	f3c2 0216 	ubfx	r2, r2, #0, #23
2401ad94:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
2401ad98:	e77c      	b.n	2401ac94 <__kernel_rem_pio2+0x16c>
2401ad9a:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
2401ad9e:	ab06      	add	r3, sp, #24
2401ada0:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
2401ada4:	f3c2 0215 	ubfx	r2, r2, #0, #22
2401ada8:	e7f4      	b.n	2401ad94 <__kernel_rem_pio2+0x26c>
2401adaa:	ab06      	add	r3, sp, #24
2401adac:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
2401adb0:	3801      	subs	r0, #1
2401adb2:	431a      	orrs	r2, r3
2401adb4:	e7a6      	b.n	2401ad04 <__kernel_rem_pio2+0x1dc>
2401adb6:	3201      	adds	r2, #1
2401adb8:	f850 6d04 	ldr.w	r6, [r0, #-4]!
2401adbc:	2e00      	cmp	r6, #0
2401adbe:	d0fa      	beq.n	2401adb6 <__kernel_rem_pio2+0x28e>
2401adc0:	9b05      	ldr	r3, [sp, #20]
2401adc2:	f503 7312 	add.w	r3, r3, #584	; 0x248
2401adc6:	eb0d 0003 	add.w	r0, sp, r3
2401adca:	9b01      	ldr	r3, [sp, #4]
2401adcc:	18ee      	adds	r6, r5, r3
2401adce:	ab1a      	add	r3, sp, #104	; 0x68
2401add0:	f105 0c01 	add.w	ip, r5, #1
2401add4:	3898      	subs	r0, #152	; 0x98
2401add6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
2401adda:	442a      	add	r2, r5
2401addc:	4562      	cmp	r2, ip
2401adde:	da04      	bge.n	2401adea <__kernel_rem_pio2+0x2c2>
2401ade0:	4615      	mov	r5, r2
2401ade2:	e709      	b.n	2401abf8 <__kernel_rem_pio2+0xd0>
2401ade4:	9804      	ldr	r0, [sp, #16]
2401ade6:	2201      	movs	r2, #1
2401ade8:	e7e6      	b.n	2401adb8 <__kernel_rem_pio2+0x290>
2401adea:	9b03      	ldr	r3, [sp, #12]
2401adec:	f8dd e008 	ldr.w	lr, [sp, #8]
2401adf0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
2401adf4:	9305      	str	r3, [sp, #20]
2401adf6:	ee07 3a90 	vmov	s15, r3
2401adfa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
2401adfe:	2500      	movs	r5, #0
2401ae00:	eca6 7b02 	vstmia	r6!, {d7}
2401ae04:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 2401ae30 <__kernel_rem_pio2+0x308>
2401ae08:	46b0      	mov	r8, r6
2401ae0a:	4555      	cmp	r5, sl
2401ae0c:	dd04      	ble.n	2401ae18 <__kernel_rem_pio2+0x2f0>
2401ae0e:	eca0 7b02 	vstmia	r0!, {d7}
2401ae12:	f10c 0c01 	add.w	ip, ip, #1
2401ae16:	e7e1      	b.n	2401addc <__kernel_rem_pio2+0x2b4>
2401ae18:	ecbe 5b02 	vldmia	lr!, {d5}
2401ae1c:	ed38 6b02 	vldmdb	r8!, {d6}
2401ae20:	3501      	adds	r5, #1
2401ae22:	eea5 7b06 	vfma.f64	d7, d5, d6
2401ae26:	e7f0      	b.n	2401ae0a <__kernel_rem_pio2+0x2e2>
2401ae28:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
2401ae2c:	e76e      	b.n	2401ad0c <__kernel_rem_pio2+0x1e4>
2401ae2e:	bf00      	nop
	...
2401ae3c:	3e700000 	.word	0x3e700000
2401ae40:	00000000 	.word	0x00000000
2401ae44:	41700000 	.word	0x41700000
2401ae48:	24027f80 	.word	0x24027f80
2401ae4c:	24027f40 	.word	0x24027f40
2401ae50:	4260      	negs	r0, r4
2401ae52:	eeb0 0b48 	vmov.f64	d0, d8
2401ae56:	f000 fb3f 	bl	2401b4d8 <scalbn>
2401ae5a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 2401b038 <__kernel_rem_pio2+0x510>
2401ae5e:	eeb4 0bc6 	vcmpe.f64	d0, d6
2401ae62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401ae66:	db18      	blt.n	2401ae9a <__kernel_rem_pio2+0x372>
2401ae68:	ed9f 7b75 	vldr	d7, [pc, #468]	; 2401b040 <__kernel_rem_pio2+0x518>
2401ae6c:	ee20 7b07 	vmul.f64	d7, d0, d7
2401ae70:	eebd 7bc7 	vcvt.s32.f64	s14, d7
2401ae74:	aa06      	add	r2, sp, #24
2401ae76:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
2401ae7a:	eea5 0b46 	vfms.f64	d0, d5, d6
2401ae7e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
2401ae82:	f105 0b01 	add.w	fp, r5, #1
2401ae86:	ee10 3a10 	vmov	r3, s0
2401ae8a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
2401ae8e:	ee17 3a10 	vmov	r3, s14
2401ae92:	3418      	adds	r4, #24
2401ae94:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
2401ae98:	e73f      	b.n	2401ad1a <__kernel_rem_pio2+0x1f2>
2401ae9a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
2401ae9e:	aa06      	add	r2, sp, #24
2401aea0:	ee10 3a10 	vmov	r3, s0
2401aea4:	46ab      	mov	fp, r5
2401aea6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
2401aeaa:	e736      	b.n	2401ad1a <__kernel_rem_pio2+0x1f2>
2401aeac:	a806      	add	r0, sp, #24
2401aeae:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
2401aeb2:	9001      	str	r0, [sp, #4]
2401aeb4:	ee07 0a90 	vmov	s15, r0
2401aeb8:	3a01      	subs	r2, #1
2401aeba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
2401aebe:	ee27 7b00 	vmul.f64	d7, d7, d0
2401aec2:	ee20 0b06 	vmul.f64	d0, d0, d6
2401aec6:	ed21 7b02 	vstmdb	r1!, {d7}
2401aeca:	e734      	b.n	2401ad36 <__kernel_rem_pio2+0x20e>
2401aecc:	ecb5 5b02 	vldmia	r5!, {d5}
2401aed0:	ecb4 6b02 	vldmia	r4!, {d6}
2401aed4:	3001      	adds	r0, #1
2401aed6:	eea5 7b06 	vfma.f64	d7, d5, d6
2401aeda:	4548      	cmp	r0, r9
2401aedc:	dc01      	bgt.n	2401aee2 <__kernel_rem_pio2+0x3ba>
2401aede:	4288      	cmp	r0, r1
2401aee0:	ddf4      	ble.n	2401aecc <__kernel_rem_pio2+0x3a4>
2401aee2:	a842      	add	r0, sp, #264	; 0x108
2401aee4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
2401aee8:	ed81 7b00 	vstr	d7, [r1]
2401aeec:	3a01      	subs	r2, #1
2401aeee:	e726      	b.n	2401ad3e <__kernel_rem_pio2+0x216>
2401aef0:	9aa2      	ldr	r2, [sp, #648]	; 0x288
2401aef2:	2a02      	cmp	r2, #2
2401aef4:	dc0a      	bgt.n	2401af0c <__kernel_rem_pio2+0x3e4>
2401aef6:	2a00      	cmp	r2, #0
2401aef8:	dc2e      	bgt.n	2401af58 <__kernel_rem_pio2+0x430>
2401aefa:	d047      	beq.n	2401af8c <__kernel_rem_pio2+0x464>
2401aefc:	f008 0007 	and.w	r0, r8, #7
2401af00:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
2401af04:	ecbd 8b06 	vpop	{d8-d10}
2401af08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2401af0c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
2401af0e:	2a03      	cmp	r2, #3
2401af10:	d1f4      	bne.n	2401aefc <__kernel_rem_pio2+0x3d4>
2401af12:	a942      	add	r1, sp, #264	; 0x108
2401af14:	f1a3 0208 	sub.w	r2, r3, #8
2401af18:	440a      	add	r2, r1
2401af1a:	4611      	mov	r1, r2
2401af1c:	4658      	mov	r0, fp
2401af1e:	2800      	cmp	r0, #0
2401af20:	f1a1 0108 	sub.w	r1, r1, #8
2401af24:	dc55      	bgt.n	2401afd2 <__kernel_rem_pio2+0x4aa>
2401af26:	4659      	mov	r1, fp
2401af28:	2901      	cmp	r1, #1
2401af2a:	f1a2 0208 	sub.w	r2, r2, #8
2401af2e:	dc60      	bgt.n	2401aff2 <__kernel_rem_pio2+0x4ca>
2401af30:	ed9f 7b45 	vldr	d7, [pc, #276]	; 2401b048 <__kernel_rem_pio2+0x520>
2401af34:	aa42      	add	r2, sp, #264	; 0x108
2401af36:	4413      	add	r3, r2
2401af38:	f1bb 0f01 	cmp.w	fp, #1
2401af3c:	dc69      	bgt.n	2401b012 <__kernel_rem_pio2+0x4ea>
2401af3e:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
2401af42:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
2401af46:	2e00      	cmp	r6, #0
2401af48:	d16a      	bne.n	2401b020 <__kernel_rem_pio2+0x4f8>
2401af4a:	ed87 5b00 	vstr	d5, [r7]
2401af4e:	ed87 6b02 	vstr	d6, [r7, #8]
2401af52:	ed87 7b04 	vstr	d7, [r7, #16]
2401af56:	e7d1      	b.n	2401aefc <__kernel_rem_pio2+0x3d4>
2401af58:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 2401b048 <__kernel_rem_pio2+0x520>
2401af5c:	aa42      	add	r2, sp, #264	; 0x108
2401af5e:	4413      	add	r3, r2
2401af60:	465a      	mov	r2, fp
2401af62:	2a00      	cmp	r2, #0
2401af64:	da26      	bge.n	2401afb4 <__kernel_rem_pio2+0x48c>
2401af66:	b35e      	cbz	r6, 2401afc0 <__kernel_rem_pio2+0x498>
2401af68:	eeb1 7b46 	vneg.f64	d7, d6
2401af6c:	ed87 7b00 	vstr	d7, [r7]
2401af70:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
2401af74:	aa44      	add	r2, sp, #272	; 0x110
2401af76:	2301      	movs	r3, #1
2401af78:	ee37 7b46 	vsub.f64	d7, d7, d6
2401af7c:	459b      	cmp	fp, r3
2401af7e:	da22      	bge.n	2401afc6 <__kernel_rem_pio2+0x49e>
2401af80:	b10e      	cbz	r6, 2401af86 <__kernel_rem_pio2+0x45e>
2401af82:	eeb1 7b47 	vneg.f64	d7, d7
2401af86:	ed87 7b02 	vstr	d7, [r7, #8]
2401af8a:	e7b7      	b.n	2401aefc <__kernel_rem_pio2+0x3d4>
2401af8c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 2401b048 <__kernel_rem_pio2+0x520>
2401af90:	aa42      	add	r2, sp, #264	; 0x108
2401af92:	4413      	add	r3, r2
2401af94:	f1bb 0f00 	cmp.w	fp, #0
2401af98:	da05      	bge.n	2401afa6 <__kernel_rem_pio2+0x47e>
2401af9a:	b10e      	cbz	r6, 2401afa0 <__kernel_rem_pio2+0x478>
2401af9c:	eeb1 7b47 	vneg.f64	d7, d7
2401afa0:	ed87 7b00 	vstr	d7, [r7]
2401afa4:	e7aa      	b.n	2401aefc <__kernel_rem_pio2+0x3d4>
2401afa6:	ed33 6b02 	vldmdb	r3!, {d6}
2401afaa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
2401afae:	ee37 7b06 	vadd.f64	d7, d7, d6
2401afb2:	e7ef      	b.n	2401af94 <__kernel_rem_pio2+0x46c>
2401afb4:	ed33 7b02 	vldmdb	r3!, {d7}
2401afb8:	3a01      	subs	r2, #1
2401afba:	ee36 6b07 	vadd.f64	d6, d6, d7
2401afbe:	e7d0      	b.n	2401af62 <__kernel_rem_pio2+0x43a>
2401afc0:	eeb0 7b46 	vmov.f64	d7, d6
2401afc4:	e7d2      	b.n	2401af6c <__kernel_rem_pio2+0x444>
2401afc6:	ecb2 6b02 	vldmia	r2!, {d6}
2401afca:	3301      	adds	r3, #1
2401afcc:	ee37 7b06 	vadd.f64	d7, d7, d6
2401afd0:	e7d4      	b.n	2401af7c <__kernel_rem_pio2+0x454>
2401afd2:	ed91 7b00 	vldr	d7, [r1]
2401afd6:	ed91 5b02 	vldr	d5, [r1, #8]
2401afda:	3801      	subs	r0, #1
2401afdc:	ee37 6b05 	vadd.f64	d6, d7, d5
2401afe0:	ee37 7b46 	vsub.f64	d7, d7, d6
2401afe4:	ed81 6b00 	vstr	d6, [r1]
2401afe8:	ee37 7b05 	vadd.f64	d7, d7, d5
2401afec:	ed81 7b02 	vstr	d7, [r1, #8]
2401aff0:	e795      	b.n	2401af1e <__kernel_rem_pio2+0x3f6>
2401aff2:	ed92 7b00 	vldr	d7, [r2]
2401aff6:	ed92 5b02 	vldr	d5, [r2, #8]
2401affa:	3901      	subs	r1, #1
2401affc:	ee37 6b05 	vadd.f64	d6, d7, d5
2401b000:	ee37 7b46 	vsub.f64	d7, d7, d6
2401b004:	ed82 6b00 	vstr	d6, [r2]
2401b008:	ee37 7b05 	vadd.f64	d7, d7, d5
2401b00c:	ed82 7b02 	vstr	d7, [r2, #8]
2401b010:	e78a      	b.n	2401af28 <__kernel_rem_pio2+0x400>
2401b012:	ed33 6b02 	vldmdb	r3!, {d6}
2401b016:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
2401b01a:	ee37 7b06 	vadd.f64	d7, d7, d6
2401b01e:	e78b      	b.n	2401af38 <__kernel_rem_pio2+0x410>
2401b020:	eeb1 5b45 	vneg.f64	d5, d5
2401b024:	eeb1 6b46 	vneg.f64	d6, d6
2401b028:	ed87 5b00 	vstr	d5, [r7]
2401b02c:	eeb1 7b47 	vneg.f64	d7, d7
2401b030:	ed87 6b02 	vstr	d6, [r7, #8]
2401b034:	e78d      	b.n	2401af52 <__kernel_rem_pio2+0x42a>
2401b036:	bf00      	nop
2401b038:	00000000 	.word	0x00000000
2401b03c:	41700000 	.word	0x41700000
2401b040:	00000000 	.word	0x00000000
2401b044:	3e700000 	.word	0x3e700000
	...

2401b050 <__kernel_tan>:
2401b050:	eeb0 7b40 	vmov.f64	d7, d0
2401b054:	ee17 3a90 	vmov	r3, s15
2401b058:	4989      	ldr	r1, [pc, #548]	; (2401b280 <__kernel_tan+0x230>)
2401b05a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
2401b05e:	428a      	cmp	r2, r1
2401b060:	b510      	push	{r4, lr}
2401b062:	dc33      	bgt.n	2401b0cc <__kernel_tan+0x7c>
2401b064:	eefd 6bc0 	vcvt.s32.f64	s13, d0
2401b068:	ee16 1a90 	vmov	r1, s13
2401b06c:	2900      	cmp	r1, #0
2401b06e:	d143      	bne.n	2401b0f8 <__kernel_tan+0xa8>
2401b070:	ee10 4a10 	vmov	r4, s0
2401b074:	1c43      	adds	r3, r0, #1
2401b076:	4323      	orrs	r3, r4
2401b078:	4313      	orrs	r3, r2
2401b07a:	d108      	bne.n	2401b08e <__kernel_tan+0x3e>
2401b07c:	f000 fa20 	bl	2401b4c0 <fabs>
2401b080:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
2401b084:	ee86 7b00 	vdiv.f64	d7, d6, d0
2401b088:	eeb0 0b47 	vmov.f64	d0, d7
2401b08c:	bd10      	pop	{r4, pc}
2401b08e:	2801      	cmp	r0, #1
2401b090:	d0fa      	beq.n	2401b088 <__kernel_tan+0x38>
2401b092:	ee30 6b01 	vadd.f64	d6, d0, d1
2401b096:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
2401b09a:	ec53 2b16 	vmov	r2, r3, d6
2401b09e:	ee87 3b06 	vdiv.f64	d3, d7, d6
2401b0a2:	460a      	mov	r2, r1
2401b0a4:	ec43 2b15 	vmov	d5, r2, r3
2401b0a8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
2401b0ac:	ec53 2b13 	vmov	r2, r3, d3
2401b0b0:	ee35 4b40 	vsub.f64	d4, d5, d0
2401b0b4:	460a      	mov	r2, r1
2401b0b6:	ec43 2b17 	vmov	d7, r2, r3
2401b0ba:	ee31 4b44 	vsub.f64	d4, d1, d4
2401b0be:	eea5 6b07 	vfma.f64	d6, d5, d7
2401b0c2:	eea4 6b07 	vfma.f64	d6, d4, d7
2401b0c6:	eea6 7b03 	vfma.f64	d7, d6, d3
2401b0ca:	e7dd      	b.n	2401b088 <__kernel_tan+0x38>
2401b0cc:	496d      	ldr	r1, [pc, #436]	; (2401b284 <__kernel_tan+0x234>)
2401b0ce:	428a      	cmp	r2, r1
2401b0d0:	dd12      	ble.n	2401b0f8 <__kernel_tan+0xa8>
2401b0d2:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 2401b200 <__kernel_tan+0x1b0>
2401b0d6:	2b00      	cmp	r3, #0
2401b0d8:	bfb8      	it	lt
2401b0da:	eeb1 7b40 	vneglt.f64	d7, d0
2401b0de:	ee36 6b47 	vsub.f64	d6, d6, d7
2401b0e2:	ed9f 7b49 	vldr	d7, [pc, #292]	; 2401b208 <__kernel_tan+0x1b8>
2401b0e6:	bfb8      	it	lt
2401b0e8:	eeb1 1b41 	vneglt.f64	d1, d1
2401b0ec:	ee37 7b41 	vsub.f64	d7, d7, d1
2401b0f0:	ed9f 1b47 	vldr	d1, [pc, #284]	; 2401b210 <__kernel_tan+0x1c0>
2401b0f4:	ee37 7b06 	vadd.f64	d7, d7, d6
2401b0f8:	ee27 5b07 	vmul.f64	d5, d7, d7
2401b0fc:	ed9f 3b46 	vldr	d3, [pc, #280]	; 2401b218 <__kernel_tan+0x1c8>
2401b100:	ee25 6b05 	vmul.f64	d6, d5, d5
2401b104:	ed9f 4b46 	vldr	d4, [pc, #280]	; 2401b220 <__kernel_tan+0x1d0>
2401b108:	eea6 4b03 	vfma.f64	d4, d6, d3
2401b10c:	ed9f 3b46 	vldr	d3, [pc, #280]	; 2401b228 <__kernel_tan+0x1d8>
2401b110:	eea4 3b06 	vfma.f64	d3, d4, d6
2401b114:	ed9f 4b46 	vldr	d4, [pc, #280]	; 2401b230 <__kernel_tan+0x1e0>
2401b118:	eea3 4b06 	vfma.f64	d4, d3, d6
2401b11c:	ed9f 3b46 	vldr	d3, [pc, #280]	; 2401b238 <__kernel_tan+0x1e8>
2401b120:	eea4 3b06 	vfma.f64	d3, d4, d6
2401b124:	ed9f 4b46 	vldr	d4, [pc, #280]	; 2401b240 <__kernel_tan+0x1f0>
2401b128:	ed9f 2b47 	vldr	d2, [pc, #284]	; 2401b248 <__kernel_tan+0x1f8>
2401b12c:	eea3 4b06 	vfma.f64	d4, d3, d6
2401b130:	ed9f 3b47 	vldr	d3, [pc, #284]	; 2401b250 <__kernel_tan+0x200>
2401b134:	eea6 3b02 	vfma.f64	d3, d6, d2
2401b138:	ed9f 2b47 	vldr	d2, [pc, #284]	; 2401b258 <__kernel_tan+0x208>
2401b13c:	eea3 2b06 	vfma.f64	d2, d3, d6
2401b140:	ed9f 3b47 	vldr	d3, [pc, #284]	; 2401b260 <__kernel_tan+0x210>
2401b144:	eea2 3b06 	vfma.f64	d3, d2, d6
2401b148:	ed9f 2b47 	vldr	d2, [pc, #284]	; 2401b268 <__kernel_tan+0x218>
2401b14c:	eea3 2b06 	vfma.f64	d2, d3, d6
2401b150:	ed9f 3b47 	vldr	d3, [pc, #284]	; 2401b270 <__kernel_tan+0x220>
2401b154:	494b      	ldr	r1, [pc, #300]	; (2401b284 <__kernel_tan+0x234>)
2401b156:	eea2 3b06 	vfma.f64	d3, d2, d6
2401b15a:	ee27 2b05 	vmul.f64	d2, d7, d5
2401b15e:	eeb0 6b44 	vmov.f64	d6, d4
2401b162:	eeb0 4b41 	vmov.f64	d4, d1
2401b166:	eea3 6b05 	vfma.f64	d6, d3, d5
2401b16a:	eea6 4b02 	vfma.f64	d4, d6, d2
2401b16e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 2401b278 <__kernel_tan+0x228>
2401b172:	eea4 1b05 	vfma.f64	d1, d4, d5
2401b176:	428a      	cmp	r2, r1
2401b178:	eea2 1b06 	vfma.f64	d1, d2, d6
2401b17c:	ee37 5b01 	vadd.f64	d5, d7, d1
2401b180:	dd1d      	ble.n	2401b1be <__kernel_tan+0x16e>
2401b182:	ee25 3b05 	vmul.f64	d3, d5, d5
2401b186:	179b      	asrs	r3, r3, #30
2401b188:	ee06 0a90 	vmov	s13, r0
2401b18c:	f003 0302 	and.w	r3, r3, #2
2401b190:	f1c3 0301 	rsb	r3, r3, #1
2401b194:	eeb8 6be6 	vcvt.f64.s32	d6, s13
2401b198:	ee35 5b06 	vadd.f64	d5, d5, d6
2401b19c:	ee83 4b05 	vdiv.f64	d4, d3, d5
2401b1a0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
2401b1a4:	ee34 4b41 	vsub.f64	d4, d4, d1
2401b1a8:	ee37 7b44 	vsub.f64	d7, d7, d4
2401b1ac:	eea7 6b45 	vfms.f64	d6, d7, d5
2401b1b0:	ee07 3a90 	vmov	s15, r3
2401b1b4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
2401b1b8:	ee27 7b06 	vmul.f64	d7, d7, d6
2401b1bc:	e764      	b.n	2401b088 <__kernel_tan+0x38>
2401b1be:	2801      	cmp	r0, #1
2401b1c0:	d01a      	beq.n	2401b1f8 <__kernel_tan+0x1a8>
2401b1c2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
2401b1c6:	ec51 0b15 	vmov	r0, r1, d5
2401b1ca:	2000      	movs	r0, #0
2401b1cc:	ec41 0b13 	vmov	d3, r0, r1
2401b1d0:	ee33 7b47 	vsub.f64	d7, d3, d7
2401b1d4:	ee31 1b47 	vsub.f64	d1, d1, d7
2401b1d8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
2401b1dc:	ee87 4b05 	vdiv.f64	d4, d7, d5
2401b1e0:	ec53 2b14 	vmov	r2, r3, d4
2401b1e4:	4602      	mov	r2, r0
2401b1e6:	ec43 2b17 	vmov	d7, r2, r3
2401b1ea:	eea3 6b07 	vfma.f64	d6, d3, d7
2401b1ee:	eea1 6b07 	vfma.f64	d6, d1, d7
2401b1f2:	eea6 7b04 	vfma.f64	d7, d6, d4
2401b1f6:	e747      	b.n	2401b088 <__kernel_tan+0x38>
2401b1f8:	eeb0 7b45 	vmov.f64	d7, d5
2401b1fc:	e744      	b.n	2401b088 <__kernel_tan+0x38>
2401b1fe:	bf00      	nop
2401b200:	54442d18 	.word	0x54442d18
2401b204:	3fe921fb 	.word	0x3fe921fb
2401b208:	33145c07 	.word	0x33145c07
2401b20c:	3c81a626 	.word	0x3c81a626
	...
2401b218:	db605373 	.word	0xdb605373
2401b21c:	bef375cb 	.word	0xbef375cb
2401b220:	a03792a6 	.word	0xa03792a6
2401b224:	3f147e88 	.word	0x3f147e88
2401b228:	f2f26501 	.word	0xf2f26501
2401b22c:	3f4344d8 	.word	0x3f4344d8
2401b230:	c9560328 	.word	0xc9560328
2401b234:	3f6d6d22 	.word	0x3f6d6d22
2401b238:	8406d637 	.word	0x8406d637
2401b23c:	3f9664f4 	.word	0x3f9664f4
2401b240:	1110fe7a 	.word	0x1110fe7a
2401b244:	3fc11111 	.word	0x3fc11111
2401b248:	74bf7ad4 	.word	0x74bf7ad4
2401b24c:	3efb2a70 	.word	0x3efb2a70
2401b250:	32f0a7e9 	.word	0x32f0a7e9
2401b254:	3f12b80f 	.word	0x3f12b80f
2401b258:	1a8d1068 	.word	0x1a8d1068
2401b25c:	3f3026f7 	.word	0x3f3026f7
2401b260:	fee08315 	.word	0xfee08315
2401b264:	3f57dbc8 	.word	0x3f57dbc8
2401b268:	e96e8493 	.word	0xe96e8493
2401b26c:	3f8226e3 	.word	0x3f8226e3
2401b270:	1bb341fe 	.word	0x1bb341fe
2401b274:	3faba1ba 	.word	0x3faba1ba
2401b278:	55555563 	.word	0x55555563
2401b27c:	3fd55555 	.word	0x3fd55555
2401b280:	3e2fffff 	.word	0x3e2fffff
2401b284:	3fe59427 	.word	0x3fe59427

2401b288 <expm1f>:
2401b288:	ee10 2a10 	vmov	r2, s0
2401b28c:	497d      	ldr	r1, [pc, #500]	; (2401b484 <expm1f+0x1fc>)
2401b28e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
2401b292:	428b      	cmp	r3, r1
2401b294:	d920      	bls.n	2401b2d8 <expm1f+0x50>
2401b296:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
2401b29a:	d902      	bls.n	2401b2a2 <expm1f+0x1a>
2401b29c:	ee30 0a00 	vadd.f32	s0, s0, s0
2401b2a0:	4770      	bx	lr
2401b2a2:	d105      	bne.n	2401b2b0 <expm1f+0x28>
2401b2a4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
2401b2a8:	2a00      	cmp	r2, #0
2401b2aa:	fe20 0a27 	vselge.f32	s0, s0, s15
2401b2ae:	4770      	bx	lr
2401b2b0:	2a00      	cmp	r2, #0
2401b2b2:	db05      	blt.n	2401b2c0 <expm1f+0x38>
2401b2b4:	4974      	ldr	r1, [pc, #464]	; (2401b488 <expm1f+0x200>)
2401b2b6:	428b      	cmp	r3, r1
2401b2b8:	d95c      	bls.n	2401b374 <expm1f+0xec>
2401b2ba:	2000      	movs	r0, #0
2401b2bc:	f7fe bf5e 	b.w	2401a17c <__math_oflowf>
2401b2c0:	eddf 7a72 	vldr	s15, [pc, #456]	; 2401b48c <expm1f+0x204>
2401b2c4:	ee70 7a27 	vadd.f32	s15, s0, s15
2401b2c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
2401b2cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401b2d0:	d550      	bpl.n	2401b374 <expm1f+0xec>
2401b2d2:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
2401b2d6:	4770      	bx	lr
2401b2d8:	496d      	ldr	r1, [pc, #436]	; (2401b490 <expm1f+0x208>)
2401b2da:	428b      	cmp	r3, r1
2401b2dc:	d966      	bls.n	2401b3ac <expm1f+0x124>
2401b2de:	496d      	ldr	r1, [pc, #436]	; (2401b494 <expm1f+0x20c>)
2401b2e0:	428b      	cmp	r3, r1
2401b2e2:	d847      	bhi.n	2401b374 <expm1f+0xec>
2401b2e4:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 2401b498 <expm1f+0x210>
2401b2e8:	2a00      	cmp	r2, #0
2401b2ea:	bfa7      	ittee	ge
2401b2ec:	ee30 7a47 	vsubge.f32	s14, s0, s14
2401b2f0:	eddf 6a6a 	vldrge	s13, [pc, #424]	; 2401b49c <expm1f+0x214>
2401b2f4:	eddf 6a6a 	vldrlt	s13, [pc, #424]	; 2401b4a0 <expm1f+0x218>
2401b2f8:	ee30 7a07 	vaddlt.f32	s14, s0, s14
2401b2fc:	bfac      	ite	ge
2401b2fe:	2301      	movge	r3, #1
2401b300:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
2401b304:	ee37 0a66 	vsub.f32	s0, s14, s13
2401b308:	ee77 7a40 	vsub.f32	s15, s14, s0
2401b30c:	ee77 7ae6 	vsub.f32	s15, s15, s13
2401b310:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
2401b314:	ee20 4a25 	vmul.f32	s8, s0, s11
2401b318:	ed9f 6a62 	vldr	s12, [pc, #392]	; 2401b4a4 <expm1f+0x21c>
2401b31c:	eddf 6a62 	vldr	s13, [pc, #392]	; 2401b4a8 <expm1f+0x220>
2401b320:	ed9f 5a62 	vldr	s10, [pc, #392]	; 2401b4ac <expm1f+0x224>
2401b324:	ee20 7a04 	vmul.f32	s14, s0, s8
2401b328:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
2401b32c:	eee7 6a06 	vfma.f32	s13, s14, s12
2401b330:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 2401b4b0 <expm1f+0x228>
2401b334:	eea6 6a87 	vfma.f32	s12, s13, s14
2401b338:	eddf 6a5e 	vldr	s13, [pc, #376]	; 2401b4b4 <expm1f+0x22c>
2401b33c:	eee6 6a07 	vfma.f32	s13, s12, s14
2401b340:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2401b344:	eea6 5a87 	vfma.f32	s10, s13, s14
2401b348:	eef0 6a46 	vmov.f32	s13, s12
2401b34c:	eee5 6a07 	vfma.f32	s13, s10, s14
2401b350:	eee4 4a66 	vfms.f32	s9, s8, s13
2401b354:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
2401b358:	eea0 4a64 	vfms.f32	s8, s0, s9
2401b35c:	ee36 5ae4 	vsub.f32	s10, s13, s9
2401b360:	eec5 6a04 	vdiv.f32	s13, s10, s8
2401b364:	ee66 6a87 	vmul.f32	s13, s13, s14
2401b368:	bb73      	cbnz	r3, 2401b3c8 <expm1f+0x140>
2401b36a:	ee90 7a26 	vfnms.f32	s14, s0, s13
2401b36e:	ee30 0a47 	vsub.f32	s0, s0, s14
2401b372:	4770      	bx	lr
2401b374:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
2401b378:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2401b37c:	2a00      	cmp	r2, #0
2401b37e:	fe67 7a87 	vselge.f32	s15, s15, s14
2401b382:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 2401b4b8 <expm1f+0x230>
2401b386:	ee40 7a07 	vmla.f32	s15, s0, s14
2401b38a:	eeb0 7a40 	vmov.f32	s14, s0
2401b38e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
2401b392:	eef8 6ae7 	vcvt.f32.s32	s13, s15
2401b396:	ee17 3a90 	vmov	r3, s15
2401b39a:	eddf 7a3f 	vldr	s15, [pc, #252]	; 2401b498 <expm1f+0x210>
2401b39e:	eea6 7ae7 	vfms.f32	s14, s13, s15
2401b3a2:	eddf 7a3e 	vldr	s15, [pc, #248]	; 2401b49c <expm1f+0x214>
2401b3a6:	ee66 6aa7 	vmul.f32	s13, s13, s15
2401b3aa:	e7ab      	b.n	2401b304 <expm1f+0x7c>
2401b3ac:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
2401b3b0:	d208      	bcs.n	2401b3c4 <expm1f+0x13c>
2401b3b2:	eddf 7a42 	vldr	s15, [pc, #264]	; 2401b4bc <expm1f+0x234>
2401b3b6:	ee70 7a27 	vadd.f32	s15, s0, s15
2401b3ba:	ee77 7ae7 	vsub.f32	s15, s15, s15
2401b3be:	ee30 0a67 	vsub.f32	s0, s0, s15
2401b3c2:	4770      	bx	lr
2401b3c4:	2300      	movs	r3, #0
2401b3c6:	e7a3      	b.n	2401b310 <expm1f+0x88>
2401b3c8:	ee76 6ae7 	vsub.f32	s13, s13, s15
2401b3cc:	1c5a      	adds	r2, r3, #1
2401b3ce:	eed6 7a80 	vfnms.f32	s15, s13, s0
2401b3d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401b3d6:	d106      	bne.n	2401b3e6 <expm1f+0x15e>
2401b3d8:	ee70 7a67 	vsub.f32	s15, s0, s15
2401b3dc:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
2401b3e0:	eea7 0aa5 	vfma.f32	s0, s15, s11
2401b3e4:	4770      	bx	lr
2401b3e6:	2b01      	cmp	r3, #1
2401b3e8:	d118      	bne.n	2401b41c <expm1f+0x194>
2401b3ea:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
2401b3ee:	eeb4 0ac7 	vcmpe.f32	s0, s14
2401b3f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401b3f6:	bf5b      	ittet	pl
2401b3f8:	ee70 7a67 	vsubpl.f32	s15, s0, s15
2401b3fc:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
2401b400:	ee70 5a25 	vaddmi.f32	s11, s0, s11
2401b404:	eea7 6a87 	vfmapl.f32	s12, s15, s14
2401b408:	bf43      	ittte	mi
2401b40a:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
2401b40e:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
2401b412:	ee27 0a80 	vmulmi.f32	s0, s15, s0
2401b416:	eeb0 0a46 	vmovpl.f32	s0, s12
2401b41a:	4770      	bx	lr
2401b41c:	1c5a      	adds	r2, r3, #1
2401b41e:	2a39      	cmp	r2, #57	; 0x39
2401b420:	ea4f 51c3 	mov.w	r1, r3, lsl #23
2401b424:	d90b      	bls.n	2401b43e <expm1f+0x1b6>
2401b426:	ee77 7ac0 	vsub.f32	s15, s15, s0
2401b42a:	ee76 7a67 	vsub.f32	s15, s12, s15
2401b42e:	ee17 3a90 	vmov	r3, s15
2401b432:	4419      	add	r1, r3
2401b434:	ee07 1a90 	vmov	s15, r1
2401b438:	ee37 0ac6 	vsub.f32	s0, s15, s12
2401b43c:	4770      	bx	lr
2401b43e:	2b16      	cmp	r3, #22
2401b440:	dc11      	bgt.n	2401b466 <expm1f+0x1de>
2401b442:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
2401b446:	fa42 f303 	asr.w	r3, r2, r3
2401b44a:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
2401b44e:	ee07 3a10 	vmov	s14, r3
2401b452:	ee77 7ac0 	vsub.f32	s15, s15, s0
2401b456:	ee77 7a67 	vsub.f32	s15, s14, s15
2401b45a:	ee17 3a90 	vmov	r3, s15
2401b45e:	440b      	add	r3, r1
2401b460:	ee00 3a10 	vmov	s0, r3
2401b464:	4770      	bx	lr
2401b466:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
2401b46a:	05db      	lsls	r3, r3, #23
2401b46c:	ee07 3a10 	vmov	s14, r3
2401b470:	ee77 7a87 	vadd.f32	s15, s15, s14
2401b474:	ee70 7a67 	vsub.f32	s15, s0, s15
2401b478:	ee77 7a86 	vadd.f32	s15, s15, s12
2401b47c:	ee17 3a90 	vmov	r3, s15
2401b480:	e7ed      	b.n	2401b45e <expm1f+0x1d6>
2401b482:	bf00      	nop
2401b484:	4195b843 	.word	0x4195b843
2401b488:	42b17217 	.word	0x42b17217
2401b48c:	0da24260 	.word	0x0da24260
2401b490:	3eb17218 	.word	0x3eb17218
2401b494:	3f851591 	.word	0x3f851591
2401b498:	3f317180 	.word	0x3f317180
2401b49c:	3717f7d1 	.word	0x3717f7d1
2401b4a0:	b717f7d1 	.word	0xb717f7d1
2401b4a4:	b457edbb 	.word	0xb457edbb
2401b4a8:	36867e54 	.word	0x36867e54
2401b4ac:	bd088889 	.word	0xbd088889
2401b4b0:	b8a670cd 	.word	0xb8a670cd
2401b4b4:	3ad00d01 	.word	0x3ad00d01
2401b4b8:	3fb8aa3b 	.word	0x3fb8aa3b
2401b4bc:	7149f2ca 	.word	0x7149f2ca

2401b4c0 <fabs>:
2401b4c0:	ec51 0b10 	vmov	r0, r1, d0
2401b4c4:	ee10 2a10 	vmov	r2, s0
2401b4c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
2401b4cc:	ec43 2b10 	vmov	d0, r2, r3
2401b4d0:	4770      	bx	lr
2401b4d2:	0000      	movs	r0, r0
2401b4d4:	0000      	movs	r0, r0
	...

2401b4d8 <scalbn>:
2401b4d8:	ee10 1a90 	vmov	r1, s1
2401b4dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
2401b4e0:	b98b      	cbnz	r3, 2401b506 <scalbn+0x2e>
2401b4e2:	ee10 3a10 	vmov	r3, s0
2401b4e6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
2401b4ea:	4319      	orrs	r1, r3
2401b4ec:	d00a      	beq.n	2401b504 <scalbn+0x2c>
2401b4ee:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 2401b5a0 <scalbn+0xc8>
2401b4f2:	4b37      	ldr	r3, [pc, #220]	; (2401b5d0 <scalbn+0xf8>)
2401b4f4:	ee20 0b07 	vmul.f64	d0, d0, d7
2401b4f8:	4298      	cmp	r0, r3
2401b4fa:	da0b      	bge.n	2401b514 <scalbn+0x3c>
2401b4fc:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 2401b5a8 <scalbn+0xd0>
2401b500:	ee20 0b07 	vmul.f64	d0, d0, d7
2401b504:	4770      	bx	lr
2401b506:	f240 72ff 	movw	r2, #2047	; 0x7ff
2401b50a:	4293      	cmp	r3, r2
2401b50c:	d107      	bne.n	2401b51e <scalbn+0x46>
2401b50e:	ee30 0b00 	vadd.f64	d0, d0, d0
2401b512:	4770      	bx	lr
2401b514:	ee10 1a90 	vmov	r1, s1
2401b518:	f3c1 530a 	ubfx	r3, r1, #20, #11
2401b51c:	3b36      	subs	r3, #54	; 0x36
2401b51e:	f24c 3250 	movw	r2, #50000	; 0xc350
2401b522:	4290      	cmp	r0, r2
2401b524:	dd0d      	ble.n	2401b542 <scalbn+0x6a>
2401b526:	ed9f 7b22 	vldr	d7, [pc, #136]	; 2401b5b0 <scalbn+0xd8>
2401b52a:	ee10 3a90 	vmov	r3, s1
2401b52e:	eeb0 6b47 	vmov.f64	d6, d7
2401b532:	ed9f 5b21 	vldr	d5, [pc, #132]	; 2401b5b8 <scalbn+0xe0>
2401b536:	2b00      	cmp	r3, #0
2401b538:	fe27 7b05 	vselge.f64	d7, d7, d5
2401b53c:	ee27 0b06 	vmul.f64	d0, d7, d6
2401b540:	4770      	bx	lr
2401b542:	4418      	add	r0, r3
2401b544:	f240 73fe 	movw	r3, #2046	; 0x7fe
2401b548:	4298      	cmp	r0, r3
2401b54a:	dcec      	bgt.n	2401b526 <scalbn+0x4e>
2401b54c:	2800      	cmp	r0, #0
2401b54e:	dd0a      	ble.n	2401b566 <scalbn+0x8e>
2401b550:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
2401b554:	ec53 2b10 	vmov	r2, r3, d0
2401b558:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
2401b55c:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
2401b560:	ec43 2b10 	vmov	d0, r2, r3
2401b564:	4770      	bx	lr
2401b566:	f110 0f35 	cmn.w	r0, #53	; 0x35
2401b56a:	da09      	bge.n	2401b580 <scalbn+0xa8>
2401b56c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 2401b5a8 <scalbn+0xd0>
2401b570:	ee10 3a90 	vmov	r3, s1
2401b574:	eeb0 6b47 	vmov.f64	d6, d7
2401b578:	ed9f 5b11 	vldr	d5, [pc, #68]	; 2401b5c0 <scalbn+0xe8>
2401b57c:	2b00      	cmp	r3, #0
2401b57e:	e7db      	b.n	2401b538 <scalbn+0x60>
2401b580:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
2401b584:	ec53 2b10 	vmov	r2, r3, d0
2401b588:	3036      	adds	r0, #54	; 0x36
2401b58a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
2401b58e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
2401b592:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 2401b5c8 <scalbn+0xf0>
2401b596:	ec43 2b10 	vmov	d0, r2, r3
2401b59a:	e7b1      	b.n	2401b500 <scalbn+0x28>
2401b59c:	f3af 8000 	nop.w
2401b5a0:	00000000 	.word	0x00000000
2401b5a4:	43500000 	.word	0x43500000
2401b5a8:	c2f8f359 	.word	0xc2f8f359
2401b5ac:	01a56e1f 	.word	0x01a56e1f
2401b5b0:	8800759c 	.word	0x8800759c
2401b5b4:	7e37e43c 	.word	0x7e37e43c
2401b5b8:	8800759c 	.word	0x8800759c
2401b5bc:	fe37e43c 	.word	0xfe37e43c
2401b5c0:	c2f8f359 	.word	0xc2f8f359
2401b5c4:	81a56e1f 	.word	0x81a56e1f
2401b5c8:	00000000 	.word	0x00000000
2401b5cc:	3c900000 	.word	0x3c900000
2401b5d0:	ffff3cb0 	.word	0xffff3cb0

2401b5d4 <__kernel_rem_pio2f>:
2401b5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2401b5d8:	ed2d 8b04 	vpush	{d8-d9}
2401b5dc:	b0d9      	sub	sp, #356	; 0x164
2401b5de:	4688      	mov	r8, r1
2401b5e0:	9002      	str	r0, [sp, #8]
2401b5e2:	49b8      	ldr	r1, [pc, #736]	; (2401b8c4 <__kernel_rem_pio2f+0x2f0>)
2401b5e4:	9866      	ldr	r0, [sp, #408]	; 0x198
2401b5e6:	9301      	str	r3, [sp, #4]
2401b5e8:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
2401b5ec:	9901      	ldr	r1, [sp, #4]
2401b5ee:	9b67      	ldr	r3, [sp, #412]	; 0x19c
2401b5f0:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
2401b5f4:	1d11      	adds	r1, r2, #4
2401b5f6:	db25      	blt.n	2401b644 <__kernel_rem_pio2f+0x70>
2401b5f8:	1ed0      	subs	r0, r2, #3
2401b5fa:	bf48      	it	mi
2401b5fc:	1d10      	addmi	r0, r2, #4
2401b5fe:	10c0      	asrs	r0, r0, #3
2401b600:	1c45      	adds	r5, r0, #1
2401b602:	00e9      	lsls	r1, r5, #3
2401b604:	eba0 070b 	sub.w	r7, r0, fp
2401b608:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 2401b8d4 <__kernel_rem_pio2f+0x300>
2401b60c:	9103      	str	r1, [sp, #12]
2401b60e:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
2401b612:	eb0a 0c0b 	add.w	ip, sl, fp
2401b616:	ae1c      	add	r6, sp, #112	; 0x70
2401b618:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
2401b61c:	2400      	movs	r4, #0
2401b61e:	4564      	cmp	r4, ip
2401b620:	dd12      	ble.n	2401b648 <__kernel_rem_pio2f+0x74>
2401b622:	9901      	ldr	r1, [sp, #4]
2401b624:	ac1c      	add	r4, sp, #112	; 0x70
2401b626:	eb04 0481 	add.w	r4, r4, r1, lsl #2
2401b62a:	f50d 7988 	add.w	r9, sp, #272	; 0x110
2401b62e:	f04f 0c00 	mov.w	ip, #0
2401b632:	45d4      	cmp	ip, sl
2401b634:	dc27      	bgt.n	2401b686 <__kernel_rem_pio2f+0xb2>
2401b636:	f8dd e008 	ldr.w	lr, [sp, #8]
2401b63a:	eddf 7aa6 	vldr	s15, [pc, #664]	; 2401b8d4 <__kernel_rem_pio2f+0x300>
2401b63e:	4627      	mov	r7, r4
2401b640:	2600      	movs	r6, #0
2401b642:	e016      	b.n	2401b672 <__kernel_rem_pio2f+0x9e>
2401b644:	2000      	movs	r0, #0
2401b646:	e7db      	b.n	2401b600 <__kernel_rem_pio2f+0x2c>
2401b648:	42e7      	cmn	r7, r4
2401b64a:	bf5d      	ittte	pl
2401b64c:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
2401b650:	ee07 1a90 	vmovpl	s15, r1
2401b654:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
2401b658:	eef0 7a47 	vmovmi.f32	s15, s14
2401b65c:	ece6 7a01 	vstmia	r6!, {s15}
2401b660:	3401      	adds	r4, #1
2401b662:	e7dc      	b.n	2401b61e <__kernel_rem_pio2f+0x4a>
2401b664:	ecfe 6a01 	vldmia	lr!, {s13}
2401b668:	ed97 7a00 	vldr	s14, [r7]
2401b66c:	eee6 7a87 	vfma.f32	s15, s13, s14
2401b670:	3601      	adds	r6, #1
2401b672:	455e      	cmp	r6, fp
2401b674:	f1a7 0704 	sub.w	r7, r7, #4
2401b678:	ddf4      	ble.n	2401b664 <__kernel_rem_pio2f+0x90>
2401b67a:	ece9 7a01 	vstmia	r9!, {s15}
2401b67e:	f10c 0c01 	add.w	ip, ip, #1
2401b682:	3404      	adds	r4, #4
2401b684:	e7d5      	b.n	2401b632 <__kernel_rem_pio2f+0x5e>
2401b686:	a908      	add	r1, sp, #32
2401b688:	eb01 018a 	add.w	r1, r1, sl, lsl #2
2401b68c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
2401b690:	eddf 8a8f 	vldr	s17, [pc, #572]	; 2401b8d0 <__kernel_rem_pio2f+0x2fc>
2401b694:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 2401b8cc <__kernel_rem_pio2f+0x2f8>
2401b698:	9105      	str	r1, [sp, #20]
2401b69a:	9304      	str	r3, [sp, #16]
2401b69c:	4656      	mov	r6, sl
2401b69e:	00b3      	lsls	r3, r6, #2
2401b6a0:	9306      	str	r3, [sp, #24]
2401b6a2:	ab58      	add	r3, sp, #352	; 0x160
2401b6a4:	eb03 0086 	add.w	r0, r3, r6, lsl #2
2401b6a8:	ac08      	add	r4, sp, #32
2401b6aa:	ab44      	add	r3, sp, #272	; 0x110
2401b6ac:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
2401b6b0:	46a4      	mov	ip, r4
2401b6b2:	eb03 0086 	add.w	r0, r3, r6, lsl #2
2401b6b6:	4637      	mov	r7, r6
2401b6b8:	2f00      	cmp	r7, #0
2401b6ba:	f1a0 0004 	sub.w	r0, r0, #4
2401b6be:	dc4a      	bgt.n	2401b756 <__kernel_rem_pio2f+0x182>
2401b6c0:	4628      	mov	r0, r5
2401b6c2:	9207      	str	r2, [sp, #28]
2401b6c4:	f000 fab2 	bl	2401bc2c <scalbnf>
2401b6c8:	eeb0 8a40 	vmov.f32	s16, s0
2401b6cc:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
2401b6d0:	ee28 0a00 	vmul.f32	s0, s16, s0
2401b6d4:	f000 fa68 	bl	2401bba8 <floorf>
2401b6d8:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
2401b6dc:	eea0 8a67 	vfms.f32	s16, s0, s15
2401b6e0:	2d00      	cmp	r5, #0
2401b6e2:	9a07      	ldr	r2, [sp, #28]
2401b6e4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
2401b6e8:	ee17 9a90 	vmov	r9, s15
2401b6ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401b6f0:	ee38 8a67 	vsub.f32	s16, s16, s15
2401b6f4:	dd41      	ble.n	2401b77a <__kernel_rem_pio2f+0x1a6>
2401b6f6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
2401b6fa:	ab08      	add	r3, sp, #32
2401b6fc:	f1c5 0e08 	rsb	lr, r5, #8
2401b700:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
2401b704:	fa47 f00e 	asr.w	r0, r7, lr
2401b708:	4481      	add	r9, r0
2401b70a:	fa00 f00e 	lsl.w	r0, r0, lr
2401b70e:	1a3f      	subs	r7, r7, r0
2401b710:	f1c5 0007 	rsb	r0, r5, #7
2401b714:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
2401b718:	4107      	asrs	r7, r0
2401b71a:	2f00      	cmp	r7, #0
2401b71c:	dd3c      	ble.n	2401b798 <__kernel_rem_pio2f+0x1c4>
2401b71e:	f04f 0e00 	mov.w	lr, #0
2401b722:	f109 0901 	add.w	r9, r9, #1
2401b726:	4671      	mov	r1, lr
2401b728:	4576      	cmp	r6, lr
2401b72a:	dc67      	bgt.n	2401b7fc <__kernel_rem_pio2f+0x228>
2401b72c:	2d00      	cmp	r5, #0
2401b72e:	dd03      	ble.n	2401b738 <__kernel_rem_pio2f+0x164>
2401b730:	2d01      	cmp	r5, #1
2401b732:	d074      	beq.n	2401b81e <__kernel_rem_pio2f+0x24a>
2401b734:	2d02      	cmp	r5, #2
2401b736:	d07b      	beq.n	2401b830 <__kernel_rem_pio2f+0x25c>
2401b738:	2f02      	cmp	r7, #2
2401b73a:	d12d      	bne.n	2401b798 <__kernel_rem_pio2f+0x1c4>
2401b73c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2401b740:	ee30 8a48 	vsub.f32	s16, s0, s16
2401b744:	b341      	cbz	r1, 2401b798 <__kernel_rem_pio2f+0x1c4>
2401b746:	4628      	mov	r0, r5
2401b748:	9207      	str	r2, [sp, #28]
2401b74a:	f000 fa6f 	bl	2401bc2c <scalbnf>
2401b74e:	9a07      	ldr	r2, [sp, #28]
2401b750:	ee38 8a40 	vsub.f32	s16, s16, s0
2401b754:	e020      	b.n	2401b798 <__kernel_rem_pio2f+0x1c4>
2401b756:	ee60 7a28 	vmul.f32	s15, s0, s17
2401b75a:	3f01      	subs	r7, #1
2401b75c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
2401b760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401b764:	eea7 0ac9 	vfms.f32	s0, s15, s18
2401b768:	eebd 0ac0 	vcvt.s32.f32	s0, s0
2401b76c:	ecac 0a01 	vstmia	ip!, {s0}
2401b770:	ed90 0a00 	vldr	s0, [r0]
2401b774:	ee37 0a80 	vadd.f32	s0, s15, s0
2401b778:	e79e      	b.n	2401b6b8 <__kernel_rem_pio2f+0xe4>
2401b77a:	d105      	bne.n	2401b788 <__kernel_rem_pio2f+0x1b4>
2401b77c:	1e70      	subs	r0, r6, #1
2401b77e:	ab08      	add	r3, sp, #32
2401b780:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
2401b784:	11ff      	asrs	r7, r7, #7
2401b786:	e7c8      	b.n	2401b71a <__kernel_rem_pio2f+0x146>
2401b788:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2401b78c:	eeb4 8ae7 	vcmpe.f32	s16, s15
2401b790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401b794:	da30      	bge.n	2401b7f8 <__kernel_rem_pio2f+0x224>
2401b796:	2700      	movs	r7, #0
2401b798:	eeb5 8a40 	vcmp.f32	s16, #0.0
2401b79c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401b7a0:	f040 809a 	bne.w	2401b8d8 <__kernel_rem_pio2f+0x304>
2401b7a4:	1e74      	subs	r4, r6, #1
2401b7a6:	46a4      	mov	ip, r4
2401b7a8:	2100      	movs	r1, #0
2401b7aa:	45d4      	cmp	ip, sl
2401b7ac:	da47      	bge.n	2401b83e <__kernel_rem_pio2f+0x26a>
2401b7ae:	2900      	cmp	r1, #0
2401b7b0:	d063      	beq.n	2401b87a <__kernel_rem_pio2f+0x2a6>
2401b7b2:	ab08      	add	r3, sp, #32
2401b7b4:	3d08      	subs	r5, #8
2401b7b6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
2401b7ba:	2b00      	cmp	r3, #0
2401b7bc:	d07f      	beq.n	2401b8be <__kernel_rem_pio2f+0x2ea>
2401b7be:	4628      	mov	r0, r5
2401b7c0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2401b7c4:	f000 fa32 	bl	2401bc2c <scalbnf>
2401b7c8:	1c63      	adds	r3, r4, #1
2401b7ca:	aa44      	add	r2, sp, #272	; 0x110
2401b7cc:	ed9f 7a40 	vldr	s14, [pc, #256]	; 2401b8d0 <__kernel_rem_pio2f+0x2fc>
2401b7d0:	0099      	lsls	r1, r3, #2
2401b7d2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
2401b7d6:	4623      	mov	r3, r4
2401b7d8:	2b00      	cmp	r3, #0
2401b7da:	f280 80ad 	bge.w	2401b938 <__kernel_rem_pio2f+0x364>
2401b7de:	4623      	mov	r3, r4
2401b7e0:	2b00      	cmp	r3, #0
2401b7e2:	f2c0 80cb 	blt.w	2401b97c <__kernel_rem_pio2f+0x3a8>
2401b7e6:	aa44      	add	r2, sp, #272	; 0x110
2401b7e8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
2401b7ec:	4e36      	ldr	r6, [pc, #216]	; (2401b8c8 <__kernel_rem_pio2f+0x2f4>)
2401b7ee:	eddf 7a39 	vldr	s15, [pc, #228]	; 2401b8d4 <__kernel_rem_pio2f+0x300>
2401b7f2:	2000      	movs	r0, #0
2401b7f4:	1ae2      	subs	r2, r4, r3
2401b7f6:	e0b6      	b.n	2401b966 <__kernel_rem_pio2f+0x392>
2401b7f8:	2702      	movs	r7, #2
2401b7fa:	e790      	b.n	2401b71e <__kernel_rem_pio2f+0x14a>
2401b7fc:	6820      	ldr	r0, [r4, #0]
2401b7fe:	b949      	cbnz	r1, 2401b814 <__kernel_rem_pio2f+0x240>
2401b800:	b118      	cbz	r0, 2401b80a <__kernel_rem_pio2f+0x236>
2401b802:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
2401b806:	6020      	str	r0, [r4, #0]
2401b808:	2001      	movs	r0, #1
2401b80a:	f10e 0e01 	add.w	lr, lr, #1
2401b80e:	3404      	adds	r4, #4
2401b810:	4601      	mov	r1, r0
2401b812:	e789      	b.n	2401b728 <__kernel_rem_pio2f+0x154>
2401b814:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
2401b818:	6020      	str	r0, [r4, #0]
2401b81a:	4608      	mov	r0, r1
2401b81c:	e7f5      	b.n	2401b80a <__kernel_rem_pio2f+0x236>
2401b81e:	1e74      	subs	r4, r6, #1
2401b820:	ab08      	add	r3, sp, #32
2401b822:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
2401b826:	f000 007f 	and.w	r0, r0, #127	; 0x7f
2401b82a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
2401b82e:	e783      	b.n	2401b738 <__kernel_rem_pio2f+0x164>
2401b830:	1e74      	subs	r4, r6, #1
2401b832:	ab08      	add	r3, sp, #32
2401b834:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
2401b838:	f000 003f 	and.w	r0, r0, #63	; 0x3f
2401b83c:	e7f5      	b.n	2401b82a <__kernel_rem_pio2f+0x256>
2401b83e:	ab08      	add	r3, sp, #32
2401b840:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
2401b844:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
2401b848:	4301      	orrs	r1, r0
2401b84a:	e7ae      	b.n	2401b7aa <__kernel_rem_pio2f+0x1d6>
2401b84c:	3001      	adds	r0, #1
2401b84e:	f854 7d04 	ldr.w	r7, [r4, #-4]!
2401b852:	2f00      	cmp	r7, #0
2401b854:	d0fa      	beq.n	2401b84c <__kernel_rem_pio2f+0x278>
2401b856:	9b06      	ldr	r3, [sp, #24]
2401b858:	f503 73b0 	add.w	r3, r3, #352	; 0x160
2401b85c:	eb0d 0403 	add.w	r4, sp, r3
2401b860:	9b01      	ldr	r3, [sp, #4]
2401b862:	18f7      	adds	r7, r6, r3
2401b864:	ab1c      	add	r3, sp, #112	; 0x70
2401b866:	f106 0c01 	add.w	ip, r6, #1
2401b86a:	3c4c      	subs	r4, #76	; 0x4c
2401b86c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
2401b870:	4430      	add	r0, r6
2401b872:	4560      	cmp	r0, ip
2401b874:	da04      	bge.n	2401b880 <__kernel_rem_pio2f+0x2ac>
2401b876:	4606      	mov	r6, r0
2401b878:	e711      	b.n	2401b69e <__kernel_rem_pio2f+0xca>
2401b87a:	9c05      	ldr	r4, [sp, #20]
2401b87c:	2001      	movs	r0, #1
2401b87e:	e7e6      	b.n	2401b84e <__kernel_rem_pio2f+0x27a>
2401b880:	9b04      	ldr	r3, [sp, #16]
2401b882:	f8dd e008 	ldr.w	lr, [sp, #8]
2401b886:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
2401b88a:	9306      	str	r3, [sp, #24]
2401b88c:	ee07 3a90 	vmov	s15, r3
2401b890:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401b894:	2600      	movs	r6, #0
2401b896:	ece7 7a01 	vstmia	r7!, {s15}
2401b89a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 2401b8d4 <__kernel_rem_pio2f+0x300>
2401b89e:	46b9      	mov	r9, r7
2401b8a0:	455e      	cmp	r6, fp
2401b8a2:	dd04      	ble.n	2401b8ae <__kernel_rem_pio2f+0x2da>
2401b8a4:	ece4 7a01 	vstmia	r4!, {s15}
2401b8a8:	f10c 0c01 	add.w	ip, ip, #1
2401b8ac:	e7e1      	b.n	2401b872 <__kernel_rem_pio2f+0x29e>
2401b8ae:	ecfe 6a01 	vldmia	lr!, {s13}
2401b8b2:	ed39 7a01 	vldmdb	r9!, {s14}
2401b8b6:	3601      	adds	r6, #1
2401b8b8:	eee6 7a87 	vfma.f32	s15, s13, s14
2401b8bc:	e7f0      	b.n	2401b8a0 <__kernel_rem_pio2f+0x2cc>
2401b8be:	3c01      	subs	r4, #1
2401b8c0:	e777      	b.n	2401b7b2 <__kernel_rem_pio2f+0x1de>
2401b8c2:	bf00      	nop
2401b8c4:	24027fbc 	.word	0x24027fbc
2401b8c8:	24027f90 	.word	0x24027f90
2401b8cc:	43800000 	.word	0x43800000
2401b8d0:	3b800000 	.word	0x3b800000
2401b8d4:	00000000 	.word	0x00000000
2401b8d8:	9b03      	ldr	r3, [sp, #12]
2401b8da:	eeb0 0a48 	vmov.f32	s0, s16
2401b8de:	1a98      	subs	r0, r3, r2
2401b8e0:	f000 f9a4 	bl	2401bc2c <scalbnf>
2401b8e4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 2401b8cc <__kernel_rem_pio2f+0x2f8>
2401b8e8:	eeb4 0ac7 	vcmpe.f32	s0, s14
2401b8ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401b8f0:	db19      	blt.n	2401b926 <__kernel_rem_pio2f+0x352>
2401b8f2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 2401b8d0 <__kernel_rem_pio2f+0x2fc>
2401b8f6:	ee60 7a27 	vmul.f32	s15, s0, s15
2401b8fa:	aa08      	add	r2, sp, #32
2401b8fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
2401b900:	1c74      	adds	r4, r6, #1
2401b902:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401b906:	3508      	adds	r5, #8
2401b908:	eea7 0ac7 	vfms.f32	s0, s15, s14
2401b90c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
2401b910:	eebd 0ac0 	vcvt.s32.f32	s0, s0
2401b914:	ee10 3a10 	vmov	r3, s0
2401b918:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
2401b91c:	ee17 3a90 	vmov	r3, s15
2401b920:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
2401b924:	e74b      	b.n	2401b7be <__kernel_rem_pio2f+0x1ea>
2401b926:	eebd 0ac0 	vcvt.s32.f32	s0, s0
2401b92a:	aa08      	add	r2, sp, #32
2401b92c:	ee10 3a10 	vmov	r3, s0
2401b930:	4634      	mov	r4, r6
2401b932:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
2401b936:	e742      	b.n	2401b7be <__kernel_rem_pio2f+0x1ea>
2401b938:	a808      	add	r0, sp, #32
2401b93a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
2401b93e:	9001      	str	r0, [sp, #4]
2401b940:	ee07 0a90 	vmov	s15, r0
2401b944:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401b948:	3b01      	subs	r3, #1
2401b94a:	ee67 7a80 	vmul.f32	s15, s15, s0
2401b94e:	ee20 0a07 	vmul.f32	s0, s0, s14
2401b952:	ed62 7a01 	vstmdb	r2!, {s15}
2401b956:	e73f      	b.n	2401b7d8 <__kernel_rem_pio2f+0x204>
2401b958:	ecf6 6a01 	vldmia	r6!, {s13}
2401b95c:	ecb5 7a01 	vldmia	r5!, {s14}
2401b960:	eee6 7a87 	vfma.f32	s15, s13, s14
2401b964:	3001      	adds	r0, #1
2401b966:	4550      	cmp	r0, sl
2401b968:	dc01      	bgt.n	2401b96e <__kernel_rem_pio2f+0x39a>
2401b96a:	4290      	cmp	r0, r2
2401b96c:	ddf4      	ble.n	2401b958 <__kernel_rem_pio2f+0x384>
2401b96e:	a858      	add	r0, sp, #352	; 0x160
2401b970:	eb00 0282 	add.w	r2, r0, r2, lsl #2
2401b974:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
2401b978:	3b01      	subs	r3, #1
2401b97a:	e731      	b.n	2401b7e0 <__kernel_rem_pio2f+0x20c>
2401b97c:	9b66      	ldr	r3, [sp, #408]	; 0x198
2401b97e:	2b02      	cmp	r3, #2
2401b980:	dc09      	bgt.n	2401b996 <__kernel_rem_pio2f+0x3c2>
2401b982:	2b00      	cmp	r3, #0
2401b984:	dc2b      	bgt.n	2401b9de <__kernel_rem_pio2f+0x40a>
2401b986:	d044      	beq.n	2401ba12 <__kernel_rem_pio2f+0x43e>
2401b988:	f009 0007 	and.w	r0, r9, #7
2401b98c:	b059      	add	sp, #356	; 0x164
2401b98e:	ecbd 8b04 	vpop	{d8-d9}
2401b992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2401b996:	9b66      	ldr	r3, [sp, #408]	; 0x198
2401b998:	2b03      	cmp	r3, #3
2401b99a:	d1f5      	bne.n	2401b988 <__kernel_rem_pio2f+0x3b4>
2401b99c:	aa30      	add	r2, sp, #192	; 0xc0
2401b99e:	1f0b      	subs	r3, r1, #4
2401b9a0:	4413      	add	r3, r2
2401b9a2:	461a      	mov	r2, r3
2401b9a4:	4620      	mov	r0, r4
2401b9a6:	2800      	cmp	r0, #0
2401b9a8:	f1a2 0204 	sub.w	r2, r2, #4
2401b9ac:	dc52      	bgt.n	2401ba54 <__kernel_rem_pio2f+0x480>
2401b9ae:	4622      	mov	r2, r4
2401b9b0:	2a01      	cmp	r2, #1
2401b9b2:	f1a3 0304 	sub.w	r3, r3, #4
2401b9b6:	dc5d      	bgt.n	2401ba74 <__kernel_rem_pio2f+0x4a0>
2401b9b8:	ab30      	add	r3, sp, #192	; 0xc0
2401b9ba:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 2401b8d4 <__kernel_rem_pio2f+0x300>
2401b9be:	440b      	add	r3, r1
2401b9c0:	2c01      	cmp	r4, #1
2401b9c2:	dc67      	bgt.n	2401ba94 <__kernel_rem_pio2f+0x4c0>
2401b9c4:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
2401b9c8:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
2401b9cc:	2f00      	cmp	r7, #0
2401b9ce:	d167      	bne.n	2401baa0 <__kernel_rem_pio2f+0x4cc>
2401b9d0:	edc8 6a00 	vstr	s13, [r8]
2401b9d4:	ed88 7a01 	vstr	s14, [r8, #4]
2401b9d8:	edc8 7a02 	vstr	s15, [r8, #8]
2401b9dc:	e7d4      	b.n	2401b988 <__kernel_rem_pio2f+0x3b4>
2401b9de:	ab30      	add	r3, sp, #192	; 0xc0
2401b9e0:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 2401b8d4 <__kernel_rem_pio2f+0x300>
2401b9e4:	440b      	add	r3, r1
2401b9e6:	4622      	mov	r2, r4
2401b9e8:	2a00      	cmp	r2, #0
2401b9ea:	da24      	bge.n	2401ba36 <__kernel_rem_pio2f+0x462>
2401b9ec:	b34f      	cbz	r7, 2401ba42 <__kernel_rem_pio2f+0x46e>
2401b9ee:	eef1 7a47 	vneg.f32	s15, s14
2401b9f2:	edc8 7a00 	vstr	s15, [r8]
2401b9f6:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
2401b9fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401b9fe:	aa31      	add	r2, sp, #196	; 0xc4
2401ba00:	2301      	movs	r3, #1
2401ba02:	429c      	cmp	r4, r3
2401ba04:	da20      	bge.n	2401ba48 <__kernel_rem_pio2f+0x474>
2401ba06:	b10f      	cbz	r7, 2401ba0c <__kernel_rem_pio2f+0x438>
2401ba08:	eef1 7a67 	vneg.f32	s15, s15
2401ba0c:	edc8 7a01 	vstr	s15, [r8, #4]
2401ba10:	e7ba      	b.n	2401b988 <__kernel_rem_pio2f+0x3b4>
2401ba12:	ab30      	add	r3, sp, #192	; 0xc0
2401ba14:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 2401b8d4 <__kernel_rem_pio2f+0x300>
2401ba18:	440b      	add	r3, r1
2401ba1a:	2c00      	cmp	r4, #0
2401ba1c:	da05      	bge.n	2401ba2a <__kernel_rem_pio2f+0x456>
2401ba1e:	b10f      	cbz	r7, 2401ba24 <__kernel_rem_pio2f+0x450>
2401ba20:	eef1 7a67 	vneg.f32	s15, s15
2401ba24:	edc8 7a00 	vstr	s15, [r8]
2401ba28:	e7ae      	b.n	2401b988 <__kernel_rem_pio2f+0x3b4>
2401ba2a:	ed33 7a01 	vldmdb	r3!, {s14}
2401ba2e:	3c01      	subs	r4, #1
2401ba30:	ee77 7a87 	vadd.f32	s15, s15, s14
2401ba34:	e7f1      	b.n	2401ba1a <__kernel_rem_pio2f+0x446>
2401ba36:	ed73 7a01 	vldmdb	r3!, {s15}
2401ba3a:	3a01      	subs	r2, #1
2401ba3c:	ee37 7a27 	vadd.f32	s14, s14, s15
2401ba40:	e7d2      	b.n	2401b9e8 <__kernel_rem_pio2f+0x414>
2401ba42:	eef0 7a47 	vmov.f32	s15, s14
2401ba46:	e7d4      	b.n	2401b9f2 <__kernel_rem_pio2f+0x41e>
2401ba48:	ecb2 7a01 	vldmia	r2!, {s14}
2401ba4c:	3301      	adds	r3, #1
2401ba4e:	ee77 7a87 	vadd.f32	s15, s15, s14
2401ba52:	e7d6      	b.n	2401ba02 <__kernel_rem_pio2f+0x42e>
2401ba54:	edd2 7a00 	vldr	s15, [r2]
2401ba58:	edd2 6a01 	vldr	s13, [r2, #4]
2401ba5c:	ee37 7aa6 	vadd.f32	s14, s15, s13
2401ba60:	3801      	subs	r0, #1
2401ba62:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401ba66:	ed82 7a00 	vstr	s14, [r2]
2401ba6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401ba6e:	edc2 7a01 	vstr	s15, [r2, #4]
2401ba72:	e798      	b.n	2401b9a6 <__kernel_rem_pio2f+0x3d2>
2401ba74:	edd3 7a00 	vldr	s15, [r3]
2401ba78:	edd3 6a01 	vldr	s13, [r3, #4]
2401ba7c:	ee37 7aa6 	vadd.f32	s14, s15, s13
2401ba80:	3a01      	subs	r2, #1
2401ba82:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401ba86:	ed83 7a00 	vstr	s14, [r3]
2401ba8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401ba8e:	edc3 7a01 	vstr	s15, [r3, #4]
2401ba92:	e78d      	b.n	2401b9b0 <__kernel_rem_pio2f+0x3dc>
2401ba94:	ed33 7a01 	vldmdb	r3!, {s14}
2401ba98:	3c01      	subs	r4, #1
2401ba9a:	ee77 7a87 	vadd.f32	s15, s15, s14
2401ba9e:	e78f      	b.n	2401b9c0 <__kernel_rem_pio2f+0x3ec>
2401baa0:	eef1 6a66 	vneg.f32	s13, s13
2401baa4:	eeb1 7a47 	vneg.f32	s14, s14
2401baa8:	edc8 6a00 	vstr	s13, [r8]
2401baac:	ed88 7a01 	vstr	s14, [r8, #4]
2401bab0:	eef1 7a67 	vneg.f32	s15, s15
2401bab4:	e790      	b.n	2401b9d8 <__kernel_rem_pio2f+0x404>
2401bab6:	bf00      	nop

2401bab8 <floor>:
2401bab8:	ee10 1a90 	vmov	r1, s1
2401babc:	f3c1 520a 	ubfx	r2, r1, #20, #11
2401bac0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
2401bac4:	2b13      	cmp	r3, #19
2401bac6:	b530      	push	{r4, r5, lr}
2401bac8:	ee10 0a10 	vmov	r0, s0
2401bacc:	ee10 5a10 	vmov	r5, s0
2401bad0:	dc31      	bgt.n	2401bb36 <floor+0x7e>
2401bad2:	2b00      	cmp	r3, #0
2401bad4:	da15      	bge.n	2401bb02 <floor+0x4a>
2401bad6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 2401bb98 <floor+0xe0>
2401bada:	ee30 0b07 	vadd.f64	d0, d0, d7
2401bade:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
2401bae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401bae6:	dd07      	ble.n	2401baf8 <floor+0x40>
2401bae8:	2900      	cmp	r1, #0
2401baea:	da4e      	bge.n	2401bb8a <floor+0xd2>
2401baec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
2401baf0:	4308      	orrs	r0, r1
2401baf2:	d04d      	beq.n	2401bb90 <floor+0xd8>
2401baf4:	492a      	ldr	r1, [pc, #168]	; (2401bba0 <floor+0xe8>)
2401baf6:	2000      	movs	r0, #0
2401baf8:	460b      	mov	r3, r1
2401bafa:	4602      	mov	r2, r0
2401bafc:	ec43 2b10 	vmov	d0, r2, r3
2401bb00:	e020      	b.n	2401bb44 <floor+0x8c>
2401bb02:	4a28      	ldr	r2, [pc, #160]	; (2401bba4 <floor+0xec>)
2401bb04:	411a      	asrs	r2, r3
2401bb06:	ea01 0402 	and.w	r4, r1, r2
2401bb0a:	4304      	orrs	r4, r0
2401bb0c:	d01a      	beq.n	2401bb44 <floor+0x8c>
2401bb0e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 2401bb98 <floor+0xe0>
2401bb12:	ee30 0b07 	vadd.f64	d0, d0, d7
2401bb16:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
2401bb1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401bb1e:	ddeb      	ble.n	2401baf8 <floor+0x40>
2401bb20:	2900      	cmp	r1, #0
2401bb22:	bfbe      	ittt	lt
2401bb24:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
2401bb28:	fa40 f303 	asrlt.w	r3, r0, r3
2401bb2c:	18c9      	addlt	r1, r1, r3
2401bb2e:	ea21 0102 	bic.w	r1, r1, r2
2401bb32:	2000      	movs	r0, #0
2401bb34:	e7e0      	b.n	2401baf8 <floor+0x40>
2401bb36:	2b33      	cmp	r3, #51	; 0x33
2401bb38:	dd05      	ble.n	2401bb46 <floor+0x8e>
2401bb3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2401bb3e:	d101      	bne.n	2401bb44 <floor+0x8c>
2401bb40:	ee30 0b00 	vadd.f64	d0, d0, d0
2401bb44:	bd30      	pop	{r4, r5, pc}
2401bb46:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
2401bb4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2401bb4e:	40e2      	lsrs	r2, r4
2401bb50:	4210      	tst	r0, r2
2401bb52:	d0f7      	beq.n	2401bb44 <floor+0x8c>
2401bb54:	ed9f 7b10 	vldr	d7, [pc, #64]	; 2401bb98 <floor+0xe0>
2401bb58:	ee30 0b07 	vadd.f64	d0, d0, d7
2401bb5c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
2401bb60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401bb64:	ddc8      	ble.n	2401baf8 <floor+0x40>
2401bb66:	2900      	cmp	r1, #0
2401bb68:	da02      	bge.n	2401bb70 <floor+0xb8>
2401bb6a:	2b14      	cmp	r3, #20
2401bb6c:	d103      	bne.n	2401bb76 <floor+0xbe>
2401bb6e:	3101      	adds	r1, #1
2401bb70:	ea20 0002 	bic.w	r0, r0, r2
2401bb74:	e7c0      	b.n	2401baf8 <floor+0x40>
2401bb76:	2401      	movs	r4, #1
2401bb78:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
2401bb7c:	fa04 f303 	lsl.w	r3, r4, r3
2401bb80:	4418      	add	r0, r3
2401bb82:	4285      	cmp	r5, r0
2401bb84:	bf88      	it	hi
2401bb86:	1909      	addhi	r1, r1, r4
2401bb88:	e7f2      	b.n	2401bb70 <floor+0xb8>
2401bb8a:	2000      	movs	r0, #0
2401bb8c:	4601      	mov	r1, r0
2401bb8e:	e7b3      	b.n	2401baf8 <floor+0x40>
2401bb90:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
2401bb94:	e7b0      	b.n	2401baf8 <floor+0x40>
2401bb96:	bf00      	nop
2401bb98:	8800759c 	.word	0x8800759c
2401bb9c:	7e37e43c 	.word	0x7e37e43c
2401bba0:	bff00000 	.word	0xbff00000
2401bba4:	000fffff 	.word	0x000fffff

2401bba8 <floorf>:
2401bba8:	ee10 3a10 	vmov	r3, s0
2401bbac:	f3c3 52c7 	ubfx	r2, r3, #23, #8
2401bbb0:	3a7f      	subs	r2, #127	; 0x7f
2401bbb2:	2a16      	cmp	r2, #22
2401bbb4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
2401bbb8:	dc2a      	bgt.n	2401bc10 <floorf+0x68>
2401bbba:	2a00      	cmp	r2, #0
2401bbbc:	da11      	bge.n	2401bbe2 <floorf+0x3a>
2401bbbe:	eddf 7a18 	vldr	s15, [pc, #96]	; 2401bc20 <floorf+0x78>
2401bbc2:	ee30 0a27 	vadd.f32	s0, s0, s15
2401bbc6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2401bbca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401bbce:	dd05      	ble.n	2401bbdc <floorf+0x34>
2401bbd0:	2b00      	cmp	r3, #0
2401bbd2:	da23      	bge.n	2401bc1c <floorf+0x74>
2401bbd4:	4a13      	ldr	r2, [pc, #76]	; (2401bc24 <floorf+0x7c>)
2401bbd6:	2900      	cmp	r1, #0
2401bbd8:	bf18      	it	ne
2401bbda:	4613      	movne	r3, r2
2401bbdc:	ee00 3a10 	vmov	s0, r3
2401bbe0:	4770      	bx	lr
2401bbe2:	4911      	ldr	r1, [pc, #68]	; (2401bc28 <floorf+0x80>)
2401bbe4:	4111      	asrs	r1, r2
2401bbe6:	420b      	tst	r3, r1
2401bbe8:	d0fa      	beq.n	2401bbe0 <floorf+0x38>
2401bbea:	eddf 7a0d 	vldr	s15, [pc, #52]	; 2401bc20 <floorf+0x78>
2401bbee:	ee30 0a27 	vadd.f32	s0, s0, s15
2401bbf2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2401bbf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401bbfa:	ddef      	ble.n	2401bbdc <floorf+0x34>
2401bbfc:	2b00      	cmp	r3, #0
2401bbfe:	bfbe      	ittt	lt
2401bc00:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
2401bc04:	fa40 f202 	asrlt.w	r2, r0, r2
2401bc08:	189b      	addlt	r3, r3, r2
2401bc0a:	ea23 0301 	bic.w	r3, r3, r1
2401bc0e:	e7e5      	b.n	2401bbdc <floorf+0x34>
2401bc10:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
2401bc14:	d3e4      	bcc.n	2401bbe0 <floorf+0x38>
2401bc16:	ee30 0a00 	vadd.f32	s0, s0, s0
2401bc1a:	4770      	bx	lr
2401bc1c:	2300      	movs	r3, #0
2401bc1e:	e7dd      	b.n	2401bbdc <floorf+0x34>
2401bc20:	7149f2ca 	.word	0x7149f2ca
2401bc24:	bf800000 	.word	0xbf800000
2401bc28:	007fffff 	.word	0x007fffff

2401bc2c <scalbnf>:
2401bc2c:	ee10 3a10 	vmov	r3, s0
2401bc30:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
2401bc34:	d02a      	beq.n	2401bc8c <scalbnf+0x60>
2401bc36:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
2401bc3a:	d302      	bcc.n	2401bc42 <scalbnf+0x16>
2401bc3c:	ee30 0a00 	vadd.f32	s0, s0, s0
2401bc40:	4770      	bx	lr
2401bc42:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
2401bc46:	d122      	bne.n	2401bc8e <scalbnf+0x62>
2401bc48:	4b23      	ldr	r3, [pc, #140]	; (2401bcd8 <scalbnf+0xac>)
2401bc4a:	eddf 7a24 	vldr	s15, [pc, #144]	; 2401bcdc <scalbnf+0xb0>
2401bc4e:	4298      	cmp	r0, r3
2401bc50:	ee20 0a27 	vmul.f32	s0, s0, s15
2401bc54:	db16      	blt.n	2401bc84 <scalbnf+0x58>
2401bc56:	ee10 3a10 	vmov	r3, s0
2401bc5a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
2401bc5e:	3a19      	subs	r2, #25
2401bc60:	f24c 3150 	movw	r1, #50000	; 0xc350
2401bc64:	4288      	cmp	r0, r1
2401bc66:	dd14      	ble.n	2401bc92 <scalbnf+0x66>
2401bc68:	eddf 7a1d 	vldr	s15, [pc, #116]	; 2401bce0 <scalbnf+0xb4>
2401bc6c:	eddf 6a1d 	vldr	s13, [pc, #116]	; 2401bce4 <scalbnf+0xb8>
2401bc70:	ee10 3a10 	vmov	r3, s0
2401bc74:	eeb0 7a67 	vmov.f32	s14, s15
2401bc78:	2b00      	cmp	r3, #0
2401bc7a:	fe67 7aa6 	vselge.f32	s15, s15, s13
2401bc7e:	ee27 0a87 	vmul.f32	s0, s15, s14
2401bc82:	4770      	bx	lr
2401bc84:	eddf 7a18 	vldr	s15, [pc, #96]	; 2401bce8 <scalbnf+0xbc>
2401bc88:	ee27 0a80 	vmul.f32	s0, s15, s0
2401bc8c:	4770      	bx	lr
2401bc8e:	0dd2      	lsrs	r2, r2, #23
2401bc90:	e7e6      	b.n	2401bc60 <scalbnf+0x34>
2401bc92:	4410      	add	r0, r2
2401bc94:	28fe      	cmp	r0, #254	; 0xfe
2401bc96:	dce7      	bgt.n	2401bc68 <scalbnf+0x3c>
2401bc98:	2800      	cmp	r0, #0
2401bc9a:	dd06      	ble.n	2401bcaa <scalbnf+0x7e>
2401bc9c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
2401bca0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
2401bca4:	ee00 3a10 	vmov	s0, r3
2401bca8:	4770      	bx	lr
2401bcaa:	f110 0f16 	cmn.w	r0, #22
2401bcae:	da09      	bge.n	2401bcc4 <scalbnf+0x98>
2401bcb0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 2401bce8 <scalbnf+0xbc>
2401bcb4:	eddf 6a0d 	vldr	s13, [pc, #52]	; 2401bcec <scalbnf+0xc0>
2401bcb8:	ee10 3a10 	vmov	r3, s0
2401bcbc:	eeb0 7a67 	vmov.f32	s14, s15
2401bcc0:	2b00      	cmp	r3, #0
2401bcc2:	e7da      	b.n	2401bc7a <scalbnf+0x4e>
2401bcc4:	3019      	adds	r0, #25
2401bcc6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
2401bcca:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
2401bcce:	ed9f 0a08 	vldr	s0, [pc, #32]	; 2401bcf0 <scalbnf+0xc4>
2401bcd2:	ee07 3a90 	vmov	s15, r3
2401bcd6:	e7d7      	b.n	2401bc88 <scalbnf+0x5c>
2401bcd8:	ffff3cb0 	.word	0xffff3cb0
2401bcdc:	4c000000 	.word	0x4c000000
2401bce0:	7149f2ca 	.word	0x7149f2ca
2401bce4:	f149f2ca 	.word	0xf149f2ca
2401bce8:	0da24260 	.word	0x0da24260
2401bcec:	8da24260 	.word	0x8da24260
2401bcf0:	33000000 	.word	0x33000000

2401bcf4 <sinTable_f32>:
2401bcf4:	00000000 3c490e92 3cc90ab1 3d16c32b     ......I<...<+..=
2401bd04:	3d48fb2e 3d7b2b75 3d96a904 3dafb680     ..H=u+{=...=...=
2401bd14:	3dc8bd36 3de1bc2f 3dfab273 3e09cf87     6..=/..=s..=...>
2401bd24:	3e164083 3e22abb5 3e2f10a2 3e3b6ecf     .@.>..">../>.n;>
2401bd34:	3e47c5c2 3e541501 3e605c13 3e6c9a7f     ..G>..T>.\`>..l>
2401bd44:	3e78cfcc 3e827dc0 3e888e93 3e8e9a22     ..x>.}.>...>"..>
2401bd54:	3e94a032 3e9aa086 3ea09ae5 3ea68f12     2..>...>...>...>
2401bd64:	3eac7cd4 3eb263ef 3eb8442a 3ebe1d49     .|.>.c.>*D.>I..>
2401bd74:	3ec3ef15 3ec9b953 3ecf7bca 3ed53641     ...>S..>.{.>A6.>
2401bd84:	3edae880 3ee0924f 3ee63375 3eebcbbb     ...>O..>u3.>...>
2401bd94:	3ef15aea 3ef6e0cb 3efc5d27 3f00e7e4     .Z.>...>'].>...?
2401bda4:	3f039c3d 3f064b82 3f08f59b 3f0b9a6b     =..?.K.?...?k..?
2401bdb4:	3f0e39da 3f10d3cd 3f13682a 3f15f6d9     .9.?...?*h.?...?
2401bdc4:	3f187fc0 3f1b02c6 3f1d7fd1 3f1ff6cb     ...?...?...?...?
2401bdd4:	3f226799 3f24d225 3f273656 3f299415     .g"?%.$?V6'?..)?
2401bde4:	3f2beb4a 3f2e3bde 3f3085bb 3f32c8c9     J.+?.;.?..0?..2?
2401bdf4:	3f3504f3 3f373a23 3f396842 3f3b8f3b     ..5?#:7?Bh9?;.;?
2401be04:	3f3daef9 3f3fc767 3f41d870 3f43e201     ..=?g.??p.A?..C?
2401be14:	3f45e403 3f47de65 3f49d112 3f4bbbf8     ..E?e.G?..I?..K?
2401be24:	3f4d9f02 3f4f7a20 3f514d3d 3f531849     ..M? zO?=MQ?I.S?
2401be34:	3f54db31 3f5695e5 3f584853 3f59f26a     1.T?..V?SHX?j.Y?
2401be44:	3f5b941a 3f5d2d53 3f5ebe05 3f604621     ..[?S-]?..^?!F`?
2401be54:	3f61c597 3f633c5a 3f64aa59 3f660f88     ..a?Z<c?Y.d?..f?
2401be64:	3f676bd8 3f68bf3c 3f6a09a7 3f6b4b0c     .kg?<.h?..j?.Kk?
2401be74:	3f6c835e 3f6db293 3f6ed89e 3f6ff573     ^.l?..m?..n?s.o?
2401be84:	3f710908 3f721352 3f731447 3f740bdd     ..q?R.r?G.s?..t?
2401be94:	3f74fa0b 3f75dec6 3f76ba07 3f778bc5     ..t?..u?..v?..w?
2401bea4:	3f7853f8 3f791298 3f79c79d 3f7a7302     .Sx?..y?..y?.sz?
2401beb4:	3f7b14be 3f7baccd 3f7c3b28 3f7cbfc9     ..{?..{?(;|?..|?
2401bec4:	3f7d3aac 3f7dabcc 3f7e1323 3f7e70b0     .:}?..}?#.~?.p~?
2401bed4:	3f7ec46d 3f7f0e58 3f7f4e6d 3f7f84ab     m.~?X..?mN.?...?
2401bee4:	3f7fb10f 3f7fd397 3f7fec43 3f7ffb11     ...?...?C..?...?
2401bef4:	3f800000 3f7ffb11 3f7fec43 3f7fd397     ...?...?C..?...?
2401bf04:	3f7fb10f 3f7f84ab 3f7f4e6d 3f7f0e58     ...?...?mN.?X..?
2401bf14:	3f7ec46d 3f7e70b0 3f7e1323 3f7dabcc     m.~?.p~?#.~?..}?
2401bf24:	3f7d3aac 3f7cbfc9 3f7c3b28 3f7baccd     .:}?..|?(;|?..{?
2401bf34:	3f7b14be 3f7a7302 3f79c79d 3f791298     ..{?.sz?..y?..y?
2401bf44:	3f7853f8 3f778bc5 3f76ba07 3f75dec6     .Sx?..w?..v?..u?
2401bf54:	3f74fa0b 3f740bdd 3f731447 3f721352     ..t?..t?G.s?R.r?
2401bf64:	3f710908 3f6ff573 3f6ed89e 3f6db293     ..q?s.o?..n?..m?
2401bf74:	3f6c835e 3f6b4b0c 3f6a09a7 3f68bf3c     ^.l?.Kk?..j?<.h?
2401bf84:	3f676bd8 3f660f88 3f64aa59 3f633c5a     .kg?..f?Y.d?Z<c?
2401bf94:	3f61c597 3f604621 3f5ebe05 3f5d2d53     ..a?!F`?..^?S-]?
2401bfa4:	3f5b941a 3f59f26a 3f584853 3f5695e5     ..[?j.Y?SHX?..V?
2401bfb4:	3f54db31 3f531849 3f514d3d 3f4f7a20     1.T?I.S?=MQ? zO?
2401bfc4:	3f4d9f02 3f4bbbf8 3f49d112 3f47de65     ..M?..K?..I?e.G?
2401bfd4:	3f45e403 3f43e201 3f41d870 3f3fc767     ..E?..C?p.A?g.??
2401bfe4:	3f3daef9 3f3b8f3b 3f396842 3f373a23     ..=?;.;?Bh9?#:7?
2401bff4:	3f3504f3 3f32c8c9 3f3085bb 3f2e3bde     ..5?..2?..0?.;.?
2401c004:	3f2beb4a 3f299415 3f273656 3f24d225     J.+?..)?V6'?%.$?
2401c014:	3f226799 3f1ff6cb 3f1d7fd1 3f1b02c6     .g"?...?...?...?
2401c024:	3f187fc0 3f15f6d9 3f13682a 3f10d3cd     ...?...?*h.?...?
2401c034:	3f0e39da 3f0b9a6b 3f08f59b 3f064b82     .9.?k..?...?.K.?
2401c044:	3f039c3d 3f00e7e4 3efc5d27 3ef6e0cb     =..?...?'].>...>
2401c054:	3ef15aea 3eebcbbb 3ee63375 3ee0924f     .Z.>...>u3.>O..>
2401c064:	3edae880 3ed53641 3ecf7bca 3ec9b953     ...>A6.>.{.>S..>
2401c074:	3ec3ef15 3ebe1d49 3eb8442a 3eb263ef     ...>I..>*D.>.c.>
2401c084:	3eac7cd4 3ea68f12 3ea09ae5 3e9aa086     .|.>...>...>...>
2401c094:	3e94a032 3e8e9a22 3e888e93 3e827dc0     2..>"..>...>.}.>
2401c0a4:	3e78cfcc 3e6c9a7f 3e605c13 3e541501     ..x>..l>.\`>..T>
2401c0b4:	3e47c5c2 3e3b6ecf 3e2f10a2 3e22abb5     ..G>.n;>../>..">
2401c0c4:	3e164083 3e09cf87 3dfab273 3de1bc2f     .@.>...>s..=/..=
2401c0d4:	3dc8bd36 3dafb680 3d96a904 3d7b2b75     6..=...=...=u+{=
2401c0e4:	3d48fb2e 3d16c32b 3cc90ab1 3c490e92     ..H=+..=...<..I<
2401c0f4:	00000000 bc490e92 bcc90ab1 bd16c32b     ......I.....+...
2401c104:	bd48fb2e bd7b2b75 bd96a904 bdafb680     ..H.u+{.........
2401c114:	bdc8bd36 bde1bc2f bdfab273 be09cf87     6.../...s.......
2401c124:	be164083 be22abb5 be2f10a2 be3b6ecf     .@....".../..n;.
2401c134:	be47c5c2 be541501 be605c13 be6c9a7f     ..G...T..\`...l.
2401c144:	be78cfcc be827dc0 be888e93 be8e9a22     ..x..}......"...
2401c154:	be94a032 be9aa086 bea09ae5 bea68f12     2...............
2401c164:	beac7cd4 beb263ef beb8442a bebe1d49     .|...c..*D..I...
2401c174:	bec3ef15 bec9b953 becf7bca bed53641     ....S....{..A6..
2401c184:	bedae880 bee0924f bee63375 beebcbbb     ....O...u3......
2401c194:	bef15aea bef6e0cb befc5d27 bf00e7e4     .Z......']......
2401c1a4:	bf039c3d bf064b82 bf08f59b bf0b9a6b     =....K......k...
2401c1b4:	bf0e39da bf10d3cd bf13682a bf15f6d9     .9......*h......
2401c1c4:	bf187fc0 bf1b02c6 bf1d7fd1 bf1ff6cb     ................
2401c1d4:	bf226799 bf24d225 bf273656 bf299415     .g".%.$.V6'...).
2401c1e4:	bf2beb4a bf2e3bde bf3085bb bf32c8c9     J.+..;....0...2.
2401c1f4:	bf3504f3 bf373a23 bf396842 bf3b8f3b     ..5.#:7.Bh9.;.;.
2401c204:	bf3daef9 bf3fc767 bf41d870 bf43e201     ..=.g.?.p.A...C.
2401c214:	bf45e403 bf47de65 bf49d112 bf4bbbf8     ..E.e.G...I...K.
2401c224:	bf4d9f02 bf4f7a20 bf514d3d bf531849     ..M. zO.=MQ.I.S.
2401c234:	bf54db31 bf5695e5 bf584853 bf59f26a     1.T...V.SHX.j.Y.
2401c244:	bf5b941a bf5d2d53 bf5ebe05 bf604621     ..[.S-]...^.!F`.
2401c254:	bf61c597 bf633c5a bf64aa59 bf660f88     ..a.Z<c.Y.d...f.
2401c264:	bf676bd8 bf68bf3c bf6a09a7 bf6b4b0c     .kg.<.h...j..Kk.
2401c274:	bf6c835e bf6db293 bf6ed89e bf6ff573     ^.l...m...n.s.o.
2401c284:	bf710908 bf721352 bf731447 bf740bdd     ..q.R.r.G.s...t.
2401c294:	bf74fa0b bf75dec6 bf76ba07 bf778bc5     ..t...u...v...w.
2401c2a4:	bf7853f8 bf791298 bf79c79d bf7a7302     .Sx...y...y..sz.
2401c2b4:	bf7b14be bf7baccd bf7c3b28 bf7cbfc9     ..{...{.(;|...|.
2401c2c4:	bf7d3aac bf7dabcc bf7e1323 bf7e70b0     .:}...}.#.~..p~.
2401c2d4:	bf7ec46d bf7f0e58 bf7f4e6d bf7f84ab     m.~.X...mN......
2401c2e4:	bf7fb10f bf7fd397 bf7fec43 bf7ffb11     ........C.......
2401c2f4:	bf800000 bf7ffb11 bf7fec43 bf7fd397     ........C.......
2401c304:	bf7fb10f bf7f84ab bf7f4e6d bf7f0e58     ........mN..X...
2401c314:	bf7ec46d bf7e70b0 bf7e1323 bf7dabcc     m.~..p~.#.~...}.
2401c324:	bf7d3aac bf7cbfc9 bf7c3b28 bf7baccd     .:}...|.(;|...{.
2401c334:	bf7b14be bf7a7302 bf79c79d bf791298     ..{..sz...y...y.
2401c344:	bf7853f8 bf778bc5 bf76ba07 bf75dec6     .Sx...w...v...u.
2401c354:	bf74fa0b bf740bdd bf731447 bf721352     ..t...t.G.s.R.r.
2401c364:	bf710908 bf6ff573 bf6ed89e bf6db293     ..q.s.o...n...m.
2401c374:	bf6c835e bf6b4b0c bf6a09a7 bf68bf3c     ^.l..Kk...j.<.h.
2401c384:	bf676bd8 bf660f88 bf64aa59 bf633c5a     .kg...f.Y.d.Z<c.
2401c394:	bf61c597 bf604621 bf5ebe05 bf5d2d53     ..a.!F`...^.S-].
2401c3a4:	bf5b941a bf59f26a bf584853 bf5695e5     ..[.j.Y.SHX...V.
2401c3b4:	bf54db31 bf531849 bf514d3d bf4f7a20     1.T.I.S.=MQ. zO.
2401c3c4:	bf4d9f02 bf4bbbf8 bf49d112 bf47de65     ..M...K...I.e.G.
2401c3d4:	bf45e403 bf43e201 bf41d870 bf3fc767     ..E...C.p.A.g.?.
2401c3e4:	bf3daef9 bf3b8f3b bf396842 bf373a23     ..=.;.;.Bh9.#:7.
2401c3f4:	bf3504f3 bf32c8c9 bf3085bb bf2e3bde     ..5...2...0..;..
2401c404:	bf2beb4a bf299415 bf273656 bf24d225     J.+...).V6'.%.$.
2401c414:	bf226799 bf1ff6cb bf1d7fd1 bf1b02c6     .g".............
2401c424:	bf187fc0 bf15f6d9 bf13682a bf10d3cd     ........*h......
2401c434:	bf0e39da bf0b9a6b bf08f59b bf064b82     .9..k........K..
2401c444:	bf039c3d bf00e7e4 befc5d27 bef6e0cb     =.......']......
2401c454:	bef15aea beebcbbb bee63375 bee0924f     .Z......u3..O...
2401c464:	bedae880 bed53641 becf7bca bec9b953     ....A6...{..S...
2401c474:	bec3ef15 bebe1d49 beb8442a beb263ef     ....I...*D...c..
2401c484:	beac7cd4 bea68f12 bea09ae5 be9aa086     .|..............
2401c494:	be94a032 be8e9a22 be888e93 be827dc0     2..."........}..
2401c4a4:	be78cfcc be6c9a7f be605c13 be541501     ..x...l..\`...T.
2401c4b4:	be47c5c2 be3b6ecf be2f10a2 be22abb5     ..G..n;.../...".
2401c4c4:	be164083 be09cf87 bdfab273 bde1bc2f     .@......s.../...
2401c4d4:	bdc8bd36 bdafb680 bd96a904 bd7b2b75     6...........u+{.
2401c4e4:	bd48fb2e bd16c32b bcc90ab1 bc490e92     ..H.+.........I.
2401c4f4:	80000000 62652e2a 00000070 53594850     ....*.ebp...PHYS
2401c504:	52545320 20202031 00002020 64656546      STR1     ..Feed
2401c514:	6b636162 00002020 64696c53 696f4e65     back  ..SlideNoi
2401c524:	00002073 63756c50 6469576b 00002074     s ..PluckWidt ..
2401c534:	6b636950 73696f4e 00002065 6b636950     PickNoise ..Pick
2401c544:	69537075 0000006d 20202020 20202020     upSim...        
2401c554:	00002020 20202020 20202020 00000020       ..         ...
2401c564:	53594850 52545320 20202032 00002020     PHYS STR2     ..
2401c574:	70657250 65646e49 00002078 64696c53     PrepIndex ..Slid
2401c584:	696f4e65 00006573 63756c50 736f506b     eNoise..PluckPos
2401c594:	00002020 61636544 20202079 00002020       ..Decay     ..
2401c5a4:	63756f54 20202068 00002020 6b636950     Touch     ..Pick
2401c5b4:	6f507075 00002073 706d6144 71657246     upPos ..DampFreq
2401c5c4:	00002020 6d414646 746e756f 00002020       ..FFAmount  ..
2401c5d4:	6d414246 746e756f 00002020 646c6f66     FBAmount  ..fold
2401c5e4:	74706544 00002068 70657270 58736f50     Depth ..prepPosX
2401c5f4:	00000020 70657270 59736f50 00000020      ...prepPosY ...
2401c604:	49444441 45564954 20202020 00002020     ADDITIVE      ..
2401c614:	73696f4e 20203165 00002020 73696f4e     Noise1    ..Nois
2401c624:	20203265 00002020 656e6f54 20202020     e2    ..Tone    
2401c634:	00002020 65727453 20686374 00002020       ..Stretch   ..
2401c644:	646e6152 79636544 00002020 646e6152     RandDecy  ..Rand
2401c654:	6e696147 00002020 73696f4e 6c6f5665     Gain  ..NoiseVol
2401c664:	00002020 41434f56 2020204c 00202020       ..VOCAL      .
2401c674:	48414c42 20202020 00002020 7062652e     BLAH      ...ebp
2401c684:	00000000 69617262 69622e6e 0000006e     ....brain.bin...

2401c694 <D1CorePrescTable>:
2401c694:	00000000 04030201 04030201 09080706     ................

2401c6a4 <flagBitshiftOffset.0>:
2401c6a4:	16100600 16100600                       ........

2401c6ac <SD_Driver>:
2401c6ac:	2400da99 2400dac9 2400dae9 2400db79     ...$...$...$y..$
2401c6bc:	2400db11 3c3a2a22 7f7c3f3e 00000000     ...$"*:<>?|.....
2401c6cc:	3d3b2c2b 00005d5b                       +,;=[]..

2401c6d4 <ExCvt>:
2401c6d4:	41455543 43414141 49454545 41414949     CUEAAAACEEEIIIAA
2401c6e4:	4f929245 55554f4f 4f554f59 9f9e4f9c     E..OOOUUYOUO.O..
2401c6f4:	554f4941 a7a6a5a5 abaaa9a8 afaeadac     AIOU............
2401c704:	b3b2b1b0 414141b4 bbbab9b8 bfbebdbc     .....AAA........
2401c714:	c3c2c1c0 4141c5c4 cbcac9c8 cfcecdcc     ......AA........
2401c724:	4545d1d1 49494945 dbdad949 df49dddc     ..EEEIIII.....I.
2401c734:	4f4fe14f e8e64f4f 555555e8 efee5959     O.OOOO...UUUYY..
2401c744:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

2401c754 <LfnOfs>:
2401c754:	07050301 12100e09 1c181614 0000001e     ................

2401c764 <Tbl>:
2401c764:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
2401c774:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
2401c784:	00e600c9 00f400c6 00f200f6 00f900fb     ................
2401c794:	00d600ff 00f800dc 00d800a3 019200d7     ................
2401c7a4:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
2401c7b4:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
2401c7c4:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
2401c7d4:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
2401c7e4:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
2401c7f4:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
2401c804:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
2401c814:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
2401c824:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
2401c834:	00da00de 00d900db 00dd00fd 00b400af     ................
2401c844:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
2401c854:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

2401c864 <cvt1.1>:
2401c864:	031a0061 031700e0 030700f8 000100ff     a...............
2401c874:	01000178 01320130 01390106 014a0110     x...0.2...9...J.
2401c884:	0179012e 01800106 0243004d 01820181     ..y.....M.C.....
2401c894:	01840182 01860184 01870187 018a0189     ................
2401c8a4:	018b018b 018e018d 0190018f 01910191     ................
2401c8b4:	01940193 019601f6 01980197 023d0198     ..............=.
2401c8c4:	019c019b 0220019d 01a0019f 01a201a0     ...... .........
2401c8d4:	01a401a2 01a601a4 01a701a7 01aa01a9     ................
2401c8e4:	01ac01ab 01ae01ac 01af01af 01b201b1     ................
2401c8f4:	01b301b3 01b501b5 01b801b7 01ba01b8     ................
2401c904:	01bc01bb 01be01bc 01c001f7 01c201c1     ................
2401c914:	01c401c3 01c401c5 01c801c7 01ca01c7     ................
2401c924:	01ca01cb 011001cd 000101dd 01de018e     ................
2401c934:	01f30112 01f10003 01f401f4 012801f8     ..............(.
2401c944:	01120222 0009023a 023b2c65 023d023b     "...:...e,;.;.=.
2401c954:	023f2c66 02410240 02460241 0253010a     f,?.@.A.A.F...S.
2401c964:	01810040 02550186 018a0189 018f0258     @.....U.....X...
2401c974:	0190025a 025d025c 025f025e 02610193     Z...\.].^._...a.
2401c984:	01940262 02650264 02670266 01960197     b...d.e.f.g.....
2401c994:	2c62026a 026d026c 019c026e 02710270     j.b,l.m.n...p.q.
2401c9a4:	0273019d 019f0274 02770276 02790278     ..s.t...v.w.x.y.
2401c9b4:	027b027a 2c64027c 027f027e 028101a6     z.{.|.d,~.......
2401c9c4:	01a90282 02850284 02870286 024401ae     ..............D.
2401c9d4:	01b201b1 028d0245 028f028e 02910290     ....E...........
2401c9e4:	037b01b7 03fd0003 03ff03fe 000403ac     ..{.............
2401c9f4:	03880386 038a0389 031103b1 000203c2     ................
2401ca04:	03a303a3 030803c4 000303cc 038e038c     ................
2401ca14:	03d8038f 03f20118 03f9000a 03f403f3     ................
2401ca24:	03f603f5 03f703f7 03fa03f9 043003fa     ..............0.
2401ca34:	04500320 04600710 048a0122 04c10136      .P...`."...6...
2401ca44:	04cf010e 04c00001 014404d0 04260561     ..........D.a.&.
2401ca54:	00000000                                ....

2401ca58 <cvt2.0>:
2401ca58:	00011d7d 1e002c63 1ea00196 1f00015a     }...c,......Z...
2401ca68:	1f100608 1f200606 1f300608 1f400608     ...... ...0...@.
2401ca78:	1f510606 1f590007 1f5b1f52 1f5d1f54     ..Q...Y.R.[.T.].
2401ca88:	1f5f1f56 06081f60 000e1f70 1fbb1fba     V._.`...p.......
2401ca98:	1fc91fc8 1fcb1fca 1fdb1fda 1ff91ff8     ................
2401caa8:	1feb1fea 1ffb1ffa 06081f80 06081f90     ................
2401cab8:	06081fa0 00041fb0 1fb91fb8 1fbc1fb2     ................
2401cac8:	00011fcc 1fd01fc3 1fe00602 1fe50602     ................
2401cad8:	1fec0001 00011ff2 214e1ffc 21320001     ..........N!..2!
2401cae8:	02102170 00012184 24d02183 2c30051a     p!...!...!.$..0,
2401caf8:	2c60042f 2c670102 2c750106 2c800102     /.`,..g,..u,...,
2401cb08:	2d000164 ff410826 0000031a              d..-&.A.....

2401cb14 <__filterTanhTable_48000>:
2401cb14:	3a0c4647 3a0c8a33 3a0cce41 3a0d126f     GF.:3..:A..:o..:
2401cb24:	3a0d56be 3a0d9b2e 3a0ddfc0 3a0e2472     .V.:...:...:r$.:
2401cb34:	3a0e6946 3a0eae3c 3a0ef352 3a0f388a     Fi.:<..:R..:.8.:
2401cb44:	3a0f7de4 3a0fc35f 3a1008fc 3a104eba     .}.:_..:...:.N.:
2401cb54:	3a10949a 3a10da9d 3a1120c1 3a116707     ...:...:. .:.g.:
2401cb64:	3a11ad6f 3a11f3f9 3a123aa5 3a128173     o..:...:.:.:s..:
2401cb74:	3a12c864 3a130f77 3a1356ad 3a139e05     d..:w..:.V.:...:
2401cb84:	3a13e57f 3a142d1c 3a1474dc 3a14bcbf     ...:.-.:.t.:...:
2401cb94:	3a1504c4 3a154ced 3a159538 3a15dda6     ...:.L.:8..:...:
2401cba4:	3a162637 3a166eec 3a16b7c3 3a1700be     7&.:.n.:...:...:
2401cbb4:	3a1749dc 3a17931e 3a17dc83 3a18260c     .I.:...:...:.&.:
2401cbc4:	3a186fb8 3a18b988 3a19037c 3a194d93     .o.:...:|..:.M.:
2401cbd4:	3a1997ce 3a19e22e 3a1a2cb1 3a1a7758     ...:...:.,.:Xw.:
2401cbe4:	3a1ac224 3a1b0d14 3a1b5828 3a1ba360     $..:...:(X.:`..:
2401cbf4:	3a1beebd 3a1c3a3e 3a1c85e4 3a1cd1af     ...:>:.:...:...:
2401cc04:	3a1d1d9e 3a1d69b2 3a1db5eb 3a1e0248     ...:.i.:...:H..:
2401cc14:	3a1e4ecb 3a1e9b73 3a1ee840 3a1f3532     .N.:s..:@..:25.:
2401cc24:	3a1f8249 3a1fcf86 3a201ce8 3a206a6f     I..:...:.. :oj :
2401cc34:	3a20b81c 3a2105ef 3a2153e7 3a21a205     .. :..!:.S!:..!:
2401cc44:	3a21f049 3a223eb3 3a228d43 3a22dbf9     I.!:.>":C.":..":
2401cc54:	3a232ad5 3a2379d7 3a23c8ff 3a24184e     .*#:.y#:..#:N.$:
2401cc64:	3a2467c3 3a24b75e 3a250721 3a255709     .g$:^.$:!.%:.W%:
2401cc74:	3a25a719 3a25f74f 3a2647ac 3a269830     ..%:O.%:.G&:0.&:
2401cc84:	3a26e8db 3a2739ad 3a278aa6 3a27dbc7     ..&:.9':..':..':
2401cc94:	3a282d0e 3a287e7d 3a28d014 3a2921d2     .-(:}~(:..(:.!):
2401cca4:	3a2973b7 3a29c5c4 3a2a17f9 3a2a6a56     .s):..):..*:Vj*:
2401ccb4:	3a2abcda 3a2b0f87 3a2b625c 3a2bb558     ..*:..+:\b+:X.+:
2401ccc4:	3a2c087d 3a2c5bca 3a2caf40 3a2d02de     }.,:.[,:@.,:..-:
2401ccd4:	3a2d56a4 3a2daa93 3a2dfeaa 3a2e52eb     .V-:..-:..-:.R.:
2401cce4:	3a2ea754 3a2efbe6 3a2f50a1 3a2fa585     T..:...:.P/:../:
2401ccf4:	3a2ffa92 3a304fc8 3a30a527 3a30fab0     ../:.O0:'.0:..0:
2401cd04:	3a315062 3a31a63e 3a31fc44 3a325273     bP1:>.1:D.1:sR2:
2401cd14:	3a32a8cb 3a32ff4e 3a3355fa 3a33acd0     ..2:N.2:.U3:..3:
2401cd24:	3a3403d1 3a345afb 3a34b250 3a3509cf     ..4:.Z4:P.4:..5:
2401cd34:	3a356179 3a35b94c 3a36114b 3a366974     ya5:L.5:K.6:ti6:
2401cd44:	3a36c1c8 3a371a46 3a3772ef 3a37cbc3     ..6:F.7:.r7:..7:
2401cd54:	3a3824c3 3a387ded 3a38d743 3a3930c3     .$8:.}8:C.8:.09:
2401cd64:	3a398a6f 3a39e447 3a3a3e4a 3a3a9879     o.9:G.9:J>::y.::
2401cd74:	3a3af2d3 3a3b4d59 3a3ba80b 3a3c02e9     ..::YM;:..;:..<:
2401cd84:	3a3c5df2 3a3cb928 3a3d148a 3a3d7019     .]<:(.<:..=:.p=:
2401cd94:	3a3dcbd3 3a3e27ba 3a3e83ce 3a3ee00e     ..=:.'>:..>:..>:
2401cda4:	3a3f3c7b 3a3f9914 3a3ff5da 3a4052ce     {<?:..?:..?:.R@:
2401cdb4:	3a40afee 3a410d3b 3a416ab6 3a41c85e     ..@:;.A:.jA:^.A:
2401cdc4:	3a422633 3a428436 3a42e266 3a4340c4     3&B:6.B:f.B:.@C:
2401cdd4:	3a439f4f 3a43fe08 3a445cef 3a44bc04     O.C:..C:.\D:..D:
2401cde4:	3a451b48 3a457ab9 3a45da58 3a463a26     H.E:.zE:X.E:&:F:
2401cdf4:	3a469a22 3a46fa4d 3a475aa6 3a47bb2e     ".F:M.F:.ZG:..G:
2401ce04:	3a481be4 3a487cca 3a48ddde 3a493f21     ..H:.|H:..H:!?I:
2401ce14:	3a49a094 3a4a0235 3a4a6406 3a4ac606     ..I:5.J:.dJ:..J:
2401ce24:	3a4b2836 3a4b8a95 3a4bed24 3a4c4fe3     6(K:..K:$.K:.OL:
2401ce34:	3a4cb2d1 3a4d15ef 3a4d793e 3a4ddcbc     ..L:..M:>yM:..M:
2401ce44:	3a4e406b 3a4ea44a 3a4f0859 3a4f6c98     k@N:J.N:Y.O:.lO:
2401ce54:	3a4fd109 3a5035a9 3a509a7b 3a50ff7d     ..O:.5P:{.P:}.P:
2401ce64:	3a5164b1 3a51ca15 3a522faa 3a529571     .dQ:..Q:./R:q.R:
2401ce74:	3a52fb69 3a536192 3a53c7ed 3a542e79     i.R:.aS:..S:y.T:
2401ce84:	3a549537 3a54fc26 3a556348 3a55ca9b     7.T:&.T:HcU:..U:
2401ce94:	3a563221 3a5699d8 3a5701c2 3a5769de     !2V:..V:..W:.iW:
2401cea4:	3a57d22d 3a583aae 3a58a361 3a590c48     -.W:.:X:a.X:H.Y:
2401ceb4:	3a597561 3a59dead 3a5a482c 3a5ab1de     auY:..Y:,HZ:..Z:
2401cec4:	3a5b1bc3 3a5b85dc 3a5bf028 3a5c5aa7     ..[:..[:(.[:.Z\:
2401ced4:	3a5cc55a 3a5d3041 3a5d9b5b 3a5e06aa     Z.\:A0]:[.]:..^:
2401cee4:	3a5e722c 3a5edde2 3a5f49cd 3a5fb5eb     ,r^:..^:.I_:.._:
2401cef4:	3a60223e 3a608ec6 3a60fb82 3a616873     >"`:..`:..`:sha:
2401cf04:	3a61d598 3a6242f2 3a62b082 3a631e46     ..a:.Bb:..b:F.c:
2401cf14:	3a638c3f 3a63fa6e 3a6468d2 3a64d76c     ?.c:n.c:.hd:l.d:
2401cf24:	3a65463b 3a65b53f 3a66247a 3a6693ea     ;Fe:?.e:z$f:..f:
2401cf34:	3a670390 3a67736d 3a67e37f 3a6853c8     ..g:msg:..g:.Sh:
2401cf44:	3a68c447 3a6934fd 3a69a5e9 3a6a170c     G.h:.4i:..i:..j:
2401cf54:	3a6a8866 3a6af9f6 3a6b6bbe 3a6bddbc     f.j:..j:.kk:..k:
2401cf64:	3a6c4ff2 3a6cc25f 3a6d3504 3a6da7e0     .Ol:_.l:.5m:..m:
2401cf74:	3a6e1af4 3a6e8e3f 3a6f01c2 3a6f757d     ..n:?.n:..o:}uo:
2401cf84:	3a6fe971 3a705d9c 3a70d200 3a71469c     q.o:.]p:..p:.Fq:
2401cf94:	3a71bb70 3a72307d 3a72a5c3 3a731b41     p.q:}0r:..r:A.s:
2401cfa4:	3a7390f8 3a7406e9 3a747d12 3a74f375     ..s:..t:.}t:u.t:
2401cfb4:	3a756a11 3a75e0e6 3a7657f5 3a76cf3e     .ju:..u:.Wv:>.v:
2401cfc4:	3a7746c0 3a77be7d 3a783673 3a78aea3     .Fw:}.w:s6x:..x:
2401cfd4:	3a79270e 3a799fb2 3a7a1892 3a7a91ab     .'y:..y:..z:..z:
2401cfe4:	3a7b0b00 3a7b848f 3a7bfe59 3a7c785e     ..{:..{:Y.{:^x|:
2401cff4:	3a7cf29e 3a7d6d19 3a7de7d0 3a7e62c2     ..|:.m}:..}:.b~:
2401d004:	3a7eddef 3a7f5958 3a7fd4fd 3a80286f     ..~:XY.:...:o(.:
2401d014:	3a80667d 3a80a4aa 3a80e2f4 3a81215d     }f.:...:...:]!.:
2401d024:	3a815fe4 3a819e89 3a81dd4d 3a821c2f     ._.:...:M..:/..:
2401d034:	3a825b2f 3a829a4e 3a82d98b 3a8318e8     /[.:N..:...:...:
2401d044:	3a835862 3a8397fc 3a83d7b4 3a84178b     bX.:...:...:...:
2401d054:	3a845781 3a849796 3a84d7ca 3a85181d     .W.:...:...:...:
2401d064:	3a855890 3a859921 3a85d9d2 3a861aa2     .X.:!..:...:...:
2401d074:	3a865b92 3a869ca0 3a86ddcf 3a871f1d     .[.:...:...:...:
2401d084:	3a87608a 3a87a218 3a87e3c5 3a882592     .`.:...:...:.%.:
2401d094:	3a88677e 3a88a98b 3a88ebb7 3a892e04     ~g.:...:...:...:
2401d0a4:	3a897071 3a89b2fe 3a89f5ab 3a8a3878     qp.:...:...:x8.:
2401d0b4:	3a8a7b66 3a8abe74 3a8b01a3 3a8b44f2     f{.:t..:...:.D.:
2401d0c4:	3a8b8862 3a8bcbf2 3a8c0fa3 3a8c5375     b..:...:...:uS.:
2401d0d4:	3a8c9768 3a8cdb7b 3a8d1fb0 3a8d6406     h..:{..:...:.d.:
2401d0e4:	3a8da87c 3a8ded14 3a8e31cd 3a8e76a8     |..:...:.1.:.v.:
2401d0f4:	3a8ebba3 3a8f00c0 3a8f45ff 3a8f8b5f     ...:...:.E.:_..:
2401d104:	3a8fd0e1 3a901684 3a905c49 3a90a230     ...:...:I\.:0..:
2401d114:	3a90e839 3a912e63 3a9174b0 3a91bb1f     9..:c..:.t.:...:
2401d124:	3a9201af 3a924862 3a928f37 3a92d62f     ...:bH.:7..:/..:
2401d134:	3a931d49 3a936485 3a93abe4 3a93f365     I..:.d.:...:e..:
2401d144:	3a943b09 3a9482cf 3a94cab9 3a9512c5     .;.:...:...:...:
2401d154:	3a955af4 3a95a346 3a95ebbb 3a963453     .Z.:F..:...:S4.:
2401d164:	3a967d0e 3a96c5ed 3a970eef 3a975814     .}.:...:...:.X.:
2401d174:	3a97a15c 3a97eac8 3a983458 3a987e0b     \..:...:X4.:.~.:
2401d184:	3a98c7e2 3a9911dc 3a995bfb 3a99a63d     ...:...:.[.:=..:
2401d194:	3a99f0a4 3a9a3b2e 3a9a85dc 3a9ad0af     ...:.;.:...:...:
2401d1a4:	3a9b1ba6 3a9b66c1 3a9bb200 3a9bfd64     ...:.f.:...:d..:
2401d1b4:	3a9c48ed 3a9c949a 3a9ce06b 3a9d2c62     .H.:...:k..:b,.:
2401d1c4:	3a9d787d 3a9dc4bd 3a9e1122 3a9e5dac     }x.:...:"..:.].:
2401d1d4:	3a9eaa5a 3a9ef72f 3a9f4428 3a9f9146     Z..:/..:(D.:F..:
2401d1e4:	3a9fde8a 3aa02bf4 3aa07982 3aa0c737     ...:.+.:.y.:7..:
2401d1f4:	3aa11511 3aa16310 3aa1b136 3aa1ff81     ...:.c.:6..:...:
2401d204:	3aa24df2 3aa29c8a 3aa2eb47 3aa33a2a     .M.:...:G..:*:.:
2401d214:	3aa38934 3aa3d864 3aa427ba 3aa47736     4..:d..:.'.:6w.:
2401d224:	3aa4c6d9 3aa516a3 3aa56693 3aa5b6aa     ...:...:.f.:...:
2401d234:	3aa606e8 3aa6574d 3aa6a7d8 3aa6f88b     ...:MW.:...:...:
2401d244:	3aa74964 3aa79a65 3aa7eb8d 3aa83cdd     dI.:e..:...:.<.:
2401d254:	3aa88e53 3aa8dff1 3aa931b7 3aa983a4     S..:...:.1.:...:
2401d264:	3aa9d5b9 3aaa27f6 3aaa7a5a 3aaacce7     ...:.'.:Zz.:...:
2401d274:	3aab1f9b 3aab7277 3aabc57c 3aac18a9     ...:wr.:|..:...:
2401d284:	3aac6bfe 3aacbf7b 3aad1321 3aad66ef     .k.:{..:!..:.f.:
2401d294:	3aadbae6 3aae0f05 3aae634d 3aaeb7be     ...:...:Mc.:...:
2401d2a4:	3aaf0c58 3aaf611b 3aafb607 3ab00b1c     X..:.a.:...:...:
2401d2b4:	3ab0605b 3ab0b5c2 3ab10b53 3ab1610d     [`.:...:S..:.a.:
2401d2c4:	3ab1b6f1 3ab20cff 3ab26336 3ab2b996     ...:...:6c.:...:
2401d2d4:	3ab31021 3ab366d6 3ab3bdb4 3ab414bd     !..:.f.:...:...:
2401d2e4:	3ab46bf0 3ab4c34d 3ab51ad4 3ab57286     .k.:M..:...:.r.:
2401d2f4:	3ab5ca62 3ab62268 3ab67a9a 3ab6d2f6     b..:h".:.z.:...:
2401d304:	3ab72b7c 3ab7842e 3ab7dd0b 3ab83612     |+.:...:...:.6.:
2401d314:	3ab88f45 3ab8e8a3 3ab9422c 3ab99be1     E..:...:,B.:...:
2401d324:	3ab9f5c1 3aba4fcc 3abaaa03 3abb0466     ...:.O.:...:f..:
2401d334:	3abb5ef5 3abbb9af 3abc1495 3abc6fa8     .^.:...:...:.o.:
2401d344:	3abccae6 3abd2651 3abd81e8 3abdddab     ...:Q&.:...:...:
2401d354:	3abe399b 3abe95b7 3abef200 3abf4e75     .9.:...:...:uN.:
2401d364:	3abfab18 3ac007e7 3ac064e3 3ac0c20c     ...:...:.d.:...:
2401d374:	3ac11f62 3ac17ce5 3ac1da96 3ac23874     b..:.|.:...:t8.:
2401d384:	3ac29680 3ac2f4b9 3ac3531f 3ac3b1b4     ...:...:.S.:...:
2401d394:	3ac41076 3ac46f66 3ac4ce84 3ac52dd0     v..:fo.:...:.-.:
2401d3a4:	3ac58d4a 3ac5ecf3 3ac64cc9 3ac6accf     J..:...:.L.:...:
2401d3b4:	3ac70d02 3ac76d65 3ac7cdf5 3ac82eb5     ...:em.:...:...:
2401d3c4:	3ac88fa4 3ac8f0c1 3ac9520e 3ac9b389     ...:...:.R.:...:
2401d3d4:	3aca1534 3aca770e 3acad918 3acb3b51     4..:.w.:...:Q;.:
2401d3e4:	3acb9db9 3acc0051 3acc6319 3accc611     ...:Q..:.c.:...:
2401d3f4:	3acd2939 3acd8c90 3acdf018 3ace53d0     9).:...:...:.S.:
2401d404:	3aceb7b8 3acf1bd1 3acf801a 3acfe494     ...:...:...:...:
2401d414:	3ad0493e 3ad0ae19 3ad11325 3ad17862     >I.:...:%..:bx.:
2401d424:	3ad1ddd0 3ad2436f 3ad2a93f 3ad30f40     ...:oC.:?..:@..:
2401d434:	3ad37573 3ad3dbd7 3ad4426d 3ad4a935     su.:...:mB.:5..:
2401d444:	3ad5102e 3ad5775a 3ad5deb7 3ad64646     ...:Zw.:...:FF.:
2401d454:	3ad6ae07 3ad715fb 3ad77e21 3ad7e679     ...:...:!~.:y..:
2401d464:	3ad84f04 3ad8b7c2 3ad920b2 3ad989d5     .O.:...:. .:...:
2401d474:	3ad9f32b 3ada5cb4 3adac670 3adb305f     +..:.\.:p..:_0.:
2401d484:	3adb9a82 3adc04d8 3adc6f61 3adcda1e     ...:...:ao.:...:
2401d494:	3add450f 3addb034 3ade1b8c 3ade8719     .E.:4..:...:...:
2401d4a4:	3adef2d9 3adf5ece 3adfcaf6 3ae03754     ...:.^.:...:T7.:
2401d4b4:	3ae0a3e6 3ae110ac 3ae17da7 3ae1ead7     ...:...:.}.:...:
2401d4c4:	3ae2583b 3ae2c5d5 3ae333a3 3ae3a1a7     ;X.:...:.3.:...:
2401d4d4:	3ae40fe0 3ae47e4f 3ae4ecf3 3ae55bcc     ...:O~.:...:.[.:
2401d4e4:	3ae5cadc 3ae63a21 3ae6a99b 3ae7194c     ...:!:.:...:L..:
2401d4f4:	3ae78933 3ae7f950 3ae869a4 3ae8da2e     3..:P..:.i.:...:
2401d504:	3ae94aee 3ae9bbe5 3aea2d12 3aea9e77     .J.:...:.-.:w..:
2401d514:	3aeb1012 3aeb81e4 3aebf3ee 3aec662e     ...:...:...:.f.:
2401d524:	3aecd8a6 3aed4b56 3aedbe3d 3aee315b     ...:VK.:=..:[1.:
2401d534:	3aeea4b1 3aef1840 3aef8c06 3af00004     ...:@..:...:...:
2401d544:	3af0743a 3af0e8a9 3af15d50 3af1d22f     :t.:...:P].:/..:
2401d554:	3af24747 3af2bc98 3af33222 3af3a7e4     GG.:...:"2.:...:
2401d564:	3af41ddf 3af49414 3af50a82 3af58129     ...:...:...:)..:
2401d574:	3af5f80a 3af66f24 3af6e678 3af75e06     ...:$o.:x..:.^.:
2401d584:	3af7d5cd 3af84dcf 3af8c60a 3af93e80     ...:.M.:...:.>.:
2401d594:	3af9b731 3afa301b 3afaa940 3afb22a0     1..:.0.:@..:.".:
2401d5a4:	3afb9c3b 3afc1610 3afc9021 3afd0a6d     ;..:...:!..:m..:
2401d5b4:	3afd84f3 3afdffb6 3afe7ab3 3afef5ec     ...:...:.z.:...:
2401d5c4:	3aff7161 3affed12 3b00347f 3b007293     aq.:...:.4.;.r.;
2401d5d4:	3b00b0c6 3b00ef16 3b012d85 3b016c12     ...;...;.-.;.l.;
2401d5e4:	3b01aabd 3b01e986 3b02286e 3b026775     ...;...;n(.;ug.;
2401d5f4:	3b02a699 3b02e5dd 3b03253f 3b0364c0     ...;...;?%.;.d.;
2401d604:	3b03a45f 3b03e41d 3b0423fb 3b0463f7     _..;...;.#.;.c.;
2401d614:	3b04a412 3b04e44c 3b0524a5 3b05651e     ...;L..;.$.;.e.;
2401d624:	3b05a5b5 3b05e66c 3b062742 3b066838     ...;l..;B'.;8h.;
2401d634:	3b06a94d 3b06ea82 3b072bd6 3b076d49     M..;...;.+.;Im.;
2401d644:	3b07aedd 3b07f090 3b083263 3b087456     ...;...;c2.;Vt.;
2401d654:	3b08b669 3b08f89c 3b093aef 3b097d62     i..;...;.:.;b}.;
2401d664:	3b09bff5 3b0a02a8 3b0a457c 3b0a8870     ...;...;|E.;p..;
2401d674:	3b0acb85 3b0b0eba 3b0b520f 3b0b9585     ...;...;.R.;...;
2401d684:	3b0bd91c 3b0c1cd4 3b0c60ac 3b0ca4a5     ...;...;.`.;...;
2401d694:	3b0ce8bf 3b0d2cfa 3b0d7157 3b0db5d4     ...;.,.;Wq.;...;
2401d6a4:	3b0dfa72 3b0e3f32 3b0e8413 3b0ec915     r..;2?.;...;...;
2401d6b4:	3b0f0e39 3b0f537e 3b0f98e4 3b0fde6d     9..;~S.;...;m..;
2401d6c4:	3b102417 3b1069e2 3b10afd0 3b10f5df     .$.;.i.;...;...;
2401d6d4:	3b113c10 3b118264 3b11c8d9 3b120f70     .<.;d..;...;p..;
2401d6e4:	3b12562a 3b129d06 3b12e404 3b132b24     *V.;...;...;$+.;
2401d6f4:	3b137267 3b13b9cd 3b140155 3b144900     gr.;...;U..;.I.;
2401d704:	3b1490cd 3b14d8bd 3b1520d0 3b156906     ...;...;. .;.i.;
2401d714:	3b15b15f 3b15f9db 3b16427a 3b168b3c     _..;...;zB.;<..;
2401d724:	3b16d421 3b171d2a 3b176656 3b17afa6     !..;*..;Vf.;...;
2401d734:	3b17f919 3b1842af 3b188c69 3b18d647     ...;.B.;i..;G..;
2401d744:	3b192049 3b196a6e 3b19b4b8 3b19ff25     I .;nj.;...;%..;
2401d754:	3b1a49b7 3b1a946c 3b1adf46 3b1b2a44     .I.;l..;F..;D*.;
2401d764:	3b1b7566 3b1bc0ad 3b1c0c18 3b1c57a7     fu.;...;...;.W.;
2401d774:	3b1ca35b 3b1cef34 3b1d3b32 3b1d8754     [..;4..;2;.;T..;
2401d784:	3b1dd39b 3b1e2008 3b1e6c99 3b1eb94f     ...;. .;.l.;O..;
2401d794:	3b1f062a 3b1f532b 3b1fa051 3b1fed9c     *..;+S.;Q..;...;
2401d7a4:	3b203b0d 3b2088a3 3b20d65f 3b212440     .; ;.. ;_. ;@$!;
2401d7b4:	3b217247 3b21c074 3b220ec7 3b225d3f     Gr!;t.!;..";?]";
2401d7c4:	3b22abde 3b22faa3 3b23498e 3b23989f     ..";..";.I#;..#;
2401d7d4:	3b23e7d6 3b243734 3b2486b8 3b24d663     ..#;47$;..$;c.$;
2401d7e4:	3b252634 3b25762c 3b25c64a 3b261690     4&%;,v%;J.%;..&;
2401d7f4:	3b2666fc 3b26b78f 3b27084a 3b27592b     .f&;..&;J.';+Y';
2401d804:	3b27aa33 3b27fb63 3b284cba 3b289e39     3.';c.';.L(;9.(;
2401d814:	3b28efde 3b2941ac 3b2993a1 3b29e5be     ..(;.A);..);..);
2401d824:	3b2a3802 3b2a8a6e 3b2add03 3b2b2fbf     .8*;n.*;..*;./+;
2401d834:	3b2b82a3 3b2bd5af 3b2c28e4 3b2c7c41     ..+;..+;.(,;A|,;
2401d844:	3b2ccfc6 3b2d2374 3b2d774a 3b2dcb49     ..,;t#-;Jw-;I.-;
2401d854:	3b2e1f71 3b2e73c1 3b2ec83a 3b2f1cdc     q..;.s.;:..;../;
2401d864:	3b2f71a7 3b2fc69b 3b301bb8 3b3070fe     .q/;../;..0;.p0;
2401d874:	3b30c66e 3b311c07 3b3171ca 3b31c7b6     n.0;..1;.q1;..1;
2401d884:	3b321dcb 3b32740b 3b32ca74 3b332107     ..2;.t2;t.2;.!3;
2401d894:	3b3377c3 3b33ceaa 3b3425bb 3b347cf6     .w3;..3;.%4;.|4;
2401d8a4:	3b34d45c 3b352beb 3b3583a5 3b35db8a     \.4;.+5;..5;..5;
2401d8b4:	3b363399 3b368bd2 3b36e437 3b373cc6     .36;..6;7.6;.<7;
2401d8c4:	3b379580 3b37ee65 3b384775 3b38a0b1     ..7;e.7;uG8;..8;
2401d8d4:	3b38fa17 3b3953a9 3b39ad66 3b3a074f     ..8;.S9;f.9;O.:;
2401d8e4:	3b3a6163 3b3abba2 3b3b160e 3b3b70a5     ca:;..:;..;;.p;;
2401d8f4:	3b3bcb68 3b3c2657 3b3c8172 3b3cdcb9     h.;;W&<;r.<;..<;
2401d904:	3b3d382d 3b3d93cc 3b3def98 3b3e4b91     -8=;..=;..=;.K>;
2401d914:	3b3ea7b6 3b3f0408 3b3f6086 3b3fbd31     ..>;..?;.`?;1.?;
2401d924:	3b401a09 3b40770e 3b40d440 3b41319f     ..@;.w@;@.@;.1A;
2401d934:	3b418f2b 3b41ece5 3b424acc 3b42a8e0     +.A;..A;.JB;..B;
2401d944:	3b430722 3b436592 3b43c430 3b4422fb     ".C;.eC;0.C;."D;
2401d954:	3b4481f4 3b44e11b 3b454070 3b459ff4     ..D;..D;p@E;..E;
2401d964:	3b45ffa5 3b465f85 3b46bf93 3b471fd0     ..E;._F;..F;..G;
2401d974:	3b47803c 3b47e0d6 3b48419f 3b48a297     <.G;..G;.AH;..H;
2401d984:	3b4903bd 3b496513 3b49c698 3b4a284c     ..I;.eI;..I;L(J;
2401d994:	3b4a8a30 3b4aec43 3b4b4e85 3b4bb0f7     0.J;C.J;.NK;..K;
2401d9a4:	3b4c1399 3b4c766a 3b4cd96b 3b4d3c9c     ..L;jvL;k.L;.<M;
2401d9b4:	3b4d9ffe 3b4e038f 3b4e6750 3b4ecb42     ..M;..N;PgN;B.N;
2401d9c4:	3b4f2f64 3b4f93b7 3b4ff83a 3b505cee     d/O;..O;:.O;.\P;
2401d9d4:	3b50c1d3 3b5126e9 3b518c2f 3b51f1a7     ..P;.&Q;/.Q;..Q;
2401d9e4:	3b52574f 3b52bd29 3b532335 3b538971     OWR;).R;5#S;q.S;
2401d9f4:	3b53efdf 3b54567f 3b54bd51 3b552454     ..S;.VT;Q.T;T$U;
2401da04:	3b558b89 3b55f2f0 3b565a89 3b56c255     ..U;..U;.ZV;U.V;
2401da14:	3b572a52 3b579282 3b57fae5 3b58637a     R*W;..W;..W;zcX;
2401da24:	3b58cc41 3b59353b 3b599e69 3b5a07c9     A.X;;5Y;i.Y;..Z;
2401da34:	3b5a715c 3b5adb22 3b5b451c 3b5baf48     \qZ;".Z;.E[;H.[;
2401da44:	3b5c19a8 3b5c843c 3b5cef03 3b5d59fe     ..\;<.\;..\;.Y];
2401da54:	3b5dc52d 3b5e3090 3b5e9c27 3b5f07f2     -.];.0^;'.^;.._;
2401da64:	3b5f73f1 3b5fe024 3b604c8c 3b60b928     .s_;$._;.L`;(.`;
2401da74:	3b6125f8 3b6192fe 3b620038 3b626da7     .%a;..a;8.b;.mb;
2401da84:	3b62db4b 3b634925 3b63b733 3b642577     K.b;%Ic;3.c;w%d;
2401da94:	3b6493f0 3b65029f 3b657183 3b65e09d     ..d;..e;.qe;..e;
2401daa4:	3b664fec 3b66bf72 3b672f2e 3b679f1f     .Of;r.f;./g;..g;
2401dab4:	3b680f47 3b687fa5 3b68f03a 3b696105     G.h;..h;:.h;.ai;
2401dac4:	3b69d207 3b6a433f 3b6ab4af 3b6b2655     ..i;?Cj;..j;U&k;
2401dad4:	3b6b9832 3b6c0a47 3b6c7c92 3b6cef15     2.k;G.l;.|l;..l;
2401dae4:	3b6d61d0 3b6dd4c2 3b6e47eb 3b6ebb4d     .am;..m;.Gn;M.n;
2401daf4:	3b6f2ee6 3b6fa2b7 3b7016c1 3b708b02     ..o;..o;..p;..p;
2401db04:	3b70ff7c 3b71742e 3b71e919 3b725e3c     |.p;.tq;..q;<^r;
2401db14:	3b72d398 3b73492d 3b73befb 3b743502     ..r;-Is;..s;.5t;
2401db24:	3b74ab42 3b7521bb 3b75986e 3b760f5a     B.t;.!u;n.u;Z.v;
2401db34:	3b768680 3b76fddf 3b777579 3b77ed4c     ..v;..v;yuw;L.w;
2401db44:	3b786559 3b78dda0 3b795622 3b79cede     Yex;..x;"Vy;..y;
2401db54:	3b7a47d4 3b7ac105 3b7b3a70 3b7bb417     .Gz;..z;p:{;..{;
2401db64:	3b7c2df8 3b7ca815 3b7d226c 3b7d9cff     .-|;..|;l"};..};
2401db74:	3b7e17cd 3b7e92d6 3b7f0e1b 3b7f899c     ..~;..~;...;...;
2401db84:	3b8002ac 3b8040a9 3b807ec3 3b80bcfb     ...;.@.;.~.;...;
2401db94:	3b80fb52 3b8139c6 3b817859 3b81b70a     R..;.9.;Yx.;...;
2401dba4:	3b81f5da 3b8234c8 3b8273d4 3b82b2ff     ...;.4.;.s.;...;
2401dbb4:	3b82f249 3b8331b1 3b837138 3b83b0de     I..;.1.;8q.;...;
2401dbc4:	3b83f0a2 3b843086 3b847088 3b84b0a9     ...;.0.;.p.;...;
2401dbd4:	3b84f0ea 3b853149 3b8571c8 3b85b266     ...;I1.;.q.;f..;
2401dbe4:	3b85f323 3b8633ff 3b8674fb 3b86b617     #..;.3.;.t.;...;
2401dbf4:	3b86f752 3b8738ac 3b877a26 3b87bbc0     R..;.8.;&z.;...;
2401dc04:	3b87fd7a 3b883f53 3b88814c 3b88c366     z..;S?.;L..;f..;
2401dc14:	3b89059f 3b8947f8 3b898a72 3b89cd0c     ...;.G.;r..;...;
2401dc24:	3b8a0fc5 3b8a52a0 3b8a959a 3b8ad8b5     ...;.R.;...;...;
2401dc34:	3b8b1bf1 3b8b5f4d 3b8ba2ca 3b8be667     ...;M_.;...;g..;
2401dc44:	3b8c2a25 3b8c6e04 3b8cb204 3b8cf625     %*.;.n.;...;%..;
2401dc54:	3b8d3a66 3b8d7ec9 3b8dc34d 3b8e07f2     f:.;.~.;M..;...;
2401dc64:	3b8e4cb8 3b8e91a0 3b8ed6a9 3b8f1bd3     .L.;...;...;...;
2401dc74:	3b8f611f 3b8fa68d 3b8fec1c 3b9031cd     .a.;...;...;.1.;
2401dc84:	3b90779f 3b90bd93 3b9103aa 3b9149e2     .w.;...;...;.I.;
2401dc94:	3b91903c 3b91d6b8 3b921d56 3b926417     <..;...;V..;.d.;
2401dca4:	3b92aafa 3b92f1ff 3b933926 3b938070     ...;...;&9.;p..;
2401dcb4:	3b93c7dd 3b940f6c 3b94571d 3b949ef2     ...;l..;.W.;...;
2401dcc4:	3b94e6e9 3b952f03 3b957740 3b95bfa0     ...;./.;@w.;...;
2401dcd4:	3b960823 3b9650c9 3b969992 3b96e27f     #..;.P.;...;...;
2401dce4:	3b972b8f 3b9774c2 3b97be19 3b980793     .+.;.t.;...;...;
2401dcf4:	3b985131 3b989af2 3b98e4d7 3b992ee0     1Q.;...;...;...;
2401dd04:	3b99790d 3b99c35d 3b9a0dd2 3b9a586b     .y.;]..;...;kX.;
2401dd14:	3b9aa328 3b9aee09 3b9b390e 3b9b8438     (..;...;.9.;8..;
2401dd24:	3b9bcf86 3b9c1af8 3b9c668f 3b9cb24b     ...;...;.f.;K..;
2401dd34:	3b9cfe2b 3b9d4a30 3b9d965a 3b9de2a9     +..;0J.;Z..;...;
2401dd44:	3b9e2f1c 3b9e7bb5 3b9ec873 3b9f1556     ./.;.{.;s..;V..;
2401dd54:	3b9f625e 3b9faf8b 3b9ffcde 3ba04a57     ^b.;...;...;WJ.;
2401dd64:	3ba097f4 3ba0e5b8 3ba133a1 3ba181b0     ...;...;.3.;...;
2401dd74:	3ba1cfe4 3ba21e3f 3ba26cbf 3ba2bb65     ...;?..;.l.;e..;
2401dd84:	3ba30a32 3ba35925 3ba3a83d 3ba3f77d     2..;%Y.;=..;}..;
2401dd94:	3ba446e2 3ba4966e 3ba4e621 3ba535fa     .F.;n..;!..;.5.;
2401dda4:	3ba585fa 3ba5d620 3ba6266e 3ba676e2     ...; ..;n&.;.v.;
2401ddb4:	3ba6c77d 3ba7183f 3ba76928 3ba7ba39     }..;?..;(i.;9..;
2401ddc4:	3ba80b71 3ba85cd0 3ba8ae56 3ba90004     q..;.\.;V..;...;
2401ddd4:	3ba951da 3ba9a3d7 3ba9f5fc 3baa4848     .Q.;...;...;HH.;
2401dde4:	3baa9abd 3baaed59 3bab401e 3bab930a     ...;Y..;.@.;...;
2401ddf4:	3babe61f 3bac395c 3bac8cc1 3bace04e     ...;\9.;...;N..;
2401de04:	3bad3404 3bad87e3 3baddbea 3bae301a     .4.;...;...;.0.;
2401de14:	3bae8473 3baed8f4 3baf2d9f 3baf8272     s..;...;.-.;r..;
2401de24:	3bafd76e 3bb02c94 3bb081e3 3bb0d75b     n..;.,.;...;[..;
2401de34:	3bb12cfd 3bb182c8 3bb1d8bc 3bb22eda     .,.;...;...;...;
2401de44:	3bb28522 3bb2db94 3bb3322f 3bb388f5     "..;...;/2.;...;
2401de54:	3bb3dfe4 3bb436fe 3bb48e42 3bb4e5b0     ...;.6.;B..;...;
2401de64:	3bb53d48 3bb5950b 3bb5ecf8 3bb64510     H=.;...;...;.E.;
2401de74:	3bb69d53 3bb6f5c0 3bb74e58 3bb7a71b     S..;...;XN.;...;
2401de84:	3bb80009 3bb85922 3bb8b266 3bb90bd5     ...;"Y.;f..;...;
2401de94:	3bb96570 3bb9bf36 3bba1928 3bba7345     pe.;6..;(..;Es.;
2401dea4:	3bbacd8e 3bbb2802 3bbb82a3 3bbbdd6f     ...;.(.;...;o..;
2401deb4:	3bbc3867 3bbc938b 3bbceedb 3bbd4a58     g8.;...;...;XJ.;
2401dec4:	3bbda601 3bbe01d6 3bbe5dd8 3bbeba06     ...;...;.].;...;
2401ded4:	3bbf1661 3bbf72e8 3bbfcf9d 3bc02c7e     a..;.r.;...;~,.;
2401dee4:	3bc0898c 3bc0e6c8 3bc14430 3bc1a1c6     ...;...;0D.;...;
2401def4:	3bc1ff89 3bc25d7a 3bc2bb97 3bc319e3     ...;z].;...;...;
2401df04:	3bc3785c 3bc3d703 3bc435d8 3bc494db     \x.;...;.5.;...;
2401df14:	3bc4f40b 3bc5536a 3bc5b2f7 3bc612b2     ...;jS.;...;...;
2401df24:	3bc6729c 3bc6d2b4 3bc732fb 3bc79370     .r.;...;.2.;p..;
2401df34:	3bc7f414 3bc854e6 3bc8b5e8 3bc91719     ...;.T.;...;...;
2401df44:	3bc97878 3bc9da07 3bca3bc5 3bca9db3     xx.;...;.;.;...;
2401df54:	3bcaffcf 3bcb621c 3bcbc498 3bcc2743     ...;.b.;...;C'.;
2401df64:	3bcc8a1f 3bcced2a 3bcd5065 3bcdb3d0     ...;*..;eP.;...;
2401df74:	3bce176c 3bce7b37 3bcedf33 3bcf4360     l..;7{.;3..;`C.;
2401df84:	3bcfa7bd 3bd00c4a 3bd07108 3bd0d5f7     ...;J..;.q.;...;
2401df94:	3bd13b17 3bd1a068 3bd205ea 3bd26b9d     .;.;h..;...;.k.;
2401dfa4:	3bd2d181 3bd33797 3bd39dde 3bd40457     ...;.7.;...;W..;
2401dfb4:	3bd46b01 3bd4d1dd 3bd538ea 3bd5a02a     .k.;...;.8.;*..;
2401dfc4:	3bd6079c 3bd66f3f 3bd6d715 3bd73f1e     ...;?o.;...;.?.;
2401dfd4:	3bd7a758 3bd80fc5 3bd87865 3bd8e137     X..;...;ex.;7..;
2401dfe4:	3bd94a3c 3bd9b374 3bda1cdf 3bda867d     <J.;t..;...;}..;
2401dff4:	3bdaf04e 3bdb5a52 3bdbc48a 3bdc2ef5     N..;RZ.;...;...;
2401e004:	3bdc9994 3bdd0466 3bdd6f6c 3bdddaa6     ...;f..;lo.;...;
2401e014:	3bde4614 3bdeb1b5 3bdf1d8b 3bdf8995     .F.;...;...;...;
2401e024:	3bdff5d4 3be06247 3be0ceee 3be13bca     ...;Gb.;...;.;.;
2401e034:	3be1a8db 3be21620 3be2839b 3be2f14a     ...; ..;...;J..;
2401e044:	3be35f2f 3be3cd48 3be43b97 3be4aa1c     /_.;H..;.;.;...;
2401e054:	3be518d6 3be587c6 3be5f6eb 3be66646     ...;...;...;Ff.;
2401e064:	3be6d5d7 3be7459f 3be7b59c 3be825cf     ...;.E.;...;.%.;
2401e074:	3be89639 3be906d9 3be977b0 3be9e8be     9..;...;.w.;...;
2401e084:	3bea5a02 3beacb7d 3beb3d2f 3bebaf18     .Z.;}..;/=.;...;
2401e094:	3bec2138 3bec9390 3bed061f 3bed78e5     8!.;...;...;.x.;
2401e0a4:	3bedebe3 3bee5f19 3beed286 3bef462b     ...;._.;...;+F.;
2401e0b4:	3befba09 3bf02e1e 3bf0a26c 3bf116f2     ...;...;l..;...;
2401e0c4:	3bf18bb0 3bf200a7 3bf275d7 3bf2eb3f     ...;...;.u.;?..;
2401e0d4:	3bf360e0 3bf3d6ba 3bf44cce 3bf4c31a     .`.;...;.L.;...;
2401e0e4:	3bf539a0 3bf5b05f 3bf62757 3bf69e8a     .9.;_..;W'.;...;
2401e0f4:	3bf715f6 3bf78d9b 3bf8057b 3bf87d95     ...;...;{..;.}.;
2401e104:	3bf8f5e9 3bf96e77 3bf9e740 3bfa6043     ...;wn.;@..;C`.;
2401e114:	3bfad980 3bfb52f9 3bfbccac 3bfc469a     ...;.R.;...;.F.;
2401e124:	3bfcc0c3 3bfd3b28 3bfdb5c7 3bfe30a2     ...;(;.;...;.0.;
2401e134:	3bfeabb9 3bff270b 3bffa299 3c000f31     ...;.'.;...;1..<
2401e144:	3c004d34 3c008b55 3c00c994 3c0107f1     4M.<U..<...<...<
2401e154:	3c01466c 3c018506 3c01c3bd 3c020294     lF.<...<...<...<
2401e164:	3c024188 3c02809b 3c02bfcd 3c02ff1d     .A.<...<...<...<
2401e174:	3c033e8c 3c037e1a 3c03bdc6 3c03fd92     .>.<.~.<...<...<
2401e184:	3c043d7c 3c047d85 3c04bdad 3c04fdf4     |=.<.}.<...<...<
2401e194:	3c053e5b 3c057ee0 3c05bf85 3c060049     [>.<.~.<...<I..<
2401e1a4:	3c06412c 3c06822f 3c06c352 3c070494     ,A.</..<R..<...<
2401e1b4:	3c0745f5 3c078776 3c07c917 3c080ad8     .E.<v..<...<...<
2401e1c4:	3c084cb8 3c088eb9 3c08d0d9 3c091319     .L.<...<...<...<
2401e1d4:	3c09557a 3c0997fb 3c09da9b 3c0a1d5c     zU.<...<...<\..<
2401e1e4:	3c0a603e 3c0aa340 3c0ae662 3c0b29a5     >`.<@..<b..<.).<
2401e1f4:	3c0b6d08 3c0bb08c 3c0bf431 3c0c37f6     .m.<...<1..<.7.<
2401e204:	3c0c7bdc 3c0cbfe4 3c0d040c 3c0d4855     .{.<...<...<UH.<
2401e214:	3c0d8cbf 3c0dd14a 3c0e15f7 3c0e5ac4     ...<J..<...<.Z.<
2401e224:	3c0e9fb4 3c0ee4c4 3c0f29f6 3c0f6f49     ...<...<.).<Io.<
2401e234:	3c0fb4be 3c0ffa55 3c10400d 3c1085e7     ...<U..<.@.<...<
2401e244:	3c10cbe3 3c111201 3c115841 3c119ea3     ...<...<AX.<...<
2401e254:	3c11e527 3c122bcd 3c127295 3c12b97f     '..<.+.<.r.<...<
2401e264:	3c13008c 3c1347bb 3c138f0d 3c13d682     ...<.G.<...<...<
2401e274:	3c141e18 3c1465d2 3c14adae 3c14f5ad     ...<.e.<...<...<
2401e284:	3c153dcf 3c158614 3c15ce7c 3c161707     .=.<...<|..<...<
2401e294:	3c165fb5 3c16a887 3c16f17b 3c173a93     ._.<...<{..<.:.<
2401e2a4:	3c1783ce 3c17cd2d 3c1816af 3c186055     ...<-..<...<U`.<
2401e2b4:	3c18aa1f 3c18f40c 3c193e1d 3c198852     ...<...<.>.<R..<
2401e2c4:	3c19d2ab 3c1a1d28 3c1a67c9 3c1ab28e     ...<(..<.g.<...<
2401e2d4:	3c1afd77 3c1b4885 3c1b93b7 3c1bdf0d     w..<.H.<...<...<
2401e2e4:	3c1c2a88 3c1c7628 3c1cc1ec 3c1d0dd5     .*.<(v.<...<...<
2401e2f4:	3c1d59e2 3c1da614 3c1df26c 3c1e3ee8     .Y.<...<l..<.>.<
2401e304:	3c1e8b89 3c1ed850 3c1f253b 3c1f724c     ...<P..<;%.<Lr.<
2401e314:	3c1fbf82 3c200cde 3c205a5f 3c20a805     ...<.. <_Z <.. <
2401e324:	3c20f5d1 3c2143c3 3c2191db 3c21e018     .. <.C!<..!<..!<
2401e334:	3c222e7b 3c227d05 3c22cbb4 3c231a89     {."<.}"<.."<..#<
2401e344:	3c236985 3c23b8a7 3c2407ef 3c24575d     .i#<..#<..$<]W$<
2401e354:	3c24a6f2 3c24f6ae 3c254690 3c259699     ..$<..$<.F%<..%<
2401e364:	3c25e6c9 3c26371f 3c26879c 3c26d841     ..%<.7&<..&<A.&<
2401e374:	3c27290c 3c2779ff 3c27cb18 3c281c59     .)'<.y'<..'<Y.(<
2401e384:	3c286dc2 3c28bf52 3c291109 3c2962e8     .m(<R.(<..)<.b)<
2401e394:	3c29b4ee 3c2a071d 3c2a5973 3c2aabf1     ..)<..*<sY*<..*<
2401e3a4:	3c2afe96 3c2b5164 3c2ba45a 3c2bf779     ..*<dQ+<Z.+<y.+<
2401e3b4:	3c2c4abf 3c2c9e2e 3c2cf1c5 3c2d4585     .J,<..,<..,<.E-<
2401e3c4:	3c2d996d 3c2ded7e 3c2e41b7 3c2e961a     m.-<~.-<.A.<...<
2401e3d4:	3c2eeaa5 3c2f3f59 3c2f9436 3c2fe93d     ...<Y?/<6./<=./<
2401e3e4:	3c303e6c 3c3093c5 3c30e947 3c313ef3     l>0<..0<G.0<.>1<
2401e3f4:	3c3194c8 3c31eac6 3c3240ef 3c329740     ..1<..1<.@2<@.2<
2401e404:	3c32edbc 3c334462 3c339b32 3c33f22b     ..2<bD3<2.3<+.3<
2401e414:	3c34494f 3c34a09d 3c34f815 3c354fb8     OI4<..4<..4<.O5<
2401e424:	3c35a785 3c35ff7d 3c36579f 3c36afec     ..5<}.5<.W6<..6<
2401e434:	3c370863 3c376106 3c37b9d3 3c3812cc     c.7<.a7<..7<..8<
2401e444:	3c386bef 3c38c53e 3c391eb8 3c39785d     .k8<>.8<..9<]x9<
2401e454:	3c39d22e 3c3a2c2a 3c3a8652 3c3ae0a6     ..9<*,:<R.:<..:<
2401e464:	3c3b3b25 3c3b95d0 3c3bf0a7 3c3c4baa     %;;<..;<..;<.K<<
2401e474:	3c3ca6d9 3c3d0234 3c3d5dbc 3c3db970     ..<<4.=<.]=<p.=<
2401e484:	3c3e1550 3c3e715c 3c3ecd96 3c3f29fc     P.><\q><..><.)?<
2401e494:	3c3f868e 3c3fe34e 3c40403b 3c409d54     ..?<N.?<;@@<T.@<
2401e4a4:	3c40fa9b 3c41580e 3c41b5af 3c42137e     ..@<.XA<..A<~.B<
2401e4b4:	3c42717a 3c42cfa3 3c432dfa 3c438c7f     zqB<..B<.-C<..C<
2401e4c4:	3c43eb31 3c444a11 3c44a91f 3c45085c     1.C<.JD<..D<\.E<
2401e4d4:	3c4567c6 3c45c75f 3c462726 3c46871b     .gE<_.E<&'F<..F<
2401e4e4:	3c46e73f 3c474791 3c47a812 3c4808c2     ?.F<.GG<..G<..H<
2401e4f4:	3c4869a1 3c48caae 3c492beb 3c498d56     .iH<..H<.+I<V.I<
2401e504:	3c49eef1 3c4a50bb 3c4ab2b4 3c4b14dd     ..I<.PJ<..J<..K<
2401e514:	3c4b7736 3c4bd9be 3c4c3c76 3c4c9f5d     6wK<..K<v<L<].L<
2401e524:	3c4d0275 3c4d65bc 3c4dc934 3c4e2cdc     u.M<.eM<4.M<.,N<
2401e534:	3c4e90b4 3c4ef4bc 3c4f58f5 3c4fbd5f     ..N<..N<.XO<_.O<
2401e544:	3c5021f9 3c5086c3 3c50ebbf 3c5150ec     .!P<..P<..P<.PQ<
2401e554:	3c51b649 3c521bd8 3c528197 3c52e789     I.Q<..R<..R<..R<
2401e564:	3c534dab 3c53b3ff 3c541a85 3c54813c     .MS<..S<..T<<.T<
2401e574:	3c54e825 3c554f3f 3c55b68c 3c561e0b     %.T<?OU<..U<..V<
2401e584:	3c5685bc 3c56ed9f 3c5755b4 3c57bdfc     ..V<..V<.UW<..W<
2401e594:	3c582677 3c588f23 3c58f803 3c596116     w&X<#.X<..X<.aY<
2401e5a4:	3c59ca5b 3c5a33d3 3c5a9d7f 3c5b075d     [.Y<.3Z<..Z<].[<
2401e5b4:	3c5b716f 3c5bdbb5 3c5c462d 3c5cb0da     oq[<..[<-F\<..\<
2401e5c4:	3c5d1bba 3c5d86ce 3c5df215 3c5e5d91     ..]<..]<..]<.]^<
2401e5d4:	3c5ec941 3c5f3524 3c5fa13c 3c600d89     A.^<$5_<<._<..`<
2401e5e4:	3c607a0a 3c60e6bf 3c6153a9 3c61c0c8     .z`<..`<.Sa<..a<
2401e5f4:	3c622e1c 3c629ba5 3c630963 3c637756     ..b<..b<c.c<Vwc<
2401e604:	3c63e57e 3c6453db 3c64c26e 3c653137     ~.c<.Sd<n.d<71e<
2401e614:	3c65a035 3c660f69 3c667ed3 3c66ee73     5.e<i.f<.~f<s.f<
2401e624:	3c675e49 3c67ce55 3c683e97 3c68af10     I^g<U.g<.>h<..h<
2401e634:	3c691fbf 3c6990a5 3c6a01c2 3c6a7315     ..i<..i<..j<.sj<
2401e644:	3c6ae49f 3c6b5660 3c6bc859 3c6c3a88     ..j<`Vk<Y.k<.:l<
2401e654:	3c6cacef 3c6d1f8d 3c6d9263 3c6e0570     ..l<..m<c.m<p.n<
2401e664:	3c6e78b5 3c6eec32 3c6f5fe7 3c6fd3d4     .xn<2.n<._o<..o<
2401e674:	3c7047f9 3c70bc57 3c7130ed 3c71a5bb     .Gp<W.p<.0q<..q<
2401e684:	3c721ac2 3c729001 3c730579 3c737b2b     ..r<..r<y.s<+{s<
2401e694:	3c73f115 3c746738 3c74dd95 3c75542b     ..s<8gt<..t<+Tu<
2401e6a4:	3c75cafa 3c764203 3c76b946 3c7730c2     ..u<.Bv<F.v<.0w<
2401e6b4:	3c77a878 3c782068 3c789893 3c7910f7     x.w<h x<..x<..y<
2401e6c4:	3c798996 3c7a026f 3c7a7b83 3c7af4d2     ..y<o.z<.{z<..z<
2401e6d4:	3c7b6e5b 3c7be81f 3c7c621e 3c7cdc59     [n{<..{<.b|<Y.|<
2401e6e4:	3c7d56ce 3c7dd17f 3c7e4c6b 3c7ec793     .V}<..}<kL~<..~<
2401e6f4:	3c7f42f6 3c7fbe95 3c801d38 3c805b44     .B.<...<8..<D[.<
2401e704:	3c80996d 3c80d7b5 3c81161b 3c81549f     m..<...<...<.T.<
2401e714:	3c819342 3c81d202 3c8210e1 3c824fdf     B..<...<...<.O.<
2401e724:	3c828efb 3c82ce36 3c830d8f 3c834d07     ...<6..<...<.M.<
2401e734:	3c838c9e 3c83cc54 3c840c28 3c844c1b     ...<T..<(..<.L.<
2401e744:	3c848c2e 3c84cc5f 3c850cb0 3c854d1f     ...<_..<...<.M.<
2401e754:	3c858dae 3c85ce5c 3c860f2a 3c865017     ...<\..<*..<.P.<
2401e764:	3c869123 3c86d24f 3c87139a 3c875505     #..<O..<...<.U.<
2401e774:	3c879690 3c87d83b 3c881a05 3c885bef     ...<;..<...<.[.<
2401e784:	3c889df9 3c88e023 3c89226d 3c8964d8     ...<#..<m".<.d.<
2401e794:	3c89a762 3c89ea0d 3c8a2cd8 3c8a6fc3     b..<...<.,.<.o.<
2401e7a4:	3c8ab2cf 3c8af5fb 3c8b3948 3c8b7cb6     ...<...<H9.<.|.<
2401e7b4:	3c8bc044 3c8c03f3 3c8c47c2 3c8c8bb3     D..<...<.G.<...<
2401e7c4:	3c8ccfc4 3c8d13f6 3c8d584a 3c8d9cbe     ...<...<JX.<...<
2401e7d4:	3c8de154 3c8e260b 3c8e6ae3 3c8eafdd     T..<.&.<.j.<...<
2401e7e4:	3c8ef4f8 3c8f3a34 3c8f7f92 3c8fc512     ...<4:.<...<...<
2401e7f4:	3c900ab3 3c905076 3c90965b 3c90dc61     ...<vP.<[..<a..<
2401e804:	3c91228a 3c9168d5 3c91af41 3c91f5d0     .".<.h.<A..<...<
2401e814:	3c923c81 3c928354 3c92ca4a 3c931162     .<.<T..<J..<b..<
2401e824:	3c93589c 3c939ff9 3c93e779 3c942f1b     .X.<...<y..<./.<
2401e834:	3c9476df 3c94bec7 3c9506d2 3c954eff     .v.<...<...<.N.<
2401e844:	3c95974f 3c95dfc2 3c962859 3c967113     O..<...<Y(.<.q.<
2401e854:	3c96b9ef 3c9702f0 3c974c13 3c97955a     ...<...<.L.<Z..<
2401e864:	3c97dec5 3c982853 3c987204 3c98bbda     ...<S(.<.r.<...<
2401e874:	3c9905d3 3c994ff0 3c999a31 3c99e496     ...<.O.<1..<...<
2401e884:	3c9a2f1f 3c9a79cc 3c9ac49d 3c9b0f93     ./.<.y.<...<...<
2401e894:	3c9b5aad 3c9ba5eb 3c9bf14e 3c9c3cd5     .Z.<...<N..<.<.<
2401e8a4:	3c9c8881 3c9cd451 3c9d2046 3c9d6c60     ...<Q..<F .<`l.<
2401e8b4:	3c9db89f 3c9e0503 3c9e518c 3c9e9e3a     ...<...<.Q.<:..<
2401e8c4:	3c9eeb0d 3c9f3805 3c9f8523 3c9fd266     ...<.8.<#..<f..<
2401e8d4:	3ca01fcf 3ca06d5d 3ca0bb10 3ca108e9     ...<]m.<...<...<
2401e8e4:	3ca156e8 3ca1a50d 3ca1f358 3ca241c8     .V.<...<X..<.A.<
2401e8f4:	3ca2905f 3ca2df1b 3ca32dfe 3ca37d07     _..<...<.-.<.}.<
2401e904:	3ca3cc36 3ca41b8c 3ca46b08 3ca4baab     6..<...<.k.<...<
2401e914:	3ca50a74 3ca55a64 3ca5aa7b 3ca5fab8     t..<dZ.<{..<...<
2401e924:	3ca64b1c 3ca69ba8 3ca6ec5a 3ca73d34     .K.<...<Z..<4=.<
2401e934:	3ca78e34 3ca7df5c 3ca830ab 3ca88222     4..<\..<.0.<"..<
2401e944:	3ca8d3c0 3ca92586 3ca97773 3ca9c988     ...<.%.<sw.<...<
2401e954:	3caa1bc5 3caa6e29 3caac0b6 3cab136a     ...<)n.<...<j..<
2401e964:	3cab6647 3cabb94c 3cac0c79 3cac5fce     Gf.<L..<y..<._.<
2401e974:	3cacb34c 3cad06f2 3cad5ac1 3cadaeb8     L..<...<.Z.<...<
2401e984:	3cae02d8 3cae5721 3caeab93 3caf002d     ...<!W.<...<-..<
2401e994:	3caf54f1 3cafa9de 3caffef3 3cb05433     .T.<...<...<3T.<
2401e9a4:	3cb0a99b 3cb0ff2d 3cb154e8 3cb1aacd     ...<-..<.T.<...<
2401e9b4:	3cb200db 3cb25713 3cb2ad75 3cb30401     ...<.W.<u..<...<
2401e9c4:	3cb35ab7 3cb3b197 3cb408a1 3cb45fd5     .Z.<...<...<._.<
2401e9d4:	3cb4b733 3cb50ebc 3cb5666f 3cb5be4c     3..<...<of.<L..<
2401e9e4:	3cb61655 3cb66e87 3cb6c6e5 3cb71f6e     U..<.n.<...<n..<
2401e9f4:	3cb77821 3cb7d0ff 3cb82a09 3cb8833d     !x.<...<.*.<=..<
2401ea04:	3cb8dc9d 3cb93628 3cb98fdf 3cb9e9c1     ...<(6.<...<...<
2401ea14:	3cba43ce 3cba9e08 3cbaf86d 3cbb52fe     .C.<...<m..<.R.<
2401ea24:	3cbbadba 3cbc08a3 3cbc63b8 3cbcbef9     ...<...<.c.<...<
2401ea34:	3cbd1a66 3cbd75ff 3cbdd1c5 3cbe2db7     f..<.u.<...<.-.<
2401ea44:	3cbe89d6 3cbee622 3cbf429a 3cbf9f3f     ...<"..<.B.<?..<
2401ea54:	3cbffc11 3cc05910 3cc0b63c 3cc11396     ...<.Y.<<..<...<
2401ea64:	3cc1711c 3cc1ced0 3cc22cb1 3cc28ac0     .q.<...<.,.<...<
2401ea74:	3cc2e8fd 3cc34767 3cc3a5ff 3cc404c4     ...<gG.<...<...<
2401ea84:	3cc463b8 3cc4c2da 3cc52229 3cc581a7     .c.<...<)".<...<
2401ea94:	3cc5e154 3cc6412e 3cc6a137 3cc7016f     T..<.A.<7..<o..<
2401eaa4:	3cc761d6 3cc7c26b 3cc8232f 3cc88421     .a.<k..</#.<!..<
2401eab4:	3cc8e543 3cc94694 3cc9a814 3cca09c3     C..<.F.<...<...<
2401eac4:	3cca6ba2 3ccacdb0 3ccb2fee 3ccb925b     .k.<...<./.<[..<
2401ead4:	3ccbf4f8 3ccc57c5 3cccbac2 3ccd1def     ...<.W.<...<...<
2401eae4:	3ccd814c 3ccde4d9 3cce4896 3cceac83     L..<...<.H.<...<
2401eaf4:	3ccf10a1 3ccf74f0 3ccfd96f 3cd03e1f     ...<.t.<o..<.>.<
2401eb04:	3cd0a300 3cd10812 3cd16d54 3cd1d2c8     ...<...<Tm.<...<
2401eb14:	3cd2386d 3cd29e43 3cd3044b 3cd36a84     m8.<C..<K..<.j.<
2401eb24:	3cd3d0ef 3cd4378b 3cd49e59 3cd50559     ...<.7.<Y..<Y..<
2401eb34:	3cd56c8b 3cd5d3ef 3cd63b85 3cd6a34d     .l.<...<.;.<M..<
2401eb44:	3cd70b48 3cd77375 3cd7dbd4 3cd84467     H..<us.<...<gD.<
2401eb54:	3cd8ad2b 3cd91623 3cd97f4e 3cd9e8ab     +..<#..<N..<...<
2401eb64:	3cda523c 3cdabc00 3cdb25f7 3cdb9021     <R.<...<.%.<!..<
2401eb74:	3cdbfa7f 3cdc6511 3cdccfd6 3cdd3acf     ...<.e.<...<.:.<
2401eb84:	3cdda5fc 3cde115d 3cde7cf2 3cdee8bb     ...<]..<.|.<...<
2401eb94:	3cdf54b8 3cdfc0ea 3ce02d50 3ce099eb     .T.<...<P-.<...<
2401eba4:	3ce106ba 3ce173be 3ce1e0f7 3ce24e65     ...<.s.<...<eN.<
2401ebb4:	3ce2bc08 3ce329e1 3ce397ee 3ce40631     ...<.).<...<1..<
2401ebc4:	3ce474a9 3ce4e357 3ce5523b 3ce5c154     .t.<W..<;R.<T..<
2401ebd4:	3ce630a4 3ce6a029 3ce70fe4 3ce77fd6     .0.<)..<...<...<
2401ebe4:	3ce7effe 3ce8605c 3ce8d0f1 3ce941bc     ...<\`.<...<.A.<
2401ebf4:	3ce9b2be 3cea23f7 3cea9567 3ceb070d     ...<.#.<g..<...<
2401ec04:	3ceb78eb 3cebeb00 3cec5d4d 3ceccfd1     .x.<...<M].<...<
2401ec14:	3ced428c 3cedb57f 3cee28aa 3cee9c0d     .B.<...<.(.<...<
2401ec24:	3cef0fa8 3cef837a 3ceff785 3cf06bc8     ...<z..<...<.k.<
2401ec34:	3cf0e044 3cf154f8 3cf1c9e5 3cf23f0a     D..<.T.<...<.?.<
2401ec44:	3cf2b469 3cf32a00 3cf39fd0 3cf415d9     i..<.*.<...<...<
2401ec54:	3cf48c1c 3cf50298 3cf5794d 3cf5f03c     ...<...<My.<<..<
2401ec64:	3cf66765 3cf6dec8 3cf75664 3cf7ce3b     eg.<...<dV.<;..<
2401ec74:	3cf8464b 3cf8be96 3cf9371b 3cf9afdb     KF.<...<.7.<...<
2401ec84:	3cfa28d5 3cfaa20a 3cfb1b7a 3cfb9525     .(.<...<z..<%..<
2401ec94:	3cfc0f0a 3cfc892b 3cfd0387 3cfd7e1f     ...<+..<...<.~.<
2401eca4:	3cfdf8f2 3cfe7400 3cfeef4a 3cff6ad0     ...<.t.<J..<.j.<
2401ecb4:	3cffe692 3d003148 3d006f65 3d00ada0     ...<H1.=eo.=...=
2401ecc4:	3d00ebfa 3d012a71 3d016907 3d01a7bc     ...=q*.=.i.=...=
2401ecd4:	3d01e68e 3d022580 3d02648f 3d02a3be     ...=.%.=.d.=...=
2401ece4:	3d02e30b 3d032276 3d036201 3d03a1aa     ...=v".=.b.=...=
2401ecf4:	3d03e173 3d04215a 3d046160 3d04a185     s..=Z!.=`a.=...=
2401ed04:	3d04e1ca 3d05222d 3d0562b0 3d05a352     ...=-".=.b.=R..=
2401ed14:	3d05e413 3d0624f4 3d0665f5 3d06a715     ...=.$.=.e.=...=
2401ed24:	3d06e854 3d0729b3 3d076b32 3d07acd1     T..=.).=2k.=...=
2401ed34:	3d07ee8f 3d08306e 3d08726c 3d08b48b     ...=n0.=lr.=...=
2401ed44:	3d08f6c9 3d093928 3d097ba7 3d09be46     ...=(9.=.{.=F..=
2401ed54:	3d0a0105 3d0a43e5 3d0a86e6 3d0aca06     ...=.C.=...=...=
2401ed64:	3d0b0d48 3d0b50aa 3d0b942d 3d0bd7d0     H..=.P.=-..=...=
2401ed74:	3d0c1b95 3d0c5f7a 3d0ca380 3d0ce7a7     ...=z_.=...=...=
2401ed84:	3d0d2bf0 3d0d7059 3d0db4e4 3d0df990     .+.=Yp.=...=...=
2401ed94:	3d0e3e5d 3d0e834b 3d0ec85c 3d0f0d8d     ]>.=K..=\..=...=
2401eda4:	3d0f52e0 3d0f9855 3d0fddec 3d1023a4     .R.=U..=...=.#.=
2401edb4:	3d10697e 3d10af7a 3d10f599 3d113bd9     ~i.=z..=...=.;.=
2401edc4:	3d11823b 3d11c8bf 3d120f66 3d12562f     ;..=...=f..=/V.=
2401edd4:	3d129d1a 3d12e428 3d132b58 3d1372ab     ...=(..=X+.=.r.=
2401ede4:	3d13ba20 3d1401b8 3d144973 3d149151      ..=...=sI.=Q..=
2401edf4:	3d14d951 3d152175 3d1569bb 3d15b225     Q..=u!.=.i.=%..=
2401ee04:	3d15fab2 3d164362 3d168c35 3d16d52c     ...=bC.=5..=,..=
2401ee14:	3d171e46 3d176783 3d17b0e4 3d17fa69     F..=.g.=...=i..=
2401ee24:	3d184412 3d188dde 3d18d7ce 3d1921e2     .D.=...=...=.!.=
2401ee34:	3d196c1a 3d19b676 3d1a00f6 3d1a4b9a     .l.=v..=...=.K.=
2401ee44:	3d1a9662 3d1ae14f 3d1b2c60 3d1b7796     b..=O..=`,.=.w.=
2401ee54:	3d1bc2f0 3d1c0e6f 3d1c5a12 3d1ca5db     ...=o..=.Z.=...=
2401ee64:	3d1cf1c8 3d1d3dd9 3d1d8a10 3d1dd66c     ...=.=.=...=l..=
2401ee74:	3d1e22ed 3d1e6f93 3d1ebc5e 3d1f094f     .".=.o.=^..=O..=
2401ee84:	3d1f5665 3d1fa3a0 3d1ff101 3d203e87     eV.=...=...=.> =
2401ee94:	3d208c33 3d20da05 3d2127fd 3d21761a     3. =.. =.'!=.v!=
2401eea4:	3d21c45e 3d2212c7 3d226157 3d22b00c     ^.!=.."=Wa"=.."=
2401eeb4:	3d22fee8 3d234dea 3d239d13 3d23ec62     .."=.M#=..#=b.#=
2401eec4:	3d243bd8 3d248b74 3d24db37 3d252b20     .;$=t.$=7.$= +%=
2401eed4:	3d257b31 3d25cb68 3d261bc6 3d266c4c     1{%=h.%=..&=Ll&=
2401eee4:	3d26bcf8 3d270dcc 3d275ec7 3d27afe9     ..&=..'=.^'=..'=
2401eef4:	3d280133 3d2852a4 3d28a43d 3d28f5fd     3.(=.R(==.(=..(=
2401ef04:	3d2947e5 3d2999f5 3d29ec2d 3d2a3e8d     .G)=..)=-.)=.>*=
2401ef14:	3d2a9114 3d2ae3c4 3d2b369c 3d2b899c     ..*=..*=.6+=..+=
2401ef24:	3d2bdcc5 3d2c3016 3d2c8390 3d2cd732     ..+=.0,=..,=2.,=
2401ef34:	3d2d2afc 3d2d7ef0 3d2dd30c 3d2e2751     .*-=.~-=..-=Q'.=
2401ef44:	3d2e7bbf 3d2ed056 3d2f2517 3d2f7a00     .{.=V..=.%/=.z/=
2401ef54:	3d2fcf13 3d30244f 3d3079b4 3d30cf43     ../=O$0=.y0=C.0=
2401ef64:	3d3124fb 3d317ade 3d31d0e9 3d32271f     .$1=.z1=..1=.'2=
2401ef74:	3d327d7f 3d32d408 3d332abc 3d33819a     .}2=..2=.*3=..3=
2401ef84:	3d33d8a2 3d342fd4 3d348731 3d34deb8     ..3=./4=1.4=..4=
2401ef94:	3d35366a 3d358e46 3d35e64d 3d363e7f     j65=F.5=M.5=.>6=
2401efa4:	3d3696dc 3d36ef64 3d374817 3d37a0f4     ..6=d.6=.H7=..7=
2401efb4:	3d37f9fe 3d385332 3d38ac92 3d39061d     ..7=2S8=..8=..9=
2401efc4:	3d395fd4 3d39b9b6 3d3a13c4 3d3a6dfe     ._9=..9=..:=.m:=
2401efd4:	3d3ac863 3d3b22f5 3d3b7db3 3d3bd89d     c.:=.";=.};=..;=
2401efe4:	3d3c33b3 3d3c8ef5 3d3cea64 3d3d45ff     .3<=..<=d.<=.E==
2401eff4:	3d3da1c6 3d3dfdbb 3d3e59dc 3d3eb62a     ..==..==.Y>=*.>=
2401f004:	3d3f12a4 3d3f6f4c 3d3fcc21 3d402923     ..?=Lo?=!.?=#)@=
2401f014:	3d408652 3d40e3ae 3d414138 3d419ef0     R.@=..@=8AA=..A=
2401f024:	3d41fcd5 3d425ae7 3d42b928 3d431796     ..A=.ZB=(.B=..C=
2401f034:	3d437632 3d43d4fc 3d4433f5 3d44931b     2vC=..C=.3D=..D=
2401f044:	3d44f270 3d4551f3 3d45b1a5 3d461185     p.D=.QE=..E=..F=
2401f054:	3d467194 3d46d1d1 3d47323d 3d4792d9     .qF=..F==2G=..G=
2401f064:	3d47f3a3 3d48549c 3d48b5c5 3d49171d     ..G=.TH=..H=..I=
2401f074:	3d4978a4 3d49da5b 3d4a3c41 3d4a9e56     .xI=[.I=A<J=V.J=
2401f084:	3d4b009c 3d4b6311 3d4bc5b7 3d4c288c     ..K=.cK=..K=.(L=
2401f094:	3d4c8b91 3d4ceec7 3d4d522d 3d4db5c3     ..L=..L=-RM=..M=
2401f0a4:	3d4e1989 3d4e7d81 3d4ee1a9 3d4f4601     ..N=.}N=..N=.FO=
2401f0b4:	3d4faa8b 3d500f45 3d507430 3d50d94d     ..O=E.P=0tP=M.P=
2401f0c4:	3d513e9b 3d51a41a 3d5209ca 3d526fac     .>Q=..Q=..R=.oR=
2401f0d4:	3d52d5c0 3d533c05 3d53a27c 3d540925     ..R=.<S=|.S=%.T=
2401f0e4:	3d547000 3d54d70d 3d553e4c 3d55a5bd     .pT=..T=L>U=..U=
2401f0f4:	3d560d61 3d567537 3d56dd40 3d57457b     a.V=7uV=@.V={EW=
2401f104:	3d57adea 3d58168b 3d587f5f 3d58e866     ..W=..X=_.X=f.X=
2401f114:	3d5951a0 3d59bb0d 3d5a24ae 3d5a8e82     .QY=..Y=.$Z=..Z=
2401f124:	3d5af88a 3d5b62c5 3d5bcd34 3d5c37d7     ..Z=.b[=4.[=.7\=
2401f134:	3d5ca2ae 3d5d0db9 3d5d78f8 3d5de46b     ..\=..]=.x]=k.]=
2401f144:	3d5e5012 3d5ebbee 3d5f27ff 3d5f9444     .P^=..^=.'_=D._=
2401f154:	3d6000be 3d606d6d 3d60da50 3d614769     ..`=mm`=P.`=iGa=
2401f164:	3d61b4b7 3d62223a 3d628ff3 3d62fde1     ..a=:"b=..b=..b=
2401f174:	3d636c04 3d63da5d 3d6448ec 3d64b7b1     .lc=].c=.Hd=..d=
2401f184:	3d6526ac 3d6595dc 3d660543 3d6674e1     .&e=..e=C.f=.tf=
2401f194:	3d66e4b4 3d6754bf 3d67c4ff 3d683577     ..f=.Tg=..g=w5h=
2401f1a4:	3d68a625 3d69170a 3d698827 3d69f97a     %.h=..i='.i=z.i=
2401f1b4:	3d6a6b04 3d6adcc6 3d6b4ec0 3d6bc0f1     .kj=..j=.Nk=..k=
2401f1c4:	3d6c3359 3d6ca5f9 3d6d18d2 3d6d8be2     Y3l=..l=..m=..m=
2401f1d4:	3d6dff2a 3d6e72ab 3d6ee663 3d6f5a55     *.m=.rn=c.n=UZo=
2401f1e4:	3d6fce7e 3d7042e1 3d70b77c 3d712c50     ~.o=.Bp=|.p=P,q=
2401f1f4:	3d71a15d 3d7216a3 3d728c22 3d7301da     ].q=..r=".r=..s=
2401f204:	3d7377cc 3d73edf7 3d74645c 3d74dafb     .ws=..s=\dt=..t=
2401f214:	3d7551d4 3d75c8e6 3d764033 3d76b7ba     .Qu=..u=3@v=..v=
2401f224:	3d772f7b 3d77a776 3d781fac 3d78981d     {/w=v.w=..x=..x=
2401f234:	3d7910c8 3d7989af 3d7a02d0 3d7a7c2c     ..y=..y=..z=,|z=
2401f244:	3d7af5c4 3d7b6f97 3d7be9a5 3d7c63ef     ..z=.o{=..{=.c|=
2401f254:	3d7cde74 3d7d5936 3d7dd433 3d7e4f6c     t.|=6Y}=3.}=lO~=
2401f264:	3d7ecae1 3d7f4693 3d7fc281 3d801f56     ..~=.F.=...=V..=
2401f274:	3d805d89 3d809bdb 3d80da4b 3d8118da     .].=...=K..=...=
2401f284:	3d815787 3d819653 3d81d53e 3d821447     .W.=S..=>..=G..=
2401f294:	3d82536f 3d8292b6 3d82d21b 3d8311a0     oS.=...=...=...=
2401f2a4:	3d835144 3d839106 3d83d0e8 3d8410e9     DQ.=...=...=...=
2401f2b4:	3d84510a 3d849149 3d84d1a8 3d851227     .Q.=I..=...='..=
2401f2c4:	3d8552c5 3d859382 3d85d45f 3d86155c     .R.=...=_..=\..=
2401f2d4:	3d865678 3d8697b5 3d86d911 3d871a8d     xV.=...=...=...=
2401f2e4:	3d875c29 3d879de5 3d87dfc1 3d8821be     )\.=...=...=.!.=
2401f2f4:	3d8863da 3d88a617 3d88e874 3d892af2     .c.=...=t..=.*.=
2401f304:	3d896d90 3d89b04f 3d89f32e 3d8a362e     .m.=O..=...=.6.=
2401f314:	3d8a794f 3d8abc91 3d8afff3 3d8b4376     Oy.=...=...=vC.=
2401f324:	3d8b871b 3d8bcae0 3d8c0ec7 3d8c52ce     ...=...=...=.R.=
2401f334:	3d8c96f7 3d8cdb42 3d8d1fad 3d8d643a     ...=B..=...=:d.=
2401f344:	3d8da8e9 3d8dedb9 3d8e32ab 3d8e77bf     ...=...=.2.=.w.=
2401f354:	3d8ebcf4 3d8f024b 3d8f47c4 3d8f8d5f     ...=K..=.G.=_..=
2401f364:	3d8fd31c 3d9018fb 3d905efc 3d90a520     ...=...=.^.= ..=
2401f374:	3d90eb66 3d9131ce 3d917859 3d91bf06     f..=.1.=Yx.=...=
2401f384:	3d9205d6 3d924cc8 3d9293dd 3d92db15     ...=.L.=...=...=
2401f394:	3d93226f 3d9369ed 3d93b18e 3d93f951     o".=.i.=...=Q..=
2401f3a4:	3d944138 3d948942 3d94d16f 3d9519bf     8A.=B..=o..=...=
2401f3b4:	3d956233 3d95aacb 3d95f385 3d963c64     3b.=...=...=d<.=
2401f3c4:	3d968566 3d96ce8c 3d9717d5 3d976143     f..=...=...=Ca.=
2401f3d4:	3d97aad4 3d97f48a 3d983e63 3d988861     ...=...=c>.=a..=
2401f3e4:	3d98d283 3d991cc9 3d996734 3d99b1c3     ...=...=4g.=...=
2401f3f4:	3d99fc76 3d9a474e 3d9a924b 3d9add6c     v..=NG.=K..=l..=
2401f404:	3d9b28b3 3d9b741e 3d9bbfae 3d9c0b63     .(.=.t.=...=c..=
2401f414:	3d9c573d 3d9ca33c 3d9cef61 3d9d3bab     =W.=<..=a..=.;.=
2401f424:	3d9d881a 3d9dd4af 3d9e2169 3d9e6e49     ...=...=i!.=In.=
2401f434:	3d9ebb4e 3d9f0879 3d9f55ca 3d9fa341     N..=y..=.U.=A..=
2401f444:	3d9ff0de 3da03ea1 3da08c8a 3da0da99     ...=.>.=...=...=
2401f454:	3da128cf 3da1772b 3da1c5ad 3da21456     .(.=+w.=...=V..=
2401f464:	3da26325 3da2b21b 3da30137 3da3507b     %c.=...=7..={P.=
2401f474:	3da39fe5 3da3ef76 3da43f2f 3da48f0e     ...=v..=/?.=...=
2401f484:	3da4df15 3da52f42 3da57f98 3da5d014     ...=B/.=...=...=
2401f494:	3da620b8 3da67184 3da6c277 3da71392     . .=.q.=w..=...=
2401f4a4:	3da764d5 3da7b63f 3da807d2 3da8598c     .d.=?..=...=.Y.=
2401f4b4:	3da8ab6f 3da8fd7a 3da94fad 3da9a208     o..=z..=.O.=...=
2401f4c4:	3da9f48c 3daa4739 3daa9a0e 3daaed0b     ...=9G.=...=...=
2401f4d4:	3dab4032 3dab9381 3dabe6f9 3dac3a9a     2@.=...=...=.:.=
2401f4e4:	3dac8e65 3dace258 3dad3674 3dad8aba     e..=X..=t6.=...=
2401f4f4:	3daddf2a 3dae33c2 3dae8885 3daedd71     *..=.3.=...=q..=
2401f504:	3daf3286 3daf87c6 3dafdd2f 3db032c2     .2.=...=/..=.2.=
2401f514:	3db08880 3db0de67 3db13479 3db18ab5     ...=g..=y4.=...=
2401f524:	3db1e11b 3db237ac 3db28e68 3db2e54e     ...=.7.=h..=N..=
2401f534:	3db33c5e 3db3939a 3db3eb00 3db44292     ^<.=...=...=.B.=
2401f544:	3db49a4e 3db4f236 3db54a49 3db5a287     N..=6..=IJ.=...=
2401f554:	3db5faf0 3db65386 3db6ac46 3db70532     ...=.S.=F..=2..=
2401f564:	3db75e4a 3db7b78e 3db810fe 3db86a9a     J^.=...=...=.j.=
2401f574:	3db8c462 3db91e56 3db97876 3db9d2c3     b..=V..=vx.=...=
2401f584:	3dba2d3c 3dba87e2 3dbae2b4 3dbb3db3     <-.=...=...=.=.=
2401f594:	3dbb98df 3dbbf437 3dbc4fbd 3dbcab70     ...=7..=.O.=p..=
2401f5a4:	3dbd074f 3dbd635c 3dbdbf97 3dbe1bff     O..=\c.=...=...=
2401f5b4:	3dbe7894 3dbed557 3dbf3248 3dbf8f66     .x.=W..=H2.=f..=
2401f5c4:	3dbfecb3 3dc04a2d 3dc0a7d5 3dc105ac     ...=-J.=...=...=
2401f5d4:	3dc163b0 3dc1c1e4 3dc22045 3dc27ed5     .c.=...=E .=.~.=
2401f5e4:	3dc2dd94 3dc33c81 3dc39b9d 3dc3fae8     ...=.<.=...=...=
2401f5f4:	3dc45a62 3dc4ba0b 3dc519e4 3dc579eb     bZ.=...=...=.y.=
2401f604:	3dc5da22 3dc63a89 3dc69b1e 3dc6fbe4     "..=.:.=...=...=
2401f614:	3dc75cd9 3dc7bdfe 3dc81f54 3dc880d9     .\.=...=T..=...=
2401f624:	3dc8e28e 3dc94473 3dc9a689 3dca08cf     ...=sD.=...=...=
2401f634:	3dca6b46 3dcacded 3dcb30c5 3dcb93ce     Fk.=...=.0.=...=
2401f644:	3dcbf708 3dcc5a73 3dccbe0e 3dcd21db     ...=sZ.=...=.!.=
2401f654:	3dcd85da 3dcdea09 3dce4e6a 3dceb2fd     ...=...=jN.=...=
2401f664:	3dcf17c2 3dcf7cb8 3dcfe1e0 3dd0473a     ...=.|.=...=:G.=
2401f674:	3dd0acc6 3dd11285 3dd17875 3dd1de98     ...=...=ux.=...=
2401f684:	3dd244ee 3dd2ab76 3dd31231 3dd3791f     .D.=v..=1..=.y.=
2401f694:	3dd3e03f 3dd44793 3dd4af19 3dd516d3     ?..=.G.=...=...=
2401f6a4:	3dd57ec0 3dd5e6e1 3dd64f35 3dd6b7bd     .~.=...=5O.=...=
2401f6b4:	3dd72078 3dd78968 3dd7f28b 3dd85be2     x .=h..=...=.[.=
2401f6c4:	3dd8c56d 3dd92f2d 3dd99921 3dda0349     m..=-/.=!..=I..=
2401f6d4:	3dda6da7 3ddad838 3ddb42ff 3ddbadfa     .m.=8..=.B.=...=
2401f6e4:	3ddc192a 3ddc8490 3ddcf02a 3ddd5bfa     *..=...=*..=.[.=
2401f6f4:	3dddc800 3dde343b 3ddea0ab 3ddf0d52     ...=;4.=...=R..=
2401f704:	3ddf7a2e 3ddfe740 3de05488 3de0c206     .z.=@..=.T.=...=
2401f714:	3de12fbb 3de19da6 3de20bc8 3de27a20     ./.=...=...= z.=
2401f724:	3de2e8af 3de35775 3de3c671 3de435a5     ...=uW.=q..=.5.=
2401f734:	3de4a510 3de514b2 3de5848c 3de5f49d     ...=...=...=...=
2401f744:	3de664e6 3de6d566 3de7461f 3de7b70f     .d.=f..=.F.=...=
2401f754:	3de82838 3de89998 3de90b31 3de97d03     8(.=...=1..=.}.=
2401f764:	3de9ef0d 3dea614f 3dead3cb 3deb467f     ...=Oa.=...=.F.=
2401f774:	3debb96c 3dec2c92 3dec9ff2 3ded138b     l..=.,.=...=...=
2401f784:	3ded875d 3dedfb69 3dee6faf 3deee42f     ]..=i..=.o.=/..=
2401f794:	3def58e8 3defcddc 3df04309 3df0b871     .X.=...=.C.=q..=
2401f7a4:	3df12e14 3df1a3f1 3df21a08 3df2905b     ...=...=...=[..=
2401f7b4:	3df306e8 3df37db0 3df3f4b4 3df46bf3     ...=.}.=...=.k.=
2401f7c4:	3df4e36d 3df55b22 3df5d313 3df64b40     m..="[.=...=@K.=
2401f7d4:	3df6c3a9 3df73c4e 3df7b52f 3df82e4c     ...=N<.=/..=L..=
2401f7e4:	3df8a7a5 3df9213b 3df99b0e 3dfa151d     ...=;!.=...=...=
2401f7f4:	3dfa8f6a 3dfb09f3 3dfb84b9 3dfbffbd     j..=...=...=...=
2401f804:	3dfc7afe 3dfcf67c 3dfd7238 3dfdee32     .z.=|..=8r.=2..=
2401f814:	3dfe6a69 3dfee6df 3dff6393 3dffe085     ij.=...=.c.=...=
2401f824:	3e002eda 3e006d92 3e00ac69 3e00eb5f     ...>.m.>i..>_..>
2401f834:	3e012a74 3e0169a9 3e01a8fe 3e01e872     t*.>.i.>...>r..>
2401f844:	3e022806 3e0267ba 3e02a78e 3e02e782     .(.>.g.>...>...>
2401f854:	3e032795 3e0367c9 3e03a81c 3e03e890     .'.>.g.>...>...>
2401f864:	3e042924 3e0469d9 3e04aaad 3e04eba3     $).>.i.>...>...>
2401f874:	3e052cb8 3e056def 3e05af46 3e05f0bd     .,.>.m.>F..>...>
2401f884:	3e063256 3e06740f 3e06b5e9 3e06f7e4     V2.>.t.>...>...>
2401f894:	3e073a01 3e077c3e 3e07be9d 3e08011c     .:.>>|.>...>...>
2401f8a4:	3e0843be 3e088680 3e08c964 3e090c6a     .C.>...>d..>j..>
2401f8b4:	3e094f91 3e0992da 3e09d644 3e0a19d1     .O.>...>D..>...>
2401f8c4:	3e0a5d7f 3e0aa14f 3e0ae542 3e0b2956     .].>O..>B..>V).>
2401f8d4:	3e0b6d8d 3e0bb1e6 3e0bf661 3e0c3afe     .m.>...>a..>.:.>
2401f8e4:	3e0c7fbe 3e0cc4a1 3e0d09a6 3e0d4ece     ...>...>...>.N.>
2401f8f4:	3e0d9418 3e0dd986 3e0e1f16 3e0e64c9     ...>...>...>.d.>
2401f904:	3e0eaaa0 3e0ef099 3e0f36b6 3e0f7cf6     ...>...>.6.>.|.>
2401f914:	3e0fc359 3e1009e0 3e10508a 3e109758     Y..>...>.P.>X..>
2401f924:	3e10de49 3e11255e 3e116c97 3e11b3f4     I..>^%.>.l.>...>
2401f934:	3e11fb75 3e12431a 3e128ae3 3e12d2d0     u..>.C.>...>...>
2401f944:	3e131ae1 3e136316 3e13ab70 3e13f3ef     ...>.c.>p..>...>
2401f954:	3e143c92 3e14855a 3e14ce46 3e151757     .<.>Z..>F..>W..>
2401f964:	3e15608d 3e15a9e9 3e15f369 3e163d0e     .`.>...>i..>.=.>
2401f974:	3e1686d8 3e16d0c8 3e171add 3e176517     ...>...>...>.e.>
2401f984:	3e17af77 3e17f9fc 3e1844a8 3e188f78     w..>...>.D.>x..>
2401f994:	3e18da6f 3e19258c 3e1970ce 3e19bc37     o..>.%.>.p.>7..>
2401f9a4:	3e1a07c6 3e1a537b 3e1a9f56 3e1aeb58     ...>{S.>V..>X..>
2401f9b4:	3e1b3780 3e1b83cf 3e1bd045 3e1c1ce1     .7.>...>E..>...>
2401f9c4:	3e1c69a4 3e1cb68e 3e1d039e 3e1d50d6     .i.>...>...>.P.>
2401f9d4:	3e1d9e35 3e1debbc 3e1e3969 3e1e873e     5..>...>i9.>>..>
2401f9e4:	3e1ed53b 3e1f235f 3e1f71aa 3e1fc01e     ;..>_#.>.q.>...>
2401f9f4:	3e200eb9 3e205d7c 3e20ac67 3e20fb7a     .. >|] >g. >z. >
2401fa04:	3e214ab6 3e219a1a 3e21e9a6 3e22395a     .J!>..!>..!>Z9">
2401fa14:	3e228937 3e22d93c 3e23296b 3e2379c2     7."><.">k)#>.y#>
2401fa24:	3e23ca42 3e241aea 3e246bbc 3e24bcb7     B.#>..$>.k$>..$>
2401fa34:	3e250ddc 3e255f29 3e25b0a0 3e260241     ..%>)_%>..%>A.&>
2401fa44:	3e26540b 3e26a5ff 3e26f81c 3e274a63     .T&>..&>..&>cJ'>
2401fa54:	3e279cd5 3e27ef70 3e284236 3e289525     ..'>p.'>6B(>%.(>
2401fa64:	3e28e83f 3e293b84 3e298ef3 3e29e28c     ?.(>.;)>..)>..)>
2401fa74:	3e2a3651 3e2a8a40 3e2ade5a 3e2b329e     Q6*>@.*>Z.*>.2+>
2401fa84:	3e2b870e 3e2bdbaa 3e2c3070 3e2c8562     ..+>..+>p0,>b.,>
2401fa94:	3e2cda7f 3e2d2fc8 3e2d853c 3e2ddadc     ..,>./-><.->..->
2401faa4:	3e2e30a8 3e2e86a0 3e2edcc4 3e2f3314     .0.>...>...>.3/>
2401fab4:	3e2f8990 3e2fe038 3e30370d 3e308e0f     ../>8./>.70>..0>
2401fac4:	3e30e53d 3e313c98 3e31941f 3e31ebd4     =.0>.<1>..1>..1>
2401fad4:	3e3243b5 3e329bc4 3e32f400 3e334c69     .C2>..2>..2>iL3>
2401fae4:	3e33a4ff 3e33fdc3 3e3456b5 3e34afd5     ..3>..3>.V4>..4>
2401faf4:	3e350922 3e35629d 3e35bc46 3e36161d     ".5>.b5>F.5>..6>
2401fb04:	3e367023 3e36ca57 3e3724b9 3e377f4a     #p6>W.6>.$7>J.7>
2401fb14:	3e37da09 3e3834f7 3e389014 3e38eb60     ..7>.48>..8>`.8>
2401fb24:	3e3946dc 3e39a286 3e39fe5f 3e3a5a68     .F9>..9>_.9>hZ:>
2401fb34:	3e3ab6a1 3e3b1309 3e3b6fa0 3e3bcc68     ..:>..;>.o;>h.;>
2401fb44:	3e3c295f 3e3c8687 3e3ce3de 3e3d4166     _)<>..<>..<>fA=>
2401fb54:	3e3d9f1e 3e3dfd07 3e3e5b20 3e3eb96a     ..=>..=> [>>j.>>
2401fb64:	3e3f17e5 3e3f7690 3e3fd56d 3e40347a     ..?>.v?>m.?>z4@>
2401fb74:	3e4093b9 3e40f32a 3e4152cb 3e41b29f     ..@>*.@>.RA>..A>
2401fb84:	3e4212a4 3e4272da 3e42d343 3e4333de     ..B>.rB>C.B>.3C>
2401fb94:	3e4394ab 3e43f5aa 3e4456db 3e44b83f     ..C>..C>.VD>?.D>
2401fba4:	3e4519d6 3e457b9f 3e45dd9b 3e463fcb     ..E>.{E>..E>.?F>
2401fbb4:	3e46a22d 3e4704c2 3e47678b 3e47ca87     -.F>..G>.gG>..G>
2401fbc4:	3e482db6 3e48911a 3e48f4b1 3e49587c     .-H>..H>..H>|XI>
2401fbd4:	3e49bc7b 3e4a20ae 3e4a8515 3e4ae9b1     {.I>. J>..J>..J>
2401fbe4:	3e4b4e81 3e4bb386 3e4c18bf 3e4c7e2e     .NK>..K>..L>.~L>
2401fbf4:	3e4ce3d1 3e4d49aa 3e4dafb7 3e4e15fa     ..L>.IM>..M>..N>
2401fc04:	3e4e7c73 3e4ee321 3e4f4a05 3e4fb11f     s|N>!.N>.JO>..O>
2401fc14:	3e50186f 3e507ff4 3e50e7b1 3e514fa3     o.P>..P>..P>.OQ>
2401fc24:	3e51b7cc 3e52202b 3e5288c2 3e52f18f     ..Q>+ R>..R>..R>
2401fc34:	3e535a93 3e53c3ce 3e542d41 3e5496eb     .ZS>..S>A-T>..T>
2401fc44:	3e5500cc 3e556ae5 3e55d536 3e563fbf     ..U>.jU>6.U>.?V>
2401fc54:	3e56aa80 3e571579 3e5780aa 3e57ec14     ..V>y.W>..W>..W>
2401fc64:	3e5857b6 3e58c391 3e592fa5 3e599bf2     .WX>..X>./Y>..Y>
2401fc74:	3e5a0878 3e5a7537 3e5ae230 3e5b4f62     x.Z>7uZ>0.Z>bO[>
2401fc84:	3e5bbcce 3e5c2a73 3e5c9853 3e5d066c     ..[>s*\>S.\>l.]>
2401fc94:	3e5d74c0 3e5de34e 3e5e5217 3e5ec11a     .t]>N.]>.R^>..^>
2401fca4:	3e5f3058 3e5f9fd1 3e600f85 3e607f74     X0_>.._>..`>t.`>
2401fcb4:	3e60ef9e 3e616004 3e61d0a6 3e624183     ..`>.`a>..a>.Ab>
2401fcc4:	3e62b29d 3e6323f2 3e639584 3e640751     ..b>.#c>..c>Q.d>
2401fcd4:	3e64795c 3e64eba3 3e655e27 3e65d0e7     \yd>..d>'^e>..e>
2401fce4:	3e6643e5 3e66b720 3e672a98 3e679e4e     .Cf> .f>.*g>N.g>
2401fcf4:	3e681242 3e688673 3e68fae3 3e696f90     B.h>s.h>..h>.oi>
2401fd04:	3e69e47c 3e6a59a6 3e6acf0f 3e6b44b6     |.i>.Yj>..j>.Dk>
2401fd14:	3e6bba9d 3e6c30c2 3e6ca727 3e6d1dcb     ..k>.0l>'.l>..m>
2401fd24:	3e6d94ae 3e6e0bd2 3e6e8335 3e6efad7     ..m>..n>5.n>..n>
2401fd34:	3e6f72bb 3e6feade 3e706342 3e70dbe6     .ro>..o>Bcp>..p>
2401fd44:	3e7154cc 3e71cdf2 3e724759 3e72c101     .Tq>..q>YGr>..r>
2401fd54:	3e733aeb 3e73b517 3e742f84 3e74aa33     .:s>..s>./t>3.t>
2401fd64:	3e752525 3e75a058 3e761bce 3e769786     %%u>X.u>..v>..v>
2401fd74:	3e771382 3e778fc0 3e780c41 3e788905     ..w>..w>A.x>..x>
2401fd84:	3e79060d 3e798358 3e7a00e7 3e7a7eba     ..y>X.y>..z>.~z>
2401fd94:	3e7afcd1 3e7b7b2d 3e7bf9cd 3e7c78b1     ..z>-{{>..{>.x|>
2401fda4:	3e7cf7da 3e7d7748 3e7df6fb 3e7e76f4     ..|>Hw}>..}>.v~>
2401fdb4:	3e7ef732 3e7f77b6 3e7ff87f 3e803cc7     2.~>.w.>...>.<.>
2401fdc4:	3e807d72 3e80be40 3e80ff31 3e814046     r}.>@..>1..>F@.>
2401fdd4:	3e81817e 3e81c2da 3e820459 3e8245fc     ~..>...>Y..>.E.>
2401fde4:	3e8287c3 3e82c9ae 3e830bbc 3e834def     ...>...>...>.M.>
2401fdf4:	3e839046 3e83d2c1 3e841561 3e845825     F..>...>a..>%X.>
2401fe04:	3e849b0e 3e84de1b 3e85214d 3e8564a4     ...>...>M!.>.d.>
2401fe14:	3e85a820 3e85ebc1 3e862f87 3e867372      ..>...>./.>rs.>
2401fe24:	3e86b783 3e86fbb9 3e874015 3e878496     ...>...>.@.>...>
2401fe34:	3e87c93d 3e880e09 3e8852fc 3e889815     =..>...>.R.>...>
2401fe44:	3e88dd54 3e8922b9 3e896844 3e89adf6     T..>.".>Dh.>...>
2401fe54:	3e89f3ce 3e8a39cd 3e8a7ff2 3e8ac63f     ...>.9.>...>?..>
2401fe64:	3e8b0cb2 3e8b534c 3e8b9a0e 3e8be0f7     ...>LS.>...>...>
2401fe74:	3e8c2807 3e8c6f3e 3e8cb69d 3e8cfe24     .(.>>o.>...>$..>
2401fe84:	3e8d45d3 3e8d8da9 3e8dd5a7 3e8e1dce     .E.>...>...>...>
2401fe94:	3e8e661d 3e8eae94 3e8ef733 3e8f3ffb     .f.>...>3..>.?.>
2401fea4:	3e8f88eb 3e8fd205 3e901b47 3e9064b2     ...>...>G..>.d.>
2401feb4:	3e90ae46 3e90f803 3e9141ea 3e918bfa     F..>...>.A.>...>
2401fec4:	3e91d633 3e922096 3e926b23 3e92b5da     3..>. .>#k.>...>
2401fed4:	3e9300bb 3e934bc5 3e9396fa 3e93e25a     ...>.K.>...>Z..>
2401fee4:	3e942de3 3e947998 3e94c577 3e951180     .-.>.y.>w..>...>
2401fef4:	3e955db5 3e95aa15 3e95f69f 3e964356     .].>...>...>VC.>
2401ff04:	3e969037 3e96dd44 3e972a7c 3e9777e1     7..>D..>|*.>.w.>
2401ff14:	3e97c571 3e98132d 3e986115 3e98af29     q..>-..>.a.>)..>
2401ff24:	3e98fd6a 3e994bd8 3e999a71 3e99e938     j..>.K.>q..>8..>
2401ff34:	3e9a382b 3e9a874c 3e9ad699 3e9b2614     +8.>L..>...>.&.>
2401ff44:	3e9b75bc 3e9bc592 3e9c1595 3e9c65c6     .u.>...>...>.e.>
2401ff54:	3e9cb625 3e9d06b1 3e9d576c 3e9da856     %..>...>lW.>V..>
2401ff64:	3e9df96d 3e9e4ab3 3e9e9c28 3e9eedcc     m..>.J.>(..>...>
2401ff74:	3e9f3f9e 3e9f91a0 3e9fe3d0 3ea03630     .?.>...>...>06.>
2401ff84:	3ea088c0 3ea0db7f 3ea12e6e 3ea1818d     ...>...>n..>...>
2401ff94:	3ea1d4db 3ea2285a 3ea27c0a 3ea2cfe9     ...>Z(.>.|.>...>
2401ffa4:	3ea323f9 3ea3783a 3ea3ccac 3ea4214f     .#.>:x.>...>O!.>
2401ffb4:	3ea47623 3ea4cb28 3ea5205f 3ea575c7     #v.>(..>_ .>.u.>
2401ffc4:	3ea5cb61 3ea6212d 3ea6772b 3ea6cd5b     a..>-!.>+w.>[..>
2401ffd4:	3ea723bd 3ea77a52 3ea7d119 3ea82813     .#.>Rz.>...>.(.>
2401ffe4:	3ea87f40 3ea8d6a0 3ea92e34 3ea985fa     @..>...>4..>...>
2401fff4:	3ea9ddf4 3eaa3622 3eaa8e84 3eaae719     ...>"6.>...>...>
24020004:	3eab3fe3 3eab98e1 3eabf214 3eac4b7b     .?.>...>...>{K.>
24020014:	3eaca516 3eacfee7 3ead58ed 3eadb328     ...>...>.X.>(..>
24020024:	3eae0d99 3eae683f 3eaec31a 3eaf1e2c     ...>?h.>...>,..>
24020034:	3eaf7974 3eafd4f2 3eb030a6 3eb08c91     ty.>...>.0.>...>
24020044:	3eb0e8b2 3eb1450b 3eb1a19a 3eb1fe61     ...>.E.>...>a..>
24020054:	3eb25b5f 3eb2b894 3eb31602 3eb373a7     _[.>...>...>.s.>
24020064:	3eb3d184 3eb42f9a 3eb48de8 3eb4ec6e     ...>./.>...>n..>
24020074:	3eb54b2e 3eb5aa26 3eb60957 3eb668c2     .K.>&..>W..>.h.>
24020084:	3eb6c866 3eb72844 3eb7885c 3eb7e8ae     f..>D(.>\..>...>
24020094:	3eb8493a 3eb8aa00 3eb90b01 3eb96c3d     :I.>...>...>=l.>
240200a4:	3eb9cdb3 3eba2f65 3eba9152 3ebaf37a     ...>e/.>R..>z..>
240200b4:	3ebb55df 3ebbb87f 3ebc1b5b 3ebc7e74     .U.>...>[..>t~.>
240200c4:	3ebce1c9 3ebd455a 3ebda929 3ebe0d34     ...>ZE.>)..>4..>
240200d4:	3ebe717d 3ebed603 3ebf3ac7 3ebf9fc9     }q.>...>.:.>...>
240200e4:	3ec00508 3ec06a86 3ec0d043 3ec1363e     ...>.j.>C..>>6.>
240200f4:	3ec19c78 3ec202f0 3ec269a9 3ec2d0a0     x..>...>.i.>...>
24020104:	3ec337d8 3ec39f4f 3ec40706 3ec46efe     .7.>O..>...>.n.>
24020114:	3ec4d736 3ec53fae 3ec5a868 3ec61163     6..>.?.>h..>c..>
24020124:	3ec67a9f 3ec6e41d 3ec74ddd 3ec7b7de     .z.>...>.M.>...>
24020134:	3ec82222 3ec88ca9 3ec8f772 3ec9627e     "".>...>r..>~b.>
24020144:	3ec9cdcd 3eca395f 3ecaa535 3ecb114f     ...>_9.>5..>O..>
24020154:	3ecb7dad 3ecbea4f 3ecc5736 3eccc461     .}.>O..>6W.>a..>
24020164:	3ecd31d2 3ecd9f87 3ece0d82 3ece7bc3     .1.>...>...>.{.>
24020174:	3eceea4a 3ecf5916 3ecfc82a 3ed03783     J..>.Y.>*..>.7.>
24020184:	3ed0a724 3ed1170c 3ed1873b 3ed1f7b2     $..>...>;..>...>
24020194:	3ed26870 3ed2d977 3ed34ac6 3ed3bc5e     ph.>w..>.J.>^..>
240201a4:	3ed42e3e 3ed4a068 3ed512db 3ed58598     >..>h..>...>...>
240201b4:	3ed5f89e 3ed66bef 3ed6df8a 3ed75370     ...>.k.>...>pS.>
240201c4:	3ed7c7a1 3ed83c1d 3ed8b0e4 3ed925f7     ...>.<.>...>.%.>
240201d4:	3ed99b57 3eda1102 3eda86fa 3edafd3f     W..>...>...>?..>
240201e4:	3edb73d1 3edbeab0 3edc61dd 3edcd958     .s.>...>.a.>X..>
240201f4:	3edd5121 3eddc938 3ede419e 3edeba54     !Q.>8..>.A.>T..>
24020204:	3edf3358 3edfacad 3ee02651 3ee0a045     X3.>...>Q&.>E..>
24020214:	3ee11a8a 3ee19520 3ee21007 3ee28b3f     ...> ..>...>?..>
24020224:	3ee306c9 3ee382a5 3ee3fed3 3ee47b54     ...>...>...>T{.>
24020234:	3ee4f827 3ee5754e 3ee5f2c9 3ee67097     '..>Nu.>...>.p.>
24020244:	3ee6eeb9 3ee76d30 3ee7ebfc 3ee86b1c     ...>0m.>...>.k.>
24020254:	3ee8ea92 3ee96a5e 3ee9ea80 3eea6af8     ...>^j.>...>.j.>
24020264:	3eeaebc7 3eeb6ced 3eebee6a 3eec703f     ...>.l.>j..>?p.>
24020274:	3eecf26c 3eed74f2 3eedf7d0 3eee7b07     l..>.t.>...>.{.>
24020284:	3eeefe97 3eef8282 3ef006c6 3ef08b64     ...>...>...>d..>
24020294:	3ef1105e 3ef195b2 3ef21b62 3ef2a16e     ^..>...>b..>n..>
240202a4:	3ef327d6 3ef3ae9a 3ef435bc 3ef4bd3a     .'.>...>.5.>:..>
240202b4:	3ef54516 3ef5cd50 3ef655e9 3ef6dee0     .E.>P..>.U.>...>
240202c4:	3ef76837 3ef7f1ec 3ef87c02 3ef90678     7h.>...>.|.>x..>
240202d4:	3ef9914e 3efa1c86 3efaa81f 3efb3419     N..>...>...>.4.>
240202e4:	3efbc076 3efc4d36 3efcda58 3efd67dd     v..>6M.>X..>.g.>
240202f4:	3efdf5c7 3efe8414 3eff12c6 3effa1dd     ...>...>...>...>
24020304:	3f0018ad 3f00609e 3f00a8c2 3f00f11a     ...?.`.?...?...?
24020314:	3f0139a5 3f018263 3f01cb56 3f02147d     .9.?c..?V..?}..?
24020324:	3f025dd8 3f02a768 3f02f12d 3f033b26     .].?h..?-..?&;.?
24020334:	3f038555 3f03cfb9 3f041a53 3f046523     U..?...?S..?#e.?
24020344:	3f04b029 3f04fb66 3f0546d9 3f059282     )..?f..?.F.?...?
24020354:	3f05de63 3f062a7b 3f0676cb 3f06c353     c..?{*.?.v.?S..?
24020364:	3f071012 3f075d0a 3f07aa3a 3f07f7a2     ...?.].?:..?...?
24020374:	3f084544 3f08931f 3f08e134 3f092f82     DE.?...?4..?./.?
24020384:	3f097e0a 3f09cccc 3f0a1bc8 3f0a6b00     .~.?...?...?.k.?
24020394:	3f0aba72 3f0b0a20 3f0b5a08 3f0baa2d     r..? ..?.Z.?-..?
240203a4:	3f0bfa8e 3f0c4b2b 3f0c9c04 3f0ced1a     ...?+K.?...?...?
240203b4:	3f0d3e6e 3f0d8ffe 3f0de1cc 3f0e33d8     n>.?...?...?.3.?
240203c4:	3f0e8622 3f0ed8ab 3f0f2b72 3f0f7e78     "..?...?r+.?x~.?
240203d4:	3f0fd1be 3f102543 3f107908 3f10cd0d     ...?C%.?.y.?...?
240203e4:	3f112152 3f1175d9 3f11caa0 3f121fa8     R!.?.u.?...?...?
240203f4:	3f1274f2 3f12ca7e 3f13204c 3f13765d     .t.?~..?L .?]v.?
24020404:	3f13ccb0 3f142346 3f147a20 3f14d13e     ...?F#.? z.?>..?
24020414:	3f1528a0 3f158046 3f15d831 3f163060     .(.?F..?1..?`0.?
24020424:	3f1688d5 3f16e190 3f173a91 3f1793d8     ...?...?.:.?...?
24020434:	3f17ed65 3f18473a 3f18a156 3f18fbba     e..?:G.?V..?...?
24020444:	3f195665 3f19b159 3f1a0c96 3f1a681b     eV.?Y..?...?.h.?
24020454:	3f1ac3ea 3f1b2003 3f1b7c66 3f1bd913     ...?. .?f|.?...?
24020464:	3f1c360b 3f1c934e 3f1cf0dd 3f1d4eb7     .6.?N..?...?.N.?
24020474:	3f1dacde 3f1e0b52 3f1e6a12 3f1ec920     ...?R..?.j.? ..?
24020484:	3f1f287c 3f1f8826 3f1fe81e 3f204866     |(.?&..?...?fH ?
24020494:	3f20a8fc 3f2109e3 3f216b19 3f21cca0     .. ?..!?.k!?..!?
240204a4:	3f222e78 3f2290a2 3f22f31d 3f2355ea     x."?.."?.."?.U#?
240204b4:	3f23b90a 3f241c7d 3f248043 3f24e45d     ..#?}.$?C.$?].$?
240204c4:	3f2548cb 3f25ad8e 3f2612a6 3f267814     .H%?..%?..&?.x&?
240204d4:	3f26ddd7 3f2743f1 3f27aa62 3f28112b     ..&?.C'?b.'?+.(?
240204e4:	3f28784b 3f28dfc3 3f294794 3f29afbe     Kx(?..(?.G)?..)?
240204f4:	3f2a1842 3f2a8120 3f2aea59 3f2b53ed     B.*? .*?Y.*?.S+?
24020504:	3f2bbddc 3f2c2827 3f2c92cf 3f2cfdd4     ..+?'(,?..,?..,?
24020514:	3f2d6936 3f2dd4f6 3f2e4115 3f2ead93     6i-?..-?.A.?...?
24020524:	3f2f1a70 3f2f87ae 3f2ff54c 3f30634b     p./?../?L./?Kc0?
24020534:	3f30d1ac 3f31406e 3f31af94 3f321f1d     ..0?n@1?..1?..2?
24020544:	3f328f09 3f32ff5a 3f337010 3f33e12b     ..2?Z.2?.p3?+.3?
24020554:	3f3452ac 3f34c494 3f3536e3 3f35a999     .R4?..4?.65?..5?
24020564:	3f361cb8 3f369040 3f370431 3f37788c     ..6?@.6?1.7?.x7?
24020574:	3f37ed52 3f386283 3f38d820 3f394e2a     R.7?.b8? .8?*N9?
24020584:	3f39c4a0 3f3a3b85 3f3ab2d7 3f3b2a99     ..9?.;:?..:?.*;?
24020594:	3f3ba2ca 3f3c1b6c 3f3c947e 3f3d0e02     ..;?l.<?~.<?..=?
240205a4:	3f3d87f8 3f3e0261 3f3e7d3e 3f3ef88e     ..=?a.>?>}>?..>?
240205b4:	3f3f7454 3f3ff090 3f406d41 3f40ea6a     Tt??..??Am@?j.@?
240205c4:	3f41680a 3f41e623 3f4264b5 3f42e3c1     .hA?#.A?.dB?..B?
240205d4:	3f436347 3f43e349 3f4463c6 3f44e4c1     GcC?I.C?.cD?..D?
240205e4:	3f456639 3f45e82f 3f466aa5 3f46ed9a     9fE?/.E?.jF?..F?
240205f4:	3f477110 3f47f507 3f487981 3f48fe7d     .qG?..G?.yH?}.H?
24020604:	3f4983fe 3f4a0a03 3f4a908d 3f4b179e     ..I?..J?..J?..K?
24020614:	3f4b9f36 3f4c2756 3f4cafff 3f4d3932     6.K?V'L?..L?29M?
24020624:	3f4dc2ef 3f4e4d37 3f4ed80c 3f4f636e     ..M?7MN?..N?ncO?
24020634:	3f4fef5e 3f507bdd 3f5108ec 3f51968b     ^.O?.{P?..Q?..Q?
24020644:	3f5224bd 3f52b381 3f5342d9 3f53d2c6     .$R?..R?.BS?..S?
24020654:	3f546348 3f54f460 3f558611 3f561859     HcT?`.T?..U?Y.V?
24020664:	3f56ab3b 3f573eb8 3f57d2d0 3f586785     ;.V?.>W?..W?.gX?
24020674:	3f58fcd8 3f5992c9 3f5a295a 3f5ac08b     ..X?..Y?Z)Z?..Z?
24020684:	3f5b585f 3f5bf0d5 3f5c89f0 3f5d23b0     _X[?..[?..\?.#]?
24020694:	3f5dbe16 3f5e5923 3f5ef4d9 3f5f9138     ..]?#Y^?..^?8._?
240206a4:	3f602e43 3f60cbf9 3f616a5d 3f62096f     C.`?..`?]ja?o.b?
240206b4:	3f62a931 3f6349a4 3f63eac8 3f648ca0     1.b?.Ic?..c?..d?
240206c4:	3f652f2d 3f65d26f 3f667669 3f671b1b     -/e?o.e?ivf?..g?
240206d4:	3f67c086 3f6866ad 3f690d90 3f69b531     ..g?.fh?..i?1.i?
240206e4:	3f6a5d91 3f6b06b1 3f6bb093 3f6c5b38     .]j?..k?..k?8[l?
240206f4:	3f6d06a2 3f6db2d2 3f6e5fca 3f6f0d8a     ..m?..m?._n?..o?
24020704:	3f6fbc15 3f706b6c 3f711b90 3f71cc83     ..o?lkp?..q?..q?
24020714:	3f727e47 3f7330dd 3f73e446 3f749884     G~r?.0s?F.s?..t?
24020724:	3f754d9a 3f760387 3f76ba4f 3f7771f2     .Mu?..v?O.v?.qw?
24020734:	3f782a73 3f78e3d2 3f799e12 3f7a5935     s*x?..x?..y?5Yz?
24020744:	3f7b153c 3f7bd228 3f7c8ffd 3f7d4ebb     <.{?(.{?..|?.N}?
24020754:	3f7e0e64 3f7ecefa 3f7f9080 3f80297b     d.~?..~?...?{).?
24020764:	3f808b2f 3f80ed5e 3f815008 3f81b32e     /..?^..?.P.?...?
24020774:	3f8216d2 3f827af4 3f82df95 3f8344b6     ...?.z.?...?.D.?
24020784:	3f83aa59 3f84107e 3f847727 3f84de54     Y..?~..?'w.?T..?
24020794:	3f854606 3f85ae3f 3f861700 3f86804a     .F.??..?...?J..?
240207a4:	3f86ea1e 3f87547d 3f87bf68 3f882ae1     ...?}T.?h..?.*.?
240207b4:	3f8896e8 3f890380 3f8970a8 3f89de63     ...?...?.p.?c..?
240207c4:	3f8a4cb1 3f8abb94 3f8b2b0d 3f8b9b1d     .L.?...?.+.?...?
240207d4:	3f8c0bc6 3f8c7d09 3f8ceee7 3f8d6162     ...?.}.?...?ba.?
240207e4:	3f8dd47a 3f8e4832 3f8ebc8b 3f8f3186     z..?2H.?...?.1.?
240207f4:	3f8fa724 3f901d68 3f909452 3f910be4     $..?h..?R..?...?
24020804:	3f91841f 3f91fd05 3f927698 3f92f0d9     ...?...?.v.?...?
24020814:	3f936bc9 3f93e76b 3f9463bf 3f94e0c8     .k.?k..?.c.?...?
24020824:	3f955e87 3f95dcfe 3f965c2e 3f96dc19     .^.?...?.\.?...?
24020834:	3f975cc2 3f97de29 3f986050 3f98e33a     .\.?)..?P`.?:..?
24020844:	3f9966e8 3f99eb5c 3f9a7097 3f9af69d     .f.?\..?.p.?...?
24020854:	3f9b7d6e 3f9c050c 3f9c8d7a 3f9d16ba     n}.?...?z..?...?
24020864:	3f9da0cd 3f9e2bb6 3f9eb777 3f9f4412     ...?.+.?w..?.D.?
24020874:	3f9fd188 3fa05fdd 3fa0ef12 3fa17f29     ...?._.?...?)..?
24020884:	3fa21026 3fa2a209 3fa334d6 3fa3c88f     &..?...?.4.?...?
24020894:	3fa45d36 3fa4f2cd 3fa58958 3fa620d8     6].?...?X..?. .?
240208a4:	3fa6b950 3fa752c2 3fa7ed32 3fa888a1     P..?.R.?2..?...?
240208b4:	3fa92513 3fa9c28a 3faa6109 3fab0093     .%.?...?.a.?...?
240208c4:	3faba12a 3fac42d2 3face58c 3fad895d     *..?.B.?...?]..?
240208d4:	3fae2e47 3faed44d 3faf7b73 3fb023bb     G..?M..?s{.?.#.?
240208e4:	3fb0cd28 3fb177be 3fb22380 3fb2d072     (..?.w.?.#.?r..?
240208f4:	3fb37e96 3fb42df0 3fb4de84 3fb59055     .~.?.-.?...?U..?
24020904:	3fb64366 3fb6f7bc 3fb7ad59 3fb86443     fC.?...?Y..?Cd.?
24020914:	3fb91c7b 3fb9d607 3fba90ea 3fbb4d29     {..?...?...?)M.?
24020924:	3fbc0ac6 3fbcc9c7 3fbd8a2f 3fbe4c03     ...?...?/..?.L.?
24020934:	3fbf0f47 3fbfd400 3fc09a31 3fc161df     G..?...?1..?.a.?
24020944:	3fc22b0f 3fc2f5c6 3fc3c208 3fc48fda     .+.?...?...?...?
24020954:	3fc55f41 3fc63042 3fc702e2 3fc7d726     A_.?B0.?...?&..?
24020964:	3fc8ad14 3fc984b0 3fca5e00 3fcb390a     ...?...?.^.?.9.?
24020974:	3fcc15d2 3fccf460 3fcdd4b8 3fceb6e1     ...?`..?...?...?
24020984:	3fcf9ae0 3fd080bc 3fd1687a 3fd25222     ...?...?zh.?"R.?
24020994:	3fd33db9 3fd42b46 3fd51ad0 3fd60c5d     .=.?F+.?...?]..?
240209a4:	3fd6fff4 3fd7f59d 3fd8ed5e 3fd9e73f     ...?...?^..??..?
240209b4:	3fdae347 3fdbe17e 3fdce1eb 3fdde497     G..?~..?...?...?
240209c4:	3fdee988 3fdff0c8 3fe0fa5e 3fe20654     ...?...?^..?T..?
240209d4:	3fe314b1 3fe4257e 3fe538c5 3fe64e8d     ...?~%.?.8.?.N.?
240209e4:	3fe766e2 3fe881cc 3fe99f54 3feabf85     .f.?...?T..?...?
240209f4:	3febe269 3fed080a 3fee3071 3fef5bab     i..?...?q0.?.[.?
24020a04:	3ff089c1 3ff1bac0 3ff2eeb1 3ff425a1     ...?...?...?.%.?
24020a14:	3ff55f9c 3ff69cad 3ff7dce1 3ff92044     ._.?...?...?D .?
24020a24:	3ffa66e4 3ffbb0cc 3ffcfe0b 3ffe4eae     .f.?...?...?.N.?
24020a34:	3fffa2c4 40007d2c 40012abf 4001da20     ...?,}.@.*.@ ..@
24020a44:	40028b57 40033e6d 4003f368 4004aa52     W..@m>.@h..@R..@
24020a54:	40056333 40061e12 4006daf9 400799f1     3c.@...@...@...@
24020a64:	40085b02 40091e36 4009e397 400aab2e     .[.@6..@...@...@
24020a74:	400b7504 400c4126 400d0f9b 400de071     .u.@&A.@...@q..@
24020a84:	400eb3b0 400f8965 4010619b 40113c5e     ...@e..@.a.@^<.@
24020a94:	401219ba 4012f9bb 4013dc6e 4014c1e0     ...@...@n..@...@
24020aa4:	4015aa1e 40169536 40178336 4018742c     ...@6..@6..@,t.@
24020ab4:	40196827 401a5f36 401b5968 401c56cf     'h.@6_.@hY.@.V.@
24020ac4:	401d5779 401e5b78 401f62de 40206dbb     yW.@x[.@.b.@.m @
24020ad4:	40217c22 40228e25 4023a3d9 4024bd51     "|!@%."@..#@Q.$@
24020ae4:	4025daa1 4026fbde 4028211e 40294a76     ..%@..&@.!(@vJ)@
24020af4:	402a77fe 402ba9ce 402cdffc 402e1aa3     .w*@..+@..,@...@
24020b04:	402f59db 40309dc0 4031e66c 403333fc     .Y/@..0@l.1@.33@

24020b14 <__filterTanhTable_96000>:
24020b14:	398c4646 398c8a33 398cce40 398d126e     FF.93..9@..9n..9
24020b24:	398d56bd 398d9b2e 398ddfbf 398e2472     .V.9...9...9r$.9
24020b34:	398e6946 398eae3b 398ef351 398f3889     Fi.9;..9Q..9.8.9
24020b44:	398f7de3 398fc35e 399008fb 39904eb9     .}.9^..9...9.N.9
24020b54:	3990949a 3990da9c 399120c0 39916706     ...9...9. .9.g.9
24020b64:	3991ad6e 3991f3f8 39923aa4 39928173     n..9...9.:.9s..9
24020b74:	3992c863 39930f76 399356ac 39939e04     c..9v..9.V.9...9
24020b84:	3993e57f 39942d1c 399474dc 3994bcbe     ...9.-.9.t.9...9
24020b94:	399504c3 39954cec 39959537 3995dda5     ...9.L.97..9...9
24020ba4:	39962636 39966eeb 3996b7c2 399700bd     6&.9.n.9...9...9
24020bb4:	399749dc 3997931d 3997dc82 3998260b     .I.9...9...9.&.9
24020bc4:	39986fb7 3998b987 3999037b 39994d92     .o.9...9{..9.M.9
24020bd4:	399997ce 3999e22d 399a2cb0 399a7758     ...9-..9.,.9Xw.9
24020be4:	399ac223 399b0d13 399b5827 399ba35f     #..9...9'X.9_..9
24020bf4:	399beebc 399c3a3d 399c85e3 399cd1ae     ...9=:.9...9...9
24020c04:	399d1d9d 399d69b1 399db5ea 399e0247     ...9.i.9...9G..9
24020c14:	399e4eca 399e9b72 399ee83f 399f3531     .N.9r..9?..915.9
24020c24:	399f8248 399fcf85 39a01ce7 39a06a6e     H..9...9...9nj.9
24020c34:	39a0b81b 39a105ee 39a153e6 39a1a204     ...9...9.S.9...9
24020c44:	39a1f048 39a23eb2 39a28d42 39a2dbf8     H..9.>.9B..9...9
24020c54:	39a32ad4 39a379d6 39a3c8fe 39a4184d     .*.9.y.9...9M..9
24020c64:	39a467c2 39a4b75d 39a50720 39a55708     .g.9]..9 ..9.W.9
24020c74:	39a5a718 39a5f74e 39a647ab 39a6982f     ...9N..9.G.9/..9
24020c84:	39a6e8da 39a739ac 39a78aa5 39a7dbc5     ...9.9.9...9...9
24020c94:	39a82d0d 39a87e7c 39a8d012 39a921d0     .-.9|~.9...9.!.9
24020ca4:	39a973b6 39a9c5c3 39aa17f8 39aa6a55     .s.9...9...9Uj.9
24020cb4:	39aabcd9 39ab0f86 39ab625a 39abb557     ...9...9Zb.9W..9
24020cc4:	39ac087c 39ac5bc9 39acaf3e 39ad02dc     |..9.[.9>..9...9
24020cd4:	39ad56a3 39adaa92 39adfea9 39ae52e9     .V.9...9...9.R.9
24020ce4:	39aea753 39aefbe5 39af509f 39afa583     S..9...9.P.9...9
24020cf4:	39affa90 39b04fc7 39b0a526 39b0faaf     ...9.O.9&..9...9
24020d04:	39b15061 39b1a63d 39b1fc42 39b25271     aP.9=..9B..9qR.9
24020d14:	39b2a8ca 39b2ff4c 39b355f9 39b3accf     ...9L..9.U.9...9
24020d24:	39b403d0 39b45afa 39b4b24f 39b509ce     ...9.Z.9O..9...9
24020d34:	39b56177 39b5b94b 39b61149 39b66972     wa.9K..9I..9ri.9
24020d44:	39b6c1c6 39b71a45 39b772ee 39b7cbc2     ...9E..9.r.9...9
24020d54:	39b824c1 39b87dec 39b8d741 39b930c2     .$.9.}.9A..9.0.9
24020d64:	39b98a6e 39b9e445 39ba3e48 39ba9877     n..9E..9H>.9w..9
24020d74:	39baf2d1 39bb4d57 39bba809 39bc02e7     ...9WM.9...9...9
24020d84:	39bc5df1 39bcb927 39bd1489 39bd7017     .].9'..9...9.p.9
24020d94:	39bdcbd2 39be27b9 39be83cc 39bee00c     ...9.'.9...9...9
24020da4:	39bf3c79 39bf9912 39bff5d9 39c052cc     y<.9...9...9.R.9
24020db4:	39c0afec 39c10d3a 39c16ab4 39c1c85c     ...9:..9.j.9\..9
24020dc4:	39c22631 39c28434 39c2e264 39c340c2     1&.94..9d..9.@.9
24020dd4:	39c39f4d 39c3fe07 39c45cee 39c4bc03     M..9...9.\.9...9
24020de4:	39c51b46 39c57ab7 39c5da56 39c63a24     F..9.z.9V..9$:.9
24020df4:	39c69a20 39c6fa4b 39c75aa4 39c7bb2c      ..9K..9.Z.9,..9
24020e04:	39c81be2 39c87cc8 39c8dddc 39c93f1f     ...9.|.9...9.?.9
24020e14:	39c9a092 39ca0233 39ca6404 39cac604     ...93..9.d.9...9
24020e24:	39cb2834 39cb8a93 39cbed22 39cc4fe1     4(.9...9"..9.O.9
24020e34:	39ccb2cf 39cd15ed 39cd793c 39cddcba     ...9...9<y.9...9
24020e44:	39ce4069 39cea447 39cf0857 39cf6c96     i@.9G..9W..9.l.9
24020e54:	39cfd106 39d035a7 39d09a79 39d0ff7b     ...9.5.9y..9{..9
24020e64:	39d164ae 39d1ca13 39d22fa8 39d2956f     .d.9...9./.9o..9
24020e74:	39d2fb66 39d36190 39d3c7ea 39d42e76     f..9.a.9...9v..9
24020e84:	39d49534 39d4fc24 39d56346 39d5ca99     4..9$..9Fc.9...9
24020e94:	39d6321e 39d699d6 39d701c0 39d769dc     .2.9...9...9.i.9
24020ea4:	39d7d22a 39d83aab 39d8a35f 39d90c45     *..9.:.9_..9E..9
24020eb4:	39d9755f 39d9deab 39da482a 39dab1dc     _u.9...9*H.9...9
24020ec4:	39db1bc1 39db85d9 39dbf025 39dc5aa5     ...9...9%..9.Z.9
24020ed4:	39dcc558 39dd303e 39dd9b59 39de06a7     X..9>0.9Y..9...9
24020ee4:	39de7229 39dedddf 39df49ca 39dfb5e9     )r.9...9.I.9...9
24020ef4:	39e0223c 39e08ec3 39e0fb7f 39e16870     <".9...9...9ph.9
24020f04:	39e1d595 39e242f0 39e2b07f 39e31e43     ...9.B.9...9C..9
24020f14:	39e38c3c 39e3fa6b 39e468cf 39e4d769     <..9k..9.h.9i..9
24020f24:	39e54638 39e5b53c 39e62477 39e693e7     8F.9<..9w$.9...9
24020f34:	39e7038d 39e7736a 39e7e37c 39e853c5     ...9js.9|..9.S.9
24020f44:	39e8c444 39e934fa 39e9a5e6 39ea1709     D..9.4.9...9...9
24020f54:	39ea8863 39eaf9f3 39eb6bbb 39ebddb9     c..9...9.k.9...9
24020f64:	39ec4fef 39ecc25c 39ed3501 39eda7dd     .O.9\..9.5.9...9
24020f74:	39ee1af0 39ee8e3c 39ef01bf 39ef757a     ...9<..9...9zu.9
24020f84:	39efe96d 39f05d99 39f0d1fc 39f14698     m..9.].9...9.F.9
24020f94:	39f1bb6d 39f2307a 39f2a5bf 39f31b3e     m..9z0.9...9>..9
24020fa4:	39f390f5 39f406e5 39f47d0f 39f4f371     ...9...9.}.9q..9
24020fb4:	39f56a0d 39f5e0e3 39f657f2 39f6cf3a     .j.9...9.W.9:..9
24020fc4:	39f746bd 39f7be79 39f8366f 39f8ae9f     .F.9y..9o6.9...9
24020fd4:	39f9270a 39f99faf 39fa188e 39fa91a8     .'.9...9...9...9
24020fe4:	39fb0afc 39fb848b 39fbfe55 39fc785a     ...9...9U..9Zx.9
24020ff4:	39fcf29a 39fd6d15 39fde7cc 39fe62be     ...9.m.9...9.b.9
24021004:	39feddeb 39ff5955 39ffd4f9 3a00286d     ...9UY.9...9m(.:
24021014:	3a00667b 3a00a4a8 3a00e2f2 3a01215b     {f.:...:...:[!.:
24021024:	3a015fe2 3a019e87 3a01dd4b 3a021c2d     ._.:...:K..:-..:
24021034:	3a025b2d 3a029a4c 3a02d989 3a0318e5     -[.:L..:...:...:
24021044:	3a035860 3a0397fa 3a03d7b2 3a041789     `X.:...:...:...:
24021054:	3a04577f 3a049794 3a04d7c8 3a05181b     .W.:...:...:...:
24021064:	3a05588d 3a05991f 3a05d9d0 3a061aa0     .X.:...:...:...:
24021074:	3a065b8f 3a069c9e 3a06ddcd 3a071f1a     .[.:...:...:...:
24021084:	3a076088 3a07a215 3a07e3c2 3a08258f     .`.:...:...:.%.:
24021094:	3a08677c 3a08a988 3a08ebb5 3a092e02     |g.:...:...:...:
240210a4:	3a09706e 3a09b2fb 3a09f5a8 3a0a3876     np.:...:...:v8.:
240210b4:	3a0a7b63 3a0abe72 3a0b01a0 3a0b44ef     c{.:r..:...:.D.:
240210c4:	3a0b885f 3a0bcbef 3a0c0fa1 3a0c5372     _..:...:...:rS.:
240210d4:	3a0c9765 3a0cdb79 3a0d1fad 3a0d6403     e..:y..:...:.d.:
240210e4:	3a0da87a 3a0ded12 3a0e31cb 3a0e76a5     z..:...:.1.:.v.:
240210f4:	3a0ebba1 3a0f00be 3a0f45fc 3a0f8b5c     ...:...:.E.:\..:
24021104:	3a0fd0de 3a101681 3a105c46 3a10a22d     ...:...:F\.:-..:
24021114:	3a10e836 3a112e61 3a1174ad 3a11bb1c     6..:a..:.t.:...:
24021124:	3a1201ac 3a12485f 3a128f34 3a12d62c     ...:_H.:4..:,..:
24021134:	3a131d46 3a136482 3a13abe1 3a13f362     F..:.d.:...:b..:
24021144:	3a143b06 3a1482cc 3a14cab6 3a1512c2     .;.:...:...:...:
24021154:	3a155af1 3a15a343 3a15ebb8 3a163450     .Z.:C..:...:P4.:
24021164:	3a167d0b 3a16c5ea 3a170eeb 3a175810     .}.:...:...:.X.:
24021174:	3a17a159 3a17eac5 3a183454 3a187e08     Y..:...:T4.:.~.:
24021184:	3a18c7de 3a1911d9 3a195bf7 3a19a63a     ...:...:.[.::..:
24021194:	3a19f0a0 3a1a3b2a 3a1a85d9 3a1ad0ab     ...:*;.:...:...:
240211a4:	3a1b1ba2 3a1b66bd 3a1bb1fd 3a1bfd61     ...:.f.:...:a..:
240211b4:	3a1c48e9 3a1c9496 3a1ce068 3a1d2c5e     .H.:...:h..:^,.:
240211c4:	3a1d7879 3a1dc4b9 3a1e111e 3a1e5da8     yx.:...:...:.].:
240211d4:	3a1eaa57 3a1ef72b 3a1f4424 3a1f9143     W..:+..:$D.:C..:
240211e4:	3a1fde86 3a202bf0 3a20797e 3a20c733     ...:.+ :~y :3. :
240211f4:	3a21150d 3a21630c 3a21b132 3a21ff7d     ..!:.c!:2.!:}.!:
24021204:	3a224dee 3a229c85 3a22eb43 3a233a26     .M":..":C.":&:#:
24021214:	3a238930 3a23d85f 3a2427b6 3a247732     0.#:_.#:.'$:2w$:
24021224:	3a24c6d5 3a25169f 3a25668f 3a25b6a6     ..$:..%:.f%:..%:
24021234:	3a2606e4 3a265748 3a26a7d4 3a26f886     ..&:HW&:..&:..&:
24021244:	3a274960 3a279a61 3a27eb89 3a283cd8     `I':a.':..':.<(:
24021254:	3a288e4f 3a28dfed 3a2931b2 3a2983a0     O.(:..(:.1):..):
24021264:	3a29d5b4 3a2a27f1 3a2a7a56 3a2acce2     ..):.'*:Vz*:..*:
24021274:	3a2b1f96 3a2b7273 3a2bc577 3a2c18a4     ..+:sr+:w.+:..,:
24021284:	3a2c6bf9 3a2cbf76 3a2d131c 3a2d66ea     .k,:v.,:..-:.f-:
24021294:	3a2dbae1 3a2e0f00 3a2e6348 3a2eb7b9     ..-:...:Hc.:...:
240212a4:	3a2f0c53 3a2f6116 3a2fb602 3a300b17     S./:.a/:../:..0:
240212b4:	3a306055 3a30b5bd 3a310b4e 3a316108     U`0:..0:N.1:.a1:
240212c4:	3a31b6ec 3a320cf9 3a326330 3a32b991     ..1:..2:0c2:..2:
240212d4:	3a33101c 3a3366d0 3a33bdaf 3a3414b7     ..3:.f3:..3:..4:
240212e4:	3a346bea 3a34c347 3a351ace 3a357280     .k4:G.4:..5:.r5:
240212f4:	3a35ca5c 3a362263 3a367a94 3a36d2f0     \.5:c"6:.z6:..6:
24021304:	3a372b77 3a378428 3a37dd05 3a38360c     w+7:(.7:..7:.68:
24021314:	3a388f3f 3a38e89d 3a394226 3a399bdb     ?.8:..8:&B9:..9:
24021324:	3a39f5bb 3a3a4fc6 3a3aa9fd 3a3b0460     ..9:.O::..::`.;:
24021334:	3a3b5eee 3a3bb9a9 3a3c148f 3a3c6fa1     .^;:..;:..<:.o<:
24021344:	3a3ccae0 3a3d264b 3a3d81e1 3a3ddda5     ..<:K&=:..=:..=:
24021354:	3a3e3994 3a3e95b0 3a3ef1f9 3a3f4e6f     .9>:..>:..>:oN?:
24021364:	3a3fab11 3a4007e0 3a4064dc 3a40c205     ..?:..@:.d@:..@:
24021374:	3a411f5b 3a417cdf 3a41da8f 3a42386d     [.A:.|A:..A:m8B:
24021384:	3a429679 3a42f4b2 3a435318 3a43b1ad     y.B:..B:.SC:..C:
24021394:	3a44106f 3a446f5f 3a44ce7d 3a452dc9     o.D:_oD:}.D:.-E:
240213a4:	3a458d43 3a45eceb 3a464cc2 3a46acc7     C.E:..E:.LF:..F:
240213b4:	3a470cfb 3a476d5d 3a47cdee 3a482eae     ..G:]mG:..G:..H:
240213c4:	3a488f9c 3a48f0b9 3a495206 3a49b381     ..H:..H:.RI:..I:
240213d4:	3a4a152c 3a4a7706 3a4ad910 3a4b3b49     ,.J:.wJ:..J:I;K:
240213e4:	3a4b9db1 3a4c0049 3a4c6311 3a4cc609     ..K:I.L:.cL:..L:
240213f4:	3a4d2930 3a4d8c88 3a4df010 3a4e53c8     0)M:..M:..M:.SN:
24021404:	3a4eb7b0 3a4f1bc8 3a4f8012 3a4fe48b     ..N:..O:..O:..O:
24021414:	3a504935 3a50ae10 3a51131c 3a517859     5IP:..P:..Q:YxQ:
24021424:	3a51ddc7 3a524366 3a52a936 3a530f37     ..Q:fCR:6.R:7.S:
24021434:	3a53756a 3a53dbce 3a544264 3a54a92c     juS:..S:dBT:,.T:
24021444:	3a551025 3a557750 3a55dead 3a56463d     %.U:PwU:..U:=FV:
24021454:	3a56adfe 3a5715f1 3a577e17 3a57e670     ..V:..W:.~W:p.W:
24021464:	3a584efb 3a58b7b8 3a5920a8 3a5989cb     .NX:..X:. Y:..Y:
24021474:	3a59f321 3a5a5caa 3a5ac666 3a5b3055     !.Y:.\Z:f.Z:U0[:
24021484:	3a5b9a78 3a5c04ce 3a5c6f57 3a5cda14     x.[:..\:Wo\:..\:
24021494:	3a5d4505 3a5db029 3a5e1b82 3a5e870e     .E]:).]:..^:..^:
240214a4:	3a5ef2ce 3a5f5ec3 3a5fcaec 3a603749     ..^:.^_:.._:I7`:
240214b4:	3a60a3db 3a6110a1 3a617d9c 3a61eacc     ..`:..a:.}a:..a:
240214c4:	3a625830 3a62c5ca 3a633398 3a63a19c     0Xb:..b:.3c:..c:
240214d4:	3a640fd5 3a647e44 3a64ece7 3a655bc1     ..d:D~d:..d:.[e:
240214e4:	3a65cad0 3a663a15 3a66a990 3a671941     ..e:.:f:..f:A.g:
240214f4:	3a678927 3a67f944 3a686998 3a68da21     '.g:D.g:.ih:!.h:
24021504:	3a694ae2 3a69bbd8 3a6a2d06 3a6a9e6a     .Ji:..i:.-j:j.j:
24021514:	3a6b1006 3a6b81d8 3a6bf3e1 3a6c6622     ..k:..k:..k:"fl:
24021524:	3a6cd89a 3a6d4b49 3a6dbe30 3a6e314e     ..l:IKm:0.m:N1n:
24021534:	3a6ea4a4 3a6f1832 3a6f8bf9 3a6ffff7     ..n:2.o:..o:..o:
24021544:	3a70742d 3a70e89b 3a715d42 3a71d222     -tp:..p:B]q:".q:
24021554:	3a72473a 3a72bc8a 3a733214 3a73a7d6     :Gr:..r:.2s:..s:
24021564:	3a741dd2 3a749406 3a750a74 3a75811b     ..t:..t:t.u:..u:
24021574:	3a75f7fc 3a766f16 3a76e66a 3a775df7     ..u:.ov:j.v:.]w:
24021584:	3a77d5bf 3a784dc0 3a78c5fc 3a793e72     ..w:.Mx:..x:r>y:
24021594:	3a79b722 3a7a300c 3a7aa931 3a7b2291     ".y:.0z:1.z:."{:
240215a4:	3a7b9c2c 3a7c1601 3a7c9012 3a7d0a5d     ,.{:..|:..|:].}:
240215b4:	3a7d84e4 3a7dffa6 3a7e7aa4 3a7ef5dd     ..}:..}:.z~:..~:
240215c4:	3a7f7151 3a7fed02 3a803477 3a80728b     Qq.:...:w4.:.r.:
240215d4:	3a80b0be 3a80ef0e 3a812d7d 3a816c09     ...:...:}-.:.l.:
240215e4:	3a81aab5 3a81e97e 3a822866 3a82676c     ...:~..:f(.:lg.:
240215f4:	3a82a691 3a82e5d4 3a832536 3a8364b7     ...:...:6%.:.d.:
24021604:	3a83a456 3a83e415 3a8423f2 3a8463ee     V..:...:.#.:.c.:
24021614:	3a84a409 3a84e443 3a85249c 3a856515     ...:C..:.$.:.e.:
24021624:	3a85a5ac 3a85e663 3a862739 3a86682f     ...:c..:9'.:/h.:
24021634:	3a86a944 3a86ea78 3a872bcc 3a876d40     D..:x..:.+.:@m.:
24021644:	3a87aed3 3a87f087 3a88325a 3a88744c     ...:...:Z2.:Lt.:
24021654:	3a88b65f 3a88f892 3a893ae5 3a897d58     _..:...:.:.:X}.:
24021664:	3a89bfeb 3a8a029e 3a8a4572 3a8a8866     ...:...:rE.:f..:
24021674:	3a8acb7b 3a8b0eb0 3a8b5205 3a8b957b     {..:...:.R.:{..:
24021684:	3a8bd912 3a8c1cc9 3a8c60a2 3a8ca49b     ...:...:.`.:...:
24021694:	3a8ce8b5 3a8d2cf0 3a8d714c 3a8db5c9     ...:.,.:Lq.:...:
240216a4:	3a8dfa67 3a8e3f27 3a8e8408 3a8ec90a     g..:'?.:...:...:
240216b4:	3a8f0e2d 3a8f5372 3a8f98d9 3a8fde61     -..:rS.:...:a..:
240216c4:	3a90240b 3a9069d7 3a90afc4 3a90f5d3     .$.:.i.:...:...:
240216d4:	3a913c05 3a918258 3a91c8cd 3a920f64     .<.:X..:...:d..:
240216e4:	3a92561e 3a929cfa 3a92e3f8 3a932b18     .V.:...:...:.+.:
240216f4:	3a93725b 3a93b9c1 3a940149 3a9448f3     [r.:...:I..:.H.:
24021704:	3a9490c1 3a94d8b1 3a9520c4 3a9568f9     ...:...:. .:.h.:
24021714:	3a95b152 3a95f9ce 3a96426d 3a968b2f     R..:...:mB.:/..:
24021724:	3a96d414 3a971d1d 3a976649 3a97af98     ...:...:If.:...:
24021734:	3a97f90b 3a9842a2 3a988c5c 3a98d63a     ...:.B.:\..::..:
24021744:	3a99203b 3a996a61 3a99b4aa 3a99ff17     ; .:aj.:...:...:
24021754:	3a9a49a9 3a9a945e 3a9adf38 3a9b2a35     .I.:^..:8..:5*.:
24021764:	3a9b7558 3a9bc09e 3a9c0c09 3a9c5799     Xu.:...:...:.W.:
24021774:	3a9ca34d 3a9cef26 3a9d3b23 3a9d8745     M..:&..:#;.:E..:
24021784:	3a9dd38c 3a9e1ff9 3a9e6c8a 3a9eb940     ...:...:.l.:@..:
24021794:	3a9f061b 3a9f531c 3a9fa041 3a9fed8d     ...:.S.:A..:...:
240217a4:	3aa03afd 3aa08893 3aa0d64f 3aa12430     .:.:...:O..:0$.:
240217b4:	3aa17237 3aa1c064 3aa20eb7 3aa25d2f     7r.:d..:...:/].:
240217c4:	3aa2abce 3aa2fa92 3aa3497d 3aa3988e     ...:...:}I.:...:
240217d4:	3aa3e7c5 3aa43723 3aa486a7 3aa4d652     ...:#7.:...:R..:
240217e4:	3aa52623 3aa5761b 3aa5c639 3aa6167e     #&.:.v.:9..:~..:
240217f4:	3aa666eb 3aa6b77e 3aa70838 3aa75919     .f.:~..:8..:.Y.:
24021804:	3aa7aa21 3aa7fb51 3aa84ca8 3aa89e26     !..:Q..:.L.:&..:
24021814:	3aa8efcc 3aa94199 3aa9938e 3aa9e5ab     ...:.A.:...:...:
24021824:	3aaa37ef 3aaa8a5b 3aaadcf0 3aab2fac     .7.:[..:...:./.:
24021834:	3aab8290 3aabd59c 3aac28d1 3aac7c2d     ...:...:.(.:-|.:
24021844:	3aaccfb3 3aad2360 3aad7736 3aadcb35     ...:`#.:6w.:5..:
24021854:	3aae1f5c 3aae73ad 3aaec826 3aaf1cc7     \..:.s.:&..:...:
24021864:	3aaf7192 3aafc686 3ab01ba3 3ab070e9     .q.:...:...:.p.:
24021874:	3ab0c659 3ab11bf2 3ab171b4 3ab1c7a0     Y..:...:.q.:...:
24021884:	3ab21db6 3ab273f5 3ab2ca5e 3ab320f1     ...:.s.:^..:. .:
24021894:	3ab377ad 3ab3ce94 3ab425a5 3ab47ce0     .w.:...:.%.:.|.:
240218a4:	3ab4d445 3ab52bd4 3ab5838e 3ab5db73     E..:.+.:...:s..:
240218b4:	3ab63382 3ab68bbb 3ab6e420 3ab73caf     .3.:...: ..:.<.:
240218c4:	3ab79569 3ab7ee4e 3ab8475e 3ab8a099     i..:N..:^G.:...:
240218d4:	3ab8f9ff 3ab95391 3ab9ad4e 3aba0736     ...:.S.:N..:6..:
240218e4:	3aba614a 3ababb8a 3abb15f5 3abb708c     Ja.:...:...:.p.:
240218f4:	3abbcb4f 3abc263e 3abc8159 3abcdca0     O..:>&.:Y..:...:
24021904:	3abd3813 3abd93b2 3abdef7e 3abe4b77     .8.:...:~..:wK.:
24021914:	3abea79b 3abf03ed 3abf606b 3abfbd16     ...:...:k`.:...:
24021924:	3ac019ee 3ac076f3 3ac0d425 3ac13183     ...:.v.:%..:.1.:
24021934:	3ac18f10 3ac1ecc9 3ac24ab0 3ac2a8c4     ...:...:.J.:...:
24021944:	3ac30706 3ac36576 3ac3c413 3ac422de     ...:ve.:...:.".:
24021954:	3ac481d7 3ac4e0fe 3ac54053 3ac59fd6     ...:...:S@.:...:
24021964:	3ac5ff88 3ac65f67 3ac6bf75 3ac71fb2     ...:g_.:u..:...:
24021974:	3ac7801d 3ac7e0b7 3ac84180 3ac8a278     ...:...:.A.:x..:
24021984:	3ac9039e 3ac964f4 3ac9c679 3aca282d     ...:.d.:y..:-(.:
24021994:	3aca8a10 3acaec23 3acb4e65 3acbb0d7     ...:#..:eN.:...:
240219a4:	3acc1378 3acc7649 3accd94a 3acd3c7b     x..:Iv.:J..:{<.:
240219b4:	3acd9fdc 3ace036d 3ace672f 3acecb20     ...:m..:/g.: ..:
240219c4:	3acf2f42 3acf9395 3acff818 3ad05ccc     B/.:...:...:.\.:
240219d4:	3ad0c1b0 3ad126c6 3ad18c0c 3ad1f183     ...:.&.:...:...:
240219e4:	3ad2572c 3ad2bd06 3ad32311 3ad3894d     ,W.:...:.#.:M..:
240219f4:	3ad3efbb 3ad4565b 3ad4bd2c 3ad5242f     ...:[V.:,..:/$.:
24021a04:	3ad58b64 3ad5f2cb 3ad65a64 3ad6c22f     d..:...:dZ.:/..:
24021a14:	3ad72a2c 3ad7925c 3ad7fabe 3ad86353     ,*.:\..:...:Sc.:
24021a24:	3ad8cc1a 3ad93514 3ad99e41 3ada07a1     ...:.5.:A..:...:
24021a34:	3ada7134 3adadafa 3adb44f3 3adbaf20     4q.:...:.D.: ..:
24021a44:	3adc1980 3adc8413 3adceeda 3add59d5     ...:...:...:.Y.:
24021a54:	3addc504 3ade3066 3ade9bfd 3adf07c7     ...:f0.:...:...:
24021a64:	3adf73c6 3adfdff9 3ae04c60 3ae0b8fc     .s.:...:`L.:...:
24021a74:	3ae125cd 3ae192d2 3ae2000c 3ae26d7b     .%.:...:...:{m.:
24021a84:	3ae2db1f 3ae348f8 3ae3b706 3ae4254a     ...:.H.:...:J%.:
24021a94:	3ae493c2 3ae50271 3ae57155 3ae5e06e     ...:q..:Uq.:n..:
24021aa4:	3ae64fbe 3ae6bf43 3ae72efe 3ae79ef0     .O.:C..:...:...:
24021ab4:	3ae80f17 3ae87f75 3ae8f00a 3ae960d5     ...:u..:...:.`.:
24021ac4:	3ae9d1d6 3aea430e 3aeab47d 3aeb2623     ...:.C.:}..:#&.:
24021ad4:	3aeb9800 3aec0a14 3aec7c60 3aeceee2     ...:...:`|.:...:
24021ae4:	3aed619d 3aedd48e 3aee47b8 3aeebb19     .a.:...:.G.:...:
24021af4:	3aef2eb2 3aefa283 3af0168c 3af08acd     ...:...:...:...:
24021b04:	3af0ff47 3af173f9 3af1e8e3 3af25e06     G..:.s.:...:.^.:
24021b14:	3af2d362 3af348f6 3af3bec4 3af434ca     b..:.H.:...:.4.:
24021b24:	3af4ab0a 3af52183 3af59836 3af60f21     ...:.!.:6..:!..:
24021b34:	3af68647 3af6fda6 3af7753f 3af7ed12     G..:...:?u.:...:
24021b44:	3af8651e 3af8dd65 3af955e7 3af9cea2     .e.:e..:.U.:...:
24021b54:	3afa4798 3afac0c9 3afb3a34 3afbb3da     .G.:...:4:.:...:
24021b64:	3afc2dbb 3afca7d7 3afd222e 3afd9cc0     .-.:...:.".:...:
24021b74:	3afe178e 3afe9297 3aff0ddc 3aff895d     ...:...:...:]..:
24021b84:	3b00028c 3b004088 3b007ea3 3b00bcdb     ...;.@.;.~.;...;
24021b94:	3b00fb31 3b0139a5 3b017838 3b01b6e9     1..;.9.;8x.;...;
24021ba4:	3b01f5b9 3b0234a6 3b0273b3 3b02b2dd     ...;.4.;.s.;...;
24021bb4:	3b02f227 3b03318f 3b037115 3b03b0bb     '..;.1.;.q.;...;
24021bc4:	3b03f07f 3b043062 3b047065 3b04b086     ...;b0.;ep.;...;
24021bd4:	3b04f0c6 3b053125 3b0571a4 3b05b241     ...;%1.;.q.;A..;
24021be4:	3b05f2fe 3b0633da 3b0674d6 3b06b5f1     ...;.3.;.t.;...;
24021bf4:	3b06f72c 3b073886 3b077a00 3b07bb9a     ,..;.8.;.z.;...;
24021c04:	3b07fd53 3b083f2d 3b088126 3b08c33f     S..;-?.;&..;?..;
24021c14:	3b090578 3b0947d1 3b098a4a 3b09cce4     x..;.G.;J..;...;
24021c24:	3b0a0f9d 3b0a5277 3b0a9572 3b0ad88d     ...;wR.;r..;...;
24021c34:	3b0b1bc8 3b0b5f24 3b0ba2a0 3b0be63d     ...;$_.;...;=..;
24021c44:	3b0c29fb 3b0c6dda 3b0cb1d9 3b0cf5fa     .).;.m.;...;...;
24021c54:	3b0d3a3b 3b0d7e9e 3b0dc322 3b0e07c6     ;:.;.~.;"..;...;
24021c64:	3b0e4c8c 3b0e9174 3b0ed67d 3b0f1ba7     .L.;t..;}..;...;
24021c74:	3b0f60f2 3b0fa65f 3b0febee 3b10319f     .`.;_..;...;.1.;
24021c84:	3b107771 3b10bd65 3b11037b 3b1149b3     qw.;e..;{..;.I.;
24021c94:	3b11900d 3b11d689 3b121d27 3b1263e7     ...;...;'..;.c.;
24021ca4:	3b12aac9 3b12f1ce 3b1338f5 3b13803f     ...;...;.8.;?..;
24021cb4:	3b13c7ab 3b140f3a 3b1456ec 3b149ec0     ...;:..;.V.;...;
24021cc4:	3b14e6b7 3b152ed0 3b15770d 3b15bf6d     ...;...;.w.;m..;
24021cd4:	3b1607ef 3b165095 3b16995e 3b16e24a     ...;.P.;^..;J..;
24021ce4:	3b172b5a 3b17748d 3b17bde3 3b18075d     Z+.;.t.;...;]..;
24021cf4:	3b1850fb 3b189abc 3b18e4a1 3b192ea9     .P.;...;...;...;
24021d04:	3b1978d6 3b19c326 3b1a0d9a 3b1a5833     .x.;&..;...;3X.;
24021d14:	3b1aa2ef 3b1aedd0 3b1b38d5 3b1b83fe     ...;...;.8.;...;
24021d24:	3b1bcf4c 3b1c1abe 3b1c6655 3b1cb210     L..;...;Uf.;...;
24021d34:	3b1cfdf0 3b1d49f5 3b1d961e 3b1de26d     ...;.I.;...;m..;
24021d44:	3b1e2ee0 3b1e7b78 3b1ec836 3b1f1518     ...;x{.;6..;...;
24021d54:	3b1f6220 3b1faf4d 3b1ffca0 3b204a18      b.;M..;...;.J ;
24021d64:	3b2097b5 3b20e578 3b213361 3b21816f     .. ;x. ;a3!;o.!;
24021d74:	3b21cfa4 3b221dfe 3b226c7e 3b22bb24     ..!;..";~l";$.";
24021d84:	3b2309f0 3b2358e2 3b23a7fb 3b23f739     ..#;.X#;..#;9.#;
24021d94:	3b24469f 3b24962a 3b24e5dc 3b2535b5     .F$;*.$;..$;.5%;
24021da4:	3b2585b4 3b25d5db 3b262628 3b26769b     ..%;..%;(&&;.v&;
24021db4:	3b26c736 3b2717f8 3b2768e1 3b27b9f1     6.&;..';.h';..';
24021dc4:	3b280b28 3b285c87 3b28ae0d 3b28ffbb     (.(;.\(;..(;..(;
24021dd4:	3b295190 3b29a38c 3b29f5b1 3b2a47fd     .Q);..);..);.G*;
24021de4:	3b2a9a71 3b2aed0d 3b2b3fd1 3b2b92bd     q.*;..*;.?+;..+;
24021df4:	3b2be5d1 3b2c390e 3b2c8c72 3b2ce000     ..+;.9,;r.,;..,;
24021e04:	3b2d33b5 3b2d8793 3b2ddb9a 3b2e2fc9     .3-;..-;..-;./.;
24021e14:	3b2e8422 3b2ed8a3 3b2f2d4c 3b2f821f     "..;...;L-/;../;
24021e24:	3b2fd71b 3b302c41 3b30818f 3b30d707     ../;A,0;..0;..0;
24021e34:	3b312ca8 3b318272 3b31d866 3b322e84     .,1;r.1;f.1;..2;
24021e44:	3b3284cb 3b32db3d 3b3331d8 3b33889d     ..2;=.2;.13;..3;
24021e54:	3b33df8c 3b3436a5 3b348de8 3b34e556     ..3;.64;..4;V.4;
24021e64:	3b353ced 3b3594b0 3b35ec9c 3b3644b4     .<5;..5;..5;.D6;
24021e74:	3b369cf6 3b36f562 3b374dfa 3b37a6bc     ..6;b.6;.M7;..7;
24021e84:	3b37ffaa 3b3858c2 3b38b206 3b390b75     ..7;.X8;..8;u.9;
24021e94:	3b39650f 3b39bed5 3b3a18c6 3b3a72e2     .e9;..9;..:;.r:;
24021ea4:	3b3acd2a 3b3b279e 3b3b823e 3b3bdd0a     *.:;.';;>.;;..;;
24021eb4:	3b3c3801 3b3c9325 3b3cee74 3b3d49f0     .8<;%.<;t.<;.I=;
24021ec4:	3b3da599 3b3e016d 3b3e5d6e 3b3eb99c     ..=;m.>;n]>;..>;
24021ed4:	3b3f15f6 3b3f727d 3b3fcf31 3b402c12     ..?;}r?;1.?;.,@;
24021ee4:	3b408920 3b40e65a 3b4143c2 3b41a157      .@;Z.@;.CA;W.A;
24021ef4:	3b41ff1a 3b425d0a 3b42bb27 3b431972     ..A;.]B;'.B;r.C;
24021f04:	3b4377ea 3b43d691 3b443565 3b449467     .wC;..C;e5D;g.D;
24021f14:	3b44f397 3b4552f5 3b45b281 3b46123c     ..D;.RE;..E;<.F;
24021f24:	3b467225 3b46d23c 3b473282 3b4792f7     %rF;<.F;.2G;..G;
24021f34:	3b47f39a 3b48546c 3b48b56d 3b49169d     ..G;lTH;m.H;..I;
24021f44:	3b4977fc 3b49d98a 3b4a3b47 3b4a9d34     .wI;..I;G;J;4.J;
24021f54:	3b4aff50 3b4b619b 3b4bc416 3b4c26c1     P.J;.aK;..K;.&L;
24021f64:	3b4c899c 3b4ceca6 3b4d4fe1 3b4db34b     ..L;..L;.OM;K.M;
24021f74:	3b4e16e6 3b4e7ab1 3b4edeac 3b4f42d8     ..N;.zN;..N;.BO;
24021f84:	3b4fa734 3b500bc1 3b50707e 3b50d56c     4.O;..P;~pP;l.P;
24021f94:	3b513a8b 3b519fdb 3b52055c 3b526b0f     .:Q;..Q;\.R;.kR;
24021fa4:	3b52d0f2 3b533707 3b539d4d 3b5403c5     ..R;.7S;M.S;..T;
24021fb4:	3b546a6e 3b54d14a 3b553857 3b559f95     njT;J.T;W8U;..U;
24021fc4:	3b560706 3b566ea9 3b56d67e 3b573e85     ..V;.nV;~.V;.>W;
24021fd4:	3b57a6bf 3b580f2b 3b5877ca 3b58e09c     ..W;+.X;.wX;..X;
24021fe4:	3b5949a0 3b59b2d7 3b5a1c41 3b5a85de     .IY;..Y;A.Z;..Z;
24021ff4:	3b5aefae 3b5b59b1 3b5bc3e8 3b5c2e52     ..Z;.Y[;..[;R.\;
24022004:	3b5c98f0 3b5d03c1 3b5d6ec6 3b5dd9ff     ..\;..];.n];..];
24022014:	3b5e456c 3b5eb10d 3b5f1ce2 3b5f88eb     lE^;..^;.._;.._;
24022024:	3b5ff528 3b60619a 3b60ce41 3b613b1c     (._;.a`;A.`;.;a;
24022034:	3b61a82b 3b621570 3b6282e9 3b62f098     +.a;p.b;..b;..b;
24022044:	3b635e7b 3b63cc94 3b643ae2 3b64a966     {^c;..c;.:d;f.d;
24022054:	3b65181f 3b65870d 3b65f631 3b66658c     ..e;..e;1.e;.ef;
24022064:	3b66d51c 3b6744e2 3b67b4de 3b682510     ..f;.Dg;..g;.%h;
24022074:	3b689579 3b690618 3b6976ee 3b69e7fa     y.h;..i;.vi;..i;
24022084:	3b6a593e 3b6acab8 3b6b3c68 3b6bae50     >Yj;..j;h<k;P.k;
24022094:	3b6c2070 3b6c92c6 3b6d0554 3b6d7819     p l;..l;T.m;.xm;
240220a4:	3b6deb16 3b6e5e4a 3b6ed1b6 3b6f455a     ..m;J^n;..n;ZEo;
240220b4:	3b6fb937 3b702d4b 3b70a197 3b71161c     7.o;K-p;..p;..q;
240220c4:	3b718ad9 3b71ffcf 3b7274fd 3b72ea64     ..q;..q;.tr;d.r;
240220d4:	3b736004 3b73d5dd 3b744bef 3b74c23a     .`s;..s;.Kt;:.t;
240220e4:	3b7538bf 3b75af7d 3b762674 3b769da5     .8u;}.u;t&v;..v;
240220f4:	3b77150f 3b778cb4 3b780492 3b787cab     ..w;..w;..x;.|x;
24022104:	3b78f4fd 3b796d8a 3b79e651 3b7a5f53     ..x;.my;Q.y;S_z;
24022114:	3b7ad88f 3b7b5206 3b7bcbb8 3b7c45a5     ..z;.R{;..{;.E|;
24022124:	3b7cbfcd 3b7d3a30 3b7db4ce 3b7e2fa8     ..|;0:};..};./~;
24022134:	3b7eaabd 3b7f260d 3b7fa19a 3b800eb1     ..~;.&.;...;...;
24022144:	3b804cb3 3b808ad3 3b80c911 3b81076e     .L.;...;...;n..;
24022154:	3b8145e8 3b818481 3b81c338 3b82020d     .E.;...;8..;...;
24022164:	3b824101 3b828014 3b82bf45 3b82fe94     .A.;...;E..;...;
24022174:	3b833e02 3b837d8f 3b83bd3b 3b83fd05     .>.;.}.;;..;...;
24022184:	3b843cef 3b847cf7 3b84bd1e 3b84fd65     .<.;.|.;...;e..;
24022194:	3b853dca 3b857e4f 3b85bef3 3b85ffb6     .=.;O~.;...;...;
240221a4:	3b864099 3b86819b 3b86c2bc 3b8703fd     .@.;...;...;...;
240221b4:	3b87455e 3b8786de 3b87c87e 3b880a3e     ^E.;...;~..;>..;
240221c4:	3b884c1e 3b888e1d 3b88d03d 3b89127c     .L.;...;=..;|..;
240221d4:	3b8954dc 3b89975c 3b89d9fb 3b8a1cbc     .T.;\..;...;...;
240221e4:	3b8a5f9c 3b8aa29d 3b8ae5be 3b8b2900     ._.;...;...;.).;
240221f4:	3b8b6c63 3b8bafe6 3b8bf389 3b8c374e     cl.;...;...;N7.;
24022204:	3b8c7b33 3b8cbf39 3b8d0361 3b8d47a9     3{.;9..;a..;.G.;
24022214:	3b8d8c12 3b8dd09c 3b8e1548 3b8e5a14     ...;...;H..;.Z.;
24022224:	3b8e9f02 3b8ee412 3b8f2943 3b8f6e95     ...;...;C).;.n.;
24022234:	3b8fb409 3b8ff99f 3b903f56 3b90852f     ...;...;V?.;/..;
24022244:	3b90cb2a 3b911147 3b915785 3b919de6     *..;G..;.W.;...;
24022254:	3b91e469 3b922b0e 3b9271d5 3b92b8bf     i..;.+.;.q.;...;
24022264:	3b92ffca 3b9346f8 3b938e49 3b93d5bc     ...;.F.;I..;...;
24022274:	3b941d52 3b94650b 3b94ace6 3b94f4e4     R..;.e.;...;...;
24022284:	3b953d04 3b958548 3b95cdaf 3b961639     .=.;H..;...;9..;
24022294:	3b965ee6 3b96a7b6 3b96f0a9 3b9739c0     .^.;...;...;.9.;
240222a4:	3b9782fa 3b97cc58 3b9815d9 3b985f7d     ...;X..;...;}_.;
240222b4:	3b98a946 3b98f332 3b993d42 3b998775     F..;2..;B=.;u..;
240222c4:	3b99d1cd 3b9a1c49 3b9a66e8 3b9ab1ac     ...;I..;.f.;...;
240222d4:	3b9afc94 3b9b47a1 3b9b92d1 3b9bde26     ...;.G.;...;&..;
240222e4:	3b9c29a0 3b9c753e 3b9cc101 3b9d0ce8     .).;>u.;...;...;
240222f4:	3b9d58f4 3b9da525 3b9df17b 3b9e3df6     .X.;%..;{..;.=.;
24022304:	3b9e8a96 3b9ed75b 3b9f2445 3b9f7155     ...;[..;E$.;Uq.;
24022314:	3b9fbe89 3ba00be3 3ba05963 3ba0a708     ...;...;cY.;...;
24022324:	3ba0f4d3 3ba142c3 3ba190d9 3ba1df15     ...;.B.;...;...;
24022334:	3ba22d77 3ba27bff 3ba2caad 3ba31980     w-.;.{.;...;...;
24022344:	3ba3687b 3ba3b79b 3ba406e1 3ba4564e     {h.;...;...;NV.;
24022354:	3ba4a5e2 3ba4f59c 3ba5457d 3ba59584     ...;...;}E.;...;
24022364:	3ba5e5b2 3ba63607 3ba68683 3ba6d725     ...;.6.;...;%..;
24022374:	3ba727ef 3ba778e0 3ba7c9f8 3ba81b37     .'.;.x.;...;7..;
24022384:	3ba86c9e 3ba8be2c 3ba90fe2 3ba961bf     .l.;,..;...;.a.;
24022394:	3ba9b3c4 3baa05f1 3baa5845 3baaaac1     ...;...;EX.;...;
240223a4:	3baafd65 3bab5031 3baba326 3babf642     e..;1P.;&..;B..;
240223b4:	3bac4987 3bac9cf4 3bacf089 3bad4447     .I.;...;...;GD.;
240223c4:	3bad982e 3badec3d 3bae4074 3bae94d5     ...;=..;t@.;...;
240223d4:	3baee95e 3baf3e11 3baf92ec 3bafe7f1     ^..;.>.;...;...;
240223e4:	3bb03d1e 3bb09275 3bb0e7f5 3bb13d9f     .=.;u..;...;.=.;
240223f4:	3bb19372 3bb1e96f 3bb23f95 3bb295e5     r..;o..;.?.;...;
24022404:	3bb2ec5f 3bb34302 3bb399d0 3bb3f0c8     _..;.C.;...;...;
24022414:	3bb447e9 3bb49f35 3bb4f6ac 3bb54e4c     .G.;5..;...;LN.;
24022424:	3bb5a617 3bb5fe0d 3bb6562d 3bb6ae78     ...;...;-V.;x..;
24022434:	3bb706ed 3bb75f8e 3bb7b859 3bb8114f     ...;._.;Y..;O..;
24022444:	3bb86a71 3bb8c3bd 3bb91d35 3bb976d8     qj.;...;5..;.v.;
24022454:	3bb9d0a7 3bba2aa1 3bba84c6 3bbadf17     ...;.*.;...;...;
24022464:	3bbb3994 3bbb943d 3bbbef12 3bbc4a13     .9.;=..;...;.J.;
24022474:	3bbca53f 3bbd0098 3bbd5c1d 3bbdb7cf     ?..;...;.\.;...;
24022484:	3bbe13ad 3bbe6fb7 3bbecbee 3bbf2851     ...;.o.;...;Q(.;
24022494:	3bbf84e2 3bbfe19f 3bc03e89 3bc09ba0     ...;...;.>.;...;
240224a4:	3bc0f8e4 3bc15655 3bc1b3f4 3bc211c0     ...;UV.;...;...;
240224b4:	3bc26fb9 3bc2cde0 3bc32c34 3bc38ab6     .o.;...;4,.;...;
240224c4:	3bc3e966 3bc44844 3bc4a74f 3bc50689     f..;DH.;O..;...;
240224d4:	3bc565f1 3bc5c587 3bc6254b 3bc6853d     .e.;...;K%.;=..;
240224e4:	3bc6e55f 3bc745ae 3bc7a62c 3bc806d9     _..;.E.;,..;...;
240224f4:	3bc867b5 3bc8c8c0 3bc929fa 3bc98b62     .g.;...;.).;b..;
24022504:	3bc9ecfa 3bca4ec2 3bcab0b8 3bcb12de     ...;.N.;...;...;
24022514:	3bcb7534 3bcbd7b9 3bcc3a6e 3bcc9d52     4u.;...;n:.;R..;
24022524:	3bcd0067 3bcd63ac 3bcdc720 3bce2ac5     g..;.c.; ..;.*.;
24022534:	3bce8e9a 3bcef29f 3bcf56d5 3bcfbb3b     ...;...;.V.;;..;
24022544:	3bd01fd2 3bd0849a 3bd0e992 3bd14ebc     ...;...;...;.N.;
24022554:	3bd1b416 3bd219a2 3bd27f5e 3bd2e54c     ...;...;^..;L..;
24022564:	3bd34b6b 3bd3b1bc 3bd4183e 3bd47ef2     kK.;...;>..;.~.;
24022574:	3bd4e5d8 3bd54cef 3bd5b438 3bd61bb4     ...;.L.;8..;...;
24022584:	3bd68361 3bd6eb41 3bd75353 3bd7bb97     a..;A..;SS.;...;
24022594:	3bd8240e 3bd88cb8 3bd8f594 3bd95ea3     .$.;...;...;.^.;
240225a4:	3bd9c7e5 3bda3159 3bda9b01 3bdb04dc     ...;Y1.;...;...;
240225b4:	3bdb6eea 3bdbd92c 3bdc43a1 3bdcae4a     .n.;,..;.C.;J..;
240225c4:	3bdd1926 3bdd8436 3bddef7a 3bde5af2     &..;6..;z..;.Z.;
240225d4:	3bdec69e 3bdf327e 3bdf9e92 3be00adb     ...;~2.;...;...;
240225e4:	3be07758 3be0e409 3be150ef 3be1be0a     Xw.;...;.P.;...;
240225f4:	3be22b5a 3be298df 3be30698 3be37487     Z+.;...;...;.t.;
24022604:	3be3e2ab 3be45105 3be4bf94 3be52e58     ...;.Q.;...;X..;
24022614:	3be59d52 3be60c82 3be67be8 3be6eb83     R..;...;.{.;...;
24022624:	3be75b55 3be7cb5d 3be83b9b 3be8ac0f     U[.;]..;.;.;...;
24022634:	3be91cba 3be98d9c 3be9feb4 3bea7002     ...;...;...;.p.;
24022644:	3beae188 3beb5345 3bebc539 3bec3764     ...;ES.;9..;d7.;
24022654:	3beca9c6 3bed1c60 3bed8f31 3bee0239     ...;`..;1..;9..;
24022664:	3bee757a 3beee8f2 3bef5ca2 3befd08b     zu.;...;.\.;...;
24022674:	3bf044ab 3bf0b903 3bf12d94 3bf1a25e     .D.;...;.-.;^..;
24022684:	3bf21760 3bf28c9a 3bf3020e 3bf377ba     `..;...;...;.w.;
24022694:	3bf3ed9f 3bf463bd 3bf4da15 3bf550a6     ...;.c.;...;.P.;
240226a4:	3bf5c770 3bf63e74 3bf6b5b1 3bf72d28     p..;t>.;...;(-.;
240226b4:	3bf7a4d9 3bf81cc4 3bf894e9 3bf90d48     ...;...;...;H..;
240226c4:	3bf985e2 3bf9feb6 3bfa77c4 3bfaf10d     ...;...;.w.;...;
240226d4:	3bfb6a91 3bfbe450 3bfc5e49 3bfcd87e     .j.;P..;I^.;~..;
240226e4:	3bfd52ee 3bfdcd99 3bfe487f 3bfec3a2     .R.;...;.H.;...;
240226f4:	3bff3eff 3bffba99 3c001b37 3c005940     .>.;...;7..<@Y.<
24022704:	3c009766 3c00d5ab 3c01140e 3c01528f     f..<...<...<.R.<
24022714:	3c01912e 3c01cfec 3c020ec8 3c024dc3     ...<...<...<.M.<
24022724:	3c028cdc 3c02cc14 3c030b6a 3c034adf     ...<...<j..<.J.<
24022734:	3c038a72 3c03ca25 3c0409f6 3c0449e6     r..<%..<...<.I.<
24022744:	3c0489f5 3c04ca23 3c050a71 3c054add     ...<#..<q..<.J.<
24022754:	3c058b69 3c05cc14 3c060cde 3c064dc7     i..<...<...<.M.<
24022764:	3c068ed0 3c06cff9 3c071141 3c0752a8     ...<...<A..<.R.<
24022774:	3c079430 3c07d5d7 3c08179d 3c085984     0..<...<...<.Y.<
24022784:	3c089b8b 3c08ddb1 3c091ff8 3c09625f     ...<...<...<_b.<
24022794:	3c09a4e6 3c09e78d 3c0a2a54 3c0a6d3c     ...<...<T*.<<m.<
240227a4:	3c0ab044 3c0af36c 3c0b36b5 3c0b7a1f     D..<l..<.6.<.z.<
240227b4:	3c0bbda9 3c0c0154 3c0c4520 3c0c890d     ...<T..< E.<...<
240227c4:	3c0ccd1a 3c0d1149 3c0d5598 3c0d9a09     ...<I..<.U.<...<
240227d4:	3c0dde9b 3c0e234e 3c0e6822 3c0ead17     ...<N#.<"h.<...<
240227e4:	3c0ef22e 3c0f3767 3c0f7cc1 3c0fc23c     ...<g7.<.|.<<..<
240227f4:	3c1007d9 3c104d98 3c109379 3c10d97b     ...<.M.<y..<{..<
24022804:	3c111fa0 3c1165e6 3c11ac4f 3c11f2d9     ...<.e.<O..<...<
24022814:	3c123986 3c128055 3c12c746 3c130e59     .9.<U..<F..<Y..<
24022824:	3c13558f 3c139ce8 3c13e463 3c142c00     .U.<...<c..<.,.<
24022834:	3c1473c1 3c14bba4 3c1503aa 3c154bd2     .s.<...<...<.K.<
24022844:	3c15941e 3c15dc8d 3c16251f 3c166dd3     ...<...<.%.<.m.<
24022854:	3c16b6ac 3c16ffa7 3c1748c6 3c179208     ...<...<.H.<...<
24022864:	3c17db6e 3c1824f7 3c186ea4 3c18b874     n..<.$.<.n.<t..<
24022874:	3c190268 3c194c80 3c1996bc 3c19e11c     h..<.L.<...<...<
24022884:	3c1a2ba0 3c1a7648 3c1ac114 3c1b0c05     .+.<Hv.<...<...<
24022894:	3c1b5719 3c1ba252 3c1bedb0 3c1c3932     .W.<R..<...<29.<
240228a4:	3c1c84d8 3c1cd0a4 3c1d1c93 3c1d68a8     ...<...<...<.h.<
240228b4:	3c1db4e2 3c1e0140 3c1e4dc3 3c1e9a6c     ...<@..<.M.<l..<
240228c4:	3c1ee739 3c1f342c 3c1f8144 3c1fce82     9..<,4.<D..<...<
240228d4:	3c201be4 3c20696d 3c20b71b 3c2104ee     .. <mi <.. <..!<
240228e4:	3c2152e7 3c21a106 3c21ef4b 3c223db5     .R!<..!<K.!<.="<
240228f4:	3c228c46 3c22dafd 3c2329d9 3c2378dc     F."<.."<.)#<.x#<
24022904:	3c23c806 3c241755 3c2466cb 3c24b668     ..#<U.$<.f$<h.$<
24022914:	3c25062b 3c255615 3c25a625 3c25f65c     +.%<.V%<%.%<\.%<
24022924:	3c2646ba 3c26973f 3c26e7eb 3c2738be     .F&<?.&<..&<.8'<
24022934:	3c2789b8 3c27dad9 3c282c22 3c287d92     ..'<..'<",(<.}(<
24022944:	3c28cf29 3c2920e8 3c2972cf 3c29c4dd     ).(<. )<.r)<..)<
24022954:	3c2a1713 3c2a6971 3c2abbf7 3c2b0ea4     ..*<qi*<..*<..+<
24022964:	3c2b617a 3c2bb478 3c2c079e 3c2c5aec     za+<x.+<..,<.Z,<
24022974:	3c2cae63 3c2d0202 3c2d55c9 3c2da9b9     c.,<..-<.U-<..-<
24022984:	3c2dfdd2 3c2e5214 3c2ea67e 3c2efb11     ..-<.R.<~..<...<
24022994:	3c2f4fcd 3c2fa4b3 3c2ff9c1 3c304ef8     .O/<../<../<.N0<
240229a4:	3c30a459 3c30f9e3 3c314f97 3c31a574     Y.0<..0<.O1<t.1<
240229b4:	3c31fb7b 3c3251ab 3c32a805 3c32fe89     {.1<.Q2<..2<..2<
240229c4:	3c335537 3c33ac0e 3c340310 3c345a3c     7U3<..3<..4<<Z4<
240229d4:	3c34b192 3c350913 3c3560be 3c35b893     ..4<..5<.`5<..5<
240229e4:	3c361093 3c3668bd 3c36c113 3c371993     ..6<.h6<..6<..7<
240229f4:	3c37723e 3c37cb13 3c382414 3c387d40     >r7<..7<.$8<@}8<
24022a04:	3c38d697 3c39301a 3c3989c7 3c39e3a0     ..8<.09<..9<..9<
24022a14:	3c3a3da5 3c3a97d5 3c3af231 3c3b4cb9     .=:<..:<1.:<.L;<
24022a24:	3c3ba76d 3c3c024c 3c3c5d58 3c3cb88f     m.;<L.<<X]<<..<<
24022a34:	3c3d13f3 3c3d6f83 3c3dcb40 3c3e2729     ..=<.o=<@.=<)'><
24022a44:	3c3e833e 3c3edf80 3c3f3bef 3c3f988a     >.><..><.;?<..?<
24022a54:	3c3ff552 3c405247 3c40af6a 3c410cb9     R.?<GR@<j.@<..A<
24022a64:	3c416a36 3c41c7df 3c4225b7 3c4283bb     6jA<..A<.%B<..B<
24022a74:	3c42e1ed 3c43404d 3c439edb 3c43fd96     ..B<M@C<..C<..C<
24022a84:	3c445c7f 3c44bb96 3c451adc 3c457a4f     .\D<..D<..E<OzE<
24022a94:	3c45d9f1 3c4639c0 3c4699bf 3c46f9ec     ..E<.9F<..F<..F<
24022aa4:	3c475a47 3c47bad1 3c481b8a 3c487c72     GZG<..G<..H<r|H<
24022ab4:	3c48dd88 3c493ece 3c49a043 3c4a01e7     ..H<.>I<C.I<..J<
24022ac4:	3c4a63ba 3c4ac5bd 3c4b27ef 3c4b8a50     .cJ<..J<.'K<P.K<
24022ad4:	3c4bece2 3c4c4fa3 3c4cb294 3c4d15b4     ..K<.OL<..L<..M<
24022ae4:	3c4d7905 3c4ddc86 3c4e4037 3c4ea419     .yM<..M<7@N<..N<
24022af4:	3c4f082b 3c4f6c6d 3c4fd0e0 3c503583     +.O<mlO<..O<.5P<
24022b04:	3c509a58 3c50ff5d 3c516493 3c51c9fa     X.P<].P<.dQ<..Q<
24022b14:	3c522f92 3c52955b 3c52fb56 3c536182     ./R<[.R<V.R<.aS<
24022b24:	3c53c7e0 3c542e6f 3c54952f 3c54fc22     ..S<o.T</.T<".T<
24022b34:	3c556347 3c55ca9d 3c563225 3c5699e0     GcU<..U<%2V<..V<
24022b44:	3c5701cd 3c5769ec 3c57d23e 3c583ac2     ..W<.iW<>.W<.:X<
24022b54:	3c58a379 3c590c62 3c59757f 3c59dece     y.X<b.Y<.uY<..Y<
24022b64:	3c5a4850 3c5ab206 3c5b1bee 3c5b860a     PHZ<..Z<..[<..[<
24022b74:	3c5bf059 3c5c5adc 3c5cc592 3c5d307c     Y.[<.Z\<..\<|0]<
24022b84:	3c5d9b9a 3c5e06ec 3c5e7272 3c5ede2b     ..]<..^<rr^<+.^<
24022b94:	3c5f4a19 3c5fb63c 3c602292 3c608f1d     .J_<<._<."`<..`<
24022ba4:	3c60fbdd 3c6168d2 3c61d5fb 3c624359     ..`<.ha<..a<YCb<
24022bb4:	3c62b0ec 3c631eb4 3c638cb1 3c63fae4     ..b<..c<..c<..c<
24022bc4:	3c64694c 3c64d7e9 3c6546bc 3c65b5c5     Lid<..d<.Fe<..e<
24022bd4:	3c662503 3c669477 3c670422 3c677402     .%f<w.f<".g<.tg<
24022be4:	3c67e419 3c685466 3c68c4e9 3c6935a3     ..g<fTh<..h<.5i<
24022bf4:	3c69a693 3c6a17ba 3c6a8918 3c6afaad     ..i<..j<..j<..j<
24022c04:	3c6b6c79 3c6bde7c 3c6c50b6 3c6cc328     ylk<|.k<.Pl<(.l<
24022c14:	3c6d35d1 3c6da8b1 3c6e1bca 3c6e8f1a     .5m<..m<..n<..n<
24022c24:	3c6f02a1 3c6f7661 3c6fea59 3c705e89     ..o<avo<Y.o<.^p<
24022c34:	3c70d2f1 3c714792 3c71bc6b 3c72317d     ..p<.Gq<k.q<}1r<
24022c44:	3c72a6c8 3c731c4b 3c739207 3c7407fd     ..r<K.s<..s<..t<
24022c54:	3c747e2b 3c74f493 3c756b34 3c75e20e     +~t<..t<4ku<..u<
24022c64:	3c765922 3c76d070 3c7747f8 3c77bfb9     "Yv<p.v<.Gw<..w<
24022c74:	3c7837b5 3c78afea 3c79285a 3c79a104     .7x<..x<Z(y<..y<
24022c84:	3c7a19e9 3c7a9308 3c7b0c62 3c7b85f7     ..z<..z<b.{<..{<
24022c94:	3c7bffc6 3c7c79d1 3c7cf417 3c7d6e98     ..{<.y|<..|<.n}<
24022ca4:	3c7de954 3c7e644c 3c7edf7f 3c7f5aee     T.}<Ld~<..~<.Z.<
24022cb4:	3c7fd699 3c802940 3c806751 3c80a581     ...<@).<Qg.<...<
24022cc4:	3c80e3ce 3c81223a 3c8160c4 3c819f6c     ...<:".<.`.<l..<
24022cd4:	3c81de33 3c821d18 3c825c1b 3c829b3e     3..<...<.\.<>..<
24022ce4:	3c82da7e 3c8319dd 3c83595b 3c8398f8     ~..<...<[Y.<...<
24022cf4:	3c83d8b4 3c84188e 3c845888 3c8498a0     ...<...<.X.<...<
24022d04:	3c84d8d7 3c85192e 3c8559a4 3c859a39     ...<...<.Y.<9..<
24022d14:	3c85daed 3c861bc0 3c865cb3 3c869dc6     ...<...<.\.<...<
24022d24:	3c86def8 3c872049 3c8761ba 3c87a34b     ...<I .<.a.<K..<
24022d34:	3c87e4fc 3c8826cc 3c8868bd 3c88aacd     ...<.&.<.h.<...<
24022d44:	3c88ecfe 3c892f4e 3c8971be 3c89b44f     ...<N/.<.q.<O..<
24022d54:	3c89f700 3c8a39d1 3c8a7cc3 3c8abfd5     ...<.9.<.|.<...<
24022d64:	3c8b0308 3c8b465b 3c8b89cf 3c8bcd63     ...<[F.<...<c..<
24022d74:	3c8c1118 3c8c54ee 3c8c98e5 3c8cdcfd     ...<.T.<...<...<
24022d84:	3c8d2136 3c8d658f 3c8daa0a 3c8deea7     6!.<.e.<...<...<
24022d94:	3c8e3364 3c8e7843 3c8ebd43 3c8f0264     d3.<Cx.<C..<d..<
24022da4:	3c8f47a7 3c8f8d0c 3c8fd292 3c901839     .G.<...<...<9..<
24022db4:	3c905e03 3c90a3ee 3c90e9fc 3c91302b     .^.<...<...<+0.<
24022dc4:	3c91767c 3c91bcef 3c920385 3c924a3c     |v.<...<...<<J.<
24022dd4:	3c929116 3c92d813 3c931f31 3c936672     ...<...<1..<rf.<
24022de4:	3c93add6 3c93f55c 3c943d05 3c9484d0     ...<\..<.=.<...<
24022df4:	3c94ccbf 3c9514d0 3c955d04 3c95a55b     ...<...<.].<[..<
24022e04:	3c95edd5 3c963673 3c967f33 3c96c817     ...<s6.<3..<...<
24022e14:	3c97111e 3c975a48 3c97a396 3c97ed07     ...<HZ.<...<...<
24022e24:	3c98369c 3c988055 3c98ca31 3c991431     .6.<U..<1..<1..<
24022e34:	3c995e55 3c99a89d 3c99f309 3c9a3d99     U^.<...<...<.=.<
24022e44:	3c9a884d 3c9ad326 3c9b1e22 3c9b6943     M..<&..<"..<Ci.<
24022e54:	3c9bb488 3c9bfff2 3c9c4b81 3c9c9734     ...<...<.K.<4..<
24022e64:	3c9ce30b 3c9d2f08 3c9d7b29 3c9dc76f     ...<./.<){.<o..<
24022e74:	3c9e13da 3c9e606a 3c9ead1f 3c9ef9f9     ...<j`.<...<...<
24022e84:	3c9f46f9 3c9f941e 3c9fe168 3ca02ed8     .F.<...<h..<...<
24022e94:	3ca07c6d 3ca0ca28 3ca11809 3ca1660f     m|.<(..<...<.f.<
24022ea4:	3ca1b43b 3ca2028d 3ca25105 3ca29fa3     ;..<...<.Q.<...<
24022eb4:	3ca2ee67 3ca33d51 3ca38c61 3ca3db98     g..<Q=.<a..<...<
24022ec4:	3ca42af5 3ca47a79 3ca4ca23 3ca519f4     .*.<yz.<#..<...<
24022ed4:	3ca569eb 3ca5ba09 3ca60a4e 3ca65aba     .i.<...<N..<.Z.<
24022ee4:	3ca6ab4d 3ca6fc07 3ca74ce8 3ca79df0     M..<...<.L.<...<
24022ef4:	3ca7ef20 3ca84077 3ca891f5 3ca8e39b      ..<w@.<...<...<
24022f04:	3ca93568 3ca9875d 3ca9d97a 3caa2bbe     h5.<]..<z..<.+.<
24022f14:	3caa7e2b 3caad0bf 3cab237b 3cab7660     +~.<...<{#.<`v.<
24022f24:	3cabc96c 3cac1ca1 3cac6ffe 3cacc384     l..<...<.o.<...<
24022f34:	3cad1732 3cad6b08 3cadbf08 3cae1330     2..<.k.<...<0..<
24022f44:	3cae6780 3caebbfa 3caf109d 3caf6568     .g.<...<...<he.<
24022f54:	3cafba5d 3cb00f7b 3cb064c2 3cb0ba32     ]..<{..<.d.<2..<
24022f64:	3cb10fcc 3cb1658f 3cb1bb7c 3cb21193     ...<.e.<|..<...<
24022f74:	3cb267d3 3cb2be3d 3cb314d1 3cb36b8f     .g.<=..<...<.k.<
24022f84:	3cb3c277 3cb41989 3cb470c5 3cb4c82c     w..<...<.p.<,..<
24022f94:	3cb51fbc 3cb57778 3cb5cf5e 3cb6276e     ...<xw.<^..<n'.<
24022fa4:	3cb67fa9 3cb6d80f 3cb730a0 3cb7895c     ...<...<.0.<\..<
24022fb4:	3cb7e242 3cb83b54 3cb89491 3cb8edf9     B..<T;.<...<...<
24022fc4:	3cb9478d 3cb9a14c 3cb9fb37 3cba554d     .G.<L..<7..<MU.<
24022fd4:	3cbaaf8e 3cbb09fc 3cbb6495 3cbbbf5a     ...<...<.d.<Z..<
24022fe4:	3cbc1a4c 3cbc7569 3cbcd0b2 3cbd2c28     L..<iu.<...<(,.<
24022ff4:	3cbd87ca 3cbde399 3cbe3f94 3cbe9bbb     ...<...<.?.<...<
24023004:	3cbef80f 3cbf5490 3cbfb13e 3cc00e19     ...<.T.<>..<...<
24023014:	3cc06b21 3cc0c856 3cc125b8 3cc18347     !k.<V..<.%.<G..<
24023024:	3cc1e104 3cc23eee 3cc29d06 3cc2fb4b     ...<.>.<...<K..<
24023034:	3cc359be 3cc3b85e 3cc4172d 3cc4762a     .Y.<^..<-..<*v.<
24023044:	3cc4d554 3cc534ad 3cc59434 3cc5f3e9     T..<.4.<4..<...<
24023054:	3cc653cd 3cc6b3df 3cc71420 3cc7748f     .S.<...< ..<.t.<
24023064:	3cc7d52d 3cc835fa 3cc896f6 3cc8f821     -..<.5.<...<!..<
24023074:	3cc9597b 3cc9bb05 3cca1cbd 3cca7ea5     {Y.<...<...<.~.<
24023084:	3ccae0bc 3ccb4303 3ccba57a 3ccc0820     ...<.C.<z..< ..<
24023094:	3ccc6af6 3ccccdfc 3ccd3132 3ccd9499     .j.<...<21.<...<
240230a4:	3ccdf82f 3cce5bf6 3ccebfed 3ccf2414     /..<.[.<...<.$.<
240230b4:	3ccf886c 3ccfecf5 3cd051ae 3cd0b699     l..<...<.Q.<...<
240230c4:	3cd11bb4 3cd18100 3cd1e67d 3cd24c2c     ...<...<}..<,L.<
240230d4:	3cd2b20c 3cd3181d 3cd37e60 3cd3e4d4     ...<...<`~.<...<
240230e4:	3cd44b7a 3cd4b252 3cd5195b 3cd58097     zK.<R..<[..<...<
240230f4:	3cd5e804 3cd64fa4 3cd6b776 3cd71f7b     ...<.O.<v..<{..<
24023104:	3cd787b1 3cd7f01b 3cd858b7 3cd8c185     ...<...<.X.<...<
24023114:	3cd92a87 3cd993bb 3cd9fd23 3cda66bd     .*.<...<#..<.f.<
24023124:	3cdad08b 3cdb3a8c 3cdba4c1 3cdc0f29     ...<.:.<...<)..<
24023134:	3cdc79c4 3cdce493 3cdd4f96 3cddbacd     .y.<...<.O.<...<
24023144:	3cde2638 3cde91d7 3cdefdab 3cdf69b2     8&.<...<...<.i.<
24023154:	3cdfd5ee 3ce0425e 3ce0af03 3ce11bdd     ...<^B.<...<...<
24023164:	3ce188eb 3ce1f62f 3ce263a7 3ce2d154     ...</..<.c.<T..<
24023174:	3ce33f37 3ce3ad4f 3ce41b9c 3ce48a1f     7?.<O..<...<...<
24023184:	3ce4f8d7 3ce567c5 3ce5d6e9 3ce64643     ...<.g.<...<CF.<
24023194:	3ce6b5d3 3ce72599 3ce79595 3ce805c7     ...<.%.<...<...<
240231a4:	3ce87630 3ce8e6cf 3ce957a5 3ce9c8b2     0v.<...<.W.<...<
240231b4:	3cea39f5 3ceaab70 3ceb1d21 3ceb8f0a     .9.<p..<!..<...<
240231c4:	3cec012a 3cec7381 3cece60f 3ced58d6     *..<.s.<...<.X.<
240231d4:	3cedcbd4 3cee3f09 3ceeb277 3cef261c     ...<.?.<w..<.&.<
240231e4:	3cef99fa 3cf00e10 3cf0825e 3cf0f6e4     ...<...<^..<...<
240231f4:	3cf16ba4 3cf1e09b 3cf255cc 3cf2cb35     .k.<...<.U.<5..<
24023204:	3cf340d7 3cf3b6b3 3cf42cc7 3cf4a315     .@.<...<.,.<...<
24023214:	3cf5199c 3cf5905c 3cf60757 3cf67e8b     ...<\..<W..<.~.<
24023224:	3cf6f5f8 3cf76da0 3cf7e582 3cf85d9e     ...<.m.<...<.].<
24023234:	3cf8d5f4 3cf94e85 3cf9c750 3cfa4055     ...<.N.<P..<U@.<
24023244:	3cfab996 3cfb3311 3cfbacc7 3cfc26b8     ...<.3.<...<.&.<
24023254:	3cfca0e4 3cfd1b4c 3cfd95ef 3cfe10cd     ...<L..<...<...<
24023264:	3cfe8be7 3cff073d 3cff82cf 3cfffe9c     ...<=..<...<...<
24023274:	3d003d53 3d007b76 3d00b9b7 3d00f816     S=.=v{.=...=...=
24023284:	3d013694 3d017530 3d01b3ea 3d01f2c2     .6.=0u.=...=...=
24023294:	3d0231ba 3d0270cf 3d02b004 3d02ef57     .1.=.p.=...=W..=
240232a4:	3d032ec8 3d036e59 3d03ae08 3d03edd6     ...=Yn.=...=...=
240232b4:	3d042dc3 3d046dd0 3d04adfb 3d04ee45     .-.=.m.=...=E..=
240232c4:	3d052eaf 3d056f38 3d05afe0 3d05f0a8     ...=8o.=...=...=
240232d4:	3d06318f 3d067295 3d06b3bb 3d06f501     .1.=.r.=...=...=
240232e4:	3d073666 3d0777eb 3d07b990 3d07fb55     f6.=.w.=...=U..=
240232f4:	3d083d39 3d087f3e 3d08c163 3d0903a7     9=.=>..=c..=...=
24023304:	3d09460c 3d098891 3d09cb37 3d0a0dfd     .F.=...=7..=...=
24023314:	3d0a50e3 3d0a93e9 3d0ad711 3d0b1a58     .P.=...=...=X..=
24023324:	3d0b5dc1 3d0ba14a 3d0be4f4 3d0c28be     .].=J..=...=.(.=
24023334:	3d0c6caa 3d0cb0b7 3d0cf4e4 3d0d3933     .l.=...=...=39.=
24023344:	3d0d7da3 3d0dc234 3d0e06e6 3d0e4bba     .}.=4..=...=.K.=
24023354:	3d0e90af 3d0ed5c6 3d0f1afe 3d0f6058     ...=...=...=X`.=
24023364:	3d0fa5d3 3d0feb70 3d10312f 3d107710     ...=p..=/1.=.w.=
24023374:	3d10bd13 3d110337 3d11497e 3d118fe7     ...=7..=~I.=...=
24023384:	3d11d672 3d121d1f 3d1263ef 3d12aae1     r..=...=.c.=...=
24023394:	3d12f1f5 3d13392c 3d138085 3d13c802     ...=,9.=...=...=
240233a4:	3d140fa0 3d145762 3d149f46 3d14e74e     ...=bW.=F..=N..=
240233b4:	3d152f78 3d1577c5 3d15c036 3d1608c9     x/.=.w.=6..=...=
240233c4:	3d165180 3d169a5a 3d16e358 3d172c79     .Q.=Z..=X..=y,.=
240233d4:	3d1775bd 3d17bf25 3d1808b1 3d185260     .u.=%..=...=`R.=
240233e4:	3d189c34 3d18e62b 3d193046 3d197a84     4..=+..=F0.=.z.=
240233f4:	3d19c4e7 3d1a0f6e 3d1a5a1a 3d1aa4e9     ...=n..=.Z.=...=
24023404:	3d1aefdd 3d1b3af5 3d1b8632 3d1bd193     ...=.:.=2..=...=
24023414:	3d1c1d19 3d1c68c4 3d1cb493 3d1d0087     ...=.h.=...=...=
24023424:	3d1d4ca0 3d1d98de 3d1de541 3d1e31c9     .L.=...=A..=.1.=
24023434:	3d1e7e76 3d1ecb49 3d1f1841 3d1f655e     v~.=I..=A..=^e.=
24023444:	3d1fb2a0 3d200009 3d204d96 3d209b4a     ...=.. =.M =J. =
24023454:	3d20e923 3d213722 3d218547 3d21d392     #. ="7!=G.!=..!=
24023464:	3d222202 3d227099 3d22bf56 3d230e3a     .""=.p"=V."=:.#=
24023474:	3d235d43 3d23ac74 3d23fbca 3d244b47     C]#=t.#=..#=GK$=
24023484:	3d249aeb 3d24eab5 3d253aa6 3d258abe     ..$=..$=.:%=..%=
24023494:	3d25dafd 3d262b63 3d267bf0 3d26cca4     ..%=c+&=.{&=..&=
240234a4:	3d271d7f 3d276e82 3d27bfac 3d2810fd     ..'=.n'=..'=..(=
240234b4:	3d286276 3d28b416 3d2905de 3d2957ce     vb(=..(=..)=.W)=
240234c4:	3d29a9e6 3d29fc25 3d2a4e8d 3d2aa11c     ..)=%.)=.N*=..*=
240234d4:	3d2af3d4 3d2b46b4 3d2b99bc 3d2becec     ..*=.F+=..+=..+=
240234e4:	3d2c4045 3d2c93c7 3d2ce771 3d2d3b43     E@,=..,=q.,=C;-=
240234f4:	3d2d8f3f 3d2de363 3d2e37b0 3d2e8c26     ?.-=c.-=.7.=&..=
24023504:	3d2ee0c5 3d2f358d 3d2f8a7e 3d2fdf99     ...=.5/=~./=../=
24023514:	3d3034dd 3d308a4b 3d30dfe1 3d3135a2     .40=K.0=..0=.51=
24023524:	3d318b8c 3d31e1a0 3d3237de 3d328e46     ..1=..1=.72=F.2=
24023534:	3d32e4d8 3d333b94 3d33927a 3d33e98a     ..2=.;3=z.3=..3=
24023544:	3d3440c4 3d349829 3d34efb9 3d354773     .@4=).4=..4=sG5=
24023554:	3d359f58 3d35f767 3d364fa1 3d36a806     X.5=g.5=.O6=..6=
24023564:	3d370096 3d375951 3d37b238 3d380b49     ..7=QY7=8.7=I.8=
24023574:	3d386486 3d38bdee 3d391782 3d397141     .d8=..8=..9=Aq9=
24023584:	3d39cb2c 3d3a2542 3d3a7f84 3d3ad9f3     ,.9=B%:=..:=..:=
24023594:	3d3b348d 3d3b8f53 3d3bea46 3d3c4564     .4;=S.;=F.;=dE<=
240235a4:	3d3ca0af 3d3cfc26 3d3d57ca 3d3db39a     ..<=&.<=.W==..==
240235b4:	3d3e0f97 3d3e6bc1 3d3ec818 3d3f249b     ..>=.k>=..>=.$?=
240235c4:	3d3f814c 3d3fde29 3d403b34 3d40986c     L.?=).?=4;@=l.@=
240235d4:	3d40f5d1 3d415364 3d41b124 3d420f12     ..@=dSA=$.A=..B=
240235e4:	3d426d2d 3d42cb77 3d4329ee 3d438893     -mB=w.B=.)C=..C=
240235f4:	3d43e766 3d444667 3d44a597 3d4504f4     f.C=gFD=..D=..E=
24023604:	3d456481 3d45c43b 3d462424 3d46843c     .dE=;.E=$$F=<.F=
24023614:	3d46e483 3d4744f8 3d47a59d 3d480670     ..F=.DG=..G=p.H=
24023624:	3d486773 3d48c8a4 3d492a05 3d498b96     sgH=..H=.*I=..I=
24023634:	3d49ed56 3d4a4f45 3d4ab164 3d4b13b3     V.I=EOJ=d.J=..K=
24023644:	3d4b7632 3d4bd8e0 3d4c3bbf 3d4c9ecd     2vK=..K=.;L=..L=
24023654:	3d4d020c 3d4d657b 3d4dc91b 3d4e2ceb     ..M={eM=..M=.,N=
24023664:	3d4e90ec 3d4ef51d 3d4f597f 3d4fbe12     ..N=..N=.YO=..O=
24023674:	3d5022d6 3d5087cb 3d50ecf1 3d515248     ."P=..P=..P=HRQ=
24023684:	3d51b7d1 3d521d8b 3d528377 3d52e994     ..Q=..R=w.R=..R=
24023694:	3d534fe3 3d53b663 3d541d16 3d5483fb     .OS=c.S=..T=..T=
240236a4:	3d54eb11 3d55525a 3d55b9d5 3d562183     ..T=ZRU=..U=.!V=
240236b4:	3d568963 3d56f175 3d5759bb 3d57c233     c.V=u.V=.YW=3.W=
240236c4:	3d582ade 3d5893bb 3d58fccc 3d596610     .*X=..X=..X=.fY=
240236d4:	3d59cf88 3d5a3932 3d5aa311 3d5b0d22     ..Y=29Z=..Z=".[=
240236e4:	3d5b7768 3d5be1e1 3d5c4c8e 3d5cb76f     hw[=..[=.L\=o.\=
240236f4:	3d5d2284 3d5d8dcd 3d5df94a 3d5e64fc     ."]=..]=J.]=.d^=
24023704:	3d5ed0e2 3d5f3cfd 3d5fa94c 3d6015d0     ..^=.<_=L._=..`=
24023714:	3d608289 3d60ef77 3d615c9a 3d61c9f3     ..`=w.`=.\a=..a=
24023724:	3d623780 3d62a543 3d63133b 3d638169     .7b=C.b=;.c=i.c=
24023734:	3d63efcd 3d645e66 3d64cd35 3d653c3a     ..c=f^d=5.d=:<e=
24023744:	3d65ab76 3d661ae7 3d668a8f 3d66fa6d     v.e=..f=..f=m.f=
24023754:	3d676a82 3d67dacd 3d684b50 3d68bc09     .jg=..g=PKh=..h=
24023764:	3d692cf8 3d699e1f 3d6a0f7d 3d6a8113     .,i=..i=}.j=..j=
24023774:	3d6af2df 3d6b64e3 3d6bd71f 3d6c4992     ..j=.dk=..k=.Il=
24023784:	3d6cbc3e 3d6d2f21 3d6da23c 3d6e158f     >.l=!/m=<.m=..n=
24023794:	3d6e891a 3d6efcde 3d6f70da 3d6fe50f     ..n=..n=.po=..o=
240237a4:	3d70597c 3d70ce22 3d714301 3d71b819     |Yp=".p=.Cq=..q=
240237b4:	3d722d6a 3d72a2f5 3d7318b8 3d738eb5     j-r=..r=..s=..s=
240237c4:	3d7404ec 3d747b5c 3d74f206 3d7568ea     ..t=\{t=..t=.hu=
240237d4:	3d75e008 3d76575f 3d76cef2 3d7746be     ..u=_Wv=..v=.Fw=
240237e4:	3d77bec5 3d783706 3d78af82 3d792839     ..w=.7x=..x=9(y=
240237f4:	3d79a12b 3d7a1a58 3d7a93bf 3d7b0d62     +.y=X.z=..z=b.{=
24023804:	3d7b8741 3d7c015b 3d7c7bb0 3d7cf641     A.{=[.|=.{|=A.|=
24023814:	3d7d710e 3d7dec17 3d7e675c 3d7ee2dd     .q}=..}=\g~=..~=
24023824:	3d7f5e9a 3d7fda94 3d802b65 3d80699e     .^.=...=e+.=.i.=
24023834:	3d80a7f6 3d80e66c 3d812501 3d8163b4     ...=l..=.%.=.c.=
24023844:	3d81a286 3d81e176 3d822086 3d825fb4     ...=v..=. .=._.=
24023854:	3d829f00 3d82de6c 3d831df7 3d835da0     ...=l..=...=.].=
24023864:	3d839d69 3d83dd51 3d841d58 3d845d7f     i..=Q..=X..=.].=
24023874:	3d849dc4 3d84de29 3d851eae 3d855f52     ...=)..=...=R_.=
24023884:	3d85a015 3d85e0f9 3d8621fc 3d86631e     ...=...=.!.=.c.=
24023894:	3d86a461 3d86e5c3 3d872745 3d8768e8     a..=...=E'.=.h.=
240238a4:	3d87aaaa 3d87ec8c 3d882e8f 3d8870b2     ...=...=...=.p.=
240238b4:	3d88b2f5 3d88f559 3d8937dd 3d897a81     ...=Y..=.7.=.z.=
240238c4:	3d89bd46 3d8a002c 3d8a4332 3d8a8659     F..=,..=2C.=Y..=
240238d4:	3d8ac9a1 3d8b0d0a 3d8b5094 3d8b943f     ...=...=.P.=?..=
240238e4:	3d8bd80a 3d8c1bf7 3d8c6005 3d8ca435     ...=...=.`.=5..=
240238f4:	3d8ce886 3d8d2cf8 3d8d718b 3d8db640     ...=.,.=.q.=@..=
24023904:	3d8dfb17 3d8e400f 3d8e852a 3d8eca65     ...=.@.=*..=e..=
24023914:	3d8f0fc3 3d8f5543 3d8f9ae4 3d8fe0a8     ...=CU.=...=...=
24023924:	3d90268e 3d906c96 3d90b2c0 3d90f90c     .&.=.l.=...=...=
24023934:	3d913f7b 3d91860d 3d91ccc0 3d921397     {?.=...=...=...=
24023944:	3d925a90 3d92a1ac 3d92e8ea 3d93304c     .Z.=...=...=L0.=
24023954:	3d9377d0 3d93bf77 3d940742 3d944f2f     .w.=w..=B..=/O.=
24023964:	3d949740 3d94df74 3d9527cb 3d957046     @..=t..=.'.=Fp.=
24023974:	3d95b8e4 3d9601a6 3d964a8b 3d969394     ...=...=.J.=...=
24023984:	3d96dcc1 3d972612 3d976f86 3d97b91f     ...=.&.=.o.=...=
24023994:	3d9802db 3d984cbc 3d9896c0 3d98e0e9     ...=.L.=...=...=
240239a4:	3d992b36 3d9975a8 3d99c03e 3d9a0af9     6+.=.u.=>..=...=
240239b4:	3d9a55d8 3d9aa0dc 3d9aec04 3d9b3752     .U.=...=...=R7.=
240239c4:	3d9b82c4 3d9bce5b 3d9c1a18 3d9c65f9     ...=[..=...=.e.=
240239d4:	3d9cb200 3d9cfe2b 3d9d4a7c 3d9d96f3     ...=+..=|J.=...=
240239e4:	3d9de38f 3d9e3050 3d9e7d38 3d9eca44     ...=P0.=8}.=D..=
240239f4:	3d9f1777 3d9f64cf 3d9fb24d 3d9ffff2     w..=.d.=M..=...=
24023a04:	3da04dbc 3da09bac 3da0e9c3 3da13800     .M.=...=...=.8.=
24023a14:	3da18663 3da1d4ed 3da2239d 3da27274     c..=...=.#.=tr.=
24023a24:	3da2c171 3da31096 3da35fe1 3da3af52     q..=...=._.=R..=
24023a34:	3da3feeb 3da44eab 3da49e92 3da4eea0     ...=.N.=...=...=
24023a44:	3da53ed6 3da58f32 3da5dfb7 3da63062     .>.=2..=...=b0.=
24023a54:	3da68136 3da6d230 3da72353 3da7749e     6..=0..=S#.=.t.=
24023a64:	3da7c610 3da817aa 3da8696d 3da8bb57     ...=...=mi.=W..=
24023a74:	3da90d6a 3da95fa5 3da9b208 3daa0494     j..=._.=...=...=
24023a84:	3daa5748 3daaaa25 3daafd2a 3dab5059     HW.=%..=*..=YP.=
24023a94:	3daba3b0 3dabf730 3dac4ad9 3dac9eab     ...=0..=.J.=...=
24023aa4:	3dacf2a7 3dad46cb 3dad9b19 3dadef90     ...=.F.=...=...=
24023ab4:	3dae4431 3dae98fc 3daeedf0 3daf430d     1D.=...=...=.C.=
24023ac4:	3daf9855 3dafedc6 3db04362 3db09927     U..=...=bC.='..=
24023ad4:	3db0ef17 3db14531 3db19b75 3db1f1e4     ...=1E.=u..=...=
24023ae4:	3db2487d 3db29f41 3db2f62f 3db34d48     }H.=A..=/..=HM.=
24023af4:	3db3a48c 3db3fbfb 3db45394 3db4ab59     ...=...=.S.=Y..=
24023b04:	3db50349 3db55b65 3db5b3ab 3db60c1d     I..=e[.=...=...=
24023b14:	3db664bb 3db6bd84 3db71678 3db76f99     .d.=...=x..=.o.=
24023b24:	3db7c8e5 3db8225e 3db87c02 3db8d5d2     ...=^".=.|.=...=
24023b34:	3db92fcf 3db989f8 3db9e44d 3dba3ecf     ./.=...=M..=.>.=
24023b44:	3dba997d 3dbaf458 3dbb4f60 3dbbaa94     }..=X..=`O.=...=
24023b54:	3dbc05f6 3dbc6184 3dbcbd40 3dbd1928     ...=.a.=@..=(..=
24023b64:	3dbd753e 3dbdd181 3dbe2df2 3dbe8a90     >u.=...=.-.=...=
24023b74:	3dbee75c 3dbf4456 3dbfa17d 3dbffed2     \..=VD.=}..=...=
24023b84:	3dc05c55 3dc0ba07 3dc117e6 3dc175f4     U\.=...=...=.u.=
24023b94:	3dc1d430 3dc2329a 3dc29134 3dc2effb     0..=.2.=4..=...=
24023ba4:	3dc34ef2 3dc3ae17 3dc40d6b 3dc46cee     .N.=...=k..=.l.=
24023bb4:	3dc4cca1 3dc52c82 3dc58c93 3dc5ecd3     ...=.,.=...=...=
24023bc4:	3dc64d42 3dc6ade2 3dc70eb0 3dc76faf     BM.=...=...=.o.=
24023bd4:	3dc7d0dd 3dc8323c 3dc893ca 3dc8f589     ...=<2.=...=...=
24023be4:	3dc95778 3dc9b997 3dca1be6 3dca7e66     xW.=...=...=f~.=
24023bf4:	3dcae117 3dcb43f9 3dcba70b 3dcc0a4e     ...=.C.=...=N..=
24023c04:	3dcc6dc2 3dccd168 3dcd353e 3dcd9946     .m.=h..=>5.=F..=
24023c14:	3dcdfd7f 3dce61ea 3dcec687 3dcf2b55     ...=.a.=...=U+.=
24023c24:	3dcf9055 3dcff586 3dd05aea 3dd0c080     U..=...=.Z.=...=
24023c34:	3dd12648 3dd18c43 3dd1f270 3dd258cf     H&.=C..=p..=.X.=
24023c44:	3dd2bf61 3dd32626 3dd38d1d 3dd3f448     a..=&&.=...=H..=
24023c54:	3dd45ba5 3dd4c336 3dd52af9 3dd592f1     .[.=6..=.*.=...=
24023c64:	3dd5fb1b 3dd66379 3dd6cc0b 3dd734d0     ...=yc.=...=.4.=
24023c74:	3dd79dca 3dd806f7 3dd87058 3dd8d9ee     ...=...=Xp.=...=
24023c84:	3dd943b8 3dd9adb6 3dda17e9 3dda8250     .C.=...=...=P..=
24023c94:	3ddaecec 3ddb57bc 3ddbc2c2 3ddc2dfd     ...=.W.=...=.-.=
24023ca4:	3ddc996d 3ddd0511 3ddd70ec 3ddddcfc     m..=...=.p.=...=
24023cb4:	3dde4941 3ddeb5bc 3ddf226d 3ddf8f53     AI.=...=m".=S..=
24023cc4:	3ddffc70 3de069c2 3de0d74b 3de1450b     p..=.i.=K..=.E.=
24023cd4:	3de1b300 3de2212c 3de28f8f 3de2fe29     ...=,!.=...=)..=
24023ce4:	3de36cf9 3de3dc01 3de44b3f 3de4bab5     .l.=...=?K.=...=
24023cf4:	3de52a62 3de59a46 3de60a62 3de67ab6     b*.=F..=b..=.z.=
24023d04:	3de6eb41 3de75c04 3de7cd00 3de83e33     A..=.\.=...=3>.=
24023d14:	3de8af9f 3de92142 3de9931f 3dea0534     ...=B!.=...=4..=
24023d24:	3dea7781 3deaea08 3deb5cc7 3debcfbf     .w.=...=.\.=...=
24023d34:	3dec42f1 3decb65c 3ded2a00 3ded9ddd     .B.=\..=.*.=...=
24023d44:	3dee11f4 3dee8645 3deefad0 3def6f95     ...=E..=...=.o.=
24023d54:	3defe494 3df059cd 3df0cf40 3df144ee     ...=.Y.=@..=.D.=
24023d64:	3df1bad6 3df230f9 3df2a757 3df31df0     ...=.0.=W..=...=
24023d74:	3df394c3 3df40bd2 3df4831d 3df4faa2     ...=...=...=...=
24023d84:	3df57263 3df5ea60 3df66299 3df6db0d     cr.=`..=.b.=...=
24023d94:	3df753bd 3df7ccaa 3df845d3 3df8bf38     .S.=...=.E.=8..=
24023da4:	3df938da 3df9b2b8 3dfa2cd3 3dfaa72b     .8.=...=.,.=+..=
24023db4:	3dfb21c0 3dfb9c93 3dfc17a2 3dfc92ef     .!.=...=...=...=
24023dc4:	3dfd0e79 3dfd8a41 3dfe0647 3dfe828a     y..=A..=G..=...=
24023dd4:	3dfeff0c 3dff7bcc 3dfff8ca 3e003b03     ...=.{.=...=.;.>
24023de4:	3e0079c1 3e00b89e 3e00f79a 3e0136b6     .y.>...>...>.6.>
24023df4:	3e0175f1 3e01b54c 3e01f4c6 3e023460     .u.>L..>...>`4.>
24023e04:	3e02741a 3e02b3f4 3e02f3ee 3e033408     .t.>...>...>.4.>
24023e14:	3e037441 3e03b49b 3e03f515 3e0435b0     At.>...>...>.5.>
24023e24:	3e04766a 3e04b745 3e04f841 3e05395d     jv.>E..>A..>]9.>
24023e34:	3e057a9a 3e05bbf7 3e05fd75 3e063f14     .z.>...>u..>.?.>
24023e44:	3e0680d3 3e06c2b4 3e0704b6 3e0746d8     ...>...>...>.F.>
24023e54:	3e07891c 3e07cb81 3e080e07 3e0850af     ...>...>...>.P.>
24023e64:	3e089378 3e08d663 3e09196f 3e095c9c     x..>c..>o..>.\.>
24023e74:	3e099fec 3e09e35d 3e0a26f0 3e0a6aa5     ...>]..>.&.>.j.>
24023e84:	3e0aae7c 3e0af275 3e0b3690 3e0b7acd     |..>u..>.6.>.z.>
24023e94:	3e0bbf2c 3e0c03ae 3e0c4852 3e0c8d19     ,..>...>RH.>...>
24023ea4:	3e0cd202 3e0d170e 3e0d5c3d 3e0da18e     ...>...>=\.>...>
24023eb4:	3e0de702 3e0e2c9a 3e0e7254 3e0eb831     ...>.,.>Tr.>1..>
24023ec4:	3e0efe31 3e0f4455 3e0f8a9b 3e0fd106     1..>UD.>...>...>
24023ed4:	3e101793 3e105e44 3e10a519 3e10ec11     ...>D^.>...>...>
24023ee4:	3e11332d 3e117a6d 3e11c1d1 3e120959     -3.>mz.>...>Y..>
24023ef4:	3e125104 3e1298d4 3e12e0c8 3e1328e1     .Q.>...>...>.(.>
24023f04:	3e13711d 3e13b97f 3e140204 3e144aae     .q.>...>...>.J.>
24023f14:	3e14937d 3e14dc71 3e152589 3e156ec6     }..>q..>.%.>.n.>
24023f24:	3e15b828 3e1601b0 3e164b5c 3e16952e     (..>...>\K.>...>
24023f34:	3e16df25 3e172941 3e177382 3e17bdea     %..>A).>.s.>...>
24023f44:	3e180876 3e185329 3e189e01 3e18e8ff     v..>)S.>...>...>
24023f54:	3e193423 3e197f6d 3e19cadd 3e1a1673     #4.>m..>...>s..>
24023f64:	3e1a6230 3e1aae13 3e1afa1c 3e1b464c     0b.>...>...>LF.>
24023f74:	3e1b92a2 3e1bdf1f 3e1c2bc3 3e1c788d     ...>...>.+.>.x.>
24023f84:	3e1cc57e 3e1d1297 3e1d5fd6 3e1dad3d     ~..>...>._.>=..>
24023f94:	3e1dfacb 3e1e4880 3e1e965d 3e1ee461     ...>.H.>]..>a..>
24023fa4:	3e1f328d 3e1f80e0 3e1fcf5b 3e201dfe     .2.>...>[..>.. >
24023fb4:	3e206cc9 3e20bbbc 3e210ad7 3e215a1a     .l >.. >..!>.Z!>
24023fc4:	3e21a986 3e21f919 3e2248d6 3e2298bb     ..!>..!>.H">..">
24023fd4:	3e22e8c8 3e2338fe 3e23895d 3e23d9e5     ..">.8#>].#>..#>
24023fe4:	3e242a96 3e247b70 3e24cc73 3e251d9f     .*$>p{$>s.$>..%>
24023ff4:	3e256ef5 3e25c074 3e26121c 3e2663ee     .n%>t.%>..&>.c&>
24024004:	3e26b5ea 3e270810 3e275a5f 3e27acd9     ..&>..'>_Z'>..'>
24024014:	3e27ff7c 3e28524a 3e28a542 3e28f864     |.'>JR(>B.(>d.(>
24024024:	3e294bb1 3e299f28 3e29f2ca 3e2a4696     .K)>(.)>..)>.F*>
24024034:	3e2a9a8e 3e2aeeb0 3e2b42fd 3e2b9776     ..*>..*>.B+>v.+>
24024044:	3e2bec19 3e2c40e8 3e2c95e2 3e2ceb08     ..+>.@,>..,>..,>
24024054:	3e2d4059 3e2d95d6 3e2deb7e 3e2e4153     Y@->..->~.->SA.>
24024064:	3e2e9753 3e2eed7f 3e2f43d8 3e2f9a5d     S..>...>.C/>]./>
24024074:	3e2ff10e 3e3047ec 3e309ef6 3e30f62c     ../>.G0>..0>,.0>
24024084:	3e314d90 3e31a520 3e31fcdd 3e3254c8     .M1> .1>..1>.T2>
24024094:	3e32acdf 3e330524 3e335d96 3e33b635     ..2>$.3>.]3>5.3>
240240a4:	3e340f02 3e3467fc 3e34c125 3e351a7b     ..4>.g4>%.4>{.5>
240240b4:	3e3573ff 3e35cdb1 3e362791 3e3681a0     .s5>..5>.'6>..6>
240240c4:	3e36dbdd 3e373648 3e3790e2 3e37ebaa     ..6>H67>..7>..7>
240240d4:	3e3846a1 3e38a1c8 3e38fd1d 3e3958a1     .F8>..8>..8>.X9>
240240e4:	3e39b454 3e3a1037 3e3a6c49 3e3ac88b     T.9>7.:>Il:>..:>
240240f4:	3e3b24fc 3e3b819d 3e3bde6e 3e3c3b6f     .$;>..;>n.;>o;<>
24024104:	3e3c989f 3e3cf600 3e3d5391 3e3db153     ..<>..<>.S=>S.=>
24024114:	3e3e0f45 3e3e6d68 3e3ecbbb 3e3f2a3f     E.>>hm>>..>>?*?>
24024124:	3e3f88f4 3e3fe7da 3e4046f2 3e40a63a     ..?>..?>.F@>:.@>
24024134:	3e4105b4 3e41655f 3e41c53c 3e42254b     ..A>_eA><.A>K%B>
24024144:	3e42858b 3e42e5fe 3e4346a2 3e43a779     ..B>..B>.FC>y.C>
24024154:	3e440882 3e4469bd 3e44cb2b 3e452ccb     ..D>.iD>+.D>.,E>
24024164:	3e458e9e 3e45f0a4 3e4652dd 3e46b54a     ..E>..E>.RF>J.F>
24024174:	3e4717e9 3e477abb 3e47ddc1 3e4840fb     ..G>.zG>..G>.@H>
24024184:	3e48a468 3e490809 3e496bde 3e49cfe8     h.H>..I>.kI>..I>
24024194:	3e4a3425 3e4a9896 3e4afd3c 3e4b6216     %4J>..J><.J>.bK>
240241a4:	3e4bc726 3e4c2c69 3e4c91e2 3e4cf790     &.K>i,L>..L>..L>
240241b4:	3e4d5d73 3e4dc38b 3e4e29d8 3e4e905b     s]M>..M>.)N>[.N>
240241c4:	3e4ef714 3e4f5e02 3e4fc526 3e502c80     ..N>.^O>&.O>.,P>
240241d4:	3e509411 3e50fbd7 3e5163d4 3e51cc08     ..P>..P>.cQ>..Q>
240241e4:	3e523472 3e529d13 3e5305eb 3e536efa     r4R>..R>..S>.nS>
240241f4:	3e53d840 3e5441bd 3e54ab72 3e55155e     @.S>.AT>r.T>^.U>
24024204:	3e557f82 3e55e9de 3e565471 3e56bf3d     ..U>..U>qTV>=.V>
24024214:	3e572a41 3e57957d 3e5800f2 3e586c9f     A*W>}.W>..X>.lX>
24024224:	3e58d885 3e5944a4 3e59b0fc 3e5a1d8d     ..X>.DY>..Y>..Z>
24024234:	3e5a8a57 3e5af75b 3e5b6498 3e5bd20f     W.Z>[.Z>.d[>..[>
24024244:	3e5c3fc0 3e5cadab 3e5d1bd0 3e5d8a2f     .?\>..\>..]>/.]>
24024254:	3e5df8c8 3e5e679c 3e5ed6ab 3e5f45f4     ..]>.g^>..^>.E_>
24024264:	3e5fb579 3e602538 3e609533 3e610569     y._>8%`>3.`>i.a>
24024274:	3e6175da 3e61e688 3e625771 3e62c895     .ua>..a>qWb>..b>
24024284:	3e6339f6 3e63ab94 3e641d6d 3e648f83     .9c>..c>m.d>..d>
24024294:	3e6501d6 3e657466 3e65e732 3e665a3c     ..e>fte>2.e><Zf>
240242a4:	3e66cd83 3e674107 3e67b4c9 3e6828c8     ..f>.Ag>..g>.(h>
240242b4:	3e689d06 3e691181 3e69863b 3e69fb33     ..h>..i>;.i>3.i>
240242c4:	3e6a7069 3e6ae5de 3e6b5b92 3e6bd184     ipj>..j>.[k>..k>
240242d4:	3e6c47b6 3e6cbe27 3e6d34d7 3e6dabc7     .Gl>'.l>.4m>..m>
240242e4:	3e6e22f7 3e6e9a66 3e6f1215 3e6f8a05     ."n>f.n>..o>..o>
240242f4:	3e700235 3e707aa5 3e70f356 3e716c48     5.p>.zp>V.p>Hlq>
24024304:	3e71e57b 3e725eef 3e72d8a4 3e73529b     {.q>.^r>..r>.Rs>
24024314:	3e73ccd3 3e74474d 3e74c209 3e753d07     ..s>MGt>..t>.=u>
24024324:	3e75b847 3e7633ca 3e76af8f 3e772b98     G.u>.3v>..v>.+w>
24024334:	3e77a7e3 3e782471 3e78a142 3e791e57     ..w>q$x>B.x>W.y>
24024344:	3e799bb0 3e7a194c 3e7a972c 3e7b1550     ..y>L.z>,.z>P.{>
24024354:	3e7b93b9 3e7c1266 3e7c9158 3e7d108e     ..{>f.|>X.|>..}>
24024364:	3e7d900a 3e7e0fcb 3e7e8fd0 3e7f101c     ..}>..~>..~>...>
24024374:	3e7f90ad 3e8008c2 3e804951 3e808a02     ...>...>QI.>...>
24024384:	3e80cad7 3e810bcf 3e814ceb 3e818e2a     ...>...>.L.>*..>
24024394:	3e81cf8c 3e821113 3e8252bd 3e82948a     ...>...>.R.>...>
240243a4:	3e82d67c 3e831892 3e835acc 3e839d2a     |..>...>.Z.>*..>
240243b4:	3e83dfac 3e842253 3e84651e 3e84a80e     ...>S".>.e.>...>
240243c4:	3e84eb22 3e852e5b 3e8571b9 3e85b53d     "..>[..>.q.>=..>
240243d4:	3e85f8e5 3e863cb2 3e8680a4 3e86c4bc     ...>.<.>...>...>
240243e4:	3e8708fa 3e874d5c 3e8791e5 3e87d693     ...>\M.>...>...>
240243f4:	3e881b67 3e886061 3e88a581 3e88eac7     g..>a`.>...>...>
24024404:	3e893034 3e8975c7 3e89bb80 3e8a0160     40.>.u.>...>`..>
24024414:	3e8a4766 3e8a8d93 3e8ad3e7 3e8b1a62     fG.>...>...>b..>
24024424:	3e8b6104 3e8ba7cd 3e8beebd 3e8c35d5     .a.>...>...>.5.>
24024434:	3e8c7d14 3e8cc47b 3e8d0c0a 3e8d53c0     .}.>{..>...>.S.>
24024444:	3e8d9b9e 3e8de3a4 3e8e2bd2 3e8e7429     ...>...>.+.>)t.>
24024454:	3e8ebca8 3e8f054f 3e8f4e1f 3e8f9717     ...>O..>.N.>...>
24024464:	3e8fe038 3e902982 3e9072f5 3e90bc91     8..>.).>.r.>...>
24024474:	3e910657 3e915045 3e919a5d 3e91e49f     W..>EP.>]..>...>
24024484:	3e922f0a 3e92799f 3e92c45e 3e930f47     ./.>.y.>^..>G..>
24024494:	3e935a5a 3e93a597 3e93f0fe 3e943c90     ZZ.>...>...>.<.>
240244a4:	3e94884d 3e94d434 3e952046 3e956c83     M..>4..>F .>.l.>
240244b4:	3e95b8eb 3e96057e 3e96523d 3e969f27     ...>~..>=R.>'..>
240244c4:	3e96ec3c 3e97397d 3e9786ea 3e97d483     <..>}9.>...>...>
240244d4:	3e982247 3e987038 3e98be55 3e990c9e     G".>8p.>U..>...>
240244e4:	3e995b14 3e99a9b7 3e99f886 3e9a4782     .[.>...>...>.G.>
240244f4:	3e9a96ab 3e9ae602 3e9b3585 3e9b8536     ...>...>.5.>6..>
24024504:	3e9bd514 3e9c2521 3e9c755a 3e9cc5c2     ...>!%.>Zu.>...>
24024514:	3e9d1658 3e9d671c 3e9db80e 3e9e092e     X..>.g.>...>...>
24024524:	3e9e5a7e 3e9eabfb 3e9efda8 3e9f4f84     ~Z.>...>...>.O.>
24024534:	3e9fa18e 3e9ff3c8 3ea04632 3ea098ca     ...>...>2F.>...>
24024544:	3ea0eb93 3ea13e8b 3ea191b3 3ea1e50b     ...>.>.>...>...>
24024554:	3ea23893 3ea28c4c 3ea2e035 3ea3344f     .8.>L..>5..>O4.>
24024564:	3ea38899 3ea3dd14 3ea431c1 3ea4869e     ...>...>.1.>...>
24024574:	3ea4dbad 3ea530ed 3ea5865f 3ea5dc03     ...>.0.>_..>...>
24024584:	3ea631d8 3ea687e0 3ea6de1a 3ea73486     .1.>...>...>.4.>
24024594:	3ea78b24 3ea7e1f5 3ea838f9 3ea89030     $..>...>.8.>0..>
240245a4:	3ea8e79a 3ea93f37 3ea99708 3ea9ef0c     ...>7?.>...>...>
240245b4:	3eaa4744 3eaa9fb0 3eaaf850 3eab5123     DG.>...>P..>#Q.>
240245c4:	3eabaa2c 3eac0368 3eac5cda 3eacb680     ,..>h..>.\.>...>
240245d4:	3ead105b 3ead6a6b 3eadc4b0 3eae1f2b     [..>kj.>...>+..>
240245e4:	3eae79db 3eaed4c2 3eaf2fde 3eaf8b30     .y.>...>./.>0..>
240245f4:	3eafe6b8 3eb04277 3eb09e6d 3eb0fa99     ...>wB.>m..>...>
24024604:	3eb156fc 3eb1b396 3eb21067 3eb26d70     .V.>...>g..>pm.>
24024614:	3eb2cab1 3eb32829 3eb385d9 3eb3e3c1     ...>)(.>...>...>
24024624:	3eb441e2 3eb4a03b 3eb4fecc 3eb55d97     .A.>;..>...>.].>
24024634:	3eb5bc9a 3eb61bd6 3eb67b4c 3eb6dafc     ...>...>L{.>...>
24024644:	3eb73ae5 3eb79b08 3eb7fb65 3eb85bfc     .:.>...>e..>.[.>
24024654:	3eb8bcce 3eb91dda 3eb97f21 3eb9e0a3     ...>...>!..>...>
24024664:	3eba4260 3ebaa459 3ebb068d 3ebb68fd     `B.>Y..>...>.h.>
24024674:	3ebbcba9 3ebc2e91 3ebc91b5 3ebcf516     ...>...>...>...>
24024684:	3ebd58b3 3ebdbc8d 3ebe20a5 3ebe84f9     .X.>...>. .>...>
24024694:	3ebee98b 3ebf4e5b 3ebfb369 3ec018b5     ...>[N.>i..>...>
240246a4:	3ec07e3f 3ec0e407 3ec14a0e 3ec1b055     ?~.>...>.J.>U..>
240246b4:	3ec216da 3ec27d9e 3ec2e4a2 3ec34be6     ...>.}.>...>.K.>
240246c4:	3ec3b369 3ec41b2d 3ec48331 3ec4eb76     i..>-..>1..>v..>
240246d4:	3ec553fb 3ec5bcc2 3ec625c9 3ec68f12     .S.>...>.%.>...>
240246e4:	3ec6f89d 3ec76269 3ec7cc78 3ec836c8     ...>ib.>x..>.6.>
240246f4:	3ec8a15c 3ec90c32 3ec9774b 3ec9e2a7     \..>2..>Kw.>...>
24024704:	3eca4e46 3ecaba2a 3ecb2651 3ecb92bc     FN.>*..>Q&.>...>
24024714:	3ecbff6b 3ecc6c5f 3eccd998 3ecd4716     k..>_l.>...>.G.>
24024724:	3ecdb4d9 3ece22e1 3ece9130 3eceffc4     ...>.".>0..>...>
24024734:	3ecf6e9e 3ecfddbf 3ed04d27 3ed0bcd5     .n.>...>'M.>...>
24024744:	3ed12ccb 3ed19d08 3ed20d8c 3ed27e59     .,.>...>...>Y~.>
24024754:	3ed2ef6e 3ed360cb 3ed3d271 3ed4445f     n..>.`.>q..>_D.>
24024764:	3ed4b697 3ed52919 3ed59be4 3ed60ef9     ...>.).>...>...>
24024774:	3ed68258 3ed6f601 3ed769f6 3ed7de35     X..>...>.i.>5..>
24024784:	3ed852c0 3ed8c796 3ed93cb7 3ed9b225     .R.>...>.<.>%..>
24024794:	3eda27e0 3eda9de7 3edb143a 3edb8adb     .'.>...>:..>...>
240247a4:	3edc01c9 3edc7905 3edcf08f 3edd6868     ...>.y.>...>hh.>
240247b4:	3edde08e 3ede5904 3eded1c9 3edf4add     ...>.Y.>...>.J.>
240247c4:	3edfc441 3ee03df4 3ee0b7f8 3ee1324d     A..>.=.>...>M2.>
240247d4:	3ee1acf2 3ee227e9 3ee2a331 3ee31ecb     ...>.'.>1..>...>
240247e4:	3ee39ab7 3ee416f5 3ee49386 3ee51069     ...>...>...>i..>
240247f4:	3ee58da1 3ee60b2b 3ee6890a 3ee7073c     ...>+..>...><..>
24024804:	3ee785c4 3ee804a0 3ee883d1 3ee90358     ...>...>...>X..>
24024814:	3ee98334 3eea0367 3eea83f0 3eeb04cf     4..>g..>...>...>
24024824:	3eeb8606 3eec0795 3eec897b 3eed0bb9     ...>...>{..>...>
24024834:	3eed8e4f 3eee113f 3eee9487 3eef1829     O..>?..>...>)..>
24024844:	3eef9c24 3ef0207a 3ef0a52a 3ef12a35     $..>z .>*..>5*.>
24024854:	3ef1af9c 3ef2355d 3ef2bb7b 3ef341f5     ...>]5.>{..>.A.>
24024864:	3ef3c8cb 3ef44ffe 3ef4d78f 3ef55f7e     ...>.O.>...>~_.>
24024874:	3ef5e7ca 3ef67075 3ef6f97f 3ef782e7     ...>up.>...>...>
24024884:	3ef80cb0 3ef896d8 3ef92161 3ef9ac4a     ...>...>a!.>J..>
24024894:	3efa3794 3efac340 3efb4f4e 3efbdbbe     .7.>@..>NO.>...>
240248a4:	3efc6890 3efcf5c6 3efd835f 3efe115b     .h.>...>_..>[..>
240248b4:	3efe9fbc 3eff2e82 3effbdad 3f00269e     ...>...>...>.&.?
240248c4:	3f006e99 3f00b6c8 3f00ff29 3f0147be     .n.?...?)..?.G.?
240248d4:	3f019087 3f01d984 3f0222b5 3f026c1a     ...?...?.".?.l.?
240248e4:	3f02b5b4 3f02ff83 3f034987 3f0393c0     ...?...?.I.?...?
240248f4:	3f03de2f 3f0428d3 3f0473ae 3f04bebe     /..?.(.?.s.?...?
24024904:	3f050a05 3f055583 3f05a137 3f05ed23     ...?.U.?7..?#..?
24024914:	3f063946 3f0685a0 3f06d232 3f071efd     F9.?...?2..?...?
24024924:	3f076bff 3f07b93a 3f0806ae 3f08545b     .k.?:..?...?[T.?
24024934:	3f08a241 3f08f061 3f093eba 3f098d4d     A..?a..?.>.?M..?
24024944:	3f09dc1b 3f0a2b23 3f0a7a65 3f0ac9e3     ...?#+.?ez.?...?
24024954:	3f0b199c 3f0b6991 3f0bb9c1 3f0c0a2d     ...?.i.?...?-..?
24024964:	3f0c5ad6 3f0cabbb 3f0cfcdd 3f0d4e3c     .Z.?...?...?<N.?
24024974:	3f0d9fd9 3f0df1b3 3f0e43cb 3f0e9621     ...?...?.C.?!..?
24024984:	3f0ee8b6 3f0f3b89 3f0f8e9c 3f0fe1ee     ...?.;.?...?...?
24024994:	3f10357f 3f108950 3f10dd62 3f1131b4     .5.?P..?b..?.1.?
240249a4:	3f118646 3f11db1a 3f12302f 3f128586     F..?...?/0.?...?
240249b4:	3f12db1f 3f1330fa 3f138717 3f13dd78     ...?.0.?...?x..?
240249c4:	3f14341b 3f148b02 3f14e22d 3f15399c     .4.?...?-..?.9.?
240249d4:	3f15914f 3f15e948 3f164185 3f169a07     O..?H..?.A.?...?
240249e4:	3f16f2d0 3f174bde 3f17a533 3f17fece     ...?.K.?3..?...?
240249f4:	3f1858b0 3f18b2da 3f190d4c 3f196805     .X.?...?L..?.h.?
24024a04:	3f19c307 3f1a1e52 3f1a79e6 3f1ad5c3     ...?R..?.y.?...?
24024a14:	3f1b31ea 3f1b8e5b 3f1beb17 3f1c481d     .1.?[..?...?.H.?
24024a24:	3f1ca56f 3f1d030d 3f1d60f6 3f1dbf2c     o..?...?.`.?,..?
24024a34:	3f1e1dae 3f1e7c7e 3f1edb9b 3f1f3b06     ...?~|.?...?.;.?
24024a44:	3f1f9abf 3f1ffac6 3f205b1d 3f20bbc3     ...?...?.[ ?.. ?
24024a54:	3f211cb9 3f217dff 3f21df96 3f22417e     ..!?.}!?..!?~A"?
24024a64:	3f22a3b7 3f230642 3f23691f 3f23cc4f     .."?B.#?.i#?O.#?
24024a74:	3f242fd2 3f2493a8 3f24f7d3 3f255c51     ./$?..$?..$?Q\%?
24024a84:	3f25c125 3f26264d 3f268bcc 3f26f1a0     %.%?M&&?..&?..&?
24024a94:	3f2757cb 3f27be4d 3f282526 3f288c57     .W'?M.'?&%(?W.(?
24024aa4:	3f28f3e1 3f295bc3 3f29c3ff 3f2a2c94     ..(?.[)?..)?.,*?
24024ab4:	3f2a9584 3f2afece 3f2b6873 3f2bd274     ..*?..*?sh+?t.+?
24024ac4:	3f2c3cd2 3f2ca78b 3f2d12a2 3f2d7e17     .<,?..,?..-?.~-?
24024ad4:	3f2de9e9 3f2e561b 3f2ec2ab 3f2f2f9b     ..-?.V.?...?.//?
24024ae4:	3f2f9ceb 3f300a9c 3f3078ae 3f30e722     ../?..0?.x0?".0?
24024af4:	3f3155f8 3f31c530 3f3234cc 3f32a4cc     .U1?0.1?.42?..2?
24024b04:	3f331531 3f3385fa 3f33f729 3f3468be     1.3?..3?).3?.h4?

24024b14 <__leaf_table_fir2XLow>:
24024b14:	3a8bdc32 bb955900 bc88e6bf bcac918f     2..:.Y..........
24024b24:	bb7aead8 3c98db7f 3c45342d bca916b1     ..z....<-4E<....
24024b34:	bcdbbdfe 3c9254a3 3d49d119 bb8d3cda     .....T.<..I=.<..
24024b44:	bdaf8d57 bd1ccea3 3e3ca03d 3ecf9165     W.......=.<>e..>
24024b54:	3ecf9165 3e3ca03d bd1ccea3 bdaf8d57     e..>=.<>....W...
24024b64:	bb8d3cda 3d49d119 3c9254a3 bcdbbdfe     .<....I=.T.<....
24024b74:	bca916b1 3c45342d 3c98db7f bb7aead8     ....-4E<...<..z.
24024b84:	bcac918f bc88e6bf bb955900 3a8bdc32     .........Y..2..:

24024b94 <__leaf_table_sinewave>:
24024b94:	00000000 3b47e282 3bc8de2b 3c1691a7     ......G;+..;...<
24024ba4:	3c49081c 3c7b00bd 3c96bb99 3cafb7e9     ..I<..{<...<...<
24024bb4:	3cc9081c 3ce2046c 3cfb3fa7 3d0a1dfc     ...<l..<.?.<...=
24024bc4:	3d16bb99 3d23443d 3d2fc265 3d3c6003     ...==D#=e./=.`<=
24024bd4:	3d48de2b 3d557bc8 3d62046c 3d6e8295     +.H=.{U=l.b=..n=
24024be4:	3d7b2032 3d83cf2d 3d8a0e41 3d90624e     2 {=-..=A..=Nb.=
24024bf4:	3d96a162 3d9ce076 3da31f8a 3da96e59     b..=v..=...=Yn.=
24024c04:	3dafad6d 3db5f1bf 3dbc30d3 3dc26fe7     m..=...=.0.=.o.=
24024c14:	3dc8aefb 3dceee0f 3dd53261 3ddb7176     ...=...=a2.=vq.=
24024c24:	3de1b08a 3de7ef9e 3dee2eb2 3df46dc6     ...=...=...=.m.=
24024c34:	3dfab218 3e0070b9 3e039043 3e06afcd     ...=.p.>C..>...>
24024c44:	3e09c77a 3e0ce704 3e10092d 3e1320da     z..>...>-..>. .>
24024c54:	3e163886 3e195810 3e1c6fbd 3e1f8f47     .8.>.X.>.o.>G..>
24024c64:	3e22a6f4 3e25c140 3e28d8ed 3e2bf099     ..">@.%>..(>..+>
24024c74:	3e2f0846 3e3227d0 3e3537a0 3e384f4c     F./>.'2>.75>LO8>
24024c84:	3e3b66f9 3e3e8145 3e4198f2 3e44a8c1     .f;>E.>>..A>..D>
24024c94:	3e47c06e 3e4ad81b 3e4de7ea 3e50ff97     n.G>..J>..M>..P>
24024ca4:	3e540f67 3e571f36 3e5a36e3 3e5d46b2     g.T>6.W>.6Z>.F]>
24024cb4:	3e605921 3e6368f1 3e6678c0 3e698890     !Y`>.hc>.xf>..i>
24024cc4:	3e6c985f 3e6fa051 3e72b021 3e75bff0     _.l>Q.o>!.r>..u>
24024cd4:	3e78c7e3 3e7bd7b2 3e7edfa4 3e80f7ba     ..x>..{>..~>...>
24024ce4:	3e827bb3 3e83ffac 3e8583a5 3e87079e     .{.>...>...>...>
24024cf4:	3e888b97 3e8a0f91 3e8b938a 3e8d1394     ...>...>...>...>
24024d04:	3e8e978d 3e901798 3e919b91 3e931b9b     ...>...>...>...>
24024d14:	3e949ba6 3e961f9f 3e979fa9 3e991fb4     ...>...>...>...>
24024d24:	3e9a9bd0 3e9c1bda 3e9d9be5 3e9f1bef     ...>...>...>...>
24024d34:	3ea0980b 3ea21427 3ea39431 3ea5104d     ...>'..>1..>M..>
24024d44:	3ea68c69 3ea80885 3ea984a1 3eaaff6d     i..>...>...>m..>
24024d54:	3eac7b89 3eadf3b6 3eaf6fd2 3eb0e7ff     .{.>...>.o.>...>
24024d64:	3eb2602d 3eb3d85a 3eb55476 3eb6cca3     -`.>Z..>vT.>...>
24024d74:	3eb83f92 3eb9b7bf 3ebb2fec 3ebca42b     .?.>...>./.>+..>
24024d84:	3ebe1c58 3ebf9097 3ec10386 3ec277c4     X..>...>...>.w.>
24024d94:	3ec3ec03 3ec56042 3ec6d480 3ec84381     ...>B`.>...>.C.>
24024da4:	3ec9b7bf 3ecb280f 3ecc985f 3ece075f     ...>.(.>_..>_..>
24024db4:	3ecf77af 3ed0e7ff 3ed2584f 3ed3c361     .w.>...>OX.>a..>
24024dc4:	3ed533b1 3ed6a012 3ed80c74 3ed97785     .3.>...>t..>.w.>
24024dd4:	3edae3e7 3edc5048 3eddbb5a 3edf23cd     ...>HP.>Z..>.#.>
24024de4:	3ee0902e 3ee1f8a1 3ee35fc4 3ee4c836     ...>...>._.>6..>
24024df4:	3ee62f5a 3ee797cc 3ee8fc50 3eea6373     Z/.>...>P..>sc.>
24024e04:	3eebc7f7 3eed2c7c 3eee8fb0 3eeff434     ...>|,.>...>4..>
24024e14:	3ef15769 3ef2bbed 3ef41c82 3ef57bc8     iW.>...>...>.{.>
24024e24:	3ef6dc5d 3ef83ba3 3ef99c39 3efafb7f     ]..>.;.>9..>...>
24024e34:	3efc5c14 3efdb76b 3eff1412 3f0037b5     .\.>k..>...>.7.?
24024e44:	3f00e608 3f0193b4 3f024207 3f02edbb     ...?...?.B.?...?
24024e54:	3f039a17 3f0447c3 3f04f228 3f059ddc     ...?.G.?(..?...?
24024e64:	3f064a38 3f06f3f5 3f07a051 3f084a0e     8J.?...?Q..?.J.?
24024e74:	3f08f3cb 3f099e30 3f0a47ed 3f0aefb3     ...?0..?.G.?...?
24024e84:	3f0b9820 3f0c41dd 3f0cea4b 3f0d9019      ..?.A.?K..?...?
24024e94:	3f0e37df 3f0ee04c 3f0f861a 3f102be9     .7.?L..?...?.+.?
24024ea4:	3f10d1b7 3f11782d 3f121dfc 3f12c1d3     ...?-x.?...?...?
24024eb4:	3f136651 3f140a28 3f14ae00 3f1551d7     Qf.?(..?...?.Q.?
24024ec4:	3f15f5ae 3f169835 3f173a15 3f17dbf5     ...?5..?.:.?...?
24024ed4:	3f187dd4 3f191fb4 3f19c044 3f1a602d     .}.?...?D..?-`.?
24024ee4:	3f1b020c 3f1b9ffd 3f1c3fe6 3f1cdfce     ...?...?.?.?...?
24024ef4:	3f1d7dbf 3f1e1bb0 3f1eba49 3f1f583a     .}.?...?I..?:X.?
24024f04:	3f1ff62b 3f209225 3f212e1f 3f21ca19     +..?%. ?..!?..!?
24024f14:	3f226613 3f23020c 3f239c0f 3f243611     .f"?..#?..#?.6$?
24024f24:	3f24d014 3f256a16 3f260419 3f269c24     ..$?.j%?..&?$.&?
24024f34:	3f27342f 3f27cc3a 3f286445 3f28fc50     /4'?:.'?Ed(?P.(?
24024f44:	3f2991bc 3f2a27d0 3f2abde4 3f2b53f8     ..)?.'*?..*?.S+?
24024f54:	3f2bea0c 3f2c7e28 3f2d1245 3f2da5b9     ..+?(~,?E.-?..-?
24024f64:	3f2e39d6 3f2ecdf2 3f2f6018 3f2ff23d     .9.?...?.`/?=./?
24024f74:	3f3083ba 3f3115df 3f31a60d 3f32363b     ..0?..1?..1?;62?
24024f84:	3f32c7b9 3f3355ef 3f33e61d 3f347454     ..2?.U3?..3?Tt4?
24024f94:	3f3503da 3f359210 3f361e4f 3f36abde     ..5?..5?O.6?..6?
24024fa4:	3f37381d 3f37c3b5 3f384ff4 3f38dc33     .87?..7?.O8?3.8?
24024fb4:	3f3965d4 3f39f01c 3f3a79bc 3f3b0404     .e9?..9?.y:?..;?
24024fc4:	3f3b8e4c 3f3c15f4 3f3c9e45 3f3d25ee     L.;?..<?E.<?.%=?
24024fd4:	3f3dae3e 3f3e33f0 3f3eba49 3f3f3ffb     >.=?.3>?I.>?.???
24024fe4:	3f3fc5ac 3f404a0e 3f40cfc0 3f415422     ..??.J@?..@?"TA?
24024ff4:	3f41d5e5 3f425a47 3f42dc0a 3f435dcc     ..A?GZB?..B?.]C?
24025004:	3f43e037 3f4461fa 3f44e1c6 3f456239     7.C?.aD?..D?9bE?
24025014:	3f45e204 3f4661d0 3f46e04c 3f475e20     ..E?.aF?L.F? ^G?
24025024:	3f47dbf5 3f4859c9 3f48d64d 3f495422     ..G?.YH?M.H?"TI?
24025034:	3f49cfff 3f4a49e4 3f4ac5c1 3f4b404f     ..I?.IJ?..J?O@K?
24025044:	3f4bba34 3f4c341a 3f4cac08 3f4d25ee     4.K?.4L?..L?.%M?
24025054:	3f4d9ddc 3f4e13d3 3f4e8bc1 3f4f01b8     ..M?..N?..N?..O?
24025064:	3f4f77af 3f4fee4e 3f50624e 3f50d845     .wO?N.O?NbP?E.P?
24025074:	3f514c44 3f51be4d 3f52324d 3f52a3ad     DLQ?M.Q?M2R?..R?
24025084:	3f5315b5 3f5387be 3f53f7cf 3f5469d7     ..S?..S?..S?.iT?
24025094:	3f54d9e8 3f554802 3f55b813 3f56262d     ..T?.HU?..U?-&V?
240250a4:	3f569446 3f5701b8 3f576ddb 3f57d9fd     F.V?..W?.mW?..W?
240250b4:	3f584620 3f58b242 3f591bc5 3f5985f0      FX?B.X?..Y?..Y?
240250c4:	3f59f01c 3f5a5a47 3f5ac1d3 3f5b2a06     ..Y?GZZ?..Z?.*[?
240250d4:	3f5b923a 3f5bf9c6 3f5c6003 3f5cc63f     :.[?..[?.`\??.\?
240250e4:	3f5d2bd4 3f5d9019 3f5df3b6 3f5e57fb     .+]?..]?..]?.W^?
240250f4:	3f5ebc41 3f5f1de7 3f5f822c 3f5fe3d2     A.^?.._?,._?.._?
24025104:	3f604428 3f60a3d7 3f610625 3f6163dc     (D`?..`?%.a?.ca?
24025114:	3f61c433 3f6221ea 3f628049 3f62de01     3.a?.!b?I.b?..b?
24025124:	3f6339c1 3f639629 3f63f1e9 3f644e51     .9c?).c?..c?QNd?
24025134:	3f64a81a 3f6501e2 3f655c53 3f65b61c     ..d?..e?S\e?..e?
24025144:	3f660ded 3f6665bf 3f66bc41 3f671412     ..f?.ef?A.f?..g?
24025154:	3f6769ec 3f67bfc6 3f681451 3f686a2b     .ig?..g?Q.h?+jh?
24025164:	3f68be0e 3f690ff9 3f6963dc 3f69b5c8     ..h?..i?.ci?..i?
24025174:	3f6a07b3 3f6a584f 3f6aaa3b 3f6afa2f     ..j?OXj?;.j?/.j?
24025184:	3f6b4a23 3f6b9820 3f6be61d 3f6c341a     #Jk? .k?..k?.4l?
24025194:	3f6c8217 3f6cce1c 3f6d1a22 3f6d6627     ..l?..l?".m?'fm?
240251a4:	3f6db036 3f6dfc3b 3f6e4452 3f6e8db9     6.m?;.m?RDn?..n?
240251b4:	3f6ed5d0 3f6f1de7 3f6f65fe 3f6fae14     ..n?..o?.eo?..o?
240251c4:	3f6ff434 3f703a54 3f707dd4 3f70c3f4     4.o?T:p?.}p?..p?
240251d4:	3f71081c 3f714a4d 3f718dce 3f71cfff     ..q?MJq?..q?..q?
240251e4:	3f721230 3f7251c2 3f7293f3 3f72d235     0.r?.Qr?..r?5.r?
240251f4:	3f7311c7 3f735200 3f739043 3f73cbe6     ..s?.Rs?C.s?..s?
24025204:	3f740a28 3f7445cc 3f748217 3f74bdba     (.t?.Et?..t?..t?
24025214:	3f74f80e 3f7531ba 3f756c0d 3f75a3c2     ..t?.1u?.lu?..u?
24025224:	3f75dc1e 3f7613d3 3f764c30 3f7681ed     ..u?..v?0Lv?..v?
24025234:	3f76b852 3f76ee0f 3f7721d5 3f775643     R.v?..v?.!w?CVw?
24025244:	3f778a09 3f77bbd8 3f77f045 3f78201d     ..w?..w?E.w?. x?
24025254:	3f7851ec 3f7881c3 3f78b242 3f78e219     .Qx?..x?B.x?..x?
24025264:	3f790ff9 3f793dd9 3f796bba 3f799a41     ..y?.=y?.ky?A.y?
24025274:	3f79c62a 3f79f213 3f7a1c04 3f7a47ed     *.y?..y?..z?.Gz?
24025284:	3f7a71de 3f7a99d9 3f7ac3ca 3f7aebc4     .qz?..z?..z?..z?
24025294:	3f7b11c7 3f7b39c1 3f7b5fc4 3f7b85c6     ..{?.9{?._{?..{?
240252a4:	3f7ba9d2 3f7bcfd5 3f7bf3e0 3f7c15f4     ..{?..{?..{?..|?
240252b4:	3f7c3a00 3f7c5c14 3f7c7c31 3f7c9e45     .:|?.\|?1||?E.|?
240252c4:	3f7cbdba 3f7cddd7 3f7cfbfc 3f7d1a22     ..|?..|?..|?".}?
240252d4:	3f7d3847 3f7d55c5 3f7d71f3 3f7d8e22     G8}?.U}?.q}?".}?
240252e4:	3f7daa50 3f7dc3df 3f7dde16 3f7df84d     P.}?..}?..}?M.}?
240252f4:	3f7e11dc 3f7e2a1b 3f7e41b3 3f7e57fb     ..~?.*~?.A~?.W~?
24025304:	3f7e6e44 3f7e83e4 3f7e9a2c 3f7eadd6     Dn~?..~?,.~?..~?
24025314:	3f7ec227 3f7ed5d0 3f7ee829 3f7ef9db     '.~?..~?).~?..~?
24025324:	3f7f0c35 3f7f1de7 3f7f2e49 3f7f3e03     5..?...?I..?.>.?
24025334:	3f7f4bc7 3f7f5a32 3f7f67f5 3f7f75b8     .K.?2Z.?.g.?.u.?
24025344:	3f7f822c 3f7f8df8 3f7f99c4 3f7fa440     ,..?...?...?@..?
24025354:	3f7fb00c 3f7fb7e9 3f7fc1be 3f7fca43     ...?...?...?C..?
24025364:	3f7fd220 3f7fd806 3f7fdfe3 3f7fe5c9      ..?...?...?...?
24025374:	3f7fe9b8 3f7fee4e 3f7ff23d 3f7ff62b     ...?N..?=..?+..?
24025384:	3f7ffa1a 3f7ffc11 3f7ffc11 3f7ffe09     ...?...?...?...?
24025394:	3f7ffe09 3f7ffe09 3f7ffc11 3f7ffc11     ...?...?...?...?
240253a4:	3f7ffa1a 3f7ff62b 3f7ff23d 3f7fee4e     ...?+..?=..?N..?
240253b4:	3f7fe9b8 3f7fe5c9 3f7fdfe3 3f7fd806     ...?...?...?...?
240253c4:	3f7fd220 3f7fca43 3f7fc1be 3f7fb7e9      ..?C..?...?...?
240253d4:	3f7fb00c 3f7fa440 3f7f99c4 3f7f8df8     ...?@..?...?...?
240253e4:	3f7f822c 3f7f75b8 3f7f67f5 3f7f5a32     ,..?.u.?.g.?2Z.?
240253f4:	3f7f4bc7 3f7f3e03 3f7f2e49 3f7f1de7     .K.?.>.?I..?...?
24025404:	3f7f0c35 3f7ef9db 3f7ee829 3f7ed5d0     5..?..~?).~?..~?
24025414:	3f7ec227 3f7eadd6 3f7e9a2c 3f7e83e4     '.~?..~?,.~?..~?
24025424:	3f7e6e44 3f7e57fb 3f7e41b3 3f7e2a1b     Dn~?.W~?.A~?.*~?
24025434:	3f7e11dc 3f7df84d 3f7dde16 3f7dc3df     ..~?M.}?..}?..}?
24025444:	3f7daa50 3f7d8e22 3f7d71f3 3f7d55c5     P.}?".}?.q}?.U}?
24025454:	3f7d3847 3f7d1a22 3f7cfbfc 3f7cddd7     G8}?".}?..|?..|?
24025464:	3f7cbdba 3f7c9e45 3f7c7c31 3f7c5c14     ..|?E.|?1||?.\|?
24025474:	3f7c3a00 3f7c15f4 3f7bf3e0 3f7bcfd5     .:|?..|?..{?..{?
24025484:	3f7ba9d2 3f7b85c6 3f7b5fc4 3f7b39c1     ..{?..{?._{?.9{?
24025494:	3f7b11c7 3f7aebc4 3f7ac3ca 3f7a99d9     ..{?..z?..z?..z?
240254a4:	3f7a71de 3f7a47ed 3f7a1c04 3f79f213     .qz?.Gz?..z?..y?
240254b4:	3f79c62a 3f799a41 3f796bba 3f793dd9     *.y?A.y?.ky?.=y?
240254c4:	3f790ff9 3f78e219 3f78b242 3f7881c3     ..y?..x?B.x?..x?
240254d4:	3f7851ec 3f78201d 3f77f045 3f77bbd8     .Qx?. x?E.w?..w?
240254e4:	3f778a09 3f775643 3f7721d5 3f76ee0f     ..w?CVw?.!w?..v?
240254f4:	3f76b852 3f7681ed 3f764c30 3f7613d3     R.v?..v?0Lv?..v?
24025504:	3f75dc1e 3f75a3c2 3f756c0d 3f7531ba     ..u?..u?.lu?.1u?
24025514:	3f74f80e 3f74bdba 3f748217 3f7445cc     ..t?..t?..t?.Et?
24025524:	3f740a28 3f73cbe6 3f739043 3f735200     (.t?..s?C.s?.Rs?
24025534:	3f7311c7 3f72d235 3f7293f3 3f7251c2     ..s?5.r?..r?.Qr?
24025544:	3f721230 3f71cfff 3f718dce 3f714a4d     0.r?..q?..q?MJq?
24025554:	3f71081c 3f70c3f4 3f707dd4 3f703a54     ..q?..p?.}p?T:p?
24025564:	3f6ff434 3f6fae14 3f6f65fe 3f6f1de7     4.o?..o?.eo?..o?
24025574:	3f6ed5d0 3f6e8db9 3f6e4452 3f6dfc3b     ..n?..n?RDn?;.m?
24025584:	3f6db036 3f6d6627 3f6d1a22 3f6cce1c     6.m?'fm?".m?..l?
24025594:	3f6c8217 3f6c341a 3f6be61d 3f6b9820     ..l?.4l?..k? .k?
240255a4:	3f6b4a23 3f6afa2f 3f6aaa3b 3f6a584f     #Jk?/.j?;.j?OXj?
240255b4:	3f6a07b3 3f69b5c8 3f6963dc 3f690ff9     ..j?..i?.ci?..i?
240255c4:	3f68be0e 3f686a2b 3f681451 3f67bfc6     ..h?+jh?Q.h?..g?
240255d4:	3f6769ec 3f671412 3f66bc41 3f6665bf     .ig?..g?A.f?.ef?
240255e4:	3f660ded 3f65b61c 3f655c53 3f6501e2     ..f?..e?S\e?..e?
240255f4:	3f64a81a 3f644e51 3f63f1e9 3f639629     ..d?QNd?..c?).c?
24025604:	3f6339c1 3f62de01 3f628049 3f6221ea     .9c?..b?I.b?.!b?
24025614:	3f61c433 3f6163dc 3f610625 3f60a3d7     3.a?.ca?%.a?..`?
24025624:	3f604428 3f5fe3d2 3f5f822c 3f5f1de7     (D`?.._?,._?.._?
24025634:	3f5ebc41 3f5e57fb 3f5df3b6 3f5d9019     A.^?.W^?..]?..]?
24025644:	3f5d2bd4 3f5cc63f 3f5c6003 3f5bf9c6     .+]??.\?.`\?..[?
24025654:	3f5b923a 3f5b2a06 3f5ac1d3 3f5a5a47     :.[?.*[?..Z?GZZ?
24025664:	3f59f01c 3f5985f0 3f591bc5 3f58b242     ..Y?..Y?..Y?B.X?
24025674:	3f584620 3f57d9fd 3f576ddb 3f5701b8      FX?..W?.mW?..W?
24025684:	3f569446 3f56262d 3f55b813 3f554802     F.V?-&V?..U?.HU?
24025694:	3f54d9e8 3f5469d7 3f53f7cf 3f5387be     ..T?.iT?..S?..S?
240256a4:	3f5315b5 3f52a3ad 3f52324d 3f51be4d     ..S?..R?M2R?M.Q?
240256b4:	3f514c44 3f50d845 3f50624e 3f4fee4e     DLQ?E.P?NbP?N.O?
240256c4:	3f4f77af 3f4f01b8 3f4e8bc1 3f4e13d3     .wO?..O?..N?..N?
240256d4:	3f4d9ddc 3f4d25ee 3f4cac08 3f4c341a     ..M?.%M?..L?.4L?
240256e4:	3f4bba34 3f4b404f 3f4ac5c1 3f4a49e4     4.K?O@K?..J?.IJ?
240256f4:	3f49cfff 3f495422 3f48d64d 3f4859c9     ..I?"TI?M.H?.YH?
24025704:	3f47dbf5 3f475e20 3f46e04c 3f4661d0     ..G? ^G?L.F?.aF?
24025714:	3f45e204 3f456239 3f44e1c6 3f4461fa     ..E?9bE?..D?.aD?
24025724:	3f43e037 3f435dcc 3f42dc0a 3f425a47     7.C?.]C?..B?GZB?
24025734:	3f41d5e5 3f415422 3f40cfc0 3f404a0e     ..A?"TA?..@?.J@?
24025744:	3f3fc5ac 3f3f3ffb 3f3eba49 3f3e33f0     ..??.???I.>?.3>?
24025754:	3f3dae3e 3f3d25ee 3f3c9e45 3f3c15f4     >.=?.%=?E.<?..<?
24025764:	3f3b8e4c 3f3b0404 3f3a79bc 3f39f01c     L.;?..;?.y:?..9?
24025774:	3f3965d4 3f38dc33 3f384ff4 3f37c3b5     .e9?3.8?.O8?..7?
24025784:	3f37381d 3f36abde 3f361e4f 3f359210     .87?..6?O.6?..5?
24025794:	3f3503da 3f347454 3f33e61d 3f3355ef     ..5?Tt4?..3?.U3?
240257a4:	3f32c7b9 3f32363b 3f31a60d 3f3115df     ..2?;62?..1?..1?
240257b4:	3f3083ba 3f2ff23d 3f2f6018 3f2ecdf2     ..0?=./?.`/?...?
240257c4:	3f2e39d6 3f2da5b9 3f2d1245 3f2c7e28     .9.?..-?E.-?(~,?
240257d4:	3f2bea0c 3f2b53f8 3f2abde4 3f2a27d0     ..+?.S+?..*?.'*?
240257e4:	3f2991bc 3f28fc50 3f286445 3f27cc3a     ..)?P.(?Ed(?:.'?
240257f4:	3f27342f 3f269c24 3f260419 3f256a16     /4'?$.&?..&?.j%?
24025804:	3f24d014 3f243611 3f239c0f 3f23020c     ..$?.6$?..#?..#?
24025814:	3f226613 3f21ca19 3f212e1f 3f209225     .f"?..!?..!?%. ?
24025824:	3f1ff62b 3f1f583a 3f1eba49 3f1e1bb0     +..?:X.?I..?...?
24025834:	3f1d7dbf 3f1cdfce 3f1c3fe6 3f1b9ffd     .}.?...?.?.?...?
24025844:	3f1b020c 3f1a602d 3f19c044 3f191fb4     ...?-`.?D..?...?
24025854:	3f187dd4 3f17dbf5 3f173a15 3f169835     .}.?...?.:.?5..?
24025864:	3f15f5ae 3f1551d7 3f14ae00 3f140a28     ...?.Q.?...?(..?
24025874:	3f136651 3f12c1d3 3f121dfc 3f11782d     Qf.?...?...?-x.?
24025884:	3f10d1b7 3f102be9 3f0f861a 3f0ee04c     ...?.+.?...?L..?
24025894:	3f0e37df 3f0d9019 3f0cea4b 3f0c41dd     .7.?...?K..?.A.?
240258a4:	3f0b9820 3f0aefb3 3f0a47ed 3f099e30      ..?...?.G.?0..?
240258b4:	3f08f3cb 3f084a0e 3f07a051 3f06f3f5     ...?.J.?Q..?...?
240258c4:	3f064a38 3f059ddc 3f04f228 3f0447c3     8J.?...?(..?.G.?
240258d4:	3f039a17 3f02edbb 3f024207 3f0193b4     ...?...?.B.?...?
240258e4:	3f00e608 3f0037b5 3eff1412 3efdb76b     ...?.7.?...>k..>
240258f4:	3efc5c14 3efafb7f 3ef99c39 3ef83ba3     .\.>...>9..>.;.>
24025904:	3ef6dc5d 3ef57bc8 3ef41c82 3ef2bbed     ]..>.{.>...>...>
24025914:	3ef15769 3eeff434 3eee8fb0 3eed2c7c     iW.>4..>...>|,.>
24025924:	3eebc7f7 3eea6373 3ee8fc50 3ee797cc     ...>sc.>P..>...>
24025934:	3ee62f5a 3ee4c836 3ee35fc4 3ee1f8a1     Z/.>6..>._.>...>
24025944:	3ee0902e 3edf23cd 3eddbb5a 3edc5048     ...>.#.>Z..>HP.>
24025954:	3edae3e7 3ed97785 3ed80c74 3ed6a012     ...>.w.>t..>...>
24025964:	3ed533b1 3ed3c361 3ed2584f 3ed0e7ff     .3.>a..>OX.>...>
24025974:	3ecf77af 3ece075f 3ecc985f 3ecb280f     .w.>_..>_..>.(.>
24025984:	3ec9b7bf 3ec84381 3ec6d480 3ec56042     ...>.C.>...>B`.>
24025994:	3ec3ec03 3ec277c4 3ec10386 3ebf9097     ...>.w.>...>...>
240259a4:	3ebe1c58 3ebca42b 3ebb2fec 3eb9b7bf     X..>+..>./.>...>
240259b4:	3eb83f92 3eb6cca3 3eb55476 3eb3d85a     .?.>...>vT.>Z..>
240259c4:	3eb2602d 3eb0e7ff 3eaf6fd2 3eadf3b6     -`.>...>.o.>...>
240259d4:	3eac7b89 3eaaff6d 3ea984a1 3ea80885     .{.>m..>...>...>
240259e4:	3ea68c69 3ea5104d 3ea39431 3ea21427     i..>M..>1..>'..>
240259f4:	3ea0980b 3e9f1bef 3e9d9be5 3e9c1bda     ...>...>...>...>
24025a04:	3e9a9bd0 3e991fb4 3e979fa9 3e961f9f     ...>...>...>...>
24025a14:	3e949ba6 3e931b9b 3e919b91 3e901798     ...>...>...>...>
24025a24:	3e8e978d 3e8d1394 3e8b938a 3e8a0f91     ...>...>...>...>
24025a34:	3e888b97 3e87079e 3e8583a5 3e83ffac     ...>...>...>...>
24025a44:	3e827bb3 3e80f7ba 3e7edfa4 3e7bd7b2     .{.>...>..~>..{>
24025a54:	3e78c7e3 3e75bff0 3e72b021 3e6fa051     ..x>..u>!.r>Q.o>
24025a64:	3e6c985f 3e698890 3e6678c0 3e6368f1     _.l>..i>.xf>.hc>
24025a74:	3e605921 3e5d46b2 3e5a36e3 3e571f36     !Y`>.F]>.6Z>6.W>
24025a84:	3e540f67 3e50ff97 3e4de7ea 3e4ad81b     g.T>..P>..M>..J>
24025a94:	3e47c06e 3e44a8c1 3e4198f2 3e3e8145     n.G>..D>..A>E.>>
24025aa4:	3e3b66f9 3e384f4c 3e3537a0 3e3227d0     .f;>LO8>.75>.'2>
24025ab4:	3e2f0846 3e2bf099 3e28d8ed 3e25c140     F./>..+>..(>@.%>
24025ac4:	3e22a6f4 3e1f8f47 3e1c6fbd 3e195810     ..">G..>.o.>.X.>
24025ad4:	3e163886 3e1320da 3e10092d 3e0ce704     .8.>. .>-..>...>
24025ae4:	3e09c77a 3e06afcd 3e039043 3e0070b9     z..>...>C..>.p.>
24025af4:	3dfab218 3df46dc6 3dee2eb2 3de7ef9e     ...=.m.=...=...=
24025b04:	3de1b08a 3ddb7176 3dd53261 3dceee0f     ...=vq.=a2.=...=
24025b14:	3dc8aefb 3dc26fe7 3dbc30d3 3db5f1bf     ...=.o.=.0.=...=
24025b24:	3dafad6d 3da96e59 3da31f8a 3d9ce076     m..=Yn.=...=v..=
24025b34:	3d96a162 3d90624e 3d8a0e41 3d83cf2d     b..=Nb.=A..=-..=
24025b44:	3d7b2032 3d6e8295 3d62046c 3d557bc8     2 {=..n=l.b=.{U=
24025b54:	3d48de2b 3d3c6003 3d2fc265 3d23443d     +.H=.`<=e./==D#=
24025b64:	3d16bb99 3d0a1dfc 3cfb3fa7 3ce2046c     ...=...=.?.<l..<
24025b74:	3cc9081c 3cafb7e9 3c96bb99 3c7b00bd     ...<...<...<..{<
24025b84:	3c49081c 3c1691a7 3bc8de2b 3b47e282     ..I<...<+..;..G;
24025b94:	00000000 bb49d9d3 bbc9d9d3 bc170f7c     ......I.....|...
24025ba4:	bc4985f0 bc7b7e91 bc96fa83 bcaff6d3     ..I..~{.........
24025bb4:	bcc94706 bce24357 bcfb7e91 bd0a3d71     .G..WC...~..q=..
24025bc4:	bd16db0e bd2363b2 bd2fe1da bd3c7f78     .....c#.../.x.<.
24025bd4:	bd48fda0 bd559b3d bd6223e2 bd6ea20a     ..H.=.U..#b...n.
24025be4:	bd7b3fa7 bd83dee8 bd8a1dfc bd907208     .?{..........r..
24025bf4:	bd96b11c bd9cf030 bda32f45 bda97e13     ....0...E/...~..
24025c04:	bdafc265 bdb60179 bdbc408e bdc27fa2     e...y....@......
24025c14:	bdc8beb6 bdcefdca bdd5421c bddb8130     .........B..0...
24025c24:	bde1c044 bde7ff58 bdee3e6c bdf47d80     D...X...l>...}..
24025c34:	bdfac1d3 be007896 be039820 be06b7aa     .....x.. .......
24025c44:	be09cf57 be0ceee1 be10110a be1328b7     W............(..
24025c54:	be164064 be195fee be1c779a be1f9724     d@..._...w..$...
24025c64:	be22aed1 be25c91d be28e0ca be2bf877     .."...%...(.w.+.
24025c74:	be2f1023 be322fad be353f7d be38572a     #./../2.}?5.*W8.
24025c84:	be3b6ed6 be3e8922 be41a0cf be44b09f     .n;.".>...A...D.
24025c94:	be47c84b be4adff8 be4defc8 be510774     K.G...J...M.t.Q.
24025ca4:	be541744 be572713 be5a3ec0 be5d512f     D.T..'W..>Z./Q].
24025cb4:	be6060fe be6370ce be66809d be69906d     .``..pc...f.m.i.
24025cc4:	be6ca03c be6fa82f be72b7fe be75c7ce     <.l./.o...r...u.
24025cd4:	be78cfc0 be7bdf8f be7ee782 be80fba9     ..x...{...~.....
24025ce4:	be827fa2 be84039b be858794 be870b8d     ................
24025cf4:	be888f86 be8a137f be8b9778 be8d1783     ........x.......
24025d04:	be8e9b7c be901b86 be919f80 be931f8a     |...............
24025d14:	be949f95 be96238e be97a398 be9923a3     .....#.......#..
24025d24:	be9a9fbe be9c1fc9 be9d9fd3 be9f1fde     ................
24025d34:	bea09bfa bea21816 bea39820 bea5143c     ........ ...<...
24025d44:	bea69058 bea80c74 bea98890 beab035c     X...t.......\...
24025d54:	beac7f78 beadf7a5 beaf73c1 beb0ebee     x........s......
24025d64:	beb2641b beb3dc48 beb55864 beb6d091     .d..H...dX......
24025d74:	beb84381 beb9bbae bebb33db bebca81a     .C.......3......
24025d84:	bebe2047 bebf9485 bec10774 bec27bb3     G ......t....{..
24025d94:	bec3eff2 bec56430 bec6d86f bec8476f     ....0d..o...oG..
24025da4:	bec9bbae becb2bfe becc9c4e bece0c9e     .....+..N.......
24025db4:	becf7b9e bed0ebee bed25c3e bed3c89f     .{......>\......
24025dc4:	bed537a0 bed6a401 bed81062 bed97b74     .7......b...t{..
24025dd4:	bedae7d5 bedc5437 beddc098 bedf27bb     ....7T.......'..
24025de4:	bee0941d bee1fc8f bee363b2 bee4cc25     .........c..%...
24025df4:	bee63498 bee79bbb bee9003f beea6762     .4......?...bg..
24025e04:	beebcbe6 beed306a beee939f beeff823     ....j0......#...
24025e14:	bef15ca7 bef2bfdb bef42071 bef57fb7     .\......q ......
24025e24:	bef6e04c bef83f92 bef9a027 befaff6d     L....?..'...m...
24025e34:	befc6003 befdbb5a beff1801 bf003a54     .`..Z.......T:..
24025e44:	bf00e7ff bf019653 bf0243fe bf02efb3     ....S....C......
24025e54:	bf039c0f bf0449ba bf04f41f bf059fd3     .....I..........
24025e64:	bf064c30 bf06f5ed bf07a249 bf084c06     0L......I....L..
24025e74:	bf08f5c3 bf09a027 bf0a49e4 bf0af252     ....'....I..R...
24025e84:	bf0b9a17 bf0c43d4 bf0cec42 bf0d9210     .....C..B.......
24025e94:	bf0e39d6 bf0ee243 bf0f8812 bf102de0     .9..C........-..
24025ea4:	bf10d3ae bf117a25 bf121ff3 bf12c3ca     ....%z..........
24025eb4:	bf136849 bf140c20 bf14aff7 bf1553ce     Ih.. ........S..
24025ec4:	bf15f84d bf169a2c bf173c0c bf17ddec     M...,....<......
24025ed4:	bf187fcc bf192253 bf19c23b bf1a6224     ....S"..;...$b..
24025ee4:	bf1b0404 bf1ba1f5 bf1c41dd bf1ce1c6     .........A......
24025ef4:	bf1d7fb7 bf1e1e4f bf1ebc41 bf1f5a32     ....O...A...2Z..
24025f04:	bf1ff823 bf20941d bf213016 bf21cc10     #..... ..0!...!.
24025f14:	bf22680a bf230404 bf239e06 bf243809     .h"...#...#..8$.
24025f24:	bf24d20b bf256c0d bf260610 bf269e1b     ..$..l%...&...&.
24025f34:	bf273626 bf27ce31 bf28663c bf28fe48     &6'.1.'.<f(.H.(.
24025f44:	bf2993b4 bf2a29c7 bf2abfdb bf2b55ef     ..)..)*...*..U+.
24025f54:	bf2bec03 bf2c801f bf2d143c bf2da7b1     ..+...,.<.-...-.
24025f64:	bf2e3bcd bf2ecfea bf2f620f bf2ff434     .;.......b/.4./.
24025f74:	bf3085b2 bf3117d7 bf31a805 bf323832     ..0...1...1.282.
24025f84:	bf32c9b0 bf3357e6 bf33e814 bf34764b     ..2..W3...3.Kv4.
24025f94:	bf3505d1 bf359408 bf362047 bf36add6     ..5...5.G 6...6.
24025fa4:	bf373a15 bf37c5ac bf3851ec bf38de2b     .:7...7..Q8.+.8.
24025fb4:	bf3967cb bf39f213 bf3a7bb3 bf3b05fb     .g9...9..{:...;.
24025fc4:	bf3b9043 bf3c17ec bf3ca03c bf3d27e5     C.;...<.<.<..'=.
24025fd4:	bf3db036 bf3e35e7 bf3ebc41 bf3f41f2     6.=..5>.A.>..A?.
24025fe4:	bf3fc84b bf404c06 bf40d1b7 bf415619     K.?..L@...@..VA.
24025ff4:	bf41d7dc bf425c3e bf42de01 bf435fc4     ..A.>\B...B.._C.
24026004:	bf43e22e bf4463f1 bf44e3bd bf456430     ..C..cD...D.0dE.
24026014:	bf45e3fc bf4663c7 bf46e243 bf476018     ..E..cF.C.F..`G.
24026024:	bf47ddec bf485bc0 bf48d845 bf495619     ..G..[H.E.H..VI.
24026034:	bf49d1f6 bf4a4bdc bf4ac7b9 bf4b4246     ..I..KJ...J.FBK.
24026044:	bf4bbc2c bf4c3611 bf4cae00 bf4d27e5     ,.K..6L...L..'M.
24026054:	bf4d9fd3 bf4e15ca bf4e8db9 bf4f03b0     ..M...N...N...O.
24026064:	bf4f7a4e bf4ff045 bf506445 bf50da3c     NzO.E.O.EdP.<.P.
24026074:	bf514e3c bf51c044 bf523444 bf52a64c     <NQ.D.Q.D4R.L.R.
24026084:	bf5317ad bf5389b5 bf53f9c6 bf546bcf     ..S...S...S..kT.
24026094:	bf54dbe0 bf5549f9 bf55ba0a bf562824     ..T..IU...U.$(V.
240260a4:	bf56963e bf5703b0 bf576fd2 bf57dbf5     >.V...W..oW...W.
240260b4:	bf584817 bf58b439 bf591dbd bf5987e8     .HX.9.X...Y...Y.
240260c4:	bf59f213 bf5a5c3e bf5ac3ca bf5b2bfe     ..Y.>\Z...Z..+[.
240260d4:	bf5b9431 bf5bfbbd bf5c61fa bf5cc836     1.[...[..a\.6.\.
240260e4:	bf5d2dcb bf5d9210 bf5df5ae bf5e59f3     .-]...]...]..Y^.
240260f4:	bf5ebe38 bf5f1fde bf5f8423 bf5fe5c9     8.^..._.#._..._.
24026104:	bf604620 bf60a5ce bf61081c bf6165d4      F`...`...a..ea.
24026114:	bf61c62a bf6223e2 bf628241 bf62dff8     *.a..#b.A.b...b.
24026124:	bf633bb8 bf639820 bf63f3e0 bf645048     .;c. .c...c.HPd.
24026134:	bf64aa11 bf6503da bf655e4a bf65b813     ..d...e.J^e...e.
24026144:	bf660fe4 bf6667b6 bf66be38 bf671609     ..f..gf.8.f...g.
24026154:	bf676be3 bf67c1be bf681648 bf686c22     .kg...g.H.h."lh.
24026164:	bf68c005 bf6911f1 bf6965d4 bf69b7bf     ..h...i..ei...i.
24026174:	bf6a0a52 bf6a5a47 bf6aac32 bf6afc26     R.j.GZj.2.j.&.j.
24026184:	bf6b4c1b bf6b9a17 bf6be814 bf6c3611     .Lk...k...k..6l.
24026194:	bf6c840e bf6cd014 bf6d1c19 bf6d681f     ..l...l...m..hm.
240261a4:	bf6db22d bf6dfe33 bf6e464a bf6e8fb0     -.m.3.m.JFn...n.
240261b4:	bf6ed7c7 bf6f1fde bf6f67f5 bf6fb00c     ..n...o..go...o.
240261c4:	bf6ff62b bf703c4b bf707fcc bf70c5eb     +.o.K<p...p...p.
240261d4:	bf710a13 bf714c44 bf718fc5 bf71d1f6     ..q.DLq...q...q.
240261e4:	bf721427 bf7253b9 bf7295ea bf72d42c     '.r..Sr...r.,.r.
240261f4:	bf7313be bf7353f8 bf73923a bf73cddd     ..s..Ss.:.s...s.
24026204:	bf740c20 bf7447c3 bf74840e bf74bfb1      .t..Gt...t...t.
24026214:	bf74fa05 bf7533b1 bf756e05 bf75a5b9     ..t..3u..nu...u.
24026224:	bf75de16 bf7615ca bf764e27 bf7683e4     ..u...v.'Nv...v.
24026234:	bf76ba49 bf76f007 bf7723cd bf77583a     I.v...v..#w.:Xw.
24026244:	bf778c00 bf77bdcf bf77f23d bf782214     ..w...w.=.w.."x.
24026254:	bf7853e3 bf7883ba bf78b439 bf78e411     .Sx...x.9.x...x.
24026264:	bf7911f1 bf793fd1 bf796db1 bf799c39     ..y..?y..my.9.y.
24026274:	bf79c821 bf79f40a bf7a1dfc bf7a49e4     !.y...y...z..Iz.
24026284:	bf7a73d6 bf7a9bd0 bf7ac5c1 bf7aedbb     .sz...z...z...z.
24026294:	bf7b13be bf7b3bb8 bf7b61bb bf7b87be     ..{..;{..a{...{.
240262a4:	bf7babc9 bf7bd1cc bf7bf5d8 bf7c17ec     ..{...{...{...|.
240262b4:	bf7c3bf7 bf7c5e0b bf7c7e28 bf7ca03c     .;|..^|.(~|.<.|.
240262c4:	bf7cbfb1 bf7cdfce bf7cfdf4 bf7d1c19     ..|...|...|...}.
240262d4:	bf7d3a3f bf7d57bc bf7d73eb bf7d9019     ?:}..W}..s}...}.
240262e4:	bf7dac47 bf7dc5d6 bf7de00d bf7dfa44     G.}...}...}.D.}.
240262f4:	bf7e13d3 bf7e2c13 bf7e4452 bf7e59f3     ..~..,~.RD~..Y~.
24026304:	bf7e703b bf7e85db bf7e9c24 bf7eafcd     ;p~...~.$.~...~.
24026314:	bf7ec41e bf7ed7c7 bf7eea21 bf7efbd2     ..~...~.!.~...~.
24026324:	bf7f0e2c bf7f1fde bf7f3040 bf7f3ffb     ,.......@0...?..
24026334:	bf7f4dbe bf7f5c29 bf7f69ec bf7f77af     .M..)\...i...w..
24026344:	bf7f8423 bf7f8fef bf7f9bbb bf7fa637     #...........7...
24026354:	bf7fb203 bf7fb9e0 bf7fc3b5 bf7fcc3a     ............:...
24026364:	bf7fd417 bf7fd9fd bf7fe1da bf7fe7c0     ................
24026374:	bf7febaf bf7ff045 bf7ff434 bf7ff823     ....E...4...#...
24026384:	bf7ffc11 bf7ffe09 bf7ffe09 bf800000     ................
24026394:	bf800000 bf800000 bf7ffe09 bf7ffe09     ................
240263a4:	bf7ffc11 bf7ff823 bf7ff434 bf7ff045     ....#...4...E...
240263b4:	bf7febaf bf7fe7c0 bf7fe1da bf7fd9fd     ................
240263c4:	bf7fd417 bf7fcc3a bf7fc3b5 bf7fb9e0     ....:...........
240263d4:	bf7fb203 bf7fa637 bf7f9bbb bf7f8fef     ....7...........
240263e4:	bf7f8423 bf7f77af bf7f69ec bf7f5c29     #....w...i..)\..
240263f4:	bf7f4dbe bf7f3ffb bf7f3040 bf7f1fde     .M...?..@0......
24026404:	bf7f0e2c bf7efbd2 bf7eea21 bf7ed7c7     ,.....~.!.~...~.
24026414:	bf7ec41e bf7eafcd bf7e9c24 bf7e85db     ..~...~.$.~...~.
24026424:	bf7e703b bf7e59f3 bf7e4452 bf7e2c13     ;p~..Y~.RD~..,~.
24026434:	bf7e13d3 bf7dfa44 bf7de00d bf7dc5d6     ..~.D.}...}...}.
24026444:	bf7dac47 bf7d9019 bf7d73eb bf7d57bc     G.}...}..s}..W}.
24026454:	bf7d3a3f bf7d1c19 bf7cfdf4 bf7cdfce     ?:}...}...|...|.
24026464:	bf7cbfb1 bf7ca03c bf7c7e28 bf7c5e0b     ..|.<.|.(~|..^|.
24026474:	bf7c3bf7 bf7c17ec bf7bf5d8 bf7bd1cc     .;|...|...{...{.
24026484:	bf7babc9 bf7b87be bf7b61bb bf7b3bb8     ..{...{..a{..;{.
24026494:	bf7b13be bf7aedbb bf7ac5c1 bf7a9bd0     ..{...z...z...z.
240264a4:	bf7a73d6 bf7a49e4 bf7a1dfc bf79f40a     .sz..Iz...z...y.
240264b4:	bf79c821 bf799c39 bf796db1 bf793fd1     !.y.9.y..my..?y.
240264c4:	bf7911f1 bf78e411 bf78b439 bf7883ba     ..y...x.9.x...x.
240264d4:	bf7853e3 bf782214 bf77f23d bf77bdcf     .Sx.."x.=.w...w.
240264e4:	bf778c00 bf77583a bf7723cd bf76f007     ..w.:Xw..#w...v.
240264f4:	bf76ba49 bf7683e4 bf764e27 bf7615ca     I.v...v.'Nv...v.
24026504:	bf75de16 bf75a5b9 bf756e05 bf7533b1     ..u...u..nu..3u.
24026514:	bf74fa05 bf74bfb1 bf74840e bf7447c3     ..t...t...t..Gt.
24026524:	bf740c20 bf73cddd bf73923a bf7353f8      .t...s.:.s..Ss.
24026534:	bf7313be bf72d42c bf7295ea bf7253b9     ..s.,.r...r..Sr.
24026544:	bf721427 bf71d1f6 bf718fc5 bf714c44     '.r...q...q.DLq.
24026554:	bf710a13 bf70c5eb bf707fcc bf703c4b     ..q...p...p.K<p.
24026564:	bf6ff62b bf6fb00c bf6f67f5 bf6f1fde     +.o...o..go...o.
24026574:	bf6ed7c7 bf6e8fb0 bf6e464a bf6dfe33     ..n...n.JFn.3.m.
24026584:	bf6db22d bf6d681f bf6d1c19 bf6cd014     -.m..hm...m...l.
24026594:	bf6c840e bf6c3611 bf6be814 bf6b9a17     ..l..6l...k...k.
240265a4:	bf6b4c1b bf6afc26 bf6aac32 bf6a5a47     .Lk.&.j.2.j.GZj.
240265b4:	bf6a0a52 bf69b7bf bf6965d4 bf6911f1     R.j...i..ei...i.
240265c4:	bf68c005 bf686c22 bf681648 bf67c1be     ..h."lh.H.h...g.
240265d4:	bf676be3 bf671609 bf66be38 bf6667b6     .kg...g.8.f..gf.
240265e4:	bf660fe4 bf65b813 bf655e4a bf6503da     ..f...e.J^e...e.
240265f4:	bf64aa11 bf645048 bf63f3e0 bf639820     ..d.HPd...c. .c.
24026604:	bf633bb8 bf62dff8 bf628241 bf6223e2     .;c...b.A.b..#b.
24026614:	bf61c62a bf6165d4 bf61081c bf60a5ce     *.a..ea...a...`.
24026624:	bf604620 bf5fe5c9 bf5f8423 bf5f1fde      F`..._.#._..._.
24026634:	bf5ebe38 bf5e59f3 bf5df5ae bf5d9210     8.^..Y^...]...].
24026644:	bf5d2dcb bf5cc836 bf5c61fa bf5bfbbd     .-].6.\..a\...[.
24026654:	bf5b9431 bf5b2bfe bf5ac3ca bf5a5c3e     1.[..+[...Z.>\Z.
24026664:	bf59f213 bf5987e8 bf591dbd bf58b439     ..Y...Y...Y.9.X.
24026674:	bf584817 bf57dbf5 bf576fd2 bf5703b0     .HX...W..oW...W.
24026684:	bf56963e bf562824 bf55ba0a bf5549f9     >.V.$(V...U..IU.
24026694:	bf54dbe0 bf546bcf bf53f9c6 bf5389b5     ..T..kT...S...S.
240266a4:	bf5317ad bf52a64c bf523444 bf51c044     ..S.L.R.D4R.D.Q.
240266b4:	bf514e3c bf50da3c bf506445 bf4ff045     <NQ.<.P.EdP.E.O.
240266c4:	bf4f7a4e bf4f03b0 bf4e8db9 bf4e15ca     NzO...O...N...N.
240266d4:	bf4d9fd3 bf4d27e5 bf4cae00 bf4c3611     ..M..'M...L..6L.
240266e4:	bf4bbc2c bf4b4246 bf4ac7b9 bf4a4bdc     ,.K.FBK...J..KJ.
240266f4:	bf49d1f6 bf495619 bf48d845 bf485bc0     ..I..VI.E.H..[H.
24026704:	bf47ddec bf476018 bf46e243 bf4663c7     ..G..`G.C.F..cF.
24026714:	bf45e3fc bf456430 bf44e3bd bf4463f1     ..E.0dE...D..cD.
24026724:	bf43e22e bf435fc4 bf42de01 bf425c3e     ..C.._C...B.>\B.
24026734:	bf41d7dc bf415619 bf40d1b7 bf404c06     ..A..VA...@..L@.
24026744:	bf3fc84b bf3f41f2 bf3ebc41 bf3e35e7     K.?..A?.A.>..5>.
24026754:	bf3db036 bf3d27e5 bf3ca03c bf3c17ec     6.=..'=.<.<...<.
24026764:	bf3b9043 bf3b05fb bf3a7bb3 bf39f213     C.;...;..{:...9.
24026774:	bf3967cb bf38de2b bf3851ec bf37c5ac     .g9.+.8..Q8...7.
24026784:	bf373a15 bf36add6 bf362047 bf359408     .:7...6.G 6...5.
24026794:	bf3505d1 bf34764b bf33e814 bf3357e6     ..5.Kv4...3..W3.
240267a4:	bf32c9b0 bf323832 bf31a805 bf3117d7     ..2.282...1...1.
240267b4:	bf3085b2 bf2ff434 bf2f620f bf2ecfea     ..0.4./..b/.....
240267c4:	bf2e3bcd bf2da7b1 bf2d143c bf2c801f     .;....-.<.-...,.
240267d4:	bf2bec03 bf2b55ef bf2abfdb bf2a29c7     ..+..U+...*..)*.
240267e4:	bf2993b4 bf28fe48 bf28663c bf27ce31     ..).H.(.<f(.1.'.
240267f4:	bf273626 bf269e1b bf260610 bf256c0d     &6'...&...&..l%.
24026804:	bf24d20b bf243809 bf239e06 bf230404     ..$..8$...#...#.
24026814:	bf22680a bf21cc10 bf213016 bf20941d     .h"...!..0!... .
24026824:	bf1ff823 bf1f5a32 bf1ebc41 bf1e1e4f     #...2Z..A...O...
24026834:	bf1d7fb7 bf1ce1c6 bf1c41dd bf1ba1f5     .........A......
24026844:	bf1b0404 bf1a6224 bf19c23b bf192253     ....$b..;...S"..
24026854:	bf187fcc bf17ddec bf173c0c bf169a2c     .........<..,...
24026864:	bf15f84d bf1553ce bf14aff7 bf140c20     M....S...... ...
24026874:	bf136849 bf12c3ca bf121ff3 bf117a25     Ih..........%z..
24026884:	bf10d3ae bf102de0 bf0f8812 bf0ee243     .....-......C...
24026894:	bf0e39d6 bf0d9210 bf0cec42 bf0c43d4     .9......B....C..
240268a4:	bf0b9a17 bf0af252 bf0a49e4 bf09a027     ....R....I..'...
240268b4:	bf08f5c3 bf084c06 bf07a249 bf06f5ed     .....L..I.......
240268c4:	bf064c30 bf059fd3 bf04f41f bf0449ba     0L...........I..
240268d4:	bf039c0f bf02efb3 bf0243fe bf019653     .........C..S...
240268e4:	bf00e7ff bf003a54 beff1801 befdbb5a     ....T:......Z...
240268f4:	befc6003 befaff6d bef9a027 bef83f92     .`..m...'....?..
24026904:	bef6e04c bef57fb7 bef42071 bef2bfdb     L.......q ......
24026914:	bef15ca7 beeff823 beee939f beed306a     .\..#.......j0..
24026924:	beebcbe6 beea6762 bee9003f bee79bbb     ....bg..?.......
24026934:	bee63498 bee4cc25 bee363b2 bee1fc8f     .4..%....c......
24026944:	bee0941d bedf27bb beddc098 bedc5437     .....'......7T..
24026954:	bedae7d5 bed97b74 bed81062 bed6a401     ....t{..b.......
24026964:	bed537a0 bed3c89f bed25c3e bed0ebee     .7......>\......
24026974:	becf7b9e bece0c9e becc9c4e becb2bfe     .{......N....+..
24026984:	bec9bbae bec8476f bec6d86f bec56430     ....oG..o...0d..
24026994:	bec3eff2 bec27bb3 bec10774 bebf9485     .....{..t.......
240269a4:	bebe2047 bebca81a bebb33db beb9bbae     G .......3......
240269b4:	beb84381 beb6d091 beb55864 beb3dc48     .C......dX..H...
240269c4:	beb2641b beb0ebee beaf73c1 beadf7a5     .d.......s......
240269d4:	beac7f78 beab035c bea98890 bea80c74     x...\.......t...
240269e4:	bea69058 bea5143c bea39820 bea21816     X...<... .......
240269f4:	bea09bfa be9f1fde be9d9fd3 be9c1fc9     ................
24026a04:	be9a9fbe be9923a3 be97a398 be96238e     .....#.......#..
24026a14:	be949f95 be931f8a be919f80 be901b86     ................
24026a24:	be8e9b7c be8d1783 be8b9778 be8a137f     |.......x.......
24026a34:	be888f86 be870b8d be858794 be84039b     ................
24026a44:	be827fa2 be80fba9 be7ee782 be7bdf8f     ..........~...{.
24026a54:	be78cfc0 be75c7ce be72b7fe be6fa82f     ..x...u...r./.o.
24026a64:	be6ca03c be69906d be66809d be6370ce     <.l.m.i...f..pc.
24026a74:	be6060fe be5d512f be5a3ec0 be572713     .``./Q]..>Z..'W.
24026a84:	be541744 be510774 be4defc8 be4adff8     D.T.t.Q...M...J.
24026a94:	be47c84b be44b09f be41a0cf be3e8922     K.G...D...A.".>.
24026aa4:	be3b6ed6 be38572a be353f7d be322fad     .n;.*W8.}?5../2.
24026ab4:	be2f1023 be2bf877 be28e0ca be25c91d     #./.w.+...(...%.
24026ac4:	be22aed1 be1f9724 be1c779a be195fee     ..".$....w..._..
24026ad4:	be164064 be1328b7 be10110a be0ceee1     d@...(..........
24026ae4:	be09cf57 be06b7aa be039820 be007896     W....... ....x..
24026af4:	bdfac1d3 bdf47d80 bdee3e6c bde7ff58     .....}..l>..X...
24026b04:	bde1c044 bddb8130 bdd5421c bdcefdca     D...0....B......
24026b14:	bdc8beb6 bdc27fa2 bdbc408e bdb60179     .........@..y...
24026b24:	bdafc265 bda97e13 bda32f45 bd9cf030     e....~..E/..0...
24026b34:	bd96b11c bd907208 bd8a1dfc bd83dee8     .....r..........
24026b44:	bd7b3fa7 bd6ea20a bd6223e2 bd559b3d     .?{...n..#b.=.U.
24026b54:	bd48fda0 bd3c7f78 bd2fe1da bd2363b2     ..H.x.<.../..c#.
24026b64:	bd16db0e bd0a3d71 bcfb7e91 bce24357     ....q=...~..WC..
24026b74:	bcc94706 bcaff6d3 bc96fa83 bc7b7e91     .G...........~{.
24026b84:	bc4985f0 bc170f7c bbc9d9d3 bb49d9d3     ..I.|.........I.
24026b94:	33323130 37363534 62613938 66656463     0123456789abcdef
24026ba4:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
24026bb4:	7a797877 00000000 00000000              wxyz........

24026bc0 <__exp2f_data>:
24026bc0:	00000000 3ff00000 d3158574 3fefd9b0     .......?t......?
24026bd0:	6cf9890f 3fefb558 d0125b51 3fef9301     ...lX..?Q[.....?
24026be0:	3c7d517b 3fef72b8 3168b9aa 3fef5487     {Q}<.r.?..h1.T.?
24026bf0:	6e756238 3fef387a f51fdee1 3fef1e9d     8bunz8.?.......?
24026c00:	0a31b715 3fef06fe 373aa9cb 3feef1a7     ..1....?..:7...?
24026c10:	4c123422 3feedea6 6061892d 3feece08     "4.L...?-.a`...?
24026c20:	d5362a27 3feebfda 569d4f82 3feeb42b     '*6....?.O.V+..?
24026c30:	dd485429 3feeab07 b03a5585 3feea47e     )TH....?.U:.~..?
24026c40:	667f3bcd 3feea09e e8ec5f74 3fee9f75     .;.f...?t_..u..?
24026c50:	73eb0187 3feea114 994cce13 3feea589     ...s...?..L....?
24026c60:	422aa0db 3feeace5 b0cdc5e5 3feeb737     ..*B...?....7..?
24026c70:	82a3f090 3feec491 b23e255d 3feed503     .......?]%>....?
24026c80:	995ad3ad 3feee89f f2fb5e47 3feeff76     ..Z....?G^..v..?
24026c90:	dd85529c 3fef199b dcef9069 3fef3720     .R.....?i... 7.?
24026ca0:	dcfba487 3fef5818 337b9b5f 3fef7c97     .....X.?_.{3.|.?
24026cb0:	a2a490da 3fefa4af 5b6e4540 3fefd076     .......?@En[v..?
24026cc0:	00000000 42e80000 4b912394 3fac6af8     .......B.#.K.j.?
24026cd0:	50fac4f3 3fcebfce ff0c52d6 3fe62e42     ...P...?.R..B..?
24026ce0:	00000000 43380000 652b82fe 40471547     ......8C..+eG.G@
24026cf0:	4b912394 3ebc6af8 50fac4f3 3f2ebfce     .#.K.j.>...P...?
24026d00:	ff0c52d6 3f962e42                       .R..B..?

24026d08 <__logf_data>:
24026d08:	79f8f3be 3ff661ec 808caade bfd57bf7     ...y.a.?.....{..
24026d18:	4aaf883d 3ff571ed a7c06ddb bfd2bef0     =..J.q.?.m......
24026d28:	f0f010b0 3ff49539 7f513a67 bfd01eae     ....9..?g:Q.....
24026d38:	b0b80385 3ff3c995 a68224e9 bfcb31d8     .......?.$...1..
24026d48:	0c8864a5 3ff30d19 0ac07758 bfc6574f     .d.....?Xw..OW..
24026d58:	7b0b8ea0 3ff25e22 c79c8100 bfc1aa2b     ...{"^.?....+...
24026d68:	4a1a343f 3ff1bb4a ce8c0e5e bfba4e76     ?4.JJ..?^...vN..
24026d78:	f08ae5ba 3ff12358 5a611ccc bfb1973c     ....X#.?..aZ<...
24026d88:	419900a7 3ff0953f 38e10c1e bfa252f4     ...A?..?...8.R..
24026d98:	00000000 3ff00000 00000000 00000000     .......?........
24026da8:	fd9a47ac 3fee608c 5df25984 3faaa5aa     .G...`.?.Y.]...?
24026db8:	1f026aa0 3feca4b3 aa362eb4 3fbc5e53     .j.....?..6.S^.?
24026dc8:	576afce6 3feb2036 7720db08 3fc526e5     ..jW6 .?.. w.&.?
24026dd8:	63a1aa2d 3fe9c2d1 0d224770 3fcbc286     -..c...?pG"....?
24026de8:	037841ed 3fe886e6 c8a07ee1 3fd1058b     .Ax....?.~.....?
24026df8:	f5534862 3fe767dc 57b6ee09 3fd40430     bHS..g.?...W0..?
24026e08:	fefa39ef 3fe62e42 48b88334 bfd00ea3     .9..B..?4..H....
24026e18:	0be00b6a 3fd5575b f20a4123 bfdffffe     j...[W.?#A......

24026e28 <__exp_data>:
24026e28:	652b82fe 40671547 00000000 43380000     ..+eG.g@......8C
24026e38:	fefa0000 bf762e42 bc9e3b3a bd0cf79a     ....B.v.:;......
24026e48:	fffffdbd 3fdfffff 5555543c 3fc55555     .......?<TUUUU.?
24026e58:	cf172b91 3fa55555 67a4d017 3f811111     .+..UU.?...g...?
24026e68:	00000000 42c80000 fefa39ef 3fe62e42     .......B.9..B..?
24026e78:	ff82c424 3fcebfbd d70cf4b5 3fac6b08     $......?.....k.?
24026e88:	d24650cc 3f83b2ab 9b4e3a84 3f55d7e0     .PF....?.:N...U?
	...
24026ea4:	3ff00000 1a88bf6e 3c9b3b4f a9fb3335     ...?n...O;.<53..
24026eb4:	3feff63d 9cd8dc5d bc716013 3e778061     =..?]....`q.a.w>
24026ec4:	3fefec9a 108766d1 bc905e7a e86e7f85     ...?.f..z^....n.
24026ed4:	3fefe315 3567f613 3c8cd252 d3158574     ...?..g5R..<t...
24026ee4:	3fefd9b0 23f98efa bc8bce80 29ddf6de     ...?...#.......)
24026ef4:	3fefd06b 61e6c861 3c60f74e 18759bc8     k..?a..aN.`<..u.
24026f04:	3fefc745 5b33d399 3c90a3e4 cac6f383     E..?..3[...<....
24026f14:	3fefbe3e 5d837b6d 3c979aa6 6cf9890f     >..?m{.]...<...l
24026f24:	3fefb558 92fdeffc 3c8eb51a 2b7247f7     X..?.......<.Gr+
24026f34:	3fefac92 702f9cd1 3c3ebe3d 32d3d1a2     ...?../p=.><...2
24026f44:	3fefa3ec 89906e0b bc6a0334 affed31b     ...?.n..4.j.....
24026f54:	3fef9b66 2a2fbd0e bc955652 d0125b51     f..?../*RV..Q[..
24026f64:	3fef9301 8c4eea55 bc5080ef c06c31cc     ...?U.N...P..1l.
24026f74:	3fef8abd b9d5f416 bc91c923 aea92de0     ...?....#....-..
24026f84:	3fef829a e95c55af 3c80d3e3 c8a58e51     ...?.U\....<Q...
24026f94:	3fef7a98 eaa59348 bc801b15 3c7d517b     .z.?H.......{Q}<
24026fa4:	3fef72b8 55de323d bc8f1ff0 388c8dea     .r.?=2.U.......8
24026fb4:	3fef6af9 3f1353bf 3c8b898c eb6fcb75     .j.?.S.?...<u.o.
24026fc4:	3fef635b 7611eb26 bc96d99c 84045cd4     [c.?&..v.....\..
24026fd4:	3fef5be0 3e3a2f60 3c9aecf7 3168b9aa     .[.?`/:>...<..h1
24026fe4:	3fef5487 cb86389d bc8fe782 22fcd91d     .T.?.8........."
24026ff4:	3fef4d50 44a6c38d 3c8a6f41 88628cd6     PM.?...DAo.<..b.
24027004:	3fef463b b0e4047d 3c807a05 917ddc96     ;F.?}....z.<..}.
24027014:	3fef3f49 e3a8a894 3c968efd 6e756238     I?.?.......<8bun
24027024:	3fef387a f274487d 3c875e18 4fb2a63f     z8.?}Ht..^.<?..O
24027034:	3fef31ce 981fe7f2 3c80472b 65e27cdd     .1.?....+G.<.|.e
24027044:	3fef2b45 3f71085e bc96b87b e1f56381     E+.?^.q?{....c..
24027054:	3fef24df 6d09ab31 3c82f7e1 f51fdee1     .$.?1..m...<....
24027064:	3fef1e9d 1a6fbffa bc3d219b d0dad990     ...?..o..!=.....
24027074:	3fef187f 720c0ab4 3c8b3782 a6e4030b     ...?...r.7.<....
24027084:	3fef1285 89cecb8f 3c6e1492 a93e2f56     ...?......n<V/>.
24027094:	3fef0caf 4db0abb6 3c834d75 0a31b715     ...?...MuM.<..1.
240270a4:	3fef06fe e2ac744c 3c864201 fc4cd831     ...?Lt...B.<1.L.
240270b4:	3fef0170 5dd3f84a 3c8fdd39 b26416ff     p..?J..]9..<..d.
240270c4:	3feefc08 3b8e5b04 bc86a380 5f929ff1     ...?.[.;......._
240270d4:	3feef6c5 cc4b5068 bc924aed 373aa9cb     ...?hPK..J....:7
240270e4:	3feef1a7 1b512d8e bc9907f8 6d05d866     ...?.-Q.....f..m
240270f4:	3feeecae 3e9436d2 bc71d1e8 34e59ff7     ...?.6.>..q....4
24027104:	3feee7db b3ce1b15 bc991919 c313a8e5     ...?............
24027114:	3feee32d a72a4c6d 3c859f48 4c123422     -..?mL*.H..<"4.L
24027124:	3feedea6 7a28698a bc931260 04ac801c     ...?.i(z`.......
24027134:	3feeda45 4817895b bc58a78f 21f72e2a     E..?[..H..X.*..!
24027144:	3feed60a 67499a1b bc7c2c9b d950a897     ...?..Ig.,|...P.
24027154:	3feed1f5 60c2ac11 3c4363ed 6061892d     ...?...`.cC<-.a`
24027164:	3feece08 3b0664ef 3c966609 ed1d0057     ...?.d.;.f.<W...
24027174:	3feeca41 daa10379 3c6ecce1 b5c13cd0     A..?y.....n<.<..
24027184:	3feec6a2 3f0f1230 3c93ff8e f0d7d3de     ...?0..?...<....
24027194:	3feec32a bb7aafb0 3c7690ce d5362a27     *..?..z...v<'*6.
240271a4:	3feebfda eb54e077 3c931dbd 99fddd0d     ...?w.T....<....
240271b4:	3feebcb2 0071a38e bc8f9434 769d2ca7     ...?..q.4....,.v
240271c4:	3feeb9b2 dc93a349 bc87decc a2cf6642     ...?I.......Bf..
240271d4:	3feeb6da bd0f385f bc78dec6 569d4f82     ...?_8....x..O.V
240271e4:	3feeb42b ec7b5cf6 bc861246 ca5d920f     +..?.\{.F.....].
240271f4:	3feeb1a4 18fdd78e 3c933505 36b527da     ...?.....5.<.'.6
24027204:	3feeaf47 2f8a9b05 3c7b98b7 d497c7fd     G..?.../..{<....
24027214:	3feead12 e21c5409 3c9063e1 dd485429     ...?.T...c.<)TH.
24027224:	3feeab07 5019c6ea 3c34c785 8a5946b7     ...?...P..4<.FY.
24027234:	3feea926 2b64c035 3c9432e6 15ad2148     &..?5.d+.2.<H!..
24027244:	3feea76f 6199769f bc8ce44a b976dc09     o..?.v.aJ.....v.
24027254:	3feea5e1 3bef4da8 bc8c33c5 b03a5585     ...?.M.;.3...U:.
24027264:	3feea47e 892be9ae bc845378 34ccc320     ~..?..+.xS.. ..4
24027274:	3feea346 78565858 bc93cedd 82552225     F..?XXVx....%"U.
24027284:	3feea238 807e1964 3c5710aa d44ca973     8..?d.~...W<s.L.
24027294:	3feea155 bf5e2228 bc93b3ef 667f3bcd     U..?("^......;.f
240272a4:	3feea09e 8734b982 bc6a12ad 750bdabf     ...?..4...j....u
240272b4:	3feea012 b86da9ee bc6367ef 3c651a2f     ...?..m..gc./.e<
240272c4:	3fee9fb2 54e08851 bc80dc3d f9519484     ...?Q..T=.....Q.
240272d4:	3fee9f7d 7e5a3ecf bc781f64 e8ec5f74     }..?.>Z~d.x.t_..
240272e4:	3fee9f75 c08b7db0 bc86ee4a 48a58174     u..?.}..J...t..H
240272f4:	3fee9f9a 1e55e68a bc861932 564267c9     ...?..U.2....gBV
24027304:	3fee9feb 5e09d4d3 3c909ccb 4fde5d3f     ...?...^...<?].O
24027314:	3feea069 b94da51d bc7b32dc 73eb0187     i..?..M..2{....s
24027324:	3feea114 5467c06b 3c94ecfd 0130c132     ...?k.gT...<2.0.
24027334:	3feea1ed abd66c55 3c65ebe1 36cf4e62     ...?Ul....e<bN.6
24027344:	3feea2f3 2fb3cf42 bc88a1c5 543e1a12     ...?B../......>T
24027354:	3feea427 f13b3734 bc9369b6 994cce13     '..?47;..i....L.
24027364:	3feea589 3a19ff1e bc805e84 4623c7ad     ...?...:.^....#F
24027374:	3feea71a d872576e bc94d450 9b4492ed     ...?nWr.P.....D.
24027384:	3feea8d9 5b0e8a00 3c90ad67 d98a6699     ...?...[g..<.f..
24027394:	3feeaac7 c1f0eab4 3c8db72f 422aa0db     ...?..../..<..*B
240273a4:	3feeace5 9cc5e7ff bc65b660 16b5448c     ...?....`.e..D..
240273b4:	3feeaf32 59f35f44 3c7bf683 99157736     2..?D_.Y..{<6w..
240273c4:	3feeb1ae a71e3d83 bc93091f 0b91ffc6     ...?.=..........
240273d4:	3feeb45b 8b6c1e29 bc5da9b8 b0cdc5e5     [..?).l...].....
240273e4:	3feeb737 7c90b959 bc6c23f9 cbc8520f     7..?Y..|.#l..R..
240273f4:	3feeba44 22f4f9aa bc924343 9fde4e50     D..?..."CC..PN..
24027404:	3feebd82 d7668e4b bc85ca6c 70ca07ba     ...?K.f.l......p
24027414:	3feec0f1 2b91ce27 3c71affc 82a3f090     ...?'..+..q<....
24027424:	3feec491 e10a73bb 3c6dd235 19e32323     ...?.s..5.m<##..
24027434:	3feec863 22622263 bc87c504 7b5de565     c..?c"b"....e.]{
24027444:	3feecc66 e3e231d5 3c8b1c86 ec4a2d33     f..?.1.....<3-J.
24027454:	3feed09b d3bcbb15 bc91bbd1 b23e255d     ...?........]%>.
24027464:	3feed503 9cee31d2 3c90cc31 1330b358     ...?.1..1..<X.0.
24027474:	3feed99e 6e735ab3 3c846984 5579fdbf     ...?.Zsn.i.<..yU
24027484:	3feede6b 978e9db4 bc82dfcd bfd3f37a     k..?........z...
24027494:	3feee36b 92cb3387 3c8c1a77 995ad3ad     k..?.3..w..<..Z.
240274a4:	3feee89f 4ad1d9fa bc907b8f 298db666     ...?...J.{..f..)
240274b4:	3feeee07 56dcaeba bc55c3d9 b84f15fb     ...?...V..U...O.
240274c4:	3feef3a2 3da6f640 bc90a40e 8de5593a     ...?@..=....:Y..
240274d4:	3feef972 38ad9334 bc68d6f4 f2fb5e47     r..?4..8..h.G^..
240274e4:	3feeff76 6b588a35 bc91eee2 30a1064a     v..?5.Xk....J..0
240274f4:	3fef05b0 0a5fddcd 3c74ffd7 904bc1d2     ...?.._...t<..K.
24027504:	3fef0c1e fa9298ac bc91bdfb 5bd71e09     ...?...........[
24027514:	3fef12c2 30af0cb3 3c736eae dd85529c     ...?...0.ns<.R..
24027524:	3fef199b 5c9ffd94 3c8ee332 5fffd07a     ...?...\2..<z.._
24027534:	3fef20ab d10959ac 3c84e08f 2e57d14b     . .?.Y.....<K.W.
24027544:	3fef27f1 384e1a67 3c63cdaf 9406e7b5     .'.?g.N8..c<....
24027554:	3fef2f6d 6c921968 3c676b2c dcef9069     m/.?h..l,kg<i...
24027564:	3fef3720 83ccb5d2 bc808a18 555dc3fa      7.?..........]U
24027574:	3fef3f0b 3ffffa6f bc8fad5d 4a07897c     .?.?o..?]...|..J
24027584:	3fef472d 3875a949 bc900dae 080d89f2     -G.?I.u8........
24027594:	3fef4f87 a63d07a7 3c74a385 dcfba487     .O.?..=...t<....
240275a4:	3fef5818 2040220f bc82919e 16c98398     .X.?."@ ........
240275b4:	3fef60e3 d5c192ac 3c8e5a50 03db3285     .`.?....PZ.<.2..
240275c4:	3fef69e6 ac016b4b 3c843a59 f301b460     .i.?Kk..Y:.<`...
240275d4:	3fef7321 07b43e1f bc82d521 337b9b5f     !s.?.>..!..._.{3
240275e4:	3fef7c97 3b470dc9 bc892ab9 14f5a129     .|.?..G;.*..)...
240275f4:	3fef8646 603a88d3 3c74b604 e78b3ff6     F..?..:`..t<.?..
24027604:	3fef902e 519d7271 3c83c5ec fbc74c83     ...?qr.Q...<.L..
24027614:	3fef9a51 8fd391f0 bc8ff712 a2a490da     Q..?............
24027624:	3fefa4af e223747d bc8dae98 2d8e67f1     ...?}t#......g.-
24027634:	3fefaf48 41aa2008 3c8ec3bc ee615a27     H..?. .A...<'Za.
24027644:	3fefba1b c3a9eb32 3c842b94 376bba97     ...?2....+.<..k7
24027654:	3fefc52b 31d185ee 3c8a64a9 5b6e4540     +..?...1.d.<@En[
24027664:	3fefd076 e43be3ed bc8e37ba ad9cbe14     v..?..;..7......
24027674:	3fefdbfd 4d91cd9d 3c77893b 819e90d8     ...?...M;.w<....
24027684:	3fefe7c1 4160cc89 3c5305c1 2b8f71f1     ...?..`A..S<.q.+
24027694:	3feff3c2                                ...?

24027698 <__log2f_data>:
24027698:	79f8f3be 3ff661ec 5b963019 bfdefec6     ...y.a.?.0.[....
240276a8:	4aaf883d 3ff571ed 32d4fca4 bfdb0b68     =..J.q.?...2h...
240276b8:	f0f010b0 3ff49539 0a1fb77b bfd7418b     ....9..?{....A..
240276c8:	b0b80385 3ff3c995 1a6dcf7b bfd39de9     .......?{.m.....
240276d8:	0c8864a5 3ff30d19 f3f2b631 bfd01d9b     .d.....?1.......
240276e8:	7b0b8ea0 3ff25e22 1b3b7af0 bfc97c1d     ...{"^.?.z;..|..
240276f8:	4a1a343f 3ff1bb4a 93af3c9f bfc2f9e3     ?4.JJ..?.<......
24027708:	f08ae5ba 3ff12358 bf788d5c bfb960cb     ....X#.?\.x..`..
24027718:	419900a7 3ff0953f b6475fce bfaa6f9d     ...A?..?._G..o..
24027728:	00000000 3ff00000 00000000 00000000     .......?........
24027738:	fd9a47ac 3fee608c 9f24f53d 3fb338ca     .G...`.?=.$..8.?
24027748:	1f026aa0 3feca4b3 543891ba 3fc476a9     .j.....?..8T.v.?
24027758:	576afce6 3feb2036 4ac4e4d2 3fce840b     ..jW6 .?...J...?
24027768:	63a1aa2d 3fe9c2d1 f0c6651c 3fd40645     -..c...?.e..E..?
24027778:	037841ed 3fe886e6 2c1b9ff8 3fd88e9c     .Ax....?...,...?
24027788:	f5534862 3fe767dc 4eb17bcc 3fdce0a4     bHS..g.?.{.N...?
24027798:	f70a7e4d bfd712b6 496832e0 3fdecabf     M~.......2hI...?
240277a8:	9ffae3de bfe71547 5f35c8b8 3ff71547     ....G.....5_G..?

240277b8 <__inv_pio4>:
240277b8:	000000a2 0000a2f9 00a2f983 a2f9836e     ............n...
240277c8:	f9836e4e 836e4e44 6e4e4415 4e441529     Nn..DNn..DNn).DN
240277d8:	441529fc 1529fc27 29fc2757 fc2757d1     .).D'.).W'.).W'.
240277e8:	2757d1f5 57d1f534 d1f534dd f534ddc0     ..W'4..W.4....4.
240277f8:	34ddc0db ddc0db62 c0db6295 db629599     ...4b....b....b.
24027808:	6295993c 95993c43 993c4390 3c439041     <..bC<...C<.A.C<

24027818 <__sincosf_table>:
24027818:	00000000 3ff00000 00000000 bff00000     .......?........
24027828:	00000000 bff00000 00000000 3ff00000     ...............?
24027838:	6dc9c883 41645f30 54442d18 3ff921fb     ...m0_dA.-DT.!.?
24027848:	00000000 3ff00000 fd0c621c bfdfffff     .......?.b......
24027858:	e1068f19 3fa55553 e89a359d bf56c087     ....SU.?.5....V.
24027868:	027bf8c3 3ef99343 5995a603 bfc55554     ..{.C..>...YTU..
24027878:	05230bc4 3f811076 3774cf24 bf2994eb     ..#.v..?$.t7..).
24027888:	00000000 3ff00000 00000000 bff00000     .......?........
24027898:	00000000 bff00000 00000000 3ff00000     ...............?
240278a8:	6dc9c883 41645f30 54442d18 3ff921fb     ...m0_dA.-DT.!.?
240278b8:	00000000 bff00000 fd0c621c 3fdfffff     .........b.....?
240278c8:	e1068f19 bfa55553 e89a359d 3f56c087     ....SU...5....V?
240278d8:	027bf8c3 bef99343 5995a603 bfc55554     ..{.C......YTU..
240278e8:	05230bc4 3f811076 3774cf24 bf2994eb     ..#.v..?$.t7..).

240278f8 <npio2_hw>:
240278f8:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
24027908:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
24027918:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
24027928:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
24027938:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
24027948:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
24027958:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
24027968:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

24027978 <two_over_pi>:
24027978:	000000a2 000000f9 00000083 0000006e     ............n...
24027988:	0000004e 00000044 00000015 00000029     N...D.......)...
24027998:	000000fc 00000027 00000057 000000d1     ....'...W.......
240279a8:	000000f5 00000034 000000dd 000000c0     ....4...........
240279b8:	000000db 00000062 00000095 00000099     ....b...........
240279c8:	0000003c 00000043 00000090 00000041     <...C.......A...
240279d8:	000000fe 00000051 00000063 000000ab     ....Q...c.......
240279e8:	000000de 000000bb 000000c5 00000061     ............a...
240279f8:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
24027a08:	00000042 0000004d 000000d2 000000e0     B...M...........
24027a18:	00000006 00000049 0000002e 000000ea     ....I...........
24027a28:	00000009 000000d1 00000092 0000001c     ................
24027a38:	000000fe 0000001d 000000eb 0000001c     ................
24027a48:	000000b1 00000029 000000a7 0000003e     ....).......>...
24027a58:	000000e8 00000082 00000035 000000f5     ........5.......
24027a68:	0000002e 000000bb 00000044 00000084     ........D.......
24027a78:	000000e9 0000009c 00000070 00000026     ........p...&...
24027a88:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
24027a98:	00000039 00000091 000000d6 00000039     9...........9...
24027aa8:	00000083 00000053 00000039 000000f4     ....S...9.......
24027ab8:	0000009c 00000084 0000005f 0000008b     ........_.......
24027ac8:	000000bd 000000f9 00000028 0000003b     ........(...;...
24027ad8:	0000001f 000000f8 00000097 000000ff     ................
24027ae8:	000000de 00000005 00000098 0000000f     ................
24027af8:	000000ef 0000002f 00000011 0000008b     ..../...........
24027b08:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
24027b18:	0000006d 00000036 0000007e 000000cf     m...6...~.......
24027b28:	00000027 000000cb 00000009 000000b7     '...............
24027b38:	0000004f 00000046 0000003f 00000066     O...F...?...f...
24027b48:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
24027b58:	00000075 00000027 000000ba 000000c7     u...'...........
24027b68:	000000eb 000000e5 000000f1 0000007b     ............{...
24027b78:	0000003d 00000007 00000039 000000f7     =.......9.......
24027b88:	0000008a 00000052 00000092 000000ea     ....R...........
24027b98:	0000006b 000000fb 0000005f 000000b1     k......._.......
24027ba8:	0000001f 0000008d 0000005d 00000008     ........].......
24027bb8:	00000056 00000003 00000030 00000046     V.......0...F...
24027bc8:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
24027bd8:	000000f0 000000cf 000000bc 00000020     ............ ...
24027be8:	0000009a 000000f4 00000036 0000001d     ........6.......
24027bf8:	000000a9 000000e3 00000091 00000061     ............a...
24027c08:	0000005e 000000e6 0000001b 00000008     ^...............
24027c18:	00000065 00000099 00000085 0000005f     e..........._...
24027c28:	00000014 000000a0 00000068 00000040     ........h...@...
24027c38:	0000008d 000000ff 000000d8 00000080     ................
24027c48:	0000004d 00000073 00000027 00000031     M...s...'...1...
24027c58:	00000006 00000006 00000015 00000056     ............V...
24027c68:	000000ca 00000073 000000a8 000000c9     ....s...........
24027c78:	00000060 000000e2 0000007b 000000c0     `.......{.......
24027c88:	0000008c 0000006b                       ....k...

24027c90 <npio2_hw>:
24027c90:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
24027ca0:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
24027cb0:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
24027cc0:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
24027cd0:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
24027ce0:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
24027cf0:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
24027d00:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

24027d10 <two_over_pi>:
24027d10:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
24027d20:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
24027d30:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
24027d40:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
24027d50:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
24027d60:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
24027d70:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
24027d80:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
24027d90:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
24027da0:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
24027db0:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
24027dc0:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
24027dd0:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
24027de0:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
24027df0:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
24027e00:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
24027e10:	0060e27b 00c08c6b                       {.`.k...

24027e18 <__powf_log2_data>:
24027e18:	79f8f3be 3ff661ec 5b963019 bfdefec6     ...y.a.?.0.[....
24027e28:	4aaf883d 3ff571ed 32d4fca4 bfdb0b68     =..J.q.?...2h...
24027e38:	f0f010b0 3ff49539 0a1fb77b bfd7418b     ....9..?{....A..
24027e48:	b0b80385 3ff3c995 1a6dcf7b bfd39de9     .......?{.m.....
24027e58:	0c8864a5 3ff30d19 f3f2b631 bfd01d9b     .d.....?1.......
24027e68:	7b0b8ea0 3ff25e22 1b3b7af0 bfc97c1d     ...{"^.?.z;..|..
24027e78:	4a1a343f 3ff1bb4a 93af3c9f bfc2f9e3     ?4.JJ..?.<......
24027e88:	f08ae5ba 3ff12358 bf788d5c bfb960cb     ....X#.?\.x..`..
24027e98:	419900a7 3ff0953f b6475fce bfaa6f9d     ...A?..?._G..o..
24027ea8:	00000000 3ff00000 00000000 00000000     .......?........
24027eb8:	fd9a47ac 3fee608c 9f24f53d 3fb338ca     .G...`.?=.$..8.?
24027ec8:	1f026aa0 3feca4b3 543891ba 3fc476a9     .j.....?..8T.v.?
24027ed8:	576afce6 3feb2036 4ac4e4d2 3fce840b     ..jW6 .?...J...?
24027ee8:	63a1aa2d 3fe9c2d1 f0c6651c 3fd40645     -..c...?.e..E..?
24027ef8:	037841ed 3fe886e6 2c1b9ff8 3fd88e9c     .Ax....?...,...?
24027f08:	f5534862 3fe767dc 4eb17bcc 3fdce0a4     bHS..g.?.{.N...?
24027f18:	c9496e0b 3fd27616 a075c67a bfd71969     .nI..v.?z.u.i...
24027f28:	6ca7badd 3fdec70a 48bef6c8 bfe71547     ...l...?...HG...
24027f38:	652ab82b 3ff71547                       +.*eG..?

24027f40 <PIo2>:
24027f40:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
24027f50:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
24027f60:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
24027f70:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

24027f80 <init_jk>:
24027f80:	00000002 00000003 00000004 00000006     ................

24027f90 <PIo2>:
24027f90:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
24027fa0:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
24027fb0:	1fc40000 1bc60000 17440000              ..........D.

24027fbc <init_jk>:
24027fbc:	00000004 00000007 00000009              ............

24027fc8 <_init>:
24027fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24027fca:	bf00      	nop
24027fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
24027fce:	bc08      	pop	{r3}
24027fd0:	469e      	mov	lr, r3
24027fd2:	4770      	bx	lr

24027fd4 <_fini>:
24027fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24027fd6:	bf00      	nop
24027fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
24027fda:	bc08      	pop	{r3}
24027fdc:	469e      	mov	lr, r3
24027fde:	4770      	bx	lr

24027fe0 <__parsePreset_veneer>:
24027fe0:	f85f f000 	ldr.w	pc, [pc]	; 24027fe4 <__parsePreset_veneer+0x4>
24027fe4:	00001ce1 	.word	0x00001ce1

24027fe8 <__HAL_SAI_TxCpltCallback_veneer>:
24027fe8:	f85f f000 	ldr.w	pc, [pc]	; 24027fec <__HAL_SAI_TxCpltCallback_veneer+0x4>
24027fec:	000016a1 	.word	0x000016a1

24027ff0 <__audioInitVocal_veneer>:
24027ff0:	f85f f000 	ldr.w	pc, [pc]	; 24027ff4 <__audioInitVocal_veneer+0x4>
24027ff4:	00008e41 	.word	0x00008e41

24027ff8 <__HAL_SAI_TxHalfCpltCallback_veneer>:
24027ff8:	f85f f000 	ldr.w	pc, [pc]	; 24027ffc <__HAL_SAI_TxHalfCpltCallback_veneer+0x4>
24027ffc:	00001801 	.word	0x00001801

24028000 <__randomNumber_veneer>:
24028000:	f85f f000 	ldr.w	pc, [pc]	; 24028004 <__randomNumber_veneer+0x4>
24028004:	00001c81 	.word	0x00001c81

24028008 <__HAL_SPI_TxRxCpltCallback_veneer>:
24028008:	f85f f000 	ldr.w	pc, [pc]	; 2402800c <__HAL_SPI_TxRxCpltCallback_veneer+0x4>
2402800c:	00004581 	.word	0x00004581

24028010 <__HAL_SPI_TxRxHalfCpltCallback_veneer>:
24028010:	f85f f000 	ldr.w	pc, [pc]	; 24028014 <__HAL_SPI_TxRxHalfCpltCallback_veneer+0x4>
24028014:	000048c1 	.word	0x000048c1

24028018 <__HAL_SAI_ErrorCallback_veneer>:
24028018:	f85f f000 	ldr.w	pc, [pc]	; 2402801c <__HAL_SAI_ErrorCallback_veneer+0x4>
2402801c:	00001961 	.word	0x00001961

24028020 <__audioInitAdditive_veneer>:
24028020:	f85f f000 	ldr.w	pc, [pc]	; 24028024 <__audioInitAdditive_veneer+0x4>
24028024:	00000401 	.word	0x00000401

24028028 <__audioInitString1_veneer>:
24028028:	f85f f000 	ldr.w	pc, [pc]	; 2402802c <__audioInitString1_veneer+0x4>
2402802c:	00004c01 	.word	0x00004c01

24028030 <__HAL_I2C_ErrorCallback_veneer>:
24028030:	f85f f000 	ldr.w	pc, [pc]	; 24028034 <__HAL_I2C_ErrorCallback_veneer+0x4>
24028034:	00004541 	.word	0x00004541

24028038 <__HAL_I2C_SlaveRxCpltCallback_veneer>:
24028038:	f85f f000 	ldr.w	pc, [pc]	; 2402803c <__HAL_I2C_SlaveRxCpltCallback_veneer+0x4>
2402803c:	00004501 	.word	0x00004501

Disassembly of section .itcmram:

00000400 <audioInitAdditive>:
}
     400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     404:	49f9      	ldr	r1, [pc, #996]	; (7ec <audioInitAdditive+0x3ec>)
     406:	4cfa      	ldr	r4, [pc, #1000]	; (7f0 <audioInitAdditive+0x3f0>)
     408:	4afa      	ldr	r2, [pc, #1000]	; (7f4 <audioInitAdditive+0x3f4>)
     40a:	4bfb      	ldr	r3, [pc, #1004]	; (7f8 <audioInitAdditive+0x3f8>)
     40c:	48fb      	ldr	r0, [pc, #1004]	; (7fc <audioInitAdditive+0x3fc>)
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt - 1)) * PUPLfloat;
     40e:	4dfc      	ldr	r5, [pc, #1008]	; (800 <audioInitAdditive+0x400>)
     410:	4efc      	ldr	r6, [pc, #1008]	; (804 <audioInitAdditive+0x404>)
     412:	ed2d 8b10 	vpush	{d8-d15}
     416:	ed94 3a01 	vldr	s6, [r4, #4]
}
     41a:	b083      	sub	sp, #12
        p->curr = pickupOut;
     41c:	edd1 4a00 	vldr	s9, [r1]
}
     420:	edd1 3a01 	vldr	s7, [r1, #4]
     424:	ee33 3a24 	vadd.f32	s6, s6, s9
     428:	edd2 0a00 	vldr	s1, [r2]
    __HAL_DMA_ENABLE(hdma);
     42c:	edd4 2a00 	vldr	s5, [r4]
     430:	ed92 2a01 	vldr	s4, [r2, #4]
     434:	ee33 3a23 	vadd.f32	s6, s6, s7
     438:	edd1 4a03 	vldr	s9, [r1, #12]
     43c:	ee72 2aa0 	vadd.f32	s5, s5, s1
     440:	edd1 0a02 	vldr	s1, [r1, #8]
     444:	edd2 7a02 	vldr	s15, [r2, #8]
     448:	ee33 3a20 	vadd.f32	s6, s6, s1
     44c:	edd2 1a03 	vldr	s3, [r2, #12]
     450:	ee72 2a82 	vadd.f32	s5, s5, s4
     454:	edd1 3a05 	vldr	s7, [r1, #20]
     458:	ed92 6a04 	vldr	s12, [r2, #16]
     45c:	ee33 3a24 	vadd.f32	s6, s6, s9
     460:	ed91 2a06 	vldr	s4, [r1, #24]
     464:	ee72 2aa7 	vadd.f32	s5, s5, s15
     468:	edd1 7a04 	vldr	s15, [r1, #16]
     46c:	ed92 1a05 	vldr	s2, [r2, #20]
     470:	ee33 3a27 	vadd.f32	s6, s6, s15
     474:	edd1 0a07 	vldr	s1, [r1, #28]
     478:	ee72 2aa1 	vadd.f32	s5, s5, s3
     47c:	ed92 5a06 	vldr	s10, [r2, #24]
     480:	edd1 1a08 	vldr	s3, [r1, #32]
     484:	ee33 3a23 	vadd.f32	s6, s6, s7
     488:	edd0 3a00 	vldr	s7, [r0]
     48c:	ee72 2a86 	vadd.f32	s5, s5, s12
     490:	ed92 0a07 	vldr	s0, [r2, #28]
     494:	edd1 4a09 	vldr	s9, [r1, #36]	; 0x24
     498:	ee33 3a02 	vadd.f32	s6, s6, s4
     49c:	edd2 6a08 	vldr	s13, [r2, #32]
     4a0:	ee72 2a81 	vadd.f32	s5, s5, s2
     4a4:	ed93 1a01 	vldr	s2, [r3, #4]
     4a8:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
     4ac:	ee33 3a20 	vadd.f32	s6, s6, s1
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
     4b0:	ed93 2a02 	vldr	s4, [r3, #8]
    return HAL_ERROR;
     4b4:	ee72 2a85 	vadd.f32	s5, s5, s10
}
     4b8:	ed93 5a00 	vldr	s10, [r3]
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
     4bc:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
     4c0:	ee33 3a21 	vadd.f32	s6, s6, s3
  __HAL_LOCK(hdma);
     4c4:	edd1 7a0b 	vldr	s15, [r1, #44]	; 0x2c
    __HAL_DMA_ENABLE(hdma);
     4c8:	ee73 3a85 	vadd.f32	s7, s7, s10
     4cc:	edd2 5a0a 	vldr	s11, [r2, #40]	; 0x28
}
     4d0:	ee72 2a80 	vadd.f32	s5, s5, s0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
     4d4:	ed92 7a0b 	vldr	s14, [r2, #44]	; 0x2c
     4d8:	ee33 3a24 	vadd.f32	s6, s6, s9
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
     4dc:	ed93 5a03 	vldr	s10, [r3, #12]
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
     4e0:	ee73 3a81 	vadd.f32	s7, s7, s2
     4e4:	ed93 1a04 	vldr	s2, [r3, #16]
     4e8:	ee72 2aa6 	vadd.f32	s5, s5, s13
     4ec:	edd3 1a05 	vldr	s3, [r3, #20]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
     4f0:	ee33 3a06 	vadd.f32	s6, s6, s12
     4f4:	ed93 6a07 	vldr	s12, [r3, #28]
     4f8:	ee73 3a82 	vadd.f32	s7, s7, s4
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
     4fc:	ed93 2a0e 	vldr	s4, [r3, #56]	; 0x38
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
     500:	ee72 2a84 	vadd.f32	s5, s5, s8
     504:	ed90 4a01 	vldr	s8, [r0, #4]
     508:	ee33 3a27 	vadd.f32	s6, s6, s15
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
     50c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
     510:	ee73 3a85 	vadd.f32	s7, s7, s10
     514:	edd3 4a08 	vldr	s9, [r3, #32]
     518:	ee34 4a27 	vadd.f32	s8, s8, s15
     51c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
     520:	ee72 2aa5 	vadd.f32	s5, s5, s11
     524:	edd3 5a0d 	vldr	s11, [r3, #52]	; 0x34
     528:	ee73 3a81 	vadd.f32	s7, s7, s2
     52c:	ed93 1a0f 	vldr	s2, [r3, #60]	; 0x3c
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
     530:	ee34 4a25 	vadd.f32	s8, s8, s11
     534:	ed93 0a09 	vldr	s0, [r3, #36]	; 0x24
     538:	ee72 2a87 	vadd.f32	s5, s5, s14
     53c:	ed93 7a06 	vldr	s14, [r3, #24]
     540:	ee73 3aa1 	vadd.f32	s7, s7, s3
     544:	edd3 1a11 	vldr	s3, [r3, #68]	; 0x44
     548:	ee34 4a02 	vadd.f32	s8, s8, s4
     54c:	edd3 5a12 	vldr	s11, [r3, #72]	; 0x48
     550:	ed93 5a0a 	vldr	s10, [r3, #40]	; 0x28
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
     554:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     558:	ee73 3a87 	vadd.f32	s7, s7, s14
     55c:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
     560:	ee34 4a01 	vadd.f32	s8, s8, s2
        (*isr_reg) = ((BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU));
     564:	ed93 2a15 	vldr	s4, [r3, #84]	; 0x54
     568:	edd3 0a0b 	vldr	s1, [r3, #44]	; 0x2c
     56c:	ee73 3a86 	vadd.f32	s7, s7, s12
        __HAL_UNLOCK(hdma);
     570:	ed93 6a14 	vldr	s12, [r3, #80]	; 0x50
        hdma->State = HAL_DMA_STATE_READY;
     574:	ee34 4a27 	vadd.f32	s8, s8, s15
        return HAL_ERROR;
     578:	edd0 7a02 	vldr	s15, [r0, #8]
    if ((((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR & BDMA_CCR_CIRC) != 0U)
     57c:	ed93 1a17 	vldr	s2, [r3, #92]	; 0x5c
     580:	ee73 3aa4 	vadd.f32	s7, s7, s9
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
     584:	edd3 4a16 	vldr	s9, [r3, #88]	; 0x58
      cpltlevel_mask = BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU);
     588:	ee34 4a21 	vadd.f32	s8, s8, s3
     58c:	edd3 1a1b 	vldr	s3, [r3, #108]	; 0x6c
    isr_reg  = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
     590:	602e      	str	r6, [r5, #0]
    ifcr_reg = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
     592:	ee73 3a80 	vadd.f32	s7, s7, s0
     596:	ed93 0a1a 	vldr	s0, [r3, #104]	; 0x68
     59a:	ee34 4a25 	vadd.f32	s8, s8, s11
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
     59e:	edd3 5a18 	vldr	s11, [r3, #96]	; 0x60
     5a2:	ee77 7aa5 	vadd.f32	s15, s15, s11
      cpltlevel_mask = BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU);
     5a6:	edd3 5a1c 	vldr	s11, [r3, #112]	; 0x70
     5aa:	ee73 3a85 	vadd.f32	s7, s7, s10
     5ae:	ed93 5a19 	vldr	s10, [r3, #100]	; 0x64
     5b2:	ee34 4a07 	vadd.f32	s8, s8, s14
      (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
     5b6:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
     5ba:	ee77 7a85 	vadd.f32	s15, s15, s10
     5be:	ed93 5a1e 	vldr	s10, [r3, #120]	; 0x78
  return status;
     5c2:	ee73 3aa0 	vadd.f32	s7, s7, s1
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
     5c6:	edd3 0a1f 	vldr	s1, [r3, #124]	; 0x7c
     5ca:	ee34 4a06 	vadd.f32	s8, s8, s12

static inline void sub_collector_save(_sub_collector* collector, _auto_correlation_info info)
{
    collector->_fundamental = info;
    collector->_fundamental._harmonic = 1;
    collector->_first_period = sub_collector_period_of(collector, collector->_fundamental);
     5ce:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
     5d2:	ee77 7a80 	vadd.f32	s15, s15, s0
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
     5d6:	ed93 0a22 	vldr	s0, [r3, #136]	; 0x88
     5da:	ee86 aaa3 	vdiv.f32	s20, s13, s7
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
     5de:	ee77 7aa1 	vadd.f32	s15, s15, s3
     5e2:	edd3 1a24 	vldr	s3, [r3, #144]	; 0x90
	pb->buf[i++] = (BYTE)c;
     5e6:	ee34 4a02 	vadd.f32	s8, s8, s4
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
		i = (bw == (UINT)i) ? 0 : -1;
	}
	pb->idx = i;
	pb->nchr++;
     5ea:	ed93 2a21 	vldr	s4, [r3, #132]	; 0x84
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			if (!(f & 2)) {
				while (j++ < w) putc_bfd(&pb, ' ');
     5ee:	ee77 7aa5 	vadd.f32	s15, s15, s11
	pb->nchr++;
     5f2:	edd3 5a23 	vldr	s11, [r3, #140]	; 0x8c
				while (j++ < w) putc_bfd(&pb, ' ');
     5f6:	ee34 4a24 	vadd.f32	s8, s8, s9
     5fa:	edd0 4a03 	vldr	s9, [r0, #12]
     5fe:	ee77 7a87 	vadd.f32	s15, s15, s14
     602:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
     606:	ee74 4aa1 	vadd.f32	s9, s9, s3
     60a:	edd3 1a25 	vldr	s3, [r3, #148]	; 0x94
     60e:	ee34 4a01 	vadd.f32	s8, s8, s2
			}
			while (*p) putc_bfd(&pb, *p++);
			while (j++ < w) putc_bfd(&pb, ' ');
     612:	ed93 1a27 	vldr	s2, [r3, #156]	; 0x9c
			while (*p) putc_bfd(&pb, *p++);
     616:	ee77 7a85 	vadd.f32	s15, s15, s10
     61a:	ed93 5a29 	vldr	s10, [r3, #164]	; 0xa4
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
     61e:	ee74 4aa1 	vadd.f32	s9, s9, s3
     622:	edd3 1a2a 	vldr	s3, [r3, #168]	; 0xa8
		switch (d) {				/* Type is... */
     626:	eec6 9a84 	vdiv.f32	s19, s13, s8
     62a:	ee74 4a87 	vadd.f32	s9, s9, s14
     62e:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
     632:	ee77 7aa0 	vadd.f32	s15, s15, s1
     636:	edd3 0a2e 	vldr	s1, [r3, #184]	; 0xb8
	if (i < 0) return;
     63a:	ee74 4a81 	vadd.f32	s9, s9, s2
     63e:	ed93 1a2d 	vldr	s2, [r3, #180]	; 0xb4
	pb->buf[i++] = (BYTE)c;
     642:	ee77 7a86 	vadd.f32	s15, s15, s12
     646:	ed93 6a2c 	vldr	s12, [r3, #176]	; 0xb0
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
     64a:	ee74 4a87 	vadd.f32	s9, s9, s14
	pb->buf[i++] = (BYTE)c;
     64e:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
	pb->nchr++;
     652:	ee77 7a82 	vadd.f32	s15, s15, s4
	pb->idx = i;
     656:	ed93 2a2f 	vldr	s4, [r3, #188]	; 0xbc
	pb->nchr++;
     65a:	ee74 4a85 	vadd.f32	s9, s9, s10
     65e:	ed90 5a04 	vldr	s10, [r0, #16]
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
     662:	ee77 7a80 	vadd.f32	s15, s15, s0
     666:	ed93 0a31 	vldr	s0, [r3, #196]	; 0xc4
     66a:	ee74 4aa1 	vadd.f32	s9, s9, s3
		i = (bw == (UINT)i) ? 0 : -1;
     66e:	edd3 1a32 	vldr	s3, [r3, #200]	; 0xc8
     672:	ee77 7aa5 	vadd.f32	s15, s15, s11
     676:	edd3 5a30 	vldr	s11, [r3, #192]	; 0xc0
     67a:	ee35 5a25 	vadd.f32	s10, s10, s11
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			str[i++] = d + '0';
		} while (v && i < sizeof str / sizeof str[0]);
		if (f & 8) str[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
     67e:	edd3 5a34 	vldr	s11, [r3, #208]	; 0xd0
     682:	ee74 4a87 	vadd.f32	s9, s9, s14
	if (i < 0) return;
     686:	ed93 7a33 	vldr	s14, [r3, #204]	; 0xcc
	pb->buf[i++] = (BYTE)c;
     68a:	ee86 9aa7 	vdiv.f32	s18, s13, s15
     68e:	ee35 5a00 	vadd.f32	s10, s10, s0
     692:	ed93 0a37 	vldr	s0, [r3, #220]	; 0xdc
     696:	ee74 4a86 	vadd.f32	s9, s9, s12
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
     69a:	ed93 6a35 	vldr	s12, [r3, #212]	; 0xd4
	pb->nchr++;
     69e:	ee35 5a21 	vadd.f32	s10, s10, s3
     6a2:	edd3 1a36 	vldr	s3, [r3, #216]	; 0xd8
     6a6:	ee74 4a81 	vadd.f32	s9, s9, s2
	return EOF;
     6aa:	ed93 1a38 	vldr	s2, [r3, #224]	; 0xe0
	}

	va_end(arp);

	return putc_flush(&pb);
}
     6ae:	ee35 5a07 	vadd.f32	s10, s10, s14
     6b2:	ed93 7a39 	vldr	s14, [r3, #228]	; 0xe4
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
     6b6:	ee74 4aa0 	vadd.f32	s9, s9, s1
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
     6ba:	edd3 0a3a 	vldr	s1, [r3, #232]	; 0xe8
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
     6be:	ee35 5a25 	vadd.f32	s10, s10, s11
     6c2:	edd0 5a05 	vldr	s11, [r0, #20]
     6c6:	ee74 4a82 	vadd.f32	s9, s9, s4
		i = (bw == (UINT)i) ? 0 : -1;
     6ca:	ed93 2a3c 	vldr	s4, [r3, #240]	; 0xf0
     6ce:	ee35 5a06 	vadd.f32	s10, s10, s12
     6d2:	ed93 6a3b 	vldr	s12, [r3, #236]	; 0xec
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
     6d6:	ee75 5a82 	vadd.f32	s11, s11, s4
     6da:	ed93 2a3d 	vldr	s4, [r3, #244]	; 0xf4
     6de:	ed93 8a5a 	vldr	s16, [r3, #360]	; 0x168
		i = (bw == (UINT)i) ? 0 : -1;
     6e2:	eec6 8aa4 	vdiv.f32	s17, s13, s9
     6e6:	ee35 5a21 	vadd.f32	s10, s10, s3
     6ea:	edd3 1a3f 	vldr	s3, [r3, #252]	; 0xfc
				while (j++ < w) putc_bfd(&pb, ' ');
     6ee:	ee75 5a82 	vadd.f32	s11, s11, s4
     6f2:	ed93 2a3e 	vldr	s4, [r3, #248]	; 0xf8
     6f6:	ee35 5a00 	vadd.f32	s10, s10, s0
     6fa:	ed93 0a40 	vldr	s0, [r3, #256]	; 0x100
		totalGain[1] += partialsHigh[i];
		for (int j = 0; j < 3; j++)
		{
			for (int k = 0; k < 3; k++)
			{
				totalGain_s[j][k] += stringPartialGains[j][k][i];
     6fe:	ee75 5a82 	vadd.f32	s11, s11, s4
     702:	ed93 2a41 	vldr	s4, [r3, #260]	; 0x104
     706:	ee35 5a01 	vadd.f32	s10, s10, s2
     70a:	ed93 1a44 	vldr	s2, [r3, #272]	; 0x110
     70e:	ee75 5aa1 	vadd.f32	s11, s11, s3
     712:	edd3 1a43 	vldr	s3, [r3, #268]	; 0x10c
     716:	ee35 5a07 	vadd.f32	s10, s10, s14
     71a:	ed93 7a42 	vldr	s14, [r3, #264]	; 0x108
     71e:	ee75 5a80 	vadd.f32	s11, s11, s0
     722:	ed93 0a47 	vldr	s0, [r3, #284]	; 0x11c
     726:	ee35 5a20 	vadd.f32	s10, s10, s1
     72a:	edd3 0a45 	vldr	s1, [r3, #276]	; 0x114
     72e:	ee75 5a82 	vadd.f32	s11, s11, s4
     732:	ed93 2a46 	vldr	s4, [r3, #280]	; 0x118
     736:	ee35 5a06 	vadd.f32	s10, s10, s12
     73a:	ed90 6a06 	vldr	s12, [r0, #24]
     73e:	ee75 5a87 	vadd.f32	s11, s11, s14
     742:	ed93 7a48 	vldr	s14, [r3, #288]	; 0x120
     746:	ee36 6a07 	vadd.f32	s12, s12, s14
     74a:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
     74e:	ee75 5aa1 	vadd.f32	s11, s11, s3
     752:	edd3 1a4b 	vldr	s3, [r3, #300]	; 0x12c
     756:	ee36 6a07 	vadd.f32	s12, s12, s14
     75a:	ed93 7a4a 	vldr	s14, [r3, #296]	; 0x128
     75e:	ee75 5a81 	vadd.f32	s11, s11, s2
     762:	ed93 1a4d 	vldr	s2, [r3, #308]	; 0x134
     766:	ee36 6a07 	vadd.f32	s12, s12, s14
     76a:	ed93 7a4c 	vldr	s14, [r3, #304]	; 0x130
     76e:	ee75 5aa0 	vadd.f32	s11, s11, s1
     772:	edd3 0a50 	vldr	s1, [r3, #320]	; 0x140
     776:	ee36 6a21 	vadd.f32	s12, s12, s3
     77a:	edd3 1a51 	vldr	s3, [r3, #324]	; 0x144
     77e:	ee75 5a82 	vadd.f32	s11, s11, s4
     782:	ed93 2a4e 	vldr	s4, [r3, #312]	; 0x138
     786:	ee36 6a07 	vadd.f32	s12, s12, s14
     78a:	ed93 7a4f 	vldr	s14, [r3, #316]	; 0x13c
     78e:	ee75 5a80 	vadd.f32	s11, s11, s0
     792:	ed93 0a52 	vldr	s0, [r3, #328]	; 0x148
     796:	ee36 6a01 	vadd.f32	s12, s12, s2
     79a:	ed93 1a53 	vldr	s2, [r3, #332]	; 0x14c
     79e:	ee36 6a02 	vadd.f32	s12, s12, s4
     7a2:	ed93 2a54 	vldr	s4, [r3, #336]	; 0x150
     7a6:	ee36 6a07 	vadd.f32	s12, s12, s14
     7aa:	ed90 7a07 	vldr	s14, [r0, #28]
     7ae:	ee37 7a02 	vadd.f32	s14, s14, s4
     7b2:	ed93 2a55 	vldr	s4, [r3, #340]	; 0x154
     7b6:	ee36 6a20 	vadd.f32	s12, s12, s1
     7ba:	edd3 0a57 	vldr	s1, [r3, #348]	; 0x15c
     7be:	ee37 7a02 	vadd.f32	s14, s14, s4
     7c2:	ed93 2a56 	vldr	s4, [r3, #344]	; 0x158
     7c6:	ee36 6a21 	vadd.f32	s12, s12, s3
     7ca:	edd3 1a58 	vldr	s3, [r3, #352]	; 0x160
     7ce:	ee37 7a02 	vadd.f32	s14, s14, s4
     7d2:	ed93 2a59 	vldr	s4, [r3, #356]	; 0x164
     7d6:	ee36 6a00 	vadd.f32	s12, s12, s0
     7da:	ed93 0a5b 	vldr	s0, [r3, #364]	; 0x16c
     7de:	ed80 4a01 	vstr	s8, [r0, #4]
     7e2:	ee37 7a20 	vadd.f32	s14, s14, s1
     7e6:	ed93 4a60 	vldr	s8, [r3, #384]	; 0x180
     7ea:	e00d      	b.n	808 <audioInitAdditive+0x408>
     7ec:	200000d8 	.word	0x200000d8
     7f0:	20000ecc 	.word	0x20000ecc
     7f4:	20000090 	.word	0x20000090
     7f8:	200002f4 	.word	0x200002f4
     7fc:	20000ed4 	.word	0x20000ed4
     800:	20000ec8 	.word	0x20000ec8
     804:	3daaaaab 	.word	0x3daaaaab
     808:	edc0 7a02 	vstr	s15, [r0, #8]
     80c:	ee36 6a01 	vadd.f32	s12, s12, s2
     810:	edd0 7a08 	vldr	s15, [r0, #32]
     814:	ee37 7a21 	vadd.f32	s14, s14, s3
     818:	edc4 2a00 	vstr	s5, [r4]
     81c:	ee77 7a84 	vadd.f32	s15, s15, s8
     820:	edc0 3a00 	vstr	s7, [r0]
		for (int j = 0; j < 3; j++)
		{
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
		}
	}
	gainNormalizers[0] = 1.0f / totalGain[0];
     824:	eec6 1aa2 	vdiv.f32	s3, s13, s5
				totalGain_s[j][k] += stringPartialGains[j][k][i];
     828:	edd3 2a61 	vldr	s5, [r3, #388]	; 0x184
     82c:	edd3 3a62 	vldr	s7, [r3, #392]	; 0x188
     830:	edd3 0a5c 	vldr	s1, [r3, #368]	; 0x170
     834:	ed80 5a04 	vstr	s10, [r0, #16]
     838:	ed93 1a5d 	vldr	s2, [r3, #372]	; 0x174
     83c:	ee37 7a02 	vadd.f32	s14, s14, s4
     840:	ed84 3a01 	vstr	s6, [r4, #4]
     844:	ee77 7aa2 	vadd.f32	s15, s15, s5
     848:	ed93 4a5f 	vldr	s8, [r3, #380]	; 0x17c
	gainNormalizers[1] = 1.0f / totalGain[1];
     84c:	ee86 2a83 	vdiv.f32	s4, s13, s6
				totalGain_s[j][k] += stringPartialGains[j][k][i];
     850:	ed93 3a5e 	vldr	s6, [r3, #376]	; 0x178
     854:	edc0 4a03 	vstr	s9, [r0, #12]
     858:	edd3 4a67 	vldr	s9, [r3, #412]	; 0x19c
     85c:	edc0 5a05 	vstr	s11, [r0, #20]
     860:	ed80 6a06 	vstr	s12, [r0, #24]
     864:	ee37 7a08 	vadd.f32	s14, s14, s16
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
     868:	4cd3      	ldr	r4, [pc, #844]	; (bb8 <audioInitAdditive+0x7b8>)
				totalGain_s[j][k] += stringPartialGains[j][k][i];
     86a:	ee77 7aa3 	vadd.f32	s15, s15, s7
     86e:	edd3 3a64 	vldr	s7, [r3, #400]	; 0x190
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
     872:	ee86 8a85 	vdiv.f32	s16, s13, s10
				totalGain_s[j][k] += stringPartialGains[j][k][i];
     876:	ed93 5a63 	vldr	s10, [r3, #396]	; 0x18c
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
     87a:	ed84 aa00 	vstr	s20, [r4]
     87e:	edc4 9a01 	vstr	s19, [r4, #4]
     882:	ed84 9a02 	vstr	s18, [r4, #8]
     886:	edc4 8a03 	vstr	s17, [r4, #12]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
     88a:	ee37 7a00 	vadd.f32	s14, s14, s0
     88e:	ee77 7a85 	vadd.f32	s15, s15, s10
     892:	ed93 5a65 	vldr	s10, [r3, #404]	; 0x194
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
     896:	ee86 0aa5 	vdiv.f32	s0, s13, s11
				totalGain_s[j][k] += stringPartialGains[j][k][i];
     89a:	edd3 5a69 	vldr	s11, [r3, #420]	; 0x1a4
     89e:	ee37 7a20 	vadd.f32	s14, s14, s1
     8a2:	ee77 7aa3 	vadd.f32	s15, s15, s7
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
     8a6:	eec6 0a86 	vdiv.f32	s1, s13, s12
				totalGain_s[j][k] += stringPartialGains[j][k][i];
     8aa:	ed93 6a6a 	vldr	s12, [r3, #424]	; 0x1a8
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
     8ae:	ed84 8a04 	vstr	s16, [r4, #16]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
     8b2:	ee37 7a01 	vadd.f32	s14, s14, s2
     8b6:	ee77 7a85 	vadd.f32	s15, s15, s10
     8ba:	ed93 5a68 	vldr	s10, [r3, #416]	; 0x1a0
     8be:	ee37 7a03 	vadd.f32	s14, s14, s6
     8c2:	ee37 7a04 	vadd.f32	s14, s14, s8
     8c6:	ed93 4a66 	vldr	s8, [r3, #408]	; 0x198
     8ca:	ee77 7a84 	vadd.f32	s15, s15, s8
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
     8ce:	ee86 1a87 	vdiv.f32	s2, s13, s14
     8d2:	ed80 7a07 	vstr	s14, [r0, #28]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
     8d6:	ed93 7a6b 	vldr	s14, [r3, #428]	; 0x1ac
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
     8da:	ed84 0a05 	vstr	s0, [r4, #20]
     8de:	edc4 0a06 	vstr	s1, [r4, #24]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
     8e2:	ee77 7aa4 	vadd.f32	s15, s15, s9
     8e6:	ee77 7a85 	vadd.f32	s15, s15, s10
     8ea:	ee77 7aa5 	vadd.f32	s15, s15, s11
     8ee:	ee77 7a86 	vadd.f32	s15, s15, s12
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
     8f2:	ed84 1a07 	vstr	s2, [r4, #28]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
     8f6:	ee77 7a87 	vadd.f32	s15, s15, s14
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
     8fa:	eec6 2aa7 	vdiv.f32	s5, s13, s15
     8fe:	edc0 7a08 	vstr	s15, [r0, #32]
	gainNormalizers[0] = 1.0f / totalGain[0];
     902:	48ae      	ldr	r0, [pc, #696]	; (bbc <audioInitAdditive+0x7bc>)
     904:	edc0 1a00 	vstr	s3, [r0]
	gainNormalizers[1] = 1.0f / totalGain[1];
     908:	ed80 2a01 	vstr	s4, [r0, #4]
     90c:	f102 0030 	add.w	r0, r2, #48	; 0x30
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
     910:	edc4 2a08 	vstr	s5, [r4, #32]
		partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
		for (int j = 0; j < 3; j++)
		{
			for (int k = 0; k < 3; k++)
			{
				stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
     914:	edd3 7a00 	vldr	s15, [r3]
		partials[i] = partials[i] * gainNormalizers[0];
     918:	ed92 3a00 	vldr	s6, [r2]
				stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
     91c:	ee67 7a8a 	vmul.f32	s15, s15, s20
		partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
     920:	edd1 3a00 	vldr	s7, [r1]
		partials[i] = partials[i] * gainNormalizers[0];
     924:	ee21 3a83 	vmul.f32	s6, s3, s6
		partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
     928:	ee62 3a23 	vmul.f32	s7, s4, s7
				stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
     92c:	ece3 7a01 	vstmia	r3!, {s15}
     930:	ed93 4a0b 	vldr	s8, [r3, #44]	; 0x2c
     934:	edd3 4a17 	vldr	s9, [r3, #92]	; 0x5c
     938:	ed93 5a23 	vldr	s10, [r3, #140]	; 0x8c
     93c:	ee24 4a29 	vmul.f32	s8, s8, s19
     940:	edd3 5a2f 	vldr	s11, [r3, #188]	; 0xbc
     944:	ee64 4a89 	vmul.f32	s9, s9, s18
     948:	ed93 6a3b 	vldr	s12, [r3, #236]	; 0xec
     94c:	ee25 5a28 	vmul.f32	s10, s10, s17
     950:	edd3 6a47 	vldr	s13, [r3, #284]	; 0x11c
     954:	ee65 5a88 	vmul.f32	s11, s11, s16
     958:	ed93 7a53 	vldr	s14, [r3, #332]	; 0x14c
     95c:	ee26 6a00 	vmul.f32	s12, s12, s0
     960:	edd3 7a5f 	vldr	s15, [r3, #380]	; 0x17c
     964:	ee66 6aa0 	vmul.f32	s13, s13, s1
     968:	ee27 7a01 	vmul.f32	s14, s14, s2
		partials[i] = partials[i] * gainNormalizers[0];
     96c:	eca2 3a01 	vstmia	r2!, {s6}
				stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
     970:	ee67 7aa2 	vmul.f32	s15, s15, s5
	for (int i = 0; i < NUM_OVERTONES; i++)
     974:	4290      	cmp	r0, r2
		partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
     976:	ece1 3a01 	vstmia	r1!, {s7}
				stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
     97a:	ed83 4a0b 	vstr	s8, [r3, #44]	; 0x2c
     97e:	edc3 4a17 	vstr	s9, [r3, #92]	; 0x5c
     982:	ed83 5a23 	vstr	s10, [r3, #140]	; 0x8c
     986:	edc3 5a2f 	vstr	s11, [r3, #188]	; 0xbc
     98a:	ed83 6a3b 	vstr	s12, [r3, #236]	; 0xec
     98e:	edc3 6a47 	vstr	s13, [r3, #284]	; 0x11c
     992:	ed83 7a53 	vstr	s14, [r3, #332]	; 0x14c
     996:	edc3 7a5f 	vstr	s15, [r3, #380]	; 0x17c
	for (int i = 0; i < NUM_OVERTONES; i++)
     99a:	d1bb      	bne.n	914 <audioInitAdditive+0x514>
		  decayBs[i] = (1.0f/partialDecays[i]) - decayAf1[i];
		  for (int j = 0; j < 3; j++)
		  {
			  for (int k = 0; k < 2; k++)
			  {
				  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
     99c:	4b88      	ldr	r3, [pc, #544]	; (bc0 <audioInitAdditive+0x7c0>)
     99e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     9a2:	4c88      	ldr	r4, [pc, #544]	; (bc4 <audioInitAdditive+0x7c4>)
     9a4:	ed93 8a01 	vldr	s16, [r3, #4]
     9a8:	ed93 0a04 	vldr	s0, [r3, #16]
     9ac:	f104 0830 	add.w	r8, r4, #48	; 0x30
     9b0:	edd3 0a07 	vldr	s1, [r3, #28]
     9b4:	edd3 9a00 	vldr	s19, [r3]
     9b8:	ed93 6a02 	vldr	s12, [r3, #8]
     9bc:	ed93 9a03 	vldr	s18, [r3, #12]
     9c0:	ee78 4a69 	vsub.f32	s9, s16, s19
     9c4:	edd3 6a05 	vldr	s13, [r3, #20]
     9c8:	ee36 6a48 	vsub.f32	s12, s12, s16
     9cc:	edd3 8a06 	vldr	s17, [r3, #24]
     9d0:	ee30 5a49 	vsub.f32	s10, s0, s18
     9d4:	ed93 7a08 	vldr	s14, [r3, #32]
     9d8:	ee76 6ac0 	vsub.f32	s13, s13, s0
     9dc:	ee70 5ae8 	vsub.f32	s11, s1, s17
     9e0:	f8df c21c 	ldr.w	ip, [pc, #540]	; c00 <audioInitAdditive+0x800>
     9e4:	ee37 7a60 	vsub.f32	s14, s14, s1
     9e8:	4f77      	ldr	r7, [pc, #476]	; (bc8 <audioInitAdditive+0x7c8>)
     9ea:	eec7 daa4 	vdiv.f32	s27, s15, s9
     9ee:	4e77      	ldr	r6, [pc, #476]	; (bcc <audioInitAdditive+0x7cc>)
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
     9f0:	eddf aa77 	vldr	s21, [pc, #476]	; bd0 <audioInitAdditive+0x7d0>
		  decayAf1[i] = decayAfParts[i] * 123.0f;
     9f4:	ed9f aa77 	vldr	s20, [pc, #476]	; bd4 <audioInitAdditive+0x7d4>
     9f8:	4b77      	ldr	r3, [pc, #476]	; (bd8 <audioInitAdditive+0x7d8>)
     9fa:	4878      	ldr	r0, [pc, #480]	; (bdc <audioInitAdditive+0x7dc>)
     9fc:	ee87 da86 	vdiv.f32	s26, s15, s12
     a00:	4977      	ldr	r1, [pc, #476]	; (be0 <audioInitAdditive+0x7e0>)
     a02:	4a78      	ldr	r2, [pc, #480]	; (be4 <audioInitAdditive+0x7e4>)
				  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
     a04:	4d78      	ldr	r5, [pc, #480]	; (be8 <audioInitAdditive+0x7e8>)
     a06:	eec7 ca85 	vdiv.f32	s25, s15, s10
     a0a:	ee87 caa6 	vdiv.f32	s24, s15, s13
     a0e:	eec7 baa5 	vdiv.f32	s23, s15, s11
     a12:	ee87 ba87 	vdiv.f32	s22, s15, s14
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     a16:	edd3 4a0c 	vldr	s9, [r3, #48]	; 0x30
     a1a:	3304      	adds	r3, #4
     a1c:	ed53 2a01 	vldr	s5, [r3, #-4]
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
     a20:	ecb5 2a01 	vldmia	r5!, {s4}
     a24:	ecb4 6a01 	vldmia	r4!, {s12}
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     a28:	ee87 4aa4 	vdiv.f32	s8, s15, s9
     a2c:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
     a30:	ed93 5a2f 	vldr	s10, [r3, #188]	; 0xbc
	for (int i = 0; i < NUM_OVERTONES; i++)
     a34:	4544      	cmp	r4, r8
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     a36:	edd3 3a23 	vldr	s7, [r3, #140]	; 0x8c
     a3a:	ed93 7a3b 	vldr	s14, [r3, #236]	; 0xec
     a3e:	edd3 1a53 	vldr	s3, [r3, #332]	; 0x14c
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
     a42:	eec7 ea82 	vdiv.f32	s29, s15, s4
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     a46:	edd3 5a47 	vldr	s11, [r3, #284]	; 0x11c
     a4a:	ed93 3a5f 	vldr	s6, [r3, #380]	; 0x17c
     a4e:	ee87 2aa2 	vdiv.f32	s4, s15, s5
     a52:	eec7 4a85 	vdiv.f32	s9, s15, s10
     a56:	eec7 faa3 	vdiv.f32	s31, s15, s7
     a5a:	ee87 5aa1 	vdiv.f32	s10, s15, s3
     a5e:	eec7 3aa5 	vdiv.f32	s7, s15, s11
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
     a62:	eec7 5a86 	vdiv.f32	s11, s15, s12
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     a66:	ee87 6aa6 	vdiv.f32	s12, s15, s13
     a6a:	eec7 6a87 	vdiv.f32	s13, s15, s14
     a6e:	ee87 7a83 	vdiv.f32	s14, s15, s6
     a72:	ee74 1a42 	vsub.f32	s3, s8, s4
     a76:	ee35 3a63 	vsub.f32	s6, s10, s7
     a7a:	ee74 2aef 	vsub.f32	s5, s9, s31
     a7e:	ee61 1aad 	vmul.f32	s3, s3, s27
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
     a82:	ee75 5aee 	vsub.f32	s11, s11, s29
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     a86:	ee36 6a44 	vsub.f32	s12, s12, s8

				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     a8a:	ee29 1aa1 	vmul.f32	s2, s19, s3
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     a8e:	ece0 1a01 	vstmia	r0!, {s3}
     a92:	ee76 6ae4 	vsub.f32	s13, s13, s9
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
     a96:	ee65 5aaa 	vmul.f32	s11, s11, s21
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     a9a:	ee26 6a0d 	vmul.f32	s12, s12, s26
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     a9e:	eca1 1a01 	vstmia	r1!, {s2}

				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
     aa2:	ee32 2a41 	vsub.f32	s4, s4, s2
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     aa6:	ee37 7a45 	vsub.f32	s14, s14, s10
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
     aaa:	ecec 5a01 	vstmia	ip!, {s11}
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     aae:	ee62 2aac 	vmul.f32	s5, s5, s25
     ab2:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
     ab6:	ee66 6a8c 	vmul.f32	s13, s13, s24
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
     aba:	eca2 2a01 	vstmia	r2!, {s4}
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     abe:	ee27 7a0b 	vmul.f32	s14, s14, s22
     ac2:	ee23 3a2b 	vmul.f32	s6, s6, s23
     ac6:	edc0 2a17 	vstr	s5, [r0, #92]	; 0x5c
		  decayAf1[i] = decayAfParts[i] * 123.0f;
     aca:	ee25 fa8a 	vmul.f32	s30, s11, s20
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     ace:	edc0 6a23 	vstr	s13, [r0, #140]	; 0x8c
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     ad2:	ee28 ea06 	vmul.f32	s28, s16, s12
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     ad6:	ed80 7a3b 	vstr	s14, [r0, #236]	; 0xec
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     ada:	ee29 1a22 	vmul.f32	s2, s18, s5
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     ade:	ed80 3a2f 	vstr	s6, [r0, #188]	; 0xbc
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     ae2:	ee60 1a26 	vmul.f32	s3, s0, s13
		  decayAf1[i] = decayAfParts[i] * 123.0f;
     ae6:	eca7 fa01 	vstmia	r7!, {s30}
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     aea:	ee28 2a83 	vmul.f32	s4, s17, s6
     aee:	ed81 ea0b 	vstr	s28, [r1, #44]	; 0x2c
     af2:	ee20 6a87 	vmul.f32	s12, s1, s14
     af6:	ed81 1a17 	vstr	s2, [r1, #92]	; 0x5c
		  decayBs[i] = (1.0f/partialDecays[i]) - decayAf1[i];
     afa:	ee7e eacf 	vsub.f32	s29, s29, s30
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     afe:	edc1 1a23 	vstr	s3, [r1, #140]	; 0x8c
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
     b02:	ee34 4a4e 	vsub.f32	s8, s8, s28
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     b06:	ed81 2a2f 	vstr	s4, [r1, #188]	; 0xbc
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
     b0a:	ee7f 5ac1 	vsub.f32	s11, s31, s2
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     b0e:	ed81 6a3b 	vstr	s12, [r1, #236]	; 0xec
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
     b12:	ee74 4ae1 	vsub.f32	s9, s9, s3
		  decayBs[i] = (1.0f/partialDecays[i]) - decayAf1[i];
     b16:	ece6 ea01 	vstmia	r6!, {s29}
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
     b1a:	ee73 3ac2 	vsub.f32	s7, s7, s4
     b1e:	ed82 4a0b 	vstr	s8, [r2, #44]	; 0x2c
     b22:	ee35 5a46 	vsub.f32	s10, s10, s12
     b26:	edc2 5a17 	vstr	s11, [r2, #92]	; 0x5c
     b2a:	edc2 4a23 	vstr	s9, [r2, #140]	; 0x8c
     b2e:	edc2 3a2f 	vstr	s7, [r2, #188]	; 0xbc
     b32:	ed82 5a3b 	vstr	s10, [r2, #236]	; 0xec
	for (int i = 0; i < NUM_OVERTONES; i++)
     b36:	f47f af6e 	bne.w	a16 <audioInitAdditive+0x616>
     b3a:	4b2c      	ldr	r3, [pc, #176]	; (bec <audioInitAdditive+0x7ec>)
     b3c:	f04f 0900 	mov.w	r9, #0
     b40:	f8df b0c0 	ldr.w	fp, [pc, #192]	; c04 <audioInitAdditive+0x804>
     b44:	9301      	str	r3, [sp, #4]
     b46:	4b28      	ldr	r3, [pc, #160]	; (be8 <audioInitAdditive+0x7e8>)
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
	{
		for (int j = 0; j < NUM_OVERTONES; j++)
		{
			tCycle_init(&additive[i][j], &leaf);
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
     b48:	ed9f 9a29 	vldr	s18, [pc, #164]	; bf0 <audioInitAdditive+0x7f0>
     b4c:	f103 0830 	add.w	r8, r3, #48	; 0x30
     b50:	eddf 8a28 	vldr	s17, [pc, #160]	; bf4 <audioInitAdditive+0x7f4>
     b54:	ed9f 8a28 	vldr	s16, [pc, #160]	; bf8 <audioInitAdditive+0x7f8>
				  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
     b58:	9e01      	ldr	r6, [sp, #4]
     b5a:	465c      	mov	r4, fp
     b5c:	4d22      	ldr	r5, [pc, #136]	; (be8 <audioInitAdditive+0x7e8>)
			tCycle_init(&additive[i][j], &leaf);
     b5e:	f8df a0a8 	ldr.w	sl, [pc, #168]	; c08 <audioInitAdditive+0x808>
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
     b62:	4f26      	ldr	r7, [pc, #152]	; (bfc <audioInitAdditive+0x7fc>)
			tCycle_init(&additive[i][j], &leaf);
     b64:	4620      	mov	r0, r4
     b66:	4651      	mov	r1, sl
     b68:	f008 fd7e 	bl	9668 <__tCycle_init_veneer>
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
     b6c:	ecf5 0a01 	vldmia	r5!, {s1}
     b70:	4630      	mov	r0, r6
     b72:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
     b76:	ee60 0a89 	vmul.f32	s1, s1, s18
     b7a:	4653      	mov	r3, sl
     b7c:	eef0 1a68 	vmov.f32	s3, s17
     b80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b84:	eeb0 1a48 	vmov.f32	s2, s16
     b88:	4639      	mov	r1, r7
     b8a:	f008 fb81 	bl	9290 <__tADSRT_init_veneer>
		for (int j = 0; j < NUM_OVERTONES; j++)
     b8e:	4545      	cmp	r5, r8
     b90:	f104 0404 	add.w	r4, r4, #4
     b94:	f106 0604 	add.w	r6, r6, #4
     b98:	d1e4      	bne.n	b64 <audioInitAdditive+0x764>
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
     b9a:	9b01      	ldr	r3, [sp, #4]
     b9c:	f109 0912 	add.w	r9, r9, #18
     ba0:	f10b 0b48 	add.w	fp, fp, #72	; 0x48
     ba4:	3348      	adds	r3, #72	; 0x48
     ba6:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
     baa:	9301      	str	r3, [sp, #4]
     bac:	d1d4      	bne.n	b58 <audioInitAdditive+0x758>
		}
		//tExpSmooth_init(&stringFreqSmoothers[i],1.0f, 0.05f, &leaf);
	}
}
     bae:	b003      	add	sp, #12
     bb0:	ecbd 8b10 	vpop	{d8-d15}
     bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     bb8:	20000ea4 	.word	0x20000ea4
     bbc:	20000e9c 	.word	0x20000e9c
     bc0:	200002d0 	.word	0x200002d0
     bc4:	20000048 	.word	0x20000048
     bc8:	20000dc4 	.word	0x20000dc4
     bcc:	20000e54 	.word	0x20000e54
     bd0:	3b84a9fa 	.word	0x3b84a9fa
     bd4:	42f60000 	.word	0x42f60000
     bd8:	20000120 	.word	0x20000120
     bdc:	20000b84 	.word	0x20000b84
     be0:	20000a64 	.word	0x20000a64
     be4:	20000ca4 	.word	0x20000ca4
     be8:	20000000 	.word	0x20000000
     bec:	200009d4 	.word	0x200009d4
     bf0:	447a0000 	.word	0x447a0000
     bf4:	43160000 	.word	0x43160000
     bf8:	00000000 	.word	0x00000000
     bfc:	20000f24 	.word	0x20000f24
     c00:	20000e0c 	.word	0x20000e0c
     c04:	20000944 	.word	0x20000944
     c08:	20004fb8 	.word	0x20004fb8
     c0c:	f3af 8000 	nop.w
     c10:	f3af 8000 	nop.w
     c14:	f3af 8000 	nop.w
     c18:	f3af 8000 	nop.w
     c1c:	f3af 8000 	nop.w

00000c20 <audioFreeAdditive>:


void __ATTR_ITCMRAM audioFreeAdditive()
{

}
     c20:	4770      	bx	lr
     c22:	bf00      	nop
     c24:	f3af 8000 	nop.w
     c28:	f3af 8000 	nop.w
     c2c:	f3af 8000 	nop.w
     c30:	f3af 8000 	nop.w
     c34:	f3af 8000 	nop.w
     c38:	f3af 8000 	nop.w
     c3c:	f3af 8000 	nop.w

00000c40 <audioTickAdditive>:
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
}


float __ATTR_ITCMRAM audioTickAdditive(void)
{
     c40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c44:	4f68      	ldr	r7, [pc, #416]	; (de8 <audioTickAdditive+0x1a8>)
     c46:	4d69      	ldr	r5, [pc, #420]	; (dec <audioTickAdditive+0x1ac>)
     c48:	463c      	mov	r4, r7
     c4a:	f107 0630 	add.w	r6, r7, #48	; 0x30
     c4e:	ed2d 8b0a 	vpush	{d8-d12}
	float tempSamp = 0.0f;
	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
     c52:	4628      	mov	r0, r5
	for (int i = 0; i < 12; i++)
     c54:	3504      	adds	r5, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
     c56:	f008 fc6b 	bl	9530 <__tExpSmooth_tick_veneer>
     c5a:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
     c5e:	42b4      	cmp	r4, r6
     c60:	d1f7      	bne.n	c52 <audioTickAdditive+0x12>
	}

	float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
     c62:	4863      	ldr	r0, [pc, #396]	; (df0 <audioTickAdditive+0x1b0>)
     c64:	f008 fd80 	bl	9768 <__tNoise_tick_veneer>
     c68:	4862      	ldr	r0, [pc, #392]	; (df4 <audioTickAdditive+0x1b4>)
     c6a:	f008 fba5 	bl	93b8 <__tVZFilter_tickEfficient_veneer>
	filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
     c6e:	4860      	ldr	r0, [pc, #384]	; (df0 <audioTickAdditive+0x1b0>)
	float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
     c70:	eeb0 ca40 	vmov.f32	s24, s0
	filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
     c74:	f008 fd78 	bl	9768 <__tNoise_tick_veneer>
     c78:	485f      	ldr	r0, [pc, #380]	; (df8 <audioTickAdditive+0x1b8>)
     c7a:	f008 fb9d 	bl	93b8 <__tVZFilter_tickEfficient_veneer>


	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
     c7e:	485f      	ldr	r0, [pc, #380]	; (dfc <audioTickAdditive+0x1bc>)
	filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
     c80:	eeb0 8a40 	vmov.f32	s16, s0
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
     c84:	f008 fc54 	bl	9530 <__tExpSmooth_tick_veneer>
	//float Env2 = 0.0f;
	for (int i = 0; i < numStringsThisBoard; i++)
     c88:	4b5d      	ldr	r3, [pc, #372]	; (e00 <audioTickAdditive+0x1c0>)
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
     c8a:	eef0 ca40 	vmov.f32	s25, s0
	float tempSamp = 0.0f;
     c8e:	ed9f 9a5d 	vldr	s18, [pc, #372]	; e04 <audioTickAdditive+0x1c4>
	for (int i = 0; i < numStringsThisBoard; i++)
     c92:	781b      	ldrb	r3, [r3, #0]
     c94:	2b00      	cmp	r3, #0
     c96:	d072      	beq.n	d7e <audioTickAdditive+0x13e>
	filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
     c98:	ee3c ca08 	vadd.f32	s24, s24, s16
     c9c:	f8df b194 	ldr.w	fp, [pc, #404]	; e34 <audioTickAdditive+0x1f4>
		tempSamp += filtNoise * noiseEnv * knobScaled[7];
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
		for (int j = 0; j < NUM_OVERTONES; j++)
		{
			float thisEnv = tADSRT_tick(&additiveEnv[i][j]);
			float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[4]* 0.003f * j) + 1.0f);// * ((Env2 * knobScaled[5])+ 1.0f);
     ca0:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
     ca4:	f8df 8190 	ldr.w	r8, [pc, #400]	; e38 <audioTickAdditive+0x1f8>
			//float tempFreq = 0.0f;
			float tempGain = ((tempFreq - 15000.0f) * 0.00025f);
			//float tempGain = LEAF_map(tempFreq, 15000.0f, 19000.0f, 0.0, 1.0f);
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
     ca8:	eeb0 aa49 	vmov.f32	s20, s18
     cac:	f8df a18c 	ldr.w	sl, [pc, #396]	; e3c <audioTickAdditive+0x1fc>
			float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[4]* 0.003f * j) + 1.0f);// * ((Env2 * knobScaled[5])+ 1.0f);
     cb0:	eddf ba55 	vldr	s23, [pc, #340]	; e08 <audioTickAdditive+0x1c8>
	for (int i = 0; i < numStringsThisBoard; i++)
     cb4:	f04f 0900 	mov.w	r9, #0
			float tempGain = ((tempFreq - 15000.0f) * 0.00025f);
     cb8:	ed9f ba54 	vldr	s22, [pc, #336]	; e0c <audioTickAdditive+0x1cc>
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
     cbc:	eddf aa54 	vldr	s21, [pc, #336]	; e10 <audioTickAdditive+0x1d0>
		float noiseEnv = tADSRT_tick(&fenvelopes[i]); //noise envelope
     cc0:	4b54      	ldr	r3, [pc, #336]	; (e14 <audioTickAdditive+0x1d4>)
     cc2:	ea4f 0489 	mov.w	r4, r9, lsl #2
     cc6:	eb09 05c9 	add.w	r5, r9, r9, lsl #3
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
     cca:	4656      	mov	r6, sl
		float noiseEnv = tADSRT_tick(&fenvelopes[i]); //noise envelope
     ccc:	eb03 0089 	add.w	r0, r3, r9, lsl #2
     cd0:	f008 fca2 	bl	9618 <__tADSRT_tick_veneer>
		tempSamp += filtNoise * noiseEnv * knobScaled[7];
     cd4:	edd7 7a07 	vldr	s15, [r7, #28]
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
     cd8:	4b4f      	ldr	r3, [pc, #316]	; (e18 <audioTickAdditive+0x1d8>)
		tempSamp += filtNoise * noiseEnv * knobScaled[7];
     cda:	ee6c 7a27 	vmul.f32	s15, s24, s15
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
     cde:	441c      	add	r4, r3
		tempSamp += filtNoise * noiseEnv * knobScaled[7];
     ce0:	eea0 9a27 	vfma.f32	s18, s0, s15
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
     ce4:	ed94 7a00 	vldr	s14, [r4]
     ce8:	ecbb 0a01 	vldmia	fp!, {s0}
		for (int j = 0; j < NUM_OVERTONES; j++)
     cec:	2400      	movs	r4, #0
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
     cee:	ee37 0a00 	vadd.f32	s0, s14, s0
     cf2:	f008 fb41 	bl	9378 <__mtof_veneer>
     cf6:	4b49      	ldr	r3, [pc, #292]	; (e1c <audioTickAdditive+0x1dc>)
     cf8:	eca8 0a01 	vstmia	r8!, {s0}
		for (int j = 0; j < NUM_OVERTONES; j++)
     cfc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
			float thisEnv = tADSRT_tick(&additiveEnv[i][j]);
     d00:	4630      	mov	r0, r6
		for (int j = 0; j < NUM_OVERTONES; j++)
     d02:	3604      	adds	r6, #4
			float thisEnv = tADSRT_tick(&additiveEnv[i][j]);
     d04:	f008 fc88 	bl	9618 <__tADSRT_tick_veneer>
     d08:	ee07 4a10 	vmov	s14, r4
			float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[4]* 0.003f * j) + 1.0f);// * ((Env2 * knobScaled[5])+ 1.0f);
     d0c:	3401      	adds	r4, #1
     d0e:	edd7 7a04 	vldr	s15, [r7, #16]
     d12:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
     d16:	ed18 6a01 	vldr	s12, [r8, #-4]
     d1a:	ee06 4a90 	vmov	s13, r4
     d1e:	ee67 7aab 	vmul.f32	s15, s15, s23
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
     d22:	eef0 0a69 	vmov.f32	s1, s19
			float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[4]* 0.003f * j) + 1.0f);// * ((Env2 * knobScaled[5])+ 1.0f);
     d26:	eeb8 8ae6 	vcvt.f32.s32	s16, s13
     d2a:	eef0 6a69 	vmov.f32	s13, s19
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
     d2e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
			float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[4]* 0.003f * j) + 1.0f);// * ((Env2 * knobScaled[5])+ 1.0f);
     d32:	ee28 8a06 	vmul.f32	s16, s16, s12
     d36:	eee7 6a27 	vfma.f32	s13, s14, s15
			float thisEnv = tADSRT_tick(&additiveEnv[i][j]);
     d3a:	eef0 8a40 	vmov.f32	s17, s0
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
     d3e:	eeb0 0a4a 	vmov.f32	s0, s20
			float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[4]* 0.003f * j) + 1.0f);// * ((Env2 * knobScaled[5])+ 1.0f);
     d42:	ee28 8a26 	vmul.f32	s16, s16, s13
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
     d46:	ee7b 7a48 	vsub.f32	s15, s22, s16
     d4a:	eee7 0aaa 	vfma.f32	s1, s15, s21
     d4e:	f008 fba3 	bl	9498 <__LEAF_clip_veneer>
			tCycle_setFreq(&additive[i][j], tempFreq);
     d52:	4628      	mov	r0, r5
     d54:	eeb0 0a48 	vmov.f32	s0, s16
     d58:	f008 fa92 	bl	9280 <__tCycle_setFreq_veneer>
			//float upRamp = (j * invNumOvertones);
			//float downRamp = 1.0f - (j * invNumOvertones);
			//float freqWeight = (upRamp * knobScaled[0]) + (downRamp * (1.0f - knobScaled[0]));
			tempSamp += tCycle_tick(&additive[i][j]) * thisEnv;// * freqWeight;
     d5c:	4628      	mov	r0, r5
     d5e:	f008 fbdf 	bl	9520 <__tCycle_tick_veneer>
		for (int j = 0; j < NUM_OVERTONES; j++)
     d62:	2c0c      	cmp	r4, #12
			tempSamp += tCycle_tick(&additive[i][j]) * thisEnv;// * freqWeight;
     d64:	eea0 9a28 	vfma.f32	s18, s0, s17
		for (int j = 0; j < NUM_OVERTONES; j++)
     d68:	f105 0504 	add.w	r5, r5, #4
     d6c:	d1c8      	bne.n	d00 <audioTickAdditive+0xc0>
	for (int i = 0; i < numStringsThisBoard; i++)
     d6e:	4b24      	ldr	r3, [pc, #144]	; (e00 <audioTickAdditive+0x1c0>)
     d70:	f109 0901 	add.w	r9, r9, #1
     d74:	f10a 0a48 	add.w	sl, sl, #72	; 0x48
     d78:	781b      	ldrb	r3, [r3, #0]
     d7a:	454b      	cmp	r3, r9
     d7c:	dca0      	bgt.n	cc0 <audioTickAdditive+0x80>
		}


	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
     d7e:	ed9f 0a28 	vldr	s0, [pc, #160]	; e20 <audioTickAdditive+0x1e0>
     d82:	eddf 7a28 	vldr	s15, [pc, #160]	; e24 <audioTickAdditive+0x1e4>
     d86:	eef0 0a40 	vmov.f32	s1, s0
     d8a:	ed9f 1a27 	vldr	s2, [pc, #156]	; e28 <audioTickAdditive+0x1e8>
     d8e:	eeec 0aa7 	vfma.f32	s1, s25, s15
     d92:	f008 fb81 	bl	9498 <__LEAF_clip_veneer>
	//float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
	int volIdxInt = (int) volIdx;
     d96:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	int volIdxIntPlus = (volIdxInt + 1) & 127;
	float omAlpha = 1.0f - alpha;
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
	tempSamp *= outVol;
	tempSamp *= masterVolFromBrain;
     d9a:	4924      	ldr	r1, [pc, #144]	; (e2c <audioTickAdditive+0x1ec>)
	float omAlpha = 1.0f - alpha;
     d9c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
     da0:	4a23      	ldr	r2, [pc, #140]	; (e30 <audioTickAdditive+0x1f0>)
	int volIdxInt = (int) volIdx;
     da2:	ee17 3a10 	vmov	r3, s14
	float alpha = volIdx-volIdxInt;
     da6:	edd1 6a00 	vldr	s13, [r1]
     daa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	int volIdxIntPlus = (volIdxInt + 1) & 127;
     dae:	1c59      	adds	r1, r3, #1
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
     db0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	float omAlpha = 1.0f - alpha;
     db4:	ee77 7ac0 	vsub.f32	s15, s15, s0
	int volIdxIntPlus = (volIdxInt + 1) & 127;
     db8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float alpha = volIdx-volIdxInt;
     dbc:	ee30 0a47 	vsub.f32	s0, s0, s14
     dc0:	ee29 9a26 	vmul.f32	s18, s18, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
     dc4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	float omAlpha = 1.0f - alpha;
     dc8:	ee77 7a87 	vadd.f32	s15, s15, s14
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
     dcc:	ed93 7a00 	vldr	s14, [r3]
     dd0:	edd2 6a00 	vldr	s13, [r2]
     dd4:	ee20 0a26 	vmul.f32	s0, s0, s13
     dd8:	eea7 0a27 	vfma.f32	s0, s14, s15
	return tempSamp;
}
     ddc:	ee29 0a00 	vmul.f32	s0, s18, s0
     de0:	ecbd 8b0a 	vpop	{d8-d12}
     de4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     de8:	20004f54 	.word	0x20004f54
     dec:	20004f84 	.word	0x20004f84
     df0:	20005010 	.word	0x20005010
     df4:	20005018 	.word	0x20005018
     df8:	2000501c 	.word	0x2000501c
     dfc:	20013f80 	.word	0x20013f80
     e00:	200004b1 	.word	0x200004b1
     e04:	00000000 	.word	0x00000000
     e08:	3b449ba6 	.word	0x3b449ba6
     e0c:	466a6000 	.word	0x466a6000
     e10:	3983126f 	.word	0x3983126f
     e14:	20004f30 	.word	0x20004f30
     e18:	20013f48 	.word	0x20013f48
     e1c:	20000944 	.word	0x20000944
     e20:	423c0000 	.word	0x423c0000
     e24:	42a00000 	.word	0x42a00000
     e28:	42fe0000 	.word	0x42fe0000
     e2c:	200004a8 	.word	0x200004a8
     e30:	2000051c 	.word	0x2000051c
     e34:	20013f50 	.word	0x20013f50
     e38:	20013f00 	.word	0x20013f00
     e3c:	200009d4 	.word	0x200009d4

00000e40 <audioFrameAdditive>:
	uint32_t tempCountFrame = DWT->CYCCNT;
     e40:	4bc0      	ldr	r3, [pc, #768]	; (1144 <audioFrameAdditive+0x304>)
{
     e42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (resetStringInputs)
     e46:	4fc0      	ldr	r7, [pc, #768]	; (1148 <audioFrameAdditive+0x308>)
{
     e48:	ed2d 8b10 	vpush	{d8-d15}
	uint32_t tempCountFrame = DWT->CYCCNT;
     e4c:	685b      	ldr	r3, [r3, #4]
{
     e4e:	b091      	sub	sp, #68	; 0x44
	uint32_t tempCountFrame = DWT->CYCCNT;
     e50:	9308      	str	r3, [sp, #32]
	if (resetStringInputs)
     e52:	783b      	ldrb	r3, [r7, #0]
{
     e54:	9009      	str	r0, [sp, #36]	; 0x24
	if (resetStringInputs)
     e56:	2b00      	cmp	r3, #0
     e58:	f040 8086 	bne.w	f68 <audioFrameAdditive+0x128>
     e5c:	4bbb      	ldr	r3, [pc, #748]	; (114c <audioFrameAdditive+0x30c>)
     e5e:	9307      	str	r3, [sp, #28]
	if (newPluck)
     e60:	681b      	ldr	r3, [r3, #0]
     e62:	2b00      	cmp	r3, #0
     e64:	d04c      	beq.n	f00 <audioFrameAdditive+0xc0>
		for (int i = 0; i < numStringsThisBoard; i++)
     e66:	f8df b34c 	ldr.w	fp, [pc, #844]	; 11b4 <audioFrameAdditive+0x374>
     e6a:	f89b 2000 	ldrb.w	r2, [fp]
     e6e:	2a00      	cmp	r2, #0
     e70:	d043      	beq.n	efa <audioFrameAdditive+0xba>
     e72:	4bb7      	ldr	r3, [pc, #732]	; (1150 <audioFrameAdditive+0x310>)
     e74:	2600      	movs	r6, #0
     e76:	f8df a340 	ldr.w	sl, [pc, #832]	; 11b8 <audioFrameAdditive+0x378>
     e7a:	9304      	str	r3, [sp, #16]
     e7c:	4bb5      	ldr	r3, [pc, #724]	; (1154 <audioFrameAdditive+0x314>)
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
     e7e:	eddf cab6 	vldr	s25, [pc, #728]	; 1158 <audioFrameAdditive+0x318>
     e82:	9303      	str	r3, [sp, #12]
     e84:	4bb5      	ldr	r3, [pc, #724]	; (115c <audioFrameAdditive+0x31c>)
     e86:	ed9f aab6 	vldr	s20, [pc, #728]	; 1160 <audioFrameAdditive+0x320>
     e8a:	9306      	str	r3, [sp, #24]
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
     e8c:	ed9f fab5 	vldr	s30, [pc, #724]	; 1164 <audioFrameAdditive+0x324>
     e90:	4bb5      	ldr	r3, [pc, #724]	; (1168 <audioFrameAdditive+0x328>)
     e92:	eddf fab6 	vldr	s31, [pc, #728]	; 116c <audioFrameAdditive+0x32c>
     e96:	9305      	str	r3, [sp, #20]
     e98:	f8cd a004 	str.w	sl, [sp, #4]
     e9c:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
     ea0:	9b01      	ldr	r3, [sp, #4]
     ea2:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
     ea6:	b29b      	uxth	r3, r3
     ea8:	b933      	cbnz	r3, eb8 <audioFrameAdditive+0x78>
     eaa:	4bb1      	ldr	r3, [pc, #708]	; (1170 <audioFrameAdditive+0x330>)
     eac:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
     eb0:	b29b      	uxth	r3, r3
     eb2:	2b00      	cmp	r3, #0
     eb4:	f040 8094 	bne.w	fe0 <audioFrameAdditive+0x1a0>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
     eb8:	9b01      	ldr	r3, [sp, #4]
     eba:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
     ebe:	b29b      	uxth	r3, r3
     ec0:	b12b      	cbz	r3, ece <audioFrameAdditive+0x8e>
     ec2:	4bab      	ldr	r3, [pc, #684]	; (1170 <audioFrameAdditive+0x330>)
     ec4:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
     ec8:	b29b      	uxth	r3, r3
     eca:	2b00      	cmp	r3, #0
     ecc:	d078      	beq.n	fc0 <audioFrameAdditive+0x180>
		for (int i = 0; i < numStringsThisBoard; i++)
     ece:	9b04      	ldr	r3, [sp, #16]
			previousStringInputs[i] = stringInputs[i];
     ed0:	9901      	ldr	r1, [sp, #4]
		for (int i = 0; i < numStringsThisBoard; i++)
     ed2:	3304      	adds	r3, #4
     ed4:	9304      	str	r3, [sp, #16]
     ed6:	9b03      	ldr	r3, [sp, #12]
     ed8:	3348      	adds	r3, #72	; 0x48
     eda:	9303      	str	r3, [sp, #12]
     edc:	9b06      	ldr	r3, [sp, #24]
     ede:	3304      	adds	r3, #4
     ee0:	9306      	str	r3, [sp, #24]
     ee2:	9b05      	ldr	r3, [sp, #20]
     ee4:	3304      	adds	r3, #4
     ee6:	9305      	str	r3, [sp, #20]
			previousStringInputs[i] = stringInputs[i];
     ee8:	4ba1      	ldr	r3, [pc, #644]	; (1170 <audioFrameAdditive+0x330>)
     eea:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
     eee:	b29b      	uxth	r3, r3
     ef0:	f821 3016 	strh.w	r3, [r1, r6, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
     ef4:	3601      	adds	r6, #1
     ef6:	42b2      	cmp	r2, r6
     ef8:	dcd2      	bgt.n	ea0 <audioFrameAdditive+0x60>
		newPluck = 0;
     efa:	2300      	movs	r3, #0
     efc:	9a07      	ldr	r2, [sp, #28]
     efe:	6013      	str	r3, [r2, #0]
     f00:	4c9c      	ldr	r4, [pc, #624]	; (1174 <audioFrameAdditive+0x334>)
     f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
     f04:	f504 7500 	add.w	r5, r4, #512	; 0x200
		current_sample = (int32_t)(audioTickAdditive() * TWO_TO_23);
     f08:	ed9f 8a9b 	vldr	s16, [pc, #620]	; 1178 <audioFrameAdditive+0x338>
     f0c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
     f10:	eb05 0583 	add.w	r5, r5, r3, lsl #2
     f14:	f7ff fe94 	bl	c40 <audioTickAdditive>
     f18:	ee20 0a08 	vmul.f32	s0, s0, s16
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
     f1c:	3408      	adds	r4, #8
		current_sample = (int32_t)(audioTickAdditive() * TWO_TO_23);
     f1e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
     f22:	42ac      	cmp	r4, r5
		current_sample = (int32_t)(audioTickAdditive() * TWO_TO_23);
     f24:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[buffer_offset + i + 1] = current_sample;
     f28:	e944 3302 	strd	r3, r3, [r4, #-8]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
     f2c:	d1f2      	bne.n	f14 <audioFrameAdditive+0xd4>
	if (switchStrings)
     f2e:	4c93      	ldr	r4, [pc, #588]	; (117c <audioFrameAdditive+0x33c>)
     f30:	6823      	ldr	r3, [r4, #0]
     f32:	2b00      	cmp	r3, #0
     f34:	d140      	bne.n	fb8 <audioFrameAdditive+0x178>
	switchStrings = 0;
     f36:	2200      	movs	r2, #0
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
     f38:	4891      	ldr	r0, [pc, #580]	; (1180 <audioFrameAdditive+0x340>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
     f3a:	4b82      	ldr	r3, [pc, #520]	; (1144 <audioFrameAdditive+0x304>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
     f3c:	ed90 7a00 	vldr	s14, [r0]
	switchStrings = 0;
     f40:	6022      	str	r2, [r4, #0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
     f42:	9808      	ldr	r0, [sp, #32]
     f44:	685b      	ldr	r3, [r3, #4]
     f46:	498f      	ldr	r1, [pc, #572]	; (1184 <audioFrameAdditive+0x344>)
     f48:	1a1b      	subs	r3, r3, r0
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
     f4a:	4a8f      	ldr	r2, [pc, #572]	; (1188 <audioFrameAdditive+0x348>)
     f4c:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
     f50:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
     f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
     f56:	ee67 7a87 	vmul.f32	s15, s15, s14
     f5a:	edc2 7a00 	vstr	s15, [r2]
}
     f5e:	b011      	add	sp, #68	; 0x44
     f60:	ecbd 8b10 	vpop	{d8-d15}
     f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (int i = 0; i < numStringsThisBoard; i++)
     f68:	f8df b248 	ldr.w	fp, [pc, #584]	; 11b4 <audioFrameAdditive+0x374>
     f6c:	f89b 3000 	ldrb.w	r3, [fp]
     f70:	b1d3      	cbz	r3, fa8 <audioFrameAdditive+0x168>
     f72:	2500      	movs	r5, #0
     f74:	4e76      	ldr	r6, [pc, #472]	; (1150 <audioFrameAdditive+0x310>)
     f76:	4c85      	ldr	r4, [pc, #532]	; (118c <audioFrameAdditive+0x34c>)
     f78:	f8df a23c 	ldr.w	sl, [pc, #572]	; 11b8 <audioFrameAdditive+0x378>
			previousStringInputs[i] = 0;
     f7c:	46a8      	mov	r8, r5
     f7e:	f1a4 0930 	sub.w	r9, r4, #48	; 0x30
				tADSRT_clear(&additiveEnv[i][j]);
     f82:	4648      	mov	r0, r9
			for (int j = 0; j < NUM_OVERTONES; j++)
     f84:	f109 0904 	add.w	r9, r9, #4
				tADSRT_clear(&additiveEnv[i][j]);
     f88:	f008 f9c6 	bl	9318 <__tADSRT_clear_veneer>
			for (int j = 0; j < NUM_OVERTONES; j++)
     f8c:	454c      	cmp	r4, r9
     f8e:	d1f8      	bne.n	f82 <audioFrameAdditive+0x142>
			tADSRT_clear(&fenvelopes[i]);
     f90:	4630      	mov	r0, r6
		for (int i = 0; i < numStringsThisBoard; i++)
     f92:	3448      	adds	r4, #72	; 0x48
			tADSRT_clear(&fenvelopes[i]);
     f94:	f008 f9c0 	bl	9318 <__tADSRT_clear_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
     f98:	f89b 3000 	ldrb.w	r3, [fp]
			previousStringInputs[i] = 0;
     f9c:	f82a 8015 	strh.w	r8, [sl, r5, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
     fa0:	3501      	adds	r5, #1
     fa2:	3604      	adds	r6, #4
     fa4:	42ab      	cmp	r3, r5
     fa6:	dcea      	bgt.n	f7e <audioFrameAdditive+0x13e>
		resetStringInputs = 0;
     fa8:	2300      	movs	r3, #0
		newPluck = 1;
     faa:	4a68      	ldr	r2, [pc, #416]	; (114c <audioFrameAdditive+0x30c>)
		resetStringInputs = 0;
     fac:	703b      	strb	r3, [r7, #0]
		newPluck = 1;
     fae:	2301      	movs	r3, #1
     fb0:	9207      	str	r2, [sp, #28]
     fb2:	6013      	str	r3, [r2, #0]
     fb4:	4613      	mov	r3, r2
     fb6:	e753      	b.n	e60 <audioFrameAdditive+0x20>
		switchStringModel(switchStrings);
     fb8:	6820      	ldr	r0, [r4, #0]
     fba:	f000 faf1 	bl	15a0 <switchStringModel>
     fbe:	e7ba      	b.n	f36 <audioFrameAdditive+0xf6>
     fc0:	9b03      	ldr	r3, [sp, #12]
     fc2:	461d      	mov	r5, r3
     fc4:	f103 0430 	add.w	r4, r3, #48	; 0x30
					tADSRT_off(&additiveEnv[i][j]);
     fc8:	4628      	mov	r0, r5
				for (int j = 0; j < NUM_OVERTONES; j++)
     fca:	3504      	adds	r5, #4
					tADSRT_off(&additiveEnv[i][j]);
     fcc:	f008 faec 	bl	95a8 <__tADSRT_off_veneer>
				for (int j = 0; j < NUM_OVERTONES; j++)
     fd0:	42ac      	cmp	r4, r5
     fd2:	d1f9      	bne.n	fc8 <audioFrameAdditive+0x188>
				tADSRT_off(&fenvelopes[i]);
     fd4:	9804      	ldr	r0, [sp, #16]
     fd6:	f008 fae7 	bl	95a8 <__tADSRT_off_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
     fda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     fdc:	781a      	ldrb	r2, [r3, #0]
     fde:	e776      	b.n	ece <audioFrameAdditive+0x8e>
				float amplitz = stringInputs[i] * 0.000015259021897f;
     fe0:	4b63      	ldr	r3, [pc, #396]	; (1170 <audioFrameAdditive+0x330>)
     fe2:	eddf 7a6b 	vldr	s15, [pc, #428]	; 1190 <audioFrameAdditive+0x350>
     fe6:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
				stringOctave[i] = octave;
     fea:	9c06      	ldr	r4, [sp, #24]
				float amplitz = stringInputs[i] * 0.000015259021897f;
     fec:	b29b      	uxth	r3, r3
				tADSRT_on(&fenvelopes[i], amplitz);
     fee:	9804      	ldr	r0, [sp, #16]
				float fakedFreq = stringFrequencies[i] * ((knobScaled[2] * 3.5f) + 0.5f);
     ff0:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 11bc <audioFrameAdditive+0x37c>
				float amplitz = stringInputs[i] * 0.000015259021897f;
     ff4:	ee0c 3a10 	vmov	s24, r3
				stringOctave[i] = octave;
     ff8:	4b66      	ldr	r3, [pc, #408]	; (1194 <audioFrameAdditive+0x354>)
				float amplitz = stringInputs[i] * 0.000015259021897f;
     ffa:	eeb8 cacc 	vcvt.f32.s32	s24, s24
				stringOctave[i] = octave;
     ffe:	681b      	ldr	r3, [r3, #0]
    1000:	6023      	str	r3, [r4, #0]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    1002:	ee2c ca27 	vmul.f32	s24, s24, s15
				tADSRT_on(&fenvelopes[i], amplitz);
    1006:	eeb0 0a4c 	vmov.f32	s0, s24
    100a:	f008 fb21 	bl	9650 <__tADSRT_on_veneer>
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    100e:	4b62      	ldr	r3, [pc, #392]	; (1198 <audioFrameAdditive+0x358>)
    1010:	edd4 7a00 	vldr	s15, [r4]
    1014:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    1018:	ed93 0a00 	vldr	s0, [r3]
    101c:	ee30 0a27 	vadd.f32	s0, s0, s15
    1020:	f008 f9aa 	bl	9378 <__mtof_veneer>
				float fakedFreq = stringFrequencies[i] * ((knobScaled[2] * 3.5f) + 0.5f);
    1024:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
    1028:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    102c:	9b05      	ldr	r3, [sp, #20]
				float fakedFreq = stringFrequencies[i] * ((knobScaled[2] * 3.5f) + 0.5f);
    102e:	eddb 6a02 	vldr	s13, [fp, #8]
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    1032:	ed83 0a00 	vstr	s0, [r3]
				float fakedFreq = stringFrequencies[i] * ((knobScaled[2] * 3.5f) + 0.5f);
    1036:	eee6 7a87 	vfma.f32	s15, s13, s14
				int thisString = i + firstString;
    103a:	4b58      	ldr	r3, [pc, #352]	; (119c <audioFrameAdditive+0x35c>)
    103c:	681b      	ldr	r3, [r3, #0]
    103e:	4433      	add	r3, r6
				float fakedFreq = stringFrequencies[i] * ((knobScaled[2] * 3.5f) + 0.5f);
    1040:	ee60 9a27 	vmul.f32	s19, s0, s15
				if (thisString < 6)
    1044:	2b05      	cmp	r3, #5
					stringFade = (float)thisString * 0.2f;
    1046:	ee07 3a90 	vmov	s15, r3
				int thisString = i + firstString;
    104a:	930b      	str	r3, [sp, #44]	; 0x2c
					stringFade = (float)thisString * 0.2f;
    104c:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
				if (thisString < 6)
    1050:	f340 8187 	ble.w	1362 <audioFrameAdditive+0x522>
					stringFade = (float)(thisString - 6.0f) * 0.2f;
    1054:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    1058:	4f51      	ldr	r7, [pc, #324]	; (11a0 <audioFrameAdditive+0x360>)
    105a:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
    105e:	eef0 1a6f 	vmov.f32	s3, s31
    1062:	ed97 1a05 	vldr	s2, [r7, #20]
					stringFade = (float)(thisString - 6.0f) * 0.2f;
    1066:	ee39 9a67 	vsub.f32	s18, s18, s15
    106a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 11a4 <audioFrameAdditive+0x364>
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    106e:	edd7 0a03 	vldr	s1, [r7, #12]
    1072:	eeb0 0a69 	vmov.f32	s0, s19
					stringFade = (float)(thisString - 6.0f) * 0.2f;
    1076:	ee29 9a27 	vmul.f32	s18, s18, s15
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    107a:	f008 f9d1 	bl	9420 <__LEAF_map_veneer>
    107e:	eeb0 1a4f 	vmov.f32	s2, s30
    1082:	eef0 0a40 	vmov.f32	s1, s0
    1086:	eeb0 0a6f 	vmov.f32	s0, s31
    108a:	f008 fa05 	bl	9498 <__LEAF_clip_veneer>
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    108e:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    1092:	eef0 ba40 	vmov.f32	s23, s0
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    1096:	ed97 1a02 	vldr	s2, [r7, #8]
    109a:	eef0 1a6f 	vmov.f32	s3, s31
    109e:	edd7 0a00 	vldr	s1, [r7]
    10a2:	eeb0 0a69 	vmov.f32	s0, s19
    10a6:	f8df 9118 	ldr.w	r9, [pc, #280]	; 11c0 <audioFrameAdditive+0x380>
    10aa:	f008 f9b9 	bl	9420 <__LEAF_map_veneer>
    10ae:	eeb0 1a4f 	vmov.f32	s2, s30
    10b2:	eef0 0a40 	vmov.f32	s1, s0
    10b6:	4d3c      	ldr	r5, [pc, #240]	; (11a8 <audioFrameAdditive+0x368>)
    10b8:	eeb0 0a6f 	vmov.f32	s0, s31
    10bc:	4c3b      	ldr	r4, [pc, #236]	; (11ac <audioFrameAdditive+0x36c>)
    10be:	f008 f9eb 	bl	9498 <__LEAF_clip_veneer>
				int height2Int = floor(height2);
    10c2:	eeb7 7aeb 	vcvt.f64.f32	d7, s23
				int height1Int = floor(height1);
    10c6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
    10ca:	4939      	ldr	r1, [pc, #228]	; (11b0 <audioFrameAdditive+0x370>)
						thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    10cc:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    10d0:	960f      	str	r6, [sp, #60]	; 0x3c
				int height2Int = floor(height2);
    10d2:	febb 7b47 	vrintm.f64	d7, d7
    10d6:	eebd 7bc7 	vcvt.s32.f64	s14, d7
				int height1Int = floor(height1);
    10da:	febb 6b46 	vrintm.f64	d6, d6
    10de:	eebd 6bc6 	vcvt.s32.f64	s12, d6
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    10e2:	ee38 eac0 	vsub.f32	s28, s17, s0
    10e6:	464e      	mov	r6, r9
    10e8:	ee17 3a10 	vmov	r3, s14
				float height2Float = height2 - height2Int;
    10ec:	eeb8 dac7 	vcvt.f32.s32	s26, s14
    10f0:	ee16 2a10 	vmov	r2, s12
				float height1Float = height1 - height1Int;
    10f4:	eef8 7ac6 	vcvt.f32.s32	s15, s12
    10f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    10fc:	ee78 eaeb 	vsub.f32	s29, s17, s23
    1100:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1104:	970a      	str	r7, [sp, #40]	; 0x28
    1106:	011b      	lsls	r3, r3, #4
				float height1Float = height1 - height1Int;
    1108:	ee70 da67 	vsub.f32	s27, s0, s15
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    110c:	ee7e 7a27 	vadd.f32	s15, s28, s15
						thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    1110:	f8dd 800c 	ldr.w	r8, [sp, #12]
    1114:	f103 0a90 	add.w	sl, r3, #144	; 0x90
    1118:	f503 73a8 	add.w	r3, r3, #336	; 0x150
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    111c:	ee7e ea8d 	vadd.f32	s29, s29, s26
    1120:	18c8      	adds	r0, r1, r3
    1122:	eb01 1302 	add.w	r3, r1, r2, lsl #4
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    1126:	eeb0 ba40 	vmov.f32	s22, s0
				float height2Float = height2 - height2Int;
    112a:	448a      	add	sl, r1
    112c:	461a      	mov	r2, r3
    112e:	33c0      	adds	r3, #192	; 0xc0
						thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    1130:	ee78 aac9 	vsub.f32	s21, s17, s18
    1134:	4607      	mov	r7, r0
				float height2Float = height2 - height2Int;
    1136:	ee3b dacd 	vsub.f32	s26, s23, s26
				for (int j = 0; j < NUM_OVERTONES; j++)
    113a:	4691      	mov	r9, r2
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    113c:	edcd 7a0c 	vstr	s15, [sp, #48]	; 0x30
    1140:	9302      	str	r3, [sp, #8]
    1142:	e0c7      	b.n	12d4 <audioFrameAdditive+0x494>
    1144:	e0001000 	.word	0xe0001000
    1148:	2000549d 	.word	0x2000549d
    114c:	20005014 	.word	0x20005014
    1150:	20004f30 	.word	0x20004f30
    1154:	200009d4 	.word	0x200009d4
    1158:	44fa0000 	.word	0x44fa0000
    115c:	20013f50 	.word	0x20013f50
    1160:	3dcccccd 	.word	0x3dcccccd
    1164:	3ffeb852 	.word	0x3ffeb852
    1168:	20013f00 	.word	0x20013f00
    116c:	00000000 	.word	0x00000000
    1170:	20013f30 	.word	0x20013f30
    1174:	30000000 	.word	0x30000000
    1178:	4b000000 	.word	0x4b000000
    117c:	20013f68 	.word	0x20013f68
    1180:	200004a4 	.word	0x200004a4
    1184:	20013f6c 	.word	0x20013f6c
    1188:	20004f40 	.word	0x20004f40
    118c:	20000a04 	.word	0x20000a04
    1190:	37800080 	.word	0x37800080
    1194:	20005020 	.word	0x20005020
    1198:	20013f48 	.word	0x20013f48
    119c:	20004f38 	.word	0x20004f38
    11a0:	200002d0 	.word	0x200002d0
    11a4:	3e4ccccd 	.word	0x3e4ccccd
    11a8:	20000b84 	.word	0x20000b84
    11ac:	20014172 	.word	0x20014172
    11b0:	200002f4 	.word	0x200002f4
    11b4:	200004b1 	.word	0x200004b1
    11b8:	20005084 	.word	0x20005084
    11bc:	20004f54 	.word	0x20004f54
    11c0:	20000ca4 	.word	0x20000ca4
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    11c4:	ed97 8a00 	vldr	s16, [r7]
						if (height2 < 1.0f)
    11c8:	eef4 bae8 	vcmpe.f32	s23, s17
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    11cc:	edd3 7a00 	vldr	s15, [r3]
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    11d0:	ee2d 8a08 	vmul.f32	s16, s26, s16
    11d4:	ed9a 7a24 	vldr	s14, [sl, #144]	; 0x90
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    11d8:	ee6d 7aa7 	vmul.f32	s15, s27, s15
    11dc:	eddd 6a0c 	vldr	s13, [sp, #48]	; 0x30
						if (height2 < 1.0f)
    11e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
							d2 = 1.0f / ((dAp[2][0][j] * LEAF_clip(stringFundamentals[2][0], fakedFreq, stringFundamentals[2][1])) + dBs[2][0][j]);
    11e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    11e6:	eea7 8a2e 	vfma.f32	s16, s14, s29
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    11ea:	ed99 7a24 	vldr	s14, [r9, #144]	; 0x90
    11ee:	eee7 7a26 	vfma.f32	s15, s14, s13
						thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    11f2:	ee28 8a2a 	vmul.f32	s16, s16, s21
    11f6:	eea9 8a27 	vfma.f32	s16, s18, s15
						if (height2 < 1.0f)
    11fa:	f100 80eb 	bmi.w	13d4 <audioFrameAdditive+0x594>
							d2 = 1.0f / ((dAp[2][1][j] * LEAF_clip(stringFundamentals[2][1], fakedFreq, stringFundamentals[2][2])) + dBs[2][1][j]);
    11fe:	eef0 0a69 	vmov.f32	s1, s19
    1202:	ed93 1a08 	vldr	s2, [r3, #32]
    1206:	ed93 0a07 	vldr	s0, [r3, #28]
    120a:	ed95 ea3c 	vldr	s28, [r5, #240]	; 0xf0
    120e:	f008 f943 	bl	9498 <__LEAF_clip_veneer>
    1212:	ed96 7a3c 	vldr	s14, [r6, #240]	; 0xf0
    1216:	eeae 7a00 	vfma.f32	s14, s28, s0
    121a:	ee88 ea87 	vdiv.f32	s28, s17, s14
							d1 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    121e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
						if (height1 < 1.0f)
    1220:	eeb4 bae8 	vcmpe.f32	s22, s17
    1224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1228:	f100 80bf 	bmi.w	13aa <audioFrameAdditive+0x56a>
							d1 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
    122c:	edd5 6a24 	vldr	s13, [r5, #144]	; 0x90
    1230:	eef0 0a69 	vmov.f32	s1, s19
    1234:	ed93 1a05 	vldr	s2, [r3, #20]
    1238:	ed93 0a04 	vldr	s0, [r3, #16]
    123c:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
    1240:	f008 f92a 	bl	9498 <__LEAF_clip_veneer>
    1244:	eddd 6a0d 	vldr	s13, [sp, #52]	; 0x34
    1248:	ed96 7a24 	vldr	s14, [r6, #144]	; 0x90
    124c:	eea6 7a80 	vfma.f32	s14, s13, s0
    1250:	eec8 6a87 	vdiv.f32	s13, s17, s14
				for (int j = 0; j < NUM_OVERTONES; j++)
    1254:	9b02      	ldr	r3, [sp, #8]
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    1256:	4640      	mov	r0, r8
    1258:	4a7c      	ldr	r2, [pc, #496]	; (144c <audioFrameAdditive+0x60c>)
				for (int j = 0; j < NUM_OVERTONES; j++)
    125a:	3504      	adds	r5, #4
    125c:	3304      	adds	r3, #4
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    125e:	ed9b 0a05 	vldr	s0, [fp, #20]
				for (int j = 0; j < NUM_OVERTONES; j++)
    1262:	3604      	adds	r6, #4
    1264:	f109 0904 	add.w	r9, r9, #4
    1268:	9302      	str	r3, [sp, #8]
						thisDecay = (d1 * stringFade) + (d2 * (1.0f - stringFade));
    126a:	ee6e 7a2a 	vmul.f32	s15, s28, s21
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    126e:	7823      	ldrb	r3, [r4, #0]
    1270:	ee20 0a0a 	vmul.f32	s0, s0, s20
				for (int j = 0; j < NUM_OVERTONES; j++)
    1274:	f10a 0a04 	add.w	sl, sl, #4
    1278:	3704      	adds	r7, #4
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    127a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
						thisDecay = (d1 * stringFade) + (d2 * (1.0f - stringFade));
    127e:	eee6 7a89 	vfma.f32	s15, s13, s18
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    1282:	ed93 7a00 	vldr	s14, [r3]
    1286:	ee20 0a07 	vmul.f32	s0, s0, s14
    128a:	ed9b 7a03 	vldr	s14, [fp, #12]
    128e:	ee27 7a2c 	vmul.f32	s14, s14, s25
    1292:	eea7 0a27 	vfma.f32	s0, s14, s15
    1296:	f008 f9cb 	bl	9630 <__tADSRT_setDecay_veneer>
					currentRandom++;
    129a:	7823      	ldrb	r3, [r4, #0]
					tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain + (randomFactors[currentRandom] * knobScaled[6] * 0.1f)));
    129c:	4a6b      	ldr	r2, [pc, #428]	; (144c <audioFrameAdditive+0x60c>)
    129e:	4640      	mov	r0, r8
					currentRandom++;
    12a0:	3301      	adds	r3, #1
					tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain + (randomFactors[currentRandom] * knobScaled[6] * 0.1f)));
    12a2:	eddb 7a06 	vldr	s15, [fp, #24]
				for (int j = 0; j < NUM_OVERTONES; j++)
    12a6:	f108 0804 	add.w	r8, r8, #4
					currentRandom++;
    12aa:	b2db      	uxtb	r3, r3
					tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain + (randomFactors[currentRandom] * knobScaled[6] * 0.1f)));
    12ac:	ee67 7a8a 	vmul.f32	s15, s15, s20
					currentRandom++;
    12b0:	7023      	strb	r3, [r4, #0]
					tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain + (randomFactors[currentRandom] * knobScaled[6] * 0.1f)));
    12b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    12b6:	ed93 7a00 	vldr	s14, [r3]
    12ba:	eea7 8a27 	vfma.f32	s16, s14, s15
    12be:	ee28 0a0c 	vmul.f32	s0, s16, s24
    12c2:	f008 f9c5 	bl	9650 <__tADSRT_on_veneer>
					currentRandom++;
    12c6:	7823      	ldrb	r3, [r4, #0]
    12c8:	3301      	adds	r3, #1
    12ca:	7023      	strb	r3, [r4, #0]
				for (int j = 0; j < NUM_OVERTONES; j++)
    12cc:	4b60      	ldr	r3, [pc, #384]	; (1450 <audioFrameAdditive+0x610>)
    12ce:	42ab      	cmp	r3, r5
    12d0:	f000 80b7 	beq.w	1442 <audioFrameAdditive+0x602>
					if (thisString < 6)
    12d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    12d6:	2b05      	cmp	r3, #5
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    12d8:	9b02      	ldr	r3, [sp, #8]
					if (thisString < 6)
    12da:	f77f af73 	ble.w	11c4 <audioFrameAdditive+0x384>
						float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    12de:	edd7 7a00 	vldr	s15, [r7]
						if (height2 < 1.0f)
    12e2:	eef4 bae8 	vcmpe.f32	s23, s17
						float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    12e6:	ed9a 8a00 	vldr	s16, [sl]
						float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    12ea:	ed93 7a00 	vldr	s14, [r3]
						float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    12ee:	eea7 8a8d 	vfma.f32	s16, s15, s26
						float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    12f2:	edd9 7a00 	vldr	s15, [r9]
						if (height2 < 1.0f)
    12f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
							d2 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    12fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
						float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    12fc:	eee7 7a2d 	vfma.f32	s15, s14, s27
						thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    1300:	ee28 8a2a 	vmul.f32	s16, s16, s21
    1304:	eea9 8a27 	vfma.f32	s16, s18, s15
						if (height2 < 1.0f)
    1308:	f100 808a 	bmi.w	1420 <audioFrameAdditive+0x5e0>
							d2 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
    130c:	eef0 0a69 	vmov.f32	s1, s19
    1310:	ed93 1a05 	vldr	s2, [r3, #20]
    1314:	ed93 0a04 	vldr	s0, [r3, #16]
    1318:	ed95 ea24 	vldr	s28, [r5, #144]	; 0x90
    131c:	f008 f8bc 	bl	9498 <__LEAF_clip_veneer>
    1320:	ed96 7a24 	vldr	s14, [r6, #144]	; 0x90
    1324:	eeae 7a00 	vfma.f32	s14, s28, s0
    1328:	ee88 ea87 	vdiv.f32	s28, s17, s14
							d1 = 1.0f / ((dAp[0][0][j] * LEAF_clip(stringFundamentals[0][0], fakedFreq, stringFundamentals[0][1])) + dBs[0][0][j]);
    132c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
						if (height1 < 1.0f)
    132e:	eeb4 bae8 	vcmpe.f32	s22, s17
    1332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1336:	d45e      	bmi.n	13f6 <audioFrameAdditive+0x5b6>
							d1 = 1.0f / ((dAp[0][1][j] * LEAF_clip(stringFundamentals[0][1], fakedFreq, stringFundamentals[0][2])) + dBs[0][1][j]);
    1338:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
    133c:	eef0 0a69 	vmov.f32	s1, s19
    1340:	ed93 1a02 	vldr	s2, [r3, #8]
    1344:	ed93 0a01 	vldr	s0, [r3, #4]
    1348:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
    134c:	f008 f8a4 	bl	9498 <__LEAF_clip_veneer>
    1350:	eddd 6a0d 	vldr	s13, [sp, #52]	; 0x34
    1354:	ed96 7a0c 	vldr	s14, [r6, #48]	; 0x30
    1358:	eea6 7a80 	vfma.f32	s14, s13, s0
    135c:	eec8 6a87 	vdiv.f32	s13, s17, s14
    1360:	e778      	b.n	1254 <audioFrameAdditive+0x414>
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    1362:	4f3c      	ldr	r7, [pc, #240]	; (1454 <audioFrameAdditive+0x614>)
    1364:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
					stringFade = (float)thisString * 0.2f;
    1368:	eddf 7a3b 	vldr	s15, [pc, #236]	; 1458 <audioFrameAdditive+0x618>
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    136c:	eef0 1a6f 	vmov.f32	s3, s31
    1370:	ed97 1a08 	vldr	s2, [r7, #32]
    1374:	eeb0 0a69 	vmov.f32	s0, s19
    1378:	edd7 0a06 	vldr	s1, [r7, #24]
					stringFade = (float)thisString * 0.2f;
    137c:	ee29 9a27 	vmul.f32	s18, s18, s15
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    1380:	f008 f84e 	bl	9420 <__LEAF_map_veneer>
    1384:	eeb0 1a4f 	vmov.f32	s2, s30
    1388:	eef0 0a40 	vmov.f32	s1, s0
    138c:	eeb0 0a6f 	vmov.f32	s0, s31
    1390:	f008 f882 	bl	9498 <__LEAF_clip_veneer>
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    1394:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    1398:	eef0 ba40 	vmov.f32	s23, s0
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    139c:	ed97 1a05 	vldr	s2, [r7, #20]
    13a0:	eef0 1a6f 	vmov.f32	s3, s31
    13a4:	edd7 0a03 	vldr	s1, [r7, #12]
    13a8:	e67b      	b.n	10a2 <audioFrameAdditive+0x262>
							d1 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    13aa:	edd5 6a18 	vldr	s13, [r5, #96]	; 0x60
    13ae:	eef0 0a69 	vmov.f32	s1, s19
    13b2:	ed93 1a04 	vldr	s2, [r3, #16]
    13b6:	ed93 0a03 	vldr	s0, [r3, #12]
    13ba:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
    13be:	f008 f86b 	bl	9498 <__LEAF_clip_veneer>
    13c2:	eddd 6a0d 	vldr	s13, [sp, #52]	; 0x34
    13c6:	ed96 7a18 	vldr	s14, [r6, #96]	; 0x60
    13ca:	eea6 7a80 	vfma.f32	s14, s13, s0
    13ce:	eec8 6a87 	vdiv.f32	s13, s17, s14
    13d2:	e73f      	b.n	1254 <audioFrameAdditive+0x414>
							d2 = 1.0f / ((dAp[2][0][j] * LEAF_clip(stringFundamentals[2][0], fakedFreq, stringFundamentals[2][1])) + dBs[2][0][j]);
    13d4:	eef0 0a69 	vmov.f32	s1, s19
    13d8:	ed93 1a07 	vldr	s2, [r3, #28]
    13dc:	ed93 0a06 	vldr	s0, [r3, #24]
    13e0:	ed95 ea30 	vldr	s28, [r5, #192]	; 0xc0
    13e4:	f008 f858 	bl	9498 <__LEAF_clip_veneer>
    13e8:	ed96 7a30 	vldr	s14, [r6, #192]	; 0xc0
    13ec:	eeae 7a00 	vfma.f32	s14, s28, s0
    13f0:	ee88 ea87 	vdiv.f32	s28, s17, s14
    13f4:	e713      	b.n	121e <audioFrameAdditive+0x3de>
							d1 = 1.0f / ((dAp[0][0][j] * LEAF_clip(stringFundamentals[0][0], fakedFreq, stringFundamentals[0][1])) + dBs[0][0][j]);
    13f6:	edd5 6a00 	vldr	s13, [r5]
    13fa:	eef0 0a69 	vmov.f32	s1, s19
    13fe:	ed93 1a01 	vldr	s2, [r3, #4]
    1402:	ed93 0a00 	vldr	s0, [r3]
    1406:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
    140a:	f008 f845 	bl	9498 <__LEAF_clip_veneer>
    140e:	eddd 6a0d 	vldr	s13, [sp, #52]	; 0x34
    1412:	ed96 7a00 	vldr	s14, [r6]
    1416:	eea6 7a80 	vfma.f32	s14, s13, s0
    141a:	eec8 6a87 	vdiv.f32	s13, s17, s14
    141e:	e719      	b.n	1254 <audioFrameAdditive+0x414>
							d2 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    1420:	eef0 0a69 	vmov.f32	s1, s19
    1424:	ed93 1a04 	vldr	s2, [r3, #16]
    1428:	ed93 0a03 	vldr	s0, [r3, #12]
    142c:	ed95 ea18 	vldr	s28, [r5, #96]	; 0x60
    1430:	f008 f832 	bl	9498 <__LEAF_clip_veneer>
    1434:	ed96 7a18 	vldr	s14, [r6, #96]	; 0x60
    1438:	eeae 7a00 	vfma.f32	s14, s28, s0
    143c:	ee88 ea87 	vdiv.f32	s28, s17, s14
    1440:	e774      	b.n	132c <audioFrameAdditive+0x4ec>
		for (int i = 0; i < numStringsThisBoard; i++)
    1442:	e9dd 360e 	ldrd	r3, r6, [sp, #56]	; 0x38
    1446:	781a      	ldrb	r2, [r3, #0]
    1448:	e541      	b.n	ece <audioFrameAdditive+0x8e>
    144a:	bf00      	nop
    144c:	2000509c 	.word	0x2000509c
    1450:	20000bb4 	.word	0x20000bb4
    1454:	200002d0 	.word	0x200002d0
    1458:	3e4ccccd 	.word	0x3e4ccccd
    145c:	00000000 	.word	0x00000000

00001460 <updateStateFromSPIMessage>:


void __ATTR_ITCMRAM updateStateFromSPIMessage(uint8_t offset)
{
	int modeBit = SPI_LEVERS_RX[24 + offset];
    1460:	4a3a      	ldr	r2, [pc, #232]	; (154c <updateStateFromSPIMessage+0xec>)
	edit = (modeBit >> 4) & 1;
	voice = SPI_LEVERS_RX[25 + offset];



	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    1462:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
	int modeBit = SPI_LEVERS_RX[24 + offset];
    1466:	1813      	adds	r3, r2, r0
{
    1468:	b4f0      	push	{r4, r5, r6, r7}
	int modeBit = SPI_LEVERS_RX[24 + offset];
    146a:	7e19      	ldrb	r1, [r3, #24]
	voice = SPI_LEVERS_RX[25 + offset];
    146c:	7e5e      	ldrb	r6, [r3, #25]
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    146e:	f001 030f 	and.w	r3, r1, #15
	octaveAction = (modeBit >> 6) & 1;
    1472:	4c37      	ldr	r4, [pc, #220]	; (1550 <updateStateFromSPIMessage+0xf0>)
	voice = SPI_LEVERS_RX[25 + offset];
    1474:	4d37      	ldr	r5, [pc, #220]	; (1554 <updateStateFromSPIMessage+0xf4>)
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    1476:	3b05      	subs	r3, #5
    1478:	4f37      	ldr	r7, [pc, #220]	; (1558 <updateStateFromSPIMessage+0xf8>)
    147a:	ee07 3a90 	vmov	s15, r3
	octaveAction = (modeBit >> 6) & 1;
    147e:	f3c1 1380 	ubfx	r3, r1, #6, #1
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    1482:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	octaveAction = (modeBit >> 6) & 1;
    1486:	7023      	strb	r3, [r4, #0]
	voice = SPI_LEVERS_RX[25 + offset];
    1488:	602e      	str	r6, [r5, #0]
	dualSlider = (modeBit >> 5) & 1;
    148a:	f3c1 1540 	ubfx	r5, r1, #5, #1
	//if "octave action" is set to 1, then immediately change octave instead of waiting for new note
	if (octaveAction)
    148e:	7823      	ldrb	r3, [r4, #0]
	edit = (modeBit >> 4) & 1;
    1490:	f3c1 1100 	ubfx	r1, r1, #4, #1
	dualSlider = (modeBit >> 5) & 1;
    1494:	4c31      	ldr	r4, [pc, #196]	; (155c <updateStateFromSPIMessage+0xfc>)
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    1496:	ee67 7a87 	vmul.f32	s15, s15, s14
	dualSlider = (modeBit >> 5) & 1;
    149a:	6025      	str	r5, [r4, #0]
	edit = (modeBit >> 4) & 1;
    149c:	4c30      	ldr	r4, [pc, #192]	; (1560 <updateStateFromSPIMessage+0x100>)
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    149e:	edc7 7a00 	vstr	s15, [r7]
	edit = (modeBit >> 4) & 1;
    14a2:	6021      	str	r1, [r4, #0]
	if (octaveAction)
    14a4:	b14b      	cbz	r3, 14ba <updateStateFromSPIMessage+0x5a>
	{
		for (int i = 0; i < numStringsThisBoard; i++)
    14a6:	4b2f      	ldr	r3, [pc, #188]	; (1564 <updateStateFromSPIMessage+0x104>)
    14a8:	781b      	ldrb	r3, [r3, #0]
    14aa:	b133      	cbz	r3, 14ba <updateStateFromSPIMessage+0x5a>
		{
			stringOctave[i] = octave;
    14ac:	492e      	ldr	r1, [pc, #184]	; (1568 <updateStateFromSPIMessage+0x108>)
		for (int i = 0; i < numStringsThisBoard; i++)
    14ae:	2b01      	cmp	r3, #1
			stringOctave[i] = octave;
    14b0:	edc1 7a00 	vstr	s15, [r1]
    14b4:	bf18      	it	ne
    14b6:	edc1 7a01 	vstrne	s15, [r1, #4]
		}
	}

	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    14ba:	4410      	add	r0, r2
    14bc:	4c2b      	ldr	r4, [pc, #172]	; (156c <updateStateFromSPIMessage+0x10c>)
	volumePedal = volumePedalInt * 0.0002442002442f;

	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    14be:	4a2c      	ldr	r2, [pc, #176]	; (1570 <updateStateFromSPIMessage+0x110>)
	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    14c0:	7e81      	ldrb	r1, [r0, #26]
    14c2:	7ec3      	ldrb	r3, [r0, #27]
	volumePedal = volumePedalInt * 0.0002442002442f;
    14c4:	eddf 7a2b 	vldr	s15, [pc, #172]	; 1574 <updateStateFromSPIMessage+0x114>
	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    14c8:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    14cc:	7f01      	ldrb	r1, [r0, #28]
    14ce:	7f40      	ldrb	r0, [r0, #29]
	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    14d0:	b29b      	uxth	r3, r3
	volumePedal = volumePedalInt * 0.0002442002442f;
    14d2:	4d29      	ldr	r5, [pc, #164]	; (1578 <updateStateFromSPIMessage+0x118>)
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    14d4:	eb00 2001 	add.w	r0, r0, r1, lsl #8
    14d8:	4928      	ldr	r1, [pc, #160]	; (157c <updateStateFromSPIMessage+0x11c>)
	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    14da:	8023      	strh	r3, [r4, #0]
	volumePedal = volumePedalInt * 0.0002442002442f;
    14dc:	8823      	ldrh	r3, [r4, #0]
    14de:	b29b      	uxth	r3, r3
    14e0:	ee00 3a10 	vmov	s0, r3
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    14e4:	7813      	ldrb	r3, [r2, #0]
    14e6:	b2db      	uxtb	r3, r3
	volumePedal = volumePedalInt * 0.0002442002442f;
    14e8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    14ec:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
	if (stringPositions[whichBar] != stringPositionsPrev[whichBar])
    14f0:	7813      	ldrb	r3, [r2, #0]
	volumePedal = volumePedalInt * 0.0002442002442f;
    14f2:	ee20 0a27 	vmul.f32	s0, s0, s15
	if (stringPositions[whichBar] != stringPositionsPrev[whichBar])
    14f6:	4822      	ldr	r0, [pc, #136]	; (1580 <updateStateFromSPIMessage+0x120>)
    14f8:	b2db      	uxtb	r3, r3
	volumePedal = volumePedalInt * 0.0002442002442f;
    14fa:	ed85 0a00 	vstr	s0, [r5]
	if (stringPositions[whichBar] != stringPositionsPrev[whichBar])
    14fe:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
    1502:	7813      	ldrb	r3, [r2, #0]
    1504:	b2db      	uxtb	r3, r3
    1506:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    150a:	429c      	cmp	r4, r3
    150c:	d01a      	beq.n	1544 <updateStateFromSPIMessage+0xe4>
	{
		//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
		stringPositionsPrev[whichBar] = stringPositions[whichBar];
    150e:	7814      	ldrb	r4, [r2, #0]
    1510:	7813      	ldrb	r3, [r2, #0]
    1512:	b2e2      	uxtb	r2, r4
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    1514:	eddf 6a1b 	vldr	s13, [pc, #108]	; 1584 <updateStateFromSPIMessage+0x124>
		stringPositionsPrev[whichBar] = stringPositions[whichBar];
    1518:	b2db      	uxtb	r3, r3
    151a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    151e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    1522:	ed91 7a00 	vldr	s14, [r1]
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    1526:	edd1 7a01 	vldr	s15, [r1, #4]
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    152a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    152e:	4b16      	ldr	r3, [pc, #88]	; (1588 <updateStateFromSPIMessage+0x128>)
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    1530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    1534:	ee27 7a26 	vmul.f32	s14, s14, s13
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    1538:	ee67 7aa6 	vmul.f32	s15, s15, s13
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    153c:	ed83 7a00 	vstr	s14, [r3]
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    1540:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	tExpSmooth_setDest(&volumeSmoother,volumePedal);
    1544:	4811      	ldr	r0, [pc, #68]	; (158c <updateStateFromSPIMessage+0x12c>)
}
    1546:	bcf0      	pop	{r4, r5, r6, r7}
	tExpSmooth_setDest(&volumeSmoother,volumePedal);
    1548:	f007 bf5a 	b.w	9400 <__tExpSmooth_setDest_veneer>
    154c:	30000800 	.word	0x30000800
    1550:	20005024 	.word	0x20005024
    1554:	20013f74 	.word	0x20013f74
    1558:	20005020 	.word	0x20005020
    155c:	20004f28 	.word	0x20004f28
    1560:	20004f2c 	.word	0x20004f2c
    1564:	200004b1 	.word	0x200004b1
    1568:	20013f50 	.word	0x20013f50
    156c:	20013f7c 	.word	0x20013f7c
    1570:	20013f84 	.word	0x20013f84
    1574:	39800801 	.word	0x39800801
    1578:	20013f78 	.word	0x20013f78
    157c:	20013f58 	.word	0x20013f58
    1580:	20013f60 	.word	0x20013f60
    1584:	3b000000 	.word	0x3b000000
    1588:	20000f04 	.word	0x20000f04
    158c:	20013f80 	.word	0x20013f80
    1590:	f3af 8000 	nop.w
    1594:	f3af 8000 	nop.w
    1598:	f3af 8000 	nop.w
    159c:	f3af 8000 	nop.w

000015a0 <switchStringModel>:



void __ATTR_ITCMRAM switchStringModel(int which)
{
	if (which == 1)
    15a0:	2801      	cmp	r0, #1
{
    15a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (which == 1)
    15a6:	d02a      	beq.n	15fe <switchStringModel+0x5e>
		audioFrameFunction = audioFrameString1;
		resetStringInputs = 1;
	}


	else if (which == 2)
    15a8:	2802      	cmp	r0, #2
    15aa:	d00c      	beq.n	15c6 <switchStringModel+0x26>
		audioFrameFunction = audioFrameString2;
		resetStringInputs = 1;
	}
	presetReady = 1;
	diskBusy = 0;
	currentActivePreset = voice;
    15ac:	4b29      	ldr	r3, [pc, #164]	; (1654 <switchStringModel+0xb4>)
	diskBusy = 0;
    15ae:	2100      	movs	r1, #0
    15b0:	4a29      	ldr	r2, [pc, #164]	; (1658 <switchStringModel+0xb8>)
	presetReady = 1;
    15b2:	2401      	movs	r4, #1
	currentActivePreset = voice;
    15b4:	681b      	ldr	r3, [r3, #0]
	diskBusy = 0;
    15b6:	7011      	strb	r1, [r2, #0]
	presetReady = 1;
    15b8:	4828      	ldr	r0, [pc, #160]	; (165c <switchStringModel+0xbc>)
	currentActivePreset = voice;
    15ba:	b2db      	uxtb	r3, r3
    15bc:	4a28      	ldr	r2, [pc, #160]	; (1660 <switchStringModel+0xc0>)
	presetReady = 1;
    15be:	6004      	str	r4, [r0, #0]
	currentActivePreset = voice;
    15c0:	7013      	strb	r3, [r2, #0]

}
    15c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (whichStringModelLoaded != String2Loaded)
    15c6:	4b27      	ldr	r3, [pc, #156]	; (1664 <switchStringModel+0xc4>)
    15c8:	781b      	ldrb	r3, [r3, #0]
    15ca:	2b01      	cmp	r3, #1
    15cc:	d137      	bne.n	163e <switchStringModel+0x9e>
    15ce:	4e26      	ldr	r6, [pc, #152]	; (1668 <switchStringModel+0xc8>)
{
    15d0:	2400      	movs	r4, #0
    15d2:	4d26      	ldr	r5, [pc, #152]	; (166c <switchStringModel+0xcc>)
			knobFrozen[i] = 1;
    15d4:	f04f 0801 	mov.w	r8, #1
    15d8:	4f25      	ldr	r7, [pc, #148]	; (1670 <switchStringModel+0xd0>)
			tExpSmooth_setValAndDest(&knobSmoothers[i], string2Defaults[i]);
    15da:	4628      	mov	r0, r5
    15dc:	ecb6 0a01 	vldmia	r6!, {s0}
    15e0:	f007 fefa 	bl	93d8 <__tExpSmooth_setValAndDest_veneer>
			knobFrozen[i] = 1;
    15e4:	f807 8004 	strb.w	r8, [r7, r4]
		for (int i = 0; i < 12; i++)
    15e8:	3401      	adds	r4, #1
    15ea:	3504      	adds	r5, #4
    15ec:	2c0c      	cmp	r4, #12
    15ee:	d1f4      	bne.n	15da <switchStringModel+0x3a>
		audioFrameFunction = audioFrameString2;
    15f0:	4a20      	ldr	r2, [pc, #128]	; (1674 <switchStringModel+0xd4>)
    15f2:	4921      	ldr	r1, [pc, #132]	; (1678 <switchStringModel+0xd8>)
		resetStringInputs = 1;
    15f4:	4b21      	ldr	r3, [pc, #132]	; (167c <switchStringModel+0xdc>)
		audioFrameFunction = audioFrameString2;
    15f6:	6011      	str	r1, [r2, #0]
		resetStringInputs = 1;
    15f8:	f883 8000 	strb.w	r8, [r3]
    15fc:	e7d6      	b.n	15ac <switchStringModel+0xc>
		if (whichStringModelLoaded != String1Loaded)
    15fe:	4b19      	ldr	r3, [pc, #100]	; (1664 <switchStringModel+0xc4>)
    1600:	781b      	ldrb	r3, [r3, #0]
    1602:	bb0b      	cbnz	r3, 1648 <switchStringModel+0xa8>
    1604:	4e1e      	ldr	r6, [pc, #120]	; (1680 <switchStringModel+0xe0>)
{
    1606:	2400      	movs	r4, #0
    1608:	4d18      	ldr	r5, [pc, #96]	; (166c <switchStringModel+0xcc>)
			knobFrozen[i] = 1;
    160a:	f04f 0801 	mov.w	r8, #1
    160e:	4f18      	ldr	r7, [pc, #96]	; (1670 <switchStringModel+0xd0>)
			tExpSmooth_setValAndDest(&knobSmoothers[i], string1Defaults[i]);
    1610:	4628      	mov	r0, r5
    1612:	ecb6 0a01 	vldmia	r6!, {s0}
    1616:	f007 fedf 	bl	93d8 <__tExpSmooth_setValAndDest_veneer>
			knobFrozen[i] = 1;
    161a:	f807 8004 	strb.w	r8, [r7, r4]
		for (int i = 0; i < 12; i++)
    161e:	3401      	adds	r4, #1
    1620:	3504      	adds	r5, #4
    1622:	2c0c      	cmp	r4, #12
    1624:	d1f4      	bne.n	1610 <switchStringModel+0x70>
		tVZFilter_setFreq(&noiseFilt2, 3332.0f); //based on testing with knob values
    1626:	ed9f 0a17 	vldr	s0, [pc, #92]	; 1684 <switchStringModel+0xe4>
    162a:	4817      	ldr	r0, [pc, #92]	; (1688 <switchStringModel+0xe8>)
    162c:	f007 fe50 	bl	92d0 <__tVZFilter_setFreq_veneer>
		audioFrameFunction = audioFrameString1;
    1630:	4a10      	ldr	r2, [pc, #64]	; (1674 <switchStringModel+0xd4>)
    1632:	4916      	ldr	r1, [pc, #88]	; (168c <switchStringModel+0xec>)
		resetStringInputs = 1;
    1634:	4b11      	ldr	r3, [pc, #68]	; (167c <switchStringModel+0xdc>)
		audioFrameFunction = audioFrameString1;
    1636:	6011      	str	r1, [r2, #0]
		resetStringInputs = 1;
    1638:	f883 8000 	strb.w	r8, [r3]
    163c:	e7b6      	b.n	15ac <switchStringModel+0xc>
			audioFreeString1();
    163e:	f003 fb5f 	bl	4d00 <audioFreeString1>
			audioInitString2();
    1642:	f008 f859 	bl	96f8 <__audioInitString2_veneer>
    1646:	e7c2      	b.n	15ce <switchStringModel+0x2e>
			audioFreeString2();
    1648:	f003 fdfa 	bl	5240 <audioFreeString2>
			audioInitString1();
    164c:	f003 fad8 	bl	4c00 <audioInitString1>
    1650:	e7d8      	b.n	1604 <switchStringModel+0x64>
    1652:	bf00      	nop
    1654:	20013f74 	.word	0x20013f74
    1658:	200141ac 	.word	0x200141ac
    165c:	20005078 	.word	0x20005078
    1660:	20000720 	.word	0x20000720
    1664:	20013f85 	.word	0x20013f85
    1668:	200004ec 	.word	0x200004ec
    166c:	20004f84 	.word	0x20004f84
    1670:	20004f48 	.word	0x20004f48
    1674:	20000f00 	.word	0x20000f00
    1678:	00005a01 	.word	0x00005a01
    167c:	2000549d 	.word	0x2000549d
    1680:	200004bc 	.word	0x200004bc
    1684:	45504000 	.word	0x45504000
    1688:	2000501c 	.word	0x2000501c
    168c:	00005061 	.word	0x00005061
    1690:	f3af 8000 	nop.w
    1694:	f3af 8000 	nop.w
    1698:	f3af 8000 	nop.w
    169c:	f3af 8000 	nop.w

000016a0 <HAL_SAI_TxCpltCallback>:




void __ATTR_ITCMRAM HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
    16a0:	b538      	push	{r3, r4, r5, lr}
	if ((!diskBusy)&& (presetReady))
    16a2:	4c42      	ldr	r4, [pc, #264]	; (17ac <HAL_SAI_TxCpltCallback+0x10c>)
    16a4:	7823      	ldrb	r3, [r4, #0]
    16a6:	b91b      	cbnz	r3, 16b0 <HAL_SAI_TxCpltCallback+0x10>
    16a8:	4b41      	ldr	r3, [pc, #260]	; (17b0 <HAL_SAI_TxCpltCallback+0x110>)
    16aa:	681b      	ldr	r3, [r3, #0]
    16ac:	2b00      	cmp	r3, #0
    16ae:	d159      	bne.n	1764 <HAL_SAI_TxCpltCallback+0xc4>

	else
	{
		for (int i = 0; i < HALF_BUFFER_SIZE; i++)
		{
			audioOutBuffer[HALF_BUFFER_SIZE+i] = 0;
    16b0:	f44f 7200 	mov.w	r2, #512	; 0x200
    16b4:	2100      	movs	r1, #0
    16b6:	483f      	ldr	r0, [pc, #252]	; (17b4 <HAL_SAI_TxCpltCallback+0x114>)
    16b8:	f008 f812 	bl	96e0 <__memset_veneer>
		}
	}

	if (voice != prevVoice)
    16bc:	4b3e      	ldr	r3, [pc, #248]	; (17b8 <HAL_SAI_TxCpltCallback+0x118>)
    16be:	4a3f      	ldr	r2, [pc, #252]	; (17bc <HAL_SAI_TxCpltCallback+0x11c>)
    16c0:	6818      	ldr	r0, [r3, #0]
    16c2:	6811      	ldr	r1, [r2, #0]
    16c4:	4288      	cmp	r0, r1
    16c6:	d020      	beq.n	170a <HAL_SAI_TxCpltCallback+0x6a>
	{
		if (voice == 63)
    16c8:	6819      	ldr	r1, [r3, #0]
    16ca:	293f      	cmp	r1, #63	; 0x3f
    16cc:	d04f      	beq.n	176e <HAL_SAI_TxCpltCallback+0xce>
		{
			switchStrings = 1;
			diskBusy = 0;
		}
		else if (voice == 62)
    16ce:	6819      	ldr	r1, [r3, #0]
    16d0:	293e      	cmp	r1, #62	; 0x3e
    16d2:	d061      	beq.n	1798 <HAL_SAI_TxCpltCallback+0xf8>
		{
			switchStrings = 2;
			diskBusy = 0;
		}
		else if (voice == 61)
    16d4:	6819      	ldr	r1, [r3, #0]
    16d6:	293d      	cmp	r1, #61	; 0x3d
    16d8:	d04f      	beq.n	177a <HAL_SAI_TxCpltCallback+0xda>
			currentActivePreset = voice;
			diskBusy = 0;
			presetReady = 1;
			resetStringInputs = 1;
		}
		else if (voice == 60)
    16da:	6819      	ldr	r1, [r3, #0]
    16dc:	293c      	cmp	r1, #60	; 0x3c
    16de:	d061      	beq.n	17a4 <HAL_SAI_TxCpltCallback+0x104>
			resetStringInputs = 1;
		}
		else
		{
			audioFrameFunction = audioFrameSynth;
			presetWaitingToLoad = 1;
    16e0:	4937      	ldr	r1, [pc, #220]	; (17c0 <HAL_SAI_TxCpltCallback+0x120>)
    16e2:	2001      	movs	r0, #1
			presetNumberToLoad = voice;
    16e4:	4d37      	ldr	r5, [pc, #220]	; (17c4 <HAL_SAI_TxCpltCallback+0x124>)
			presetWaitingToLoad = 1;
    16e6:	6008      	str	r0, [r1, #0]
			presetNumberToLoad = voice;
    16e8:	6819      	ldr	r1, [r3, #0]
			audioFrameFunction = audioFrameSynth;
    16ea:	4c37      	ldr	r4, [pc, #220]	; (17c8 <HAL_SAI_TxCpltCallback+0x128>)
			presetNumberToLoad = voice;
    16ec:	b2c9      	uxtb	r1, r1
    16ee:	7029      	strb	r1, [r5, #0]
			audioFrameFunction = audioFrameSynth;
    16f0:	4d36      	ldr	r5, [pc, #216]	; (17cc <HAL_SAI_TxCpltCallback+0x12c>)
			presetReady = 0;
    16f2:	492f      	ldr	r1, [pc, #188]	; (17b0 <HAL_SAI_TxCpltCallback+0x110>)
			audioFrameFunction = audioFrameSynth;
    16f4:	6025      	str	r5, [r4, #0]
			presetReady = 0;
    16f6:	2400      	movs	r4, #0
    16f8:	600c      	str	r4, [r1, #0]
			if (prevVoice > 60)
    16fa:	6811      	ldr	r1, [r2, #0]
    16fc:	293c      	cmp	r1, #60	; 0x3c
    16fe:	dd01      	ble.n	1704 <HAL_SAI_TxCpltCallback+0x64>
			{
				resetStringInputs = 1;
    1700:	4933      	ldr	r1, [pc, #204]	; (17d0 <HAL_SAI_TxCpltCallback+0x130>)
    1702:	7008      	strb	r0, [r1, #0]
			}
			frameLoadOverCount = 0;
    1704:	4933      	ldr	r1, [pc, #204]	; (17d4 <HAL_SAI_TxCpltCallback+0x134>)
    1706:	2000      	movs	r0, #0
    1708:	6008      	str	r0, [r1, #0]
		}
	}
	prevVoice = voice;
    170a:	6819      	ldr	r1, [r3, #0]
	SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)audioOutBuffer) & ~(uint32_t)0x1F), AUDIO_BUFFER_SIZE+32);
    170c:	4b32      	ldr	r3, [pc, #200]	; (17d8 <HAL_SAI_TxCpltCallback+0x138>)
	prevVoice = voice;
    170e:	6011      	str	r1, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    1710:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;

      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    1714:	4a31      	ldr	r2, [pc, #196]	; (17dc <HAL_SAI_TxCpltCallback+0x13c>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    1716:	f103 0420 	add.w	r4, r3, #32
    171a:	f103 0140 	add.w	r1, r3, #64	; 0x40
    171e:	f103 0060 	add.w	r0, r3, #96	; 0x60
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    1722:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
    1726:	f8c2 4268 	str.w	r4, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    172a:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    172e:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    1732:	f103 0180 	add.w	r1, r3, #128	; 0x80
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    1736:	f8c2 0268 	str.w	r0, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    173a:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    173e:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    1742:	f103 01e0 	add.w	r1, r3, #224	; 0xe0
    1746:	f503 7380 	add.w	r3, r3, #256	; 0x100
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    174a:	f8c2 4268 	str.w	r4, [r2, #616]	; 0x268
    174e:	f8c2 0268 	str.w	r0, [r2, #616]	; 0x268
    1752:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
    1756:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
    175a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    175e:	f3bf 8f6f 	isb	sy
}
    1762:	bd38      	pop	{r3, r4, r5, pc}
		audioFrameFunction(HALF_BUFFER_SIZE);
    1764:	4b18      	ldr	r3, [pc, #96]	; (17c8 <HAL_SAI_TxCpltCallback+0x128>)
    1766:	2080      	movs	r0, #128	; 0x80
    1768:	681b      	ldr	r3, [r3, #0]
    176a:	4798      	blx	r3
    176c:	e7a6      	b.n	16bc <HAL_SAI_TxCpltCallback+0x1c>
			switchStrings = 1;
    176e:	491c      	ldr	r1, [pc, #112]	; (17e0 <HAL_SAI_TxCpltCallback+0x140>)
    1770:	2001      	movs	r0, #1
    1772:	6008      	str	r0, [r1, #0]
			diskBusy = 0;
    1774:	2100      	movs	r1, #0
    1776:	7021      	strb	r1, [r4, #0]
    1778:	e7c7      	b.n	170a <HAL_SAI_TxCpltCallback+0x6a>
			audioFrameFunction = audioFrameAdditive;
    177a:	4913      	ldr	r1, [pc, #76]	; (17c8 <HAL_SAI_TxCpltCallback+0x128>)
    177c:	4819      	ldr	r0, [pc, #100]	; (17e4 <HAL_SAI_TxCpltCallback+0x144>)
			audioFrameFunction = audioFrameVocal;
    177e:	6008      	str	r0, [r1, #0]
			currentActivePreset = voice;
    1780:	6819      	ldr	r1, [r3, #0]
    1782:	4819      	ldr	r0, [pc, #100]	; (17e8 <HAL_SAI_TxCpltCallback+0x148>)
    1784:	b2c9      	uxtb	r1, r1
    1786:	7001      	strb	r1, [r0, #0]
			diskBusy = 0;
    1788:	2000      	movs	r0, #0
			presetReady = 1;
    178a:	2101      	movs	r1, #1
			diskBusy = 0;
    178c:	7020      	strb	r0, [r4, #0]
			presetReady = 1;
    178e:	4c08      	ldr	r4, [pc, #32]	; (17b0 <HAL_SAI_TxCpltCallback+0x110>)
			resetStringInputs = 1;
    1790:	480f      	ldr	r0, [pc, #60]	; (17d0 <HAL_SAI_TxCpltCallback+0x130>)
			presetReady = 1;
    1792:	6021      	str	r1, [r4, #0]
			resetStringInputs = 1;
    1794:	7001      	strb	r1, [r0, #0]
    1796:	e7b8      	b.n	170a <HAL_SAI_TxCpltCallback+0x6a>
			switchStrings = 2;
    1798:	4911      	ldr	r1, [pc, #68]	; (17e0 <HAL_SAI_TxCpltCallback+0x140>)
    179a:	2002      	movs	r0, #2
    179c:	6008      	str	r0, [r1, #0]
			diskBusy = 0;
    179e:	2100      	movs	r1, #0
    17a0:	7021      	strb	r1, [r4, #0]
    17a2:	e7b2      	b.n	170a <HAL_SAI_TxCpltCallback+0x6a>
			audioFrameFunction = audioFrameVocal;
    17a4:	4908      	ldr	r1, [pc, #32]	; (17c8 <HAL_SAI_TxCpltCallback+0x128>)
    17a6:	4811      	ldr	r0, [pc, #68]	; (17ec <HAL_SAI_TxCpltCallback+0x14c>)
    17a8:	e7e9      	b.n	177e <HAL_SAI_TxCpltCallback+0xde>
    17aa:	bf00      	nop
    17ac:	200141ac 	.word	0x200141ac
    17b0:	20005078 	.word	0x20005078
    17b4:	30000200 	.word	0x30000200
    17b8:	20013f74 	.word	0x20013f74
    17bc:	200004b8 	.word	0x200004b8
    17c0:	2001a0e8 	.word	0x2001a0e8
    17c4:	2001a0e6 	.word	0x2001a0e6
    17c8:	20000f00 	.word	0x20000f00
    17cc:	00008b01 	.word	0x00008b01
    17d0:	2000549d 	.word	0x2000549d
    17d4:	20004f3c 	.word	0x20004f3c
    17d8:	30000000 	.word	0x30000000
    17dc:	e000ed00 	.word	0xe000ed00
    17e0:	20013f68 	.word	0x20013f68
    17e4:	00000e41 	.word	0x00000e41
    17e8:	20000720 	.word	0x20000720
    17ec:	00009041 	.word	0x00009041
    17f0:	f3af 8000 	nop.w
    17f4:	f3af 8000 	nop.w
    17f8:	f3af 8000 	nop.w
    17fc:	f3af 8000 	nop.w

00001800 <HAL_SAI_TxHalfCpltCallback>:

void __ATTR_ITCMRAM HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
    1800:	b538      	push	{r3, r4, r5, lr}
	if ((!diskBusy)&& (presetReady))
    1802:	4c41      	ldr	r4, [pc, #260]	; (1908 <HAL_SAI_TxHalfCpltCallback+0x108>)
    1804:	7820      	ldrb	r0, [r4, #0]
    1806:	b918      	cbnz	r0, 1810 <HAL_SAI_TxHalfCpltCallback+0x10>
    1808:	4b40      	ldr	r3, [pc, #256]	; (190c <HAL_SAI_TxHalfCpltCallback+0x10c>)
    180a:	681b      	ldr	r3, [r3, #0]
    180c:	2b00      	cmp	r3, #0
    180e:	d159      	bne.n	18c4 <HAL_SAI_TxHalfCpltCallback+0xc4>

	else
	{
		for (int i = 0; i < HALF_BUFFER_SIZE; i++)
		{
			audioOutBuffer[i] = 0;
    1810:	f44f 7200 	mov.w	r2, #512	; 0x200
    1814:	2100      	movs	r1, #0
    1816:	483e      	ldr	r0, [pc, #248]	; (1910 <HAL_SAI_TxHalfCpltCallback+0x110>)
    1818:	f007 ff62 	bl	96e0 <__memset_veneer>
		}
	}

	if (voice != prevVoice)
    181c:	4b3d      	ldr	r3, [pc, #244]	; (1914 <HAL_SAI_TxHalfCpltCallback+0x114>)
    181e:	4a3e      	ldr	r2, [pc, #248]	; (1918 <HAL_SAI_TxHalfCpltCallback+0x118>)
    1820:	6818      	ldr	r0, [r3, #0]
    1822:	6811      	ldr	r1, [r2, #0]
    1824:	4288      	cmp	r0, r1
    1826:	d020      	beq.n	186a <HAL_SAI_TxHalfCpltCallback+0x6a>
	{
		if (voice == 63)
    1828:	6819      	ldr	r1, [r3, #0]
    182a:	293f      	cmp	r1, #63	; 0x3f
    182c:	d04e      	beq.n	18cc <HAL_SAI_TxHalfCpltCallback+0xcc>
		{
			switchStrings = 1;
			diskBusy = 0;
		}
		else if (voice == 62)
    182e:	6819      	ldr	r1, [r3, #0]
    1830:	293e      	cmp	r1, #62	; 0x3e
    1832:	d060      	beq.n	18f6 <HAL_SAI_TxHalfCpltCallback+0xf6>
		{
			switchStrings = 2;
			diskBusy = 0;
		}
		else if (voice == 61)
    1834:	6819      	ldr	r1, [r3, #0]
    1836:	293d      	cmp	r1, #61	; 0x3d
    1838:	d04e      	beq.n	18d8 <HAL_SAI_TxHalfCpltCallback+0xd8>
			currentActivePreset = voice;
			diskBusy = 0;
			presetReady = 1;
			resetStringInputs = 1;
		}
		else if (voice == 60)
    183a:	6819      	ldr	r1, [r3, #0]
    183c:	293c      	cmp	r1, #60	; 0x3c
    183e:	d060      	beq.n	1902 <HAL_SAI_TxHalfCpltCallback+0x102>
			resetStringInputs = 1;
		}
		else
		{
			audioFrameFunction = audioFrameSynth;
			presetWaitingToLoad = 1;
    1840:	4936      	ldr	r1, [pc, #216]	; (191c <HAL_SAI_TxHalfCpltCallback+0x11c>)
    1842:	2001      	movs	r0, #1
			presetNumberToLoad = voice;
    1844:	4d36      	ldr	r5, [pc, #216]	; (1920 <HAL_SAI_TxHalfCpltCallback+0x120>)
			presetWaitingToLoad = 1;
    1846:	6008      	str	r0, [r1, #0]
			presetNumberToLoad = voice;
    1848:	6819      	ldr	r1, [r3, #0]
			audioFrameFunction = audioFrameSynth;
    184a:	4c36      	ldr	r4, [pc, #216]	; (1924 <HAL_SAI_TxHalfCpltCallback+0x124>)
			presetNumberToLoad = voice;
    184c:	b2c9      	uxtb	r1, r1
    184e:	7029      	strb	r1, [r5, #0]
			audioFrameFunction = audioFrameSynth;
    1850:	4d35      	ldr	r5, [pc, #212]	; (1928 <HAL_SAI_TxHalfCpltCallback+0x128>)
			presetReady = 0;
    1852:	492e      	ldr	r1, [pc, #184]	; (190c <HAL_SAI_TxHalfCpltCallback+0x10c>)
			audioFrameFunction = audioFrameSynth;
    1854:	6025      	str	r5, [r4, #0]
			presetReady = 0;
    1856:	2400      	movs	r4, #0
    1858:	600c      	str	r4, [r1, #0]
			if (prevVoice >= 60)
    185a:	6811      	ldr	r1, [r2, #0]
    185c:	293b      	cmp	r1, #59	; 0x3b
    185e:	dd01      	ble.n	1864 <HAL_SAI_TxHalfCpltCallback+0x64>
			{
				resetStringInputs = 1;
    1860:	4932      	ldr	r1, [pc, #200]	; (192c <HAL_SAI_TxHalfCpltCallback+0x12c>)
    1862:	7008      	strb	r0, [r1, #0]
			}
			frameLoadOverCount = 0;
    1864:	4932      	ldr	r1, [pc, #200]	; (1930 <HAL_SAI_TxHalfCpltCallback+0x130>)
    1866:	2000      	movs	r0, #0
    1868:	6008      	str	r0, [r1, #0]
		}
	}
	prevVoice = voice;
    186a:	6819      	ldr	r1, [r3, #0]
	SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)audioOutBuffer) & ~(uint32_t)0x1F), AUDIO_BUFFER_SIZE+32);
    186c:	4b28      	ldr	r3, [pc, #160]	; (1910 <HAL_SAI_TxHalfCpltCallback+0x110>)
	prevVoice = voice;
    186e:	6011      	str	r1, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    1870:	f3bf 8f4f 	dsb	sy
    1874:	4a2f      	ldr	r2, [pc, #188]	; (1934 <HAL_SAI_TxHalfCpltCallback+0x134>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    1876:	f103 0420 	add.w	r4, r3, #32
    187a:	f103 0140 	add.w	r1, r3, #64	; 0x40
    187e:	f103 0060 	add.w	r0, r3, #96	; 0x60
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    1882:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
    1886:	f8c2 4268 	str.w	r4, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    188a:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    188e:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    1892:	f103 0180 	add.w	r1, r3, #128	; 0x80
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    1896:	f8c2 0268 	str.w	r0, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    189a:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    189e:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    18a2:	f103 01e0 	add.w	r1, r3, #224	; 0xe0
    18a6:	f503 7380 	add.w	r3, r3, #256	; 0x100
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    18aa:	f8c2 4268 	str.w	r4, [r2, #616]	; 0x268
    18ae:	f8c2 0268 	str.w	r0, [r2, #616]	; 0x268
    18b2:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
    18b6:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
    18ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    18be:	f3bf 8f6f 	isb	sy
}
    18c2:	bd38      	pop	{r3, r4, r5, pc}
		audioFrameFunction(0);
    18c4:	4b17      	ldr	r3, [pc, #92]	; (1924 <HAL_SAI_TxHalfCpltCallback+0x124>)
    18c6:	681b      	ldr	r3, [r3, #0]
    18c8:	4798      	blx	r3
    18ca:	e7a7      	b.n	181c <HAL_SAI_TxHalfCpltCallback+0x1c>
			switchStrings = 1;
    18cc:	491a      	ldr	r1, [pc, #104]	; (1938 <HAL_SAI_TxHalfCpltCallback+0x138>)
    18ce:	2001      	movs	r0, #1
    18d0:	6008      	str	r0, [r1, #0]
			diskBusy = 0;
    18d2:	2100      	movs	r1, #0
    18d4:	7021      	strb	r1, [r4, #0]
    18d6:	e7c8      	b.n	186a <HAL_SAI_TxHalfCpltCallback+0x6a>
			audioFrameFunction = audioFrameAdditive;
    18d8:	4912      	ldr	r1, [pc, #72]	; (1924 <HAL_SAI_TxHalfCpltCallback+0x124>)
    18da:	4818      	ldr	r0, [pc, #96]	; (193c <HAL_SAI_TxHalfCpltCallback+0x13c>)
			audioFrameFunction = audioFrameVocal;
    18dc:	6008      	str	r0, [r1, #0]
			currentActivePreset = voice;
    18de:	6819      	ldr	r1, [r3, #0]
    18e0:	4817      	ldr	r0, [pc, #92]	; (1940 <HAL_SAI_TxHalfCpltCallback+0x140>)
    18e2:	b2c9      	uxtb	r1, r1
    18e4:	7001      	strb	r1, [r0, #0]
			diskBusy = 0;
    18e6:	2000      	movs	r0, #0
			presetReady = 1;
    18e8:	2101      	movs	r1, #1
			diskBusy = 0;
    18ea:	7020      	strb	r0, [r4, #0]
			presetReady = 1;
    18ec:	4c07      	ldr	r4, [pc, #28]	; (190c <HAL_SAI_TxHalfCpltCallback+0x10c>)
			resetStringInputs = 1;
    18ee:	480f      	ldr	r0, [pc, #60]	; (192c <HAL_SAI_TxHalfCpltCallback+0x12c>)
			presetReady = 1;
    18f0:	6021      	str	r1, [r4, #0]
			resetStringInputs = 1;
    18f2:	7001      	strb	r1, [r0, #0]
    18f4:	e7b9      	b.n	186a <HAL_SAI_TxHalfCpltCallback+0x6a>
			switchStrings = 2;
    18f6:	4910      	ldr	r1, [pc, #64]	; (1938 <HAL_SAI_TxHalfCpltCallback+0x138>)
    18f8:	2002      	movs	r0, #2
    18fa:	6008      	str	r0, [r1, #0]
			diskBusy = 0;
    18fc:	2100      	movs	r1, #0
    18fe:	7021      	strb	r1, [r4, #0]
    1900:	e7b3      	b.n	186a <HAL_SAI_TxHalfCpltCallback+0x6a>
			audioFrameFunction = audioFrameVocal;
    1902:	4908      	ldr	r1, [pc, #32]	; (1924 <HAL_SAI_TxHalfCpltCallback+0x124>)
    1904:	480f      	ldr	r0, [pc, #60]	; (1944 <HAL_SAI_TxHalfCpltCallback+0x144>)
    1906:	e7e9      	b.n	18dc <HAL_SAI_TxHalfCpltCallback+0xdc>
    1908:	200141ac 	.word	0x200141ac
    190c:	20005078 	.word	0x20005078
    1910:	30000000 	.word	0x30000000
    1914:	20013f74 	.word	0x20013f74
    1918:	200004b8 	.word	0x200004b8
    191c:	2001a0e8 	.word	0x2001a0e8
    1920:	2001a0e6 	.word	0x2001a0e6
    1924:	20000f00 	.word	0x20000f00
    1928:	00008b01 	.word	0x00008b01
    192c:	2000549d 	.word	0x2000549d
    1930:	20004f3c 	.word	0x20004f3c
    1934:	e000ed00 	.word	0xe000ed00
    1938:	20013f68 	.word	0x20013f68
    193c:	00000e41 	.word	0x00000e41
    1940:	20000720 	.word	0x20000720
    1944:	00009041 	.word	0x00009041
    1948:	f3af 8000 	nop.w
    194c:	f3af 8000 	nop.w
    1950:	f3af 8000 	nop.w
    1954:	f3af 8000 	nop.w
    1958:	f3af 8000 	nop.w
    195c:	f3af 8000 	nop.w

00001960 <HAL_SAI_ErrorCallback>:

void __ATTR_ITCMRAM HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
}
    1960:	4770      	bx	lr
    1962:	bf00      	nop
	...

00001980 <scaleDefault>:
}
    1980:	4770      	bx	lr
    1982:	bf00      	nop
    1984:	f3af 8000 	nop.w
    1988:	f3af 8000 	nop.w
    198c:	f3af 8000 	nop.w
    1990:	f3af 8000 	nop.w
    1994:	f3af 8000 	nop.w
    1998:	f3af 8000 	nop.w
    199c:	f3af 8000 	nop.w

000019a0 <scaleOscPitch>:
	return ((input * 2.0f) - 1.0f);
    19a0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    19a4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
    19a8:	eee0 7a07 	vfma.f32	s15, s0, s14
    19ac:	eeb0 0a67 	vmov.f32	s0, s15
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop
    19b4:	f3af 8000 	nop.w
    19b8:	f3af 8000 	nop.w
    19bc:	f3af 8000 	nop.w

000019c0 <scaleOscFine>:
	return (input * 200.0f) - 100.0f;
    19c0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 19d4 <scaleOscFine+0x14>
    19c4:	eddf 7a04 	vldr	s15, [pc, #16]	; 19d8 <scaleOscFine+0x18>
}
    19c8:	eee0 7a07 	vfma.f32	s15, s0, s14
    19cc:	eeb0 0a67 	vmov.f32	s0, s15
    19d0:	4770      	bx	lr
    19d2:	bf00      	nop
    19d4:	43480000 	.word	0x43480000
    19d8:	c2c80000 	.word	0xc2c80000
    19dc:	f3af 8000 	nop.w

000019e0 <scaleOscFreq>:
	return (input * 4000.0f) - 2000.0f;
    19e0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 19f4 <scaleOscFreq+0x14>
    19e4:	eddf 7a04 	vldr	s15, [pc, #16]	; 19f8 <scaleOscFreq+0x18>
}
    19e8:	eee0 7a07 	vfma.f32	s15, s0, s14
    19ec:	eeb0 0a67 	vmov.f32	s0, s15
    19f0:	4770      	bx	lr
    19f2:	bf00      	nop
    19f4:	457a0000 	.word	0x457a0000
    19f8:	c4fa0000 	.word	0xc4fa0000
    19fc:	f3af 8000 	nop.w

00001a00 <scaleFilterCutoff>:
	return (input * 127.0f);
    1a00:	eddf 7a02 	vldr	s15, [pc, #8]	; 1a0c <scaleFilterCutoff+0xc>
}
    1a04:	ee20 0a27 	vmul.f32	s0, s0, s15
    1a08:	4770      	bx	lr
    1a0a:	bf00      	nop
    1a0c:	42fe0000 	.word	0x42fe0000
    1a10:	f3af 8000 	nop.w
    1a14:	f3af 8000 	nop.w
    1a18:	f3af 8000 	nop.w
    1a1c:	f3af 8000 	nop.w

00001a20 <scaleFinalLowpass>:
	return ((input * 70.0f) + 58.0f);
    1a20:	ed9f 7a04 	vldr	s14, [pc, #16]	; 1a34 <scaleFinalLowpass+0x14>
    1a24:	eddf 7a04 	vldr	s15, [pc, #16]	; 1a38 <scaleFinalLowpass+0x18>
}
    1a28:	eee0 7a07 	vfma.f32	s15, s0, s14
    1a2c:	eeb0 0a67 	vmov.f32	s0, s15
    1a30:	4770      	bx	lr
    1a32:	bf00      	nop
    1a34:	428c0000 	.word	0x428c0000
    1a38:	42680000 	.word	0x42680000
    1a3c:	f3af 8000 	nop.w

00001a40 <blankFunction>:
}
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop
    1a44:	f3af 8000 	nop.w
    1a48:	f3af 8000 	nop.w
    1a4c:	f3af 8000 	nop.w
    1a50:	f3af 8000 	nop.w
    1a54:	f3af 8000 	nop.w
    1a58:	f3af 8000 	nop.w
    1a5c:	f3af 8000 	nop.w

00001a60 <scaleTranspose>:
{
    1a60:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.f);
    1a64:	ed9f 0a07 	vldr	s0, [pc, #28]	; 1a84 <scaleTranspose+0x24>
    1a68:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
    1a6c:	b508      	push	{r3, lr}
	input = LEAF_clip(0.0f, input, 1.f);
    1a6e:	f007 fd13 	bl	9498 <__LEAF_clip_veneer>
	return (input * 96.0f) - 48.0f;
    1a72:	ed9f 7a05 	vldr	s14, [pc, #20]	; 1a88 <scaleTranspose+0x28>
    1a76:	eddf 7a05 	vldr	s15, [pc, #20]	; 1a8c <scaleTranspose+0x2c>
}
    1a7a:	eee0 7a07 	vfma.f32	s15, s0, s14
    1a7e:	eeb0 0a67 	vmov.f32	s0, s15
    1a82:	bd08      	pop	{r3, pc}
    1a84:	00000000 	.word	0x00000000
    1a88:	42c00000 	.word	0x42c00000
    1a8c:	c2400000 	.word	0xc2400000
    1a90:	f3af 8000 	nop.w
    1a94:	f3af 8000 	nop.w
    1a98:	f3af 8000 	nop.w
    1a9c:	f3af 8000 	nop.w

00001aa0 <scalePitchBend>:
{
    1aa0:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
    1aa4:	ed9f 0a05 	vldr	s0, [pc, #20]	; 1abc <scalePitchBend+0x1c>
    1aa8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
    1aac:	b508      	push	{r3, lr}
	input = LEAF_clip(0.f, input, 1.f);
    1aae:	f007 fcf3 	bl	9498 <__LEAF_clip_veneer>
	return (input * 48.0f);
    1ab2:	eddf 7a03 	vldr	s15, [pc, #12]	; 1ac0 <scalePitchBend+0x20>
}
    1ab6:	ee20 0a27 	vmul.f32	s0, s0, s15
    1aba:	bd08      	pop	{r3, pc}
    1abc:	00000000 	.word	0x00000000
    1ac0:	42400000 	.word	0x42400000
    1ac4:	f3af 8000 	nop.w
    1ac8:	f3af 8000 	nop.w
    1acc:	f3af 8000 	nop.w
    1ad0:	f3af 8000 	nop.w
    1ad4:	f3af 8000 	nop.w
    1ad8:	f3af 8000 	nop.w
    1adc:	f3af 8000 	nop.w

00001ae0 <scaleFilterResonance>:
{
    1ae0:	b510      	push	{r4, lr}
    1ae2:	ed2d 8b02 	vpush	{d8}
    1ae6:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    1aea:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 1b58 <scaleFilterResonance+0x78>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1aee:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 1b5c <scaleFilterResonance+0x7c>
	input *= 2047.0f;
    1af2:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    1af6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    1afa:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    1afe:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1b02:	1c63      	adds	r3, r4, #1
    1b04:	ee00 3a90 	vmov	s1, r3
    1b08:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    1b0c:	f007 fcc4 	bl	9498 <__LEAF_clip_veneer>
    1b10:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    1b14:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1b18:	4b11      	ldr	r3, [pc, #68]	; (1b60 <scaleFilterResonance+0x80>)
	float inputFloat = (float)inputInt - input;
    1b1a:	ee78 0ac8 	vsub.f32	s1, s17, s16
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    1b1e:	ed9f 0a11 	vldr	s0, [pc, #68]	; 1b64 <scaleFilterResonance+0x84>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1b22:	ee17 2a10 	vmov	r2, s14
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    1b26:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1b2a:	ee38 8a27 	vadd.f32	s16, s16, s15
    1b2e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1b32:	edd4 7a00 	vldr	s15, [r4]
    1b36:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
    1b3a:	ed93 7a00 	vldr	s14, [r3]
    1b3e:	ee38 8a68 	vsub.f32	s16, s16, s17
    1b42:	ee60 0a87 	vmul.f32	s1, s1, s14
    1b46:	eee7 0a88 	vfma.f32	s1, s15, s16
}
    1b4a:	ecbd 8b02 	vpop	{d8}
    1b4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    1b52:	f007 bca1 	b.w	9498 <__LEAF_clip_veneer>
    1b56:	bf00      	nop
    1b58:	44ffe000 	.word	0x44ffe000
    1b5c:	00000000 	.word	0x00000000
    1b60:	2001a504 	.word	0x2001a504
    1b64:	3dcccccd 	.word	0x3dcccccd
    1b68:	f3af 8000 	nop.w
    1b6c:	f3af 8000 	nop.w
    1b70:	f3af 8000 	nop.w
    1b74:	f3af 8000 	nop.w
    1b78:	f3af 8000 	nop.w
    1b7c:	f3af 8000 	nop.w

00001b80 <scaleEnvTimes>:
{
    1b80:	b510      	push	{r4, lr}
    1b82:	ed2d 8b02 	vpush	{d8}
    1b86:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    1b8a:	ed9f 1a17 	vldr	s2, [pc, #92]	; 1be8 <scaleEnvTimes+0x68>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1b8e:	ed9f 0a17 	vldr	s0, [pc, #92]	; 1bec <scaleEnvTimes+0x6c>
	input *= 2047.0f;
    1b92:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    1b96:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    1b9a:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    1b9e:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1ba2:	1c63      	adds	r3, r4, #1
    1ba4:	ee00 3a90 	vmov	s1, r3
    1ba8:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    1bac:	f007 fc74 	bl	9498 <__LEAF_clip_veneer>
    1bb0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    1bb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1bb8:	4b0d      	ldr	r3, [pc, #52]	; (1bf0 <scaleEnvTimes+0x70>)
	float inputFloat = (float)inputInt - input;
    1bba:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    1bbe:	ee10 2a10 	vmov	r2, s0
    1bc2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1bc6:	ee38 8a07 	vadd.f32	s16, s16, s14
    1bca:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1bce:	ed94 7a00 	vldr	s14, [r4]
    1bd2:	edd3 6a00 	vldr	s13, [r3]
    1bd6:	ee38 8a68 	vsub.f32	s16, s16, s17
    1bda:	ee27 0aa6 	vmul.f32	s0, s15, s13
}
    1bde:	eea7 0a08 	vfma.f32	s0, s14, s16
    1be2:	ecbd 8b02 	vpop	{d8}
    1be6:	bd10      	pop	{r4, pc}
    1be8:	44ffe000 	.word	0x44ffe000
    1bec:	00000000 	.word	0x00000000
    1bf0:	20014204 	.word	0x20014204
    1bf4:	f3af 8000 	nop.w
    1bf8:	f3af 8000 	nop.w
    1bfc:	f3af 8000 	nop.w

00001c00 <scaleLFORates>:
{
    1c00:	b510      	push	{r4, lr}
    1c02:	ed2d 8b02 	vpush	{d8}
    1c06:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    1c0a:	ed9f 1a17 	vldr	s2, [pc, #92]	; 1c68 <scaleLFORates+0x68>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1c0e:	ed9f 0a17 	vldr	s0, [pc, #92]	; 1c6c <scaleLFORates+0x6c>
	input *= 2047.0f;
    1c12:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    1c16:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    1c1a:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    1c1e:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1c22:	1c63      	adds	r3, r4, #1
    1c24:	ee00 3a90 	vmov	s1, r3
    1c28:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    1c2c:	f007 fc34 	bl	9498 <__LEAF_clip_veneer>
    1c30:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    1c34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1c38:	4b0d      	ldr	r3, [pc, #52]	; (1c70 <scaleLFORates+0x70>)
	float inputFloat = (float)inputInt - input;
    1c3a:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    1c3e:	ee10 2a10 	vmov	r2, s0
    1c42:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1c46:	ee38 8a07 	vadd.f32	s16, s16, s14
    1c4a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1c4e:	ed94 7a00 	vldr	s14, [r4]
    1c52:	edd3 6a00 	vldr	s13, [r3]
    1c56:	ee38 8a68 	vsub.f32	s16, s16, s17
    1c5a:	ee27 0aa6 	vmul.f32	s0, s15, s13
}
    1c5e:	eea7 0a08 	vfma.f32	s0, s14, s16
    1c62:	ecbd 8b02 	vpop	{d8}
    1c66:	bd10      	pop	{r4, pc}
    1c68:	44ffe000 	.word	0x44ffe000
    1c6c:	00000000 	.word	0x00000000
    1c70:	20016330 	.word	0x20016330
    1c74:	f3af 8000 	nop.w
    1c78:	f3af 8000 	nop.w
    1c7c:	f3af 8000 	nop.w

00001c80 <randomNumber>:
	float num = random_values[currentRandom++] + 1.0f * 0.5f;
    1c80:	4906      	ldr	r1, [pc, #24]	; (1c9c <randomNumber+0x1c>)
    1c82:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    1c86:	4a06      	ldr	r2, [pc, #24]	; (1ca0 <randomNumber+0x20>)
    1c88:	780b      	ldrb	r3, [r1, #0]
    1c8a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    1c8e:	3301      	adds	r3, #1
    1c90:	ed92 0a00 	vldr	s0, [r2]
    1c94:	700b      	strb	r3, [r1, #0]
}
    1c96:	ee30 0a27 	vadd.f32	s0, s0, s15
    1c9a:	4770      	bx	lr
    1c9c:	20014172 	.word	0x20014172
    1ca0:	2001a100 	.word	0x2001a100
    1ca4:	f3af 8000 	nop.w
    1ca8:	f3af 8000 	nop.w
    1cac:	f3af 8000 	nop.w
    1cb0:	f3af 8000 	nop.w
    1cb4:	f3af 8000 	nop.w
    1cb8:	f3af 8000 	nop.w
    1cbc:	f3af 8000 	nop.w

00001cc0 <scaleTwo>:
}
    1cc0:	ee30 0a00 	vadd.f32	s0, s0, s0
    1cc4:	4770      	bx	lr
    1cc6:	bf00      	nop
    1cc8:	f3af 8000 	nop.w
    1ccc:	f3af 8000 	nop.w
    1cd0:	f3af 8000 	nop.w
    1cd4:	f3af 8000 	nop.w
    1cd8:	f3af 8000 	nop.w
    1cdc:	f3af 8000 	nop.w

00001ce0 <parsePreset>:
{
    1ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ce4:	460b      	mov	r3, r1
    1ce6:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
    1ce8:	2200      	movs	r2, #0
    1cea:	2101      	movs	r1, #1
    1cec:	48f0      	ldr	r0, [pc, #960]	; (20b0 <parsePreset+0x3d0>)
{
    1cee:	ed2d 8b02 	vpush	{d8}
    1cf2:	b08f      	sub	sp, #60	; 0x3c
    1cf4:	e9cd 4301 	strd	r4, r3, [sp, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
    1cf8:	f007 fb1e 	bl	9338 <__HAL_GPIO_WritePin_veneer>
  __ASM volatile ("cpsid i" : : : "memory");
    1cfc:	b672      	cpsid	i
	 presetReady = 0;
    1cfe:	2500      	movs	r5, #0
    1d00:	4bec      	ldr	r3, [pc, #944]	; (20b4 <parsePreset+0x3d4>)
	if (buffer[bufferIndex] == 17)
    1d02:	f8df a3c8 	ldr.w	sl, [pc, #968]	; 20cc <parsePreset+0x3ec>
		 audioOutBuffer[i] = 0;
    1d06:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1d0a:	4629      	mov	r1, r5
    1d0c:	48ea      	ldr	r0, [pc, #936]	; (20b8 <parsePreset+0x3d8>)
	 presetReady = 0;
    1d0e:	601d      	str	r5, [r3, #0]
		 audioOutBuffer[i] = 0;
    1d10:	f007 fce6 	bl	96e0 <__memset_veneer>
	if (buffer[bufferIndex] == 17)
    1d14:	f89a 4000 	ldrb.w	r4, [sl]
	audioMasterLevel = 0.0f;
    1d18:	2300      	movs	r3, #0
    1d1a:	4ae8      	ldr	r2, [pc, #928]	; (20bc <parsePreset+0x3dc>)
	if (buffer[bufferIndex] == 17)
    1d1c:	2c11      	cmp	r4, #17
	audioMasterLevel = 0.0f;
    1d1e:	6013      	str	r3, [r2, #0]
	if (buffer[bufferIndex] == 17)
    1d20:	f000 844c 	beq.w	25bc <parsePreset+0x8dc>
	uint16_t bufferIndex = 0;
    1d24:	462b      	mov	r3, r5
	uint16_t presetVersionNumber = 0;
    1d26:	9506      	str	r5, [sp, #24]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d28:	9a02      	ldr	r2, [sp, #8]
    1d2a:	ebc2 00c2 	rsb	r0, r2, r2, lsl #3
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1d2e:	1c5a      	adds	r2, r3, #1
    1d30:	f81a 9002 	ldrb.w	r9, [sl, r2]
    1d34:	1c9a      	adds	r2, r3, #2
    1d36:	f81a 8002 	ldrb.w	r8, [sl, r2]
    1d3a:	1cda      	adds	r2, r3, #3
    1d3c:	f81a e002 	ldrb.w	lr, [sl, r2]
    1d40:	1d1a      	adds	r2, r3, #4
    1d42:	f81a 1002 	ldrb.w	r1, [sl, r2]
    1d46:	1d5a      	adds	r2, r3, #5
    1d48:	f81a 5002 	ldrb.w	r5, [sl, r2]
    1d4c:	1d9a      	adds	r2, r3, #6
    1d4e:	9103      	str	r1, [sp, #12]
    1d50:	f81a c002 	ldrb.w	ip, [sl, r2]
    1d54:	1dda      	adds	r2, r3, #7
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d56:	49da      	ldr	r1, [pc, #872]	; (20c0 <parsePreset+0x3e0>)
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1d58:	f81a b002 	ldrb.w	fp, [sl, r2]
    1d5c:	f103 0208 	add.w	r2, r3, #8
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d60:	460e      	mov	r6, r1
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1d62:	9504      	str	r5, [sp, #16]
    1d64:	f81a 7002 	ldrb.w	r7, [sl, r2]
    1d68:	f103 0209 	add.w	r2, r3, #9
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d6c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1d70:	f81a 2002 	ldrb.w	r2, [sl, r2]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d74:	0040      	lsls	r0, r0, #1
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1d76:	9205      	str	r2, [sp, #20]
    1d78:	f103 020a 	add.w	r2, r3, #10
    1d7c:	f81a 5002 	ldrb.w	r5, [sl, r2]
		presetName[i] = buffer[bufferIndex];
    1d80:	4ad0      	ldr	r2, [pc, #832]	; (20c4 <parsePreset+0x3e4>)
    1d82:	7014      	strb	r4, [r2, #0]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d84:	5434      	strb	r4, [r6, r0]
		presetName[i] = buffer[bufferIndex];
    1d86:	9c03      	ldr	r4, [sp, #12]
    1d88:	f882 9001 	strb.w	r9, [r2, #1]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d8c:	f881 9001 	strb.w	r9, [r1, #1]
		presetName[i] = buffer[bufferIndex];
    1d90:	f882 8002 	strb.w	r8, [r2, #2]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d94:	f881 8002 	strb.w	r8, [r1, #2]
		presetName[i] = buffer[bufferIndex];
    1d98:	f882 e003 	strb.w	lr, [r2, #3]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d9c:	f881 e003 	strb.w	lr, [r1, #3]
		presetName[i] = buffer[bufferIndex];
    1da0:	7114      	strb	r4, [r2, #4]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1da2:	710c      	strb	r4, [r1, #4]
		presetName[i] = buffer[bufferIndex];
    1da4:	9c04      	ldr	r4, [sp, #16]
    1da6:	7154      	strb	r4, [r2, #5]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1da8:	714c      	strb	r4, [r1, #5]
		presetName[i] = buffer[bufferIndex];
    1daa:	f882 c006 	strb.w	ip, [r2, #6]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1dae:	f881 c006 	strb.w	ip, [r1, #6]
		presetName[i] = buffer[bufferIndex];
    1db2:	f882 b007 	strb.w	fp, [r2, #7]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1db6:	f881 b007 	strb.w	fp, [r1, #7]
		presetName[i] = buffer[bufferIndex];
    1dba:	7217      	strb	r7, [r2, #8]
    1dbc:	9805      	ldr	r0, [sp, #20]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1dbe:	720f      	strb	r7, [r1, #8]
		presetName[i] = buffer[bufferIndex];
    1dc0:	7250      	strb	r0, [r2, #9]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1dc2:	7248      	strb	r0, [r1, #9]
		presetName[i] = buffer[bufferIndex];
    1dc4:	7295      	strb	r5, [r2, #10]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1dc6:	728d      	strb	r5, [r1, #10]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1dc8:	f103 050b 	add.w	r5, r3, #11
    1dcc:	9802      	ldr	r0, [sp, #8]
    1dce:	f81a 5005 	ldrb.w	r5, [sl, r5]
    1dd2:	4cbd      	ldr	r4, [pc, #756]	; (20c8 <parsePreset+0x3e8>)
    1dd4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
		presetName[i] = buffer[bufferIndex];
    1dd8:	72d5      	strb	r5, [r2, #11]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1dda:	72cd      	strb	r5, [r1, #11]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1ddc:	f103 050c 	add.w	r5, r3, #12
    1de0:	f81a 5005 	ldrb.w	r5, [sl, r5]
		presetName[i] = buffer[bufferIndex];
    1de4:	7315      	strb	r5, [r2, #12]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1de6:	730d      	strb	r5, [r1, #12]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1de8:	f103 050d 	add.w	r5, r3, #13
    1dec:	f81a 5005 	ldrb.w	r5, [sl, r5]
		presetName[i] = buffer[bufferIndex];
    1df0:	7355      	strb	r5, [r2, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1df2:	f103 020e 	add.w	r2, r3, #14
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1df6:	734d      	strb	r5, [r1, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1df8:	f81a 2002 	ldrb.w	r2, [sl, r2]
    1dfc:	4611      	mov	r1, r2
    1dfe:	f103 020f 	add.w	r2, r3, #15
    1e02:	f81a 9002 	ldrb.w	r9, [sl, r2]
    1e06:	f103 0210 	add.w	r2, r3, #16
    1e0a:	f81a 8002 	ldrb.w	r8, [sl, r2]
    1e0e:	f103 0211 	add.w	r2, r3, #17
    1e12:	f81a b002 	ldrb.w	fp, [sl, r2]
    1e16:	f103 0212 	add.w	r2, r3, #18
    1e1a:	f81a 5002 	ldrb.w	r5, [sl, r2]
    1e1e:	f103 0213 	add.w	r2, r3, #19
    1e22:	f81a 6002 	ldrb.w	r6, [sl, r2]
    1e26:	f103 0214 	add.w	r2, r3, #20
    1e2a:	9505      	str	r5, [sp, #20]
    1e2c:	f81a e002 	ldrb.w	lr, [sl, r2]
    1e30:	f103 0215 	add.w	r2, r3, #21
    1e34:	9604      	str	r6, [sp, #16]
    1e36:	f81a c002 	ldrb.w	ip, [sl, r2]
    1e3a:	f103 0216 	add.w	r2, r3, #22
    1e3e:	f81a 7002 	ldrb.w	r7, [sl, r2]
    1e42:	f103 0217 	add.w	r2, r3, #23
    1e46:	f81a 6002 	ldrb.w	r6, [sl, r2]
    1e4a:	f103 0218 	add.w	r2, r3, #24
    1e4e:	f81a 5002 	ldrb.w	r5, [sl, r2]
    1e52:	f103 0219 	add.w	r2, r3, #25
    1e56:	f81a 2002 	ldrb.w	r2, [sl, r2]
    1e5a:	9203      	str	r2, [sp, #12]
    1e5c:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    1e60:	00c0      	lsls	r0, r0, #3
    1e62:	5421      	strb	r1, [r4, r0]
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    1e64:	f103 007e 	add.w	r0, r3, #126	; 0x7e
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1e68:	f882 9001 	strb.w	r9, [r2, #1]
    1e6c:	9905      	ldr	r1, [sp, #20]
    1e6e:	f882 8002 	strb.w	r8, [r2, #2]
    1e72:	f882 b003 	strb.w	fp, [r2, #3]
    1e76:	7111      	strb	r1, [r2, #4]
    1e78:	9904      	ldr	r1, [sp, #16]
    1e7a:	7151      	strb	r1, [r2, #5]
    1e7c:	9903      	ldr	r1, [sp, #12]
    1e7e:	f882 e006 	strb.w	lr, [r2, #6]
    1e82:	f882 c007 	strb.w	ip, [r2, #7]
    1e86:	7217      	strb	r7, [r2, #8]
    1e88:	7296      	strb	r6, [r2, #10]
    1e8a:	72d5      	strb	r5, [r2, #11]
    1e8c:	7311      	strb	r1, [r2, #12]
    1e8e:	f103 011a 	add.w	r1, r3, #26
    1e92:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1e96:	7351      	strb	r1, [r2, #13]
    1e98:	f103 011b 	add.w	r1, r3, #27
    1e9c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1ea0:	7391      	strb	r1, [r2, #14]
    1ea2:	f103 011c 	add.w	r1, r3, #28
    1ea6:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1eaa:	73d1      	strb	r1, [r2, #15]
    1eac:	f103 011d 	add.w	r1, r3, #29
    1eb0:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1eb4:	7411      	strb	r1, [r2, #16]
    1eb6:	f103 011e 	add.w	r1, r3, #30
    1eba:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1ebe:	7451      	strb	r1, [r2, #17]
    1ec0:	f103 011f 	add.w	r1, r3, #31
    1ec4:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1ec8:	7491      	strb	r1, [r2, #18]
    1eca:	f103 0120 	add.w	r1, r3, #32
    1ece:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1ed2:	7511      	strb	r1, [r2, #20]
    1ed4:	f103 0121 	add.w	r1, r3, #33	; 0x21
    1ed8:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1edc:	7551      	strb	r1, [r2, #21]
    1ede:	f103 0122 	add.w	r1, r3, #34	; 0x22
    1ee2:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1ee6:	7591      	strb	r1, [r2, #22]
    1ee8:	f103 0123 	add.w	r1, r3, #35	; 0x23
    1eec:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1ef0:	75d1      	strb	r1, [r2, #23]
    1ef2:	f103 0124 	add.w	r1, r3, #36	; 0x24
    1ef6:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1efa:	7611      	strb	r1, [r2, #24]
    1efc:	f103 0125 	add.w	r1, r3, #37	; 0x25
    1f00:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f04:	7651      	strb	r1, [r2, #25]
    1f06:	f103 0126 	add.w	r1, r3, #38	; 0x26
    1f0a:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f0e:	7691      	strb	r1, [r2, #26]
    1f10:	f103 0127 	add.w	r1, r3, #39	; 0x27
    1f14:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f18:	76d1      	strb	r1, [r2, #27]
    1f1a:	f103 0128 	add.w	r1, r3, #40	; 0x28
    1f1e:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f22:	7711      	strb	r1, [r2, #28]
    1f24:	f103 0129 	add.w	r1, r3, #41	; 0x29
    1f28:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f2c:	7791      	strb	r1, [r2, #30]
    1f2e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
    1f32:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f36:	77d1      	strb	r1, [r2, #31]
    1f38:	f103 012b 	add.w	r1, r3, #43	; 0x2b
    1f3c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f40:	f882 1020 	strb.w	r1, [r2, #32]
    1f44:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    1f48:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f4c:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
    1f50:	f103 012d 	add.w	r1, r3, #45	; 0x2d
    1f54:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f58:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    1f5c:	f103 012e 	add.w	r1, r3, #46	; 0x2e
    1f60:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f64:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    1f68:	f103 012f 	add.w	r1, r3, #47	; 0x2f
    1f6c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f70:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
    1f74:	f103 0130 	add.w	r1, r3, #48	; 0x30
    1f78:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f7c:	f882 1025 	strb.w	r1, [r2, #37]	; 0x25
    1f80:	f103 0131 	add.w	r1, r3, #49	; 0x31
    1f84:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f88:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
    1f8c:	f103 0132 	add.w	r1, r3, #50	; 0x32
    1f90:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f94:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    1f98:	f103 0133 	add.w	r1, r3, #51	; 0x33
    1f9c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1fa0:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
    1fa4:	f103 0134 	add.w	r1, r3, #52	; 0x34
    1fa8:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1fac:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
    1fb0:	f103 0135 	add.w	r1, r3, #53	; 0x35
    1fb4:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1fb8:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    1fbc:	f103 0136 	add.w	r1, r3, #54	; 0x36
    1fc0:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1fc4:	f882 102c 	strb.w	r1, [r2, #44]	; 0x2c
    1fc8:	f103 0137 	add.w	r1, r3, #55	; 0x37
    1fcc:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1fd0:	f882 102d 	strb.w	r1, [r2, #45]	; 0x2d
    1fd4:	f103 0138 	add.w	r1, r3, #56	; 0x38
    1fd8:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1fdc:	f882 102e 	strb.w	r1, [r2, #46]	; 0x2e
    1fe0:	f103 0139 	add.w	r1, r3, #57	; 0x39
    1fe4:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1fe8:	f882 102f 	strb.w	r1, [r2, #47]	; 0x2f
    1fec:	f103 013a 	add.w	r1, r3, #58	; 0x3a
    1ff0:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1ff4:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    1ff8:	f103 013b 	add.w	r1, r3, #59	; 0x3b
    1ffc:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2000:	f882 1032 	strb.w	r1, [r2, #50]	; 0x32
    2004:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    2008:	f81a 1001 	ldrb.w	r1, [sl, r1]
    200c:	f882 1033 	strb.w	r1, [r2, #51]	; 0x33
    2010:	f103 013d 	add.w	r1, r3, #61	; 0x3d
    2014:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2018:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
    201c:	f103 013e 	add.w	r1, r3, #62	; 0x3e
    2020:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2024:	f882 1035 	strb.w	r1, [r2, #53]	; 0x35
    2028:	f103 013f 	add.w	r1, r3, #63	; 0x3f
    202c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2030:	f882 1036 	strb.w	r1, [r2, #54]	; 0x36
    2034:	f103 0140 	add.w	r1, r3, #64	; 0x40
    2038:	f81a 1001 	ldrb.w	r1, [sl, r1]
    203c:	f882 1037 	strb.w	r1, [r2, #55]	; 0x37
    2040:	f103 0141 	add.w	r1, r3, #65	; 0x41
    2044:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2048:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
    204c:	f103 0142 	add.w	r1, r3, #66	; 0x42
    2050:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2054:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39
    2058:	f103 0143 	add.w	r1, r3, #67	; 0x43
    205c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2060:	f882 103a 	strb.w	r1, [r2, #58]	; 0x3a
    2064:	f103 0144 	add.w	r1, r3, #68	; 0x44
    2068:	f81a 1001 	ldrb.w	r1, [sl, r1]
    206c:	f8df a05c 	ldr.w	sl, [pc, #92]	; 20cc <parsePreset+0x3ec>
    2070:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
    2074:	f103 0145 	add.w	r1, r3, #69	; 0x45
    2078:	f81a 1001 	ldrb.w	r1, [sl, r1]
    207c:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    2080:	f103 0146 	add.w	r1, r3, #70	; 0x46
    2084:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2088:	f882 103e 	strb.w	r1, [r2, #62]	; 0x3e
    208c:	f103 0147 	add.w	r1, r3, #71	; 0x47
    2090:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2094:	f882 103f 	strb.w	r1, [r2, #63]	; 0x3f
    2098:	f103 0148 	add.w	r1, r3, #72	; 0x48
    209c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    20a0:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    20a4:	f103 0149 	add.w	r1, r3, #73	; 0x49
    20a8:	f81a 1001 	ldrb.w	r1, [sl, r1]
    20ac:	e010      	b.n	20d0 <parsePreset+0x3f0>
    20ae:	bf00      	nop
    20b0:	58020000 	.word	0x58020000
    20b4:	20005078 	.word	0x20005078
    20b8:	30000000 	.word	0x30000000
    20bc:	2000071c 	.word	0x2000071c
    20c0:	30042000 	.word	0x30042000
    20c4:	2001a0d8 	.word	0x2001a0d8
    20c8:	30043380 	.word	0x30043380
    20cc:	30042380 	.word	0x30042380
    20d0:	f882 1041 	strb.w	r1, [r2, #65]	; 0x41
    20d4:	f103 014a 	add.w	r1, r3, #74	; 0x4a
    20d8:	f81a 1001 	ldrb.w	r1, [sl, r1]
    20dc:	f882 1042 	strb.w	r1, [r2, #66]	; 0x42
    20e0:	f103 014b 	add.w	r1, r3, #75	; 0x4b
    20e4:	f81a 1001 	ldrb.w	r1, [sl, r1]
    20e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    20ec:	f103 014c 	add.w	r1, r3, #76	; 0x4c
    20f0:	f81a 1001 	ldrb.w	r1, [sl, r1]
    20f4:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
    20f8:	f103 014d 	add.w	r1, r3, #77	; 0x4d
    20fc:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2100:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
    2104:	f103 014e 	add.w	r1, r3, #78	; 0x4e
    2108:	f81a 1001 	ldrb.w	r1, [sl, r1]
    210c:	f882 1047 	strb.w	r1, [r2, #71]	; 0x47
    2110:	f103 014f 	add.w	r1, r3, #79	; 0x4f
    2114:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2118:	f882 1048 	strb.w	r1, [r2, #72]	; 0x48
    211c:	f103 0150 	add.w	r1, r3, #80	; 0x50
    2120:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2124:	f882 1049 	strb.w	r1, [r2, #73]	; 0x49
    2128:	f103 0151 	add.w	r1, r3, #81	; 0x51
    212c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2130:	f882 104a 	strb.w	r1, [r2, #74]	; 0x4a
    2134:	f103 0152 	add.w	r1, r3, #82	; 0x52
    2138:	f81a 1001 	ldrb.w	r1, [sl, r1]
    213c:	f882 104b 	strb.w	r1, [r2, #75]	; 0x4b
    2140:	f103 0153 	add.w	r1, r3, #83	; 0x53
    2144:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2148:	f882 104c 	strb.w	r1, [r2, #76]	; 0x4c
    214c:	f103 0154 	add.w	r1, r3, #84	; 0x54
    2150:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2154:	f882 104d 	strb.w	r1, [r2, #77]	; 0x4d
    2158:	f103 0155 	add.w	r1, r3, #85	; 0x55
    215c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2160:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    2164:	f103 0156 	add.w	r1, r3, #86	; 0x56
    2168:	f81a 1001 	ldrb.w	r1, [sl, r1]
    216c:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50
    2170:	f103 0157 	add.w	r1, r3, #87	; 0x57
    2174:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2178:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
    217c:	f103 0158 	add.w	r1, r3, #88	; 0x58
    2180:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2184:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
    2188:	f103 0159 	add.w	r1, r3, #89	; 0x59
    218c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2190:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
    2194:	f103 015a 	add.w	r1, r3, #90	; 0x5a
    2198:	f81a 1001 	ldrb.w	r1, [sl, r1]
    219c:	f882 1054 	strb.w	r1, [r2, #84]	; 0x54
    21a0:	f103 015b 	add.w	r1, r3, #91	; 0x5b
    21a4:	f81a 1001 	ldrb.w	r1, [sl, r1]
    21a8:	f882 1055 	strb.w	r1, [r2, #85]	; 0x55
    21ac:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    21b0:	f81a 1001 	ldrb.w	r1, [sl, r1]
    21b4:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
    21b8:	f103 015d 	add.w	r1, r3, #93	; 0x5d
    21bc:	f81a 1001 	ldrb.w	r1, [sl, r1]
    21c0:	f882 1057 	strb.w	r1, [r2, #87]	; 0x57
    21c4:	f103 015e 	add.w	r1, r3, #94	; 0x5e
    21c8:	f81a 1001 	ldrb.w	r1, [sl, r1]
    21cc:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
    21d0:	f103 015f 	add.w	r1, r3, #95	; 0x5f
    21d4:	f81a 1001 	ldrb.w	r1, [sl, r1]
    21d8:	f882 1059 	strb.w	r1, [r2, #89]	; 0x59
    21dc:	f103 0160 	add.w	r1, r3, #96	; 0x60
    21e0:	f81a 1001 	ldrb.w	r1, [sl, r1]
    21e4:	f882 105a 	strb.w	r1, [r2, #90]	; 0x5a
    21e8:	f103 0161 	add.w	r1, r3, #97	; 0x61
    21ec:	f81a 1001 	ldrb.w	r1, [sl, r1]
    21f0:	f882 105b 	strb.w	r1, [r2, #91]	; 0x5b
    21f4:	f103 0162 	add.w	r1, r3, #98	; 0x62
    21f8:	f81a 1001 	ldrb.w	r1, [sl, r1]
    21fc:	f882 105c 	strb.w	r1, [r2, #92]	; 0x5c
    2200:	f103 0163 	add.w	r1, r3, #99	; 0x63
    2204:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2208:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    220c:	f103 0164 	add.w	r1, r3, #100	; 0x64
    2210:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2214:	f882 105e 	strb.w	r1, [r2, #94]	; 0x5e
    2218:	f103 0165 	add.w	r1, r3, #101	; 0x65
    221c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2220:	f882 105f 	strb.w	r1, [r2, #95]	; 0x5f
    2224:	f103 0166 	add.w	r1, r3, #102	; 0x66
    2228:	f81a 1001 	ldrb.w	r1, [sl, r1]
    222c:	f882 1060 	strb.w	r1, [r2, #96]	; 0x60
    2230:	f103 0167 	add.w	r1, r3, #103	; 0x67
    2234:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2238:	f882 1061 	strb.w	r1, [r2, #97]	; 0x61
    223c:	f103 0168 	add.w	r1, r3, #104	; 0x68
    2240:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2244:	f882 1062 	strb.w	r1, [r2, #98]	; 0x62
    2248:	f103 0169 	add.w	r1, r3, #105	; 0x69
    224c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2250:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
    2254:	f103 016a 	add.w	r1, r3, #106	; 0x6a
    2258:	f81a 1001 	ldrb.w	r1, [sl, r1]
    225c:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
    2260:	f103 016b 	add.w	r1, r3, #107	; 0x6b
    2264:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2268:	f882 1065 	strb.w	r1, [r2, #101]	; 0x65
    226c:	f103 016c 	add.w	r1, r3, #108	; 0x6c
    2270:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2274:	f882 1066 	strb.w	r1, [r2, #102]	; 0x66
    2278:	f103 016d 	add.w	r1, r3, #109	; 0x6d
    227c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2280:	f882 1067 	strb.w	r1, [r2, #103]	; 0x67
    2284:	f103 016e 	add.w	r1, r3, #110	; 0x6e
    2288:	f81a 1001 	ldrb.w	r1, [sl, r1]
    228c:	f882 1068 	strb.w	r1, [r2, #104]	; 0x68
    2290:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    2294:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2298:	f882 1069 	strb.w	r1, [r2, #105]	; 0x69
    229c:	f103 0170 	add.w	r1, r3, #112	; 0x70
    22a0:	f81a 1001 	ldrb.w	r1, [sl, r1]
    22a4:	f882 106a 	strb.w	r1, [r2, #106]	; 0x6a
    22a8:	f103 0171 	add.w	r1, r3, #113	; 0x71
    22ac:	f81a 1001 	ldrb.w	r1, [sl, r1]
    22b0:	f882 106b 	strb.w	r1, [r2, #107]	; 0x6b
    22b4:	f103 0172 	add.w	r1, r3, #114	; 0x72
    22b8:	f81a 1001 	ldrb.w	r1, [sl, r1]
    22bc:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
    22c0:	f103 0173 	add.w	r1, r3, #115	; 0x73
    22c4:	f81a 1001 	ldrb.w	r1, [sl, r1]
    22c8:	f882 106d 	strb.w	r1, [r2, #109]	; 0x6d
    22cc:	f103 0174 	add.w	r1, r3, #116	; 0x74
    22d0:	f81a 1001 	ldrb.w	r1, [sl, r1]
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    22d4:	f81a 4000 	ldrb.w	r4, [sl, r0]
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    22d8:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
    22dc:	f103 0175 	add.w	r1, r3, #117	; 0x75
    22e0:	f81a 1001 	ldrb.w	r1, [sl, r1]
    22e4:	f882 106f 	strb.w	r1, [r2, #111]	; 0x6f
    22e8:	f103 0176 	add.w	r1, r3, #118	; 0x76
    22ec:	f81a 1001 	ldrb.w	r1, [sl, r1]
    22f0:	f882 1070 	strb.w	r1, [r2, #112]	; 0x70
    22f4:	f103 0177 	add.w	r1, r3, #119	; 0x77
    22f8:	f81a 1001 	ldrb.w	r1, [sl, r1]
    22fc:	f882 1071 	strb.w	r1, [r2, #113]	; 0x71
    2300:	f103 0178 	add.w	r1, r3, #120	; 0x78
    2304:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2308:	f882 1072 	strb.w	r1, [r2, #114]	; 0x72
    230c:	f103 0179 	add.w	r1, r3, #121	; 0x79
    2310:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2314:	f882 1073 	strb.w	r1, [r2, #115]	; 0x73
    2318:	f103 017a 	add.w	r1, r3, #122	; 0x7a
    231c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2320:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    2324:	eb0a 0100 	add.w	r1, sl, r0
    2328:	7849      	ldrb	r1, [r1, #1]
    232a:	eb01 2104 	add.w	r1, r1, r4, lsl #8
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    232e:	f103 047b 	add.w	r4, r3, #123	; 0x7b
    2332:	f81a 4004 	ldrb.w	r4, [sl, r4]
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    2336:	b289      	uxth	r1, r1
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    2338:	f882 4075 	strb.w	r4, [r2, #117]	; 0x75
    233c:	f103 047c 	add.w	r4, r3, #124	; 0x7c
    2340:	f81a 4004 	ldrb.w	r4, [sl, r4]
    2344:	f882 4076 	strb.w	r4, [r2, #118]	; 0x76
    2348:	f103 047d 	add.w	r4, r3, #125	; 0x7d
    234c:	f81a 4004 	ldrb.w	r4, [sl, r4]
    2350:	f882 4077 	strb.w	r4, [r2, #119]	; 0x77
	if (paramCount > size)
    2354:	9a01      	ldr	r2, [sp, #4]
    2356:	4291      	cmp	r1, r2
    2358:	dc0c      	bgt.n	2374 <parsePreset+0x694>
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
    235a:	eb00 0241 	add.w	r2, r0, r1, lsl #1
	if (paramEndCheck != 0xefef)
    235e:	f64e 75ef 	movw	r5, #61423	; 0xefef
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
    2362:	004c      	lsls	r4, r1, #1
    2364:	4452      	add	r2, sl
    2366:	7896      	ldrb	r6, [r2, #2]
    2368:	78d0      	ldrb	r0, [r2, #3]
    236a:	eb00 2006 	add.w	r0, r0, r6, lsl #8
	if (paramEndCheck != 0xefef)
    236e:	b280      	uxth	r0, r0
    2370:	42a8      	cmp	r0, r5
    2372:	d00c      	beq.n	238e <parsePreset+0x6ae>
		audioMasterLevel = 1.0f;
    2374:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
		presetWaitingToParse = 0;
    2378:	4bb9      	ldr	r3, [pc, #740]	; (2660 <parsePreset+0x980>)
    237a:	2200      	movs	r2, #0
		audioMasterLevel = 1.0f;
    237c:	48b9      	ldr	r0, [pc, #740]	; (2664 <parsePreset+0x984>)
    237e:	6001      	str	r1, [r0, #0]
		presetWaitingToParse = 0;
    2380:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
    2382:	b662      	cpsie	i
}
    2384:	b00f      	add	sp, #60	; 0x3c
    2386:	ecbd 8b02 	vpop	{d8}
    238a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
    238e:	7910      	ldrb	r0, [r2, #4]
    2390:	7952      	ldrb	r2, [r2, #5]
    2392:	eb02 2200 	add.w	r2, r2, r0, lsl #8
    2396:	b290      	uxth	r0, r2
	if (presetVersionNumber == 0)
    2398:	9a06      	ldr	r2, [sp, #24]
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
    239a:	9007      	str	r0, [sp, #28]
	if (presetVersionNumber == 0)
    239c:	2a00      	cmp	r2, #0
    239e:	f000 8117 	beq.w	25d0 <parsePreset+0x8f0>
		mappingEndLocation = (paramCount * 2) + (mappingCount * 6) + bufferIndex+6;
    23a2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    23a6:	f103 0284 	add.w	r2, r3, #132	; 0x84
    23aa:	4408      	add	r0, r1
    23ac:	eb02 0240 	add.w	r2, r2, r0, lsl #1
    23b0:	b292      	uxth	r2, r2
	if (mappingEndLocation > size)
    23b2:	9801      	ldr	r0, [sp, #4]
    23b4:	4282      	cmp	r2, r0
    23b6:	dcdd      	bgt.n	2374 <parsePreset+0x694>
	uint16_t mappingEndCheck = (buffer[mappingEndLocation] << 8) + buffer[mappingEndLocation+1];
    23b8:	eb0a 0502 	add.w	r5, sl, r2
    23bc:	f81a 0002 	ldrb.w	r0, [sl, r2]
    23c0:	786a      	ldrb	r2, [r5, #1]
    23c2:	eb02 2200 	add.w	r2, r2, r0, lsl #8
	if (mappingEndCheck != 0xfefe) //this check value is 0xfefe
    23c6:	f64f 60fe 	movw	r0, #65278	; 0xfefe
    23ca:	b292      	uxth	r2, r2
    23cc:	4282      	cmp	r2, r0
    23ce:	d1d1      	bne.n	2374 <parsePreset+0x694>
	bufferIndex = bufferIndex + 2;
    23d0:	f103 0780 	add.w	r7, r3, #128	; 0x80
    23d4:	463d      	mov	r5, r7
	for (int i = 0; i < paramCount; i++)
    23d6:	2900      	cmp	r1, #0
    23d8:	f000 86e6 	beq.w	31a8 <parsePreset+0x14c8>
    23dc:	4427      	add	r7, r4
    23de:	48a2      	ldr	r0, [pc, #648]	; (2668 <parsePreset+0x988>)
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    23e0:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 266c <parsePreset+0x98c>
    23e4:	b2bf      	uxth	r7, r7
	for (int i = 0; i < paramCount; i++)
    23e6:	4681      	mov	r9, r0
    23e8:	4604      	mov	r4, r0
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    23ea:	eb0a 0205 	add.w	r2, sl, r5
    23ee:	f81a 6005 	ldrb.w	r6, [sl, r5]
		bufferIndex += 2;
    23f2:	3502      	adds	r5, #2
	for (int i = 0; i < paramCount; i++)
    23f4:	341c      	adds	r4, #28
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    23f6:	7852      	ldrb	r2, [r2, #1]
		bufferIndex += 2;
    23f8:	b2ad      	uxth	r5, r5
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    23fa:	eb02 2206 	add.w	r2, r2, r6, lsl #8
	for (int i = 0; i < paramCount; i++)
    23fe:	42af      	cmp	r7, r5
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    2400:	ee07 2a90 	vmov	s15, r2
    2404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2408:	ee67 7a87 	vmul.f32	s15, s15, s14
    240c:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
    2410:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
	for (int i = 0; i < paramCount; i++)
    2414:	d1e9      	bne.n	23ea <parsePreset+0x70a>
    2416:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
    241a:	4a93      	ldr	r2, [pc, #588]	; (2668 <parsePreset+0x988>)
    241c:	4e94      	ldr	r6, [pc, #592]	; (2670 <parsePreset+0x990>)
    241e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
		params[i].setParam = &blankFunction;
    2422:	6156      	str	r6, [r2, #20]
	for (int i = 0; i < paramCount; i++)
    2424:	321c      	adds	r2, #28
    2426:	4294      	cmp	r4, r2
    2428:	d1fb      	bne.n	2422 <parsePreset+0x742>
    242a:	4a92      	ldr	r2, [pc, #584]	; (2674 <parsePreset+0x994>)
		params[i].scaleFunc = &scaleDefault;
    242c:	6102      	str	r2, [r0, #16]
	for (int i = 0; i < paramCount; i++)
    242e:	301c      	adds	r0, #28
    2430:	42a0      	cmp	r0, r4
    2432:	d1fb      	bne.n	242c <parsePreset+0x74c>
		bufferIndex += 2;
    2434:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    2438:	3380      	adds	r3, #128	; 0x80
    243a:	b29d      	uxth	r5, r3
	for (int i = paramCount; i < NUM_PARAMS; i++)
    243c:	299c      	cmp	r1, #156	; 0x9c
    243e:	f000 86b0 	beq.w	31a2 <parsePreset+0x14c2>
    2442:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    2446:	4c8c      	ldr	r4, [pc, #560]	; (2678 <parsePreset+0x998>)
    2448:	4e89      	ldr	r6, [pc, #548]	; (2670 <parsePreset+0x990>)
    244a:	eb09 0381 	add.w	r3, r9, r1, lsl #2
    244e:	4a89      	ldr	r2, [pc, #548]	; (2674 <parsePreset+0x994>)
			params[i].zeroToOneVal[v] = 0.0f;
    2450:	2100      	movs	r1, #0
    2452:	6019      	str	r1, [r3, #0]
    2454:	6059      	str	r1, [r3, #4]
		params[i].setParam = &blankFunction;
    2456:	e9c3 2604 	strd	r2, r6, [r3, #16]
	for (int i = paramCount; i < NUM_PARAMS; i++)
    245a:	331c      	adds	r3, #28
    245c:	429c      	cmp	r4, r3
    245e:	d1f8      	bne.n	2452 <parsePreset+0x772>
	params[Osc1Fine].scaleFunc = &scaleOscFine;
    2460:	4a86      	ldr	r2, [pc, #536]	; (267c <parsePreset+0x99c>)
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    2462:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
    2466:	4b86      	ldr	r3, [pc, #536]	; (2680 <parsePreset+0x9a0>)
	for (int i = 0; i < NUM_EFFECT; i++)
    2468:	2700      	movs	r7, #0
	params[Osc1Fine].scaleFunc = &scaleOscFine;
    246a:	f8c9 22e8 	str.w	r2, [r9, #744]	; 0x2e8
	params[Osc2Fine].scaleFunc = &scaleOscFine;
    246e:	f8c9 2454 	str.w	r2, [r9, #1108]	; 0x454
	params[Osc3Fine].scaleFunc = &scaleOscFine;
    2472:	f8c9 25c0 	str.w	r2, [r9, #1472]	; 0x5c0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
    2476:	4a83      	ldr	r2, [pc, #524]	; (2684 <parsePreset+0x9a4>)
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
    2478:	f8c9 3be0 	str.w	r3, [r9, #3040]	; 0xbe0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
    247c:	f8c9 2304 	str.w	r2, [r9, #772]	; 0x304
	params[Osc2Freq].scaleFunc = &scaleOscFreq;
    2480:	f8c9 2470 	str.w	r2, [r9, #1136]	; 0x470
	params[Osc3Freq].scaleFunc = &scaleOscFreq;
    2484:	f8c9 25dc 	str.w	r2, [r9, #1500]	; 0x5dc
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
    2488:	4a7f      	ldr	r2, [pc, #508]	; (2688 <parsePreset+0x9a8>)
	params[Envelope1Decay].scaleFunc = &scaleEnvTimes;
    248a:	f8c9 3bfc 	str.w	r3, [r9, #3068]	; 0xbfc
	params[Envelope1Release].scaleFunc = &scaleEnvTimes;
    248e:	f8c9 3c34 	str.w	r3, [r9, #3124]	; 0xc34
	params[Envelope2Attack].scaleFunc = &scaleEnvTimes;
    2492:	f8c9 3c88 	str.w	r3, [r9, #3208]	; 0xc88
	params[Envelope2Decay].scaleFunc = &scaleEnvTimes;
    2496:	f8c9 3ca4 	str.w	r3, [r9, #3236]	; 0xca4
	params[Envelope2Release].scaleFunc = &scaleEnvTimes;
    249a:	f8c9 3cdc 	str.w	r3, [r9, #3292]	; 0xcdc
	params[Envelope3Attack].scaleFunc = &scaleEnvTimes;
    249e:	f8c9 3d30 	str.w	r3, [r9, #3376]	; 0xd30
	params[Envelope3Decay].scaleFunc = &scaleEnvTimes;
    24a2:	f8c9 3d4c 	str.w	r3, [r9, #3404]	; 0xd4c
	params[Envelope3Release].scaleFunc = &scaleEnvTimes;
    24a6:	f8c9 3d84 	str.w	r3, [r9, #3460]	; 0xd84
	params[Envelope4Attack].scaleFunc = &scaleEnvTimes;
    24aa:	f8c9 3dd8 	str.w	r3, [r9, #3544]	; 0xdd8
	params[Envelope4Decay].scaleFunc = &scaleEnvTimes;
    24ae:	f8c9 3df4 	str.w	r3, [r9, #3572]	; 0xdf4
	params[Envelope4Release].scaleFunc = &scaleEnvTimes;
    24b2:	f8c9 3e2c 	str.w	r3, [r9, #3628]	; 0xe2c
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
    24b6:	f8c9 2aac 	str.w	r2, [r9, #2732]	; 0xaac
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    24ba:	4b74      	ldr	r3, [pc, #464]	; (268c <parsePreset+0x9ac>)
	params[Filter2Cutoff].scaleFunc = &scaleFilterCutoff;
    24bc:	f8c9 2b54 	str.w	r2, [r9, #2900]	; 0xb54
	params[Transpose].scaleFunc = &scaleTranspose;
    24c0:	4a73      	ldr	r2, [pc, #460]	; (2690 <parsePreset+0x9b0>)
	params[LFO4Rate].scaleFunc = &scaleLFORates;
    24c2:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 26b8 <parsePreset+0x9d8>
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    24c6:	4e73      	ldr	r6, [pc, #460]	; (2694 <parsePreset+0x9b4>)
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    24c8:	f8c9 32cc 	str.w	r3, [r9, #716]	; 0x2cc
    24cc:	f6ab 181c 	subw	r8, fp, #2332	; 0x91c
	params[Osc1Harmonics].scaleFunc = &scaleOscPitch;
    24d0:	f8c9 3358 	str.w	r3, [r9, #856]	; 0x358
	params[Osc2Pitch].scaleFunc = &scaleOscPitch;
    24d4:	f8c9 3438 	str.w	r3, [r9, #1080]	; 0x438
	params[Osc2Harmonics].scaleFunc = &scaleOscPitch;
    24d8:	f8c9 34c4 	str.w	r3, [r9, #1220]	; 0x4c4
	params[Osc3Pitch].scaleFunc = &scaleOscPitch;
    24dc:	f8c9 35a4 	str.w	r3, [r9, #1444]	; 0x5a4
	params[Osc3Harmonics].scaleFunc = &scaleOscPitch;
    24e0:	f8c9 3630 	str.w	r3, [r9, #1584]	; 0x630
	params[Transpose].scaleFunc = &scaleTranspose;
    24e4:	f8c9 21d0 	str.w	r2, [r9, #464]	; 0x1d0
	params[LFO1Rate].scaleFunc = &scaleLFORates;
    24e8:	4b6b      	ldr	r3, [pc, #428]	; (2698 <parsePreset+0x9b8>)
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    24ea:	4a6c      	ldr	r2, [pc, #432]	; (269c <parsePreset+0x9bc>)
	params[LFO1Rate].scaleFunc = &scaleLFORates;
    24ec:	f8c9 3e80 	str.w	r3, [r9, #3712]	; 0xe80
	params[LFO2Rate].scaleFunc = &scaleLFORates;
    24f0:	f8c9 3f0c 	str.w	r3, [r9, #3852]	; 0xf0c
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    24f4:	f8c9 6ae4 	str.w	r6, [r9, #2788]	; 0xae4
	params[Filter2Resonance].scaleFunc = &scaleFilterResonance;
    24f8:	f8c9 6b8c 	str.w	r6, [r9, #2956]	; 0xb8c
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    24fc:	f8c9 21ec 	str.w	r2, [r9, #492]	; 0x1ec
	params[LFO3Rate].scaleFunc = &scaleLFORates;
    2500:	f8c9 3f98 	str.w	r3, [r9, #3992]	; 0xf98
	params[LFO4Rate].scaleFunc = &scaleLFORates;
    2504:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
    2508:	4b65      	ldr	r3, [pc, #404]	; (26a0 <parsePreset+0x9c0>)
    250a:	f8cb 30cc 	str.w	r3, [fp, #204]	; 0xcc
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    250e:	edd8 7a00 	vldr	s15, [r8]
			setEffectsFunctions(effectType, i);
    2512:	4639      	mov	r1, r7
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    2514:	ee67 7a87 	vmul.f32	s15, s15, s14
    2518:	fef8 7a67 	vrinta.f32	s15, s15
    251c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    2520:	edcd 7a01 	vstr	s15, [sp, #4]
    2524:	f89d 0004 	ldrb.w	r0, [sp, #4]
			if (effectType > FXLowpass) // this assumes filters are the last effects
    2528:	280d      	cmp	r0, #13
				FXAlias[2].scaleFunc = &scaleFilterResonance;
    252a:	bf88      	it	hi
    252c:	f8c8 6064 	strhi.w	r6, [r8, #100]	; 0x64
			setEffectsFunctions(effectType, i);
    2530:	f006 ff26 	bl	9380 <__setEffectsFunctions_veneer>
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    2534:	edd8 7a01 	vldr	s15, [r8, #4]
			setEffectsFunctions(effectType, i);
    2538:	4639      	mov	r1, r7
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    253a:	ee67 7a87 	vmul.f32	s15, s15, s14
    253e:	fef8 7a67 	vrinta.f32	s15, s15
    2542:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    2546:	edcd 7a01 	vstr	s15, [sp, #4]
    254a:	f89d 0004 	ldrb.w	r0, [sp, #4]
			if (effectType > FXLowpass) // this assumes filters are the last effects
    254e:	280d      	cmp	r0, #13
    2550:	d946      	bls.n	25e0 <parsePreset+0x900>
	for (int i = 0; i < NUM_EFFECT; i++)
    2552:	3701      	adds	r7, #1
				FXAlias[2].scaleFunc = &scaleFilterResonance;
    2554:	f8c8 6064 	str.w	r6, [r8, #100]	; 0x64
			setEffectsFunctions(effectType, i);
    2558:	f006 ff12 	bl	9380 <__setEffectsFunctions_veneer>
	for (int i = 0; i < NUM_EFFECT; i++)
    255c:	f108 08e0 	add.w	r8, r8, #224	; 0xe0
    2560:	2f04      	cmp	r7, #4
    2562:	d1d4      	bne.n	250e <parsePreset+0x82e>
    2564:	4f40      	ldr	r7, [pc, #256]	; (2668 <parsePreset+0x988>)
    2566:	46b9      	mov	r9, r7
    2568:	463e      	mov	r6, r7
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    256a:	6933      	ldr	r3, [r6, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
    256c:	361c      	adds	r6, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    256e:	ed16 0a07 	vldr	s0, [r6, #-28]	; 0xffffffe4
    2572:	4798      	blx	r3
    2574:	ed06 0a05 	vstr	s0, [r6, #-20]	; 0xffffffec
		for (int i = 0; i < NUM_PARAMS; i++)
    2578:	42a6      	cmp	r6, r4
    257a:	d1f6      	bne.n	256a <parsePreset+0x88a>
    257c:	4e3a      	ldr	r6, [pc, #232]	; (2668 <parsePreset+0x988>)
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    257e:	6933      	ldr	r3, [r6, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
    2580:	361c      	adds	r6, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    2582:	ed16 0a06 	vldr	s0, [r6, #-24]	; 0xffffffe8
    2586:	4798      	blx	r3
    2588:	ed06 0a04 	vstr	s0, [r6, #-16]
		for (int i = 0; i < NUM_PARAMS; i++)
    258c:	42a6      	cmp	r6, r4
    258e:	d1f6      	bne.n	257e <parsePreset+0x89e>
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    2590:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    2594:	edd9 7af7 	vldr	s15, [r9, #988]	; 0x3dc
    2598:	ee67 7a87 	vmul.f32	s15, s15, s14
    259c:	fef8 7a67 	vrinta.f32	s15, s15
    25a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    25a4:	ee17 3a90 	vmov	r3, s15
	switch (oscshape)
    25a8:	2b05      	cmp	r3, #5
    25aa:	d832      	bhi.n	2612 <parsePreset+0x932>
    25ac:	e8df f013 	tbh	[pc, r3, lsl #1]
    25b0:	002e05f4 	.word	0x002e05f4
    25b4:	05ea05ef 	.word	0x05ea05ef
    25b8:	05e005e5 	.word	0x05e005e5
		if (buffer[bufferIndex + 1] == 18)
    25bc:	f89a 3001 	ldrb.w	r3, [sl, #1]
    25c0:	2b12      	cmp	r3, #18
    25c2:	d016      	beq.n	25f2 <parsePreset+0x912>
		presetName[i] = buffer[bufferIndex];
    25c4:	f89a 4004 	ldrb.w	r4, [sl, #4]
		bufferIndex = 4;
    25c8:	2304      	movs	r3, #4
	uint16_t presetVersionNumber = 0;
    25ca:	9506      	str	r5, [sp, #24]
    25cc:	f7ff bbac 	b.w	1d28 <parsePreset+0x48>
		mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
    25d0:	f103 0284 	add.w	r2, r3, #132	; 0x84
    25d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    25d8:	4422      	add	r2, r4
    25da:	4402      	add	r2, r0
    25dc:	b292      	uxth	r2, r2
    25de:	e6e8      	b.n	23b2 <parsePreset+0x6d2>
			setEffectsFunctions(effectType, i);
    25e0:	4639      	mov	r1, r7
	for (int i = 0; i < NUM_EFFECT; i++)
    25e2:	3701      	adds	r7, #1
			setEffectsFunctions(effectType, i);
    25e4:	f006 fecc 	bl	9380 <__setEffectsFunctions_veneer>
	for (int i = 0; i < NUM_EFFECT; i++)
    25e8:	f108 08e0 	add.w	r8, r8, #224	; 0xe0
    25ec:	2f04      	cmp	r7, #4
    25ee:	d18e      	bne.n	250e <parsePreset+0x82e>
    25f0:	e7b8      	b.n	2564 <parsePreset+0x884>
			presetVersionNumber = ((buffer[bufferIndex + 2] << 8) + buffer[bufferIndex + 3]);
    25f2:	f89a 2002 	ldrb.w	r2, [sl, #2]
    25f6:	f89a 3003 	ldrb.w	r3, [sl, #3]
		presetName[i] = buffer[bufferIndex];
    25fa:	f89a 4004 	ldrb.w	r4, [sl, #4]
			presetVersionNumber = ((buffer[bufferIndex + 2] << 8) + buffer[bufferIndex + 3]);
    25fe:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    2602:	b29b      	uxth	r3, r3
    2604:	9306      	str	r3, [sp, #24]
		bufferIndex = 4;
    2606:	2304      	movs	r3, #4
    2608:	f7ff bb8e 	b.w	1d28 <parsePreset+0x48>
			  shapeTick[i] = &sineTriTick;
    260c:	4b25      	ldr	r3, [pc, #148]	; (26a4 <parsePreset+0x9c4>)
    260e:	4a26      	ldr	r2, [pc, #152]	; (26a8 <parsePreset+0x9c8>)
    2610:	601a      	str	r2, [r3, #0]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    2612:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    2616:	ed99 7aaa 	vldr	s14, [r9, #680]	; 0x2a8
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    261a:	4a24      	ldr	r2, [pc, #144]	; (26ac <parsePreset+0x9cc>)
    261c:	4924      	ldr	r1, [pc, #144]	; (26b0 <parsePreset+0x9d0>)
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    261e:	eeb4 7ae7 	vcmpe.f32	s14, s15
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    2622:	edd2 7a00 	vldr	s15, [r2]
    2626:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    262a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    262e:	ee67 7a87 	vmul.f32	s15, s15, s14
			oscsEnabled[i] = 0;
    2632:	bfd4      	ite	le
    2634:	2000      	movle	r0, #0
			oscsEnabled[i] = 1;
    2636:	2001      	movgt	r0, #1
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    2638:	fef8 7a67 	vrinta.f32	s15, s15
    263c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2640:	7008      	strb	r0, [r1, #0]
			enabledCount++;
    2642:	4603      	mov	r3, r0
    2644:	491b      	ldr	r1, [pc, #108]	; (26b4 <parsePreset+0x9d4>)
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    2646:	ee17 2a90 	vmov	r2, s15
    264a:	6008      	str	r0, [r1, #0]
	switch (oscshape)
    264c:	2a05      	cmp	r2, #5
    264e:	d838      	bhi.n	26c2 <parsePreset+0x9e2>
    2650:	e8df f012 	tbh	[pc, r2, lsl #1]
    2654:	00340589 	.word	0x00340589
    2658:	057f0584 	.word	0x057f0584
    265c:	0575057a 	.word	0x0575057a
    2660:	2001a0ec 	.word	0x2001a0ec
    2664:	2000071c 	.word	0x2000071c
    2668:	20018fbc 	.word	0x20018fbc
    266c:	377ffff6 	.word	0x377ffff6
    2670:	00001a41 	.word	0x00001a41
    2674:	00001981 	.word	0x00001981
    2678:	2001a0cc 	.word	0x2001a0cc
    267c:	000019c1 	.word	0x000019c1
    2680:	00001b81 	.word	0x00001b81
    2684:	000019e1 	.word	0x000019e1
    2688:	00001a01 	.word	0x00001a01
    268c:	000019a1 	.word	0x000019a1
    2690:	00001a61 	.word	0x00001a61
    2694:	00001ae1 	.word	0x00001ae1
    2698:	00001c01 	.word	0x00001c01
    269c:	00001aa1 	.word	0x00001aa1
    26a0:	00001a21 	.word	0x00001a21
    26a4:	2001d540 	.word	0x2001d540
    26a8:	00005ec1 	.word	0x00005ec1
    26ac:	20019504 	.word	0x20019504
    26b0:	2001d39c 	.word	0x2001d39c
    26b4:	20018fb0 	.word	0x20018fb0
    26b8:	20019fbc 	.word	0x20019fbc
			  shapeTick[i] = &sineTriTick;
    26bc:	4a15      	ldr	r2, [pc, #84]	; (2714 <parsePreset+0xa34>)
    26be:	4816      	ldr	r0, [pc, #88]	; (2718 <parsePreset+0xa38>)
    26c0:	6050      	str	r0, [r2, #4]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    26c2:	4a16      	ldr	r2, [pc, #88]	; (271c <parsePreset+0xa3c>)
    26c4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    26c8:	ed92 7a00 	vldr	s14, [r2]
    26cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
    26d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    26d4:	f340 850d 	ble.w	30f2 <parsePreset+0x1412>
			enabledCount++;
    26d8:	3301      	adds	r3, #1
			oscOn[i] = 1;
    26da:	2201      	movs	r2, #1
			enabledCount++;
    26dc:	b2db      	uxtb	r3, r3
			oscsEnabled[i] = 1;
    26de:	4610      	mov	r0, r2
    26e0:	4c0f      	ldr	r4, [pc, #60]	; (2720 <parsePreset+0xa40>)
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    26e2:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    26e6:	6048      	str	r0, [r1, #4]
    26e8:	7062      	strb	r2, [r4, #1]
    26ea:	4a0e      	ldr	r2, [pc, #56]	; (2724 <parsePreset+0xa44>)
    26ec:	edd2 7a00 	vldr	s15, [r2]
    26f0:	ee67 7a87 	vmul.f32	s15, s15, s14
    26f4:	fef8 7a67 	vrinta.f32	s15, s15
    26f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    26fc:	ee17 2a90 	vmov	r2, s15
	switch (oscshape)
    2700:	2a05      	cmp	r2, #5
    2702:	d814      	bhi.n	272e <parsePreset+0xa4e>
    2704:	e8df f012 	tbh	[pc, r2, lsl #1]
    2708:	05110516 	.word	0x05110516
    270c:	0507050c 	.word	0x0507050c
    2710:	05020010 	.word	0x05020010
    2714:	2001d540 	.word	0x2001d540
    2718:	00005ec1 	.word	0x00005ec1
    271c:	200193d0 	.word	0x200193d0
    2720:	2001d39c 	.word	0x2001d39c
    2724:	20019670 	.word	0x20019670
			  shapeTick[i] = &sineTick;
    2728:	4a9a      	ldr	r2, [pc, #616]	; (2994 <parsePreset+0xcb4>)
    272a:	489b      	ldr	r0, [pc, #620]	; (2998 <parsePreset+0xcb8>)
    272c:	6090      	str	r0, [r2, #8]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    272e:	4a9b      	ldr	r2, [pc, #620]	; (299c <parsePreset+0xcbc>)
    2730:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    2734:	ed92 7a00 	vldr	s14, [r2]
    2738:	eeb4 7ae7 	vcmpe.f32	s14, s15
    273c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2740:	f340 84d3 	ble.w	30ea <parsePreset+0x140a>
			enabledCount++;
    2744:	3301      	adds	r3, #1
			oscOn[i] = 1;
    2746:	2201      	movs	r2, #1
			enabledCount++;
    2748:	b2db      	uxtb	r3, r3
			oscsEnabled[i] = 1;
    274a:	4610      	mov	r0, r2
	if (params[Noise].realVal[0]  > 0.5f)
    274c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    2750:	4e93      	ldr	r6, [pc, #588]	; (29a0 <parsePreset+0xcc0>)
	if (params[Noise].realVal[0]  > 0.5f)
    2752:	ed99 6a80 	vldr	s12, [r9, #512]	; 0x200
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    2756:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
    275a:	6088      	str	r0, [r1, #8]
	oscAmpMult = oscAmpMultArray[enabledCount];
    275c:	f206 4444 	addw	r4, r6, #1092	; 0x444
    2760:	4990      	ldr	r1, [pc, #576]	; (29a4 <parsePreset+0xcc4>)
	if (params[Noise].realVal[0]  > 0.5f)
    2762:	eeb4 6ae7 	vcmpe.f32	s12, s15
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    2766:	edd6 7a00 	vldr	s15, [r6]
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    276a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    276e:	708a      	strb	r2, [r1, #2]
	oscAmpMult = oscAmpMultArray[enabledCount];
    2770:	4a8d      	ldr	r2, [pc, #564]	; (29a8 <parsePreset+0xcc8>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    2772:	ee67 7aa6 	vmul.f32	s15, s15, s13
	if (params[Noise].realVal[0]  > 0.5f)
    2776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	oscAmpMult = oscAmpMultArray[enabledCount];
    277a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    277e:	4a8b      	ldr	r2, [pc, #556]	; (29ac <parsePreset+0xccc>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    2780:	fef8 7a67 	vrinta.f32	s15, s15
		setFilterTypes(filterType, i);
    2784:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	oscAmpMult = oscAmpMultArray[enabledCount];
    2788:	6819      	ldr	r1, [r3, #0]
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    278a:	4633      	mov	r3, r6
	if (params[Noise].realVal[0]  > 0.5f)
    278c:	bfcc      	ite	gt
    278e:	2301      	movgt	r3, #1
    2790:	2300      	movle	r3, #0
	oscAmpMult = oscAmpMultArray[enabledCount];
    2792:	6011      	str	r1, [r2, #0]
		setFilterTypes(filterType, i);
    2794:	ee17 0a90 	vmov	r0, s15
	if (params[Noise].realVal[0]  > 0.5f)
    2798:	4a85      	ldr	r2, [pc, #532]	; (29b0 <parsePreset+0xcd0>)
		setFilterTypes(filterType, i);
    279a:	2100      	movs	r1, #0
	if (params[Noise].realVal[0]  > 0.5f)
    279c:	7013      	strb	r3, [r2, #0]
		setFilterTypes(filterType, i);
    279e:	f006 ffe7 	bl	9770 <__setFilterTypes_veneer>
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    27a2:	edd6 7a2a 	vldr	s15, [r6, #168]	; 0xa8
	for (int i = 0; i < NUM_LFOS; i++)
    27a6:	460e      	mov	r6, r1
		setFilterTypes(filterType, i);
    27a8:	2101      	movs	r1, #1
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    27aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
    27ae:	fef8 7a67 	vrinta.f32	s15, s15
		setFilterTypes(filterType, i);
    27b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    27b6:	ee17 0a90 	vmov	r0, s15
    27ba:	f006 ffd9 	bl	9770 <__setFilterTypes_veneer>
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    27be:	4623      	mov	r3, r4
		setLFOShapes(LFOShape, i);
    27c0:	4631      	mov	r1, r6
	for (int i = 0; i < NUM_LFOS; i++)
    27c2:	3601      	adds	r6, #1
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    27c4:	348c      	adds	r4, #140	; 0x8c
    27c6:	edd3 7a00 	vldr	s15, [r3]
    27ca:	ee67 7a87 	vmul.f32	s15, s15, s14
    27ce:	fef8 7a67 	vrinta.f32	s15, s15
		setLFOShapes(LFOShape, i);
    27d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    27d6:	ee17 0a90 	vmov	r0, s15
    27da:	f006 ffc1 	bl	9760 <__setLFOShapes_veneer>
	for (int i = 0; i < NUM_LFOS; i++)
    27de:	2e04      	cmp	r6, #4
    27e0:	d1ed      	bne.n	27be <parsePreset+0xade>
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    27e2:	4874      	ldr	r0, [pc, #464]	; (29b4 <parsePreset+0xcd4>)
	for (int i = 0; i < NUM_PARAMS; i++)
    27e4:	f04f 0800 	mov.w	r8, #0
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    27e8:	4b73      	ldr	r3, [pc, #460]	; (29b8 <parsePreset+0xcd8>)
			params[i].objectNumber = 1;
    27ea:	2601      	movs	r6, #1
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    27ec:	f8c9 02d0 	str.w	r0, [r9, #720]	; 0x2d0
	params[Osc2Pitch].setParam = &setFreqMultPitch;
    27f0:	f8c9 043c 	str.w	r0, [r9, #1084]	; 0x43c
	params[Osc3Pitch].setParam = &setFreqMultPitch;
    27f4:	f8c9 05a8 	str.w	r0, [r9, #1448]	; 0x5a8
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    27f8:	4870      	ldr	r0, [pc, #448]	; (29bc <parsePreset+0xcdc>)
	params[Effect1Mix].setParam = &fxMixSet;
    27fa:	4971      	ldr	r1, [pc, #452]	; (29c0 <parsePreset+0xce0>)
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    27fc:	f8c9 035c 	str.w	r0, [r9, #860]	; 0x35c
	params[Osc2Harmonics].setParam = &setFreqMultHarm;
    2800:	f8c9 04c8 	str.w	r0, [r9, #1224]	; 0x4c8
	params[Osc3Harmonics].setParam = &setFreqMultHarm;
    2804:	f8c9 0634 	str.w	r0, [r9, #1588]	; 0x634
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    2808:	6818      	ldr	r0, [r3, #0]
	params[Effect1PostGain].setParam = &fxPostGainSet;
    280a:	4c6e      	ldr	r4, [pc, #440]	; (29c4 <parsePreset+0xce4>)
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    280c:	f8c9 0714 	str.w	r0, [r9, #1812]	; 0x714
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    2810:	6858      	ldr	r0, [r3, #4]
	params[Effect1Mix].setParam = &fxMixSet;
    2812:	f8c9 17a0 	str.w	r1, [r9, #1952]	; 0x7a0
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    2816:	f8c9 0730 	str.w	r0, [r9, #1840]	; 0x730
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    281a:	6898      	ldr	r0, [r3, #8]
	params[Effect1PostGain].setParam = &fxPostGainSet;
    281c:	f8c9 47bc 	str.w	r4, [r9, #1980]	; 0x7bc
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    2820:	f8c9 074c 	str.w	r0, [r9, #1868]	; 0x74c
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
    2824:	68d8      	ldr	r0, [r3, #12]
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    2826:	4a68      	ldr	r2, [pc, #416]	; (29c8 <parsePreset+0xce8>)
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
    2828:	f8c9 0768 	str.w	r0, [r9, #1896]	; 0x768
	params[Effect1Param5].setParam = effectSetters[0].setParam5;
    282c:	6918      	ldr	r0, [r3, #16]
    282e:	f8c9 0784 	str.w	r0, [r9, #1924]	; 0x784
	params[Effect2Param1].setParam = effectSetters[1].setParam1;
    2832:	6958      	ldr	r0, [r3, #20]
    2834:	f8c9 07f4 	str.w	r0, [r9, #2036]	; 0x7f4
	params[Effect2Param2].setParam = effectSetters[1].setParam2;
    2838:	6998      	ldr	r0, [r3, #24]
    283a:	f8c9 0810 	str.w	r0, [r9, #2064]	; 0x810
	params[Effect2Param3].setParam = effectSetters[1].setParam3;
    283e:	69d8      	ldr	r0, [r3, #28]
    2840:	f8c9 082c 	str.w	r0, [r9, #2092]	; 0x82c
	params[NoiseTilt].setParam = &noiseSetTilt;
    2844:	4861      	ldr	r0, [pc, #388]	; (29cc <parsePreset+0xcec>)
    2846:	f8c9 0228 	str.w	r0, [r9, #552]	; 0x228
	params[NoisePeakFreq].setParam = &noiseSetFreq;
    284a:	4861      	ldr	r0, [pc, #388]	; (29d0 <parsePreset+0xcf0>)
    284c:	f8c9 0260 	str.w	r0, [r9, #608]	; 0x260
	params[NoisePeakGain].setParam  = &noiseSetGain;
    2850:	4860      	ldr	r0, [pc, #384]	; (29d4 <parsePreset+0xcf4>)
    2852:	f8c9 0244 	str.w	r0, [r9, #580]	; 0x244
	params[Master].setParam = &setMaster;
    2856:	4860      	ldr	r0, [pc, #384]	; (29d8 <parsePreset+0xcf8>)
    2858:	f8c9 004c 	str.w	r0, [r9, #76]	; 0x4c
	params[Transpose].setParam = &setTranspose;
    285c:	485f      	ldr	r0, [pc, #380]	; (29dc <parsePreset+0xcfc>)
    285e:	f8c9 01d4 	str.w	r0, [r9, #468]	; 0x1d4
	params[PitchBendRange].setParam = &setPitchBendRange;
    2862:	485f      	ldr	r0, [pc, #380]	; (29e0 <parsePreset+0xd00>)
    2864:	f8c9 01f0 	str.w	r0, [r9, #496]	; 0x1f0
	params[OutputTone].setParam = &setFinalLowpass;
    2868:	485e      	ldr	r0, [pc, #376]	; (29e4 <parsePreset+0xd04>)
    286a:	f8cb 00d0 	str.w	r0, [fp, #208]	; 0xd0
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
    286e:	6a18      	ldr	r0, [r3, #32]
    2870:	f8c9 0848 	str.w	r0, [r9, #2120]	; 0x848
	params[Effect2Mix].setParam = &fxMixSet;
    2874:	f8c9 1880 	str.w	r1, [r9, #2176]	; 0x880
	params[Effect3Mix].setParam = &fxMixSet;
    2878:	f8c9 1960 	str.w	r1, [r9, #2400]	; 0x960
	params[Effect4Mix].setParam = &fxMixSet;
    287c:	f8c9 1a40 	str.w	r1, [r9, #2624]	; 0xa40
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    2880:	6a59      	ldr	r1, [r3, #36]	; 0x24
	params[Effect2PostGain].setParam = &fxPostGainSet;
    2882:	f8c9 489c 	str.w	r4, [r9, #2204]	; 0x89c
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    2886:	f8c9 1864 	str.w	r1, [r9, #2148]	; 0x864
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    288a:	6a99      	ldr	r1, [r3, #40]	; 0x28
	params[Effect3PostGain].setParam = &fxPostGainSet;
    288c:	f8c9 497c 	str.w	r4, [r9, #2428]	; 0x97c
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    2890:	f8c9 18d4 	str.w	r1, [r9, #2260]	; 0x8d4
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    2894:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
	params[Effect4PostGain].setParam = &fxPostGainSet;
    2896:	f8c9 4a5c 	str.w	r4, [r9, #2652]	; 0xa5c
		params[i].objectNumber = 0;
    289a:	4644      	mov	r4, r8
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    289c:	f8c9 18f0 	str.w	r1, [r9, #2288]	; 0x8f0
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    28a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
    28a2:	4851      	ldr	r0, [pc, #324]	; (29e8 <parsePreset+0xd08>)
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    28a4:	f8c9 190c 	str.w	r1, [r9, #2316]	; 0x90c
	params[Effect3Param4].setParam = effectSetters[2].setParam4;
    28a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
    28aa:	f8c9 1928 	str.w	r1, [r9, #2344]	; 0x928
	params[Effect3Param5].setParam = effectSetters[2].setParam5;
    28ae:	6b99      	ldr	r1, [r3, #56]	; 0x38
    28b0:	f8c9 1944 	str.w	r1, [r9, #2372]	; 0x944
	params[Effect4Param1].setParam = effectSetters[3].setParam1;
    28b4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    28b6:	f8c9 19b4 	str.w	r1, [r9, #2484]	; 0x9b4
	params[Effect4Param2].setParam = effectSetters[3].setParam2;
    28ba:	6c19      	ldr	r1, [r3, #64]	; 0x40
    28bc:	f8c9 19d0 	str.w	r1, [r9, #2512]	; 0x9d0
	params[Effect4Param3].setParam = effectSetters[3].setParam3;
    28c0:	6c59      	ldr	r1, [r3, #68]	; 0x44
    28c2:	f8c9 19ec 	str.w	r1, [r9, #2540]	; 0x9ec
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
    28c6:	6c99      	ldr	r1, [r3, #72]	; 0x48
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
    28c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
    28ca:	f8c9 1a08 	str.w	r1, [r9, #2568]	; 0xa08
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
    28ce:	f8c9 3a24 	str.w	r3, [r9, #2596]	; 0xa24
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    28d2:	6813      	ldr	r3, [r2, #0]
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    28d4:	4945      	ldr	r1, [pc, #276]	; (29ec <parsePreset+0xd0c>)
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    28d6:	f8c9 3ae8 	str.w	r3, [r9, #2792]	; 0xae8
	params[Filter1Gain].setParam = filterSetters[0].setGain;
    28da:	6853      	ldr	r3, [r2, #4]
    28dc:	f8c9 3acc 	str.w	r3, [r9, #2764]	; 0xacc
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    28e0:	6893      	ldr	r3, [r2, #8]
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    28e2:	f8c9 1be4 	str.w	r1, [r9, #3044]	; 0xbe4
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    28e6:	f8c9 3b90 	str.w	r3, [r9, #2960]	; 0xb90
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    28ea:	68d3      	ldr	r3, [r2, #12]
	params[Envelope2Attack].setParam = &setEnvelopeAttack;
    28ec:	f8c9 1c8c 	str.w	r1, [r9, #3212]	; 0xc8c
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    28f0:	f8c9 3b74 	str.w	r3, [r9, #2932]	; 0xb74
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    28f4:	4b3e      	ldr	r3, [pc, #248]	; (29f0 <parsePreset+0xd10>)
	params[Envelope3Attack].setParam = &setEnvelopeAttack;
    28f6:	f8c9 1d34 	str.w	r1, [r9, #3380]	; 0xd34
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    28fa:	f8c9 3c00 	str.w	r3, [r9, #3072]	; 0xc00
	params[Envelope2Decay].setParam = &setEnvelopeDecay;
    28fe:	f8c9 3ca8 	str.w	r3, [r9, #3240]	; 0xca8
	params[Envelope3Decay].setParam = &setEnvelopeDecay;
    2902:	f8c9 3d50 	str.w	r3, [r9, #3408]	; 0xd50
	params[Envelope4Decay].setParam = &setEnvelopeDecay;
    2906:	f8c9 3df8 	str.w	r3, [r9, #3576]	; 0xdf8
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
    290a:	4b3a      	ldr	r3, [pc, #232]	; (29f4 <parsePreset+0xd14>)
	params[Envelope4Attack].setParam = &setEnvelopeAttack;
    290c:	f8c9 1ddc 	str.w	r1, [r9, #3548]	; 0xddc
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
    2910:	f8c9 3c1c 	str.w	r3, [r9, #3100]	; 0xc1c
	params[Envelope2Sustain].setParam = &setEnvelopeSustain;
    2914:	f8c9 3cc4 	str.w	r3, [r9, #3268]	; 0xcc4
	params[Envelope3Sustain].setParam = &setEnvelopeSustain;
    2918:	f8c9 3d6c 	str.w	r3, [r9, #3436]	; 0xd6c
	params[Envelope4Sustain].setParam = &setEnvelopeSustain;
    291c:	f8c9 3e14 	str.w	r3, [r9, #3604]	; 0xe14
	params[Envelope1Release].setParam = &setEnvelopeRelease;
    2920:	4b35      	ldr	r3, [pc, #212]	; (29f8 <parsePreset+0xd18>)
    2922:	f8c9 3c38 	str.w	r3, [r9, #3128]	; 0xc38
	params[Envelope2Release].setParam = &setEnvelopeRelease;
    2926:	f8c9 3ce0 	str.w	r3, [r9, #3296]	; 0xce0
	params[Envelope3Release].setParam = &setEnvelopeRelease;
    292a:	f8c9 3d88 	str.w	r3, [r9, #3464]	; 0xd88
	params[Envelope4Release].setParam = &setEnvelopeRelease;
    292e:	f8c9 3e30 	str.w	r3, [r9, #3632]	; 0xe30
	params[Envelope1Leak].setParam = &setEnvelopeLeak;
    2932:	4b32      	ldr	r3, [pc, #200]	; (29fc <parsePreset+0xd1c>)
    2934:	f8c9 3c54 	str.w	r3, [r9, #3156]	; 0xc54
	params[Envelope2Leak].setParam = &setEnvelopeLeak;
    2938:	f8c9 3cfc 	str.w	r3, [r9, #3324]	; 0xcfc
	params[Envelope3Leak].setParam = &setEnvelopeLeak;
    293c:	f8c9 3da4 	str.w	r3, [r9, #3492]	; 0xda4
	params[Envelope4Leak].setParam = &setEnvelopeLeak;
    2940:	f8c9 3e4c 	str.w	r3, [r9, #3660]	; 0xe4c
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
    2944:	6803      	ldr	r3, [r0, #0]
    2946:	f8c9 3e84 	str.w	r3, [r9, #3716]	; 0xe84
	params[LFO2Rate].setParam = lfoSetters[1].setRate;
    294a:	68c3      	ldr	r3, [r0, #12]
    294c:	f8c9 3f10 	str.w	r3, [r9, #3856]	; 0xf10
	params[LFO3Rate].setParam = lfoSetters[2].setRate;
    2950:	6983      	ldr	r3, [r0, #24]
    2952:	f8c9 3f9c 	str.w	r3, [r9, #3996]	; 0xf9c
	params[LFO4Rate].setParam = lfoSetters[3].setRate;
    2956:	6a43      	ldr	r3, [r0, #36]	; 0x24
    2958:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
	params[LFO1Shape].setParam = lfoSetters[0].setShape;
    295c:	6843      	ldr	r3, [r0, #4]
    295e:	f8c9 3ea0 	str.w	r3, [r9, #3744]	; 0xea0
	params[LFO2Shape].setParam = lfoSetters[1].setShape;
    2962:	6903      	ldr	r3, [r0, #16]
    2964:	f8c9 3f2c 	str.w	r3, [r9, #3884]	; 0xf2c
	params[LFO3Shape].setParam = lfoSetters[2].setShape;
    2968:	69c3      	ldr	r3, [r0, #28]
    296a:	f8c9 3fb8 	str.w	r3, [r9, #4024]	; 0xfb8
	params[LFO4Shape].setParam = lfoSetters[3].setShape;
    296e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    2970:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
	params[LFO1Phase].setParam = lfoSetters[0].setPhase;
    2974:	6883      	ldr	r3, [r0, #8]
    2976:	f8c9 3ebc 	str.w	r3, [r9, #3772]	; 0xebc
	params[LFO2Phase].setParam = lfoSetters[1].setPhase;
    297a:	6943      	ldr	r3, [r0, #20]
    297c:	f8c9 3f48 	str.w	r3, [r9, #3912]	; 0xf48
	params[LFO3Phase].setParam = lfoSetters[2].setPhase;
    2980:	6a03      	ldr	r3, [r0, #32]
    2982:	f8c9 3fd4 	str.w	r3, [r9, #4052]	; 0xfd4
	params[LFO4Phase].setParam = lfoSetters[3].setPhase;
    2986:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    2988:	f8cb 3060 	str.w	r3, [fp, #96]	; 0x60
	params[OutputAmp].setParam = &setAmp;
    298c:	4b1c      	ldr	r3, [pc, #112]	; (2a00 <parsePreset+0xd20>)
    298e:	f8cb 30b4 	str.w	r3, [fp, #180]	; 0xb4
    2992:	e03b      	b.n	2a0c <parsePreset+0xd2c>
    2994:	2001d540 	.word	0x2001d540
    2998:	00005fc1 	.word	0x00005fc1
    299c:	2001953c 	.word	0x2001953c
    29a0:	20019a44 	.word	0x20019a44
    29a4:	2001d39c 	.word	0x2001d39c
    29a8:	2000089c 	.word	0x2000089c
    29ac:	20000898 	.word	0x20000898
    29b0:	2001d348 	.word	0x2001d348
    29b4:	000064e1 	.word	0x000064e1
    29b8:	200141b0 	.word	0x200141b0
    29bc:	00006541 	.word	0x00006541
    29c0:	000075c1 	.word	0x000075c1
    29c4:	000075e1 	.word	0x000075e1
    29c8:	20016204 	.word	0x20016204
    29cc:	00008301 	.word	0x00008301
    29d0:	000083a1 	.word	0x000083a1
    29d4:	00008361 	.word	0x00008361
    29d8:	00006b01 	.word	0x00006b01
    29dc:	00006b21 	.word	0x00006b21
    29e0:	00006b41 	.word	0x00006b41
    29e4:	00006b61 	.word	0x00006b61
    29e8:	20018330 	.word	0x20018330
    29ec:	00006a21 	.word	0x00006a21
    29f0:	00006a41 	.word	0x00006a41
    29f4:	00006a61 	.word	0x00006a61
    29f8:	00006a81 	.word	0x00006a81
    29fc:	00006aa1 	.word	0x00006aa1
    2a00:	00006ae1 	.word	0x00006ae1
    2a04:	3c010204 	.word	0x3c010204
    2a08:	42fe0000 	.word	0x42fe0000
		if ((i >= Osc1) && (i < Osc2))
    2a0c:	f1a8 0318 	sub.w	r3, r8, #24
		params[i].objectNumber = 0;
    2a10:	763c      	strb	r4, [r7, #24]
		if ((i >= Osc1) && (i < Osc2))
    2a12:	2b0c      	cmp	r3, #12
    2a14:	f240 8278 	bls.w	2f08 <parsePreset+0x1228>
		else if ((i >= Osc2) && (i < Osc3))
    2a18:	f1a8 0325 	sub.w	r3, r8, #37	; 0x25
    2a1c:	2b72      	cmp	r3, #114	; 0x72
    2a1e:	f200 8273 	bhi.w	2f08 <parsePreset+0x1228>
    2a22:	e8df f013 	tbh	[pc, r3, lsl #1]
    2a26:	0073      	.short	0x0073
    2a28:	00730073 	.word	0x00730073
    2a2c:	00730073 	.word	0x00730073
    2a30:	00730073 	.word	0x00730073
    2a34:	00730073 	.word	0x00730073
    2a38:	00730073 	.word	0x00730073
    2a3c:	00730073 	.word	0x00730073
    2a40:	026b026b 	.word	0x026b026b
    2a44:	026b026b 	.word	0x026b026b
    2a48:	026b026b 	.word	0x026b026b
    2a4c:	026b026b 	.word	0x026b026b
    2a50:	026b026b 	.word	0x026b026b
    2a54:	026b026b 	.word	0x026b026b
    2a58:	0271026b 	.word	0x0271026b
    2a5c:	02710271 	.word	0x02710271
    2a60:	02710271 	.word	0x02710271
    2a64:	02710271 	.word	0x02710271
    2a68:	00730271 	.word	0x00730271
    2a6c:	00730073 	.word	0x00730073
    2a70:	00730073 	.word	0x00730073
    2a74:	00730073 	.word	0x00730073
    2a78:	026b0073 	.word	0x026b0073
    2a7c:	026b026b 	.word	0x026b026b
    2a80:	026b026b 	.word	0x026b026b
    2a84:	026b026b 	.word	0x026b026b
    2a88:	026e026b 	.word	0x026e026b
    2a8c:	026e026e 	.word	0x026e026e
    2a90:	026e026e 	.word	0x026e026e
    2a94:	026e026e 	.word	0x026e026e
    2a98:	0271026e 	.word	0x0271026e
    2a9c:	02710271 	.word	0x02710271
    2aa0:	02710271 	.word	0x02710271
    2aa4:	00730271 	.word	0x00730271
    2aa8:	00730073 	.word	0x00730073
    2aac:	00730073 	.word	0x00730073
    2ab0:	00730073 	.word	0x00730073
    2ab4:	02710271 	.word	0x02710271
    2ab8:	02710271 	.word	0x02710271
    2abc:	02710271 	.word	0x02710271
    2ac0:	00730073 	.word	0x00730073
    2ac4:	00730073 	.word	0x00730073
    2ac8:	00730073 	.word	0x00730073
    2acc:	026b026b 	.word	0x026b026b
    2ad0:	026b026b 	.word	0x026b026b
    2ad4:	026b026b 	.word	0x026b026b
    2ad8:	026e026e 	.word	0x026e026e
    2adc:	026e026e 	.word	0x026e026e
    2ae0:	026e026e 	.word	0x026e026e
    2ae4:	02710271 	.word	0x02710271
    2ae8:	02710271 	.word	0x02710271
    2aec:	00730271 	.word	0x00730271
    2af0:	00730073 	.word	0x00730073
    2af4:	00730073 	.word	0x00730073
    2af8:	026b026b 	.word	0x026b026b
    2afc:	026b026b 	.word	0x026b026b
    2b00:	026e026b 	.word	0x026e026b
    2b04:	026e026e 	.word	0x026e026e
    2b08:	026e026e 	.word	0x026e026e
			params[i].objectNumber = 1;
    2b0c:	2001      	movs	r0, #1
    2b0e:	763e      	strb	r6, [r7, #24]
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    2b10:	ed97 0a02 	vldr	s0, [r7, #8]
    2b14:	2100      	movs	r1, #0
    2b16:	697b      	ldr	r3, [r7, #20]
	for (int i = 0; i < NUM_PARAMS; i++)
    2b18:	f108 0801 	add.w	r8, r8, #1
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    2b1c:	4798      	blx	r3
    2b1e:	ed97 0a03 	vldr	s0, [r7, #12]
    2b22:	697b      	ldr	r3, [r7, #20]
    2b24:	2101      	movs	r1, #1
    2b26:	7e38      	ldrb	r0, [r7, #24]
	for (int i = 0; i < NUM_PARAMS; i++)
    2b28:	371c      	adds	r7, #28
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    2b2a:	4798      	blx	r3
	for (int i = 0; i < NUM_PARAMS; i++)
    2b2c:	f1b8 0f9c 	cmp.w	r8, #156	; 0x9c
    2b30:	f47f af6c 	bne.w	2a0c <parsePreset+0xd2c>
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    2b34:	edd9 7a09 	vldr	s15, [r9, #36]	; 0x24
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    2b38:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    2b3c:	ed99 7a02 	vldr	s14, [r9, #8]
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    2b40:	ed9b 6a38 	vldr	s12, [fp, #224]	; 0xe0
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    2b44:	ee37 7a67 	vsub.f32	s14, s14, s15
    2b48:	ed1f 5a52 	vldr	s10, [pc, #-328]	; 2a04 <parsePreset+0xd24>
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    2b4c:	eeb4 6ae6 	vcmpe.f32	s12, s13
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    2b50:	ed5f 5a53 	vldr	s11, [pc, #-332]	; 2a08 <parsePreset+0xd28>
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    2b54:	4baa      	ldr	r3, [pc, #680]	; (2e00 <parsePreset+0x1120>)
    2b56:	ee85 6a07 	vdiv.f32	s12, s10, s14
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    2b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    2b5e:	ee67 7aa5 	vmul.f32	s15, s15, s11
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    2b62:	bfcc      	ite	gt
    2b64:	2201      	movgt	r2, #1
    2b66:	2200      	movle	r2, #0
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    2b68:	ed83 6a00 	vstr	s12, [r3]
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    2b6c:	4ba5      	ldr	r3, [pc, #660]	; (2e04 <parsePreset+0x1124>)
    2b6e:	edc3 7a00 	vstr	s15, [r3]
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    2b72:	4ba5      	ldr	r3, [pc, #660]	; (2e08 <parsePreset+0x1128>)
    2b74:	701a      	strb	r2, [r3, #0]
	if (presetVersionNumber > 0)
    2b76:	9b06      	ldr	r3, [sp, #24]
    2b78:	2b00      	cmp	r3, #0
    2b7a:	f000 82be 	beq.w	30fa <parsePreset+0x141a>
		pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    2b7e:	eddb 7a3f 	vldr	s15, [fp, #252]	; 0xfc
    2b82:	eef4 7ae6 	vcmpe.f32	s15, s13
    2b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2b8a:	bfcc      	ite	gt
    2b8c:	2301      	movgt	r3, #1
    2b8e:	2300      	movle	r3, #0
	bufferIndex += 2;
    2b90:	3504      	adds	r5, #4
		knobFrozen[i] = 0;
    2b92:	499e      	ldr	r1, [pc, #632]	; (2e0c <parsePreset+0x112c>)
    2b94:	f8df b2a4 	ldr.w	fp, [pc, #676]	; 2e3c <parsePreset+0x115c>
	bufferIndex += 2;
    2b98:	b2aa      	uxth	r2, r5
    2b9a:	f50b 6018 	add.w	r0, fp, #2432	; 0x980
    2b9e:	4614      	mov	r4, r2
	numMappings = 0;
    2ba0:	2200      	movs	r2, #0
		knobFrozen[i] = 0;
    2ba2:	700a      	strb	r2, [r1, #0]
    2ba4:	704a      	strb	r2, [r1, #1]
    2ba6:	708a      	strb	r2, [r1, #2]
    2ba8:	70ca      	strb	r2, [r1, #3]
    2baa:	710a      	strb	r2, [r1, #4]
    2bac:	714a      	strb	r2, [r1, #5]
    2bae:	718a      	strb	r2, [r1, #6]
    2bb0:	71ca      	strb	r2, [r1, #7]
    2bb2:	720a      	strb	r2, [r1, #8]
    2bb4:	724a      	strb	r2, [r1, #9]
    2bb6:	728a      	strb	r2, [r1, #10]
    2bb8:	72ca      	strb	r2, [r1, #11]
    2bba:	4995      	ldr	r1, [pc, #596]	; (2e10 <parsePreset+0x1130>)
    2bbc:	700b      	strb	r3, [r1, #0]
		mappings[i].destNumber = 255;
    2bbe:	21ff      	movs	r1, #255	; 0xff
	numMappings = 0;
    2bc0:	4b94      	ldr	r3, [pc, #592]	; (2e14 <parsePreset+0x1134>)
    2bc2:	701a      	strb	r2, [r3, #0]
		lfoOn[i] = 0;
    2bc4:	4b94      	ldr	r3, [pc, #592]	; (2e18 <parsePreset+0x1138>)
    2bc6:	601a      	str	r2, [r3, #0]
		envOn[i] = 0;
    2bc8:	4b94      	ldr	r3, [pc, #592]	; (2e1c <parsePreset+0x113c>)
    2bca:	601a      	str	r2, [r3, #0]
		knobFrozen[i] = 0;
    2bcc:	465b      	mov	r3, fp
		mappings[i].destNumber = 255;
    2bce:	7019      	strb	r1, [r3, #0]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    2bd0:	334c      	adds	r3, #76	; 0x4c
		mappings[i].hookActive[0] = 0;
    2bd2:	f843 2c04 	str.w	r2, [r3, #-4]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    2bd6:	4298      	cmp	r0, r3
    2bd8:	d1f9      	bne.n	2bce <parsePreset+0xeee>
	for (int i = 0; i < mappingCount; i++)
    2bda:	9b07      	ldr	r3, [sp, #28]
    2bdc:	2b00      	cmp	r3, #0
    2bde:	f000 8251 	beq.w	3084 <parsePreset+0x13a4>
    2be2:	2300      	movs	r3, #0
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2be4:	f8cd a004 	str.w	sl, [sp, #4]
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    2be8:	ed9f 8a8d 	vldr	s16, [pc, #564]	; 2e20 <parsePreset+0x1140>
				foundOne = 1;
    2bec:	f04f 0801 	mov.w	r8, #1
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2bf0:	9e06      	ldr	r6, [sp, #24]
    2bf2:	46a2      	mov	sl, r4
	for (int i = 0; i < mappingCount; i++)
    2bf4:	9303      	str	r3, [sp, #12]
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2bf6:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
		uint8_t destNumber = buffer[bufferIndex+1];
    2bfa:	9b01      	ldr	r3, [sp, #4]
    2bfc:	4453      	add	r3, sl
    2bfe:	7858      	ldrb	r0, [r3, #1]
		if (presetVersionNumber > 0)
    2c00:	2e00      	cmp	r6, #0
    2c02:	f000 8192 	beq.w	2f2a <parsePreset+0x124a>
			whichHook = buffer[bufferIndex+5]; //slotID sent as last bit of data in new preset sending versions
    2c06:	795d      	ldrb	r5, [r3, #5]
		uint8_t whichHook = 0;
    2c08:	2300      	movs	r3, #0
    2c0a:	465a      	mov	r2, fp
    2c0c:	461f      	mov	r7, r3
    2c0e:	461c      	mov	r4, r3
    2c10:	e003      	b.n	2c1a <parsePreset+0xf3a>
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    2c12:	3301      	adds	r3, #1
    2c14:	324c      	adds	r2, #76	; 0x4c
    2c16:	2b20      	cmp	r3, #32
    2c18:	d00c      	beq.n	2c34 <parsePreset+0xf54>
			if (mappings[j].destNumber == destNumber)
    2c1a:	7811      	ldrb	r1, [r2, #0]
    2c1c:	4281      	cmp	r1, r0
    2c1e:	d1f8      	bne.n	2c12 <parsePreset+0xf32>
				foundOne = 1;
    2c20:	2701      	movs	r7, #1
    2c22:	b2dc      	uxtb	r4, r3
				if (presetVersionNumber == 0)
    2c24:	2e00      	cmp	r6, #0
    2c26:	d1f4      	bne.n	2c12 <parsePreset+0xf32>
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    2c28:	3301      	adds	r3, #1
					whichHook = mappings[j].numHooks;
    2c2a:	f892 504b 	ldrb.w	r5, [r2, #75]	; 0x4b
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    2c2e:	324c      	adds	r2, #76	; 0x4c
    2c30:	2b20      	cmp	r3, #32
    2c32:	d1f2      	bne.n	2c1a <parsePreset+0xf3a>
		if (foundOne == 0)
    2c34:	b99f      	cbnz	r7, 2c5e <parsePreset+0xf7e>
			whichMapping = numMappings;
    2c36:	4977      	ldr	r1, [pc, #476]	; (2e14 <parsePreset+0x1134>)
			mappings[whichMapping].dest = &params[destNumber];
    2c38:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
    2c3c:	9c09      	ldr	r4, [sp, #36]	; 0x24
			if (presetVersionNumber == 0)
    2c3e:	2e00      	cmp	r6, #0
			whichMapping = numMappings;
    2c40:	780b      	ldrb	r3, [r1, #0]
			mappings[whichMapping].dest = &params[destNumber];
    2c42:	eb04 0282 	add.w	r2, r4, r2, lsl #2
			if (presetVersionNumber == 0)
    2c46:	bf08      	it	eq
    2c48:	2500      	moveq	r5, #0
			mappings[whichMapping].destNumber = destNumber;
    2c4a:	461c      	mov	r4, r3
			numMappings++;
    2c4c:	3301      	adds	r3, #1
    2c4e:	700b      	strb	r3, [r1, #0]
			mappings[whichMapping].destNumber = destNumber;
    2c50:	234c      	movs	r3, #76	; 0x4c
    2c52:	fb03 f304 	mul.w	r3, r3, r4
    2c56:	f80b 0003 	strb.w	r0, [fp, r3]
    2c5a:	445b      	add	r3, fp
			mappings[whichMapping].dest = &params[destNumber];
    2c5c:	605a      	str	r2, [r3, #4]
		int source = buffer[bufferIndex];
    2c5e:	9b01      	ldr	r3, [sp, #4]
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    2c60:	1c6a      	adds	r2, r5, #1
    2c62:	4870      	ldr	r0, [pc, #448]	; (2e24 <parsePreset+0x1144>)
		int source = buffer[bufferIndex];
    2c64:	f813 700a 	ldrb.w	r7, [r3, sl]
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    2c68:	234c      	movs	r3, #76	; 0x4c
    2c6a:	fb03 f304 	mul.w	r3, r3, r4
    2c6e:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
		if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    2c72:	2f03      	cmp	r7, #3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    2c74:	eb03 01c5 	add.w	r1, r3, r5, lsl #3
    2c78:	f100 0004 	add.w	r0, r0, #4
    2c7c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    2c80:	445b      	add	r3, fp
    2c82:	4459      	add	r1, fp
    2c84:	442b      	add	r3, r5
    2c86:	60c8      	str	r0, [r1, #12]
    2c88:	4866      	ldr	r0, [pc, #408]	; (2e24 <parsePreset+0x1144>)
    2c8a:	eb00 01c7 	add.w	r1, r0, r7, lsl #3
    2c8e:	f84b 1002 	str.w	r1, [fp, r2]
		if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    2c92:	bfd4      	ite	le
    2c94:	2200      	movle	r2, #0
    2c96:	2201      	movgt	r2, #1
    2c98:	f883 2020 	strb.w	r2, [r3, #32]
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2c9c:	b23a      	sxth	r2, r7
    2c9e:	f1a7 0318 	sub.w	r3, r7, #24
    2ca2:	920a      	str	r2, [sp, #40]	; 0x28
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    2ca4:	00ea      	lsls	r2, r5, #3
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2ca6:	2b03      	cmp	r3, #3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    2ca8:	9204      	str	r2, [sp, #16]
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2caa:	f200 8134 	bhi.w	2f16 <parsePreset+0x1236>
			lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    2cae:	4b5a      	ldr	r3, [pc, #360]	; (2e18 <parsePreset+0x1138>)
    2cb0:	443b      	add	r3, r7
    2cb2:	f803 8c18 	strb.w	r8, [r3, #-24]
		if ((source >= OSC_SOURCE_OFFSET) && (source < (OSC_SOURCE_OFFSET+NUM_OSC)))
    2cb6:	2f02      	cmp	r7, #2
    2cb8:	d802      	bhi.n	2cc0 <parsePreset+0xfe0>
			oscOn[source - OSC_SOURCE_OFFSET] = 1;
    2cba:	4b5b      	ldr	r3, [pc, #364]	; (2e28 <parsePreset+0x1148>)
    2cbc:	f803 8007 	strb.w	r8, [r3, r7]
		if ((source >= NOISE_SOURCE_OFFSET) && (source < (NOISE_SOURCE_OFFSET+1)))
    2cc0:	2f03      	cmp	r7, #3
    2cc2:	f000 8142 	beq.w	2f4a <parsePreset+0x126a>
		if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    2cc6:	3f04      	subs	r7, #4
    2cc8:	2f0b      	cmp	r7, #11
    2cca:	f240 815a 	bls.w	2f82 <parsePreset+0x12a2>
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2cce:	b2fb      	uxtb	r3, r7
    2cd0:	4a56      	ldr	r2, [pc, #344]	; (2e2c <parsePreset+0x114c>)
    2cd2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2cd6:	930b      	str	r3, [sp, #44]	; 0x2c
			uint8_t whichMacro = source - MACRO_SOURCE_OFFSET;
    2cd8:	b2fb      	uxtb	r3, r7
    2cda:	9304      	str	r3, [sp, #16]
		int scalar = buffer[bufferIndex+2];
    2cdc:	9b01      	ldr	r3, [sp, #4]
    2cde:	4453      	add	r3, sl
    2ce0:	f893 9002 	ldrb.w	r9, [r3, #2]
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    2ce4:	ea4f 0349 	mov.w	r3, r9, lsl #1
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2ce8:	f1a9 0018 	sub.w	r0, r9, #24
			if (scalar == 0xff)
    2cec:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    2cf0:	fa0f f289 	sxth.w	r2, r9
    2cf4:	9306      	str	r3, [sp, #24]
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    2cf6:	f1a9 0314 	sub.w	r3, r9, #20
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2cfa:	9005      	str	r0, [sp, #20]
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    2cfc:	9308      	str	r3, [sp, #32]
			if (scalar == 0xff)
    2cfe:	f000 8116 	beq.w	2f2e <parsePreset+0x124e>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    2d02:	4b48      	ldr	r3, [pc, #288]	; (2e24 <parsePreset+0x1144>)
    2d04:	1d29      	adds	r1, r5, #4
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2d06:	2803      	cmp	r0, #3
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    2d08:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    2d0c:	f04f 034c 	mov.w	r3, #76	; 0x4c
    2d10:	fb03 f304 	mul.w	r3, r3, r4
    2d14:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    2d18:	445b      	add	r3, fp
    2d1a:	605a      	str	r2, [r3, #4]
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2d1c:	f200 811f 	bhi.w	2f5e <parsePreset+0x127e>
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    2d20:	4b3d      	ldr	r3, [pc, #244]	; (2e18 <parsePreset+0x1138>)
    2d22:	444b      	add	r3, r9
    2d24:	f803 8c18 	strb.w	r8, [r3, #-24]
				if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    2d28:	f1b9 0f02 	cmp.w	r9, #2
    2d2c:	d802      	bhi.n	2d34 <parsePreset+0x1054>
					oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    2d2e:	4b3e      	ldr	r3, [pc, #248]	; (2e28 <parsePreset+0x1148>)
    2d30:	f803 8009 	strb.w	r8, [r3, r9]
				if ((scalar >= NOISE_SOURCE_OFFSET) && (scalar < (NOISE_SOURCE_OFFSET + 1)))
    2d34:	f1b9 0f03 	cmp.w	r9, #3
    2d38:	d102      	bne.n	2d40 <parsePreset+0x1060>
					noiseOn = 1;
    2d3a:	4b3d      	ldr	r3, [pc, #244]	; (2e30 <parsePreset+0x1150>)
    2d3c:	f883 8000 	strb.w	r8, [r3]
				if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    2d40:	2f0b      	cmp	r7, #11
    2d42:	f240 814f 	bls.w	2fe4 <parsePreset+0x1304>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    2d46:	224c      	movs	r2, #76	; 0x4c
    2d48:	00eb      	lsls	r3, r5, #3
    2d4a:	4936      	ldr	r1, [pc, #216]	; (2e24 <parsePreset+0x1144>)
    2d4c:	fb02 3304 	mla	r3, r2, r4, r3
    2d50:	9a06      	ldr	r2, [sp, #24]
    2d52:	3201      	adds	r2, #1
    2d54:	445b      	add	r3, fp
    2d56:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2d5a:	629a      	str	r2, [r3, #40]	; 0x28
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2d5c:	9b05      	ldr	r3, [sp, #20]
    2d5e:	2b03      	cmp	r3, #3
    2d60:	f200 8106 	bhi.w	2f70 <parsePreset+0x1290>
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    2d64:	4b2c      	ldr	r3, [pc, #176]	; (2e18 <parsePreset+0x1138>)
    2d66:	444b      	add	r3, r9
    2d68:	f803 8c18 	strb.w	r8, [r3, #-24]
				if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    2d6c:	f1b9 0f02 	cmp.w	r9, #2
    2d70:	d802      	bhi.n	2d78 <parsePreset+0x1098>
					oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    2d72:	4b2d      	ldr	r3, [pc, #180]	; (2e28 <parsePreset+0x1148>)
    2d74:	f803 8009 	strb.w	r8, [r3, r9]
				if ((scalar >= NOISE_SOURCE_OFFSET) && (scalar < (NOISE_SOURCE_OFFSET + 1)))
    2d78:	f1b9 0f03 	cmp.w	r9, #3
    2d7c:	d102      	bne.n	2d84 <parsePreset+0x10a4>
					noiseOn = 1;
    2d7e:	4b2c      	ldr	r3, [pc, #176]	; (2e30 <parsePreset+0x1150>)
    2d80:	f883 8000 	strb.w	r8, [r3]
				if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    2d84:	2f0b      	cmp	r7, #11
    2d86:	f240 8158 	bls.w	303a <parsePreset+0x135a>
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    2d8a:	9b01      	ldr	r3, [sp, #4]
		mappings[whichMapping].hookActive[whichHook] = 1;
    2d8c:	214c      	movs	r1, #76	; 0x4c
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    2d8e:	eb03 020a 	add.w	r2, r3, sl
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2d92:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    2d96:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		mappings[whichMapping].hookActive[whichHook] = 1;
    2d9a:	fb01 b404 	mla	r4, r1, r4, fp
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    2d9e:	78d1      	ldrb	r1, [r2, #3]
    2da0:	7912      	ldrb	r2, [r2, #4]
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2da2:	442b      	add	r3, r5
		mappings[whichMapping].hookActive[whichHook] = 1;
    2da4:	4425      	add	r5, r4
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    2da6:	eb02 2201 	add.w	r2, r2, r1, lsl #8
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2daa:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		mappings[whichMapping].hookActive[whichHook] = 1;
    2dae:	f885 8048 	strb.w	r8, [r5, #72]	; 0x48
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    2db2:	b212      	sxth	r2, r2
    2db4:	ee07 2a90 	vmov	s15, r2
    2db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2dbc:	ee67 7a88 	vmul.f32	s15, s15, s16
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2dc0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		mappings[whichMapping].numHooks++;
    2dc4:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
    2dc8:	3301      	adds	r3, #1
    2dca:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
		if (presetVersionNumber > 0)
    2dce:	2e00      	cmp	r6, #0
    2dd0:	f000 809c 	beq.w	2f0c <parsePreset+0x122c>
			bufferIndex += 6;
    2dd4:	f10a 0306 	add.w	r3, sl, #6
    2dd8:	fa1f fa83 	uxth.w	sl, r3
	for (int i = 0; i < mappingCount; i++)
    2ddc:	9b03      	ldr	r3, [sp, #12]
    2dde:	9a07      	ldr	r2, [sp, #28]
    2de0:	3301      	adds	r3, #1
    2de2:	4293      	cmp	r3, r2
    2de4:	9303      	str	r3, [sp, #12]
    2de6:	f47f af08 	bne.w	2bfa <parsePreset+0xf1a>
	for (int i = 0; i < numMappings; i++)
    2dea:	4b0a      	ldr	r3, [pc, #40]	; (2e14 <parsePreset+0x1134>)
    2dec:	781a      	ldrb	r2, [r3, #0]
    2dee:	2a00      	cmp	r2, #0
    2df0:	f000 8148 	beq.w	3084 <parsePreset+0x13a4>
    2df4:	4c0f      	ldr	r4, [pc, #60]	; (2e34 <parsePreset+0x1154>)
    2df6:	f04f 0800 	mov.w	r8, #0
			for (int v = 0; v < numStringsThisBoard; v++)
    2dfa:	4f0f      	ldr	r7, [pc, #60]	; (2e38 <parsePreset+0x1158>)
    2dfc:	e028      	b.n	2e50 <parsePreset+0x1170>
    2dfe:	bf00      	nop
    2e00:	20018fa0 	.word	0x20018fa0
    2e04:	20018fa4 	.word	0x20018fa4
    2e08:	2001632d 	.word	0x2001632d
    2e0c:	20004f48 	.word	0x20004f48
    2e10:	2001a0cc 	.word	0x2001a0cc
    2e14:	20018fac 	.word	0x20018fac
    2e18:	2001d104 	.word	0x2001d104
    2e1c:	2001cf80 	.word	0x2001cf80
    2e20:	37fffffc 	.word	0x37fffffc
    2e24:	2001d5bc 	.word	0x2001d5bc
    2e28:	2001d39c 	.word	0x2001d39c
    2e2c:	20004f84 	.word	0x20004f84
    2e30:	2001d348 	.word	0x2001d348
    2e34:	2001836c 	.word	0x2001836c
    2e38:	200004b1 	.word	0x200004b1
    2e3c:	20018364 	.word	0x20018364
    2e40:	00000000 	.word	0x00000000
	for (int i = 0; i < numMappings; i++)
    2e44:	f108 0801 	add.w	r8, r8, #1
    2e48:	344c      	adds	r4, #76	; 0x4c
    2e4a:	4542      	cmp	r2, r8
    2e4c:	f340 811a 	ble.w	3084 <parsePreset+0x13a4>
		if (mappings[i].destNumber != 255)
    2e50:	f814 3c08 	ldrb.w	r3, [r4, #-8]
    2e54:	2bff      	cmp	r3, #255	; 0xff
    2e56:	d0f5      	beq.n	2e44 <parsePreset+0x1164>
			for (int v = 0; v < numStringsThisBoard; v++)
    2e58:	783b      	ldrb	r3, [r7, #0]
    2e5a:	2b00      	cmp	r3, #0
    2e5c:	d0f2      	beq.n	2e44 <parsePreset+0x1164>
    2e5e:	4626      	mov	r6, r4
    2e60:	2500      	movs	r5, #0
					if (mappings[i].hookActive[j])
    2e62:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
				float unsmoothedValue = 0.0f;
    2e66:	ed5f 7a0a 	vldr	s15, [pc, #-40]	; 2e40 <parsePreset+0x1160>
					if (mappings[i].hookActive[j])
    2e6a:	b15b      	cbz	r3, 2e84 <parsePreset+0x11a4>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    2e6c:	6832      	ldr	r2, [r6, #0]
    2e6e:	69f3      	ldr	r3, [r6, #28]
    2e70:	edd2 7a00 	vldr	s15, [r2]
    2e74:	edd3 6a00 	vldr	s13, [r3]
    2e78:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
    2e7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
    2e80:	ee67 7a87 	vmul.f32	s15, s15, s14
					if (mappings[i].hookActive[j])
    2e84:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    2e88:	b15b      	cbz	r3, 2ea2 <parsePreset+0x11c2>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    2e8a:	68b2      	ldr	r2, [r6, #8]
    2e8c:	6a73      	ldr	r3, [r6, #36]	; 0x24
						unsmoothedValue += sum;
    2e8e:	ed92 7a00 	vldr	s14, [r2]
    2e92:	ed93 6a00 	vldr	s12, [r3]
    2e96:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
    2e9a:	ee27 7a06 	vmul.f32	s14, s14, s12
    2e9e:	eee6 7a87 	vfma.f32	s15, s13, s14
					if (mappings[i].hookActive[j])
    2ea2:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    2ea6:	b15b      	cbz	r3, 2ec0 <parsePreset+0x11e0>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    2ea8:	6932      	ldr	r2, [r6, #16]
    2eaa:	6af3      	ldr	r3, [r6, #44]	; 0x2c
						unsmoothedValue += sum;
    2eac:	ed92 7a00 	vldr	s14, [r2]
    2eb0:	ed93 6a00 	vldr	s12, [r3]
    2eb4:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    2eb8:	ee27 7a06 	vmul.f32	s14, s14, s12
    2ebc:	eee6 7a87 	vfma.f32	s15, s13, s14
				float finalVal = unsmoothedValue + mappings[i].dest->zeroToOneVal[v];
    2ec0:	f854 3c04 	ldr.w	r3, [r4, #-4]
			for (int v = 0; v < numStringsThisBoard; v++)
    2ec4:	3604      	adds	r6, #4
    2ec6:	eb03 0985 	add.w	r9, r3, r5, lsl #2
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    2eca:	691b      	ldr	r3, [r3, #16]
				float finalVal = unsmoothedValue + mappings[i].dest->zeroToOneVal[v];
    2ecc:	ed99 0a00 	vldr	s0, [r9]
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    2ed0:	ee37 0a80 	vadd.f32	s0, s15, s0
    2ed4:	4798      	blx	r3
    2ed6:	ed89 0a02 	vstr	s0, [r9, #8]
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    2eda:	f854 3c04 	ldr.w	r3, [r4, #-4]
    2ede:	4629      	mov	r1, r5
    2ee0:	eb03 0285 	add.w	r2, r3, r5, lsl #2
    2ee4:	7e18      	ldrb	r0, [r3, #24]
			for (int v = 0; v < numStringsThisBoard; v++)
    2ee6:	3501      	adds	r5, #1
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    2ee8:	ed92 0a02 	vldr	s0, [r2, #8]
    2eec:	695a      	ldr	r2, [r3, #20]
    2eee:	4790      	blx	r2
			for (int v = 0; v < numStringsThisBoard; v++)
    2ef0:	783b      	ldrb	r3, [r7, #0]
    2ef2:	42ab      	cmp	r3, r5
    2ef4:	dcb5      	bgt.n	2e62 <parsePreset+0x1182>
	for (int i = 0; i < numMappings; i++)
    2ef6:	4bae      	ldr	r3, [pc, #696]	; (31b0 <parsePreset+0x14d0>)
    2ef8:	781a      	ldrb	r2, [r3, #0]
    2efa:	e7a3      	b.n	2e44 <parsePreset+0x1164>
			params[i].objectNumber = 2;
    2efc:	2002      	movs	r0, #2
    2efe:	7638      	strb	r0, [r7, #24]
    2f00:	e606      	b.n	2b10 <parsePreset+0xe30>
			params[i].objectNumber = 3;
    2f02:	2003      	movs	r0, #3
    2f04:	7638      	strb	r0, [r7, #24]
    2f06:	e603      	b.n	2b10 <parsePreset+0xe30>
		if ((i >= Osc1) && (i < Osc2))
    2f08:	2000      	movs	r0, #0
    2f0a:	e601      	b.n	2b10 <parsePreset+0xe30>
			bufferIndex += 5;
    2f0c:	f10a 0305 	add.w	r3, sl, #5
    2f10:	fa1f fa83 	uxth.w	sl, r3
    2f14:	e762      	b.n	2ddc <parsePreset+0x10fc>
		if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    2f16:	f1a7 0314 	sub.w	r3, r7, #20
    2f1a:	2b03      	cmp	r3, #3
    2f1c:	f63f aecb 	bhi.w	2cb6 <parsePreset+0xfd6>
			envOn[source - ENV_SOURCE_OFFSET] = 1;
    2f20:	4ba4      	ldr	r3, [pc, #656]	; (31b4 <parsePreset+0x14d4>)
    2f22:	443b      	add	r3, r7
    2f24:	f803 8c14 	strb.w	r8, [r3, #-20]
    2f28:	e6c5      	b.n	2cb6 <parsePreset+0xfd6>
		uint8_t whichHook = 0;
    2f2a:	4635      	mov	r5, r6
    2f2c:	e66c      	b.n	2c08 <parsePreset+0xf28>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &defaultScaling;
    2f2e:	234c      	movs	r3, #76	; 0x4c
    2f30:	1d29      	adds	r1, r5, #4
    2f32:	00ea      	lsls	r2, r5, #3
    2f34:	fb03 f304 	mul.w	r3, r3, r4
    2f38:	441a      	add	r2, r3
    2f3a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    2f3e:	499e      	ldr	r1, [pc, #632]	; (31b8 <parsePreset+0x14d8>)
    2f40:	445a      	add	r2, fp
    2f42:	445b      	add	r3, fp
    2f44:	6291      	str	r1, [r2, #40]	; 0x28
    2f46:	6059      	str	r1, [r3, #4]
    2f48:	e71f      	b.n	2d8a <parsePreset+0x10aa>
			noiseOn = 1;
    2f4a:	4b9c      	ldr	r3, [pc, #624]	; (31bc <parsePreset+0x14dc>)
		if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    2f4c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
			noiseOn = 1;
    2f50:	f883 8000 	strb.w	r8, [r3]
    2f54:	4b9a      	ldr	r3, [pc, #616]	; (31c0 <parsePreset+0x14e0>)
    2f56:	930b      	str	r3, [sp, #44]	; 0x2c
    2f58:	23ff      	movs	r3, #255	; 0xff
    2f5a:	9304      	str	r3, [sp, #16]
    2f5c:	e6be      	b.n	2cdc <parsePreset+0xffc>
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    2f5e:	9b08      	ldr	r3, [sp, #32]
    2f60:	2b03      	cmp	r3, #3
    2f62:	f63f aee1 	bhi.w	2d28 <parsePreset+0x1048>
					envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    2f66:	4b93      	ldr	r3, [pc, #588]	; (31b4 <parsePreset+0x14d4>)
    2f68:	444b      	add	r3, r9
    2f6a:	f803 8c14 	strb.w	r8, [r3, #-20]
    2f6e:	e6db      	b.n	2d28 <parsePreset+0x1048>
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    2f70:	9b08      	ldr	r3, [sp, #32]
    2f72:	2b03      	cmp	r3, #3
    2f74:	f63f aefa 	bhi.w	2d6c <parsePreset+0x108c>
					envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    2f78:	4b8e      	ldr	r3, [pc, #568]	; (31b4 <parsePreset+0x14d4>)
    2f7a:	444b      	add	r3, r9
    2f7c:	f803 8c14 	strb.w	r8, [r3, #-20]
    2f80:	e6f4      	b.n	2d6c <parsePreset+0x108c>
			for (int v = 0; v < numStringsThisBoard; v++)
    2f82:	4b90      	ldr	r3, [pc, #576]	; (31c4 <parsePreset+0x14e4>)
			uint8_t whichMacro = source - MACRO_SOURCE_OFFSET;
    2f84:	fa5f f987 	uxtb.w	r9, r7
			for (int v = 0; v < numStringsThisBoard; v++)
    2f88:	781a      	ldrb	r2, [r3, #0]
    2f8a:	2a00      	cmp	r2, #0
    2f8c:	f000 809f 	beq.w	30ce <parsePreset+0x13ee>
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2f90:	f109 0c03 	add.w	ip, r9, #3
				sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    2f94:	498c      	ldr	r1, [pc, #560]	; (31c8 <parsePreset+0x14e8>)
    2f96:	980a      	ldr	r0, [sp, #40]	; 0x28
    2f98:	0092      	lsls	r2, r2, #2
    2f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2f9c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2fa0:	f8cd 9010 	str.w	r9, [sp, #16]
				sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    2fa4:	ebcc 01cc 	rsb	r1, ip, ip, lsl #3
    2fa8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2fac:	ea4f 03cc 	mov.w	r3, ip, lsl #3
    2fb0:	3108      	adds	r1, #8
    2fb2:	e9cd 3c05 	strd	r3, ip, [sp, #20]
    2fb6:	f006 f973 	bl	92a0 <__memcpy_veneer>
    2fba:	f8dd c018 	ldr.w	ip, [sp, #24]
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2fbe:	9a05      	ldr	r2, [sp, #20]
    2fc0:	eba2 030c 	sub.w	r3, r2, ip
    2fc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2fc6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2fca:	ed93 0a02 	vldr	s0, [r3, #8]
    2fce:	4b7f      	ldr	r3, [pc, #508]	; (31cc <parsePreset+0x14ec>)
    2fd0:	eb03 0389 	add.w	r3, r3, r9, lsl #2
    2fd4:	4618      	mov	r0, r3
    2fd6:	930b      	str	r3, [sp, #44]	; 0x2c
    2fd8:	f006 f9fe 	bl	93d8 <__tExpSmooth_setValAndDest_veneer>
			knobFrozen[whichMacro] = 1;
    2fdc:	4b7c      	ldr	r3, [pc, #496]	; (31d0 <parsePreset+0x14f0>)
    2fde:	f803 8009 	strb.w	r8, [r3, r9]
    2fe2:	e67b      	b.n	2cdc <parsePreset+0xffc>
					for (int v = 0; v < numStringsThisBoard; v++)
    2fe4:	4b77      	ldr	r3, [pc, #476]	; (31c4 <parsePreset+0x14e4>)
    2fe6:	781a      	ldrb	r2, [r3, #0]
    2fe8:	2a00      	cmp	r2, #0
    2fea:	f000 8088 	beq.w	30fe <parsePreset+0x141e>
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2fee:	9b04      	ldr	r3, [sp, #16]
						sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    2ff0:	0092      	lsls	r2, r2, #2
    2ff2:	4975      	ldr	r1, [pc, #468]	; (31c8 <parsePreset+0x14e8>)
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2ff4:	f103 0c03 	add.w	ip, r3, #3
						sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    2ff8:	980a      	ldr	r0, [sp, #40]	; 0x28
    2ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2ffc:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    3000:	ebcc 01cc 	rsb	r1, ip, ip, lsl #3
    3004:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3008:	ea4f 03cc 	mov.w	r3, ip, lsl #3
    300c:	3108      	adds	r1, #8
    300e:	e9cd 3c0c 	strd	r3, ip, [sp, #48]	; 0x30
    3012:	f006 f945 	bl	92a0 <__memcpy_veneer>
    3016:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    301a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    301c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    301e:	eba2 030c 	sub.w	r3, r2, ip
    3022:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3024:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3028:	ed93 0a02 	vldr	s0, [r3, #8]
    302c:	f006 f9d4 	bl	93d8 <__tExpSmooth_setValAndDest_veneer>
					knobFrozen[whichMacro] = 1;
    3030:	4b67      	ldr	r3, [pc, #412]	; (31d0 <parsePreset+0x14f0>)
    3032:	9a04      	ldr	r2, [sp, #16]
    3034:	f803 8002 	strb.w	r8, [r3, r2]
    3038:	e685      	b.n	2d46 <parsePreset+0x1066>
					for (int v = 0; v < numStringsThisBoard; v++)
    303a:	4b62      	ldr	r3, [pc, #392]	; (31c4 <parsePreset+0x14e4>)
    303c:	781a      	ldrb	r2, [r3, #0]
    303e:	2a00      	cmp	r2, #0
    3040:	d04d      	beq.n	30de <parsePreset+0x13fe>
						sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    3042:	4b61      	ldr	r3, [pc, #388]	; (31c8 <parsePreset+0x14e8>)
    3044:	0092      	lsls	r2, r2, #2
    3046:	990a      	ldr	r1, [sp, #40]	; 0x28
    3048:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    304c:	9b04      	ldr	r3, [sp, #16]
    304e:	f103 0903 	add.w	r9, r3, #3
						sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    3052:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3054:	ebc9 01c9 	rsb	r1, r9, r9, lsl #3
    3058:	ea4f 07c9 	mov.w	r7, r9, lsl #3
    305c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3060:	3108      	adds	r1, #8
    3062:	f006 f91d 	bl	92a0 <__memcpy_veneer>
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    3066:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3068:	eba7 0309 	sub.w	r3, r7, r9
    306c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    306e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3072:	ed93 0a02 	vldr	s0, [r3, #8]
    3076:	f006 f9af 	bl	93d8 <__tExpSmooth_setValAndDest_veneer>
					knobFrozen[whichMacro] = 1;
    307a:	4b55      	ldr	r3, [pc, #340]	; (31d0 <parsePreset+0x14f0>)
    307c:	9a04      	ldr	r2, [sp, #16]
    307e:	f803 8002 	strb.w	r8, [r3, r2]
    3082:	e682      	b.n	2d8a <parsePreset+0x10aa>
	presetWaitingToParse = 0;
    3084:	4b53      	ldr	r3, [pc, #332]	; (31d4 <parsePreset+0x14f4>)
    3086:	2400      	movs	r4, #0
	currentActivePreset = presetNumber;
    3088:	f89d 2008 	ldrb.w	r2, [sp, #8]
	presetWaitingToParse = 0;
    308c:	601c      	str	r4, [r3, #0]
	currentActivePreset = presetNumber;
    308e:	4b52      	ldr	r3, [pc, #328]	; (31d8 <parsePreset+0x14f8>)
	audioMasterLevel = 1.0f;
    3090:	4952      	ldr	r1, [pc, #328]	; (31dc <parsePreset+0x14fc>)
	currentActivePreset = presetNumber;
    3092:	701a      	strb	r2, [r3, #0]
	audioMasterLevel = 1.0f;
    3094:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
	overSampled = 1;
    3098:	2201      	movs	r2, #1
	audioMasterLevel = 1.0f;
    309a:	600b      	str	r3, [r1, #0]
	oscToTick = NUM_OSC;
    309c:	2103      	movs	r1, #3
    309e:	4b50      	ldr	r3, [pc, #320]	; (31e0 <parsePreset+0x1500>)
	changeOversampling(overSampled);
    30a0:	4610      	mov	r0, r2
	oscToTick = NUM_OSC;
    30a2:	7019      	strb	r1, [r3, #0]
	overSampled = 1;
    30a4:	4b4f      	ldr	r3, [pc, #316]	; (31e4 <parsePreset+0x1504>)
    30a6:	601a      	str	r2, [r3, #0]
	changeOversampling(overSampled);
    30a8:	f006 fa86 	bl	95b8 <__changeOversampling_veneer>
    30ac:	b662      	cpsie	i
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
    30ae:	2201      	movs	r2, #1
	presetReady = 1;
    30b0:	4b4d      	ldr	r3, [pc, #308]	; (31e8 <parsePreset+0x1508>)
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
    30b2:	484e      	ldr	r0, [pc, #312]	; (31ec <parsePreset+0x150c>)
    30b4:	4611      	mov	r1, r2
	presetReady = 1;
    30b6:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
    30b8:	f006 f93e 	bl	9338 <__HAL_GPIO_WritePin_veneer>
	diskBusy = 0;
    30bc:	4a4c      	ldr	r2, [pc, #304]	; (31f0 <parsePreset+0x1510>)
	receivingI2C = 0;
    30be:	4b4d      	ldr	r3, [pc, #308]	; (31f4 <parsePreset+0x1514>)
	diskBusy = 0;
    30c0:	7014      	strb	r4, [r2, #0]
	receivingI2C = 0;
    30c2:	701c      	strb	r4, [r3, #0]
}
    30c4:	b00f      	add	sp, #60	; 0x3c
    30c6:	ecbd 8b02 	vpop	{d8}
    30ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    30ce:	f109 0c03 	add.w	ip, r9, #3
    30d2:	f8cd 9010 	str.w	r9, [sp, #16]
    30d6:	ea4f 03cc 	mov.w	r3, ip, lsl #3
    30da:	9305      	str	r3, [sp, #20]
    30dc:	e76f      	b.n	2fbe <parsePreset+0x12de>
    30de:	9b04      	ldr	r3, [sp, #16]
    30e0:	f103 0903 	add.w	r9, r3, #3
    30e4:	ea4f 07c9 	mov.w	r7, r9, lsl #3
    30e8:	e7bd      	b.n	3066 <parsePreset+0x1386>
			oscOn[i] = 0;
    30ea:	2200      	movs	r2, #0
			oscsEnabled[i] = 0;
    30ec:	4610      	mov	r0, r2
    30ee:	f7ff bb2d 	b.w	274c <parsePreset+0xa6c>
			oscOn[i] = 0;
    30f2:	2200      	movs	r2, #0
			oscsEnabled[i] = 0;
    30f4:	4610      	mov	r0, r2
    30f6:	f7ff baf3 	b.w	26e0 <parsePreset+0xa00>
		pedalControlsMaster = 1;
    30fa:	2301      	movs	r3, #1
    30fc:	e548      	b.n	2b90 <parsePreset+0xeb0>
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    30fe:	9b04      	ldr	r3, [sp, #16]
    3100:	f103 0c03 	add.w	ip, r3, #3
    3104:	ea4f 02cc 	mov.w	r2, ip, lsl #3
    3108:	920c      	str	r2, [sp, #48]	; 0x30
    310a:	e786      	b.n	301a <parsePreset+0x133a>
			  shapeTick[i] = &triTick;
    310c:	4a3a      	ldr	r2, [pc, #232]	; (31f8 <parsePreset+0x1518>)
    310e:	483b      	ldr	r0, [pc, #236]	; (31fc <parsePreset+0x151c>)
    3110:	6090      	str	r0, [r2, #8]
			  break;
    3112:	f7ff bb0c 	b.w	272e <parsePreset+0xa4e>
			  shapeTick[i] = &pulseTick;
    3116:	4a38      	ldr	r2, [pc, #224]	; (31f8 <parsePreset+0x1518>)
    3118:	4839      	ldr	r0, [pc, #228]	; (3200 <parsePreset+0x1520>)
    311a:	6090      	str	r0, [r2, #8]
			  break;
    311c:	f7ff bb07 	b.w	272e <parsePreset+0xa4e>
			  shapeTick[i] = &sawTick;
    3120:	4a35      	ldr	r2, [pc, #212]	; (31f8 <parsePreset+0x1518>)
    3122:	4838      	ldr	r0, [pc, #224]	; (3204 <parsePreset+0x1524>)
    3124:	6090      	str	r0, [r2, #8]
			  break;
    3126:	f7ff bb02 	b.w	272e <parsePreset+0xa4e>
			  shapeTick[i] = &sineTriTick;
    312a:	4a33      	ldr	r2, [pc, #204]	; (31f8 <parsePreset+0x1518>)
    312c:	4836      	ldr	r0, [pc, #216]	; (3208 <parsePreset+0x1528>)
    312e:	6090      	str	r0, [r2, #8]
			  break;
    3130:	f7ff bafd 	b.w	272e <parsePreset+0xa4e>
			  shapeTick[i] = &sawSquareTick;
    3134:	4a30      	ldr	r2, [pc, #192]	; (31f8 <parsePreset+0x1518>)
    3136:	4835      	ldr	r0, [pc, #212]	; (320c <parsePreset+0x152c>)
    3138:	6090      	str	r0, [r2, #8]
			  break;
    313a:	f7ff baf8 	b.w	272e <parsePreset+0xa4e>
			  shapeTick[i] = &triTick;
    313e:	4a2e      	ldr	r2, [pc, #184]	; (31f8 <parsePreset+0x1518>)
    3140:	482e      	ldr	r0, [pc, #184]	; (31fc <parsePreset+0x151c>)
    3142:	6050      	str	r0, [r2, #4]
			  break;
    3144:	f7ff babd 	b.w	26c2 <parsePreset+0x9e2>
			  shapeTick[i] = &sineTick;
    3148:	4a2b      	ldr	r2, [pc, #172]	; (31f8 <parsePreset+0x1518>)
    314a:	4831      	ldr	r0, [pc, #196]	; (3210 <parsePreset+0x1530>)
    314c:	6050      	str	r0, [r2, #4]
			  break;
    314e:	f7ff bab8 	b.w	26c2 <parsePreset+0x9e2>
			  shapeTick[i] = &pulseTick;
    3152:	4a29      	ldr	r2, [pc, #164]	; (31f8 <parsePreset+0x1518>)
    3154:	482a      	ldr	r0, [pc, #168]	; (3200 <parsePreset+0x1520>)
    3156:	6050      	str	r0, [r2, #4]
			  break;
    3158:	f7ff bab3 	b.w	26c2 <parsePreset+0x9e2>
			  shapeTick[i] = &sawTick;
    315c:	4a26      	ldr	r2, [pc, #152]	; (31f8 <parsePreset+0x1518>)
    315e:	4829      	ldr	r0, [pc, #164]	; (3204 <parsePreset+0x1524>)
    3160:	6050      	str	r0, [r2, #4]
			  break;
    3162:	f7ff baae 	b.w	26c2 <parsePreset+0x9e2>
			  shapeTick[i] = &sawSquareTick;
    3166:	4a24      	ldr	r2, [pc, #144]	; (31f8 <parsePreset+0x1518>)
    3168:	4828      	ldr	r0, [pc, #160]	; (320c <parsePreset+0x152c>)
    316a:	6050      	str	r0, [r2, #4]
			  break;
    316c:	f7ff baa9 	b.w	26c2 <parsePreset+0x9e2>
			  shapeTick[i] = &triTick;
    3170:	4b21      	ldr	r3, [pc, #132]	; (31f8 <parsePreset+0x1518>)
    3172:	4a22      	ldr	r2, [pc, #136]	; (31fc <parsePreset+0x151c>)
    3174:	601a      	str	r2, [r3, #0]
			  break;
    3176:	f7ff ba4c 	b.w	2612 <parsePreset+0x932>
			  shapeTick[i] = &sineTick;
    317a:	4b1f      	ldr	r3, [pc, #124]	; (31f8 <parsePreset+0x1518>)
    317c:	4a24      	ldr	r2, [pc, #144]	; (3210 <parsePreset+0x1530>)
    317e:	601a      	str	r2, [r3, #0]
			  break;
    3180:	f7ff ba47 	b.w	2612 <parsePreset+0x932>
			  shapeTick[i] = &pulseTick;
    3184:	4b1c      	ldr	r3, [pc, #112]	; (31f8 <parsePreset+0x1518>)
    3186:	4a1e      	ldr	r2, [pc, #120]	; (3200 <parsePreset+0x1520>)
    3188:	601a      	str	r2, [r3, #0]
			  break;
    318a:	f7ff ba42 	b.w	2612 <parsePreset+0x932>
			  shapeTick[i] = &sawTick;
    318e:	4b1a      	ldr	r3, [pc, #104]	; (31f8 <parsePreset+0x1518>)
    3190:	4a1c      	ldr	r2, [pc, #112]	; (3204 <parsePreset+0x1524>)
    3192:	601a      	str	r2, [r3, #0]
			  break;
    3194:	f7ff ba3d 	b.w	2612 <parsePreset+0x932>
			  shapeTick[i] = &sawSquareTick;
    3198:	4b17      	ldr	r3, [pc, #92]	; (31f8 <parsePreset+0x1518>)
    319a:	4a1c      	ldr	r2, [pc, #112]	; (320c <parsePreset+0x152c>)
    319c:	601a      	str	r2, [r3, #0]
			  break;
    319e:	f7ff ba38 	b.w	2612 <parsePreset+0x932>
    31a2:	4c1c      	ldr	r4, [pc, #112]	; (3214 <parsePreset+0x1534>)
    31a4:	f7ff b95c 	b.w	2460 <parsePreset+0x780>
    31a8:	f8df 906c 	ldr.w	r9, [pc, #108]	; 3218 <parsePreset+0x1538>
    31ac:	f7ff b946 	b.w	243c <parsePreset+0x75c>
    31b0:	20018fac 	.word	0x20018fac
    31b4:	2001cf80 	.word	0x2001cf80
    31b8:	20000724 	.word	0x20000724
    31bc:	2001d348 	.word	0x2001d348
    31c0:	20005380 	.word	0x20005380
    31c4:	200004b1 	.word	0x200004b1
    31c8:	2001d5bc 	.word	0x2001d5bc
    31cc:	20004f84 	.word	0x20004f84
    31d0:	20004f48 	.word	0x20004f48
    31d4:	2001a0ec 	.word	0x2001a0ec
    31d8:	20000720 	.word	0x20000720
    31dc:	2000071c 	.word	0x2000071c
    31e0:	200008ac 	.word	0x200008ac
    31e4:	200008b0 	.word	0x200008b0
    31e8:	20005078 	.word	0x20005078
    31ec:	58020000 	.word	0x58020000
    31f0:	200141ac 	.word	0x200141ac
    31f4:	2001a500 	.word	0x2001a500
    31f8:	2001d540 	.word	0x2001d540
    31fc:	00006001 	.word	0x00006001
    3200:	00005f61 	.word	0x00005f61
    3204:	00005f21 	.word	0x00005f21
    3208:	00005ec1 	.word	0x00005ec1
    320c:	00005e61 	.word	0x00005e61
    3210:	00005fc1 	.word	0x00005fc1
    3214:	2001a0cc 	.word	0x2001a0cc
    3218:	20018fbc 	.word	0x20018fbc
    321c:	f3af 8000 	nop.w

00003220 <handleSPI>:
	if (foundBrainFirmware)
    3220:	4974      	ldr	r1, [pc, #464]	; (33f4 <handleSPI+0x1d4>)
	interruptChecker = 1;
    3222:	4b75      	ldr	r3, [pc, #468]	; (33f8 <handleSPI+0x1d8>)
{
    3224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	interruptChecker = 1;
    3228:	2501      	movs	r5, #1
{
    322a:	4604      	mov	r4, r0
    322c:	ed2d 8b02 	vpush	{d8}
	if (foundBrainFirmware)
    3230:	780a      	ldrb	r2, [r1, #0]
{
    3232:	b085      	sub	sp, #20
	interruptChecker = 1;
    3234:	701d      	strb	r5, [r3, #0]
	if (foundBrainFirmware)
    3236:	b37a      	cbz	r2, 3298 <handleSPI+0x78>
		if (brainFirmwareEndSignal)
    3238:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 3414 <handleSPI+0x1f4>
    323c:	f8d9 0000 	ldr.w	r0, [r9]
    3240:	2800      	cmp	r0, #0
    3242:	d045      	beq.n	32d0 <handleSPI+0xb0>
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    3244:	4b6d      	ldr	r3, [pc, #436]	; (33fc <handleSPI+0x1dc>)
    3246:	20f9      	movs	r0, #249	; 0xf9
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    3248:	4a6d      	ldr	r2, [pc, #436]	; (3400 <handleSPI+0x1e0>)
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    324a:	4423      	add	r3, r4
			brainFirmwareSendInProgress = 0;
    324c:	4c6d      	ldr	r4, [pc, #436]	; (3404 <handleSPI+0x1e4>)
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    324e:	6812      	ldr	r2, [r2, #0]
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    3250:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
			brainFirmwareEndSignal = 0;
    3254:	2000      	movs	r0, #0
			foundBrainFirmware = 0;
    3256:	7008      	strb	r0, [r1, #0]
			SPI_LEVERS_TX[offset+2] = brainFirmwareSize >> 16;
    3258:	0c11      	lsrs	r1, r2, #16
			brainFirmwareSendInProgress = 0;
    325a:	6020      	str	r0, [r4, #0]
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    325c:	0e14      	lsrs	r4, r2, #24
			brainFirmwareEndSignal = 0;
    325e:	f8c9 0000 	str.w	r0, [r9]
			SPI_LEVERS_TX[offset+3] = brainFirmwareSize >> 8;
    3262:	0a10      	lsrs	r0, r2, #8
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    3264:	3a00      	subs	r2, #0
			SPI_LEVERS_TX[offset+2] = brainFirmwareSize >> 16;
    3266:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
			SPI_LEVERS_TX[offset+31] = 254;
    326a:	f04f 01fe 	mov.w	r1, #254	; 0xfe
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    326e:	f883 4041 	strb.w	r4, [r3, #65]	; 0x41
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    3272:	bf18      	it	ne
    3274:	2201      	movne	r2, #1
			SPI_LEVERS_TX[offset+3] = brainFirmwareSize >> 8;
    3276:	f883 0043 	strb.w	r0, [r3, #67]	; 0x43
			SPI_LEVERS_TX[offset+31] = 254;
    327a:	f883 105f 	strb.w	r1, [r3, #95]	; 0x5f
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    327e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
    3282:	2200      	movs	r2, #0
    3284:	f44f 6100 	mov.w	r1, #2048	; 0x800
    3288:	485f      	ldr	r0, [pc, #380]	; (3408 <handleSPI+0x1e8>)
}
    328a:	b005      	add	sp, #20
    328c:	ecbd 8b02 	vpop	{d8}
    3290:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
    3294:	f006 b850 	b.w	9338 <__HAL_GPIO_WritePin_veneer>
		if (SPI_LEVERS_RX[offset] == ReceivingPitches)
    3298:	4d58      	ldr	r5, [pc, #352]	; (33fc <handleSPI+0x1dc>)
    329a:	5c2b      	ldrb	r3, [r5, r0]
    329c:	2b01      	cmp	r3, #1
    329e:	f000 80bd 	beq.w	341c <handleSPI+0x1fc>
		else if (SPI_LEVERS_RX[offset] == ReceivingPreset)
    32a2:	2b0c      	cmp	r3, #12
    32a4:	f200 8275 	bhi.w	3792 <handleSPI+0x572>
    32a8:	2b01      	cmp	r3, #1
    32aa:	f240 8151 	bls.w	3550 <handleSPI+0x330>
    32ae:	3b02      	subs	r3, #2
    32b0:	2b0a      	cmp	r3, #10
    32b2:	f200 814d 	bhi.w	3550 <handleSPI+0x330>
    32b6:	e8df f013 	tbh	[pc, r3, lsl #1]
    32ba:	02c0      	.short	0x02c0
    32bc:	014b031f 	.word	0x014b031f
    32c0:	0429014b 	.word	0x0429014b
    32c4:	014b04af 	.word	0x014b04af
    32c8:	053b014b 	.word	0x053b014b
    32cc:	055102f3 	.word	0x055102f3
		else if (brainFirmwareSendInProgress)
    32d0:	4a4c      	ldr	r2, [pc, #304]	; (3404 <handleSPI+0x1e4>)
    32d2:	6813      	ldr	r3, [r2, #0]
    32d4:	2b00      	cmp	r3, #0
    32d6:	f000 8274 	beq.w	37c2 <handleSPI+0x5a2>
			SPI_LEVERS_TX[offset] = 251; //special byte that says it's a firmware chunk
    32da:	4d48      	ldr	r5, [pc, #288]	; (33fc <handleSPI+0x1dc>)
    32dc:	23fb      	movs	r3, #251	; 0xfb
    32de:	f8df b138 	ldr.w	fp, [pc, #312]	; 3418 <handleSPI+0x1f8>
    32e2:	eb05 0a04 	add.w	sl, r5, r4
    32e6:	4f49      	ldr	r7, [pc, #292]	; (340c <handleSPI+0x1ec>)
    32e8:	f8db 2000 	ldr.w	r2, [fp]
    32ec:	f88a 3040 	strb.w	r3, [sl, #64]	; 0x40
			for (int i = 0; i < 30; i++)
    32f0:	4b47      	ldr	r3, [pc, #284]	; (3410 <handleSPI+0x1f0>)
    32f2:	8819      	ldrh	r1, [r3, #0]
    32f4:	e032      	b.n	335c <handleSPI+0x13c>
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    32f6:	2e3a      	cmp	r6, #58	; 0x3a
    32f8:	f000 829a 	beq.w	3830 <handleSPI+0x610>
    32fc:	f1be 0f3a 	cmp.w	lr, #58	; 0x3a
					positionInRowLine = 0;
    3300:	f04f 0100 	mov.w	r1, #0
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    3304:	bf08      	it	eq
    3306:	3202      	addeq	r2, #2
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    3308:	18bb      	adds	r3, r7, r2
    330a:	789b      	ldrb	r3, [r3, #2]
    330c:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    330e:	bf08      	it	eq
    3310:	3203      	addeq	r2, #3
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    3312:	18bb      	adds	r3, r7, r2
    3314:	78db      	ldrb	r3, [r3, #3]
    3316:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    3318:	bf08      	it	eq
    331a:	3204      	addeq	r2, #4
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    331c:	18bb      	adds	r3, r7, r2
    331e:	791b      	ldrb	r3, [r3, #4]
    3320:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    3322:	bf08      	it	eq
    3324:	3205      	addeq	r2, #5
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    3326:	18bb      	adds	r3, r7, r2
    3328:	795b      	ldrb	r3, [r3, #5]
    332a:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    332c:	bf08      	it	eq
    332e:	3206      	addeq	r2, #6
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    3330:	18bb      	adds	r3, r7, r2
    3332:	799b      	ldrb	r3, [r3, #6]
    3334:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    3336:	bf08      	it	eq
    3338:	3207      	addeq	r2, #7
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    333a:	18bb      	adds	r3, r7, r2
    333c:	79db      	ldrb	r3, [r3, #7]
    333e:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    3340:	bf08      	it	eq
    3342:	3208      	addeq	r2, #8
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    3344:	18bb      	adds	r3, r7, r2
    3346:	7a1b      	ldrb	r3, [r3, #8]
    3348:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    334a:	bf08      	it	eq
    334c:	3209      	addeq	r2, #9
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    334e:	18bb      	adds	r3, r7, r2
    3350:	7a5b      	ldrb	r3, [r3, #9]
    3352:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    3354:	bf08      	it	eq
    3356:	320a      	addeq	r2, #10
			for (int i = 0; i < 30; i++)
    3358:	281e      	cmp	r0, #30
    335a:	d03a      	beq.n	33d2 <handleSPI+0x1b2>
				uint8_t val1 = brainFirmwareBuffer[brainFirmwareBufferIndex];
    335c:	5cbe      	ldrb	r6, [r7, r2]
				uint8_t val2 = brainFirmwareBuffer[brainFirmwareBufferIndex+1];
    335e:	f102 0c01 	add.w	ip, r2, #1
	if (('0' <= value) && (value <= '9'))
    3362:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
				uint8_t val2 = brainFirmwareBuffer[brainFirmwareBufferIndex+1];
    3366:	f817 e00c 	ldrb.w	lr, [r7, ip]
	if (('0' <= value) && (value <= '9'))
    336a:	b2db      	uxtb	r3, r3
    336c:	2b09      	cmp	r3, #9
    336e:	f240 824a 	bls.w	3806 <handleSPI+0x5e6>
	if (('a' <= value) && (value <= 'f'))
    3372:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
    3376:	2b05      	cmp	r3, #5
    3378:	f240 8248 	bls.w	380c <handleSPI+0x5ec>
	if (('A' <= value) && (value <= 'F'))
    337c:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
    3380:	2b05      	cmp	r3, #5
    3382:	f240 824f 	bls.w	3824 <handleSPI+0x604>
    3386:	2300      	movs	r3, #0
	if (('0' <= value) && (value <= '9'))
    3388:	f1ae 0830 	sub.w	r8, lr, #48	; 0x30
    338c:	fa5f f888 	uxtb.w	r8, r8
    3390:	f1b8 0f09 	cmp.w	r8, #9
    3394:	f240 8234 	bls.w	3800 <handleSPI+0x5e0>
	if (('a' <= value) && (value <= 'f'))
    3398:	f1ae 0861 	sub.w	r8, lr, #97	; 0x61
    339c:	f1b8 0f05 	cmp.w	r8, #5
    33a0:	f240 823a 	bls.w	3818 <handleSPI+0x5f8>
	if (('A' <= value) && (value <= 'F'))
    33a4:	f1ae 0841 	sub.w	r8, lr, #65	; 0x41
    33a8:	f1b8 0f05 	cmp.w	r8, #5
    33ac:	d804      	bhi.n	33b8 <handleSPI+0x198>
		return (uint8_t) (10 + value - 'A');
    33ae:	f1ae 0837 	sub.w	r8, lr, #55	; 0x37
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    33b2:	ea43 0308 	orr.w	r3, r3, r8
    33b6:	b2db      	uxtb	r3, r3
				if (positionInRowLine < 294)
    33b8:	f5b1 7f93 	cmp.w	r1, #294	; 0x126
    33bc:	d29b      	bcs.n	32f6 <handleSPI+0xd6>
					SPI_LEVERS_TX[offset+i+1] = valToSend;
    33be:	eb0a 0600 	add.w	r6, sl, r0
			for (int i = 0; i < 30; i++)
    33c2:	3001      	adds	r0, #1
				positionInRowLine++;
    33c4:	3101      	adds	r1, #1
					brainFirmwareBufferIndex += 2;
    33c6:	3202      	adds	r2, #2
			for (int i = 0; i < 30; i++)
    33c8:	281e      	cmp	r0, #30
					SPI_LEVERS_TX[offset+i+1] = valToSend;
    33ca:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
				positionInRowLine++;
    33ce:	b289      	uxth	r1, r1
			for (int i = 0; i < 30; i++)
    33d0:	d1c4      	bne.n	335c <handleSPI+0x13c>
    33d2:	4b0f      	ldr	r3, [pc, #60]	; (3410 <handleSPI+0x1f0>)
			SPI_LEVERS_TX[offset+31] = 254;
    33d4:	442c      	add	r4, r5
    33d6:	f8cb 2000 	str.w	r2, [fp]
    33da:	8019      	strh	r1, [r3, #0]
    33dc:	23fe      	movs	r3, #254	; 0xfe
    33de:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
			if (brainFirmwareBufferIndex >= brainFirmwareSize)
    33e2:	4b07      	ldr	r3, [pc, #28]	; (3400 <handleSPI+0x1e0>)
    33e4:	681b      	ldr	r3, [r3, #0]
    33e6:	4293      	cmp	r3, r2
    33e8:	f63f af4b 	bhi.w	3282 <handleSPI+0x62>
				brainFirmwareEndSignal = 1;
    33ec:	2301      	movs	r3, #1
    33ee:	f8c9 3000 	str.w	r3, [r9]
    33f2:	e746      	b.n	3282 <handleSPI+0x62>
    33f4:	2001632c 	.word	0x2001632c
    33f8:	2001632f 	.word	0x2001632f
    33fc:	30000800 	.word	0x30000800
    3400:	20014168 	.word	0x20014168
    3404:	20014164 	.word	0x20014164
    3408:	58020c00 	.word	0x58020c00
    340c:	c1e00000 	.word	0xc1e00000
    3410:	2001a0d4 	.word	0x2001a0d4
    3414:	20014160 	.word	0x20014160
    3418:	2001415c 	.word	0x2001415c
			 for (int i = 0; i < numStringsThisBoard; i++)
    341c:	4bca      	ldr	r3, [pc, #808]	; (3748 <handleSPI+0x528>)
    341e:	7818      	ldrb	r0, [r3, #0]
    3420:	2800      	cmp	r0, #0
    3422:	f000 8083 	beq.w	352c <handleSPI+0x30c>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    3426:	49c9      	ldr	r1, [pc, #804]	; (374c <handleSPI+0x52c>)
			 uint8_t currentByte = offset+1;
    3428:	1c63      	adds	r3, r4, #1
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    342a:	ed9f 6ac9 	vldr	s12, [pc, #804]	; 3750 <handleSPI+0x530>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    342e:	680a      	ldr	r2, [r1, #0]
    3430:	b2db      	uxtb	r3, r3
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3432:	eddf 6ac8 	vldr	s13, [pc, #800]	; 3754 <handleSPI+0x534>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    3436:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    343a:	5cd2      	ldrb	r2, [r2, r3]
    343c:	0212      	lsls	r2, r2, #8
    343e:	ee07 2a90 	vmov	s15, r2
    3442:	680a      	ldr	r2, [r1, #0]
    3444:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    3448:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    344c:	441a      	add	r2, r3
    344e:	7852      	ldrb	r2, [r2, #1]
    3450:	ee07 2a90 	vmov	s15, r2
    3454:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3458:	ee77 7a87 	vadd.f32	s15, s15, s14
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    345c:	eef4 7a46 	vcmp.f32	s15, s12
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3460:	ee27 7aa6 	vmul.f32	s14, s15, s13
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    3464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3468:	d507      	bpl.n	347a <handleSPI+0x25a>
    346a:	eeb5 7a40 	vcmp.f32	s14, #0.0
    346e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3472:	dd02      	ble.n	347a <handleSPI+0x25a>
					stringMIDIPitches[i] = myPitch;
    3474:	4ab8      	ldr	r2, [pc, #736]	; (3758 <handleSPI+0x538>)
    3476:	ed82 7a00 	vstr	s14, [r2]
			 for (int i = 0; i < numStringsThisBoard; i++)
    347a:	2801      	cmp	r0, #1
    347c:	d056      	beq.n	352c <handleSPI+0x30c>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    347e:	680a      	ldr	r2, [r1, #0]
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    3480:	ed9f 6ab3 	vldr	s12, [pc, #716]	; 3750 <handleSPI+0x530>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    3484:	3201      	adds	r2, #1
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3486:	eddf 6ab3 	vldr	s13, [pc, #716]	; 3754 <handleSPI+0x534>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    348a:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    348e:	5cd2      	ldrb	r2, [r2, r3]
    3490:	0212      	lsls	r2, r2, #8
    3492:	ee07 2a90 	vmov	s15, r2
    3496:	680a      	ldr	r2, [r1, #0]
    3498:	3201      	adds	r2, #1
    349a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    349e:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    34a2:	441a      	add	r2, r3
    34a4:	7852      	ldrb	r2, [r2, #1]
    34a6:	ee07 2a90 	vmov	s15, r2
    34aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    34ae:	ee77 7a87 	vadd.f32	s15, s15, s14
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    34b2:	eef4 7a46 	vcmp.f32	s15, s12
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    34b6:	ee27 7aa6 	vmul.f32	s14, s15, s13
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    34ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    34be:	d507      	bpl.n	34d0 <handleSPI+0x2b0>
    34c0:	eeb5 7a40 	vcmp.f32	s14, #0.0
    34c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    34c8:	dd02      	ble.n	34d0 <handleSPI+0x2b0>
					stringMIDIPitches[i] = myPitch;
    34ca:	4aa3      	ldr	r2, [pc, #652]	; (3758 <handleSPI+0x538>)
    34cc:	ed82 7a01 	vstr	s14, [r2, #4]
			 for (int i = 0; i < numStringsThisBoard; i++)
    34d0:	2802      	cmp	r0, #2
    34d2:	d02b      	beq.n	352c <handleSPI+0x30c>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    34d4:	680a      	ldr	r2, [r1, #0]
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    34d6:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 3754 <handleSPI+0x534>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    34da:	3202      	adds	r2, #2
    34dc:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    34e0:	5cd2      	ldrb	r2, [r2, r3]
    34e2:	0212      	lsls	r2, r2, #8
    34e4:	ee07 2a90 	vmov	s15, r2
    34e8:	680a      	ldr	r2, [r1, #0]
    34ea:	3202      	adds	r2, #2
    34ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    34f0:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    34f4:	441a      	add	r2, r3
    34f6:	7852      	ldrb	r2, [r2, #1]
    34f8:	ee06 2a90 	vmov	s13, r2
    34fc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    3500:	ee77 7aa6 	vadd.f32	s15, s15, s13
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3504:	ee27 7a87 	vmul.f32	s14, s15, s14
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    3508:	eeb5 7a40 	vcmp.f32	s14, #0.0
    350c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3510:	dd09      	ble.n	3526 <handleSPI+0x306>
    3512:	eddf 6a8f 	vldr	s13, [pc, #572]	; 3750 <handleSPI+0x530>
    3516:	eef4 7a66 	vcmp.f32	s15, s13
    351a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    351e:	d502      	bpl.n	3526 <handleSPI+0x306>
					stringMIDIPitches[i] = myPitch;
    3520:	4a8d      	ldr	r2, [pc, #564]	; (3758 <handleSPI+0x538>)
    3522:	ed82 7a02 	vstr	s14, [r2, #8]
			 for (int i = 0; i < numStringsThisBoard; i++)
    3526:	2803      	cmp	r0, #3
    3528:	f040 8422 	bne.w	3d70 <handleSPI+0xb50>
			 HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
    352c:	488b      	ldr	r0, [pc, #556]	; (375c <handleSPI+0x53c>)
    352e:	f44f 7100 	mov.w	r1, #512	; 0x200
    3532:	2201      	movs	r2, #1
			 whichBar = 0;
    3534:	2600      	movs	r6, #0
			 HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
    3536:	f005 feff 	bl	9338 <__HAL_GPIO_WritePin_veneer>
			 whichBar = 0;
    353a:	4b89      	ldr	r3, [pc, #548]	; (3760 <handleSPI+0x540>)
			 updateStateFromSPIMessage(offset);
    353c:	4620      	mov	r0, r4
			 whichBar = 0;
    353e:	701e      	strb	r6, [r3, #0]
			updateStateFromSPIMessage(offset);
    3540:	f7fd ff8e 	bl	1460 <updateStateFromSPIMessage>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
    3544:	2200      	movs	r2, #0
    3546:	f44f 7100 	mov.w	r1, #512	; 0x200
    354a:	4884      	ldr	r0, [pc, #528]	; (375c <handleSPI+0x53c>)
    354c:	f005 fef4 	bl	9338 <__HAL_GPIO_WritePin_veneer>
			if (boardNumber == 0)
    3550:	4b84      	ldr	r3, [pc, #528]	; (3764 <handleSPI+0x544>)
    3552:	781b      	ldrb	r3, [r3, #0]
    3554:	2b00      	cmp	r3, #0
    3556:	f47f ae94 	bne.w	3282 <handleSPI+0x62>
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    355a:	4b83      	ldr	r3, [pc, #524]	; (3768 <handleSPI+0x548>)
				SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    355c:	442c      	add	r4, r5
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    355e:	4a83      	ldr	r2, [pc, #524]	; (376c <handleSPI+0x54c>)
				SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    3560:	20fd      	movs	r0, #253	; 0xfd
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    3562:	7819      	ldrb	r1, [r3, #0]
				SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    3564:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    3568:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    356c:	7819      	ldrb	r1, [r3, #0]
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    356e:	4d80      	ldr	r5, [pc, #512]	; (3770 <handleSPI+0x550>)
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    3570:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3574:	0049      	lsls	r1, r1, #1
    3576:	5c50      	ldrb	r0, [r2, r1]
				SPI_LEVERS_TX[offset+3] = presetNamesArray[whichPresetToSendName][1];
    3578:	7819      	ldrb	r1, [r3, #0]
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    357a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
				SPI_LEVERS_TX[offset+3] = presetNamesArray[whichPresetToSendName][1];
    357e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3582:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    3586:	7849      	ldrb	r1, [r1, #1]
    3588:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
				SPI_LEVERS_TX[offset+4] = presetNamesArray[whichPresetToSendName][2];
    358c:	7819      	ldrb	r1, [r3, #0]
    358e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3592:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    3596:	7889      	ldrb	r1, [r1, #2]
    3598:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
				SPI_LEVERS_TX[offset+5] = presetNamesArray[whichPresetToSendName][3];
    359c:	7819      	ldrb	r1, [r3, #0]
    359e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    35a2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    35a6:	78c9      	ldrb	r1, [r1, #3]
    35a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
				SPI_LEVERS_TX[offset+6] = presetNamesArray[whichPresetToSendName][4];
    35ac:	7819      	ldrb	r1, [r3, #0]
    35ae:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    35b2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    35b6:	7909      	ldrb	r1, [r1, #4]
    35b8:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
				SPI_LEVERS_TX[offset+7] = presetNamesArray[whichPresetToSendName][5];
    35bc:	7819      	ldrb	r1, [r3, #0]
    35be:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    35c2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    35c6:	7949      	ldrb	r1, [r1, #5]
    35c8:	f884 1047 	strb.w	r1, [r4, #71]	; 0x47
				SPI_LEVERS_TX[offset+8] = presetNamesArray[whichPresetToSendName][6];
    35cc:	7819      	ldrb	r1, [r3, #0]
    35ce:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    35d2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    35d6:	7989      	ldrb	r1, [r1, #6]
    35d8:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
				SPI_LEVERS_TX[offset+9] = presetNamesArray[whichPresetToSendName][7];
    35dc:	7819      	ldrb	r1, [r3, #0]
    35de:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    35e2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    35e6:	79c9      	ldrb	r1, [r1, #7]
    35e8:	f884 1049 	strb.w	r1, [r4, #73]	; 0x49
				SPI_LEVERS_TX[offset+10] = presetNamesArray[whichPresetToSendName][8];
    35ec:	7819      	ldrb	r1, [r3, #0]
    35ee:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    35f2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    35f6:	7a09      	ldrb	r1, [r1, #8]
    35f8:	f884 104a 	strb.w	r1, [r4, #74]	; 0x4a
				SPI_LEVERS_TX[offset+11] = presetNamesArray[whichPresetToSendName][9];
    35fc:	7819      	ldrb	r1, [r3, #0]
    35fe:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3602:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    3606:	7a49      	ldrb	r1, [r1, #9]
    3608:	f884 104b 	strb.w	r1, [r4, #75]	; 0x4b
				SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    360c:	7819      	ldrb	r1, [r3, #0]
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    360e:	782e      	ldrb	r6, [r5, #0]
				SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    3610:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    3614:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
				SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    3618:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    361c:	7a89      	ldrb	r1, [r1, #10]
    361e:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
				SPI_LEVERS_TX[offset+13] = presetNamesArray[whichPresetToSendName][11];
    3622:	7819      	ldrb	r1, [r3, #0]
    3624:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3628:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    362c:	7ac9      	ldrb	r1, [r1, #11]
    362e:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
				SPI_LEVERS_TX[offset+14] = presetNamesArray[whichPresetToSendName][12];
    3632:	7819      	ldrb	r1, [r3, #0]
    3634:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3638:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    363c:	7b09      	ldrb	r1, [r1, #12]
    363e:	f884 104e 	strb.w	r1, [r4, #78]	; 0x4e
				SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    3642:	7819      	ldrb	r1, [r3, #0]
    3644:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3648:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    364c:	eb06 0186 	add.w	r1, r6, r6, lsl #2
				whichMacroToSendName = (whichMacroToSendName + 1);
    3650:	3601      	adds	r6, #1
				SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    3652:	7b52      	ldrb	r2, [r2, #13]
				whichMacroToSendName = (whichMacroToSendName + 1);
    3654:	b2f6      	uxtb	r6, r6
				SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    3656:	f884 204f 	strb.w	r2, [r4, #79]	; 0x4f
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    365a:	781a      	ldrb	r2, [r3, #0]
    365c:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    3660:	00d0      	lsls	r0, r2, #3
    3662:	4a44      	ldr	r2, [pc, #272]	; (3774 <handleSPI+0x554>)
    3664:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    3668:	5c10      	ldrb	r0, [r2, r0]
    366a:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
				SPI_LEVERS_TX[offset+18] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][1];
    366e:	7818      	ldrb	r0, [r3, #0]
    3670:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    3674:	00c0      	lsls	r0, r0, #3
    3676:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    367a:	4410      	add	r0, r2
    367c:	7840      	ldrb	r0, [r0, #1]
    367e:	f884 0052 	strb.w	r0, [r4, #82]	; 0x52
				SPI_LEVERS_TX[offset+19] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][2];
    3682:	7818      	ldrb	r0, [r3, #0]
    3684:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    3688:	00c0      	lsls	r0, r0, #3
    368a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    368e:	4410      	add	r0, r2
    3690:	7880      	ldrb	r0, [r0, #2]
    3692:	f884 0053 	strb.w	r0, [r4, #83]	; 0x53
				SPI_LEVERS_TX[offset+20] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][3];
    3696:	7818      	ldrb	r0, [r3, #0]
    3698:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    369c:	00c0      	lsls	r0, r0, #3
    369e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    36a2:	4410      	add	r0, r2
    36a4:	78c0      	ldrb	r0, [r0, #3]
    36a6:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
				SPI_LEVERS_TX[offset+21] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][4];
    36aa:	7818      	ldrb	r0, [r3, #0]
    36ac:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    36b0:	00c0      	lsls	r0, r0, #3
    36b2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    36b6:	4410      	add	r0, r2
    36b8:	7900      	ldrb	r0, [r0, #4]
    36ba:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
				SPI_LEVERS_TX[offset+22] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][5];
    36be:	7818      	ldrb	r0, [r3, #0]
    36c0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    36c4:	00c0      	lsls	r0, r0, #3
    36c6:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    36ca:	4410      	add	r0, r2
    36cc:	7940      	ldrb	r0, [r0, #5]
    36ce:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
				SPI_LEVERS_TX[offset+23] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][6];
    36d2:	7818      	ldrb	r0, [r3, #0]
    36d4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    36d8:	00c0      	lsls	r0, r0, #3
    36da:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    36de:	4410      	add	r0, r2
    36e0:	7980      	ldrb	r0, [r0, #6]
    36e2:	f884 0057 	strb.w	r0, [r4, #87]	; 0x57
				SPI_LEVERS_TX[offset+24] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][7];
    36e6:	7818      	ldrb	r0, [r3, #0]
    36e8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    36ec:	00c0      	lsls	r0, r0, #3
    36ee:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    36f2:	4410      	add	r0, r2
    36f4:	79c0      	ldrb	r0, [r0, #7]
    36f6:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
				SPI_LEVERS_TX[offset+25] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][8];
    36fa:	7818      	ldrb	r0, [r3, #0]
    36fc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    3700:	00c0      	lsls	r0, r0, #3
    3702:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    3706:	4410      	add	r0, r2
    3708:	7a00      	ldrb	r0, [r0, #8]
    370a:	f884 0059 	strb.w	r0, [r4, #89]	; 0x59
				SPI_LEVERS_TX[offset+26] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][9];
    370e:	7818      	ldrb	r0, [r3, #0]
    3710:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    3714:	00c0      	lsls	r0, r0, #3
    3716:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    371a:	440a      	add	r2, r1
    371c:	7a52      	ldrb	r2, [r2, #9]
    371e:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
				SPI_LEVERS_TX[offset+27] = 13;
    3722:	220d      	movs	r2, #13
    3724:	f884 205b 	strb.w	r2, [r4, #91]	; 0x5b
				SPI_LEVERS_TX[offset+28] = 13;
    3728:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
				SPI_LEVERS_TX[offset+29] = 13;
    372c:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
				SPI_LEVERS_TX[offset+30] = (sampleClippedCountdown > 0); //report whether there was a clip on the first board in the last 65535 samples
    3730:	4a11      	ldr	r2, [pc, #68]	; (3778 <handleSPI+0x558>)
    3732:	8812      	ldrh	r2, [r2, #0]
    3734:	b292      	uxth	r2, r2
    3736:	3a00      	subs	r2, #0
    3738:	bf18      	it	ne
    373a:	2201      	movne	r2, #1
				if (whichMacroToSendName >= 12)
    373c:	2e0b      	cmp	r6, #11
				SPI_LEVERS_TX[offset+30] = (sampleClippedCountdown > 0); //report whether there was a clip on the first board in the last 65535 samples
    373e:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
				SPI_LEVERS_TX[offset+31] = 254;
    3742:	f04f 02fe 	mov.w	r2, #254	; 0xfe
    3746:	e019      	b.n	377c <handleSPI+0x55c>
    3748:	200004b1 	.word	0x200004b1
    374c:	20004f38 	.word	0x20004f38
    3750:	478bff74 	.word	0x478bff74
    3754:	3b000080 	.word	0x3b000080
    3758:	20013f48 	.word	0x20013f48
    375c:	58021800 	.word	0x58021800
    3760:	20013f84 	.word	0x20013f84
    3764:	20014159 	.word	0x20014159
    3768:	2001c5d5 	.word	0x2001c5d5
    376c:	30042000 	.word	0x30042000
    3770:	2001c5d4 	.word	0x2001c5d4
    3774:	30043380 	.word	0x30043380
    3778:	2000549e 	.word	0x2000549e
    377c:	f884 205f 	strb.w	r2, [r4, #95]	; 0x5f
				if (whichMacroToSendName >= 12)
    3780:	d93c      	bls.n	37fc <handleSPI+0x5dc>
					whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    3782:	781a      	ldrb	r2, [r3, #0]
					whichMacroToSendName = 0;
    3784:	2100      	movs	r1, #0
					whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    3786:	3201      	adds	r2, #1
					whichMacroToSendName = 0;
    3788:	7029      	strb	r1, [r5, #0]
					whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    378a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    378e:	701a      	strb	r2, [r3, #0]
    3790:	e577      	b.n	3282 <handleSPI+0x62>
    3792:	2bfd      	cmp	r3, #253	; 0xfd
    3794:	f47f aedc 	bne.w	3550 <handleSPI+0x330>
			if(writingState == ReceivingPreset)
    3798:	4b46      	ldr	r3, [pc, #280]	; (38b4 <handleSPI+0x694>)
    379a:	7819      	ldrb	r1, [r3, #0]
    379c:	2902      	cmp	r1, #2
    379e:	f47f aed7 	bne.w	3550 <handleSPI+0x330>
				 presetNumberToLoad = presetNumberToSave;
    37a2:	4845      	ldr	r0, [pc, #276]	; (38b8 <handleSPI+0x698>)
				 writingState = 0;
    37a4:	701a      	strb	r2, [r3, #0]
				 presetNumberToLoad = presetNumberToSave;
    37a6:	7803      	ldrb	r3, [r0, #0]
				 presetWaitingToParse = bufferPos;
    37a8:	4a44      	ldr	r2, [pc, #272]	; (38bc <handleSPI+0x69c>)
				 presetNumberToLoad = presetNumberToSave;
    37aa:	4945      	ldr	r1, [pc, #276]	; (38c0 <handleSPI+0x6a0>)
    37ac:	b2db      	uxtb	r3, r3
    37ae:	700b      	strb	r3, [r1, #0]
				 presetWaitingToParse = bufferPos;
    37b0:	8813      	ldrh	r3, [r2, #0]
    37b2:	4944      	ldr	r1, [pc, #272]	; (38c4 <handleSPI+0x6a4>)
    37b4:	b29b      	uxth	r3, r3
    37b6:	600b      	str	r3, [r1, #0]
				 presetWaitingToWrite = bufferPos;
    37b8:	8813      	ldrh	r3, [r2, #0]
    37ba:	4a43      	ldr	r2, [pc, #268]	; (38c8 <handleSPI+0x6a8>)
    37bc:	b29b      	uxth	r3, r3
    37be:	6013      	str	r3, [r2, #0]
    37c0:	e6c6      	b.n	3550 <handleSPI+0x330>
			SPI_LEVERS_TX[offset] = 252; //special byte that says I'm gonna send you new firmware so reboot into bootloader;
    37c2:	4b42      	ldr	r3, [pc, #264]	; (38cc <handleSPI+0x6ac>)
    37c4:	20fc      	movs	r0, #252	; 0xfc
    37c6:	4942      	ldr	r1, [pc, #264]	; (38d0 <handleSPI+0x6b0>)
    37c8:	f8df b128 	ldr.w	fp, [pc, #296]	; 38f4 <handleSPI+0x6d4>
			brainFirmwareSendInProgress = 1;
    37cc:	6015      	str	r5, [r2, #0]
			SPI_LEVERS_TX[offset] = 252; //special byte that says I'm gonna send you new firmware so reboot into bootloader;
    37ce:	190a      	adds	r2, r1, r4
    37d0:	1c5d      	adds	r5, r3, #1
    37d2:	f8db 1000 	ldr.w	r1, [fp]
    37d6:	f103 0464 	add.w	r4, r3, #100	; 0x64
    37da:	f882 0040 	strb.w	r0, [r2, #64]	; 0x40
			for (uint8_t i = 0; i<100; i++)
    37de:	461a      	mov	r2, r3
				if (brainFirmwareBuffer[i] ==  0x3a)
    37e0:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    37e4:	283a      	cmp	r0, #58	; 0x3a
    37e6:	d101      	bne.n	37ec <handleSPI+0x5cc>
					brainFirmwareBufferIndex = i+1; // start after the header, so it's the first real byte after the ":"
    37e8:	3202      	adds	r2, #2
    37ea:	1b51      	subs	r1, r2, r5
			for (uint8_t i = 0; i<100; i++)
    37ec:	429c      	cmp	r4, r3
    37ee:	d1f6      	bne.n	37de <handleSPI+0x5be>
			positionInRowLine = 0;
    37f0:	4b38      	ldr	r3, [pc, #224]	; (38d4 <handleSPI+0x6b4>)
    37f2:	2200      	movs	r2, #0
    37f4:	f8cb 1000 	str.w	r1, [fp]
    37f8:	801a      	strh	r2, [r3, #0]
    37fa:	e542      	b.n	3282 <handleSPI+0x62>
				whichMacroToSendName = (whichMacroToSendName + 1);
    37fc:	702e      	strb	r6, [r5, #0]
    37fe:	e540      	b.n	3282 <handleSPI+0x62>
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    3800:	ea48 0303 	orr.w	r3, r8, r3
    3804:	e5d8      	b.n	33b8 <handleSPI+0x198>
    3806:	011b      	lsls	r3, r3, #4
    3808:	b2db      	uxtb	r3, r3
    380a:	e5bd      	b.n	3388 <handleSPI+0x168>
		return (uint8_t) (10 + value - 'a');
    380c:	f1a6 0357 	sub.w	r3, r6, #87	; 0x57
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    3810:	011b      	lsls	r3, r3, #4
    3812:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
		return (uint8_t) (10 + value - 'a');
    3816:	e5b7      	b.n	3388 <handleSPI+0x168>
    3818:	f1ae 0857 	sub.w	r8, lr, #87	; 0x57
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    381c:	ea43 0308 	orr.w	r3, r3, r8
    3820:	b2db      	uxtb	r3, r3
		return (uint8_t) (10 + value - 'a');
    3822:	e5c9      	b.n	33b8 <handleSPI+0x198>
		return (uint8_t) (10 + value - 'A');
    3824:	f1a6 0337 	sub.w	r3, r6, #55	; 0x37
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    3828:	011b      	lsls	r3, r3, #4
    382a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
		return (uint8_t) (10 + value - 'A');
    382e:	e5ab      	b.n	3388 <handleSPI+0x168>
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    3830:	18bb      	adds	r3, r7, r2
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    3832:	4662      	mov	r2, ip
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    3834:	f893 e002 	ldrb.w	lr, [r3, #2]
    3838:	e560      	b.n	32fc <handleSPI+0xdc>
			 if (writingState != ReceivingPreset)
    383a:	4a1e      	ldr	r2, [pc, #120]	; (38b4 <handleSPI+0x694>)
    383c:	7813      	ldrb	r3, [r2, #0]
    383e:	2b02      	cmp	r3, #2
    3840:	f000 82c9 	beq.w	3dd6 <handleSPI+0xbb6>
				 writingState = ReceivingPreset; // set the flag to let the mcu know that a preset write is in progress
    3844:	4b24      	ldr	r3, [pc, #144]	; (38d8 <handleSPI+0x6b8>)
    3846:	2102      	movs	r1, #2
    3848:	0758      	lsls	r0, r3, #29
    384a:	7011      	strb	r1, [r2, #0]
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    384c:	f040 85d1 	bne.w	43f2 <_Min_Heap_Size+0x3f2>
    3850:	f503 6280 	add.w	r2, r3, #1024	; 0x400
						audioOutBuffer[i] = 0;
    3854:	2000      	movs	r0, #0
    3856:	2100      	movs	r1, #0
    3858:	e8e3 0102 	strd	r0, r1, [r3], #8
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    385c:	429a      	cmp	r2, r3
    385e:	d1fb      	bne.n	3858 <handleSPI+0x638>
				 diskBusy = 1;
    3860:	4a1e      	ldr	r2, [pc, #120]	; (38dc <handleSPI+0x6bc>)
    3862:	2101      	movs	r1, #1
				 audioMasterLevel = 0.0f;
    3864:	4b1e      	ldr	r3, [pc, #120]	; (38e0 <handleSPI+0x6c0>)
				 diskBusy = 1;
    3866:	7011      	strb	r1, [r2, #0]
				 audioMasterLevel = 0.0f;
    3868:	2200      	movs	r2, #0
				 bufferPos = 0;
    386a:	4914      	ldr	r1, [pc, #80]	; (38bc <handleSPI+0x69c>)
				 audioMasterLevel = 0.0f;
    386c:	601a      	str	r2, [r3, #0]
				 bufferPos = 0;
    386e:	2300      	movs	r3, #0
    3870:	800b      	strh	r3, [r1, #0]
			 presetNumberToSave = SPI_LEVERS_RX[offset + 1];
    3872:	192b      	adds	r3, r5, r4
    3874:	4a10      	ldr	r2, [pc, #64]	; (38b8 <handleSPI+0x698>)
    3876:	4e1b      	ldr	r6, [pc, #108]	; (38e4 <handleSPI+0x6c4>)
    3878:	785b      	ldrb	r3, [r3, #1]
    387a:	4f1b      	ldr	r7, [pc, #108]	; (38e8 <handleSPI+0x6c8>)
    387c:	7013      	strb	r3, [r2, #0]
			 uint8_t currentByte = offset+2; // first number says what it is 2nd number says which number it is
    387e:	1ca3      	adds	r3, r4, #2
    3880:	b2db      	uxtb	r3, r3
    3882:	1e5a      	subs	r2, r3, #1
    3884:	441e      	add	r6, r3
    3886:	442a      	add	r2, r5
				 buffer[bufferPos++] = SPI_LEVERS_RX[currentByte + i];
    3888:	880b      	ldrh	r3, [r1, #0]
    388a:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    388e:	b29b      	uxth	r3, r3
			 for (int i = 0; i < 28; i++)
    3890:	4296      	cmp	r6, r2
				 buffer[bufferPos++] = SPI_LEVERS_RX[currentByte + i];
    3892:	54f8      	strb	r0, [r7, r3]
    3894:	f103 0301 	add.w	r3, r3, #1
    3898:	b29b      	uxth	r3, r3
    389a:	800b      	strh	r3, [r1, #0]
			 for (int i = 0; i < 28; i++)
    389c:	d1f4      	bne.n	3888 <handleSPI+0x668>
    389e:	e657      	b.n	3550 <handleSPI+0x330>
			if (boardNumber == 0)
    38a0:	4b12      	ldr	r3, [pc, #72]	; (38ec <handleSPI+0x6cc>)
    38a2:	781b      	ldrb	r3, [r3, #0]
    38a4:	2b00      	cmp	r3, #0
    38a6:	f47f acec 	bne.w	3282 <handleSPI+0x62>
				brainFirmwareUpdateRequested = 1;
    38aa:	4b11      	ldr	r3, [pc, #68]	; (38f0 <handleSPI+0x6d0>)
    38ac:	2201      	movs	r2, #1
    38ae:	601a      	str	r2, [r3, #0]
    38b0:	e653      	b.n	355a <handleSPI+0x33a>
    38b2:	bf00      	nop
    38b4:	2001c5d6 	.word	0x2001c5d6
    38b8:	2001a0e7 	.word	0x2001a0e7
    38bc:	20014170 	.word	0x20014170
    38c0:	2001a0e6 	.word	0x2001a0e6
    38c4:	2001a0ec 	.word	0x2001a0ec
    38c8:	2001a0f0 	.word	0x2001a0f0
    38cc:	c1dfffff 	.word	0xc1dfffff
    38d0:	30000800 	.word	0x30000800
    38d4:	2001a0d4 	.word	0x2001a0d4
    38d8:	30000000 	.word	0x30000000
    38dc:	200141ac 	.word	0x200141ac
    38e0:	2000071c 	.word	0x2000071c
    38e4:	3000081b 	.word	0x3000081b
    38e8:	30042380 	.word	0x30042380
    38ec:	20014159 	.word	0x20014159
    38f0:	2001416c 	.word	0x2001416c
    38f4:	2001415c 	.word	0x2001415c
			 uint8_t currentByte = offset+1;
    38f8:	f100 0801 	add.w	r8, r0, #1
				if (knobFrozen[i])
    38fc:	4fbb      	ldr	r7, [pc, #748]	; (3bec <handleSPI+0x9cc>)
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    38fe:	fa5f f888 	uxtb.w	r8, r8
				if (knobFrozen[i])
    3902:	783b      	ldrb	r3, [r7, #0]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    3904:	f815 9008 	ldrb.w	r9, [r5, r8]
				if (knobFrozen[i])
    3908:	2b00      	cmp	r3, #0
    390a:	f000 8274 	beq.w	3df6 <handleSPI+0xbd6>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    390e:	4eb8      	ldr	r6, [pc, #736]	; (3bf0 <handleSPI+0x9d0>)
    3910:	7833      	ldrb	r3, [r6, #0]
    3912:	1c9a      	adds	r2, r3, #2
    3914:	4591      	cmp	r9, r2
    3916:	dc02      	bgt.n	391e <handleSPI+0x6fe>
    3918:	3b02      	subs	r3, #2
    391a:	4599      	cmp	r9, r3
    391c:	da03      	bge.n	3926 <handleSPI+0x706>
						knobFrozen[i] = 0;
    391e:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    3920:	f886 9000 	strb.w	r9, [r6]
						knobFrozen[i] = 0;
    3924:	703b      	strb	r3, [r7, #0]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    3926:	eb05 0308 	add.w	r3, r5, r8
    392a:	f893 9001 	ldrb.w	r9, [r3, #1]
				if (knobFrozen[i])
    392e:	787b      	ldrb	r3, [r7, #1]
    3930:	2b00      	cmp	r3, #0
    3932:	f000 827d 	beq.w	3e30 <handleSPI+0xc10>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    3936:	7873      	ldrb	r3, [r6, #1]
    3938:	1c9a      	adds	r2, r3, #2
    393a:	454a      	cmp	r2, r9
    393c:	db02      	blt.n	3944 <handleSPI+0x724>
    393e:	3b02      	subs	r3, #2
    3940:	454b      	cmp	r3, r9
    3942:	dd03      	ble.n	394c <handleSPI+0x72c>
						knobFrozen[i] = 0;
    3944:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    3946:	f886 9001 	strb.w	r9, [r6, #1]
						knobFrozen[i] = 0;
    394a:	707b      	strb	r3, [r7, #1]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    394c:	eb05 0308 	add.w	r3, r5, r8
    3950:	f893 9002 	ldrb.w	r9, [r3, #2]
				if (knobFrozen[i])
    3954:	78bb      	ldrb	r3, [r7, #2]
    3956:	2b00      	cmp	r3, #0
    3958:	f000 825c 	beq.w	3e14 <handleSPI+0xbf4>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    395c:	78b3      	ldrb	r3, [r6, #2]
    395e:	1c9a      	adds	r2, r3, #2
    3960:	454a      	cmp	r2, r9
    3962:	db02      	blt.n	396a <handleSPI+0x74a>
    3964:	3b02      	subs	r3, #2
    3966:	4599      	cmp	r9, r3
    3968:	da03      	bge.n	3972 <handleSPI+0x752>
						knobFrozen[i] = 0;
    396a:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    396c:	f886 9002 	strb.w	r9, [r6, #2]
						knobFrozen[i] = 0;
    3970:	70bb      	strb	r3, [r7, #2]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    3972:	eb05 0308 	add.w	r3, r5, r8
    3976:	f893 9003 	ldrb.w	r9, [r3, #3]
				if (knobFrozen[i])
    397a:	78fb      	ldrb	r3, [r7, #3]
    397c:	2b00      	cmp	r3, #0
    397e:	f000 82c7 	beq.w	3f10 <handleSPI+0xcf0>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    3982:	78f3      	ldrb	r3, [r6, #3]
    3984:	1c9a      	adds	r2, r3, #2
    3986:	454a      	cmp	r2, r9
    3988:	db02      	blt.n	3990 <handleSPI+0x770>
    398a:	3b02      	subs	r3, #2
    398c:	454b      	cmp	r3, r9
    398e:	dd03      	ble.n	3998 <handleSPI+0x778>
						knobFrozen[i] = 0;
    3990:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    3992:	f886 9003 	strb.w	r9, [r6, #3]
						knobFrozen[i] = 0;
    3996:	70fb      	strb	r3, [r7, #3]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    3998:	eb05 0308 	add.w	r3, r5, r8
    399c:	f893 9004 	ldrb.w	r9, [r3, #4]
				if (knobFrozen[i])
    39a0:	793b      	ldrb	r3, [r7, #4]
    39a2:	2b00      	cmp	r3, #0
    39a4:	f000 82a6 	beq.w	3ef4 <handleSPI+0xcd4>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    39a8:	7933      	ldrb	r3, [r6, #4]
    39aa:	1c9a      	adds	r2, r3, #2
    39ac:	4591      	cmp	r9, r2
    39ae:	dc02      	bgt.n	39b6 <handleSPI+0x796>
    39b0:	3b02      	subs	r3, #2
    39b2:	4599      	cmp	r9, r3
    39b4:	da03      	bge.n	39be <handleSPI+0x79e>
						knobFrozen[i] = 0;
    39b6:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    39b8:	f886 9004 	strb.w	r9, [r6, #4]
						knobFrozen[i] = 0;
    39bc:	713b      	strb	r3, [r7, #4]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    39be:	eb05 0308 	add.w	r3, r5, r8
    39c2:	f893 9005 	ldrb.w	r9, [r3, #5]
				if (knobFrozen[i])
    39c6:	797b      	ldrb	r3, [r7, #5]
    39c8:	2b00      	cmp	r3, #0
    39ca:	f000 8285 	beq.w	3ed8 <handleSPI+0xcb8>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    39ce:	7973      	ldrb	r3, [r6, #5]
    39d0:	1c9a      	adds	r2, r3, #2
    39d2:	4591      	cmp	r9, r2
    39d4:	dc02      	bgt.n	39dc <handleSPI+0x7bc>
    39d6:	3b02      	subs	r3, #2
    39d8:	4599      	cmp	r9, r3
    39da:	da03      	bge.n	39e4 <handleSPI+0x7c4>
						knobFrozen[i] = 0;
    39dc:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    39de:	f886 9005 	strb.w	r9, [r6, #5]
						knobFrozen[i] = 0;
    39e2:	717b      	strb	r3, [r7, #5]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    39e4:	eb05 0308 	add.w	r3, r5, r8
    39e8:	f893 9006 	ldrb.w	r9, [r3, #6]
				if (knobFrozen[i])
    39ec:	79bb      	ldrb	r3, [r7, #6]
    39ee:	2b00      	cmp	r3, #0
    39f0:	f000 8264 	beq.w	3ebc <handleSPI+0xc9c>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    39f4:	79b3      	ldrb	r3, [r6, #6]
    39f6:	1c9a      	adds	r2, r3, #2
    39f8:	4591      	cmp	r9, r2
    39fa:	dc02      	bgt.n	3a02 <handleSPI+0x7e2>
    39fc:	3b02      	subs	r3, #2
    39fe:	4599      	cmp	r9, r3
    3a00:	da03      	bge.n	3a0a <handleSPI+0x7ea>
						knobFrozen[i] = 0;
    3a02:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    3a04:	f886 9006 	strb.w	r9, [r6, #6]
						knobFrozen[i] = 0;
    3a08:	71bb      	strb	r3, [r7, #6]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    3a0a:	eb05 0308 	add.w	r3, r5, r8
    3a0e:	f893 9007 	ldrb.w	r9, [r3, #7]
				if (knobFrozen[i])
    3a12:	79fb      	ldrb	r3, [r7, #7]
    3a14:	2b00      	cmp	r3, #0
    3a16:	f000 8243 	beq.w	3ea0 <handleSPI+0xc80>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    3a1a:	79f3      	ldrb	r3, [r6, #7]
    3a1c:	1c9a      	adds	r2, r3, #2
    3a1e:	4591      	cmp	r9, r2
    3a20:	dc02      	bgt.n	3a28 <handleSPI+0x808>
    3a22:	3b02      	subs	r3, #2
    3a24:	4599      	cmp	r9, r3
    3a26:	da03      	bge.n	3a30 <handleSPI+0x810>
						knobFrozen[i] = 0;
    3a28:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    3a2a:	f886 9007 	strb.w	r9, [r6, #7]
						knobFrozen[i] = 0;
    3a2e:	71fb      	strb	r3, [r7, #7]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    3a30:	eb05 0308 	add.w	r3, r5, r8
    3a34:	f893 9008 	ldrb.w	r9, [r3, #8]
				if (knobFrozen[i])
    3a38:	7a3b      	ldrb	r3, [r7, #8]
    3a3a:	2b00      	cmp	r3, #0
    3a3c:	f000 8222 	beq.w	3e84 <handleSPI+0xc64>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    3a40:	7a33      	ldrb	r3, [r6, #8]
    3a42:	1c9a      	adds	r2, r3, #2
    3a44:	4591      	cmp	r9, r2
    3a46:	dc02      	bgt.n	3a4e <handleSPI+0x82e>
    3a48:	3b02      	subs	r3, #2
    3a4a:	4599      	cmp	r9, r3
    3a4c:	da03      	bge.n	3a56 <handleSPI+0x836>
						knobFrozen[i] = 0;
    3a4e:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    3a50:	f886 9008 	strb.w	r9, [r6, #8]
						knobFrozen[i] = 0;
    3a54:	723b      	strb	r3, [r7, #8]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    3a56:	eb05 0308 	add.w	r3, r5, r8
    3a5a:	f893 9009 	ldrb.w	r9, [r3, #9]
				if (knobFrozen[i])
    3a5e:	7a7b      	ldrb	r3, [r7, #9]
    3a60:	2b00      	cmp	r3, #0
    3a62:	f000 8201 	beq.w	3e68 <handleSPI+0xc48>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    3a66:	7a73      	ldrb	r3, [r6, #9]
    3a68:	1c9a      	adds	r2, r3, #2
    3a6a:	4591      	cmp	r9, r2
    3a6c:	dc02      	bgt.n	3a74 <handleSPI+0x854>
    3a6e:	3b02      	subs	r3, #2
    3a70:	4599      	cmp	r9, r3
    3a72:	da03      	bge.n	3a7c <handleSPI+0x85c>
						knobFrozen[i] = 0;
    3a74:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    3a76:	f886 9009 	strb.w	r9, [r6, #9]
						knobFrozen[i] = 0;
    3a7a:	727b      	strb	r3, [r7, #9]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    3a7c:	eb05 0308 	add.w	r3, r5, r8
    3a80:	f893 900a 	ldrb.w	r9, [r3, #10]
				if (knobFrozen[i])
    3a84:	7abb      	ldrb	r3, [r7, #10]
    3a86:	2b00      	cmp	r3, #0
    3a88:	f000 81e0 	beq.w	3e4c <handleSPI+0xc2c>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    3a8c:	7ab3      	ldrb	r3, [r6, #10]
    3a8e:	1c9a      	adds	r2, r3, #2
    3a90:	4591      	cmp	r9, r2
    3a92:	dc02      	bgt.n	3a9a <handleSPI+0x87a>
    3a94:	3b02      	subs	r3, #2
    3a96:	4599      	cmp	r9, r3
    3a98:	da03      	bge.n	3aa2 <handleSPI+0x882>
						knobFrozen[i] = 0;
    3a9a:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    3a9c:	f886 900a 	strb.w	r9, [r6, #10]
						knobFrozen[i] = 0;
    3aa0:	72bb      	strb	r3, [r7, #10]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    3aa2:	44a8      	add	r8, r5
				if (knobFrozen[i])
    3aa4:	7afb      	ldrb	r3, [r7, #11]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    3aa6:	f898 800b 	ldrb.w	r8, [r8, #11]
				if (knobFrozen[i])
    3aaa:	2b00      	cmp	r3, #0
    3aac:	f000 8195 	beq.w	3dda <handleSPI+0xbba>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    3ab0:	7af3      	ldrb	r3, [r6, #11]
    3ab2:	1c9a      	adds	r2, r3, #2
    3ab4:	4590      	cmp	r8, r2
    3ab6:	dc02      	bgt.n	3abe <handleSPI+0x89e>
    3ab8:	3b02      	subs	r3, #2
    3aba:	4598      	cmp	r8, r3
    3abc:	da03      	bge.n	3ac6 <handleSPI+0x8a6>
						knobFrozen[i] = 0;
    3abe:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    3ac0:	f886 800b 	strb.w	r8, [r6, #11]
						knobFrozen[i] = 0;
    3ac4:	72fb      	strb	r3, [r7, #11]
			currentByte += 12;
    3ac6:	f104 070d 	add.w	r7, r4, #13
    3aca:	4e4a      	ldr	r6, [pc, #296]	; (3bf4 <handleSPI+0x9d4>)
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS_RX[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3acc:	ed9f 8a4a 	vldr	s16, [pc, #296]	; 3bf8 <handleSPI+0x9d8>
    3ad0:	b2ff      	uxtb	r7, r7
    3ad2:	f106 0828 	add.w	r8, r6, #40	; 0x28
    3ad6:	3f01      	subs	r7, #1
    3ad8:	442f      	add	r7, r5
    3ada:	f817 3f01 	ldrb.w	r3, [r7, #1]!
    3ade:	4630      	mov	r0, r6
			for (int i = 0; i < 10; i++)
    3ae0:	3604      	adds	r6, #4
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS_RX[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3ae2:	ee00 3a10 	vmov	s0, r3
    3ae6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    3aea:	ee20 0a08 	vmul.f32	s0, s0, s16
    3aee:	f005 fc87 	bl	9400 <__tExpSmooth_setDest_veneer>
			for (int i = 0; i < 10; i++)
    3af2:	45b0      	cmp	r8, r6
    3af4:	d1f1      	bne.n	3ada <handleSPI+0x8ba>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
    3af6:	2201      	movs	r2, #1
    3af8:	4840      	ldr	r0, [pc, #256]	; (3bfc <handleSPI+0x9dc>)
    3afa:	f44f 7100 	mov.w	r1, #512	; 0x200
    3afe:	f005 fc1b 	bl	9338 <__HAL_GPIO_WritePin_veneer>
			whichBar = 1;
    3b02:	4b3f      	ldr	r3, [pc, #252]	; (3c00 <handleSPI+0x9e0>)
    3b04:	2201      	movs	r2, #1
			updateStateFromSPIMessage(offset);
    3b06:	4620      	mov	r0, r4
			whichBar = 1;
    3b08:	701a      	strb	r2, [r3, #0]
    3b0a:	e519      	b.n	3540 <handleSPI+0x320>
			if (presetReady)
    3b0c:	4b3d      	ldr	r3, [pc, #244]	; (3c04 <handleSPI+0x9e4>)
    3b0e:	681b      	ldr	r3, [r3, #0]
    3b10:	2b00      	cmp	r3, #0
    3b12:	f43f ad1d 	beq.w	3550 <handleSPI+0x330>
				uint8_t currentByte = offset+1;
    3b16:	1c43      	adds	r3, r0, #1
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS_RX[currentByte] << 8) + SPI_LEVERS_RX[currentByte+1]);
    3b18:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 3c08 <handleSPI+0x9e8>
    3b1c:	4f3b      	ldr	r7, [pc, #236]	; (3c0c <handleSPI+0x9ec>)
				uint16_t whichParam = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    3b1e:	b2db      	uxtb	r3, r3
    3b20:	18ea      	adds	r2, r5, r3
    3b22:	5ceb      	ldrb	r3, [r5, r3]
    3b24:	7856      	ldrb	r6, [r2, #1]
    3b26:	eb06 2603 	add.w	r6, r6, r3, lsl #8
				currentByte = currentByte + 2;
    3b2a:	1cc3      	adds	r3, r0, #3
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS_RX[currentByte] << 8) + SPI_LEVERS_RX[currentByte+1]);
    3b2c:	b2db      	uxtb	r3, r3
				uint16_t whichParam = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    3b2e:	b2b6      	uxth	r6, r6
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS_RX[currentByte] << 8) + SPI_LEVERS_RX[currentByte+1]);
    3b30:	18e9      	adds	r1, r5, r3
    3b32:	5cea      	ldrb	r2, [r5, r3]
    3b34:	f1a6 083f 	sub.w	r8, r6, #63	; 0x3f
    3b38:	784b      	ldrb	r3, [r1, #1]
    3b3a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    3b3e:	fa1f f288 	uxth.w	r2, r8
    3b42:	ee07 3a90 	vmov	s15, r3
    3b46:	00f3      	lsls	r3, r6, #3
    3b48:	2a18      	cmp	r2, #24
    3b4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3b4e:	9301      	str	r3, [sp, #4]
    3b50:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    3b54:	ee67 7a87 	vmul.f32	s15, s15, s14
    3b58:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    3b5c:	edc3 7a00 	vstr	s15, [r3]
    3b60:	edc3 7a01 	vstr	s15, [r3, #4]
				if ((whichParam == Effect1FXType) || (whichParam == Effect2FXType) || (whichParam == Effect3FXType) || (whichParam == Effect4FXType))
    3b64:	d805      	bhi.n	3b72 <handleSPI+0x952>
    3b66:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
    3b6a:	40d3      	lsrs	r3, r2
    3b6c:	07d9      	lsls	r1, r3, #31
    3b6e:	f100 8262 	bmi.w	4036 <_Min_Heap_Size+0x36>
    3b72:	00f3      	lsls	r3, r6, #3
			 for (int i = 0; i < numStringsThisBoard; i++)
    3b74:	f04f 0b00 	mov.w	fp, #0
    3b78:	46a1      	mov	r9, r4
    3b7a:	eba3 0806 	sub.w	r8, r3, r6
    3b7e:	465c      	mov	r4, fp
    3b80:	eb07 0888 	add.w	r8, r7, r8, lsl #2
					params[whichParam].realVal[v] = params[whichParam].scaleFunc(params[whichParam].zeroToOneVal[v]);
    3b84:	46c2      	mov	sl, r8
    3b86:	ecb8 0a01 	vldmia	r8!, {s0}
    3b8a:	f8da 3010 	ldr.w	r3, [sl, #16]
    3b8e:	4798      	blx	r3
					params[whichParam].setParam(params[whichParam].realVal[v], params[whichParam].objectNumber, v);
    3b90:	4621      	mov	r1, r4
					params[whichParam].realVal[v] = params[whichParam].scaleFunc(params[whichParam].zeroToOneVal[v]);
    3b92:	ed88 0a01 	vstr	s0, [r8, #4]
					params[whichParam].setParam(params[whichParam].realVal[v], params[whichParam].objectNumber, v);
    3b96:	f8da 3014 	ldr.w	r3, [sl, #20]
    3b9a:	f89a 0018 	ldrb.w	r0, [sl, #24]
    3b9e:	4798      	blx	r3
				for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    3ba0:	2c00      	cmp	r4, #0
    3ba2:	f000 8116 	beq.w	3dd2 <handleSPI+0xbb2>
    3ba6:	f1a6 0323 	sub.w	r3, r6, #35	; 0x23
    3baa:	464c      	mov	r4, r9
				if ((whichParam == Osc1ShapeSet) || (whichParam == Osc2ShapeSet) || (whichParam == Osc3ShapeSet))
    3bac:	b299      	uxth	r1, r3
    3bae:	291a      	cmp	r1, #26
    3bb0:	d804      	bhi.n	3bbc <handleSPI+0x99c>
    3bb2:	4a17      	ldr	r2, [pc, #92]	; (3c10 <handleSPI+0x9f0>)
    3bb4:	40ca      	lsrs	r2, r1
    3bb6:	07d2      	lsls	r2, r2, #31
    3bb8:	f100 8348 	bmi.w	424c <_Min_Heap_Size+0x24c>
				if ((whichParam == Osc1) || (whichParam == Osc2) ||(whichParam == Osc3))
    3bbc:	f1a6 0218 	sub.w	r2, r6, #24
    3bc0:	b291      	uxth	r1, r2
    3bc2:	291a      	cmp	r1, #26
    3bc4:	f240 826e 	bls.w	40a4 <_Min_Heap_Size+0xa4>
				if ((whichParam == Noise))
    3bc8:	2e12      	cmp	r6, #18
    3bca:	f040 83ad 	bne.w	4328 <_Min_Heap_Size+0x328>
					if (params[whichParam].realVal[0]  > 0.5f)
    3bce:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    3bd2:	ed97 7a80 	vldr	s14, [r7, #512]	; 0x200
    3bd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
    3bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3bde:	f77f acb7 	ble.w	3550 <handleSPI+0x330>
						noiseOn = 1;
    3be2:	4b0c      	ldr	r3, [pc, #48]	; (3c14 <handleSPI+0x9f4>)
    3be4:	2201      	movs	r2, #1
    3be6:	701a      	strb	r2, [r3, #0]
    3be8:	e4b2      	b.n	3550 <handleSPI+0x330>
    3bea:	bf00      	nop
    3bec:	20004f48 	.word	0x20004f48
    3bf0:	2001a0f4 	.word	0x2001a0f4
    3bf4:	20005050 	.word	0x20005050
    3bf8:	3b808081 	.word	0x3b808081
    3bfc:	58021800 	.word	0x58021800
    3c00:	20013f84 	.word	0x20013f84
    3c04:	20005078 	.word	0x20005078
    3c08:	377ffff6 	.word	0x377ffff6
    3c0c:	20018fbc 	.word	0x20018fbc
    3c10:	04002001 	.word	0x04002001
    3c14:	2001d348 	.word	0x2001d348
			if (presetReady)
    3c18:	4bc4      	ldr	r3, [pc, #784]	; (3f2c <handleSPI+0xd0c>)
    3c1a:	681b      	ldr	r3, [r3, #0]
    3c1c:	2b00      	cmp	r3, #0
    3c1e:	f43f ac97 	beq.w	3550 <handleSPI+0x330>
				uint8_t currentByte = offset+1;
    3c22:	1c43      	adds	r3, r0, #1
    3c24:	f8df 9378 	ldr.w	r9, [pc, #888]	; 3fa0 <handleSPI+0xd80>
				uint8_t foundOne = 0;
    3c28:	f04f 0e00 	mov.w	lr, #0
				uint8_t lowestEmptyMapping = MAX_NUM_MAPPINGS;
    3c2c:	f04f 0c20 	mov.w	ip, #32
				uint16_t destNumber = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    3c30:	b2db      	uxtb	r3, r3
    3c32:	5ce9      	ldrb	r1, [r5, r3]
    3c34:	442b      	add	r3, r5
    3c36:	785e      	ldrb	r6, [r3, #1]
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    3c38:	795f      	ldrb	r7, [r3, #5]
				uint16_t destNumber = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    3c3a:	eb06 2601 	add.w	r6, r6, r1, lsl #8
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    3c3e:	7919      	ldrb	r1, [r3, #4]
				uint8_t whichSlot = (SPI_LEVERS_RX[currentByte+2]);
    3c40:	f893 8002 	ldrb.w	r8, [r3, #2]
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    3c44:	eb07 2701 	add.w	r7, r7, r1, lsl #8
				uint8_t mappingChangeType = (SPI_LEVERS_RX[currentByte+3]);
    3c48:	f893 a003 	ldrb.w	sl, [r3, #3]
				uint16_t destNumber = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    3c4c:	b2b6      	uxth	r6, r6
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    3c4e:	4649      	mov	r1, r9
    3c50:	b23f      	sxth	r7, r7
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    3c52:	4673      	mov	r3, lr
					if (mappings[j].destNumber == destNumber)
    3c54:	7808      	ldrb	r0, [r1, #0]
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    3c56:	314c      	adds	r1, #76	; 0x4c
					if (mappings[j].destNumber == destNumber)
    3c58:	42b0      	cmp	r0, r6
    3c5a:	d102      	bne.n	3c62 <handleSPI+0xa42>
						whichMapping = j;
    3c5c:	b2da      	uxtb	r2, r3
						foundOne = 1;
    3c5e:	f04f 0e01 	mov.w	lr, #1
					if ((mappings[j].destNumber == 255) && (j < lowestEmptyMapping))
    3c62:	28ff      	cmp	r0, #255	; 0xff
    3c64:	d103      	bne.n	3c6e <handleSPI+0xa4e>
    3c66:	459c      	cmp	ip, r3
    3c68:	bfc8      	it	gt
    3c6a:	fa5f fc83 	uxtbgt.w	ip, r3
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    3c6e:	3301      	adds	r3, #1
    3c70:	2b20      	cmp	r3, #32
    3c72:	d1ef      	bne.n	3c54 <handleSPI+0xa34>
				if (foundOne == 0)
    3c74:	f1be 0f00 	cmp.w	lr, #0
    3c78:	d110      	bne.n	3c9c <handleSPI+0xa7c>
					numMappings++;
    3c7a:	49ad      	ldr	r1, [pc, #692]	; (3f30 <handleSPI+0xd10>)
					mappings[whichMapping].destNumber = destNumber;
    3c7c:	234c      	movs	r3, #76	; 0x4c
					mappings[whichMapping].dest = &params[destNumber];
    3c7e:	4662      	mov	r2, ip
					numMappings++;
    3c80:	7808      	ldrb	r0, [r1, #0]
					mappings[whichMapping].destNumber = destNumber;
    3c82:	fb03 f30c 	mul.w	r3, r3, ip
					numMappings++;
    3c86:	3001      	adds	r0, #1
					mappings[whichMapping].destNumber = destNumber;
    3c88:	f809 6003 	strb.w	r6, [r9, r3]
					mappings[whichMapping].dest = &params[destNumber];
    3c8c:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
					mappings[whichMapping].destNumber = destNumber;
    3c90:	444b      	add	r3, r9
					numMappings++;
    3c92:	7008      	strb	r0, [r1, #0]
					mappings[whichMapping].dest = &params[destNumber];
    3c94:	49a7      	ldr	r1, [pc, #668]	; (3f34 <handleSPI+0xd14>)
    3c96:	eb01 0186 	add.w	r1, r1, r6, lsl #2
    3c9a:	6059      	str	r1, [r3, #4]
				if (mappingChangeType == SourceID)
    3c9c:	f1ba 0f00 	cmp.w	sl, #0
    3ca0:	f040 8182 	bne.w	3fa8 <handleSPI+0xd88>
					mappings[whichMapping].sourceSmoothed[whichSlot] = 1;
    3ca4:	234c      	movs	r3, #76	; 0x4c
    3ca6:	2001      	movs	r0, #1
					if (source == 255)
    3ca8:	2fff      	cmp	r7, #255	; 0xff
					mappings[whichMapping].sourceSmoothed[whichSlot] = 1;
    3caa:	fb02 f303 	mul.w	r3, r2, r3
    3cae:	eb09 0b03 	add.w	fp, r9, r3
    3cb2:	eb0b 0608 	add.w	r6, fp, r8
    3cb6:	f886 0020 	strb.w	r0, [r6, #32]
					if (source == 255)
    3cba:	f000 83a4 	beq.w	4406 <_Min_Heap_Size+0x406>
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    3cbe:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 3f9c <handleSPI+0xd7c>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    3cc2:	f108 0104 	add.w	r1, r8, #4
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    3cc6:	f108 0e01 	add.w	lr, r8, #1
						if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    3cca:	2f03      	cmp	r7, #3
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    3ccc:	eb0c 0bc7 	add.w	fp, ip, r7, lsl #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    3cd0:	f8df c2d0 	ldr.w	ip, [pc, #720]	; 3fa4 <handleSPI+0xd84>
    3cd4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
						mappings[whichMapping].hookActive[whichSlot] = 1;
    3cd8:	f886 0048 	strb.w	r0, [r6, #72]	; 0x48
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    3cdc:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
    3ce0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    3ce4:	4449      	add	r1, r9
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    3ce6:	f849 b00e 	str.w	fp, [r9, lr]
    3cea:	f10b 0b04 	add.w	fp, fp, #4
    3cee:	444b      	add	r3, r9
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    3cf0:	f8c1 c004 	str.w	ip, [r1, #4]
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    3cf4:	f8c3 b00c 	str.w	fp, [r3, #12]
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    3cf8:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
						if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    3cfc:	f340 836d 	ble.w	43da <_Min_Heap_Size+0x3da>
						if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    3d00:	f1a7 0318 	sub.w	r3, r7, #24
    3d04:	2b03      	cmp	r3, #3
    3d06:	f200 83e4 	bhi.w	44d2 <_Min_Heap_Size+0x4d2>
							lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    3d0a:	4b8b      	ldr	r3, [pc, #556]	; (3f38 <handleSPI+0xd18>)
    3d0c:	443b      	add	r3, r7
    3d0e:	f803 0c18 	strb.w	r0, [r3, #-24]
						if ((source >= NOISE_SOURCE_OFFSET) && (source < (NOISE_SOURCE_OFFSET+1)))
    3d12:	2f03      	cmp	r7, #3
    3d14:	d102      	bne.n	3d1c <handleSPI+0xafc>
							noiseOn = 1;
    3d16:	4b89      	ldr	r3, [pc, #548]	; (3f3c <handleSPI+0xd1c>)
    3d18:	2101      	movs	r1, #1
    3d1a:	7019      	strb	r1, [r3, #0]
						mappings[whichMapping].amount[whichSlot] = 0.0f;
    3d1c:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    3d20:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    3d24:	2200      	movs	r2, #0
    3d26:	4443      	add	r3, r8
    3d28:	eb09 0383 	add.w	r3, r9, r3, lsl #2
    3d2c:	63da      	str	r2, [r3, #60]	; 0x3c
    3d2e:	e40f      	b.n	3550 <handleSPI+0x330>
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    3d30:	182b      	adds	r3, r5, r0
    3d32:	eddf 6a83 	vldr	s13, [pc, #524]	; 3f40 <handleSPI+0xd20>
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    3d36:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    3d3a:	4a82      	ldr	r2, [pc, #520]	; (3f44 <handleSPI+0xd24>)
    3d3c:	785b      	ldrb	r3, [r3, #1]
    3d3e:	ee07 3a90 	vmov	s15, r3
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    3d42:	4b81      	ldr	r3, [pc, #516]	; (3f48 <handleSPI+0xd28>)
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    3d44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3d48:	ee67 7aa6 	vmul.f32	s15, s15, s13
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    3d4c:	ee27 7a87 	vmul.f32	s14, s15, s14
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    3d50:	edc2 7a00 	vstr	s15, [r2]
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    3d54:	ed83 7a00 	vstr	s14, [r3]
    3d58:	f7ff bbfa 	b.w	3550 <handleSPI+0x330>
			if (boardNumber == 0)
    3d5c:	4b7b      	ldr	r3, [pc, #492]	; (3f4c <handleSPI+0xd2c>)
    3d5e:	781b      	ldrb	r3, [r3, #0]
    3d60:	2b00      	cmp	r3, #0
    3d62:	f47f aa8e 	bne.w	3282 <handleSPI+0x62>
				pluckFirmwareUpdateRequested = 1;
    3d66:	4b7a      	ldr	r3, [pc, #488]	; (3f50 <handleSPI+0xd30>)
    3d68:	2201      	movs	r2, #1
    3d6a:	601a      	str	r2, [r3, #0]
    3d6c:	f7ff bbf5 	b.w	355a <handleSPI+0x33a>
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3d70:	ed9f 6a78 	vldr	s12, [pc, #480]	; 3f54 <handleSPI+0xd34>
			 for (int i = 0; i < numStringsThisBoard; i++)
    3d74:	2603      	movs	r6, #3
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    3d76:	eddf 6a78 	vldr	s13, [pc, #480]	; 3f58 <handleSPI+0xd38>
					stringMIDIPitches[i] = myPitch;
    3d7a:	4f78      	ldr	r7, [pc, #480]	; (3f5c <handleSPI+0xd3c>)
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    3d7c:	680a      	ldr	r2, [r1, #0]
					stringMIDIPitches[i] = myPitch;
    3d7e:	eb07 0c86 	add.w	ip, r7, r6, lsl #2
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    3d82:	4432      	add	r2, r6
    3d84:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    3d88:	5cd2      	ldrb	r2, [r2, r3]
    3d8a:	0212      	lsls	r2, r2, #8
    3d8c:	ee07 2a90 	vmov	s15, r2
    3d90:	680a      	ldr	r2, [r1, #0]
    3d92:	4432      	add	r2, r6
    3d94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3d98:	3601      	adds	r6, #1
    3d9a:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    3d9e:	441a      	add	r2, r3
    3da0:	7852      	ldrb	r2, [r2, #1]
    3da2:	ee07 2a10 	vmov	s14, r2
    3da6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    3daa:	ee77 7a87 	vadd.f32	s15, s15, s14
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3dae:	ee27 7a86 	vmul.f32	s14, s15, s12
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    3db2:	eeb5 7a40 	vcmp.f32	s14, #0.0
    3db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3dba:	dd06      	ble.n	3dca <handleSPI+0xbaa>
    3dbc:	eef4 7a66 	vcmp.f32	s15, s13
    3dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3dc4:	d501      	bpl.n	3dca <handleSPI+0xbaa>
					stringMIDIPitches[i] = myPitch;
    3dc6:	ed8c 7a00 	vstr	s14, [ip]
			 for (int i = 0; i < numStringsThisBoard; i++)
    3dca:	42b0      	cmp	r0, r6
    3dcc:	dcd6      	bgt.n	3d7c <handleSPI+0xb5c>
    3dce:	f7ff bbad 	b.w	352c <handleSPI+0x30c>
    3dd2:	2401      	movs	r4, #1
    3dd4:	e6d7      	b.n	3b86 <handleSPI+0x966>
    3dd6:	4962      	ldr	r1, [pc, #392]	; (3f60 <handleSPI+0xd40>)
    3dd8:	e54b      	b.n	3872 <handleSPI+0x652>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3dda:	ee07 8a90 	vmov	s15, r8
    3dde:	4861      	ldr	r0, [pc, #388]	; (3f64 <handleSPI+0xd44>)
    3de0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3de4:	eddf 7a60 	vldr	s15, [pc, #384]	; 3f68 <handleSPI+0xd48>
    3de8:	ee20 0a27 	vmul.f32	s0, s0, s15
    3dec:	f005 fb08 	bl	9400 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3df0:	f886 800b 	strb.w	r8, [r6, #11]
    3df4:	e667      	b.n	3ac6 <handleSPI+0x8a6>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3df6:	ee07 9a90 	vmov	s15, r9
					prevKnobByte[i] = newByte;
    3dfa:	4e5c      	ldr	r6, [pc, #368]	; (3f6c <handleSPI+0xd4c>)
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3dfc:	485c      	ldr	r0, [pc, #368]	; (3f70 <handleSPI+0xd50>)
    3dfe:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3e02:	eddf 7a59 	vldr	s15, [pc, #356]	; 3f68 <handleSPI+0xd48>
    3e06:	ee20 0a27 	vmul.f32	s0, s0, s15
    3e0a:	f005 faf9 	bl	9400 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3e0e:	f886 9000 	strb.w	r9, [r6]
    3e12:	e588      	b.n	3926 <handleSPI+0x706>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3e14:	ee07 9a90 	vmov	s15, r9
    3e18:	4856      	ldr	r0, [pc, #344]	; (3f74 <handleSPI+0xd54>)
    3e1a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3e1e:	eddf 7a52 	vldr	s15, [pc, #328]	; 3f68 <handleSPI+0xd48>
    3e22:	ee20 0a27 	vmul.f32	s0, s0, s15
    3e26:	f005 faeb 	bl	9400 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3e2a:	f886 9002 	strb.w	r9, [r6, #2]
    3e2e:	e5a0      	b.n	3972 <handleSPI+0x752>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3e30:	ee07 9a90 	vmov	s15, r9
    3e34:	4850      	ldr	r0, [pc, #320]	; (3f78 <handleSPI+0xd58>)
    3e36:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3e3a:	eddf 7a4b 	vldr	s15, [pc, #300]	; 3f68 <handleSPI+0xd48>
    3e3e:	ee20 0a27 	vmul.f32	s0, s0, s15
    3e42:	f005 fadd 	bl	9400 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3e46:	f886 9001 	strb.w	r9, [r6, #1]
    3e4a:	e57f      	b.n	394c <handleSPI+0x72c>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3e4c:	ee07 9a90 	vmov	s15, r9
    3e50:	484a      	ldr	r0, [pc, #296]	; (3f7c <handleSPI+0xd5c>)
    3e52:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3e56:	eddf 7a44 	vldr	s15, [pc, #272]	; 3f68 <handleSPI+0xd48>
    3e5a:	ee20 0a27 	vmul.f32	s0, s0, s15
    3e5e:	f005 facf 	bl	9400 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3e62:	f886 900a 	strb.w	r9, [r6, #10]
    3e66:	e61c      	b.n	3aa2 <handleSPI+0x882>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3e68:	ee07 9a90 	vmov	s15, r9
    3e6c:	4844      	ldr	r0, [pc, #272]	; (3f80 <handleSPI+0xd60>)
    3e6e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3e72:	eddf 7a3d 	vldr	s15, [pc, #244]	; 3f68 <handleSPI+0xd48>
    3e76:	ee20 0a27 	vmul.f32	s0, s0, s15
    3e7a:	f005 fac1 	bl	9400 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3e7e:	f886 9009 	strb.w	r9, [r6, #9]
    3e82:	e5fb      	b.n	3a7c <handleSPI+0x85c>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3e84:	ee07 9a90 	vmov	s15, r9
    3e88:	483e      	ldr	r0, [pc, #248]	; (3f84 <handleSPI+0xd64>)
    3e8a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3e8e:	eddf 7a36 	vldr	s15, [pc, #216]	; 3f68 <handleSPI+0xd48>
    3e92:	ee20 0a27 	vmul.f32	s0, s0, s15
    3e96:	f005 fab3 	bl	9400 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3e9a:	f886 9008 	strb.w	r9, [r6, #8]
    3e9e:	e5da      	b.n	3a56 <handleSPI+0x836>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3ea0:	ee07 9a90 	vmov	s15, r9
    3ea4:	4838      	ldr	r0, [pc, #224]	; (3f88 <handleSPI+0xd68>)
    3ea6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3eaa:	eddf 7a2f 	vldr	s15, [pc, #188]	; 3f68 <handleSPI+0xd48>
    3eae:	ee20 0a27 	vmul.f32	s0, s0, s15
    3eb2:	f005 faa5 	bl	9400 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3eb6:	f886 9007 	strb.w	r9, [r6, #7]
    3eba:	e5b9      	b.n	3a30 <handleSPI+0x810>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3ebc:	ee07 9a90 	vmov	s15, r9
    3ec0:	4832      	ldr	r0, [pc, #200]	; (3f8c <handleSPI+0xd6c>)
    3ec2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3ec6:	eddf 7a28 	vldr	s15, [pc, #160]	; 3f68 <handleSPI+0xd48>
    3eca:	ee20 0a27 	vmul.f32	s0, s0, s15
    3ece:	f005 fa97 	bl	9400 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3ed2:	f886 9006 	strb.w	r9, [r6, #6]
    3ed6:	e598      	b.n	3a0a <handleSPI+0x7ea>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3ed8:	ee07 9a90 	vmov	s15, r9
    3edc:	482c      	ldr	r0, [pc, #176]	; (3f90 <handleSPI+0xd70>)
    3ede:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3ee2:	eddf 7a21 	vldr	s15, [pc, #132]	; 3f68 <handleSPI+0xd48>
    3ee6:	ee20 0a27 	vmul.f32	s0, s0, s15
    3eea:	f005 fa89 	bl	9400 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3eee:	f886 9005 	strb.w	r9, [r6, #5]
    3ef2:	e577      	b.n	39e4 <handleSPI+0x7c4>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3ef4:	ee07 9a90 	vmov	s15, r9
    3ef8:	4826      	ldr	r0, [pc, #152]	; (3f94 <handleSPI+0xd74>)
    3efa:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3efe:	eddf 7a1a 	vldr	s15, [pc, #104]	; 3f68 <handleSPI+0xd48>
    3f02:	ee20 0a27 	vmul.f32	s0, s0, s15
    3f06:	f005 fa7b 	bl	9400 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3f0a:	f886 9004 	strb.w	r9, [r6, #4]
    3f0e:	e556      	b.n	39be <handleSPI+0x79e>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3f10:	ee07 9a90 	vmov	s15, r9
    3f14:	4820      	ldr	r0, [pc, #128]	; (3f98 <handleSPI+0xd78>)
    3f16:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3f1a:	eddf 7a13 	vldr	s15, [pc, #76]	; 3f68 <handleSPI+0xd48>
    3f1e:	ee20 0a27 	vmul.f32	s0, s0, s15
    3f22:	f005 fa6d 	bl	9400 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3f26:	f886 9003 	strb.w	r9, [r6, #3]
    3f2a:	e535      	b.n	3998 <handleSPI+0x778>
    3f2c:	20005078 	.word	0x20005078
    3f30:	20018fac 	.word	0x20018fac
    3f34:	20018fbc 	.word	0x20018fbc
    3f38:	2001d104 	.word	0x2001d104
    3f3c:	2001d348 	.word	0x2001d348
    3f40:	3c23d70a 	.word	0x3c23d70a
    3f44:	200004a8 	.word	0x200004a8
    3f48:	200004ac 	.word	0x200004ac
    3f4c:	20014159 	.word	0x20014159
    3f50:	2001a0d0 	.word	0x2001a0d0
    3f54:	3b000080 	.word	0x3b000080
    3f58:	478bff74 	.word	0x478bff74
    3f5c:	20013f48 	.word	0x20013f48
    3f60:	20014170 	.word	0x20014170
    3f64:	20004fb0 	.word	0x20004fb0
    3f68:	3b808081 	.word	0x3b808081
    3f6c:	2001a0f4 	.word	0x2001a0f4
    3f70:	20004f84 	.word	0x20004f84
    3f74:	20004f8c 	.word	0x20004f8c
    3f78:	20004f88 	.word	0x20004f88
    3f7c:	20004fac 	.word	0x20004fac
    3f80:	20004fa8 	.word	0x20004fa8
    3f84:	20004fa4 	.word	0x20004fa4
    3f88:	20004fa0 	.word	0x20004fa0
    3f8c:	20004f9c 	.word	0x20004f9c
    3f90:	20004f98 	.word	0x20004f98
    3f94:	20004f94 	.word	0x20004f94
    3f98:	20004f90 	.word	0x20004f90
    3f9c:	2001d5bc 	.word	0x2001d5bc
    3fa0:	20018364 	.word	0x20018364
    3fa4:	20000724 	.word	0x20000724
				else if (mappingChangeType == Amount)
    3fa8:	f1ba 0f01 	cmp.w	sl, #1
    3fac:	f000 824f 	beq.w	444e <_Min_Heap_Size+0x44e>
				else if (mappingChangeType == ScalarID)
    3fb0:	f1ba 0f02 	cmp.w	sl, #2
    3fb4:	f47f aacc 	bne.w	3550 <handleSPI+0x330>
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    3fb8:	48c0      	ldr	r0, [pc, #768]	; (42bc <_Min_Heap_Size+0x2bc>)
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    3fba:	234c      	movs	r3, #76	; 0x4c
						if (scalar == 0xff)
    3fbc:	2fff      	cmp	r7, #255	; 0xff
    3fbe:	ea4f 0a47 	mov.w	sl, r7, lsl #1
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    3fc2:	f1a7 0e18 	sub.w	lr, r7, #24
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    3fc6:	f1a7 0c14 	sub.w	ip, r7, #20
    3fca:	7801      	ldrb	r1, [r0, #0]
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    3fcc:	fb02 f303 	mul.w	r3, r2, r3
    3fd0:	f108 0604 	add.w	r6, r8, #4
						if (scalar == 0xff)
    3fd4:	f000 824e 	beq.w	4474 <_Min_Heap_Size+0x474>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    3fd8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    3fdc:	4eb8      	ldr	r6, [pc, #736]	; (42c0 <_Min_Heap_Size+0x2c0>)
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    3fde:	f1be 0f03 	cmp.w	lr, #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    3fe2:	444b      	add	r3, r9
    3fe4:	eb06 0bc7 	add.w	fp, r6, r7, lsl #3
    3fe8:	f8c3 b004 	str.w	fp, [r3, #4]
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    3fec:	f200 8257 	bhi.w	449e <_Min_Heap_Size+0x49e>
								lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    3ff0:	4bb4      	ldr	r3, [pc, #720]	; (42c4 <_Min_Heap_Size+0x2c4>)
    3ff2:	f04f 0b01 	mov.w	fp, #1
    3ff6:	443b      	add	r3, r7
    3ff8:	f803 bc18 	strb.w	fp, [r3, #-24]
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    3ffc:	234c      	movs	r3, #76	; 0x4c
								noiseOn = 1;
    3ffe:	2f03      	cmp	r7, #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    4000:	f10a 0a01 	add.w	sl, sl, #1
    4004:	fb02 f303 	mul.w	r3, r2, r3
								noiseOn = 1;
    4008:	bf08      	it	eq
    400a:	2101      	moveq	r1, #1
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    400c:	eb06 068a 	add.w	r6, r6, sl, lsl #2
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    4010:	f1be 0f03 	cmp.w	lr, #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    4014:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
    4018:	444b      	add	r3, r9
    401a:	629e      	str	r6, [r3, #40]	; 0x28
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    401c:	f200 8236 	bhi.w	448c <_Min_Heap_Size+0x48c>
								lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    4020:	4ba8      	ldr	r3, [pc, #672]	; (42c4 <_Min_Heap_Size+0x2c4>)
    4022:	2201      	movs	r2, #1
    4024:	443b      	add	r3, r7
    4026:	f803 2c18 	strb.w	r2, [r3, #-24]
								noiseOn = 1;
    402a:	2f03      	cmp	r7, #3
    402c:	bf08      	it	eq
    402e:	2101      	moveq	r1, #1
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    4030:	7001      	strb	r1, [r0, #0]
    4032:	f7ff ba8d 	b.w	3550 <handleSPI+0x330>
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    4036:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
					param *FXAlias = &params[whichParam + 1];
    403a:	f106 0901 	add.w	r9, r6, #1
					uint8_t whichEffect = (whichParam - Effect1FXType) / EffectParamsNum;
    403e:	ea4f 08e8 	mov.w	r8, r8, asr #3
					param *FXAlias = &params[whichParam + 1];
    4042:	ebc9 0ac9 	rsb	sl, r9, r9, lsl #3
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    4046:	ee67 7a87 	vmul.f32	s15, s15, s14
					param *FXAlias = &params[whichParam + 1];
    404a:	ea4f 0bc9 	mov.w	fp, r9, lsl #3
    404e:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    4052:	fef8 7a67 	vrinta.f32	s15, s15
    4056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    405a:	edcd 7a02 	vstr	s15, [sp, #8]
    405e:	f89d 0008 	ldrb.w	r0, [sp, #8]
					if (effectType > FXLowpass)
    4062:	280d      	cmp	r0, #13
    4064:	d902      	bls.n	406c <_Min_Heap_Size+0x6c>
						FXAlias[2].scaleFunc = &scaleFilterResonance;
    4066:	4a98      	ldr	r2, [pc, #608]	; (42c8 <_Min_Heap_Size+0x2c8>)
    4068:	f8ca 2048 	str.w	r2, [sl, #72]	; 0x48
					setEffectsFunctions(effectType, whichEffect);
    406c:	4641      	mov	r1, r8
					FXAlias[0].setParam = effectSetters[whichEffect].setParam1;
    406e:	eb08 0888 	add.w	r8, r8, r8, lsl #2
					setEffectsFunctions(effectType, whichEffect);
    4072:	f005 f985 	bl	9380 <__setEffectsFunctions_veneer>
					FXAlias[0].setParam = effectSetters[whichEffect].setParam1;
    4076:	4a95      	ldr	r2, [pc, #596]	; (42cc <_Min_Heap_Size+0x2cc>)
    4078:	ebab 0309 	sub.w	r3, fp, r9
    407c:	eb02 0188 	add.w	r1, r2, r8, lsl #2
    4080:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
    4084:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    4088:	615a      	str	r2, [r3, #20]
					FXAlias[1].setParam = effectSetters[whichEffect].setParam2;
    408a:	684b      	ldr	r3, [r1, #4]
    408c:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
					FXAlias[2].setParam = effectSetters[whichEffect].setParam3;
    4090:	688b      	ldr	r3, [r1, #8]
    4092:	f8ca 304c 	str.w	r3, [sl, #76]	; 0x4c
					FXAlias[3].setParam = effectSetters[whichEffect].setParam4;
    4096:	68cb      	ldr	r3, [r1, #12]
    4098:	f8ca 3068 	str.w	r3, [sl, #104]	; 0x68
					FXAlias[4].setParam = effectSetters[whichEffect].setParam5;
    409c:	690b      	ldr	r3, [r1, #16]
    409e:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84
    40a2:	e566      	b.n	3b72 <handleSPI+0x952>
				if ((whichParam == Osc1) || (whichParam == Osc2) ||(whichParam == Osc3))
    40a4:	4b8a      	ldr	r3, [pc, #552]	; (42d0 <_Min_Heap_Size+0x2d0>)
    40a6:	410b      	asrs	r3, r1
    40a8:	f013 0301 	ands.w	r3, r3, #1
    40ac:	d123      	bne.n	40f6 <_Min_Heap_Size+0xf6>
					if (params[whichParam].realVal[0]  > 0.5f)
    40ae:	9901      	ldr	r1, [sp, #4]
    40b0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    40b4:	1b89      	subs	r1, r1, r6
    40b6:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    40ba:	ed91 7a02 	vldr	s14, [r1, #8]
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    40be:	4985      	ldr	r1, [pc, #532]	; (42d4 <_Min_Heap_Size+0x2d4>)
					if (params[whichParam].realVal[0]  > 0.5f)
    40c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    40c4:	fb81 0102 	smull	r0, r1, r1, r2
    40c8:	17d2      	asrs	r2, r2, #31
					if (params[whichParam].realVal[0]  > 0.5f)
    40ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    40ce:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
					if (params[whichParam].realVal[0]  > 0.5f)
    40d2:	dd02      	ble.n	40da <_Min_Heap_Size+0xda>
						oscOn[whichOsc] = 1;
    40d4:	2301      	movs	r3, #1
    40d6:	4980      	ldr	r1, [pc, #512]	; (42d8 <_Min_Heap_Size+0x2d8>)
    40d8:	548b      	strb	r3, [r1, r2]
    40da:	4980      	ldr	r1, [pc, #512]	; (42dc <_Min_Heap_Size+0x2dc>)
    40dc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
						enabledCount += oscsEnabled[j];
    40e0:	e9d1 3200 	ldrd	r3, r2, [r1]
    40e4:	4413      	add	r3, r2
					oscAmpMult = oscAmpMultArray[enabledCount];
    40e6:	688a      	ldr	r2, [r1, #8]
    40e8:	4413      	add	r3, r2
    40ea:	4a7d      	ldr	r2, [pc, #500]	; (42e0 <_Min_Heap_Size+0x2e0>)
    40ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    40f0:	681a      	ldr	r2, [r3, #0]
    40f2:	4b7c      	ldr	r3, [pc, #496]	; (42e4 <_Min_Heap_Size+0x2e4>)
    40f4:	601a      	str	r2, [r3, #0]
				if ((whichParam == LFO1ShapeSet) || (whichParam == LFO2ShapeSet) || (whichParam == LFO3ShapeSet) || (whichParam == LFO4ShapeSet))
    40f6:	2e87      	cmp	r6, #135	; 0x87
    40f8:	d005      	beq.n	4106 <_Min_Heap_Size+0x106>
    40fa:	2e8c      	cmp	r6, #140	; 0x8c
    40fc:	d003      	beq.n	4106 <_Min_Heap_Size+0x106>
    40fe:	2e91      	cmp	r6, #145	; 0x91
    4100:	d001      	beq.n	4106 <_Min_Heap_Size+0x106>
    4102:	2e96      	cmp	r6, #150	; 0x96
    4104:	d16b      	bne.n	41de <_Min_Heap_Size+0x1de>
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    4106:	9b01      	ldr	r3, [sp, #4]
    4108:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    410c:	4a76      	ldr	r2, [pc, #472]	; (42e8 <_Min_Heap_Size+0x2e8>)
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    410e:	f04f 0a00 	mov.w	sl, #0
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    4112:	1b9b      	subs	r3, r3, r6
    4114:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    4118:	edd3 7a02 	vldr	s15, [r3, #8]
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    411c:	f1a6 0387 	sub.w	r3, r6, #135	; 0x87
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    4120:	ee67 7a87 	vmul.f32	s15, s15, s14
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    4124:	fb82 1203 	smull	r1, r2, r2, r3
    4128:	17db      	asrs	r3, r3, #31
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    412a:	fef8 7a67 	vrinta.f32	s15, s15
					setLFOShapes(LFOShape, whichLFO);
    412e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    4132:	ebc3 0862 	rsb	r8, r3, r2, asr #1
					setLFOShapes(LFOShape, whichLFO);
    4136:	ee17 0a90 	vmov	r0, s15
    413a:	4641      	mov	r1, r8
    413c:	f005 fb10 	bl	9760 <__setLFOShapes_veneer>
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    4140:	496a      	ldr	r1, [pc, #424]	; (42ec <_Min_Heap_Size+0x2ec>)
					int rateParamNum = LFO1Rate + (whichLFO * LFOParamsNum);
    4142:	eb08 0388 	add.w	r3, r8, r8, lsl #2
    4146:	9503      	str	r5, [sp, #12]
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    4148:	eb08 0848 	add.w	r8, r8, r8, lsl #1
					int rateParamNum = LFO1Rate + (whichLFO * LFOParamsNum);
    414c:	f103 0984 	add.w	r9, r3, #132	; 0x84
					int shapeParamNum = LFO1Shape + (whichLFO * LFOParamsNum);
    4150:	f103 0285 	add.w	r2, r3, #133	; 0x85
					int phaseParamNum = LFO1Phase + (whichLFO * LFOParamsNum);
    4154:	3386      	adds	r3, #134	; 0x86
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    4156:	eb01 0088 	add.w	r0, r1, r8, lsl #2
    415a:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
    415e:	f851 1028 	ldr.w	r1, [r1, r8, lsl #2]
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    4162:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    4166:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    416a:	eb07 0b82 	add.w	fp, r7, r2, lsl #2
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    416e:	eb07 0283 	add.w	r2, r7, r3, lsl #2
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    4172:	ea4f 0389 	mov.w	r3, r9, lsl #2
    4176:	eb07 0989 	add.w	r9, r7, r9, lsl #2
    417a:	f103 0840 	add.w	r8, r3, #64	; 0x40
    417e:	f8c9 1014 	str.w	r1, [r9, #20]
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    4182:	6841      	ldr	r1, [r0, #4]
    4184:	44b8      	add	r8, r7
    4186:	f8cb 1014 	str.w	r1, [fp, #20]
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    418a:	6881      	ldr	r1, [r0, #8]
    418c:	4610      	mov	r0, r2
    418e:	6151      	str	r1, [r2, #20]
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    4190:	f103 0108 	add.w	r1, r3, #8
    4194:	187a      	adds	r2, r7, r1
    4196:	f103 0124 	add.w	r1, r3, #36	; 0x24
    419a:	187b      	adds	r3, r7, r1
    419c:	4615      	mov	r5, r2
    419e:	e9cd 6401 	strd	r6, r4, [sp, #4]
    41a2:	461c      	mov	r4, r3
    41a4:	4606      	mov	r6, r0
						params[rateParamNum].setParam(params[rateParamNum].realVal[v], params[rateParamNum].objectNumber, v);
    41a6:	ecb5 0a01 	vldmia	r5!, {s0}
    41aa:	4651      	mov	r1, sl
    41ac:	f899 0018 	ldrb.w	r0, [r9, #24]
    41b0:	f8d9 3014 	ldr.w	r3, [r9, #20]
    41b4:	4798      	blx	r3
						params[shapeParamNum].setParam(params[shapeParamNum].realVal[v], params[shapeParamNum].objectNumber, v);
    41b6:	ecb4 0a01 	vldmia	r4!, {s0}
    41ba:	4651      	mov	r1, sl
    41bc:	f89b 0018 	ldrb.w	r0, [fp, #24]
    41c0:	f8db 3014 	ldr.w	r3, [fp, #20]
    41c4:	4798      	blx	r3
						params[phaseParamNum].setParam(params[phaseParamNum].realVal[v], params[phaseParamNum].objectNumber, v);
    41c6:	ecb8 0a01 	vldmia	r8!, {s0}
    41ca:	4651      	mov	r1, sl
    41cc:	6973      	ldr	r3, [r6, #20]
    41ce:	7e30      	ldrb	r0, [r6, #24]
    41d0:	4798      	blx	r3
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    41d2:	f1ba 0f00 	cmp.w	sl, #0
    41d6:	d016      	beq.n	4206 <_Min_Heap_Size+0x206>
    41d8:	9d03      	ldr	r5, [sp, #12]
    41da:	e9dd 6401 	ldrd	r6, r4, [sp, #4]
				if ((whichParam == MIDIKeyMax) || (whichParam == MIDIKeyMin))
    41de:	2e01      	cmp	r6, #1
    41e0:	d914      	bls.n	420c <_Min_Heap_Size+0x20c>
				if (whichParam == FXOrder)
    41e2:	2e9a      	cmp	r6, #154	; 0x9a
    41e4:	d128      	bne.n	4238 <_Min_Heap_Size+0x238>
					fxPre = params[FXOrder].realVal[0] > 0.5f;
    41e6:	4a42      	ldr	r2, [pc, #264]	; (42f0 <_Min_Heap_Size+0x2f0>)
    41e8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    41ec:	4b41      	ldr	r3, [pc, #260]	; (42f4 <_Min_Heap_Size+0x2f4>)
    41ee:	ed92 7a38 	vldr	s14, [r2, #224]	; 0xe0
					pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    41f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
    41f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    41fa:	bfcc      	ite	gt
    41fc:	2201      	movgt	r2, #1
    41fe:	2200      	movle	r2, #0
    4200:	701a      	strb	r2, [r3, #0]
    4202:	f7ff b9a5 	b.w	3550 <handleSPI+0x330>
    4206:	f04f 0a01 	mov.w	sl, #1
    420a:	e7cc      	b.n	41a6 <_Min_Heap_Size+0x1a6>
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    420c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
    4210:	ed97 7a02 	vldr	s14, [r7, #8]
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    4214:	eddf 6a38 	vldr	s13, [pc, #224]	; 42f8 <_Min_Heap_Size+0x2f8>
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    4218:	ee37 7a67 	vsub.f32	s14, s14, s15
    421c:	ed9f 6a37 	vldr	s12, [pc, #220]	; 42fc <_Min_Heap_Size+0x2fc>
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    4220:	ee67 7aa6 	vmul.f32	s15, s15, s13
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    4224:	4b36      	ldr	r3, [pc, #216]	; (4300 <_Min_Heap_Size+0x300>)
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    4226:	4a37      	ldr	r2, [pc, #220]	; (4304 <_Min_Heap_Size+0x304>)
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    4228:	eec6 6a07 	vdiv.f32	s13, s12, s14
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    422c:	edc2 7a00 	vstr	s15, [r2]
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    4230:	edc3 6a00 	vstr	s13, [r3]
				if (whichParam == PedalControlsMaster)
    4234:	f7ff b98c 	b.w	3550 <handleSPI+0x330>
    4238:	2e9b      	cmp	r6, #155	; 0x9b
    423a:	f47f a989 	bne.w	3550 <handleSPI+0x330>
					pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    423e:	4a2c      	ldr	r2, [pc, #176]	; (42f0 <_Min_Heap_Size+0x2f0>)
    4240:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    4244:	4b30      	ldr	r3, [pc, #192]	; (4308 <_Min_Heap_Size+0x308>)
    4246:	ed92 7a3f 	vldr	s14, [r2, #252]	; 0xfc
    424a:	e7d2      	b.n	41f2 <_Min_Heap_Size+0x1f2>
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    424c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    4250:	edda 7a02 	vldr	s15, [sl, #8]
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    4254:	4a1f      	ldr	r2, [pc, #124]	; (42d4 <_Min_Heap_Size+0x2d4>)
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    4256:	ee67 7a87 	vmul.f32	s15, s15, s14
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    425a:	fb82 1203 	smull	r1, r2, r2, r3
    425e:	17db      	asrs	r3, r3, #31
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    4260:	fef8 7a67 	vrinta.f32	s15, s15
    4264:	eefd 7ae7 	vcvt.s32.f32	s15, s15
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    4268:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    426c:	ee17 2a90 	vmov	r2, s15
	switch (oscshape)
    4270:	2a05      	cmp	r2, #5
    4272:	f63f aca3 	bhi.w	3bbc <handleSPI+0x99c>
    4276:	e8df f002 	tbb	[pc, r2]
    427a:	171c      	.short	0x171c
    427c:	03080d12 	.word	0x03080d12
			  shapeTick[i] = &triTick;
    4280:	4a22      	ldr	r2, [pc, #136]	; (430c <_Min_Heap_Size+0x30c>)
    4282:	4923      	ldr	r1, [pc, #140]	; (4310 <_Min_Heap_Size+0x310>)
    4284:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    4288:	e498      	b.n	3bbc <handleSPI+0x99c>
			  shapeTick[i] = &sineTick;
    428a:	4a20      	ldr	r2, [pc, #128]	; (430c <_Min_Heap_Size+0x30c>)
    428c:	4921      	ldr	r1, [pc, #132]	; (4314 <_Min_Heap_Size+0x314>)
    428e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    4292:	e493      	b.n	3bbc <handleSPI+0x99c>
			  shapeTick[i] = &pulseTick;
    4294:	4a1d      	ldr	r2, [pc, #116]	; (430c <_Min_Heap_Size+0x30c>)
    4296:	4920      	ldr	r1, [pc, #128]	; (4318 <_Min_Heap_Size+0x318>)
    4298:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    429c:	e48e      	b.n	3bbc <handleSPI+0x99c>
			  shapeTick[i] = &sawTick;
    429e:	4a1b      	ldr	r2, [pc, #108]	; (430c <_Min_Heap_Size+0x30c>)
    42a0:	491e      	ldr	r1, [pc, #120]	; (431c <_Min_Heap_Size+0x31c>)
    42a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    42a6:	e489      	b.n	3bbc <handleSPI+0x99c>
			  shapeTick[i] = &sineTriTick;
    42a8:	4a18      	ldr	r2, [pc, #96]	; (430c <_Min_Heap_Size+0x30c>)
    42aa:	491d      	ldr	r1, [pc, #116]	; (4320 <_Min_Heap_Size+0x320>)
    42ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    42b0:	e484      	b.n	3bbc <handleSPI+0x99c>
			  shapeTick[i] = &sawSquareTick;
    42b2:	4a16      	ldr	r2, [pc, #88]	; (430c <_Min_Heap_Size+0x30c>)
    42b4:	491b      	ldr	r1, [pc, #108]	; (4324 <_Min_Heap_Size+0x324>)
    42b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    42ba:	e47f      	b.n	3bbc <handleSPI+0x99c>
    42bc:	2001d348 	.word	0x2001d348
    42c0:	2001d5bc 	.word	0x2001d5bc
    42c4:	2001d104 	.word	0x2001d104
    42c8:	00001ae1 	.word	0x00001ae1
    42cc:	200141b0 	.word	0x200141b0
    42d0:	fbffdffe 	.word	0xfbffdffe
    42d4:	4ec4ec4f 	.word	0x4ec4ec4f
    42d8:	2001d39c 	.word	0x2001d39c
    42dc:	20018fb0 	.word	0x20018fb0
    42e0:	2000089c 	.word	0x2000089c
    42e4:	20000898 	.word	0x20000898
    42e8:	66666667 	.word	0x66666667
    42ec:	20018330 	.word	0x20018330
    42f0:	20019fbc 	.word	0x20019fbc
    42f4:	2001632d 	.word	0x2001632d
    42f8:	42fe0000 	.word	0x42fe0000
    42fc:	3c010204 	.word	0x3c010204
    4300:	20018fa0 	.word	0x20018fa0
    4304:	20018fa4 	.word	0x20018fa4
    4308:	2001a0cc 	.word	0x2001a0cc
    430c:	2001d540 	.word	0x2001d540
    4310:	00006001 	.word	0x00006001
    4314:	00005fc1 	.word	0x00005fc1
    4318:	00005f61 	.word	0x00005f61
    431c:	00005f21 	.word	0x00005f21
    4320:	00005ec1 	.word	0x00005ec1
    4324:	00005e61 	.word	0x00005e61
				if ((whichParam == Filter1Type) || (whichParam == Filter2Type))
    4328:	2e60      	cmp	r6, #96	; 0x60
    432a:	d002      	beq.n	4332 <_Min_Heap_Size+0x332>
    432c:	2e66      	cmp	r6, #102	; 0x66
    432e:	f47f aee2 	bne.w	40f6 <_Min_Heap_Size+0xf6>
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    4332:	9b01      	ldr	r3, [sp, #4]
    4334:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
					int whichFilter = (whichParam - Filter1Type) / FilterParamsNum;
    4338:	4968      	ldr	r1, [pc, #416]	; (44dc <_Min_Heap_Size+0x4dc>)
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    433a:	f04f 0900 	mov.w	r9, #0
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    433e:	1b9b      	subs	r3, r3, r6
    4340:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    4344:	edd3 7a02 	vldr	s15, [r3, #8]
					int whichFilter = (whichParam - Filter1Type) / FilterParamsNum;
    4348:	f1a6 0360 	sub.w	r3, r6, #96	; 0x60
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    434c:	ee67 7a87 	vmul.f32	s15, s15, s14
					int whichFilter = (whichParam - Filter1Type) / FilterParamsNum;
    4350:	fb81 2103 	smull	r2, r1, r1, r3
    4354:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    4358:	fef8 7a67 	vrinta.f32	s15, s15
					setFilterTypes(filterType, whichFilter);
    435c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    4360:	ee17 0a90 	vmov	r0, s15
    4364:	f005 fa04 	bl	9770 <__setFilterTypes_veneer>
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    4368:	485d      	ldr	r0, [pc, #372]	; (44e0 <_Min_Heap_Size+0x4e0>)
					int filterResParamNum = Filter1Resonance + (whichFilter * FilterParamsNum);
    436a:	eb01 0341 	add.w	r3, r1, r1, lsl #1
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    436e:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    4372:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
					int filterResParamNum = Filter1Resonance + (whichFilter * FilterParamsNum);
    4376:	005b      	lsls	r3, r3, #1
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    4378:	f8dc 0004 	ldr.w	r0, [ip, #4]
					int filterResParamNum = Filter1Resonance + (whichFilter * FilterParamsNum);
    437c:	f103 0863 	add.w	r8, r3, #99	; 0x63
					int filterGainParamNum = Filter1Gain + (whichFilter * FilterParamsNum);
    4380:	3362      	adds	r3, #98	; 0x62
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    4382:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    4386:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    438a:	ea4f 0a88 	mov.w	sl, r8, lsl #2
    438e:	eb07 0888 	add.w	r8, r7, r8, lsl #2
    4392:	f10a 0b08 	add.w	fp, sl, #8
    4396:	f1aa 0a14 	sub.w	sl, sl, #20
    439a:	f8c8 1014 	str.w	r1, [r8, #20]
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    439e:	eb07 0183 	add.w	r1, r7, r3, lsl #2
    43a2:	44bb      	add	fp, r7
    43a4:	009b      	lsls	r3, r3, #2
    43a6:	44ba      	add	sl, r7
    43a8:	6148      	str	r0, [r1, #20]
    43aa:	9302      	str	r3, [sp, #8]
						params[filterResParamNum].setParam(params[filterResParamNum].realVal[v], params[filterResParamNum].objectNumber, v);
    43ac:	ecbb 0a01 	vldmia	fp!, {s0}
    43b0:	4649      	mov	r1, r9
    43b2:	f898 0018 	ldrb.w	r0, [r8, #24]
    43b6:	f8d8 3014 	ldr.w	r3, [r8, #20]
    43ba:	4798      	blx	r3
						params[filterGainParamNum].setParam(params[filterGainParamNum].realVal[v], params[filterGainParamNum].objectNumber, v);
    43bc:	9b02      	ldr	r3, [sp, #8]
    43be:	ecba 0a01 	vldmia	sl!, {s0}
    43c2:	4649      	mov	r1, r9
    43c4:	18fb      	adds	r3, r7, r3
    43c6:	695a      	ldr	r2, [r3, #20]
    43c8:	7e18      	ldrb	r0, [r3, #24]
    43ca:	4790      	blx	r2
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    43cc:	f1b9 0f00 	cmp.w	r9, #0
    43d0:	f47f ae91 	bne.w	40f6 <_Min_Heap_Size+0xf6>
    43d4:	f04f 0901 	mov.w	r9, #1
    43d8:	e7e8      	b.n	43ac <_Min_Heap_Size+0x3ac>
						if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    43da:	f1a7 0314 	sub.w	r3, r7, #20
    43de:	f886 a020 	strb.w	sl, [r6, #32]
    43e2:	2b03      	cmp	r3, #3
    43e4:	d82d      	bhi.n	4442 <_Min_Heap_Size+0x442>
							envOn[source - ENV_SOURCE_OFFSET] = 1;
    43e6:	4b3f      	ldr	r3, [pc, #252]	; (44e4 <_Min_Heap_Size+0x4e4>)
    43e8:	2101      	movs	r1, #1
    43ea:	443b      	add	r3, r7
    43ec:	f803 1c14 	strb.w	r1, [r3, #-20]
						if ((source >= OSC_SOURCE_OFFSET) && (source < (OSC_SOURCE_OFFSET+NUM_OSC)))
    43f0:	e48f      	b.n	3d12 <handleSPI+0xaf2>
						audioOutBuffer[i] = 0;
    43f2:	2200      	movs	r2, #0
    43f4:	f503 6180 	add.w	r1, r3, #1024	; 0x400
						audioOutBuffer[i + 1] = 0;
    43f8:	e9c3 2200 	strd	r2, r2, [r3]
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    43fc:	3308      	adds	r3, #8
    43fe:	4299      	cmp	r1, r3
    4400:	d1fa      	bne.n	43f8 <_Min_Heap_Size+0x3f8>
    4402:	f7ff ba2d 	b.w	3860 <handleSPI+0x640>
						mappings[whichMapping].hookActive[whichSlot] = 0;
    4406:	f886 a048 	strb.w	sl, [r6, #72]	; 0x48
							for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    440a:	4656      	mov	r6, sl
							mappings[whichMapping].destNumber = 255;
    440c:	f809 7003 	strb.w	r7, [r9, r3]
								float finalVal = mappings[whichMapping].dest->zeroToOneVal[v];
    4410:	f8db 3004 	ldr.w	r3, [fp, #4]
    4414:	eb03 0786 	add.w	r7, r3, r6, lsl #2
								mappings[whichMapping].dest->realVal[v] = mappings[whichMapping].dest->scaleFunc(finalVal);
    4418:	691b      	ldr	r3, [r3, #16]
    441a:	ed97 0a00 	vldr	s0, [r7]
    441e:	4798      	blx	r3
    4420:	ed87 0a02 	vstr	s0, [r7, #8]
								mappings[whichMapping].dest->setParam(mappings[whichMapping].dest->realVal[v], mappings[whichMapping].dest->objectNumber, v);
    4424:	f8db 3004 	ldr.w	r3, [fp, #4]
    4428:	4631      	mov	r1, r6
    442a:	eb03 0786 	add.w	r7, r3, r6, lsl #2
    442e:	695a      	ldr	r2, [r3, #20]
    4430:	7e18      	ldrb	r0, [r3, #24]
    4432:	ed97 0a02 	vldr	s0, [r7, #8]
    4436:	4790      	blx	r2
							for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    4438:	2e00      	cmp	r6, #0
    443a:	f47f a889 	bne.w	3550 <handleSPI+0x330>
    443e:	2601      	movs	r6, #1
    4440:	e7e6      	b.n	4410 <_Min_Heap_Size+0x410>
						if ((source >= OSC_SOURCE_OFFSET) && (source < (OSC_SOURCE_OFFSET+NUM_OSC)))
    4442:	2f02      	cmp	r7, #2
    4444:	f63f ac65 	bhi.w	3d12 <handleSPI+0xaf2>
							oscOn[source - OSC_SOURCE_OFFSET] = 1;
    4448:	4b27      	ldr	r3, [pc, #156]	; (44e8 <_Min_Heap_Size+0x4e8>)
    444a:	55d8      	strb	r0, [r3, r7]
    444c:	e461      	b.n	3d12 <handleSPI+0xaf2>
					mappings[whichMapping].amount[whichSlot] = (float)mappingChangeValue * INV_TWO_TO_15;
    444e:	ee07 7a90 	vmov	s15, r7
    4452:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    4456:	ed9f 7a25 	vldr	s14, [pc, #148]	; 44ec <_Min_Heap_Size+0x4ec>
    445a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    445e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    4462:	4443      	add	r3, r8
    4464:	ee67 7a87 	vmul.f32	s15, s15, s14
    4468:	eb09 0383 	add.w	r3, r9, r3, lsl #2
    446c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    4470:	f7ff b86e 	b.w	3550 <handleSPI+0x330>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    4474:	eb03 02c8 	add.w	r2, r3, r8, lsl #3
    4478:	7001      	strb	r1, [r0, #0]
    447a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    447e:	4e1c      	ldr	r6, [pc, #112]	; (44f0 <_Min_Heap_Size+0x4f0>)
    4480:	444a      	add	r2, r9
    4482:	444b      	add	r3, r9
    4484:	6296      	str	r6, [r2, #40]	; 0x28
    4486:	605e      	str	r6, [r3, #4]
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    4488:	f7ff b862 	b.w	3550 <handleSPI+0x330>
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    448c:	f1bc 0f03 	cmp.w	ip, #3
    4490:	d811      	bhi.n	44b6 <_Min_Heap_Size+0x4b6>
								envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    4492:	4b14      	ldr	r3, [pc, #80]	; (44e4 <_Min_Heap_Size+0x4e4>)
    4494:	2201      	movs	r2, #1
    4496:	443b      	add	r3, r7
    4498:	f803 2c14 	strb.w	r2, [r3, #-20]
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    449c:	e5c5      	b.n	402a <_Min_Heap_Size+0x2a>
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    449e:	f1bc 0f03 	cmp.w	ip, #3
    44a2:	d90f      	bls.n	44c4 <_Min_Heap_Size+0x4c4>
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    44a4:	2f02      	cmp	r7, #2
    44a6:	f63f ada9 	bhi.w	3ffc <handleSPI+0xddc>
								oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    44aa:	4b0f      	ldr	r3, [pc, #60]	; (44e8 <_Min_Heap_Size+0x4e8>)
    44ac:	f04f 0b01 	mov.w	fp, #1
    44b0:	f803 b007 	strb.w	fp, [r3, r7]
    44b4:	e5a2      	b.n	3ffc <handleSPI+0xddc>
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    44b6:	2f02      	cmp	r7, #2
    44b8:	f63f adb7 	bhi.w	402a <_Min_Heap_Size+0x2a>
								oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    44bc:	4b0a      	ldr	r3, [pc, #40]	; (44e8 <_Min_Heap_Size+0x4e8>)
    44be:	2201      	movs	r2, #1
    44c0:	55da      	strb	r2, [r3, r7]
    44c2:	e5b2      	b.n	402a <_Min_Heap_Size+0x2a>
								envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    44c4:	4b07      	ldr	r3, [pc, #28]	; (44e4 <_Min_Heap_Size+0x4e4>)
    44c6:	f04f 0b01 	mov.w	fp, #1
    44ca:	443b      	add	r3, r7
    44cc:	f803 bc14 	strb.w	fp, [r3, #-20]
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    44d0:	e594      	b.n	3ffc <handleSPI+0xddc>
						if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    44d2:	f1a7 0314 	sub.w	r3, r7, #20
    44d6:	2b03      	cmp	r3, #3
    44d8:	d985      	bls.n	43e6 <_Min_Heap_Size+0x3e6>
    44da:	e41a      	b.n	3d12 <handleSPI+0xaf2>
    44dc:	2aaaaaab 	.word	0x2aaaaaab
    44e0:	20016204 	.word	0x20016204
    44e4:	2001cf80 	.word	0x2001cf80
    44e8:	2001d39c 	.word	0x2001d39c
    44ec:	37fffffc 	.word	0x37fffffc
    44f0:	20000724 	.word	0x20000724
    44f4:	f3af 8000 	nop.w
    44f8:	f3af 8000 	nop.w
    44fc:	f3af 8000 	nop.w

00004500 <HAL_I2C_SlaveRxCpltCallback>:
	presetWaitingToParse = 4096;
    4500:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    4504:	4b02      	ldr	r3, [pc, #8]	; (4510 <HAL_I2C_SlaveRxCpltCallback+0x10>)
	HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 4096);
    4506:	4903      	ldr	r1, [pc, #12]	; (4514 <HAL_I2C_SlaveRxCpltCallback+0x14>)
    4508:	4803      	ldr	r0, [pc, #12]	; (4518 <HAL_I2C_SlaveRxCpltCallback+0x18>)
	presetWaitingToParse = 4096;
    450a:	601a      	str	r2, [r3, #0]
	HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 4096);
    450c:	f004 bf7c 	b.w	9408 <__HAL_I2C_Slave_Receive_IT_veneer>
    4510:	2001a0ec 	.word	0x2001a0ec
    4514:	30042380 	.word	0x30042380
    4518:	200140b0 	.word	0x200140b0
    451c:	f3af 8000 	nop.w

00004520 <HAL_I2C_MasterTxCpltCallback>:
	i2cSending = 0;
    4520:	4b01      	ldr	r3, [pc, #4]	; (4528 <HAL_I2C_MasterTxCpltCallback+0x8>)
    4522:	2200      	movs	r2, #0
    4524:	701a      	strb	r2, [r3, #0]
}
    4526:	4770      	bx	lr
    4528:	2001632e 	.word	0x2001632e
    452c:	f3af 8000 	nop.w
    4530:	f3af 8000 	nop.w
    4534:	f3af 8000 	nop.w
    4538:	f3af 8000 	nop.w
    453c:	f3af 8000 	nop.w

00004540 <HAL_I2C_ErrorCallback>:
	i2cSending = 0;
    4540:	2100      	movs	r1, #0
	I2CErrors++;
    4542:	4a05      	ldr	r2, [pc, #20]	; (4558 <HAL_I2C_ErrorCallback+0x18>)
	i2cSending = 0;
    4544:	4b05      	ldr	r3, [pc, #20]	; (455c <HAL_I2C_ErrorCallback+0x1c>)
	receivingI2C = 0;
    4546:	4806      	ldr	r0, [pc, #24]	; (4560 <HAL_I2C_ErrorCallback+0x20>)
	i2cSending = 0;
    4548:	7019      	strb	r1, [r3, #0]
	I2CErrors++;
    454a:	7813      	ldrb	r3, [r2, #0]
	receivingI2C = 0;
    454c:	7001      	strb	r1, [r0, #0]
	I2CErrors++;
    454e:	3301      	adds	r3, #1
    4550:	b2db      	uxtb	r3, r3
    4552:	7013      	strb	r3, [r2, #0]
}
    4554:	4770      	bx	lr
    4556:	bf00      	nop
    4558:	20014158 	.word	0x20014158
    455c:	2001632e 	.word	0x2001632e
    4560:	2001a500 	.word	0x2001a500
    4564:	f3af 8000 	nop.w
    4568:	f3af 8000 	nop.w
    456c:	f3af 8000 	nop.w
    4570:	f3af 8000 	nop.w
    4574:	f3af 8000 	nop.w
    4578:	f3af 8000 	nop.w
    457c:	f3af 8000 	nop.w

00004580 <HAL_SPI_TxRxCpltCallback>:
{
    4580:	b570      	push	{r4, r5, r6, lr}
	if (hspi == &hspi6)
    4582:	4cbb      	ldr	r4, [pc, #748]	; (4870 <HAL_SPI_TxRxCpltCallback+0x2f0>)
	interrupted = 1;
    4584:	2201      	movs	r2, #1
    4586:	4bbb      	ldr	r3, [pc, #748]	; (4874 <HAL_SPI_TxRxCpltCallback+0x2f4>)
	if (hspi == &hspi6)
    4588:	4284      	cmp	r4, r0
	interrupted = 1;
    458a:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi6)
    458c:	d05b      	beq.n	4646 <HAL_SPI_TxRxCpltCallback+0xc6>
		SCB_InvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_LEVERS_RX) & ~(uint32_t )0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    458e:	4cba      	ldr	r4, [pc, #744]	; (4878 <HAL_SPI_TxRxCpltCallback+0x2f8>)
  __ASM volatile ("dsb 0xF":::"memory");
    4590:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4594:	4bb9      	ldr	r3, [pc, #740]	; (487c <HAL_SPI_TxRxCpltCallback+0x2fc>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4596:	f104 0120 	add.w	r1, r4, #32
    459a:	f104 0540 	add.w	r5, r4, #64	; 0x40
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    459e:	f8c3 425c 	str.w	r4, [r3, #604]	; 0x25c
    45a2:	f8c3 125c 	str.w	r1, [r3, #604]	; 0x25c
    45a6:	f8c3 525c 	str.w	r5, [r3, #604]	; 0x25c
    45aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    45ae:	f3bf 8f6f 	isb	sy
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
    45b2:	2110      	movs	r1, #16
    45b4:	48b2      	ldr	r0, [pc, #712]	; (4880 <HAL_SPI_TxRxCpltCallback+0x300>)
    45b6:	f004 febf 	bl	9338 <__HAL_GPIO_WritePin_veneer>
		if ((SPI_LEVERS_RX[62] == 254) && (SPI_LEVERS_RX[63] == 253))
    45ba:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
    45be:	2bfe      	cmp	r3, #254	; 0xfe
    45c0:	d103      	bne.n	45ca <HAL_SPI_TxRxCpltCallback+0x4a>
    45c2:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
    45c6:	2bfd      	cmp	r3, #253	; 0xfd
    45c8:	d039      	beq.n	463e <HAL_SPI_TxRxCpltCallback+0xbe>
			HAL_SPI_Abort(&hspi1);
    45ca:	4cae      	ldr	r4, [pc, #696]	; (4884 <HAL_SPI_TxRxCpltCallback+0x304>)
    45cc:	4620      	mov	r0, r4
    45ce:	f004 ff67 	bl	94a0 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI1_FORCE_RESET();
    45d2:	4bad      	ldr	r3, [pc, #692]	; (4888 <HAL_SPI_TxRxCpltCallback+0x308>)
    45d4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    45d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    45dc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			__HAL_RCC_SPI1_RELEASE_RESET();
    45e0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    45e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    45e8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			MX_SPI1_Init();
    45ec:	f005 f88c 	bl	9708 <__MX_SPI1_Init_veneer>
			__HAL_SPI_ENABLE(&hspi1);
    45f0:	6826      	ldr	r6, [r4, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    45f2:	4aa1      	ldr	r2, [pc, #644]	; (4878 <HAL_SPI_TxRxCpltCallback+0x2f8>)
    45f4:	2340      	movs	r3, #64	; 0x40
			__HAL_SPI_ENABLE(&hspi1);
    45f6:	6831      	ldr	r1, [r6, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    45f8:	4620      	mov	r0, r4
			__HAL_SPI_ENABLE(&hspi1);
    45fa:	f041 0101 	orr.w	r1, r1, #1
    45fe:	6031      	str	r1, [r6, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    4600:	18d1      	adds	r1, r2, r3
    4602:	f004 ff39 	bl	9478 <__HAL_SPI_TransmitReceive_DMA_veneer>
			numResets++;
    4606:	4aa1      	ldr	r2, [pc, #644]	; (488c <HAL_SPI_TxRxCpltCallback+0x30c>)
    4608:	7813      	ldrb	r3, [r2, #0]
    460a:	3301      	adds	r3, #1
    460c:	b2db      	uxtb	r3, r3
    460e:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    4610:	f3bf 8f4f 	dsb	sy
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4614:	4a9e      	ldr	r2, [pc, #632]	; (4890 <HAL_SPI_TxRxCpltCallback+0x310>)
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4616:	4b99      	ldr	r3, [pc, #612]	; (487c <HAL_SPI_TxRxCpltCallback+0x2fc>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4618:	f102 0120 	add.w	r1, r2, #32
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    461c:	f8c3 5268 	str.w	r5, [r3, #616]	; 0x268
    4620:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    4624:	f8c3 1268 	str.w	r1, [r3, #616]	; 0x268
    4628:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    462c:	f3bf 8f6f 	isb	sy
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
    4630:	2200      	movs	r2, #0
    4632:	2110      	movs	r1, #16
    4634:	4892      	ldr	r0, [pc, #584]	; (4880 <HAL_SPI_TxRxCpltCallback+0x300>)
}
    4636:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
    463a:	f004 be7d 	b.w	9338 <__HAL_GPIO_WritePin_veneer>
			handleSPI(LEVER_BUFFER_SIZE);
    463e:	2020      	movs	r0, #32
    4640:	f7fe fdee 	bl	3220 <handleSPI>
    4644:	e7e4      	b.n	4610 <HAL_SPI_TxRxCpltCallback+0x90>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
    4646:	2102      	movs	r1, #2
    4648:	488d      	ldr	r0, [pc, #564]	; (4880 <HAL_SPI_TxRxCpltCallback+0x300>)
    464a:	f004 fe75 	bl	9338 <__HAL_GPIO_WritePin_veneer>
		SCB_InvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_PLUCK_RX) & ~(uint32_t )0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    464e:	4b91      	ldr	r3, [pc, #580]	; (4894 <HAL_SPI_TxRxCpltCallback+0x314>)
    4650:	f103 0040 	add.w	r0, r3, #64	; 0x40
  __ASM volatile ("dsb 0xF":::"memory");
    4654:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4658:	4a88      	ldr	r2, [pc, #544]	; (487c <HAL_SPI_TxRxCpltCallback+0x2fc>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    465a:	f103 0160 	add.w	r1, r3, #96	; 0x60
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    465e:	f8c2 025c 	str.w	r0, [r2, #604]	; 0x25c
    4662:	f8c2 125c 	str.w	r1, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4666:	f103 0180 	add.w	r1, r3, #128	; 0x80
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    466a:	f8c2 125c 	str.w	r1, [r2, #604]	; 0x25c
    466e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4672:	f3bf 8f6f 	isb	sy
		if ((SPI_PLUCK_RX[32] == 254) && (SPI_PLUCK_RX[63] == 253))
    4676:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
    467a:	2afe      	cmp	r2, #254	; 0xfe
    467c:	d103      	bne.n	4686 <HAL_SPI_TxRxCpltCallback+0x106>
    467e:	f893 207f 	ldrb.w	r2, [r3, #127]	; 0x7f
    4682:	2afd      	cmp	r2, #253	; 0xfd
    4684:	d023      	beq.n	46ce <HAL_SPI_TxRxCpltCallback+0x14e>
			HAL_SPI_Abort(&hspi6);
    4686:	487a      	ldr	r0, [pc, #488]	; (4870 <HAL_SPI_TxRxCpltCallback+0x2f0>)
    4688:	f004 ff0a 	bl	94a0 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI6_FORCE_RESET();
    468c:	4b7e      	ldr	r3, [pc, #504]	; (4888 <HAL_SPI_TxRxCpltCallback+0x308>)
    468e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    4692:	f042 0220 	orr.w	r2, r2, #32
    4696:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
			__HAL_RCC_SPI6_RELEASE_RESET();
    469a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    469e:	f022 0220 	bic.w	r2, r2, #32
    46a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
			MX_SPI6_Init();
    46a6:	f004 fe23 	bl	92f0 <__MX_SPI6_Init_veneer>
			__HAL_SPI_ENABLE(&hspi6);
    46aa:	6825      	ldr	r5, [r4, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi6, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    46ac:	4a7a      	ldr	r2, [pc, #488]	; (4898 <HAL_SPI_TxRxCpltCallback+0x318>)
    46ae:	2340      	movs	r3, #64	; 0x40
			__HAL_SPI_ENABLE(&hspi6);
    46b0:	682c      	ldr	r4, [r5, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi6, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    46b2:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
    46b6:	486e      	ldr	r0, [pc, #440]	; (4870 <HAL_SPI_TxRxCpltCallback+0x2f0>)
			__HAL_SPI_ENABLE(&hspi6);
    46b8:	f044 0401 	orr.w	r4, r4, #1
    46bc:	602c      	str	r4, [r5, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi6, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    46be:	f004 fedb 	bl	9478 <__HAL_SPI_TransmitReceive_DMA_veneer>
			numResets++;
    46c2:	4a72      	ldr	r2, [pc, #456]	; (488c <HAL_SPI_TxRxCpltCallback+0x30c>)
    46c4:	7813      	ldrb	r3, [r2, #0]
    46c6:	3301      	adds	r3, #1
    46c8:	b2db      	uxtb	r3, r3
    46ca:	7013      	strb	r3, [r2, #0]
}
    46cc:	bd70      	pop	{r4, r5, r6, pc}
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    46ce:	4a73      	ldr	r2, [pc, #460]	; (489c <HAL_SPI_TxRxCpltCallback+0x31c>)
    46d0:	7811      	ldrb	r1, [r2, #0]
    46d2:	2900      	cmp	r1, #0
    46d4:	f000 80c8 	beq.w	4868 <HAL_SPI_TxRxCpltCallback+0x2e8>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    46d8:	4a71      	ldr	r2, [pc, #452]	; (48a0 <HAL_SPI_TxRxCpltCallback+0x320>)
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    46da:	2901      	cmp	r1, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    46dc:	6814      	ldr	r4, [r2, #0]
    46de:	6810      	ldr	r0, [r2, #0]
    46e0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    46e4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    46e8:	f894 5061 	ldrb.w	r5, [r4, #97]	; 0x61
    46ec:	f890 4062 	ldrb.w	r4, [r0, #98]	; 0x62
    46f0:	486c      	ldr	r0, [pc, #432]	; (48a4 <HAL_SPI_TxRxCpltCallback+0x324>)
    46f2:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    46f6:	b2a4      	uxth	r4, r4
    46f8:	8004      	strh	r4, [r0, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    46fa:	f000 80b5 	beq.w	4868 <HAL_SPI_TxRxCpltCallback+0x2e8>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    46fe:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4700:	2902      	cmp	r1, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4702:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4706:	f894 5063 	ldrb.w	r5, [r4, #99]	; 0x63
    470a:	6814      	ldr	r4, [r2, #0]
    470c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4710:	f894 4064 	ldrb.w	r4, [r4, #100]	; 0x64
    4714:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    4718:	b2a4      	uxth	r4, r4
    471a:	8044      	strh	r4, [r0, #2]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    471c:	f000 80a4 	beq.w	4868 <HAL_SPI_TxRxCpltCallback+0x2e8>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4720:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4722:	2903      	cmp	r1, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4724:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4728:	f894 5065 	ldrb.w	r5, [r4, #101]	; 0x65
    472c:	6814      	ldr	r4, [r2, #0]
    472e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4732:	f894 4066 	ldrb.w	r4, [r4, #102]	; 0x66
    4736:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    473a:	b2a4      	uxth	r4, r4
    473c:	8084      	strh	r4, [r0, #4]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    473e:	f000 8093 	beq.w	4868 <HAL_SPI_TxRxCpltCallback+0x2e8>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4742:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4744:	2904      	cmp	r1, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4746:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    474a:	f894 5067 	ldrb.w	r5, [r4, #103]	; 0x67
    474e:	6814      	ldr	r4, [r2, #0]
    4750:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4754:	f894 4068 	ldrb.w	r4, [r4, #104]	; 0x68
    4758:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    475c:	b2a4      	uxth	r4, r4
    475e:	80c4      	strh	r4, [r0, #6]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4760:	f000 8082 	beq.w	4868 <HAL_SPI_TxRxCpltCallback+0x2e8>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4764:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4766:	2905      	cmp	r1, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4768:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    476c:	f894 5069 	ldrb.w	r5, [r4, #105]	; 0x69
    4770:	6814      	ldr	r4, [r2, #0]
    4772:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4776:	f894 406a 	ldrb.w	r4, [r4, #106]	; 0x6a
    477a:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    477e:	b2a4      	uxth	r4, r4
    4780:	8104      	strh	r4, [r0, #8]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4782:	d071      	beq.n	4868 <HAL_SPI_TxRxCpltCallback+0x2e8>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4784:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4786:	2906      	cmp	r1, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4788:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    478c:	f894 506b 	ldrb.w	r5, [r4, #107]	; 0x6b
    4790:	6814      	ldr	r4, [r2, #0]
    4792:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4796:	f894 406c 	ldrb.w	r4, [r4, #108]	; 0x6c
    479a:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    479e:	b2a4      	uxth	r4, r4
    47a0:	8144      	strh	r4, [r0, #10]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    47a2:	d061      	beq.n	4868 <HAL_SPI_TxRxCpltCallback+0x2e8>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    47a4:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    47a6:	2907      	cmp	r1, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    47a8:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    47ac:	f894 506d 	ldrb.w	r5, [r4, #109]	; 0x6d
    47b0:	6814      	ldr	r4, [r2, #0]
    47b2:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    47b6:	f894 406e 	ldrb.w	r4, [r4, #110]	; 0x6e
    47ba:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    47be:	b2a4      	uxth	r4, r4
    47c0:	8184      	strh	r4, [r0, #12]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    47c2:	d051      	beq.n	4868 <HAL_SPI_TxRxCpltCallback+0x2e8>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    47c4:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    47c6:	2908      	cmp	r1, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    47c8:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    47cc:	f894 506f 	ldrb.w	r5, [r4, #111]	; 0x6f
    47d0:	6814      	ldr	r4, [r2, #0]
    47d2:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    47d6:	f894 4070 	ldrb.w	r4, [r4, #112]	; 0x70
    47da:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    47de:	b2a4      	uxth	r4, r4
    47e0:	81c4      	strh	r4, [r0, #14]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    47e2:	d041      	beq.n	4868 <HAL_SPI_TxRxCpltCallback+0x2e8>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    47e4:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    47e6:	2909      	cmp	r1, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    47e8:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    47ec:	f894 5071 	ldrb.w	r5, [r4, #113]	; 0x71
    47f0:	6814      	ldr	r4, [r2, #0]
    47f2:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    47f6:	f894 4072 	ldrb.w	r4, [r4, #114]	; 0x72
    47fa:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    47fe:	b2a4      	uxth	r4, r4
    4800:	8204      	strh	r4, [r0, #16]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4802:	d031      	beq.n	4868 <HAL_SPI_TxRxCpltCallback+0x2e8>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4804:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4806:	290a      	cmp	r1, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4808:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    480c:	f894 5073 	ldrb.w	r5, [r4, #115]	; 0x73
    4810:	6814      	ldr	r4, [r2, #0]
    4812:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4816:	f894 4074 	ldrb.w	r4, [r4, #116]	; 0x74
    481a:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    481e:	b2a4      	uxth	r4, r4
    4820:	8244      	strh	r4, [r0, #18]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4822:	d021      	beq.n	4868 <HAL_SPI_TxRxCpltCallback+0x2e8>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4824:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4826:	290b      	cmp	r1, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4828:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    482c:	f894 5075 	ldrb.w	r5, [r4, #117]	; 0x75
    4830:	6814      	ldr	r4, [r2, #0]
    4832:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4836:	f894 4076 	ldrb.w	r4, [r4, #118]	; 0x76
    483a:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    483e:	b2a4      	uxth	r4, r4
    4840:	8284      	strh	r4, [r0, #20]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4842:	d011      	beq.n	4868 <HAL_SPI_TxRxCpltCallback+0x2e8>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4844:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4846:	290c      	cmp	r1, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4848:	6815      	ldr	r5, [r2, #0]
    484a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    484e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    4852:	f894 4077 	ldrb.w	r4, [r4, #119]	; 0x77
    4856:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    485a:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    485e:	b29b      	uxth	r3, r3
    4860:	82c3      	strh	r3, [r0, #22]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4862:	d001      	beq.n	4868 <HAL_SPI_TxRxCpltCallback+0x2e8>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4864:	6813      	ldr	r3, [r2, #0]
    4866:	6813      	ldr	r3, [r2, #0]
			newPluck = 1;
    4868:	4b0f      	ldr	r3, [pc, #60]	; (48a8 <HAL_SPI_TxRxCpltCallback+0x328>)
    486a:	2201      	movs	r2, #1
    486c:	601a      	str	r2, [r3, #0]
}
    486e:	bd70      	pop	{r4, r5, r6, pc}
    4870:	2001cb10 	.word	0x2001cb10
    4874:	20004f44 	.word	0x20004f44
    4878:	30000800 	.word	0x30000800
    487c:	e000ed00 	.word	0xe000ed00
    4880:	58020800 	.word	0x58020800
    4884:	2001ca70 	.word	0x2001ca70
    4888:	58024400 	.word	0x58024400
    488c:	20018fad 	.word	0x20018fad
    4890:	30000860 	.word	0x30000860
    4894:	38000000 	.word	0x38000000
    4898:	38000040 	.word	0x38000040
    489c:	200004b1 	.word	0x200004b1
    48a0:	20004f38 	.word	0x20004f38
    48a4:	20013f30 	.word	0x20013f30
    48a8:	20005014 	.word	0x20005014
    48ac:	f3af 8000 	nop.w
    48b0:	f3af 8000 	nop.w
    48b4:	f3af 8000 	nop.w
    48b8:	f3af 8000 	nop.w
    48bc:	f3af 8000 	nop.w

000048c0 <HAL_SPI_TxRxHalfCpltCallback>:
{
    48c0:	b570      	push	{r4, r5, r6, lr}
	if (hspi == &hspi6)
    48c2:	4dbd      	ldr	r5, [pc, #756]	; (4bb8 <HAL_SPI_TxRxHalfCpltCallback+0x2f8>)
	interrupted = 1;
    48c4:	2201      	movs	r2, #1
    48c6:	4bbd      	ldr	r3, [pc, #756]	; (4bbc <HAL_SPI_TxRxHalfCpltCallback+0x2fc>)
	if (hspi == &hspi6)
    48c8:	4285      	cmp	r5, r0
	interrupted = 1;
    48ca:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi6)
    48cc:	d056      	beq.n	497c <HAL_SPI_TxRxHalfCpltCallback+0xbc>
		SCB_InvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_LEVERS_RX) & ~(uint32_t )0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    48ce:	4cbc      	ldr	r4, [pc, #752]	; (4bc0 <HAL_SPI_TxRxHalfCpltCallback+0x300>)
  __ASM volatile ("dsb 0xF":::"memory");
    48d0:	f3bf 8f4f 	dsb	sy
    48d4:	4bbb      	ldr	r3, [pc, #748]	; (4bc4 <HAL_SPI_TxRxHalfCpltCallback+0x304>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    48d6:	f104 0120 	add.w	r1, r4, #32
    48da:	f104 0540 	add.w	r5, r4, #64	; 0x40
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    48de:	f8c3 425c 	str.w	r4, [r3, #604]	; 0x25c
    48e2:	f8c3 125c 	str.w	r1, [r3, #604]	; 0x25c
    48e6:	f8c3 525c 	str.w	r5, [r3, #604]	; 0x25c
    48ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    48ee:	f3bf 8f6f 	isb	sy
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
    48f2:	2110      	movs	r1, #16
    48f4:	48b4      	ldr	r0, [pc, #720]	; (4bc8 <HAL_SPI_TxRxHalfCpltCallback+0x308>)
    48f6:	f004 fd1f 	bl	9338 <__HAL_GPIO_WritePin_veneer>
		if ((SPI_LEVERS_RX[30] == 254) && (SPI_LEVERS_RX[31] == 253))
    48fa:	7fa3      	ldrb	r3, [r4, #30]
    48fc:	2bfe      	cmp	r3, #254	; 0xfe
    48fe:	d103      	bne.n	4908 <HAL_SPI_TxRxHalfCpltCallback+0x48>
    4900:	7fe3      	ldrb	r3, [r4, #31]
    4902:	2bfd      	cmp	r3, #253	; 0xfd
    4904:	f000 814f 	beq.w	4ba6 <HAL_SPI_TxRxHalfCpltCallback+0x2e6>
			HAL_SPI_Abort(&hspi1);
    4908:	4cb0      	ldr	r4, [pc, #704]	; (4bcc <HAL_SPI_TxRxHalfCpltCallback+0x30c>)
    490a:	4620      	mov	r0, r4
    490c:	f004 fdc8 	bl	94a0 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI1_FORCE_RESET();
    4910:	4baf      	ldr	r3, [pc, #700]	; (4bd0 <HAL_SPI_TxRxHalfCpltCallback+0x310>)
    4912:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4916:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    491a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			__HAL_RCC_SPI1_RELEASE_RESET();
    491e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4922:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    4926:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			MX_SPI1_Init();
    492a:	f004 feed 	bl	9708 <__MX_SPI1_Init_veneer>
			__HAL_SPI_ENABLE(&hspi1);
    492e:	6826      	ldr	r6, [r4, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    4930:	4aa3      	ldr	r2, [pc, #652]	; (4bc0 <HAL_SPI_TxRxHalfCpltCallback+0x300>)
    4932:	2340      	movs	r3, #64	; 0x40
			__HAL_SPI_ENABLE(&hspi1);
    4934:	6831      	ldr	r1, [r6, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    4936:	4620      	mov	r0, r4
			__HAL_SPI_ENABLE(&hspi1);
    4938:	f041 0101 	orr.w	r1, r1, #1
    493c:	6031      	str	r1, [r6, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    493e:	18d1      	adds	r1, r2, r3
    4940:	f004 fd9a 	bl	9478 <__HAL_SPI_TransmitReceive_DMA_veneer>
			numResets++;
    4944:	4aa3      	ldr	r2, [pc, #652]	; (4bd4 <HAL_SPI_TxRxHalfCpltCallback+0x314>)
    4946:	7813      	ldrb	r3, [r2, #0]
    4948:	3301      	adds	r3, #1
    494a:	b2db      	uxtb	r3, r3
    494c:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    494e:	f3bf 8f4f 	dsb	sy
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4952:	4aa1      	ldr	r2, [pc, #644]	; (4bd8 <HAL_SPI_TxRxHalfCpltCallback+0x318>)
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4954:	4b9b      	ldr	r3, [pc, #620]	; (4bc4 <HAL_SPI_TxRxHalfCpltCallback+0x304>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4956:	f102 0120 	add.w	r1, r2, #32
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    495a:	f8c3 5268 	str.w	r5, [r3, #616]	; 0x268
    495e:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    4962:	f8c3 1268 	str.w	r1, [r3, #616]	; 0x268
    4966:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    496a:	f3bf 8f6f 	isb	sy
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
    496e:	2200      	movs	r2, #0
    4970:	2110      	movs	r1, #16
    4972:	4895      	ldr	r0, [pc, #596]	; (4bc8 <HAL_SPI_TxRxHalfCpltCallback+0x308>)
}
    4974:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
    4978:	f004 bcde 	b.w	9338 <__HAL_GPIO_WritePin_veneer>
		SCB_InvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_PLUCK_RX) & ~(uint32_t )0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    497c:	4c97      	ldr	r4, [pc, #604]	; (4bdc <HAL_SPI_TxRxHalfCpltCallback+0x31c>)
    497e:	f104 0140 	add.w	r1, r4, #64	; 0x40
  __ASM volatile ("dsb 0xF":::"memory");
    4982:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4986:	4b8f      	ldr	r3, [pc, #572]	; (4bc4 <HAL_SPI_TxRxHalfCpltCallback+0x304>)
    4988:	f8c3 125c 	str.w	r1, [r3, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
    498c:	f104 0160 	add.w	r1, r4, #96	; 0x60
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4990:	f8c3 125c 	str.w	r1, [r3, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4994:	f104 0180 	add.w	r1, r4, #128	; 0x80
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4998:	f8c3 125c 	str.w	r1, [r3, #604]	; 0x25c
    499c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    49a0:	f3bf 8f6f 	isb	sy
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
    49a4:	2102      	movs	r1, #2
    49a6:	4888      	ldr	r0, [pc, #544]	; (4bc8 <HAL_SPI_TxRxHalfCpltCallback+0x308>)
    49a8:	f004 fcc6 	bl	9338 <__HAL_GPIO_WritePin_veneer>
		if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[31] == 253))
    49ac:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    49b0:	2bfe      	cmp	r3, #254	; 0xfe
    49b2:	f040 80d4 	bne.w	4b5e <HAL_SPI_TxRxHalfCpltCallback+0x29e>
    49b6:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
    49ba:	2bfd      	cmp	r3, #253	; 0xfd
    49bc:	f040 80cf 	bne.w	4b5e <HAL_SPI_TxRxHalfCpltCallback+0x29e>
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    49c0:	4b87      	ldr	r3, [pc, #540]	; (4be0 <HAL_SPI_TxRxHalfCpltCallback+0x320>)
    49c2:	781a      	ldrb	r2, [r3, #0]
    49c4:	2a00      	cmp	r2, #0
    49c6:	f000 80f2 	beq.w	4bae <HAL_SPI_TxRxHalfCpltCallback+0x2ee>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    49ca:	4b86      	ldr	r3, [pc, #536]	; (4be4 <HAL_SPI_TxRxHalfCpltCallback+0x324>)
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    49cc:	2a01      	cmp	r2, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    49ce:	6818      	ldr	r0, [r3, #0]
    49d0:	6819      	ldr	r1, [r3, #0]
    49d2:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    49d6:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    49da:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
    49de:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    49e2:	4981      	ldr	r1, [pc, #516]	; (4be8 <HAL_SPI_TxRxHalfCpltCallback+0x328>)
    49e4:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    49e8:	b280      	uxth	r0, r0
    49ea:	8008      	strh	r0, [r1, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    49ec:	f000 80df 	beq.w	4bae <HAL_SPI_TxRxHalfCpltCallback+0x2ee>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    49f0:	6818      	ldr	r0, [r3, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    49f2:	2a02      	cmp	r2, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    49f4:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    49f8:	f890 5043 	ldrb.w	r5, [r0, #67]	; 0x43
    49fc:	6818      	ldr	r0, [r3, #0]
    49fe:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4a02:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
    4a06:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    4a0a:	b280      	uxth	r0, r0
    4a0c:	8048      	strh	r0, [r1, #2]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4a0e:	f000 80ce 	beq.w	4bae <HAL_SPI_TxRxHalfCpltCallback+0x2ee>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a12:	6818      	ldr	r0, [r3, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4a14:	2a03      	cmp	r2, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a16:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4a1a:	f890 5045 	ldrb.w	r5, [r0, #69]	; 0x45
    4a1e:	6818      	ldr	r0, [r3, #0]
    4a20:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4a24:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    4a28:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    4a2c:	b280      	uxth	r0, r0
    4a2e:	8088      	strh	r0, [r1, #4]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4a30:	f000 80bd 	beq.w	4bae <HAL_SPI_TxRxHalfCpltCallback+0x2ee>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a34:	6818      	ldr	r0, [r3, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4a36:	2a04      	cmp	r2, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a38:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4a3c:	f890 5047 	ldrb.w	r5, [r0, #71]	; 0x47
    4a40:	6818      	ldr	r0, [r3, #0]
    4a42:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4a46:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    4a4a:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    4a4e:	b280      	uxth	r0, r0
    4a50:	80c8      	strh	r0, [r1, #6]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4a52:	f000 80ac 	beq.w	4bae <HAL_SPI_TxRxHalfCpltCallback+0x2ee>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a56:	6818      	ldr	r0, [r3, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4a58:	2a05      	cmp	r2, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a5a:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4a5e:	f890 5049 	ldrb.w	r5, [r0, #73]	; 0x49
    4a62:	6818      	ldr	r0, [r3, #0]
    4a64:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4a68:	f890 004a 	ldrb.w	r0, [r0, #74]	; 0x4a
    4a6c:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    4a70:	b280      	uxth	r0, r0
    4a72:	8108      	strh	r0, [r1, #8]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4a74:	f000 809b 	beq.w	4bae <HAL_SPI_TxRxHalfCpltCallback+0x2ee>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a78:	6818      	ldr	r0, [r3, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4a7a:	2a06      	cmp	r2, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a7c:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4a80:	f890 504b 	ldrb.w	r5, [r0, #75]	; 0x4b
    4a84:	6818      	ldr	r0, [r3, #0]
    4a86:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4a8a:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
    4a8e:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    4a92:	b280      	uxth	r0, r0
    4a94:	8148      	strh	r0, [r1, #10]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4a96:	f000 808a 	beq.w	4bae <HAL_SPI_TxRxHalfCpltCallback+0x2ee>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a9a:	6818      	ldr	r0, [r3, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4a9c:	2a07      	cmp	r2, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a9e:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4aa2:	f890 504d 	ldrb.w	r5, [r0, #77]	; 0x4d
    4aa6:	6818      	ldr	r0, [r3, #0]
    4aa8:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4aac:	f890 004e 	ldrb.w	r0, [r0, #78]	; 0x4e
    4ab0:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    4ab4:	b280      	uxth	r0, r0
    4ab6:	8188      	strh	r0, [r1, #12]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4ab8:	d079      	beq.n	4bae <HAL_SPI_TxRxHalfCpltCallback+0x2ee>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4aba:	6818      	ldr	r0, [r3, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4abc:	2a08      	cmp	r2, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4abe:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4ac2:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
    4ac6:	6818      	ldr	r0, [r3, #0]
    4ac8:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4acc:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
    4ad0:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    4ad4:	b280      	uxth	r0, r0
    4ad6:	81c8      	strh	r0, [r1, #14]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4ad8:	d069      	beq.n	4bae <HAL_SPI_TxRxHalfCpltCallback+0x2ee>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4ada:	6818      	ldr	r0, [r3, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4adc:	2a09      	cmp	r2, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4ade:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4ae2:	f890 5051 	ldrb.w	r5, [r0, #81]	; 0x51
    4ae6:	6818      	ldr	r0, [r3, #0]
    4ae8:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4aec:	f890 0052 	ldrb.w	r0, [r0, #82]	; 0x52
    4af0:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    4af4:	b280      	uxth	r0, r0
    4af6:	8208      	strh	r0, [r1, #16]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4af8:	d059      	beq.n	4bae <HAL_SPI_TxRxHalfCpltCallback+0x2ee>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4afa:	6818      	ldr	r0, [r3, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4afc:	2a0a      	cmp	r2, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4afe:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4b02:	f890 5053 	ldrb.w	r5, [r0, #83]	; 0x53
    4b06:	6818      	ldr	r0, [r3, #0]
    4b08:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4b0c:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
    4b10:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    4b14:	b280      	uxth	r0, r0
    4b16:	8248      	strh	r0, [r1, #18]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4b18:	d049      	beq.n	4bae <HAL_SPI_TxRxHalfCpltCallback+0x2ee>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4b1a:	6818      	ldr	r0, [r3, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4b1c:	2a0b      	cmp	r2, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4b1e:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4b22:	f890 5055 	ldrb.w	r5, [r0, #85]	; 0x55
    4b26:	6818      	ldr	r0, [r3, #0]
    4b28:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4b2c:	f890 0056 	ldrb.w	r0, [r0, #86]	; 0x56
    4b30:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    4b34:	b280      	uxth	r0, r0
    4b36:	8288      	strh	r0, [r1, #20]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4b38:	d039      	beq.n	4bae <HAL_SPI_TxRxHalfCpltCallback+0x2ee>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4b3a:	6818      	ldr	r0, [r3, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4b3c:	2a0c      	cmp	r2, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4b3e:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4b42:	f890 5057 	ldrb.w	r5, [r0, #87]	; 0x57
    4b46:	6818      	ldr	r0, [r3, #0]
    4b48:	eb04 0440 	add.w	r4, r4, r0, lsl #1
    4b4c:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    4b50:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    4b54:	b280      	uxth	r0, r0
    4b56:	82c8      	strh	r0, [r1, #22]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4b58:	d029      	beq.n	4bae <HAL_SPI_TxRxHalfCpltCallback+0x2ee>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4b5a:	681a      	ldr	r2, [r3, #0]
    4b5c:	681b      	ldr	r3, [r3, #0]
			HAL_SPI_Abort(&hspi6);
    4b5e:	4816      	ldr	r0, [pc, #88]	; (4bb8 <HAL_SPI_TxRxHalfCpltCallback+0x2f8>)
    4b60:	f004 fc9e 	bl	94a0 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI6_FORCE_RESET();
    4b64:	4b1a      	ldr	r3, [pc, #104]	; (4bd0 <HAL_SPI_TxRxHalfCpltCallback+0x310>)
    4b66:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    4b6a:	f042 0220 	orr.w	r2, r2, #32
    4b6e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
			__HAL_RCC_SPI6_RELEASE_RESET();
    4b72:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    4b76:	f022 0220 	bic.w	r2, r2, #32
    4b7a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
			MX_SPI6_Init();
    4b7e:	f004 fbb7 	bl	92f0 <__MX_SPI6_Init_veneer>
			__HAL_SPI_ENABLE(&hspi6);
    4b82:	682d      	ldr	r5, [r5, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi6, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4b84:	4a19      	ldr	r2, [pc, #100]	; (4bec <HAL_SPI_TxRxHalfCpltCallback+0x32c>)
    4b86:	2340      	movs	r3, #64	; 0x40
			__HAL_SPI_ENABLE(&hspi6);
    4b88:	682c      	ldr	r4, [r5, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi6, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4b8a:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
    4b8e:	480a      	ldr	r0, [pc, #40]	; (4bb8 <HAL_SPI_TxRxHalfCpltCallback+0x2f8>)
			__HAL_SPI_ENABLE(&hspi6);
    4b90:	f044 0401 	orr.w	r4, r4, #1
    4b94:	602c      	str	r4, [r5, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi6, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4b96:	f004 fc6f 	bl	9478 <__HAL_SPI_TransmitReceive_DMA_veneer>
			numResets++;
    4b9a:	4a0e      	ldr	r2, [pc, #56]	; (4bd4 <HAL_SPI_TxRxHalfCpltCallback+0x314>)
    4b9c:	7813      	ldrb	r3, [r2, #0]
    4b9e:	3301      	adds	r3, #1
    4ba0:	b2db      	uxtb	r3, r3
    4ba2:	7013      	strb	r3, [r2, #0]
}
    4ba4:	bd70      	pop	{r4, r5, r6, pc}
			handleSPI(0);
    4ba6:	2000      	movs	r0, #0
    4ba8:	f7fe fb3a 	bl	3220 <handleSPI>
    4bac:	e6cf      	b.n	494e <HAL_SPI_TxRxHalfCpltCallback+0x8e>
			newPluck = 1;
    4bae:	4b10      	ldr	r3, [pc, #64]	; (4bf0 <HAL_SPI_TxRxHalfCpltCallback+0x330>)
    4bb0:	2201      	movs	r2, #1
    4bb2:	601a      	str	r2, [r3, #0]
}
    4bb4:	bd70      	pop	{r4, r5, r6, pc}
    4bb6:	bf00      	nop
    4bb8:	2001cb10 	.word	0x2001cb10
    4bbc:	20004f44 	.word	0x20004f44
    4bc0:	30000800 	.word	0x30000800
    4bc4:	e000ed00 	.word	0xe000ed00
    4bc8:	58020800 	.word	0x58020800
    4bcc:	2001ca70 	.word	0x2001ca70
    4bd0:	58024400 	.word	0x58024400
    4bd4:	20018fad 	.word	0x20018fad
    4bd8:	30000860 	.word	0x30000860
    4bdc:	38000000 	.word	0x38000000
    4be0:	200004b1 	.word	0x200004b1
    4be4:	20004f38 	.word	0x20004f38
    4be8:	20013f30 	.word	0x20013f30
    4bec:	38000040 	.word	0x38000040
    4bf0:	20005014 	.word	0x20005014
	...

00004c00 <audioInitString1>:
tSimpleLivingString3 livStr[NUM_STRINGS_PER_BOARD];
tPickupNonLinearity pu[NUM_STRINGS_PER_BOARD];
tExpSmooth pitchSmootherS[NUM_STRINGS_PER_BOARD];

void __ATTR_ITCMRAM audioInitString1()
{
    4c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (int v = 0; v < numStringsThisBoard; v++)
    4c04:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 4cec <audioInitString1+0xec>
    4c08:	f899 3000 	ldrb.w	r3, [r9]
{
    4c0c:	ed2d 8b06 	vpush	{d8-d10}
	for (int v = 0; v < numStringsThisBoard; v++)
    4c10:	2b00      	cmp	r3, #0
    4c12:	d048      	beq.n	4ca6 <audioInitString1+0xa6>
    4c14:	4c27      	ldr	r4, [pc, #156]	; (4cb4 <audioInitString1+0xb4>)
    4c16:	2500      	movs	r5, #0
    4c18:	4f27      	ldr	r7, [pc, #156]	; (4cb8 <audioInitString1+0xb8>)
    4c1a:	4e28      	ldr	r6, [pc, #160]	; (4cbc <audioInitString1+0xbc>)
	{

		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
    4c1c:	ed9f aa28 	vldr	s20, [pc, #160]	; 4cc0 <audioInitString1+0xc0>
    4c20:	ed9f 8a28 	vldr	s16, [pc, #160]	; 4cc4 <audioInitString1+0xc4>
    4c24:	eddf 9a28 	vldr	s19, [pc, #160]	; 4cc8 <audioInitString1+0xc8>
    4c28:	ed9f 9a28 	vldr	s18, [pc, #160]	; 4ccc <audioInitString1+0xcc>
    4c2c:	eddf 8a28 	vldr	s17, [pc, #160]	; 4cd0 <audioInitString1+0xd0>
												 0.01f, 0, &mediumPool);
		tSimpleLivingString3_setTargetLev(&livStr[v], 0.047059f);
		tSimpleLivingString3_setLevSmoothFactor(&livStr[v], 0.0301913f);
		tSimpleLivingString3_setLevStrength(&livStr[v], 0.0f);
		tSimpleLivingString3_setLevMode(&livStr[v], 1);
		tPickupNonLinearity_init(&pu[v], &leaf);
    4c30:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 4cf0 <audioInitString1+0xf0>
		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
    4c34:	4b27      	ldr	r3, [pc, #156]	; (4cd4 <audioInitString1+0xd4>)
    4c36:	eef0 2a4a 	vmov.f32	s5, s20
    4c3a:	eef0 1a48 	vmov.f32	s3, s16
    4c3e:	2200      	movs	r2, #0
    4c40:	eeb0 1a69 	vmov.f32	s2, s19
    4c44:	ed9f 2a1e 	vldr	s4, [pc, #120]	; 4cc0 <audioInitString1+0xc0>
    4c48:	eef0 0a49 	vmov.f32	s1, s18
    4c4c:	2104      	movs	r1, #4
    4c4e:	4620      	mov	r0, r4
    4c50:	eeb0 0a68 	vmov.f32	s0, s17
    4c54:	f004 fc3c 	bl	94d0 <__tSimpleLivingString3_initToPool_veneer>
		tSimpleLivingString3_setTargetLev(&livStr[v], 0.047059f);
    4c58:	4620      	mov	r0, r4
    4c5a:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 4cd8 <audioInitString1+0xd8>
	for (int v = 0; v < numStringsThisBoard; v++)
    4c5e:	3501      	adds	r5, #1
		tSimpleLivingString3_setTargetLev(&livStr[v], 0.047059f);
    4c60:	f004 fc6a 	bl	9538 <__tSimpleLivingString3_setTargetLev_veneer>
		tSimpleLivingString3_setLevSmoothFactor(&livStr[v], 0.0301913f);
    4c64:	4620      	mov	r0, r4
    4c66:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 4cdc <audioInitString1+0xdc>
    4c6a:	f004 fb79 	bl	9360 <__tSimpleLivingString3_setLevSmoothFactor_veneer>
		tSimpleLivingString3_setLevStrength(&livStr[v], 0.0f);
    4c6e:	eeb0 0a48 	vmov.f32	s0, s16
    4c72:	4620      	mov	r0, r4
    4c74:	f004 fc78 	bl	9568 <__tSimpleLivingString3_setLevStrength_veneer>
		tSimpleLivingString3_setLevMode(&livStr[v], 1);
    4c78:	4620      	mov	r0, r4
    4c7a:	2101      	movs	r1, #1
	for (int v = 0; v < numStringsThisBoard; v++)
    4c7c:	3404      	adds	r4, #4
		tSimpleLivingString3_setLevMode(&livStr[v], 1);
    4c7e:	f004 fb73 	bl	9368 <__tSimpleLivingString3_setLevMode_veneer>
		tPickupNonLinearity_init(&pu[v], &leaf);
    4c82:	4638      	mov	r0, r7
    4c84:	4641      	mov	r1, r8
	for (int v = 0; v < numStringsThisBoard; v++)
    4c86:	3704      	adds	r7, #4
		tPickupNonLinearity_init(&pu[v], &leaf);
    4c88:	f004 fc2e 	bl	94e8 <__tPickupNonLinearity_init_veneer>
		tExpSmooth_init(&pitchSmootherS[v], 64.0f, 0.6f, &leaf);
    4c8c:	4630      	mov	r0, r6
    4c8e:	4641      	mov	r1, r8
    4c90:	eddf 0a13 	vldr	s1, [pc, #76]	; 4ce0 <audioInitString1+0xe0>
    4c94:	ed9f 0a13 	vldr	s0, [pc, #76]	; 4ce4 <audioInitString1+0xe4>
	for (int v = 0; v < numStringsThisBoard; v++)
    4c98:	3604      	adds	r6, #4
		tExpSmooth_init(&pitchSmootherS[v], 64.0f, 0.6f, &leaf);
    4c9a:	f004 fc69 	bl	9570 <__tExpSmooth_init_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    4c9e:	f899 3000 	ldrb.w	r3, [r9]
    4ca2:	42ab      	cmp	r3, r5
    4ca4:	dcc6      	bgt.n	4c34 <audioInitString1+0x34>
	}

	whichStringModelLoaded = String1Loaded;
    4ca6:	4b10      	ldr	r3, [pc, #64]	; (4ce8 <audioInitString1+0xe8>)
    4ca8:	2200      	movs	r2, #0
    4caa:	701a      	strb	r2, [r3, #0]
}
    4cac:	ecbd 8b06 	vpop	{d8-d10}
    4cb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4cb4:	2001cbac 	.word	0x2001cbac
    4cb8:	2001cbbc 	.word	0x2001cbbc
    4cbc:	2001cbb4 	.word	0x2001cbb4
    4cc0:	3c23d70a 	.word	0x3c23d70a
    4cc4:	00000000 	.word	0x00000000
    4cc8:	3f7fff58 	.word	0x3f7fff58
    4ccc:	4684d000 	.word	0x4684d000
    4cd0:	435c0000 	.word	0x435c0000
    4cd4:	2000500c 	.word	0x2000500c
    4cd8:	3d40c0f0 	.word	0x3d40c0f0
    4cdc:	3cf753bf 	.word	0x3cf753bf
    4ce0:	3f19999a 	.word	0x3f19999a
    4ce4:	42800000 	.word	0x42800000
    4ce8:	20013f85 	.word	0x20013f85
    4cec:	200004b1 	.word	0x200004b1
    4cf0:	20004fb8 	.word	0x20004fb8
    4cf4:	f3af 8000 	nop.w
    4cf8:	f3af 8000 	nop.w
    4cfc:	f3af 8000 	nop.w

00004d00 <audioFreeString1>:


void __ATTR_ITCMRAM audioFreeString1()
{
    4d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (int v = 0; v < numStringsThisBoard; v++)
    4d04:	f8df 8044 	ldr.w	r8, [pc, #68]	; 4d4c <audioFreeString1+0x4c>
    4d08:	f898 3000 	ldrb.w	r3, [r8]
    4d0c:	b1ab      	cbz	r3, 4d3a <audioFreeString1+0x3a>
    4d0e:	4f0c      	ldr	r7, [pc, #48]	; (4d40 <audioFreeString1+0x40>)
    4d10:	2400      	movs	r4, #0
    4d12:	4e0c      	ldr	r6, [pc, #48]	; (4d44 <audioFreeString1+0x44>)
    4d14:	4d0c      	ldr	r5, [pc, #48]	; (4d48 <audioFreeString1+0x48>)
	{
		tExpSmooth_free(&pitchSmootherS[v]);
    4d16:	4638      	mov	r0, r7
	for (int v = 0; v < numStringsThisBoard; v++)
    4d18:	3401      	adds	r4, #1
		tExpSmooth_free(&pitchSmootherS[v]);
    4d1a:	f004 fcbd 	bl	9698 <__tExpSmooth_free_veneer>
		tSimpleLivingString3_free(&livStr[v]);
    4d1e:	4630      	mov	r0, r6
    4d20:	f004 fcda 	bl	96d8 <__tSimpleLivingString3_free_veneer>
		tPickupNonLinearity_free(&pu[v]);
    4d24:	4628      	mov	r0, r5
    4d26:	f004 fb87 	bl	9438 <__tPickupNonLinearity_free_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    4d2a:	f898 3000 	ldrb.w	r3, [r8]
    4d2e:	3704      	adds	r7, #4
    4d30:	3604      	adds	r6, #4
    4d32:	42a3      	cmp	r3, r4
    4d34:	f105 0504 	add.w	r5, r5, #4
    4d38:	dced      	bgt.n	4d16 <audioFreeString1+0x16>
	}
}
    4d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d3e:	bf00      	nop
    4d40:	2001cbb4 	.word	0x2001cbb4
    4d44:	2001cbac 	.word	0x2001cbac
    4d48:	2001cbbc 	.word	0x2001cbbc
    4d4c:	200004b1 	.word	0x200004b1
    4d50:	f3af 8000 	nop.w
    4d54:	f3af 8000 	nop.w
    4d58:	f3af 8000 	nop.w
    4d5c:	f3af 8000 	nop.w

00004d60 <audioTickString1>:
}



float __ATTR_ITCMRAM audioTickString1(void)
{
    4d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float temp = 0.0f;
	float note[numStringsThisBoard];
    4d64:	4b9b      	ldr	r3, [pc, #620]	; (4fd4 <audioTickString1+0x274>)
    4d66:	4c9c      	ldr	r4, [pc, #624]	; (4fd8 <audioTickString1+0x278>)

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    4d68:	489c      	ldr	r0, [pc, #624]	; (4fdc <audioTickString1+0x27c>)
    4d6a:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 5034 <audioTickString1+0x2d4>
    4d6e:	4625      	mov	r5, r4
    4d70:	f104 0930 	add.w	r9, r4, #48	; 0x30
{
    4d74:	ed2d 8b0a 	vpush	{d8-d12}
    4d78:	b087      	sub	sp, #28
	float note[numStringsThisBoard];
    4d7a:	781b      	ldrb	r3, [r3, #0]
{
    4d7c:	af00      	add	r7, sp, #0
	float note[numStringsThisBoard];
    4d7e:	009b      	lsls	r3, r3, #2
    4d80:	3307      	adds	r3, #7
    4d82:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
    4d86:	ebad 0d03 	sub.w	sp, sp, r3
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    4d8a:	f004 fbd1 	bl	9530 <__tExpSmooth_tick_veneer>
    4d8e:	eeb0 9a40 	vmov.f32	s18, s0
	float note[numStringsThisBoard];
    4d92:	466e      	mov	r6, sp

	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    4d94:	4640      	mov	r0, r8
	for (int i = 0; i < 12; i++)
    4d96:	f108 0804 	add.w	r8, r8, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    4d9a:	f004 fbc9 	bl	9530 <__tExpSmooth_tick_veneer>
    4d9e:	eca5 0a01 	vstmia	r5!, {s0}
	for (int i = 0; i < 12; i++)
    4da2:	454d      	cmp	r5, r9
    4da4:	d1f6      	bne.n	4d94 <audioTickString1+0x34>
	}
	pluckPos = knobScaled[9];

	for (int i = 0; i < numStringsThisBoard; i++)
    4da6:	4b8b      	ldr	r3, [pc, #556]	; (4fd4 <audioTickString1+0x274>)
	pluckPos = knobScaled[9];
    4da8:	4a8d      	ldr	r2, [pc, #564]	; (4fe0 <audioTickString1+0x280>)
    4daa:	6a61      	ldr	r1, [r4, #36]	; 0x24
	for (int i = 0; i < numStringsThisBoard; i++)
    4dac:	781b      	ldrb	r3, [r3, #0]
	float temp = 0.0f;
    4dae:	ed9f 8a8d 	vldr	s16, [pc, #564]	; 4fe4 <audioTickString1+0x284>
	pluckPos = knobScaled[9];
    4db2:	6011      	str	r1, [r2, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
    4db4:	2b00      	cmp	r3, #0
    4db6:	f000 80d2 	beq.w	4f5e <audioTickString1+0x1fe>
    4dba:	4b8b      	ldr	r3, [pc, #556]	; (4fe8 <audioTickString1+0x288>)
    4dbc:	2200      	movs	r2, #0
    4dbe:	f8df 9278 	ldr.w	r9, [pc, #632]	; 5038 <audioTickString1+0x2d8>
	{
		note[i] = stringMIDIPitches[i] + stringOctave[i];
		//sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;

		if (note[i] < 0.0f)
    4dc2:	eef0 8a48 	vmov.f32	s17, s16
    4dc6:	f8df a274 	ldr.w	sl, [pc, #628]	; 503c <audioTickString1+0x2dc>
    4dca:	f8df 8274 	ldr.w	r8, [pc, #628]	; 5040 <audioTickString1+0x2e0>
    4dce:	613b      	str	r3, [r7, #16]
    4dd0:	4b86      	ldr	r3, [pc, #536]	; (4fec <audioTickString1+0x28c>)
    4dd2:	ed9f ba87 	vldr	s22, [pc, #540]	; 4ff0 <audioTickString1+0x290>
    4dd6:	617b      	str	r3, [r7, #20]
		{
			decay = (knobScaled[10] * 800.0f) + 10.0f;
		}
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
		tSimpleLivingString3_setDecay(&livStr[i], decay);
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    4dd8:	4633      	mov	r3, r6
		float decay = 0.1f;
    4dda:	eddf aa86 	vldr	s21, [pc, #536]	; 4ff4 <audioTickString1+0x294>
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    4dde:	4616      	mov	r6, r2
			decay = (knobScaled[10] * 800.0f) + 10.0f;
    4de0:	eddf ba85 	vldr	s23, [pc, #532]	; 4ff8 <audioTickString1+0x298>
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    4de4:	4652      	mov	r2, sl
		tSimpleLivingString3_setLevStrength(&livStr[i], knobScaled[0] * 0.0352872f);
    4de6:	ed9f aa85 	vldr	s20, [pc, #532]	; 4ffc <audioTickString1+0x29c>
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    4dea:	46ca      	mov	sl, r9
    4dec:	4d84      	ldr	r5, [pc, #528]	; (5000 <audioTickString1+0x2a0>)
    4dee:	46c1      	mov	r9, r8
    4df0:	f8df b250 	ldr.w	fp, [pc, #592]	; 5044 <audioTickString1+0x2e4>
    4df4:	eddf 9a83 	vldr	s19, [pc, #524]	; 5004 <audioTickString1+0x2a4>
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    4df8:	4983      	ldr	r1, [pc, #524]	; (5008 <audioTickString1+0x2a8>)
			note[i] = 0.0f;
    4dfa:	eeb0 ca68 	vmov.f32	s24, s17
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    4dfe:	ea4f 0886 	mov.w	r8, r6, lsl #2
    4e02:	eb01 0186 	add.w	r1, r1, r6, lsl #2
    4e06:	edd1 7a00 	vldr	s15, [r1]
    4e0a:	6939      	ldr	r1, [r7, #16]
    4e0c:	ecb1 7a01 	vldmia	r1!, {s14}
    4e10:	ee77 7a87 	vadd.f32	s15, s15, s14
    4e14:	6139      	str	r1, [r7, #16]
		if (note[i] < 0.0f)
    4e16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    4e1a:	ece3 7a01 	vstmia	r3!, {s15}
		if (note[i] < 0.0f)
    4e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4e22:	f100 80d3 	bmi.w	4fcc <audioTickString1+0x26c>
    4e26:	ed43 7a01 	vstr	s15, [r3, #-4]
		if (note[i] > 127.0f)
    4e2a:	fe87 cacb 	vminnm.f32	s24, s15, s22
		if (lsDecay[i])
    4e2e:	6978      	ldr	r0, [r7, #20]
			decay = (knobScaled[10] * 800.0f) + 10.0f;
    4e30:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
		float decay = 0.1f;
    4e34:	eef0 ca6a 	vmov.f32	s25, s21
    4e38:	ed03 ca01 	vstr	s24, [r3, #-4]
		if (lsDecay[i])
    4e3c:	f810 1b01 	ldrb.w	r1, [r0], #1
    4e40:	6178      	str	r0, [r7, #20]
    4e42:	b129      	cbz	r1, 4e50 <audioTickString1+0xf0>
			decay = (knobScaled[10] * 800.0f) + 10.0f;
    4e44:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
    4e48:	eee7 7a2b 	vfma.f32	s15, s14, s23
    4e4c:	eef0 ca67 	vmov.f32	s25, s15
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
    4e50:	4628      	mov	r0, r5
    4e52:	ed94 0a08 	vldr	s0, [r4, #32]
	for (int i = 0; i < numStringsThisBoard; i++)
    4e56:	3601      	adds	r6, #1
    4e58:	e9c7 3201 	strd	r3, r2, [r7, #4]
    4e5c:	4b6b      	ldr	r3, [pc, #428]	; (500c <audioTickString1+0x2ac>)
    4e5e:	4498      	add	r8, r3
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
    4e60:	f004 fbb2 	bl	95c8 <__tSimpleLivingString3_setPickupPoint_veneer>
		tSimpleLivingString3_setDecay(&livStr[i], decay);
    4e64:	4628      	mov	r0, r5
    4e66:	eeb0 0a6c 	vmov.f32	s0, s25
    4e6a:	f004 fbdd 	bl	9628 <__tSimpleLivingString3_setDecay_veneer>
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    4e6e:	4628      	mov	r0, r5
    4e70:	eeb0 0a69 	vmov.f32	s0, s19
    4e74:	f004 fbd4 	bl	9620 <__tSimpleLivingString3_setDampFreq_veneer>
		tSimpleLivingString3_setLevStrength(&livStr[i], knobScaled[0] * 0.0352872f);
    4e78:	ed94 0a00 	vldr	s0, [r4]
    4e7c:	4628      	mov	r0, r5
    4e7e:	ee20 0a0a 	vmul.f32	s0, s0, s20
    4e82:	f004 fb71 	bl	9568 <__tSimpleLivingString3_setLevStrength_veneer>

		livStr[i]->rippleGain = knobScaled[5] * -0.03f;
    4e86:	edd4 7a05 	vldr	s15, [r4, #20]
    4e8a:	eddf 6a61 	vldr	s13, [pc, #388]	; 5010 <audioTickString1+0x2b0>
		livStr[i]->invOnePlusr = 1.0f / (1.0f + livStr[i]->rippleGain);
    4e8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
		livStr[i]->rippleDelay = knobScaled[11];
    4e92:	f8d4 c02c 	ldr.w	ip, [r4, #44]	; 0x2c
		tExpSmooth_setDest(&pitchSmootherS[i], mtof(note[i]));
    4e96:	eeb0 0a4c 	vmov.f32	s0, s24
		livStr[i]->rippleGain = knobScaled[5] * -0.03f;
    4e9a:	ee67 7aa6 	vmul.f32	s15, s15, s13
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
    4e9e:	60fd      	str	r5, [r7, #12]
		livStr[i]->rippleGain = knobScaled[5] * -0.03f;
    4ea0:	f855 0b04 	ldr.w	r0, [r5], #4
		livStr[i]->invOnePlusr = 1.0f / (1.0f + livStr[i]->rippleGain);
    4ea4:	ee37 6a87 	vadd.f32	s12, s15, s14
		livStr[i]->rippleDelay = knobScaled[11];
    4ea8:	f8c0 c068 	str.w	ip, [r0, #104]	; 0x68
		livStr[i]->rippleGain = knobScaled[5] * -0.03f;
    4eac:	edc0 7a19 	vstr	s15, [r0, #100]	; 0x64
		livStr[i]->invOnePlusr = 1.0f / (1.0f + livStr[i]->rippleGain);
    4eb0:	eec7 6a06 	vdiv.f32	s13, s14, s12
    4eb4:	edc0 6a1b 	vstr	s13, [r0, #108]	; 0x6c
		tExpSmooth_setDest(&pitchSmootherS[i], mtof(note[i]));
    4eb8:	f004 fa5e 	bl	9378 <__mtof_veneer>
    4ebc:	4648      	mov	r0, r9
    4ebe:	f004 fa9f 	bl	9400 <__tExpSmooth_setDest_veneer>
		float finalFreq = tExpSmooth_tick(&pitchSmootherS[i]);
    4ec2:	4648      	mov	r0, r9
    4ec4:	f004 fb34 	bl	9530 <__tExpSmooth_tick_veneer>
		tSimpleLivingString3_setFreq(&livStr[i], finalFreq);
    4ec8:	68f9      	ldr	r1, [r7, #12]
	for (int i = 0; i < numStringsThisBoard; i++)
    4eca:	f109 0904 	add.w	r9, r9, #4
		tSimpleLivingString3_setFreq(&livStr[i], finalFreq);
    4ece:	4608      	mov	r0, r1
    4ed0:	f004 fc36 	bl	9740 <__tSimpleLivingString3_setFreq_veneer>
		float barDelta = fabsf(barInMIDI[0]-prevBarInMIDI[0]);
    4ed4:	4b4f      	ldr	r3, [pc, #316]	; (5014 <audioTickString1+0x2b4>)
    4ed6:	eddb 7a00 	vldr	s15, [fp]
		if (barDelta > 0.2f)
		{
			barDelta = 0.0f; //to avoid noise on open string glitches
		}
		tExpSmooth_setDest(&barSlideSmoother[i], barDelta);
    4eda:	4640      	mov	r0, r8
		float barDelta = fabsf(barInMIDI[0]-prevBarInMIDI[0]);
    4edc:	edd3 6a00 	vldr	s13, [r3]
		if (barDelta > 0.2f)
    4ee0:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 5018 <audioTickString1+0x2b8>
		float barDelta = fabsf(barInMIDI[0]-prevBarInMIDI[0]);
    4ee4:	ee77 7ae6 	vsub.f32	s15, s15, s13
    4ee8:	eeb0 0ae7 	vabs.f32	s0, s15
			barDelta = 0.0f; //to avoid noise on open string glitches
    4eec:	eeb4 0a47 	vcmp.f32	s0, s14
    4ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4ef4:	fe38 0a80 	vselgt.f32	s0, s17, s0
		tExpSmooth_setDest(&barSlideSmoother[i], barDelta);
    4ef8:	f004 fa82 	bl	9400 <__tExpSmooth_setDest_veneer>
		barDelta = tExpSmooth_tick(&barSlideSmoother[i]);
    4efc:	4640      	mov	r0, r8
    4efe:	f004 fb17 	bl	9530 <__tExpSmooth_tick_veneer>
		barDelta = tEnvelopeFollower_tick(&barNoiseSmoother[i], barDelta);
    4f02:	4650      	mov	r0, sl
    4f04:	f004 fa74 	bl	93f0 <__tEnvelopeFollower_tick_veneer>
		prevBarInMIDI[0] = barInMIDI[0];
    4f08:	4b42      	ldr	r3, [pc, #264]	; (5014 <audioTickString1+0x2b4>)
    4f0a:	f8db 0000 	ldr.w	r0, [fp]
		barDelta = tEnvelopeFollower_tick(&barNoiseSmoother[i], barDelta);
    4f0e:	eeb0 ca40 	vmov.f32	s24, s0
	for (int i = 0; i < numStringsThisBoard; i++)
    4f12:	f10a 0a04 	add.w	sl, sl, #4
		prevBarInMIDI[0] = barInMIDI[0];
    4f16:	6018      	str	r0, [r3, #0]
		//tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[5] * 128.0f));

		float filtNoise = tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
    4f18:	4840      	ldr	r0, [pc, #256]	; (501c <audioTickString1+0x2bc>)
    4f1a:	f004 fc25 	bl	9768 <__tNoise_tick_veneer>
    4f1e:	4840      	ldr	r0, [pc, #256]	; (5020 <audioTickString1+0x2c0>)
    4f20:	f004 fa4a 	bl	93b8 <__tVZFilter_tickEfficient_veneer>
		//filtNoise = tVZFilter_tickEfficient(&noiseFilt2, filtNoise);
		float slideNoise = filtNoise * barDelta * knobScaled[1] * 10.0f;
    4f24:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
    4f28:	edd4 7a01 	vldr	s15, [r4, #4]

		temp += tPickupNonLinearity_tick(&pu[i], tSimpleLivingString3_tick(&livStr[i], slideNoise));
    4f2c:	68f9      	ldr	r1, [r7, #12]
		float slideNoise = filtNoise * barDelta * knobScaled[1] * 10.0f;
    4f2e:	ee67 7a87 	vmul.f32	s15, s15, s14
		temp += tPickupNonLinearity_tick(&pu[i], tSimpleLivingString3_tick(&livStr[i], slideNoise));
    4f32:	4608      	mov	r0, r1
		float slideNoise = filtNoise * barDelta * knobScaled[1] * 10.0f;
    4f34:	ee67 7a8c 	vmul.f32	s15, s15, s24
		temp += tPickupNonLinearity_tick(&pu[i], tSimpleLivingString3_tick(&livStr[i], slideNoise));
    4f38:	ee27 0a80 	vmul.f32	s0, s15, s0
    4f3c:	f004 fc24 	bl	9788 <__tSimpleLivingString3_tick_veneer>
    4f40:	68ba      	ldr	r2, [r7, #8]
    4f42:	4610      	mov	r0, r2
    4f44:	60fa      	str	r2, [r7, #12]
    4f46:	f004 fbf7 	bl	9738 <__tPickupNonLinearity_tick_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    4f4a:	4b22      	ldr	r3, [pc, #136]	; (4fd4 <audioTickString1+0x274>)
    4f4c:	68fa      	ldr	r2, [r7, #12]
		temp += tPickupNonLinearity_tick(&pu[i], tSimpleLivingString3_tick(&livStr[i], slideNoise));
    4f4e:	ee38 8a00 	vadd.f32	s16, s16, s0
	for (int i = 0; i < numStringsThisBoard; i++)
    4f52:	7819      	ldrb	r1, [r3, #0]
    4f54:	3204      	adds	r2, #4
    4f56:	687b      	ldr	r3, [r7, #4]
    4f58:	42b1      	cmp	r1, r6
    4f5a:	f73f af4d 	bgt.w	4df8 <audioTickString1+0x98>
	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    4f5e:	ed9f 0a31 	vldr	s0, [pc, #196]	; 5024 <audioTickString1+0x2c4>
    4f62:	eddf 7a31 	vldr	s15, [pc, #196]	; 5028 <audioTickString1+0x2c8>
    4f66:	eef0 0a40 	vmov.f32	s1, s0
    4f6a:	ed9f 1a21 	vldr	s2, [pc, #132]	; 4ff0 <audioTickString1+0x290>
    4f6e:	eee9 0a27 	vfma.f32	s1, s18, s15
    4f72:	f004 fa91 	bl	9498 <__LEAF_clip_veneer>
	//float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
	int volIdxInt = (int) volIdx;
    4f76:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	float omAlpha = 1.0f - alpha;
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
	outVol += volumeAmps128[volIdxIntPlus] * alpha;

	//temp = input;
	temp *= outVol * masterVolFromBrain;
    4f7a:	492c      	ldr	r1, [pc, #176]	; (502c <audioTickString1+0x2cc>)
	float omAlpha = 1.0f - alpha;
    4f7c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    4f80:	4a2b      	ldr	r2, [pc, #172]	; (5030 <audioTickString1+0x2d0>)

	return temp;
}
    4f82:	371c      	adds	r7, #28
	int volIdxInt = (int) volIdx;
    4f84:	ee17 3a10 	vmov	r3, s14
	float alpha = volIdx-volIdxInt;
    4f88:	edd1 6a00 	vldr	s13, [r1]
    4f8c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    4f90:	1c59      	adds	r1, r3, #1
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    4f92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	float omAlpha = 1.0f - alpha;
    4f96:	ee77 7ac0 	vsub.f32	s15, s15, s0
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    4f9a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float alpha = volIdx-volIdxInt;
    4f9e:	ee30 0a47 	vsub.f32	s0, s0, s14
    4fa2:	ee28 8a26 	vmul.f32	s16, s16, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    4fa6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	float omAlpha = 1.0f - alpha;
    4faa:	ee77 7a87 	vadd.f32	s15, s15, s14
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    4fae:	ed93 7a00 	vldr	s14, [r3]
    4fb2:	edd2 6a00 	vldr	s13, [r2]
    4fb6:	ee20 0a26 	vmul.f32	s0, s0, s13
    4fba:	eea7 0a27 	vfma.f32	s0, s14, s15
	temp *= outVol * masterVolFromBrain;
    4fbe:	ee28 0a00 	vmul.f32	s0, s16, s0
}
    4fc2:	46bd      	mov	sp, r7
    4fc4:	ecbd 8b0a 	vpop	{d8-d12}
    4fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4fcc:	ed43 8a01 	vstr	s17, [r3, #-4]
		if (note[i] > 127.0f)
    4fd0:	e72d      	b.n	4e2e <audioTickString1+0xce>
    4fd2:	bf00      	nop
    4fd4:	200004b1 	.word	0x200004b1
    4fd8:	20004f54 	.word	0x20004f54
    4fdc:	20013f80 	.word	0x20013f80
    4fe0:	200004b4 	.word	0x200004b4
    4fe4:	00000000 	.word	0x00000000
    4fe8:	20013f50 	.word	0x20013f50
    4fec:	20005008 	.word	0x20005008
    4ff0:	42fe0000 	.word	0x42fe0000
    4ff4:	3dcccccd 	.word	0x3dcccccd
    4ff8:	44480000 	.word	0x44480000
    4ffc:	3d108950 	.word	0x3d108950
    5000:	2001cbac 	.word	0x2001cbac
    5004:	46768933 	.word	0x46768933
    5008:	20013f48 	.word	0x20013f48
    500c:	20000f14 	.word	0x20000f14
    5010:	bcf5c28f 	.word	0xbcf5c28f
    5014:	2000507c 	.word	0x2000507c
    5018:	3e4ccccd 	.word	0x3e4ccccd
    501c:	20005010 	.word	0x20005010
    5020:	2000501c 	.word	0x2000501c
    5024:	423c0000 	.word	0x423c0000
    5028:	42a00000 	.word	0x42a00000
    502c:	200004a8 	.word	0x200004a8
    5030:	2000051c 	.word	0x2000051c
    5034:	20004f84 	.word	0x20004f84
    5038:	20000f0c 	.word	0x20000f0c
    503c:	2001cbbc 	.word	0x2001cbbc
    5040:	2001cbb4 	.word	0x2001cbb4
    5044:	20000f04 	.word	0x20000f04
    5048:	f3af 8000 	nop.w
    504c:	f3af 8000 	nop.w
    5050:	f3af 8000 	nop.w
    5054:	f3af 8000 	nop.w
    5058:	f3af 8000 	nop.w
    505c:	f3af 8000 	nop.w

00005060 <audioFrameString1>:
	uint32_t tempCountFrame = DWT->CYCCNT;
    5060:	4a60      	ldr	r2, [pc, #384]	; (51e4 <audioFrameString1+0x184>)
	if (resetStringInputs)
    5062:	4b61      	ldr	r3, [pc, #388]	; (51e8 <audioFrameString1+0x188>)
{
    5064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5068:	ed2d 8b04 	vpush	{d8-d9}
	uint32_t tempCountFrame = DWT->CYCCNT;
    506c:	6856      	ldr	r6, [r2, #4]
{
    506e:	b083      	sub	sp, #12
	if (resetStringInputs)
    5070:	781a      	ldrb	r2, [r3, #0]
{
    5072:	4607      	mov	r7, r0
	if (resetStringInputs)
    5074:	2a00      	cmp	r2, #0
    5076:	d165      	bne.n	5144 <audioFrameString1+0xe4>
    5078:	4a5c      	ldr	r2, [pc, #368]	; (51ec <audioFrameString1+0x18c>)
	if (newPluck)
    507a:	6813      	ldr	r3, [r2, #0]
    507c:	b38b      	cbz	r3, 50e2 <audioFrameString1+0x82>
		for (int i = 0; i < numStringsThisBoard; i++)
    507e:	f8df a194 	ldr.w	sl, [pc, #404]	; 5214 <audioFrameString1+0x1b4>
    5082:	f89a 1000 	ldrb.w	r1, [sl]
    5086:	b351      	cbz	r1, 50de <audioFrameString1+0x7e>
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    5088:	ed9f 9a59 	vldr	s18, [pc, #356]	; 51f0 <audioFrameString1+0x190>
		for (int i = 0; i < numStringsThisBoard; i++)
    508c:	2400      	movs	r4, #0
				float amplitz = stringInputs[i] * 0.000015259021897f;
    508e:	eddf 8a59 	vldr	s17, [pc, #356]	; 51f4 <audioFrameString1+0x194>
    5092:	f8df 8184 	ldr.w	r8, [pc, #388]	; 5218 <audioFrameString1+0x1b8>
    5096:	4d58      	ldr	r5, [pc, #352]	; (51f8 <audioFrameString1+0x198>)
    5098:	f8df 9198 	ldr.w	r9, [pc, #408]	; 5234 <audioFrameString1+0x1d4>
				stringOctave[i] = octave;
    509c:	f8df b198 	ldr.w	fp, [pc, #408]	; 5238 <audioFrameString1+0x1d8>
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    50a0:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    50a4:	b29b      	uxth	r3, r3
    50a6:	b923      	cbnz	r3, 50b2 <audioFrameString1+0x52>
    50a8:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
    50ac:	b29b      	uxth	r3, r3
    50ae:	2b00      	cmp	r3, #0
    50b0:	d15e      	bne.n	5170 <audioFrameString1+0x110>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    50b2:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    50b6:	b29b      	uxth	r3, r3
    50b8:	b13b      	cbz	r3, 50ca <audioFrameString1+0x6a>
    50ba:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
    50be:	b29b      	uxth	r3, r3
    50c0:	b91b      	cbnz	r3, 50ca <audioFrameString1+0x6a>
		for (int i = 0; i < numStringsThisBoard; i++)
    50c2:	f89a 1000 	ldrb.w	r1, [sl]
				lsDecay[i] = 0;
    50c6:	f888 3000 	strb.w	r3, [r8]
			previousStringInputs[i] = stringInputs[i];
    50ca:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    50ce:	f108 0801 	add.w	r8, r8, #1
			previousStringInputs[i] = stringInputs[i];
    50d2:	b29b      	uxth	r3, r3
    50d4:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    50d8:	3401      	adds	r4, #1
    50da:	42a1      	cmp	r1, r4
    50dc:	dce0      	bgt.n	50a0 <audioFrameString1+0x40>
		newPluck = 0;
    50de:	2300      	movs	r3, #0
    50e0:	6013      	str	r3, [r2, #0]
    50e2:	4c46      	ldr	r4, [pc, #280]	; (51fc <audioFrameString1+0x19c>)
		current_sample = (int32_t)(audioTickString1() * TWO_TO_23);
    50e4:	ed9f 8a46 	vldr	s16, [pc, #280]	; 5200 <audioFrameString1+0x1a0>
    50e8:	f504 7500 	add.w	r5, r4, #512	; 0x200
    50ec:	eb04 0487 	add.w	r4, r4, r7, lsl #2
    50f0:	eb05 0587 	add.w	r5, r5, r7, lsl #2
    50f4:	f7ff fe34 	bl	4d60 <audioTickString1>
    50f8:	ee20 0a08 	vmul.f32	s0, s0, s16
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    50fc:	3408      	adds	r4, #8
		current_sample = (int32_t)(audioTickString1() * TWO_TO_23);
    50fe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    5102:	42a5      	cmp	r5, r4
		current_sample = (int32_t)(audioTickString1() * TWO_TO_23);
    5104:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[iplusbuffer + 1] = current_sample;
    5108:	e944 3302 	strd	r3, r3, [r4, #-8]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    510c:	d1f2      	bne.n	50f4 <audioFrameString1+0x94>
	if (switchStrings)
    510e:	4c3d      	ldr	r4, [pc, #244]	; (5204 <audioFrameString1+0x1a4>)
    5110:	6823      	ldr	r3, [r4, #0]
    5112:	bb4b      	cbnz	r3, 5168 <audioFrameString1+0x108>
	switchStrings = 0;
    5114:	2200      	movs	r2, #0
	timeFrame = DWT->CYCCNT - tempCountFrame;
    5116:	4b33      	ldr	r3, [pc, #204]	; (51e4 <audioFrameString1+0x184>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    5118:	483b      	ldr	r0, [pc, #236]	; (5208 <audioFrameString1+0x1a8>)
	switchStrings = 0;
    511a:	6022      	str	r2, [r4, #0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    511c:	685b      	ldr	r3, [r3, #4]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    511e:	ed90 7a00 	vldr	s14, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    5122:	1b9b      	subs	r3, r3, r6
    5124:	4939      	ldr	r1, [pc, #228]	; (520c <audioFrameString1+0x1ac>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    5126:	4a3a      	ldr	r2, [pc, #232]	; (5210 <audioFrameString1+0x1b0>)
    5128:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
    512c:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    512e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    5132:	ee67 7a87 	vmul.f32	s15, s15, s14
    5136:	edc2 7a00 	vstr	s15, [r2]
}
    513a:	b003      	add	sp, #12
    513c:	ecbd 8b04 	vpop	{d8-d9}
    5140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (int i = 0; i < numStringsThisBoard; i++)
    5144:	4a33      	ldr	r2, [pc, #204]	; (5214 <audioFrameString1+0x1b4>)
    5146:	7811      	ldrb	r1, [r2, #0]
    5148:	b141      	cbz	r1, 515c <audioFrameString1+0xfc>
			lsDecay[i] = 0;
    514a:	2200      	movs	r2, #0
    514c:	4832      	ldr	r0, [pc, #200]	; (5218 <audioFrameString1+0x1b8>)
			previousStringInputs[i] = 0;
    514e:	4d2a      	ldr	r5, [pc, #168]	; (51f8 <audioFrameString1+0x198>)
		for (int i = 0; i < numStringsThisBoard; i++)
    5150:	2901      	cmp	r1, #1
			lsDecay[i] = 0;
    5152:	7002      	strb	r2, [r0, #0]
			previousStringInputs[i] = 0;
    5154:	802a      	strh	r2, [r5, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    5156:	d001      	beq.n	515c <audioFrameString1+0xfc>
			lsDecay[i] = 0;
    5158:	7042      	strb	r2, [r0, #1]
			previousStringInputs[i] = 0;
    515a:	806a      	strh	r2, [r5, #2]
		resetStringInputs = 0;
    515c:	2100      	movs	r1, #0
		newPluck = 1;
    515e:	4a23      	ldr	r2, [pc, #140]	; (51ec <audioFrameString1+0x18c>)
		resetStringInputs = 0;
    5160:	7019      	strb	r1, [r3, #0]
		newPluck = 1;
    5162:	2301      	movs	r3, #1
    5164:	6013      	str	r3, [r2, #0]
    5166:	e788      	b.n	507a <audioFrameString1+0x1a>
		switchStringModel(switchStrings);
    5168:	6820      	ldr	r0, [r4, #0]
    516a:	f7fc fa19 	bl	15a0 <switchStringModel>
    516e:	e7d1      	b.n	5114 <audioFrameString1+0xb4>
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    5170:	492a      	ldr	r1, [pc, #168]	; (521c <audioFrameString1+0x1bc>)
    5172:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    5176:	4b2a      	ldr	r3, [pc, #168]	; (5220 <audioFrameString1+0x1c0>)
    5178:	eeb0 0a49 	vmov.f32	s0, s18
    517c:	7808      	ldrb	r0, [r1, #0]
    517e:	ed93 7a02 	vldr	s14, [r3, #8]
    5182:	4b28      	ldr	r3, [pc, #160]	; (5224 <audioFrameString1+0x1c4>)
    5184:	ee71 7a47 	vsub.f32	s15, s2, s14
    5188:	9201      	str	r2, [sp, #4]
    518a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    518e:	edd3 6a00 	vldr	s13, [r3]
    5192:	4b25      	ldr	r3, [pc, #148]	; (5228 <audioFrameString1+0x1c8>)
    5194:	eee6 7a87 	vfma.f32	s15, s13, s14
    5198:	edd3 0a00 	vldr	s1, [r3]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    519c:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
    51a0:	b29b      	uxth	r3, r3
    51a2:	ee08 3a10 	vmov	s16, r3
				stringOctave[i] = octave;
    51a6:	4b21      	ldr	r3, [pc, #132]	; (522c <audioFrameString1+0x1cc>)
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    51a8:	ee60 0aa7 	vmul.f32	s1, s1, s15
				stringOctave[i] = octave;
    51ac:	6818      	ldr	r0, [r3, #0]
    51ae:	eb0b 0384 	add.w	r3, fp, r4, lsl #2
				float amplitz = stringInputs[i] * 0.000015259021897f;
    51b2:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
				stringOctave[i] = octave;
    51b6:	6018      	str	r0, [r3, #0]
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    51b8:	f004 f96e 	bl	9498 <__LEAF_clip_veneer>
    51bc:	481c      	ldr	r0, [pc, #112]	; (5230 <audioFrameString1+0x1d0>)
    51be:	00a3      	lsls	r3, r4, #2
    51c0:	eef0 0a40 	vmov.f32	s1, s0
    51c4:	ee28 0a28 	vmul.f32	s0, s16, s17
    51c8:	4418      	add	r0, r3
    51ca:	f004 fac1 	bl	9750 <__tSimpleLivingString3_pluck_veneer>
				currentRandom++;
    51ce:	4913      	ldr	r1, [pc, #76]	; (521c <audioFrameString1+0x1bc>)
			{
    51d0:	9a01      	ldr	r2, [sp, #4]
				currentRandom++;
    51d2:	780b      	ldrb	r3, [r1, #0]
    51d4:	3301      	adds	r3, #1
    51d6:	700b      	strb	r3, [r1, #0]
				lsDecay[i] = 1;
    51d8:	2301      	movs	r3, #1
		for (int i = 0; i < numStringsThisBoard; i++)
    51da:	f89a 1000 	ldrb.w	r1, [sl]
				lsDecay[i] = 1;
    51de:	f888 3000 	strb.w	r3, [r8]
			{
    51e2:	e772      	b.n	50ca <audioFrameString1+0x6a>
    51e4:	e0001000 	.word	0xe0001000
    51e8:	2000549d 	.word	0x2000549d
    51ec:	20005014 	.word	0x20005014
    51f0:	00000000 	.word	0x00000000
    51f4:	37800080 	.word	0x37800080
    51f8:	20005084 	.word	0x20005084
    51fc:	30000000 	.word	0x30000000
    5200:	4b000000 	.word	0x4b000000
    5204:	20013f68 	.word	0x20013f68
    5208:	200004a4 	.word	0x200004a4
    520c:	20013f6c 	.word	0x20013f6c
    5210:	20004f40 	.word	0x20004f40
    5214:	200004b1 	.word	0x200004b1
    5218:	20005008 	.word	0x20005008
    521c:	20014172 	.word	0x20014172
    5220:	20004f54 	.word	0x20004f54
    5224:	2000509c 	.word	0x2000509c
    5228:	200004b4 	.word	0x200004b4
    522c:	20005020 	.word	0x20005020
    5230:	2001cbac 	.word	0x2001cbac
    5234:	20013f30 	.word	0x20013f30
    5238:	20013f50 	.word	0x20013f50
    523c:	00000000 	.word	0x00000000

00005240 <audioFreeString2>:


void __ATTR_ITCMRAM audioFreeString2()
{
    5240:	b570      	push	{r4, r5, r6, lr}
	for (int v = 0; v < numStringsThisBoard; v++)
    5242:	4e07      	ldr	r6, [pc, #28]	; (5260 <audioFreeString2+0x20>)
    5244:	7833      	ldrb	r3, [r6, #0]
    5246:	b14b      	cbz	r3, 525c <audioFreeString2+0x1c>
    5248:	4d06      	ldr	r5, [pc, #24]	; (5264 <audioFreeString2+0x24>)
    524a:	2400      	movs	r4, #0
	{
		tTString_free(&strings[v]);
    524c:	4628      	mov	r0, r5
	for (int v = 0; v < numStringsThisBoard; v++)
    524e:	3401      	adds	r4, #1
		tTString_free(&strings[v]);
    5250:	f004 f84a 	bl	92e8 <__tTString_free_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    5254:	7833      	ldrb	r3, [r6, #0]
    5256:	3504      	adds	r5, #4
    5258:	42a3      	cmp	r3, r4
    525a:	dcf7      	bgt.n	524c <audioFreeString2+0xc>
	}
}
    525c:	bd70      	pop	{r4, r5, r6, pc}
    525e:	bf00      	nop
    5260:	200004b1 	.word	0x200004b1
    5264:	2001cbc4 	.word	0x2001cbc4
    5268:	f3af 8000 	nop.w
    526c:	f3af 8000 	nop.w
    5270:	f3af 8000 	nop.w
    5274:	f3af 8000 	nop.w
    5278:	f3af 8000 	nop.w
    527c:	f3af 8000 	nop.w

00005280 <audioTickString2>:
}

uint32_t thisFrameCount = 0;

float __ATTR_ITCMRAM audioTickString2(void)
{
    5280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	float temp = 0.0f;
	float theNote[NUM_STRINGS_PER_BOARD];

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    5284:	48c8      	ldr	r0, [pc, #800]	; (55a8 <audioTickString2+0x328>)
    5286:	4ec9      	ldr	r6, [pc, #804]	; (55ac <audioTickString2+0x32c>)
    5288:	4dc9      	ldr	r5, [pc, #804]	; (55b0 <audioTickString2+0x330>)
    528a:	4634      	mov	r4, r6
    528c:	f106 0730 	add.w	r7, r6, #48	; 0x30
{
    5290:	ed2d 8b10 	vpush	{d8-d15}
    5294:	b087      	sub	sp, #28
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    5296:	f004 f94b 	bl	9530 <__tExpSmooth_tick_veneer>
    529a:	eeb0 aa40 	vmov.f32	s20, s0

	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    529e:	4628      	mov	r0, r5
	for (int i = 0; i < 12; i++)
    52a0:	3504      	adds	r5, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    52a2:	f004 f945 	bl	9530 <__tExpSmooth_tick_veneer>
    52a6:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
    52aa:	42a7      	cmp	r7, r4
    52ac:	d1f7      	bne.n	529e <audioTickString2+0x1e>
	}
	if (newPluck)
    52ae:	f8df 8334 	ldr.w	r8, [pc, #820]	; 55e4 <audioTickString2+0x364>
	{
		for (int i = 0; i < numStringsThisBoard; i++)
    52b2:	f8df 9334 	ldr.w	r9, [pc, #820]	; 55e8 <audioTickString2+0x368>
	if (newPluck)
    52b6:	f8d8 3000 	ldr.w	r3, [r8]
		for (int i = 0; i < numStringsThisBoard; i++)
    52ba:	f899 2000 	ldrb.w	r2, [r9]
	if (newPluck)
    52be:	2b00      	cmp	r3, #0
    52c0:	d04f      	beq.n	5362 <audioTickString2+0xe2>
		for (int i = 0; i < numStringsThisBoard; i++)
    52c2:	2a00      	cmp	r2, #0
    52c4:	f000 8381 	beq.w	59ca <audioTickString2+0x74a>
    52c8:	f8df a320 	ldr.w	sl, [pc, #800]	; 55ec <audioTickString2+0x36c>
    52cc:	2400      	movs	r4, #0
				}
				if (isnan(theNote[i]))
				{
					theNote[i] = 64.0f;
				}
				float finalFreq = mtofTableLookup(theNote[i]);
    52ce:	ed9f 9aca 	vldr	s18, [pc, #808]	; 55f8 <audioTickString2+0x378>
    52d2:	eddf 8aca 	vldr	s17, [pc, #808]	; 55fc <audioTickString2+0x37c>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    52d6:	ed9f 8ab7 	vldr	s16, [pc, #732]	; 55b4 <audioTickString2+0x334>
    52da:	4db7      	ldr	r5, [pc, #732]	; (55b8 <audioTickString2+0x338>)
    52dc:	4fb7      	ldr	r7, [pc, #732]	; (55bc <audioTickString2+0x33c>)
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    52de:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    52e2:	b29b      	uxth	r3, r3
    52e4:	2b00      	cmp	r3, #0
    52e6:	f040 82bb 	bne.w	5860 <audioTickString2+0x5e0>
    52ea:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
    52ee:	b29b      	uxth	r3, r3
    52f0:	2b00      	cmp	r3, #0
    52f2:	f000 82b5 	beq.w	5860 <audioTickString2+0x5e0>
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    52f6:	4ab2      	ldr	r2, [pc, #712]	; (55c0 <audioTickString2+0x340>)
				stringOctave[i] = octave;
    52f8:	4bb2      	ldr	r3, [pc, #712]	; (55c4 <audioTickString2+0x344>)
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    52fa:	eb02 0284 	add.w	r2, r2, r4, lsl #2
				stringOctave[i] = octave;
    52fe:	edd3 7a00 	vldr	s15, [r3]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    5302:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    5306:	ed92 0a00 	vldr	s0, [r2]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    530a:	fa1f fb83 	uxth.w	fp, r3
				stringOctave[i] = octave;
    530e:	4bae      	ldr	r3, [pc, #696]	; (55c8 <audioTickString2+0x348>)
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    5310:	ee37 0a80 	vadd.f32	s0, s15, s0
				stringOctave[i] = octave;
    5314:	eb03 0384 	add.w	r3, r3, r4, lsl #2
				float finalFreq = mtofTableLookup(theNote[i]);
    5318:	fe80 0a49 	vminnm.f32	s0, s0, s18
				stringOctave[i] = octave;
    531c:	edc3 7a00 	vstr	s15, [r3]
				float finalFreq = mtofTableLookup(theNote[i]);
    5320:	fe80 0a28 	vmaxnm.f32	s0, s0, s17
    5324:	f004 f998 	bl	9658 <__mtofTableLookup_veneer>
				tTString_setFreq(&strings[i], finalFreq);
    5328:	4650      	mov	r0, sl
    532a:	f004 f8e9 	bl	9500 <__tTString_setFreq_veneer>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    532e:	ee07 ba90 	vmov	s15, fp
				tTString_pluck(&strings[i],  knobScaled[2], amplitz);
    5332:	ed96 0a02 	vldr	s0, [r6, #8]
    5336:	4650      	mov	r0, sl
				float amplitz = stringInputs[i] * 0.000015259021897f;
    5338:	eef8 0ae7 	vcvt.f32.s32	s1, s15
				tTString_pluck(&strings[i],  knobScaled[2], amplitz);
    533c:	ee60 0a88 	vmul.f32	s1, s1, s16
    5340:	f004 f8a6 	bl	9490 <__tTString_pluck_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    5344:	f899 2000 	ldrb.w	r2, [r9]
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
			{
				//note off
				tTString_mute(&strings[i]);
			}
			previousStringInputs[i] = stringInputs[i];
    5348:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    534c:	f10a 0a04 	add.w	sl, sl, #4
			previousStringInputs[i] = stringInputs[i];
    5350:	b29b      	uxth	r3, r3
    5352:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    5356:	3401      	adds	r4, #1
    5358:	42a2      	cmp	r2, r4
    535a:	dcc0      	bgt.n	52de <audioTickString2+0x5e>
		}
		newPluck = 0;
    535c:	2300      	movs	r3, #0
    535e:	f8c8 3000 	str.w	r3, [r8]
	}
	for (int i = 0; i < numStringsThisBoard; i++)
    5362:	eddf 9aa6 	vldr	s19, [pc, #664]	; 55fc <audioTickString2+0x37c>
    5366:	2a00      	cmp	r2, #0
    5368:	f000 8335 	beq.w	59d6 <audioTickString2+0x756>
		float finalFreq = mtofTableLookup(theNote[i]);
		float openStringFreq = mtofTableLookup(theNote[i]-barInMIDI[i]);

		if (thisFrameCount == 0)
		{
			float harmonic = (knobScaled[6] * 8.0f) + 2.0f;
    536c:	eef0 ca00 	vmov.f32	s25, #0	; 0x40000000  2.0
    5370:	4b93      	ldr	r3, [pc, #588]	; (55c0 <audioTickString2+0x340>)
    5372:	eeb0 9a69 	vmov.f32	s18, s19
    5376:	4f95      	ldr	r7, [pc, #596]	; (55cc <audioTickString2+0x34c>)
    5378:	f8df 824c 	ldr.w	r8, [pc, #588]	; 55c8 <audioTickString2+0x348>
	for (int i = 0; i < numStringsThisBoard; i++)
    537c:	2500      	movs	r5, #0
    537e:	4c94      	ldr	r4, [pc, #592]	; (55d0 <audioTickString2+0x350>)
    5380:	f8df a268 	ldr.w	sl, [pc, #616]	; 55ec <audioTickString2+0x36c>
    5384:	eddf aa9c 	vldr	s21, [pc, #624]	; 55f8 <audioTickString2+0x378>
    5388:	f8df b264 	ldr.w	fp, [pc, #612]	; 55f0 <audioTickString2+0x370>
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.0001f, 0.00001f);
    538c:	ed9f ca91 	vldr	s24, [pc, #580]	; 55d4 <audioTickString2+0x354>
    5390:	eddf ba91 	vldr	s23, [pc, #580]	; 55d8 <audioTickString2+0x358>
    5394:	ed9f ba91 	vldr	s22, [pc, #580]	; 55dc <audioTickString2+0x35c>
    5398:	9304      	str	r3, [sp, #16]
    539a:	9703      	str	r7, [sp, #12]
    539c:	f8cd 9014 	str.w	r9, [sp, #20]
		theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    53a0:	9b04      	ldr	r3, [sp, #16]
    53a2:	46a1      	mov	r9, r4
    53a4:	ecf8 7a01 	vldmia	r8!, {s15}
    53a8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    53ac:	edd3 8a00 	vldr	s17, [r3]
    53b0:	ee78 8aa7 	vadd.f32	s17, s17, s15
    53b4:	fec8 8aea 	vminnm.f32	s17, s17, s21
    53b8:	fec8 8a89 	vmaxnm.f32	s17, s17, s18
		float finalFreq = mtofTableLookup(theNote[i]);
    53bc:	eeb0 0a68 	vmov.f32	s0, s17
    53c0:	f004 f94a 	bl	9658 <__mtofTableLookup_veneer>
		float openStringFreq = mtofTableLookup(theNote[i]-barInMIDI[i]);
    53c4:	edd4 7a00 	vldr	s15, [r4]
		float finalFreq = mtofTableLookup(theNote[i]);
    53c8:	eeb0 da40 	vmov.f32	s26, s0
		float openStringFreq = mtofTableLookup(theNote[i]-barInMIDI[i]);
    53cc:	ee38 0ae7 	vsub.f32	s0, s17, s15
    53d0:	f004 f942 	bl	9658 <__mtofTableLookup_veneer>
		if (thisFrameCount == 0)
    53d4:	9b03      	ldr	r3, [sp, #12]
		float openStringFreq = mtofTableLookup(theNote[i]-barInMIDI[i]);
    53d6:	eeb0 8a40 	vmov.f32	s16, s0
		if (thisFrameCount == 0)
    53da:	681f      	ldr	r7, [r3, #0]
    53dc:	2f00      	cmp	r7, #0
    53de:	f000 81ff 	beq.w	57e0 <audioTickString2+0x560>
			}

		}
		//tTString_setTensionGain(&strings[i],knobScaled[4]);

		tTString_setPhantomHarmonicsGain(&strings[i],knobScaled[8]);
    53e2:	ed96 0a08 	vldr	s0, [r6, #32]
    53e6:	4650      	mov	r0, sl
    53e8:	f004 f8fa 	bl	95e0 <__tTString_setPhantomHarmonicsGain_veneer>
		tTString_setPickupPos(&strings[i],knobScaled[9]);
    53ec:	ed96 0a09 	vldr	s0, [r6, #36]	; 0x24
    53f0:	4650      	mov	r0, sl

		tTString_setPickupModAmp(&strings[i],knobScaled[11]);
		tTString_setFreq(&strings[i], finalFreq);


		Lfloat filterScaling = fastPowf(2.0f, knobScaled[3] * 4.0f - 2.0f); //0.5-2.0f
    53f2:	eef8 8a00 	vmov.f32	s17, #128	; 0xc0000000 -2.0
		tTString_setPickupPos(&strings[i],knobScaled[9]);
    53f6:	f003 ff8b 	bl	9310 <__tTString_setPickupPos_veneer>
		tTString_setPickupModFreq(&strings[i],(knobScaled[10]));
    53fa:	ed96 0a0a 	vldr	s0, [r6, #40]	; 0x28
    53fe:	4650      	mov	r0, sl
		Lfloat filterScaling = fastPowf(2.0f, knobScaled[3] * 4.0f - 2.0f); //0.5-2.0f
    5400:	eef1 da00 	vmov.f32	s27, #16	; 0x40800000  4.0
		tTString_setPickupModFreq(&strings[i],(knobScaled[10]));
    5404:	f003 ff60 	bl	92c8 <__tTString_setPickupModFreq_veneer>
		tTString_setPickupModAmp(&strings[i],knobScaled[11]);
    5408:	ed96 0a0b 	vldr	s0, [r6, #44]	; 0x2c
    540c:	4650      	mov	r0, sl
    540e:	f004 f81b 	bl	9448 <__tTString_setPickupModAmp_veneer>
		tTString_setFreq(&strings[i], finalFreq);
    5412:	eeb0 0a4d 	vmov.f32	s0, s26
    5416:	4650      	mov	r0, sl
    5418:	f004 f872 	bl	9500 <__tTString_setFreq_veneer>
		Lfloat filterScaling = fastPowf(2.0f, knobScaled[3] * 4.0f - 2.0f); //0.5-2.0f
    541c:	eef0 0a68 	vmov.f32	s1, s17
    5420:	edd6 7a03 	vldr	s15, [r6, #12]
    5424:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    5428:	eee7 0aad 	vfma.f32	s1, s15, s27
    542c:	f003 ff44 	bl	92b8 <__fastPowf_veneer>
		Lfloat decayScaling = fastPowf(2.0f, knobScaled[0] * 4.0f - 2.0f); //0.5-2.0f
    5430:	eef0 0a68 	vmov.f32	s1, s17
    5434:	edd6 7a00 	vldr	s15, [r6]
		Lfloat filterScaling = fastPowf(2.0f, knobScaled[3] * 4.0f - 2.0f); //0.5-2.0f
    5438:	eeb0 da40 	vmov.f32	s26, s0
		Lfloat decayScaling = fastPowf(2.0f, knobScaled[0] * 4.0f - 2.0f); //0.5-2.0f
    543c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    5440:	eee7 0aad 	vfma.f32	s1, s15, s27
    5444:	f003 ff38 	bl	92b8 <__fastPowf_veneer>
		float alpha = 0.0f;
		float oneMinusAlpha = 1.0f;
		for (int i = 0; i < 9; i++)
		{
			//find the closest open string frequency and interpolate
			if (stringParams[i][0][0] > openStringFreq)
    5448:	eddb 0a00 	vldr	s1, [fp]
		Lfloat decayScaling = fastPowf(2.0f, knobScaled[0] * 4.0f - 2.0f); //0.5-2.0f
    544c:	eef0 da40 	vmov.f32	s27, s0
			if (stringParams[i][0][0] > openStringFreq)
    5450:	eeb4 8ae0 	vcmpe.f32	s16, s1
    5454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5458:	f100 819c 	bmi.w	5794 <audioTickString2+0x514>
		float oneMinusAlpha = 1.0f;
    545c:	eeb7 ea00 	vmov.f32	s28, #112	; 0x3f800000  1.0
			{
				if (stringParams[i+1][0][0] < openStringFreq)
    5460:	eddb 6a09 	vldr	s13, [fp, #36]	; 0x24
		float alpha = 0.0f;
    5464:	eef0 8a49 	vmov.f32	s17, s18
			if (stringParams[i][0][0] > openStringFreq)
    5468:	eeb4 8ae6 	vcmpe.f32	s16, s13
    546c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5470:	f100 8184 	bmi.w	577c <audioTickString2+0x4fc>
				if (stringParams[i+1][0][0] < openStringFreq)
    5474:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
    5478:	eddb 0a12 	vldr	s1, [fp, #72]	; 0x48
    547c:	2200      	movs	r2, #0
			if (stringParams[i][0][0] > openStringFreq)
    547e:	eeb4 8ae0 	vcmpe.f32	s16, s1
				if (stringParams[i+1][0][0] < openStringFreq)
    5482:	eddb 6a1b 	vldr	s13, [fp, #108]	; 0x6c
			if (stringParams[i][0][0] > openStringFreq)
    5486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    548a:	d505      	bpl.n	5498 <audioTickString2+0x218>
				if (stringParams[i+1][0][0] < openStringFreq)
    548c:	eeb4 8ae6 	vcmpe.f32	s16, s13
    5490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5494:	f300 820a 	bgt.w	58ac <audioTickString2+0x62c>
			if (stringParams[i][0][0] > openStringFreq)
    5498:	eeb4 8ae6 	vcmpe.f32	s16, s13
				if (stringParams[i+1][0][0] < openStringFreq)
    549c:	eddb 0a24 	vldr	s1, [fp, #144]	; 0x90
			if (stringParams[i][0][0] > openStringFreq)
    54a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    54a4:	d505      	bpl.n	54b2 <audioTickString2+0x232>
				if (stringParams[i+1][0][0] < openStringFreq)
    54a6:	eeb4 8ae0 	vcmpe.f32	s16, s1
    54aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    54ae:	f300 81e9 	bgt.w	5884 <audioTickString2+0x604>
			if (stringParams[i][0][0] > openStringFreq)
    54b2:	eeb4 8ae0 	vcmpe.f32	s16, s1
				if (stringParams[i+1][0][0] < openStringFreq)
    54b6:	eddb 6a2d 	vldr	s13, [fp, #180]	; 0xb4
			if (stringParams[i][0][0] > openStringFreq)
    54ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    54be:	d505      	bpl.n	54cc <audioTickString2+0x24c>
				if (stringParams[i+1][0][0] < openStringFreq)
    54c0:	eeb4 8ae6 	vcmpe.f32	s16, s13
    54c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    54c8:	f300 826d 	bgt.w	59a6 <audioTickString2+0x726>
			if (stringParams[i][0][0] > openStringFreq)
    54cc:	eeb4 8ae6 	vcmpe.f32	s16, s13
				if (stringParams[i+1][0][0] < openStringFreq)
    54d0:	eddb 0a36 	vldr	s1, [fp, #216]	; 0xd8
			if (stringParams[i][0][0] > openStringFreq)
    54d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    54d8:	d505      	bpl.n	54e6 <audioTickString2+0x266>
				if (stringParams[i+1][0][0] < openStringFreq)
    54da:	eeb4 8ae0 	vcmpe.f32	s16, s1
    54de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    54e2:	f300 824c 	bgt.w	597e <audioTickString2+0x6fe>
			if (stringParams[i][0][0] > openStringFreq)
    54e6:	eeb4 8ae0 	vcmpe.f32	s16, s1
				if (stringParams[i+1][0][0] < openStringFreq)
    54ea:	eddb 6a3f 	vldr	s13, [fp, #252]	; 0xfc
			if (stringParams[i][0][0] > openStringFreq)
    54ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    54f2:	d505      	bpl.n	5500 <audioTickString2+0x280>
				if (stringParams[i+1][0][0] < openStringFreq)
    54f4:	eeb4 8ae6 	vcmpe.f32	s16, s13
    54f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    54fc:	f300 822d 	bgt.w	595a <audioTickString2+0x6da>
			if (stringParams[i][0][0] > openStringFreq)
    5500:	eeb4 8ae6 	vcmpe.f32	s16, s13
				if (stringParams[i+1][0][0] < openStringFreq)
    5504:	eddb 0a48 	vldr	s1, [fp, #288]	; 0x120
			if (stringParams[i][0][0] > openStringFreq)
    5508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    550c:	d505      	bpl.n	551a <audioTickString2+0x29a>
				if (stringParams[i+1][0][0] < openStringFreq)
    550e:	eeb4 8ae0 	vcmpe.f32	s16, s1
    5512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5516:	f300 820c 	bgt.w	5932 <audioTickString2+0x6b2>
			if (stringParams[i][0][0] > openStringFreq)
    551a:	eeb4 8ae0 	vcmpe.f32	s16, s1
    551e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5522:	d50a      	bpl.n	553a <audioTickString2+0x2ba>
				if (stringParams[i+1][0][0] < openStringFreq)
    5524:	ed9b 1a51 	vldr	s2, [fp, #324]	; 0x144
    5528:	eeb4 8ac1 	vcmpe.f32	s16, s2
    552c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5530:	f300 81f1 	bgt.w	5916 <audioTickString2+0x696>
    5534:	eeb2 fa04 	vmov.f32	s30, #36	; 0x41200000  10.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
					oneMinusAlpha = 1.0f - alpha;
				}
				else if (i == 8)
				{
					which = 9;
    5538:	2209      	movs	r2, #9
				}
			}
		}

		float barHeight = barInMIDI[i] / 12.0f;
    553a:	edd4 7a00 	vldr	s15, [r4]

		uint32_t barHeightInt = (uint32_t)barHeight;
		float barHeightAlpha = barHeight - barHeightInt;
		float barHeightOneMinusAlpha = 1.0f - barHeightAlpha;
    553e:	eef7 ea00 	vmov.f32	s29, #112	; 0x3f800000  1.0
		float barHeight = barInMIDI[i] / 12.0f;
    5542:	eddf 6a27 	vldr	s13, [pc, #156]	; 55e0 <audioTickString2+0x360>
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    5546:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
    554a:	eeb0 0a49 	vmov.f32	s0, s18
    554e:	9202      	str	r2, [sp, #8]
		float barHeight = barInMIDI[i] / 12.0f;
    5550:	ee67 7aa6 	vmul.f32	s15, s15, s13
		uint32_t barHeightInt = (uint32_t)barHeight;
    5554:	eebc 7ae7 	vcvt.u32.f32	s14, s15
		float barHeightOneMinusAlpha = 1.0f - barHeightAlpha;
    5558:	ee7e eae7 	vsub.f32	s29, s29, s15
		uint32_t barHeightInt = (uint32_t)barHeight;
    555c:	ee17 1a10 	vmov	r1, s14
		float barHeightAlpha = barHeight - barHeightInt;
    5560:	eef8 6a47 	vcvt.f32.u32	s13, s14
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    5564:	ed8d 7a01 	vstr	s14, [sp, #4]
    5568:	1c4b      	adds	r3, r1, #1
		float barHeightAlpha = barHeight - barHeightInt;
    556a:	ee77 fae6 	vsub.f32	s31, s15, s13
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    556e:	ee00 3a90 	vmov	s1, r3
		float barHeightOneMinusAlpha = 1.0f - barHeightAlpha;
    5572:	ee7e eaa6 	vadd.f32	s29, s29, s13
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    5576:	eef8 0a60 	vcvt.f32.u32	s1, s1
    557a:	f003 ff8d 	bl	9498 <__LEAF_clip_veneer>
    557e:	eef0 7a40 	vmov.f32	s15, s0

		uint32_t whichPlusOne = LEAF_clip(0, which+1, 9);
    5582:	eeb2 1a02 	vmov.f32	s2, #34	; 0x41100000  9.0
    5586:	eef0 0a4f 	vmov.f32	s1, s30
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    558a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		uint32_t whichPlusOne = LEAF_clip(0, which+1, 9);
    558e:	eeb0 0a49 	vmov.f32	s0, s18
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    5592:	ee17 7a90 	vmov	r7, s15
		uint32_t whichPlusOne = LEAF_clip(0, which+1, 9);
    5596:	f003 ff7f 	bl	9498 <__LEAF_clip_veneer>
			float decayRatio2 = stringParams[0][barHeightIntPlusOne][2] / stringParams[0][barHeightIntPlusOne][0];

			decayTime = (decayRatio1 * barHeightOneMinusAlpha + decayRatio2 * barHeightAlpha) * openStringFreq;
		}

		if (which == 9)
    559a:	9a02      	ldr	r2, [sp, #8]
    559c:	9901      	ldr	r1, [sp, #4]
    559e:	2a09      	cmp	r2, #9
    55a0:	f000 8105 	beq.w	57ae <audioTickString2+0x52e>
    55a4:	e02c      	b.n	5600 <audioTickString2+0x380>
    55a6:	bf00      	nop
    55a8:	20013f80 	.word	0x20013f80
    55ac:	20004f54 	.word	0x20004f54
    55b0:	20004f84 	.word	0x20004f84
    55b4:	37800080 	.word	0x37800080
    55b8:	20005084 	.word	0x20005084
    55bc:	20013f30 	.word	0x20013f30
    55c0:	20013f48 	.word	0x20013f48
    55c4:	20005020 	.word	0x20005020
    55c8:	20013f50 	.word	0x20013f50
    55cc:	2001cbcc 	.word	0x2001cbcc
    55d0:	20000f04 	.word	0x20000f04
    55d4:	3727c5ac 	.word	0x3727c5ac
    55d8:	38d1b717 	.word	0x38d1b717
    55dc:	42980000 	.word	0x42980000
    55e0:	3daaaaab 	.word	0x3daaaaab
    55e4:	20005014 	.word	0x20005014
    55e8:	200004b1 	.word	0x200004b1
    55ec:	2001cbc4 	.word	0x2001cbc4
    55f0:	20000728 	.word	0x20000728
    55f4:	42a00000 	.word	0x42a00000
    55f8:	42fe0000 	.word	0x42fe0000
    55fc:	00000000 	.word	0x00000000
		uint32_t whichPlusOne = LEAF_clip(0, which+1, 9);
    5600:	eefc 7ac0 	vcvt.u32.f32	s15, s0
			decayTime = (decay1 * barHeightOneMinusAlpha + decay2 * barHeightAlpha) ;
		}

		else
		{
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    5604:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
    5608:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    560c:	eb07 0347 	add.w	r3, r7, r7, lsl #1
		uint32_t whichPlusOne = LEAF_clip(0, which+1, 9);
    5610:	ee17 1a90 	vmov	r1, s15
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    5614:	0092      	lsls	r2, r2, #2
    5616:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    561a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    561e:	0089      	lsls	r1, r1, #2
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    5620:	445b      	add	r3, fp
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    5622:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    5626:	eb01 018c 	add.w	r1, r1, ip, lsl #2
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    562a:	ed93 5a01 	vldr	s10, [r3, #4]
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    562e:	445a      	add	r2, fp
    5630:	4459      	add	r1, fp
			filterFreq = filterFreq1 * barHeightOneMinusAlpha + filterFreq2 * barHeightAlpha;
			Lfloat decayTime1 = stringParams[which][barHeightInt][2] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][2] * alpha;
			Lfloat decayTime2 = stringParams[which][barHeightIntPlusOne][2] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][2] * alpha;
    5632:	edd3 5a02 	vldr	s11, [r3, #8]
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    5636:	edd2 3a01 	vldr	s7, [r2, #4]
    563a:	ed91 6a01 	vldr	s12, [r1, #4]
			Lfloat decayTime1 = stringParams[which][barHeightInt][2] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][2] * alpha;
    563e:	edd1 6a02 	vldr	s13, [r1, #8]
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    5642:	eb07 01c7 	add.w	r1, r7, r7, lsl #3
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    5646:	ee28 6a86 	vmul.f32	s12, s17, s12
			Lfloat decayTime1 = stringParams[which][barHeightInt][2] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][2] * alpha;
    564a:	ed92 4a02 	vldr	s8, [r2, #8]
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    564e:	0089      	lsls	r1, r1, #2
			Lfloat decayTime1 = stringParams[which][barHeightInt][2] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][2] * alpha;
    5650:	ee68 6aa6 	vmul.f32	s13, s17, s13
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    5654:	eb01 018c 	add.w	r1, r1, ip, lsl #2
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    5658:	eea3 6a8e 	vfma.f32	s12, s7, s28
			Lfloat decayTime1 = stringParams[which][barHeightInt][2] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][2] * alpha;
    565c:	eee4 6a0e 	vfma.f32	s13, s8, s28
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    5660:	4459      	add	r1, fp
    5662:	edd1 7a01 	vldr	s15, [r1, #4]
			Lfloat decayTime2 = stringParams[which][barHeightIntPlusOne][2] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][2] * alpha;
    5666:	edd1 4a02 	vldr	s9, [r1, #8]
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    566a:	ee68 7aa7 	vmul.f32	s15, s17, s15
			Lfloat decayTime2 = stringParams[which][barHeightIntPlusOne][2] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][2] * alpha;
    566e:	ee68 8aa4 	vmul.f32	s17, s17, s9
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    5672:	eee5 7a0e 	vfma.f32	s15, s10, s28
			Lfloat decayTime2 = stringParams[which][barHeightIntPlusOne][2] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][2] * alpha;
    5676:	eee5 8a8e 	vfma.f32	s17, s11, s28
			filterFreq = filterFreq1 * barHeightOneMinusAlpha + filterFreq2 * barHeightAlpha;
    567a:	ee6f 7aa7 	vmul.f32	s15, s31, s15
			decayTime = decayTime1 * barHeightOneMinusAlpha + decayTime2 * barHeightAlpha;
    567e:	ee2f 0aa8 	vmul.f32	s0, s31, s17
			filterFreq = filterFreq1 * barHeightOneMinusAlpha + filterFreq2 * barHeightAlpha;
    5682:	eeee 7a86 	vfma.f32	s15, s29, s12
			decayTime = decayTime1 * barHeightOneMinusAlpha + decayTime2 * barHeightAlpha;
    5686:	eeae 0aa6 	vfma.f32	s0, s29, s13
			filterFreq = filterFreq1 * barHeightOneMinusAlpha + filterFreq2 * barHeightAlpha;
    568a:	eef0 8a67 	vmov.f32	s17, s15
		}

		tTString_setDecayInSeconds(&strings[i],decayTime * decayScaling);
    568e:	4650      	mov	r0, sl
    5690:	ee20 0a2d 	vmul.f32	s0, s0, s27
    5694:	f004 f860 	bl	9758 <__tTString_setDecayInSeconds_veneer>
		tTString_setFilterFreqDirectly(&strings[i], filterFreq * filterScaling);
    5698:	4650      	mov	r0, sl
    569a:	ee28 0a8d 	vmul.f32	s0, s17, s26
	for (int i = 0; i < numStringsThisBoard; i++)
    569e:	3501      	adds	r5, #1
		tTString_setFilterFreqDirectly(&strings[i], filterFreq * filterScaling);
    56a0:	f003 ff8e 	bl	95c0 <__tTString_setFilterFreqDirectly_veneer>

		//tTString_setPickupAmount(&strings[i], knobScaled[7]);
		tTString_setBarPosition(&strings[i],barInMIDI[i]);
    56a4:	4650      	mov	r0, sl
    56a6:	ed99 0a00 	vldr	s0, [r9]
    56aa:	3404      	adds	r4, #4
    56ac:	f003 fdf4 	bl	9298 <__tTString_setBarPosition_veneer>
		//tTString_setBarDrive(&strings[i],knobScaled[4]);
		tTString_setOpenStringFrequency(&strings[i], openStringFreq);
    56b0:	4650      	mov	r0, sl
    56b2:	eeb0 0a48 	vmov.f32	s0, s16
    56b6:	f003 ffdf 	bl	9678 <__tTString_setOpenStringFrequency_veneer>

		tTString_setRippleDepth(&strings[i],knobScaled[7]);
    56ba:	4650      	mov	r0, sl
    56bc:	ed96 0a07 	vldr	s0, [r6, #28]
    56c0:	f004 f816 	bl	96f0 <__tTString_setRippleDepth_veneer>
		tTString_setFeedbackStrength(&strings[i],knobScaled[4]);
    56c4:	4650      	mov	r0, sl
    56c6:	ed96 0a04 	vldr	s0, [r6, #16]
    56ca:	f003 ff85 	bl	95d8 <__tTString_setFeedbackStrength_veneer>
		tTString_setFeedbackReactionSpeed(&strings[i],knobScaled[5]);
    56ce:	4650      	mov	r0, sl
    56d0:	ed96 0a05 	vldr	s0, [r6, #20]
    56d4:	f003 fef8 	bl	94c8 <__tTString_setFeedbackReactionSpeed_veneer>
		//tTString_setPickupFilterFreq(&strings[i],knobScaled[6]*6000.0f + 1000.0f);
		//tTString_setPickupFilterQ(&strings[i],knobScaled[7]+0.5f);
		//temp += (tSimpleLivingString5_tick(&strings[i], slideNoise));//(filtNoise * env)));// + (prevSamp[i] * (0.001f * knobScaled[5]))));//filtNoise * theEnv) * env);
		temp += tTString_tick(&strings[i]);
    56d8:	4650      	mov	r0, sl
    56da:	f003 ff3d 	bl	9558 <__tTString_tick_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    56de:	9b05      	ldr	r3, [sp, #20]
		temp += tTString_tick(&strings[i]);
    56e0:	ee79 9a80 	vadd.f32	s19, s19, s0
	for (int i = 0; i < numStringsThisBoard; i++)
    56e4:	f10a 0a04 	add.w	sl, sl, #4
    56e8:	781b      	ldrb	r3, [r3, #0]
    56ea:	42ab      	cmp	r3, r5
    56ec:	f73f ae58 	bgt.w	53a0 <audioTickString2+0x120>
    56f0:	9f03      	ldr	r7, [sp, #12]
	}
	thisFrameCount = (thisFrameCount + 1) & 63;
    56f2:	683b      	ldr	r3, [r7, #0]
	//float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
	float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
    56f4:	ed5f 0a41 	vldr	s1, [pc, #-260]	; 55f4 <audioTickString2+0x374>
	thisFrameCount = (thisFrameCount + 1) & 63;
    56f8:	3301      	adds	r3, #1
	float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
    56fa:	ed1f 1a41 	vldr	s2, [pc, #-260]	; 55f8 <audioTickString2+0x378>
    56fe:	ee6a 0a20 	vmul.f32	s1, s20, s1
    5702:	ed1f 0a42 	vldr	s0, [pc, #-264]	; 55fc <audioTickString2+0x37c>
	thisFrameCount = (thisFrameCount + 1) & 63;
    5706:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    570a:	603b      	str	r3, [r7, #0]
	float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
    570c:	f003 fec4 	bl	9498 <__LEAF_clip_veneer>
    5710:	eef0 7a40 	vmov.f32	s15, s0
	float omAlpha = 1.0f - alpha;
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
	outVol += volumeAmps128[volIdxIntPlus] * alpha;

	//temp *= outVol;
	temp *= outVol * masterVolFromBrain;
    5714:	4bb1      	ldr	r3, [pc, #708]	; (59dc <audioTickString2+0x75c>)

	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    5716:	eddf 6ab2 	vldr	s13, [pc, #712]	; 59e0 <audioTickString2+0x760>
	float omAlpha = 1.0f - alpha;
    571a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    571e:	edd3 0a00 	vldr	s1, [r3]
    5722:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
	int volIdxInt = (int) volIdx;
    5726:	eebd 7ae7 	vcvt.s32.f32	s14, s15
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    572a:	4aae      	ldr	r2, [pc, #696]	; (59e4 <audioTickString2+0x764>)
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    572c:	ee60 0aa6 	vmul.f32	s1, s1, s13
	int volIdxInt = (int) volIdx;
    5730:	ee17 3a10 	vmov	r3, s14
	float omAlpha = 1.0f - alpha;
    5734:	ee31 7a67 	vsub.f32	s14, s2, s15
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    5738:	ee60 0aa9 	vmul.f32	s1, s1, s19
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    573c:	1c59      	adds	r1, r3, #1
	float alpha = volIdx-volIdxInt;
    573e:	ee06 3a90 	vmov	s13, r3
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    5742:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	float alpha = volIdx-volIdxInt;
    5746:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    574a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    574e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	float alpha = volIdx-volIdxInt;
    5752:	ee77 7ae6 	vsub.f32	s15, s15, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    5756:	ed92 6a00 	vldr	s12, [r2]
	float omAlpha = 1.0f - alpha;
    575a:	ee37 7a26 	vadd.f32	s14, s14, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    575e:	edd3 6a00 	vldr	s13, [r3]
    5762:	ee67 7a86 	vmul.f32	s15, s15, s12
    5766:	eee6 7a87 	vfma.f32	s15, s13, s14
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    576a:	ee60 0aa7 	vmul.f32	s1, s1, s15

}
    576e:	b007      	add	sp, #28
    5770:	ecbd 8b10 	vpop	{d8-d15}
    5774:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    5778:	f003 be8e 	b.w	9498 <__LEAF_clip_veneer>
				if (stringParams[i+1][0][0] < openStringFreq)
    577c:	eddb 0a12 	vldr	s1, [fp, #72]	; 0x48
    5780:	eeb4 8ae0 	vcmpe.f32	s16, s1
    5784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5788:	f300 80b1 	bgt.w	58ee <audioTickString2+0x66e>
    578c:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
    5790:	2200      	movs	r2, #0
    5792:	e674      	b.n	547e <audioTickString2+0x1fe>
    5794:	eddb 6a09 	vldr	s13, [fp, #36]	; 0x24
    5798:	eeb4 8ae6 	vcmpe.f32	s16, s13
    579c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    57a0:	f300 8096 	bgt.w	58d0 <audioTickString2+0x650>
		float oneMinusAlpha = 1.0f;
    57a4:	eeb7 ea00 	vmov.f32	s28, #112	; 0x3f800000  1.0
		float alpha = 0.0f;
    57a8:	eef0 8a49 	vmov.f32	s17, s18
    57ac:	e65c      	b.n	5468 <audioTickString2+0x1e8>
			float freq2 = stringParams[9][barHeightIntPlusOne][1];
    57ae:	eb07 0347 	add.w	r3, r7, r7, lsl #1
			float freq1 = stringParams[9][barHeightInt][1];
    57b2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
			float freq2 = stringParams[9][barHeightIntPlusOne][1];
    57b6:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
			float freq1 = stringParams[9][barHeightInt][1];
    57ba:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
			filterFreq = (freq1 * barHeightOneMinusAlpha + freq2 * barHeightAlpha);
    57be:	edd3 8a52 	vldr	s17, [r3, #328]	; 0x148
			decayTime = (decay1 * barHeightOneMinusAlpha + decay2 * barHeightAlpha) ;
    57c2:	edd3 6a53 	vldr	s13, [r3, #332]	; 0x14c
			filterFreq = (freq1 * barHeightOneMinusAlpha + freq2 * barHeightAlpha);
    57c6:	ee6f 8aa8 	vmul.f32	s17, s31, s17
    57ca:	ed91 7a52 	vldr	s14, [r1, #328]	; 0x148
			decayTime = (decay1 * barHeightOneMinusAlpha + decay2 * barHeightAlpha) ;
    57ce:	ee2f 0aa6 	vmul.f32	s0, s31, s13
    57d2:	edd1 7a53 	vldr	s15, [r1, #332]	; 0x14c
			filterFreq = (freq1 * barHeightOneMinusAlpha + freq2 * barHeightAlpha);
    57d6:	eeee 8a87 	vfma.f32	s17, s29, s14
			decayTime = (decay1 * barHeightOneMinusAlpha + decay2 * barHeightAlpha) ;
    57da:	eeae 0aa7 	vfma.f32	s0, s29, s15
    57de:	e756      	b.n	568e <audioTickString2+0x40e>
			float harmonic = (knobScaled[6] * 8.0f) + 2.0f;
    57e0:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
    57e4:	ed96 7a06 	vldr	s14, [r6, #24]
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.0001f, 0.00001f);
    57e8:	eeb0 0a68 	vmov.f32	s0, s17
			float harmonic = (knobScaled[6] * 8.0f) + 2.0f;
    57ec:	eef0 8a6c 	vmov.f32	s17, s25
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.0001f, 0.00001f);
    57f0:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
    57f4:	eeb0 2a4c 	vmov.f32	s4, s24
    57f8:	eef0 1a6b 	vmov.f32	s3, s23
    57fc:	eeb0 1a4b 	vmov.f32	s2, s22
			float harmonic = (knobScaled[6] * 8.0f) + 2.0f;
    5800:	eee7 8a27 	vfma.f32	s17, s14, s15
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.0001f, 0.00001f);
    5804:	f003 fe0c 	bl	9420 <__LEAF_map_veneer>
			if (knobScaled[1] > 0.05f)
    5808:	edd6 0a01 	vldr	s1, [r6, #4]
    580c:	eddf 7a76 	vldr	s15, [pc, #472]	; 59e8 <audioTickString2+0x768>
    5810:	eef4 0ae7 	vcmpe.f32	s1, s15
    5814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5818:	dd16      	ble.n	5848 <audioTickString2+0x5c8>
				inHarm = LEAF_clip(0.00000001f, inHarm * knobScaled[1], 0.01f);
    581a:	ed9f 1a74 	vldr	s2, [pc, #464]	; 59ec <audioTickString2+0x76c>
    581e:	ee60 0a80 	vmul.f32	s1, s1, s0
    5822:	ed9f 0a73 	vldr	s0, [pc, #460]	; 59f0 <audioTickString2+0x770>
    5826:	f003 fe37 	bl	9498 <__LEAF_clip_veneer>
				tTString_setHarmonicity(&strings[i], inHarm, finalFreq);
    582a:	eef0 0a4d 	vmov.f32	s1, s26
    582e:	4650      	mov	r0, sl
    5830:	f003 fe8e 	bl	9550 <__tTString_setHarmonicity_veneer>
				tTString_setInharmonic(&strings[i], 1);
    5834:	4650      	mov	r0, sl
    5836:	2101      	movs	r1, #1
    5838:	f003 fd42 	bl	92c0 <__tTString_setInharmonic_veneer>
				tTString_setHarmonic(&strings[i],harmonic);
    583c:	eeb0 0a68 	vmov.f32	s0, s17
    5840:	4650      	mov	r0, sl
    5842:	f003 fd81 	bl	9348 <__tTString_setHarmonic_veneer>
    5846:	e5cc      	b.n	53e2 <audioTickString2+0x162>
				tTString_setInharmonic(&strings[i], 0);
    5848:	4650      	mov	r0, sl
    584a:	4639      	mov	r1, r7
    584c:	f003 fd38 	bl	92c0 <__tTString_setInharmonic_veneer>
				tTString_setHarmonic(&strings[i],(uint32_t)harmonic);
    5850:	eebc 0ae8 	vcvt.u32.f32	s0, s17
    5854:	4650      	mov	r0, sl
    5856:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    585a:	f003 fd75 	bl	9348 <__tTString_setHarmonic_veneer>
    585e:	e5c0      	b.n	53e2 <audioTickString2+0x162>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    5860:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    5864:	b29b      	uxth	r3, r3
    5866:	2b00      	cmp	r3, #0
    5868:	f43f ad6e 	beq.w	5348 <audioTickString2+0xc8>
    586c:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
    5870:	b29b      	uxth	r3, r3
    5872:	2b00      	cmp	r3, #0
    5874:	f47f ad68 	bne.w	5348 <audioTickString2+0xc8>
				tTString_mute(&strings[i]);
    5878:	4650      	mov	r0, sl
    587a:	f003 fe19 	bl	94b0 <__tTString_mute_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    587e:	f899 2000 	ldrb.w	r2, [r9]
    5882:	e561      	b.n	5348 <audioTickString2+0xc8>
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5884:	eeb0 1a60 	vmov.f32	s2, s1
    5888:	eeb0 0a48 	vmov.f32	s0, s16
    588c:	eef0 0a66 	vmov.f32	s1, s13
    5890:	f003 fd26 	bl	92e0 <__LEAF_mapToZeroToOneOutput_veneer>
					oneMinusAlpha = 1.0f - alpha;
    5894:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
			if (stringParams[i][0][0] > openStringFreq)
    5898:	eeb1 fa00 	vmov.f32	s30, #16	; 0x40800000  4.0
    589c:	eddb 0a24 	vldr	s1, [fp, #144]	; 0x90
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    58a0:	eef0 8a40 	vmov.f32	s17, s0
					which = i;
    58a4:	2203      	movs	r2, #3
					oneMinusAlpha = 1.0f - alpha;
    58a6:	ee37 ea40 	vsub.f32	s28, s14, s0
    58aa:	e602      	b.n	54b2 <audioTickString2+0x232>
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    58ac:	eeb0 1a66 	vmov.f32	s2, s13
    58b0:	eeb0 0a48 	vmov.f32	s0, s16
    58b4:	f003 fd14 	bl	92e0 <__LEAF_mapToZeroToOneOutput_veneer>
					oneMinusAlpha = 1.0f - alpha;
    58b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
			if (stringParams[i][0][0] > openStringFreq)
    58bc:	eeb0 fa08 	vmov.f32	s30, #8	; 0x40400000  3.0
    58c0:	eddb 6a1b 	vldr	s13, [fp, #108]	; 0x6c
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    58c4:	eef0 8a40 	vmov.f32	s17, s0
					which = i;
    58c8:	2202      	movs	r2, #2
					oneMinusAlpha = 1.0f - alpha;
    58ca:	ee37 ea40 	vsub.f32	s28, s14, s0
    58ce:	e5e3      	b.n	5498 <audioTickString2+0x218>
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    58d0:	eeb0 1a66 	vmov.f32	s2, s13
    58d4:	eeb0 0a48 	vmov.f32	s0, s16
    58d8:	f003 fd02 	bl	92e0 <__LEAF_mapToZeroToOneOutput_veneer>
					oneMinusAlpha = 1.0f - alpha;
    58dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    58e0:	eef0 8a40 	vmov.f32	s17, s0
			if (stringParams[i][0][0] > openStringFreq)
    58e4:	eddb 6a09 	vldr	s13, [fp, #36]	; 0x24
					oneMinusAlpha = 1.0f - alpha;
    58e8:	ee37 ea40 	vsub.f32	s28, s14, s0
    58ec:	e5bc      	b.n	5468 <audioTickString2+0x1e8>
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    58ee:	eeb0 1a60 	vmov.f32	s2, s1
    58f2:	eeb0 0a48 	vmov.f32	s0, s16
    58f6:	eef0 0a66 	vmov.f32	s1, s13
    58fa:	f003 fcf1 	bl	92e0 <__LEAF_mapToZeroToOneOutput_veneer>
					oneMinusAlpha = 1.0f - alpha;
    58fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
			if (stringParams[i][0][0] > openStringFreq)
    5902:	eeb0 fa00 	vmov.f32	s30, #0	; 0x40000000  2.0
    5906:	eddb 0a12 	vldr	s1, [fp, #72]	; 0x48
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    590a:	eef0 8a40 	vmov.f32	s17, s0
					which = i;
    590e:	2201      	movs	r2, #1
					oneMinusAlpha = 1.0f - alpha;
    5910:	ee37 ea40 	vsub.f32	s28, s14, s0
    5914:	e5b3      	b.n	547e <audioTickString2+0x1fe>
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5916:	eeb0 0a48 	vmov.f32	s0, s16
    591a:	f003 fce1 	bl	92e0 <__LEAF_mapToZeroToOneOutput_veneer>
					oneMinusAlpha = 1.0f - alpha;
    591e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    5922:	eeb2 fa02 	vmov.f32	s30, #34	; 0x41100000  9.0
					which = i;
    5926:	2208      	movs	r2, #8
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5928:	eef0 8a40 	vmov.f32	s17, s0
					oneMinusAlpha = 1.0f - alpha;
    592c:	ee37 ea40 	vsub.f32	s28, s14, s0
    5930:	e603      	b.n	553a <audioTickString2+0x2ba>
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5932:	eeb0 1a60 	vmov.f32	s2, s1
    5936:	eeb0 0a48 	vmov.f32	s0, s16
    593a:	eef0 0a66 	vmov.f32	s1, s13
    593e:	f003 fccf 	bl	92e0 <__LEAF_mapToZeroToOneOutput_veneer>
					oneMinusAlpha = 1.0f - alpha;
    5942:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
			if (stringParams[i][0][0] > openStringFreq)
    5946:	eeb2 fa00 	vmov.f32	s30, #32	; 0x41000000  8.0
    594a:	eddb 0a48 	vldr	s1, [fp, #288]	; 0x120
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    594e:	eef0 8a40 	vmov.f32	s17, s0
					which = i;
    5952:	2207      	movs	r2, #7
					oneMinusAlpha = 1.0f - alpha;
    5954:	ee37 ea40 	vsub.f32	s28, s14, s0
    5958:	e5df      	b.n	551a <audioTickString2+0x29a>
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    595a:	eeb0 1a66 	vmov.f32	s2, s13
    595e:	eeb0 0a48 	vmov.f32	s0, s16
    5962:	f003 fcbd 	bl	92e0 <__LEAF_mapToZeroToOneOutput_veneer>
					oneMinusAlpha = 1.0f - alpha;
    5966:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
			if (stringParams[i][0][0] > openStringFreq)
    596a:	eeb1 fa0c 	vmov.f32	s30, #28	; 0x40e00000  7.0
    596e:	eddb 6a3f 	vldr	s13, [fp, #252]	; 0xfc
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5972:	eef0 8a40 	vmov.f32	s17, s0
					which = i;
    5976:	2206      	movs	r2, #6
					oneMinusAlpha = 1.0f - alpha;
    5978:	ee37 ea40 	vsub.f32	s28, s14, s0
    597c:	e5c0      	b.n	5500 <audioTickString2+0x280>
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    597e:	eeb0 1a60 	vmov.f32	s2, s1
    5982:	eeb0 0a48 	vmov.f32	s0, s16
    5986:	eef0 0a66 	vmov.f32	s1, s13
    598a:	f003 fca9 	bl	92e0 <__LEAF_mapToZeroToOneOutput_veneer>
					oneMinusAlpha = 1.0f - alpha;
    598e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
			if (stringParams[i][0][0] > openStringFreq)
    5992:	eeb1 fa08 	vmov.f32	s30, #24	; 0x40c00000  6.0
    5996:	eddb 0a36 	vldr	s1, [fp, #216]	; 0xd8
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    599a:	eef0 8a40 	vmov.f32	s17, s0
					which = i;
    599e:	2205      	movs	r2, #5
					oneMinusAlpha = 1.0f - alpha;
    59a0:	ee37 ea40 	vsub.f32	s28, s14, s0
    59a4:	e59f      	b.n	54e6 <audioTickString2+0x266>
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    59a6:	eeb0 1a66 	vmov.f32	s2, s13
    59aa:	eeb0 0a48 	vmov.f32	s0, s16
    59ae:	f003 fc97 	bl	92e0 <__LEAF_mapToZeroToOneOutput_veneer>
					oneMinusAlpha = 1.0f - alpha;
    59b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
			if (stringParams[i][0][0] > openStringFreq)
    59b6:	eeb1 fa04 	vmov.f32	s30, #20	; 0x40a00000  5.0
    59ba:	eddb 6a2d 	vldr	s13, [fp, #180]	; 0xb4
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    59be:	eef0 8a40 	vmov.f32	s17, s0
					which = i;
    59c2:	2204      	movs	r2, #4
					oneMinusAlpha = 1.0f - alpha;
    59c4:	ee37 ea40 	vsub.f32	s28, s14, s0
    59c8:	e580      	b.n	54cc <audioTickString2+0x24c>
		newPluck = 0;
    59ca:	eddf 9a0a 	vldr	s19, [pc, #40]	; 59f4 <audioTickString2+0x774>
    59ce:	4f0a      	ldr	r7, [pc, #40]	; (59f8 <audioTickString2+0x778>)
    59d0:	f8c8 2000 	str.w	r2, [r8]
	for (int i = 0; i < numStringsThisBoard; i++)
    59d4:	e68d      	b.n	56f2 <audioTickString2+0x472>
    59d6:	4f08      	ldr	r7, [pc, #32]	; (59f8 <audioTickString2+0x778>)
    59d8:	e68b      	b.n	56f2 <audioTickString2+0x472>
    59da:	bf00      	nop
    59dc:	200004a8 	.word	0x200004a8
    59e0:	3f7ae148 	.word	0x3f7ae148
    59e4:	2000051c 	.word	0x2000051c
    59e8:	3d4ccccd 	.word	0x3d4ccccd
    59ec:	3c23d70a 	.word	0x3c23d70a
    59f0:	322bcc77 	.word	0x322bcc77
    59f4:	00000000 	.word	0x00000000
    59f8:	2001cbcc 	.word	0x2001cbcc
    59fc:	f3af 8000 	nop.w

00005a00 <audioFrameString2>:
{
    5a00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		uint32_t tempCountFrame = DWT->CYCCNT;
    5a04:	4b2a      	ldr	r3, [pc, #168]	; (5ab0 <audioFrameString2+0xb0>)
{
    5a06:	4680      	mov	r8, r0
		if (resetStringInputs)
    5a08:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 5ad8 <audioFrameString2+0xd8>
{
    5a0c:	ed2d 8b02 	vpush	{d8}
		uint32_t tempCountFrame = DWT->CYCCNT;
    5a10:	685e      	ldr	r6, [r3, #4]
		if (resetStringInputs)
    5a12:	f89b 3000 	ldrb.w	r3, [fp]
    5a16:	b1bb      	cbz	r3, 5a48 <audioFrameString2+0x48>
			for (int i = 0; i < numStringsThisBoard; i++)
    5a18:	4f26      	ldr	r7, [pc, #152]	; (5ab4 <audioFrameString2+0xb4>)
    5a1a:	783b      	ldrb	r3, [r7, #0]
    5a1c:	b173      	cbz	r3, 5a3c <audioFrameString2+0x3c>
    5a1e:	2400      	movs	r4, #0
    5a20:	4d25      	ldr	r5, [pc, #148]	; (5ab8 <audioFrameString2+0xb8>)
    5a22:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 5adc <audioFrameString2+0xdc>
				previousStringInputs[i] = 0;
    5a26:	46a1      	mov	r9, r4
				tTString_mute(&strings[i]);
    5a28:	4628      	mov	r0, r5
			for (int i = 0; i < numStringsThisBoard; i++)
    5a2a:	3504      	adds	r5, #4
				tTString_mute(&strings[i]);
    5a2c:	f003 fd40 	bl	94b0 <__tTString_mute_veneer>
			for (int i = 0; i < numStringsThisBoard; i++)
    5a30:	783b      	ldrb	r3, [r7, #0]
				previousStringInputs[i] = 0;
    5a32:	f82a 9014 	strh.w	r9, [sl, r4, lsl #1]
			for (int i = 0; i < numStringsThisBoard; i++)
    5a36:	3401      	adds	r4, #1
    5a38:	42a3      	cmp	r3, r4
    5a3a:	dcf5      	bgt.n	5a28 <audioFrameString2+0x28>
			resetStringInputs = 0;
    5a3c:	2200      	movs	r2, #0
			newPluck = 1;
    5a3e:	4b1f      	ldr	r3, [pc, #124]	; (5abc <audioFrameString2+0xbc>)
			resetStringInputs = 0;
    5a40:	f88b 2000 	strb.w	r2, [fp]
			newPluck = 1;
    5a44:	2201      	movs	r2, #1
    5a46:	601a      	str	r2, [r3, #0]
    5a48:	4c1d      	ldr	r4, [pc, #116]	; (5ac0 <audioFrameString2+0xc0>)
			current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    5a4a:	ed9f 8a1e 	vldr	s16, [pc, #120]	; 5ac4 <audioFrameString2+0xc4>
    5a4e:	f504 7500 	add.w	r5, r4, #512	; 0x200
    5a52:	eb04 0488 	add.w	r4, r4, r8, lsl #2
    5a56:	eb05 0588 	add.w	r5, r5, r8, lsl #2
    5a5a:	f7ff fc11 	bl	5280 <audioTickString2>
    5a5e:	ee20 0a08 	vmul.f32	s0, s0, s16
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    5a62:	3408      	adds	r4, #8
			current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    5a64:	eefd 7ac0 	vcvt.s32.f32	s15, s0
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    5a68:	42ac      	cmp	r4, r5
			current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    5a6a:	ee17 3a90 	vmov	r3, s15
			audioOutBuffer[iplusbuffer + 1] = current_sample;
    5a6e:	e944 3302 	strd	r3, r3, [r4, #-8]
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    5a72:	d1f2      	bne.n	5a5a <audioFrameString2+0x5a>
		if (switchStrings)
    5a74:	4c14      	ldr	r4, [pc, #80]	; (5ac8 <audioFrameString2+0xc8>)
    5a76:	6823      	ldr	r3, [r4, #0]
    5a78:	b9b3      	cbnz	r3, 5aa8 <audioFrameString2+0xa8>
		switchStrings = 0;
    5a7a:	2200      	movs	r2, #0
		timeFrame = DWT->CYCCNT - tempCountFrame;
    5a7c:	4b0c      	ldr	r3, [pc, #48]	; (5ab0 <audioFrameString2+0xb0>)
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    5a7e:	4813      	ldr	r0, [pc, #76]	; (5acc <audioFrameString2+0xcc>)
		switchStrings = 0;
    5a80:	6022      	str	r2, [r4, #0]
		timeFrame = DWT->CYCCNT - tempCountFrame;
    5a82:	685b      	ldr	r3, [r3, #4]
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    5a84:	ed90 7a00 	vldr	s14, [r0]
		timeFrame = DWT->CYCCNT - tempCountFrame;
    5a88:	1b9b      	subs	r3, r3, r6
    5a8a:	4911      	ldr	r1, [pc, #68]	; (5ad0 <audioFrameString2+0xd0>)
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    5a8c:	4a11      	ldr	r2, [pc, #68]	; (5ad4 <audioFrameString2+0xd4>)
    5a8e:	ee07 3a90 	vmov	s15, r3
		timeFrame = DWT->CYCCNT - tempCountFrame;
    5a92:	600b      	str	r3, [r1, #0]
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    5a94:	eef8 7a67 	vcvt.f32.u32	s15, s15
    5a98:	ee67 7a87 	vmul.f32	s15, s15, s14
    5a9c:	edc2 7a00 	vstr	s15, [r2]
}
    5aa0:	ecbd 8b02 	vpop	{d8}
    5aa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switchStringModel(switchStrings);
    5aa8:	6820      	ldr	r0, [r4, #0]
    5aaa:	f7fb fd79 	bl	15a0 <switchStringModel>
    5aae:	e7e4      	b.n	5a7a <audioFrameString2+0x7a>
    5ab0:	e0001000 	.word	0xe0001000
    5ab4:	200004b1 	.word	0x200004b1
    5ab8:	2001cbc4 	.word	0x2001cbc4
    5abc:	20005014 	.word	0x20005014
    5ac0:	30000000 	.word	0x30000000
    5ac4:	4b000000 	.word	0x4b000000
    5ac8:	20013f68 	.word	0x20013f68
    5acc:	200004a4 	.word	0x200004a4
    5ad0:	20013f6c 	.word	0x20013f6c
    5ad4:	20004f40 	.word	0x20004f40
    5ad8:	2000549d 	.word	0x2000549d
    5adc:	20005084 	.word	0x20005084

00005ae0 <oscillator_tick>:
{
    5ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		oscOuts[0][i][string] = 0.0f;
    5ae4:	0082      	lsls	r2, r0, #2
    5ae6:	4cd1      	ldr	r4, [pc, #836]	; (5e2c <oscillator_tick+0x34c>)
    5ae8:	1c85      	adds	r5, r0, #2
    5aea:	f04f 0b00 	mov.w	fp, #0
		oscOuts[1][i][string] = 0.0f;
    5aee:	f100 0108 	add.w	r1, r0, #8
		oscOuts[0][i][string] = 0.0f;
    5af2:	1d07      	adds	r7, r0, #4
    5af4:	eb04 0a80 	add.w	sl, r4, r0, lsl #2
		oscOuts[1][i][string] = 0.0f;
    5af8:	1d86      	adds	r6, r0, #6
{
    5afa:	4603      	mov	r3, r0
		oscOuts[1][i][string] = 0.0f;
    5afc:	300a      	adds	r0, #10
	for (int osc = 0; osc < oscToTick; osc++)
    5afe:	f8df 9350 	ldr.w	r9, [pc, #848]	; 5e50 <oscillator_tick+0x370>
		oscOuts[1][i][string] = 0.0f;
    5b02:	eb04 0686 	add.w	r6, r4, r6, lsl #2
{
    5b06:	ed2d 8b04 	vpush	{d8-d9}
    5b0a:	b089      	sub	sp, #36	; 0x24
		oscOuts[0][i][string] = 0.0f;
    5b0c:	f8ca b000 	str.w	fp, [sl]
		oscOuts[1][i][string] = 0.0f;
    5b10:	f8c6 b000 	str.w	fp, [r6]
		oscOuts[0][i][string] = 0.0f;
    5b14:	9200      	str	r2, [sp, #0]
    5b16:	eb04 0285 	add.w	r2, r4, r5, lsl #2
		oscOuts[1][i][string] = 0.0f;
    5b1a:	9101      	str	r1, [sp, #4]
		oscOuts[0][i][string] = 0.0f;
    5b1c:	f8c2 b000 	str.w	fp, [r2]
		oscOuts[1][i][string] = 0.0f;
    5b20:	eb04 0281 	add.w	r2, r4, r1, lsl #2
    5b24:	9002      	str	r0, [sp, #8]
    5b26:	f8c2 b000 	str.w	fp, [r2]
		oscOuts[0][i][string] = 0.0f;
    5b2a:	eb04 0287 	add.w	r2, r4, r7, lsl #2
    5b2e:	f8c2 b000 	str.w	fp, [r2]
		oscOuts[1][i][string] = 0.0f;
    5b32:	eb04 0280 	add.w	r2, r4, r0, lsl #2
    5b36:	f8c2 b000 	str.w	fp, [r2]
	for (int osc = 0; osc < oscToTick; osc++)
    5b3a:	f899 2000 	ldrb.w	r2, [r9]
    5b3e:	b19a      	cbz	r2, 5b68 <oscillator_tick+0x88>
		if (oscOn[osc])
    5b40:	f8df 8310 	ldr.w	r8, [pc, #784]	; 5e54 <oscillator_tick+0x374>
    5b44:	eeb0 8a40 	vmov.f32	s16, s0
    5b48:	f898 0000 	ldrb.w	r0, [r8]
    5b4c:	b988      	cbnz	r0, 5b72 <oscillator_tick+0x92>
	for (int osc = 0; osc < oscToTick; osc++)
    5b4e:	2a01      	cmp	r2, #1
    5b50:	d90a      	bls.n	5b68 <oscillator_tick+0x88>
		if (oscOn[osc])
    5b52:	f898 1001 	ldrb.w	r1, [r8, #1]
    5b56:	2900      	cmp	r1, #0
    5b58:	d16e      	bne.n	5c38 <oscillator_tick+0x158>
	for (int osc = 0; osc < oscToTick; osc++)
    5b5a:	2a02      	cmp	r2, #2
    5b5c:	d904      	bls.n	5b68 <oscillator_tick+0x88>
		if (oscOn[osc])
    5b5e:	f898 2002 	ldrb.w	r2, [r8, #2]
    5b62:	2a00      	cmp	r2, #0
    5b64:	f040 80e6 	bne.w	5d34 <oscillator_tick+0x254>
}
    5b68:	b009      	add	sp, #36	; 0x24
    5b6a:	ecbd 8b04 	vpop	{d8-d9}
    5b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			float freqOffset= oscParams[OscFreq].realVal[string];
    5b72:	00a9      	lsls	r1, r5, #2
    5b74:	4aae      	ldr	r2, [pc, #696]	; (5e30 <oscillator_tick+0x350>)
    5b76:	9305      	str	r3, [sp, #20]
    5b78:	440a      	add	r2, r1
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    5b7a:	9b00      	ldr	r3, [sp, #0]
    5b7c:	48ad      	ldr	r0, [pc, #692]	; (5e34 <oscillator_tick+0x354>)
			float freqToSmooth = (note + (fine*0.01f));
    5b7e:	ed92 7ab6 	vldr	s14, [r2, #728]	; 0x2d8
    5b82:	eddf 7aad 	vldr	s15, [pc, #692]	; 5e38 <oscillator_tick+0x358>
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    5b86:	4418      	add	r0, r3
			float shape = oscParams[OscShape].realVal[string];
    5b88:	edd2 0ac4 	vldr	s1, [r2, #784]	; 0x310
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    5b8c:	eea7 0a27 	vfma.f32	s0, s14, s15
			float filterSend = oscParams[OscFilterSend].realVal[string];
    5b90:	edd2 8afc 	vldr	s17, [r2, #1008]	; 0x3f0
			float freqOffset= oscParams[OscFreq].realVal[string];
    5b94:	edd2 9abd 	vldr	s19, [r2, #756]	; 0x2f4
			float amp = oscParams[OscAmp].realVal[string];
    5b98:	ed92 9acb 	vldr	s18, [r2, #812]	; 0x32c
			float shape = oscParams[OscShape].realVal[string];
    5b9c:	edcd 0a04 	vstr	s1, [sp, #16]
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    5ba0:	9003      	str	r0, [sp, #12]
    5ba2:	f003 fc2d 	bl	9400 <__tExpSmooth_setDest_veneer>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    5ba6:	9803      	ldr	r0, [sp, #12]
    5ba8:	f003 fcc2 	bl	9530 <__tExpSmooth_tick_veneer>
    5bac:	9b00      	ldr	r3, [sp, #0]
    5bae:	4aa3      	ldr	r2, [pc, #652]	; (5e3c <oscillator_tick+0x35c>)
    5bb0:	441a      	add	r2, r3
    5bb2:	edd2 7a00 	vldr	s15, [r2]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    5bb6:	ee30 0a27 	vadd.f32	s0, s0, s15
    5bba:	f003 fd4d 	bl	9658 <__mtofTableLookup_veneer>
    5bbe:	9b00      	ldr	r3, [sp, #0]
    5bc0:	4a9f      	ldr	r2, [pc, #636]	; (5e40 <oscillator_tick+0x360>)
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    5bc2:	a807      	add	r0, sp, #28
    5bc4:	499f      	ldr	r1, [pc, #636]	; (5e44 <oscillator_tick+0x364>)
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    5bc6:	441a      	add	r2, r3
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    5bc8:	9b05      	ldr	r3, [sp, #20]
			float sample = 0.0f;
    5bca:	f8cd b01c 	str.w	fp, [sp, #28]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    5bce:	edd2 7a00 	vldr	s15, [r2]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    5bd2:	2200      	movs	r2, #0
    5bd4:	f8d1 b000 	ldr.w	fp, [r1]
    5bd8:	eee0 9a27 	vfma.f32	s19, s0, s15
    5bdc:	4611      	mov	r1, r2
    5bde:	eddd 0a04 	vldr	s1, [sp, #16]
    5be2:	9303      	str	r3, [sp, #12]
    5be4:	eeb0 0a69 	vmov.f32	s0, s19
    5be8:	47d8      	blx	fp
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5bea:	4a91      	ldr	r2, [pc, #580]	; (5e30 <oscillator_tick+0x350>)
    5bec:	9b03      	ldr	r3, [sp, #12]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5bee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			sample *= amp;
    5bf2:	ed9d 7a07 	vldr	s14, [sp, #28]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5bf6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
			sourceValues[osc][string] = sample;
    5bfa:	9900      	ldr	r1, [sp, #0]
			sample *= amp;
    5bfc:	ee29 7a07 	vmul.f32	s14, s18, s14
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5c00:	ed92 6aaa 	vldr	s12, [r2, #680]	; 0x2a8
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5c04:	ee77 7ae8 	vsub.f32	s15, s15, s17
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    5c08:	4a8f      	ldr	r2, [pc, #572]	; (5e48 <oscillator_tick+0x368>)
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5c0a:	ee68 8a86 	vmul.f32	s17, s17, s12
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    5c0e:	edd2 6a00 	vldr	s13, [r2]
			sourceValues[osc][string] = sample;
    5c12:	4a8e      	ldr	r2, [pc, #568]	; (5e4c <oscillator_tick+0x36c>)
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    5c14:	ee67 6a26 	vmul.f32	s13, s14, s13
			sourceValues[osc][string] = sample;
    5c18:	440a      	add	r2, r1
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5c1a:	ee67 7aa6 	vmul.f32	s15, s15, s13
			sourceValues[osc][string] = sample;
    5c1e:	ed82 7a00 	vstr	s14, [r2]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5c22:	ee68 8aa6 	vmul.f32	s17, s17, s13
	for (int osc = 0; osc < oscToTick; osc++)
    5c26:	f899 2000 	ldrb.w	r2, [r9]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5c2a:	ee67 7a86 	vmul.f32	s15, s15, s12
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5c2e:	edca 8a00 	vstr	s17, [sl]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5c32:	edc6 7a00 	vstr	s15, [r6]
    5c36:	e78a      	b.n	5b4e <oscillator_tick+0x6e>
			float freqOffset= oscParams[OscFreq].realVal[string];
    5c38:	4e7d      	ldr	r6, [pc, #500]	; (5e30 <oscillator_tick+0x350>)
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    5c3a:	eeb0 0a48 	vmov.f32	s0, s16
    5c3e:	487d      	ldr	r0, [pc, #500]	; (5e34 <oscillator_tick+0x354>)
			float freqOffset= oscParams[OscFreq].realVal[string];
    5c40:	ea4f 0a85 	mov.w	sl, r5, lsl #2
			float fine = oscParams[OscFine].realVal[string];
    5c44:	f206 4244 	addw	r2, r6, #1092	; 0x444
			float freqToSmooth = (note + (fine*0.01f));
    5c48:	eddf 7a7b 	vldr	s15, [pc, #492]	; 5e38 <oscillator_tick+0x358>
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    5c4c:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    5c50:	9304      	str	r3, [sp, #16]
			float fine = oscParams[OscFine].realVal[string];
    5c52:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    5c56:	9000      	str	r0, [sp, #0]
			float freqToSmooth = (note + (fine*0.01f));
    5c58:	ed92 7a00 	vldr	s14, [r2]
			float freqOffset= oscParams[OscFreq].realVal[string];
    5c5c:	f506 628c 	add.w	r2, r6, #1120	; 0x460
    5c60:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    5c64:	eea7 0a27 	vfma.f32	s0, s14, s15
			float freqOffset= oscParams[OscFreq].realVal[string];
    5c68:	edd2 9a00 	vldr	s19, [r2]
			float shape = oscParams[OscShape].realVal[string];
    5c6c:	f206 427c 	addw	r2, r6, #1148	; 0x47c
    5c70:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    5c74:	edd2 0a00 	vldr	s1, [r2]
			float amp = oscParams[OscAmp].realVal[string];
    5c78:	f506 6293 	add.w	r2, r6, #1176	; 0x498
    5c7c:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			float shape = oscParams[OscShape].realVal[string];
    5c80:	edcd 0a03 	vstr	s1, [sp, #12]
			float amp = oscParams[OscAmp].realVal[string];
    5c84:	ed92 9a00 	vldr	s18, [r2]
			float filterSend = oscParams[OscFilterSend].realVal[string];
    5c88:	f206 525c 	addw	r2, r6, #1372	; 0x55c
    5c8c:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    5c90:	edd2 8a00 	vldr	s17, [r2]
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    5c94:	f003 fbb4 	bl	9400 <__tExpSmooth_setDest_veneer>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    5c98:	9800      	ldr	r0, [sp, #0]
    5c9a:	f003 fc49 	bl	9530 <__tExpSmooth_tick_veneer>
    5c9e:	4a67      	ldr	r2, [pc, #412]	; (5e3c <oscillator_tick+0x35c>)
    5ca0:	4452      	add	r2, sl
    5ca2:	edd2 7a00 	vldr	s15, [r2]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    5ca6:	ee30 0a27 	vadd.f32	s0, s0, s15
    5caa:	f003 fcd5 	bl	9658 <__mtofTableLookup_veneer>
    5cae:	4a64      	ldr	r2, [pc, #400]	; (5e40 <oscillator_tick+0x360>)
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    5cb0:	9b04      	ldr	r3, [sp, #16]
    5cb2:	2101      	movs	r1, #1
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    5cb4:	4452      	add	r2, sl
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    5cb6:	a807      	add	r0, sp, #28
    5cb8:	eddd 0a03 	vldr	s1, [sp, #12]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    5cbc:	edd2 7a00 	vldr	s15, [r2]
			float sample = 0.0f;
    5cc0:	2200      	movs	r2, #0
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    5cc2:	9300      	str	r3, [sp, #0]
    5cc4:	eee0 9a27 	vfma.f32	s19, s0, s15
			float sample = 0.0f;
    5cc8:	9207      	str	r2, [sp, #28]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    5cca:	4a5e      	ldr	r2, [pc, #376]	; (5e44 <oscillator_tick+0x364>)
    5ccc:	f8d2 b004 	ldr.w	fp, [r2, #4]
    5cd0:	2200      	movs	r2, #0
    5cd2:	eeb0 0a69 	vmov.f32	s0, s19
    5cd6:	47d8      	blx	fp
			sample *= amp;
    5cd8:	ed9d 7a07 	vldr	s14, [sp, #28]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5cdc:	9b01      	ldr	r3, [sp, #4]
    5cde:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    5ce2:	4859      	ldr	r0, [pc, #356]	; (5e48 <oscillator_tick+0x368>)
			sample *= amp;
    5ce4:	ee29 7a07 	vmul.f32	s14, s18, s14
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5ce8:	eb04 0183 	add.w	r1, r4, r3, lsl #2
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5cec:	9b00      	ldr	r3, [sp, #0]
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    5cee:	edd0 6a00 	vldr	s13, [r0]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5cf2:	ee77 7ae8 	vsub.f32	s15, s15, s17
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5cf6:	f203 1005 	addw	r0, r3, #261	; 0x105
	for (int osc = 0; osc < oscToTick; osc++)
    5cfa:	f899 2000 	ldrb.w	r2, [r9]
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    5cfe:	ee67 6a26 	vmul.f32	s13, s14, s13
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5d02:	eb06 0680 	add.w	r6, r6, r0, lsl #2
	for (int osc = 0; osc < oscToTick; osc++)
    5d06:	2a02      	cmp	r2, #2
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5d08:	ee67 7aa6 	vmul.f32	s15, s15, s13
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5d0c:	ed96 6a00 	vldr	s12, [r6]
    5d10:	ee68 8a86 	vmul.f32	s17, s17, s12
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5d14:	ee67 7a86 	vmul.f32	s15, s15, s12
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5d18:	ee68 8aa6 	vmul.f32	s17, s17, s13
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5d1c:	edc1 7a00 	vstr	s15, [r1]
			sourceValues[osc][string] = sample;
    5d20:	494a      	ldr	r1, [pc, #296]	; (5e4c <oscillator_tick+0x36c>)
    5d22:	4451      	add	r1, sl
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5d24:	44a2      	add	sl, r4
			sourceValues[osc][string] = sample;
    5d26:	ed81 7a00 	vstr	s14, [r1]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5d2a:	edca 8a00 	vstr	s17, [sl]
	for (int osc = 0; osc < oscToTick; osc++)
    5d2e:	f63f af16 	bhi.w	5b5e <oscillator_tick+0x7e>
    5d32:	e719      	b.n	5b68 <oscillator_tick+0x88>
			float freqOffset= oscParams[OscFreq].realVal[string];
    5d34:	4e3e      	ldr	r6, [pc, #248]	; (5e30 <oscillator_tick+0x350>)
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    5d36:	eeb0 0a48 	vmov.f32	s0, s16
    5d3a:	483e      	ldr	r0, [pc, #248]	; (5e34 <oscillator_tick+0x354>)
			float fine = oscParams[OscFine].realVal[string];
    5d3c:	f506 62b6 	add.w	r2, r6, #1456	; 0x5b0
			float freqToSmooth = (note + (fine*0.01f));
    5d40:	eddf 7a3d 	vldr	s15, [pc, #244]	; 5e38 <oscillator_tick+0x358>
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    5d44:	eb00 0087 	add.w	r0, r0, r7, lsl #2
    5d48:	9303      	str	r3, [sp, #12]
			float fine = oscParams[OscFine].realVal[string];
    5d4a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    5d4e:	9000      	str	r0, [sp, #0]
    5d50:	00bf      	lsls	r7, r7, #2
			float freqToSmooth = (note + (fine*0.01f));
    5d52:	ed92 7a00 	vldr	s14, [r2]
			float freqOffset= oscParams[OscFreq].realVal[string];
    5d56:	f206 52cc 	addw	r2, r6, #1484	; 0x5cc
    5d5a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    5d5e:	eea7 0a27 	vfma.f32	s0, s14, s15
			float freqOffset= oscParams[OscFreq].realVal[string];
    5d62:	ed92 9a00 	vldr	s18, [r2]
			float shape = oscParams[OscShape].realVal[string];
    5d66:	f506 62bd 	add.w	r2, r6, #1512	; 0x5e8
    5d6a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    5d6e:	edd2 0a00 	vldr	s1, [r2]
			float amp = oscParams[OscAmp].realVal[string];
    5d72:	f206 6204 	addw	r2, r6, #1540	; 0x604
    5d76:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			float shape = oscParams[OscShape].realVal[string];
    5d7a:	edcd 0a01 	vstr	s1, [sp, #4]
			float amp = oscParams[OscAmp].realVal[string];
    5d7e:	ed92 8a00 	vldr	s16, [r2]
			float filterSend = oscParams[OscFilterSend].realVal[string];
    5d82:	f506 62d9 	add.w	r2, r6, #1736	; 0x6c8
    5d86:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    5d8a:	edd2 8a00 	vldr	s17, [r2]
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    5d8e:	f003 fb37 	bl	9400 <__tExpSmooth_setDest_veneer>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    5d92:	9800      	ldr	r0, [sp, #0]
    5d94:	f003 fbcc 	bl	9530 <__tExpSmooth_tick_veneer>
    5d98:	4a28      	ldr	r2, [pc, #160]	; (5e3c <oscillator_tick+0x35c>)
    5d9a:	443a      	add	r2, r7
    5d9c:	edd2 7a00 	vldr	s15, [r2]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    5da0:	ee30 0a27 	vadd.f32	s0, s0, s15
    5da4:	f003 fc58 	bl	9658 <__mtofTableLookup_veneer>
    5da8:	4a25      	ldr	r2, [pc, #148]	; (5e40 <oscillator_tick+0x360>)
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    5daa:	9b03      	ldr	r3, [sp, #12]
    5dac:	a807      	add	r0, sp, #28
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    5dae:	443a      	add	r2, r7
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    5db0:	eddd 0a01 	vldr	s1, [sp, #4]
    5db4:	2102      	movs	r1, #2
    5db6:	9300      	str	r3, [sp, #0]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    5db8:	edd2 7a00 	vldr	s15, [r2]
			float sample = 0.0f;
    5dbc:	2200      	movs	r2, #0
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    5dbe:	eea0 9a27 	vfma.f32	s18, s0, s15
			float sample = 0.0f;
    5dc2:	9207      	str	r2, [sp, #28]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    5dc4:	4a1f      	ldr	r2, [pc, #124]	; (5e44 <oscillator_tick+0x364>)
    5dc6:	6895      	ldr	r5, [r2, #8]
    5dc8:	2200      	movs	r2, #0
    5dca:	eeb0 0a49 	vmov.f32	s0, s18
    5dce:	47a8      	blx	r5
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5dd0:	9b00      	ldr	r3, [sp, #0]
			sample *= amp;
    5dd2:	ed9d 7a07 	vldr	s14, [sp, #28]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5dd6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5dda:	f503 73b0 	add.w	r3, r3, #352	; 0x160
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    5dde:	491a      	ldr	r1, [pc, #104]	; (5e48 <oscillator_tick+0x368>)
			sample *= amp;
    5de0:	ee28 7a07 	vmul.f32	s14, s16, s14
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5de4:	9802      	ldr	r0, [sp, #8]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5de6:	eb06 0683 	add.w	r6, r6, r3, lsl #2
			sourceValues[osc][string] = sample;
    5dea:	4b18      	ldr	r3, [pc, #96]	; (5e4c <oscillator_tick+0x36c>)
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    5dec:	ed91 6a00 	vldr	s12, [r1]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5df0:	ee77 7ae8 	vsub.f32	s15, s15, s17
			sourceValues[osc][string] = sample;
    5df4:	443b      	add	r3, r7
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5df6:	edd6 6a00 	vldr	s13, [r6]
    5dfa:	19e2      	adds	r2, r4, r7
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5dfc:	eb04 0480 	add.w	r4, r4, r0, lsl #2
			sourceValues[osc][string] = sample;
    5e00:	ed83 7a00 	vstr	s14, [r3]
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    5e04:	ee27 7a06 	vmul.f32	s14, s14, s12
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5e08:	ee66 8aa8 	vmul.f32	s17, s13, s17
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5e0c:	ee67 7a87 	vmul.f32	s15, s15, s14
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5e10:	ee68 8a87 	vmul.f32	s17, s17, s14
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5e14:	ee67 7aa6 	vmul.f32	s15, s15, s13
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5e18:	edc2 8a00 	vstr	s17, [r2]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5e1c:	edc4 7a00 	vstr	s15, [r4]
}
    5e20:	b009      	add	sp, #36	; 0x24
    5e22:	ecbd 8b04 	vpop	{d8-d9}
    5e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5e2a:	bf00      	nop
    5e2c:	2001d3a0 	.word	0x2001d3a0
    5e30:	20018fbc 	.word	0x20018fbc
    5e34:	2001d478 	.word	0x2001d478
    5e38:	3c23d70a 	.word	0x3c23d70a
    5e3c:	2001d2e8 	.word	0x2001d2e8
    5e40:	2001cffc 	.word	0x2001cffc
    5e44:	2001d540 	.word	0x2001d540
    5e48:	20000898 	.word	0x20000898
    5e4c:	2001d5bc 	.word	0x2001d5bc
    5e50:	200008ac 	.word	0x200008ac
    5e54:	2001d39c 	.word	0x2001d39c
    5e58:	f3af 8000 	nop.w
    5e5c:	f3af 8000 	nop.w

00005e60 <sawSquareTick>:
{
    5e60:	b538      	push	{r3, r4, r5, lr}
	tPBSawSquare_setFreq(&sawPaired[v][string], freq);
    5e62:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    5e66:	4c0e      	ldr	r4, [pc, #56]	; (5ea0 <sawSquareTick+0x40>)
{
    5e68:	4605      	mov	r5, r0
	tPBSawSquare_setFreq(&sawPaired[v][string], freq);
    5e6a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
{
    5e6e:	ed2d 8b02 	vpush	{d8}
    5e72:	eeb0 8a60 	vmov.f32	s16, s1
	tPBSawSquare_setFreq(&sawPaired[v][string], freq);
    5e76:	4620      	mov	r0, r4
    5e78:	f003 fa16 	bl	92a8 <__tPBSawSquare_setFreq_veneer>
	tPBSawSquare_setShape(&sawPaired[v][string], shape);
    5e7c:	4620      	mov	r0, r4
    5e7e:	eeb0 0a48 	vmov.f32	s0, s16
    5e82:	f003 fa81 	bl	9388 <__tPBSawSquare_setShape_veneer>
    *sample += tPBSawSquare_tick(&sawPaired[v][string]);
    5e86:	4620      	mov	r0, r4
    5e88:	f003 fa3e 	bl	9308 <__tPBSawSquare_tick_veneer>
    5e8c:	edd5 7a00 	vldr	s15, [r5]
    5e90:	ee37 0a80 	vadd.f32	s0, s15, s0
    5e94:	ed85 0a00 	vstr	s0, [r5]
}
    5e98:	ecbd 8b02 	vpop	{d8}
    5e9c:	bd38      	pop	{r3, r4, r5, pc}
    5e9e:	bf00      	nop
    5ea0:	2001d4e8 	.word	0x2001d4e8
    5ea4:	f3af 8000 	nop.w
    5ea8:	f3af 8000 	nop.w
    5eac:	f3af 8000 	nop.w
    5eb0:	f3af 8000 	nop.w
    5eb4:	f3af 8000 	nop.w
    5eb8:	f3af 8000 	nop.w
    5ebc:	f3af 8000 	nop.w

00005ec0 <sineTriTick>:
{
    5ec0:	b538      	push	{r3, r4, r5, lr}
    tPBSineTriangle_setFreq(&sinePaired[v][string], freq);
    5ec2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    5ec6:	4c0e      	ldr	r4, [pc, #56]	; (5f00 <sineTriTick+0x40>)
{
    5ec8:	4605      	mov	r5, r0
    tPBSineTriangle_setFreq(&sinePaired[v][string], freq);
    5eca:	eb04 0483 	add.w	r4, r4, r3, lsl #2
{
    5ece:	ed2d 8b02 	vpush	{d8}
    5ed2:	eeb0 8a60 	vmov.f32	s16, s1
    tPBSineTriangle_setFreq(&sinePaired[v][string], freq);
    5ed6:	4620      	mov	r0, r4
    5ed8:	f003 fb0a 	bl	94f0 <__tPBSineTriangle_setFreq_veneer>
    tPBSineTriangle_setShape(&sinePaired[v][string],shape);
    5edc:	4620      	mov	r0, r4
    5ede:	eeb0 0a48 	vmov.f32	s0, s16
    5ee2:	f003 fb21 	bl	9528 <__tPBSineTriangle_setShape_veneer>
    *sample += tPBSineTriangle_tick(&sinePaired[v][string]);
    5ee6:	4620      	mov	r0, r4
    5ee8:	f003 fc0a 	bl	9700 <__tPBSineTriangle_tick_veneer>
    5eec:	edd5 7a00 	vldr	s15, [r5]
    5ef0:	ee37 0a80 	vadd.f32	s0, s15, s0
    5ef4:	ed85 0a00 	vstr	s0, [r5]
}
    5ef8:	ecbd 8b02 	vpop	{d8}
    5efc:	bd38      	pop	{r3, r4, r5, pc}
    5efe:	bf00      	nop
    5f00:	2001d5a4 	.word	0x2001d5a4
    5f04:	f3af 8000 	nop.w
    5f08:	f3af 8000 	nop.w
    5f0c:	f3af 8000 	nop.w
    5f10:	f3af 8000 	nop.w
    5f14:	f3af 8000 	nop.w
    5f18:	f3af 8000 	nop.w
    5f1c:	f3af 8000 	nop.w

00005f20 <sawTick>:
	tPBSaw_setFreq(&saw[v][string], freq);
    5f20:	4a0a      	ldr	r2, [pc, #40]	; (5f4c <sawTick+0x2c>)
    5f22:	eb03 0141 	add.w	r1, r3, r1, lsl #1
{
    5f26:	b510      	push	{r4, lr}
    5f28:	4604      	mov	r4, r0
    5f2a:	b082      	sub	sp, #8
	tPBSaw_setFreq(&saw[v][string], freq);
    5f2c:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    5f30:	9001      	str	r0, [sp, #4]
    5f32:	f003 fac1 	bl	94b8 <__tPBSaw_setFreq_veneer>
    *sample += tPBSaw_tick(&saw[v][string]);
    5f36:	9801      	ldr	r0, [sp, #4]
    5f38:	f003 fa0e 	bl	9358 <__tPBSaw_tick_veneer>
    5f3c:	edd4 7a00 	vldr	s15, [r4]
    5f40:	ee37 0a80 	vadd.f32	s0, s15, s0
    5f44:	ed84 0a00 	vstr	s0, [r4]
}
    5f48:	b002      	add	sp, #8
    5f4a:	bd10      	pop	{r4, pc}
    5f4c:	2001d4d0 	.word	0x2001d4d0
    5f50:	f3af 8000 	nop.w
    5f54:	f3af 8000 	nop.w
    5f58:	f3af 8000 	nop.w
    5f5c:	f3af 8000 	nop.w

00005f60 <pulseTick>:
{
    5f60:	b538      	push	{r3, r4, r5, lr}
    tPBPulse_setFreq(&pulse[v][string], freq);
    5f62:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    5f66:	4c0e      	ldr	r4, [pc, #56]	; (5fa0 <pulseTick+0x40>)
{
    5f68:	4605      	mov	r5, r0
    tPBPulse_setFreq(&pulse[v][string], freq);
    5f6a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
{
    5f6e:	ed2d 8b02 	vpush	{d8}
    5f72:	eeb0 8a60 	vmov.f32	s16, s1
    tPBPulse_setFreq(&pulse[v][string], freq);
    5f76:	4620      	mov	r0, r4
    5f78:	f003 f9fa 	bl	9370 <__tPBPulse_setFreq_veneer>
    tPBPulse_setWidth(&pulse[v][string], shape);
    5f7c:	4620      	mov	r0, r4
    5f7e:	eeb0 0a48 	vmov.f32	s0, s16
    5f82:	f003 fb3d 	bl	9600 <__tPBPulse_setWidth_veneer>
    *sample += tPBPulse_tick(&pulse[v][string]);
    5f86:	4620      	mov	r0, r4
    5f88:	f003 fa8e 	bl	94a8 <__tPBPulse_tick_veneer>
    5f8c:	edd5 7a00 	vldr	s15, [r5]
    5f90:	ee37 0a80 	vadd.f32	s0, s15, s0
    5f94:	ed85 0a00 	vstr	s0, [r5]
}
    5f98:	ecbd 8b02 	vpop	{d8}
    5f9c:	bd38      	pop	{r3, r4, r5, pc}
    5f9e:	bf00      	nop
    5fa0:	2001d4b4 	.word	0x2001d4b4
    5fa4:	f3af 8000 	nop.w
    5fa8:	f3af 8000 	nop.w
    5fac:	f3af 8000 	nop.w
    5fb0:	f3af 8000 	nop.w
    5fb4:	f3af 8000 	nop.w
    5fb8:	f3af 8000 	nop.w
    5fbc:	f3af 8000 	nop.w

00005fc0 <sineTick>:
    tCycle_setFreq(&sine[v][string], freq);
    5fc0:	4a0a      	ldr	r2, [pc, #40]	; (5fec <sineTick+0x2c>)
    5fc2:	eb03 0141 	add.w	r1, r3, r1, lsl #1
{
    5fc6:	b510      	push	{r4, lr}
    5fc8:	4604      	mov	r4, r0
    5fca:	b082      	sub	sp, #8
    tCycle_setFreq(&sine[v][string], freq);
    5fcc:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    5fd0:	9001      	str	r0, [sp, #4]
    5fd2:	f003 f955 	bl	9280 <__tCycle_setFreq_veneer>
    *sample += tCycle_tick(&sine[v][string]);
    5fd6:	9801      	ldr	r0, [sp, #4]
    5fd8:	f003 faa2 	bl	9520 <__tCycle_tick_veneer>
    5fdc:	edd4 7a00 	vldr	s15, [r4]
    5fe0:	ee37 0a80 	vadd.f32	s0, s15, s0
    5fe4:	ed84 0a00 	vstr	s0, [r4]
}
    5fe8:	b002      	add	sp, #8
    5fea:	bd10      	pop	{r4, pc}
    5fec:	2001d58c 	.word	0x2001d58c
    5ff0:	f3af 8000 	nop.w
    5ff4:	f3af 8000 	nop.w
    5ff8:	f3af 8000 	nop.w
    5ffc:	f3af 8000 	nop.w

00006000 <triTick>:
{
    6000:	b538      	push	{r3, r4, r5, lr}
    tPBTriangle_setFreq(&tri[v][string], freq);
    6002:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    6006:	4c0e      	ldr	r4, [pc, #56]	; (6040 <triTick+0x40>)
{
    6008:	4605      	mov	r5, r0
    tPBTriangle_setFreq(&tri[v][string], freq);
    600a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
{
    600e:	ed2d 8b02 	vpush	{d8}
    6012:	eeb0 8a60 	vmov.f32	s16, s1
    tPBTriangle_setFreq(&tri[v][string], freq);
    6016:	4620      	mov	r0, r4
    6018:	f003 f9da 	bl	93d0 <__tPBTriangle_setFreq_veneer>
    tPBTriangle_setSkew(&tri[v][string], shape);
    601c:	4620      	mov	r0, r4
    601e:	eeb0 0a48 	vmov.f32	s0, s16
    6022:	f003 f995 	bl	9350 <__tPBTriangle_setSkew_veneer>
    *sample += tPBTriangle_tick(&tri[v][string]);
    6026:	4620      	mov	r0, r4
    6028:	f003 fa76 	bl	9518 <__tPBTriangle_tick_veneer>
    602c:	edd5 7a00 	vldr	s15, [r5]
    6030:	ee37 0a80 	vadd.f32	s0, s15, s0
    6034:	ed85 0a00 	vstr	s0, [r5]
}
    6038:	ecbd 8b02 	vpop	{d8}
    603c:	bd38      	pop	{r3, r4, r5, pc}
    603e:	bf00      	nop
    6040:	2001d73c 	.word	0x2001d73c
    6044:	f3af 8000 	nop.w
    6048:	f3af 8000 	nop.w
    604c:	f3af 8000 	nop.w
    6050:	f3af 8000 	nop.w
    6054:	f3af 8000 	nop.w
    6058:	f3af 8000 	nop.w
    605c:	f3af 8000 	nop.w

00006060 <userTick>:
}
    6060:	4770      	bx	lr
    6062:	bf00      	nop
    6064:	f3af 8000 	nop.w
    6068:	f3af 8000 	nop.w
    606c:	f3af 8000 	nop.w
    6070:	f3af 8000 	nop.w
    6074:	f3af 8000 	nop.w
    6078:	f3af 8000 	nop.w
    607c:	f3af 8000 	nop.w

00006080 <filter_tick>:
		float enabled = filtParams[FilterEnabled].realVal[string];
    6080:	4b50      	ldr	r3, [pc, #320]	; (61c4 <filter_tick+0x144>)
    6082:	f201 229b 	addw	r2, r1, #667	; 0x29b
		if (!enabledFilt[f]) continue;
    6086:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		float enabled = filtParams[FilterEnabled].realVal[string];
    608a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
{
    608e:	b570      	push	{r4, r5, r6, lr}
    6090:	ed2d 8b04 	vpush	{d8-d9}
		float enabled = filtParams[FilterEnabled].realVal[string];
    6094:	ed92 7a00 	vldr	s14, [r2]
{
    6098:	460c      	mov	r4, r1
    609a:	4605      	mov	r5, r0
		if (!enabledFilt[f]) continue;
    609c:	eeb4 7ae7 	vcmpe.f32	s14, s15
    60a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    60a4:	d910      	bls.n	60c8 <filter_tick+0x48>
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
    60a6:	1c8a      	adds	r2, r1, #2
    60a8:	f503 612f 	add.w	r1, r3, #2800	; 0xaf0
    60ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
		cutoff[f] = MIDIcutoff + (note  * keyFollow);
    60b0:	ed91 6a00 	vldr	s12, [r1]
		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
    60b4:	f603 219c 	addw	r1, r3, #2716	; 0xa9c
    60b8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
		cutoff[f] = MIDIcutoff + (note  * keyFollow);
    60bc:	edd2 7a00 	vldr	s15, [r2]
    60c0:	eee0 7a06 	vfma.f32	s15, s0, s12
    60c4:	eef0 6a67 	vmov.f32	s13, s15
		float enabled = filtParams[FilterEnabled].realVal[string];
    60c8:	f204 22c5 	addw	r2, r4, #709	; 0x2c5
		if (!enabledFilt[f]) continue;
    60cc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		float enabled = filtParams[FilterEnabled].realVal[string];
    60d0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    60d4:	ed92 9a00 	vldr	s18, [r2]
		if (!enabledFilt[f]) continue;
    60d8:	eeb4 9ae7 	vcmpe.f32	s18, s15
    60dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    60e0:	d953      	bls.n	618a <filter_tick+0x10a>
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
    60e2:	1ca1      	adds	r1, r4, #2
    60e4:	4a38      	ldr	r2, [pc, #224]	; (61c8 <filter_tick+0x148>)
	if (enabledFilt[0])
    60e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    60ea:	f204 20ef 	addw	r0, r4, #751	; 0x2ef
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
    60ee:	eb02 0181 	add.w	r1, r2, r1, lsl #2
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    60f2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
		cutoff[f] = MIDIcutoff + (note  * keyFollow);
    60f6:	edd1 5a00 	vldr	s11, [r1]
	if (enabledFilt[0])
    60fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		cutoff[f] = MIDIcutoff + (note  * keyFollow);
    60fe:	ed11 6a15 	vldr	s12, [r1, #-84]	; 0xffffffac
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    6102:	ed93 8a00 	vldr	s16, [r3]
		cutoff[f] = MIDIcutoff + (note  * keyFollow);
    6106:	eea0 6a25 	vfma.f32	s12, s0, s11
    610a:	eef0 8a46 	vmov.f32	s17, s12
	if (enabledFilt[0])
    610e:	dd1f      	ble.n	6150 <filter_tick+0xd0>
		filterTick[0](&samples[0], 0, cutoff[0], string);
    6110:	4e2e      	ldr	r6, [pc, #184]	; (61cc <filter_tick+0x14c>)
    6112:	eeb0 0a66 	vmov.f32	s0, s13
    6116:	4622      	mov	r2, r4
    6118:	2100      	movs	r1, #0
    611a:	6833      	ldr	r3, [r6, #0]
    611c:	4628      	mov	r0, r5
    611e:	4798      	blx	r3
	float sendToFilter2 = samples[0] * (1.0f - sp);
    6120:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	if (enabledFilt[1])
    6124:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	samples[1] += sendToFilter2;
    6128:	ed95 0a01 	vldr	s0, [r5, #4]
	float sendToFilter2 = samples[0] * (1.0f - sp);
    612c:	edd5 7a00 	vldr	s15, [r5]
    6130:	ee37 7a48 	vsub.f32	s14, s14, s16
	if (enabledFilt[1])
    6134:	eeb4 9ae6 	vcmpe.f32	s18, s13
	samples[1] += sendToFilter2;
    6138:	eea7 0a87 	vfma.f32	s0, s15, s14
	if (enabledFilt[1])
    613c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	samples[1] += sendToFilter2;
    6140:	ed85 0a01 	vstr	s0, [r5, #4]
	if (enabledFilt[1])
    6144:	dc11      	bgt.n	616a <filter_tick+0xea>
	return samples[1] + (samples[0] * sp);
    6146:	eea8 0a27 	vfma.f32	s0, s16, s15
}
    614a:	ecbd 8b04 	vpop	{d8-d9}
    614e:	bd70      	pop	{r4, r5, r6, pc}
	float sendToFilter2 = samples[0] * (1.0f - sp);
    6150:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
    6154:	edd5 7a01 	vldr	s15, [r5, #4]
    6158:	edd5 6a00 	vldr	s13, [r5]
    615c:	4e1b      	ldr	r6, [pc, #108]	; (61cc <filter_tick+0x14c>)
	float sendToFilter2 = samples[0] * (1.0f - sp);
    615e:	ee37 7a48 	vsub.f32	s14, s14, s16
	samples[1] += sendToFilter2;
    6162:	eee6 7a87 	vfma.f32	s15, s13, s14
    6166:	edc5 7a01 	vstr	s15, [r5, #4]
		filterTick[1](&samples[1], 1, cutoff[1], string);
    616a:	eeb0 0a68 	vmov.f32	s0, s17
    616e:	6873      	ldr	r3, [r6, #4]
    6170:	4622      	mov	r2, r4
    6172:	2101      	movs	r1, #1
    6174:	1d28      	adds	r0, r5, #4
    6176:	4798      	blx	r3
	return samples[1] + (samples[0] * sp);
    6178:	ed95 0a01 	vldr	s0, [r5, #4]
    617c:	edd5 7a00 	vldr	s15, [r5]
    6180:	eea8 0a27 	vfma.f32	s0, s16, s15
}
    6184:	ecbd 8b04 	vpop	{d8-d9}
    6188:	bd70      	pop	{r4, r5, r6, pc}
	if (enabledFilt[0])
    618a:	eeb4 7ae7 	vcmpe.f32	s14, s15
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    618e:	f204 22ef 	addw	r2, r4, #751	; 0x2ef
    6192:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (enabledFilt[0])
    6196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    619a:	ed93 8a00 	vldr	s16, [r3]
	if (enabledFilt[0])
    619e:	dcb7      	bgt.n	6110 <filter_tick+0x90>
	float sendToFilter2 = samples[0] * (1.0f - sp);
    61a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
    61a4:	ed95 0a01 	vldr	s0, [r5, #4]
	float sendToFilter2 = samples[0] * (1.0f - sp);
    61a8:	edd5 7a00 	vldr	s15, [r5]
    61ac:	ee37 7a48 	vsub.f32	s14, s14, s16
	samples[1] += sendToFilter2;
    61b0:	eea7 0a27 	vfma.f32	s0, s14, s15
    61b4:	ed85 0a01 	vstr	s0, [r5, #4]
	return samples[1] + (samples[0] * sp);
    61b8:	eea8 0a27 	vfma.f32	s0, s16, s15
}
    61bc:	ecbd 8b04 	vpop	{d8-d9}
    61c0:	bd70      	pop	{r4, r5, r6, pc}
    61c2:	bf00      	nop
    61c4:	20018fbc 	.word	0x20018fbc
    61c8:	20019b54 	.word	0x20019b54
    61cc:	2001cfe4 	.word	0x2001cfe4
    61d0:	f3af 8000 	nop.w
    61d4:	f3af 8000 	nop.w
    61d8:	f3af 8000 	nop.w
    61dc:	f3af 8000 	nop.w

000061e0 <lowpassTick>:
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
    61e0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    61e4:	4b0d      	ldr	r3, [pc, #52]	; (621c <lowpassTick+0x3c>)
{
    61e6:	b530      	push	{r4, r5, lr}
    61e8:	4605      	mov	r5, r0
    61ea:	b083      	sub	sp, #12
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
    61ec:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    61f0:	0094      	lsls	r4, r2, #2
    61f2:	9001      	str	r0, [sp, #4]
    61f4:	f003 f93c 	bl	9470 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&lowpass[v][string], *sample);
    61f8:	ed95 0a00 	vldr	s0, [r5]
    61fc:	9801      	ldr	r0, [sp, #4]
    61fe:	f003 fa5f 	bl	96c0 <__tSVF_tick_veneer>
    *sample *= filterGain[v][string];
    6202:	4b07      	ldr	r3, [pc, #28]	; (6220 <lowpassTick+0x40>)
	*sample = tSVF_tick(&lowpass[v][string], *sample);
    6204:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    6208:	4423      	add	r3, r4
    620a:	edd3 7a00 	vldr	s15, [r3]
    620e:	ee67 7a80 	vmul.f32	s15, s15, s0
    6212:	edc5 7a00 	vstr	s15, [r5]
}
    6216:	b003      	add	sp, #12
    6218:	bd30      	pop	{r4, r5, pc}
    621a:	bf00      	nop
    621c:	2001d1d8 	.word	0x2001d1d8
    6220:	2001cfd4 	.word	0x2001cfd4
    6224:	f3af 8000 	nop.w
    6228:	f3af 8000 	nop.w
    622c:	f3af 8000 	nop.w
    6230:	f3af 8000 	nop.w
    6234:	f3af 8000 	nop.w
    6238:	f3af 8000 	nop.w
    623c:	f3af 8000 	nop.w

00006240 <highpassTick>:
	tSVF_setFreqFast(&highpass[v][string], cutoff);
    6240:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6244:	4b0d      	ldr	r3, [pc, #52]	; (627c <highpassTick+0x3c>)
{
    6246:	b530      	push	{r4, r5, lr}
    6248:	4605      	mov	r5, r0
    624a:	b083      	sub	sp, #12
	tSVF_setFreqFast(&highpass[v][string], cutoff);
    624c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    6250:	0094      	lsls	r4, r2, #2
    6252:	9001      	str	r0, [sp, #4]
    6254:	f003 f90c 	bl	9470 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&highpass[v][string], *sample);
    6258:	ed95 0a00 	vldr	s0, [r5]
    625c:	9801      	ldr	r0, [sp, #4]
    625e:	f003 fa2f 	bl	96c0 <__tSVF_tick_veneer>
    *sample *= filterGain[v][string];
    6262:	4b07      	ldr	r3, [pc, #28]	; (6280 <highpassTick+0x40>)
	*sample = tSVF_tick(&highpass[v][string], *sample);
    6264:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    6268:	4423      	add	r3, r4
    626a:	edd3 7a00 	vldr	s15, [r3]
    626e:	ee67 7a80 	vmul.f32	s15, s15, s0
    6272:	edc5 7a00 	vstr	s15, [r5]
}
    6276:	b003      	add	sp, #12
    6278:	bd30      	pop	{r4, r5, pc}
    627a:	bf00      	nop
    627c:	2001d054 	.word	0x2001d054
    6280:	2001cfd4 	.word	0x2001cfd4
    6284:	f3af 8000 	nop.w
    6288:	f3af 8000 	nop.w
    628c:	f3af 8000 	nop.w
    6290:	f3af 8000 	nop.w
    6294:	f3af 8000 	nop.w
    6298:	f3af 8000 	nop.w
    629c:	f3af 8000 	nop.w

000062a0 <bandpassTick>:
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
    62a0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    62a4:	4b0d      	ldr	r3, [pc, #52]	; (62dc <bandpassTick+0x3c>)
{
    62a6:	b530      	push	{r4, r5, lr}
    62a8:	4605      	mov	r5, r0
    62aa:	b083      	sub	sp, #12
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
    62ac:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    62b0:	0094      	lsls	r4, r2, #2
    62b2:	9001      	str	r0, [sp, #4]
    62b4:	f003 f8dc 	bl	9470 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&bandpass[v][string], *sample);
    62b8:	ed95 0a00 	vldr	s0, [r5]
    62bc:	9801      	ldr	r0, [sp, #4]
    62be:	f003 f9ff 	bl	96c0 <__tSVF_tick_veneer>
    *sample *= filterGain[v][string];
    62c2:	4b07      	ldr	r3, [pc, #28]	; (62e0 <bandpassTick+0x40>)
	*sample = tSVF_tick(&bandpass[v][string], *sample);
    62c4:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    62c8:	4423      	add	r3, r4
    62ca:	edd3 7a00 	vldr	s15, [r3]
    62ce:	ee67 7a80 	vmul.f32	s15, s15, s0
    62d2:	edc5 7a00 	vstr	s15, [r5]
}
    62d6:	b003      	add	sp, #12
    62d8:	bd30      	pop	{r4, r5, pc}
    62da:	bf00      	nop
    62dc:	2001cd48 	.word	0x2001cd48
    62e0:	2001cfd4 	.word	0x2001cfd4
    62e4:	f3af 8000 	nop.w
    62e8:	f3af 8000 	nop.w
    62ec:	f3af 8000 	nop.w
    62f0:	f3af 8000 	nop.w
    62f4:	f3af 8000 	nop.w
    62f8:	f3af 8000 	nop.w
    62fc:	f3af 8000 	nop.w

00006300 <diodeLowpassTick>:
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
    6300:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6304:	4b0d      	ldr	r3, [pc, #52]	; (633c <diodeLowpassTick+0x3c>)
{
    6306:	b530      	push	{r4, r5, lr}
    6308:	4605      	mov	r5, r0
    630a:	b083      	sub	sp, #12
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
    630c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    6310:	0094      	lsls	r4, r2, #2
    6312:	9001      	str	r0, [sp, #4]
    6314:	f003 f9fc 	bl	9710 <__tDiodeFilter_setFreqFast_veneer>
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
    6318:	ed95 0a00 	vldr	s0, [r5]
    631c:	9801      	ldr	r0, [sp, #4]
    631e:	f003 f9d7 	bl	96d0 <__tDiodeFilter_tickEfficient_veneer>
    *sample *= filterGain[v][string];
    6322:	4b07      	ldr	r3, [pc, #28]	; (6340 <diodeLowpassTick+0x40>)
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
    6324:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    6328:	4423      	add	r3, r4
    632a:	edd3 7a00 	vldr	s15, [r3]
    632e:	ee67 7a80 	vmul.f32	s15, s15, s0
    6332:	edc5 7a00 	vstr	s15, [r5]
}
    6336:	b003      	add	sp, #12
    6338:	bd30      	pop	{r4, r5, pc}
    633a:	bf00      	nop
    633c:	2001cf60 	.word	0x2001cf60
    6340:	2001cfd4 	.word	0x2001cfd4
    6344:	f3af 8000 	nop.w
    6348:	f3af 8000 	nop.w
    634c:	f3af 8000 	nop.w
    6350:	f3af 8000 	nop.w
    6354:	f3af 8000 	nop.w
    6358:	f3af 8000 	nop.w
    635c:	f3af 8000 	nop.w

00006360 <VZpeakTick>:
	tVZFilterBell_setFreq(&VZfilterPeak[v][string], cutoff);
    6360:	4b09      	ldr	r3, [pc, #36]	; (6388 <VZpeakTick+0x28>)
    6362:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    6366:	b510      	push	{r4, lr}
    6368:	4604      	mov	r4, r0
    636a:	b082      	sub	sp, #8
	tVZFilterBell_setFreq(&VZfilterPeak[v][string], cutoff);
    636c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    6370:	9001      	str	r0, [sp, #4]
    6372:	f003 f875 	bl	9460 <__tVZFilterBell_setFreq_veneer>
	*sample = tVZFilterBell_tick(&VZfilterPeak[v][string], *sample);
    6376:	9801      	ldr	r0, [sp, #4]
    6378:	ed94 0a00 	vldr	s0, [r4]
    637c:	f003 f978 	bl	9670 <__tVZFilterBell_tick_veneer>
    6380:	ed84 0a00 	vstr	s0, [r4]
}
    6384:	b002      	add	sp, #8
    6386:	bd10      	pop	{r4, pc}
    6388:	2001cd30 	.word	0x2001cd30
    638c:	f3af 8000 	nop.w
    6390:	f3af 8000 	nop.w
    6394:	f3af 8000 	nop.w
    6398:	f3af 8000 	nop.w
    639c:	f3af 8000 	nop.w

000063a0 <VZlowshelfTick>:
	tVZFilterLS_setFreqFast(&VZfilterLS[v][string], cutoff);
    63a0:	4b09      	ldr	r3, [pc, #36]	; (63c8 <VZlowshelfTick+0x28>)
    63a2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    63a6:	b510      	push	{r4, lr}
    63a8:	4604      	mov	r4, r0
    63aa:	b082      	sub	sp, #8
	tVZFilterLS_setFreqFast(&VZfilterLS[v][string], cutoff);
    63ac:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    63b0:	9001      	str	r0, [sp, #4]
    63b2:	f003 f945 	bl	9640 <__tVZFilterLS_setFreqFast_veneer>
	*sample = tVZFilterLS_tick(&VZfilterLS[v][string], *sample);
    63b6:	9801      	ldr	r0, [sp, #4]
    63b8:	ed94 0a00 	vldr	s0, [r4]
    63bc:	f003 f984 	bl	96c8 <__tVZFilterLS_tick_veneer>
    63c0:	ed84 0a00 	vstr	s0, [r4]
}
    63c4:	b002      	add	sp, #8
    63c6:	bd10      	pop	{r4, pc}
    63c8:	2001cd20 	.word	0x2001cd20
    63cc:	f3af 8000 	nop.w
    63d0:	f3af 8000 	nop.w
    63d4:	f3af 8000 	nop.w
    63d8:	f3af 8000 	nop.w
    63dc:	f3af 8000 	nop.w

000063e0 <VZhighshelfTick>:
	tVZFilterHS_setFreqFast(&VZfilterHS[v][string], cutoff);
    63e0:	4b09      	ldr	r3, [pc, #36]	; (6408 <VZhighshelfTick+0x28>)
    63e2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    63e6:	b510      	push	{r4, lr}
    63e8:	4604      	mov	r4, r0
    63ea:	b082      	sub	sp, #8
	tVZFilterHS_setFreqFast(&VZfilterHS[v][string], cutoff);
    63ec:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    63f0:	9001      	str	r0, [sp, #4]
    63f2:	f003 f849 	bl	9488 <__tVZFilterHS_setFreqFast_veneer>
	*sample = tVZFilterHS_tick(&VZfilterHS[v][string], *sample);
    63f6:	9801      	ldr	r0, [sp, #4]
    63f8:	ed94 0a00 	vldr	s0, [r4]
    63fc:	f002 ff44 	bl	9288 <__tVZFilterHS_tick_veneer>
    6400:	ed84 0a00 	vstr	s0, [r4]
}
    6404:	b002      	add	sp, #8
    6406:	bd10      	pop	{r4, pc}
    6408:	2001cd10 	.word	0x2001cd10
    640c:	f3af 8000 	nop.w
    6410:	f3af 8000 	nop.w
    6414:	f3af 8000 	nop.w
    6418:	f3af 8000 	nop.w
    641c:	f3af 8000 	nop.w

00006420 <VZbandrejectTick>:
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
    6420:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6424:	4b0d      	ldr	r3, [pc, #52]	; (645c <VZbandrejectTick+0x3c>)
{
    6426:	b530      	push	{r4, r5, lr}
    6428:	4605      	mov	r5, r0
    642a:	b083      	sub	sp, #12
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
    642c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    6430:	0094      	lsls	r4, r2, #2
    6432:	9001      	str	r0, [sp, #4]
    6434:	f003 f8d8 	bl	95e8 <__tVZFilter_setFreqFast_veneer>
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
    6438:	ed95 0a00 	vldr	s0, [r5]
    643c:	9801      	ldr	r0, [sp, #4]
    643e:	f002 ffbb 	bl	93b8 <__tVZFilter_tickEfficient_veneer>
    *sample *= filterGain[v][string];
    6442:	4b07      	ldr	r3, [pc, #28]	; (6460 <VZbandrejectTick+0x40>)
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
    6444:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    6448:	4423      	add	r3, r4
    644a:	edd3 7a00 	vldr	s15, [r3]
    644e:	ee67 7a80 	vmul.f32	s15, s15, s0
    6452:	edc5 7a00 	vstr	s15, [r5]
}
    6456:	b003      	add	sp, #12
    6458:	bd30      	pop	{r4, r5, pc}
    645a:	bf00      	nop
    645c:	2001cd00 	.word	0x2001cd00
    6460:	2001cfd4 	.word	0x2001cfd4
    6464:	f3af 8000 	nop.w
    6468:	f3af 8000 	nop.w
    646c:	f3af 8000 	nop.w
    6470:	f3af 8000 	nop.w
    6474:	f3af 8000 	nop.w
    6478:	f3af 8000 	nop.w
    647c:	f3af 8000 	nop.w

00006480 <LadderLowpassTick>:
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
    6480:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6484:	4b0d      	ldr	r3, [pc, #52]	; (64bc <LadderLowpassTick+0x3c>)
{
    6486:	b530      	push	{r4, r5, lr}
    6488:	4605      	mov	r5, r0
    648a:	b083      	sub	sp, #12
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
    648c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    6490:	0094      	lsls	r4, r2, #2
    6492:	9001      	str	r0, [sp, #4]
    6494:	f003 f908 	bl	96a8 <__tLadderFilter_setFreqFast_veneer>
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
    6498:	ed95 0a00 	vldr	s0, [r5]
    649c:	9801      	ldr	r0, [sp, #4]
    649e:	f003 f837 	bl	9510 <__tLadderFilter_tick_veneer>
    *sample *= filterGain[v][string];
    64a2:	4b07      	ldr	r3, [pc, #28]	; (64c0 <LadderLowpassTick+0x40>)
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
    64a4:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    64a8:	4423      	add	r3, r4
    64aa:	edd3 7a00 	vldr	s15, [r3]
    64ae:	ee67 7a80 	vmul.f32	s15, s15, s0
    64b2:	edc5 7a00 	vstr	s15, [r5]
}
    64b6:	b003      	add	sp, #12
    64b8:	bd30      	pop	{r4, r5, pc}
    64ba:	bf00      	nop
    64bc:	2001ccf0 	.word	0x2001ccf0
    64c0:	2001cfd4 	.word	0x2001cfd4
    64c4:	f3af 8000 	nop.w
    64c8:	f3af 8000 	nop.w
    64cc:	f3af 8000 	nop.w
    64d0:	f3af 8000 	nop.w
    64d4:	f3af 8000 	nop.w
    64d8:	f3af 8000 	nop.w
    64dc:	f3af 8000 	nop.w

000064e0 <setFreqMultPitch>:
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    64e0:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
    64e4:	4b0f      	ldr	r3, [pc, #60]	; (6524 <setFreqMultPitch+0x44>)
    64e6:	0042      	lsls	r2, r0, #1
	pitch *= 24.0f;
    64e8:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    64ec:	eb00 008c 	add.w	r0, r0, ip, lsl #2
    64f0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    64f4:	3020      	adds	r0, #32
	pitch *= 24.0f;
    64f6:	ee20 0a07 	vmul.f32	s0, s0, s14
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    64fa:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    64fe:	4408      	add	r0, r1
    6500:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    6504:	ed93 7a02 	vldr	s14, [r3, #8]
    6508:	eeb4 7ae7 	vcmpe.f32	s14, s15
    650c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6510:	dd01      	ble.n	6516 <setFreqMultPitch+0x36>
		pitch = roundf(pitch);
    6512:	feb8 0a40 	vrinta.f32	s0, s0
	midiAdd[osc][string] = pitch;
    6516:	4b04      	ldr	r3, [pc, #16]	; (6528 <setFreqMultPitch+0x48>)
    6518:	440a      	add	r2, r1
    651a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    651e:	ed83 0a00 	vstr	s0, [r3]
}
    6522:	4770      	bx	lr
    6524:	20018fbc 	.word	0x20018fbc
    6528:	2001d2e8 	.word	0x2001d2e8
    652c:	f3af 8000 	nop.w
    6530:	f3af 8000 	nop.w
    6534:	f3af 8000 	nop.w
    6538:	f3af 8000 	nop.w
    653c:	f3af 8000 	nop.w

00006540 <setFreqMultHarm>:
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    6540:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
    6544:	4b17      	ldr	r3, [pc, #92]	; (65a4 <setFreqMultHarm+0x64>)
    6546:	0042      	lsls	r2, r0, #1
	harm *= 15.0f;
    6548:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    654c:	eb00 008c 	add.w	r0, r0, ip, lsl #2
    6550:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    6554:	3020      	adds	r0, #32
	harm *= 15.0f;
    6556:	ee20 0a07 	vmul.f32	s0, s0, s14
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    655a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    655e:	4408      	add	r0, r1
    6560:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    6564:	ed93 7a02 	vldr	s14, [r3, #8]
    6568:	eeb4 7ae7 	vcmpe.f32	s14, s15
    656c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6570:	dd01      	ble.n	6576 <setFreqMultHarm+0x36>
		harm = roundf(harm);
    6572:	feb8 0a40 	vrinta.f32	s0, s0
	if (harm >= 0)
    6576:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
		freqMult[osc][string] = (harm + 1);
    657a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	if (harm >= 0)
    657e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6582:	db08      	blt.n	6596 <setFreqMultHarm+0x56>
		freqMult[osc][string] = (harm + 1);
    6584:	ee30 0a27 	vadd.f32	s0, s0, s15
    6588:	4b07      	ldr	r3, [pc, #28]	; (65a8 <setFreqMultHarm+0x68>)
    658a:	440a      	add	r2, r1
    658c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    6590:	ed83 0a00 	vstr	s0, [r3]
}
    6594:	4770      	bx	lr
		freqMult[osc][string] = (1.0f / fabsf((harm - 1)));
    6596:	ee30 0a67 	vsub.f32	s0, s0, s15
    659a:	eeb0 7ac0 	vabs.f32	s14, s0
    659e:	ee87 0a87 	vdiv.f32	s0, s15, s14
    65a2:	e7f1      	b.n	6588 <setFreqMultHarm+0x48>
    65a4:	20018fbc 	.word	0x20018fbc
    65a8:	2001cffc 	.word	0x2001cffc
    65ac:	f3af 8000 	nop.w
    65b0:	f3af 8000 	nop.w
    65b4:	f3af 8000 	nop.w
    65b8:	f3af 8000 	nop.w
    65bc:	f3af 8000 	nop.w

000065c0 <lowpassSetQ>:
    tSVF_setQ(&lowpass[v][string], q);
    65c0:	4b03      	ldr	r3, [pc, #12]	; (65d0 <lowpassSetQ+0x10>)
    65c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    65c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    65ca:	f003 b821 	b.w	9610 <__tSVF_setQ_veneer>
    65ce:	bf00      	nop
    65d0:	2001d1d8 	.word	0x2001d1d8
    65d4:	f3af 8000 	nop.w
    65d8:	f3af 8000 	nop.w
    65dc:	f3af 8000 	nop.w

000065e0 <highpassSetQ>:
    tSVF_setQ(&highpass[v][string], q);
    65e0:	4b03      	ldr	r3, [pc, #12]	; (65f0 <highpassSetQ+0x10>)
    65e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    65e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    65ea:	f003 b811 	b.w	9610 <__tSVF_setQ_veneer>
    65ee:	bf00      	nop
    65f0:	2001d054 	.word	0x2001d054
    65f4:	f3af 8000 	nop.w
    65f8:	f3af 8000 	nop.w
    65fc:	f3af 8000 	nop.w

00006600 <bandpassSetQ>:
    tSVF_setQ(&bandpass[v][string], q);
    6600:	4b03      	ldr	r3, [pc, #12]	; (6610 <bandpassSetQ+0x10>)
    6602:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6606:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    660a:	f003 b801 	b.w	9610 <__tSVF_setQ_veneer>
    660e:	bf00      	nop
    6610:	2001cd48 	.word	0x2001cd48
    6614:	f3af 8000 	nop.w
    6618:	f3af 8000 	nop.w
    661c:	f3af 8000 	nop.w

00006620 <diodeLowpassSetQ>:
	tDiodeFilter_setQ(&diodeFilters[v][string], q);
    6620:	4b03      	ldr	r3, [pc, #12]	; (6630 <diodeLowpassSetQ+0x10>)
    6622:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6626:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    662a:	f002 be55 	b.w	92d8 <__tDiodeFilter_setQ_veneer>
    662e:	bf00      	nop
    6630:	2001cf60 	.word	0x2001cf60
    6634:	f3af 8000 	nop.w
    6638:	f3af 8000 	nop.w
    663c:	f3af 8000 	nop.w

00006640 <VZpeakSetQ>:
	tVZFilterBell_setBandwidth(&VZfilterPeak[v][string], q);
    6640:	4b03      	ldr	r3, [pc, #12]	; (6650 <VZpeakSetQ+0x10>)
    6642:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6646:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    664a:	f002 be71 	b.w	9330 <__tVZFilterBell_setBandwidth_veneer>
    664e:	bf00      	nop
    6650:	2001cd30 	.word	0x2001cd30
    6654:	f3af 8000 	nop.w
    6658:	f3af 8000 	nop.w
    665c:	f3af 8000 	nop.w

00006660 <VZlowshelfSetQ>:
	tVZFilterLS_setResonance(&VZfilterLS[v][string], q);
    6660:	4b03      	ldr	r3, [pc, #12]	; (6670 <VZlowshelfSetQ+0x10>)
    6662:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6666:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    666a:	f003 b821 	b.w	96b0 <__tVZFilterLS_setResonance_veneer>
    666e:	bf00      	nop
    6670:	2001cd20 	.word	0x2001cd20
    6674:	f3af 8000 	nop.w
    6678:	f3af 8000 	nop.w
    667c:	f3af 8000 	nop.w

00006680 <VZhighshelfSetQ>:
	tVZFilterHS_setResonance(&VZfilterHS[v][string], q);
    6680:	4b03      	ldr	r3, [pc, #12]	; (6690 <VZhighshelfSetQ+0x10>)
    6682:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6686:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    668a:	f002 be8d 	b.w	93a8 <__tVZFilterHS_setResonance_veneer>
    668e:	bf00      	nop
    6690:	2001cd10 	.word	0x2001cd10
    6694:	f3af 8000 	nop.w
    6698:	f3af 8000 	nop.w
    669c:	f3af 8000 	nop.w

000066a0 <VZbandrejectSetQ>:
	tVZFilter_setResonance(&VZfilterBR[v][string], q);
    66a0:	4b03      	ldr	r3, [pc, #12]	; (66b0 <VZbandrejectSetQ+0x10>)
    66a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    66a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    66aa:	f002 bec1 	b.w	9430 <__tVZFilter_setResonance_veneer>
    66ae:	bf00      	nop
    66b0:	2001cd00 	.word	0x2001cd00
    66b4:	f3af 8000 	nop.w
    66b8:	f3af 8000 	nop.w
    66bc:	f3af 8000 	nop.w

000066c0 <LadderLowpassSetQ>:
	tLadderFilter_setQ(&Ladderfilter[v][string], q);
    66c0:	4b03      	ldr	r3, [pc, #12]	; (66d0 <LadderLowpassSetQ+0x10>)
    66c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    66c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    66ca:	f002 be95 	b.w	93f8 <__tLadderFilter_setQ_veneer>
    66ce:	bf00      	nop
    66d0:	2001ccf0 	.word	0x2001ccf0
    66d4:	f3af 8000 	nop.w
    66d8:	f3af 8000 	nop.w
    66dc:	f3af 8000 	nop.w

000066e0 <lowpassSetGain>:
    filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    66e0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    66e4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
    66e8:	b538      	push	{r3, r4, r5, lr}
    filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    66ea:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    66ee:	4605      	mov	r5, r0
    66f0:	460c      	mov	r4, r1
    filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    66f2:	eeb0 0a67 	vmov.f32	s0, s15
    66f6:	f002 feab 	bl	9450 <__dbToATableLookup_veneer>
    66fa:	4b04      	ldr	r3, [pc, #16]	; (670c <lowpassSetGain+0x2c>)
    66fc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    6700:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    6704:	ed83 0a00 	vstr	s0, [r3]
}
    6708:	bd38      	pop	{r3, r4, r5, pc}
    670a:	bf00      	nop
    670c:	2001cfd4 	.word	0x2001cfd4
    6710:	f3af 8000 	nop.w
    6714:	f3af 8000 	nop.w
    6718:	f3af 8000 	nop.w
    671c:	f3af 8000 	nop.w

00006720 <highpassSetGain>:
    6720:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    6724:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    6728:	b538      	push	{r3, r4, r5, lr}
    672a:	eee0 7a07 	vfma.f32	s15, s0, s14
    672e:	4605      	mov	r5, r0
    6730:	460c      	mov	r4, r1
    6732:	eeb0 0a67 	vmov.f32	s0, s15
    6736:	f002 fe8b 	bl	9450 <__dbToATableLookup_veneer>
    673a:	4b04      	ldr	r3, [pc, #16]	; (674c <highpassSetGain+0x2c>)
    673c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    6740:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    6744:	ed83 0a00 	vstr	s0, [r3]
    6748:	bd38      	pop	{r3, r4, r5, pc}
    674a:	bf00      	nop
    674c:	2001cfd4 	.word	0x2001cfd4
    6750:	f3af 8000 	nop.w
    6754:	f3af 8000 	nop.w
    6758:	f3af 8000 	nop.w
    675c:	f3af 8000 	nop.w

00006760 <bandpassSetGain>:
    6760:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    6764:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    6768:	b538      	push	{r3, r4, r5, lr}
    676a:	eee0 7a07 	vfma.f32	s15, s0, s14
    676e:	4605      	mov	r5, r0
    6770:	460c      	mov	r4, r1
    6772:	eeb0 0a67 	vmov.f32	s0, s15
    6776:	f002 fe6b 	bl	9450 <__dbToATableLookup_veneer>
    677a:	4b04      	ldr	r3, [pc, #16]	; (678c <bandpassSetGain+0x2c>)
    677c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    6780:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    6784:	ed83 0a00 	vstr	s0, [r3]
    6788:	bd38      	pop	{r3, r4, r5, pc}
    678a:	bf00      	nop
    678c:	2001cfd4 	.word	0x2001cfd4
    6790:	f3af 8000 	nop.w
    6794:	f3af 8000 	nop.w
    6798:	f3af 8000 	nop.w
    679c:	f3af 8000 	nop.w

000067a0 <diodeLowpassSetGain>:
    67a0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    67a4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    67a8:	b538      	push	{r3, r4, r5, lr}
    67aa:	eee0 7a07 	vfma.f32	s15, s0, s14
    67ae:	4605      	mov	r5, r0
    67b0:	460c      	mov	r4, r1
    67b2:	eeb0 0a67 	vmov.f32	s0, s15
    67b6:	f002 fe4b 	bl	9450 <__dbToATableLookup_veneer>
    67ba:	4b04      	ldr	r3, [pc, #16]	; (67cc <diodeLowpassSetGain+0x2c>)
    67bc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    67c0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    67c4:	ed83 0a00 	vstr	s0, [r3]
    67c8:	bd38      	pop	{r3, r4, r5, pc}
    67ca:	bf00      	nop
    67cc:	2001cfd4 	.word	0x2001cfd4
    67d0:	f3af 8000 	nop.w
    67d4:	f3af 8000 	nop.w
    67d8:	f3af 8000 	nop.w
    67dc:	f3af 8000 	nop.w

000067e0 <VZpeakSetGain>:
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    67e0:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    67e4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 680c <VZpeakSetGain+0x2c>
{
    67e8:	b538      	push	{r3, r4, r5, lr}
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    67ea:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    67ee:	4605      	mov	r5, r0
    67f0:	460c      	mov	r4, r1
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    67f2:	eeb0 0a67 	vmov.f32	s0, s15
    67f6:	f002 fe2b 	bl	9450 <__dbToATableLookup_veneer>
    67fa:	4b05      	ldr	r3, [pc, #20]	; (6810 <VZpeakSetGain+0x30>)
    67fc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    6800:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    6804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    6808:	f002 bd8e 	b.w	9328 <__tVZFilterBell_setGain_veneer>
    680c:	42480000 	.word	0x42480000
    6810:	2001cd30 	.word	0x2001cd30
    6814:	f3af 8000 	nop.w
    6818:	f3af 8000 	nop.w
    681c:	f3af 8000 	nop.w

00006820 <VZlowshelfSetGain>:
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    6820:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    6824:	ed9f 7a09 	vldr	s14, [pc, #36]	; 684c <VZlowshelfSetGain+0x2c>
{
    6828:	b538      	push	{r3, r4, r5, lr}
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    682a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    682e:	4605      	mov	r5, r0
    6830:	460c      	mov	r4, r1
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    6832:	eeb0 0a67 	vmov.f32	s0, s15
    6836:	f002 fe0b 	bl	9450 <__dbToATableLookup_veneer>
    683a:	4b05      	ldr	r3, [pc, #20]	; (6850 <VZlowshelfSetGain+0x30>)
    683c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    6840:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    6844:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    6848:	f002 bde2 	b.w	9410 <__tVZFilterLS_setGain_veneer>
    684c:	42480000 	.word	0x42480000
    6850:	2001cd20 	.word	0x2001cd20
    6854:	f3af 8000 	nop.w
    6858:	f3af 8000 	nop.w
    685c:	f3af 8000 	nop.w

00006860 <VZhighshelfSetGain>:
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    6860:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    6864:	ed9f 7a09 	vldr	s14, [pc, #36]	; 688c <VZhighshelfSetGain+0x2c>
{
    6868:	b538      	push	{r3, r4, r5, lr}
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    686a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    686e:	4605      	mov	r5, r0
    6870:	460c      	mov	r4, r1
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    6872:	eeb0 0a67 	vmov.f32	s0, s15
    6876:	f002 fdeb 	bl	9450 <__dbToATableLookup_veneer>
    687a:	4b05      	ldr	r3, [pc, #20]	; (6890 <VZhighshelfSetGain+0x30>)
    687c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    6880:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    6884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    6888:	f002 bf5e 	b.w	9748 <__tVZFilterHS_setGain_veneer>
    688c:	42480000 	.word	0x42480000
    6890:	2001cd10 	.word	0x2001cd10
    6894:	f3af 8000 	nop.w
    6898:	f3af 8000 	nop.w
    689c:	f3af 8000 	nop.w

000068a0 <VZbandrejectSetGain>:
    68a0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    68a4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    68a8:	b538      	push	{r3, r4, r5, lr}
    68aa:	eee0 7a07 	vfma.f32	s15, s0, s14
    68ae:	4605      	mov	r5, r0
    68b0:	460c      	mov	r4, r1
    68b2:	eeb0 0a67 	vmov.f32	s0, s15
    68b6:	f002 fdcb 	bl	9450 <__dbToATableLookup_veneer>
    68ba:	4b04      	ldr	r3, [pc, #16]	; (68cc <VZbandrejectSetGain+0x2c>)
    68bc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    68c0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    68c4:	ed83 0a00 	vstr	s0, [r3]
    68c8:	bd38      	pop	{r3, r4, r5, pc}
    68ca:	bf00      	nop
    68cc:	2001cfd4 	.word	0x2001cfd4
    68d0:	f3af 8000 	nop.w
    68d4:	f3af 8000 	nop.w
    68d8:	f3af 8000 	nop.w
    68dc:	f3af 8000 	nop.w

000068e0 <LadderLowpassSetGain>:
    68e0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    68e4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    68e8:	b538      	push	{r3, r4, r5, lr}
    68ea:	eee0 7a07 	vfma.f32	s15, s0, s14
    68ee:	4605      	mov	r5, r0
    68f0:	460c      	mov	r4, r1
    68f2:	eeb0 0a67 	vmov.f32	s0, s15
    68f6:	f002 fdab 	bl	9450 <__dbToATableLookup_veneer>
    68fa:	4b04      	ldr	r3, [pc, #16]	; (690c <LadderLowpassSetGain+0x2c>)
    68fc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    6900:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    6904:	ed83 0a00 	vstr	s0, [r3]
    6908:	bd38      	pop	{r3, r4, r5, pc}
    690a:	bf00      	nop
    690c:	2001cfd4 	.word	0x2001cfd4
    6910:	f3af 8000 	nop.w
    6914:	f3af 8000 	nop.w
    6918:	f3af 8000 	nop.w
    691c:	f3af 8000 	nop.w

00006920 <envelope_tick>:
{
    6920:	b538      	push	{r3, r4, r5, lr}
		if (envOn[v])
    6922:	4d1d      	ldr	r5, [pc, #116]	; (6998 <envelope_tick+0x78>)
{
    6924:	4604      	mov	r4, r0
		if (envOn[v])
    6926:	782b      	ldrb	r3, [r5, #0]
    6928:	bb53      	cbnz	r3, 6980 <envelope_tick+0x60>
    692a:	786b      	ldrb	r3, [r5, #1]
    692c:	b9e3      	cbnz	r3, 6968 <envelope_tick+0x48>
    692e:	78ab      	ldrb	r3, [r5, #2]
    6930:	b973      	cbnz	r3, 6950 <envelope_tick+0x30>
    6932:	78eb      	ldrb	r3, [r5, #3]
    6934:	b903      	cbnz	r3, 6938 <envelope_tick+0x18>
}
    6936:	bd38      	pop	{r3, r4, r5, pc}
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
    6938:	4b18      	ldr	r3, [pc, #96]	; (699c <envelope_tick+0x7c>)
    693a:	1da0      	adds	r0, r4, #6
    693c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6940:	f002 fdce 	bl	94e0 <__tADSRT_tickNoInterp_veneer>
    6944:	4b16      	ldr	r3, [pc, #88]	; (69a0 <envelope_tick+0x80>)
    6946:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    694a:	ed83 0a2e 	vstr	s0, [r3, #184]	; 0xb8
}
    694e:	bd38      	pop	{r3, r4, r5, pc}
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
    6950:	4b12      	ldr	r3, [pc, #72]	; (699c <envelope_tick+0x7c>)
    6952:	1d20      	adds	r0, r4, #4
    6954:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6958:	f002 fdc2 	bl	94e0 <__tADSRT_tickNoInterp_veneer>
    695c:	4b10      	ldr	r3, [pc, #64]	; (69a0 <envelope_tick+0x80>)
    695e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    6962:	ed83 0a2c 	vstr	s0, [r3, #176]	; 0xb0
    6966:	e7e4      	b.n	6932 <envelope_tick+0x12>
    6968:	4b0c      	ldr	r3, [pc, #48]	; (699c <envelope_tick+0x7c>)
    696a:	1ca0      	adds	r0, r4, #2
    696c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6970:	f002 fdb6 	bl	94e0 <__tADSRT_tickNoInterp_veneer>
    6974:	4b0a      	ldr	r3, [pc, #40]	; (69a0 <envelope_tick+0x80>)
    6976:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    697a:	ed83 0a2a 	vstr	s0, [r3, #168]	; 0xa8
    697e:	e7d6      	b.n	692e <envelope_tick+0xe>
    6980:	4806      	ldr	r0, [pc, #24]	; (699c <envelope_tick+0x7c>)
    6982:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    6986:	f002 fdab 	bl	94e0 <__tADSRT_tickNoInterp_veneer>
    698a:	4b05      	ldr	r3, [pc, #20]	; (69a0 <envelope_tick+0x80>)
    698c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    6990:	ed83 0a28 	vstr	s0, [r3, #160]	; 0xa0
    6994:	e7c9      	b.n	692a <envelope_tick+0xa>
    6996:	bf00      	nop
    6998:	2001cf80 	.word	0x2001cf80
    699c:	2001cf84 	.word	0x2001cf84
    69a0:	2001d5bc 	.word	0x2001d5bc
    69a4:	f3af 8000 	nop.w
    69a8:	f3af 8000 	nop.w
    69ac:	f3af 8000 	nop.w
    69b0:	f3af 8000 	nop.w
    69b4:	f3af 8000 	nop.w
    69b8:	f3af 8000 	nop.w
    69bc:	f3af 8000 	nop.w

000069c0 <lfo_tick>:
{
    69c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    69c4:	f8df 804c 	ldr.w	r8, [pc, #76]	; 6a14 <lfo_tick+0x54>
    69c8:	b082      	sub	sp, #8
    69ca:	4d10      	ldr	r5, [pc, #64]	; (6a0c <lfo_tick+0x4c>)
    69cc:	4607      	mov	r7, r0
    69ce:	4e10      	ldr	r6, [pc, #64]	; (6a10 <lfo_tick+0x50>)
    69d0:	f108 0904 	add.w	r9, r8, #4
    69d4:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    69d8:	4644      	mov	r4, r8
			float sample = 0.0f;
    69da:	f04f 0a00 	mov.w	sl, #0
    69de:	eba4 0108 	sub.w	r1, r4, r8
		if (lfoOn[i])
    69e2:	f814 3b01 	ldrb.w	r3, [r4], #1
			lfoShapeTick[i](&sample,i, string);
    69e6:	463a      	mov	r2, r7
    69e8:	a801      	add	r0, sp, #4
		if (lfoOn[i])
    69ea:	b133      	cbz	r3, 69fa <lfo_tick+0x3a>
			lfoShapeTick[i](&sample,i, string);
    69ec:	6833      	ldr	r3, [r6, #0]
			float sample = 0.0f;
    69ee:	f8cd a004 	str.w	sl, [sp, #4]
			lfoShapeTick[i](&sample,i, string);
    69f2:	4798      	blx	r3
			sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    69f4:	9b01      	ldr	r3, [sp, #4]
    69f6:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
	for (int i = 0; i < NUM_LFOS; i++)
    69fa:	454c      	cmp	r4, r9
    69fc:	f106 0604 	add.w	r6, r6, #4
    6a00:	f105 0508 	add.w	r5, r5, #8
    6a04:	d1eb      	bne.n	69de <lfo_tick+0x1e>
}
    6a06:	b002      	add	sp, #8
    6a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6a0c:	2001d5bc 	.word	0x2001d5bc
    6a10:	2001d168 	.word	0x2001d168
    6a14:	2001d104 	.word	0x2001d104
    6a18:	f3af 8000 	nop.w
    6a1c:	f3af 8000 	nop.w

00006a20 <setEnvelopeAttack>:
	a = a + 0.001f;
    6a20:	eddf 7a05 	vldr	s15, [pc, #20]	; 6a38 <setEnvelopeAttack+0x18>
	tADSRT_setAttack(&envs[v][string], a);
    6a24:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6a28:	4b04      	ldr	r3, [pc, #16]	; (6a3c <setEnvelopeAttack+0x1c>)
    6a2a:	ee30 0a27 	vadd.f32	s0, s0, s15
    6a2e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6a32:	f002 be7d 	b.w	9730 <__tADSRT_setAttack_veneer>
    6a36:	bf00      	nop
    6a38:	3a83126f 	.word	0x3a83126f
    6a3c:	2001cf84 	.word	0x2001cf84

00006a40 <setEnvelopeDecay>:
	d = d + 0.001f;
    6a40:	eddf 7a05 	vldr	s15, [pc, #20]	; 6a58 <setEnvelopeDecay+0x18>
	tADSRT_setDecay(&envs[v][string], d);
    6a44:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6a48:	4b04      	ldr	r3, [pc, #16]	; (6a5c <setEnvelopeDecay+0x1c>)
    6a4a:	ee30 0a27 	vadd.f32	s0, s0, s15
    6a4e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6a52:	f002 bded 	b.w	9630 <__tADSRT_setDecay_veneer>
    6a56:	bf00      	nop
    6a58:	3a83126f 	.word	0x3a83126f
    6a5c:	2001cf84 	.word	0x2001cf84

00006a60 <setEnvelopeSustain>:
	tADSRT_setSustain(&envs[v][string], s);
    6a60:	4b03      	ldr	r3, [pc, #12]	; (6a70 <setEnvelopeSustain+0x10>)
    6a62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6a66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6a6a:	f002 bc99 	b.w	93a0 <__tADSRT_setSustain_veneer>
    6a6e:	bf00      	nop
    6a70:	2001cf84 	.word	0x2001cf84
    6a74:	f3af 8000 	nop.w
    6a78:	f3af 8000 	nop.w
    6a7c:	f3af 8000 	nop.w

00006a80 <setEnvelopeRelease>:
	r = r + 0.001f;
    6a80:	eddf 7a05 	vldr	s15, [pc, #20]	; 6a98 <setEnvelopeRelease+0x18>
	tADSRT_setRelease(&envs[v][string], r);
    6a84:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6a88:	4b04      	ldr	r3, [pc, #16]	; (6a9c <setEnvelopeRelease+0x1c>)
    6a8a:	ee30 0a27 	vadd.f32	s0, s0, s15
    6a8e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6a92:	f002 bcd5 	b.w	9440 <__tADSRT_setRelease_veneer>
    6a96:	bf00      	nop
    6a98:	3a83126f 	.word	0x3a83126f
    6a9c:	2001cf84 	.word	0x2001cf84

00006aa0 <setEnvelopeLeak>:
	tADSRT_setLeakFactor(&envs[v][string], 0.99995f + 0.00005f*(1.f-leak));
    6aa0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    6aa4:	eddf 6a08 	vldr	s13, [pc, #32]	; 6ac8 <setEnvelopeLeak+0x28>
    6aa8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 6acc <setEnvelopeLeak+0x2c>
    6aac:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6ab0:	4b07      	ldr	r3, [pc, #28]	; (6ad0 <setEnvelopeLeak+0x30>)
    6ab2:	ee77 7ac0 	vsub.f32	s15, s15, s0
    6ab6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6aba:	eea7 7aa6 	vfma.f32	s14, s15, s13
    6abe:	eeb0 0a47 	vmov.f32	s0, s14
    6ac2:	f002 bc69 	b.w	9398 <__tADSRT_setLeakFactor_veneer>
    6ac6:	bf00      	nop
    6ac8:	3851b717 	.word	0x3851b717
    6acc:	3f7ffcb9 	.word	0x3f7ffcb9
    6ad0:	2001cf84 	.word	0x2001cf84
    6ad4:	f3af 8000 	nop.w
    6ad8:	f3af 8000 	nop.w
    6adc:	f3af 8000 	nop.w

00006ae0 <setAmp>:
	amplitude[string] = amp;
    6ae0:	4b02      	ldr	r3, [pc, #8]	; (6aec <setAmp+0xc>)
    6ae2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    6ae6:	ed81 0a00 	vstr	s0, [r1]
}
    6aea:	4770      	bx	lr
    6aec:	2001cd40 	.word	0x2001cd40
    6af0:	f3af 8000 	nop.w
    6af4:	f3af 8000 	nop.w
    6af8:	f3af 8000 	nop.w
    6afc:	f3af 8000 	nop.w

00006b00 <setMaster>:
	finalMaster[string] = amp;
    6b00:	4b02      	ldr	r3, [pc, #8]	; (6b0c <setMaster+0xc>)
    6b02:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    6b06:	ed81 0a00 	vstr	s0, [r1]
}
    6b0a:	4770      	bx	lr
    6b0c:	2001cff4 	.word	0x2001cff4
    6b10:	f3af 8000 	nop.w
    6b14:	f3af 8000 	nop.w
    6b18:	f3af 8000 	nop.w
    6b1c:	f3af 8000 	nop.w

00006b20 <setTranspose>:
	transpose = in;
    6b20:	4b01      	ldr	r3, [pc, #4]	; (6b28 <setTranspose+0x8>)
    6b22:	ed83 0a00 	vstr	s0, [r3]
}
    6b26:	4770      	bx	lr
    6b28:	2001d738 	.word	0x2001d738
    6b2c:	f3af 8000 	nop.w
    6b30:	f3af 8000 	nop.w
    6b34:	f3af 8000 	nop.w
    6b38:	f3af 8000 	nop.w
    6b3c:	f3af 8000 	nop.w

00006b40 <setPitchBendRange>:
	bendRangeMultiplier = 1.0f / (16383.0f / (in * 2.0f));
    6b40:	eddf 7a03 	vldr	s15, [pc, #12]	; 6b50 <setPitchBendRange+0x10>
    6b44:	4b03      	ldr	r3, [pc, #12]	; (6b54 <setPitchBendRange+0x14>)
    6b46:	ee20 0a27 	vmul.f32	s0, s0, s15
    6b4a:	ed83 0a00 	vstr	s0, [r3]
}
    6b4e:	4770      	bx	lr
    6b50:	39000200 	.word	0x39000200
    6b54:	20000890 	.word	0x20000890
    6b58:	f3af 8000 	nop.w
    6b5c:	f3af 8000 	nop.w

00006b60 <setFinalLowpass>:
	tSVF_setFreqFast(&finalLowpass[string], in);
    6b60:	4802      	ldr	r0, [pc, #8]	; (6b6c <setFinalLowpass+0xc>)
    6b62:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6b66:	f002 bc83 	b.w	9470 <__tSVF_setFreqFast_veneer>
    6b6a:	bf00      	nop
    6b6c:	2001cfec 	.word	0x2001cfec
    6b70:	f3af 8000 	nop.w
    6b74:	f3af 8000 	nop.w
    6b78:	f3af 8000 	nop.w
    6b7c:	f3af 8000 	nop.w

00006b80 <tickMappings>:
{
    6b80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int i = 0; i < numMappings; i++)
    6b84:	f8df 915c 	ldr.w	r9, [pc, #348]	; 6ce4 <tickMappings+0x164>
	interruptChecker = 0;
    6b88:	f04f 0b00 	mov.w	fp, #0
    6b8c:	4b51      	ldr	r3, [pc, #324]	; (6cd4 <tickMappings+0x154>)
	for (int i = 0; i < numMappings; i++)
    6b8e:	f899 2000 	ldrb.w	r2, [r9]
{
    6b92:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 0;
    6b96:	f883 b000 	strb.w	fp, [r3]
	for (int i = 0; i < numMappings; i++)
    6b9a:	2a00      	cmp	r2, #0
    6b9c:	f000 8087 	beq.w	6cae <tickMappings+0x12e>
    6ba0:	4c4d      	ldr	r4, [pc, #308]	; (6cd8 <tickMappings+0x158>)
			for (int v = 0; v < numStringsThisBoard; v++)
    6ba2:	f8df 8144 	ldr.w	r8, [pc, #324]	; 6ce8 <tickMappings+0x168>
    6ba6:	e004      	b.n	6bb2 <tickMappings+0x32>
	for (int i = 0; i < numMappings; i++)
    6ba8:	f10b 0b01 	add.w	fp, fp, #1
    6bac:	344c      	adds	r4, #76	; 0x4c
    6bae:	455a      	cmp	r2, fp
    6bb0:	dd7d      	ble.n	6cae <tickMappings+0x12e>
		if (mappings[i].destNumber != 255)
    6bb2:	f814 3c08 	ldrb.w	r3, [r4, #-8]
    6bb6:	2bff      	cmp	r3, #255	; 0xff
    6bb8:	d0f6      	beq.n	6ba8 <tickMappings+0x28>
			for (int v = 0; v < numStringsThisBoard; v++)
    6bba:	f898 3000 	ldrb.w	r3, [r8]
    6bbe:	2b00      	cmp	r3, #0
    6bc0:	d0f2      	beq.n	6ba8 <tickMappings+0x28>
    6bc2:	4b46      	ldr	r3, [pc, #280]	; (6cdc <tickMappings+0x15c>)
    6bc4:	4626      	mov	r6, r4
    6bc6:	2500      	movs	r5, #0
    6bc8:	eb03 07cb 	add.w	r7, r3, fp, lsl #3
					if (mappings[i].hookActive[j])
    6bcc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    6bd0:	2b00      	cmp	r3, #0
    6bd2:	d070      	beq.n	6cb6 <tickMappings+0x136>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    6bd4:	6832      	ldr	r2, [r6, #0]
    6bd6:	69f3      	ldr	r3, [r6, #28]
    6bd8:	ed92 8a00 	vldr	s16, [r2]
    6bdc:	ed93 7a00 	vldr	s14, [r3]
    6be0:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    6be4:	ee28 8a07 	vmul.f32	s16, s16, s14
						if (mappings[i].sourceSmoothed[j])
    6be8:	7e21      	ldrb	r1, [r4, #24]
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    6bea:	ee28 8a27 	vmul.f32	s16, s16, s15
						if (mappings[i].sourceSmoothed[j])
    6bee:	2900      	cmp	r1, #0
    6bf0:	d069      	beq.n	6cc6 <tickMappings+0x146>
							smoothedValue += sum;
    6bf2:	eef0 7a48 	vmov.f32	s15, s16
				float unsmoothedValue = 0.0f;
    6bf6:	ed9f 8a3a 	vldr	s16, [pc, #232]	; 6ce0 <tickMappings+0x160>
					if (mappings[i].hookActive[j])
    6bfa:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    6bfe:	b183      	cbz	r3, 6c22 <tickMappings+0xa2>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    6c00:	68b2      	ldr	r2, [r6, #8]
    6c02:	6a73      	ldr	r3, [r6, #36]	; 0x24
    6c04:	ed92 7a00 	vldr	s14, [r2]
    6c08:	ed93 6a00 	vldr	s12, [r3]
    6c0c:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
    6c10:	ee27 7a06 	vmul.f32	s14, s14, s12
						if (mappings[i].sourceSmoothed[j])
    6c14:	7e61      	ldrb	r1, [r4, #25]
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    6c16:	ee27 7a26 	vmul.f32	s14, s14, s13
						if (mappings[i].sourceSmoothed[j])
    6c1a:	2900      	cmp	r1, #0
    6c1c:	d156      	bne.n	6ccc <tickMappings+0x14c>
							unsmoothedValue += sum;
    6c1e:	ee38 8a07 	vadd.f32	s16, s16, s14
					if (mappings[i].hookActive[j])
    6c22:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    6c26:	b183      	cbz	r3, 6c4a <tickMappings+0xca>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    6c28:	6932      	ldr	r2, [r6, #16]
    6c2a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    6c2c:	ed92 7a00 	vldr	s14, [r2]
    6c30:	ed93 6a00 	vldr	s12, [r3]
    6c34:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    6c38:	ee27 7a06 	vmul.f32	s14, s14, s12
						if (mappings[i].sourceSmoothed[j])
    6c3c:	7ea1      	ldrb	r1, [r4, #26]
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    6c3e:	ee27 7a26 	vmul.f32	s14, s14, s13
						if (mappings[i].sourceSmoothed[j])
    6c42:	2900      	cmp	r1, #0
    6c44:	d13c      	bne.n	6cc0 <tickMappings+0x140>
							unsmoothedValue += sum;
    6c46:	ee38 8a07 	vadd.f32	s16, s16, s14
				smoothedValue += mappings[i].dest->zeroToOneVal[v];
    6c4a:	f854 3c04 	ldr.w	r3, [r4, #-4]
				tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
    6c4e:	4638      	mov	r0, r7
			for (int v = 0; v < numStringsThisBoard; v++)
    6c50:	3604      	adds	r6, #4
				smoothedValue += mappings[i].dest->zeroToOneVal[v];
    6c52:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    6c56:	ed93 0a00 	vldr	s0, [r3]
				tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
    6c5a:	ee37 0a80 	vadd.f32	s0, s15, s0
    6c5e:	f002 fbcf 	bl	9400 <__tExpSmooth_setDest_veneer>
				smoothedValue = tExpSmooth_tick(&mapSmoothers[i][v]);
    6c62:	4638      	mov	r0, r7
    6c64:	f002 fc64 	bl	9530 <__tExpSmooth_tick_veneer>
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    6c68:	f854 ac04 	ldr.w	sl, [r4, #-4]
    6c6c:	ee30 0a08 	vadd.f32	s0, s0, s16
			for (int v = 0; v < numStringsThisBoard; v++)
    6c70:	3704      	adds	r7, #4
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    6c72:	f8da 3010 	ldr.w	r3, [sl, #16]
    6c76:	4798      	blx	r3
    6c78:	1cab      	adds	r3, r5, #2
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    6c7a:	4629      	mov	r1, r5
			for (int v = 0; v < numStringsThisBoard; v++)
    6c7c:	3501      	adds	r5, #1
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    6c7e:	eb0a 0283 	add.w	r2, sl, r3, lsl #2
    6c82:	ed82 0a00 	vstr	s0, [r2]
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    6c86:	f854 0c04 	ldr.w	r0, [r4, #-4]
    6c8a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    6c8e:	6942      	ldr	r2, [r0, #20]
    6c90:	7e00      	ldrb	r0, [r0, #24]
    6c92:	ed93 0a00 	vldr	s0, [r3]
    6c96:	4790      	blx	r2
			for (int v = 0; v < numStringsThisBoard; v++)
    6c98:	f898 3000 	ldrb.w	r3, [r8]
    6c9c:	42ab      	cmp	r3, r5
    6c9e:	dc95      	bgt.n	6bcc <tickMappings+0x4c>
	for (int i = 0; i < numMappings; i++)
    6ca0:	f899 2000 	ldrb.w	r2, [r9]
    6ca4:	f10b 0b01 	add.w	fp, fp, #1
    6ca8:	344c      	adds	r4, #76	; 0x4c
    6caa:	455a      	cmp	r2, fp
    6cac:	dc81      	bgt.n	6bb2 <tickMappings+0x32>
}
    6cae:	ecbd 8b02 	vpop	{d8}
    6cb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				float smoothedValue = 0.0f;
    6cb6:	eddf 7a0a 	vldr	s15, [pc, #40]	; 6ce0 <tickMappings+0x160>
				float unsmoothedValue = 0.0f;
    6cba:	eeb0 8a67 	vmov.f32	s16, s15
    6cbe:	e79c      	b.n	6bfa <tickMappings+0x7a>
							smoothedValue += sum;
    6cc0:	ee77 7a87 	vadd.f32	s15, s15, s14
    6cc4:	e7c1      	b.n	6c4a <tickMappings+0xca>
				float smoothedValue = 0.0f;
    6cc6:	eddf 7a06 	vldr	s15, [pc, #24]	; 6ce0 <tickMappings+0x160>
    6cca:	e796      	b.n	6bfa <tickMappings+0x7a>
							smoothedValue += sum;
    6ccc:	ee77 7a87 	vadd.f32	s15, s15, s14
    6cd0:	e7a7      	b.n	6c22 <tickMappings+0xa2>
    6cd2:	bf00      	nop
    6cd4:	2001632f 	.word	0x2001632f
    6cd8:	2001836c 	.word	0x2001836c
    6cdc:	2001d1e8 	.word	0x2001d1e8
    6ce0:	00000000 	.word	0x00000000
    6ce4:	20018fac 	.word	0x20018fac
    6ce8:	200004b1 	.word	0x200004b1
    6cec:	f3af 8000 	nop.w
    6cf0:	f3af 8000 	nop.w
    6cf4:	f3af 8000 	nop.w
    6cf8:	f3af 8000 	nop.w
    6cfc:	f3af 8000 	nop.w

00006d00 <lfoSawSquareTick>:
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
    6d00:	4b05      	ldr	r3, [pc, #20]	; (6d18 <lfoSawSquareTick+0x18>)
    6d02:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    6d06:	b510      	push	{r4, lr}
    6d08:	4604      	mov	r4, r0
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
    6d0a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    6d0e:	f002 faf3 	bl	92f8 <__tSawSquareLFO_tick_veneer>
    6d12:	ed84 0a00 	vstr	s0, [r4]
}
    6d16:	bd10      	pop	{r4, pc}
    6d18:	2001d148 	.word	0x2001d148
    6d1c:	f3af 8000 	nop.w

00006d20 <lfoSineTriTick>:
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
    6d20:	4b05      	ldr	r3, [pc, #20]	; (6d38 <lfoSineTriTick+0x18>)
    6d22:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    6d26:	b510      	push	{r4, lr}
    6d28:	4604      	mov	r4, r0
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
    6d2a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    6d2e:	f002 fbe3 	bl	94f8 <__tSineTriLFO_tick_veneer>
    6d32:	ed84 0a00 	vstr	s0, [r4]
}
    6d36:	bd10      	pop	{r4, pc}
    6d38:	2001d198 	.word	0x2001d198
    6d3c:	f3af 8000 	nop.w

00006d40 <lfoSineTick>:
    *sample = tCycle_tick(&lfoSine[v][string]);
    6d40:	4b05      	ldr	r3, [pc, #20]	; (6d58 <lfoSineTick+0x18>)
    6d42:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    6d46:	b510      	push	{r4, lr}
    6d48:	4604      	mov	r4, r0
    *sample = tCycle_tick(&lfoSine[v][string]);
    6d4a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    6d4e:	f002 fbe7 	bl	9520 <__tCycle_tick_veneer>
    6d52:	ed84 0a00 	vstr	s0, [r4]
}
    6d56:	bd10      	pop	{r4, pc}
    6d58:	2001d178 	.word	0x2001d178
    6d5c:	f3af 8000 	nop.w

00006d60 <lfoTriTick>:
    *sample = tTriLFO_tick(&lfoTri[v][string]);
    6d60:	4b05      	ldr	r3, [pc, #20]	; (6d78 <lfoTriTick+0x18>)
    6d62:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    6d66:	b510      	push	{r4, lr}
    6d68:	4604      	mov	r4, r0
    *sample = tTriLFO_tick(&lfoTri[v][string]);
    6d6a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    6d6e:	f002 fcbb 	bl	96e8 <__tTriLFO_tick_veneer>
    6d72:	ed84 0a00 	vstr	s0, [r4]
}
    6d76:	bd10      	pop	{r4, pc}
    6d78:	2001d1b8 	.word	0x2001d1b8
    6d7c:	f3af 8000 	nop.w

00006d80 <lfoSawTick>:
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
    6d80:	4b08      	ldr	r3, [pc, #32]	; (6da4 <lfoSawTick+0x24>)
    6d82:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    6d86:	b510      	push	{r4, lr}
    6d88:	4604      	mov	r4, r0
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
    6d8a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    6d8e:	f002 fac7 	bl	9320 <__tIntPhasor_tick_veneer>
    6d92:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    6d96:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    6d9a:	eee0 7a07 	vfma.f32	s15, s0, s14
    6d9e:	edc4 7a00 	vstr	s15, [r4]
}
    6da2:	bd10      	pop	{r4, pc}
    6da4:	2001d128 	.word	0x2001d128
    6da8:	f3af 8000 	nop.w
    6dac:	f3af 8000 	nop.w
    6db0:	f3af 8000 	nop.w
    6db4:	f3af 8000 	nop.w
    6db8:	f3af 8000 	nop.w
    6dbc:	f3af 8000 	nop.w

00006dc0 <lfoPulseTick>:
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
    6dc0:	4b05      	ldr	r3, [pc, #20]	; (6dd8 <lfoPulseTick+0x18>)
    6dc2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    6dc6:	b510      	push	{r4, lr}
    6dc8:	4604      	mov	r4, r0
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
    6dca:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    6dce:	f002 fab7 	bl	9340 <__tSquareLFO_tick_veneer>
    6dd2:	ed84 0a00 	vstr	s0, [r4]
}
    6dd6:	bd10      	pop	{r4, pc}
    6dd8:	2001d108 	.word	0x2001d108
    6ddc:	f3af 8000 	nop.w

00006de0 <lfoSawSquareSetRate>:
	tSawSquareLFO_setFreq(&lfoSawSquare[v][string],r);
    6de0:	4b03      	ldr	r3, [pc, #12]	; (6df0 <lfoSawSquareSetRate+0x10>)
    6de2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6de6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6dea:	f002 bc51 	b.w	9690 <__tSawSquareLFO_setFreq_veneer>
    6dee:	bf00      	nop
    6df0:	2001d148 	.word	0x2001d148
    6df4:	f3af 8000 	nop.w
    6df8:	f3af 8000 	nop.w
    6dfc:	f3af 8000 	nop.w

00006e00 <lfoSineTriSetRate>:
	tSineTriLFO_setFreq(&lfoSineTri[v][string],r);
    6e00:	4b03      	ldr	r3, [pc, #12]	; (6e10 <lfoSineTriSetRate+0x10>)
    6e02:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6e06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6e0a:	f002 bb05 	b.w	9418 <__tSineTriLFO_setFreq_veneer>
    6e0e:	bf00      	nop
    6e10:	2001d198 	.word	0x2001d198
    6e14:	f3af 8000 	nop.w
    6e18:	f3af 8000 	nop.w
    6e1c:	f3af 8000 	nop.w

00006e20 <lfoSineSetRate>:
	tCycle_setFreq(&lfoSine[v][string], r);
    6e20:	4b03      	ldr	r3, [pc, #12]	; (6e30 <lfoSineSetRate+0x10>)
    6e22:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6e26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6e2a:	f002 ba29 	b.w	9280 <__tCycle_setFreq_veneer>
    6e2e:	bf00      	nop
    6e30:	2001d178 	.word	0x2001d178
    6e34:	f3af 8000 	nop.w
    6e38:	f3af 8000 	nop.w
    6e3c:	f3af 8000 	nop.w

00006e40 <lfoTriSetRate>:
	tTriLFO_setFreq(&lfoTri[v][string], r);
    6e40:	4b03      	ldr	r3, [pc, #12]	; (6e50 <lfoTriSetRate+0x10>)
    6e42:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6e46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6e4a:	f002 bc95 	b.w	9778 <__tTriLFO_setFreq_veneer>
    6e4e:	bf00      	nop
    6e50:	2001d1b8 	.word	0x2001d1b8
    6e54:	f3af 8000 	nop.w
    6e58:	f3af 8000 	nop.w
    6e5c:	f3af 8000 	nop.w

00006e60 <lfoSawSetRate>:
	tIntPhasor_setFreq(&lfoSaw[v][string], r);
    6e60:	4b03      	ldr	r3, [pc, #12]	; (6e70 <lfoSawSetRate+0x10>)
    6e62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6e66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6e6a:	f002 bb79 	b.w	9560 <__tIntPhasor_setFreq_veneer>
    6e6e:	bf00      	nop
    6e70:	2001d128 	.word	0x2001d128
    6e74:	f3af 8000 	nop.w
    6e78:	f3af 8000 	nop.w
    6e7c:	f3af 8000 	nop.w

00006e80 <lfoPulseSetRate>:
	 tSquareLFO_setFreq(&lfoPulse[v][string], r);
    6e80:	4b03      	ldr	r3, [pc, #12]	; (6e90 <lfoPulseSetRate+0x10>)
    6e82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6e86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6e8a:	f002 baed 	b.w	9468 <__tSquareLFO_setFreq_veneer>
    6e8e:	bf00      	nop
    6e90:	2001d108 	.word	0x2001d108
    6e94:	f3af 8000 	nop.w
    6e98:	f3af 8000 	nop.w
    6e9c:	f3af 8000 	nop.w

00006ea0 <lfoSawSquareSetPhase>:
	tSawSquareLFO_setPhase(&lfoSawSquare[v][string],p);
    6ea0:	4b03      	ldr	r3, [pc, #12]	; (6eb0 <lfoSawSquareSetPhase+0x10>)
    6ea2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6ea6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6eaa:	f002 ba81 	b.w	93b0 <__tSawSquareLFO_setPhase_veneer>
    6eae:	bf00      	nop
    6eb0:	2001d148 	.word	0x2001d148
    6eb4:	f3af 8000 	nop.w
    6eb8:	f3af 8000 	nop.w
    6ebc:	f3af 8000 	nop.w

00006ec0 <lfoSineTriSetPhase>:
	tSineTriLFO_setPhase(&lfoSineTri[v][string], p);
    6ec0:	4b03      	ldr	r3, [pc, #12]	; (6ed0 <lfoSineTriSetPhase+0x10>)
    6ec2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6ec6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6eca:	f002 bbd9 	b.w	9680 <__tSineTriLFO_setPhase_veneer>
    6ece:	bf00      	nop
    6ed0:	2001d198 	.word	0x2001d198
    6ed4:	f3af 8000 	nop.w
    6ed8:	f3af 8000 	nop.w
    6edc:	f3af 8000 	nop.w

00006ee0 <lfoSineSetPhase>:
	tCycle_setPhase(&lfoSine[v][string],p);
    6ee0:	4b03      	ldr	r3, [pc, #12]	; (6ef0 <lfoSineSetPhase+0x10>)
    6ee2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6ee6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6eea:	f002 ba7d 	b.w	93e8 <__tCycle_setPhase_veneer>
    6eee:	bf00      	nop
    6ef0:	2001d178 	.word	0x2001d178
    6ef4:	f3af 8000 	nop.w
    6ef8:	f3af 8000 	nop.w
    6efc:	f3af 8000 	nop.w

00006f00 <lfoTriSetPhase>:
	tTriLFO_setPhase(&lfoTri[v][string],p);
    6f00:	4b03      	ldr	r3, [pc, #12]	; (6f10 <lfoTriSetPhase+0x10>)
    6f02:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6f06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6f0a:	f002 ba5d 	b.w	93c8 <__tTriLFO_setPhase_veneer>
    6f0e:	bf00      	nop
    6f10:	2001d1b8 	.word	0x2001d1b8
    6f14:	f3af 8000 	nop.w
    6f18:	f3af 8000 	nop.w
    6f1c:	f3af 8000 	nop.w

00006f20 <lfoSawSetPhase>:
	tIntPhasor_setPhase(&lfoSaw[v][string], p);
    6f20:	4b03      	ldr	r3, [pc, #12]	; (6f30 <lfoSawSetPhase+0x10>)
    6f22:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6f26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6f2a:	f002 bb31 	b.w	9590 <__tIntPhasor_setPhase_veneer>
    6f2e:	bf00      	nop
    6f30:	2001d128 	.word	0x2001d128
    6f34:	f3af 8000 	nop.w
    6f38:	f3af 8000 	nop.w
    6f3c:	f3af 8000 	nop.w

00006f40 <lfoPulseSetPhase>:
	tSquareLFO_setPhase(&lfoPulse[v][string], p);
    6f40:	4b03      	ldr	r3, [pc, #12]	; (6f50 <lfoPulseSetPhase+0x10>)
    6f42:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6f46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6f4a:	f002 bb75 	b.w	9638 <__tSquareLFO_setPhase_veneer>
    6f4e:	bf00      	nop
    6f50:	2001d108 	.word	0x2001d108
    6f54:	f3af 8000 	nop.w
    6f58:	f3af 8000 	nop.w
    6f5c:	f3af 8000 	nop.w

00006f60 <lfoSawSquareSetShape>:
	tSawSquareLFO_setShape(&lfoSawSquare[v][string],s);
    6f60:	4b03      	ldr	r3, [pc, #12]	; (6f70 <lfoSawSquareSetShape+0x10>)
    6f62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6f66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6f6a:	f002 ba29 	b.w	93c0 <__tSawSquareLFO_setShape_veneer>
    6f6e:	bf00      	nop
    6f70:	2001d148 	.word	0x2001d148
    6f74:	f3af 8000 	nop.w
    6f78:	f3af 8000 	nop.w
    6f7c:	f3af 8000 	nop.w

00006f80 <lfoSineTriSetShape>:
	tSineTriLFO_setShape(&lfoSineTri[v][string],s);
    6f80:	4b03      	ldr	r3, [pc, #12]	; (6f90 <lfoSineTriSetShape+0x10>)
    6f82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6f86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6f8a:	f002 bb21 	b.w	95d0 <__tSineTriLFO_setShape_veneer>
    6f8e:	bf00      	nop
    6f90:	2001d198 	.word	0x2001d198
    6f94:	f3af 8000 	nop.w
    6f98:	f3af 8000 	nop.w
    6f9c:	f3af 8000 	nop.w

00006fa0 <lfoSineSetShape>:
}
    6fa0:	4770      	bx	lr
    6fa2:	bf00      	nop
    6fa4:	f3af 8000 	nop.w
    6fa8:	f3af 8000 	nop.w
    6fac:	f3af 8000 	nop.w
    6fb0:	f3af 8000 	nop.w
    6fb4:	f3af 8000 	nop.w
    6fb8:	f3af 8000 	nop.w
    6fbc:	f3af 8000 	nop.w

00006fc0 <lfoTriSetShape>:
    6fc0:	4770      	bx	lr
    6fc2:	bf00      	nop
    6fc4:	f3af 8000 	nop.w
    6fc8:	f3af 8000 	nop.w
    6fcc:	f3af 8000 	nop.w
    6fd0:	f3af 8000 	nop.w
    6fd4:	f3af 8000 	nop.w
    6fd8:	f3af 8000 	nop.w
    6fdc:	f3af 8000 	nop.w

00006fe0 <lfoSawSetShape>:
    6fe0:	4770      	bx	lr
    6fe2:	bf00      	nop
    6fe4:	f3af 8000 	nop.w
    6fe8:	f3af 8000 	nop.w
    6fec:	f3af 8000 	nop.w
    6ff0:	f3af 8000 	nop.w
    6ff4:	f3af 8000 	nop.w
    6ff8:	f3af 8000 	nop.w
    6ffc:	f3af 8000 	nop.w

00007000 <lfoPulseSetShape>:
	tSquareLFO_setPulseWidth(&lfoPulse[v][string], s);
    7000:	4b03      	ldr	r3, [pc, #12]	; (7010 <lfoPulseSetShape+0x10>)
    7002:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7006:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    700a:	f002 babd 	b.w	9588 <__tSquareLFO_setPulseWidth_veneer>
    700e:	bf00      	nop
    7010:	2001d108 	.word	0x2001d108
    7014:	f3af 8000 	nop.w
    7018:	f3af 8000 	nop.w
    701c:	f3af 8000 	nop.w

00007020 <clipperGainSet>:
	param1[v][string] = dbToATableLookup(value * 24.0f);
    7020:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
{
    7024:	b538      	push	{r3, r4, r5, lr}
    7026:	4605      	mov	r5, r0
    7028:	460c      	mov	r4, r1
	param1[v][string] = dbToATableLookup(value * 24.0f);
    702a:	ee20 0a27 	vmul.f32	s0, s0, s15
    702e:	f002 fa0f 	bl	9450 <__dbToATableLookup_veneer>
    7032:	4b04      	ldr	r3, [pc, #16]	; (7044 <clipperGainSet+0x24>)
    7034:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    7038:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    703c:	ed83 0a00 	vstr	s0, [r3]
}
    7040:	bd38      	pop	{r3, r4, r5, pc}
    7042:	bf00      	nop
    7044:	2001d3d8 	.word	0x2001d3d8
    7048:	f3af 8000 	nop.w
    704c:	f3af 8000 	nop.w
    7050:	f3af 8000 	nop.w
    7054:	f3af 8000 	nop.w
    7058:	f3af 8000 	nop.w
    705c:	f3af 8000 	nop.w

00007060 <wavefolderParam1>:
	param1[v][string] = dbToATableLookup(value * 12.0f);
    7060:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
{
    7064:	b538      	push	{r3, r4, r5, lr}
    7066:	4605      	mov	r5, r0
    7068:	460c      	mov	r4, r1
	param1[v][string] = dbToATableLookup(value * 12.0f);
    706a:	ee20 0a27 	vmul.f32	s0, s0, s15
    706e:	f002 f9ef 	bl	9450 <__dbToATableLookup_veneer>
    7072:	4b04      	ldr	r3, [pc, #16]	; (7084 <wavefolderParam1+0x24>)
    7074:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    7078:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    707c:	ed83 0a00 	vstr	s0, [r3]
}
    7080:	bd38      	pop	{r3, r4, r5, pc}
    7082:	bf00      	nop
    7084:	2001d3d8 	.word	0x2001d3d8
    7088:	f3af 8000 	nop.w
    708c:	f3af 8000 	nop.w
    7090:	f3af 8000 	nop.w
    7094:	f3af 8000 	nop.w
    7098:	f3af 8000 	nop.w
    709c:	f3af 8000 	nop.w

000070a0 <wavefolderParam3>:
	invCurFB[v][string] = (1.0f / (1.0f + value));
    70a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    70a4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    70a8:	4b07      	ldr	r3, [pc, #28]	; (70c8 <wavefolderParam3+0x28>)
	param3[v][string] = value;
    70aa:	4a08      	ldr	r2, [pc, #32]	; (70cc <wavefolderParam3+0x2c>)
	invCurFB[v][string] = (1.0f / (1.0f + value));
    70ac:	ee70 6a27 	vadd.f32	s13, s0, s15
    70b0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	param3[v][string] = value;
    70b4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	invCurFB[v][string] = (1.0f / (1.0f + value));
    70b8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	param3[v][string] = value;
    70bc:	ed82 0a00 	vstr	s0, [r2]
	invCurFB[v][string] = (1.0f / (1.0f + value));
    70c0:	ed83 7a00 	vstr	s14, [r3]
}
    70c4:	4770      	bx	lr
    70c6:	bf00      	nop
    70c8:	2001d0e4 	.word	0x2001d0e4
    70cc:	2001d418 	.word	0x2001d418
    70d0:	f3af 8000 	nop.w
    70d4:	f3af 8000 	nop.w
    70d8:	f3af 8000 	nop.w
    70dc:	f3af 8000 	nop.w

000070e0 <tiltParam1>:
{
    70e0:	b510      	push	{r4, lr}
	tVZFilterLS_setGain(&shelf1[v][string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    70e2:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    70e6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
    70ea:	ed2d 8b02 	vpush	{d8}
	tVZFilterLS_setGain(&shelf1[v][string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    70ee:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
    70f2:	0084      	lsls	r4, r0, #2
{
    70f4:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilterLS_setGain(&shelf1[v][string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    70f8:	eee0 7a68 	vfms.f32	s15, s0, s17
    70fc:	eeb0 0a67 	vmov.f32	s0, s15
    7100:	f002 f9a6 	bl	9450 <__dbToATableLookup_veneer>
    7104:	4808      	ldr	r0, [pc, #32]	; (7128 <tiltParam1+0x48>)
    7106:	4420      	add	r0, r4
    7108:	f002 f982 	bl	9410 <__tVZFilterLS_setGain_veneer>
	tVZFilterHS_setGain(&shelf2[v][string], dbToATableLookup((value * 30.0f) - 15.0f));
    710c:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
    7110:	eea8 0a28 	vfma.f32	s0, s16, s17
    7114:	f002 f99c 	bl	9450 <__dbToATableLookup_veneer>
    7118:	4804      	ldr	r0, [pc, #16]	; (712c <tiltParam1+0x4c>)
}
    711a:	ecbd 8b02 	vpop	{d8}
	tVZFilterHS_setGain(&shelf2[v][string], dbToATableLookup((value * 30.0f) - 15.0f));
    711e:	4420      	add	r0, r4
}
    7120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilterHS_setGain(&shelf2[v][string], dbToATableLookup((value * 30.0f) - 15.0f));
    7124:	f002 bb10 	b.w	9748 <__tVZFilterHS_setGain_veneer>
    7128:	2001d54c 	.word	0x2001d54c
    712c:	2001d56c 	.word	0x2001d56c
    7130:	f3af 8000 	nop.w
    7134:	f3af 8000 	nop.w
    7138:	f3af 8000 	nop.w
    713c:	f3af 8000 	nop.w

00007140 <tiltParam2>:
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    7140:	eef3 0a0a 	vmov.f32	s1, #58	; 0x41d00000  26.0
    7144:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 7178 <tiltParam2+0x38>
    7148:	eddf 7a0c 	vldr	s15, [pc, #48]	; 717c <tiltParam2+0x3c>
    714c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 7180 <tiltParam2+0x40>
    7150:	eee0 0a07 	vfma.f32	s1, s0, s14
    7154:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 7184 <tiltParam2+0x44>
{
    7158:	b538      	push	{r3, r4, r5, lr}
    715a:	4605      	mov	r5, r0
    715c:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    715e:	ee60 0aa7 	vmul.f32	s1, s1, s15
    7162:	f002 f999 	bl	9498 <__LEAF_clip_veneer>
	tVZFilterBell_setFreq(&bell1[v][string], value);
    7166:	4b08      	ldr	r3, [pc, #32]	; (7188 <tiltParam2+0x48>)
    7168:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    716c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    7170:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterBell_setFreq(&bell1[v][string], value);
    7174:	f002 b974 	b.w	9460 <__tVZFilterBell_setFreq_veneer>
    7178:	429a0000 	.word	0x429a0000
    717c:	420fb824 	.word	0x420fb824
    7180:	457ff000 	.word	0x457ff000
    7184:	00000000 	.word	0x00000000
    7188:	2001cd78 	.word	0x2001cd78
    718c:	f3af 8000 	nop.w
    7190:	f3af 8000 	nop.w
    7194:	f3af 8000 	nop.w
    7198:	f3af 8000 	nop.w
    719c:	f3af 8000 	nop.w

000071a0 <tiltParam3>:
	tVZFilterBell_setBandwidth(&bell1[v][string], (value +1.0f)*6.0f);//TODO: make this match plugin
    71a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    71a4:	4b06      	ldr	r3, [pc, #24]	; (71c0 <tiltParam3+0x20>)
    71a6:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
    71aa:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    71ae:	ee30 0a07 	vadd.f32	s0, s0, s14
    71b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    71b6:	ee20 0a27 	vmul.f32	s0, s0, s15
    71ba:	f002 b8b9 	b.w	9330 <__tVZFilterBell_setBandwidth_veneer>
    71be:	bf00      	nop
    71c0:	2001cd78 	.word	0x2001cd78
    71c4:	f3af 8000 	nop.w
    71c8:	f3af 8000 	nop.w
    71cc:	f3af 8000 	nop.w
    71d0:	f3af 8000 	nop.w
    71d4:	f3af 8000 	nop.w
    71d8:	f3af 8000 	nop.w
    71dc:	f3af 8000 	nop.w

000071e0 <tiltParam4>:
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    71e0:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
    71e4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 720c <tiltParam4+0x2c>
{
    71e8:	b538      	push	{r3, r4, r5, lr}
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    71ea:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    71ee:	4605      	mov	r5, r0
    71f0:	460c      	mov	r4, r1
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    71f2:	eeb0 0a67 	vmov.f32	s0, s15
    71f6:	f002 f92b 	bl	9450 <__dbToATableLookup_veneer>
    71fa:	4b05      	ldr	r3, [pc, #20]	; (7210 <tiltParam4+0x30>)
    71fc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    7200:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    7204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    7208:	f002 b88e 	b.w	9328 <__tVZFilterBell_setGain_veneer>
    720c:	42080000 	.word	0x42080000
    7210:	2001cd78 	.word	0x2001cd78
    7214:	f3af 8000 	nop.w
    7218:	f3af 8000 	nop.w
    721c:	f3af 8000 	nop.w

00007220 <compressorParam1>:
	comp[v][string]->T = value*-24.0f;
    7220:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
    7224:	4b04      	ldr	r3, [pc, #16]	; (7238 <compressorParam1+0x18>)
    7226:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    722a:	ee20 0a27 	vmul.f32	s0, s0, s15
    722e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7232:	ed83 0a03 	vstr	s0, [r3, #12]
}
    7236:	4770      	bx	lr
    7238:	2001cd98 	.word	0x2001cd98
    723c:	f3af 8000 	nop.w

00007240 <compressorParam2>:
	comp[v][string]->R = ((value*10.0f)+1.0f);
    7240:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    7244:	4b0a      	ldr	r3, [pc, #40]	; (7270 <compressorParam2+0x30>)
    7246:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
    724a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    724e:	eeb0 7a67 	vmov.f32	s14, s15
    7252:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    7256:	eea0 7a26 	vfma.f32	s14, s0, s13
    725a:	ed82 7a04 	vstr	s14, [r2, #16]
	comp[v][string]->invR  = 1.0f / comp[v][string]->R;
    725e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    7262:	edd3 6a04 	vldr	s13, [r3, #16]
    7266:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    726a:	ed83 7a07 	vstr	s14, [r3, #28]
}
    726e:	4770      	bx	lr
    7270:	2001cd98 	.word	0x2001cd98
    7274:	f3af 8000 	nop.w
    7278:	f3af 8000 	nop.w
    727c:	f3af 8000 	nop.w

00007280 <compressorParam3>:
	comp[v][string]->M = value * 18.0f;
    7280:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
    7284:	4b04      	ldr	r3, [pc, #16]	; (7298 <compressorParam3+0x18>)
    7286:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    728a:	ee20 0a27 	vmul.f32	s0, s0, s15
    728e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7292:	ed83 0a06 	vstr	s0, [r3, #24]
}
    7296:	4770      	bx	lr
    7298:	2001cd98 	.word	0x2001cd98
    729c:	f3af 8000 	nop.w

000072a0 <compressorParam4>:
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    72a0:	4b0b      	ldr	r3, [pc, #44]	; (72d0 <compressorParam4+0x30>)
    72a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value +  0.001f);
    72a6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 72d4 <compressorParam4+0x34>
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    72aa:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
    72ae:	b510      	push	{r4, lr}
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    72b0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value +  0.001f);
    72b4:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    72b8:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    72bc:	ee20 0a07 	vmul.f32	s0, s0, s14
    72c0:	ee87 0a80 	vdiv.f32	s0, s15, s0
    72c4:	f002 f88c 	bl	93e0 <__fasterexpf_veneer>
    72c8:	ed84 0a01 	vstr	s0, [r4, #4]
}
    72cc:	bd10      	pop	{r4, pc}
    72ce:	bf00      	nop
    72d0:	2001cd98 	.word	0x2001cd98
    72d4:	3a83126f 	.word	0x3a83126f
    72d8:	f3af 8000 	nop.w
    72dc:	f3af 8000 	nop.w

000072e0 <compressorParam5>:
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    72e0:	4b0b      	ldr	r3, [pc, #44]	; (7310 <compressorParam5+0x30>)
    72e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value + 0.001f);
    72e6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 7314 <compressorParam5+0x34>
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    72ea:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
    72ee:	b510      	push	{r4, lr}
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    72f0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value + 0.001f);
    72f4:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    72f8:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    72fc:	ee20 0a07 	vmul.f32	s0, s0, s14
    7300:	ee87 0a80 	vdiv.f32	s0, s15, s0
    7304:	f002 f86c 	bl	93e0 <__fasterexpf_veneer>
    7308:	ed84 0a02 	vstr	s0, [r4, #8]
}
    730c:	bd10      	pop	{r4, pc}
    730e:	bf00      	nop
    7310:	2001cd98 	.word	0x2001cd98
    7314:	3a83126f 	.word	0x3a83126f
    7318:	f3af 8000 	nop.w
    731c:	f3af 8000 	nop.w

00007320 <offsetParam2>:
	param2[v][string] = (value * 2.0f) - 1.0f;
    7320:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    7324:	4b05      	ldr	r3, [pc, #20]	; (733c <offsetParam2+0x1c>)
    7326:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    732a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    732e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    7332:	eee0 7a07 	vfma.f32	s15, s0, s14
    7336:	edc3 7a00 	vstr	s15, [r3]
}
    733a:	4770      	bx	lr
    733c:	2001d3f8 	.word	0x2001d3f8

00007340 <param2Linear>:
	param2[v][string] = value;
    7340:	4b03      	ldr	r3, [pc, #12]	; (7350 <param2Linear+0x10>)
    7342:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7346:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    734a:	ed83 0a00 	vstr	s0, [r3]
}
    734e:	4770      	bx	lr
    7350:	2001d3f8 	.word	0x2001d3f8
    7354:	f3af 8000 	nop.w
    7358:	f3af 8000 	nop.w
    735c:	f3af 8000 	nop.w

00007360 <param3Linear>:
	param3[v][string] = value;
    7360:	4b03      	ldr	r3, [pc, #12]	; (7370 <param3Linear+0x10>)
    7362:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7366:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    736a:	ed83 0a00 	vstr	s0, [r3]
}
    736e:	4770      	bx	lr
    7370:	2001d418 	.word	0x2001d418
    7374:	f3af 8000 	nop.w
    7378:	f3af 8000 	nop.w
    737c:	f3af 8000 	nop.w

00007380 <param3Soft>:
	param3[v][string] = (value * .99f) + 0.01f;
    7380:	eddf 6a10 	vldr	s13, [pc, #64]	; 73c4 <param3Soft+0x44>
    7384:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    7388:	eddf 7a0f 	vldr	s15, [pc, #60]	; 73c8 <param3Soft+0x48>
    738c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7390:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 73cc <param3Soft+0x4c>
    7394:	eee0 7a26 	vfma.f32	s15, s0, s13
    7398:	4a0d      	ldr	r2, [pc, #52]	; (73d0 <param3Soft+0x50>)
    739a:	eef0 6a47 	vmov.f32	s13, s14
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    739e:	4b0d      	ldr	r3, [pc, #52]	; (73d4 <param3Soft+0x54>)
	param3[v][string] = (value * .99f) + 0.01f;
    73a0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    73a4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    73a8:	ee67 5ae7 	vnmul.f32	s11, s15, s15
	param3[v][string] = (value * .99f) + 0.01f;
    73ac:	edc2 7a00 	vstr	s15, [r2]
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    73b0:	eee5 6a86 	vfma.f32	s13, s11, s12
    73b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
    73b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
    73bc:	edc3 6a00 	vstr	s13, [r3]
}
    73c0:	4770      	bx	lr
    73c2:	bf00      	nop
    73c4:	3f7d70a4 	.word	0x3f7d70a4
    73c8:	3c23d70a 	.word	0x3c23d70a
    73cc:	3eaaaaaa 	.word	0x3eaaaaaa
    73d0:	2001d418 	.word	0x2001d418
    73d4:	2001d520 	.word	0x2001d520
    73d8:	f3af 8000 	nop.w
    73dc:	f3af 8000 	nop.w

000073e0 <param3Hard>:
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    73e0:	eddf 6a17 	vldr	s13, [pc, #92]	; 7440 <param3Hard+0x60>
    73e4:	eddf 7a17 	vldr	s15, [pc, #92]	; 7444 <param3Hard+0x64>
    73e8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 7448 <param3Hard+0x68>
    73ec:	eee0 7a26 	vfma.f32	s15, s0, s13
{
    73f0:	b538      	push	{r3, r4, r5, lr}
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    73f2:	4b16      	ldr	r3, [pc, #88]	; (744c <param3Hard+0x6c>)
    73f4:	0045      	lsls	r5, r0, #1
    73f6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
    73fa:	460c      	mov	r4, r1
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    73fc:	ee27 0a87 	vmul.f32	s0, s15, s14
    7400:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    7404:	ed83 0a00 	vstr	s0, [r3]
	float tempDiv = arm_sin_f32(param3[v][string]);
    7408:	f001 ffc2 	bl	9390 <__arm_sin_f32_veneer>
	if (tempDiv == 0.0f)
    740c:	eeb5 0a40 	vcmp.f32	s0, #0.0
    7410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7414:	d00a      	beq.n	742c <param3Hard+0x4c>
	shapeDividerH[v][string] = 1.0f/tempDiv;
    7416:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    741a:	4b0d      	ldr	r3, [pc, #52]	; (7450 <param3Hard+0x70>)
    741c:	4425      	add	r5, r4
    741e:	eec7 7a00 	vdiv.f32	s15, s14, s0
    7422:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    7426:	edc3 7a00 	vstr	s15, [r3]
}
    742a:	bd38      	pop	{r3, r4, r5, pc}
	shapeDividerH[v][string] = 1.0f/tempDiv;
    742c:	4b08      	ldr	r3, [pc, #32]	; (7450 <param3Hard+0x70>)
    742e:	4425      	add	r5, r4
    7430:	eddf 7a08 	vldr	s15, [pc, #32]	; 7454 <param3Hard+0x74>
    7434:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    7438:	edc3 7a00 	vstr	s15, [r3]
}
    743c:	bd38      	pop	{r3, r4, r5, pc}
    743e:	bf00      	nop
    7440:	3f7d70a4 	.word	0x3f7d70a4
    7444:	3c23d70a 	.word	0x3c23d70a
    7448:	3fc90fdb 	.word	0x3fc90fdb
    744c:	2001d418 	.word	0x2001d418
    7450:	2001d500 	.word	0x2001d500
    7454:	4479ffff 	.word	0x4479ffff
    7458:	f3af 8000 	nop.w
    745c:	f3af 8000 	nop.w

00007460 <param3Poly>:
	param3[v][string] = ((value * .99f) + 0.01f)* HALF_PI;
    7460:	eddf 6a17 	vldr	s13, [pc, #92]	; 74c0 <param3Poly+0x60>
    7464:	eddf 7a17 	vldr	s15, [pc, #92]	; 74c4 <param3Poly+0x64>
    7468:	ed9f 7a17 	vldr	s14, [pc, #92]	; 74c8 <param3Poly+0x68>
    746c:	eee0 7a26 	vfma.f32	s15, s0, s13
{
    7470:	b538      	push	{r3, r4, r5, lr}
	param3[v][string] = ((value * .99f) + 0.01f)* HALF_PI;
    7472:	4b16      	ldr	r3, [pc, #88]	; (74cc <param3Poly+0x6c>)
    7474:	0045      	lsls	r5, r0, #1
    7476:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
    747a:	460c      	mov	r4, r1
	param3[v][string] = ((value * .99f) + 0.01f)* HALF_PI;
    747c:	ee27 0a87 	vmul.f32	s0, s15, s14
    7480:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    7484:	ed83 0a00 	vstr	s0, [r3]
    float tempDiv = fastSine(param3[v][string]);
    7488:	f002 f85e 	bl	9548 <__fastSine_veneer>
    if (tempDiv == 0.0f)
    748c:	eeb5 0a40 	vcmp.f32	s0, #0.0
    7490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7494:	d00a      	beq.n	74ac <param3Poly+0x4c>
    polyDivider[v][string] = 1.0f/tempDiv;
    7496:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    749a:	4b0d      	ldr	r3, [pc, #52]	; (74d0 <param3Poly+0x70>)
    749c:	4425      	add	r5, r4
    749e:	eec7 7a00 	vdiv.f32	s15, s14, s0
    74a2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    74a6:	edc3 7a00 	vstr	s15, [r3]
}
    74aa:	bd38      	pop	{r3, r4, r5, pc}
    polyDivider[v][string] = 1.0f/tempDiv;
    74ac:	4b08      	ldr	r3, [pc, #32]	; (74d0 <param3Poly+0x70>)
    74ae:	4425      	add	r5, r4
    74b0:	eddf 7a08 	vldr	s15, [pc, #32]	; 74d4 <param3Poly+0x74>
    74b4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    74b8:	edc3 7a00 	vstr	s15, [r3]
}
    74bc:	bd38      	pop	{r3, r4, r5, pc}
    74be:	bf00      	nop
    74c0:	3f7d70a4 	.word	0x3f7d70a4
    74c4:	3c23d70a 	.word	0x3c23d70a
    74c8:	3fc90fdb 	.word	0x3fc90fdb
    74cc:	2001d418 	.word	0x2001d418
    74d0:	2001d490 	.word	0x2001d490
    74d4:	4479ffff 	.word	0x4479ffff
    74d8:	f3af 8000 	nop.w
    74dc:	f3af 8000 	nop.w

000074e0 <param4Linear>:
	param4[v][string] = value;
    74e0:	4b03      	ldr	r3, [pc, #12]	; (74f0 <param4Linear+0x10>)
    74e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    74e6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    74ea:	ed83 0a00 	vstr	s0, [r3]
}
    74ee:	4770      	bx	lr
    74f0:	2001d438 	.word	0x2001d438
    74f4:	f3af 8000 	nop.w
    74f8:	f3af 8000 	nop.w
    74fc:	f3af 8000 	nop.w

00007500 <param5Linear>:
	param5[v][string] = value;
    7500:	4b03      	ldr	r3, [pc, #12]	; (7510 <param5Linear+0x10>)
    7502:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7506:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    750a:	ed83 0a00 	vstr	s0, [r3]
}
    750e:	4770      	bx	lr
    7510:	2001d458 	.word	0x2001d458
    7514:	f3af 8000 	nop.w
    7518:	f3af 8000 	nop.w
    751c:	f3af 8000 	nop.w

00007520 <param2BC>:
	tCrusher_setQuality (&bc[v][string],value);
    7520:	4b03      	ldr	r3, [pc, #12]	; (7530 <param2BC+0x10>)
    7522:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7526:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    752a:	f002 b8f9 	b.w	9720 <__tCrusher_setQuality_veneer>
    752e:	bf00      	nop
    7530:	2001cd58 	.word	0x2001cd58
    7534:	f3af 8000 	nop.w
    7538:	f3af 8000 	nop.w
    753c:	f3af 8000 	nop.w

00007540 <param3BC>:
	value = (value * inv_oversample) + 0.01f;
    7540:	4a07      	ldr	r2, [pc, #28]	; (7560 <param3BC+0x20>)
	tCrusher_setSamplingRatio (&bc[v][string], value);
    7542:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * inv_oversample) + 0.01f;
    7546:	eddf 7a07 	vldr	s15, [pc, #28]	; 7564 <param3BC+0x24>
    754a:	ed92 7a00 	vldr	s14, [r2]
	tCrusher_setSamplingRatio (&bc[v][string], value);
    754e:	4b06      	ldr	r3, [pc, #24]	; (7568 <param3BC+0x28>)
    7550:	eee7 7a00 	vfma.f32	s15, s14, s0
    7554:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7558:	eeb0 0a67 	vmov.f32	s0, s15
    755c:	f001 bfd4 	b.w	9508 <__tCrusher_setSamplingRatio_veneer>
    7560:	20000894 	.word	0x20000894
    7564:	3c23d70a 	.word	0x3c23d70a
    7568:	2001cd58 	.word	0x2001cd58
    756c:	f3af 8000 	nop.w
    7570:	f3af 8000 	nop.w
    7574:	f3af 8000 	nop.w
    7578:	f3af 8000 	nop.w
    757c:	f3af 8000 	nop.w

00007580 <param4BC>:
	tCrusher_setRound(&bc[v][string], value);
    7580:	4b03      	ldr	r3, [pc, #12]	; (7590 <param4BC+0x10>)
    7582:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7586:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    758a:	f002 b85d 	b.w	9648 <__tCrusher_setRound_veneer>
    758e:	bf00      	nop
    7590:	2001cd58 	.word	0x2001cd58
    7594:	f3af 8000 	nop.w
    7598:	f3af 8000 	nop.w
    759c:	f3af 8000 	nop.w

000075a0 <param5BC>:
	tCrusher_setOperation(&bc[v][string], value);
    75a0:	4b03      	ldr	r3, [pc, #12]	; (75b0 <param5BC+0x10>)
    75a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    75a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    75aa:	f001 bff5 	b.w	9598 <__tCrusher_setOperation_veneer>
    75ae:	bf00      	nop
    75b0:	2001cd58 	.word	0x2001cd58
    75b4:	f3af 8000 	nop.w
    75b8:	f3af 8000 	nop.w
    75bc:	f3af 8000 	nop.w

000075c0 <fxMixSet>:
	fxMix[v][string] = value;
    75c0:	4b03      	ldr	r3, [pc, #12]	; (75d0 <fxMixSet+0x10>)
    75c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    75c6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    75ca:	ed83 0a00 	vstr	s0, [r3]
}
    75ce:	4770      	bx	lr
    75d0:	2001d014 	.word	0x2001d014
    75d4:	f3af 8000 	nop.w
    75d8:	f3af 8000 	nop.w
    75dc:	f3af 8000 	nop.w

000075e0 <fxPostGainSet>:
	fxPostGain[v][string] = dbToATableLookup((value * 24.0f) - 12.0f);
    75e0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    75e4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
    75e8:	b538      	push	{r3, r4, r5, lr}
	fxPostGain[v][string] = dbToATableLookup((value * 24.0f) - 12.0f);
    75ea:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    75ee:	4605      	mov	r5, r0
    75f0:	460c      	mov	r4, r1
	fxPostGain[v][string] = dbToATableLookup((value * 24.0f) - 12.0f);
    75f2:	eeb0 0a67 	vmov.f32	s0, s15
    75f6:	f001 ff2b 	bl	9450 <__dbToATableLookup_veneer>
    75fa:	4b04      	ldr	r3, [pc, #16]	; (760c <fxPostGainSet+0x2c>)
    75fc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    7600:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    7604:	ed83 0a00 	vstr	s0, [r3]
}
    7608:	bd38      	pop	{r3, r4, r5, pc}
    760a:	bf00      	nop
    760c:	2001d034 	.word	0x2001d034
    7610:	f3af 8000 	nop.w
    7614:	f3af 8000 	nop.w
    7618:	f3af 8000 	nop.w
    761c:	f3af 8000 	nop.w

00007620 <wavefolderTick>:
{
    7620:	b538      	push	{r3, r4, r5, lr}
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    7622:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    float fbSample = wfState[v][string];
    7626:	4d36      	ldr	r5, [pc, #216]	; (7700 <wavefolderTick+0xe0>)
    7628:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    762c:	4b35      	ldr	r3, [pc, #212]	; (7704 <wavefolderTick+0xe4>)
    float fbSample = wfState[v][string];
    762e:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    7632:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    7636:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    763a:	4a33      	ldr	r2, [pc, #204]	; (7708 <wavefolderTick+0xe8>)
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    763c:	eddf 3a33 	vldr	s7, [pc, #204]	; 770c <wavefolderTick+0xec>
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    7640:	0084      	lsls	r4, r0, #2
    7642:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    float fb = curFB * fbSample;
    7646:	ed9f 3a32 	vldr	s6, [pc, #200]	; 7710 <wavefolderTick+0xf0>
{
    764a:	ed2d 8b02 	vpush	{d8}
    764e:	ed95 6a00 	vldr	s12, [r5]
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    7652:	edd3 7a00 	vldr	s15, [r3]
    7656:	fe86 6a66 	vminnm.f32	s12, s12, s13
    765a:	fe86 6a24 	vmaxnm.f32	s12, s12, s9
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    765e:	ee26 7a06 	vmul.f32	s14, s12, s12
    float curFB = param3[v][string];
    7662:	4b2c      	ldr	r3, [pc, #176]	; (7714 <wavefolderTick+0xf4>)
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    7664:	ee30 0a27 	vadd.f32	s0, s0, s15
    7668:	edd2 5a00 	vldr	s11, [r2]
    float curFB = param3[v][string];
    766c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    float curFF = param4[v][string];
    7670:	4a29      	ldr	r2, [pc, #164]	; (7718 <wavefolderTick+0xf8>)
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    7672:	ee67 7a23 	vmul.f32	s15, s14, s7
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    7676:	ee20 7a25 	vmul.f32	s14, s0, s11
    float fb = curFB * fbSample;
    767a:	ed93 4a00 	vldr	s8, [r3]
    float curFF = param4[v][string];
    767e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    7682:	4b26      	ldr	r3, [pc, #152]	; (771c <wavefolderTick+0xfc>)
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    7684:	ee76 7ae7 	vsub.f32	s15, s13, s15
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    7688:	ed9f 0a25 	vldr	s0, [pc, #148]	; 7720 <wavefolderTick+0x100>
    768c:	fec7 5a66 	vminnm.f32	s11, s14, s13
    float fb = curFB * fbSample;
    7690:	ee24 4a03 	vmul.f32	s8, s8, s6
    7694:	fec5 5aa4 	vmaxnm.f32	s11, s11, s9
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    7698:	ee65 4aa5 	vmul.f32	s9, s11, s11
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    769c:	ee67 7a86 	vmul.f32	s15, s15, s12
    float curFF = param4[v][string];
    76a0:	ed92 5a00 	vldr	s10, [r2]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    76a4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    76a8:	ee27 0a00 	vmul.f32	s0, s14, s0
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);
    76ac:	ee76 2ac5 	vsub.f32	s5, s13, s10
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    76b0:	ee24 6aa3 	vmul.f32	s12, s9, s7
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    76b4:	edd3 8a00 	vldr	s17, [r3]
    float fb = curFB * fbSample;
    76b8:	ee67 7a84 	vmul.f32	s15, s15, s8
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    76bc:	ee25 5a03 	vmul.f32	s10, s10, s6
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    76c0:	ee76 6ac6 	vsub.f32	s13, s13, s12
    76c4:	eee2 7a87 	vfma.f32	s15, s5, s14
    76c8:	ee66 6aa5 	vmul.f32	s13, s13, s11
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    76cc:	eee6 7a85 	vfma.f32	s15, s13, s10
    76d0:	eeb0 8a67 	vmov.f32	s16, s15
    76d4:	f001 fe5c 	bl	9390 <__arm_sin_f32_veneer>
    sample = wfState[v][string] * invCurFB[v][string];
    76d8:	4b12      	ldr	r3, [pc, #72]	; (7724 <wavefolderTick+0x104>)
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    76da:	4813      	ldr	r0, [pc, #76]	; (7728 <wavefolderTick+0x108>)
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    76dc:	eef0 7a48 	vmov.f32	s15, s16
    sample = wfState[v][string] * invCurFB[v][string];
    76e0:	4423      	add	r3, r4
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    76e2:	4420      	add	r0, r4
    sample = wfState[v][string] * invCurFB[v][string];
    76e4:	ed93 7a00 	vldr	s14, [r3]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    76e8:	eee8 7ac0 	vfms.f32	s15, s17, s0
    76ec:	edc5 7a00 	vstr	s15, [r5]
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    76f0:	ee27 0a87 	vmul.f32	s0, s15, s14
}
    76f4:	ecbd 8b02 	vpop	{d8}
    76f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    76fc:	f002 b840 	b.w	9780 <__tHighpass_tick_veneer>
    7700:	2001d758 	.word	0x2001d758
    7704:	2001d3f8 	.word	0x2001d3f8
    7708:	2001d3d8 	.word	0x2001d3d8
    770c:	3eaaaaaa 	.word	0x3eaaaaaa
    7710:	3fbffff8 	.word	0x3fbffff8
    7714:	2001d418 	.word	0x2001d418
    7718:	2001d438 	.word	0x2001d438
    771c:	2001d458 	.word	0x2001d458
    7720:	40c90fdb 	.word	0x40c90fdb
    7724:	2001d0e4 	.word	0x2001d0e4
    7728:	2001cdb8 	.word	0x2001cdb8
    772c:	f3af 8000 	nop.w
    7730:	f3af 8000 	nop.w
    7734:	f3af 8000 	nop.w
    7738:	f3af 8000 	nop.w
    773c:	f3af 8000 	nop.w

00007740 <chorusParam1>:
	param1[v][string] = value * 5780.0f + 10.0f;
    7740:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    7744:	ed9f 7a05 	vldr	s14, [pc, #20]	; 775c <chorusParam1+0x1c>
    7748:	4b05      	ldr	r3, [pc, #20]	; (7760 <chorusParam1+0x20>)
    774a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    774e:	eee0 7a07 	vfma.f32	s15, s0, s14
    7752:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    7756:	edc3 7a00 	vstr	s15, [r3]
}
    775a:	4770      	bx	lr
    775c:	45b4a000 	.word	0x45b4a000
    7760:	2001d3d8 	.word	0x2001d3d8
    7764:	f3af 8000 	nop.w
    7768:	f3af 8000 	nop.w
    776c:	f3af 8000 	nop.w
    7770:	f3af 8000 	nop.w
    7774:	f3af 8000 	nop.w
    7778:	f3af 8000 	nop.w
    777c:	f3af 8000 	nop.w

00007780 <chorusParam2>:
	param2[v][string] = value * 0.1f;
    7780:	eddf 7a05 	vldr	s15, [pc, #20]	; 7798 <chorusParam2+0x18>
    7784:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7788:	4b04      	ldr	r3, [pc, #16]	; (779c <chorusParam2+0x1c>)
    778a:	ee20 0a27 	vmul.f32	s0, s0, s15
    778e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    7792:	ed83 0a00 	vstr	s0, [r3]
}
    7796:	4770      	bx	lr
    7798:	3dcccccd 	.word	0x3dcccccd
    779c:	2001d3f8 	.word	0x2001d3f8

000077a0 <chorusParam3>:
    tCycle_setFreq(&mod1[v][string], (value * 0.4f) + 0.01f);
    77a0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 77c0 <chorusParam3+0x20>
    77a4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    77a8:	eddf 7a06 	vldr	s15, [pc, #24]	; 77c4 <chorusParam3+0x24>
    77ac:	4b06      	ldr	r3, [pc, #24]	; (77c8 <chorusParam3+0x28>)
    77ae:	eee0 7a07 	vfma.f32	s15, s0, s14
    77b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    77b6:	eeb0 0a67 	vmov.f32	s0, s15
    77ba:	f001 bd61 	b.w	9280 <__tCycle_setFreq_veneer>
    77be:	bf00      	nop
    77c0:	3ecccccd 	.word	0x3ecccccd
    77c4:	3c23d70a 	.word	0x3c23d70a
    77c8:	2001d300 	.word	0x2001d300
    77cc:	f3af 8000 	nop.w
    77d0:	f3af 8000 	nop.w
    77d4:	f3af 8000 	nop.w
    77d8:	f3af 8000 	nop.w
    77dc:	f3af 8000 	nop.w

000077e0 <chorusParam4>:
    tCycle_setFreq(&mod2[v][string], (value * 0.4444444f) + 0.011f);
    77e0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 7800 <chorusParam4+0x20>
    77e4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    77e8:	eddf 7a06 	vldr	s15, [pc, #24]	; 7804 <chorusParam4+0x24>
    77ec:	4b06      	ldr	r3, [pc, #24]	; (7808 <chorusParam4+0x28>)
    77ee:	eee0 7a07 	vfma.f32	s15, s0, s14
    77f2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    77f6:	eeb0 0a67 	vmov.f32	s0, s15
    77fa:	f001 bd41 	b.w	9280 <__tCycle_setFreq_veneer>
    77fe:	bf00      	nop
    7800:	3ee38e37 	.word	0x3ee38e37
    7804:	3c343958 	.word	0x3c343958
    7808:	2001d320 	.word	0x2001d320
    780c:	f3af 8000 	nop.w
    7810:	f3af 8000 	nop.w
    7814:	f3af 8000 	nop.w
    7818:	f3af 8000 	nop.w
    781c:	f3af 8000 	nop.w

00007820 <delayParam1>:
    tTapeDelay_setDelay(&tapeDelay[v][string], value * 30000.0f + 1.0f);
    7820:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    7824:	ed9f 7a06 	vldr	s14, [pc, #24]	; 7840 <delayParam1+0x20>
    7828:	4b06      	ldr	r3, [pc, #24]	; (7844 <delayParam1+0x24>)
    782a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    782e:	eee0 7a07 	vfma.f32	s15, s0, s14
    7832:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7836:	eeb0 0a67 	vmov.f32	s0, s15
    783a:	f001 bd39 	b.w	92b0 <__tTapeDelay_setDelay_veneer>
    783e:	bf00      	nop
    7840:	46ea6000 	.word	0x46ea6000
    7844:	2001d6ec 	.word	0x2001d6ec
    7848:	f3af 8000 	nop.w
    784c:	f3af 8000 	nop.w
    7850:	f3af 8000 	nop.w
    7854:	f3af 8000 	nop.w
    7858:	f3af 8000 	nop.w
    785c:	f3af 8000 	nop.w

00007860 <delayParam2>:
	param2[v][string] = LEAF_clip(0.0f, value * 1.1f, 1.1f);
    7860:	ed9f 1a09 	vldr	s2, [pc, #36]	; 7888 <delayParam2+0x28>
{
    7864:	b538      	push	{r3, r4, r5, lr}
    7866:	4605      	mov	r5, r0
    7868:	460c      	mov	r4, r1
	param2[v][string] = LEAF_clip(0.0f, value * 1.1f, 1.1f);
    786a:	ee60 0a01 	vmul.f32	s1, s0, s2
    786e:	ed9f 0a07 	vldr	s0, [pc, #28]	; 788c <delayParam2+0x2c>
    7872:	f001 fe11 	bl	9498 <__LEAF_clip_veneer>
    7876:	4b06      	ldr	r3, [pc, #24]	; (7890 <delayParam2+0x30>)
    7878:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    787c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    7880:	ed83 0a00 	vstr	s0, [r3]
}
    7884:	bd38      	pop	{r3, r4, r5, pc}
    7886:	bf00      	nop
    7888:	3f8ccccd 	.word	0x3f8ccccd
    788c:	00000000 	.word	0x00000000
    7890:	2001d3f8 	.word	0x2001d3f8
    7894:	f3af 8000 	nop.w
    7898:	f3af 8000 	nop.w
    789c:	f3af 8000 	nop.w

000078a0 <delayParam3>:
    tSVF_setFreqFast(&FXlowpass[v][string], (value * 127.0f));
    78a0:	eddf 7a05 	vldr	s15, [pc, #20]	; 78b8 <delayParam3+0x18>
    78a4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    78a8:	4b04      	ldr	r3, [pc, #16]	; (78bc <delayParam3+0x1c>)
    78aa:	ee20 0a27 	vmul.f32	s0, s0, s15
    78ae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    78b2:	f001 bddd 	b.w	9470 <__tSVF_setFreqFast_veneer>
    78b6:	bf00      	nop
    78b8:	42fe0000 	.word	0x42fe0000
    78bc:	2001ccd0 	.word	0x2001ccd0

000078c0 <delayParam4>:
    tSVF_setFreqFast(&FXhighpass[v][string], (value * 127.0f));
    78c0:	eddf 7a05 	vldr	s15, [pc, #20]	; 78d8 <delayParam4+0x18>
    78c4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    78c8:	4b04      	ldr	r3, [pc, #16]	; (78dc <delayParam4+0x1c>)
    78ca:	ee20 0a27 	vmul.f32	s0, s0, s15
    78ce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    78d2:	f001 bdcd 	b.w	9470 <__tSVF_setFreqFast_veneer>
    78d6:	bf00      	nop
    78d8:	42fe0000 	.word	0x42fe0000
    78dc:	2001ccb0 	.word	0x2001ccb0

000078e0 <delayParam5>:
	param5[v][string] = (value * 1.5f) + 1.0f;
    78e0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
    78e4:	4b05      	ldr	r3, [pc, #20]	; (78fc <delayParam5+0x1c>)
    78e6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    78ea:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    78ee:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    78f2:	eee0 7a07 	vfma.f32	s15, s0, s14
    78f6:	edc3 7a00 	vstr	s15, [r3]
}
    78fa:	4770      	bx	lr
    78fc:	2001d458 	.word	0x2001d458

00007900 <chorusTick>:

float __ATTR_ITCMRAM chorusTick(float sample, int v, int string)
{
    7900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7902:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    7906:	4f2b      	ldr	r7, [pc, #172]	; (79b4 <chorusTick+0xb4>)
    7908:	4d2b      	ldr	r5, [pc, #172]	; (79b8 <chorusTick+0xb8>)
    790a:	482c      	ldr	r0, [pc, #176]	; (79bc <chorusTick+0xbc>)
    790c:	eb07 0781 	add.w	r7, r7, r1, lsl #2
    7910:	eb05 0581 	add.w	r5, r5, r1, lsl #2
    7914:	4e2a      	ldr	r6, [pc, #168]	; (79c0 <chorusTick+0xc0>)
    7916:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    791a:	008c      	lsls	r4, r1, #2
    791c:	eb06 0681 	add.w	r6, r6, r1, lsl #2
{
    7920:	ed2d 8b04 	vpush	{d8-d9}
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    7924:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    7928:	edd5 9a00 	vldr	s19, [r5]
{
    792c:	eef0 8a40 	vmov.f32	s17, s0
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    7930:	ed97 9a00 	vldr	s18, [r7]
    7934:	f001 fdf4 	bl	9520 <__tCycle_tick_veneer>
    7938:	ed9f 7a22 	vldr	s14, [pc, #136]	; 79c4 <chorusTick+0xc4>
    793c:	eef0 7a48 	vmov.f32	s15, s16
    7940:	4630      	mov	r0, r6
    7942:	ee29 9a07 	vmul.f32	s18, s18, s14
    7946:	eee9 7a80 	vfma.f32	s15, s19, s0
    794a:	ee29 0a27 	vmul.f32	s0, s18, s15
    794e:	f001 fe9b 	bl	9688 <__tLinearDelay_setDelay_veneer>
    tLinearDelay_setDelay(&delay2[v][string], param1[v][string] * .5f * (1.0f - param2[v][string] * tCycle_tick(&mod2[v][string])));
    7952:	481d      	ldr	r0, [pc, #116]	; (79c8 <chorusTick+0xc8>)
    7954:	edd5 9a00 	vldr	s19, [r5]
    7958:	4420      	add	r0, r4
    795a:	ed97 9a00 	vldr	s18, [r7]
    795e:	f001 fddf 	bl	9520 <__tCycle_tick_veneer>
    7962:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    7966:	eea9 8ac0 	vfms.f32	s16, s19, s0
    796a:	4d18      	ldr	r5, [pc, #96]	; (79cc <chorusTick+0xcc>)
    796c:	ee29 0a27 	vmul.f32	s0, s18, s15
    7970:	4425      	add	r5, r4
    7972:	4628      	mov	r0, r5
    7974:	ee20 0a08 	vmul.f32	s0, s0, s16
    7978:	f001 fe86 	bl	9688 <__tLinearDelay_setDelay_veneer>
    float temp = tLinearDelay_tick(&delay1[v][string], sample) - sample;
    797c:	eeb0 0a68 	vmov.f32	s0, s17
    7980:	4630      	mov	r0, r6
    7982:	f001 fdfd 	bl	9580 <__tLinearDelay_tick_veneer>
    7986:	eeb0 8a40 	vmov.f32	s16, s0
    temp += tLinearDelay_tick(&delay2[v][string], sample) - sample;
    798a:	4628      	mov	r0, r5
    798c:	eeb0 0a68 	vmov.f32	s0, s17
    7990:	f001 fdf6 	bl	9580 <__tLinearDelay_tick_veneer>
    7994:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
    7998:	ee38 0a00 	vadd.f32	s0, s16, s0
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    799c:	480c      	ldr	r0, [pc, #48]	; (79d0 <chorusTick+0xd0>)
    799e:	4420      	add	r0, r4
    79a0:	eea8 0ae7 	vfms.f32	s0, s17, s15
    79a4:	f001 feec 	bl	9780 <__tHighpass_tick_veneer>
	//float temp = 0.0f;
    return -temp;
}
    79a8:	eeb1 0a40 	vneg.f32	s0, s0
    79ac:	ecbd 8b04 	vpop	{d8-d9}
    79b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    79b2:	bf00      	nop
    79b4:	2001d3d8 	.word	0x2001d3d8
    79b8:	2001d3f8 	.word	0x2001d3f8
    79bc:	2001d300 	.word	0x2001d300
    79c0:	2001cf00 	.word	0x2001cf00
    79c4:	3f34fdf4 	.word	0x3f34fdf4
    79c8:	2001d320 	.word	0x2001d320
    79cc:	2001cf20 	.word	0x2001cf20
    79d0:	2001cdb8 	.word	0x2001cdb8
    79d4:	f3af 8000 	nop.w
    79d8:	f3af 8000 	nop.w
    79dc:	f3af 8000 	nop.w

000079e0 <shaperTick>:

float __ATTR_ITCMRAM shaperTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    79e0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    79e4:	4a0e      	ldr	r2, [pc, #56]	; (7a20 <shaperTick+0x40>)
    sample = sample * param1[v][string];
    79e6:	4b0f      	ldr	r3, [pc, #60]	; (7a24 <shaperTick+0x44>)
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    79e8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    sample = sample * param1[v][string];
    79ec:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
    79f0:	b510      	push	{r4, lr}
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    79f2:	edd2 7a00 	vldr	s15, [r2]
    79f6:	008c      	lsls	r4, r1, #2
    79f8:	ee30 0a27 	vadd.f32	s0, s0, s15
    79fc:	edd3 7a00 	vldr	s15, [r3]
    7a00:	4b09      	ldr	r3, [pc, #36]	; (7a28 <shaperTick+0x48>)
    7a02:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    7a06:	ee20 0a27 	vmul.f32	s0, s0, s15
    7a0a:	edd3 0a00 	vldr	s1, [r3]
    7a0e:	f001 fe8b 	bl	9728 <__LEAF_shaper_veneer>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    7a12:	4806      	ldr	r0, [pc, #24]	; (7a2c <shaperTick+0x4c>)
    7a14:	4420      	add	r0, r4
    return temp;
}
    7a16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    7a1a:	f001 beb1 	b.w	9780 <__tHighpass_tick_veneer>
    7a1e:	bf00      	nop
    7a20:	2001d3f8 	.word	0x2001d3f8
    7a24:	2001d3d8 	.word	0x2001d3d8
    7a28:	2001d418 	.word	0x2001d418
    7a2c:	2001cdb8 	.word	0x2001cdb8
    7a30:	f3af 8000 	nop.w
    7a34:	f3af 8000 	nop.w
    7a38:	f3af 8000 	nop.w
    7a3c:	f3af 8000 	nop.w

00007a40 <blankTick>:

float __ATTR_ITCMRAM blankTick(float sample, int v, int string)
{
    return sample;
}
    7a40:	4770      	bx	lr
    7a42:	bf00      	nop
    7a44:	f3af 8000 	nop.w
    7a48:	f3af 8000 	nop.w
    7a4c:	f3af 8000 	nop.w
    7a50:	f3af 8000 	nop.w
    7a54:	f3af 8000 	nop.w
    7a58:	f3af 8000 	nop.w
    7a5c:	f3af 8000 	nop.w

00007a60 <tiltFilterTick>:

float __ATTR_ITCMRAM tiltFilterTick(float sample, int v, int string)
{
    sample = tVZFilterLS_tick(&shelf1[v][string], sample);
    7a60:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7a64:	4b08      	ldr	r3, [pc, #32]	; (7a88 <tiltFilterTick+0x28>)
{
    7a66:	b510      	push	{r4, lr}
    sample = tVZFilterLS_tick(&shelf1[v][string], sample);
    7a68:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    7a6c:	008c      	lsls	r4, r1, #2
    7a6e:	f001 fe2b 	bl	96c8 <__tVZFilterLS_tick_veneer>
    sample = tVZFilterHS_tick(&shelf2[v][string], sample);
    7a72:	4806      	ldr	r0, [pc, #24]	; (7a8c <tiltFilterTick+0x2c>)
    7a74:	4420      	add	r0, r4
    7a76:	f001 fc07 	bl	9288 <__tVZFilterHS_tick_veneer>
    sample = tVZFilterBell_tick(&bell1[v][string], sample);
    7a7a:	4805      	ldr	r0, [pc, #20]	; (7a90 <tiltFilterTick+0x30>)
    7a7c:	4420      	add	r0, r4
    return sample;
}
    7a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sample = tVZFilterBell_tick(&bell1[v][string], sample);
    7a82:	f001 bdf5 	b.w	9670 <__tVZFilterBell_tick_veneer>
    7a86:	bf00      	nop
    7a88:	2001d54c 	.word	0x2001d54c
    7a8c:	2001d56c 	.word	0x2001d56c
    7a90:	2001cd78 	.word	0x2001cd78
    7a94:	f3af 8000 	nop.w
    7a98:	f3af 8000 	nop.w
    7a9c:	f3af 8000 	nop.w

00007aa0 <tanhTick>:

float __ATTR_ITCMRAM tanhTick(float sample, int v, int string)
{
    float gain = param1[v][string];
    7aa0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	sample = sample * gain;
    gain = gain * 0.5f;
    //need to do something with shape param
    float temp = tanhf(sample + (param2[v][string]*gain));
    7aa4:	4a0d      	ldr	r2, [pc, #52]	; (7adc <tanhTick+0x3c>)
    7aa6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    float gain = param1[v][string];
    7aaa:	4b0d      	ldr	r3, [pc, #52]	; (7ae0 <tanhTick+0x40>)
    float temp = tanhf(sample + (param2[v][string]*gain));
    7aac:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    float gain = param1[v][string];
    7ab0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
    7ab4:	b510      	push	{r4, lr}
    7ab6:	edd2 6a00 	vldr	s13, [r2]
    float gain = param1[v][string];
    7aba:	008c      	lsls	r4, r1, #2
    7abc:	edd3 7a00 	vldr	s15, [r3]
    float temp = tanhf(sample + (param2[v][string]*gain));
    7ac0:	eea6 0a87 	vfma.f32	s0, s13, s14
    7ac4:	ee27 0a80 	vmul.f32	s0, s15, s0
    7ac8:	f001 fd96 	bl	95f8 <__tanhf_veneer>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    7acc:	4805      	ldr	r0, [pc, #20]	; (7ae4 <tanhTick+0x44>)
    7ace:	4420      	add	r0, r4
    7ad0:	f001 fe56 	bl	9780 <__tHighpass_tick_veneer>
    //temp *= param4[v][string];
    temp = tanhf(temp);
    //temp = tHighpass_tick(&dcBlock2, temp);
    return temp;
}
    7ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tanhf(temp);
    7ad8:	f001 bd8e 	b.w	95f8 <__tanhf_veneer>
    7adc:	2001d3f8 	.word	0x2001d3f8
    7ae0:	2001d3d8 	.word	0x2001d3d8
    7ae4:	2001cdb8 	.word	0x2001cdb8
    7ae8:	f3af 8000 	nop.w
    7aec:	f3af 8000 	nop.w
    7af0:	f3af 8000 	nop.w
    7af4:	f3af 8000 	nop.w
    7af8:	f3af 8000 	nop.w
    7afc:	f3af 8000 	nop.w

00007b00 <softClipTick>:


float __ATTR_ITCMRAM softClipTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    7b00:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7b04:	4a10      	ldr	r2, [pc, #64]	; (7b48 <softClipTick+0x48>)
    sample = sample + param2[v][string];
    7b06:	4b11      	ldr	r3, [pc, #68]	; (7b4c <softClipTick+0x4c>)
    7b08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string];
    7b0c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    7b10:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
    sample = sample + param2[v][string];
    7b14:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    7b18:	eddf 6a0d 	vldr	s13, [pc, #52]	; 7b50 <softClipTick+0x50>
    7b1c:	edd2 5a00 	vldr	s11, [r2]
    7b20:	edd3 7a00 	vldr	s15, [r3]
    {
        sample = (sample) - (((sample * sample * sample))* 0.3333333f);
        //sample = sample * shapeDividerS[v][string];
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    7b24:	480b      	ldr	r0, [pc, #44]	; (7b54 <softClipTick+0x54>)
    sample = sample + param2[v][string];
    7b26:	eee5 7a80 	vfma.f32	s15, s11, s0
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    7b2a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7b2e:	fec7 7ac7 	vminnm.f32	s15, s15, s14
    7b32:	fec7 7a86 	vmaxnm.f32	s15, s15, s12
        sample = (sample) - (((sample * sample * sample))* 0.3333333f);
    7b36:	ee27 6ae7 	vnmul.f32	s12, s15, s15
    7b3a:	eea6 7a26 	vfma.f32	s14, s12, s13
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    7b3e:	ee27 0a27 	vmul.f32	s0, s14, s15
    7b42:	f001 be1d 	b.w	9780 <__tHighpass_tick_veneer>
    7b46:	bf00      	nop
    7b48:	2001d3d8 	.word	0x2001d3d8
    7b4c:	2001d3f8 	.word	0x2001d3f8
    7b50:	3eaaaaaa 	.word	0x3eaaaaaa
    7b54:	2001cdb8 	.word	0x2001cdb8
    7b58:	f3af 8000 	nop.w
    7b5c:	f3af 8000 	nop.w

00007b60 <hardClipTick>:


float __ATTR_ITCMRAM hardClipTick(float sample, int v, int string)
{

    sample = sample * param1[v][string];
    7b60:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7b64:	4a1a      	ldr	r2, [pc, #104]	; (7bd0 <hardClipTick+0x70>)
    sample = sample + param2[v][string];
    7b66:	4b1b      	ldr	r3, [pc, #108]	; (7bd4 <hardClipTick+0x74>)
    } else if (sample >= 1.0f)
    {
        sample = 1.0f;
    }
    {
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    7b68:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string];
    7b6c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    7b70:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    sample = sample + param2[v][string];
    7b74:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
    7b78:	b570      	push	{r4, r5, r6, lr}
    sample = sample + param2[v][string];
    7b7a:	edd2 5a00 	vldr	s11, [r2]
    sample = sample * param1[v][string];
    7b7e:	008c      	lsls	r4, r1, #2
    sample = sample + param2[v][string];
    7b80:	edd3 7a00 	vldr	s15, [r3]
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    7b84:	4e14      	ldr	r6, [pc, #80]	; (7bd8 <hardClipTick+0x78>)
    sample = sample + param2[v][string];
    7b86:	eee5 7a80 	vfma.f32	s15, s11, s0
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    7b8a:	4d14      	ldr	r5, [pc, #80]	; (7bdc <hardClipTick+0x7c>)
    7b8c:	eb06 0681 	add.w	r6, r6, r1, lsl #2
    7b90:	4425      	add	r5, r4
    7b92:	ed96 7a00 	vldr	s14, [r6]
    7b96:	fec7 7ac6 	vminnm.f32	s15, s15, s12
    7b9a:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
    7b9e:	ee27 0a87 	vmul.f32	s0, s15, s14
    7ba2:	f001 fbf5 	bl	9390 <__arm_sin_f32_veneer>
    7ba6:	ed96 7a00 	vldr	s14, [r6]
    7baa:	edd5 7a00 	vldr	s15, [r5]
    7bae:	ee67 7a87 	vmul.f32	s15, s15, s14
    7bb2:	ee27 0a80 	vmul.f32	s0, s15, s0
    7bb6:	f001 fbeb 	bl	9390 <__arm_sin_f32_veneer>
        sample = sample * shapeDividerH[v][string];
    7bba:	edd5 7a00 	vldr	s15, [r5]
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    7bbe:	4808      	ldr	r0, [pc, #32]	; (7be0 <hardClipTick+0x80>)
    7bc0:	ee20 0a27 	vmul.f32	s0, s0, s15
    7bc4:	4420      	add	r0, r4
    return sample;
}
    7bc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    7bca:	f001 bdd9 	b.w	9780 <__tHighpass_tick_veneer>
    7bce:	bf00      	nop
    7bd0:	2001d3d8 	.word	0x2001d3d8
    7bd4:	2001d3f8 	.word	0x2001d3f8
    7bd8:	2001d418 	.word	0x2001d418
    7bdc:	2001d500 	.word	0x2001d500
    7be0:	2001cdb8 	.word	0x2001cdb8
    7be4:	f3af 8000 	nop.w
    7be8:	f3af 8000 	nop.w
    7bec:	f3af 8000 	nop.w
    7bf0:	f3af 8000 	nop.w
    7bf4:	f3af 8000 	nop.w
    7bf8:	f3af 8000 	nop.w
    7bfc:	f3af 8000 	nop.w

00007c00 <polynomialShaperTick>:


float __ATTR_ITCMRAM polynomialShaperTick(float sample, int v, int string)
{

    sample = sample * param1[v][string];
    7c00:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7c04:	4a1a      	ldr	r2, [pc, #104]	; (7c70 <polynomialShaperTick+0x70>)
    sample = sample + param2[v][string];
    7c06:	4b1b      	ldr	r3, [pc, #108]	; (7c74 <polynomialShaperTick+0x74>)
    } else if (sample >= 1.0f)
    {
        sample = 1.0f;
    }

	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    7c08:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string];
    7c0c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    7c10:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    sample = sample + param2[v][string];
    7c14:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
    7c18:	b570      	push	{r4, r5, r6, lr}
    sample = sample + param2[v][string];
    7c1a:	edd2 5a00 	vldr	s11, [r2]
    sample = sample * param1[v][string];
    7c1e:	008c      	lsls	r4, r1, #2
    sample = sample + param2[v][string];
    7c20:	edd3 7a00 	vldr	s15, [r3]
	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    7c24:	4e14      	ldr	r6, [pc, #80]	; (7c78 <polynomialShaperTick+0x78>)
    sample = sample + param2[v][string];
    7c26:	eee5 7a80 	vfma.f32	s15, s11, s0
	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    7c2a:	4d14      	ldr	r5, [pc, #80]	; (7c7c <polynomialShaperTick+0x7c>)
    7c2c:	eb06 0681 	add.w	r6, r6, r1, lsl #2
    7c30:	4425      	add	r5, r4
    7c32:	ed96 7a00 	vldr	s14, [r6]
    7c36:	fec7 7ac6 	vminnm.f32	s15, s15, s12
    7c3a:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
    7c3e:	ee27 0a87 	vmul.f32	s0, s15, s14
    7c42:	f001 fc81 	bl	9548 <__fastSine_veneer>
    7c46:	ed96 7a00 	vldr	s14, [r6]
    7c4a:	edd5 7a00 	vldr	s15, [r5]
    7c4e:	ee67 7a87 	vmul.f32	s15, s15, s14
    7c52:	ee27 0a80 	vmul.f32	s0, s15, s0
    7c56:	f001 fc77 	bl	9548 <__fastSine_veneer>
	sample = sample * polyDivider[v][string];
    7c5a:	edd5 7a00 	vldr	s15, [r5]


    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    7c5e:	4808      	ldr	r0, [pc, #32]	; (7c80 <polynomialShaperTick+0x80>)
    7c60:	ee20 0a27 	vmul.f32	s0, s0, s15
    7c64:	4420      	add	r0, r4
    return sample;
}
    7c66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    7c6a:	f001 bd89 	b.w	9780 <__tHighpass_tick_veneer>
    7c6e:	bf00      	nop
    7c70:	2001d3d8 	.word	0x2001d3d8
    7c74:	2001d3f8 	.word	0x2001d3f8
    7c78:	2001d418 	.word	0x2001d418
    7c7c:	2001d490 	.word	0x2001d490
    7c80:	2001cdb8 	.word	0x2001cdb8
    7c84:	f3af 8000 	nop.w
    7c88:	f3af 8000 	nop.w
    7c8c:	f3af 8000 	nop.w
    7c90:	f3af 8000 	nop.w
    7c94:	f3af 8000 	nop.w
    7c98:	f3af 8000 	nop.w
    7c9c:	f3af 8000 	nop.w

00007ca0 <satTick>:
float __ATTR_ITCMRAM satTick(float sample, int v, int string)
{;
    sample = sample * param1[v][string];
    7ca0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    7ca4:	4b17      	ldr	r3, [pc, #92]	; (7d04 <satTick+0x64>)
    sample = sample * param1[v][string];
    7ca6:	4a18      	ldr	r2, [pc, #96]	; (7d08 <satTick+0x68>)
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    7ca8:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    7cac:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    7cb0:	4816      	ldr	r0, [pc, #88]	; (7d0c <satTick+0x6c>)
    sample = sample * param1[v][string];
    7cb2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    7cb6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
{;
    7cba:	b510      	push	{r4, lr}
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    7cbc:	ed93 7a00 	vldr	s14, [r3]
    sample = sample * param1[v][string];
    7cc0:	008c      	lsls	r4, r1, #2
    7cc2:	edd2 7a00 	vldr	s15, [r2]
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    7cc6:	eeb0 6a47 	vmov.f32	s12, s14
    7cca:	ee27 7a87 	vmul.f32	s14, s15, s14
    7cce:	eea7 6a80 	vfma.f32	s12, s15, s0
    7cd2:	eea7 7a80 	vfma.f32	s14, s15, s0
    7cd6:	eeb0 6ac6 	vabs.f32	s12, s12
    7cda:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    7cde:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    7ce2:	ee36 6b05 	vadd.f64	d6, d6, d5
    7ce6:	ee87 0b06 	vdiv.f64	d0, d7, d6
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    7cea:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    7cee:	f001 fd47 	bl	9780 <__tHighpass_tick_veneer>
    temp = tHighpass_tick(&dcBlock2[v][string], temp);
    7cf2:	4807      	ldr	r0, [pc, #28]	; (7d10 <satTick+0x70>)
    7cf4:	4420      	add	r0, r4
    7cf6:	f001 fd43 	bl	9780 <__tHighpass_tick_veneer>
    temp = LEAF_tanh(temp);
    return temp;
}
    7cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = LEAF_tanh(temp);
    7cfe:	f001 bcaf 	b.w	9660 <__LEAF_tanh_veneer>
    7d02:	bf00      	nop
    7d04:	2001d3f8 	.word	0x2001d3f8
    7d08:	2001d3d8 	.word	0x2001d3d8
    7d0c:	2001cdb8 	.word	0x2001cdb8
    7d10:	2001cdd8 	.word	0x2001cdd8
    7d14:	f3af 8000 	nop.w
    7d18:	f3af 8000 	nop.w
    7d1c:	f3af 8000 	nop.w

00007d20 <bcTick>:



float __ATTR_ITCMRAM bcTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    7d20:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7d24:	4b05      	ldr	r3, [pc, #20]	; (7d3c <bcTick+0x1c>)
    return tCrusher_tick(&bc[v][string], sample);
    7d26:	4806      	ldr	r0, [pc, #24]	; (7d40 <bcTick+0x20>)
    sample = sample * param1[v][string];
    7d28:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    return tCrusher_tick(&bc[v][string], sample);
    7d2c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    sample = sample * param1[v][string];
    7d30:	edd3 7a00 	vldr	s15, [r3]
    return tCrusher_tick(&bc[v][string], sample);
    7d34:	ee20 0a27 	vmul.f32	s0, s0, s15
    7d38:	f001 bc32 	b.w	95a0 <__tCrusher_tick_veneer>
    7d3c:	2001d3d8 	.word	0x2001d3d8
    7d40:	2001cd58 	.word	0x2001cd58
    7d44:	f3af 8000 	nop.w
    7d48:	f3af 8000 	nop.w
    7d4c:	f3af 8000 	nop.w
    7d50:	f3af 8000 	nop.w
    7d54:	f3af 8000 	nop.w
    7d58:	f3af 8000 	nop.w
    7d5c:	f3af 8000 	nop.w

00007d60 <compressorTick>:


float __ATTR_ITCMRAM compressorTick(float sample, int v, int string)
{
    //return tCompressor_tickWithTableHardKnee(&comp[v][string], sample);
	return tCompressor_tick(&comp[v][string], sample);
    7d60:	4b03      	ldr	r3, [pc, #12]	; (7d70 <compressorTick+0x10>)
    7d62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7d66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7d6a:	f001 bc21 	b.w	95b0 <__tCompressor_tick_veneer>
    7d6e:	bf00      	nop
    7d70:	2001cd98 	.word	0x2001cd98
    7d74:	f3af 8000 	nop.w
    7d78:	f3af 8000 	nop.w
    7d7c:	f3af 8000 	nop.w

00007d80 <FXlowpassTick>:
}

float __ATTR_ITCMRAM  FXlowpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXlowpass[v][string], sample);
    7d80:	4b03      	ldr	r3, [pc, #12]	; (7d90 <FXlowpassTick+0x10>)
    7d82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7d86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7d8a:	f001 bc99 	b.w	96c0 <__tSVF_tick_veneer>
    7d8e:	bf00      	nop
    7d90:	2001ccd0 	.word	0x2001ccd0
    7d94:	f3af 8000 	nop.w
    7d98:	f3af 8000 	nop.w
    7d9c:	f3af 8000 	nop.w

00007da0 <FXhighpassTick>:
}

float __ATTR_ITCMRAM  FXhighpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXhighpass[v][string], sample);
    7da0:	4b03      	ldr	r3, [pc, #12]	; (7db0 <FXhighpassTick+0x10>)
    7da2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7da6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7daa:	f001 bc89 	b.w	96c0 <__tSVF_tick_veneer>
    7dae:	bf00      	nop
    7db0:	2001ccb0 	.word	0x2001ccb0
    7db4:	f3af 8000 	nop.w
    7db8:	f3af 8000 	nop.w
    7dbc:	f3af 8000 	nop.w

00007dc0 <FXbandpassTick>:
}

float __ATTR_ITCMRAM  FXbandpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXbandpass[v][string], sample);
    7dc0:	4b03      	ldr	r3, [pc, #12]	; (7dd0 <FXbandpassTick+0x10>)
    7dc2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7dc6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7dca:	f001 bc79 	b.w	96c0 <__tSVF_tick_veneer>
    7dce:	bf00      	nop
    7dd0:	2001cc70 	.word	0x2001cc70
    7dd4:	f3af 8000 	nop.w
    7dd8:	f3af 8000 	nop.w
    7ddc:	f3af 8000 	nop.w

00007de0 <FXdiodeLowpassTick>:
}

float __ATTR_ITCMRAM  FXdiodeLowpassTick(float sample, int v, int string)
{
	return tDiodeFilter_tick(&FXdiodeFilters[v][string], sample);
    7de0:	4b03      	ldr	r3, [pc, #12]	; (7df0 <FXdiodeLowpassTick+0x10>)
    7de2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7de6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7dea:	f001 ba89 	b.w	9300 <__tDiodeFilter_tick_veneer>
    7dee:	bf00      	nop
    7df0:	2001cc90 	.word	0x2001cc90
    7df4:	f3af 8000 	nop.w
    7df8:	f3af 8000 	nop.w
    7dfc:	f3af 8000 	nop.w

00007e00 <FXVZpeakTick>:
}

float __ATTR_ITCMRAM  FXVZpeakTick(float sample, int v, int string)
{
	return tVZFilterBell_tick(&FXVZfilterPeak[v][string], sample);
    7e00:	4b03      	ldr	r3, [pc, #12]	; (7e10 <FXVZpeakTick+0x10>)
    7e02:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7e06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7e0a:	f001 bc31 	b.w	9670 <__tVZFilterBell_tick_veneer>
    7e0e:	bf00      	nop
    7e10:	2001cc50 	.word	0x2001cc50
    7e14:	f3af 8000 	nop.w
    7e18:	f3af 8000 	nop.w
    7e1c:	f3af 8000 	nop.w

00007e20 <FXVZlowshelfTick>:
}

float __ATTR_ITCMRAM  FXVZlowshelfTick(float sample, int v, int string)
{
	return tVZFilterLS_tick(&FXVZfilterLS[v][string], sample);
    7e20:	4b03      	ldr	r3, [pc, #12]	; (7e30 <FXVZlowshelfTick+0x10>)
    7e22:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7e26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7e2a:	f001 bc4d 	b.w	96c8 <__tVZFilterLS_tick_veneer>
    7e2e:	bf00      	nop
    7e30:	2001cc30 	.word	0x2001cc30
    7e34:	f3af 8000 	nop.w
    7e38:	f3af 8000 	nop.w
    7e3c:	f3af 8000 	nop.w

00007e40 <FXVZhighshelfTick>:
}
float __ATTR_ITCMRAM  FXVZhighshelfTick(float sample, int v, int string)
{
	return tVZFilterHS_tick(&FXVZfilterHS[v][string], sample);
    7e40:	4b03      	ldr	r3, [pc, #12]	; (7e50 <FXVZhighshelfTick+0x10>)
    7e42:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7e46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7e4a:	f001 ba1d 	b.w	9288 <__tVZFilterHS_tick_veneer>
    7e4e:	bf00      	nop
    7e50:	2001cc10 	.word	0x2001cc10
    7e54:	f3af 8000 	nop.w
    7e58:	f3af 8000 	nop.w
    7e5c:	f3af 8000 	nop.w

00007e60 <FXVZbandrejectTick>:
}
float __ATTR_ITCMRAM  FXVZbandrejectTick(float sample, int v, int string)
{
	return  tVZFilter_tickEfficient(&FXVZfilterBR[v][string], sample);
    7e60:	4b03      	ldr	r3, [pc, #12]	; (7e70 <FXVZbandrejectTick+0x10>)
    7e62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7e66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7e6a:	f001 baa5 	b.w	93b8 <__tVZFilter_tickEfficient_veneer>
    7e6e:	bf00      	nop
    7e70:	2001cbf0 	.word	0x2001cbf0
    7e74:	f3af 8000 	nop.w
    7e78:	f3af 8000 	nop.w
    7e7c:	f3af 8000 	nop.w

00007e80 <FXLadderLowpassTick>:
}

float __ATTR_ITCMRAM  FXLadderLowpassTick(float sample, int v, int string)
{
	return tLadderFilter_tick(&FXLadderfilter[v][string], sample);
    7e80:	4b03      	ldr	r3, [pc, #12]	; (7e90 <FXLadderLowpassTick+0x10>)
    7e82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7e86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7e8a:	f001 bb41 	b.w	9510 <__tLadderFilter_tick_veneer>
    7e8e:	bf00      	nop
    7e90:	2001cbd0 	.word	0x2001cbd0
    7e94:	f3af 8000 	nop.w
    7e98:	f3af 8000 	nop.w
    7e9c:	f3af 8000 	nop.w

00007ea0 <FXLowpassParam1>:
}
//cutoffparams

void  __ATTR_ITCMRAM FXLowpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    7ea0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 7ec0 <FXLowpassParam1+0x20>
	tSVF_setFreqFast(&FXlowpass[v][string], value);
    7ea4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    7ea8:	eddf 7a06 	vldr	s15, [pc, #24]	; 7ec4 <FXLowpassParam1+0x24>
	tSVF_setFreqFast(&FXlowpass[v][string], value);
    7eac:	4b06      	ldr	r3, [pc, #24]	; (7ec8 <FXLowpassParam1+0x28>)
    7eae:	eee0 7a07 	vfma.f32	s15, s0, s14
    7eb2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7eb6:	eeb0 0a67 	vmov.f32	s0, s15
    7eba:	f001 bad9 	b.w	9470 <__tSVF_setFreqFast_veneer>
    7ebe:	bf00      	nop
    7ec0:	429a0000 	.word	0x429a0000
    7ec4:	42280000 	.word	0x42280000
    7ec8:	2001ccd0 	.word	0x2001ccd0
    7ecc:	f3af 8000 	nop.w
    7ed0:	f3af 8000 	nop.w
    7ed4:	f3af 8000 	nop.w
    7ed8:	f3af 8000 	nop.w
    7edc:	f3af 8000 	nop.w

00007ee0 <FXHighpassParam1>:
}
void __ATTR_ITCMRAM FXHighpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    7ee0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 7f00 <FXHighpassParam1+0x20>
	tSVF_setFreqFast(&FXhighpass[v][string], value);
    7ee4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    7ee8:	eddf 7a06 	vldr	s15, [pc, #24]	; 7f04 <FXHighpassParam1+0x24>
	tSVF_setFreqFast(&FXhighpass[v][string], value);
    7eec:	4b06      	ldr	r3, [pc, #24]	; (7f08 <FXHighpassParam1+0x28>)
    7eee:	eee0 7a07 	vfma.f32	s15, s0, s14
    7ef2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7ef6:	eeb0 0a67 	vmov.f32	s0, s15
    7efa:	f001 bab9 	b.w	9470 <__tSVF_setFreqFast_veneer>
    7efe:	bf00      	nop
    7f00:	429a0000 	.word	0x429a0000
    7f04:	42280000 	.word	0x42280000
    7f08:	2001ccb0 	.word	0x2001ccb0
    7f0c:	f3af 8000 	nop.w
    7f10:	f3af 8000 	nop.w
    7f14:	f3af 8000 	nop.w
    7f18:	f3af 8000 	nop.w
    7f1c:	f3af 8000 	nop.w

00007f20 <FXBandpassParam1>:
}

void __ATTR_ITCMRAM FXBandpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    7f20:	ed9f 7a07 	vldr	s14, [pc, #28]	; 7f40 <FXBandpassParam1+0x20>
    tSVF_setFreqFast(&FXbandpass[v][string], value);
    7f24:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    7f28:	eddf 7a06 	vldr	s15, [pc, #24]	; 7f44 <FXBandpassParam1+0x24>
    tSVF_setFreqFast(&FXbandpass[v][string], value);
    7f2c:	4b06      	ldr	r3, [pc, #24]	; (7f48 <FXBandpassParam1+0x28>)
    7f2e:	eee0 7a07 	vfma.f32	s15, s0, s14
    7f32:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7f36:	eeb0 0a67 	vmov.f32	s0, s15
    7f3a:	f001 ba99 	b.w	9470 <__tSVF_setFreqFast_veneer>
    7f3e:	bf00      	nop
    7f40:	429a0000 	.word	0x429a0000
    7f44:	42280000 	.word	0x42280000
    7f48:	2001cc70 	.word	0x2001cc70
    7f4c:	f3af 8000 	nop.w
    7f50:	f3af 8000 	nop.w
    7f54:	f3af 8000 	nop.w
    7f58:	f3af 8000 	nop.w
    7f5c:	f3af 8000 	nop.w

00007f60 <FXDiodeParam1>:
}

void __ATTR_ITCMRAM FXDiodeParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    7f60:	ed9f 7a07 	vldr	s14, [pc, #28]	; 7f80 <FXDiodeParam1+0x20>
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
    7f64:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    7f68:	eddf 7a06 	vldr	s15, [pc, #24]	; 7f84 <FXDiodeParam1+0x24>
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
    7f6c:	4b06      	ldr	r3, [pc, #24]	; (7f88 <FXDiodeParam1+0x28>)
    7f6e:	eee0 7a07 	vfma.f32	s15, s0, s14
    7f72:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7f76:	eeb0 0a67 	vmov.f32	s0, s15
    7f7a:	f001 bbc9 	b.w	9710 <__tDiodeFilter_setFreqFast_veneer>
    7f7e:	bf00      	nop
    7f80:	429a0000 	.word	0x429a0000
    7f84:	42280000 	.word	0x42280000
    7f88:	2001cc90 	.word	0x2001cc90
    7f8c:	f3af 8000 	nop.w
    7f90:	f3af 8000 	nop.w
    7f94:	f3af 8000 	nop.w
    7f98:	f3af 8000 	nop.w
    7f9c:	f3af 8000 	nop.w

00007fa0 <FXPeakParam1>:
}
void __ATTR_ITCMRAM FXPeakParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    7fa0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 7fc0 <FXPeakParam1+0x20>
	tVZFilterBell_setFreq(&FXVZfilterPeak[v][string], value);
    7fa4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    7fa8:	eddf 7a06 	vldr	s15, [pc, #24]	; 7fc4 <FXPeakParam1+0x24>
	tVZFilterBell_setFreq(&FXVZfilterPeak[v][string], value);
    7fac:	4b06      	ldr	r3, [pc, #24]	; (7fc8 <FXPeakParam1+0x28>)
    7fae:	eee0 7a07 	vfma.f32	s15, s0, s14
    7fb2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7fb6:	eeb0 0a67 	vmov.f32	s0, s15
    7fba:	f001 ba51 	b.w	9460 <__tVZFilterBell_setFreq_veneer>
    7fbe:	bf00      	nop
    7fc0:	429a0000 	.word	0x429a0000
    7fc4:	42280000 	.word	0x42280000
    7fc8:	2001cc50 	.word	0x2001cc50
    7fcc:	f3af 8000 	nop.w
    7fd0:	f3af 8000 	nop.w
    7fd4:	f3af 8000 	nop.w
    7fd8:	f3af 8000 	nop.w
    7fdc:	f3af 8000 	nop.w

00007fe0 <FXLowShelfParam1>:
}
void __ATTR_ITCMRAM FXLowShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    7fe0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000 <_Min_Stack_Size>
    tVZFilterLS_setFreqFast(&FXVZfilterLS[v][string], value);
    7fe4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    7fe8:	eddf 7a06 	vldr	s15, [pc, #24]	; 8004 <_Min_Stack_Size+0x4>
    tVZFilterLS_setFreqFast(&FXVZfilterLS[v][string], value);
    7fec:	4b06      	ldr	r3, [pc, #24]	; (8008 <_Min_Stack_Size+0x8>)
    7fee:	eee0 7a07 	vfma.f32	s15, s0, s14
    7ff2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7ff6:	eeb0 0a67 	vmov.f32	s0, s15
    7ffa:	f001 bb21 	b.w	9640 <__tVZFilterLS_setFreqFast_veneer>
    7ffe:	bf00      	nop
    8000:	429a0000 	.word	0x429a0000
    8004:	42280000 	.word	0x42280000
    8008:	2001cc30 	.word	0x2001cc30
    800c:	f3af 8000 	nop.w
    8010:	f3af 8000 	nop.w
    8014:	f3af 8000 	nop.w
    8018:	f3af 8000 	nop.w
    801c:	f3af 8000 	nop.w

00008020 <FXHighShelfParam1>:
}
void __ATTR_ITCMRAM FXHighShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    8020:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8040 <FXHighShelfParam1+0x20>
	tVZFilterHS_setFreqFast(&FXVZfilterHS[v][string], value);
    8024:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    8028:	eddf 7a06 	vldr	s15, [pc, #24]	; 8044 <FXHighShelfParam1+0x24>
	tVZFilterHS_setFreqFast(&FXVZfilterHS[v][string], value);
    802c:	4b06      	ldr	r3, [pc, #24]	; (8048 <FXHighShelfParam1+0x28>)
    802e:	eee0 7a07 	vfma.f32	s15, s0, s14
    8032:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8036:	eeb0 0a67 	vmov.f32	s0, s15
    803a:	f001 ba25 	b.w	9488 <__tVZFilterHS_setFreqFast_veneer>
    803e:	bf00      	nop
    8040:	429a0000 	.word	0x429a0000
    8044:	42280000 	.word	0x42280000
    8048:	2001cc10 	.word	0x2001cc10
    804c:	f3af 8000 	nop.w
    8050:	f3af 8000 	nop.w
    8054:	f3af 8000 	nop.w
    8058:	f3af 8000 	nop.w
    805c:	f3af 8000 	nop.w

00008060 <FXNotchParam1>:
}
void __ATTR_ITCMRAM FXNotchParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    8060:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8080 <FXNotchParam1+0x20>
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
    8064:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    8068:	eddf 7a06 	vldr	s15, [pc, #24]	; 8084 <FXNotchParam1+0x24>
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
    806c:	4b06      	ldr	r3, [pc, #24]	; (8088 <FXNotchParam1+0x28>)
    806e:	eee0 7a07 	vfma.f32	s15, s0, s14
    8072:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8076:	eeb0 0a67 	vmov.f32	s0, s15
    807a:	f001 bab5 	b.w	95e8 <__tVZFilter_setFreqFast_veneer>
    807e:	bf00      	nop
    8080:	429a0000 	.word	0x429a0000
    8084:	42280000 	.word	0x42280000
    8088:	2001cbf0 	.word	0x2001cbf0
    808c:	f3af 8000 	nop.w
    8090:	f3af 8000 	nop.w
    8094:	f3af 8000 	nop.w
    8098:	f3af 8000 	nop.w
    809c:	f3af 8000 	nop.w

000080a0 <FXLadderParam1>:
}
void __ATTR_ITCMRAM FXLadderParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    80a0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80c0 <FXLadderParam1+0x20>
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
    80a4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    80a8:	eddf 7a06 	vldr	s15, [pc, #24]	; 80c4 <FXLadderParam1+0x24>
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
    80ac:	4b06      	ldr	r3, [pc, #24]	; (80c8 <FXLadderParam1+0x28>)
    80ae:	eee0 7a07 	vfma.f32	s15, s0, s14
    80b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    80b6:	eeb0 0a67 	vmov.f32	s0, s15
    80ba:	f001 baf5 	b.w	96a8 <__tLadderFilter_setFreqFast_veneer>
    80be:	bf00      	nop
    80c0:	429a0000 	.word	0x429a0000
    80c4:	42280000 	.word	0x42280000
    80c8:	2001cbd0 	.word	0x2001cbd0
    80cc:	f3af 8000 	nop.w
    80d0:	f3af 8000 	nop.w
    80d4:	f3af 8000 	nop.w
    80d8:	f3af 8000 	nop.w
    80dc:	f3af 8000 	nop.w

000080e0 <FXPeakParam2>:

//gain params

void __ATTR_ITCMRAM FXPeakParam2(float value, int v, int string)
{
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    80e0:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    80e4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 810c <FXPeakParam2+0x2c>
{
    80e8:	b538      	push	{r3, r4, r5, lr}
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    80ea:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    80ee:	4605      	mov	r5, r0
    80f0:	460c      	mov	r4, r1
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    80f2:	eeb0 0a67 	vmov.f32	s0, s15
    80f6:	f001 f9ab 	bl	9450 <__dbToATableLookup_veneer>
    80fa:	4b05      	ldr	r3, [pc, #20]	; (8110 <FXPeakParam2+0x30>)
    80fc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    8100:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    8104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8108:	f001 b90e 	b.w	9328 <__tVZFilterBell_setGain_veneer>
    810c:	42480000 	.word	0x42480000
    8110:	2001cc50 	.word	0x2001cc50
    8114:	f3af 8000 	nop.w
    8118:	f3af 8000 	nop.w
    811c:	f3af 8000 	nop.w

00008120 <FXLowShelfParam2>:

void __ATTR_ITCMRAM FXLowShelfParam2(float value, int v, int string)
{
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8120:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    8124:	ed9f 7a09 	vldr	s14, [pc, #36]	; 814c <FXLowShelfParam2+0x2c>
{
    8128:	b538      	push	{r3, r4, r5, lr}
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    812a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    812e:	4605      	mov	r5, r0
    8130:	460c      	mov	r4, r1
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8132:	eeb0 0a67 	vmov.f32	s0, s15
    8136:	f001 f98b 	bl	9450 <__dbToATableLookup_veneer>
    813a:	4b05      	ldr	r3, [pc, #20]	; (8150 <FXLowShelfParam2+0x30>)
    813c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    8140:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    8144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8148:	f001 b962 	b.w	9410 <__tVZFilterLS_setGain_veneer>
    814c:	42480000 	.word	0x42480000
    8150:	2001cc30 	.word	0x2001cc30
    8154:	f3af 8000 	nop.w
    8158:	f3af 8000 	nop.w
    815c:	f3af 8000 	nop.w

00008160 <FXHighShelfParam2>:

void __ATTR_ITCMRAM FXHighShelfParam2(float value, int v, int string)
{
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8160:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    8164:	ed9f 7a09 	vldr	s14, [pc, #36]	; 818c <FXHighShelfParam2+0x2c>
{
    8168:	b538      	push	{r3, r4, r5, lr}
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    816a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    816e:	4605      	mov	r5, r0
    8170:	460c      	mov	r4, r1
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8172:	eeb0 0a67 	vmov.f32	s0, s15
    8176:	f001 f96b 	bl	9450 <__dbToATableLookup_veneer>
    817a:	4b05      	ldr	r3, [pc, #20]	; (8190 <FXHighShelfParam2+0x30>)
    817c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    8180:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    8184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8188:	f001 bade 	b.w	9748 <__tVZFilterHS_setGain_veneer>
    818c:	42480000 	.word	0x42480000
    8190:	2001cc10 	.word	0x2001cc10
    8194:	f3af 8000 	nop.w
    8198:	f3af 8000 	nop.w
    819c:	f3af 8000 	nop.w

000081a0 <FXNotchParam2>:

void __ATTR_ITCMRAM FXNotchParam2(float value, int v, int string)
{
	tVZFilter_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    81a0:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    81a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 81cc <FXNotchParam2+0x2c>
{
    81a8:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    81aa:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    81ae:	4605      	mov	r5, r0
    81b0:	460c      	mov	r4, r1
	tVZFilter_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    81b2:	eeb0 0a67 	vmov.f32	s0, s15
    81b6:	f001 f94b 	bl	9450 <__dbToATableLookup_veneer>
    81ba:	4b05      	ldr	r3, [pc, #20]	; (81d0 <FXNotchParam2+0x30>)
    81bc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    81c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2

}
    81c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    81c8:	f001 b986 	b.w	94d8 <__tVZFilter_setGain_veneer>
    81cc:	42480000 	.word	0x42480000
    81d0:	2001cbf0 	.word	0x2001cbf0
    81d4:	f3af 8000 	nop.w
    81d8:	f3af 8000 	nop.w
    81dc:	f3af 8000 	nop.w

000081e0 <FXLowpassParam3>:
//resonance params
void __ATTR_ITCMRAM FXLowpassParam3(float value, int v, int string)
{
	tSVF_setQ(&FXlowpass[v][string], value);
    81e0:	4b03      	ldr	r3, [pc, #12]	; (81f0 <FXLowpassParam3+0x10>)
    81e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    81e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    81ea:	f001 ba11 	b.w	9610 <__tSVF_setQ_veneer>
    81ee:	bf00      	nop
    81f0:	2001ccd0 	.word	0x2001ccd0
    81f4:	f3af 8000 	nop.w
    81f8:	f3af 8000 	nop.w
    81fc:	f3af 8000 	nop.w

00008200 <FXHighpassParam3>:
}

void __ATTR_ITCMRAM FXHighpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXhighpass[v][string], value);
    8200:	4b03      	ldr	r3, [pc, #12]	; (8210 <FXHighpassParam3+0x10>)
    8202:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8206:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    820a:	f001 ba01 	b.w	9610 <__tSVF_setQ_veneer>
    820e:	bf00      	nop
    8210:	2001ccb0 	.word	0x2001ccb0
    8214:	f3af 8000 	nop.w
    8218:	f3af 8000 	nop.w
    821c:	f3af 8000 	nop.w

00008220 <FXBandpassParam3>:
}

void __ATTR_ITCMRAM FXBandpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXbandpass[v][string], value);
    8220:	4b03      	ldr	r3, [pc, #12]	; (8230 <FXBandpassParam3+0x10>)
    8222:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8226:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    822a:	f001 b9f1 	b.w	9610 <__tSVF_setQ_veneer>
    822e:	bf00      	nop
    8230:	2001cc70 	.word	0x2001cc70
    8234:	f3af 8000 	nop.w
    8238:	f3af 8000 	nop.w
    823c:	f3af 8000 	nop.w

00008240 <FXDiodeParam3>:
}

void __ATTR_ITCMRAM FXDiodeParam3(float value, int v, int string)
{
	tDiodeFilter_setQ(&FXdiodeFilters[v][string], value);
    8240:	4b03      	ldr	r3, [pc, #12]	; (8250 <FXDiodeParam3+0x10>)
    8242:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8246:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    824a:	f001 b845 	b.w	92d8 <__tDiodeFilter_setQ_veneer>
    824e:	bf00      	nop
    8250:	2001cc90 	.word	0x2001cc90
    8254:	f3af 8000 	nop.w
    8258:	f3af 8000 	nop.w
    825c:	f3af 8000 	nop.w

00008260 <FXPeakParam3>:
}


void __ATTR_ITCMRAM FXPeakParam3(float value, int v, int string)
{
	tVZFilterBell_setBandwidth(&FXVZfilterPeak[v][string], value);
    8260:	4b03      	ldr	r3, [pc, #12]	; (8270 <FXPeakParam3+0x10>)
    8262:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8266:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    826a:	f001 b861 	b.w	9330 <__tVZFilterBell_setBandwidth_veneer>
    826e:	bf00      	nop
    8270:	2001cc50 	.word	0x2001cc50
    8274:	f3af 8000 	nop.w
    8278:	f3af 8000 	nop.w
    827c:	f3af 8000 	nop.w

00008280 <FXLowShelfParam3>:
}


void __ATTR_ITCMRAM FXLowShelfParam3(float value, int v, int string)
{
	tVZFilterLS_setResonance(&FXVZfilterLS[v][string], value);
    8280:	4b03      	ldr	r3, [pc, #12]	; (8290 <FXLowShelfParam3+0x10>)
    8282:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8286:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    828a:	f001 ba11 	b.w	96b0 <__tVZFilterLS_setResonance_veneer>
    828e:	bf00      	nop
    8290:	2001cc30 	.word	0x2001cc30
    8294:	f3af 8000 	nop.w
    8298:	f3af 8000 	nop.w
    829c:	f3af 8000 	nop.w

000082a0 <FXHighShelfParam3>:
}


void __ATTR_ITCMRAM FXHighShelfParam3(float value, int v, int string)
{
	tVZFilterHS_setResonance(&FXVZfilterHS[v][string], value);
    82a0:	4b03      	ldr	r3, [pc, #12]	; (82b0 <FXHighShelfParam3+0x10>)
    82a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    82a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    82aa:	f001 b87d 	b.w	93a8 <__tVZFilterHS_setResonance_veneer>
    82ae:	bf00      	nop
    82b0:	2001cc10 	.word	0x2001cc10
    82b4:	f3af 8000 	nop.w
    82b8:	f3af 8000 	nop.w
    82bc:	f3af 8000 	nop.w

000082c0 <FXNotchParam3>:
}


void __ATTR_ITCMRAM FXNotchParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterBR[v][string], value);
    82c0:	4b03      	ldr	r3, [pc, #12]	; (82d0 <FXNotchParam3+0x10>)
    82c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    82c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    82ca:	f001 b8b1 	b.w	9430 <__tVZFilter_setResonance_veneer>
    82ce:	bf00      	nop
    82d0:	2001cbf0 	.word	0x2001cbf0
    82d4:	f3af 8000 	nop.w
    82d8:	f3af 8000 	nop.w
    82dc:	f3af 8000 	nop.w

000082e0 <FXLadderParam3>:
}


void __ATTR_ITCMRAM FXLadderParam3(float value, int v, int string)
{
	tLadderFilter_setQ(&FXLadderfilter[v][string], value);
    82e0:	4b03      	ldr	r3, [pc, #12]	; (82f0 <FXLadderParam3+0x10>)
    82e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    82e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    82ea:	f001 b885 	b.w	93f8 <__tLadderFilter_setQ_veneer>
    82ee:	bf00      	nop
    82f0:	2001cbd0 	.word	0x2001cbd0
    82f4:	f3af 8000 	nop.w
    82f8:	f3af 8000 	nop.w
    82fc:	f3af 8000 	nop.w

00008300 <noiseSetTilt>:


/////NOISE///

void __ATTR_ITCMRAM noiseSetTilt(float value, int v, int string)
{
    8300:	b510      	push	{r4, lr}
	tVZFilterLS_setGain(&noiseShelf1[string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    8302:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    8306:	008c      	lsls	r4, r1, #2
{
    8308:	ed2d 8b02 	vpush	{d8}
	tVZFilterLS_setGain(&noiseShelf1[string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    830c:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
{
    8310:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilterLS_setGain(&noiseShelf1[string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    8314:	eee0 7a68 	vfms.f32	s15, s0, s17
    8318:	eeb0 0a67 	vmov.f32	s0, s15
    831c:	f001 f898 	bl	9450 <__dbToATableLookup_veneer>
    8320:	4808      	ldr	r0, [pc, #32]	; (8344 <noiseSetTilt+0x44>)
    8322:	4420      	add	r0, r4
    8324:	f001 f874 	bl	9410 <__tVZFilterLS_setGain_veneer>
	tVZFilterHS_setGain(&noiseShelf2[string], dbToATableLookup((value * 30.0f) - 15.0f));
    8328:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
    832c:	eea8 0a28 	vfma.f32	s0, s16, s17
    8330:	f001 f88e 	bl	9450 <__dbToATableLookup_veneer>
    8334:	4804      	ldr	r0, [pc, #16]	; (8348 <noiseSetTilt+0x48>)
}
    8336:	ecbd 8b02 	vpop	{d8}
	tVZFilterHS_setGain(&noiseShelf2[string], dbToATableLookup((value * 30.0f) - 15.0f));
    833a:	4420      	add	r0, r4
}
    833c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilterHS_setGain(&noiseShelf2[string], dbToATableLookup((value * 30.0f) - 15.0f));
    8340:	f001 ba02 	b.w	9748 <__tVZFilterHS_setGain_veneer>
    8344:	2001d35c 	.word	0x2001d35c
    8348:	2001d364 	.word	0x2001d364
    834c:	f3af 8000 	nop.w
    8350:	f3af 8000 	nop.w
    8354:	f3af 8000 	nop.w
    8358:	f3af 8000 	nop.w
    835c:	f3af 8000 	nop.w

00008360 <noiseSetGain>:


void __ATTR_ITCMRAM noiseSetGain(float value, int v, int string)
{
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    8360:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
    8364:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8388 <noiseSetGain+0x28>
{
    8368:	b510      	push	{r4, lr}
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    836a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    836e:	460c      	mov	r4, r1
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    8370:	eeb0 0a67 	vmov.f32	s0, s15
    8374:	f001 f86c 	bl	9450 <__dbToATableLookup_veneer>
    8378:	4804      	ldr	r0, [pc, #16]	; (838c <noiseSetGain+0x2c>)
    837a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    837e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    8382:	f000 bfd1 	b.w	9328 <__tVZFilterBell_setGain_veneer>
    8386:	bf00      	nop
    8388:	42080000 	.word	0x42080000
    838c:	2001d340 	.word	0x2001d340
    8390:	f3af 8000 	nop.w
    8394:	f3af 8000 	nop.w
    8398:	f3af 8000 	nop.w
    839c:	f3af 8000 	nop.w

000083a0 <noiseSetFreq>:

void __ATTR_ITCMRAM noiseSetFreq(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    83a0:	ed9f 7a09 	vldr	s14, [pc, #36]	; 83c8 <noiseSetFreq+0x28>
    83a4:	eddf 7a09 	vldr	s15, [pc, #36]	; 83cc <noiseSetFreq+0x2c>
	tVZFilterBell_setFreq(&noiseBell1[string], faster_mtof(value));
    83a8:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    83ac:	b510      	push	{r4, lr}
    83ae:	460c      	mov	r4, r1
	tVZFilterBell_setFreq(&noiseBell1[string], faster_mtof(value));
    83b0:	eeb0 0a67 	vmov.f32	s0, s15
    83b4:	f001 f8c4 	bl	9540 <__faster_mtof_veneer>
    83b8:	4805      	ldr	r0, [pc, #20]	; (83d0 <noiseSetFreq+0x30>)
    83ba:	eb00 0084 	add.w	r0, r0, r4, lsl #2
	//value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);

}
    83be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilterBell_setFreq(&noiseBell1[string], faster_mtof(value));
    83c2:	f001 b84d 	b.w	9460 <__tVZFilterBell_setFreq_veneer>
    83c6:	bf00      	nop
    83c8:	429a0000 	.word	0x429a0000
    83cc:	42280000 	.word	0x42280000
    83d0:	2001d340 	.word	0x2001d340
    83d4:	f3af 8000 	nop.w
    83d8:	f3af 8000 	nop.w
    83dc:	f3af 8000 	nop.w

000083e0 <noise_tick>:


void __ATTR_ITCMRAM noise_tick(int string)
{
    83e0:	b538      	push	{r3, r4, r5, lr}
	float enabled = params[Noise].realVal[string];
    83e2:	4b25      	ldr	r3, [pc, #148]	; (8478 <noise_tick+0x98>)
{
    83e4:	4604      	mov	r4, r0
	float amp = params[NoiseAmp].realVal[string];
	float filterSend = params[NoiseFilterSend].realVal[string];
	amp = amp < 0.f ? 0.f : amp;
	float sample = random_values[randomValPointer++];
    83e6:	4d25      	ldr	r5, [pc, #148]	; (847c <noise_tick+0x9c>)
	float enabled = params[Noise].realVal[string];
    83e8:	eb03 0280 	add.w	r2, r3, r0, lsl #2
	float sample = random_values[randomValPointer++];
    83ec:	4924      	ldr	r1, [pc, #144]	; (8480 <noise_tick+0xa0>)
	sample = tVZFilterLS_tick(&noiseShelf1[string], sample);
    83ee:	4825      	ldr	r0, [pc, #148]	; (8484 <noise_tick+0xa4>)
	float filterSend = params[NoiseFilterSend].realVal[string];
    83f0:	4613      	mov	r3, r2
	sample = tVZFilterLS_tick(&noiseShelf1[string], sample);
    83f2:	eb00 0084 	add.w	r0, r0, r4, lsl #2
{
    83f6:	ed2d 8b04 	vpush	{d8-d9}
	float enabled = params[Noise].realVal[string];
    83fa:	ed92 9a80 	vldr	s18, [r2, #512]	; 0x200
	float amp = params[NoiseAmp].realVal[string];
    83fe:	edd2 8a9c 	vldr	s17, [r2, #624]	; 0x270
	float sample = random_values[randomValPointer++];
    8402:	782a      	ldrb	r2, [r5, #0]
	float filterSend = params[NoiseFilterSend].realVal[string];
    8404:	ed93 8aa3 	vldr	s16, [r3, #652]	; 0x28c
	float sample = random_values[randomValPointer++];
    8408:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    840c:	3201      	adds	r2, #1
	sample = tVZFilterLS_tick(&noiseShelf1[string], sample);
    840e:	ed91 0a00 	vldr	s0, [r1]
	float sample = random_values[randomValPointer++];
    8412:	702a      	strb	r2, [r5, #0]
	sample = tVZFilterLS_tick(&noiseShelf1[string], sample);
    8414:	f001 f958 	bl	96c8 <__tVZFilterLS_tick_veneer>
	sample = tVZFilterHS_tick(&noiseShelf2[string], sample);
    8418:	00a5      	lsls	r5, r4, #2
    841a:	481b      	ldr	r0, [pc, #108]	; (8488 <noise_tick+0xa8>)
    841c:	4428      	add	r0, r5
    841e:	f000 ff33 	bl	9288 <__tVZFilterHS_tick_veneer>
	sample = tVZFilterBell_tick(&noiseBell1[string], sample);
    8422:	481a      	ldr	r0, [pc, #104]	; (848c <noise_tick+0xac>)
    8424:	4428      	add	r0, r5
    8426:	f001 f923 	bl	9670 <__tVZFilterBell_tick_veneer>
	sample = sample * amp;
	float normSample = (sample + 1.f) * 0.5f;
    842a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	amp = amp < 0.f ? 0.f : amp;
    842e:	ed9f 6a18 	vldr	s12, [pc, #96]	; 8490 <noise_tick+0xb0>
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
	noiseOuts[0][string] = sample * filterSend *  enabled;
    8432:	ee29 7a08 	vmul.f32	s14, s18, s16
	float normSample = (sample + 1.f) * 0.5f;
    8436:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	noiseOuts[0][string] = sample * filterSend *  enabled;
    843a:	4b16      	ldr	r3, [pc, #88]	; (8494 <noise_tick+0xb4>)
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    843c:	ee37 8ac8 	vsub.f32	s16, s15, s16
	amp = amp < 0.f ? 0.f : amp;
    8440:	fec8 8a86 	vmaxnm.f32	s17, s17, s12
	sample = sample * amp;
    8444:	ee28 0a80 	vmul.f32	s0, s17, s0
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    8448:	4a13      	ldr	r2, [pc, #76]	; (8498 <noise_tick+0xb8>)
	noiseOuts[0][string] = sample * filterSend *  enabled;
    844a:	441d      	add	r5, r3
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    844c:	ee28 8a09 	vmul.f32	s16, s16, s18
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    8450:	eb02 0284 	add.w	r2, r2, r4, lsl #2
	float normSample = (sample + 1.f) * 0.5f;
    8454:	ee70 7a27 	vadd.f32	s15, s0, s15
	noiseOuts[0][string] = sample * filterSend *  enabled;
    8458:	ee27 7a00 	vmul.f32	s14, s14, s0
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    845c:	ee28 0a00 	vmul.f32	s0, s16, s0
	float normSample = (sample + 1.f) * 0.5f;
    8460:	ee67 7aa6 	vmul.f32	s15, s15, s13
	noiseOuts[0][string] = sample * filterSend *  enabled;
    8464:	ed85 7a00 	vstr	s14, [r5]
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    8468:	ed85 0a02 	vstr	s0, [r5, #8]
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    846c:	edc2 7a06 	vstr	s15, [r2, #24]
}
    8470:	ecbd 8b04 	vpop	{d8-d9}
    8474:	bd38      	pop	{r3, r4, r5, pc}
    8476:	bf00      	nop
    8478:	20018fbc 	.word	0x20018fbc
    847c:	2001d4cc 	.word	0x2001d4cc
    8480:	2001a100 	.word	0x2001a100
    8484:	2001d35c 	.word	0x2001d35c
    8488:	2001d364 	.word	0x2001d364
    848c:	2001d340 	.word	0x2001d340
    8490:	00000000 	.word	0x00000000
    8494:	2001d34c 	.word	0x2001d34c
    8498:	2001d5bc 	.word	0x2001d5bc
    849c:	f3af 8000 	nop.w

000084a0 <audioTickSynth>:
{
    84a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tempCountTick = DWT->CYCCNT;
    84a4:	4cbe      	ldr	r4, [pc, #760]	; (87a0 <audioTickSynth+0x300>)
    84a6:	4dbf      	ldr	r5, [pc, #764]	; (87a4 <audioTickSynth+0x304>)
    84a8:	f8df a37c 	ldr.w	sl, [pc, #892]	; 8828 <audioTickSynth+0x388>
    84ac:	f8df b37c 	ldr.w	fp, [pc, #892]	; 882c <audioTickSynth+0x38c>
    84b0:	f10a 0830 	add.w	r8, sl, #48	; 0x30
    84b4:	f8df 9378 	ldr.w	r9, [pc, #888]	; 8830 <audioTickSynth+0x390>
{
    84b8:	ed2d 8b06 	vpush	{d8-d10}
    84bc:	b091      	sub	sp, #68	; 0x44
    84be:	af00      	add	r7, sp, #0
	uint32_t tempCountTick = DWT->CYCCNT;
    84c0:	6863      	ldr	r3, [r4, #4]
    84c2:	60bb      	str	r3, [r7, #8]
	uint32_t tempCountMap = DWT->CYCCNT;
    84c4:	6866      	ldr	r6, [r4, #4]
	tickMappings();
    84c6:	f7fe fb5b 	bl	6b80 <tickMappings>
	timeMap = DWT->CYCCNT - tempCountMap;
    84ca:	6863      	ldr	r3, [r4, #4]
    84cc:	4ab6      	ldr	r2, [pc, #728]	; (87a8 <audioTickSynth+0x308>)
    84ce:	1b9b      	subs	r3, r3, r6
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    84d0:	48b6      	ldr	r0, [pc, #728]	; (87ac <audioTickSynth+0x30c>)
    84d2:	462e      	mov	r6, r5
	timeMap = DWT->CYCCNT - tempCountMap;
    84d4:	6013      	str	r3, [r2, #0]
	uint32_t tempSmoothing = DWT->CYCCNT;
    84d6:	6863      	ldr	r3, [r4, #4]
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    84d8:	462c      	mov	r4, r5
	uint32_t tempSmoothing = DWT->CYCCNT;
    84da:	62fb      	str	r3, [r7, #44]	; 0x2c
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    84dc:	f001 f828 	bl	9530 <__tExpSmooth_tick_veneer>
    84e0:	eef0 8a40 	vmov.f32	s17, s0
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    84e4:	4658      	mov	r0, fp
    84e6:	f001 f823 	bl	9530 <__tExpSmooth_tick_veneer>
		for (int v = 0; v < numStringsThisBoard; v++)
    84ea:	f899 3000 	ldrb.w	r3, [r9]
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    84ee:	ecaa 0a01 	vstmia	sl!, {s0}
		for (int v = 0; v < numStringsThisBoard; v++)
    84f2:	b12b      	cbz	r3, 8500 <audioTickSynth+0x60>
    84f4:	2b01      	cmp	r3, #1
			sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    84f6:	ed84 0a08 	vstr	s0, [r4, #32]
		for (int v = 0; v < numStringsThisBoard; v++)
    84fa:	d001      	beq.n	8500 <audioTickSynth+0x60>
			sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    84fc:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
	for (int i = 0; i < 12; i++)
    8500:	45c2      	cmp	sl, r8
    8502:	f10b 0b04 	add.w	fp, fp, #4
    8506:	f104 0408 	add.w	r4, r4, #8
    850a:	d1eb      	bne.n	84e4 <audioTickSynth+0x44>
    850c:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8834 <audioTickSynth+0x394>
    8510:	f8df a324 	ldr.w	sl, [pc, #804]	; 8838 <audioTickSynth+0x398>
    8514:	f108 0428 	add.w	r4, r8, #40	; 0x28
		pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    8518:	4650      	mov	r0, sl
    851a:	f001 f809 	bl	9530 <__tExpSmooth_tick_veneer>
		for (int v = 0; v < numStringsThisBoard; v++)
    851e:	f899 3000 	ldrb.w	r3, [r9]
		pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    8522:	eca8 0a01 	vstmia	r8!, {s0}
		for (int v = 0; v < numStringsThisBoard; v++)
    8526:	b12b      	cbz	r3, 8534 <audioTickSynth+0x94>
    8528:	2b01      	cmp	r3, #1
			sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    852a:	ed85 0a38 	vstr	s0, [r5, #224]	; 0xe0
		for (int v = 0; v < numStringsThisBoard; v++)
    852e:	d001      	beq.n	8534 <audioTickSynth+0x94>
			sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    8530:	ed85 0a39 	vstr	s0, [r5, #228]	; 0xe4
	for (int i = 0; i < 10; i++)
    8534:	45a0      	cmp	r8, r4
    8536:	f10a 0a04 	add.w	sl, sl, #4
    853a:	f105 0508 	add.w	r5, r5, #8
    853e:	d1eb      	bne.n	8518 <audioTickSynth+0x78>
	for (int v = 0; v < numStringsThisBoard; v++)
    8540:	2b00      	cmp	r3, #0
    8542:	f000 828d 	beq.w	8a60 <audioTickSynth+0x5c0>
		sourceValues[EXPRESSION_PEDAL_SOURCE_OFFSET][v] = volumePedal;
    8546:	4a9a      	ldr	r2, [pc, #616]	; (87b0 <audioTickSynth+0x310>)
	for (int v = 0; v < numStringsThisBoard; v++)
    8548:	2b01      	cmp	r3, #1
		sourceValues[EXPRESSION_PEDAL_SOURCE_OFFSET][v] = volumePedal;
    854a:	6812      	ldr	r2, [r2, #0]
    854c:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
	for (int v = 0; v < numStringsThisBoard; v++)
    8550:	d001      	beq.n	8556 <audioTickSynth+0xb6>
		sourceValues[EXPRESSION_PEDAL_SOURCE_OFFSET][v] = volumePedal;
    8552:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	float note[numStringsThisBoard];
    8556:	009b      	lsls	r3, r3, #2
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    8558:	f8df b244 	ldr.w	fp, [pc, #580]	; 87a0 <audioTickSynth+0x300>
    855c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
	float note[numStringsThisBoard];
    855e:	3307      	adds	r3, #7
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    8560:	f8db 2004 	ldr.w	r2, [fp, #4]
	uint32_t tempPerStringTick = DWT->CYCCNT;
    8564:	ed9f 9a93 	vldr	s18, [pc, #588]	; 87b4 <audioTickSynth+0x314>
	float note[numStringsThisBoard];
    8568:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    856c:	1a52      	subs	r2, r2, r1
		float sample = 0.0f;
    856e:	eef0 9a49 	vmov.f32	s19, s18
    8572:	ed9f aa91 	vldr	s20, [pc, #580]	; 87b8 <audioTickSynth+0x318>
	float note[numStringsThisBoard];
    8576:	ebad 0d03 	sub.w	sp, sp, r3
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    857a:	4b90      	ldr	r3, [pc, #576]	; (87bc <audioTickSynth+0x31c>)
    857c:	601a      	str	r2, [r3, #0]
	uint32_t tempPerStringTick = DWT->CYCCNT;
    857e:	4b90      	ldr	r3, [pc, #576]	; (87c0 <audioTickSynth+0x320>)
    8580:	4a90      	ldr	r2, [pc, #576]	; (87c4 <audioTickSynth+0x324>)
    8582:	62bb      	str	r3, [r7, #40]	; 0x28
    8584:	f8db 3004 	ldr.w	r3, [fp, #4]
    8588:	623a      	str	r2, [r7, #32]
    858a:	4a8f      	ldr	r2, [pc, #572]	; (87c8 <audioTickSynth+0x328>)
    858c:	607b      	str	r3, [r7, #4]
    858e:	2300      	movs	r3, #0
    8590:	61ba      	str	r2, [r7, #24]
    8592:	4a8e      	ldr	r2, [pc, #568]	; (87cc <audioTickSynth+0x32c>)
    8594:	469a      	mov	sl, r3
    8596:	62fb      	str	r3, [r7, #44]	; 0x2c
    8598:	627a      	str	r2, [r7, #36]	; 0x24
    859a:	4a8d      	ldr	r2, [pc, #564]	; (87d0 <audioTickSynth+0x330>)
    859c:	f8c7 d014 	str.w	sp, [r7, #20]
    85a0:	61fa      	str	r2, [r7, #28]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    85a2:	4b8c      	ldr	r3, [pc, #560]	; (87d4 <audioTickSynth+0x334>)
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    85a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    85a6:	edd3 7a00 	vldr	s15, [r3]
    85aa:	4b8b      	ldr	r3, [pc, #556]	; (87d8 <audioTickSynth+0x338>)
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    85ac:	4a8b      	ldr	r2, [pc, #556]	; (87dc <audioTickSynth+0x33c>)
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    85ae:	ed93 7a00 	vldr	s14, [r3]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    85b2:	4b8b      	ldr	r3, [pc, #556]	; (87e0 <audioTickSynth+0x340>)
    85b4:	440a      	add	r2, r1
		float sample = 0.0f;
    85b6:	edc7 9a0d 	vstr	s19, [r7, #52]	; 0x34
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    85ba:	eb03 038a 	add.w	r3, r3, sl, lsl #2
    85be:	edd2 6a00 	vldr	s13, [r2]
		uint32_t tempCountGettingNote = DWT->CYCCNT;
    85c2:	f8db 2004 	ldr.w	r2, [fp, #4]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    85c6:	ed93 8a00 	vldr	s16, [r3]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    85ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    85cc:	ee38 8a26 	vadd.f32	s16, s16, s13
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    85d0:	697b      	ldr	r3, [r7, #20]
    85d2:	460d      	mov	r5, r1
    85d4:	ee78 7a67 	vsub.f32	s15, s16, s15
    85d8:	fe88 8a4a 	vminnm.f32	s16, s16, s20
    85dc:	fe88 8a29 	vmaxnm.f32	s16, s16, s19
    85e0:	eca3 8a01 	vstmia	r3!, {s16}
    85e4:	617b      	str	r3, [r7, #20]
    85e6:	ee67 7a87 	vmul.f32	s15, s15, s14
    85ea:	edc1 7a00 	vstr	s15, [r1]
		timeGettingNote = DWT->CYCCNT - tempCountGettingNote;
    85ee:	f8db 3004 	ldr.w	r3, [fp, #4]
    85f2:	1a9b      	subs	r3, r3, r2
    85f4:	4a7b      	ldr	r2, [pc, #492]	; (87e4 <audioTickSynth+0x344>)
    85f6:	6013      	str	r3, [r2, #0]
    85f8:	1d0a      	adds	r2, r1, #4
		if (envOn[v])
    85fa:	4b7b      	ldr	r3, [pc, #492]	; (87e8 <audioTickSynth+0x348>)
    85fc:	62ba      	str	r2, [r7, #40]	; 0x28
    85fe:	781b      	ldrb	r3, [r3, #0]
		uint32_t tempCountEnv = DWT->CYCCNT;
    8600:	f8db 4004 	ldr.w	r4, [fp, #4]
		if (envOn[v])
    8604:	2b00      	cmp	r3, #0
    8606:	f040 8206 	bne.w	8a16 <audioTickSynth+0x576>
    860a:	4b77      	ldr	r3, [pc, #476]	; (87e8 <audioTickSynth+0x348>)
    860c:	785b      	ldrb	r3, [r3, #1]
    860e:	2b00      	cmp	r3, #0
    8610:	f040 81f8 	bne.w	8a04 <audioTickSynth+0x564>
    8614:	4b74      	ldr	r3, [pc, #464]	; (87e8 <audioTickSynth+0x348>)
    8616:	789b      	ldrb	r3, [r3, #2]
    8618:	2b00      	cmp	r3, #0
    861a:	f040 81ea 	bne.w	89f2 <audioTickSynth+0x552>
    861e:	4b72      	ldr	r3, [pc, #456]	; (87e8 <audioTickSynth+0x348>)
    8620:	78db      	ldrb	r3, [r3, #3]
    8622:	2b00      	cmp	r3, #0
    8624:	f040 81dc 	bne.w	89e0 <audioTickSynth+0x540>
		timeEnv = DWT->CYCCNT - tempCountEnv;
    8628:	f8db 3004 	ldr.w	r3, [fp, #4]
    862c:	3d88      	subs	r5, #136	; 0x88
    862e:	4a6f      	ldr	r2, [pc, #444]	; (87ec <audioTickSynth+0x34c>)
    8630:	1b1b      	subs	r3, r3, r4
    8632:	f8df 8208 	ldr.w	r8, [pc, #520]	; 883c <audioTickSynth+0x39c>
		uint32_t tempCountLFO = DWT->CYCCNT;
    8636:	4c6e      	ldr	r4, [pc, #440]	; (87f0 <audioTickSynth+0x350>)
		timeEnv = DWT->CYCCNT - tempCountEnv;
    8638:	6013      	str	r3, [r2, #0]
		uint32_t tempCountLFO = DWT->CYCCNT;
    863a:	f8db 6004 	ldr.w	r6, [fp, #4]
			float sample = 0.0f;
    863e:	4b6c      	ldr	r3, [pc, #432]	; (87f0 <audioTickSynth+0x350>)
			lfoShapeTick[i](&sample,i, string);
    8640:	4652      	mov	r2, sl
    8642:	f107 0038 	add.w	r0, r7, #56	; 0x38
    8646:	1ae1      	subs	r1, r4, r3
		if (lfoOn[i])
    8648:	f814 3b01 	ldrb.w	r3, [r4], #1
    864c:	b13b      	cbz	r3, 865e <audioTickSynth+0x1be>
			lfoShapeTick[i](&sample,i, string);
    864e:	f8d8 3000 	ldr.w	r3, [r8]
			float sample = 0.0f;
    8652:	edc7 9a0e 	vstr	s19, [r7, #56]	; 0x38
			lfoShapeTick[i](&sample,i, string);
    8656:	4798      	blx	r3
			sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    8658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    865a:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
	for (int i = 0; i < NUM_LFOS; i++)
    865e:	4b65      	ldr	r3, [pc, #404]	; (87f4 <audioTickSynth+0x354>)
    8660:	f108 0804 	add.w	r8, r8, #4
    8664:	3508      	adds	r5, #8
    8666:	429c      	cmp	r4, r3
    8668:	d1e9      	bne.n	863e <audioTickSynth+0x19e>
		timeLFO = DWT->CYCCNT - tempCountLFO;
    866a:	f8db 3004 	ldr.w	r3, [fp, #4]
		oscillator_tick(note[v], v);
    866e:	eeb0 0a48 	vmov.f32	s0, s16
		timeLFO = DWT->CYCCNT - tempCountLFO;
    8672:	4a61      	ldr	r2, [pc, #388]	; (87f8 <audioTickSynth+0x358>)
		oscillator_tick(note[v], v);
    8674:	4650      	mov	r0, sl
		timeLFO = DWT->CYCCNT - tempCountLFO;
    8676:	1b9b      	subs	r3, r3, r6
    8678:	6013      	str	r3, [r2, #0]
		uint32_t tempCountOsc = DWT->CYCCNT;
    867a:	f8db 4004 	ldr.w	r4, [fp, #4]
		oscillator_tick(note[v], v);
    867e:	f7fd fa2f 	bl	5ae0 <oscillator_tick>
		timeOsc = DWT->CYCCNT - tempCountOsc;
    8682:	f8db 3004 	ldr.w	r3, [fp, #4]
    8686:	4a5d      	ldr	r2, [pc, #372]	; (87fc <audioTickSynth+0x35c>)
    8688:	1b1b      	subs	r3, r3, r4
    868a:	6013      	str	r3, [r2, #0]
		if (noiseOn)
    868c:	4b5c      	ldr	r3, [pc, #368]	; (8800 <audioTickSynth+0x360>)
		uint32_t tempCountNoise = DWT->CYCCNT;
    868e:	f8db 4004 	ldr.w	r4, [fp, #4]
		if (noiseOn)
    8692:	781b      	ldrb	r3, [r3, #0]
    8694:	2b00      	cmp	r3, #0
    8696:	f040 819f 	bne.w	89d8 <audioTickSynth+0x538>
		timeNoise = DWT->CYCCNT - tempCountNoise;
    869a:	f8db 3004 	ldr.w	r3, [fp, #4]
    869e:	4a59      	ldr	r2, [pc, #356]	; (8804 <audioTickSynth+0x364>)
    86a0:	1b1b      	subs	r3, r3, r4
    86a2:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < oscToTick; i++)
    86a4:	4b58      	ldr	r3, [pc, #352]	; (8808 <audioTickSynth+0x368>)
    86a6:	781b      	ldrb	r3, [r3, #0]
    86a8:	2b00      	cmp	r3, #0
    86aa:	f000 81c9 	beq.w	8a40 <audioTickSynth+0x5a0>
			filterSamps[0] += oscOuts[0][i][v];
    86ae:	69fa      	ldr	r2, [r7, #28]
		for (int i = 0; i < oscToTick; i++)
    86b0:	2b01      	cmp	r3, #1
			filterSamps[0] += oscOuts[0][i][v];
    86b2:	ed92 6a00 	vldr	s12, [r2]
			filterSamps[1] += oscOuts[1][i][v];
    86b6:	edd2 7a06 	vldr	s15, [r2, #24]
		for (int i = 0; i < oscToTick; i++)
    86ba:	d011      	beq.n	86e0 <audioTickSynth+0x240>
			filterSamps[0] += oscOuts[0][i][v];
    86bc:	edd2 6a02 	vldr	s13, [r2, #8]
		for (int i = 0; i < oscToTick; i++)
    86c0:	2b02      	cmp	r3, #2
			filterSamps[1] += oscOuts[1][i][v];
    86c2:	ed92 7a08 	vldr	s14, [r2, #32]
			filterSamps[0] += oscOuts[0][i][v];
    86c6:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
    86ca:	ee77 7a87 	vadd.f32	s15, s15, s14
		for (int i = 0; i < oscToTick; i++)
    86ce:	d007      	beq.n	86e0 <audioTickSynth+0x240>
			filterSamps[0] += oscOuts[0][i][v];
    86d0:	edd2 6a04 	vldr	s13, [r2, #16]
			filterSamps[1] += oscOuts[1][i][v];
    86d4:	ed92 7a0a 	vldr	s14, [r2, #40]	; 0x28
			filterSamps[0] += oscOuts[0][i][v];
    86d8:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
    86dc:	ee77 7a87 	vadd.f32	s15, s15, s14
		filterSamps[0] += noiseOuts[0][v];
    86e0:	69bb      	ldr	r3, [r7, #24]
		sample = filter_tick(&filterSamps[0], note[v], v);
    86e2:	eeb0 0a48 	vmov.f32	s0, s16
    86e6:	4651      	mov	r1, sl
    86e8:	f107 0038 	add.w	r0, r7, #56	; 0x38
		filterSamps[0] += noiseOuts[0][v];
    86ec:	ecf3 6a01 	vldmia	r3!, {s13}
		filterSamps[1] += noiseOuts[1][v];
    86f0:	ed93 7a01 	vldr	s14, [r3, #4]
		filterSamps[0] += noiseOuts[0][v];
    86f4:	ee76 6a86 	vadd.f32	s13, s13, s12
    86f8:	61bb      	str	r3, [r7, #24]
		filterSamps[1] += noiseOuts[1][v];
    86fa:	ee77 7a27 	vadd.f32	s15, s14, s15
		filterSamps[0] += noiseOuts[0][v];
    86fe:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
		filterSamps[1] += noiseOuts[1][v];
    8702:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		uint32_t tempCountFilt = DWT->CYCCNT;
    8706:	f8db 4004 	ldr.w	r4, [fp, #4]
		sample = filter_tick(&filterSamps[0], note[v], v);
    870a:	f7fd fcb9 	bl	6080 <filter_tick>
    870e:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    8712:	eeb0 8a40 	vmov.f32	s16, s0
		timeFilt = DWT->CYCCNT - tempCountFilt;
    8716:	f8db 3004 	ldr.w	r3, [fp, #4]
    871a:	4a3c      	ldr	r2, [pc, #240]	; (880c <audioTickSynth+0x36c>)
    871c:	1b1b      	subs	r3, r3, r4
    871e:	6013      	str	r3, [r2, #0]
		if (fxPre)
    8720:	4b3b      	ldr	r3, [pc, #236]	; (8810 <audioTickSynth+0x370>)
    8722:	781b      	ldrb	r3, [r3, #0]
    8724:	b133      	cbz	r3, 8734 <audioTickSynth+0x294>
			sample *= amplitude[v];
    8726:	6a3b      	ldr	r3, [r7, #32]
    8728:	edd3 7a00 	vldr	s15, [r3]
    872c:	ee20 8a27 	vmul.f32	s16, s0, s15
    8730:	ed87 8a0d 	vstr	s16, [r7, #52]	; 0x34
		if (overSampled)
    8734:	4b37      	ldr	r3, [pc, #220]	; (8814 <audioTickSynth+0x374>)
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    8736:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
		if (overSampled)
    873a:	681c      	ldr	r4, [r3, #0]
		uint32_t tempCountOS = DWT->CYCCNT;
    873c:	f8db 3004 	ldr.w	r3, [fp, #4]
    8740:	613b      	str	r3, [r7, #16]
		if (overSampled)
    8742:	2c00      	cmp	r4, #0
    8744:	f040 80fe 	bne.w	8944 <audioTickSynth+0x4a4>
    8748:	4a33      	ldr	r2, [pc, #204]	; (8818 <audioTickSynth+0x378>)
    874a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    874c:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8840 <audioTickSynth+0x3a0>
    8750:	18d6      	adds	r6, r2, r3
    8752:	4a32      	ldr	r2, [pc, #200]	; (881c <audioTickSynth+0x37c>)
    8754:	18d5      	adds	r5, r2, r3
				if (effectsActive[i])
    8756:	f818 3b01 	ldrb.w	r3, [r8], #1
					sample = effectTick[i](sample, i, v); //run the effect
    875a:	eeb0 0a48 	vmov.f32	s0, s16
    875e:	4620      	mov	r0, r4
    8760:	4651      	mov	r1, sl
				if (effectsActive[i])
    8762:	b18b      	cbz	r3, 8788 <audioTickSynth+0x2e8>
					sample = effectTick[i](sample, i, v); //run the effect
    8764:	4b2e      	ldr	r3, [pc, #184]	; (8820 <audioTickSynth+0x380>)
    8766:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    876a:	4798      	blx	r3
					sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
    876c:	edd6 7a00 	vldr	s15, [r6]
					sample *= fxPostGain[i][v];
    8770:	ed95 7a00 	vldr	s14, [r5]
					sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
    8774:	ee7a 6ae7 	vsub.f32	s13, s21, s15
    8778:	ee60 7a27 	vmul.f32	s15, s0, s15
    877c:	eee6 7a88 	vfma.f32	s15, s13, s16
					sample *= fxPostGain[i][v];
    8780:	ee27 8a87 	vmul.f32	s16, s15, s14
    8784:	ed87 8a0d 	vstr	s16, [r7, #52]	; 0x34
			for (int i = 0; i < NUM_EFFECT; i++)
    8788:	3401      	adds	r4, #1
    878a:	3608      	adds	r6, #8
    878c:	3508      	adds	r5, #8
    878e:	2c04      	cmp	r4, #4
    8790:	d1e1      	bne.n	8756 <audioTickSynth+0x2b6>
		timeOS = DWT->CYCCNT - tempCountOS;
    8792:	f8db 3004 	ldr.w	r3, [fp, #4]
    8796:	693a      	ldr	r2, [r7, #16]
    8798:	1a9b      	subs	r3, r3, r2
    879a:	4a22      	ldr	r2, [pc, #136]	; (8824 <audioTickSynth+0x384>)
    879c:	6013      	str	r3, [r2, #0]
    879e:	e051      	b.n	8844 <audioTickSynth+0x3a4>
    87a0:	e0001000 	.word	0xe0001000
    87a4:	2001d5bc 	.word	0x2001d5bc
    87a8:	2001d71c 	.word	0x2001d71c
    87ac:	20013f80 	.word	0x20013f80
    87b0:	20013f78 	.word	0x20013f78
    87b4:	00000000 	.word	0x00000000
    87b8:	42fe0000 	.word	0x42fe0000
    87bc:	2001d730 	.word	0x2001d730
    87c0:	2001d644 	.word	0x2001d644
    87c4:	2001cd40 	.word	0x2001cd40
    87c8:	2001d34c 	.word	0x2001d34c
    87cc:	2001cf84 	.word	0x2001cf84
    87d0:	2001d3a0 	.word	0x2001d3a0
    87d4:	20018fa4 	.word	0x20018fa4
    87d8:	20018fa0 	.word	0x20018fa0
    87dc:	20013f50 	.word	0x20013f50
    87e0:	20013f48 	.word	0x20013f48
    87e4:	2001d714 	.word	0x2001d714
    87e8:	2001cf80 	.word	0x2001cf80
    87ec:	2001d70c 	.word	0x2001d70c
    87f0:	2001d104 	.word	0x2001d104
    87f4:	2001d108 	.word	0x2001d108
    87f8:	2001d718 	.word	0x2001d718
    87fc:	2001d728 	.word	0x2001d728
    8800:	2001d348 	.word	0x2001d348
    8804:	2001d720 	.word	0x2001d720
    8808:	200008ac 	.word	0x200008ac
    880c:	2001d710 	.word	0x2001d710
    8810:	2001632d 	.word	0x2001632d
    8814:	200008b0 	.word	0x200008b0
    8818:	2001d014 	.word	0x2001d014
    881c:	2001d034 	.word	0x2001d034
    8820:	2001cf70 	.word	0x2001cf70
    8824:	2001d724 	.word	0x2001d724
    8828:	20004f54 	.word	0x20004f54
    882c:	20004f84 	.word	0x20004f84
    8830:	200004b1 	.word	0x200004b1
    8834:	20005028 	.word	0x20005028
    8838:	20005050 	.word	0x20005050
    883c:	2001d168 	.word	0x2001d168
    8840:	20014200 	.word	0x20014200
		if (!fxPre)
    8844:	4b8c      	ldr	r3, [pc, #560]	; (8a78 <audioTickSynth+0x5d8>)
    8846:	781b      	ldrb	r3, [r3, #0]
    8848:	b933      	cbnz	r3, 8858 <audioTickSynth+0x3b8>
			sample *= amplitude[v];
    884a:	6a3b      	ldr	r3, [r7, #32]
    884c:	edd3 7a00 	vldr	s15, [r3]
    8850:	ee28 8a27 	vmul.f32	s16, s16, s15
    8854:	ed87 8a0d 	vstr	s16, [r7, #52]	; 0x34
	for (int v = 0; v < numStringsThisBoard; v++)
    8858:	6a3b      	ldr	r3, [r7, #32]
		sample = tSVF_tick(&finalLowpass[v], sample) * masterVolFromBrainForSynth;
    885a:	eeb0 0a48 	vmov.f32	s0, s16
    885e:	6afc      	ldr	r4, [r7, #44]	; 0x2c
	for (int v = 0; v < numStringsThisBoard; v++)
    8860:	f10a 0a01 	add.w	sl, sl, #1
    8864:	3304      	adds	r3, #4
    8866:	623b      	str	r3, [r7, #32]
    8868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    886a:	3304      	adds	r3, #4
    886c:	627b      	str	r3, [r7, #36]	; 0x24
    886e:	69fb      	ldr	r3, [r7, #28]
    8870:	3304      	adds	r3, #4
    8872:	61fb      	str	r3, [r7, #28]
		sample = tSVF_tick(&finalLowpass[v], sample) * masterVolFromBrainForSynth;
    8874:	4b81      	ldr	r3, [pc, #516]	; (8a7c <audioTickSynth+0x5dc>)
    8876:	1918      	adds	r0, r3, r4
    8878:	f000 ff22 	bl	96c0 <__tSVF_tick_veneer>
		masterSample += sample;// * finalMaster[v];
    887c:	4b80      	ldr	r3, [pc, #512]	; (8a80 <audioTickSynth+0x5e0>)
    887e:	edd3 7a00 	vldr	s15, [r3]
	for (int v = 0; v < numStringsThisBoard; v++)
    8882:	1d23      	adds	r3, r4, #4
    8884:	62fb      	str	r3, [r7, #44]	; 0x2c
		masterSample += sample;// * finalMaster[v];
    8886:	eea0 9a27 	vfma.f32	s18, s0, s15
	for (int v = 0; v < numStringsThisBoard; v++)
    888a:	f899 3000 	ldrb.w	r3, [r9]
    888e:	4553      	cmp	r3, sl
    8890:	f73f ae87 	bgt.w	85a2 <audioTickSynth+0x102>
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    8894:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 8a84 <audioTickSynth+0x5e4>
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    8898:	4b7b      	ldr	r3, [pc, #492]	; (8a88 <audioTickSynth+0x5e8>)
    889a:	6879      	ldr	r1, [r7, #4]
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    889c:	eef0 0a40 	vmov.f32	s1, s0
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    88a0:	685b      	ldr	r3, [r3, #4]
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    88a2:	eddf 7a7a 	vldr	s15, [pc, #488]	; 8a8c <audioTickSynth+0x5ec>
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    88a6:	1a5b      	subs	r3, r3, r1
    88a8:	4a79      	ldr	r2, [pc, #484]	; (8a90 <audioTickSynth+0x5f0>)
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    88aa:	eee8 0aa7 	vfma.f32	s1, s17, s15
    88ae:	ed9f 1a79 	vldr	s2, [pc, #484]	; 8a94 <audioTickSynth+0x5f4>
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    88b2:	6013      	str	r3, [r2, #0]
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    88b4:	f000 fdf0 	bl	9498 <__LEAF_clip_veneer>
	int volIdxInt = (int) volIdx;
    88b8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	if (pedalControlsMaster)
    88bc:	4a76      	ldr	r2, [pc, #472]	; (8a98 <audioTickSynth+0x5f8>)
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    88be:	4b77      	ldr	r3, [pc, #476]	; (8a9c <audioTickSynth+0x5fc>)
	if (pedalControlsMaster)
    88c0:	7810      	ldrb	r0, [r2, #0]
	int volIdxInt = (int) volIdx;
    88c2:	ee17 2a90 	vmov	r2, s15
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    88c6:	1c51      	adds	r1, r2, #1
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    88c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    88cc:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    88d0:	ed94 6a00 	vldr	s12, [r4]
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    88d4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    88d8:	edd3 6a00 	vldr	s13, [r3]
	if (pedalControlsMaster)
    88dc:	b178      	cbz	r0, 88fe <audioTickSynth+0x45e>
	float omAlpha = 1.0f - alpha;
    88de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	float alpha = volIdx-volIdxInt;
    88e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	float omAlpha = 1.0f - alpha;
    88e6:	ee37 7a40 	vsub.f32	s14, s14, s0
	float alpha = volIdx-volIdxInt;
    88ea:	ee30 0a67 	vsub.f32	s0, s0, s15
	float omAlpha = 1.0f - alpha;
    88ee:	ee77 7a27 	vadd.f32	s15, s14, s15
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    88f2:	ee67 7a86 	vmul.f32	s15, s15, s12
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    88f6:	eee6 7a80 	vfma.f32	s15, s13, s0
		masterSample *= outVol;
    88fa:	ee29 9a27 	vmul.f32	s18, s18, s15
	if (masterSample  > .999999f)
    88fe:	eddf 7a68 	vldr	s15, [pc, #416]	; 8aa0 <audioTickSynth+0x600>
    8902:	eeb4 9ae7 	vcmpe.f32	s18, s15
    8906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    890a:	f340 808b 	ble.w	8a24 <audioTickSynth+0x584>
		masterSample  = .999999f;
    890e:	eeb0 9a67 	vmov.f32	s18, s15
		sampleClippedCountdown = 65535;
    8912:	4b64      	ldr	r3, [pc, #400]	; (8aa4 <audioTickSynth+0x604>)
    8914:	f64f 72ff 	movw	r2, #65535	; 0xffff
    8918:	801a      	strh	r2, [r3, #0]
	return masterSample * audioMasterLevel * 0.98f;
    891a:	4963      	ldr	r1, [pc, #396]	; (8aa8 <audioTickSynth+0x608>)
	timeTick = DWT->CYCCNT - tempCountTick;
    891c:	4b5a      	ldr	r3, [pc, #360]	; (8a88 <audioTickSynth+0x5e8>)
	return masterSample * audioMasterLevel * 0.98f;
    891e:	eddf 7a63 	vldr	s15, [pc, #396]	; 8aac <audioTickSynth+0x60c>
	timeTick = DWT->CYCCNT - tempCountTick;
    8922:	685b      	ldr	r3, [r3, #4]
	return masterSample * audioMasterLevel * 0.98f;
    8924:	ed91 0a00 	vldr	s0, [r1]
	timeTick = DWT->CYCCNT - tempCountTick;
    8928:	68b9      	ldr	r1, [r7, #8]
}
    892a:	3744      	adds	r7, #68	; 0x44
	return masterSample * audioMasterLevel * 0.98f;
    892c:	ee20 0a27 	vmul.f32	s0, s0, s15
	timeTick = DWT->CYCCNT - tempCountTick;
    8930:	4a5f      	ldr	r2, [pc, #380]	; (8ab0 <audioTickSynth+0x610>)
    8932:	1a5b      	subs	r3, r3, r1
	return masterSample * audioMasterLevel * 0.98f;
    8934:	ee20 0a09 	vmul.f32	s0, s0, s18
	timeTick = DWT->CYCCNT - tempCountTick;
    8938:	6013      	str	r3, [r2, #0]
}
    893a:	46bd      	mov	sp, r7
    893c:	ecbd 8b06 	vpop	{d8-d10}
    8940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			arm_fir_interpolate_f32(&osI[v], &sample, (float*)&oversamplerArray, 1);
    8944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8946:	f107 0134 	add.w	r1, r7, #52	; 0x34
    894a:	485a      	ldr	r0, [pc, #360]	; (8ab4 <audioTickSynth+0x614>)
			for (int i = 0; i < 4; i++)
    894c:	2400      	movs	r4, #0
    894e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    8952:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8ae0 <audioTickSynth+0x640>
			arm_fir_interpolate_f32(&osI[v], &sample, (float*)&oversamplerArray, 1);
    8956:	4410      	add	r0, r2
    8958:	603a      	str	r2, [r7, #0]
    895a:	4a57      	ldr	r2, [pc, #348]	; (8ab8 <audioTickSynth+0x618>)
    895c:	18d6      	adds	r6, r2, r3
    895e:	4a57      	ldr	r2, [pc, #348]	; (8abc <audioTickSynth+0x61c>)
    8960:	18d5      	adds	r5, r2, r3
    8962:	2301      	movs	r3, #1
    8964:	4a56      	ldr	r2, [pc, #344]	; (8ac0 <audioTickSynth+0x620>)
    8966:	f000 fd8b 	bl	9480 <__arm_fir_interpolate_f32_veneer>
    896a:	4651      	mov	r1, sl
    896c:	46b2      	mov	sl, r6
    896e:	462e      	mov	r6, r5
				if (effectsActive[i])
    8970:	f818 3b01 	ldrb.w	r3, [r8], #1
    8974:	b993      	cbnz	r3, 899c <audioTickSynth+0x4fc>
			for (int i = 0; i < 4; i++)
    8976:	3401      	adds	r4, #1
    8978:	f10a 0a08 	add.w	sl, sl, #8
    897c:	3608      	adds	r6, #8
    897e:	2c04      	cmp	r4, #4
    8980:	d1f6      	bne.n	8970 <audioTickSynth+0x4d0>
			arm_fir_decimate_f32(&osD[v], (float*)&oversamplerArray, &sample, 2);
    8982:	683b      	ldr	r3, [r7, #0]
    8984:	468a      	mov	sl, r1
    8986:	484f      	ldr	r0, [pc, #316]	; (8ac4 <audioTickSynth+0x624>)
    8988:	f107 0234 	add.w	r2, r7, #52	; 0x34
    898c:	494c      	ldr	r1, [pc, #304]	; (8ac0 <audioTickSynth+0x620>)
    898e:	4418      	add	r0, r3
    8990:	2302      	movs	r3, #2
    8992:	f000 fe91 	bl	96b8 <__arm_fir_decimate_f32_veneer>
			sample *= amplitude[v];
    8996:	ed97 8a0d 	vldr	s16, [r7, #52]	; 0x34
    899a:	e6fa      	b.n	8792 <audioTickSynth+0x2f2>
    899c:	4d48      	ldr	r5, [pc, #288]	; (8ac0 <audioTickSynth+0x620>)
						float dry = oversamplerArray[j]; //store the dry value to mix later
    899e:	ed95 8a00 	vldr	s16, [r5]
						oversamplerArray[j] = effectTick[i](oversamplerArray[j], i, v); //run the effect
    89a2:	4620      	mov	r0, r4
    89a4:	4b48      	ldr	r3, [pc, #288]	; (8ac8 <audioTickSynth+0x628>)
    89a6:	eeb0 0a48 	vmov.f32	s0, s16
    89aa:	60f9      	str	r1, [r7, #12]
    89ac:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    89b0:	4798      	blx	r3
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    89b2:	edda 7a00 	vldr	s15, [sl]
						oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
    89b6:	ed96 7a00 	vldr	s14, [r6]
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    89ba:	ee20 0a27 	vmul.f32	s0, s0, s15
					for (int j = 0; j < OVERSAMPLE; j++)
    89be:	4b43      	ldr	r3, [pc, #268]	; (8acc <audioTickSynth+0x62c>)
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    89c0:	ee7a 7ae7 	vsub.f32	s15, s21, s15
					for (int j = 0; j < OVERSAMPLE; j++)
    89c4:	68f9      	ldr	r1, [r7, #12]
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    89c6:	eea7 0a88 	vfma.f32	s0, s15, s16
						oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
    89ca:	ee67 7a00 	vmul.f32	s15, s14, s0
    89ce:	ece5 7a01 	vstmia	r5!, {s15}
					for (int j = 0; j < OVERSAMPLE; j++)
    89d2:	42ab      	cmp	r3, r5
    89d4:	d1e3      	bne.n	899e <audioTickSynth+0x4fe>
    89d6:	e7ce      	b.n	8976 <audioTickSynth+0x4d6>
			noise_tick(v);
    89d8:	4650      	mov	r0, sl
    89da:	f7ff fd01 	bl	83e0 <noise_tick>
    89de:	e65c      	b.n	869a <audioTickSynth+0x1fa>
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
    89e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    89e2:	f103 0018 	add.w	r0, r3, #24
    89e6:	f000 fd7b 	bl	94e0 <__tADSRT_tickNoInterp_veneer>
    89ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    89ec:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
    89f0:	e61a      	b.n	8628 <audioTickSynth+0x188>
    89f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    89f4:	f103 0010 	add.w	r0, r3, #16
    89f8:	f000 fd72 	bl	94e0 <__tADSRT_tickNoInterp_veneer>
    89fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    89fe:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    8a02:	e60c      	b.n	861e <audioTickSynth+0x17e>
    8a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8a06:	f103 0008 	add.w	r0, r3, #8
    8a0a:	f000 fd69 	bl	94e0 <__tADSRT_tickNoInterp_veneer>
    8a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8a10:	ed83 0a07 	vstr	s0, [r3, #28]
    8a14:	e5fe      	b.n	8614 <audioTickSynth+0x174>
    8a16:	6a78      	ldr	r0, [r7, #36]	; 0x24
    8a18:	f000 fd62 	bl	94e0 <__tADSRT_tickNoInterp_veneer>
    8a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8a1e:	ed83 0a05 	vstr	s0, [r3, #20]
    8a22:	e5f2      	b.n	860a <audioTickSynth+0x16a>
	else if (masterSample < -.999999f)
    8a24:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8ad0 <audioTickSynth+0x630>
    8a28:	eeb4 9ae7 	vcmpe.f32	s18, s15
    8a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8a30:	d50b      	bpl.n	8a4a <audioTickSynth+0x5aa>
		sampleClippedCountdown = 65535;
    8a32:	4b1c      	ldr	r3, [pc, #112]	; (8aa4 <audioTickSynth+0x604>)
    8a34:	f64f 72ff 	movw	r2, #65535	; 0xffff
		masterSample = -.9999999f;
    8a38:	ed9f 9a26 	vldr	s18, [pc, #152]	; 8ad4 <audioTickSynth+0x634>
		sampleClippedCountdown = 65535;
    8a3c:	801a      	strh	r2, [r3, #0]
    8a3e:	e76c      	b.n	891a <audioTickSynth+0x47a>
		for (int i = 0; i < oscToTick; i++)
    8a40:	eddf 7a25 	vldr	s15, [pc, #148]	; 8ad8 <audioTickSynth+0x638>
    8a44:	eeb0 6a67 	vmov.f32	s12, s15
    8a48:	e64a      	b.n	86e0 <audioTickSynth+0x240>
		if (sampleClippedCountdown > 0)
    8a4a:	4a16      	ldr	r2, [pc, #88]	; (8aa4 <audioTickSynth+0x604>)
    8a4c:	8813      	ldrh	r3, [r2, #0]
    8a4e:	b29b      	uxth	r3, r3
    8a50:	2b00      	cmp	r3, #0
    8a52:	f43f af62 	beq.w	891a <audioTickSynth+0x47a>
			sampleClippedCountdown--;
    8a56:	8813      	ldrh	r3, [r2, #0]
    8a58:	3b01      	subs	r3, #1
    8a5a:	b29b      	uxth	r3, r3
    8a5c:	8013      	strh	r3, [r2, #0]
    8a5e:	e75c      	b.n	891a <audioTickSynth+0x47a>
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    8a60:	4a09      	ldr	r2, [pc, #36]	; (8a88 <audioTickSynth+0x5e8>)
    8a62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    8a64:	6853      	ldr	r3, [r2, #4]
    8a66:	491d      	ldr	r1, [pc, #116]	; (8adc <audioTickSynth+0x63c>)
    8a68:	1a1b      	subs	r3, r3, r0
	float masterSample = 0.0f;
    8a6a:	ed9f 9a1b 	vldr	s18, [pc, #108]	; 8ad8 <audioTickSynth+0x638>
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    8a6e:	600b      	str	r3, [r1, #0]
	uint32_t tempPerStringTick = DWT->CYCCNT;
    8a70:	6853      	ldr	r3, [r2, #4]
    8a72:	607b      	str	r3, [r7, #4]
	for (int v = 0; v < numStringsThisBoard; v++)
    8a74:	e70e      	b.n	8894 <audioTickSynth+0x3f4>
    8a76:	bf00      	nop
    8a78:	2001632d 	.word	0x2001632d
    8a7c:	2001cfec 	.word	0x2001cfec
    8a80:	200004ac 	.word	0x200004ac
    8a84:	423c0000 	.word	0x423c0000
    8a88:	e0001000 	.word	0xe0001000
    8a8c:	42a00000 	.word	0x42a00000
    8a90:	2001d72c 	.word	0x2001d72c
    8a94:	42fe0000 	.word	0x42fe0000
    8a98:	2001a0cc 	.word	0x2001a0cc
    8a9c:	2000051c 	.word	0x2000051c
    8aa0:	3f7fffef 	.word	0x3f7fffef
    8aa4:	2000549e 	.word	0x2000549e
    8aa8:	2000071c 	.word	0x2000071c
    8aac:	3f7ae148 	.word	0x3f7ae148
    8ab0:	2001d734 	.word	0x2001d734
    8ab4:	2001d384 	.word	0x2001d384
    8ab8:	2001d014 	.word	0x2001d014
    8abc:	2001d034 	.word	0x2001d034
    8ac0:	2001d3d0 	.word	0x2001d3d0
    8ac4:	2001d36c 	.word	0x2001d36c
    8ac8:	2001cf70 	.word	0x2001cf70
    8acc:	2001d3d8 	.word	0x2001d3d8
    8ad0:	bf7fffef 	.word	0xbf7fffef
    8ad4:	bf7ffffe 	.word	0xbf7ffffe
    8ad8:	00000000 	.word	0x00000000
    8adc:	2001d730 	.word	0x2001d730
    8ae0:	20014200 	.word	0x20014200
    8ae4:	f3af 8000 	nop.w
    8ae8:	f3af 8000 	nop.w
    8aec:	f3af 8000 	nop.w
    8af0:	f3af 8000 	nop.w
    8af4:	f3af 8000 	nop.w
    8af8:	f3af 8000 	nop.w
    8afc:	f3af 8000 	nop.w

00008b00 <audioFrameSynth>:
	uint32_t tempCountFrame = DWT->CYCCNT;
    8b00:	4bab      	ldr	r3, [pc, #684]	; (8db0 <audioFrameSynth+0x2b0>)
{
    8b02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (resetStringInputs)
    8b06:	f8df 930c 	ldr.w	r9, [pc, #780]	; 8e14 <audioFrameSynth+0x314>
{
    8b0a:	4607      	mov	r7, r0
    8b0c:	ed2d 8b04 	vpush	{d8-d9}
	uint32_t tempCountFrame = DWT->CYCCNT;
    8b10:	685b      	ldr	r3, [r3, #4]
{
    8b12:	b087      	sub	sp, #28
	uint32_t tempCountFrame = DWT->CYCCNT;
    8b14:	9301      	str	r3, [sp, #4]
	if (resetStringInputs)
    8b16:	f899 3000 	ldrb.w	r3, [r9]
    8b1a:	2b00      	cmp	r3, #0
    8b1c:	f040 808a 	bne.w	8c34 <audioFrameSynth+0x134>
    8b20:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 8e18 <audioFrameSynth+0x318>
	if (newPluck)
    8b24:	f8d8 3000 	ldr.w	r3, [r8]
    8b28:	2b00      	cmp	r3, #0
    8b2a:	d03a      	beq.n	8ba2 <audioFrameSynth+0xa2>
		for (int i = 0; i < numStringsThisBoard; i++)
    8b2c:	4ea1      	ldr	r6, [pc, #644]	; (8db4 <audioFrameSynth+0x2b4>)
    8b2e:	7833      	ldrb	r3, [r6, #0]
    8b30:	2b00      	cmp	r3, #0
    8b32:	d033      	beq.n	8b9c <audioFrameSynth+0x9c>
    8b34:	4aa0      	ldr	r2, [pc, #640]	; (8db8 <audioFrameSynth+0x2b8>)
    8b36:	2500      	movs	r5, #0
    8b38:	49a0      	ldr	r1, [pc, #640]	; (8dbc <audioFrameSynth+0x2bc>)
    8b3a:	9702      	str	r7, [sp, #8]
    8b3c:	9603      	str	r6, [sp, #12]
    8b3e:	460f      	mov	r7, r1
				float amplitz = stringInputs[i] * 0.000015259021897f;
    8b40:	eddf 8a9f 	vldr	s17, [pc, #636]	; 8dc0 <audioFrameSynth+0x2c0>
    8b44:	4616      	mov	r6, r2
    8b46:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8e1c <audioFrameSynth+0x31c>
    8b4a:	f8df b2d4 	ldr.w	fp, [pc, #724]	; 8e20 <audioFrameSynth+0x320>
    8b4e:	4c9d      	ldr	r4, [pc, #628]	; (8dc4 <audioFrameSynth+0x2c4>)
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    8b50:	f834 2015 	ldrh.w	r2, [r4, r5, lsl #1]
    8b54:	b292      	uxth	r2, r2
    8b56:	b932      	cbnz	r2, 8b66 <audioFrameSynth+0x66>
    8b58:	4a9b      	ldr	r2, [pc, #620]	; (8dc8 <audioFrameSynth+0x2c8>)
    8b5a:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    8b5e:	b292      	uxth	r2, r2
    8b60:	2a00      	cmp	r2, #0
    8b62:	f040 8095 	bne.w	8c90 <audioFrameSynth+0x190>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    8b66:	f834 2015 	ldrh.w	r2, [r4, r5, lsl #1]
    8b6a:	b292      	uxth	r2, r2
    8b6c:	b132      	cbz	r2, 8b7c <audioFrameSynth+0x7c>
    8b6e:	4a96      	ldr	r2, [pc, #600]	; (8dc8 <audioFrameSynth+0x2c8>)
    8b70:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    8b74:	b292      	uxth	r2, r2
    8b76:	2a00      	cmp	r2, #0
    8b78:	f000 80f7 	beq.w	8d6a <audioFrameSynth+0x26a>
			previousStringInputs[i] = stringInputs[i];
    8b7c:	4a92      	ldr	r2, [pc, #584]	; (8dc8 <audioFrameSynth+0x2c8>)
		for (int i = 0; i < numStringsThisBoard; i++)
    8b7e:	3604      	adds	r6, #4
    8b80:	f109 0904 	add.w	r9, r9, #4
    8b84:	f10b 0b04 	add.w	fp, fp, #4
			previousStringInputs[i] = stringInputs[i];
    8b88:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    8b8c:	3704      	adds	r7, #4
			previousStringInputs[i] = stringInputs[i];
    8b8e:	b292      	uxth	r2, r2
    8b90:	f824 2015 	strh.w	r2, [r4, r5, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    8b94:	3501      	adds	r5, #1
    8b96:	42ab      	cmp	r3, r5
    8b98:	dcda      	bgt.n	8b50 <audioFrameSynth+0x50>
    8b9a:	9f02      	ldr	r7, [sp, #8]
		newPluck = 0;
    8b9c:	2300      	movs	r3, #0
    8b9e:	f8c8 3000 	str.w	r3, [r8]
    8ba2:	4c8a      	ldr	r4, [pc, #552]	; (8dcc <audioFrameSynth+0x2cc>)
		current_sample = (int32_t)(audioTickSynth() * TWO_TO_23);
    8ba4:	ed9f 8a8a 	vldr	s16, [pc, #552]	; 8dd0 <audioFrameSynth+0x2d0>
    8ba8:	f504 7500 	add.w	r5, r4, #512	; 0x200
    8bac:	eb04 0487 	add.w	r4, r4, r7, lsl #2
    8bb0:	eb05 0587 	add.w	r5, r5, r7, lsl #2
    8bb4:	f7ff fc74 	bl	84a0 <audioTickSynth>
    8bb8:	ee20 0a08 	vmul.f32	s0, s0, s16
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    8bbc:	3408      	adds	r4, #8
		current_sample = (int32_t)(audioTickSynth() * TWO_TO_23);
    8bbe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    8bc2:	42ac      	cmp	r4, r5
		current_sample = (int32_t)(audioTickSynth() * TWO_TO_23);
    8bc4:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[buffer_offset + i + 1] = current_sample;
    8bc8:	e944 3302 	strd	r3, r3, [r4, #-8]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    8bcc:	d1f2      	bne.n	8bb4 <audioFrameSynth+0xb4>
	if (switchStrings)
    8bce:	4c81      	ldr	r4, [pc, #516]	; (8dd4 <audioFrameSynth+0x2d4>)
    8bd0:	6823      	ldr	r3, [r4, #0]
    8bd2:	2b00      	cmp	r3, #0
    8bd4:	d150      	bne.n	8c78 <audioFrameSynth+0x178>
	switchStrings = 0;
    8bd6:	2000      	movs	r0, #0
	timeFrame = DWT->CYCCNT - tempCountFrame;
    8bd8:	4b75      	ldr	r3, [pc, #468]	; (8db0 <audioFrameSynth+0x2b0>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    8bda:	4a7f      	ldr	r2, [pc, #508]	; (8dd8 <audioFrameSynth+0x2d8>)
	switchStrings = 0;
    8bdc:	6020      	str	r0, [r4, #0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    8bde:	9c01      	ldr	r4, [sp, #4]
    8be0:	685b      	ldr	r3, [r3, #4]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    8be2:	edd2 6a00 	vldr	s13, [r2]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    8be6:	1b1b      	subs	r3, r3, r4
	if (frameLoadPercentage > .99f)
    8be8:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8ddc <audioFrameSynth+0x2dc>
	timeFrame = DWT->CYCCNT - tempCountFrame;
    8bec:	497c      	ldr	r1, [pc, #496]	; (8de0 <audioFrameSynth+0x2e0>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    8bee:	ee07 3a90 	vmov	s15, r3
    8bf2:	4a7c      	ldr	r2, [pc, #496]	; (8de4 <audioFrameSynth+0x2e4>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
    8bf4:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    8bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
    8bfa:	ee67 7aa6 	vmul.f32	s15, s15, s13
	if (frameLoadPercentage > .99f)
    8bfe:	eef4 7ac7 	vcmpe.f32	s15, s14
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    8c02:	edc2 7a00 	vstr	s15, [r2]
	if (frameLoadPercentage > .99f)
    8c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8c0a:	dd0e      	ble.n	8c2a <audioFrameSynth+0x12a>
		frameLoadOverCount++;
    8c0c:	4a76      	ldr	r2, [pc, #472]	; (8de8 <audioFrameSynth+0x2e8>)
    8c0e:	6813      	ldr	r3, [r2, #0]
    8c10:	3301      	adds	r3, #1
		if (frameLoadOverCount > 3)
    8c12:	2b03      	cmp	r3, #3
		frameLoadOverCount++;
    8c14:	6013      	str	r3, [r2, #0]
		if (frameLoadOverCount > 3)
    8c16:	d908      	bls.n	8c2a <audioFrameSynth+0x12a>
			if (overSampled == 1)
    8c18:	4b74      	ldr	r3, [pc, #464]	; (8dec <audioFrameSynth+0x2ec>)
    8c1a:	681a      	ldr	r2, [r3, #0]
    8c1c:	2a01      	cmp	r2, #1
    8c1e:	d02f      	beq.n	8c80 <audioFrameSynth+0x180>
			else if (oscToTick > 0)
    8c20:	4a73      	ldr	r2, [pc, #460]	; (8df0 <audioFrameSynth+0x2f0>)
    8c22:	7813      	ldrb	r3, [r2, #0]
    8c24:	b10b      	cbz	r3, 8c2a <audioFrameSynth+0x12a>
				oscToTick--;
    8c26:	3b01      	subs	r3, #1
    8c28:	7013      	strb	r3, [r2, #0]
}
    8c2a:	b007      	add	sp, #28
    8c2c:	ecbd 8b04 	vpop	{d8-d9}
    8c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (int i = 0; i < numStringsThisBoard; i++)
    8c34:	4e5f      	ldr	r6, [pc, #380]	; (8db4 <audioFrameSynth+0x2b4>)
    8c36:	7833      	ldrb	r3, [r6, #0]
    8c38:	b1ab      	cbz	r3, 8c66 <audioFrameSynth+0x166>
    8c3a:	2500      	movs	r5, #0
    8c3c:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 8e24 <audioFrameSynth+0x324>
    8c40:	4c60      	ldr	r4, [pc, #384]	; (8dc4 <audioFrameSynth+0x2c4>)
				previousStringInputs[i] = 0;
    8c42:	46aa      	mov	sl, r5
    8c44:	f1a8 0b20 	sub.w	fp, r8, #32
				tADSRT_clear(&envs[v][i]);
    8c48:	4658      	mov	r0, fp
			for (int v = 0; v < NUM_ENV; v++)
    8c4a:	f10b 0b08 	add.w	fp, fp, #8
				tADSRT_clear(&envs[v][i]);
    8c4e:	f000 fb63 	bl	9318 <__tADSRT_clear_veneer>
				previousStringInputs[i] = 0;
    8c52:	f824 a015 	strh.w	sl, [r4, r5, lsl #1]
			for (int v = 0; v < NUM_ENV; v++)
    8c56:	45c3      	cmp	fp, r8
    8c58:	d1f6      	bne.n	8c48 <audioFrameSynth+0x148>
		for (int i = 0; i < numStringsThisBoard; i++)
    8c5a:	3501      	adds	r5, #1
    8c5c:	7833      	ldrb	r3, [r6, #0]
    8c5e:	f108 0804 	add.w	r8, r8, #4
    8c62:	42ab      	cmp	r3, r5
    8c64:	dcee      	bgt.n	8c44 <audioFrameSynth+0x144>
		resetStringInputs = 0;
    8c66:	2300      	movs	r3, #0
		newPluck = 1;
    8c68:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8e18 <audioFrameSynth+0x318>
		resetStringInputs = 0;
    8c6c:	f889 3000 	strb.w	r3, [r9]
		newPluck = 1;
    8c70:	2301      	movs	r3, #1
    8c72:	f8c8 3000 	str.w	r3, [r8]
    8c76:	e755      	b.n	8b24 <audioFrameSynth+0x24>
		switchStringModel(switchStrings);
    8c78:	6820      	ldr	r0, [r4, #0]
    8c7a:	f7f8 fc91 	bl	15a0 <switchStringModel>
    8c7e:	e7aa      	b.n	8bd6 <audioFrameSynth+0xd6>
				overSampled = 0;
    8c80:	6018      	str	r0, [r3, #0]
}
    8c82:	b007      	add	sp, #28
    8c84:	ecbd 8b04 	vpop	{d8-d9}
    8c88:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				changeOversampling(overSampled);
    8c8c:	f000 bc94 	b.w	95b8 <__changeOversampling_veneer>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    8c90:	4b4d      	ldr	r3, [pc, #308]	; (8dc8 <audioFrameSynth+0x2c8>)
    8c92:	f5ab 7213 	sub.w	r2, fp, #588	; 0x24c
    8c96:	f8df a178 	ldr.w	sl, [pc, #376]	; 8e10 <audioFrameSynth+0x310>
						if (useVelocity == 0) envVel = 1.f;
    8c9a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
				float amplitz = stringInputs[i] * 0.000015259021897f;
    8c9e:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
    8ca2:	f10a 0104 	add.w	r1, sl, #4
						voiceSounding = 1;
    8ca6:	9504      	str	r5, [sp, #16]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    8ca8:	b29b      	uxth	r3, r3
						voiceSounding = 1;
    8caa:	4655      	mov	r5, sl
    8cac:	9405      	str	r4, [sp, #20]
    8cae:	46ca      	mov	sl, r9
				float amplitz = stringInputs[i] * 0.000015259021897f;
    8cb0:	ee08 3a10 	vmov	s16, r3
				stringOctave[i] = octave;
    8cb4:	4b4f      	ldr	r3, [pc, #316]	; (8df4 <audioFrameSynth+0x2f4>)
						voiceSounding = 1;
    8cb6:	4614      	mov	r4, r2
				float amplitz = stringInputs[i] * 0.000015259021897f;
    8cb8:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
				stringOctave[i] = octave;
    8cbc:	681b      	ldr	r3, [r3, #0]
    8cbe:	603b      	str	r3, [r7, #0]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    8cc0:	ee28 8a28 	vmul.f32	s16, s16, s17
					if (envOn[v])
    8cc4:	f815 3b01 	ldrb.w	r3, [r5], #1
						tADSRT_on(&envs[v][i], envVel);
    8cc8:	4650      	mov	r0, sl
					if (envOn[v])
    8cca:	b16b      	cbz	r3, 8ce8 <audioFrameSynth+0x1e8>
						if (useVelocity == 0) envVel = 1.f;
    8ccc:	edd4 7a00 	vldr	s15, [r4]
    8cd0:	eef5 7a40 	vcmp.f32	s15, #0.0
    8cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
						tADSRT_on(&envs[v][i], envVel);
    8cd8:	fe09 0a08 	vseleq.f32	s0, s18, s16
    8cdc:	f000 fcb8 	bl	9650 <__tADSRT_on_veneer>
						voiceSounding = 1;
    8ce0:	2001      	movs	r0, #1
    8ce2:	4b45      	ldr	r3, [pc, #276]	; (8df8 <audioFrameSynth+0x2f8>)
    8ce4:	4945      	ldr	r1, [pc, #276]	; (8dfc <audioFrameSynth+0x2fc>)
    8ce6:	7018      	strb	r0, [r3, #0]
				for (int v = 0; v < NUM_ENV; v++)
    8ce8:	42a9      	cmp	r1, r5
    8cea:	f10a 0a08 	add.w	sl, sl, #8
    8cee:	f104 04a8 	add.w	r4, r4, #168	; 0xa8
    8cf2:	d1e7      	bne.n	8cc4 <audioFrameSynth+0x1c4>
						if (noteOnSync > 0.5f)
    8cf4:	9d04      	ldr	r5, [sp, #16]
    8cf6:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
				for (int v = 0; v < NUM_ENV; v++)
    8cfa:	f8df a104 	ldr.w	sl, [pc, #260]	; 8e00 <audioFrameSynth+0x300>
    8cfe:	465c      	mov	r4, fp
    8d00:	ebc5 7385 	rsb	r3, r5, r5, lsl #30
    8d04:	009b      	lsls	r3, r3, #2
    8d06:	330c      	adds	r3, #12
    8d08:	9304      	str	r3, [sp, #16]
						if (noteOnSync > 0.5f)
    8d0a:	4b3d      	ldr	r3, [pc, #244]	; (8e00 <audioFrameSynth+0x300>)
    8d0c:	ebaa 0003 	sub.w	r0, sl, r3
					if (lfoOn[v])
    8d10:	f81a 3b01 	ldrb.w	r3, [sl], #1
    8d14:	b163      	cbz	r3, 8d30 <audioFrameSynth+0x230>
						if (noteOnSync > 0.5f)
    8d16:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
    8d1a:	eef4 7ac9 	vcmpe.f32	s15, s18
    8d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8d22:	dd05      	ble.n	8d30 <audioFrameSynth+0x230>
							lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal[i], v, i);
    8d24:	9b04      	ldr	r3, [sp, #16]
    8d26:	4629      	mov	r1, r5
    8d28:	ed94 0a00 	vldr	s0, [r4]
    8d2c:	58e3      	ldr	r3, [r4, r3]
    8d2e:	4798      	blx	r3
				for (int v = 0; v < NUM_LFOS; v++)
    8d30:	4b34      	ldr	r3, [pc, #208]	; (8e04 <audioFrameSynth+0x304>)
    8d32:	348c      	adds	r4, #140	; 0x8c
    8d34:	4553      	cmp	r3, sl
    8d36:	d1e8      	bne.n	8d0a <audioFrameSynth+0x20a>
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    8d38:	4833      	ldr	r0, [pc, #204]	; (8e08 <audioFrameSynth+0x308>)
    8d3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    8d3e:	4933      	ldr	r1, [pc, #204]	; (8e0c <audioFrameSynth+0x30c>)
    8d40:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    8d44:	7802      	ldrb	r2, [r0, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    8d46:	9b03      	ldr	r3, [sp, #12]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    8d48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    8d4c:	3201      	adds	r2, #1
    8d4e:	9c05      	ldr	r4, [sp, #20]
    8d50:	edd1 7a00 	vldr	s15, [r1]
		for (int i = 0; i < numStringsThisBoard; i++)
    8d54:	781b      	ldrb	r3, [r3, #0]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    8d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
				sourceValues[VELOCITY_SOURCE_OFFSET][i] = amplitz;
    8d5a:	ed86 8a00 	vstr	s16, [r6]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    8d5e:	7002      	strb	r2, [r0, #0]
    8d60:	ee67 7a87 	vmul.f32	s15, s15, s14
    8d64:	edc6 7a02 	vstr	s15, [r6, #8]
			{
    8d68:	e708      	b.n	8b7c <audioFrameSynth+0x7c>
					if (envOn[v])
    8d6a:	4b29      	ldr	r3, [pc, #164]	; (8e10 <audioFrameSynth+0x310>)
    8d6c:	781b      	ldrb	r3, [r3, #0]
    8d6e:	b95b      	cbnz	r3, 8d88 <audioFrameSynth+0x288>
    8d70:	4b27      	ldr	r3, [pc, #156]	; (8e10 <audioFrameSynth+0x310>)
    8d72:	785b      	ldrb	r3, [r3, #1]
    8d74:	b9b3      	cbnz	r3, 8da4 <audioFrameSynth+0x2a4>
    8d76:	4b26      	ldr	r3, [pc, #152]	; (8e10 <audioFrameSynth+0x310>)
    8d78:	789b      	ldrb	r3, [r3, #2]
    8d7a:	b973      	cbnz	r3, 8d9a <audioFrameSynth+0x29a>
    8d7c:	4b24      	ldr	r3, [pc, #144]	; (8e10 <audioFrameSynth+0x310>)
    8d7e:	78db      	ldrb	r3, [r3, #3]
    8d80:	b933      	cbnz	r3, 8d90 <audioFrameSynth+0x290>
		for (int i = 0; i < numStringsThisBoard; i++)
    8d82:	9b03      	ldr	r3, [sp, #12]
    8d84:	781b      	ldrb	r3, [r3, #0]
    8d86:	e6f9      	b.n	8b7c <audioFrameSynth+0x7c>
						tADSRT_off(&envs[v][i]);
    8d88:	4648      	mov	r0, r9
    8d8a:	f000 fc0d 	bl	95a8 <__tADSRT_off_veneer>
    8d8e:	e7ef      	b.n	8d70 <audioFrameSynth+0x270>
    8d90:	f109 0018 	add.w	r0, r9, #24
    8d94:	f000 fc08 	bl	95a8 <__tADSRT_off_veneer>
    8d98:	e7f3      	b.n	8d82 <audioFrameSynth+0x282>
    8d9a:	f109 0010 	add.w	r0, r9, #16
    8d9e:	f000 fc03 	bl	95a8 <__tADSRT_off_veneer>
    8da2:	e7eb      	b.n	8d7c <audioFrameSynth+0x27c>
    8da4:	f109 0008 	add.w	r0, r9, #8
    8da8:	f000 fbfe 	bl	95a8 <__tADSRT_off_veneer>
    8dac:	e7e3      	b.n	8d76 <audioFrameSynth+0x276>
    8dae:	bf00      	nop
    8db0:	e0001000 	.word	0xe0001000
    8db4:	200004b1 	.word	0x200004b1
    8db8:	2001d64c 	.word	0x2001d64c
    8dbc:	20013f50 	.word	0x20013f50
    8dc0:	37800080 	.word	0x37800080
    8dc4:	20005084 	.word	0x20005084
    8dc8:	20013f30 	.word	0x20013f30
    8dcc:	30000000 	.word	0x30000000
    8dd0:	4b000000 	.word	0x4b000000
    8dd4:	20013f68 	.word	0x20013f68
    8dd8:	200004a4 	.word	0x200004a4
    8ddc:	3f7d70a4 	.word	0x3f7d70a4
    8de0:	20013f6c 	.word	0x20013f6c
    8de4:	20004f40 	.word	0x20004f40
    8de8:	20004f3c 	.word	0x20004f3c
    8dec:	200008b0 	.word	0x200008b0
    8df0:	200008ac 	.word	0x200008ac
    8df4:	20005020 	.word	0x20005020
    8df8:	2001d754 	.word	0x2001d754
    8dfc:	2001cf84 	.word	0x2001cf84
    8e00:	2001d104 	.word	0x2001d104
    8e04:	2001d108 	.word	0x2001d108
    8e08:	2001d4cc 	.word	0x2001d4cc
    8e0c:	2001a100 	.word	0x2001a100
    8e10:	2001cf80 	.word	0x2001cf80
    8e14:	2000549d 	.word	0x2000549d
    8e18:	20005014 	.word	0x20005014
    8e1c:	2001cf84 	.word	0x2001cf84
    8e20:	20019e6c 	.word	0x20019e6c
    8e24:	2001cfa4 	.word	0x2001cfa4
	...

00008e40 <audioInitVocal>:

tVoc vocal[NUM_STRINGS_PER_BOARD];
int prevTractLength = 22;

void __ATTR_ITCMRAM audioInitVocal()
{
    8e40:	b510      	push	{r4, lr}
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
	{
		tVoc_init(&vocal[v], 22, 65, &leaf);
    8e42:	4c07      	ldr	r4, [pc, #28]	; (8e60 <audioInitVocal+0x20>)
    8e44:	2241      	movs	r2, #65	; 0x41
    8e46:	4b07      	ldr	r3, [pc, #28]	; (8e64 <audioInitVocal+0x24>)
    8e48:	2116      	movs	r1, #22
    8e4a:	4620      	mov	r0, r4
    8e4c:	f000 fbdc 	bl	9608 <__tVoc_init_veneer>
    8e50:	1d20      	adds	r0, r4, #4
    8e52:	4b04      	ldr	r3, [pc, #16]	; (8e64 <audioInitVocal+0x24>)
    8e54:	2241      	movs	r2, #65	; 0x41
    8e56:	2116      	movs	r1, #22
	}
}
    8e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tVoc_init(&vocal[v], 22, 65, &leaf);
    8e5c:	f000 bbd4 	b.w	9608 <__tVoc_init_veneer>
    8e60:	2001d778 	.word	0x2001d778
    8e64:	20004fb8 	.word	0x20004fb8
    8e68:	f3af 8000 	nop.w
    8e6c:	f3af 8000 	nop.w
    8e70:	f3af 8000 	nop.w
    8e74:	f3af 8000 	nop.w
    8e78:	f3af 8000 	nop.w
    8e7c:	f3af 8000 	nop.w

00008e80 <audioFreeVocal>:

void __ATTR_ITCMRAM audioFreeVocal()
{
	;
}
    8e80:	4770      	bx	lr
    8e82:	bf00      	nop
    8e84:	f3af 8000 	nop.w
    8e88:	f3af 8000 	nop.w
    8e8c:	f3af 8000 	nop.w
    8e90:	f3af 8000 	nop.w
    8e94:	f3af 8000 	nop.w
    8e98:	f3af 8000 	nop.w
    8e9c:	f3af 8000 	nop.w

00008ea0 <audioTickVocal>:
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
}


float __ATTR_ITCMRAM audioTickVocal(void)
{
    8ea0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8ea4:	4f52      	ldr	r7, [pc, #328]	; (8ff0 <audioTickVocal+0x150>)
    8ea6:	4d53      	ldr	r5, [pc, #332]	; (8ff4 <audioTickVocal+0x154>)
    8ea8:	463c      	mov	r4, r7
    8eaa:	f107 0630 	add.w	r6, r7, #48	; 0x30
    8eae:	ed2d 8b04 	vpush	{d8-d9}
	float tempSamp = 0.0f;
	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    8eb2:	4628      	mov	r0, r5
	for (int i = 0; i < 12; i++)
    8eb4:	3504      	adds	r5, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    8eb6:	f000 fb3b 	bl	9530 <__tExpSmooth_tick_veneer>
    8eba:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
    8ebe:	42b4      	cmp	r4, r6
    8ec0:	d1f7      	bne.n	8eb2 <audioTickVocal+0x12>
	}

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    8ec2:	484d      	ldr	r0, [pc, #308]	; (8ff8 <audioTickVocal+0x158>)
    8ec4:	f000 fb34 	bl	9530 <__tExpSmooth_tick_veneer>

	int newTractLength = knobScaled[0] * 64 + 1;
    8ec8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    8ecc:	edd7 6a00 	vldr	s13, [r7]
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    8ed0:	eeb0 9a40 	vmov.f32	s18, s0
	int newTractLength = knobScaled[0] * 64 + 1;
    8ed4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8ffc <audioTickVocal+0x15c>
	if (newTractLength != prevTractLength)
    8ed8:	4d49      	ldr	r5, [pc, #292]	; (9000 <audioTickVocal+0x160>)
	int newTractLength = knobScaled[0] * 64 + 1;
    8eda:	eee6 7a87 	vfma.f32	s15, s13, s14
	if (newTractLength != prevTractLength)
    8ede:	682b      	ldr	r3, [r5, #0]
	int newTractLength = knobScaled[0] * 64 + 1;
    8ee0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    8ee4:	ee17 4a90 	vmov	r4, s15
	if (newTractLength != prevTractLength)
    8ee8:	42a3      	cmp	r3, r4
    8eea:	d004      	beq.n	8ef6 <audioTickVocal+0x56>
	{
		tVoc_set_tractLength(&vocal[0], newTractLength);
    8eec:	ee17 1a90 	vmov	r1, s15
    8ef0:	4844      	ldr	r0, [pc, #272]	; (9004 <audioTickVocal+0x164>)
    8ef2:	f000 fa99 	bl	9428 <__tVoc_set_tractLength_veneer>
	}

	tVoc_setDoubleComputeFlag(&vocal[0], knobScaled[1] > 0.5f);
    8ef6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    8efa:	ed97 7a01 	vldr	s14, [r7, #4]

	prevTractLength = newTractLength;
	for (int i = 0; i < numStringsThisBoard; i++)
    8efe:	f8df 9124 	ldr.w	r9, [pc, #292]	; 9024 <audioTickVocal+0x184>
	tVoc_setDoubleComputeFlag(&vocal[0], knobScaled[1] > 0.5f);
    8f02:	4840      	ldr	r0, [pc, #256]	; (9004 <audioTickVocal+0x164>)
    8f04:	eeb4 7ae7 	vcmpe.f32	s14, s15
    8f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8f0c:	bfcc      	ite	gt
    8f0e:	2101      	movgt	r1, #1
    8f10:	2100      	movle	r1, #0
    8f12:	f000 fb31 	bl	9578 <__tVoc_setDoubleComputeFlag_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    8f16:	f899 3000 	ldrb.w	r3, [r9]
	prevTractLength = newTractLength;
    8f1a:	602c      	str	r4, [r5, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
    8f1c:	2b00      	cmp	r3, #0
    8f1e:	d064      	beq.n	8fea <audioTickVocal+0x14a>
    8f20:	4d38      	ldr	r5, [pc, #224]	; (9004 <audioTickVocal+0x164>)
    8f22:	2400      	movs	r4, #0
    8f24:	f8df 8100 	ldr.w	r8, [pc, #256]	; 9028 <audioTickVocal+0x188>
    8f28:	4f37      	ldr	r7, [pc, #220]	; (9008 <audioTickVocal+0x168>)
	float tempSamp = 0.0f;
    8f2a:	eddf 8a38 	vldr	s17, [pc, #224]	; 900c <audioTickVocal+0x16c>
    8f2e:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 902c <audioTickVocal+0x18c>
    8f32:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 9030 <audioTickVocal+0x190>
	{
		tempSamp += tVoc_tick(&vocal[i]) * tADSRT_tickNoInterp(&fenvelopes[i]);
    8f36:	4628      	mov	r0, r5
    8f38:	00a6      	lsls	r6, r4, #2
    8f3a:	f000 fbb1 	bl	96a0 <__tVoc_tick_veneer>
    8f3e:	eeb0 8a40 	vmov.f32	s16, s0
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    8f42:	4456      	add	r6, sl
		tempSamp += tVoc_tick(&vocal[i]) * tADSRT_tickNoInterp(&fenvelopes[i]);
    8f44:	eb0b 0084 	add.w	r0, fp, r4, lsl #2
    8f48:	f000 faca 	bl	94e0 <__tADSRT_tickNoInterp_veneer>
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    8f4c:	ecf8 7a01 	vldmia	r8!, {s15}
		tempSamp += tVoc_tick(&vocal[i]) * tADSRT_tickNoInterp(&fenvelopes[i]);
    8f50:	eee8 8a00 	vfma.f32	s17, s16, s0
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    8f54:	ed96 0a00 	vldr	s0, [r6]
	for (int i = 0; i < numStringsThisBoard; i++)
    8f58:	3401      	adds	r4, #1
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    8f5a:	ee30 0a27 	vadd.f32	s0, s0, s15
    8f5e:	f000 fa0b 	bl	9378 <__mtof_veneer>
		tVoc_setFreq(&vocal[i], stringFrequencies[i]);
    8f62:	4628      	mov	r0, r5
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    8f64:	eca7 0a01 	vstmia	r7!, {s0}
		tVoc_setFreq(&vocal[i], stringFrequencies[i]);
    8f68:	f000 fa76 	bl	9458 <__tVoc_setFreq_veneer>
		tVoc_set_tenseness(&vocal[i], volumeSmoothed);
    8f6c:	4628      	mov	r0, r5
    8f6e:	eeb0 0a49 	vmov.f32	s0, s18
	for (int i = 0; i < numStringsThisBoard; i++)
    8f72:	3504      	adds	r5, #4
		tVoc_set_tenseness(&vocal[i], volumeSmoothed);
    8f74:	f000 faa4 	bl	94c0 <__tVoc_set_tenseness_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    8f78:	f899 3000 	ldrb.w	r3, [r9]
    8f7c:	42a3      	cmp	r3, r4
    8f7e:	dcda      	bgt.n	8f36 <audioTickVocal+0x96>
		//Lfloat tongue = 12.0f + (16.0f * knobScaled[0]);
		//tVoc_set_tongue_shape(&vocal[i], tongue, 2.9f * knobScaled[1] + 0.1f);

	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    8f80:	ed9f 0a23 	vldr	s0, [pc, #140]	; 9010 <audioTickVocal+0x170>
    8f84:	eddf 7a23 	vldr	s15, [pc, #140]	; 9014 <audioTickVocal+0x174>
    8f88:	eef0 0a40 	vmov.f32	s1, s0
    8f8c:	ed9f 1a22 	vldr	s2, [pc, #136]	; 9018 <audioTickVocal+0x178>
    8f90:	eee9 0a27 	vfma.f32	s1, s18, s15
    8f94:	f000 fa80 	bl	9498 <__LEAF_clip_veneer>
	//float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
	int volIdxInt = (int) volIdx;
    8f98:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	int volIdxIntPlus = (volIdxInt + 1) & 127;
	float omAlpha = 1.0f - alpha;
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
	tempSamp *= outVol;
	tempSamp *= masterVolFromBrain;
    8f9c:	491f      	ldr	r1, [pc, #124]	; (901c <audioTickVocal+0x17c>)
	float omAlpha = 1.0f - alpha;
    8f9e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    8fa2:	4a1f      	ldr	r2, [pc, #124]	; (9020 <audioTickVocal+0x180>)
	int volIdxInt = (int) volIdx;
    8fa4:	ee17 3a10 	vmov	r3, s14
	float alpha = volIdx-volIdxInt;
    8fa8:	edd1 6a00 	vldr	s13, [r1]
    8fac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    8fb0:	1c59      	adds	r1, r3, #1
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    8fb2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	float omAlpha = 1.0f - alpha;
    8fb6:	ee77 7ac0 	vsub.f32	s15, s15, s0
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    8fba:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float alpha = volIdx-volIdxInt;
    8fbe:	ee30 0a47 	vsub.f32	s0, s0, s14
    8fc2:	ee68 8aa6 	vmul.f32	s17, s17, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    8fc6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	float omAlpha = 1.0f - alpha;
    8fca:	ee77 7a87 	vadd.f32	s15, s15, s14
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    8fce:	ed93 7a00 	vldr	s14, [r3]
    8fd2:	edd2 6a00 	vldr	s13, [r2]
    8fd6:	ee20 0a26 	vmul.f32	s0, s0, s13
    8fda:	eea7 0a27 	vfma.f32	s0, s14, s15
	return tempSamp;
}
    8fde:	ee28 0a80 	vmul.f32	s0, s17, s0
    8fe2:	ecbd 8b04 	vpop	{d8-d9}
    8fe6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	float tempSamp = 0.0f;
    8fea:	eddf 8a08 	vldr	s17, [pc, #32]	; 900c <audioTickVocal+0x16c>
    8fee:	e7c7      	b.n	8f80 <audioTickVocal+0xe0>
    8ff0:	20004f54 	.word	0x20004f54
    8ff4:	20004f84 	.word	0x20004f84
    8ff8:	20013f80 	.word	0x20013f80
    8ffc:	42800000 	.word	0x42800000
    9000:	200008bc 	.word	0x200008bc
    9004:	2001d778 	.word	0x2001d778
    9008:	20013f00 	.word	0x20013f00
    900c:	00000000 	.word	0x00000000
    9010:	423c0000 	.word	0x423c0000
    9014:	42a00000 	.word	0x42a00000
    9018:	42fe0000 	.word	0x42fe0000
    901c:	200004a8 	.word	0x200004a8
    9020:	2000051c 	.word	0x2000051c
    9024:	200004b1 	.word	0x200004b1
    9028:	20013f50 	.word	0x20013f50
    902c:	20004f30 	.word	0x20004f30
    9030:	20013f48 	.word	0x20013f48
    9034:	f3af 8000 	nop.w
    9038:	f3af 8000 	nop.w
    903c:	f3af 8000 	nop.w

00009040 <audioFrameVocal>:
{
    9040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tempCountFrame = DWT->CYCCNT;
    9044:	4b78      	ldr	r3, [pc, #480]	; (9228 <audioFrameVocal+0x1e8>)
{
    9046:	4680      	mov	r8, r0
	if (resetStringInputs)
    9048:	f8df b228 	ldr.w	fp, [pc, #552]	; 9274 <audioFrameVocal+0x234>
		for (int i = 0; i < numStringsThisBoard; i++)
    904c:	f8df 9228 	ldr.w	r9, [pc, #552]	; 9278 <audioFrameVocal+0x238>
{
    9050:	ed2d 8b02 	vpush	{d8}
	uint32_t tempCountFrame = DWT->CYCCNT;
    9054:	685e      	ldr	r6, [r3, #4]
{
    9056:	b083      	sub	sp, #12
	if (resetStringInputs)
    9058:	f89b 3000 	ldrb.w	r3, [fp]
    905c:	2b00      	cmp	r3, #0
    905e:	f040 808e 	bne.w	917e <audioFrameVocal+0x13e>
    9062:	4d72      	ldr	r5, [pc, #456]	; (922c <audioFrameVocal+0x1ec>)
		for (int i = 0; i < numStringsThisBoard; i++)
    9064:	f899 1000 	ldrb.w	r1, [r9]
	if (newPluck)
    9068:	682b      	ldr	r3, [r5, #0]
    906a:	2b00      	cmp	r3, #0
    906c:	d034      	beq.n	90d8 <audioFrameVocal+0x98>
		for (int i = 0; i < numStringsThisBoard; i++)
    906e:	2900      	cmp	r1, #0
    9070:	f000 80d8 	beq.w	9224 <audioFrameVocal+0x1e4>
    9074:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 9268 <audioFrameVocal+0x228>
    9078:	2400      	movs	r4, #0
    907a:	4b6d      	ldr	r3, [pc, #436]	; (9230 <audioFrameVocal+0x1f0>)
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    907c:	9501      	str	r5, [sp, #4]
    907e:	465d      	mov	r5, fp
				float amplitz = stringInputs[i] * 0.000015259021897f;
    9080:	eddf 8a6c 	vldr	s17, [pc, #432]	; 9234 <audioFrameVocal+0x1f4>
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    9084:	469b      	mov	fp, r3
    9086:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 927c <audioFrameVocal+0x23c>
    908a:	4f6b      	ldr	r7, [pc, #428]	; (9238 <audioFrameVocal+0x1f8>)
    908c:	4a6b      	ldr	r2, [pc, #428]	; (923c <audioFrameVocal+0x1fc>)
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    908e:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
    9092:	b29b      	uxth	r3, r3
    9094:	b92b      	cbnz	r3, 90a2 <audioFrameVocal+0x62>
    9096:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    909a:	b29b      	uxth	r3, r3
    909c:	2b00      	cmp	r3, #0
    909e:	f040 8095 	bne.w	91cc <audioFrameVocal+0x18c>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    90a2:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
    90a6:	b29b      	uxth	r3, r3
    90a8:	b12b      	cbz	r3, 90b6 <audioFrameVocal+0x76>
    90aa:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    90ae:	b29b      	uxth	r3, r3
    90b0:	2b00      	cmp	r3, #0
    90b2:	f000 80b0 	beq.w	9216 <audioFrameVocal+0x1d6>
			previousStringInputs[i] = stringInputs[i];
    90b6:	f832 c014 	ldrh.w	ip, [r2, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    90ba:	f10b 0b04 	add.w	fp, fp, #4
    90be:	f10a 0a04 	add.w	sl, sl, #4
    90c2:	3504      	adds	r5, #4
			previousStringInputs[i] = stringInputs[i];
    90c4:	fa1f fc8c 	uxth.w	ip, ip
    90c8:	f827 c014 	strh.w	ip, [r7, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    90cc:	3401      	adds	r4, #1
    90ce:	42a1      	cmp	r1, r4
    90d0:	dcdd      	bgt.n	908e <audioFrameVocal+0x4e>
    90d2:	9d01      	ldr	r5, [sp, #4]
		newPluck = 0;
    90d4:	2300      	movs	r3, #0
    90d6:	602b      	str	r3, [r5, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
    90d8:	b301      	cbz	r1, 911c <audioFrameVocal+0xdc>
    90da:	4d59      	ldr	r5, [pc, #356]	; (9240 <audioFrameVocal+0x200>)
    90dc:	2700      	movs	r7, #0
		tVoc_set_velum(&vocal[i], (0.4f * knobScaled[7]) + 0.01f);
    90de:	eddf 8a59 	vldr	s17, [pc, #356]	; 9244 <audioFrameVocal+0x204>
    90e2:	ed9f 8a59 	vldr	s16, [pc, #356]	; 9248 <audioFrameVocal+0x208>
    90e6:	4c59      	ldr	r4, [pc, #356]	; (924c <audioFrameVocal+0x20c>)
		tVoc_set_tongue_shape_and_touch(&vocal[i], knobScaled[8], knobScaled[9],knobScaled[10],knobScaled[11]);
    90e8:	4628      	mov	r0, r5
    90ea:	edd4 1a0b 	vldr	s3, [r4, #44]	; 0x2c
    90ee:	ed94 1a0a 	vldr	s2, [r4, #40]	; 0x28
	for (int i = 0; i < numStringsThisBoard; i++)
    90f2:	3701      	adds	r7, #1
		tVoc_set_tongue_shape_and_touch(&vocal[i], knobScaled[8], knobScaled[9],knobScaled[10],knobScaled[11]);
    90f4:	edd4 0a09 	vldr	s1, [r4, #36]	; 0x24
    90f8:	ed94 0a08 	vldr	s0, [r4, #32]
    90fc:	f000 fb0c 	bl	9718 <__tVoc_set_tongue_shape_and_touch_veneer>
		tVoc_set_velum(&vocal[i], (0.4f * knobScaled[7]) + 0.01f);
    9100:	eeb0 0a48 	vmov.f32	s0, s16
    9104:	edd4 7a07 	vldr	s15, [r4, #28]
    9108:	4628      	mov	r0, r5
	for (int i = 0; i < numStringsThisBoard; i++)
    910a:	3504      	adds	r5, #4
		tVoc_set_velum(&vocal[i], (0.4f * knobScaled[7]) + 0.01f);
    910c:	eea7 0aa8 	vfma.f32	s0, s15, s17
    9110:	f000 fa6e 	bl	95f0 <__tVoc_set_velum_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    9114:	f899 3000 	ldrb.w	r3, [r9]
    9118:	42bb      	cmp	r3, r7
    911a:	dce5      	bgt.n	90e8 <audioFrameVocal+0xa8>
    911c:	4c4c      	ldr	r4, [pc, #304]	; (9250 <audioFrameVocal+0x210>)
		current_sample = (int32_t)(audioTickVocal() * TWO_TO_23);
    911e:	ed9f 8a4d 	vldr	s16, [pc, #308]	; 9254 <audioFrameVocal+0x214>
    9122:	f504 7500 	add.w	r5, r4, #512	; 0x200
    9126:	eb04 0488 	add.w	r4, r4, r8, lsl #2
    912a:	eb05 0588 	add.w	r5, r5, r8, lsl #2
    912e:	f7ff feb7 	bl	8ea0 <audioTickVocal>
    9132:	ee20 0a08 	vmul.f32	s0, s0, s16
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    9136:	3408      	adds	r4, #8
		current_sample = (int32_t)(audioTickVocal() * TWO_TO_23);
    9138:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    913c:	42a5      	cmp	r5, r4
		current_sample = (int32_t)(audioTickVocal() * TWO_TO_23);
    913e:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[buffer_offset + i + 1] = current_sample;
    9142:	e944 3302 	strd	r3, r3, [r4, #-8]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    9146:	d1f2      	bne.n	912e <audioFrameVocal+0xee>
	if (switchStrings)
    9148:	4c43      	ldr	r4, [pc, #268]	; (9258 <audioFrameVocal+0x218>)
    914a:	6823      	ldr	r3, [r4, #0]
    914c:	bb8b      	cbnz	r3, 91b2 <audioFrameVocal+0x172>
	switchStrings = 0;
    914e:	2200      	movs	r2, #0
	timeFrame = DWT->CYCCNT - tempCountFrame;
    9150:	4b35      	ldr	r3, [pc, #212]	; (9228 <audioFrameVocal+0x1e8>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    9152:	4842      	ldr	r0, [pc, #264]	; (925c <audioFrameVocal+0x21c>)
	switchStrings = 0;
    9154:	6022      	str	r2, [r4, #0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    9156:	685b      	ldr	r3, [r3, #4]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    9158:	ed90 7a00 	vldr	s14, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    915c:	1b9b      	subs	r3, r3, r6
    915e:	4940      	ldr	r1, [pc, #256]	; (9260 <audioFrameVocal+0x220>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    9160:	4a40      	ldr	r2, [pc, #256]	; (9264 <audioFrameVocal+0x224>)
    9162:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
    9166:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    9168:	eef8 7a67 	vcvt.f32.u32	s15, s15
    916c:	ee67 7a87 	vmul.f32	s15, s15, s14
    9170:	edc2 7a00 	vstr	s15, [r2]
}
    9174:	b003      	add	sp, #12
    9176:	ecbd 8b02 	vpop	{d8}
    917a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (int i = 0; i < numStringsThisBoard; i++)
    917e:	f899 1000 	ldrb.w	r1, [r9]
    9182:	b1d1      	cbz	r1, 91ba <audioFrameVocal+0x17a>
    9184:	2400      	movs	r4, #0
    9186:	4d38      	ldr	r5, [pc, #224]	; (9268 <audioFrameVocal+0x228>)
    9188:	4f2b      	ldr	r7, [pc, #172]	; (9238 <audioFrameVocal+0x1f8>)
			previousStringInputs[i] = 0;
    918a:	46a2      	mov	sl, r4
			tADSRT_clear(&fenvelopes[i]);
    918c:	4628      	mov	r0, r5
		for (int i = 0; i < numStringsThisBoard; i++)
    918e:	3504      	adds	r5, #4
			tADSRT_clear(&fenvelopes[i]);
    9190:	f000 f8c2 	bl	9318 <__tADSRT_clear_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    9194:	f899 1000 	ldrb.w	r1, [r9]
			previousStringInputs[i] = 0;
    9198:	f827 a014 	strh.w	sl, [r7, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    919c:	3401      	adds	r4, #1
			previousStringInputs[i] = 0;
    919e:	f04f 0300 	mov.w	r3, #0
		for (int i = 0; i < numStringsThisBoard; i++)
    91a2:	42a1      	cmp	r1, r4
    91a4:	dcf2      	bgt.n	918c <audioFrameVocal+0x14c>
		resetStringInputs = 0;
    91a6:	f88b 3000 	strb.w	r3, [fp]
		newPluck = 1;
    91aa:	2301      	movs	r3, #1
    91ac:	4d1f      	ldr	r5, [pc, #124]	; (922c <audioFrameVocal+0x1ec>)
    91ae:	602b      	str	r3, [r5, #0]
    91b0:	e75a      	b.n	9068 <audioFrameVocal+0x28>
		switchStringModel(switchStrings);
    91b2:	6820      	ldr	r0, [r4, #0]
    91b4:	f7f8 f9f4 	bl	15a0 <switchStringModel>
    91b8:	e7c9      	b.n	914e <audioFrameVocal+0x10e>
		newPluck = 1;
    91ba:	4d1c      	ldr	r5, [pc, #112]	; (922c <audioFrameVocal+0x1ec>)
    91bc:	2301      	movs	r3, #1
		resetStringInputs = 0;
    91be:	f88b 1000 	strb.w	r1, [fp]
		newPluck = 1;
    91c2:	602b      	str	r3, [r5, #0]
	if (newPluck)
    91c4:	682b      	ldr	r3, [r5, #0]
    91c6:	2b00      	cmp	r3, #0
    91c8:	d184      	bne.n	90d4 <audioFrameVocal+0x94>
    91ca:	e7a7      	b.n	911c <audioFrameVocal+0xdc>
				stringOctave[i] = octave;
    91cc:	4b27      	ldr	r3, [pc, #156]	; (926c <audioFrameVocal+0x22c>)
    91ce:	edd3 7a00 	vldr	s15, [r3]
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    91d2:	4b27      	ldr	r3, [pc, #156]	; (9270 <audioFrameVocal+0x230>)
				stringOctave[i] = octave;
    91d4:	edcb 7a00 	vstr	s15, [fp]
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    91d8:	eb03 0184 	add.w	r1, r3, r4, lsl #2
				float amplitz = stringInputs[i] * 0.000015259021897f;
    91dc:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    91e0:	ed91 0a00 	vldr	s0, [r1]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    91e4:	b29b      	uxth	r3, r3
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    91e6:	ee37 0a80 	vadd.f32	s0, s15, s0
				float amplitz = stringInputs[i] * 0.000015259021897f;
    91ea:	ee08 3a10 	vmov	s16, r3
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    91ee:	f000 f8c3 	bl	9378 <__mtof_veneer>
				tADSRT_setSustain(&fenvelopes[i], 1.0f);// * randomFactors[currentRandom]);
    91f2:	4628      	mov	r0, r5
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    91f4:	ed8a 0a00 	vstr	s0, [sl]
				tADSRT_setSustain(&fenvelopes[i], 1.0f);// * randomFactors[currentRandom]);
    91f8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    91fc:	f000 f8d0 	bl	93a0 <__tADSRT_setSustain_veneer>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    9200:	eeb8 0ac8 	vcvt.f32.s32	s0, s16
				tADSRT_on(&fenvelopes[i], amplitz);
    9204:	4628      	mov	r0, r5
    9206:	ee20 0a28 	vmul.f32	s0, s0, s17
    920a:	f000 fa21 	bl	9650 <__tADSRT_on_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    920e:	f899 1000 	ldrb.w	r1, [r9]
			{
    9212:	4a0a      	ldr	r2, [pc, #40]	; (923c <audioFrameVocal+0x1fc>)
    9214:	e74f      	b.n	90b6 <audioFrameVocal+0x76>
				tADSRT_off(&fenvelopes[i]);
    9216:	4628      	mov	r0, r5
    9218:	f000 f9c6 	bl	95a8 <__tADSRT_off_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    921c:	f899 1000 	ldrb.w	r1, [r9]
    9220:	4a06      	ldr	r2, [pc, #24]	; (923c <audioFrameVocal+0x1fc>)
    9222:	e748      	b.n	90b6 <audioFrameVocal+0x76>
		newPluck = 0;
    9224:	6029      	str	r1, [r5, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
    9226:	e779      	b.n	911c <audioFrameVocal+0xdc>
    9228:	e0001000 	.word	0xe0001000
    922c:	20005014 	.word	0x20005014
    9230:	20013f50 	.word	0x20013f50
    9234:	37800080 	.word	0x37800080
    9238:	20005084 	.word	0x20005084
    923c:	20013f30 	.word	0x20013f30
    9240:	2001d778 	.word	0x2001d778
    9244:	3ecccccd 	.word	0x3ecccccd
    9248:	3c23d70a 	.word	0x3c23d70a
    924c:	20004f54 	.word	0x20004f54
    9250:	30000000 	.word	0x30000000
    9254:	4b000000 	.word	0x4b000000
    9258:	20013f68 	.word	0x20013f68
    925c:	200004a4 	.word	0x200004a4
    9260:	20013f6c 	.word	0x20013f6c
    9264:	20004f40 	.word	0x20004f40
    9268:	20004f30 	.word	0x20004f30
    926c:	20005020 	.word	0x20005020
    9270:	20013f48 	.word	0x20013f48
    9274:	2000549d 	.word	0x2000549d
    9278:	200004b1 	.word	0x200004b1
    927c:	20013f00 	.word	0x20013f00

00009280 <__tCycle_setFreq_veneer>:
    9280:	f85f f000 	ldr.w	pc, [pc]	; 9284 <__tCycle_setFreq_veneer+0x4>
    9284:	2401558d 	.word	0x2401558d

00009288 <__tVZFilterHS_tick_veneer>:
    9288:	f85f f000 	ldr.w	pc, [pc]	; 928c <__tVZFilterHS_tick_veneer+0x4>
    928c:	240135e5 	.word	0x240135e5

00009290 <__tADSRT_init_veneer>:
    9290:	f85f f000 	ldr.w	pc, [pc]	; 9294 <__tADSRT_init_veneer+0x4>
    9294:	24011761 	.word	0x24011761

00009298 <__tTString_setBarPosition_veneer>:
    9298:	f85f f000 	ldr.w	pc, [pc]	; 929c <__tTString_setBarPosition_veneer+0x4>
    929c:	24017d15 	.word	0x24017d15

000092a0 <__memcpy_veneer>:
    92a0:	f85f f000 	ldr.w	pc, [pc]	; 92a4 <__memcpy_veneer+0x4>
    92a4:	24019789 	.word	0x24019789

000092a8 <__tPBSawSquare_setFreq_veneer>:
    92a8:	f85f f000 	ldr.w	pc, [pc]	; 92ac <__tPBSawSquare_setFreq_veneer+0x4>
    92ac:	24015c39 	.word	0x24015c39

000092b0 <__tTapeDelay_setDelay_veneer>:
    92b0:	f85f f000 	ldr.w	pc, [pc]	; 92b4 <__tTapeDelay_setDelay_veneer+0x4>
    92b4:	24011305 	.word	0x24011305

000092b8 <__fastPowf_veneer>:
    92b8:	f85f f000 	ldr.w	pc, [pc]	; 92bc <__fastPowf_veneer+0x4>
    92bc:	24014b1d 	.word	0x24014b1d

000092c0 <__tTString_setInharmonic_veneer>:
    92c0:	f85f f000 	ldr.w	pc, [pc]	; 92c4 <__tTString_setInharmonic_veneer+0x4>
    92c4:	240181ad 	.word	0x240181ad

000092c8 <__tTString_setPickupModFreq_veneer>:
    92c8:	f85f f000 	ldr.w	pc, [pc]	; 92cc <__tTString_setPickupModFreq_veneer+0x4>
    92cc:	24017c79 	.word	0x24017c79

000092d0 <__tVZFilter_setFreq_veneer>:
    92d0:	f85f f000 	ldr.w	pc, [pc]	; 92d4 <__tVZFilter_setFreq_veneer+0x4>
    92d4:	24012dd5 	.word	0x24012dd5

000092d8 <__tDiodeFilter_setQ_veneer>:
    92d8:	f85f f000 	ldr.w	pc, [pc]	; 92dc <__tDiodeFilter_setQ_veneer+0x4>
    92dc:	24014541 	.word	0x24014541

000092e0 <__LEAF_mapToZeroToOneOutput_veneer>:
    92e0:	f85f f000 	ldr.w	pc, [pc]	; 92e4 <__LEAF_mapToZeroToOneOutput_veneer+0x4>
    92e4:	2401498d 	.word	0x2401498d

000092e8 <__tTString_free_veneer>:
    92e8:	f85f f000 	ldr.w	pc, [pc]	; 92ec <__tTString_free_veneer+0x4>
    92ec:	24017181 	.word	0x24017181

000092f0 <__MX_SPI6_Init_veneer>:
    92f0:	f85f f000 	ldr.w	pc, [pc]	; 92f4 <__MX_SPI6_Init_veneer+0x4>
    92f4:	240041a9 	.word	0x240041a9

000092f8 <__tSawSquareLFO_tick_veneer>:
    92f8:	f85f f000 	ldr.w	pc, [pc]	; 92fc <__tSawSquareLFO_tick_veneer+0x4>
    92fc:	24016089 	.word	0x24016089

00009300 <__tDiodeFilter_tick_veneer>:
    9300:	f85f f000 	ldr.w	pc, [pc]	; 9304 <__tDiodeFilter_tick_veneer+0x4>
    9304:	24013d25 	.word	0x24013d25

00009308 <__tPBSawSquare_tick_veneer>:
    9308:	f85f f000 	ldr.w	pc, [pc]	; 930c <__tPBSawSquare_tick_veneer+0x4>
    930c:	24015b9d 	.word	0x24015b9d

00009310 <__tTString_setPickupPos_veneer>:
    9310:	f85f f000 	ldr.w	pc, [pc]	; 9314 <__tTString_setPickupPos_veneer+0x4>
    9314:	24017c69 	.word	0x24017c69

00009318 <__tADSRT_clear_veneer>:
    9318:	f85f f000 	ldr.w	pc, [pc]	; 931c <__tADSRT_clear_veneer+0x4>
    931c:	24011915 	.word	0x24011915

00009320 <__tIntPhasor_tick_veneer>:
    9320:	f85f f000 	ldr.w	pc, [pc]	; 9324 <__tIntPhasor_tick_veneer+0x4>
    9324:	24015d81 	.word	0x24015d81

00009328 <__tVZFilterBell_setGain_veneer>:
    9328:	f85f f000 	ldr.w	pc, [pc]	; 932c <__tVZFilterBell_setGain_veneer+0x4>
    932c:	24013bc1 	.word	0x24013bc1

00009330 <__tVZFilterBell_setBandwidth_veneer>:
    9330:	f85f f000 	ldr.w	pc, [pc]	; 9334 <__tVZFilterBell_setBandwidth_veneer+0x4>
    9334:	24013969 	.word	0x24013969

00009338 <__HAL_GPIO_WritePin_veneer>:
    9338:	f85f f000 	ldr.w	pc, [pc]	; 933c <__HAL_GPIO_WritePin_veneer+0x4>
    933c:	240072dd 	.word	0x240072dd

00009340 <__tSquareLFO_tick_veneer>:
    9340:	f85f f000 	ldr.w	pc, [pc]	; 9344 <__tSquareLFO_tick_veneer+0x4>
    9344:	24015f25 	.word	0x24015f25

00009348 <__tTString_setHarmonic_veneer>:
    9348:	f85f f000 	ldr.w	pc, [pc]	; 934c <__tTString_setHarmonic_veneer+0x4>
    934c:	24017df9 	.word	0x24017df9

00009350 <__tPBTriangle_setSkew_veneer>:
    9350:	f85f f000 	ldr.w	pc, [pc]	; 9354 <__tPBTriangle_setSkew_veneer+0x4>
    9354:	24015769 	.word	0x24015769

00009358 <__tPBSaw_tick_veneer>:
    9358:	f85f f000 	ldr.w	pc, [pc]	; 935c <__tPBSaw_tick_veneer+0x4>
    935c:	24015afd 	.word	0x24015afd

00009360 <__tSimpleLivingString3_setLevSmoothFactor_veneer>:
    9360:	f85f f000 	ldr.w	pc, [pc]	; 9364 <__tSimpleLivingString3_setLevSmoothFactor_veneer+0x4>
    9364:	2401684d 	.word	0x2401684d

00009368 <__tSimpleLivingString3_setLevMode_veneer>:
    9368:	f85f f000 	ldr.w	pc, [pc]	; 936c <__tSimpleLivingString3_setLevMode_veneer+0x4>
    936c:	2401685d 	.word	0x2401685d

00009370 <__tPBPulse_setFreq_veneer>:
    9370:	f85f f000 	ldr.w	pc, [pc]	; 9374 <__tPBPulse_setFreq_veneer+0x4>
    9374:	24015a69 	.word	0x24015a69

00009378 <__mtof_veneer>:
    9378:	f85f f000 	ldr.w	pc, [pc]	; 937c <__mtof_veneer+0x4>
    937c:	240150a1 	.word	0x240150a1

00009380 <__setEffectsFunctions_veneer>:
    9380:	f85f f000 	ldr.w	pc, [pc]	; 9384 <__setEffectsFunctions_veneer+0x4>
    9384:	240028a1 	.word	0x240028a1

00009388 <__tPBSawSquare_setShape_veneer>:
    9388:	f85f f000 	ldr.w	pc, [pc]	; 938c <__tPBSawSquare_setShape_veneer+0x4>
    938c:	24015c51 	.word	0x24015c51

00009390 <__arm_sin_f32_veneer>:
    9390:	f85f f000 	ldr.w	pc, [pc]	; 9394 <__arm_sin_f32_veneer+0x4>
    9394:	240011a9 	.word	0x240011a9

00009398 <__tADSRT_setLeakFactor_veneer>:
    9398:	f85f f000 	ldr.w	pc, [pc]	; 939c <__tADSRT_setLeakFactor_veneer+0x4>
    939c:	240118bd 	.word	0x240118bd

000093a0 <__tADSRT_setSustain_veneer>:
    93a0:	f85f f000 	ldr.w	pc, [pc]	; 93a4 <__tADSRT_setSustain_veneer+0x4>
    93a4:	24011879 	.word	0x24011879

000093a8 <__tVZFilterHS_setResonance_veneer>:
    93a8:	f85f f000 	ldr.w	pc, [pc]	; 93ac <__tVZFilterHS_setResonance_veneer+0x4>
    93ac:	24013721 	.word	0x24013721

000093b0 <__tSawSquareLFO_setPhase_veneer>:
    93b0:	f85f f000 	ldr.w	pc, [pc]	; 93b4 <__tSawSquareLFO_setPhase_veneer+0x4>
    93b4:	24016155 	.word	0x24016155

000093b8 <__tVZFilter_tickEfficient_veneer>:
    93b8:	f85f f000 	ldr.w	pc, [pc]	; 93bc <__tVZFilter_tickEfficient_veneer+0x4>
    93bc:	24012995 	.word	0x24012995

000093c0 <__tSawSquareLFO_setShape_veneer>:
    93c0:	f85f f000 	ldr.w	pc, [pc]	; 93c4 <__tSawSquareLFO_setShape_veneer+0x4>
    93c4:	240161b9 	.word	0x240161b9

000093c8 <__tTriLFO_setPhase_veneer>:
    93c8:	f85f f000 	ldr.w	pc, [pc]	; 93cc <__tTriLFO_setPhase_veneer+0x4>
    93cc:	24016261 	.word	0x24016261

000093d0 <__tPBTriangle_setFreq_veneer>:
    93d0:	f85f f000 	ldr.w	pc, [pc]	; 93d4 <__tPBTriangle_setFreq_veneer+0x4>
    93d4:	24015755 	.word	0x24015755

000093d8 <__tExpSmooth_setValAndDest_veneer>:
    93d8:	f85f f000 	ldr.w	pc, [pc]	; 93dc <__tExpSmooth_setValAndDest_veneer+0x4>
    93dc:	24011e9d 	.word	0x24011e9d

000093e0 <__fasterexpf_veneer>:
    93e0:	f85f f000 	ldr.w	pc, [pc]	; 93e4 <__fasterexpf_veneer+0x4>
    93e4:	24014a19 	.word	0x24014a19

000093e8 <__tCycle_setPhase_veneer>:
    93e8:	f85f f000 	ldr.w	pc, [pc]	; 93ec <__tCycle_setPhase_veneer+0x4>
    93ec:	240155a5 	.word	0x240155a5

000093f0 <__tEnvelopeFollower_tick_veneer>:
    93f0:	f85f f000 	ldr.w	pc, [pc]	; 93f4 <__tEnvelopeFollower_tick_veneer+0x4>
    93f4:	24010b71 	.word	0x24010b71

000093f8 <__tLadderFilter_setQ_veneer>:
    93f8:	f85f f000 	ldr.w	pc, [pc]	; 93fc <__tLadderFilter_setQ_veneer+0x4>
    93fc:	2401490d 	.word	0x2401490d

00009400 <__tExpSmooth_setDest_veneer>:
    9400:	f85f f000 	ldr.w	pc, [pc]	; 9404 <__tExpSmooth_setDest_veneer+0x4>
    9404:	24011e8d 	.word	0x24011e8d

00009408 <__HAL_I2C_Slave_Receive_IT_veneer>:
    9408:	f85f f000 	ldr.w	pc, [pc]	; 940c <__HAL_I2C_Slave_Receive_IT_veneer+0x4>
    940c:	240078d1 	.word	0x240078d1

00009410 <__tVZFilterLS_setGain_veneer>:
    9410:	f85f f000 	ldr.w	pc, [pc]	; 9414 <__tVZFilterLS_setGain_veneer+0x4>
    9414:	240133dd 	.word	0x240133dd

00009418 <__tSineTriLFO_setFreq_veneer>:
    9418:	f85f f000 	ldr.w	pc, [pc]	; 941c <__tSineTriLFO_setFreq_veneer+0x4>
    941c:	240163a9 	.word	0x240163a9

00009420 <__LEAF_map_veneer>:
    9420:	f85f f000 	ldr.w	pc, [pc]	; 9424 <__LEAF_map_veneer+0x4>
    9424:	24014961 	.word	0x24014961

00009428 <__tVoc_set_tractLength_veneer>:
    9428:	f85f f000 	ldr.w	pc, [pc]	; 942c <__tVoc_set_tractLength_veneer+0x4>
    942c:	240192bd 	.word	0x240192bd

00009430 <__tVZFilter_setResonance_veneer>:
    9430:	f85f f000 	ldr.w	pc, [pc]	; 9434 <__tVZFilter_setResonance_veneer+0x4>
    9434:	24013111 	.word	0x24013111

00009438 <__tPickupNonLinearity_free_veneer>:
    9438:	f85f f000 	ldr.w	pc, [pc]	; 943c <__tPickupNonLinearity_free_veneer+0x4>
    943c:	24016429 	.word	0x24016429

00009440 <__tADSRT_setRelease_veneer>:
    9440:	f85f f000 	ldr.w	pc, [pc]	; 9444 <__tADSRT_setRelease_veneer+0x4>
    9444:	24011895 	.word	0x24011895

00009448 <__tTString_setPickupModAmp_veneer>:
    9448:	f85f f000 	ldr.w	pc, [pc]	; 944c <__tTString_setPickupModAmp_veneer+0x4>
    944c:	24017c71 	.word	0x24017c71

00009450 <__dbToATableLookup_veneer>:
    9450:	f85f f000 	ldr.w	pc, [pc]	; 9454 <__dbToATableLookup_veneer+0x4>
    9454:	24001241 	.word	0x24001241

00009458 <__tVoc_setFreq_veneer>:
    9458:	f85f f000 	ldr.w	pc, [pc]	; 945c <__tVoc_setFreq_veneer+0x4>
    945c:	240192b1 	.word	0x240192b1

00009460 <__tVZFilterBell_setFreq_veneer>:
    9460:	f85f f000 	ldr.w	pc, [pc]	; 9464 <__tVZFilterBell_setFreq_veneer+0x4>
    9464:	240139f5 	.word	0x240139f5

00009468 <__tSquareLFO_setFreq_veneer>:
    9468:	f85f f000 	ldr.w	pc, [pc]	; 946c <__tSquareLFO_setFreq_veneer+0x4>
    946c:	24015f6d 	.word	0x24015f6d

00009470 <__tSVF_setFreqFast_veneer>:
    9470:	f85f f000 	ldr.w	pc, [pc]	; 9474 <__tSVF_setFreqFast_veneer+0x4>
    9474:	240127dd 	.word	0x240127dd

00009478 <__HAL_SPI_TransmitReceive_DMA_veneer>:
    9478:	f85f f000 	ldr.w	pc, [pc]	; 947c <__HAL_SPI_TransmitReceive_DMA_veneer+0x4>
    947c:	2400bcc9 	.word	0x2400bcc9

00009480 <__arm_fir_interpolate_f32_veneer>:
    9480:	f85f f000 	ldr.w	pc, [pc]	; 9484 <__arm_fir_interpolate_f32_veneer+0x4>
    9484:	24000d5d 	.word	0x24000d5d

00009488 <__tVZFilterHS_setFreqFast_veneer>:
    9488:	f85f f000 	ldr.w	pc, [pc]	; 948c <__tVZFilterHS_setFreqFast_veneer+0x4>
    948c:	24013639 	.word	0x24013639

00009490 <__tTString_pluck_veneer>:
    9490:	f85f f000 	ldr.w	pc, [pc]	; 9494 <__tTString_pluck_veneer+0x4>
    9494:	24017e91 	.word	0x24017e91

00009498 <__LEAF_clip_veneer>:
    9498:	f85f f000 	ldr.w	pc, [pc]	; 949c <__LEAF_clip_veneer+0x4>
    949c:	24014c39 	.word	0x24014c39

000094a0 <__HAL_SPI_Abort_veneer>:
    94a0:	f85f f000 	ldr.w	pc, [pc]	; 94a4 <__HAL_SPI_Abort_veneer+0x4>
    94a4:	2400bf05 	.word	0x2400bf05

000094a8 <__tPBPulse_tick_veneer>:
    94a8:	f85f f000 	ldr.w	pc, [pc]	; 94ac <__tPBPulse_tick_veneer+0x4>
    94ac:	240159e9 	.word	0x240159e9

000094b0 <__tTString_mute_veneer>:
    94b0:	f85f f000 	ldr.w	pc, [pc]	; 94b4 <__tTString_mute_veneer+0x4>
    94b4:	24017c89 	.word	0x24017c89

000094b8 <__tPBSaw_setFreq_veneer>:
    94b8:	f85f f000 	ldr.w	pc, [pc]	; 94bc <__tPBSaw_setFreq_veneer+0x4>
    94bc:	24015b4d 	.word	0x24015b4d

000094c0 <__tVoc_set_tenseness_veneer>:
    94c0:	f85f f000 	ldr.w	pc, [pc]	; 94c4 <__tVoc_set_tenseness_veneer+0x4>
    94c4:	240192c5 	.word	0x240192c5

000094c8 <__tTString_setFeedbackReactionSpeed_veneer>:
    94c8:	f85f f000 	ldr.w	pc, [pc]	; 94cc <__tTString_setFeedbackReactionSpeed_veneer+0x4>
    94cc:	24017e55 	.word	0x24017e55

000094d0 <__tSimpleLivingString3_initToPool_veneer>:
    94d0:	f85f f000 	ldr.w	pc, [pc]	; 94d4 <__tSimpleLivingString3_initToPool_veneer+0x4>
    94d4:	24016491 	.word	0x24016491

000094d8 <__tVZFilter_setGain_veneer>:
    94d8:	f85f f000 	ldr.w	pc, [pc]	; 94dc <__tVZFilter_setGain_veneer+0x4>
    94dc:	240130d9 	.word	0x240130d9

000094e0 <__tADSRT_tickNoInterp_veneer>:
    94e0:	f85f f000 	ldr.w	pc, [pc]	; 94e4 <__tADSRT_tickNoInterp_veneer+0x4>
    94e4:	24011be5 	.word	0x24011be5

000094e8 <__tPickupNonLinearity_init_veneer>:
    94e8:	f85f f000 	ldr.w	pc, [pc]	; 94ec <__tPickupNonLinearity_init_veneer+0x4>
    94ec:	24016411 	.word	0x24016411

000094f0 <__tPBSineTriangle_setFreq_veneer>:
    94f0:	f85f f000 	ldr.w	pc, [pc]	; 94f4 <__tPBSineTriangle_setFreq_veneer+0x4>
    94f4:	24015965 	.word	0x24015965

000094f8 <__tSineTriLFO_tick_veneer>:
    94f8:	f85f f000 	ldr.w	pc, [pc]	; 94fc <__tSineTriLFO_tick_veneer+0x4>
    94fc:	2401630d 	.word	0x2401630d

00009500 <__tTString_setFreq_veneer>:
    9500:	f85f f000 	ldr.w	pc, [pc]	; 9504 <__tTString_setFreq_veneer+0x4>
    9504:	24017b99 	.word	0x24017b99

00009508 <__tCrusher_setSamplingRatio_veneer>:
    9508:	f85f f000 	ldr.w	pc, [pc]	; 950c <__tCrusher_setSamplingRatio_veneer+0x4>
    950c:	24011471 	.word	0x24011471

00009510 <__tLadderFilter_tick_veneer>:
    9510:	f85f f000 	ldr.w	pc, [pc]	; 9514 <__tLadderFilter_tick_veneer+0x4>
    9514:	24014659 	.word	0x24014659

00009518 <__tPBTriangle_tick_veneer>:
    9518:	f85f f000 	ldr.w	pc, [pc]	; 951c <__tPBTriangle_tick_veneer+0x4>
    951c:	24015629 	.word	0x24015629

00009520 <__tCycle_tick_veneer>:
    9520:	f85f f000 	ldr.w	pc, [pc]	; 9524 <__tCycle_tick_veneer+0x4>
    9524:	24015541 	.word	0x24015541

00009528 <__tPBSineTriangle_setShape_veneer>:
    9528:	f85f f000 	ldr.w	pc, [pc]	; 952c <__tPBSineTriangle_setShape_veneer+0x4>
    952c:	24015991 	.word	0x24015991

00009530 <__tExpSmooth_tick_veneer>:
    9530:	f85f f000 	ldr.w	pc, [pc]	; 9534 <__tExpSmooth_tick_veneer+0x4>
    9534:	24011ea9 	.word	0x24011ea9

00009538 <__tSimpleLivingString3_setTargetLev_veneer>:
    9538:	f85f f000 	ldr.w	pc, [pc]	; 953c <__tSimpleLivingString3_setTargetLev_veneer+0x4>
    953c:	24016845 	.word	0x24016845

00009540 <__faster_mtof_veneer>:
    9540:	f85f f000 	ldr.w	pc, [pc]	; 9544 <__faster_mtof_veneer+0x4>
    9544:	240150f5 	.word	0x240150f5

00009548 <__fastSine_veneer>:
    9548:	f85f f000 	ldr.w	pc, [pc]	; 954c <__fastSine_veneer+0x4>
    954c:	24014d1d 	.word	0x24014d1d

00009550 <__tTString_setHarmonicity_veneer>:
    9550:	f85f f000 	ldr.w	pc, [pc]	; 9554 <__tTString_setHarmonicity_veneer+0x4>
    9554:	24018155 	.word	0x24018155

00009558 <__tTString_tick_veneer>:
    9558:	f85f f000 	ldr.w	pc, [pc]	; 955c <__tTString_tick_veneer+0x4>
    955c:	24017295 	.word	0x24017295

00009560 <__tIntPhasor_setFreq_veneer>:
    9560:	f85f f000 	ldr.w	pc, [pc]	; 9564 <__tIntPhasor_setFreq_veneer+0x4>
    9564:	24015da1 	.word	0x24015da1

00009568 <__tSimpleLivingString3_setLevStrength_veneer>:
    9568:	f85f f000 	ldr.w	pc, [pc]	; 956c <__tSimpleLivingString3_setLevStrength_veneer+0x4>
    956c:	24016855 	.word	0x24016855

00009570 <__tExpSmooth_init_veneer>:
    9570:	f85f f000 	ldr.w	pc, [pc]	; 9574 <__tExpSmooth_init_veneer+0x4>
    9574:	24011d89 	.word	0x24011d89

00009578 <__tVoc_setDoubleComputeFlag_veneer>:
    9578:	f85f f000 	ldr.w	pc, [pc]	; 957c <__tVoc_setDoubleComputeFlag_veneer+0x4>
    957c:	240192a9 	.word	0x240192a9

00009580 <__tLinearDelay_tick_veneer>:
    9580:	f85f f000 	ldr.w	pc, [pc]	; 9584 <__tLinearDelay_tick_veneer+0x4>
    9584:	24010d65 	.word	0x24010d65

00009588 <__tSquareLFO_setPulseWidth_veneer>:
    9588:	f85f f000 	ldr.w	pc, [pc]	; 958c <__tSquareLFO_setPulseWidth_veneer+0x4>
    958c:	24015f9d 	.word	0x24015f9d

00009590 <__tIntPhasor_setPhase_veneer>:
    9590:	f85f f000 	ldr.w	pc, [pc]	; 9594 <__tIntPhasor_setPhase_veneer+0x4>
    9594:	24015db9 	.word	0x24015db9

00009598 <__tCrusher_setOperation_veneer>:
    9598:	f85f f000 	ldr.w	pc, [pc]	; 959c <__tCrusher_setOperation_veneer+0x4>
    959c:	24011409 	.word	0x24011409

000095a0 <__tCrusher_tick_veneer>:
    95a0:	f85f f000 	ldr.w	pc, [pc]	; 95a4 <__tCrusher_tick_veneer+0x4>
    95a4:	24011389 	.word	0x24011389

000095a8 <__tADSRT_off_veneer>:
    95a8:	f85f f000 	ldr.w	pc, [pc]	; 95ac <__tADSRT_off_veneer+0x4>
    95ac:	24011905 	.word	0x24011905

000095b0 <__tCompressor_tick_veneer>:
    95b0:	f85f f000 	ldr.w	pc, [pc]	; 95b4 <__tCompressor_tick_veneer+0x4>
    95b4:	24011521 	.word	0x24011521

000095b8 <__changeOversampling_veneer>:
    95b8:	f85f f000 	ldr.w	pc, [pc]	; 95bc <__changeOversampling_veneer+0x4>
    95bc:	24004dc5 	.word	0x24004dc5

000095c0 <__tTString_setFilterFreqDirectly_veneer>:
    95c0:	f85f f000 	ldr.w	pc, [pc]	; 95c4 <__tTString_setFilterFreqDirectly_veneer+0x4>
    95c4:	24017cb5 	.word	0x24017cb5

000095c8 <__tSimpleLivingString3_setPickupPoint_veneer>:
    95c8:	f85f f000 	ldr.w	pc, [pc]	; 95cc <__tSimpleLivingString3_setPickupPoint_veneer+0x4>
    95cc:	24016b7d 	.word	0x24016b7d

000095d0 <__tSineTriLFO_setShape_veneer>:
    95d0:	f85f f000 	ldr.w	pc, [pc]	; 95d4 <__tSineTriLFO_setShape_veneer+0x4>
    95d4:	24016409 	.word	0x24016409

000095d8 <__tTString_setFeedbackStrength_veneer>:
    95d8:	f85f f000 	ldr.w	pc, [pc]	; 95dc <__tTString_setFeedbackStrength_veneer+0x4>
    95dc:	24017e0d 	.word	0x24017e0d

000095e0 <__tTString_setPhantomHarmonicsGain_veneer>:
    95e0:	f85f f000 	ldr.w	pc, [pc]	; 95e4 <__tTString_setPhantomHarmonicsGain_veneer+0x4>
    95e4:	24017d3d 	.word	0x24017d3d

000095e8 <__tVZFilter_setFreqFast_veneer>:
    95e8:	f85f f000 	ldr.w	pc, [pc]	; 95ec <__tVZFilter_setFreqFast_veneer+0x4>
    95ec:	24012e05 	.word	0x24012e05

000095f0 <__tVoc_set_velum_veneer>:
    95f0:	f85f f000 	ldr.w	pc, [pc]	; 95f4 <__tVoc_set_velum_veneer+0x4>
    95f4:	240192d1 	.word	0x240192d1

000095f8 <__tanhf_veneer>:
    95f8:	f85f f000 	ldr.w	pc, [pc]	; 95fc <__tanhf_veneer+0x4>
    95fc:	2401a29d 	.word	0x2401a29d

00009600 <__tPBPulse_setWidth_veneer>:
    9600:	f85f f000 	ldr.w	pc, [pc]	; 9604 <__tPBPulse_setWidth_veneer+0x4>
    9604:	24015a81 	.word	0x24015a81

00009608 <__tVoc_init_veneer>:
    9608:	f85f f000 	ldr.w	pc, [pc]	; 960c <__tVoc_init_veneer+0x4>
    960c:	2401919d 	.word	0x2401919d

00009610 <__tSVF_setQ_veneer>:
    9610:	f85f f000 	ldr.w	pc, [pc]	; 9614 <__tSVF_setQ_veneer+0x4>
    9614:	24012861 	.word	0x24012861

00009618 <__tADSRT_tick_veneer>:
    9618:	f85f f000 	ldr.w	pc, [pc]	; 961c <__tADSRT_tick_veneer+0x4>
    961c:	24011921 	.word	0x24011921

00009620 <__tSimpleLivingString3_setDampFreq_veneer>:
    9620:	f85f f000 	ldr.w	pc, [pc]	; 9624 <__tSimpleLivingString3_setDampFreq_veneer+0x4>
    9624:	240167f1 	.word	0x240167f1

00009628 <__tSimpleLivingString3_setDecay_veneer>:
    9628:	f85f f000 	ldr.w	pc, [pc]	; 962c <__tSimpleLivingString3_setDecay_veneer+0x4>
    962c:	240167f9 	.word	0x240167f9

00009630 <__tADSRT_setDecay_veneer>:
    9630:	f85f f000 	ldr.w	pc, [pc]	; 9634 <__tADSRT_setDecay_veneer+0x4>
    9634:	24011851 	.word	0x24011851

00009638 <__tSquareLFO_setPhase_veneer>:
    9638:	f85f f000 	ldr.w	pc, [pc]	; 963c <__tSquareLFO_setPhase_veneer+0x4>
    963c:	24015fdd 	.word	0x24015fdd

00009640 <__tVZFilterLS_setFreqFast_veneer>:
    9640:	f85f f000 	ldr.w	pc, [pc]	; 9644 <__tVZFilterLS_setFreqFast_veneer+0x4>
    9644:	24013351 	.word	0x24013351

00009648 <__tCrusher_setRound_veneer>:
    9648:	f85f f000 	ldr.w	pc, [pc]	; 964c <__tCrusher_setRound_veneer+0x4>
    964c:	24011469 	.word	0x24011469

00009650 <__tADSRT_on_veneer>:
    9650:	f85f f000 	ldr.w	pc, [pc]	; 9654 <__tADSRT_on_veneer+0x4>
    9654:	240118e1 	.word	0x240118e1

00009658 <__mtofTableLookup_veneer>:
    9658:	f85f f000 	ldr.w	pc, [pc]	; 965c <__mtofTableLookup_veneer+0x4>
    965c:	240012bd 	.word	0x240012bd

00009660 <__LEAF_tanh_veneer>:
    9660:	f85f f000 	ldr.w	pc, [pc]	; 9664 <__LEAF_tanh_veneer+0x4>
    9664:	24014c49 	.word	0x24014c49

00009668 <__tCycle_init_veneer>:
    9668:	f85f f000 	ldr.w	pc, [pc]	; 966c <__tCycle_init_veneer+0x4>
    966c:	240154c9 	.word	0x240154c9

00009670 <__tVZFilterBell_tick_veneer>:
    9670:	f85f f000 	ldr.w	pc, [pc]	; 9674 <__tVZFilterBell_tick_veneer+0x4>
    9674:	24013911 	.word	0x24013911

00009678 <__tTString_setOpenStringFrequency_veneer>:
    9678:	f85f f000 	ldr.w	pc, [pc]	; 967c <__tTString_setOpenStringFrequency_veneer+0x4>
    967c:	24017d25 	.word	0x24017d25

00009680 <__tSineTriLFO_setPhase_veneer>:
    9680:	f85f f000 	ldr.w	pc, [pc]	; 9684 <__tSineTriLFO_setPhase_veneer+0x4>
    9684:	240163d9 	.word	0x240163d9

00009688 <__tLinearDelay_setDelay_veneer>:
    9688:	f85f f000 	ldr.w	pc, [pc]	; 968c <__tLinearDelay_setDelay_veneer+0x4>
    968c:	24010e5d 	.word	0x24010e5d

00009690 <__tSawSquareLFO_setFreq_veneer>:
    9690:	f85f f000 	ldr.w	pc, [pc]	; 9694 <__tSawSquareLFO_setFreq_veneer+0x4>
    9694:	2401610d 	.word	0x2401610d

00009698 <__tExpSmooth_free_veneer>:
    9698:	f85f f000 	ldr.w	pc, [pc]	; 969c <__tExpSmooth_free_veneer+0x4>
    969c:	24011e39 	.word	0x24011e39

000096a0 <__tVoc_tick_veneer>:
    96a0:	f85f f000 	ldr.w	pc, [pc]	; 96a4 <__tVoc_tick_veneer+0x4>
    96a4:	2401920d 	.word	0x2401920d

000096a8 <__tLadderFilter_setFreqFast_veneer>:
    96a8:	f85f f000 	ldr.w	pc, [pc]	; 96ac <__tLadderFilter_setFreqFast_veneer+0x4>
    96ac:	240148a9 	.word	0x240148a9

000096b0 <__tVZFilterLS_setResonance_veneer>:
    96b0:	f85f f000 	ldr.w	pc, [pc]	; 96b4 <__tVZFilterLS_setResonance_veneer+0x4>
    96b4:	2401343d 	.word	0x2401343d

000096b8 <__arm_fir_decimate_f32_veneer>:
    96b8:	f85f f000 	ldr.w	pc, [pc]	; 96bc <__arm_fir_decimate_f32_veneer+0x4>
    96bc:	24000a19 	.word	0x24000a19

000096c0 <__tSVF_tick_veneer>:
    96c0:	f85f f000 	ldr.w	pc, [pc]	; 96c4 <__tSVF_tick_veneer+0x4>
    96c4:	24012701 	.word	0x24012701

000096c8 <__tVZFilterLS_tick_veneer>:
    96c8:	f85f f000 	ldr.w	pc, [pc]	; 96cc <__tVZFilterLS_tick_veneer+0x4>
    96cc:	240132fd 	.word	0x240132fd

000096d0 <__tDiodeFilter_tickEfficient_veneer>:
    96d0:	f85f f000 	ldr.w	pc, [pc]	; 96d4 <__tDiodeFilter_tickEfficient_veneer+0x4>
    96d4:	24014105 	.word	0x24014105

000096d8 <__tSimpleLivingString3_free_veneer>:
    96d8:	f85f f000 	ldr.w	pc, [pc]	; 96dc <__tSimpleLivingString3_free_veneer+0x4>
    96dc:	24016711 	.word	0x24016711

000096e0 <__memset_veneer>:
    96e0:	f85f f000 	ldr.w	pc, [pc]	; 96e4 <__memset_veneer+0x4>
    96e4:	24019725 	.word	0x24019725

000096e8 <__tTriLFO_tick_veneer>:
    96e8:	f85f f000 	ldr.w	pc, [pc]	; 96ec <__tTriLFO_tick_veneer+0x4>
    96ec:	24016215 	.word	0x24016215

000096f0 <__tTString_setRippleDepth_veneer>:
    96f0:	f85f f000 	ldr.w	pc, [pc]	; 96f4 <__tTString_setRippleDepth_veneer+0x4>
    96f4:	24017d75 	.word	0x24017d75

000096f8 <__audioInitString2_veneer>:
    96f8:	f85f f000 	ldr.w	pc, [pc]	; 96fc <__audioInitString2_veneer+0x4>
    96fc:	24004665 	.word	0x24004665

00009700 <__tPBSineTriangle_tick_veneer>:
    9700:	f85f f000 	ldr.w	pc, [pc]	; 9704 <__tPBSineTriangle_tick_veneer+0x4>
    9704:	2401580d 	.word	0x2401580d

00009708 <__MX_SPI1_Init_veneer>:
    9708:	f85f f000 	ldr.w	pc, [pc]	; 970c <__MX_SPI1_Init_veneer+0x4>
    970c:	24004151 	.word	0x24004151

00009710 <__tDiodeFilter_setFreqFast_veneer>:
    9710:	f85f f000 	ldr.w	pc, [pc]	; 9714 <__tDiodeFilter_setFreqFast_veneer+0x4>
    9714:	240144e5 	.word	0x240144e5

00009718 <__tVoc_set_tongue_shape_and_touch_veneer>:
    9718:	f85f f000 	ldr.w	pc, [pc]	; 971c <__tVoc_set_tongue_shape_and_touch_veneer+0x4>
    971c:	24019561 	.word	0x24019561

00009720 <__tCrusher_setQuality_veneer>:
    9720:	f85f f000 	ldr.w	pc, [pc]	; 9724 <__tCrusher_setQuality_veneer+0x4>
    9724:	2401141d 	.word	0x2401141d

00009728 <__LEAF_shaper_veneer>:
    9728:	f85f f000 	ldr.w	pc, [pc]	; 972c <__LEAF_shaper_veneer+0x4>
    972c:	24014b75 	.word	0x24014b75

00009730 <__tADSRT_setAttack_veneer>:
    9730:	f85f f000 	ldr.w	pc, [pc]	; 9734 <__tADSRT_setAttack_veneer+0x4>
    9734:	24011829 	.word	0x24011829

00009738 <__tPickupNonLinearity_tick_veneer>:
    9738:	f85f f000 	ldr.w	pc, [pc]	; 973c <__tPickupNonLinearity_tick_veneer+0x4>
    973c:	24016431 	.word	0x24016431

00009740 <__tSimpleLivingString3_setFreq_veneer>:
    9740:	f85f f000 	ldr.w	pc, [pc]	; 9744 <__tSimpleLivingString3_setFreq_veneer+0x4>
    9744:	24016751 	.word	0x24016751

00009748 <__tVZFilterHS_setGain_veneer>:
    9748:	f85f f000 	ldr.w	pc, [pc]	; 974c <__tVZFilterHS_setGain_veneer+0x4>
    974c:	240136c5 	.word	0x240136c5

00009750 <__tSimpleLivingString3_pluck_veneer>:
    9750:	f85f f000 	ldr.w	pc, [pc]	; 9754 <__tSimpleLivingString3_pluck_veneer+0x4>
    9754:	24016871 	.word	0x24016871

00009758 <__tTString_setDecayInSeconds_veneer>:
    9758:	f85f f000 	ldr.w	pc, [pc]	; 975c <__tTString_setDecayInSeconds_veneer+0x4>
    975c:	24017c19 	.word	0x24017c19

00009760 <__setLFOShapes_veneer>:
    9760:	f85f f000 	ldr.w	pc, [pc]	; 9764 <__setLFOShapes_veneer+0x4>
    9764:	24002f05 	.word	0x24002f05

00009768 <__tNoise_tick_veneer>:
    9768:	f85f f000 	ldr.w	pc, [pc]	; 976c <__tNoise_tick_veneer+0x4>
    976c:	24015cad 	.word	0x24015cad

00009770 <__setFilterTypes_veneer>:
    9770:	f85f f000 	ldr.w	pc, [pc]	; 9774 <__setFilterTypes_veneer+0x4>
    9774:	24002d6d 	.word	0x24002d6d

00009778 <__tTriLFO_setFreq_veneer>:
    9778:	f85f f000 	ldr.w	pc, [pc]	; 977c <__tTriLFO_setFreq_veneer+0x4>
    977c:	24016249 	.word	0x24016249

00009780 <__tHighpass_tick_veneer>:
    9780:	f85f f000 	ldr.w	pc, [pc]	; 9784 <__tHighpass_tick_veneer+0x4>
    9784:	24012951 	.word	0x24012951

00009788 <__tSimpleLivingString3_tick_veneer>:
    9788:	f85f f000 	ldr.w	pc, [pc]	; 978c <__tSimpleLivingString3_tick_veneer+0x4>
    978c:	240169c9 	.word	0x240169c9
